["```py\n\ncurl -X GET url_path?name1=value1&name2=value2\n\n```", "```py\n\ncurl -X POST  -d @datafile.txt url_path\n\n```", "```py\n\nsudo pip instal django\n\n```", "```py\n\ndjango-admin startproject test_server\n\n```", "```py\n\n└── test_server\n\n ├── manage.py\n\n └── test_server\n\n ├── __init__.py\n\n ├── settings.py\n\n ├── urls.py\n\n └── wsgi.py\n\n```", "```py\n\npython manage.py runserver 8080\n\n```", "```py\n\npython manage.py startapp nameapp\n\n```", "```py\n\n├── manage.py\n\n├── nameapp\n\n│   ├── __init__.py\n\n│   ├── admin.py\n\n│   ├── migrations\n\n│   ├── __init__.py\n\n│   ├── models.py\n\n│   ├── tests.py\n\n│   └── views.py\n\n└── test_server\n\n ├── __init__.py\n\n ├── settings.py\n\n ├── urls.py\n\n └── wsgi.py\n\n```", "```py\n    INSTALLED_APPS = (\n    ...\n    'rest_framework',\n    'rest_framework_swagger',\n    'nameapp',\n    )\n    ```", "```py\n    DATABASES = {\n           'default': {\n            'ENGINE': 'django.db.backends.sqlite3',\n            'NAME': 'mydatabase',\n            }\n          }\n    ```", "```py\n    TEMPLATE_DIRS = (\n        os.path.join(BASE_DIR, 'templates'),\n    )\n    ```", "```py\n    MEDIA_ROOT = os.path.join(BASE_DIR, 'static')\n    STATIC_URL = '/static/'\n    MEDIA_URL = ''\n    STATIC_ROOT = ''\n    STATICFILES_DIRS = ( os.path.join(BASE_DIR, \"static\"), )\n    ```", "```py\n    ROOT_URLCONF = 'test_server.urls'\n    ```", "```py\n    LOGGING = {\n        'version': 1,\n        'disable_existing_loggers': True,\n        'formatters': {\n            'standard': {\n                'format': '%(asctime)s %(levelname)s %(name)s %(message)s'\n            },\n        },\n        'handlers': {\n            'default': {\n                'level':'DEBUG',\n                'class':'logging.handlers.RotatingFileHandler',\n                'filename': 'test_server.log',\n                'maxBytes': 1024*1024*5, # 5 MB\n                'backupCount': 5,\n                'formatter':'standard',\n            },  \n        },\n    'loggers': {\n            '': {\n                'handlers': ['default'],\n                'level': 'DEBUG',\n                'propagate': True\n            },\n        }\n    }\n    ```", "```py\n\npython manage.py startapp addresesapp\n\n```", "```py\n\n├── addresesapp\n\n│\n\n ├── __init__.py\n\n│   ├── admin.py\n\n│   ├── migrations\n\n│   ├── models.py\n\n│   ├── tests.py\n\n│\n\n └── views.py\n\n├── manage.py\n\n└── test_server\n\n ├── __init__.py\n\n ├── __init__.pyc\n\n ├── settings.py\n\n ├── settings.pyc\n\n ├── static\n\n ├── templates\n\n ├── \n\nurls.py\n\n └── wsgi.py\n\n```", "```py\n\nfrom django.db import models\n\nfrom django.utils.translation import ugettext_lazy as _\n\nclass Person(models.Model):\n\n name = models.CharField(_('Name'), max_length=255, unique=True)\n\n mail = models.EmailField(max_length=255, blank=True)\n\n #display name on admin panel\n\n def __unicode__(self):\n\n return self.name\n\n```", "```py\n\npython manage.py makemigrations\n\npython manage.py migrate\n\n```", "```py\n{% extends \"addressesapp/base.html\" %}\n\n{% block content %}\n        <form action=\"\" method=\"POST\">\n            {% csrf_token %}\n            <h2 align = Center>Add person to address book </h2>\n            <p> <br><br></p>\n            <p align = Center><input type=\"search\" class=\"span3\" placeholder=\"person\" name=\"name\" id=\"search\" autofocus /> </p>\n            <p align = Center><input type=\"search\" class=\"span3\" placeholder=\"email\" name=\"email\" id=\"search\" autofocus /> </p>\n            <p align = Center><button type=\"submit\" class=\"btn btn-primary btn-large pull-center\">Add &raquo;</button></p>\n        </form>  \n{% endblock content %}\n```", "```py\n<form class=\"navbar-search pull-left\" action=\"{% url 'get_contacts' %}\" method=\"GET\">\n          {% csrf_token %}\n           <div style=\"overflow: hidden; padding-right: .5em;\">\n             <input type=\"text\" name=\"term\" style=\"width: 70%;\" />\n             <input type=\"submit\" name=\"search\" value=\"Find\" size=\"30\" style=\"float: right\" />\n            </div>\n        </form>\n```", "```py\n{% extends \"addressesapp/base.html\" %}\n\n{% block content %}\n<h2 align = Center>Email address book</h2>\n<P align=Center>[\n{% for letter in alphabet %}\nwhich is given by the book.html file:\n{% extends \"addressesapp/base.html\" %}\n\n{% block content %}\n<h2 align = Center>Email address book</h2>\n<P align=Center>[\n{% for letter in alphabet %}\n<a href=\"{% url 'addressesbook'  %}?letter={{letter}}\" > {{letter}} </a>\n{% endfor %}\n|<a href=\"addressesapp/book.html\"> Index </a> ] </P>\n<section id=\"gridSystem\">\n{% for contact in contacts %}\n<div class=\"row show-grid\">\n        <p align = Center><strong> name: </strong>{{ contact.name }} <strong>email:</strong> {{ contact.mail }}&nbsp&nbsp&nbsp&nbsp\n        <a class=\"right\" href=\"{% url 'delete_person' contact.name  %}\" >   delete </a>\n    </p>\n</div>\n{% endfor %}\n</section>\n\n{% endblock content %}\n```", "```py\n\nfrom django.conf.urls import patterns, include, url\n\nfrom django.contrib import admin\n\nfrom addressesapp.api import AddressesList\n\nurlpatterns = patterns('',\n\n url(r'^docs/', include('rest_framework_swagger.urls')),\n\n url(r'^$','addressesapp.views.main'),\n\n url(r'^book/','addressesapp.views.addressesbook',name='addressesbook'),\n\n url(r'^delete/(?P<name>.*)/','addressesapp.views.delete_person', name='delete_person'),\n\n url(r'^book-search/','addressesapp.views.get_contacts', name='get_contacts'),\n\n url(r'^addresses-list/', AddressesList.as_view(), name='addresses-list'),\n\n url(r'^notfound/','addressesapp.views.notfound',name='notfound'),url(r'^admin/', include(admin.site.urls)),)\n\n```", "```py\n\ndef main(request): \n\n context={}\n\n if request.method == 'POST':\n\n post_data = request.POST\n\n data = {}\n\n data['name'] = post_data.get('name', None)\n\n data['email'] = post_data.get('email', None)\n\n if data:\n\n return redirect('%s?%s' % (reverse('addressesapp.views.main'),\n\n urllib.urlencode({'q': data})))\n\n elif request.method == 'GET':\n\n get_data = request.GET\n\n data= get_data.get('q',None)\n\n if not data:\n\n return render_to_response(\n\n 'addressesapp/home.html', RequestContext(request, context))\n\n data = literal_eval(get_data.get('q',None))\n\n print data\n\n if not data['name'] and not data['email']:\n\n return render_to_response(\n\n 'addressesapp/home.html', RequestContext(request, context))\n\n #add person to emails address book or update\n\n if Person.objects.filter(name=data['name']).exists():\n\n p = Person.objects.get(name=data['name'])\n\n p.mail=data['email']\n\n p.save()\n\n else:\n\n p = Person()\n\n p.name=data['name']\n\n p.mail=data['email']\n\n p.save()\n\n #restart page\n\n return render_to_response(\n\n 'addressesapp/home.html', RequestContext(request, context)) \n\n```", "```py\n\ndef get_contacts(request):\n\n logging.debug('here')\n\n if request.method == 'GET':\n\n get_data = request.GET\n\n data= get_data.get('term','')\n\n if data == '':\n\n return render_to_response(\n\n 'addressesapp/nopersonfound.html', RequestContext(request, {}))\n\n else:\n\n return redirect('%s?%s' % (reverse('addressesapp.views.addressesbook'),\n\n urllib.urlencode({'letter': data})))\n\n```", "```py\n\ndef addressesbook(request):\n\n context = {}\n\n logging.debug('address book')\n\n get_data = request.GET\n\n letter = get_data.get('letter',None)\n\n if letter:\n\n contacts = Person.objects.filter(name__iregex=r\"(^|\\s)%s\" % letter)\n\n else:\n\n contacts = Person.objects.all()\n\n #sorted alphabetically\n\n contacts = sort_lower(contacts,\"name\")#contacts.order_by(\"name\")\n\n context['contacts']=contacts\n\n alphabetstring='ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\n context['alphabet']=[l for l in alphabetstring]\n\n return render_to_response(\n\n 'addressesapp/book.html', RequestContext(request, context)) \n\ndef sort_lower(lst, key_name):\n\n return sorted(lst, key=lambda item: getattr(item, key_name).lower())\n\n```", "```py\n\ndef delete_person(request,name):\n\n if Person.objects.filter(name=name).exists():\n\n p =  Person.objects.get(name=name)\n\n p.delete()\n\n context = {}\n\n contacts = Person.objects.all()\n\n #sorted alphabetically\n\n contacts = sort_lower(contacts,\"name\")#contacts.order_by(\"name\")\n\n context['contacts']=contacts \n\n return render_to_response(\n\n'addressesapp/book.html', RequestContext(request, context))\n\n```", "```py\n\nfrom models import Person\n\nadmin.site.register(Person)\n\n```", "```py\n\npython manage.py createsuperuser\n\n```", "```py\n\npython manage.py shell\n\n```", "```py\n\nIn [1]: from addressesapp.models import Person\n\nIn [2]: newcontact = Person()\n\nIn [3]: newcontact.name = 'myfriend1'\n\nIn [4]: newcontact.mail = 'bla@.com'\n\nIn [5]: newcontact.save()\n\nIn [6]: Person.objects.all()\n\nOut[6]: [<Person: ss>, <Person: Andrea Isoni>, <Person: www 1>, <Person: addd-ww>, <Person: myfriend1>]\n\n```", "```py\n\nfrom addressesapp.models import Person\n\nfrom django.core.management.base import BaseCommand, CommandError\n\nfrom optparse import make_option\n\nimport csv\n\nclass Command(BaseCommand):\n\noption_list = BaseCommand.option_list + (\n\n make_option('--output',\n\n dest='output', type='string',\n\n action='store',\n\n help='output file'),\n\n )\n\n def person_data(self, person):\n\n return [person.name,person.mail]\n\n def handle(self, *args, **options):\n\n outputfile = options['output']\n\ncontacts = Person.objects.all()\n\n header = ['Name','email']\n\n f = open(outputfile,'wb')\n\n writer = csv.writer(f, quoting=csv.QUOTE_NONNUMERIC)\n\n writer.writerow(header)\n\n for person in contacts:\n\n writer.writerow(self.person_data(person))\n\n```", "```py\n\npython manage.py contacts_tocsv –output='contacts_list.csv'\n\n```", "```py\n\nfrom rest_framework import viewsets, generics, views\n\nfrom rest_framework.response import Response\n\nfrom rest_framework.permissions import AllowAny\n\nfrom rest_framework.pagination import PageNumberPagination\n\nfrom addressesapp.serializers import AddressesSerializer\n\nfrom addressesapp.models import Person\n\nclass LargeResultsSetPagination(PageNumberPagination):\n\n page_size = 1000\n\n page_size_query_param = 'page_size'\n\n max_page_size = 10000\n\nclass AddressesList(generics.ListAPIView):\n\n serializer_class = AddressesSerializer\n\n permission_classes = (AllowAny,)\n\n pagination_class = LargeResultsSetPagination\n\n def get_queryset(self):\n\n query = self.request.query_params.get\n\n if query('name'):\n\n return Person.objects.filter(name=query('name')) \n\n else:\n\n return Person.objects.all()\n\n```", "```py\n\nfrom addressesapp.models import Person\n\nfrom rest_framework import serializers\n\nclass AddressesSerializer(serializers.HyperlinkedModelSerializer):\n\n class Meta:\n\n model = Person\n\n fields = ('id', 'name', 'mail')\n\n```", "```py\n\ncurl -X GET http://localhost:8000/addresses-list/\n\n```", "```py\n\ncurl -X GET http://localhost:8000/addresses-st/?name=name_value\n\n```"]