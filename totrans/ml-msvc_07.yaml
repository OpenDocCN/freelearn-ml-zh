- en: '7'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: How Machine Learning and Deep Learning Help in MSA Enterprise Systems
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapters, we analyzed the different general concepts of artificial
    intelligence, machine learning, and deep learning, and how they can be used for
    certain applications and use cases. From there, we looked at how to create an
    end-to-end machine learning system pipeline and the advantages it brings when
    establishing a robust system. Finally, we examined the different ways our machine
    learning model can degrade over time through data shifts, and the different ways
    we can identify and address them.
  prefs: []
  type: TYPE_NORMAL
- en: Having a firm understanding of the basics of machine learning, we can now begin
    to explore the use cases of machine learning in our **Microservice Service Architecture**
    (**MSA**) enterprise. In this chapter, we will go over the different concepts
    we will be proposing when integrating machine learning in to an MSA enterprise
    system to establish an intelligent MSA.
  prefs: []
  type: TYPE_NORMAL
- en: Machine learning MSA enterprise system use cases
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The space for adding machine learning to MSA enterprise systems is broad and
    can be open for many use cases. We can use machine learning for different types
    of problems that we can encounter in MSA, such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**System Load Prediction**: This will determine when a service is experiencing
    higher than usual loads and trigger measures to prevent the system from degrading
    due to excessive server loads.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**System Decay Prediction**: Similar to system load prediction, this will monitor
    the microservices and try to predict and determine anomalies in the MSA enterprise,
    allowing users to act and prevent certain issues from arising and negatively impacting
    the performance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**System Security**: In the age of cybersecurity, it is important to be able
    to protect your MSA system from targeted attacks. By studying the behavior of
    your MSA system, the model can predict and detect attacks that could be impacting
    your system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**System Resource Planning**: As your system grows and evolves, being able
    to properly allocate resources and adapt to your system needs is a critical part
    when establishing your MSA enterprise system. With machine learning, we can learn
    which services require more resources and how much we need to scale in order to
    allocate the required resources efficiently and effectively.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 7.1: Use cases of machine learning in MSA](img/B18934_07_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.1: Use cases of machine learning in MSA'
  prefs: []
  type: TYPE_NORMAL
- en: While there are many more use cases of machine learning in MSA enterprise systems,
    most use cases fall under these four categories. Before getting into the implementation
    of the different models, we need to first get an overview of the different cases
    and how we need to solve these different problems.
  prefs: []
  type: TYPE_NORMAL
- en: We can start by looking at system load predictions. This is a common issue that
    we will encounter when it comes to dealing with services in general. MSA has an
    advantage compared to monolithic systems, where the resources are dedicated to
    each microservice, allowing easier maintenance and scalability. As discussed in
    previous chapters, though, there could be cases where, in MSA, a microservice
    experiences a high load and, as a result, causes a cascading effect where the
    failures expand to other microservices.
  prefs: []
  type: TYPE_NORMAL
- en: With an intelligent MSA, we can train a model using different features, such
    as the response time, to learn the patterns of the MSA system. Similar to a microservice
    circuit breaker, this model will be able to swiftly determine whether a microservice
    is experiencing a heavy load and address the issue before it becomes too late
    and starts negatively impacting the other microservices.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.2: System load prediction model](img/B18934_07_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.2: System load prediction model'
  prefs: []
  type: TYPE_NORMAL
- en: Just like the system load prediction model, we can build a model to find anomalies
    within the MSA that could lead to decaying services. Rather than focusing only
    on the service load for a specific microservice, we can study the entire MSA and
    learn the different patterns of how it operates at a larger scale.
  prefs: []
  type: TYPE_NORMAL
- en: Certain systems can experience different system loads and bugs over certain
    times and periods. For example, our service may encounter spikes in requests over
    certain periods such as holidays and seasonal events, where the user count may
    drastically increase. Allowing the model to learn and understand the MSA and how
    it operates over time can prepare the model to better detect anomalies and prevent
    false positives.
  prefs: []
  type: TYPE_NORMAL
- en: Also, rather than monitoring separate microservices, we can evaluate clusters
    of microservices and how they interact with the entire MSA. This way, we can identify
    certain bottlenecks and bugs that could arise in our MSA.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.3: System decay prediction model](img/B18934_07_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.3: System decay prediction model'
  prefs: []
  type: TYPE_NORMAL
- en: Machine learning has been thriving in the security field. With more advanced
    attacks and methods, it has become imperative for users to protect their systems.
    Machine learning has made it easier for users to create robust models that can
    analyze and predict attacks before they can even impact their systems, and MSA
    is no different.
  prefs: []
  type: TYPE_NORMAL
- en: '**Denial of Service** (**DoS**) is a cyber-attack intended to prevent users
    from accessing certain services. These attacks are becoming more sophisticated
    with the advancements in technology. With machine learning, we can train our model
    to learn about our MSA and simulate DoS attacks such that it can be able to determine
    whether our MSA is under attack. With that, we can notify the security team or
    deploy countermeasures to fight back against certain attacks and maintain the
    integrity of our MSA.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.4: System security model](img/B18934_07_4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.4: System security model'
  prefs: []
  type: TYPE_NORMAL
- en: A part of the **self-healing** process includes resource allocation for certain
    microservices when your MSA begins to grow and expand. After a time, you may experience
    a growth in users and as a result, your microservices will have increased request
    volume. A model may incorrectly identify a problem and offer solutions that wouldn’t
    address the core problem.
  prefs: []
  type: TYPE_NORMAL
- en: Thus, building an advanced model where it can track the gradual growth of the
    MSA and determine when certain services need more resources can be a critical
    part of the system’s self-healing process. A successful implementation of the
    model can greatly improve system reliability as it can properly and efficiently
    allocate resources more effectively.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.5: System resource planning model](img/B18934_07_5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.5: System resource planning model'
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: The different types of models we can use in our MSA are not mutually exclusive.
    It is possible, and common, to combine the different use cases to build a more
    intelligent MSA. Understanding how your MSA operates and determining the different
    weaknesses it may have makes it easier for the user to determine which models
    to approach.
  prefs: []
  type: TYPE_NORMAL
- en: With certain use cases, some models can work better than others due to the nature
    of the problem. Now that we have looked at the different concepts where we can
    apply machine learning to our MSA, we can begin to dive deep into the different
    implementations and models we can use to build our machine learning models in
    the next few sections.
  prefs: []
  type: TYPE_NORMAL
- en: Enhancing system supportability and time-to-resolution (TTR) with pattern analysis
    machine learning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we can begin to make our MSA intelligent, we must first understand how
    our system performs by leveraging machine learning models to learn the common
    trends and patterns for the performance of our services. From there, we can establish
    a baseline that can be used as a reference for other advanced models to use.
  prefs: []
  type: TYPE_NORMAL
- en: As discussed in [*Chapter 4*](B18934_04.xhtml#_idTextAnchor051), supervised
    learning can occur when we have a labeled test set. For our case, we can mostly
    use supervised learning because we can easily capture the response time of our
    services in the MSA and use that as our data label.
  prefs: []
  type: TYPE_NORMAL
- en: From there, we have a wide variety of techniques that we can use to create our
    machine learning model. For simplicity, we can use a linear regression model to
    predict the expected response time for a particular microservice. Using this output,
    we can design a system where we can configure a set threshold where, if we detect
    that our MSA will reach a certain response time, we can notify the developers
    or initiate a program to resolve the issue before it occurs.
  prefs: []
  type: TYPE_NORMAL
- en: If we recall from [*Chapter 6*](B18934_06.xhtml#_idTextAnchor072), we discussed
    data shifts and how they can impact our model. It’s common for MSAs to grow and
    expand as time passes due to an increase in user counts or seasonal occasions.
    As a result, we may see a growth in response times and metrics for our MSA. This
    may falsely trigger an alert notifying us of abnormal response times when, in
    reality, it accurately depicts the normal behavior of the MSA.
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, it is important to continuously collect data and train our model
    to adapt to expected changes such that it is able to learn how the system grows
    and to correctly identify changes that are not common to our MSA.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.6: Performance baseline system flow](img/B18934_07_6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.6: Performance baseline system flow'
  prefs: []
  type: TYPE_NORMAL
- en: While this system is enough for simple problems, we can combine this model output
    with other advanced models to create a more end-to-end system, where we can understand
    the health of the MSA and make better decisions. In the next section, we will
    discuss how we can use deep learning to implement self-healing for our system.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: It’s important to start with a simple model, such as a linear regression model.
    Once the proof of concept works, you can improve your system by incorporating
    more advanced models and techniques.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing system self-healing with deep learning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have determined the baseline for our system, we can use this to
    our advantage to create a more intelligent MSA, where we can detect anomalies
    and perform system self-healing. This way, we can be more proactive in resolving
    issues before they arise and save cost and time.
  prefs: []
  type: TYPE_NORMAL
- en: '**Anomaly detection** is an effective method for identifying any abnormal events
    or trends that may occur in a system or service. For example, we can use anomaly
    detection for determining credit card fraud. We can use the user’s purchasing
    trends and, based on that information, we can determine when the user has been
    a victim of credit card fraud.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Similar to credit card fraud detection, we can apply our anomaly detection
    to our MSA. Before we can go to the different models that we can use to achieve
    our anomaly detection, let us first understand the different types of anomalies:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Point Anomaly**: This occurs when an individual point is far off from the
    rest of the data'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Contextual Anomaly**: Data is considered this way when it is not in line
    with the general data trend due to the context of the data'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Collective Anomaly**: When a group of related data instances is anomalous
    with respect to the whole dataset'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 7.7: Anomalous data](img/B18934_07_7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.7: Anomalous data'
  prefs: []
  type: TYPE_NORMAL
- en: 'An anomaly detection model can be done in the following ways:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Supervised** **Anomaly Detection**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Unsupervised** **Anomaly Detection**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A common model we can use for unsupervised learning is an **autoencoder**. As
    mentioned in [*Chapter 4*](B18934_04.xhtml#_idTextAnchor051), an autoencoder is
    a neural network composed of an encoder and a decoder. The general purpose of
    an autoencoder is to take the data and compress it to a lower dimension similar
    to PCA. That way, it is able to learn the correlations and patterns between the
    different data features. Once it learns the patterns, it can feed the compressed
    data forward to the decoder where it tries to “recreate” the original data with
    what it has learned in the encoder stage.
  prefs: []
  type: TYPE_NORMAL
- en: While experts can study the data to determine what response times are considered
    an anomaly for a particular MSA, we can leverage machine learning to help us find
    patterns and relationships that may be hard to see even for an experienced developer.
  prefs: []
  type: TYPE_NORMAL
- en: With the learned parameters, we can then use this in our supervised regression
    models to achieve more accurate results when detecting anomalies and prevent false
    positives from occurring.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.8: Self-healing using deep learning](img/B18934_07_8.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.8: Self-healing using deep learning'
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Labeling data to be used in a supervised machine learning problem can cost time
    and money. You can leverage unsupervised machine learning models to help you predict
    and label your unlabeled data. From there, you can feed your newly labeled data
    into your supervised machine learning problem, thus taking advantage of unsupervised
    learning. Keep the newly labeled data in mind and make sure it doesn’t negatively
    impact your supervised machine learning problem.
  prefs: []
  type: TYPE_NORMAL
- en: These are some of the ways in which we can take advantage of machine learning
    and deep learning to create an intelligent MSA, where it can detect anomalies
    in the system and react swiftly. These use cases can be adjusted and enhanced
    based on the user’s needs and the demands of their MSA by using different models
    and techniques.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter discussed how we can implement machine learning and deep learning
    in our MSA.
  prefs: []
  type: TYPE_NORMAL
- en: 'We first looked into the different use cases for how machine learning can be
    used to build an intelligent MSA. The uses cases can be grouped into four categories:'
  prefs: []
  type: TYPE_NORMAL
- en: System Load Prediction
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: System Decay Prediction
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: System Security
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: System Resource Planning
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We discussed each category and what role it plays when looking into creating
    an intelligent MSA.
  prefs: []
  type: TYPE_NORMAL
- en: From there, we started looking into using supervised machine learning to create
    a pattern analysis model where it can learn our MSA and create a performance baseline
    model. Using this, we can determine whether our microservice performance is abnormal.
    We can then use this to either perform actions based on a threshold or use this
    baseline to build a more advanced model.
  prefs: []
  type: TYPE_NORMAL
- en: Along with our supervised machine learning model, we can use deep learning to
    create a more sophisticated model, such as autoencoders, to find anomalies in
    our MSA. Using the combination of these two models, we can create a set of rules
    to perform based on certain predictions, such as that our MSA can self-heal with
    minimal human intervention. This allows us to save time and money when repairing
    and debugging our MSA.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapters, we will be taking what we’ve learned so far and starting
    to build our own MSA with practical examples and integrating machine learning
    to create our very own simple intelligent MSA.
  prefs: []
  type: TYPE_NORMAL
- en: 'Part 3: Practical Guide to Deploying Machine Learning in MSA Systems'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The final part of this book will bring everything covered so far to life. It
    will walk you step by step through the design and development of an intelligent
    **Microservices Architecture** (**MSA**) system, with hands-on examples and actual
    code that can be imported for real-life use cases. The part will provide an in-depth
    understanding of how to apply the DevOps process to building and running an intelligent
    enterprise MSA system, from the very start to operations and maintenance.
  prefs: []
  type: TYPE_NORMAL
- en: The part starts with the basics of containers, Docker, and how to install and
    run Docker containers. We will also gain hands-on experience in handling data
    flows between containers to build a simple project. Additionally, the chapter
    will cover a practical guide on building specific-purpose AI and how to infuse
    AI services into an MSA system.
  prefs: []
  type: TYPE_NORMAL
- en: This part delves into the application of DevOps to enterprise MSA systems, with
    a focus on organizational structure alignment and how DevOps can impact the MSA
    and its operations. We will learn how to apply DevOps throughout the project life
    cycle, from start to operations and change management and maintenance.
  prefs: []
  type: TYPE_NORMAL
- en: The part also covers how to identify and minimize system dependencies, apply
    **Quality Assurance** (**QA**) testing strategies, build microservice and MSA
    test cases, and deploy system changes and hot updates. The section will also provide
    practical examples of how to overcome system dependencies and apply testing strategies
    effectively.
  prefs: []
  type: TYPE_NORMAL
- en: In conclusion, the final part of this book will provide you with a comprehensive
    guide on how to design, develop, and maintain an intelligent enterprise MSA system,
    with a focus on practical, hands-on experience and real-life use cases. By the
    end of this part, we will be equipped with the skills and knowledge necessary
    to build our own intelligent MSA system and take the first step toward achieving
    better business results, operational performance, and business continuity.
  prefs: []
  type: TYPE_NORMAL
- en: 'This part comprises the following chapters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 8*](B18934_08.xhtml#_idTextAnchor086)*, The Role of DevOps in Building
    Intelligent MSA Systems*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 9*](B18934_09.xhtml#_idTextAnchor102)*, Building an MSA with Docker
    Containers*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 10*](B18934_10.xhtml#_idTextAnchor115)*, Building an Intelligent
    MSA System*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 11*](B18934_11.xhtml#_idTextAnchor132)*, Managing the New System’s
    Deployment – Greenfield vs. Brownfield*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 12*](B18934_12.xhtml#_idTextAnchor153)*, Deploying, Testing, and
    Operating an Intelligent MSA Systems*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Part 3: Practical Guide to Deploying Machine Learning in MSA Systems'
  prefs: []
  type: TYPE_NORMAL
