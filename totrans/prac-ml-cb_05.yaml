- en: Chapter 5. Nonlinearity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Generalized additive models - measuring the household income of New Zealand
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Smoothing splines - understanding cars and speed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Local regression - understanding drought warnings and impact
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generalized additive models - measuring the household income of New Zealand
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An income survey provides a snapshot of income levels for people and households.
    It gives median and average weekly income from most sources. There are income
    comparisons across different population groups. Income is only received intermittently,
    whereas consumption is smoothed over time. As a consequence, it is reasonable
    to expect that consumption is more directly related to current living standards
    than current income, at least for short reference periods.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to perform shrinkage methods, we will be using a dataset collected
    on the New Zealand Census 2013.
  prefs: []
  type: TYPE_NORMAL
- en: Step 1 - collecting and describing data
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `nzcensus` package contains demographic values of New Zealand that are more
    than 60 in number. These values have been accumulated at the level of mesh block,
    area unit, territorial authority, and regional council.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's get into the details.
  prefs: []
  type: TYPE_NORMAL
- en: Step 2 - exploring data
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The first step is to load the following packages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Removing Chatham Islands from the dataset. `AreaUnits2013` is an esriGeometryPolygon
    Geometry Type object. It defines area units from the 2013 Census pattern:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Creating a color palette function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Creating labels for popups. The `paste0()` function concatenates vectors after
    converting to character:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Drawing the map:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 2 - exploring data](img/image_05_001.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Step 3 - setting up the data for the model
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Getting the data into a convenient shape. Eliminate the area''s code and name,
    and the redundant coordinate system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Replacing all occurrences of a repetitive pattern. The `gsub()` function searches
    for patterns `"_2013"`, `"2013"`, and `"Prop"`, and then replaces them with `names(au)`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Fetching a logical vector indicating that a set of cases is complete:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Providing a generic name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Exploring the dimension of the `data_use` data frame. The `dim()` function
    returns the dimension of the `data_use` frame. The `data_use` `data` frame is
    passed as an input parameter. The result clearly states that there are `1785`
    rows of data and `69` columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 3 - setting up the data for the model](img/image_05_002.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Creating syntactically valid names out of character vectors and setting them.
    The `names()` function sets the names of the `data_use` object while it creates
    syntactically valid names out of character vectors returned:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Displaying the names created from the `data_use` data frame:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 3 - setting up the data for the model](img/image_05_003.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Step 4 - building the model
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Estimating the strength of the non-parametric model. `spearman2()` computes
    the square of Spearman''s rho rank correlation, and a generalization of it in
    which *x* can relate non-monotonically to *y*. This is done by computing the Spearman
    multiple rho-squared between *(rank(x), rank(x)^2)*, and *y*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Ordering data in descending order:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 4 - building the model](img/image_05_004.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Allocating flexible splines to the first 15 variables. The `terms()` function
    extracts `terms` objects from multiple R data objects:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Fitting the generalized additive model. `reg_formula` is the formula, while
    `data_use` is the dataset.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Plotting `gam_model`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 4 - building the model](img/image_05_005.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Printing the `rmses_gam_boot` data frame:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 4 - building the model](img/image_05_006.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Calculating the mean of `rmses_gam_boot$t`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Printing the `gam_rmse` data frame:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 4 - building the model](img/image_05_007.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Smoothing splines - understanding cars and speed
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to determine the parameters required in statistics for fitting a model,
    multiple methods can be used. In each of the cases, fitting involves the estimating
    of a small number of parameters from the data. Apart from estimating parameters,
    two important stages are the identification of a suitable model and the verification
    of the model. These smoothing methods can be used in a variety of ways: to aid
    understanding and produce smoothed plots, to identify a suitable parametric model
    from the shape of the smoothed data, or to focus on the effects of interest in
    order to eliminate complex effects which are of no use.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's get into the details.
  prefs: []
  type: TYPE_NORMAL
- en: Step 1 - exploring the data
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The first step is to load the following packages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Creating a matrix. The `cbind()` function takes the sequence of numbers and
    creates a matrix. The result is then passed to the `matrix()` function, which
    creates the matrix with two rows. The result is then stored in the matrix:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Step 2 - creating the model
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Cholesky factorization creates positive-definite matrix *A*, which can be factored
    as *A=LL^T*, where *L* is lower triangular with positive diagonal elements. The `chol()` function
    computes Cholesky factorization of a real, symmetrical, positive-definite square
    matrix. The result is then stored in `cholsky`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '![Step 2 - creating the model](img/image_05_008.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Number of observations for density distribution:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Calculating a matrix using normal distribution. `rnorm()` calculates normal
    distribution, with `numobs` as the number of observations to be used. The result
    is then used by the `matrix()` function to the compute matrix, with `nrow=nvars`
    as two rows and `ncol=numobs` as 1,000 columns. The result is stored in `random_normal`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Performing matrix multiplication. `cholsky` is multiplied with matrix `random_normal`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Transposing matrix `X`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Creating a data frame of the matrix. The `as.data.frame()` function creates
    the data frame raw, tightly coupled collections of variables which share many
    of the properties of matrix `newX`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Printing the raw data frame. The `head()` function returns the first part of
    the raw data frame. The raw data frame is passed as an input parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 2 - creating the model](img/image_05_009.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Creating a transposed data frame of `random_normal`. The `t()` function creates
    a transposed matrix of the `random_normal` matrix, which is then converted to
    tightly coupled collections of variables. These share many of the properties of
    the matrix:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Combining the names response and `predictor1`. The `c()` function combines
    the arguments response and `predictor1` to form a vector:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Exponential rise of `raw$predictor1` to power 3:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Printing the `raw$predictor1_3` data frame. The `head()` function returns the
    first part of the `raw$predictor1_3` data frame. The `raw$predictor1_3data` frame
    is passed as an input parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 2 - creating the model](img/image_05_010.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Exponential rise of `raw$predictor1` to power 2:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Printing the `raw$predictor1_2` data frame. The `head()` function returns the
    first part of the `raw$predictor1_2` data frame. The `raw$predictor1_2` data frame
    is passed as an input parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 2 - creating the model](img/image_05_011.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Building an ordinary least squares estimation with `raw$response ~ raw$predictor1_3`
    as the formula. The `lm()` function is used to fit linear models. `raw$response
    ~ raw$predictor1_3` is the formula. The result is then stored in the fit data
    frame:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Printing the fit data frame:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 2 - creating the model](img/image_05_012.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Plotting the ordinary least squares estimation formula. The `plot()` function
    is a Generic function for plotting R objects. The `raw$response ~ raw$predictor1_3`
    formula is passed as a function value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 2 - creating the model](img/image_05_013.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Adding a straight function through the current plot:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 2 - creating the model](img/image_05_014.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Fitting the value of cars and speeds on the *x* axis:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Fitting the value of cars and speeds on the y axis:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Setting the number of points for smooth curve evaluation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Step 3 - fitting the smooth curve model
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Fitting a smooth curve between two variables is a non-parametric method, because
    the linearity assumptions of conventional regression methods have been relaxed.
    It is called **local regression**, because the fitting at, say, point *x*, is
    weighted toward the data nearest to *x*.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `loess.smooth()` function plots and adds a smooth curve computed to a scatter
    plot. `x_axis`, `y_axis` are the arguments provided to the x and y coordinates
    of the plot. `evaluation = eval.length` for example `eval_length = 50`, represents
    the points for smooth curve evaluation. `span=.75` is the smoothness parameter.
    `degree=1` is the degree of the local polynomial:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Printing the `fit_loess` data frame:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 3 - fitting the smooth curve model](img/image_05_015.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Fitting a polynomial surface on the basis of one or more numerical predictors,
    using local fitting. The `loess()` function fits the polynomial surface. `y_axis
    ~ x_axis` represents the formula. `span=.75` is the smoothness parameter. `degree=1`
    is the degree of the local polynomial:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Printing the `fit_loess_2` data frame:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 3 - fitting the smooth curve model](img/image_05_016.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Generating regular sequences of minimum and maximum values of the *y* axis.
    The `Seq()` function takes in `length.out=eval_length` for example `eval_length
    = 50`, which indicates the desired length of the sequence to be generated from
    the minimum and maximum values of the *x* axis:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Printing the `new_x_axis` data frame:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 3 - fitting the smooth curve model](img/image_05_017.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Setting a confidence level of 95% on the `fit.loess` model:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Building an ordinary least squares estimation with `y_axis ~ x_axis` as the
    formula. The `lm()` function is used to fit linear models. `y_axis ~ x_axis` is
    the formula. The result is then stored in the `fit_lm` data frame:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'Printing the `fit_lm` data frame:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 3 - fitting the smooth curve model](img/image_05_018.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Building a polynomial function. `y_axis ~ poly(x_axis,3)` is a polynomial function
    with three degrees of freedom. The `lm()` function is used to fit linear models.
    `y_axis ~ poly(x_axis,3)` is the formula. The result is then stored in the `fit_poly`
    data frame:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'Printing the `fit_poly` data frame:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 3 - fitting the smooth curve model](img/image_05_019.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Building a natural spline function. `y_axis ~ ns(x_axis, 3)` is the natural
    spline function with degree 3 of freedom. The `lm()` function is used to fit linear
    models. `y_axis ~ ns(x_axis, 3)` is the formula. The result is then stored in
    the `fit_nat_spline` data frame:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'Printing the `fit_nat_spline` data frame:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 3 - fitting the smooth curve model](img/image_05_020.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Smoothing of the spline:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'Printing the `fit_smth_spline` data frame:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 3 - fitting the smooth curve model](img/image_05_021.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Step 4 - plotting the results
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Plotting the model:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 4 - plotting the results](img/image_05_022.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Adding additional models to the graph. Plotting LOESS with Confidence Intervals:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 4 - plotting the results](img/image_05_023.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Plotting an ordinary least squares estimation. The `predict()` function predicts
    values based on linear models. `fit_lm` is an object of class `lm`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 4 - plotting the results](img/image_05_024.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Plotting a polynomial function estimation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 4 - plotting the results](img/B04714_05_38.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Plotting a natural spline function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 4 - plotting the results](img/image_05_025.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Plotting a smoothed spline:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 4 - plotting the results](img/image_05_026.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Plotting a kernel curve. The `ksmooth()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 4 - plotting the results](img/image_05_027.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Local regression - understanding drought warnings and impact
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Drought is a natural hazard which is measured and characterized by lower-than-expected
    or lower-than-normal rainfall. This condition, when prolonged over a longer-than-normal
    time period is insufficient to meet the demands of human activities and hazardous
    to the environment. Drought is a temporary phenomenon. Three main distinguishing
    features of droughts are intensity, duration, and spatial coverage. A drought
    early warning system can help to identify the climatic changes, understand water
    supply trends, and prepare for upcoming emergencies. The drought warning can help
    decision-makers take appropriate measures to face the upcoming challenge. They
    can then measure the severity of the impact and understand the underlying causes
    of vulnerability to reduce risk for a particular location and for a specific group
    of people or economic sector.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's get started with the recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Step 1 - collecting and describing data
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `dataRetrieval` package is a collection of functions to help retrieve **US
    Geological Survey** (**USGS**) and **US Environmental Protection Agency** (**EPA**).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's get into the details.
  prefs: []
  type: TYPE_NORMAL
- en: Step 2 - collecting and exploring data
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The first step is to load the following packages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'Retrieving the site number. The site number is usually an eight-digit number,
    which is represented as a string or vector:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'Retrieving parameter codes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'Using site number and parameter codes importing data from NWIS web service.
    The result is then stored in the `Q_daily` data frame:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'Printing the `Q_daily` data frame. The `tail()` function returns the last part
    of the `Q_daily` data frame. The `Q_daily` data frame is passed as an input parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 2 - collecting and exploring data](img/image_05_028.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Exploring the internal structure of the `Q_daily` data frame. The `str()` function
    displays the internal structure of the data frame. The `Q_daily` is passed as
    an R object to the `str()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 2 - collecting and exploring data](img/image_05_029.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Renaming columns--the `renameNWISColumns()` function renames columns retrieved
    from NWIS. `Q_daily` is the daily or unit-values dataset retrieved from NWIS Web:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: 'Printing the renamed `Q_daily` data frame. The `tail()` function returns the
    last part of the `Q_daily` data frame. The `Q_daily` data frame is passed as an
    input parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 2 - collecting and exploring data](img/image_05_030.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Importing data from the USGS file site. The `readNWISsite()` function uses
    `siteNumber` 8 digit number which represents the USGS site number. The result
    is then stored in the `stationInfo` data frame:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: Step 3 - calculating the moving average
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Checking for missing days:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: 'Calculating the moving average for 30 days. The `filter()` function applies
    linear filtering to a time series. `sides=1`, the filter coefficients are applied
    for past values only:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: 'Printing the `Q_daily` data frame. The `tail()` function returns the last part
    of the `Q_daily` data frame. The `Q_daily` data frame is passed as an input parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 3 - calculating the moving average](img/image_05_031.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Step 4 - calculating percentiles
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Calculating historical percentiles. The various quantiles are calculated using
    respective probabilities. Then, the data frame is collapsed into a single row,
    using the `summarize()` function. Finally, using the function `group_by()`, the
    results, which are in table form, are converted and grouped into a table:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: 'Obtaining the current year from the system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: 'Combining each of the data frames:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: 'Printing the `Q_summary` data frame:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 4 - calculating percentiles](img/image_05_032.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: 'Predicting values based on a linear model and fitting a polynomial surface.
    The `loess()` function fits the polynomial surface. `p75~day.of.year` represents
    the formula, while `span = smooth.span` for example `smooth.span= 0.3`, controls
    the degree of smoothing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: 'Printing the `Q_summary$sm.75` data frame:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 4 - calculating percentiles](img/image_05_033.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: 'Printing the `Q_summary$sm.25` data frame:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 4 - calculating percentiles](img/image_05_034.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: 'Printing the `Q_summary$sm.10` data frame:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 4 - calculating percentiles](img/image_05_035.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: 'Printing the `Q_summary$sm.05` data frame:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 4 - calculating percentiles](img/image_05_036.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: 'Printing the `Q_summary$sm.05` data frame:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 4 - calculating percentiles](img/image_05_037.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: 'Printing the `Q_summary` data frame:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 4 - calculating percentiles](img/image_05_038.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: Step 5 - plotting results
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Plotting the data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 5 - plotting results](img/image_05_039.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 5 - plotting results](img/image_05_040.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 5 - plotting results](img/image_05_041.jpg)'
  prefs: []
  type: TYPE_IMG
