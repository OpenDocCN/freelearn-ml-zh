["```py\n/opt/carla-simulator/\n```", "```py\n$  /opt/carla-simulator/bin/CarlaUE4.sh -opengl\n```", "```py\n$  ln -s /full/path/to/Packt-Town04-PID.py /opt/carla-simulator/PythonAPI/examples/\n```", "```py\ntry:\n    sys.path.append(glob.glob('../carla/dist/carla-*%d.%d-%s.egg' % (\n        sys.version_info.major,\n        sys.version_info.minor,\n        'win-amd64' if os.name == 'nt' else 'linux-x86_64'))[0])\nexcept IndexError:\n    pass\n```", "```py\nselected_world = client.load_world(\"Town04\")\n```", "```py\nblueprint=self.world.get_blueprint_library().filter('vehicle.lincoln.mkz2017')[0] \n        blueprint.set_attribute('role_name', 'hero')\n        if blueprint.has_attribute('color'):\n            color = '236,102,17'\n            blueprint.set_attribute('color', color)\n```", "```py\nspawn_point = spawn_points[0] if spawn_points else carla.Transform()\n```", "```py\n        self._k_p = K_P\n        self._k_d = K_D\n        self._k_i = K_I\n```", "```py\n        self.args_long_hw_dict = {\n            'K_P': 0.37,\n            'K_D': 0.024,\n            'K_I': 0.032,\n            'dt': 1.0 / self.FPS}\n        self.args_long_city_dict = {\n            'K_P': 0.15,\n            'K_D': 0.05,\n            'K_I': 0.07,\n            'dt': 1.0 / self.FPS}\n```", "```py\n   if target_speed > 50:\n            args_lat = self.args_lat_hw_dict\n            args_long = self.args_long_hw_dict\n        else:\n            args_lat = self.args_lat_city_dict\n            args_long = self.args_long_city_dict\n```", "```py\n            error = target_speed – current_speed\n    ```", "```py\n            self._error_buffer.append(error)\n    ```", "```py\n            if len(self._error_buffer) >= 2:\n    ```", "```py\n                _de = (self._error_buffer[-1] - self._error_buffer[-2]) / self._dt\n    ```", "```py\n                _ie = sum(self._error_buffer) * self._dt\n    ```", "```py\n            else:\n                _de = 0.0\n                _ie = 0.0\n    ```", "```py\n        return np.clip((self._k_p * error) + (self._k_d * _de) + (self._k_i * _ie), -1.0, 1.0)\n```", "```py\n        self._k_p = K_P\n        self._k_d = K_D\n        self._k_i = K_I\n```", "```py\n        self.args_lat_hw_dict = {\n            'K_P': 0.75,\n            'K_D': 0.02,\n            'K_I': 0.4,\n            'dt': 1.0 / self.FPS}\n        self.args_lat_city_dict = {\n            'K_P': 0.58,\n            'K_D': 0.02,\n            'K_I': 0.5,\n            'dt': 1.0 / self.FPS}\n```", "```py\n   if target_speed > 50:\n            args_lat = self.args_lat_hw_dict\n            args_long = self.args_long_hw_dict\n        else:\n            args_lat = self.args_lat_city_dict\n            args_long = self.args_long_city_dict\n```", "```py\n            v_begin = vehicle_transform.location\n    ```", "```py\n            v_end = v_begin + carla.Location(x=math.cos(math.radians(vehicle_transform.rotation.yaw)),\n                                             y=math.sin(math.radians(vehicle_transform.rotation.yaw)))\n    ```", "```py\n            v_vec = np.array([v_end.x - v_begin.x, v_end.y - v_begin.y, 0.0])\n    ```", "```py\n            w_vec = np.array([waypoint.transform.location.x -\n                              v_begin.x, waypoint.transform.location.y -\n                              v_begin.y, 0.0])\n    ```", "```py\n            _dot = math.acos(np.clip(np.dot(w_vec, v_vec) /\n                                     (np.linalg.norm(w_vec) * np.linalg.norm(v_vec)), -1.0, 1.0))\n    ```", "```py\n            _cross = np.cross(v_vec, w_vec)\n    ```", "```py\n            if _cross[2] < 0:\n                _dot *= -1.0\n    ```", "```py\n            self._e_buffer.append(_dot)\n    ```", "```py\n            if len(self._e_buffer) >= 2:\n    ```", "```py\n                _de = (self._e_buffer[-1] - self._e_buffer[-2]) / self._dt\n    ```", "```py\n                _ie = sum(self._e_buffer) * self._dt\n    ```", "```py\n            else:\n                _de = 0.0\n                _ie = 0.0\n    ```", "```py\n        return np.clip((self._k_p * _dot) + (self._k_d * _de) + (self._k_i * _ie), -1.0, 1.0)\n```", "```py\n$  /opt/carla-simulator/bin/CarlaUE4.sh -opengl\n```", "```py\n$  python3 /opt/carla-simulator/PythonAPI/examples/Packt-Town04-PID.py\n```", "```py\n    Main.cpp --> polyfit()\n    ```", "```py\n    Main.cpp --> polyeval()\n    double cte = polyeval(coeffs, px) - py;\n    ```", "```py\n    double epsi = psi - atan(coeffs[1] + 2*coeffs[2]*px + 3*coeffs[3]*px*px) ;\n    ```", "```py\n    size_t x_start = 0;\n    size_t y_start = x_start + N;\n    size_t psi_start = y_start + N;\n    size_t v_start = psi_start + N;\n    size_t cte_start = v_start + N;\n    size_t epsi_start = cte_start + N;\n    size_t delta_start = epsi_start + N;\n    size_t a_start = delta_start + N - 1;\n    ```", "```py\n    const double w_cte = 1;\n    const double w_epsi = 100;\n    const double w_v = 1;\n    const double w_delta = 10000;\n    const double w_a = 7;\n    const double w_delta_smooth = 1000;\n    const double w_a_smooth = 1;\n    const double w_throttle_steer = 10;\n    ```", "```py\n    for (int t = 0; t < N; t++) {\n        fg[0] += w_cte * CppAD::pow(vars[cte_start + t], 2);\n        fg[0] += w_epsi * CppAD::pow(vars[epsi_start + t], 2);\n        fg[0] += w_v * CppAD::pow(vars[v_start + t] - ref_v, 2);\n        }\n\n    ```", "```py\n    for (int t = 0; t < N - 1; t++) {\n        fg[0] += w_delta * CppAD::pow(vars[delta_start + t], 2);\n        fg[0] += w_a * CppAD::pow(vars[a_start + t], 2);\n        }\n    ```", "```py\n    for (int t = 0; t < N - 2; t++) {\n        fg[0] += w_delta_smooth * CppAD::pow(vars[delta_start + t                                    + 1] - vars[delta_start + t], 2);\n        fg[0] += w_a_smooth * CppAD::pow(vars[a_start + t + 1]                                               - vars[a_start + t], 2);\n        }\n\n    ```", "```py\n    for (int t = 0; t < N - 1; t++) {\n        fg[0] += w_throttle_steer * CppAD::pow(vars[delta_start                                          + t] / vars[a_start + t], 2);\n\n        }\n    ```", "```py\n    fg[1 + x_start] = vars[x_start];\n    fg[1 + y_start] = vars[y_start];\n    fg[1 + psi_start] = vars[psi_start];\n    fg[1 + v_start] = vars[v_start];\n    fg[1 + cte_start] = vars[cte_start];\n    fg[1 + epsi_start] = vars[epsi_start];\n    ```", "```py\n    for (int t = 1; t < N; t++) {\n          AD<double> x1 = vars[x_start + t];\n          AD<double> y1 = vars[y_start + t];\n          AD<double> psi1 = vars[psi_start + t];\n          AD<double> v1 = vars[v_start + t];\n          AD<double> cte1 = vars[cte_start + t];\n          AD<double> epsi1 = vars[epsi_start + t];\n    ```", "```py\n          AD<double> x0 = vars[x_start + t - 1];\n          AD<double> y0 = vars[y_start + t - 1];\n          AD<double> psi0 = vars[psi_start + t - 1];\n          AD<double> v0 = vars[v_start + t - 1];\n          AD<double> cte0 = vars[cte_start + t - 1];\n          AD<double> epsi0 = vars[epsi_start + t - 1];\n    ```", "```py\n          AD<double> delta0 = vars[delta_start + t - 1];\n          AD<double> a0 = vars[a_start + t - 1];\n    ```", "```py\n    AD<double> f0 = 0.0;\n    for (int i=0; i<coeffs.size(); i++){\n    f0 += coeffs[i] * CppAD::pow(x0, i);\n    }\n    ```", "```py\n          AD<double> psides0 = 0.0;\n          for (int i=1; i<coeffs.size(); i++){\n    psides0 += i * coeffs[i] * pow(x0, i-1);\n          }\n          psides0 = CppAD::atan(psides0);\n    ```", "```py\n          fg[1 + x_start + t] = x1 - (x0 + v0 * CppAD::cos(psi0) * dt);\n          fg[1 + y_start + t] = y1 - (y0 + v0 * CppAD::sin(psi0) * dt);\n          fg[1 + psi_start + t] = psi1 - (psi0 + v0 * delta0 * dt / Lf);\n          fg[1 + v_start + t] = v1 - (v0 + a0 * dt);\n          fg[1 + cte_start + t] = cte1 - ((f0 - y0) + (v0 * CppAD::sin(epsi0) * dt));\n          fg[1 + epsi_start + t] = epsi1 - ((psi0 - psides0) + v0 * delta0 / Lf * dt);\n\n    }\n    ```"]