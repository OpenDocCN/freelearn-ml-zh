["```py\n> set.seed(5427395)\n> nObs = 100\n> x1minrange = 5\n> x1maxrange = 25\n> x1 = runif(nObs, x1minrange, x1maxrange)\n> e = rnorm(nObs, mean = 0, sd = 2.0)\n> y = 1.67 * x1 - 2.93 + e\n> df = data.frame(y, x1)\n```", "```py\n> myfit <- lm(y~x1, df)\n> myfit\n\nCall:\nlm(formula = y ~ x1, data = df)\n\nCoefficients:\n(Intercept)           x1  \n     -2.380        1.641  \n```", "```py\n> machine <- read.csv(\"machine.data\", header = F)\n> names(machine) <- c(\"VENDOR\", \"MODEL\", \"MYCT\", \"MMIN\", \"MMAX\", \"CACH\", \"CHMIN\", \"CHMAX\", \"PRP\", \"ERP\")\n> machine <- machine[, 3:9]\n> head(machine, n = 3)\n  MYCT MMIN  MMAX CACH CHMIN CHMAX PRP\n1  125  256  6000  256    16   128 198\n2   29 8000 32000   32     8    32 269\n3   29 8000 32000   32     8    32 220\n```", "```py\n> library(caret)\n> set.seed(4352345)\n> machine_sampling_vector <- createDataPartition(machine$PRP, p = 0.85, list = FALSE)\n> machine_train <- machine[machine_sampling_vector,]\n> machine_train_features <- machine[, 1:6]\n> machine_train_labels <- machine$PRP[machine_sampling_vector]\n> machine_test <- machine[-machine_sampling_vector,]\n> machine_test_labels <- machine$PRP[-machine_sampling_vector]\n```", "```py\n> machine_correlations <- cor(machine_train_features)\n> findCorrelation(machine_correlations)\ninteger(0)\n> findCorrelation(machine_correlations, cutoff = 0.75)\n[1] 3\n> cor(machine_train$MMIN, machine_train$MMAX)\n[1] 0.7679307\n```", "```py\n> library(caret)\n> data(cars)\n> cars_cor <- cor(cars_train_features)\n> findCorrelation(cars_cor)\ninteger(0)\n> findCorrelation(cars_cor, cutoff = 0.75)\n[1] 3\n> cor(cars$Doors,cars$coupe)\n[1] -0.8254435\n> table(cars$coupe,cars$Doors)\n\n      2   4\n  0  50 614\n  1 140   0\n```", "```py\n> findLinearCombos(cars)\n$linearCombos\n$linearCombos[[1]]\n[1] 15  4  8  9 10 11 12 13 14\n\n$linearCombos[[2]]\n [1] 18  4  8  9 10 11 12 13 16 17\n\n$remove\n[1] 15 18\n```", "```py\n> cars <- cars[,c(-15, -18)]\n> set.seed(232455)\n> cars_sampling_vector <- createDataPartition(cars$Price, p = \n  0.85, list = FALSE)\n> cars_train <- cars[cars_sampling_vector,]\n> cars_train_features <- cars[,-1]\n> cars_train_labels <- cars$Price[cars_sampling_vector]\n> cars_test <- cars[-cars_sampling_vector,]\n> cars_test_labels <- cars$Price[-cars_sampling_vector]\n```", "```py\n> machine_model1 <- lm(PRP ~ ., data = machine_train)\n> cars_model1 <- lm(Price ~ ., data = cars_train)\n```", "```py\n> summary(machine_model1)\n\nCall:\nlm(formula = PRP ~ ., data = machine_train)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-199.29  -24.15    6.91   26.26  377.47 \n\nCoefficients:\n              Estimate Std. Error t value Pr(>|t|)    \n(Intercept) -5.963e+01  8.861e+00  -6.730 2.43e-10 ***\nMYCT         5.210e-02  1.885e-02   2.764 0.006335 ** \nMMIN         1.543e-02  2.025e-03   7.621 1.62e-12 ***\nMMAX         5.852e-03  6.867e-04   8.522 7.68e-15 ***\nCACH         5.311e-01  1.494e-01   3.555 0.000488 ***\nCHMIN        7.761e-02  1.055e+00   0.074 0.941450    \nCHMAX        1.498e+00  2.304e-01   6.504 8.20e-10 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 61.31 on 172 degrees of freedom\nMultiple R-squared:  0.874,\tAdjusted R-squared:  0.8696 \nF-statistic: 198.8 on 6 and 172 DF,  p-value: < 2.2e-16\n```", "```py\nCoefficients: (1 not defined because of singularities)\n```", "```py\n> alias(cars_model1)\nModel :\nPrice ~ Mileage + Cylinder + Doors + Cruise + Sound + Leather + \n    Buick + Cadillac + Chevy + Pontiac + Saab + Saturn + convertible + hatchback + sedan\n\nComplete :\n       (Intercept) Mileage Cylinder Doors Cruise Sound\nSaturn  1           0       0        0     0      0   \n       Leather Buick Cadillac Chevy Pontiac Saab convertible\nSaturn  0      -1    -1       -1    -1      -1    0         \n       hatchback sedan\nSaturn  0         0   \n```", "```py\n> cars_model2 <- lm(Price ~. -Saturn, data = cars_train)\n> summary(cars_model2)\n\nCall:\nlm(formula = Price ~ . - Saturn, data = cars_train)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-9324.8 -1606.7   150.5  1444.6 13461.0 \n\nCoefficients:\n              Estimate Std. Error t value Pr(>|t|)    \n(Intercept)  -954.1919  1071.2553  -0.891  0.37340    \nMileage        -0.1877     0.0137 -13.693  < 2e-16 ***\nCylinder     3640.5417   123.5788  29.459  < 2e-16 ***\nDoors        1552.4008   284.3939   5.459 6.77e-08 ***\nCruise        330.0989   324.8880   1.016  0.30998    \nSound         388.4549   256.3885   1.515  0.13022    \nLeather       851.3683   274.5213   3.101  0.00201 ** \nBuick        1104.4670   595.0681   1.856  0.06389 .  \nCadillac    13288.4889   673.6959  19.725  < 2e-16 ***\nChevy        -553.1553   468.0745  -1.182  0.23772    \nPontiac     -1450.8865   524.9950  -2.764  0.00587 ** \nSaab        12199.2093   600.4454  20.317  < 2e-16 ***\nconvertible 11270.4878   597.5162  18.862  < 2e-16 ***\nhatchback   -6375.4970   669.6840  -9.520  < 2e-16 ***\nsedan       -4441.9152   490.8347  -9.050  < 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 2947 on 669 degrees of freedom\nMultiple R-squared:  0.912,\tAdjusted R-squared:  0.9101 \nF-statistic: 495.1 on 14 and 669 DF,  p-value: < 2.2e-16\n```", "```py\n> summary(cars_model2$residuals)\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n-9325.0 -1607.0   150.5     0.0  1445.0 13460.0 \n> mean(cars_train$Price)\n[1] 21320.2\n```", "```py\n> par(mfrow = c(2, 1))\n> machine_residuals <- machine_model1$residuals\n> qqnorm(machine_residuals, main = \"Normal Q-Q Plot for CPU data set\")\n> qqline(machine_residuals)\n> cars_residuals <- cars_model2$residuals\n> qqnorm(cars_residuals, main = \"Normal Q-Q Plot for Cars \\data set\")\n> qqline(cars_residuals)\n```", "```py\n              Estimate Std. Error t value Pr(>|t|)    \n(Intercept) -5.963e+01  8.861e+00  -6.730 2.43e-10 ***\nMYCT         5.210e-02  1.885e-02   2.764 0.006335 ** \n```", "```py\n> (q <- 5.210e-02 / 1.885e-02)\n[1] 2.763926\n```", "```py\n> pt(q, df = 172, lower.tail = F) * 2\n[1] 0.006333496\n```", "```py\n> machine_model_null <- lm(PRP ~ 1, data = machine_train)\n> anova(machine_model_null, machine_model1)\nAnalysis of Variance Table\n\nModel 1: PRP ~ 1\nModel 2: PRP ~ MYCT + MMIN + MMAX + CACH + CHMIN + CHMAX\n  Res.Df     RSS Df Sum of Sq      F    Pr(>F)    \n1    178 5130399                                  \n2    172  646479  6   4483919 198.83 < 2.2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```", "```py\n> n_machine <- nrow(machine_train)\n> k_machine <- length(machine_model1$coefficients) - 1\n> sqrt(sum(machine_model1$residuals ^ 2) / (n_machine - k_machine - 1))\n[1] 61.30743\n\n> n_cars <- nrow(cars_train)\n> k_cars <- length(cars_model2$coefficients) - 1\n> sqrt(sum(cars_model2$residuals ^ 2) / (n_cars - k_cars - 1))\n[1] 2946.98\n```", "```py\n> mean(machine_train$PRP)\n[1] 109.4804\n> mean(cars_train$Price)\n[1] 21320.2\n```", "```py\ncompute_rsquared <- function(x, y) {\n     rss <- sum((x - y) ^ 2)\n     tss <- sum((y - mean(y)) ^ 2)\n     return(1 - (rss / tss))\n }\n\n> compute_rsquared(machine_model1$fitted.values, machine_train$PRP)\n[1] 0.8739904\n> compute_rsquared(cars_model2$fitted.values, cars_train$Price)\n[1] 0.9119826\n```", "```py\ncompute_adjusted_rsquared <- function(x, y, k) {\n     n <- length(y)\n     r2 <- compute_rsquared(x, y)\n     return(1 - ((1 - r2) * (n - 1) / (n - k - 1)))\n }\n\n> compute_adjusted_rsquared(machine_model1$fitted.values, \n                            machine_train$PRP, k_machine)\n[1] 0.8695947\n> compute_adjusted_rsquared(cars_model2$fitted.values, \n                            cars_train$Price, k_cars)\n[1] 0.9101407\n```", "```py\n> machine_model1_predictions <- predict(machine_model1, \n                                        machine_test)\n> cars_model2_predictions <- predict(cars_model2, cars_test)\n```", "```py\ncompute_mse <- function(predictions, actual) { \n     mean( (predictions - actual) ^ 2 ) \n}\n> compute_mse(machine_model1$fitted.values, machine_train$PRP)\n[1] 3611.616\n> compute_mse(machine_model1_predictions, machine_test$PRP)\n[1] 2814.048\n> \n> compute_mse(cars_model2$fitted.values, cars_train$Price)\n[1] 8494240\n> compute_mse(cars_model2_predictions, cars_test$Price)\n[1] 7180150\n```", "```py\n> library(\"car\")\n> vif(cars_model2)\n    Mileage    Cylinder       Doors      Cruise       Sound \n   1.010779    2.305737    4.663813    1.527898    1.137607 \n    Leather       Buick    Cadillac       Chevy     Pontiac \n   1.205977    2.464238    3.158473    4.138318    3.201605 \n       Saab convertible   hatchback       sedan \n   3.515018    1.620590    2.481131    4.550556\n```", "```py\n> sedan_model <- lm(sedan ~ .-Price -Saturn, data = cars_train)\n> sedan_r2 <- compute_rsquared(sedan_model$fitted.values, cars_train$sedan)\n> 1 / (1-sedan_r2)\n[1] 4.550556\n```", "```py\n> machine_model2 <- lm(PRP ~ ., data = machine_ train[!(rownames(machine_train)) %in% c(200),])\n> summary(machine_model2)\n...\nResidual standard error: 51.37 on 171 degrees of freedom\nMultiple R-squared:  0.8884,\tAdjusted R-squared:  0.8844\nF-statistic: 226.8 on 6 and 171 DF,  p-value: < 2.2e-16\n```", "```py\n> machine_model2_predictions <- predict(machine_model2, \n                                        machine_test)\n> compute_mse(machine_model2_predictions, machine_test$PRP)\n[1] 2555.355\n```", "```py\n> machine_model3 <- step(machine_model_null, scope = list(lower = machine_model_null, upper = machine_model1), direction = \"forward\")\n```", "```py\n> cars_model_null <- lm(Price ~ 1, data = cars_train)\n> cars_model3 <- step(cars_model2, scope = list( \n  lower=cars_model_null, upper=cars_model2), direction = \"backward\")\n```", "```py\nCall:\nlm(formula = Price ~ Mileage + Cylinder + Doors + Leather + Buick + Cadillac + Pontiac + Saab + convertible + hatchback + sedan,\n    data = cars_train)\n```", "```py\n> machine_model3_predictions <- predict(machine_model3, machine_test)\n> compute_mse(machine_model3_predictions, machine_test$PRP)\n[1] 2805.762\n> \n> cars_model3_predictions <- predict(cars_model3, cars_test)\n> compute_mse(cars_model3_predictions, cars_test$Price)\n[1] 7262383\n```", "```py\n> library(glmnet)\n> cars_train_mat <- model.matrix(Price ~ .-Saturn, cars_train)[,-1]\n> lambdas <- 10 ^ seq(8, -4, length = 250)\n> cars_models_ridge <- \n  glmnet(cars_train_mat, cars_train$Price, alpha = 0, lambda = lambdas)\n> cars_models_lasso <- \n  glmnet(cars_train_mat, cars_train$Price, alpha = 1, lambda = lambdas)\n```", "```py\n> cars_models_ridge$lambda[100]\n[1] 1694.009\n> coef(cars_models_ridge)[,100]\n  (Intercept)       Mileage      Cylinder         Doors \n 6217.5498831    -0.1574441  2757.9937160   371.2268405 \n       Cruise         Sound       Leather         Buick \n 1694.6023651   100.2323812  1326.7744321  -358.8397493 \n     Cadillac         Chevy       Pontiac          Saab \n11160.4861489 -2370.3268837 -2256.7482905  8416.9209564 \n  convertible     hatchback         sedan \n10576.9050477 -3263.4869674 -2058.0627013\n```", "```py\n> layout(matrix(c(1, 2), 1, 2))\n> plot(cars_models_ridge, xvar = \"lambda\", main = \"Ridge \n  Regression\\n\")\n> plot(cars_models_lasso, xvar = \"lambda\", main = \"Lasso\\n\")\n```", "```py\n> ridge.cv <- cv.glmnet(cars_train_mat, cars_train$Price, alpha = 0)\n> lambda_ridge <- ridge.cv$lambda.min\n> lambda_ridge\n[1] 641.6408\n\n> lasso.cv <- cv.glmnet(cars_train_mat, cars_train$Price, alpha = 1)\n> lambda_lasso <- lasso.cv$lambda.min\n> lambda_lasso\n[1] 10.45715\n```", "```py\n> predict(cars_models_lasso, type = \"coefficients\", s = lambda_lasso)\n15 x 1 sparse Matrix of class \"dgCMatrix\"\n                        1\n(Intercept)  -521.3516739\nMileage        -0.1861493\nCylinder     3619.3006985\nDoors        1400.7484461\nCruise        310.9153455\nSound         340.7585158\nLeather       830.7770461\nBuick        1139.9522370\nCadillac    13377.3244020\nChevy        -501.7213442\nPontiac     -1327.8094954\nSaab        12306.0915679\nconvertible 11160.6987522\nhatchback   -6072.0031626\nsedan       -4179.9112364\n```", "```py\n> cars_test_mat <- model.matrix(Price ~ . -Saturn, cars_test)[,-1]\n> cars_ridge_predictions <- predict(cars_models_ridge, s = \n                            lambda_ridge, newx = cars_test_mat)\n> compute_mse(cars_ridge_predictions, cars_test$Price)\n[1] 7609538\n> cars_lasso_predictions <- predict(cars_models_lasso, s = \n                            lambda_lasso, newx = cars_test_mat)\n> compute_mse(cars_lasso_predictions, cars_test$Price)\n[1] 7173997\n```"]