- en: '2'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Working with Data in MATLAB
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Today, the amount of data generated is enormous; computers, smart TVs, smartphones,
    home appliances, credit cards, sensors, public and private transport, and automation
    systems: these devices effortlessly produce a plethora of data, and here are just
    a handful of examples. Various purposes are served by storing and utilizing such
    data. One notable application is the utilization of **machine learning** (**ML**)
    algorithms for data analysis. This chapter delves into the process of importing
    and organizing data in MATLAB. To achieve this, it is crucial to acquaint yourself
    with the MATLAB workspace to streamline operations. The chapter then proceeds
    to examine the different data formats available for collected data and goes on
    to explore various data formats for the gathered data, providing guidance on importing
    and exporting data to and from MATLAB. Moreover, it delves into data types suitable
    for managing grouping variables and categorical data. The section wraps up by
    detailing the process of exporting data from the workspace, encompassing cell
    arrays, structure arrays, and tabular data, and storing them in file formats supported
    by MATLAB.'
  prefs: []
  type: TYPE_NORMAL
- en: Finally, it offers insights on organizing data in the appropriate format for
    the subsequent stages of data analysis.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we’re going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Importing data into MATLAB
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reading ASCII-delimited files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exporting data from MATLAB
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with different types of data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring data wrangling
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Discovering exploratory statistics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing exploratory visualization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding advanced data preprocessing techniques in MATLAB
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will introduce ML basic concepts. To understand these topics,
    a basic knowledge of algebra and mathematical modeling is needed, and a working
    knowledge of the MATLAB environment is also required.
  prefs: []
  type: TYPE_NORMAL
- en: 'To work with the MATLAB code in this chapter, you need the following files
    (available on GitHub at [https://github.com/PacktPublishing/MATLAB-for-Machine-Learning-second-edition](https://github.com/PacktPublishing/MATLAB-for-Machine-Learning-second-edition)):'
  prefs: []
  type: TYPE_NORMAL
- en: '`IrisData.csv`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`matrix.mat`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`matrix.txt`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`NumMatrix.txt`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ItalianMuseum.xlsx`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DataItalianCities.txt`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`coliseum.jpg`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Apollo13.wav`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CleaningData.xlsx`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`GlassIdentificationDataSet.xlsx`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Importing data into MATLAB
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The exchange of data between the analysis environment and external devices
    plays a pivotal role in data analysis. Importing data refers to the process of
    bringing external data into a software or platform for further analysis, processing,
    or storage. This flow of operation can be developed in MATLAB through the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Prepare your data**: Ensure that your data is in a compatible format such
    as a text file, spreadsheet (CSV or Excel), or a supported file format (MAT or
    HDF). Make sure the data is organized and structured properly.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`importdata()` function in the MATLAB command window and press *Enter*. This
    function loads data from a file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.1 – Import Data procedure](img/B21156_02_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.1 – Import Data procedure
  prefs: []
  type: TYPE_NORMAL
- en: '**Select your data file**: In the Import Tool, browse and select the file you
    want to import. MATLAB supports various file formats, and you can choose the appropriate
    file type from the drop-down menu in the tool.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Set import options**: Depending on the file format, the Import Tool will
    display different import options. You can specify how to import data, such as
    choosing the range of data to import, handling headers, specifying column formats,
    or indicating how missing values should be handled. Adjust these options according
    to your data.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Preview and import the data**: Once you’ve configured the import options,
    click on the **Import Selection** button in the Import Tool (*Figure 2**.2*).
    MATLAB will then load and preview the data. You can review the imported data in
    the tool to ensure it appears as expected:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.2 – Import window](img/B21156_02_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.2 – Import window
  prefs: []
  type: TYPE_NORMAL
- en: '**Store the imported data**: MATLAB will typically import the data into a variable
    of the appropriate data type. You can choose to save the imported data to a variable
    in the MATLAB workspace or assign it to a specific variable name for further analysis
    and manipulation.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Perform data analysis**: With the data successfully imported into MATLAB,
    you can now utilize its extensive range of built-in functions and tools for data
    analysis, visualization, and modeling. Apply the appropriate MATLAB commands and
    functions to process and analyze the imported data as needed.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In addition to the Import Tool, MATLAB also provides various other functions
    for importing data, such as the `readtable()` function for reading tabular data,
    the `readmatrix()` function for importing Excel files, `load()` for loading MAT-files,
    and more.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring the Import Tool
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Import Tool is the simplest and most user-friendly method for importing
    data into MATLAB. It eliminates the need for you to have prior knowledge about
    the data format. With the Import Tool, you can easily specify the file that contains
    the data, and the tool automatically processes the file contents, making the import
    process hassle-free. To achieve this, we can utilize the import wizard as outlined
    next:'
  prefs: []
  type: TYPE_NORMAL
- en: Launch the import wizard using the **Import Data** button (*Figure 2**.1*),
    which opens the import data dialog box.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: It’s also possible to use the command line to open the Import Tool, using the
    `uiimport` command.
  prefs: []
  type: TYPE_NORMAL
- en: Select the desired file; in this case, let’s choose `IrisData.csv`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Import Tool window will open, as shown in *Figure 2**.3*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Import Tool window displays a preview of the selected file’s data. You can
    choose to select specific data or import the entire content.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the **Import Data** section (*Figure 2**.3*), use the drop-down menu below
    the **Output Type** label to specify how you want the data to be imported. The
    available options are the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Table**: Import selected data as a table.'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Column vectors**: Import each column as an individual *m*-by-1 vector.'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Numeric Matrix**: Import selected data as an *m*-by-*n* numeric array.'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '**String Array**: Import selected data as a string array with 1-by-*N* character
    vectors.'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Cell Array**: Import selected data as a cell array capable of storing multiple
    data types, including numeric and text data.'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Import Data** window (*Figure 2**.3*), in the drop-down menu below
    the **Output Type** label, select the **Column** **vectors** option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Import Selection** button (*Figure 2**.3*). This action creates
    variables in your MATLAB workspace.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To verify the successful import, check the workspace browser. If new variables
    appear, it indicates that the import was successful. In this case, there should
    be five new variables: `PetalLength`, `PetalWidth`, `SepalLength`, `SepalWidth`,
    and `Species`. These variables represent the five columns from the selected file.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To examine the contents of each variable, you can either call them from the
    MATLAB prompt or double-click on the variable name in the workspace browser. This
    action opens a variable window displaying the values:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.3 – Import Data window](img/B21156_02_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.3 – Import Data window
  prefs: []
  type: TYPE_NORMAL
- en: The Import Tool is not the only way to import data into MATLAB, even if it is
    the simplest way to do this. As already mentioned, it is possible to import files
    into MATLAB programmatically.
  prefs: []
  type: TYPE_NORMAL
- en: Using the load() function to import files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `load()` function is a way to import data programmatically: using this
    function, it is possible to import into MATLAB variables from a file already present
    in the workspace.'
  prefs: []
  type: TYPE_NORMAL
- en: The `load()` function works on MAT-files; MAT-files are a binary file format
    used by MATLAB to store variables, data, and other MATLAB objects. These files
    have the `.mat` extension and can contain a wide range of data types, including
    numeric arrays, structures, cell arrays, and more. Using only the `load` command
    without any information, we retrieve all variables from the MAT-file named `matlab.mat`,
    assuming it exists. In case the file does not exist, an error will be returned.
  prefs: []
  type: TYPE_NORMAL
- en: 'When the `load()` function is used in MATLAB specifying a filename, it behaves
    differently depending on the type of file specified by the filename parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: If the filename refers to a MAT-file, the `load`(*filename*) function imports
    the variables stored within the MAT-file and adds them to the MATLAB workspace.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On the other hand, if the filename corresponds to an ASCII file, executing `load`(`'filename'`)
    creates a double-precision array that holds the data extracted from the file.
    This array can be accessed and manipulated within the MATLAB environment.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let’s suppose that the `.mat` file contains a single variable named `matrix.mat`
    that is a 3x3 matrix of integers, using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'We can find a new variable in the MATLAB workspace named `matrix` that contains
    the following 3x3 matrix:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Using the `load` command is a very effective way to recall data from previous
    MATLAB sessions.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: 'Remember to enclose the filename in single quotes; otherwise, MATLAB returns
    a message such as this: `Unable to resolve the` `name matrix.mat`.'
  prefs: []
  type: TYPE_NORMAL
- en: In addition to loading MAT-files to save workspace contents, let’s explore how
    to load ASCII text files. These files contain plain-text data and can be loaded
    using different functions based on the delimiter used to separate values within
    the text.
  prefs: []
  type: TYPE_NORMAL
- en: If numeric entries in the text file are separated by a blank space, comma, semicolon,
    or tab, the `load()` function can be utilized. Let’s proceed with an example to
    demonstrate its usage. Let’s suppose we have the 3x3 matrix already used in the
    previous example in an ASCII file (`matrix.txt`).
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In this example, the `load()` function is used to load the contents of the text
    file named `matrix.txt`. The function assumes that numeric entries within the
    file are separated by one of the supported delimiters. The loaded data is then
    stored in the `data` variable for further processing in MATLAB. Make sure to replace
    `matrix.txt` with the actual filename, and ensure that the file is located in
    the current MATLAB folder or provide the full path to the file if it is in a different
    directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following results are shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: It is important to exercise caution when using the `load` command, especially
    when dealing with MAT-files from untrusted sources. The reason is that the `load`
    command can potentially execute code contained within the MAT-file during the
    process of initializing variables.
  prefs: []
  type: TYPE_NORMAL
- en: Reading ASCII-delimited files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `readmatrix()` function in MATLAB allows you to read the contents of a
    text file into a matrix. It is a convenient way to load numerical data from a
    delimited or fixed-width text file. The basic syntax for using `readmatrix` is
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The function will attempt to infer the delimiter used in the file automatically.
    You can also specify additional options to customize the behavior of `readmatrix`,
    such as specifying the range of rows or columns to read, handling missing data,
    specifying the delimiter explicitly, and more. Here’s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'In this example, the `Range` option is used to specify that only the data in
    the range `A1` to `C3` should be read, and the `Delimiter` option specifies that
    the data is comma-separated. The following results are returned:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '`readmatrix` returns the data from the file as a matrix, where each row corresponds
    to a line in the file, and each column represents a separate value.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `readmatrix()` function in MATLAB provides automatic detection of import
    parameters for your file based on its file extension:'
  prefs: []
  type: TYPE_NORMAL
- en: If the file extension is `.txt`, `.dat`, or `.csv`, `readmatrix` recognizes
    it as a delimited text file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the file extension is `.xls`, `.xlsb`, `.xlsm`, `.xlsx`, `.xltm`, `.xltx`,
    or `.ods`, `readmatrix` identifies it as a spreadsheet file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Another way to import data into MATLAB is by using the `readtable()` function:
    this function is used to read the contents of a tabular data file into a MATLAB
    table. It is a convenient way to handle structured data in various formats such
    as CSV, delimited text, Excel spreadsheets, and more.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The basic syntax for using `readtable()` function is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '`readtable` automatically detects the file format based on its extension and
    imports the data into a table. You can also specify additional options to customize
    the behavior of `readtable`, such as specifying the range of rows or columns to
    read, handling missing data, specifying the variable names and types, and more.
    Take a look at this example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: In this example, the `Range` option is used to specify that only the data in
    the range `A1` to `C10` should be read (only 3 columns and only 10 rows). The
    `MissingRule` option is set to fill to handle missing data.
  prefs: []
  type: TYPE_NORMAL
- en: '`readtable` returns the data from the file as a MATLAB table, which is a versatile
    data structure that allows for the easy manipulation, analysis, and visualization
    of tabular data.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let me highlight a last way to import data. I’m referring to the `readcell()`
    function: this is used to read the contents of a cell-based file, such as a CSV
    or delimited text file, into a cell array. It is specifically designed to handle
    files where each element is represented as a separate cell. In MATLAB, a cell
    array is a data structure that can hold elements of different types, such as numbers,
    strings, or other MATLAB objects. Unlike regular arrays where elements must be
    of the same type, a cell array allows for flexibility in storing and manipulating
    heterogeneous data.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The basic syntax for using `readcell` is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The `readcell()` function automatically detects the file format based on its
    extension and imports the data into a cell array. As for the previous function
    (`readtable`), we can also specify additional options to customize the behavior
    of `readcell`, such as specifying the range of rows or columns to read, handling
    missing data, specifying the delimiter explicitly, and more. `readcell` returns
    the data from the file as a cell array, where each cell represents an element
    in the file. The size and structure of the resulting cell array depend on the
    contents of the file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s see another function very useful for reading formatted data: the `textscan()`
    function is capable of reading both strings and numbers from a single dataset.
    It operates by extracting data from an open text file and storing the contents
    in a cell array. To specify the text file, a file identifier (such as `fileID`)
    is used. In order to work with the file, it is necessary to employ the `fopen()`
    function, which opens the file and retrieves the file identifier. It is not possible
    to directly open the file and begin working with it. After reading data from the
    file, it is important to close the file by using the `fclose()` function and specifying
    a `fileID` variable. When using the `textscan()` function, it is necessary to
    provide a format specification that defines how the data should be interpreted.
    The format specification consists of conversion specifiers that represent different
    data types.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To specify the data format for reading the `DataItalianCities.txt` file, you
    need to define the format specification based on the structure of the data in
    the file. Let’s assume that each line in the file represents a list of records;
    based on this assumption, you can specify the data format as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'In this format specification, the following applies:'
  prefs: []
  type: TYPE_NORMAL
- en: '`%s` corresponds to the city name (a string)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`%d` corresponds to the population (an integer)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`%f` corresponds to the surface area (floating-point numbers)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`%d` corresponds to the population density (an integer)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`%d` corresponds to the altitude (an integer)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With this format specification, the `textscan()` function will read the data
    from the file, considering each line to have a string, an integer, and two floating-point
    numbers in the specified order.
  prefs: []
  type: TYPE_NORMAL
- en: 'To open the `DataItalianCities.txt` file in read-only mode and assign it to
    the `fileID` variable, you can use the `fopen()` function as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The `fopen()` function in MATLAB is used to open files with a specified mode.
    The `fopen()` function returns a file identifier, represented by the `fileID`
    variable, which can be used to perform file operations such as reading, writing,
    or closing a file. Remember to close the file using the `fclose()` function after
    you have finished working with it.
  prefs: []
  type: TYPE_NORMAL
- en: The first argument, `DataItalianCities.txt`, is the name of the file you want
    to open. Make sure that the file is located in the same directory as your code
    or provide the full path if it’s located elsewhere. The second argument, `'r'`,
    indicates that you want to open the file in read-only mode. This allows you to
    read the contents of the file without modifying it. After executing this line,
    the `fileID` variable will contain the identifier or handle to the opened file,
    which you can use to perform read operations on the file.
  prefs: []
  type: TYPE_NORMAL
- en: 'To read the data from the `DataItalianCities.txt` open file using the `textscan()`
    function in MATLAB and assign the result to the `DataItalianCities` variable,
    you can use the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: After executing this line of code, the `DataItalianCities` variable will store
    the extracted data from the file. It will be a cell array where each element corresponds
    to a column of data based on the specified format.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we must close the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: After importing the data from the file and assigning it to the `DataItalianCities`
    variable, you can check if everything works as intended by performing various
    operations on the data. After seeing several ways to import data into the MATLAB
    environment, we must now learn how to export data processed using MATLAB tools.
    In this way, it will be possible to exchange data with different platforms and
    use the data obtained to elaborate reports and technical notes.
  prefs: []
  type: TYPE_NORMAL
- en: Exporting data from MATLAB
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Exporting data represents a crucial activity for a data scientist: it allows
    you to perform advanced data analysis using specialized tools and libraries commonly
    used in data science. By exporting data from MATLAB to formats compatible with
    these tools, you can leverage their extensive functionality for **exploratory
    data analysis** (**EDA**), statistical modeling, ML, and visualization. Exporting
    data from MATLAB serves several purposes and can be beneficial in various scenarios:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Data sharing**: Exporting data allows you to share your results, findings,
    or processed data with others who may not have direct access to MATLAB'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**External analysis**: Exporting data enables you to analyze your MATLAB data
    using external software tools or programming languages'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Documentation and reporting**: Exported data can be used for documentation
    and reporting purposes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Data backup**: Exporting data serves as a form of data backup'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Integration with other systems**: Exporting data allows you to integrate
    MATLAB with other systems or workflows'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In MATLAB, you can export data to various file formats or external systems
    using different functions and techniques, depending on the desired output format.
    Here are some commonly used methods to export data from MATLAB:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Exporting to a text file:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use the `fprintf` function to write data in a formatted manner to a text file
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Use the `writematrix` or `writetable` functions to export data to a text file
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Exporting to a spreadsheet file:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use the `writematrix` function to export numerical data to an Excel file (XLSX
    format)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Use the `writetable` function to export tabular data to an Excel file or CSV
    file
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Exporting to a specific file format:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use functions specific to the desired file format, such as `save as` for saving
    plots as image files (PNG, JPEG, and so on) or the `audiowrite` function for exporting
    audio data
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Exporting to a database or an external system:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use database-specific functions or libraries, such as Database Toolbox or third-party
    libraries, to export data to databases such as MySQL, SQLite, and so on
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Exporting to workspace variables:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use the `save` function to save specific MATLAB workspace variables to a MAT-file
    for later use
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let’s take a look at several examples of how to use MATLAB functions to export
    data processed into that environment. Correspondingly, many of the functions we
    have used to import data into MATLAB also have corresponding functions that enable
    us to export data:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can start using the `save` command to export data in `.``mat` format:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `save` command allows you to save all the contents of the workspace in a
    compressed file with a `.mat` extension, commonly referred to as a MAT-file. This
    MAT-file preserves the variables, data, and any other workspace information, enabling
    you to easily load and retrieve the saved workspace state at a later time.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, we will create a sample matrix to explain the usage of the `writematrix`
    function: let me start creating a 5x5 matrix using the `rand()` function. The
    `rand` function in MATLAB generates uniformly distributed random numbers between
    `0` and `1`. It is commonly used for generating random numbers or creating random
    matrices and arrays of a specified size. For example, we can write the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In this case, `MyMatrix1` will be a 5-by-5 matrix of random numbers between
    0 and 1\. The following matrix has been generated:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Additionally, you can use other functions such as `randi` to generate random
    integers within a specific range or `randn` to generate random numbers from a
    standard normal distribution. Remember to set the random number generator’s seed
    using `rng` to ensure reproducibility if you need to generate the same set of
    random numbers in different runs of the program.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, we can export the matrix generated simply by using the `writematrix()`
    function as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We can add a specific delimiter to the file using a parameter in the command,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we can use the same matrix to write the data to a spreadsheet file. To
    export the matrix in a spreadsheet file, we can use the `writematrix(9)` function
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We can specify the sheet and the range also. An interesting task is to append
    data to a spreadsheet. To do that, we can create a new matrix:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, we append the data to the `MyMatrix2.xlsx` file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In this way, the second matrix was appended to the first in the same file;
    this is a good solution to add some information to a single file. Another function
    for writing data is `writetable()`. This function is used to write data from a
    table or dataset array to a file. Here’s an example of how you can use `writetable()`
    to write a table named `MyTable` to a CSV file named `MyTable.csv`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To start, we have to generate a table:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The following table is generated:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we can export the table simply by using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: After having seen how to import and export files in the MATLAB environment,
    we will now see how to manipulate specific types of data.
  prefs: []
  type: TYPE_NORMAL
- en: Working with different types of data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Working with different types of data involves understanding their specific formats
    and applying appropriate techniques for manipulation and analysis. Here are some
    common types of data and general considerations for working with them.
  prefs: []
  type: TYPE_NORMAL
- en: Working with images
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In MATLAB, working with images involves loading, displaying, and performing
    various operations on image data. Here’s a brief overview of how to work with
    images in MATLAB:'
  prefs: []
  type: TYPE_NORMAL
- en: '`imread()` function. It reads the image file and returns a numeric array representing
    the image data. Here’s an example:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`imshow()` function to display an image. It opens a separate window and shows
    the image. Here’s an example:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`imresize()`, convert it to grayscale using `rgb2gray()`, apply filters using
    functions such as `imfilter()`, and perform various other operations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`imwrite()` function. It takes the modified image array and writes it to a
    file. Here’s an example:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: To export the data from a variable to a user-specified file in MATLAB, we used
    the `imwrite()` function. This function writes the data from the variable into
    a file, with the format of the exported file determined by the specified extension.
    A new file will be created in the current folder by default. The bit depth of
    the output image depends on the data type of the variable and the chosen file
    format.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: These are just some basic operations for working with images in MATLAB. There
    are many advanced techniques and functions available for image processing and
    analysis, such as edge detection, image segmentation, and object recognition.
    MATLAB’s Image Processing Toolbox provides a comprehensive set of tools for these
    tasks.
  prefs: []
  type: TYPE_NORMAL
- en: By leveraging MATLAB’s capabilities, you can effectively manipulate and analyze
    image data for various applications, including **computer vision** (**CV**), image
    recognition, and ML.
  prefs: []
  type: TYPE_NORMAL
- en: Audio data handling
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Sound signals are commonly stored digitally in various file formats, with the
    differences usually stemming from the level of compression applied and the resulting
    impact on sound quality. MATLAB offers several functions for handling audio files,
    facilitating tasks such as writing data to an audio file, retrieving information
    about the file, reading data from an audio file, recording data from an audio
    input device, and playing audio files.
  prefs: []
  type: TYPE_NORMAL
- en: To import audio files in MATLAB, you can utilize the `audioread()` function.
    This function supports various file formats, including WAV, OGG, FLAC, AU, MP3,
    and MPEG-4 AAC. As an example, let’s import a short audio file containing the
    original NASA recording of Apollo 13, featuring the famous message, “*Houston,
    we have* *a problem.*”
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s an example of how you can use `audioread()` to import the audio file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'In this code, the following applies:'
  prefs: []
  type: TYPE_NORMAL
- en: '`apollo13.wav` represents the filename of the audio file you want to import.
    Make sure the file is located in the current working directory or provide the
    full file path.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`audio` is a variable that will store the audio data from the file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sampleRate` is the sample rate of the audio file, which indicates the number
    of samples per second.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By executing this line of code, MATLAB will import the audio data from the specified
    file, storing it in the `audio` variable. The sample rate of the audio file will
    be stored in the `sampleRate` variable. You can then further process or analyze
    the audio data using MATLAB’s signal-processing capabilities. In MATLAB, an alternative
    method to read audio files is through an interactive approach. You can accomplish
    this by selecting the **Import Data** button from the **Home**tab or by double-clicking
    the filename in the **Current Folder** browser. This allows you to read and import
    audio files directly into your MATLAB environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'By leveraging the interactive functionality in MATLAB, you can seamlessly read
    and listen to audio files, enabling a convenient workflow for working with sound
    signals and performing subsequent analysis or processing tasks, as in this example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: To have more control over audio playback in MATLAB, you can utilize the `audioplayer()`
    function. This function allows you to pause, resume, and define callbacks for
    audio playback. By creating an `audioplayer` object, you can call its methods
    to play the audio and access additional playback functionalities.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s an example of how you can use the `audioplayer()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have an audio file in the MATLAB workspace, as a matrix (audio),
    we can export it through the use of the `audiowrite()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'The following command saves the data to a WAV file named `apollo13.wav` in
    the current folder. It is important to note that this function, `audiowrite()`,
    is versatile and can also write data to other audio file formats such as OGG,
    FLAC, and MPEG-4 AAC. Lastly, we utilize the `audioinfo()` function to retrieve
    information about the WAV file, `apollo13.wav`, that was just created:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: The `audioinfo()` function is then used to obtain details about the newly created
    WAV file, such as the audio format, duration, number of channels, and sample rate.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring data wrangling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Data wrangling, also known as data munging or data preprocessing, refers to
    the process of cleaning, transforming, and preparing raw data for analysis. It
    involves several tasks, such as handling missing or inconsistent data, removing
    duplicates, reshaping data formats, and merging multiple datasets. Common techniques
    used in data wrangling include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Data cleaning**: Identifying and handling missing values, outliers, and errors
    in the dataset. This may involve imputing missing values, removing outliers, or
    correcting errors.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Data transformation**: Modifying the structure or format of the data to make
    it compatible with the desired analysis or modeling techniques. This can include
    tasks such as changing variable types, scaling numerical values, or encoding categorical
    variables.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Data integration**: Combining multiple datasets or data sources into a single
    unified dataset. This may involve joining datasets based on common variables or
    merging datasets with different structures.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Data reshaping**: Transforming the layout or structure of the data to meet
    specific requirements. This can include tasks such as pivoting, melting, or transposing
    the data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Data aggregation**: Summarizing or grouping data to obtain higher-level insights.
    Aggregation may involve calculating summary statistics, creating aggregate variables,
    or grouping data based on specific criteria.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Data reduction**: Reducing the size or dimensionality of the dataset without
    significant loss of information. This can include techniques such as feature selection
    or dimensionality reduction.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The first operation on the data refers to identifying, correcting, and removing
    inconsistencies, errors, and redundancies within a dataset, transforming it into
    a valuable resource for effective decision-making. Let’s take a closer look at
    it.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing data cleaning
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Data cleaning in MATLAB involves performing various operations to handle missing
    values, outliers, and inconsistencies in the dataset. Here are some common techniques
    for data cleaning in MATLAB:'
  prefs: []
  type: TYPE_NORMAL
- en: '`isnan()` or `ismissing()`. Replace missing values with appropriate values
    using techniques such as mean imputation (using `mean()`), median imputation (using
    `median()`), or interpolation (using `interp1()` or `interp2()`). Remove rows
    or columns with missing values using functions such as `rmmissing()`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`isoutlier()` and `rmoutliers()`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`datetime()`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`str2double()`, `cell2mat()`, or `datetime()`. Validate and ensure the correctness
    of data values using range checks, logical checks, or custom validation functions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Data validation and error checking**: Validate data against predefined rules
    or constraints to identify any potential errors or inconsistencies. Perform data
    integrity checks to ensure consistency and correctness of relationships between
    variables.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`unique()` or `duplicated()`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now, let’s proceed with a practical illustration. We will utilize a custom-designed
    file that holds data for a small sample of observations, specifically the results
    of a test. We will acquire a file called `CleaningData.xlsx`, which is a spreadsheet
    encompassing some of the problems we previously mentioned:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'In this file, there are many problems: empty cells, cells containing a period
    (`.`), cells containing `NA` strings, cells containing `NaN` strings, and cells
    containing negative numbers (`-19`). The `NaN` code (`0`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For a faster approach to identifying observations with missing values, we can
    utilize the `ismissing()` function. This function enables us to retrieve a subset
    of observations that contain at least one missing value. The `ismissing()` function
    recognizes, by default, only the following missing value indicators; all the others
    must be specified in the following way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: The first line of code specifies the types of data we want to locate in the
    table, the second identifies the location of missing data, and finally, we print
    only records with missing data.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following step, we will replace the indicators with missing values.
    We will proceed to clean the data by replacing the missing values indicated by
    `-19` with the standard missing value matrix in MATLAB, which is `NaN`. To accomplish
    this, we can employ the `standardizeMissing()` function, which replaces specified
    values within parentheses with standard missing values in an array or table:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let’s proceed to create a new table called `SampleDataNew` where we will
    replace missing values with appropriate values using the `fillmissing()` function.
    This function allows us to fill in missing entries of an array or table with a
    specified value and offers several methods to handle missing values. In this scenario,
    we will fill the missing values with values from the preceding rows of the table:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: After that, there are no missing values; in fact, the missing data has been
    replaced with those in the previous cell.
  prefs: []
  type: TYPE_NORMAL
- en: 'To eliminate rows with missing values, we will generate a new table called
    `SampleDataMinor` that exclusively includes rows without any missing values. We
    can achieve this by utilizing the `rmmissing()` function, which removes missing
    entries from an array or table. By applying the `rmmissing()` function to the
    table containing the raw data, we can obtain the desired result of a new table,
    `SampleDataMinor`, which excludes any rows with missing values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Thus, the 12-row table has only 7 rows, which are the only rows that have all
    the correct data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another issue that a data scientist has to address regards outliers, which
    are values that deviate significantly from the rest of the data. They can cause
    issues in data analysis, particularly in descriptive statistics and correlations,
    as they have the potential to distort the results. Identifying outliers is an
    important step in data cleaning, and they can also be addressed in subsequent
    stages of data analysis. Outliers can be classified as univariate if they exhibit
    extreme values in a single variable or multivariate if they demonstrate an unusual
    combination of values across multiple variables. In MATLAB, the process of identifying
    outliers is straightforward and effective. You can utilize the `isoutlier()` function,
    which is specifically designed to detect outliers in data. We can apply this function
    to the previous example, specifically to the `SampleDataNew` table that contains
    the cleaned data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: The `isoutlier()` function returns a logical array where the elements are `true`
    if an outlier is detected in the corresponding item within the table. By default,
    MATLAB identifies an outlier as a value that is more than three `SampleDataOutlier`
    table with the `SampleDataNew` table, it becomes evident that we have identified
    an outlier only in the `age` variable, specifically the value of `100`.
  prefs: []
  type: TYPE_NORMAL
- en: Data wrangling represents a very useful data preprocessing technique, but these
    methods need to be accompanied by adequate exploratory analysis to identify trends
    and choose appropriate techniques for subsequent data analysis.
  prefs: []
  type: TYPE_NORMAL
- en: Discovering exploratory statistics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Exploratory statistics refers to the initial phase of data analysis where various
    statistical techniques are employed to understand the main characteristics of
    a dataset. There are many techniques available, but the most used one is the following.
  prefs: []
  type: TYPE_NORMAL
- en: EDA
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'EDA is an approach to analyzing data that focuses on understanding the main
    characteristics, patterns, and relationships within a dataset. It involves using
    statistical techniques and visualizations to summarize and explore the data to
    gain insights and formulate hypotheses. Here are some key steps and techniques
    involved in EDA:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Data summary**: Start by examining the basic summary statistics of the dataset,
    such as the mean, median, standard deviation, minimum, maximum, and so on. This
    gives an initial understanding of the central tendency, spread, and distribution
    of the data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Data distribution**: Examine the distribution of individual variables to
    identify any skewness or non-normality. Transformations such as logarithmic, exponential,
    or power transformations can be applied to normalize the data if needed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Correlation analysis**: Calculate correlation coefficients between pairs
    of variables to understand the strength and direction of their relationships.
    Scatter plots or correlation matrices can help visualize these relationships.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Outlier detection**: Identify outliers, which are data points that deviate
    significantly from the rest of the data. Outliers can be detected using statistical
    methods such as z-scores, box plots, or Mahalanobis distance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Multivariate analysis**: Analyze the relationships and interactions between
    multiple variables simultaneously. Techniques such as **principal component**
    **analysis** (**PCA**) or cluster analysis can help uncover underlying structures
    in the data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Hypothesis testing**: Formulate and test hypotheses based on the observed
    patterns and relationships in the data. Statistical tests, such as t-tests or
    chi-square tests, can be used to assess the significance of these findings.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After introducing EDA concepts, let’s see some practical cases.
  prefs: []
  type: TYPE_NORMAL
- en: EDA in practice
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s look at some useful EDA examples. The initial phase of our analysis involves
    estimating a measure of central tendency for the distribution, which entails determining
    a representative or central value that effectively describes the data. We will
    begin by importing the file named `GlassIdentificationDataSet.xlsx` into MATLAB:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: This is a dataset with 214 records and 11 variables (`id`, `refractive index`,
    `Na`, `Mg`, `Al`, `Si`, `K`, `Ca`, `Ba`, `Fe`, `type of glass`). The unit of measure
    of oxide content is the weight percentage in the corresponding oxide.
  prefs: []
  type: TYPE_NORMAL
- en: 'To initiate our exploratory analysis, we can compute the maximum, mean, and
    minimum values of the imported table. MATLAB calculates these statistics independently
    for each column within the table. To accomplish this, we can employ three useful
    functions – `max()`, `mean()`, and `min()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'It may be useful to identify records in which `minimum` and `maximum` are found;
    to get this information, just specify a second output parameter to return the
    row index, as in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Additionally, using MATLAB built-in functions, we can calculate the median
    and mode:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s now take a look at quantiles and percentiles. Quantiles are values that
    divide the total frequency of a sample or population into a specified number of
    equal proportions. One specific type of quantile is quartiles, which divide a
    dataset into four equal groups, with each group containing a quarter of the data.
    When the data is arranged in ascending order, the first quartile marks the boundary
    below which one-quarter of the values lie. The second quartile, also known as
    the median, is located at the center of the distribution, with half of the data
    above and half below it. The third quartile represents the boundary between the
    top quarter and the remaining data. The concept of percentiles is much more widespread.
    A percentile is the percentage of cases occurring at or below a value. The relationship
    between quartiles and percentiles is represented as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 1st quartile = 25th percentile
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 2nd quartile = 50th percentile = median
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 3rd quartile = 75th percentile
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 4th quartile = 100th percentile
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let’s calculate the first three quartiles of our sample distribution. For space
    reasons, we will limit the calculation to some columns. We will use the `quantile()`
    and `prctile()` functions in the following way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s move on to how to measure the dispersion of the data. Central tendency
    measures alone are not enough to fully characterize a distribution. It is essential
    to complement this information with measures that account for the degree of data
    dispersion or variability. The `range()` function provides a simple way to calculate
    the spread or the difference between the maximum and minimum values within a sample.
    It offers an effortless means to estimate the range of a sample:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Let us now calculate the IQR with the `iqr()` function: The IQR is defined
    as the difference between the **third quartile** (**Q3**) and the **first** **quartile**
    (**Q1**). It represents the range of values that encompass the middle half of
    the observed data. The IQR serves as a dispersion index, providing a measure of
    how much the values deviate from a central value within the dataset. It offers
    valuable insights into the spread or variability of the data while being less
    sensitive to outliers compared to other dispersion measures such as the range
    or standard deviation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'The variance is a widely recognized measure of variability that quantifies
    the extent to which a set of numbers deviates from its mean. It is determined
    by calculating the average of the squared deviations of individual values from
    their arithmetic mean. In MATLAB, you can compute the variance for each column
    using the `var()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'The standard deviation is the square root of the variance and possesses the
    advantageous characteristic of being expressed in the same units as the data.
    To compute the standard deviation for each column, you can use the following code
    in MATLAB:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Both the variance and standard deviation, as previously discussed, are susceptible
    to the influence of outliers. A single outlier can significantly impact the values
    of these statistics. Even the MAD, although less sensitive to outliers compared
    to the standard deviation and variance, can still be affected by erroneous data.
    In MATLAB, you can compute the mean or median absolute deviation using the `mad()`
    function. This function allows you to calculate the absolute deviation from the
    mean or median for each data point and then obtain the average or median of these
    deviations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: There are multiple statistical measures available to assess the relationship
    between two sets of data over time. Two frequently used measures are correlation
    and covariance. Covariance offers a non-normalized measure of how the two sets
    of data tend to move together. It is estimated by summing the product of deviations
    from the mean for each variable in each period. In MATLAB, you can compute the
    covariance using the `cov()` function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s consider an example where we create a 4x4 matrix of random data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we generate a 4x4 matrix called `DataA` with random values.
    We then calculate the covariance matrix using the `cov()` function and store the
    result in the `CovarianceMatrix` variable.
  prefs: []
  type: TYPE_NORMAL
- en: The covariance matrix represents the pairwise calculation of covariance between
    each combination of columns in a data matrix. The sign of the covariance indicates
    the type of relationship between the two variables. A positive sign suggests that
    they move in the same direction, while a negative sign suggests they move in opposite
    directions. Moreover, the magnitude of the covariance reflects the strength of
    the relationship between the variables. However, interpreting the intensity of
    the relationship solely based on covariance can be challenging, as it is not a
    standardized measure.
  prefs: []
  type: TYPE_NORMAL
- en: 'To obtain a standardized measure of the relationship between two variables,
    correlation is commonly used. Correlation can be calculated from covariance. In
    MATLAB, you can compute correlation coefficients using the `corrcoef()` function.
    This function generates a matrix of sample correlation coefficients for a data
    matrix, where each column represents a separate quantity:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'It’s important to note that the correlation coefficient of two random variables
    is a measure of their linear dependence. Correlation coefficients range from -1
    to 1, and their interpretations are as follows: values close to 1 indicate a strong
    positive linear relationship between the data columns. Values close to -1 indicate
    a strong negative linear relationship (anticorrelation) between one column of
    data and another. Values close to or equal to 0 suggest there is little to no
    linear relationship between the data columns.'
  prefs: []
  type: TYPE_NORMAL
- en: However, the EDA must be accompanied by an adequate exploratory visualization
    analysis, as visualization of the data makes it possible to understand any trends.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing exploratory visualization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Exploratory visualization is a crucial step in the data analysis process, allowing
    us to gain insights and understand underlying patterns, relationships, and trends
    within our data. It involves creating visual representations of the data to explore
    its various attributes and uncover potential patterns or anomalies. The primary
    goal of exploratory visualization is to visually inspect the data, identify any
    interesting features, and generate hypotheses for further investigation. By leveraging
    the power of visual perception, we can better understand complex datasets and
    make informed decisions. MATLAB provides a variety of functions and tools for
    exploratory data visualization. Here are some commonly used functions for exploratory
    visualization:'
  prefs: []
  type: TYPE_NORMAL
- en: '`plot()`: This function is used to create line plots, scatter plots, or any
    custom plot by specifying *x* and *y* coordinates.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`histogram()`: This function creates histograms to visualize the distribution
    of a continuous variable. You can customize the number of bins, appearance, and
    other properties of the histogram.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`bar()`: This function creates bar charts to compare categorical or grouped
    data. It allows customization of bar colors, widths, and labels.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`scatter()`: This function creates scatter plots to visualize the relationship
    between two continuous variables. You can customize the marker style, color, and
    size based on additional variables.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`boxplot()`: This function creates box plots to display the distribution of
    a continuous variable across different categories or groups. It shows the median,
    quartiles, and any outliers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`heatmap()`: This function creates heatmaps to visualize a matrix of data as
    a grid of colored cells. Heatmaps are useful for exploring patterns or correlations
    in multivariate datasets.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pairplot()`: This function creates a matrix of scatter plots for multiple
    variables, showing pairwise relationships. It helps visualize the correlations
    between variables.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`line()`: This function creates line plots to visualize the trend or progression
    of a variable over time or any continuous scale. It is useful for time-series
    analysis or plotting continuous data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`imagesc()`: This function creates a color-coded image representation of a
    matrix or 2D data. It is useful for visualizing matrices, such as heatmaps or
    images.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`contour()`: This function creates contour plots to display the contours of
    a 3D surface or the boundaries of regions in a 2D space. Contour plots are useful
    for visualizing continuous functions or spatial data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To better understand the topic, it is also possible to show some graphs for
    univariate and bivariate analysis, such as `pairplot()` to show the correlation
    effects between characteristics and `boxplot()` to show the level of dispersion
    in the data.
  prefs: []
  type: TYPE_NORMAL
- en: EDA and exploratory visualization analysis are essential tools for data analysis.
    In the next section, we will see a practical case of the application of these
    exploratory analysis methodologies.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding advanced data preprocessing techniques in MATLAB
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After introducing data preprocessing techniques, in this section, we will analyze
    some data preprocessing techniques in MATLAB with practical examples. We will
    talk about min-max scaling and z-score standardization, which are two common techniques
    used to normalize data in ML. Both techniques aim to rescale numerical data to
    a common scale, making it easier for ML algorithms to learn from the data.
  prefs: []
  type: TYPE_NORMAL
- en: Data normalization for feature scaling
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Data normalization is a preprocessing step used to scale and standardize data
    to a common range or distribution. It aims to bring different features or variables
    to a comparable scale, ensuring that no single feature dominates the analysis
    due to its larger magnitude. Normalizing data can also help improve the performance
    of certain ML algorithms. There are various techniques for data normalization,
    including the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Min-Max scaling**: This method scales the data to a specific range, typically
    between 0 and 1\. The formula for min-max scaling is this:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: XNorm = (X − X _ min) / (X _ max − X _ min)
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, *X* is the original data, *X_min* is the minimum value of the data, and
    *X_max* is the maximum value of the data. In MATLAB, we can use the `rescale()`
    function as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: The `rescale()` function rescales the values in array `X` to the range [`0,
    1`]. The resulting array, `Xnorm`, has the same size as `X`.
  prefs: []
  type: TYPE_NORMAL
- en: '`0` and a standard deviation of `1`. The formula for z-score standardization
    is this:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Xnorm = (X − mean) / standard _ deviation
  prefs: []
  type: TYPE_NORMAL
- en: Here, *X* is the original data, *mean* is the mean of the data, and *standard_deviation*
    is the standard deviation of the data.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can use the same function specifying the range as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: The choice of normalization technique depends on the nature of the data and
    the requirements of the analysis or ML task. It’s important to consider the characteristics
    of the data and select an appropriate normalization method that preserves the
    meaningfulness of the data.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing correlation analysis in MATLAB
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Correlation analysis is a statistical technique used to quantify the strength
    and direction of the relationship between two or more variables. It helps us understand
    how changes in one variable are associated with changes in another variable. This
    analysis allows us to quantify the strength of the relationship between two quantitative
    variables that are often influenced by other factors and not directly linked in
    a cause-and-effect manner, but still tend to vary together.
  prefs: []
  type: TYPE_NORMAL
- en: 'Correlations play a valuable role in describing straightforward associations
    between data. For instance, consider the wind turbine dataset, where you want
    to explore whether there is a correlation between the altitude of the turbines
    and the average wind speed. Each turbine has two corresponding values: altitude
    and wind speed. Analyzing these variables with a sample correlation reveals a
    linear relationship, indicating that as altitude rises, wind speed also increases.
    Consequently, in this scenario, a positive correlation is observed.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The correlation is quantified by a dimensionless value known as the correlation
    coefficient, denoted by *r*, which ranges from -1 to +1\. Its statistical significance
    is indicated by a p-value. Therefore, correlations are typically represented using
    two essential numbers: *r* and *p*. Let me explain the major features of correlation
    and p-values:'
  prefs: []
  type: TYPE_NORMAL
- en: When the value of *r* approaches zero, the linear correlation becomes weaker.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A positive r-value signifies a positive correlation, indicating that the two
    variables tend to increase in parallel.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A negative r-value signifies a negative correlation, implying that one variable
    tends to increase as the other decreases.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The p-value provides evidence that, based on the observed sample, we can confidently
    conclude that the correlation coefficient of the population differs from zero.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The absence of a unit means that the correlation is measured on its own scale.
    In our example, the r-value does not correspond to the altitude or temperature
    scales. Consequently, it differs from other summary statistics such as the mean
    of altitudes, which falls on the same scale as the corresponding variable.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once a significant correlation is identified, its strength can be measured.
    A perfect positive correlation has a value of 1, while a perfect negative correlation
    is -1\. However, in the real world, it is uncommon to obtain a perfect correlation
    unless one variable is a direct proxy for the other. Conversely, if a perfectly
    correlated value is obtained, it may indicate an error in the data. For instance,
    if the recorded data represented the height above sea level instead of temperature,
    it would exhibit a perfect relationship with elevation.
  prefs: []
  type: TYPE_NORMAL
- en: Another crucial piece of information is the sample size, denoted as N, which
    represents the number of observations. In most statistical tests, understanding
    the sample size helps assess its validity and how well it represents the larger
    population. For example, if altitude and temperature were measured for only 5
    campsites, but the relevant area included 2,000, it would be appropriate to increase
    the sample size for a more representative analysis.
  prefs: []
  type: TYPE_NORMAL
- en: 'In MATLAB, you can perform correlation analysis using the built-in functions
    available in Statistics and Machine Learning Toolbox. Here are the steps to conduct
    correlation analysis in MATLAB:'
  prefs: []
  type: TYPE_NORMAL
- en: '`IrisData.csv` file. The `Iris` dataset is a widely used dataset in ML and
    statistics. It is commonly used for classification tasks and exploration of data
    analysis techniques. The dataset contains measurements of four features (sepal
    length, sepal width, petal length, and petal width) from three different species
    of Iris flowers (Setosa, Versicolor, and Virginica). Each sample in the dataset
    consists of four feature measurements and the corresponding species label. The
    goal is to predict the species of an Iris flower based on its feature measurements.
    The Iris dataset is often used to demonstrate various data analysis and ML algorithms,
    such as clustering, classification, and dimensionality reduction. It serves as
    a popular benchmark for evaluating the performance of different models and techniques.
    Overall, the Iris dataset provides a convenient and well-known example for exploring
    and practicing data analysis and ML concepts. To load the dataset in MATLAB, we
    will use the `readmatrix()` function as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The following results are returned:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, we can verify if there are some correlations between the four numeric variables
    (`SepalLength`, `SepalWidth`, `PetalLength`, and `PetalWidth`).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`corrcoef()` function to calculate correlation coefficients between variables.
    This function returns a correlation matrix that shows pairwise correlations between
    variables, as in this example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The following matrix is returned:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: From the analysis of the correlation matrix, we can see that there are several
    numbers close to `1`. Such numbers indicate a strong correlation. Reading the
    first column of the correlation matrix, we notice that the first variable (sepal
    length) is weakly correlated with the second variable (sepal width) while it is
    strongly correlated with the third variable (petal length) and with the fourth
    (petal width).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: I leave the analysis of the other columns to you as an exercise. I just want
    to point out that the main diagonal contains all ones because they represent the
    correlation of each variable with itself.
  prefs: []
  type: TYPE_NORMAL
- en: '`imagesc()` function in MATLAB. This function creates a color-coded image representation
    of the correlation matrix, making it easier to identify the strength and direction
    of correlations. Here’s an example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The result is shown in *Figure 2**.4*.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The shadow of blue color indicates a low correlation, while the shadow of yellow
    indicates a strong correlation.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`corrcoef()` function with an additional output argument to obtain p-values.
    Here’s an example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we can analyze the `PValues` matrix:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You can filter the correlation matrix based on p-values to focus on statistically
    significant correlations:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.4 – Visualization of a correlation matrix](img/B21156_02_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.4 – Visualization of a correlation matrix
  prefs: []
  type: TYPE_NORMAL
- en: For example, you can set a threshold (*P-value < 0.05*) and consider correlations
    below the threshold as significant.
  prefs: []
  type: TYPE_NORMAL
- en: '`scatter()` function in MATLAB. This can help you visualize the nature and
    strength of the correlations between two variables. For example, we can analyze
    the relationship between sepal length and sepal width, which shows a weak correlation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*Figure 2**.5* shows a scatter plot comparison of the features and shows a
    positive correlation. In fact, we can see that as the abscissa increases, the
    ordinate also increases. In *Figure 2**.4*, we cannot see any appreciable correlation:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.5 – Scatter plot of the features](img/B21156_02_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.5 – Scatter plot of the features
  prefs: []
  type: TYPE_NORMAL
- en: MATLAB also provides other correlation-related functions, such as `corr()` for
    calculating the correlation coefficient matrix and `corrplot()` for creating correlation
    plots with customizable visualizations. These functions offer additional options
    and flexibility for correlation analysis in MATLAB.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we began our exploration of the MATLAB desktop and its convenient
    interaction features. We familiarized ourselves with the MATLAB Toolstrip, which
    is organized into various tabs. Subsequently, we delved into the importing capabilities
    of MATLAB, enabling us to read diverse types of data resources. We acquired knowledge
    on how to import data into MATLAB interactively and programmatically. Moreover,
    we comprehended the process of exporting data from the workspace and working with
    media files.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we embarked on the challenging task of data preparation. We learned various
    techniques, including identifying missing values, modifying data types, replacing
    missing values, removing incomplete entries, organizing tables, identifying outliers,
    and consolidating multiple data sources. Following that, we explored exploratory
    statistics techniques, which enabled us to derive insightful features guiding
    us in selecting appropriate tools for extracting knowledge from the data. We examined
    measures of location such as mean, median, mode, quantiles, and percentiles. Additionally,
    we explored measures of dispersion such as range, IQR, variance, standard deviation,
    correlation, and covariance.
  prefs: []
  type: TYPE_NORMAL
- en: We delved into the realm of exploratory visualization, allowing us to identify
    specific trends through visual examination of the data. We acquired the knowledge
    to create histograms, box plots, and scatter plots. Moreover, we delved into measures
    of shape, including skewness and kurtosis. Finally, we analyzed two practical
    cases of preprocessing techniques, data scaling and correlation analysis.
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter will comprehensively cover various classification and regression
    techniques, emphasizing a foundational understanding and practical implementation
    within the MATLAB environment. The focus will be on preparing data for accurate
    results in classification analysis and delving into the specifics of **K-nearest
    neighbors** (**KNN**) analysis. Additionally, the chapter will provide insights
    into applying regression methods to user data, exploring the core concepts and
    algorithms involved. The material will guide you through the preparation of data
    for regression analysis, ensuring precision and meaningful outcomes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Part 2: Understanding Machine Learning Algorithms in MATLAB'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This part introduces the dynamic world of predictive modeling and advanced machine
    learning techniques. In this exploration, we will delve into prediction using
    classification and regression, unraveling the art of foreseeing outcomes and trends
    through meticulous analysis. Then, we will navigate through the intricate landscape
    of clustering analysis and dimensionality reduction, where patterns emerge and
    complexities are distilled, offering insights into data structure. Venturing further,
    we will introduce the fascinating realm of artificial neural network modeling,
    a paradigm inspired by the human brain, enhancing our ability to comprehend intricate
    relationships within data. The journey culminates in the domain of deep learning
    and convolutional neural networks, where complex features are discerned, allowing
    us to unravel the hidden nuances of information embedded in vast datasets. Join
    us as we unravel the threads of these cutting-edge techniques, unlocking the potential
    to extract valuable knowledge from the intricacies of data.
  prefs: []
  type: TYPE_NORMAL
- en: 'This part has the following chapters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 3*](B21156_03.xhtml#_idTextAnchor063), *Prediction Using Classification
    and Regression*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 4*](B21156_04.xhtml#_idTextAnchor084), *Clustering Analysis and Dimensionality
    Reduction*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 5*](B21156_05.xhtml#_idTextAnchor105), *Introducing Artificial Neural
    Network Modeling*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 6*](B21156_06.xhtml#_idTextAnchor124), *Deep Learning and Convolutional
    Neural Networks*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
