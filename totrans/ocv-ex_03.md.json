["```py\n#include <iostream>\n#include <string>\n#include <sstream>\nusing namespace std;\n\n// OpenCV includes\n#include \"opencv2/core.hpp\"\n#include \"opencv2/highgui.hpp\"\nusing namespace cv;\n\nconst int CV_GUI_NORMAL= 0x10;\n\nint main( int argc, const char** argv )\n{\n  // Read images\n  Mat lena= imread(\"../lena.jpg\");\n  Mat photo= imread(\"../photo.jpg\");\n\n  // Create windows\n  namedWindow(\"Lena\", CV_GUI_NORMAL);\n  namedWindow(\"Photo\", WINDOW_AUTOSIZE);\n\n  // Move window\n  moveWindow(\"Lena\", 10, 10);\n  moveWindow(\"Photo\", 520, 10);\n\n  // show images\n  imshow(\"Lena\", lena);\n  imshow(\"Photo\", photo); \n\n  // Resize window, only non autosize\n  resizeWindow(\"Lena\", 512, 512); \n\n  // wait for any key press\n  waitKey(0);\n\n  // Destroy the windows\n  destroyWindow(\"Lena\");\n  destroyWindow(\"Photo\");\n\n  // Create 10 windows\n  for(int i =0; i< 10; i++)\n  {\n    ostringstream ss;\n    ss << \"Photo \" << i;\n    namedWindow(ss.str());\n    moveWindow(ss.str(), 20*i, 20*i);\n    imshow(ss.str(), photo);\n  }\n\n  waitKey(0);\n  // Destroy all windows\n  destroyAllWindows();\n  return 0;\n}\n```", "```py\n#include \"opencv2/highgui.hpp\"\n```", "```py\n// Read images\nMat lena= imread(\"../lena.jpg\");\nMat photo= imread(\"../photo.jpg\");\n```", "```py\nnamedWindow(\"Lena\", CV_GUI_NORMAL);\nnamedWindow(\"Photo\", WINDOW_AUTOSIZE);\n```", "```py\n// Move window\nmoveWindow(\"Lena\", 10, 10);\nmoveWindow(\"Photo\", 520, 10);\n```", "```py\n// show images\nimshow(\"Lena\", lena);\nimshow(\"Photo\", photo); \n// Resize window, only non autosize\nresizeWindow(\"Lena\", 512, 512); \n```", "```py\nwaitKey(0);\n\n// Destroy the windows\ndestroyWindow(\"Lena\");\ndestroyWindow(\"Photo\");\n```", "```py\n// Create 10 windows\nfor(int i =0; i< 10; i++)\n{\n  ostringstream ss;\n  ss << \"Photo \" << i;\n  namedWindow(ss.str());\n  moveWindow(ss.str(), 20*i, 20*i);\n  imshow(ss.str(), photo);\n}\n\nwaitKey(0);\n// Destroy all windows\ndestroyAllWindows();\n```", "```py\n// Display Overlay\ndisplayOverlay(\"Lena\", \"Overlay 5secs\", 5000);\n```", "```py\n// Create a variable to save the position value in track\nint blurAmount=15;\n\n// Trackbar call back function\nstatic void onChange(int pos, void* userInput);\n\n//Mouse callback\nstatic void onMouse( int event, int x, int y, int, void* userInput );\n\nint main( int argc, const char** argv )\n{\n  // Read images\n  Mat lena= imread(\"../lena.jpg\");\n\n  // Create windows\n  namedWindow(\"Lena\");\n\n  // create a trackbark\n  createTrackbar(\"Lena\", \"Lena\", &blurAmount, 30, onChange, &lena);\n\n  setMouseCallback(\"Lena\", onMouse, &lena);\n\n  // Call to onChange to init\n  onChange(blurAmount, &lena);\n\n  // wait app for a key to exit\n  waitKey(0);\n\n  // Destroy the windows\n  destroyWindow(\"Lena\");\n\n  return 0;\n}\n```", "```py\n// Create a variable to save the position value in track\nint blurAmount=15;\n```", "```py\n// Trackbar call back function\nstatic void onChange(int pos, void* userInput);\n\n//Mouse callback\nstatic void onMouse( int event, int x, int y, int, void* userInput );\n```", "```py\nint main( int argc, const char** argv )\n{\n  // Read images\n  Mat lena= imread(\"../lena.jpg\");\n\n  // Create windows\n  namedWindow(\"Lena\");\n```", "```py\n      // create a trackbark\n      createTrackbar(\"Lena\", \"Lena\", &blurAmount, 30, onChange, &lena);\n    ```", "```py\n    setMouseCallback(\"Lena\", onMouse, &lena);\n    ```", "```py\n  // Call to onChange to init\n  onChange(blurAmount, &lena);\n\n  // wait app for a key to exit\n  waitKey(0);\n\n  // Destroy the windows\n  destroyWindow(\"Lena\");\n```", "```py\n// Trackbar call back function\nstatic void onChange(int pos, void* userData)\n{\n  if(pos <= 0)\n    return;\n  // Aux variable for result\n  Mat imgBlur;\n\n  // Get the pointer input image\n  Mat* img= (Mat*)userInput;\n\n  // Apply a blur filter\n  blur(*img, imgBlur, Size(pos, pos));  \n\n  // Show the result\n  imshow(\"Lena\", imgBlur);\n}\n```", "```py\n//Mouse callback\nstatic void onMouse( int event, int x, int y, int, void* userInput )\n{\n  if( event != EVENT_LBUTTONDOWN )\n          return;\n\n  // Get the pointer input image\n  Mat* img= (Mat*)userInput;\n\n  // Draw circle\n  circle(*img, Point(x, y), 10, Scalar(0,255,0), 3);\n\n  // Call on change to get blurred image\n  onChange(blurAmount, img);\n\n}\n```", "```py\nMat img;\nbool applyGray=false;\nbool applyBlur=false;\nbool applySobel=false;\n…\nint main( int argc, const char** argv )\n{\n  // Read images\n  img= imread(\"../lena.jpg\");\n\n  // Create windows\n  namedWindow(\"Lena\");\n\n  // create Buttons\n  createButton(\"Blur\", blurCallback, NULL, QT_CHECKBOX, 0);\n\n  createButton(\"Gray\",grayCallback,NULL,QT_RADIOBOX, 0);\n  createButton(\"RGB\",bgrCallback,NULL,QT_RADIOBOX, 1);\n\n  createButton(\"Sobel\",sobelCallback,NULL,QT_PUSH_BUTTON, 0);\n\n  // wait app for a key to exit\n  waitKey(0);\n\n  // Destroy the windows\n  destroyWindow(\"Lena\");\n\n  return 0;\n}\n```", "```py\nbool applyGray=false;\nbool applyBlur=false;\nbool applySobel=false;\n```", "```py\n      // create Buttons\n      createButton(\"Blur\", blurCallback, NULL, QT_CHECKBOX, 0);\n\n      createButton(\"Gray\",grayCallback,NULL,QT_RADIOBOX, 0);\n      createButton(\"RGB\",bgrCallback,NULL,QT_RADIOBOX, 1);\n\n      createButton(\"Sobel\",sobelCallback,NULL,QT_PUSH_BUTTON, 0);\n    ```", "```py\n    void grayCallback(int state, void* userData)\n    {\n      applyGray= true;\n      applyFilters();\n    }\n    void bgrCallback(int state, void* userData)\n    {\n      applyGray= false;\n      applyFilters();\n    }\n\n    void blurCallback(int state, void* userData)\n    {\n      applyBlur= (bool)state;\n      applyFilters();\n    }\n\n    void sobelCallback(int state, void* userData)\n    {\n      applySobel= !applySobel;\n      applyFilters();\n    }\n    ```", "```py\n    void applyFilters(){\n      Mat result;\n      img.copyTo(result);\n      if(applyGray){\n        cvtColor(result, result, COLOR_BGR2GRAY);\n      }\n      if(applyBlur){\n        blur(result, result, Size(5,5));  \n      }\n      if(applySobel){\n        Sobel(result, result, CV_8U, 1, 1);  \n      }\n      imshow(\"Lena\", result);\n    }\n    ```", "```py\n    Sobel(input, output, CV_8U, 1, 0);\n    ```", "```py\n    Sobel(input, output, CV_8U, 0, 1);\n    ```", "```py\nSobel(result, result, CV_8U, 1, 1);\n```", "```py\nMat frame;\nGLfloat angle= 0.0;\nGLuint texture; \nVideoCapture camera;\n\nint loadTexture() {\n\n    if (frame.data==NULL) return -1;\nglGenTextures(1, &texture);\n   glBindTexture( GL_TEXTURE_2D, texture ); \n   glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MAG_FILTER,GL_LINEAR);\n   glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MIN_FILTER,GL_LINEAR);\n   glPixelStorei(GL_UNPACK_ALIGNMENT, 1);\n\n   glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, frame.cols, frame.rows,0, GL_BGR, GL_UNSIGNED_BYTE, frame.data);\n   return 0;\n\n}\n\nvoid on_opengl(void* param)\n{\n    glLoadIdentity();  \n    // Load frame Texture\n    glBindTexture( GL_TEXTURE_2D, texture ); \n    // Rotate plane before draw\n    glRotatef( angle, 1.0f, 1.0f, 1.0f );\n    // Create the plane and set the texture coordinates\n    glBegin (GL_QUADS);\n        // first point and coordinate texture\n     glTexCoord2d(0.0,0.0); \n     glVertex2d(-1.0,-1.0); \n        // seccond point and coordinate texture\n     glTexCoord2d(1.0,0.0); \n     glVertex2d(+1.0,-1.0); \n        // third point and coordinate texture\n     glTexCoord2d(1.0,1.0); \n     glVertex2d(+1.0,+1.0);\n        // last point and coordinate texture\n     glTexCoord2d(0.0,1.0); \n     glVertex2d(-1.0,+1.0);\n    glEnd();\n\n}\n\nint main( int argc, const char** argv )\n{\n    // Open WebCam\n    camera.open(0);\n    if(!camera.isOpened())\n        return -1;\n\n    // Create new windows\n    namedWindow(\"OpenGL Camera\", WINDOW_OPENGL);\n\n    // Enable texture\n    glEnable( GL_TEXTURE_2D );  \n\n    setOpenGlDrawCallback(\"OpenGL Camera\", on_opengl);\n\n    while(waitKey(30)!='q'){\n        camera >> frame;\n        // Create first texture\n        loadTexture();\n        updateWindow(\"OpenGL Camera\");\n        angle =angle+4;\n    }\n\n  // Destroy the windows\n  destroyWindow(\"OpenGL Camera\");\n\n  return 0;\n}\n```", "```py\nMat frame;\nGLfloat angle= 0.0;\nGLuint texture; \nVideoCapture camera;\n```", "```py\ncamera.open(0);\n    if(!camera.isOpened())\n        return -1;\n```", "```py\n// Create new windows\nnamedWindow(\"OpenGL Camera\", WINDOW_OPENGL);\n```", "```py\n// Enable texture\nglEnable( GL_TEXTURE_2D );\n```", "```py\nsetOpenGlDrawCallback(\"OpenGL Camera\", on_opengl);\n```", "```py\nwhile(waitKey(30)!='q'){\n        camera >> frame;\n        // Create first texture\n        loadTexture();\n        updateWindow(\"OpenGL Camera\");\n        angle =angle+4;\n    }\n```", "```py\nif (frame.data==NULL) return -1;\n```", "```py\nglGenTextures(1, &texture);\n\nglBindTexture( GL_TEXTURE_2D, texture );\n    glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MAG_FILTER,GL_LINEAR);\n    glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MIN_FILTER,GL_LINEAR);\n```", "```py\nglPixelStorei(GL_UNPACK_ALIGNMENT, 1);\nglTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, frame.cols, frame.rows,0, GL_BGR, GL_UNSIGNED_BYTE, frame.data);\n    return 0;\n```", "```py\nglLoadIdentity();\n```", "```py\n    // Load Texture\n    glBindTexture( GL_TEXTURE_2D, texture ); \n```", "```py\n    // Rotate plane\n    glRotatef( angle, 1.0f, 1.0f, 1.0f );\n```", "```py\n// Create the plane and set the texture coordinates\n    glBegin (GL_QUADS);\n```", "```py\n    // first point and coordinate texture\n glTexCoord2d(0.0,0.0); \n glVertex2d(-1.0,-1.0); \n    // seccond point and coordinate texture\n glTexCoord2d(1.0,0.0); \n glVertex2d(+1.0,-1.0); \n    // third point and coordinate texture\n glTexCoord2d(1.0,1.0); \n glVertex2d(+1.0,+1.0);\n    // last point and coordinate texture\n glTexCoord2d(0.0,1.0); \n glVertex2d(-1.0,+1.0);\n    glEnd();\n```"]