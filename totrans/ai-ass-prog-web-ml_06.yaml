- en: '6'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Add Behavior with JavaScript
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It’s perfectly fine to have a web page consisting of nothing but HTML markup
    and CSS, but if you want interactivity, you need JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: With JavaScript, you can apply a little, for example, posting a form to a backend,
    to a lot, like building a **Single-Page Application** (**SPA**) with a framework
    like Vue.js or React.js. Regardless, there’s a common denominator, namely that
    you need to write code and reference that code or code file from your HTML markup.
  prefs: []
  type: TYPE_NORMAL
- en: You will see that Copilot can help with both common tasks like adding a script
    tag to your HTML markup to more advanced tasks like adding a JavaScript framework
    like Vue.js to your web app.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will:'
  prefs: []
  type: TYPE_NORMAL
- en: Generate JavaScript using prompts to add behavior to our app.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add interactivity to our e-commerce application.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduce a JavaScript framework like Vue to ensure we set ourselves up with
    a solid foundation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Business problem: e-commerce'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We’ll keep working on our e-commerce domain in this chapter as well. In the
    previous chapters, you saw how we worked with HTML to try to lay out what information
    should be on each page and identify what pages we need in the process. In this
    chapter, we’re adding the missing component, JavaScript, which is what makes it
    all work. JavaScript will play the roles of both adding interactivity and reading
    and writing data.
  prefs: []
  type: TYPE_NORMAL
- en: Problem and data domain
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are a few problems you need to address, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Data flow**: How do we add code to our application so that we can read and
    write data?'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Handling user interaction**: The user will want to interact with your application.
    You will need to configure the part of the site that the user will want to use
    and ensure this will work. Not all user interactions lead to data being read or
    written, but many do, so therefore you need to figure out when that’s the case
    and “connect” a user interaction with your data flow, as mentioned above.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Data**: The data will vary depending on what parts of the app you’re addressing.
    If you implement a basket page, for example, you will need to deal with both product
    data as well as orders as the user is looking to “check out” their basket so they
    can purchase the products and get them delivered to a chosen address.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Breaking the problem down into features
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We understand the business domain and roughly what type of problems we’re likely
    to encounter, so how can we break this down into features? From the previous chapters,
    we have an idea of how to do this, but the main difference is that instead of
    just creating a basket page, for example, that looks like it works, this should
    work. We can therefore break down a basket page, for example, into the following
    features:'
  prefs: []
  type: TYPE_NORMAL
- en: Read the basket information from the data source.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Render the basket information.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add the item to the basket.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adjust the selected number of items for a specific item in the basket.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remove an item from the basket.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Support checking out a basket, taking the user to an order page where they will
    be asked for purchase information and a delivery page.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An e-commerce site consists of many different pages. It’s therefore recommended
    to do a similar feature breakdown for each page as you address a specific page.
  prefs: []
  type: TYPE_NORMAL
- en: Prompting strategy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The prompting strategy is a bit dependent on the chosen AI tool, how it works,
    and how we prompt. GitHub Copilot is our chosen AI tool for this chapter, and
    we will focus mostly on its in-editor experience where you type prompts in open
    files. The approaches we will show throughout this chapter are the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Inline comments**: This means we will write prompts directly in open files.
    You can add prompts this way at the top of the file and also add additional supporting
    prompts where you’re trying to have your AI assistant build specific code blocks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Chat**: We will not show this approach that much, but we do recommend using
    the chat just to compare and contrast or if you need to look up specific information
    or want advice on how to implement something.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The general recommendation throughout this book is that you use a blended approach
    of both using prompts directly in open files “in-editor” and typing prompts in
    the chat windows. These approaches come with their pros and cons. As for prompt
    pattern, we’re going to be using the “Exploratory prompt pattern” as described
    in *Chapter 2*.
  prefs: []
  type: TYPE_NORMAL
- en: Adding JavaScript
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To add JavaScript to a web page, there are two main approaches:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Using a `script` tag in the `head` element: In this version, you would add
    a script tag to an existing HTML page, for example, named `index.html`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Pointing to a stand-alone file: In this case, you would write your JavaScript
    in an existing file, `my-javascript-file.js`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The role of JavaScript
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When JavaScript was first added to the browser, it played the role of adding
    interactivity. Today, JavaScript often has an extended role as part of application
    frameworks like Vue.js, React, and Angular. In such frameworks, a developer can
    now declaratively define templates that, with the help of JavaScript, can be turned
    into static HTML, with event handling added, to respond to user interactions.
    Ultimately, all this is then sent to the browser to be rendered by it.
  prefs: []
  type: TYPE_NORMAL
- en: Adding JavaScript to a page
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s show next how we can add JavaScript to a page by providing the following
    prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Prompt]**'
  prefs: []
  type: TYPE_NORMAL
- en: Create web page with a script tag.
  prefs: []
  type: TYPE_NORMAL
- en: '**[End of prompt]**'
  prefs: []
  type: TYPE_NORMAL
- en: 'We end up with a web page that also contains a `script` tag. Note how the prompt
    is added as a comment at the top of the page. That’s how GitHub Copilot knows
    to suggest a text completion:'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Prompt response]**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**[End of response]**'
  prefs: []
  type: TYPE_NORMAL
- en: In this case, the code calls `alert("Hello World")`, which will show a dialog
    box with the text “Hello World.”
  prefs: []
  type: TYPE_NORMAL
- en: 'A second example: adding a JavaScript library/framework'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first example might not be all that useful, but let’s add something you’re
    likely to do, like adding a framework like Vue.js. The reason for adding a framework
    like Vue.js is that you want to build a large application consisting of a lot
    of interactivity and many different pages. To keep things organized, and make
    it easy for other developers to contribute, you want a framework like Vue.js.
  prefs: []
  type: TYPE_NORMAL
- en: '**[Prompt]**'
  prefs: []
  type: TYPE_NORMAL
- en: Add Vue 3.
  prefs: []
  type: TYPE_NORMAL
- en: '**[End of prompt]**'
  prefs: []
  type: TYPE_NORMAL
- en: 'This time, we place ourselves in the header tag. See the HTML comment in the
    `HEAD` tag below to indicate the prompt we’re using as input to GitHub Copilot:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'This prompt results in the following suggestion:'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Prompt response]**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '**[End of response]**'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can easily build on this by adding a prompt that asks to set up an entry
    point (most SPA frameworks work on the idea of having an entry point, an element
    where the app will be rendered):'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Prompt]**'
  prefs: []
  type: TYPE_NORMAL
- en: Add Vue 3 entry point.
  prefs: []
  type: TYPE_NORMAL
- en: '**[End of prompt]**'
  prefs: []
  type: TYPE_NORMAL
- en: 'This results in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Prompt response]**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '**[End of response]**'
  prefs: []
  type: TYPE_NORMAL
- en: Placing our cursor below the `script` tag that imported Vue.js will lead to
    our AI assistant generating instructions for what code we should add to further
    set up Vue.js. It’s not enough to just add script to Vue.js; some additional code
    is needed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Luckily, with our cursor placement like below, GitHub Copilot understands from
    existing HTML comments (prompts) what code is missing and will suggest that code
    at the location of our cursor (if a Copilot suggestion doesn’t appear, try pressing
    the *Spacebar* key or the *Return* key):'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Prompt]**'
  prefs: []
  type: TYPE_NORMAL
- en: No prompt given
  prefs: []
  type: TYPE_NORMAL
- en: '**[End of prompt]**'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Prompt response]**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '**[End of response]**'
  prefs: []
  type: TYPE_NORMAL
- en: It’s worth calling out again that GitHub Copilot had enough context to generate
    more suggestions by us only using Tab and Return key without the need to provide
    an extra prompt..
  prefs: []
  type: TYPE_NORMAL
- en: 'Running this in a browser returns “Hello World,” which is what’s expected given
    the above code. The reason this code works, in case you’re not familiar with Vue.js,
    is that it contains the bare minimum of what’s needed for it to be referenced
    and configured:'
  prefs: []
  type: TYPE_NORMAL
- en: '`script` tag, referencing Vue.js'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creation of an app instance that also defines a data function with a `message`
    property
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A call to `mount()`, which ensures that the identified HTML tag (with `id =
    app`) is interpolated, and the `HTML` tag is replaced with the value of the property
    `message`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When building a more advanced Vue.js project, please use the Vue CLI over the
    approach chosen above. For smaller proofs of concept, this approach could be OK.
  prefs: []
  type: TYPE_NORMAL
- en: Challenge
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As a challenge, ask Copilot to add a button that increments a counter. You
    can use the following prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Prompt]**'
  prefs: []
  type: TYPE_NORMAL
- en: Add a button that increments a counter.
  prefs: []
  type: TYPE_NORMAL
- en: '**[End of prompt]**'
  prefs: []
  type: TYPE_NORMAL
- en: It is recommended that you place the cursor in the HTML markup where the `DIV`
    element with `id="app"` is located.
  prefs: []
  type: TYPE_NORMAL
- en: 'Use case: adding behavior'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For this part of our e-commerce use case, let’s work on rendering a cart page
    of items. In this case, we will mock calling a backend for the data and let the
    data be placed in a file called `cart.json` with the following structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The above JSON content describes a JSON object (defined by `{}`), with the property
    `cart`, of the array type, as denoted by the square brackets, `[]`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In fact, let’s use our AI assistant to generate the data we need. Let’s create
    the `cart.json` file and the following structure and prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Note the prompt `// item with id name, quantity and price, total = quantity
    * price`, which results in the following JSON:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Adding a comment with `//` is OK when you try to generate more JSON code from
    Copilot, but it should be removed once you’re happy with the output.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we need a file, `app.js`, that calls this JSON file and ends up rendering.
    We can use the `basket.html` file from the previous chapter. It should look something
    like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s add `app.js` by adding a prompt to the end of the `body` tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Prompt]**'
  prefs: []
  type: TYPE_NORMAL
- en: Add app.js.
  prefs: []
  type: TYPE_NORMAL
- en: '**[End of prompt]**'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Copilot Response**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '**[End of response]**'
  prefs: []
  type: TYPE_NORMAL
- en: 'In `app.js`, add the following prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Prompt]**'
  prefs: []
  type: TYPE_NORMAL
- en: Read cart.json and render the content as div elements to the element with ID
    basket. Add the CSS class basket-item to each item.
  prefs: []
  type: TYPE_NORMAL
- en: '**[End of prompt]**'
  prefs: []
  type: TYPE_NORMAL
- en: 'It should give you a result similar to:'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Prompt response]**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '**[End of response]**'
  prefs: []
  type: TYPE_NORMAL
- en: 'The above code locates the HTML element whose ID is `basket` and then proceeds
    to loop through the array data. For each element in data, a new HTML element of
    type `DIV` will be created, and the following will happen to said element:'
  prefs: []
  type: TYPE_NORMAL
- en: The CSS class `basket-item` will be added.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Its `innerHTML` property will be assigned the value of the `name` property.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The specific element will be added to the parent element basket.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You need to tweak the `forEach` portion of the code to `data.cart.forEach`
    to adjust it based on what the JSON file looks like (if your JSON says you have
    a `description` property instead of `name`, that should be reflected in the JavaScript
    code, etc.). The resulting output doesn’t look like much, though, just three titles:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Improving the output
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To improve the output, there are a few things we want to do, like:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a CSS class to each rendered property on an item:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You don’t always need to type a prompt to get the above response. Sometimes
    it’s enough to type `.basket-item` and CSS will be suggested to you that you can
    accept using the *Tab* key. Be sure that you are in either a style tag or a `.css`
    file when writing this, though.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add prompts in the JavaScript code to make it render each item property as
    separate `div` elements:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**[Prompt]**'
  prefs: []
  type: TYPE_NORMAL
- en: //Read `cart.json` and render the content as `div` elements to the element with
    `id` basket, add CSS class `basket-item` to each item
  prefs: []
  type: TYPE_NORMAL
- en: '**[End of prompt]**'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Prompt response]**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '**[End of response]**'
  prefs: []
  type: TYPE_NORMAL
- en: 'At this point, the above prompt has managed to call the `fetch` method to retrieve
    data from the `cart.json` file. It then proceeded to convert the retrieved data
    into JSON format and identified the HTML element we will want to render the JSON
    response on:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In this section of the code, we’ve added context on what fields (`name`, `quantity`,
    etc.) we want to read from the JSON content. From the code, you can see this prompt
    instruction is reflected in the generated code and each field gets its own `DIV`
    element and descriptive text:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In this prompt, we’re providing specific instructions to multiply certain fields
    (price x quantity) to produce a total price for the row. At the same time, we
    can see how a call to `reduce` calculates the basket’s total price.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The end result looks like so. It’s far from perfect but looks more like what
    we can expect:'
  prefs: []
  type: TYPE_NORMAL
- en: '![rendered cart showing name, price and total](img/B21232_06_01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.1: Rendered cart showing name, price, and total'
  prefs: []
  type: TYPE_NORMAL
- en: Adding Bootstrap
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the previous section, we showed how we can add some basic CSS to our cart
    page. However, to really improve the looks of our basket page, we think adding
    a CSS framework like Bootstrap can be a good idea. Bootstrap is used by many teams
    across the world and has many different types of content, like “cards” and “menus,”
    that will enable us to work faster in building our app.
  prefs: []
  type: TYPE_NORMAL
- en: 'To add Bootstrap, we place ourselves with a prompt comment in the `head` element
    like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Prompt]**'
  prefs: []
  type: TYPE_NORMAL
- en: Add Bootstrap.
  prefs: []
  type: TYPE_NORMAL
- en: '**[End of prompt]**'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Prompt response]**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '**[End of response]**'
  prefs: []
  type: TYPE_NORMAL
- en: At this point, we have added Bootstrap to our web app, but we need to use one
    of its classes. Previously, we mentioned the concept of “cards,” when we discussed
    Bootstrap and its types of content, a layout that renders nicely.
  prefs: []
  type: TYPE_NORMAL
- en: 'To produce a card, we can give it a prompt like so on the web page:'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Prompt]**'
  prefs: []
  type: TYPE_NORMAL
- en: Create a card with the fields name, price, quantity, and total.
  prefs: []
  type: TYPE_NORMAL
- en: '**[End of prompt]**'
  prefs: []
  type: TYPE_NORMAL
- en: 'We get the following result:'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Prompt response]**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '**[End of response]**'
  prefs: []
  type: TYPE_NORMAL
- en: Above, we placed the prompt in our open text file as an HTML comment and accepted
    Copilot’s suggestion via the *Tab* key.
  prefs: []
  type: TYPE_NORMAL
- en: OK, we had a good start. We have added Bootstrap to our web app. We also used
    Copilot to create an HTML card sample that we can use. The next step is to change
    our JavaScript code.
  prefs: []
  type: TYPE_NORMAL
- en: 'To change our JavaScript code, we will give Copilot a bit more context than
    usual, namely:'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Prompt]**'
  prefs: []
  type: TYPE_NORMAL
- en: 'See below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '**[End of prompt]**'
  prefs: []
  type: TYPE_NORMAL
- en: 'This results in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Prompt response]**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '**[End of response]**'
  prefs: []
  type: TYPE_NORMAL
- en: All of this felt a tiny bit convoluted, going back and forth between JavaScript
    and HTML. This is the reason why many developers use a JavaScript framework in
    which they can augment the HTML, using templates, and just add instructions to
    it, like you do when you, for example, use a framework like Vue.js.
  prefs: []
  type: TYPE_NORMAL
- en: Adding Vue.js
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: At this point, we’ve realized that our approach wasn’t so good. We let JavaScript
    handle the creation of HTML elements and populate them from a JSON response. What
    we’re looking for is a cleaner approach. We will therefore start from the beginning.
    However, because we’ve been working with Copilot, it “remembers” that we’re working
    with `basket-type` data, and the file we’re working with, `basket.html`, helps
    provide additional context to Copilot. It might seem a bit like magic, what you’re
    about to see, but it’s really a result of Copilot having built up an in-memory
    context having worked with you.
  prefs: []
  type: TYPE_NORMAL
- en: If you’re starting fresh with just having opened Visual Studio Code, you would
    probably need to use a more detailed prompt.
  prefs: []
  type: TYPE_NORMAL
- en: It might sound like a big change to add a JavaScript framework at this point,
    but it really isn’t. Let’s show the needed changes step by step.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let’s add support for Vue.js in our `basket.html` file. We add the below
    prompt at the end of the `BODY` tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Prompt]**'
  prefs: []
  type: TYPE_NORMAL
- en: Add Vue 3.
  prefs: []
  type: TYPE_NORMAL
- en: '**[End of prompt]**'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Prompt response]**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '**[End of response]**'
  prefs: []
  type: TYPE_NORMAL
- en: The next thing we need is code that creates our Vue app.
  prefs: []
  type: TYPE_NORMAL
- en: '**[Prompt]**'
  prefs: []
  type: TYPE_NORMAL
- en: Add Bootstrap code for Vue 3.
  prefs: []
  type: TYPE_NORMAL
- en: '**[End of prompt]**'
  prefs: []
  type: TYPE_NORMAL
- en: 'The resulting code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Prompt response]**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '**[End of response]**'
  prefs: []
  type: TYPE_NORMAL
- en: Remember what we said about the in-memory context of Copilot. It remembers everything
    we’ve fed it so far on what fields the basket has, and it also looks at the name
    of the file `basket.html`; that’s the result you see above.
  prefs: []
  type: TYPE_NORMAL
- en: 'Lastly, we need to state how we want to render the app:'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Prompt]**'
  prefs: []
  type: TYPE_NORMAL
- en: Render basket from Vue app.
  prefs: []
  type: TYPE_NORMAL
- en: '**[End of prompt]**'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Prompt response]**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '**[End of response]**'
  prefs: []
  type: TYPE_NORMAL
- en: 'The cart will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Display of cart using Vue.js](img/B21232_06_02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.2: Display of cart using Vue.js'
  prefs: []
  type: TYPE_NORMAL
- en: If you were to try out the page at this point and run it in a browser, you would
    notice how the **+** and **-** buttons increment and decrement products.
  prefs: []
  type: TYPE_NORMAL
- en: 'At this point, what’s missing is ensuring our Vue app uses the Bootstrap CSS
    library. We can address that by modifying our prompt for generating the HTML markup
    from:'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Prompt]**'
  prefs: []
  type: TYPE_NORMAL
- en: Render basket from Vue app.
  prefs: []
  type: TYPE_NORMAL
- en: '**[End of prompt]**'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can change it to a prompt with added context on Bootstrap, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Prompt]**'
  prefs: []
  type: TYPE_NORMAL
- en: Render basket from Vue app, using Bootstrap and the card class.
  prefs: []
  type: TYPE_NORMAL
- en: '**[End of prompt]**'
  prefs: []
  type: TYPE_NORMAL
- en: 'This results in the following HTML markup:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot of a cellphone  Description automatically generated](img/B21232_06_03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.3: Cart in HTML markup'
  prefs: []
  type: TYPE_NORMAL
- en: Assignment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Create a product list page. The page should show a list of products. Each product
    should have an **Add** button that will add the product to a cart. The cart should
    be represented as a cart icon in the top-right corner of the page and when clicked
    should display the number of items in the cart and the total value.
  prefs: []
  type: TYPE_NORMAL
- en: Use what you’ve been taught to craft a prompt to create the page, add JavaScript,
    and more. It’s up to you if you want to add Vue.js to solve this or if you want
    to use plain JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can find the solution to this assignment in the GitHub repository: [https://github.com/PacktPublishing/AI-Assisted-Software-Development-with-GitHub-Copilot-and-ChatGPT](https://github.com/PacktPublishing/AI-Assisted-Software-Development-with-GitHub-Copilot-and-ChatGPT)*.*'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we’ve shown how to add JavaScript to a web page. Adding JavaScript
    to a web page is a common task and can be done in two ways, either by adding a
    `script` tag to the `head` element or by pointing to a standalone file.
  prefs: []
  type: TYPE_NORMAL
- en: We’ve also shown how we can build on our use case from previous chapters by
    adding behavior to our app. We first showed how to even let JavaScript generate
    the markup, which can become a bit unwieldy. Then, we made the case for using
    a JavaScript framework like Vue.js to make it easier to manage.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve also seen how you can add a JavaScript framework like Vue.js. Exactly
    how you add a JavaScript framework varies by framework but it’s generally recommended
    to add a prompt with wording including keywords like setup or initialize to ensure
    you not only add a `script` tag but also add code that triggers a setup process
    and makes the selected framework ready to use.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will show how we can add responsiveness to our app and
    cater to many different devices and viewports. We can no longer assume that everyone
    is using a desktop computer with a large screen. Many of our users will be using
    a mobile device with a smaller screen.
  prefs: []
  type: TYPE_NORMAL
- en: Join our community on Discord
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Join our community’s Discord space for discussions with the author and other
    readers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://packt.link/aicode](https://packt.link/aicode)'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/QR_Code510410532445718281.png)'
  prefs: []
  type: TYPE_IMG
