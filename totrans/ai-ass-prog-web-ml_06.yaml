- en: '6'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '6'
- en: Add Behavior with JavaScript
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用JavaScript添加行为
- en: Introduction
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: It’s perfectly fine to have a web page consisting of nothing but HTML markup
    and CSS, but if you want interactivity, you need JavaScript.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 一个只包含HTML标记和CSS的网页是完全可以接受的，但如果你想要交互性，你需要JavaScript。
- en: With JavaScript, you can apply a little, for example, posting a form to a backend,
    to a lot, like building a **Single-Page Application** (**SPA**) with a framework
    like Vue.js or React.js. Regardless, there’s a common denominator, namely that
    you need to write code and reference that code or code file from your HTML markup.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 使用JavaScript，你可以从少量应用，例如将表单发布到后端，到大量应用，如使用Vue.js或React.js这样的框架构建**单页应用**（SPA）。无论如何，有一个共同点，即你需要编写代码并从你的HTML标记中引用该代码或代码文件。
- en: You will see that Copilot can help with both common tasks like adding a script
    tag to your HTML markup to more advanced tasks like adding a JavaScript framework
    like Vue.js to your web app.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 你会发现Copilot可以帮助完成从添加脚本标签到HTML标记这样的常见任务，到添加Vue.js这样的JavaScript框架到你的Web应用等更高级的任务。
- en: 'In this chapter, we will:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将：
- en: Generate JavaScript using prompts to add behavior to our app.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用提示生成JavaScript以添加应用的行为。
- en: Add interactivity to our e-commerce application.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为我们的电子商务应用添加交互性。
- en: Introduce a JavaScript framework like Vue to ensure we set ourselves up with
    a solid foundation.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍一个如Vue的JavaScript框架，以确保我们为自己打下坚实的基础。
- en: 'Business problem: e-commerce'
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 业务问题：电子商务
- en: We’ll keep working on our e-commerce domain in this chapter as well. In the
    previous chapters, you saw how we worked with HTML to try to lay out what information
    should be on each page and identify what pages we need in the process. In this
    chapter, we’re adding the missing component, JavaScript, which is what makes it
    all work. JavaScript will play the roles of both adding interactivity and reading
    and writing data.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们也将继续在电子商务领域工作。在前几章中，你看到了我们如何使用HTML来尝试确定每页应该包含哪些信息，并确定在过程中我们需要哪些页面。在本章中，我们添加了缺失的组件，即JavaScript，这是使一切工作的关键。JavaScript将扮演添加交互性和读取/写入数据的双重角色。
- en: Problem and data domain
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题与数据域
- en: 'There are a few problems you need to address, as follows:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 需要解决几个问题，如下：
- en: '**Data flow**: How do we add code to our application so that we can read and
    write data?'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据流**：我们如何向我们的应用程序添加代码以便我们可以读取和写入数据？'
- en: '**Handling user interaction**: The user will want to interact with your application.
    You will need to configure the part of the site that the user will want to use
    and ensure this will work. Not all user interactions lead to data being read or
    written, but many do, so therefore you need to figure out when that’s the case
    and “connect” a user interaction with your data flow, as mentioned above.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**处理用户交互**：用户会希望与你的应用程序进行交互。你需要配置用户想要使用的网站部分，并确保它能正常工作。并非所有的用户交互都会导致数据的读取或写入，但很多都会，因此你需要弄清楚何时会发生这种情况，并“连接”用户交互与你的数据流，如上所述。'
- en: '**Data**: The data will vary depending on what parts of the app you’re addressing.
    If you implement a basket page, for example, you will need to deal with both product
    data as well as orders as the user is looking to “check out” their basket so they
    can purchase the products and get them delivered to a chosen address.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据**：数据将根据你针对的应用程序部分而变化。例如，如果你实现了一个购物车页面，你将需要处理产品数据以及订单，因为用户想要“结账”他们的购物车，以便他们可以购买产品并将它们送到所选地址。'
- en: Breaking the problem down into features
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将问题分解为功能
- en: 'We understand the business domain and roughly what type of problems we’re likely
    to encounter, so how can we break this down into features? From the previous chapters,
    we have an idea of how to do this, but the main difference is that instead of
    just creating a basket page, for example, that looks like it works, this should
    work. We can therefore break down a basket page, for example, into the following
    features:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们理解业务域以及我们可能遇到的类型的问题，那么我们如何将其分解为功能？从前几章，我们有一个如何做到这一点的想法，但主要区别是，我们不仅要创建一个看起来像能工作的购物车页面，例如，而应该是真正能工作的。因此，我们可以将购物车页面，例如，分解为以下功能：
- en: Read the basket information from the data source.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从数据源读取购物车信息。
- en: Render the basket information.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 渲染购物车信息。
- en: Add the item to the basket.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将商品添加到购物车。
- en: Adjust the selected number of items for a specific item in the basket.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调整购物车中特定商品的选择数量。
- en: Remove an item from the basket.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从购物车中移除商品。
- en: Support checking out a basket, taking the user to an order page where they will
    be asked for purchase information and a delivery page.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持检查购物车，将用户带到订单页面，在那里他们将需要提供购买信息和送货页面。
- en: An e-commerce site consists of many different pages. It’s therefore recommended
    to do a similar feature breakdown for each page as you address a specific page.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 一个电子商务网站由许多不同的页面组成。因此，建议在处理特定页面时，为每个页面进行类似的特性分解。
- en: Prompting strategy
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提示策略
- en: 'The prompting strategy is a bit dependent on the chosen AI tool, how it works,
    and how we prompt. GitHub Copilot is our chosen AI tool for this chapter, and
    we will focus mostly on its in-editor experience where you type prompts in open
    files. The approaches we will show throughout this chapter are the following:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 提示策略在一定程度上取决于所选的AI工具，它的工作方式以及我们如何进行提示。GitHub Copilot是我们本章所选的AI工具，我们将主要关注其编辑器内的体验，即你在打开的文件中输入提示。本章中我们将展示的方法如下：
- en: '**Inline comments**: This means we will write prompts directly in open files.
    You can add prompts this way at the top of the file and also add additional supporting
    prompts where you’re trying to have your AI assistant build specific code blocks.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**内联注释**：这意味着我们将直接在打开的文件中编写提示。你可以这样在文件顶部添加提示，也可以在尝试让AI助手构建特定代码块的地方添加额外的支持提示。'
- en: '**Chat**: We will not show this approach that much, but we do recommend using
    the chat just to compare and contrast or if you need to look up specific information
    or want advice on how to implement something.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**聊天**：我们不会过多展示这种方法，但我们确实建议使用聊天来比较和对比，或者如果你需要查找特定信息或需要关于如何实现某事的建议。'
- en: The general recommendation throughout this book is that you use a blended approach
    of both using prompts directly in open files “in-editor” and typing prompts in
    the chat windows. These approaches come with their pros and cons. As for prompt
    pattern, we’re going to be using the “Exploratory prompt pattern” as described
    in *Chapter 2*.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在整本书中的一般建议是，你使用直接在打开的文件中“在编辑器内”使用提示和在聊天窗口中输入提示的混合方法。这些方法都有其优缺点。至于提示模式，我们将使用*第2章*中描述的“探索性提示模式”。
- en: Adding JavaScript
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加JavaScript
- en: 'To add JavaScript to a web page, there are two main approaches:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 要向网页添加JavaScript，有两种主要方法：
- en: 'Using a `script` tag in the `head` element: In this version, you would add
    a script tag to an existing HTML page, for example, named `index.html`.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`<head>`元素中使用`<script>`标签：在这个版本中，你将向现有的HTML页面添加一个`<script>`标签，例如，命名为`index.html`。
- en: '[PRE0]'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Pointing to a stand-alone file: In this case, you would write your JavaScript
    in an existing file, `my-javascript-file.js`:'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 指向一个独立的文件：在这种情况下，你将在现有的文件中编写你的JavaScript代码，例如，命名为`my-javascript-file.js`：
- en: '[PRE1]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The role of JavaScript
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JavaScript的作用
- en: When JavaScript was first added to the browser, it played the role of adding
    interactivity. Today, JavaScript often has an extended role as part of application
    frameworks like Vue.js, React, and Angular. In such frameworks, a developer can
    now declaratively define templates that, with the help of JavaScript, can be turned
    into static HTML, with event handling added, to respond to user interactions.
    Ultimately, all this is then sent to the browser to be rendered by it.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 当JavaScript最初被添加到浏览器中时，它扮演了添加交互性的角色。今天，JavaScript通常作为Vue.js、React和Angular等应用框架的一部分，扮演着扩展的角色。在这样的框架中，开发者现在可以声明性地定义模板，借助JavaScript的帮助，可以将这些模板转换为静态HTML，并添加事件处理以响应用户交互。最终，所有这些都会发送到浏览器进行渲染。
- en: Adding JavaScript to a page
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 向页面添加JavaScript
- en: 'Let’s show next how we can add JavaScript to a page by providing the following
    prompt:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们展示如何通过提供以下提示来向页面添加JavaScript：
- en: '**[Prompt]**'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**[提示]**'
- en: Create web page with a script tag.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`<script>`标签创建网页。
- en: '**[End of prompt]**'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**[提示结束]**'
- en: 'We end up with a web page that also contains a `script` tag. Note how the prompt
    is added as a comment at the top of the page. That’s how GitHub Copilot knows
    to suggest a text completion:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们最终得到一个包含`<script>`标签的网页。注意提示是如何作为注释添加到页面顶部的。这就是GitHub Copilot知道建议文本补全的方式：
- en: '**[Prompt response]**'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '**[提示响应]**'
- en: '[PRE2]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**[End of response]**'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '**[响应结束]**'
- en: In this case, the code calls `alert("Hello World")`, which will show a dialog
    box with the text “Hello World.”
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，代码调用`alert("Hello World")`，这将显示一个包含文本“Hello World”的对话框。
- en: 'A second example: adding a JavaScript library/framework'
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第二个示例：添加一个JavaScript库/框架
- en: The first example might not be all that useful, but let’s add something you’re
    likely to do, like adding a framework like Vue.js. The reason for adding a framework
    like Vue.js is that you want to build a large application consisting of a lot
    of interactivity and many different pages. To keep things organized, and make
    it easy for other developers to contribute, you want a framework like Vue.js.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个例子可能不是非常有用，但让我们添加一些你可能会做的事情，比如添加一个像Vue.js这样的框架。添加像Vue.js这样的框架的原因是，你想要构建一个由大量交互和许多不同页面组成的大型应用。为了保持事物有序，并使其他开发者容易贡献，你想要一个像Vue.js这样的框架。
- en: '**[Prompt]**'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**[提示]**'
- en: Add Vue 3.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 添加Vue 3。
- en: '**[End of prompt]**'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**[提示结束]**'
- en: 'This time, we place ourselves in the header tag. See the HTML comment in the
    `HEAD` tag below to indicate the prompt we’re using as input to GitHub Copilot:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，我们将自己放在标题标签中。请参见下面`HEAD`标签中的HTML注释，以指示我们用作GitHub Copilot输入的提示：
- en: '[PRE3]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This prompt results in the following suggestion:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 此提示导致以下建议：
- en: '**[Prompt response]**'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '**[提示响应]**'
- en: '[PRE4]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '**[End of response]**'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '**[响应结束]**'
- en: 'You can easily build on this by adding a prompt that asks to set up an entry
    point (most SPA frameworks work on the idea of having an entry point, an element
    where the app will be rendered):'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过添加一个提示来轻松构建，该提示要求设置入口点（大多数SPA框架都基于有一个入口点的理念，即应用将被渲染的元素）：
- en: '**[Prompt]**'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '**[提示]**'
- en: Add Vue 3 entry point.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 添加Vue 3入口点。
- en: '**[End of prompt]**'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '**[提示结束]**'
- en: 'This results in the following code:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这将导致以下代码：
- en: '**[Prompt response]**'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '**[提示响应]**'
- en: '[PRE5]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '**[End of response]**'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '**[响应结束]**'
- en: Placing our cursor below the `script` tag that imported Vue.js will lead to
    our AI assistant generating instructions for what code we should add to further
    set up Vue.js. It’s not enough to just add script to Vue.js; some additional code
    is needed.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 将光标放置在导入Vue.js的`script`标签下方，将导致我们的AI助手生成添加到进一步设置Vue.js的代码指令。仅仅添加到Vue.js的脚本是不够的；还需要一些额外的代码。
- en: 'Luckily, with our cursor placement like below, GitHub Copilot understands from
    existing HTML comments (prompts) what code is missing and will suggest that code
    at the location of our cursor (if a Copilot suggestion doesn’t appear, try pressing
    the *Spacebar* key or the *Return* key):'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，由于我们的光标放置如下，GitHub Copilot能够从现有的HTML注释（提示）中理解缺少的代码，并将该代码建议放置在我们的光标位置（如果Copilot建议没有出现，请尝试按*空格键*或*回车键*）：
- en: '**[Prompt]**'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '**[提示]**'
- en: No prompt given
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 没有给出提示
- en: '**[End of prompt]**'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '**[提示结束]**'
- en: '**[Prompt response]**'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '**[提示响应]**'
- en: '[PRE6]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '**[End of response]**'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '**[响应结束]**'
- en: It’s worth calling out again that GitHub Copilot had enough context to generate
    more suggestions by us only using Tab and Return key without the need to provide
    an extra prompt..
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，GitHub Copilot有足够的上下文，仅通过使用Tab键和回车键就可以生成更多建议，而无需提供额外的提示。
- en: 'Running this in a browser returns “Hello World,” which is what’s expected given
    the above code. The reason this code works, in case you’re not familiar with Vue.js,
    is that it contains the bare minimum of what’s needed for it to be referenced
    and configured:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中运行此代码返回“Hello World”，这是根据上述代码预期的。如果你不熟悉Vue.js，以下是代码工作的原因：它包含了使其可引用和配置所需的最小内容：
- en: '`script` tag, referencing Vue.js'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`script`标签，引用Vue.js'
- en: Creation of an app instance that also defines a data function with a `message`
    property
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个定义了具有`message`属性的`data`函数的应用实例
- en: A call to `mount()`, which ensures that the identified HTML tag (with `id =
    app`) is interpolated, and the `HTML` tag is replaced with the value of the property
    `message`
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调用`mount()`，确保识别的HTML标签（`id = app`）被插入，并将`HTML`标签替换为属性`message`的值
- en: When building a more advanced Vue.js project, please use the Vue CLI over the
    approach chosen above. For smaller proofs of concept, this approach could be OK.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 当构建更高级的Vue.js项目时，请使用Vue CLI而不是上述方法。对于较小的概念验证，这种方法可能是可行的。
- en: Challenge
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 挑战
- en: 'As a challenge, ask Copilot to add a button that increments a counter. You
    can use the following prompt:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 作为挑战，要求Copilot添加一个增加计数器的按钮。你可以使用以下提示：
- en: '**[Prompt]**'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '**[提示]**'
- en: Add a button that increments a counter.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 添加一个按钮来增加计数器。
- en: '**[End of prompt]**'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '**[提示结束]**'
- en: It is recommended that you place the cursor in the HTML markup where the `DIV`
    element with `id="app"` is located.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 建议您将光标放置在HTML标记中`DIV`元素`id="app"`所在的位置。
- en: 'Use case: adding behavior'
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用例：添加行为
- en: 'For this part of our e-commerce use case, let’s work on rendering a cart page
    of items. In this case, we will mock calling a backend for the data and let the
    data be placed in a file called `cart.json` with the following structure:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们电子商务用例的这一部分，让我们来渲染一个商品购物车页面。在这种情况下，我们将模拟调用后端获取数据，并将数据放置在一个名为 `cart.json`
    的文件中，其结构如下：
- en: '[PRE7]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The above JSON content describes a JSON object (defined by `{}`), with the property
    `cart`, of the array type, as denoted by the square brackets, `[]`.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 上述 JSON 内容描述了一个 JSON 对象（由 `{}` 定义），具有 `cart` 属性，该属性为数组类型，如方括号 `[]` 所示。
- en: 'In fact, let’s use our AI assistant to generate the data we need. Let’s create
    the `cart.json` file and the following structure and prompt:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，让我们使用我们的 AI 助手生成我们所需的数据。让我们创建 `cart.json` 文件和以下结构和提示：
- en: '[PRE8]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Note the prompt `// item with id name, quantity and price, total = quantity
    * price`, which results in the following JSON:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 注意提示 `// item with id name, quantity and price, total = quantity * price`，它导致以下
    JSON：
- en: '[PRE9]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Adding a comment with `//` is OK when you try to generate more JSON code from
    Copilot, but it should be removed once you’re happy with the output.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 当你尝试从 Copilot 生成更多 JSON 代码时，添加带有 `//` 的注释是可以的，但一旦你对输出满意，就应该将其删除。
- en: 'Next, we need a file, `app.js`, that calls this JSON file and ends up rendering.
    We can use the `basket.html` file from the previous chapter. It should look something
    like so:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要一个文件，`app.js`，它调用此 JSON 文件并最终渲染。我们可以使用上一章中的 `basket.html` 文件。它应该看起来像这样：
- en: '[PRE10]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Let’s add `app.js` by adding a prompt to the end of the `body` tag:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在 `body` 标签的末尾添加 `app.js`，添加一个提示：
- en: '**[Prompt]**'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '**[提示]**'
- en: Add app.js.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 添加 `app.js`。
- en: '**[End of prompt]**'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '**[提示结束]**'
- en: '**[Copilot Response**'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '**[Copilot 响应**'
- en: '[PRE11]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '**[End of response]**'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '**[响应结束]**'
- en: 'In `app.js`, add the following prompt:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `app.js` 中添加以下提示：
- en: '**[Prompt]**'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '**[提示]**'
- en: Read cart.json and render the content as div elements to the element with ID
    basket. Add the CSS class basket-item to each item.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 读取 `cart.json` 并将内容作为 `div` 元素渲染到具有 ID 购物车的元素上。为每个项目添加 CSS 类 `basket-item`。
- en: '**[End of prompt]**'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '**[提示结束]**'
- en: 'It should give you a result similar to:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 应该给出类似的结果：
- en: '**[Prompt response]**'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '**[提示响应]**'
- en: '[PRE12]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '**[End of response]**'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '**[响应结束]**'
- en: 'The above code locates the HTML element whose ID is `basket` and then proceeds
    to loop through the array data. For each element in data, a new HTML element of
    type `DIV` will be created, and the following will happen to said element:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码定位到具有 ID `basket` 的 HTML 元素，然后继续遍历数组数据。对于数据中的每个元素，将创建一个新的 HTML 元素，类型为 `DIV`，以下是对该元素的操作：
- en: The CSS class `basket-item` will be added.
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 CSS 类 `basket-item` 添加。
- en: Its `innerHTML` property will be assigned the value of the `name` property.
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其 `innerHTML` 属性将被分配 `name` 属性的值。
- en: The specific element will be added to the parent element basket.
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将特定元素添加到父元素购物车中。
- en: 'You need to tweak the `forEach` portion of the code to `data.cart.forEach`
    to adjust it based on what the JSON file looks like (if your JSON says you have
    a `description` property instead of `name`, that should be reflected in the JavaScript
    code, etc.). The resulting output doesn’t look like much, though, just three titles:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要调整代码中的 `forEach` 部分，将其改为 `data.cart.forEach`，以根据 JSON 文件的外观进行调整（如果你的 JSON
    中说你有 `description` 属性而不是 `name`，那么这应该在 JavaScript 代码中得到反映等）。然而，最终的结果看起来并不多，只有三个标题：
- en: '[PRE13]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Improving the output
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 提高输出质量
- en: 'To improve the output, there are a few things we want to do, like:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 为了提高输出质量，我们想做一些事情，比如：
- en: 'Add a CSS class to each rendered property on an item:'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为每个渲染的项目属性添加 CSS 类：
- en: '[PRE14]'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: You don’t always need to type a prompt to get the above response. Sometimes
    it’s enough to type `.basket-item` and CSS will be suggested to you that you can
    accept using the *Tab* key. Be sure that you are in either a style tag or a `.css`
    file when writing this, though.
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你并不总是需要输入提示来获取上述响应。有时，只需输入 `.basket-item` 就足够了，CSS 会为你提供建议，你可以使用 *Tab* 键接受它。不过，确保你在
    style 标签或 `.css` 文件中编写此代码。
- en: 'Add prompts in the JavaScript code to make it render each item property as
    separate `div` elements:'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 JavaScript 代码中添加提示，使其将每个项目属性作为单独的 `div` 元素渲染：
- en: '**[Prompt]**'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '**[提示]**'
- en: //Read `cart.json` and render the content as `div` elements to the element with
    `id` basket, add CSS class `basket-item` to each item
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: //读取 `cart.json` 并将内容作为 `div` 元素渲染到具有 `id` 购物车的元素上，为每个项目添加 CSS 类 `basket-item`
- en: '**[End of prompt]**'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '**[提示结束]**'
- en: '**[Prompt response]**'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '**[提示响应]**'
- en: '[PRE15]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '**[End of response]**'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '**[响应结束]**'
- en: 'At this point, the above prompt has managed to call the `fetch` method to retrieve
    data from the `cart.json` file. It then proceeded to convert the retrieved data
    into JSON format and identified the HTML element we will want to render the JSON
    response on:'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 到目前为止，上述提示已经成功调用了 `fetch` 方法从 `cart.json` 文件中检索数据。然后它继续将检索到的数据转换为 JSON 格式，并确定了我们将要在其上渲染
    JSON 响应的 HTML 元素：
- en: '[PRE16]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'In this section of the code, we’ve added context on what fields (`name`, `quantity`,
    etc.) we want to read from the JSON content. From the code, you can see this prompt
    instruction is reflected in the generated code and each field gets its own `DIV`
    element and descriptive text:'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在这段代码中，我们添加了关于我们想要从 JSON 内容中读取哪些字段（`name`、`quantity` 等）的上下文。从代码中，你可以看到这个提示指令反映在生成的代码中，并且每个字段都得到了自己的
    `DIV` 元素和描述性文本：
- en: '[PRE17]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: In this prompt, we’re providing specific instructions to multiply certain fields
    (price x quantity) to produce a total price for the row. At the same time, we
    can see how a call to `reduce` calculates the basket’s total price.
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在这个提示中，我们提供了特定的指令来乘以某些字段（价格 x 数量），以产生行的总价。同时，我们可以看到如何通过 `reduce` 调用来计算购物车的总价。
- en: 'The end result looks like so. It’s far from perfect but looks more like what
    we can expect:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 最终结果看起来是这样的。它远非完美，但看起来更接近我们预期的样子。
- en: '![rendered cart showing name, price and total](img/B21232_06_01.png)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![显示名称、价格和总价的渲染购物车](img/B21232_06_01.png)'
- en: 'Figure 6.1: Rendered cart showing name, price, and total'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.1：渲染的购物车显示名称、价格和总价
- en: Adding Bootstrap
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加 Bootstrap
- en: In the previous section, we showed how we can add some basic CSS to our cart
    page. However, to really improve the looks of our basket page, we think adding
    a CSS framework like Bootstrap can be a good idea. Bootstrap is used by many teams
    across the world and has many different types of content, like “cards” and “menus,”
    that will enable us to work faster in building our app.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们展示了如何向我们的购物车页面添加一些基本的 CSS。然而，为了真正改善我们的篮子页面的外观，我们认为添加一个如 Bootstrap 这样的
    CSS 框架是一个好主意。Bootstrap 被世界各地的许多团队使用，并且有许多不同类型的内容，如“卡片”和“菜单”，这将使我们能够更快地构建我们的应用程序。
- en: 'To add Bootstrap, we place ourselves with a prompt comment in the `head` element
    like so:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加 Bootstrap，我们在 `head` 元素中放置一个提示注释，如下所示：
- en: '**[Prompt]**'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '**[提示]**'
- en: Add Bootstrap.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 添加 Bootstrap。
- en: '**[End of prompt]**'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '**[提示结束]**'
- en: '**[Prompt response]**'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '**[提示响应]**'
- en: '[PRE18]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '**[End of response]**'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '**[响应结束]**'
- en: At this point, we have added Bootstrap to our web app, but we need to use one
    of its classes. Previously, we mentioned the concept of “cards,” when we discussed
    Bootstrap and its types of content, a layout that renders nicely.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经将 Bootstrap 添加到我们的 Web 应用中，但我们需要使用其类中的一个。之前，当我们讨论 Bootstrap 及其内容类型时，我们提到了“卡片”的概念，它是一种渲染得很好的布局。
- en: 'To produce a card, we can give it a prompt like so on the web page:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 要在网页上创建一个卡片，我们可以给出如下提示：
- en: '**[Prompt]**'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '**[提示]**'
- en: Create a card with the fields name, price, quantity, and total.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个包含名称、价格、数量和总价的卡片。
- en: '**[End of prompt]**'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '**[提示结束]**'
- en: 'We get the following result:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到了以下结果：
- en: '**[Prompt response]**'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '**[提示响应]**'
- en: '[PRE19]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '**[End of response]**'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '**[响应结束]**'
- en: Above, we placed the prompt in our open text file as an HTML comment and accepted
    Copilot’s suggestion via the *Tab* key.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面，我们将提示作为 HTML 注释放置在我们的开放文本文件中，并通过 *Tab* 键接受 Copilot 的建议。
- en: OK, we had a good start. We have added Bootstrap to our web app. We also used
    Copilot to create an HTML card sample that we can use. The next step is to change
    our JavaScript code.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，我们有一个良好的开始。我们已经将 Bootstrap 添加到我们的 Web 应用中。我们还使用 Copilot 创建了一个 HTML 卡片示例，我们可以使用它。下一步是更改我们的
    JavaScript 代码。
- en: 'To change our JavaScript code, we will give Copilot a bit more context than
    usual, namely:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 要更改我们的 JavaScript 代码，我们将给 Copilot 提供比平时更多的上下文，即：
- en: '**[Prompt]**'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '**[提示]**'
- en: 'See below:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 见下文：
- en: '[PRE20]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '**[End of prompt]**'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '**[提示结束]**'
- en: 'This results in the following code:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 这导致了以下代码：
- en: '**[Prompt response]**'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '**[提示响应]**'
- en: '[PRE21]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '**[End of response]**'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '**[响应结束]**'
- en: All of this felt a tiny bit convoluted, going back and forth between JavaScript
    and HTML. This is the reason why many developers use a JavaScript framework in
    which they can augment the HTML, using templates, and just add instructions to
    it, like you do when you, for example, use a framework like Vue.js.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些感觉有点复杂，在 JavaScript 和 HTML 之间来回切换。这就是为什么许多开发者会使用一个可以增强 HTML 的 JavaScript
    框架，使用模板，并给它添加指令，就像你使用 Vue.js 这样的框架时那样。
- en: Adding Vue.js
  id: totrans-170
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加 Vue.js
- en: At this point, we’ve realized that our approach wasn’t so good. We let JavaScript
    handle the creation of HTML elements and populate them from a JSON response. What
    we’re looking for is a cleaner approach. We will therefore start from the beginning.
    However, because we’ve been working with Copilot, it “remembers” that we’re working
    with `basket-type` data, and the file we’re working with, `basket.html`, helps
    provide additional context to Copilot. It might seem a bit like magic, what you’re
    about to see, but it’s really a result of Copilot having built up an in-memory
    context having worked with you.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: If you’re starting fresh with just having opened Visual Studio Code, you would
    probably need to use a more detailed prompt.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: It might sound like a big change to add a JavaScript framework at this point,
    but it really isn’t. Let’s show the needed changes step by step.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let’s add support for Vue.js in our `basket.html` file. We add the below
    prompt at the end of the `BODY` tag:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: '**[Prompt]**'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: Add Vue 3.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: '**[End of prompt]**'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: '**[Prompt response]**'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '**[End of response]**'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: The next thing we need is code that creates our Vue app.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: '**[Prompt]**'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: Add Bootstrap code for Vue 3.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: '**[End of prompt]**'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: 'The resulting code is as follows:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: '**[Prompt response]**'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '**[End of response]**'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: Remember what we said about the in-memory context of Copilot. It remembers everything
    we’ve fed it so far on what fields the basket has, and it also looks at the name
    of the file `basket.html`; that’s the result you see above.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: 'Lastly, we need to state how we want to render the app:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: '**[Prompt]**'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: Render basket from Vue app.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: '**[End of prompt]**'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: '**[Prompt response]**'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '**[End of response]**'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: 'The cart will look like this:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: '![Display of cart using Vue.js](img/B21232_06_02.png)'
  id: totrans-198
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.2: Display of cart using Vue.js'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: If you were to try out the page at this point and run it in a browser, you would
    notice how the **+** and **-** buttons increment and decrement products.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: 'At this point, what’s missing is ensuring our Vue app uses the Bootstrap CSS
    library. We can address that by modifying our prompt for generating the HTML markup
    from:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
- en: '**[Prompt]**'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: Render basket from Vue app.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: '**[End of prompt]**'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
- en: 'We can change it to a prompt with added context on Bootstrap, like so:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: '**[Prompt]**'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
- en: Render basket from Vue app, using Bootstrap and the card class.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
- en: '**[End of prompt]**'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: 'This results in the following HTML markup:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot of a cellphone  Description automatically generated](img/B21232_06_03.png)'
  id: totrans-210
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.3: Cart in HTML markup'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: Assignment
  id: totrans-212
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Create a product list page. The page should show a list of products. Each product
    should have an **Add** button that will add the product to a cart. The cart should
    be represented as a cart icon in the top-right corner of the page and when clicked
    should display the number of items in the cart and the total value.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: Use what you’ve been taught to craft a prompt to create the page, add JavaScript,
    and more. It’s up to you if you want to add Vue.js to solve this or if you want
    to use plain JavaScript.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 使用你所学的知识来构建一个提示，以创建页面、添加 JavaScript 等。是否添加 Vue.js 来解决这个问题，还是使用纯 JavaScript，取决于你。
- en: Solution
  id: totrans-215
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解决方案
- en: 'You can find the solution to this assignment in the GitHub repository: [https://github.com/PacktPublishing/AI-Assisted-Software-Development-with-GitHub-Copilot-and-ChatGPT](https://github.com/PacktPublishing/AI-Assisted-Software-Development-with-GitHub-Copilot-and-ChatGPT)*.*'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 GitHub 仓库中找到这个作业的解决方案：[https://github.com/PacktPublishing/AI-Assisted-Software-Development-with-GitHub-Copilot-and-ChatGPT](https://github.com/PacktPublishing/AI-Assisted-Software-Development-with-GitHub-Copilot-and-ChatGPT)*.*
- en: Summary
  id: totrans-217
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we’ve shown how to add JavaScript to a web page. Adding JavaScript
    to a web page is a common task and can be done in two ways, either by adding a
    `script` tag to the `head` element or by pointing to a standalone file.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们展示了如何将 JavaScript 添加到网页中。将 JavaScript 添加到网页是一个常见的任务，可以通过两种方式完成，要么在 `head`
    元素中添加 `script` 标签，要么指向一个独立的文件。
- en: We’ve also shown how we can build on our use case from previous chapters by
    adding behavior to our app. We first showed how to even let JavaScript generate
    the markup, which can become a bit unwieldy. Then, we made the case for using
    a JavaScript framework like Vue.js to make it easier to manage.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还展示了如何通过向我们的应用添加行为来扩展前几章的使用案例。我们首先展示了如何让 JavaScript 生成标记，这可能会变得有些难以控制。然后，我们提出了使用
    JavaScript 框架如 Vue.js 来简化管理的理由。
- en: You’ve also seen how you can add a JavaScript framework like Vue.js. Exactly
    how you add a JavaScript framework varies by framework but it’s generally recommended
    to add a prompt with wording including keywords like setup or initialize to ensure
    you not only add a `script` tag but also add code that triggers a setup process
    and makes the selected framework ready to use.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 你也看到了如何添加一个 JavaScript 框架，例如 Vue.js。具体添加 JavaScript 框架的方法因框架而异，但通常建议添加一个包含如
    setup 或 initialize 等关键词的提示，以确保你不仅添加了 `script` 标签，还添加了触发设置过程并使选定的框架准备就绪的代码。
- en: In the next chapter, we will show how we can add responsiveness to our app and
    cater to many different devices and viewports. We can no longer assume that everyone
    is using a desktop computer with a large screen. Many of our users will be using
    a mobile device with a smaller screen.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将展示如何为我们的应用添加响应性，以适应许多不同的设备和视口。我们不能再假设每个人都在使用大屏幕的台式电脑。我们的大多数用户将使用屏幕较小的移动设备。
- en: Join our community on Discord
  id: totrans-222
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加入我们的 Discord 社区
- en: 'Join our community’s Discord space for discussions with the author and other
    readers:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 加入我们社区的 Discord 空间，与作者和其他读者进行讨论：
- en: '[https://packt.link/aicode](https://packt.link/aicode)'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://packt.link/aicode](https://packt.link/aicode)'
- en: '![](img/QR_Code510410532445718281.png)'
  id: totrans-225
  prefs: []
  type: TYPE_IMG
  zh: '![](img/QR_Code510410532445718281.png)'
