["```py\nimport math\nimport requests\nfrom bs4 import BeautifulSoup\nimport pandas as pd\nfrom sklearn import linear_model\nfrom sklearn.metrics import mean_absolute_error\nimport matplotlib.pyplot as plt\nfrom scipy.stats import pearsonr \n```", "```py\nurl = \\\n'http://wiki.stat.ucla.edu/socr/index.php/SOCR_Data_Dinov_020108_HeightsWeights'\npage = requests.get(url)\nheight_weight_df = pd.read_html(url)[1][['Height(Inches)','Weight(Pounds)']] \n```", "```py\nx = height_weight_df['Height(Inches)'].values.reshape(num_records, 1)\ny = height_weight_df['Weight(Pounds)'].values.reshape(num_records, 1) \n```", "```py\nmodel = linear_model.LinearRegression().fit(x,y) \n```", "```py\nprint(\"ŷ =\" + str(model.intercept_[0]) + \" + \" +\\\n      str(model.coef_.T[0][0]) + \" x₁\") \n```", "```py\nŷ = -106.02770644878132 + 3.432676129271629 x1 \n```", "```py\ny_pred = model.predict(x)\nprint(mean_absolute_error(y, y_pred)) \n```", "```py\nplt.scatter(x, y, color='black')\nplt.plot(x, y_pred, color='blue', linewidth=3)\nplt.plot(x, y_pred + mae, color='lightgray')\nplt.plot(x, y_pred - mae, color='lightgray') \nFigure 1.1 is what you get as the output:\n```", "```py\ncorr, pval = pearsonr(x[:,0], y[:,0])\nprint(corr) \n```", "```py\n0.5568647346122992 \n```", "```py\nprint(pval < 0.05) \n```"]