- en: '*Chapter 11*: Operationalize ML Projects with SageMaker Projects, Pipelines,
    and Model Registry'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Data scientists used to spend too much time and effort maintaining and manually
    managing ML pipelines, a process that starts with data, processing, training,
    and evaluation and ends with model hosting with ongoing maintenance. SageMaker
    Studio provides features that aim to streamline these operations with **continuous
    integration and continuous delivery** (**CI/CD**) best practices. You will learn
    how to implement SageMaker projects, Pipelines, and the model registry to help
    operationalize the ML lifecycle with CI/CD.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will be learning about the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Understanding ML operations and CI/CD
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a SageMaker project
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Orchestrating an ML pipeline with SageMaker Pipelines
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running CI/CD in SageMaker Studio
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For this chapter, you will need to ensure that the SageMaker project template
    permission is enabled in the Studio setting. If you have finished [*Chapter 8*](B17447_08_ePub_RK.xhtml#_idTextAnchor108),
    *Jumpstarting ML with SageMaker JumpStart and Autopilot*, you should have the
    permissions. You can verify it in the Studio **domain** view with the following
    steps:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: If either of the permissions is disabled as shown in *Figure 11.1*, you can
    click **Edit Settings** to change this.
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.1 – Checking and editing the SageMaker projects permissions'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17447_11_01.jpg)'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.1 – Checking and editing the SageMaker projects permissions
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: Go to **Step 2 Studio Settings** to switch on the SageMaker projects and JumpStart
    permissions as shown in *Figure 11.2*.
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.2 – Enabling SageMaker project templates for the account and users'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17447_11_02.jpg)'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.2 – Enabling SageMaker project templates for the account and users
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: Then click **Next** to go to the next page and click **Submit**.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This ensures SageMaker project template permissions are enabled for you.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: Understanding ML operations and CI/CD
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the ML lifecycle, there are many steps that require a skilled data scientist's
    hands-on interaction throughout, such as wrangling the dataset, training, and
    evaluating a model. These manual steps could affect an ML team's operations and
    speed to deploy models in production. Imagine your model training job takes a
    long time and finishes in the middle of the night. You either have to wait for
    your first data scientist to come in during the day to evaluate the model and
    deploy the model into production or have to employ an on-call rotation to have
    someone on standby at all times to monitor the model training and deployment.
    But neither option is ideal if you want an effective and efficient ML lifecycle.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: '**Machine Learning Operations** (**MLOps**) is critical to a team that wants
    to stay lean and scale well. MLOps helps you streamline and reduce manual human
    intervention as much as possible. It helps transform your ML lifecycle to enterprise-grade.
    It helps you scale and maintain the quality of your models that are put into production
    and it also helps you improve time to model delivery with automation.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**机器学习运维**（**MLOps**）对于想要保持精简并良好扩展的团队至关重要。MLOps帮助你尽可能简化并减少人工干预。它帮助你将ML生命周期转变为企业级。它帮助你扩展并维护投入生产中的模型的质量，同时也有助于通过自动化提高模型交付的时间。'
- en: So, what exactly is MLOps?
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，MLOps究竟是什么呢？
- en: 'MLOps refers to a methodology to apply DevOps best practices to the ML lifecycle.
    **DevOps** stands for software **Development** (**Dev**) and IT **Operations**
    (**Ops**). DevOps aims to increase a team''s ability to deliver applications at
    a high pace with high quality using a set of engineering, practices, and patterns.
    It also promotes a new cultural and behavioral paradigm in an organization. MLOps
    recommends the following practices, which are built upon DevOps best practices
    with some modifications tailored to the nature of ML:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: MLOps指的是一种将DevOps最佳实践应用于机器学习生命周期的方法论。**DevOps**代表软件**开发**（**Dev**）和IT**运维**（**Ops**）。DevOps旨在通过一套工程、实践和模式，提高团队快速、高质量交付应用程序的能力。它还促进了一个组织中的新文化和行为范式。MLOps推荐以下实践，这些实践基于DevOps最佳实践，并针对ML的特性进行了一些修改：
- en: '**Continuous Integration** (**CI**): In DevOps, developers constantly commit
    and merge their code changes into a central repository, after which tests are
    automatically run to validate the code. In ML, not only does the code need to
    be integrated and validated, but so does the training data and ML models. The
    training data needs to be versioned, model lineage needs to be tracked for traceability,
    and tests on data and models, besides the code, need to be implemented as well.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**持续集成**（**CI**）：在DevOps中，开发者不断提交并合并他们的代码更改到中央仓库，之后自动运行测试以验证代码。在机器学习（ML）中，不仅代码需要集成和验证，训练数据和ML模型也是如此。训练数据需要版本控制，模型血缘需要追踪以实现可追溯性，除了代码之外，数据和模型的测试也需要实施。'
- en: '**Continuous Delivery** (**CD**): In DevOps, this is a practice where code
    is built, tested, and released for production in an automatic fashion. In MLOps,
    similar to what was discussed about continuous integration, the operations include
    data and models besides the ML source code.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**持续交付**（**CD**）：在DevOps中，这是一种自动构建、测试和发布生产代码的实践。在MLOps中，与持续集成讨论的内容类似，操作包括除了ML源代码之外的数据和模型。'
- en: '**Everything as code**: In order to streamline and automate for CI and CD (CI/CD
    for short), everything needs to be implemented as code: the process, infrastructure,
    and configuration, instead of any manual setup and point-and-click process on
    screen. This practice also enables version control and reproducibility for your
    processes, infrastructures, and configurations.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**一切皆代码**：为了使持续集成和持续部署（CI/CD，简称CI/CD）流程简化和自动化，一切都需要以代码的形式实现：流程、基础设施和配置，而不是在屏幕上任何手动设置和点击操作。这种做法也使得你的流程、基础设施和配置能够实现版本控制和可重复性。'
- en: '**Monitoring and logging**: This practice encourages you to log all things
    related to your software/ML system for visibility and auditability. You not only
    log the ML metrics, data lineage, data versions, and model versions, but also
    log the CI/CD processes, and any errors for debugging and monitoring purposes.
    This enables the next practice.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**监控和日志记录**：这种实践鼓励你记录与你的软件/ML系统相关的所有内容，以实现可见性和可审计性。你不仅记录ML指标、数据血缘、数据版本和模型版本，还记录CI/CD流程以及任何错误，用于调试和监控目的。这为下一个实践提供了支持。'
- en: '**Communication and collaboration**: Because everything is code, and everything
    is automated and logged, you have a transparent environment that invites collaboration
    and communication. Instead of working in silos with a manual hand-off, which causes
    friction and opacity, your entire team can work more closely together on the system.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**沟通与协作**：因为一切皆代码，一切皆自动化并记录，你拥有一个透明的工作环境，这鼓励协作和沟通。而不是在孤岛中手动交接，这会导致摩擦和透明度降低，你的整个团队能够更紧密地在系统上协作工作。'
- en: 'The key benefits that MLOps brings to the table are the following:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: MLOps带来的关键益处如下：
- en: '**Faster time to market**: Because now your model deployment is automatically
    created and deployed as part of the CI/CD process, your model training and deployment
    are streamlined without any handoff or manual processes. You can expect more iterations
    of refinement within the same timeframe and a quicker turnaround time for a mature
    product.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**更快的上市时间**：因为现在你的模型部署是作为 CI/CD 流程的一部分自动创建和部署的，所以你的模型训练和部署流程得到了简化，没有任何交接或手动流程。你可以在相同的时间内期待更多的迭代优化，并且成熟产品的周转时间会更快。'
- en: '**Productivity**: A lot of manual processes are taken away from data scientists
    and ML developers so that they can focus on ML modeling where things cannot be
    automated.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**生产力**：许多手动流程从数据科学家和 ML 开发人员那里移除，使他们能够专注于无法自动化的 ML 模型构建。'
- en: '**Repeatability**: Also, because everything is code and is automated, your
    ML lifecycle can be performed by anyone at any time with exactly the same output.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可重复性**：此外，由于一切都是代码并且是自动化的，你的 ML 生命周期可以由任何人在任何时候以完全相同的结果执行。'
- en: '**Reliability**: With the tests and validations performed in the CI/CD process,
    you know that your models are high quality. You can also consistently produce
    high-quality models thanks to the repeatability CI/CD provides.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可靠性**：在 CI/CD 流程中进行的测试和验证，让你知道你的模型质量很高。由于 CI/CD 提供的可重复性，你还可以持续地生产高质量的模型。'
- en: '**Auditability**: As code, data, and models are versioned and lineage and processes
    are logged, you can tell exactly how the models were trained and deployed.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可审计性**：由于代码、数据和模型都有版本控制，并且记录了血缘和流程，你可以确切地知道模型是如何被训练和部署的。'
- en: '**Better quality**: Combining all the benefits above, MLOps enables us to spend
    more time creating better models and letting the system take care of the integration
    and delivery quickly, reliably, and repeatably.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**更好的质量**：结合上述所有优点，MLOps 使我们能够花更多的时间创建更好的模型，并让系统快速、可靠、可重复地处理集成和交付。'
- en: 'You may think: *MLOps seems too perfect to be easily adopted*. Yes, you do
    need to incorporate additional technology into your ML lifecycle to enable the
    CI/CD process. And yes, you need to implement many details to enable the logging
    and monitoring. It is also true that to adopt the *everything as code* practice,
    many iterations of testing on the infrastructure code and configuration are required
    at the beginning. The good news is, in SageMaker Studio, adopting MLOps practices
    for your ML project is made easy. SageMaker Studio has templatized the CI/CD processes
    for numerous use cases so that you can easily pick one and adopt the MLOps best
    practices and technologies from the templated ML use case for your use case. The
    features that enable MLOps and CI/CD are **SageMaker projects**, **SageMaker Pipelines**,
    and **SageMaker Model Registry**.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会想：*MLOps 看起来太完美了，难以轻易采用*。是的，你确实需要在你的 ML 生命周期中整合额外的技术来启用 CI/CD 流程。是的，你需要实施许多细节来启用日志记录和监控。同样，为了采用“一切皆代码”的实践，在开始时确实需要对基础设施代码和配置进行许多迭代测试。好消息是，在
    SageMaker Studio 中，为你的 ML 项目采用 MLOps 实践变得很容易。SageMaker Studio 为许多用例模板化了 CI/CD
    流程，这样你就可以轻松选择一个，并从模板化的 ML 用例中采用 MLOps 最佳实践和技术，以适应你的用例。使 MLOps 和 CI/CD 成为可能的特性包括
    **SageMaker 项目**、**SageMaker 流程**和**SageMaker 模型注册**。
- en: Let's get started by creating a SageMaker project first.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们通过创建一个 SageMaker 项目来开始。
- en: Creating a SageMaker project
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个 SageMaker 项目
- en: A **SageMaker project** enables you to automate the model building and deployment
    pipelines with MLOps and CI/CD from SageMaker-provided templates and your own
    custom templates. With a SageMaker-provided template, all the initial setup and
    resource provisioning is handled by SageMaker so you can quickly adopt it for
    your use case.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**SageMaker 项目**使你能够通过 SageMaker 提供的模板和自己的自定义模板，使用 MLOps 和 CI/CD 自动化模型构建和部署流程。使用
    SageMaker 提供的模板，所有初始设置和资源分配都由 SageMaker 处理，因此你可以快速将其应用于你的用例。'
- en: 'In this chapter, we will run an ML example with MLOps and CI/CD in SageMaker
    Studio. As we focus on MLOps and CI/CD in this chapter, we use a simple regression
    problem from the abalone dataset ([https://archive.ics.uci.edu/ml/datasets/abalone](https://archive.ics.uci.edu/ml/datasets/abalone))
    to predict the age of abalone from physical measurements. I will show you how
    you can create a project from SageMaker projects, and how each part of the MLOps
    system works. The MLOps system created from SageMaker projects enables automation
    of data validation, model building, model evaluation, deployment, and monitoring
    with a simple trigger from a code commit. This means that whenever we make any
    changes to the code base, the whole system will run through the complete ML lifecycle
    in SageMaker that we''ve learned about throughout this book automatically. You
    will see how much SageMaker has simplified MLOps for you. Let''s open up SageMaker
    Studio and follow the steps given here:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用SageMaker Studio中的MLOps和CI/CD运行一个ML示例。由于本章我们专注于MLOps和CI/CD，我们使用来自鲍鱼数据集（[https://archive.ics.uci.edu/ml/datasets/abalone](https://archive.ics.uci.edu/ml/datasets/abalone)）的简单回归问题来预测鲍鱼的年龄。我将向您展示如何从SageMaker项目创建项目，以及MLOps系统的每个部分是如何工作的。从SageMaker项目创建的MLOps系统可以通过简单的代码提交触发器自动化数据验证、模型构建、模型评估、部署和监控。这意味着每当我们对代码库进行任何更改时，整个系统将自动运行我们在这本书中学到的SageMaker的完整ML生命周期。您将看到SageMaker为您简化了多少MLOps。让我们打开SageMaker
    Studio并遵循这里给出的步骤：
- en: On the **Launcher** page, click the *plus sign* on the **New project** card,
    as shown in *Figure 11.3*.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**启动器**页面，点击**新建项目**卡片上的*加号*，如图*图11.3*所示。
- en: '![Figure 11.3 – Opening a new project in Launcher'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 11.3 – Opening a new project in Launcher'
- en: '](img/B17447_11_03.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/B17447_11_03.jpg](img/B17447_11_03.jpg)'
- en: Figure 11.3 – Opening a new project in Launcher
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.3 – 在启动器中打开新项目
- en: There are MLOps templates for various use cases created by SageMaker (under
    **SageMaker templates**) for us to choose from, as shown in *Figure 11.4*. Let's
    select **MLOps template for model building, training, deployment and monitoring**.
    This template automates the entire model lifecycle, which includes model building,
    deployment, and monitoring workflows. Click **Select project template**.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: SageMaker（在**SageMaker模板**下）为我们创建了各种用例的MLOps模板，如图*图11.4*所示。让我们选择**用于模型构建、训练、部署和监控的MLOps模板**。此模板自动化整个模型生命周期，包括模型构建、部署和监控工作流程。点击**选择项目模板**。
- en: '![Figure 11.4 – Choosing SageMaker managed templates'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 11.4 – Choosing SageMaker managed templates'
- en: '](img/B17447_11_04.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/B17447_11_04.jpg](img/B17447_11_04.jpg)'
- en: Figure 11.4 – Choosing SageMaker managed templates
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.4 – 选择SageMaker托管模板
- en: Note
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Templates whose names contain **with third-party Git repositories** are designed
    to work with your external Git repositories or CI/CD software such as **Jenkins**.
    You will need to provide additional information in the next step.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 模板名称包含**与第三方Git仓库**的模板旨在与您的外部Git仓库或CI/CD软件（如**Jenkins**）一起使用。您需要在下一步提供更多信息。
- en: Provide a name, description, and tags for the project on the **Project details**
    page. Click **Create project**.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**项目详情**页面为项目提供名称、描述和标签。点击**创建项目**。
- en: 'With this project template, SageMaker Studio is now provisioning cloud resources
    for MLOps and deploying the sample code. Let''s illustrate the MLOps architecture
    with the diagram shown in *Figure 11.5*:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此项目模板，SageMaker Studio现在正在为MLOps配置云资源并部署示例代码。让我们用图*图11.5*所示的图表来展示MLOps架构：
- en: '![Figure 11.5 – Architecture diagram of an MLOps setup with a SageMaker projects
    template'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 11.5 – Architecture diagram of an MLOps setup with a SageMaker projects
    template'
- en: '](img/B17447_11_05.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/B17447_11_05.jpg](img/B17447_11_05.jpg)'
- en: Figure 11.5 – Architecture diagram of an MLOps setup with a SageMaker projects
    template
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.5 – 使用SageMaker项目模板的MLOps设置架构图
- en: 'The cloud resources created include the following:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 创建的云资源包括以下内容：
- en: 'Three code repositories in **AWS CodeCommit**, a managed source control service
    that hosts private Git repositories. They can also be found in the AWS CodeCommit
    console: [https://console.aws.amazon.com/codesuite/codecommit/repositories](https://console.aws.amazon.com/codesuite/codecommit/repositories).
    Remember to switch to your own AWS Region from the URL.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在**AWS CodeCommit**中有三个代码仓库，这是一个托管私有Git仓库的托管源代码管理服务。它们也可以在AWS CodeCommit控制台中找到：[https://console.aws.amazon.com/codesuite/codecommit/repositories](https://console.aws.amazon.com/codesuite/codecommit/repositories)。请记住从URL切换到您自己的AWS区域。
- en: 'Three continuous delivery pipelines in **AWS CodePipeline**, a managed service
    that helps automate build, test, and release pipelines, can be found in the AWS
    CodePipeline console: [https://console.aws.amazon.com/codesuite/codepipeline/pipelines](https://console.aws.amazon.com/codesuite/codepipeline/pipelines).
    Remember to switch to your own AWS Region from the URL.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在**AWS CodePipeline**中，一个帮助自动化构建、测试和发布管道的托管服务，有三个持续交付管道可以在AWS CodePipeline控制台中找到：[https://console.aws.amazon.com/codesuite/codepipeline/pipelines](https://console.aws.amazon.com/codesuite/codepipeline/pipelines)。请记住从URL切换到您自己的AWS区域。
- en: 'Five event trigger rules in **Amazon EventBridge**, a managed service that
    makes it easier to build event-driven applications, can be found in the Amazon
    EventBridge console: [https://console.aws.amazon.com/events/home#/rules](https://console.aws.amazon.com/events/home#/rules).
    Remember to switch to your own AWS Region from the URL.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在**Amazon EventBridge**中，一个使构建事件驱动应用程序更容易的托管服务，可以在Amazon EventBridge控制台中找到五个事件触发规则：[https://console.aws.amazon.com/events/home#/rules](https://console.aws.amazon.com/events/home#/rules)。请记住从URL切换到您自己的AWS区域。
- en: These are essentially the backbone CI/CD framework that supports MLOps in SageMaker
    Studio. Repositories in CodeCommit are where we store, develop, and commit our
    code. Every commit to a code repository in CodeCommit is going to trigger, managed
    by rules in EventBridge, a run of the corresponding pipeline in CodePipeline to
    build, test, and deploy resources.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这些基本上是支持SageMaker Studio中MLOps的CI/CD框架的骨干。CodeCommit中的仓库是我们存储、开发和提交代码的地方。对CodeCommit中代码仓库的每次提交都将触发，由EventBridge中的规则管理，在CodePipeline中运行相应的管道以构建、测试和部署资源。
- en: Once the project creation is complete, you can see a portal for the project
    in the main working area as shown in *Figure 11.6*.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦项目创建完成，您可以在主工作区域中看到项目门户，如图11.6所示。
- en: '![Figure 11.6 – SageMaker project detail portal'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '![图11.6 – SageMaker项目详情门户'
- en: '](img/B17447_11_06.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17447_11_06.jpg)'
- en: Figure 11.6 – SageMaker project detail portal
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.6 – SageMaker项目详情门户
- en: This portal contains all the important resources and information that are associated
    to the project—code repositories in CodeCommit, ML pipelines from SageMaker Pipelines
    (which we will talk about soon), experiments tracked using SageMaker Experiments,
    models, hosted endpoints, and other settings.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 此门户包含与项目相关联的所有重要资源和信息——CodeCommit中的代码仓库、SageMaker Pipelines中的ML管道（我们很快会讨论到），使用SageMaker
    Experiments跟踪的实验、模型、托管端点和其他设置。
- en: We can clone the repositories from CodeCommit to a local SageMaker Studio directory.
    As the final step before we move on to describe the ML pipeline, let's clone the
    `<project-name-prefix>-modelbuild` repository, which contains the ML pipeline
    that builds, trains, and evaluates the ML model using the abalone dataset. Click
    the `<project-name-prefix>-modelbuild` repository as highlighted with an arrow
    in *Figure 11.6*.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以从CodeCommit克隆仓库到本地SageMaker Studio目录。在我们开始描述ML管道之前，作为最后一步，让我们克隆`<项目名称前缀>-modelbuild`仓库，该仓库包含使用鲍鱼数据集构建、训练和评估ML模型的ML管道。点击如图11.6中用箭头突出显示的`<项目名称前缀>-modelbuild`仓库。
- en: '![Figure 11.7 – Cloning a repository from CodeCommit to a local SageMaker Studio
    directory'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '![图11.7 – 从CodeCommit克隆仓库到本地SageMaker Studio目录'
- en: '](img/B17447_11_07.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17447_11_07.jpg)'
- en: Figure 11.7 – Cloning a repository from CodeCommit to a local SageMaker Studio
    directory
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.7 – 从CodeCommit克隆仓库到本地SageMaker Studio目录
- en: In the popup shown in *Figure 11.7*, click `~/<project-name-prefix>/<project-name-prefix>-modelbuild/`.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在如图11.7所示的弹出窗口中，点击`~/<项目名称前缀>/<项目名称前缀>-modelbuild/`。
- en: Let's look at the ML pipeline defined in this abalone example first, before
    we dive into the CI/CD part.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入CI/CD部分之前，让我们首先看看这个鲍鱼示例中定义的ML管道。
- en: Orchestrating an ML pipeline with SageMaker Pipelines
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用SageMaker Pipelines编排ML管道
- en: The template we're using contains an ML lifecycle pipeline that carries out
    data preprocessing, data quality checks, model training, model evaluation steps,
    and eventually model registration. This pipeline is a central piece of the MLOps
    process where the model is being created. The pipeline is defined in `<project-name-prefix>-modelbuild`
    using SageMaker Pipelines. **SageMaker Pipelines** is an orchestration tool for
    ML workflow in SageMaker. SageMaker Pipelines integrates with SageMaker Processing,
    training, Experiments, hosting, and the model registry. It provides reproducibility,
    repeatability, and tracks data/model lineage for auditability. Most importantly,
    you can visualize the workflow graph and runtime live in SageMaker Studio. The
    pipeline can be found under the **Pipelines** tab in the details portal as shown
    in *Figure 11.8*.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用的模板包含一个机器学习生命周期管道，该管道执行数据预处理、数据质量检查、模型训练、模型评估步骤，最终进行模型注册。该管道是MLOps流程中的核心部分，其中正在创建模型。该管道使用SageMaker
    Pipelines定义在`<project-name-prefix>-modelbuild`中。**SageMaker Pipelines**是SageMaker中机器学习工作流程的编排工具。SageMaker
    Pipelines与SageMaker Processing、训练、实验、托管和模型注册集成。它提供了可重复性、可重复性和审计的可追溯性。最重要的是，您可以在SageMaker
    Studio中可视化工作流程图和实时运行状态。该管道可以在详情门户的**管道**选项卡下找到，如图11.8所示。
- en: '![Figure 11.8 – A list of pipelines in the project'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '![图11.8 – 项目中的管道列表'
- en: '](img/B17447_11_08.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17447_11_08.jpg)'
- en: Figure 11.8 – A list of pipelines in the project
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.8 – 项目中的管道列表
- en: Note
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: I have used the term **pipeline** a lot in this chapter. Let's settle this once
    and for all. I am referring to the pipeline from SageMaker Pipelines, shown in
    *Figure 11.8* and *Figure 11.9*, as the **ML pipeline**. Please, do not confuse
    an ML pipeline with a CI/CD pipeline from AWS CodePipeline, which is briefly mentioned
    in the last section and will be further discussed in the *Running CI/CD in SageMaker
    Studio* section.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我多次使用了**管道**这个术语。让我们一次性解决这个问题。我指的是图11.8和图11.9中显示的SageMaker Pipelines的管道，即**ML管道**。请勿将ML管道与AWS
    CodePipeline的CI/CD管道混淆，后者在上一个部分中简要提及，将在*在SageMaker Studio中运行CI/CD*部分中进一步讨论。
- en: On double-clicking the pipeline, we can see the full execution graph and the
    live status of the pipeline, as shown in *Figure 11.9*. The corresponding pipeline
    code is in `~/<project-name-prefix>/<project-name-prefix>-modelbuild/pipelines/abalone/pipeline.py`.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 双击管道后，我们可以看到完整的执行图和管道的实时状态，如图11.9所示。相应的管道代码位于`~/<project-name-prefix>/<project-name-prefix>-modelbuild/pipelines/abalone/pipeline.py`。
- en: '![Figure 11.9 – Pipeline workflow and live status'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '![图11.9 – 管道工作流程和实时状态'
- en: '](img/B17447_11_09.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17447_11_09.jpg)'
- en: Figure 11.9 – Pipeline workflow and live status
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.9 – 管道工作流程和实时状态
- en: 'Let''s walk through the pipeline and how it is set up in the code. The pipeline
    contains the following steps (from top to bottom in the graph):'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们遍历管道以及它在代码中的设置。管道包含以下步骤（从图中自上而下）：
- en: 'First is preprocessing the dataset with SageMaker Processing (`pipeline.py`
    file, where we use classes and functions in the `sagemaker.workflow` module along
    with other `sagemaker` classes, a scikit-learn processor is defined to run a script
    `preprocess.py` in the same directory. Also, `ProcessingStep` is a class from
    the `sagemaker.workflow.steps` module:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，使用SageMaker Processing（`pipeline.py`文件，我们在`sagemaker.workflow`模块中使用类和函数，以及其他`sagemaker`类，定义了一个scikit-learn处理器来运行同一目录下的`preprocess.py`脚本。此外，`ProcessingStep`是`sagemaker.workflow.steps`模块中的一个类：
- en: '[PRE0]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'After the data is preprocessed, the pipeline checks against previously registered
    data quality and bias metrics and/or calculates the data quality and bias using
    SageMaker Clarify. Here, the output of the previous step `step_process.properties.ProcessingOutputConfig.Outputs["train"]`
    is used as the input baseline data. A `QualityCheckStep()` step object is instantiated
    here. This step computes the data quality statistics from the baseline training
    data and registers the statistics into the model registry once the model is created
    toward the end:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 数据预处理完成后，管道将检查之前注册的数据质量偏差指标，并/或使用SageMaker Clarify计算数据质量和偏差。在这里，前一步骤`step_process.properties.ProcessingOutputConfig.Outputs["train"]`的输出被用作输入基线数据。在这里实例化了一个`QualityCheckStep()`步骤对象。此步骤从基线训练数据中计算数据质量统计信息，并在模型创建结束时将统计信息注册到模型注册表中：
- en: '[PRE1]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'At the same time, the pipeline also computes the data bias using a step instantiated
    from the `ClarifyCheckStep()` class:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 同时，该管道还使用从`ClarifyCheckStep()`类实例化的步骤来计算数据偏差：
- en: '[PRE2]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: These two checking steps are conditional based on the `skip_check` arguments.
    `skip_check_data_quality` and `skip_check_data_bias` are pipeline input parameters
    and can be configured for each run. For the first run, you may skip the checks
    because there are no baseline statistics to check against. `register_new_baseline`
    is also conditional from pipeline input parameters, but most of the time you would
    register new baseline statistics when you have a new dataset unless you have a
    specific reason not to update the statistics.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个检查步骤基于 `skip_check` 参数是条件性的。`skip_check_data_quality` 和 `skip_check_data_bias`
    是管道输入参数，并且可以为每次运行进行配置。对于第一次运行，你可能可以跳过检查，因为没有基线统计数据可供比较。`register_new_baseline`
    也是从管道输入参数中条件性的，但大多数情况下，当你有一个新的数据集时，你会注册新的基线统计数据，除非你有不更新统计数据的特定原因。
- en: 'After the data quality and bias checks, a training job is created from a SageMaker
    estimator. In this example, the built-in XGBoost algorithm is used. `TrainingStep`
    is dependent on `DataQualityCheckStep` and `DataBiasCheckStep`, meaning that the
    training step waits for the two check steps to complete before starting, and takes
    the output from the preprocessing step, `step_process`:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在数据质量和偏差检查之后，从 SageMaker 估算器创建一个训练作业。在这个例子中，使用了内置的 XGBoost 算法。`TrainingStep`
    依赖于 `DataQualityCheckStep` 和 `DataBiasCheckStep`，这意味着训练步骤在开始之前等待两个检查步骤完成，并从预处理步骤的输出
    `step_process` 中获取：
- en: '[PRE3]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Next is to create a SageMaker Model from the training job using `CreateModelStep()`.
    `CreateModelInput()` takes instance types used for hosting purposes:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来是使用 `CreateModelStep()` 从训练作业创建 SageMaker 模型。`CreateModelInput()` 接收用于托管目的的实例类型：
- en: '[PRE4]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Once the SageMaker Model is created, two branches of model evaluation are performed.
    One is applied on a held-out test set for evaluation purposes using SageMaker
    Batch Transform `Transformer`:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦创建了 SageMaker 模型，就会执行两个模型评估分支。一个是使用 SageMaker 批量转换 `Transformer` 在保留的测试集上进行的评估：
- en: '[PRE5]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Note
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: The additional arguments in the `TransformInput()` class that have been omitted
    here in text but are available in `pipeline.py` are to configure Batch Transform
    input/output and to associate the output results with the input records. For more
    information, see [https://docs.aws.amazon.com/sagemaker/latest/dg/batch-transform-data-processing.html](https://docs.aws.amazon.com/sagemaker/latest/dg/batch-transform-data-processing.html).
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里文本中省略的 `TransformInput()` 类的附加参数，但在 `pipeline.py` 中可用，是为了配置批量转换的输入/输出，并将输出结果与输入记录关联。更多信息，请参阅
    [https://docs.aws.amazon.com/sagemaker/latest/dg/batch-transform-data-processing.html](https://docs.aws.amazon.com/sagemaker/latest/dg/batch-transform-data-processing.html)。
- en: 'The output of the Batch Transform, which is the prediction, is then used to
    calculate model quality metrics such as mean absolute error, root mean squared
    error, and the r-squared value:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 批量转换的输出，即预测，然后用于计算模型质量指标，如平均绝对误差、均方根误差和 r 平方值：
- en: '[PRE6]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The other evaluation route `EvaluateAbaloneModel` and `CheckMSEAbaloneEvalution`
    aims to evaluate the test dataset and use the performance metric as a condition
    in the ML pipeline to only proceed to register the model in the model registry
    if the mean squared error is less than or equal to `6.0`:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 另一个评估路线 `EvaluateAbaloneModel` 和 `CheckMSEAbaloneEvalution` 的目的是评估测试数据集，并将性能指标作为
    ML 管道中的条件，只有当均方误差小于或等于 `6.0` 时才继续注册模型到模型注册表中：
- en: '[PRE7]'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Two other checks are applied on models too in `ModelBiasCheckStep` and `ModelExplainabilityCheckStep`.
    They both use SageMaker Clarify to compute model bias and model explainability:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `ModelBiasCheckStep` 和 `ModelExplainabilityCheckStep` 中也对模型应用了其他检查。它们都使用 SageMaker
    Clarify 来计算模型偏差和模型可解释性：
- en: '[PRE8]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'After the checks to confirm the model''s performance, the model is registered
    in SageMaker Model Registry along with evaluation metrics, stored in the `model_metrics`
    variable, captured during the process, including performance metrics on test data,
    data bias, and model bias:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在确认模型性能的检查之后，模型连同评估指标一起注册到 SageMaker 模型注册表中，这些指标存储在 `model_metrics` 变量中，并在过程中捕获，包括测试数据上的性能指标、数据偏差和模型偏差：
- en: '[PRE9]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'With the steps defined, they are put into the `steps` argument in a `Pipeline`
    object. Parameters that are exposed to users are placed in the `parameters` argument:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义步骤后，它们被放入 `Pipeline` 对象的 `steps` 参数中。暴露给用户的参数放在 `parameters` 参数中：
- en: '[PRE10]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: You may wonder how SageMaker determines the order of the steps. SageMaker determines
    the order based on the data dependency and any explicit, custom dependency. We
    put the steps in a list of the `steps` argument and SageMaker takes care of the
    rest.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会想知道 SageMaker 如何确定步骤的顺序。SageMaker 根据数据依赖关系和任何显式或自定义依赖关系来确定顺序。我们将步骤放入 `steps`
    参数的列表中，SageMaker 会处理其余部分。
- en: Note
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: After the project is created, the three CodePipeline pipelines are run automatically.
    Only the first pipeline, `<project-name-prefix>-modelbuild`, will proceed correctly.
    The other two pipelines, `<project-name-prefix>-modeldeploy` and `<project-name-prefix>-modelmonitor`,
    depend on the output of the first pipeline so they will fail in the first run.
    Don't worry about the failure status now.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 项目创建后，三个 CodePipeline 管道将自动运行。只有第一个管道 `<project-name-prefix>-modelbuild` 将正确执行。其他两个管道
    `<project-name-prefix>-modeldeploy` 和 `<project-name-prefix>-modelmonitor` 依赖于第一个管道的输出，因此它们在第一次运行中将会失败。现在不用担心失败状态。
- en: At the end, a successfully executed pipeline creates and registers a model in
    SageMaker Model Registry. You can see the model in the model registry in the left
    sidebar, as shown in *Figure 11.10*. We will learn more about the model registry
    in later sections.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，成功执行的管道将在 SageMaker 模型注册表中创建和注册一个模型。您可以在左侧侧边栏中看到该模型，如图 *图 11.10* 所示。我们将在后面的章节中了解更多关于模型注册表的信息。
- en: '![Figure 11.10 – Resulting model in SageMaker Model Registry'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.10 – 在 SageMaker 模型注册表中生成的模型'
- en: '](img/B17447_11_010.jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17447_11_010.jpg)'
- en: Figure 11.10 – Resulting model in SageMaker Model Registry
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.10 – 在 SageMaker 模型注册表中生成的模型
- en: 'There are several ways to run a pipeline. One is with the CI/CD process, which
    is how the pipeline initially runs after deployment from the template. We will
    talk more about the CI/CD process in the next section, *Running CI/CD in SageMaker
    Studio*. The following shows how to trigger the pipeline manually:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 运行管道有多种方式。一种是通过 CI/CD 流程，这是从模板部署后管道最初运行的方式。我们将在下一节 *在 SageMaker Studio 中运行 CI/CD*
    中更多地讨论 CI/CD 流程。以下是如何手动触发管道的示例：
- en: You can click **Start an execution** from the SageMaker Studio UI as depicted
    in *Figure 11.11*.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以从 SageMaker Studio UI 中点击 **启动执行**，如图 *图 11.11* 所示。
- en: '![Figure 11.11 – Starting an execution of a pipeline in the pipeline list'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.11 – 在管道列表中启动管道执行'
- en: '](img/B17447_11_011.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17447_11_011.jpg)'
- en: Figure 11.11 – Starting an execution of a pipeline in the pipeline list
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.11 – 在管道列表中启动管道执行
- en: You can specify user inputs such as instance types, training data location,
    and other conditions for the checks, as shown in *Figure 11.12*. Click **Start**
    to start the workflow individually for a new dataset.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以指定用户输入，例如实例类型、训练数据位置和其他检查条件，如图 *图 11.12* 所示。点击 **启动** 以单独为新的数据集启动工作流程。
- en: '![Figure 11.12 – Starting the execution of a pipeline with user inputs'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.12 – 使用用户输入启动管道执行'
- en: '](img/B17447_11_012.jpg)'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17447_11_012.jpg)'
- en: Figure 11.12 – Starting the execution of a pipeline with user inputs
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.12 – 使用用户输入启动管道执行
- en: You can also run a pipeline using the SageMaker Python SDK. The templatized
    code repository `~/<project-name-prefix>/<project-name-prefix>-modelbuild/` has
    an example notebook, `sagemaker-pipelines-project.ipynb`, explaining the code
    structure in greater detail and showing how to run a pipeline programmatically.
    You can open the notebook, as shown in *Figure 11.13*, and run it as an alternative.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您还可以使用 SageMaker Python SDK 运行管道。模板化的代码存储库 `~/<project-name-prefix>/<project-name-prefix>-modelbuild/`
    中有一个示例笔记本 `sagemaker-pipelines-project.ipynb`，它更详细地解释了代码结构，并展示了如何程序化运行管道。您可以根据
    *图 11.13* 中的说明打开笔记本，并作为替代方案运行它。
- en: '![Figure 11.13 – A screenshot of the sagemaker-pipelines-project.ipynb notebook
    that shows you details such as code structure in the repository, and runs the
    pipeline programmatically'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.13 – 显示存储库中代码结构等详细信息的 sagemaker-pipelines-project.ipynb 笔记本截图，并程序化运行管道'
- en: '](img/B17447_11_013.jpg)'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17447_11_013.jpg)'
- en: Figure 11.13 – A screenshot of the sagemaker-pipelines-project.ipynb notebook
    that shows you details such as code structure in the repository, and runs the
    pipeline programmatically
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.13 – 显示存储库中代码结构等详细信息的 sagemaker-pipelines-project.ipynb 笔记本截图，并程序化运行管道
- en: With SageMaker Pipelines, we can orchestrate steps that use SageMaker managed
    features to run an ML lifecycle. In the next section, let's see how the CI/CD
    system that the template creates uses SageMaker Pipelines for MLOps.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: Running CI/CD in SageMaker Studio
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The ML pipeline we've seen running previously is just one part of our CI/CD
    system at work. The ML pipeline is triggered by a CI/CD pipeline in AWS CodePipeline.
    Let's dive into the three CI/CD pipelines that the SageMaker project template
    sets up for us.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: 'There are three CodePipeline pipelines:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: '`<project-name-prefix>-modelbuild`: The purpose of this pipeline is to run
    the ML pipeline and create an ML model in SageMaker Model Registry. This CI/CD
    pipeline runs the ML pipeline as a build step when triggered by a commit to the
    repository. The ML model in the SageMaker model registry needs to be approved
    in order to trigger the next pipeline, `modeldeploy`.'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<project-name-prefix>-modeldeploy`: The purpose of this pipeline is to deploy
    the latest approved ML model in the SageMaker model registry as a SageMaker endpoint.
    The build process deploys a staging endpoint first and requests manual approval
    before proceeding to deploy the model into production. This ensures the model
    and endpoint configuration are working correctly before deploying to production.
    Once the staging endpoint is deployed and becomes live with an `InService` status,
    it triggers the next pipeline, `modelmonitor`.'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<project-name-prefix>-modelmonitor`: The purpose of this pipeline is to deploy
    SageMaker Model Monitor to the two SageMaker endpoints created in the `modeldeploy`
    pipeline. This pipeline is triggered whenever a staging endpoint goes live and
    asks for manual approval on the model monitoring deployment for the staging endpoint
    before it deploys Model Monitor to the prod endpoint.'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Coming back to our previous ML pipeline execution, which is part of the `modelbuild`
    build process, we have a model created and registered in **the model registry**.
    This is the first checkpoint of the CI/CD system: *to manually verify the model
    performance metrics*. In order to proceed, we need to go to the model registry
    as shown in *Figure 11.10* to review the results.'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: From the view in *Figure 11.10*, double-click the model version entry in the
    model registry to see more detail about this model version, as shown in *Figure
    11.14*.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.14 – Detail page of a model version'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17447_11_014.jpg)'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.14 – Detail page of a model version
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: We can view the model's performance in the **Model quality** tab, model explainability
    in the **Explainability** tab, and data bias in the **Bias report** tab. These
    are all relevant pieces of information to help us decide whether this is an acceptable
    model or not.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Update status** button at the top right to approve or reject this
    model after review. For the sake of demonstration, we approve the model to proceed
    with the MLOps system, as shown in *Figure 11.15*. If we reject the model, nothing
    happens from this point.![Figure 11.15 – Approve or reject a model version. You
    can put a comment in the box too
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B17447_11_015.jpg)'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 11.15 – Approve or reject a model version. You can put a comment in the
    box too
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: Model approval automatically triggers the execution of the `modeldeploy` pipeline.
    If you go to the CodePipeline console, you can see it in the **In progress** state,
    as shown in *Figure 11.16*.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.16 – Model approval automatically triggers the modeldeploy pipeline'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17447_11_016.jpg)'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.16 – Model approval automatically triggers the modeldeploy pipeline
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: 'As mentioned before, the `modeldeploy` pipeline first deploys a staging SageMaker
    endpoint for review. Once the endpoint is created (in 5-7 minutes), you can see
    a new event on the model version page, as shown in *Figure 11.17*. Click on **Endpoint:
    <project-name-prefix>-staging** to find out more information about the endpoint.
    You can test out the endpoint.'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.17 – Model version showing the latest event in the deployment of
    the staging endpoint'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17447_11_017.jpg)'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.17 – Model version showing the latest event in the deployment of the
    staging endpoint
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: After confirming the endpoint's status, we can approve the staging endpoint
    deployment in the CodePipeline console. Click the pipeline name from *Figure 11.16*.
    We can see the current progress of the pipeline is pending in the **DeployStaging**
    stage, as shown in *Figure 11.18*. Click the **Review** button in the **ApproveDeployment**
    step to approve/reject the deployment.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.18 – Manual approval required by the modeldeploy pipeline'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17447_11_018.jpg)'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.18 – Manual approval required by the modeldeploy pipeline
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: Approve or reject the deployment with any comments in the popup, as shown in
    *Figure 11.19*. As the endpoint is live and working, let's approve the staging
    deployment.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.19 – Approve/reject a staging deployment'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17447_11_019.jpg)'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.19 – Approve/reject a staging deployment
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: The `modeldeploy` pipeline moves on to the final stage, **DeployProd**, to deploy
    the model to a production endpoint. Once deployed, the pipeline is updated to
    the **Succeeded** status. You can see a new event on the model version page, as
    shown in *Figure 11.20*. Also notice **Last Stage** is now **prod**.
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.20 – Model version is now updated to prod'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17447_11_020.jpg)'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.20 – Model version is now updated to prod
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: When we approve the staging deployment, the `modelmonitor` pipeline is triggered
    to deploy SageMaker Model Monitor to the staging endpoint. We can see in the CodePipeline
    console that the `modelmonitor` pipeline is **In progress**, as shown in *Figure
    11.21*.
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.21 – Staging endpoint deployment triggers the modelmonitor pipeline'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17447_11_021.jpg)'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.21 – Staging endpoint deployment triggers the modelmonitor pipeline
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: The `modelmonitor` pipeline also requires manual approval in the DeployStaging
    stage. We should review the endpoint to see if Model Monitor is enabled. As shown
    in *Figure 11.22*, we can see in the **Data quality** tab that Model Monitor is
    indeed enabled and scheduled. We do not have a live traffic setup yet for the
    endpoint, and the monitoring schedule will only kick in at the top of the hour,
    so let's proceed and approve DeployStaging in the CodePipeline console similar
    to *step 6* and *step 7*.
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.22 – Reviewing the Model Monitor schedule for the staging endpoint'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17447_11_022.jpg)'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.22 – Reviewing the Model Monitor schedule for the staging endpoint
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, the DeployProd stage will also deploy SageMaker Model Monitor to the
    prod endpoint. This marks the end of the complete MLOps and CI/CD system.
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The three CI/CD pipelines in CodePipeline constitute a common MLOps system that
    enables continuous integration and continuous delivery of an ML model in response
    to any code changes to the `modelbuild` repository and to any manual ML pipeline
    runs. You do not have to worry about the complicated implementation as these steps
    take place automatically, thanks to the SageMaker projects template.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: 'SageMaker Projects make it easy to bring a robust MLOps system to your own
    ML use case with the templatized code and repositories. You don''t have to build
    a sophisticated system. You can just choose a template provided by SageMaker projects
    that suits your use case and follow the README files in the repositories in CodeCommit
    to customize the configuration and code for your own use case. For example, we
    can update the model training in `pipeline.py` to use a different set of hyperparameters
    as shown in the following code block and commit the change to the `modelbuild`
    repository:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: You can see a new execution from the `modelbuild` pipeline with the latest commit
    message, as shown in *Figure 11.23*.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.23 – A new modelbuild execution is triggered by a commit to the
    repository'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17447_11_023.jpg)'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.23 – A new modelbuild execution is triggered by a commit to the repository
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: The CI/CD pipelines are going to be run as we described in this chapter once
    again to deliver a new model/endpoint automatically (except the manual approval
    steps) after we update the version of the core training algorithm. You can apply
    this to any changes to the ML pipeline, in the `modelbuild` pipeline, or configurations
    in the other two CI/CD pipelines.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-182
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we described what MLOps is and what it does in the ML lifecycle.
    We discussed the benefits MLOps brings to the table. We showed you how you can
    easily spin up a sophisticated MLOps system powered by SageMaker projects from
    the SageMaker Studio IDE. We deployed a model build/deploy/monitor template from
    SageMaker projects and experienced what *everything as code* really means.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: We made a complete run of the CI/CD process to learn how things work in this
    MLOps system. We learned in great detail how an ML pipeline is implemented with
    SageMaker Pipelines and other SageMaker managed features. We also learned how
    the SageMaker model registry works to version control ML models.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: 'Furthermore, we showed how to monitor the CI/CD process and approve deployments
    in CodePipeline, which gives you great control over the quality of the models
    and deployment. With the MLOps system, you can enjoy the benefits we discussed:
    faster time to market, productivity, repeatability, reliability, auditability,
    and high-quality models.'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: This example also perfectly summarizes what we've learned about Amazon SageMaker
    Studio throughout the book. Amazon SageMaker Studio is a purpose-built ML IDE
    that makes building ML models with an end-to-end ML lifecycle easy with its rich
    user interface. With the 11 chapters, code examples, and real-world ML use cases
    in this book, you've learned how to use SageMaker Studio and many SageMaker features
    for preparing data, building, training, deploying ML models, and running an MLOps
    system for a production-grade ML project. You now can start building your own
    ML projects in Amazon SageMaker Studio.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
