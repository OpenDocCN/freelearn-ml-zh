["```py\nhaarcascade_profileface.xml\nhaarcascade_righteye_2splits.xml\nhaarcascade_russian_plate_number.xml\nhaarcascade_smile.xml\nhaarcascade_upperbody.xml\n```", "```py\nimport cv2\n\nfilename = '/path/to/my/pic.jpg'\n\ndef detect(filename):\n  face_cascade = cv2.CascadeClassifier('./cascades/haarcascade_frontalface_default.xml')\n\n  img = cv2.imread(filename)\n  gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n  faces = face_cascade.detectMultiScale(gray, 1.3, 5)\n  for (x,y,w,h) in faces:\n    img = cv2.rectangle(img,(x,y),(x+w,y+h),(255,0,0),2)\n  cv2.namedWindow('Vikings Detected!!')\n  cv2.imshow('Vikings Detected!!', img)\n  cv2.imwrite('./vikings.jpg', img)\n  cv2.waitKey(0)\n\ndetect(filename)\n```", "```py\ndef detect(filename):\n```", "```py\n  face_cascade =\n  cv2.CascadeClassifier('./cascades/haarcascade_frontalface_default.xml')\n```", "```py\n  img = cv2.imread(filename)\n  gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n  faces = face_cascade.detectMultiScale(gray, 1.3, 5)\n```", "```py\nfor (x,y,w,h) in faces:\n    img = cv2.rectangle(img,(x,y),(x+w,y+h),(255,0,0),2)\n```", "```py\n  cv2.namedWindow('Vikings Detected!!')\n  cv2.imshow('Vikings Detected!!', img)\n  cv2.waitKey(0)\n```", "```py\n    import cv2\n    ```", "```py\n         def detect():\n      face_cascade = cv2.CascadeClassifier('./cascades/haarcascade_frontalface_default.xml')\n      eye_cascade = cv2.CascadeClassifier('./cascades/haarcascade_eye.xml')\n      camera = cv2.VideoCapture(0)\n    ```", "```py\n    while (True):\n        ret, frame = camera.read()\n        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)\n    ```", "```py\n        faces = face_cascade.detectMultiScale(gray, 1.3, 5)\n    ```", "```py\n        for (x,y,w,h) in faces:\n            img = cv2.rectangle(frame,(x,y),(x+w,y+h),(255,0,0),2)\n\n            roi_gray = gray[y:y+h, x:x+w]\n\n            eyes = eye_cascade.detectMultiScale(roi_gray, 1.03, 5, 0, (40,40))\n    ```", "```py\n            for (ex,ey,ew,eh) in eyes:\n                cv2.rectangle(img,(ex,ey),(ex+ew,ey+eh),(0,255,0),2)\n    ```", "```py\n        cv2.imshow(\"camera\", frame)\n        if cv2.waitKey(1000 / 12) & 0xff == ord(\"q\"):\n          break\n\n      camera.release()\n      cv2.destroyAllWindows()\n\n    if __name__ == \"__main__\":\n      detect()\n    ```", "```py\nimport cv2\n\ndef generate():\n  face_cascade = cv2.CascadeClassifier('./cascades/haarcascade_frontalface_default.xml')\n  eye_cascade = cv2.CascadeClassifier('./cascades/haarcascade_eye.xml')\n  camera = cv2.VideoCapture(0)\n  count = 0\n  while (True):\n    ret, frame = camera.read()\n    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)\n\n    faces = face_cascade.detectMultiScale(gray, 1.3, 5)\n\n    for (x,y,w,h) in faces:\n        img = cv2.rectangle(frame,(x,y),(x+w,y+h),(255,0,0),2)\n\n        f = cv2.resize(gray[y:y+h, x:x+w], (200, 200))\n\n        cv2.imwrite('./data/at/jm/%s.pgm' % str(count), f)\n        count += 1\n\n    cv2.imshow(\"camera\", frame)\n    if cv2.waitKey(1000 / 12) & 0xff == ord(\"q\"):\n      break\n\n  camera.release()\n  cv2.destroyAllWindows()\n\nif __name__ == \"__main__\":\n  generate()\n```", "```py\njm/1.pgm;0\njm/2.pgm;0\njm/3.pgm;0\n...\njm/20.pgm;0\n```", "```py\ndef read_images(path, sz=None):\n\n    c = 0\n    X,y = [], []\n    for dirname, dirnames, filenames in os.walk(path):\n        for subdirname in dirnames:\n            subject_path = os.path.join(dirname, subdirname)\n            for filename in os.listdir(subject_path):\n                try:\n                    if (filename == \".directory\"):\n                        continue\n                    filepath = os.path.join(subject_path, filename)\n                    im = cv2.imread(os.path.join(subject_path, filename), cv2.IMREAD_GRAYSCALE)\n\n                    # resize to given size (if given)\n                    if (sz is not None):\n                        im = cv2.resize(im, (200, 200))\n\n                    X.append(np.asarray(im, dtype=np.uint8))\n                    y.append(c)\n                except IOError, (errno, strerror):\n                    print \"I/O error({0}): {1}\".format(errno, strerror)\n                except:\n                    print \"Unexpected error:\", sys.exc_info()[0]\n                    raise\n            c = c+1\n\n    return [X,y]\n```", "```py\ndef face_rec():\n    names = ['Joe', 'Jane', 'Jack']\n    if len(sys.argv) < 2:\n        print \"USAGE: facerec_demo.py </path/to/images> [</path/to/store/images/at>]\"\n        sys.exit()\n\n    [X,y] = read_images(sys.argv[1])\n    y = np.asarray(y, dtype=np.int32)\n\n    if len(sys.argv) == 3:\n        out_dir = sys.argv[2]\n\n    model = cv2.face.createEigenFaceRecognizer()\n    model.train(np.asarray(X), np.asarray(y))\n    camera = cv2.VideoCapture(0)\n    face_cascade = cv2.CascadeClassifier('./cascades/haarcascade_frontalface_default.xml')\n    while (True):\n      read, img = camera.read()\n      faces = face_cascade.detectMultiScale(img, 1.3, 5)\n      for (x, y, w, h) in faces:\n        img = cv2.rectangle(img,(x,y),(x+w,y+h),(255,0,0),2)\n        gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n        roi = gray[x:x+w, y:y+h]\n        try:\n            roi = cv2.resize(roi, (200, 200), interpolation=cv2.INTER_LINEAR)\n            params = model.predict(roi)\n            print \"Label: %s, Confidence: %.2f\" % (params[0], params[1])\n            cv2.putText(img, names[params[0]], (x, y - 20), cv2.FONT_HERSHEY_SIMPLEX, 1, 255, 2)\n        except:\n            continue\n      cv2.imshow(\"camera\", img)\n      if cv2.waitKey(1000 / 12) & 0xff == ord(\"q\"):\n        break\n    cv2.destroyAllWindows()\n```", "```py\nmodel = cv2.face.createFisherFaceRecognizer()\n```", "```py\n  model = cv2.face.createLBPHFaceRecognizer()\n```"]