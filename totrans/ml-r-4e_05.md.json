["```py\n> -0.60 * log2(0.60) - 0.40 * log2(0.40) \n```", "```py\n[1] 0.9709506 \n```", "```py\n> curve(-x * log2(x) - (1 - x) * log2(1 - x),\n        col = \"red\", xlab = \"x\", ylab = \"Entropy\", lwd = 4) \n```", "```py\n> credit <- read.csv(\"credit.csv\", stringsAsFactors = TRUE) \n```", "```py\n> str(credit) \n```", "```py\n'data.frame':1000 obs. of  17 variables:\n $ checking_balance : Factor w/ 4 levels \"< 0 DM\",\"> 200 DM\",..\n $ months_loan_duration: int  6 48 12 42 24 36 24 36 12 30 ...\n $ credit_history : Factor w/ 5 levels \"critical\",\"good\",..\n $ purpose : Factor w/ 6 levels \"business\",\"car\",..\n $ amount : int  1169 5951 2096 7882 4870 9055 2835 6948 ... \n```", "```py\n> table(credit$checking_balance) \n```", "```py\n < 0 DM   > 200 DM 1 - 200 DM    unknown\n       274         63        269        394 \n```", "```py\n> table(credit$savings_balance) \n```", "```py\n < 100 DM > 1000 DM  100 - 500 DM 500 - 1000 DM   unknown\n          603        48           103            63       183 \n```", "```py\n> summary(credit$months_loan_duration) \n```", "```py\n Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n    4.0    12.0    18.0    20.9    24.0    72.0 \n```", "```py\n> summary(credit$amount) \n```", "```py\n Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n    250    1366    2320    3271    3972   18424 \n```", "```py\n> table(credit$default) \n```", "```py\nno yes\n700 300 \n```", "```py\n> set.seed(9829)\n> train_sample <- sample(1000, 900) \n```", "```py\n> str(train_sample) \n```", "```py\nint [1:900] 653 866 119 152 6 617 250 343 367 138 ... \n```", "```py\n> credit_train <- credit[train_sample, ]\n> credit_test  <- credit[-train_sample, ] \n```", "```py\n> prop.table(table(credit_train$default)) \n```", "```py\n no       yes \n0.7055556 0.2944444 \n```", "```py\n> prop.table(table(credit_test$default)) \n```", "```py\n no  yes \n0.65 0.35 \n```", "```py\n> credit_model <- C5.0(default ~ ., data = credit_train) \n```", "```py\n> credit_model \n```", "```py\nCall:\nC5.0.formula(formula = default ~ ., data = credit_train)\nClassification Tree\nNumber of samples: 900 \nNumber of predictors: 16 \nTree size: 67 \nNon-standard options: attempt to group attributes \n```", "```py\n> summary(credit_model) \n```", "```py\n> summary(credit_model) \n```", "```py\nCall:\nC5.0.formula(formula = default ~ ., data = credit_train)\nC5.0 [Release 2.07 GPL Edition]\n-------------------------------\nClass specified by attribute `outcome'\nRead 900 cases (17 attributes) from undefined.data\nDecision tree:\nchecking_balance in {> 200 DM,unknown}: no (415/55)\nchecking_balance in {< 0 DM,1 - 200 DM}:\n:...credit_history in {perfect,very good}: yes (59/16)\n    credit_history in {critical,good,poor}:\n    :...months_loan_duration > 27:\n        :...dependents > 1:\n        :   :...age <= 45: no (12/2)\n        :   :   age > 45: yes (2) \n```", "```py\nEvaluation on training data (900 cases):\n        Decision Tree   \n      ----------------  \n      Size      Errors  \n        66  118(13.1%)   <<\n       (a)   (b)    <-classified as\n      ----  ----\n       604    31    (a): class no\n        87   178    (b): class yes \n```", "```py\nAttribute usage:\n    100.00%       checking_balance\n    53.89%        credit_history\n    47.33%        months_loan_duration\n    26.11%        purpose\n    24.33%        savings_balance\n    18.22%        job\n    12.56%        dependents\n    12.11%        age \n```", "```py\n> credit_pred <- predict(credit_model, credit_test) \n```", "```py\n> library(gmodels)\n> CrossTable(credit_test$default, credit_pred,\n             prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE,\n             dnn = c('actual default', 'predicted default')) \n```", "```py\n | predicted default \nactual default |        no |       yes | Row Total |\n---------------|-----------|-----------|-----------|\n            no |        56 |         9 |        65 |\n               |     0.560 |     0.090 |           |\n---------------|-----------|-----------|-----------|\n           yes |        24 |        11 |        35 |\n               |     0.240 |     0.110 |           |\n---------------|-----------|-----------|-----------|\n  Column Total |        80 |        20 |       100 |\n---------------|-----------|-----------|-----------| \n```", "```py\n> credit_boost10 <- C5.0(default ~ ., data = credit_train,\n                         trials = 10) \n```", "```py\n> credit_boost10 \n```", "```py\nNumber of boosting iterations: 10 \nAverage tree size: 57.3 \n```", "```py\ndependents > 1: yes (8.8/0.8)\ndependents <= 1:\n:...years_at_residence <= 1: no (13.4/1.6)\n    years_at_residence > 1:\n:...age <= 23: yes (11.9/1.6)\n    age > 23: [S1] \n```", "```py\nSubTree [S1]\nemployment_duration in {< 1 year,> 7 years,4 - 7 years,\n:                       unemployed}: no (27.7/6.3)\nemployment_duration = 1 - 4 years:\n:...months_loan_duration > 30: yes (7.2)\n    months_loan_duration <= 30:\n    :...other_credit = bank: yes (2.4)\n        other_credit in {none,store}: no (16.6/5.6) \n```", "```py\n> summary(credit_boost10) \n```", "```py\n (a)   (b)    <-classified as\n      ----  ----\n       633     2    (a): class no\n        17   248    (b): class yes \n```", "```py\n> credit_boost_pred10 <- predict(credit_boost10, credit_test)\n> CrossTable(credit_test$default, credit_boost_pred10,\n             prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE,\n             dnn = c('actual default', 'predicted default')) \n```", "```py\n | predicted default \nactual default |        no |       yes | Row Total |\n---------------|-----------|-----------|-----------|\n            no |        58 |         7 |        65 |\n               |     0.580 |     0.070 |           |\n---------------|-----------|-----------|-----------|\n           yes |        19 |        16 |        35 |\n               |     0.190 |     0.160 |           |\n---------------|-----------|-----------|-----------|\n  Column Total |        77 |        23 |       100 |\n---------------|-----------|-----------|-----------| \n```", "```py\n> matrix_dimensions <- list(c(\"no\", \"yes\"), c(\"no\", \"yes\"))\n> names(matrix_dimensions) <- c(\"predicted\", \"actual\") \n```", "```py\n> matrix_dimensions \n```", "```py\n$predicted\n[1] \"no\"  \"yes\"\n$actual\n[1] \"no\"  \"yes\" \n```", "```py\n> error_cost <- matrix(c(0, 1, 4, 0), nrow = 2,\n                  dimnames = matrix_dimensions) \n```", "```py\n> error_cost \n```", "```py\n actual\npredicted no yes\n      no   0   4\n      yes  1   0 \n```", "```py\n> credit_cost <- C5.0(default ~ ., data = credit_train,\n                        costs = error_cost)\n> credit_cost_pred <- predict(credit_cost, credit_test)\n> CrossTable(credit_test$default, credit_cost_pred,\n             prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE,\n             dnn = c('actual default', 'predicted default')) \n```", "```py\n | predicted default \nactual default |        no |       yes | Row Total |\n---------------|-----------|-----------|-----------|\n            no |        34 |        31 |        65 |\n               |     0.340 |     0.310 |           |\n---------------|-----------|-----------|-----------|\n           yes |         5 |        30 |        35 |\n               |     0.050 |     0.300 |           |\n---------------|-----------|-----------|-----------|\n  Column Total |        39 |        61 |       100 |\n---------------|-----------|-----------|-----------| \n```", "```py\n> mushrooms <- read.csv(\"mushrooms.csv\", stringsAsFactors = TRUE) \n```", "```py\n$ veil_type : Factor w/ 1 level \"partial\": 1 1 1 1 1 1 ... \n```", "```py\n> mushrooms$veil_type <- NULL \n```", "```py\n> table(mushrooms$type) \n```", "```py\n edible poisonous\n     4208      3916 \n```", "```py\n> mushroom_1R <- OneR(type ~ ., data = mushrooms) \n```", "```py\n> mushroom_1R \n```", "```py\nCall:\nOneR.formula(formula = type ~ ., data = mushrooms)\nRules:\nIf odor = almond   then type = edible\nIf odor = anise    then type = edible\nIf odor = creosote then type = poisonous\nIf odor = fishy    then type = poisonous\nIf odor = foul     then type = poisonous\nIf odor = musty    then type = poisonous\nIf odor = none     then type = edible\nIf odor = pungent  then type = poisonous\nIf odor = spicy    then type = poisonous\nAccuracy:\n8004 of 8124 instances classified correctly (98.52%) \n```", "```py\n> mushroom_1R_pred <- predict(mushroom_1R, mushrooms)\n> table(actual = mushrooms$type, predicted = mushroom_1R_pred) \n```", "```py\n predicted\nactual      edible poisonous\n  edible      4208         0\n  poisonous    120      3796 \n```", "```py\n> mushroom_JRip <- JRip(type ~ ., data = mushrooms) \n```", "```py\n> mushroom_JRip \n```", "```py\nJRIP rules:\n===========\n(odor = foul) => type=poisonous (2160.0/0.0)\n(gill_size = narrow) and (gill_color = buff)\n  => type=poisonous (1152.0/0.0)\n(gill_size = narrow) and (odor = pungent)\n  => type=poisonous (256.0/0.0)\n(odor = creosote) => type=poisonous (192.0/0.0)\n(spore_print_color = green) => type=poisonous (72.0/0.0)\n(stalk_surface_below_ring = scaly)\n  and (stalk_surface_above_ring = silky)\n    => type=poisonous (68.0/0.0)\n(habitat = leaves) and (gill_attachment = free)\n  and (population = clustered)\n  => type=poisonous (16.0/0.0)\n=> type=edible (4208.0/0.0)\nNumber of Rules : 8 \n```"]