- en: Google Compute Engine
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The core service of **Google Cloud Platform** (**GCP**) is **Google Compute
    Engine** (**GCE**). The GCE allows you to launch spin up **virtual machines**
    (**VMs**) with the right operating system, size, RAM, and appropriate number of
    CPUs or GPUs for your needs. It is an equivalent of AWS EC2\. With GCE, we dive
    into the core of GCP.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn how to:'
  prefs: []
  type: TYPE_NORMAL
- en: Create VM instances on GCE that are adapted to your projects.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use Google's command-line tools to manage your VMs.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set up a Python data science stack on a GCE VM with `conda` and `scikit-learn`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Access your VM via a password-protected Jupyter Notebook. And we'll cover more
    advanced topics related to images, snapshots, pre-emptibles VMs, startup script,
    and IPs.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this chapter, you will be able to create and fully manage your
    VM both via the online console and the command-line tools, as well as implement
    a data science workflow and a Jupyter Notebook workspace.
  prefs: []
  type: TYPE_NORMAL
- en: Google Compute Engine
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Simply put, GCE is a service that lets you create and run VMs on Google infrastructure.
    The GCE allows you to launch spin up VMs with the right operating system, size,
    RAM, and the appropriate number of CPUs or GPUs for your needs. It is the equivalent
    of AWS EC2.
  prefs: []
  type: TYPE_NORMAL
- en: 'The GCE was announced on June 28, 2012, at Google I/O 2012 and made available
    to the general public on May 15, 2013\. Compared to AWS EC2, an equivalent product,
    the GCE is a rather new service:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e183a41b-0cad-4ecf-ac95-e751055a9c16.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The following extracts from the release notes timeline illustrate the rapid
    evolution of the GCE service from a simple contender to a fully fledged player
    in the Cloud computing domain:'
  prefs: []
  type: TYPE_NORMAL
- en: 'May 15, 2013: GCE is available for everyone.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'August 6, 2013: GCE launches load balancing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'December 3, 2013: GCE is announced as being production ready. *Users can now
    feel confident using Compute Engine to support mission-critical workloads with
    24/7 support and a 99.95% monthly SLA*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'June 25, 2014: **Solid-State Drives** (**SSD**) persistent disks are now available
    in general availability and open to all users and projects.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'September 08, 2015: Pre-emptible instances are now generally available to all
    users and projects.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'March 30, 2016: Persistent disks larger than 10 TB are generally available.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'July 1, 2016: Shutdown scripts are now generally available to use with compute
    engine instances.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'September 21, 2017: NVIDIA® Tesla® K80 GPUs are now generally available.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'September 26, 2017: Billing increments for GCE VM instances are reduced from
    per-minute increments to per-second increments.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The most recent news at the time of writing this is the launch in beta of a
    staggering 96-vCPUs machine types.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the past four years, Google has been steadily improving and developing its
    GCE offer at a rapid pace by:'
  prefs: []
  type: TYPE_NORMAL
- en: Expanding regions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding more powerful machines and Intel CPU platforms
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding roles and features
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Steadily releasing new public images for Windows, Suse, CentOS, Debian, Ubuntu,
    RHEL, or CoreOS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As the timeline illustrates, the GCE service is a young and dynamic service
    that embraces the evolution of its customers needs and anticipates them with bold
    new offers. It reflects Google's drive to become a leader in the Cloud computing
    business and potentially offset Amazon's lead in Cloud computing.
  prefs: []
  type: TYPE_NORMAL
- en: Before we launch our first GCE VM, let's cover a few important concepts.
  prefs: []
  type: TYPE_NORMAL
- en: VMs, disks, images, and snapshots
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A VM is an on-demand virtual server that you spin up for your needs. It is geographically
    located in one of Google's data centers, but you only choose the region and zone,
    not the precise location. Although you share some of the infrastructure resources
    with other users, this sharing is transparent to you.
  prefs: []
  type: TYPE_NORMAL
- en: A VM requires a persistent disk to run on and an operating system such as a
    Windows or Linux distribution to boot on. Although very much abstracted in a cloud
    computing context, a GCE disk would refer to a physical drive that the computer
    can boot on.
  prefs: []
  type: TYPE_NORMAL
- en: An image exists on top of a persistent disk, and includes the operating system
    necessary to launch the instance. A typical use of an image is to enable sharing
    a VM setup across many different VMs. An image consists of an operating system
    and boot loader and can be used to boot an instance.
  prefs: []
  type: TYPE_NORMAL
- en: A **snapshot** is a reflection of the content of a VM at a given time. A snapshot
    is mostly used for instant backups. Snapshots are stored as diffs, relative to
    the previous one, while images are not.
  prefs: []
  type: TYPE_NORMAL
- en: Images and snapshots are quite similar. It's possible to activate an instance
    using a snapshot or an image.
  prefs: []
  type: TYPE_NORMAL
- en: When you launch a new instance, GCE starts by attaching a persistent disk to
    your VM. This provides the disk space and gives the instance the root filesystem
    it needs to boot up. The disk uses the image you have chosen and installs the
    OS associated with that image. Public images are provided by Google with specific
    OS while private images are your own images.
  prefs: []
  type: TYPE_NORMAL
- en: By taking snapshots of an image, you can copy data from existing persistent
    disks to new persistent disks. Snapshots are meant for creating instant backups.
  prefs: []
  type: TYPE_NORMAL
- en: From the Google Shell, you can access and manage all your resources and files.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, let''s list all our existing instances by typing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: We see our newly created sparrow instance.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a VM
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's now create our first VM instance using the web console.
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to the GCE console, [https://console.cloud.google.com/](https://console.cloud.google.com/).
    Select the project we created in the previous chapter (or create one if you don''t
    have one yet), and in the menu on the left, click on Compute Engine. Since you
    don''t have a VM yet, you are greeted by the following message. Click on Create
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d0d2a021-5406-4ab0-b29e-764f6527d6e7.png)'
  prefs: []
  type: TYPE_IMG
- en: For this first VM, we will choose a small one and resize it as we go along.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are several things you need to decide on at this point:'
  prefs: []
  type: TYPE_NORMAL
- en: The name of your instance. I will call mine **sparrow**. This name does not
    have to be unique across GCP. Feel free to name yours as you like.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The region and the zone. It's often better to choose the zone closest to you
    to reduce latency. However, GCP services often open in the US first and become
    available only after a while in other parts of the world. Different zones may
    also have different rules and regulations. For instance, Europe offers stronger
    data related privacy laws than the US. Choose the zone as you see fit. It will
    always be possible to change the zone later.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Selecting the right machine type is important. At time of writing this book,
    different machines are grouped in categories as small, standard, high CPU and
    high RAM:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Small**: Shared CPUs and limited RAM'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Standard VMs**: 3.75 GB of RAM'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**High-memory VMs**: 13 GB RAM'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**High-CPU VMs**: 1.8 GB'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The small category is perfect to get started with and build some hands-on experience
    with the platform. For more intense projects, you may want more more computational
    power or more memory.
  prefs: []
  type: TYPE_NORMAL
- en: Note that free-trial accounts are limited to eight CPUs.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is also possible to customize the machine you need by setting the number
    of CPUs or memory per CPU you want. This is also where you choose the number of
    GPUs to have on your machine, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/097b1ed2-0dbd-49e9-a47a-7e6ac40912a4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Finally, you need to choose the OS for your VM. The Debian Linux distribution
    is offered by default. You have a choice among several OSes: Windows, CentOS,
    Suse, CoreOS, and Ubuntu. Although Ubuntu is often the most popular choice, there
    is actually little difference between Debian and Ubuntu and we will go with the
    default Debian distribution. If you''re more familiar with the Ubuntu distribution,
    go for it. It should not cause any problems in this chapter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ubuntu or Debian?Debian is one of the first Linux distributions with a first
    stable release in 1996\. Ubuntu started as a fork, a branched out version of Debian
    in 2004\. The two distributions are very similar, with Ubuntu being more user
    friendly and having a better desktop/UI experience. Debian is usually preferred
    for servers, a massive package library, with a strong focus on stability and open-licensed
    software. A stable version of Debian is released approximately every two years.
    The Ubuntu release cycle is six months. Ubuntu takes the unstable branch of Debian,
    makes customization especially in terms of the UI, and releases it. For our work,
    there should be close to no difference between either distribution and we will
    use Debian for our VMs.
  prefs: []
  type: TYPE_NORMAL
- en: Leave all the rest of parameters to their default choices. We will come back
    to HTTPs traffic, disks, networking, and `ssh` keys in a few pages.
  prefs: []
  type: TYPE_NORMAL
- en: 'One very useful feature in the web console that lowers the learning curve to
    mastering the GCP is the two links at the bottom of the VM creation page, Equivalent
    Rest or command line, as shown in the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1a1844f3-3d0a-4c89-bda1-6b2f5475795b.png)'
  prefs: []
  type: TYPE_IMG
- en: The command line link exists on multiple pages of the web console. It is a very
    useful feature to quickly learn the right syntax and parameters of the GCP command
    line tools.
  prefs: []
  type: TYPE_NORMAL
- en: Our VM is now created, up and running!
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a40c0e77-6c49-4865-b19e-bb64a8c7cb95.png)'
  prefs: []
  type: TYPE_IMG
- en: Now that we have a brand new shiny VM, how do we access it? That nicely leads
    us to the Google Shell.
  prefs: []
  type: TYPE_NORMAL
- en: Google Shell
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Google Shell is Google's smart way of giving you a standalone terminal in
    your browser to access and manage your resources.
  prefs: []
  type: TYPE_NORMAL
- en: 'You activate the Google Shell by clicking on the >_ icon in the upper right
    part of the console page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5e055b57-d27d-470c-bf22-ec2588696e4d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The browser window splits into half and the lower part is now a shell terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4b9953b4-413a-4b27-83cd-6b20c51c1755.png)'
  prefs: []
  type: TYPE_IMG
- en: This terminal runs on an f1-micro GCE VM with a Debian operating system. It
    is created on a per user and per session basis. It persists when your Cloud Shell
    session is active and is deleted after 20 minutes of inactivity. The instance
    runs on a persistent disk with 5 GB storage. Both the disk and the image are available
    at no extra cost. Although the instance is not persistent across sessions, its
    associated disk is persistent across sessions. Everything you create via the Google
    Shell will be available as you've left it at the beginning of your next session.
    This includes all the files you store, the software you install and the configuration
    files you edit (`.bashrc` and `.vimrc` for instance). This disk is private and
    cannot be accessed by other users. And, finally, the Google Shell instance comes
    pre-installed with the Google Cloud SDK and other popular developer tools such
    as VIM.
  prefs: []
  type: TYPE_NORMAL
- en: Some of the commands you run via the web console will be memorized in your Google
    Shell VM. For instance, the SQL queries you run on a Google SQL instance, will
    show up in a `.mysql_history` file in your user's `$HOME` folder. More info on
    the Google Shell can be found in the `README-cloudshell.txt` in your `$HOME` folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'From the Google Shell, you can access and manage all your resources and files.
    For example, let''s list all our existing instances by typing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'We see our newly created sparrow instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ba21c51e-c467-4278-a800-0d0c1e6fbfbb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To access the VM you just created, type in:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'This will run through the creation of the necessary `ssh` keys. And you are
    now no longer on the Google''s Cloud Shell VM instance but on the sparrow VM.
    To check which OS and version we''re running in our sparrow instance, we run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: On the sparrow machine, I have Debian GNU/Linux 9 (stretch), while on the Google
    Shell VM, it's Debian GNU/Linux 8 (jessie). Which tells me that the Google Shell
    is not yet on the most recent version of the Debian distribution. You may, of
    course, see different results.
  prefs: []
  type: TYPE_NORMAL
- en: Google Cloud Platform SDK
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'GCP offers several standalone **command-line interfaces** (**CLIs**) to manage
    and interact with your GCP resources, `gcloud` being the main one. All secondary
    command-line tools are installed via `gcloud`. At time of writing this, the command-line
    tools are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`gcloud`: The main CLI to manage your GCP resources and projects: authentication,
    local configuration, developer workflow, and interactions with the GCP APIs. The
    following services can be handled via the `gcloud` CLI: app engine, auth, compute
    engine, container, DataFlow, Dataproc, machine learning, SQL databases as well
    as deployment of Cloud resources, Iam setup, and logging with Stackdriver and
    web resources such as DNS, Domains, or Firebase.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Gcloud also takes care of other command-line tools:'
  prefs: []
  type: TYPE_NORMAL
- en: '`gsutil`: This is the CLI for Google Storage. You use `gsutil` to create and
    delete buckets, upload, download and move files around, set permissions, and so
    forth.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`bq`: This is the CLI for interacting with BigQuery.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`datalab`: The Datalab CLI.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All these CLI tools are Python scripts and require Python 2.7 installed on your
    system.
  prefs: []
  type: TYPE_NORMAL
- en: To install `gcloud`, the best way is to follow the instructions on the Cloud
    DSK page at [https://cloud.google.com/sdk/downloads](https://cloud.google.com/sdk/downloads).
    Download the right package and run the appropriate commands for your machine.
    The install will guide you through the creation of `ssh` keys. It will install
    three files in your `~/.ssh` folder. Your public and private `ssh` keys (that
    is, `google_compute_engine.pub` and `google_compute_engine`) and the list of know
    hosts (`google_compute_known_hosts`).
  prefs: []
  type: TYPE_NORMAL
- en: 'You can verify that `gcloud` is properly installed by running `gcloud version`
    in the terminal. Your output will be similar to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'As we can see, `gcloud` is not a one-size-fits-all tool. `gcloud` comes loaded
    with components. They can either be other standalone CLIs such as `gsutils`, `bq`,
    `datalab` or `gcloud` extensions (`app-engine-python`), as well as Alpha and Beta
    release levels. To see which components are installed in your `gcloud`, run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'You will obtain the following result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/42154b10-241f-48e4-9c48-89d7a0f1745c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To install or remove components in your current SDK version (173.0.0), use
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'To update your SDK installation to the latest version (175.0.0), run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Gcloud
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s go through a few commands to get a feel for the syntax of the `gcloud`
    CLI:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To list all your projects, use:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'To list all your instances in the `packt-gcp` project, use:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The global generic syntax of the `gcloud` that also applies the other CLI tools
    is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Where `GROUP` is a service or an account element and `COMMAND` is the command
    to send to the `GROUP`. For instance in `gcloud projects list`, `projects` is
    the `GROUP`, an element of your account and `list` is the `COMMAND`. In `gcloud
    compute instances list --project packt-gcp`, the `GROUP` is `compute`, followed
    by a sub-group `instances`, and the `COMMAND` is `list` while `--project packt-gcp`
    are the required parameters.
  prefs: []
  type: TYPE_NORMAL
- en: 'gcloud parameters include account settings (keys and region for instance),
    CLI settings (verbosity, format, or specific configuration) as well as arguments
    required by the commands. For example, to start our instance, we need to specify
    two parameters—the region and the instance ID:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Gcloud config
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To avoid having to specify the zone or other parameters, you can set them in
    the `config` with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'And to unset them in the `config`, you can use the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: For a list of all the different settings available in the `config`, run `gcloud
    config set --help`.
  prefs: []
  type: TYPE_NORMAL
- en: The zone and region can be also stored in the environment variable `CLOUDSDK_COMPUTE_ZONE`
    and `CLOUDSDK_COMPUTE_REGION`. Environment variables override default properties
    that you set with the `gcloud` `config` commands, but do not override explicit
    flags like `--zone` or `--region`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To set the environment variable `CLOUDSDK_COMPUTE_ZONE`, run or add this line
    to your `.bashrc`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: For more details, see [https://cloud.google.com/compute/docs/gcloud-compute/#set_default_zone_and_region_in_your_local_client](https://cloud.google.com/compute/docs/gcloud-compute/#set_default_zone_and_region_in_your_local_client).
  prefs: []
  type: TYPE_NORMAL
- en: Accessing your instance with gcloud
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are two important things you want to do from the start:'
  prefs: []
  type: TYPE_NORMAL
- en: Accessing the instance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Moving files between your instance and another machine. To do `ssh` into your
    instance, run:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'In our case:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: The first time you access your instance from your local system, the platform
    will propagate your keys to the instance, which may take a few minutes. Once connected,
    you can verify that your local public key (`cat ~/.ssh/google_compute_engine.pub`)
    is included in the list of `authorized_keys` on your instance (`cat ~/.ssh/authorized_keys`).
  prefs: []
  type: TYPE_NORMAL
- en: Transferring files with gcloud
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Transferring files back and forth from your machine (or any other location)
    and your instance is done via Gcloud''s version of the `.csp` command:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To send a local file to your instance `$HOME` folder:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'For instance, to send a file titled `hello_world.txt` to sparrow, you would
    run this:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Similarly, to download a file from the instance to your local machine `$HOME`
    folder:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: We will explore the `gsutil` and `bq` command-line tools in the next chapter
    and the Datalab CLI in [Chapter 4](862553c5-4bb7-4a5c-b7bd-03f0eb8d413e.xhtml),
    *Querying Your data with BigQuery*.
  prefs: []
  type: TYPE_NORMAL
- en: Managing the VM
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are several operations that you will want to do as you start working
    with a VM on Google Compute, such as starting instances, stopping instances, resizing
    and modifying disks, and taking snapshots. We go over the most important ones:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Start and shut down the VM:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Check the VM status:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The instance we started with is an f1-micro with not-enough CPU, RAM, or disk
    space for a real-world data science project. We want to change the underlying
    machine and augment its disk space. But, before that, we should take a snapshot
    of our current machine as a backup. If anything goes wrong, we''ll be able to
    restore the instance from the snapshot:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Taking a snapshot of a VM:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'In our case, let''s call our disk `sparrow-backup` as we run:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Changing the machine type, you first need to stop your instance with `$ gcloud
    compute instances stop sparrow --project packt-gcp`. Once that''s done, changing
    the machine type is doable with the generic command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'In our case, if we want to change the type to `n1-standard-1` (3.75 GB memory
    and 1 vCPU), we should run this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'While we''re at it, we would also like to resize the underlying disk from 10
    GB to 100 GB:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Another important setting is to make sure that the disk will not be deleted
    when the instance is deleted:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'This is an important parameter that can also be set in the compute engine console
    by unselecting Delete boot disk when instance is deleted when creating or editing
    an instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f08c0a52-e038-4c69-9f7a-30c0f9c36661.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Instance configuration: The entire instance configuration is available via
    `$ gcloud` compute instances describe sparrow.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Creating the right VM from scratch: in this all these parameters are available
    when you create a VM from scratch. Running the following command will create a
    new `n1-standard-1` instance named `hummingbird` in the `europe-west1-c` zone,
    when running on Ubuntu 17.04, with a 100 GB disk also named `hummingbird`. Note
    that this instance is pre-emptible (`--preemptible`) and the disk will persist
    once the instance is deleted (`--no-boot-disk-auto-delete`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'We can verify that we now have two instances in our project:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To keep our resources under control, we should delete this new instance with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Note that if you have set up a different zone as default either in the `config`
    setup or as an environment variable, you need to specify the zone of the instance
    before you can delete it; otherwise, a `resource not found` error message will
    be generated.
  prefs: []
  type: TYPE_NORMAL
- en: IPs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You must have noticed the presence of an internal and an external IP associated
    with our VMs. Each GCP project comes with a **Virtual Private Cloud** (**VPC**)
    network, which is automatically created with the project. A VPC is basically a
    private and isolated virtual network partition that enables your resources to
    talk to each other within a given project, while allowing control of external
    access to the VPC. Upon creation, each instance gets an internal IP address assigned
    to allow other resources within the project's VPC to communicate with the instance.
    To communicate with entities outside the VPC, including connections with the internet,
    the instance requires an external IP address.
  prefs: []
  type: TYPE_NORMAL
- en: IP addresses, both internal and external, can be ephemeral or static. Ephemeral
    IP addresses remain associated with the instance only as long as the instance
    is running. When the instance stops or is terminated, the IP address is released
    in the global GCP pool of IP addresses. For an instance to have a stable IP address,
    the IP address needs to become static. Static addresses generate extra costs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changing the nature of an IP address from ephemeral to static can be done via
    the console. Stop the VM and edit it. In the Network interface section, select
    the right type for the internal and external IPs of the VM:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/05cdf268-94bc-4386-b5a4-f6db44cbd2a2.png)'
  prefs: []
  type: TYPE_IMG
- en: The management of IPs and VPCs is accessible from the VPC network console at
    [https://console.cloud.google.com/networking/networks/list](https://console.cloud.google.com/networking/networks/list).
  prefs: []
  type: TYPE_NORMAL
- en: 'You can create a new static IP address and then attach it to your instance
    directly from the External IP addresses page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fa901139-ba02-475f-9b00-eb1939e74e62.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on Reserve a static address, select regional for region type, set the
    region to your instance''s region, and attach it to your sparrow instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c67cd3a2-8491-4dcd-b03d-c4aeb9176d5d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The command-line equivalent of creating a static IP and adding it to the instance
    is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: As static IPs are billed even when not used, it is important to release them
    when no longer needed.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a data science stack on the VM
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So, now we have a VM running and we're able to send files to it, connect to
    it, and modify it. Everything is ready for us to set it up for data science!
  prefs: []
  type: TYPE_NORMAL
- en: We will install the Python Miniconda stack from continuum, much smaller than
    the full Conda distribution. Do SSH into your instance.
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the mini `sudo apt-get update sudo apt-get install bzip2 wget` from
    [https://repo.continuum.io/miniconda/Miniconda2-latest-Linux-x86_64.sh](https://repo.continuum.io/miniconda/Miniconda2-latest-Linux-x86_64.sh)
    using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'And then install the Python stack with `conda`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Don''t forget to do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: BOX the ipython console
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To launch a Jupyter Notebook in your instance and access it over the Web, you
    need to promote the ephemeral external IP address provided by default to your
    VM to a static external IP.
  prefs: []
  type: TYPE_NORMAL
- en: 'You also need to make sure that your instance is accepting HTTP and HTTPS traffic.
    For that, go to your VM page, edit it, and check the following checkboxes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6ba3f1e3-fea0-41eb-ac82-cad5527409a6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Since your Jupyter Notebook is open to all traffic on the web, you password-protect
    it:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Generate a configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'And add a password with:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: More info on how to protect your public Notebook, including using `ssh` keys
    and adding encryption, is available at [http://jupyter-notebook.readthedocs.io/en/latest/public_server.html](http://jupyter-notebook.readthedocs.io/en/latest/public_server.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'Launch your Jupyter Notebook with:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'This generates a token and the following message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Troubleshooting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There is an alternative solution if you encounter problems in accessing your
    Notebook. The idea is to launch the Jupyter Notebook with IP `0.0.0.0`, without
    having to set up a static IP first:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'This will generate a token. Do SSH into another terminal, adding the following
    flags `--ssh-flag="-L" --ssh-flag="2222:localhost:8888"`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: This is how it associates the URL `localhost:2222` with the Jupyter Notebook
    URL `localhost:8888`. You can then access your Notebook at `http://localhost:2222`.
    You also need to enter the token you were given a moment ago.
  prefs: []
  type: TYPE_NORMAL
- en: 'This alternative was given by the comments on this blog post by Jeff Delaney,
    *Running a Python Jupyter Notebook on Google Cloud Engine*: [https://jeffdelaney.me/blog/running-jupyter-notebook-google-cloud-platform/](https://jeffdelaney.me/blog/running-jupyter-notebook-google-cloud-platform/).'
  prefs: []
  type: TYPE_NORMAL
- en: Adding GPUs to instances
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Check and request for an increase in your quotas for GPUs:'
  prefs: []
  type: TYPE_NORMAL
- en: Search for GPU. If you have 0 in your allocated quotas, select the type of GPU
    and region and click on edit the quotas. Fill in the request form ([https://console.cloud.google.com/iam-admin/quotas?project=packt-gcp](https://console.cloud.google.com/iam-admin/quotas?project=packt-gcp)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are several restrictions when it comes to using GPUs on Google Compute.
    GPUs are not available in shared or pre-emptible machines. GPU instances are terminated
    for regular (weekly) maintenance events. See [https://cloud.google.com/compute/docs/gpus/](https://cloud.google.com/compute/docs/gpus/)
    for up-to-date information on the restrictions. See also [https://cloud.google.com/compute/docs/gpus#introduction](https://cloud.google.com/compute/docs/gpus#introduction)
    to learn what machine types are available based on your desired GPU count.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a VM with GPU from the console:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to the VM console and click on Create Instance
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select a zone that is GPU compatible
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on customize the machine type and again on the GPUs link
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the Number of GPUs and the associated type you require:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2926c6ff-6316-4560-aa7e-95df0b25f364.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Similarly you can create a GPU-enabled instance with `gcloud` with the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Where `--accelerator type= specifies` the type of GPU and `count=` specifies
    the number of GPUs.
  prefs: []
  type: TYPE_NORMAL
- en: 'For instance, this command will create an Ubuntu 1604 instance with one NVIDIA®
    Tesla® K80 GPU and two vCPUs in the `us-east1-d` zone. The startup-script metadata
    instructs the instance to install the CUDA toolkit with its recommended driver
    version:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: The startup script installs the right CUDA driver for the Ubuntu. For other
    drivers and operating systems, follow the instructions at [https://developer.nvidia.com/cuda-downloads](https://developer.nvidia.com/cuda-downloads).
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the driver has finished installing, you can verify that it is properly
    installed:'
  prefs: []
  type: TYPE_NORMAL
- en: Do `ssh` into your instance
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type `nvidia-smi` to see your driver version and how much GPU memory you have
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The command `nvcc --version` shows the current CUDA version.
  prefs: []
  type: TYPE_NORMAL
- en: Startup scripts and stop scripts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Startup scripts allow you to run a script when starting up or creating an instance.
    For instance, to always install `miniconda` and related data science packages
    when creating a new instance, simply write the following script in a file on your
    local machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Then as you start the new instance, supply the `--metadata-from-file` flag,
    followed by `startup-script=PATH/TO/FILE`, where `PATH/TO/FILE` is a relative
    path to the startup script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: You can also use a startup script in extension in the command line or from a
    file stored in Google Storage. For more on startup scripts, visit [https://cloud.google.com/compute/docs/startupscript](https://cloud.google.com/compute/docs/startupscript).
  prefs: []
  type: TYPE_NORMAL
- en: 'Stop scripts are scripts that are automatically run when an instance is terminated
    or restarted. Similar to startup scripts, you can associate a stop script with
    an instance at creation by adding the `--metadata-from-file flag`, followed by
    `shutdown-script=PATH/TO/FILE`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: Resources and further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following are a few interesting articles on setting TensorFlow on GCE:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Running distributed TensorFlow on Compute Engine**: [https://cloud.google.com/solutions/running-distributed-tensorflow-on-compute-engine](https://cloud.google.com/solutions/running-distributed-tensorflow-on-compute-engine)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Jupyter + TensorFlow + Nvidia GPU + Docker + GCE**: [https://medium.com/google-cloud/jupyter-tensorflow-nvidia-gpu-docker-google-compute-engine-4a146f085f17](https://medium.com/google-cloud/jupyter-tensorflow-nvidia-gpu-docker-google-compute-engine-4a146f085f17)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Using a GPU and TensorFlow on GCP**: [https://medium.com/google-cloud/using-a-gpu-tensorflow-on-google-cloud-platform-1a2458f42b0](https://medium.com/google-cloud/using-a-gpu-tensorflow-on-google-cloud-platform-1a2458f42b0)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Running Jupyter Notebooks on GPU on Google Cloud**: [https://medium.com/google-cloud/running-jupyter-notebooks-on-gpu-on-google-cloud-d44f57d22dbd](https://medium.com/google-cloud/running-jupyter-notebooks-on-gpu-on-google-cloud-d44f57d22dbd)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Some docker-related resources:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Docker config to create machines on GCE**: [https://docs.docker.com/machine/drivers/gce/](https://docs.docker.com/machine/drivers/gce/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Logging with stackcriver**: [https://medium.com/google-cloud/how-to-log-your-application-on-google-compute-engine-6600d81e70e3](https://medium.com/google-cloud/how-to-log-your-application-on-google-compute-engine-6600d81e70e3)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The GCE is a GCP core service, offering a wide variety of scalable VMs based
    on different OSes. The multiplicity of available OSes, the range of machines with
    CPUs, GPUs, small to huge disk space, and RAM make the GCE a powerful Cloud environment
    adapted to a wide variety of projects and contexts.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter you learned:'
  prefs: []
  type: TYPE_NORMAL
- en: How to create, launch, back up, modify, and access multiple VMs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The different parameters and variables related to a VM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to access and use the Google Shell
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to use the `gcloud` CLI to carry out the same operations in the GCP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to install a data science Python stack
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to launch a Jupyter Notebook
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are many more possibilities offered by the power and flexibility of the
    GCE that we haven't covered. Hopefully, by the end of this chapter, you should
    feel comfortable working with instances that are appropriate for your projects
    in a data-focused context.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn how to store data on the GCP with Google
    Storage and Google SQL.
  prefs: []
  type: TYPE_NORMAL
