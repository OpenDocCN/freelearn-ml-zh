["```py\n\nif(!require(\"mosaicCalc\")){\n  install.packages(\"mosaicCalc\")\n}\nlibrary(mosaicCalc)\n```", "```py\n\n    >>> slice_plot(2*x+1 ~ x, domain(x = range(-5, 5)))\n    ```", "```py\n\nm = 2\nb = 1\nslice_plot(m*x+b ~ x, domain(x = range(-5, 5)))\n```", "```py\n\n>>> slice_plot(a*x+b ~ x, domain(x = range(-5, 5)))\nError in slice_plot(a * x + b ~ x, domain(x = range(-5, 5))) :\n  Parameter <a> without specified numerical values.\n```", "```py\n\nf = makeFun(2*x+1 ~ x)\nslice_plot(f(x) ~ x, domain(x = range(-5, 5)))\n```", "```py\n\n>>> f(x=2)\n5\n```", "```py\n\n    >>> contour_plot(2*x + 3*y ~ x & y, domain(x=-5:5, y=-5:5))\n    ```", "```py\n\n    >>> interactive_plot(2*x + 3*y ~ x & y, domain(x=-5:5, y=-5:5))\n    ```", "```py\n\nf_prime = D(x^2+1 ~ x)\n>>> f_prime\nfunction (x)\n2 * x\n<bytecode: 0x144378300>\n```", "```py\n\n>>> f_prime(1)\na\n>>> f_prime(2)\n4\n```", "```py\n\nf_prime = D(sin(x^2-5) ~ x)\n>>> f_prime\nfunction (x)\n2 * x * cos(x^2 - 5)\n```", "```py\n\nf_prime = D(2*x/(x+1) ~ x)\n>>> f_prime\nfunction (x)\n{\n    .e1 <- 1 + x\n    (2 - 2 * (x/.e1))/.e1\n}\n```", "```py\n\n    f_prime = D(A*x^3+B*x+3 ~ x)\n    >>> f_prime\n    function (x, A, B)\n    3 * A * x^2 + B\n    ```", "```py\n\n    >>> f_prime(x=2, A=2, B=3)\n    27\n    ```", "```py\n\n    >>> slice_plot(f_prime(x, A=2, B=3) ~ x, domain(x=range(-5,5)))\n    ```", "```py\n\n    f_pprime = D(A*x^3+B*x+3 ~ x & x)\n    >>> f_pprime\n    function (x, A, B)\n    6 * A * x\n    ```", "```py\n\n    >>> f_pprime(x=2, A=2, B=3)\n    24\n    ```", "```py\n    >>> f_pprime(x=2, A=2, B=1)\n    24\n    ```", "```py\n\n    >>> slice_plot(f_pprime(x, A=2) ~ x, domain(x=range(-5,5)))\n    ```", "```py\n\n    f_pprime = D(A*x^2 + B*x*y + C*y^2 ~ x & x)\n    >>> f_pprime\n    function (x, y, A, B, C)\n    2 * A\n    ```", "```py\n\n    f_pprime = D(A*x^2 + B*x*y + C*y^2 ~ x & y)\n    >>> f_pprime\n    function (x, y, A, B, C)\n    B\n    ```", "```py\n    f_pprime = D(A*x^2 + B*x*y + C*y^2 ~ y & x)\n    >>> f_pprime\n    B\n    ```", "```py\n\n    f_pprime = D(A*x^2 + B*x*y + C*y^2 ~ y & y)\n    >>> f_pprime\n    function (x, y, A, B, C)\n    2 * C\n    ```", "```py\n\nf = makeFun( A*x^2 + B*x + 3 ~ x)\n>>> f\nfunction (x, A, B)\nA * x^2 + B * x + 3\n```", "```py\n\n>>> f(1, A=1, B=1)\n5\n```", "```py\n\nf_prime = D(f(x) ~ x)\n>>> f_prime\nfunction (x, A, B)\n2 * A * x + B\n```", "```py\n\n>>> f_prime(x=1, A=1, B=1)\n3\n```", "```py\n\n>>> slice_plot(f(x) ~ x, domain(x = -1:1)) %>%\n  gf_labs(title = \"Original function f(x)\")\n```", "```py\n\n>>> slice_plot(f_prime(x, A=1, B=1) ~ x, domain(x =-1:1), color = \"red\") %>%\n  gf_labs(title = \"Derivative function f'(x)\")\n```", "```py\n\nF_integral <- antiD(f_prime(x) ~ x)\n>>> F_integral\nfunction (x, A, B, C = 0)\nA * x^2 + x * B + C\n```", "```py\n\n>>> F_integral(1, A=1, B=1)\n2\n```", "```py\n\n>>> slice_plot(F_integral(x, A=1, B=1) ~ x, domain(x=-1:1)) %>%\n  gf_labs(title = \"Antiderivative function F_integral(x)\")\n```", "```py\n\nf_prime2 = D(F_integral(x) ~ x)\n>>> f_prime2\nfunction (x, A, B, C = 0)\n2 * A * x + B\n```", "```py\n\n>>> F_integral(x=1, A=1, B=1, C=0)\n2\n>>> F_integral(x=1, A=1, B=1, C=1)\n3\n>>> F_integral(x=1, A=1, B=1, C=2)\n4\n```", "```py\n\n>>> D(F_integral(x, A=1, B=1, C=0) ~ x)\nfunction (x)\n2 * x + 1\n>>> D(F_integral(x, A=1, B=1, C=1) ~ x)\nfunction (x)\n2 * x + 1\n>>> D(F_integral(x, A=1, B=1, C=2) ~ x)\nfunction (x)\n2 * x + 1\n```", "```py\n\n>>> f\nfunction (x, A, B)\nA * x^2 + B * x + 3\n<bytecode: 0x128185eb0>\n>>> f_prime\nfunction (x, A, B)\n2 * A * x + B\n<bytecode: 0x11fbc6628>\n```", "```py\n\n>>> F_integral\nfunction (x, A, B, C = 0)\nA * x^2 + x * B + C\n<bytecode: 0x128303540>\n```", "```py\n\n>>> F_integral(x=3, A=1, B=1) - F_integral(x=2, A=1, B=1)\n6\n```"]