- en: '8'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Influencing Trend Changepoints
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: During the development of Prophet, the engineering team recognized that real-world
    time series will frequently exhibit abrupt changes in their trajectories. As a
    fundamentally linear regression model, Prophet would not be capable of capturing
    these changes without special care being taken. You may have noticed in the previous
    chapters, however, that when we plotted the forecast components in our examples,
    the trend line was not always perfectly straight. Clearly, the Prophet team has
    developed a way for Prophet to capture these bends in the linear model. The locations
    of these bends are called **changepoints**.
  prefs: []
  type: TYPE_NORMAL
- en: Prophet will automatically identify these changepoints and allow the trend to
    adapt appropriately. However, there are several tools you can use to control this
    behavior if Prophet is underfitting or overfitting these rate changes. In this
    chapter, we’ll look at Prophet’s automatic changepoint detection to provide you
    with an understanding of what is happening in your model with the default settings.
    We will then look at two further techniques you can use if you need finer control
    over the changepoint process.
  prefs: []
  type: TYPE_NORMAL
- en: 'Specifically, in this chapter, you will learn about the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Automatic trend changepoint detection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Regularizing changepoints
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Specifying custom changepoint locations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The data files and code for the examples in this chapter can be found at [https://github.com/PacktPublishing/Forecasting-Time-Series-Data-with-Prophet-Second-Edition](https://github.com/PacktPublishing/Forecasting-Time-Series-Data-with-Prophet-Second-Edition).
  prefs: []
  type: TYPE_NORMAL
- en: Automatic trend changepoint detection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Trend changepoints are locations in your time series where the trend component
    of the model suddenly changes its slope. There are many reasons why these changepoints
    occur, depending upon your dataset. For example, Facebook (now Meta) developed
    Prophet to forecast its own business problems; it may model the number of daily
    active users and see a sudden change of trend upon the release of a new feature.
  prefs: []
  type: TYPE_NORMAL
- en: Airline passenger numbers may suddenly change as economies of scale allow much
    cheaper flights. The trend of carbon dioxide in the atmosphere was relatively
    flat for tens of thousands of years, but then suddenly changed during the Industrial
    Revolution.
  prefs: []
  type: TYPE_NORMAL
- en: From our work with the Divvy dataset in previous chapters, we saw a slowdown
    of growth after approximately two years. Let’s take a closer look at this example
    to learn about automatic changepoint detection.
  prefs: []
  type: TYPE_NORMAL
- en: Default changepoint detection
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Prophet sets changepoints by first specifying the number of potential dates
    on which a changepoint may occur. Prophet then works on calculating the magnitude
    of change at each of these points, attempting to fit the trend curve while keeping
    those magnitudes as low as possible. You can tune Prophet’s flexibility here by
    adjusting `changepoint_prior_scale`. You may recognize that argument from earlier—both
    seasonalities and holidays had their own prior scales for regularization.
  prefs: []
  type: TYPE_NORMAL
- en: With changepoints, it has much the same effect, and we’ll explore it later in
    this chapter. In Prophet’s default settings, the magnitudes of most of these potential
    changepoints will very nearly be zero and therefore will have a negligible effect
    on our trend curve.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get started with our code, we need to make the necessary imports and load
    our Divvy data. We’ll be using the daily Divvy data here. We are also going to
    import the `add_changepoints_to_plot` function, which you were introduced to in
    [*Chapter 7*](B19630_07.xhtml#_idTextAnchor453), *Controlling Growth Modes*; we’ll
    be using that a lot here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'With the default settings, Prophet will place 25 potential changepoints, evenly
    spaced in the first 80% of the data, before determining their magnitudes. With
    this Divvy data, those 25 locations are denoted by the vertical dashed bars in
    this figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.1 – Divvy data with potential changepoint locations](img/Fig_8.1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.1 – Divvy data with potential changepoint locations
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s fit our Prophet model. In this step, Prophet will determine what
    magnitudes to apply at each of those potential changepoints. From the examples
    in the previous chapters, we’ve learned how to model this data with multiplicative
    seasonality and hold down the Fourier order of the yearly seasonality a bit. You
    can see that reflected here when we instantiate our Prophet object.
  prefs: []
  type: TYPE_NORMAL
- en: 'After fitting the model, we’ll call `predict` with no `future` DataFrame specified,
    which causes Prophet to build its model and predict historical values but not
    any forecasted ones:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we will plot the model. We use the `add_changepoints_to_plot`
    function to see the locations of significant changepoints. As you saw in [*Chapter
    7*](B19630_07.xhtml#_idTextAnchor453), *Controlling Growth Modes*, the `add_changepoints_to_plot`
    function takes three required arguments. The first argument is the axes upon which
    to add the changepoints. We specify `fig` created in our first plot call, with
    the `gca()` method, which stands for *get current axes*. The second argument is
    our model and the third argument is our forecast.
  prefs: []
  type: TYPE_NORMAL
- en: 'In [*Chapter 7*](B19630_07.xhtml#_idTextAnchor453), *Controlling Growth Modes*,
    we used the `cp_linestyle` argument to force Prophet not to plot the changepoints,
    only the trend; we will not use that argument in this case:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'You should now see that Prophet determined that 5 of those 25 potential changepoints
    were actually significant. These 5 are denoted with the vertical dashed lines
    in this plot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.2 – Divvy changepoint plot](img/Fig_8.2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.2 – Divvy changepoint plot
  prefs: []
  type: TYPE_NORMAL
- en: It is hard to tell from the first changepoint that the trend is actually bending,
    but from the next four, it is much clearer. At each of those changepoints, the
    slope of the trend is allowed to become shallower.
  prefs: []
  type: TYPE_NORMAL
- en: 'The magnitude of each of the 25 potential changepoints is stored in `model.params`,
    but these values have been normalized, so their absolute values are meaningless
    but their relative magnitudes are not. The model parameters are stored in a dictionary,
    with `''delta''` being the key for the changepoint magnitudes. Let’s take a look:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'In this model, those changepoint magnitudes should be similar to the changepoint
    magnitudes shown in *Figure 8**.3*. Because these numbers are calculated using
    an optimization process instead of a deterministic equation, you may arrive at
    different exact values but the exponents should be roughly the same:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.3 – Divvy changepoint magnitudes](img/Fig_8.3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.3 – Divvy changepoint magnitudes
  prefs: []
  type: TYPE_NORMAL
- en: 'Most of those magnitudes have an exponent of -08 or -09, meaning that in standard
    notation, you should shift the decimal point that number of digits, 8 or 9 digits
    to the left, which is to say that those numbers are very close to zero. You can
    visualize these magnitudes by plotting them. Here, I am overlaying the trend line
    and the significant changepoints with the magnitudes of all changepoints:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.4 – Changepoint magnitudes](img/Fig_8.4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.4 – Changepoint magnitudes
  prefs: []
  type: TYPE_NORMAL
- en: Let me explain this plot a bit. The left axis is the same *y* axis as in *Figure
    8**.2*. The trend line—the solid line cutting from the lower left across to the
    upper right—is plotted on this axis. The vertical dashed lines are the significant
    changepoints identified by Prophet. The solid vertical bars are the changepoint
    magnitudes; these are plotted on the right axis, **Trend** **rate change**.
  prefs: []
  type: TYPE_NORMAL
- en: Again, most of these magnitudes are very nearly zero so they do not appear on
    the plot. The horizontal dashed line denotes a changepoint magnitude of zero.
    Bars extending upward from here are changepoints with positive magnitude, where
    the trend bends upward, and bars extending downward from here are changepoints
    with negative magnitude, where the trend bends downward.
  prefs: []
  type: TYPE_NORMAL
- en: The `add_changepoints_to_plot` function will *only* plot those changepoints
    with an absolute magnitude greater than 0.01\. The two horizontal dotted lines
    are located at magnitude levels of 0.01 and -0.01; Prophet only plots magnitudes
    that extend beyond these limits. You can change this threshold using the `threshold`
    argument in the function; for example, `add_changepoints_to_plot(fig.gca(), model,
    forecast, threshold=0.1)` will widen that threshold to an upper bound of `0.1`
    and a lower bound of `-0.1`. This only affects the plotting visualization, not
    your actual changepoints.
  prefs: []
  type: TYPE_NORMAL
- en: So, *Figure 8**.4* illustrates that Prophet was successful in forcing nearly
    all of the potential changepoints to have an insignificant effect. Eight total
    changepoints had magnitudes large enough to be visible on our plot, but only five
    of them were higher than Prophet’s plotting threshold (although their small effect
    on the trend is still applied). Even though it can be hard to see, the only positively
    valued changepoint, plotted just after **2015-01**, does indeed cause the trend
    to bend a little bit more steeply at that point. At the locations of the other
    significant changepoints, the trend becomes shallower.
  prefs: []
  type: TYPE_NORMAL
- en: The preceding example demonstrates Prophet’s behavior with regard to changepoints
    in a fully automatic setting. In the next section, let’s examine the levers you
    can use to gain some control of the changepoints.
  prefs: []
  type: TYPE_NORMAL
- en: Regularizing changepoints
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As stated earlier, Prophet will place 25 potential changepoints in the first
    80% of the time series by default. To control Prophet’s automatic changepoint
    detection, you can modify both of these values with the `n_changepoints` and `changepoint_range`
    arguments during model instantiation. For example, changing the number of potential
    changepoints to `5` is done like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'This results in five evenly spaced potential changepoints in the first 80%
    of the data, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.5 – Five potential changepoints](img/Fig_8.5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.5 – Five potential changepoints
  prefs: []
  type: TYPE_NORMAL
- en: 'Or, you could instead force all 25 changepoints to lie not in the first 80%
    of data, but rather in the first 50%:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we see the potential changepoints are placed only in the first half of
    the data range:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.6 – Changepoints in the first 50% of the data](img/Fig_8.6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.6 – Changepoints in the first 50% of the data
  prefs: []
  type: TYPE_NORMAL
- en: You can, of course, use both of these arguments in one model. In both cases,
    it is important to remember that you’re not instructing Prophet to place changepoints
    at these locations, only *potential* changepoints. It will still try to force
    as many of them as possible to zero, and indeed both cases do leave us with predicted
    trends that are nearly identical to the example we built with default values.
  prefs: []
  type: TYPE_NORMAL
- en: Also, remember that Prophet will never place a changepoint in the future. This
    is why by default, Prophet will only use the first 80% of data—to prevent it from
    choosing a poor changepoint with few upcoming data points with which to correct
    its mistake. Prophet will, however, estimate future changepoints when creating
    uncertainty intervals; so, a model that features many large changepoints will
    also see greater forecast uncertainty.
  prefs: []
  type: TYPE_NORMAL
- en: 'In general, setting changepoints at very late moments in the series has a higher
    likelihood of overfitting. To see why, I have built a two-year forecast of the
    Divvy data and forced Prophet to choose just one changepoint, placed in the final
    two months of data. During November, the number of rides per day drops quickly
    as usage declines in winter. Prophet saw this decline and decided it must be a
    negative trend change and so adjusted its future predictions accordingly:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.7 – Prophet with a very late changepoint](img/Fig_8.7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.7 – Prophet with a very late changepoint
  prefs: []
  type: TYPE_NORMAL
- en: I may be no better at predicting the future than Prophet is, but I’ve got a
    high degree of confidence that Prophet’s forecast in this case is not going to
    be very accurate in the future.
  prefs: []
  type: TYPE_NORMAL
- en: With all that said, you should not need to adjust the number of changepoints
    or the changepoint range very often. The defaults almost always work out very
    well. If you find Prophet is either overfitting or underfitting the changepoints,
    it is better to control this through regularization. Just as we did in [*Chapter
    5*](B19630_05.xhtml#_idTextAnchor254), *Working with Seasonality*, and [*Chapter
    6*](B19630_06.xhtml#_idTextAnchor375), *Forecasting Holiday Effects*, we use the
    **prior scale** for regularization.
  prefs: []
  type: TYPE_NORMAL
- en: If you recall from [*Chapter 5*](B19630_05.xhtml#_idTextAnchor254), *Working
    with Seasonality*, and [*Chapter 6*](B19630_06.xhtml#_idTextAnchor375), *Forecasting
    Holiday Effects*, the prior scale is used to control the flexibility of Prophet.
    A model that is too flexible has a high chance of overfitting the data, that is,
    modeling too much noise in addition to the true signal. A model that is not flexible
    enough has a high chance of underfitting the data or of not capturing all of the
    available signals.
  prefs: []
  type: TYPE_NORMAL
- en: By default, both `seasonality_prior_scale` and `holidays_prior_scale` were set
    to `10`. `changepoint_prior_scale`, however, is set to `0.05` by default. But
    just as with the seasonality and holidays prior scales, increasing this value
    will make the trend more flexible, and decreasing it will make the trend less
    flexible. Reasonable values are typically in the range of `0.001` to `0.5`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s fit and plot a model with `changepoint_prior_scale` increased to `1`.
    This should allow Prophet’s trend to have a great deal of flexibility:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we can see that Prophet’s trend is now wildly overfitting:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.8 – Prophet with too little trend regularization](img/Fig_8.8.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.8 – Prophet with too little trend regularization
  prefs: []
  type: TYPE_NORMAL
- en: When we loosen the regularization parameter, Prophet starts overfitting the
    trend line and tries to capture some of the yearly seasonality. We have given
    Prophet too much flexibility with its trend fit.
  prefs: []
  type: TYPE_NORMAL
- en: 'On the other hand, let’s now see what happens when we regularize too strictly.
    In this example, we decrease `changepoint_prior_scale` from the default down to
    `0.007`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'With the reduced `changepoint_prior_scale`, the following plot shows Prophet’s
    trend to not be flexible enough:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.9 – Prophet with too much trend regularization](img/Fig_8.9.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.9 – Prophet with too much trend regularization
  prefs: []
  type: TYPE_NORMAL
- en: Compare *Figure 8**.9* with *Figure 8**.2* at the beginning of this chapter.
    Although the locations of the changepoints in *Figure 8**.9* are roughly the same
    as in *Figure 8**.2*, the magnitudes of the changepoints were constrained too
    much with the regularization levels we used. That bend that was evident in *Figure
    8**.2* is now so minor in *Figure 8**.9* that it is hard to spot.
  prefs: []
  type: TYPE_NORMAL
- en: 'There is one more way to control the changepoints in Prophet: by specifying
    your own custom changepoint locations. We’re going to look at a new dataset to
    explore this topic, the Instagram account of soccer player James Rodríguez, `@jamesrodriguez10`.
    This data was collected on November 22, 2019.'
  prefs: []
  type: TYPE_NORMAL
- en: Specifying custom changepoint locations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'James Rodríguez is a Colombian soccer player who played in both the 2014 and
    2018 World Cups. He was a standout player in both World Cups but won the Golden
    Boot award in 2014 for scoring more goals than any other player in the competition.
    I chose his account because it exhibits some very interesting behavior that would
    be extremely difficult to model without changepoints:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.10 – James Rodríguez’s Instagram likes per day](img/Fig_8.10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.10 – James Rodríguez’s Instagram likes per day
  prefs: []
  type: TYPE_NORMAL
- en: The number of likes his Instagram posts get is gradually increasing over time,
    but there have been two notable spikes, in the summers of 2014 and 2018 when he
    was playing in the World Cup. It is clear that the spike in 2014 resulted in a
    significant trend change. The number of likes that his posts were getting increased
    dramatically during the World Cup and dropped afterward, but not to the same baseline
    as before. He gained a large number of new followers during this period and consistently
    earned more likes per post as a result.
  prefs: []
  type: TYPE_NORMAL
- en: Similarly, in 2018, his profile saw a large summer spike in likes during the
    World Cup, but it is not clear that there was a significant trend change after
    the tournament ended. Also, you can see another spike in the summer of 2017\.
    On July 11 of that year, Rodríguez announced that he had signed with a new team,
    Bayern Munich. We’ll include this fact in our model as well.
  prefs: []
  type: TYPE_NORMAL
- en: To model this behavior, we need to first account for the special events of the
    World Cups and the new team announcement. We will do this by creating custom holidays
    for them. And second, we need to account for the trend changes; we’ll accomplish
    this by setting custom trend changepoints. There does not appear to be much seasonality
    in the data so to simplify our model, we’ll just instruct Prophet not to fit any.
  prefs: []
  type: TYPE_NORMAL
- en: 'We already have our necessary imports completed, so we first need to load the
    data into our Prophet DataFrame:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we need to create a DataFrame for the special events. This is the same
    procedure you learned about in [*Chapter 6*](B19630_06.xhtml#_idTextAnchor375),
    *Forecasting Holiday Effects*. We have three events to add in this case: the 2014
    World Cup, the 2017 signing for Bayern Munich, and the 2018 World Cup. Each event
    must have a name in the `''holiday''` column and the date in the `''``ds''` column.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The two World Cups took place over 31 days each, so we’ll specify the first
    date and set `''upper_window''` to `31`. We’ll leave `''lower_window''` at `0`.
    For the last event, signing with a new team, we’ll add a two-week window to generously
    assume that the effect of signing for Bayern Munich impacted his posts for the
    next several days:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we need to specify our custom changepoints. We can simply pass Prophet
    a list of dates. Any date that pandas recognizes as a valid date-time format can
    be used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: For each of those special events, we add one potential changepoint at the beginning
    of the event and one at the end. The rationale behind this decision is that we
    need to account for the fact that the number of likes per photo will follow a
    certain trend, proportional to the number of followers of the account until the
    trend is upset by a special event.
  prefs: []
  type: TYPE_NORMAL
- en: During the special event, the number of followers will increase at a much higher
    rate, and so the number of likes per photo will also increase, requiring a new
    trend line. After the event concludes, the dramatic rate of new followers will
    slow, so we need a third trend line at this point—resulting in three different
    trend slopes with two trend changepoints connecting them.
  prefs: []
  type: TYPE_NORMAL
- en: With our special events created and our potential changepoints determined, we
    next instantiate our Prophet object while passing it these special events and
    changepoints. For this example, we’ll set the seasonality to multiplicative. This
    is count data and as discussed in [*Chapter 5*](B19630_05.xhtml#_idTextAnchor254),
    *Working with Seasonality*, count data is often multiplicative.
  prefs: []
  type: TYPE_NORMAL
- en: However, there is an argument for using additive seasonality in this case—it
    is possible that the increased likes came from non-followers who visited Rodríguez’s
    profile due to the World Cup but did not subsequently follow, which would be an
    additive effect, as opposed to increased activity from current followers, possibly
    due to Instagram’s algorithmic feed ordering, which would be a multiplicative
    effect. In either case, the following procedure is the same.
  prefs: []
  type: TYPE_NORMAL
- en: We decided to simplify our model by removing seasonalities, so we’ll set both
    `yearly_seasonality` and `weekly_seasonality` to `False`. You may be wondering
    why we bothered to set `seasonality_mode` if we don’t have any seasonalities—this
    is because `seasonality_mode` affects holidays as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we set the prior scale for the changepoints to `1` because we want
    to loosen the regularization a bit (feel free to experiment on your own with this
    number; I found the default to be too restrictive on this data), and pass our
    list of changepoints to the `changepoints` argument:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'We will now continue as in the previous examples by calling the `fit` and `predict`
    methods on our model. We are not predicting the future in this example, but if
    you wanted to, you would need to add any future special events that you expected.
    Lastly, let’s plot both our forecast and our components to observe the results:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'First up is our forecast:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.11 – James Rodríguez forecast](img/Fig_8.11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.11 – James Rodríguez forecast
  prefs: []
  type: TYPE_NORMAL
- en: 'Despite the simplifications we made in our model, the trend is a remarkably
    good fit. Now, let’s look at our components plot:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 8.12 – James Rodríguez co\uFEFFmponents plot](img/Fig_8.12.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 8.12 – James Rodríguez components plot
  prefs: []
  type: TYPE_NORMAL
- en: You can see from the **holidays** plot that both World Cups provided a roughly
    200% increase in likes per post on James Rodríguez’s account. When he signed for
    Bayern Munich, he saw a more modest, though still impressive, doubling of likes.
    And the trend line reflects these changes.
  prefs: []
  type: TYPE_NORMAL
- en: During each World Cup, he saw a rapid rise in the number of likes per post before
    the rate of increase of likes slowed while maintaining a higher baseline than
    before the event. Prophet determined that two changepoints before and after each
    World Cup were necessary but found that the new team announcement made only one
    significant change to the trend.
  prefs: []
  type: TYPE_NORMAL
- en: There is one more way to handle changepoint locations, a hybrid technique blending
    custom changepoints with Prophet’s default behavior. With this method, you would
    create an evenly spaced grid of changepoints, as Prophet does by default, and
    enrich it with your custom changepoints. Let’s squeeze in one more example to
    see how to do this.
  prefs: []
  type: TYPE_NORMAL
- en: 'In Prophet’s source code, there is a class method for creating the grid of
    potential changepoints called `set_changepoints`. This method is called automatically
    during the `fit` command if no changepoints have already been specified. The following
    function mimics that `set_changepoints` method to allow us to create a grid of
    potential changepoints outside the Prophet class. We will also need to import
    the `numpy` library for use in this function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: This function requires three arguments. The first is your Prophet DataFrame
    with the `'ds'` and `'y'` columns. The second argument is the number of changepoints
    to create, defaulting to the same value of `25` as Prophet uses, and the third
    argument is the changepoint range, again defaulting to Prophet’s value of `0.8`.
    This returns a pandas series of potential changepoint locations. You simply then
    append your custom changepoints to it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using this function, let’s create five evenly spaced changepoints in the first
    80% of the data, and then enrich the automatic changepoints with our six special
    event changepoints from the previous example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let’s recreate our previous model, but this time, send it our new list
    of changepoints:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'And now we can see that Prophet has used many more changepoints than before:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 8.13 – Forecast with hybrid automatic/manual potential changepoints\uFEFF\
    ](img/Fig_8.13.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 8.13 – Forecast with hybrid automatic/manual potential changepoints
  prefs: []
  type: TYPE_NORMAL
- en: We also have a trend line that is very flexible; perhaps it is overfitting.
    That is something for you, the analyst, to determine, but as a demonstration of
    how to blend your own custom changepoints with an automatically selected grid
    of potential changepoints, this example will suffice.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned how to control the fit of the trend line by using
    changepoints. First, you used Divvy data to see how Prophet automatically selects
    potential changepoint locations and how you can control this by modifying the
    default number of potential changepoints and the changepoint range.
  prefs: []
  type: TYPE_NORMAL
- en: Then, you learned a more robust way to control Prophet’s changepoint selection
    through regularization. Just as with seasonality and holidays, changepoints are
    regularized by setting the prior scale. You then looked at the Instagram data
    of James Rodríguez and learned how to model the increase in likes per post he
    received both during and after the World Cups of 2014 and 2018\. Finally, you
    learned how to blend these two techniques and enrich an automatically selected
    grid of potential changepoints with your custom changepoint locations.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will again look at the Divvy data, but this time, we’ll
    include the additional columns for temperature and weather conditions in order
    to learn how to include additional regressors in a Prophet forecast.
  prefs: []
  type: TYPE_NORMAL
