- en: '8'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '8'
- en: Influencing Trend Changepoints
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 影响**趋势变化点**
- en: During the development of Prophet, the engineering team recognized that real-world
    time series will frequently exhibit abrupt changes in their trajectories. As a
    fundamentally linear regression model, Prophet would not be capable of capturing
    these changes without special care being taken. You may have noticed in the previous
    chapters, however, that when we plotted the forecast components in our examples,
    the trend line was not always perfectly straight. Clearly, the Prophet team has
    developed a way for Prophet to capture these bends in the linear model. The locations
    of these bends are called **changepoints**.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发Prophet的过程中，工程团队认识到现实世界的时间序列经常会在其轨迹上表现出突然的变化。作为一个基本的线性回归模型，Prophet如果不能特别小心，将无法捕捉这些变化。然而，你可能会在之前的章节中注意到，当我们绘制示例中的预测成分时，趋势线并不总是完全直线。显然，Prophet团队已经开发了一种方法，使Prophet能够捕捉线性模型中的这些弯曲。这些弯曲的位置被称为**变化点**。
- en: Prophet will automatically identify these changepoints and allow the trend to
    adapt appropriately. However, there are several tools you can use to control this
    behavior if Prophet is underfitting or overfitting these rate changes. In this
    chapter, we’ll look at Prophet’s automatic changepoint detection to provide you
    with an understanding of what is happening in your model with the default settings.
    We will then look at two further techniques you can use if you need finer control
    over the changepoint process.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Prophet将自动识别这些变化点，并允许趋势适当地适应。然而，如果你发现Prophet在拟合这些变化率时欠拟合或过拟合，你可以使用几个工具来控制这种行为。在本章中，我们将探讨Prophet的自动变化点检测，以帮助你理解在默认设置下模型中发生了什么。然后，我们将探讨如果你需要更精细地控制变化点过程，你可以使用的两种进一步的技术。
- en: 'Specifically, in this chapter, you will learn about the following:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 具体来说，在本章中，你将学习以下内容：
- en: Automatic trend changepoint detection
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动趋势变化点检测
- en: Regularizing changepoints
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 正则化变化点
- en: Specifying custom changepoint locations
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 指定自定义变化点位置
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: The data files and code for the examples in this chapter can be found at [https://github.com/PacktPublishing/Forecasting-Time-Series-Data-with-Prophet-Second-Edition](https://github.com/PacktPublishing/Forecasting-Time-Series-Data-with-Prophet-Second-Edition).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本章示例的数据文件和代码可以在[https://github.com/PacktPublishing/Forecasting-Time-Series-Data-with-Prophet-Second-Edition](https://github.com/PacktPublishing/Forecasting-Time-Series-Data-with-Prophet-Second-Edition)找到。
- en: Automatic trend changepoint detection
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动趋势变化点检测
- en: Trend changepoints are locations in your time series where the trend component
    of the model suddenly changes its slope. There are many reasons why these changepoints
    occur, depending upon your dataset. For example, Facebook (now Meta) developed
    Prophet to forecast its own business problems; it may model the number of daily
    active users and see a sudden change of trend upon the release of a new feature.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 趋势变化点是你时间序列中趋势成分突然改变斜率的位置。这些变化点出现的原因很多，这取决于你的数据集。例如，Facebook（现在称为Meta）开发了Prophet来预测其自身的业务问题；它可能会对每日活跃用户数量进行建模，并在新功能的发布上看到趋势的突然变化。
- en: Airline passenger numbers may suddenly change as economies of scale allow much
    cheaper flights. The trend of carbon dioxide in the atmosphere was relatively
    flat for tens of thousands of years, but then suddenly changed during the Industrial
    Revolution.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 由于规模经济允许航班价格大幅降低，航空公司乘客数量可能会突然变化。大气中二氧化碳的趋势在过去数万年中相对平坦，但在工业革命期间突然发生了变化。
- en: From our work with the Divvy dataset in previous chapters, we saw a slowdown
    of growth after approximately two years. Let’s take a closer look at this example
    to learn about automatic changepoint detection.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在前几章中，我们通过Divvy数据集的工作看到，大约两年后增长放缓。让我们更仔细地看看这个例子，以了解自动变化点检测。
- en: Default changepoint detection
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 默认变化点检测
- en: Prophet sets changepoints by first specifying the number of potential dates
    on which a changepoint may occur. Prophet then works on calculating the magnitude
    of change at each of these points, attempting to fit the trend curve while keeping
    those magnitudes as low as possible. You can tune Prophet’s flexibility here by
    adjusting `changepoint_prior_scale`. You may recognize that argument from earlier—both
    seasonalities and holidays had their own prior scales for regularization.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Prophet通过首先指定可能发生变化点的潜在日期数量来设置变化点。然后Prophet会计算这些点中每个点的变化幅度，试图在尽可能保持这些幅度最低的情况下拟合趋势曲线。你可以通过调整`changepoint_prior_scale`来调整Prophet的灵活性。你可能已经从之前的内容中认识到了这个参数——季节性和节假日都有自己的正则化先验尺度。
- en: With changepoints, it has much the same effect, and we’ll explore it later in
    this chapter. In Prophet’s default settings, the magnitudes of most of these potential
    changepoints will very nearly be zero and therefore will have a negligible effect
    on our trend curve.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 使用变化点，它有几乎相同的效果，我们将在本章后面探讨它。在Prophet的默认设置中，大多数这些潜在变化点的幅度几乎为零，因此对我们的趋势曲线的影响可以忽略不计。
- en: 'To get started with our code, we need to make the necessary imports and load
    our Divvy data. We’ll be using the daily Divvy data here. We are also going to
    import the `add_changepoints_to_plot` function, which you were introduced to in
    [*Chapter 7*](B19630_07.xhtml#_idTextAnchor453), *Controlling Growth Modes*; we’ll
    be using that a lot here:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始我们的代码，我们需要进行必要的导入并加载我们的Divvy数据。在这里，我们将使用每日的Divvy数据。我们还将导入`add_changepoints_to_plot`函数，这个函数在第7章
    *控制增长模式* 中被介绍过；我们将在这里大量使用它：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'With the default settings, Prophet will place 25 potential changepoints, evenly
    spaced in the first 80% of the data, before determining their magnitudes. With
    this Divvy data, those 25 locations are denoted by the vertical dashed bars in
    this figure:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 使用默认设置，Prophet将在数据的第一个80%中均匀放置25个潜在变化点，在确定它们的幅度之前。在这个Divvy数据中，这25个位置由图中垂直虚线表示：
- en: '![Figure 8.1 – Divvy data with potential changepoint locations](img/Fig_8.1.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![图8.1 – 带有潜在变化点位置的Divvy数据](img/Fig_8.1.jpg)'
- en: Figure 8.1 – Divvy data with potential changepoint locations
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.1 – 带有潜在变化点位置的Divvy数据
- en: Now, let’s fit our Prophet model. In this step, Prophet will determine what
    magnitudes to apply at each of those potential changepoints. From the examples
    in the previous chapters, we’ve learned how to model this data with multiplicative
    seasonality and hold down the Fourier order of the yearly seasonality a bit. You
    can see that reflected here when we instantiate our Prophet object.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们拟合我们的Prophet模型。在这个步骤中，Prophet将确定在每个潜在变化点应用哪些幅度。从前几章的例子中，我们已经学会了如何使用乘法季节性来建模这些数据，并稍微降低年季节性的傅里叶阶数。当你实例化我们的Prophet对象时，你可以在这里看到这一点。
- en: 'After fitting the model, we’ll call `predict` with no `future` DataFrame specified,
    which causes Prophet to build its model and predict historical values but not
    any forecasted ones:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 拟合模型后，我们将不带`future` DataFrame指定地调用`predict`，这将导致Prophet构建其模型并预测历史值，但不进行任何预测：
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: At this point, we will plot the model. We use the `add_changepoints_to_plot`
    function to see the locations of significant changepoints. As you saw in [*Chapter
    7*](B19630_07.xhtml#_idTextAnchor453), *Controlling Growth Modes*, the `add_changepoints_to_plot`
    function takes three required arguments. The first argument is the axes upon which
    to add the changepoints. We specify `fig` created in our first plot call, with
    the `gca()` method, which stands for *get current axes*. The second argument is
    our model and the third argument is our forecast.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，我们将绘制模型。我们使用`add_changepoints_to_plot`函数来查看显著变化点的位置。正如你在[*第7章*](B19630_07.xhtml#_idTextAnchor453)
    *控制增长模式*中看到的，`add_changepoints_to_plot`函数需要三个必需的参数。第一个参数是要添加变化点的坐标轴。我们指定在第一次绘图调用中创建的`fig`，使用`gca()`方法，代表*获取当前坐标轴*。第二个参数是我们的模型，第三个参数是我们的预测。
- en: 'In [*Chapter 7*](B19630_07.xhtml#_idTextAnchor453), *Controlling Growth Modes*,
    we used the `cp_linestyle` argument to force Prophet not to plot the changepoints,
    only the trend; we will not use that argument in this case:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第7章*](B19630_07.xhtml#_idTextAnchor453) *控制增长模式*中，我们使用了`cp_linestyle`参数来强制Prophet不绘制变化点，只绘制趋势；在这个例子中，我们不会使用这个参数：
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'You should now see that Prophet determined that 5 of those 25 potential changepoints
    were actually significant. These 5 are denoted with the vertical dashed lines
    in this plot:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你应该可以看到Prophet确定这25个潜在变化点中有5个实际上是显著的。这些5个在这个图中用垂直的虚线表示：
- en: '![Figure 8.2 – Divvy changepoint plot](img/Fig_8.2.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![图8.2 – 分配变化点图](img/Fig_8.2.jpg)'
- en: Figure 8.2 – Divvy changepoint plot
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.2 – 分配变化点图
- en: It is hard to tell from the first changepoint that the trend is actually bending,
    but from the next four, it is much clearer. At each of those changepoints, the
    slope of the trend is allowed to become shallower.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 从第一个变化点很难看出趋势实际上是在弯曲，但从接下来的四个来看，就非常明显了。在每个这些变化点，趋势的斜率被允许变得较浅。
- en: 'The magnitude of each of the 25 potential changepoints is stored in `model.params`,
    but these values have been normalized, so their absolute values are meaningless
    but their relative magnitudes are not. The model parameters are stored in a dictionary,
    with `''delta''` being the key for the changepoint magnitudes. Let’s take a look:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 每个25个潜在变化点的幅度都存储在`model.params`中，但这些值已经被归一化，因此它们的绝对值没有意义，但它们的相对幅度是有意义的。模型参数存储在一个字典中，其中`'delta'`是变化点幅度的键。让我们看一下：
- en: '[PRE3]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In this model, those changepoint magnitudes should be similar to the changepoint
    magnitudes shown in *Figure 8**.3*. Because these numbers are calculated using
    an optimization process instead of a deterministic equation, you may arrive at
    different exact values but the exponents should be roughly the same:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个模型中，这些变化点幅度应该与*图8.3*中显示的变化点幅度相似。因为这些数字是使用优化过程而不是确定性方程计算出来的，所以你可能会得到不同的确切值，但指数应该是大致相同的：
- en: '![Figure 8.3 – Divvy changepoint magnitudes](img/Fig_8.3.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![图8.3 – 分配变化点幅度](img/Fig_8.3.jpg)'
- en: Figure 8.3 – Divvy changepoint magnitudes
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.3 – 分配变化点幅度
- en: 'Most of those magnitudes have an exponent of -08 or -09, meaning that in standard
    notation, you should shift the decimal point that number of digits, 8 or 9 digits
    to the left, which is to say that those numbers are very close to zero. You can
    visualize these magnitudes by plotting them. Here, I am overlaying the trend line
    and the significant changepoints with the magnitudes of all changepoints:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这些幅度中的大多数都有一个指数为-08或-09，这意味着在标准记数法中，你应该将小数点向左移动那么多位，8位或9位，也就是说这些数字非常接近零。你可以通过绘制它们来可视化这些幅度。在这里，我正在叠加趋势线和所有变化点的显著变化点：
- en: '![Figure 8.4 – Changepoint magnitudes](img/Fig_8.4.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![图8.4 – 变化点幅度](img/Fig_8.4.jpg)'
- en: Figure 8.4 – Changepoint magnitudes
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.4 – 变化点幅度
- en: Let me explain this plot a bit. The left axis is the same *y* axis as in *Figure
    8**.2*. The trend line—the solid line cutting from the lower left across to the
    upper right—is plotted on this axis. The vertical dashed lines are the significant
    changepoints identified by Prophet. The solid vertical bars are the changepoint
    magnitudes; these are plotted on the right axis, **Trend** **rate change**.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 让我稍微解释一下这个图。左侧的轴与*图8.2*中的*y*轴相同。趋势线——从左下角穿过到右上角的实线——绘制在这个轴上。垂直的虚线是Prophet识别出的显著变化点。实心的垂直条是变化点幅度；这些绘制在右侧的轴上，**趋势**
    **变化率**。
- en: Again, most of these magnitudes are very nearly zero so they do not appear on
    the plot. The horizontal dashed line denotes a changepoint magnitude of zero.
    Bars extending upward from here are changepoints with positive magnitude, where
    the trend bends upward, and bars extending downward from here are changepoints
    with negative magnitude, where the trend bends downward.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，这些幅度中的大多数几乎为零，所以它们没有出现在图上。水平的虚线表示变化点幅度为零。从这里向上延伸的条表示具有正幅度的变化点，趋势向上弯曲，从这里向下延伸的条表示具有负幅度的变化点，趋势向下弯曲。
- en: The `add_changepoints_to_plot` function will *only* plot those changepoints
    with an absolute magnitude greater than 0.01\. The two horizontal dotted lines
    are located at magnitude levels of 0.01 and -0.01; Prophet only plots magnitudes
    that extend beyond these limits. You can change this threshold using the `threshold`
    argument in the function; for example, `add_changepoints_to_plot(fig.gca(), model,
    forecast, threshold=0.1)` will widen that threshold to an upper bound of `0.1`
    and a lower bound of `-0.1`. This only affects the plotting visualization, not
    your actual changepoints.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`add_changepoints_to_plot`函数只会绘制绝对幅度大于0.01的变化点。两条水平虚线位于幅度水平0.01和-0.01；Prophet只绘制超出这些限制的幅度。你可以使用函数中的`threshold`参数更改此阈值；例如，`add_changepoints_to_plot(fig.gca(),
    model, forecast, threshold=0.1)`将阈值扩大到上限为`0.1`和下限为`-0.1`。这只会影响绘图可视化，不会影响你的实际变化点。'
- en: So, *Figure 8**.4* illustrates that Prophet was successful in forcing nearly
    all of the potential changepoints to have an insignificant effect. Eight total
    changepoints had magnitudes large enough to be visible on our plot, but only five
    of them were higher than Prophet’s plotting threshold (although their small effect
    on the trend is still applied). Even though it can be hard to see, the only positively
    valued changepoint, plotted just after **2015-01**, does indeed cause the trend
    to bend a little bit more steeply at that point. At the locations of the other
    significant changepoints, the trend becomes shallower.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，*图8.4*展示了Prophet成功地将几乎所有潜在变化点的影响降至不显著。总共有八个变化点的幅度足够大，可以在我们的图表中看到，但其中只有五个超过了Prophet的绘图阈值（尽管它们对趋势的小幅度影响仍然存在）。尽管可能难以看出，唯一正值的变化点，位于**2015-01**之后，确实使趋势在该点变得更加陡峭。在其他显著变化点的位置，趋势变得较为平缓。
- en: The preceding example demonstrates Prophet’s behavior with regard to changepoints
    in a fully automatic setting. In the next section, let’s examine the levers you
    can use to gain some control of the changepoints.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 上述示例展示了Prophet在完全自动设置下的变化点行为。在下一节中，我们将探讨你可以使用的杠杆来获得对变化点的一些控制。
- en: Regularizing changepoints
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 正则化变化点
- en: 'As stated earlier, Prophet will place 25 potential changepoints in the first
    80% of the time series by default. To control Prophet’s automatic changepoint
    detection, you can modify both of these values with the `n_changepoints` and `changepoint_range`
    arguments during model instantiation. For example, changing the number of potential
    changepoints to `5` is done like this:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，Prophet默认将在时间序列的前80%中放置25个潜在变化点。要控制Prophet的自动变化点检测，你可以在模型实例化期间修改这两个值，使用`n_changepoints`和`changepoint_range`参数。例如，将潜在变化点的数量更改为`5`的操作如下：
- en: '[PRE4]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This results in five evenly spaced potential changepoints in the first 80%
    of the data, as shown here:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这导致在数据的前80%中出现了五个均匀分布的潜在变化点，如图所示：
- en: '![Figure 8.5 – Five potential changepoints](img/Fig_8.5.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![图8.5 – 五个潜在变化点](img/Fig_8.5.jpg)'
- en: Figure 8.5 – Five potential changepoints
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.5 – 五个潜在变化点
- en: 'Or, you could instead force all 25 changepoints to lie not in the first 80%
    of data, but rather in the first 50%:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，你也可以强制所有25个变化点不在数据的前80%，而是在前50%：
- en: '[PRE5]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now, we see the potential changepoints are placed only in the first half of
    the data range:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们看到潜在变化点仅位于数据范围的前半部分：
- en: '![Figure 8.6 – Changepoints in the first 50% of the data](img/Fig_8.6.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![图8.6 – 数据前50%的变化点](img/Fig_8.6.jpg)'
- en: Figure 8.6 – Changepoints in the first 50% of the data
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.6 – 数据前50%的变化点
- en: You can, of course, use both of these arguments in one model. In both cases,
    it is important to remember that you’re not instructing Prophet to place changepoints
    at these locations, only *potential* changepoints. It will still try to force
    as many of them as possible to zero, and indeed both cases do leave us with predicted
    trends that are nearly identical to the example we built with default values.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，你可以在一个模型中使用这两个参数。在两种情况下，重要的是要记住，你并没有指示Prophet在这些位置放置变化点，只是*潜在*变化点。它仍然会尝试将尽可能多的它们强制为零，并且确实在这两种情况下都留下了与使用默认值构建的示例几乎相同的预测趋势。
- en: Also, remember that Prophet will never place a changepoint in the future. This
    is why by default, Prophet will only use the first 80% of data—to prevent it from
    choosing a poor changepoint with few upcoming data points with which to correct
    its mistake. Prophet will, however, estimate future changepoints when creating
    uncertainty intervals; so, a model that features many large changepoints will
    also see greater forecast uncertainty.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，请记住 Prophet 从不会在将来放置变化点。这就是为什么默认情况下，Prophet 只会使用前 80% 的数据——以防止它选择一个错误的变化点，因为即将到来的数据点很少，无法纠正其错误。然而，Prophet
    在创建不确定性区间时，会估计未来的变化点；因此，具有许多大型变化点的模型也会看到更大的预测不确定性。
- en: 'In general, setting changepoints at very late moments in the series has a higher
    likelihood of overfitting. To see why, I have built a two-year forecast of the
    Divvy data and forced Prophet to choose just one changepoint, placed in the final
    two months of data. During November, the number of rides per day drops quickly
    as usage declines in winter. Prophet saw this decline and decided it must be a
    negative trend change and so adjusted its future predictions accordingly:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，在序列的非常晚的时刻设置变化点有更高的过拟合可能性。为了了解原因，我构建了 Divvy 数据的两年预测，并强迫 Prophet 只选择一个变化点，放置在数据的最后两个月。在十一月，由于冬季使用量下降，每天的骑行次数迅速下降。Prophet
    看到了这种下降，并决定这必须是一个负趋势变化，因此相应地调整了其未来的预测：
- en: '![Figure 8.7 – Prophet with a very late changepoint](img/Fig_8.7.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.7 – Prophet 过度晚的变化点](img/Fig_8.7.jpg)'
- en: Figure 8.7 – Prophet with a very late changepoint
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.7 – Prophet 过度晚的变化点
- en: I may be no better at predicting the future than Prophet is, but I’ve got a
    high degree of confidence that Prophet’s forecast in this case is not going to
    be very accurate in the future.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我可能并不比 Prophet 更擅长预测未来，但我对 Prophet 在这种情况下未来的预测不太准确有很高的信心。
- en: With all that said, you should not need to adjust the number of changepoints
    or the changepoint range very often. The defaults almost always work out very
    well. If you find Prophet is either overfitting or underfitting the changepoints,
    it is better to control this through regularization. Just as we did in [*Chapter
    5*](B19630_05.xhtml#_idTextAnchor254), *Working with Seasonality*, and [*Chapter
    6*](B19630_06.xhtml#_idTextAnchor375), *Forecasting Holiday Effects*, we use the
    **prior scale** for regularization.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 说了这么多，你通常不需要经常调整变化点的数量或变化点范围。默认值几乎总是非常合适。如果你发现 Prophet 要么过度拟合，要么欠拟合变化点，最好是通过对正则化进行控制。就像我们在
    [*第 5 章*](B19630_05.xhtml#_idTextAnchor254)，*处理季节性*，和 [*第 6 章*](B19630_06.xhtml#_idTextAnchor375)，*预测节假日影响*
    中所做的那样，我们使用 **先验尺度** 进行正则化。
- en: If you recall from [*Chapter 5*](B19630_05.xhtml#_idTextAnchor254), *Working
    with Seasonality*, and [*Chapter 6*](B19630_06.xhtml#_idTextAnchor375), *Forecasting
    Holiday Effects*, the prior scale is used to control the flexibility of Prophet.
    A model that is too flexible has a high chance of overfitting the data, that is,
    modeling too much noise in addition to the true signal. A model that is not flexible
    enough has a high chance of underfitting the data or of not capturing all of the
    available signals.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还记得 [*第 5 章*](B19630_05.xhtml#_idTextAnchor254)，*处理季节性*，和 [*第 6 章*](B19630_06.xhtml#_idTextAnchor375)，*预测节假日影响*，先验尺度用于控制
    Prophet 的灵活性。一个过于灵活的模型有很大的可能性会过度拟合数据，即除了真实信号外，还建模了太多的噪声。一个不够灵活的模型有很大的可能性会欠拟合数据或无法捕捉到所有可用的信号。
- en: By default, both `seasonality_prior_scale` and `holidays_prior_scale` were set
    to `10`. `changepoint_prior_scale`, however, is set to `0.05` by default. But
    just as with the seasonality and holidays prior scales, increasing this value
    will make the trend more flexible, and decreasing it will make the trend less
    flexible. Reasonable values are typically in the range of `0.001` to `0.5`.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`seasonality_prior_scale` 和 `holidays_prior_scale` 都被设置为 `10`。然而，`changepoint_prior_scale`
    默认设置为 `0.05`。但就像季节性和节假日先验尺度一样，增加这个值会使趋势更加灵活，而减少它会使趋势不那么灵活。合理的值通常在 `0.001` 到 `0.5`
    之间。
- en: 'Let’s fit and plot a model with `changepoint_prior_scale` increased to `1`.
    This should allow Prophet’s trend to have a great deal of flexibility:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们拟合并绘制一个将 `changepoint_prior_scale` 增加到 `1` 的模型。这应该会使 Prophet 的趋势具有很大的灵活性：
- en: '[PRE6]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Here, we can see that Prophet’s trend is now wildly overfitting:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到 Prophet 的趋势现在过度拟合了：
- en: '![Figure 8.8 – Prophet with too little trend regularization](img/Fig_8.8.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.8 – Prophet 过度缺乏趋势正则化](img/Fig_8.8.jpg)'
- en: Figure 8.8 – Prophet with too little trend regularization
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.8 – Prophet 过度缺乏趋势正则化
- en: When we loosen the regularization parameter, Prophet starts overfitting the
    trend line and tries to capture some of the yearly seasonality. We have given
    Prophet too much flexibility with its trend fit.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们放宽正则化参数时，Prophet开始过度拟合趋势线，并试图捕捉一些年度季节性。我们给了Prophet太多的趋势拟合灵活性。
- en: 'On the other hand, let’s now see what happens when we regularize too strictly.
    In this example, we decrease `changepoint_prior_scale` from the default down to
    `0.007`:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，现在让我们看看当我们过于严格地进行正则化时会发生什么。在这个例子中，我们将`changepoint_prior_scale`从默认值降低到`0.007`：
- en: '[PRE7]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'With the reduced `changepoint_prior_scale`, the following plot shows Prophet’s
    trend to not be flexible enough:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 减少了`changepoint_prior_scale`后，以下图表显示Prophet的趋势不够灵活：
- en: '![Figure 8.9 – Prophet with too much trend regularization](img/Fig_8.9.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![图8.9 – 过度趋势正则化的Prophet](img/Fig_8.9.jpg)'
- en: Figure 8.9 – Prophet with too much trend regularization
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.9 – 过度趋势正则化的Prophet
- en: Compare *Figure 8**.9* with *Figure 8**.2* at the beginning of this chapter.
    Although the locations of the changepoints in *Figure 8**.9* are roughly the same
    as in *Figure 8**.2*, the magnitudes of the changepoints were constrained too
    much with the regularization levels we used. That bend that was evident in *Figure
    8**.2* is now so minor in *Figure 8**.9* that it is hard to spot.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 将本章开头的*图8.9*与*图8.2*进行比较。尽管*图8.9*中变化点的位置与*图8.2*大致相同，但我们使用的正则化水平过度限制了变化点的幅度。*图8.2*中明显的弯曲现在在*图8.9*中变得如此微小，以至于难以辨认。
- en: 'There is one more way to control the changepoints in Prophet: by specifying
    your own custom changepoint locations. We’re going to look at a new dataset to
    explore this topic, the Instagram account of soccer player James Rodríguez, `@jamesrodriguez10`.
    This data was collected on November 22, 2019.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 控制Prophet中的变化点还有另一种方法：通过指定您自己的自定义变化点位置。我们将查看一个新的数据集来探讨这个主题，足球运动员詹姆斯·罗德里格斯的Instagram账户`@jamesrodriguez10`。这些数据是在2019年11月22日收集的。
- en: Specifying custom changepoint locations
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 指定自定义变化点位置
- en: 'James Rodríguez is a Colombian soccer player who played in both the 2014 and
    2018 World Cups. He was a standout player in both World Cups but won the Golden
    Boot award in 2014 for scoring more goals than any other player in the competition.
    I chose his account because it exhibits some very interesting behavior that would
    be extremely difficult to model without changepoints:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 詹姆斯·罗德里格斯是一位哥伦比亚足球运动员，他参加了2014年和2018年的世界杯。他在两次世界杯中都表现出色，但在2014年因进球数超过其他任何参赛球员而赢得了金靴奖。我选择他的账户，因为它展示了一些非常有趣的行为，这些行为在没有变化点的情况下将非常难以建模：
- en: '![Figure 8.10 – James Rodríguez’s Instagram likes per day](img/Fig_8.10.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![图8.10 – 詹姆斯·罗德里格斯每日Instagram点赞数](img/Fig_8.10.jpg)'
- en: Figure 8.10 – James Rodríguez’s Instagram likes per day
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.10 – 詹姆斯·罗德里格斯每日Instagram点赞数
- en: The number of likes his Instagram posts get is gradually increasing over time,
    but there have been two notable spikes, in the summers of 2014 and 2018 when he
    was playing in the World Cup. It is clear that the spike in 2014 resulted in a
    significant trend change. The number of likes that his posts were getting increased
    dramatically during the World Cup and dropped afterward, but not to the same baseline
    as before. He gained a large number of new followers during this period and consistently
    earned more likes per post as a result.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 他Instagram帖子获得的点赞数随着时间的推移逐渐增加，但有两个值得注意的峰值，分别在2014年和2018年夏季，那时他正在参加世界杯。很明显，2014年的峰值导致了显著的趋势变化。他在世界杯期间帖子获得的点赞数大幅增加，之后有所下降，但没有回到之前的基线。在此期间，他获得了大量新粉丝，并且每篇帖子的点赞数持续增加。
- en: Similarly, in 2018, his profile saw a large summer spike in likes during the
    World Cup, but it is not clear that there was a significant trend change after
    the tournament ended. Also, you can see another spike in the summer of 2017\.
    On July 11 of that year, Rodríguez announced that he had signed with a new team,
    Bayern Munich. We’ll include this fact in our model as well.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，在2018年，他的个人资料在世界杯期间夏季的点赞量大幅上升，但比赛结束后并不清楚是否存在显著的趋势变化。此外，你还可以看到2017年夏季的另一个峰值。在那一年7月11日，罗德里格斯宣布他已与拜仁慕尼黑队签约。我们也将这一事实纳入我们的模型中。
- en: To model this behavior, we need to first account for the special events of the
    World Cups and the new team announcement. We will do this by creating custom holidays
    for them. And second, we need to account for the trend changes; we’ll accomplish
    this by setting custom trend changepoints. There does not appear to be much seasonality
    in the data so to simplify our model, we’ll just instruct Prophet not to fit any.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 为了模拟这种行为，我们首先需要考虑世界杯的特殊事件以及新球队的公告。我们将通过为它们创建自定义假日来实现这一点。其次，我们需要考虑趋势变化；我们将通过设置自定义趋势变化点来完成这项工作。数据中似乎没有太多季节性，为了简化我们的模型，我们将指示Prophet不要拟合任何。
- en: 'We already have our necessary imports completed, so we first need to load the
    data into our Prophet DataFrame:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经完成了必要的导入，因此我们首先需要将数据加载到我们的Prophet DataFrame中：
- en: '[PRE8]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Next, we need to create a DataFrame for the special events. This is the same
    procedure you learned about in [*Chapter 6*](B19630_06.xhtml#_idTextAnchor375),
    *Forecasting Holiday Effects*. We have three events to add in this case: the 2014
    World Cup, the 2017 signing for Bayern Munich, and the 2018 World Cup. Each event
    must have a name in the `''holiday''` column and the date in the `''``ds''` column.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要为特殊事件创建一个DataFrame。这与你在[*第6章*](B19630_06.xhtml#_idTextAnchor375)，*预测假日效应*中学习到的相同程序。在这种情况下，我们需要添加三个事件：2014年世界杯、2017年为拜仁慕尼黑签约，以及2018年世界杯。每个事件必须在`'holiday'`列中有一个名称，在`'ds'`列中有一个日期。
- en: 'The two World Cups took place over 31 days each, so we’ll specify the first
    date and set `''upper_window''` to `31`. We’ll leave `''lower_window''` at `0`.
    For the last event, signing with a new team, we’ll add a two-week window to generously
    assume that the effect of signing for Bayern Munich impacted his posts for the
    next several days:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 两次世界杯都持续了31天，因此我们将指定第一个日期并将`'upper_window'`设置为`31`。我们将`'lower_window'`保持为`0`。对于最后一个事件，与一支新球队签约，我们将添加两周的窗口，以便慷慨地假设签约拜仁慕尼黑的影响将持续影响他的帖子几天：
- en: '[PRE9]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now, we need to specify our custom changepoints. We can simply pass Prophet
    a list of dates. Any date that pandas recognizes as a valid date-time format can
    be used:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要指定我们的自定义变化点。我们可以简单地传递Prophet一个日期列表。任何pandas识别为有效日期时间格式的日期都可以使用：
- en: '[PRE10]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: For each of those special events, we add one potential changepoint at the beginning
    of the event and one at the end. The rationale behind this decision is that we
    need to account for the fact that the number of likes per photo will follow a
    certain trend, proportional to the number of followers of the account until the
    trend is upset by a special event.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这些特殊事件中的每一个，我们在事件开始时添加一个潜在变化点，在事件结束时添加一个。这个决定的理由是我们需要考虑到每张照片的点赞数将遵循某种趋势，这种趋势与账户的关注者数量成比例，直到趋势被特殊事件打破。
- en: During the special event, the number of followers will increase at a much higher
    rate, and so the number of likes per photo will also increase, requiring a new
    trend line. After the event concludes, the dramatic rate of new followers will
    slow, so we need a third trend line at this point—resulting in three different
    trend slopes with two trend changepoints connecting them.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在特殊事件期间，关注者的数量将以更高的速度增加，因此每张照片的点赞数也将增加，需要一条新的趋势线。在活动结束后，新关注者的增加速度将显著放缓，因此我们需要在这个时候添加第三条趋势线——结果是三条不同的趋势斜率，由两个趋势变化点将它们连接起来。
- en: With our special events created and our potential changepoints determined, we
    next instantiate our Prophet object while passing it these special events and
    changepoints. For this example, we’ll set the seasonality to multiplicative. This
    is count data and as discussed in [*Chapter 5*](B19630_05.xhtml#_idTextAnchor254),
    *Working with Seasonality*, count data is often multiplicative.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建特殊事件并确定潜在变化点后，我们接下来实例化Prophet对象，同时传递这些特殊事件和变化点。在这个例子中，我们将季节性设置为乘法。这是计数数据，如[*第5章*](B19630_05.xhtml#_idTextAnchor254)，*处理季节性*中讨论的那样，计数数据通常是乘法的。
- en: However, there is an argument for using additive seasonality in this case—it
    is possible that the increased likes came from non-followers who visited Rodríguez’s
    profile due to the World Cup but did not subsequently follow, which would be an
    additive effect, as opposed to increased activity from current followers, possibly
    due to Instagram’s algorithmic feed ordering, which would be a multiplicative
    effect. In either case, the following procedure is the same.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在这个案例中使用加性季节性是有道理的——有可能增加的点赞数来自因世界杯而访问罗德里格斯个人资料的未关注者，但他们并没有随后关注，这将是一个加性效应，而不是来自当前关注者的活动增加，这可能是由于Instagram的算法性信息流排序，这将是一个乘性效应。在任何情况下，以下程序都是相同的。
- en: We decided to simplify our model by removing seasonalities, so we’ll set both
    `yearly_seasonality` and `weekly_seasonality` to `False`. You may be wondering
    why we bothered to set `seasonality_mode` if we don’t have any seasonalities—this
    is because `seasonality_mode` affects holidays as well.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '我们决定通过去除季节性来简化我们的模型，因此我们将`yearly_seasonality`和`weekly_seasonality`都设置为`False`。你可能想知道为什么我们没有季节性还要设置`seasonality_mode`——这是因为`seasonality_mode`也会影响节假日。 '
- en: 'Finally, we set the prior scale for the changepoints to `1` because we want
    to loosen the regularization a bit (feel free to experiment on your own with this
    number; I found the default to be too restrictive on this data), and pass our
    list of changepoints to the `changepoints` argument:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将变化点的先验尺度设置为`1`，因为我们想稍微放松一下正则化（你可以自由地尝试这个数字；我发现默认值对这份数据来说过于严格），并将我们的变化点列表传递给`changepoints`参数：
- en: '[PRE11]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We will now continue as in the previous examples by calling the `fit` and `predict`
    methods on our model. We are not predicting the future in this example, but if
    you wanted to, you would need to add any future special events that you expected.
    Lastly, let’s plot both our forecast and our components to observe the results:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将继续像之前的例子一样，通过调用模型的`fit`和`predict`方法来继续。在这个例子中，我们不是在预测未来，但如果你想要预测，你需要添加任何你预期的未来特殊事件。最后，让我们绘制我们的预测和成分图来观察结果：
- en: '[PRE12]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'First up is our forecast:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，是我们的预测：
- en: '![Figure 8.11 – James Rodríguez forecast](img/Fig_8.11.jpg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![图8.11 – 詹姆斯·罗德里格斯预测](img/Fig_8.11.jpg)'
- en: Figure 8.11 – James Rodríguez forecast
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.11 – 詹姆斯·罗德里格斯预测
- en: 'Despite the simplifications we made in our model, the trend is a remarkably
    good fit. Now, let’s look at our components plot:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们在模型中做了简化，但趋势与数据拟合得非常好。现在，让我们看看我们的成分图：
- en: "![Figure 8.12 – James Rodríguez co\uFEFFmponents plot](img/Fig_8.12.jpg)"
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![图8.12 – 詹姆斯·罗德里格斯成分图](img/Fig_8.12.jpg)'
- en: Figure 8.12 – James Rodríguez components plot
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.12 – 詹姆斯·罗德里格斯成分图
- en: You can see from the **holidays** plot that both World Cups provided a roughly
    200% increase in likes per post on James Rodríguez’s account. When he signed for
    Bayern Munich, he saw a more modest, though still impressive, doubling of likes.
    And the trend line reflects these changes.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 从**节假日**图中可以看出，两次世界杯都为詹姆斯·罗德里格斯账户的每篇帖子带来了大约200%的点赞数增长。当他签约拜仁慕尼黑时，他看到了一个更加适度但仍然令人印象深刻的点赞数翻倍。趋势线反映了这些变化。
- en: During each World Cup, he saw a rapid rise in the number of likes per post before
    the rate of increase of likes slowed while maintaining a higher baseline than
    before the event. Prophet determined that two changepoints before and after each
    World Cup were necessary but found that the new team announcement made only one
    significant change to the trend.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在每次世界杯期间，他在帖子上的点赞数迅速增加，而点赞数的增长速度放缓，但保持了比事件之前更高的基线。Prophet确定在每个世界杯前后需要两个变化点，但发现新球队的公告只对趋势产生了显著的影响。
- en: There is one more way to handle changepoint locations, a hybrid technique blending
    custom changepoints with Prophet’s default behavior. With this method, you would
    create an evenly spaced grid of changepoints, as Prophet does by default, and
    enrich it with your custom changepoints. Let’s squeeze in one more example to
    see how to do this.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 处理变化点位置还有另一种方法，这是一种混合技术，将自定义变化点与Prophet的默认行为相结合。使用这种方法，你会创建一个均匀分布的变化点网格，就像Prophet默认做的那样，并用你的自定义变化点来丰富它。让我们再举一个例子来看看如何做到这一点。
- en: 'In Prophet’s source code, there is a class method for creating the grid of
    potential changepoints called `set_changepoints`. This method is called automatically
    during the `fit` command if no changepoints have already been specified. The following
    function mimics that `set_changepoints` method to allow us to create a grid of
    potential changepoints outside the Prophet class. We will also need to import
    the `numpy` library for use in this function:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Prophet 的源代码中，有一个创建潜在变化点网格的类方法，称为 `set_changepoints`。如果在 `fit` 命令中没有指定变化点，这个方法会在自动调用。以下函数模仿了
    `set_changepoints` 方法，使我们能够在 Prophet 类外部创建潜在变化点网格。我们还需要导入 `numpy` 库来在这个函数中使用：
- en: '[PRE13]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This function requires three arguments. The first is your Prophet DataFrame
    with the `'ds'` and `'y'` columns. The second argument is the number of changepoints
    to create, defaulting to the same value of `25` as Prophet uses, and the third
    argument is the changepoint range, again defaulting to Prophet’s value of `0.8`.
    This returns a pandas series of potential changepoint locations. You simply then
    append your custom changepoints to it.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数需要三个参数。第一个是你的 Prophet DataFrame，包含 `'ds'` 和 `'y'` 列。第二个参数是要创建的变化点数量，默认值与
    Prophet 使用的相同，为 `25`，第三个参数是变化点范围，同样默认为 Prophet 的 `0.8`。这将返回一个包含潜在变化点位置的 pandas
    系列对象。你只需将你的自定义变化点追加到它上面即可。
- en: 'Using this function, let’s create five evenly spaced changepoints in the first
    80% of the data, and then enrich the automatic changepoints with our six special
    event changepoints from the previous example:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个函数，让我们在数据的第一个 80% 中创建五个等间距的变化点，然后使用前一个例子中的六个特殊事件变化点丰富自动变化点：
- en: '[PRE14]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now, let’s recreate our previous model, but this time, send it our new list
    of changepoints:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们重新创建我们之前的模型，但这次，发送我们新的变化点列表：
- en: '[PRE15]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'And now we can see that Prophet has used many more changepoints than before:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以看到 Prophet 使用的变化点比以前多得多：
- en: "![Figure 8.13 – Forecast with hybrid automatic/manual potential changepoints\uFEFF\
    ](img/Fig_8.13.jpg)"
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.13 – 使用混合自动/手动潜在变化点的预测](img/Fig_8.13.jpg)'
- en: Figure 8.13 – Forecast with hybrid automatic/manual potential changepoints
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.13 – 使用混合自动/手动潜在变化点的预测
- en: We also have a trend line that is very flexible; perhaps it is overfitting.
    That is something for you, the analyst, to determine, but as a demonstration of
    how to blend your own custom changepoints with an automatically selected grid
    of potential changepoints, this example will suffice.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还有一个非常灵活的趋势线；也许它过度拟合了。这是你需要，作为分析师，去确定的事情，但作为如何将你自己的自定义变化点与自动选择的潜在变化点网格结合的演示，这个例子就足够了。
- en: Summary
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned how to control the fit of the trend line by using
    changepoints. First, you used Divvy data to see how Prophet automatically selects
    potential changepoint locations and how you can control this by modifying the
    default number of potential changepoints and the changepoint range.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何通过使用变化点来控制趋势线的拟合。首先，你使用了 Divvy 数据来查看 Prophet 如何自动选择潜在变化点位置，以及你如何通过修改默认的潜在变化点数量和变化点范围来控制这一点。
- en: Then, you learned a more robust way to control Prophet’s changepoint selection
    through regularization. Just as with seasonality and holidays, changepoints are
    regularized by setting the prior scale. You then looked at the Instagram data
    of James Rodríguez and learned how to model the increase in likes per post he
    received both during and after the World Cups of 2014 and 2018\. Finally, you
    learned how to blend these two techniques and enrich an automatically selected
    grid of potential changepoints with your custom changepoint locations.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你学习了一种更稳健的方式来通过正则化控制 Prophet 的变化点选择。就像季节性和节假日一样，变化点通过设置先验尺度进行正则化。接着，你研究了詹姆斯·罗德里格斯在
    Instagram 上的数据，学习了如何在 2014 年和 2018 年世界杯期间及之后如何对他收到的每条帖子的点赞数进行建模。最后，你学习了如何将这两种技术结合起来，并用你自定义的变化点丰富自动选择的潜在变化点网格。
- en: In the next chapter, we will again look at the Divvy data, but this time, we’ll
    include the additional columns for temperature and weather conditions in order
    to learn how to include additional regressors in a Prophet forecast.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们再次查看 Divvy 数据，但这次，我们将包括温度和天气条件等附加列，以便学习如何在 Prophet 预测中包含额外的回归因子。
