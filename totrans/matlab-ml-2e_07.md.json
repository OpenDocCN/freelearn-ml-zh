["```py\n    ImdbData = readtable(\"ImdbDataset.xlsx\",'TextType','string');\n    ImdbData.Class = categorical(ImdbData.Class);\n    ```", "```py\n    figure\n    histogram(ImdbData.Class);\n    xlabel(\"Class\")\n    ylabel(\"Frequency\")\n    title(\"Class Distribution\")\n    ```", "```py\n    DataSplitting = cvpartition(ImdbData.Class,'Holdout',0.3);\n    ```", "```py\n    TrainDataset = ImdbData (training(DataSplitting),:);\n    TestDataset = ImdbData (test(DataSplitting),:);\n    ```", "```py\n    TrainReview = TrainDataset.Review;\n    TestReview = TestDataset.Review;\n    TrainClass = TrainDataset.Class;\n    TestClass = TestDataset.Class;\n    ```", "```py\n    TrainDoc = preprocessText(TrainReview);\n    TestDoc = preprocessText(TestReview);\n    ```", "```py\n    EncText = wordEncoding(TrainDoc);\n    ```", "```py\n    NumDoc = doclength(TrainDoc);\n    figure\n    histogram(NumDoc)\n    xlabel(\"Number of tokens\")\n    ylabel(\"Number of Reviews\")\n    ```", "```py\nTokNum = 30;\n```", "```py\n    RewTrain = doc2sequence(EncText,TrainDoc,'Length',TokNum);\n    RewTest = doc2sequence(EncText,TestDoc,'Length',TokNum);\n    ```", "```py\n    inputSize = 1;\n    embeddingDimension = 150;\n    numHiddenUnits = 50;\n    numWords = EncText.NumWords;\n    numClasses = numel(categories(TrainClass));\n    layers = [ ...\n        sequenceInputLayer(inputSize)\n        wordEmbeddingLayer(embeddingDimension,numWords)\n        lstmLayer(numHiddenUnits,'OutputMode','last')\n        fullyConnectedLayer(numClasses)\n        softmaxLayer\n        classificationLayer]\n    ```", "```py\n    layers =\n    6×1 Layer array with layers:\n    1   ''   Sequence Input          Sequence input with 1 dimensions\n    2   ''   Word Embedding Layer    Word embedding layer with 150 dimensions and 2410 unique words\n    3   ''   LSTM                    LSTM with 50 hidden units\n    4   ''   Fully Connected         2 fully connected layer\n    5   ''   Softmax                 softmax\n    6   ''   Classification Output   crossentropyex\n    ```", "```py\n    options = trainingOptions('adam', ...\n        'MiniBatchSize',16, ...\n        'GradientThreshold',2, ...\n        'Shuffle','every-epoch', ...\n        'ValidationData',{RewTest,TestClass}, ...\n        'Plots','training-progress', ...\n        'Verbose',false);\n    ```", "```py\n    LSTMNet = trainNetwork(RewTrain,TrainClass,layers,options);\n    ```"]