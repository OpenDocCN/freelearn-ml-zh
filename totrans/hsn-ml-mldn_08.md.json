["```py\nlaptop,2019-11-14T11:13:23,1500\nlaptop,2019-11-15T11:13:23,1000\nlaptop,2019-11-16T11:13:23,1100\nlaptop,2019-11-17T11:13:23,1600\nlaptop,2019-11-18T11:13:23,1000\nlaptop,2019-11-19T11:13:23,1100\nlaptop,2019-11-20T11:13:23,1000\nlaptop,2019-11-21T11:13:23,1000\n```", "```py\nlaptop,2019-11-22T11:13:23,1000\nlaptop,2019-11-23T11:13:23,1100\nlaptop,2019-11-24T11:13:23,1200\nlaptop,2019-11-25T11:13:23,1300\nlaptop,2019-11-26T11:13:23,1400\nlaptop,2019-11-27T11:13:23,3000\nlaptop,2019-11-28T11:13:23,1500\nlaptop,2019-11-29T11:13:23,1600\n```", "```py\nusing System;\n\nusing Microsoft.ML.Data;\n\nnamespace chapter06.ML.Objects\n{\n    public class NetworkTrafficHistory\n    {\n        [LoadColumn(0)]\n        public string HostMachine { get; set; }\n\n        [LoadColumn(1)]\n        public DateTime Timestamp { get; set; }\n\n        [LoadColumn(2)] \n        public float BytesTransferred { get; set; }\n    }\n}\n```", "```py\nusing Microsoft.ML.Data;\n\nnamespace chapter06.ML.Objects\n{\n    public class NetworkTrafficPrediction\n    {\n        [VectorType(3)]\n        public double[] Prediction { get; set; }\n    }\n}\n```", "```py\nvar predictionEngine = MlContext.Model.CreatePredictionEngine<NetworkTrafficHistory, NetworkTrafficPrediction>(mlModel);\n```", "```py\nvar inputData = MlContext.Data.LoadFromTextFile<NetworkTrafficHistory>(inputDataFile, separatorChar: ',');\n```", "```py\nvar rows = MlContext.Data.CreateEnumerable<NetworkTrafficHistory>(inputData, false);\n```", "```py\n    Console.WriteLine($\"Based on input file ({inputDataFile}):\");\n\n    foreach (var row in rows)\n    {\n        var prediction = predictionEngine.Predict(row);\n\n        Console.Write($\"HOST: {row.HostMachine} TIMESTAMP: {row.Timestamp} TRANSFER: {row.BytesTransferred} \");\n        Console.Write($\"ALERT: {prediction.Prediction[0]} SCORE: {prediction.Prediction[1]:f2} P-VALUE: {prediction.Prediction[2]:F2}{Environment.NewLine}\");\n    }\n    ```", "```py\n    private const int PvalueHistoryLength = 3;\n    private const int SeasonalityWindowSize = 3;\n    private const int TrainingWindowSize = 7;\n    private const int Confidence = 98;\n    ```", "```py\n    var trainingDataView = GetDataView(trainingFileName);\n    ```", "```py\n    var trainingPipeLine = MlContext.Transforms.DetectSpikeBySsa(\n        nameof(NetworkTrafficPrediction.Prediction),\n        nameof(NetworkTrafficHistory.BytesTransferred),\n        confidence: Confidence,\n        pvalueHistoryLength: PvalueHistoryLength,\n        trainingWindowSize: TrainingWindowSize,\n        seasonalityWindowSize: SeasonalityWindowSize);\n    ```", "```py\n    ITransformer trainedModel = trainingPipeLine.Fit(trainingDataView);\n\n    MlContext.Model.Save(trainedModel, trainingDataView.Schema, ModelPath);\n\n    Console.WriteLine(\"Model trained\");\n    ```", "```py\n    if (args.Length < 2)\n    {\n        Console.WriteLine($\"Invalid arguments passed in, exiting.{Environment.NewLine}{Environment.NewLine}Usage:{Environment.NewLine}\" +\n                          $\"predict <path to input file>{Environment.NewLine}\" +\n                          $\"or {Environment.NewLine}\" +\n                          $\"train <path to training data file>{Environment.NewLine}\");\n\n        return;\n    }\n    ```", "```py\n    switch (args[0])\n    {\n        case \"predict\":\n            new Predictor().Predict(args[1]);\n            break;\n        case \"train\":\n            new Trainer().Train(args[1]);\n            break;\n        default:\n            Console.WriteLine($\"{args[0]} is an invalid option\");\n            break;\n    }\n    ```", "```py\n    PS chapter06-time-series\\bin\\Debug\\netcoreapp3.0> .\\chapter06-time-series.exe train ..\\..\\..\\Data\\sampledata.csv\n    Model trained\n    ```", "```py\n    PS bin\\debug\\netcoreapp3.0> .\\chapter06-time-series.exe predict ..\\..\\..\\Data\\testdata.csv\n    Based on input file (..\\..\\..\\Data\\testdata.csv):\n    HOST: laptop TIMESTAMP: 11/22/2019 11:13:23 AM TRANSFER: 1000 ALERT: 0 SCORE: 46.07 P-VALUE: 0.50\n    HOST: laptop TIMESTAMP: 11/23/2019 11:13:23 AM TRANSFER: 1100 ALERT: 0 SCORE: 131.36 P-VALUE: 0.00\n    HOST: laptop TIMESTAMP: 11/24/2019 11:13:23 AM TRANSFER: 1200 ALERT: 0 SCORE: 180.44 P-VALUE: 0.06\n    HOST: laptop TIMESTAMP: 11/25/2019 11:13:23 AM TRANSFER: 1300 ALERT: 0 SCORE: 195.42 P-VALUE: 0.17\n    HOST: laptop TIMESTAMP: 11/26/2019 11:13:23 AM TRANSFER: 1400 ALERT: 0 SCORE: 201.15 P-VALUE: 0.22\n    HOST: laptop TIMESTAMP: 11/27/2019 11:13:23 AM TRANSFER: 3000 ALERT: 1 SCORE: 1365.42 P-VALUE: 0.00\n    HOST: laptop TIMESTAMP: 11/28/2019 11:13:23 AM TRANSFER: 1500 ALERT: 0 SCORE: -324.58 P-VALUE: 0.11\n    HOST: laptop TIMESTAMP: 11/29/2019 11:13:23 AM TRANSFER: 1600 ALERT: 0 SCORE: -312.93 P-VALUE: 0.25\n    ```", "```py\n    0,1,0,1,1,0\n    0,1,0,1,1,0\n    0,0,1,0,1,0\n    0,0,1,0,1,0\n    0,0,1,1,0,1\n    1,1,0,1,1,0\n    1,1,0,1,1,0\n    1,0,1,0,1,0\n    1,0,1,0,1,1\n    1,0,1,1,0,0\n    ```", "```py\n    0,1,0,1,1,0\n    0,1,0,1,1,0\n    0,0,1,0,1,0\n    0,0,1,0,1,0\n    0,0,1,1,0,1\n    1,1,0,1,1,0\n    1,1,0,1,1,0\n    1,0,1,0,1,0\n    1,0,1,0,1,1\n    1,0,1,1,0,0\n    ```", "```py\n    namespace chapter06.Common\n    {\n        public class Constants\n        {\n            public const string MODEL_FILENAME = \"chapter6.mdl\";\n\n            public const string SAMPLE_DATA = \"sampledata.csv\";\n\n            public const string TEST_DATA = \"testdata.csv\";\n        }\n    }\n    ```", "```py\n    using Microsoft.ML.Data;\n\n    namespace chapter06.ML.Objects\n    {\n        public class LoginHistory\n        {\n            [LoadColumn(0)]\n            public float UserID { get; set; }\n\n            [LoadColumn(1)]\n            public float CorporateNetwork { get; set; }\n\n            [LoadColumn(2)] \n            public float HomeNetwork { get; set; }\n\n            [LoadColumn(3)] \n            public float WithinWorkHours { get; set; }\n\n            [LoadColumn(4)] \n            public float WorkDay { get; set; }\n\n            [LoadColumn(5)] \n            public float Label { get; set; }\n        }\n    }\n    ```", "```py\n    namespace chapter06.ML.Objects\n    {\n        public class LoginPrediction\n        {\n            public float Label;\n\n            public float Score;\n\n            public bool PredictedLabel;\n        }\n    }\n    ```", "```py\n    var predictionEngine = MlContext.Model.CreatePredictionEngine<LoginHistory, LoginPrediction>(mlModel);     \n    ```", "```py\n    var json = File.ReadAllText(inputDataFile);\n    ```", "```py\n    var prediction = predictionEngine.Predict(JsonConvert.DeserializeObject<LoginHistory>(json));\n\n    Console.WriteLine(\n                        $\"Based on input json:{System.Environment.NewLine}\" +\n                        $\"{json}{System.Environment.NewLine}\" + \n                        $\"The login history is {(prediction.PredictedLabel ? \"abnormal\" : \"normal\")}, with a {prediction.Score:F2} outlier score\");\n    ```", "```py\n    private (IDataView DataView, IEstimator<ITransformer> Transformer) GetDataView(string fileName, bool training = true)\n    {\n        var trainingDataView = MlContext.Data.LoadFromTextFile<LoginHistory>(fileName, ',');\n\n        if (!training)\n        {\n            return (trainingDataView, null);\n        }\n\n        IEstimator<ITransformer> dataProcessPipeline = MlContext.Transforms.Concatenate(\n            FEATURES, \n            typeof(LoginHistory).ToPropertyList<LoginHistory>(nameof(LoginHistory.Label)));\n\n        return (trainingDataView, dataProcessPipeline);\n    }\n    ```", "```py\n    var trainingDataView = GetDataView(trainingFileName);\n\n    var options = new RandomizedPcaTrainer.Options\n    {\n        FeatureColumnName = FEATURES,\n        ExampleWeightColumnName = null,\n        Rank = 5,\n        Oversampling = 20,\n        EnsureZeroMean = true,\n        Seed = 1\n    };\n\n    ```", "```py\n    IEstimator<ITransformer> trainer = MlContext.AnomalyDetection.Trainers.RandomizedPca(options: options);\n\n    EstimatorChain<ITransformer> trainingPipeline = trainingDataView.Transformer.Append(trainer);\n\n    TransformerChain<ITransformer> trainedModel = trainingPipeline.Fit(trainingDataView.DataView);\n\n    MlContext.Model.Save(trainedModel, trainingDataView.DataView.Schema, ModelPath);\n    ```", "```py\n    var testingDataView = GetDataView(testingFileName, true);\n\n    var testSetTransform = trainedModel.Transform(testingDataView.DataView);\n\n    var modelMetrics = MlContext.AnomalyDetection.Evaluate(testSetTransform);\n    ```", "```py\n    Console.WriteLine($\"Area Under Curve: {modelMetrics.AreaUnderRocCurve:P2}{Environment.NewLine}\" +\n                      $\"Detection at FP Count: {modelMetrics.DetectionRateAtFalsePositiveCount}\");\n    ```", "```py\n    PS chapter06\\bin\\Debug\\netcoreapp3.0> .\\chapter06.exe train ..\\..\\..\\Data\\sampledata.csv ..\\..\\..\\Data\\testdata.csv \n    Area Under Curve: 78.12%\n    Detection at FP Count: 1\n    ```", "```py\n    PS chapter06\\bin\\Debug\\netcoreapp3.0> .\\chapter06.exe predict input.json \n    Based on input json:\n    {\n     \"UserID\": 0, \"CorporateNetwork\": 1, \"HomeNetwork\": 0, \"WithinWorkHours\": 1, \"WorkDay\": 1\n    }\n    The login history is normal, with a 0% score\n    ```"]