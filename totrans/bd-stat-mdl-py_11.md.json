["```py\nfrom statsmodels.graphics.tsaplots import plot_acf, plot_pacf\nimport matplotlib.pyplot as plt\nimport statsmodels.api as sm\nimport numpy as np\narparams = np.array([0.5])\nar = np.r_[1, -arparams]\nar_process = sm.tsa.ArmaProcess(ar)\ny = ar_process.generate_sample(nsample=200)\n```", "```py\nar_process.arroots\n```", "```py\nar_process.isstationary\n```", "```py\nfig, ax = plt.subplots(1,3, figsize=(20,5))\nax[0].set_title('Realization')\nax[0].plot(y)\nplot_acf(y, alpha=0.05, lags=50, ax=ax[1])\nax[1].set_title('ACF')\nplot_pacf(y, alpha=0.05, lags=50, ax=ax[2])\nax[2].set_title('PACF')\n```", "```py\narparams = np.array([-0.8, -0.48])\nar = np.r_[1, -arparams]\nar_process = sm.tsa.ArmaProcess(ar)\nprint('AR(2) Roots: ', ar_process.arroots)\nprint('AR(2) Stationarity: ', ar_process.isstationary)\n```", "```py\narparams = np.array([1.59, -0.544, -0.511, 0.222])\nar = np.r_[1, -arparams]\nar_process = sm.tsa.ArmaProcess(ar)\ny = ar_process.generate_sample(nsample=200)\n```", "```py\nfrom statsmodels.tsa.stattools import adfuller\ndicky_fuller = adfuller(y, maxlag=25, regression='c')\nprint('Dickey-Fuller p-value: ', dicky_fuller[1])\nprint('Dickey-Fuller test statistic: ', dicky_fuller[0])\nprint('Dickey-Fuller critical value: ', dicky_fuller[4].get('5%'))\n```", "```py\nfrom statsmodels.tsa.stattools import arma_order_select_ic\nmodel_ar = arma_order_select_ic(y=y, max_ar=4, max_ma=0,\n                                ic=['aic','bic'], trend='n')\nprint('AIC Order Selection: ', model_ar.aic_min_order)\nprint('AIC Error: ', round(model_ar.aic.min()[0], 3))\nprint('BIC Order Selection: ', model_ar.bic_min_order)\nprint('BIC Error: ', round(model_ar.bic.min()[0], 3))\n```", "```py\nfrom statsmodels.tsa.arima.model import ARIMA\nar_aic = ARIMA(y, order=(4,0,0),\n               enforce_stationarity=True).fit()\nprint(ar_aic.summary())\n```", "```py\ndf_pred = ar_aic.get_prediction(start=195, end=199).summary_frame(alpha=0.05)\ndf_pred.index=[195,196,197,198,199] # reindexing for 0 index\n```", "```py\nfig, ax = plt.subplots(1,1,figsize=(20,5))\nax.plot(y, marker='o', markersize=5)\nax.plot(df_pred['mean'], marker='o', markersize=4)\nax.plot(df_pred['mean_ci_lower'], color='g')\nax.plot(df_pred['mean_ci_upper'], color='g')\nax.fill_between(df_pred.index, df_pred['mean_ci_lower'], df_pred['mean_ci_upper'], color='g', alpha=0.1)\nax.set_title('Test Forecast for AR(4)')\n```", "```py\ndf_forecast = ar_aic.get_prediction(start=200, end=204).summary_frame(alpha=0.05)\ndf_forecast.index=[200, 201, 202, 203, 204]\nforecast = np.hstack([np.repeat(np.nan, len(y)), df_pred['mean']])\n```", "```py\nfrom statsmodels.graphics.tsaplots import plot_acf, plot_pacf\nimport matplotlib.pyplot as plt\nimport statsmodels.api as sm\nimport numpy as np\nmaparams = np.array([0.8])\nma = np.r_[1, -maparams]\nma_process = sm.tsa.ArmaProcess(ma=ma)\nprint('MA(1) Roots: ', ma_process.maroots)\nprint('MA(1) Invertibility: ', ma_process.isinvertible)\n```", "```py\nmaparams = np.array([1.6, -0.9])\nma = np.r_[1, -maparams]\nma_process = sm.tsa.ArmaProcess(ma=ma)\nprint('MA(2) Roots: ', ma_process.maroots)\nprint('MA(2) Invertibility: ', ma_process.isinvertible)\n```", "```py\narparams = np.array([1.2, -0.6])\nar = np.r_[1, -arparams]\nmaparams = np.array([0.5])\nma = np.r_[1, -maparams]\narma_process = sm.tsa.ArmaProcess(ar=ar, ma=ma)\n```", "```py\nprint('AR(2) Roots: ', arma_process.arroots)\nprint('AR(2) Invertibility: ', arma_process.isstationary)\nprint('MA(1) Roots: ', arma_process.maroots)\nprint('MA(1) Invertibility: ', arma_process.isinvertible)\n```", "```py\ny = arma_process.generate_sample(nsample=200)\n```", "```py\nfrom statsmodels.tsa.stattools import adfuller\ndicky_fuller = adfuller(y, maxlag=25, regression='c')\nprint('Dickey-Fuller p-value: ', dicky_fuller[1])\nprint('Dickey-Fuller test statistic: ', dicky_fuller[0])\nprint('Dickey-Fuller critical value: ', dicky_fuller[4].get('5%'))\n```", "```py\nfrom statsmodels.tsa.stattools import arma_order_select_ic\nmodel_arma = arma_order_select_ic(y=y, max_ar=4, max_ma=1, ic=['aic','bic'], trend='n')\nprint('AIC Order Selection: ', model_arma.aic_min_order)\nprint('AIC Error: ', round(model_arma.aic.min()[0], 3))\nprint('BIC Order Selection: ', model_arma.bic_min_order)\nprint('BIC Error: ', round(model_arma.bic.min()[0], 3))\n```", "```py\nfrom statsmodels.tsa.arima.model import ARIMA\narma_aic = ARIMA(y, order=(4,0,1),\n                 enforce_stationarity=True, enforce_invertibility=True).fit()\nprint(arma_aic.summary())\n```", "```py\nfrom statsmodels.tsa.arima.model import ARIMA\narma_aic = ARIMA(y, order=(2,0,1),\n                 enforce_stationarity=True, enforce_invertibility=True).fit()\nprint(arma_aic.summary())\n```", "```py\ndf_pred = arma_aic.get_prediction(start=195, end=199).summary_frame(alpha=0.05)\ndf_pred.index=[195,196,197,198,199]\n```", "```py\nprint('Average Squared Error: ', np.mean((df_pred['mean'] - y[195:])**2))\n```", "```py\ndf_forecast = arma_aic.get_prediction(start=200, end=204).summary_frame(alpha=0.05)\ndf_forecast.index=[200, 201, 202, 203, 204]\nforecast = np.hstack([np.repeat(np.nan, len(y)), df_pred['mean']])\n```", "```py\nImport pmdarima as pm\nfrom sktime import datasets\ny_macro_economic = datasets.load_macroeconomic()\nadf_test = pm.arima.ADFTest()\nadf_test.should_diff(y_macro_economic.realgdp.values)\n# (0.7423236714537164, True)\n```", "```py\nfirst_diff = np.diff(y_macro_economic.realgdp.values, n=1)\n```", "```py\nfirst_diff = np.diff(y_macro_economic.realgdp.values, n=1)\nadf_test.should_diff(first_diff)\n# (0.01, False)\n```", "```py\npm.auto_arima(\n    first_diff, error_action='ignore', trace=True,\n    suppress_warnings=True, maxiter=5, seasonal=False,\n    test='adf'\n)\nPerforming stepwise search to minimize aic\n ARIMA(2,0,2)(0,0,0)[0]             : AIC=2207.388, Time=0.03 sec\n ARIMA(0,0,0)(0,0,0)[0]             : AIC=2338.346, Time=0.01 sec\n ARIMA(1,0,0)(0,0,0)[0]             : AIC=2226.760, Time=0.02 sec\n ARIMA(0,0,1)(0,0,0)[0]             : AIC=2284.220, Time=0.01 sec\n ARIMA(1,0,2)(0,0,0)[0]             : AIC=2206.365, Time=0.02 sec\n ARIMA(0,0,2)(0,0,0)[0]             : AIC=2253.267, Time=0.02 sec\n ARIMA(1,0,1)(0,0,0)[0]             : AIC=2203.917, Time=0.01 sec\n ARIMA(2,0,1)(0,0,0)[0]             : AIC=2208.521, Time=0.02 sec\n ARIMA(2,0,0)(0,0,0)[0]             : AIC=2208.726, Time=0.02 sec\n ARIMA(1,0,1)(0,0,0)[0] intercept   : AIC=2193.482, Time=0.04 sec\n ARIMA(0,0,1)(0,0,0)[0] intercept   : AIC=2208.669, Time=0.03 sec\n ARIMA(1,0,0)(0,0,0)[0] intercept   : AIC=2195.212, Time=0.02 sec\n ARIMA(2,0,1)(0,0,0)[0] intercept   : AIC=2191.810, Time=0.03 sec\n ARIMA(2,0,0)(0,0,0)[0] intercept   : AIC=2190.196, Time=0.02 sec\n ARIMA(3,0,0)(0,0,0)[0] intercept   : AIC=2191.589, Time=0.03 sec\n ARIMA(3,0,1)(0,0,0)[0] intercept   : AIC=2193.567, Time=0.03 sec\nBest model:  ARIMA(2,0,0)(0,0,0)[0] intercept\nTotal fit time: 0.349 seconds\n```", "```py\nfrom pmdarima.model_selection import train_test_split\ntrain, test =\n    train_test_split(y_macro_economic.realgdp.values,\n    train_size=0.9\n)\narima = pm.auto_arima(\n    train, out_of_sample_size=10,\n    suppress_warnings=True, error_action='ignore',\n    test='adf'\n)\npreds, conf_int = arima.predict(\n    n_periods=test.shape[0], return_conf_int=True\n)\n```", "```py\nimport pmdarima as pm\nfrom sktime import datasets\ny_airline = datasets.load_airline()\nseries = pm.utils.diff( y_airline.values, lag=12)\n```", "```py\nadf_test = pm.arima.ADFTest()\nadf_test.should_diff(series)\n# (0.09898694171553156, True)\n```", "```py\npm.auto_arima(\n    series, error_action='ignore', trace=False,\n    suppress_warnings=True, maxiter=5, seasonal=False,\n    test='adf'\n)\n# ARIMA(1,0,0)(0,0,0)[0]\n```", "```py\npm.auto_arima(\n    y_airline.values, error_action='ignore', trace=True,\n    suppress_warnings=True, maxiter=5, seasonal=True, m=12,\n    test='adf'\n)\n# Best model:  ARIMA(1,1,0)(0,1,0)[12]\n```", "```py\ntrain, test = train_test_split(y_airline.values, train_size=0.9)\nsarima = pm.auto_arima(\n    train, error_action='ignore', trace=True,\n    suppress_warnings=True, maxiter=5, seasonal=True, m=12,\n    test='adf'\n)\npreds, conf_int = sarima.predict(n_periods=test.shape[0], return_conf_int=True)\n```", "```py\ndata = pd.read_csv(\"COCO COLA.csv\", parse_dates=[\"Date\"], index_col=\"Date\")\n```", "```py\ndata= data[data.index>='2016-01-01'][['Open']]\n```", "```py\nfig, ax = plt.subplots(4,1, figsize=(12,8))\nax[0].set_title('Original stock price from 2016')\nax[0].plot(data)\nax[1].plot(data.resample('7D').mean())\nax[1].set_title('7 days - Downsampling stock price from 2016')\nax[2].plot(data.resample('M').mean())\nax[2].set_title('Monthly Downsampling  stock price from 2016')\nax[3].plot(data.resample('Y').mean())\nax[3].set_title('Yearly Downsampling stock price from 2016')\nfig.tight_layout(pad=5.0)\nplt.show()\n```", "```py\ndata[\"price_lag_1\"] = data[\"Open\"].shift(1)\ndata.head()\n```", "```py\ndata[\"price_lag_1\"] = data[\"Open\"].shift(1, fill_value = data['Open'].mean())\n```", "```py\nfrom sklearn.metrics import mean_squared_error\nimport math\ntrain, test = data.resample('M').mean()['Open'][0:-24], data.resample('M').mean()['Open'][-24:]\npersistence = range(1, 25)\nRMSE_scores = []\nfor p in persistence:\n    history = [x for x in train]\n    pred = []\n    for i in range(len(test)):\n    # Prediction on test set\n        yhat = history[-p]\n        pred.append(yhat)\n    history.append(test[i])\n    # RMSE score performance\n    rmse = math.sqrt(mean_squared_error(test, pred))\n    RMSE_scores.append(rmse)\n    print(f'p={p} RMSE={rmse}')\n```", "```py\nhistory = [x for x in train]\npred = []\nfor i in range(len(test)):\n    # Prediction\n    yhat = history[-6]\n    pred.append(yhat)\n    history.append(test[i])\n# Plots\nplt.plot(list(test))\nplt.plot(pred)\nplt.show()\n```", "```py\nfrom numpy import mean\ntrain, test = data.resample('M').mean()['Open'][0:-24], data.resample('M').mean()['Open'][-24:]\nwindow = range(1, 25)\nRMSE_scores = []\nfor w in window:\n    history = [x for x in train]\n    pred = []\n    for i in range(len(test)):\n    # Prediction on test set\n        yhat = mean(history[-w:])\n        pred.append(yhat)\n    history.append(test[i])\n    # RMSE score performance\n    rmse = math.sqrt(mean_squared_error(test, pred))\n    RMSE_scores.append(rmse)\n    print(f'w={w} RMSE={rmse}')\nplt.plot(window, RMSE_scores)\nplt.title('Rolling Forecasting')\nplt.xlabel('Windows sizes')\nplt.ylabel('RMSE scores')\nplt.show()\n```"]