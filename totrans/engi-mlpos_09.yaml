- en: 'Chapter 7: Building Robust CI/CD Pipelines'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第七章：构建健壮的CI/CD管道
- en: 'In this chapter, you will learn about continuous operations in the MLOps pipeline.
    The principles you will learn in this chapter are key to driving continuous deployments
    in a business context. To get a comprehensive understanding and first-hand experience,
    we will go through the concepts and hands-on implementation simultaneously. We
    will set up a CI/CD pipeline for the test environment while learning about components
    of **continuous integration** (**CI**) and **continuous deployment** (**CD**),
    pipeline testing, and releases and types of triggers. This will equip you with
    the skills to automate the deployment pipelines of **machine learning** (**ML**)
    models for any given scenario on the cloud with continual learning abilities in
    tune with business. Let''s start by looking at why we need CI/CD in MLOps after
    all. We will continue by exploring the other topics as follows:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将了解MLOps管道中的持续操作。本章中你将学习的原则对于在业务环境中推动持续部署至关重要。为了获得全面的理解和第一手经验，我们将同时探讨概念和动手实施。在学习**持续集成**（**CI**）和**持续部署**（**CD**）、管道测试以及发布和触发器类型的同时，我们将为测试环境设置CI/CD管道。这将使你具备在云上为任何给定场景自动部署具有持续学习能力**机器学习**（**ML**）模型所需的技能，并与业务保持一致。让我们首先看看为什么我们需要在MLOps中使用CI/CD。接下来，我们将继续探讨以下其他主题：
- en: Continuous integration, delivery, and deployment in MLOps
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MLOps中的持续集成、交付和部署
- en: Setting up a CI/CD pipeline and test environment (using Azure DevOps)
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置CI/CD管道和测试环境（使用Azure DevOps）
- en: Pipeline execution and testing
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管道执行和测试
- en: Pipeline execution triggers
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管道执行触发器
- en: Continuous integration, delivery, and deployment in MLOps
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MLOps中的持续集成、交付和部署
- en: '**Automation** is the primary reason for CI/CD in the MLOps workflow. The goal
    of enabling continuous delivery to the ML service is to maintain data and source
    code versions of the models, enable triggers to perform necessary jobs in parallel,
    build artifacts, and release deployments for production. Several cloud vendors
    are promoting DevOps services to monitor ML services and models in production,
    as well as orchestrate with other services on the cloud. Using CI and CD, we can
    enable continual learning, which is critical for a ML system''s success. Without
    continual learning, a ML system is deemed to end up as a failed **Proof of Concept**
    (**PoC**).'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**自动化**是MLOps工作流程中CI/CD的主要原因。启用持续向ML服务交付的目标是维护模型的数据和源代码版本，启用触发器并行执行必要的作业，构建工件，并发布生产部署。一些云服务提供商正在推广DevOps服务以监控生产中的ML服务和模型，以及与云上的其他服务进行编排。使用CI和CD，我们可以启用持续学习，这对于ML系统的成功至关重要。没有持续学习，ML系统被认为最终会以失败的**概念验证**（**PoC**）告终。'
- en: Only a model deployed with continual learning capabilities can bring business
    value.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 只有部署了持续学习能力模型的模型才能带来商业价值。
- en: In order to learn to deploy a model in production with continual learning capabilities,
    we will explore CI, CD, and continuous delivery methods.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 为了学习如何使用持续学习能力在生产中部署模型，我们将探索CI、CD和持续交付方法。
- en: 'As you can see in *Figure 7.1*, CI is key to CD and continuous delivery. Let''s
    see how these three are interconnected:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如你在*图7.1*中看到的，CI是CD和持续交付的关键。让我们看看这三个是如何相互关联的：
- en: '![Figure 7.1 – Continuous integration, delivery, and deployment pipelines'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.1 – 持续集成、交付和部署管道'
- en: '](img/B16572_07_01.jpg)'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16572_07_01.jpg)'
- en: Figure 7.1 – Continuous integration, delivery, and deployment pipelines
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.1 – 持续集成、交付和部署管道
- en: Continuous integration
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 持续集成
- en: CI aims to synchronize the application (ML pipeline and application) with the
    developer in real time. The developer's changes in commits or merges are validated
    by creating an application build on the go and by performing automated tests against
    the build. CI emphasizes automated testing with a focus on checking the application's
    robustness (if it is not broken or bugged) when new commits are merged to the
    master or main branch. Whenever a new commit is made to the master branch, a new
    build is created that is tested for robustness using automated testing. By automating
    this process, we can avoid delayed delivery of software and other integration
    challenges that can keep users waiting for days for the release. Automation and
    testing are at the heart of CI.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: CI（持续集成）旨在实时同步应用程序（机器学习管道和应用程序）与开发者。开发者在提交或合并中的更改将通过创建应用程序构建和针对构建执行自动化测试来得到验证。CI强调自动化测试，重点关注在将新提交合并到主分支或主分支时检查应用程序的健壮性（如果它没有损坏或出现错误）。每当向主分支提交新的提交时，就会创建一个新的构建版本，并使用自动化测试对其进行健壮性测试。通过自动化此过程，我们可以避免软件延迟交付和其他可能导致用户等待数天的集成挑战。自动化和测试是CI的核心。
- en: Continuous delivery
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 持续交付
- en: Continuous delivery extends from CI to ensure that the new changes or releases
    are deployed and efficiently brought to users; this is facilitated by automating
    testing and release processes. Automating testing and release processes enable
    developers and product managers to deploy the changes with one click of a button,
    enabling seamless control and supervision capabilities at any phase of the process.
    In the continuous delivery process, quite often, a human agent (from the QA team)
    is involved in approving a build (pass or fail) before deploying it in production
    (as shown in *Figure 7.1* in a continuous delivery pipeline). In a typical continuous
    delivery pipeline, a build goes through preliminary acceptance tests before getting
    deployed on the staging phase where a human agent supervises the performance using
    smoke tests and other suitable tests.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 持续交付从CI扩展，以确保新的更改或发布被部署并高效地带给用户；这通过自动化测试和发布流程来实现。自动化测试和发布流程使开发者和产品经理能够通过一键操作部署更改，并在过程的任何阶段实现无缝控制和监督能力。在持续交付过程中，通常会有一个人工代理（来自质量保证团队）参与批准构建（通过或失败），在将其部署到生产环境中之前（如图7.1所示，在持续交付管道中）。在一个典型的持续交付管道中，构建在部署到预发布阶段之前会经过初步的验收测试，在这个阶段，人工代理会使用烟雾测试和其他合适的测试来监督性能。
- en: Once the smoke tests have been passed, the human agent passes the build to be
    deployed in production. Automating the build and release process and having a
    human agent involved in the process ensures great quality as regards production
    and we can avoid some pitfalls that may go unnoticed with a fully automated pipeline.
    Using continuous delivery, a business can have full control over its release process
    and release a new build in small batches (easy to troubleshoot in the case of
    blockers or errors) or have a full release within a requisite time frame (daily,
    weekly, or monthly).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦通过了烟雾测试，人工代理会将构建版本传递到生产环境中部署。自动化构建和发布流程，并让人工代理参与其中，可以确保生产质量，我们还可以避免一些在完全自动化管道中可能被忽视的陷阱。使用持续交付，企业可以对其发布流程拥有完全的控制权，并可以分批次（在出现阻塞或错误时易于调试）发布新的构建版本，或者在一个必要的时间框架内（每日、每周或每月）进行完整发布。
- en: Continuous deployment
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 持续部署
- en: CD enables full automation and goes one step further than continuous delivery.
    All stages of build and release to your production are completely automated without
    any human intervention, unlike in continuous delivery. In such an automated pipeline,
    only a failed test can stop a new change from being deployed to production. Continuous
    deployment takes the pressure off the team to maintain the release pipeline and
    accelerates deployment straight to the customers enabling continual learning via
    feedback loops with customers.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: CD（持续部署）实现了完全自动化，并且比持续交付更进一步。将构建和发布到生产环境的所有阶段都完全自动化，没有任何人工干预，这与持续交付不同。在这样的自动化管道中，只有失败的测试才能阻止新的更改部署到生产环境中。持续部署减轻了团队维护发布管道的压力，并加速了直接向客户部署，通过客户反馈循环实现持续学习。
- en: With such automation, there is no longer a release day for developers. It takes
    the pressure off them and they can just focus on building the software without
    worrying about tests and release management. Developers can build, test, and deploy
    the software at their convenience and can go live within minutes instead of waiting
    for release days or for human approval, which can delay the release of software
    to users by days and sometimes weeks. Continuous deployment ensures full automation
    to deploy and serve robust and scalable software to users.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这样的自动化，开发者不再有发布日。这减轻了他们的压力，他们可以专注于构建软件，而无需担心测试和发布管理。开发者可以在方便的时候构建、测试和部署软件，可以在几分钟内上线，而不是等待发布日或人工审批，这可能会延迟软件向用户发布几天甚至几周。持续部署确保了部署和服务的完全自动化，向用户提供强大且可扩展的软件。
- en: Setting up a CI/CD pipeline and the test environment (using Azure DevOps)
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置 CI/CD 管道和测试环境（使用 Azure DevOps）
- en: In the previous section, we went through the theory of CI, continuous delivery,
    and continuous deployment, and now it is time to see it in practice. Using Azure
    DevOps, we will set up a simple CI/CD pipeline of our own for the business problem
    (weather prediction), which we have been working on previously (in [*Chapter 6*](B16572_06_Final_JM_ePub.xhtml#_idTextAnchor124),
    *Key Principles for Deploying Your ML System*, in the Hands-on deployment section
    (for the business problem)).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们介绍了 CI、持续交付和持续部署的理论，现在是时候看到它在实践中是如何应用的。使用 Azure DevOps，我们将为之前一直在工作的业务问题（天气预测）设置一个简单的
    CI/CD 管道，我们之前在 [*第 6 章*](B16572_06_Final_JM_ePub.xhtml#_idTextAnchor124) 的“关键部署原则”部分（针对业务问题）中已经讨论过。
- en: Azure DevOps is a service provided by Microsoft that facilitates source code
    management (version control), project management, CI, continuous delivery, and
    continuous deployment (automated builds, testing, and release capabilities). It
    also enables life cycle management for software applications. We will use Azure
    DevOps for hands-on training as it comes with seamless integration with the Azure
    ML service, which we have been using previously in [*C**hapter 6*](B16572_06_Final_JM_ePub.xhtml#_idTextAnchor124).
    You will experience the integration and syncing of both services to make deployments
    with ease. Let's get started.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Azure DevOps 是由微软提供的一项服务，它简化了源代码管理（版本控制）、项目管理、CI（持续集成）、持续交付和持续部署（自动化构建、测试和发布功能）。它还使软件应用程序的生命周期管理成为可能。我们将使用
    Azure DevOps 进行实战培训，因为它与 Azure ML 服务无缝集成，我们之前在 [*第 6 章*](B16572_06_Final_JM_ePub.xhtml#_idTextAnchor124)
    中已经使用过。您将体验这两种服务的集成和同步，以便轻松进行部署。让我们开始吧。
- en: 'Go to your Azure DevOps project, `Learn_MLOps`. Go to the cloned repository
    and access the `07_CICD_Pipeline` folder. We will use these files (in the folder
    named `07_CICD_Pipeline`) as drivers to build a release pipeline:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 前往您的 Azure DevOps 项目，`Learn_MLOps`。进入克隆的仓库并访问 `07_CICD_Pipeline` 文件夹。我们将使用这些文件（在名为
    `07_CICD_Pipeline` 的文件夹中）作为驱动程序来构建发布管道：
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We will deploy previously trained ML models (from [*Chapter 4*](B16572_04_Final_JM_ePub.xhtml#_idTextAnchor074),
    *Machine Learning Pipelines*) on two deployment targets: one is `AciDeployment.yml`
    file contains the configuration for the ACI deployment target, and the `AksDeployment.yml`
    file contains the configuration for the AKS cluster. `InferenceConfig.yml` points
    to inference artifacts such as `score.py` and `myenv.yml`.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在两个部署目标上部署之前训练的 ML 模型（来自 [*第 4 章*](B16572_04_Final_JM_ePub.xhtml#_idTextAnchor074)，*机器学习管道*），一个是
    `AciDeployment.yml` 文件包含 ACI 部署目标的配置，另一个是 `AksDeployment.yml` 文件包含 AKS 集群的配置。`InferenceConfig.yml`
    指向推理工件，如 `score.py` 和 `myenv.yml`。
- en: The functions defined in `score.py` will be used to pre-process the incoming
    data and infer the pre-processed data with the ML model to make predictions. The
    `myenv.yml` file is a configuration for the inference environment, for example,
    the Python version and packages to install within the environment. These files
    will be used as drivers to facilitate the release pipeline. Now that you have
    familiarized yourself with these files, let's begin by connecting the Azure ML
    service and the Azure DevOps project using a service principal.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `score.py` 中定义的函数将用于预处理传入的数据，并使用 ML 模型推断预处理后的数据以进行预测。`myenv.yml` 文件是推理环境的配置，例如，环境中的
    Python 版本和要安装的包。这些文件将用作驱动程序，以简化发布管道。现在您已经熟悉了这些文件，让我们开始通过使用服务主体连接 Azure ML 服务和
    Azure DevOps 项目。
- en: Creating a service principal
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建服务主体
- en: We need to sync Azure ML services and Azure DevOps in order to facilitate CI
    between both the services. Previously (in [*Chapter 4*](B16572_04_Final_JM_ePub.xhtml#_idTextAnchor074),
    *Machine Learning Pipelines*) we had developed and managed our ML models using
    Azure ML service, and we used the `Learn_MLOps` workspace. Now, we will connect
    the Azure ML workspace (named `Learn_MLOps`) with the Azure DevOps project (named
    `Learn_MLOps`) using a service principal.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要同步 Azure ML 服务和 Azure DevOps，以便在两者之间方便地进行 CI。之前（在 [*第 4 章*](B16572_04_Final_JM_ePub.xhtml#_idTextAnchor074)，*机器学习管道*）我们使用
    Azure ML 服务开发和管理工作流模型，并使用了 `Learn_MLOps` 工作区。现在，我们将使用服务主体将 Azure ML 工作区（命名为 `Learn_MLOps`）与
    Azure DevOps 项目（命名为 `Learn_MLOps`）连接起来。
- en: 'A service principal is an identity created for inter-application communication;
    it is a connection automation tool to access Azure resources. Service principal
    also takes care of the networking and connectivity aspects of your applications.
    Perform the following steps to set up a service principal for the pipelines:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 服务主体是为应用程序间通信创建的标识；它是访问 Azure 资源的连接自动化工具。服务主体还负责应用程序的网络和连接方面。执行以下步骤来设置用于管道的服务主体：
- en: Go to **Project Settings** (on the bottom left of your screen) and select **Service
    connections**. Click the **New service connection** option/button to reveal the
    New service connection window, as shown in *Figure 7.2*:![Figure 7.2 – New service
    principal connection
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往**项目设置**（位于屏幕左下角）并选择**服务连接**。点击**新建服务连接**选项/按钮以显示新建服务连接窗口，如图 *图 7.2* 所示：![图
    7.2 – 新的服务主体连接
- en: '](img/B16572_07_02.jpg)'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![img/B16572_07_02.jpg]'
- en: Figure 7.2 – New service principal connection
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.2 – 新的服务主体连接
- en: Select **Azure Resource Manager** for the connection type and proceed by clicking
    **Next**. Select **Service principal (automatic)** and proceed to the final step
    of creating a service principal.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**Azure 资源管理器**作为连接类型，然后点击**下一步**。选择**服务主体（自动**）并继续创建服务主体的最后一步。
- en: You will be prompted to create a new service connection. Set the scope as **Machine
    Learning Workspace** and point to the **Subscription**, **Resource group** and
    **Machine Learning Workspace** as shown in *Figure 7.3:*![Figure 7.3 – Final step
    in creating a service principal
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将提示创建新的服务连接。将范围设置为**机器学习工作区**并指向**订阅**、**资源组**和**机器学习工作区**，如图 *图 7.3* 所示：![图
    7.3 – 创建服务主体的最后一步
- en: '](img/B16572_07_03.jpg)'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![img/B16572_07_03.jpg]'
- en: Figure 7.3 – Final step in creating a service principal
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.3 – 创建服务主体的最后一步
- en: Name the service principal in the `mlops_sp` as shown in *Figure 7.3*). Lastly,
    tick the checkbox (**Grant access permission to all pipelines**) and click **Save**
    to create the service principal.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `mlops_sp` 中命名服务主体，如图 *图 7.3* 所示）。最后，勾选复选框（**授予所有管道访问权限**）并点击**保存**以创建服务主体。
- en: With this, your service principal with the given name (for example, `mlops_sp`)
    is ready to be used for orchestrating CI/CD pipelines. Next, we will install the
    extension used for the pipelines.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，具有给定名称（例如，`mlops_sp`）的服务主体就准备好用于编排 CI/CD 管道。接下来，我们将安装用于管道的扩展。
- en: Installing the extension to connect to the Azure ML workspace
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装扩展以连接到 Azure ML 工作区
- en: 'Microsoft has developed an extension called **Machine Learning**. It is available
    in the Azure DevOps Marketplace. It is used to orchestrate models and artifacts
    from our desired Azure ML workspace. It lets us deploy models from the workspace
    to our desired deployment targets such as ACI or AKS. We will install the ML extension
    and use it to orchestrate the CI/CD pipeline. Perform the following steps to install
    the extension:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 微软开发了一个名为 **Machine Learning** 的扩展。它在 Azure DevOps 市场place 中可用。它用于编排我们所需的 Azure
    ML 工作区中的模型和工件。它允许我们将工作区中的模型部署到我们想要的部署目标，如 ACI 或 AKS。我们将安装 ML 扩展并使用它来编排 CI/CD 管道。执行以下步骤来安装扩展：
- en: Go to the Marketplace to look for the **Machine Learning** extension. To go
    to the Marketplace, click on the bag icon in the top right of your screen, as
    shown in *Figure 7.4*:![Figure 7.4 – Finding the Azure DevOps Marketplace
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往市场以查找**机器学习**扩展。要进入市场，点击屏幕右上角的购物袋图标，如图 *图 7.4* 所示：![图 7.4 – 查找 Azure DevOps
    市场place
- en: '](img/B16572_07_04.jpg)'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![img/B16572_07_04.jpg]'
- en: Figure 7.4 – Finding the Azure DevOps Marketplace
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.4 – 查找 Azure DevOps 市场place
- en: After entering the Marketplace, you will be presented with multiple extensions
    to add to your Azure DevOps project. Next, we will search for the **Machine Learning**
    extension.
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 进入市场后，您将看到多个扩展选项，可以添加到您的Azure DevOps项目中。接下来，我们将搜索**机器学习**扩展。
- en: 'Search for the **Machine Learning** extension and install the extension for
    free. Click the **Get it free** button to install the extension as shown in *Figure
    7.5*:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 搜索**机器学习**扩展，免费安装扩展。点击**免费获取**按钮，如图*图7.5*所示安装扩展：
- en: '![Figure 7.5 – Installing the Machine Learning extension'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.5 – 安装机器学习扩展'
- en: '](img/B16572_07_05.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/B16572_07_05.jpg](img/B16572_07_05.jpg)'
- en: Figure 7.5 – Installing the Machine Learning extension
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.5 – 安装机器学习扩展
- en: The **Machine Learning** extension will be installed upon clicking the **Get
    it free** button. After successful installation, you can use the **Machine Learning**
    extension to orchestrate jobs in the CI/CD pipeline. With these prerequisites,
    you are set to configure the continuous deployment or continuous delivery pipeline.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**免费获取**按钮后，将安装**机器学习**扩展。安装成功后，您可以使用**机器学习**扩展在CI/CD管道中编排作业。具备这些先决条件后，您就可以配置持续部署或持续交付管道。
- en: Setting up a continuous integration and deployment pipeline for the test environment
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为测试环境设置持续集成和部署管道
- en: 'In this section, we will configure the CI/CD pipeline for the staging environment
    (also called the test environment). We will use this pipeline to facilitate continual
    learning and automate deployments. Let''s get started by going to **Pipelines**
    >> **Releases**, as shown in *Figure 7.6*:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将为预发布环境（也称为测试环境）配置CI/CD管道。我们将使用此管道促进持续学习和自动化部署。让我们按照*图7.6*所示，通过**管道**>>**发布**开始操作：
- en: '![Figure 7.6 – Setting up your CI/CD pipeline'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.6 – 设置您的CI/CD管道'
- en: '](img/B16572_07_06.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/B16572_07_06.jpg](img/B16572_07_06.jpg)'
- en: Figure 7.6 – Setting up your CI/CD pipeline
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.6 – 设置您的CI/CD管道
- en: Create a new pipeline in the `Port Weather ML Pipeline`. Next, we will start
    connecting the requisite artifacts to enable the pipeline, such as the repository
    containing the code and the Azure ML workspace containing the models to deploy.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Port Weather ML Pipeline`中创建一个新的管道。接下来，我们将开始连接必要的工件以启用管道，例如包含代码的仓库和包含要部署的模型的Azure
    ML工作区。
- en: Connecting artifacts to the pipeline
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将工件连接到管道
- en: 'Connect to your Azure DevOps repository. The Azure DevOps repository serves
    as the central code repository to orchestrate deployments and operations on Azure
    DevOps. Hence, let''s connect the repository (`Learn_MLOps`) to the release pipeline:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 连接到您的Azure DevOps仓库。Azure DevOps仓库作为中央代码仓库，用于在Azure DevOps上协调部署和操作。因此，让我们将仓库（`Learn_MLOps`）连接到发布管道：
- en: As shown in *Figure 7.7*, go to the `Learn_MLOps`) to connect with the release
    pipeline:![Figure 7.7 – Connecting the Azure DevOps repository as an artifact
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如*图7.7*所示，转到`Learn_MLOps`以连接到发布管道：![图7.7 – 将Azure DevOps仓库作为工件连接
- en: '](img/B16572_07_07.jpg)'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![img/B16572_07_07.jpg](img/B16572_07_07.jpg)'
- en: Figure 7.7 – Connecting the Azure DevOps repository as an artifact
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图7.7 – 将Azure DevOps仓库作为工件连接
- en: Select the default branch (for example, `Learn_MLOps`) and icon in the **Artifacts**
    section.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**工件**部分选择默认分支（例如，`Learn_MLOps`）和图标。
- en: Connect to your Azure ML workspace. To connect your Azure ML workspace to the
    release pipeline, go to the `scaler` artifact previously registered in [*Chapter
    4*](B16572_04_Final_JM_ePub.xhtml#_idTextAnchor074), *Machine Learning Pipelines,*
    to scale the incoming data using the standard:![Figure 7.8 – Connecting the scaler
    as an artifact
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 连接到您的Azure ML工作区。要将您的Azure ML工作区连接到发布管道，请转到之前在[*第4章*](B16572_04_Final_JM_ePub.xhtml#_idTextAnchor074)中注册的`scaler`工件，*机器学习管道*，以使用标准缩放传入数据：![图7.8
    – 将缩放器作为工件连接
- en: '](img/B16572_07_08.jpg)'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![img/B16572_07_08.jpg](img/B16572_07_08.jpg)'
- en: Figure 7.8 – Connecting the scaler as an artifact
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图7.8 – 将缩放器作为工件连接
- en: 'After selecting the `model_scaler` artifact, add the artifact to the release
    pipeline by clicking the `model_scaler` artifact, you will be able to see the
    model''s name (`model_scaler`) and a model icon in the `support_vector_classifier`
    model to the release pipeline artifacts. Start by clicking the `mlops_sp`) and
    select the `support_vector_classifier` model trained previously in *Chapter 4*,
    *Machine Learning Pipelines*. Add the model artifact to the pipeline by hitting
    the **Add** button:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在选择`model_scaler`工件后，通过点击`model_scaler`工件将其添加到发布管道中，你将能够在`support_vector_classifier`模型中看到模型名称（`model_scaler`）和模型图标。首先点击`mlops_sp`并选择在*第4章*，*机器学习流水线*中训练的`support_vector_classifier`模型。通过点击**添加**按钮将模型工件添加到管道中：
- en: '![Figure 7.9 – Connected artifacts'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.9 – 连接的工件'
- en: '](img/B16572_07_09.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/B16572_07_09.jpg]'
- en: Figure 7.9 – Connected artifacts
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.9 – 连接的工件
- en: After adding the `support_vector_classifier` model, you will be able to see
    the model's name (`support_vector_classifier`) and a model icon in the **Artifacts**
    section, as shown in *Figure 7.9*.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在添加`support_vector_classifier`模型后，你将在**工件**部分看到模型名称（`support_vector_classifier`）和模型图标，如图*图7.9*所示。
- en: Congratulations! We have all three desired artifacts (`Learn_MLOps`, `scaler`,
    and **support_vector_classifier**) connected to the release pipeline. We can use
    these artifacts to orchestrate the deployments in the pipeline. Next, get ready
    to configure the Staging/TEST environment!
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！我们已经将三个所需的工件（`Learn_MLOps`、`scaler`和**support_vector_classifier**）连接到发布管道中。我们可以使用这些工件来编排管道中的部署。接下来，准备好配置Staging/TEST环境！
- en: Setting up a test environment
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置测试环境
- en: 'Let''s set up a continuous integration and continuous deployment pipeline for
    the TEST environment in the pipeline. In this stage, we test the robustness of
    the service and perform various tests to validate the service readiness for production:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在管道中为TEST环境设置一个持续集成和持续部署流水线。在这个阶段，我们测试服务的鲁棒性并执行各种测试以验证服务对生产的准备情况：
- en: To get started, click on the `DEV` `TEST`. We will name the stage `DEV` `TEST`
    as this will be our development and testing environment. Ideally, both DEV and
    TEST are different stages, but for simplicity and avoiding repetitive implementation,
    we will merge them both. See the following *Figure 7.10*:![Figure 7.10 – Setting
    up the DEV TEST stage
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要开始，点击`DEV` `TEST`。我们将该阶段命名为`DEV` `TEST`，因为这将是我们的开发和测试环境。理想情况下，DEV和TEST是不同的阶段，但为了简单和避免重复实现，我们将它们合并。请参阅以下*图7.10*：![图7.10
    – 设置DEV TEST阶段
- en: '](img/B16572_07_10.jpg)'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![img/B16572_07_10.jpg]'
- en: Figure 7.10 – Setting up the DEV TEST stage
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图7.10 – 设置DEV TEST阶段
- en: After naming the stage, save the stage by clicking the **Save** button at the
    top. Every stage is a composition of a series of steps or jobs to check the robustness
    of the stage. Next, we will configure the jobs within the **DEV TEST** stage.
    A CI/CD job, in simple terms, is a process or script to execute or test deployments
    (for example, a job to deploy a model on the Kubernetes cluster). To configure
    jobs, click on the **1 job, 0 task** link in the **DEV TEST** stage, as shown
    in *Figure 7.11*:![Figure 7.11 – Configuring DEV TEST jobs
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命名阶段后，通过点击顶部的**保存**按钮保存阶段。每个阶段都是由一系列步骤或作业组成的，用于检查阶段的鲁棒性。接下来，我们将配置**DEV TEST**阶段内的作业。简单来说，CI/CD作业是一个执行或测试部署（例如，在Kubernetes集群上部署模型的作业）的过程或脚本。要配置作业，点击**DEV
    TEST**阶段中的**1作业，0任务**链接，如图*图7.11*所示：![图7.11 – 配置DEV TEST作业
- en: '](img/B16572_07_11.jpg)'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![img/B16572_07_11.jpg]'
- en: Figure 7.11 – Configuring DEV TEST jobs
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图7.11 – 配置DEV TEST作业
- en: Upon clicking the **1 job, 0 task** link in the **DEV TEST** stage, you will
    have to add agent jobs.
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在点击**DEV TEST**阶段的**1作业，0任务**链接后，你必须添加代理作业。
- en: Add a task to the agent job by clicking `AzureML model deploy`, as shown in
    *Figure 7.12*:![Figure 7.12 – Adding a job – AzureML Model Deploy
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过点击`AzureML模型部署`将任务添加到代理作业中，如图*图7.12*所示：![图7.12 – 添加作业 – AzureML模型部署
- en: '](img/B16572_07_12.jpg)'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![img/B16572_07_12.jpg]'
- en: Figure 7.12 – Adding a job – AzureML Model Deploy
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图7.12 – 添加作业 – AzureML模型部署
- en: Upon adding the `inferenceconfig` file.
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加`inferenceconfig`文件后。
- en: 'Next, you will be prompted to enter the deployment information. As shown in
    *Figure 7.13*, point to your Azure ML workspace (for example, `mlops_ws`) and
    set the `Model Source` option to **Model Artifact** (as we are using the model
    artifacts generated previously when training and packaging models):'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，您将被提示输入部署信息。如图 *图 7.13* 所示，指向您的 Azure ML 工作区（例如，`mlops_ws`）并将 `模型源` 选项设置为
    **模型工件**（因为我们正在使用之前在训练和打包模型时生成的模型工件）：
- en: '![Figure 7.13 – Adding a job – Azure ML Model Deploy'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.13 – 添加作业 – Azure ML 模型部署'
- en: '](img/B16572_07_13.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16572_07_13.jpg)'
- en: Figure 7.13 – Adding a job – Azure ML Model Deploy
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.13 – 添加作业 – Azure ML 模型部署
- en: 'Next, we will look at the `inferenceConfig` file and its functionality. The
    following snippet is taken from `inferenceConfig.yml` (in the repository). Here
    is a snapshot of `inferenceConfig.yml`:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将查看 `inferenceConfig` 文件及其功能。以下代码片段来自 `inferenceConfig.yml`（在仓库中）。以下是
    `inferenceConfig.yml` 的快照：
- en: '`inferenceConfig.yml`'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`inferenceConfig.yml`'
- en: '[PRE1]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'It is a representation of the settings for a custom environment in which we
    will deploy our models. It points to the `score.py` file (previously created in
    [*Chapter 6*](B16572_06_Final_JM_ePub.xhtml#_idTextAnchor124), *Key Principles
    for Deploying Your ML System*) and the `conda` file `myenv.yml`, which defines
    the `conda` environment (packages and dependencies to install). Here is a snapshot
    of `myenv.yml`:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 它表示我们将部署模型的自定义环境的设置。它指向 `score.py` 文件（在 [*第 6 章*](B16572_06_Final_JM_ePub.xhtml#_idTextAnchor124)，*部署您的
    ML 系统的关键原则*）和 `conda` 文件 `myenv.yml`，该文件定义了 `conda` 环境（要安装的包和依赖项）。以下是 `myenv.yml`
    的快照：
- en: '`myenv.yml`'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '`myenv.yml`'
- en: '[PRE2]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Both the `score.py` and `myenv.yml` files are tied up in the `inferenceConfig.yml`
    file to facilitate the deployment and inference of ML models. Proceed by selecting
    your inference configuration file (`inferenceConfig.yml`), as shown in *Figure
    7.14*:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '`score.py` 和 `myenv.yml` 文件都与 `inferenceConfig.yml` 文件相关联，以简化机器学习模型的部署和推理。按照图
    *图 7.14* 所示，选择您的推理配置文件（`inferenceConfig.yml`）：'
- en: '![Figure 7.14 – Selecting your inference configuration file'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.14 – 选择您的推理配置文件'
- en: '](img/B16572_07_14.jpg)'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16572_07_14.jpg)'
- en: Figure 7.14 – Selecting your inference configuration file
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.14 – 选择您的推理配置文件
- en: 'After pointing to the `inferenceConfig.yml` file in your Azure DevOps repository,
    your basic configuration is done for the deployment. Lastly, we will configure
    the deployment information by pointing to the `AciDeploymentConfig.yml`) for ACI:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的 Azure DevOps 仓库中指向 `inferenceConfig.yml` 文件后，您的部署基本配置已完成。最后，我们将通过指向 `AciDeploymentConfig.yml`)
    为 ACI 配置部署信息：
- en: '`AciDeploymentConfig.yml`'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '`AciDeploymentConfig.yml`'
- en: '[PRE3]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'It contains the infrastructural definition for provisioning the requisite compute
    for deployment, such as CPU units, memory in GB, and other authentication or security
    definitions. Let''s select this deployment configuration file to set up the release
    pipeline for the staging environment, as shown in *Figure 7.15*:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 它包含为部署提供所需计算的基础设施定义，例如 CPU 单位、内存（以 GB 计）以及其他身份验证或安全定义。让我们选择此部署配置文件以设置预发布环境的发布管道，如图
    *图 7.15* 所示：
- en: '![Figure 7.15 – Adding deployment information'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.15 – 添加部署信息'
- en: '](img/B16572_07_15.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16572_07_15.jpg)'
- en: Figure 7.15 – Adding deployment information
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.15 – 添加部署信息
- en: After adding the deployment configuration file, save the job by clicking the
    **Save** button in the top right of the screen and then go to **Pipelines** >>
    **Releases** (on the left of your screen) to see your pipeline successfully set
    up. Let's continue from here to test the pipeline.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 添加部署配置文件后，通过点击屏幕右上角的 **保存** 按钮保存作业，然后转到 **管道** >> **发布**（位于您的屏幕左侧）以查看您的管道成功设置。让我们从这里继续测试管道。
- en: Pipeline execution and testing
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管道执行和测试
- en: 'Now, it is time to test your pipeline and for that we will create a release
    and validate whether the pipeline release has executed successfully. The following
    steps will help you to test your pipeline:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候测试您的管道了。为此，我们将创建一个发布版本并验证管道发布是否成功执行。以下步骤将帮助您测试您的管道：
- en: Click on the **Create release** button to execute jobs configured on your pipeline.
    A popup will appear on the right of your screen (as shown in *Figure 7.16*) to
    view and select artifacts to deploy in your staging environment.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **创建发布** 按钮以执行管道上配置的作业。屏幕右侧将出现一个弹出窗口（如图 *图 7.16* 所示），用于查看和选择在预发布环境中部署的工件。
- en: Select the artifacts (`_scaler` and `_support-vector-classifier`) and select
    their versions. For simplicity, version 1 is recommended for both.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择工件（`_scaler`和`_support-vector-classifier`）并选择它们的版本。为了简单起见，推荐两个都使用版本 1。
- en: If you want to choose another version of your model or scaler make sure to change
    the path of your model and scaler in the `score.py` file (that is, insert the
    appropriate version number in the `scaler` and `model` paths `model-scaler/{version
    number}/modelscaler.pkl` and `support-vector-classifier/ {version number} /svc.onnx`.
    If you choose version 1, you don't have to worry about changing the code in `score.py`
    file as the paths contain version 1\.
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你想选择模型或缩放器的另一个版本，请确保在`score.py`文件中更改你的模型和缩放器的路径（即在`scaler`和`model`路径`model-scaler/{版本号}/modelscaler.pkl`和`support-vector-classifier/{版本号}/svc.onnx`中插入适当的版本号。如果你选择版本
    1，你不需要担心更改`score.py`文件中的代码，因为路径包含版本 1。
- en: After selecting artifacts and needed versions (version 1 is recommended), click
    on the **Create** button to create the release for your selected artifacts:![Figure
    7.16 – Creating a release
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在选择工件和所需版本（推荐版本 1）后，点击**创建**按钮以创建所选工件的发布：![图 7.16 – 创建发布
- en: '](img/B16572_07_16.jpg)'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16572_07_16.jpg)'
- en: Figure 7.16 – Creating a release
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.16 – 创建发布
- en: Now the release pipeline (the CI/CD pipeline) is triggered to execute. All the
    steps defined in the pipeline will execute, such as downloading the artifacts,
    provisioning the ACI compute instance for deployment, and deploying the web service.
    Upon successful execution, you'll be notified with a green tick-mark on your release,
    as shown in *Figure 7.17*:![Figure 7.17 – Monitoring releases
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，发布管道（CI/CD 管道）被触发执行。管道中定义的所有步骤都将执行，例如下载工件、为部署提供 ACI 计算实例以及部署 Web 服务。在成功执行后，你将在发布上收到一个绿色的勾号通知，如图
    7.17 所示：![图 7.17 – 监控发布
- en: '](img/B16572_07_17.jpg)'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16572_07_17.jpg)'
- en: Figure 7.17 – Monitoring releases
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.17 – 监控发布
- en: You can monitor all your releases in the `scaler` and `_support-vector-classifier`)
    have been deployed as a web service on ACI, as shown in *Figure 7.18*:![Figure
    7.18 – Successful jobs in a release (test environment)
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以在`scaler`和`_support-vector-classifier`中监控所有你的发布，它们已作为 Web 服务部署在 ACI 上，如图
    7.18 所示：![图 7.18 – 发布中的成功作业（测试环境）
- en: '](img/B16572_07_18.jpg)'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16572_07_18.jpg)'
- en: Figure 7.18 – Successful jobs in a release (test environment)
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.18 – 发布中的成功作业（测试环境）
- en: 'Finally, go and check your Azure ML workspace (from the **Endpoints** section)
    to view the deployed web service, as shown in *Figure 7.19*:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，前往检查你的 Azure ML 工作区（从**端点**部分），查看已部署的 Web 服务，如图 7.19 所示：
- en: '![Figure 7.19 – Web service deployed on the Azure ML workspace'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.19 – 部署在 Azure ML 工作区的 Web 服务'
- en: '](img/B16572_07_19.jpg)'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16572_07_19.jpg)'
- en: Figure 7.19 – Web service deployed on the Azure ML workspace
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.19 – 部署在 Azure ML 工作区的 Web 服务
- en: We have successfully deployed a web service in the test environment. We can
    see the REST endpoint and the service name **devtest-webservice**. This brings
    us to the successful conclusion of the building and testing of the CI/CD pipeline
    for the test environment. Pipelines can be driven using triggers, and in the next
    section, we will look at what the triggers are and how we can use them to build
    optimal CI/CD pipelines.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已在测试环境中成功部署了一个 Web 服务。我们可以看到 REST 端点和服务名称**devtest-webservice**。这标志着测试环境的
    CI/CD 管道构建和测试的成功完成。管道可以通过触发器驱动，在下一节中，我们将探讨触发器的类型以及如何使用它们构建最优的 CI/CD 管道。
- en: Pipeline execution triggers
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管道执行触发器
- en: 'In an effective CI/CD pipeline, process execution should be possible by means
    of multiple events or triggers. Having the option to trigger the pipeline by only
    regular events, such as code repository or push-or-pull requests, might be a handicap
    or limitation for the system. Having the option to trigger the pipeline process
    using multiple events enhances the flexibility and functionality of the CI/CD
    pipeline. Let''s look at some types of triggers that can add value to the CI/CD
    pipeline process:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个有效的 CI/CD 管道中，通过多种事件或触发器执行流程应该是可能的。只有通过常规事件（如代码仓库或推送或拉取请求）触发管道的选项可能会成为系统的障碍或限制。通过使用多个事件触发管道流程的选项可以增强
    CI/CD 管道的灵活性和功能性。让我们看看一些可以增加 CI/CD 管道流程价值的触发器类型：
- en: '**Artifactory triggers**'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Artifactory 触发器**'
- en: Artifacts are generated at different stages in the pipeline and development
    process. Generated artifacts, such as a trained model, metadata, uploaded Docker
    images, or any file that has been uploaded, can be triggered to execute a certain
    process in the CI/CD pipeline. Having such options can enable great flexibility
    and functionality for the CI/CD pipeline.
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在管道和开发过程的各个阶段都会生成工件。生成的工件，如训练好的模型、元数据、上传的 Docker 镜像或任何已上传的文件，都可以触发在 CI/CD 管道中执行某个过程。拥有这样的选项可以为
    CI/CD 管道提供极大的灵活性和功能性。
- en: '**Docker Hub triggers**'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Docker Hub 触发器**'
- en: Every time you push a new Docker image to a Docker Hub repository of your choice,
    a trigger in the CI/CD pipeline can be executed as per requirements. For example,
    when you upload a new Docker image to Docker Hub (or Azure Container Registry),
    the pipeline is triggered to deploy the Docker image as a web service.
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 每当你将新的 Docker 镜像推送到你选择的 Docker Hub 仓库时，CI/CD 管道中的触发器可以按照需求执行。例如，当你将新的 Docker
    镜像上传到 Docker Hub（或 Azure 容器注册表）时，管道被触发以部署 Docker 镜像作为 Web 服务。
- en: '**Schedule triggers**'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**计划触发器**'
- en: The pipeline process can be triggered following a specific time schedule. This
    type of trigger is very useful for a scheduled clean-up or cron jobs or any other
    workflow that needs to be run following a time interval; for example, a trigger
    for ML model retraining at 12:00 every day.
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 管道过程可以按照特定的时间表触发。这种类型的触发器对于计划清理、cron 作业或任何需要按时间间隔运行的流程非常有用；例如，每天中午 12:00 重新训练
    ML 模型的触发器。
- en: '`retrain` on a developer''s platform, the pipeline can be triggered to retrain
    the existing deployed model. These triggers are facilitated using API calls.'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在开发者的平台上进行 `retrain`，管道可以被触发以重新训练现有的已部署模型。这些触发器是通过 API 调用来实现的。
- en: '**Git triggers**'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Git 触发器**'
- en: Git triggers are commonly used to trigger pipeline executions, for instance
    when new code is committed to a branch or a new pull request is made. When changes
    are made to a repository, then certain processes can be triggered in the pipeline
    as per requirements.
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Git 触发器通常用于触发管道执行，例如当新代码提交到分支或创建新的拉取请求时。当对仓库进行更改时，可以根据需求在管道中触发某些过程。
- en: 'Azure DevOps provides multiple trigger options (all of the above). Now, let''s
    set up a Git trigger, based on the Git commit made to the repository:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: Azure DevOps 提供了多种触发选项（以上所有选项）。现在，让我们基于对仓库提交的 Git 提交来设置一个 Git 触发器：
- en: Go to `Edit` (in the top right of your screen) to edit the existing pipeline.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往屏幕右上角的 `编辑`（Edit）来编辑现有的管道。
- en: Click on the repository artifact (named `_Learn_MLOps`), as shown in *Figure
    7.20*, and enable (by clicking on the toggle switch) the continuous deployment
    trigger.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击仓库工件（命名为 `_Learn_MLOps`），如图 *图 7.20* 所示，并通过点击切换开关启用（启用）持续部署触发器。
- en: Add a branch filter by including the develop branch. This will trigger the pipeline
    to execute when changes or commits are made to the develop branch of the repository.
    For the test or staging stage, configure a Git trigger for the develop branch
    only (not the master or another branch). For production we can configure a Git
    trigger for the master branch. This way, we can separate the Git trigger branches
    for the test and production stages:![Figure 7.20 – Enabling a Git trigger for
    the test environment
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过包含 develop 分支添加分支过滤器。这将触发管道在仓库的 develop 分支上发生更改或提交时执行。对于测试或预发布阶段，只为 develop
    分支配置 Git 触发器（而不是 master 或其他分支）。对于生产，我们可以为 master 分支配置 Git 触发器。这样，我们可以为测试和生产阶段分离
    Git 触发器分支：![图 7.20 – 启用测试环境的 Git 触发器
- en: '](img/B16572_07_20.jpg)'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![img/B16572_07_20.jpg]'
- en: Figure 7.20 – Enabling a Git trigger for the test environment
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.20 – 启用测试环境的 Git 触发器
- en: Click on the **Save** button at the top to configure the Git trigger. Congratulations!
    You have successfully set up a continuous deployment Git trigger for your test
    environment. Whenever there are changes to the develop branch of the repository,
    the pipeline will be triggered to deploy a web service in the test (**DEV TEST**)
    environment.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击顶部的 **保存** 按钮来配置 Git 触发器。恭喜！您已成功为测试环境设置了一个持续部署 Git 触发器。每当仓库的 develop 分支有更改时，管道将被触发以在测试（**DEV
    TEST**）环境中部署 Web 服务。
- en: Summary
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have learned the key principles of continuous operations
    in MLOps, primarily, continuous integration, delivery, and deployment. We have
    learned this by performing a hands-on implementation of setting up a CI/CD pipeline
    and test environment using Azure DevOps. We have tested the pipeline for execution
    robustness and finally looked into some triggers to enhance the functionality
    of the pipeline and also set up a Git trigger for the test environment. This chapter
    serves as the foundation for continual operations in MLOps and equips you with
    the skills to automate the deployment pipelines of ML models for any given scenario
    on the cloud, with continual learning abilities in tune with your business.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了MLOps中持续操作的关键原则，主要是持续集成、交付和部署。我们通过在Azure DevOps上设置CI/CD管道和测试环境的实际操作来学习这一点。我们测试了管道的执行稳健性，并最终探讨了增强管道功能的一些触发器，并为测试环境设置了Git触发器。本章是MLOps持续操作的基础，并为您提供了在云上自动化部署任何给定场景的ML模型部署管道的技能，这些技能与您的业务持续学习能力相匹配。
- en: In the next chapter, we will look into APIs, microservices, and what they have
    to offer for MLOps-based solutions.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨API、微服务和它们为基于MLOps的解决方案提供的功能。
