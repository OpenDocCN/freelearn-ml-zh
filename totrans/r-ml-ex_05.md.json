["```py\n# load raw ratings from csv\nraw_ratings <- read.csv(<file_name>)\n\n# convert columnar data to sparse ratings matrix\nratings_matrix <- data.matrix(raw_ratings)\n\n```", "```py\n# number of rows in ratings\nrows <- nrow(ratings_matrix)\n\n# number of columns in ratings matrix\ncolumns <- ncol(ratings_matrix)\n\n# latent features\nK <- 2\n\n# User-Feature Matrix\nX <- matrix(runif(rows*K), nrow=rows, byrow=TRUE)\n\n# Item-Feature Matrix\nY <- matrix(runif(columns*K), nrow=columns, byrow=TRUE)\n\n```", "```py\nfor (i in seq(nrow(ratings_matrix))){\n\n for (j in seq(length(ratings_matrix[i, ]))){\n\n if (ratings_matrix[i, j] > 0){\n\n # error \n eij = ratings_matrix[i, j] - as.numeric(X[i, ] %*% Y[, j])\n\n # gradient calculation \n\n for (k in seq(K)){\n X[i, k] = X[i, k] + alpha * (2 * eij * Y[k, j]/\n - beta * X[i, k])\n\n Y[k, j] = Y[k, j] + alpha * (2 * eij * X[i, k]/\n - beta * Y[k, j])\n }\n }\n }\n }\n\n```", "```py\n# Overall Squared Error Calculation\n\ne = 0\n\nfor (i in seq(nrow(ratings_matrix))){\n\n for (j in seq(length(ratings_matrix[i, ]))){\n\n if (ratings_matrix[i, j] > 0){\n\n e = e + (ratings_matrix[i, j] - /\n as.numeric(X[i, ] %*% Y[, j]))^2\n\n for (k in seq(K)){\n e = e + (beta/2) * (X[i, k]^2 + Y[k, j]^2)\n }\n }\n }\n}\n\n```", "```py\n# load raw ratings from csv\nraw_ratings <- read.csv(\"product_ratings.csv\")\n\n# convert columnar data to sparse ratings matrix\nratings_matrix <- data.matrix(raw_ratings)\n\n# number of rows in ratings\nrows <- nrow(ratings_matrix)\n\n# number of columns in ratings matrix\ncolumns <- ncol(ratings_matrix)\n\n# latent features\nK <- 2\n\n# User-Feature Matrix\nX <- matrix(runif(rows*K), nrow=rows, byrow=TRUE)\n\n# Item-Feature Matrix\nY <- matrix(runif(columns*K), nrow=columns, byrow=TRUE)\n\n# iterations\nepoch <- 10000\n\n# rate of descent\nalpha <- 0.0002\n\n# regularization constant\nbeta <- 0.02\n\npred.matrix <- mf_based_ucf(ratings_matrix, X, Y, K, epoch = epoch)\n\n# setting column names\ncolnames(pred.matrix)<-c(\"iPhone.4\",\"iPhone.5s\",\"Nexus.5\",\"Moto.X\",\"Moto.G\",\"Nexus.6\",/\"One.Plus.One\")\n\n```", "```py\n# Load recommenderlab library\nlibrary(\"recommenderlab\")\n\n# Read dataset from csv file\nraw_data <- read.csv(\"product_ratings_data.csv\")\n\n# Create rating matrix from data \nratings_matrix<- as(raw_data, \"realRatingMatrix\")\n\n#view transformed data\nimage(ratings_matrix[1:6,1:10])\n\n```", "```py\n# Extract a sample from ratings matrix\nsample_ratings <-sample(ratings_matrix,1000)\n\n# Get the mean product ratings as given by first user\nrowMeans(sample_ratings[1,])\n\n# Get distribution of item ratings\nhist(getRatings(sample_ratings), breaks=100,/\n xlab = \"Product Ratings\",main = \" Histogram of Product Ratings\")\n\n# Get distribution of normalized item ratings\nhist(getRatings(normalize(sample_ratings)),breaks=100,/\n xlab = \"Normalized Product Ratings\",main = /\n \" Histogram of Normalized Product Ratings\")\n\n# Number of items rated per user\nhist(rowCounts(sample_ratings),breaks=50,/\n xlab = \"Number of Products\",main =/\n \" Histogram of Product Count Distribution\")\n\n```", "```py\n# Create 'User Based collaborative filtering' model \nubcf_recommender <- Recommender(ratings_matrix[1:1000],\"UBCF\")\n\n```", "```py\n# Predict list of product which can be recommended to given users\nrecommendations <- predict(ubcf_recommender,/\n ratings_matrix[1010:1011], n=5)\n\n# show recommendation in form of the list\nas(recommendations, \"list\")\n\n```", "```py\n# output generated by the model\n[[1]]\n[1] \"prod_93\" \"prod_79\" \"prod_80\" \"prod_83\" \"prod_89\"\n\n[[2]]\n[1] \"prod_80\" \"prod_85\" \"prod_87\" \"prod_75\" \"prod_79\"\n\n```", "```py\n# Evaluation scheme\neval_scheme <- evaluationScheme(ratings_matrix[1:500],/\n method=\"split\",train=0.9,given=15)\n\n# View the evaluation scheme\neval_scheme\n\n# Training model\ntraining_recommender <- Recommender(getData(eval_scheme,/\n \"train\"), \"UBCF\")\n\n# Preditions on the test dataset\ntest_rating <- predict(training_recommender,/\n getData(eval_scheme, \"known\"), type=\"ratings\")\n\n#Error \nerror <- calcPredictionAccuracy(test_rating,/\n getData(eval_scheme, \"unknown\"))\n\nerror\n\n```", "```py\n# Training model using IBCF\ntraining_recommender_2 <- Recommender(getData(eval_scheme,/\n \"train\"), \"IBCF\")\n\n# Preditions on the test dataset\ntest_rating_2 <- predict(training_recommender_2,/\n getData(eval_scheme, \"known\"),/\n type=\"ratings\")\n\nerror_compare <- rbind(calcPredictionAccuracy(test_rating,/\n getData(eval_scheme, \"unknown\")),/\n calcPredictionAccuracy(test_rating_2,/\n getData(eval_scheme, \"unknown\")))\n\nrownames(error_compare) <- c(\"User Based CF\",\"Item Based CF\")\n\n```"]