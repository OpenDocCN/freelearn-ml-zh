["```py\n    import numpy as np\n    import pandas as pd\n    import matplotlib.pyplot as plt\n    import seaborn as sns\n    from matplotlib import rcParams\n    rcParams['axes.spines.top'] = False\n    rcParams['axes.spines.right'] = False\n    df = pd.read_csv('data/Fish.csv')\n    df.head()\n    ```", "```py\n    df.isnull().sum()\n    ```", "```py\n    plt.figure(figsize=(12, 7))\n    plt.title('Target variable (Weight) distribution', size=20)\n    plt.xlabel('Weight', size=14)\n    plt.ylabel('Count', size=14)\n    plt.hist(df['Weight'], bins=15, color='#4f4f4f', ec='#040404');\n    ```", "```py\n    def describe_species(species):\n        subset = df[df['Species'] == species]\n        print(f'============ {species.upper()} ============')\n        print(f'Count: {len(subset)}')\n        print(f'Pct. total: {(len(subset) / len(df) * 100):.2f}%')\n        for column in df.columns[1:]:\n            avg = np.round(subset[column].mean(), 2)\n            sd = np.round(subset[column].std(), 2)\n            print(f'Avg. {column:>7}: {avg:6} +/- {sd:6}')\n    for species in df['Species'].unique():\n        describe_species(species)\n        print()\n    ```", "```py\n    plt.figure(figsize=(12, 9))\n    plt.title('Correlation matrix', size=20)\n    sns.heatmap(df.corr(), annot=True, cmap='Blues');\n    ```", "```py\n    species_dummies = pd.get_dummies(df['Species'], drop_first=True, prefix='Is')\n    df = pd.concat([species_dummies, df], axis=1)\n    df.drop('Species', axis=1, inplace=True)\n    df.head()\n    ```", "```py\n    from tpot import TPOTRegressor\n    from sklearn.model_selection import train_test_split\n    from sklearn.metrics import mean_squared_error, make_scorer\n    rmse = lambda y, y_hat: np.sqrt(mean_squared_error(y, y_hat))\n    ```", "```py\n    X = df.drop('Weight', axis=1)\n    y = df['Weight']\n    X_train, X_test, y_train, y_test = train_test_split(\n        X, y, test_size=0.25, random_state=42\n    )\n    ```", "```py\n    from sklearn.linear_model import LinearRegression\n    lm = LinearRegression()\n    lm.fit(X_train, y_train)\n    lm_preds = lm.predict(X_test)\n    rmse(y_test, lm_preds)\n    ```", "```py\n    rmse_scorer = make_scorer(rmse, greater_is_better=False)\n    pipeline_optimizer = TPOTRegressor(\n        scoring=rmse_scorer,\n        max_time_mins=10,\n        random_state=42\n    )\n    pipeline_optimizer.fit(X_train, y_train)\n    ```", "```py\n    pipeline_optimizer.score(X_test, y_test)\n    ```", "```py\n    pipeline_optimizer.export('fish_pipeline.py')\n    ```", "```py\n    import numpy as np\n    import pandas as pd\n    import matplotlib.pyplot as plt\n    import seaborn as sns\n    from matplotlib import rcParams\n    rcParams['axes.spines.top'] = False\n    rcParams['axes.spines.right'] = False\n    df = pd.read_csv('data/insurance.csv')\n    df.head()\n    ```", "```py\n    df.isnull().sum()\n    ```", "```py\n    plt.figure(figsize=(12, 7))\n    plt.title('Target variable (charges) distribution', size=20)\n    plt.xlabel('Charge', size=14)\n    plt.ylabel('Count', size=14)\n    plt.hist(df['charges'], bins=15, color='#4f4f4f', ec='#040404');\n    ```", "```py\n    def make_bar_chart(column, title, ylabel, xlabel, y_offset=0.12, x_offset=700):\n        ax = df.groupby(column).median()[['charges']].plot(\n            kind='bar', figsize=(10, 6), fontsize=13, color='#4f4f4f'\n        )\n        ax.set_title(title, size=20, pad=30)\n        ax.set_ylabel(ylabel, fontsize=14)\n        ax.set_xlabel(xlabel, fontsize=14)\n        ax.get_legend().remove()\n\n        for i in ax.patches:\n            ax.text(i.get_x() + x_offset, i.get_height() + y_offset, f'${str(round(i.get_height(), 2))}', fontsize=15)\n        return ax\n    ```", "```py\n    make_bar_chart(\n        column='smoker',\n        title='Median insurance charges for smokers and non-smokers',\n        ylabel='Insurance charge ($)',\n        xlabel='Do they smoke?',\n        y_offset=700,\n        x_offset=0.12\n    )\n    ```", "```py\n    make_bar_chart(\n        column='sex',\n        title='Median insurance charges between genders',\n        ylabel='Insurance charge ($)',\n        xlabel='Gender',\n        y_offset=200,\n        x_offset=0.15\n    )\n    ```", "```py\n    make_bar_chart(\n        column='children',\n        title='Median insurance charges by number of children',\n        ylabel='Insurance charge ($)',\n        xlabel='Number of children',\n        y_offset=200,\n        x_offset=-0.15\n    )\n    ```", "```py\n    make_bar_chart(\n        column='region',\n        title='Median insurance charges by region',\n        ylabel='Insurance charge ($)',\n        xlabel='Region',\n        y_offset=200,\n        x_offset=0\n    )\n    ```", "```py\n    df['sex'] = [1 if x == 'female' else 0 for x in df['sex']]\n    df.rename(columns={'sex': 'is_female'}, inplace=True)\n    df['smoker'] = [1 if x == 'yes' else 0 for x in df['smoker']]\n    region_dummies = pd.get_dummies(df['region'], drop_first=True, prefix='region')\n    df = pd.concat([region_dummies, df], axis=1)\n    df.drop('region', axis=1, inplace=True)\n    df.head()\n    ```", "```py\n    plt.figure(figsize=(12, 9))\n    plt.title('Correlation matrix', size=20)\n    sns.heatmap(df.corr(), annot=True, cmap='Blues');\n    ```", "```py\n    from sklearn.model_selection import train_test_split\n    X = df.drop('charges', axis=1)\n    y = df['charges']\n    X_train, X_test, y_train, y_test = train_test_split(\n        X, y, test_size=0.25, random_state=42\n    )\n    y_train.shape, y_test.shape\n    ```", "```py\n    from sklearn.linear_model import LinearRegression\n    from sklearn.metrics import r2_score, mean_squared_error\n    rmse = lambda y, y_hat: np.sqrt(mean_squared_error(y, y_hat))\n    lm = LinearRegression()\n    lm.fit(X_train, y_train)\n    lm_preds = lm.predict(X_test)\n    print(f'R2   = {r2_score(y_test, lm_preds):.2f}')\n    print(f'RMSE = {rmse(y_test, lm_preds):.2f}')\n    ```", "```py\n    for i, column in enumerate(df.columns[:-1]):\n        coef = np.round(lm.coef_[i], 2)\n        print(f'{column:17}: {coef:8}')\n    ```", "```py\n    from tpot import TPOTRegressor\n    pipeline_optimizer = TPOTRegressor(\n        scoring='r2',\n        max_time_mins=10,\n        random_state=42,\n        verbosity=2\n    )\n    pipeline_optimizer.fit(X_train, y_train)\n    ```", "```py\n    pipeline_optimizer.score(X_test, y_test)\n    ```", "```py\n    tpot_preds = pipeline_optimizer.predict(X_test)\n    print(f'R2   = {r2_score(y_test, tpot_preds):.2f}')\n    print(f'RMSE = {rmse(y_test, tpot_preds):.2f}')\n    ```", "```py\n    pipeline_optimizer.export('insurance_pipeline.py')\n    ```", "```py\n    import numpy as np\n    import pandas as pd\n    import matplotlib.pyplot as plt\n    import seaborn as sns\n    from matplotlib import rcParams\n    rcParams['axes.spines.top'] = False\n    rcParams['axes.spines.right'] = False\n    df = pd.read_csv('data/Car.csv')\n    df.head()\n    ```", "```py\n    df.isnull().sum()\n    ```", "```py\n    df.dropna(inplace=True)\n    df.isnull().sum()\n    ```", "```py\n        def remap_owner(owner):\n            if owner == 'First Owner': return 1\n            elif owner == 'Second Owner': return 2\n            elif owner == 'Third Owner': return 3\n            elif owner == 'Fourth & Above Owner': return 4\n            else: return 0\n        ```", "```py\n        df['transmission'] = [1 if x == 'Manual' else 0 for x in df['transmission']]\n        df.rename(columns={'transmission': 'is_manual'}, inplace=True)\n        df['owner'] = df['owner'].apply(remap_owner)\n        df['name'] = df['name'].apply(lambda x: x.split()[0])\n        df['mileage'] = df['mileage'].apply(lambda x: x.split()[0]).astype(float)\n        df['engine'] = df['engine'].apply(lambda x: x.split()[0]).astype(int)\n        df['max_power'] = df['max_power'].apply(lambda x: x.split()[0]).astype(float)\n        brand_dummies = pd.get_dummies(df['name'], drop_first=True, prefix='brand')\n        fuel_dummies = pd.get_dummies(df['fuel'], drop_first=True, prefix='fuel')\n        seller_dummies = pd.get_dummies(df['seller_type'], drop_first=True, prefix='seller')\n        df.drop(['name', 'fuel', 'seller_type', 'torque'], axis=1, inplace=True)\n        df = pd.concat([df, brand_dummies, fuel_dummies, seller_dummies], axis=1)\n        ```", "```py\n    from sklearn.model_selection import train_test_split\n    X = df.drop('selling_price', axis=1)\n    y = df['selling_price']\n    X_train, X_test, y_train, y_test = train_test_split(\n        X, y, test_size=0.25, random_state=42\n    )\n    y_train.shape, y_test.shape\n    ```", "```py\n    def mape(y, y_hat): \n        y, y_hat = np.array(y), np.array(y_hat)\n        return np.mean(np.abs((y - y_hat) / y)) * 100\n    ```", "```py\n    from sklearn.linear_model import LinearRegression\n    from sklearn.metrics import r2_score\n    lm = LinearRegression()\n    lm.fit(X_train, y_train)\n    lm_preds = lm.predict(X_test)\n    print(f'R2   = {r2_score(y_test, lm_preds):.2f}')\n    print(f'MAPE = {mape(y_test, lm_preds):.2f}')\n    ```", "```py\n    for i, column in enumerate(df.columns[:-1]):\n        coef = np.round(lm.coef_[i], 2)\n        print(f'{column:20}: {coef:12}')\n    ```", "```py\n    from tpot import TPOTRegressor\n    from sklearn.metrics import make_scorer\n    mape_scorer = make_scorer(mape, greater_is_better=False)\n    pipeline_optimizer = TPOTRegressor(\n        scoring=mape_scorer,\n        max_time_mins=10,\n        random_state=42,\n        verbosity=2,\n        n_jobs=-1\n    )\n    pipeline_optimizer.fit(X_train, y_train)\n    ```", "```py\n    tpot_preds = pipeline_optimizer.predict(X_test)\n    print(f'R2   = {r2_score(y_test, tpot_preds):.2f}')\n    print(f'MAPE = {mape(y_test, tpot_preds):.2f}')\n    ```"]