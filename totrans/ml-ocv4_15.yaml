- en: Using OpenVINO with OpenCV
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 OpenVINO 与 OpenCV
- en: In the first chapter, we discussed various new additions in the OpenCV 4.0 release.
    One of the key releases to note is the OpenVINO toolkit. It's also interesting
    to note that the OpenVINO toolkit was selected as the 2019 Developer Tool of the
    Year by Embedded Vision Alliance.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一章中，我们讨论了 OpenCV 4.0 版本中的各种新功能。值得注意的是，OpenVINO 工具包。值得注意的是，OpenVINO 工具包被嵌入式视觉联盟选为
    2019 年开发者工具年度大奖。
- en: In this chapter, we will focus only on how to use the OpenVINO toolkit with
    OpenCV. We will begin by installing the OpenVINO toolkit and then proceed to an
    interactive face detection demo with it. We will also learn to use OpenVINO Model
    Zoo with OpenCV and the OpenVINO **Inference Engine** (**IE**) with OpenCV. At
    the end of this chapter, we will also learn how to carry out image classification
    using OpenCV with OpenVINO IE.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将专注于如何使用 OpenVINO 工具包与 OpenCV。我们将从安装 OpenVINO 工具包开始，然后进行交互式人脸检测演示。我们还将学习如何使用
    OpenVINO 模型动物园与 OpenCV 以及 OpenVINO **推理引擎**（**IE**）与 OpenCV。在本章结束时，我们还将学习如何使用
    OpenCV 和 OpenVINO IE 进行图像分类。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: OpenVINO toolkit installation
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OpenVINO 工具包安装
- en: Interactive face detection demo
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 交互式人脸检测演示
- en: Using OpenVINO Model Zoo with OpenCV
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 OpenVINO 模型动物园与 OpenCV
- en: Using OpenVINO IE with OpenCV
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 OpenVINO IE 与 OpenCV
- en: Image classification using OpenCV with OpenVINO IE
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 OpenVINO IE 进行 OpenCV 图像分类
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: You can refer the code for this chapter at the following link: [https://github.com/PacktPublishing/Machine-Learning-for-OpenCV-Second-Edition/tree/master/Chapter12](https://github.com/PacktPublishing/Machine-Learning-for-OpenCV-Second-Edition/tree/master/Chapter12).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在此链接中查看本章的代码：[https://github.com/PacktPublishing/Machine-Learning-for-OpenCV-Second-Edition/tree/master/Chapter12](https://github.com/PacktPublishing/Machine-Learning-for-OpenCV-Second-Edition/tree/master/Chapter12)。
- en: 'Here is a summary of the software and hardware requirements:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是软件和硬件要求的总结：
- en: You will need OpenCV version 4.1.x (4.1.0 or 4.1.1 will both work just fine).
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您需要 OpenCV 版本 4.1.x（4.1.0 或 4.1.1 都可以正常工作）。
- en: You will need Python version 3.6 (any Python version 3.x will be fine).
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您需要 Python 3.6 版本（任何 3.x 版本的 Python 都可以）。
- en: You will need Anaconda Python 3 to install Python and the required modules.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您需要 Anaconda Python 3 来安装 Python 和所需的模块。
- en: You can use any OS—macOS, Windows, and Linux-based OSes—with this book. We recommend
    you have at least 4 GB RAM in your system.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以使用任何操作系统——macOS、Windows 和基于 Linux 的操作系统——使用这本书。我们建议您的系统至少有 4 GB 的 RAM。
- en: You don't need to have a GPU to run the code provided with this book.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您不需要 GPU 就可以运行本书提供的代码。
- en: Introduction to OpenVINO
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: OpenVINO 简介
- en: '**OpenVINO** (short for **Open Visual Inferencing and Neural Network Optimization**).
    It is designed to optimize various neural networks to speed up the inference stage.
    Inference, as we have discussed in previous chapters, is the process in which
    a trained neural network is used to generate results with unseen input data. For
    example, if a network is trained to classify a dog or cat, then if we feed the
    image of Tuffy (our neighbor''s dog), it should be able to infer that the image
    is of a dog.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**OpenVINO**（代表**Open Visual Inferencing and Neural Network Optimization**）。它旨在优化各种神经网络以加快推理阶段。推理，正如我们在前面的章节中讨论的，是使用训练好的神经网络生成未见输入数据的成果的过程。例如，如果一个网络被训练来分类狗或猫，那么如果我们提供
    Tuffy（我们邻居的狗）的图像，它应该能够推断出该图像是狗的图像。'
- en: Considering that images and videos have become so common in today's world, there
    are a lot of deep neural networks trained to perform various operations, such
    as, multilabel classification, and motion tracking. Most of the inference performed
    in the world occurs on CPUs since GPUs are very expensive and usually do not suit
    the budget of individual AI engineers. In these cases, the speedup provided by
    OpenVINO toolkit is very crucial.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到图像和视频在当今世界的普遍性，有很多深度神经网络被训练来执行各种操作，例如多标签分类和运动跟踪。世界上大多数推理都是在 CPU 上进行的，因为 GPU
    非常昂贵，通常不适合个人 AI 工程师的预算。在这些情况下，OpenVINO 工具包提供的加速非常关键。
- en: The speedup provided by OpenVINO toolkit consists of two steps. The first step
    focuses on the hardware specifications; it optimizes the network in a hardware-agnostic
    way using a Model Optimizer, which ships along with OpenVINO toolkit. The next
    step involves hardware-specific acceleration using OpenVINO IE.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: OpenVINO 工具包提供的加速包括两个步骤。第一步关注硬件规格；它使用随 OpenVINO 工具包一起提供的模型优化器以硬件无关的方式优化网络。下一步涉及使用
    OpenVINO IE 的特定硬件加速。
- en: The OpenVINO toolkit was developed by Intel, which is known for its optimized
    tools as well as hardware, and is focused on deep learning and artificial intelligence.
    It's not surprising to know that VPUs, GPUs, and FPGAs are also manufactured by
    Intel.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: OpenVINO 工具包是由英特尔开发的，英特尔以其优化的工具和硬件而闻名，专注于深度学习和人工智能。了解到 VPUs、GPU 和 FPGA 也由英特尔制造并不令人惊讶。
- en: OpenVINO also provides optimized calls for the OpenCV and OpenVX libraries—the
    two most well-known computer vision libraries.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: OpenVINO 还为 OpenCV 和 OpenVX 库提供了优化调用——这两个最著名的计算机视觉库。
- en: OpenVINO toolkit installation
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: OpenVINO 工具包安装
- en: 'In this section, we will use Intel''s official instructions to install OpenVINO
    toolkit:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用英特尔官方说明来安装 OpenVINO 工具包：
- en: To start, first visit the OpenVINO toolkit download page ([https://software.intel.com/en-us/openvino-toolkit/choose-download](https://software.intel.com/en-us/openvino-toolkit/choose-download)) and,
    depending on your system specifications, select and download the installer. You
    will have to first register your copy of the toolkit.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要开始，首先访问 OpenVINO 工具包下载页面（[https://software.intel.com/en-us/openvino-toolkit/choose-download](https://software.intel.com/en-us/openvino-toolkit/choose-download)），根据您的系统规格选择并下载安装程序。您必须首先注册工具包的副本。
- en: Use the installation instructions ([https://docs.openvinotoolkit.org/latest/index.html](https://docs.openvinotoolkit.org/latest/index.html))
    to install OpenVINO toolkit on your system.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用安装说明（[https://docs.openvinotoolkit.org/latest/index.html](https://docs.openvinotoolkit.org/latest/index.html)）在您的系统上安装
    OpenVINO 工具包。
- en: OpenVINO toolkit will also install its own Intel-optimized version of OpenCV.
    If you already have OpenCV installed on your system, the installer will show that another
    version of OpenCV is already installed. It's better to install the ...
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: OpenVINO 工具包还将安装其自己的英特尔优化版本的 OpenCV。如果您已经在系统上安装了 OpenCV，安装程序将显示已安装了另一个版本的 OpenCV。最好是安装
    ...
- en: OpenVINO components
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: OpenVINO 组件
- en: 'OpenVINO toolkit consists of the following main components:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: OpenVINO 工具包包括以下主要组件：
- en: The **Deep Learning Deployment Toolkit** (**DLDT**) consists of Model Optimizer,
    the IE, pre-trained models and some tools to help you measure accuracy for your
    models.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**深度学习部署工具包**（**DLDT**）包括模型优化器、IE、预训练模型以及一些帮助您测量模型精度的工具。'
- en: There's an optimized version of OpenCV compiled for Intel libraries (which are
    also optimized).
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有针对英特尔库（这些库也是经过优化的）编译的 OpenCV 优化版本。
- en: There are OpenCL libraries.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有 OpenCL 库。
- en: You get Intel's media SDK to speed up video processing.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您将获得英特尔媒体 SDK 以加速视频处理。
- en: There's an optimized version of OpenVX.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 也有针对 OpenVX 的优化版本。
- en: Interactive face detection demo
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 交互式人脸检测演示
- en: The OpenVINO toolkit installation also provides various demo and sample applications.
    Just to test the installation, let's see whether we can run the interactive face
    detection demo.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: OpenVINO 工具包安装还提供了各种演示和示例应用程序。为了测试安装，让我们看看我们是否可以运行交互式人脸检测演示。
- en: First, we will move to the `samples` directory in the `deployment_tools/inference_engine`
    folder. You will find the various demo applications here, such as image classification
    and inference pipeline.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将移动到 `deployment_tools/inference_engine` 文件夹中的 `samples` 目录。在这里，您可以找到各种演示应用程序，例如图像分类和推理管道。
- en: 'The interactive face detection demo takes in video as input and performs face
    detection coupled with age, gender, head-pose, emotion, and facial landmark detection.
    Depending on the kind of detection you want to perform, you can use a model from
    the list of the following pre-trained models:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 交互式人脸检测演示接受视频作为输入，并执行人脸检测以及年龄、性别、头部姿态、情绪和面部特征点检测。根据您要执行的类型的人脸检测，您可以使用以下预训练模型列表中的一个模型：
- en: You can perform face detection only with
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以使用以下方式仅进行人脸检测
- en: Using OpenVINO Inference Engine with OpenCV
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 OpenVINO 推理引擎与 OpenCV
- en: In the previous section, we discussed how to run the interactive face detection
    demo. That's all good, but the question that still remains is how to harness the
    power of OpenVINO with your already existing OpenCV codes. Note that, here, we
    are emphasizing the utilization of the strength of OpenVINO with minimal changes
    in the code. This is very important because OpenVINO was not present in the earlier
    versions of OpenCV, including the more commonly used version 3.4.3\. As a good
    developer, it's your job to make sure that your program supports the maximum number
    of systems and libraries.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，我们讨论了如何运行交互式人脸检测演示。那很好，但仍然存在的问题是如何利用 OpenVINO 的力量与您现有的 OpenCV 代码相结合。请注意，在这里，我们强调的是在代码中尽可能少地修改的情况下利用
    OpenVINO 的优势。这非常重要，因为 OpenVINO 并未出现在 OpenCV 的早期版本中，包括更常用的版本 3.4.3。作为一个优秀的开发者，你的任务是确保你的程序支持尽可能多的系统和库。
- en: 'Luckily for us, all it takes is just one line of code to start using OpenVINO
    Inference Engine for your OpenCV model''s inference code, as shown in the following
    snippet:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，我们只需一行代码就可以开始使用 OpenVINO 推理引擎对 OpenCV 模型的推理代码进行操作，如下面的代码片段所示：
- en: '[PRE0]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'And that''s it! In a complete working example, this is how you will be using
    it:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样！在一个完整的示例中，你将这样使用它：
- en: '[PRE1]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Here, you can use any other method of reading your neural network. In this case,
    we are reading a Caffe model from the `.prototxt` and `.caffemodel` files.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你可以使用读取你的神经网络的任何其他方法。在这种情况下，我们是从 `.prototxt` 和 `.caffemodel` 文件中读取 Caffe
    模型。
- en: 'Similarly, in the case of C++, this is how we can use it:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，在 C++ 的情况下，我们可以这样使用它：
- en: '[PRE2]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Using OpenVINO Model Zoo with OpenCV
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 OpenVINO 模型库与 OpenCV
- en: In the previous sections, we briefly discussed OpenVINO Model Zoo and how we
    can use OpenVINO IE with OpenCV. In this section, we will learn more about Model
    Zoo and what it offers.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，我们简要讨论了 OpenVINO 模型库以及如何使用 OpenVINO IE 与 OpenCV。在本节中，我们将更深入地了解模型库及其提供的功能。
- en: OpenVINO Model Zoo is a collection of optimized pre-trained models that can
    be directly imported into OpenVINO for inference. The importance of this feature
    lies in the fact that one of the major reasons behind OpenVINO's speedup is the
    optimized model file that it takes for inference. The underlying inference principle
    is still the same as most deep learning inference toolkits and languages, such
    as OpenCV. OpenCV's `dnn` module uses this speedup principle of OpenVINO by using
    it as the default backend for all inference tasks. ...
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: OpenVINO 模型库是一个包含优化后的预训练模型的集合，可以直接导入 OpenVINO 进行推理。这一功能的重要性在于，OpenVINO 加速的主要原因是它用于推理的优化模型文件。其底层推理原理与大多数深度学习推理工具包和语言（如
    OpenCV）相同。OpenCV 的 `dnn` 模块通过将其作为所有推理任务的后端默认选项来使用 OpenVINO 的这一加速原理。...
- en: Image classification using OpenCV with OpenVINO Inference Engine
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 OpenVINO 推理引擎进行图像分类的 OpenCV
- en: The final topic that we will discuss in this chapter is how to carry out image
    classification using OpenCV with OpenVINO Inference Engine.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将讨论的最后一个主题是使用 OpenCV 和 OpenVINO 推理引擎进行图像分类。
- en: Before we jump into the details, let's have a brief look at an image classification
    problem. Image classification, also known as **image recognition**, is a part
    of the deep learning set of tasks and is perhaps one of the most common ones.
    In this task, a set of images are provided as input to the model and the model
    outputs the class or the label of the input images.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入细节之前，让我们简要地看一下图像分类问题。图像分类，也称为**图像识别**，是深度学习任务集的一部分，可能是最常见的一种。在这个任务中，一组图像作为输入提供给模型，模型输出输入图像的类别或标签。
- en: A common example of this is the dog and cat classification problem where a model
    is trained on a large number of images of cats and dogs and then, during the testing
    phase, the model predicts whether the input image is an image of a cat or a dog.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这类的一个常见例子是**猫狗分类问题**，其中模型在大量猫和狗的图像上训练，然后在测试阶段，模型预测输入图像是猫还是狗的图像。
- en: 'While this might look like a very naive problem, image classification carries
    a lot of importance in industrial applications. For example, if your camera boasts
    of having AI powers, what it means is that it can recognize the objects present
    in the image and change the image settings accordingly—whether it is an image
    of natural scenery or an Instagram-worthy snap of some food. The following image
    shows the output of an AI mobile phone camera:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这看起来可能是一个非常简单的问题，但在工业应用中，图像分类具有很大的重要性。例如，如果你的相机声称拥有AI功能，这意味着它可以识别图像中的物体，并相应地更改图像设置——无论是自然风景的图像还是Instagram上值得分享的食物照片。以下图像显示了AI手机摄像头的输出：
- en: '![](img/edbc92b5-3e6b-485b-8cc4-db57df905b74.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](img/edbc92b5-3e6b-485b-8cc4-db57df905b74.png)'
- en: Consider the preceding image I took of the roof of my house. Note that the camera,
    when switched to AI mode, was able to detect that I was taking a picture of plants
    and automatically changed the settings to match that. All of this is possible
    only because of image classification. Now, consider that you, as a computer vision
    engineer, are trying to train a model that can recognize whether the image is
    of a plant, waterfall, or human.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑我之前拍摄的房屋屋顶的图像。请注意，当相机切换到AI模式时，它能够检测到我在拍摄植物，并自动更改设置以匹配。所有这一切都只因为图像分类。现在，考虑一下，作为计算机视觉工程师的你，正在尝试训练一个模型，该模型可以识别图像是植物、瀑布还是人类。
- en: All of the efforts that you put in training the model will be wasted if your
    model cannot infer the class or the label of the image within a few milliseconds.
    No user wants to wait for even a couple of seconds for the camera to detect the
    object and change the settings.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的模型无法在几毫秒内推断出图像的类别或标签，你投入的所有训练模型的努力都将白费。没有用户愿意等待几秒钟，让相机检测物体并更改设置。
- en: This brings us back to the importance of OpenVINO's Inference Engine. OpenVINO
    has its own version of an image classification toolkit that can be used as follows.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这使我们回到了OpenVINO推理引擎的重要性。OpenVINO有一个自己的图像分类工具包版本，可以如下使用。
- en: Image classification using OpenVINO
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用OpenVINO进行图像分类
- en: 'Let''s see how we can use the image classification demo present in OpenVINO''s
    installation directory:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看我们如何使用OpenVINO安装目录中现有的图像分类演示：
- en: First, move to the `deployment_tools/demo` directory in your OpenVINO installation
    directory.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，移动到你的OpenVINO安装目录中的`deployment_tools/demo`目录。
- en: 'Next, let''s run image classification on a demo image that''s already present
    in the directory:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，让我们在目录中已经存在的示例图像上运行图像分类：
- en: '[PRE3]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Here''s the result that I obtained:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我的结果：
- en: '![](img/4f84a37b-53c0-40a9-8673-18c9ee7c79c5.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4f84a37b-53c0-40a9-8673-18c9ee7c79c5.png)'
- en: 'Let''s also run another demo that uses the same image, the inference pipeline
    demo, which shows the speed of OpenVINO''s Inference Engine quite well:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再运行另一个使用相同图像的演示，即推理管道演示，它很好地展示了OpenVINO推理引擎的速度：
- en: '[PRE4]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Here''s the output image:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这是输出图像：
- en: Since we are using the same image in ...
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们正在使用相同的图像在 ...
- en: Image classification using OpenCV with OpenVINO
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用OpenCV和OpenVINO进行图像分类
- en: 'Let''s first create an image classification inference code using OpenCV. Since
    we are only concerned with inference, we will use a pre-trained model:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先使用OpenCV创建一个图像分类推理代码。由于我们只关心推理，我们将使用一个预训练的模型：
- en: First, let's download the Caffe model files, `deploy.prototxt` and `bvlc_reference_caffenet.caffemodel`,
    which can be obtained from Berkley Visions' repository ([https://github.com/BVLC/caffe/tree/master/models/bvlc_reference_caffenet](https://github.com/BVLC/caffe/tree/master/models/bvlc_reference_caffenet)).
    Make sure that you download both files in your current working directory. We will
    also need a text file with the class labels mentioned. You can get it from [https://github.com/torch/tutorials/blob/master/7_imagenet_classification/synset_words.txt](https://github.com/torch/tutorials/blob/master/7_imagenet_classification/synset_words.txt).
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，让我们下载Caffe模型文件，`deploy.prototxt`和`bvlc_reference_caffenet.caffemodel`，这些可以从伯克利视觉的仓库中获得（[https://github.com/BVLC/caffe/tree/master/models/bvlc_reference_caffenet](https://github.com/BVLC/caffe/tree/master/models/bvlc_reference_caffenet)）。确保你在当前工作目录中下载这两个文件。我们还需要一个包含提到的类别标签的文本文件。你可以从[https://github.com/torch/tutorials/blob/master/7_imagenet_classification/synset_words.txt](https://github.com/torch/tutorials/blob/master/7_imagenet_classification/synset_words.txt)获取它。
- en: 'Let''s also use a sample image of a giraffe for image classification:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们再使用一张长颈鹿的样本图像进行图像分类：
- en: '![](img/004ca3f3-bb76-4e72-a203-e1765a2ef6d3.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](img/004ca3f3-bb76-4e72-a203-e1765a2ef6d3.jpg)'
- en: Next, let's start writing some code for image classification using OpenCV with
    OpenVINO.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们开始编写使用 OpenCV 和 OpenVINO 进行图像分类的代码：
- en: 'Let''s start off by importing some modules:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们从导入一些模块开始：
- en: '[PRE5]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Next, let''s specify the model files:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，让我们指定模型文件：
- en: '[PRE6]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now, let''s read the labels from the labels text file:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们从标签文本文件中读取标签：
- en: '[PRE7]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Let''s specify the backend that we will use for inference:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们指定我们将用于推理的后端：
- en: '[PRE8]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Let''s carry out some basic image processing on the input image:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们在输入图像上执行一些基本的图像处理：
- en: '[PRE9]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Finally, let''s pass this image to the model and get the output:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，让我们将此图像传递给模型并获取输出：
- en: '[PRE10]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Let''s obtain the top 10 predictions for the image of a giraffe we passed to
    the model:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们获取我们传递给模型的 giraffe 图像的前 10 个预测结果：
- en: '[PRE11]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Finally, let''s display the top 10 predictions:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，让我们显示前 10 个预测结果：
- en: '[PRE12]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'And, surprisingly, here is the result we obtain:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 意想不到的是，这里是我们获得的结果：
- en: '[PRE13]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Notice that our model thought that the `giraffe` image we passed as input was
    actually a `cheetah` image. Why do you think that's the case? That's because `giraffe`
    was not present in the list of classes we had. So, the model came up with the
    closest match, which was because of the similar colored spots present on cheetahs
    and giraffes. So, the next time you carry out image classification, make sure
    the class is actually present in the label list.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们的模型认为我们作为输入传递的 `giraffe` 图像实际上是一张 `cheetah` 图像。你认为这是为什么？那是因为 `giraffe`
    并不在我们拥有的类别列表中。因此，模型找到了最接近的匹配项，这是由于在猎豹和长颈鹿上都有相似的彩色斑点。所以，下次你进行图像分类时，请确保类别确实存在于标签列表中。
- en: 'We can also carry out a comparison between various backends to see the speedup
    obtained using OpenVINO''s Inference Engine as the backend. Here''s how it can
    be done. We need to change just one line in the preceding code:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以比较各种后端，以查看使用 OpenVINO 推理引擎作为后端获得的速度提升。以下是实现方法。我们只需要更改前面代码中的一行：
- en: '[PRE14]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'We can choose between the following backends:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在以下后端之间进行选择：
- en: '`cv2.dnn.DNN_BACKEND_DEFAULT`: This is if you have OpenVINO installed and will
    use it as the default backend.'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cv2.dnn.DNN_BACKEND_DEFAULT`：如果你已安装 OpenVINO 并将其用作默认后端。'
- en: '`cv2.dnn.DNN_BACKEND_HALIDE`: This requires OpenCV to be built with Halide.
    You can find detailed documentation for this at [https://docs.opencv.org/4.1.0/de/d37/tutorial_dnn_halide.html](https://docs.opencv.org/4.1.0/de/d37/tutorial_dnn_halide.html).'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cv2.dnn.DNN_BACKEND_HALIDE`：这需要使用 Halide 构建OpenCV。你可以在[https://docs.opencv.org/4.1.0/de/d37/tutorial_dnn_halide.html](https://docs.opencv.org/4.1.0/de/d37/tutorial_dnn_halide.html)找到有关此内容的详细文档。'
- en: '`cv2.dnn.DNN_BACKEND_OPENCV`: This is the best choice for carrying out a comparison
    between both the backends.'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cv2.dnn.DNN_BACKEND_OPENCV`：这是在两个后端之间进行比较的最佳选择。'
- en: 'So, all you need to do is run the same code but replace the preceding line
    of code with the following:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，你需要做的就是运行相同的代码，但将前面的代码行替换为以下内容：
- en: '[PRE15]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: And that's it! You can now carry out a comparison to see the speedup you obtain
    by using OpenVINO's Inference Engine as the backend.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样！你现在可以使用 OpenVINO 的推理引擎作为后端进行速度比较了。
- en: You won't be able to see much difference in speed. To get a noticeable difference,
    use a `for` loop to carry out the inference 100 times, add up the total time taken
    during each step, and then divide it by 100 to obtain an average.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 你不会在速度上看到太大的差异。为了获得明显的差异，使用 `for` 循环进行 100 次推理，然后将每个步骤所花费的总时间相加，最后除以 100 以获得平均值。
- en: Summary
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we briefly looked at the OpenVINO toolkit—what it is, what
    it's used for, and how we can install it. We also looked at how to run the demos
    and samples provided with the toolkit to understand and witness the power of OpenVINO.
    Finally, we saw how to harness this power in our pre-existing OpenCV codes by
    just adding one line specifying the backend to be used for model inference.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们简要介绍了 OpenVINO 工具包——它是什么，它用于什么，以及我们如何安装它。我们还探讨了如何运行工具包提供的演示和示例，以了解和见证
    OpenVINO 的强大功能。最后，我们看到了如何通过仅添加一行指定用于模型推理的后端来在我们的现有 OpenCV 代码中利用这种功能。
- en: You might have also noticed that we didn't cover much hands-on content in this
    chapter. That's because OpenVINO is more suited for deep learning applications,
    which are not in the scope of this book. If you are a deep learning enthusiast,
    you should definitely go through the documentation provided by Intel on the OpenVINO
    toolkit and get started. ...
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能也注意到，我们在这章中没有涵盖太多动手实践的内容。这是因为OpenVINO更适合深度学习应用，而这本书的范围不包括这些内容。如果你是深度学习的爱好者，你绝对应该阅读英特尔提供的关于OpenVINO工具包的文档，并开始学习。
    ...
