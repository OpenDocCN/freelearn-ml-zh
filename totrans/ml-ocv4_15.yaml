- en: Using OpenVINO with OpenCV
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the first chapter, we discussed various new additions in the OpenCV 4.0 release.
    One of the key releases to note is the OpenVINO toolkit. It's also interesting
    to note that the OpenVINO toolkit was selected as the 2019 Developer Tool of the
    Year by Embedded Vision Alliance.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will focus only on how to use the OpenVINO toolkit with
    OpenCV. We will begin by installing the OpenVINO toolkit and then proceed to an
    interactive face detection demo with it. We will also learn to use OpenVINO Model
    Zoo with OpenCV and the OpenVINO **Inference Engine** (**IE**) with OpenCV. At
    the end of this chapter, we will also learn how to carry out image classification
    using OpenCV with OpenVINO IE.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: OpenVINO toolkit installation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Interactive face detection demo
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using OpenVINO Model Zoo with OpenCV
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using OpenVINO IE with OpenCV
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Image classification using OpenCV with OpenVINO IE
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can refer the code for this chapter at the following link: [https://github.com/PacktPublishing/Machine-Learning-for-OpenCV-Second-Edition/tree/master/Chapter12](https://github.com/PacktPublishing/Machine-Learning-for-OpenCV-Second-Edition/tree/master/Chapter12).
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a summary of the software and hardware requirements:'
  prefs: []
  type: TYPE_NORMAL
- en: You will need OpenCV version 4.1.x (4.1.0 or 4.1.1 will both work just fine).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You will need Python version 3.6 (any Python version 3.x will be fine).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You will need Anaconda Python 3 to install Python and the required modules.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can use any OS—macOS, Windows, and Linux-based OSes—with this book. We recommend
    you have at least 4 GB RAM in your system.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You don't need to have a GPU to run the code provided with this book.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction to OpenVINO
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**OpenVINO** (short for **Open Visual Inferencing and Neural Network Optimization**).
    It is designed to optimize various neural networks to speed up the inference stage.
    Inference, as we have discussed in previous chapters, is the process in which
    a trained neural network is used to generate results with unseen input data. For
    example, if a network is trained to classify a dog or cat, then if we feed the
    image of Tuffy (our neighbor''s dog), it should be able to infer that the image
    is of a dog.'
  prefs: []
  type: TYPE_NORMAL
- en: Considering that images and videos have become so common in today's world, there
    are a lot of deep neural networks trained to perform various operations, such
    as, multilabel classification, and motion tracking. Most of the inference performed
    in the world occurs on CPUs since GPUs are very expensive and usually do not suit
    the budget of individual AI engineers. In these cases, the speedup provided by
    OpenVINO toolkit is very crucial.
  prefs: []
  type: TYPE_NORMAL
- en: The speedup provided by OpenVINO toolkit consists of two steps. The first step
    focuses on the hardware specifications; it optimizes the network in a hardware-agnostic
    way using a Model Optimizer, which ships along with OpenVINO toolkit. The next
    step involves hardware-specific acceleration using OpenVINO IE.
  prefs: []
  type: TYPE_NORMAL
- en: The OpenVINO toolkit was developed by Intel, which is known for its optimized
    tools as well as hardware, and is focused on deep learning and artificial intelligence.
    It's not surprising to know that VPUs, GPUs, and FPGAs are also manufactured by
    Intel.
  prefs: []
  type: TYPE_NORMAL
- en: OpenVINO also provides optimized calls for the OpenCV and OpenVX libraries—the
    two most well-known computer vision libraries.
  prefs: []
  type: TYPE_NORMAL
- en: OpenVINO toolkit installation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will use Intel''s official instructions to install OpenVINO
    toolkit:'
  prefs: []
  type: TYPE_NORMAL
- en: To start, first visit the OpenVINO toolkit download page ([https://software.intel.com/en-us/openvino-toolkit/choose-download](https://software.intel.com/en-us/openvino-toolkit/choose-download)) and,
    depending on your system specifications, select and download the installer. You
    will have to first register your copy of the toolkit.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the installation instructions ([https://docs.openvinotoolkit.org/latest/index.html](https://docs.openvinotoolkit.org/latest/index.html))
    to install OpenVINO toolkit on your system.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: OpenVINO toolkit will also install its own Intel-optimized version of OpenCV.
    If you already have OpenCV installed on your system, the installer will show that another
    version of OpenCV is already installed. It's better to install the ...
  prefs: []
  type: TYPE_NORMAL
- en: OpenVINO components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'OpenVINO toolkit consists of the following main components:'
  prefs: []
  type: TYPE_NORMAL
- en: The **Deep Learning Deployment Toolkit** (**DLDT**) consists of Model Optimizer,
    the IE, pre-trained models and some tools to help you measure accuracy for your
    models.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There's an optimized version of OpenCV compiled for Intel libraries (which are
    also optimized).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are OpenCL libraries.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You get Intel's media SDK to speed up video processing.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There's an optimized version of OpenVX.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Interactive face detection demo
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The OpenVINO toolkit installation also provides various demo and sample applications.
    Just to test the installation, let's see whether we can run the interactive face
    detection demo.
  prefs: []
  type: TYPE_NORMAL
- en: First, we will move to the `samples` directory in the `deployment_tools/inference_engine`
    folder. You will find the various demo applications here, such as image classification
    and inference pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: 'The interactive face detection demo takes in video as input and performs face
    detection coupled with age, gender, head-pose, emotion, and facial landmark detection.
    Depending on the kind of detection you want to perform, you can use a model from
    the list of the following pre-trained models:'
  prefs: []
  type: TYPE_NORMAL
- en: You can perform face detection only with
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using OpenVINO Inference Engine with OpenCV
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous section, we discussed how to run the interactive face detection
    demo. That's all good, but the question that still remains is how to harness the
    power of OpenVINO with your already existing OpenCV codes. Note that, here, we
    are emphasizing the utilization of the strength of OpenVINO with minimal changes
    in the code. This is very important because OpenVINO was not present in the earlier
    versions of OpenCV, including the more commonly used version 3.4.3\. As a good
    developer, it's your job to make sure that your program supports the maximum number
    of systems and libraries.
  prefs: []
  type: TYPE_NORMAL
- en: 'Luckily for us, all it takes is just one line of code to start using OpenVINO
    Inference Engine for your OpenCV model''s inference code, as shown in the following
    snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'And that''s it! In a complete working example, this is how you will be using
    it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Here, you can use any other method of reading your neural network. In this case,
    we are reading a Caffe model from the `.prototxt` and `.caffemodel` files.
  prefs: []
  type: TYPE_NORMAL
- en: 'Similarly, in the case of C++, this is how we can use it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Using OpenVINO Model Zoo with OpenCV
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous sections, we briefly discussed OpenVINO Model Zoo and how we
    can use OpenVINO IE with OpenCV. In this section, we will learn more about Model
    Zoo and what it offers.
  prefs: []
  type: TYPE_NORMAL
- en: OpenVINO Model Zoo is a collection of optimized pre-trained models that can
    be directly imported into OpenVINO for inference. The importance of this feature
    lies in the fact that one of the major reasons behind OpenVINO's speedup is the
    optimized model file that it takes for inference. The underlying inference principle
    is still the same as most deep learning inference toolkits and languages, such
    as OpenCV. OpenCV's `dnn` module uses this speedup principle of OpenVINO by using
    it as the default backend for all inference tasks. ...
  prefs: []
  type: TYPE_NORMAL
- en: Image classification using OpenCV with OpenVINO Inference Engine
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The final topic that we will discuss in this chapter is how to carry out image
    classification using OpenCV with OpenVINO Inference Engine.
  prefs: []
  type: TYPE_NORMAL
- en: Before we jump into the details, let's have a brief look at an image classification
    problem. Image classification, also known as **image recognition**, is a part
    of the deep learning set of tasks and is perhaps one of the most common ones.
    In this task, a set of images are provided as input to the model and the model
    outputs the class or the label of the input images.
  prefs: []
  type: TYPE_NORMAL
- en: A common example of this is the dog and cat classification problem where a model
    is trained on a large number of images of cats and dogs and then, during the testing
    phase, the model predicts whether the input image is an image of a cat or a dog.
  prefs: []
  type: TYPE_NORMAL
- en: 'While this might look like a very naive problem, image classification carries
    a lot of importance in industrial applications. For example, if your camera boasts
    of having AI powers, what it means is that it can recognize the objects present
    in the image and change the image settings accordingly—whether it is an image
    of natural scenery or an Instagram-worthy snap of some food. The following image
    shows the output of an AI mobile phone camera:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/edbc92b5-3e6b-485b-8cc4-db57df905b74.png)'
  prefs: []
  type: TYPE_IMG
- en: Consider the preceding image I took of the roof of my house. Note that the camera,
    when switched to AI mode, was able to detect that I was taking a picture of plants
    and automatically changed the settings to match that. All of this is possible
    only because of image classification. Now, consider that you, as a computer vision
    engineer, are trying to train a model that can recognize whether the image is
    of a plant, waterfall, or human.
  prefs: []
  type: TYPE_NORMAL
- en: All of the efforts that you put in training the model will be wasted if your
    model cannot infer the class or the label of the image within a few milliseconds.
    No user wants to wait for even a couple of seconds for the camera to detect the
    object and change the settings.
  prefs: []
  type: TYPE_NORMAL
- en: This brings us back to the importance of OpenVINO's Inference Engine. OpenVINO
    has its own version of an image classification toolkit that can be used as follows.
  prefs: []
  type: TYPE_NORMAL
- en: Image classification using OpenVINO
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s see how we can use the image classification demo present in OpenVINO''s
    installation directory:'
  prefs: []
  type: TYPE_NORMAL
- en: First, move to the `deployment_tools/demo` directory in your OpenVINO installation
    directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, let''s run image classification on a demo image that''s already present
    in the directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s the result that I obtained:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4f84a37b-53c0-40a9-8673-18c9ee7c79c5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s also run another demo that uses the same image, the inference pipeline
    demo, which shows the speed of OpenVINO''s Inference Engine quite well:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s the output image:'
  prefs: []
  type: TYPE_NORMAL
- en: Since we are using the same image in ...
  prefs: []
  type: TYPE_NORMAL
- en: Image classification using OpenCV with OpenVINO
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s first create an image classification inference code using OpenCV. Since
    we are only concerned with inference, we will use a pre-trained model:'
  prefs: []
  type: TYPE_NORMAL
- en: First, let's download the Caffe model files, `deploy.prototxt` and `bvlc_reference_caffenet.caffemodel`,
    which can be obtained from Berkley Visions' repository ([https://github.com/BVLC/caffe/tree/master/models/bvlc_reference_caffenet](https://github.com/BVLC/caffe/tree/master/models/bvlc_reference_caffenet)).
    Make sure that you download both files in your current working directory. We will
    also need a text file with the class labels mentioned. You can get it from [https://github.com/torch/tutorials/blob/master/7_imagenet_classification/synset_words.txt](https://github.com/torch/tutorials/blob/master/7_imagenet_classification/synset_words.txt).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s also use a sample image of a giraffe for image classification:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/004ca3f3-bb76-4e72-a203-e1765a2ef6d3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Next, let's start writing some code for image classification using OpenCV with
    OpenVINO.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start off by importing some modules:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, let''s specify the model files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s read the labels from the labels text file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s specify the backend that we will use for inference:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s carry out some basic image processing on the input image:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, let''s pass this image to the model and get the output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s obtain the top 10 predictions for the image of a giraffe we passed to
    the model:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, let''s display the top 10 predictions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'And, surprisingly, here is the result we obtain:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Notice that our model thought that the `giraffe` image we passed as input was
    actually a `cheetah` image. Why do you think that's the case? That's because `giraffe`
    was not present in the list of classes we had. So, the model came up with the
    closest match, which was because of the similar colored spots present on cheetahs
    and giraffes. So, the next time you carry out image classification, make sure
    the class is actually present in the label list.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also carry out a comparison between various backends to see the speedup
    obtained using OpenVINO''s Inference Engine as the backend. Here''s how it can
    be done. We need to change just one line in the preceding code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'We can choose between the following backends:'
  prefs: []
  type: TYPE_NORMAL
- en: '`cv2.dnn.DNN_BACKEND_DEFAULT`: This is if you have OpenVINO installed and will
    use it as the default backend.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cv2.dnn.DNN_BACKEND_HALIDE`: This requires OpenCV to be built with Halide.
    You can find detailed documentation for this at [https://docs.opencv.org/4.1.0/de/d37/tutorial_dnn_halide.html](https://docs.opencv.org/4.1.0/de/d37/tutorial_dnn_halide.html).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cv2.dnn.DNN_BACKEND_OPENCV`: This is the best choice for carrying out a comparison
    between both the backends.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'So, all you need to do is run the same code but replace the preceding line
    of code with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: And that's it! You can now carry out a comparison to see the speedup you obtain
    by using OpenVINO's Inference Engine as the backend.
  prefs: []
  type: TYPE_NORMAL
- en: You won't be able to see much difference in speed. To get a noticeable difference,
    use a `for` loop to carry out the inference 100 times, add up the total time taken
    during each step, and then divide it by 100 to obtain an average.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we briefly looked at the OpenVINO toolkit—what it is, what
    it's used for, and how we can install it. We also looked at how to run the demos
    and samples provided with the toolkit to understand and witness the power of OpenVINO.
    Finally, we saw how to harness this power in our pre-existing OpenCV codes by
    just adding one line specifying the backend to be used for model inference.
  prefs: []
  type: TYPE_NORMAL
- en: You might have also noticed that we didn't cover much hands-on content in this
    chapter. That's because OpenVINO is more suited for deep learning applications,
    which are not in the scope of this book. If you are a deep learning enthusiast,
    you should definitely go through the documentation provided by Intel on the OpenVINO
    toolkit and get started. ...
  prefs: []
  type: TYPE_NORMAL
