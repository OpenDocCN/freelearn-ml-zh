- en: '5'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Style the App with CSS and Copilot
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Styling an app well can make a huge difference in how a user perceives it. Well-thought-out
    styling includes catering to multiple devices, the smart use of graphics, and
    colors with great contrast.
  prefs: []
  type: TYPE_NORMAL
- en: CSS styling is a big topic, and we will not cover it in detail. However, we
    will show how you can start using it. Just like in the previous chapter, we will
    use our AI assistant to help us generate code. You will see how we will keep using
    comment-based prompting to generate code but also a new technique where nothing
    but the file’s context is used for code generation.
  prefs: []
  type: TYPE_NORMAL
- en: You will also see how we will keep building on our e-commerce project and style
    it.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will see how we can generate the CSS we need and how to
    keep applying the prompting patterns and strategies we’ve used in previous chapters.
    We will continue to build on the e-commerce project and give it an appealing appearance.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Generate CSS**: GitHub Copilot can generate styling, and we will show how
    AI assistance can generate CSS both by looking at surrounding code in a text file
    and based on a CSS comment.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Apply prompting techniques**: There are different techniques we can use to
    get the desired content.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Add CSS to our e-commerce project**: We will select a couple of pages in
    our e-commerce project to show how it benefits from styling.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Business problem: e-commerce'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Just like the previous chapter, we will keep working in the e-commerce domain
    and through its many interesting problems. As this chapter focuses on visualization
    with CSS, what’s the connection to the business, you might wonder? A bad UX, or
    user experience, or an ill-designed site that doesn’t work on devices other than
    desktop or doesn’t cater to accessibility can cost you money as, because of this,
    customers might choose to do business with your competitors.
  prefs: []
  type: TYPE_NORMAL
- en: Problem and data domain
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter continues with the e-commerce business domain and dives specifically
    into a basket page that lists products a customer aims to purchase. The data is
    therefore product data; not only that, but from a data aspect, we need to consider
    how to showcase detailed data relating to products, such as quantity and total
    cost, so the customer can decide what and how many items to buy. These considerations
    should be reflected in the chosen design.
  prefs: []
  type: TYPE_NORMAL
- en: Breaking the problem down into features
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the previous chapter, we chose to identify a larger area, “Authentication,”
    and break that down into specific features. Let’s recall what that feature breakdown
    looked like. After that, we’ll see if we need to change it to instead be more
    design oriented. But first, let’s show the list of features:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Area**: Authentication'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Log in:** User should be able to log in.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Log out:** User should be able to log out.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Create new user:** It should be possible to create a new user.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Update password:** An existing user should be able to update their password.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Reset password:** If a user forgets their password, it should be possible
    to reset it in a safe way.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The above list of features constitutes a good high-level list of what we need
    to support. However, from a design viewpoint, we need to consider things like
    catering to different devices or support accessibility, for example. Therefore,
    a prompt for, let’s say, the first feature might need to be tweaked to look like
    so:'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Prompt]**'
  prefs: []
  type: TYPE_NORMAL
- en: Generate a login page. It should have fields for username, password, and repeat
    password, as well as a login button. It should also support accessibility via
    tooltips and ARIA keys so that it can be used with just the keyboard and mouse.
  prefs: []
  type: TYPE_NORMAL
- en: '**[End of prompt]**'
  prefs: []
  type: TYPE_NORMAL
- en: As you can see from the above prompt, our concern is not only with what UI elements
    we need, like inputs and buttons, but also how it should work.
  prefs: []
  type: TYPE_NORMAL
- en: As before, we recommend that you break down the web app you’re about to build
    into areas and each area into features so as to make prompting easier.
  prefs: []
  type: TYPE_NORMAL
- en: Prompting strategy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We mentioned in the previous chapter that you can both use the Chat mode of
    GitHub Copilot as well as typing inside of a file, and that you’re recommended
    to use both approaches. As for how to prompt, you’re recommended to write shorter
    prompts that you add context to as needed. By doing so, you rely on how GitHub
    Copilot works and how it builds a runtime context based on its underlying model,
    what’s in your open directory, and your open file, among other things. You will
    also see another facet of prompting that doesn’t rely on whether the prompt is
    long or short but rather on how your specific AI tool works. In this chapter,
    we use the “Exploratory prompt pattern” as described in *Chapter 2*.
  prefs: []
  type: TYPE_NORMAL
- en: CSS, or Cascading Style Sheets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: CSS, or Cascading Style Sheets, is used to style HTML pages. It contains various
    constructs that allow you to change things such as fonts, sizes, colors, and layouts.
  prefs: []
  type: TYPE_NORMAL
- en: To follow along with the below-mentioned prompts, you’re recommended to create
    a `product.css` file, or you can just wait until the *Assignment* section later
    in this chapter; it is up to you.
  prefs: []
  type: TYPE_NORMAL
- en: First CSS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To leverage our AI assistant, we can place a CSS-type comment in a CSS file
    just like we do with code, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'As was mentioned in the previous chapter, comment styles are different depending
    on the type of file. HTML comments look like so: `<!-- -->`. CSS comments use
    `/**/` and JavaScript understands both CSS-type comments and `//`. In this chapter,
    you will be using `/**/` as you’re dealing with CSS.'
  prefs: []
  type: TYPE_NORMAL
- en: In GitHub Copilot, you can keep pressing the *Return* key, followed by the *Tab*
    key, to generate and accept new suggestions without needing to type a new prompt.
    Your AI assistant can provide suggestions based on the first typed prompt and
    what code exists in your file.
  prefs: []
  type: TYPE_NORMAL
- en: How this affects our CSS file above is that once we type our first CSS comment,
    we can keep pressing *Return* and *Tab* and the AI assistant will generate CSS
    properties that usually go together with padding and margin. The following output
    is the result of using this technique of pressing the *Return* and *Tab* keys
    and relying on the open file’s context.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is how it looks for `product.css`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that `product.css` is created with the above content, we can include said
    CSS file in an HTML file. Switch to said HTML file (if you’re typing along, create
    an `index.html` file), then add the following prompt at the end of the new file:'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Prompt]**'
  prefs: []
  type: TYPE_NORMAL
- en: Page that includes `product.css`.
  prefs: []
  type: TYPE_NORMAL
- en: '**[End of prompt]**'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Prompt response]**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**[End of response]**'
  prefs: []
  type: TYPE_NORMAL
- en: Observe how it not only correctly adds a link tag to include `product.css` but
    it also generates HTML that might fit a product.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Product CSS showing a product image, title and description](img/B21232_05_01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.1: Product CSS showing a product image, title, and description'
  prefs: []
  type: TYPE_NORMAL
- en: CSS by name
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: So far, we’ve added a comment to generate suggestions. But there’s another way
    we can generate suggestions for our CSS file rather than placing a comment for
    Copilot to react to. The “other” way consists of creating an empty CSS class,
    `.product`, and placing the cursor inside of it. Then use the *Return* key and
    the *Tab* key and see what Copilot generates until you’re happy.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s how you start off your CSS file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Now place the cursor inside of the curly brackets, `{}`, and use the *Return*
    and *Tab* keys for each new line you want suggestions for.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s what the end result could look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Prompt response]**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '**[End of response]**'
  prefs: []
  type: TYPE_NORMAL
- en: Assignment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this assignment, you will create an image gallery app. The gallery should
    show 10 images with 5 images per row. Use what you learned in the previous chapter
    to generate both an HTML file and a separate CSS file.
  prefs: []
  type: TYPE_NORMAL
- en: Use “placeholder” as a keyword to get images.
  prefs: []
  type: TYPE_NORMAL
- en: Your HTML file should add a reference to the generated CSS file to correctly
    apply the CSS.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can find the solution to this assignment in the GitHub repository: [https://github.com/PacktPublishing/AI-Assisted-Software-Development-with-GitHub-Copilot-and-ChatGPT](https://github.com/PacktPublishing/AI-Assisted-Software-Development-with-GitHub-Copilot-and-ChatGPT)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use case: style the e-commerce app'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that you’ve carried out an assignment where you created both a CSS file
    and an HTML file, you should have a better understanding of how to write prompts
    and generate and accept suggestions from GitHub Copilot. Let’s now recall the
    beginning of this chapter, where we talked about the business problem and the
    e-commerce domain. We will now continue to solve problems in this domain but focus
    on visualization using CSS.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will continue with the use case we started with in the previous chapter:
    our e-commerce store. We will focus on the basket page and leave the remaining
    pages for you to implement.'
  prefs: []
  type: TYPE_NORMAL
- en: Basket page
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To style our basket HTML page, we create a `basket.css` file and then we observe
    what CSS classes we introduced in the `basket.html` file. Let’s take a look at
    a representative snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding code, we see the classes `basket` and `basket-item`. Let’s
    create CSS classes for those in `basket.css`:'
  prefs: []
  type: TYPE_NORMAL
- en: Start with a blank `basket.css` and start typing `.basket`. You should see output
    similar to the following when using the *Return* and *Tab* keys repeatedly. When
    you’re happy with the output, type `}` to finish the CSS class.
  prefs: []
  type: TYPE_NORMAL
- en: '**[Prompt response]**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '**[End of response]**'
  prefs: []
  type: TYPE_NORMAL
- en: 'To create the `basket-item` class, type `.basket-item` and use *Return* and
    *Tab* repeatedly. Like before, type `}` when you’re happy with the number of generated
    CSS properties for this CSS class. You should now have generated a CSS output
    similar to the below text:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'If we continue looking at our HTML file, we will see yet another snippet of
    interest:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Use the same prompting technique as before by typing the name of the CSS class
    (`.basket-item` > `.basket-item-button`) and repeatedly using `RETURN` and `TAB`
    to generate the below text:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: You may need to type the `.basket-item-buttons` button class separately and,
    like before, use *Return* and *Tab* repeatedly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Viewing the impact of the applied CSS in a browser, you should see something
    similar to the below appearance:'
  prefs: []
  type: TYPE_NORMAL
- en: '![List of items in a shopping basket](img/B21232_05_02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.2: List of items in a shopping basket'
  prefs: []
  type: TYPE_NORMAL
- en: Challenge
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: How would you change the prompts to create a dark-themed version of your basket
    page?
  prefs: []
  type: TYPE_NORMAL
- en: Quiz
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: How you can generate CSS using your AI assistant?
  prefs: []
  type: TYPE_NORMAL
- en: Create a comment in a CSS file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a class and place the cursor in the class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Both A and B.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You can find the solution to this quiz in the GitHub repository: [https://github.com/PacktPublishing/AI-Assisted-Software-Development-with-GitHub-Copilot-and-ChatGPT](https://github.com/PacktPublishing/AI-Assisted-Software-Development-with-GitHub-Copilot-and-ChatGPT)'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we covered how you can generate CSS using your AI assistant.
    You saw how prompting techniques introduced in the previous chapters can be applied
    to CSS as well.
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, we showed how we could generate text in two different ways, by
    placing a comment at the top of the file or near the area we wanted help with
    or placing the cursor inside a CSS class and letting it generate CSS based on
    the name of the CSS class.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will show how you can add behavior to your app using
    JavaScript. You will see how JavaScript, from a prompting aspect, is similar to
    HTML and CSS. However, you still need to understand the subject matter, which
    is the underlying problem you’re trying to solve.
  prefs: []
  type: TYPE_NORMAL
- en: Join our community on Discord
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Join our community’s Discord space for discussions with the author and other
    readers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://packt.link/aicode](https://packt.link/aicode)'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/QR_Code510410532445718281.png)'
  prefs: []
  type: TYPE_IMG
