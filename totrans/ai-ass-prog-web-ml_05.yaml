- en: '5'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '5'
- en: Style the App with CSS and Copilot
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 CSS 和 Copilot 设计应用
- en: Introduction
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: Styling an app well can make a huge difference in how a user perceives it. Well-thought-out
    styling includes catering to multiple devices, the smart use of graphics, and
    colors with great contrast.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 优雅地设计应用可以极大地改变用户对其的看法。周到的设计包括适应多个设备、智能使用图形和具有良好对比度的颜色。
- en: CSS styling is a big topic, and we will not cover it in detail. However, we
    will show how you can start using it. Just like in the previous chapter, we will
    use our AI assistant to help us generate code. You will see how we will keep using
    comment-based prompting to generate code but also a new technique where nothing
    but the file’s context is used for code generation.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: CSS 样式化是一个很大的主题，我们不会详细讨论。然而，我们将展示如何开始使用它。就像在前一章中一样，我们将使用我们的 AI 助手来帮助我们生成代码。您将看到我们将继续使用基于注释的提示来生成代码，但也会展示一种新的技术，其中仅使用文件上下文来生成代码。
- en: You will also see how we will keep building on our e-commerce project and style
    it.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 您还将看到我们将如何继续构建我们的电子商务项目并对其进行样式化。
- en: In this chapter, we will see how we can generate the CSS we need and how to
    keep applying the prompting patterns and strategies we’ve used in previous chapters.
    We will continue to build on the e-commerce project and give it an appealing appearance.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将看到如何生成所需的 CSS 以及如何继续应用我们在前几章中使用过的提示模式和策略。我们将继续构建电子商务项目，并使其外观吸引人。
- en: 'In this chapter, we will:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将：
- en: '**Generate CSS**: GitHub Copilot can generate styling, and we will show how
    AI assistance can generate CSS both by looking at surrounding code in a text file
    and based on a CSS comment.'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**生成 CSS**：GitHub Copilot 可以生成样式，我们将展示如何通过查看文本文件中的周围代码以及基于 CSS 注释来生成 CSS 的
    AI 辅助。'
- en: '**Apply prompting techniques**: There are different techniques we can use to
    get the desired content.'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应用提示技术**：我们可以使用不同的技术来获取所需的内容。'
- en: '**Add CSS to our e-commerce project**: We will select a couple of pages in
    our e-commerce project to show how it benefits from styling.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**将 CSS 添加到我们的电子商务项目中**：我们将选择电子商务项目中的几个页面来展示它如何从样式化中受益。'
- en: 'Business problem: e-commerce'
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 商业问题：电子商务
- en: Just like the previous chapter, we will keep working in the e-commerce domain
    and through its many interesting problems. As this chapter focuses on visualization
    with CSS, what’s the connection to the business, you might wonder? A bad UX, or
    user experience, or an ill-designed site that doesn’t work on devices other than
    desktop or doesn’t cater to accessibility can cost you money as, because of this,
    customers might choose to do business with your competitors.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 就像前一章一样，我们将继续在电子商务领域工作，并通过其许多有趣的问题。由于本章重点在于使用 CSS 进行可视化，您可能会想知道这与商业有什么联系？一个糟糕的用户体验（UX）、设计不良的网站（除了桌面设备外不工作或不符合无障碍性）可能会让您损失金钱，因为这样，客户可能会选择与您的竞争对手做生意。
- en: Problem and data domain
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题和数据领域
- en: This chapter continues with the e-commerce business domain and dives specifically
    into a basket page that lists products a customer aims to purchase. The data is
    therefore product data; not only that, but from a data aspect, we need to consider
    how to showcase detailed data relating to products, such as quantity and total
    cost, so the customer can decide what and how many items to buy. These considerations
    should be reflected in the chosen design.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将继续探讨电子商务业务领域，并具体深入到一个列出客户打算购买的产品页面的购物车页面。因此，数据是产品数据；不仅如此，从数据角度来看，我们需要考虑如何展示与产品相关的详细数据，例如数量和总成本，以便客户可以决定购买什么以及购买多少项。这些考虑应该反映在所选的设计中。
- en: Breaking the problem down into features
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将问题分解为功能
- en: 'In the previous chapter, we chose to identify a larger area, “Authentication,”
    and break that down into specific features. Let’s recall what that feature breakdown
    looked like. After that, we’ll see if we need to change it to instead be more
    design oriented. But first, let’s show the list of features:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一章中，我们选择识别一个更大的区域，“认证”，并将其分解为具体的功能。让我们回顾一下这个功能分解看起来是什么样子。之后，我们将看看是否需要将其改为更注重设计。但首先，让我们展示功能列表：
- en: '**Area**: Authentication'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**区域**：认证'
- en: '**Log in:** User should be able to log in.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**登录**：用户应该能够登录。'
- en: '**Log out:** User should be able to log out.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**登出**：用户应该能够登出。'
- en: '**Create new user:** It should be possible to create a new user.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**创建新用户**：应该能够创建新用户。'
- en: '**Update password:** An existing user should be able to update their password.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**更新密码**：现有用户应该能够更新他们的密码。'
- en: '**Reset password:** If a user forgets their password, it should be possible
    to reset it in a safe way.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**重置密码**：如果用户忘记了他们的密码，应该能够以安全的方式重置它。'
- en: 'The above list of features constitutes a good high-level list of what we need
    to support. However, from a design viewpoint, we need to consider things like
    catering to different devices or support accessibility, for example. Therefore,
    a prompt for, let’s say, the first feature might need to be tweaked to look like
    so:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 上述功能列表构成了一个良好的高级列表，列出了我们需要支持的内容。然而，从设计角度来看，我们需要考虑诸如适应不同设备或支持辅助功能等问题。因此，对于第一个功能，可能需要调整提示以看起来像这样：
- en: '**[Prompt]**'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '**[提示]**'
- en: Generate a login page. It should have fields for username, password, and repeat
    password, as well as a login button. It should also support accessibility via
    tooltips and ARIA keys so that it can be used with just the keyboard and mouse.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个登录页面。它应该有用户名、密码和重复密码字段，以及一个登录按钮。它还应支持通过工具提示和 ARIA 键的辅助功能，以便仅使用键盘和鼠标即可使用。
- en: '**[End of prompt]**'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**[提示结束]**'
- en: As you can see from the above prompt, our concern is not only with what UI elements
    we need, like inputs and buttons, but also how it should work.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如您从上面的提示中可以看到，我们的关注点不仅包括我们需要的 UI 元素，如输入和按钮，还包括它们应该如何工作。
- en: As before, we recommend that you break down the web app you’re about to build
    into areas and each area into features so as to make prompting easier.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 与之前一样，我们建议您将您即将构建的 Web 应用程序分解为区域，并将每个区域分解为功能，以便更容易地进行提示。
- en: Prompting strategy
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提示策略
- en: We mentioned in the previous chapter that you can both use the Chat mode of
    GitHub Copilot as well as typing inside of a file, and that you’re recommended
    to use both approaches. As for how to prompt, you’re recommended to write shorter
    prompts that you add context to as needed. By doing so, you rely on how GitHub
    Copilot works and how it builds a runtime context based on its underlying model,
    what’s in your open directory, and your open file, among other things. You will
    also see another facet of prompting that doesn’t rely on whether the prompt is
    long or short but rather on how your specific AI tool works. In this chapter,
    we use the “Exploratory prompt pattern” as described in *Chapter 2*.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们提到您可以使用 GitHub Copilot 的 Chat 模式，也可以在文件内部进行输入，并且建议您使用这两种方法。至于如何进行提示，建议您编写较短的提示，并在需要时添加上下文。这样做，您就依赖于
    GitHub Copilot 的工作方式以及它如何根据其底层模型、您的开放目录和您的开放文件等构建运行时上下文。您还将看到提示的另一个方面，这并不依赖于提示的长短，而是取决于您特定的
    AI 工具如何工作。在本章中，我们使用 *第 2 章* 中描述的“探索性提示模式”。
- en: CSS, or Cascading Style Sheets
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CSS，或层叠样式表
- en: CSS, or Cascading Style Sheets, is used to style HTML pages. It contains various
    constructs that allow you to change things such as fonts, sizes, colors, and layouts.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: CSS，或层叠样式表，用于美化 HTML 页面。它包含各种结构，允许您更改字体、大小、颜色和布局等。
- en: To follow along with the below-mentioned prompts, you’re recommended to create
    a `product.css` file, or you can just wait until the *Assignment* section later
    in this chapter; it is up to you.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 要跟随下面提到的提示，建议您创建一个 `product.css` 文件，或者您也可以等到本章后面的 *作业* 部分；这取决于您。
- en: First CSS
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 首个 CSS
- en: 'To leverage our AI assistant, we can place a CSS-type comment in a CSS file
    just like we do with code, for example:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 要利用我们的 AI 助手，我们可以在 CSS 文件中放置一个类似于代码的 CSS 类型的注释，例如：
- en: '[PRE0]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'As was mentioned in the previous chapter, comment styles are different depending
    on the type of file. HTML comments look like so: `<!-- -->`. CSS comments use
    `/**/` and JavaScript understands both CSS-type comments and `//`. In this chapter,
    you will be using `/**/` as you’re dealing with CSS.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，注释样式根据文件类型而有所不同。HTML 注释看起来是这样的：`<!-- -->`。CSS 注释使用 `/**/`，而 JavaScript
    可以理解 CSS 类型的注释和 `//`。在本章中，您将使用 `/**/`，因为您正在处理 CSS。
- en: In GitHub Copilot, you can keep pressing the *Return* key, followed by the *Tab*
    key, to generate and accept new suggestions without needing to type a new prompt.
    Your AI assistant can provide suggestions based on the first typed prompt and
    what code exists in your file.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在 GitHub Copilot 中，您可以持续按下 *回车* 键，然后按下 *Tab* 键，以生成并接受新的建议，而无需输入新的提示。您的 AI 助手可以根据您输入的第一个提示和文件中存在的代码提供建议。
- en: How this affects our CSS file above is that once we type our first CSS comment,
    we can keep pressing *Return* and *Tab* and the AI assistant will generate CSS
    properties that usually go together with padding and margin. The following output
    is the result of using this technique of pressing the *Return* and *Tab* keys
    and relying on the open file’s context.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这如何影响我们上面的CSS文件，那就是一旦我们输入第一个CSS注释，我们就可以继续按*Enter*和*Tab*键，AI助手将生成通常与填充和边距一起使用的CSS属性。以下输出是使用按*Enter*和*Tab*键的技术和依赖于打开文件上下文的结果。
- en: 'This is how it looks for `product.css`:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是`product.css`的显示方式：
- en: '[PRE1]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now that `product.css` is created with the above content, we can include said
    CSS file in an HTML file. Switch to said HTML file (if you’re typing along, create
    an `index.html` file), then add the following prompt at the end of the new file:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在已经使用上述内容创建了`product.css`，我们可以在HTML文件中包含该CSS文件。切换到该HTML文件（如果你正在跟随输入，创建一个`index.html`文件），然后在文件的末尾添加以下提示：
- en: '**[Prompt]**'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**[提示]**'
- en: Page that includes `product.css`.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 包含`product.css`的页面。
- en: '**[End of prompt]**'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '**[提示结束]**'
- en: '**[Prompt response]**'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**[提示响应]**'
- en: '[PRE2]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**[End of response]**'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '**[响应结束]**'
- en: Observe how it not only correctly adds a link tag to include `product.css` but
    it also generates HTML that might fit a product.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 观察它不仅正确地添加了链接标签以包含`product.css`，而且还生成了可能适合产品的HTML。
- en: 'The following is the output:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 以下为输出结果：
- en: '![Product CSS showing a product image, title and description](img/B21232_05_01.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![显示产品图片、标题和描述的产品CSS](img/B21232_05_01.png)'
- en: 'Figure 5.1: Product CSS showing a product image, title, and description'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.1：产品CSS显示产品图片、标题和描述
- en: CSS by name
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 按名称排序的CSS
- en: So far, we’ve added a comment to generate suggestions. But there’s another way
    we can generate suggestions for our CSS file rather than placing a comment for
    Copilot to react to. The “other” way consists of creating an empty CSS class,
    `.product`, and placing the cursor inside of it. Then use the *Return* key and
    the *Tab* key and see what Copilot generates until you’re happy.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经添加了一个注释来生成建议。但还有一种方法可以生成CSS文件的建议，而不是为Copilot添加注释。这种方法包括创建一个空的CSS类`.product`，并将光标放在其中。然后使用*Enter*键和*Tab*键，看看Copilot生成什么，直到你满意为止。
- en: 'Here’s how you start off your CSS file:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这是你开始CSS文件的方式：
- en: '[PRE3]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Now place the cursor inside of the curly brackets, `{}`, and use the *Return*
    and *Tab* keys for each new line you want suggestions for.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在将光标放在花括号`{}`内，并使用*Enter*和*Tab*键为每个需要建议的新行。
- en: 'Here’s what the end result could look like:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能是最终结果的样子：
- en: '**[Prompt response]**'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '**[提示响应]**'
- en: '[PRE4]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '**[End of response]**'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '**[响应结束]**'
- en: Assignment
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 作业
- en: In this assignment, you will create an image gallery app. The gallery should
    show 10 images with 5 images per row. Use what you learned in the previous chapter
    to generate both an HTML file and a separate CSS file.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个作业中，你将创建一个图片画廊应用。画廊应显示10张图片，每行5张。使用你在上一章中学到的知识来生成HTML文件和单独的CSS文件。
- en: Use “placeholder” as a keyword to get images.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 使用“占位符”作为关键词来获取图片。
- en: Your HTML file should add a reference to the generated CSS file to correctly
    apply the CSS.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 你的HTML文件应该添加对生成的CSS文件的引用，以便正确应用CSS。
- en: Solution
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解决方案
- en: 'You can find the solution to this assignment in the GitHub repository: [https://github.com/PacktPublishing/AI-Assisted-Software-Development-with-GitHub-Copilot-and-ChatGPT](https://github.com/PacktPublishing/AI-Assisted-Software-Development-with-GitHub-Copilot-and-ChatGPT)'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在GitHub仓库中找到这个作业的解决方案：[https://github.com/PacktPublishing/AI-Assisted-Software-Development-with-GitHub-Copilot-and-ChatGPT](https://github.com/PacktPublishing/AI-Assisted-Software-Development-with-GitHub-Copilot-and-ChatGPT)
- en: 'Use case: style the e-commerce app'
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用例：为电子商务应用添加样式
- en: Now that you’ve carried out an assignment where you created both a CSS file
    and an HTML file, you should have a better understanding of how to write prompts
    and generate and accept suggestions from GitHub Copilot. Let’s now recall the
    beginning of this chapter, where we talked about the business problem and the
    e-commerce domain. We will now continue to solve problems in this domain but focus
    on visualization using CSS.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经完成了一个作业，其中你创建了CSS文件和HTML文件，你应该对如何编写提示以及从GitHub Copilot生成和接受建议有了更好的理解。现在让我们回顾本章的开头，我们讨论了商业问题和电子商务领域。我们将继续在这个领域解决问题，但将重点放在使用CSS进行可视化。
- en: 'We will continue with the use case we started with in the previous chapter:
    our e-commerce store. We will focus on the basket page and leave the remaining
    pages for you to implement.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将继续使用上一章中开始的使用案例：我们的电子商务商店。我们将专注于购物车页面，其余页面留给你来实现。
- en: Basket page
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 购物车页面
- en: 'To style our basket HTML page, we create a `basket.css` file and then we observe
    what CSS classes we introduced in the `basket.html` file. Let’s take a look at
    a representative snippet:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 为了样式化我们的购物车 HTML 页面，我们创建一个 `basket.css` 文件，然后观察我们在 `basket.html` 文件中引入的 CSS
    类。让我们看一下一个代表性的片段：
- en: '[PRE5]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In the preceding code, we see the classes `basket` and `basket-item`. Let’s
    create CSS classes for those in `basket.css`:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们看到类 `basket` 和 `basket-item`。让我们在 `basket.css` 中为这些创建 CSS 类：
- en: Start with a blank `basket.css` and start typing `.basket`. You should see output
    similar to the following when using the *Return* and *Tab* keys repeatedly. When
    you’re happy with the output, type `}` to finish the CSS class.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 从一个空的 `basket.css` 开始，键入 `.basket`。当你使用 *Return* 和 *Tab* 键反复操作时，你应该会看到以下类似的输出。当你对输出满意时，键入
    `}` 来完成 CSS 类。
- en: '**[Prompt response]**'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '**[提示响应]**'
- en: '[PRE6]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '**[End of response]**'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '**[响应结束]**'
- en: 'To create the `basket-item` class, type `.basket-item` and use *Return* and
    *Tab* repeatedly. Like before, type `}` when you’re happy with the number of generated
    CSS properties for this CSS class. You should now have generated a CSS output
    similar to the below text:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建 `basket-item` 类，键入 `.basket-item` 并反复使用 *Return* 和 *Tab* 键。像之前一样，当你对生成的
    CSS 属性数量满意时，键入 `}`。你现在应该已经生成了一个类似于以下文本的 CSS 输出：
- en: '[PRE7]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'If we continue looking at our HTML file, we will see yet another snippet of
    interest:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们继续查看我们的 HTML 文件，我们还会看到另一个有趣的片段：
- en: '[PRE8]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Use the same prompting technique as before by typing the name of the CSS class
    (`.basket-item` > `.basket-item-button`) and repeatedly using `RETURN` and `TAB`
    to generate the below text:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 使用之前相同的提示技术，通过键入 CSS 类名（`.basket-item` > `.basket-item-button`）并反复使用 `RETURN`
    和 `TAB` 键来生成以下文本：
- en: '[PRE9]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: You may need to type the `.basket-item-buttons` button class separately and,
    like before, use *Return* and *Tab* repeatedly.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能需要单独键入 `.basket-item-buttons` 按钮类，并且像之前一样，反复使用 *Return* 和 *Tab* 键。
- en: 'Viewing the impact of the applied CSS in a browser, you should see something
    similar to the below appearance:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中查看应用 CSS 的影响，你应该会看到以下类似的外观：
- en: '![List of items in a shopping basket](img/B21232_05_02.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![购物车中的项目列表](img/B21232_05_02.png)'
- en: 'Figure 5.2: List of items in a shopping basket'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.2：购物车中的项目列表
- en: Challenge
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 挑战
- en: How would you change the prompts to create a dark-themed version of your basket
    page?
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 你会如何修改提示来创建一个深色主题的购物车页面？
- en: Quiz
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测验
- en: How you can generate CSS using your AI assistant?
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 你如何使用你的 AI 助手生成 CSS？
- en: Create a comment in a CSS file.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 CSS 文件中创建一个评论。
- en: Create a class and place the cursor in the class.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个类并将光标放在类中。
- en: Both A and B.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: A 和 B 都可以。
- en: 'You can find the solution to this quiz in the GitHub repository: [https://github.com/PacktPublishing/AI-Assisted-Software-Development-with-GitHub-Copilot-and-ChatGPT](https://github.com/PacktPublishing/AI-Assisted-Software-Development-with-GitHub-Copilot-and-ChatGPT)'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 GitHub 仓库中找到这个测验的解决方案：[https://github.com/PacktPublishing/AI-Assisted-Software-Development-with-GitHub-Copilot-and-ChatGPT](https://github.com/PacktPublishing/AI-Assisted-Software-Development-with-GitHub-Copilot-and-ChatGPT)
- en: Summary
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we covered how you can generate CSS using your AI assistant.
    You saw how prompting techniques introduced in the previous chapters can be applied
    to CSS as well.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了如何使用你的 AI 助手生成 CSS。你看到了上一章中引入的提示技术如何应用于 CSS。
- en: Furthermore, we showed how we could generate text in two different ways, by
    placing a comment at the top of the file or near the area we wanted help with
    or placing the cursor inside a CSS class and letting it generate CSS based on
    the name of the CSS class.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还展示了如何以两种不同的方式生成文本，通过在文件顶部放置注释或在我们需要帮助的区域附近放置注释，或者将光标放在 CSS 类内部，让它根据 CSS
    类名生成 CSS。
- en: In the next chapter, we will show how you can add behavior to your app using
    JavaScript. You will see how JavaScript, from a prompting aspect, is similar to
    HTML and CSS. However, you still need to understand the subject matter, which
    is the underlying problem you’re trying to solve.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将展示如何使用 JavaScript 为你的应用添加行为。你会看到从提示的角度来看，JavaScript 与 HTML 和 CSS 类似。然而，你仍然需要理解主题内容，这是你试图解决的潜在问题。
- en: Join our community on Discord
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加入我们的 Discord 社区
- en: 'Join our community’s Discord space for discussions with the author and other
    readers:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 加入我们社区的 Discord 空间，与作者和其他读者进行讨论：
- en: '[https://packt.link/aicode](https://packt.link/aicode)'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://packt.link/aicode](https://packt.link/aicode)'
- en: '![](img/QR_Code510410532445718281.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](img/QR_Code510410532445718281.png)'
