- en: TensorFlow Mobile in Android
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Android 中的 TensorFlow Mobile
- en: In the previous chapter, we focused on supervised learning and unsupervised
    learning, and learned about the different types of learning algorithms. In this chapter,
    we will get introduced to TensorFlow for mobile, and go through a sample program
    implementation using TensorFlow for mobile. In [Chapter 9](3e97f92b-a2d9-4618-9a3b-91552fa3fc3d.xhtml), *Neural
    Networks on Mobile*, we will be using it to implement a classification algorithm.
    But we need to understand how TensorFlow for mobile works and be able to write
    samples using it before we can implement machine learning algorithms with it.
    The objective of this chapter is to get introduced to TensorFlow, TensorFlow Lite,
    TensorFlow for mobile, and their ways of working, and to try hands-on examples
    using TensorFlow for mobile in Android.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们专注于监督学习和无监督学习，并学习了不同类型的机器学习算法。在本章中，我们将介绍 TensorFlow for mobile，并通过使用
    TensorFlow for mobile 的示例程序进行实现。在第 9 章 [神经网络的移动应用](3e97f92b-a2d9-4618-9a3b-91552fa3fc3d.xhtml)中，我们将使用它来实现一个分类算法。但在我们能够使用它实现机器学习算法之前，我们需要了解
    TensorFlow for mobile 的工作原理，并能够编写使用它的示例。本章的目标是介绍 TensorFlow、TensorFlow Lite、TensorFlow
    for mobile 及其工作方式，并尝试使用 TensorFlow for mobile 在 Android 上的实际操作示例。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: An introduction to TensorFlow, TensorFlow Lite, and TensorFlow for mobile
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TensorFlow、TensorFlow Lite 和 TensorFlow for mobile 简介
- en: The components of TensorFlow for mobile
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TensorFlow for Mobile 的组件
- en: The architecture of a mobile machine learning application
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移动机器学习应用程序的架构
- en: Building a sample program using TensorFlow for mobile in Android
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 TensorFlow 在 Android 中构建示例程序
- en: By the end of this chapter, you will know how to build an application using
    TensorFlow for mobile in Android. We will walk through using it in order to implement
    a classification algorithm in [Chapter 9](3e97f92b-a2d9-4618-9a3b-91552fa3fc3d.xhtml), *Neural
    Networks on Mobile*.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将了解如何使用 TensorFlow for mobile 在 Android 中构建应用程序。我们将通过使用它来实现第 9 章 [神经网络的移动应用](3e97f92b-a2d9-4618-9a3b-91552fa3fc3d.xhtml)中的分类算法。
- en: An introduction to TensorFlow
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TensorFlow 简介
- en: 'TensorFlow is a tool to implement machine learning developed by Google, and
    was open sourced in 2015. It is a product that can be installed on desktops and
    can be used to create machine learning models. Once the model has been built and
    trained on the desktop, the developer can transfer these models to mobile devices
    and start using them to predict results in mobile applications by integrating
    them into iOS and Android mobile applications. There are currently two flavors of
    TensorFlow available for implementing machine learning solutions on mobile and
    embedded devices:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: TensorFlow 是由 Google 开发的一种用于实现机器学习的工具，于 2015 年开源。它是一种可以安装在桌面上的产品，可以用来创建机器学习模型。一旦模型在桌面上构建并训练完毕，开发者可以将这些模型转移到移动设备上，并通过将其集成到
    iOS 和 Android 移动应用程序中来预测移动应用程序中的结果。目前有两种 TensorFlow 版本可用于在移动和嵌入式设备上实现机器学习解决方案：
- en: '**Mobile devices**: TensorFlow for Mobile'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**移动设备**：TensorFlow for Mobile'
- en: '**Mobile and Embedded devices**: TensorFlow Lite'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**移动和嵌入式设备**：TensorFlow Lite'
- en: 'The following table will help you to understand the key differences between
    TensorFlow for mobile and TensorFlow Lite:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 下表将帮助您了解 TensorFlow for mobile 和 TensorFlow Lite 之间的关键区别：
- en: '| **TensorFlow for Mobile** | **TensorFlow Lite** |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| **TensorFlow for Mobile** | **TensorFlow Lite** |'
- en: '| Designed to work with larger devices. | Designed to work with really small
    devices. |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| 设计用于与大型设备协同工作。 | 设计用于与非常小的设备协同工作。 |'
- en: '| Binary is optimized for mobile. | Binary is really very small in size optimized
    for mobile and embedded devices, minimal dependencies, and enhanced performance.
    |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| 二进制文件针对移动设备进行了优化。 | 二进制文件针对移动和嵌入式设备进行了非常小的优化，具有最小依赖性和增强的性能。 |'
- en: '| Enables deployment in CPU, GPU, and TPU across Android, iOS, and Raspberry
    Pi. | Supports hardware acceleration. Deployment possible on iOS, Android, and
    Raspberry Pi. |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| 支持在 Android、iOS 和 Raspberry Pi 上的 CPU、GPU 和 TPU 部署。 | 支持硬件加速。可在 iOS、Android
    和 Raspberry Pi 上部署。 |'
- en: '| Recommended for usage now in mobile devices for production deployments. |
    Still under Beta and is undergoing improvements. |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| 建议现在在移动设备上进行生产部署。 | 目前仍处于测试版，正在改进中。 |'
- en: '| Wider operator and ML model support available. | Limited operators supported,
    and not all ML models are supported. |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| 支持更广泛的操作符和机器学习模型。 | 支持的操作符有限，并非所有机器学习模型都受支持。 |'
- en: TensorFlow Lite components
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TensorFlow Lite 组件
- en: 'In this section, we will go through the details of TensorFlow Lite: the overall
    architecture, the key components, and their functionality.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将详细介绍TensorFlow Lite：整体架构、关键组件及其功能。
- en: 'The following diagram provides a high-level overview of the key components
    and how they interact to bring machine learning to mobile devices:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表提供了关键组件及其如何相互作用以将机器学习带到移动设备的高级概述：
- en: '![](img/628519c5-2f39-4323-a659-99e7b4efd8f1.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/628519c5-2f39-4323-a659-99e7b4efd8f1.png)'
- en: 'The following are the key steps to be followed when implementing ML on devices:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在设备上实现机器学习时需要遵循以下关键步骤：
- en: Use the TensorFlow, or any other machine learning framework, to create the trained
    TensorFlow/ML models on the desktop. The trained model can also be created using
    any Cloud ML engine.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用TensorFlow或任何其他机器学习框架在桌面创建训练好的TensorFlow/ML模型。该训练模型也可以使用任何云ML引擎创建。
- en: Use the TensorFlow Lite converter to convert the trained ML model to the TensorFlow
    Lite model file.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用TensorFlow Lite转换器将训练好的机器学习模型转换为TensorFlow Lite模型文件。
- en: Write a mobile application using these files and convert it into a package for
    deployment and execution in mobile devices. These lite files could be interpreted
    and executed directly in the kernels or in the hardware accelerators, if available
    in the device.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用这些文件编写一个移动应用程序，并将其转换为部署和执行在移动设备上的包。这些轻量级文件可以直接在内核或硬件加速器中解释和执行，如果设备中可用的话。
- en: 'The following are the key components of TensorFlow Lite:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是TensorFlow Lite的关键组件：
- en: Model-file format
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模型文件格式
- en: Interpreter
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解释器
- en: Ops/kernel
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ops/内核
- en: Interface to hardware acceleration
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 硬件加速接口
- en: Model-file format
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模型文件格式
- en: 'The following are the highlights of the model-file format:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是该模型文件格式的亮点：
- en: It is lightweight and has very few software dependencies.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它轻量级且具有非常少的软件依赖。
- en: It supports quantization.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它支持量化。
- en: This format is FlatBuffer-based and, hence, increases the speed of execution.
    FlatBuffer is an open source project by Google, originally designed for video
    games.
  id: totrans-36
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 此格式基于FlatBuffer，因此提高了执行速度。FlatBuffer是谷歌的一个开源项目，最初是为视频游戏设计的。
- en: FlatBuffer is a cross-platform serialization library and is similar to protocol
    buffers.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: FlatBuffer是一个跨平台序列化库，类似于协议缓冲区。
- en: This format is more memory-efficient as it does not need a parsing/unpacking
    step to perform a secondary representation prior to data access. There is no marshaling step
    and, hence, it uses less code.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 此格式更节省内存，因为它在数据访问之前不需要解析/解包步骤来执行二级表示。没有序列化步骤，因此它使用更少的代码。
- en: Interpreter
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解释器
- en: 'The following are the highlights of the interpreter:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是对解释器的亮点：
- en: It is a mobile-optimized interpreter.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它是一个针对移动优化的解释器。
- en: It helps to keep mobile apps lean and fast.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它有助于保持移动应用轻量化和快速。
- en: It uses a static-graph ordering and a custom (less dynamic) memory allocator
    to ensure minimal load, initialization, and execution latency.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它使用静态图排序和自定义（较少动态）内存分配器，以确保最小化负载、初始化和执行延迟。
- en: The interpreter has a static memory plan and a static execution plan.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解释器具有静态内存计划和静态执行计划。
- en: Ops/Kernel
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ops/内核
- en: A set of core operators, both quantized and float, many of which have been tuned
    for mobile platforms. These can be used to create and run custom models. Developers
    can also write their own custom operators and use them in models.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 一组核心算子，包括量化和浮点数，其中许多已经针对移动平台进行了调整。这些可以用来创建和运行自定义模型。开发者也可以编写自己的自定义算子并在模型中使用它们。
- en: Interface to hardware acceleration
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 硬件加速接口
- en: TensorFlow Lite has an interface to hardware accelerators; in Android, it is
    through the Android Neural Network API and, in iOS, it is through CoreML.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: TensorFlow Lite具有对硬件加速器的接口；在Android中，它是通过Android Neural Network API，而在iOS中，则是通过CoreML。
- en: 'The following are the pretested models that are guaranteed to work out of the
    box with TensorFlow Lite:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在TensorFlow Lite中预测试的模型，保证开箱即用：
- en: '**Inception V3**: A popular model for detecting the dominant objects present
    in an image.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Inception V3**：一种流行的模型，用于检测图像中存在的占主导地位的对象。'
- en: '**MobileNets:** Computer vision models that can be used for classification,
    detection, and segmentation. MobileNet models are smaller, but less accurate,
    than Inception V3.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**MobileNets**：可用于分类、检测和分割的计算机视觉模型。MobileNet模型比Inception V3模型更小，但精度较低。'
- en: '**On-device smart reply**: An on-device model that provides one-touch replies
    for an incoming text message by suggesting contextually-relevant messages.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**设备端智能回复**：一个设备端模型，通过建议上下文相关的消息，为传入的文本消息提供一键回复。'
- en: The architecture of a mobile machine learning application
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 移动机器学习应用程序的架构
- en: Now that we understand the components of TensorFlow Lite, we'll look at how
    a mobile application works with the TensorFlow components to provide the mobile
    ML solution.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了 TensorFlow Lite 的组件，我们将探讨移动应用程序是如何与 TensorFlow 组件协同工作以提供移动机器学习解决方案的。
- en: 'The mobile application should leverage the TensorFlow Lite model file to perform
    the inference for future data. The TensorFlow Lite model file can either be packaged
    with the mobile application and deployed together, or kept separate from the mobile
    application deployment package. The following diagram depicts the two possible
    deployment scenarios:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 移动应用程序应利用 TensorFlow Lite 模型文件对未来的数据进行推理。TensorFlow Lite 模型文件可以与移动应用程序一起打包并部署，或者与移动应用程序部署包保持分离。以下图表描述了两种可能的部署场景：
- en: '![](img/6bffeb98-43b8-4317-b06d-15857be6f603.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6bffeb98-43b8-4317-b06d-15857be6f603.png)'
- en: Each deployment has its pros and cons. In the first case, where both are coupled,
    there is more security for the model file and it can be kept safe and secured.
    This is a more straightforward approach. However, the application package size
    is increased due to the size of the model file. In the second case, where both
    are kept separate, it is easy to update the model file separately, without performing
    an application upgrade. Hence, all activities with respect to the application
    upgrade, deployment to the app store, and so on can be avoided for a model upgrade.
    The application package size can also be minimized due to this separation. However,
    since the model file is standalone, it should be handled with greater care, without
    leaving it vulnerable to security threats.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 每种部署方式都有其优缺点。在第一种情况下，如果两者耦合在一起，模型文件将拥有更高的安全性，可以保持安全并得到保护。这是一个更为直接的方法。然而，由于模型文件的大小，应用包的大小也会增加。在第二种情况下，如果两者保持分离，可以单独更新模型文件，而无需进行应用升级。因此，可以避免与应用升级、部署到应用商店等相关活动，以实现模型升级。由于这种分离，应用包的大小也可以最小化。然而，由于模型文件是独立的，应该更加小心地处理，以免使其容易受到安全威胁。
- en: 'Having got an overview of the mobile application with the TensorFlow Lite model
    file, let''s look at the whole picture. The mobile application is packaged with
    the TensorFlow Lite model file. This interaction between the mobile application
    written using the Android SDK and the TensorFlow Lite model file happens through
    the TensorFlow Lite Interpreter, which is part of the Android NDK layer. The C
    functions are invoked through the interfaces exposed to the SDK layer from the
    mobile application in order to do the prediction or inference by using the trained
    TensorFlow Lite model deployed with the mobile application. The following diagram
    provides a clear view of the layers of the SDK and NDK of the Android ecosystem
    that will be involved in a typical machine learning program. The execution can
    also be triggered on GPU or any specialized processors through the android NN
    layer:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在对使用 TensorFlow Lite 模型文件的移动应用程序有一个概述之后，让我们看看整个图景。移动应用程序与 TensorFlow Lite 模型文件一起打包。这种交互是通过
    TensorFlow Lite Interpreter 实现的，它是 Android NDK 层的一部分。通过移动应用程序暴露给 SDK 层的接口调用 C
    函数，以使用与移动应用程序一起部署的已训练 TensorFlow Lite 模型进行预测或推理。以下图表提供了一个清晰的视图，展示了 Android 生态系统中将参与典型机器学习程序的
    SDK 和 NDK 层。执行也可以通过 android NN 层在 GPU 或任何专用处理器上触发：
- en: '![](img/bf31274a-6fd3-4944-b593-0ac6b96428e8.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bf31274a-6fd3-4944-b593-0ac6b96428e8.png)'
- en: Understanding the model concepts
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解模型概念
- en: Before writing our first program using TensorFlow, we will briefly go through
    the concepts that will help us to understand how the TensorFlow Lite model work.
    We won't be going into the details, but a conceptual high level overview alone
    for better understanding.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 TensorFlow 编写第一个程序之前，我们将简要地回顾一下那些有助于我们理解 TensorFlow Lite 模型工作原理的概念。我们不会深入细节，但仅仅一个概念性的高层次概述就能更好地理解。
- en: MobileNet and Inception V3 are the built-in models that are based on **convolutional
    neural networks** (**CNNs**).
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: MobileNet 和 Inception V3 是基于 **卷积神经网络**（**CNNs**）的内置模型。
- en: At its most basic level, CNN can be thought of as a kind of neural network that
    uses many identical copies of the same neuron. This allows the network to have
    lots of neurons and express computationally large models while keeping the number
    of actual parameters – the values describing how neurons behave – that need to
    be learned fairly low.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在最基本层面上，卷积神经网络（CNN）可以被视为一种使用许多相同神经元副本的神经网络。这使得网络可以拥有大量神经元并表达计算上庞大的模型，同时保持需要学习的实际参数数量——描述神经元行为的值——相对较低。
- en: 'This concept can be understood with the analogy of a Jigsaw puzzle and how
    we usually solve one. The following diagram is a puzzle that needs to be solved:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这个概念可以通过类比拼图和通常解决拼图的方式来理解。以下是需要解决的拼图：
- en: '![](img/6d8c0e4b-9f45-45ea-a30b-32460471c42e.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/6d8c0e4b-9f45-45ea-a30b-32460471c42e.png)'
- en: If we have to assemble this puzzle from the pieces provided, just think about
    how you will start solving it. You may group all the pieces with different colors
    together. Then within the same color, you'd check for patterns and then assemble
    them. This is the same way that convolutional networks train for image classification
    and recognition. Hence there is only a small portion, each neuron remembers. But
    the parent neuron understands how the things within its scope needs to be assembled
    to get the big picture.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们必须从提供的碎片中组装这个拼图，请考虑您将如何开始解决它。您可能会将所有不同颜色的碎片放在一起。然后在同一颜色中，您会检查模式并将它们组装起来。这就是卷积网络在图像分类和识别中训练的方式。因此，只有一小部分，每个神经元都记得。但是父神经元理解其范围内的事物需要如何组装才能得到整体图景。
- en: In the Inception V3 and the MobileNet models, both work based on the CNN concept.
    The model is pretty much trained and stable. All we need to do to use our set
    of images is retrain the model with our images. So now that we have had enough
    of concepts and theory, we will move on to writing our first sample program using
    TensorFlow Lite for Android.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在Inception V3和MobileNet模型中，两者都基于CNN概念。模型已经相当训练有素且稳定。我们使用我们的图像集使用我们的图像重新训练模型即可。所以，在概念和理论已经足够之后，我们将继续编写我们的第一个使用TensorFlow
    Lite for Android的示例程序。
- en: We will be using the TensorFlow for mobile for a classification application
    in [Chapter 9](3e97f92b-a2d9-4618-9a3b-91552fa3fc3d.xhtml), *Neural Networks on
    Mobile*
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在第9章（3e97f92b-a2d9-4618-9a3b-91552fa3fc3d.xhtml）的*“移动设备上的神经网络”*中使用TensorFlow移动进行分类应用。
- en: Writing the mobile application using the TensorFlow model
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用TensorFlow模型编写移动应用程序
- en: '**What we are going to do?**'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '**我们将做什么？**'
- en: In this section, we are going to build a small `(a+b)2` model in TensorFlow,
    deploy it into an android mobile application, and run it from the Android mobile
    device.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将构建一个小的`(a+b)2`模型，将其部署到Android移动应用程序中，并在Android移动设备上运行它。
- en: '**What do you need to know?**'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '**您需要了解什么？**'
- en: 'To proceed in this section, you need a working installation of Python, TensorFlow
    dependencies, and android studio, and also some knowledge of python and java android.
    You can find the instructions on how to install TensorFlow here: [https://www.tensorflow.org/install/](https://www.tensorflow.org/install/).'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 要继续本节内容，您需要一个可工作的Python安装、TensorFlow依赖项和Android Studio，以及一些Python和Java Android的知识。您可以在[这里](https://www.tensorflow.org/install/)找到如何安装TensorFlow的说明。
- en: If you need a detailed installation procedure for Windows, please refer to the
    one provided with screenshots in the [Chapter 11](d7ddae2d-9276-461e-9526-73448159e26b.xhtml),
    *The Future of ML on Mobile Applications* of this book.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要Windows的详细安装程序，请参阅本书第11章（d7ddae2d-9276-461e-9526-73448159e26b.xhtml）中提供的带有截图的[“移动应用程序上机器学习的未来”](d7ddae2d-9276-461e-9526-73448159e26b.xhtml)。
- en: We saw the details of TensorFlow already. To put it onto a simple words TensorFlow
    is nothing but saving the tensor flow program written in python into a small file
    that can be read by the C++ native libraries what we will install in our Android
    app and can execute and do the inference from the mobile. To do so, JNI (Java
    native interface) is working as a bridge between java and C++.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了TensorFlow的细节。简单来说，TensorFlow不过是将用Python编写的TensorFlow程序保存到一个小的文件中，这个文件可以被我们将要安装到Android应用程序中的C++本地库读取并执行，从移动端进行推理。为此，JNI（Java本地接口）作为Java和C++之间的桥梁工作。
- en: To learn more about the idea behind tensor flow lite, check out [https://www.tensorflow.org/mobile/tflite/.](https://www.tensorflow.org/mobile/tflite/)
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于TensorFlow Lite背后的想法，请查看[https://www.tensorflow.org/mobile/tflite/](https://www.tensorflow.org/mobile/tflite/)。
- en: Writing our first program
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写我们的第一个程序
- en: 'In order to write a TensorFlow mobile application, there are a few steps that
    we need to follow:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 为了编写TensorFlow移动应用程序，我们需要遵循几个步骤：
- en: Create the TF (TensorFlow) model
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建TF（TensorFlow）模型
- en: Save the model
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存模型
- en: Freeze the graph
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 冻结图
- en: Optimize the model
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 优化模型
- en: Write the Android application and execute it
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写Android应用程序并执行它
- en: We will go through each of the steps in detail now.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将详细讲解每个步骤。
- en: Creating and Saving the TF model
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建和保存TF模型
- en: First, we first create a simple model and save its computation graph as a serialized
    `GraphDef` file. After training the model, we then save the values of its variables
    into a checkpoint file. We have to turn these two files into an optimized standalone
    file, which is all we need to use inside the Android app.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们首先创建一个简单的模型并将其计算图保存为一个序列化的`GraphDef`文件。在训练模型后，我们将其变量的值保存到一个检查点文件中。我们必须将这些两个文件转换为一个优化的独立文件，这是我们需要在Android应用程序中使用的所有内容。
- en: For this tutorial, we create a very simple TensorFlow graph that implements
    a small use case that will calculate *(a+b)²=c*. Here, we are saving the input
    as *a* and *b*, and the output as *c*.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个教程，我们创建一个非常简单的TensorFlow图，它实现了一个小用例，将计算*(a+b)²=c*。在这里，我们将输入保存为*a*和*b*，输出保存为*c*。
- en: To implement this sample program, we are going to use Python. So, as a prerequisite,
    you need to install python in your machine and install the TensorFlow libraries
    on your machine using `pip`.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这个示例程序，我们将使用Python。因此，作为先决条件，你需要在你的机器上安装Python，并使用`pip`在你的机器上安装TensorFlow库。
- en: Please check the software installations/appendix section of this book for instructions
    on how to install Python. `pip` is a python package manager that comes with Python.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅本书的软件安装/附录部分，了解如何安装Python的说明。`pip`是Python的包管理器，它随Python一起提供。
- en: 'Once you install python and set the path correctly, you can run the `pip` command
    from the command prompt. To install TensorFlow, run the following command:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你安装了Python并正确设置了路径，你就可以从命令提示符中运行`pip`命令。要安装TensorFlow，请运行以下命令：
- en: '[PRE0]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This sample might seem too simple and might not contain anything related to
    machine learning, but this example should be a good starting point to understand
    the concepts of TensorFlow and its working:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例可能看起来太简单，可能不包含与机器学习相关的内容，但这个示例应该是一个很好的起点，以了解TensorFlow的概念及其工作原理：
- en: '[PRE1]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In the preceding program, we are creating two placeholders, named *a* and *b*,
    that can hold integer values. For now, just you can imagine placeholders as nodes
    in a tree for a decision tree. In the next line, we are creating a variable named
    times. We are creating this to store how many times we need to multiply the input.
    In this case, we are giving two as agenda is to do for *(a+b)*^(*2*)*.*
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的程序中，我们创建了两个名为*a*和*b*的占位符，它们可以存储整数值。现在，你可以想象占位符就像决策树中的节点。在下一行，我们创建了一个名为times的变量。我们创建这个变量是为了存储我们需要乘以输入的次数。在这种情况下，我们给出两个，因为目标是做*(a+b)*^(*2*)*.*
- en: 'In the next line, we are applying addition operation on both the *a* and *b*
    nodes. And for that sum, we are applying power operation and saving the result
    in a new node called c. To run the code, first save it in a file with the `.py` extension.
    Then execute the program using the `python` command, as follows:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一行，我们在*a*和*b*节点上应用加法操作。对于这个和，我们应用幂操作并将结果保存到一个名为c的新节点中。要运行代码，首先将其保存为具有`.py`扩展名的文件。然后使用`python`命令执行程序，如下所示：
- en: '[PRE2]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Running the previous piece of code will produce two files. First, it saves the
    TF computation graph in a `GraphDef` text file called `tfdroid.pbtxt`. Next, it
    will perform a simple assignment (which normally would be done through actual
    learning) and save a checkpoint of the model variables in `tfdroid.ckpt`.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 运行上一段代码将生成两个文件。首先，它将TF计算图保存为一个名为`tfdroid.pbtxt`的`GraphDef`文本文件。接下来，它将执行一个简单的赋值操作（这通常是通过实际学习来完成的）并将模型变量的检查点保存到`tfdroid.ckpt`中。
- en: Freezing the graph
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 冻结图
- en: 'Now that we have these files, we need to freeze the graph by converting the
    variables in the checkpoint file into `Const Ops` that contain the values of the
    variables, and combining them with the GraphDef in a standalone file. Using this
    file makes it easier to load the model inside a mobile app. TensorFlow provides
    `freeze_graph` in `tensorflow.python.tools` for this purpose:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了这些文件，我们需要通过将检查点文件中的变量转换为包含变量值的`Const Ops`并将它们与GraphDef结合到一个独立文件中来冻结图。使用这个文件使得在移动应用程序中加载模型变得更加容易。TensorFlow在`tensorflow.python.tools`中提供了`freeze_graph`来完成这个目的：
- en: '[PRE3]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Optimizing the model file
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 优化模型文件
- en: 'Once we have the frozen graph, we can further optimize the file for inference-only
    purposes by removing the parts of the graph that are only needed during training.
    According to the documentation, this includes:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们有了冻结的图，我们可以进一步优化文件以用于推理目的，通过移除仅在训练期间需要的图的部分。根据文档，这包括：
- en: Removing training-only operations, such as checkpoint saving
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移除仅用于训练的操作，例如检查点保存
- en: Stripping out parts of the graph that are never reached
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移除图中从未到达的部分
- en: Removing debug operations, such as `CheckNumerics`
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移除调试操作，例如`CheckNumerics`
- en: Folding batch normalization ops into the pre-calculated weights
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将批归一化操作融合到预计算的权重中
- en: Fusing common operations into unified versions
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将常见操作融合到统一版本中
- en: 'TensorFlow provides `optimize_for_inference_lib` in `tensorflow.python.tools`
    for this purpose:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: TensorFlow在`tensorflow.python.tools`中提供了`optimize_for_inference_lib`用于此目的：
- en: '[PRE4]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Take note of the input and output nodes in the preceding code. Our graph only
    has one input node, named I, and one output node, named O. These names correspond
    to the names you use when you define your tensors. You should adjust these based
    on your graph in case you are using a different one.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 注意前述代码中的输入和输出节点。我们的图只有一个输入节点，命名为I，一个输出节点，命名为O。这些名称对应于你定义张量时使用的名称。如果你使用的是不同的图，你应该根据你的图调整这些名称。
- en: Now we have a binary file, called `optimized_tfdroid.pb`, which means we are
    ready to build our Android app. If you got an exception when creating `optimized_tfdroid.pb`,
    you can use `tfdroid.somewhat`, which is an unoptimized version of the model –
    it is fairly large.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有一个名为`optimized_tfdroid.pb`的二进制文件，这意味着我们已准备好构建我们的Android应用。如果你在创建`optimized_tfdroid.pb`时遇到了异常，你可以使用`tfdroid.somewhat`，这是模型的非优化版本——它相当大。
- en: Creating the Android app
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建Android应用
- en: We need to get the TensorFlow libraries for Android, create an Android app,
    configure it to use these libraries, and then invoke the TensorFlow model inside
    the app.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要获取Android的TensorFlow库，创建一个Android应用，配置它以使用这些库，然后在应用内部调用TensorFlow模型。
- en: Although you can compile the TensorFlow libraries from scratch, it’s easier
    to use the prebuilt libraries.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然你可以从头开始编译TensorFlow库，但使用预构建库更容易。
- en: Now use Android Studio to create an Android project with an empty activity.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 现在使用Android Studio创建一个带有空活动的Android项目。
- en: Once the project is created, add the TF Libraries to the project's `libs` folder.
    You can get these libraries from the GitHub repository: [https://github.com/PacktPublishing/Machine-Learning-for-Mobile/tree/master/tensorflow%20simple/TensorflowSample/app/libs](https://github.com/PacktPublishing/Machine-Learning-for-Mobile/tree/master/tensorflow%20simple/TensorflowSample/app/libs).
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦项目创建完成，将TF库添加到项目的`libs`文件夹中。你可以从GitHub仓库获取这些库：[https://github.com/PacktPublishing/Machine-Learning-for-Mobile/tree/master/tensorflow%20simple/TensorflowSample/app/libs](https://github.com/PacktPublishing/Machine-Learning-for-Mobile/tree/master/tensorflow%20simple/TensorflowSample/app/libs)。
- en: 'Now your project''s `libs/` folder should look like this:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 现在项目中的`libs/`文件夹应该看起来像这样：
- en: '[PRE5]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'You need to let your build system know where these libraries are located by
    putting the following lines inside of the Android block in `app/build.gradle`:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要通过在`app/build.gradle`中的Android块内放置以下行来让构建系统知道这些库的位置：
- en: '[PRE6]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Copying the TF Model
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 复制TF模型
- en: Create an Android Asset Folder for the app and place the `optimized_tfdroid.pb
    or tfdroid.pb` file that we just created inside it (`app/src/main/assets/`).
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 为应用创建一个Android Asset文件夹，并将我们刚刚创建的`optimized_tfdroid.pb`或`tfdroid.pb`文件放入其中（`app/src/main/assets/`）。
- en: Creating an activity
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建活动
- en: 'Click on the project and create an empty activity named `MainActivity`. In
    the layout of that activity, paste the following XML:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 点击项目并创建一个名为`MainActivity`的空活动。在该活动的布局中，粘贴以下XML：
- en: '[PRE7]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In the `mainactivity.java` file, paste the following code:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在`mainactivity.java`文件中，粘贴以下代码：
- en: '[PRE8]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'In the preceding program, we are loading the TensorFlow binaries using the
    following snippet:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在前述程序中，我们使用以下代码片段加载TensorFlow的二进制文件：
- en: '[PRE9]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In the create Bundle method, we have the main logic. Here, we are creating the
    TensorFlow inference object by supplying the TensorFlow model's `.pb` file, which
    has been generated and we saw that in the section - create and save model
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建Bundle的方法中，我们有主要的逻辑。在这里，我们通过提供TensorFlow模型的`.pb`文件来创建TensorFlow推理对象，这个文件已经被生成，我们已经在创建和保存模型的章节中看到了它。
- en: Then we registered a click event to the Run button. In this, we are feeding
    the values to the a and b nodes in TensorFlow and running the inference, then
    we fetch the value in the C node and show it to the user.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们为运行按钮注册了一个点击事件。在这个过程中，我们将值输入到TensorFlow中的a和b节点，并运行推理，然后我们从C节点获取值并展示给用户。
- en: 'Now run the app to see the results of the `(a+b)2 = c` expression:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用程序，查看`(a+b)2 = c`表达式的结果：
- en: '![](img/6abc781a-f565-4d2e-8273-a38058dfb194.png)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/6abc781a-f565-4d2e-8273-a38058dfb194.png)'
- en: On the left side, it is showing the app's opening screen. In the provided text
    boxes, we need to give the `a` and `b` values. Once you click on the Run button,
    you will see the result in the output area.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在左侧，它显示了应用程序的启动屏幕。在提供的文本框中，我们需要输入`a`和`b`的值。一旦您点击运行按钮，您将在输出区域看到结果。
- en: You can get the preceding app code from the GitHub repository: [https://github.com/PacktPublishing/Machine-Learning-for-Mobile/tree/master/tensorflow%20simple](https://github.com/PacktPublishing/Machine-Learning-for-Mobile/tree/master/tensorflow%20simple).
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从GitHub仓库获取前面的应用程序代码：[https://github.com/PacktPublishing/Machine-Learning-for-Mobile/tree/master/tensorflow%20simple](https://github.com/PacktPublishing/Machine-Learning-for-Mobile/tree/master/tensorflow%20simple).
- en: Summary
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we got introduced to Google's machine learning tools for Mobile
    and looked at the various flavors of the toolkit – TensorFlow for Mobile and TensorFlow
    Lite. We also explored the architecture of a TensorFlow-ML-enabled mobile application.
    Then we discussed the architecture and details of TensorFlow Lite and its components,
    and even demonstrated a simple use case for an android mobile application using
    TensorFlow for mobile.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了谷歌的移动机器学习工具，并探讨了工具包的各种版本——TensorFlow for Mobile和TensorFlow Lite。我们还探讨了TensorFlow-ML启用移动应用程序的架构。然后我们讨论了TensorFlow
    Lite的架构和细节及其组件，甚至演示了一个使用TensorFlow for Mobile的简单用例，用于android移动应用程序。
- en: In the next chapter, we will be using the TensorFlow for mobile that we discussed
    here to implement a classification algorithm.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将使用这里讨论的TensorFlow for Mobile来实现一个分类算法。
