["```py\nimport time\nimport board\nimport busio\nimport adafruit_vl53l1x\n```", "```py\ni2c = busio.I2C(sda=board.GP2, scl=board.GP3)\nvl53 = adafruit_vl53l1x.VL53L1X(i2c)\n```", "```py\nvl53.distance_mode = 1\nvl53.timing_budget = 100\n```", "```py\nvl53.start_ranging()\n```", "```py\nwhile True:\n    if vl53.data_ready:\n        print(\"Distance: {} cm\".format(vl53.distance))\n        vl53.clear_interrupt()\n    time.sleep(0.05)\n```", "```py\ncode.py output:\nDistance: 35.1 cm\nDistance: 34.4 cm\nDistance: 33.8 cm\nDistance: 35.2 cm\n```", "```py\nimport time\nimport board\nimport busio\nimport adafruit_vl53l1x\n```", "```py\ni2c0 = busio.I2C(sda=board.GP0, scl=board.GP1)\ni2c1 = busio.I2C(sda=board.GP2, scl=board.GP3)\nvl53_l = adafruit_vl53l1x.VL53L1X(i2c0)\nvl53_r = adafruit_vl53l1x.VL53L1X(i2c1)\n```", "```py\nvl53_l.distance_mode = 1\nvl53_l.timing_budget = 100\nvl53_r.distance_mode = 1\nvl53_r.timing_budget = 100\n```", "```py\nvl53_l.start_ranging()\nvl53_r.start_ranging()\nwhile True:\n```", "```py\n    if vl53_l.data_ready and vl53_r.data_ready:\n        print(\"Left: {} cm, Right: {} cm\".format(vl53_l.distance, vl53_r.distance))\n        vl53_l.clear_interrupt()\n        vl53_r.clear_interrupt()\n    time.sleep(0.05)\n```", "```py\nLeft: 39.2 cm, Right: 37.4 cm\nLeft: 38.8 cm, Right: 37.4 cm\nLeft: 39.0 cm, Right: 37.4 cm\nLeft: 38.8 cm, Right: 37.6 cm\nLeft: 39.1 cm, Right: 37.6 cm\n```", "```py\nimport board\nimport pwmio\nimport pio_encoder\nimport busio\nimport adafruit_vl53l1x\n```", "```py\ni2c0 = busio.I2C(sda=board.GP0, scl=board.GP1)\ni2c1 = busio.I2C(sda=board.GP2, scl=board.GP3)\nleft_distance = adafruit_vl53l1x.VL53L1X(i2c0)\nright_distance = adafruit_vl53l1x.VL53L1X(i2c1)\n```", "```py\nimport robot\nimport time\nrobot.left_distance.distance_mode = 1\nrobot.right_distance.distance_mode = 1\n```", "```py\ntoo_close_cm = 30\nspeed = 0.9\n```", "```py\nrobot.left_distance.start_ranging()\nrobot.right_distance.start_ranging()\n```", "```py\ntry:\n  robot.set_left(speed)\n  robot.set_right(speed)\n  while True:\n```", "```py\n    if robot.left_distance.data_ready and robot.right_distance.data_ready:\n      left_dist = robot.left_distance.distance\n      right_dist = robot.right_distance.distance\n```", "```py\n      if 0 < right_dist < too_close_cm:\n        print(\"Obstacle detected - Left: {} cm, Right: {} cm\".format(left_dist, right_dist))\n        robot.set_left(-speed)\n```", "```py\n      else:\n        robot.set_left(speed)\n        if 0 < left_dist < too_close_cm:\n          print(\"Obstacle detected - Left: {} cm, Right: {} cm\".format(left_dist, right_dist))\n          robot.set_right(-speed)\n        else:\n          robot.set_right(speed)\n```", "```py\n      robot.left_distance.clear_interrupt()\n      robot.right_distance.clear_interrupt()\n      time.sleep(0.1)\n```", "```py\nfinally:\n  robot.stop()\n  robot.left_distance.clear_interrupt()\n  robot.right_distance.clear_interrupt()\n  robot.left_distance.stop_ranging()\n  robot.right_distance.stop_ranging()\n```", "```py\nObstacle detected - Left: 29.6 cm, Right: 42.2 cm\nObstacle detected - Left: 17.2 cm, Right: 39.6 cm\nObstacle detected - Left: 10.4 cm, Right: 39.1 cm\nObstacle detected - Left: 5.2 cm, Right: 42.6 cm\nObstacle detected - Left: 6.7 cm, Right: 42.3 cm\nObstacle detected - Left: 18.4 cm, Right: 27.6 cm\n```"]