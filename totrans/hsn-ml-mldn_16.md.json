["```py\nChickenWings.jpg food\nSteak.jpg food\nPizza.jpg food\nMongolianGrill.jpg food\nBay.jpg water\nBay2.jpg water\nBay3.jpg water\nBeach.jpg water\n```", "```py\nprivate readonly ImageClassificationPredictor _prediction = new ImageClassificationPredictor();\n```", "```py\nprivate string _imageClassification;\n\npublic string ImageClassification\n{\n    get => _imageClassification;\n\n    set\n    {\n        _imageClassification = value;\n        OnPropertyChanged();\n    }\n}\n\nprivate ImageSource _imageSource;\n\npublic ImageSource SelectedImageSource\n{\n    get => _imageSource;\n\n    set\n    {\n        _imageSource = value;\n        OnPropertyChanged();\n    }\n}\n```", "```py\npublic (bool Success, string Exception) Initialize() => _prediction.Initialize();\n```", "```py\npublic void SelectFile()\n{\n    var ofd = new OpenFileDialog\n    {\n        Filter = \"Image Files(*.BMP;*.JPG;*.PNG)|*.BMP;*.JPG;*.PNG\"\n    };\n\n    var result = ofd.ShowDialog();\n\n    if (!result.HasValue || !result.Value)\n    {\n        return;\n    }\n\n    LoadImageBytes(ofd.FileName);\n\n    Classify(ofd.FileName);\n}\n```", "```py\nprivate void LoadImageBytes(string fileName)\n{\n    var image = new BitmapImage();\n\n    var imageData = File.ReadAllBytes(fileName);\n\n    using (var mem = new MemoryStream(imageData))\n    {\n        mem.Position = 0;\n\n        image.BeginInit();\n\n        image.CreateOptions = BitmapCreateOptions.PreservePixelFormat;\n        image.CacheOption = BitmapCacheOption.OnLoad;\n        image.UriSource = null;\n        image.StreamSource = mem;\n\n        image.EndInit();\n    }\n\n    image.Freeze();\n\n    SelectedImageSource = image;\n}\n```", "```py\npublic void Classify(string imagePath)\n{\n var result = _prediction.Predict(imagePath);\n\n ImageClassification = $\"Image ({imagePath}) is a picture of {result.PredictedLabelValue} with a confidence of {result.Score.Max().ToString(\"P2\")}\";\n}\n```", "```py\n<Grid.RowDefinitions>\n    <RowDefinition Height=\"Auto\" />\n    <RowDefinition Height=\"*\" />\n    <RowDefinition Height=\"Auto\" />\n</Grid.RowDefinitions>\n```", "```py\n<Button Grid.Row=\"0\" Margin=\"0,10,0,0\" Width=\"200\" Height=\"35\" Content=\"Select Image File\" HorizontalAlignment=\"Center\" Click=\"btnSelectFile_Click\" />\n```", "```py\n<Image Grid.Row=\"1\" Margin=\"10,10,10,10\" Source=\"{Binding SelectedImageSource}\" />\n```", "```py\n<TextBlock Grid.Row=\"2\" Text=\"{Binding ImageClassification, Mode=OneWay}\" TextWrapping=\"Wrap\" Foreground=\"White\" Margin=\"10,10,10,10\" HorizontalAlignment=\"Center\" FontSize=\"16\" />\n```", "```py\nprivate MainWindowViewModel ViewModel => (MainWindowViewModel) DataContext;\n```", "```py\npublic MainWindow()\n{\n    InitializeComponent();\n\n    DataContext = new MainWindowViewModel();\n\n    var (success, exception) = ViewModel.Initialize();\n\n    if (success)\n    {\n        return;\n    }\n\n    MessageBox.Show($\"Failed to initialize model - {exception}\");\n\n    Application.Current.Shutdown();\n}\n```", "```py\nprivate void btnSelectFile_Click(object sender, RoutedEventArgs e) => ViewModel.SelectFile();\n```", "```py\npublic class BaseML\n{\n    protected MLContext MlContext;\n\n    public BaseML()\n    {\n        MlContext = new MLContext(2020);\n    }\n}\n```", "```py\npublic class ImageDataInputItem\n{\n    [LoadColumn(0)]\n    public string ImagePath;\n\n    [LoadColumn(1)]\n    public string Label;\n}\n```", "```py\npublic class ImageDataPredictionItem : ImageDataInputItem\n{\n    public float[] Score;\n\n    public string PredictedLabelValue;\n}\n```", "```py\n// Training Variables\nprivate static readonly string _assetsPath = Path.Combine(Environment.CurrentDirectory, \"assets\");\nprivate static readonly string _imagesFolder = Path.Combine(_assetsPath, \"images\");\nprivate readonly string _trainTagsTsv = Path.Combine(_imagesFolder, \"tags.tsv\");\nprivate readonly string _inceptionTensorFlowModel = Path.Combine(_assetsPath, \"inception\", \"tensorflow_inception_graph.pb\");\n\nprivate const string TF_SOFTMAX = \"softmax2_pre_activation\";\nprivate const string INPUT = \"input\";\n\nprivate static readonly string ML_NET_MODEL = Path.Combine(Environment.CurrentDirectory, \"chapter12.mdl\");\n```", "```py\nprivate struct InceptionSettings\n{\n    public const int ImageHeight = 224;\n    public const int ImageWidth = 224;\n    public const float Mean = 117;\n    public const float Scale = 1;\n    public const bool ChannelsLast = true;\n}\n```", "```py\npublic ImageDataPredictionItem Predict(string filePath) => \n    Predict(new ImageDataInputItem \n        {\n            ImagePath = filePath \n        }\n    );\n\npublic ImageDataPredictionItem Predict(ImageDataInputItem image)\n{\n    var predictor = MlContext.Model.CreatePredictionEngine<ImageDataInputItem, ImageDataPredictionItem>(_model);\n\n    return predictor.Predict(image);\n}\n```", "```py\npublic (bool Success, string Exception) Initialize()\n{\n    try\n    {\n        if (File.Exists(ML_NET_MODEL))\n        {\n            _model = MlContext.Model.Load(ML_NET_MODEL, out DataViewSchema modelSchema);\n\n            return (true, string.Empty);\n        }\n\n       ...\n    }\n    catch (Exception ex)\n    {\n        return (false, ex.ToString());\n    }\n} \n```"]