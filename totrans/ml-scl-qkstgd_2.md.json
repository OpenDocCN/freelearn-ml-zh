["```py\nval filePath= \"data/UrbanTraffic.csv\"\n```", "```py\nval rawTrafficDF = spark.read\n      .option(\"header\", \"true\")\n      .option(\"inferSchema\", \"true\")\n      .option(\"delimiter\", \";\")\n      .format(\"com.databricks.spark.csv\")\n      .load(\"data/UrbanTraffic.csv\")\n      .cache\n```", "```py\nrawTrafficDF.printSchema()\n```", "```py\nprintln(rawTrafficDF.count())\n```", "```py\nrawTrafficDF.select(\"Hour (Coded)\", \"Immobilized bus\", \"Broken Truck\", \n                    \"Vehicle excess\", \"Fire\", \"Slowness in traffic (%)\").show(5)\n```", "```py\nvar newTrafficDF = rawTrafficDF.withColumnRenamed(\"Slowness in traffic (%)\", \"label\")\n```", "```py\nnewTrafficDF.createOrReplaceTempView(\"slDF\")\n```", "```py\nspark.sql(\"SELECT avg(label) as avgSlowness FROM slDF\").show()\n```", "```py\n\n +------------------+\n | avgSlowness      |\n +------------------+\n |10.051851851851858|\n +------------------+\n```", "```py\nnewTrafficDF = newTrafficDF.withColumnRenamed(\"Point of flooding\", \"NoOfFloodPoint\")\nspark.sql(\"SELECT max(NoOfFloodPoint) FROM slDF\").show()\n```", "```py\n+-------------------+\n|max(NoOfFloodPoint)|\n+-------------------+\n|                  7|\n+-------------------+\n```", "```py\nrawTrafficDF.select(\"Hour (Coded)\", \"Immobilized bus\", \"Broken Truck\", \n                    \"Point of flooding\", \"Fire\", \"Slowness in traffic (%)\")\n                    .describe().show()\n```", "```py\nval colNames = newTrafficDF.columns.dropRight(1)    \n\nval assembler = new VectorAssembler()\n    .setInputCols(colNames)\n    .setOutputCol(\"features\")\n```", "```py\nval assembleDF = assembler.transform(newTrafficDF).select(\"features\", \"label\")  \nassembleDF.show()\n```", "```py\nval seed = 12345L\nval splits = data.randomSplit(Array(0.60, 0.40), seed)\nval (trainingData, validationData) = (splits(0), splits(1))\n\ntrainingData.cache // cache in memory for quicker access\nvalidationData.cache // cache in memory for quicker access\n```", "```py\nval lr = new LinearRegression()\n     .setFeaturesCol(\"features\")\n     .setLabelCol(\"label\")\n```", "```py\nprintln(\"Building ML regression model\")\nval lrModel = lr.fit(trainingData)\n```", "```py\nprintln(\"Evaluating the model on the test set and calculating the regression metrics\")\n// **********************************************************************\nval trainPredictionsAndLabels = lrModel.transform(testData).select(\"label\", \"prediction\")\n                                            .map {case Row(label: Double, prediction: Double) \n                                            => (label, prediction)}.rdd\n\nval testRegressionMetrics = new RegressionMetrics(trainPredictionsAndLabels)    \n```", "```py\nval results = \"\\n=====================================================================\\n\" +\n      s\"TrainingData count: ${trainingData.count}\\n\" +\n      s\"TestData count: ${testData.count}\\n\" +\n      \"=====================================================================\\n\" +\n      s\"TestData MSE = ${testRegressionMetrics.meanSquaredError}\\n\" +\n      s\"TestData RMSE = ${testRegressionMetrics.rootMeanSquaredError}\\n\" +\n      s\"TestData R-squared = ${testRegressionMetrics.r2}\\n\" +\n      s\"TestData MAE = ${testRegressionMetrics.meanAbsoluteError}\\n\" +\n      s\"TestData explained variance = ${testRegressionMetrics.explainedVariance}\\n\" +\n      \"=====================================================================\\n\"\nprintln(results)\n```", "```py\n=====================================================================\n TrainingData count: 80\n TestData count: 55\n =====================================================================\n TestData MSE = 7.904822843038552\n TestData RMSE = 2.8115516788845536\n TestData R-squared = 0.3699441827613118\n TestData MAE = 2.2173672546414536\n TestData explained variance = 20.293395978801147\n =====================================================================\n```", "```py\nval glr = new GeneralizedLinearRegression()\n      .setFamily(\"gaussian\")//continuous value prediction (or gamma)\n      .setLink(\"identity\")//continuous value prediction (or inverse)\n      .setFeaturesCol(\"features\")\n      .setLabelCol(\"label\")\n```", "```py\nprintln(\"Building ML regression model\")\nval glrModel = glr.fit(trainingData)\n```", "```py\n// **********************************************************************\nprintln(\"Evaluating the model on the test set and calculating the regression metrics\")\n// **********************************************************************\nval trainPredictionsAndLabels = glrModel.transform(testData).select(\"label\", \"prediction\")\n                                            .map { case Row(label: Double, prediction: Double) \n                                            => (label, prediction) }.rdd\n\nval testRegressionMetrics = new RegressionMetrics(trainPredictionsAndLabels)\n```", "```py\nval results = \"\\n=====================================================================\\n\" +\n      s\"TrainingData count: ${trainingData.count}\\n\" +\n      s\"TestData count: ${testData.count}\\n\" +\n      \"=====================================================================\\n\" +\n      s\"TestData MSE = ${testRegressionMetrics.meanSquaredError}\\n\" +\n      s\"TestData RMSE = ${testRegressionMetrics.rootMeanSquaredError}\\n\" +\n      s\"TestData R-squared = ${testRegressionMetrics.r2}\\n\" +\n      s\"TestData MAE = ${testRegressionMetrics.meanAbsoluteError}\\n\" +\n      s\"TestData explained variance = ${testRegressionMetrics.explainedVariance}\\n\" +\n      \"=====================================================================\\n\"\nprintln(results)\n```", "```py\n\n =====================================================================\n TrainingData count: 63\n TestData count: 72\n =====================================================================\n TestData MSE = 9.799660597570348\n TestData RMSE = 3.130440958965741\n TestData R-squared = -0.1504361865072692\n TestData MAE = 2.5046175463628546\n TestData explained variance = 19.241059408685135\n =====================================================================\n```", "```py\n// ***********************************************************\nprintln(\"Preparing K-fold Cross Validation and Grid Search\")\n// ***********************************************************\nval paramGrid = new ParamGridBuilder()\n      .addGrid(lr.maxIter, Array(10, 20, 30, 50, 100, 500, 1000))\n      .addGrid(lr.regParam, Array(0.001, 0.01, 0.1))\n      .addGrid(lr.tol, Array(0.01, 0.1))\n      .build()\n```", "```py\nprintln(\"Preparing 10-fold Cross Validation\")\nval numFolds = 10 //10-fold cross-validation\nval cv = new CrossValidator()\n      .setEstimator(lr)\n      .setEvaluator(new RegressionEvaluator())\n      .setEstimatorParamMaps(paramGrid)\n      .setNumFolds(numFolds)\n```", "```py\nprintln(\"Training model with the Linear Regression algorithm\")\nval cvModel = cv.fit(trainingData)\n```", "```py\n// Save the workflow\ncvModel.write.overwrite().save(\"model/LR_model\")  \n```", "```py\nval sameCVModel = LinearRegressionModel.load(\"model/LR_model\")\n```", "```py\nprintln(\"Evaluating the cross validated model on the test set and calculating the regression metrics\")\nval trainPredictionsAndLabelsCV = cvModel.transform(testData).select(\"label\", \"prediction\")\n                                      .map { case Row(label: Double, prediction: Double)\n                                      => (label, prediction) }.rdd\n\nval testRegressionMetricsCV = new RegressionMetrics(trainPredictionsAndLabelsCV)\n```", "```py\nval cvResults = \"\\n=====================================================================\\n\" +\n      s\"TrainingData count: ${trainingData.count}\\n\" +\n      s\"TestData count: ${testData.count}\\n\" +\n      \"=====================================================================\\n\" +\n      s\"TestData MSE = ${testRegressionMetricsCV.meanSquaredError}\\n\" +\n      s\"TestData RMSE = ${testRegressionMetricsCV.rootMeanSquaredError}\\n\" +\n      s\"TestData R-squared = ${testRegressionMetricsCV.r2}\\n\" +\n      s\"TestData MAE = ${testRegressionMetricsCV.meanAbsoluteError}\\n\" +\n      s\"TestData explained variance = ${testRegressionMetricsCV.explainedVariance}\\n\" +\n      \"=====================================================================\\n\"\nprintln(cvResults)\n```", "```py\n =====================================================================\n TrainingData count: 80\n TestData count: 55\n =====================================================================\n TestData MSE = 7.889401628365509\n TestData RMSE = 2.8088078660466453\n TestData R-squared = 0.3510269588724132\n TestData MAE = 2.2158433237623667\n TestData explained variance = 20.299135214455085\n =====================================================================\n```"]