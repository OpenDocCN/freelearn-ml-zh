["```py\n<item android:id=\"@+id/action_load_image\"\n        android:title=\"@string/action_load_image\"\n        android:orderInCategory=\"1\"\n        android:showAsAction=\"ifRoom\" />\n```", "```py\nprivate BaseLoaderCallback mOpenCVCallBack = new BaseLoaderCallback(this) {\n        @Override\n        public void onManagerConnected(int status) {\n            switch (status) {\n                case LoaderCallbackInterface.SUCCESS:\n                    //DO YOUR WORK/STUFF HERE\n                    break;\n                default:\n                    super.onManagerConnected(status);\n                    break;\n            }\n        }\n    };\n@Override\n    protected void onResume() {\n        super.onResume();\n        OpenCVLoader.initAsync(OpenCVLoader.OPENCV_VERSION_2_4_10, this,\n                mOpenCVCallBack);\n    }\n```", "```py\n<Button\n            android:id=\"@+id/bMean\"\n            android:layout_height=\"wrap_content\"\n            android:layout_width=\"wrap_content\"\n            android:text=\"Mean Blur\" />\n```", "```py\nButton bMean = (Button)findViewById(R.id.bMean);\nbMean.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                Intent i = new Intent(getApplicationContext(),MainActivity.class);\n                i.putExtra(\"ACTION_MODE\", MEAN_BLUR);\n                startActivity(i);\n            }\n        });\n```", "```py\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout \n    android:orientation=\"vertical\" \n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\">\n\n    <ImageView\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:layout_weight=\"0.5\"\n        android:id=\"@+id/ivImage\" />\n\n    <ImageView\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:layout_weight=\"0.5\"\n        android:id=\"@+id/ivImageProcessed\" />\n\n</LinearLayout>\n```", "```py\n    private final int SELECT_PHOTO = 1;\n    private ImageView ivImage, ivImageProcessed;\n    Mat src;\n    static int ACTION_MODE = 0;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n// Android specific code\nivImage = (ImageView)findViewById(R.id.ivImage);\n        ivImageProcessed = (ImageView)findViewById(R.id.ivImageProcessed);\n        Intent intent = getIntent();\n\n        if(intent.hasExtra(\"ACTION_MODE\")){\n            ACTION_MODE = intent.getIntExtra(\"ACTION_MODE\", 0);\n}\n```", "```py\n@Override\n    public boolean onCreateOptionsMenu(Menu menu) {\n        getMenuInflater().inflate(R.menu.menu_main, menu);\n        return true;\n    }\n```", "```py\n    @Override\n    public boolean onOptionsItemSelected(MenuItem item) {\n        int id = item.getItemId();\n        if (id == R.id.action_load_image) {\n            Intent photoPickerIntent = new Intent(Intent.ACTION_PICK);\n            photoPickerIntent.setType(\"image/*\");\n            startActivityForResult(photoPickerIntent, SELECT_PHOTO);\n            return true;\n        }\n        return super.onOptionsItemSelected(item);\n    }\n```", "```py\n        switch(requestCode) {\n            case SELECT_PHOTO:\n                if(resultCode == RESULT_OK){\n                    try {\n                        //Code to load image into a Bitmap and convert it to a Mat for processing.\n            final Uri imageUri = imageReturnedIntent.getData();\n            final InputStream imageStream = getContentResolver().openInputStream(imageUri);\n            final Bitmap selectedImage = BitmapFactory.decodeStream(imageStream);\n                src = new Mat(selectedImage.getHeight(), selectedImage.getWidth(), CvType.CV_8UC4);\n                        Utils.bitmapToMat(selectedImage, src);\n\n                        switch (ACTION_MODE){\n                            //Add different cases here depending on the required operation\n                        }\n                            //Code to convert Mat to Bitmap to load in an ImageView. Also load original image in imageView\n\n                   } catch (FileNotFoundException e) {\n                        e.printStackTrace();\n                   }\n    }\n            break;\n  }\n```", "```py\ncase HomeActivity.MEAN_BLUR:\nImgproc.blur(src, src, new Size(3,3));\n      break;\n```", "```py\nBitmap processedImage = Bitmap.createBitmap(src.cols(), src.rows(), Bitmap.Config.ARGB_8888);\nUtils.matToBitmap(src, processedImage);\nivImage.setImageBitmap(selectedImage);\nivImageProcessed.setImageBitmap(processedImage);\n```", "```py\ncase HomeActivity.GAUSSIAN_BLUR:\n    Imgproc.GaussianBlur(src, src, new Size(3,3), 0);\n    break;\n```", "```py\ncase HomeActivity.MEDIAN_BLUR:\n    Imgproc.medianBlur(src, src, 3);\n    break;\n```", "```py\ncase HomeActivity.SHARPEN:\n    Mat kernel = new Mat(3,3,CvType.CV_16SC1); \n          kernel.put(0, 0, 0, -1, 0, -1, 5, -1, 0, -1, 0);\n```", "```py\n    Imgproc.filter2D(src, src, src.depth(), kernel);\n```", "```py\ncase HomeActivity.DILATE:\n    Mat kernelDilate = Imgproc.getStructuringElement(Imgproc.MORPH_RECT, new Size(3, 3));\n    Imgproc.dilate(src, src, kernelDilate);\n    break;\n```", "```py\ncase HomeActivity.ERODE:\n    Mat kernelErode = Imgproc.getStructuringElement(Imgproc.MORPH_ELLIPSE, new Size(5, 5));\n    Imgproc.erode(src, src, kernelErode);\n         break;\n```", "```py\ncase HomeActivity.THRESHOLD:\n    Imgproc.threshold(src, src, 100, 255, Imgproc.THRESH_CONSTANT);\n    break;\n```", "```py\n    case HomeActivity.ADAPTIVE_THRESHOLD:\n        Imgproc.cvtColor(src, src, Imgproc.COLOR_BGR2GRAY);\n        Imgproc.adaptiveThreshold(src, src, 255, Imgproc.ADAPTIVE_THRESH_GAUSSIAN_C, Imgproc.THRESH_BINARY, 3, 0);\n        break;\n    ```"]