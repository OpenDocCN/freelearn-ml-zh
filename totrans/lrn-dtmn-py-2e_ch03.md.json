["```py\nimport pandas as pd\ndata_filename = \"basketball.csv\"\ndataset = pd.read_csv(data_filename)\n\n```", "```py\ndataset.head(5)\n\n```", "```py\ndataset = pd.read_csv(data_filename, parse_dates=[\"Date\"]) dataset.columns\n        = [\"Date\", \"Start (ET)\", \"Visitor Team\", \"VisitorPts\", \n           \"Home Team\", \"HomePts\", \"OT?\", \"Score Type\", \"Notes\"]\n\n```", "```py\ndataset.head()\n\n```", "```py\nprint(dataset.dtypes)\n\n```", "```py\ndataset[\"HomeWin\"] = dataset[\"VisitorPts\"] < dataset[\"HomePts\"]\n\n```", "```py\ny_true = dataset[\"HomeWin\"].values\n\n```", "```py\ndataset[\"HomeWin\"].mean()\n\n```", "```py\nfrom collections import defaultdict \nwon_last = defaultdict(int)\n\n```", "```py\ndataset[\"HomeLastWin\"] = 0\ndataset[\"VisitorLastWin\"] = 0\n\n```", "```py\nfor index, row in dataset.iterrows():\n    home_team = row[\"Home Team\"]\n    visitor_team = row[\"Visitor Team\"]\n    row[\"HomeLastWin\"] = won_last[home_team]\n    dataset.set_value(index, \"HomeLastWin\", won_last[home_team])\n    dataset.set_value(index, \"VisitorLastWin\", won_last[visitor_team])\n    won_last[home_team] = int(row[\"HomeWin\"])\n    won_last[visitor_team] = 1 - int(row[\"HomeWin\"])\n\n```", "```py\ndataset.ix[1000:1005]\n\n```", "```py\nfrom sklearn.tree import DecisionTreeClassifier\nclf = DecisionTreeClassifier(random_state=14)\n\n```", "```py\nX_previouswins = dataset[[\"HomeLastWin\", \"VisitorLastWin\"]].values\n\n```", "```py\nfrom sklearn.cross_validation import cross_val_score\nimport numpy as np\nscores = cross_val_score(clf, X_previouswins, y_true,\nscoring='accuracy')\nprint(\"Accuracy: {0:.1f}%\".format(np.mean(scores) * 100))\n\n```", "```py\nimport os\nstandings_filename = os.path.join(data_folder, \"standings.csv\")\nstandings = pd.read_csv(standings_filename, skiprows=1)\n\n```", "```py\nstandings.head()\n\n```", "```py\ndataset[\"HomeTeamRanksHigher\"] = 0\nfor index, row in dataset.iterrows():\n    home_team = row[\"Home Team\"]\n    visitor_team = row[\"Visitor Team\"]\n    home_rank = standings[standings[\"Team\"] == home_team][\"Rk\"].values[0]\n    visitor_rank = standings[standings[\"Team\"] == visitor_team][\"Rk\"].values[0]\n    row[\"HomeTeamRanksHigher\"] = int(home_rank > visitor_rank)\n    dataset.set_value(index, \"HomeTeamRanksHigher\", int(home_rank < visitor_rank))\n\n```", "```py\nX_homehigher = dataset[[\"HomeLastWin\", \"VisitorLastWin\", \"HomeTeamRanksHigher\"]].values\n\n```", "```py\nclf = DecisionTreeClassifier(random_state=14)\nscores = cross_val_score(clf, X_homehigher, y_true, scoring='accuracy')\nprint(\"Accuracy: {0:.1f}%\".format(np.mean(scores) * 100))\n\n```", "```py\nlast_match_winner = defaultdict(int)\ndataset[\"HomeTeamWonLast\"] = 0\n\nfor index, row in dataset.iterrows():\n    home_team = row[\"Home Team\"]\n    visitor_team = row[\"Visitor Team\"]\n    teams = tuple(sorted([home_team, visitor_team])) # Sort for a consistent ordering\n    # Set in the row, who won the last encounter\n    home_team_won_last = 1 if last_match_winner[teams] == row[\"Home Team\"] else 0\n    dataset.set_value(index, \"HomeTeamWonLast\", home_team_won_last)\n    # Who won this one?\n    winner = row[\"Home Team\"] if row[\"HomeWin\"] else row[\"Visitor Team\"]\n    last_match_winner[teams] = winner\n\n```", "```py\nX_lastwinner = dataset[[ \"HomeTeamWonLast\", \"HomeTeamRanksHigher\", \"HomeLastWin\", \"VisitorLastWin\",]].values\nclf = DecisionTreeClassifier(random_state=14, criterion=\"entropy\")\n\nscores = cross_val_score(clf, X_lastwinner, y_true, scoring='accuracy')\n\nprint(\"Accuracy: {0:.1f}%\".format(np.mean(scores) * 100))\n\n```", "```py\nfrom sklearn.preprocessing import LabelEncoder\nencoding = LabelEncoder()\nencoding.fit(dataset[\"Home Team\"].values)\nhome_teams = encoding.transform(dataset[\"Home Team\"].values)\nvisitor_teams = encoding.transform(dataset[\"Visitor Team\"].values)\nX_teams = np.vstack([home_teams, visitor_teams]).T\n\n```", "```py\nfrom sklearn.preprocessing import OneHotEncoder\nonehot = OneHotEncoder()\nX_teams = onehot.fit_transform(X_teams).todense()\n\n```", "```py\nclf = DecisionTreeClassifier(random_state=14)\nscores = cross_val_score(clf, X_teams, y_true, scoring='accuracy')\nprint(\"Accuracy: {0:.1f}%\".format(np.mean(scores) * 100))\n\n```", "```py\nfrom sklearn.ensemble import RandomForestClassifier\nclf = RandomForestClassifier(random_state=14)\nscores = cross_val_score(clf, X_teams, y_true, scoring='accuracy')\nprint(\"Accuracy: {0:.1f}%\".format(np.mean(scores) * 100))\n\n```", "```py\nX_all = np.hstack([X_lastwinner, X_teams])\nclf = RandomForestClassifier(random_state=14)\nscores = cross_val_score(clf, X_all, y_true, scoring='accuracy')\nprint(\"Accuracy: {0:.1f}%\".format(np.mean(scores) * 100))\n\n```", "```py\nfrom sklearn.grid_search import GridSearchCV\n\nparameter_space = {\n \"max_features\": [2, 10, 'auto'],\n \"n_estimators\": [100, 200],\n \"criterion\": [\"gini\", \"entropy\"],\n \"min_samples_leaf\": [2, 4, 6],\n}\n\nclf = RandomForestClassifier(random_state=14)\ngrid = GridSearchCV(clf, parameter_space)\ngrid.fit(X_all, y_true)\nprint(\"Accuracy: {0:.1f}%\".format(grid.best_score_ * 100))\n\n```", "```py\nprint(grid.best_estimator_)\n\n```", "```py\nRandomForestClassifier(bootstrap=True, class_weight=None, criterion='entropy',\n            max_depth=None, max_features=2, max_leaf_nodes=None,\n            min_samples_leaf=2, min_samples_split=2,\n            min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=1,\n            oob_score=False, random_state=14, verbose=0, warm_start=False)\n\n```", "```py\ndataset[\"New Feature\"] = feature_creator()\n\n```", "```py\ndataset[\"New Feature\"] = feature_creator(dataset)\n\n```", "```py\ndataset[\"My New Feature\"] = 0\n\n```", "```py\nfor index, row in dataset.iterrows():\n    home_team = row[\"Home Team\"]\n    visitor_team = row[\"Visitor Team\"]\n    # Some calculation here to alter row\n    dataset.set_value(index, \"FeatureName\", feature_value)\n\n```"]