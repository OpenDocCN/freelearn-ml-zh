- en: '1'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '1'
- en: 'Machine Learning as a Service: the Digital Exchange and Web APIs'
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 机器学习即服务：数字交换和Web API
- en: Most of how we interact with ML today is done through **web APIs**. Even when
    using **large language model** (**LLM**) chatbots through a web browser, web API
    calls are being made in the background to give us the reply. More often than not,
    your BP Processes will also use web APIs to obtain the results of an ML prediction
    that’s hosted online.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们今天与ML互动的大部分方式都是通过**Web API**。即使是通过Web浏览器使用**大型语言模型**（**LLM**）聊天机器人，也会在后台进行Web
    API调用以给我们回复。通常情况下，您的BP流程也将使用Web API来获取在线托管ML预测的结果。
- en: 'In this chapter, we’re going to explore the most popular ML web APIs for IA,
    how to find them on BP’s **Digital Exchange** (**DX**), how to connect them to
    BP, and how to build one yourself so that predictions can be made in your automation
    use cases. More specifically, we will cover the following:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨IA中最流行的ML Web API，如何在BP的**数字交换**（**DX**）上找到它们，如何将它们连接到BP，以及如何自己构建一个，以便在自动化用例中进行预测。更具体地说，我们将涵盖以下内容：
- en: Understanding what the most common ML services are, some of their common use
    cases, and how to find them on the DX
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解最常见的ML服务、它们的一些常见用例以及如何在DX上找到它们
- en: Going through two examples of using pre-built downloadable assets from the DX
    to make ML predictions
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过两个示例说明如何使用DX中预构建的可下载资产进行ML预测
- en: Building a BP **Web API Service** from scratch to connect to an ML service that
    is not currently available on the DX
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从头开始构建BP **Web API服务**以连接到DX上目前不可用的ML服务
- en: 'By the end of the chapter, we’ll have covered examples of three of the most
    commonly used **machine learning as a service** (**MLaaS**) platforms: **Amazon
    Web Service** (**AWS**), **Azure**, and **Google Cloud Platform** (**GCP**). These
    examples also cover some of the most common IA use cases: extracting data from
    unstructured text, extracting data from forms, and extracting text from images.
    We will have also covered some of the key concepts that will inform our solution
    design in the future: **single** versus **batch** and **synchronous** versus **asynchronous**
    predictions.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，我们将涵盖三个最常用的**机器学习即服务**（**MLaaS**）平台：**亚马逊网络服务**（**AWS**）、**Azure**和**谷歌云平台**（**GCP**）的示例。这些示例还涵盖了某些最常见的IA用例：从非结构化文本中提取数据、从表格中提取数据以及从图像中提取文本。我们还将涵盖一些关键概念，这些概念将指导我们未来的解决方案设计：**单次**与**批量**以及**同步**与**异步**预测。
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'For this chapter, ensure that the following are in place:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本章，请确保以下条件满足：
- en: A valid Blue Prism Portal ([https://portal.blueprism.com](https://portal.blueprism.com))
    account. This is required to download assets from the DX. An account can be created
    free of charge.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个有效的Blue Prism Portal ([https://portal.blueprism.com](https://portal.blueprism.com))
    账户。这是从DX下载资产所必需的。账户可以免费创建。
- en: An active account at AWS, Azure, and GCP. We will go over examples using each
    vendor in this chapter. All examples can be run within the free tiers offered
    by the services.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在AWS、Azure和GCP上有一个活跃的账户。在本章中，我们将使用每个供应商的示例。所有示例都可以在服务提供的免费层中运行。
- en: Download the following file from GitHub at [https://github.com/PacktPublishing/Intelligent-Automation-with-Blue-Prism/blob/main/ch1/Ex_1_to_3.bprelease](https://github.com/PacktPublishing/Intelligent-Automation-with-Blue-Prism/blob/main/ch1/Ex_1_to_3.bprelease).
    Import the `.bprelease` file into BP. This contains sample Processes that will
    be used in our examples.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从GitHub [https://github.com/PacktPublishing/Intelligent-Automation-with-Blue-Prism/blob/main/ch1/Ex_1_to_3.bprelease](https://github.com/PacktPublishing/Intelligent-Automation-with-Blue-Prism/blob/main/ch1/Ex_1_to_3.bprelease)
    下载以下文件。将`.bprelease`文件导入BP。这包含将在我们的示例中使用的示例流程。
- en: Using the DX
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用DX
- en: The DX is BP’s marketplace, containing many BP-developed and community-submitted
    `.bprelease`, `.bpskill`, `.bpobject`, `.bpprocess`, and `.xml`. Most of the assets
    on the DX are free of charge to download and integrate; however, there are likely
    costs associated with using the ML API services themselves. Using pre-built assets
    from the DX is the *easiest and fastest way* to get ML into your automated business
    processes, provided the service fits your use case.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: DX是BP的市场，包含许多BP开发和社区提交的`.bprelease`、`.bpskill`、`.bpobject`、`.bpprocess`和`.xml`文件。DX上的大多数资产都可以免费下载和集成；然而，使用ML
    API服务本身可能存在成本。如果服务符合您的用例，使用DX中的预构建资产是**最快和最简单的方法**来将ML集成到您的自动化业务流程中。
- en: In this section, we’ll see what popular ML services are available on the DX
    and what the potential use cases are. Real-life use case examples are provided
    whenever possible, drawn from my own research examining over 100 IA use cases
    and technologies.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将了解DX上可用的流行机器学习服务以及潜在的使用案例。在可能的情况下，将提供真实世界的使用案例示例，这些示例来自我对超过100个IA用例和技术的研究。
- en: Accessing the DX
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 访问DX
- en: The DX can be accessed at [https://digitalexchange.blueprism.com](https://digitalexchange.blueprism.com).
    You’ll need to log in using your BP Portal account credentials to download assets.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过[https://digitalexchange.blueprism.com](https://digitalexchange.blueprism.com)访问DX。你需要使用你的BP门户账户凭据登录以下载资产。
- en: 'There’s much more available on the DX than just web APIs. Since we’re only
    interested in web APIs for this chapter, click on **More Filters** and filter
    based on **Connector** to narrow down the search results:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: DX上可用的不仅仅是Web API。由于我们只对本章中的Web API感兴趣，请点击**更多过滤器**并根据**连接器**过滤以缩小搜索结果：
- en: '![Figure 1.1 – Filtering for web APIs on the DX](img/B18416_01_1.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![图1.1 – 在DX上过滤Web API](img/B18416_01_1.jpg)'
- en: Figure 1.1 – Filtering for web APIs on the DX
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.1 – 在DX上过滤Web API
- en: The **Search for Assets** search box can then be used to find specific ML services
    *if you already know the service name*. Later, I’ll provide a summary of all of
    the most popular search terms you can use to find ML assets on the DX based on
    their use case. But first, let’s discuss some fundamentals that are needed to
    use ML web APIs.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用**搜索资产**搜索框来查找特定的ML服务，如果你已经知道服务名称。稍后，我将提供所有最流行的搜索术语的摘要，你可以根据它们的使用案例在DX上找到ML资产。但首先，让我们讨论一些使用ML
    Web API所需的基本知识。
- en: Machine learning web API fundamentals
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 机器学习Web API基础知识
- en: Under traditional RPA, BP interacts with desktop applications or with websites
    through a web browser. Connecting to ML algorithms can’t normally be done through
    either of those methods. Instead, over 90% of commercially available algorithms,
    including those on AWS, Azure, GCP, OpenAI, and so on, are exposed as web APIs.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在传统的RPA中，BP通过网页浏览器与桌面应用程序或网站交互。通常无法通过这两种方法连接到机器学习算法。相反，超过90%的商业可用算法，包括AWS、Azure、GCP、OpenAI等，都作为Web
    API公开。
- en: A standard web API call from a BP Digital Worker is shown in the following image.
    First, the Digital Worker makes an API request, which reaches the API endpoint
    through the Internet. The ML prediction is made and the endpoint returns an API
    response containing the prediction back to BP.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图像显示了从BP数字工作者发出的标准Web API调用。首先，数字工作者发起API请求，通过互联网到达API端点。做出机器学习预测后，端点返回包含预测的API响应，返回到BP。
- en: '![Figure 1.2 – The most common way to use ML with RPA: web API calls over the
    internet](img/B18416_01_2.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![图1.2 – 使用RPA与ML最常见的方式：通过互联网进行Web API调用](img/B18416_01_2.jpg)'
- en: 'Figure 1.2 – The most common way to use ML with RPA: web API calls over the
    internet'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.2 – 使用RPA与ML最常见的方式：通过互联网进行Web API调用
- en: Many ML models are proprietary. Vendors want to protect their intellectual property
    by hosting models on their own servers, which have protected API endpoints. If
    your BP environment isn’t allowed to connect to the Internet, you’ll need to consult
    with your networking and security teams to see whether exemptions can be made.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 许多机器学习模型是专有的。供应商希望通过在自己的服务器上托管模型来保护他们的知识产权，这些服务器具有受保护的API端点。如果你的BP环境不允许连接到互联网，你需要咨询你的网络和安全团队，看看是否可以做出例外。
- en: If not, then using publicly hosted ML APIs won’t be possible. You’ll either
    have to develop and host your own models over the Intranet or make predictions
    directly on the Digital Workers themselves. Note that it’s the Digital Workers
    that make the ML requests. Some people mistakenly believe that the BP application
    server will make calls to the API endpoint.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不行，那么使用公开托管的机器学习API将不可行。你将不得不在Intranet上开发和托管自己的模型，或者直接在数字工作者上做出预测。请注意，是数字工作者发起机器学习请求。有些人错误地认为BP应用程序服务器会调用API端点。
- en: Note the distinction between a *web API*, which is what we connect to get an
    ML prediction, and a *Web API Service*, which is a BP product feature. The web
    API services feature is used to define and set up connections to web APIs. We’ll
    create a Web API Service from scratch as the last example in this chapter.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 注意区分*Web API*，这是我们连接以获取机器学习预测的API，以及*Web API服务*，这是BP产品的一个功能。Web API服务功能用于定义和设置与Web
    API的连接。我们将在这个章节的最后创建一个Web API服务作为最后一个示例。
- en: 'Official documentation on this product feature can be found here: [https://bpdocs.blueprism.com/bp-7-1/en-us/Web%20API/HTML/configure-api-definition.htm](https://bpdocs.blueprism.com/bp-7-1/en-us/Web%20API/HTML/configure-api-definition.htm)'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 关于此产品功能的官方文档可以在此处找到：[https://bpdocs.blueprism.com/bp-7-1/en-us/Web%20API/HTML/configure-api-definition.htm](https://bpdocs.blueprism.com/bp-7-1/en-us/Web%20API/HTML/configure-api-definition.htm)
- en: In the remaining parts of this section, we’ll look at what’s important to know
    about web APIs from an IA integration perspective. This includes **authentication**,
    **JSON**, **pricing**, **single** versus **batch** prediction, and **synchronous**
    versus **asynchronous** prediction.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节的剩余部分，我们将从IA集成角度探讨了解Web API的重要信息。这包括**认证**、**JSON**、**定价**、**单次**与**批量**预测，以及**同步**与**异步**预测。
- en: Authentication
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 认证
- en: 'Most web API services require you to sign up before they can be used. After
    signing up, you’ll be given one or more unique ID(s), similar to a username and
    password, to uniquely identify you. Depending on the specific service, these unique
    ID(s) might be enough to directly gain access and call your ML API to receive
    your prediction. This is shown in *Figure 1**.3*:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数Web API服务在使用前都需要你注册。注册后，你会得到一个或多个唯一的ID，类似于用户名和密码，以唯一地识别你。根据具体的服务，这些唯一的ID可能足以直接获取访问权限并调用你的ML
    API以接收你的预测。这如图*图1**.3*所示：
- en: '![Figure 1.3 – When the unique IDs are valid as authentication credentials](img/B18416_01_3.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![图1.3 – 当唯一ID作为认证凭证有效时](img/B18416_01_3.jpg)'
- en: Figure 1.3 – When the unique IDs are valid as authentication credentials
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.3 – 当唯一ID作为认证凭证有效时
- en: An example of this is Azure. You can pass in the unique ID, called a **subscription
    key** in Azure terminology, to access your endpoint for prediction.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，Azure就是一个这样的例子。你可以传入一个唯一的ID，在Azure术语中称为**订阅密钥**，以访问你的预测端点。
- en: However, most services will require you to use your ID(s) to request for a temporary
    access token before calling the ML API. First, you make a request to receive a
    temporary access token using your unique credentials. Then, pass in this temporary
    token along with the input data to your ML API request to get your predicted result.
    For example, AWS calls their unique IDs the **access key ID** and the **secret
    access key**. In GCP, they are called the **Client ID** and the **Client Secret**.
    Both AWS and GCP require passing in a temporary access token to the ML API call.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，大多数服务将要求你在调用ML API之前使用你的ID请求一个临时访问令牌。首先，你使用你的唯一凭证发送一个请求以接收一个临时访问令牌。然后，将这个临时令牌连同输入数据一起传递给你的ML
    API请求以获取你的预测结果。例如，AWS将他们的唯一ID称为**访问密钥ID**和**秘密访问密钥**。在GCP中，它们被称为**客户端ID**和**客户端密钥**。AWS和GCP都要求在ML
    API调用中传递一个临时访问令牌。
- en: '![Figure 1.4 – A two-part API call: getting the access token and calling the
    ML API](img/B18416_01_4.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![图1.4 – 两部分API调用：获取访问令牌和调用ML API](img/B18416_01_4.jpg)'
- en: 'Figure 1.4 – A two-part API call: getting the access token and calling the
    ML API'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.4 – 两部分API调用：获取访问令牌和调用ML API
- en: The specific way that this works differs from vendor to vendor. For instance,
    some will have you submit the unique IDs as query parameters, while others need
    you to submit them in the request headers. Some use a proprietary algorithm to
    generate your temporary access token (including AWS) while others use open standards
    such as OAuth2 (including GCP).
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这种工作方式的具体方式因供应商而异。例如，一些供应商会让你将唯一ID作为查询参数提交，而另一些则要求你在请求头中提交。一些使用专有算法生成你的临时访问令牌（包括AWS），而另一些则使用开放标准，如OAuth2（包括GCP）。
- en: You’ll need to consult the vendor’s documentation to find out specific details.
    One of the main benefits of using a pre-built asset from the DX is that the authentication
    logic is usually handled for you! All you need to do is generate your unique credentials
    from the ML provider, and the temporary access token handling logic (if any) will
    be handled for you already.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要查阅供应商的文档以获取具体细节。使用DX中预构建资产的主要好处之一是，认证逻辑通常已经为你处理！你所需要做的就是从ML提供者那里生成你的唯一凭证，并且（如果有的话）临时访问令牌处理逻辑也已经为你处理。
- en: JSON
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: JSON
- en: JSON is one of the most popular data formats used to exchange data between web
    services. Almost all ML web APIs expect to receive JSON as input data and provide
    JSON as output data. When using a web API from the DX, almost all of the conversions
    between BP’s data types to JSON will be done for you.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: JSON 是用于在 Web 服务之间交换数据的最流行的数据格式之一。几乎所有机器学习 Web API 都期望接收 JSON 作为输入数据，并返回 JSON
    作为输出数据。当使用来自 DX 的 Web API 时，BP 的数据类型与 JSON 之间的几乎所有转换都将为您自动完成。
- en: There may be situations where you need to manually convert data from BP into
    JSON. This is most likely to happen for `Utility – JSON` VBO, which can be found
    in the `VBO` sub-folder where BP is installed.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 可能存在需要手动将 BP 数据转换为 JSON 的情况。这种情况最可能发生在“实用工具 – JSON”VBO 上，该 VBO 可在 BP 安装目录下的“VBO”子文件夹中找到。
- en: 'Sending files in JSON format requires you to first encode them, usually in
    Base64 format. There are three VBOs provided by BP on the DX that can help with
    this: `Utility – Encode Decode`, `Utility – File Manipulation`, and `Base64Encoder`.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 以 JSON 格式发送文件需要您首先对其进行编码，通常使用 Base64 格式。BP 在 DX 上提供了三个 VBO 来帮助完成这项工作：`实用工具 –
    编码解码`、`实用工具 – 文件操作`和`Base64Encoder`。
- en: Pricing
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 定价
- en: MLaaS offerings typically have free usage up to a limit. After the free limit
    is used, you’ll start to pay per transaction. The limits are usually reset on
    a monthly basis. For example, let’s look at Azure’s Computer Vision API ([https://azure.microsoft.com/en-us/pricing/details/cognitive-services/computer-vision/](https://azure.microsoft.com/en-us/pricing/details/cognitive-services/computer-vision/)).
    At the time of writing this book, it offers 5,000 free transactions per month.
    For the next 1 million transactions, the cost is 10 cents per transaction. Between
    1 and 10 million transactions, the cost is 6.5 cents per transaction. As you make
    more transactions per month, your cost per transaction goes down.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: MLaaS 提供的通常在达到一定限制内是免费的。使用免费限额后，您将开始按交易付费。这些限制通常每月重置。例如，让我们看看 Azure 的计算机视觉 API
    ([https://azure.microsoft.com/en-us/pricing/details/cognitive-services/computer-vision/](https://azure.microsoft.com/en-us/pricing/details/cognitive-services/computer-vision/))。在撰写本书时，它每月提供
    5,000 次免费交易。对于接下来的 1,000,000 次交易，每次交易的费用是 10 美分。在 1 到 10 百万次交易之间，每次交易的费用是 6.5
    美分。随着您每月交易次数的增加，每次交易的成本会降低。
- en: The pricing varies based on many factors, such as what region you’re in, what
    specific service you’re using in their Computer Vision library, and whether you’re
    willing to pre-commit to using a minimum number of transactions.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 定价取决于许多因素，例如您所在的地区、您在计算机视觉库中使用的特定服务，以及您是否愿意预先承诺使用最低数量的交易。
- en: It’s important to note that *one transaction is not the same as one API call*!
    For example, there may be a service that allows you to send in multiple documents
    at once. Each document might be counted as a separate transaction, despite being
    submitted in one API call. The devil is in the details, so you really need to
    look at the pricing pages carefully when evaluating how suitable an MLaaS offering
    is for your use case. This represents ongoing costs to the operation of the IA
    solution that must be weighed against the benefits.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，*一次交易并不等同于一次 API 调用*！例如，可能有一种服务允许您一次性发送多个文档。每个文档可能被视为单独的交易，尽管它们是在一个 API
    调用中提交的。魔鬼在于细节，因此在评估 MLaaS 提供是否适合您的用例时，您需要仔细查看定价页面。这代表了 IA 解决方案运营的持续成本，必须权衡其带来的好处。
- en: Single versus batch predictions
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 单个与批量预测
- en: It’s key to understand the API by reading through its documentation before using
    it. One important thing to note when looking at the documentation is whether the
    API allows for only a single prediction per API request or whether it can accept
    multiple inputs in a batch for a single API call. There may be separate endpoints
    for one versus the other.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 API 之前，通过阅读其文档来理解 API 是非常重要的。在查看文档时需要注意的一个重要事项是，API 是否仅允许每个 API 请求进行一次预测，或者是否可以接受单个
    API 调用中的批量多个输入。可能存在针对这两种情况的不同端点。
- en: '![Figure 1.5 – Batch prediction](img/B18416_01_5.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.5 – 批量预测](img/B18416_01_5.jpg)'
- en: Figure 1.5 – Batch prediction
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.5 – 批量预测
- en: For batch predictions, you’ll first send the input data for multiple predictions
    to the API endpoint in a single request (the first step in *Figure 1**.5*). The
    predictions will be made (second step) and the response will return all of the
    predicted results (third step). In the single prediction case, only one prediction
    can be made per API request call.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 对于批处理预测，您将首先在单个请求中将多个预测的输入数据发送到API端点（*图1.5*中的第一步）。预测将被执行（第二步），响应将返回所有预测结果（第三步）。在单次预测的情况下，每个API请求调用只能进行一次预测。
- en: Note that *Single Request* and *Single Response* shown in the image are NOT
    characteristics of single versus batch; it is a question of synchronous versus
    asynchronous, which will be discussed next.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 注意图中显示的“单个请求”和“单个响应”并不是单次与批量之间的特性；这是一个同步与异步的问题，将在下一节讨论。
- en: Synchronous vs. asynchronous predictions
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 同步与异步预测
- en: Single versus batch refers to the number of predictions that can be requested
    for in a single API call. Synchronous versus asynchronous, on the other hand,
    refers to whether the prediction results are returned in the same API call as
    the request.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 单次与批量指的是在单个API调用中可以请求的预测数量。另一方面，同步与异步指的是预测结果是否在同一个API调用中作为请求返回。
- en: For a synchronous (also called **online**) call, the predicted result(s) is
    returned in the same call as the request. This is used when the prediction can
    be made relatively quickly, such as with short documents and single images. *Figure
    1**.5* also shows an online case where the response is returned in the same API
    call.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 对于同步（也称为**在线**）调用，预测结果在同一个请求中返回。这用于预测可以相对快速完成的情况，例如短文档和单张图片。*图1.5*也显示了一个在线案例，其中响应在同一个API调用中返回。
- en: 'For asynchronous (also called **offline**) calls, you won’t receive the prediction
    in the same API call as the request. Instead, you’ll first receive a unique ID
    for your request that you can use to enquire about the status of your prediction
    job. Imagine if you need to process a large video as input. It may take minutes
    or even hours before the ML service can come back with its prediction. Let’s look
    at AWS’s Rekognition Video API as an example:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 对于异步（也称为**离线**）调用，您不会在同一个API调用中收到预测结果。相反，您将首先收到一个用于查询预测作业状态的唯一ID。想象一下，如果您需要处理一个大的视频作为输入，ML服务可能需要几分钟甚至几小时才能返回其预测。以下以AWS的Rekognition
    Video API为例：
- en: '![Figure 1.6 – AWS’s Rekognition Video API: asynchronous calls](img/B18416_01_6.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![图1.6 – AWS的Rekognition Video API：异步调用](img/B18416_01_6.jpg)'
- en: 'Figure 1.6 – AWS’s Rekognition Video API: asynchronous calls'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.6 – AWS的Rekognition Video API：异步调用
- en: First, you create an API request for a prediction by providing an S3 link to
    the video. In this first API call, you’ll receive a `JobId` back. For the second
    API call, you pass in the JobId to the `GetLabelDetection` endpoint, which returns
    the `JobStatus`. If the video is still being processed, you’ll receive a `JobStatus`
    of `IN_PROGRESS`.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，您通过提供一个视频的S3链接来创建一个预测的API请求。在这个第一个API调用中，您将收到一个`JobId`。对于第二个API调用，您将`JobId`传递给`GetLabelDetection`端点，该端点返回`JobStatus`。如果视频仍在处理中，您将收到`JobStatus`为`IN_PROGRESS`。
- en: Depending on the size of the video, you may need to wait a few seconds or even
    a few minutes before the prediction is finished. During this time, you can continue
    to call the `GetLabelDetection` API endpoint to check the status of your job.
    When it’s finished, the JobStatus will turn into `SUCCEEDED` and the predicted
    labels will be returned with the request.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 根据视频的大小，您可能需要等待几秒钟甚至几分钟，直到预测完成。在这段时间内，您可以继续调用`GetLabelDetection` API端点来检查作业状态。当它完成时，JobStatus将变为`SUCCEEDED`，并且预测的标签将与请求一起返回。
- en: While batch often implies asynchronous, this isn’t always the case! It’s possible
    for a single prediction to be asynchronous (such as in the AWS Rekognition Video
    example) and for batch prediction to be synchronous (as will be seen in the last
    example in this chapter).
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然“批处理”通常意味着异步，但这并不总是如此！单个预测可以是异步的（例如在AWS Rekognition Video示例中），而批处理预测可以是同步的（正如本章最后的一个示例所示）。
- en: Now that we’ve covered the basics of ML web APIs, let’s look at how we can use
    the DX to download pre-built assets and quickly make an ML prediction without
    having to develop an ML model ourselves.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经介绍了ML Web API的基础知识，让我们看看我们如何使用DX下载预构建的资产，并快速进行ML预测，而无需自己开发ML模型。
- en: An overview of MLaaS on the DX
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DX上MLaaS的概述
- en: MLaaS offerings, such as those from Azure, AWS, GCP, and IBM, allow you to quickly
    integrate pre-trained ML algorithms into BP. You’ll be able to use the ML parts
    of IA without the complexities of the ML lifecycle, such as training, choosing
    between algorithms, tuning, hosting, maintenance, etc. However, MLaaS is often
    less flexible, as the models are pre-trained and usually not customizable to your
    specific use case. Most of these services provide *generic* rather than *specific*
    ML capabilities.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 机器学习即服务（MLaaS）提供的产品，如Azure、AWS、GCP和IBM的产品，允许你快速将预训练的机器学习算法集成到业务流程（BP）中。你将能够使用智能自动化（IA）的机器学习部分，而无需处理机器学习生命周期中的复杂性，如训练、选择算法、调整、托管、维护等。然而，MLaaS通常不太灵活，因为模型是预训练的，通常不能根据你的特定用例进行定制。这些服务中的大多数提供的是*通用*而不是*特定*的机器学习功能。
- en: To save you time searching the DX, I’ve compiled and summarized a list of the
    most popular MLaaS offerings currently available, grouped by the type of input
    data you’re looking to provide into the algorithm. This will give you a sense
    of what IA cases you can quickly and simply implement. The types of input data
    are categorized as **Images**, **Video**, **Speech**, and **Text**.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 为了节省你搜索DX的时间，我已经整理并总结了目前最流行的机器学习即服务（MLaaS）提供的产品列表，按你打算提供给算法的输入数据类型进行分组。这将给你一个关于你可以快速简单地实现的智能自动化案例的感觉。输入数据类型被分类为**图像**、**视频**、**语音**和**文本**。
- en: Multi-modal ML models that can accept different types of inputs are starting
    to appear. An example of this is GPT-4, which can accept both text and image as
    input. These models won’t be covered in this section, as they aren’t fully available
    during the writing of this book.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 能够接受不同类型输入的多模态机器学习模型开始出现。GPT-4就是这样一个例子，它可以接受文本和图像作为输入。这些模型在本节中不会涉及，因为它们在本书撰写期间尚未完全可用。
- en: Note that numerical data isn’t listed as an input. Numerical input is usually
    used for regression problems, and there aren’t many services that provide ML models
    that are generic enough to be useful for regression. If you’re trying to predict
    numerical data, you’ll probably need to build your own ML model.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，数值数据并未列为输入项。数值输入通常用于回归问题，而且提供足够通用的机器学习模型以用于回归的服务并不多。如果你试图预测数值数据，你可能需要构建自己的机器学习模型。
- en: From a development or proof-of-concept perspective, most ML vendors offer generous
    free usage tiers of their ML prediction services. This allows you to evaluate
    whether it makes sense to pursue a particular IA project in a short period of
    time.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 从开发或概念验证的角度来看，大多数机器学习（ML）供应商提供其预测服务的慷慨免费使用层。这使你能够在短时间内评估是否值得追求特定的智能自动化（IA）项目。
- en: While investigating 122 IA use cases for my thesis research, I found that 75%
    of them could potentially have been fulfilled by MLaaS, so investigating these
    services and the DX is well worth your time. Text-based services were by far the
    most common, representing over 66% of all IA use cases.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在调查我的论文研究中的122个智能自动化（IA）用例时，我发现其中75%有可能通过机器学习即服务（MLaaS）来实现，因此调查这些服务和数字化转型（DX）非常值得你的时间。基于文本的服务是最常见的，占所有智能自动化用例的66%以上。
- en: Image services
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 图像服务
- en: Image services return insight into what’s found in images. Most of these services
    have specific requirements with regard to what images can be submitted to their
    service. This can include file size requirements, image formats (PNG and JPG are
    the most common), image resolution, minimum and maximum dimensions, and image
    orientation.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 图像服务可以提供关于图像中内容的洞察。这些服务中的大多数对可以提交给其服务的图像有具体要求。这可能包括文件大小要求、图像格式（PNG和JPG是最常见的）、图像分辨率、最小和最大尺寸以及图像方向。
- en: Some will require you to upload the files as part of the API request body content,
    while others will ask you to first upload the files somewhere and provide URLs
    to the images. Many of these APIs offer *both single and batch operations* and
    are typically *synchronous*, returning the detected labels in the same request
    as the initial response.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 一些服务可能要求你将文件作为API请求体内容的一部分上传，而其他服务可能要求你首先将文件上传到某个地方，并提供图像的URL。许多这些API提供*单次和批量操作*，通常是*同步的*，在同一个请求中返回检测到的标签和初始响应。
- en: Image-based ML services only accounted for 10% of IA use cases that I found.
    An issue with these types of services is that the generic objects returned by
    the predictions aren’t specific enough to be useful. However, many of these services
    also allow you to customize the labels, meaning that you can further train an
    ML model, using the vendor’s model as a starting base, to match what you’re interested
    in finding. This is where many potential image-based use cases can be unlocked.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 基于图像的机器学习服务仅占我发现的人工智能用例的10%。这些类型服务的问题在于预测返回的通用对象不够具体，无法发挥作用。然而，许多这些服务也允许您自定义标签，这意味着您可以使用供应商的模型作为起点，进一步训练机器学习模型，以匹配您感兴趣寻找的内容。这正是许多潜在基于图像的使用案例得以解锁的地方。
- en: 'After a prediction is made, you’ll get back the following:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 预测完成后，您将获得以下信息：
- en: A list of labels that are found in the image(s)
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图像中找到的标签列表
- en: '*X* and *Y* coordinates representing the boundaries of the discovered objects'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*X* 和 *Y* 坐标表示发现对象的边界'
- en: Confidence scores showing the degree of certainty that the object is of a particular
    label
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确信度分数显示对象属于特定标签的确定性程度
- en: 'The services and potential use cases of image-based services include the following:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 基于图像的服务及其潜在用例包括以下内容：
- en: '**Object detection**: This allows you to find labels in images drawn from generic
    categories, such as animals, people, cars, buildings, etc. This can be further
    customized, in many cases, to detect *specific objects*, such as through AWS’s
    **DetectCustomLabels** and Azure’s **Custom Vision**. Some real-life IA use cases
    include quality assurance in factories for counting and finding product defects
    and dispensing prescription medication.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**对象检测**：这允许您在来自通用类别的图像中找到标签，例如动物、人、汽车、建筑物等。在许多情况下，这可以进一步定制，以检测*特定对象*，例如通过AWS的**DetectCustomLabels**和Azure的**Custom
    Vision**。一些现实生活中的人工智能用例包括在工厂中用于计数和查找产品缺陷以及分发处方药物的质量保证。'
- en: '**Face and facial feature detection**: This predicts whether faces are present
    in an image and the gender, estimated age, and overall mood displayed by the face.
    This could be used for surveillance and the processing of applications that contain
    photographs. The only IA use case I found that implemented facial recognition
    was to take attendance and to quantify student engagement during online learning
    courses.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**面部及面部特征检测**：这预测图像中是否存在面部，以及面部显示的性别、估计年龄和整体情绪。这可以用于监控和处理包含照片的申请。我发现的唯一实现面部识别的人工智能用例是在在线学习课程中记录出勤和量化学生参与度。'
- en: '**Image content moderation**: This allows us to determine whether an image
    contains adult or violent themes. This is most often used for user-uploaded content
    moderation on social media. I didn’t find real use cases for this in IA.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**图像内容审查**：这允许我们确定图像是否包含成人或暴力主题。这通常用于社交媒体上的用户上传内容审查。我在人工智能中没有找到这个功能的实际用例。'
- en: '**Text detection**: This returns where in the image text is found and what
    the text is. This is one of the most common image-based IA use cases.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文本检测**：这返回图像中文字的位置和文字内容。这是最常见的基于图像的人工智能用例之一。'
- en: '**Form detection**: This tells us whether an image has extractable form fields
    or tables in it. This is generically useful for IA and could be used for processing
    invoices, receipts, and financial reporting data. A real-life example of this
    is extracting data from scans of hand-written bank account application forms.'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**表单检测**：这告诉我们图像中是否包含可提取的表单字段或表格。这对于人工智能来说具有通用性，可以用于处理发票、收据和财务报告数据。一个现实生活中的例子是从手写银行账户申请表扫描中提取数据。'
- en: '|  | **Search term for** **DX skill** |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '|  | **DX技能**的搜索词 |'
- en: '| **Feature** | **AWS** | **Azure** | **Google Cloud** | **IBM** |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| **功能** | **AWS** | **Azure** | **Google Cloud** | **IBM** |'
- en: '| Object detection | Rekognition | Computer Vision | Cloud Vision API, Google
    Vision Skill | Visual Recognition Skill IBM Watson |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| 对象检测 | Rekognition | 计算机视觉 | 云视觉API，谷歌视觉技能 | IBM Watson视觉识别技能 |'
- en: '| Face and facial feature detection | Rekognition | Computer Vision | Cloud
    Vision API, Google Vision Skill | Visual Recognition Skill IBM Watson |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| 面部及面部特征检测 | Rekognition | 计算机视觉 | 云视觉API，谷歌视觉技能 | IBM Watson视觉识别技能 |'
- en: '| Content moderation | Rekognition | Computer Vision | Cloud Vision API, Google
    Vision Skill | Visual Recognition Skill IBM Watson |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| 内容审查 | Rekognition | 计算机视觉 | 云视觉API，谷歌视觉技能 | IBM Watson视觉识别技能 |'
- en: '| Text detection | Rekognition, Textract | Computer Vision | Cloud Vision API,
    Google Vision Skill | Visual Recognition Skill IBM Watson |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| 文本检测 | Rekognition, Textract | 计算机视觉 | 云视觉API，谷歌视觉技能 | IBM Watson视觉识别技能 |'
- en: '| Form detection | Textract | Form Recognizer Client | Cloud Document AI |
    N/A* |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| 表单检测 | Textract | 表单识别客户端 | 云文档AI | N/A* |'
- en: Table 1.1 – Search terms for image-based ML services on the DX
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 表1.1 – DX上基于图像的ML服务的搜索词
- en: '***Available from the vendor but not on the DX, so you must build your own**
    **web API.**'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '**从供应商处提供，但不在DX上，因此您必须自行构建** **web API**。'
- en: Video services
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 视频服务
- en: Services that take videos as input have a similar functionality to image services.
    They allow for the analysis of videos in *almost real time*. Depending on the
    service, you might be asked to provide your input as the URL of a stream, or to
    upload your video files to predesignated area.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 以视频为输入的服务具有与图像服务类似的功能。它们允许在**几乎实时**的情况下分析视频。根据服务不同，您可能需要提供输入作为流URL，或者上传您的视频文件到预指定的区域。
- en: Almost real time is a key point to keep in mind. Most ML services that process
    video are *asynchronous* and don’t immediately give you the predicted result.
    First, you make the call to the API to request a prediction. Then, you have to
    make a further call(s) to check whether the prediction is ready.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎实时是一个需要记住的关键点。大多数处理视频的ML服务都是**异步的**，不会立即给出预测结果。首先，您需要调用API请求预测。然后，您必须进行进一步的调用以检查预测是否准备就绪。
- en: There are usually maximum limits set on the length of the videos (3–6 hours)
    and file sizes (10–50 GB) that can be processed. These limits differ from vendor
    to vendor. Please check their API documentation and follow their guidelines with
    regard to these limits, resolutions, camera angles, video bitrates, etc. In my
    research, I didn’t find any use cases that used video as the input source. Instead
    of video, it may make sense to take snapshots of the video at regular intervals
    (e.g., every 5 seconds) and to use image-based ML services instead.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 通常会对视频长度（3-6小时）和文件大小（10-50 GB）的处理设置最大限制。这些限制因供应商而异。请检查他们的API文档，并遵循他们关于这些限制、分辨率、摄像机角度、视频比特率等方面的指南。在我的研究中，我没有找到任何使用视频作为输入源的用例。相反，可能更有意义的是在固定间隔（例如，每5秒）对视频进行快照，并使用基于图像的ML服务。
- en: 'After a prediction is made, you’ll get back the following:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 预测完成后，您将获得以下信息：
- en: A list of labels that are found in the video
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 视频中找到的标签列表
- en: '*X* and *Y* coordinates representing the boundaries of the discovered objects'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表示发现对象边界的**X**和**Y**坐标
- en: Start and end time ranges or timestamp for each label that is detected
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个检测到的标签的开始和结束时间范围或时间戳
- en: Confidence scores showing the degree of certainty that the object is of a particular
    label
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示对象属于特定标签的置信度分数
- en: 'The services and potential use cases of image-based services include the following:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 基于图像的服务及其潜在用例包括以下内容：
- en: '**Object detection**: This can be used to detect generic labels, such as animals,
    people, cars, buildings, etc. Sample use cases include surveillance, drone footage
    analysis, and quality assurance.'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**对象检测**：此功能可以用于检测通用标签，如动物、人、汽车、建筑物等。示例用例包括监控、无人机视频分析和质量保证。'
- en: '**Scene change detection**: This detects whether a video feed switches from
    one camera to another. This could be used for video cataloging, archiving, and
    trimming.'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**场景变化检测**：此功能用于检测视频流是否从一个摄像头切换到另一个摄像头。这可以用于视频编目、存档和剪辑。'
- en: '**Content moderation**: This predicts whether a video contains adult or violent
    themes. It’s often used for user-uploaded content moderation on social media.'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**内容审核**：此功能预测视频是否包含成人或暴力主题。它通常用于社交媒体上的用户上传内容审核。'
- en: '**Logo detection**: This detects logos in videos. It could be used to automatically
    flag or sensor brands and logos in video or to monitor user-submitted content.'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**标志检测**：此功能用于检测视频中的标志。它可以用于自动标记或检测视频中的品牌和标志，或用于监控用户提交的内容。'
- en: '**Face detection**: This detects the presence of faces in video. It can be
    used to automate access control to facilities, to track movement, and for surveillance.'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**人脸检测**：此功能用于检测视频中的人脸。它可以用于自动化设施访问控制、跟踪移动和监控。'
- en: '**Text extraction**: This is used to extract text from video. Even if the text
    is partially obscured for portions of the video, these services can reconstruct
    the full text if the camera moves enough to cover the entire text during the course
    of the video. This could be used to extract presentation slide content from live
    events.'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文本提取**：这用于从视频中提取文本。即使文本在视频的部分时间段被遮挡，这些服务也可以在摄像头移动足够覆盖整个文本的过程中重建完整的文本。这可以用于从现场活动提取演示文稿幻灯片内容。'
- en: '|  | **Search term for** **DX Skill** |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
  zh: '|  | **DX技能的搜索词** |'
- en: '| **Feature** | **AWS** | **Azure** | **Google Cloud** | **IBM** |'
  id: totrans-113
  prefs: []
  type: TYPE_TB
  zh: '| **特性** | **AWS** | **Azure** | **Google Cloud** | **IBM** |'
- en: '| Object detection | N/A* | N/A* | Cloud Video Intelligence | N/A |'
  id: totrans-114
  prefs: []
  type: TYPE_TB
  zh: '| 物体检测 | N/A* | N/A* | 云视频智能 | N/A |'
- en: '| Scene changes | N/A* | N/A* | Cloud Video Intelligence | N/A |'
  id: totrans-115
  prefs: []
  type: TYPE_TB
  zh: '| 场景变化 | N/A* | N/A* | 云视频智能 | N/A |'
- en: '| Content moderation | N/A* | N/A* | Cloud Video Intelligence | N/A |'
  id: totrans-116
  prefs: []
  type: TYPE_TB
  zh: '| 内容审核 | N/A* | N/A* | 云视频智能 | N/A |'
- en: '| Logo detection | N/A | N/A | Cloud Video Intelligence | N/A |'
  id: totrans-117
  prefs: []
  type: TYPE_TB
  zh: '| 标志检测 | N/A | N/A | 云视频智能 | N/A |'
- en: '| Face detection | N/A* | N/A* | Cloud Video Intelligence | N/A |'
  id: totrans-118
  prefs: []
  type: TYPE_TB
  zh: '| 人脸检测 | N/A* | N/A* | 云视频智能 | N/A |'
- en: '| Text extraction | N/A* | N/A* | Cloud Video Intelligence | N/A |'
  id: totrans-119
  prefs: []
  type: TYPE_TB
  zh: '| 文本提取 | N/A* | N/A* | 云视频智能 | N/A |'
- en: Table 1.2 - Search terms for video-based ML services on the DX
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 表1.2 - DX上基于视频的机器学习服务的搜索词
- en: '***Available from the vendor but not on the DX, so you must build your own**
    **web API.**'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '***由供应商提供但不在DX上，因此您必须构建自己的** **Web API**。'
- en: Speech services
  id: totrans-122
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 语音服务
- en: These allow you to extract data from live-streamed audio and saved audio files.
    This can be done *synchronously* or *asynchronously*, depending on the length
    of the audio or the size of the file. Shorter files are typically processed synchronously.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 这些允许您从直播音频和保存的音频文件中提取数据。这可以是同步的，也可以是异步的，具体取决于音频的长度或文件的大小。通常，较短的文件会同步处理。
- en: Depending on the API, the vendor may require you to upload audio files directly
    into the ML endpoint or upload them to cloud storage. They will also have requirements
    on the length of the audio and the languages spoken. In my research, I did not
    find any implemented use cases of IA using speech as the input.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 根据API，供应商可能要求您直接将音频文件上传到机器学习端点或上传到云存储。他们还会对音频的长度和使用的语言有要求。在我的研究中，我没有找到任何使用语音作为输入的IA实现案例。
- en: 'Typical outputs of a speech-based ML service are as follows:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 基于语音的机器学习服务的典型输出如下：
- en: The transcribed text
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 转录文本
- en: Timestamps of intervals of the transcribed text
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 转录文本的间隔时间戳
- en: Confidence scores
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 置信度分数
- en: 'Common capabilities and use cases of speech ML are as follows:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 语音机器学习的常见功能和用例如下：
- en: '**Speech transcription**: This converts spoken audio into text.'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**语音转录**：这会将语音音频转换为文本。'
- en: '**Text to speech**: This allows text to be read out loud as speech.'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文本到语音**：这允许文本被大声朗读出来。'
- en: '`purchase`, `modify`, or `cancel` `a ticket`.'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`购买`、`修改`或`取消``一张票`。'
- en: '**Speaker recognition**: This helps you to identify different speakers. This
    works best when the number of speakers to predict is sent as an input to the algorithm.
    It also assigns each speaker with a unique identifier. You can use the unique
    identifier to map audio back to a human speaker manually if you already know the
    identities of the speakers. This could be used to automatically add subtitles
    that include speakers’ names.'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**说话人识别**：这有助于您识别不同的说话人。当将预测的说话人数目作为输入传递给算法时，效果最佳。它还会为每个说话人分配一个唯一的标识符。如果您已经知道说话人的身份，可以使用唯一标识符手动将音频映射回人类说话人。这可以用于自动添加包含说话人名字的子标题。'
- en: '**Speech translation**: This allows you to transcribe audio into text of a
    different language. This can also be achieved by chaining a speech transcription
    service to a text translation service.'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**语音翻译**：这允许您将音频转录成不同语言的文本。这也可以通过将语音转录服务链接到文本翻译服务来实现。'
- en: '|  | **Search term for** **DX Skill** |'
  id: totrans-135
  prefs: []
  type: TYPE_TB
  zh: '|  | **DX技能的搜索词** |'
- en: '| **Feature** | **AWS** | **Azure** | **Google Cloud** | **IBM** |'
  id: totrans-136
  prefs: []
  type: TYPE_TB
  zh: '| **特性** | **AWS** | **Azure** | **Google Cloud** | **IBM** |'
- en: '| Speech transcription | Transcribe | Speech to text | Cloud Speech-to-Text
    API | N/A* |'
  id: totrans-137
  prefs: []
  type: TYPE_TB
  zh: '| 语音转录 | Transcribe | 语音到文本 | 云语音到文本API | N/A* |'
- en: '| Text to speech | Polly | N/A* | Cloud Text-to-Speech | N/A* |'
  id: totrans-138
  prefs: []
  type: TYPE_TB
  zh: '| 文本到语音 | Polly | N/A* | 云文本到语音 | N/A* |'
- en: '| Intent recognition | N/A* | N/A* | N/A* | N/A* |'
  id: totrans-139
  prefs: []
  type: TYPE_TB
  zh: '| 意图识别 | N/A* | N/A* | N/A* | N/A* |'
- en: '| Speaker recognition | N/A* | Azure Speaker Recognition Beta | N/A* | N/A*
    |'
  id: totrans-140
  prefs: []
  type: TYPE_TB
  zh: '| 说话人识别 | N/A* | Azure说话人识别Beta | N/A* | N/A* |'
- en: '| Speech translation | N/A | N/A* | N/A | N/A |'
  id: totrans-141
  prefs: []
  type: TYPE_TB
  zh: '| 语音翻译 | N/A | N/A* | N/A | N/A |'
- en: Table 1.3 – Search terms for video-based ML services on the DX
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 表1.3 – 在DX上基于视频的机器学习服务的搜索词
- en: '***Available from the vendor but not on the DX, so you must build your own**
    **web API.**'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '***由供应商提供但不在DX上，因此你必须构建自己的** **Web API**。'
- en: Text services
  id: totrans-144
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 文本服务
- en: Text-based ML services are by far the most commonly used ML services in IA.
    Around two-thirds of the 122 IA use cases I found were text-based, 52% of the
    cases involved the use of translation, **natural language processing** (**NLP**),
    **named entity recognition** (**NER**), OCR, and document classification, and
    15% of the use cases used chatbots as an interface to trigger IA.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 基于文本的机器学习服务是目前人工智能中最常用的机器学习服务。在我发现的122个人工智能用例中，大约三分之二都是基于文本的，其中52%的案例涉及使用翻译、**自然语言处理**（**NLP**）、**命名实体识别**（**NER**）、OCR和文档分类，15%的用例使用聊天机器人作为触发人工智能的接口。
- en: Text services are *usually* synchronous, and depending on the service, prediction
    requests can either be sent in one by one or in a batch. Text-based ML services
    take in the text to be analyzed and the language as input parameters.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 文本服务通常是**同步**的，并且根据服务不同，预测请求可以逐个发送或批量发送。基于文本的机器学习服务接收要分析的文本和语言作为输入参数。
- en: 'Typical outputs received from text ML are as follows:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 从文本机器学习收到的典型输出如下：
- en: The predicted labels
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 预测标签
- en: Confidence scores
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 置信度分数
- en: 'The following are common ways that text ML can be used:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些常见的文本机器学习的使用方式：
- en: '**Document classification**: This allows you to differentiate between different
    types of documents. This normally leads to further ML processing, such as entity
    recognition. An example of this is invoice processing. Document classification
    can be used to classify invoices by vendor. Another example is to separate documents
    into invoices and purchase orders because they often look similar.'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文档分类**：这允许你区分不同类型的文档。这通常会导致进一步的机器学习处理，例如实体识别。一个例子是发票处理。文档分类可以用来根据供应商对发票进行分类。另一个例子是将文档分为发票和采购订单，因为它们通常看起来很相似。'
- en: '**Entity recognition**: This extracts text into predefined categories, such
    as names, dates, numerical figures, and events. This can be used for categorizing
    text, filtering CVs, and extracting data from unstructured reports. This is one
    of the most popular use cases, especially for processing invoices, claims, and
    other standardized forms. Many vendors allow you to customize the list of entities
    to match your specific use case.'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**实体识别**：这将从预定义的类别中提取文本，例如名称、日期、数字和事件。这可以用于对文本进行分类、过滤简历和从非结构化报告中提取数据。这是最受欢迎的使用案例之一，尤其是在处理发票、索赔和其他标准化表格时。许多供应商允许你自定义实体列表以匹配你的特定用例。'
- en: '`I waited for 45 minutes before it was my turn`, the key phrases could be “waited”
    and “45 minutes”.'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`我等了45分钟才轮到我`，关键短语可以是“等了”和“45分钟”。'
- en: '**Sentiment analysis**: This finds the high-level opinion or attitude expressed
    in a block of text. Some common labels returned include *positive*, *neutral*,
    *negative*, and *mixed*. Most models can’t distinguish more nuanced sentiments
    under the same label; for example, “excited” and “happy” would both be returned
    as positive despite being different in reality. Common ways this can be used is
    to triage emails or customer support tickets and to detect sentiment in social
    media and product reviews.'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**情感分析**：这可以找到在一段文本中表达的高层次观点或态度。一些常见的返回标签包括*正面*、*中性*、*负面*和*混合*。大多数模型无法在同一标签下区分更细微的情感；例如，“兴奋”和“快乐”都会被返回为正面，尽管在现实中它们是不同的。这种方法的常见用途是对电子邮件或客户支持工单进行分类，以及在社交媒体和产品评论中检测情感。'
- en: '**Language detection**: This is typically used as a first step before sending
    the text to other text-based ML algorithms.'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**语言检测**：这通常在将文本发送到其他基于文本的机器学习算法之前作为第一步使用。'
- en: '**Translation**: This can translate text from one language to another in either
    real time or on demand. Over 50 languages are supported by all vendors.'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**翻译**：这可以在实时或按需将文本从一种语言翻译成另一种语言。所有供应商都支持超过50种语言。'
- en: '**Chatbots**: These services allow companies to create conversational interfaces
    for their applications. For example, one government agency used chatbots as an
    interface for people to request social security benefits, which further triggered
    IA to complete the processing.'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**聊天机器人**：这些服务允许公司为其应用程序创建对话式界面。例如，一个政府机构使用聊天机器人作为人们请求社会保障福利的接口，这进一步触发了人工智能来完成处理。'
- en: '**Question answering**: This is one of the main features of LLMs. As this technology
    is relatively new, I haven’t come across any use cases of this being used in IA
    just yet.'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**问答**：这是 LLMs 的主要功能之一。由于这项技术相对较新，我还没有遇到任何在 IA 中使用此技术的用例。'
- en: '**Text generation**: This is another relatively new use case enabled by LLMs.
    This would be useful as a way to create responses to user complaints or emails.'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文本生成**：这是由 LLMs 启动的一个相对较新的用例。这可以作为一种创建对用户投诉或电子邮件的回复的方式。'
- en: '|  | **Search term for** **DX Skill** |'
  id: totrans-160
  prefs: []
  type: TYPE_TB
  zh: '|  | **DX技能的搜索词** |'
- en: '| **Feature** | **AWS** | **Azure** | **Google Cloud** | **IBM** |'
  id: totrans-161
  prefs: []
  type: TYPE_TB
  zh: '| **功能** | **AWS** | **Azure** | **Google Cloud** | **IBM** |'
- en: '| Document classification | N/A* | Form Recognizer client | AutoML Natural
    Language, Cloud Natural Language API | N/A |'
  id: totrans-162
  prefs: []
  type: TYPE_TB
  zh: '| 文档分类 | N/A* | 形态识别客户端 | 自动机器学习自然语言，云自然语言API | N/A |'
- en: '| Entity recognition | Comprehend Capability AWS | Text analytics, OpenAI,
    ChatGPT | AutoML Natural Language, Cloud Natural Language API | Language understanding
    |'
  id: totrans-163
  prefs: []
  type: TYPE_TB
  zh: '| 实体识别 | AWS的Comprehend功能 | 文本分析，OpenAI，ChatGPT | 自动机器学习自然语言，云自然语言API | 语言理解
    |'
- en: '| Key phrase extraction | Comprehend Capability AWS | Text analytics, OpenAI,
    ChatGPT | Cloud Natural Language API | Language understanding |'
  id: totrans-164
  prefs: []
  type: TYPE_TB
  zh: '| 关键词提取 | AWS的Comprehend功能 | 文本分析，OpenAI，ChatGPT | 云自然语言API | 语言理解 |'
- en: '| Sentiment analysis | Comprehend Capability AWS | Text analytics, OpenAI,
    ChatGPT | AutoML Natural Language, Cloud Natural Language API | Language understanding
    |'
  id: totrans-165
  prefs: []
  type: TYPE_TB
  zh: '| 情感分析 | AWS的Comprehend功能 | 文本分析，OpenAI，ChatGPT | 自动机器学习自然语言，云自然语言API | 语言理解
    |'
- en: '| Language detection | Comprehend Capability AWS | Text analytics, OpenAI,
    ChatGPT | Cloud Natural Language API | Language understanding |'
  id: totrans-166
  prefs: []
  type: TYPE_TB
  zh: '| 语言检测 | AWS的Comprehend功能 | 文本分析，OpenAI，ChatGPT | 云自然语言API | 语言理解 |'
- en: '| Translation | Translate capability AWS | Translate skill Azure Cloud, OpenAI,
    ChatGPT | Translate Skill Google Cloud | Language translation skill IBM |'
  id: totrans-167
  prefs: []
  type: TYPE_TB
  zh: '| 翻译 | AWS的翻译功能 | Azure云的翻译技能，OpenAI，ChatGPT | Google Cloud的翻译技能 | IBM的语言翻译技能
    |'
- en: '| Chatbots | N/A* | QnAMaker, OpenAI, ChatGPT | N/A* | N/A* |'
  id: totrans-168
  prefs: []
  type: TYPE_TB
  zh: '| 聊天机器人 | N/A* | QnAMaker，OpenAI，ChatGPT | N/A* | N/A* |'
- en: '| Question answering | N/A | OpenAI, ChatGPT^ | N/A* | N/A |'
  id: totrans-169
  prefs: []
  type: TYPE_TB
  zh: '| 问答 | N/A | OpenAI，ChatGPT^ | N/A* | N/A |'
- en: '| Text generation | N/A | OpenAI, ChatGPT^ | N/A* | N/A |'
  id: totrans-170
  prefs: []
  type: TYPE_TB
  zh: '| 文本生成 | N/A | OpenAI，ChatGPT^ | N/A* | N/A |'
- en: Table 1.4 - Search terms for video-based ML services on the DX
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 表 1.4 - DX 上基于视频的 ML 服务的搜索词
- en: '***Available from the vendor but not on the DX, so you must build your own**
    **web API.**'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '**从供应商处提供，但不在DX上，因此您必须自行构建** **web API**。'
- en: '**^OpenAI is not completely owned by Microsoft, although they have a** **strong
    partnership.**'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '**^OpenAI 并非完全由微软拥有，尽管他们有一个** **强大的合作伙伴关系**。**'
- en: An interesting development has happened with the release of GPT-4, Bard, and
    other LLMs. These models have the innate ability to perform tasks such as text
    translation, entity extraction, language detection, sentiment analysis, etc.,
    despite not having been trained to do so explicitly. I expect that LLMs will become
    a viable alternative to many of the text-based and image-based ML APIs as they
    become more mature.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 随着 GPT-4、Bard 和其他大型语言模型（LLM）的发布，发生了一些有趣的发展。这些模型天生具有执行文本翻译、实体提取、语言检测、情感分析等任务的能力，尽管它们并没有被明确训练来做这些事情。我预计，随着
    LLM 的日益成熟，它们将成为许多基于文本和基于图像的机器学习 API 的可行替代品。
- en: Vendor selection
  id: totrans-175
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 供应商选择
- en: 'In the previous section, we looked at four major MLaaS vendors: AWS, Azure,
    GCP, and IBM. The decision to choose one over the other is complex and highly
    dependent on constraints that may already exist at your company. Selection criteria
    can include the following:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们探讨了四个主要的机器学习即服务（MLaaS）供应商：AWS、Azure、GCP 和 IBM。选择其中一个而不是另一个的决定是复杂的，并且高度依赖于您公司可能已经存在的限制。选择标准可以包括以下内容：
- en: Existing preferences or discounts at a particular vendor
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在特定供应商处的现有偏好或折扣
- en: Existing organizational or team knowledge in using one platform over another
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在使用一个平台而不是另一个平台时，现有的组织或团队知识
- en: The presence of must-have services that are offered by only one of the vendors
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 只由一家供应商提供的必备服务
- en: The availability of the service in a desirable geographic location
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务在理想地理位置的可用性
- en: The costs of the service itself
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务本身的成本
- en: The accuracy of the service given your input data
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据您的输入数据，服务的准确性
- en: Whether the service supports your desired single versus batch or synchronous
    versus asynchronous processing
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务是否支持您期望的单个与批量或同步与异步处理
- en: Data retention and security policies
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据保留和安全策略
- en: SLAs for uptime and API usage limits
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 上线 SLA 和 API 使用限制
- en: The availability of the service as a ready-to-use asset on the DX
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务作为DX上的现成资产的可用性
- en: Before moving on to hands-on examples, let’s summarize what we’ve just learned.
    The DX is BP’s “app store,” where many connectors to ML services are available.
    Most of these connectors are web APIs that use JSON as a data exchange format.
    Some of the most challenging parts of using an ML web service (such as authentication)
    and specific API requirements are already included in the DX asset, allowing you
    to quickly integrate ML into your BP process.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续进行实际示例之前，让我们总结一下我们刚刚学到的内容。DX是BP的“应用商店”，在这里可以找到许多连接到ML服务的连接器。这些连接器中的大多数都是使用JSON作为数据交换格式的Web
    API。使用ML Web服务（如身份验证）和特定API要求的一些最具挑战性的部分已经包含在DX资产中，这使得您能够快速将ML集成到BP流程中。
- en: 'Next, we looked at common use cases of ML from the main ML service vendors:
    AWS, Azure, GCP, and IBM. Each vendor has marketing names for its ML services.
    It’s not straightforward to know what each service does based on its name. I’ve
    broken down all of the services based on the type of input it expects to take
    in: image, video, speech, and text. I’ve also listed their marketing names as
    well as the search terms you can use to find them on the DX, if they exist. Finally,
    we looked at some factors that can influence our decision to choose one ML vendor
    over another.'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们研究了主要ML服务提供商（AWS、Azure、GCP和IBM）的ML的常见用例。每个供应商为其ML服务都有营销名称。仅根据其名称了解每个服务做什么并不直接。我已经根据它期望接收的输入类型（图像、视频、语音和文本）对所有的服务进行了分类。我还列出了它们的营销名称以及您可以在DX上使用的搜索词，如果它们存在的话。最后，我们研究了可能影响我们选择一个ML供应商而不是另一个供应商的一些因素。
- en: Examples
  id: totrans-189
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 示例
- en: 'In this section, we’ll be going through three examples of using web APIs to
    make ML predictions. For the first two examples, we’ll be *downloading* and using
    two different assets from the DX. In the third example, we’ll be creating a Web
    API Service from scratch. One web API from each major vendor will be used: AWS,
    Azure, and GCP. These examples will require you to sign up for free accounts to
    use their services. If you don’t have accounts with each vendor, follow along
    with the ones you do have accounts with.'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将通过三个使用Web API进行ML预测的示例来演示。在前两个示例中，我们将从DX下载并使用两个不同的资产。在第三个示例中，我们将从头创建一个Web
    API服务。我们将使用每个主要供应商的一个Web API：AWS、Azure和GCP。这些示例将需要您注册免费账户以使用他们的服务。如果您没有每个供应商的账户，请跟随您有账户的供应商进行操作。
- en: From AWS, we’ll use Comprehend for text analysis of an email service request.
    With Azure, we’ll use Form Recognizer to extract data from an invoice. Finally,
    from GCP, we’ll use the Cloud Vision API to extract text from an image-based PDF.
    These three services were chosen because they’re the most popular ML service vendors,
    have different authentication methods, and cover the most common use cases encountered
    in IA, processing text data, forms, and images.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 从AWS，我们将使用Comprehend对电子邮件服务请求进行文本分析。使用Azure，我们将使用表单识别器从发票中提取数据。最后，从GCP，我们将使用Cloud
    Vision API从基于图像的PDF中提取文本。这三个服务被选中是因为它们是最受欢迎的ML服务供应商，具有不同的身份验证方法，并且涵盖了在IA中遇到的最常见的用例，包括处理文本数据、表格和图像。
- en: 'The most difficult parts of getting a web API working are as follows:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 使Web API正常工作的最具挑战性的部分如下：
- en: '**Authentication**: Part of this is done on the MLaaS vendor’s portal to generate
    the right keys. The other part is inputting those keys into the correct part of
    BP, usually a Credential. The DX asset’s documentation will guide you on how this
    should be done.'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**身份验证**：这部分是在MLaaS供应商门户上完成的，以生成正确的密钥。另一部分是将这些密钥输入BP的正确部分，通常是凭证。DX资产的文档将指导您如何进行此操作。'
- en: '**Formatting input data**: This normally requires reading the API’s documentation,
    but this is provided to you from the Web API Service or the Object.'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**格式化输入数据**：这通常需要阅读API的文档，但这是由Web API服务或对象提供的。'
- en: '**Formatting output data**: This normally requires reading the API’s documentation,
    but this is provided to you from the Web API Service or the Object.'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**格式化输出数据**：这通常需要阅读API的文档，但这是由Web API服务或对象提供的。'
- en: 'The three examples that we will go through and how they differ from one another
    are summarized in the following table:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要讨论的三个示例以及它们之间的差异总结在下表中：
- en: '| **Service** | **Implementation for API** **in BP** | **Authentication** |
    **Batch /** **single** | **Sync /** **async** | **Use case** |'
  id: totrans-197
  prefs: []
  type: TYPE_TB
  zh: '| **服务** | **BP中API的实现** | **身份验证** | **批量/单次** | **同步/异步** | **用例** |'
- en: '| AWS Comprehend | Object + web API | Temporary access token (object) + access
    key ID + secret access key | Single | Sync | Extract entities from support ticket
    text |'
  id: totrans-198
  prefs: []
  type: TYPE_TB
  zh: '| AWS Comprehend | 对象 + 网页 API | 暂时访问令牌（对象）+ 访问密钥 ID + 密钥 | 单个 | 同步 | 从支持票文提取实体
    |'
- en: '| Azure Form Recognizer | Object + HTTP and JSON VBOs | Single subscription
    key | Single | Async | Extract data from digital invoices |'
  id: totrans-199
  prefs: []
  type: TYPE_TB
  zh: '| Azure 表单识别器 | 对象 + HTTP 和 JSON VBOs | 单个订阅密钥 | 单个 | 异步 | 从数字发票中提取数据 |'
- en: '| GCP Cloud Vision | Custom-built Web API Service | Temporary access token
    (OAuth2) + Client ID + Client Secret | Batch | Sync | Extract text from images
    |'
  id: totrans-200
  prefs: []
  type: TYPE_TB
  zh: '| GCP 云视觉 | 自定义构建的 Web API 服务 | 暂时访问令牌（OAuth2）+ 客户端 ID + 客户端密钥 | 批量 | 同步 |
    从图像中提取文本 |'
- en: Table 1.5 – A summary of the three examples we will go through
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 表 1.5 – 我们将经历的三个示例的摘要
- en: Example 1 – AWS Comprehend for text entity extraction, key phrase extraction,
    and sentiment analysis
  id: totrans-202
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例 1 – AWS Comprehend 用于文本实体提取、关键短语提取和情感分析
- en: AWS Comprehend is an ML service that extracts information and understands data
    in text. In this example, we’ll use Comprehend to triage cases for email support.
    Unlike submitting a support request through a web form or a chatbot where you
    can ask the user to categorize the issue for you, triaging issues sent directly
    through email has to be done either manually, through rules, or by ML.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: AWS Comprehend 是一种机器学习服务，可以从文本中提取信息并理解数据。在本例中，我们将使用 Comprehend 对电子邮件支持案例进行分类。与通过网页表单或聊天机器人提交支持请求不同，你可以要求用户为你分类问题，直接通过电子邮件发送的问题分类必须手动完成、通过规则或通过机器学习来完成。
- en: 'It’s possible to build a custom model to directly classify text into your desired
    categories in Comprehend, but that’s outside the scope of this example. Instead,
    we’ll be using AWS’s pre-built models to extract the entities, key phrases, and
    sentiment of a support request. Even without a custom model, predictions from
    these pre-built models are still useful to the customer support agent. The support
    request used in this example is the following:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Comprehend 中，你可以构建一个自定义模型来直接将文本分类到所需的类别，但这超出了本例的范围。相反，我们将使用 AWS 预构建的模型来提取支持请求中的实体、关键短语和情感。即使没有自定义模型，这些预构建模型的预测对客户支持代理仍然很有用。本例中使用的支持请求如下：
- en: I am writing to request assistance with my iPhone 14, which has a cracked screen.
    My customer ID is abcd@email.com. I would greatly appreciate your help in resolving
    this issue. I understand that the device may be covered by a warranty or insurance
    plan, and I would like to explore all available options for repairing or replacing
    the phone. If possible, could you please provide me with information on the next
    steps I should take to initiate a repair or replacement request? Additionally,
    please let me know if there are any costs associated with this process.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 我写信请求帮助我的 iPhone 14，它的屏幕已经破裂。我的客户 ID 是 abcd@email.com。我非常感谢您帮助解决这个问题。我明白该设备可能由保修或保险计划覆盖，并且我想探索所有可用的维修或更换手机的选择。如果可能的话，您能否提供有关我应采取的下一步来启动维修或更换请求的信息？此外，请告知此过程中是否有任何费用。
- en: Comprehend currently has a free usage tier of 5 million characters per API per
    month. The actions provided by the DX asset work in *single* and *synchronous*
    modes.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: Comprehend 目前每月每个 API 提供免费使用额度为 500 万字符。DX 资产提供的操作在 *单* 和 *同步* 模式下运行。
- en: 'AWS web APIs use a proprietary algorithm to implement their refresh token authentication.
    Once you’ve imported the DX asset, you’ll notice that there’s both a Web API Service
    and an Object. The Object’s main purpose is to act as a wrapper around the web
    API that implements the custom authentication. In this example, we will be performing
    four high-level steps:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: AWS 网页 API 使用专有算法来实现刷新令牌身份验证。一旦你导入了 DX 资产，你会注意到既有 Web API 服务又有对象。对象的主要目的是作为实现自定义身份验证的网页
    API 的包装器。在本例中，我们将执行四个高级步骤：
- en: Downloading the asset from the DX
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 DX 下载资产
- en: Importing the asset into BP
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将资产导入 BP
- en: Configuring a BP Credential
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置 BP 凭证
- en: Testing the DX API asset by making an ML prediction
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过进行机器学习预测来测试 DX API 资产
- en: Downloading from the DX
  id: totrans-212
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从 DX 下载
- en: 'In this step, we’ll visit the DX ([https://digitalexchange.blueprism.com/dx/search](https://digitalexchange.blueprism.com/dx/search))
    to search for and download the AWS Comprehend asset:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 在此步骤中，我们将访问 DX ([https://digitalexchange.blueprism.com/dx/search](https://digitalexchange.blueprism.com/dx/search))
    以搜索和下载 AWS Comprehend 资产：
- en: Visit the DX and type `comprehend capability aws` (capitalization doesn’t matter)
    into the search bar. Search for and click on the resulting **Comprehend Capability
    AWS** **Cloud** asset.
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问 DX 并在搜索栏中输入 `comprehend capability aws`（大小写不敏感）。搜索并点击结果中的 **Comprehend Capability
    AWS** **云** 资产。
- en: Click on the green download button on the right side of the screen and save
    the `.bprelease` asset to your computer. If you haven’t logged in already, the
    DX website will ask you to log in. This `.bprelease` contains one web API, one
    Object, and one Credential.
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击屏幕右侧的绿色下载按钮，并将 `.bprelease` 资产保存到您的计算机上。如果您尚未登录，DX 网站将要求您登录。此 `.bprelease`
    包含一个网络 API、一个对象和一个凭证。
- en: Scroll down further on the **Connector for Comprehend Capability AWS Cloud**
    page and download the **AWS Comprehend** **User Guide**.
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **Comprehend Capability AWS Cloud 连接器** 页面上继续向下滚动并下载 **AWS Comprehend** **用户指南**。
- en: '![Figure 1.7 – Downloading the asset and the AWS Comprehend User Guide](img/B18416_01_7.jpg)'
  id: totrans-217
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.7 – 下载资产和 AWS Comprehend 用户指南](img/B18416_01_7.jpg)'
- en: Figure 1.7 – Downloading the asset and the AWS Comprehend User Guide
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.7 – 下载资产和 AWS Comprehend 用户指南
- en: Important note
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: The AWS Comprehend User Guide provides links and details on how to set up your
    AWS account to allow for API calls from BP. Please follow the steps outlined in
    the user guide to properly set up your AWS account and authentication details.
    We won’t be going through the steps to set up your AWS account here.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: AWS Comprehend 用户指南提供了如何设置您的 AWS 账户以允许从 BP 进行 API 调用的链接和详细信息。请按照用户指南中的步骤正确设置您的
    AWS 账户和身份验证详细信息。我们不会在这里介绍设置 AWS 账户的步骤。
- en: Importing the Comprehend asset into BP
  id: totrans-221
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将 Comprehend 资产导入到 BP 中
- en: 'Let’s import the downloaded asset into BP and check what was imported:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将下载的资产导入到 BP 中并检查导入的内容：
- en: Open BP and log in. Click on **File** | **Import** | **Release / Skill**. Import
    the AWS Comprehend Release. Accept all of the defaults when importing.
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 BP 并登录。点击 **文件** | **导入** | **发布 / 技能**。导入 AWS Comprehend 发布。导入时接受所有默认设置。
- en: Verify that the `.bprelease` was successfully imported into BP. There should
    be one Object, one Web API Service, and one Credential. The Object can be found
    in the **Studio** section of BP.
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证 `.bprelease` 是否已成功导入到 BP 中。应该有一个对象、一个网络 API 服务和一个凭证。对象可以在 BP 的 **工作室** 部分找到。
- en: '![Figure 1.8 – Finding the Object in the Studio section](img/B18416_01_8.jpg)'
  id: totrans-225
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.8 – 在工作室部分找到对象](img/B18416_01_8.jpg)'
- en: Figure 1.8 – Finding the Object in the Studio section
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.8 – 在工作室部分找到对象
- en: Find the Comprehend web API under **System** | **Objects** | **Web** **API Services**.
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **系统** | **对象** | **网络** **API 服务** 下找到 Comprehend 网络API。
- en: '![Figure 1.9 – Finding AWS: Comprehend under System | Objects | Web API Services](img/B18416_01_9.jpg)'
  id: totrans-228
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.9 – 在系统 | 对象 | 网络API服务下找到 AWS: Comprehend](img/B18416_01_9.jpg)'
- en: 'Figure 1.9 – Finding AWS: Comprehend under System | Objects | Web API Services'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: '图 1.9 – 在系统 | 对象 | 网络API服务下找到 AWS: Comprehend'
- en: Find the Credential under **System** | **Security** | **Credentials**.
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **系统** | **安全** | **凭证** 下找到凭证。
- en: '![Figure 1.10 – Finding the AWS Credential under System | Security | Credentials](img/B18416_01_10.jpg)'
  id: totrans-231
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.10 – 在系统 | 安全 | 凭证下找到 AWS 凭证](img/B18416_01_10.jpg)'
- en: Figure 1.10 – Finding the AWS Credential under System | Security | Credentials
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.10 – 在系统 | 安全 | 凭证下找到 AWS 凭证
- en: Configuring the AWS credential
  id: totrans-233
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置 AWS 凭证
- en: 'In this step, we’ll import the `AWS` credentials (look at the downloaded user
    guide if you haven’t created these yet) into BP. Then, we’ll set the permissions
    on the Credential so that we can test it in a Process:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 在此步骤中，我们将导入 `AWS` 凭证（如果您还没有创建这些凭证，请查看下载的用户指南）到 BP 中。然后，我们将设置凭证的权限，以便我们可以在流程中测试它：
- en: Copy your AWS access key ID into the `AWS` credential. Copy your secret access
    key into the two **Password** fields.
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将您的 AWS 访问密钥 ID 复制到 `AWS` 凭证中。将您的秘密访问密钥复制到两个 **密码** 字段中。
- en: '![Figure 1.11 – Entering the AWS access key ID the secret access key](img/B18416_01_11.jpg)'
  id: totrans-236
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.11 – 输入 AWS 访问密钥 ID 和秘密访问密钥](img/B18416_01_11.jpg)'
- en: Figure 1.11 – Entering the AWS access key ID the secret access key
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.11 – 输入 AWS 访问密钥 ID 和秘密访问密钥
- en: On the **Access Rights** tab of the Credential, set **Security Roles** to **All
    Roles**, **Processes (legacy)** to **All Process** and **Resources (legacy)**
    to **All Resources**. While this is not best practice, we’re only doing this for
    testing purposes.
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在凭证的 **访问权限** 选项卡上，将 **安全角色** 设置为 **所有角色**，**流程（旧版）** 设置为 **所有流程**，**资源（旧版）**
    设置为 **所有资源**。虽然这不是最佳实践，但我们只为测试目的这样做。
- en: Test the AWS Comprehend object
  id: totrans-239
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试 AWS Comprehend 对象
- en: 'Finally, let’s test out the DX asset and make a prediction! Notice in the test
    Process that the Actions use the *Object* and not the Web API Service. Using the
    Web API Service directly wouldn’t work since it doesn’t contain the authentication
    parts. Take the following steps:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们测试 DX 资产并做出预测！注意在测试流程中，操作使用的是**对象**而不是 Web API 服务。直接使用 Web API 服务不会工作，因为它不包含身份验证部分。请按照以下步骤操作：
- en: Open `Example 1 - Test AWS Comprehend` Process in the `Ch1` Group in the Process
    Studio. This Process also requires the `Utility – General` VBO to be imported.
    This can be found in the `VBO` sub-folder where BP is installed.
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Process Studio 的“Ch1”组中打开“示例 1 - 测试 AWS Comprehend”流程。此流程还需要导入“Utility – General”VBO。这可以在
    BP 安装目录下的“VBO”子文件夹中找到。
- en: 'Run the Process in the Process Studio. This Process makes three API calls:
    1) detect entities, 2) find key phrases, and 3) detect sentiment. If successful,
    the three Collections on the `Main Page` in the **Predictions** Block are populated.'
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Process Studio 中运行流程。此流程执行三个 API 调用：1）检测实体，2）查找关键词，3）检测情感。如果成功，**预测**块中的“主页面”上的三个集合将被填充。
- en: '![Figure 1.12 – The three predicted Collections from the three API calls](img/B18416_01_12.jpg)'
  id: totrans-243
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.12 – 来自三个 API 调用的三个预测集合](img/B18416_01_12.jpg)'
- en: Figure 1.12 – The three predicted Collections from the three API calls
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.12 – 来自三个 API 调用的三个预测集合
- en: 'Viewing the `Entities Response` Collection shows that AWS’s generic model can
    extract the email and phone model number:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 查看“实体响应”集合显示 AWS 的通用模型可以提取电子邮件和电话型号：
- en: '![Figure 1.13 – The phone model and customer ID are extracted as entities](img/B18416_01_13.jpg)'
  id: totrans-246
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.13 – 将电话型号和客户 ID 提取为实体](img/B18416_01_13.jpg)'
- en: Figure 1.13 – The phone model and customer ID are extracted as entities
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.13 – 将电话型号和客户 ID 提取为实体
- en: Even without a custom model to classify emails to the exact label, Comprehend’s
    pre-trained model is able to extract high-level information that can simplify
    the work of a customer support agent. We also see that the predictions come with
    a **Score**. This confidence score will be used as a design element for IA solutions
    in *Part 2* of this book.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 即使没有自定义模型来将电子邮件分类到精确标签，Comprehend 的预训练模型也能提取高级信息，这可以简化客户支持代理的工作。我们还看到预测结果带有**分数**。这个置信度分数将作为本书第二部分
    IA 解决方案的设计元素。
- en: In this example, we used AWS Comprehend to extract data from unstructured text.
    Since AWS uses a custom authentication scheme, the DX asset comes packaged with
    both a Web API Service and an Object. Normally, dealing with authentication is
    complex, but the object handles everything for us. After importing the asset,
    we only need to set up a Credential to get things working. That’s how easy it
    is to connect BP with AWS’ Comprehend APIs.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 在本例中，我们使用了 AWS Comprehend 从非结构化文本中提取数据。由于 AWS 使用自定义身份验证方案，DX 资产包含一个 Web API
    服务和一个对象。通常处理身份验证是复杂的，但对象为我们处理了一切。导入资产后，我们只需设置凭据即可使一切工作。这就是将 BP 与 AWS 的 Comprehend
    API 连接起来的简便方法。
- en: Let’s move on to our next example, which uses Azure.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续到下一个示例，该示例使用 Azure。
- en: Example 2 – Azure Form Recognizer for invoice extraction
  id: totrans-251
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例 2 – Azure 表单识别器用于发票提取
- en: Azure’s Form Recognizer contains pre-built models that allow you to extract
    data from receipts, invoices, tax forms, business cards, and generic documents.
    Extracting data from invoices and receipts in usable formats *is a very common
    IA use case*. It’s so common that BP and most other RPA vendors have products
    specifically targeting invoice extraction. More information about BP’s document
    extraction product, Decipher, can be found in the last chapter of this book. A
    free pricing tier of Form Recognizer is available for testing.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: Azure 的表单识别器包含预构建的模型，允许您从收据、发票、税务表格、名片和通用文档中提取数据。以可用的格式从发票和收据中提取数据*是一个非常常见的
    IA 用例*。如此常见，以至于 BP 和大多数其他 RPA 供应商都有专门针对发票提取的产品。有关 BP 文档提取产品 Decipher 的更多信息，请参阅本书最后一章。Form
    Recognizer 提供免费定价层以供测试。
- en: 'The invoice used in this example can be downloaded here for reference: [https://github.com/PacktPublishing/Intelligent-Automation-with-Blue-Prism/blob/main/ch1/ex2_invoice.pdf](https://github.com/PacktPublishing/Intelligent-Automation-with-Blue-Prism/blob/main/ch1/ex2_invoice.pdf)'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 本例中使用的发票可以在此处下载以供参考：[https://github.com/PacktPublishing/Intelligent-Automation-with-Blue-Prism/blob/main/ch1/ex2_invoice.pdf](https://github.com/PacktPublishing/Intelligent-Automation-with-Blue-Prism/blob/main/ch1/ex2_invoice.pdf)
- en: This PDF is directly embedded into this example’s process as a binary Data Item,
    so downloading this is optional.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 这个PDF直接嵌入到本例的流程中作为二进制数据项，因此下载它是可选的。
- en: You can also build custom models inside of Form Recognizer to recognize your
    specific type of document, e.g., a bank or credit card statement. These custom
    models can unlock even more use cases for your business and be invoked by BP using
    the DX asset used in this example.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以在表单识别器内部构建自定义模型来识别你特定的文档类型，例如银行或信用卡对账单。这些自定义模型可以为你的业务解锁更多用例，并且可以通过本例中使用的DX资产由BP调用。
- en: There are two major differences between this Azure API and AWS Comprehend beyond
    the APIs purpose. The first difference is the *authentication* scheme used. For
    Azure, we only need to pass in a subscription key together with every request.
    This is simpler than AWS, which requires a separate object to refresh the temporary
    access token. Unlike AWS Comprehend, the Form Recognizer calls are *asynchronous*,
    requiring you to repeatedly check whether the prediction is complete.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 除了API的目的之外，这个Azure API与AWS Comprehend有两个主要区别。第一个区别是使用的**认证**方案。对于Azure，我们只需要在每个请求中传递一个订阅密钥。这比AWS简单，AWS需要单独的对象来刷新临时访问令牌。与AWS
    Comprehend不同，表单识别器的调用是**异步的**，需要你反复检查预测是否完成。
- en: The DX asset for Form Recognizer is stored as a `.bprelease` file and contains
    one BP Object. This is different from most other web APIs available on the DX,
    which come packaged as a `.bpskill` file and appear in the **System** | **Objects**
    | **Web API Services** section of BP.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 表单识别器的DX资产存储为`.bprelease`文件，包含一个BP对象。这与DX上大多数其他打包为`.bpskill`文件并在BP的**系统** |
    **对象** | **Web API服务**部分显示的Web API不同。
- en: Form Recognizer was chosen as one of the examples because form processing is
    also a primary IA use case. The DX asset for Form Recognizer also shows a different
    way of implementing a web API connector that you can consider—implementing it
    directly as an object using the HTTP and JSON VBO instead of a Web API Service.
    Implementing as an Object allows companies running older versions of BP (< V6.4)
    to call web APIs.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 表单识别器被选为示例之一，因为表单处理也是主要的人工智能应用案例之一。表单识别器的DX资产还展示了实现Web API连接器的一种不同方式——直接作为对象使用HTTP和JSON
    VBO，而不是Web API服务。作为对象实现允许运行旧版本BP（< V6.4）的公司调用Web API。
- en: 'In this example, we will be performing four high-level steps:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 在本例中，我们将执行四个高级步骤：
- en: Downloading the asset from GitHub (or the DX)
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从GitHub（或DX）下载资产
- en: Importing the asset into BP
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将资产导入BP
- en: Configuring the Form Recognizer object
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置表单识别器对象
- en: Testing the API call by making a prediction
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过进行预测来测试API调用
- en: Downloading from the DX
  id: totrans-264
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从DX下载
- en: Important note
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Microsoft has changed the URL endpoints since the Form Recognizer asset on the
    DX was released. As a result, the asset that’s on the DX won’t work without changing
    the URLs in it. An already modified release is provided at [https://github.com/PacktPublishing/Intelligent-Automation-with-Blue-Prism/blob/main/ch1/Ex_2_Azure_Form_Recognizer_Client_Service.bprelease](https://github.com/PacktPublishing/Intelligent-Automation-with-Blue-Prism/blob/main/ch1/Ex_2_Azure_Form_Recognizer_Client_Service.bprelease).
    I recommend downloading this GitHub version and not the version on the DX.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 微软自DX上的表单识别器资产发布以来已经更改了URL端点。因此，DX上的资产如果不更改其中的URL将无法工作。已经修改的版本可以在[https://github.com/PacktPublishing/Intelligent-Automation-with-Blue-Prism/blob/main/ch1/Ex_2_Azure_Form_Recognizer_Client_Service.bprelease](https://github.com/PacktPublishing/Intelligent-Automation-with-Blue-Prism/blob/main/ch1/Ex_2_Azure_Form_Recognizer_Client_Service.bprelease)找到。我建议下载这个GitHub版本，而不是DX上的版本。
- en: 'Although we won’t be downloading the asset from the DX, we still need to download
    the documentation so that the Azure API can be configured. Here, we will visit
    the DX ([https://digitalexchange.blueprism.com/dx/search](https://digitalexchange.blueprism.com/dx/search))
    to download the documentation:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们不会从DX下载资产，但我们仍然需要下载文档，以便配置Azure API。在这里，我们将访问DX ([https://digitalexchange.blueprism.com/dx/search](https://digitalexchange.blueprism.com/dx/search))以下载文档：
- en: Type in `form recognizer client` (capitalization doesn’t matter) into the DX
    search bar and search. Click on the **Form Recognizer** **Client** asset.
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在DX搜索栏中输入`form recognizer client`（大小写不敏感）进行搜索。点击**表单识别器** **客户端**资产。
- en: Scroll down further on the **Connector for Form Recognizer Client – 1.0.0**
    page and download the **User Guide**.
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**表单识别器客户端连接器 – 1.0.0**页面向下滚动并下载**用户指南**。
- en: '![Figure 1.14 – Download the asset and the user guide](img/B18416_01_14.jpg)'
  id: totrans-270
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.14 – 下载资产和用户指南](img/B18416_01_14.jpg)'
- en: Figure 1.14 – Download the asset and the user guide
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.14 – 下载资产和用户指南
- en: Important note
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: 'The user guide provides details on how to set up your Azure account to allow
    for API calls from BP. Please follow the steps in the guide to properly set up
    Azure. The guide also lists two other VBOs that must be imported into BP: the
    `Utility - JSON` and `Utility – HTTP` VBOs. These are both included in the previous
    GitHub link. If you wish to download them separately, they are also available
    from the DX.'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 用户指南提供了如何设置 Azure 账户以允许从 BP 进行 API 调用的详细信息。请按照指南中的步骤正确设置 Azure。指南还列出了两个必须导入到
    BP 中的其他 VBO：`Utility - JSON` 和 `Utility – HTTP` VBO。这两个都包含在之前的 GitHub 链接中。如果您希望单独下载它们，它们也可以从
    DX 获取。
- en: Importing into BP
  id: totrans-274
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 导入到 BP
- en: 'After downloading the asset, it must be imported into BP. This step is the
    same regardless of whether you’ve downloaded the asset from the DX or from GitHub:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 下载资产后，必须将其导入到 BP 中。这一步骤无论您是从 DX 还是 GitHub 下载资产都是相同的：
- en: Open BP and log in. Click **File** | **Import** | **Release / Skill** and import
    the asset.
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 BP 并登录。点击 **文件** | **导入** | **发布 / 技能** 并导入资产。
- en: Verify that the `Form Recognizer Client Service` Object is present. Also verify
    that the correct versions of the HTTP and JSON VBOs as present, as required by
    the user guide.
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证 `表单识别客户端服务` 对象是否存在。还要验证 HTTP 和 JSON VBO 的正确版本是否存在，这是用户指南所要求的。
- en: '![Figure 1.15 – Verifying that the three Objects are present](img/B18416_01_15.jpg)'
  id: totrans-278
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.15 – 验证三个对象是否存在](img/B18416_01_15.jpg)'
- en: Figure 1.15 – Verifying that the three Objects are present
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.15 – 验证三个对象是否存在
- en: Configuring the Form Recognizer Client Service object
  id: totrans-280
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置表单识别客户端服务对象
- en: The author of the DX asset has opted to store the authentication IDs as Data
    Items in the Object. This is *not a best practice*, as these should be stored
    as a Credential instead. But since this is how the Object was designed, let’s
    edit those Data Items to configure the authentication details needed to connect
    to the web API. If you don’t have a subscription key, please follow the asset
    documentation and create one.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: DX 资产的作者选择将身份验证 ID 作为对象中的数据项存储。这 **不是最佳实践**，因为这些应该作为凭据存储。但由于对象就是这样设计的，让我们编辑这些数据项以配置连接到
    Web API 所需要的身份验证详细信息。如果您没有订阅密钥，请按照资产文档创建一个。
- en: Important note
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: The access token and base URL needed to configure the Object can be obtained
    from the **Form Recognizer** page on Azure’s website. The user guide shown in
    *Figure 1**.15* has more details on how to find this page.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 配置对象所需的访问令牌和基础 URL 可以从 Azure 网站的 **表单识别** 页面获取。*图 1.15* 中显示的用户指南提供了更多关于如何找到此页面的详细信息。
- en: Open the `Form Recognizer Client Service` Object in the Object Studio. On the
    `Access Token` Collection and a `Base URL` Data Item that needs to be populated.
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在对象工作室中打开 `表单识别客户端服务` 对象。在 `访问令牌` 集合和需要填写的数据项 `基础 URL` 上。
- en: '![Figure 1.16 – Populating Access Token and Base URL on the Initialise Page](img/B18416_01_16.jpg)'
  id: totrans-285
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.16 – 在初始化页面填写访问令牌和基础 URL](img/B18416_01_16.jpg)'
- en: Figure 1.16 – Populating Access Token and Base URL on the Initialise Page
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.16 – 在初始化页面填写访问令牌和基础 URL
- en: Open the `Access Token` Collection and click on the **Initial Values** tab.
    Fill in the **Ocp-Apim-Subscription-Key** field with your subscription key and
    save.
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `访问令牌` 集合并点击 **初始值** 选项卡。在 **Ocp-Apim-Subscription-Key** 字段中填写您的订阅密钥并保存。
- en: '![Figure 1.17 – Filling the subscription key into the access token](img/B18416_01_17.jpg)'
  id: totrans-288
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.17 – 将订阅密钥填写到访问令牌中](img/B18416_01_17.jpg)'
- en: Figure 1.17 – Filling the subscription key into the access token
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.17 – 将订阅密钥填写到访问令牌中
- en: Open the `Base URL` Data Item and set the **Initial Value** to the endpoint
    URL from Azure’s website. Do not include a trailing slash at the end of the URL.
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `基础 URL` 数据项并将 **初始值** 设置为 Azure 网站上的端点 URL。不要在 URL 末尾包含尾部斜杠。
- en: '![Figure 1.18 – Filling in the Base URL without a trailing slash](img/B18416_01_18.jpg)'
  id: totrans-291
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.18 – 在没有尾部斜杠的情况下填写基础 URL](img/B18416_01_18.jpg)'
- en: Figure 1.18 – Filling in the Base URL without a trailing slash
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.18 – 在没有尾部斜杠的情况下填写基础 URL
- en: Now that we’ve configured the Azure Object, we can test it out.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经配置了 Azure 对象，我们可以对其进行测试。
- en: Testing the Form Recognizer Client Service object
  id: totrans-294
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试表单识别客户端服务对象
- en: A test Process is included in the Release file imported in the *Technical requirements*
    section at the beginning of the chapter. This process requires `Utility – General`
    and `Utility – File Management` to be imported. Both can be found in the `VBO`
    sub-folder of the installation folder.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 在章节开头“技术要求”部分导入的发布文件中包含了一个测试流程。此流程需要导入 `Utility – General` 和 `Utility – File
    Management`。这两个都可以在安装文件夹的 `VBO` 子文件夹中找到。
- en: Open `Example 2 – Test Azure Form Recognizer Client Service` Process in the
    `Ch1` Group in the Process Studio.
  id: totrans-296
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Process Studio 的 `Ch1` 组中打开 `示例 2 – 测试 Azure 表单识别器客户端服务` 流程。
- en: Run the Process in the Process Studio. This process makes at least two API calls.
    The first call sends the invoice file to request processing. This gives a **Result
    ID** in return. The second API call checks up to six times whether the *asynchronous*
    ML prediction is finished by referencing the **Result ID**. When the prediction
    is complete, the Collections and Data Item in the **Predictions** Block will become
    populated. You can verify that the extracted contents closely match the actual
    PDF document.
  id: totrans-297
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Process Studio 中运行流程。此流程至少进行两次 API 调用。第一次调用将发票文件发送到请求处理。这会返回一个 **结果 ID**。第二次
    API 调用通过引用 **结果 ID** 检查最多六次是否完成了 **异步** 机器学习预测。当预测完成时，**预测** 块中的集合和数据项将变得充实。您可以验证提取的内容与实际的
    PDF 文档非常接近。
- en: '![Figure 1.19 – Predictions from the Azure invoice Form Recognizer](img/B18416_01_19.jpg)'
  id: totrans-298
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.19 – Azure 发票表单识别器的预测结果](img/B18416_01_19.jpg)'
- en: Figure 1.19 – Predictions from the Azure invoice Form Recognizer
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.19 – Azure 发票表单识别器的预测结果
- en: Now we’ve seen two examples with two different types of web API authentication,
    as well as synchronous and asynchronous API calling cases. In the final example
    of this chapter, we will be creating a web API service from scratch for batch
    PDF processing in GCP.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经看到了两个示例，涉及两种不同类型的 Web API 身份验证，以及同步和异步 API 调用案例。在本章的最后一个示例中，我们将从头开始创建一个用于
    GCP 批量 PDF 处理的 Web API 服务。
- en: Example 3 – GCP Cloud Vision batch OCR processing
  id: totrans-301
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例 3 – GCP 云视觉批量 OCR 处理
- en: Cloud Vision from Google Cloud allows you to extract labels and text from images.
    In IA, this is most commonly used for the OCR of image-based text, such as photographs
    of documents and receipts. If documents are scanned, GCP recommends using its
    Document AI service instead. In this example, we’ll be extracting text from an
    image-based PDF with a small amount of handwriting on it. We’ll also be showing
    off a synchronous batch case where five PDF pages of an image-based document are
    processed at once and the predicted results for those five pages are received
    in the same request.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: Google Cloud 的 Cloud Vision 允许您从图像中提取标签和文本。在 IA 中，这最常用于基于图像文本的 OCR，例如文档和收据的照片。如果文档被扫描，GCP
    建议使用其 Document AI 服务。在本例中，我们将从带有少量手写的基于图像的 PDF 中提取文本。我们还将展示一个同步批量案例，其中一次处理基于图像文档的五页
    PDF，并收到这五页的预测结果。
- en: The open source PDF document used in this example can be found at [https://github.com/PacktPublishing/Intelligent-Automation-with-Blue-Prism/blob/main/ch1/ex3_pdf.pdf](https://github.com/PacktPublishing/Intelligent-Automation-with-Blue-Prism/blob/main/ch1/ex3_pdf.pdf).
    This PDF is already embedded into the test Process as a Binary Data Item, so downloading
    it is optional.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 本例中使用的开源 PDF 文档可以在 [https://github.com/PacktPublishing/Intelligent-Automation-with-Blue-Prism/blob/main/ch1/ex3_pdf.pdf](https://github.com/PacktPublishing/Intelligent-Automation-with-Blue-Prism/blob/main/ch1/ex3_pdf.pdf)
    找到。此 PDF 已经作为二进制数据项嵌入到测试流程中，因此下载它是可选的。
- en: GCP uses OAuth2 for authentication, which is also a temporary access token method,
    similar to what AWS Comprehend does in the first example. The difference between
    OAuth2 and AWS’s methods is that AWS’ authentication is proprietary. OAuth2 is
    an open standard adopted by many vendors, and BP’s Web API Services feature can
    handle it directly. No Object wrapper will be needed, unlike in the AWS Comprehend
    case.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: GCP 使用 OAuth2 进行身份验证，这同样是一种临时访问令牌方法，类似于 AWS Comprehend 在第一个示例中所做的那样。OAuth2 和
    AWS 方法之间的区别在于 AWS 的身份验证是专有的。OAuth2 是许多厂商采用的开放标准，BP 的 Web API 服务功能可以直接处理它。与 AWS
    Comprehend 的情况不同，不需要对象包装器。
- en: In this third example, we’ll be building a web API from scratch. There’s no
    DX asset for the API endpoint that we’ll be using. A key skill needed to build
    a web API from scratch is the ability to carefully read and understand the vendor’s
    API documentation. The relevant parts of GCP’s API documentation will be shown
    alongside the BP Web API Service configuration for reference.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个第三个示例中，我们将从头开始构建一个Web API。我们将使用的API端点没有DX资产。从头开始构建Web API所需的关键技能是能够仔细阅读和理解供应商的API文档。GCP的API文档的相关部分将与BP
    Web API服务的配置并排显示，以供参考。
- en: 'This example has very different steps compared to the two previous examples.
    At a high level, we will be performing four steps:'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 与前两个示例相比，本例的步骤非常不同。从高层次上讲，我们将执行以下四个步骤：
- en: Visiting the GCP website to set up the keys needed for API authentication
  id: totrans-307
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问GCP网站以设置API认证所需的密钥
- en: Saving the API authentication keys into a Credential
  id: totrans-308
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将API认证密钥保存到凭证中
- en: Creating a Web API Service in BP
  id: totrans-309
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在BP中创建Web API服务
- en: Testing the web API by making a prediction
  id: totrans-310
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过进行预测来测试Web API
- en: Setting up a service account and key
  id: totrans-311
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置服务帐户和密钥
- en: 'This section contains steps that are performed on GCP’s website. The purpose
    is to generate authentication credentials that can be downloaded and used inside
    of a BP Web API Service. If these steps become outdated, please use the link in
    *step 1* as a reference instead:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 本节包含在GCP网站上执行的操作步骤。目的是生成可以下载并在BP Web API服务内部使用的认证凭证。如果这些步骤过时了，请使用*步骤1*中的链接作为参考：
- en: Visit [https://cloud.google.com/iam/docs/service-accounts-create#creating_a_service_account](https://cloud.google.com/iam/docs/service-accounts-create#creating_a_service_account)
    and follow the instructions to create your service account. Ensure that your service
    account has permission to access the *Vision API*.
  id: totrans-313
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问[https://cloud.google.com/iam/docs/service-accounts-create#creating_a_service_account](https://cloud.google.com/iam/docs/service-accounts-create#creating_a_service_account)并按照说明创建您的服务帐户。确保您的服务帐户有权访问*Vision
    API*。
- en: 'Create a key for your service account. Under the **Service Accounts** section
    of **IAM & Admin**, click on the **KEYS** tab and then **ADD KEY**:'
  id: totrans-314
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**IAM & Admin**的**服务帐户**部分下，点击**密钥**选项卡，然后点击**添加密钥**：
- en: '![Figure 1.20 – Creating a key for your service account](img/B18416_01_20.jpg)'
  id: totrans-315
  prefs: []
  type: TYPE_IMG
  zh: '![图1.20 – 为您的服务帐户创建密钥](img/B18416_01_20.jpg)'
- en: Figure 1.20 – Creating a key for your service account
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.20 – 为您的服务帐户创建密钥
- en: 'Choose **JSON** as the **Key type** and press **CREATE**:'
  id: totrans-317
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**JSON**作为**密钥类型**并按**创建**：
- en: '![Figure 1.21 – Creating a JSON key](img/B18416_01_21.jpg)'
  id: totrans-318
  prefs: []
  type: TYPE_IMG
  zh: '![图1.21 – 创建JSON密钥](img/B18416_01_21.jpg)'
- en: Figure 1.21 – Creating a JSON key
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.21 – 创建JSON密钥
- en: Download the JSON file that appears after pressing **CREATE**.
  id: totrans-320
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在按**创建**后下载出现的JSON文件。
- en: Saving the service account email and private key as a Credential
  id: totrans-321
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将服务帐户电子邮件和私钥保存为凭证
- en: 'We’ve created authentication credentials and downloaded them in JSON format.
    Now we need to save the relevant information into a BP credential:'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已创建认证凭证并以JSON格式下载。现在我们需要将相关信息保存到BP凭证中：
- en: Open the JSON file in any text editor. You’ll see a `private_key` row. Copy
    everything between the two double quotation marks into your clipboard. This is
    referred to as the **Client Secret** in GCP documentation.
  id: totrans-323
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在任何文本编辑器中打开JSON文件。您会看到一个`private_key`行。将两个双引号之间的所有内容复制到您的剪贴板。这在GCP文档中被称为**客户端密钥**。
- en: '[PRE0]'
  id: totrans-324
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Visit **System** | **Security** | **Credentials** in BP. Click **New** to create
    a new Credential.
  id: totrans-325
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在BP中访问**系统** | **安全** | **凭证**。点击**新建**以创建新的凭证。
- en: 'Set the `GCP Cloud Vision`. Set the **Type** to **OAuth 2.0 (JWT Bearer Token)**.
    Set **Issuer** to the service account email address, and for **Private Key**,
    paste what was copied in *step 1*:'
  id: totrans-326
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置`GCP Cloud Vision`。将**类型**设置为**OAuth 2.0 (JWT Bearer Token**)。将**发行者**设置为服务帐户电子邮件地址，对于**私钥**，粘贴在*步骤1*中复制的部分：
- en: '![Figure 1.22 – Saving the credential with information from the GCP Portal](img/B18416_01_22.jpg)'
  id: totrans-327
  prefs: []
  type: TYPE_IMG
  zh: '![图1.22 – 使用GCP门户信息保存凭证](img/B18416_01_22.jpg)'
- en: Figure 1.22 – Saving the credential with information from the GCP Portal
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.22 – 使用GCP门户信息保存凭证
- en: Click on the **Access Rights** tab of the Credential. Set **Security Roles**
    to **All Roles**, **Processes (legacy)** to **All Process**, and **Resources (legacy)**
    to **All Resources**. While this isn’t best practice, we’re only testing and not
    deploying something to production. Save the credential.
  id: totrans-329
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击凭据的**访问权限**选项卡。将**安全角色**设置为**所有角色**，**进程（旧版）**设置为**所有进程**，**资源（旧版）**设置为**所有资源**。虽然这不是最佳实践，但我们只是在测试，并没有将任何东西部署到生产环境中。保存凭据。
- en: Creating a Web API Service
  id: totrans-330
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建Web API服务
- en: Here, we will be creating a Web API Service from scratch. Google’s API documentation
    ([https://cloud.google.com/vision/docs/file-small-batch](https://cloud.google.com/vision/docs/file-small-batch))
    will be consulted frequently during this exercise.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将从头开始创建一个Web API服务。在这次练习中，将频繁查阅Google的API文档（[https://cloud.google.com/vision/docs/file-small-batch](https://cloud.google.com/vision/docs/file-small-batch)）。
- en: One key tip to consider while building a web API from scratch is to see whether
    the vendor has a *different* service already available on the DX. If so, download
    it, import it, and use it as a reference. Each vendor tries to keep its APIs internally
    consistent. Within a vendor, their APIs are likely using the same authentication
    methods and have similar JSON structures for their inputs and outputs. You’ll
    likely be able to copy parts of a working Web API Service into your own!
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 在从头开始构建一个Web API时，一个需要考虑的关键提示是查看供应商是否已经在DX上提供了一种*不同的*服务。如果是这样，请下载它，导入它，并将其用作参考。每个供应商都试图保持其API的内部一致性。在一个供应商内部，它们的API可能使用相同的认证方法，并且它们的输入和输出具有相似的JSON结构。你很可能会将一个工作的Web
    API服务的一部分复制到自己的API中！
- en: Visit **System** | **Objects** | **Web API Services**. Click on **Add Service**.
  id: totrans-333
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问**系统**|**对象**|**Web API服务**。点击**添加服务**。
- en: 'Set `Google Cloud Vision Batch Annotation Online`. This is an arbitrary name
    that will show up as a selectable option in an Action Stage. Set **Base URL**
    to [https://vision.googleapis.com/](https://vision.googleapis.com/), including
    the trailing slash. At the end of this step, your web API should look like this:'
  id: totrans-334
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置`Google Cloud Vision Batch Annotation Online`。这是一个任意名称，它将作为一个可选择的选项出现在动作阶段。将**基本URL**设置为[https://vision.googleapis.com/](https://vision.googleapis.com/)，包括尾随斜杠。在这个步骤结束时，你的Web
    API应该看起来像这样：
- en: '![Figure 1.23 – Setting the Name and Base URL](img/B18416_01_23.jpg)'
  id: totrans-335
  prefs: []
  type: TYPE_IMG
  zh: '![图1.23 – 设置名称和基本URL](img/B18416_01_23.jpg)'
- en: Figure 1.23 – Setting the Name and Base URL
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.23 – 设置名称和基本URL
- en: 'The base URL is taken from GCP’s documentation:'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 基本URL取自GCP的文档：
- en: '![Figure 1.24 – The base URL from GCP’s documentation](img/B18416_01_24.jpg)'
  id: totrans-338
  prefs: []
  type: TYPE_IMG
  zh: '![图1.24 – GCP文档中的基本URL](img/B18416_01_24.jpg)'
- en: Figure 1.24 – The base URL from GCP’s documentation
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.24 – GCP文档中的基本URL
- en: 'Click on `Content-Type` and `application/json; charset=utf-8`. The **Common
    Headers** section should look like this:'
  id: totrans-340
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击`Content-Type`和`application/json; charset=utf-8`。**公共头信息**部分应该看起来像这样：
- en: '![Figure 1.25 – Setting the common headers](img/B18416_01_25.jpg)'
  id: totrans-341
  prefs: []
  type: TYPE_IMG
  zh: '![图1.25 – 设置公共头信息](img/B18416_01_25.jpg)'
- en: Figure 1.25 – Setting the common headers
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.25 – 设置公共头信息
- en: 'These common headers are taken from the sample API request shown in GCP’s documentation:'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 这些公共头信息来自GCP文档中显示的示例API请求：
- en: '![Figure 1.26 – The headers from GCP’s documentation (the other headers can
    be ignored)](img/B18416_01_26.jpg)'
  id: totrans-344
  prefs: []
  type: TYPE_IMG
  zh: '![图1.26 – GCP文档中的头信息（其他头信息可以忽略）](img/B18416_01_26.jpg)'
- en: Figure 1.26 – The headers from GCP’s documentation (the other headers can be
    ignored)
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.26 – GCP文档中的头信息（其他头信息可以忽略）
- en: Click on `GCP Cloud Vision`, which was created in *step 2* in the *Saving the
    service account email and private key as a credential* section. Untick the **Expose
    to** **Process** box.
  id: totrans-346
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击`GCP Cloud Vision`，这是在*步骤2*中*保存服务账户电子邮件和私钥作为凭据*部分创建的。取消选中**暴露给****进程**框。
- en: Important note
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: The token endpoint data is taken from [https://accounts.google.com/.well-known/openid-configuration](https://accounts.google.com/.well-known/openid-configuration)
    and the scope endpoint is taken from [https://developers.google.com/oauthplayground](https://developers.google.com/oauthplayground).
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 令牌端点数据来自[https://accounts.google.com/.well-known/openid-configuration](https://accounts.google.com/.well-known/openid-configuration)，作用域端点来自[https://developers.google.com/oauthplayground](https://developers.google.com/oauthplayground)。
- en: 'The **Common Authentication** section should look like this:'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: '**公共认证**部分应该看起来像这样：'
- en: '![Figure 1.27 – Setting the common authentication](img/B18416_01_27.jpg)'
  id: totrans-350
  prefs: []
  type: TYPE_IMG
  zh: '![图1.27 – 设置公共认证](img/B18416_01_27.jpg)'
- en: Figure 1.27 – Setting the common authentication
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.27 – 设置公共认证
- en: 'Click on `Annotate Batch`. This is the name of the Action that will appear
    as selectable in BP. Each Action is equivalent to one web API endpoint. At the
    end of this step, your **Action** section should look like this:'
  id: totrans-352
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 `Annotate Batch`。这是将在 BP 中作为可选项目出现的操作名称。每个操作相当于一个 Web API 端点。完成此步骤后，您的 **操作**
    部分应如下所示：
- en: '![Figure 1.28 – Creating an action](img/B18416_01_28.jpg)'
  id: totrans-353
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.28 – 创建操作](img/B18416_01_28.jpg)'
- en: Figure 1.28 – Creating an action
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.28 – 创建操作
- en: 'Click on `mimeType`, `pages,` and `content`. Leave **Initial Value** blank
    and tick the **Expose** box for all three. At the end of this step, your **Parameters**
    section should look like this:'
  id: totrans-355
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 `mimeType`、`pages` 和 `content`。将 **初始值** 留空，并为所有三个选项勾选 **暴露**。完成此步骤后，您的 **参数**
    部分应如下所示：
- en: '![Figure 1.29 – Setting the action parameters](img/B18416_01_29.jpg)'
  id: totrans-356
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.29 – 设置操作参数](img/B18416_01_29.jpg)'
- en: Figure 1.29 – Setting the action parameters
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.29 – 设置操作参数
- en: These three parameters were taken from GCP’s examples of what they expect to
    receive in the request JSON body. We’re exposing these as the input parameters
    of our web API so that they can be passed in and changed according to the needs
    of the Process.
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 这三个参数是从 GCP 请求 JSON 主体中期望接收的示例中提取的。我们将这些作为 Web API 的输入参数公开，以便它们可以根据流程的需求传递和更改。
- en: '![Figure 1.30 – The parameters from GCP’s documentation](img/B18416_01_30.jpg)'
  id: totrans-359
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.30 – GCP 文档的参数](img/B18416_01_30.jpg)'
- en: Figure 1.30 – The parameters from GCP’s documentation
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.30 – GCP 文档的参数
- en: 'Click on `/v1/files:annotate`, and **Body Content** to **Template**. Inside
    the **Template** text box, put in the following:'
  id: totrans-361
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 `/v1/files:annotate`，将 **Body Content** 转换为 **模板**。在 **模板** 文本框中，输入以下内容：
- en: '[PRE1]'
  id: totrans-362
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Notice that we’ve inserted our parameters into the template using `[parameter
    name]`, similar to BP data items. Some areas of the `[[`) .This is how we can
    escape the square opening bracket character. We’ve also *hardcoded* the type of
    extraction to be `DOCUMENT_TEXT_DETECTION` and `LABEL_DETECTION`.
  id: totrans-363
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，我们使用 `[parameter name]` 将参数插入到模板中，类似于 BP 数据项。在 `[[` 的一些区域。这就是我们如何转义开方括号字符的方法。我们还
    *硬编码* 提取类型为 `DOCUMENT_TEXT_DETECTION` 和 `LABEL_DETECTION`。
- en: 'What this section does is set up the exact JSON structure that will be sent
    to the API endpoint. We want this structure to match up with *Figure 1**.30* exactly.
    At the end of this step, the **Request** section should look like this:'
  id: totrans-364
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 本节所做的操作是设置将发送到 API 端点的确切 JSON 结构。我们希望这个结构与 *图 1.30* 完全匹配。完成此步骤后，**请求** 部分应如下所示：
- en: '![Figure 1.31 – Set the request](img/B18416_01_31.jpg)'
  id: totrans-365
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.31 – 设置请求](img/B18416_01_31.jpg)'
- en: Figure 1.31 – Set the request
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.31 – 设置请求
- en: 'Click on `responses`, `$.responses`. This part defines what the web API sends
    back to the Action as Output Parameters. In our case, we’re just going to save
    the entire JSON response as a Collection. At the end of this step, your **Response**
    configuration should look like this:'
  id: totrans-367
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 `responses`、`$.responses`。这部分定义了 Web API 将作为输出参数发送给操作的什么内容。在我们的例子中，我们只是将整个
    JSON 响应保存为一个集合。完成此步骤后，您的 **响应** 配置应如下所示：
- en: '![Figure 1.32 – Setting the response](img/B18416_01_32.jpg)'
  id: totrans-368
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.32 – 设置响应](img/B18416_01_32.jpg)'
- en: Figure 1.32 – Setting the response
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.32 – 设置响应
- en: 'Our single output `responses` Collection is equivalent to the highlighted item
    in the sample response output of GCP’s documentation:'
  id: totrans-370
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们的单个输出 `responses` 集合相当于 GCP 文档样本响应输出中突出显示的项目：
- en: '![Figure 1.33 – The response from GCP’s documentation](img/B18416_01_33.jpg)'
  id: totrans-371
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.33 – GCP 文档的响应](img/B18416_01_33.jpg)'
- en: Figure 1.33 – The response from GCP’s documentation
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.33 – GCP 文档的响应
- en: Save the Web API Service.
  id: totrans-373
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存 Web API 服务。
- en: Now we’ve completed the setup of a new web API. Let’s test it out with a Process.
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经完成了新 Web API 的设置。让我们用一个流程来测试它。
- en: Testing the batch image Web API Service
  id: totrans-375
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试批处理图像 Web API 服务
- en: 'The sample Process should have been imported from the *Technical requirements*
    section. We also need to import an additional VBO to convert our PDF file into
    Base64 format, which is a requirement of the GCP Vision API:'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 样本流程应已从 *技术要求* 部分导入。我们还需要导入一个额外的 VBO 来将我们的 PDF 文件转换为 Base64 格式，这是 GCP 视觉 API
    的要求：
- en: Download and import the `Utility – File Manipulation` asset from the DX at [https://digitalexchange.blueprism.com/dx/entry/9648/solution/utility---file-manipulation](https://digitalexchange.blueprism.com/dx/entry/9648/solution/utility---file-manipulation).
    This is used to convert the PDF file into the Base64 format.
  id: totrans-377
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从DX中下载并导入`Utility – File Manipulation`资产，链接为[https://digitalexchange.blueprism.com/dx/entry/9648/solution/utility---file-manipulation](https://digitalexchange.blueprism.com/dx/entry/9648/solution/utility---file-manipulation)。这个工具用于将PDF文件转换为Base64格式。
- en: Open `Example 3 – Test GCP Batch PDF` Process in the `Ch1` Group in the Process
    Studio.
  id: totrans-378
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在流程工作室的`Ch1`组中打开`Example 3 – Test GCP Batch PDF`流程。
- en: 'Run the Process in the Process Studio. This Process makes one API call, which
    processes five PDF pages in a batch. The call is synchronous, as the predictions
    for the five pages are returned in the same call as the request. Once this is
    successful, the Collections and Data Item in the **Predictions** Block will become
    populated:'
  id: totrans-379
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在流程工作室中运行流程。此流程进行一次API调用，批量处理五个PDF页面。该调用是同步的，因为五个页面的预测在同一个请求中返回。一旦成功，**预测**块中的集合和数据项将变得完整：
- en: '![Figure 1.34 – Predictions from the newly created web API](img/B18416_01_34.jpg)'
  id: totrans-380
  prefs: []
  type: TYPE_IMG
  zh: '![图1.34 – 新创建的Web API的预测](img/B18416_01_34.jpg)'
- en: Figure 1.34 – Predictions from the newly created web API
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.34 – 新创建的Web API的预测
- en: In this third example, we looked at a batch/synchronous processing case for
    extracting text from documents. We also built a Web API Service that uses OAuth2
    authentication from scratch. This was an exercise in inputting existing API information
    into the right sections of BP’s Web API Service. In the sample Process, we also
    used Base64 to encode the PDF file so that it could be sent as plain text in the
    API request body.
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个第三个示例中，我们查看了一个从文档中提取文本的批处理/同步处理案例。我们还从头开始构建了一个使用OAuth2认证的Web API服务。这是一个将现有API信息输入BP的Web
    API服务正确部分的练习。在示例流程中，我们还使用了Base64对PDF文件进行编码，以便在API请求体中以纯文本形式发送。
- en: Summary
  id: totrans-383
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we discussed the DX and how web API connectors can be downloaded
    to greatly speed up our development time. When using a web API, the areas that
    people frequently get stuck on include authentication and correctly mapping the
    input and output JSON data according to the vendor’s API documentation.
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了DX以及如何下载Web API连接器以极大地加快我们的开发时间。当使用Web API时，人们经常遇到的问题包括认证以及根据供应商的API文档正确映射输入和输出JSON数据。
- en: ML web APIs also differ in two areas that affects IA solution design. These
    are single versus batch and synchronous versus asynchronous predictions. We’ll
    revisit these characteristics later in the book.
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: ML web API在两个影响IA解决方案设计的领域也有所不同。这些是单次与批量以及同步与异步预测。我们将在本书的后面重新讨论这些特性。
- en: 'Next, we looked at four major MLaaS vendors: AWS, Azure, GCP, and IBM. We explored
    what ML web APIs they have available on the DX. Each vendor uses marketing names
    for its services, obscuring what those services actually do. I’ve grouped and
    summarized what the services behind the marketing names actually do, provided
    search terms you can use to find them on the DX, and given you ideas on what use
    cases they can fulfill.'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们考察了四个主要的MLaaS供应商：AWS、Azure、GCP和IBM。我们探讨了他们在DX上提供的ML web API。每个供应商都为其服务使用营销名称，掩盖了这些服务实际上做什么。我已经将营销名称背后的服务进行了分组和总结，提供了你可以在DX上搜索它们的搜索词，并给出了它们可以满足的用例的想法。
- en: 'Finally, we went through three hands-on examples. Different vendors, API implementation
    methods, authentication methods, and use cases were selected to cover most of
    the scenarios you’ll encounter in real life. The vast majority of real-life IA
    examples I’ve found during my research have to do with text processing. Our examples
    showed three different IA text cases: extracting data from *unstructured text*,
    extracting data from *forms*, and extracting text from *images*.'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们通过三个实际操作示例进行了学习。我们选择了不同的供应商、API实现方法、认证方法和用例，以覆盖你将在现实生活中遇到的大部分场景。在我的研究过程中，我发现的大多数实际生活中的IA示例都与文本处理有关。我们的示例展示了三种不同的IA文本案例：从*非结构化文本*中提取数据、从*表格*中提取数据以及从*图像*中提取文本。
- en: In the next chapter, we will move away from calling ML predictions from web
    APIs and look more at how BP can call models directly from the Digital Worker’s
    command line interface.
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将不再从Web API调用ML预测，而是更多地探讨BP如何直接从Digital Worker的命令行界面调用模型。
