- en: '1'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '1'
- en: 'Machine Learning as a Service: the Digital Exchange and Web APIs'
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 机器学习即服务：数字交换和Web API
- en: Most of how we interact with ML today is done through **web APIs**. Even when
    using **large language model** (**LLM**) chatbots through a web browser, web API
    calls are being made in the background to give us the reply. More often than not,
    your BP Processes will also use web APIs to obtain the results of an ML prediction
    that’s hosted online.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们今天与ML互动的大部分方式都是通过**Web API**。即使是通过Web浏览器使用**大型语言模型**（**LLM**）聊天机器人，也会在后台进行Web
    API调用以给我们回复。通常情况下，您的BP流程也将使用Web API来获取在线托管ML预测的结果。
- en: 'In this chapter, we’re going to explore the most popular ML web APIs for IA,
    how to find them on BP’s **Digital Exchange** (**DX**), how to connect them to
    BP, and how to build one yourself so that predictions can be made in your automation
    use cases. More specifically, we will cover the following:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨IA中最流行的ML Web API，如何在BP的**数字交换**（**DX**）上找到它们，如何将它们连接到BP，以及如何自己构建一个，以便在自动化用例中进行预测。更具体地说，我们将涵盖以下内容：
- en: Understanding what the most common ML services are, some of their common use
    cases, and how to find them on the DX
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解最常见的ML服务、它们的一些常见用例以及如何在DX上找到它们
- en: Going through two examples of using pre-built downloadable assets from the DX
    to make ML predictions
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过两个示例说明如何使用DX中预构建的可下载资产进行ML预测
- en: Building a BP **Web API Service** from scratch to connect to an ML service that
    is not currently available on the DX
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从头开始构建BP **Web API服务**以连接到DX上目前不可用的ML服务
- en: 'By the end of the chapter, we’ll have covered examples of three of the most
    commonly used **machine learning as a service** (**MLaaS**) platforms: **Amazon
    Web Service** (**AWS**), **Azure**, and **Google Cloud Platform** (**GCP**). These
    examples also cover some of the most common IA use cases: extracting data from
    unstructured text, extracting data from forms, and extracting text from images.
    We will have also covered some of the key concepts that will inform our solution
    design in the future: **single** versus **batch** and **synchronous** versus **asynchronous**
    predictions.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，我们将涵盖三个最常用的**机器学习即服务**（**MLaaS**）平台：**亚马逊网络服务**（**AWS**）、**Azure**和**谷歌云平台**（**GCP**）的示例。这些示例还涵盖了某些最常见的IA用例：从非结构化文本中提取数据、从表格中提取数据以及从图像中提取文本。我们还将涵盖一些关键概念，这些概念将指导我们未来的解决方案设计：**单次**与**批量**以及**同步**与**异步**预测。
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'For this chapter, ensure that the following are in place:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本章，请确保以下条件满足：
- en: A valid Blue Prism Portal ([https://portal.blueprism.com](https://portal.blueprism.com))
    account. This is required to download assets from the DX. An account can be created
    free of charge.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个有效的Blue Prism Portal ([https://portal.blueprism.com](https://portal.blueprism.com))
    账户。这是从DX下载资产所必需的。账户可以免费创建。
- en: An active account at AWS, Azure, and GCP. We will go over examples using each
    vendor in this chapter. All examples can be run within the free tiers offered
    by the services.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在AWS、Azure和GCP上有一个活跃的账户。在本章中，我们将使用每个供应商的示例。所有示例都可以在服务提供的免费层中运行。
- en: Download the following file from GitHub at [https://github.com/PacktPublishing/Intelligent-Automation-with-Blue-Prism/blob/main/ch1/Ex_1_to_3.bprelease](https://github.com/PacktPublishing/Intelligent-Automation-with-Blue-Prism/blob/main/ch1/Ex_1_to_3.bprelease).
    Import the `.bprelease` file into BP. This contains sample Processes that will
    be used in our examples.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从GitHub [https://github.com/PacktPublishing/Intelligent-Automation-with-Blue-Prism/blob/main/ch1/Ex_1_to_3.bprelease](https://github.com/PacktPublishing/Intelligent-Automation-with-Blue-Prism/blob/main/ch1/Ex_1_to_3.bprelease)
    下载以下文件。将`.bprelease`文件导入BP。这包含将在我们的示例中使用的示例流程。
- en: Using the DX
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用DX
- en: The DX is BP’s marketplace, containing many BP-developed and community-submitted
    `.bprelease`, `.bpskill`, `.bpobject`, `.bpprocess`, and `.xml`. Most of the assets
    on the DX are free of charge to download and integrate; however, there are likely
    costs associated with using the ML API services themselves. Using pre-built assets
    from the DX is the *easiest and fastest way* to get ML into your automated business
    processes, provided the service fits your use case.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: DX是BP的市场，包含许多BP开发和社区提交的`.bprelease`、`.bpskill`、`.bpobject`、`.bpprocess`和`.xml`文件。DX上的大多数资产都可以免费下载和集成；然而，使用ML
    API服务本身可能存在成本。如果服务符合您的用例，使用DX中的预构建资产是**最快和最简单的方法**来将ML集成到您的自动化业务流程中。
- en: In this section, we’ll see what popular ML services are available on the DX
    and what the potential use cases are. Real-life use case examples are provided
    whenever possible, drawn from my own research examining over 100 IA use cases
    and technologies.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将了解DX上可用的流行机器学习服务以及潜在的使用案例。在可能的情况下，将提供真实世界的使用案例示例，这些示例来自我对超过100个IA用例和技术的研究。
- en: Accessing the DX
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 访问DX
- en: The DX can be accessed at [https://digitalexchange.blueprism.com](https://digitalexchange.blueprism.com).
    You’ll need to log in using your BP Portal account credentials to download assets.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过[https://digitalexchange.blueprism.com](https://digitalexchange.blueprism.com)访问DX。你需要使用你的BP门户账户凭据登录以下载资产。
- en: 'There’s much more available on the DX than just web APIs. Since we’re only
    interested in web APIs for this chapter, click on **More Filters** and filter
    based on **Connector** to narrow down the search results:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: DX上可用的不仅仅是Web API。由于我们只对本章中的Web API感兴趣，请点击**更多过滤器**并根据**连接器**过滤以缩小搜索结果：
- en: '![Figure 1.1 – Filtering for web APIs on the DX](img/B18416_01_1.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![图1.1 – 在DX上过滤Web API](img/B18416_01_1.jpg)'
- en: Figure 1.1 – Filtering for web APIs on the DX
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.1 – 在DX上过滤Web API
- en: The **Search for Assets** search box can then be used to find specific ML services
    *if you already know the service name*. Later, I’ll provide a summary of all of
    the most popular search terms you can use to find ML assets on the DX based on
    their use case. But first, let’s discuss some fundamentals that are needed to
    use ML web APIs.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用**搜索资产**搜索框来查找特定的ML服务，如果你已经知道服务名称。稍后，我将提供所有最流行的搜索术语的摘要，你可以根据它们的使用案例在DX上找到ML资产。但首先，让我们讨论一些使用ML
    Web API所需的基本知识。
- en: Machine learning web API fundamentals
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 机器学习Web API基础知识
- en: Under traditional RPA, BP interacts with desktop applications or with websites
    through a web browser. Connecting to ML algorithms can’t normally be done through
    either of those methods. Instead, over 90% of commercially available algorithms,
    including those on AWS, Azure, GCP, OpenAI, and so on, are exposed as web APIs.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在传统的RPA中，BP通过网页浏览器与桌面应用程序或网站交互。通常无法通过这两种方法连接到机器学习算法。相反，超过90%的商业可用算法，包括AWS、Azure、GCP、OpenAI等，都作为Web
    API公开。
- en: A standard web API call from a BP Digital Worker is shown in the following image.
    First, the Digital Worker makes an API request, which reaches the API endpoint
    through the Internet. The ML prediction is made and the endpoint returns an API
    response containing the prediction back to BP.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图像显示了从BP数字工作者发出的标准Web API调用。首先，数字工作者发起API请求，通过互联网到达API端点。做出机器学习预测后，端点返回包含预测的API响应，返回到BP。
- en: '![Figure 1.2 – The most common way to use ML with RPA: web API calls over the
    internet](img/B18416_01_2.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![图1.2 – 使用RPA与ML最常见的方式：通过互联网进行Web API调用](img/B18416_01_2.jpg)'
- en: 'Figure 1.2 – The most common way to use ML with RPA: web API calls over the
    internet'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.2 – 使用RPA与ML最常见的方式：通过互联网进行Web API调用
- en: Many ML models are proprietary. Vendors want to protect their intellectual property
    by hosting models on their own servers, which have protected API endpoints. If
    your BP environment isn’t allowed to connect to the Internet, you’ll need to consult
    with your networking and security teams to see whether exemptions can be made.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 许多机器学习模型是专有的。供应商希望通过在自己的服务器上托管模型来保护他们的知识产权，这些服务器具有受保护的API端点。如果你的BP环境不允许连接到互联网，你需要咨询你的网络和安全团队，看看是否可以做出例外。
- en: If not, then using publicly hosted ML APIs won’t be possible. You’ll either
    have to develop and host your own models over the Intranet or make predictions
    directly on the Digital Workers themselves. Note that it’s the Digital Workers
    that make the ML requests. Some people mistakenly believe that the BP application
    server will make calls to the API endpoint.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不行，那么使用公开托管的机器学习API将不可行。你将不得不在Intranet上开发和托管自己的模型，或者直接在数字工作者上做出预测。请注意，是数字工作者发起机器学习请求。有些人错误地认为BP应用程序服务器会调用API端点。
- en: Note the distinction between a *web API*, which is what we connect to get an
    ML prediction, and a *Web API Service*, which is a BP product feature. The web
    API services feature is used to define and set up connections to web APIs. We’ll
    create a Web API Service from scratch as the last example in this chapter.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 注意区分*Web API*，这是我们连接以获取机器学习预测的API，以及*Web API服务*，这是BP产品的一个功能。Web API服务功能用于定义和设置与Web
    API的连接。我们将在这个章节的最后创建一个Web API服务作为最后一个示例。
- en: 'Official documentation on this product feature can be found here: [https://bpdocs.blueprism.com/bp-7-1/en-us/Web%20API/HTML/configure-api-definition.htm](https://bpdocs.blueprism.com/bp-7-1/en-us/Web%20API/HTML/configure-api-definition.htm)'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 关于此产品功能的官方文档可以在此处找到：[https://bpdocs.blueprism.com/bp-7-1/en-us/Web%20API/HTML/configure-api-definition.htm](https://bpdocs.blueprism.com/bp-7-1/en-us/Web%20API/HTML/configure-api-definition.htm)
- en: In the remaining parts of this section, we’ll look at what’s important to know
    about web APIs from an IA integration perspective. This includes **authentication**,
    **JSON**, **pricing**, **single** versus **batch** prediction, and **synchronous**
    versus **asynchronous** prediction.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节的剩余部分，我们将从IA集成角度探讨了解Web API的重要信息。这包括**认证**、**JSON**、**定价**、**单次**与**批量**预测，以及**同步**与**异步**预测。
- en: Authentication
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 认证
- en: 'Most web API services require you to sign up before they can be used. After
    signing up, you’ll be given one or more unique ID(s), similar to a username and
    password, to uniquely identify you. Depending on the specific service, these unique
    ID(s) might be enough to directly gain access and call your ML API to receive
    your prediction. This is shown in *Figure 1**.3*:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数Web API服务在使用前都需要你注册。注册后，你会得到一个或多个唯一的ID，类似于用户名和密码，以唯一地识别你。根据具体的服务，这些唯一的ID可能足以直接获取访问权限并调用你的ML
    API以接收你的预测。这如图*图1**.3*所示：
- en: '![Figure 1.3 – When the unique IDs are valid as authentication credentials](img/B18416_01_3.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![图1.3 – 当唯一ID作为认证凭证有效时](img/B18416_01_3.jpg)'
- en: Figure 1.3 – When the unique IDs are valid as authentication credentials
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.3 – 当唯一ID作为认证凭证有效时
- en: An example of this is Azure. You can pass in the unique ID, called a **subscription
    key** in Azure terminology, to access your endpoint for prediction.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，Azure就是一个这样的例子。你可以传入一个唯一的ID，在Azure术语中称为**订阅密钥**，以访问你的预测端点。
- en: However, most services will require you to use your ID(s) to request for a temporary
    access token before calling the ML API. First, you make a request to receive a
    temporary access token using your unique credentials. Then, pass in this temporary
    token along with the input data to your ML API request to get your predicted result.
    For example, AWS calls their unique IDs the **access key ID** and the **secret
    access key**. In GCP, they are called the **Client ID** and the **Client Secret**.
    Both AWS and GCP require passing in a temporary access token to the ML API call.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，大多数服务将要求你在调用ML API之前使用你的ID请求一个临时访问令牌。首先，你使用你的唯一凭证发送一个请求以接收一个临时访问令牌。然后，将这个临时令牌连同输入数据一起传递给你的ML
    API请求以获取你的预测结果。例如，AWS将他们的唯一ID称为**访问密钥ID**和**秘密访问密钥**。在GCP中，它们被称为**客户端ID**和**客户端密钥**。AWS和GCP都要求在ML
    API调用中传递一个临时访问令牌。
- en: '![Figure 1.4 – A two-part API call: getting the access token and calling the
    ML API](img/B18416_01_4.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![图1.4 – 两部分API调用：获取访问令牌和调用ML API](img/B18416_01_4.jpg)'
- en: 'Figure 1.4 – A two-part API call: getting the access token and calling the
    ML API'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.4 – 两部分API调用：获取访问令牌和调用ML API
- en: The specific way that this works differs from vendor to vendor. For instance,
    some will have you submit the unique IDs as query parameters, while others need
    you to submit them in the request headers. Some use a proprietary algorithm to
    generate your temporary access token (including AWS) while others use open standards
    such as OAuth2 (including GCP).
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这种工作方式的具体方式因供应商而异。例如，一些供应商会让你将唯一ID作为查询参数提交，而另一些则要求你在请求头中提交。一些使用专有算法生成你的临时访问令牌（包括AWS），而另一些则使用开放标准，如OAuth2（包括GCP）。
- en: You’ll need to consult the vendor’s documentation to find out specific details.
    One of the main benefits of using a pre-built asset from the DX is that the authentication
    logic is usually handled for you! All you need to do is generate your unique credentials
    from the ML provider, and the temporary access token handling logic (if any) will
    be handled for you already.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要查阅供应商的文档以获取具体细节。使用DX中预构建资产的主要好处之一是，认证逻辑通常已经为你处理！你所需要做的就是从ML提供者那里生成你的唯一凭证，并且（如果有的话）临时访问令牌处理逻辑也已经为你处理。
- en: JSON
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: JSON
- en: JSON is one of the most popular data formats used to exchange data between web
    services. Almost all ML web APIs expect to receive JSON as input data and provide
    JSON as output data. When using a web API from the DX, almost all of the conversions
    between BP’s data types to JSON will be done for you.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: JSON 是用于在 Web 服务之间交换数据的最流行的数据格式之一。几乎所有机器学习 Web API 都期望接收 JSON 作为输入数据，并返回 JSON
    作为输出数据。当使用来自 DX 的 Web API 时，BP 的数据类型与 JSON 之间的几乎所有转换都将为您自动完成。
- en: There may be situations where you need to manually convert data from BP into
    JSON. This is most likely to happen for `Utility – JSON` VBO, which can be found
    in the `VBO` sub-folder where BP is installed.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 可能存在需要手动将 BP 数据转换为 JSON 的情况。这种情况最可能发生在“实用工具 – JSON”VBO 上，该 VBO 可在 BP 安装目录下的“VBO”子文件夹中找到。
- en: 'Sending files in JSON format requires you to first encode them, usually in
    Base64 format. There are three VBOs provided by BP on the DX that can help with
    this: `Utility – Encode Decode`, `Utility – File Manipulation`, and `Base64Encoder`.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 以 JSON 格式发送文件需要您首先对其进行编码，通常使用 Base64 格式。BP 在 DX 上提供了三个 VBO 来帮助完成这项工作：`实用工具 –
    编码解码`、`实用工具 – 文件操作`和`Base64Encoder`。
- en: Pricing
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 定价
- en: MLaaS offerings typically have free usage up to a limit. After the free limit
    is used, you’ll start to pay per transaction. The limits are usually reset on
    a monthly basis. For example, let’s look at Azure’s Computer Vision API ([https://azure.microsoft.com/en-us/pricing/details/cognitive-services/computer-vision/](https://azure.microsoft.com/en-us/pricing/details/cognitive-services/computer-vision/)).
    At the time of writing this book, it offers 5,000 free transactions per month.
    For the next 1 million transactions, the cost is 10 cents per transaction. Between
    1 and 10 million transactions, the cost is 6.5 cents per transaction. As you make
    more transactions per month, your cost per transaction goes down.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: MLaaS 提供的通常在达到一定限制内是免费的。使用免费限额后，您将开始按交易付费。这些限制通常每月重置。例如，让我们看看 Azure 的计算机视觉 API
    ([https://azure.microsoft.com/en-us/pricing/details/cognitive-services/computer-vision/](https://azure.microsoft.com/en-us/pricing/details/cognitive-services/computer-vision/))。在撰写本书时，它每月提供
    5,000 次免费交易。对于接下来的 1,000,000 次交易，每次交易的费用是 10 美分。在 1 到 10 百万次交易之间，每次交易的费用是 6.5
    美分。随着您每月交易次数的增加，每次交易的成本会降低。
- en: The pricing varies based on many factors, such as what region you’re in, what
    specific service you’re using in their Computer Vision library, and whether you’re
    willing to pre-commit to using a minimum number of transactions.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 定价取决于许多因素，例如您所在的地区、您在计算机视觉库中使用的特定服务，以及您是否愿意预先承诺使用最低数量的交易。
- en: It’s important to note that *one transaction is not the same as one API call*!
    For example, there may be a service that allows you to send in multiple documents
    at once. Each document might be counted as a separate transaction, despite being
    submitted in one API call. The devil is in the details, so you really need to
    look at the pricing pages carefully when evaluating how suitable an MLaaS offering
    is for your use case. This represents ongoing costs to the operation of the IA
    solution that must be weighed against the benefits.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，*一次交易并不等同于一次 API 调用*！例如，可能有一种服务允许您一次性发送多个文档。每个文档可能被视为单独的交易，尽管它们是在一个 API
    调用中提交的。魔鬼在于细节，因此在评估 MLaaS 提供是否适合您的用例时，您需要仔细查看定价页面。这代表了 IA 解决方案运营的持续成本，必须权衡其带来的好处。
- en: Single versus batch predictions
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 单个与批量预测
- en: It’s key to understand the API by reading through its documentation before using
    it. One important thing to note when looking at the documentation is whether the
    API allows for only a single prediction per API request or whether it can accept
    multiple inputs in a batch for a single API call. There may be separate endpoints
    for one versus the other.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 API 之前，通过阅读其文档来理解 API 是非常重要的。在查看文档时需要注意的一个重要事项是，API 是否仅允许每个 API 请求进行一次预测，或者是否可以接受单个
    API 调用中的批量多个输入。可能存在针对这两种情况的不同端点。
- en: '![Figure 1.5 – Batch prediction](img/B18416_01_5.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.5 – 批量预测](img/B18416_01_5.jpg)'
- en: Figure 1.5 – Batch prediction
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.5 – 批量预测
- en: For batch predictions, you’ll first send the input data for multiple predictions
    to the API endpoint in a single request (the first step in *Figure 1**.5*). The
    predictions will be made (second step) and the response will return all of the
    predicted results (third step). In the single prediction case, only one prediction
    can be made per API request call.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 对于批处理预测，您将首先在单个请求中将多个预测的输入数据发送到API端点（*图1.5*中的第一步）。预测将被执行（第二步），响应将返回所有预测结果（第三步）。在单次预测的情况下，每个API请求调用只能进行一次预测。
- en: Note that *Single Request* and *Single Response* shown in the image are NOT
    characteristics of single versus batch; it is a question of synchronous versus
    asynchronous, which will be discussed next.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 注意图中显示的“单个请求”和“单个响应”并不是单次与批量之间的特性；这是一个同步与异步的问题，将在下一节讨论。
- en: Synchronous vs. asynchronous predictions
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 同步与异步预测
- en: Single versus batch refers to the number of predictions that can be requested
    for in a single API call. Synchronous versus asynchronous, on the other hand,
    refers to whether the prediction results are returned in the same API call as
    the request.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 单次与批量指的是在单个API调用中可以请求的预测数量。另一方面，同步与异步指的是预测结果是否在同一个API调用中作为请求返回。
- en: For a synchronous (also called **online**) call, the predicted result(s) is
    returned in the same call as the request. This is used when the prediction can
    be made relatively quickly, such as with short documents and single images. *Figure
    1**.5* also shows an online case where the response is returned in the same API
    call.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 对于同步（也称为**在线**）调用，预测结果在同一个请求中返回。这用于预测可以相对快速完成的情况，例如短文档和单张图片。*图1.5*也显示了一个在线案例，其中响应在同一个API调用中返回。
- en: 'For asynchronous (also called **offline**) calls, you won’t receive the prediction
    in the same API call as the request. Instead, you’ll first receive a unique ID
    for your request that you can use to enquire about the status of your prediction
    job. Imagine if you need to process a large video as input. It may take minutes
    or even hours before the ML service can come back with its prediction. Let’s look
    at AWS’s Rekognition Video API as an example:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 对于异步（也称为**离线**）调用，您不会在同一个API调用中收到预测结果。相反，您将首先收到一个用于查询预测作业状态的唯一ID。想象一下，如果您需要处理一个大的视频作为输入，ML服务可能需要几分钟甚至几小时才能返回其预测。以下以AWS的Rekognition
    Video API为例：
- en: '![Figure 1.6 – AWS’s Rekognition Video API: asynchronous calls](img/B18416_01_6.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![图1.6 – AWS的Rekognition Video API：异步调用](img/B18416_01_6.jpg)'
- en: 'Figure 1.6 – AWS’s Rekognition Video API: asynchronous calls'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.6 – AWS的Rekognition Video API：异步调用
- en: First, you create an API request for a prediction by providing an S3 link to
    the video. In this first API call, you’ll receive a `JobId` back. For the second
    API call, you pass in the JobId to the `GetLabelDetection` endpoint, which returns
    the `JobStatus`. If the video is still being processed, you’ll receive a `JobStatus`
    of `IN_PROGRESS`.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，您通过提供一个视频的S3链接来创建一个预测的API请求。在这个第一个API调用中，您将收到一个`JobId`。对于第二个API调用，您将`JobId`传递给`GetLabelDetection`端点，该端点返回`JobStatus`。如果视频仍在处理中，您将收到`JobStatus`为`IN_PROGRESS`。
- en: Depending on the size of the video, you may need to wait a few seconds or even
    a few minutes before the prediction is finished. During this time, you can continue
    to call the `GetLabelDetection` API endpoint to check the status of your job.
    When it’s finished, the JobStatus will turn into `SUCCEEDED` and the predicted
    labels will be returned with the request.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 根据视频的大小，您可能需要等待几秒钟甚至几分钟，直到预测完成。在这段时间内，您可以继续调用`GetLabelDetection` API端点来检查作业状态。当它完成时，JobStatus将变为`SUCCEEDED`，并且预测的标签将与请求一起返回。
- en: While batch often implies asynchronous, this isn’t always the case! It’s possible
    for a single prediction to be asynchronous (such as in the AWS Rekognition Video
    example) and for batch prediction to be synchronous (as will be seen in the last
    example in this chapter).
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然“批处理”通常意味着异步，但这并不总是如此！单个预测可以是异步的（例如在AWS Rekognition Video示例中），而批处理预测可以是同步的（正如本章最后的一个示例所示）。
- en: Now that we’ve covered the basics of ML web APIs, let’s look at how we can use
    the DX to download pre-built assets and quickly make an ML prediction without
    having to develop an ML model ourselves.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经介绍了ML Web API的基础知识，让我们看看我们如何使用DX下载预构建的资产，并快速进行ML预测，而无需自己开发ML模型。
- en: An overview of MLaaS on the DX
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DX上MLaaS的概述
- en: MLaaS offerings, such as those from Azure, AWS, GCP, and IBM, allow you to quickly
    integrate pre-trained ML algorithms into BP. You’ll be able to use the ML parts
    of IA without the complexities of the ML lifecycle, such as training, choosing
    between algorithms, tuning, hosting, maintenance, etc. However, MLaaS is often
    less flexible, as the models are pre-trained and usually not customizable to your
    specific use case. Most of these services provide *generic* rather than *specific*
    ML capabilities.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 机器学习即服务（MLaaS）提供的产品，如Azure、AWS、GCP和IBM的产品，允许你快速将预训练的机器学习算法集成到业务流程（BP）中。你将能够使用智能自动化（IA）的机器学习部分，而无需处理机器学习生命周期中的复杂性，如训练、选择算法、调整、托管、维护等。然而，MLaaS通常不太灵活，因为模型是预训练的，通常不能根据你的特定用例进行定制。这些服务中的大多数提供的是*通用*而不是*特定*的机器学习功能。
- en: To save you time searching the DX, I’ve compiled and summarized a list of the
    most popular MLaaS offerings currently available, grouped by the type of input
    data you’re looking to provide into the algorithm. This will give you a sense
    of what IA cases you can quickly and simply implement. The types of input data
    are categorized as **Images**, **Video**, **Speech**, and **Text**.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 为了节省你搜索DX的时间，我已经整理并总结了目前最流行的机器学习即服务（MLaaS）提供的产品列表，按你打算提供给算法的输入数据类型进行分组。这将给你一个关于你可以快速简单地实现的智能自动化案例的感觉。输入数据类型被分类为**图像**、**视频**、**语音**和**文本**。
- en: Multi-modal ML models that can accept different types of inputs are starting
    to appear. An example of this is GPT-4, which can accept both text and image as
    input. These models won’t be covered in this section, as they aren’t fully available
    during the writing of this book.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 能够接受不同类型输入的多模态机器学习模型开始出现。GPT-4就是这样一个例子，它可以接受文本和图像作为输入。这些模型在本节中不会涉及，因为它们在本书撰写期间尚未完全可用。
- en: Note that numerical data isn’t listed as an input. Numerical input is usually
    used for regression problems, and there aren’t many services that provide ML models
    that are generic enough to be useful for regression. If you’re trying to predict
    numerical data, you’ll probably need to build your own ML model.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，数值数据并未列为输入项。数值输入通常用于回归问题，而且提供足够通用的机器学习模型以用于回归的服务并不多。如果你试图预测数值数据，你可能需要构建自己的机器学习模型。
- en: From a development or proof-of-concept perspective, most ML vendors offer generous
    free usage tiers of their ML prediction services. This allows you to evaluate
    whether it makes sense to pursue a particular IA project in a short period of
    time.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 从开发或概念验证的角度来看，大多数机器学习（ML）供应商提供其预测服务的慷慨免费使用层。这使你能够在短时间内评估是否值得追求特定的智能自动化（IA）项目。
- en: While investigating 122 IA use cases for my thesis research, I found that 75%
    of them could potentially have been fulfilled by MLaaS, so investigating these
    services and the DX is well worth your time. Text-based services were by far the
    most common, representing over 66% of all IA use cases.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在调查我的论文研究中的122个智能自动化（IA）用例时，我发现其中75%有可能通过机器学习即服务（MLaaS）来实现，因此调查这些服务和数字化转型（DX）非常值得你的时间。基于文本的服务是最常见的，占所有智能自动化用例的66%以上。
- en: Image services
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 图像服务
- en: Image services return insight into what’s found in images. Most of these services
    have specific requirements with regard to what images can be submitted to their
    service. This can include file size requirements, image formats (PNG and JPG are
    the most common), image resolution, minimum and maximum dimensions, and image
    orientation.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 图像服务可以提供关于图像中内容的洞察。这些服务中的大多数对可以提交给其服务的图像有具体要求。这可能包括文件大小要求、图像格式（PNG和JPG是最常见的）、图像分辨率、最小和最大尺寸以及图像方向。
- en: Some will require you to upload the files as part of the API request body content,
    while others will ask you to first upload the files somewhere and provide URLs
    to the images. Many of these APIs offer *both single and batch operations* and
    are typically *synchronous*, returning the detected labels in the same request
    as the initial response.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 一些服务可能要求你将文件作为API请求体内容的一部分上传，而其他服务可能要求你首先将文件上传到某个地方，并提供图像的URL。许多这些API提供*单次和批量操作*，通常是*同步的*，在同一个请求中返回检测到的标签和初始响应。
- en: Image-based ML services only accounted for 10% of IA use cases that I found.
    An issue with these types of services is that the generic objects returned by
    the predictions aren’t specific enough to be useful. However, many of these services
    also allow you to customize the labels, meaning that you can further train an
    ML model, using the vendor’s model as a starting base, to match what you’re interested
    in finding. This is where many potential image-based use cases can be unlocked.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 基于图像的机器学习服务仅占我发现的人工智能用例的10%。这些类型服务的问题在于预测返回的通用对象不够具体，无法发挥作用。然而，许多这些服务也允许您自定义标签，这意味着您可以使用供应商的模型作为起点，进一步训练机器学习模型，以匹配您感兴趣寻找的内容。这正是许多潜在基于图像的使用案例得以解锁的地方。
- en: 'After a prediction is made, you’ll get back the following:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 预测完成后，您将获得以下信息：
- en: A list of labels that are found in the image(s)
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图像中找到的标签列表
- en: '*X* and *Y* coordinates representing the boundaries of the discovered objects'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*X* 和 *Y* 坐标表示发现对象的边界'
- en: Confidence scores showing the degree of certainty that the object is of a particular
    label
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确信度分数显示对象属于特定标签的确定性程度
- en: 'The services and potential use cases of image-based services include the following:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 基于图像的服务及其潜在用例包括以下内容：
- en: '**Object detection**: This allows you to find labels in images drawn from generic
    categories, such as animals, people, cars, buildings, etc. This can be further
    customized, in many cases, to detect *specific objects*, such as through AWS’s
    **DetectCustomLabels** and Azure’s **Custom Vision**. Some real-life IA use cases
    include quality assurance in factories for counting and finding product defects
    and dispensing prescription medication.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**对象检测**：这允许您在来自通用类别的图像中找到标签，例如动物、人、汽车、建筑物等。在许多情况下，这可以进一步定制，以检测*特定对象*，例如通过AWS的**DetectCustomLabels**和Azure的**Custom
    Vision**。一些现实生活中的人工智能用例包括在工厂中用于计数和查找产品缺陷以及分发处方药物的质量保证。'
- en: '**Face and facial feature detection**: This predicts whether faces are present
    in an image and the gender, estimated age, and overall mood displayed by the face.
    This could be used for surveillance and the processing of applications that contain
    photographs. The only IA use case I found that implemented facial recognition
    was to take attendance and to quantify student engagement during online learning
    courses.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**面部及面部特征检测**：这预测图像中是否存在面部，以及面部显示的性别、估计年龄和整体情绪。这可以用于监控和处理包含照片的申请。我发现的唯一实现面部识别的人工智能用例是在在线学习课程中记录出勤和量化学生参与度。'
- en: '**Image content moderation**: This allows us to determine whether an image
    contains adult or violent themes. This is most often used for user-uploaded content
    moderation on social media. I didn’t find real use cases for this in IA.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**图像内容审查**：这允许我们确定图像是否包含成人或暴力主题。这通常用于社交媒体上的用户上传内容审查。我在人工智能中没有找到这个功能的实际用例。'
- en: '**Text detection**: This returns where in the image text is found and what
    the text is. This is one of the most common image-based IA use cases.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文本检测**：这返回图像中文字的位置和文字内容。这是最常见的基于图像的人工智能用例之一。'
- en: '**Form detection**: This tells us whether an image has extractable form fields
    or tables in it. This is generically useful for IA and could be used for processing
    invoices, receipts, and financial reporting data. A real-life example of this
    is extracting data from scans of hand-written bank account application forms.'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**表单检测**：这告诉我们图像中是否包含可提取的表单字段或表格。这对于人工智能来说具有通用性，可以用于处理发票、收据和财务报告数据。一个现实生活中的例子是从手写银行账户申请表扫描中提取数据。'
- en: '|  | **Search term for** **DX skill** |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '|  | **DX技能**的搜索词 |'
- en: '| **Feature** | **AWS** | **Azure** | **Google Cloud** | **IBM** |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| **功能** | **AWS** | **Azure** | **Google Cloud** | **IBM** |'
- en: '| Object detection | Rekognition | Computer Vision | Cloud Vision API, Google
    Vision Skill | Visual Recognition Skill IBM Watson |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| 对象检测 | Rekognition | 计算机视觉 | 云视觉API，谷歌视觉技能 | IBM Watson视觉识别技能 |'
- en: '| Face and facial feature detection | Rekognition | Computer Vision | Cloud
    Vision API, Google Vision Skill | Visual Recognition Skill IBM Watson |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| 面部及面部特征检测 | Rekognition | 计算机视觉 | 云视觉API，谷歌视觉技能 | IBM Watson视觉识别技能 |'
- en: '| Content moderation | Rekognition | Computer Vision | Cloud Vision API, Google
    Vision Skill | Visual Recognition Skill IBM Watson |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| 内容审查 | Rekognition | 计算机视觉 | 云视觉API，谷歌视觉技能 | IBM Watson视觉识别技能 |'
- en: '| Text detection | Rekognition, Textract | Computer Vision | Cloud Vision API,
    Google Vision Skill | Visual Recognition Skill IBM Watson |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| 文本检测 | Rekognition, Textract | 计算机视觉 | 云视觉API，谷歌视觉技能 | IBM Watson视觉识别技能 |'
- en: '| Form detection | Textract | Form Recognizer Client | Cloud Document AI |
    N/A* |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| 表单检测 | Textract | 表单识别客户端 | 云文档AI | N/A* |'
- en: Table 1.1 – Search terms for image-based ML services on the DX
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 表1.1 – DX上基于图像的ML服务的搜索词
- en: '***Available from the vendor but not on the DX, so you must build your own**
    **web API.**'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '**从供应商处提供，但不在DX上，因此您必须自行构建** **web API**。'
- en: Video services
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 视频服务
- en: Services that take videos as input have a similar functionality to image services.
    They allow for the analysis of videos in *almost real time*. Depending on the
    service, you might be asked to provide your input as the URL of a stream, or to
    upload your video files to predesignated area.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 以视频为输入的服务具有与图像服务类似的功能。它们允许在**几乎实时**的情况下分析视频。根据服务不同，您可能需要提供输入作为流URL，或者上传您的视频文件到预指定的区域。
- en: Almost real time is a key point to keep in mind. Most ML services that process
    video are *asynchronous* and don’t immediately give you the predicted result.
    First, you make the call to the API to request a prediction. Then, you have to
    make a further call(s) to check whether the prediction is ready.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎实时是一个需要记住的关键点。大多数处理视频的ML服务都是**异步的**，不会立即给出预测结果。首先，您需要调用API请求预测。然后，您必须进行进一步的调用以检查预测是否准备就绪。
- en: There are usually maximum limits set on the length of the videos (3–6 hours)
    and file sizes (10–50 GB) that can be processed. These limits differ from vendor
    to vendor. Please check their API documentation and follow their guidelines with
    regard to these limits, resolutions, camera angles, video bitrates, etc. In my
    research, I didn’t find any use cases that used video as the input source. Instead
    of video, it may make sense to take snapshots of the video at regular intervals
    (e.g., every 5 seconds) and to use image-based ML services instead.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 通常会对视频长度（3-6小时）和文件大小（10-50 GB）的处理设置最大限制。这些限制因供应商而异。请检查他们的API文档，并遵循他们关于这些限制、分辨率、摄像机角度、视频比特率等方面的指南。在我的研究中，我没有找到任何使用视频作为输入源的用例。相反，可能更有意义的是在固定间隔（例如，每5秒）对视频进行快照，并使用基于图像的ML服务。
- en: 'After a prediction is made, you’ll get back the following:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 预测完成后，您将获得以下信息：
- en: A list of labels that are found in the video
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 视频中找到的标签列表
- en: '*X* and *Y* coordinates representing the boundaries of the discovered objects'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表示发现对象边界的**X**和**Y**坐标
- en: Start and end time ranges or timestamp for each label that is detected
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个检测到的标签的开始和结束时间范围或时间戳
- en: Confidence scores showing the degree of certainty that the object is of a particular
    label
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示对象属于特定标签的置信度分数
- en: 'The services and potential use cases of image-based services include the following:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 基于图像的服务及其潜在用例包括以下内容：
- en: '**Object detection**: This can be used to detect generic labels, such as animals,
    people, cars, buildings, etc. Sample use cases include surveillance, drone footage
    analysis, and quality assurance.'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**对象检测**：此功能可以用于检测通用标签，如动物、人、汽车、建筑物等。示例用例包括监控、无人机视频分析和质量保证。'
- en: '**Scene change detection**: This detects whether a video feed switches from
    one camera to another. This could be used for video cataloging, archiving, and
    trimming.'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**场景变化检测**：此功能用于检测视频流是否从一个摄像头切换到另一个摄像头。这可以用于视频编目、存档和剪辑。'
- en: '**Content moderation**: This predicts whether a video contains adult or violent
    themes. It’s often used for user-uploaded content moderation on social media.'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**内容审核**：此功能预测视频是否包含成人或暴力主题。它通常用于社交媒体上的用户上传内容审核。'
- en: '**Logo detection**: This detects logos in videos. It could be used to automatically
    flag or sensor brands and logos in video or to monitor user-submitted content.'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**标志检测**：此功能用于检测视频中的标志。它可以用于自动标记或检测视频中的品牌和标志，或用于监控用户提交的内容。'
- en: '**Face detection**: This detects the presence of faces in video. It can be
    used to automate access control to facilities, to track movement, and for surveillance.'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**人脸检测**：此功能用于检测视频中的人脸。它可以用于自动化设施访问控制、跟踪移动和监控。'
- en: '**Text extraction**: This is used to extract text from video. Even if the text
    is partially obscured for portions of the video, these services can reconstruct
    the full text if the camera moves enough to cover the entire text during the course
    of the video. This could be used to extract presentation slide content from live
    events.'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|  | **Search term for** **DX Skill** |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
- en: '| **Feature** | **AWS** | **Azure** | **Google Cloud** | **IBM** |'
  id: totrans-113
  prefs: []
  type: TYPE_TB
- en: '| Object detection | N/A* | N/A* | Cloud Video Intelligence | N/A |'
  id: totrans-114
  prefs: []
  type: TYPE_TB
- en: '| Scene changes | N/A* | N/A* | Cloud Video Intelligence | N/A |'
  id: totrans-115
  prefs: []
  type: TYPE_TB
- en: '| Content moderation | N/A* | N/A* | Cloud Video Intelligence | N/A |'
  id: totrans-116
  prefs: []
  type: TYPE_TB
- en: '| Logo detection | N/A | N/A | Cloud Video Intelligence | N/A |'
  id: totrans-117
  prefs: []
  type: TYPE_TB
- en: '| Face detection | N/A* | N/A* | Cloud Video Intelligence | N/A |'
  id: totrans-118
  prefs: []
  type: TYPE_TB
- en: '| Text extraction | N/A* | N/A* | Cloud Video Intelligence | N/A |'
  id: totrans-119
  prefs: []
  type: TYPE_TB
- en: Table 1.2 - Search terms for video-based ML services on the DX
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: '***Available from the vendor but not on the DX, so you must build your own**
    **web API.**'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: Speech services
  id: totrans-122
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: These allow you to extract data from live-streamed audio and saved audio files.
    This can be done *synchronously* or *asynchronously*, depending on the length
    of the audio or the size of the file. Shorter files are typically processed synchronously.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: Depending on the API, the vendor may require you to upload audio files directly
    into the ML endpoint or upload them to cloud storage. They will also have requirements
    on the length of the audio and the languages spoken. In my research, I did not
    find any implemented use cases of IA using speech as the input.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: 'Typical outputs of a speech-based ML service are as follows:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: The transcribed text
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Timestamps of intervals of the transcribed text
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Confidence scores
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Common capabilities and use cases of speech ML are as follows:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: '**Speech transcription**: This converts spoken audio into text.'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Text to speech**: This allows text to be read out loud as speech.'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`purchase`, `modify`, or `cancel` `a ticket`.'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Speaker recognition**: This helps you to identify different speakers. This
    works best when the number of speakers to predict is sent as an input to the algorithm.
    It also assigns each speaker with a unique identifier. You can use the unique
    identifier to map audio back to a human speaker manually if you already know the
    identities of the speakers. This could be used to automatically add subtitles
    that include speakers’ names.'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Speech translation**: This allows you to transcribe audio into text of a
    different language. This can also be achieved by chaining a speech transcription
    service to a text translation service.'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|  | **Search term for** **DX Skill** |'
  id: totrans-135
  prefs: []
  type: TYPE_TB
- en: '| **Feature** | **AWS** | **Azure** | **Google Cloud** | **IBM** |'
  id: totrans-136
  prefs: []
  type: TYPE_TB
- en: '| Speech transcription | Transcribe | Speech to text | Cloud Speech-to-Text
    API | N/A* |'
  id: totrans-137
  prefs: []
  type: TYPE_TB
- en: '| Text to speech | Polly | N/A* | Cloud Text-to-Speech | N/A* |'
  id: totrans-138
  prefs: []
  type: TYPE_TB
- en: '| Intent recognition | N/A* | N/A* | N/A* | N/A* |'
  id: totrans-139
  prefs: []
  type: TYPE_TB
- en: '| Speaker recognition | N/A* | Azure Speaker Recognition Beta | N/A* | N/A*
    |'
  id: totrans-140
  prefs: []
  type: TYPE_TB
- en: '| Speech translation | N/A | N/A* | N/A | N/A |'
  id: totrans-141
  prefs: []
  type: TYPE_TB
- en: Table 1.3 – Search terms for video-based ML services on the DX
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: '***Available from the vendor but not on the DX, so you must build your own**
    **web API.**'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: Text services
  id: totrans-144
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Text-based ML services are by far the most commonly used ML services in IA.
    Around two-thirds of the 122 IA use cases I found were text-based, 52% of the
    cases involved the use of translation, **natural language processing** (**NLP**),
    **named entity recognition** (**NER**), OCR, and document classification, and
    15% of the use cases used chatbots as an interface to trigger IA.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: Text services are *usually* synchronous, and depending on the service, prediction
    requests can either be sent in one by one or in a batch. Text-based ML services
    take in the text to be analyzed and the language as input parameters.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: 'Typical outputs received from text ML are as follows:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: The predicted labels
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Confidence scores
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following are common ways that text ML can be used:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: '**Document classification**: This allows you to differentiate between different
    types of documents. This normally leads to further ML processing, such as entity
    recognition. An example of this is invoice processing. Document classification
    can be used to classify invoices by vendor. Another example is to separate documents
    into invoices and purchase orders because they often look similar.'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Entity recognition**: This extracts text into predefined categories, such
    as names, dates, numerical figures, and events. This can be used for categorizing
    text, filtering CVs, and extracting data from unstructured reports. This is one
    of the most popular use cases, especially for processing invoices, claims, and
    other standardized forms. Many vendors allow you to customize the list of entities
    to match your specific use case.'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`I waited for 45 minutes before it was my turn`, the key phrases could be “waited”
    and “45 minutes”.'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Sentiment analysis**: This finds the high-level opinion or attitude expressed
    in a block of text. Some common labels returned include *positive*, *neutral*,
    *negative*, and *mixed*. Most models can’t distinguish more nuanced sentiments
    under the same label; for example, “excited” and “happy” would both be returned
    as positive despite being different in reality. Common ways this can be used is
    to triage emails or customer support tickets and to detect sentiment in social
    media and product reviews.'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Language detection**: This is typically used as a first step before sending
    the text to other text-based ML algorithms.'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Translation**: This can translate text from one language to another in either
    real time or on demand. Over 50 languages are supported by all vendors.'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Chatbots**: These services allow companies to create conversational interfaces
    for their applications. For example, one government agency used chatbots as an
    interface for people to request social security benefits, which further triggered
    IA to complete the processing.'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Question answering**: This is one of the main features of LLMs. As this technology
    is relatively new, I haven’t come across any use cases of this being used in IA
    just yet.'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Text generation**: This is another relatively new use case enabled by LLMs.
    This would be useful as a way to create responses to user complaints or emails.'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|  | **Search term for** **DX Skill** |'
  id: totrans-160
  prefs: []
  type: TYPE_TB
- en: '| **Feature** | **AWS** | **Azure** | **Google Cloud** | **IBM** |'
  id: totrans-161
  prefs: []
  type: TYPE_TB
- en: '| Document classification | N/A* | Form Recognizer client | AutoML Natural
    Language, Cloud Natural Language API | N/A |'
  id: totrans-162
  prefs: []
  type: TYPE_TB
- en: '| Entity recognition | Comprehend Capability AWS | Text analytics, OpenAI,
    ChatGPT | AutoML Natural Language, Cloud Natural Language API | Language understanding
    |'
  id: totrans-163
  prefs: []
  type: TYPE_TB
- en: '| Key phrase extraction | Comprehend Capability AWS | Text analytics, OpenAI,
    ChatGPT | Cloud Natural Language API | Language understanding |'
  id: totrans-164
  prefs: []
  type: TYPE_TB
- en: '| Sentiment analysis | Comprehend Capability AWS | Text analytics, OpenAI,
    ChatGPT | AutoML Natural Language, Cloud Natural Language API | Language understanding
    |'
  id: totrans-165
  prefs: []
  type: TYPE_TB
- en: '| Language detection | Comprehend Capability AWS | Text analytics, OpenAI,
    ChatGPT | Cloud Natural Language API | Language understanding |'
  id: totrans-166
  prefs: []
  type: TYPE_TB
- en: '| Translation | Translate capability AWS | Translate skill Azure Cloud, OpenAI,
    ChatGPT | Translate Skill Google Cloud | Language translation skill IBM |'
  id: totrans-167
  prefs: []
  type: TYPE_TB
- en: '| Chatbots | N/A* | QnAMaker, OpenAI, ChatGPT | N/A* | N/A* |'
  id: totrans-168
  prefs: []
  type: TYPE_TB
- en: '| Question answering | N/A | OpenAI, ChatGPT^ | N/A* | N/A |'
  id: totrans-169
  prefs: []
  type: TYPE_TB
- en: '| Text generation | N/A | OpenAI, ChatGPT^ | N/A* | N/A |'
  id: totrans-170
  prefs: []
  type: TYPE_TB
- en: Table 1.4 - Search terms for video-based ML services on the DX
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: '***Available from the vendor but not on the DX, so you must build your own**
    **web API.**'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: '**^OpenAI is not completely owned by Microsoft, although they have a** **strong
    partnership.**'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: An interesting development has happened with the release of GPT-4, Bard, and
    other LLMs. These models have the innate ability to perform tasks such as text
    translation, entity extraction, language detection, sentiment analysis, etc.,
    despite not having been trained to do so explicitly. I expect that LLMs will become
    a viable alternative to many of the text-based and image-based ML APIs as they
    become more mature.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: Vendor selection
  id: totrans-175
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the previous section, we looked at four major MLaaS vendors: AWS, Azure,
    GCP, and IBM. The decision to choose one over the other is complex and highly
    dependent on constraints that may already exist at your company. Selection criteria
    can include the following:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: Existing preferences or discounts at a particular vendor
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Existing organizational or team knowledge in using one platform over another
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The presence of must-have services that are offered by only one of the vendors
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The availability of the service in a desirable geographic location
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The costs of the service itself
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The accuracy of the service given your input data
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Whether the service supports your desired single versus batch or synchronous
    versus asynchronous processing
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data retention and security policies
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SLAs for uptime and API usage limits
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The availability of the service as a ready-to-use asset on the DX
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Before moving on to hands-on examples, let’s summarize what we’ve just learned.
    The DX is BP’s “app store,” where many connectors to ML services are available.
    Most of these connectors are web APIs that use JSON as a data exchange format.
    Some of the most challenging parts of using an ML web service (such as authentication)
    and specific API requirements are already included in the DX asset, allowing you
    to quickly integrate ML into your BP process.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we looked at common use cases of ML from the main ML service vendors:
    AWS, Azure, GCP, and IBM. Each vendor has marketing names for its ML services.
    It’s not straightforward to know what each service does based on its name. I’ve
    broken down all of the services based on the type of input it expects to take
    in: image, video, speech, and text. I’ve also listed their marketing names as
    well as the search terms you can use to find them on the DX, if they exist. Finally,
    we looked at some factors that can influence our decision to choose one ML vendor
    over another.'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  id: totrans-189
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we’ll be going through three examples of using web APIs to
    make ML predictions. For the first two examples, we’ll be *downloading* and using
    two different assets from the DX. In the third example, we’ll be creating a Web
    API Service from scratch. One web API from each major vendor will be used: AWS,
    Azure, and GCP. These examples will require you to sign up for free accounts to
    use their services. If you don’t have accounts with each vendor, follow along
    with the ones you do have accounts with.'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: From AWS, we’ll use Comprehend for text analysis of an email service request.
    With Azure, we’ll use Form Recognizer to extract data from an invoice. Finally,
    from GCP, we’ll use the Cloud Vision API to extract text from an image-based PDF.
    These three services were chosen because they’re the most popular ML service vendors,
    have different authentication methods, and cover the most common use cases encountered
    in IA, processing text data, forms, and images.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: 'The most difficult parts of getting a web API working are as follows:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: '**Authentication**: Part of this is done on the MLaaS vendor’s portal to generate
    the right keys. The other part is inputting those keys into the correct part of
    BP, usually a Credential. The DX asset’s documentation will guide you on how this
    should be done.'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Formatting input data**: This normally requires reading the API’s documentation,
    but this is provided to you from the Web API Service or the Object.'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Formatting output data**: This normally requires reading the API’s documentation,
    but this is provided to you from the Web API Service or the Object.'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The three examples that we will go through and how they differ from one another
    are summarized in the following table:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: '| **Service** | **Implementation for API** **in BP** | **Authentication** |
    **Batch /** **single** | **Sync /** **async** | **Use case** |'
  id: totrans-197
  prefs: []
  type: TYPE_TB
- en: '| AWS Comprehend | Object + web API | Temporary access token (object) + access
    key ID + secret access key | Single | Sync | Extract entities from support ticket
    text |'
  id: totrans-198
  prefs: []
  type: TYPE_TB
- en: '| Azure Form Recognizer | Object + HTTP and JSON VBOs | Single subscription
    key | Single | Async | Extract data from digital invoices |'
  id: totrans-199
  prefs: []
  type: TYPE_TB
- en: '| GCP Cloud Vision | Custom-built Web API Service | Temporary access token
    (OAuth2) + Client ID + Client Secret | Batch | Sync | Extract text from images
    |'
  id: totrans-200
  prefs: []
  type: TYPE_TB
- en: Table 1.5 – A summary of the three examples we will go through
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
- en: Example 1 – AWS Comprehend for text entity extraction, key phrase extraction,
    and sentiment analysis
  id: totrans-202
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: AWS Comprehend is an ML service that extracts information and understands data
    in text. In this example, we’ll use Comprehend to triage cases for email support.
    Unlike submitting a support request through a web form or a chatbot where you
    can ask the user to categorize the issue for you, triaging issues sent directly
    through email has to be done either manually, through rules, or by ML.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: 'It’s possible to build a custom model to directly classify text into your desired
    categories in Comprehend, but that’s outside the scope of this example. Instead,
    we’ll be using AWS’s pre-built models to extract the entities, key phrases, and
    sentiment of a support request. Even without a custom model, predictions from
    these pre-built models are still useful to the customer support agent. The support
    request used in this example is the following:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
- en: I am writing to request assistance with my iPhone 14, which has a cracked screen.
    My customer ID is abcd@email.com. I would greatly appreciate your help in resolving
    this issue. I understand that the device may be covered by a warranty or insurance
    plan, and I would like to explore all available options for repairing or replacing
    the phone. If possible, could you please provide me with information on the next
    steps I should take to initiate a repair or replacement request? Additionally,
    please let me know if there are any costs associated with this process.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: Comprehend currently has a free usage tier of 5 million characters per API per
    month. The actions provided by the DX asset work in *single* and *synchronous*
    modes.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
- en: 'AWS web APIs use a proprietary algorithm to implement their refresh token authentication.
    Once you’ve imported the DX asset, you’ll notice that there’s both a Web API Service
    and an Object. The Object’s main purpose is to act as a wrapper around the web
    API that implements the custom authentication. In this example, we will be performing
    four high-level steps:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
- en: Downloading the asset from the DX
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Importing the asset into BP
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configuring a BP Credential
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Testing the DX API asset by making an ML prediction
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Downloading from the DX
  id: totrans-212
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this step, we’ll visit the DX ([https://digitalexchange.blueprism.com/dx/search](https://digitalexchange.blueprism.com/dx/search))
    to search for and download the AWS Comprehend asset:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: Visit the DX and type `comprehend capability aws` (capitalization doesn’t matter)
    into the search bar. Search for and click on the resulting **Comprehend Capability
    AWS** **Cloud** asset.
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the green download button on the right side of the screen and save
    the `.bprelease` asset to your computer. If you haven’t logged in already, the
    DX website will ask you to log in. This `.bprelease` contains one web API, one
    Object, and one Credential.
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Scroll down further on the **Connector for Comprehend Capability AWS Cloud**
    page and download the **AWS Comprehend** **User Guide**.
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.7 – Downloading the asset and the AWS Comprehend User Guide](img/B18416_01_7.jpg)'
  id: totrans-217
  prefs: []
  type: TYPE_IMG
- en: Figure 1.7 – Downloading the asset and the AWS Comprehend User Guide
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: The AWS Comprehend User Guide provides links and details on how to set up your
    AWS account to allow for API calls from BP. Please follow the steps outlined in
    the user guide to properly set up your AWS account and authentication details.
    We won’t be going through the steps to set up your AWS account here.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: Importing the Comprehend asset into BP
  id: totrans-221
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let’s import the downloaded asset into BP and check what was imported:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
- en: Open BP and log in. Click on **File** | **Import** | **Release / Skill**. Import
    the AWS Comprehend Release. Accept all of the defaults when importing.
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Verify that the `.bprelease` was successfully imported into BP. There should
    be one Object, one Web API Service, and one Credential. The Object can be found
    in the **Studio** section of BP.
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.8 – Finding the Object in the Studio section](img/B18416_01_8.jpg)'
  id: totrans-225
  prefs: []
  type: TYPE_IMG
- en: Figure 1.8 – Finding the Object in the Studio section
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: Find the Comprehend web API under **System** | **Objects** | **Web** **API Services**.
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.9 – Finding AWS: Comprehend under System | Objects | Web API Services](img/B18416_01_9.jpg)'
  id: totrans-228
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.9 – Finding AWS: Comprehend under System | Objects | Web API Services'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
- en: Find the Credential under **System** | **Security** | **Credentials**.
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.10 – Finding the AWS Credential under System | Security | Credentials](img/B18416_01_10.jpg)'
  id: totrans-231
  prefs: []
  type: TYPE_IMG
- en: Figure 1.10 – Finding the AWS Credential under System | Security | Credentials
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the AWS credential
  id: totrans-233
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this step, we’ll import the `AWS` credentials (look at the downloaded user
    guide if you haven’t created these yet) into BP. Then, we’ll set the permissions
    on the Credential so that we can test it in a Process:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
- en: Copy your AWS access key ID into the `AWS` credential. Copy your secret access
    key into the two **Password** fields.
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.11 – Entering the AWS access key ID the secret access key](img/B18416_01_11.jpg)'
  id: totrans-236
  prefs: []
  type: TYPE_IMG
- en: Figure 1.11 – Entering the AWS access key ID the secret access key
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
- en: On the **Access Rights** tab of the Credential, set **Security Roles** to **All
    Roles**, **Processes (legacy)** to **All Process** and **Resources (legacy)**
    to **All Resources**. While this is not best practice, we’re only doing this for
    testing purposes.
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Test the AWS Comprehend object
  id: totrans-239
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Finally, let’s test out the DX asset and make a prediction! Notice in the test
    Process that the Actions use the *Object* and not the Web API Service. Using the
    Web API Service directly wouldn’t work since it doesn’t contain the authentication
    parts. Take the following steps:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
- en: Open `Example 1 - Test AWS Comprehend` Process in the `Ch1` Group in the Process
    Studio. This Process also requires the `Utility – General` VBO to be imported.
    This can be found in the `VBO` sub-folder where BP is installed.
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the Process in the Process Studio. This Process makes three API calls:
    1) detect entities, 2) find key phrases, and 3) detect sentiment. If successful,
    the three Collections on the `Main Page` in the **Predictions** Block are populated.'
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.12 – The three predicted Collections from the three API calls](img/B18416_01_12.jpg)'
  id: totrans-243
  prefs: []
  type: TYPE_IMG
- en: Figure 1.12 – The three predicted Collections from the three API calls
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
- en: 'Viewing the `Entities Response` Collection shows that AWS’s generic model can
    extract the email and phone model number:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.13 – The phone model and customer ID are extracted as entities](img/B18416_01_13.jpg)'
  id: totrans-246
  prefs: []
  type: TYPE_IMG
- en: Figure 1.13 – The phone model and customer ID are extracted as entities
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
- en: Even without a custom model to classify emails to the exact label, Comprehend’s
    pre-trained model is able to extract high-level information that can simplify
    the work of a customer support agent. We also see that the predictions come with
    a **Score**. This confidence score will be used as a design element for IA solutions
    in *Part 2* of this book.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
- en: In this example, we used AWS Comprehend to extract data from unstructured text.
    Since AWS uses a custom authentication scheme, the DX asset comes packaged with
    both a Web API Service and an Object. Normally, dealing with authentication is
    complex, but the object handles everything for us. After importing the asset,
    we only need to set up a Credential to get things working. That’s how easy it
    is to connect BP with AWS’ Comprehend APIs.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
- en: Let’s move on to our next example, which uses Azure.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
- en: Example 2 – Azure Form Recognizer for invoice extraction
  id: totrans-251
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Azure’s Form Recognizer contains pre-built models that allow you to extract
    data from receipts, invoices, tax forms, business cards, and generic documents.
    Extracting data from invoices and receipts in usable formats *is a very common
    IA use case*. It’s so common that BP and most other RPA vendors have products
    specifically targeting invoice extraction. More information about BP’s document
    extraction product, Decipher, can be found in the last chapter of this book. A
    free pricing tier of Form Recognizer is available for testing.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
- en: 'The invoice used in this example can be downloaded here for reference: [https://github.com/PacktPublishing/Intelligent-Automation-with-Blue-Prism/blob/main/ch1/ex2_invoice.pdf](https://github.com/PacktPublishing/Intelligent-Automation-with-Blue-Prism/blob/main/ch1/ex2_invoice.pdf)'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
- en: This PDF is directly embedded into this example’s process as a binary Data Item,
    so downloading this is optional.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
- en: You can also build custom models inside of Form Recognizer to recognize your
    specific type of document, e.g., a bank or credit card statement. These custom
    models can unlock even more use cases for your business and be invoked by BP using
    the DX asset used in this example.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
- en: There are two major differences between this Azure API and AWS Comprehend beyond
    the APIs purpose. The first difference is the *authentication* scheme used. For
    Azure, we only need to pass in a subscription key together with every request.
    This is simpler than AWS, which requires a separate object to refresh the temporary
    access token. Unlike AWS Comprehend, the Form Recognizer calls are *asynchronous*,
    requiring you to repeatedly check whether the prediction is complete.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
- en: The DX asset for Form Recognizer is stored as a `.bprelease` file and contains
    one BP Object. This is different from most other web APIs available on the DX,
    which come packaged as a `.bpskill` file and appear in the **System** | **Objects**
    | **Web API Services** section of BP.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
- en: Form Recognizer was chosen as one of the examples because form processing is
    also a primary IA use case. The DX asset for Form Recognizer also shows a different
    way of implementing a web API connector that you can consider—implementing it
    directly as an object using the HTTP and JSON VBO instead of a Web API Service.
    Implementing as an Object allows companies running older versions of BP (< V6.4)
    to call web APIs.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
- en: 'In this example, we will be performing four high-level steps:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
- en: Downloading the asset from GitHub (or the DX)
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Importing the asset into BP
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configuring the Form Recognizer object
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Testing the API call by making a prediction
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Downloading from the DX
  id: totrans-264
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Important note
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft has changed the URL endpoints since the Form Recognizer asset on the
    DX was released. As a result, the asset that’s on the DX won’t work without changing
    the URLs in it. An already modified release is provided at [https://github.com/PacktPublishing/Intelligent-Automation-with-Blue-Prism/blob/main/ch1/Ex_2_Azure_Form_Recognizer_Client_Service.bprelease](https://github.com/PacktPublishing/Intelligent-Automation-with-Blue-Prism/blob/main/ch1/Ex_2_Azure_Form_Recognizer_Client_Service.bprelease).
    I recommend downloading this GitHub version and not the version on the DX.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
- en: 'Although we won’t be downloading the asset from the DX, we still need to download
    the documentation so that the Azure API can be configured. Here, we will visit
    the DX ([https://digitalexchange.blueprism.com/dx/search](https://digitalexchange.blueprism.com/dx/search))
    to download the documentation:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
- en: Type in `form recognizer client` (capitalization doesn’t matter) into the DX
    search bar and search. Click on the **Form Recognizer** **Client** asset.
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Scroll down further on the **Connector for Form Recognizer Client – 1.0.0**
    page and download the **User Guide**.
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.14 – Download the asset and the user guide](img/B18416_01_14.jpg)'
  id: totrans-270
  prefs: []
  type: TYPE_IMG
- en: Figure 1.14 – Download the asset and the user guide
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
- en: 'The user guide provides details on how to set up your Azure account to allow
    for API calls from BP. Please follow the steps in the guide to properly set up
    Azure. The guide also lists two other VBOs that must be imported into BP: the
    `Utility - JSON` and `Utility – HTTP` VBOs. These are both included in the previous
    GitHub link. If you wish to download them separately, they are also available
    from the DX.'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
- en: Importing into BP
  id: totrans-274
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'After downloading the asset, it must be imported into BP. This step is the
    same regardless of whether you’ve downloaded the asset from the DX or from GitHub:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
- en: Open BP and log in. Click **File** | **Import** | **Release / Skill** and import
    the asset.
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Verify that the `Form Recognizer Client Service` Object is present. Also verify
    that the correct versions of the HTTP and JSON VBOs as present, as required by
    the user guide.
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.15 – Verifying that the three Objects are present](img/B18416_01_15.jpg)'
  id: totrans-278
  prefs: []
  type: TYPE_IMG
- en: Figure 1.15 – Verifying that the three Objects are present
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the Form Recognizer Client Service object
  id: totrans-280
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The author of the DX asset has opted to store the authentication IDs as Data
    Items in the Object. This is *not a best practice*, as these should be stored
    as a Credential instead. But since this is how the Object was designed, let’s
    edit those Data Items to configure the authentication details needed to connect
    to the web API. If you don’t have a subscription key, please follow the asset
    documentation and create one.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
- en: The access token and base URL needed to configure the Object can be obtained
    from the **Form Recognizer** page on Azure’s website. The user guide shown in
    *Figure 1**.15* has more details on how to find this page.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
- en: Open the `Form Recognizer Client Service` Object in the Object Studio. On the
    `Access Token` Collection and a `Base URL` Data Item that needs to be populated.
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.16 – Populating Access Token and Base URL on the Initialise Page](img/B18416_01_16.jpg)'
  id: totrans-285
  prefs: []
  type: TYPE_IMG
- en: Figure 1.16 – Populating Access Token and Base URL on the Initialise Page
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
- en: Open the `Access Token` Collection and click on the **Initial Values** tab.
    Fill in the **Ocp-Apim-Subscription-Key** field with your subscription key and
    save.
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.17 – Filling the subscription key into the access token](img/B18416_01_17.jpg)'
  id: totrans-288
  prefs: []
  type: TYPE_IMG
- en: Figure 1.17 – Filling the subscription key into the access token
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
- en: Open the `Base URL` Data Item and set the **Initial Value** to the endpoint
    URL from Azure’s website. Do not include a trailing slash at the end of the URL.
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.18 – Filling in the Base URL without a trailing slash](img/B18416_01_18.jpg)'
  id: totrans-291
  prefs: []
  type: TYPE_IMG
- en: Figure 1.18 – Filling in the Base URL without a trailing slash
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
- en: Now that we’ve configured the Azure Object, we can test it out.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
- en: Testing the Form Recognizer Client Service object
  id: totrans-294
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A test Process is included in the Release file imported in the *Technical requirements*
    section at the beginning of the chapter. This process requires `Utility – General`
    and `Utility – File Management` to be imported. Both can be found in the `VBO`
    sub-folder of the installation folder.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
- en: Open `Example 2 – Test Azure Form Recognizer Client Service` Process in the
    `Ch1` Group in the Process Studio.
  id: totrans-296
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the Process in the Process Studio. This process makes at least two API calls.
    The first call sends the invoice file to request processing. This gives a **Result
    ID** in return. The second API call checks up to six times whether the *asynchronous*
    ML prediction is finished by referencing the **Result ID**. When the prediction
    is complete, the Collections and Data Item in the **Predictions** Block will become
    populated. You can verify that the extracted contents closely match the actual
    PDF document.
  id: totrans-297
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.19 – Predictions from the Azure invoice Form Recognizer](img/B18416_01_19.jpg)'
  id: totrans-298
  prefs: []
  type: TYPE_IMG
- en: Figure 1.19 – Predictions from the Azure invoice Form Recognizer
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
- en: Now we’ve seen two examples with two different types of web API authentication,
    as well as synchronous and asynchronous API calling cases. In the final example
    of this chapter, we will be creating a web API service from scratch for batch
    PDF processing in GCP.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
- en: Example 3 – GCP Cloud Vision batch OCR processing
  id: totrans-301
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Cloud Vision from Google Cloud allows you to extract labels and text from images.
    In IA, this is most commonly used for the OCR of image-based text, such as photographs
    of documents and receipts. If documents are scanned, GCP recommends using its
    Document AI service instead. In this example, we’ll be extracting text from an
    image-based PDF with a small amount of handwriting on it. We’ll also be showing
    off a synchronous batch case where five PDF pages of an image-based document are
    processed at once and the predicted results for those five pages are received
    in the same request.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
- en: The open source PDF document used in this example can be found at [https://github.com/PacktPublishing/Intelligent-Automation-with-Blue-Prism/blob/main/ch1/ex3_pdf.pdf](https://github.com/PacktPublishing/Intelligent-Automation-with-Blue-Prism/blob/main/ch1/ex3_pdf.pdf).
    This PDF is already embedded into the test Process as a Binary Data Item, so downloading
    it is optional.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
- en: GCP uses OAuth2 for authentication, which is also a temporary access token method,
    similar to what AWS Comprehend does in the first example. The difference between
    OAuth2 and AWS’s methods is that AWS’ authentication is proprietary. OAuth2 is
    an open standard adopted by many vendors, and BP’s Web API Services feature can
    handle it directly. No Object wrapper will be needed, unlike in the AWS Comprehend
    case.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
- en: In this third example, we’ll be building a web API from scratch. There’s no
    DX asset for the API endpoint that we’ll be using. A key skill needed to build
    a web API from scratch is the ability to carefully read and understand the vendor’s
    API documentation. The relevant parts of GCP’s API documentation will be shown
    alongside the BP Web API Service configuration for reference.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
- en: 'This example has very different steps compared to the two previous examples.
    At a high level, we will be performing four steps:'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
- en: Visiting the GCP website to set up the keys needed for API authentication
  id: totrans-307
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Saving the API authentication keys into a Credential
  id: totrans-308
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating a Web API Service in BP
  id: totrans-309
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Testing the web API by making a prediction
  id: totrans-310
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Setting up a service account and key
  id: totrans-311
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This section contains steps that are performed on GCP’s website. The purpose
    is to generate authentication credentials that can be downloaded and used inside
    of a BP Web API Service. If these steps become outdated, please use the link in
    *step 1* as a reference instead:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
- en: Visit [https://cloud.google.com/iam/docs/service-accounts-create#creating_a_service_account](https://cloud.google.com/iam/docs/service-accounts-create#creating_a_service_account)
    and follow the instructions to create your service account. Ensure that your service
    account has permission to access the *Vision API*.
  id: totrans-313
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a key for your service account. Under the **Service Accounts** section
    of **IAM & Admin**, click on the **KEYS** tab and then **ADD KEY**:'
  id: totrans-314
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.20 – Creating a key for your service account](img/B18416_01_20.jpg)'
  id: totrans-315
  prefs: []
  type: TYPE_IMG
- en: Figure 1.20 – Creating a key for your service account
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
- en: 'Choose **JSON** as the **Key type** and press **CREATE**:'
  id: totrans-317
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.21 – Creating a JSON key](img/B18416_01_21.jpg)'
  id: totrans-318
  prefs: []
  type: TYPE_IMG
- en: Figure 1.21 – Creating a JSON key
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
- en: Download the JSON file that appears after pressing **CREATE**.
  id: totrans-320
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Saving the service account email and private key as a Credential
  id: totrans-321
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We’ve created authentication credentials and downloaded them in JSON format.
    Now we need to save the relevant information into a BP credential:'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
- en: Open the JSON file in any text editor. You’ll see a `private_key` row. Copy
    everything between the two double quotation marks into your clipboard. This is
    referred to as the **Client Secret** in GCP documentation.
  id: totrans-323
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-324
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Visit **System** | **Security** | **Credentials** in BP. Click **New** to create
    a new Credential.
  id: totrans-325
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Set the `GCP Cloud Vision`. Set the **Type** to **OAuth 2.0 (JWT Bearer Token)**.
    Set **Issuer** to the service account email address, and for **Private Key**,
    paste what was copied in *step 1*:'
  id: totrans-326
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.22 – Saving the credential with information from the GCP Portal](img/B18416_01_22.jpg)'
  id: totrans-327
  prefs: []
  type: TYPE_IMG
- en: Figure 1.22 – Saving the credential with information from the GCP Portal
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **Access Rights** tab of the Credential. Set **Security Roles**
    to **All Roles**, **Processes (legacy)** to **All Process**, and **Resources (legacy)**
    to **All Resources**. While this isn’t best practice, we’re only testing and not
    deploying something to production. Save the credential.
  id: totrans-329
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating a Web API Service
  id: totrans-330
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Here, we will be creating a Web API Service from scratch. Google’s API documentation
    ([https://cloud.google.com/vision/docs/file-small-batch](https://cloud.google.com/vision/docs/file-small-batch))
    will be consulted frequently during this exercise.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
- en: One key tip to consider while building a web API from scratch is to see whether
    the vendor has a *different* service already available on the DX. If so, download
    it, import it, and use it as a reference. Each vendor tries to keep its APIs internally
    consistent. Within a vendor, their APIs are likely using the same authentication
    methods and have similar JSON structures for their inputs and outputs. You’ll
    likely be able to copy parts of a working Web API Service into your own!
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
- en: Visit **System** | **Objects** | **Web API Services**. Click on **Add Service**.
  id: totrans-333
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Set `Google Cloud Vision Batch Annotation Online`. This is an arbitrary name
    that will show up as a selectable option in an Action Stage. Set **Base URL**
    to [https://vision.googleapis.com/](https://vision.googleapis.com/), including
    the trailing slash. At the end of this step, your web API should look like this:'
  id: totrans-334
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.23 – Setting the Name and Base URL](img/B18416_01_23.jpg)'
  id: totrans-335
  prefs: []
  type: TYPE_IMG
- en: Figure 1.23 – Setting the Name and Base URL
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
- en: 'The base URL is taken from GCP’s documentation:'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.24 – The base URL from GCP’s documentation](img/B18416_01_24.jpg)'
  id: totrans-338
  prefs: []
  type: TYPE_IMG
- en: Figure 1.24 – The base URL from GCP’s documentation
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on `Content-Type` and `application/json; charset=utf-8`. The **Common
    Headers** section should look like this:'
  id: totrans-340
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.25 – Setting the common headers](img/B18416_01_25.jpg)'
  id: totrans-341
  prefs: []
  type: TYPE_IMG
- en: Figure 1.25 – Setting the common headers
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
- en: 'These common headers are taken from the sample API request shown in GCP’s documentation:'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.26 – The headers from GCP’s documentation (the other headers can
    be ignored)](img/B18416_01_26.jpg)'
  id: totrans-344
  prefs: []
  type: TYPE_IMG
- en: Figure 1.26 – The headers from GCP’s documentation (the other headers can be
    ignored)
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
- en: Click on `GCP Cloud Vision`, which was created in *step 2* in the *Saving the
    service account email and private key as a credential* section. Untick the **Expose
    to** **Process** box.
  id: totrans-346
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Important note
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
- en: The token endpoint data is taken from [https://accounts.google.com/.well-known/openid-configuration](https://accounts.google.com/.well-known/openid-configuration)
    and the scope endpoint is taken from [https://developers.google.com/oauthplayground](https://developers.google.com/oauthplayground).
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
- en: 'The **Common Authentication** section should look like this:'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.27 – Setting the common authentication](img/B18416_01_27.jpg)'
  id: totrans-350
  prefs: []
  type: TYPE_IMG
- en: Figure 1.27 – Setting the common authentication
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on `Annotate Batch`. This is the name of the Action that will appear
    as selectable in BP. Each Action is equivalent to one web API endpoint. At the
    end of this step, your **Action** section should look like this:'
  id: totrans-352
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.28 – Creating an action](img/B18416_01_28.jpg)'
  id: totrans-353
  prefs: []
  type: TYPE_IMG
- en: Figure 1.28 – Creating an action
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on `mimeType`, `pages,` and `content`. Leave **Initial Value** blank
    and tick the **Expose** box for all three. At the end of this step, your **Parameters**
    section should look like this:'
  id: totrans-355
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.29 – Setting the action parameters](img/B18416_01_29.jpg)'
  id: totrans-356
  prefs: []
  type: TYPE_IMG
- en: Figure 1.29 – Setting the action parameters
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
- en: These three parameters were taken from GCP’s examples of what they expect to
    receive in the request JSON body. We’re exposing these as the input parameters
    of our web API so that they can be passed in and changed according to the needs
    of the Process.
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.30 – The parameters from GCP’s documentation](img/B18416_01_30.jpg)'
  id: totrans-359
  prefs: []
  type: TYPE_IMG
- en: Figure 1.30 – The parameters from GCP’s documentation
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on `/v1/files:annotate`, and **Body Content** to **Template**. Inside
    the **Template** text box, put in the following:'
  id: totrans-361
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-362
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Notice that we’ve inserted our parameters into the template using `[parameter
    name]`, similar to BP data items. Some areas of the `[[`) .This is how we can
    escape the square opening bracket character. We’ve also *hardcoded* the type of
    extraction to be `DOCUMENT_TEXT_DETECTION` and `LABEL_DETECTION`.
  id: totrans-363
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'What this section does is set up the exact JSON structure that will be sent
    to the API endpoint. We want this structure to match up with *Figure 1**.30* exactly.
    At the end of this step, the **Request** section should look like this:'
  id: totrans-364
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 1.31 – Set the request](img/B18416_01_31.jpg)'
  id: totrans-365
  prefs: []
  type: TYPE_IMG
- en: Figure 1.31 – Set the request
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on `responses`, `$.responses`. This part defines what the web API sends
    back to the Action as Output Parameters. In our case, we’re just going to save
    the entire JSON response as a Collection. At the end of this step, your **Response**
    configuration should look like this:'
  id: totrans-367
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.32 – Setting the response](img/B18416_01_32.jpg)'
  id: totrans-368
  prefs: []
  type: TYPE_IMG
- en: Figure 1.32 – Setting the response
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
- en: 'Our single output `responses` Collection is equivalent to the highlighted item
    in the sample response output of GCP’s documentation:'
  id: totrans-370
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.33 – The response from GCP’s documentation](img/B18416_01_33.jpg)'
  id: totrans-371
  prefs: []
  type: TYPE_IMG
- en: Figure 1.33 – The response from GCP’s documentation
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
- en: Save the Web API Service.
  id: totrans-373
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now we’ve completed the setup of a new web API. Let’s test it out with a Process.
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
- en: Testing the batch image Web API Service
  id: totrans-375
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The sample Process should have been imported from the *Technical requirements*
    section. We also need to import an additional VBO to convert our PDF file into
    Base64 format, which is a requirement of the GCP Vision API:'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
- en: Download and import the `Utility – File Manipulation` asset from the DX at [https://digitalexchange.blueprism.com/dx/entry/9648/solution/utility---file-manipulation](https://digitalexchange.blueprism.com/dx/entry/9648/solution/utility---file-manipulation).
    This is used to convert the PDF file into the Base64 format.
  id: totrans-377
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open `Example 3 – Test GCP Batch PDF` Process in the `Ch1` Group in the Process
    Studio.
  id: totrans-378
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the Process in the Process Studio. This Process makes one API call, which
    processes five PDF pages in a batch. The call is synchronous, as the predictions
    for the five pages are returned in the same call as the request. Once this is
    successful, the Collections and Data Item in the **Predictions** Block will become
    populated:'
  id: totrans-379
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.34 – Predictions from the newly created web API](img/B18416_01_34.jpg)'
  id: totrans-380
  prefs: []
  type: TYPE_IMG
- en: Figure 1.34 – Predictions from the newly created web API
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
- en: In this third example, we looked at a batch/synchronous processing case for
    extracting text from documents. We also built a Web API Service that uses OAuth2
    authentication from scratch. This was an exercise in inputting existing API information
    into the right sections of BP’s Web API Service. In the sample Process, we also
    used Base64 to encode the PDF file so that it could be sent as plain text in the
    API request body.
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-383
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we discussed the DX and how web API connectors can be downloaded
    to greatly speed up our development time. When using a web API, the areas that
    people frequently get stuck on include authentication and correctly mapping the
    input and output JSON data according to the vendor’s API documentation.
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
- en: ML web APIs also differ in two areas that affects IA solution design. These
    are single versus batch and synchronous versus asynchronous predictions. We’ll
    revisit these characteristics later in the book.
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we looked at four major MLaaS vendors: AWS, Azure, GCP, and IBM. We explored
    what ML web APIs they have available on the DX. Each vendor uses marketing names
    for its services, obscuring what those services actually do. I’ve grouped and
    summarized what the services behind the marketing names actually do, provided
    search terms you can use to find them on the DX, and given you ideas on what use
    cases they can fulfill.'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we went through three hands-on examples. Different vendors, API implementation
    methods, authentication methods, and use cases were selected to cover most of
    the scenarios you’ll encounter in real life. The vast majority of real-life IA
    examples I’ve found during my research have to do with text processing. Our examples
    showed three different IA text cases: extracting data from *unstructured text*,
    extracting data from *forms*, and extracting text from *images*.'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will move away from calling ML predictions from web
    APIs and look more at how BP can call models directly from the Digital Worker’s
    command line interface.
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
