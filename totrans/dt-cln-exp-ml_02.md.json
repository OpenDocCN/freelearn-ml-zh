["```py\n    import pandas as pd\n    import numpy as np\n    nls97 = pd.read_csv(\"data/nls97.csv\")\n    nls97.set_index(\"personid\", inplace=True)\n    ```", "```py\n    democols = ['gender','birthyear','maritalstatus',\n     'weeksworked16','wageincome','highestdegree']\n    nls97demo = nls97[democols]\n    nls97demo.index.name\n    'personid'\n    ```", "```py\n    nls97demo[1000:1004].T\n    personid      195884       195891        195970\\\n    gender        Male         Male          Female\n    birthyear     1981         1980          1982\n    maritalstatus NaN          Never-married Never-married\n    weeksworked16 NaN          53            53\n    wageincome    NaN          14,000        52,000   \n    highestdegree 4.Bachelors  2.High School 4.Bachelors\n    personid       195996  \n    gender         Female  \n    birthyear      1980  \n    maritalstatus  NaN  \n    weeksworked16  NaN  \n    wageincome     NaN\n    highestdegree  3.Associates    \n    ```", "```py\n    nls97demo[1000:1004:2].T\n    personid        195884       195970\n    gender          Male         Female\n    birthyear       1981         1982\n    maritalstatus   NaN          Never-married\n    weeksworked16   NaN          53\n    wageincome      NaN          52,000\n    highestdegree   4.Bachelors  4\\. Bachelors\n    ```", "```py\n    nls97demo[:3].T\n    personid       100061         100139          100284\n    gender         Female         Male            Male\n    birthyear      1980           1983            1984\n    maritalstatus  Married        Married         Never-married\n    weeksworked16  48             53              47\n    wageincome     12,500         120,000         58,000\n    highestdegree  2.High School  2\\. High School  0.None\n    nls97demo.head(3).T\n    personid       100061         100139         100284\n    gender         Female         Male           Male\n    birthyear      1980           1983           1984\n    maritalstatus  Married        Married        Never-married\n    weeksworked16  48             53             47\n    wageincome     12,500         120,000        58,000\n    highestdegree  2.High School  2.High School  0\\. None\n    ```", "```py\n     nls97demo[-3:].T\n    personid       999543          999698        999963\n    gender         Female         Female         Female\n    birthyear      1984           1983           1982\n    maritalstatus  Divorced       Never-married  Married\n    weeksworked16  0              0              53\n    wageincome     NaN            NaN            50,000\n    highestdegree  2.High School  2.High School  4\\. Bachelors\n     nls97demo.tail(3).T\n    personid       999543         999698         999963\n    gender         Female         Female         Female\n    birthyear      1984           1983           1982\n    maritalstatus  Divorced       Never-married  Married\n    weeksworked16  0              0              53\n    wageincome     NaN            NaN            50,000\n    highestdegree  2.High School  2.High School  4\\. Bachelors\n    ```", "```py\n     nls97demo.loc[[195884,195891,195970]].T\n    personid       195884       195891         195970\n    gender         Male         Male           Female\n    birthyear      1981         1980           1982\n    maritalstatus  NaN          Never-married  Never-married\n    weeksworked16  NaN          53             53\n    wageincome     NaN          14,000         52,000\n    highestdegree  4.Bachelors  2.High School  4.Bachelors\n     nls97demo.loc[195884:195970].T\n    personid       195884       195891         195970\n    gender         Male         Male           Female\n    birthyear      1981         1980           1982\n    maritalstatus  NaN          Never-married  Never-married\n    weeksworked16  NaN          53             53\n    wageincome     NaN          14,000         52,000\n    highestdegree  4.Bachelors  2.High School  4.Bachelors\n    ```", "```py\n     nls97demo.iloc[[0,1,2]].T\n    personid       100061         100139         100284\n    gender         Female         Male           Male\n    birthyear      1980           1983           1984\n    maritalstatus  Married        Married        Never-married\n    weeksworked16  48             53             47\n    wageincome     12,500         120,000        58,000\n    highestdegree  2.High School  2.High School  0\\. None\n     nls97demo.iloc[0:3].T\n    personid       100061         100139         100284\n    gender         Female         Male           Male\n    birthyear      1980           1983           1984\n    maritalstatus  Married        Married        Never-married\n    weeksworked16  48             53             47\n    wageincome     12,500         120,000        58,000\n    highestdegree  2.High School  2.High School  0\\. None\n     nls97demo.iloc[-3:].T\n    personid       999543         999698         999963\n    gender         Female         Female         Female\n    birthyear      1984           1983           1982\n    maritalstatus  Divorced       Never-married  Married\n    weeksworked16  0              0              53\n    wageincome     NaN            NaN            50,000\n    highestdegree  2.High School  2.High School  4\\. Bachelors\n    ```", "```py\n    nls97.nightlyhrssleep.head()\n    personid\n    100061     6\n    100139     8\n    100284     7\n    100292     nan\n    100583     6\n    Name: nightlyhrssleep, dtype: float64\n    lowsleepthreshold = nls97.nightlyhrssleep.quantile(0.33)\n    lowsleepthreshold\n    6.0\n    sleepcheckbool = nls97.nightlyhrssleep<=lowsleepthreshold\n    sleepcheckbool.head()\n    personid\n    100061    True\n    100139    False\n    100284    False\n    100292    False\n    100583    True\n    Name: nightlyhrssleep, dtype: bool\n    sleepcheckbool.index.equals(nls97.index)\n    True\n    ```", "```py\nlowsleep = nls97.loc[sleepcheckbool]\nlowsleep.shape\n(3067, 88)\n```", "```py\n    lowsleep = nls97.loc[nls97.nightlyhrssleep<=lowsleepthreshold]\n    lowsleep.shape\n    (3067, 88)\n    ```", "```py\n    lowsleep3pluschildren = \\\n      nls97.loc[(nls97.nightlyhrssleep<=lowsleepthreshold)\n        & (nls97.childathome>=3)]\n    lowsleep3pluschildren.shape\n    (623, 88)\n    ```", "```py\n    lowsleep3pluschildren = \\\n      nls97.loc[(nls97.nightlyhrssleep<=lowsleepthreshold)\n        & (nls97.childathome>=3),\n        ['nightlyhrssleep','childathome']]\n    lowsleep3pluschildren.shape\n    (623, 2)\n    ```", "```py\n    nls97 = pd.read_csv(\"data/nls97.csv\")\n    nls97.set_index(\"personid\", inplace=True)\n    nls97abb = nls97.iloc[:,:20]\n    nls97abb.dtypes\n    loc and iloc accessors. The colon to the left of the comma indicates that we want all the rows, while :20 to the right of the comma gets us the first 20 columns.\n    ```", "```py\n    nls97abb.maritalstatus.value_counts(dropna=False)\n    Married          3066\n    Never-married    2766\n    NaN              2312\n    Divorced         663\n    Separated        154\n    Widowed          23\n    Name: maritalstatus, dtype: int64\n    ```", "```py\n    nls97abb.maritalstatus.isnull().sum()\n    2312\n    ```", "```py\n    marstatcnt = nls97abb.maritalstatus.value_counts(dropna=False)\n    type(marstatcnt)\n    <class 'pandas.core.series.Series'>\n    marstatcnt.index\n    Index(['Married', 'Never-married', nan, 'Divorced', 'Separated', 'Widowed'], dtype='object')\n    ```", "```py\n    marstatcnt.sort_index()\n    Divorced         663\n    Married          3066\n    Never-married    2766\n    Separated        154\n    Widowed          23\n    NaN              2312\n    Name: maritalstatus, dtype: int64\n    ```", "```py\n    nls97.maritalstatus.\\\n      value_counts(normalize=True, dropna=False).\\\n         sort_index()\n\n    Divorced             0.07\n    Married              0.34\n    Never-married        0.31\n    Separated            0.02\n    Widowed              0.00\n    NaN                  0.26\n    Name: maritalstatus, dtype: float64\n    ```", "```py\n    catcols = nls97abb.select_dtypes(include=[\"object\"]).columns\n    for col in nls97abb[catcols].columns:\n    ...      nls97abb[col] = nls97abb[col].astype('category')\n    ... \n    nls97abb[catcols].dtypes\n    gender                   category\n    maritalstatus            category\n    weeklyhrscomputer        category\n    weeklyhrstv              category\n    highestdegree            category\n    govprovidejobs           category\n    govpricecontrols         category\n    dtype: object\n    ```", "```py\n    nls97abb[catcols].isnull().sum()\n    gender               0\n    maritalstatus        2312\n    weeklyhrscomputer    2274\n    weeklyhrstv          2273\n    highestdegree        31\n    govprovidejobs       7151\n    govpricecontrols     7125\n    dtype: int64\n    ```", "```py\n     nls97abb.filter(like=\"gov\").apply(pd.value_counts, normalize=True)\n                     govprovidejobs    govpricecontrols\n    1\\. Definitely              0.25                0.54\n    2\\. Probably                0.34                0.33\n    3\\. Probably not            0.25                0.09\n    4\\. Definitely not          0.16                0.04\n    ```", "```py\n     nls97abb.loc[nls97abb.maritalstatus==\"Married\"].\\\n     filter(like=\"gov\").\\\n       apply(pd.value_counts, normalize=True)\n                     govprovidejobs    govpricecontrols\n    1\\. Definitely              0.17                0.46\n    2\\. Probably                0.33                0.38\n    3\\. Probably not            0.31                0.11\n    4\\. Definitely not          0.18                0.05\n    ```", "```py\n     nls97abb.loc[nls97abb.maritalstatus==\"Married\",\n       ['govprovidejobs','govpricecontrols']].\\\n       apply(pd.value_counts, normalize=True)\n                      govprovidejobs     govpricecontrols\n    1\\. Definitely               0.17                 0.46\n    2\\. Probably                 0.33                 0.38\n    3\\. Probably not             0.31                 0.11\n    4\\. Definitely not           0.18                 0.05\n    ```", "```py\n    nls97abb.highestgradecompleted.\\\n      replace(95, np.nan, inplace=True)\n    ```", "```py\n    nls97abb['highschoolgrad'] = \\\n      np.where(nls97abb.highestgradecompleted.isnull(),np.nan, \\\n      np.where(nls97abb.highestgradecompleted<12,0,1))\n\n    nls97abb.groupby(['highschoolgrad'], dropna=False) \\\n      ['highestgradecompleted'].agg(['min','max','size'])\n                      min       max       size\n    highschoolgrad                \n    0                   5        11       1231\n    1                  12        20       5421\n    nan               nan       nan       2332\n     nls97abb['highschoolgrad'] = \\\n    ...  nls97abb['highschoolgrad'].astype('category')\n    ```", "```py\n    nls97abb['highgradegroup'] = \\\n      pd.qcut(nls97abb['highestgradecompleted'], \n       q=6, labels=[1,2,3,4,5,6])\n\n    nls97abb.groupby(['highgradegroup'])['highestgradecompleted'].\\\n        agg(['min','max','size'])\n                      min         max      size\n    highgradegroup                \n    1                   5          11       1231\n    2                  12          12       1389\n    3                  13          14       1288\n    4                  15          16       1413\n    5                  17          17        388\n    6                  18          20        943\n    nls97abb['highgradegroup'] = \\\n        nls97abb['highgradegroup'].astype('category')\n    ```", "```py\n     freqout = open('views/frequencies.txt', 'w') \n     for col in nls97abb.select_dtypes(include=[\"category\"]):\n          print(col, \"----------------------\",\n            \"frequencies\",\n          nls97abb[col].value_counts(dropna=False).sort_index(),\n            \"percentages\",\n          nls97abb[col].value_counts(normalize=True).\\\n            sort_index(),\n          sep=\"\\n\\n\", end=\"\\n\\n\\n\", file=freqout)\n\n     freqout.close()\n    ```", "```py\n    import pandas as pd\n    import numpy as np\n    import scipy.stats as scistat\n    covidtotals = pd.read_csv(\"data/covidtotals.csv\",\n        parse_dates=['lastdate'])\n    covidtotals.set_index(\"iso_code\", inplace=True)\n    covidtotals.shape\n    (221, 16)\n    covidtotals.index.nunique()\n    221\n    covidtotals.sample(2, random_state=6).T\n    iso_code                         ISL               CZE\n    lastdate                  2021-07-07        2021-07-07\n    location                     Iceland           Czechia\n    total_cases                    6,555         1,668,277\n    total_deaths                      29            30,311\n    total_cases_mill              19,209           155,783\n    total_deaths_mill                 85             2,830\n    population                   341,250        10,708,982\n    population_density                 3               137\n    median_age                        37                43\n    gdp_per_capita                46,483            32,606\n    aged_65_older                     14                19\n    total_tests_thous                NaN               NaN\n    life_expectancy                   83                79\n    hospital_beds_thous                3                 7\n    diabetes_prevalence                5                 7\n    region                Western Europe    Western Europe\n    ```", "```py\n    covidtotals.info()\n    <class 'pandas.core.frame.DataFrame'>\n    Index: 221 entries, AFG to ZWE\n    Data columns (total 16 columns):\n     #   Column             Non-Null Count         Dtype \n    ---  -------            --------------  --------------\n     0   lastdate             221 non-null  datetime64[ns]\n     1   location             221 non-null          object\n     2   total_cases          192 non-null         float64\n     3   total_deaths         185 non-null         float64\n     4   total_cases_mill     192 non-null         float64\n     5   total_deaths_mill    185 non-null         float64\n     6   population           221 non-null         float64\n     7   population_density   206 non-null         float64\n     8   median_age           190 non-null         float64\n     9   gdp_per_capita       193 non-null         float64\n     10  aged_65_older        188 non-null         float64\n     11  total_tests_thous     13 non-null         float64\n     12  life_expectancy      217 non-null         float64\n     13  hospital_beds_thous  170 non-null         float64\n     14  diabetes_prevalence  200 non-null         float64\n     15  region               221 non-null          object\n    dtypes: datetime64[ns](1), float64(13), object(2)\n    memory usage: 29.4+ KB\n    ```", "```py\n keyvars = ['location','total_cases_mill','total_deaths_mill',\n...  'aged_65_older','diabetes_prevalence']\n covidkeys = covidtotals[keyvars]\n covidkeys.describe()\ntotal_cases_mill total_deaths_mill aged_65_older diabetes_prevalence\ncount        192.00       185.00    188.00     200.00\nmean      36,649.37       683.14      8.61       8.44\nstd       41,403.98       861.73      6.12       4.89\nmin            8.52         0.35      1.14       0.99\n25%        2,499.75        43.99      3.50       5.34\n50%       19,525.73       293.50      6.22       7.20\n75%       64,834.62     1,087.89     13.92      10.61\nmax      181,466.38     5,876.01     27.05      30.53\n```", "```py\n     covidkeys.quantile(np.arange(0.0, 1.1, 0.1))\n          total_cases_mill  total_deaths_mill  aged_65_older  diabetes_prevalence\n    0.00         8.52       0.35       1.14     0.99\n    0.10       682.13      10.68       2.80     3.30\n    0.20     1,717.39      30.22       3.16     4.79\n    0.30     3,241.84      66.27       3.86     5.74\n    0.40     9,403.58      145.06      4.69     6.70\n    0.50     19,525.73     293.50      6.22     7.20\n    0.60     33,636.47     556.43      7.93     8.32\n    0.70     55,801.33     949.71     11.19    10.08\n    0.80     74,017.81    1,333.79    14.92    11.62\n    0.90     94,072.18    1,868.89    18.85    13.75\n    1.00    181,466.38    5,876.01    27.05    30.53\n    ```", "```py\n    covidkeys.skew()\n    total_cases_mill        1.21\n    total_deaths_mill       2.00\n    aged_65_older           0.84\n    diabetes_prevalence     1.52\n    dtype: float64\n     covidkeys.kurtosis()\n    total_cases_mill        0.91\n    total_deaths_mill       6.58\n    aged_65_older          -0.56\n    diabetes_prevalence     3.31\n    dtype: float64\n    ```", "```py\n    for var in keyvars[1:]:\n          stat, p = scistat.shapiro(covidkeys[var].dropna())\n          print(\"feature=\", var, \"     p-value=\", '{:.6f}'.format(p))\n\n    feature= total_cases_mill       p-value= 0.000000\n    feature= total_deaths_mill      p-value= 0.000000\n    feature= aged_65_older          p-value= 0.000000\n    feature= diabetes_prevalence    p-value= 0.000000\n    ```", "```py\n    import pandas as pd\n    import numpy as np\n    import matplotlib.pyplot as plt\n    import statsmodels.api as sm\n    covidtotals = pd.read_csv(\"data/covidtotals.csv\")\n    covidtotals.set_index(\"iso_code\", inplace=True)\n    keyvars = ['location','total_cases_mill','total_deaths_mill',\n      'aged_65_older','diabetes_prevalence','gdp_per_capita']\n    covidkeys = covidtotals[keyvars]\n    ```", "```py\n    thirdq, firstq = covidkeys.total_cases_mill.quantile(0.75), covidkeys.total_cases_mill.quantile(0.25)\n    interquartilerange = 1.5*(thirdq-firstq)\n    extvalhigh, extvallow = interquartilerange+thirdq, firstq-interquartilerange\n    print(extvallow, extvalhigh, sep=\" <--> \")\n    -91002.564625 <--> 158336.930375\n    ```", "```py\n    covidtotals.loc[covidtotals.total_cases_mill>extvalhigh].T\n    iso_code                   AND         MNE         SYC\n    lastdate            2021-07-07  2021-07-07  2021-07-07\n    location            Andorra     Montenegro  Seychelles\n    total_cases          14,021        100,392      16,304\n    total_deaths            127          1,619          71\n    total_cases_mill    181,466        159,844     165,792\n    total_deaths_mill     1,644          2,578         722\n    population           77,265        628,062      98,340\n    population_density      164             46         208\n    median_age              NaN             39          36\n    gdp_per_capita          NaN         16,409      26,382\n    aged_65_older           NaN             15           9\n    total_tests_thous       NaN            NaN         NaN\n    life_expectancy          84             77          73\n    hospital_beds_thous     NaN              4           4\n    diabetes_prevalence       8             10          11\n    region              Western        Eastern        East \n                         Europe         Europe      Africa\n    ```", "```py\n    covidtotals.mean()\n    total_cases               963,933\n    total_deaths              21,631\n    total_cases_mill          36,649\n    total_deaths_mill         683\n    population                35,134,957\n    population_density        453\n    median_age                30\n    gdp_per_capita            19,141\n    aged_65_older             9\n    total_tests_thous         535\n    life_expectancy           73\n    hospital_beds_thous       3\n    diabetes_prevalence       8 \n    ```", "```py\n    def getextremevalues(dfin):\n          dfout = pd.DataFrame(columns=dfin.columns, \n                               data=None)\n          for col in dfin.columns[1:]:\n            thirdq, firstq = dfin[col].quantile(0.75), \\\n              dfin[col].quantile(0.25)\n            interquartilerange = 1.5*(thirdq-firstq)\n            extvalhigh, extvallow = \\\n              interquartilerange+thirdq, \\\n              firstq-interquartilerange\n            df = dfin.loc[(dfin[col]>extvalhigh) | (dfin[col]<extvallow)]\n            df = df.assign(varname = col,\n              threshlow = extvallow,\n              threshhigh = extvalhigh)\n            dfout = pd.concat([dfout, df])\n        return dfout\n    ```", "```py\n    extremevalues = getextremevalues(covidkeys)\n    extremevalues.varname.value_counts()\n    gdp_per_capita         9\n    diabetes_prevalence    8\n    total_deaths_mill      4\n    total_cases_mill       3\n    Name: varname, dtype: int64\n    extremevalues.to_excel(\"views/extremevaluescases.xlsx\")\n    ```", "```py\n    extremevalues.loc[extremevalues.varname==\"total_deaths_mill\",\n        'threshhigh'][0]\n    2653.752\n    extremevalues.loc[extremevalues.varname==\"total_deaths_mill\",\n          keyvars].sort_values(['total_deaths_mill'], ascending=False)\n          location              total_cases_mill  total_deaths_mill\n    PER   Peru                    62,830            5,876\n    HUN   Hungary                 83,676            3,105\n    BIH   Bosnia and Herzegovina  62,499            2,947\n    CZE   Czechia                 155,783           2,830\n         _65_older  diabetes_prevalence  gdp_per_capita  \n    PER      7              6                12,237\n    HUN     19              8                26,778\n    BIH     17             10                11,714\n    CZE     19              7                32,606\n    ```", "```py\n    sm.qqplot(covidtotals[['total_cases_mill']]. \\\n      sort_values(['total_cases_mill']).dropna(),line='s')\n    )\n    plt.show()\n    ```", "```py\n    landtemps = pd.read_csv(\"data/landtemps2019avgs.csv\")\n    landtemps.avgtemp.describe(percentiles=[0.05, 0.1, 0.25, 0.5, 0.75, 0.9, 0.95])\n    count        12,095.0\n    mean             11.2\n    std               8.6\n    min             -60.8\n    5%               -0.7\n    10%               1.7\n    25%               5.4\n    50%              10.4\n    75%              16.9\n    90%              23.1\n    95%              27.0\n    max              33.9\n    Name: avgtemp, dtype: float64\n     landtemps.loc[landtemps.avgtemp<-25,'avgtemp'].count()\n    14\n    landtemps.avgtemp.skew()\n    -0.2678382583481768\n    landtemps.avgtemp.kurtosis()\n    2.1698313707061073\n    ```", "```py\n    sm.qqplot(landtemps.avgtemp.sort_values().dropna(), line='s')\n    plt.tight_layout()\n    plt.show()\n    ```", "```py\n    import pandas as pd\n    import numpy as np\n    import matplotlib.pyplot as plt\n    import seaborn as sns\n    landtemps = pd.read_csv(\"data/landtemps2019avgs.csv\")\n    covidtotals = pd.read_csv(\"data/covidtotals.csv\", parse_dates=[\"lastdate\"])\n    covidtotals.set_index(\"iso_code\", inplace=True)\n    ```", "```py\n    plt.hist(covidtotals['total_cases_mill'], bins=7)\n    plt.axvline(covidtotals.total_cases_mill.mean(), color='red',\n       linestyle='dashed', linewidth=1, label='mean')\n    plt.axvline(covidtotals.total_cases_mill.median(), color='black',\n       linestyle='dashed', linewidth=1, label='median')\n    plt.title(\"Total COVID Cases\")\n    plt.xlabel('Cases per Million')\n    plt.ylabel(\"Number of Countries\")\n    plt.legend()\n    plt.show()\n    ```", "```py\n    plt.hist(landtemps['avgtemp'])\n    plt.axvline(landtemps.avgtemp.mean(), color='red', linestyle='dashed', linewidth=1, label='mean')\n    plt.axvline(landtemps.avgtemp.median(), color='black', linestyle='dashed', linewidth=1, label='median')\n    plt.title(\"Average Land Temperatures\")\n    plt.xlabel('Average Temperature')\n    plt.ylabel(\"Number of Weather Stations\")\n    plt.legend()\n    plt.show()\n    ```", "```py\n     landtemps.loc[landtemps.avgtemp<-25,['station','country','avgtemp']].\\\n    ...  sort_values(['avgtemp'], ascending=True)\n          station               country          avgtemp\n    827   DOME_PLATEAU_DOME_A   Antarctica      -60.8\n    830   VOSTOK                Antarctica      -54.5\n    837   DOME_FUJI             Antarctica      -53.4\n    844   DOME_C_II             Antarctica      -50.5\n    853   AMUNDSEN_SCOTT        Antarctica      -48.4\n    842   NICO                  Antarctica      -48.4\n    804   HENRY                 Antarctica      -47.3\n    838   RELAY_STAT            Antarctica      -46.1\n    828   DOME_PLATEAU_EAGLE    Antarctica      -43.0\n    819   KOHNENEP9             Antarctica      -42.4\n    1299  FORT_ROSS             Canada          -30.3\n    1300  GATESHEAD_ISLAND      Canada          -28.7\n    811   BYRD_STATION          Antarctica      -25.8\n    816   GILL                  Antarctica      -25.5\n    ```", "```py\n    plt.boxplot(covidtotals.total_cases_mill.dropna(), labels=['Total Cases per Million'])\n    plt.annotate('Extreme Value Threshold', xy=(1.05,157000), xytext=(1.15,157000), size=7, arrowprops=dict(facecolor='black', headwidth=2, width=0.5, shrink=0.02))\n    plt.annotate('3rd quartile', xy=(1.08,64800), xytext=(1.15,64800), size=7, arrowprops=dict(facecolor='black', headwidth=2, width=0.5, shrink=0.02))\n    plt.annotate('Median', xy=(1.08,19500), xytext=(1.15,19500), size=7, arrowprops=dict(facecolor='black', headwidth=2, width=0.5, shrink=0.02))\n    plt.annotate('1st quartile', xy=(1.08,2500), xytext=(1.15,2500), size=7, arrowprops=dict(facecolor='black', headwidth=2, width=0.5, shrink=0.02))\n    plt.title(\"Boxplot of Total Cases\")\n    plt.show()\n    ```", "```py\n     plt.boxplot(landtemps.avgtemp.dropna(), labels=['Boxplot of Average Temperature'])\n     plt.title(\"Average Temperature\")\n     plt.show()\n    ```", "```py\n    import seaborn as sns\n    fig = plt.figure()\n    fig.suptitle(\"Violin Plots of COVID Cases and Land Temperatures\")\n    ax1 = plt.subplot(2,1,1)\n    ax1.set_xlabel(\"Cases per Million\")\n    sns.violinplot(data=covidtotals.total_cases_mill, color=\"lightblue\", orient=\"h\")\n    ax1.set_yticklabels([])\n    ax2 = plt.subplot(2,1,2)\n    ax2.set_xlabel(\"Average Temperature\")\n    sns.violinplot(data=landtemps.avgtemp, color=\"wheat\",  orient=\"h\")\n    ax2.set_yticklabels([])\n    plt.tight_layout()\n    plt.show()\n    ```"]