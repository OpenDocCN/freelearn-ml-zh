["```py\nfrom collections import Counter\nfrom sklearn.datasets import make_classification\nX, y = make_classification(n_samples=10000, n_features=2,\n    n_redundant=0, n_classes=2, flip_y=0,\n    n_clusters_per_class=2, class_sep=0.79,\n    weights=[0.99], random_state=81)\n```", "```py\nfrom imblearn.under_sampling import RandomUnderSampler\nrus = RandomUnderSampler(sampling_strategy=1.0, random_state=42)\nX_res, y_res = rus.fit_resample(X, y)\n```", "```py\nfrom imblearn.under_sampling import ClusterCentroids\ncc = ClusterCentroids(random_state=42)\nX_res, y_res = cc.fit_resample(X,y)\nprint('Resampled dataset shape %s' % Counter(y_res))\n```", "```py\nResampled dataset shape Counter({0: 100, 1: 100})\n```", "```py\nfrom imblearn.under_sampling import EditedNearestNeighbours\nenn = EditedNearestNeighbours(\n    sampling_strategy='auto', n_neighbors=200, kind_sel='all')\nX_res, y_res = enn.fit_resample(X, y)\nprint('Resampled dataset shape %s' % Counter(y_res))\n```", "```py\nResampled dataset shape Counter({0: 7852, 1: 100})\n```", "```py\nfrom imblearn.under_sampling import TomekLinks\ntklinks = TomekLinks(sampling_strategy='auto')\nX_res, y_res = tklinks.fit_resample(X, y)\nprint('Resampled dataset shape %s' % Counter(y_res))\n```", "```py\nResampled dataset shape Counter({0: 9875, 1: 100})\n```", "```py\nfrom imblearn.under_sampling import NeighbourhoodCleaningRule\nncr = NeighbourhoodCleaningRule(\n    sampling_strategy='auto', n_neighbors=200, threshold_cleaning=0.5)\nX_res, y_res = ncr.fit_resample(X, y)\nprint('Resampled dataset shape %s' % Counter(y_res))\n```", "```py\nResampled dataset shape Counter({0: 6710, 1: 100})\n```", "```py\nfrom imblearn.under_sampling import InstanceHardnessThreshold\nnm = InstanceHardnessThreshold(\n    sampling_strategy='auto', estimator=LogisticRegression())\nX_res, y_res = nm.fit_resample(X, y)\nprint('Resampled dataset shape %s' % Counter(y_res))\n```", "```py\nResampled dataset shape Counter({0: 100, 1: 100})\n```", "```py\nfrom imblearn.under_sampling import CondensedNearestNeighbour\ncnn = CondensedNearestNeighbour(random_state=42)\nX_res, y_res = cnn.fit_resample(X, y)\nprint('Resampled dataset shape %s' % Counter(y_res))\n```", "```py\nResampled dataset shape Counter({0: 198, 1: 100})\n```", "```py\nfrom imblearn.under_sampling import OneSidedSelection\noss = OneSidedSelection(random_state=0, n_seeds_S=10)\nX_res, y_res = oss.fit_resample(X, y)\nprint('Resampled dataset shape %s' % Counter(y_res))\n```", "```py\nResampled dataset shape Counter({0: 4276, 1: 100})\n```"]