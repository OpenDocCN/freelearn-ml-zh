["```py\n    <TabControl x: Name = \"tabControl\"\n                   HorizontalAlignment = \"Left\"\n                   VerticalAlignment = \"Top\"\n                   Width = \"810\" Height = \"520\">\n        <TabItem Header=\"Analysis\" Width=\"100\">\n            <controls:ImageAnalysisView />\n        </TabItem>\n        <TabItem Header=\"Description\" Width=\"100\">\n            <controls:DescriptionView />\n        </TabItem>\n        <TabItem Header=\"Celebs\" Width=\"100\">\n            <controls:CelebrityView />\n        </TabItem>\n        <TabItem Header=\"OCR\" Width=\"100\">\n            <controls:OcrView />\n        </TabItem>\n        <TabItem Header=\"Thumbnail\" Width=\"100\">\n            <controls:ThumbnailView />\n        </TabItem>\n    </TabControl>\n```", "```py\n    private IVisionServiceClient _visionClient;\n```", "```py\n    private CelebrityViewModel _celebrityVm;\n    public CelebrityViewModel CelebrityVm\n    {\n        get { return _celebrityVm; }\n        set\n        {\n            _celebrityVm = value;\n            RaisePropertyChangedEvent(\"CelebrityVm\");\n        }\n    }\n```", "```py\n    public MainViewModel()\n    {\n        _visionClient = new VisionServiceClient(\"VISION_API_KEY_HERE\", \"ROOT_URI\");\n\n        CelebrityVm = new CelebrityViewModel(_visionClient);\n        DescriptionVm = new DescriptionViewModel(_visionClient);\n        ImageAnalysisVm= new ImageAnalysisViewModel(_visionClient);\n        OcrVm = new OcrViewModel(_visionClient);\n        ThumbnailVm = new ThumbnailViewModel(_visionClient);\n    }\n```", "```py\n    <Grid.ColumnDefinitions>\n        <ColumnDefinition Width=\"*\" />\n        <ColumnDefinition Width=\"*\" />\n    </Grid.ColumnDefinitions>\n```", "```py\n    <StackPanel Orientation=\"Vertical\"Grid.Column=\"0\">\n\n    <TextBlock Text=\"Visual Features:\"\n               FontWeight=\"Bold\"\n               FontSize=\"15\"\n               Margin=\"5, 5\" Height=\"20\" />\n\n    <ListBox: Name = \"VisualFeatures\"\n          ItemsSource = \"{Binding ImageAnalysisVm.Features}\"\n          SelectionMode = \"Multiple\" Height=\"150\" Margin=\"5, 0, 5, 0\"\n          SelectionChanged = \"VisualFeatures_SelectionChanged\" />\n```", "```py\n    <Button Content = \"Browse and analyze\"\n            Command = \"{Binding ImageAnalysisVm.BrowseAndAnalyzeImageCommand}\"\n            Margin=\"5, 10, 5, 10\" Height=\"20\" Width=\"120\"\n            HorizontalAlignment=\"Right\" />\n\n    <Image Stretch = \"Uniform\"\n           Source=\"{Binding ImageAnalysisVm.ImageSource}\"\n           Height=\"280\" Width=\"395\" />\n    </StackPanel>\n```", "```py\n    <StackPanel Orientation= \"Vertical\"Grid.Column=\"1\">\n        <TextBlock Text=\"Analysis Results:\"\n                   FontWeight = \"Bold\"\n                   FontSize=\"15\" Margin=\"5, 5\" Height=\"20\" />\n        <TextBox Text = \"{Binding ImageAnalysisVm.AnalysisResult}\"\n                 Margin=\"5, 0, 5, 5\" Height=\"485\" />\n    </StackPanel>\n```", "```py\n    private void VisualFeatures_SelectionChanged(object sender, SelectionChangedEventArgs e) {\n        var vm = (MainViewModel) DataContext;\n        vm.ImageAnalysisVm.SelectedFeatures.Clear();\n```", "```py\n        foreach(VisualFeature feature in VisualFeatures.SelectedItems)\n        {\n            vm.ImageAnalysisVm.SelectedFeatures.Add(feature);\n        }\n    }\n```", "```py\n    private IVisionServiceClient _visionClient;    \n```", "```py\n    private List<VisualFeature> _features=new List<VisualFeature>();\n    public List<VisualFeature> Features {\n        get { return _features; }\n        set {\n            _features = value;\n            RaisePropertyChangedEvent(\"Features\");\n        }\n    }\n```", "```py\n    public ICommandBrowseAndAnalyzeImageCommand {get; private set;}\n```", "```py\n    public ImageAnalysisViewModel(IVisionServiceClientvisionClient) {\n        _visionClient = visionClient;\n        Initialize();\n    }\n```", "```py\n    private void Initialize() {\n        Features = Enum.GetValues(typeof(VisualFeature))\n                       .Cast<VisualFeature>().ToList();\n\n        BrowseAndAnalyzeImageCommand = new DelegateCommand(BrowseAndAnalyze);\n    }\n```", "```py\n    private async void BrowseAndAnalyze(object obj)\n    {\n        var openDialog = new Microsoft.Win32.OpenFileDialog();\n\n        openDialog.Filter = \"JPEG Image(*.jpg)|*.jpg\";\n        bool? result = openDialog.ShowDialog();\n\n        if (!(bool)result) return;\n\n        string filePath = openDialog.FileName;\n\n        Uri fileUri = new Uri(filePath);\n        BitmapImage image = new BitmapImage(fileUri);\n\n        image.CacheOption = BitmapCacheOption.None;\n        image.UriSource = fileUri;\n\n        ImageSource = image;\n```", "```py\n    try {\n        using (StreamfileStream = File.OpenRead(filePath)) {\n            AnalysisResult analysisResult = await  _visionClient.AnalyzeImageAsync(fileStream, SelectedFeatures);\n```", "```py\n    if (analysisResult != null)\n        AnalysisResult = PrintAnalysisResult(analysisResult);\n```", "```py\n    if (analysisResult.Description != null) {\n        result.AppendFormat(\"Description: {0}\\n\", analysisResult.Description.Captions[0].Text);\n        result.AppendFormat(\"Probability: {0}\\n\\n\", analysisResult.Description.Captions[0].Confidence);\n    }\n```", "```py\n    AnalysisResultdescriptionResult = await _visionClient.DescribeAsync(ImageUrl, NumberOfDescriptions);\n```", "```py\n    private IVisionServiceClient _visionClient;\n```", "```py\n    public CelebrityViewModel(IVisionServiceClient visionClient) {\n        _visionClient = visionClient;\n        LoadAndFindCelebrityCommand = new DelegateCommand(LoadAndFindCelebrity, CanFindCelebrity);\n    }\n```", "```py\n    private async void LoadAndFindCelebrity(object obj) {\n        UrifileUri = new Uri(ImageUrl);\n        BitmapImage image = new BitmapImage(fileUri);\n\n        image.CacheOption = BitmapCacheOption.None;\n        image.UriSource = fileUri;\n\n        ImageSource = image;\n```", "```py\n    try {\n        AnalysisInDomainResultcelebrityResult = await _visionClient.AnalyzeImageInDomainAsync(ImageUrl, \"celebrities\");\n\n        if (celebrityResult != null)\n            Celebrity = celebrityResult.Result.ToString();\n    }\n```", "```py\n    VisionClient.ListModelsAsync();\n```", "```py\n    private IVisionServiceClient _visionClient;\n```", "```py\n    using (StreamfileStream = File.OpenRead(filePath)) {\n        OcrResultsanalysisResult = await _visionClient.RecognizeTextAsync (fileStream);\n\n        if(analysisResult != null)\n            OcrResult = PrintOcrResult(analysisResult);\n    }\n```", "```py\n    private string PrintOcrResult(OcrResultsocrResult)\n    {\n        StringBuilder result = new StringBuilder();\n\n        result.AppendFormat(\"Language is {0}\\n\", ocrResult.Language);\n        result.Append(\"The words are:\\n\\n\");\n```", "```py\n        foreach(var region in ocrResult.Regions) { \n            foreach(var line in region.Lines) { \n                foreach(var text in line.Words) { \n                    result.AppendFormat(\"{0} \", text.Text);\n                }\n                result.Append(\"\\n\");\n            }\n            result.Append(\"\\n\\n\");\n        }\n```", "```py\n    private IVisionServiceClient _visionClient;\n```", "```py\n    using (StreamfileStream = File.OpenRead(filePath))\n    {\n        byte[] thumbnailResult = await _visionClient.GetThumbnailAsync(fileStream, 250, 250);\n\n        if(thumbnailResult != null &&thumbnailResult.Length != 0)\n            CreateThumbnail(thumbnailResult);\n    }\n```", "```py\n    private void CreateThumbnail(byte[] thumbnailResult)\n    {\n        try {\n            MemoryStreamms = new MemoryStream(thumbnailResult);\n            ms.Seek(0, SeekOrigin.Begin);\n```", "```py\n        BitmapImage image = new BitmapImage();\n        image.BeginInit();\n        image.CacheOption = BitmapCacheOption.None;\n        image.StreamSource = ms;\n        image.EndInit();\n\n        Thumbnail = image;   \n```", "```py\n    private FaceServiceClient _faceServiceClient;\n    private Guid _faceId1 = Guid.Empty;\n    private Guid _faceId2 = Guid.Empty;\n```", "```py\n    public FaceVerificationViewModel (FaceServiceClientfaceServiceClient)\n    {    \n        _faceServiceClient = faceServiceClient;\n        Initialize();\n    }\n```", "```py\n    private void Initialize()\n    {\n        BrowseImage1Command = new DelegateCommand(BrowseImage1);\n        BrowseImage2Command = new DelegateCommand(BrowseImage2);\n        VerifyImageCommand = new DelegateCommand(VerifyFace, CanVerifyFace);\n    }\n```", "```py\n    private async void BrowseImage1(object obj) {\n        Image1Source = await BrowseImageAsync(1);\n    }\n```", "```py\n    try {\n        using (Stream fileStream = File.OpenRead(filePath)) {\n            Face[] detectedFaces = await  _faceServiceClient.DetectAsync(fileStream);\n```", "```py\n            if (imagenumber == 1)\n                _faceId1 = detectedFaces[0].FaceId;\n            else\n                _faceId2 = detectedFaces[0].FaceId;\n        }\n    }\n```", "```py\n    private bool CanVerifyFace(object obj)\n    {\n        return !_faceId1.Equals(Guid.Empty) &&! _faceId2.Equals(Guid.Empty);\n    }\n```", "```py\n    private async void VerifyFace(object obj) {\n        try {\n            VerifyResultverificationResult = await  _faceServiceClient.VerifyAsync(_faceId1, _faceId2);\n```", "```py\n            FaceVerificationResult = $\"The two provided faces is identical: {verificationResult.IsIdentical}, with confidence: {verificationResult.Confidence}\";\n        }\n```", "```py\n    private bool _faceListExists = false;\n    private FaceServiceClient _faceServiceClient;\n```", "```py\n    private async void Initialize()\n    {\n        FaceListName = \"Chapter2\";\n\n        CreateFaceListCommand = new DelegateCommand(CreateFaceListAsync, CanCreateFaceList);\n        FindSimilarFaceCommand = new DelegateCommand(FindSimilarFace);\n        AddExampleFacesToListCommand = new DelegateCommand(AddExampleFacesToList, CanAddExampleFaces);\n```", "```py\n        await DoesFaceListExistAsync();\n        UpdateFaceGuidsAsync();\n    }\n```", "```py\n    private async Task DoesFaceListExistAsync()\n    {\n        FaceListMetadata[] faceLists = await _faceServiceClient.ListFaceListsAsync();\n```", "```py\n    foreach (FaceListMetadatafaceList in faceLists) {\n        if (faceList.Name.Equals(FaceListName)) {\n            _faceListExists = true;\n            break;\n        }\n    }\n```", "```py\n    private async void UpdateFaceGuidsAsync() {\n        if (!_faceListExists) return;\n\n        try { \n            FaceListfaceList = await _faceServiceClient.GetFaceListAsync(FaceListName.ToLower());\n```", "```py\n        if (faceList == null) return;\n\n        PersonFace[] faces = faceList.PersistedFaces;\n\n        foreach (PersonFace face in faces) {\n            FaceIds.Add(face.PersistedFaceId);\n        }\n```", "```py\n    private async void CreateFaceListAsync(object obj) {\n        try {\n            if (!_faceListExists) {\n                await _faceServiceClient.CreateFaceListAsync (\nFaceListName.ToLower(), FaceListName, string.Empty);\n                await DoesFaceListExistAsync();\n            }\n        }\n```", "```py\n    using (StreamfileStream = File.OpenRead(image))\n    {\n        Face[] faces = await _faceServiceClient.DetectAsync(fileStream);\n        FaceRectanglefaceRectangle = faces[0].FaceRectangle;\n```", "```py\nAddPersistedFaceResult addFacesResult = await _faceServiceClient.AddFaceToFaceListAsync(FaceListName.ToLower(), fileStream, null, faceRectangle);\nUpdateFaceGuidsAsync();\n```", "```py\n    try {\n        SimilarPersistedFace[] similarFaces = await _faceServiceClient.FindSimilarAsync (findFaceGuid, FaceListName.ToLower(), 3);\n```", "```py\n    DeleteFaceFromFaceListAsync(FACELISTID, PERSISTEDFACEID)\n```", "```py\n    DeleteFaceListAsync(FACELISTID)\n```", "```py\n    UpdateFaceListAsync(FACELISTID, FACELISTNAME, USERDATA)\n```", "```py\n    private FaceServiceClient _faceServiceClient;\n    private List<string> _imageFiles = new List<string>();\n    private List<Guid> _faceIds = new List<Guid>();\n```", "```py\n    try {\n        using (Stream fileStream = File.OpenRead(_imageFiles[i])) {\n            Face[] faces = await\n            _faceServiceClient.DetectAsync(fileStream);\n```", "```py\n            _faceIds.Add(faces[0].FaceId);\n            CreateImageSources(image, i, faces[0].FaceId);\n        }\n    }\n```", "```py\n    private async void GroupFaces(object obj) {\n        try {\n            GroupResultfaceGroups = await _faceServiceClient.GroupAsync(_faceIds.ToArray());\n```", "```py\n            if (faceGroups != null)\n                FaceGroupingResult = ParseGroupResult(faceGroups);\n        }\n```", "```py\nprivate string ParseGroupResult(GroupResultfaceGroups) {\n   StringBuilder result = new StringBuilder();\n   List<Guid[]>groups = faceGroups.Groups;\n   result.AppendFormat(\"There are {0} group(s)\\n\", groups.Count);\n```", "```py\n            result.Append(\"Groups:\\t\");\n\n            foreach(Guid[] guid in groups)\n            {\n                foreach(Guid id in guid)\n                {\n                    result.AppendFormat(\"{0} - \", GetImageName(id));\n                }\n                result.Append(\"\\n\");\n            }\n```", "```py\n            result.Append(\"Messy group:\\t\");\n\n            Guid[] messyGroup = faceGroups.MessyGroup;\n            foreach(Guidguid in messyGroup)\n            {\n                result.AppendFormat(\"{0} - \", GetImageName(guid));\n            }\n```", "```py\n            return result.ToString();\n        }\n```", "```py\n    private FaceServiceClient _faceServiceClient;\n```", "```py\n    private async void GetPersonGroups() {\n        try {\n            PersonGroup[] personGroups = await\n            _faceServiceClient.ListPersonGroupsAsync();\n```", "```py\n            if(personGroups == null || personGroups.Length == 0)\n            {\n                StatusText = \"No person groups found.\";\n                return;\n            }\n\n            PersonGroups.Clear();\n\n            foreach (PersonGrouppersonGroup in personGroups)\n            {\n                PersonGroups.Add(personGroup); \n            }\n        }\n```", "```py\n    private async void AddPersonGroup(object obj) {\n        try {\n            if(await DoesPersonGroupExistAsync(PersonGroupName.ToLower())) {\n                StatusText = $\"Person group {PersonGroupName} already exist\";\n                return;\n            }\n```", "```py\n            await _faceServiceClient.CreatePersonGroupAsync (PersonGroupName.ToLower(), PersonGroupName);\n            StatusText = $\"Person group {PersonGroupName} added\";\n            GetPersonGroups();\n        }\n```", "```py\n    private async void DeletePersonGroup(object obj)\n    {\n        try\n        {\n            await _faceServiceClient.DeletePersonGroupAsync (SelectedPersonGroup.PersonGroupId);\n            StatusText = $\"Deleted person group {SelectedPersonGroup.Name}\";\n\n            GetPersonGroups();\n        }\n```", "```py\n    private async void GetPersons()\n    {\n        if (SelectedPersonGroup == null)\n            return;\n\n        Persons.Clear();\n\n        try\n        {\n            Person[] persons = await _faceServiceClient.GetPersonsAsync(SelectedPersonGroup.PersonGroupId);\n```", "```py\n            if (persons == null || persons.Length == 0)\n            {\n                StatusText = $\"No persons found in {SelectedPersonGroup.Name}.\";\n                return;\n            }\n\n            foreach (Person person in persons)\n            {\n                Persons.Add(person);\n            }\n        }\n```", "```py\n    private async void AddPerson(object obj)\n    {\n        try\n        {\n            CreatePersonResultpersonId = await _faceServiceClient.CreatePersonAsync(SelectedPersonGroup.PersonGroupId, PersonName);\n            StatusText = $\"Added person {PersonName} got ID: {personId.PersonId.ToString()}\";\n\n            GetPersons();\n        }\n```", "```py\n    private async void DeletePerson(object obj)\n    {\n        try\n        {\n            await _faceServiceClient.DeletePersonAsync (SelectedPersonGroup.PersonGroupId, SelectedPerson.PersonId);\n\n            StatusText = $\"Deleted {SelectedPerson.Name} from {SelectedPersonGroup.Name}\";\n\n            GetPersons();\n        }\n```", "```py\n        using (StreamimageFile = File.OpenRead(filePath))\n        {\n            AddPersistedFaceResultaddFaceResult = await _faceServiceClient.AddPersonFaceAsync(\n            SelectedPersonGroup.PersonGroupId,\n            SelectedPerson.PersonId, imageFile);\n\n            if (addFaceResult != null)\n            {\n                StatusText = $\"Face added for {SelectedPerson.Name}. Remember to train the person group!\";\n            }\n        }\n```", "```py\n    private async void TrainPersonGroup(object obj)\n    {\n        try\n        {\n            await _faceServiceClient.TrainPersonGroupAsync(\nSelectedPersonGroup.PersonGroupId);\n```", "```py\n            while(true)\n            {\n                TrainingStatustrainingStatus = await _faceServiceClient.GetPersonGroupTrainingStatusAsync (SelectedPersonGroup.PersonGroupId);\n```", "```py\n                if(trainingStatus.Status != Status.Running)\n                {\n                    StatusText = $\"Person group finished with status: {trainingStatus.Status}\";\n                    break;\n                }\n\n                StatusText = \"Training person group...\";\n                await Task.Delay(1000);\n            }\n        }\n```", "```py\n            UpdatePersonGroupAsync(PERSONGROUPID, NEWNAME, USERDATA)\n    ```", "```py\n            GetPersonFaceAsync(PERSONGROUPID, PERSONID, PERSISTEDFACEID)\n    ```", "```py\n            DeletePersonFaceAsync(PERSONGROUPID, PERSONID, PERSISTEDFACeID)\n    ```", "```py\n            UpdatePersonAsync(PERSONGROUPID, PERSONID, NEWNAME, USERDATA)\n    ```", "```py\n            UpdatePersonFaceAsync(PERSONGROUID, PERSONID, PERSISTEDFACEID, USERDATA)\n    ```", "```py\n    private FaceServiceClient _faceServiceClient;\n```", "```py\n    private void Initialize()\n    {\n        GetPersonGroups();\n        UploadOwnerImageCommand = new DelegateCommand(UploadOwnerImage,CanUploadOwnerImage);\n    }\n```", "```py\n    using (StreamimageFile = File.OpenRead(filePath))\n    {\n        Face[] faces = await _faceServiceClient.DetectAsync(imageFile);\n        Guid[] faceIds = faces.Select(face =>face.FaceId).ToArray();\n```", "```py\n        IdentifyResult[] personsIdentified = await _faceServiceClient.IdentifyAsync (SelectedPersonGroup.PersonGroupId,\nfaceIds, 1);\n```", "```py\n    foreach(IdentifyResultpersonIdentified in personsIdentified) { \n        if(personIdentified.Candidates.Length == 0) {\n            SystemResponse = \"Failed to identify you.\";\n            break;\n        }\n        GuidpersonId = personIdentified.Candidates[0].PersonId;\n```", "```py\n        Person person = await faceServiceClient.GetPersonAsync(\nSelectedPersonGroup.PersonGroupId, personId);\n\n        if(person != null) {\n            SystemResponse = $\"Welcome home, {person.Name}\";\n            break;\n        }\n    }\n}\n```", "```py\n    private FrameGrabber<CameraResult> _frameGrabber;\n    private static readonly ImageEncodingParam[] s_jpegParams = {\n        new ImageEncodingParam(ImwriteFlags.JpegQuality, 60)\n    };\n```", "```py\n    internal class CameraResult {\n        public EmotionScores EmotionScores { get; set; } = null;\n    }\n```", "```py\n    _frameGrabber.NewFrameProvided += OnNewFrameProvided;\n```", "```py\n    private void OnNewFrameProvided(object sender, FrameGrabber<CameraResult>.NewFrameEventArgs e) {          \n        Application.Current.Dispatcher.Invoke(() => {\n            BitmapSource bitmapSource = e.Frame.Image.ToBitmapSource();\n\n            JpegBitmapEncoder encoder = new JpegBitmapEncoder();\n            MemoryStream memoryStream = new MemoryStream();\n            BitmapImage image = new BitmapImage();\n```", "```py\n    encoder.Frames.Add(BitmapFrame.Create(bitmapSource));\n    encoder.Save(memoryStream);\n```", "```py\n    memoryStream.Position = 0;\n    image.BeginInit(); \n    image.CacheOption = BitmapCacheOption.OnLoad;\n    image.StreamSource = memoryStream;\n    image.EndInit();\n\n    memoryStream.Close(); \n    ImageSource = image;\n```", "```py\n    StopCameraCommand = new DelegateCommand(StopCamera);\n    StartCameraCommand = new DelegateCommand(StartCamera, CanStartCamera);\n```", "```py\n    private bool CanStartCamera(object obj) {\n        return _frameGrabber.GetNumCameras() > 0 && SelectedPersonGroup != null;\n    }\n```", "```py\n    private async void StartCamera(object obj) {\n        _frameGrabber.TriggerAnalysisOnInterval(TimeSpan.FromSeconds(5));\n        await _frameGrabber.StartProcessingCameraAsync();\n    }\n```", "```py\n    private async void StopCamera(object obj) {\n        await _frameGrabber.StopProcessingAsync();\n    }\n```", "```py\nprivate async Task<CameraResult> EmotionAnalysisAsync (VideoFrame frame) {\n   MemoryStream jpg = frame.Image.ToMemoryStream(\".jpg\", s_jpegParams); \n   try {\n      Face[] face = await _faceServiceClient.DetectAsync(jpg, true, false, new List<FaceAttributeType>\n         { FaceAttributeType.Emotion });\n      EmotionScores emotions = face.First()?.FaceAttributes?.Emotion;\n```", "```py\n    return new CameraResult {\n        EmotionScores = emotions\n    };\n```", "```py\n    _frameGrabber.NewResultAvailable += OnResultAvailable;\n    _frameGrabber.AnalysisFunction = EmotionAnalysisAsync;\n    private void OnResultAvailable(object sender, FrameGrabber<CameraResult>.NewResultEventArgs e)\n    {\n        var analysisResult = e.Analysis.EmotionScores; \n        if (analysisResult == null)\n            return;\n```", "```py\n        string emotion = AnalyseEmotions(analysisResult);\n\n        Application.Current.Dispatcher.Invoke(() => {\n            SystemResponse = $\"You seem to be {emotion} today.\";\n        });\n    }\n```", "```py\n    private string AnalyseEmotions(Scores analysisResult) {\n        string emotion = string.Empty;\n        var sortedEmotions = analysisResult.ToRankedList();\n        string currentEmotion = sortedEmotions.First().Key;\n```", "```py\n        switch(currentEmotion)\n        { \n            case \"Anger\":\n                emotion = \"angry\";\n                break;\n            case \"Contempt\":\n                emotion = \"contempt\";\n                break;\n            case \"Disgust\":\n                emotion = \"disgusted\";\n                break;\n            case \"Fear\":\n                emotion = \"scared\";\n                break;\n            case \"Happiness\":\n                emotion = \"happy\";\n                break;\n            case \"Neutral\":\n                default:\n                emotion = \"neutral\";\n                break;\n            case \"Sadness\":\n                emotion = \"sad\";\n                break;\n            case \"Suprise\":\n                emotion = \"suprised\";\n                break;\n            }\n            return emotion;\n        }\n```", "```py\n    _frameGrabber.TriggerAnalysisOnInterval(TimeSpan.FromSeconds(5));\n```"]