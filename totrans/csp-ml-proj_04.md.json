["```py\nrawDF[\"DailyReturn\"].Diff(1)\nrawDF[\"DailyReturn\"].Diff(3)\nrawDF[\"DailyReturn\"].Diff(5)\n```", "```py\n// Compute Daily Returns\nrawDF.AddColumn(\n    \"DailyReturn\", \n    rawDF[\"Close\"].Diff(1) / rawDF[\"Close\"] * 100.0\n);\n```", "```py\nrawDF[\"DailyReturn\"].Shift(1)\nrawDF[\"DailyReturn\"].Shift(3)\nrawDF[\"DailyReturn\"].Shift(5)\n```", "```py\n// Encode Target Variable - Predict Next Daily Return\nrawDF.AddColumn(\n    \"Target\",\n    rawDF[\"DailyReturn\"].Shift(-1)\n);\n```", "```py\n// Assume Open prices are previous Close prices\nrawDF.AddColumn(\n    \"Open\",\n    rawDF[\"Close\"].Shift(1)\n);\n```", "```py\nusing Deedle;\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace DataPrep\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Console.SetWindowSize(100, 50);\n\n            // Read in the raw dataset\n            // TODO: change the path to point to your data directory\n            string dataDirPath = @\"\\\\Mac\\Home\\Documents\\c-sharp-machine-\nlearning\\ch.4\\input-data\";\n\n            // Load the data into a data frame\n            string rawDataPath = Path.Combine(dataDirPath, \"eurusd-daily.csv\");\n            Console.WriteLine(\"Loading {0}\\n\", rawDataPath);\n            var rawDF = Frame.ReadCsv(\n                rawDataPath,\n                hasHeaders: true,\n                schema: \"Date,float,float,float\",\n                inferTypes: false\n            );\n\n            // Rename & Simplify Column Names\n            rawDF.RenameColumns(c => c.Contains(\"EUR/USD \") ? c.Replace(\"EUR/USD \", \"\") : c);\n\n            // Assume Open prices are previous Close prices\n            rawDF.AddColumn(\n                \"Open\",\n                rawDF[\"Close\"].Shift(1)\n            );\n\n            // Compute Daily Returns\n            rawDF.AddColumn(\n                \"DailyReturn\", \n                rawDF[\"Close\"].Diff(1) / rawDF[\"Close\"] * 100.0\n            );\n\n            // Encode Target Variable - Predict Next Daily Return\n            rawDF.AddColumn(\n                \"Target\",\n                rawDF[\"DailyReturn\"].Shift(-1)\n            );\n\n            rawDF.Print();\n\n            // Save OHLC data\n            string ohlcDataPath = Path.Combine(dataDirPath, \"eurusd-daily-ohlc.csv\");\n            Console.WriteLine(\"\\nSaving OHLC data to {0}\\n\", rawDataPath);\n            rawDF.SaveCsv(ohlcDataPath);\n\n            Console.WriteLine(\"DONE!!\");\n            Console.ReadKey();\n        }\n    }\n}\n```", "```py\n// Time-series line chart of close prices\nDataSeriesBox.Show(\n    ohlcDF.RowKeys.Select(x => (double)x),\n    ohlcDF.GetColumn<double>(\"Close\").ValuesAll\n);\n```", "```py\n// Time-series line chart of daily returns\nDataSeriesBox.Show(\n    ohlcDF.RowKeys.Select(x => (double)x),\n    ohlcDF.FillMissing(0.0)[\"DailyReturn\"].ValuesAll\n);\n```", "```py\n// Check the distribution of daily returns\ndouble returnMax = ohlcDF[\"DailyReturn\"].Max();\ndouble returnMean = ohlcDF[\"DailyReturn\"].Mean();\ndouble returnMedian = ohlcDF[\"DailyReturn\"].Median();\ndouble returnMin = ohlcDF[\"DailyReturn\"].Min();\ndouble returnStdDev = ohlcDF[\"DailyReturn\"].StdDev();\n\ndouble[] quantiles = Accord.Statistics.Measures.Quantiles(\n    ohlcDF.FillMissing(0.0)[\"DailyReturn\"].ValuesAll.ToArray(),\n    new double[] {0.25, 0.5, 0.75}\n);\n\nConsole.WriteLine(\"-- DailyReturn Distribution-- \");\n\nConsole.WriteLine(\"Mean: \\t\\t\\t{0:0.00}\\nStdDev: \\t\\t{1:0.00}\\n\", returnMean, returnStdDev);\n\nConsole.WriteLine(\n    \"Min: \\t\\t\\t{0:0.00}\\nQ1 (25% Percentile): \\t{1:0.00}\\nQ2 (Median): \\t\\t{2:0.00}\\nQ3 (75% Percentile): \\t{3:0.00}\\nMax: \\t\\t\\t{4:0.00}\", \n    returnMin, quantiles[0], quantiles[1], quantiles[2], returnMax\n);\n```", "```py\nvar dailyReturnHistogram = HistogramBox\n.Show(\n    ohlcDF.FillMissing(0.0)[\"DailyReturn\"].ValuesAll.ToArray()\n)\n.SetNumberOfBins(20);\n```", "```py\n// 1\\. Moving Averages\nohlcDF.AddColumn(\"10_MA\", ohlcDF.Window(10).Select(x => x.Value[\"Close\"].Mean()));\nohlcDF.AddColumn(\"20_MA\", ohlcDF.Window(20).Select(x => x.Value[\"Close\"].Mean()));\nohlcDF.AddColumn(\"50_MA\", ohlcDF.Window(50).Select(x => x.Value[\"Close\"].Mean()));\nohlcDF.AddColumn(\"200_MA\", ohlcDF.Window(200).Select(x => x.Value[\"Close\"].Mean()));\n```", "```py\n// Time-series line chart of close prices & moving averages\nvar maLineChart = DataSeriesBox.Show(\n    ohlcDF.Where(x => x.Key > 4400 && x.Key < 4900).RowKeys.Select(x => (double)x),\n    ohlcDF.Where(x => x.Key > 4400 && x.Key < 4900).GetColumn<double>(\"Close\").ValuesAll,\n    ohlcDF.Where(x => x.Key > 4400 && x.Key < 4900).GetColumn<double>(\"10_MA\").ValuesAll,\n    ohlcDF.Where(x => x.Key > 4400 && x.Key < 4900).GetColumn<double>(\"20_MA\").ValuesAll,\n    ohlcDF.Where(x => x.Key > 4400 && x.Key < 4900).GetColumn<double>(\"50_MA\").ValuesAll,\n    ohlcDF.Where(x => x.Key > 4400 && x.Key < 4900).GetColumn<double>(\"200_MA\").ValuesAll\n);\n```", "```py\n// Distance from moving averages\nohlcDF.AddColumn(\"Close_minus_10_MA\", ohlcDF[\"Close\"] - ohlcDF[\"10_MA\"]);\nohlcDF.AddColumn(\"Close_minus_20_MA\", ohlcDF[\"Close\"] - ohlcDF[\"20_MA\"]);\nohlcDF.AddColumn(\"Close_minus_50_MA\", ohlcDF[\"Close\"] - ohlcDF[\"50_MA\"]);\nohlcDF.AddColumn(\"Close_minus_200_MA\", ohlcDF[\"Close\"] - ohlcDF[\"200_MA\"]);\n```", "```py\n// 2\\. Bollinger Band\nohlcDF.AddColumn(\"20_day_std\", ohlcDF.Window(20).Select(x => x.Value[\"Close\"].StdDev()));\nohlcDF.AddColumn(\"BollingerUpperBound\", ohlcDF[\"20_MA\"] + ohlcDF[\"20_day_std\"] * 2);\nohlcDF.AddColumn(\"BollingerLowerBound\", ohlcDF[\"20_MA\"] - ohlcDF[\"20_day_std\"] * 2);\n```", "```py\n// Time-series line chart of close prices & bollinger bands\nvar bbLineChart = DataSeriesBox.Show(\n    ohlcDF.Where(x => x.Key > 4400 && x.Key < 4900).RowKeys.Select(x => (double)x),\n    ohlcDF.Where(x => x.Key > 4400 && x.Key < 4900).GetColumn<double>(\"Close\").ValuesAll,\n    ohlcDF.Where(x => x.Key > 4400 && x.Key < 4900).GetColumn<double>(\"BollingerUpperBound\").ValuesAll,\n    ohlcDF.Where(x => x.Key > 4400 && x.Key < 4900).GetColumn<double>(\"20_MA\").ValuesAll,\n    ohlcDF.Where(x => x.Key > 4400 && x.Key < 4900).GetColumn<double>(\"BollingerLowerBound\").ValuesAll\n);\n```", "```py\n// Distance from Bollinger Bands\nohlcDF.AddColumn(\"Close_minus_BollingerUpperBound\", ohlcDF[\"Close\"] - ohlcDF[\"BollingerUpperBound\"]);\nohlcDF.AddColumn(\"Close_minus_BollingerLowerBound\", ohlcDF[\"Close\"] - ohlcDF[\"BollingerLowerBound\"]);\n```", "```py\n// 3\\. Lagging Variables\nohlcDF.AddColumn(\"DailyReturn_T-1\", ohlcDF[\"DailyReturn\"].Shift(1));\nohlcDF.AddColumn(\"DailyReturn_T-2\", ohlcDF[\"DailyReturn\"].Shift(2));\nohlcDF.AddColumn(\"DailyReturn_T-3\", ohlcDF[\"DailyReturn\"].Shift(3));\nohlcDF.AddColumn(\"DailyReturn_T-4\", ohlcDF[\"DailyReturn\"].Shift(4));\nohlcDF.AddColumn(\"DailyReturn_T-5\", ohlcDF[\"DailyReturn\"].Shift(5));\n```", "```py\nohlcDF.AddColumn(\"Close_minus_10_MA_T-1\", ohlcDF[\"Close_minus_10_MA\"].Shift(1));\nohlcDF.AddColumn(\"Close_minus_10_MA_T-2\", ohlcDF[\"Close_minus_10_MA\"].Shift(2));\nohlcDF.AddColumn(\"Close_minus_10_MA_T-3\", ohlcDF[\"Close_minus_10_MA\"].Shift(3));\nohlcDF.AddColumn(\"Close_minus_10_MA_T-4\", ohlcDF[\"Close_minus_10_MA\"].Shift(4));\nohlcDF.AddColumn(\"Close_minus_10_MA_T-5\", ohlcDF[\"Close_minus_10_MA\"].Shift(5));\n\nohlcDF.AddColumn(\"Close_minus_20_MA_T-1\", ohlcDF[\"Close_minus_20_MA\"].Shift(1));\nohlcDF.AddColumn(\"Close_minus_20_MA_T-2\", ohlcDF[\"Close_minus_20_MA\"].Shift(2));\nohlcDF.AddColumn(\"Close_minus_20_MA_T-3\", ohlcDF[\"Close_minus_20_MA\"].Shift(3));\nohlcDF.AddColumn(\"Close_minus_20_MA_T-4\", ohlcDF[\"Close_minus_20_MA\"].Shift(4));\nohlcDF.AddColumn(\"Close_minus_20_MA_T-5\", ohlcDF[\"Close_minus_20_MA\"].Shift(5));\n\nohlcDF.AddColumn(\"Close_minus_50_MA_T-1\", ohlcDF[\"Close_minus_50_MA\"].Shift(1));\nohlcDF.AddColumn(\"Close_minus_50_MA_T-2\", ohlcDF[\"Close_minus_50_MA\"].Shift(2));\nohlcDF.AddColumn(\"Close_minus_50_MA_T-3\", ohlcDF[\"Close_minus_50_MA\"].Shift(3));\nohlcDF.AddColumn(\"Close_minus_50_MA_T-4\", ohlcDF[\"Close_minus_50_MA\"].Shift(4));\nohlcDF.AddColumn(\"Close_minus_50_MA_T-5\", ohlcDF[\"Close_minus_50_MA\"].Shift(5));\n\nohlcDF.AddColumn(\"Close_minus_200_MA_T-1\", ohlcDF[\"Close_minus_200_MA\"].Shift(1));\nohlcDF.AddColumn(\"Close_minus_200_MA_T-2\", ohlcDF[\"Close_minus_200_MA\"].Shift(2));\nohlcDF.AddColumn(\"Close_minus_200_MA_T-3\", ohlcDF[\"Close_minus_200_MA\"].Shift(3));\nohlcDF.AddColumn(\"Close_minus_200_MA_T-4\", ohlcDF[\"Close_minus_200_MA\"].Shift(4));\nohlcDF.AddColumn(\"Close_minus_200_MA_T-5\", ohlcDF[\"Close_minus_200_MA\"].Shift(5));\n```", "```py\nohlcDF.AddColumn(\"Close_minus_BollingerUpperBound_T-1\", ohlcDF[\"Close_minus_BollingerUpperBound\"].Shift(1));\nohlcDF.AddColumn(\"Close_minus_BollingerUpperBound_T-2\", ohlcDF[\"Close_minus_BollingerUpperBound\"].Shift(2));\nohlcDF.AddColumn(\"Close_minus_BollingerUpperBound_T-3\", ohlcDF[\"Close_minus_BollingerUpperBound\"].Shift(3));\nohlcDF.AddColumn(\"Close_minus_BollingerUpperBound_T-4\", ohlcDF[\"Close_minus_BollingerUpperBound\"].Shift(4));\nohlcDF.AddColumn(\"Close_minus_BollingerUpperBound_T-5\", ohlcDF[\"Close_minus_BollingerUpperBound\"].Shift(5));\n```", "```py\nConsole.WriteLine(\"\\n\\nDF Shape BEFORE Dropping Missing Values: ({0}, {1})\", ohlcDF.RowCount, ohlcDF.ColumnCount);\nohlcDF = ohlcDF.DropSparseRows();\nConsole.WriteLine(\"\\nDF Shape AFTER Dropping Missing Values: ({0}, {1})\\n\\n\", ohlcDF.RowCount, ohlcDF.ColumnCount);\n```", "```py\n// Read in the file we created in the previous step\n// TODO: change the path to point to your data directory\nstring dataDirPath = @\"<path-to-data-dir>\";\n\n// Load the data into a data frame\nConsole.WriteLine(\"Loading data...\");\nvar featuresDF = Frame.ReadCsv(\n    Path.Combine(dataDirPath, \"eurusd-features.csv\"),\n    hasHeaders: true,\n    inferTypes: true\n);\n\n// Split the sample set into train and test sets\ndouble trainProportion = 0.9;\n\nint trainSetIndexMax = (int)(featuresDF.RowCount * trainProportion);\n\nvar trainSet = featuresDF.Where(x => x.Key < trainSetIndexMax);\nvar testSet = featuresDF.Where(x => x.Key >= trainSetIndexMax);\n\nConsole.WriteLine(\"\\nTrain Set Shape: ({0}, {1})\", trainSet.RowCount, trainSet.ColumnCount);\nConsole.WriteLine(\"Test Set Shape: ({0}, {1})\", testSet.RowCount, testSet.ColumnCount);\nWhere method to filter records in the sample set by index. The next thing we need to do before training our ML models is select the features that we want to train our models with. Since we are only interested in using lagged variables and the distances between the prices and moving averages or Bollinger Bands, we do not want to include raw moving average or Bollinger Band numbers into our feature space. The following code snippet shows how we define the feature set for our models:\n```", "```py\nstring[] features = new string[] {\n    \"DailyReturn\", \n    \"Close_minus_10_MA\", \"Close_minus_20_MA\", \"Close_minus_50_MA\",\n    \"Close_minus_200_MA\", \"20_day_std\", \n    \"Close_minus_BollingerUpperBound\", \"Close_minus_BollingerLowerBound\",\n    \"DailyReturn_T-1\", \"DailyReturn_T-2\",\n    \"DailyReturn_T-3\", \"DailyReturn_T-4\", \"DailyReturn_T-5\",\n    \"Close_minus_10_MA_T-1\", \"Close_minus_10_MA_T-2\", \n    \"Close_minus_10_MA_T-3\", \"Close_minus_10_MA_T-4\",\n    \"Close_minus_10_MA_T-5\", \n    \"Close_minus_20_MA_T-1\", \"Close_minus_20_MA_T-2\",\n    \"Close_minus_20_MA_T-3\", \"Close_minus_20_MA_T-4\", \"Close_minus_20_MA_T-5\",\n    \"Close_minus_50_MA_T-1\", \"Close_minus_50_MA_T-2\", \"Close_minus_50_MA_T-3\",\n    \"Close_minus_50_MA_T-4\", \"Close_minus_50_MA_T-5\", \n    \"Close_minus_200_MA_T-1\", \"Close_minus_200_MA_T-2\", \n    \"Close_minus_200_MA_T-3\", \"Close_minus_200_MA_T-4\",\n    \"Close_minus_200_MA_T-5\",\n    \"Close_minus_BollingerUpperBound_T-1\",\n    \"Close_minus_BollingerUpperBound_T-2\", \"Close_minus_BollingerUpperBound_T-3\",\n    \"Close_minus_BollingerUpperBound_T-4\", \"Close_minus_BollingerUpperBound_T-5\"\n};\n```", "```py\nConsole.WriteLine(\"\\n**** Linear Regression Model ****\");\n\n// OLS learning algorithm\nvar ols = new OrdinaryLeastSquares()\n{\n    UseIntercept = true\n};\n\n// Fit a linear regression model\nMultipleLinearRegression regFit = ols.Learn(trainX, trainY);\n\n// in-sample predictions\ndouble[] regInSamplePreds = regFit.Transform(trainX);\n\n// out-of-sample predictions\ndouble[] regOutSamplePreds = regFit.Transform(testX);\nOrdinaryLeastSquares as a learning algorithm and MultipleLinearRegression as a model. Ordinary Least Squares (OLS) is a way of training a linear regression model by minimizing and optimizing on the sum of squares of errors. A multiple linear regression model is a model where the number of input features is larger than 1\\. Lastly, in order to make predictions on data, we are using the Transform method of the MultipleLinearRegression object. We will be making predictions on both the train and test sets for our model validations in the following section.\n```", "```py\nConsole.WriteLine(\"\\n**** Linear Support Vector Machine ****\");\n// Linear SVM Learning Algorithm\nvar teacher = new LinearRegressionNewtonMethod()\n{\n    Epsilon = 2.1,\n    Tolerance = 1e-5,\n    UseComplexityHeuristic = true\n};\n\n// Train SVM\nvar svm = teacher.Learn(trainX, trainY);\n\n// in-sample predictions\ndouble[] linSVMInSamplePreds = svm.Score(trainX);\n\n// out-of-sample predictions\ndouble[] linSVMOutSamplePreds = svm.Score(testX);\n```", "```py\nMultipleLinearRegressionobject:\n```", "```py\nConsole.WriteLine(\"\\n* Linear Regression Coefficients:\");\n\nfor (int i = 0; i < features.Length; i++)\n{\n    Console.WriteLine(\"\\t{0}: {1:0.0000}\", features[i], regFit.Weights[i]);\n}\n\nConsole.WriteLine(\"\\tIntercept: {0:0.0000}\", regFit.Intercept);\n```", "```py\n// RMSE for in-sample \ndouble regInSampleRMSE = Math.Sqrt(new SquareLoss(trainX).Loss(regInSamplePreds));\n\n// RMSE for out-sample \ndouble regOutSampleRMSE = Math.Sqrt(new SquareLoss(testX).Loss(regOutSamplePreds));\n\nConsole.WriteLine(\"RMSE: {0:0.0000} (Train) vs. {1:0.0000} (Test)\", regInSampleRMSE, regOutSampleRMSE);\n```", "```py\n// R^2 for in-sample \ndouble regInSampleR2 = new RSquaredLoss(trainX[0].Length, trainX).Loss(regInSamplePreds);\n\n// R^2 for out-sample \ndouble regOutSampleR2 = new RSquaredLoss(testX[0].Length, testX).Loss(regOutSamplePreds);\n\nConsole.WriteLine(\"R^2: {0:0.0000} (Train) vs. {1:0.0000} (Test)\", regInSampleR2, regOutSampleR2);\n```", "```py\n// Scatter Plot of expected and actual\nScatterplotBox.Show(\n    String.Format(\"Actual vs. Prediction ({0})\", modelName), testY, regOutSamplePreds\n);\n```", "```py\nprivate static void ValidateModelResults(string modelName, double[] regInSamplePreds, double[] regOutSamplePreds, double[][] trainX, double[] trainY, double[][] testX, double[] testY)\n{\n    // RMSE for in-sample \n    double regInSampleRMSE = Math.Sqrt(new SquareLoss(trainX).Loss(regInSamplePreds));\n\n    // RMSE for in-sample \n    double regOutSampleRMSE = Math.Sqrt(new SquareLoss(testX).Loss(regOutSamplePreds));\n\n    Console.WriteLine(\"RMSE: {0:0.0000} (Train) vs. {1:0.0000} (Test)\", regInSampleRMSE, regOutSampleRMSE);\n\n    // R^2 for in-sample \n    double regInSampleR2 = new RSquaredLoss(trainX[0].Length, trainX).Loss(regInSamplePreds);\n\n    // R^2 for in-sample \n    double regOutSampleR2 = new RSquaredLoss(testX[0].Length, testX).Loss(regOutSamplePreds);\n\n    Console.WriteLine(\"R^2: {0:0.0000} (Train) vs. {1:0.0000} (Test)\", regInSampleR2, regOutSampleR2);\n\n    // Scatter Plot of expected and actual\n    ScatterplotBox.Show(\n        String.Format(\"Actual vs. Prediction ({0})\", modelName), testY, regOutSamplePreds\n    );\n}\n```"]