["```py\n#iris dataset classification example\nimport pandas as pd\ncolnames = ['sepal_length','sepal_width','petal_length','petal_width','class']\ndata = pd.read_csv('https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data', names=colnames)\ndata.head()\n```", "```py\ndata['setosa'] = data['class'] == 'Iris-setosa'\ndata['setosa']\n```", "```py\n# convert to streaming dataset\nfor i,row in data.sample(1).iterrows():\n    X = row[['sepal_length', 'sepal_width', 'petal_length', 'petal_width']]\n    X = X.to_dict()\n\n    y = row['setosa']\n\n    print(X)\n    print(y)\n    break\n```", "```py\n!pip install river\nfrom river import linear_model\nmodel =  linear_model.LogisticRegression()\nfor i,row in data.sample(frac=1).iterrows():\n    X = row[['sepal_length', 'sepal_width', 'petal_length', 'petal_width']]\n    X = X.to_dict()\n    y = row['setosa']\n\n    model.learn_one(X, y)\n```", "```py\npreds = model.predict_many(data[['sepal_length', 'sepal_width', 'petal_length', 'petal_width']])\nprint(preds)\n```", "```py\nfrom sklearn.metrics import accuracy_score\naccuracy_score(data['setosa'], preds)\n```", "```py\n# add a stratified train test split\nfrom sklearn.model_selection import train_test_split\ntrain,test = train_test_split(data, stratify =data['setosa'])\n```", "```py\nfrom river import linear_model,metrics\nmodel =  linear_model.LogisticRegression()\ncorrect = []\nfor i,row in train.sample(frac=1).iterrows():\n    X = row[['sepal_length', 'sepal_width', 'petal_length', 'petal_width']]\n    X = X.to_dict()\n\n    y = row['setosa']\n\n    model.predict_one(X)\n    correct.append(y == model.predict_one(X))\n\n    model.learn_one(X,y)\n```", "```py\n# this model is learning quite stable from the start\nimport matplotlib.pyplot as plt\nimport numpy as np\nplt.plot(np.cumsum(correct))\n```", "```py\n# model was not so good on out of sample\naccuracy_score(test['setosa'],model.predict_many(test[['sepal_length', 'sepal_width', 'petal_length', 'petal_width']]))\n```", "```py\n# add a stratified train test split\nfrom sklearn.model_selection import train_test_split\ntrain,test = train_test_split(data, stratify =data['class'])\n```", "```py\nfrom river import linear_model,metrics,multiclass\nmodel =  multiclass.OneVsRestClassifier(linear_model.LogisticRegression())\ncorrect = []\nfor i,row in train.sample(frac=1).iterrows():\n    X = row[['sepal_length', 'sepal_width', 'petal_length', 'petal_width']]\n    X = X.to_dict()\n\n    y = row['class']\n\n    model.predict_one(X)\n    correct.append(y == model.predict_one(X))\n    model.learn_one(X,y)\n```", "```py\n# this model predicts better after 40 observations\nimport matplotlib.pyplot as plt\nimport numpy as np\nplt.plot(np.cumsum(correct))\n```", "```py\nmodel.predict_many(test[['sepal_length', 'sepal_width', 'petal_length', 'petal_width']])\n```", "```py\n# model scores 0.63 on the test data\nfrom sklearn.metrics import accuracy_score\naccuracy_score(test['class'],model.predict_many(test[['sepal_length', 'sepal_width', 'petal_length', 'petal_width']]))\n```"]