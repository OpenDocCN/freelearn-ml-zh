["```py\n> windows(height=100,width=150)\n> plot.ts(AirPassengers)\n```", "```py\n> par(mar=c(5.1, 4.1, 4.1, 8.1), xpd=TRUE)\n> plotts(AirPassengers)\n> legend(\"topright\", inset=c(-0.2,0), \"-\",\n+        legend=c(start(AirPassengers)[1]:end(AirPassengers)[1]),\n+        col=start(AirPassengers)[1]:end(AirPassengers)[1],lty=2)\n```", "```py\n>plot.ts(austres)\n>windows(height=100,width=150)\n>par(mar=c(5.1, 4.1, 4.1, 8.1), xpd=TRUE)\n>plotts(austres)\n>legend(\"topright\", inset=c(-0.2,0), \"-\",\n+        legend=c(start(austres)[1]:end(austres)[1]),\n+        col=start(austres)[1]:end(austres)[1],lty=2)\n```", "```py\n>plot.ts(co2)\n```", "```py\n>windows(height=100,width=150)\n>par(mar=c(5.1, 4.1, 4.1, 8.1), xpd=TRUE)\n>plotts(co2)\n>legend(\"topright\",inset=c(-0.2,0),\n+        \"-\",\n+        legend=c(c(start(co2)[1]:(start(co2)[1]+3)),\". . . \",\n+                 c((end(co2)[1]-3):end(co2)[1])),\n+        col=c(c(start(co2)[1]:(start(co2)[1]+3)),NULL,\n+              c((end(co2)[1]-3):end(co2)[1])),lty=2)\n```", "```py\n>windows(height=100,width=300)\n>par(mfrow=c(1,3))\n>plot.ts(UKDriverDeaths,main=\"UK Driver Deaths\")\n>plot.ts(gas,main=\"Australian monthly gas production\")\n>plot.ts(uspop,main=\"Populations Recorded by the US Census\")\n```", "```py\n>plot(AirPassengers[1:143],AirPassengers[2:144],\n+      xlab=\"Previous Observation\",\n+      ylab=\"Current Observation\")\n```", "```py\n>windows(height=200,width=200)\n>par(mfrow=c(2,2))\n>plot.ts(WWWusage)\n>plot(WWWusage[1:99],WWWusage[2:100],\n+      xlab=\"Previous Observation\",\n+      ylab=\"Current Observation\",main=\"Lag-1 Plot\"\n+      )\n>plot(WWWusage[1:98],WWWusage[3:100],\n+      xlab=\"Previous Observation\",\n+      ylab=\"Current Observation\",main=\"Lag-2 Plot\"\n+      )\n>plot(WWWusage[1:97],WWWusage[4:100],\n+      xlab=\"Previous Observation\",\n+      ylab=\"Current Observation\",main=\"Lag-3 Plot\"\n+      )\n```", "```py\n>jpeg(\"ACF_PACF_Plots.jpeg\")\n>par(mfrow=c(2,2))\n>acf(austres,main=\"ACF of Austres Data\")\n>pacf(austres,main=\"PACF of Austres Data\")\n>acf(uspop,main=\"ACF of US Population\")\n>pacf(uspop,main=\"PACF of US Population\")\n>dev.off()\nRStudioGD \n        2 \n```", "```py\n>CarSales <- read.csv(\"../Data/Car_Sales.csv\")\n>summary(CarSales)\n     Sales       Advertising  \n Min.   :12.0   Min.   : 1.0  \n 1st Qu.:20.3   1st Qu.:15.8  \n Median :24.2   Median :23.0  \n Mean   :24.3   Mean   :28.5  \n 3rd Qu.:28.6   3rd Qu.:41.0  \n Max.   :36.5   Max.   :65.0  \n>jpeg(\"CCF_Car_Sales_Advertising.jpeg\")\n>ccf(x=CarSales$Advertising,y=CarSales$Sales,\n+     main=\"Cross Correlation Between Sales and Advertising\")\n>dev.off()\nRStudioGD \n        2 \n```", "```py\n>co2_sub <- subset(co2,start=1,end=443)\n>co2_arima <- auto.arima(co2_sub)\n>accuracy(forecast(co2_arima,h=25),x=co2[444:468])\n                  ME  RMSE   MAE      MPE   MAPE  MASE   ACF1\nTraining set  0.0185 0.283 0.225  0.00541 0.0672 0.211 0.0119\nTest set     -0.0332 0.349 0.270 -0.00912 0.0742 0.252     NA\n```", "```py\n>co2_naive <- naive(co2_sub,h=25,level=c(90,95))\n>summary(co2_naive)\n\nForecast method: Naive method\n\nModel Information:\nCall: naive(y = co2_sub, h = 25, level = c(90, 95)) \n\nResidual sd: 1.1998 \n\nError measures:\n              ME RMSE  MAE   MPE  MAPE  MASE  ACF1\nTraining set 0.1  1.2 1.07 0.029 0.319 0.852 0.705\n\nForecasts:\n         Point Forecast Lo 90 Hi 90 Lo 95 Hi 95\nDec 1995            360   358   362   357   362\nJan 1996            360   357   362   356   363\nFeb 1996            360   356   363   356   364\n\nOct 1997            360   350   369   348   371\nNov 1997            360   350   369   348   371\nDec 1997            360   350   370   348   371\n```", "```py\n>plot(co2_naive) # Output suppressed\n>accuracy(forecast(co2_naive,h=25),x=co2[444:468])\n               ME RMSE  MAE   MPE  MAPE MASE  ACF1\nTraining set 0.10 1.20 1.07 0.029 0.319 1.00 0.705\nTest set     3.54 4.09 3.55 0.972 0.974 3.32    NA\n```", "```py\n>AP_stl <- stl(AirPassengers,s.window=frequency(AirPassengers))\n>summary(AP_stl)\n Call:\n stl(x = AirPassengers, s.window = frequency(AirPassengers))\n\n Time.series components:\n    seasonal         trend       remainder    \n Min.   :-73.3   Min.   :123   Min.   :-36.2  \n 1st Qu.:-25.1   1st Qu.:183   1st Qu.: -6.4  \n Median : -5.5   Median :260   Median :  0.3  \n Mean   :  0.1   Mean   :280   Mean   : -0.2  \n 3rd Qu.: 20.4   3rd Qu.:375   3rd Qu.:  5.9  \n Max.   : 94.8   Max.   :497   Max.   : 48.6  \n IQR:\n     STL.seasonal STL.trend STL.remainder data \n      46          192        12           180  \n   %  25.2        106.4       6.8         100.0\n\n Weights: all == 1\n\n Other components: List of 5\n $ win  : Named num [1:3] 12 21 13\n $ deg  : Named int [1:3] 0 1 1\n $ jump : Named num [1:3] 2 3 2\n $ inner: int 2\n $ outer: int 0\n>jpeg(\"STL_Decompose_AirPassengers.jpeg\")\n>plot(AP_stl)\n>dev.off()\nwindows \n      2 \n>accuracy(forecast(AP_stl))\n                  ME RMSE  MAE    MPE MAPE  MASE     ACF1\nTraining set 0.00498 11.2 8.29 -0.129 3.29 0.259 0.000898\n```", "```py\n>uspop_sub <- subset(uspop,start=1,end=15)\n>USpop_ets <- ets(uspop_sub)\n>summary(USpop_ets)\nETS(A,A,N) \n\nCall:\n ets(y = uspop_sub) \n\n  Smoothing parameters:\n    alpha = 0.8922 \n    beta  = 0.8922 \n\n  Initial states:\n    l = 2.3837 \n    b = 1.7232 \n\n  sigma:  1.68\n\n AIC AICc  BIC \n66.2 72.8 69.7 \n\nTraining set error measures:\n               ME RMSE MAE  MPE MAPE   MASE  ACF1\nTraining set 1.11 1.68 1.4 3.26  4.6 0.0318 -0.28\n```", "```py\n>forecast(USpop_ets,h=4)\n     Point Forecast Lo 80 Hi 80 Lo 95 Hi 95\n1940            139   137   141   136   142\n1950            156   151   160   149   162\n1960            172   165   180   161   183\n1970            189   178   200   173   205\n>plot(forecast(USpop_ets,h=4))\n>accuracy(forecast(USpop_ets,h=4),x=uspop[16:19])\n               ME RMSE  MAE   MPE MAPE  MASE  ACF1\nTraining set 1.11 1.68 1.40 3.259 4.60 0.165 -0.28\nTest set     2.33 9.02 8.26 0.578 4.86 0.973    NA\n>accuracy(forecast(naive(uspop_sub),h=4),x=uspop[16:19])\n                ME  RMSE   MAE  MPE MAPE MASE  ACF1\nTraining set  8.49  9.97  8.49 21.7 21.7 1.00 0.778\nTest set     43.58 51.35 43.58 24.2 24.2 5.13    NA\n```", "```py\n>summary(co2_arima)\nSeries: co2_sub \nARIMA(2,1,2)(1,1,2)[12] \n\nCoefficients:\n        ar1    ar2     ma1     ma2    sar1   sma1    sma2\n      0.033  0.250  -0.369  -0.246  -0.828  0.014  -0.750\ns.e.  0.341  0.122   0.342   0.197   0.230  0.210   0.173\n\nsigma^2 estimated as 0.0837:  log likelihood=-73.4\nAIC=163   AICc=163   BIC=195\n\nTraining set error measures:\n                 ME  RMSE   MAE     MPE   MAPE  MASE   ACF1\nTraining set 0.0185 0.283 0.225 0.00541 0.0672 0.179 0.0119\n```", "```py\n>jpeg(\"CO2_Forecasts.jpeg\")\n>plot(forecast(co2_arima,h=25))\n```", "```py\n>gas_sub <- subset(gas,start=1,end=450)\n>gas_nnetar <- nnetar(gas_sub,p=25,P=12,size=10,repeats=10)\n>plot(forecast(gas_nnetar,h=26))\n>accuracy(forecast(gas_nnetar,h=26),x=gas[451:476])\n               ME RMSE  MAE    MPE  MAPE  MASE    ACF1\nTraining set    2  318  237 -0.127  1.78 0.148 -0.0879\nTest set     5033 6590 5234 10.566 10.94 3.276      NA\n```", "```py\n>get_Accuracy<- function(ts){\n+   tsname <- deparse(substitute(ts))\n+   Acc_Mat <- data.frame(TSName = rep(tsname,6),Models=c(\n+               \"ETS\",\"STL\",\"LM\",\"ARIMA\",\"NNETAR\",\"TBATS\"),\n+                ME=numeric(6),RMSE=numeric(6),MAE=numeric(6),\n+                MPE=numeric(6), MAPE=numeric(6),MASE=numeric(6))\n+   for(i in 1:nrow(Acc_Mat)){\n+     Acc_Mat[1,3:8] <- accuracy(ets(ts)$fitted,ts)[1:6]\n+     if(frequency(ts)>1) Acc_Mat[2,3:8] <- accuracy(ts-stl(ts,\n+            frequency(ts))$time.series[,3],ts)[1:6] else\n+       Acc_Mat[2,3:8] <- NA\n+     Acc_Mat[3,3:8] <- accuracy(fitted(lm(ts~I(1:length(ts)))),ts)[1:6]\n+     Acc_Mat[4,3:8] <- accuracy(auto.arima(ts)$fitted,ts)[1:6]\n+     Acc_Mat[5,3:8] <- accuracy(fitted(nnetar(ts)),ts)[1:6]\n+     Acc_Mat[6,3:8] <- accuracy(fitted(tbats(ts)),ts)[1:6]\n+   }\n+   Acc_Mat\n+ }\n> TSDF <- data.frame(TSName=character(0),Models=character(0),\n+ Accuracy=numeric(0))\n> TSDF <- rbind(TSDF,get_Accuracy(AirPassengers))\n> TSDF <- rbind(TSDF,get_Accuracy(BJsales))\n> TSDF <- rbind(TSDF,get_Accuracy(JohnsonJohnson))\n> TSDF <- rbind(TSDF,get_Accuracy(LakeHuron))\n> TSDF <- rbind(TSDF,get_Accuracy(Nile))\n> TSDF <- rbind(TSDF,get_Accuracy(UKgas))\n> TSDF <- rbind(TSDF,get_Accuracy(UKDriverDeaths))\n> TSDF <- rbind(TSDF,get_Accuracy(USAccDeaths))\n> TSDF <- rbind(TSDF,get_Accuracy(WWWusage))\n> TSDF <- rbind(TSDF,get_Accuracy(airmiles))\n> TSDF <- rbind(TSDF,get_Accuracy(austres))\n> TSDF <- rbind(TSDF,get_Accuracy(co2))\n> TSDF <- rbind(TSDF,get_Accuracy(discoveries))\n> TSDF <- rbind(TSDF,get_Accuracy(lynx))\n> TSDF <- rbind(TSDF,get_Accuracy(nhtemp))\n> TSDF <- rbind(TSDF,get_Accuracy(nottem))\n> TSDF <- rbind(TSDF,get_Accuracy(presidents))\nIn addition: Warning message:\nIn ets(ts) :\n  Missing values encountered. Using longest contiguous portion of time series\n> TSDF <- rbind(TSDF,get_Accuracy(treering))\n> TSDF <- rbind(TSDF,get_Accuracy(gas))\n> TSDF <- rbind(TSDF,get_Accuracy(uspop))\n> TSDF <- rbind(TSDF,get_Accuracy(sunspots))\n> write.csv(TSDF,\"../Output/TS_All_Dataset_Accuracies.csv\",row.names=F)\n```", "```py\n>uspop_bagg_ets <- baggedETS(uspop_sub,bootstrapped_series = \n+                               bld.mbb.bootstrap(uspop_sub, 500))\n>forecast(uspop_bagg_ets,h=4);subset(uspop,start=16,end=19)\n     Point Forecast Lo 100 Hi 100\n1940            141    136    145\n1950            158    150    165\n1960            175    164    184\n1970            193    178    204\nTime Series:\nStart = 1940 \nEnd = 1970 \nFrequency = 0.1 \n[1] 132 151 179 203\n>plot(forecast(uspop_bagg_ets,h=4))\n```", "```py\n>forecast(uspop_bagg_ets,h=4)\n     Point Forecast Lo 100 Hi 100\n1940            141    136    145\n1950            158    150    165\n1960            175    164    184\n1970            193    178    204\n>forecast(USpop_ets,h=4,level=99.99)\n     Point Forecast Lo 99.99 Hi 99.99\n1940            139      133      146\n1950            156      142      169\n1960            172      150      194\n1970            189      157      221\n```", "```py\n>accuracy(forecast(USpop_ets,h=4),x=uspop[16:19])\n               ME RMSE  MAE   MPE MAPE  MASE  ACF1\nTraining set 1.11 1.68 1.40 3.259 4.60 0.165 -0.28\nTest set     2.33 9.02 8.26 0.578 4.86 0.973    NA\n>accuracy(forecast(uspop_bagg_ets,h=4),x=subset(uspop,start=16,end=19))\n                 ME RMSE  MAE    MPE MAPE   MASE  ACF1 Theil's U\nTraining set  1.137 1.44 1.24  2.226 4.48 0.0283 0.563        NA\nTest set     -0.359 7.87 7.48 -0.995 4.63 0.1700 0.296     0.299\n```", "```py\n>accuracy(forecast(co2_arima,h=25),x=co2[444:468])\n                  ME  RMSE   MAE      MPE   MAPE  MASE   ACF1\nTraining set  0.0185 0.283 0.225  0.00541 0.0672 0.211 0.0119\nTest set     -0.0332 0.349 0.270 -0.00912 0.0742 0.252     NA\n>AP_Ensemble_02 <- hybridModel(co2_sub,models=\"ae\")\nFitting the auto.arima model\nFitting the ets model\n>accuracy(AP_Ensemble_02,h=25,x=co2[444:468])\n             ME  RMSE   MAE     MPE   MAPE    ACF1 Theil's U\nTest set 0.0258 0.271 0.219 0.00755 0.0653 0.00289     0.226\n>AP_Ensemble_03 <- hybridModel(co2_sub,models=\"aen\")\nFitting the auto.arima model\nFitting the ets model\nFitting the nnetar model\n>accuracy(AP_Ensemble_03,h=25,x=co2[444:468])\n            ME  RMSE   MAE    MPE  MAPE  ACF1 Theil's U\nTest set 0.017 0.304 0.245 0.0049 0.073 0.282      0.25\n>AP_Ensemble_04 <- hybridModel(co2_sub,models=\"aens\")\nFitting the auto.arima model\nFitting the ets model\nFitting the nnetar model\nFitting the stlm model\n>accuracy(AP_Ensemble_04,h=25,x=co2[444:468])\n             ME  RMSE   MAE     MPE  MAPE  ACF1 Theil's U\nTest set 0.0165 0.275 0.221 0.00478 0.066 0.209     0.226\n>AP_Ensemble_05 <- hybridModel(co2_sub,models=\"aenst\")\nFitting the auto.arima model\nFitting the ets model\nFitting the nnetar model\nFitting the stlm model\nFitting the tbats model\n>accuracy(AP_Ensemble_05,h=25,x=co2[444:468])\n             ME  RMSE   MAE     MPE   MAPE  ACF1 Theil's U\nTest set 0.0123 0.267 0.216 0.00348 0.0645 0.153      0.22\n```"]