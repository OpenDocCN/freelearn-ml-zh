- en: '10'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '10'
- en: Machine Learning Pipelines with Kubeflow on Amazon EKS
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Amazon EKS 上使用 Kubeflow 的机器学习管道
- en: In [*Chapter 9*](B18638_09.xhtml#_idTextAnchor187), *Security, Governance, and
    Compliance Strategies*, we discussed a lot of concepts and solutions that focus
    on the other challenges and issues we need to worry about when dealing with **machine
    learning** (**ML**) requirements. You have probably realized by now that ML practitioners
    have a lot of responsibilities and work to do outside model training and deployment!
    Once a model gets deployed into production, we would have to monitor the model
    and ensure that we are able to detect and manage a variety of issues. In addition
    to this, ML engineers might need to build ML pipelines to automate the different
    steps in the ML life cycle. To ensure that we reliably deploy ML models in production,
    as well as streamline the ML life cycle, it is best that we learn and apply the
    different principles of **machine learning operations** (**MLOps**). With MLOps,
    we will make use of the tried-and-tested tools and practices from **software engineering**,
    **DevOps**, and **data engineering** to *productionalize* ML models. These include
    utilizing a variety of automation techniques to convert manually executed Jupyter
    notebooks into automated ML workflows and pipelines.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [*第9章*](B18638_09.xhtml#_idTextAnchor187) “安全、治理和合规策略” 中，我们讨论了许多概念和解决方案，这些概念和解决方案侧重于我们在处理
    **机器学习** (**ML**) 需求时需要关注的其他挑战和问题。你现在可能已经意识到，ML 实践者有很多责任和工作要做，而不仅仅是模型训练和部署！一旦模型部署到生产环境中，我们就必须监控模型，并确保我们能够检测和管理各种问题。此外，ML
    工程师可能需要构建 ML 管道来自动化 ML 生命周期中的不同步骤。为了确保我们能够可靠地将 ML 模型部署到生产环境中，以及简化 ML 生命周期，最好我们学习和应用
    **机器学习操作** (**MLOps**) 的不同原则。通过 MLOps，我们将利用来自 **软件工程**、**DevOps** 和 **数据工程** 的经过验证的工具和实践来
    *生产化* ML 模型。这包括利用各种自动化技术将手动执行的 Jupyter 笔记本转换为自动化的 ML 工作流和管道。
- en: In this chapter, we will build and run an automated MLOps pipeline using **Kubeflow**
    on top of **Kubernetes** and **Amazon Elastic Kubernetes Service** (**EKS**).
    If you are wondering what these are, do not worry, as we will discuss these tools,
    platforms, and services in detail later! Once we have a better understanding of
    how they work, we will dive deeper into the recommended strategies and best practices
    when building more complex pipelines, along with securing and scaling our setup.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用 **Kubeflow** 在 **Kubernetes** 和 **Amazon Elastic Kubernetes Service**
    (**EKS**) 上构建和运行一个自动化的 MLOps 管道。如果你想知道这些是什么，请不要担心，我们将在后面详细讨论这些工具、平台和服务！一旦我们更好地理解了它们的工作原理，我们将更深入地探讨构建更复杂管道时推荐的策略和最佳实践，以及确保我们的设置安全并扩展。
- en: 'That said, in this chapter, we will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，在本章中，我们将涵盖以下主题：
- en: Diving deeper into Kubeflow, Kubernetes, and EKS
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 深入了解 Kubeflow、Kubernetes 和 EKS
- en: Preparing the essential prerequisites
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 准备基本先决条件
- en: Setting up Kubeflow on Amazon EKS
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Amazon EKS 上设置 Kubeflow
- en: Running our first Kubeflow pipeline
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行我们的第一个 Kubeflow 管道
- en: Using the Kubeflow Pipelines SDK to build ML workflows
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Kubeflow Pipelines SDK 构建 ML 工作流
- en: Cleaning up
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 清理
- en: Recommended strategies and best practices
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 推荐策略和最佳实践
- en: Once we reach the end of this chapter, we should have more confidence in building
    complex ML pipelines using the tools, platforms, and services we have learned
    about in this chapter.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们完成本章，我们应该更有信心使用本章中学习到的工具、平台和服务构建复杂的 ML 管道。
- en: Technical requirements
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'Before we start, it is important that we have the following ready:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始之前，以下准备工作非常重要：
- en: A web browser (preferably Chrome or Firefox)
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个网络浏览器（最好是 Chrome 或 Firefox）
- en: Access to the Cloud9 environment that was prepared in the *Creating your Cloud9
    environment* and *Increasing the Cloud9 storage* sections of [*Chapter 1*](B18638_01.xhtml#_idTextAnchor017),
    *Introduction to ML Engineering on AWS*
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问在 [*第1章*](B18638_01.xhtml#_idTextAnchor017) “AWS 机器学习工程简介” 中的 *创建您的 Cloud9
    环境* 和 *增加 Cloud9 存储空间* 部分准备的 Cloud9 环境
- en: 'The Jupyter notebooks, source code, and other files used for each chapter are
    available at this repository: [https://github.com/PacktPublishing/Machine-Learning-Engineering-on-AWS](https://github.com/PacktPublishing/Machine-Learning-Engineering-on-AWS).'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 每章使用的 Jupyter 笔记本、源代码和其他文件都存放在这个仓库中：[https://github.com/PacktPublishing/Machine-Learning-Engineering-on-AWS](https://github.com/PacktPublishing/Machine-Learning-Engineering-on-AWS)。
- en: Important Note
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: It is recommended that you use an IAM user with limited permissions instead
    of the root account when running the examples in this book. If you are just starting
    out with using AWS, you can proceed with using the root account in the meantime.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 建议在运行本书中的示例时，使用具有有限权限的IAM用户而不是root账户。如果您刚开始使用AWS，您可以在同时继续使用root账户。
- en: Diving deeper into Kubeflow, Kubernetes, and EKS
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 深入了解Kubeflow、Kubernetes和EKS
- en: 'In [*Chapter 3*](B18638_03.xhtml#_idTextAnchor060), *Deep Learning Containers*,
    we learned that containers help guarantee the consistency of environments where
    applications can run. In the hands-on solutions of the said chapter, we worked
    with two containers—one container for training our deep learning model and another
    one for deploying the model. In larger applications, we will most likely encounter
    the usage of multiple containers running a variety of applications, databases,
    and automated scripts. Managing these containers is not easy and creating custom
    scripts to manage the uptime and scaling of the running containers is an overhead
    we wish to avoid. That said, it is recommended that you use a tool that helps
    you focus on what you need to accomplish. One of the available tools that can
    help us deploy, scale, and manage containerized applications is **Kubernetes**.
    This is an open source container orchestration system that provides a framework
    for running resilient distributed systems. It automatically takes care of the
    scaling and failover work behind the scenes—this means that if your container
    stops working for some reason, Kubernetes will automatically replace it. *Cool,
    right?* Of course, this is only one of the cool features available. In addition
    to this, Kubernetes provides the following:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第3章*](B18638_03.xhtml#_idTextAnchor060)“深度学习容器”中，我们了解到容器有助于保证应用程序可以运行的运行环境的一致性。在该章节的动手实践中，我们使用了两个容器——一个用于训练我们的深度学习模型，另一个用于部署模型。在更大的应用程序中，我们很可能会遇到运行各种应用程序、数据库和自动化脚本的多个容器的使用。管理这些容器并不容易，创建自定义脚本来管理运行容器的正常运行时间和扩展是一个我们希望避免的开销。因此，建议您使用一个可以帮助您专注于需要完成的任务的工具。可以帮助我们部署、扩展和管理容器化应用程序的可用工具之一是**Kubernetes**。这是一个开源的容器编排系统，为运行弹性分布式系统提供了一个框架。它自动处理背后的扩展和故障转移工作——这意味着如果您的容器由于某种原因停止工作，Kubernetes将自动替换它。“酷，不是吗？”当然，这只是可用酷功能之一。除此之外，Kubernetes还提供了以下功能：
- en: Automated deployments and rollbacks
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动部署和回滚
- en: Secret (credentials) management
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 密钥（凭证）管理
- en: Managing and distributing network traffic to the containers
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理和分配网络流量到容器
- en: Storage orchestration
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存储编排
- en: Making the most of servers (nodes) by fitting containers accordingly depending
    on the CPU and RAM requirements
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过根据CPU和RAM需求相应地调整容器，最大限度地利用服务器（节点）
- en: 'Note that this list is not exhaustive, and there are more features available
    when using Kubernetes. When using Kubernetes, it is essential that we have a good
    understanding of the terminology, concepts, and tools used. In *Figure 10.1*,
    we can see an example of a Kubernetes cluster:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，这个列表并不详尽，使用Kubernetes时还有更多功能可用。在使用Kubernetes时，我们理解术语、概念和工具至关重要。在*图10.1*中，我们可以看到一个Kubernetes集群的示例：
- en: '![Figure 10.1 – An example Kubernetes cluster ](img/B18638_10_001.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![图10.1 – 一个示例Kubernetes集群](img/B18638_10_001.jpg)'
- en: Figure 10.1 – An example Kubernetes cluster
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.1 – 一个示例Kubernetes集群
- en: 'Let’s quickly define and describe some of the concepts presented in *Figure
    10.1*:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速定义并描述一下*图10.1*中展示的一些概念：
- en: '**Node**: This maps to a virtual or physical machine (or an EC2 instance) that
    contains running containerized applications.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**节点**：这对应于包含运行容器化应用程序的虚拟或物理机器（或EC2实例）。'
- en: '**Cluster**: This is a group of nodes (or servers).'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**集群**：这是一个由节点（或服务器）组成的组。'
- en: '**Pod**: This is a group of one or more application containers that represent
    a single unit of service (running inside a node).'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Pod**：这是一个或多个应用程序容器的组，代表单个服务单元（在节点内部运行）。'
- en: '**Control Plane**: This manages the worker nodes (servers) along with the Pods
    in a Kubernetes cluster.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**控制平面**：它管理Kubernetes集群中的工作节点（服务器）以及Pod。'
- en: '**kubectl**: This is the command-line tool for running commands to manage Kubernetes
    resources.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**kubectl**：这是用于运行管理Kubernetes资源的命令行工具。'
- en: Note that this is a simplified list as we won’t dive deep into the other concepts
    and terminology in this chapter. Knowing them should be sufficient to help us
    go through the hands-on solutions of this chapter.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，这是一个简化的列表，因为我们不会深入探讨本章中其他的概念和术语。了解它们应该足以帮助我们完成本章的动手实践解决方案。
- en: When running Kubernetes on AWS, it is recommended that you use a managed service
    such as **Amazon EKS**, which helps manage a lot of things for us behind the scenes—including
    the availability and scalability of control plane nodes (which are the nodes focused
    on storing cluster data, ensuring application availability, and other important
    processes and tasks in the cluster). When using Amazon EKS, we no longer need
    to worry about the management of the control plane instances since AWS automatically
    scales these instances and replaces any unhealthy instances for us, too. In addition
    to these, Amazon EKS helps engineers work with other AWS services and resources
    (for example, **AWS IAM**, **AWS Application Load Balancer**, and **Amazon CloudWatch**)
    seamlessly when using Kubernetes.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在AWS上运行Kubernetes时，建议您使用像**Amazon EKS**这样的托管服务，它可以帮助我们在幕后管理很多事情——包括控制平面节点（这些节点专注于存储集群数据、确保应用程序可用性以及集群中的其他重要流程和任务）。当使用Amazon
    EKS时，我们不再需要担心控制平面实例的管理，因为AWS会自动扩展这些实例，并为我们替换任何不健康的实例。除此之外，Amazon EKS还帮助工程师在使用Kubernetes时无缝地与其他AWS服务和资源（例如，**AWS
    IAM**、**AWS应用程序负载均衡器**和**Amazon CloudWatch**）一起工作。
- en: Note
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: It is possible to set up the autoscaling of nodes with Kubernetes and Amazon
    EKS. This is configured using solutions such as **Kubernetes Cluster Autoscaler**.
    For more information, feel free to check out [https://aws.github.io/aws-eks-best-practices/cluster-autoscaling/](https://aws.github.io/aws-eks-best-practices/cluster-autoscaling/).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Kubernetes和Amazon EKS可以设置节点的自动扩展。这可以通过诸如**Kubernetes集群自动扩展器**等解决方案进行配置。更多信息，请随时查看[https://aws.github.io/aws-eks-best-practices/cluster-autoscaling/](https://aws.github.io/aws-eks-best-practices/cluster-autoscaling/)。
- en: The primary tool when managing EKS clusters is the **eksctl** command-line tool.
    With this tool, EKS clusters can easily be created, updated, and deleted with
    a single command. Once the clusters become available, we can proceed with using
    other tools such as the **kubectl** command-line tool to create and manage Kubernetes
    resources inside the clusters.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 管理EKS集群的主要工具是**eksctl**命令行工具。使用此工具，可以轻松地通过单个命令创建、更新和删除EKS集群。一旦集群可用，我们就可以使用其他工具，如**kubectl**命令行工具，在集群内部创建和管理Kubernetes资源。
- en: 'Due to the power and potential of Kubernetes, a lot of other tools have been
    built on top of it. These include **Kubeflow**—a popular open source ML platform
    focused on helping data scientists and ML engineers orchestrate and manage complex
    ML workflows on Kubernetes. Kubeflow brings together a collection of data science
    and ML tools that are already familiar to data scientists and ML engineers. These
    include the following:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Kubernetes的强大和潜力，许多其他工具都建立在它之上。其中包括**Kubeflow**——一个流行的开源机器学习平台，专注于帮助数据科学家和机器学习工程师在Kubernetes上编排和管理复杂的机器学习工作流程。Kubeflow汇集了数据科学家和机器学习工程师已经熟悉的机器学习和数据科学工具集。以下是一些包括在内的工具：
- en: '**JupyterHub** – This is a hub that helps spawn and manage multiple Jupyter
    notebooks (where data scientists can run code for ML experiments).'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**JupyterHub** – 这是一个帮助生成和管理多个Jupyter笔记本（数据科学家可以在其中运行机器学习实验代码）的枢纽。'
- en: '**Argo Workflows** – This is a workflow engine on which automated pipelines
    run.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Argo Workflows** – 这是一个运行自动化管道的工作流引擎。'
- en: '**Knative Serving** – This enables rapid deployment of serverless containers
    (where ML models can run).'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Knative Serving** – 这使得快速部署无服务器容器（其中可以运行机器学习模型）成为可能。'
- en: '**Istio** – This is a service mesh that provides a way to easily manage network
    configuration and communication between the deployed microservices in the cluster.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Istio** – 这是一个服务网格，提供了一种轻松管理集群中部署的微服务之间的网络配置和通信的方式。'
- en: '**MinIO** – This is a multi-cloud object storage solution that is native to
    Kubernetes.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**MinIO** – 这是一个原生支持Kubernetes的多云对象存储解决方案。'
- en: With Kubeflow, ML practitioners can perform ML experiments and deployments without
    worrying about the infrastructure. At the same time, automated ML workflows and
    pipelines can easily be deployed and managed using a variety of tools available
    in Kubeflow (such as **Kubeflow Pipelines** and the **Kubeflow Pipelines SDK**).
    When properly built, these pipelines can help data scientists and ML engineers
    save a significant amount of time through the automation of different steps of
    the ML process. At the same time, these pipelines can enable automated model retraining
    that will help ensure deployed models are updated using the latest training data
    available.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Kubeflow，机器学习从业者可以在不担心基础设施的情况下执行机器学习实验和部署。同时，可以使用Kubeflow中提供的各种工具（如**Kubeflow
    Pipelines**和**Kubeflow Pipelines SDK**）轻松部署和管理自动化的机器学习工作流和管道。当这些管道被正确构建时，它们可以帮助数据科学家和机器学习工程师通过自动化机器学习过程中的不同步骤节省大量时间。同时，这些管道可以启用自动模型重新训练，这将有助于确保部署的模型使用最新的训练数据进行更新。
- en: Now that we have a better idea of the tools we are going to use, we will proceed
    with preparing the essential prerequisites for running ML pipelines using Kubeflow
    on Amazon EKS!
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们对将要使用的工具有了更好的了解，我们将继续准备使用Kubeflow在Amazon EKS上运行机器学习管道所需的基本先决条件！
- en: Preparing the essential prerequisites
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备基本先决条件
- en: 'In this section, we will work on the following:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将进行以下工作：
- en: Preparing the IAM role for the EC2 instance of the Cloud9 environment
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 准备Cloud9环境EC2实例的IAM角色
- en: Attaching the IAM role to the EC2 instance of the Cloud9 environment
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将IAM角色附加到Cloud9环境的EC2实例
- en: Updating the Cloud9 environment with the essential prerequisites
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新Cloud9环境的基本先决条件
- en: Let’s work on and prepare the essential prerequisites one by one.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐一工作和准备基本先决条件。
- en: Preparing the IAM role for the EC2 instance of the Cloud9 environment
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备Cloud9环境EC2实例的IAM角色
- en: In order for us to securely create and manage **Amazon EKS** and **AWS CloudFormation**
    resources from inside the EC2 instance of the Cloud9 environment, we would need
    to attach an IAM role to the EC2 instance. In this section, we will prepare this
    IAM role and configure it with the permissions required to create and manage the
    other resources in this chapter.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 为了我们能够从Cloud9环境的EC2实例内部安全地创建和管理**Amazon EKS**和**AWS CloudFormation**资源，我们需要将IAM角色附加到EC2实例。在本节中，我们将准备这个IAM角色，并配置它所需的权限以创建和管理本章中的其他资源。
- en: Note
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: We will discuss **Amazon EKS** and **AWS CloudFormation** in more detail in
    the *Setting up Kubeflow on Amazon EKS* section of this chapter.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的“在Amazon EKS上设置Kubeflow”部分，我们将更详细地讨论**Amazon EKS**和**AWS CloudFormation**。
- en: 'In the next set of steps, we will navigate to the IAM console and create an
    IAM role that will be attached to the EC2 instance (of the Cloud9 environment)
    later in this chapter:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一组步骤中，我们将导航到IAM控制台并创建一个IAM角色，该角色将在本章后面附加到Cloud9环境的EC2实例：
- en: 'Navigate to the IAM console by typing `iam` into the search bar and then clicking
    on **IAM** from the list of results, as highlighted in *Figure 10.2*:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照图10.2中所示，在搜索栏中输入`iam`，然后从结果列表中点击**IAM**导航到IAM控制台：
- en: '![Figure 10.2 – Navigating to the IAM console ](img/B18638_10_002.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![图10.2 – 导航到IAM控制台](img/B18638_10_002.jpg)'
- en: Figure 10.2 – Navigating to the IAM console
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.2 – 导航到IAM控制台
- en: In *Figure 10.2*, we have one of the ways to navigate to the IAM console. Another
    option would be to click on the **Services** drop-down menu (not shown in the
    preceding screenshot) and locate the **IAM** service under the **Security, Identity,
    and Compliance** group of services.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在*图10.2*中，我们展示了导航到IAM控制台的一种方法。另一种选择是点击**服务**下拉菜单（如图所示截图未展示）并在**安全、身份和合规**服务组下找到**IAM**服务。
- en: In the left-hand sidebar, locate and click on **Roles** (under **Access management**).
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧边栏中找到并点击**角色**（在**访问管理**下）。
- en: In the upper-right corner of the page, locate and click on the **Create role**
    button.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在页面右上角找到并点击**创建角色**按钮。
- en: 'In the **Select trusted entity** page (which is step 1 of 3), select **AWS
    service** under **Trusted entity type**, as highlighted in *Figure 10.3*:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**选择受信任实体**页面（这是3个步骤中的第1步），在**受信任实体类型**下选择**AWS服务**，如图10.3所示：
- en: '![Figure 10.3 – The Select trusted entity page ](img/B18638_10_003.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![图10.3 – 选择受信任实体页面](img/B18638_10_003.jpg)'
- en: Figure 10.3 – The Select trusted entity page
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.3 – 选择受信任实体页面
- en: Here, we also make sure that the **EC2** option is selected under **Use case
    > Common use cases**. Once we have reviewed the selected options, we can click
    on the **Next** button afterward.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们还要确保在**用例 > 常见用例**下选择了**EC2**选项。一旦我们审查了所选选项，我们就可以点击后续的**下一步**按钮。
- en: 'In the `administrator` into the filter search box (as highlighted in *Figure
    10.4*), and then press the *Enter* key to filter the list of results. Toggle on
    the checkbox corresponding to the **AdministratorAccess** policy, scroll down
    to the bottom of the page, and then click on the **Next** button:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在管理员过滤器搜索框中输入`管理员`（如图10.4所示高亮显示），然后按*Enter*键过滤结果列表。勾选对应于**管理员访问**策略的复选框，滚动到页面底部，然后点击**下一步**按钮：
- en: '![Figure 10.4 – The Add permissions page ](img/B18638_10_004.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![图10.4 – 添加权限页面](img/B18638_10_004.jpg)'
- en: Figure 10.4 – The Add permissions page
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.4 – 添加权限页面
- en: Make sure that you do not accidentally select the incorrect permission from
    the list of filtered results since there are permissions with similar names available.
    The **AdministratorAccess** policy should have the **Description** value of **Provides
    full access to AWS services and resources**.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你不会不小心从过滤结果列表中选择错误的权限，因为有一些权限具有相似的名字。**管理员访问**策略应该有**描述**值为**提供对AWS服务和资源的完全访问**。
- en: Important Note
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: In this chapter, the usage of the `AdministratorAccess` policy will help us
    avoid different permission-related issues while we are setting things up. When
    setting this up in your work environment, you should use a custom policy that
    only adds the permission the EC2 instance needs to run the application (and nothing
    more).
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，使用`AdministratorAccess`策略将帮助我们避免在设置过程中遇到不同的权限相关问题。当你在工作环境中设置时，你应该使用一个自定义策略，该策略仅添加EC2实例运行应用程序所需的权限（而不添加更多）。
- en: In the `kubeflow-on-eks` in the **Role name** input box. Scroll down to the
    bottom of the page and then click on the **Create role** button.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**角色名称**输入框中输入`kubeflow-on-eks`。滚动到页面底部，然后点击**创建角色**按钮。
- en: Wasn’t that easy! At this point, we should have an IAM role we can attach to
    AWS resources such as EC2 instances.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 难道不是很简单吗！到这一点，我们应该有一个可以附加到AWS资源（如EC2实例）的IAM角色。
- en: Attaching the IAM role to the EC2 instance of the Cloud9 environment
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将IAM角色附加到Cloud9环境的EC2实例
- en: Now that we have the IAM role ready, we can now proceed with attaching this
    IAM role to the EC2 instance.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了准备好的IAM角色，我们可以继续将此IAM角色附加到EC2实例。
- en: Important Note
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: In this chapter, we will create and manage our resources in the `us-west-2`)
    region. Make sure that you have set the correct region before proceeding with
    the next steps.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将创建和管理我们在`us-west-2`区域中的资源。确保在继续下一步之前，你已经设置了正确的区域。
- en: 'In the next set of steps, we will use the AWS Management Console to attach
    the IAM role to the EC2 instance where our Cloud9 environment is running:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的步骤中，我们将使用AWS管理控制台将IAM角色附加到运行Cloud9环境的EC2实例：
- en: 'Navigate to the Cloud9 console by typing `cloud9` in the search bar and then
    selecting **Cloud9** from the list of results:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在搜索栏中输入`cloud9`，然后从结果列表中选择**Cloud9**：
- en: '![Figure 10.5 – Navigating to the Cloud9 console ](img/B18638_10_005.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![图10.5 – 导航到Cloud9控制台](img/B18638_10_005.jpg)'
- en: Figure 10.5 – Navigating to the Cloud9 console
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '![图10.5 – 导航到Cloud9控制台](img/B18638_10_005.jpg)'
- en: In *Figure 10.5*, we have one of the ways to navigate to the Cloud9 service
    page. Another option would be to click on the **Services** drop-down menu (not
    shown in the preceding screenshot) and locate the **Cloud9** service in the **Developer
    Tools** group of services.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在图10.5中，我们展示了导航到Cloud9服务页面的方法之一。另一种选择是点击**服务**下拉菜单（在先前的屏幕截图中未显示）并定位到**开发者工具**组中的**Cloud9**服务。
- en: 'Locate and select the Cloud9 environment that we prepared in [*Chapter 1*](B18638_01.xhtml#_idTextAnchor017),
    *Introduction to ML Engineering on AWS*:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定位并选择我们在[*第1章*](B18638_01.xhtml#_idTextAnchor017)“AWS机器学习工程简介”中准备好的Cloud9环境：
- en: '![Figure 10.6 – Locating the View details button ](img/B18638_10_006.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![图10.6 – 定位查看详情按钮](img/B18638_10_006.jpg)'
- en: Figure 10.6 – Locating the View details button
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.6 – 定位查看详情按钮
- en: Once you have selected the Cloud9 environment, click on the **View details**
    button located in the upper-right portion of the page (as highlighted in *Figure
    10.6*).
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你选择了Cloud9环境，点击页面右上角（如图10.6所示高亮显示）的**查看详情**按钮。
- en: Note
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: You might also decide to create a new Cloud9 environment from scratch and increase
    the size of the volume attached to the EC2 instance where the environment is running.
    If that’s the case, make sure to follow the step-by-step instructions specified
    in the *Creating your Cloud9 environment* and *Increasing the Cloud9 storage*
    sections of [*Chapter 1*](B18638_01.xhtml#_idTextAnchor017), *Introduction to
    ML Engineering on AWS*.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可能决定从头创建一个新的 Cloud9 环境，并增加运行环境的 EC2 实例的卷大小。如果是这样，请确保遵循 [*第 1 章*](B18638_01.xhtml#_idTextAnchor017)
    *AWS 机器学习工程简介* 中 *创建您的 Cloud9 环境* 和 *增加 Cloud9 存储* 部分的逐步说明。
- en: 'Under **Environment details**, locate and click on the **Go To Instance** link,
    as highlighted in *Figure 10.7*:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **环境详情** 下，找到并点击如图 10.7 所示的高亮部分 **转到实例** 链接：
- en: '![Figure 10.7 – Locating and clicking on the Go To Instance button ](img/B18638_10_007.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.7 – 定位并点击“转到实例”按钮](img/B18638_10_007.jpg)'
- en: Figure 10.7 – Locating and clicking on the Go To Instance button
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.7 – 定位并点击“转到实例”按钮
- en: This should redirect you to the EC2 console where you should see the specific
    EC2 instance where the Cloud9 environment is running.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该会将您重定向到 EC2 控制台，在那里您应该能看到 Cloud9 环境正在运行的特定 EC2 实例。
- en: 'Toggle on the checkbox corresponding to the EC2 instance (starting with `aws-cloud9`),
    and then open the **Actions** drop-down menu, as highlighted in *Figure 10.8*:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开与 EC2 实例（以 `aws-cloud9` 开头）对应的复选框，然后打开如图 10.8 所示的高亮部分 **操作** 下拉菜单：
- en: '![Figure 10.8 – Modifying the IAM role of the EC2 instance  ](img/B18638_10_008.jpg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.8 – 修改 EC2 实例的 IAM 角色](img/B18638_10_008.jpg)'
- en: Figure 10.8 – Modifying the IAM role of the EC2 instance
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.8 – 修改 EC2 实例的 IAM 角色
- en: Next, we locate and click on the **Modify IAM role** option under the list of
    options under **Security**. This should redirect you to a page where you can select
    the specific IAM role to attach to the selected EC2 instance.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们在 **安全** 选项下的列表中找到并点击 **修改 IAM 角色** 选项。这应该会将您重定向到一个页面，您可以在其中选择要附加到所选 EC2
    实例的特定 IAM 角色。
- en: 'In the IAM role drop-down menu (as highlighted in *Figure 10.9*), locate and
    select the IAM role we created earlier in this chapter (that is, the `kubeflow-on-eks`
    IAM role):'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 IAM 角色下拉菜单（如图 10.9 所示的高亮部分），找到并选择本章 earlier 创建的 IAM 角色（即 `kubeflow-on-eks`
    IAM 角色）：
- en: '![Figure 10.9 – Specifying kubeflow-on-eks as the IAM role ](img/B18638_10_009.jpg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.9 – 指定 kubeflow-on-eks 作为 IAM 角色](img/B18638_10_009.jpg)'
- en: Figure 10.9 – Specifying kubeflow-on-eks as the IAM role
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.9 – 指定 kubeflow-on-eks 作为 IAM 角色
- en: Once we have updated the IAM role drop-down value to `kubeflow-on-eks`, you
    can now click on the **Update IAM role** button (as highlighted in *Figure 10.9*).
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们将 IAM 角色下拉值更新为 `kubeflow-on-eks`，现在您可以点击如图 10.9 所示的高亮部分 **更新 IAM 角色** 按钮。
- en: Navigate back to the Cloud9 console by typing `cloud9` in the search bar and
    then selecting **Cloud9** from the list of results.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在搜索栏中输入 `cloud9` 并从结果列表中选择 **Cloud9**，以返回 Cloud9 控制台。
- en: 'Locate and click on the **Open IDE** button associated with our Cloud9 environment.
    This should open a Cloud9 environment that is similar to what is shown in *Figure
    10.10*:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定位并点击与我们的 Cloud9 环境相关的 **打开 IDE** 按钮。这应该会打开一个类似于 *图 10.10* 所示的 Cloud9 环境：
- en: '![Figure 10.10 – The Cloud9 environment ](img/B18638_10_010.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.10 – Cloud9 环境](img/B18638_10_010.jpg)'
- en: Figure 10.10 – The Cloud9 environment
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.10 – Cloud9 环境
- en: Here, we should see a familiar screen (as we have used this already in [*Chapter
    1*](B18638_01.xhtml#_idTextAnchor017), *Introduction to ML Engineering on AWS*,
    and [*Chapter 3*](B18638_03.xhtml#_idTextAnchor060), *Deep Learning Containers*).
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们应该看到一个熟悉的屏幕（因为我们已经在 [*第 1 章*](B18638_01.xhtml#_idTextAnchor017) *AWS 机器学习工程简介*
    和 [*第 3 章*](B18638_03.xhtml#_idTextAnchor060) *深度学习容器* 中使用过）。
- en: 'In the Terminal of the Cloud9 environment (after the $ sign in the lower part
    of the screen), run the following command to disable the managed temporary credentials
    inside the environment:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Cloud9 环境的终端（屏幕下方的 $ 符号之后），运行以下命令以禁用环境内的托管临时凭证：
- en: '[PRE0]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Also, let’s remove the credentials file inside the `.aws` directory to ensure
    that temporary credentials are not in place, too:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此外，让我们从 `.aws` 目录中删除凭证文件，以确保没有临时凭证：
- en: '[PRE1]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Finally, let’s verify that the Cloud9 environment is using the IAM role we
    prepared in this chapter (that is, the `kubeflow-on-eks` IAM role):'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，让我们验证 Cloud9 环境是否正在使用本章准备的 IAM 角色（即 `kubeflow-on-eks` IAM 角色）：
- en: '[PRE2]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This should yield a result similar to the following:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该会得到以下类似的结果：
- en: '[PRE3]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Once we have verified that we are using the correct IAM role inside the Cloud9
    environment, we can proceed with the next section.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们验证了我们在 Cloud9 环境中使用的是正确的 IAM 角色，我们就可以继续下一部分。
- en: Note
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: '*What happened here?* IAM roles (attached to the AWS resources) generate and
    provide credentials inside environments that expire every few hours. For us to
    be able to work with IAM roles, we need to remove any existing set of credentials
    (inside the Cloud9 environment) so that the environment will use the IAM role
    credentials instead. For more information on this topic, feel free to check out
    [https://docs.aws.amazon.com/cloud9/latest/user-guide/security-iam.xhtml](https://docs.aws.amazon.com/cloud9/latest/user-guide/security-iam.xhtml).'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '*这里发生了什么？* IAM 角色（附加到 AWS 资源）在每几个小时就会生成并提供凭证。为了我们能够使用 IAM 角色，我们需要删除 Cloud9
    环境中现有的任何凭证集，这样环境就会使用 IAM 角色凭证。有关此主题的更多信息，请随时查看 [https://docs.aws.amazon.com/cloud9/latest/user-guide/security-iam.xhtml](https://docs.aws.amazon.com/cloud9/latest/user-guide/security-iam.xhtml)。'
- en: Updating the Cloud9 environment with the essential prerequisites
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新 Cloud9 环境以包含基本先决条件
- en: Before we can create our EKS cluster and set up Kubeflow on top of it, we would
    need to download and install a few prerequisites including several command-line
    tools, such as **kubectl**, **eksctl**, and **kustomize**.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们能够创建我们的 EKS 集群并在其上设置 Kubeflow 之前，我们需要下载和安装一些先决条件，包括几个命令行工具，例如 **kubectl**、**eksctl**
    和 **kustomize**。
- en: Note
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: We will discuss how these work in the *Setting up Kubeflow on Amazon EKS* section
    of this chapter.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本章的 *在 Amazon EKS 上设置 Kubeflow* 部分讨论这些是如何工作的。
- en: 'In the next set of steps, we will run a couple of scripts that will install
    the prerequisites needed to get **Kubernetes** and **Kubeflow** running in our
    environment:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的步骤中，我们将运行几个脚本，以安装在我们的环境中运行 **Kubernetes** 和 **Kubeflow** 所需的先决条件：
- en: 'Let’s begin by using the `wget` command (in the Terminal of the Cloud9 environment)
    to download the `prerequisites.zip` file containing a variety of installation
    scripts. After that, we will use the `unzip` command to extract the contents of
    the ZIP file we just downloaded:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们从使用 `wget` 命令（在 Cloud9 环境的终端中）下载包含各种安装脚本的 `prerequisites.zip` 文件开始。之后，我们将使用
    `unzip` 命令提取我们刚刚下载的 ZIP 文件的内容：
- en: '[PRE4]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This should extract the following files from the ZIP file:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该从 ZIP 文件中提取以下文件：
- en: '`00_install_kubectl_aws_jq_and_more.sh` – This is a script that runs all the
    other scripts (with the prefixes of `01` to `07`) to install the prerequisites.'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`00_install_kubectl_aws_jq_and_more.sh` – 这是一个运行所有其他脚本（前缀为 `01` 到 `07`）以安装先决条件的脚本。'
- en: '`01_install_kubectl.sh` – This is a script that installs the kubectl command-line
    tool.'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`01_install_kubectl.sh` – 这是一个安装 kubectl 命令行工具的脚本。'
- en: '`02_install_aws_cli_v2.sh` – This is a script that installs v2 of the **AWS
    CLI**.'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`02_install_aws_cli_v2.sh` – 这是一个安装 **AWS CLI** v2 的脚本。'
- en: '`03_install_jq_and_more.sh` – This is a script that installs and sets up a
    few prerequisites, such as *jq* and *yq*.'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`03_install_jq_and_more.sh` – 这是一个安装和设置一些先决条件的脚本，例如 *jq* 和 *yq*。'
- en: '`04_check_prerequisites.sh` – This is a script that checks whether the first
    few prerequisites have been installed successfully.'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`04_check_prerequisites.sh` – 这是一个检查是否已成功安装前几个先决条件的脚本。'
- en: '`05_additional_setup_instructions.sh` – This is a script that sets up the Bash
    completion.'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`05_additional_setup_instructions.sh` – 这是一个设置 Bash 完成的脚本。'
- en: '`06_download_eksctl.sh` – This is a script that installs the **eksctl** command-line
    tool.'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`06_download_eksctl.sh` – 这是一个安装 **eksctl** 命令行工具的脚本。'
- en: '`07_install_kustomize.sh` – This is a script that installs version 3.2.3 of
    **kustomize**.'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`07_install_kustomize.sh` – 这是一个安装 **kustomize** 版本 3.2.3 的脚本。'
- en: 'Navigate to the `ch10_prerequisites` folder and run the `chmod` command to
    make the scripts inside the folder executable:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到 `ch10_prerequisites` 文件夹并运行 `chmod` 命令以使文件夹内的脚本可执行：
- en: '[PRE6]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now, run the following command to start the installation and setup processes:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，运行以下命令以开始安装和设置过程：
- en: '[PRE8]'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This should run the other scripts inside the `ch10_prerequisites` folder starting
    from `01_install_kubectl.sh` to `07_install_kustomize.sh`.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该会从 `01_install_kubectl.sh` 到 `07_install_kustomize.sh` 的顺序运行 `ch10_prerequisites`
    文件夹内的其他脚本。
- en: Note
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Once the `00_install_kubectl_aws_jq_and_more.sh` script has finished running,
    several prerequisites, such as **AWS CLI v2**, **eksctl**, and **kustomize**,
    should already be available for us to use to prepare Kubernetes clusters (if there
    are no errors during installation). Make sure that you review the logs generated
    by the script before proceeding.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦 `00_install_kubectl_aws_jq_and_more.sh` 脚本运行完成，一些先决条件，如 **AWS CLI v2**、**eksctl**
    和 **kustomize**，应该已经可用，我们可以使用它们来准备 Kubernetes 集群（如果安装过程中没有错误）。在继续之前，请确保您已检查脚本生成的日志。
- en: 'Verify the version of the AWS CLI we currently have:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证我们当前拥有的 AWS CLI 版本：
- en: '[PRE9]'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This should yield a result similar to the following:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该会得到以下类似的结果：
- en: '[PRE10]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Next, let’s verify the version of `kustomize` that we will be using:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，让我们验证我们将使用的 `kustomize` 版本：
- en: '[PRE11]'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This should yield a result similar to the following:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该会得到以下类似的结果：
- en: '[PRE12]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Let’s verify the version of `eksctl`, too:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们验证 `eksctl` 的版本：
- en: '[PRE13]'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This should yield a result similar to the following:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该会得到以下类似的结果：
- en: '[PRE14]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Run the following so that the other changes (such as the environment variable
    values) from the installation scripts reflect in our current shell:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令，以便安装脚本中的其他更改（如环境变量值）反映在我们的当前 shell 中：
- en: '[PRE15]'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Note the presence of a dot (`.`) and a space before the tilde symbol (`~`) at
    the start of each line.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 注意在每行开头的点（`.`）和波浪号（`~`）之前有一个空格。
- en: 'Run the following block of commands to set a few environment variables and
    configure the default region when using the AWS CLI:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令块以设置一些环境变量并在使用 AWS CLI 时配置默认区域：
- en: '[PRE18]'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Finally, verify that the default region has been set successfully:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，验证默认区域是否已成功设置：
- en: '[PRE21]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: This should yield a value of `us-west-2` (if we are running our Cloud9 environment
    in Oregon).
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在俄勒冈州运行我们的 Cloud9 环境，这将得到 `us-west-2` 的值。
- en: Now that all prerequisites have been installed, set up, and verified, we can
    proceed with creating an EKS cluster and setting up Kubeflow on top of it!
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 现在所有先决条件都已安装、设置和验证，我们可以继续创建 EKS 集群并在其上设置 Kubeflow！
- en: Setting up Kubeflow on Amazon EKS
  id: totrans-171
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Amazon EKS 上设置 Kubeflow
- en: 'With all of the prerequisites ready, we can now proceed with creating our EKS
    cluster and then installing Kubeflow on top of it. During the installation and
    setup process, we will use the following tools:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有先决条件准备就绪后，我们现在可以继续创建我们的 EKS 集群，然后在上面安装 Kubeflow。在安装和设置过程中，我们将使用以下工具：
- en: '**eksctl** – The CLI tool for creating and managing Amazon EKS clusters'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**eksctl** – 用于创建和管理 Amazon EKS 集群的 CLI 工具'
- en: '**kubectl** – The CLI tool for creating, configuring, and deleting Kubernetes
    resources'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**kubectl** – 用于创建、配置和删除 Kubernetes 资源的 CLI 工具'
- en: '**AWS CLI** – The CLI tool for creating, configuring, and deleting AWS resources'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AWS CLI** – 用于创建、配置和删除 AWS 资源的 CLI 工具'
- en: '**kustomize** – The CLI tool for managing the configuration of Kubernetes objects'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**kustomize** – 用于管理 Kubernetes 对象配置的 CLI 工具'
- en: 'The hands-on portion of this section involves following a high-level set of
    steps:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 本节的实际操作部分涉及遵循一系列高级步骤：
- en: Preparing the `eks.yaml` file containing the EKS configuration (such as the
    number of nodes, desired capacity, and instance type)
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 准备包含 EKS 配置的 `eks.yaml` 文件（例如节点数量、期望容量和实例类型）
- en: Running the `eks create cluster` command using the `eks.yaml` file to create
    the Amazon EKS cluster
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `eks.yaml` 文件运行 `eks create cluster` 命令以创建 Amazon EKS 集群
- en: Using **kustomize** and **kubectl** to install Kubeflow inside our cluster
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 **kustomize** 和 **kubectl** 在我们的集群内安装 Kubeflow
- en: 'With these in mind, we can now proceed with setting up our EKS cluster and
    Kubeflow:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到这些，我们现在可以继续设置我们的 EKS 集群和 Kubeflow：
- en: 'Continuing where we left off in the previous section, let’s run the following
    commands in the Terminal of the Cloud9 environment:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在上一节结束的地方继续，让我们在 Cloud9 环境的终端中运行以下命令：
- en: '[PRE22]'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Here, we create the `ch10` directory using the `mkdir` command. After that,
    we will navigate to the directory using the `cd` command.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用 `mkdir` 命令创建 `ch10` 目录。之后，我们将使用 `cd` 命令进入该目录。
- en: 'Next, let’s use the `touch` command to create an empty `eks.yaml` file:'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，让我们使用 `touch` 命令创建一个空的 `eks.yaml` 文件：
- en: '[PRE25]'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'In the **File Tree**, locate the environment directory with the name of your
    Cloud9 environment. Right-click on this directory to open a context menu similar
    to what is shown in *Figure 10.11*:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **文件树** 中，找到名为您的 Cloud9 环境的环境目录。右键单击此目录以打开类似于 *图 10.11* 中所示的下拉菜单：
- en: '![Figure 10.11 – Refreshing the displayed directories and files ](img/B18638_10_011.jpg)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.11 – 刷新显示的目录和文件](img/B18638_10_011.jpg)'
- en: Figure 10.11 – Refreshing the displayed directories and files
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.11 – 刷新显示的目录和文件
- en: Select **Refresh** from the list of options to ensure that the latest changes
    have been reflected in the file tree.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 从选项列表中选择 **刷新**，以确保最新的更改已反映在文件树中。
- en: 'Next, double-click on the `eks.yaml` file (inside the `ch10` directory) in
    the file tree to open the file in the **Editor** pane. Inside this blank file,
    specify the following YAML configuration:'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在文件树中双击 `eks.yaml` 文件（位于 `ch10` 目录中），在 **编辑器** 面板中打开文件。在这个空白文件中，指定以下 YAML
    配置：
- en: '[PRE26]'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[PRE32]'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[PRE34]'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Make sure to save your changes by pressing the *Ctrl* + *S* keys (or, alternatively,
    *Cmd* + *S* when using a Mac device). Additionally, you can use the **Save** option
    in the **File** menu to save your changes.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 确保通过按 *Ctrl* + *S* 键（或者，在 Mac 设备上，按 *Cmd* + *S* 键）保存您的更改。此外，您还可以使用 **文件** 菜单中的
    **保存** 选项来保存您的更改。
- en: Important Note
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Before proceeding, it is crucial that we are aware of the resources that will
    be created when we run the `eksctl create cluster` command using this configuration
    file. Here, we specify that we want our cluster (named `kubeflow-eks-000`) to
    have five (`5`) `m5.xlarge` instances. Once you run the `eksctl create cluster`
    command in the next step, make sure that you delete the cluster within an hour
    or two after cluster creation to manage costs. Feel free to jump to the *Cleaning
    up* section at the end of this chapter once you need to delete the cluster.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，我们必须清楚当我们使用此配置文件运行 `eksctl create cluster` 命令时将创建哪些资源。在这里，我们指定我们希望我们的集群（命名为
    `kubeflow-eks-000`）拥有五个 (`5`) 个 `m5.xlarge` 实例。一旦你在下一步运行 `eksctl create cluster`
    命令，请确保在集群创建后的一小时内或两小时内删除集群以管理成本。一旦你需要删除集群，请随时跳转到本章末尾的 *清理* 部分。
- en: 'Before creating real resources for our cluster, let’s use the `eksctl create
    cluster` command with the `--dry-run` option:'
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在为我们的集群创建真实资源之前，让我们使用带有 `--dry-run` 选项的 `eksctl create cluster` 命令：
- en: '[PRE40]'
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: This should help us inspect the configuration before we create the actual set
    of resources.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该有助于我们在创建实际资源集合之前检查配置。
- en: 'Now, let’s create our cluster using the `eksctl create` command:'
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们使用 `eksctl create` 命令创建我们的集群：
- en: '[PRE41]'
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Here, we use the `eks.yaml` file we prepared in the previous step as the configuration
    file when running the command.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用之前步骤中准备的 `eks.yaml` 文件作为运行命令时的配置文件。
- en: Important Note
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: If you encounter an error with a message similar to `version` string value in
    the `eks.yaml` file with the lowest supported version specified in the error message.
    Once you have updated the `eks.yaml` file, you can run the `eksctl create cluster`
    command again and check whether the issue has been resolved. For more information
    on this topic, feel free to check out [https://docs.aws.amazon.com/eks/latest/userguide/kubernetes-versions.xhtml](https://docs.aws.amazon.com/eks/latest/userguide/kubernetes-versions.xhtml).
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您遇到类似 `eks.yaml` 文件中的 `version` 字符串值错误的消息，并且错误消息中指定了最低支持的版本。一旦您已更新 `eks.yaml`
    文件，您可以再次运行 `eksctl create cluster` 命令并检查问题是否已解决。有关此主题的更多信息，请随时查看 [https://docs.aws.amazon.com/eks/latest/userguide/kubernetes-versions.xhtml](https://docs.aws.amazon.com/eks/latest/userguide/kubernetes-versions.xhtml)。
- en: 'Running the `eksctl create cluster` command should take about 15–30 minutes
    to complete. It will use **CloudFormation** stacks for launching the AWS resources.
    If you are wondering what CloudFormation is, it is a service that lets you define
    each of your infrastructure’s components and their settings in a template. This
    template is then read by CloudFormation to provision the resources required by
    your infrastructure:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 运行 `eksctl create cluster` 命令可能需要 15-30 分钟才能完成。它将使用 **CloudFormation** 堆栈来启动
    AWS 资源。如果您想知道 CloudFormation 是什么，它是一种服务，允许您在模板中定义您的基础设施组件及其设置。然后，CloudFormation
    读取此模板以提供您基础设施所需资源：
- en: '![Figure 10.12 – How EKS resources are created using eksctl ](img/B18638_10_012.jpg)'
  id: totrans-220
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.12 – 使用 eksctl 创建 EKS 资源的过程](img/B18638_10_012.jpg)'
- en: Figure 10.12 – How EKS resources are created using eksctl
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.12 – 使用 eksctl 创建 EKS 资源的过程
- en: In *Figure 10.12*, we can see that the `eksctl` command makes use of the `eks.yaml`
    file to prepare the templates that will be used by the CloudFormation service
    to provision resources.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *图 10.12* 中，我们可以看到 `eksctl` 命令利用 `eks.yaml` 文件来准备 CloudFormation 服务将用于部署资源的模板。
- en: Note
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Note that `eksctl` creates other resources outside of CloudFormation, too. This
    means that the CloudFormation templates used to prepare the EKS resources will
    *not* contain all resources created using the `eksctl` command. That said, it
    is best to use the `eksctl delete cluster` command when deleting the resources
    created in this section. Once you need to delete the resources, make sure that
    you follow the instructions specified in the *Cleaning up* section of this chapter.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，`eksctl`也会在CloudFormation之外创建其他资源。这意味着用于准备EKS资源的CloudFormation模板将**不会**包含使用`eksctl`命令创建的所有资源。话虽如此，当删除本节中创建的资源时，最好使用`eksctl
    delete cluster`命令。一旦需要删除资源，请确保遵循本章*清理*部分中指定的说明。
- en: 'Let’s quickly inspect our setup using the `kubectl get nodes` command:'
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们快速使用`kubectl get nodes`命令检查我们的设置：
- en: '[PRE42]'
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: This should give us five nodes with the **STATUS** value of **Ready**.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该会给我们提供五个节点，其**状态**值为**就绪**。
- en: Important Note
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: If you encounter issues when deploying EKS clusters, make sure that you check
    out [https://docs.aws.amazon.com/eks/latest/userguide/troubleshooting.xhtml](https://docs.aws.amazon.com/eks/latest/userguide/troubleshooting.xhtml).
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在部署EKS集群时遇到问题，请确保检查[https://docs.aws.amazon.com/eks/latest/userguide/troubleshooting.xhtml](https://docs.aws.amazon.com/eks/latest/userguide/troubleshooting.xhtml)。
- en: 'Before proceeding, let’s make sure that `CLUSTER_NAME` and `CLUSTER_REGION`
    have been set with the appropriate values:'
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在继续之前，让我们确保`CLUSTER_NAME`和`CLUSTER_REGION`已经设置了适当的值：
- en: '[PRE43]'
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '[PRE44]'
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Here, we specify a `CLUSTER_NAME` value equivalent to the name specified in
    the `eks.yaml` file. Note that if you need to experiment with another set of configuration
    parameters, you can specify a different cluster name (by updating both `CLUSTER_NAME`
    and the `eks.yaml` file) and replace `kubeflow-eks-000` with `kubeflow-eks-001`
    (and so on) when creating new clusters. Just make sure that you properly delete
    any existing clusters before creating a new one.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们指定一个与`eks.yaml`文件中指定的名称等效的`CLUSTER_NAME`值。请注意，如果您需要实验另一组配置参数，您可以指定不同的集群名称（通过更新`CLUSTER_NAME`和`eks.yaml`文件），并在创建新集群时将`kubeflow-eks-000`替换为`kubeflow-eks-001`（等等）。只需确保在创建新集群之前正确删除任何现有集群。
- en: 'Additionally, let’s associate an IAM OIDC provider with the cluster:'
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此外，让我们将一个IAM OIDC提供程序与集群关联：
- en: '[PRE45]'
  id: totrans-235
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: So, what’s an IAM OIDC provider? Well, it’s an IAM entity used to establish
    trust between your AWS account and an external OpenID Connect-compatible identity
    provider. This means that instead of creating IAM users, we can use IAM OIDC providers
    instead and give these identities permissions to work with the resources in our
    AWS account.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，IAM OIDC提供程序是什么？嗯，它是一个IAM实体，用于在您的AWS账户和外部OpenID Connect兼容的身份提供程序之间建立信任。这意味着我们不必创建IAM用户，而是可以使用IAM
    OIDC提供程序，并授予这些身份在我们的AWS账户中操作资源的权限。
- en: Note
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: For more information about this topic, feel free to check out [https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_create_oidc.xhtml](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_create_oidc.xhtml).
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 关于这个主题的更多信息，请随时查看[https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_create_oidc.xhtml](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_create_oidc.xhtml)。
- en: 'Let’s use the `aws eks update-kubeconfig` command to configure `kubectl` so
    that we can connect to the Amazon EKS cluster:'
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们使用`aws eks update-kubeconfig`命令来配置`kubectl`，以便我们可以连接到Amazon EKS集群：
- en: '[PRE46]'
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Next, we will clone two repositories that include the manifests (files containing
    the specifications of the Kubernetes objects) for installing what we need:'
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将克隆两个包含所需安装的Kubernetes对象规范（manifests）的仓库：
- en: '[PRE47]'
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '[PRE48]'
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '[PRE50]'
  id: totrans-245
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '[PRE51]'
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '[PRE52]'
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Navigate to the `deployments/vanilla` directory:'
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到`deployments/vanilla`目录：
- en: '[PRE53]'
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: We should find a `kustomization.yaml` file inside this directory. For more information
    on this topic, feel free to check out [https://kubernetes.io/docs/tasks/manage-kubernetes-objects/kustomization/](https://kubernetes.io/docs/tasks/manage-kubernetes-objects/kustomization/).
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该在这个目录中找到一个`kustomization.yaml`文件。关于这个主题的更多信息，请随时查看[https://kubernetes.io/docs/tasks/manage-kubernetes-objects/kustomization/](https://kubernetes.io/docs/tasks/manage-kubernetes-objects/kustomization/)。
- en: 'With everything ready, let’s run this single-line command to install the Kubeflow
    components and services:'
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一切准备就绪，让我们运行这条单行命令来安装Kubeflow组件和服务：
- en: '[PRE54]'
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: Note
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This step should take about 4–10 minutes to complete. If the output logs seem
    to be looping indefinitely for more than 20–30 minutes already, you might need
    to experiment with different values in the `version` string value in the `eks.yaml`
    file. *What values can we use?* Let’s say that the currently supported versions
    are `1.20`, `1.21`, `1.22`, and `1.23` (as indicated in [https://docs.aws.amazon.com/eks/latest/userguide/kubernetes-versions.xhtml](https://docs.aws.amazon.com/eks/latest/userguide/kubernetes-versions.xhtml)).
    *Should we try using version 1.23?* If we were to use the latest supported Kubernetes
    version `1.23` in the `eks.yaml` file, there’s a chance that we might encounter
    issues installing Kubeflow. We might need to wait for a few months for the Kubeflow
    support to catch up (as indicated in [https://awslabs.github.io/kubeflow-manifests/docs/about/eks-compatibility/](https://awslabs.github.io/kubeflow-manifests/docs/about/eks-compatibility/)).
    That said, we can try specifying `1.20`, `1.21`, or `1.22` in the `eks.yaml` file
    when using the `eksctl create cluster` command (starting from the lowest supported
    version of `1.20` first). With these in mind, the next step is to delete the cluster
    using the `eksctl delete cluster` command (please see the *Cleaning up* section),
    update the `eks.yaml` file with the desired Kubernetes version, and then repeat
    the steps starting from the `eksctl create cluster` command in this section.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 此步骤大约需要 4-10 分钟才能完成。如果输出日志似乎已经无限循环超过 20-30 分钟，你可能需要尝试在 `eks.yaml` 文件中的 `version`
    字符串值中调整不同的值。*我们可以使用哪些值？* 假设当前支持的版本是 `1.20`、`1.21`、`1.22` 和 `1.23`（如 [https://docs.aws.amazon.com/eks/latest/userguide/kubernetes-versions.xhtml](https://docs.aws.amazon.com/eks/latest/userguide/kubernetes-versions.xhtml)
    所示）。*我们应该尝试使用版本 1.23 吗？* 如果我们在 `eks.yaml` 文件中使用最新的支持 Kubernetes 版本 `1.23`，可能会遇到安装
    Kubeflow 的问题。我们可能需要等待几个月，直到 Kubeflow 的支持赶上（如 [https://awslabs.github.io/kubeflow-manifests/docs/about/eks-compatibility/](https://awslabs.github.io/kubeflow-manifests/docs/about/eks-compatibility/)
    所示）。话虽如此，当使用 `eksctl create cluster` 命令时，我们可以在 `eks.yaml` 文件中尝试指定 `1.20`、`1.21`
    或 `1.22`（从最低支持的版本 `1.20` 开始）。考虑到这些，下一步是使用 `eksctl delete cluster` 命令删除集群（请参阅 *清理*
    部分），更新 `eks.yaml` 文件以包含所需的 Kubernetes 版本，然后重复本节中的 `eksctl create cluster` 命令的步骤。
- en: 'Let’s quickly inspect the created resources using the following commands:'
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们快速检查创建的资源，使用以下命令：
- en: '[PRE55]'
  id: totrans-256
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '[PRE56]'
  id: totrans-257
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '[PRE57]'
  id: totrans-258
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '[PRE58]'
  id: totrans-259
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '[PRE59]'
  id: totrans-260
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '[PRE60]'
  id: totrans-261
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Here, we use the `kubectl get pods` command to inspect the resources created
    inside the nodes of the cluster.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用 `kubectl get pods` 命令检查集群节点内创建的资源。
- en: 'Now, we run the following command so that we can access the Kubeflow dashboard
    via port `8080` of the Cloud9 environment:'
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们运行以下命令以便可以通过 Cloud9 环境的 `8080` 端口访问 Kubeflow 仪表板：
- en: '[PRE61]'
  id: totrans-264
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Click on **Preview** (which is located at the top of the page) to open a list
    of drop-down menu options similar to what is shown in *Figure 10.13*:'
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击页面顶部的 **预览**（位于 *图 10.13* 所示的位置）以打开类似于 *图 10.13* 的下拉菜单选项列表：
- en: '![Figure 10.13 – Preview Running Application ](img/B18638_10_013.jpg)'
  id: totrans-266
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.13 – 预览运行中的应用](img/B18638_10_013.jpg)'
- en: Figure 10.13 – Preview Running Application
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.13 – 预览运行中的应用
- en: From the list of drop-down menu options, select **Preview Running Application**
    to open a small window just beside the Terminal pane at the bottom of the screen.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 从下拉菜单选项列表中，选择 **预览运行中的应用** 以打开屏幕底部终端窗格旁边的小窗口。
- en: Note
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: We were able to preview the application directly from our Cloud9 environment
    since the application is currently running using HTTP over port 8080\. For more
    information about this topic, feel free to check out [https://docs.aws.amazon.com/cloud9/latest/user-guide/app-preview.xhtml](https://docs.aws.amazon.com/cloud9/latest/user-guide/app-preview.xhtml).
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 我们能够直接从我们的 Cloud9 环境预览应用程序，因为应用程序目前正在使用 HTTP 通过端口 8080 运行。有关此主题的更多信息，请随时查看 [https://docs.aws.amazon.com/cloud9/latest/user-guide/app-preview.xhtml](https://docs.aws.amazon.com/cloud9/latest/user-guide/app-preview.xhtml)。
- en: 'Click on the button, as highlighted in *Figure 10.14*, to open the preview
    window in a separate browser tab:'
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击如图 *图 10.14* 所示的按钮，在单独的浏览器标签页中打开预览窗口：
- en: '![Figure 10.14 – Previewing in a new window ](img/B18638_10_014.jpg)'
  id: totrans-272
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.14 – 在新窗口中预览](img/B18638_10_014.jpg)'
- en: Figure 10.14 – Previewing in a new window
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.14 – 在新窗口中预览
- en: Make sure that you do not close the browser tab where the Cloud9 environment
    is running while working with the application preview in the second browser tab.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 确保在第二个浏览器标签页中预览应用程序时，不要关闭运行 Cloud9 环境的浏览器标签页。
- en: Specify the following credentials on the `user@example.com`
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `user@example.com` 上指定以下凭据
- en: '`12341234`'
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`12341234`'
- en: Important Note
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
- en: Do not share the URL of the application preview tab with others. To change the
    default password, feel free to check the following link at [https://awslabs.github.io/kubeflow-manifests/docs/deployment/connect-kubeflow-dashboard/](https://awslabs.github.io/kubeflow-manifests/docs/deployment/connect-kubeflow-dashboard/)
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
- en: 'This should redirect you to the **Kubeflow Central Dashboard** similar to what
    is shown in *Figure 10.15*:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.15 – The Kubeflow central dashboard ](img/B18638_10_015.jpg)'
  id: totrans-280
  prefs: []
  type: TYPE_IMG
- en: Figure 10.15 – The Kubeflow central dashboard
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
- en: In *Figure 10.15*, we can see the **Kubeflow Central Dashboard**—a dashboard
    interface that provides immediate access to the components and resources we have
    created and worked with. Feel free to navigate to the different parts of this
    dashboard using the sidebar.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
- en: Finally, all the setup work has been completed! In the next section, we will
    run our first custom Kubeflow pipeline. Feel free to grab a cup of coffee or tea
    before proceeding.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
- en: Running our first Kubeflow pipeline
  id: totrans-284
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will run a custom pipeline that will download a sample
    tabular dataset and use it as training data to build our **linear regression**
    model. The steps and instructions to be executed by the pipeline have been defined
    inside a YAML file. Once this YAML file has been uploaded, we would then be able
    to run a Kubeflow pipeline that will run the following steps:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
- en: '**Download dataset**: Here, we will be downloading and working with a dataset
    that only has 20 records (along with the row containing the header). In addition
    to this, we will start with a clean version without any missing or invalid values:'
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B18638_10_016.jpg)'
  id: totrans-287
  prefs: []
  type: TYPE_IMG
- en: Figure 10.16 – A sample tabular dataset
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
- en: 'In *Figure 10.16*, we can see that our dataset has three columns:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
- en: '`last_name` – This is the last name of the manager.'
  id: totrans-290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`management_experience_months` – This is the total number of months a manager
    has been managing team members.'
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`monthly_salary` – This is the current salary, per month, of the manager (in
    USD).'
  id: totrans-292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To simplify things a bit, we will be working with a dataset that only has a
    few records—just enough to produce a simple ML model. In addition to this, we
    will start with a clean version without any missing or invalid values.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
- en: '`monthly_salary`) and the second column is the predictor column (`management_experiment_months`).
    At the same time, we will perform the **train-test split** so that we can use
    70% of the dataset for training the model and the remaining 30% for evaluating
    it.'
  id: totrans-294
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`LinearRegression` algorithm to fit a linear model on the training data.'
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Evaluate model**: Once the training step has been completed, we will evaluate
    it using the test set.'
  id: totrans-296
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`monthly_salary`) given an input value (`management_experiment_months`).'
  id: totrans-297
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
- en: Note that we have full control of how our pipeline would behave. We can think
    of a pipeline as just a sequence of steps where each step might generate an output
    that would then be used by another step as input.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have a better idea of what our pipeline looks like, let’s proceed
    with running our first pipeline:'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们对我们的流程有了更好的了解，让我们开始运行我们的第一个流程：
- en: 'Let’s begin by opening the following link in another browser tab: [https://raw.githubusercontent.com/PacktPublishing/Machine-Learning-Engineering-on-AWS/main/chapter10/basic_pipeline.yaml](https://raw.githubusercontent.com/PacktPublishing/Machine-Learning-Engineering-on-AWS/main/chapter10/basic_pipeline.yaml).'
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们从在另一个浏览器标签页中打开以下链接开始：[https://raw.githubusercontent.com/PacktPublishing/Machine-Learning-Engineering-on-AWS/main/chapter10/basic_pipeline.yaml](https://raw.githubusercontent.com/PacktPublishing/Machine-Learning-Engineering-on-AWS/main/chapter10/basic_pipeline.yaml)。
- en: 'Right-click on any part of the page to open a context menu that is similar
    to what is shown in *Figure 10.17*:'
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击页面上的任何部分以打开一个类似于*图10.17*中所示的下拉菜单：
- en: '![Figure 10.17 – Downloading the YAML file ](img/B18638_10_017.jpg)'
  id: totrans-303
  prefs: []
  type: TYPE_IMG
  zh: '![图10.17 – 下载YAML文件](img/B18638_10_017.jpg)'
- en: Figure 10.17 – Downloading the YAML file
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.17 – 下载YAML文件
- en: Save the file as `basic_pipeline.yaml` and download it to the `Downloads` folder
    (or similar) of your local machine.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 将文件保存为`basic_pipeline.yaml`，并将其下载到您本地机器的`下载`文件夹（或类似位置）。
- en: Back in the browser tab showing the **Kubeflow Central Dashboard**, locate and
    click on **Pipelines** in the sidebar.
  id: totrans-306
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器标签页中回到显示**Kubeflow中央仪表板**，在侧边栏中找到并点击**流程**。
- en: Next, click on the **Upload pipeline** button (beside the **Refresh** button)
  id: totrans-307
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，点击**上传流程**按钮（位于**刷新**按钮旁边）
- en: 'In the `My first pipeline` under `basic_pipeline.yaml` file (from your local
    machine) using the file input field provided. Finally, click on the **Create**
    button (as highlighted in *Figure 10.18*):'
  id: totrans-308
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的本地机器上的`basic_pipeline.yaml`文件（使用提供的文件输入字段）下**我的第一个流程**。最后，点击**创建**按钮（如图10.18所示）：
- en: '![Figure 10.18 – Uploading a pipeline (file) ](img/B18638_10_018.jpg)'
  id: totrans-309
  prefs: []
  type: TYPE_IMG
  zh: '![图10.18 – 上传流程（文件）](img/B18638_10_018.jpg)'
- en: Figure 10.18 – Uploading a pipeline (file)
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.18 – 上传流程（文件）
- en: 'Clicking on the **Create** button should create the pipeline and redirect you
    to a pipeline page similar to what is shown in *Figure 10.19*:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**创建**按钮应该会创建流程，并带您转到类似于*图10.19*所示的流程页面：
- en: '![Figure 10.19 – A graph of the first pipeline ](img/B18638_10_019.jpg)'
  id: totrans-312
  prefs: []
  type: TYPE_IMG
  zh: '![图10.19 – 第一个流程的图表](img/B18638_10_019.jpg)'
- en: Figure 10.19 – A graph of the first pipeline
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.19 – 第一个流程的图表
- en: At this point, our pipeline should be ready! The next step would be to create
    an experiment and run it.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们的流程应该已经准备好了！下一步将是创建一个实验并运行它。
- en: Note
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: '*What just happened?* Upon uploading the YAML file, Kubeflow Pipelines converted
    the YAML file into a pipeline that can be executed through a pipeline run.'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: '*发生了什么？* 在上传YAML文件后，Kubeflow Pipelines将YAML文件转换为可以通过流程运行执行的流程。'
- en: Next, locate and click on the **Create experiment** button (located in the upper-right
    corner of the page). Feel free to zoom in/out (and close any popups and overlays
    that might appear) if you cannot locate the **Create experiment** button.
  id: totrans-317
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，找到并点击页面右上角的**创建实验**按钮。如果您找不到**创建实验**按钮，请随意放大/缩小（并关闭可能出现的任何弹出窗口和覆盖层）。
- en: Specify `My first experiment` under **Experiment name**. Then click on the **Next**
    button.
  id: totrans-318
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**实验名称**下指定`我的第一个实验`。然后点击**下一步**按钮。
- en: On the **Start a run** page, scroll down to the bottom of the page and then
    click on the **Start** button.
  id: totrans-319
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**启动运行**页面，滚动到页面底部，然后点击**启动**按钮。
- en: 'Locate and click on **Run of My first pipeline**, as highlighted in *Figure
    10.20*:'
  id: totrans-320
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到并点击**我的第一个流程**下的**运行**，如图10.20所示：
- en: '![Figure 10.20 – Navigating to the pipeline run ](img/B18638_10_020.jpg)'
  id: totrans-321
  prefs: []
  type: TYPE_IMG
  zh: '![图10.20 – 导航到流程运行](img/B18638_10_020.jpg)'
- en: Figure 10.20 – Navigating to the pipeline run
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.20 – 导航到流程运行
- en: 'Here, we can see that our pipeline has already started running. After navigating
    to the specific pipeline run page, you should see a relatively new or partially
    completed pipeline similar to what is shown in *Figure 10.21*:'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到我们的流程已经开始运行。在导航到特定的流程运行页面后，你应该会看到一个相对较新或部分完成的流程，类似于*图10.21*所示：
- en: '![Figure 10.21 – Waiting for the pipeline to finish running ](img/B18638_10_021.jpg)'
  id: totrans-324
  prefs: []
  type: TYPE_IMG
  zh: '![图10.21 – 等待流程运行完成](img/B18638_10_021.jpg)'
- en: Figure 10.21 – Waiting for the pipeline to finish running
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.21 – 等待流程运行完成
- en: This should take around 1–2 minutes to complete. You should see a check mark
    on each of the steps that have been completed successfully.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该需要大约1-2分钟来完成。你应该会看到每个已成功完成的步骤上都有一个勾号。
- en: 'While the pipeline is running, you might click on any of the steps to inspect
    the corresponding set of input and output artifacts, logs, and other details:'
  id: totrans-327
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当管道运行时，您可能需要点击任何步骤来检查相应的输入和输出工件、日志和其他详细信息：
- en: '![Figure 10.22 – Inspecting the artifacts ](img/B18638_10_022.jpg)'
  id: totrans-328
  prefs: []
  type: TYPE_IMG
  zh: '![图10.22 – 检查工件](img/B18638_10_022.jpg)'
- en: Figure 10.22 – Inspecting the artifacts
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.22 – 检查工件
- en: In *Figure 10.22*, we can see that we are able to view and debug the input and
    output artifacts after clicking on the box corresponding to the **Process data**
    step. Also, we should find other details about the current step by navigating
    to the other tabs (**Visualizations**, **Details**, **Volumes**, and **Logs**).
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 在**图10.22**中，我们可以看到在点击对应于**处理数据**步骤的框之后，我们可以查看和调试输入和输出工件。此外，我们还应该通过导航到其他标签（**可视化**、**详细信息**、**卷**和**日志**）来找到关于当前步骤的其他详细信息。
- en: Congratulations on running your first pipeline! If you are wondering how we
    prepared this pipeline, we simply used the **Kubeflow Pipelines SDK** to define
    the steps of the pipeline and generate the YAML file containing all the instructions
    and configurations. In the next section, we will dive a bit deeper into using
    the **Kubeflow Pipelines SDK** when building custom ML pipelines.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜您运行了您的第一个管道！如果您想知道我们是如何准备这个管道的，我们只是简单地使用了**Kubeflow Pipelines SDK**来定义管道的步骤并生成包含所有指令和配置的YAML文件。在下一节中，我们将更深入地探讨在构建定制机器学习管道时使用**Kubeflow
    Pipelines SDK**。
- en: Using the Kubeflow Pipelines SDK to build ML workflows
  id: totrans-332
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Kubeflow Pipelines SDK构建机器学习工作流程
- en: In this section, we will build ML workflows using the **Kubeflow Pipelines SDK**.
    The Kubeflow Pipelines SDK contains what we need to build the pipeline components
    containing the custom code we want to run. Using the Kubeflow Pipelines SDK, we
    can define the Python functions that would map to the pipeline components of a
    pipeline.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用**Kubeflow Pipelines SDK**构建机器学习工作流程。Kubeflow Pipelines SDK包含了构建包含我们想要运行的定制代码的管道组件所需的所有内容。使用Kubeflow
    Pipelines SDK，我们可以定义将映射到管道组件的Python函数。
- en: 'Here are some guidelines that we need to follow when building **Python function-based
    components** using the Kubeflow Pipelines SDK:'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用Kubeflow Pipelines SDK构建基于Python函数的组件时，我们需要遵循以下一些指南：
- en: 'The defined Python functions should be standalone and should not use any code
    and variables declared outside of the function definition. This means that `import
    pandas`) should be implemented inside the function, too. Here’s a quick example
    of how imports should be implemented:'
  id: totrans-335
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义好的Python函数应该是独立的，并且不应该使用在函数定义外部声明的任何代码和变量。这意味着`import pandas`也应该在函数内部实现。以下是一个快速示例，说明如何实现导入：
- en: '[PRE62]'
  id: totrans-336
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '[PRE63]'
  id: totrans-337
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '[PRE64]'
  id: totrans-338
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: '[PRE65]'
  id: totrans-339
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'Data must be passed as files when passing large amounts of data (or data with
    complex data types) between components. Here’s a quick example of this in action:'
  id: totrans-340
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当在组件之间传递大量数据（或具有复杂数据类型的数据）时，必须以文件的形式传递数据。以下是一个快速示例：
- en: '[PRE66]'
  id: totrans-341
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '[PRE67]'
  id: totrans-342
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: '[PRE68]'
  id: totrans-343
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: '[PRE69]'
  id: totrans-344
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE69]'
- en: '[PRE70]'
  id: totrans-345
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE70]'
- en: '[PRE71]'
  id: totrans-346
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE71]'
- en: '[PRE72]'
  id: totrans-347
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE72]'
- en: '[PRE73]'
  id: totrans-348
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'Use the `create_component_from_func()` function (from `kfp.components`) to
    convert the defined function into a pipeline component. A list of packages can
    be specified in the `packages_to_install` parameter when calling the `create_component_from_func()`
    function similar to what we have in the following block of code:'
  id: totrans-349
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`create_component_from_func()`函数（来自`kfp.components`）将定义的函数转换为管道组件。在调用`create_component_from_func()`函数时，可以在`packages_to_install`参数中指定一个包列表，类似于以下代码块中的内容：
- en: '[PRE74]'
  id: totrans-350
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE74]'
- en: '[PRE75]'
  id: totrans-351
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE75]'
- en: '[PRE76]'
  id: totrans-352
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE76]'
- en: '[PRE77]'
  id: totrans-353
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE77]'
- en: The packages specified would then be installed before the function is executed.
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 在函数执行之前，将安装指定的包。
- en: Optionally, we might prepare a custom container image that will be used for
    the environment where the Python function will run. The custom container image
    can be specified in the `base_image` parameter when calling the `create_component_from_func()`
    function.
  id: totrans-355
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可选地，我们可能准备一个自定义容器镜像，该镜像将被用于Python函数运行的 环境。在调用`create_component_from_func()`函数时，可以在`base_image`参数中指定自定义容器镜像。
- en: 'That said, let’s begin defining and configuring our ML pipeline using the **Kubeflow
    Pipelines SDK**:'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，让我们开始使用**Kubeflow Pipelines SDK**定义和配置我们的机器学习管道：
- en: Locate and click on **Notebooks** in the sidebar of the **Kubeflow Central Dashboard**.
  id: totrans-357
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**Kubeflow Central Dashboard**的侧边栏中找到并点击**笔记本**。
- en: Next, click on the **New Notebook** button.
  id: totrans-358
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，点击**新建笔记本**按钮。
- en: Specify `first-notebook` for the **Name** input field value.
  id: totrans-359
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**名称**输入字段的值指定为`first-notebook`。
- en: Scroll down to the bottom of the page, and then click on the **LAUNCH** button.
  id: totrans-360
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 滚动到页面底部，然后点击**启动**按钮。
- en: Note
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Wait for the notebook to become available. It should take about 1–2 minutes
    for the notebook to be ready.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 等待笔记本变得可用。通常需要 1-2 分钟才能准备好笔记本。
- en: Click on the **CONNECT** button once the notebook becomes available.
  id: totrans-363
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 笔记本变得可用后，点击 **CONNECT** 按钮。
- en: 'In the **Jupyter Lab Launcher**, select the **Python 3** option (under **Notebook**),
    as highlighted in *Figure 10.23*:'
  id: totrans-364
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **Jupyter Lab Launcher** 中，选择 **Python 3** 选项（在 **Notebook** 下），如 *图 10.23*
    中所示：
- en: '![Figure 10.23 – Jupyter Lab Launcher ](img/B18638_10_023.jpg)'
  id: totrans-365
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.23 – Jupyter Lab Launcher](img/B18638_10_023.jpg)'
- en: Figure 10.23 – Jupyter Lab Launcher
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.23 – Jupyter Lab Launcher
- en: This should create a new **Jupyter Notebook** (inside a container within a Kubernetes
    Pod) where we can run our Python code.
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该创建一个新的 **Jupyter Notebook**（在 Kubernetes Pod 内部的容器中），我们可以在这里运行我们的 Python
    代码。
- en: Note
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: We will run the blocks of code in the succeeding set of steps inside the Jupyter
    notebook we launched.
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在启动的 Jupyter 笔记本中运行的后续步骤中运行代码块。
- en: 'Let’s perform a few imports from the **Kubeflow Pipelines SDK**:'
  id: totrans-370
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们从 **Kubeflow Pipelines SDK** 中执行一些导入操作：
- en: '[PRE78]'
  id: totrans-371
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE78]'
- en: '[PRE79]'
  id: totrans-372
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE79]'
- en: '[PRE80]'
  id: totrans-373
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE80]'
- en: '[PRE81]'
  id: totrans-374
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'For the first step in our pipeline, we define the `download_dataset()` function,
    which downloads a dummy dataset and converts it into a CSV file. This CSV file
    gets passed to the next step through the `df_all_data_path` `OutputPath` object:'
  id: totrans-375
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们管道的第一步中，我们定义了 `download_dataset()` 函数，该函数下载一个虚拟数据集并将其转换为 CSV 文件。这个 CSV 文件通过
    `df_all_data_path` `OutputPath` 对象传递到下一步：
- en: '[PRE82]'
  id: totrans-376
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE82]'
- en: '[PRE83]'
  id: totrans-377
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE83]'
- en: '[PRE84]'
  id: totrans-378
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE84]'
- en: '[PRE85]'
  id: totrans-379
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE85]'
- en: '[PRE86]'
  id: totrans-380
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE86]'
- en: '[PRE87]'
  id: totrans-381
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE87]'
- en: '[PRE88]'
  id: totrans-382
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE88]'
- en: '[PRE89]'
  id: totrans-383
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE89]'
- en: '[PRE90]'
  id: totrans-384
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE90]'
- en: '[PRE91]'
  id: totrans-385
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE91]'
- en: 'For the second step in our pipeline, we define the `process_data()` function
    where we read the CSV data from the previous step and apply the train-test split,
    which will yield a training set and a test set. These can then be saved as CSV
    files and passed to the next step through the `df_training_data_path` and `df_test_data_path`
    `OutputPath` objects, respectively:'
  id: totrans-386
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们管道的第二步中，我们定义了 `process_data()` 函数，其中我们读取前一步骤的 CSV 数据并应用训练-测试拆分，这将产生一个训练集和一个测试集。然后，这些可以保存为
    CSV 文件，并通过 `df_training_data_path` 和 `df_test_data_path` `OutputPath` 对象分别传递到下一步：
- en: '[PRE92]'
  id: totrans-387
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE92]'
- en: '[PRE93]'
  id: totrans-388
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE93]'
- en: '[PRE94]'
  id: totrans-389
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE94]'
- en: '[PRE95]'
  id: totrans-390
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE95]'
- en: '[PRE96]'
  id: totrans-391
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE96]'
- en: '[PRE97]'
  id: totrans-392
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE97]'
- en: '[PRE98]'
  id: totrans-393
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE98]'
- en: '[PRE99]'
  id: totrans-394
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE99]'
- en: '[PRE100]'
  id: totrans-395
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE100]'
- en: '[PRE101]'
  id: totrans-396
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE101]'
- en: '[PRE102]'
  id: totrans-397
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE102]'
- en: '[PRE103]'
  id: totrans-398
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE103]'
- en: '[PRE104]'
  id: totrans-399
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE104]'
- en: '[PRE105]'
  id: totrans-400
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE105]'
- en: '[PRE106]'
  id: totrans-401
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE106]'
- en: '[PRE107]'
  id: totrans-402
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE107]'
- en: '[PRE108]'
  id: totrans-403
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE108]'
- en: '[PRE109]'
  id: totrans-404
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE109]'
- en: '[PRE110]'
  id: totrans-405
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE110]'
- en: '[PRE111]'
  id: totrans-406
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE111]'
- en: '[PRE112]'
  id: totrans-407
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE112]'
- en: '[PRE113]'
  id: totrans-408
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE113]'
- en: '[PRE114]'
  id: totrans-409
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE114]'
- en: '[PRE115]'
  id: totrans-410
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE115]'
- en: '[PRE116]'
  id: totrans-411
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE116]'
- en: '[PRE117]'
  id: totrans-412
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE117]'
- en: '[PRE118]'
  id: totrans-413
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE118]'
- en: '[PRE119]'
  id: totrans-414
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE119]'
- en: '[PRE120]'
  id: totrans-415
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE120]'
- en: '[PRE121]'
  id: totrans-416
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE121]'
- en: '[PRE122]'
  id: totrans-417
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE122]'
- en: '[PRE123]'
  id: totrans-418
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE123]'
- en: '[PRE124]'
  id: totrans-419
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE124]'
- en: 'For the third step in our pipeline, we define the `train_model()` function
    where we use the training data from the previous step to train a sample model.
    Then, the trained model gets saved and passed to the next step via the `model_path`
    `OutputPath` object:'
  id: totrans-420
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们管道的第三步中，我们定义了 `train_model()` 函数，其中我们使用前一步骤的训练数据来训练一个样本模型。然后，训练好的模型通过 `model_path`
    `OutputPath` 对象保存并传递到下一步：
- en: '[PRE125]'
  id: totrans-421
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE125]'
- en: '[PRE126]'
  id: totrans-422
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE126]'
- en: '[PRE127]'
  id: totrans-423
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE127]'
- en: '[PRE128]'
  id: totrans-424
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE128]'
- en: '[PRE129]'
  id: totrans-425
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE129]'
- en: '[PRE130]'
  id: totrans-426
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE130]'
- en: '[PRE131]'
  id: totrans-427
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE131]'
- en: '[PRE132]'
  id: totrans-428
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE132]'
- en: '[PRE133]'
  id: totrans-429
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE133]'
- en: '[PRE134]'
  id: totrans-430
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE134]'
- en: '[PRE135]'
  id: totrans-431
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE135]'
- en: '[PRE136]'
  id: totrans-432
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE136]'
- en: '[PRE137]'
  id: totrans-433
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE137]'
- en: '[PRE138]'
  id: totrans-434
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE138]'
- en: '[PRE139]'
  id: totrans-435
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE139]'
- en: '[PRE140]'
  id: totrans-436
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE140]'
- en: '[PRE141]'
  id: totrans-437
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE141]'
- en: '[PRE142]'
  id: totrans-438
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE142]'
- en: '[PRE143]'
  id: totrans-439
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE143]'
- en: 'In the fourth step, we define the `evaluate_model()` function where we use
    the test data from the second step to evaluate the trained model that we obtained
    from the previous step:'
  id: totrans-440
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第四步中，我们定义了 `evaluate_model()` 函数，其中我们使用第二步的测试数据来评估从上一步获得的训练模型：
- en: '[PRE144]'
  id: totrans-441
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE144]'
- en: '[PRE145]'
  id: totrans-442
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE145]'
- en: '[PRE146]'
  id: totrans-443
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE146]'
- en: '[PRE147]'
  id: totrans-444
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE147]'
- en: '[PRE148]'
  id: totrans-445
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE148]'
- en: '[PRE149]'
  id: totrans-446
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE149]'
- en: '[PRE150]'
  id: totrans-447
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE150]'
- en: '[PRE151]'
  id: totrans-448
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE151]'
- en: '[PRE152]'
  id: totrans-449
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE152]'
- en: '[PRE153]'
  id: totrans-450
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE153]'
- en: '[PRE154]'
  id: totrans-451
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE154]'
- en: '[PRE155]'
  id: totrans-452
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE155]'
- en: 'For the final step of our pipeline, we define the `perform_sample_prediction()`
    function where we use the trained model from the third step to perform a sample
    prediction (using a sample input value):'
  id: totrans-453
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们管道的最终步骤中，我们定义了 `perform_sample_prediction()` 函数，其中我们使用第三步训练的模型来执行样本预测（使用样本输入值）：
- en: '[PRE156]'
  id: totrans-454
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE156]'
- en: '[PRE157]'
  id: totrans-455
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE157]'
- en: '[PRE158]'
  id: totrans-456
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE158]'
- en: '[PRE159]'
  id: totrans-457
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE159]'
- en: '[PRE160]'
  id: totrans-458
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE160]'
- en: 'Then, we use the `create_component_from_func()` function for each of the functions
    we have prepared to create components. Here, we specify the packages to install
    before running these functions:'
  id: totrans-459
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们使用 `create_component_from_func()` 函数为每个我们准备好的函数创建组件。在这里，我们指定在运行这些函数之前要安装的包：
- en: '[PRE161]'
  id: totrans-460
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE161]'
- en: '[PRE162]'
  id: totrans-461
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE162]'
- en: '[PRE163]'
  id: totrans-462
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE163]'
- en: '[PRE164]'
  id: totrans-463
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE164]'
- en: '[PRE165]'
  id: totrans-464
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE165]'
- en: '[PRE166]'
  id: totrans-465
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE166]'
- en: '[PRE167]'
  id: totrans-466
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE167]'
- en: '[PRE168]'
  id: totrans-467
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE168]'
- en: '[PRE169]'
  id: totrans-468
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE169]'
- en: '[PRE170]'
  id: totrans-469
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE170]'
- en: '[PRE171]'
  id: totrans-470
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE171]'
- en: '[PRE172]'
  id: totrans-471
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE172]'
- en: '[PRE173]'
  id: totrans-472
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE173]'
- en: '[PRE174]'
  id: totrans-473
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE174]'
- en: '[PRE175]'
  id: totrans-474
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE175]'
- en: '[PRE176]'
  id: totrans-475
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE176]'
- en: '[PRE177]'
  id: totrans-476
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE177]'
- en: '[PRE178]'
  id: totrans-477
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE178]'
- en: '[PRE179]'
  id: totrans-478
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE179]'
- en: '[PRE180]'
  id: totrans-479
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE180]'
- en: '[PRE181]'
  id: totrans-480
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE181]'
- en: '[PRE182]'
  id: totrans-481
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE182]'
- en: '[PRE183]'
  id: totrans-482
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE183]'
- en: '[PRE184]'
  id: totrans-483
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE184]'
- en: '[PRE185]'
  id: totrans-484
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE185]'
- en: 'Now, let’s bring everything together and define the pipeline with the `basic_pipeline()`
    function:'
  id: totrans-485
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们将所有内容整合在一起，并使用 `basic_pipeline()` 函数定义管道：
- en: '[PRE186]'
  id: totrans-486
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE186]'
- en: '[PRE187]'
  id: totrans-487
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE187]'
- en: '[PRE188]'
  id: totrans-488
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE188]'
- en: '[PRE189]'
  id: totrans-489
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE189]'
- en: '[PRE190]'
  id: totrans-490
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE190]'
- en: '[PRE191]'
  id: totrans-491
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE191]'
- en: '[PRE192]'
  id: totrans-492
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE192]'
- en: '[PRE193]'
  id: totrans-493
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE193]'
- en: '[PRE194]'
  id: totrans-494
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE194]'
- en: '[PRE195]'
  id: totrans-495
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE195]'
- en: '[PRE196]'
  id: totrans-496
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE196]'
- en: '[PRE197]'
  id: totrans-497
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE197]'
- en: '[PRE198]'
  id: totrans-498
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE198]'
- en: '[PRE199]'
  id: totrans-499
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE199]'
- en: '[PRE200]'
  id: totrans-500
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE200]'
- en: '[PRE201]'
  id: totrans-501
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE201]'
- en: '[PRE202]'
  id: totrans-502
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE202]'
- en: '[PRE203]'
  id: totrans-503
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE203]'
- en: '[PRE204]'
  id: totrans-504
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE204]'
- en: '[PRE205]'
  id: totrans-505
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE205]'
- en: '[PRE206]'
  id: totrans-506
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE206]'
- en: 'Finally, let’s generate the pipeline’s YAML file using the following block
    of code:'
  id: totrans-507
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，让我们使用以下代码块生成管道的 YAML 文件：
- en: '[PRE207]'
  id: totrans-508
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE207]'
- en: '[PRE208]'
  id: totrans-509
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE208]'
- en: '[PRE209]'
  id: totrans-510
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE209]'
- en: '[PRE210]'
  id: totrans-511
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE210]'
- en: At this point, we should see a YAML file in the file browser. If not, feel free
    to use the refresh button to update the list of files displayed.
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我们应该在文件浏览器中看到一个 YAML 文件。如果没有，请随意使用刷新按钮更新显示的文件列表。
- en: 'In the file browser, right-click on the generated `basic_pipeline.yaml` file
    to open a context menu similar to what is shown in *Figure 10.24*:'
  id: totrans-513
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文件浏览器中，右键单击生成的 `basic_pipeline.yaml` 文件以打开一个类似于 *图 10.24* 中所示的上下文菜单：
- en: '![Figure 10.24 – Downloading the basic_pipeline.yaml file ](img/B18638_10_024.jpg)'
  id: totrans-514
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.24 – 下载 basic_pipeline.yaml 文件](img/B18638_10_024.jpg)'
- en: Figure 10.24 – Downloading the basic_pipeline.yaml file
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.24 – 下载 basic_pipeline.yaml 文件
- en: Select **Download** from the list of options in the context menu (as highlighted
    in *Figure 10.24*). This should download the YAML file to the downloads folder
    (or similar) of your local machine.
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
  zh: 在上下文菜单中的选项列表中选择 **Download**（如 *图 10.24* 中所示）。这将下载 YAML 文件到您的本地机器的下载文件夹（或类似位置）。
- en: After downloading the `basic_pipeline.yaml` file, navigate to the browser tab
    where we have **Kubeflow Central Dashboard** open. After that, navigate to the
    **Pipelines** page by clicking on **Pipelines** in the sidebar (in **Kubeflow
    Central Dashboard**).
  id: totrans-517
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, click on the `basic_pipeline.yaml` file we generated in this section to
    run another pipeline.
  id: totrans-518
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Important Note
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
- en: Feel free to check and follow the steps specified in the *Running our first
    Kubeflow pipeline* section of this chapter when running a new pipeline. We will
    leave this to you as an exercise! (The resulting pipeline should be the same.)
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
- en: '*That was easier than expected, right?* We should congratulate ourselves after
    completing the hands-on solutions in this chapter! Being able to properly set
    up Kubeflow on EKS along with getting custom ML pipelines to work using Kubeflow
    is an achievement. This should give us the confidence to build more complex ML
    pipelines using the technology stack that we are using right now.'
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will do a quick cleanup and delete the resources we
    created in this chapter.
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
- en: Cleaning up
  id: totrans-523
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have completed working on the hands-on solutions of this chapter,
    it is time we clean up and turn off the resources we will no longer use. At this
    point in time, we have an EKS cluster running with `5` x `m5.xlarge` instances
    running. We need to terminate these resources to manage the cost.
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
- en: '*If we do not turn these off (for a month), how much would it cost?* At a minimum
    (per month), it would cost around USD 700.80 for the running EC2 instances (*5
    instances x 0.192 USD x 730 hours in a month*) plus *USD 73*for the EKS cluster
    (*1 Cluster x 0.10 USD per hour x 730 hours per month*) assuming that we are running
    the EKS cluster in the Oregon region (`us-west-2`). Note that there will be other
    additional costs associated with the EBS volumes attached to these instances along
    with the other resources used in this chapter.'
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
- en: 'In the next set of steps, we will uninstall and delete the resources in the
    Cloud9 environment’s Terminal:'
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s navigate back to the Cloud9 environment **Terminal** tab, where we last
    ran the following command (*NOTE: do not run the following command as we just
    need to navigate back to the tab where this command is running*):'
  id: totrans-528
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE211]'
  id: totrans-529
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE211]'
- en: We should find a few **Handling connection for 8080** logs in this Terminal.
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
- en: Stop this command by pressing *Ctrl* + *C* (or, alternatively, *Cmd* + *C* when
    using a Mac device) inside the Terminal.
  id: totrans-531
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After that, let’s run the following command, which utilizes `kubectl delete`
    to delete the resources:'
  id: totrans-532
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE212]'
  id: totrans-533
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE212]'
- en: '[PRE213]'
  id: totrans-534
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE213]'
- en: '[PRE214]'
  id: totrans-535
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE214]'
- en: 'Let’s delete the EKS cluster by running the following command:'
  id: totrans-536
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE215]'
  id: totrans-537
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE215]'
- en: Ensure that the `CLUSTER_REGION` and `CLUSTER_NAME` variables are set with the
    appropriate values before running the command. For example, if you are running
    the Kubernetes cluster in the Oregon region, `CLUSTER_REGION` should be set to
    `us-west-2`, while `CLUSTER_NAME` should be set to `kubeflow-eks-000` (this is
    similar to what’s specified in the `eks.yaml` file)
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
- en: Important Note
  id: totrans-539
  prefs: []
  type: TYPE_NORMAL
- en: Make sure that you verify that the CloudFormation Stack created by the `eksctl`
    command is completely deleted. You can do this by navigating to the CloudFormation
    console and checking whether there are stacks with a **DELETE_FAILED** status.
    If that’s the case, simply reattempt the deletion of these stacks until all resources
    have been successfully deleted.
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
- en: Finally, detach the IAM role attached to the EC2 instance where the Cloud9 environment
    is running. We will leave this to you as an exercise!
  id: totrans-541
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make sure to review whether all delete operations have succeeded before proceeding
    to the next section.
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
- en: Recommended strategies and best practices
  id: totrans-543
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we end this chapter, we will quickly discuss some of the recommended
    strategies and best practices when working with Kubeflow on EKS.
  id: totrans-544
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s start by identifying the ways we can improve how we designed and implemented
    our ML pipeline. *What improvements can we make to the initial version of our
    pipeline?* Here are some of the possible upgrades we can implement:'
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
- en: Making the pipeline more reusable by allowing the first step of our pipeline
    to accept the dataset input path as an input parameter (instead of it being hardcoded
    in a similar way to what we have right now)
  id: totrans-546
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building and using a custom container image instead of using the `packages_to_install`
    parameter when working with pipeline components
  id: totrans-547
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Saving the model artifacts into a storage service such as **Amazon S3** (which
    will help us make sure that we are able to keep the artifacts even if the Kubernetes
    cluster has been deleted)
  id: totrans-548
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding resource limits (such as CPU and memory limits) to specific steps in
    the pipeline using a `ContainerOp` object’s `set_memory_limit()` and `set_cpu_limit()`
  id: totrans-549
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Utilizing **SageMaker Components for Kubeflow Pipelines** to move some of the
    data processing and training workloads to SageMaker
  id: totrans-550
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  id: totrans-551
  prefs: []
  type: TYPE_NORMAL
- en: If you are interested in learning and applying the best practices when preparing
    **Kubeflow Pipelines’ components**, feel free to check out [https://www.kubeflow.org/docs/components/pipelines/sdk/best-practices/](https://www.kubeflow.org/docs/components/pipelines/sdk/best-practices/).
  id: totrans-552
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, let’s talk about some strategies and solutions that we can implement
    to upgrade our EKS cluster and Kubeflow setup:'
  id: totrans-553
  prefs: []
  type: TYPE_NORMAL
- en: Setting up **CloudWatch Container Insights** on the Amazon EKS cluster to monitor
    the cluster performance
  id: totrans-554
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up and deploying **Kubernetes Dashboard** and/or **Rancher** to manage
    and control the Amazon EKS cluster resources
  id: totrans-555
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up **Prometheus** and **Grafana** for monitoring the Kubernetes cluster
  id: totrans-556
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changing the default user password when accessing the **Kubeflow Central Dashboard**
  id: totrans-557
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using **AWS Cognito** as an identity provider when deploying Kubeflow (for Kubeflow
    user authentication)
  id: totrans-558
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying Kubeflow with Amazon **Relational Database Service** (**RDS**) and
    Amazon **Simple Storage Service** (**S3**) for storing metadata and pipeline artifacts
  id: totrans-559
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exposing and accessing Kubeflow through an **Application Load Balancer**
  id: totrans-560
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using **Amazon Elastic File System** (**EFS**) with Kubeflow for persistent
    storage
  id: totrans-561
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reducing the permissions (to a minimal set of privileges) of the IAM role attached
    to the EC2 instance where the Cloud9 environment is running
  id: totrans-562
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Auditing and upgrading the security configuration of each of the resources used
  id: totrans-563
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up autoscaling of the EKS cluster (for example, using **Cluster Autoscaler**)
  id: totrans-564
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To manage the long-term costs of running EKS clusters, we can utilize the **Cost
    Savings Plans**, which involves reducing the overall cost of running resources
    after making a long-term commitment (for example, a 1-year or 3-year commitment)
  id: totrans-565
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There’s more we can add to this list, but these should do for now! Make sure
    to review and check the recommended solutions and strategies shared in [*Chapter
    9*](B18638_09.xhtml#_idTextAnchor187), *Security, Governance, and Compliance Strategies*,
    too.
  id: totrans-566
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-567
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we set up and configured our containerized ML environment using
    **Kubeflow**, **Kubernetes**, and **Amazon EKS**. After setting up the environment,
    we then prepared and ran a custom ML pipeline using the **Kubeflow Pipelines SDK**.
    After completing all the hands-on work needed, we proceeded with cleaning up the
    resources we created. Before ending the chapter, we discussed relevant best practices
    and strategies to secure, scale, and manage ML pipelines using the technology
    stack we used in the hands-on portion of this chapter.
  id: totrans-568
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will build and set up an ML pipeline using **SageMaker
    Pipelines**—**Amazon SageMaker’s** purpose-built solution for automating ML workflows
    using relevant MLOps practices.
  id: totrans-569
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  id: totrans-570
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For more information on the topics covered in this chapter, feel free to check
    out the following resources:'
  id: totrans-571
  prefs: []
  type: TYPE_NORMAL
- en: '*Kubernetes concepts* ([https://kubernetes.io/docs/concepts/](https://kubernetes.io/docs/concepts/))'
  id: totrans-572
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Getting started with Amazon EKS* ([https://docs.aws.amazon.com/eks/latest/userguide/getting-started.xhtml](https://docs.aws.amazon.com/eks/latest/userguide/getting-started.xhtml))'
  id: totrans-573
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*eksctl – The official CLI for Amazon EKS* ([https://eksctl.io/](https://eksctl.io/))'
  id: totrans-574
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Amazon EKS troubleshooting* ([https://docs.aws.amazon.com/eks/latest/userguide/troubleshooting.xhtml](https://docs.aws.amazon.com/eks/latest/userguide/troubleshooting.xhtml))'
  id: totrans-575
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Kubeflow on AWS – Deployment* ([https://awslabs.github.io/kubeflow-manifests/docs/deployment/](https://awslabs.github.io/kubeflow-manifests/docs/deployment/))'
  id: totrans-576
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Kubeflow on AWS Security* ([https://awslabs.github.io/kubeflow-manifests/docs/about/security/](https://awslabs.github.io/kubeflow-manifests/docs/about/security/))'
  id: totrans-577
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Kubeflow on AWS Security* ([https://awslabs.github.io/kubeflow-manifests/docs/about/security/](https://awslabs.github.io/kubeflow-manifests/docs/about/security/))'
