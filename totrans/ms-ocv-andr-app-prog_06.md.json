["```py\n<uses-permission android:name=\"android.permission.CAMERA\" />\n<uses-permission\n    android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" />\n<uses-permission\n    android:name=\"android.permission.READ_PHONE_STATE\" />\n<uses-permission\n    android:name=\"android.permission.READ_EXTERNAL_STORAGE\" />\n```", "```py\nndk.dir=<location of the ndk directory>\n```", "```py\nndk {\n    moduleName \"stitcher\"\n}\n```", "```py\nsourceSets.main {\n    jniLibs.srcDir 'src/main/libs'\n    jni.srcDirs = [] //disable automatic ndk-build call\n}\n```", "```py\nLOCAL_PATH := $(call my-dir)\n\ninclude $(CLEAR_VARS)\n\nOPENCV_CAMERA_MODULES:=on\nOPENCV_INSTALL_MODULES:=on\n\ninclude <OpenCV4AndroidSDK>/sdk/native/jni/OpenCV.mk\n\nLOCAL_MODULE    := stitcher\nLOCAL_SRC_FILES := stitcher.cpp\nLOCAL_LDLIBS +=  -llog -ldl\n\ninclude $(BUILD_SHARED_LIBRARY)\n```", "```py\nAPP_STL := gnustl_static\nAPP_CPPFLAGS := -frtti -fexceptions\nAPP_ABI := armeabi-v7a\nAPP_PLATFORM := android-8\n```", "```py\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<ScrollView \n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\" >\n    <LinearLayout android:orientation=\"vertical\" android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\">\n\n        <ImageView\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"0dp\"\n            android:layout_weight=\"0.5\"\n            android:id=\"@+id/ivImage\" />\n        <LinearLayout\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:orientation=\"horizontal\">\n            <Button\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"wrap_content\"\n                android:layout_weight=\"0.5\"\n                android:id=\"@+id/bClickImage\"\n                android:text=\"Click more images\"/>\n            <Button\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"wrap_content\"\n                android:layout_weight=\"0.5\"\n                android:id=\"@+id/bDone\"\n                android:text=\"Done\"/>\n        </LinearLayout>\n\n    </LinearLayout>\n</ScrollView>\n```", "```py\nSystem.loadLibrary(\"stitcher\");\n```", "```py\nbClickImage.setOnClickListener(new View.OnClickListener() {\n    @Override\n    public void onClick(View v) {\n        Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);\n        File imagesFolder = new File(FILE_LOCATION);\n        imagesFolder.mkdirs();\n        File image = new File(imagesFolder, \"panorama_\"+ (clickedImages.size()+1) + \".jpg\");\n        fileUri = Uri.fromFile(image);\n        Log.d(\"StitchingActivity\", \"File URI = \" + fileUri.toString());\n        intent.putExtra(MediaStore.EXTRA_OUTPUT, fileUri); // set the image file name\n\n        // start the image capture Intent\n        startActivityForResult(intent, CLICK_PHOTO);\n    }\n});\n\nbDone.setOnClickListener(new View.OnClickListener() {\n    @Override\n    public void onClick(View v) {\n        if(clickedImages.size()==0){\n            Toast.makeText(getApplicationContext(), \n              \"No images clicked\", Toast.LENGTH_SHORT).show();\n        } else if(clickedImages.size()==1){\n            Toast.makeText(getApplicationContext(), \"Only one image clicked\", Toast.LENGTH_SHORT).show();\n            Bitmap image = Bitmap.createBitmap(src.cols(), src.rows(), Bitmap.Config.ARGB_8888);\n            Utils.matToBitmap(src, image);\n            ivImage.setImageBitmap(image);\n        } else {\n            createPanorama();\n        }\n    }\n});\n```", "```py\nswitch(requestCode) {\n    case CLICK_PHOTO:\n        if(resultCode == RESULT_OK){\n            try {\n                final InputStream imageStream = getContentResolver().openInputStream(fileUri);\n                final Bitmap selectedImage = BitmapFactory.decodeStream(imageStream);\n                src = new Mat(selectedImage.getHeight(), selectedImage.getWidth(), CvType.CV_8UC4);\n                Imgproc.resize(src, src, new Size(src.rows()/4, src.cols()/4));\n                Utils.bitmapToMat(selectedImage, src);\n                Imgproc.cvtColor(src, src, Imgproc.COLOR_BGR2RGB);\n                clickedImages.add(src);\n            } catch (FileNotFoundException e) {\n                e.printStackTrace();\n            }\n        }\n        break;\n}\n```", "```py\nMat srcRes = new Mat();\nint success = StitchPanorama(clickedImages.toArray(), clickedImages.size(), srcRes.getNativeObjAddr());\nif(success==0){\n    return null;\n}\nImgproc.cvtColor(srcRes, srcRes, Imgproc.Color_BGR2RGBA);\nBitmap bitmap = Bitmap.createBitmap(srcRes.cols(), srcRes.rows(), Bitmap.Config.ARGB_8888);\nUtils.matToBitmap(srcRes, bitmap);\nreturn bitmap;\n```", "```py\npublic native int StitchPanorama(Object images[], int size, long addrSrcRes);\n```", "```py\n#include <jni.h>\n#include <vector>\n\n#include \"opencv2/imgproc/imgproc.hpp\"\n#include \"opencv2/highgui/highgui.hpp\"\n#include <opencv2/stitching/stitcher.hpp>\nusing namespace cv;\nusing namespace std;\n\nchar FILEPATH[100] = \"/storage/emulated/0/Download/PacktBook/Chapter6/panorama_stitched.jpg\";\n```", "```py\nextern \"C\" {\n    JNIEXPORT jint JNICALL Java_com_packtpub_masteringopencvandroid_chapter6_StitchingActivity_StitchPanorama(JNIEnv*, jobject, jobjectArray, jint, jlong);\n    JNIEXPORT jint JNICALL Java_com_packtpub_masteringopencvandroid_chapter6_StitchingActivity_StitchPanorama(JNIEnv* env, jobject, jobjectArray images, jint size, jlong resultMatAddr)\n    {\n        â€¦\n    }\n}\n```", "```py\njint resultReturn = 0;\nvector<Mat> clickedImages = vector<Mat>();\nMat output_stitched = Mat();\nMat& srcRes = *(Mat*)resultMatAddr, img;\n```", "```py\njclass clazz = (env)->FindClass(\"org/opencv/core/Mat\");\njmethodID getNativeObjAddr = (env)->GetMethodID(clazz, \"getNativeObjAddr\", \"()J\");\n\nfor(int i=0; i < size; i++){\n    jobject obj = (env->GetObjectArrayElement(images, i));\n    jlong result = (env)->CallLongMethod(obj, getNativeObjAddr, NULL);\n    img = *(Mat*)result;\n    resize(img, img, Size(img.rows/10, img.cols/10));\n    clickedImages.push_back(img);\n    env->DeleteLocalRef(obj);\n}\nenv->DeleteLocalRef(images);\n```", "```py\nStitcher stitcher = Stitcher::createDefault();\nStitcher::Status status = stitcher.stitch(clickedImages, output_stitched);\n\noutput_stitched.copyTo(srcRes);\n\nimwrite(FILEPATH, srcRes);\n\nif (status == Stitcher::OK)\n    resultReturn = 1;\nelse\n    resultReturn = 0;\n\nreturn resultReturn;\n```", "```py\n<ndk_dir>/ndk-build\n\n```"]