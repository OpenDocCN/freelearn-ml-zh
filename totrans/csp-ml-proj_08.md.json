["```py\nvar digitCount = featuresDF.AggregateRowsBy<string, int>(\n    new string[] { \"label\" },\n    new string[] { \"pixel0\" },\n    x => x.ValueCount\n).SortRows(\"pixel0\");\n\ndigitCount.Print();\n\nvar barChart = DataBarBox.Show(\n    digitCount.GetColumn<string>(\"label\").Values.ToArray(),\n    digitCount[\"pixel0\"].Values.ToArray()\n).SetTitle(\n    \"Digit Count\"\n);\n```", "```py\nprivate static void CreateImage(int[] rows, string digit)\n{\n    int width = 28;\n    int height = 28;\n    int stride = width * 4;\n    int[,] pixelData = new int[width, height];\n\n    for (int i = 0; i < width; ++i)\n    {\n        for (int j = 0; j < height; ++j)\n        {\n            byte[] bgra = new byte[] { (byte)rows[28 * i + j], (byte)rows[28 * i + j], (byte)rows[28 * i + j], 255 };\n            pixelData[i, j] = BitConverter.ToInt32(bgra, 0);\n        }\n    }\n\n    Bitmap bitmap;\n    unsafe\n    {\n        fixed (int* ptr = &pixelData[0, 0])\n        {\n            bitmap = new Bitmap(width, height, stride, PixelFormat.Format32bppRgb, new IntPtr(ptr));\n        }\n    }\n    bitmap.Save(\n        String.Format(@\"\\\\Mac\\Home\\Documents\\c-sharp-machine-learning\\ch.8\\input-data\\{0}.jpg\", digit)\n    );\n}\n```", "```py\nISet<string> exportedLabels = new HashSet<string>();\nfor(int i = 0; i < featuresDF.RowCount; i++)\n{\n    exportedLabels.Add(featuresDF.Rows[i].GetAs<string>(\"label\"));\n\n    CreateImage(\n        featuresDF.Rows[i].ValuesAll.Select(x => (int)x).Where((x, idx) => idx > 0).ToArray(),\n        featuresDF.Rows[i].GetAs<string>(\"label\")\n    );\n\n    if(exportedLabels.Count() >= 10)\n    {\n        break;\n    }\n}\n```", "```py\nList<string> featureCols = new List<string>();\nforeach (string col in featuresDF.ColumnKeys)\n{\n    if (featureCols.Count >= 20)\n    {\n        break;\n    }\n\n    if (col.StartsWith(\"pixel\"))\n    {\n        if (featuresDF[col].Max() > 0)\n        {\n            featureCols.Add(col);\n\n            Console.WriteLine(String.Format(\"\\n\\n-- {0} Distribution -- \", col));\n            double[] quantiles = Accord.Statistics.Measures.Quantiles(\n                featuresDF[col].ValuesAll.ToArray(),\n                new double[] { 0, 0.25, 0.5, 0.75, 1.0 }\n            );\n            Console.WriteLine(\n                \"Min: \\t\\t\\t{0:0.00}\\nQ1 (25% Percentile): \\t{1:0.00}\\nQ2 (Median): \\t\\t{2:0.00}\\nQ3 (75% Percentile): \\t{3:0.00}\\nMax: \\t\\t\\t{4:0.00}\",\n                quantiles[0], quantiles[1], quantiles[2], quantiles[3], quantiles[4]\n            );\n        }\n\n    }\n}\n```", "```py\nstring[] featureColumns = featureCols.ToArray();\n\nforeach (string label in digitCount.GetColumn<string>(\"label\").Values)\n{\n    var subfeaturesDF = featuresDF.Rows[\n        featuresDF.GetColumn<string>(\"label\").Where(x => x.Value == label).Keys\n    ].Columns[featureColumns];\n\n    ScatterplotBox.Show(\n        BuildXYPairs(\n            subfeaturesDF.Columns[featureColumns].ToArray2D<double>(),\n            subfeaturesDF.RowCount,\n            subfeaturesDF.ColumnCount\n        )\n    ).SetTitle(String.Format(\"Digit: {0} - 20 sample Pixels\", label));\n}\n```", "```py\ndouble[][] twoPixels = featuresDF.Columns[\n    new string[] { featureColumns[15], featureColumns[16] }\n].Rows.Select(\n    x => Array.ConvertAll<object, double>(x.Value.ValuesAll.ToArray(), o => Convert.ToDouble(o))\n).ValuesAll.ToArray();\n\nScatterplotBox.Show(\n    String.Format(\"{0} vs. {1}\", featureColumns[15], featureColumns[16]), \n    twoPixels,\n    featuresDF.GetColumn<int>(\"label\").Values.ToArray()\n);\n```", "```py\ndouble trainSetProportiona = 0.7;\n\nvar rnd = new Random();\nvar trainIdx = featuresDF.RowKeys.Where((x, i) => rnd.NextDouble() <= trainSetProportiona);\nvar testIdx = featuresDF.RowKeys.Where((x, i) => !trainIdx.Contains(i));\n\nvar trainset = featuresDF.Rows[trainIdx];\nvar testset = featuresDF.Rows[testIdx];\n\nvar trainLabels = trainset.GetColumn<int>(\"label\").Values.ToArray();\n\nstring[] nonZeroPixelCols = trainset.ColumnKeys.Where(x => trainset[x].Max() > 0 && !x.Equals(\"label\")).ToArray();\n\ndouble[][] data = trainset.Columns[nonZeroPixelCols].Rows.Select(\n    x => Array.ConvertAll<object, double>(x.Value.ValuesAll.ToArray(), o => Convert.ToDouble(o))\n).ValuesAll.ToArray();\n```", "```py\nvar digitCount = trainset.AggregateRowsBy<string, int>(\n    new string[] { \"label\" },\n    new string[] { \"pixel0\" },\n    x => x.ValueCount\n).SortRows(\"pixel0\");\n\ndigitCount.Print();\n\nvar barChart = DataBarBox.Show(\n    digitCount.GetColumn<string>(\"label\").Values.ToArray(),\n    digitCount[\"pixel0\"].Values.ToArray()\n).SetTitle(\n    \"Train Set - Digit Count\"\n);\n\ndigitCount = testset.AggregateRowsBy<string, int>(\n    new string[] { \"label\" },\n    new string[] { \"pixel0\" },\n    x => x.ValueCount\n).SortRows(\"pixel0\");\n\ndigitCount.Print();\n\nbarChart = DataBarBox.Show(\n    digitCount.GetColumn<string>(\"label\").Values.ToArray(),\n    digitCount[\"pixel0\"].Values.ToArray()\n).SetTitle(\n    \"Test Set - Digit Count\"\n);\n```", "```py\nvar pca = new PrincipalComponentAnalysis(\n    PrincipalComponentMethod.Standardize\n);\npca.Learn(data);\n```", "```py\ndouble[][] transformed = pca.Transform(data);\n```", "```py\ndouble[][] first2Components = transformed.Select(x => x.Where((y, i) => i < 2).ToArray()).ToArray();\n\nScatterplotBox.Show(\"Component #1 vs. Component #2\", first2Components, trainLabels);\n```", "```py\nDataSeriesBox.Show(\n    pca.Components.Select((x, i) => (double)i),\n    pca.Components.Select(x => x.CumulativeProportion)\n).SetTitle(\"Explained Variance\");\n\nSystem.IO.File.WriteAllLines(\n    Path.Combine(dataDirPath, \"explained-variance.csv\"),\n    pca.Components.Select((x, i) => String.Format(\"{0},{1:0.0000}\", i, x.CumulativeProportion))\n);\n```", "```py\nConsole.WriteLine(\"exporting train set...\");\nvar trainTransformed = pca.Transform(\n    trainset.Columns[nonZeroPixelCols].Rows.Select(\n        x => Array.ConvertAll<object, double>(x.Value.ValuesAll.ToArray(), o => Convert.ToDouble(o))\n    ).ValuesAll.ToArray()\n);\n\nSystem.IO.File.WriteAllLines(\n    Path.Combine(dataDirPath, \"pca-train.csv\"),\n    trainTransformed.Select((x, i) => String.Format(\"{0},{1}\", String.Join(\",\", x), trainset[\"label\"].GetAt(i)))\n);\n\nConsole.WriteLine(\"exporting test set...\");\nvar testTransformed = pca.Transform(\n    testset.Columns[nonZeroPixelCols].Rows.Select(\n        x => Array.ConvertAll<object, double>(x.Value.ValuesAll.ToArray(), o => Convert.ToDouble(o))\n    ).ValuesAll.ToArray()\n);\nSystem.IO.File.WriteAllLines(\n    Path.Combine(dataDirPath, \"pca-test.csv\"),\n    testTransformed.Select((x, i) => String.Format(\"{0},{1}\", String.Join(\",\", x), testset[\"label\"].GetAt(i)))\n);\n```", "```py\n// Load the data into a data frame\nstring trainDataPath = Path.Combine(dataDirPath, \"pca-train.csv\");\nConsole.WriteLine(\"Loading {0}\\n\\n\", trainDataPath);\nvar trainDF = Frame.ReadCsv(\n    trainDataPath,\n    hasHeaders: false,\n    inferTypes: true\n);\n\nstring testDataPath = Path.Combine(dataDirPath, \"pca-test.csv\");\nConsole.WriteLine(\"Loading {0}\\n\\n\", testDataPath);\nvar testDF = Frame.ReadCsv(\n    testDataPath,\n    hasHeaders: false,\n    inferTypes: true\n);\n\nstring[] colnames = trainDF.ColumnKeys.Select(\n    (x, i) => i < trainDF.ColumnKeys.Count() - 1 ? String.Format(\"component-{0}\", i + 1) : \"label\"\n).ToArray();\n\ntrainDF.RenameColumns(colnames);\ntestDF.RenameColumns(colnames);\n```", "```py\n// Capturing 70% of the variance\nstring[] featureCols = colnames.Where((x, i) => i <= 90).ToArray();\n\ndouble[][] trainInput = BuildJaggedArray(\n    trainDF.Columns[featureCols].ToArray2D<double>(), trainDF.RowCount, featureCols.Length\n);\nint[] trainOutput = trainDF.GetColumn<int>(\"label\").ValuesAll.ToArray();\n\ndouble[][] testInput = BuildJaggedArray(\n    testDF.Columns[featureCols].ToArray2D<double>(), testDF.RowCount, featureCols.Length\n);\nint[] testOutput = testDF.GetColumn<int>(\"label\").ValuesAll.ToArray();\n```", "```py\nprivate static double[][] BuildJaggedArray(double[,] ary2d, int rowCount, int colCount)\n{\n    double[][] matrix = new double[rowCount][];\n    for(int i = 0; i < rowCount; i++)\n    {\n        matrix[i] = new double[colCount];\n        for(int j = 0; j < colCount; j++)\n        {\n            matrix[i][j] = double.IsNaN(ary2d[i, j]) ? 0.0 : ary2d[i, j];\n        }\n    }\n    return matrix;\n}\n```", "```py\nprivate static void BuildLogitModel(double[][] trainInput, int[] trainOutput, double[][] testInput, int[] testOutput)\n{\n    var logit = new MultinomialLogisticLearning<GradientDescent>()\n    {\n        MiniBatchSize = 500\n    };\n    var logitModel = logit.Learn(trainInput, trainOutput);\n\n    int[] inSamplePreds = logitModel.Decide(trainInput);\n    int[] outSamplePreds = logitModel.Decide(testInput);\n\n    // Accuracy\n    double inSampleAccuracy = 1 - new ZeroOneLoss(trainOutput).Loss(inSamplePreds);\n    double outSampleAccuracy = 1 - new ZeroOneLoss(testOutput).Loss(outSamplePreds);\n    Console.WriteLine(\"* In-Sample Accuracy: {0:0.0000}\", inSampleAccuracy);\n    Console.WriteLine(\"* Out-of-Sample Accuracy: {0:0.0000}\", outSampleAccuracy);\n\n    // Build confusion matrix\n    int[][] confMatrix = BuildConfusionMatrix(\n        testOutput, outSamplePreds, 10\n    );\n    System.IO.File.WriteAllLines(\n        Path.Combine(\n            @\"<path-to-dir>\", \n            \"logit-conf-matrix.csv\"\n        ),\n        confMatrix.Select(x => String.Join(\",\", x))\n    );\n\n    // Precision Recall\n    PrintPrecisionRecall(confMatrix);\n    DrawROCCurve(testOutput, outSamplePreds, 10, \"Logit\");\n}\n```", "```py\nprivate static void BuildNBModel(double[][] trainInput, int[] trainOutput, double[][] testInput, int[] testOutput)\n{\n    var teacher = new NaiveBayesLearning<NormalDistribution>();\n    var nbModel = teacher.Learn(trainInput, trainOutput);\n\n    int[] inSamplePreds = nbModel.Decide(trainInput);\n    int[] outSamplePreds = nbModel.Decide(testInput);\n\n    // Accuracy\n    double inSampleAccuracy = 1 - new ZeroOneLoss(trainOutput).Loss(inSamplePreds);\n    double outSampleAccuracy = 1 - new ZeroOneLoss(testOutput).Loss(outSamplePreds);\n    Console.WriteLine(\"* In-Sample Accuracy: {0:0.0000}\", inSampleAccuracy);\n    Console.WriteLine(\"* Out-of-Sample Accuracy: {0:0.0000}\", outSampleAccuracy);\n\n    // Build confusion matrix\n    int[][] confMatrix = BuildConfusionMatrix(\n        testOutput, outSamplePreds, 10\n    );\n    System.IO.File.WriteAllLines(\n        Path.Combine(\n            @\"<path-to-dir>\",\n            \"nb-conf-matrix.csv\"\n        ),\n        confMatrix.Select(x => String.Join(\",\", x))\n    );\n\n    // Precision Recall\n    PrintPrecisionRecall(confMatrix);\n    DrawROCCurve(testOutput, outSamplePreds, 10, \"NB\");\n}\n```", "```py\nInstall-Package Accord.Neuro\n```", "```py\nprivate static void BuildNNModel(double[][] trainInput, int[] trainOutput, double[][] testInput, int[] testOutput)\n{\n    double[][] outputs = Accord.Math.Jagged.OneHot(trainOutput);\n\n    var function = new BipolarSigmoidFunction(2);\n    var network = new ActivationNetwork(\n        new BipolarSigmoidFunction(2), \n        91, \n        20,\n        10\n    );\n\n    var teacher = new LevenbergMarquardtLearning(network);\n\n    Console.WriteLine(\"\\n-- Training Neural Network\");\n    int numEpoch = 10;\n    double error = Double.PositiveInfinity;\n    for (int i = 0; i < numEpoch; i++)\n    {\n        error = teacher.RunEpoch(trainInput, outputs);\n        Console.WriteLine(\"* Epoch {0} - error: {1:0.0000}\", i + 1, error);\n    }\n    Console.WriteLine(\"\");\n\n    List<int> inSamplePredsList = new List<int>();\n    for (int i = 0; i < trainInput.Length; i++)\n    {\n        double[] output = network.Compute(trainInput[i]);\n        int pred = output.ToList().IndexOf(output.Max());\n        inSamplePredsList.Add(pred);\n    }\n\n    List<int> outSamplePredsList = new List<int>();\n    for (int i = 0; i < testInput.Length; i++)\n    {\n        double[] output = network.Compute(testInput[i]);\n        int pred = output.ToList().IndexOf(output.Max());\n        outSamplePredsList.Add(pred);\n    }\n}\n```", "```py\nprivate static int[][] BuildConfusionMatrix(int[] actual, int[] preds, int numClass)\n{\n    int[][] matrix = new int[numClass][];\n    for (int i = 0; i < numClass; i++)\n    {\n        matrix[i] = new int[numClass];\n    }\n\n    for (int i = 0; i < actual.Length; i++)\n    {\n        matrix[actual[i]][preds[i]] += 1;\n    }\n\n    return matrix;\n}\n```", "```py\n// Accuracy\ndouble inSampleAccuracy = 1 - new ZeroOneLoss(trainOutput).Loss(inSamplePreds);\ndouble outSampleAccuracy = 1 - new ZeroOneLoss(testOutput).Loss(outSamplePreds);\nConsole.WriteLine(\"* In-Sample Accuracy: {0:0.0000}\", inSampleAccuracy);\nConsole.WriteLine(\"* Out-of-Sample Accuracy: {0:0.0000}\", outSampleAccuracy);\n```", "```py\nprivate static void PrintPrecisionRecall(int[][] confMatrix)\n{\n    for (int i = 0; i < confMatrix.Length; i++)\n    {\n        int totalActual = confMatrix[i].Sum();\n        int correctPredCount = confMatrix[i][i];\n\n        int totalPred = 0;\n        for(int j = 0; j < confMatrix.Length; j++)\n        {\n            totalPred += confMatrix[j][i];\n        }\n\n        double precision = correctPredCount / (float)totalPred;\n        double recall = correctPredCount / (float)totalActual;\n\n        Console.WriteLine(\"- Digit {0}: precision - {1:0.0000}, recall - {2:0.0000}\", i, precision, recall);\n    }\n\n}\n```", "```py\nprivate static void DrawROCCurve(int[] actual, int[] preds, int numClass, string modelName)\n{\n    ScatterplotView spv = new ScatterplotView();\n    spv.Dock = DockStyle.Fill;\n    spv.LinesVisible = true;\n\n    Color[] colors = new Color[] {\n        Color.Blue, Color.Red, Color.Orange, Color.Yellow, Color.Green,\n        Color.Gray, Color.LightSalmon, Color.LightSkyBlue, Color.Black, Color.Pink\n    };\n\n    for (int i = 0; i < numClass; i++)\n    {\n        // Build ROC for Train Set\n        bool[] expected = actual.Select(x => x == i ? true : false).ToArray();\n        int[] predicted = preds.Select(x => x == i ? 1 : 0).ToArray();\n\n        var trainRoc = new ReceiverOperatingCharacteristic(expected, predicted);\n        trainRoc.Compute(1000);\n\n        // Get Train AUC\n        double auc = trainRoc.Area;\n        double[] xVals = trainRoc.Points.Select(x => 1 - x.Specificity).ToArray();\n        double[] yVals = trainRoc.Points.Select(x => x.Sensitivity).ToArray();\n\n        // Draw ROC Curve\n        spv.Graph.GraphPane.AddCurve(\n            String.Format(\n                \"Digit: {0} - AUC: {1:0.00}\",\n                i, auc\n            ),\n            xVals, yVals, colors[i], SymbolType.None\n        );\n        spv.Graph.GraphPane.AxisChange();\n    }\n\n    spv.Graph.GraphPane.Title.Text = String.Format(\n        \"{0} ROC - One vs. Rest\",\n        modelName\n    );\n\n    Form f1 = new Form();\n    f1.Width = 700;\n    f1.Height = 500;\n    f1.Controls.Add(spv);\n    f1.ShowDialog();\n}\n```"]