- en: Basics of Machine Learning Modeling
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 机器学习建模基础
- en: It can be difficult to see how **machine learning** (**ML**) affects the daily
    lives of ordinary people. In fact, ML is everywhere! In the process of searching
    for a restaurant for dinner, you almost certainly used ML. In the search for a
    dress to wear for a dinner party, you would have used ML. On your way to your
    dinner appointment, you probably used ML as well if you used one of the ride-sharing
    apps. ML has become so widely used that it has become an essential part of our
    lives, although it is usually unnoticeable. With ever-growing data and its accessibility,
    the applications and needs for ML are rapidly rising across various industries.
    However, the pace of the growth in trained data scientists has yet to meet the
    pace of growth ML needs in businesses, despite abundant resources and software
    libraries that make building ML models easier, due to the fact that it takes time
    and experience for a data scientist and ML engineer to master such skill sets.
    This book will prepare such individuals with real-world projects based on real-world
    datasets.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 要看到机器学习（**ML**）如何影响普通人的日常生活可能很困难。实际上，机器学习无处不在！在寻找晚餐餐厅的过程中，你几乎肯定使用了机器学习。在寻找晚宴时穿的连衣裙时，你也会使用机器学习。在你前往晚餐约会的过程中，如果你使用了共享出行应用，你很可能也使用了机器学习。机器学习已经如此广泛地被使用，以至于它已经成为我们生活中不可或缺的一部分，尽管它通常不易察觉。随着数据的不断增长及其可访问性，机器学习的应用和需求在各个行业中迅速增长。然而，训练有素的科学家和机器学习工程师的增长速度尚未满足企业对机器学习增长的需求，尽管有丰富的资源和软件库使构建机器学习模型变得更加容易，这是因为数据科学家和机器学习工程师掌握这些技能集需要时间和经验。本书将通过基于真实世界数据集的实际项目来为这样的人做好准备。
- en: In this chapter, we will learn about some of the real-life examples and applications
    of ML, the essential steps in building ML models, and how to set up our C# environment
    for ML. After this brief introductory chapter, we will dive immediately into building
    classification ML models using text datasets in [Chapter 2](part0028.html#QMFO0-5ebdf09927b7492888e31e8436526470), *Spam
    Email Filtering*, and [Chapter 3](part0036.html#12AK80-5ebdf09927b7492888e31e8436526470),
    *Twitter Sentiment Analysis*. Then, we will use financial and real estate property
    data to build regression models in [Chapter 4](part0045.html#1AT9A0-5ebdf09927b7492888e31e8436526470), *Foreign
    Exchange Rate Forecast*, and [Chapter 5](part0056.html#1LCVG0-5ebdf09927b7492888e31e8436526470), *Fair
    Value of House and Property*. In [Chapter 6](part0073.html#25JP20-5ebdf09927b7492888e31e8436526470),
    *Customer Segmentation*, we will use a clustering algorithm to gain insight into
    customer behavior using e-commerce data. In [Chapter 7](part0082.html#2E6E40-5ebdf09927b7492888e31e8436526470), *Music
    Genre Recommendation*, and [Chapter 8](part0097.html#2SG6I0-5ebdf09927b7492888e31e8436526470), *Handwritten
    Digit Recognition*, we will build recommendation and image recognition models
    using audio and image data. Lastly, we will use semi-supervised learning techniques
    to detect anomalies in [Chapter 9](part0116.html#3EK180-5ebdf09927b7492888e31e8436526470),
    *Cyber Attack Detection* and [Chapter 10](part0132.html#3TSA80-5ebdf09927b7492888e31e8436526470), *Credit
    Card Fraud Detection*.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将了解一些机器学习的实际例子和应用、构建机器学习模型的基本步骤，以及如何为机器学习设置我们的 C# 环境。在本章简短的介绍之后，我们将立即进入使用文本数据集构建分类机器学习模型，[第
    2 章](part0028.html#QMFO0-5ebdf09927b7492888e31e8436526470) *垃圾邮件过滤* 和 [第 3 章](part0036.html#12AK80-5ebdf09927b7492888e31e8436526470)
    *Twitter 情感分析*。然后，我们将使用金融和房地产数据在 [第 4 章](part0045.html#1AT9A0-5ebdf09927b7492888e31e8436526470)
    *外汇汇率预测* 和 [第 5 章](part0056.html#1LCVG0-5ebdf09927b7492888e31e8436526470) *房屋和财产的公允价值*
    中构建回归模型。在 [第 6 章](part0073.html#25JP20-5ebdf09927b7492888e31e8436526470) *客户细分*
    中，我们将使用聚类算法通过电子商务数据深入了解客户行为。在 [第 7 章](part0082.html#2E6E40-5ebdf09927b7492888e31e8436526470)
    *音乐流派推荐* 和 [第 8 章](part0097.html#2SG6I0-5ebdf09927b7492888e31e8436526470) *手写数字识别*
    中，我们将使用音频和图像数据构建推荐和图像识别模型。最后，我们将在 [第 9 章](part0116.html#3EK180-5ebdf09927b7492888e31e8436526470)
    *网络攻击检测* 和 [第 10 章](part0132.html#3TSA80-5ebdf09927b7492888e31e8436526470) *信用卡欺诈检测*
    中使用半监督学习技术来检测异常。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Key ML tasks and applications
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关键机器学习任务和应用
- en: Steps in building ML models
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建机器学习模型的步骤
- en: Setting up a C# environment for ML
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为机器学习设置 C# 环境
- en: Key ML tasks and applications
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关键机器学习任务和应用
- en: 'There are many areas where ML is used in our daily lives without being noticed.
    Media companies use ML to recommend the most relevant content, such as news articles,
    movies, or music, for you to read, watch, or listen to. The e-commerce companies
    use ML to suggest the items that are of interest and that you are most likely
    to purchase. Game companies use ML to detect your motion and joint movements for
    their motion sensor games. Some other common uses of ML in the industry include face
    detection on cameras for better focusing, automated question answering where chat
    bots or virtual assistants interact with customers to answer questions and requests,
    and detecting and preventing fraudulent transactions. In this section, we will
    take a look at some of the applications we use in our daily lives that utilize
    ML heavily:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的日常生活中，有许多地方使用机器学习，而我们并未意识到。媒体公司使用机器学习为您推荐最相关的内容，如新闻文章、电影或音乐，供您阅读、观看或收听。电子商务公司使用机器学习来建议您可能感兴趣且最有可能购买的商品。游戏公司使用机器学习来检测您的运动和关节运动，以用于他们的动作感应游戏。机器学习在行业中的其他一些常见用途包括相机上的面部检测以实现更好的对焦、自动问答，其中聊天机器人或虚拟助手与客户互动以回答问题和请求，以及检测和预防欺诈交易。在本节中，我们将探讨一些我们在日常生活中使用且高度依赖机器学习的应用：
- en: '**Google News feed**: Google News feed uses ML to generate a personalized stream
    of articles based on the user''s interests and other profile data. Collaborative
    filtering algorithms are frequently used for such recommendation systems and are
    built from the view history data of their user base. Media companies use such
    personalized recommendation systems to attract more traffic to their websites
    and increase the number of subscribers.'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**谷歌新闻动态**：谷歌新闻动态使用机器学习根据用户的兴趣和其他个人资料数据生成个性化的文章流。协同过滤算法常用于此类推荐系统，并基于其用户群体的查看历史数据构建。媒体公司使用此类个性化推荐系统来吸引更多流量到他们的网站并增加订阅者数量。'
- en: '**Amazon product recommendations**: Amazon uses user browse and order history
    data to train a ML model to recommend products that a user is most likely to purchase.
    This is a good use case for supervised learning in the e-commerce industry. These
    recommendation algorithms help e-commerce companies maximize their profit by displaying
    items that are the most relevant to each user''s interests.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**亚马逊产品推荐**：亚马逊利用用户浏览和订单历史数据来训练一个机器学习模型，推荐用户最有可能购买的产品。这是电子商务行业中监督学习的良好用例。这些推荐算法帮助电子商务公司通过显示与每个用户兴趣最相关的商品来最大化其利润。'
- en: '**Netflix movie recommendation**: Netflix uses movie ratings, view history,
    and preference profiles to recommend other movies that a user might like. They
    train collaborative filtering algorithms with data to make personalized recommendations.
    Considering that *More than* *80 per cent of the TV shows people watch on Netflix
    are discovered through the platform''s recommendation system* according to an
    article on Wired ([http://www.wired.co.uk/article/how-do-netflixs-algorithms-work-machine-learning-helps-to-predict-what-viewers-will-like](http://www.wired.co.uk/article/how-do-netflixs-algorithms-work-machine-learning-helps-to-predict-what-viewers-will-like)),
    this is a very useful and profitable example of ML at a media company.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Netflix电影推荐**：Netflix使用电影评分、观看历史和偏好配置文件来推荐用户可能喜欢的其他电影。他们使用数据训练协同过滤算法以做出个性化推荐。根据Wired杂志上的一篇文章（[http://www.wired.co.uk/article/how-do-netflixs-algorithms-work-machine-learning-helps-to-predict-what-viewers-will-like](http://www.wired.co.uk/article/how-do-netflixs-algorithms-work-machine-learning-helps-to-predict-what-viewers-will-like)），超过80%的Netflix用户观看的电视节目是通过平台的推荐系统发现的，这是一个非常有用且有利可图的媒体公司机器学习用例。'
- en: '**Face detection on cameras**: Cameras detect faces for better focusing and
    light metering. This is the most frequently used example of computer vision and
    classification. Also, some photo management software uses clustering algorithms
    to group similar faces in your images together so that you can search photos by
    certain people in them later.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**相机上的面部检测**：相机通过检测面部来实现更好的对焦和曝光测量。这是计算机视觉和分类中最常用的例子。此外，一些照片管理软件使用聚类算法将图像中的相似面部分组在一起，以便您可以稍后通过图像中的特定人物搜索照片。'
- en: '**Alexa – Virtual assistant**: Virtual assistant systems, such as Alexa, can
    answer questions such as *What''s the weather in New York?* or complete certain
    tasks, such as *Turn on the living room lights.* These kinds of virtual assistant
    system are typically built using speech recognition, **natural language understanding**
    (**NLU**), deep learning, and various other machine learning technologies.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Alexa虚拟助手**：虚拟助手系统，如Alexa，可以回答诸如*纽约的天气如何？* 或完成某些任务，如*打开客厅的灯*。这类虚拟助手系统通常使用语音识别、**自然语言理解**（NLU）、深度学习和各种其他机器学习技术构建。'
- en: '**Microsoft Xbox Kinect**: Kinect can sense how far each object is from the
    sensor and detect joint positions. Kinect is trained with a randomized decision
    forest algorithm that builds lots of individual decision trees from depth images.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**微软Xbox Kinect**：Kinect可以感知每个物体与传感器的距离并检测关节位置。Kinect使用随机决策森林算法进行训练，从深度图像中构建大量单个决策树。'
- en: 'The following screenshot shows different examples of recommendation systems
    using ML:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图展示了使用机器学习构建的不同推荐系统示例：
- en: '![](img/00005.jpeg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00005.jpeg)'
- en: 'Left: Google News Feed, top-right: Amazon product recommendation, bottom-right:
    Netflix movie recommendation'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 左：谷歌新闻推送，右上：亚马逊产品推荐，右下：Netflix电影推荐
- en: 'The following screenshot depicts a few other examples of ML applications:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图展示了几个其他机器学习应用的例子：
- en: '![](img/00006.jpeg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00006.jpeg)'
- en: 'Left: Face detection, middle: Amazon Alexa, right: Microsoft Xbox Kinect'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 左：谷歌新闻推送，右上：亚马逊产品推荐，右下：Netflix电影推荐
- en: Steps in building ML models
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建机器学习模型的步骤
- en: 'Now that we have seen some examples of the ML applications that are out there,
    the question is, *How do we go about building such ML applications and systems?*
    Books about ML and ML courses that are taught in universities typically start
    by covering the mathematics and theories behind ML algorithms and then apply those
    algorithms to a given dataset. This approach is great for people who are completely
    new to this subject and are looking to learn the foundations of ML. However, aspiring
    data scientists with some prior knowledge and experience and who are looking to
    apply their knowledge to real ML projects often stumble about where to start and
    how to approach a given ML project. In this section, we will discuss a typical
    workflow for building a ML application, which we will follow throughout the book.
    The following figure summarizes our approach to developing an application using
    ML and we will discuss this in more detail in the following subsections:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经看到了一些现有的机器学习应用的例子，问题是，*我们如何着手构建这样的机器学习应用和系统？* 有关机器学习的书籍和大学中教授的机器学习课程通常首先介绍机器学习算法背后的数学和理论，然后将这些算法应用于给定的数据集。这种方法对于对这个主题完全陌生且希望学习机器学习基础的人来说是很好的。然而，那些有一定先验知识和经验，并希望将他们的知识应用于实际机器学习项目的有志数据科学家往往在如何开始以及如何处理一个特定的机器学习项目上感到困惑。在本节中，我们将讨论构建机器学习应用的典型工作流程，我们将在本书中遵循这个流程。以下图总结了我们的使用机器学习开发应用的方法，我们将在接下来的小节中详细讨论：
- en: '![](img/00007.jpeg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00007.jpeg)'
- en: Steps in building ML models
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 构建机器学习模型的步骤
- en: 'As seen in the preceding diagram, the steps that are to be followed for building
    learning models are as follows:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如前图所示，构建学习模型的步骤如下：
- en: '**Problem definition**: The first step in starting any project is not only
    understanding the problem, but also defining the problem that you are trying to
    solve using ML. Poor definition of a problem will result in a meaningless ML system,
    since the models will have been trained and optimized for a problem that you are
    not actually trying to solve. This first step is unarguably the most important
    step in building useful ML models and applications. You should at least answer
    the following four questions before you jump into building ML models:'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**问题定义**：开始任何项目的第一步不仅是理解问题，还要定义你试图用机器学习解决的问题。问题定义不明确会导致构建的机器学习系统没有意义，因为模型已经被训练和优化用于你实际上并不试图解决的问题。这一步无疑是构建有用的机器学习模型和应用中最重要的一步。在开始构建机器学习模型之前，你应该至少回答以下四个问题：'
- en: What is the problem? This is where you describe and state the problem that you
    are trying to solve. For example, a problem description might be *need a system
    to assess a small business owner's ability to pay back a loan *for a small business
    lending project.
  id: totrans-27
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 问题是？这是你描述和声明你试图用机器学习解决的问题的地方。例如，问题描述可能为*需要一个系统来评估小型企业主偿还贷款的能力*（针对小型企业贷款项目）。
- en: Why is it a problem? It is important to define why such a problem is actually
    a problem and why the new ML model is going to be useful. Maybe you have a working
    model already and you have noticed it is performing worse than before; you might
    have obtained new data sources that you can use for building a new prediction
    model; or maybe you want your existing model to produce prediction results more
    quickly. There can be multiple reasons why you think this is a problem and why
    you need a new model. Defining why it is a problem will help you stay on the right
    track while you are building a new ML model.
  id: totrans-28
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么这是一个问题？定义为什么这样的问题实际上是一个问题，以及为什么新的机器学习模型将会是有用的，这是非常重要的。也许你已经有一个正在工作的模型，并且你注意到它的表现不如以前；你可能已经获得了可以用于构建新预测模型的新数据源；或者你可能希望你的现有模型能够更快地产生预测结果。可能有多个原因让你认为这是一个问题，以及为什么你需要一个新的模型。定义为什么这是一个问题将帮助你保持正确的方向，在你构建新的机器学习模型时。
- en: What are some of the approaches to solving this problem? This is where you brainstorm
    your approaches to solve the given problem. You should think about how this model
    is going to be used (do you need this to be a real-time system or is this going
    to be run as a batch process?), what type of problem it is (is it a classification
    problem, regression, clustering, or something else?), and what types of data you
    would need for your model. This will provide a good basis for future steps in
    building your machine learning model.
  id: totrans-29
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解决这个问题的方法有哪些？这就是你构思解决给定问题方法的地方。你应该考虑这个模型将要如何被使用（你需要这是一个实时系统，还是作为批处理运行？），它是什么类型的问题（是分类问题、回归、聚类还是其他什么？），以及你需要为你的模型准备哪些类型的数据。这将为你构建机器学习模型未来的步骤提供一个良好的基础。
- en: What are the success criteria? This is where you define your checkpoints. You
    should think about what metrics you will look at and what your target model performance
    should look like. If you are building a model that is going to be used in a real-time
    system, then you can also set the target execution speed and data availability
    at runtime as part of your success criteria. Setting these success criteria will
    help you keep moving forward without being stuck at a certain step.
  id: totrans-30
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 成功的标准是什么？这是你定义检查点的地方。你应该考虑你将查看哪些指标，以及你的目标模型性能应该是什么样的。如果你正在构建一个将在实时系统中使用的模型，那么你还可以将目标执行速度和数据可用性作为运行时的成功标准。设定这些成功标准将帮助你避免在某个步骤上停滞不前。
- en: '**Data collection**: Having data is the most essential and critical part of
    building a ML model, preferably lots of data. No data, no model. Depending on
    your project, your approaches to collecting data can vary. You can purchase existing
    data sources from other vendors, you can scrape websites and extract data from
    there, you can use publicly available data, or you can also collect your own data.
    There are multiple ways you can gather the data you need for your ML model, but
    you need to keep in mind these two elements of your data when you are in the process
    of data collection—the target variable and feature variables. The target variable
    is the answer for your predictions and feature variables are the factors that
    your models will use to learn how to predict the target variable. Often, target
    variables are not present in a labeled form. For example, when you are dealing
    with Twitter data to predict the sentiment of each tweet, you might not have labeled
    sentiment data for each tweet. In this case, you will have to take an extra step
    to label your target variables. Once you have your data collected, you can move
    on to the data preparation step.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据收集**：拥有数据是构建机器学习模型最基本和关键的部分，最好是大量的数据。没有数据，就没有模型。根据你的项目，你收集数据的方法可能会有所不同。你可以从其他供应商那里购买现有的数据源，你可以抓取网站并从中提取数据，你可以使用公开可用的数据，或者你也可以收集自己的数据。你可以用多种方式收集你需要的机器学习模型数据，但当你处于数据收集过程中时，你需要记住这两个数据要素——目标变量和特征变量。目标变量是预测的答案，特征变量是模型将用来学习如何预测目标变量的因素。通常，目标变量不会以标记的形式出现。例如，当你处理Twitter数据以预测每条推文的情感时，你可能没有每条推文的标记情感数据。在这种情况下，你将不得不额外一步来标记你的目标变量。一旦你收集了数据，你就可以继续到数据准备步骤。'
- en: '**Data preparation**: Once you have gathered all of your input data, you need
    to prepare it so that it is in a useable format. This step is more important than
    you might think. If you have messy data and you did not clean it up for your learning
    algorithms, your algorithms will not learn well from your dataset and will not
    perform as expected. Also, even if you have high-quality data, if your data is
    not in a format that your algorithms can be trained with, then it is meaningless
    to have high-quality data. Bad data, bad model. You should at least handle some
    of the common problems listed as follows to have your data ready for the next
    steps:'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据准备**：一旦你收集了所有输入数据，你需要将其准备成可用的格式。这一步比你想象的更重要。如果你有杂乱的数据，并且没有为你的学习算法清理它们，你的算法将无法从你的数据集中很好地学习，并且不会按预期表现。此外，即使你拥有高质量的数据，如果你的数据格式不适合你的算法进行训练，那么拥有高质量数据也是没有意义的。数据差，模型差。你应该至少处理以下列出的常见问题，以便为下一步做好准备：'
- en: '**File format**: If you are getting your data from multiple data sources, you
    will most likely run into different formats for each data source. Some data might
    be in CSV format, while other data is in JSON or XML format. Some data might even
    be stored in a relational database. In order to train your ML model, you will
    need to first merge all these data sources in different formats into one standard
    format.'
  id: totrans-33
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文件格式**：如果你从多个数据源获取数据，你很可能会遇到每个数据源都有不同的格式。一些数据可能以CSV格式存储，而其他数据可能以JSON或XML格式存储。一些数据甚至可能存储在关系型数据库中。为了训练你的机器学习模型，你首先需要将这些不同格式的数据源合并成一个标准格式。'
- en: '**Data format**: It can also be the case that data formats vary among different
    data sources. For example, some data might have the address field broken down
    into street address, city, state, and ZIP, while some others might not. Some data
    might have the date field in the American date format (mm/dd/yyyy), while some
    others may be in British format (dd/mm/yyyy). These data format discrepancies
    among data sources can cause issues when you are parsing the values. In order
    to train your ML model, you will need to have a uniform data format for each field.'
  id: totrans-34
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据格式**：也可能存在不同数据源之间数据格式不同的情况。例如，一些数据可能将地址字段拆分为街道地址、城市、州和邮政编码，而另一些则可能没有。一些数据可能使用美国日期格式（mm/dd/yyyy）表示日期字段，而另一些则可能使用英国格式（dd/mm/yyyy）。这些数据源之间的数据格式差异在解析值时可能会引起问题。为了训练你的机器学习模型，你需要为每个字段提供一个统一的数据格式。'
- en: '**Duplicate records**: Often you will see same exact records repeating in your
    dataset. This problem can occur in the data collection process where you recorded
    a data point more than once or when you were merging different datasets in your
    data preparation process. Having duplicate records can adversely affect your model
    and it is good to check for duplicates in your dataset before you move on to the
    next steps.'
  id: totrans-35
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**重复记录**：通常你会在数据集中看到相同的记录重复出现。这个问题可能出现在数据收集过程中，你记录了一个数据点多次，或者在你准备数据的过程中合并不同的数据集时。重复的记录可能会对你的模型产生不利影响，因此在继续下一步之前检查数据集中的重复项是很好的做法。'
- en: '**Missing values**: It is also common to see some records with empty or missing
    values in the data. This can also have an adverse effect when you are training
    your ML models. There are multiple ways to handle missing values in your data,
    but you will have to be careful and understand your data very well, as this can
    change your model performance dramatically. Some of the ways you can handle the
    missing values include dropping records with missing values, replacing missing
    values with the mean or median, replacing missing values with a constant, or replacing
    missing values with a dummy variable and an indicator variable for missing. It
    will be beneficial to study your data before you deal with the missing values.'
  id: totrans-36
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缺失值**：在数据中看到一些记录有空值或缺失值也是常见的情况。在训练你的机器学习模型时，这也可能产生不利影响。处理数据中的缺失值有多种方法，但你必须非常小心，并且非常了解你的数据，因为这将极大地改变你的模型性能。你可以处理缺失值的方法包括删除包含缺失值的记录，用平均值或中位数替换缺失值，用常数替换缺失值，或者用虚拟变量和缺失指示变量替换缺失值。在处理缺失值之前研究你的数据将是有益的。'
- en: '**Data analysis**: Now that your data is ready, it is time to actually look
    at the data and see if you can recognize any patterns and draw some insights from
    the data. Summary statistics and plots are two of the best ways to describe and
    understand your data. For continuous variables, looking at the minimum, maximum,
    mean, median, and quartiles is a good place to start. For categorical variables,
    you can look at the counts and percentages of categories. As you are looking at
    these summary statistics, you can also start plotting graphs to visualize the
    structures of your data. The following figure shows some commonly used charts
    for data analysis. Histograms are frequently used to show and inspect underlying
    distributions of variables, outliers, and skewness. Box plots are frequently used
    to visualize five-number summary, outliers, and skewness. Pairwise scatter plots
    are frequently used to detect obvious pairwise correlations among the variables:'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据分析**：现在数据已经准备好了，是时候真正查看数据，看看你是否能识别出任何模式，并从数据中得出一些见解。总结统计量和图表是描述和理解数据的最有效方法之一。对于连续变量，查看最小值、最大值、平均值、中位数和四分位数是一个好的开始。对于分类变量，你可以查看各个类别的计数和百分比。当你查看这些总结统计量时，你还可以开始绘制图表来可视化数据的结构。以下图示展示了数据分析中常用的一些图表。直方图常用于显示和检查变量的潜在分布、异常值和偏度。箱线图常用于可视化五数摘要、异常值和偏度。成对散点图常用于检测变量之间明显的成对相关性：'
- en: '![](img/00008.jpeg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00008.jpeg)'
- en: 'Data analysis and visualizations. Top-left: histogram of nominal house sale
    price, top-right: histogram of house sale price using the logarithmic scale, bottom-left:
    box plots of distributions of basement, first floor, and second floor square footage''s,
    bottom-right: scatter plot between first and second floor square feet'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 数据分析和可视化。左上角：名义房屋销售价格的直方图，右上角：使用对数刻度的房屋销售价格直方图，左下角：地下室、一楼和二楼面积分布的箱线图，右下角：一楼和二楼面积之间的散点图
- en: '**Feature engineering**: Feature engineering is the most important part of
    the model building process in applied ML. However, this is one of the least discussed
    topics in many textbooks and ML courses. Feature engineering is the process of
    transforming raw input data into more informative data for your algorithms to
    learn from. For example, for your Twitter sentiment prediction model that we will
    build in [Chapter 3](part0036.html#12AK80-5ebdf09927b7492888e31e8436526470), *Twitter
    Sentiment Analysis*, your raw input data may only contain a list of text in one
    column and a list of sentiment targets in another column. Your ML model will probably
    not learn how to predict each tweet''s sentiment well with this raw data. However,
    if you transform this data so that each column represents the number of occurrences
    of each word in each tweet, then your learning algorithm can learn the relationship
    between the existence of certain words and sentiments more easily. You can also
    group each word with its adjacent word (bigram) and have the number of occurrences
    of each bigram in each tweet as another group of features. As you can see from
    this example, feature engineering is a way of making your raw data more representative
    and informative of the underlying problems. Feature engineering is not only a
    science, but also an art. Feature engineering requires good domain knowledge of
    the dataset, the creativity to build new features from raw input data, and multiple
    iterations for better results. As we work through this book, we will cover how
    to build text features using some **natural language processing** (**NLP**) techniques,
    how to build time series features, how to sub-select features to avoid overfitting
    issues, and how to use dimensionality reduction techniques to transform high-dimensional
    data into fewer dimensions.'
  id: totrans-40
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**特征工程**：特征工程是应用机器学习模型构建过程中最重要的部分。然而，这是许多教科书和机器学习课程中讨论最少的话题之一。特征工程是将原始输入数据转换为算法可以从中学习的更信息化的数据的过程。例如，对于我们在第3章中将要构建的Twitter情感预测模型，*Twitter情感分析*，你的原始输入数据可能只包含一个列中的文本列表和另一个列中的情感目标列表。你的机器学习模型可能无法从这些原始数据中很好地学习如何预测每条推文的情感。然而，如果你将数据转换成这样，每个列代表每条推文中每个单词的出现次数，那么你的学习算法就可以更容易地学习到某些单词的存在与情感之间的关系。你还可以将每个单词与其相邻的单词（二元组）分组，并将每条推文中每个二元组的出现次数作为另一组特征。正如这个例子所示，特征工程是一种使你的原始数据更具代表性和对潜在问题更信息化的方式。特征工程不仅是一门科学，也是一种艺术。特征工程需要良好的领域知识、从原始输入数据中构建新特征的创造力，以及多次迭代以获得更好的结果。随着我们学习这本书，我们将介绍如何使用一些**自然语言处理**（**NLP**）技术构建文本特征，如何构建时间序列特征，如何子选择特征以避免过拟合问题，以及如何使用降维技术将高维数据转换为更少的维度。'
- en: Coming up with features is difficult, time-consuming, requires expert knowledge.
    Applied machine learning is basically feature engineering.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 提出特征是困难的，耗时，需要专业知识。应用机器学习基本上是特征工程。
- en: '*-Andrew Ng*'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '*-安德鲁·吴*'
- en: '**Train/test algorithms**: Once you have created your features, it is time
    to train and test some ML algorithms. Before you start training your models, it
    is good to think about performance metrics. Depending on the problem you are solving,
    your choice of performance measure will differ. For example, if you are building
    a stock price forecast model, you might want to minimize the difference between
    your prediction and the actual price and choose **root mean square error** (**RMSE**)
    as your performance measure. If you are building a credit model to predict whether
    a person can be approved for a loan or not, you would want to use the precision
    rate as your performance measure, since incorrect loan approvals (false positives)
    will have a more negative impact than incorrect loan disapprovals (false negatives).
    As we work through the chapters, we will discuss more specific performance metrics
    for each project.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**训练/测试算法**：一旦你创建了你的特征，就是时候训练和测试一些机器学习算法了。在你开始训练你的模型之前，考虑一下性能指标是很好的。根据你要解决的问题，你的性能度量选择会有所不同。例如，如果你正在构建一个股票价格预测模型，你可能希望最小化你的预测与实际价格之间的差异，并选择**均方根误差**（**RMSE**）作为你的性能指标。如果你正在构建一个信用模型来预测一个人是否可以获得贷款，你可能会想使用精确率作为你的性能指标，因为错误的贷款批准（假阳性）比错误的贷款拒绝（假阴性）有更大的负面影响。随着我们学习这些章节，我们将讨论每个项目的更具体的性能指标。'
- en: 'Once you have specific performance measures in mind for your model, you can
    now train and test various learning algorithms and their performance. Depending
    on your prediction target, your choice of learning algorithms will also vary.
    The following figure shows illustrations of some of the common machine learning
    problems. If you were solving classification problems, you would want to train
    classifiers, such as the logistic regression model, the Naive Bayes classifier,
    or the random forest classifier. On the other hand, if you had a continuous target
    variable, then you would want to train regressors, such as the linear regression
    model, k-nearest neighbor, or **Support Vector Machine** (**SVM**). If you would
    like to draw some insights from data by using unsupervised learning, you would
    want to use k-means clustering or mean shift algorithms:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您为您的模型确定了具体的性能指标，现在您可以训练和测试各种学习算法及其性能。根据您的预测目标，您选择的学习算法也会有所不同。以下图显示了某些常见机器学习问题的说明。如果您正在解决分类问题，您将想要训练分类器，例如逻辑回归模型、朴素贝叶斯分类器或随机森林分类器。另一方面，如果您有一个连续的目标变量，那么您将想要训练回归器，例如线性回归模型、k近邻或**支持向量机**（**SVM**）。如果您想通过无监督学习从数据中得出一些见解，您将想要使用k均值聚类或均值漂移算法：
- en: '![](img/00009.jpeg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00009.jpeg)'
- en: 'Illustrations of ML problems. Left: classification, middle: regression, right:
    clustering'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 机器学习问题的说明。左：分类，中：回归，右：聚类
- en: 'Lastly, we will have to think about how we test and evaluate the performance
    of the learning algorithms we tried. Splitting your dataset into train and test
    sets and running cross-validation are the two most commonly used methods of testing
    and comparing your ML models. The purpose of splitting a dataset into two subsets,
    one for training and another for testing, is to train a model on the train set
    without exposing it to the test set so that prediction results on the test set
    are indicative of the general model performance for the unforeseen data. K-fold
    cross-validation is another way to evaluate model performance. It first splits
    a dataset into equally sized K subsets and leaves one set out for testing and
    trains on the rest. For example, in 3-fold cross-validation, a dataset will first
    split into three equally sized subsets. In the first iteration, we will use folds
    #1 and #2 to train our model and test it on fold #3\. In the second iteration,
    we will use folds #1 and #3 to train and test our model on fold #2, In the third
    iteration, we will use folds #2 and #3 to train and test our model on fold #1\.
    Then, we will average the performance measures to estimate the model performance:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们必须考虑如何测试和评估我们尝试的学习算法的性能。将数据集分为训练集和测试集以及运行交叉验证是测试和比较您的机器学习模型最常用的两种方法。将数据集分为两个子集，一个用于训练，另一个用于测试的目的，是在训练集上训练模型而不暴露给测试集，这样测试集上的预测结果就可以指示模型在不可预见数据上的总体性能。K折交叉验证是评估模型性能的另一种方法。它首先将数据集分为大小相等的K个子集，并留出一个子集用于测试，其余的用于训练。例如，在3折交叉验证中，数据集首先分为三个大小相等的子集。在第一次迭代中，我们将使用第1和第2折来训练我们的模型并在第3折上测试它。在第二次迭代中，我们将使用第1和第3折来训练并在第2折上测试我们的模型。在第三次迭代中，我们将使用第2和第3折来训练并在第1折上测试我们的模型。然后，我们将平均性能指标来估计模型性能：
- en: '**Improve results**: By now you will have one or two candidate models that
    perform reasonably well, but there might be still some room to improve. Maybe
    you noticed your candidate models are overfitting to some extent, maybe they do
    not meet your target performance, or maybe you have some more time to iterate
    on your models—regardless of your intent, there are multiple ways that you can
    improve the performance of your model and they are as follows:'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**改进结果**：到目前为止，您将有一个或两个表现合理的候选模型，但可能仍有改进的空间。也许您注意到您的候选模型在一定程度上过度拟合，也许它们没有达到您的目标性能，或者也许您有更多的时间来迭代您的模型——无论您的意图如何，都有多种方法可以提高您模型的表现，它们如下：'
- en: '**Hyperparameter tuning**: You can tune the configurations of your models to
    potentially improve the performance results. For example, for random forest models,
    you can tune the maximum height of the tree or number of trees in the forest.
    For SVMs, you can tune the kernels or cost values.'
  id: totrans-49
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**超参数调整**：您可以调整模型的配置以潜在地提高性能结果。例如，对于随机森林模型，您可以调整树的最大高度或森林中的树的数量。对于支持向量机（SVMs），您可以调整核或成本值。'
- en: '**Ensemble methods**: Ensembling is combining the results of multiple models
    to get better results. Bagging is where you train the same algorithm on different
    subsets of your dataset, boosting is combining different models that are trained
    on the same train set, and stacking is where the output of models is used as the
    input to a meta model that learns how to combine the results of the sub-models.'
  id: totrans-50
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**集成方法**：集成是将多个模型的输出结果结合起来以获得更好的结果。Bagging 是在数据集的不同子集上训练相同的算法，Boosting 是将训练在同一训练集上的不同模型结合起来，而
    Stacking 是将模型的输出作为元模型的输入，元模型学习如何组合子模型的输出。'
- en: '**More feature engineering**: Iterating on feature engineering is another way
    to improve model performance.'
  id: totrans-51
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**更多特征工程**：在特征工程上进行迭代是提高模型性能的另一种方法。'
- en: '**Deploy**: Time to put your models into action! Once you have your models
    ready, it is time to let them run in production. Make sure you test extensively
    before your models take full charge. It will also be beneficial to plan to develop
    monitoring tools for your models, since model performance can decrease over time
    as the input data evolves.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**部署**：是时候将您的模型投入实际应用了！一旦您的模型准备就绪，就是让它们在生产环境中运行的时候了。在您的模型全面接管之前，请确保进行彻底的测试。在模型性能随着时间的推移和输入数据的变化而降低的情况下，计划开发模型监控工具也将是有益的。'
- en: Setting up a C# environment for ML
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置 C# 环境以进行机器学习
- en: Now that we have discussed the steps and approaches to building ML models that
    we will follow throughout this book, let's start setting up our C# environment
    for ML. We will first install and set up Visual Studio and then two packages (Accord.NET
    and Deedle) that we will frequently use for our projects in the following chapters.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经讨论了本书中我们将遵循的构建机器学习模型的步骤和方法，让我们开始设置我们的 C# 机器学习环境。我们首先将安装和设置 Visual Studio，然后安装两个我们将频繁在后续章节的项目中使用的包（Accord.NET
    和 Deedle）。
- en: Setting up Visual Studio for C#
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置 Visual Studio 以进行 C#
- en: Assuming you have some prior knowledge of C#, we will keep this part brief.
    In case you need to install Visual Studio for C#, go to [https://www.visualstudio.com/downloads/](https://www.visualstudio.com/downloads/)
    and download one of the versions of Visual Studio. In this book, we use the Community
    Edition of Visual Studio 2017\. If it prompts you to download .NET Framework before
    you install Visual Studio, go to [https://www.microsoft.com/en-us/download/details.aspx?id=53344](https://www.microsoft.com/en-us/download/details.aspx?id=53344)
    and install it first.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您对 C# 有一些先前的知识，我们将简要介绍这部分内容。如果您需要安装 Visual Studio for C#，请访问 [https://www.visualstudio.com/downloads/](https://www.visualstudio.com/downloads/)
    并下载 Visual Studio 的一个版本。在本书中，我们使用 Visual Studio 2017 的社区版。如果您在安装 Visual Studio
    之前被提示下载 .NET Framework，请访问 [https://www.microsoft.com/en-us/download/details.aspx?id=53344](https://www.microsoft.com/en-us/download/details.aspx?id=53344)
    并先安装它。
- en: Installing Accord.NET
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 Accord.NET
- en: Accord.NET is a .NET ML framework. On top of ML packages, the Accord.NET framework
    also has mathematics, statistics, computer vision, computer audition, and other
    scientific computing modules. We are mainly going to use the ML package of the
    Accord.NET framework.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: Accord.NET 是一个 .NET 机器学习框架。在机器学习包之上，Accord.NET 框架还包括数学、统计学、计算机视觉、计算机听觉和其他科学计算模块。我们将主要使用
    Accord.NET 框架的机器学习包。
- en: 'Once you have installed and set up your Visual Studio, let''s start installing
    the ML framework for C#, Accord.NET. It is easiest to install it through NuGet.
    To install it, open the package manager (Tools | NuGet Package Manager | Package
    Manager Console) and install `Accord.MachineLearning` and `Accord.Controls` by
    typing in the following commands:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您安装并设置了 Visual Studio，让我们开始安装 C# 的机器学习框架 Accord.NET。通过 NuGet 安装它是最简单的。要安装它，打开包管理器（工具
    | NuGet 包管理器 | 包管理器控制台），并输入以下命令安装 `Accord.MachineLearning` 和 `Accord.Controls`：
- en: '[PRE0]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now, let''s build a sample ML application using these Accord.NET packages.
    Open your Visual Studio and create a new `Console Application` under the Visual
    C# category. Use the preceding commands to install those Accord.NET packages through
    `NuGet` and add references to our project. You should see some Accord.NET packages
    added to your references in your **Solutions Explorer** and the result should
    look something like the following screenshot:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们使用这些 Accord.NET 包构建一个示例机器学习应用程序。打开您的 Visual Studio，在 Visual C# 类别下创建一个新的
    `控制台应用程序`。使用前面的命令通过 `NuGet` 安装这些 Accord.NET 包，并将它们添加到我们的项目中。您应该在 **解决方案资源管理器**
    中看到一些 Accord.NET 包被添加到您的引用中，结果应该类似于以下截图：
- en: '![](img/00010.jpeg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00010.jpeg)'
- en: 'The model we are going to build now is a very simple logistic regression model.
    Given two-dimensional arrays and an expected output, we are going to develop a
    program that trains a logistic regression classifier and then plot the results
    showing the expected output and the actual predictions by this model. The input
    and output for this model look like the following:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00011.jpeg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
- en: 'The code for this sample logistic regression classifier is as follows:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Once you are done writing this code, you can run it by hitting *F5* or clicking
    on the Start button on top. If everything runs smoothly, it should produce the
    two plots shown in the following figure. If it fails, check for references or
    typos. You can always right-click on the class name or the light bulb icon to
    make Visual Studio help you find which packages are missing from the namespace
    references:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00012.jpeg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
- en: 'Plots produced by the sample program. Left: actual prediction results, right:
    expected output'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: This sample code can be found at the following link: [https://github.com/yoonhwang/c-sharp-machine-learning/blob/master/ch.1/SampleAccordNETApp.cs](https://github.com/yoonhwang/c-sharp-machine-learning/blob/master/ch.1/SampleAccordNETApp.cs).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: Installing Deedle
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Deedle is an open source .NET library for data frame programming. Deedle lets
    you do data manipulation in a way that is similar to R data frames and pandas
    data frames in Python. We will be using this package to load and manipulate the
    data for our ML projects in the following chapters.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: 'Similar to how we installed Accord.NET, we can install the Deedle package from
    NuGet. Open the package manager (Tools | NuGet Package Manager | Package Manager
    Console) and install `Deedle` using the following command:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Let''s briefly look at how we can use this package to load data from a CSV
    file and do simple data manipulations. For more information, you can visit [http://bluemountaincapital.github.io/Deedle/](http://bluemountaincapital.github.io/Deedle/) for
    API documentation and sample code. We are going to use daily AAPL stock price
    data from 2010 to 2013 for this exercise. You can download this data from the
    following link: [https://github.com/yoonhwang/c-sharp-machine-learning/blob/master/ch.1/table_aapl.csv](https://github.com/yoonhwang/c-sharp-machine-learning/blob/master/ch.1/table_aapl.csv).'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: Open your Visual Studio and create a new `Console Application` under the Visual
    C# category. Use the preceding command to install the `Deedle` library through
    `NuGet` and add references to your project. You should see the `Deedle` package
    added to your references in your **Solutions ****Explorer**.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we are going to load the CSV data into a `Deedle` data frame and then
    do some data manipulations. First, we are going to update the index of the data
    frame with the `Date` field. Then, we are going to apply some arithmetic operations
    on the `Open` and `Close`columns to calculate the percentage changes from open
    to close prices. Lastly, we will calculate daily returns by taking the differences
    between the close and the previous close prices, dividing them by the previous
    close prices, and then multiplying it by `100`. The code for this sample `Deedle`
    program is shown as follows:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: When you run this code, you will see the following outputs.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: 'The raw dataset looks like the following:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00013.jpeg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
- en: 'After indexing this dataset with the date field, you will see the following:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00014.jpeg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
- en: 'After applying simple arithmetic operations to compute the change rate from
    open to close, you will see the following:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00015.jpeg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
- en: 'Finally, after shifting close prices by one row and computing daily returns, you
    will see the following:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00016.jpeg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
- en: As you can see from this sample `Deedle` project, we can run various data manipulation
    operations with one or two lines of code, where it would have required more lines
    of code to apply the same operations using native C#. We will use the `Deedle`
    library frequently throughout this book for data manipulation and feature engineering.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: This sample Deedle code can be found at the following link: [https://github.com/yoonhwang/c-sharp-machine-learning/blob/master/ch.1/DeedleApp.cs](https://github.com/yoonhwang/c-sharp-machine-learning/blob/master/ch.1/DeedleApp.cs).
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we briefly discussed some key ML tasks and real-life examples
    of ML applications. We also learned the steps for developing ML models and the
    common challenges and tasks in each step. We are going to follow these steps as
    we work through our projects in the following chapters and we will explore certain
    steps in more detail, especially for feature engineering, model selection, and
    model performance evaluations. We will discuss the various techniques we can apply
    in each step depending on the types of problems we are solving. Lastly, in this
    chapter, we walked you through how to set up a C# environment for our future ML
    projects. We built a simple logistic regression classifier using the Accord.NET
    framework and used the `Deedle` library to load and manipulate the data.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we are going to dive straight into applying the fundamentals
    of ML, which we covered in this chapter, to build a ML model for spam email filtering.
    We will follow the steps for building ML models that we discussed in this chapter
    to transform raw email data into a structured dataset, analyze the email text
    data to draw some insights, and then finally build classification models that
    predict whether an email is a spam or not. We will also discuss some commonly
    used model evaluation metrics for classification models in the next chapter.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将直接应用本章所涵盖的机器学习（ML）基础知识，来构建一个用于垃圾邮件过滤的ML模型。我们将遵循本章讨论的构建ML模型的步骤，将原始电子邮件数据转换为结构化数据集，分析电子邮件文本数据以获取一些见解，并最终构建预测电子邮件是否为垃圾邮件的分类模型。我们还将讨论下一章中一些常用的分类模型评估指标。
