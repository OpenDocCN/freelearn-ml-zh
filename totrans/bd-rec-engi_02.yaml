- en: Chapter 2. Build Your First Recommendation Engine
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we had an introduction to various types of recommendation
    engines, which we will be building in the subsequent chapters. Now that we have
    got introduced to recommendation engines, let's build our first recommendation
    engine using R.
  prefs: []
  type: TYPE_NORMAL
- en: Before we proceed further for implementation, let's have a brief discussion
    about the required software and packages for building our first recommendation
    using R.
  prefs: []
  type: TYPE_NORMAL
- en: For this exercise, we have used the R 3.2.2 version and RStudio 0.99 or above.
    For installation and setup of R and RStudio, please refer to the software and
    hardware list section of the book.
  prefs: []
  type: TYPE_NORMAL
- en: 'The R packages we have used for this exercise are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`dplyr`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`data.table`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`reshape2`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Installing a R package is given by the following codes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'For offline installation, first download the required `gz` file from CRAN Repository
    to a local folder, and then execute the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The recommendation engine we are going to build is based on the collaborative
    filtering approach. As explained in [Chapter 1](part0014.xhtml#aid-DB7S1 "Chapter 1. Introduction
    to Recommendation Engines"), *Introduction to Recommendation Engines*, is based
    on the user''s neighbourhood, as explained in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Build Your First Recommendation Engine](img/image00213.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Building our basic recommendation engine
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The steps to build our basic recommendation engine are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Loading and formatting data.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Calculating similarity between users.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Predicting the unknown ratings for users.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Recommending items to users based on user-similarity score.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'These steps can be seen in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Building our basic recommendation engine](img/image00214.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Loading and formatting data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The dataset used for this chapter can be downloaded from [https://raw.githubusercontent.com/sureshgorakala/RecommenderSystems_R/master/movie_rating.csv](https://raw.githubusercontent.com/sureshgorakala/RecommenderSystems_R/master/movie_rating.csv).
  prefs: []
  type: TYPE_NORMAL
- en: 'The dataset chosen for the chapter is a movie-rating dataset containing ratings
    for six movies given by six users on a scale of 0 to 5:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Loading and formatting data](img/image00215.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Before we load the data, let me explain a few things about the data. The dataset
    chosen is a comma-separated file having movie ratings from 1 to 5 in steps of
    5 given by six users on six movies. Not all critics have rated all the titles
    in the dataset.
  prefs: []
  type: TYPE_NORMAL
- en: Our objective is to build a recommendation engine that recommends unknown movies
    to users based on the ratings of similar users.
  prefs: []
  type: TYPE_NORMAL
- en: 'Loading the data from a `csv` file in R is given by `read.csv()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The first six rows of the data can be viewed using `head()`, an inbuilt function
    in R:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![Loading and formatting data](img/image00216.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'To see the dimensions of the dataset, we use `dim()`, an inbuilt function in
    R:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'To see the structure of the input data, we may use the `str()` function in
    R, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![Loading and formatting data](img/image00217.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We see that we have a dataset containing 31 observations and three variables
    such as critic, title, and rating. Also, we see that six critics have rated six
    movies. The ratings are between 1 and 5.
  prefs: []
  type: TYPE_NORMAL
- en: 'To see the levels of the attributes of a variable, we use `levels()` in R:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Loading and formatting data](img/image00218.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: To build a recommender system, we would be requiring a matrix where rows contain
    users, columns contain items, and the cells contain the ratings given by users
    to the items.
  prefs: []
  type: TYPE_NORMAL
- en: The next step is to arrange the data in a format that is useful to build the
    recommendation engine. The current data contains a row containing critic, title,
    and rating. This has to be converted to matrix format containing critics as rows,
    title as columns, and ratings as the cell values.
  prefs: []
  type: TYPE_NORMAL
- en: The following code helps us achieve this. We use the `acast()` function available
    in `reshape2` package. The `reshape2` package is a R package popularly used for
    restructuring data. The `acast()` function in `reshape2` package casts a data
    frame to matrix representation.
  prefs: []
  type: TYPE_NORMAL
- en: The `cast` function takes the ratings dataset as input, `title` as row attribute,
    `critic` as column attribute, and `rating` as value.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The transformed data can be viewed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![Loading and formatting data](img/image00219.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'From the formatted data, we see that `Toby` has rated three movies. `Lisa Rose`,
    `Mick LaSalle`, and `Gene Seymour` have rated all the movies. `Claudia Puig` *,*
    and `Jack Matthews` have not rated one movie each. Here, let''s revisit our objective,
    which is defined at the beginning of the section: we shall recommend to critics
    movies that they have not rated, based on similar users. For example, we shall
    recommend movies to `Toby` based on the ratings provided by other critics similar
    to `Toby`.'
  prefs: []
  type: TYPE_NORMAL
- en: Calculating similarity between users
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is a very important step as we need to recommend the previously unseen
    movies based on the ratings given to these movies by other similar critics. There
    are various similarity measures, such as Euclidean distance, cosine distance,
    Pearson coefficient, Jaccard distance, and so on. The details of these measures
    or similarity metrics are explained in detail in the [Chapter 4](part0029.xhtml#aid-RL0A2
    "Chapter 4. Data Mining Techniques Used in Recommendation Engines"), *Data Mining
    Techniques Used in Recommendation Engines*.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we'll use correlation as the similarity measure between users.
    The reason for choosing correlation is that correlation represents the association
    two items or how closely two item vectors covary or are related to each other.
    So for this chapter, we have chosen the correlation value as the measure of similarity
    between two items in a matrix.
  prefs: []
  type: TYPE_NORMAL
- en: 'In R, we have the `cor()` function to find correlation between variables in
    a dataset. The following code calculates the similarity between critics:'
  prefs: []
  type: TYPE_NORMAL
- en: 'While finding similarity between Toby and other critics,use the `use="complete.obs"`
    attribute, of the `cor()` function to consider complete observations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '![Calculating similarity between users](img/image00220.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: From the preceding code, we observe that `Lisa Rose` is very similar to `Toby`
    with `0.99` and `Mick LaSalle` with `0.92`.
  prefs: []
  type: TYPE_NORMAL
- en: Predicting the unknown ratings for users
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this section, we will predict the unrated movies of Toby using the ratings
    given by similar users. The following are the steps to achieve this:'
  prefs: []
  type: TYPE_NORMAL
- en: Extract the titles which Toby has not rated.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For these titles, separate all the ratings given by other critics.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Multiply the ratings given for these movies by all critics other than Toby with
    the similarity values of critics with Toby.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Sum up the total ratings for each movie, and divide this summed up value with
    the sum of similarity critic values.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Before we go into the code, let's learn a bit about the `data.table` package
    and the `setDT()` method we have used in the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '`Data.table` is a popular R package that provides an enhanced `data.frame`
    version, which allows us to do manipulations on data with lightening speed. Another
    advantage of the `data.table` package is that it can handle very large datasets
    up to 100 GB data in RAM. Various operations, such as creating a data table, an
    enhanced version of data frame, sub-setting data, manipulating the data, joins
    etc.'
  prefs: []
  type: TYPE_NORMAL
- en: For this exercise, we have made use of the `setDT()` method available in `data.table`.
    The `set*` functions in `data.table` help manipulate input data by reference instead
    of value, that is, while transforming data, there won't be any physical copy of
    the data.
  prefs: []
  type: TYPE_NORMAL
- en: 'The preceding explanation is written as code, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Extract the titles which Toby has not rated. We have used the `setDT()` function
    available in the `data.table` package to extract the non-rated titles and create
    a `data.table` and `data.frame` object, `rating_critic`. The `setDT()` method
    extracts column values and corresponding row names and creates a two-dimension
    `data.frame` or `data.table` object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Predicting the unknown ratings for users](img/image00221.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Isolate the non-rated movies from the aforementioned list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Predicting the unknown ratings for users](img/image00222.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Please note that the `is.na()` function is used to filter out NA values.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Take the ratings based on the original dataset and subset all the critics who
    have rated the aforementioned shown movies.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In the following code, `%in%` acts as the where condition in SQL:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Predicting the unknown ratings for users](img/image00223.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'To the aforementioned data frame, now let''s add a new variable, `similarity,`
    using the similarity values of each `critic` w.r.t Toby:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Predicting the unknown ratings for users](img/image00224.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Multiply rating with similarity value, and add the resultant as a new variable,
    `sim_rating`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Predicting the unknown ratings for users](img/image00225.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Sum up all the rating values for each title calculated in the preceding step,
    and then divide this summed up value for each title with the sum of similarity
    values of each critic, that is, for the `Just My Luck` title, the rating for `Toby`
    is calculated by summing up all the `sim_rating` values for `Just My Luck` divided
    by the sum of similarity values of all the critics who have rated the `Just My
    Luck` title:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*(2.6802154+0.5718696+2.9737221+1.8489469)/(0.8934051+0.3812464+0.9912407+0.9244735)
    = 2.530981*'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The preceding calculation for all the titles are done in R using two functions
    available in the `dplyr` package, `group_by()`, and `summarise()`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The `dplyr` package is an R package used for data manipulations. This package
    is very useful, like `data.table`; it comes in very handy for exploratory analysis
    and data manipulation. The `summarise()` function is available in the `dply` package
    for summarizing results. The `group_by()` function is used to group data by one
    or more variables.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The `%>%` operator available in the `dply` package is a very handy function
    used to group multiple codes together. In the following code, we are using the
    `%>%` code to group the `group_by()` and `summarise()` functions together and
    compute the results without writing intermediate results:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You can see the calculated or predicted ratings for all the three titles not
    rated by Toby. Now you can recommend these new titles, the ratings for which are
    greater than the average ratings given by Toby. For example, the `mean` rating
    given by Toby to three titles is given by the following code:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now that we know the average rating by Toby is `3.16`, we can recommend movies
    with ratings greater than the mean values. From the predicted values, we can recommend
    the movie `The Night Listener`, which is above his mean value.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The aforementioned generating recommendations for all the users can be easily
    extended by writing a function as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Making predictions now for each of the users will be very easy and is shown
    next:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Predicting the unknown ratings for users](img/image00226.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Kudos to us for having built our first and basic recommender system. Let''s
    put together the entire code we have done till now. The following is the full
    version of the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Congratulations! We have built a very basic recommendation engine using R. We
    have seen the step-by-step approach of building a recommendation engine. In the
    following chapters, we will learn about different types of recommendation engines
    and their implementations in various technologies such, as Spark, Mahout, Neo4j,
    R, and Python. In the next chapter, we will learn about the various types of recommendation
    engines in depth.
  prefs: []
  type: TYPE_NORMAL
