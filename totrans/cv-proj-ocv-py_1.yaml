- en: Setting Up an Anaconda Environment
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置Anaconda环境
- en: Welcome to *Computer Vision Projects with OpenCV and Python 3*. This book is
    one you might want to check out if you're new to OpenCV, and to computer vision
    in general.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎来到*使用OpenCV和Python 3的计算机视觉项目*。如果你是OpenCV和计算机视觉的新手，这本书你可能想看看。
- en: In this chapter, we will be installing all the required tools that we're going
    to use in the book. We will be dealing with Python 3, OpenCV, and TensorFlow.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将安装本书中将要使用到的所有必需工具。我们将处理Python 3、OpenCV和TensorFlow。
- en: 'You might be wondering: why should I be using Python 3, and not Python 2? The
    answer to your question is on Python''s own website:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能想知道：为什么我应该使用Python 3，而不是Python 2？你问题的答案可以在Python自己的网站上找到：
- en: '"Python 2 is legacy, Python 3 is the present future of the language."'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '"Python 2是遗留的，Python 3是语言的现在和未来。"'
- en: We are looking to the future here, and if we want to future-proof our code,
    it's better to use Python 3\. If you're using Python 2, some of the code examples
    here might not run, so we'll install Python 3 and use that for all the projects
    in the book.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里展望未来，如果我们想要使我们的代码具有前瞻性，最好使用Python 3。如果你使用的是Python 2，这里的一些代码示例可能无法运行，因此我们将安装Python
    3并使用它来完成本书的所有项目。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Introducing and installing Python and Anaconda
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍和安装Python和Anaconda
- en: Installing the additional libraries
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装额外的库
- en: Exploring Jupyter Notebook
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索Jupyter Notebook
- en: Introducing and installing Python and Anaconda
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍和安装Python和Anaconda
- en: The first thing we need is Python 3\. The best way to install this is by downloading
    Continuum Analytics and the Anaconda distribution.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先需要Python 3。安装它的最佳方式是下载Continuum Analytics和Anaconda发行版。
- en: Anaconda is a fully-featured Python distribution that comes with a lot of packages,
    including numerical analytics, data science, and computer vision. It's going to
    make our lives a whole lot easier, because it provides us with libraries that
    are not present in the base Python distribution.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Anaconda是一个功能齐全的Python发行版，附带大量包，包括数值分析、数据科学和计算机视觉。它将使我们的生活变得更加容易，因为它为我们提供了基础Python发行版中不存在的库。
- en: The best part about Anaconda is that it gives us the `conda` package manager,
    along with `pip`, which makes it very easy to install external packages for our
    Python distribution.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Anaconda最好的部分是它为我们提供了`conda`包管理器，以及`pip`，这使得为我们的Python发行版安装外部包变得非常容易。
- en: Let's get started.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧。
- en: Installing Anaconda
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Anaconda
- en: 'We will begin by setting up our Anaconda and Python distribution, using the
    following steps:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先设置Anaconda和Python发行版，按照以下步骤进行：
- en: 'Go to the Anaconda website, using the following link [www.anaconda.com/download](https://www.anaconda.com/download/).
    You should see a landing page that looks similar to the following screenshot:'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问Anaconda网站，使用以下链接[www.anaconda.com/download](https://www.anaconda.com/download/)。你应该会看到一个类似于以下截图的着陆页：
- en: '![](img/37e77f75-2fc4-49e4-9ee1-91daaa5dd445.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![截图](img/37e77f75-2fc4-49e4-9ee1-91daaa5dd445.png)'
- en: 'Next, select your OS and download the latest version of the Anaconda distribution,
    which includes Python 3.7\. Click the Download button, as shown in the following
    screenshot:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，选择你的操作系统，下载包含Python 3.7的最新版本的Anaconda发行版。点击下载按钮，如图所示：
- en: '![](img/9d792ef5-1ed6-45eb-9326-490aa90d9d02.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![截图](img/9d792ef5-1ed6-45eb-9326-490aa90d9d02.png)'
- en: The installer for Windows is graphical; however, you might need to use a command-line
    installer for macOS or Linux.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Windows的安装程序是图形化的；然而，你可能需要为macOS或Linux使用命令行安装程序。
- en: Installing the setup file is pretty straightforward, so we won't go through
    each step here.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 安装设置文件非常简单，所以我们不会在这里逐个步骤说明。
- en: 'When you have everything properly installed and your path variables defined,
    go to the Command Prompt and make sure everything is good to go by typing the `where
    python` command. This shows us all the directories in which Python is installed.
    You should see something similar to the following screenshot:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你正确安装了所有软件并定义了路径变量后，前往命令提示符，通过输入`where python`命令来确保一切正常。这会显示Python安装的所有目录。你应该会看到类似于以下截图的内容：
- en: '![](img/19a5c556-2731-4d8b-a77c-fc0099616d79.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![截图](img/19a5c556-2731-4d8b-a77c-fc0099616d79.png)'
- en: As seen in the preceding screenshot, we see that the first instance of Python
    is in our Anaconda distribution. This means that we can proceed with our Python
    programs.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一个截图所示，我们看到Python的第一个实例在我们的Anaconda发行版中。这意味着我们可以继续我们的Python程序。
- en: In macOS or Linux, the command would be `which python` instead of `where python`.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在macOS或Linux中，命令将是`which python`而不是`where python`。
- en: 'Now, let''s make sure we have our other tools. Our first tool will be IPython,
    which is essentially a command shell for interactive computing in multiple programming
    languages. We will check it using the `where ipython` command, as shown in the
    following screenshot:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们确保我们拥有我们的其他工具。我们的第一个工具将是IPython，它本质上是一种用于多种编程语言的交互式计算命令壳。我们将使用`where ipython`命令来检查它，如图所示：
- en: '![](img/77be8db4-88dd-49c0-aaf6-dce30274319e.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](img/77be8db4-88dd-49c0-aaf6-dce30274319e.png)'
- en: 'The next package we will check is the `pip` tool, which is the Python installer
    package. We do this with the `where pip` command, as shown in the following screenshot:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一个我们将检查的包是`pip`工具，它是Python安装程序包。我们使用`where pip`命令来完成此操作，如图所示：
- en: '![](img/1a46c810-55db-4b0e-868b-f470c48ac57f.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1a46c810-55db-4b0e-868b-f470c48ac57f.png)'
- en: 'The next tool to check is the `conda` package, which is Anaconda''s built-in
    package manager. This is done using the `where conda` command, as shown in the
    following screenshot:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一个要检查的工具是`conda`包，它是Anaconda内置的包管理器。这是通过`where conda`命令完成的，如图所示：
- en: '![](img/7fae52b9-a14a-47a0-9cee-85dc045622ad.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7fae52b9-a14a-47a0-9cee-85dc045622ad.png)'
- en: We should be good to go with Python now.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在应该可以使用Python了。
- en: If you run `which python` on macOS or Linux, and it says something such as `user/bin/Python`,
    that means Python is either not installed or it's not the first thing in our path,
    so we should modify that as per our system.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你运行`which python`在macOS或Linux上，并且它显示类似`user/bin/Python`的内容，这意味着Python可能未安装或不是我们路径中的第一项，因此我们应该根据我们的系统进行修改。
- en: In the next section, we're going to cover installing additional libraries such
    as OpenCV, TensorFlow, dlib, and Tesseract, which will be used for the projects
    in this book.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将介绍安装额外的库，如OpenCV、TensorFlow、dlib和Tesseract，这些库将用于本书中的项目。
- en: Installing additional libraries
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装额外的库
- en: All the packages that we will be installing in this section are vital for our
    upcoming projects. So, let's get started.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本节中安装的所有包对我们即将到来的项目至关重要。所以，让我们开始吧。
- en: Installing OpenCV
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装OpenCV
- en: To get OpenCV, go to the following link: [anaconda.org/conda-forge/opencv](https://anaconda.org/conda-forge/opencv).
    Technically, we don't need to access the website to install this package. The
    site just shows the various versions of OpenCV and all the different systems we
    can install it on.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取OpenCV，请访问以下链接：[anaconda.org/conda-forge/opencv](https://anaconda.org/conda-forge/opencv)。技术上，我们不需要访问网站来安装此包。该网站仅显示OpenCV的各种版本以及我们可以在其上安装的所有不同系统。
- en: 'Copy and paste the installation command from the site into Command Prompt and then
    run it, as shown in the following screenshot:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 将网站上的安装命令复制并粘贴到命令提示符中，然后运行，如图所示：
- en: '![](img/0439ec88-b7e8-43e9-9e37-a1a341bf0d3f.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0439ec88-b7e8-43e9-9e37-a1a341bf0d3f.png)'
- en: The preceding command is a simple, platform-independent way to get OpenCV. There
    are other methods for getting it; however, using this command ensures that we
    are installing the latest version.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令是一个简单、平台无关的方法来获取OpenCV。还有其他获取它的方法；然而，使用此命令可以确保我们安装的是最新版本。
- en: Installing dlib
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装dlib
- en: We need to install dlib from the Anaconda distribution, similar to OpenCV. Just
    as with OpenCV, installing dlib is a straightforward process.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要从Anaconda发行版安装dlib，类似于OpenCV。正如安装OpenCV一样，安装dlib是一个简单的过程。
- en: 'Run the following command:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE0]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You will get the following output:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 你将得到以下输出：
- en: '![](img/b6d0f804-9c85-4645-9270-90fbd0fdf2f7.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b6d0f804-9c85-4645-9270-90fbd0fdf2f7.png)'
- en: This will take around 10 to 20 seconds to run. If everything goes well, we should
    be good to go with dlib.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这将花费大约10到20秒的时间运行。如果一切顺利，我们应该可以使用dlib了。
- en: Installing Tesseract
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Tesseract
- en: Tesseract is Google's optical character recognition library, and is not natively
    a Python package. Because of this, there's a Python binding for it that calls
    the executable, which can then be installed manually.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: Tesseract是Google的光学字符识别库，并且不是原生的Python包。因此，有一个Python绑定，它调用可执行文件，然后可以手动安装。
- en: Go to the GitHub repository for Tesseract, which is found at the following link: [https://github.com/tesseract-ocr/tesseract](https://github.com/tesseract-ocr/tesseract).
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 访问Tesseract的GitHub仓库，该仓库位于以下链接：[https://github.com/tesseract-ocr/tesseract](https://github.com/tesseract-ocr/tesseract)。
- en: 'Scroll down to the *Installing Tesseract* section in the GitHub readme. Here,
    we are presented with two options:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 滚动到GitHub自述文件中的*安装Tesseract*部分。在这里，我们有两个选项：
- en: Installing it via a pre-built binary package
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过预构建的二进制包安装
- en: Building it from source
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从源代码构建
- en: We want to install it via the pre-built binary package, so click on that link.
    We can also build it from source if we want to, but that doesn't really offer
    any advantages. The Tesseract Wiki explains the steps to install it on various
    different operating systems.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想要通过预构建的二进制包来安装它，因此点击该链接。我们也可以从源代码构建，如果我们想的话，但这并不真正提供任何优势。Tesseract Wiki解释了在各个不同的操作系统上安装它的步骤。
- en: As we're using Windows, and we want to install a pre-built one, click on the
    Tesseract at UB Mannheim link, where you will find all the latest setup files.
    Download the latest setup from the site.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们使用的是Windows，并且我们想要安装一个预构建的版本，请点击UB Mannheim的Tesseract链接，在那里您可以找到所有最新的设置文件。从网站上下载最新的设置文件。
- en: Once downloaded, run the installer or execute the command. However, this is
    not going to put Tesseract in your path. We need to make sure it is in your path;
    otherwise, when you call Tesseract from within Python, you're going to get an
    error message.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 下载完成后，运行安装程序或执行命令。然而，这并不会将Tesseract添加到您的路径中。我们需要确保它在您的路径中；否则，当您在Python中调用Tesseract时，您将收到一个错误消息。
- en: 'So, we need to figure out where Tesseract is and modify our path variable.
    To do this, type the `where tesseract` command in Command Prompt, as shown in
    the following screenshot:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们需要找出Tesseract的位置并修改我们的路径变量。为此，在命令提示符中输入`where tesseract`命令，如下截图所示：
- en: '![](img/bb972736-865d-4eb0-b45e-4b1857b8e179.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/bb972736-865d-4eb0-b45e-4b1857b8e179.png)'
- en: 'Once you have the binary packages, use the `pip` command to apply the Python
    binding to the packages. Use the following commands:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您有了二进制包，使用`pip`命令将Python绑定应用到这些包上。使用以下命令：
- en: '[PRE1]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We should be good to go with Tesseract now.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在应该可以使用Tesseract了。
- en: Installing TensorFlow
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装TensorFlow
- en: Last but not least, we will install TensorFlow, which is a software library
    for data flow programming across a range of tasks. It is usually used for machine
    learning applications such as neural networks.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 最后但同样重要的是，我们将安装TensorFlow，这是一个用于跨各种任务的数据流编程的软件库。它通常用于机器学习应用，如神经网络。
- en: 'To install it, go to TensorFlow''s website at the following link: [tensorflow.org/install/](https://www.tensorflow.org/install/).
    The website contains instructions for all the major operating systems.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装它，请访问以下链接的TensorFlow网站：[tensorflow.org/install/](https://www.tensorflow.org/install/)。网站包含所有主要操作系统的说明。
- en: 'As we''re using Windows, the installation process is very simple. We just have
    to run the `pip install tensorflow` command in Command Prompt, as seen in the
    following screenshot:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们使用的是Windows，安装过程非常简单。我们只需在命令提示符中运行`pip install tensorflow`命令，如下截图所示：
- en: '![](img/502bc85a-c5e2-4df6-ba74-c12da592da19.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/502bc85a-c5e2-4df6-ba74-c12da592da19.png)'
- en: As seen in the preceding screenshot, TensorFlow is already installed on the
    system, so it says that the requirements are satisfied. We should be good to go
    with TensorFlow now.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一个截图所示，TensorFlow已经安装在系统上，因此它表示要求已满足。现在我们应该可以使用TensorFlow了。
- en: 'Install `tensorflow-hub` using the following command:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令安装`tensorflow-hub`：
- en: '[PRE2]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Next, install `tflearn` using the following command:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，使用以下命令安装`tflearn`：
- en: '[PRE3]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Finally, Keras is a high-level interface, which can be installed using the
    following command:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，Keras是一个高级接口，可以使用以下命令安装：
- en: '[PRE4]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: We have installed OpenCV, TensorFlow, dlib, and Tesseract, so we should be good
    to go with the tools for our book. Our next step will be exploring Jupyter Notebook,
    which should be fun!
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经安装了OpenCV、TensorFlow、dlib和Tesseract，因此我们应该可以使用我们书籍的工具了。我们的下一步将是探索Jupyter
    Notebook，这应该很有趣！
- en: Exploring Jupyter Notebook
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索Jupyter Notebook
- en: Now that we have our libraries installed, we're ready to get started with Jupyter
    Notebook. Jupyter Notebook is a really nice way of creating interactive code and
    widgets. It lets us create interactive presentations with live code and experiment,
    as we're doing here.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装了库，我们准备好开始使用Jupyter Notebook了。Jupyter Notebook是一种创建交互式代码和小部件的好方法。它允许我们创建带有实时代码和实验的交互式演示，就像我们现在所做的那样。
- en: If everything is set up correctly using Anaconda, we should already have Jupyter
    installed. Let's go ahead and take a look at Jupyter Notebook now.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如果使用Anaconda正确设置了一切，我们可能已经安装了Jupyter。让我们现在看看Jupyter Notebook。
- en: 'Open Command Prompt in the directory where your code files are, and then run the
    `jupyter notebook` command. This will open up a web browser in the directory where
    the command was executed. This should result in an interface that looks similar
    to the following screenshot:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的代码文件所在的目录中打开命令提示符，然后运行 `jupyter notebook` 命令。这将打开一个在命令执行目录中的网络浏览器。这应该会得到一个类似于以下截图的界面：
- en: '![](img/e1ea5303-cf0c-46e2-ac9b-82be97f372c8.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/e1ea5303-cf0c-46e2-ac9b-82be97f372c8.png)'
- en: 'Next, open the `.ipynb` file so you can explore the basic functionalities of
    Jupyter Notebook. Once opened, we should see a page similar to the following screenshot:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，打开 `.ipynb` 文件，以便你可以探索 Jupyter Notebook 的基本功能。一旦打开，我们应该看到一个类似于以下截图的页面：
- en: '![](img/7cc692ae-dc2c-4bf9-a517-acd7a7e61291.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/7cc692ae-dc2c-4bf9-a517-acd7a7e61291.png)'
- en: As shown, there are blocks (called *cells*) where we can put in Python commands
    and Python code. We can also enter other commands, also known as *magic commands*,
    which are not part of Python per se, but allow us to do nice things within Jupyter
    or IPython (an interactive shell for Python). The `%` at the beginning means that
    the command is a magic command.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如所示，有一些块（称为 *cells*），我们可以在这里输入 Python 命令和 Python 代码。我们还可以输入其他命令，也称为 *magic commands*，这些命令本身不是
    Python 的一部分，但允许我们在 Jupyter 或 IPython（Python 的交互式外壳）中做一些很酷的事情。开头 `%` 的意思是该命令是一个
    magic command。
- en: The biggest advantage here is that we can execute individual lines of code,
    instead of having to type out the entire code block in one go.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这里最大的优点是我们可以执行单个代码行，而不是一次输入整个代码块。
- en: If you're new to Jupyter Notebook, go to the following link: [https://www.cheatography.com/weidadeyue/cheat-sheets/jupyter-notebook/](https://www.cheatography.com/weidadeyue/cheat-sheets/jupyter-notebook/).
    Here, they list Jupyter Notebook keyboard shortcuts, which can be really useful
    for quick code testing.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你刚开始使用 Jupyter Notebook，请访问以下链接：[https://www.cheatography.com/weidadeyue/cheat-sheets/jupyter-notebook/](https://www.cheatography.com/weidadeyue/cheat-sheets/jupyter-notebook/)。在这里，他们列出了
    Jupyter Notebook 的键盘快捷键，这对于快速代码测试非常有用。
- en: 'Let''s go through some of the commands seen in the preceding screenshot, and
    see what they do, as follows:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一下前面截图中的某些命令，并看看它们的作用，如下所示：
- en: The `%pylab notebook` command, as seen in the first cell, imports a lot of very
    useful and common libraries, particularly NumPy and PyPlot, without us needing
    to explicitly call the import commands. It also sets up a Notebook easily.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如第一个单元格所示，`%pylab notebook` 命令导入了许多非常有用且常见的库，特别是 NumPy 和 PyPlot，而无需我们显式调用导入命令。它还简化了
    Notebook 的设置。
- en: 'Also in the first cell, we assign the directory that we will be working from,
    as follows:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 同样在第一个单元格中，我们指定我们将要工作的目录，如下所示：
- en: '[PRE5]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This results in the following output:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这导致了以下输出：
- en: '![](img/eafeb6bd-eeae-405c-83ef-941a31bbdce0.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/eafeb6bd-eeae-405c-83ef-941a31bbdce0.png)'
- en: So far, so good!
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，一切顺利！
- en: 'The following cell shows how to import our libraries. We''re going to import
    OpenCV, TensorFlow, dlib, and Tesseract, just to make sure that everything is
    working and that there aren''t any nasty surprises. This is done using the following
    code block:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一个单元格显示了如何导入我们的库。我们将导入 OpenCV、TensorFlow、dlib 和 Tesseract，只是为了确保一切正常，没有出现任何令人不快的惊喜。这是通过以下代码块完成的：
- en: '[PRE6]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: If you get an error message here, redo the installation of the libraries, following
    the instructions carefully. Sometimes things do go wrong, depending on our system.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在这里收到错误信息，请按照说明仔细重新安装库。有时事情确实会出错，这取决于我们的系统。
- en: 'The third cell in the screenshot contains the command for importing the graph
    module in TensorFlow. This can come in handy for getting help on a function from
    within the Notebook, as follows:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 图表中的第三个单元格包含导入 TensorFlow 图模块的命令。这可以在 Notebook 内部获取函数帮助时派上用场，如下所示：
- en: '[PRE7]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: We will discuss this function in [Chapter 7](ffda7469-1745-4a0a-8375-43426248af4d.xhtml), *Deep
    Learning Image Classification with TensorFlow*.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在 [第 7 章](ffda7469-1745-4a0a-8375-43426248af4d.xhtml) 中讨论这个函数，*使用 TensorFlow
    进行深度学习图像分类*。
- en: 'Another neat thing about Jupyter Notebooks is that we can run shell commands
    right in the cell. As seen in the fourth cell in the screenshot (repeated here),
    the `ls` command shows us all the files in the directory we are working from:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Jupyter Notebooks 的另一个优点是，我们可以在单元格中直接运行 shell 命令。如图表中的第四个单元格所示（此处重复），`ls` 命令显示了我们从该目录中工作的所有文件：
- en: '![](img/f64d7093-c15d-49f3-b3a6-023ccd69b4ab.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/f64d7093-c15d-49f3-b3a6-023ccd69b4ab.png)'
- en: In this book, we'll be working with a lot of images, so we'll want to see the
    images right in the Notebook. Use the `imread()` function to read the image file
    from your directory. After that, your next step is to create a `figure()` widget
    to display the image. Finally, use the `imshow()` function to actually display
    the image.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这本书中，我们将处理很多图像，所以我们会希望在笔记本中直接查看图像。使用 `imread()` 函数从你的目录中读取图像文件。之后，你的下一步是创建一个
    `figure()` 小部件来显示图像。最后，使用 `imshow()` 函数实际显示图像。
- en: 'This entire process is summarized in the following screenshot:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 整个过程总结在下面的截图里：
- en: '![](img/f4406eac-4105-40c7-b757-3c72011cc3e7.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/f4406eac-4105-40c7-b757-3c72011cc3e7.png)'
- en: This is awesome, because we have widgets that are flexible.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 这很棒，因为我们有灵活的部件。
- en: By grabbing the bottom-right corner, we can shrink this to a reasonable size
    to see our color image with pixel axes displayed. We also have the pan option
    available. By clicking on it, we can pan our image and box zoom it. Hitting the
    home button resets the original view.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过抓住右下角，我们可以将其缩小到一个合理的尺寸，以便查看带有像素轴的颜色图像。我们还有平移选项可用。点击它，我们可以平移图像并框选放大。按主页按钮将重置原始视图。
- en: We will want take a look at our images, and processed images and so forth—as
    seen previously, this is a very handy and simple way to do it. We can also use
    PyLab inline, which is useful for certain things, as we'll see.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将想要查看我们的图像、处理后的图像等等——如前所述，这是一个非常方便且简单的方法。我们还可以使用 PyLab 内联，这在某些情况下很有用，我们将会看到。
- en: 'As we know, part of computer vision is working with videos. To play videos
    within the notebook, we need to import some libraries and use IPython''s HTML
    capability, as shown in the following screenshot:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正如我们所知，计算机视觉的一部分是处理视频。要在笔记本中播放视频，我们需要导入一些库并使用 IPython 的 HTML 功能，如下面的截图所示：
- en: '![](img/bcbddf0c-ed6a-47a9-9d89-787ff46bf800.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/bcbddf0c-ed6a-47a9-9d89-787ff46bf800.png)'
- en: Essentially, we're using our web browser's capability to play back videos. So,
    it's not really Python that's doing it, but our web browser, which enables interactivity
    between Jupyter Notebook and our browser.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，我们是在使用我们的网络浏览器的播放功能。所以，这并不是真正的 Python 在做这件事，而是我们的网络浏览器，它使得 Jupyter Notebook
    和我们的浏览器之间能够实现交互性。
- en: Here, we defined the `playvideo()` function, which takes the video filename
    as an input and returns an HTML object with our video.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，我们定义了 `playvideo()` 函数，它接受视频文件名作为输入，并返回一个包含我们视频的 HTML 对象。
- en: 'Execute the following command on Jupyter to play the *Megamind* video. It''s
    just a clip of the movie *Megamind*, which (for some reason) comes with OpenCV
    if we download all the source code:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Jupyter 中执行以下命令来播放 *Megamind* 视频。这只是电影 *Megamind* 的一段剪辑，如果我们下载所有源代码，它就会随 OpenCV
    一起提供：
- en: '[PRE8]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'You will see a black box, and if you scroll down, you''ll find a play button.
    Hit this and the movie will play, as seen in the following screenshot:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你会看到一个黑色盒子，如果你向下滚动，你会找到一个播放按钮。点击这个按钮，电影就会播放，如下面的截图所示：
- en: '![](img/a132f34e-5b85-4160-af2f-559ee77d11fb.png)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/a132f34e-5b85-4160-af2f-559ee77d11fb.png)'
- en: This can be used to play our own videos. All you have to do is point the command
    to the video that you want to play.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以用来播放我们自己的视频。你只需要将命令指向你想播放的视频。
- en: Once you have all this running, you should be in good shape to run the projects
    that we're going to take a look at in the coming chapters.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦所有这些运行起来，你应该能够良好地运行我们在接下来的章节中将要查看的项目。
- en: Summary
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned about the Anaconda distribution and different ways
    to install Python. We learned how to set up Python using the Anaconda distribution.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了 Anaconda 发行版和安装 Python 的不同方法。我们学习了如何使用 Anaconda 发行版设置 Python。
- en: Next, we looked at how to install various libraries in Anaconda, to make it
    easier for us to run various programs. Finally, we learned the basics of Jupyter
    Notebook and how it works.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们看了如何在 Anaconda 中安装各种库，以便我们更容易运行各种程序。最后，我们学习了 Jupyter Notebook 的基础知识及其工作原理。
- en: In the next chapter, [Chapter 2](d5bf725b-9e79-4865-96e9-338481599464.xhtml),
    *Image Captioning with TensorFlow*,we will look at how to carry out image captioning
    using TensorFlow.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章（第 2 章），我们将探讨如何使用 TensorFlow 进行图像字幕生成。
