["```py\n>set.seed(100)\n>age_samples <- rnorm(10000,mean = 5.5,sd=0.5)\n```", "```py\n>age_mean <- function(n){\n  mu0 <- 5\n  sd0 <- 1\n  mus <- mean(age_samples[1:n])\n  sds <- sd(age_samples[1:n])\n  mu_n <- (sd0^2/(sd0^2 + sds^2/n)) * mus + (sds^2/n/(sd0^2 + sds^2/n)) * mu0\n  mu_n\n}\n>samp <- c(25,50,100,200,400,500,1000,2000,5000,10000)\n>mu <- sapply(samp,age_mean,simplify = \"array\")\n>plot(samp,mu,type=\"b\",col=\"blue\",ylim=c(5.3,5.7),xlab=\"no of samples\",ylab=\"estimate of mean\")\n>abline(5.5,0)\n```", "```py\n>set.seed(100)\n>mu_t <- 5.5\n>sd_t <- 0.5\n>age_samples <- rnorm(10000,mean = mu_t,sd = sd_t)\n\n>#function to compute log likelihood\n>loglikelihood <- function(x,mu,sigma){\n    singlell <- dnorm(x,mean = mu,sd = sigma,log = T)\n    sumll <- sum(singlell)\n    sumll\n    }\n\n>#function to compute prior distribution for mean on log scale\n>d_prior_mu <- function(mu){\n  dnorm(mu,0,10,log=T)\n  }\n\n>#function to compute prior distribution for std dev on log scale\n>d_prior_sigma <- function(sigma){\n  dunif(sigma,0,5,log=T)\n  }\n\n>#function to compute posterior distribution on log scale\n>d_posterior <- function(x,mu,sigma){\n  loglikelihood(x,mu,sigma) + d_prior_mu(mu) + d_prior_sigma(sigma)\n   }\n\n>#function to make transition moves\n  tran_move <- function(x,dist = .1){\n  x + rnorm(1,0,dist)\n  }\n\n>num_iter <- 10000\n>posterior <- array(dim = c(2,num_iter))\n>accepted <- array(dim=num_iter - 1)\n>theta_posterior <-array(dim=c(2,num_iter))\n\n>values_initial <- list(mu = runif(1,4,8),sigma = runif(1,1,5))\n>theta_posterior[1,1] <- values_initial$mu\n>theta_posterior[2,1] <- values_initial$sigma\n\n>for (t in 2:num_iter){\n   #proposed next values for parameters\n    theta_proposed <- c(tran_move(theta_posterior[1,t-1]),tran_move(theta_posterior[2,t-1]))\n    p_proposed <- d_posterior(age_samples,mu = theta_proposed[1],sigma = theta_proposed[2])\n    p_prev <-d_posterior(age_samples,mu = theta_posterior[1,t-1],sigma = theta_posterior[2,t-1])\n    eps <- exp(p_proposed - p_prev)\n\n    # proposal is accepted if posterior density is higher w/ theta_proposed\n    # if posterior density is not higher, it is accepted with probability eps\n    accept <- rbinom(1,1,prob = min(eps,1))\n    accepted[t - 1] <- accept\n    if (accept == 1){\n      theta_posterior[,t] <- theta_proposed\n    } else {\n      theta_posterior[,t] <- theta_posterior[,t-1]\n    }\n}\n```", "```py\n>library(sm)\nx <- cbind(c(theta_posterior[1,1:num_iter]),c(theta_posterior[2,1:num_iter]))\nxlim <- c(min(x[,1]),max(x[,1]))\nylim <- c(min(x[,2]),max(x[,2]))\nzlim <- c(0,max(1))\n\nsm.density(x,\n           xlab = \"mu\",ylab=\"sigma\",\n           zlab = \" \",zlim = zlim,\n           xlim = xlim ,ylim = ylim,col=\"white\")\ntitle(\"Posterior density\")\n```"]