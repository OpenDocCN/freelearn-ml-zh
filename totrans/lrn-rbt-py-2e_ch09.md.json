["```py\n    $ sudo apt-get install qt-sdk  \n```", "```py\n    $ sudo apt-get install python-qt4 pyqt4-dev-tools\n```", "```py\n    $ sudo apt-get install python-pyside pyside-tools  \n```", "```py\n    $ pyuic4 -x hello_world.ui -o hello_world.py  \n```", "```py\n    $ pyside-uic -x hello_world.ui -o hello_world.py  \n```", "```py\nfrom PyQt4 import QtCore, QtGui \n\ntry: \n    _fromUtf8 = QtCore.QString.fromUtf8 \nexcept AttributeError: \n    _fromUtf8 = lambda s: s \n\nclass Ui_Form(object): \n\n    def setupUi(self, Form): \n        Form.setObjectName(_fromUtf8(\"Form\")) \n        Form.resize(514, 355) \n\n        self.pushButton = QtGui.QPushButton(Form) \n        self.pushButton.setGeometry(QtCore.QRect(150, 80, 191, 61)) \n        self.pushButton.setObjectName(_fromUtf8(\"pushButton\")) \n\n        self.retranslateUi(Form) \n        QtCore.QObject.connect(self.pushButton, QtCore.SIGNAL(_fromUtf8(\"clicked()\")), Form.message) \n        QtCore.QMetaObject.connectSlotsByName(Form) \n\n    def retranslateUi(self, Form): \n        Form.setWindowTitle(QtGui.QApplication.translate(\"Form\", \"Form\", None, QtGui.QApplication.UnicodeUTF8)) \n       self.pushButton.setText( QtGui.QApplication.translate(\"Form\", \"Press\", None, QtGui.QApplication.UnicodeUTF8)) \n\n#This following code should be added manually \nif __name__ == \"__main__\": \n   import sys \n    app = QtGui.QApplication(sys.argv) \n    Form = QtGui.QWidget() \n    ui = Ui_Form() \n    ui.setupUi(Form) \n    Form.show() \n    sys.exit(app.exec_()) \n```", "```py\n    def message(self): \n    print \"Hello World\" \n```", "```py\nQtCore.QObject.connect(self.pushButton, QtCore.SIGNAL(_fromUtf8(\"clicked()\")), Form.message) \n```", "```py\n    $ git clone https://github.com/qboticslabs/learning_robotics_2nd_ed.git\n```", "```py\n    $roslaunch chefbot_gazebo chefbot_hotel_world.launch  \n```", "```py\n    $ roslaunch chefbot_gazebo amcl_demo.launch \n map_file:=/home/<user_name>/catkin_ws/src/chefbot/chefbot_bringup/map/hotel1.yaml  \n```", "```py\n    $ roslaunch chefbot_bringup view_navigation.launch  \n```", "```py\n    $ rosrun tf tf_echo /map /base_link  \n```", "```py\n    $ rosrun chefbot_bringup robot_gui.py  \n```", "```py\nimport rospy \nimport actionlib \nfrom move_base_msgs.msg import * \nimport time \nfrom PyQt4 import QtCore, QtGui \n```", "```py\ntable_position = dict() \ntable_position[0] = (-0.465, 0.37, 0.010, 0, 0, 0.998, 0.069) \ntable_position[1] = (0.599, 1.03, 0.010, 0, 0, 1.00, -0.020) \ntable_position[2] = (4.415, 0.645, 0.010, 0, 0, -0.034, 0.999) \ntable_position[3] = (7.409, 0.812, 0.010, 0, 0, -0.119, 0.993) \ntable_position[4] = (1.757, 4.377, 0.010, 0, 0, -0.040, 0.999) \ntable_position[5] = (1.757, 4.377, 0.010, 0, 0, -0.040, 0.999) \ntable_position[6] = (1.757, 4.377, 0.010, 0, 0, -0.040, 0.999) \ntable_position[7] = (1.757, 4.377, 0.010, 0, 0, -0.040, 0.999) \ntable_position[8] = (1.757, 4.377, 0.010, 0, 0, -0.040, 0.999) \ntable_position[9] = (1.757, 4.377, 0.010, 0, 0, -0.040, 0.999) \n```", "```py\n#Handle table number from spin box \nself.table_no = 0 \n#Stores current table robot position \nself.current_table_position = 0 \n#Creating Actionlib client \nself.client = actionlib.SimpleActionClient('move_base',MoveBaseAction) \n#Creating goal message definition \nself.goal = MoveBaseGoal() \n#Start this function for updating battery and robot status \nself.update_values() \n```", "```py\n#Handle spinbox signal and assign to slot set_table_number() \nQtCore.QObject.connect(self.spinBox, QtCore.SIGNAL(_fromUtf8(\"valueChanged(int)\")), self.set_table_number) \n\n#Handle Home button signal and assign to slot Home() \nQtCore.QObject.connect(self.pushButton_3, QtCore.SIGNAL(_fromUtf8(\"clicked()\")), self.Home) \n\n#Handle Go button signal and assign to slot Go() \nQtCore.QObject.connect(self.pushButton, QtCore.SIGNAL(_fromUtf8(\"clicked()\")), self.Go) \n\n#Handle Cancel button signal and assign to slot Cancel() \nQtCore.QObject.connect(self.pushButton_2, QtCore.SIGNAL(_fromUtf8(\"clicked()\")), self.Cancel)\n```", "```py\ndef set_table_number(self): \n  self.table_no = self.spinBox.value() \n  self.current_table_position = table_position[self.table_no] \n```", "```py\ndef Go(self): \n\n  #Assigning x,y,z pose and orientation to target_pose message \n  self.goal.target_pose.pose.position.x=float(self.current_table  _position[0]) \n\n  self.goal.target_pose.pose.position.y=float(self.current_table  _position[1]) \n  self.goal.target_pose.pose.position.z=float(self.current_table  _position[2]) \n\n  self.goal.target_pose.pose.orientation.x =     float(self.current_table_position[3]) \n  self.goal.target_pose.pose.orientation.y=   float(self.current_table_position[4]) \n  self.goal.target_pose.pose.orientation.z=   float(self.current_table_position[5]) \n\n  #Frame id \n  self.goal.target_pose.header.frame_id= 'map' \n\n  #Time stamp \n  self.goal.target_pose.header.stamp = rospy.Time.now() \n\n  #Sending goal to navigation stack \n  self.client.send_goal(self.goal) \n```", "```py\ndef Cancel(self): \n  self.client.cancel_all_goals()\n```", "```py\ndef Home(self): \n  self.current_table_position = table_position[0] \n  self.Go() \n```", "```py\ndef update_values(self): \n    self.thread = WorkThread() \n    QtCore.QObject.connect( self.thread,    QtCore.SIGNAL(\"update(QString)\"), self.add ) \n    self.thread.start() \ndef add(self,text): \n  battery_value = rospy.get_param(\"battery_value\") \n  robot_status = rospy.get_param(\"robot_status\") \n   self.progressBar.setProperty(\"value\", battery_value) \n     self.label_4.setText(_fromUtf8(robot_status)) \n```", "```py\nclass WorkThread(QtCore.QThread): \n  def __init__(self): \n    QtCore.QThread.__init__(self) \n   def __del__(self): \n    self.wait() \n   def run(self): \n    while True: \n      time.sleep(0.3) # artificial time delay \n      self.emit( QtCore.SIGNAL('update(QString)'), \" \" ) \n      return \n```", "```py\n    $ sudo apt-get install ros-<ros_version>-rqt  \n```", "```py\n    $ roscore  \n```", "```py\n    $ rosrun rqt_gui rqt_gui  \n```", "```py\n    $rosrun rospy_tutorials talker.py  \n```"]