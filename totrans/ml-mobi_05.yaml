- en: Regression Using Core ML in iOS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter will provide you with an overview of regression algorithms and
    insights into the basics of Core ML, and will introduce you to creating a machine
    learning program leveraging a regression algorithm and predicting the housing
    price for a given set of housing-related data using Core ML in iOS.
  prefs: []
  type: TYPE_NORMAL
- en: As we already saw in [Chapter 1](51fcaf51-eb68-4493-afc2-0b02f1c1d50e.xhtml), *Introduction
    to Machine Learning on Mobile*, any machine learning program has four phases.
    We will see what we are going to cover in the four phases and what tools we are
    going to use to solve the underlying machine learning problem.
  prefs: []
  type: TYPE_NORMAL
- en: '**Problem definition**: The housing information of a certain area is provided
    and we want to predict the median value of a home in this area.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will be covering the following topics in the chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding what regression is and how to apply it to solve an ML problem
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding regression using a sample dataset and Excel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the basics of Core ML
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Solving the problem using regression in Core ML:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: How to create the model file using scikit-learn
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing the model
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding how to import the scikit-learn model into the Core ML project
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing an iOS mobile application and using the scikit-learn model in it and
    doing the housing price prediction
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction to regression
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Regression analysis is a basic method used in the statistical analysis of data.
    It's a statistical method that helps to find the relationships between variables.
    It is basically used for understanding the relationship between input and output
    numerical variables. We should first identify the dependent variable, which will
    vary based on the value of the independent variable. For example, the value of
    the house (dependent variable) varies based on the square footage of the house
    (independent variable). Regression analysis is very useful for prediction.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a simple regression problem (a single *x* and a single *y*), the form of
    the model would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '*y = A + B*x*'
  prefs: []
  type: TYPE_NORMAL
- en: In higher dimensions, when we have more than one input (*x*), the line is called
    a **plane** or a **hyperplane**.
  prefs: []
  type: TYPE_NORMAL
- en: In our example, we predict the price of the house based on the various parameters
    that may impact the price of the data in that particular area.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are some of the important points to be considered while addressing
    a regression problem:'
  prefs: []
  type: TYPE_NORMAL
- en: The prediction is to be a numeric quantity.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The input variables can be real-valued or discrete.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If there are multiple input variables then it is called a **multivariate regression
    problem**.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When the input variables are ordered by time, the regression problem is called
    a **time series forecasting problem**.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Regression should not be confused with classification. Classification is the
    task of predicting a discrete class label, whereas regression is the task of predicting
    a continuous quantity.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An algorithm that is capable of learning a regression predictive model is called
    a **regression algorithm**.
  prefs: []
  type: TYPE_NORMAL
- en: Linear regression
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will try to understand linear regression using a detailed
    example with a specific dataset. We are going to use the same dataset to work
    out the iOS Core ML example too.
  prefs: []
  type: TYPE_NORMAL
- en: Dataset
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will use the Boston dataset for the regression problem. This dataset contains
    information collected by the US Census Service concerning housing in the area
    of Boston, Massachusetts. It was obtained from the StatLib archive ([http://lib.stat.cmu.edu/datasets/boston](http://lib.stat.cmu.edu/datasets/boston))
    and has been used extensively throughout the literature to benchmark algorithms. The
    dataset is small in size, with only 506 cases.
  prefs: []
  type: TYPE_NORMAL
- en: Dataset naming
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The name for this dataset is simply **Boston**. It has two photo tasks: now,
    in which the nitrous oxide level is to be predicted; and price, in which the median
    value of a home is to be predicted.
  prefs: []
  type: TYPE_NORMAL
- en: 'Miscellaneous details about the dataset are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Origin**: The origin of the Boston housing data is Natural.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Usage**: This dataset may be used for assessment.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Number of cases**: The dataset contains a total of 506 cases.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Order**: The order of the cases is mysterious.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Variables**: There are 14 attributes in each case of the dataset. They are
    the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CRIM**: Per capita crime rate by town'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ZN**: A proportion of residential land zoned for lots over 25,000 sq.ft'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**INDUS**: A proportion of nonretail business acres per town'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CHAS**: Charles River dummy variable (1 if tract bounds river; 0 otherwise)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**NOX**: Nitric oxide concentration (parts per 10 million)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**RM**: Average number of rooms per dwelling'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**AGE**: A proportion of owner-occupied units built prior to 1940'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**DIS**: Weighted distances to five Boston employment centers'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**RAD**: Index of accessibility to radial highways'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**TAX**: Full-value property-tax rate per $10,000'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**PTRATIO**: Pupil-teacher ratio by a town'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**B**: `1000(Bk - 0.63)^2` where `Bk` is the proportion of blacks by a town'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**LSTAT**: Percentage lower status of the population'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**MEDV**: A median value of owner-occupied homes in $1000'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We will try out both simple linear regression as well as multivariate regression
    using Excel for the dataset and understand the details. We will consider only
    the following 20 data elements from the 506 sample data space from the Boston
    dataset for our analysis purposes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/30b33a7e-b904-46bb-9b2b-7e0e6891cc6d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, we can use the data analysis option given in Excel and try to predict
    the `MV` considering the dependent variable `DIS` alone. In data analysis, select
    `Regression` and select the `MV` as the `Y` value and `DIS` as the `X` value.
    This is a simple regression with one dependent variable to predict the output.
    The following is the output produced by Excel:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bdd8cb77-8ee6-4ba9-b811-b7583870d694.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The linear regression equation for prediction of `MV` with `DIS` as the dependent
    variable would be *Y = 1.11X + 17.17* (`DIS` coefficient of `DIS` + intercept
    value):'
  prefs: []
  type: TYPE_NORMAL
- en: '*R2 =0.0250*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we can see the predicted output of `MV` for the set of 20 data samples
    considered for analysis:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/91d8140e-e041-4d7e-8a2c-4f632a6714d9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The output chart for the `MV` predicted for the `DIS` as a dependent variable
    is given as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/95f4d6ac-183c-40b7-83ac-4e5d78c256f4.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, we get an understanding of how linear regression works for a single, dependent
    variable. In the same way, we can have any number of dependent variables, by including
    them as *X1*, *X2*, *X3*, ... *XN*.
  prefs: []
  type: TYPE_NORMAL
- en: In our dataset, we have 14 variables in total and we can have the `MV` dependent
    on all the remaining 13 variables and create the regression equation in the same
    manner as specified previously for a single variable.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have understood how to perform regression for our Boston dataset
    using Excel, we will be performing the same using Core ML. Before going ahead
    and implementing in Core ML, we will must understand what Core ML is and look
    into the basics of Core ML.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the basics of Core ML
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Core ML enables iOS mobile applications to run machine learning models locally on
    a mobile device. It enables developers to integrate a broad variety of machine
    learning model types into a mobile application. Developers do not require extensive
    knowledge of machine learning or deep learning to write machine learning mobile
    applications using Core ML. They just need to know how to include the ML model
    into the mobile app similar to other resources and use invoke it in the mobile
    application. A data scientist or a machine learning expert can create an ML model
    in any technology they are familiar with, say Keras, scikit-learn, and so on.
    Core ML provides tools to convert the ML data model created using other tools
    (tensor, scikit-learn, and so on) to a format that is mandated by Core ML.
  prefs: []
  type: TYPE_NORMAL
- en: This conversion to a Core ML model happens during the app development phase.
    It does not happen in real time when the application is being used. The conversion
    is done by using the `coremltools` Python library. When the app deserializes a
    Core ML model, it becomes an object having a `prediction` method. Core ML is not
    really meant for training, just for running pretrained models.
  prefs: []
  type: TYPE_NORMAL
- en: 'Core ML supports extensive deep learning capabilities with support for more
    than 30 layers. The layers in deep learning actually suggest the number of layers
    through which the data is transformed. It also supports standard models: tree
    ensembles, SVMs, and linear models. It is built on top of low-level technologies
    such as Metal. Core ML seamlessly takes advantage of the CPU and GPU to provide
    maximum performance and efficiency. It has the ability to switch between CPU and
    GPU based on the intensity of the task at hand. Since Core ML lets machine learning
    run locally on the device, data doesn''t need to leave the device to be analyzed.'
  prefs: []
  type: TYPE_NORMAL
- en: 'With Core ML, we can integrate trained machine learning models into our app:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a084aaaf-f488-4a3e-b4db-b45bab1c0df3.png)'
  prefs: []
  type: TYPE_IMG
- en: A trained model is the result of applying a machine learning algorithm to a
    set of training data. The model makes predictions based on new input data. For
    example, a model that's been trained in a region's historical house prices may
    be able to predict a house's price when given the number of bedrooms and bathrooms.
  prefs: []
  type: TYPE_NORMAL
- en: Core ML is optimized for on-device performance, which minimizes memory footprint
    and power consumption. Running strictly on the device ensures the privacy of user
    data and guarantees that our app remains functional and responsive when a network
    connection is unavailable.
  prefs: []
  type: TYPE_NORMAL
- en: 'Core ML is the foundation for domain-specific frameworks and functionality.
    Core ML supports **Vision** for image analysis, Foundation for **natural language
    processing**, and **G****ameplaykit** for evaluating learned decision trees. **Core
    ML** itself builds on top of low-level primitives such as **Accelerate **and **BNNS**,
    as well as **Metal Performance Shaders**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/04f6501e-e6bf-4614-9a2c-e887484d1c7d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'An iOS developer who is going to write ML programs using Core ML needs to be
    aware of the following fundamental steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create the model outside of iOS. This can be done using scikit-learn, TensorFlow,
    or in any other way with which the developer is comfortable. Create the machine
    learning model file. For creating the machine learning model file, they need to
    be aware of the four key phases of machine learning already discussed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the model is built, tested, and ready for use, this model needs to be converted
    to a format that is compatible with Core ML. Core ML tools are available that
    actually help to convert the model file created using any tool to a model file
    that is in a format as mandated by Core ML (`.mlmodel` file format).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the Core ML specific model file is created, the same can be imported into
    the iOS program and the Core ML-provided APIs can be used to interact with the
    model file to extract the required information as may be required by the iOS application,
    basically importing the `.mlmodel` file into the `resources` folder of the Xcode
    project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Core ML's biggest advantage is that it is extremely simple to use. Just a few
    lines of code can help to integrate a complete ML model. Core ML can only help
    to integrate pretrainedML models into an application. No model training is possible.
  prefs: []
  type: TYPE_NORMAL
- en: Solving the problem using regression in Core ML
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section will go through the details of creating a regression model and
    then using the regression model in an iOS mobile application. It will provide
    a detailed walk-through of the various steps involved in creating an iOS regression
    ML application to address the problem defined.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following software needs to be installed on the developer machine:'
  prefs: []
  type: TYPE_NORMAL
- en: Python
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Xcode in a Mac environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The exercise programs for this chapter can be downloaded from our GitHub repository
    at [https://github.com/PacktPublishing/Machine-Learning-for-Mobile/tree/master/housing%20price%20prediction](https://github.com/PacktPublishing/Machine-Learning-for-Mobile/tree/master/housing%20price%20prediction).
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following program, we are going to use `pandas`, `numpy`, and `scikit-learn`
    to create the model. So, install these packages from the `pip` package manager
    using the following command from the Command Prompt/Terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'In order to convert the created model to the Core ML format, we need to use
    the Core ML `scikit-learn` Python converter provided by Apple:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: How to create the model file using scikit-learn
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section will explain how we are going to create the linear regression model
    file using `scikit-learn` and also convert it into the `.mlmodel` file that is
    compatible with Core ML. We are going to use the Boston dataset for the model
    creation. The following is a simple Python program, which creates a simple linear
    regression model using `scikit-learn` using the Boston dataset. Then the Core
    ML tools convert it into the model file compatible with Core ML. Let's go through
    the program in detail.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to import the required packages needed for the program:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding lines import the NumPy package. NumPy is the fundamental package
    for scientific computing with Python. It contains a powerful N-dimensional array
    object. This `numpy` array will be used in this program for storing the dataset,
    which has 14 dimensions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding line imports the `pandas` package, an open source, BSD-licensed
    library providing high-performance, easy-to-use data structures and data analysis
    tools for the Python programming language. Using pandas, we can create a data
    frame. You can assume a `pandas` data frame as an Excel spreadsheet in which every
    sheet has headings and data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding lines import the Core ML Tools conversion package for the linear
    regression model that we have used in this program. Core ML Tools is a Python
    package for creating, examining, and testing models in the `.mlmodel` format.
    In particular, it can be used to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Convert existing models to the `.mlmodel` format from popular machine learning
    tools including `Keras`, `Caffe`, `scikit-learn`, `libsvm`, and `XGBoost`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Express models in `.mlmodel` format through a simple API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Make predictions with an `.mlmodel` (on select platforms for testing purposes):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding lines import the `sklearn` packages. Data sets are used to import
    built-in datasets in the `sklearn` package. In this program, we are using the
    Boston housing price dataset that was explained in the previous section. The `linear_model`
    package is used to get access to the linear regression function, and the metrics
    package is used to calculate the testing metrics of our model, such as the mean
    squared error:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding line loads the Boston dataset from the `sklearn` datasets package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, from the entire dataset, we need to extract the data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Get the column names, that is, the headings for that data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s define the target column that we want to predict. The column defined
    as the target will be the one that will be predicted:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Once we define the target column, we will remove the data from the target column,
    so that it becomes `x`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Since we defined price as the target column, `y` is the price column in the
    dataset''s data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'We then split the data into training and test data as per the 70/30 rule:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Once we have the training and test data, we can initiate a linear regression
    object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'With the linear regression object that has been initialized, we just have to
    feed the training and the test data into the regression model:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding line predicts the target:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: The preceding lines will calculate the mean squared error in our fitted model
    and predicted results.
  prefs: []
  type: TYPE_NORMAL
- en: Because a regression predictive model predicts a quantity, the skill of the
    model must be reported as an error in those predictions.
  prefs: []
  type: TYPE_NORMAL
- en: There are many ways to estimate the skill of a regression predictive model,
    but the most common is to calculate the **root mean squared error** (**RMSE**).
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, if a regression predictive model made two predictions, one of
    *1.5* where the expected value is *1.0* and another of 3.3 and the expected value
    is *3.0*, then the *RMSE* would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| 1 | *RMSE = sqrt(average(error^2))* |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | *RMSE = sqrt(((1.0 - 1.5)^2 + (3.0 - 3.3)^2) / 2)* |'
  prefs: []
  type: TYPE_TB
- en: '| 3 | *RMSE = sqrt((0.25 + 0.09) / 2)* |'
  prefs: []
  type: TYPE_TB
- en: '| 4 | *RMSE = sqrt(0.17)* |'
  prefs: []
  type: TYPE_TB
- en: '| 5 | *RMSE = 0.412* |'
  prefs: []
  type: TYPE_TB
- en: 'A benefit of *RMSE* is that the units of the error score are in the same units
    as the predicted value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding line, we are converting the fitted model to the Core ML format.
    Basically, this is the line where the `.mlmodel` file is created. And we are also
    specifying the input and output column names:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding line, we are saving the model to the disk. This can later be
    used in our iOS program.
  prefs: []
  type: TYPE_NORMAL
- en: Running and testing the model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When the model created by `scikit-learn` was executed and tested independently
    before converting it into the Core ML format, the following variance and mean
    square error were found:'
  prefs: []
  type: TYPE_NORMAL
- en: The mean square error for the prepared model was `30.703232`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The variance score was `0.68`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The process finished with exit code `0`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following graph gives an idea of the predicted values versus the actual
    values:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2d37875f-7070-4c8b-805f-f43c360f59a9.png)'
  prefs: []
  type: TYPE_IMG
- en: Importing the model into the iOS project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following is the project structure of the Xcode project where the `.mlmodel`
    file is imported and used for prediction:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e388c71b-ab13-4629-a3dc-a3e8e67ffb0f.png)'
  prefs: []
  type: TYPE_IMG
- en: The `ViewCcontroller.swift` file is where the model file created is used and
    the housing prediction is carried out in a mobile application.
  prefs: []
  type: TYPE_NORMAL
- en: The `housePricer.mlmodel` file is the model file that was created using `scikit-learn`
    and converted into the ML model file using the Core ML converter tools. This file
    is included in the `resources` folder of the iOS Xcode project.
  prefs: []
  type: TYPE_NORMAL
- en: Writing the iOS application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This section provides the details of the `Swift` code that uses the model in
    the `.mlmodel` format and does the housing price prediction:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'This line is to initialize the model class that we have imported into the project.
    The following lines define outlets/variables to the text fields to interact with
    them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: The preceding function is added as an `onchange` listener to all the preceding
    text fields. In this, we are using the model object we have created previously
    and predicting the price for the given values in the text fields.
  prefs: []
  type: TYPE_NORMAL
- en: Running the iOS application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Xcode project created was executed in the simulator and the following is
    the sample we got:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d86fa06c-912e-42ca-aa48-9c9a51313aa1.png)'
  prefs: []
  type: TYPE_IMG
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can get more insight into Core ML and the services it offers by going to
    its official website at [https://developer.apple.com/documentation/coreml](https://developer.apple.com/documentation/coreml).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we covered the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Linear regression**: Understanding the algorithm and implementing it for
    the Boston housing dataset using an Excel sheet.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Core ML**: We went through the high-level details of Core ML and the various
    features it offers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**A sample application implemented for linear regression using Core ML**: We
    took the Boston housing dataset and implemented the linear regression model using
    Core ML for an iOS mobile application and viewed the results in a mobile application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
