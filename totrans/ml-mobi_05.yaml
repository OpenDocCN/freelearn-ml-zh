- en: Regression Using Core ML in iOS
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在iOS中使用Core ML进行回归
- en: This chapter will provide you with an overview of regression algorithms and
    insights into the basics of Core ML, and will introduce you to creating a machine
    learning program leveraging a regression algorithm and predicting the housing
    price for a given set of housing-related data using Core ML in iOS.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将为您提供一个关于回归算法的概述，以及Core ML基础知识的洞察，并介绍如何利用回归算法创建机器学习程序，并使用iOS中的Core ML预测一组相关住房数据的房价。
- en: As we already saw in [Chapter 1](51fcaf51-eb68-4493-afc2-0b02f1c1d50e.xhtml), *Introduction
    to Machine Learning on Mobile*, any machine learning program has four phases.
    We will see what we are going to cover in the four phases and what tools we are
    going to use to solve the underlying machine learning problem.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在[第1章](51fcaf51-eb68-4493-afc2-0b02f1c1d50e.xhtml)，“移动机器学习简介”中看到的，任何机器学习程序都有四个阶段。我们将看到在四个阶段中我们将要涵盖的内容，以及我们将使用什么工具来解决潜在的机器学习问题。
- en: '**Problem definition**: The housing information of a certain area is provided
    and we want to predict the median value of a home in this area.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '**问题定义**：提供某个区域的住房信息，我们想要预测该区域房屋的中位数价值。'
- en: 'We will be covering the following topics in the chapter:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将涵盖以下主题：
- en: Understanding what regression is and how to apply it to solve an ML problem
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解什么是回归以及如何将其应用于解决ML问题
- en: Understanding regression using a sample dataset and Excel
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用样本数据集和Excel理解回归
- en: Understanding the basics of Core ML
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解Core ML的基础知识
- en: 'Solving the problem using regression in Core ML:'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Core ML中的回归解决问题：
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 技术要求
- en: How to create the model file using scikit-learn
  id: totrans-10
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用scikit-learn创建模型文件
- en: Testing the model
  id: totrans-11
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试模型
- en: Understanding how to import the scikit-learn model into the Core ML project
  id: totrans-12
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解如何将scikit-learn模型导入Core ML项目
- en: Writing an iOS mobile application and using the scikit-learn model in it and
    doing the housing price prediction
  id: totrans-13
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写iOS移动应用程序，并在其中使用scikit-learn模型进行房价预测
- en: Introduction to regression
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 回归简介
- en: Regression analysis is a basic method used in the statistical analysis of data.
    It's a statistical method that helps to find the relationships between variables.
    It is basically used for understanding the relationship between input and output
    numerical variables. We should first identify the dependent variable, which will
    vary based on the value of the independent variable. For example, the value of
    the house (dependent variable) varies based on the square footage of the house
    (independent variable). Regression analysis is very useful for prediction.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 回归分析是数据统计分析的基本方法。它是一种统计方法，有助于找出变量之间的关系。它基本上用于理解输入和输出数值变量之间的关系。我们首先应确定因变量，它将根据自变量的值而变化。例如，房屋的价值（因变量）根据房屋的平方英尺（自变量）而变化。回归分析对于预测非常有用。
- en: 'In a simple regression problem (a single *x* and a single *y*), the form of
    the model would be as follows:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个简单的回归问题（一个*x*和一个*y*），模型的形态如下：
- en: '*y = A + B*x*'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '*y = A + B*x*'
- en: In higher dimensions, when we have more than one input (*x*), the line is called
    a **plane** or a **hyperplane**.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在高维空间中，当我们有多个输入(*x*)时，这条线被称为**平面**或**超平面**。
- en: In our example, we predict the price of the house based on the various parameters
    that may impact the price of the data in that particular area.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的例子中，我们根据可能影响该特定区域数据价格的各个参数预测房屋价格。
- en: 'The following are some of the important points to be considered while addressing
    a regression problem:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在解决回归问题时需要考虑的一些重要点包括：
- en: The prediction is to be a numeric quantity.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 预测结果应为一个数值量。
- en: The input variables can be real-valued or discrete.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输入变量可以是实值或离散值。
- en: If there are multiple input variables then it is called a **multivariate regression
    problem**.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果有多个输入变量，则称为**多元回归问题**。
- en: When the input variables are ordered by time, the regression problem is called
    a **time series forecasting problem**.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当输入变量按时间顺序排列时，回归问题被称为**时间序列预测问题**。
- en: Regression should not be confused with classification. Classification is the
    task of predicting a discrete class label, whereas regression is the task of predicting
    a continuous quantity.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 回归不应与分类混淆。分类是预测离散类标签的任务，而回归是预测连续量的任务。
- en: An algorithm that is capable of learning a regression predictive model is called
    a **regression algorithm**.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 能够学习回归预测模型的算法被称为**回归算法**。
- en: Linear regression
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 线性回归
- en: In this section, we will try to understand linear regression using a detailed
    example with a specific dataset. We are going to use the same dataset to work
    out the iOS Core ML example too.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将通过一个具体的详细示例来尝试理解线性回归。我们还将使用相同的示例数据集来处理iOS Core ML示例。
- en: Dataset
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据集
- en: We will use the Boston dataset for the regression problem. This dataset contains
    information collected by the US Census Service concerning housing in the area
    of Boston, Massachusetts. It was obtained from the StatLib archive ([http://lib.stat.cmu.edu/datasets/boston](http://lib.stat.cmu.edu/datasets/boston))
    and has been used extensively throughout the literature to benchmark algorithms. The
    dataset is small in size, with only 506 cases.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用波士顿数据集来解决回归问题。这个数据集包含了美国人口普查局收集的有关马萨诸塞州波士顿地区住房的信息。它是从StatLib存档（[http://lib.stat.cmu.edu/datasets/boston](http://lib.stat.cmu.edu/datasets/boston)）获得的，并在文献中被广泛用作算法的基准。该数据集规模较小，只有506个案例。
- en: Dataset naming
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据集命名
- en: The name for this dataset is simply **Boston**. It has two photo tasks: now,
    in which the nitrous oxide level is to be predicted; and price, in which the median
    value of a home is to be predicted.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这个数据集的名称很简单，叫**波士顿**。它有两个照片任务：现在，需要预测一氧化二氮的水平；价格，需要预测房屋的中位数价值。
- en: 'Miscellaneous details about the dataset are as follows:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 关于数据集的其他细节如下：
- en: '**Origin**: The origin of the Boston housing data is Natural.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**来源**：波士顿住房数据来源于自然。'
- en: '**Usage**: This dataset may be used for assessment.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用途**：此数据集可用于评估。'
- en: '**Number of cases**: The dataset contains a total of 506 cases.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**案例数量**：该数据集包含总共506个案例。'
- en: '**Order**: The order of the cases is mysterious.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**顺序**：案例的顺序是神秘的。'
- en: '**Variables**: There are 14 attributes in each case of the dataset. They are
    the following:'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**变量**：数据集中的每个案例有14个属性。它们如下：'
- en: '**CRIM**: Per capita crime rate by town'
  id: totrans-39
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CRIM**：城镇的人均犯罪率'
- en: '**ZN**: A proportion of residential land zoned for lots over 25,000 sq.ft'
  id: totrans-40
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ZN**：超过25,000平方英尺地块的住宅用地比例'
- en: '**INDUS**: A proportion of nonretail business acres per town'
  id: totrans-41
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**INDUS**：城镇非零售商业地块的比例'
- en: '**CHAS**: Charles River dummy variable (1 if tract bounds river; 0 otherwise)'
  id: totrans-42
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CHAS**：查尔斯河虚拟变量（如果地块边界是河流则为1，否则为0）'
- en: '**NOX**: Nitric oxide concentration (parts per 10 million)'
  id: totrans-43
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**NOX**：一氧化氮浓度（每千万分之一）'
- en: '**RM**: Average number of rooms per dwelling'
  id: totrans-44
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**RM**：每套住宅的平均房间数'
- en: '**AGE**: A proportion of owner-occupied units built prior to 1940'
  id: totrans-45
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AGE**：1940年之前建造的业主自住单元的比例'
- en: '**DIS**: Weighted distances to five Boston employment centers'
  id: totrans-46
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**DIS**：到五个波士顿就业中心的加权距离'
- en: '**RAD**: Index of accessibility to radial highways'
  id: totrans-47
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**RAD**：通往放射状高速公路的可达性指数'
- en: '**TAX**: Full-value property-tax rate per $10,000'
  id: totrans-48
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**TAX**：每10,000美元的全值财产税税率'
- en: '**PTRATIO**: Pupil-teacher ratio by a town'
  id: totrans-49
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**PTRATIO**：城镇的师生比例'
- en: '**B**: `1000(Bk - 0.63)^2` where `Bk` is the proportion of blacks by a town'
  id: totrans-50
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**B**：`1000(Bk - 0.63)^2`，其中`Bk`是城镇的黑人比例'
- en: '**LSTAT**: Percentage lower status of the population'
  id: totrans-51
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**LSTAT**：人口中低阶层百分比'
- en: '**MEDV**: A median value of owner-occupied homes in $1000'
  id: totrans-52
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**MEDV**：业主自住房屋的中位数价值（单位为1000美元）'
- en: 'We will try out both simple linear regression as well as multivariate regression
    using Excel for the dataset and understand the details. We will consider only
    the following 20 data elements from the 506 sample data space from the Boston
    dataset for our analysis purposes:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将尝试使用Excel对数据集进行简单线性回归和多变量回归，并了解其细节。我们将仅考虑从波士顿数据集的506个样本数据空间中以下20个数据元素进行分析：
- en: '![](img/30b33a7e-b904-46bb-9b2b-7e0e6891cc6d.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](img/30b33a7e-b904-46bb-9b2b-7e0e6891cc6d.png)'
- en: 'Now, we can use the data analysis option given in Excel and try to predict
    the `MV` considering the dependent variable `DIS` alone. In data analysis, select
    `Regression` and select the `MV` as the `Y` value and `DIS` as the `X` value.
    This is a simple regression with one dependent variable to predict the output.
    The following is the output produced by Excel:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以使用Excel中提供的数据分析选项，尝试仅考虑依赖变量`DIS`来预测`MV`。在数据分析中，选择`回归`，并将`MV`作为`Y`值，`DIS`作为`X`值。这是一个只有一个依赖变量来预测输出的简单回归。以下是Excel生成的输出：
- en: '![](img/bdd8cb77-8ee6-4ba9-b811-b7583870d694.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bdd8cb77-8ee6-4ba9-b811-b7583870d694.png)'
- en: 'The linear regression equation for prediction of `MV` with `DIS` as the dependent
    variable would be *Y = 1.11X + 17.17* (`DIS` coefficient of `DIS` + intercept
    value):'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 以 `DIS` 作为因变量的 `MV` 预测的线性回归方程将是 *Y = 1.11X + 17.17* (`DIS` 的 `DIS` 系数 + 截距值)：
- en: '*R2 =0.0250*'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '*R2 =0.0250*'
- en: 'Now, we can see the predicted output of `MV` for the set of 20 data samples
    considered for analysis:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以看到分析所考虑的 20 个数据样本的 `MV` 预测输出：
- en: '![](img/91d8140e-e041-4d7e-8a2c-4f632a6714d9.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](img/91d8140e-e041-4d7e-8a2c-4f632a6714d9.png)'
- en: 'The output chart for the `MV` predicted for the `DIS` as a dependent variable
    is given as follows:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 预测 `DIS` 作为因变量的 `MV` 的输出图表如下：
- en: '![](img/95f4d6ac-183c-40b7-83ac-4e5d78c256f4.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](img/95f4d6ac-183c-40b7-83ac-4e5d78c256f4.png)'
- en: Now, we get an understanding of how linear regression works for a single, dependent
    variable. In the same way, we can have any number of dependent variables, by including
    them as *X1*, *X2*, *X3*, ... *XN*.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们了解了线性回归如何对一个单一的自变量进行工作。同样地，我们可以有任意数量的自变量，通过将它们包括为 *X1*、*X2*、*X3*、... *XN*。
- en: In our dataset, we have 14 variables in total and we can have the `MV` dependent
    on all the remaining 13 variables and create the regression equation in the same
    manner as specified previously for a single variable.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的数据集中，总共有 14 个变量，我们可以让 `MV` 依赖于剩余的所有 13 个变量，并以之前为单个变量指定的方式创建回归方程。
- en: Now that we have understood how to perform regression for our Boston dataset
    using Excel, we will be performing the same using Core ML. Before going ahead
    and implementing in Core ML, we will must understand what Core ML is and look
    into the basics of Core ML.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了如何使用 Excel 对波士顿数据集进行回归，我们将使用 Core ML 进行相同的操作。在继续在 Core ML 中实现之前，我们必须了解
    Core ML 是什么，并查看 Core ML 的基础知识。
- en: Understanding the basics of Core ML
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 Core ML 的基础知识
- en: Core ML enables iOS mobile applications to run machine learning models locally on
    a mobile device. It enables developers to integrate a broad variety of machine
    learning model types into a mobile application. Developers do not require extensive
    knowledge of machine learning or deep learning to write machine learning mobile
    applications using Core ML. They just need to know how to include the ML model
    into the mobile app similar to other resources and use invoke it in the mobile
    application. A data scientist or a machine learning expert can create an ML model
    in any technology they are familiar with, say Keras, scikit-learn, and so on.
    Core ML provides tools to convert the ML data model created using other tools
    (tensor, scikit-learn, and so on) to a format that is mandated by Core ML.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: Core ML 允许 iOS 移动应用程序在移动设备上本地运行机器学习模型。它使开发者能够将各种机器学习模型类型集成到移动应用程序中。开发者不需要广泛的机器学习或深度学习知识，就可以使用
    Core ML 编写机器学习移动应用程序。他们只需要知道如何将 ML 模型包含到移动应用中，就像其他资源一样，并在移动应用程序中使用它。数据科学家或机器学习专家可以使用他们熟悉的任何技术创建
    ML 模型，例如 Keras、scikit-learn 等。Core ML 提供了工具，可以将使用其他工具（tensor、scikit-learn 等）创建的
    ML 数据模型转换为 Core ML 所要求的格式。
- en: This conversion to a Core ML model happens during the app development phase.
    It does not happen in real time when the application is being used. The conversion
    is done by using the `coremltools` Python library. When the app deserializes a
    Core ML model, it becomes an object having a `prediction` method. Core ML is not
    really meant for training, just for running pretrained models.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这种转换为 Core ML 模型发生在应用程序开发阶段。当应用程序被使用时，不会实时发生转换。转换是通过使用 `coremltools` Python
    库来完成的。当应用程序反序列化 Core ML 模型时，它成为一个具有 `prediction` 方法的对象。Core ML 并非真正用于训练，而是用于运行预训练模型。
- en: 'Core ML supports extensive deep learning capabilities with support for more
    than 30 layers. The layers in deep learning actually suggest the number of layers
    through which the data is transformed. It also supports standard models: tree
    ensembles, SVMs, and linear models. It is built on top of low-level technologies
    such as Metal. Core ML seamlessly takes advantage of the CPU and GPU to provide
    maximum performance and efficiency. It has the ability to switch between CPU and
    GPU based on the intensity of the task at hand. Since Core ML lets machine learning
    run locally on the device, data doesn''t need to leave the device to be analyzed.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: Core ML支持广泛的深度学习能力，支持超过30层。深度学习中的层实际上表示数据经过转换的层数。它还支持标准模型：树集成、SVM和线性模型。它建立在低级技术如Metal之上。Core
    ML无缝利用CPU和GPU以提供最大性能和效率。它能够根据任务的强度在CPU和GPU之间切换。由于Core ML允许机器学习在设备上本地运行，因此数据不需要离开设备进行分析。
- en: 'With Core ML, we can integrate trained machine learning models into our app:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Core ML，我们可以将训练好的机器学习模型集成到我们的应用程序中：
- en: '![](img/a084aaaf-f488-4a3e-b4db-b45bab1c0df3.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/a084aaaf-f488-4a3e-b4db-b45bab1c0df3.png)'
- en: A trained model is the result of applying a machine learning algorithm to a
    set of training data. The model makes predictions based on new input data. For
    example, a model that's been trained in a region's historical house prices may
    be able to predict a house's price when given the number of bedrooms and bathrooms.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 训练好的模型是将机器学习算法应用于一组训练数据的结果。该模型根据新的输入数据进行预测。例如，在一个地区的房价历史数据上训练的模型，在给出卧室和浴室数量时，可能能够预测房屋的价格。
- en: Core ML is optimized for on-device performance, which minimizes memory footprint
    and power consumption. Running strictly on the device ensures the privacy of user
    data and guarantees that our app remains functional and responsive when a network
    connection is unavailable.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: Core ML针对设备上的性能进行了优化，这最小化了内存占用和功耗。严格在设备上运行确保了用户数据的隐私，并保证在网络连接不可用时，我们的应用程序仍然功能齐全且响应迅速。
- en: 'Core ML is the foundation for domain-specific frameworks and functionality.
    Core ML supports **Vision** for image analysis, Foundation for **natural language
    processing**, and **G****ameplaykit** for evaluating learned decision trees. **Core
    ML** itself builds on top of low-level primitives such as **Accelerate **and **BNNS**,
    as well as **Metal Performance Shaders**:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: Core ML是特定领域框架和功能的基础。Core ML支持**Vision**进行图像分析、**Foundation**进行**自然语言处理**，以及**Gameplaykit**评估学习决策树。**Core
    ML**本身建立在低级原语如**Accelerate**和**BNNS**以及**Metal Performance Shaders**之上：
- en: '![](img/04f6501e-e6bf-4614-9a2c-e887484d1c7d.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/04f6501e-e6bf-4614-9a2c-e887484d1c7d.png)'
- en: 'An iOS developer who is going to write ML programs using Core ML needs to be
    aware of the following fundamental steps:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 准备使用Core ML编写ML程序的iOS开发者需要了解以下基本步骤：
- en: Create the model outside of iOS. This can be done using scikit-learn, TensorFlow,
    or in any other way with which the developer is comfortable. Create the machine
    learning model file. For creating the machine learning model file, they need to
    be aware of the four key phases of machine learning already discussed.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在iOS之外创建模型。这可以通过scikit-learn、TensorFlow或开发者感到舒适的任何其他方式完成。创建机器学习模型文件。为了创建机器学习模型文件，他们需要了解之前讨论过的机器学习的四个关键阶段。
- en: Once the model is built, tested, and ready for use, this model needs to be converted
    to a format that is compatible with Core ML. Core ML tools are available that
    actually help to convert the model file created using any tool to a model file
    that is in a format as mandated by Core ML (`.mlmodel` file format).
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦模型构建、测试并准备好使用，就需要将该模型转换为与Core ML兼容的格式。Core ML工具实际上可以帮助将使用任何工具创建的模型文件转换为Core
    ML要求的格式（`.mlmodel`文件格式）。
- en: Once the Core ML specific model file is created, the same can be imported into
    the iOS program and the Core ML-provided APIs can be used to interact with the
    model file to extract the required information as may be required by the iOS application,
    basically importing the `.mlmodel` file into the `resources` folder of the Xcode
    project.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦创建了Core ML特定的模型文件，就可以将其导入iOS程序中，并使用Core ML提供的API与模型文件交互，以提取iOS应用程序可能需要的信息，基本上是将`.mlmodel`文件导入Xcode项目的`resources`文件夹中。
- en: Core ML's biggest advantage is that it is extremely simple to use. Just a few
    lines of code can help to integrate a complete ML model. Core ML can only help
    to integrate pretrainedML models into an application. No model training is possible.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: Core ML的最大优势是它极其简单易用。只需几行代码就可以帮助集成一个完整的ML模型。Core ML只能帮助将预训练的ML模型集成到应用程序中。无法进行模型训练。
- en: Solving the problem using regression in Core ML
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Core ML中的回归解决问题
- en: This section will go through the details of creating a regression model and
    then using the regression model in an iOS mobile application. It will provide
    a detailed walk-through of the various steps involved in creating an iOS regression
    ML application to address the problem defined.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将详细介绍创建回归模型和使用iOS移动应用程序中的回归模型。它将提供创建iOS回归ML应用程序以解决定义的问题所涉及的各个步骤的详细说明。
- en: Technical requirements
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The following software needs to be installed on the developer machine:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 需要在开发者机器上安装以下软件：
- en: Python
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python
- en: Xcode in a Mac environment
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Mac环境下的Xcode
- en: The exercise programs for this chapter can be downloaded from our GitHub repository
    at [https://github.com/PacktPublishing/Machine-Learning-for-Mobile/tree/master/housing%20price%20prediction](https://github.com/PacktPublishing/Machine-Learning-for-Mobile/tree/master/housing%20price%20prediction).
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的练习程序可以从我们的GitHub仓库下载，地址为[https://github.com/PacktPublishing/Machine-Learning-for-Mobile/tree/master/housing%20price%20prediction](https://github.com/PacktPublishing/Machine-Learning-for-Mobile/tree/master/housing%20price%20prediction)。
- en: 'In the following program, we are going to use `pandas`, `numpy`, and `scikit-learn`
    to create the model. So, install these packages from the `pip` package manager
    using the following command from the Command Prompt/Terminal:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的程序中，我们将使用`pandas`、`numpy`和`scikit-learn`来创建模型。因此，请使用以下命令从命令提示符/终端使用`pip`包管理器安装这些包：
- en: '[PRE0]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In order to convert the created model to the Core ML format, we need to use
    the Core ML `scikit-learn` Python converter provided by Apple:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将创建的模型转换为Core ML格式，我们需要使用Apple提供的Core ML `scikit-learn` Python转换器：
- en: '[PRE1]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: How to create the model file using scikit-learn
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何使用scikit-learn创建模型文件
- en: This section will explain how we are going to create the linear regression model
    file using `scikit-learn` and also convert it into the `.mlmodel` file that is
    compatible with Core ML. We are going to use the Boston dataset for the model
    creation. The following is a simple Python program, which creates a simple linear
    regression model using `scikit-learn` using the Boston dataset. Then the Core
    ML tools convert it into the model file compatible with Core ML. Let's go through
    the program in detail.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将解释我们将如何使用`scikit-learn`创建线性回归模型文件，并将其转换为与Core ML兼容的`.mlmodel`文件。我们将使用波士顿数据集来创建模型。以下是一个简单的Python程序，它使用`scikit-learn`和波士顿数据集创建了一个简单的线性回归模型。然后，Core
    ML工具将其转换为与Core ML兼容的模型文件。让我们详细地过一遍这个程序。
- en: 'First, we need to import the required packages needed for the program:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要导入程序所需的所需包：
- en: '[PRE2]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The preceding lines import the NumPy package. NumPy is the fundamental package
    for scientific computing with Python. It contains a powerful N-dimensional array
    object. This `numpy` array will be used in this program for storing the dataset,
    which has 14 dimensions:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的行导入NumPy包。NumPy是Python科学计算的基础包。它包含一个强大的N维数组对象。这个`numpy`数组将在这个程序中用于存储具有14个维度的数据集：
- en: '[PRE3]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The preceding line imports the `pandas` package, an open source, BSD-licensed
    library providing high-performance, easy-to-use data structures and data analysis
    tools for the Python programming language. Using pandas, we can create a data
    frame. You can assume a `pandas` data frame as an Excel spreadsheet in which every
    sheet has headings and data:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的行导入`pandas`包，这是一个开源的BSD许可库，为Python编程语言提供高性能、易于使用的数据结构和数据分析工具。使用pandas，我们可以创建一个数据框。你可以假设一个`pandas`数据框就像一个Excel电子表格，其中每个工作表都有标题和数据：
- en: '[PRE4]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The preceding lines import the Core ML Tools conversion package for the linear
    regression model that we have used in this program. Core ML Tools is a Python
    package for creating, examining, and testing models in the `.mlmodel` format.
    In particular, it can be used to do the following:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的行导入了我们在这个程序中使用的线性回归模型的Core ML Tools转换包。Core ML Tools是一个用于创建、检查和测试`.mlmodel`格式模型的Python包。特别是，它可以用于以下操作：
- en: Convert existing models to the `.mlmodel` format from popular machine learning
    tools including `Keras`, `Caffe`, `scikit-learn`, `libsvm`, and `XGBoost`
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将现有模型从流行的机器学习工具（包括`Keras`、`Caffe`、`scikit-learn`、`libsvm`和`XGBoost`）转换为`.mlmodel`格式
- en: Express models in `.mlmodel` format through a simple API
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过简单的API以`.mlmodel`格式表达模型
- en: 'Make predictions with an `.mlmodel` (on select platforms for testing purposes):'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`.mlmodel`进行预测（在选定平台用于测试目的）：
- en: '[PRE5]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The preceding lines import the `sklearn` packages. Data sets are used to import
    built-in datasets in the `sklearn` package. In this program, we are using the
    Boston housing price dataset that was explained in the previous section. The `linear_model`
    package is used to get access to the linear regression function, and the metrics
    package is used to calculate the testing metrics of our model, such as the mean
    squared error:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 前一行导入`sklearn`包。数据集用于导入`sklearn`包中的内置数据集。在这个程序中，我们使用的是在上一节中解释的波士顿房价数据集。`linear_model`包用于访问线性回归函数，而`metrics`包用于计算我们模型的测试指标，如均方误差：
- en: '[PRE6]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The preceding line loads the Boston dataset from the `sklearn` datasets package:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 前一行是从`sklearn`数据集包中加载波士顿数据集：
- en: '[PRE7]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now, from the entire dataset, we need to extract the data:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，从整个数据集中，我们需要提取数据：
- en: '[PRE8]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Get the column names, that is, the headings for that data:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 获取列名，即数据的标题：
- en: '[PRE9]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now, let''s define the target column that we want to predict. The column defined
    as the target will be the one that will be predicted:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们定义我们想要预测的目标列。定义为目标的列将是预测的那个列：
- en: '[PRE10]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Once we define the target column, we will remove the data from the target column,
    so that it becomes `x`:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们定义了目标列，我们将从目标列中删除数据，使其变为`x`：
- en: '[PRE11]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Since we defined price as the target column, `y` is the price column in the
    dataset''s data:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们定义价格为目标列，`y`是数据集中的价格列：
- en: '[PRE12]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We then split the data into training and test data as per the 70/30 rule:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们根据70/30的规则将数据分为训练数据和测试数据：
- en: '[PRE13]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Once we have the training and test data, we can initiate a linear regression
    object:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们有了训练数据和测试数据，我们就可以初始化一个线性回归对象：
- en: '[PRE14]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'With the linear regression object that has been initialized, we just have to
    feed the training and the test data into the regression model:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 使用初始化的线性回归对象，我们只需将训练数据和测试数据输入到回归模型中：
- en: '[PRE15]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The preceding line predicts the target:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 前一行预测了目标：
- en: '[PRE16]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The preceding lines will calculate the mean squared error in our fitted model
    and predicted results.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 前一行将计算拟合模型和预测结果中的均方误差。
- en: Because a regression predictive model predicts a quantity, the skill of the
    model must be reported as an error in those predictions.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 由于回归预测模型预测一个数量，因此模型的技能必须以那些预测中的误差来报告。
- en: There are many ways to estimate the skill of a regression predictive model,
    but the most common is to calculate the **root mean squared error** (**RMSE**).
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 评估回归预测模型技能的方法有很多，但最常见的是计算**均方根误差**（**RMSE**）。
- en: 'For example, if a regression predictive model made two predictions, one of
    *1.5* where the expected value is *1.0* and another of 3.3 and the expected value
    is *3.0*, then the *RMSE* would be as follows:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果一个回归预测模型做出了两个预测，一个是*1.5*（预期值为*1.0*），另一个是3.3（预期值为*3.0*），那么*RMSE*将如下所示：
- en: '| 1 | *RMSE = sqrt(average(error^2))* |'
  id: totrans-131
  prefs: []
  type: TYPE_TB
  zh: '| 1 | *RMSE = sqrt(average(error^2))* |'
- en: '| 2 | *RMSE = sqrt(((1.0 - 1.5)^2 + (3.0 - 3.3)^2) / 2)* |'
  id: totrans-132
  prefs: []
  type: TYPE_TB
  zh: '| 2 | *RMSE = sqrt(((1.0 - 1.5)^2 + (3.0 - 3.3)^2) / 2)* |'
- en: '| 3 | *RMSE = sqrt((0.25 + 0.09) / 2)* |'
  id: totrans-133
  prefs: []
  type: TYPE_TB
  zh: '| 3 | *RMSE = sqrt((0.25 + 0.09) / 2)* |'
- en: '| 4 | *RMSE = sqrt(0.17)* |'
  id: totrans-134
  prefs: []
  type: TYPE_TB
  zh: '| 4 | *RMSE = sqrt(0.17)* |'
- en: '| 5 | *RMSE = 0.412* |'
  id: totrans-135
  prefs: []
  type: TYPE_TB
  zh: '| 5 | *RMSE = 0.412* |'
- en: 'A benefit of *RMSE* is that the units of the error score are in the same units
    as the predicted value:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '*RMSE*的一个好处是误差得分的单位与预测值相同：'
- en: '[PRE17]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'In the preceding line, we are converting the fitted model to the Core ML format.
    Basically, this is the line where the `.mlmodel` file is created. And we are also
    specifying the input and output column names:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一行中，我们将拟合模型转换为Core ML格式。基本上，这是创建`.mlmodel`文件的行。我们还在指定输入和输出列名：
- en: '[PRE18]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: In the preceding line, we are saving the model to the disk. This can later be
    used in our iOS program.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一行中，我们将模型保存到磁盘。这可以在我们的iOS程序中稍后使用。
- en: Running and testing the model
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行和测试模型
- en: 'When the model created by `scikit-learn` was executed and tested independently
    before converting it into the Core ML format, the following variance and mean
    square error were found:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 当`scikit-learn`创建的模型在转换为Core ML格式之前独立执行和测试时，发现了以下方差和均方误差：
- en: The mean square error for the prepared model was `30.703232`
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 准备好的模型的均方误差为 `30.703232`
- en: The variance score was `0.68`
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 方差分数为 `0.68`
- en: The process finished with exit code `0`
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 进程以退出代码 `0` 完成
- en: 'The following graph gives an idea of the predicted values versus the actual
    values:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表展示了预测值与实际值之间的关系：
- en: '![](img/2d37875f-7070-4c8b-805f-f43c360f59a9.png)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2d37875f-7070-4c8b-805f-f43c360f59a9.png)'
- en: Importing the model into the iOS project
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将模型导入 iOS 项目
- en: 'The following is the project structure of the Xcode project where the `.mlmodel`
    file is imported and used for prediction:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在 Xcode 项目中导入并用于预测的 `.mlmodel` 文件的工程结构：
- en: '![](img/e388c71b-ab13-4629-a3dc-a3e8e67ffb0f.png)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e388c71b-ab13-4629-a3dc-a3e8e67ffb0f.png)'
- en: The `ViewCcontroller.swift` file is where the model file created is used and
    the housing prediction is carried out in a mobile application.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '`ViewCcontroller.swift` 文件是使用创建的模型文件的地方，并在移动应用程序中执行房价预测。'
- en: The `housePricer.mlmodel` file is the model file that was created using `scikit-learn`
    and converted into the ML model file using the Core ML converter tools. This file
    is included in the `resources` folder of the iOS Xcode project.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '`housePricer.mlmodel` 文件是使用 `scikit-learn` 创建并使用 Core ML 转换工具转换为 ML 模型文件的模型文件。此文件包含在
    iOS Xcode 项目的 `resources` 文件夹中。'
- en: Writing the iOS application
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写 iOS 应用程序
- en: 'This section provides the details of the `Swift` code that uses the model in
    the `.mlmodel` format and does the housing price prediction:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 本节提供了使用 `.mlmodel` 格式的模型进行房价预测的 `Swift` 代码的详细信息：
- en: '[PRE19]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'This line is to initialize the model class that we have imported into the project.
    The following lines define outlets/variables to the text fields to interact with
    them:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 这一行是为了初始化我们已导入项目的模型类。以下行定义了与文本字段交互的出口/变量：
- en: '[PRE20]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The preceding function is added as an `onchange` listener to all the preceding
    text fields. In this, we are using the model object we have created previously
    and predicting the price for the given values in the text fields.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的功能被添加为所有之前文本字段的 `onchange` 监听器。在这里，我们使用之前创建的模型对象，并预测文本字段中给定值的房价。
- en: Running the iOS application
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行 iOS 应用程序
- en: 'The Xcode project created was executed in the simulator and the following is
    the sample we got:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 创建的 Xcode 项目在模拟器中执行，以下是我们得到的样本：
- en: '![](img/d86fa06c-912e-42ca-aa48-9c9a51313aa1.png)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d86fa06c-912e-42ca-aa48-9c9a51313aa1.png)'
- en: Further reading
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: We can get more insight into Core ML and the services it offers by going to
    its official website at [https://developer.apple.com/documentation/coreml](https://developer.apple.com/documentation/coreml).
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 通过访问其官方网站 [https://developer.apple.com/documentation/coreml](https://developer.apple.com/documentation/coreml)，我们可以更深入地了解
    Core ML 和它提供的服务。
- en: Summary
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'In this chapter, we covered the following topics:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们涵盖了以下主题：
- en: '**Linear regression**: Understanding the algorithm and implementing it for
    the Boston housing dataset using an Excel sheet.'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**线性回归**：理解算法并在波士顿房价数据集上使用电子表格实现它。'
- en: '**Core ML**: We went through the high-level details of Core ML and the various
    features it offers.'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Core ML**：我们探讨了 Core ML 的高级细节以及它提供的各种功能。'
- en: '**A sample application implemented for linear regression using Core ML**: We
    took the Boston housing dataset and implemented the linear regression model using
    Core ML for an iOS mobile application and viewed the results in a mobile application.'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用 Core ML 实现的线性回归示例应用**：我们使用了波士顿房价数据集，并使用 Core ML 在 iOS 移动应用程序中实现了线性回归模型，并在移动应用程序中查看结果。'
