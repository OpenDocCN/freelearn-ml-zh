- en: <st c="0">6</st>
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="2">Extracting Features from Date and Time Variables</st>
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="50">Date and time variables contain information about dates, times, or
    both, and in programming, we refer to them collectively as</st> `<st c="177">datetime</st>`
    <st c="185">features.</st> <st c="196">Date of birth, the time of an event, and
    the date and time of the last payment are examples of</st> `<st c="291">datetime</st>`
    <st c="299">variables.</st>
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: <st c="310">Because of their nature,</st> `<st c="336">datetime</st>` <st c="344">features
    typically exhibit high cardinality.</st> <st c="390">This means that they contain
    a huge number of unique values, each corresponding to a specific date and/or time
    combination.</st> <st c="514">We don’t normally use</st> `<st c="536">datetime</st>`
    <st c="544">variables for machine learning models in their raw format.</st> <st
    c="604">Instead, we enrich the dataset by extracting multiple features from these
    variables.</st> <st c="689">These new features will typically have reduced cardinality,
    and allow us to capture meaningful information, such as trends, seasonality, and
    important events</st> <st c="847">and tendencies.</st>
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: <st c="862">In this chapter, we will explore how to extract features from dates
    and time by utilizing the</st> `<st c="957">pandas</st>` `<st c="963">dt</st>`
    <st c="966">module, and then automate this procedure</st> <st c="1008">with</st>
    `<st c="1013">feature-engine</st>`<st c="1027">.</st>
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1028">This chapter will cover the</st> <st c="1057">following recipes:</st>
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1075">Extracting features from dates</st> <st c="1107">with</st> `<st
    c="1112">pandas</st>`
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="1118">Extracting features from time</st> <st c="1149">with</st> `<st
    c="1154">pandas</st>`
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="1160">Capturing elapsed time between</st> `<st c="1192">datetime</st>`
    <st c="1200">variables</st>
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="1210">Working with time in different</st> <st c="1242">time zones</st>
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="1252">Automating</st> `<st c="1264">datetime</st>` <st c="1272">feature
    extraction</st> <st c="1292">with</st> `<st c="1297">feature-engine</st>`
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="1311">Technical requirements</st>
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="1334">In this chapter, we will use the</st> `<st c="1368">pandas</st>`<st
    c="1374">,</st> `<st c="1376">numpy</st>`<st c="1381">, and</st> `<st c="1387">feature-engine</st>`
    <st c="1401">Python libraries.</st>
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1419">Extracting features from dates with pandas</st>
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="1462">The</st> <st c="1467">values of</st> `<st c="1477">datetime</st>`
    <st c="1485">variables can be dates, time, or</st> <st c="1519">both.</st> <st
    c="1525">We’ll begin by focusing on those variables that</st> <st c="1572">contain
    dates.</st> <st c="1588">We rarely use raw dat</st><st c="1609">es with machine
    learning algorithms.</st> <st c="1647">Instead, we extract simpler features, such
    as the year, month, or day of the week, that allow us to capture insights such
    as seasonality, periodicity,</st> <st c="1798">and trends.</st>
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1809">The</st> `<st c="1814">pandas</st>` <st c="1820">Python library
    is great for working with date and time.</st> <st c="1877">Utilizing the</st>
    `<st c="1891">pandas</st>` `<st c="1897">dt</st>` <st c="1900">module, we can
    access the</st> `<st c="1927">datetime</st>` <st c="1935">properties of a</st>
    `<st c="1952">pandas</st>` <st c="1958">Series to extract many features.</st>
    <st c="1992">However, to leverage this functionality, the variables need to be
    cast into a data type that supports these operations, such as</st> `<st c="2120">datetime</st>`
    <st c="2128">or</st> `<st c="2132">timedelta</st>`<st c="2141">.</st>
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '`<st c="1809">The</st>` `<st c="1814">pandas</st>` `<st c="1820">Python库非常适合处理日期和时间。</st>`
    `<st c="1877">利用</st>` `<st c="1891">pandas</st>` `<st c="1897">dt</st>` `<st
    c="1900">模块，我们可以访问</st>` `<st c="1927">datetime</st>` `<st c="1935">属性，从而提取许多特征。</st>`
    `<st c="1992">然而，为了利用此功能，变量需要转换为支持这些操作的数据类型，例如</st>` `<st c="2120">datetime</st>`
    `<st c="2128">或</st>` `<st c="2132">timedelta</st>` `<st c="2141">.</st>`'
- en: <st c="2142">Note</st>
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '`<st c="2142">注意</st>`'
- en: <st c="2147">The</st> `<st c="2152">datetime</st>` <st c="2160">variables can
    be cast as objects, particularly when we load the data from a CSV file.</st> <st
    c="2247">To extract the date and time features that we will discuss throughout
    this chapter, it is necessary to recast the variables</st> <st c="2371">as</st>
    `<st c="2374">datetime</st>`<st c="2382">.</st>
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '`<st c="2147">The</st>` `<st c="2152">datetime</st>` `<st c="2160">variables
    can be cast as objects, particularly when we load the data from a CSV file.</st>`
    `<st c="2247">为了提取本章中我们将讨论的日期和时间特征，有必要将变量重新转换为</st>` `<st c="2374">datetime</st>`
    `<st c="2382">.</st>`'
- en: <st c="2383">In this recipe, we will learn how to extract features from dates
    by</st> <st c="2452">utilizing</st> `<st c="2462">panda</st><st c="2467">s</st>`<st
    c="2469">.</st>
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将学习如何通过利用 `<st c="2462">panda</st><st c="2467">s</st>` `<st c="2469">.</st>`
    从日期中提取特征。
- en: <st c="2470">Getting ready</st>
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`<st c="2470">准备就绪</st>`'
- en: <st c="2484">The following are some of the features that we can extract from
    the</st> `<st c="2553">date</st>` <st c="2557">part of the</st> `<st c="2570">datetime</st>`
    <st c="2578">variable off the shelf</st> <st c="2602">using</st> `<st c="2608">pandas</st>`<st
    c="2614">:</st>
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`<st c="2484">以下是一些我们可以从</st>` `<st c="2553">date</st>` `<st c="2557">部分</st>`
    `<st c="2570">datetime</st>` `<st c="2578">变量</st>` `<st c="2602">使用</st>` `<st
    c="2608">pandas</st>` `<st c="2614">直接提取的特征</st>`:'
- en: '`<st c="2616">pandas.Series.dt.year</st>`'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="2616">pandas.Series.dt.year</st>`'
- en: '`<st c="2637">pandas.Series.dt.quarter</st>`'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="2637">pandas.Series.dt.quarter</st>`'
- en: '`<st c="2662">pandas.Series.dt.month</st>`'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="2662">pandas.Series.dt.month</st>`'
- en: '`<st c="2685">pandas.Series.dt.isocalendar().week</st>`'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="2685">pandas.Series.dt.isocalendar().week</st>`'
- en: '`<st c="2721">pandas.Series.dt.day</st>`'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="2721">pandas.Series.dt.day</st>`'
- en: '`<st c="2742">pandas.Series.dt.day_of_week</st>`'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="2742">pandas.Series.dt.day_of_week</st>`'
- en: '`<st c="2771">pandas.Series.dt.weekday</st>`'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="2771">pandas.Series.dt.weekday</st>`'
- en: '`<st c="2796">pandas.Series.dt.dayofyear</st>`'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="2796">pandas.Series.dt.dayofyear</st>`'
- en: '`<st c="2823">pandas.Series.dt.day_of_year</st>`'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="2823">pandas.Series.dt.day_of_year</st>`'
- en: <st c="2852">We can</st> <st c="2860">use the features we’ve obtained with</st>
    `<st c="2897">pandas</st>` <st c="2903">to</st> <st c="2906">create even more
    features, such as the semester or</st> <st c="2958">whether it is a weekend.</st>
    <st c="2983">We will learn how to do this in the</st> <st c="3019">next sec</st><st
    c="3027">tion.</st>
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`<st c="2852">我们可以</st>` `<st c="2860">使用我们使用</st>` `<st c="2897">pandas</st>`
    `<st c="2903">获得的特征</st>` `<st c="2906">创建更多特征，例如学期或</st>` `<st c="2958">是否为周末。</st>`
    `<st c="2983">我们将在下一节中学习如何做到这一点。</st>`'
- en: <st c="3033">How to do it...</st>
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`<st c="3033">How to do it...</st>`'
- en: <st c="3049">To pr</st><st c="3055">oceed with the recipe, let’s i</st><st c="3086">mport</st>
    `<st c="3093">pandas</st>` <st c="3099">and</st> `<st c="3104">numpy</st>`<st
    c="3109">, and create a</st> <st c="3124">sample DataFrame:</st>
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`<st c="3049">为了继续这个菜谱，让我们导入</st>` `<st c="3093">pandas</st>` `<st c="3099">和</st>`
    `<st c="3104">numpy</st>` `<st c="3109">，并创建一个</st>` `<st c="3124">样本DataFrame</st>`
    `<st c="3374">:</st>`'
- en: <st c="3141">Let’s import</st> <st c="3155">the libraries:</st>
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`<st c="3141">Let’s import</st>` `<st c="3155">the libraries:</st>`'
- en: '[PRE0]'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: <st c="3208">We’ll start by creating 20</st> `<st c="3236">datetime</st>` <st
    c="3244">values beginning from</st> `<st c="3267">2024-05-17</st>` <st c="3277">at
    midnight and followed by increments of 1 day.</st> <st c="3327">Then, we’ll capture
    those values in a</st> `<st c="3365">DataFrame</st>` <st c="3374">instance and
    display the top</st> <st c="3404">five rows:</st>
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`<st c="3208">我们将从创建20个</st>` `<st c="3236">datetime</st>` `<st c="3244">值开始，从</st>`
    `<st c="3267">2024-05-17</st>` `<st c="3277">午夜开始，然后以1天的增量递增。</st>` `<st c="3327">然后，我们将这些值捕获在一个</st>`
    `<st c="3365">DataFrame</st>` `<st c="3374">实例中，并显示前五行：</st>`'
- en: '[PRE1]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: <st c="3520">In the following output, we see the variable containing dates that
    we created in</st> *<st c="3602">Ste</st><st c="3605">p 2</st>*<st c="3609">:</st>
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在以下输出中，我们看到我们在 *<st c="3602">Step</st><st c="3605"> 2</st>*<st c="3609"> 中创建的包含日期的变量：<st
    c="3520">：</st>
- en: '![Figure 6.1 – Top rows of a DataFrame with a datetime variable containing
    only dates](img/B22396_06_1.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![Figure 6.1 – 仅包含日期的 datetime 变量的 DataFrame 的顶部行](img/B22396_06_1.jpg)'
- en: <st c="3680">Figure 6.1 – Top rows of a DataFrame with a datetime variable containing
    only dates</st>
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="3680">图 6.1 – 仅包含日期的 datetime 变量的 DataFrame 的顶部行</st>
- en: <st c="3763">Note</st>
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="3763">注意</st>
- en: <st c="3768">We can check the data format of the variable by executing</st>
    `<st c="3827">data["date"].dtypes</st>`<st c="3846">. If the variable is cast
    as an object, we can convert it into</st> `<st c="3909">datetime</st>` <st c="3917">format
    by executing</st> `<st c="3938">data["date_dt"] =</st>` `<st c="3956">pd.to_datetime(data["date"])</st>`<st
    c="3984">.</st>
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过执行 `<st c="3768">data["date"].dtypes</st>` 来检查变量的数据格式。如果变量被转换为对象，我们可以通过执行
    `<st c="3938">data["date_dt"] =</st>` `<st c="3956">pd.to_datetime(data["date"])</st>`
    `<st c="3984">.</st>` 将其转换为 `<st c="3909">datetime</st>` 格式。
- en: <st c="3985">L</st><st c="3987">et’s</st> <st c="3991">extract the year pa</st><st
    c="4011">rt of the date in a</st> <st c="4032">new column and display the top
    five rows of</st> <st c="4075">the</st> <st c="4080">resulting DataFrame:</st>
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="3985">L</st><st c="3987">et’s</st> `<st c="3991">extract the year pa</st>`
    `<st c="4011">rt of the date in a</st> `<st c="4032">new column and display the
    top five rows of</st>` `<st c="4075">the</st>` `<st c="4080">resulting DataFrame:</st>
- en: '[PRE2]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: <st c="4148">We see the new</st> `<st c="4164">year</st>` <st c="4168">variable
    in the</st> <st c="4185">following o</st><st c="4196">utput:</st>
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="4148">我们在以下输出中看到新的</st> `<st c="4164">year</st>` `<st c="4168">变量：</st>
- en: '![Figure 6.2 – First five rows of the DataFrame with the year variable extracted
    from the date](img/B22396_06_2.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![Figure 6.2 – 从日期中提取年份变量的 DataFrame 的前五行](img/B22396_06_2.jpg)'
- en: <st c="4303">Figure 6.2 – First five rows of the DataFrame with the year variable
    extracted from the date</st>
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="4303">图 6.2 – 从日期中提取年份变量的 DataFrame 的前五行</st>
- en: <st c="4395">Let’s extract the quarter of the year out of the date into a new
    column and display the top</st> <st c="4488">five rows:</st>
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们从日期中提取年份的四分之一到一个新列，并显示前五行：
- en: '[PRE3]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: <st c="4573">We see the new</st> `<st c="4589">quarter</st>` <st c="4596">variable
    in the</st> <st c="4613">following ou</st><st c="4625">tput:</st>
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="4573">我们在以下输出中看到新的</st> `<st c="4589">quarter</st>` `<st c="4596">变量：</st>
- en: '![Figure 6.3 – The first five rows of a DataFrame with the quarter variable
    extracted from the date](img/B22396_06_3.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![Figure 6.3 – 从日期中提取四分之一变量的 DataFrame 的前五行](img/B22396_06_3.jpg)'
- en: <st c="4722">Figure 6.3 – The first five rows of a DataFrame with the quarter
    variable extracted from the date</st>
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="4722">图 6.3 – 从日期中提取四分之一变量的 DataFrame 的前五行</st>
- en: <st c="4819">With</st> `<st c="4825">quarte</st><st c="4831">r</st>`<st c="4833">,
    we</st> <st c="4838">c</st><st c="4839">an</st> <st c="4841">now</st> <st c="4846">create
    the</st> `<st c="4857">semester</st>` <st c="4865">feature:</st>
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过 `<st c="4825">quarte</st>` `<st c="4831">r</st>` `<st c="4833">`，我们现在可以创建
    `<st c="4857">semester</st>` `<st c="4865">特征：</st>
- en: '[PRE4]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: <st c="4929">Note</st>
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="4929">注意</st>
- en: <st c="4934">You can explore the distinct values of the new variables utilizing</st>
    `<st c="5002">pandas</st>`<st c="5008">’</st> `<st c="5011">unique()</st>`<st
    c="5019">, for example, by executing</st> `<st c="5047">df["quarter"].unique()</st>`
    <st c="5069">or</st> `<st c="5073">df["semester"].unique()</st>`<st c="5096">.</st>
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用 `<st c="5002">pandas</st>` `<st c="5008">’</st>` `<st c="5011">unique()</st>`
    `<st c="5019">`，例如，通过执行 `<st c="5047">df["quarter"].unique()</st>` `<st c="5069">`
    或 `<st c="5073">df["semester"].unique()</st>` `<st c="5096">.</st>` 来探索新变量的不同值。
- en: <st c="5097">Let’s extract the</st> `<st c="5116">month</st>` <st c="5121">part
    of the date in a new column and display the top five rows of</st> <st c="5188">the
    DataFrame:</st>
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="5097">让我们从日期中提取</st> `<st c="5116">month</st>` `<st c="5121">部分到一个新列，并显示
    DataFrame 的前五行：</st>
- en: '[PRE5]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: <st c="5271">We</st> <st c="5275">see the</st> <st c="5282">new</st> `<st c="5287">month</st>`
    <st c="5292">variable</st> <st c="5301">in the</st> <st c="5309">followi</st><st
    c="5316">ng output:</st>
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="5271">我们在以下输出中看到新的</st> `<st c="5287">month</st>` `<st c="5292">变量：</st>
- en: "![Figure 6.4 – The first five rows of a DataFrame with the new month vari\uFEFF\
    able](img/B22396_06_4.jpg)"
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![Figure 6.4 – 包含新月份变量的 DataFrame 的前五行](img/B22396_06_4.jpg)'
- en: <st c="5411">Figure 6.4 – The first five rows of a DataFrame with the new month
    vari</st><st c="5482">able</st>
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: <st c="5487">Let’s extract the week number (a year has 52 weeks) from</st> <st
    c="5545">the date:</st>
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: <st c="5634">We see the</st> `<st c="5646">week</st>` <st c="5650">variable
    in the</st> <st c="5667">followin</st><st c="5675">g output:</st>
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 6.5 – The first five rows of a DataFrame with the new week variable](img/B22396_06_5.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
- en: <st c="5773">Figure 6.5 – The first five rows of a DataFrame with the new week
    variable</st>
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: <st c="5847">Let’s extract the day of the month, which can take values between</st>
    `<st c="5914">1</st>` <st c="5915">and</st> `<st c="5920">31</st>`<st c="5922">,
    into a</st> <st c="5931">new column:</st>
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: <st c="6011">We</st> <st c="6015">see the</st> `<st c="6023">day_mo</st>` <st
    c="6029">variable</st> <st c="6038">in the</st> <st c="6046">follow</st><st c="6052">ing
    output:</st>
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: "![Figure 6.6 – The top rows of a DataFrame with the new variable capturing\
    \ the day of the \uFEFFmonth](img/B22396_06_6.jpg)"
  id: totrans-69
  prefs: []
  type: TYPE_IMG
- en: <st c="6154">Figure 6.6 – The top rows of a DataFrame with the new variable
    capturing the day of the</st> <st c="6242">month</st>
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: <st c="6247">Let’s extract the day of the</st> <st c="6276">week, with values
    between</st> `<st c="6303">0</st>` <st c="6304">and</st> `<st c="6309">6</st>`
    <st c="6310">(from Monday to Sunday), in a new column, then display the</st> <st
    c="6370">top rows:</st>
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: <st c="6468">We see the</st> `<st c="6480">day_week</st>` <st c="6488">variable
    in the</st> <st c="6505">followi</st><st c="6512">ng output:</st>
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 6.7 – The top rows of a DataFrame with a new variable representing
    days of a week](img/B22396_06_7.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
- en: <st c="6633">Figure 6.7 – The top rows of a DataFrame with a new variable representing
    days of a week</st>
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: <st c="6721">With the variable from</st> *<st c="6745">Step 9</st>*<st c="6751">,
    we can create a binary variable that indicates whether it was</st> <st c="6815">a
    weekend:</st>
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: <st c="6939">We</st> <st c="6943">see</st> <st c="6946">the new</st> `<st c="6955">is_weekend</st>`
    <st c="6965">variable</st> <st c="6975">in the</st> <st c="6982">follo</st><st
    c="6987">wing output:</st>
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 6.8 – The first five rows of a DataFrame with the new is_weekend variable](img/B22396_06_8.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
- en: <st c="7101">Figure 6.8 – The first five rows of a DataFrame with the new is_weekend
    variable</st>
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: <st c="7181">Note</st>
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: <st c="7186">We can automate the extraction of all these features by using</st>
    `<st c="7249">feature-engine</st>`<st c="7263">. Check out the</st> *<st c="7279">Automating
    datetime feature extraction with feature-engine</st>* <st c="7337">recipe in this
    chapter for</st> <st c="7365">more details.</st>
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: <st c="7378">With t</st><st c="7385">hat, we have extracted many</st> <st c="7414">new
    features from the date part of a</st> `<st c="7451">datetime</st>` <st c="7459">variable
    using</st> `<st c="7475">pandas</st>`<st c="7481">. These features are useful
    for data analysis, visualization, and</st> <st c="7547">predictiv</st><st c="7556">e
    modelling.</st>
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="7378">有了这些，我们就使用</st> `<st c="7475">pandas</st>`<st c="7481">从</st> `<st
    c="7451">datetime</st>` <st c="7459">变量的日期部分提取了许多</st> <st c="7414">新特征。</st>
    这些特征对于数据分析、可视化和</st> `<st c="7547">预测</st><st c="7556">建模</st>`非常有用。
- en: <st c="7569">How it works...</st>
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="7569">它是如何工作的...</st>
- en: <st c="7585">In this recipe, we</st> <st c="7604">extracted many date-related
    features from a</st> `<st c="7649">datetime</st>` <st c="7657">variable</st> <st
    c="7666">by using the</st> `<st c="7680">dt</st>` <st c="7682">module from</st>
    `<st c="7695">pandas</st>`<st c="7701">. First, we</st> <st c="7713">created a
    sample DataFrame with a variable that contained dates.</st> <st c="7778">We used</st>
    `<st c="7786">pandas</st>`<st c="7792">’</st> `<st c="7795">date_range()</st>`
    <st c="7807">to create a range of values starting from an arbitrary date and increasing
    the time by intervals of</st> `<st c="7908">1</st>` <st c="7909">day.</st> <st
    c="7915">With the</st> `<st c="7924">periods</st>` <st c="7931">argument, we indicated
    the number of values to create in the range – that is, the number of dates.</st>
    <st c="8031">With the</st> `<st c="8040">freq</st>` <st c="8044">argument, we
    indicated the size of the steps between the dates.</st> <st c="8109">We used</st>
    `<st c="8117">D</st>` <st c="8118">for days in our example.</st> <st c="8144">Finally,
    we transformed the date range into a DataFrame with</st> `<st c="8205">pandas</st>`
    `<st c="8211">DataFrame()</st>`<st c="8223">.</st>
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们<st c="7585">提取了从</st> <st c="7604">一个</st> `<st c="7649">datetime</st>`
    <st c="7657">变量</st> <st c="7666">中</st> <st c="7680">使用</st> `<st c="7682">pandas</st>`<st
    c="7701">的</st> `<st c="7680">dt</st>` <st c="7682">模块</st>提取的许多与日期相关的特征。</st>
    <st c="7713">首先，我们</st> <st c="7778">使用</st> `<st c="7786">pandas</st>`<st c="7792">的</st>
    `<st c="7795">date_range()</st>` <st c="7807">创建了一个包含日期的变量的样本 DataFrame。</st>
    <st c="7915">使用</st> `<st c="7924">periods</st>` <st c="7931">参数，我们指明了要创建的值的范围数量——即日期的数量。</st>
    <st c="8031">使用</st> `<st c="8040">freq</st>` <st c="8044">参数，我们指明了日期之间的步长大小。</st>
    <st c="8109">在我们的例子中，我们使用了</st> `<st c="8117">D</st>` <st c="8118">来表示天数。</st>
    <st c="8144">最后，我们使用</st> `<st c="8205">pandas</st>` `<st c="8211">DataFrame()</st>`<st
    c="8223">将日期范围转换为一个 DataFrame。</st>
- en: <st c="8224">To extract the different parts of a date, we used</st> `<st c="8275">pandas</st>`<st
    c="8281">’</st> `<st c="8284">dt</st>` <st c="8286">to access the</st> `<st c="8301">datetime</st>`
    <st c="8309">properties of a</st> `<st c="8326">pandas</st>` <st c="8332">Series
    and then utilized the different properties.</st> <st c="8384">We used</st> `<st
    c="8392">year</st>`<st c="8396">,</st> `<st c="8398">month</st>`<st c="8403">,
    and</st> `<st c="8409">quarter</st>` <st c="8416">to capture the year, month,
    and quarter into new columns of the DataFrame.</st> <st c="8492">To find the semester,
    we created a Boolean using NumPy’s</st> `<st c="8549">where()</st>` <st c="8556">in
    combination with the newly created</st> `<st c="8595">quarter</st>` <st c="8602">variable.</st>
    <st c="8613">NumPy’s</st> `<st c="8621">where()</st>` <st c="8628">scanned the
    values of the</st> `<st c="8655">quarter</st>` <st c="8662">variable; if they
    were smaller than</st> `<st c="8699">3</st>`<st c="8700">, it returned the value
    of</st> `<st c="8727">1</st>` <st c="8728">for the first semester; otherwise,
    it returned the value of</st> `<st c="8789">2</st>`<st c="8790">, corresponding
    to the</st> <st c="8813">second semes</st><st c="8825">ter.</st>
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="8224">为了提取日期的不同部分，我们使用了</st> `<st c="8275">pandas</st>`<st c="8281">的</st>
    `<st c="8284">dt</st>` <st c="8286">来访问一个</st> `<st c="8301">pandas</st>` <st
    c="8332">Series的</st> `<st c="8309">datetime</st>` <st c="8326">属性，然后利用了不同的属性。</st>
    <st c="8384">我们使用了</st> `<st c="8392">year</st>`<st c="8396">、</st> `<st c="8398">month</st>`<st
    c="8403">和</st> `<st c="8409">quarter</st>` <st c="8416">来将年份、月份和季度捕获到 DataFrame
    的新列中。</st> <st c="8492">为了找到学期，我们使用 NumPy 的</st> `<st c="8549">where()</st>` <st
    c="8556">结合新创建的</st> `<st c="8595">quarter</st>` <st c="8602">变量创建了一个布尔值。</st>
    <st c="8613">NumPy 的</st> `<st c="8621">where()</st>` <st c="8628">扫描了</st> `<st
    c="8655">quarter</st>` <st c="8662">变量的值；如果它们小于</st> `<st c="8699">3</st>`<st
    c="8700">，则返回</st> `<st c="8727">1</st>` <st c="8728">，对应于第一学期；否则，返回</st> `<st
    c="8789">2</st>`<st c="8790">，对应于第二学期。</st>
- en: <st c="8830">To extract</st> <st c="8841">the different</st> <st c="8855">representations
    of days and weeks, we</st> <st c="8893">used the</st> `<st c="8903">isocalender().week</st>`<st
    c="8921">,</st> `<st c="8923">day</st>`<st c="8926">, and</st> `<st c="8932">dayofweek</st>`
    <st c="8941">properties.</st> <st c="8954">With the day of the week, we went ahead</st>
    <st c="8994">and created a binary variable to indicate whether it was a weekend.</st>
    <st c="9062">We used</st> `<st c="9070">where()</st>` <st c="9077">to scan the
    day of the week, and if the value was greater than</st> `<st c="9141">4</st>`<st
    c="9142">, which corresponds to Saturday and Sunday, the function returned</st>
    `<st c="9208">True</st>` <st c="9212">and otherwise</st> `<st c="9227">False</st>`<st
    c="9232">. Finally, we cast this Boolean vector as an integer to have a binary
    variable with 1s and 0s.</st> <st c="9327">With that, we created multiple features
    from dates that we can use for data analysis and</st> <st c="9416">pre</st><st
    c="9419">dictive modelling.</st>
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="8830">为了提取</st> <st c="8841">不同</st> <st c="8855">的日和周表示，我们</st> <st
    c="8893">使用了</st> `<st c="8903">isocalender().week</st>`<st c="8921">,</st> `<st
    c="8923">day</st>`<st c="8926">, 和</st> `<st c="8932">dayofweek</st>` <st c="8941">属性。</st>
    <st c="8954">有了周几的信息，我们继续</st> <st c="8994">创建了一个二元变量来表示是否为周末。</st> <st c="9062">我们使用了</st>
    `<st c="9070">where()</st>` <st c="9077">函数来扫描周几，如果值大于</st> `<st c="9141">4</st>`<st
    c="9142">，即周六和周日，函数返回</st> `<st c="9208">True</st>` <st c="9212">，否则返回</st> `<st
    c="9227">False</st>`<st c="9232">。最后，我们将这个布尔向量转换为整数，以得到一个由1和0组成的二元变量。</st> <st
    c="9327">有了这个，我们就从日期中创建了多个特征，这些特征可以用于数据分析和</st> <st c="9416">预测建模。</st>
- en: <st c="9438">There’s more…</st>
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="9438">还有更多...</st>
- en: <st c="9452">Using</st> `<st c="9459">pandas</st>`<st c="9465">’</st> `<st c="9468">dt</st>`
    <st c="9470">module, we can</st> <st c="9485">extract many more features from
    dates out of the</st> <st c="9534">box.</st> <st c="9540">For example, we can
    extract the beginning and end of a month, quarter, or year, whether it is a leap
    year, and the number of days in a month.</st> <st c="9682">These are the functions
    that allow you to</st> <st c="9724">do so:</st>
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="9452">使用</st> `<st c="9459">pandas</st>`<st c="9465">’</st> `<st c="9468">dt</st>`
    <st c="9470">模块，我们可以</st> <st c="9485">从日期中提取更多特征，这些特征来自</st> <st c="9534">盒子。</st>
    <st c="9540">例如，我们可以提取月份、季度或年份的开始和结束，是否为闰年，以及月份中的天数。</st> <st c="9682">这些函数允许您</st>
    <st c="9724">这样做：</st>
- en: '`<st c="9730">pandas.Series.dt.is_month_start</st>`'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="9730">pandas.Series.dt.is_month_start</st>`'
- en: '`<st c="9762">pandas.Series.dt.is_month_end</st>`'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="9762">pandas.Series.dt.is_month_end</st>`'
- en: '`<st c="9792">pandas.Series.dt.is_quarter_start</st>`'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="9792">pandas.Series.dt.is_quarter_start</st>`'
- en: '`<st c="9826">pandas.Series.dt.is_quarter_end</st>`'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="9826">pandas.Series.dt.is_quarter_end</st>`'
- en: '`<st c="9858">pandas.Series.dt.is_year_start</st>`'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="9858">pandas.Series.dt.is_year_start</st>`'
- en: '`<st c="9889">pandas.Series.dt.is_year_end</st>`'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="9889">pandas.Series.dt.is_year_end</st>`'
- en: '`<st c="9918">pandas.Series.dt.is_leap_year</st>`'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="9918">pandas.Series.dt.is_leap_year</st>`'
- en: '`<st c="9948">pandas.Series.dt.days_in_month</st>`'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="9948">pandas.Series.dt.days_in_month</st>`'
- en: <st c="9979">We can also return the number of days in a specific month with</st>
    `<st c="10043">pd.dt.days_in_month</st>` <st c="10062">and the day in a year (from</st>
    `<st c="10091">1</st>` <st c="10092">to</st> `<st c="10096">365</st>`<st c="10099">)</st>
    <st c="10102">with</st> `<st c="10107">pd.dt</st><st c="10112">.dayofyear</st>`<st
    c="10122">.</st>
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="9979">我们还可以使用</st> `<st c="10043">pd.dt.days_in_month</st>` <st c="10062">来返回特定月份的天数，以及一年中的天数（从</st>
    `<st c="10091">1</st>` <st c="10092">到</st> `<st c="10096">365</st>`<st c="10099">）</st>
    <st c="10102">，使用</st> `<st c="10107">pd.dt</st><st c="10112">.dayofyear</st>`<st
    c="10122">。</st>
- en: <st c="10123">For</st> <st c="10128">more details, visit the</st> `<st c="10152">pandas</st>`<st
    c="10158">’</st> `<st c="10161">datetime</st>` <st c="10169">documentation:</st>
    [<st c="10185">https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#time-date-components</st>](https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#time-date-components)<st
    c="10277">.</st>
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="10123">有关</st> <st c="10128">更多详细信息，请访问</st> `<st c="10152">pandas</st>`<st
    c="10158">’</st> `<st c="10161">datetime</st>` <st c="10169">文档：</st> [<st c="10185">https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#time-date-components</st>](https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#time-date-components)<st
    c="10277">。</st>
- en: <st c="10278">See also</st>
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="10278">另请参阅</st>
- en: <st c="10287">To learn how to create</st> <st c="10310">different</st> `<st
    c="10321">datetime</st>` <st c="10329">ranges with</st> `<st c="10342">pandas</st>`<st
    c="10348">’</st> `<st c="10351">date_ranges()</st>`<st c="10364">,</st> <st c="10366">visit</st>
    [<st c="10372">https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#offset-aliases</st>](https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#offset-aliases)<st
    c="10458">.</st>
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="10287">要了解如何使用</st> <st c="10310">pandas</st> <st c="10348">的</st> `<st
    c="10351">date_ranges()</st>` <st c="10364">创建不同的</st> `<st c="10321">datetime</st>`
    <st c="10329">范围，请访问</st> [<st c="10372">https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#offset-aliases</st>](https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#offset-aliases)<st
    c="10458">。</st>
- en: <st c="10459">To learn more</st> <st c="10473">about</st> `<st c="10480">pandas</st>`<st
    c="10486">’</st> `<st c="10489">dt</st>`<st c="10491">,</st> <st c="10493">visit</st>
    [<st c="10499">https://pandas.pydata.org/pandas-docs/stable/reference/series.html#datetime-properties</st>](https://pandas.pydata.org/pandas-docs/stable/reference/series.html#datetime-properties)<st
    c="10585">.</st>
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="10459">要了解更多关于</st> <st c="10473">`<st c="10480">pandas</st>`<st c="10486">’</st>
    `<st c="10489">dt</st>`<st c="10491">,</st> <st c="10493">请访问</st> [<st c="10499">https://pandas.pydata.org/pandas-docs/stable/reference/series.html#datetime-properties</st>](https://pandas.pydata.org/pandas-docs/stable/reference/series.html#datetime-properties)<st
    c="10585">。</st>
- en: <st c="10586">Extracting features from time</st> <st c="10617">with pandas</st>
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="10586">使用 pandas 从时间中提取特征</st>
- en: <st c="10628">Some</st> <st c="10634">events occ</st><st c="10644">ur more often
    at certain times of the day – for</st> <st c="10692">example, fraudulent activity
    is more likely to occur</st> <st c="10745">during the night or early morning.</st>
    <st c="10781">Air pollutant concentration also changes with the time of the day,
    with peaks at rush hour when there are more vehicles on the streets.</st> <st
    c="10917">Therefore, deriving time features is extremely useful for data analysis
    and predictive modelling.</st> <st c="11015">In this recipe, we will extract different
    time parts of a</st> `<st c="11073">datetime</st>` <st c="11081">variable by u</st><st
    c="11095">tilizing</st> `<st c="11105">pandas</st>` <st c="11111">and NumPy.</st>
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="10628">一些</st> <st c="10634">事件</st><st c="10644">在一天中的特定时间发生得更频繁</st>
    – <st c="10692">例如，欺诈活动更可能在夜间或清晨发生。</st> <st c="10745">空气污染物浓度也随着一天中的时间变化，在交通高峰时段达到峰值，此时街道上有更多车辆。</st>
    <st c="10781">因此，从数据中提取时间特征对于数据分析和预测建模非常有用。</st> <st c="10917">在本教程中，我们将通过使用 <st
    c="11073">datetime</st> <st c="11081">变量并利用</st> `<st c="11095">pandas</st>` <st
    c="11105">和</st> `<st c="11111">NumPy</st>` <st c="11117">来提取不同的时间部分。</st>
- en: <st c="11122">Getting ready</st>
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="11122">准备就绪</st>
- en: <st c="11136">We can extract hours, minutes, and seconds using the following</st>
    `<st c="11200">pandas</st>`<st c="11206">’</st> `<st c="11209">datetime</st>`
    <st c="11217">properties:</st>
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="11136">我们可以使用以下</st> `<st c="11200">pandas</st>`<st c="11206">’</st>
    `<st c="11209">datetime</st>` <st c="11217">属性来提取小时、分钟和秒：</st>
- en: '`<st c="11229">pandas.Series.dt.hour</st>`'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="11229">pandas.Series.dt.hour</st>`'
- en: '`<st c="11251">pandas.Series.dt.minu</st><st c="11273">te</st>`'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="11251">pandas.Series.dt.minute</st>`'
- en: '`<st c="11276">pandas.Series.dt.second</st>`'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="11276">pandas.Series.dt.second</st>`'
- en: <st c="11300">How to do it...</st>
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="11300">如何操作...</st>
- en: <st c="11316">In this</st> <st c="11325">recipe, we’ll</st> <st c="11339">extract
    the</st> `<st c="11351">hour</st>`<st c="11355">,</st> `<st c="11357">minute</st>`<st
    c="11363">, and</st> `<st c="11369">second</st>` <st c="11375">part of a</st>
    `<st c="11386">time</st>` <st c="11390">variable.</st> <st c="11401">Let’s begin
    by importing the</st> <st c="11429">libraries and creating a</st> <st c="11455">sample
    dataset:</st>
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="11316">在本</st> <st c="11325">教程</st> <st c="11339">中，我们</st> <st c="11351">将</st>
    <st c="11355">提取</st> `<st c="11357">分钟</st>`<st c="11363">，</st> `<st c="11369">秒</st>`
    <st c="11375">部分的时间</st> `<st c="11386">变量</st>` <st c="11390">。</st> <st c="11401">让我们首先导入库并创建一个</st>
    <st c="11429">样本数据集：</st>
- en: <st c="11470">Let’s import</st> `<st c="11484">pandas</st>` <st c="11490">and</st>
    `<st c="11495">numpy</st>`<st c="11500">:</st>
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="11470">让我们导入</st> `<st c="11484">pandas</st>` <st c="11490">和</st> `<st
    c="11495">numpy</st>`<st c="11500">:</st>
- en: '[PRE10]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: <st c="11541">Let’s begin by creating 20</st> `<st c="11569">datetime</st>`
    <st c="11577">observations, start</st><st c="11597">ing on</st> `<st c="11605">2024-05-17</st>`
    <st c="11615">at midnight and followed by increments of 1 hour, 15 minutes, and
    10 seconds.</st> <st c="11694">Next,</st> <st c="11699">we’ll capture the time
    range in a DataFrame and display the top</st> <st c="11764">five rows:</st>
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们首先创建 20 个 **日期时间** 观察值，从 `<st c="11605">2024-05-17</st>` <st c="11615">午夜开始，然后以
    1 小时、15 分钟和 10 秒的增量增加。接下来，我们将时间范围捕获到 DataFrame 中并显示前五行：
- en: '[PRE11]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: <st c="11885">In the following output, we see the variable from</st> *<st c="11936">Step
    2</st>*<st c="11942">, with a</st> `<st c="11951">date</st>` <st c="11955">part
    and a</st> `<st c="11967">time</st>` <st c="11971">part, and the values increasing
    by intervals of 1 hour,</st> <st c="12027">15 minutes, and</st> <st c="12044">10
    seconds:</st>
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在以下输出中，我们可以看到**步骤 2**中的变量，它包含一个**日期**部分和一个**时间**部分，并且值以 1 小时、15 分钟和 10 秒的间隔增加：
- en: '![Figure 6.9 – The first five rows of a sample DataFrame with a datetime variable](img/B22396_06_9.jpg)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.9 – 包含日期时间变量的样本 DataFrame 的前五行](img/B22396_06_9.jpg)'
- en: <st c="12169">Figure 6.9 – The first five rows of a sample DataFrame with a
    datetime variable</st>
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.9 – 包含日期时间变量的样本 DataFrame 的前五行](img/B22396_06_9.jpg)'
- en: <st c="12248">Let’s</st> <st c="12255">extract the</st> `<st c="12267">hour</st>`<st
    c="12271">,</st> `<st c="12273">minute</st>`<st c="12279">, and</st> `<st c="12285">second</st>`
    <st c="12291">part</st> <st c="12296">and capture them into three new columns,
    then</st> <st c="12343">display the DataFrame’s top</st> <st c="12371">five rows:</st>
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们提取**小时**、**分钟**和**秒**部分，并将它们捕获到三个新的列中，然后显示 DataFrame 的前五行：
- en: '[PRE12]'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: <st c="12489">In the following output, we see the three</st> `<st c="12532">time</st>`
    <st c="12536">feature</st><st c="12544">s that we extracted in</st> *<st c="12568">Step
    3</st>*<st c="12574">:</st>
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在以下输出中，我们可以看到我们在**步骤 3**中提取的三个时间**特征**：
- en: '![Figure 6.10 – The first five rows of a DataFrame with three variables derived
    from time](img/B22396_06_10.jpg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.10 – 从时间派生出的三个变量的 DataFrame 的前五行](img/B22396_06_10.jpg)'
- en: <st c="12738">Figure 6.10 – The first five rows of a DataFrame with three variables
    derived from time</st>
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.10 – 从时间派生出的三个变量的 DataFrame 的前五行](img/B22396_06_10.jpg)'
- en: <st c="12825">Note</st>
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: <st c="12830">Remember that</st> `<st c="12845">pandas</st>`<st c="12851">’</st>
    `<st c="12854">dt</st>` <st c="12856">needs a</st> `<st c="12865">datetime</st>`
    <st c="12873">object to work.</st> <st c="12890">You can change the data type
    of an object variable into</st> `<st c="12946">datetime</st>` <st c="12954">by
    using</st> `<st c="12964">pandas</st>` `<st c="12970">to_datetime()</st>`<st c="12984">.</st>
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，`<st c="12845">pandas</st>`<st c="12851"> 的 `<st c="12854">dt</st>` 需要一个
    `<st c="12865">datetime</st>` 对象才能工作。您可以使用 `<st c="12964">pandas</st>` `<st c="12970">to_datetime()</st>`<st
    c="12984"> 将对象变量的数据类型更改为 `<st c="12946">datetime</st>`。
- en: <st c="12985">Let’s perform the same operations that we did in</st> *<st c="13035">Step
    3</st>* <st c="13041">but now in one line</st> <st c="13062">of code:</st>
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们执行与**步骤 3**中相同的操作，但现在在一行代码中完成：
- en: '[PRE13]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: <st c="13169">We see the newly created varia</st><st c="13200">bles in the</st>
    <st c="13213">following output:</st>
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在以下输出中，我们看到新创建的变量：
- en: '![Figure 6.11 – The first five rows of a DataFrame with the variables derived
    from time](img/B22396_06_11.jpg)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.11 – 从时间派生出的变量的 DataFrame 的前五行](img/B22396_06_11.jpg)'
- en: <st c="13440">Figure 6.11 – The first five rows of a DataFrame with the variables
    derived from time</st>
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.11 – 从时间派生出的变量的 DataFrame 的前五行](img/B22396_06_11.jpg)'
- en: <st c="13525">No</st><st c="13528">te</st>
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 无
- en: <st c="13531">You can inspect the unique values of the new variables with</st>
    `<st c="13592">pandas</st>`<st c="13598">’</st> `<st c="13601">unique()</st>`<st
    c="13609">, for example, by</st> <st c="13627">executing</st> `<st c="13637">df['hour'].unique()</st>`<st
    c="13656">.</st>
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用 `<st c="13592">pandas</st>`<st c="13598"> 的 `<st c="13601">unique()</st>`<st
    c="13609"> 方法检查新变量的唯一值，例如，通过执行 `<st c="13637">df['hour'].unique()</st>`<st c="13656">。
- en: <st c="13657">Finally, let’s</st> <st c="13672">create a binary variable that</st>
    <st c="13703">flags events that occurred in the morning, between</st> <st c="13753">6
    A.M.</st> <st c="13761">and</st> <st c="13765">12 P.M.:</st>
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="13657">最后，让我们</st> <st c="13672">创建一个二进制变量，该变量</st> <st c="13703">标记在早晨发生的事件，在</st>
    <st c="13753">早上6点</st> <st c="13761">和</st> <st c="13765">中午12点</st> <st c="13753">之间：</st>
- en: '[PRE14]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: <st c="13857">We see the</st> `<st c="13869">is_morning</st>` <st c="13879">va</st><st
    c="13882">riable in the</st> <st c="13897">following output:</st>
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="13857">我们在以下输出中看到了</st> `<st c="13869">is_morning</st>` <st c="13879">变量：</st>
- en: '![Figure 6.12 – The top rows of a DataFrame with the new variables derived
    from time](img/B22396_06_12.jpg)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![图6.12 – 从时间派生的新变量的DataFrame的前几行](img/B22396_06_12.jpg)'
- en: <st c="14145">Figure 6.12 – The top rows of a DataFrame with the new variables
    derived from time</st>
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="14145">图6.12 – 从时间派生的新变量的DataFrame的前几行</st>
- en: <st c="14227">With that, we extracted multiple features from the time part of
    a</st> `<st c="14294">datetime</st>` <st c="14302">variable.</st> <st c="14313">These
    features can be used for data ana</st><st c="14352">lysis and</st> <st c="14363">predictive
    modelling.</st>
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="14227">有了这个，我们从</st> `<st c="14294">datetime</st>` <st c="14302">变量的时间部分</st>
    <st c="14313">提取了多个特征。</st> <st c="14313">这些特征可用于数据分析</st><st c="14352">和</st>
    <st c="14363">预测建模。</st>
- en: <st c="14384">How it works...</st>
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="14384">它是如何工作的...</st>
- en: <st c="14400">In this recipe, we created features that capture representations
    of time.</st> <st c="14475">First, we created a sample DataFrame with a</st> `<st
    c="14519">datetime</st>` <st c="14527">variable.</st> <st c="14538">We used</st>
    `<st c="14546">pandas</st>` `<st c="14552">date_range()</st>`<st c="14565">to
    create a range of 20 values</st> <st c="14597">starting from an a</st><st c="14615">rbitrary
    date and increasing by intervals of 1 hour, 15 minutes, and 10 seconds.</st> <st
    c="14697">We used the</st> `<st c="14709">1h15min10s</st>` <st c="14719">string
    as the frequency term for the</st> `<st c="14757">freq</st>` <st c="14761">argument
    to indicate the desired increments.</st> <st c="14807">Next, we transformed the
    date range into a DataFrame with</st> `<st c="14865">pandas</st>`<st c="14871">’</st>
    `<st c="14874">DataFrame()</st>`<st c="14885">.</st>
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="14400">在这个菜谱中，我们创建了捕获时间表示的特征。</st> <st c="14475">首先，我们创建了一个包含</st> `<st
    c="14519">datetime</st>` <st c="14527">变量的样本DataFrame。</st> <st c="14538">我们使用</st>
    `<st c="14546">pandas</st>` `<st c="14552">date_range()</st>`<st c="14565">创建了一个从任意日期开始，以1小时、15分钟和10秒为间隔的20个值的范围。</st>
    <st c="14597">我们使用</st> `<st c="14615">1h15min10s</st>` <st c="14619">字符串作为</st>
    `<st c="14757">freq</st>` <st c="14761">参数的频率项，以指示所需的增量。</st> <st c="14807">接下来，我们使用</st>
    `<st c="14865">pandas</st>`<st c="14871">’</st> `<st c="14874">DataFrame()</st>`<st
    c="14885">将日期范围转换为DataFrame。</st>
- en: <st c="14886">To extract the</st> <st c="14902">different time parts, we used</st>
    `<st c="14932">pandas</st>`<st c="14938">’</st> `<st c="14941">dt</st>` <st c="14943">to</st>
    <st c="14947">access the</st> `<st c="14958">hour</st>`<st c="14962">,</st> `<st
    c="14964">minute</st>`<st c="14970">, and</st> `<st c="14976">second</st>` `<st
    c="14982">time</st>` <st c="14987">properties.</st> <st c="15000">After</st> <st
    c="15006">extracting</st> `<st c="15017">hour</st>` <st c="15021">from</st> `<st
    c="15027">time</st>`<st c="15031">, we used it to create a new feature that indicated
    whether it was morning by using NumPy’s</st> `<st c="15123">where()</st>`<st c="15130">.
    NumPy’s</st> `<st c="15140">where()</st>` <st c="15147">scanned the</st> `<st
    c="15160">hour</st>` <st c="15164">variable; if its values were smaller than 12
    and greater than 6, it assigned a value of</st> `<st c="15253">1</st>`<st c="15254">;
    otherwise, it assigned a value of</st> `<st c="15290">0</st>`<st c="15291">. With
    these operations, we added several features to the DataFrame that can be used
    for data analysis and</st> <st c="15397">to train machine</st> <st c="15415">learning
    models.</st>
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="14886">为了提取不同的时间部分，我们使用</st> `<st c="14932">pandas</st>`<st c="14938">’</st>
    `<st c="14941">dt</st>` <st c="14943">来访问</st> `<st c="14958">hour</st>`<st c="14962">,</st>
    `<st c="14964">minute</st>`<st c="14970">, 和</st> `<st c="14976">second</st>`
    `<st c="14982">时间</st>` <st c="14987">属性。</st> <st c="15000">在从</st> `<st c="15027">time</st>`<st
    c="15031">中提取</st> `<st c="15017">hour</st>` <st c="15021">之后，我们使用它通过NumPy的</st>
    `<st c="15123">where()</st>`<st c="15130">创建了一个新特征，该特征指示是否为早晨。NumPy的</st> `<st
    c="15140">where()</st>` <st c="15147">扫描了</st> `<st c="15160">hour</st>` <st c="15164">变量；如果其值小于12且大于6，则分配值为</st>
    `<st c="15253">1</st>`<st c="15254">；否则，分配值为</st> `<st c="15290">0</st>`<st c="15291">。通过这些操作，我们在DataFrame中添加了几个可用于数据分析和</st>
    <st c="15397">训练机器学习模型的特征。</st>
- en: <st c="15431">There’s more…</st>
  id: totrans-142
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="15431">还有更多…</st>
- en: <st c="15445">We can also extract microseconds and nanoseconds with the following</st>
    `<st c="15514">pandas</st>` <st c="15520">properties:</st>
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="15445">我们还可以使用以下</st> `<st c="15514">pandas</st>` <st c="15520">属性</st>提取微秒和纳秒：</st>
- en: '`<st c="15532">pandas.Series.dt.microsecond</st>`'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="15532">pandas.Series.dt.microsecond</st>`'
- en: '`<st c="15561">pandas.Series.dt.nanosecond</st>`'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="15561">pandas.Series.dt.nanosecond</st>`'
- en: <st c="15589">For more</st> <st c="15599">details,</st> <st c="15608">visit</st>
    [<st c="15614">https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#time-date-components</st>](https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#time-date-components)<st
    c="15706">.</st>
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="15589">有关更多</st> <st c="15599">详细信息</st>，<st c="15608">请访问</st> [<st
    c="15614">https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#time-date-components</st>](https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#time-date-components)<st
    c="15706">。</st>
- en: <st c="15707">Capturing the elapsed time between datetime variables</st>
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="15707">捕获 datetime 变量之间的经过时间</st>
- en: <st c="15761">We can extract</st> <st c="15777">powerful features from</st>
    <st c="15800">each</st> `<st c="15805">datetime</st>` <st c="15813">variable individually,
    as we did in the previous two recipes.</st> <st c="15876">We can create additional
    features by combining multiple</st> `<st c="15932">datetime</st>` <st c="15940">variables.</st>
    <st c="15952">A common example consists of extracting the</st> **<st c="15996">age</st>**
    <st c="15999">at the time of an event by comparing the</st> **<st c="16041">date
    of birth</st>** <st c="16054">with the</st> **<st c="16064">date of</st>** **<st
    c="16072">the event</st>**<st c="16081">.</st>
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="15761">我们可以从每个</st> <st c="15777">datetime</st> <st c="15785">变量中提取强大的功能，就像我们在前两个食谱中所做的那样。</st>
    <st c="15876">我们可以通过组合多个</st> `<st c="15932">datetime</st>` <st c="15940">变量来创建额外的特征。</st>
    <st c="15952">一个常见的例子是通过比较</st> **<st c="15996">出生日期</st>** <st c="15999">和</st>
    **<st c="16041">事件日期</st>** <st c="16054">来提取事件发生时的</st> **<st c="16064">年龄</st>**
    <st c="16072">。</st>
- en: <st c="16082">In this recipe, we will learn how to capture the time between
    two</st> `<st c="16149">datetime</st>` <st c="16157">variables by</st> <st c="16170">utilizing</st>
    `<st c="16181">pandas</st>` <st c="16187">and</st> `<st c="16192">feature-engine</st>`<st
    c="16206">.</st>
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="16082">在这个食谱中，我们将学习如何通过利用</st> `<st c="16181">pandas</st>` <st c="16187">和</st>
    `<st c="16192">feature-engine</st>`<st c="16206">来捕获两个</st> `<st c="16149">datetime</st>`
    <st c="16157">变量之间的时间。</st>
- en: <st c="16207">How to do it...</st>
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="16207">如何实现...</st>
- en: <st c="16223">To proceed with this recipe, we’ll create a DataFrame containing
    two</st> `<st c="16293">datatime</st>` <st c="16301">variables:</st>
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="16223">要继续这个食谱，我们将创建一个包含两个</st> `<st c="16293">datatime</st>` <st c="16301">变量</st>的
    DataFrame：</st>
- en: <st c="16312">Let’s begin by importing</st> `<st c="16338">pandas</st>`<st c="16344">,</st>
    `<st c="16346">numpy</st>`<st c="16351">,</st> <st c="16353">and</st> `<st c="16357">datetime</st>`<st
    c="16365">:</st>
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="16312">让我们首先导入</st> `<st c="16338">pandas</st>`<st c="16344">，`<st c="16346">numpy</st>`<st
    c="16351">，和</st> `<st c="16353">datetime</st>`<st c="16365">：</st>
- en: '[PRE15]'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: <st c="16422">We’ll start by creating two</st> `<st c="16451">datetime</st>`
    <st c="16459">variables with 20 values each; the values start from</st> `<st c="16513">2024-05-17</st>`
    <st c="16523">and increase in intervals of</st> `<st c="16553">1</st>` <st c="16554">hour
    for the first variable, and</st> `<st c="16588">1</st>` <st c="16589">month for
    the second.</st> <st c="16612">Then, we‘ll capture the variables in a DataFrame,
    add column names, and display the</st> <st c="16696">top rows:</st>
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="16422">我们将首先创建两个</st> `<st c="16451">datetime</st>` <st c="16459">变量，每个变量包含
    20 个值；值从</st> `<st c="16513">2024-05-17</st>` <st c="16523">开始，第一个变量的间隔为</st>
    `<st c="16553">1</st>` <st c="16554">小时，第二个变量的间隔为</st> `<st c="16588">1</st>`
    <st c="16589">月。</st> <st c="16612">然后，我们将变量捕获到 DataFrame 中，添加列名，并显示</st> <st
    c="16696">顶部行：</st>
- en: '[PRE16]'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: <st c="16899">We see the</st> <st c="16910">first five rows of the</st> <st
    c="16934">DataFram</st><st c="16942">e from</st> *<st c="16950">Step 2</st>* <st
    c="16956">in the</st> <st c="16964">following output:</st>
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="16899">在以下输出中，我们看到</st> <st c="16910">来自</st> *<st c="16950">步骤 2</st>*
    <st c="16956">的</st> <st c="16964">以下</st> <st c="16934">DataFram</st><st c="16942">e</st>
    的前五行：</st>
- en: "![Figure 6.13 – The first five rows of a DataFrame wit\uFEFFh two datetime\
    \ variables](img/B22396_06_13.jpg)"
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.13 – 包含两个 datetime 变量的 DataFrame 的前五行](img/B22396_06_13.jpg)'
- en: <st c="17157">Figure 6.13 – The first five rows of a DataFrame wit</st><st c="17209">h
    two datetime variables</st>
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="17157">图 6.13 – 包含两个 datetime 变量的 DataFrame 的前五行</st>
- en: <st c="17234">Let’s capture the difference in days between the two variables
    in a new feature, and then display the DataFrame’s</st> <st c="17349">top rows:</st>
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="17234">让我们在新的特征中捕获两个变量之间的天数差异，然后显示 DataFrame 的</st> <st c="17349">顶部行：</st>
- en: '[PRE17]'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: <st c="17426">We see the differ</st><st c="17444">ence in days in the</st> <st
    c="17465">following output:</st>
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="17426">我们可以在以下输出中看到天数差异：</st>
- en: '![Figure 6.14 – Top rows of a DataFrame with a new variable capturing the time
    difference between the two datetime features](img/B22396_06_14.jpg)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.14 – 捕获两个 datetime 特征之间时间差的新变量的 DataFrame 的顶部行](img/B22396_06_14.jpg)'
- en: <st c="17687">Figure 6.14 – Top rows of a DataFrame with a new variable capturing
    the time difference between the two datetime features</st>
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="17687">图 6.14 – 捕获两个 datetime 特征之间时间差的新变量的 DataFrame 的顶部行</st>
- en: <st c="17808">Let’s capture</st> <st c="17822">the difference in</st> <st c="17841">weeks
    between the two</st> `<st c="17863">datetime</st>` <st c="17871">variables and
    then display the DataFrame’s</st> <st c="17915">top rows:</st>
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="17808">让我们捕获</st> <st c="17822">两个</st> <st c="17841">datetime</st> <st
    c="17863">变量之间的</st> <st c="17871">周数差异，然后显示 DataFrame 的</st> <st c="17915">顶部行：</st>
- en: '[PRE18]'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: <st c="18011">We see the difference in weeks between the</st> <st c="18055">variables
    in the</st> <st c="18072">following screenshot:</st>
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="18011">我们可以在以下屏幕截图中的变量之间看到周数差异：</st>
- en: "![Figure 6.15 – A DataFrame with the time difference between the datetime variables\
    \ expressed in number \uFEFFof days and number of weeks](img/B22396_06_15.jpg)"
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.15 – 以天数和周数表示的 datetime 变量之间时间差的 DataFrame](img/B22396_06_15.jpg)'
- en: <st c="18361">Figure 6.15 – A DataFrame with the time difference between the
    datetime variables expressed in number</st> <st c="18463">of days and number of
    weeks</st>
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="18361">图 6.15 – 以天数和周数表示的 datetime 变量之间的</st> <st c="18463">时间差</st>
- en: <st c="18490">Now, let’s calculate the time in between the variables in minutes
    and seconds and then display the DataFrame’s</st> <st c="18602">top rows:</st>
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="18490">现在，让我们计算变量之间的时间差，以分钟和秒为单位，然后显示 DataFrame 的</st> <st c="18602">顶部行：</st>
- en: '[PRE19]'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: <st c="18767">We see the</st> <st c="18779">new variables in the</st> <st c="18800">following
    output:</st>
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="18767">我们可以在以下输出中看到</st> <st c="18779">新变量：</st> <st c="18800">（输出内容省略）</st>
- en: '![Figure 6.16 – A DataFrame with the time difference between the two datetime
    variables expressed in different time units](img/B22396_06_16.jpg)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.16 – 以不同时间单位表示的两个 datetime 变量之间时间差的 DataFrame](img/B22396_06_16.jpg)'
- en: <st c="19205">Figure 6.16 – A DataFrame with the time difference between the
    two datetime variables expressed in different time units</st>
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="19205">图 6.16 – 以不同时间单位表示的两个 datetime 变量之间时间差的 DataFrame</st>
- en: <st c="19324">Finally, let’s calculate the difference between one variable and
    the current day, expressed in number of days, and then display the first five
    rows of</st> <st c="19476">the DataFrame:</st>
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="19324">最后，让我们计算一个变量与当前日期之间的差异，以天数表示，然后显示 DataFrame 的前五行：</st>
- en: '[PRE20]'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: <st c="19560">We can find the new variable in the final column of</st> <st c="19613">the
    DataFrame in the</st> <st c="19634">following output:</st>
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="19560">我们可以在以下输出的 DataFrame 的最后一列中找到新变量：</st>
- en: '![Figure 6.17 – A DataFrame with the new variable containing the difference
    between date1 and the day this code was executed](img/B22396_06_17.jpg)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.17 – 包含 date1 和执行此代码当天日期之间差异的新变量的 DataFrame](img/B22396_06_17.jpg)'
- en: <st c="20059">Figure 6.17 – A DataFrame with the new variable containing the
    difference between date1 and the day this code was executed</st>
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="20059">图 6.17 – 包含 date1 和执行此代码当天日期之间差异的新变量的 DataFrame</st>
- en: <st c="20181">Note</st>
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="20181">注意</st>
- en: <st c="20186">The</st> `<st c="20191">to_today</st>` <st c="20199">variable
    on your computer will be different from the one in this book, due to the difference
    between the current date (at the time of writing) and when</st> <st c="20352">you
    execute</st> <st c="20364">the code.</st>
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="20186">你的电脑上的</st> `<st c="20191">to_today</st>` <st c="20199">变量将与本书中的不同，这是由于写作时的当前日期与</st>
    <st c="20352">你执行</st> <st c="20364">代码时的日期之间的差异造成的。</st>
- en: <st c="20373">That’s it!</st> <st c="20385">We’ve now enriched our dataset with
    new features that were create</st><st c="20450">d by comparing two</st> `<st c="20470">datetime</st>`
    <st c="20478">variables.</st>
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="20373">这就完成了！</st> <st c="20385">我们现在已经通过比较两个</st> `<st c="20470">datetime</st>`
    <st c="20478">变量创建的新特征丰富了我们的数据集。</st>
- en: <st c="20489">How it works...</st>
  id: totrans-182
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="20489">它是如何工作的...</st>
- en: <st c="20505">In this recipe, we</st> <st c="20525">captured different representations</st>
    <st c="20559">of the time between two</st> `<st c="20584">datetime</st>` <st c="20592">variables.</st>
    <st c="20604">To proceed with this recipe, we created a sample DataFrame with
    two variables, each with 20 dates starting at an arbitrary date.</st> <st c="20733">The
    first variable increased in intervals of</st> `<st c="20778">1</st>` <st c="20779">hour,
    while the second variable increased in intervals of</st> `<st c="20838">1</st>`
    <st c="20839">month.</st> <st c="20847">We created the variables with</st> `<st
    c="20877">pandas</st>`<st c="20883">’</st> `<st c="20886">date_range()</st>`<st
    c="20898">, which we discussed in the previous two recipes in</st> <st c="20950">this
    chapter.</st>
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="20505">在这个菜谱中，我们</st> <st c="20525">捕捉了两个</st> `<st c="20584">datetime</st>`
    <st c="20592">变量之间时间的不同表示。</st> <st c="20604">要继续这个菜谱，我们创建了一个包含两个变量的样本 DataFrame，每个变量从任意日期开始有
    20 个日期。</st> <st c="20733">第一个变量以</st> `<st c="20778">1</st>` <st c="20779">小时的间隔增加，而第二个变量以</st>
    `<st c="20838">1</st>` <st c="20839">月的间隔增加。</st> <st c="20847">我们使用</st> `<st
    c="20877">pandas</st>`<st c="20883">’</st> `<st c="20886">date_range()</st>`<st
    c="20898">创建了这些变量，我们将在本章前两个菜谱中讨论它。</st>
- en: <st c="20963">To determine the difference between the variables – that is, to
    determine the time between them – we directly subtracted one</st> `<st c="21089">datetime</st>`
    <st c="21097">variable from the other – that is, one</st> `<st c="21137">pandas</st>`
    <st c="21143">Series from the other.</st> <st c="21167">The difference between
    the two</st> `<st c="21198">pandas</st>` <st c="21204">Series returned a new</st>
    `<st c="21227">pandas</st>` <st c="21233">Series.</st> <st c="21242">To capture
    the difference in days, we used</st> `<st c="21285">pandas</st>`<st c="21291">’</st>
    `<st c="21294">dt</st>`<st c="21296">, followed by</st> `<st c="21310">days</st>`<st
    c="21314">. To convert the time difference into months, we used</st> `<st c="21368">timedelta()</st>`
    <st c="21379">from NumPy, indicating that we wanted the difference in weeks by
    passing</st> `<st c="21453">W</st>` <st c="21454">in the second argument of the
    method.</st> <st c="21493">To capture the difference in seconds and minutes, we
    passed the</st> `<st c="21557">s</st>` <st c="21558">and</st> `<st c="21563">m</st>`
    <st c="21564">strings to</st> `<st c="21576">timedelta()</st>`<st c="21587">,
    respectively.</st>
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="20963">为了确定变量之间的差异——即确定它们之间的时间差——我们直接从另一个</st> `<st c="21089">datetime</st>`
    <st c="21097">变量中减去一个</st> `<st c="21137">pandas</st>` <st c="21143">Series</st>
    ——即从一个</st> `<st c="21198">pandas</st>` <st c="21204">Series</st> 中减去另一个。</st>
    <st c="21242">两个</st> `<st c="21227">pandas</st>` <st c="21233">Series</st> 之间的差异返回了一个新的</st>
    `<st c="21242">pandas</st>` <st c="21248">Series</st>。</st> <st c="21242">为了捕捉天数差异，我们使用了</st>
    `<st c="21285">pandas</st>`<st c="21291">’</st> `<st c="21294">dt</st>`<st c="21296">，后面跟着</st>
    `<st c="21310">days</st>`<st c="21314">。要将时间差转换为月份，我们使用了</st> `<st c="21368">timedelta()</st>`
    <st c="21379">从 NumPy，表示我们想要以周为单位传递差异，通过在方法的第二个参数中传递</st> `<st c="21453">W</st>`
    <st c="21454">。</st> <st c="21493">为了捕捉秒和分钟的差异，我们分别将</st> `<st c="21557">s</st>`
    <st c="21558">和</st> `<st c="21563">m</st>` <st c="21564">字符串传递给</st> `<st c="21576">timedelta()</st>`<st
    c="21587">。</st>
- en: <st c="21602">Note</st>
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="21602">注意</st>
- en: <st c="21607">The arguments for NumPy’s</st> `<st c="21634">timedelta</st>`
    <st c="21643">are a number,</st> `<st c="21658">– 1</st>`<st c="21661">, in our
    example, to represent the number of units, and a</st> `<st c="21719">datetime</st>`
    <st c="21727">unit, such as day (</st>`<st c="21747">D</st>`<st c="21749">), week
    (</st>`<st c="21758">W</st>`<st c="21760">), hours (</st>`<st c="21770">h</st>`<st
    c="21772">), minutes (</st>`<st c="21784">m</st>`<st c="21786">), or</st> <st
    c="21792">seconds (</st>`<st c="21801">s</st>`<st c="21803">).</st>
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="21607">NumPy 的</st> `<st c="21634">timedelta</st>` <st c="21643">的参数是一个数字，</st>
    `<st c="21658">– 1</st>`<st c="21661">，在我们的例子中，表示单位数量，以及一个</st> `<st c="21719">datetime</st>`
    <st c="21727">单位，例如天（</st>`<st c="21747">D</st>`<st c="21749">），周（</st>`<st c="21758">W</st>`<st
    c="21760">），小时（</st>`<st c="21770">h</st>`<st c="21772">），分钟（</st>`<st c="21784">m</st>`<st
    c="21786">），或者</st> <st c="21792">秒（</st>`<st c="21801">s</st>`<st c="21803">）。</st>
- en: <st c="21805">Finally, we</st> <st c="21818">captured the difference from</st>
    <st c="21846">one</st> `<st c="21851">date</st><st c="21855">time</st>` <st c="21860">variable
    to today’s date.</st> <st c="21887">We obtained the date and time of today (at
    the time of writing) by using</st> `<st c="21960">today()</st>` <st c="21967">from
    the built-in</st> `<st c="21986">datetime</st>` <st c="21994">Python library.</st>
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '[最后，我们</st> `<st c="21818">从</st>` `<st c="21846">一个</st>` `<st c="21851">日期</st>`
    `<st c="21855">时间</st>` `<st c="21860">变量到今天的日期</st>` `<st c="21887">捕获了差异。</st>`
    `<st c="21887">我们通过使用</st>` `<st c="21960">today()</st>` `<st c="21967">从内置的</st>`
    `<st c="21986">datetime</st>` `<st c="21994">Python 库</st>` `<st c="21994">获得了今天的日期和时间（撰写本文时）。</st>'
- en: <st c="22010">There's more...</st>
  id: totrans-188
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[还有更多...</st>'
- en: <st c="22026">We can automate the creation of</st> <st c="22059">features that
    capture the time between variables by using the</st> `<st c="22121">feature-engine</st>`<st
    c="22135">‘s</st> <st c="22139">transformer</st> `<st c="22151">DatetimeSubstraction()</st>`<st
    c="22173">.</st>
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '[我们可以通过使用`<st c="22121">feature-engine</st>` `<st c="22135">的</st>` `<st c="22139">转换器</st>`
    `<st c="22151">DatetimeSubstraction()</st>` `<st c="22173">来自动化创建捕获变量之间时间的特征。</st>'
- en: <st c="22174">Let’s import</st> `<st c="22188">pandas</st>` <st c="22194">and</st>
    `<st c="22199">feature-engine</st>`<st c="22213">’s transformer:</st>
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[让我们导入</st> `<st c="22188">pandas</st>` `<st c="22194">和</st>` `<st c="22199">feature-engine</st>`
    `<st c="22213">的转换器：</st>'
- en: '[PRE21]'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: <st c="22309">Let’s re-create the sample dataset that we described in</st> *<st
    c="22366">Step 2</st>* <st c="22372">of the</st> *<st c="22380">How to do</st>*
    *<st c="22390">it…</st>* <st c="22393">section:</st>
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[让我们重新创建我们在</st> *<st c="22366">步骤 2</st>* `<st c="22372">的</st> *<st c="22380">如何做</st>`
    *<st c="22390">它…</st>` `<st c="22393">部分中描述的</st>样本数据集：</st>'
- en: '[PRE22]'
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: <st c="22586">Let’s set up</st> `<st c="22600">DatetimeSubstraction()</st>`<st
    c="22622">to return the time difference between the second date and the first
    date expressed</st> <st c="22706">in days:</st>
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[让我们设置</st>` `<st c="22600">DatetimeSubstraction()</st>` `<st c="22622">以返回第二个日期和第一个日期之间的时间差，以天为单位：</st>'
- en: '[PRE23]'
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: <st c="22797">Note</st>
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '[注意</st>'
- en: <st c="22802">We can obtain the difference between more than two variables by
    passing variable lists in the</st> `<st c="22897">variables</st>` <st c="22906">and</st>
    `<st c="22911">reference</st>` <st c="22920">parameters.</st>
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '[我们可以通过在`<st c="22897">variables</st>` `<st c="22906">和</st>` `<st c="22911">reference</st>`
    `<st c="22920">参数中传递变量列表来获得两个以上变量的差值。</st>'
- en: <st c="22932">Let’s create</st> <st c="22945">and then display the</st> <st
    c="22967">new feature:</st>
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[让我们创建</st> `<st c="22945">然后显示</st>` `<st c="22967">新功能：</st>'
- en: '[PRE24]'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: <st c="23017">In the following output, we see the variable that captures the
    time difference between the two</st> `<st c="23113">datetime</st>` <st c="23121">variables</st>
    <st c="23132">in days:</st>
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[在以下输出中，我们看到捕获了两个</st>` `<st c="23113">日期时间</st>` `<st c="23121">变量</st>` `<st
    c="23132">之间时间差的变量，以天为单位：</st>'
- en: '![Figure 6.18 – A DataFrame with the new variable containing the difference
    between the two datetime variables](img/B22396_06_18.jpg)'
  id: totrans-201
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.18 – 包含两个日期时间变量差值的新变量的 DataFrame](img/B22396_06_18.jpg)'
- en: <st c="23386">Figure 6.18 – A DataFrame with the new variable containing the
    difference between the two datetime variables</st>
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 6.18 – 包含两个日期时间变量差值的新变量的 DataFrame](#)'
- en: <st c="23494">For more details, check</st> <st c="23519">out</st> [<st c="23523">https://feature-engine.trainindata.com/en/latest/api_doc/datetime/DatetimeSubtraction.html</st>](https://feature-engine.trainindata.com/en/latest/api_doc/datetime/DatetimeSubtraction.html)<st
    c="23613">.</st>
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '[更多详情，请查看</st>` `<st c="23519">[https://feature-engine.trainindata.com/en/latest/api_doc/datetime/DatetimeSubtraction.html](https://feature-engine.trainindata.com/en/latest/api_doc/datetime/DatetimeSubtraction.html)<st
    c="23613">。</st>'
- en: <st c="23614">See also</st>
  id: totrans-204
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[参见](#)'
- en: <st c="23623">To learn more</st> <st c="23638">about NumPy’s</st> `<st c="23652">timedelta</st>`<st
    c="23661">,</st> <st c="23663">visit</st> [<st c="23669">https://numpy.org/devdocs/reference/arrays.datetime.html#datetime-and-timedelta-arithmetic</st>](https://numpy.org/devdocs/reference/arrays.datetime.html#datetime-and-timedelta-arithmetic)<st
    c="23759">.</st>
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '[要了解更多关于 NumPy 的</st> `<st c="23652">timedelta</st>` `<st c="23661">，</st>
    `<st c="23663">请访问</st>` [<st c="23669">https://numpy.org/devdocs/reference/arrays.datetime.html#datetime-and-timedelta-arithmetic</st>](https://numpy.org/devdocs/reference/arrays.datetime.html#datetime-and-timedelta-arithmetic)<st
    c="23759">。</st>'
- en: <st c="23760">Working with time in different time zones</st>
  id: totrans-206
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[在不同时区处理时间</st>'
- en: <st c="23802">Some</st> <st c="23807">organizations operate internationally;
    therefo</st><st c="23854">re, the information they collect about events may be
    recorded alongside the time zone of the area where the event took place.</st>
    <st c="23981">To be able to compare events that occurred across different time
    zones, we typically have to set all of the variables within the same zone.</st>
    <st c="24121">In this recipe, we will learn how to unify the time zones of a</st>
    `<st c="24184">datetime</st>` <st c="24192">variable and how to reassign a va</st><st
    c="24226">riable to a different time</st> <st c="24254">zone</st> <st c="24259">using</st>
    `<st c="24265">pandas</st>`<st c="24271">.</st>
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="23802">一些</st> <st c="23807">组织在国际上运营；因此，他们收集关于事件的信息可能记录在事件发生地区的时区旁边。</st>
    <st c="23854">为了能够比较发生在不同时区的事件，我们通常必须将所有变量设置在同一个时区内。</st> <st c="23981">在本食谱中，我们将学习如何统一一个</st>
    `<st c="24184">datetime</st>` <st c="24192">变量的时区，以及如何使用</st> `<st c="24265">pandas</st>`<st
    c="24271">将变量重新分配到不同的时区。</st>
- en: <st c="24272">How to do it...</st>
  id: totrans-208
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="24272">如何操作...</st>
- en: <st c="24288">To proceed with this recipe, we’ll create a sample DataFrame containing
    two variables in different</st> <st c="24388">time zones:</st>
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="24288">为了继续本食谱，我们将创建一个包含两个不同</st> <st c="24388">时区变量的样本 DataFrame：</st>
- en: <st c="24399">Let’s</st> <st c="24406">import</st> `<st c="24413">pandas</st>`<st
    c="24419">:</st>
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="24399">让我们</st> <st c="24406">导入</st> `<st c="24413">pandas</st>`<st
    c="24419">：</st>
- en: '[PRE25]'
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: <st c="24441">Let’s create a DataFrame containing one variable with values in
    different</st> <st c="24516">time zones:</st>
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="24441">让我们创建一个包含一个变量在不同</st> <st c="24516">时区值的 DataFrame：</st>
- en: '[PRE26]'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: <st c="24770">Let’s add</st> <st c="24781">another</st> `<st c="24789">datetime</st>`
    <st c="24797">variable to the DataFrame, which also contains values in different</st>
    <st c="24865">time zones:</st>
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="24770">让我们向 DataFrame 添加另一个</st> <st c="24789">datetime</st> <st c="24797">变量，它也包含不同</st>
    <st c="24865">时区的值：</st>
- en: '[PRE27]'
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: <st c="25100">If we now execute</st> `<st c="25119">df</st>`<st c="25121">,
    we’ll see the DataFrame with the variables in the diffe</st><st c="25178">rent
    time zones like in the</st> <st c="25207">following output:</st>
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="25100">如果我们现在执行</st> `<st c="25119">df</st>`<st c="25121">，我们将看到包含不同时区变量的
    DataFrame，如下面的输出所示：</st>
- en: '![Figure 6.19 – A DataFrame with two datetime variables in different time zones](img/B22396_06_19.jpg)'
  id: totrans-217
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.19 – 包含不同时区两个日期时间变量的 DataFrame](img/B22396_06_19.jpg)'
- en: <st c="25549">Figure 6.19 – A DataFrame with two datetime variables in different
    time zones</st>
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="25549">图 6.19 – 包含不同时区两个日期时间变量的 DataFrame</st>
- en: <st c="25626">Note</st>
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="25626">注意</st>
- en: <st c="25631">The time zone is indicated with the</st> `<st c="25668">+02</st>`
    <st c="25671">and</st> `<st c="25676">-05</st>` <st c="25679">values, respectively,
    which indicates the time difference to</st> <st c="25740">the</st> **<st c="25745">Coordinated
    Universal</st>** **<st c="25767">Time</st>** <st c="25771">(</st>**<st c="25773">UTC</st>**<st
    c="25776">).</st>
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="25631">时区用</st> `<st c="25668">+02</st>` <st c="25671">和</st> `<st c="25676">-05</st>`
    <st c="25679">值表示，分别表示与**<st c="25745">协调世界时</st>** **<st c="25767">（</st>****<st
    c="25773">UTC</st>****<st c="25776">）**的时间差。</st>
- en: <st c="25779">To work</st> <st c="25788">with different time zones, we typically
    set the variables in the same time zone, in this case, we chose</st> <st c="25892">the
    UTC:</st>
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="25779">为了处理不同的时区，我们通常将变量设置在同一个时区，在这种情况下，我们选择了</st> <st c="25892">协调世界时（UTC）：</st>
- en: '[PRE28]'
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: <st c="26014">If we now execute</st> `<st c="26033">df</st>`<st c="26035">,
    we’ll see the new variables, which have</st> <st c="26076">a difference of</st>
    `<st c="26093">00</st>` <st c="26095">hours with respect</st> <st c="26115">to
    UTC:</st>
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="26014">如果我们现在执行</st> `<st c="26033">df</st>`<st c="26035">，我们将看到新的变量，它们与
    UTC 相比有</st> `<st c="26076">00</st>` <st c="26093">小时的时间差：</st>
- en: "![Figure 6.20 – A DataFrame\uFEFF containing the new variables in the UTC](img/B22396_06_20.jpg)"
  id: totrans-224
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.20 – 包含 UTC 新变量的 DataFrame](img/B22396_06_20.jpg)'
- en: <st c="26779">Figure 6.20 – A DataFrame</st> <st c="26804">containing the new
    variables in the UTC</st>
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="26779">图 6.20 – 包含 UTC 新变量的 DataFrame</st>
- en: <st c="26844">Let’s calculate the</st> <st c="26865">difference in days between
    the variables and then display the first five rows of</st> <st c="26946">the DataFrame:</st>
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="26844">让我们计算变量之间的天数差异，然后显示 DataFrame 的前五行：</st>
- en: '[PRE29]'
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: <st c="27053">We see the time difference between the variables in the</st> <st
    c="27110">following output:</st>
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="27053">我们在以下输出中看到变量之间的时间差：</st> <st c="27110">：</st>
- en: '[PRE30]'
  id: totrans-229
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: df['time1_london'] = df[
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: df['time1_london'] = df[
- en: ‹time1_utc›].dt.tz_convert('Europe/London')
  id: totrans-231
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: ‹time1_utc›].dt.tz_convert('Europe/London')
- en: df['time2_berlin'] = df[
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: df['time2_berlin'] = df[
- en: ‹time1_utc›].dt.tz_convert('Europe/Berlin')
  id: totrans-233
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: ‹time1_utc›].dt.tz_convert('Europe/Berlin')
- en: df[['time1_london', 'time2_berlin']]
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: df[['time1_london', 'time2_berlin']]
- en: '[PRE31]'
  id: totrans-235
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '![Figure 6.21 – Variables reformatted into different time zones](img/B22396_06_21.jpg)'
  id: totrans-236
  prefs: []
  type: TYPE_IMG
  zh: '![图6.21 – 变量重新格式化为不同的时区](img/B22396_06_21.jpg)'
- en: <st c="27919">Figure 6.21 – Variables reformatted into different time zones</st>
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="27919">图6.21 – 变量重新格式化为不同的时区</st>
- en: <st c="27980">When changing</st> <st c="27994">time zones, not only do the values
    of the zone change – that is, the</st> `<st c="28064">+01</st>` <st c="28067">and</st>
    `<st c="28072">+02</st>` <st c="28075">values in the previous ima</st><st c="28102">ge
    – but the value of the hour changes</st> <st c="28142">as well.</st>
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="27980">当更改时区时，不仅时区的值会改变——也就是说，之前图像中的`<st c="28064">+01</st>` <st c="28067">和`<st
    c="28072">+02</st>` <st c="28075">值——而且小时的值也会改变。</st>
- en: <st c="28150">How it works...</st>
  id: totrans-239
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="28150">它是如何工作的...</st>
- en: <st c="28166">In this recipe, we changed time z</st><st c="28200">ones and performed
    operations between variables in different time zones.</st> <st c="28274">To begin,
    we created a DataFrame with two variables, the values of which started at an arbitrary
    date and increased hourly; these were set in different time zones.</st> <st c="28438">To
    combine the different time zone variables in one DataFrame column, we concatenated
    the series returned by</st> `<st c="28547">pandas</st>`<st c="28553">’</st> `<st
    c="28556">date_range()</st>` <st c="28568">by utilizing</st> `<st c="28582">pandas</st>`<st
    c="28588">’</st> `<st c="28591">concat()</st>`<st c="28599">. We set the</st>
    `<st c="28612">axis</st>` <st c="28616">argument to</st> `<st c="28629">0</st>`
    <st c="28630">to indicate we wanted to concatenate the series vertically in one
    column.</st> <st c="28705">We covered the arguments of</st> `<st c="28733">pandas</st>`<st
    c="28739">’</st> `<st c="28742">date_range()</st>` <st c="28754">extensively in
    former recipes in this chapter; see the</st> *<st c="28810">Extracting features
    from dates with pandas</st>* <st c="28852">and</st> *<st c="28857">Extracting
    features from time with pandas</st>* <st c="28898">recipes for</st> <st c="28911">more
    details.</st>
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="28166">在这个菜谱中，我们更改了时区并执行了不同时区变量之间的操作。</st> <st c="28200">首先，我们创建了一个包含两个变量的DataFrame，这些变量的值从一个任意日期开始，每小时增加；这些值设置在不同的时区。</st>
    <st c="28438">为了在一个DataFrame列中组合不同的时区变量，我们使用`<st c="28547">pandas</st>`<st c="28553">’</st>
    `<st c="28556">date_range()</st>` <st c="28568">返回的序列，通过利用`<st c="28582">pandas</st>`<st
    c="28588">’</st> `<st c="28591">concat()</st>`<st c="28599">。我们将`<st c="28612">axis</st>`
    <st c="28616">参数设置为`<st c="28629">0</st>` <st c="28630">，以指示我们想要将序列垂直地拼接在一列中。</st>
    <st c="28705">我们在本章前面的菜谱中广泛介绍了`<st c="28733">pandas</st>`<st c="28739">’</st>
    `<st c="28742">date_range()</st>` <st c="28754">的参数；请参阅*《从日期中提取特征》* <st c="28810">和《从时间中提取特征》*
    <st c="28852">的菜谱以获取更多详细信息。</st>
- en: <st c="28924">To reset the time zone of the variables to the central zone, we
    used</st> `<st c="28994">pandas</st>`<st c="29000">’</st> `<st c="29003">to_datetime()</st>`<st
    c="29016">, passing</st> `<st c="29026">utc=True</st>`<st c="29034">. Finally,
    we determined the time difference between the</st> <st c="29091">variables by
    subtracting one series from the other and capturing the difference in days.</st>
    <st c="29180">To reassign a different time zone, we used</st> `<st c="29223">pandas</st>`<st
    c="29229">’</st> `<st c="29232">tz_convert</st><st c="29242">()</st>`<st c="29245">,
    indicating the</st> <st c="29261">new time zone as</st> <st c="29279">an argument.</st>
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="28924">要将变量的时区重置为中心时区，我们使用了`<st c="28994">pandas</st>`<st c="29000">’</st>
    `<st c="29003">to_datetime()</st>`<st c="29016">，传递`<st c="29026">utc=True</st>`<st
    c="29034">。最后，我们通过从一个序列减去另一个序列并捕获天数差异来确定变量之间的时间差。</st> <st c="29180">要重新分配不同的时区，我们使用了`<st
    c="29223">pandas</st>`<st c="29229">’</st> `<st c="29232">tz_convert</st><st c="29242">()</st>`<st
    c="29245">，将新的时区作为参数指定。</st>
- en: <st c="29291">See also</st>
  id: totrans-242
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="29291">另请参阅</st>
- en: <st c="29300">To</st> <st c="29303">learn more about</st> `<st c="29321">pandas</st>`<st
    c="29327">’</st> `<st c="29330">to_datetime()</st>`<st c="29343">,</st> <st c="29345">visit</st>
    [<st c="29351">https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.to_datetime.html</st>](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.to_datetime.html)<st
    c="29433">.</st>
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="29300">要</st> <st c="29303">了解更多关于</st> `<st c="29321">pandas</st>`<st
    c="29327">’</st> `<st c="29330">to_datetime()</st>`<st c="29343">,</st> <st c="29345">请访问</st>
    [<st c="29351">https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.to_datetime.html</st>](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.to_datetime.html)<st
    c="29433">.</st>
- en: <st c="29434">To learn</st> <st c="29444">more about</st> `<st c="29455">pandas</st>`<st
    c="29461">’</st> `<st c="29464">tz_convert()</st>`<st c="29476">,</st> <st c="29478">visit</st>
    [<st c="29484">https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.dt.tz_convert.html</st>](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.dt.tz_convert.html)<st
    c="29575">.</st>
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="29434">要了解更多关于</st> <st c="29444">pandas</st>`<st c="29461">’</st> `<st
    c="29464">tz_convert()</st>`<st c="29476">,</st> <st c="29478">请访问</st> [<st c="29484">https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.dt.tz_convert.html</st>](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.dt.tz_convert.html)<st
    c="29575">.</st>
- en: <st c="29576">Automating the datetime fea</st><st c="29604">ture extraction
    with</st> <st c="29625">Feature-engine</st>
  id: totrans-245
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="29576">使用</st> <st c="29604">Feature-engine</st> <st c="29625">自动化日期时间特征提取</st>
- en: '`<st c="29640">feature-engine</st>` <st c="29655">is a</st> <st c="29661">Python
    library for feature engineering and selection that is well suited to working with</st>
    `<st c="29750">pandas</st>` <st c="29756">DataFrames.</st> <st c="29769">The</st>
    `<st c="29773">DatetimeFeatures()</st>` <st c="29791">class can extract features
    from date and time automatically by using</st> `<st c="29861">pandas</st>`<st
    c="29867">’</st> `<st c="29870">dt</st>` <st c="29872">under the hood.</st> `<st
    c="29889">DatetimeFeatures()</st>` <st c="29907">allows you to</st> <st c="29922">extract
    the</st> <st c="29934">following</st> <st c="29943">features:</st>'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: '`<st c="29640">feature-engine</st>` <st c="29655">是一个</st> <st c="29661">Python
    库，用于特征工程和选择，非常适合与</st> `<st c="29750">pandas</st>` <st c="29756">DataFrames</st>
    <st c="29769">一起使用。</st> `<st c="29773">DatetimeFeatures()</st>` <st c="29791">类可以通过使用</st>
    `<st c="29861">pandas</st>`<st c="29867">’</st> `<st c="29870">dt</st>` <st c="29872">自动提取日期和时间特征。</st>
    `<st c="29889">DatetimeFeatures()</st>` <st c="29907">允许您</st> <st c="29922">提取以下</st>
    <st c="29934">特征：</st>'
- en: <st c="29953">Month</st>
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="29953">月</st>
- en: <st c="29959">Quarter</st>
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="29959">季度</st>
- en: <st c="29967">Semester</st>
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="29967">学期</st>
- en: <st c="29976">Year</st>
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="29976">年</st>
- en: <st c="29981">Week</st>
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="29981">周</st>
- en: <st c="29986">Day of</st> <st c="29994">the week</st>
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="29986">周</st> <st c="29994">的日</st>
- en: <st c="30002">Day of</st> <st c="30010">the month</st>
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="30002">月份的</st> <st c="30010">日</st>
- en: <st c="30019">Day of</st> <st c="30027">the year</st>
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="30019">年份的</st> <st c="30027">日</st>
- en: <st c="30035">Weekend</st>
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="30035">周末</st>
- en: <st c="30043">Month start</st>
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="30043">月始</st>
- en: <st c="30055">Month end</st>
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="30055">月末</st>
- en: <st c="30065">Quarter start</st>
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="30065">季度始</st>
- en: <st c="30079">Quarter end</st>
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="30079">季度尾</st>
- en: <st c="30091">Year start</st>
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="30091">年始</st>
- en: <st c="30102">Year end</st>
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="30102">年尾</st>
- en: <st c="30111">Leap year</st>
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="30111">闰年</st>
- en: <st c="30121">Days in</st> <st c="30130">a month</st>
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="30121">一个月中的</st> <st c="30130">天数</st>
- en: <st c="30137">Hour</st>
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="30137">小时</st>
- en: <st c="30142">Minute</st>
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="30142">分钟</st>
- en: <st c="30149">Second</st>
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="30149">秒</st>
- en: <st c="30156">In this recipe, we will automatically create fea</st><st c="30205">tures
    from date and time by</st> <st c="30234">utilizing</st> `<st c="30244">feature-engine</st>`<st
    c="30258">.</st>
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="30156">在这个菜谱中，我们将通过利用</st> <st c="30244">feature-engine</st> <st c="30258">自动创建日期和时间的特征。</st>
- en: <st c="30259">How to do it...</st>
  id: totrans-268
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="30259">如何做...</st>
- en: <st c="30275">To</st> <st c="30279">showcase</st> `<st c="30288">feature-engine</st>`<st
    c="30302">’s functionality, we’ll</st> <st c="30327">create a sample DataFrame
    with a</st> `<st c="30360">datetime</st>` <st c="30368">variable:</st>
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="30275">为了</st> <st c="30279">展示</st> `<st c="30288">feature-engine</st>`<st
    c="30302">’s</st> <st c="30327">功能，我们将</st> <st c="30360">创建一个包含</st> `<st c="30368">datetime</st>`
    <st c="30368">变量的</st> `<st c="30327">样本 DataFrame：</st>
- en: <st c="30378">Let’s begin by importing</st> `<st c="30404">pandas</st>` <st
    c="30410">and</st> `<st c="30415">DatetimeFeatures()</st>`<st c="30433">:</st>
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="30378">让我们从导入</st> `<st c="30404">pandas</st>` <st c="30410">和</st> `<st
    c="30415">DatetimeFeatures()</st>`<st c="30433">:</st>
- en: '[PRE32]'
  id: totrans-271
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: <st c="30508">Let’s create a</st> `<st c="30524">datetime</st>` <st c="30532">variable
    with 20 values, beginning from</st> `<st c="30573">2024-05-17</st>` <st c="30583">at
    midnight and followed by increments of</st> `<st c="30626">1</st>` <st c="30627">day.</st>
    <st c="30633">Then, we store this variable in</st> <st c="30665">a DataFrame:</st>
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-273
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: <st c="30771">We’ll</st> <st c="30777">start by setting</st> <st c="30795">up
    the transformer to extract all supported</st> `<st c="30839">datetime</st>` <st
    c="30847">features:</st>
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-275
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: <st c="30928">Note</st>
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
- en: '`<st c="30933">DatetimeFeatures()</st>` <st c="30952">automatically finds the
    variables of the</st> `<st c="30994">datetime</st>` <st c="31002">type, or that
    could be parsed as</st> `<st c="31036">datetime</st>` <st c="31044">when the</st>
    `<st c="31054">variables</st>` <st c="31063">parameter is set to</st> `<st c="31084">None</st>`<st
    c="31088">. Alternatively, you can pass a list with the names of the variables
    from which you want to extract</st> `<st c="31188">date</st>` <st c="31192">and</st>
    `<st c="31197">time</st>` <st c="31201">features.</st>'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
- en: <st c="31211">Let’s add the</st> `<st c="31226">date</st>` <st c="31230">and</st>
    `<st c="31235">time</st>` <st c="31239">features to</st> <st c="31252">the data:</st>
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-279
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: <st c="31292">Note</st>
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
- en: <st c="31297">By default,</st> `<st c="31310">DatetimeFeatures()</st>` <st c="31328">extracts
    the following features from each</st> `<st c="31371">datetime</st>` <st c="31379">variable:</st>
    `<st c="31390">month</st>`<st c="31395">,</st> `<st c="31397">year</st>`<st c="31401">,</st>
    `<st c="31403">day_of_week</st>`<st c="31414">,</st> `<st c="31416">day_of_month</st>`<st
    c="31428">,</st> `<st c="31430">hour</st>`<st c="31434">,</st> `<st c="31436">minute</st>`<st
    c="31442">, and</st> `<st c="31448">second</st>`<st c="31454">. We can modify
    this behavior through the</st> `<st c="31495">features_to_extra</st><st c="31513">ct</st>`
    <st c="31516">parameter as we did in</st> *<st c="31540">Step 3</st>*<st c="31546">.</st>
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
- en: <st c="31547">Let’s</st> <st c="31554">capture the names</st> <st c="31571">of
    the new variables in</st> <st c="31596">a list:</st>
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-283
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: <st c="31651">Note</st>
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
- en: '`<st c="31656">DatetimeFeatures()</st>` <st c="31675">names the new variables
    with the original variable name (in this case,</st> `<st c="31747">date</st>`<st
    c="31751">) followed by an underscore and then the type of feature created, for
    example,</st> `<st c="31831">date_day_of_week</st>` <st c="31847">contains the
    day of the week extracted from the</st> `<st c="31896">date</st>` <st c="31900">variable.</st>'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
- en: <st c="31910">If we execute</st> `<st c="31925">vars_</st>`<st c="31930">, we’ll
    see the names of the features that</st> <st c="31973">were created:</st>
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: df = pd.DataFrame()
  id: totrans-288
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: df["time"] = pd.concat(
  id: totrans-289
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '['
  id: totrans-290
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: pd.Series(
  id: totrans-291
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: pd.date_range(
  id: totrans-292
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: start="2024-08-01 09:00",
  id: totrans-293
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: freq="h",
  id: totrans-294
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: periods=3,
  id: totrans-295
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: tz="Europe/Berlin"
  id: totrans-296
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: )
  id: totrans-297
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: ),
  id: totrans-298
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: pd.Series(
  id: totrans-299
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: pd.date_range(
  id: totrans-300
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: start="2024-08-01 09:00",
  id: totrans-301
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: freq="h",
  id: totrans-302
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: periods=3, tz="US/Central"
  id: totrans-303
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: )
  id: totrans-304
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: ),
  id: totrans-305
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '],'
  id: totrans-306
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: axis=0,
  id: totrans-307
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: )
  id: totrans-308
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: )
- en: '[PRE38]'
  id: totrans-309
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: dfts = DatetimeFeatures(
  id: totrans-310
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: dfts = DatetimeFeatures(
- en: features_to_extract=
  id: totrans-311
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: features_to_extract=
- en: '["day_of_week", "hour","minute"],'
  id: totrans-312
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '["day_of_week", "hour","minute"],'
- en: drop_original=False,
  id: totrans-313
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: drop_original=False,
- en: utc=True,
  id: totrans-314
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: utc=True,
- en: )
  id: totrans-315
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: )
- en: '[PRE39]'
  id: totrans-316
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: dft = dfts.fit_transform(df)
  id: totrans-317
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: dft = dfts.fit_transform(df)
- en: '[PRE40]'
  id: totrans-318
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
