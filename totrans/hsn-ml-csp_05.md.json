["```py\nTrapezoidalFunction function1 = new TrapezoidalFunction( 13, 18, 23, 28 );\n             FuzzySet fsCool = new FuzzySet( \"Cool\", function1 );\n             TrapezoidalFunction function2 = new TrapezoidalFunction( 23, 28, 33, 38 );\n             FuzzySet fsWarm = new FuzzySet( \"Warm\", function2 );\n\n             double[,] coolValues = new double[20, 2];\n             for ( int i = 10; i < 30; i++ )\n             {\n                 coolValues[i - 10, 0] = i;\n                 coolValues[i - 10, 1] = fsCool.GetMembership( i );\n             }\n\n             double[,] warmValues = new double[20, 2];\n             for ( int i = 20; i < 40; i++ )\n             {\n                 warmValues[i - 20, 0] = i;\n                 warmValues[i - 20, 1] = fsWarm.GetMembership( i );\n             }\n\n             chart?.UpdateDataSeries( \"COOL\", coolValues );\n             chart?.UpdateDataSeries( \"WARM\", warmValues );\n```", "```py\nLinguisticVariable lvTemperature = new LinguisticVariable( \"Temperature\", 0, 80 );\n             TrapezoidalFunction function1 = new TrapezoidalFunction( 10, 15, TrapezoidalFunction.EdgeType.Right );\n             FuzzySet fsCold = new FuzzySet( \"Cold\", function1 );\n             TrapezoidalFunction function2 = new TrapezoidalFunction( 10, 15, 20, 25 );\n             FuzzySet fsCool = new FuzzySet( \"Cool\", function2 );\n             TrapezoidalFunction function3 = new TrapezoidalFunction( 20, 25, 30, 35 );\n             FuzzySet fsWarm = new FuzzySet( \"Warm\", function3 );\n             TrapezoidalFunction function4 = new TrapezoidalFunction( 30, 35, TrapezoidalFunction.EdgeType.Left );\n             FuzzySet fsHot = new FuzzySet( \"Hot\", function4 );\n\n             lvTemperature.AddLabel( fsCold );\n             lvTemperature.AddLabel( fsCool );\n             lvTemperature.AddLabel( fsWarm );\n             lvTemperature.AddLabel( fsHot );\n\n             double[][,] chartValues = new double[4][,];\n             for ( int i = 0; i < 4; i++ )\n                 chartValues[i] = new double[160, 2];\n```", "```py\nint j = 0;\n             for ( float x = 0; x < 80; x += 0.5f, j++ )\n             {\n                 double y1 = lvTemperature.GetLabelMembership( \"Cold\", x );\n                 double y2 = lvTemperature.GetLabelMembership( \"Cool\", x );\n                 double y3 = lvTemperature.GetLabelMembership( \"Warm\", x );\n                 double y4 = lvTemperature.GetLabelMembership( \"Hot\", x );\n\n                 chartValues[0][j, 0] = x;\n                 chartValues[0][j, 1] = y1;\n                 chartValues[1][j, 0] = x;\n                 chartValues[1][j, 1] = y2;\n                 chartValues[2][j, 0] = x;\n                 chartValues[2][j, 1] = y3;\n                 chartValues[3][j, 0] = x;\n                 chartValues[3][j, 1] = y4;\n             }\n\n             chart.UpdateDataSeries( \"COLD\", chartValues[0] );\n             chart.UpdateDataSeries( \"COOL\", chartValues[1] );\n             chart.UpdateDataSeries( \"WARM\", chartValues[2] );\n             chart.UpdateDataSeries( \"HOT\", chartValues[3] );\n```", "```py\n            FuzzySet fsNear = new FuzzySet( \"Near\", new TrapezoidalFunction( 15, 50, TrapezoidalFunction.EdgeType.Right ) );\n             FuzzySet fsMedium = new FuzzySet( \"Medium\", new TrapezoidalFunction( 15, 50, 60, 100 ) );\n             FuzzySet fsFar = new FuzzySet( \"Far\", new TrapezoidalFunction( 60, 100, TrapezoidalFunction.EdgeType.Left ) );\n```", "```py\n            LinguisticVariable lvRight = new LinguisticVariable( \"RightDistance\", 0, 120 );\n             lvRight.AddLabel( fsNear );\n             lvRight.AddLabel( fsMedium );\n             lvRight.AddLabel( fsFar );\n```", "```py\n            LinguisticVariable lvLeft = new LinguisticVariable( \"LeftDistance\", 0, 120 );\n             lvLeft.AddLabel( fsNear );\n             lvLeft.AddLabel( fsMedium );\n             lvLeft.AddLabel( fsFar );\n```", "```py\n            LinguisticVariable lvFront = new LinguisticVariable( \"FrontalDistance\", 0, 120 );\n             lvFront.AddLabel( fsNear );\n             lvFront.AddLabel( fsMedium );\n             lvFront.AddLabel( fsFar );\n```", "```py\n            FuzzySet fsVN = new FuzzySet( \"VeryNegative\", new TrapezoidalFunction( -40, -35, TrapezoidalFunction.EdgeType.Right));\n             FuzzySet fsN = new FuzzySet( \"Negative\", new TrapezoidalFunction( -40, -35, -25, -20 ) );\n             FuzzySet fsLN = new FuzzySet( \"LittleNegative\", new TrapezoidalFunction( -25, -20, -10, -5 ) );\n             FuzzySet fsZero = new FuzzySet( \"Zero\", new TrapezoidalFunction( -10, 5, 5, 10 ) );\n             FuzzySet fsLP = new FuzzySet( \"LittlePositive\", new TrapezoidalFunction( 5, 10, 20, 25 ) );\n             FuzzySet fsP = new FuzzySet( \"Positive\", new TrapezoidalFunction( 20, 25, 35, 40 ) );\n             FuzzySet fsVP = new FuzzySet( \"VeryPositive\", new TrapezoidalFunction( 35, 40, TrapezoidalFunction.EdgeType.Left));\n```", "```py\n            LinguisticVariable lvAngle = new LinguisticVariable( \"Angle\", -50, 50 );\n             lvAngle.AddLabel( fsVN );\n             lvAngle.AddLabel( fsN );\n             lvAngle.AddLabel( fsLN );\n             lvAngle.AddLabel( fsZero );\n             lvAngle.AddLabel( fsLP );\n             lvAngle.AddLabel( fsP );\n             lvAngle.AddLabel( fsVP );\n```", "```py\n            Database fuzzyDB = new Database( );\n             fuzzyDB.AddVariable( lvFront );\n             fuzzyDB.AddVariable( lvLeft );\n             fuzzyDB.AddVariable( lvRight );\n             fuzzyDB.AddVariable( lvAngle );\n```", "```py\nIS = new InferenceSystem(fuzzyDB, new CentroidDefuzzifier(1000));\n```", "```py\nif (FirstInference)\n                 GetMeasures();\n\n             try\n             {\n                 DoInference();\n                 MoveAGV();\n                 GetMeasures();\n             }\n             catch (Exception ex)\n             {\n                 Debug.WriteLine(ex);\n             }\n```", "```py\n        private void GetMeasures()\n         {\n             // Getting AGV's position\n             pbTerrain.Image = CopyImage(OriginalMap);\n             Bitmap b = (Bitmap) pbTerrain.Image;\n             Point pPos = new Point(pbRobot.Left - pbTerrain.Left + 5, pbRobot.Top - pbTerrain.Top + 5);\n\n             // AGV on the wall\n             HandleAGVOnWall(b, pPos);\n\n             DrawAGV(pPos, b);\n\n             RefreshTerrain();\n         }\n```", "```py\nprivate void DrawAGV(Point pPos, Bitmap b)\n         {\n             Point pFrontObstacle = GetObstacle(pPos, b, -1, 0);\n             Point pLeftObstacle = GetObstacle(pPos, b, 1, 90);\n             Point pRightObstacle = GetObstacle(pPos, b, 1, -90);\n\n             // Showing beams\n             Graphics g = Graphics.FromImage(b);\n             if (cbLasers.Checked)\n             {\n                 g.DrawLine(new Pen(Color.Red, 1), pFrontObstacle, pPos);\n                 g.DrawLine(new Pen(Color.Red, 1), pLeftObstacle, pPos);\n                 g.DrawLine(new Pen(Color.Red, 1), pRightObstacle, pPos);\n             }\n\n             // Drawing AGV\n             if (btnRun.Text != RunLabel)\n             {\n                 g.FillEllipse(new SolidBrush(Color.Blue), pPos.X - 5, pPos.Y - 5, 10, 10);\n             }\n\n             g.DrawImage(b, 0, 0);\n             g.Dispose();\n\n             // Updating distances texts\n             txtFront.Text = GetDistance(pPos, pFrontObstacle).ToString();\n             txtLeft.Text = GetDistance(pPos, pLeftObstacle).ToString();\n             txtRight.Text = GetDistance(pPos, pRightObstacle).ToString();\n         }\n```", "```py\n private void DoInference()\n         {\n             // Setting inputs\n             IS?.SetInput(\"RightDistance\", Convert.ToSingle(txtRight.Text));\n             IS?.SetInput(\"LeftDistance\", Convert.ToSingle(txtLeft.Text));\n             IS?.SetInput(\"FrontalDistance\", Convert.ToSingle(txtFront.Text));\n\n             // Setting outputs\n             try\n             {\n                 double NewAngle = IS.Evaluate(\"Angle\");\n                 txtAngle.Text = NewAngle.ToString(\"##0.#0\");\n                 Angle += NewAngle;\n             }\n             catch (Exception)\n             {\n             }\n         }\n```", "```py\n private void MoveAGV()\n         {\n             double rad = ((Angle + 90) * Math.PI) / 180;\n             int Offset = 0;\n             int Inc = -4;\n\n             Offset += Inc;\n             int IncX = Convert.ToInt32(Offset * Math.Cos(rad));\n             int IncY = Convert.ToInt32(Offset * Math.Sin(rad));\n\n             // Leaving the track\n             if (cbTrajeto.Checked)\n             {\n                 Graphics g = Graphics.FromImage(OriginalMap);\n                 Point p1 = new Point(pbRobot.Left - pbTerrain.Left + pbRobot.Width / 2, pbRobot.Top - pbTerrain.Top + pbRobot.Height / 2);\n                 Point p2 = new Point(p1.X + IncX, p1.Y + IncY);\n                 g.DrawLine(new Pen(new SolidBrush( Color.Green)), p1, p2);\n                 g.DrawImage(OriginalMap, 0, 0);\n                 g.Dispose();\n             }\n\n             pbRobot.Top = pbRobot.Top + IncY;\n             pbRobot.Left = pbRobot.Left + IncX;\n         }\n```"]