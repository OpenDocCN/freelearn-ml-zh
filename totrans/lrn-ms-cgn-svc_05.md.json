["```py\n    public class SpeechToTextEventArgs : EventArgs\n    {\n        public SttStatus Status { get; private set; }\n        public string Message { get; private set; }\n        public List<string> Results { get; private set; }\n\n        public SpeechToTextEventArgs(SttStatus status, \n        string message, List<string> results = null)\n        {\n            Status = status;\n            Message = message;\n            Results = results;\n        }\n    }\n```", "```py\n    public event EventHandler<SpeechToTextEventArgs> OnSttStatusUpdated;\n\n    private DataRecognitionClient _dataRecClient;\n    private MicrophoneRecognitionClient _micRecClient;\n    private SpeechRecognitionMode _speechMode = SpeechRecognitionMode.ShortPhrase;\n\n    private string _language = \"en-US\";\n    private bool _isMicRecording = false;\n```", "```py\n    public SpeechToText(string bingApiKey)\n    {\n        _dataRecClient = SpeechRecognitionServiceFactory.CreateDataClientWithIntentUsingEndpointUrl(_language, bingApiKey, \"LUIS_ROOT_URI\");\n\n        _micRecClient = SpeechRecognitionServiceFactory.CreateMicrophoneClient(_speechMode, _language, bingApiKey);\n\n        Initialize();\n    }\n```", "```py\n    private void Initialize()\n    {\n        _micRecClient.OnMicrophoneStatus += OnMicrophoneStatus;\n        _micRecClient.OnPartialResponseReceived += OnPartialResponseReceived;\n        _micRecClient.OnResponseReceived += OnResponseReceived;\n        _micRecClient.OnConversationError += OnConversationErrorReceived;\n\n        _dataRecClient.OnIntent += OnIntentReceived;\n        _dataRecClient.OnPartialResponseReceived +=\n        OnPartialResponseReceived;\n        _dataRecClient.OnConversationError += OnConversationErrorReceived;\n        _dataRecClient.OnResponseReceived += OnResponseReceived;\n    }\n```", "```py\n    private void OnPartialResponseReceived(object sender, PartialSpeechResponseEventArgs e)\n    {\n        Debug.WriteLine($\"Partial response received:{e.PartialResult}\");\n    } \n```", "```py\nprivate void OnMicrophoneStatus(object sender, MicrophoneEventArgs e)\n{\n    Debug.WriteLine($\"Microphone status changed to recording: {e.Recording}\");\n}\n```", "```py\nprivate void OnIntentReceived(object sender, SpeechIntentEventArgs e)\n{\n    SpeechToTextEventArgs args = new SpeechToTextEventArgs(SttStatus.Success, $\"Intent received: {e.Intent.ToString()}.\\n Payload: {e.Payload}\");\n    RaiseSttStatusUpdated(args);\n}\n```", "```py\n    private void OnConversationErrorReceived(object sender, SpeechErrorEventArgs e)\n    {\n        if (_isMicRecording) StopMicRecording();\n```", "```py\n        string message = $\"Speech to text failed with status code:{e.SpeechErrorCode.ToString()}, and error message: {e.SpeechErrorText}\";\n\n        SpeechToTextEventArgs args = new SpeechToTextEventArgs(SttStatus.Error, message);\n\n        RaiseSttStatusUpdated(args);\n    }\n```", "```py\n    private void StopMicRecording()\n    {\n        _micRecClient.EndMicAndRecognition();\n        _isMicRecording = false;\n    }\n```", "```py\n    private void OnResponseReceived(object sender, SpeechResponseEventArgs e)\n    {\n        if (_isMicRecording) StopMicRecording();\n```", "```py\n    RecognizedPhrase[] recognizedPhrases = e.PhraseResponse.Results;\n    List<string> phrasesToDisplay = new List<string>();\n\n    foreach(RecognizedPhrase phrase in recognizedPhrases)\n    {\n        phrasesToDisplay.Add(phrase.DisplayText);\n    }\n```", "```py\n        SpeechToTextEventArgs args = new SpeechToTextEventArgs(SttStatus.Success, $\"STT completed with status: {e.PhraseResponse.RecognitionStatus.ToString()}\", phrasesToDisplay);\n\n        RaiseSttStatusUpdated(args);\n    }\n```", "```py\n    public void StartMicToText()\n    {\n        _micRecClient.StartMicAndRecognition();\n        _isMicRecording = true;\n    }\n```", "```py\n    public void StartAudioFileToText(string audioFileName) {\n        using (FileStream fileStream = new FileStream(audioFileName, FileMode.Open, FileAccess.Read))\n        {\n            int bytesRead = 0;\n            byte[] buffer = new byte[1024];\n```", "```py\n    try {\n        do {\n            bytesRead = fileStream.Read(buffer, 0, buffer.Length);\n            _dataRecClient.SendAudio(buffer, bytesRead);\n        } while (bytesRead > 0);\n    }\n```", "```py\n    catch(Exception ex) {\n        Debug.WriteLine($\"Exception caught: {ex.Message}\");\n    }\n    finally {\n        _dataRecClient.EndAudio();\n    }\n```", "```py\n    if (_micRecClient != null) {\n        _micRecClient.EndMicAndRecognition();\n        _micRecClient.OnMicrophoneStatus -= OnMicrophoneStatus;\n        _micRecClient.OnPartialResponseReceived -= OnPartialResponseReceived;\n        _micRecClient.OnResponseReceived -= OnResponseReceived;\n        _micRecClient.OnConversationError -= OnConversationErrorReceived;\n\n       _micRecClient.Dispose();\n       _micRecClient = null;\n    }\n\n    if(_dataRecClient != null) {\n        _dataRecClient.OnIntent -= OnIntentReceived;\n        _dataRecClient.OnPartialResponseReceived -= OnPartialResponseReceived;\n        _dataRecClient.OnConversationError -= OnConversationErrorReceived;\n        _dataRecClient.OnResponseReceived -= OnResponseReceived;\n\n        _dataRecClient.Dispose();\n        _dataRecClient = null;\n    }\n```", "```py\n    private SpeechToText _sttClient;\n    private TextToSpeech _ttsClient;\n    private string _bingApiKey = \"BING_SPEECH_API_KEY\";\n```", "```py\n_sttClient = new SpeechToText(_bingApiKey);\n_sttClient.OnSttStatusUpdated += OnSttStatusUpdated;\n\n_ttsClient = new TextToSpeech();\n_ttsClient.OnAudioAvailable += OnTtsAudioAvailable;\n_ttsClient.OnError += OnTtsError;\nGenerateHeaders();\n```", "```py\nprivate async void GenerateHeaders()\n{\n   if (await _ttsClient.GenerateAuthenticationToken(_bingApiKey))\n   _ttsClient.GenerateHeaders();\n}\n```", "```py\n    private void OnTtsError(object sender, AudioErrorEventArgs e)\n    {\n        Debug.WriteLine($\"Status: Audio service failed - {e.ErrorMessage}\");\n    }\n```", "```py\n    private void OnTtsAudioAvailable(object sender, AudioEventArgs e)\n    {\n        SoundPlayer player = new SoundPlayer(e.EventData);\n        player.Play();\n        e.EventData.Dispose();\n    }\n```", "```py\n    private void OnSttStatusUpdated(object sender, SpeechToTextEventArgs e) {\n        Application.Current.Dispatcher.Invoke(() =>  {\n            StringBuilder sb = new StringBuilder();\n\n            if(e.Status == SttStatus.Success) {\n               if(!string.IsNullOrEmpty(e.Message)) {\n                   sb.AppendFormat(\"Result message: {0}\\n\\n\", e.Message);\n                }\n```", "```py\n        if(e.Results != null && e.Results.Count != 0) {\n            sb.Append(\"Retrieved the following results:\\n\");\n                foreach(string sentence in e.Results) {\n                    sb.AppendFormat(\"{0}\\n\\n\", sentence);\n                }\n                sb.Append(\"Calling LUIS with the top result\\n\");\n                CallLuis(e.Results.FirstOrDefault());\n            }\n        }\n```", "```py\n            else {\n                sb.AppendFormat(\"Could not convert speech to text:{0}\\n\", e.Message);\n            }\n\n            sb.Append(\"\\n\");\n            ResultText = sb.ToString();\n        });\n    }\n```", "```py\n    private void RecordUtterance(object obj) {\n        _sttClient.StartMicToText();\n    }\n```", "```py\n    if (e.RequiresReply && !string.IsNullOrEmpty(e.DialogResponse))\n    {\n        await _ttsClient.SpeakAsync(e.DialogResponse, CancellationToken.None);\n        sb.AppendFormat(\"Response: {0}\\n\", e.DialogResponse);\n        sb.Append(\"Reply in the left textfield\");\n\n        RecordUtterance(sender);\n    }\n    else\n    {\n        await _ttsClient.SpeakAsync($\"Summary: {e.Message}\", CancellationToken.None);\n    }\n```", "```py\n    public class SpeakerIdentificationStatusUpdateEventArgs : EventArgs\n    {\n        public string Status { get; private set; }\n        public string Message { get; private set; }\n        public Identification IdentifiedProfile { get; set; }\n\n        public SpeakerIdentificationStatusUpdateEventArgs (string status, string message)\n       { \n           Status = status;\n           Message = message;\n       }\n    }\n```", "```py\n    public class SpeakerIdentificationErrorEventArgs : EventArgs {\n        public string ErrorMessage { get; private set; }\n\n        public SpeakerIdentificationErrorEventArgs(string errorMessage)\n        {\n            ErrorMessage = errorMessage;\n        }\n    }\n```", "```py\n    public event EventHandler <SpeakerIdentificationStatusUpdateEventArgs>\n        OnSpeakerIdentificationStatusUpdated;\n    public event EventHandler <SpeakerIdentificationErrorEventArgs>\n        OnSpeakerIdentificationError;\n\n    private ISpeakerIdentificationServiceClient _speakerIdentificationClient;\n```", "```py\n    private SpeakerIdentification _speakerIdentification;\n```", "```py\n    _speakerIdentification.OnSpeakerIdentificationError += OnSpeakerIdentificationError;\n    _speakerIdentification.OnSpeakerIdentificationStatusUpdated += OnSpeakerIdentificationStatusUpdated;\n```", "```py\n    Application.Current.Dispatcher.Invoke(() => \n    {\n        StatusText = e.Message;\n    });\n```", "```py\n    private async void AddSpeaker(object obj)\n    {\n        Guid speakerId = await _speakerIdentification.CreateSpeakerProfile();\n```", "```py\n        GetSpeakerProfiles();\n    }\n```", "```py\n    private async void GetSpeakerProfiles()\n    {\n        List<Guid> profiles = await _speakerIdentification.ListSpeakerProfiles();\n\n        if (profiles == null) return;\n```", "```py\n        foreach(Guid profile in profiles)\n        {\n            SpeakerProfiles.Add(profile);\n        }\n    }\n```", "```py\n    public async Task<Guid> CreateSpeakerProfile()\n    {\n        try\n        {\n            CreateProfileResponse response = await _speakerIdentificationClient.CreateProfileAsync(\"en-US\");\n```", "```py\n       if (response == null)\n      {\n         RaiseOnIdentificationError(\n            new SpeakerIdentificationErrorEventArgs\n               (\"Failed to create speaker profile.\"));\n         return Guid.Empty;\n      }\n\n      return response.ProfileId;\n   }\n```", "```py\n    public async Task<List<Guid>> ListSpeakerProfiles()\n    {\n        try\n        {\n            List<Guid> speakerProfiles = new List<Guid>();\n\n            Profile[] profiles = await _speakerIdentificationClient.GetProfilesAsync();\n```", "```py\n            if (profiles == null || profiles.Length == 0)\n            {\n                RaiseOnIdentificationError(new SpeakerIdentificationErrorEventArgs(\"No profiles exist\"));\n                return null;\n            }\n\n            foreach (Profile profile in profiles)\n            {\n                speakerProfiles.Add(profile.ProfileId);\n            }\n\n            return speakerProfiles;\n        }\n```", "```py\npublic async void DeleteSpeakerProfile(Guid profileId)\n{\n   try\n   {\n      await _speakerIdentificationClient.DeleteProfileAsync(profileId);\n   }\n   catch (IdentificationException ex)\n   {\n      RaiseOnIdentificationError(new SpeakerIdentificationErrorEventArgs($\"Failed to\n      delete speaker profile: {ex.Message}\"));\n   }\n   catch (Exception ex)\n   {\n      RaiseOnIdentificationError(new SpeakerIdentificationErrorEventArgs($\"Failed to\n      delete speaker profile: {ex.Message}\"));\n   }\n}\n```", "```py\n    _recorder = new Recording();\n    _recorder.OnAudioStreamAvailable += OnRecordingAudioStreamAvailable;\n    _recorder.OnRecordingError += OnRecordingError;\n```", "```py\n    Application.Current.Dispatcher.Invoke(() => \n    {               \n        _speakerIdentification.CreateSpeakerEnrollment(e.AudioStream, SelectedSpeakerProfile);\n    });\n```", "```py\n    _recorder.StartRecording();\n    _recorder.StopRecording();\n```", "```py\n    public async void CreateSpeakerEnrollment(Stream audioStream, Guid profileId) {\n        try {\n            OperationLocation location = await _speakerIdentificationClient.EnrollAsync(audioStream, profileId);\n```", "```py\n        if (location == null) {\n            RaiseOnIdentificationError(new SpeakerIdentificationErrorEventArgs(\"Failed to start enrollment process.\"));\n            return;\n        }\n\n        GetEnrollmentOperationStatus(location);\n    }\n```", "```py\n    private async void GetEnrollmentOperationStatus(OperationLocation location) {\n        try {\n            while(true) { \n                EnrollmentOperation result = await _speakerIdentificationClient.CheckEnrollmentStatusAsync(location);\n```", "```py\n                if(result.Status != Status.Running)\n                {\n                    RaiseOnIdentificationStatusUpdated(new SpeakerIdentificationStatusUpdateEventArgs(result.Status.ToString(),\n                    $\"Enrollment finished. Enrollment status: {result.ProcessingResult.EnrollmentStatus.ToString()}\"));\n                    break;\n                }\n\n                RaiseOnIdentificationStatusUpdated(new SpeakerIdentificationStatusUpdateEventArgs(result.Status.ToString(), \"Enrolling...\"));\n                await Task.Delay(1000);\n            }\n        }\n```", "```py\n        await _speakerIdentificationClient .ResetEnrollmentsAsync(profileId);\n```", "```py\n    _speakerIdentification.OnSpeakerIdentificationError += OnSpeakerIdentificationError;          \n    _speakerIdentification.OnSpeakerIdentificationStatusUpdated += OnSpeakerIdentificationStatusReceived; \n\n    _recording.OnAudioStreamAvailable += OnSpeakerRecordingAvailable;\n    _recording.OnRecordingError += OnSpeakerRecordingError;\n```", "```py\n    private async void OnSpeakerRecordingAvailable(object sender, RecordingAudioAvailableEventArgs e)\n    {\n        try\n        {\n            List<Guid> profiles = await _speakerIdentification.ListSpeakerProfiles();\n```", "```py\n            _speakerIdentification.IdentifySpeaker(e.AudioStream, profiles.ToArray());\n        }\n```", "```py\n    public async void IdentifySpeaker(Stream audioStream, Guid[] speakerIds)\n    {\n        try\n        {\n            OperationLocation location = await _speakerIdentificationClient.IdentifyAsync(audioStream, speakerIds);\n```", "```py\n        if (location == null)\n        { \n            RaiseOnIdentificationError(new SpeakerIdentificationErrorEventArgs (\"Failed to identify speaker.\"));\n            return;\n        }\n        GetIdentificationOperationStatus(location);                \n    }\n```", "```py\n     private async void GetIdentificationOperationStatus (OperationLocation location)\n     {\n         try\n         { \n             while (true)\n             {\n                 IdentificationOperation result = await _speakerIdentificationClient.CheckIdentificationStatusAsync(location);\n```", "```py\n            if (result.Status != Status.Running)\n            {\n                RaiseOnIdentificationStatusUpdated(new SpeakerIdentificationStatusUpdateEventArgs(result.Status.ToString(), $\"Enrollment finished with message:{result.Message}.\") { IdentifiedProfile = result.ProcessingResult });\n                break;\n            } \n\n            RaiseOnIdentificationStatusUpdated(new SpeakerIdentificationStatusUpdateEventArgs(result.Status.ToString(), \"Identifying...\"));\n\n            await Task.Delay(1000);\n        }\n    }\n```", "```py\n    Application.Current.Dispatcher.Invoke(() => \n    {\n        if (e.IdentifiedProfile == null) return;\n\n        SystemResponse = $\"Hi there,{e.IdentifiedProfile.IdentifiedProfileId}\";\n    });\n```", "```py\n    public class SpeakerVerificationStatusUpdateEventArgs : EventArgs\n    {\n        public string Status { get; private set; }\n        public string Message { get; private set; }\n        public Verification VerifiedProfile { get; set; }\n\n       public SpeakerVerificationStatusUpdateEventArgs(string status,string message)\n       {\n           Status = status;\n           Message = message;\n       }\n    }\n```", "```py\n    public class SpeakerVerificationErrorEventArgs : EventArgs\n    {\n        public string ErrorMessage { get; private set; }\n\n        public SpeakerVerificationErrorEventArgs(string errorMessage)\n        {\n            ErrorMessage = errorMessage;\n        }\n    }\n```", "```py\n    public event EventHandler <SpeakerVerificationStatusUpdateEventArgs> OnSpeakerVerificationStatusUpdated;\n\n    public event EventHandler<SpeakerVerificationErrorEventArgs> OnSpeakerVerificationError;\n```", "```py\n    public async Task<List<string>> GetVerificationPhrase()\n    {\n        try\n        {\n            List<string> phrases = new List<string>();\n\n            VerificationPhrase[] results = await _speakerVerificationClient.GetPhrasesAsync(\"en-US\");\n```", "```py\n            foreach(VerificationPhrase phrase in results) {\n                phrases.Add(phrase.Phrase);\n            }\n            return phrases;\n        }\n```", "```py\n    public async void CreateSpeakerEnrollment(Stream audioStream, Guid profileId) {\n        try {\n            Enrollment enrollmentStatus = await _speakerVerificationClient.EnrollAsync(audioStream, profileId);\n```", "```py\n            if (enrollmentStatus == null) {\n                RaiseOnVerificationError(new SpeakerVerificationErrorEventArgs(\"Failed to start enrollment process.\"));\n                return;\n            }\n\n           RaiseOnVerificationStatusUpdate(new SpeakerVerificationStatusUpdateEventArgs(\"Succeeded\", $\"Enrollment status:{enrollmentStatus.EnrollmentStatus}\"));\n       }\n```", "```py\n    public async void VerifySpeaker(Stream audioStream, Guid speakerProfile) {\n        try {\n            Verification verification = await _speakerVerificationClient.VerifyAsync(audioStream, speakerProfile);\n```", "```py\n            if (verification == null) {\n                RaiseOnVerificationError(new SpeakerVerificationErrorEventArgs(\"Failed to verify speaker.\"));\n                return;\n            }\n\n            RaiseOnVerificationStatusUpdate(new SpeakerVerificationStatusUpdateEventArgs(\"Verified\", \"Verified speaker\") { VerifiedProfile = verification });             \n        }\n```"]