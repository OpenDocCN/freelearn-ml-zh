- en: '4'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Creating a Good Machine Learning Solution with the Qlik Platform
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter provides an overview of the key steps involved in creating effective
    machine learning solutions with Qlik. The same principles apply to all machine
    learning tools and solutions.
  prefs: []
  type: TYPE_NORMAL
- en: The process starts with defining the problem to be solved and aligning it with
    the organization’s goals. Data preparation is critical and Qlik provides robust
    data preparation capabilities for collecting, cleaning, and transforming data
    to ensure its quality and relevance.
  prefs: []
  type: TYPE_NORMAL
- en: Data exploration and visualization using Qlik’s features are essential for understanding
    data patterns and informing the machine learning model. Model selection is crucial
    and Qlik offers a wide range of algorithms for different use cases.
  prefs: []
  type: TYPE_NORMAL
- en: Once the model is selected, it needs to be trained using the corresponding tools.
    Model evaluation using appropriate metrics helps assess its performance and make
    necessary refinements.
  prefs: []
  type: TYPE_NORMAL
- en: Deployment of the model within the Qlik environment involves integration into
    apps or dashboards, creating APIs, or embedding it into web applications. Monitoring
    and maintenance of the deployed model ensures its accuracy and relevance over
    time. Interpretation and communication of results are key for driving decision-making.
    Qlik’s visualization and reporting capabilities enable effective communication
    of insights to stakeholders.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is what you will learn as a part of this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: How to define a machine learning problem and select the correct model to solve
    it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Steps needed to clean and prepare data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to prepare and validate the machine learning model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to effectively visualize and communicate the end results
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining a machine learning problem
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Defining a machine learning problem involves identifying a specific business
    challenge or analytical objective that can be addressed using machine learning
    techniques. The process of defining a problem can be divided into a few key steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Understand the business objective**: Start by gaining a clear understanding
    of the overall business objective or problem that needs to be solved. This could
    be improving customer retention, optimizing pricing strategies, predicting equipment
    failures, or identifying potential fraud cases, among others.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Identify the key problem or challenge**: Once the business objective is defined,
    identify the specific problem or challenge that needs to be addressed using machine
    learning. This involves understanding the key pain points, limitations, or gaps
    in the current process or system that can be improved through machine learning.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Define the scope and boundaries**: Clearly define the scope and boundaries
    of the machine learning problem. This includes determining the specific data inputs
    and outputs, the timeframe of the problem, and any constraints or limitations
    in terms of data availability, resources, or feasibility.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Formulate the problem statement**: Craft a clear and concise problem statement
    that describes the business challenge or objective in a specific and measurable
    way. The problem statement should be well defined and measurable, allowing for
    objective evaluation of the machine learning solution’s success.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Consider the data requirements**: Analyze the data requirements for the machine
    learning problem. Identify the relevant data sources, data types, and data quality
    requirements. Consider the availability, completeness, and accuracy of data, as
    well as any data privacy or security considerations.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Define the evaluation metrics**: Define the evaluation metrics that will
    be used to assess the performance of the machine learning solution. These metrics
    should align with the problem statement and business objective and provide a quantitative
    measure of the solution’s success.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Consider the feasibility and impact**: Evaluate the feasibility and potential
    impact of the machine learning solution. Consider the technical feasibility of
    implementing the solution, the availability of necessary resources, and the expected
    impact on the business objective or problem being addressed.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: By following these steps, you can effectively define a machine learning problem
    and lay the foundation for building a successful machine learning solution. Clear
    problem definition is crucial for guiding the entire machine learning process,
    from data preparation to model training, evaluation, and deployment.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'Qlik uses a four-step framework to help define machine learning problems. The
    framework consists of the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Event trigger
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Example: Customer places an order'
  prefs: []
  type: TYPE_NORMAL
- en: Target
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Example: Another order is placed within one year (Yes | No)'
  prefs: []
  type: TYPE_NORMAL
- en: Features
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Examples: Age, State, Number of previous orders, Shipping type'
  prefs: []
  type: TYPE_NORMAL
- en: Prediction point
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Example: One month after order'
  prefs: []
  type: TYPE_NORMAL
- en: The framework described here is an extended and more comprehensive version of
    this framework. This framework can be seen in use in [*Chapter 10*](B19863_10.xhtml#_idTextAnchor124).
  prefs: []
  type: TYPE_NORMAL
- en: 'If we are going to use Qlik AutoML for our model creation, it is important
    to remember that the following scenarios are supported:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Binary classification**: This applies to any question that can be answered
    with *Yes* or *No*. Examples: *Will my customer churn? Will my inventory stock
    run out? Will my patient cancel* *their appointment?*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Optimally, we want to turn every machine learning question into a binary classification
    problem if possible since it will deliver the best accuracy in most cases. However,
    in some cases, we will get better results using other types of algorithms. It
    is important to choose the correct algorithm based on the problem we are solving.
  prefs: []
  type: TYPE_NORMAL
- en: 'The binary classification problem can be described with the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.1: Binary classification](img/B19863_04_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.1: Binary classification'
  prefs: []
  type: TYPE_NORMAL
- en: '**Multi-class classification**: Questions where there are multiple possible
    outcomes. Examples: *What product will the customer purchase? What facility will
    a patient be* *discharged to?*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The multi-class classification problem can be illustrated as in the following
    figure:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 4.2: Multi-class classification](img/B19863_04_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.2: Multi-class classification'
  prefs: []
  type: TYPE_NORMAL
- en: '**Regression**: This involves the prediction of a value at a future point.
    Examples: *What will our sales be at the end of the year? What is the expected
    waiting time for* *a patient?*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Regression can be visualized as in the following figure:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 4.3: Regression](img/B19863_04_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.3: Regression'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Other use cases can be solved with the Advanced Analytics integration and tools
    including R, Python, AWS SageMaker, or Azure ML Studio. We will cover setting
    up these environments in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: We have now investigated the basics of forming a machine learning problem and
    what kind of problems Qlik AutoML can be used to help us solve. In the next section,
    we will look at the common data preparation steps required for most tasks in machine
    learning.
  prefs: []
  type: TYPE_NORMAL
- en: Cleaning and preparing data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Data preparation is a crucial step in machine learning because the quality,
    relevance, and suitability of the data used for model training directly impact
    the accuracy, reliability, and effectiveness of the resulting machine learning
    models.
  prefs: []
  type: TYPE_NORMAL
- en: 'General data preparation steps include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Removing** **null values**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Removing columns that are** **not needed**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Encoding (for example, the one-hot encoding that we used in some of the examples
    in** [*Chapter 2*](B19863_02.xhtml#_idTextAnchor037)**)**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Feature scaling**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Splitting into test and** **training datasets**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting correct data types
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removing duplicates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Correcting data errors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removing outliers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Those steps that are automatically taken care of by Qlik AutoML are shown in
    **bold** in the preceding list. The rest of the steps can be done in Qlik Sense.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s take a closer look at some of these steps using examples.
  prefs: []
  type: TYPE_NORMAL
- en: Example 1 – one-hot encoding
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s assume that we have the following dataset:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **ID** | **Category** | **Carnivore** |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | Mammal | No |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | Bird | No |'
  prefs: []
  type: TYPE_TB
- en: '| 3 | Mammal | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| 4 | Reptile | No |'
  prefs: []
  type: TYPE_TB
- en: '| 5 | Reptile | Yes |'
  prefs: []
  type: TYPE_TB
- en: 'Table 4.1: Example dataset'
  prefs: []
  type: TYPE_NORMAL
- en: 'If we one-hot encode the preceding table, it will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **ID** | **Mammal** | **Reptile** | **Bird** | **Carnivore** |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | 1 | 0 | 0 | No |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | 0 | 0 | 1 | No |'
  prefs: []
  type: TYPE_TB
- en: '| 3 | 1 | 0 | 0 | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| 4 | 0 | 1 | 0 | No |'
  prefs: []
  type: TYPE_TB
- en: '| 5 | 0 | 1 | 0 | Yes |'
  prefs: []
  type: TYPE_TB
- en: 'Table 4.2: One-hot encoded example'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is some example code that achieves the preceding result using Python:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, the `OneHotEncoder` from scikit-learn is used to perform
    one-hot encoding on the `Category` column. The resulting one-hot encoded values
    are then added as new columns to the DataFrame, with each category represented
    as a binary value (1 or 0) in its respective column.
  prefs: []
  type: TYPE_NORMAL
- en: Example 2 – feature scaling
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Feature scaling is important in machine learning to ensure that all features
    or variables have similar scales, as it can affect the performance and convergence
    of many machine learning algorithms. Min-max scaling is one of the methods commonly
    used for feature scaling, where the values are scaled to a specific range, usually
    between 0 and 1.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s assume that we have the following dataset:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **ID** | **Age** | **Income** |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | 25 | 50000 |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | 30 | 60000 |'
  prefs: []
  type: TYPE_TB
- en: '| 3 | 35 | 70000 |'
  prefs: []
  type: TYPE_TB
- en: '| 4 | 40 | 80000 |'
  prefs: []
  type: TYPE_TB
- en: '| 5 | 45 | 90000 |'
  prefs: []
  type: TYPE_TB
- en: 'Table 4.3: Example dataset'
  prefs: []
  type: TYPE_NORMAL
- en: 'After feature scaling, we will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **ID** | **Age** | **Income** |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | 0.00 | 0.00 |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | 0.25 | 0.20 |'
  prefs: []
  type: TYPE_TB
- en: '| 3 | 0.50 | 0.40 |'
  prefs: []
  type: TYPE_TB
- en: '| 4 | 0.75 | 0.60 |'
  prefs: []
  type: TYPE_TB
- en: '| 5 | 1.00 | 0.80 |'
  prefs: []
  type: TYPE_TB
- en: 'Table 4.4: Example dataset after feature scaling'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is some Python code to achieve the preceding scaling:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, `MinMaxScaler` from scikit-learn is used to perform
    feature scaling on the `Age` and `Income` columns of the DataFrame. The `fit_transform`
    method is called on the selected columns to scale the values between 0 and 1,
    based on the minimum and maximum values in each column. The resulting scaled values
    are then updated in the original DataFrame.
  prefs: []
  type: TYPE_NORMAL
- en: The functionality of the preceding example is automatically taken care of by
    Qlik AutoML but when you are using the Advanced Analytics integration these steps
    should be considered. The examples reviewed so far in this chapter were written
    with Python but the same functionality can be also achieved using Qlik scripting
    or other data manipulation methods. Additionally, null encoding, data type handling,
    and many other data preparation tasks can be done in Qlik. We will take a closer
    look at these in [*Chapter 6*](B19863_06.xhtml#_idTextAnchor083).
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have familiarized ourselves with the common data cleaning and preprocessing
    steps, let’s examine model preparation and validation. These aspects are important
    to gain trust in our model and evaluate the results.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing and validating a model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [*Chapter 1*](B19863_01.xhtml#_idTextAnchor014), we discovered some of the
    concepts for model validation and preparation. Qlik AutoML handles model selection
    automatically and provides us with comprehensive information to support the validation.
    We will consider model selection and validation in more detail in [*Chapter 7*](B19863_07.xhtml#_idTextAnchor096)
    and Qlik AutoML in [*Chapter 8*](B19863_08.xhtml#_idTextAnchor101). In this section,
    we will prepare for these chapters by summarizing the most important steps of
    model preparation and validation in Qlik. The following steps are written on Qlik
    AutoML point of view. When using the Advanced Analytics integration there might
    be small differences based on the selected technology (ie. R, Python, Azure ML
    Studio, AWS SageMaker, etc.).
  prefs: []
  type: TYPE_NORMAL
- en: 'General validation and preparation steps include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Data preparation**: Start by preparing your data for machine learning. Load
    your data into Qlik Sense, clean and preprocess it, handle missing values, and
    perform feature engineering if necessary. Qlik AutoML supports various data types,
    including numeric, categorical, and textual data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Model selection**: Choose the appropriate machine learning algorithm for
    your problem. Qlik AutoML offers a wide range of algorithms, including decision
    trees, random forests, gradient boosting, support vector machines, and more. You
    can select multiple algorithms to be evaluated simultaneously for model comparison.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Model training**: Once you have selected the algorithms, Qlik AutoML automatically
    trains multiple models with different hyperparameter configurations. The models
    are trained on a portion of your data using cross-validation, which helps to evaluate
    their performance and select the best-performing model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Model evaluation**: After the models are trained, Qlik AutoML provides comprehensive
    model evaluation metrics such as accuracy, AUC, and F1 score to assess the performance
    of each model. You can compare the performance of different models and select
    the one that performs best on your data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Model deployment**: Once you have chosen the best model, you can deploy it
    in your Qlik Sense app. Qlik AutoML generates the necessary code to implement
    the model in your app, making it easy to integrate the model into your analytics
    workflow.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Model monitoring**: Qlik AutoML allows you to monitor the performance of
    your deployed model in real time. You can track key performance metrics and take
    necessary actions if the model’s performance deteriorates over time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Model validation**: Finally, it’s important to validate the performance of
    your deployed model using real-world data. Monitor the model’s predictions and
    compare them with actual outcomes to ensure that the model is making accurate
    and reliable predictions in a real-world setting.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this section, we have covered the methods of model preparation and validation
    in general. The final piece of the machine learning project is typically visualization
    of the end results. Let’s cover the general principles of that in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Visualizing the end results
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When visualizing the end results, we have several options to consider in separate
    parts of the machine learning solution creation. We will take a deeper look into
    visualization techniques and different chart types in [*Chapter 9*](B19863_09.xhtml#_idTextAnchor109).
    However, here are some general steps to consider:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Load data**: Load your machine learning results data into Qlik Sense either
    using data sources or direct connection to Qlik AutoML or third-party machine
    learning platforms. This data can include predicted values, actual values, model
    evaluation metrics, and other relevant information.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Create visualizations**: Use Qlik Sense’s built-in visualization tools to
    create visual representations of your machine learning results. You can choose
    from various chart types depending on the type of data and the insights you want
    to convey. Planning a clean and visually appealing user interface is an important
    step.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Customize visualizations**: Customize the appearance and properties of your
    visualizations to make them visually appealing and informative. Try to select
    the best possible components to enhance the readability and ease of understanding
    of your machine learning results. Augment graphical information with written explanations
    if needed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Share and collaborate**: Share your machine learning results visualizations
    with relevant stakeholders, such as team members, managers, or clients, using
    Qlik Sense’s sharing and collaboration features. You can publish visualizations
    to a Qlik Sense app, embed them in other applications, or export them in various
    formats such as PDF, image, or HTML for easy sharing and dissemination. Utilizing
    Qlik Alerting, Notes, Storytelling, and other advanced features is encouraged.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Planning the visualizations and communicating results effectively is an important
    part of driving user adoption of your machine learning solution. By leveraging
    the visualization capabilities of Qlik Sense, you can effectively communicate
    and showcase your machine learning results in a visually compelling and interactive
    manner, enabling users to gain insights and make informed decisions based on the
    outcomes of your machine learning models.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following screenshot, we can see one example of a Qlik Sense dashboard
    used to visualize results from a Qlik AutoML model:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.4: Example dashboard visualizing results from Qlik AutoML](img/B19863_04_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.4: Example dashboard visualizing results from Qlik AutoML'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we started to move a bit closer to implementing a machine learning
    solution with Qlik tools. We discovered the importance of forming a correct business
    question to be solved and what aspects should be considered when forming a problem.
  prefs: []
  type: TYPE_NORMAL
- en: We discovered some general steps of data preparation and how these should be
    handled. More detailed techniques for data modeling and transformations are introduced
    in [*Chapter 6*](B19863_06.xhtml#_idTextAnchor083). We also investigated the concept
    of model preparation and validation briefly.
  prefs: []
  type: TYPE_NORMAL
- en: At the end of this chapter, we discussed the importance of presentation and
    what to consider when visualizing results with Qlik. This topic is considered
    in more detail in [*Chapter 9*](B19863_09.xhtml#_idTextAnchor109).
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we are going to find out how to prepare environments for
    our machine learning solutions. We will install on-premises integration for R
    and Python, discover how to utilize APIs and Advanced Analytics integration to
    interact with Azure ML Studio and AWS SageMaker, and how to set up a Qlik tenant
    for AutoML. These steps are essential to get our environments ready for actual
    implementations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Part 2: Machine learning algorithms and models with Qlik'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section will cover the actual creation of machine learning project using
    Qlik tools with hands-on examples. The section starts with the setup process required
    to utilize the tools effectively. Techniques required to preprocess the data with
    Qlik Sense are covered in Chapter 6 followed by best practices for monitoring
    the models and handling the deployments. Towards the end of the section, we will
    cover the functionality of Qlik AutoML using concrete examples. At the end of
    this section, we will look at the important aspect of visualizing the results.
  prefs: []
  type: TYPE_NORMAL
- en: 'This section has the following chapters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 5*](B19863_05.xhtml#_idTextAnchor071)*:* *Setting Up the Environments*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 6*](B19863_06.xhtml#_idTextAnchor083)*:* *Preprocessing and Exploring
    Data with Qlik Sense*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 7*](B19863_07.xhtml#_idTextAnchor096)*:* *Deploying and Monitoring
    Machine Learning Models*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 8*](B19863_08.xhtml#_idTextAnchor101)*: Utilising Qlik AutoML*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 9*](B19863_09.xhtml#_idTextAnchor109)*:* *Advanced Data Visualization
    Techniques for Machine Learning Solutions*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
