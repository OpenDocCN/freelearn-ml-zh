- en: Chapter 7. Movie Recommendation System Web Application
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 7 章。电影推荐系统网络应用程序
- en: 'The purpose of this chapter is to explain a real case example of the recommendation
    system in action, using the Django framework. We are going to implement a movie
    recommendation system in which each user that subscribes to the service will receive
    suggested movies based on his preferences as we have discussed in [Chapter 5](text00037.html#page
    "Chapter 5. Recommendation Systems") , *Recommendation systems* , also we are
    going to use the same data which consists of 603 movies rated more than 50 times
    by 942 users. In order to receive recommendations, each user has to rate a certain
    number of movies, so an information retrieval system ([Chapter 4](text00032.html#ch04
    "Chapter 4. Web Mining Techniques") , *Web-mining techniques* ) to search the
    movies to rate is implemented. The different parts of the Django application are
    going to be discussed: settings, models, user login/logout, commands, information
    retrieval system, recommendation systems, an admin interface and APIs (all the
    code is available on the GitHub of the author `chapter_7` folder at [https://github.com/ai2010/machine_learning_for_the_web/tree/master/chapter_7](https://github.com/ai2010/machine_learning_for_the_web/tree/master/chapter_7)
    ). Since [Chapter 6](text00046.html#ch06 "Chapter 6. Getting Started with Django")
    , *Basics of Django: a simple web framework* just introduced the main features
    of Django, whenever a new feature is employed a technical explanation is also
    provided. Now we can start describing the different settings and the initial setup
    to run the application.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的目的是解释一个实际案例，展示推荐系统在实际中的应用，使用 Django 框架。我们将实现一个电影推荐系统，其中每个订阅服务的用户将根据我们在 [第
    5 章](text00037.html#page "第 5 章。推荐系统") 中讨论的偏好，收到推荐的电影。同样，我们也将使用相同的数据，该数据由 942
    个用户对 603 部电影超过 50 次的评分组成。为了接收推荐，每个用户必须对一定数量的电影进行评分，因此实现了一个信息检索系统 ([第 4 章](text00032.html#ch04
    "第 4 章。网络挖掘技术")，*网络挖掘技术*) 来搜索评分的电影。我们将讨论 Django 应用程序的不同部分：设置、模型、用户登录/注销、命令、信息检索系统、推荐系统、管理界面和
    API（所有代码均可在作者的 GitHub 上的 `chapter_7` 文件夹中找到，网址为 [https://github.com/ai2010/machine_learning_for_the_web/tree/master/chapter_7](https://github.com/ai2010/machine_learning_for_the_web/tree/master/chapter_7)）。自
    [第 6 章](text00046.html#ch06 "第 6 章。开始使用 Django：一个简单的网络框架") 介绍了 Django 的主要功能以来，每当使用一个新功能时，也会提供技术解释。现在我们可以开始描述不同的设置和初始设置来运行应用程序。
- en: Application setup
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用程序设置
- en: 'We create and start Django as usual:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们像往常一样创建并启动 Django：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'and from the `server_movierecsys` folder we start the application:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 从 `server_movierecsys` 文件夹启动应用程序：
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now the `settings.py` needs to be configured. As we see in [Chapter 6](text00046.html#ch06
    "Chapter 6. Getting Started with Django") , *Basics of Django: a simple web framework*
    we set the installed apps, HTML templates, a layout formatting folder, and an
    SQLite database:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 现在需要配置 `settings.py`。正如我们在 [第 6 章](text00046.html#ch06 "第 6 章。开始使用 Django：一个简单的网络框架")
    中所看到的，我们设置了已安装的应用程序、HTML 模板、布局格式化文件夹和 SQLite 数据库：
- en: '[PRE2]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Apart from the standard apps, and the rest framework (swagger), the `books_recsys_app`
    has been included in the installed apps list.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 除了标准应用程序和其余的框架（swagger）之外，`books_recsys_app` 已被包含在已安装的应用程序列表中。
- en: 'In this case, we need to load data persistently in the memory so that the user
    experience is improved by not calculating or retrieving data at each user request.
    To save data or the results of expensive calculations in the memory, we set up
    the cache system of Django in `settings.py` :'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们需要将数据持久地加载到内存中，以通过不在每个用户请求时计算或检索数据来提高用户体验。为了在内存中保存数据或昂贵的计算结果，我们在 `settings.py`
    中设置了 Django 的缓存系统：
- en: '[PRE3]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We have chosen the **File Based Cache** cache type stored in `/var/tmp/django_cache`
    and a `None` timeout which means the data in the cache will never expire.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们选择了存储在 `/var/tmp/django_cache` 的 **基于文件的缓存** 缓存类型，以及一个 `None` 超时，这意味着缓存中的数据永远不会过期。
- en: 'To use the admin interface, we set up the `superuser` account through the command:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用管理界面，我们通过以下命令设置 `superuser` 账户：
- en: '[PRE4]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The application is live at `http://localhost:8000/` by typing:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序通过输入以下命令在 `http://localhost:8000/` 上运行：
- en: '[PRE5]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Models
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模型
- en: 'In this application, we need to store the data related to each movie and the
    movies'' ratings from each user of the website. We set up three models:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个应用程序中，我们需要存储与每部电影相关的数据以及网站每个用户对电影的评分。我们设置了三个模型：
- en: '[PRE6]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The model `MovieData` stores the data for each movie: title, description, and
    vector representation (`ndim` is the dimension of the vector representation).
    `MovieRated` records each movie rated by the user logged in (each object `MovieRated`
    is associated with has a `UserProfile` that utilizes the website). The `UserProfile`
    model stores all the users that sign up to the website, so they can rate movies
    and receive recommendations. Each `UserProfile` extends the default Django user
    model by adding the `array` field, which stores all the movie''s ratings from
    the `user,` and the `recsvec` field which stores his last recommendations: the
    `save` function is overridden to fill the `array` field with all the `MovieRated`
    objects associated with the user (if the `else` statement is `true` ), and to
    fill the `lastrecs` field with the last recommendations (`else if` statement).
    Note that the `MovieRated` model has a `UserProfile` foreign key with the `related_name`
    equal to `ratedmovies` : in the `save` function of the `UserProfile` model, `self.ratedmovies.all()`
    refers to all the `RatedMovie` objects that have the same `UserProfile` value.
    The field `arrayratedmoviesindxs` on the `UserProfile` model records all the movies
    rated by the user and it is used by the API of the application.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 模型`MovieData`存储每部电影的详细信息：标题、描述和向量表示（`ndim`是向量表示的维度）。`MovieRated`记录登录用户评价的每部电影（每个`MovieRated`对象都与一个`UserProfile`相关联，该`UserProfile`利用网站）。`UserProfile`模型存储所有注册到网站的用户，以便他们可以评价电影并接收推荐。每个`UserProfile`通过添加`array`字段扩展默认的Django用户模型，该字段存储用户的所有电影评价，以及`recsvec`字段，该字段存储他的最后推荐：`save`函数被覆盖以填充`array`字段，包含与用户关联的所有`MovieRated`对象（如果`else`语句为`true`），以及填充`lastrecs`字段，包含最后的推荐（`else
    if`语句）。请注意，`MovieRated`模型有一个`UserProfile`外键，其`related_name`等于`ratedmovies`：在`UserProfile`模型的`save`函数中，`self.ratedmovies.all()`指的是所有具有相同`UserProfile`值的`RatedMovie`对象。`UserProfile`模型上的`arrayratedmoviesindxs`字段记录用户评价的所有电影，并被应用程序的API使用。
- en: 'To write these data structures on the database we need to run:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 要将这些数据结构写入数据库，我们需要运行：
- en: '[PRE7]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Commands
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 命令
- en: 'The commands used in this application are needed to load the data into the
    memory (cache) and make the user experience fast. Although the movie database
    is the same used in [Chapter 4](text00032.html#ch04 "Chapter 4. Web Mining Techniques")
    , *Web mining techniques* (that is 603 movies rated more than 50 times by 942
    users), each movie needs a description to set up an information retrieval system
    on the movies to rate. The first command we develop takes all the movie titles
    in the utility matrix used in [Chapter 4](text00032.html#ch04 "Chapter 4. Web
    Mining Techniques") , *Web Mining Techniques* and collects the corresponding descriptions
    from **Open Movie Database** ( **OMDb** ) online service:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 本应用中使用的命令用于将数据加载到内存（缓存）中，以加快用户体验。尽管电影数据库与[第4章](text00032.html#ch04 "第4章. 网络挖掘技术")中使用的相同，*网络挖掘技术*（即603部电影，由942个用户评价超过50次），但每部电影都需要一个描述来设置一个用于评价电影的信息检索系统。我们开发的第一个命令将[第4章](text00032.html#ch04
    "第4章. 网络挖掘技术")中使用的效用矩阵中的所有电影标题取出来，从**Open Movie Database**（**OMDb**）在线服务收集相应的描述：
- en: '[PRE8]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The command syntax is:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 命令语法是：
- en: '[PRE9]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Each movie title contained in the `utilitymatrix` file is used by the `getplotfromomdb`
    function to retrieve the movie's description (`plot` ) from the website [http://www.omdbapi.com/](http://www.omdbapi.com/)
    using the requests in the Python module. The descriptions (and `titles` ) of the
    movies are then saved in a CSV file (`outputplots` ) together with the corresponding
    utility matrix (`outputumatrix` ).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 包含在`utilitymatrix`文件中的每个电影标题都由`getplotfromomdb`函数使用Python模块中的请求从网站[http://www.omdbapi.com/](http://www.omdbapi.com/)检索电影的描述（`plot`）。然后，电影的描述（和`titles`）与相应的效用矩阵（`outputumatrix`）一起保存在CSV文件（`outputplots`）中。
- en: 'The other command will take the movie''s descriptions and create an information
    retrieval system ( **Term Frequency, Inverse Document Frequency** ( **TF-IDF**
    ) model) to allow the user to find movies typing some relevant words. This tf-idf
    model is then saved in the Django cache together with the initial recommendation
    systems models ( **CF item-based** and **log-likelihood** ratio). The code is
    as follows:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个命令将电影的描述创建一个信息检索系统（**词频逆文档频率**（**TF-IDF**）模型），使用户能够通过输入一些相关词汇来查找电影。然后，这个tf-idf模型与初始推荐系统模型（**基于物品的协同过滤**和**对数似然比**）一起保存在Django缓存中。代码如下：
- en: '[PRE10]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'To run the command the syntax is:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 运行命令的语法是：
- en: '[PRE11]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The input parameter takes the movie's descriptions obtained using the `get_plotsfromtitles`
    command and creates a `tf-idf` model (see [Chapter 4](text00032.html#ch04 "Chapter 4. Web
    Mining Techniques") , *Web-mining techniques* ) using a maximum of words specified
    by the `nmaxwords` parameter. The data of each movie is also saved in a `MovieData`
    object (title, tf-idf representation, description, and `ndim` number of words
    of the tf-idf vocabulary). Note that the first time the command is run the `stopwords`
    from `nltk.download('stopwords')` (commented in the preceding code) need to be
    downloaded.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 输入参数使用`get_plotsfromtitles`命令获取电影的描述，并使用`nmaxwords`参数指定的最大单词数创建一个`tf-idf`模型（见[第4章](text00032.html#ch04
    "第4章. 网络挖掘技术")，*网络挖掘技术*）。每部电影的资料也保存在一个`MovieData`对象中（标题、tf-idf表示、描述和tf-idf词汇表的`ndim`单词数）。请注意，第一次运行该命令时，需要下载`nltk.download('stopwords')`中的`stopwords`（在前面代码中已注释）。
- en: 'The tf-idf model, the title''s list, and the matrix of the tf-idf movies''
    representations, are saved in the Django cache using the commands:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令将tf-idf模型、标题列表和tf-idf电影表示的矩阵保存在Django缓存中：
- en: '[PRE12]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Note
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that the cache Django module (`django.core.cache` ) needs to be loaded
    (at the beginning of the file) to be used.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，需要加载Django缓存模块（`django.core.cache`）（在文件开头）才能使用。
- en: 'In the same way, the utility matrix (`umatrixfile` parameter) is used to initialize
    the two recommendation systems used by the application: item-based collaborative
    filtering and log-likelihood ratio method. Both methods are not written in the
    preceding code because they are essentially the same as the code described in
    [Chapter 5](text00037.html#page "Chapter 5. Recommendation Systems") , *Recommendation
    systems* (the full code can be seen in the `chapter_7` folder of the author''s
    GitHub repository as usual). The methods and the utility matrix are then loaded
    into the Django cache ready to use:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，实用矩阵（`umatrixfile`参数）用于初始化应用程序使用的两个推荐系统：基于项目的协同过滤和似然比方法。这两种方法在前面代码中没有编写，因为它们基本上与[第5章](text00037.html#page
    "第5章. 推荐系统")中描述的代码相同（完整的代码可以在作者的GitHub仓库的`chapter_7`文件夹中找到）。然后，方法和实用矩阵被加载到Django缓存中，以便使用：
- en: '[PRE13]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Now the data (and models) can be used in the web pages just by calling the corresponding
    name, as we will see in the following sections.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，只需调用相应的名称，就可以在网页中使用数据（和模型），正如我们将在以下章节中看到的。
- en: User sign up login/logout implementation
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用户注册登录/注销实现
- en: 'This application can recommend movies to different users that are registered
    on the website. To manage the registration process, we use the standard `User`
    Django module as we have seen in the *Models* sections. Each page of the website
    refers to the `base.html` page, which implements a top bar that allows the user
    to register or sign in (right side):'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 此应用程序可以向注册在网站上的不同用户推荐电影。为了管理注册过程，我们使用标准的`User` Django模块，正如我们在*模型*部分中看到的。网站的每一页都引用`base.html`页面，该页面实现了一个顶部栏，允许用户注册或登录（右侧）：
- en: '![User sign up login/logout implementation](img/Image00533.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![用户注册登录/注销实现](img/Image00533.jpg)'
- en: 'Clicking on one of the two buttons **sign in** or **sign up** will activate
    the code:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 点击两个按钮之一**登录**或**注册**将激活以下代码：
- en: '[PRE14]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The two methods refer to the `urls.py` :'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个方法引用`urls.py`：
- en: '[PRE15]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'This calls the `auth` function in the `views.py` :'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这将调用`views.py`中的`auth`函数：
- en: '[PRE16]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The function will redirect to the sign up page as shown in the following screenshot:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 函数将重定向到以下截图所示的注册页面：
- en: '![User sign up login/logout implementation](img/Image00534.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![用户注册登录/注销实现](img/Image00534.jpg)'
- en: 'If you have already registered, it will take you to the sign in page as shown
    in the following screenshot:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经注册，它将带您到以下截图所示的登录页面：
- en: '![User sign up login/logout implementation](img/Image00535.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![用户注册登录/注销实现](img/Image00535.jpg)'
- en: 'The page allows the user to create a username and password and log in to the
    website. The data is then used to create a new object of the User Django model
    and the related `UserProfile` object (note that the `create` argument is `True`
    to save the object without associating an array of rated movies):'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 该页面允许用户创建用户名和密码并登录网站。然后使用这些数据创建一个新的User Django模型对象和相关`UserProfile`对象（注意`create`参数为`True`，以保存对象而不关联评分电影数组）：
- en: '[PRE17]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The user is then logged in using the standard Django methods:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 然后用户使用标准的Django方法登录：
- en: '[PRE18]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Hence, the website top bar looks like (username: **a** ) as shown in the following
    screenshot:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，网站顶部栏看起来像（用户名：**a**）如下截图所示：
- en: '![User sign up login/logout implementation](img/Image00536.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![用户注册/登录/登出实现](img/Image00536.jpg)'
- en: Note that in cases where a user with the same name already exists (new sign
    up exception event) or where a user is not found (sign in exception event), both
    are implemented and the reader can look into the code to understand how these
    events are handled.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在存在同名用户（新注册异常事件）或用户未找到（登录异常事件）的情况下，这两种情况都已实现，读者可以查看代码以了解这些事件是如何处理的。
- en: 'The **sign out** button refers to the `urls.py` :'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '**登出**按钮指的是`urls.py`：'
- en: '[PRE19]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'This calls the `signout` function from `views.py` :'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这将调用`views.py`中的`signout`函数：
- en: '[PRE20]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The function uses the standard Django logout method and redirects to the home
    page (the **sign in** and **sign out** buttons will be shown again in the top
    bar). The user can now search for movies to rate using the information retrieval
    system (search engine) described in the next section.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 该函数使用标准的Django登出方法并重定向到主页（**登录**和**登出**按钮将再次显示在顶部栏）。现在，用户可以使用下一节中描述的信息检索系统（搜索引擎）搜索并评分电影。
- en: Information retrieval system (movies query)
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 信息检索系统（电影查询）
- en: 'In order to rate movies, the user needs to search for them using the home page:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 为了对电影进行评分，用户需要使用主页进行搜索：
- en: '![Information retrieval system (movies query)](img/Image00537.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![信息检索系统（电影查询）](img/Image00537.jpg)'
- en: 'By Typing some relevant words in the text box, the page will call (through
    the `urls.py` corresponding *home* URL) the `home` function in the `views.py`
    file:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在文本框中输入一些相关词语，页面将通过`urls.py`中的对应*home* URL调用`views.py`文件中的`home`函数：
- en: '[PRE21]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The `data` parameter at the beginning of the function will store the typed
    query and the function will use it to transform it to a vector tf-idf representation
    using the model already loaded in memory by the `load_data` command:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 函数开头`data`参数将存储输入的查询，该函数将使用它将查询转换为使用`load_data`命令已加载到内存中的模型所表示的tf-idf向量：
- en: '[PRE22]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Also the matrix (key: `matr` ) and the movies'' titles (key: `titles` ) are
    retrieved from the cache to return the list of movies similar to the query vector
    (see [Chapter 4](text00032.html#ch04 "Chapter 4. Web Mining Techniques") , *Web-mining
    techniques* for further details). Also note that in case the cache is empty, the
    models (and the other data) are created and loaded in memory directly from the
    first call of this function. For example, we can type `war` as a query and the
    website will return the most similar movies to this query (`query_results.html`
    ):'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，矩阵（键：`matr`）和电影标题（键：`titles`）都是从缓存中检索出来的，以返回与查询向量相似的影片列表（参见[第4章](text00032.html#ch04
    "第4章。网络挖掘技术")，*网络挖掘技术*以获取更多详细信息）。此外，请注意，如果缓存为空，模型（以及其他数据）将直接从该函数的第一个调用中在内存中创建和加载。例如，我们可以输入`war`作为查询，网站将返回与该查询最相似的影片（`query_results.html`）：
- en: '![Information retrieval system (movies query)](img/Image00538.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![信息检索系统（电影查询）](img/Image00538.jpg)'
- en: 'As we can see, we have five movies (at the beginning of the `views.py` file
    we can set the number of movies per query parameter: `nmoviesperquery` ) and most
    of them are related to war. From this page we can rate the movies as we discuss
    in the following section.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，我们有五部电影（在`views.py`文件的开头我们可以设置每个查询参数的电影数量：`nmoviesperquery`），其中大部分与战争相关。从这一页我们可以像以下章节中讨论的那样对电影进行评分。
- en: 读累了记得休息一会哦~
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 看累了记得休息一会哦~
- en: '**公众号：古德猫宁李**'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '**公众号：古德猫宁李**'
- en: 电子书搜索下载
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电子书搜索下载
- en: 书单分享
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 书单分享
- en: 书友学习交流
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 书友学习交流
- en: '**网站：**[沉金书屋 https://www.chenjin5.com](https://www.chenjin5.com)'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '**网站：**[沉金书屋](https://www.chenjin5.com)'
- en: 电子书搜索下载
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电子书搜索下载
- en: 电子书打包资源分享
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电子书打包资源分享
- en: 学习资源分享
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习资源分享
- en: Rating system
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 评分系统
- en: 'Each user (when logged in) can rate movies simply by clicking on the rate value
    (1 to 5) at the side of the movie title in the movies'' results page (see preceding
    screenshot). This action will trigger the `rate_movie` function in the `views.py`
    file (through the corresponding URL in `urls.py` ):'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 每个用户（登录状态下）可以通过点击电影结果页面电影标题旁边的评分值（1到5）来简单地评分。这个动作将触发`views.py`文件中的`rate_movie`函数（通过`urls.py`中的相应URL）：
- en: '[PRE23]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The function will store the `rate` of the movie in an object of the `MovieRated`
    model, and the corresponding movies `rate` vector of the user is updated (through
    the `userprofile.save()` ). The movies not rated are then sent back to the page
    `query_results.html` . Note that the user needs to be logged in to rate a movie
    or the exception event that will ask the user to sign in will be shown (page:
    `pleasesignin.html` ).'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 函数将电影的`rate`评分存储在`MovieRated`模型的对象中，并更新用户的相应电影`rate`向量（通过`userprofile.save()`）。然后，未评分的电影将被发送回`query_results.html`页面。请注意，用户需要登录才能评分电影，否则将显示要求用户登录的异常事件（页面：`pleasesignin.html`）。
- en: Recommendation systems
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 推荐系统
- en: 'This function will use the parameters set at the beginning of the `views.py`
    file:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数将使用在`views.py`文件开头设置的参数：
- en: '[PRE24]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'This defines the minimum number of movies to rate before obtaining recommendations,
    the number of recommendations to show to the user, and the recommendation system
    method respectively. To show recommendations the user can click on the **Recommendations**
    button on the top bar:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这定义了在获得推荐之前需要评分的最少电影数量，向用户显示的推荐数量，以及推荐系统方法。要显示推荐，用户可以点击顶部栏上的**推荐**按钮：
- en: '![Recommendation systems](img/Image00536.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![推荐系统](img/Image00536.jpg)'
- en: 'This action will trigger the `movies_recs` function in the `views.py` file
    (through the corresponding URL defined in the `urls.py` file):'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 此操作将触发`views.py`文件中的`movies_recs`函数（通过`urls.py`文件中定义的相应URL）：
- en: '[PRE25]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The function will retrieve the rated movies vector from the corresponding `UserProfile`
    object and it will load the recommendation system method (specified by the `recmethod`
    parameter) from cache. The recommendations are first stored in the `userprofile`
    object and then returned to the `recommendations.html` page. For example, using
    the `cf_itembased` method:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 函数将从相应的`UserProfile`对象检索评分的电影向量，并从缓存中加载指定的推荐系统方法（由`recmethod`参数指定）。推荐首先存储在`userprofile`对象中，然后返回到`recommendations.html`页面。例如，使用`cf_itembased`方法：
- en: '![Recommendation systems](img/Image00539.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![推荐系统](img/Image00539.jpg)'
- en: This is a sample result page after rating the five movies related to the word
    `war` (see preceding screenshot). The reader can play more with the parameters
    and the different algorithms to evaluate the differences.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这是在对与单词“war”相关的五部电影进行评分后的一个示例结果页面（参见前面的截图）。读者可以进一步调整参数和不同的算法来评估差异。
- en: Admin interface and API
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理界面和API
- en: 'In order to manage the data of the application, the admin interface and an
    API point can be set. From the admin panel we can see both the movie''s data,
    and the user registered, writing the following `admin.py` file:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 为了管理应用程序的数据，可以设置管理界面和API点。从管理面板中，我们可以看到电影数据和注册用户，编写以下`admin.py`文件：
- en: '[PRE26]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'After setting the corresponding `admin` URL on the `urls.py` file:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在`urls.py`文件中设置相应的`admin` URL后：
- en: '[PRE27]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'We should see our admin panel (at `http://localhost:8000/admin/` ) with the
    two models and the data within the models resembles the fields specified in the
    `admin.py` file:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该看到我们的管理面板（在`http://localhost:8000/admin/`），其中模型和数据与`admin.py`文件中指定的字段相似：
- en: '![Admin interface and API](img/Image00540.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![管理界面和API](img/Image00540.jpg)'
- en: 'To set the API endpoint to retrieve the data for each registered user, first
    we need to write out `serializers.py` specifying which fields of the `UserProfile`
    model we want to employ:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置API端点以检索每个注册用户的资料，首先我们需要编写`serializers.py`，指定我们想要使用的`UserProfile`模型的哪些字段：
- en: '[PRE28]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'In this case, we want to collect the ID of the movies, rated by the user, and
    his last recommended movie''s ID. Then the API is set in the `api.py` file as
    follows:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们想要收集用户评分的电影ID以及他最后推荐的电影的ID。然后，在`api.py`文件中设置API如下：
- en: '[PRE29]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Note that a query parameter `name` is allowed in case we want to collect only
    the data for one particular user. After setting the corresponding URL in the `urls.py`
    file:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，如果只想收集特定用户的资料，允许查询参数`name`。在`urls.py`文件中设置相应的URL后：
- en: '[PRE30]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The end point can be called through the `curl` command using the terminal:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过终端使用`curl`命令调用端点：
- en: '[PRE31]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'It can also be called using the swagger interface for testing purposes (see
    [Chapter 6](text00046.html#ch06 "Chapter 6. Getting Started with Django") , *Basics
    of Django: a simple web framework* ).'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 它也可以通过swagger界面进行测试调用（参见[第6章](text00046.html#ch06 "第6章。Django入门")，*Django基础：一个简单的Web框架*）。
- en: Summary
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: We have just shown how to build an application to recommend movies using the
    Django framework. You now should have some degree of confidence in how to develop
    a professional web application using Python and the machine-learning algorithms
    that power it.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚展示了如何使用 Django 框架构建一个推荐电影的程序。你现在应该对如何使用 Python 和其背后的机器学习算法开发一个专业的网络应用程序有了一定的信心。
- en: In the next chapter, an additional example on a movie's web sentiment reception
    will give you even more understanding to efficiently write your own machine-learning
    web application in Python.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将通过一个关于电影网络情感接受的额外示例，让你对如何高效地使用 Python 编写自己的机器学习网络应用程序有更深入的理解。
