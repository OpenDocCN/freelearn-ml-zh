- en: Chapter 7. Movie Recommendation System Web Application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The purpose of this chapter is to explain a real case example of the recommendation
    system in action, using the Django framework. We are going to implement a movie
    recommendation system in which each user that subscribes to the service will receive
    suggested movies based on his preferences as we have discussed in [Chapter 5](text00037.html#page
    "Chapter 5. Recommendation Systems") , *Recommendation systems* , also we are
    going to use the same data which consists of 603 movies rated more than 50 times
    by 942 users. In order to receive recommendations, each user has to rate a certain
    number of movies, so an information retrieval system ([Chapter 4](text00032.html#ch04
    "Chapter 4. Web Mining Techniques") , *Web-mining techniques* ) to search the
    movies to rate is implemented. The different parts of the Django application are
    going to be discussed: settings, models, user login/logout, commands, information
    retrieval system, recommendation systems, an admin interface and APIs (all the
    code is available on the GitHub of the author `chapter_7` folder at [https://github.com/ai2010/machine_learning_for_the_web/tree/master/chapter_7](https://github.com/ai2010/machine_learning_for_the_web/tree/master/chapter_7)
    ). Since [Chapter 6](text00046.html#ch06 "Chapter 6. Getting Started with Django")
    , *Basics of Django: a simple web framework* just introduced the main features
    of Django, whenever a new feature is employed a technical explanation is also
    provided. Now we can start describing the different settings and the initial setup
    to run the application.'
  prefs: []
  type: TYPE_NORMAL
- en: Application setup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We create and start Django as usual:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'and from the `server_movierecsys` folder we start the application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Now the `settings.py` needs to be configured. As we see in [Chapter 6](text00046.html#ch06
    "Chapter 6. Getting Started with Django") , *Basics of Django: a simple web framework*
    we set the installed apps, HTML templates, a layout formatting folder, and an
    SQLite database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Apart from the standard apps, and the rest framework (swagger), the `books_recsys_app`
    has been included in the installed apps list.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this case, we need to load data persistently in the memory so that the user
    experience is improved by not calculating or retrieving data at each user request.
    To save data or the results of expensive calculations in the memory, we set up
    the cache system of Django in `settings.py` :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: We have chosen the **File Based Cache** cache type stored in `/var/tmp/django_cache`
    and a `None` timeout which means the data in the cache will never expire.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use the admin interface, we set up the `superuser` account through the command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The application is live at `http://localhost:8000/` by typing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Models
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this application, we need to store the data related to each movie and the
    movies'' ratings from each user of the website. We set up three models:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The model `MovieData` stores the data for each movie: title, description, and
    vector representation (`ndim` is the dimension of the vector representation).
    `MovieRated` records each movie rated by the user logged in (each object `MovieRated`
    is associated with has a `UserProfile` that utilizes the website). The `UserProfile`
    model stores all the users that sign up to the website, so they can rate movies
    and receive recommendations. Each `UserProfile` extends the default Django user
    model by adding the `array` field, which stores all the movie''s ratings from
    the `user,` and the `recsvec` field which stores his last recommendations: the
    `save` function is overridden to fill the `array` field with all the `MovieRated`
    objects associated with the user (if the `else` statement is `true` ), and to
    fill the `lastrecs` field with the last recommendations (`else if` statement).
    Note that the `MovieRated` model has a `UserProfile` foreign key with the `related_name`
    equal to `ratedmovies` : in the `save` function of the `UserProfile` model, `self.ratedmovies.all()`
    refers to all the `RatedMovie` objects that have the same `UserProfile` value.
    The field `arrayratedmoviesindxs` on the `UserProfile` model records all the movies
    rated by the user and it is used by the API of the application.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To write these data structures on the database we need to run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Commands
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The commands used in this application are needed to load the data into the
    memory (cache) and make the user experience fast. Although the movie database
    is the same used in [Chapter 4](text00032.html#ch04 "Chapter 4. Web Mining Techniques")
    , *Web mining techniques* (that is 603 movies rated more than 50 times by 942
    users), each movie needs a description to set up an information retrieval system
    on the movies to rate. The first command we develop takes all the movie titles
    in the utility matrix used in [Chapter 4](text00032.html#ch04 "Chapter 4. Web
    Mining Techniques") , *Web Mining Techniques* and collects the corresponding descriptions
    from **Open Movie Database** ( **OMDb** ) online service:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The command syntax is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Each movie title contained in the `utilitymatrix` file is used by the `getplotfromomdb`
    function to retrieve the movie's description (`plot` ) from the website [http://www.omdbapi.com/](http://www.omdbapi.com/)
    using the requests in the Python module. The descriptions (and `titles` ) of the
    movies are then saved in a CSV file (`outputplots` ) together with the corresponding
    utility matrix (`outputumatrix` ).
  prefs: []
  type: TYPE_NORMAL
- en: 'The other command will take the movie''s descriptions and create an information
    retrieval system ( **Term Frequency, Inverse Document Frequency** ( **TF-IDF**
    ) model) to allow the user to find movies typing some relevant words. This tf-idf
    model is then saved in the Django cache together with the initial recommendation
    systems models ( **CF item-based** and **log-likelihood** ratio). The code is
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'To run the command the syntax is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The input parameter takes the movie's descriptions obtained using the `get_plotsfromtitles`
    command and creates a `tf-idf` model (see [Chapter 4](text00032.html#ch04 "Chapter 4. Web
    Mining Techniques") , *Web-mining techniques* ) using a maximum of words specified
    by the `nmaxwords` parameter. The data of each movie is also saved in a `MovieData`
    object (title, tf-idf representation, description, and `ndim` number of words
    of the tf-idf vocabulary). Note that the first time the command is run the `stopwords`
    from `nltk.download('stopwords')` (commented in the preceding code) need to be
    downloaded.
  prefs: []
  type: TYPE_NORMAL
- en: 'The tf-idf model, the title''s list, and the matrix of the tf-idf movies''
    representations, are saved in the Django cache using the commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that the cache Django module (`django.core.cache` ) needs to be loaded
    (at the beginning of the file) to be used.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the same way, the utility matrix (`umatrixfile` parameter) is used to initialize
    the two recommendation systems used by the application: item-based collaborative
    filtering and log-likelihood ratio method. Both methods are not written in the
    preceding code because they are essentially the same as the code described in
    [Chapter 5](text00037.html#page "Chapter 5. Recommendation Systems") , *Recommendation
    systems* (the full code can be seen in the `chapter_7` folder of the author''s
    GitHub repository as usual). The methods and the utility matrix are then loaded
    into the Django cache ready to use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Now the data (and models) can be used in the web pages just by calling the corresponding
    name, as we will see in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: User sign up login/logout implementation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This application can recommend movies to different users that are registered
    on the website. To manage the registration process, we use the standard `User`
    Django module as we have seen in the *Models* sections. Each page of the website
    refers to the `base.html` page, which implements a top bar that allows the user
    to register or sign in (right side):'
  prefs: []
  type: TYPE_NORMAL
- en: '![User sign up login/logout implementation](img/Image00533.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Clicking on one of the two buttons **sign in** or **sign up** will activate
    the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The two methods refer to the `urls.py` :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'This calls the `auth` function in the `views.py` :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The function will redirect to the sign up page as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![User sign up login/logout implementation](img/Image00534.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'If you have already registered, it will take you to the sign in page as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![User sign up login/logout implementation](img/Image00535.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The page allows the user to create a username and password and log in to the
    website. The data is then used to create a new object of the User Django model
    and the related `UserProfile` object (note that the `create` argument is `True`
    to save the object without associating an array of rated movies):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The user is then logged in using the standard Django methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Hence, the website top bar looks like (username: **a** ) as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![User sign up login/logout implementation](img/Image00536.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note that in cases where a user with the same name already exists (new sign
    up exception event) or where a user is not found (sign in exception event), both
    are implemented and the reader can look into the code to understand how these
    events are handled.
  prefs: []
  type: TYPE_NORMAL
- en: 'The **sign out** button refers to the `urls.py` :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'This calls the `signout` function from `views.py` :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: The function uses the standard Django logout method and redirects to the home
    page (the **sign in** and **sign out** buttons will be shown again in the top
    bar). The user can now search for movies to rate using the information retrieval
    system (search engine) described in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Information retrieval system (movies query)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to rate movies, the user needs to search for them using the home page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Information retrieval system (movies query)](img/Image00537.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'By Typing some relevant words in the text box, the page will call (through
    the `urls.py` corresponding *home* URL) the `home` function in the `views.py`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The `data` parameter at the beginning of the function will store the typed
    query and the function will use it to transform it to a vector tf-idf representation
    using the model already loaded in memory by the `load_data` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Also the matrix (key: `matr` ) and the movies'' titles (key: `titles` ) are
    retrieved from the cache to return the list of movies similar to the query vector
    (see [Chapter 4](text00032.html#ch04 "Chapter 4. Web Mining Techniques") , *Web-mining
    techniques* for further details). Also note that in case the cache is empty, the
    models (and the other data) are created and loaded in memory directly from the
    first call of this function. For example, we can type `war` as a query and the
    website will return the most similar movies to this query (`query_results.html`
    ):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Information retrieval system (movies query)](img/Image00538.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'As we can see, we have five movies (at the beginning of the `views.py` file
    we can set the number of movies per query parameter: `nmoviesperquery` ) and most
    of them are related to war. From this page we can rate the movies as we discuss
    in the following section.'
  prefs: []
  type: TYPE_NORMAL
- en: 读累了记得休息一会哦~
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**公众号：古德猫宁李**'
  prefs: []
  type: TYPE_NORMAL
- en: 电子书搜索下载
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 书单分享
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 书友学习交流
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**网站：**[沉金书屋 https://www.chenjin5.com](https://www.chenjin5.com)'
  prefs: []
  type: TYPE_NORMAL
- en: 电子书搜索下载
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 电子书打包资源分享
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 学习资源分享
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rating system
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Each user (when logged in) can rate movies simply by clicking on the rate value
    (1 to 5) at the side of the movie title in the movies'' results page (see preceding
    screenshot). This action will trigger the `rate_movie` function in the `views.py`
    file (through the corresponding URL in `urls.py` ):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'The function will store the `rate` of the movie in an object of the `MovieRated`
    model, and the corresponding movies `rate` vector of the user is updated (through
    the `userprofile.save()` ). The movies not rated are then sent back to the page
    `query_results.html` . Note that the user needs to be logged in to rate a movie
    or the exception event that will ask the user to sign in will be shown (page:
    `pleasesignin.html` ).'
  prefs: []
  type: TYPE_NORMAL
- en: Recommendation systems
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This function will use the parameters set at the beginning of the `views.py`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'This defines the minimum number of movies to rate before obtaining recommendations,
    the number of recommendations to show to the user, and the recommendation system
    method respectively. To show recommendations the user can click on the **Recommendations**
    button on the top bar:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Recommendation systems](img/Image00536.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This action will trigger the `movies_recs` function in the `views.py` file
    (through the corresponding URL defined in the `urls.py` file):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'The function will retrieve the rated movies vector from the corresponding `UserProfile`
    object and it will load the recommendation system method (specified by the `recmethod`
    parameter) from cache. The recommendations are first stored in the `userprofile`
    object and then returned to the `recommendations.html` page. For example, using
    the `cf_itembased` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Recommendation systems](img/Image00539.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This is a sample result page after rating the five movies related to the word
    `war` (see preceding screenshot). The reader can play more with the parameters
    and the different algorithms to evaluate the differences.
  prefs: []
  type: TYPE_NORMAL
- en: Admin interface and API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to manage the data of the application, the admin interface and an
    API point can be set. From the admin panel we can see both the movie''s data,
    and the user registered, writing the following `admin.py` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'After setting the corresponding `admin` URL on the `urls.py` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'We should see our admin panel (at `http://localhost:8000/admin/` ) with the
    two models and the data within the models resembles the fields specified in the
    `admin.py` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Admin interface and API](img/Image00540.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'To set the API endpoint to retrieve the data for each registered user, first
    we need to write out `serializers.py` specifying which fields of the `UserProfile`
    model we want to employ:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'In this case, we want to collect the ID of the movies, rated by the user, and
    his last recommended movie''s ID. Then the API is set in the `api.py` file as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that a query parameter `name` is allowed in case we want to collect only
    the data for one particular user. After setting the corresponding URL in the `urls.py`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'The end point can be called through the `curl` command using the terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'It can also be called using the swagger interface for testing purposes (see
    [Chapter 6](text00046.html#ch06 "Chapter 6. Getting Started with Django") , *Basics
    of Django: a simple web framework* ).'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have just shown how to build an application to recommend movies using the
    Django framework. You now should have some degree of confidence in how to develop
    a professional web application using Python and the machine-learning algorithms
    that power it.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, an additional example on a movie's web sentiment reception
    will give you even more understanding to efficiently write your own machine-learning
    web application in Python.
  prefs: []
  type: TYPE_NORMAL
