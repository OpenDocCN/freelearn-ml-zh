- en: Chapter 1. Introduction to Recommendation Engines
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: How do we buy things? How do we make decisions in our day-to-day lives? We ask
    our friends or relatives for suggestions before making decisions. When it comes
    to making decisions online about buying products, we read reviews about the products
    from anonymous users, compare the products' specifications with other similar
    products and then we make our decisions to buy or not. In an online world, where
    information is growing at an exponential rate, looking for valid information will
    be a challenge. Buying the confidence of the user for the search results will
    be a much more challenging task. Recommender systems come to our rescue to provide
    relevant and required information.
  prefs: []
  type: TYPE_NORMAL
- en: The popularity of implementing recommendation engines comes as a result of their
    successful implementation by big players on the Internet. Some real-world examples
    include suggestions for products on Amazon, friends' suggestions on social applications
    such as Facebook, Twitter, and LinkedIn, video recommendations on YouTube, news
    recommendations on Google News, and so on. These successful implementations of
    recommendation engines have shown the way for other areas such as the travel,
    healthcare, and banking domains.
  prefs: []
  type: TYPE_NORMAL
- en: Recommendation engine definition
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Recommendation engines, a branch of information retrieval and artificial intelligence,
    are powerful tools and techniques to analyze huge volumes of data, especially
    product information and user information, and then provide relevant suggestions
    based on data-mining approaches.
  prefs: []
  type: TYPE_NORMAL
- en: In technical terms, a recommendation engine problem is *to develop a mathematical
    model or objective function which can predict how much a user will like an item*.
  prefs: []
  type: TYPE_NORMAL
- en: 'If *U = {users}*, *I = {items}* then *F = Objective function* and measures
    the usefulness of item *I* to user *U*, given by:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Recommendation engine definition](img/image00202.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Where *R = {recommended items}*.
  prefs: []
  type: TYPE_NORMAL
- en: 'For each user *u*, we want to choose the item *i* that maximizes the objective
    function:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Recommendation engine definition](img/image00203.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The main goal of recommender systems is to provide relevant suggestions to
    online users to make better decisions from many alternatives available over the
    Web. A better recommender system is directed more toward personalized recommendations
    by taking into consideration the available digital footprint of the user, such
    as user-demographic information, transaction details, interaction logs, and information
    about a product, such as specifications, feedback from users, comparison with
    other products, and so on, before making recommendations:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Recommendation engine definition](img/image00204.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Pic credits: toptal'
  prefs: []
  type: TYPE_NORMAL
- en: 'Building a good recommendation engine poses challenges to both the actors of
    the system, namely, the consumers and sellers. From a consumer perspective, receiving
    relevant suggestions from a trusted source is critical for decision making. So
    the recommendation engine needs to build in such a way that it buys the confidence
    of the consumers. From a seller perspective, generating relevant recommendations
    to consumers at a personalized level is more important. With the rise of online
    sales, the big players are now collecting large volumes of transactional interaction
    logs of users to analyze the user behaviors more deeply than ever. Also, the need
    to recommend in real time is adding to the challenge. With advancements in technology
    and research, recommendation engines are evolving to overcome these challenges
    based on big-data analysis and artificial intelligence. The following diagram
    illustrates how organizations employ recommendation engines:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Recommendation engine definition](img/image00205.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Need for recommender systems
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Given the complexity and challenges in building recommendation engines, a considerable
    amount of thought, skill, investment, and technology goes into building recommender
    systems. Are they worth such an investment? Let us look at some facts:'
  prefs: []
  type: TYPE_NORMAL
- en: Two-thirds of movies watched by Netflix customers are recommended movies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 38% of click-through rates on Google News are recommended links
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 35% of sales at Amazon arise from recommended products
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ChoiceStream claims that 28% of people would like to buy more music, if they
    find what they like
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Big data driving the recommender systems
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Of late, recommender systems are successful in impacting our lives in many ways.
    One such obvious example of this impact is how our online shopping experience
    has been redefined. As we browse through e-commerce sites and purchase products,
    the underlying recommendation engines respond immediately, in real time, with
    various relevant suggestions to consumers. Regardless of the perspective, from
    business player or consumer, recommendation engines have been immensely beneficial.
    Without a doubt, big data is the driving force behind recommender systems. A good
    recommendation engine should be reliable, scalable, highly available, and be able
    to provide personalized recommendations, in real time, to the large user base
    it contains.
  prefs: []
  type: TYPE_NORMAL
- en: A typical recommendation system cannot do its job efficiently without sufficient
    data. The introduction of big data technology enabled companies to capture plenty
    of user data, such as past purchases, browsing history, and feedback information,
    and feed it to the recommendation engines to generate relevant and effective recommendations
    in real time. In short, even the most advanced recommender system cannot be effective
    without the supply of big data. The role of big data and improvements in technology,
    both on the software and hardware front, goes beyond just supplying massive data.
    It also provides meaningful, actionable data fast, and provides the necessary
    setup to quickly process the data in real time.
  prefs: []
  type: TYPE_NORMAL
- en: 'Source: [http://www.kdnuggets.com/2015/10/big-data-recommendation-systems-change-lives.html](http://www.kdnuggets.com/2015/10/big-data-recommendation-systems-change-lives.html).'
  prefs: []
  type: TYPE_NORMAL
- en: Types of recommender systems
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have defined recommender systems, their objective, usefulness, and
    the driving force behind recommender systems, in this section, we introduce different
    types of popular recommender systems in use.
  prefs: []
  type: TYPE_NORMAL
- en: Collaborative filtering recommender systems
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Collaborative filtering recommender systems are basic forms of recommendation
    engines. In this type of recommendation engine, filtering items from a large set
    of alternatives is done collaboratively by users' preferences.
  prefs: []
  type: TYPE_NORMAL
- en: The basic assumption in a collaborative filtering recommender system is that
    if two users shared the same interests as each other in the past, they will also
    have similar tastes in the future. If, for example, user A and user B have similar
    movie preferences, and user A recently watched *Titanic,* which user B has not
    yet seen, then the idea is to recommend this unseen new movie to user B. The movie
    recommendations on Netflix are one good example of this type of recommender system.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two types of collaborative filtering recommender systems:'
  prefs: []
  type: TYPE_NORMAL
- en: '**User-based collaborative filtering**: In user-based collaborative filtering,
    recommendations are generated by considering the preferences in the user''s neighborhood.
    User-based collaborative filtering is done in two steps:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Identify similar users based on similar user preferences
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Recommend new items to an active user based on the rating given by similar users
    on the items not rated by the active user.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Item-based collaborative filtering**: In item-based collaborative filtering,
    the recommendations are generated using the neighbourhood of items. Unlike user-based
    collaborative filtering, we first find similarities between items and then recommend
    non-rated items which are similar to the items the active user has rated in past.
    Item-based recommender systems are constructed in two steps:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Calculate the item similarity based on the item preferences
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Find the top similar items to the non-rated items by active user and recommend
    them
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: We will learn in depth about these two forms of recommendations in [Chapter
    3](part0022.xhtml#aid-KVCC1 "Chapter 3. Recommendation Engines Explained"), *Recommendation
    Engines Explained*.
  prefs: []
  type: TYPE_NORMAL
- en: 'While building collaborative filtering recommender systems, we will learn about
    the following aspects:'
  prefs: []
  type: TYPE_NORMAL
- en: How to calculate the similarity between users?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to calculate the similarity between items?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How recommendations are generated?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to deal with new items and new users whose data is not known?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The advantage of collaborative filtering systems is that they are simple to
    implement and very accurate. However, they have their own set of limitations,
    such as the *Cold Start* problem, which means, collaborative filtering systems
    fails to recommend to the first-time users whose information is not available
    in the system:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Collaborative filtering recommender systems](img/image00206.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Content-based recommender systems
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In collaborative filtering, we consider only user-item-preferences and build
    the recommender systems. Though this approach is accurate, it makes more sense
    if we consider user properties and item properties while building recommendation
    engines. Unlike in collaborative filtering, we use item properties and user preferences
    to the item properties while building content-based recommendation engines.
  prefs: []
  type: TYPE_NORMAL
- en: As the name indicates, a content-based recommender system uses the content information
    of the items for building the recommendation model. A content recommender system
    typically contains a user-profile-generation step, item-profile-generation step-
    and model-building step to generate recommendations for an active user. The content-based
    recommender system recommends items to users by taking the content or features
    of items and user profiles. As an example, if you have searched for videos of
    Lionel Messi on YouTube, then the content-based recommender system will learn
    your preference and recommend other videos related to Lionel Messi and other videos
    related to football.
  prefs: []
  type: TYPE_NORMAL
- en: In simpler terms, the system recommends items similar to those that the user
    has liked in the past. The similarity of items is calculated based on the features
    associated with the other compared items and is matched with the user's historical
    preferences.
  prefs: []
  type: TYPE_NORMAL
- en: 'While building a content-based recommendation system, we take into consideration
    the following questions:'
  prefs: []
  type: TYPE_NORMAL
- en: How do we choose content or features of the products?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How do we create user profiles with preferences similar to that of the product
    content?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How do we create similarity between items based on their features?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How do we create and update user profiles continuously?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The preceding considerations will be explained in [Chapter 3](part0022.xhtml#aid-KVCC1
    "Chapter 3. Recommendation Engines Explained"), *Recommendation Engines Explained*.
    This technique doesn''t take into consideration the user''s neighborhood preferences.
    Hence, it doesn''t require a large user group''s preference for items for better
    recommendation accuracy. It only considers the user''s past preferences and the
    properties/features of the items. In [Chapter 3](part0022.xhtml#aid-KVCC1 "Chapter 3. Recommendation
    Engines Explained"), *Recommendation Engines Explained*, we will learn about this
    system in detail, and also its pros and cons:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Content-based recommender systems](img/image00207.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Hybrid recommender systems
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This type of recommendation engine is built by combining various recommender
    systems to build a more robust system. By combining various recommender systems,
    we can replace the disadvantages of one system with the advantages of another
    system and thus build a more robust system. For example, by combining collaborative
    filtering methods, where the model fails when new items don't have ratings, with
    content-based systems, where feature information about the items is available,
    new items can be recommended more accurately and efficiently.
  prefs: []
  type: TYPE_NORMAL
- en: For example, if you are a frequent reader of news on Google News, the underlying
    recommendation engine recommends news articles to you by combining popular news
    articles read by people similar to you and using your personal preferences, calculated
    using your previous click information. With this type of recommendation system,
    collaborative filtering recommendations are combined with content-based recommendations
    before pushing recommendations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before building a hybrid model, we should consider the following questions:'
  prefs: []
  type: TYPE_NORMAL
- en: What recommender techniques should be combined to achieve the business solution?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How should we combine various techniques and their results for better predictions?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The advantage of hybrid recommendation engines is that this approach will increase
    the efficiency of recommendations compared to the individual recommendation techniques.
    This approach also suggests a good mix of recommendations to the users, both at
    the personalized level and at the neighborhood level. In [Chapter 3](part0022.xhtml#aid-KVCC1
    "Chapter 3. Recommendation Engines Explained"), *Recommendation Engines Explained*,
    we will learn more about hybrid recommendations:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Hybrid recommender systems](img/image00208.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Context-aware recommender systems
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Personalized recommender systems, such as content-based recommender systems,
    are inefficient; they fail to suggest recommendations with respect to context.
    For example, assume a lady is very fond of ice-cream. Also assume that this lady
    goes to a cold place. Now there is high chance that a personalized recommender
    system suggests a popular ice-cream brand. Now let us ask our self a question:
    is it the right thing to suggest an ice-cream to a person in a cold place? Rather,
    it makes sense to suggest a coffee. This type of recommendation, which is personalized
    and context-aware is called a context-aware recommender systems. In the preceding
    example, place is the context.'
  prefs: []
  type: TYPE_NORMAL
- en: User preferences may differ with the context, such as time of day, season, mood,
    place, location, options offered by the system, and so on. A person at a different
    location at a different time with different people may need different things.
    A context-aware recommender system takes the context into account before computing
    or serving recommendations. This recommender system caters for the different needs
    of people differently in different contexts.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before building a context-aware model, we should consider the following questions:'
  prefs: []
  type: TYPE_NORMAL
- en: How should we define the contexts to be used in the recommender system?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What techniques should be used to build recommendations to achieve the business
    solution?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How do we extract context the preferences of the users with respect to the products?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What techniques should we use to combine the context preferences with user-profile
    preferences to generate recommendations?![Context-aware recommender systems](img/image00209.jpeg)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The preceding image shows how different people, at different times and places,
    and with different company, need different dress recommendations.
  prefs: []
  type: TYPE_NORMAL
- en: Evolution of recommender systems with technology
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With the advancements in technology, research, and infrastructure, recommender
    systems have been evolving rapidly. Recommender systems are moving away from simple
    similarity-measure-based approaches, to machine-learning approaches, to very advanced
    approaches such as deep learning. From a business angle, both customers and organizations
    are looking toward more personalized recommendations to be catered for immediately.
    Building personalized recommenders to cater to the large user base and products,
    we need sophisticated systems, which can scale easily and respond fast. The following
    are the types of recommendations that can help solve this challenge.
  prefs: []
  type: TYPE_NORMAL
- en: Mahout for scalable recommender systems
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As stated earlier, big data primarily drives recommender systems. The big-data
    platforms enabled researchers to access large datasets and analyze data at the
    individual level, paving paths for building personalized recommender systems.
    With increase in Internet usage and a constant supply of data, efficient recommenders
    not only require huge data, but also need infrastructure which can scale and have
    minimum downtime. To realize this, big-data technology such as the Apache Hadoop
    ecosystem provided the infrastructure and platform to supply large data. To build
    recommendation systems on this huge supply of data, **Mahout**, a machine-learning
    library built on the Hadoop platform enables us to build scalable recommender
    systems. Mahout provides infrastructure to build, evaluate, and tune the different
    types of recommendation-engine algorithms. Since Hadoop is designed for offline
    batch processing, we can build offline recommender systems, which are scalable.
    In [Chapter 9](part0063.xhtml#aid-1S2JE1 "Chapter 9. Building Scalable Recommendation
    Engines with Mahout"), *Building Scalable Recommendation Engines with Mahout*, we
    further see how to build scalable recommendation engines using Mahout.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following figure displays how a scalable recommender system can be designed
    using Mahout:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Mahout for scalable recommender systems](img/image00210.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Apache Spark for scalable real-time recommender systems
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have seen many times, on any of the e-commerce sites, the *You may also like*
    feature. This is a deceptively simple phrase that encapsulates a new era in customer
    relationship management delivered in real time. Business organizations started
    investing in such systems, which can generate recommendations personalized to
    the customers and can deliver them in real time. Building such a system will not
    only give good returns on investment but also, efficient systems will buy the
    confidence of the users. Building a scalable real-time recommender system will
    not only capture users' purchase history, product information, user preferences,
    and extract patterns and recommend products, but will also respond instantly based
    on user online interactions and multi-criteria search preferences.
  prefs: []
  type: TYPE_NORMAL
- en: This ability makes compelling suggestions requiring a new generation of technology.
    This technology has to consider large databases of users' previous purchasing
    history, their preferences, and online interaction information such as in-page
    navigation data and multi-criteria searches, and then analyzes all this information
    in real time and responds accurately according to the current and long-term needs
    of the users. In this book, we have considered in-memory and graph-based systems,
    which are capable of handling large-scale, real-time recommender systems.
  prefs: []
  type: TYPE_NORMAL
- en: 'Most popular recommendation engine collaborative filtering requires considering
    the entirety of users and product information while generating recommendations.
    Assume a scenario where we have 1 million user ratings on 10,000 products. In
    order to build a system to handle such heavy computations and respond online,
    we require a system that is big-data compatible and processes data in-memory.
    The key technology in enabling scalable, real-time recommendations is Apache Spark
    Streaming, a technology that leverages scalability of big data and generates recommendations
    in real time, and processes data in-memory:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Apache Spark for scalable real-time recommender systems](img/image00211.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Neo4j for real-time graph-based recommender systems
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Graph databases have revolutionized the way people discover new products, information,
    and so on. In the human mind, we remember people, things, places, and so on, as
    graphs, relations, and networks. When we try to fetch information from these networks,
    we directly go to a required connection or graph and fetch information accurately.
    In a similar fashion, graph databases allow us to store user and product information
    in graphs as nodes and edges (relations). Searching in a graph database is fast.
    In recent times, recommender systems powered by graph databases have allowed organizations
    to build suggestions which are personalized and accurate in real time.
  prefs: []
  type: TYPE_NORMAL
- en: One of the key technologies enabling real-time recommendations using graph databases
    is Neo4j, a kind of NoSQL graph database that can easily outperform any other
    relational and NoSQL system in providing customer insights and product trends.
  prefs: []
  type: TYPE_NORMAL
- en: A NoSQL database, popularly known as *not only SQL*, provides a new way of storing
    and managing data other than in relational format that is row and columns such
    as columnar, graph, key-value pair store of data. This new way of storing and
    managing data enables us to build scalable and real-time systems.
  prefs: []
  type: TYPE_NORMAL
- en: A graph database mainly consists of nodes and edges, wherein nodes represent
    the entities and edges the relations between them. The edges are directed lines
    or arrows that connect the nodes. In the preceding image, the circles are the
    nodes, which represent the entities, and the lines connecting the nodes are called
    edges, which represent relationships. The orientation of arrows follows the flow
    of information. By presenting all nodes and links of the graph, it helps users
    to have a global view of the structure.
  prefs: []
  type: TYPE_NORMAL
- en: The following image shows user-movie-rating information representation in graph
    form. Green and red circles indicate nodes representing users and movies, respectively.
    The ratings given by users to movies are represented as edges showing the relationship
    between users and movies. Each node and relation may contain properties to store
    further details of the data.
  prefs: []
  type: TYPE_NORMAL
- en: 'On this graph representation, we apply concepts of graph theory to generate
    recommendations in real time, as the retrieval and searching is very fast. In
    [Chapter 8](part0057.xhtml#aid-1MBG21 "Chapter 8.  Building Real-Time Recommendations
    with Neo4j"), *Building Real Time Recommendation Engines with Neo4j*, we deal
    with building real-time recommendation engines using Neo4j:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Neo4j for real-time graph-based recommender systems](img/image00212.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we got introduced to various types of popular recommendation
    engines such as collaborative filtering, content-based recommendation engines,
    hybrid recommenders, context-aware systems, scalable recommenders, and graph-based,
    real-time recommenders.
  prefs: []
  type: TYPE_NORMAL
- en: We also learned how big data is fuelling the rise of recommendation engines
    and some real-world use-cases employed by major IT giants. In [Chapter 3](part0022.xhtml#aid-KVCC1
    "Chapter 3. Recommendation Engines Explained"), *Recommendation Engines Explained*,
    we will learn more about these recommendations in detail. In [Chapter 2](part0020.xhtml#aid-J2B82
    "Chapter 2. Build Your First Recommendation Engine"), *Build Your First Recommendation
    Engine*, we learn how to build a basic recommendation engine using R.
  prefs: []
  type: TYPE_NORMAL
