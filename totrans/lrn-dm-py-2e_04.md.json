["```py\nimport os\nimport pandas as pd\ndata_folder = os.path.join(os.path.expanduser(\"~\"), \"Data\", \"ml-100k\")\nratings_filename = os.path.join(data_folder, \"u.data\")\n\n```", "```py\nall_ratings = pd.read_csv(ratings_filename, delimiter=\"t\", header=None, names\n            = [\"UserID\", \"MovieID\", \"Rating\", \"Datetime\"])\n\n```", "```py\nall_ratings[\"Datetime\"] = pd.to_datetime(all_ratings['Datetime'], unit='s')\n\n```", "```py\nall_ratings.head()\n\n```", "```py\nall_ratings[\"Favorable\"] = all_ratings[\"Rating\"] > 3\n\n```", "```py\nall_ratings[10:15]\n\n```", "```py\nratings = all_ratings[all_ratings['UserID'].isin(range(200))]\n\n```", "```py\nfavorable_ratings_mask = ratings[\"Favorable\"]\nfavorable_ratings = ratings[favorable_ratings_mask]\n\n```", "```py\nfavorable_reviews_by_users = dict((k, frozenset(v.values)) for k, v in favorable_ratings.groupby(\"UserID\")[\"MovieID\"])\n\n```", "```py\nnum_favorable_by_movie = ratings[[\"MovieID\", \"Favorable\"]].groupby(\"MovieID\").sum()\n\n```", "```py\nnum_favorable_by_movie.sort_values(by=\"Favorable\", ascending=False).head()\n\n```", "```py\nfrequent_itemsets = {}\n\n```", "```py\nmin_support = 50\n\n```", "```py\nfrequent_itemsets[1] = dict((frozenset((movie_id,)), row[\"Favorable\"])\n for movie_id, row in num_favorable_by_movie.iterrows()\n if row[\"Favorable\"] > min_support)\n\n```", "```py\nfrom collections import defaultdict\n\ndef find_frequent_itemsets(favorable_reviews_by_users, k_1_itemsets, min_support):\n    counts = defaultdict(int)\n    for user, reviews in favorable_reviews_by_users.items():\n        for itemset in k_1_itemsets:\n            if itemset.issubset(reviews):\n                for other_reviewed_movie in reviews - itemset:\n                    current_superset = itemset | frozenset((other_reviewed_movie,))\n                    counts[current_superset] += 1\n    return dict([(itemset, frequency) for itemset, frequency in counts.items() if frequency >= min_support])\n\n```", "```py\nfor k in range(2, 20):\n    # Generate candidates of length k, using the frequent itemsets of length k-1\n    # Only store the frequent itemsets\n    cur_frequent_itemsets = find_frequent_itemsets(favorable_reviews_by_users,\n                                                   frequent_itemsets[k-1], min_support)\n    if len(cur_frequent_itemsets) == 0:\n        print(\"Did not find any frequent itemsets of length {}\".format(k))\n        sys.stdout.flush()\n        break\n    else:\n        print(\"I found {} frequent itemsets of length {}\".format(len(cur_frequent_itemsets), k))\n        sys.stdout.flush()\n        frequent_itemsets[k] = cur_frequent_itemsets\n\n```", "```py\ncandidate_rules = []\nfor itemset_length, itemset_counts in frequent_itemsets.items():\n    for itemset in itemset_counts.keys():\n        for conclusion in itemset:\n            premise = itemset - set((conclusion,))\n            candidate_rules.append((premise, conclusion))\n\n```", "```py\nprint(candidate_rules[:5])\n\n```", "```py\n[(frozenset({79}), 258), (frozenset({258}), 79), (frozenset({50}), 64), (frozenset({64}), 50), (frozenset({127}), 181)]\n\n```", "```py\ncorrect_counts = defaultdict(int)\nincorrect_counts = defaultdict(int)\nfor user, reviews in favorable_reviews_by_users.items():\n    for candidate_rule in candidate_rules:\n        premise, conclusion = candidate_rule\n        if premise.issubset(reviews):\n            if conclusion in reviews:\n                correct_counts[candidate_rule] += 1\n            else:\n                incorrect_counts[candidate_rule] += 1\n\n```", "```py\nrule_confidence = {candidate_rule:\n                    (correct_counts[candidate_rule] / float(correct_counts[candidate_rule] +  \n                      incorrect_counts[candidate_rule]))\n                  for candidate_rule in candidate_rules}\n\n```", "```py\nfrom operator import itemgetter\nsorted_confidence = sorted(rule_confidence.items(), key=itemgetter(1), reverse=True)\nfor index in range(5):\n    print(\"Rule #{0}\".format(index + 1))\n    premise, conclusion = sorted_confidence[index][0]\n    print(\"Rule: If a person recommends {0} they will also recommend {1}\".format(premise, conclusion))\n    print(\" - Confidence: {0:.3f}\".format(rule_confidence[(premise, conclusion)]))\n    print(\"\")\n\n```", "```py\nmovie_name_filename = os.path.join(data_folder, \"u.item\")\nmovie_name_data = pd.read_csv(movie_name_filename, delimiter=\"|\", header=None,\n                              encoding = \"mac-roman\")\nmovie_name_data.columns = [\"MovieID\", \"Title\", \"Release Date\", \"Video Release\", \"IMDB\", \"<UNK>\",\n                           \"Action\", \"Adventure\", \"Animation\", \"Children's\", \"Comedy\", \"Crime\",\n                           \"Documentary\", \"Drama\", \"Fantasy\", \"Film-Noir\", \"Horror\", \"Musical\",   \n                           \"Mystery\", \"Romance\", \"Sci-Fi\", \"Thriller\", \"War\", \"Western\"]\n\n```", "```py\ndef get_movie_name(movie_id):\n    title_object = movie_name_data[movie_name_data[\"MovieID\"] == movie_id][\"Title\"]\n    title = title_object.values[0]\n    return title\n\n```", "```py\nfor index in range(5):\n    print(\"Rule #{0}\".format(index + 1))\n    premise, conclusion = sorted_confidence[index][0]\n    premise_names = \", \".join(get_movie_name(idx) for idx in premise)\n    conclusion_name = get_movie_name(conclusion)\n    print(\"Rule: If a person recommends {0} they will also recommend {1}\".format(premise_names, conclusion_name))\n    print(\" - Confidence: {0:.3f}\".format(rule_confidence[(premise, conclusion)]))\n    print(\"\")\n\n```", "```py\nRule #1\nRule: If a person recommends Shawshank Redemption, The (1994), Silence of the Lambs, The (1991), Pulp Fiction (1994), Star Wars (1977), Twelve Monkeys (1995) they will also recommend Raiders of the Lost Ark (1981)\n - Confidence: 1.000\n\nRule #2\nRule: If a person recommends Silence of the Lambs, The (1991), Fargo (1996), Empire Strikes Back, The (1980), Fugitive, The (1993), Star Wars (1977), Pulp Fiction (1994) they will also recommend Twelve Monkeys (1995)\n - Confidence: 1.000\n\nRule #3\nRule: If a person recommends Silence of the Lambs, The (1991), Empire Strikes Back, The (1980), Return of the Jedi (1983), Raiders of the Lost Ark (1981), Twelve Monkeys (1995) they will also recommend Star Wars (1977)\n - Confidence: 1.000\n\nRule #4\nRule: If a person recommends Shawshank Redemption, The (1994), Silence of the Lambs, The (1991), Fargo (1996), Twelve Monkeys (1995), Empire Strikes Back, The (1980), Star Wars (1977) they will also recommend Raiders of the Lost Ark (1981)\n - Confidence: 1.000\n\nRule #5\nRule: If a person recommends Shawshank Redemption, The (1994), Toy Story (1995), Twelve Monkeys (1995), Empire Strikes Back, The (1980), Fugitive, The (1993), Star Wars (1977) they will also recommend Return of the Jedi (1983)\n - Confidence: 1.000\n\n```", "```py\ntest_dataset = all_ratings[~all_ratings['UserID'].isin(range(200))]\ntest_favorable = test_dataset[test_dataset[\"Favorable\"]]\ntest_favorable_by_users = dict((k, frozenset(v.values)) for k, v in \n                               test_favorable.groupby(\"UserID\")[\"MovieID\"])\n\n```", "```py\ncorrect_counts = defaultdict(int)\nincorrect_counts = defaultdict(int)\nfor user, reviews in test_favorable_by_users.items():\n    for candidate_rule in candidate_rules:\n        premise, conclusion = candidate_rule\n        if premise.issubset(reviews):\n            if conclusion in reviews:\n                correct_counts[candidate_rule] += 1\n            else:\n                incorrect_counts[candidate_rule] += 1\n\n```", "```py\ntest_confidence = {candidate_rule:\n                             (correct_counts[candidate_rule] / float(correct_counts[candidate_rule] + incorrect_counts[candidate_rule]))\n                             for candidate_rule in rule_confidence}\nsorted_test_confidence = sorted(test_confidence.items(), key=itemgetter(1), reverse=True)\n\n```", "```py\nfor index in range(10):\n    print(\"Rule #{0}\".format(index + 1))\n    premise, conclusion = sorted_confidence[index][0]\n    premise_names = \", \".join(get_movie_name(idx) for idx in premise)\n    conclusion_name = get_movie_name(conclusion)\n    print(\"Rule: If a person recommends {0} they will also recommend {1}\".format(premise_names, conclusion_name))\n    print(\" - Train Confidence: {0:.3f}\".format(rule_confidence.get((premise, conclusion), -1)))\n    print(\" - Test Confidence: {0:.3f}\".format(test_confidence.get((premise, conclusion), -1)))\n    print(\"\")\n\n```", "```py\nRule #1\nRule: If a person recommends Shawshank Redemption, The (1994), Silence of the Lambs, The (1991), Pulp Fiction (1994), Star Wars (1977), Twelve Monkeys (1995) they will also recommend Raiders of the Lost Ark (1981)\n - Train Confidence: 1.000\n - Test Confidence: 0.909\n\nRule #2\nRule: If a person recommends Silence of the Lambs, The (1991), Fargo (1996), Empire Strikes Back, The (1980), Fugitive, The (1993), Star Wars (1977), Pulp Fiction (1994) they will also recommend Twelve Monkeys (1995)\n - Train Confidence: 1.000\n - Test Confidence: 0.609\n\nRule #3\nRule: If a person recommends Silence of the Lambs, The (1991), Empire Strikes Back, The (1980), Return of the Jedi (1983), Raiders of the Lost Ark (1981), Twelve Monkeys (1995) they will also recommend Star Wars (1977)\n - Train Confidence: 1.000\n - Test Confidence: 0.946\n\nRule #4\nRule: If a person recommends Shawshank Redemption, The (1994), Silence of the Lambs, The (1991), Fargo (1996), Twelve Monkeys (1995), Empire Strikes Back, The (1980), Star Wars (1977) they will also recommend Raiders of the Lost Ark (1981)\n - Train Confidence: 1.000\n - Test Confidence: 0.971\n\nRule #5\nRule: If a person recommends Shawshank Redemption, The (1994), Toy Story (1995), Twelve Monkeys (1995), Empire Strikes Back, The (1980), Fugitive, The (1993), Star Wars (1977) they will also recommend Return of the Jedi (1983)\n - Train Confidence: 1.000\n - Test Confidence: 0.900\n\n```"]