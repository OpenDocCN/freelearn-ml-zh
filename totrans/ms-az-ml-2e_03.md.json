["```py\nimport requests\nregion='eastus2'\nlanguage='en'\nversion='v3.1'\nkey = '<insert access key>'\nurl = f\"https://{region}.api.cognitive.microsoft.com\" \\\n    + f\"/vision/{version}/analyze\"\n```", "```py\nparams = {\n    'visualFeatures': 'Categories,Tags,Description',\n    'language': language\n}\nheaders = {\n    'Content-Type': 'application/json',\n    'Ocp-Apim-Subscription-Key': key\n}\npayload = {\n    'url': 'https://../Eiffel_Tower.jpg'\n}\n```", "```py\nresponse = requests.post(url,\n                         json=payload,\n                         params=params,\n                         headers=headers)\nresult = response.json()\nprint(result) \n```", "```py\n{ \n    \"categories\": [...], \n    \"tags\": [...], \n    \"description\": {...}, \n    \"requestId\": \"...\", \n    \"metadata\": { \n        \"width\": 288, \n        \"height\": 480, \n        \"format\": \"Jpeg\" \n    } \n} \n```", "```py\n\"categories\": [ \n    { \n        \"name\": \"building_\", \n        \"score\": 0.9453125, \n        \"detail\": { \n            \"landmarks\": [ \n                { \n                    \"name\": \"Eiffel Tower\", \n                    \"confidence\": 0.99992179870605469 \n                } \n            ] \n       } \n    } \n] \n```", "```py\n\"tags\": [ \n   { \n       \"name\": \"outdoor\", \n        \"confidence\": 0.99838995933532715 \n    }, \n    { \n       \"name\": \"tower\", \n        \"confidence\": 0.63238395233132431 \n    }, ... \n] \n```", "```py\n\"description\": { \n    \"tags\": [ \n        \"outdoor\", \"building\", \"tower\", ... \n    ], \n    \"captions\": [ \n        { \n            \"text\": \"a large clock tower in the background with Eiffel Tower in the background\", \n            \"confidence\": 0.74846089195278742 \n        } \n    ] \n} \n```", "```py\nfor url in product_image_urls: \n    res = analyze(url, key, features=['Description']) \n    caption = res['description']['captions'][0]['text'] \n    print(caption) \n```", "```py\nimport requests \ndef score(img_url, key, project_id, iteration_name):\n    endpoint = 'https://%s.api.cognitive.microsoft.com' \\\n      + '/customvision/v3.0/Prediction/%s' \\\n      + '/detect/iterations/%s/url' \\ \n      % (region, project_id, iteration_name) \n    headers = {\n        'Content-Type': 'application/json',\n        'Prediction-Key': key\n    } \n    payload = { 'url': img_url } \n\n    r = requests.post(url, json=payload, headers=headers) \n    return r.json() \n```", "```py\nurl = 'https://../Material_Experiment_1.jpg' \nkey = '<insert api key>' \nproject_id = '<insert project key>' \niteration_name = 'Iteration2' \nres = score(url, key, project_id, iteration_name) \nprint(res) \n```", "```py\n{ \n    \"Id\":\"7796df8e-acbc-45fc-90b4-1b0c81b73639\", \n    \"Project\":\"00ae2d88-a767-4ff6-ba5f-33cdf4817c44\", \n    \"Iteration\":\"59ec199d-f3fb-443a-b708-4bca79e1b7f7\", \n    \"Created\":\"2019-03-20T16:47:31.322Z\", \n    \"Predictions\":[ \n        { \n             \"TagId\":\"d9cb3fa5-1ff3-4e98-8d47-2ef42d7fb373\", \n             \"TagName\":\"defect\", \n             \"Probability\":1.0 \n        }, \n        { \n             \"TagId\":\"9a8d63fb-b6ed-4462-bcff-77ff72084d99\", \n             \"TagName\":\"defect\", \n             \"Probability\":0.1087869 \n        } \n    ] \n} \n```"]