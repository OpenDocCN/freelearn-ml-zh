["```py\n    %%bash\n    ```", "```py\n    mkdir -p tmp\n    ```", "```py\n    wget -O tmp/knn.model.tar.gz https://bit.ly/3yZ6qHE\n    ```", "```py\n    wget -O tmp/ll.model.tar.gz https://bit.ly/3ahj1fd\n    ```", "```py\n    s3_bucket = \"<INSERT S3 BUCKET HERE>\"\n    ```", "```py\n    prefix = \"chapter08\"\n    ```", "```py\n    !aws s3 mb s3://{s3_bucket}\n    ```", "```py\n    ll_model_data = \\\n    ```", "```py\n    f's3://{s3_bucket}/{prefix}/models/ll.model.tar.gz'\n    ```", "```py\n    knn_model_data = \\\n    ```", "```py\n    f's3://{s3_bucket}/{prefix}/models/knn.model.tar.gz'\n    ```", "```py\n    !aws s3 cp tmp/ll.model.tar.gz {ll_model_data}\n    ```", "```py\n    !aws s3 cp tmp/knn.model.tar.gz {knn_model_data}\n    ```", "```py\n    from sagemaker.image_uris import retrieve\n    ```", "```py\n    ll_image_uri = retrieve(\n    ```", "```py\n        \"linear-learner\", \n    ```", "```py\n        region=\"us-west-2\", \n    ```", "```py\n        version=\"1\"\n    ```", "```py\n    )\n    ```", "```py\n    knn_image_uri = retrieve(\n    ```", "```py\n        \"knn\", \n    ```", "```py\n        region=\"us-west-2\", \n    ```", "```py\n        version=\"1\"\n    ```", "```py\n    )\n    ```", "```py\n    import boto3\n    ```", "```py\n    client = boto3.client(service_name=\"sagemaker\")\n    ```", "```py\n    import string \n    ```", "```py\n    import random\n    ```", "```py\n    def generate_random_string():\n    ```", "```py\n        return ''.join(\n    ```", "```py\n            random.sample(\n    ```", "```py\n            string.ascii_uppercase,12)\n    ```", "```py\n        )\n    ```", "```py\n    group_id = generate_random_string()\n    ```", "```py\n    package_group_name = f\"group-{group_id}\"\n    ```", "```py\n    package_group_desc = f\"Model package group {group_id}\"\n    ```", "```py\n    response = client.create_model_package_group(\n    ```", "```py\n        ModelPackageGroupName=package_group_name,\n    ```", "```py\n        ModelPackageGroupDescription=package_group_desc\n    ```", "```py\n    )\n    ```", "```py\n    package_group_arn = response['ModelPackageGroupArn']\n    ```", "```py\n    package_group_arn\n    ```", "```py\n    def prepare_inference_specs(image_uri, model_data):\n    ```", "```py\n        return {\n    ```", "```py\n            \"Containers\": [\n    ```", "```py\n                {\n    ```", "```py\n                    \"Image\": image_uri,\n    ```", "```py\n                    \"ModelDataUrl\": model_data\n    ```", "```py\n                }\n    ```", "```py\n            ],\n    ```", "```py\n            \"SupportedContentTypes\": [ \n    ```", "```py\n                \"text/csv\" \n    ```", "```py\n            ],\n    ```", "```py\n            \"SupportedResponseMIMETypes\": [ \n    ```", "```py\n                \"application/json\" \n    ```", "```py\n            ],\n    ```", "```py\n        }\n    ```", "```py\n        def create_model_package(\n        ```", "```py\n                package_group_arn, \n        ```", "```py\n                inference_specs, \n        ```", "```py\n                client=client):\n        ```", "```py\n            input_dict = {\n        ```", "```py\n                \"ModelPackageGroupName\" : package_group_arn,\n        ```", "```py\n                \"ModelPackageDescription\" : \"Description\",\n        ```", "```py\n                \"ModelApprovalStatus\" : \"Approved\",\n        ```", "```py\n                \"InferenceSpecification\" : inference_specs\n        ```", "```py\n            }\n        ```", "```py\n            response = client.create_model_package(\n        ```", "```py\n                **input_dict\n        ```", "```py\n            )\n        ```", "```py\n            return response[\"ModelPackageArn\"]\n        ```", "```py\n    knn_inference_specs = prepare_inference_specs(\n    ```", "```py\n        image_uri=knn_image_uri,\n    ```", "```py\n        model_data=knn_model_data\n    ```", "```py\n    )\n    ```", "```py\n    ll_inference_specs = prepare_inference_specs(\n    ```", "```py\n        image_uri=ll_image_uri,\n    ```", "```py\n        model_data=ll_model_data\n    ```", "```py\n    )\n    ```", "```py\n    knn_package_arn = create_model_package(\n    ```", "```py\n        package_group_arn=package_group_arn,\n    ```", "```py\n        inference_specs=knn_inference_specs\n    ```", "```py\n    )\n    ```", "```py\n    ll_package_arn = create_model_package(\n    ```", "```py\n        package_group_arn=package_group_arn,\n    ```", "```py\n        inference_specs=ll_inference_specs\n    ```", "```py\n    )\n    ```", "```py\n    %store knn_package_arn\n    ```", "```py\n    %store ll_package_arn\n    ```", "```py\n    %store s3_bucket\n    ```", "```py\n    %store prefix\n    ```", "```py\n    %store -r knn_package_arn\n    ```", "```py\n    %store -r ll_package_arn\n    ```", "```py\n    import sagemaker\n    ```", "```py\n    from sagemaker import get_execution_role\n    ```", "```py\n    from sagemaker import ModelPackage\n    ```", "```py\n    from sagemaker.predictor import Predictor\n    ```", "```py\n    session = sagemaker.Session()\n    ```", "```py\n    role = get_execution_role()\n    ```", "```py\n    model = ModelPackage(\n    ```", "```py\n        role=role,\n    ```", "```py\n        model_package_arn=knn_package_arn,\n    ```", "```py\n        sagemaker_session=session\n    ```", "```py\n    )\n    ```", "```py\n    model.predictor_cls = Predictor\n    ```", "```py\n    from sagemaker.serializers import JSONSerializer\n    ```", "```py\n    from sagemaker.deserializers import JSONDeserializer\n    ```", "```py\n    predictor = model.deploy(\n    ```", "```py\n        instance_type='ml.m5.xlarge', \n    ```", "```py\n        initial_instance_count=1,\n    ```", "```py\n        serializer=JSONSerializer(),\n    ```", "```py\n        deserializer=JSONDeserializer()\n    ```", "```py\n    )\n    ```", "```py\n    payload = {\n    ```", "```py\n        'instances': [\n    ```", "```py\n            {\n    ```", "```py\n              \"features\": [ 1.5, 2 ]\n    ```", "```py\n            },\n    ```", "```py\n        ]\n    ```", "```py\n    }\n    ```", "```py\n    predictor.predict(data=payload)\n    ```", "```py\n    def process_prediction_result(raw_result):\n    ```", "```py\n        first = raw_result['predictions'][0]\n    ```", "```py\n        return first['predicted_label']\n    ```", "```py\n    def predict(x, y, predictor=predictor):\n    ```", "```py\n        payload = {\n    ```", "```py\n            'instances': [\n    ```", "```py\n                {\n    ```", "```py\n                  \"features\": [ x, y ]\n    ```", "```py\n                },\n    ```", "```py\n            ]\n    ```", "```py\n        }\n    ```", "```py\n        raw_result = predictor.predict(\n    ```", "```py\n            data=payload\n    ```", "```py\n        )\n    ```", "```py\n        return process_prediction_result(raw_result)\n    ```", "```py\n    predict(x=3, y=4)\n    ```", "```py\n    from time import sleep\n    ```", "```py\n    def test_different_values(predictor=predictor):\n    ```", "```py\n        for x in range(-3, 3+1):\n    ```", "```py\n            for y in range(-3, 3+1):\n    ```", "```py\n                label = predict(\n    ```", "```py\n                            x=x, \n    ```", "```py\n                            y=y, \n    ```", "```py\n                            predictor=predictor\n    ```", "```py\n                        )\n    ```", "```py\n                print(f\"x={x}, y={y}, label={label}\")\n    ```", "```py\n                sleep(0.2)\n    ```", "```py\n    test_different_values()\n    ```", "```py\n    import boto3\n    ```", "```py\n    client = boto3.client(service_name=\"sagemaker\")\n    ```", "```py\n    def create_model(model_package_arn, \n    ```", "```py\n                     model_name, \n    ```", "```py\n                     role=role, \n    ```", "```py\n                     client=client):\n    ```", "```py\n        container_list = [\n    ```", "```py\n            {'ModelPackageName': model_package_arn}\n    ```", "```py\n        ]\n    ```", "```py\n        response = client.create_model(\n    ```", "```py\n            ModelName = model_name,\n    ```", "```py\n            ExecutionRoleArn = role,\n    ```", "```py\n            Containers = container_list\n    ```", "```py\n        )\n    ```", "```py\n        return response[\"ModelArn\"]\n    ```", "```py\n    import string \n    ```", "```py\n    import random\n    ```", "```py\n    def generate_random_string():\n    ```", "```py\n        return ''.join(\n    ```", "```py\n            random.sample(\n    ```", "```py\n            string.ascii_uppercase,12)\n    ```", "```py\n        )\n    ```", "```py\n    model_name = f\"ll-{generate_random_string()}\"\n    ```", "```py\n    model_arn = create_model(\n    ```", "```py\n        model_package_arn=ll_package_arn,\n    ```", "```py\n        model_name=model_name\n    ```", "```py\n    )\n    ```", "```py\n    def create_endpoint_config(\n    ```", "```py\n            model_name, \n    ```", "```py\n            config_name, \n    ```", "```py\n            client=client):\n    ```", "```py\n        response = client.create_endpoint_config(\n    ```", "```py\n            EndpointConfigName = config_name,\n    ```", "```py\n            ProductionVariants=[{\n    ```", "```py\n                'InstanceType': \"ml.m5.xlarge\",\n    ```", "```py\n                'InitialInstanceCount': 1,\n    ```", "```py\n                'InitialVariantWeight': 1,\n    ```", "```py\n                'ModelName': model_name,\n    ```", "```py\n                'VariantName': 'AllTraffic'\n    ```", "```py\n            }]\n    ```", "```py\n        )\n    ```", "```py\n        return response[\"EndpointConfigArn\"]\n    ```", "```py\n    config_name = f\"config-{generate_random_string()}\"\n    ```", "```py\n    config_arn = create_endpoint_config(\n    ```", "```py\n        model_name=model_name,\n    ```", "```py\n        config_name=config_name\n    ```", "```py\n    )\n    ```", "```py\n    response = client.update_endpoint(\n    ```", "```py\n        EndpointName=predictor.endpoint_name,\n    ```", "```py\n        EndpointConfigName=config_name\n    ```", "```py\n    )\n    ```", "```py\n    print('Wait for update operation to complete')\n    ```", "```py\n    sleep(60*5)\n    ```", "```py\n    predictor = Predictor(\n    ```", "```py\n        endpoint_name=predictor.endpoint_name,\n    ```", "```py\n        sagemaker_session=session,\n    ```", "```py\n        serializer=JSONSerializer(),\n    ```", "```py\n        deserializer=JSONDeserializer()\n    ```", "```py\n    )\n    ```", "```py\n    payload = {\n    ```", "```py\n        'instances': [\n    ```", "```py\n            {\n    ```", "```py\n              \"features\": [ 1.5, 2 ]\n    ```", "```py\n            },\n    ```", "```py\n        ]\n    ```", "```py\n    }\n    ```", "```py\n    predictor.predict(data=payload)\n    ```", "```py\n    test_different_values(predictor=predictor)\n    ```", "```py\n    endpoint_name = predictor.endpoint_name\n    ```", "```py\n    %store endpoint_name\n    ```", "```py\n    %store -r s3_bucket\n    ```", "```py\n    %store -r prefix\n    ```", "```py\n    %store -r ll_package_arn\n    ```", "```py\n    %store -r endpoint_name\n    ```", "```py\n    import sagemaker\n    ```", "```py\n    from sagemaker import get_execution_role\n    ```", "```py\n    from sagemaker.predictor import Predictor\n    ```", "```py\n    from sagemaker.serializers import CSVSerializer\n    ```", "```py\n    from sagemaker.deserializers import CSVDeserializer\n    ```", "```py\n    session = sagemaker.Session()\n    ```", "```py\n    role = get_execution_role()\n    ```", "```py\n    predictor = Predictor(\n    ```", "```py\n        endpoint_name=endpoint_name,\n    ```", "```py\n        sagemaker_session=session,\n    ```", "```py\n        role=role,\n    ```", "```py\n        serializer=CSVSerializer(),\n    ```", "```py\n        deserializer=CSVDeserializer()\n    ```", "```py\n    )\n    ```", "```py\n    from sagemaker.model_monitor import DataCaptureConfig\n    ```", "```py\n    base = f\"s3://{s3_bucket}/{prefix}\"\n    ```", "```py\n    capture_upload_path = f\"{base}/data-capture\"\n    ```", "```py\n    capture_config_dict = {\n    ```", "```py\n        'enable_capture': True,\n    ```", "```py\n        'sampling_percentage': 100,\n    ```", "```py\n        'destination_s3_uri': capture_upload_path,\n    ```", "```py\n        'kms_key_id': None,\n    ```", "```py\n        'capture_options': [\"REQUEST\", \"RESPONSE\"],\n    ```", "```py\n        'csv_content_types': [\"text/csv\"],\n    ```", "```py\n        'json_content_types': [\"application/json\"]\n    ```", "```py\n    }\n    ```", "```py\n    data_capture_config = DataCaptureConfig(\n    ```", "```py\n        **capture_config_dict\n    ```", "```py\n    )\n    ```", "```py\n    %%time\n    ```", "```py\n    predictor.update_data_capture_config(\n    ```", "```py\n        data_capture_config=data_capture_config\n    ```", "```py\n    )\n    ```", "```py\n    %store capture_upload_path\n    ```", "```py\n    import random\n    ```", "```py\n    def generate_random_payload():\n    ```", "```py\n        x = random.randint(-5,5)\n    ```", "```py\n        y = random.randint(-5,5)\n    ```", "```py\n        return f\"{x},{y}\"\n    ```", "```py\n    def perform_good_input(predictor):\n    ```", "```py\n        print(\"> PERFORM REQUEST WITH GOOD INPUT\")\n    ```", "```py\n        payload = generate_random_payload()\n    ```", "```py\n        result = predictor.predict(data=payload)\n    ```", "```py\n        print(result)\n    ```", "```py\n    def perform_bad_input(predictor):\n    ```", "```py\n        print(\"> PERFORM REQUEST WITH BAD INPUT\")\n    ```", "```py\n        payload = generate_random_payload() + \".50\"\n    ```", "```py\n        result = predictor.predict(data=payload)\n    ```", "```py\n        print(result)\n    ```", "```py\n    perform_good_input(predictor)\n    ```", "```py\n    perform_bad_input(predictor)\n    ```", "```py\n    from time import sleep\n    ```", "```py\n    def generate_sample_requests(predictor):\n    ```", "```py\n        for i in range(0, 2 * 240):\n    ```", "```py\n            print(f\"ITERATION # {i}\")\n    ```", "```py\n            perform_good_input(predictor)\n    ```", "```py\n            perform_bad_input(predictor)\n    ```", "```py\n            print(\"> SLEEPING FOR 30 SECONDS\")\n    ```", "```py\n            sleep(30)\n    ```", "```py\n    generate_sample_requests(predictor)\n    ```", "```py\n    %store -r s3_bucket\n    ```", "```py\n    %store -r prefix\n    ```", "```py\n    %store -r ll_package_arn\n    ```", "```py\n    %store -r endpoint_name\n    ```", "```py\n    %store -r ll_package_arn\n    ```", "```py\n    import sagemaker\n    ```", "```py\n    from sagemaker import get_execution_role\n    ```", "```py\n    from sagemaker.predictor import Predictor\n    ```", "```py\n    session = sagemaker.Session()\n    ```", "```py\n    role = get_execution_role()\n    ```", "```py\n    predictor = Predictor(\n    ```", "```py\n        endpoint_name=endpoint_name,\n    ```", "```py\n        sagemaker_session=session,\n    ```", "```py\n        role=role\n    ```", "```py\n    )\n    ```", "```py\n    %%bash\n    ```", "```py\n    mkdir -p tmp\n    ```", "```py\n    wget -O tmp/baseline.csv https://bit.ly/3td5vjx\n    ```", "```py\n    base = f's3://{s3_bucket}/{prefix}'\n    ```", "```py\n    baseline_source_uri = f'{base}/baseline.csv'\n    ```", "```py\n    baseline_output_uri = f\"{base}/baseline-output\"\n    ```", "```py\n    !aws s3 cp tmp/baseline.csv {baseline_source_uri}\n    ```", "```py\n    from sagemaker.model_monitor import DefaultModelMonitor\n    ```", "```py\n    monitor_dict = {\n    ```", "```py\n        'role': role,\n    ```", "```py\n        'instance_count': 1,\n    ```", "```py\n        'instance_type': 'ml.m5.large',\n    ```", "```py\n        'volume_size_in_gb': 10,\n    ```", "```py\n        'max_runtime_in_seconds': 1800,\n    ```", "```py\n    }\n    ```", "```py\n    default_monitor = DefaultModelMonitor(\n    ```", "```py\n        **monitor_dict\n    ```", "```py\n    )\n    ```", "```py\n    %%time\n    ```", "```py\n    from sagemaker.model_monitor import dataset_format\n    ```", "```py\n    dataset_format = dataset_format.DatasetFormat.csv(\n    ```", "```py\n        header=True\n    ```", "```py\n    )\n    ```", "```py\n    baseline_dict = {\n    ```", "```py\n        'baseline_dataset': baseline_source_uri,\n    ```", "```py\n        'dataset_format': dataset_format,\n    ```", "```py\n        'output_s3_uri': baseline_output_uri,\n    ```", "```py\n        'wait': True\n    ```", "```py\n    }\n    ```", "```py\n    default_monitor.suggest_baseline(\n    ```", "```py\n        **baseline_dict\n    ```", "```py\n    )\n    ```", "```py\n    import pandas as pd\n    ```", "```py\n    def flatten(input_dict):\n    ```", "```py\n        df = pd.json_normalize(input_dict)\n    ```", "```py\n        return df.head()\n    ```", "```py\n    baseline_job = default_monitor.latest_baselining_job\n    ```", "```py\n    stats = baseline_job.baseline_statistics()\n    ```", "```py\n    schema_dict = stats.body_dict[\"features\"]\n    ```", "```py\n    flatten(schema_dict)\n    ```", "```py\n    constraints = baseline_job.suggested_constraints()\n    ```", "```py\n    constraints_dict = constraints.body_dict[\"features\"]\n    ```", "```py\n    flatten(constraints_dict)\n    ```", "```py\n    constraints.body_dict['features'][1]['inferred_type'] = 'Integral'\n    ```", "```py\n    constraints.body_dict['features'][2]['inferred_type'] = 'Integral'\n    ```", "```py\n    constraints.save()\n    ```", "```py\n    from sagemaker.model_monitor import (\n    ```", "```py\n        CronExpressionGenerator\n    ```", "```py\n    )\n    ```", "```py\n    from string import ascii_uppercase\n    ```", "```py\n    import random\n    ```", "```py\n    def generate_label():\n    ```", "```py\n        chars = random.choices(ascii_uppercase, k=5)\n    ```", "```py\n        output = 'monitor-' + ''.join(chars)\n    ```", "```py\n        return output\n    ```", "```py\n    s3_report_path = f'{base}/report'\n    ```", "```py\n    baseline_statistics = default_monitor.baseline_statistics()\n    ```", "```py\n    constraints = default_monitor.suggested_constraints()\n    ```", "```py\n    cron_expression = CronExpressionGenerator.hourly()\n    ```", "```py\n    schedule_dict = {\n    ```", "```py\n        'monitor_schedule_name': generate_label(),\n    ```", "```py\n        'endpoint_input': predictor.endpoint,\n    ```", "```py\n        'output_s3_uri': s3_report_path,\n    ```", "```py\n        'statistics': baseline_statistics,\n    ```", "```py\n        'constraints': constraints,\n    ```", "```py\n        'schedule_cron_expression': cron_expression,\n    ```", "```py\n        'enable_cloudwatch_metrics': True\n    ```", "```py\n    }\n    ```", "```py\n    default_monitor.create_monitoring_schedule(\n    ```", "```py\n        **schedule_dict\n    ```", "```py\n    )\n    ```", "```py\n    flatten(default_monitor.describe_schedule())\n    ```", "```py\n    from time import sleep\n    ```", "```py\n    sleep(300)\n    ```", "```py\n    dm = default_monitor\n    ```", "```py\n    monitoring_violations = \\\n    ```", "```py\n    dm.latest_monitoring_constraint_violations()\n    ```", "```py\n    monitoring_statistics = \\\n    ```", "```py\n    dm.latest_monitoring_statistics()\n    ```", "```py\n    %%time\n    ```", "```py\n    from time import sleep\n    ```", "```py\n    def get_violations():\n    ```", "```py\n        return \\\n    ```", "```py\n        dm.latest_monitoring_constraint_violations()\n    ```", "```py\n    def loop_and_load_violations():\n    ```", "```py\n        for i in range(0, 2 * 120):\n    ```", "```py\n            print(f\"ITERATION # {i}\")\n    ```", "```py\n            print(\"> SLEEPING FOR 60 SECONDS\")\n    ```", "```py\n            sleep(60)\n    ```", "```py\n            try:\n    ```", "```py\n                v = get_violations()\n    ```", "```py\n                violations = v\n    ```", "```py\n                if violations:\n    ```", "```py\n                    return violations\n    ```", "```py\n            except:\n    ```", "```py\n                pass\n    ```", "```py\n        print(\"> DONE!\")\n    ```", "```py\n        return None              \n    ```", "```py\n    loop_and_load_violations()\n    ```", "```py\n    violations = dm.latest_monitoring_constraint_violations()\n    ```", "```py\n    violations.__dict__\n    ```", "```py\n{'body_dict': {'violations': [\n  {'feature_name': 'b',\n    'constraint_check_type': 'data_type_check',\n    'description': 'Data type match requirement is not met. Expected data type: Integral, Expected match: 100.0%. Observed: Only 50.0% of data is Integral.'}]\n  },\n 'file_s3_uri': 's3://<BUCKET>/chapter08/report/1-2022-05-23-14-39-16-279/monitor-YTADH/2022/05/23/16/constraint_violations.json',\n 'kms_key': None,\n 'session': None\n}\n```", "```py\n    monitoring_statistics = dm.latest_monitoring_statistics()\n    ```", "```py\n    monitoring_statistics.__dict__\n    ```", "```py\n{'body_dict': {'version': 0.0,\n  'dataset': {'item_count': 190},\n  'features': [{'name': 'label',\n    'inferred_type': 'Integral',\n    'numerical_statistics': {'common': {'num_present': 190, 'num_missing': 0},\n     'mean': 1.2052631578947368,\n     'sum': 229.0,\n     'std_dev': 0.7362591679068381,\n     'min': 0.0,\n     'max': 2.0,\n      ... (and more) ...\n```", "```py\n    %store -r s3_bucket\n    ```", "```py\n    %store -r capture_upload_path\n    ```", "```py\n    results = !aws s3 ls {capture_upload_path} --recursive\n    ```", "```py\n    processed = []\n    ```", "```py\n    for result in results:\n    ```", "```py\n        partial = result.split()[-1]\n    ```", "```py\n        path = f\"s3://{s3_bucket}/{partial}\"\n    ```", "```py\n        processed.append(path)\n    ```", "```py\n    processed\n    ```", "```py\n    !mkdir -p captured\n    ```", "```py\n    for index, path in enumerate(processed):\n    ```", "```py\n        print(index, path)\n    ```", "```py\n        !aws s3 cp {path} captured/{index}.jsonl\n    ```", "```py\n    import json\n    ```", "```py\n    def load_json_file(path):\n    ```", "```py\n        output = []\n    ```", "```py\n        with open(path) as f:\n    ```", "```py\n            output = [json.loads(line) for line in f]\n    ```", "```py\n        return output\n    ```", "```py\n    all_json = []\n    ```", "```py\n    for index, _ in enumerate(processed):\n    ```", "```py\n        print(f\"INDEX: {index}\")\n    ```", "```py\n        new_records = load_json_file(\n    ```", "```py\n            f\"captured/{index}.jsonl\"\n    ```", "```py\n        )\n    ```", "```py\n        all_json = all_json + new_records\n    ```", "```py\n    all_json\n    ```", "```py\n    !pip3 install flatten-dict\n    ```", "```py\n    from flatten_dict import flatten\n    ```", "```py\n    first = flatten(all_json[0], reducer='dot')\n    ```", "```py\n    first\n    ```", "```py\n{'captureData.endpointInput.observedContentType': 'text/csv',\n 'captureData.endpointInput.mode': 'INPUT',\n 'captureData.endpointInput.data': '0,0',\n 'captureData.endpointInput.encoding': 'CSV',\n 'captureData.endpointOutput.observedContentType': 'text/csv; charset=utf-8',\n 'captureData.endpointOutput.mode': 'OUTPUT',\n 'captureData.endpointOutput.data': '2\\n',\n 'captureData.endpointOutput.encoding': 'CSV',\n 'eventMetadata.eventId': 'b73b5e15-06ad-48af-b53e-6b8800e98678',\n 'eventMetadata.inferenceTime': '2022-05-23T18:43:42Z',\n 'eventVersion': '0'}\n```", "```py\n    flattened_json = []\n    ```", "```py\n    for entry in all_json:\n    ```", "```py\n        result = flatten(entry, reducer='dot')\n    ```", "```py\n        flattened_json.append(result)\n    ```", "```py\n    flattened_json\n    ```", "```py\n    import pandas as pd\n    ```", "```py\n    df = pd.DataFrame(flattened_json)\n    ```", "```py\n    df\n    ```", "```py\n    df[['x', 'y']] = df['captureData.endpointInput.data'].str.split(',', 1, expand=True)\n    ```", "```py\n    df['predicted_label'] = df['captureData.endpointOutput.data'].str.strip()\n    ```", "```py\n    clean_df = df[['predicted_label', 'x', 'y']]\n    ```", "```py\n    clean_df.head()\n    ```", "```py\n    clean_df = clean_df.astype({\n    ```", "```py\n        'predicted_label': 'int',\n    ```", "```py\n        'x': 'float',\n    ```", "```py\n        'y': 'float',\n    ```", "```py\n    })\n    ```", "```py\n    clean_df.head()\n    ```", "```py\n    %store -r endpoint_name\n    ```", "```py\n    import sagemaker\n    ```", "```py\n    from sagemaker import get_execution_role\n    ```", "```py\n    from sagemaker.predictor import Predictor\n    ```", "```py\n    session = sagemaker.Session()\n    ```", "```py\n    role = get_execution_role()\n    ```", "```py\n    predictor = Predictor(\n    ```", "```py\n        endpoint_name=endpoint_name,\n    ```", "```py\n        sagemaker_session=session,\n    ```", "```py\n        role=role\n    ```", "```py\n    )\n    ```", "```py\n    monitors = predictor.list_monitors()\n    ```", "```py\n    for monitor in monitors:\n    ```", "```py\n        print(monitor.__dict__)\n    ```", "```py\n    for monitor in monitors:\n    ```", "```py\n        monitor.delete_monitoring_schedule()\n    ```", "```py\n    predictor.delete_endpoint()\n    ```"]