["```py\n\n    # String assignment\n    test = \"I am a string\"\n    print(test)\n    ```", "```py\n\n# Simple calculation\ntest2 = 1 + 2\nprint(test2)\n```", "```py\n\n    >>> ls()\n    \"test\"  \"test2\"\n    ```", "```py\n\n    >>> a = 1.0; b = 1; c = \"test\"; d = TRUE; e = factor(\"test\")\n    >>> class(a); class(b); class(c); class(d); class(e)\n    \"numeric\"\n    \"numeric\"\n    \"character\"\n    \"logical\"\n    \"factor\"\n    ```", "```py\n\n    >>> a + b\n    2\n    >>> class(a + b)\n    \"numeric\"\n    ```", "```py\n    >>> a + c\n    Error in a + c : non-numeric argument to binary operator\n    ```", "```py\n\n    >>> a + d\n    2\n    >>> class(a + d)\n    \"numeric\"\n    ```", "```py\n    >>> a + !d\n    1\n    ```", "```py\n    >>> a == d\n    TRUE\n    ```", "```py\n\n    >>> class(as.numeric(b))\n    \"numeric\"\n    ```", "```py\n    >>> as.integer(1.8)\n    1\n    >>> round(1.8)\n    2\n    ```", "```py\n    >>> as.character(a)\n    \"1\"\n    >>> as.character(d)\n    \"TRUE\"\n    ```", "```py\n    >>> as.factor(a)\n    1\n    Levels: 1\n    >>> as.factor(c)\n    test\n    Levels: test\n    ```", "```py\n\n    >>> vec_a = c(1,2,3)\n    >>> vec_b = c(1,1,1)\n    >>> sum(vec_a)\n    6\n    >>> mean(vec_a)\n    2\n    ```", "```py\n\n    >>> vec_a + vec_b\n    2 3 4\n    ```", "```py\n\n    >>> vec_a + 1\n    2 3 4\n    ```", "```py\n\n    >>> vec_a + c(1,1)\n    2 3 4\n    Warning message:\n    In vec_a + c(1, 1) :\n    longer object length is not a multiple of shorter object length\n    ```", "```py\n\n    vec_a > vec_b\n    FALSE  TRUE  TRUE\n    vec_a == vec_b\n    TRUE FALSE FALSE\n    ```", "```py\n\n    >>> vec_a[1]\n    1\n    ```", "```py\n\n    >>> vec_a[c(1,3)]\n    1 3\n    ```", "```py\n\n    >>> vec_a[c(1,2,3)]\n    1 2 3\n    ```", "```py\n    >>> vec_a[1:3]\n    1 2 3\n    ```", "```py\n\n    >>> vec_a[vec_a > vec_b]\n    2 3\n    ```", "```py\n\n    >>> mtx_a = matrix(c(vec_a,vec_b), nrow=2, byrow=TRUE)\n    >>> mtx_a\n         [,1] [,2] [,3]\n    [1,]    1    2    3\n    [2,]    1    1    1\n    ```", "```py\n\n    >>> rownames(mtx_a) = c(\"r1\", \"r2\")\n    >>> colnames(mtx_a) = c(\"c1\", \"c2\", \"c3\")\n    >>> mtx_a\n       c1 c2 c3\n    r1  1  2  3\n    r2  1  1  1\n    ```", "```py\n\n    >>> mtx_a[1,2]\n    2\n    ```", "```py\n\n    >>> mtx_a[1:2,c(2,3)]\n       c2 c3\n    r1  2  3\n    r2  1  1\n    ```", "```py\n\n    >>> mtx_a[2,]\n    c1 c2 c3\n     1  1  1\n    Selecting elements by matching the row name using a conditional evaluation statement offers a more precise way of subsetting the matrix, especially when counting the exact index becomes troublesome. Name-based indexing also applies to columns.\n    ```", "```py\n\n    >>> mtx_a[,3]\n    r1 r2\n     3  1\n    >>> mtx_a[,colnames(mtx_a)==\"c3\"]\n    r1 r2\n     3  1\n    ```", "```py\n\n    >>> mtx_b = mtx_a * 2\n    >>> mtx_b\n       c1 c2 c3\n    r1  2  4  6\n    r2  2  2  2\n    ```", "```py\n\n    >>> mtx_a / mtx_b\n        c1  c2  c3\n    r1 0.5 0.5 0.5\n    r2 0.5 0.5 0.5\n    ```", "```py\n\n    >>> rowSums(mtx_a)\n    r1 r2\n     6  3\n    >>> colSums(mtx_a)\n    c1 c2 c3\n     2  3  4\n    >>> rowMeans(mtx_a)\n    r1 r2\n     2  1\n    >>> colMeans(mtx_a)\n    c1  c2  c3\n    1.0 1.5 2.0\n    ```", "```py\n\n    >>> cbind(mtx_a, mtx_b)\n       c1 c2 c3 c1 c2 c3\n    r1  1  2  3  2  4  6\n    r2  1  1  1  2  2  2\n    ```", "```py\n\n    >>> rbind(mtx_a, mtx_b)\n       c1 c2 c3\n    r1  1  2  3\n    r2  1  1  1\n    r1  2  4  6\n    r2  2  2  2\n    ```", "```py\n\n    >>> data(\"iris\")\n    >>> dim(iris)\n    150   5\n    ```", "```py\n\n    >>> head(iris)\n      Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n    1          5.1         3.5          1.4         0.2  setosa\n    2          4.9         3.0          1.4         0.2  setosa\n    3          4.7         3.2          1.3         0.2  setosa\n    4          4.6         3.1          1.5         0.2  setosa\n    5          5.0         3.6          1.4         0.2  setosa\n    6          5.4         3.9          1.7         0.4  setosa\n    >>> tail(iris)\n        Sepal.Length Sepal.Width Petal.Length Petal.Width   Species\n    145          6.7         3.3          5.7         2.5 virginica\n    146          6.7         3.0          5.2         2.3 virginica\n    147          6.3         2.5          5.0         1.9 virginica\n    148          6.5         3.0          5.2         2.0 virginica\n    149          6.2         3.4          5.4         2.3 virginica\n    150          5.9         3.0          5.1         1.8 virginica\n    ```", "```py\n\n    >>> str(iris)\n    'data.frame':    150 obs. of  5 variables:\n     $ Sepal.Length: num  5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ...\n     $ Sepal.Width : num  3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ...\n     $ Petal.Length: num  1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ...\n     $ Petal.Width : num  0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ...\n     $ Species     : Factor w/ 3 levels \"setosa\",\"versicolor\",..: 1 1 1 1 1 1 1 1 1 1 ...\n    ```", "```py\n\n    >>> df_a = data.frame(\"a\"=vec_a, \"b\"=vec_b)\n    >>> df_a\n      a b\n    1 1 1\n    2 2 1\n    3 3 1\n    ```", "```py\n\n    >>> df_a[,2]\n    1 1 1\n    ```", "```py\n    >>> df_a[1:3,2]\n    1 1 1\n    Alternatively, we can use the shortcut `$` sign to reference the column name directly:\n\n    ```", "```py\n\n    The `subset()` function provides an easy and structured way to perform row-level filtering and column-level selection. Let’s see how it works in practice.\n    ```", "```py\n\n    >>> subset(df_a, a>2)\n      a b\n    3 3 1\n    ```", "```py\n\n    >>> subset(df_a, a>2, select=\"b\")\n      b\n    3 1\n    ```", "```py\n\n    >>> vec_c = c(5,1,10)\n    >>> order(vec_c)\n    2 1 3\n    >>> vec_c[order(vec_c)]\n    1  5 10\n    ```", "```py\n\n    >>> df_a[order(-df_a$a),]\n      a b\n    3 3 1\n    2 2 1\n    1 1 1\n    ```", "```py\n\n    >>> ls_a = list(a, vec_a, df_a)\n    >>> ls_a\n    [[1]]\n    [1] 1\n    [[2]]\n    [1] 1 2 3\n    [[3]]\n      a b\n    1 1 1\n    2 2 1\n    3 3 1\n    ```", "```py\n\n    >>> ls_a[[2]]\n    1 2 3\n    ```", "```py\n\n    >>> names(ls_a) <- c(\"a\", \"vec_a\", \"df_a\")\n    ls_a\n    $a\n    [1] 1\n    $vec_a\n    [1] 1 2 3\n    $df_a\n      a b\n    1 1 1\n    2 2 1\n    3 3 1\n    >>> ls_a[['vec_a']]\n    1 2 3\n    >>> ls_a$vec_a\n    1 2 3\n    ```", "```py\n\n    >>> ls_a[['new_entry']] = \"test\"\n    >>> ls_a\n    $a\n    [1] 1\n    $vec_a\n    [1] 1 2 3\n    $df_a\n      a b\n    1 1 1\n    2 2 1\n    3 3 1\n    $new_entry\n    [1] \"test\"\n    ```", "```py\n\n    >>> ls_a[['df_a']] = NULL\n    >>> ls_a\n    $a\n    [1] 1\n    $vec_a\n    [1] 1 2 3\n    $new_entry\n    [1] \"test\"\n    ```", "```py\n\n    >>> ls_a[['vec_a']] = c(1,2)\n    >>> ls_a\n    $a\n    [1] 1\n    $vec_a\n    [1] 1 2\n    $new_entry\n    [1] \"test\"\n    ```", "```py\n\n    >>> 1 == 2\n    FALSE\n    >>> \"statistics\" == \"calculus\"\n    FALSE\n    >>> TRUE == TRUE\n    TRUE\n    >>> TRUE == FALSE\n    FALSE\n    ```", "```py\n\n    >>> 1 != 2\n    TRUE\n    >>> \"statistics\" != \"calculus\"\n    TRUE\n    >>> TRUE != TRUE\n    FALSE\n    >>> TRUE != FALSE\n    TRUE\n    ```", "```py\n\n    >>> 1 < 2\n    TRUE\n    >>> \"statistics\" > \"calculus\"\n    TRUE\n    >>> TRUE > FALSE\n    TRUE\n    ```", "```py\n\n    >>> 1 >= 2\n    FALSE\n    >>> 2 <= 2\n    TRUE\n    ```", "```py\n    >>> (1 > 2) | (1 == 2)\n    FALSE\n    >>> (2 < 2) | (2 == 2)\n    TRUE\n    ```", "```py\n\n    >>> vec_a > 1\n    FALSE  TRUE  TRUE\n    ```", "```py\n\n    >>> TRUE & FALSE\n    FALSE\n    >>> TRUE & TRUE\n    TRUE\n    >>> FALSE & FALSE\n    FALSE\n    >>> 1 > 0 & 1 < 2\n    TRUE\n    ```", "```py\n\n    >>> TRUE | FALSE\n    TRUE\n    >>> TRUE | TRUE\n    TRUE\n    >>> FALSE | FALSE\n    FALSE\n    >>> 1 < 0 | 1 < 2\n    TRUE\n    ```", "```py\n\n    >>> !TRUE\n    FALSE\n    >>> !FALSE\n    TRUE\n    >>> !(1<0)\n    TRUE\n    ```", "```py\n\n    >>> c(TRUE, FALSE) & c(TRUE, TRUE)\n    TRUE FALSE\n    >>> c(TRUE, FALSE) | c(TRUE, TRUE)\n    TRUE TRUE\n    >>> !c(TRUE, FALSE)\n    FALSE  TRUE\n    ```", "```py\n\n>>> c(TRUE, FALSE) && c(FALSE, TRUE)\nFALSE\n>>> c(TRUE, FALSE) || c(FALSE, TRUE)\nTRUE\n```", "```py\n\nif(evaluation condition){\nsome expression\n} else {\nother expression\n}\n```", "```py\n\n    >>> x = 1\n    >>> if(x > 0){\n    >>>\tprint(\"positive\")\n    >>> } else {\n    >>> \tprint(\"not positive\")\n    >>> }\n    \"positive\"\n    ```", "```py\n\n    >>> x = 0\n    >>> if(x > 0){\n    >>>  print(\"positive\")\n    >>> } else if(x == 0){\n    >>>  print(\"zero\")\n    >>> } else {\n    >>>  print(\"negative\")\n    >>> }\n    \"zero\"\n    ```", "```py\n\nwhile(condition 1){\nsome expression\nif(condition 2){\n        break\n}\n}\n```", "```py\n\n    >>> x = 2\n    >>> while(x < 10){\n    >>>   x = x^2\n    >>>   print(x)\n    >>> }\n    4\n    16\n    ```", "```py\n    >>> x\n    16\n    ```", "```py\n\n    >>> x = 2\n    >>> while(x < 10){\n    >>>   x = x^2\n    >>>   if(x > 10){\n    >>>     break\n    >>>  }\n    >>>   print(x)\n    >>> }\n    4\n    ```", "```py\n    >>> x\n    16\n    ```", "```py\n\nfor(var in sequence){\nsome expression\n}\n```", "```py\n\n    >>> string_a = c(\"statistics\",\"and\",\"calculus\")\n    >>> for(i in string_a){\n    >>>   print(i)\n    >>> }\n    \"statistics\"\n    \"and\"\n    \"calculus\"\n    ```", "```py\n    >>> for(i in 1:length(string_a)){\n    >>>   print(string_a[i])\n    >>> }\n    \"statistics\"\n    \"and\"\n    \"calculus\"\n    ```", "```py\n\n    >>> for(i in string_a){\n    >>>   if(i == \"and\"){\n    >>>     break\n    >>>   }\n    >>>   print(i)\n    >>> }\n    \"statistics\"\n    ```", "```py\n\n    >>> for(i in string_a){\n    >>>   if(i == \"and\"){\n    >>>    next\n    >>>   }\n    >>>  print(i)\n    >>> }\n    \"statistics\"\n    \"calculus\"\n    ```", "```py\n\nfunction_name = function(argument_1, argument_2, …){\n  some statements\n}\n```", "```py\n\n    test_func = function(x, cap=FALSE){\n      msg = paste(x,\"is fun!\")\n      if(cap){\n        msg = toupper(msg)\n      }\n      return(msg)\n    }\n    ```", "```py\n\n    >>> test_func(\"r\")\n    \"r is fun!\"\n    >>> test_func(\"r\",cap=TRUE)\n    \"R IS FUN!\"\n    >>> test_func()\n    Error in paste(x, \"is fun!\") : argument \"x\" is missing, with no default\n    ```"]