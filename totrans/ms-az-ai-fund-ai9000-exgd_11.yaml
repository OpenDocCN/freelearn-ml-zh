- en: '11'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Identify Capabilities of Azure OpenAI Service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this final chapter, we’re going to look at the capabilities of Azure OpenAI
    Service. If you’ll recall, OpenAI is the company behind what are currently some
    of the most popular **generative artificial intelligence** (**GenAI**) products
    such as ChatGPT and DALL-E.
  prefs: []
  type: TYPE_NORMAL
- en: Azure OpenAI Service brings those same capabilities directly into Azure, letting
    you work seamlessly with your own data to generate new **completions** and images.
  prefs: []
  type: TYPE_NORMAL
- en: 'The objectives and skills we’ll cover in this chapter include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: What is Azure OpenAI Service?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Describe **natural language generation** (**NLG**) capabilities of Azure OpenAI
    Service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Describe code generation capabilities of Azure OpenAI Service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Describe image generation capabilities of Azure OpenAI Service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this chapter, you should be able to easily describe the features
    and capabilities of the powerful new OpenAI services part of the Azure Cognitive
    Services family of tools.
  prefs: []
  type: TYPE_NORMAL
- en: What is Azure OpenAI Service?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Azure OpenAI Service is a cloud-based platform that integrates cutting-edge
    **artificial intelligence** (**AI**) models developed by OpenAI into the Azure
    ecosystem.
  prefs: []
  type: TYPE_NORMAL
- en: What’s included?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'At a high level, Azure OpenAI Service combines OpenAI’s models with the Azure
    platform. There are four main components included:'
  prefs: []
  type: TYPE_NORMAL
- en: Pre-trained GenAI models
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Customization and fine-tuning
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Responsible AI frameworks and tooling to help mitigate harm
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Security including private networking and **role-based access** **control**
    (**RBAC**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This service offers businesses and developers access to some of the most advanced
    AI models, such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**GPT-4**: As the latest model of OpenAI’s **Generative Pre-trained Transformer**
    (**GPT**) models, the GPT-4 model offers advanced **natural language understanding**
    (**NLU**) and NLG capabilities, enabling diverse applications such as content
    creation, conversation simulation, code completion, language translation, and
    complex problem-solving across various industries.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**GPT-3.5**: This GPT model is a powerful language generation AI that excels
    in creating human-like text, answering questions, composing essays, coding, and
    more, making it highly applicable in fields such as customer service, content
    creation, education, and software development. In particular, the **GPT-3.5 Turbo**
    model is optimized for rapid **natural language processing** (**NLP**), perfect
    for chat-based interactions such as chatbots and interactive customer support
    scenarios.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Embeddings**: As you learned in [*Chapter 10*](B22207_10.xhtml#_idTextAnchor187),
    *Identify Features of Generative AI Solutions*, embedding is the process of mapping
    out the relationship of words (or tokens) to each other. Embedding models within
    Azure OpenAI Service enable nuanced text representations, improving semantic search,
    content discovery, and data clustering by capturing deep linguistic and contextual
    relationships, thereby enhancing AI applications with more accurate and relevant
    results.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Codex**: Codex models in Azure OpenAI Service are optimized for advanced
    programming assistance by understanding and generating human-like code, enabling
    automated code generation, explanation, and bug fixing, enhancing developer productivity
    and code quality.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**DALL-E**: The DALL-E models in Azure OpenAI Service excel in generating creative,
    detailed images from textual descriptions, providing innovative solutions for
    visual content creation, design inspiration, and enhancing digital media applications
    with unique, customized visuals.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This breadth of models and services under one accessible platform enables the
    creation of sophisticated applications that can understand, interpret, generate,
    and translate **natural language** (**NL**), as well as generate images. Azure
    OpenAI Service aims to make these powerful AI capabilities more accessible and
    manageable, supporting a wide range of use cases from automated content generation
    to customer support enhancements.
  prefs: []
  type: TYPE_NORMAL
- en: One of the key features of Azure OpenAI Service is its comprehensive suite of
    NLP tools. This includes capabilities for text summarization, language translation,
    content generation, and semantic search. By leveraging these tools, developers
    can enhance applications with sophisticated language models that understand and
    produce human-like text, making them more interactive and intelligent. This has
    significant implications for improving user experiences, whether through creating
    more responsive chatbots, automating content creation, or providing more accurate
    search results within applications.
  prefs: []
  type: TYPE_NORMAL
- en: Azure OpenAI Service emphasizes security and compliance, integrating Azure’s
    robust security measures to protect data and ensure privacy. The service operates
    within the secure Azure infrastructure, offering enterprise-grade security features
    including data encryption, private networking options, and compliance with global
    standards. Unlike models from other vendors, Microsoft does not use customer data
    for training models. This focus on security makes it a reliable choice for organizations
    concerned with protecting sensitive information while leveraging AI technologies.
  prefs: []
  type: TYPE_NORMAL
- en: In terms of customization and control, Azure OpenAI Service allows developers
    to fine-tune AI models to suit specific business needs. This includes the ability
    to train models on proprietary data, ensuring that generated content is relevant
    and aligned with the organization’s objectives and tone. Furthermore, the service
    provides tools for monitoring and managing AI usage, helping to optimize performance
    and manage costs effectively.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '**Azure AI** is a new umbrella product family that brings together the legacy
    Azure Cognitive Services and Azure Applied AI Services under one name.'
  prefs: []
  type: TYPE_NORMAL
- en: What’s the difference between Azure AI and Azure OpenAI services?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Prior to Microsoft’s relationship with OpenAI, Azure boasted a diverse portfolio
    of **machine learning** (**ML**)- and AI-based services. In this section, we’ll
    identify both similarities and differences between the product families.
  prefs: []
  type: TYPE_NORMAL
- en: What’s similar?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Given that both Azure AI and Azure OpenAI services feature advanced AI tooling,
    there are several areas of overlap:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Integration with Azure**: Both services are integrated into the Azure ecosystem,
    offering seamless connectivity with other Azure services such as Azure Storage,
    Azure Functions, and Azure Cognitive Services for comprehensive cloud-based solutions'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**AI capabilities**: Both provide AI capabilities, leveraging ML and advanced
    algorithms to support various AI tasks such as NLP, text analysis, and image generation'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Scalability**: They are designed to be scalable, allowing users to scale
    their AI applications according to their needs and manage computational resources
    efficiently within the Azure environment'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Security and compliance**: Both services adhere to Azure’s security standards,
    offering tools and configurations to ensure data privacy, compliance, and secure
    AI operations within the cloud'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s look at the differentiators to see which features might influence you
    to choose one over the other.
  prefs: []
  type: TYPE_NORMAL
- en: What’s different?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'With the similarities, it may be difficult to understand where to draw the
    line and which services to choose for a particular scenario:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Scope and focus**: Azure AI services encompass a broad range of AI tools
    and cognitive services, including vision, speech, language, decision, and web
    search functionalities, aimed at general AI tasks. In contrast, Azure OpenAI services
    specifically provide access to OpenAI’s advanced models such as GPT-3, Codex,
    and DALL-E, focusing on state-of-the-art NL and image generation capabilities.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Model customization**: Azure AI services typically offer pre-built and customizable
    models tailored for specific tasks, such as text analytics or **computer vision**
    (**CV**), allowing for broader applicability across different domains. Azure OpenAI
    services, however, focus on providing access to large-scale generative models
    that can be fine-tuned and adapted for specialized tasks, particularly in language
    understanding and generation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Use cases**: While Azure AI services cater to a wide range of standard AI
    scenarios, including speech recognition, language translation, and anomaly detection,
    Azure OpenAI services are more specialized, targeting use cases that require deep
    NLU, creative content generation, and advanced code automation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Technology and innovation**: Azure OpenAI services represent the cutting
    edge of AI research and capabilities, especially in GenAI, offering some of the
    latest advancements in AI technology and models. In comparison, Azure AI services
    provide a more established suite of tools covering a wide spectrum of AI needs,
    with a focus on proven, widely applicable solutions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: While both Azure AI services and Azure OpenAI services are integral parts of
    Microsoft’s AI offerings within the Azure cloud platform, they cater to different
    needs and scenarios, with Azure AI services providing a broad array of cognitive
    capabilities and Azure OpenAI services focusing on advanced GenAI models and applications.
  prefs: []
  type: TYPE_NORMAL
- en: Accessing Azure OpenAI services
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that you’ve decided to use Azure OpenAI services, how do you access them?
  prefs: []
  type: TYPE_NORMAL
- en: 'The easiest way to begin using the Azure OpenAI services is through **Azure
    OpenAI Studio**, located at [https://oai.azure.com/portal](https://oai.azure.com/portal),
    as shown in *Figure 11**.1*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.1 – Overview of launching Azure AI Studio](img/B22207_11_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.1 – Overview of launching Azure AI Studio
  prefs: []
  type: TYPE_NORMAL
- en: The landing page prominently displays a selection of models for deployment as
    well as some pre-built examples that you can deploy.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s explore some concepts and sections of the interface.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Access to Azure OpenAI services is granted only through an application process
    and is not broadly available. You can apply to be allowed access to the resources
    by filling out a request form at [https://aka.ms/oai/access](https://aka.ms/oai/access).
    Applications can take up to 2 weeks to process.
  prefs: []
  type: TYPE_NORMAL
- en: Playground
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In Azure OpenAI Studio, a playground is an area where you can experience the
    features of different models. The core playgrounds are the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Assistants**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Chat**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Completions**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**DALL-E**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each of these areas has a different goal, so let’s begin exploring them!
  prefs: []
  type: TYPE_NORMAL
- en: Assistants
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The Assistants playground (only available in East US 2, Australia East, and
    Sweden Central Azure regions), is designed to help you design and test AI assistants
    customized to your needs.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Assistants, at this time, are a more **code-first** style deployment. The playground
    demonstrates the tooling’s capability, but if you were to build and deploy one,
    you would need coding experience.
  prefs: []
  type: TYPE_NORMAL
- en: 'To configure an Assistants playground, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: From the Azure AI Studio home page ([https://oai.azure.com/portal](https://oai.azure.com/portal)),
    under **Playground**, select **Assistants**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If this is the first time you’ve worked with Azure OpenAI Studio, you probably
    don’t have a deployment created, so we’ll take care of that now. If you already
    have a deployment, you can skip to *step 4*. On the **Assistants playground (Preview)**
    page, click **Create** **new deployment**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.2 – Creating a new deployment](img/B22207_11_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.2 – Creating a new deployment
  prefs: []
  type: TYPE_NORMAL
- en: 'On the **Deploy model** page, select a supported model (such as **gpt-35-turbo**)
    and enter a deployment name. Click **Create**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.3 – Configuring the model deployment](img/B22207_11_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.3 – Configuring the model deployment
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the model has been deployed, you can configure the parameters of the assistant
    in the **Assistant setup** pane, shown in *Figure 11**.4*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.4 – Configuring the assistant’s parameters](img/B22207_11_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.4 – Configuring the assistant’s parameters
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you’ve configured the parameters, click **Save** and then ask the assistant
    a question that fits the parameters you specified in the instructions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.5 – Asking the assistant an in-scope question](img/B22207_11_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.5 – Asking the assistant an in-scope question
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, try asking the assistant a question that falls outside of its boundaries:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.6 – Asking the assistant an out-of-scope question](img/B22207_11_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.6 – Asking the assistant an out-of-scope question
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, assistants can be useful when tasked with solving specific problems.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs: []
  type: TYPE_NORMAL
- en: The playground is essentially a demo environment that features a sample product—the
    assistant in the playground isn’t intended to be released to end users. To do
    that, you would need to develop an assistant in Azure OpenAI Service. For more
    information on developing and deploying assistants, see [https://learn.microsoft.com/en-us/azure/ai-services/openai/how-to/assistant](https://learn.microsoft.com/en-us/azure/ai-services/openai/how-to/assistant).
    Coding and developing assistants aren’t in scope for the *AI-900* exam, so don’t
    worry if you aren’t able to read or write complex Python code.
  prefs: []
  type: TYPE_NORMAL
- en: Chat
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The Chat playground is designed to be an area where you can interact with a
    chatbot. One potential use might be a bot that answers questions from a website
    FAQ or other content database.
  prefs: []
  type: TYPE_NORMAL
- en: 'To work with the Chat playground, use the following process:'
  prefs: []
  type: TYPE_NORMAL
- en: From the Azure AI Studio home page ([https://oai.azure.com/portal](https://oai.azure.com/portal)),
    under **Playground**, select **Chat**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Using the **Prompt** tab in the **Setup** pane, customize the system message
    (a type of **metaprompt** that gives the model background information or instructions
    on how to operate). You can select from one of several built-in sample configurations
    (such as **Marketing writing assistant**, **Shakespeare writing assistant**, or
    **IRS tax chatbot**, as well as others) See *Figure 11**.7*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.7 – Configuring options in the Chat playground](img/B22207_11_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.7 – Configuring options in the Chat playground
  prefs: []
  type: TYPE_NORMAL
- en: 'After you have configured the parameters for the chatbot agent, you can begin
    entering text in the chat window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.8 – Testing the Chat playground](img/B22207_11_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.8 – Testing the Chat playground
  prefs: []
  type: TYPE_NORMAL
- en: 'Unlike the Assistants playground, the Chat playground allows you to import
    and export the setup, as well as deploy configurations directly to a web service,
    shown in *Figure 11**.9*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.9 – Deploying a chat playground to a web service](img/B22207_11_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.9 – Deploying a chat playground to a web service
  prefs: []
  type: TYPE_NORMAL
- en: Completions
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The Completions playground is probably most like the capabilities you might
    see in a commercial product such as ChatGPT. You can get an idea of some of the
    capabilities of Completions by selecting **Completions** from the **Playground**
    list in Azure OpenAI Studio ([https://oai.azure.com/portals](https://oai.azure.com/portals)).
  prefs: []
  type: TYPE_NORMAL
- en: 'No further configuration is necessary. You can select example prompts from
    the **Examples** dropdown, as shown in *Figusre 11.10*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.10 – Working with the Completions playground](img/B22207_11_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.10 – Working with the Completions playground
  prefs: []
  type: TYPE_NORMAL
- en: 'By clicking the **View code** option, you get a pre-built template for deploying
    your Completions prompt and settings into an application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.11 – Viewing the Completions deployment code](img/B22207_11_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.11 – Viewing the Completions deployment code
  prefs: []
  type: TYPE_NORMAL
- en: Code samples are available for Python, C#, JSON, and curl.
  prefs: []
  type: TYPE_NORMAL
- en: DALL-E
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The DALL-E playground (only available in East US 2, Australia East, and Sweden
    Central Azure regions), is designed to help you design and test AI assistants
    customized to your needs.
  prefs: []
  type: TYPE_NORMAL
- en: 'The DALL-E playground also requires no configuration, though there are parameters
    that can be exposed through the **DALL-E** **settings** option:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.12 – Generating an image through the DALL-E playground](img/B22207_11_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.12 – Generating an image through the DALL-E playground
  prefs: []
  type: TYPE_NORMAL
- en: As with the **Completions** playground, integration code is available through
    the **View code** option on the Playground page.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we’ll look at the Management features of Azure OpenAI Studio.
  prefs: []
  type: TYPE_NORMAL
- en: Management
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Under the **Management** section, there are five nodes:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Deployments**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Models**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Data files**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Quotas**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Content filters**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We’ll briefly look at features in each of those areas.
  prefs: []
  type: TYPE_NORMAL
- en: Deployments
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'A **deployment** refers to a particular model in combination with configuration
    settings. On the **Deployments** page, you can create, edit, and delete deployments:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.13 – Deployments page](img/B22207_11_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.13 – Deployments page
  prefs: []
  type: TYPE_NORMAL
- en: Deployments enable the external consumption of the AI service or model.
  prefs: []
  type: TYPE_NORMAL
- en: Models
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In the context of Azure OpenAI services, a **model** refers to a pre-trained
    AI algorithm, such as GPT-3, Codex, or DALL-E, which is designed to perform specific
    tasks such as NLP, text generation, code generation, or image creation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.14 – Models page](img/B22207_11_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.14 – Models page
  prefs: []
  type: TYPE_NORMAL
- en: On the **Models** page, you can deploy one of the existing models or create
    a new custom deployment for fine-tuning, based on an existing model.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find a list of models available here: [https://learn.microsoft.com/en-us/azure/ai-services/openai/concepts/models](https://learn.microsoft.com/en-us/azure/ai-services/openai/concepts/models)'
  prefs: []
  type: TYPE_NORMAL
- en: Data files
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: On the **Data files** page, you can upload datasets used for training, validating,
    or otherwise customizing models.
  prefs: []
  type: TYPE_NORMAL
- en: Quotas
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The **Quotas** page is used to view quotas for models as well as request an
    increase in quota. See *Figure 11**.15*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.15 – Quotas page](img/B22207_11_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.15 – Quotas page
  prefs: []
  type: TYPE_NORMAL
- en: 'Along with quota management, you should work to ensure you’re making the best
    use of your Azure spend. AI services can add up quickly, so it’s important to
    leverage the right type of model for the job. You can learn more about the Azure
    AI pricing model here: [https://azure.microsoft.com/en-us/pricing/details/cognitive-services/#pricing](https://azure.microsoft.com/en-us/pricing/details/cognitive-services/#pricing).'
  prefs: []
  type: TYPE_NORMAL
- en: Content filters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Content filtering provides the capability to detect and act upon potentially
    sensitive or harmful content in AI-based applications:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.16 – Configuring content filters](img/B22207_11_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.16 – Configuring content filters
  prefs: []
  type: TYPE_NORMAL
- en: Configurations for the **Hate**, **Sexual**, **Self-harm**, and **Violence**
    filter categories are available for both prompts and completions.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we’ll specifically dive into the NLG capabilities of Azure OpenAI Service.
  prefs: []
  type: TYPE_NORMAL
- en: Describe natural language generation capabilities of Azure OpenAI Service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: OpenAI’s NLP models employ sophisticated algorithms to understand and generate
    human-like text. As you learned in [*Chapter 10*](B22207_10.xhtml#_idTextAnchor187),
    *Identify Features of Generative AI Solutions*, these models are trained on vast
    datasets consisting of words or sequences of characters, referred to as tokens.
  prefs: []
  type: TYPE_NORMAL
- en: For instance, a complex word such as *juggernaut* might be segmented into smaller
    tokens such as *jug*, *ger*, and *naut* for more granular analysis, whereas a
    simpler and more common word such as *train* may be treated as a single token.
    Each token is then converted into a numerical vector, a process that transforms
    the textual information into a format that the ML model can efficiently process
    and learn from.
  prefs: []
  type: TYPE_NORMAL
- en: This vectorization of tokens allows the model to discern patterns, relationships,
    and contexts within the language, facilitating a deep understanding of linguistic
    structures. When interacting with user input, the model similarly decomposes the
    text into tokens, applying its learned patterns to interpret the input or generate
    responses. This tokenization process is a critical step in enabling the model
    to handle a wide array of NL tasks, from text completion and translation to content
    generation and sentiment analysis, making it a cornerstone of OpenAI’s approach
    to NLU and NLG.
  prefs: []
  type: TYPE_NORMAL
- en: If you’ve tried using OpenAI’s ChatGPT ([https://chat.openai.com](https://chat.openai.com)),
    you’ve interacted with a generative pre-trained model. Requests and other instructions
    or source content supplied to the model are referred to as **prompts**. You can
    use a prompt to just simply ask questions or you can be more complex, providing
    examples or other guidelines for formatting output.
  prefs: []
  type: TYPE_NORMAL
- en: 'GPT models are pretty easy to work with and can respond to NL requests. You
    can refer to *Table 11.1* for some common tasks and potential GPT prompts:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Task** | **Potential prompts** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Summarize text | Summarize the following content into a single paragraph
    |'
  prefs: []
  type: TYPE_TB
- en: '| Suggest content | Give me a list of fun names for a new ice cream stand |'
  prefs: []
  type: TYPE_TB
- en: '| Translation | Translate “Where can I get a taco” into German |'
  prefs: []
  type: TYPE_TB
- en: '| Answer a question | What are the ingredients in a margarita? |'
  prefs: []
  type: TYPE_TB
- en: '| Text classification | What is this book’s genre based on this text sample?
    |'
  prefs: []
  type: TYPE_TB
- en: '| Concept explanation | Explain string theory in language a 12-year-old would
    understand |'
  prefs: []
  type: TYPE_TB
- en: Table 11.1 – Tasks and prompts
  prefs: []
  type: TYPE_NORMAL
- en: 'Interacting through a prompt may look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.17 – Interacting with a GenAI such as ChatGPT](img/B22207_11_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.17 – Interacting with a GenAI such as ChatGPT
  prefs: []
  type: TYPE_NORMAL
- en: 'It’s important to note, though, that GenAI is not authoritative, so always
    check to make sure your responses line up with what you’re expecting or can be
    verified by other sources. (And, if you’re interested in making birria tacos,
    you can explore this particular chat: [https://chat.openai.com/share/1086e9bc-0dd0-4e73-a42f-af616e6ed687](https://chat.openai.com/share/1086e9bc-0dd0-4e73-a42f-af616e6ed687)).'
  prefs: []
  type: TYPE_NORMAL
- en: Depending on your use case, you may find value in prompt frameworks or patterns
    that provide the model with appropriate background information and output constraints.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs: []
  type: TYPE_NORMAL
- en: For some prompt framework examples, see [https://www.undocumented-features.com/2023/12/15/chatgpt-patterns-practices-and-prompts/](https://www.undocumented-features.com/2023/12/15/chatgpt-patterns-practices-and-prompts/).
  prefs: []
  type: TYPE_NORMAL
- en: Describe code generation capabilities of Azure OpenAI Service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: GPT models possess the capability to interpret NL or code excerpts and convert
    them into executable code. OpenAI’s GPT models exhibit proficiency across a wide
    array of languages, including C#, JavaScript, Perl, PHP, PowerShell, Ruby, Swift,
    TypeScript, SQL, and Go—though Python is its strongest suit.
  prefs: []
  type: TYPE_NORMAL
- en: These models undergo training on both NL and vast repositories containing billions
    of lines of code. They excel in generating code based on NL instructions, including
    code comments, and can provide suggestions for completing code functions.
  prefs: []
  type: TYPE_NORMAL
- en: Codex, a descendent of GPT-3, has been trained on a variety of code samples
    and repositories in different languages and can answer code completion or review
    tasks.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this example, a GPT has been asked to generate a code example that adds
    up all of the numbers between 1 and 100:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.18 – Instructing GPT to generate a code example](img/B22207_11_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.18 – Instructing GPT to generate a code example
  prefs: []
  type: TYPE_NORMAL
- en: 'As with any GenAI task, you should check its work:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.19 – Validating generated code](img/B22207_11_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.19 – Validating generated code
  prefs: []
  type: TYPE_NORMAL
- en: While this example works out OK, you still may want to experiment or test a
    bit to make sure that the output is indeed what you expect. In this simple example,
    you may choose to put a simple `Write-Host $sum` statement inside a `for` loop,
    allowing you to visually inspect the output.
  prefs: []
  type: TYPE_NORMAL
- en: 'It’s equally important to note that there are other times when it doesn’t,
    such as this example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.20 – Not a correct answer, GPT](img/B22207_11_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.20 – Not a correct answer, GPT
  prefs: []
  type: TYPE_NORMAL
- en: 'When expanding the code for the operation, it may not be immediately discernible
    unless you have experience in the particular domain you’re working in:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: While `Set-SPOUser` is the correct cmdlet to use, managing the sharing capability
    is not the correct option.
  prefs: []
  type: TYPE_NORMAL
- en: 'When pressed further, GPT responds with additional detail:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.21 – Asking GPT to explain itself](img/B22207_11_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.21 – Asking GPT to explain itself
  prefs: []
  type: TYPE_NORMAL
- en: Based on the specific feedback prompt of `What about the LockState parameter`,
    GPT responds with an updated script using a more appropriate command. This underscores
    the importance of understanding the limits of GenAI and ensuring that work is
    validated so that you can act accordingly and choose the most appropriate course
    of action.
  prefs: []
  type: TYPE_NORMAL
- en: 'The OpenAI models are also capable of interpreting code. You can ask a GPT
    for the purpose of a code snippet, statement, or function, as shown in *Figure
    11**.22*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.22 – Asking GPT for a code evaluation](img/B22207_11_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.22 – Asking GPT for a code evaluation
  prefs: []
  type: TYPE_NORMAL
- en: OpenAI also partnered with GitHub to build a copilot that can be integrated
    into Visual Studio to help with code completions and suggestions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Adding GitHub Copilot is as simple as adding any other extension to Visual
    Studio Code. Once enabled, GitHub CoPilot will start suggesting code automatically
    based on the selected language and context of the text that you have entered already:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.23 – GitHub Copilot suggesting code](img/B22207_11_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.23 – GitHub Copilot suggesting code
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: GitHub Copilot requires a subscription.
  prefs: []
  type: TYPE_NORMAL
- en: You can also try prompts such as `improve my code`, `explain this code`, or
    `translate this code from C#` `to java`.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we’ll look at some image generation capabilities of the platform.
  prefs: []
  type: TYPE_NORMAL
- en: Describe image generation capabilities of Azure OpenAI Service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the Azure OpenAI Service realm, image generation capabilities can take several
    forms, such as prompts to create a new image or a customization of a base image.
  prefs: []
  type: TYPE_NORMAL
- en: 'DALL-E is the model family that generates images based on text prompts. The
    more detailed the prompt, the better the results. You can even request images
    in specific styles, such as *a dog in the style of Salvador Dali*, *a pastoral
    scene that includes pizza in the style of Claude Monet*, or *a steampunk* *farm
    tractor*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.24 – Viewing DALL-E generated images in the playground](img/B22207_11_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.24 – Viewing DALL-E generated images in the playground
  prefs: []
  type: TYPE_NORMAL
- en: Depending on the application code surrounding the model deployment, you can
    also submit edits such as *add a person sitting in the tractor seat* or *update
    the dog so that it’s wearing a hat*. The current models don’t allow for editing
    or modifying the produced images; rather, you’re generating new images with the
    updated prompt parameters.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Azure OpenAI Service brings the capability of OpenAI’s models into Azure, allowing
    you to work with your own data to build custom applications. In this chapter,
    we covered some of the similarities and differences between Azure AI and Azure
    OpenAI services.
  prefs: []
  type: TYPE_NORMAL
- en: One of the most exciting features of Azure OpenAI Studio is the ability to explore
    the models through playgrounds—virtual areas where you can try out models and
    prompts.
  prefs: []
  type: TYPE_NORMAL
- en: Azure OpenAI Service is a powerful tool to help organizations expand their automation
    and ML capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: Exam Readiness Drill – Chapter Review Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Apart from a solid understanding of key concepts, being able to think quickly
    under time pressure is a skill that will help you ace your certification exam.
    That is why working on these skills early on in your learning journey is key.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter review questions are designed to improve your test-taking skills progressively
    with each chapter you learn and review your understanding of key concepts in the
    chapter at the same time. You’ll find these at the end of each chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Before You Proceed
  prefs: []
  type: TYPE_NORMAL
- en: If you don't have a Packt Library subscription or you haven't purchased this
    book from the Packt store, you will need to unlock the online resources to access
    the exam readiness drills. Unlocking is free and needs to be done only once. To
    learn how to do that, head over to the chapter titled [*Chapter 12*](B22207_12.xhtml#_idTextAnchor228)*,
    Accessing the* *Online Resources*.
  prefs: []
  type: TYPE_NORMAL
- en: 'To open the Chapter Review Questions for this chapter, perform the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Click the link – [https://packt.link/AI-900_CH11](https://packt.link/AI-900_CH11).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Alternatively, you can scan the following QR code (*Figure 11**.25*):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 11.25 – QR code that opens Chapter Review Questions for logged-in
    users](img/B22207_11_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.25 – QR code that opens Chapter Review Questions for logged-in users
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you log in, you’ll see a page similar to the one shown in *Figure 11**.26*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.26 – Chapter Review Questions for Chapter 11](img/B22207_11_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.26 – Chapter Review Questions for Chapter 11
  prefs: []
  type: TYPE_NORMAL
- en: Once ready, start the following practice drills, re-attempting the quiz multiple
    times.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Exam Readiness Drill
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For the first three attempts, don’t worry about the time limit.
  prefs: []
  type: TYPE_NORMAL
- en: ATTEMPT 1
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The first time, aim for at least **40%**. Look at the answers you got wrong
    and read the relevant sections in the chapter again to fix your learning gaps.
  prefs: []
  type: TYPE_NORMAL
- en: ATTEMPT 2
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The second time, aim for at least **60%**. Look at the answers you got wrong
    and read the relevant sections in the chapter again to fix any remaining learning
    gaps.
  prefs: []
  type: TYPE_NORMAL
- en: ATTEMPT 3
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The third time, aim for at least **75%**. Once you score 75% or more, you start
    working on your timing.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: You may take more than **three** attempts to reach 75%. That’s okay. Just review
    the relevant sections in the chapter till you get there.
  prefs: []
  type: TYPE_NORMAL
- en: Working On Timing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Your aim is to keep the score the same while trying to answer these questions
    as quickly as possible. Here’s an example of how your next attempts should look
    like:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Attempt** | **Score** | **Time Taken** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Attempt 5 | 77% | 21 mins 30 seconds |'
  prefs: []
  type: TYPE_TB
- en: '| Attempt 6 | 78% | 18 mins 34 seconds |'
  prefs: []
  type: TYPE_TB
- en: '| Attempt 7 | 76% | 14 mins 44 seconds |'
  prefs: []
  type: TYPE_TB
- en: Table 11.2 – Sample timing practice drills on the online platform
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The time limits shown in the above table are just examples. Set your own time
    limits with each attempt based on the time limit of the quiz on the website.
  prefs: []
  type: TYPE_NORMAL
- en: With each new attempt, your score should stay above **75%** while your “time
    taken” to complete should “decrease”. Repeat as many attempts as you want till
    you feel confident dealing with the time pressure.
  prefs: []
  type: TYPE_NORMAL
