- en: Chapter 1. Getting Started with OpenCV
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第一章：OpenCV入门
- en: Computer Vision applications are interesting and useful, but the underlying
    algorithms are computationally intensive. With the advent of cloud computing,
    we are getting more processing power to work with. The OpenCV library enables
    you to run Computer Vision algorithms efficiently in real time. It has been around
    for many years and it has become the standard library in this field. One of the
    main advantages of OpenCV is that it is highly optimized and available on almost
    all platforms. The discussions in this book will cover everything, including the
    algorithm we are using, why we are using it, and how to implement it in OpenCV.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机视觉应用既有趣又实用，但其底层算法计算量很大。随着云计算的出现，我们获得了更多的处理能力。OpenCV库使你能够高效地在实时中运行计算机视觉算法。它已经存在很多年了，并且已经成为该领域的标准库。OpenCV的一个主要优点是它高度优化，几乎在所有平台上都可用。本书中的讨论将涵盖一切，包括我们使用的算法、为什么使用它以及如何在OpenCV中实现它。
- en: In this chapter, we are going to learn how to install OpenCV on various operating
    systems. We will discuss what OpenCV offers out of the box and the various things
    that we can do using the in-built functions.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何在各种操作系统上安装OpenCV。我们将讨论OpenCV提供的功能以及我们可以使用内置函数做的各种事情。
- en: 'By the end of this chapter, you will be able to answer the following questions:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将能够回答以下问题：
- en: How do humans process visual data and how do they understand image content?
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 人类如何处理视觉数据，以及他们如何理解图像内容？
- en: What can we do with OpenCV and what are the various modules available in OpenCV
    that can be used to achieve those things?
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以用OpenCV做什么？OpenCV中有哪些模块可以用来实现这些功能？
- en: How to install OpenCV on Windows, Linux, and Mac OS X?
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在Windows、Linux和Mac OS X上安装OpenCV？
- en: Understanding the human visual system
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解人类视觉系统
- en: Before we jump into OpenCV functionalities, we need to understand why those
    functions were built in the first place. It's important to understand how the
    human visual system works so that you can develop the right algorithms. The goal
    of the Computer Vision algorithms is to understand the content of images and videos.
    Humans seem to do it effortlessly! So, how do we get machines to do it with the
    same accuracy?
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入OpenCV的功能之前，我们需要了解这些功能最初为何被构建。理解人类视觉系统的工作原理非常重要，这样你才能开发出正确的算法。计算机视觉算法的目标是理解图像和视频的内容。人类似乎能毫不费力地做到这一点！那么，我们如何让机器以同样的精度做到这一点呢？
- en: 'Let''s consider the following figure:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑以下图示：
- en: '![Understanding the human visual system](img/B04283_01_01.jpg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![理解人类视觉系统](img/B04283_01_01.jpg)'
- en: 'The human eye captures all the information that comes along such as color,
    shapes, brightness, and so on. In the preceding image, the human eye captures
    all the information about the two main objects and stores it in a certain way.
    Once we understand how our system works, we can take advantage of this to achieve
    what we want. For example, here are a few things we need to know:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 人眼捕捉所有伴随而来的信息，如颜色、形状、亮度等。在前面的图像中，人眼捕捉了两个主要对象的所有信息，并以某种方式存储。一旦我们理解了我们的系统是如何工作的，我们就可以利用这一点来实现我们想要的东西。例如，以下是一些我们需要了解的事情：
- en: Our visual system is more sensitive to low frequency content than high frequency
    content. Low frequency content refers to planar regions where pixel values don't
    change rapidly and high frequency content refers to regions with corners and edges,
    where pixel values fluctuate a lot. You will have noticed that we can easily see
    if there are blotches on a planar surface, but it's difficult to spot something
    like that on a highly textured surface.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们的视觉系统对低频内容比对高频内容更敏感。低频内容指的是像素值变化不快的平面区域，而高频内容指的是有角和边的区域，像素值波动很大。你可能会注意到，我们很容易在平面表面上看到污点，但在高度纹理的表面上很难找到类似的东西。
- en: The human eye is more sensitive to changes in brightness as compared to changes
    in color.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与颜色变化相比，人眼对亮度变化更敏感。
- en: Our visual system is sensitive to motion. We can quickly recognize if something
    is moving in our field of vision even though we are not directly looking at it.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们的视觉系统对运动敏感。即使我们没有直接看它，我们也能迅速识别在我们视野中移动的东西。
- en: We tend to make a mental note of salient points in our field of vision. Let's
    consider a white table with four black legs and a red dot at one of the corners
    of the table surface. When you look at this table, you'll immediately make a mental
    note that the surface and legs have opposing colors and there is a red dot on
    one of the corners. Our brain is really smart that way! We do this automatically
    so that we can immediately recognize it if we encounter it again.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们倾向于在我们的视野中记住显著点。让我们考虑一个白色桌子，它有四条黑色腿，桌面的一个角落有一个红色圆点。当你看这个桌子时，你会立即在脑海中记下表面和腿的颜色相反，并且在桌面的一个角落有一个红色圆点。我们的头脑真的很聪明！我们这样做是自动的，这样我们就可以立即识别它，如果我们再次遇到它。
- en: 'To get an idea of our field of view, let''s take a look at the top view of
    a human and the angles at which we see various things:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 为了了解我们的视野，让我们看看人类的俯视图以及我们看到各种事物的角度：
- en: '![Understanding the human visual system](img/B04283_01_02.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![理解人类视觉系统](img/B04283_01_02.jpg)'
- en: Our visual system is actually capable of a lot more things, but this should
    be good enough to get us started. You can explore further by reading up on Human
    Visual System Models on the internet.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的大脑视觉系统实际上能够做到很多事情，但这已经足够我们开始了。你可以通过在网上阅读有关人类视觉系统模型的内容来进一步探索。
- en: How do humans understand image content?
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 人类是如何理解图像内容的？
- en: If you look around, you will see a lot of objects. You may encounter many different
    objects every day, and you recognize them almost instantaneously without any effort.
    When you see a chair, you don't wait for a few minutes before realizing that it
    is, in fact, a chair. You just know that it's a chair right away! Now, on the
    other hand, computers find it very difficult to do this task. Researchers have
    been working for many years to find out why computers are not as good as we are
    at this.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你环顾四周，你会看到很多物体。你可能每天都会遇到许多不同的物体，而你几乎可以瞬间识别它们，而不需要任何努力。当你看到一把椅子时，你不需要等待几分钟才意识到它实际上是一把椅子。你立刻就知道它是一把椅子！现在，另一方面，计算机发现这项任务非常困难。研究人员已经多年致力于找出为什么计算机在这方面的表现不如我们。
- en: To get an answer to this question, we need to understand how humans do it. The
    visual data processing happens in the ventral visual stream. This ventral visual
    stream refers to the pathway in our visual system that is associated with object
    recognition. It is basically a hierarchy of areas in our brain that helps us recognize
    objects. Humans can recognize different objects effortlessly, and we can cluster
    similar objects together. We can do this because we have developed some sort of
    invariance toward objects of the same class. When we look at an object, our brain
    extracts the salient points in such a way that factors such as orientation, size,
    perspective, and illumination don't matter.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 要回答这个问题，我们需要了解人类是如何做到的。视觉数据处理发生在腹侧视觉通路中。这个腹侧视觉通路指的是我们视觉系统中与物体识别相关联的通路。它基本上是我们大脑中帮助识别物体的区域层次。人类可以毫不费力地识别不同的物体，并且我们可以将相似物体聚在一起。我们可以这样做，因为我们已经发展出对同一类物体的一些不变性。当我们看一个物体时，我们的大脑以这种方式提取显著点，使得方向、大小、透视和照明等因素都不重要。
- en: A chair that is double the normal size and rotated by 45 degrees is still a
    chair. We can easily recognize it because of the way we process it. Machines cannot
    do this so easily. Humans tend to remember an object based on its shape and important
    features. Regardless of how the object is placed, we can still recognize it. In
    our visual system, we build these hierarchical invariances with respect to position,
    scale, and viewpoint that help us to be very robust.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 一个尺寸是正常尺寸两倍且旋转了45度的椅子仍然是一把椅子。我们之所以能轻易地识别它，是因为我们处理它的方式。机器不能这么容易地做到这一点。人类倾向于根据物体的形状和重要特征来记住物体。无论物体如何放置，我们仍然可以识别它。在我们的视觉系统中，我们根据位置、比例和视点构建了这些层次不变性，这有助于我们非常稳健。
- en: If you look deeper in our system, you will see that humans have cells in their
    visual cortex that can respond to shapes, such as curves and lines. As we move
    further along our ventral stream, we will see more complex cells that are trained
    to respond to more complex objects, such as trees, gates, and so on. The neurons
    along our ventral stream tend to show an increase in the size of the receptive
    field. This is coupled with the fact that the complexity of their preferred stimuli
    increases as well.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你深入我们的系统，你会看到人类在他们的视觉皮层中有细胞可以响应形状，比如曲线和线条。当我们沿着腹侧流进一步前进时，我们会看到更多复杂的细胞，这些细胞被训练来响应更复杂的目标，比如树木、大门等等。腹侧流中的神经元倾向于显示出感受野大小的增加。这与它们首选刺激的复杂性增加的事实相辅相成。
- en: Why is it difficult for machines to understand image content?
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么机器难以理解图像内容？
- en: We now understand how visual data enters the human visual system and how our
    system processes it. The issue is that we still don't completely understand how
    our brain recognizes and organizes this visual data. We just extract some features
    from images and ask the computer to learn from them using machine learning algorithms.
    We still have those variations such as shape, size, perspective, angle, illumination,
    occlusion, and so on. For example, the same chair looks very different to a machine
    when you look at it from the side view. Humans can easily recognize that it's
    a chair regardless of how it's presented to us. So, how do we explain this to
    our machines?
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在了解了视觉数据如何进入人类视觉系统以及我们的系统如何处理它。问题是，我们仍然不完全理解我们的大脑是如何识别和组织这些视觉数据的。我们只是从图像中提取一些特征，并要求计算机使用机器学习算法从这些特征中学习。我们仍然有那些变化，比如形状、大小、视角、角度、光照、遮挡等等。例如，当你从侧面看时，同一把椅子对机器来说看起来非常不同。人类可以很容易地识别出它是一把椅子，无论它以何种方式呈现给我们。那么，我们如何向我们的机器解释这一点呢？
- en: One way to do this would be to store all the different variations of an object,
    including *sizes*, *angles*, *perspectives*, and so on. But this process is cumbersome
    and time-consuming! Also, it's actually not possible to gather data that can encompass
    every single variation. The machines will consume a huge amount of memory and
    a lot of time to build a model that can recognize these objects. Even with all
    this, if an object is partially occluded, computers still won't be able to recognize
    it. This is because they think that this is a new object. So, when we build a
    Computer Vision library, we need to build the underlying functional blocks that
    can be combined in many different ways to formulate complex algorithms. OpenCV
    provides a lot of these functions and they are highly optimized. So, once we understand
    what OpenCV provides out of the box, we can use it effectively to build interesting
    applications. Let's go ahead and explore this in the next section.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 做这件事的一种方法是将一个物体的所有不同变体都存储起来，包括*尺寸*、*角度*、*视角*等等。但这个过程既繁琐又耗时！实际上，也不可能收集到涵盖每一个变体的数据。机器将消耗大量的内存和很多时间来构建一个能够识别这些物体的模型。即使有所有这些，如果一个物体部分被遮挡，计算机仍然无法识别它。这是因为它们认为这是一个新物体。所以，当我们构建计算机视觉库时，我们需要构建可以以多种不同方式组合的底层功能模块，以形成复杂的算法。OpenCV提供了很多这样的函数，并且它们高度优化。因此，一旦我们了解了OpenCV提供的现成功能，我们就可以有效地使用它来构建有趣的应用程序。让我们继续在下一节中探索这个问题。
- en: What can you do with OpenCV?
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你可以用OpenCV做什么？
- en: Using OpenCV, you can pretty much do every Computer Vision task that you can
    think of. Real-life problems require you to use many blocks together to achieve
    the desired result. So, you just need to understand what modules and functions
    to use to get what you want. Let's understand what OpenCV can do out of the box.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 使用OpenCV，你可以几乎完成你所能想到的每一个计算机视觉任务。现实生活中的问题需要你使用许多模块一起工作以达到预期的结果。所以，你只需要了解使用哪些模块和函数来得到你想要的结果。让我们了解OpenCV可以提供哪些现成的功能。
- en: In-built data structures and input/output
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 内置数据结构和输入/输出
- en: One of the best things about OpenCV is that it provides a lot of in-built primitives
    to handle operations related to image processing and Computer Vision. If you have
    to write something from scratch, you will have to define things, such as an *image*,
    *point*, *rectangle*, and so on. These are fundamental to almost any Computer
    Vision algorithm. OpenCV comes with all these basic structures out of the box,
    and they are contained in the `core` module. Another advantage is that these structures
    have already been optimized for speed and memory, so you don't have to worry about
    the implementation details.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: OpenCV的最好之处之一是它提供了许多内置原语来处理与图像处理和计算机视觉相关的操作。如果你必须从头开始编写，你将需要定义一些东西，例如*图像*、*点*、*矩形*等。这些是几乎所有计算机视觉算法的基础。OpenCV自带所有这些基本结构，它们包含在`core`模块中。另一个优点是这些结构已经针对速度和内存进行了优化，因此你不必担心实现细节。
- en: The `imgcodecs` module handles reading and writing image files. When you operate
    on an input image and create an output image, you can save it as a `jpg` or a
    `png` file with a simple command. You will be dealing with a lot of video files
    when you are working with cameras. The `videoio` module handles everything related
    to the input/output of video files. You can easily capture a video from a webcam
    or read a video file in many different formats. You can even save a bunch of frames
    as a video file by setting properties such as frames per second, frame size, and
    so on.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`imgcodecs`模块处理图像文件的读取和写入。当你对一个输入图像进行操作并创建一个输出图像时，你可以使用简单的命令将其保存为`jpg`或`png`文件。当你使用摄像头工作时，你将处理大量的视频文件。`videoio`模块处理与视频文件输入/输出相关的所有操作。你可以轻松地从网络摄像头捕获视频或以许多不同的格式读取视频文件。你甚至可以通过设置每秒帧数、帧大小等属性将一系列帧保存为视频文件。'
- en: Image processing operations
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 图像处理操作
- en: 'When you write a Computer Vision algorithm, there are a lot of basic image
    processing operations that you will use over and over again. Most of these functions
    are present in the `imgproc` module. You can do things such as image filtering,
    morphological operations, geometric transformations, color conversions, drawing
    on images, histograms, shape analysis, motion analysis, feature detection, and
    so on. Let''s consider the following figure:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 当你编写计算机视觉算法时，你会反复使用许多基本的图像处理操作。这些函数中的大多数都存在于`imgproc`模块中。你可以进行诸如图像滤波、形态学操作、几何变换、颜色转换、在图像上绘制、直方图、形状分析、运动分析、特征检测等操作。让我们考虑以下图示：
- en: '![Image processing operations](img/B04283_01_03.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![图像处理操作](img/B04283_01_03.jpg)'
- en: The right-hand side image is a rotated version of the left-hand side image.
    We can do this transformation with a single line in OpenCV. There is another module
    called `ximgproc` that contains advanced image processing algorithms such as structured
    forests for edge detection, domain transform filters, adaptive manifold filters,
    and so on.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 右侧图像是左侧图像的旋转版本。我们可以在OpenCV中使用一行代码来完成这种转换。还有一个名为`ximgproc`的模块，其中包含边缘检测、域变换滤波器、自适应流形滤波器等高级图像处理算法。
- en: Building GUI
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建GUI
- en: OpenCV provides a module called `highgui` that handles all the high-level user
    interface operations. Let's say that you are working on a problem and you want
    to check what the image looks like before you proceed to the next step. This module
    has functions that can be used to create windows to display images and/or video.
    There is also a waiting function that will wait until you hit a key on your keyboard
    before it goes to the next step. There is a function that can detect mouse events
    as well. This is very useful to develop interactive applications. Using this functionality,
    you can draw rectangles on these input windows and then proceed based on the selected
    region.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: OpenCV提供了一个名为`highgui`的模块，用于处理所有高级用户界面操作。假设你正在处理一个问题，并且想在继续下一步之前查看图像的外观。此模块包含用于创建显示图像和/或视频窗口的函数。还有一个等待函数，它将在你按下键盘上的键之前等待，然后才进入下一步。还有一个可以检测鼠标事件的函数。这对于开发交互式应用程序非常有用。使用此功能，你可以在这些输入窗口上绘制矩形，然后根据所选区域继续操作。
- en: 'Consider the following image:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下图像：
- en: '![Building GUI](img/B04283_01_04.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![构建GUI](img/B04283_01_04.jpg)'
- en: As you can see, we have drawn a green rectangle on the image and applied a *negative
    film* effect to that region. Once we have the coordinates of this rectangle, we
    can operate only on that region.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们在图像上绘制了一个绿色矩形，并应用了*负片*效果到该区域。一旦我们得到了这个矩形的坐标，我们就可以只在该区域进行操作。
- en: Video analysis
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 视频分析
- en: Video analysis includes tasks such as analyzing the motion between successive
    frames in a video, tracking different objects in a video, creating models for
    video surveillance, and so on. OpenCV provides a module called `video` that can
    handle all of this. There is a module called `videostab` that deals with video
    stabilization. Video stabilization is an important part of video cameras. When
    you capture videos by holding the camera in your hands, it's hard to keep your
    hands perfectly steady. If you look at that video as it is, it will look bad and
    jittery. All modern devices use video stabilization techniques to process the
    videos before they are presented to the end user.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 视频分析包括分析视频中连续帧之间的运动、跟踪视频中的不同物体、创建视频监控模型等任务。OpenCV提供了一个名为`video`的模块，可以处理所有这些任务。还有一个名为`videostab`的模块，用于处理视频稳定化。视频稳定化是视频相机的一个重要部分。当你用手持相机拍摄视频时，很难保持双手完全稳定。如果你直接观看这段视频，它看起来会很糟糕，会有抖动。所有现代设备都会使用视频稳定化技术来处理视频，在它们呈现给最终用户之前。
- en: 3D reconstruction
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3D重建
- en: '3D reconstruction is an important topic in Computer Vision. Given a set of
    2D images, we can reconstruct the 3D scene using the relevant algorithms. OpenCV
    provides algorithms that can find the relationship between various objects in
    these 2D images to compute their 3D positions. We have a module called `calib3d`
    that can handle all this. This module can also handle camera calibration, which
    is essential to estimate the parameters of the camera. These parameters are basically
    the internal parameters of any given camera that uses them to transform the captured
    scene into an image. We need to know these parameters to design algorithms, or
    else we might get unexpected results. Let''s consider the following figure:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 3D重建是计算机视觉中的一个重要主题。给定一组二维图像，我们可以使用相关算法重建三维场景。OpenCV提供了可以找到这些二维图像中各种物体之间关系的算法，以计算它们的3D位置。我们有一个名为`calib3d`的模块可以处理所有这些。此模块还可以处理相机标定，这对于估计相机的参数至关重要。这些参数基本上是任何给定相机使用它们的内部参数，它们将这些捕获的场景转换为图像。我们需要知道这些参数来设计算法，否则我们可能会得到意外的结果。让我们考虑以下图示：
- en: '![3D reconstruction](img/B04283_01_05.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![3D重建](img/B04283_01_05.jpg)'
- en: As shown in the preceding image, the same object is captured from multiple poses.
    Our job is to reconstruct the original object using these 2D images.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如前图所示，同一个物体从多个姿态被捕获。我们的任务是使用这些二维图像重建原始物体。
- en: Feature extraction
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 特征提取
- en: As discussed earlier, the human visual system tends to extract the salient features
    from a given scene so that it can be retrieved later. To mimic this, people started
    designing various feature extractors that can extract these salient points from
    a given image. Some of the popular algorithms include **SIFT** (**Scale Invariant
    Feature Transform**), **SURF** (**Speeded Up Robust Features**), **FAST** (**Features
    from Accelerated Segment Test**), and so on. There is a module called `features2d`
    that provides functions to detect and extract all these features. There is another
    module called `xfeatures2d` that provides a few more feature extractors, some
    of which are still in the experimental phase. You can play around with these if
    you get a chance. There is also a module called `bioinspired` that provides algorithms
    for biologically inspired Computer Vision models.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，人眼视觉系统倾向于从给定的场景中提取显著特征，以便以后可以检索。为了模仿这一点，人们开始设计各种特征提取器，可以从给定的图像中提取这些显著点。一些流行的算法包括**SIFT**（**尺度不变特征变换**）、**SURF**（**加速鲁棒特征**）、**FAST**（**加速段测试特征**）等。有一个名为`features2d`的模块提供了检测和提取所有这些特征的功能。还有一个名为`xfeatures2d`的模块提供了更多特征提取器，其中一些仍处于实验阶段。如果你有机会，可以尝试使用这些。还有一个名为`bioinspired`的模块，提供了生物启发的计算机视觉模型算法。
- en: Object detection
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 物体检测
- en: 'Object detection refers to detecting the location of an object in a given image.
    This process is not concerned with the type of object. If you design a chair detector,
    it will just tell you the location of the chair in a given image. It will not
    tell you whether it''s a red chair with a high back or a blue chair with a low
    back. Detecting the location of objects is a very critical step in many Computer
    Vision systems. Consider the following image:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 物体检测是指检测给定图像中物体的位置。这个过程不关心物体的类型。如果你设计了一个椅子检测器，它只会告诉你给定图像中椅子的位置。它不会告诉你这是一把高背的红椅子还是一把低背的蓝椅子。检测物体的位置是许多计算机视觉系统中一个非常关键的步骤。考虑以下图像：
- en: '![Object detection](img/B04283_01_06.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![对象检测](img/B04283_01_06.jpg)'
- en: If you run a chair detector on this image, it will put a green box around all
    the chairs. It won't tell you what kind of chair it is! Object detection used
    to be a computationally intensive task because of the number of calculations required
    to perform the detection at various scales. To solve this, Paul Viola and Michael
    Jones came up with a great algorithm in their seminal paper in 2001\. You can
    read it at [https://www.cs.cmu.edu/~efros/courses/LBMV07/Papers/viola-cvpr-01.pdf](https://www.cs.cmu.edu/~efros/courses/LBMV07/Papers/viola-cvpr-01.pdf).
    They provided a fast way to design an object detector for any object. OpenCV has
    modules called `objdetect` and `xobjdetect` that provide the framework to design
    an object detector. You can use it to develop detectors for random items such
    as sunglasses, boots, and so on.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在这张图像上运行椅子检测器，它会在所有椅子上放置一个绿色的框。它不会告诉你这是什么类型的椅子！由于需要在各种尺度上进行检测所需的计算量很大，因此对象检测曾经是一个计算密集型任务。为了解决这个问题，保罗·维奥拉和迈克尔·琼斯在2001年发表了开创性的论文，提出了一个伟大的算法。你可以在[https://www.cs.cmu.edu/~efros/courses/LBMV07/Papers/viola-cvpr-01.pdf](https://www.cs.cmu.edu/~efros/courses/LBMV07/Papers/viola-cvpr-01.pdf)上阅读它。他们提供了一种快速设计任何对象检测器的方法。OpenCV有名为`objdetect`和`xobjdetect`的模块，提供了设计对象检测器的框架。你可以用它来开发用于随机物品（如太阳镜、靴子等）的检测器。
- en: Machine learning
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 机器学习
- en: Computer Vision uses various machine learning algorithms to achieve different
    things. OpenCV provides a module called `ml` that has many machine learning algorithms
    bundled into it. Some of the algorithms include Bayes Classifier, K-Nearest Neighbors,
    Support Vector Machines, Decision Trees, Neural Networks, and so on. It also has
    a module called `flann` that contains algorithms for fast-nearest-neighbor searches
    in large datasets. Machine learning algorithms are used extensively to build systems
    for object recognition, image classification, face detection, visual searches,
    and so on.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机视觉使用各种机器学习算法来实现不同的功能。OpenCV提供了一个名为`ml`的模块，其中包含许多打包的机器学习算法。其中一些算法包括贝叶斯分类器、K最近邻、支持向量机、决策树、神经网络等。它还有一个名为`flann`的模块，其中包含用于在大数据集中进行快速最近邻搜索的算法。机器学习算法被广泛用于构建对象识别、图像分类、人脸检测、视觉搜索等系统的系统。
- en: Computational photography
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 计算摄影
- en: Computational photography refers to using advanced image processing techniques
    to improve the images captured by cameras. Instead of focusing on optical processes
    and image capture methods, computational photography uses software to manipulate
    visual data. Some applications include high dynamic range imaging, panoramic images,
    image relighting, light field cameras, and so on.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 计算摄影是指使用高级图像处理技术来改善相机捕捉的图像。计算摄影不是关注光学过程和图像捕捉方法，而是使用软件来操纵视觉数据。一些应用包括高动态范围成像、全景图像、图像重光照、光场相机等。
- en: Tip
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**Downloading the example code**'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you. Instructions for running
    example are available in the `README.md` file present in the root folder of each
    project.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从你购买的所有Packt书籍的账户中下载示例代码文件。[http://www.packtpub.com](http://www.packtpub.com)。如果你在其他地方购买了这本书，你可以访问[http://www.packtpub.com/support](http://www.packtpub.com/support)并注册，以便将文件直接通过电子邮件发送给你。运行示例的说明可在每个项目的根目录中的`README.md`文件中找到。
- en: 'Let''s take a look at the following image:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看以下图像：
- en: '![Computational photography](img/B04283_01_07.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![计算摄影](img/B04283_01_07.jpg)'
- en: Look at those vivid colors! This is an example of a high dynamic range image
    and it wouldn't be possible to get this using conventional image capture techniques.
    To do this, we have to capture the same scene at multiple exposures, register
    those images with each other, and then blend them nicely to create this image.
    The `photo` and `xphoto` modules contain various algorithms that provide algorithms
    pertaining to computational photography. There is a module called `stitching`
    that provides algorithms to create panoramic images.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 看看那些鲜艳的颜色！这是一个高动态范围图像的例子，使用传统的图像捕捉技术是无法得到这样的效果的。为了做到这一点，我们必须在多个曝光下捕捉相同的场景，将这些图像相互注册，然后很好地融合它们以创建这张图像。`photo`和`xphoto`模块包含各种算法，提供与计算摄影相关的算法。有一个名为`stitching`的模块，它提供了创建全景图像的算法。
- en: Note
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意事项
- en: The preceding image can be found at [https://pixabay.com/en/hdr-high-dynamic-range-landscape-806260/](https://pixabay.com/en/hdr-high-dynamic-range-landscape-806260/).
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的图像可以在[https://pixabay.com/en/hdr-high-dynamic-range-landscape-806260/](https://pixabay.com/en/hdr-high-dynamic-range-landscape-806260/)找到。
- en: Shape analysis
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 形状分析
- en: The notion of shape is crucial in Computer Vision. We analyze the visual data
    by recognizing various different shapes in the image. This is actually an important
    step in many algorithms. Let's say you are trying to identify a particular logo
    in an image. Now, you know that it can appear in various shapes, orientations,
    sizes, and so on. One good way to get started is to quantify the characteristics
    of the shape of the object. The module `shape` provides all the algorithms required
    to extract different shapes, measure similarities between them, transform shapes
    of objects, and so on.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在计算机视觉中，形状的概念至关重要。我们通过识别图像中的各种不同形状来分析视觉数据。这实际上是许多算法中的重要步骤。假设你正在尝试识别图像中的一个特定标志。现在，你知道它可以以各种形状、方向、大小等出现。一个很好的开始方法是量化物体的形状特征。`shape`模块提供了提取不同形状、测量它们之间相似性、转换物体形状等所需的所有算法。
- en: Optical flow algorithms
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 光流算法
- en: Optical flow algorithms are used in videos to track features across successive
    frames. Let's say you want to track a particular object in a video. Running a
    feature extractor on each frame would be computationally expensive; hence, the
    process would be slow. So, you just need to extract the features from the current
    frame and then track these features in successive frames. Optical flow algorithms
    are heavily used in video-based applications in Computer Vision. The `optflow`
    module contains a number of algorithms required to perform optical flow. There
    is also a module called `tracking` that contains more algorithms that can be used
    to track features.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 光流算法在视频中用于跟踪连续帧之间的特征。假设你想要在视频中跟踪一个特定的物体。对每一帧运行特征提取器将会计算量很大；因此，这个过程会很慢。所以，你只需要从当前帧中提取特征，然后在后续帧中跟踪这些特征。光流算法在计算机视觉的视频应用中被大量使用。`optflow`模块包含执行光流所需的多个算法。还有一个名为`tracking`的模块，其中包含更多可用于跟踪特征的算法。
- en: Face and object recognition
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 人脸和物体识别
- en: Face recognition refers to identifying the person in a given image. This is
    not the same as face detection where you identify the location of a face in the
    given image. So, if you want to build a practical biometric system that can recognize
    the person in front of the camera, you first need to run the face detector that
    can identify the location of the face, and then, run a face recognizer that can
    recognize who that person is. There is a module called `face` that deals with
    face recognition.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 人脸识别是指识别给定图像中的人。这与在给定图像中识别人脸位置的脸部检测不同。所以，如果你想构建一个实用的生物识别系统，能够识别摄像头前的人，你首先需要运行能够识别人脸位置的人脸检测器，然后运行一个能够识别那个人是谁的人脸识别器。有一个名为`face`的模块专门处理人脸识别。
- en: As discussed earlier, Computer Vision tries to model algorithms based on how
    humans perceive the visual data. So, it would be helpful to find salient regions
    and objects in the images that can help different applications, such as object
    recognition, object detection and tracking, and so on. There is a module called
    `saliency` that's designed for this purpose. It provides algorithms that can detect
    salient regions in static images and videos.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，计算机视觉试图根据人类如何感知视觉数据来建模算法。因此，找到图像中可以帮助不同应用（如物体识别、物体检测和跟踪等）的显著区域和物体将是有帮助的。有一个名为`saliency`的模块，就是为了这个目的而设计的。它提供检测静态图像和视频中的显著区域的算法。
- en: Surface matching
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 表面匹配
- en: We are increasingly interacting with devices that can capture the 3D structure
    of the objects around us. These devices basically capture the depth information
    along with the regular 2D color images. So, it's important for us to build algorithms
    that can understand and process 3D objects. Kinect is a good example of a device
    that captures the depth information along with the visual data. The task at hand
    is to recognize the input 3D object by matching it with one of the models in our
    database. If we have a system that can recognize and locate objects, then it can
    be used for many different applications. There is a module called `surface_matching`
    that contains algorithms for 3D object recognition and a pose estimation algorithm
    using 3D features.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们越来越多地与能够捕捉我们周围物体 3D 结构的设备互动。这些设备基本上会捕捉深度信息以及常规的 2D 彩色图像。因此，对我们来说，构建能够理解和处理
    3D 物体的算法非常重要。Kinect 是一个捕捉深度信息和视觉数据的设备的良好例子。当前的任务是通过将输入的 3D 物体与数据库中的某个模型进行匹配来识别它。如果我们有一个能够识别和定位物体的系统，那么它可以用于许多不同的应用。有一个名为
    `surface_matching` 的模块，其中包含用于 3D 物体识别和姿态估计算法。
- en: Text detection and recognition
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文本检测与识别
- en: Identifying text in a given scene and recognizing the content is becoming increasingly
    important. Some applications include nameplate recognition, recognizing road signs
    for self-driving cars, book scanning to digitize the contents, and so on. There
    is a module called `text` that contains various algorithms to handle text detection
    and recognition.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在给定的场景中识别文本并识别内容变得越来越重要。一些应用包括车牌识别、自动驾驶汽车的道路标志识别、书籍扫描以数字化内容等。有一个名为 `text` 的模块，其中包含处理文本检测和识别的各种算法。
- en: Installing OpenCV
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 OpenCV
- en: Let's see how to get OpenCV up-and-running on various operating systems.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何在各种操作系统上让 OpenCV 运行起来。
- en: Windows
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Windows
- en: To keep things easy, let's install OpenCV using prebuilt libraries. Let's go
    to [http://opencv.org](http://opencv.org) and download the latest version for
    Windows. The current version is 3.0.0, and you can go to the OpenCV homepage to
    get the latest link to download the package.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简化过程，让我们使用预构建库来安装 OpenCV。让我们访问 [http://opencv.org](http://opencv.org) 并下载适用于
    Windows 的最新版本。当前版本是 3.0.0，您可以通过访问 OpenCV 主页来获取下载包的最新链接。
- en: You need to make sure you have admin rights before you proceed. The downloaded
    file will be an executable file, so just double-click on it to start the installation
    process. The installer expands the content into a folder. You will be able to
    choose the installation path and check the installation by inspecting the files.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，您需要确保您有管理员权限。下载的文件将是一个可执行文件，所以只需双击它即可开始安装过程。安装程序会将内容展开到一个文件夹中。您将能够选择安装路径并通过检查文件来验证安装。
- en: 'Once you are done with the previous step, we need to set the OpenCV environment
    variables and add it to the system path to complete the installation. We will
    set up an environment variable that will hold the build directory of the OpenCV
    library. We will be using this in our projects. Open the terminal and type the
    following command:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 完成前一个步骤后，我们需要设置 OpenCV 环境变量并将其添加到系统路径以完成安装。我们将设置一个环境变量，它将保存 OpenCV 库的构建目录。我们将在我们的项目中使用它。打开终端并输入以下命令：
- en: '[PRE0]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: We are assuming that you have a 64-bit machine with Visual Studio 2012 installed.
    If you have Visual Studio 2010, replace `vc11` with `vc10` in the preceding command.
    The path specified earlier is where we will have our OpenCV binaries, and you
    will see two folders inside this path called `lib` and `bin`. If you are using
    Visual Studio 2015, you should be able to compile OpenCV from scratch.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们假设您有一个安装了 Visual Studio 2012 的 64 位机器。如果您有 Visual Studio 2010，请在之前的命令中将 `vc11`
    替换为 `vc10`。之前指定的路径是我们将拥有 OpenCV 二进制文件的路径，您将在这个路径中看到两个文件夹，分别称为 `lib` 和 `bin`。如果您使用
    Visual Studio 2015，您应该能够从头开始编译 OpenCV。
- en: Let's go ahead and add the path to the `bin` folder of our system's path. The
    reason we need to do this is because we will be using the OpenCV library in the
    form of **Dynamic Link Libraries** (**DLLs**). Basically, all the OpenCV algorithms
    are stored here, and our operating system will only load them during runtime.
    In order to do this, our operating system needs to know where they are located.
    The system's `PATH` variable will contain a list of all the folders where it can
    find the DLLs. So, naturally, we need to add the path to the OpenCV library to
    this list. Now, why do we need to do all this? Well, the other option is to copy
    the required DLLs to the same folder as the application's executable file (the
    `.exe` file). This is an unnecessary overhead, especially when we are working
    with many different projects.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续将路径添加到系统路径的`bin`文件夹中。我们需要这样做的原因是，我们将以**动态链接库**（**DLLs**）的形式使用OpenCV库。基本上，所有OpenCV算法都存储在这里，我们的操作系统将在运行时加载它们。为了做到这一点，我们的操作系统需要知道它们的位置。系统的`PATH`变量将包含一个包含它可以找到DLLs的所有文件夹的列表。因此，自然地，我们需要将OpenCV库的路径添加到这个列表中。现在，为什么我们需要做所有这些？好吧，另一个选择是将所需的DLLs复制到与应用程序可执行文件（`.exe`文件）相同的文件夹中。这会增加不必要的开销，尤其是在我们处理许多不同项目时。
- en: 'We need to edit the `PATH` variable in order to add it to this folder. You
    can use software such as `Path Editor` to do this. You can download it from [https://patheditor2.codeplex.com](https://patheditor2.codeplex.com).
    Once you install it, start it and add the following new entry (you can right-click
    on the path to insert a new item):'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要编辑`PATH`变量，以便将其添加到这个文件夹中。您可以使用`Path Editor`等软件来完成此操作。您可以从[https://patheditor2.codeplex.com](https://patheditor2.codeplex.com)下载它。安装后，启动它并添加以下新条目（您可以在路径上右键单击以插入新项目）：
- en: '[PRE1]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Go ahead and save it to the registry. We are done!
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 继续保存到注册表中。我们完成了！
- en: Mac OS X
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Mac OS X
- en: In this section, we will see how to install OpenCV on Mac OS X. Precompiled
    binaries are not available for Mac OS X, so we need to compile OpenCV from scratch.
    Before we proceed, we need to install CMake. If you don't have CMake already installed,
    you can download it from [https://cmake.org/files/v3.3/cmake-3.3.2-Darwin-x86_64.dmg](https://cmake.org/files/v3.3/cmake-3.3.2-Darwin-x86_64.dmg).
    It's a `dmg` file! So, once you download it, just run the installer.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将了解如何在Mac OS X上安装OpenCV。预编译的二进制文件对Mac OS X不可用，因此我们需要从头开始编译OpenCV。在继续之前，我们需要安装CMake。如果您还没有安装CMake，您可以从[https://cmake.org/files/v3.3/cmake-3.3.2-Darwin-x86_64.dmg](https://cmake.org/files/v3.3/cmake-3.3.2-Darwin-x86_64.dmg)下载它。这是一个`dmg`文件！所以，一旦下载，只需运行安装程序即可。
- en: Download the latest version of OpenCV from opencv.org. The current version is
    3.0.0, and you can download it from [https://github.com/Itseez/opencv/archive/3.0.0.zip](https://github.com/Itseez/opencv/archive/3.0.0.zip).
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 从opencv.org下载OpenCV的最新版本。当前版本是3.0.0，您可以从[https://github.com/Itseez/opencv/archive/3.0.0.zip](https://github.com/Itseez/opencv/archive/3.0.0.zip)下载。
- en: Unzip the contents into a folder of your choice. OpenCV 3.0.0 also has a new
    package called `opencv_contrib` that contains user contributions that are not
    yet considered stable. One thing to keep in mind is that some of the algorithms
    in the `opencv_contrib` package are not freely available for commercial use. Also,
    installing this package is optional. OpenCV will work just fine if you don't install
    `opencv_contrib`. Since we are installing OpenCV anyway, it's good to install
    this package so that you can experiment with it later on (as opposed to going
    through the whole installation process again). This package is a great way to
    learn and play around with new algorithms. You can download it from [https://github.com/Itseez/opencv_contrib/archive/3.0.0.zip](https://github.com/Itseez/opencv_contrib/archive/3.0.0.zip).
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 将内容解压缩到您选择的文件夹中。OpenCV 3.0.0还有一个名为`opencv_contrib`的新包，其中包含尚未被认为是稳定的用户贡献。需要注意的是，`opencv_contrib`包中的一些算法对商业用途并不免费。此外，安装此包是可选的。如果您不安装`opencv_contrib`，OpenCV也能正常运行。既然我们无论如何都要安装OpenCV，那么安装这个包以便以后可以实验它（而不是再次经历整个安装过程）是个不错的选择。您可以从[https://github.com/Itseez/opencv_contrib/archive/3.0.0.zip](https://github.com/Itseez/opencv_contrib/archive/3.0.0.zip)下载它。
- en: Unzip the contents of the ZIP file into a folder of your choice. For convenience,
    unzip it into the same folder, as mentioned earlier, so that the `opencv-3.0.0`
    and `opencv_contrib-3.0.0` folders are in the same main folder.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 将ZIP文件的内容解压缩到您选择的文件夹中。为了方便，请将其解压缩到前面提到的同一个文件夹中，这样`opencv-3.0.0`和`opencv_contrib-3.0.0`文件夹就位于同一个主文件夹中。
- en: 'We are now ready to build OpenCV. Open your terminal and navigate to the folder
    where you unzipped the contents of OpenCV 3.0.0\. Run the following commands after
    substituting the right paths in the commands:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在准备好构建 OpenCV。打开你的终端，导航到解压 OpenCV 3.0.0 内容的文件夹。在命令中替换正确的路径后，运行以下命令：
- en: '[PRE2]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'It''s time to install OpenCV 3.0.0\. Go inside the `/full/path/to/opencv-3.0.0/build`
    directory and run the following commands on your terminal:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 是时候安装 OpenCV 3.0.0 了。进入 `/full/path/to/opencv-3.0.0/build` 目录，并在终端上运行以下命令：
- en: '[PRE3]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In the preceding command, the `-j4` flag indicates that it is using four cores
    to install it. It''s faster this way! Now, let''s set the library path. Open your
    `~/.profile` file in your terminal using the `vi ~/.profile` command, and add
    the following line:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的命令中，`-j4` 标志表示它正在使用四个核心来安装，这样更快！现在，让我们设置库路径。使用 `vi ~/.profile` 命令在终端中打开你的
    `~/.profile` 文件，并添加以下行：
- en: '[PRE4]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We need to copy the `pkg-config` file `opencv.pc` to `/usr/local/lib/pkgconfig`
    and name it `opencv3.pc`. This way, if you already have an existing `OpenCV 2.4.x`
    installation, there will be no conflicts. Let''s go ahead and do this:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要将 `pkg-config` 文件 `opencv.pc` 复制到 `/usr/local/lib/pkgconfig` 并命名为 `opencv3.pc`。这样，如果你已经有一个现有的
    `OpenCV 2.4.x` 安装，将不会有冲突。让我们继续做这件事：
- en: '[PRE5]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We need to update our `PKG_CONFIG_PATH` variable as well. Open your `~/.profile`
    file, and add the following line:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要更新我们的 `PKG_CONFIG_PATH` 变量。打开你的 `~/.profile` 文件，并添加以下行：
- en: '[PRE6]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Reload your `~/.profile` file using the following command:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令重新加载你的 `~/.profile` 文件：
- en: '[PRE7]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We are done! Let''s see if it''s working:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们完成了！让我们看看它是否工作：
- en: '[PRE8]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: If you see `Welcome to OpenCV 3.0.0` printed on your terminal, you are good
    to go. We will be using CMake to build our OpenCV projects throughout this book.
    We will cover this in more detail in the next chapter.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看到终端上打印出 `Welcome to OpenCV 3.0.0`，那么你就准备好了。在这本书中，我们将使用 CMake 来构建我们的 OpenCV
    项目。我们将在下一章中更详细地介绍这一点。
- en: Linux
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Linux
- en: 'Let''s see how to install OpenCV on Ubuntu. We need to install some dependencies
    before we begin. Let''s install them using the package manager by running the
    following command on your terminal:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何在 Ubuntu 上安装 OpenCV。在我们开始之前，我们需要安装一些依赖项。让我们使用包管理器在终端上运行以下命令来安装它们：
- en: '[PRE9]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now that you have installed the dependencies, let''s download, build, and install
    OpenCV:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经安装了依赖项，让我们下载、构建和安装 OpenCV：
- en: '[PRE10]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Let''s copy the `pkg-config` file''s `opencv.pc` to `/usr/local/lib/pkgconfig`
    and name it `opencv3.pc`:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将 `pkg-config` 文件的 `opencv.pc` 复制到 `/usr/local/lib/pkgconfig` 并命名为 `opencv3.pc`：
- en: '[PRE11]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We are done! We will now be able to use it to compile our OpenCV programs from
    the command line. Also, if you already have an existing OpenCV 2.4.x installation,
    there will be no conflicts. Let''s check whether the installation is working properly:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们完成了！现在我们可以使用它从命令行编译我们的 OpenCV 程序。另外，如果你已经有一个现有的 OpenCV 2.4.x 安装，将不会有冲突。让我们检查安装是否正常工作：
- en: '[PRE12]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: If you see `Welcome to OpenCV 3.0.0` printed on your terminal, you are good
    to go. In the following chapters, you will learn how to use CMake to build your
    OpenCV projects.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看到终端上打印出 `Welcome to OpenCV 3.0.0`，那么你就准备好了。在接下来的章节中，你将学习如何使用 CMake 来构建你的
    OpenCV 项目。
- en: Summary
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned how to install OpenCV across various operating systems.
    We discussed the human visual system and how humans process visual data. We understood
    why it's difficult for machines to do the same and what we need to consider while
    designing a Computer Vision library. We learned what can be done using OpenCV
    and the various modules that can be used to do those tasks.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何在各种操作系统上安装 OpenCV。我们讨论了人类视觉系统以及人类如何处理视觉数据。我们理解了为什么机器做同样的事情很困难，以及在设计计算机视觉库时需要考虑什么。我们学习了可以使用
    OpenCV 做什么，以及可以使用哪些模块来完成这些任务。
- en: In the next chapter, we will discuss how to operate on images and how we can
    manipulate them using various functions. We will also learn how to build a project
    structure for our OpenCV applications.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论如何操作图像以及我们如何使用各种函数来操纵它们。我们还将学习如何为我们的 OpenCV 应用程序构建项目结构。
