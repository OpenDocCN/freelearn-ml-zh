["```py\nfrom keras.datasets import mnist\n(x_train, y_train), (x_test, y_test) = mnist.load_data()\n```", "```py\ndatagen = ImageDataGenerator(brightness_range=[0.1, 1.5], rotation_range=60, width_shift_range=[-50, -25, 25, 50], horizontal_flip=True)\n```", "```py\nmodel = Sequential()\nmodel.add(Conv2D(8, (3, 3), input_shape=x_train.shape[1:], activation='relu'))\nmodel.add(MaxPooling2D())\nmodel.add(Flatten())\nmodel.add(Dense(units = 256, activation = \"relu\"))\nmodel.add(Dense(num_classes))\nmodel.add(Activation('softmax'))\n```", "```py\n_______________________________________________________________\nLayer (type)                 Output Shape              Param #   \n===============================================================\nconv2d_1 (Conv2D)            (None, 30, 30, 8)         224       \n_______________________________________________________________\nmax_pooling2d_1 (MaxPooling2 (None, 15, 15, 8)         0         \n_______________________________________________________________\nflatten_1 (Flatten)          (None, 1800)              0         \n_______________________________________________________________\ndense_1 (Dense)              (None, 256)               461056    \n_______________________________________________________________\ndense_2 (Dense)              (None, 10)                2570      \n_______________________________________________________________\nactivation_1 (Activation)    (None, 10)                0         \n===============================================================\nTotal params: 463,850\nTrainable params: 463,850\nNon-trainable params: 0\n```", "```py\nTraining time: 90.96391367912292\nMin Loss: 0.8851623952198029\nMin Validation Loss: 1.142119802236557\nMax Accuracy: 0.68706\nMax Validation Accuracy: 0.6068999767303467\n```", "```py\nTotal params: 1,846,922\nTraining time: 124.37444043159485\nMin Loss: 0.6110964662361145\nMin Validation Loss: 1.0291267457723619\nMax Accuracy: 0.78486\nMax Validation Accuracy: 0.6568999886512756\n```", "```py\nmodel.add(Conv2D(8, (3, 3), input_shape=x_train.shape[1:], activation='relu'))\nmodel.add(Conv2D(8, (3, 3), input_shape=x_train.shape[1:], activation='relu', padding = \"same\"))\nmodel.add(Conv2D(8, (3, 3), input_shape=x_train.shape[1:], activation='relu', padding = \"same\"))\nmodel.add(Conv2D(8, (3, 3), input_shape=x_train.shape[1:], activation='relu', padding = \"same\"))\n```", "```py\nTotal params: 465,602\n```", "```py\nTraining time: 117.05060386657715\nMin Loss: 0.6014562886440754\nMin Validation Loss: 1.0268916247844697\nMax Accuracy: 0.7864\nMax Validation Accuracy: 0.6520000100135803\n```", "```py\nmodel.add(Conv2D(8, (3, 3), input_shape=x_train.shape[1:], activation='relu'))\nmodel.add(Conv2D(8, (3, 3), input_shape=x_train.shape[1:], activation='relu', padding=\"valid\"))\nmodel.add(Conv2D(8, (3, 3), input_shape=x_train.shape[1:], activation='relu', padding=\"valid\"))\nmodel.add(Conv2D(8, (3, 3), input_shape=x_train.shape[1:], activation='relu', padding=\"valid\"))\n```", "```py\nTotal params: 299,714\n```", "```py\nTraining time: 109.74382138252258\nMin Loss: 0.8018992121839523\nMin Validation Loss: 1.0897881112098693\nMax Accuracy: 0.71658\nMax Validation Accuracy: 0.6320000290870667\n```", "```py\nmodel.add(Conv2D(8, (3, 3), input_shape=x_train.shape[1:], padding=\"same\", activation='relu'))\nTotal params: 527,338\n```", "```py\nTraining time: 91.4407947063446\nMin Loss: 0.7653912879371643\nMin Validation Loss: 1.0724352446556091\nMax Accuracy: 0.73126\nMax Validation Accuracy: 0.6324999928474426\n```", "```py\nmodel.add(Conv2D(8, (7, 7), input_shape=x_train.shape[1:], padding=\"same\", activation='relu'))\nTotal params: 528,298\n```", "```py\nTraining time: 94.85121083259583\nMin Loss: 0.7786661441159248\nMin Validation Loss: 1.156547416305542\nMax Accuracy: 0.72674\nMax Validation Accuracy: 0.6090999841690063\n```", "```py\nTotal params: 1,846,250\n```", "```py\nTraining time: 121.01851439476013\nMin Loss: 0.8000291277170182\nMin Validation Loss: 1.2463579467773438\nMax Accuracy: 0.71736\nMax Validation Accuracy: 0.5710999965667725\n```", "```py\nmodel.add(Conv2D(8, (3, 3), input_shape=x_train.shape[1:], activation='relu'))\nmodel.add(Conv2D(8, (3, 3), input_shape=x_train.shape[1:], activation='relu', padding = \"same\"))\nmodel.add(MaxPooling2D())\nmodel.add(Conv2D(8, (3, 3), input_shape=x_train.shape[1:], activation='relu', padding = \"same\"))\nmodel.add(Conv2D(8, (3, 3), input_shape=x_train.shape[1:], activation='relu', padding = \"same\"))\nmodel.add(MaxPooling2D())\n```", "```py\nTotal params: 105,154\n```", "```py\nTraining time: 105.30972981452942\nMin Loss: 0.8419396163749695\nMin Validation Loss: 0.9395202528476715\nMax Accuracy: 0.7032\nMax Validation Accuracy: 0.6686999797821045\n```", "```py\nTotal params: 1,854,698\n```", "```py\nTraining time: 122.05767631530762\nMin Loss: 0.6533840216350555\nMin Validation Loss: 1.093649614238739\nMax Accuracy: 0.7722\nMax Validation Accuracy: 0.630299985408783\n```", "```py\nmodel.add(Dense(units = 512, activation = \"relu\"))\nmodel.add(Dense(units = 256, activation = \"relu\"))\nmodel.add(Dense(units = 128, activation = \"relu\"))\n```", "```py\nTotal params: 1,087,850\n```", "```py\nTraining time: 111.73353481292725\nMin Loss: 0.7527586654126645\nMin Validation Loss: 1.1094331634044647\nMax Accuracy: 0.7332\nMax Validation Accuracy: 0.6115000247955322\n```", "```py\nMin Loss: 0.8791077242803573\nMin Validation Loss: 1.1203862301826477\nMax Accuracy: 0.69174\nMax Validation Accuracy: 0.5996000170707703\n```", "```py\nMin Loss: 0.8642362675189972\nMin Validation Loss: 1.1310886552810668\nMax Accuracy: 0.69624\nMax Validation Accuracy: 0.6100000143051147\n```", "```py\nfrom numpy.random import seed\nseed(1)\nimport tensorflow as tf\ntf.random.set_seed(1)\n```", "```py\n    conv_layer = next(x.output for x in model.layers if     x.output.name.startswith(conv_name))act_model = models.Model(inputs=model.input, outputs=[conv_layer])activations = act_model.predict(x_test[0:num_predictions, :, :, :])\n    ```", "```py\n    col_act = []\n    for pred_idx, act in enumerate(activations):\n        row_act = []\n        for idx in range(act.shape[2]):\n            row_act.append(act[:, :, idx])\n        col_act.append(cv2.hconcat(row_act))\n    ```", "```py\n    plt.matshow(cv2.vconcat(col_act), cmap='viridis')plt.show()\n    ```", "```py\nmodel = load_model(os.path.join(dir_save, model_name))\n```", "```py\nx_pred = model.predict(x_test[0:1, :, :, :])print(\"Expected:\", np.argmax(y_test))print(\"First prediction probabilities:\", x_pred)print(\"First prediction:\", np.argmax(x_pred))\n```", "```py\nExpected: 7\nFirst prediction probabilities: [[6.3424804e-14 6.1755254e-06 2.5011676e-08 2.2640785e-07 9.0170204e-08 7.4626680e-11 5.6195684e-13 9.9999273e-01 1.9735349e-09 7.3219508e-07]]\nFirst prediction: 7\n```"]