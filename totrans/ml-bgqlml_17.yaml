- en: '*Chapter 13*: Running TensorFlow Models with BigQuery ML'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: TensorFlow is one of the most used and relevant **Machine Learning** (**ML**)
    frameworks available. It allows data scientists and ML engineers to develop advanced
    models, and it also provides great flexibility and a rich set of mathematical
    functions.
  prefs: []
  type: TYPE_NORMAL
- en: The advanced features that TensorFlow offers provide a huge opportunity for
    data analysts that want to leverage existing models developed by data scientists
    and ML engineers.
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, the interoperability between BigQuery ML and TensorFlow represents
    a way to fill the gap between business and technical stakeholders within companies.
    The first group is usually more focused on in-depth knowledge of the data, while
    the second is technical-oriented and focused on programming skills.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we'll learn what TensorFlow is and how it can be used with
    BigQuery ML. We'll understand how to export a BigQuery ML model into the TensorFlow
    format and how to run TensorFlow models using BigQuery ML SQL syntax.
  prefs: []
  type: TYPE_NORMAL
- en: 'To understand how we can complement BigQuery ML with TensorFlow, we''ll cover
    the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing TensorFlow
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Discovering the relationship between BigQuery ML and TensorFlow
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Converting BigQuery ML models into TensorFlow
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running TensorFlow models with BigQuery ML
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter requires that you have access a web browser and can leverage the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: A GCP account to access the Google Cloud Console
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A GCP project to host BigQuery datasets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A GCP project to host the Google Cloud storage bucket
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that we've covered the technical requirements, let's start exploring BigQuery
    ML for TensorFlow models.
  prefs: []
  type: TYPE_NORMAL
- en: 'Check out the following video to see the Code in Action: [https://bit.ly/33ngmdf](https://bit.ly/33ngmdf)'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing TensorFlow
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we'll introduce **TensorFlow**, its origins, and what this
    framework has achieved in the ML community.
  prefs: []
  type: TYPE_NORMAL
- en: '**TensorFlow** is an open source library that''s used to develop ML models.
    It''s very flexible and can be used to address a wide variety of use cases and
    business scenarios. Since TensorFlow is based on math functions, its name comes
    from the mathematical concept of the **Tensor**.'
  prefs: []
  type: TYPE_NORMAL
- en: In math, a **Tensor** is an algebraic object that describes a relationship between
    sets of other algebraic objects. Some examples of tensors are vectors and matrixes.
  prefs: []
  type: TYPE_NORMAL
- en: The TensorFlow library was originally created by Google's engineers and then
    released under the Apache License in 2015\. Now, it is recognized as one of the
    most popular ML frameworks due to its potential and flexibility. In fact, a TensorFlow
    model can be executed on local machines, on-premises servers, in the cloud, or
    at the edge, such as on mobile phones and video surveillance cameras.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: '**Edge computing** is a computing paradigm that brings the computation of business
    logic closer to the location where it is required. When a ML model runs at the
    edge, it is typically executed directly on the sensors or cameras that collect
    the data for the model to function without connecting to other systems.'
  prefs: []
  type: TYPE_NORMAL
- en: 'TensorFlow is widely used by the ML community and is applied to solve different
    challenges in the artificial intelligence space, such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Airbnb leverages TensorFlow to classify customers pictures, thus improving
    the virtual tours of houses to rent. For more details, you can visit the following
    link: https://medium.com/airbnb-engineering/categorizing-listing-photos-at-airbnb-f9483f3ab7e3.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Google uses TensorFlow to empower its products, such as Google Search, Gmail,
    and Translate, with artificial intelligence capabilities. For more details, you
    can visit the following link: [https://ai.googleblog.com/search/label/TensorFlow](https://ai.googleblog.com/search/label/TensorFlow).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'PayPal uses TensorFlow to prevent fraud and applies ML to increase the accuracy
    of its fraud detection models. For more details, you can visit the following link:
    [https://medium.com/paypal-engineering](https://medium.com/paypal-engineering).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Twitter leverages TensorFlow to identify and show the most relevant tweets
    to its users. For more details, you can visit the following link: https://blog.tensorflow.org/2019/03/ranking-tweets-with-tensorflow.html.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Other interesting use cases can be found on the TensorFlow case studies web
    page at [https://www.tensorflow.org/about/case-studies?hl=en](https://www.tensorflow.org/about/case-studies?hl=en).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compared to what happens with BigQuery ML, advanced programming skills are required
    to develop a ML model using TensorFlow. In fact, the high flexibility of the TensorFlow
    library is balanced by the need to invest a certain amount of time in code development
    to create the model. Now, the suggested programming language to develop ML models
    with TensorFlow is Python.
  prefs: []
  type: TYPE_NORMAL
- en: Once the development and training phase of a TensorFlow model is completed,
    it can be exported into the **SavedModel** format.
  prefs: []
  type: TYPE_NORMAL
- en: 'The **SavedModel** format contains the entire TensorFlow model. This format
    allows us to deploy the model without the need to run the code again in all the
    compatible environments. A SavedModel is composed of multiple files and folders
    stored in the same parent folder:'
  prefs: []
  type: TYPE_NORMAL
- en: The SavedModel file stores the TensorFlow logic. This file is called `saved_model.pb`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `variables` directory contains the parameters of the trained model.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `assets` folder can contain the external and additional files that are used
    by the ML model.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When a TensorFlow model is in the SavedModel format, it can be easily loaded
    and used on the platform where we want to use this model. The platform could be
    a physical server, a cloud instance, a smartphone, or an **Internet of Things**
    (**IoT**) device.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we introduced the basics of TensorFlow. In the next section,
    we'll discover how BigQuery ML is linked to TensorFlow.
  prefs: []
  type: TYPE_NORMAL
- en: Discovering the relationship between BigQuery ML and TensorFlow
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we'll understand the relationship between BigQuery ML and TensorFlow.
    After completing this section, we'll be able to understand when to use BigQuery
    ML and TensorFlow according to our use case, but also how to get the best out
    of the two technologies, when they're used together.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding commonalities and differences
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: BigQuery ML and TensorFlow have some similar aspects, but there are also some
    relevant differences to highlight.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following table, we have summarized the main similarities and differences
    of these two frameworks:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.1 – Comparing BigQuery ML and TensorFlow'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16722_13_001.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 13.1 – Comparing BigQuery ML and TensorFlow
  prefs: []
  type: TYPE_NORMAL
- en: First, it is important to underline that TensorFlow offers greater flexibility
    in terms of the ML models that can be implemented. While BigQuery ML is characterized
    by a specific list of supported model types (https://cloud.google.com/bigquery-ml/docs/introduction#supported_models_in),
    TensorFlow offers a wider spectrum of ML techniques.
  prefs: []
  type: TYPE_NORMAL
- en: BigQuery ML was designed as an extension of BigQuery and for this reason, it
    only focuses on structured data, which can be represented in a tabular format.
    All the BigQuery ML techniques are based on the possibility to train and apply
    the models to rows stored in BigQuery tables. On the other hand, TensorFlow is
    open to different formats, including free text, images, audio, and videos.
  prefs: []
  type: TYPE_NORMAL
- en: To train, evaluate, and test BigQuery ML models, the user should know the SQL
    syntax and have minimal ML experience. Implementing a TensorFlow model, on the
    other hand, requires good programming skills and good knowledge of ML topics because
    the framework provides higher flexibility in terms of customization.
  prefs: []
  type: TYPE_NORMAL
- en: Considering the features of these two technologies, it is clear that they are
    addressed to different stakeholders in the companies. While BigQuery ML can easily
    be used by business analysts and data analysts that are familiar with data analytics
    tasks and SQL queries, TensorFlow is designed for advanced programmers, such as
    experienced data scientists and ML engineers.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have understood the commonalities and the differences of BigQuery
    ML and TensorFlow, in the next section, we'll learn how these two frameworks can
    complement each other.
  prefs: []
  type: TYPE_NORMAL
- en: Collaborating with BigQuery ML and TensorFlow
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we'll discover how to use BigQuery ML and TensorFlow together
    to get the maximum value from both technologies.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram shows the interactions between business analysts and
    data scientists using BigQuery ML and TensorFlow:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.2 – Interactions between BigQuery ML and TensorFlow'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16722_13_002.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 13.2 – Interactions between BigQuery ML and TensorFlow
  prefs: []
  type: TYPE_NORMAL
- en: As we've described in [*Chapter 1*](B16722_01_Final_ASB_ePub.xhtml#_idTextAnchor016),
    *Introduction to Google Cloud and BigQuery*, the first steps of the ML development
    cycle are exploring the data and completely understanding it.
  prefs: []
  type: TYPE_NORMAL
- en: After this first phase of analysis, the data needs to be cleaned and prepared
    to train the ML algorithm. This phase is fundamental to creating a valuable ML
    model and proceeding on to the training stage.
  prefs: []
  type: TYPE_NORMAL
- en: 'When it''s time to actually develop the ML model, depending on our knowledge,
    background, and previous experience, we have two options:'
  prefs: []
  type: TYPE_NORMAL
- en: If you are a business analyst or data analyst, you will prefer using BigQuery
    ML for its simplicity and immediacy thanks to the SQL syntax.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you're a data scientist or a ML engineer, you will choose to train a TensorFlow
    model due to its flexibility and because it offers more opportunities for customization.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As shown in the preceding diagram, the upper branch represents the typical workflow
    of a business or data analyst who leverages BigQuery ML SQL statements to create,
    evaluate, and use a ML model on data that's already been stored in BigQuery. This
    branch requires that you have good knowledge of the SQL language, the basics of
    ML, and the underlying data.
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, the lower branch of the diagram represents the development
    process based on a TensorFlow library that's been made by data scientists or ML
    engineers, who have a great experience in programming and ML algorithms.
  prefs: []
  type: TYPE_NORMAL
- en: Typically, data analysts know the data very well but have little knowledge of
    the most advanced programming techniques, while data scientists and ML engineers
    have in-depth coding skills but a limited comprehension of the business data.
    This situation usually occurs in more established companies due to the employees
    having different professional backgrounds. This can cause friction between those
    who know the industry very well and the business processes where other people
    are more focused on programming.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to reduce this gap and mitigate the risk of friction, BigQuery ML
    allows us to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Export the ML models that have been developed with BigQuery ML into the TensorFlow
    SavedModel format.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Import TensorFlow ML models in the SavedModel format.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Looking at the preceding diagram, we can see that a business analyst can export
    BigQuery ML models and deploy them to other environments that are different from
    BigQuery and compatible with TensorFlow.
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, a data scientist who has implemented advanced TensorFlow
    models can save them into a Google Cloud storage bucket, which means they can
    be imported into BigQuery ML.
  prefs: []
  type: TYPE_NORMAL
- en: 'This kind of bidirectional interaction between BigQuery ML and the TensorFlow
    framework allows us to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Extend the applicability of a BigQuery ML model that is no longer confined to
    using data stored in BigQuery.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Import BigQuery ML advanced TensorFlow models that were not originally supported
    by the BigQuery ML syntax and use them, through SQL queries, on the data stored
    in BigQuery.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this section, we learned how BigQuery ML and TensorFlow can interact and
    why it's so important to leverage this kind of integration. In the next section,
    we'll train a BigQuery ML model and export it in TensorFlow format.
  prefs: []
  type: TYPE_NORMAL
- en: Converting BigQuery ML models into TensorFlow
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we'll train the same deep neural network that we trained in
    [*Chapter 11*](B16722_11_Final_ASB_ePub.xhtml#_idTextAnchor160), *Implementing
    Deep Neural Networks*, and then export this model into the TensorFlow SavedModel
    format.
  prefs: []
  type: TYPE_NORMAL
- en: Training the BigQuery ML to export it
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before we start training the model, let''s access BigQuery to create the dataset
    and the tables that will be used for training and prediction:'
  prefs: []
  type: TYPE_NORMAL
- en: Log into our Google Cloud Console and access the **BigQuery** user interface
    from the navigation menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new dataset under the project that we' created in [*Chapter 2*](B16722_02_Final_ASB_ePub.xhtml#_idTextAnchor039),
    *Setting Up Your GCP and BigQuery Environment*. For this use case, we'll create
    a dataset called `13_tensorflow_model` with the default options.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, we''re ready to create the table that will contain the training dataset.
    Let''s execute the following SQL statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The result of this query is stored in the new `` `13_tensorflow_model.training_table`
    `` table that we created to support the following steps of our use case.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The business logic of this query is the same as what we applied in the *Preparing
    the dataset* section of [*Chapter 11*](B16722_11_Final_ASB_ePub.xhtml#_idTextAnchor160),
    *Implementing Deep Neural Networks*.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, we will create the table that will be used to test our ML model:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This query applies the same logic that was used to create the training table
    but only takes May 2018 into consideration.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, let''s train our ML model, which will be exported into TensorFlow format
    in the *Exporting the BigQuery ML model* section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The business logic that was used to create the `` `13_tensorflow_model.bigquery_ml_model_to_export`
    `` ML model is the same logic we used to train the `CRELU` deep neural network
    in the *Training the deep neural network models* section of [*Chapter 11*](B16722_11_Final_ASB_ePub.xhtml#_idTextAnchor160),
    *Implementing Deep Neural Networks*.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now that we've trained a ML model, in the next section, we'll learn how to export
    it into the TensorFlow SavedModel format.
  prefs: []
  type: TYPE_NORMAL
- en: Exporting the BigQuery ML model
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this section, we''ll export a BigQuery ML model into a Google Cloud storage
    bucket in the TensorFlow SavedModel format. Let''s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: First, we need to access to the Cloud Shell from the Google Cloud Console:![Figure
    13.3 – The Activate Cloud Shell button in the Google Cloud Console
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B16722_13_003.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 13.3 – The Activate Cloud Shell button in the Google Cloud Console
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Important note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The **Cloud Shell** is an online Linux-based environment that can be accessed
    from the web browser of the Google Cloud Console. With the Cloud Shell, you can
    manage your Google Cloud resources by leveraging its preloaded utilities, such
    as the **gcloud** command-line tool.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: After clicking on the **Cloud Shell** button, a Linux command line will be provisioned
    and presented at the bottom of the screen. If this is the first time you're using
    the Google Cloud Shell, the following banner will be presented:![Figure 13.4 –
    The Cloud Shell information box
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B16722_13_004.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 13.4 – The Cloud Shell information box
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'After clicking on the blue **Continue** button, the Linux command line will
    be provisioned, as shown in the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 13.5 – The Cloud Shell environment'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B16722_13_005.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 13.5 – The Cloud Shell environment
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We need to authenticate our account for the Google Cloud SDK by running the
    following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: A web URL will be shown in the command line. By clicking on this URL, we'll
    authorize our account to use Cloud SDK. At the end of this process, you'll see
    a code on the web page that you can copy and paste into your Cloud Shell to complete
    the authorization process.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Then, we can run the following command to set the current project name in the
    new `PROJECT` variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Using the `PROJECT` variable, we''ll create a second variable, `BUCKET`, that
    will contain the name of the Google Cloud storage bucket to create, which is where
    the BigQuery ML model will be exported:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The Google Cloud storage bucket name will be a concatenation of the name of
    our project and the `-us-bigqueryml-export-tf` string.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now that we have the name of the bucket stored in a variable, we can create
    the new bucket by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Important note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The `gsutil mb` command is used to create a new bucket, while the `–l US` option
    specifies the geographic location where we want to create the bucket. In this
    case, the bucket will be created in the United States.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'If this is the first time that you are using Cloud Shell to create a Google
    Cloud storage bucket, then the following banner will appear before the bucket
    is created:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 13.6 – The Cloud Shell authorization box](img/B16722_13_006.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Figure 13.6 – The Cloud Shell authorization box
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Upon clicking on the blue **Authorize** button, the bucket will be created.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, let''s execute the command that will export the BigQuery ML model into
    the Google Cloud storage bucket in the TensorFlow SavedModel format. Let''s run
    the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `bq extract` command is used to extract the BigQuery ML model that''s specified
    after the `–m` option. The last part of the command indicates the path of the
    Google Cloud storage bucket where we want to extract the model and the related
    subfolder; that is, `bqml_exported_model`. As an alternative, it''s also possible
    to export the BigQuery ML model using the following SQL query:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: To verify the presence of the exported model, we can browse the Google Cloud
    Console menu and access the **Browser** functionality under **Storage**, as shown
    in the following screenshot:![Figure 13.7 – Google Cloud Storage – Browser
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B16722_13_007.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 13.7 – Google Cloud Storage – Browser
  prefs: []
  type: TYPE_NORMAL
- en: 'Upon accessing the Google Cloud storage bucket we created in *Step 6* and entering
    the `bqml_exported_model` subfolder, we''ll see the exported version of the BigQuery
    ML model, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.8 – The BigQuery ML model exported into the TensorFlow SavedModel
    format'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16722_13_008.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 13.8 – The BigQuery ML model exported into the TensorFlow SavedModel
    format
  prefs: []
  type: TYPE_NORMAL
- en: From this list of the files, we can easily recognize the main components of
    the TensorFlow SavedModel format that we mentioned in the *Introducing TensorFlow*
    section of this chapter. We can see the `saved_model.pb` file, which contains
    the TensorFlow program, the `assets` and `variables` folders, and some additional
    metadata files.
  prefs: []
  type: TYPE_NORMAL
- en: Now that the model has been exported into the TensorFlow SavedModel format,
    it's possible to share it with other people and run it on a TensorFlow-compatible
    environment, outside of BigQuery.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we learned how to export a BigQuery ML model into a Google
    Cloud storage bucket by using the TensorFlow SavedModel format. In the next section,
    we'll learn how to import existing TensorFlow models into BigQuery ML.
  prefs: []
  type: TYPE_NORMAL
- en: Running TensorFlow models with BigQuery ML
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we'll import the TensorFlow model that we exported in the *Converting
    BigQuery ML models into TensorFlow* section. Once the model has been imported,
    we'll use it through the BigQuery ML syntax.
  prefs: []
  type: TYPE_NORMAL
- en: First, we need to remember that our BigQuery ML model has been exported into
    the folder of a Google Cloud storage bucket. The ML model is stored in the TensorFlow
    SavedModel format and is in the same format as any other ML model that's been
    developed by a data scientist using TensorFlow.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we want to use a TensorFlow model in BigQuery ML, we need to perform the
    following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let''s run the `CREATE OR REPLACE MODEL` SQL statement. Keep in mind
    that the path of the bucket –  `''gs://<PROJECT_NAME>-us-bigqueryml-export-tf/bqml_exported_model/*''`
    – is based on the name of your current project, so you need to replace the `<PROJECT_NAME>`
    placeholder with the name of the project you''re working on:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The syntax of the query is composed of the `CREATE OR REPLACE MODEL` keywords,
    followed by the identifier of the new ML model; that is, `` `13_tensorflow_model.trip_duration_tf_imported_model`
    ``.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the `OPTIONS` clause, we've specified `'tensorflow'` in the `model_type`
    option. Using the `model_path` parameter, we've specified the folder where the
    TensorFlow SavedModel will be stored in the Google Cloud storage bucket.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: To verify that BigQuery ML successfully loaded the TensorFlow model, we can
    browse the BigQuery navigation menu and check that the model is present in the
    `13_tensorflow_model` dataset.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following screenshot shows that the TensorFlow model has been imported
    into BigQuery ML. Its name is `trip_duration_tf_imported_model`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 13.9 – The TensorFlow model imported into BigQuery'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B16722_13_009.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 13.9 – The TensorFlow model imported into BigQuery
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If we click on `trip_duration_tf_imported_model`, we'll be able to access the
    ML model's details.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following screenshot shows the details of the imported ML model:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 13.10 – The details of the ML model we''ve imported into BigQuery'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B16722_13_010.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 13.10 – The details of the ML model we've imported into BigQuery
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: On the **Details** page of the model, we can clearly see that the model type
    is **TENSORFLOW**. This feature confirms that, originally, the ML model was in
    the TensorFlow SavedModel format and has been imported into BigQuery ML.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, we can use the imported TensorFlow model with the BigQuery ML `ML.PREDICT`
    function. Let''s run the following SQL statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The result of the query will be presented after a few seconds in the BigQuery
    UI.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The following screenshot shows the results of executing the query, along with
    the predictions that were generated by the ML model:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 13.11 – The predictions that were generated by the TensorFlow model,
    imported into BigQuery](img/B16722_13_011.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.11 – The predictions that were generated by the TensorFlow model,
    imported into BigQuery
  prefs: []
  type: TYPE_NORMAL
- en: As we can see, the predicted values are stored in the `predictions` column and
    represent the predicted trip duration to go from `start_station_name` to `end_station_name`
    using the bike sharing service.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we learned how to import a TensorFlow model into BigQuery ML
    and how to use it by leveraging the BigQuery ML SQL syntax.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned what TensorFlow is and why it is so important for
    the ML industry.
  prefs: []
  type: TYPE_NORMAL
- en: First, we analyzed the main commonalities and differences between BigQuery ML
    and TensorFlow, and we understood that they are addressed to different target
    personas within the ML community.
  prefs: []
  type: TYPE_NORMAL
- en: Then, we discovered how we can complement BigQuery ML and TensorFlow to get
    the maximum value by combining these two frameworks.
  prefs: []
  type: TYPE_NORMAL
- en: By taking a gradual and step-by-step approach, we learned how to export BigQuery
    ML models into the TensorFlow format so that we can deploy them into environments
    other than BigQuery.
  prefs: []
  type: TYPE_NORMAL
- en: After that, we tested how to import and use a TensorFlow model in BigQuery ML.
    This approach enables data analysts to easily access and use advanced TensorFlow
    ML models that have been developed by data scientists and ML engineers. Finally,
    after importing the ML model, we tested the imported ML model on a BigQuery table
    to predict the trip duration of a bike ride with the New York City bike sharing
    service.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll focus on some BigQuery tips and best practices so
    that we can improve our ML skills further.
  prefs: []
  type: TYPE_NORMAL
- en: Further resources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**NYC Bike Sharing Public Dataset**: [https://console.cloud.google.com/marketplace/product/city-of-new-york/nyc-citi-bike](https://console.cloud.google.com/marketplace/product/city-of-new-york/nyc-citi-bike)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**BigQuery ML Create Model for TensorFlow**: https://cloud.google.com/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-create-tensorflow'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**BigQuery ML Evaluate Model**: [https://cloud.google.com/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-evaluate](https://cloud.google.com/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-evaluate)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**BigQuery ML Predict**: [https://cloud.google.com/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-predict](https://cloud.google.com/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-predict)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**TensorFlow official website**: https://www.tensorflow.org/'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
