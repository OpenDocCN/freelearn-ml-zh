- en: Chapter 10. What Next - The Future of Recommendation Engines
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Thank you for taking this wonderful journey with me so far. I hope you have
    got a fair idea of how to build recommendation engines using various technologies
    such as R, Python, Mahout, Spark, and Neo4j. We have covered recommendation engines
    such as neighborhood recommendations, model-based content recommendations, and
    context-aware, scalable, real-time, graph recommendations.
  prefs: []
  type: TYPE_NORMAL
- en: 'I would like to touch upon two things in the concluding chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Technological shift and motivational shift driving the future of recommendation
    engines
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Popular methodologies for improving the quality of recommendation engines
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the *Future of recommendation engines* section, I will summarize one of my
    talks about recommendation engines in a tech conference held in 2015\. In the
    *good implementations* section, I will touch upon important methodologies to be
    followed while building recommendation engines.
  prefs: []
  type: TYPE_NORMAL
- en: With business organizations investing a lot in recommendation engines, researchers
    are freely exploring different aspects of recommendation engines and applying
    very advanced methods to improve their performance. It is very important for us
    to know the future of recommendation engines and the direction in which the research
    is moving so that we can apply these new techniques in our day-to-day work while
    building recommendation engines.
  prefs: []
  type: TYPE_NORMAL
- en: In the future of recommendation engines section, we will touch upon the technological
    and motivational shifts that are driving the future of recommendations. In the
    following section, we will learn about a few popular methodologies that every
    data scientist should know while building recommendation engines.
  prefs: []
  type: TYPE_NORMAL
- en: Future of recommendation engines
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As we have reached the end of the book, I feel it is time to talk about the
    future of recommendation engines. Let us first have a small recap of what we have
    covered so far in the book:'
  prefs: []
  type: TYPE_NORMAL
- en: Recommendation engines in detail
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data-mining techniques used in recommendation engines
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Collaborative filtering: similarity-based recommendations'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Model-based recommendations using R and Python
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Content-based recommender systems using R and Python
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Context-aware recommender systems using R and Python
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scalable real-time recommender systems using Scala
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scalable recommendation engines using Mahout
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Graph-based recommendation engines using Neo4j
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Phases of recommendation engines
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As explained in [Chapter 1](part0014.xhtml#aid-DB7S1 "Chapter 1. Introduction
    to Recommendation Engines"), *Recommendation Engines an Introduction*, if we look
    closely at the evolution of recommender systems, the recommendation engines have
    evolved in multiple directions; it is important to understand the directions in
    which recommendation engines are evolving to cope with futuristic situations.
  prefs: []
  type: TYPE_NORMAL
- en: 'We are heading into the third phase of evolution of recommendation engines,
    which are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Phase 1: General recommendation engines'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Phase 2: Personalized recommendation engines'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Phase 3: Futuristic recommendation engines'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Predominantly, recommendation engines focus on consumers. **Consumer** is the
    central objective for recommendation engines. Let's understand how these systems
    are evolving with respect to users. With the increase in the usage of the Internet,
    everyday decisions, ranging from which products to buy to which movies to watch
    to which restaurants to try, have led to more and more trust being put in the
    hands of these recommendation systems. These recommendation systems are changing
    the way we make up our minds, guiding us through a new digital reality, the evolution
    of which is bringing us closer to exactly we want, even if we ourselves don't
    know it yet.
  prefs: []
  type: TYPE_NORMAL
- en: Phase 1 - general recommendation engines
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: These recommendation engines are the earlier generation of recommendation engines.
    Collaborative filtering, user-based recommenders, and item-based recommenders
    fall into this phase of general recommendations.
  prefs: []
  type: TYPE_NORMAL
- en: 'As explained in [Chapter 3](part0022.xhtml#aid-KVCC1 "Chapter 3. Recommendation
    Engines Explained"), *Recommendation Engines Explained*, the collaborative filtering
    recommenders have become very popular, and are also very effective at recommending
    things to users. The following figure is symbolic of general recommendation engines:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Phase 1 - general recommendation engines](img/image00483.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Phase 2 - personalized recommender systems
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As the information explosion started and more and more people started using
    the Web, leaving a good amount of digital footprints, such as search patterns,
    clicks, and browsing more and more, companies started looking into what, in the
    items or products, the user is interested in and which features of the items are
    making the user look for it. Companies started realizing that each person is unique
    and has unique tastes, and then they started catering to their need for personalized
    things; these are also called **content-based recommender systems**. In [Chapter
    3](part0022.xhtml#aid-KVCC1 "Chapter 3. Recommendation Engines Explained"), *Recommendation
    Engines Explained,* we learned about content-based recommenders in detail. The
    following figure shows how personalized recommendations are given to the customer:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Phase 2 - personalized recommender systems](img/image00484.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: As systems moved to personalized systems--known as content-based recommender
    systems--more advanced techniques using machine learning, big data, and the cloud
    started calculating items more suited to the users. Methods such as matrix factorizations,
    **Singular Value Decomposition** (**SVD**), and regression analysis started to
    be employed as technology evolved.
  prefs: []
  type: TYPE_NORMAL
- en: The aforementioned two methods have their own limitations to new data (the cold-start
    problem) and in narrowing down the information. To solve these problems, the ensemble
    or **hybrid recommender models** evolved, which are formed by combining one or
    more algorithms to achieve more accuracy.
  prefs: []
  type: TYPE_NORMAL
- en: From here, we are moving into **deep neural nets**, a very advanced level of
    neural-network algorithms stacked together in multiple layers, where feature engineering
    is being automated. One of the major difficult tasks in machine-learning models
    is to accurately engineer the features; so research is being done to apply deep-learning
    methods to recommendation engines.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For more information, refer to the following websites:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://benanne.github.io/2014/08/05/spotify-cnns.html](http://benanne.github.io/2014/08/05/spotify-cnns.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://machinelearning.wustl.edu/mlpapers/paper_files/NIPS2013_5004.pdf](http://machinelearning.wustl.edu/mlpapers/paper_files/NIPS2013_5004.pdf)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.quora.com/Has-there-been-any-work-on-using-deep-learning-for-recommendation-engines](https://www.quora.com/Has-there-been-any-work-on-using-deep-learning-for-recommendation-engines)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'An example of implementation of deep learning in recommendation engines can
    be found as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Phase 2 - personalized recommender systems](img/image00485.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: An S-curve for recommender systems would push the current state of the art nearly
    to the top of its bent.
  prefs: []
  type: TYPE_NORMAL
- en: Phase 3 - futuristic recommender systems
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'At this point, let me pause and take you to the futuristic view of recommender
    systems: we are moving into something called ubiquitous recommender systems. Ubiquitous
    recommenders start recommending things in real time based on your location, time,
    mood, sleep cycle, and energy output. The following figure depicts a futuristic
    system:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Phase 3 - futuristic recommender systems](img/image00486.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'This means that where ever you go and whatever you do, the recommender systems
    will be watching you and will be recommending things on the go. Google, Facebook,
    and other major IT giants have pioneered these recommender systems and have nearly
    perfected them and started delivering these ubiquitous recommender systems. *Google
    Allo* from Google is one example of a ubiquitous recommender system:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Phase 3 - futuristic recommender systems](img/image00487.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Till now, we were getting recommendations based on some bucketing, users or
    items, but the future will be more tailor-made to users based on the digital footprints
    available. *Google Allo* is one of the best available apps, which continuously
    monitors you, and based on your activity on the app, it will definitely be recommending
    things on the go in the future. *Google Allo* is chat environment, which works
    as virtual assistant, assisting us with all our queries, which in turn will learn
    our preferences and interests over time and make smart suggestions on the go.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is how real-time context-aware recommender systems also fall into this
    type of futuristic recommenders:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Phase 3 - futuristic recommender systems](img/image00488.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We are almost in a digitized world, where we are relying on the Internet for
    almost everything, be it related to banking, healthcare, driving cars, restaurants,
    travelling, personal fitness, and so on. In the near future, all companies would
    share information about users among themselves to create 360-degree user profiles
    using all the aforementioned digital footprints, and personalized, real-time,
    context-aware recommendations will be catered to with great accuracy. In the preceding
    figure, we can see how we are leaving our digital footprints and how it is possible
    for companies to share data with one another to generate recommendations tailored
    at individual levels.
  prefs: []
  type: TYPE_NORMAL
- en: 'There have been shifts in motivation, which are driving the evolution of recommendation
    engines toward futuristic systems. A few of them are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: End of search
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Leaving the Web behind
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Emerging from the Web
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Since the advent of recommendation engines, the primary focus is on customers,
    and even for the futuristic recommender systems, this remains the same, but the
    difference comes in with the increase in the number of digital footprints users
    are leaving. This large amount of usage of digital systems is leading customers
    to ask for more sophisticated solutions to make the access to information more
    personal than generic.
  prefs: []
  type: TYPE_NORMAL
- en: End of search
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We are moving away from traditional ways of searching and web integration toward
    information and content discovery. Future search engines will be using a convergence
    theory of web *search/personalization/ads*, which will allow users to move into
    content discovery though recommendations rather than searches. The following figure
    shows convergence theory:'
  prefs: []
  type: TYPE_NORMAL
- en: '![End of search](img/image00489.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: With more and more people relying on the Internet or search engines to find
    suitable products online, organizations are working together by sharing the data
    from users' online activity from different platforms, with the objective of minimizing
    the number of searches to find relevant information or content by generating accurate
    personalized recommendations based on recent activities.
  prefs: []
  type: TYPE_NORMAL
- en: I call this paradigm the **convergence theory,** where traditional search, ads,
    and recommendation engines are combined together to bring relevant content discovery
    to users at a personalized level by bringing an end to searching on the Internet.
  prefs: []
  type: TYPE_NORMAL
- en: For example, the Google search engine and YouTube have already started working
    toward this convergence theory to help users find relevant information on products
    and perform content discovery without searching explicitly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Recently, I was looking for the Raspberry Pi 3, the latest in the series of
    credit-card-sized single-board computers, on an e-commerce site, to buy it for
    my personal work. A few days later, when I was searching for the specifications
    of the Raspberry Pi on Google Search, I noticed that Google had displayed ads
    related to the Raspberry Pi. Though alarming, it was more convenient for me because
    it had eliminated the task of going to the e-commerce site exclusively for purchasing.
    The search results are displayed in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![End of search](img/image00490.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We can take YouTube as an example. The suggestions on YouTube are becoming more
    and more relevant, so much so that the number of times we search for required
    information is getting less and less; we follow the suggestions that are recommended
    to get more information on related topics.
  prefs: []
  type: TYPE_NORMAL
- en: In the future, we will see more and more applications making use of this convergence
    theory to minimize the number of searches by users, and also of recommendation
    engines for personalized content discovery.
  prefs: []
  type: TYPE_NORMAL
- en: Leaving the Web behind
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Search engines and recommender systems are employed to enrich social experience
    as well as user experience by reaching out to the customers. More futuristic systems
    will continuously listen to their customers online and address their grievances
    at the earliest opportunity, even when their displeasure is being expressed on
    social sites. The following figure shows the motivation for futuristic recommendations
    - leaving the Web behind:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Leaving the Web behind](img/image00491.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: As an example, imagine you have expressed displeasure about your recent flight
    experience over Twitter by tagging the flight's official Twitter account; efforts
    will be made to listen to these concerns and reach out to customers personally
    to solve their problems. In addition to that, they may also please their customers
    with more personalized offers.
  prefs: []
  type: TYPE_NORMAL
- en: In the future, this approach may be followed by all organizations to listen
    to their customers' grievances or feedback on social platforms and reach out to
    customers with good recommendations or offers, which might be beneficial to both
    parties.
  prefs: []
  type: TYPE_NORMAL
- en: Emerging from the Web
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: New paradigms are evolving, such as Internet television replacing traditional
    television. Those times are gone when people had to wait to see their favorite
    programs at a predefined hour; instated people would wish to watch programs at
    a convenient time. Now times have changed; we are watching episodes at a time
    convenient to us on the Internet.
  prefs: []
  type: TYPE_NORMAL
- en: This change in the mindsets of people made business houses redesign their business
    models to increase their profits. For example, all the episodes of the Netflix
    series *House of Cards* were released together, breaking away from the traditional
    approach of one episode a week, which was a tremendous success and made other
    production houses follow suit.
  prefs: []
  type: TYPE_NORMAL
- en: The emergence of such business models is a result of the analysis of the viewing
    patterns of people.
  prefs: []
  type: TYPE_NORMAL
- en: Another interesting aspect of the *House of Cards* series is that the producers
    of *House of Cards*, Netflix, made use of big data analytics to analyze and understand
    the viewing patterns of its large user base, came up with a story comprising all
    the ingredients that viewers would love, and made a TV series. When it was released,
    the series was an instant hit.
  prefs: []
  type: TYPE_NORMAL
- en: This approach has made its way into other organizations to come up with more
    creations in order to improve customer experience.
  prefs: []
  type: TYPE_NORMAL
- en: 'As a result of the aforementioned shift in the motivation of recommendations,
    the context of recommendations is changing. Different people need different things
    at different times, with different people. The following figure depicts what was explained
    earlier:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Emerging from the Web](img/image00492.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'A person going on a vacation with family might have a set of requirements that
    is contradictory to the set of requirements for when the person is going on a
    vacation with friends. Similarly, the same person may have different requirements
    at the same time in two different places. For example, a person travelling for
    business purposes to many countries might have different requirements, as per
    the local conditions. A person who is in a tropical country may need cotton dresses,
    and the same person may need woollen dresses when in cold countries. The difference
    in preferences is elaborated in the following figure, where we can see different
    people, in different countries, with different people, at different times, wearing
    different dresses:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Emerging from the Web](img/image00493.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The futuristic recommender systems will continuously and actively listen to
    their users to cater to their requirements on the go.
  prefs: []
  type: TYPE_NORMAL
- en: Next best actions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Another type of futuristic recommender system would be the systems that are
    sophisticated enough to predict your next move and make relevant suggestions without
    you asking explicitly.
  prefs: []
  type: TYPE_NORMAL
- en: TARS, from the movie *Interstellar,* could be a reality soon, which may suggest
    the next best actions a human should take by considering all the information surrounding
    the person.
  prefs: []
  type: TYPE_NORMAL
- en: Though TARS would be the most sophisticated system, humanoid robots, which are
    already a reality, might work as the first-generation next-best-action prediction
    agents.
  prefs: []
  type: TYPE_NORMAL
- en: Use cases to look out for
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we will list a few promising use cases that might make you
    more interested in future of recommendation engines. Let's look at some good use
    cases for ubiquitous futuristic recommendations.
  prefs: []
  type: TYPE_NORMAL
- en: Smart homes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'IoT and recommender systems together form a very powerful combination to bring
    about futuristic recommendation engines. A fully digitized smart home would be
    the best use case, where in the future, your refrigerator may suggest your monthly
    grocery list on your mobile while you are at work, as in following image. Similarly,
    IoT-enabled recommendation engines are something to be watched out for in the
    future:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Smart homes](img/image00494.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Pic credits: http://walyou.com/smart-home-gadgets/'
  prefs: []
  type: TYPE_NORMAL
- en: Healthcare recommender systems
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Healthcare recommender systems form one of most exciting areas we have to watch
    out for. Researchers are focusing on how we can bring personalized healthcare
    to common people using advanced analytics. For instance, researchers at the University
    of Notre Dame have developed a system called **Collaborative Assessment and Recommendation
    Engine** (**CARE**), which uses a simple collaborative filtering that finds similar
    patients based on similarity of symptoms and generates probable risk profiles
    for individuals.
  prefs: []
  type: TYPE_NORMAL
- en: Consider the case of Proteus Digital Health Company, which uses an IoT-enabled
    device, an ingestible sensor, to track medical adherence. The device detects medication
    intake, tracks physiological data, and alerts the patient if he has skipped the
    tablet by mistake.
  prefs: []
  type: TYPE_NORMAL
- en: News as recommendations
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you observe Google News, you can see that a recommendation engine is working
    behind the scenes, continuously monitoring your click patterns, and combined with
    what is trending around you, a content-based personalized recommendation engine
    starts recommending news tailored for you:'
  prefs: []
  type: TYPE_NORMAL
- en: '![News as recommendations](img/image00495.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Taking a leaf from this application's book, many new companies, such as Reddit
    and Rigg, among others, are using recommendation engines to suggest news items
    or articles as recommendations.
  prefs: []
  type: TYPE_NORMAL
- en: Popular methodologies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In earlier chapters, we have seen various recommendation engines. In this section,
    we touch upon a few popular methodologies, which are actively been employed in
    building recommendation engines for improving the robustness and relevance of
    the recommendations, such as:'
  prefs: []
  type: TYPE_NORMAL
- en: Serendipity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Temporal aspects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A/B testing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Feedback mechanism
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Serendipity
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'One of the drawbacks of recommendation engines is that the recommendation engine
    will push us to a corner where the items to be suggested or discovered will be
    entirely based on what we have looked for in the past or what we are currently
    looking for:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Serendipity](img/image00496.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Credits: neighwhentheyrun'
  prefs: []
  type: TYPE_NORMAL
- en: 'They work just the way horse blinkers work: they protect the horse from getting
    distracted from their path. The more interactions we have on the website, the
    narrower and closer to the users'' profiles the recommendations tend to be. Is
    this wrong? No, absolutely not, but this is not how life works. If we turn back,
    most of the best discoveries of the past were made by chance. Surprises add spice
    to one''s life. The amount of joy we get when we unexpectedly find something we
    need cannot be expressed in words. This feature is missing in the current paradigm
    of accuracy-oriented recommender systems.'
  prefs: []
  type: TYPE_NORMAL
- en: By introducing serendipity and surprise to our recommender systems, we can reduce
    the aforementioned limitation. How do we introduce serendipity in the recommender
    systems?
  prefs: []
  type: TYPE_NORMAL
- en: Google News, before generating personalized news-article recommendations, will
    combine the trending news within a region or country. This enables users to get
    more news, which is trending around them, and they will also become interested
    in such news.
  prefs: []
  type: TYPE_NORMAL
- en: Temporal aspects of recommendation engines
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Consider the following scenario: a lady purchases items or looks for items
    related to pregnancy for almost 9 months. After the delivery of the baby, she
    will start looking for items related to a newborn. Our recommendation engines
    should be intelligent enough to capture this information, and as soon as the lady
    starts looking for items for newborns, the recommendation engine should remove
    the recommendations related to pregnancy as they are no longer relevant.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following image shows how the non-inclusion of temporal aspects of recommendation
    engines still recommends romantic books to a recently-turned monk:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Temporal aspects of recommendation engines](img/image00497.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Our choices are very time-specific; we may not like the things that we like
    today in the future. This aspect of time is often not considered while designing
    a recommendation engine. Our recommender systems capture every interaction of
    the user and accumulate large user preferences over a particular period. Since
    temporal information is inherent in user preferences, it is reasonable for a data
    scientist to exploit the temporal information to improve the relevance of the
    recommendation engine. A simple way of handling the temporal aspect is to give
    more weight to the most recent interactions, and less weight to old interactions
    while generating recommendations.
  prefs: []
  type: TYPE_NORMAL
- en: A/B testing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: What is the most important thing for any data scientist? The accuracy of the
    machine-learning model we have built to solve the problem at hand. How do we ensure
    whether the model is right or not? We usually perform evaluation metrics, most
    likely the cross-validation approach and error/evaluation metrics while building
    the model, to check model accuracy before deploying the model to production. Though
    we apply best practices while building a model, such as **RMSE**, precision-recall
    and cross-validation approaches, which you learned about in previous chapters, are
    evaluated on historical data. Once the model is deployed in production, only then
    do we come to know how good the model's performance is. Usually, there isn't a
    single solution for a problem.
  prefs: []
  type: TYPE_NORMAL
- en: 'While designing a recommendation engine, we should always keep in mind the
    following things:'
  prefs: []
  type: TYPE_NORMAL
- en: A way to evaluate the model's performance at real time
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Always use multiple models for generating recommendations, and choose the model
    best suited for the user groups
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following shows how a simple A/B testing mechanism can be deployed in a
    production scenario:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A/B testing](img/image00498.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: A/B testing comes to the rescue. In A/B testing, different sets of recommendations
    will be sent to different sets of users, and the performance of the recommendations
    will be evaluated at real time over a period. Though costly, A/B testing is an
    effective testing method to evaluate models in real time.
  prefs: []
  type: TYPE_NORMAL
- en: Feedback mechanism
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Having spoken about A/B testing evaluating the performance of the recommender
    systems at real-time, it is very important to design the recommender systems to
    include a feedback mechanism. This is done to send back to the user interactions
    on the recommendations generated to fine-tune the model features included during
    model creation.
  prefs: []
  type: TYPE_NORMAL
- en: 'One simple approach to include the feedback mechanism is discussed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Feedback mechanism](img/image00499.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Recall the content-based approach we used to generate recommendations. In the
    content-based approach, all the features are given equal weight. But we should
    be aware that not all features will be contributing equally to the recommendation
    model. To increase the accuracy of the model, we should enable a mechanism to
    calculate feature weights. Introduce a feedback mechanism to capture the user
    interactions on the recommendations, and then use this information to build a
    classification model to calculate the model feature weights.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we saw how recommendation engines are evolving and the motivations
    that are affecting the evolution of recommender systems, followed by a few potential
    use cases to watch out for. Finally, we touched upon some good methodologies,
    which should be considered before designing a recommender system. With this input,
    I'm sure that you are now equipped to confront the requirements of building future-ready
    recommendation engines which are self-learning, scalable, real-time, and futuristic.
    As mentioned in this chapter, deep learning can play a very important role in
    building more futuristic recommender systems.
  prefs: []
  type: TYPE_NORMAL
