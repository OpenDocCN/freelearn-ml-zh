["```py\nimg = cv2.imread(\"test.jpg\")kernel = np.array(([-1, -1, -1], [-1, 8, -1], [-1, -1, -1]))dst = cv2.filter2D(img,-1,kernel)cv2.imshow(\"Kernel\", cv2.hconcat([img, dst]))cv2.waitKey(0)\n```", "```py\npip install tensorflow\npip install keras\n```", "```py\npip install tensorflow-gpu\n```", "```py\nimport tensorflow as tf\nprint(\"TensorFlow:\", tf.__version__)\nprint(\"TensorFlow Git:\", tf.version.GIT_VERSION)\n```", "```py\nTensorFlow: 2.1.0\nTensorFlow Git: v2.1.0-rc2-17-ge5bf8de410\n```", "```py\nprint(\"CUDA ON\" if tf.test.is_built_with_cuda() else \"CUDA OFF\")print(\"GPU ON\" if tf.test.is_gpu_available() else \"GPU OFF\")\n```", "```py\nfrom keras.datasets import mnist\n(x_train, y_train), (x_test, y_test) = mnist.load_data()\nx_train = np.reshape(x_train, np.append(x_train.shape, (1)))\nx_test = np.reshape(x_test, np.append(x_test.shape, (1)))\n```", "```py\nprint('X Train', x_train.shape, ' - X Test', x_test.shape)print('Y Train', y_train.shape, ' - Y Test', y_test.shape)\n```", "```py\nX Train (60000, 28, 28, 1)  - X Test (10000, 28, 28, 1)Y Train (60000,)  - Y Test (10000,)\n```", "```py\nx_train = x_train.astype('float32')x_test = x_test.astype('float32')x_train /= 255 x_test /= 255\n```", "```py\nprint(\"One hot encoding: \", keras.utils.to_categorical([0, 1, 2], 10))\n```", "```py\nlabels = ['Dog', 'Cat', 'Fish']\nprint(\"One hot encoding 'Cat': \", keras.utils.to_categorical(labels.index('Cat'), 10))\n```", "```py\nmodel = Sequential()\n```", "```py\nmodel.add(Conv2D(filters=6, kernel_size=(5, 5),\n   activation='relu', padding='same',\n   input_shape=x_train.shape[1:]))\n```", "```py\nmodel.add(MaxPooling2D())\n```", "```py\nmodel.add(Conv2D(filters=16, kernel_size=(5,5), activation='relu'))\nmodel.add(MaxPooling2D())\n```", "```py\nmodel.add(Flatten())model.add(Dense(units=120, activation='relu'))model.add(Dense(units=84, activation='relu'))model.add(Dense(units=num_classes, activation='softmax'))\n```", "```py\nmodel.summary()\n```", "```py\n_______________________________________________________________\nLayer (type)                 Output Shape              Param #   \n===============================================================\nconv2d_1 (Conv2D)            (None, 28, 28, 6)         156       \n_______________________________________________________________\nmax_pooling2d_1 (MaxPooling2 (None, 14, 14, 6)         0         \n_______________________________________________________________\nconv2d_2 (Conv2D)            (None, 10, 10, 16)        2416      \n_______________________________________________________________\nmax_pooling2d_2 (MaxPooling2 (None, 5, 5, 16)          0         \n_______________________________________________________________\nflatten_1 (Flatten)          (None, 400)               0         \n_______________________________________________________________\ndense_1 (Dense)              (None, 120)               48120     \n_______________________________________________________________\ndense_2 (Dense)              (None, 84)                10164     \n_______________________________________________________________\ndense_3 (Dense)              (None, 10)                850       \n===============================================================\nTotal params: 61,706\nTrainable params: 61,706\nNon-trainable params: 0\n```", "```py\nmodel.compile(loss=categorical_crossentropy, optimizer=Adam(),    metrics=['accuracy'])\n```", "```py\nhistory = model.fit(x_train, y_train, batch_size=16,    epochs=5, validation_data=(x_test, y_test), shuffle=True)\n```", "```py\nprint(\"Min Loss:\", min(history.history['loss']))\nprint(\"Min Val. Loss:\", min(history.history['val_loss']))\nprint(\"Max Accuracy:\", max(history.history['accuracy']))\nprint(\"Max Val. Accuracy:\", max(history.history['val_accuracy']))\n```", "```py\nMin Loss: 0.054635716760404344\nMin Validation Loss: 0.05480437679834067\nMax Accuracy: 0.9842833\nMax Validation Accuracy: 0.9835000038146973\n```", "```py\nplt.plot(history_object.history['loss'])\nplt.plot(history_object.history['val_loss'])\nplt.plot(history_object.history['accuracy'])\nplt.plot(history_object.history['val_accuracy'])\nplt.title('model mean squared error loss')\nplt.ylabel('mean squared error loss')\nplt.xlabel('epoch')\nplt.legend(['T loss', 'V loss', 'T acc', 'V acc'], loc='upper left')\nplt.show()\n```", "```py\n(x_train, y_train), (x_test, y_test) = cifar10.load_data()\n```", "```py\nX Train (50000, 32, 32, 3)  - X Test (10000, 32, 32, 3)\nY Train (50000, 1)  - Y Test (10000, 1)\n```", "```py\nuse_mnist = False\n```", "```py\n_______________________________________________________________\nLayer (type)                 Output Shape              Param #   \n===============================================================\nconv2d_1 (Conv2D)            (None, 32, 32, 6)         456       \n_______________________________________________________________\nmax_pooling2d_1 (MaxPooling2 (None, 16, 16, 6)         0         \n_______________________________________________________________\nconv2d_2 (Conv2D)            (None, 12, 12, 16)        2416      \n_______________________________________________________________\nmax_pooling2d_2 (MaxPooling2 (None, 6, 6, 16)          0         \n_______________________________________________________________\nflatten_1 (Flatten)          (None, 576)               0         \n_______________________________________________________________\ndense_1 (Dense)              (None, 120)               69240     \n_______________________________________________________________\ndense_2 (Dense)              (None, 84)                10164     \n_______________________________________________________________\ndense_3 (Dense)              (None, 10)                850       \n===============================================================\nTotal params: 83,126\nTrainable params: 83,126\nNon-trainable params: 0\n```", "```py\nMin Loss: 1.2048443819999695\nMin Validation Loss: 1.2831668125152589\nMax Accuracy: 0.57608\nMax Validation Accuracy: 0.5572999715805054\n```", "```py\nMin Loss: 1.011266466407776\nMin Validation Loss: 1.3062725918769837\nMax Accuracy: 0.6473\nMax Validation Accuracy: 0.5583999752998352\n```", "```py\nmodel.add(Conv2D(filters=64, kernel_size=(3, 3), activation='relu', input_shape=x_train.shape[1:]))\nmodel.add(AveragePooling2D())\nmodel.add(Conv2D(filters=256, kernel_size=(3, 3), activation='relu'))\nmodel.add(AveragePooling2D())\nmodel.add(Flatten())\nmodel.add(Dense(units=512, activation='relu'))\nmodel.add(Dense(units=256, activation='relu'))\nmodel.add(Dense(units=num_classes, activation = 'softmax'))\n```", "```py\n_______________________________________________________________\nLayer (type)                 Output Shape              Param #   \n===============================================================\nconv2d_1 (Conv2D)            (None, 30, 30, 64)        1792      \n_______________________________________________________________\naverage_pooling2d_1 (Average (None, 15, 15, 64)        0         \n_______________________________________________________________\nconv2d_2 (Conv2D)            (None, 13, 13, 256)       147712    \n_______________________________________________________________\naverage_pooling2d_2 (Average (None, 6, 6, 256)         0         \n_______________________________________________________________\nflatten_1 (Flatten)          (None, 9216)              0         \n_______________________________________________________________\ndense_1 (Dense)              (None, 512)               4719104   \n_______________________________________________________________\ndense_2 (Dense)              (None, 256)               131328    \n_______________________________________________________________\ndense_3 (Dense)              (None, 10)                2570      \n===============================================================\nTotal params: 5,002,506\nTrainable params: 5,002,506\nNon-trainable params: 0\n```", "```py\nMin Loss: 0.23179266978245228\nMin Validation Loss: 1.0802633233070373\nMax Accuracy: 0.92804\nMax Validation Accuracy: 0.65829998254776\n```", "```py\ncheckpoint = ModelCheckpoint('cifar-10.h5', monitor='val_loss', mode='min', verbose=1, save_best_only=True)\n```", "```py\nhistory_object = model.fit(x_train, y_train, batch_size=batch_size, epochs=epochs, validation_data=(x_test, y_test), shuffle=True, callbacks=[checkpoint])\n```"]