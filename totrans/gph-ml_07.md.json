["```py\nJupyter==1.0.0\nnetworkx==2.5\nkarateclub==1.0.19\nscikit-learn==0.24.0\npandas==1.1.3\nnode2vec==0.3.3\nnumpy==1.19.2\ntensorflow==2.4.1\nstellargraph==1.2.1\ncommunities==2.2.0\ngit+https://github.com/palash1992/GEM.git \n```", "```py\nimport networkx as nx\nedges = [[1,3],[2,3],[2,4],[4,5],[5,6],[5,7]]\n G = nx.from_edgelist(edges)\n preds = nx.resource_allocation_index(G,[(1,2),(2,5),(3,4)])\n```", "```py\n[(1, 2, 0.5), (2, 5, 0.5), (3, 4, 0.5)]\n```", "```py\nimport networkx as nx\nedges = [[1,3],[2,3],[2,4],[4,5],[5,6],[5,7]]\n G = nx.from_edgelist(edges)\n preds = nx.resource_allocation_index(G,[(1,2),(2,5),(3,4)])\n```", "```py\n[(1, 2, 0.5), (2, 5, 0.25), (3, 4, 0.3333333333333333)]\n```", "```py\nimport networkx as nx\nedges = [[1,3],[2,3],[2,4],[4,5],[5,6],[5,7]]\n G = nx.from_edgelist(edges)\n\nG.nodes[1][\"community\"] = 0\nG.nodes[2][\"community\"] = 0\nG.nodes[3][\"community\"] = 0\nG.nodes[4][\"community\"] = 1\nG.nodes[5][\"community\"] = 1\nG.nodes[6][\"community\"] = 1\nG.nodes[7][\"community\"] = 1\npreds = nx.cn_soundarajan_hopcroft(G,[(1,2),(2,5),(3,4)])\n```", "```py\n[(1, 2, 2), (2, 5, 1), (3, 4, 1)]\n```", "```py\nimport networkx as nx\nedges = [[1,3],[2,3],[2,4],[4,5],[5,6],[5,7]]\n G = nx.from_edgelist(edges)\n\nG.nodes[1][\"community\"] = 0\nG.nodes[2][\"community\"] = 0\nG.nodes[3][\"community\"] = 0\nG.nodes[4][\"community\"] = 1\nG.nodes[5][\"community\"] = 1\nG.nodes[6][\"community\"] = 1\nG.nodes[7][\"community\"] = 1\npreds = nx. ra_index_soundarajan_hopcroft(G,[(1,2),(2,5),(3,4)])\n```", "```py\n[(1, 2, 0.5), (2, 5, 0), (3, 4, 0)]\n```", "```py\nimport networkx as nx\nimport pandas as pd\nedgelist = pd.read_csv(\"cora.cites\", sep='\\t', header=None, names=[\"target\", \"source\"])\nG = nx.from_pandas_edgelist(edgelist)\n```", "```py\nfrom stellargraph.data import EdgeSplitter\nedgeSplitter = EdgeSplitter(G)\n graph_test, samples_test, labels_test = edgeSplitter.train_test_split(p=0.1, method=\"global\")\n```", "```py\nedgeSplitter = EdgeSplitter(graph_test, G)\n graph_train, samples_train, labels_train = edgeSplitter.train_test_split(p=0.1, method=\"global\")\n```", "```py\nfrom node2vec import Node2Vec\nfrom node2vec.edges import HadamardEmbedder\nnode2vec = Node2Vec(graph_train)\n model = node2vec.fit()\nedges_embs = HadamardEmbedder(keyed_vectors=model.wv)\n train_embeddings = [edges_embs[str(x[0]),str(x[1])] for x in samples_train]\n```", "```py\nedges_embs = HadamardEmbedder(keyed_vectors=model.wv)\n test_embeddings = [edges_embs[str(x[0]),str(x[1])] for x in samples_test]\n```", "```py\nfrom sklearn.ensemble import RandomForestClassifier\nrf = RandomForestClassifier(n_estimators=1000)\n rf.fit(train_embeddings, labels_train);\n```", "```py\nfrom sklearn import metrics\ny_pred = rf.predict(test_embeddings)\n print('Precision:', metrics.precision_score(labels_test, y_pred))\n print('Recall:', metrics.recall_score(labels_test, y_pred))\n print('F1-Score:', metrics.f1_score(labels_test, y_pred))\n```", "```py\nPrecision: 0.8557114228456913\nRecall: 0.8102466793168881\nF1-Score: 0.8323586744639375\n```", "```py\nimport networkx as nx \nG = nx.barbell_graph(m1=10, m2=4) \n```", "```py\nfrom gem.embedding.hope import HOPE \ngf = HOPE(d=4, beta=0.01) \ngf.learn_embedding(G) \n embeddings = gf.get_embedding() \n```", "```py\nfrom sklearn.mixture import GaussianMixture\ngm = GaussianMixture(n_components=3, random_state=0)\n labels = gm.fit_predict(embeddings)\n```", "```py\ncolors = [\"blue\", \"green\", \"red\"]\nnx.draw_spring(G, node_color=[colors[label] for label in labels])\n```", "```py\nfrom communities.algorithms import spectral_clustering\nadj=np.array(nx.adjacency_matrix(G).todense())\ncommunities = spectral_clustering(adj, k=2)\n```", "```py\nfrom sklearn.decomposition import NMF\nnmf = NMF(n_components=2)\n score = nmf.fit_transform(adj)\ncommunities = [set(np.where(score [:,ith]>0)[0])\n               for ith in range(2)]\n```", "```py\nfrom communities.algorithms import louvain_method\ncommunities = louvain_method(adj) \n```", "```py\nfrom communities.algorithms import girvan_newman\ncommunities = girvan_newman(adj, n=2)\n```"]