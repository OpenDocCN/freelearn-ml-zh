- en: '1'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '1'
- en: Understanding H2O AutoML Basics
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 H2O AutoML 基础
- en: '**Machine Learning** (**ML**) is the process of building analytical or statistical
    models using computer systems that learn from historical data and identify patterns
    in them. These systems then use these patterns and try to make predictive decisions
    that can provide value to businesses and research alike. However, the sophisticated
    mathematical knowledge required to implement an ML system that can provide any
    concrete value has discouraged several people from experimenting with it, leaving
    tons of undiscovered potential that they could have benefited from.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**机器学习**（**ML**）是使用计算机系统构建分析或统计模型的过程，这些系统通过学习历史数据并从中识别模式。然后，这些系统使用这些模式并尝试做出预测性决策，这些决策可以为企业和研究提供价值。然而，实现一个能够提供任何具体价值的
    ML 系统所需的复杂数学知识已经阻止了很多人尝试它，留下了大量他们本可以从中受益的未发现潜力。'
- en: '**Automated Machine Learning** (**AutoML**) is one of the latest ML technologies
    that has accelerated the adoption of ML by organizations of all sizes. It is the
    process of automating all these complex tasks involved in the ML life cycle. AutoML
    hides away all these complexities and automates them behind the scenes. This allows
    anyone to easily implement ML without any hassle and focus more on the results.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '**自动化机器学习**（**AutoML**）是最新 ML 技术之一，它加速了所有规模的组织对 ML 的采用。它是自动所有这些涉及 ML 生命周期复杂任务的过程。AutoML
    将所有这些复杂性隐藏起来并在幕后自动化它们。这使得任何人都可以轻松实现 ML 而无需任何麻烦，并更多地关注结果。'
- en: In this chapter, we will learn about one such AutoML technology by H2O.ai ([https://www.h2o.ai/](https://www.h2o.ai/)),
    which is simply named H2O AutoML. We will provide a brief history of AutoML in
    general and what problems it solves, as well as a bit about H2O.ai and its H2O
    AutoML technology. Then, we will code a simple ML implementation using H2O’s AutoML
    technology and build our first ML model.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章，我们将学习 H2O.ai（[https://www.h2o.ai/](https://www.h2o.ai/））提供的一种 AutoML 技术，它简单地命名为
    H2O AutoML。我们将提供 AutoML 的一般历史和它解决的问题的简要介绍，以及关于 H2O.ai 及其 H2O AutoML 技术的一些信息。然后，我们将使用
    H2O 的 AutoML 技术编写一个简单的 ML 实现并构建我们的第一个 ML 模型。
- en: By the end of this chapter, you will understand what exactly AutoML is, the
    company H2O.ai, and its technology H2O AutoML. You will also understand what minimum
    requirements are needed to use H2O AutoML, as well as how easy it is to train
    your very first ML model using H2O AutoML without having to understand any complex
    mathematical rocket science.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将了解 AutoML 究竟是什么，H2O.ai 公司及其技术 H2O AutoML，以及使用 H2O AutoML 需要的最小要求。你还将了解如何使用
    H2O AutoML 训练你的第一个 ML 模型，而无需理解任何复杂的数学火箭科学。
- en: 'In this chapter, we are going to cover the following topics:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将涵盖以下主题：
- en: Understanding AutoML and H2O AutoML
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解 AutoML 和 H2O AutoML
- en: Minimum system requirements to use H2O AutoML
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 H2O AutoML 的最小系统要求
- en: Installing Java
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 Java
- en: Basic implementation of H2O using Python
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Python 的 H2O 的基本实现
- en: Basic implementation of H2O using R
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 R 的 H2O 的基本实现
- en: Training your first ML model using H2O AutoML
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 H2O AutoML 训练你的第一个 ML 模型
- en: Technical requirements
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'For this chapter, you will need the following:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本章，你需要以下内容：
- en: A decent web browser (Chrome, Firefox, or Edge), the latest version of your
    preferred web browser.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个不错的网络浏览器（Chrome、Firefox 或 Edge），你首选浏览器的最新版本。
- en: An **Integrated Development Environment** (**IDE**) of your choice
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你选择的 **集成开发环境**（**IDE**）
- en: Jupyter Notebook by Project Jupyter ([https://jupyter.org/](https://jupyter.org/))
    (optional)
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Project Jupyter 的 Jupyter Notebook ([https://jupyter.org/](https://jupyter.org/))（可选）
- en: All the code examples for this chapter can be found on GitHub at [https://github.com/PacktPublishing/Practical-Automated-Machine-Learning-on-H2O/tree/main/Chapter%201](https://github.com/PacktPublishing/Practical-Automated-Machine-Learning-on-H2O/tree/main/Chapter%201).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的所有代码示例都可以在 GitHub 上找到，链接为 [https://github.com/PacktPublishing/Practical-Automated-Machine-Learning-on-H2O/tree/main/Chapter%201](https://github.com/PacktPublishing/Practical-Automated-Machine-Learning-on-H2O/tree/main/Chapter%201)。
- en: Understanding AutoML and H2O AutoML
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 AutoML 和 H2O AutoML
- en: Before we begin our journey with H2O AutoML, it is important to understand what
    exactly AutoML is and what part it plays in the entire ML pipeline. In this section,
    we will try to understand the various steps involved in the ML pipeline and where
    AutoML fits into it. Then, we will explore what makes H2O’s AutoML so unique among
    the various AutoML technologies.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始使用H2O AutoML的旅程之前，了解AutoML究竟是什么以及它在整个机器学习（ML）流程中扮演什么角色是非常重要的。在本节中，我们将尝试理解ML流程中涉及的各个步骤以及AutoML如何融入其中。然后，我们将探讨是什么使得H2O的AutoML在众多AutoML技术中如此独特。
- en: Let’s start by learning a bit about AutoML in general.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先了解一下AutoML的一般概念。
- en: AutoML
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: AutoML
- en: 'AutoML is the process of automating the various steps that are performed while
    developing a viable ML system for predictions. A typical ML pipeline consists
    of the following steps:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: AutoML是一个自动化过程，用于在开发用于预测的有效ML系统时执行的各种步骤。一个典型的ML流程包括以下步骤：
- en: '**Data Collection**: This is the very first step in an ML pipeline. Data is
    collected from various sources. The sources can generate different types of data,
    such as categorical, numeric, textual, time series, or even visual and auditory
    data. All these types of data are aggregated together based on the requirements
    and are merged into a common structure. This could be a comma-separated value
    file, a parquet file, or even a table from a database.'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**数据收集**：这是ML流程中的第一步。数据从各种来源收集。这些来源可以生成不同类型的数据，如分类数据、数值数据、文本数据、时间序列数据，甚至视觉和听觉数据。所有这些类型的数据根据需求聚合在一起，并合并成一个共同的结构。这可能是一个逗号分隔值文件、一个parquet文件，甚至是一个数据库的表格。'
- en: '**Data Exploration**: Once data has been collected, it is explored using basic
    analytical techniques to identify what it contains, the completeness and correctness
    of the data, and if the data shows potential patterns that can build a model.'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**数据探索**：一旦收集到数据，就会使用基本的分析技术对其进行探索，以确定其包含的内容、数据的完整性和正确性，以及数据是否显示出可以构建模型的潜在模式。'
- en: '**Data Preparation**: Missing values, duplicates, and noisy data can all affect
    the quality of the model as they introduce incorrect learning. Hence, the raw
    data that is collected and explored needs to be pre-processed to remove all anomalies
    using specific data processing methods.'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**数据准备**：缺失值、重复数据和噪声数据都可能影响模型的质量，因为它们引入了错误的学习。因此，收集和探索的原始数据需要通过特定的数据处理方法进行预处理，以消除所有异常。'
- en: '**Data Transformation**: A lot of ML models work with different types of data.
    Some can work with categorical data, while some can only work with numeric data.
    That is why you may need to convert certain types of data from one form into the
    other. This allows the dataset to be fed properly during model training.'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**数据转换**：许多ML模型可以处理不同类型的数据。一些可以处理分类数据，而另一些只能处理数值数据。这就是为什么你可能需要将某些类型的数据从一种形式转换为另一种形式。这允许在模型训练期间正确地提供数据集。'
- en: '**Model Selection**: Once the dataset is ready, an ML model is selected to
    be trained. The model is chosen based on what type of data the dataset contains,
    what information is to be extracted from the dataset, as well as which model suits
    the data.'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**模型选择**：一旦数据集准备就绪，就需要选择一个ML模型进行训练。模型的选择基于数据集包含的数据类型、需要从数据集中提取的信息以及哪种模型适合数据。'
- en: '**Model Training**: This is where the model is trained. The ML system will
    learn from the processed dataset and create a model. This training can be influenced
    by several factors, such as data attribute weighting, learning rate, and other
    hyperparameters.'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**模型训练**：这是模型被训练的地方。ML系统将从处理后的数据集中学习并创建一个模型。这种训练可以受到多个因素的影响，例如数据属性加权、学习率和其他超参数。'
- en: '**Hyperparameter Tuning**: Apart from model training, another factor that needs
    to be considered is the model’s architecture. The model’s architecture depends
    on the type of algorithm used, such as the number of trees in a random forest
    or neurons in a neural network. We don’t immediately know which architecture is
    optimal for a given model, so experimentation is needed. The parameters that define
    the architecture of a model are called hyperparameters; finding the best combination
    of hyperparameter values is known as **hyperparameter tuning**.'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**超参数调整**：除了模型训练之外，还需要考虑模型的架构。模型的架构取决于所使用的算法类型，例如随机森林中的树的数量或神经网络中的神经元数量。我们并不立即知道哪种架构对给定的模型是最优的，因此需要进行实验。定义模型架构的参数称为超参数；找到最佳的超参数值组合被称为**超参数调整**。'
- en: '**Prediction**: The final step of the ML pipeline is prediction. Based on the
    patterns in the dataset that were learned by the model during training, the model
    can now make a generalized prediction on unseen data.'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**预测**：机器学习管道的最终步骤是预测。基于模型在训练期间学习到的数据集模式，模型现在可以对未见数据做出一般化的预测。'
- en: For non-experts, all these steps and their complexities can be overwhelming.
    Every step in the ML pipeline process has been developed over years of research
    and there are vast topics within themselves. AutoML is the process that automates
    the majority of these steps, from data exploration to hyperparameter tuning, and
    provides the best possible models to make predictions on. This helps companies
    focus on solving real-world problems with results rather than ML processes and
    workflows.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 对于非专业人士来说，所有这些步骤及其复杂性可能会令人感到压倒。机器学习管道过程中的每个步骤都是经过多年研究开发的，并且其中包含着广泛的主题。AutoML
    是自动化这些步骤的大多数过程的过程，从数据探索到超参数调整，并提供最佳模型进行预测。这有助于公司专注于用结果解决现实世界问题，而不是机器学习过程和工作流程。
- en: Now that you understand the different steps in an ML pipeline and how the steps
    are automated by AutoML, let’s see why H2O’s AutoML technology is one of the leading
    technologies in the industry.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经了解了机器学习管道中的不同步骤以及这些步骤是如何被 AutoML 自动化的，让我们来看看为什么 H2O 的 AutoML 技术是行业领先技术之一。
- en: H2O AutoML
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: H2O AutoML
- en: H2O AutoML is an AutoML software technology developed by H2O.ai that simplifies
    how ML systems are developed by providing user-friendly interfaces that help non-experts
    experiment with ML. It is an in-memory, distributed, fast, and scalable ML and
    analytics platform that works on big data and can be used for enterprise needs.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: H2O AutoML 是由 H2O.ai 开发的一种 AutoML 软件技术，通过提供用户友好的界面，帮助非专业人士进行机器学习实验，从而简化了机器学习系统的开发过程。它是一个内存中、分布式、快速且可扩展的机器学习和分析平台，适用于大数据，并且可以满足企业需求。
- en: It is written in Java and uses key-value storage to access data, models, and
    other ML objects that are involved. It runs on a cluster system and uses the multi-threaded
    MapReduce framework to parallelize data operations. It is also easy to communicate
    with it as it uses simple REST APIs. Finally, it has a web interface that provides
    a detailed graphical view of data and model details.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 它是用 Java 编写的，并使用键值存储来访问数据、模型和其他涉及的机器学习对象。它运行在集群系统上，并使用多线程 MapReduce 框架来并行化数据操作。它还很容易与之通信，因为它使用简单的
    REST API。最后，它有一个提供数据细节和模型详细信息的图形视图的网页界面。
- en: Not only does H2O AutoML automate the majority of the sophisticated steps involved
    in the ML life cycle, but it also provides a lot of flexibility for even expert
    data scientists to implement specialized model training processes. H2O AutoML
    provides a simple wrapper function that encapsulates several of the model training
    tasks that would otherwise be complicated to orchestrate. It also has extensive
    explainability functions that can describe the various details of the model training
    life cycle. This provides easy-to-export details of the models that users can
    use to explain the performance and justifications of the models that have been
    trained.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: H2O AutoML 不仅自动化了机器学习生命周期中涉及的大多数复杂步骤，还为即使是专家数据科学家实施专门的模型训练过程提供了很多灵活性。H2O AutoML
    提供了一个简单的包装函数，封装了几个原本需要复杂编排的模型训练任务。它还拥有广泛的可解释性功能，可以描述模型训练生命周期的各种细节。这为用户提供易于导出的模型细节，用户可以使用这些细节来解释已训练模型的性能和合理性。
- en: The best part about H2O AutoML is that it is entirely open source. You can find
    H2O’s source code at [https://github.com/h2oai](https://github.com/h2oai). It
    is actively maintained by a community of developers serving in both open as well
    as closed sources companies. At the time of writing, it is on its third major
    version, which indicates that it is quite a mature technology and is feature-intensive
    – that is, it supports several major companies in the world. It also supports
    several programming languages, including R, Scala, Python, and Java, that can
    run on several operating systems and provides support for a wide variety of data
    sources that are involved in the ML life cycle, such as Hadoop Distributed File
    System, Hive, Amazon S3, and even **Java Database Connectivity** (**JDBC**).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: H2O AutoML最好的部分是它是完全开源的。您可以在[https://github.com/h2oai](https://github.com/h2oai)找到H2O的源代码。它由一个在开源和闭源公司中服务的开发者社区积极维护。在撰写本文时，它处于第三个主要版本，这表明它是一个非常成熟的技术，并且功能丰富——也就是说，它支持世界上几家主要公司。它还支持包括R、Scala、Python和Java在内的多种编程语言，这些语言可以在多个操作系统上运行，并为涉及机器学习生命周期的各种数据源提供支持，例如Hadoop分布式文件系统、Hive、Amazon
    S3，甚至**Java数据库连接**（**JDBC**）。
- en: Now that you understand the basics of AutoML and how powerful H2O AutoML is,
    let’s see what the minimum requirements are for a system to run H2O AutoML without
    any performance issues.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经了解了AutoML的基本知识以及H2O AutoML的强大功能，让我们看看系统运行H2O AutoML而不出现性能问题的最低要求。
- en: Minimum system requirements to use H2O AutoML
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用H2O AutoML的最小系统要求
- en: 'H2O is very easy to install, but certain minimum standard requirements need
    to be met for it to run smoothly and efficiently. The following are some of the
    minimum requirements needed by H2O in terms of hardware capabilities, along with
    other software support:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: H2O安装非常简单，但要确保它运行顺畅和高效，需要满足某些最低标准要求。以下是一些H2O在硬件能力方面所需的最低要求，以及其他软件支持：
- en: 'The minimum hardware required by H2O is as follows:'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: H2O所需的最小硬件如下：
- en: '**Memory**: H2O runs on an in-memory architecture, so it is limited by the
    physical memory of the system that uses it. Thus, to be able to process huge chunks
    of data, the more memory the system, has the better.'
  id: totrans-43
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**内存**：H2O运行在内存架构上，因此它受限于使用它的系统的物理内存。因此，为了能够处理大量数据，系统拥有的内存越多越好。'
- en: '**Central Processing Unit** (**CPU**): By default, H2O will use the maximum
    available CPUs of the system. However, at a minimum, it will need 4 CPUs.'
  id: totrans-44
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**中央处理器**（**CPU**）：默认情况下，H2O将使用系统可用的最大CPU数量。然而，至少需要4个CPU。'
- en: '**Graphical Processing Unit** (**GPU**): GPU support is only available for
    XGBoost models in AutoML if the GPUs are NVIDIA GPUs (GPU Cloud, DGX Station,
    DGX-1, or DGX-2) or if it is a CUDA 8 GPU.'
  id: totrans-45
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**图形处理单元**（**GPU**）：如果GPU是NVIDIA GPU（GPU Cloud，DGX Station，DGX-1或DGX-2）或CUDA
    8 GPU，则AutoML中的XGBoost模型才支持GPU。'
- en: 'The operating systems that support H2O are as follows:'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持H2O的操作系统如下：
- en: '**Ubuntu 12.04**'
  id: totrans-47
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Ubuntu 12.04**'
- en: '**OS X 10.9 or later**'
  id: totrans-48
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**OS X 10.9或更高版本**'
- en: '**Windows 7 or later**'
  id: totrans-49
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Windows 7或更高版本**'
- en: '**CentOS 6 or later**'
  id: totrans-50
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CentOS 6或更高版本**'
- en: 'The programming languages that support H2O are as follows:'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持H2O的编程语言如下：
- en: '**Java**: Java is mandatory for H2O. H2O requires a 64-bit JDK to build H2O
    and a 64-bit JRE to run its binary:'
  id: totrans-52
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Java**：Java是H2O的强制要求。H2O构建需要64位JDK，运行其二进制文件需要64位JRE：'
- en: '**Java versions supported**: Java SE 15, 14, 13, 12, 11, 10, 9, and 8'
  id: totrans-53
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**支持的Java版本**：Java SE 15，14，13，12，11，10，9和8'
- en: '**Other Languages**: The following languages are only required if H2O is being
    run in those environments:'
  id: totrans-54
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**其他语言**：以下语言仅在H2O在这些环境中运行时需要：'
- en: Python 2.7.x, 3.5.x, or 3.6.x
  id: totrans-55
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 2.7.x，3.5.x或3.6.x
- en: Scala 2.10 or later
  id: totrans-56
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Scala 2.10或更高版本
- en: R version 3 or later
  id: totrans-57
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: R版本3或更高版本
- en: '**Additional requirements**: The following requirements are only needed if
    H2O is being run in these environments:'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**附加要求**：以下要求仅在H2O在这些环境中运行时需要：'
- en: '**Hadoop**: Cloudera CDH 5.4 or later, Hortonworks HDP 2.2 or later, MapR 4.0
    or later, or IBM Open Platform 4.2'
  id: totrans-59
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Hadoop**：Cloudera CDH 5.4或更高版本，Hortonworks HDP 2.2或更高版本，MapR 4.0或更高版本，或IBM
    Open Platform 4.2'
- en: '**Conda**: 2.7, 3.5, or 3.6'
  id: totrans-60
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Conda**：2.7，3.5或3.6'
- en: '**Spark**: Version 2.1, 2.2, or 2.3'
  id: totrans-61
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Spark**：版本2.1，2.2或2.3'
- en: Once we have a system that meets the minimum requirements, we need to focus
    on H2O’s functional dependencies on other software. H2O has only one dependency
    and that is Java. Let’s see why Java is important for H2O and how we can download
    and install the correct supported Java version.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们有一个满足最低要求的系统，我们需要关注 H2O 对其他软件的功能依赖。H2O 只有一个依赖项，那就是 Java。让我们看看为什么 Java 对
    H2O 很重要，以及我们如何下载和安装正确的支持 Java 版本。
- en: Installing Java
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 Java
- en: H2O’s core code is written in Java. It needs **Java Runtime Environment** (**JRE**)
    installed in your system to spin up an H2O server cluster. H2O also trains all
    the ML algorithms in a multi-threaded manner, which uses the Java Fork/Join framework
    on top of its MapReduce framework. Hence, having the latest Java version that
    is compatible with H2O to run H2O smoothly is highly recommended.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: H2O 的核心代码是用 Java 编写的。它需要在你的系统中安装 **Java 运行环境**（**JRE**）来启动 H2O 服务器集群。H2O 还以多线程方式训练所有机器学习算法，这在其
    MapReduce 框架之上使用了 Java Fork/Join 框架。因此，拥有与 H2O 兼容的最新 Java 版本以顺畅运行 H2O 非常推荐。
- en: You can install the latest stable version of Java from [https://www.oracle.com/java/technologies/downloads/](https://www.oracle.com/java/technologies/downloads/).
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从 [https://www.oracle.com/java/technologies/downloads/](https://www.oracle.com/java/technologies/downloads/)
    下载并安装最新稳定的 Java 版本。
- en: When installing Java, it is important to be aware of which bit version your
    system runs on. If it is a 64-bit version, then make sure you are installing the
    64-bit Java version for your operating system. If it is 32-bit, then go for the
    32-bit version.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装 Java 时，重要的是要知道你的系统运行的是哪种位版本。如果是 64 位版本，那么请确保你正在安装适用于你操作系统的 64 位 Java 版本。如果是
    32 位，那么选择 32 位版本。
- en: Now that we have installed the correct Java version, we can download and install
    H2O. Let’s look at a simple example of how we can do that using Python.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装了正确的 Java 版本，我们可以下载并安装 H2O。让我们看看如何使用 Python 来完成这个简单的示例。
- en: Basic implementation of H2O using Python
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Python 的 H2O 基本实现
- en: Python is one of the most popular languages in the ML field of computer programming.
    It is widely used in all industries and has tons of actively maintained ML libraries
    that provide a lot of support in creating ML pipelines.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: Python 是计算机编程中机器学习（ML）领域最受欢迎的语言之一。它在所有行业中都得到广泛应用，并且拥有大量活跃维护的 ML 库，为创建 ML 管道提供了大量支持。
- en: We will start by installing the Python programming language and then installing
    H2O using Python.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先安装 Python 编程语言，然后使用 Python 安装 H2O。
- en: Installing Python
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 Python
- en: Installing Python is very straightforward. It does not matter whether it is
    Python 2.7 or Python 3 and above as H2O works completely fine with both versions
    of the language. However, if you are using anything older than Python 2.7, then
    you will need to upgrade your version.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 安装 Python 非常简单。无论是 Python 2.7 还是 Python 3 及以上版本，H2O 都可以与这两种语言版本完美兼容。然而，如果你使用的是
    Python 2.7 以下的版本，那么你需要升级你的版本。
- en: 'It is best to go with Python 3 as it is the current standard and Python 2.7
    is outdated. Along with Python, you will also need `pip`, Python’s package manager.
    Now, let’s learn how to install Python on various operating systems:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 最好是使用 Python 3，因为它是当前的标准，Python 2.7 已经过时。除了 Python 之外，你还需要 `pip`，Python 的包管理器。现在，让我们学习如何在各种操作系统上安装
    Python：
- en: 'On Linux (Ubuntu, Mint, Debian):'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Linux（Ubuntu、Mint、Debian）上：
- en: 'For Python 2.7, run the following command in the system Terminal:'
  id: totrans-75
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于 Python 2.7，请在系统终端中运行以下命令：
- en: '[PRE0]'
  id: totrans-76
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'For Python 3, run the following command in the system Terminal:'
  id: totrans-77
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于 Python 3，请在系统终端中运行以下命令：
- en: '[PRE1]'
  id: totrans-78
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'On macOS: macOS version 10.8 comes with Python 2.7 pre-installed. If you want
    to install Python 3, then go to https://python.org, go to the **Downloads** section,
    and download the latest version of Python 3 for macOS.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 macOS 上：macOS 10.8 版本预装了 Python 2.7。如果你想安装 Python 3，请访问 https://python.org，进入
    **下载** 部分，并下载适用于 macOS 的最新 Python 3 版本。
- en: 'On Windows: Unlike macOS, Windows does not come with any pre-installed Python
    language support. You will need to download a Python installer for Windows from
    [https://python.org](https://python.org). The installer will depend on your Windows
    operating system – that is, if it is 64-bit or 32-bit.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Windows 上：与 macOS 不同，Windows 没有预安装任何 Python 语言支持。你需要从 [https://python.org](https://python.org)
    下载 Windows 的 Python 安装程序。安装程序将取决于你的 Windows 操作系统——也就是说，如果是 64 位还是 32 位。
- en: Now that you know how to install the correct version of Python, let’s download
    and install the H2O Python module using Python.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经知道了如何安装正确的 Python 版本，让我们使用 Python 下载并安装 H2O Python 模块。
- en: Installing H2O using Python
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Python 安装 H2O
- en: 'H2O has a Python module available in the Python package index. To install the
    `h2o` Python module, all you need to do is to execute the following command in
    your Terminal:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: H2O在Python包索引中有一个Python模块可用。要安装`h2o`Python模块，您只需在您的终端中执行以下命令：
- en: '[PRE2]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: And that’s pretty much it.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 就这么简单。
- en: 'To test if it has been successfully downloaded and installed, follow these
    steps:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试是否已成功下载和安装，请按照以下步骤操作：
- en: Open your Python Terminal.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的Python终端。
- en: 'Import the `h2o` module by running the following command:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行以下命令导入`h2o`模块：
- en: '[PRE3]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Initialize H2O to spin up a local `h2o` server by running the following command:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行以下命令初始化H2O以启动本地`h2o`服务器：
- en: '[PRE4]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The following screenshot shows the results you should get after initializing
    `h2o`:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了初始化`h2o`后应得到的结果：
- en: '![Figure 1.1 – H2O execution using Python ](img/B17298_01_001.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![图1.1 – 使用Python执行H2O](img/B17298_01_001.jpg)'
- en: Figure 1.1 – H2O execution using Python
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.1 – 使用Python执行H2O
- en: Let’s have a quick look at the output we got. First, it ran successfully, so
    mission accomplished.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速查看我们得到的结果。首先，它运行成功，所以任务完成。
- en: After executing `h2o.init()` by reading the output logs, you will see that H2O
    checked if there is already an H2O server instance running on localhost with port
    54321\. In this scenario, there wasn’t any H2O server instance running previously,
    so H2O attempted to start a local server on the same port. If it had found an
    already existing local H2O instance on the port, then it would have reused the
    same instance for any further H2O command executions.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在通过读取输出日志执行`h2o.init()`之后，您将看到H2O检查了是否在本地主机上的端口54321上已经有一个H2O服务器实例正在运行。在这种情况下，之前没有H2O服务器实例正在运行，所以H2O尝试在相同端口上启动本地服务器。如果它在该端口上找到了已经存在的本地H2O实例，那么它将重用该实例来执行任何进一步的H2O命令。
- en: Then, it used Java version 16 to start the H2O instance. You may see a different
    Java version, depending on which version you have installed in your system.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，它使用Java版本16启动了H2O实例。您可能看到不同的Java版本，这取决于您在系统中安装的版本。
- en: Next, you will see the location of the `h2o jar` file that the server was started
    from, followed by the location of the **Java Virtual Machine** (**JVM**) logs.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您将看到服务器启动时使用的`h2o jar`文件的位置，然后是**Java虚拟机**（**JVM**）日志的位置。
- en: Once the server is up and running, it shows the URL of the H2O server locally
    hosted on your system and the status of the H2O Python library’s connection to
    the server.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦服务器启动并运行，它将显示在您系统上本地托管的H2O服务器URL以及H2O Python库与服务器连接的状态。
- en: Lastly, you will see some basic metadata regarding the server’s configuration.
    This metadata may be slightly different from what you see in your execution as
    it depends a lot on the specifications of your system. For example, by default,
    H2O will use all the cores available on your system for processing. So, if you
    have an 8-core system, then the `H2O_cluster_allowed_cores` property value will
    be `8`. Alternatively, if you decide to use only four cores, then you can execute
    `h2o.init(nthreads=4)` to use only four cores, reflecting the same in the server
    configuration output.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，您将看到一些关于服务器配置的基本元数据。这些元数据可能略不同于您在执行中看到的内容，因为它在很大程度上取决于您系统的规格。例如，默认情况下，H2O将使用系统上可用的所有核心进行处理。所以，如果您有一个8核心的系统，那么`H2O_cluster_allowed_cores`属性值将是`8`。或者，如果您决定只使用四个核心，那么您可以执行`h2o.init(nthreads=4)`来只使用四个核心，并在服务器配置输出中反映这一点。
- en: Now that you know how to implement H2O using Python, let’s learn how to do the
    same in the R programming language.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经知道了如何使用Python实现H2O，让我们学习如何在R编程语言中完成同样的操作。
- en: Basic implementation of H2O using R
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用R的基本H2O实现
- en: The R programming language is a very popular language in the field of ML and
    data science because of its extensive support for statistical and data manipulation
    operations. It is widely used by data scientists and data miners for developing
    analytical software.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: R编程语言在机器学习和数据科学领域非常受欢迎，因为它提供了广泛的统计和数据操作支持。数据科学家和数据挖掘者广泛使用它来开发分析软件。
- en: We will start by installing the R programming language and then installing H2O
    using R.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先安装R编程语言，然后使用R安装H2O。
- en: Installing R
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装R
- en: 'An international team of developers maintains the R programming language. They
    have a dedicated web page for the R programming language called **The Comprehensive
    R Archive Network** (**CRAN**): [https://cran.r-project.org/](https://cran.r-project.org/).
    There are different ways of installing R, depending on what operating system you
    use:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 一支国际开发团队维护着 R 编程语言。他们为 R 编程语言设立了一个专门的网页，称为**综合 R 存档网络**（**CRAN**）：[https://cran.r-project.org/](https://cran.r-project.org/).
    根据你所使用的操作系统，安装 R 有不同的方法：
- en: 'On Linux (Ubuntu, Mint, Debian):'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Linux（Ubuntu、Mint、Debian）上：
- en: 'Execute the following command in the system Terminal:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在系统终端中执行以下命令：
- en: '[PRE5]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'On macOS: To install R, go to [https://cran.r-project.org/](https://cran.r-project.org/),
    go to the **Download R for macOS** hyperlink, and download the latest release
    of R for macOS.'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 macOS 上：要安装 R，请访问 [https://cran.r-project.org/](https://cran.r-project.org/)，点击**下载
    R for macOS**超链接，并下载适用于 macOS 的最新 R 版本。
- en: 'On Windows: Similar to how you install R on macOS, you can download the `.exe`
    file from [https://cran.r-project.org/](https://cran.r-project.org/), go to the
    **Download R for Windows** hyperlink, and download the latest release of R for
    Windows.'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Windows 上：与你在 macOS 上安装 R 的方法类似，你可以从 [https://cran.r-project.org/](https://cran.r-project.org/)
    下载 `.exe` 文件，点击**下载 R for Windows**超链接，并下载适用于 Windows 的最新 R 版本。
- en: Another great way of installing R on macOS and Windows is through RStudio. RStudio
    simplifies the installation of R-supported software and is also a very good IDE
    for R programming in general. You can download R studio from [https://www.rstudio.com/](https://www.rstudio.com/).
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在 macOS 和 Windows 上安装 R 的另一种好方法是使用 RStudio。RStudio 简化了 R 支持软件的安装，并且也是 R 编程的非常好用的
    IDE。你可以从 [https://www.rstudio.com/](https://www.rstudio.com/) 下载 RStudio。
- en: Now that you know how to install the correct version of R, let’s download and
    install the H2O R package using the R programming language.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经知道了如何安装正确的 R 版本，让我们使用 R 编程语言下载并安装 H2O R 包。
- en: Installing H2O using R
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 R 安装 H2O
- en: Similar to Python, H2O provide support for the R programming language as well.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 与 Python 类似，H2O 也为 R 编程语言提供支持。
- en: 'To install the R packages, follow these steps:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装 R 包，请按照以下步骤操作：
- en: 'First, we need to download the H2O R package dependencies. For this, execute
    the following command in your R Terminal:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要下载 H2O R 包的依赖项。为此，在你的 R 终端中执行以下命令：
- en: '[PRE6]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Then, to install the actual `h2o` package, execute the following command in
    your R Terminal:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，为了安装实际的 `h2o` 包，在你的 R 终端中执行以下命令：
- en: '[PRE7]'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: And you are done.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 完成操作。
- en: To test if it has been successfully downloaded and installed, open your R Terminal,
    import the `h2o` library, and execute the `h2o.init()` command. This will spin
    up a local H2O server.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要测试是否已成功下载和安装，请打开你的 R 终端，导入 `h2o` 库，并执行 `h2o.init()` 命令。这将启动一个本地的 H2O 服务器。
- en: 'The results can be seen in the following screenshot:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 结果可以在以下屏幕截图中看到：
- en: '![Figure 1.2 – H2O execution using R ](img/B17298_01_002.jpg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.2 – 使用 R 执行 H2O](img/B17298_01_002.jpg)'
- en: Figure 1.2 – H2O execution using R
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.2 – 使用 R 执行 H2O
- en: Let’s have a quick look at the output we got.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速查看我们得到的输出。
- en: After executing `h2o.init()`, the H2O client will check if there is an H2O server
    instance already running on the system. The H2O server is usually run locally
    on port 54321 by default. If it had found an already existing local H2O instance
    on the port, then it would have reused the same instance. However, in this scenario,
    there wasn’t any H2O server instance running on port 54321, which is why H2O attempted
    to start a local server on the same port.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 执行 `h2o.init()` 后，H2O 客户端将检查系统上是否已运行 H2O 服务器实例。H2O 服务器通常默认在端口 54321 上本地运行。如果它在该端口上找到了已存在的本地
    H2O 实例，那么它将重用该实例。然而，在这个场景中，端口 54321 上没有运行任何 H2O 服务器实例，这就是为什么 H2O 尝试在相同端口上启动本地服务器的原因。
- en: Next, you will see the location of the JVM logs. Once the server is up and running,
    the H2O client tries to connect to it and the status of the connection to the
    server is displayed. Lastly, you will see some basic metadata regarding the server’s
    configuration. This metadata may be slightly different from what you see in your
    execution as it depends a lot on the specifications of your system. For example,
    by default, H2O will use all the cores available on your system for processing.
    So, if you have an 8-core system, then the `H2O_cluster_allowed_cores` property
    value will be `8`. Alternatively, if you decide to use only four cores, then you
    can execute the `h2o.init(nthreads=4)` command to use only four cores, thus reflecting
    the same in the server configuration output.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您将看到JVM日志的位置。一旦服务器启动并运行，H2O客户端会尝试连接到它，并显示与服务器连接的状态。最后，您将看到一些关于服务器配置的基本元数据。这些元数据可能略不同于您在执行中看到的内容，因为它在很大程度上取决于您系统的规格。例如，默认情况下，H2O将使用您系统上可用的所有核心进行处理。所以，如果您有一个8核心的系统，那么`H2O_cluster_allowed_cores`属性值将是`8`。或者，如果您决定只使用四个核心，则可以执行`h2o.init(nthreads=4)`命令来只使用四个核心，从而在服务器配置输出中反映出来。
- en: Now that you know how to implement H2O using Python and R, let’s create our
    very first ML model and make predictions on it using H2O AutoML.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经知道了如何使用Python和R实现H2O，让我们创建我们的第一个机器学习模型，并使用H2O AutoML对其做出预测。
- en: Training your first ML model using H2O AutoML
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用H2O AutoML训练您的第一个机器学习模型
- en: All ML pipelines, whether they’re automated or not, eventually follow the same
    steps that were discussed in the *Understanding AutoML and H2O AutoML* section
    in this chapter.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 所有机器学习管道，无论它们是否自动化，最终都遵循本章中“理解AutoML和H2O AutoML”部分讨论的相同步骤。
- en: For this implementation, we will be using the Iris flower dataset. This dataset
    can be found at [https://archive.ics.uci.edu/ml/datasets/iris](https://archive.ics.uci.edu/ml/datasets/iris).
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个实现，我们将使用鸢尾花数据集。这个数据集可以在[https://archive.ics.uci.edu/ml/datasets/iris](https://archive.ics.uci.edu/ml/datasets/iris)找到。
- en: Understanding the Iris flower dataset
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解鸢尾花数据集
- en: The Iris flower dataset, also known as Fisher’s Iris dataset, is one of the
    most popular multivariate datasets – that is, a dataset in which there are two
    or more variables that are analyzed per observation during model training. The
    dataset consists of 50 samples of three different varieties of the Iris flower.
    The features in the dataset include the length and width of the petals and sepals
    in centimeters. The dataset is often used for studying various classification
    techniques in ML because of its simplicity. The classification is performed by
    using the length and width of the petals and sepals as features that determine
    the class of the Iris flower.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 鸢尾花数据集，也称为费舍尔的鸢尾花数据集，是最受欢迎的多变量数据集之一——也就是说，这是一个在模型训练过程中每个观测值分析两个或更多变量的数据集。该数据集包括三种不同品种的鸢尾花样本50个。数据集中的特征包括花瓣和萼片的长度和宽度（以厘米为单位）。由于其简单性，该数据集常用于研究机器学习中的各种分类技术。分类是通过使用花瓣和萼片的长度和宽度作为特征来确定的，这些特征决定了鸢尾花的类别。
- en: 'The following screenshot shows a small sample of the dataset:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了数据集的一个小样本：
- en: '![Figure 1.3 – Iris dataset ](img/B17298_01_003.jpg)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![图1.3 – 鸢尾花数据集](img/B17298_01_003.jpg)'
- en: Figure 1.3 – Iris dataset
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.3 – 鸢尾花数据集
- en: 'The columns in the dataset represent the following:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 数据集中的列代表以下内容：
- en: '**C1**: Sepal length in cm'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**C1**：萼片长度（厘米）'
- en: '**C2**: Sepal width in cm'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**C2**：萼片宽度（厘米）'
- en: '**C3**: Petal length in cm'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**C3**：花瓣长度（厘米）'
- en: '**C4**: Petal width in cm'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**C4**：花瓣宽度（厘米）'
- en: '**C5**: Class:'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**C5**：类别：'
- en: Iris-setosa
  id: totrans-144
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Iris-setosa
- en: Iris-versicolour
  id: totrans-145
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Iris-versicolour
- en: Iris-virginica
  id: totrans-146
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Iris-virginica
- en: In this scenario, **C1**, **C2**, **C3**, and **C4** represent the features
    that are used to determine **C5**, the class of the Iris flower.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个场景中，**C1**、**C2**、**C3** 和 **C4** 代表用于确定**C5**（即鸢尾花类别）的特征。
- en: Now that you understand the contents of the dataset that we are going to be
    working with, let’s implement our model training code.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经理解了我们将要处理的数据集的内容，让我们实现我们的模型训练代码。
- en: Model training
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模型训练
- en: '**Model training** is the process of finding the best combination of biases
    and weights for a given ML algorithm so that it minimizes a loss function. A **loss
    function** is a way of measuring how far the predicted value is from the actual
    value. So, minimizing it indicates that the model is getting closer to making
    accurate predictions – in other words, it’s learning. The ML algorithm builds
    a mathematical representation of the relationship between the various features
    in the dataset and the target label. Then, we use this mathematical representation
    to predict the potential value of the target label for certain feature values.
    The accuracy of the predicted values depends a lot on the quality of the dataset,
    as well as the combination of weights and biases against features used during
    model training. However, all of this is entirely automated by AutoML and, as such,
    is not a concern for us.'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: With that in mind, let’s learn how to quickly and easily create an ML model
    using H2O in Python.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: Model training and prediction in Python
  id: totrans-152
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The H2O Python module makes it easy to use H2O in a Python program. The inbuilt
    functions in the H2O Python module are straightforward to use and hide away a
    lot of the complexities of using H2O.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps to train your very first model in Python using H2O AutoML:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: 'Import the H2O module:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Initialize H2O to spin up a local H2O server:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The `h2o.init()` command starts up or reuses an H2O server instance running
    locally on port 54321\.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: Now, you can import the dataset by using the `h2o.import_file()` command while
    passing the location of the dataset into your system.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, import the dataset by passing the location where you downloaded the dataset:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now, you need to identify which columns of the DataFrame are the features and
    which are the labels. A `C1`, `C2`, `C3`, `C4`, and `C5` – as a list of features:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Based on our DataFrame, the `C5` column, which denotes the class of the Iris
    flower, is the column that we want to eventually predict once the model has been
    trained. Hence, we denote `C5` as the label and remove it from the remaining set
    of column names, which we will note as features. Set the target label and remove
    it from the list of features:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Split the DataFrame into training and testing DataFrames:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The `data.split_frame([0.8])` command splits the DataFrame into two – a training
    DataFrame and another for testing. The training DataFrame contains 80% of the
    data, while the testing DataFrame contains the remaining 20%. We will use the
    training DataFrame to train the model and the testing DataFrame to run predictions
    on the model once it has been trained to test how the model performs.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: If you are curious as to how H2O splits the dataset based on ratios and how
    it randomizes the data between different splits, feel free to explore and experiment
    with the `split_frame` function. You can find more details at https://docs.h2o.ai/h2o/latest-stable/h2o-py/docs/_modules/h2o/frame.xhtml#H2OFrame.split_frame.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: 'Initialize the H2O AutoML object. Here, we have set the `max_model` parameter
    to `10` to limit the number of models that will be trained by H2O, set AutoML
    to `10`, and set the random `seed` generator to `1`:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Now, trigger the AutoML training by passing in the feature columns – that is
    `C1`, `C2`, `C3`, and `C4` – in (*x*), the label column `C5` in (*y*), and the
    `train_dataframe` DataFrame using the `aml.train()` command. This is when H2O
    starts its automated model training.
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Train the model using the H2O AutoML object:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: During the training, H2O will analyze the type of the label column. For numerical
    labels, H2O treats the ML problem as a regression problem. If the label is categorical,
    then it treats the problem as a classification problem. For the Iris flower dataset,
    the `C5` column is a categorical value containing class values. H2O will analyze
    this column and correctly identify that it is a classification problem and train
    classification models.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: H2O AutoML trains several models behind the scenes using different types of
    ML algorithms. All the models that have been trained are evaluated on the test
    dataset and their performance is measured. H2O also provides detailed information
    about all the models, which users can use to further experiment on the data or
    compare different ML algorithms and understand which ones are more suitable to
    solve their ML problem. H2O can end up training 20-30 models, which can take a
    while. However, since we have passed the `max_models` parameter as `10`, we are
    limiting the number of models that will be trained so that we can see the output
    of the training process quickly. More on ensemble learning will be discussed in
    [*Chapter 5*](B17298_05.xhtml#_idTextAnchor109), *Understanding AutoML Algorithms*.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the training has finished, AutoML creates a Leaderboard of all the models
    it has trained, ranking them from the best performing to the worst. This ranking
    is achieved by comparing all the models’ error metrics. **Error metrics** are
    values that measure how many errors the model makes when making predictions on
    a sample test dataset with the actual label values. Lower error metrics indicate
    that the model makes fewer errors during prediction, which indicates that it is
    a better model compared to one with a higher error metric. Extract the AutoML
    Leaderboard:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Display the AutoML Leaderboard:'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The Leaderboard will look as follows:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.4 – H2O AutoML Leaderboard (Python) ](img/B17298_01_004.jpg)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
- en: Figure 1.4 – H2O AutoML Leaderboard (Python)
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: 'The Leaderboard includes the following details:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: '`model_id`: This represents the ID of the model.'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mean_per_class_error`: This metric is used to measure the average of the errors
    of each class in your multi-class dataset.'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`logloss`: This metric is used to measure the negative average of the log of
    corrected predicted probabilities for each instance.'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Root Mean Squared Error** (**RMSE**): This metric is used to measure the
    standard deviation of prediction errors.'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mean Squared Error** (**MSE**): This metric is used to measure the average
    of the squares of the errors.'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Leaderboard sorts the models based on certain default metrics, depending
    on the type of ML problem, unless specifically mentioned during AutoML training.
    The Leaderboard sorts the models based on the `mean_per_class_error` for multinomial
    classification, and **deviance** for regression.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: The metrics are different measures of error in the model’s performance. So,
    the smaller the error value, the better the model is for making accurate predictions.
    We will explore the different model performance metrics in [*Chapter 6*](B17298_06.xhtml#_idTextAnchor129),
    *Understanding H2O AutoML Leaderboard and Other Performance Metrics*.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: In this case, `GLM_1_AutoML_1_20211221_224844` is the best model according to
    H2O AutoML since it is a multinomial classification problem and this model has
    the lowest `mean_per_class_error`.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: You may notice that despite passing the `max_model` value as `10`, when triggering
    AutoML for training, we see more than 10 models in the Leaderboard. This is because
    only 10 models have been trained; the remaining models are Stacked Ensemble models.
    **Stacked Ensemble** models are models that are created from what other models
    have learned and are not technically trained in the normal sense. We will learn
    more about Stacked Ensemble models in [*Chapter 5*](B17298_05.xhtml#_idTextAnchor109),
    *Understanding AutoML Algorithms*, and more about the Leaderboard in [*Chapter
    6*](B17298_06.xhtml#_idTextAnchor129), *Understanding H2O AutoML Leaderboard and
    Other Performance Metrics*.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations! You have officially trained your very first ML model using
    H2O AutoML and it is now ready to be used to make predictions.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: 'Making predictions is very straightforward: we will use the `test_dataframe`
    DataFrame that was created from the `data.split_frame([0.8])` command.'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute the following command in Python:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: That’s it – everything is wrapped inside the `predict` function of the model
    object.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: 'After executing the prediction, you will see the following results:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.5 – H2O AutoML model prediction (Python) ](img/B17298_01_005.jpg)'
  id: totrans-202
  prefs: []
  type: TYPE_IMG
- en: Figure 1.5 – H2O AutoML model prediction (Python)
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: The prediction result shows a table where every row is a representation of predictions
    for the rows present in the test DataFrame. The `predict` column indicates what
    Iris class it is for that row, while the remaining columns are the calculated
    probabilities of the Iris classes, as denoted in the column’s name, by the model
    after reading the feature values of that row. In short, the model predicts that
    for *row 1*, there is a *99.6763%* chance that it is Iris-setosa.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations! You have now made an accurate prediction using your newly trained
    model using AutoML.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: Now that we’ve seen how easy it is to use H2O AutoML in Python, let’s learn
    how to do the same in the R programming language.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
- en: Model training and prediction in R
  id: totrans-207
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Similar to Python, training and making predictions using H2O AutoML in the R
    programming language is also very easy. H2O has a lot of support for the R programming
    language and, as such, has encapsulated much of the sophistication of ML behind
    ready-to-use functions.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: Let’s look at a model training example that uses H2O AutoML in the R programming
    language on the Iris flower dataset.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
- en: You will notice that training models in R is similar to how we do it in Python,
    with the only difference being the slight change in syntax.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: 'Import the `H2O` library:'
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Initialize H2O to spin up a local H2O server:'
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '`h2o.init()` will start up an H2O server instance that’s running locally on
    port 54321 and connect to it. If an H2O server already exists on the same port,
    then it will reuse it.'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
- en: 'Import the dataset using `h2o.importFile(“Dataset/iris.data”)` while passing
    the location of the dataset in your system as a parameter. Import the dataset:'
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Now, you need to set which columns of the dataframe are the features and which
    column is the label. Set the `C5` column as the target label and the remaining
    column names as the list of features:'
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-220
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Split the DataFrame into two parts:'
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: One DataFrame will be used for training, while the other will be used for testing/validating
    the model being trained. `parts <- h2o.splitFrame(data, 0.8)` splits the DataFrame
    into two parts. One DataFrame contains 80% of the data, while the other contains
    the remaining 20%. Now, assign the DataFrame that contains 80% of the data as
    the training DataFrame and the other as the testing or validation DataFrame.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
- en: 'Assign the first part as the training DataFrame:'
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Assign the second part as the testing DataFrame:'
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Now that the dataset has been imported and its features and labels have been
    identified, let’s pass them to H2O’s AutoML to train models. This means that you
    can implement the AutoML model training function in R using `h2o.automl()`. Train
    the model using H2O AutoML:'
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-229
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Extract the AutoML Leaderboard:'
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Display the AutoML Leaderboard:'
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-233
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Once the training has finished, AutoML will create a Leaderboard of all the
    models it has trained, ranking them from the best performing to the worst.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
- en: 'The Leaderboard will display the results as follows:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.6 – H2O AutoML Leaderboard (R) ](img/B17298_01_006.jpg)'
  id: totrans-236
  prefs: []
  type: TYPE_IMG
- en: Figure 1.6 – H2O AutoML Leaderboard (R)
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
- en: The Leaderboard includes the same details as we saw in the Leaderboard we got
    when training models in Python.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
- en: However, you may notice that the best model that’s suggested in this Leaderboard
    is different from the one we got in our previous experiment.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
- en: In this case, `GBM_3_AutoML_8_20211222_02555` is the best model according to
    H2O AutoML, while in the previous experiment, it was `GLM_1_AutoML_1_20211221_224844`.
    This may be due to several factors, such as a different random number being generated
    for the seed value during model training or different data values being split
    across the training and testing DataFrames between the two experiments. This is
    what makes ML tricky – every step that you perform in a model training pipeline
    can greatly affect the overall performance of your trained model. At the end of
    the day, ML is a best-effort approach to making the most accurate predictions.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations – you have officially trained your ML model using H2O AutoML
    in R. Now, let’s learn how to make predictions on it. We will use the testing
    DataFrame we created after the split function to make predictions on the model
    we trained.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute the following command in R to make predictions:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The `predict` function of the `h2o` object accepts two parameters. One is the
    model object, which in our case is the `aml` object, while the other is the DataFrame
    to make predictions on. By default, the `aml` object will use the best model in
    the Leaderboard to make predictions.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
- en: 'After executing the prediction, you will see the following results:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.7 – H2O AutoML model prediction (R) ](img/B17298_01_001.jpg)'
  id: totrans-246
  prefs: []
  type: TYPE_IMG
- en: Figure 1.7 – H2O AutoML model prediction (R)
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
- en: The results show a table with similar details that we saw in our previous experiment
    with Python. Every row is a representation of predictions for the rows present
    in the test DataFrame. The `predict` column indicates what Iris class it is for
    that row, while the remaining columns are the calculated probabilities of the
    Iris classes.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations – you have made an accurate prediction using your newly trained
    model using AutoML in R. Now, let’s summarize this chapter.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-250
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we understood the various steps in an ML pipeline and how AutoML
    plays a part in automating some of those steps. Then, we prepared our system to
    use H2O AutoML by installing the basic requirements. Once our system was ready,
    we implemented a simple application in Python and R that uses H2O AutoML to train
    a model on the Iris flower dataset. Finally, we understood the Leaderboard results
    and made successful predictions on the ML model that we just trained. All of this
    helped us test the waters of H2O AutoML, thus opening doors to more advanced concepts
    of H2O AutoML.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will explore H2O’s web **User Interface** (**UI**) so
    that we can understand and observe various ML details using an interactive visual
    interface.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
