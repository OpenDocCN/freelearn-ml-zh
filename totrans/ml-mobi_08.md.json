["```py\nrepositories {\n    maven { url \"https://raw.github.com/fritzlabs/fritz-repository/master\" }\n}\n```", "```py\ndependencies {\n    implementation fileTree(dir: 'libs', include: ['*.jar'])\n    implementation 'com.android.support:appcompat-v7:27.1.0'\n    implementation 'com.android.support.constraint:constraint-layout:1.1.2'\n    implementation 'ai.fritz:core:1.0.0'\n    implementation 'ai.fritz:custom-model-tfmobile:1.0.0'\n    implementation 'com.stripe:stripe-android:6.1.2'\n}\n```", "```py\n<meta-data android:name=\"fritz_api_key\" android:value=\"6265ed5e7e334a97bbc750a09305cb19\" />\n```", "```py\n<service\n    android:name=\"ai.fritz.core.FritzJob\"\n    android:exported=\"true\"\n    android:permission=\"android.permission.BIND_JOB_SERVICE\" />\n```", "```py\n<uses-permission android:name=\"android.permission.INTERNET\"/>\n```", "```py\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    package=\"org.packt.fritz.samplefritzapp\">\n\n    <uses-permission android:name=\"android.permission.INTERNET\"/>\n\n    <application\n        android:allowBackup=\"true\"\n        android:icon=\"@mipmap/ic_launcher\"\n        android:label=\"@string/app_name\"\n        android:roundIcon=\"@mipmap/ic_launcher_round\"\n        android:supportsRtl=\"true\"\n        android:theme=\"@style/AppTheme\">\n        <activity android:name=\".MainActivity\">\n            <intent-filter>\n                <action android:name=\"android.intent.action.MAIN\" />\n\n               <category android:name=\"android.intent.category.LAUNCHER\" />\n            </intent-filter>\n        </activity>\n        <meta-data android:name=\"fritz_api_key\" android:value=\"6265ed5e7e334a97bbc750a09305cb19\" />\n        <service\n            android:name=\"ai.fritz.core.FritzJob\"\n            android:exported=\"true\"\n            android:permission=\"android.permission.BIND_JOB_SERVICE\" />\n    </application>\n\n</manifest>\n```", "```py\npackage org.packt.fritz.samplefritzapp;\n\nimport android.os.Bundle;\nimport android.support.v7.app.AppCompatActivity;\nimport android.view.View;\nimport android.widget.Button;\nimport android.widget.EditText;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\nimport org.tensorflow.contrib.android.TensorFlowInferenceInterface;\n\nimport ai.fritz.core.*;\nimport ai.fritz.customtfmobile.*;\n```", "```py\npublic class MainActivity extends AppCompatActivity {\n\nprivate TensorFlowInferenceInterface inferenceInterface;\n\n static {\nSystem.loadLibrary(\"tensorflow_inference\");\n }\n```", "```py\n @Override\n protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n setContentView(R.layout.activity_main);\n Fritz.configure(this);\n```", "```py\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    package=\"org.packt.fritz.samplefritzapp\">\n```", "```py\n try {\n\nFritzTFMobileInterpreter interpreter = FritzTFMobileInterpreter.create(this.getApplicationContext(),\n new ModelSettings.Builder()\n.modelId(\"2a83207a32334fceaa29498f57cbd9ae\")\n.modelPath(\"ab2.pb\")\n.modelVersion(1)\n.build());\n```", "```py\n inferenceInterface = interpreter.getInferenceInterface();\n```", "```py\n final Button button = (Button) findViewById(R.id.button);\n\n button.setOnClickListener(new View.OnClickListener() {\n public void onClick(View v) {\n\n final EditText editNum1 = (EditText) findViewById(R.id.editNum1);\n final EditText editNum2 = (EditText) findViewById(R.id.editNum2);\n\n float num1 = Float.parseFloat(editNum1.getText().toString());\n float num2 = Float.parseFloat(editNum2.getText().toString());\n\n long[] i = {1};\n\n int[] a = {Math.round(num1)};\n int[] b = {Math.round(num2)};\n\n inferenceInterface.feed(\"a\", a, i);\n inferenceInterface.feed(\"b\", b, i);\n\n inferenceInterface.run(new String[]{\"c\"});\n\n int[] c = {0};\n inferenceInterface.fetch(\"c\", c);\n\n final TextView textViewR = (TextView) findViewById(R.id.txtViewResult);\n textViewR.setText(Integer.toString(c[0]));\n }\n});\n }\n catch (Exception ex)\n{\nToast.makeText(this.getApplicationContext(),ex.toString(),Toast.LENGTH_LONG).show();\n\n }\n\n}\n\n}\n```", "```py\n\nimport tensorflow as tf\n\na = tf.placeholder(tf.int32, name='a')  # input\nb = tf.placeholder(tf.int32, name='b')  # input\ntimes = tf.Variable(name=\"times\", dtype=tf.int32, initial_value=3)\nc = tf.pow(tf.add(a, b), times, name=\"c\")\n\nsaver = tf.train.Saver()\ninit_op = tf.global_variables_initializer()\nwith tf.Session() as sess:\n    sess.run(init_op)\n\n    tf.train.write_graph(sess.graph_def, '.', 'tfdroid.pbtxt')\n    sess.run(tf.assign(name=\"times\", value=3, ref=times))\n    # save the graph\n\n    # save a checkpoint file, which will store the above assignment\n    saver.save(sess, './tfdroid.ckpt')\n```", "```py\nrepositories {\n    maven { url \"https://raw.github.com/fritzlabs/fritz-repository/master\" }\n}\n```", "```py\ndependencies {\n    implementation fileTree(dir: 'libs', include: ['*.jar'])\n    implementation 'com.android.support:appcompat-v7:26.1.0'\n    implementation 'com.android.support.constraint:constraint-layout:1.1.2'\n    implementation 'ai.fritz:core:1.0.1'\n    implementation 'ai.fritz:vision-label-model:1.0.1'\n\n}\n```", "```py\n<meta-data\n    android:name=\"fritz_api_key\"\n    android:value=\"e35d2b5bbba84eca8969b7d6acac1fb7\" />\n```", "```py\n<service\n    android:name=\"ai.fritz.core.FritzJob\"\n    android:exported=\"true\"\n    android:permission=\"android.permission.BIND_JOB_SERVICE\" />\n```", "```py\n<uses-permission android:name=\"android.permission.INTERNET\"/>\n```", "```py\n<uses-sdk android:minSdkVersion=\"21\" android:targetSdkVersion=\"21\" />\n<uses-feature android:name=\"android.hardware.camera2.full\" />\n<uses-permission android:name=\"android.permission.CAMERA\" />\n\n```", "```py\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    package=\"com.example.avinaas.imagelabelling\">\n\n    <uses-sdk android:minSdkVersion=\"21\" android:targetSdkVersion=\"21\" />\n    <uses-feature android:name=\"android.hardware.camera2.full\" />\n    <uses-permission android:name=\"android.permission.CAMERA\" />\n    <uses-permission android:name=\"android.permission.INTERNET\" />\n\n    <application\n        android:allowBackup=\"true\"\n        android:icon=\"@mipmap/ic_launcher\"\n        android:label=\"@string/app_name\"\n        android:roundIcon=\"@mipmap/ic_launcher_round\"\n        android:supportsRtl=\"true\"\n        android:theme=\"@style/AppTheme\">\n        <activity android:name=\".MainActivity\">\n            <intent-filter>\n                <action android:name=\"android.intent.action.MAIN\" />\n\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n            </intent-filter>\n        </activity>\n        <meta-data\n            android:name=\"fritz_api_key\"\n            android:value=\"e35d2b5bbba84eca8969b7d6acac1fb7\" />\n        <service\n            android:name=\"ai.fritz.core.FritzJob\"\n            android:exported=\"true\"\n            android:permission=\"android.permission.BIND_JOB_SERVICE\" />\n    </application>\n\n</manifest>\n```", "```py\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\"com.example.avinaas.imagelabelling.MainActivity\">\n\n<TextureView\n    android:id=\"@+id/preview\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    android:layout_above=\"@id/btn_takepic\"\n    android:layout_alignParentTop=\"true\"/>\n\n    <Button\n        android:id=\"@+id/btn_takepic\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_alignParentBottom=\"true\"\n        android:layout_centerHorizontal=\"true\"\n        android:layout_marginBottom=\"16dp\"\n        android:layout_marginTop=\"16dp\"\n        android:text=\"Start Labeling\"\n        />\n</RelativeLayout>\n\n```", "```py\nFritz.configure(this.getApplicationContext());\n```", "```py\noptions = new FritzVisionLabelPredictorOptions.Builder()\n        .confidenceThreshold(0.3f)\n        .build();\n```", "```py\nvisionPredictor = FritzVisionLabelPredictor.getInstance(this.getApplicationContext(), options);\n```", "```py\nBitmap bmp = BitmapFactory.decodeFile(file.getPath());\n```", "```py\nFritzVisionImage img = FritzVisionImage.fromBitmap(bmp);\nList<FritzVisionLabel> labels = visionPredictor.predict(img);\n```", "```py\nString output=\"\";\n\nfor(FritzVisionLabel lab: labels)\n{\n    output = output + lab.getText()+\"\\t Confidence: \"+ lab.getConfidence();\n}\n\nif(output.trim().length()==0)\n{\n    output = \"Unable to predict.\";\n}\nToast.makeText(MainActivity.this, output, Toast.LENGTH_LONG).show();\n```", "```py\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    package=\"com.example.avinaas.imagelabelling\">\n```", "```py\n$ pod init\n$ pod 'Fritz'\n$ pod install\n```", "```py\n      func application(_application : UIApplication, \n      didFinishLaunchingWithOptions launchOptions: \n      [UIApplication.LauncgOptionsKey: Any])\n```", "```py\nfunc application(_ application: UIApplication,\ndidFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?)\n-> Bool {\nFritzCore.configure()\nreturn true\n}\n```"]