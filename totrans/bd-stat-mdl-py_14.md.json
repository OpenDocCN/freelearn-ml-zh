["```py\nimport matplotlib.pyplot as plt\nfrom lifelines import datasets\nfrom lifelines.fitters.kaplan_meier_fitter import KaplanMeierFitter\ndata = datasets.load_larynx()\nkmf = KaplanMeierFitter()\nkmf.fit(data.time, data.death)\n# this prints the first 5 elements of the survival function\nkmf.survival_function_.head()\n```", "```py\nfig, ax = plt.subplots(1)\nkmf.survival_function_.plot(ax=ax)\nci = kmf.confidence_interval_survival_function_\nindex = ci.index\nci_low, ci_high = ci.values[:, 0], ci.values[:, 1]\nax.fill_between(index, ci_low, ci_high, color='gray', alpha=0.3)\n```", "```py\nfrom lifelines import ExponentialFitter\nfrom lifelines import datasets\ndata = datasets.load_larynx()\nexf = ExponentialFitter()\nexf.fit(data.time, data.death)\n# this print the first 5 elements of the survival function\nexf.survival_function_.head()\n```", "```py\nimport statsmodels.api as sm\ndata = sm.datasets.get_rdataset('heart', package='survival').data\ntrain_data = data.iloc[0:171]\ntest_data = data.iloc[171:]\nexog=train_data[['age','year', 'transplant','surgery']]#df_test[['age','year','surgery','transplant']]\nendog=train_data['stop']\ndata.head(2)\n```", "```py\nfrom lifelines import KaplanMeierFitter\nimport matplotlib.pyplot as plt\nKaplanMeierFitter = KaplanMeierFitter()\nKaplanMeierFitter.fit(durations=train_data['stop'], event_observed=train_data['event'])\nKaplanMeierFitter.event_table.reset_index()\n```", "```py\ntrain_data.loc[train_data['stop']==1]\n```", "```py\n train_data.loc[train_data['id'].isin([3, 15,45])]\n```", "```py\nKaplanMeierFitter.event_table.loc[KaplanMeierFitter.event_table.index==45.0]\n```", "```py\ntrain_data.loc[train_data['stop']==45]\n```", "```py\nfrom lifelines import KaplanMeierFitter\nimport matplotlib.pyplot as plt\nKaplanMeierFitter_n = KaplanMeierFitter()\nKaplanMeierFitter_y = KaplanMeierFitter()\nKaplanMeierFitter_n.fit(durations=data.loc[data['transplant']==0]['stop'], event_observed=data.loc[data['transplant']==0]['event'], label='no transplant')\nKaplanMeierFitter_y.fit(durations=data.loc[data['transplant']==1]['stop'], event_observed=data.loc[data['transplant']==1]['event'], label='transplant');\n```", "```py\nprint('Non-Transplant Survival Probability at day 300: ', KaplanMeierFitter_n.predict(300))\nprint('Transplant Survival Probability at day 300: ', KaplanMeierFitter_y.predict(300))\n```", "```py\nNon-Transplant Survival Probability at day 300:  0.3545098269168237\nTransplant Survival Probability at day 300:  0.4911598783770023\n```", "```py\nfrom lifelines.statistics import logrank_test\nlr_results = logrank_test(durations_A=data.loc[data['transplant']==0]['stop'],\n                          durations_B=data.loc[data['transplant']==1]['stop'],\n                          event_observed_A=data.loc[data['transplant']==0]['event'],\n                          event_observed_B=data.loc[data['transplant']==1]['event'])\n```", "```py\nprint(lr_results.null_distribution)\n```", "```py\nchi squared\n```", "```py\nlr_results.summary\n```", "```py\nfrom lifelines import CoxPHFitter\nCoxPHFitter = CoxPHFitter()\nCoxPHFitter.fit(df=train_data[['age','year','surgery','transplant','stop','event']], duration_col='stop', event_col='event')\nCoxPHFitter.print_summary()\n```", "```py\nplt.title('Coefficients within Confidence Intervals')\nCoxPHFitter.plot()\n```", "```py\nCoxPHFitter.predict_survival_function(train_data[['age','year','surgery','transplant']]).plot()\nplt.xlabel('Survival Time')\nplt.ylabel('Survival Probability')\nplt.title('Survival Function for All Patients')\nplt.legend().set_visible(False)\n```", "```py\nCoxPHFitter.predict_survival_function(test_data[['age','year','surgery','transplant']]).plot()\nplt.xlabel('Survival Time')\nplt.ylabel('Survival Probability')\nplt.title('Survival Function for Holdout')\n```", "```py\nCoxPHFitter.predict_survival_function(test_data[['age','year','surgery','transplant','stop','event']])\n```"]