- en: '*Chapter 6*: Building an AutoML Forecasting Solution'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Having built an AutoML regression and classification solution, you are now
    ready to tackle a more complicated problem: **forecasting**. Forecasting is inherently
    a much more complex technique than either classification or regression. Those
    two **machine learning** (**ML**) problem types assume that time is irrelevant.
    Regardless of how much time passes, your diabetes model will always be able to
    accurately predict whose condition worsens over time. Your Titanic model will
    always be able to predict who lives and who dies. In contrast, with forecasting
    problems, you are always trying to predict future events based on past events;
    time will always be a factor in your model.'
  prefs: []
  type: TYPE_NORMAL
- en: You will begin this chapter similarly to how you began [*Chapter 4*](B16595_04_ePub.xhtml#_idTextAnchor056),
    *Building an AutoML Regression Solution*, and [*Chapter 5*](B16595_05_ePub.xhtml#_idTextAnchor068),
    *Building an AutoML Classification Solution*. First, you will navigate to your
    Jupyter environment, load in data, train a model, and evaluate the results. You
    will learn two inherently different ways to train forecasting models with AutoML.
    One way uses only the **ARIMA** and **Prophet** algorithms; the other way uses
    all other available algorithms.
  prefs: []
  type: TYPE_NORMAL
- en: At the end of this chapter, you will learn tips and tricks on how to fine-tune
    your forecasting models by adjusting AutoML settings; there are a lot of settings
    specific to forecasting, so you will spend a lot of time covering their various
    use cases.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of his chapter, you will be able to train forecasting models using
    AutoML without making mistakes. Relative to other techniques, forecasting problems
    are much easier to screw up, so this is quite an accomplishment. You will understand
    how to transform and arrange your data for forecasting and how to adjust AutoML
    settings to produce more accurate, more trustworthy models, solidifying your expertise
    in Azure AutoML.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Prepping data for AutoML forecasting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Training an AutoML forecasting model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Registering your trained forecasting model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fine-tuning your AutoML forecasting model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Like [*Chapter 4*](B16595_04_ePub.xhtml#_idTextAnchor056), *Building an AutoML
    Regression Solution*, you will be creating and training models with Python code
    in a Jupyter notebook running on an Azure compute instance. As such, you will
    require a working internet connection, an **Azure Machine Learning Service** (**AMLS**)
    **workspace**, and a compute instance. Likewise, you will need to have a working
    compute cluster to train models remotely while you continue to work on your notebook.
    The full list of requirements is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Access to the internet.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A web browser, preferably Google Chrome or Microsoft Edge Chromium.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Microsoft Azure account.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You should have created an AMLS workspace.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You should have created a compute instance.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You should have created the compute cluster in [*Chapter 2*](B16595_02_ePub.xhtml#_idTextAnchor023),
    *Getting Started with Azure Machine Learning Service.*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You should understand how to navigate to the Jupyter environment from an Azure
    compute instance as demonstrated in [*Chapter 4*](B16595_04_ePub.xhtml#_idTextAnchor056),
    *Building an AutoML Regression Solution.*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The code for this chapter is available here: [https://github.com/PacktPublishing/Automated-Machine-Learning-with-Microsoft-Azure/tree/master/Chapter06](https://github.com/PacktPublishing/Automated-Machine-Learning-with-Microsoft-Azure/tree/master/Chapter06).'
  prefs: []
  type: TYPE_NORMAL
- en: Prepping data for AutoML forecasting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Forecasting is very different from either classification or regression. ML models
    for regression or classification predict some output based on some input data.
    ML models for forecasting, on the other hand, predict a future state based on
    patterns found in the past. This means that there are key time-related details
    you need to pay attention to while shaping your data.
  prefs: []
  type: TYPE_NORMAL
- en: For this exercise, you are going to use the `OJ Sales Simulated Data` Azure
    Open Dataset for forecasting. Similar to the `Diabetes Sample` Azure Open Dataset
    you used for regression, `OJ Sales Simulated Data` is available simply by having
    an Azure account. You will use this data to create a model to predict future orange
    juice sales across different brands and stores.
  prefs: []
  type: TYPE_NORMAL
- en: There is one additional key difference; `OJ Sales Simulated Data` is a **file
    dataset** instead of a **tabular dataset**. While tabular datasets consist of
    one file containing columns and rows, file datasets consist of many files, tabular
    or otherwise.
  prefs: []
  type: TYPE_NORMAL
- en: Like all the other coding work you have performed in your AMLS workspace, you
    will begin by opening up Jupyter from your compute instance and creating a new
    Jupyter notebook. Then, you will load in your data, transform it into a pandas
    dataframe, and register it as a dataset, enabling you to use it to train an ML
    model with AutoML.
  prefs: []
  type: TYPE_NORMAL
- en: Navigating to your Jupyter environment
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You will begin by creating a new Jupyter notebook with the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: First, open up your **Azure Machine Learning** (**AML**) **studio** by navigating
    to [http://ml.azure.com](http://ml.azure.com).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Compute** from the left-hand panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select your compute instance. Click **Start** if it's not running.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Important tip
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: To save money while working on Azure, turn off your compute instance when you
    are not using it. Compute instances are paid for on an hourly basis.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click **Jupyter** to enter your Jupyter environment.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new Jupyter notebook by clicking **New** on the right-hand side of
    your screen and select **Python 3.6 â€“ AzureML**. The version of Python may be
    different due to updates.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename your Jupyter notebook to `OJ Forecasting_AutoML`. If you need a refresher
    as to how to do so, please review [*Chapter 4*](B16595_04_ePub.xhtml#_idTextAnchor056),
    *Building an AutoML Regression Solution*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With your notebook created, you are now ready to load in the orange juice sales
    data and transform it with Python.
  prefs: []
  type: TYPE_NORMAL
- en: Loading and transforming your data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now it''s time to work with your data, following the patterns you used in [*Chapter
    4*](B16595_04_ePub.xhtml#_idTextAnchor056), *Building an AutoML Regression Solution*,
    and [*Chapter 5*](B16595_05_ePub.xhtml#_idTextAnchor068), *Building an AutoML
    Classification Solution*. The purpose of this section is to take a file dataset
    with many files, combine all the files together, and create a new tabular dataset.
    Perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Load in all of the Azure libraries you will need with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You should recognize `Workspace`, `Dataset`, `Datastore`, `Experiment`, `ComputeTarget`,
    `AutoMLConfig`, `AutoMLRun`, and `RunDetails` from [*Chapter 4*](B16595_04_ePub.xhtml#_idTextAnchor056),
    *Building an AutoML Regression Solution*.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`OjSalesSimulated` lets you directly access the `OJ Sales Simulated Data` Azure
    Open Dataset via the `ForecastingParameters` is necessary for AutoML forecasting
    tasks, as you cannot simply pass in forecasting-specific parameters to an `AutoMLConfig`
    object. You must first assign them to `ForecastingParameters` and then pass those
    parameters into your AutoML configurations.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Important note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'If you are having trouble loading any Azure libraries, update the Azure ML
    SDK by running the `Update` `AzureML` `SDK.ipynb` notebook found here: https://github.com/PacktPublishing/Automated-Machine-Learning-with-Microsoft-Azure/blob/master/Update-AzureML-SDK.ipynb.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Load in `pandas`, `numpy`, `os`, and `path` with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You should recognize `pandas` and `numpy` from [*Chapter 4*](B16595_04_ePub.xhtml#_idTextAnchor056),
    *Building an AutoML Regression Solution*. `os` and `Path` will be new to you.
    These packages let you create and manipulate files and folders in your Jupyter
    environment from within a Jupyter notebook. Moreover, they are necessary when
    working with file datasets such as `OjSimulatedSales` to turn them into tabular
    datasets for AutoML training.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Connect your Jupyter notebook to your AMLS workspace:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If you are prompted to log in, do so by following the instructions.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Set your compute cluster:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You created this compute cluster in [*Chapter 2*](B16595_02_ePub.xhtml#_idTextAnchor023),
    *Getting Started with Azure Machine Learning Service*.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Set your datastore. For this exercise, we will use the default datastore that
    comes with your AMLS workspace:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Pull in a subset of `10` files from `OJ Sales Simulated Data` with this code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Important tip
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: There are over 4,000 files in the `OJ Sales Simulated Data` Azure Open Dataset.
    Pulling all of them can result in extended training times.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Make a folder to download the files to your Jupyter environment with the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In order to use file datasets, you first need to download them to your local
    Jupyter environment. Then, you can read them in as a pandas dataframe by concatenating
    the files.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Download the 10 files to your newly created `OJ_Sales` folder with the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If you navigate to the `OJ Sales` folder on your Jupyter environment, you should
    see the files there after running this code.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Read in the 10 files as a single pandas dataframe with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: For this, we will need to use the `Path` package to indicate the folder and
    file extension, as well as `pandas` to concatenate the 10 files into a single
    dataframe. Please note that this code will read everything in your `OJ Sales`
    folder. Do not place additional files in this folder or this will corrupt this
    portion of the code.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'View the first 10 rows of your data. Make sure that it looks correct:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The orange juice sales data has seven columns: `WeekStarting`, `Store`, `Brand`,
    `Quantity`, `Advert`, `Price`, and `Revenue`. `Advert` indicates whether there
    was an advertising campaign for that brand of orange juice for that week. The
    other columns are self-explanatory. The first 10 rows of data appear as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 6.1 â€“ Viewing your Orange Juice Sales dataset ](img/Figure_6.1_B16595.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Figure 6.1 â€“ Viewing your Orange Juice Sales dataset
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Register your pandas dataframe as a dataset:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: While it may seem strange to register a file dataset as a tabular dataset, tabular
    datasets are inherently easier to work with. File datasets are simply pointers
    to a folder containing a lot of files; lots of data preprocessing work must be
    performed on the files before you can use them. Tabular datasets, on the other
    hand, are formatted and ready for immediate use with AutoML.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Here, it's important to note the main differences between `WeekStarting`. The
    time column needs to be on some sort of regular cadence, for example, every day,
    week, month, or year. In this case, it's every week on a Thursday.
  prefs: []
  type: TYPE_NORMAL
- en: Certain algorithms, such as *Prophet* and *ARIMA*, require you to have a time
    column with no gaps. Other AutoML algorithms can work with gaps, but only if you
    do not enable certain features, such as time lags, in your target column.
  prefs: []
  type: TYPE_NORMAL
- en: Important tip
  prefs: []
  type: TYPE_NORMAL
- en: Gaps in your time column also prevent you from using certain features specific
    to forecasting, specifically lags of your target column and moving averages of
    those lags. These features often improve performance. Carefully study your data
    to remove gaps for best performance in forecasting solutions.
  prefs: []
  type: TYPE_NORMAL
- en: The other essential element of time series data are your `Store` and `Brand`
    are your grain columns; there are separate time series for each combination of
    store and brand.
  prefs: []
  type: TYPE_NORMAL
- en: If AutoML detects multiple time series on a single grain, it will automatically
    fail. In other words, you cannot have duplicate dates for a single grain. For
    this reason, carefully study your data to remove duplicate dates across the same
    grain when using AutoML forecasting.
  prefs: []
  type: TYPE_NORMAL
- en: With these things in mind, you are now ready to train an AutoML forecasting
    model. First, you will train a model without using *ARIMA* and *Prophet*. Then,
    you will train a model using these two algorithms.
  prefs: []
  type: TYPE_NORMAL
- en: Training an AutoML forecasting model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Training an AutoML forecasting is most similar to training an AutoML regression
    model. Like regression and unlike classification, you are trying to predict a
    number. Unlike regression, this number is always in the future based on patterns
    found in the past. Also, unlike regression, you can predict a whole series of
    numbers into the future. For example, you can choose to predict one month out
    into the future or you can choose to predict 6, 12, 18, or even 24 months out.
  prefs: []
  type: TYPE_NORMAL
- en: Important tip
  prefs: []
  type: TYPE_NORMAL
- en: The further out you try to predict, the less accurate your forecasting model
    will be.
  prefs: []
  type: TYPE_NORMAL
- en: Follow the same steps you have seen in [*Chapter 4*](B16595_04_ePub.xhtml#_idTextAnchor056),
    *Building an AutoML Regression Solution*, and [*Chapter 5*](B16595_05_ePub.xhtml#_idTextAnchor068),
    *Building an AutoML Classification Solution*. First, begin by setting a name for
    your experiment. Then, set your target column and your AutoML configurations.
  prefs: []
  type: TYPE_NORMAL
- en: 'For forecasting, there is an additional step: setting your **forecasting parameters**.
    This is where you will set things such as your time column, grain columns, and
    lag settings. These settings then need to be passed into your AutoML configurations
    as a single forecasting parameters object. Once this is done, only then can you
    use AutoML to train a forecasting model.'
  prefs: []
  type: TYPE_NORMAL
- en: In this section, you will repeat this process twice, first by training a model
    as normal using the standard algorithms available for forecasting in AutoML, and
    second, you will repeat this process using slightly different settings to enable
    ARIMA and Prophet and to compare the performance of the two AutoML models.
  prefs: []
  type: TYPE_NORMAL
- en: Training a forecasting model with standard algorithms
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To train your forecasting model using AutoML, follow these steps, continuing
    in the `OJ Forecasting AutoML` Jupyter notebook:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Set your experiment and give it a name with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: One important thing to remember is that an experiment can be a set of multiple
    training runs and not just a single training run. In other words, we can train
    multiple models with different settings under the same experiment name.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Retrieve your `OJ Sales Sample` dataset with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set your target column to `Quantity`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Capitalization matters with Python; keep that in mind.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create a variable for your AutoML task. `task` is the type of AutoML model
    you are trying to train. To predict future numbers, enter `forecasting`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Important note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: It is always incorrect to train a forecasting problem as a regression problem.
    Even though they both nominally do the same thing, predicting a number, forecasting
    requires a much more careful approach to not include future values when training
    a model. Standard cross-validation methods that are used for regression do not
    apply to forecasting problems, so be sure to set `task` to `forecasting`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create a variable for your primary metric. **The primary metric** is how your
    model will be scored. Use **normalized root mean squared error** (**normalized
    RMSE**). This metric takes the prediction and subtracts it from the actual value
    for each observation, squares it, and averages the score across all observations.
    The lower the score, the better your model. Other options for forecasting include
    **R2 score**, **Spearman correlation**, and **normalized mean absolute error**
    (**normalized MAE**). Note that these are identical to regression metrics:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a variable for `featurization`. You can set `featurization` to `auto`
    or `off`. Set it to `auto`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If you set `featurization` to `off`, you will have to drop high cardinality
    features, impute null values, one-hot encode your data, and generate additional
    features yourself. AutoML handles these for you automatically when featurization
    is set to `auto`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: With forecasting, featurization also creates a variety of date/time features
    from your time column, including year, month, week, day of week, A.M./P.M., and
    hour of day. Always set `featurization` to `auto` unless you are an expert data
    scientist who can do everything yourself.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Set your forecasting parameters. There are a lot of these and we will go over
    them one by one as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: a) `country_or_region_for_holidays` determines which country to use to generate
    columns indicating different national holidays. You can set this parameter to
    either nothing, a single country, or a list of countries. Set it to `US` for United
    States. You will get a separate column for each holiday.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: b) `drop_columns_names` lets you input a list of columns to drop before training
    your forecasting model. Drop the `Revenue` column here, as it's partially derived
    from your target column, `Quantity`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Important note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'There are quite a large number of parameters specific to forecasting. Take
    your time to understand these settings in depth by reading the *Azure AutoML ForecastingParameters*
    documentation here: [https://docs.microsoft.com/en-us/python/api/azureml-automl-core/azureml.automl.core.forecasting_parameters.forecastingparameters?view=azure-ml-py](https://docs.microsoft.com/en-us/python/api/azureml-automl-core/azureml.automl.core.forecasting_parameters.forecastingparameters?view=azure-ml-py).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Configure your AutoML run. Here, you will pass in your task, primary metric,
    featurization settings, compute target, dataset, target column, and forecasting
    parameters. All of these you have previously created. You will also pass in how
    long the experiment will run for, whether it will stop early if model performance
    does not improve, the number of cross-validations, and model explainability settings.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Additionally, you will pass in whether or not you want to use `3` splits; unlike
    classification or regression, forecasting runs are more accurate when you set
    cross-validation to a lower number. This is due to the nature of how AutoML splits
    the data into different sets for the purpose of scoring performance:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Important note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`False`. This is not the case for regression or classification.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Train your model and watch the results in real time:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'As before, kick off your AutoML run, make yourself some coffee, then come back
    and watch your models get trained in real time. You will see a **data guardrails**
    check, as seen in *Figure 6.2*. Notice how it has changed for forecasting:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.2 â€“ Data guardrails check for forecasting ](img/Figure_6.2_B16595.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.2 â€“ Data guardrails check for forecasting
  prefs: []
  type: TYPE_NORMAL
- en: First, data guardrails will check your time column to make sure that all data
    points are aligned with the correct frequency. For your `OJ Sales Sample` data,
    this means making sure that each data point falls on a Thursday and is separated
    by 1 week.
  prefs: []
  type: TYPE_NORMAL
- en: Then, data guardrails will impute missing values the same way it did for classification
    and regression. Here, there are no missing values in any of the columns. Lastly,
    it will look for time series that are too short to train with your settings. In
    the case that AutoML detects short series, it will create simpler models to handle
    these cases.
  prefs: []
  type: TYPE_NORMAL
- en: 'After completing the data guardrails check, AutoML will start training models
    with different combinations of feature transformations, algorithms, and hyperparameters.
    If there are no features other than the time column, grain columns, and target
    column, it will train ARIMA and Prophet models in addition to its standard suite
    of forecasting models. Your output should resemble *Figure 6.3*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.3 â€“ AutoML results for forecasting ](img/Figure_6.3_B16595.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.3 â€“ AutoML results for forecasting
  prefs: []
  type: TYPE_NORMAL
- en: Training a forecasting model with Prophet and ARIMA
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One important difference between forecasting and the other two types of AutoML
    problems are the Prophet and ARIMA algorithms. Prophet and ARIMA are inherently
    different from all of the other algorithms in that, in order to train them, all
    you need are the grain columns, the target column, and the time column. That's
    it. Adding any other columns will restrict AutoML from using these algorithms.
  prefs: []
  type: TYPE_NORMAL
- en: What's different about Prophet and ARIMA is that they only use patterns found
    in the target column to make predictions. Other variables are ignored. Sometimes,
    they will outperform other algorithms; other times, they will not. It's hard to
    know when without trying.
  prefs: []
  type: TYPE_NORMAL
- en: Because it's hard to know how well ARIMA and Prophet will perform relative to
    other algorithms, it's recommended to always try training them if you can. That
    is, if you have time series data without gaps in your time column, always train
    ARIMA and Prophet models first as your baseline. They take a longer time to train,
    so it's recommended that you increase your experiment timeout, especially with
    larger datasets.
  prefs: []
  type: TYPE_NORMAL
- en: 'To build an AutoML forecasting solution using ARIMA and Prophet, follow these
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Copy *steps 1-6* from the previous section until you get to forecasting parameters.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Within forecasting parameters, remove all of your feature columns, leaving
    only your time, grain, and target columns. Also, turn off all AutoML generated
    features, such as holidays, feature lags, and targets lags, by setting them to
    `None`, as seen in the following code block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Feature lags and target lags work by creating additional variables. This is
    why they need to be removed from your data in order for AutoML to run Prophet
    and ARIMA.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Configure your AutoML run as you did in *Step 8*, passing in your updated forecasting
    parameters.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Train your model and watch the results in real time:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once you rerun AutoML with these settings, your results should resemble *Figure
    6.4*. Notice that, for this problem, ARIMA and Prophet did not return better results,
    and that the voting ensemble outperformed all models as usual:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.4 â€“ AutoML forecasting results with ARIMA and Prophet ](img/Figure_6.4_B16595.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.4 â€“ AutoML forecasting results with ARIMA and Prophet
  prefs: []
  type: TYPE_NORMAL
- en: You have now trained two sets of models with your `OJ Sales Sample` data and
    have achieved a pretty low normalized RMSE. You can now move on to the next section
    to register your model. Registered models are necessary for later use in scoring
    new data through ML pipelines or real-time endpoints.
  prefs: []
  type: TYPE_NORMAL
- en: Registering your trained forecasting model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The code to register forecasting models is identical to the code you used in
    [*Chapter 4*](B16595_04_ePub.xhtml#_idTextAnchor056), *Building an AutoML Regression
    Solution*, in order to register your regression model, and in [*Chapter 5*](B16595_05_ePub.xhtml#_idTextAnchor068),
    *Building an AutoML Classification Solution*, in order to register your classification
    models. Always register new models, as you will use them in either real-time scoring
    endpoints or batch execution inference pipelines depending on your business scenario.
    Likewise, always add tags and descriptions for easier tracking:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, give your model a name, a description, and some tags. **Tags** let you
    easily search for models, so think carefully as you implement them:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, register your model to your AMLS workspace, passing in your model name,
    tags, and description. Use the `AutoML_run` model you trained with in the *Training
    an AutoML forecasting model* section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Try registering a different model based on R2 score. Give it a slightly different
    name, add an additional tag, and use an identical description:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In some situations, you will perform an AutoML training run, but you will forget
    to register the model. Do not fret. You can retrieve AutoML training runs using
    the experiment name and run ID and register the model from there. Use the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: You have now registered your forecasting model and it is ready for use. You
    can use it to predict the demand for orange juice across a variety of stores and
    brands over the next 6 weeks. You can modify it in numerous ways too, such as
    predicting 3 weeks', 12 weeks', or simply next weeks' sales.
  prefs: []
  type: TYPE_NORMAL
- en: 'Forecasting is an art, much more so than classification or regression, and
    that makes the next section much more important: tips and tricks for fine-tuning
    AutoML forecasting models.'
  prefs: []
  type: TYPE_NORMAL
- en: Fine-tuning your AutoML forecasting model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, you will first review tips and tricks for improving your AutoML
    forecasting models and then review the algorithms used by AutoML for forecasting.
  prefs: []
  type: TYPE_NORMAL
- en: Improving AutoML forecasting models
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Forecasting is very easy to get wrong. It''s easy to produce a model that seems
    to work in development, but fails to make accurate predictions once deployed to
    production. Many data scientists, even experienced ones, make mistakes. While
    AutoML will help you avoid some of the common mistakes, there are others that
    require you to exercise caution. In order to sidestep these pitfalls and make
    the best models possible, follow these tips and tricks:'
  prefs: []
  type: TYPE_NORMAL
- en: Any feature column that you train with has to be available in the future when
    you make a prediction. With `OJ Sales Sample`, this means that, if you want to
    predict the quantity of sales 6 weeks out and include price as an input variable,
    you need to know the price of each product 6 weeks out.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Please confirm with your business partners and IT staff to see which data you
    will have available to make predictions. If you are not able to know the value
    of a feature column in the time frame over which you are trying to predict, drop
    that column from your training dataset.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Standard cross-validation techniques do not work with forecasting. AutoML uses
    `task` to `forecasting` if you are trying to make future-state predictions. Setting
    it to regression may give you results, but they will be meaningless since they
    ignore the time component.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Become familiar with all of the different AutoML configuration options for
    forecasting. You can find them at this link: [https://docs.microsoft.com/en-us/python/api/azureml-train-automl-client/azureml.train.automl.automlconfig.automlconfig?view=azure-ml-py](https://docs.microsoft.com/en-us/python/api/azureml-train-automl-client/azureml.train.automl.automlconfig.automlconfig?view=azure-ml-py).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Always try building a forecasting model using only ARIMA and Prophet first.
    These two models provide a good baseline as they only use your time column and
    target column to build an ML model. If models using additional features do not
    outperform ARIMA and Prophet, you know those additional features aren't relevant
    to your business problem. Drop these features from your dataset.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Think carefully when deciding your forecast horizon. Usually, forecasting algorithms
    perform better when forecasting short horizons, either the next one or two time
    periods. When forecasting longer horizons, expect less accuracy the further out
    you go. Knowing this, please push back against your business partners when they
    ask you to forecast many time periods out.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generally speaking, people always want to know the future, and the further out
    you can predict, the happier they will be. Please explain that they should put
    more trust in short-term forecasts than they should in longer-term forecasts.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Forecasting the future works best when the present situation resembles the past.
    Shock events will often disrupt even well-performing forecast models. When this
    happens, try training a model using only recent data points. This is an iterative
    process, as it's often difficult to tell which training points are still relevant.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In some cases, the best thing you can do is start training models using data
    only from the onset of the shock event. For example, many stores experienced wildly
    different product demand during the coronavirus pandemic compared to pre-pandemic
    conditions.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: When shock events pass and things return to normal, try training forecasting
    models using the weighted column feature in AutoML. Set time periods during the
    shock event to `0`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remember that AutoML forecasting models should not be trained with gaps in the
    time column. However, data points that occurred during shock events are not relevant
    to normal situations. By using the weighted column and setting weights to `0`
    and `1`, you can train a forecasting model that effectively ignores shock events
    without violating the no gap rule.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Likewise, use the weight column to weight the recent past more heavily than
    the further past. For many problems, recent data is more relevant than past data.
    Interview your business partners to find key dates when your industry changed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Furthermore, more data only helps forecasting models if the past situation resembles
    the present situation. Forecasting models often produce better results when you
    train models using only recent, relevant data. Do not be afraid to drop data points
    that are too far in the past to help predict the current situation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once again, interview business partners to find key dates when your industry
    underwent massive change. Dropping data that occurred prior to the massive change
    will often produce superior models.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Forecasting is finicky, much more finicky than regression or classification
    problems. This is because the types of things companies like to forecast are driven
    by market demand and what people want often changes. What's popular in the marketplace
    can change quickly with little warning, and, as a result, forecast models need
    to be retrained all of the time whenever you get the latest data.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When you make predictions using an AutoML-trained forecasting model, it always
    starts by predicting values for the next time period out. Because of this, when
    you score data, your data must begin with that next time period. For example,
    if you trained a daily forecasting model on data that ends on January 5, your
    scoring data must begin on January 6\.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If your time column is on a monthly cadence that ends with February and you
    are predicting two time periods out, AutoML will make predictions for March and
    April. You cannot use that model to make predictions for May or June. In order
    to do so, you must retrain the model with training data that ends at a later date.
    As a result, you need to keep retraining AutoML forecasting models to make sure
    your predictions are up-to-date.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To determine seasonality, plot your target column to look for any recurring
    seasonal patterns before using AutoML. This will let you know if you should use
    seasonality features or not.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When you're trying to make forecasts on a global basis, be sure to include all
    countries when generating holiday features. Holidays tend to be very important
    when forecasting demand and market trends. Think of how Christmas affects sales
    in the United States of America or how the Chinese New Year affects travel patterns
    in China.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This ends the list of tips and tricks. It is by no means complete; you should
    only think of it as a start. Forecasting is a rich and interesting field with
    many caveats. Still, keeping these things in mind will enable you to produce accurate,
    reliable forecasts and avoid many of the mistakes made by novice data scientists.
  prefs: []
  type: TYPE_NORMAL
- en: More than anything, remember that forecasting is its own art, separate from
    other types of ML problems, and approach it as such. Lastly, you will learn which
    algorithms AutoML uses to forecast.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding AutoML forecasting algorithms
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: AutoML forecasting algorithms are nearly identical to AutoML regression algorithms.
    Forecasting uses all the same **tree**, **standard regression**, **gradient boosting**,
    and **nearest neighbor** algorithms as regression, and also uses **stochastic
    gradient descent**. For reference, please refer to [*Chapter 4*](B16595_04_ePub.xhtml#_idTextAnchor056),
    *Building an AutoML Regression Solution*.
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition to these algorithms, there are three forecasting-specific algorithms:
    Auto-ARIMA, Prophet, and ForecastTCN. You learned about certain key differences
    that make ARIMA and Prophet different from the other algorithms earlier in this
    chapter. ForecastTCN is a **temporal convolutional network**, a type of neural
    network.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Auto-ARIMA** (**Auto-Regressive Integrated Moving Average**) uses moving
    averages of the target column to make predictions. Unlike standard ARIMA, Auto-ARIMA
    optimizes ARIMA parameters to create the best model possible. It performs extremely
    well with univariate time series where you only have reliable information about
    your target column.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Prophet** is similar to Auto-ARIMA in that it is specialized for univariate
    time series. Moreover, it performs extremely well when your data has strong seasonal
    patterns. Unlike many forecasting algorithms, Prophet is robust to outliers and
    wild swings in your dataset. Like Auto-ARIMA, you should always use Prophet to
    establish a baseline model at the onset of any forecasting project.'
  prefs: []
  type: TYPE_NORMAL
- en: '`enable_dnn` to `True` in your AutoML forecasting parameters. This algorithm
    is great for the most complex forecasting tasks as it can capture extremely complex
    nonlinear trends in your data. Deep learning is a complex topic and would be difficult
    to explain in even a single chapter, and is thus outside the scope of this book.
    ForecastTCN, like other deep learning models, performs best when trained with
    very large amounts of data.'
  prefs: []
  type: TYPE_NORMAL
- en: 'A summary of these 13 algorithms is provided in *Figure 6.5*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.5 â€“ AutoML forecasting algorithms](img/Figure_6.5_B16595.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.5 â€“ AutoML forecasting algorithms
  prefs: []
  type: TYPE_NORMAL
- en: Like regression, AutoML performs **model ensembling** at the end of each AutoML
    training run. **Voting ensembles** take a weighted average of your forecasting
    models and use that to make a prediction. **Stack ensembles**, in contrast, train
    an elastic net model using the output of other models. There is a danger of overfitting
    when using a stack ensemble with forecasting; for that reason, it's recommended
    to turn it off.
  prefs: []
  type: TYPE_NORMAL
- en: For more information on these models, please consult the AutoML documentation
    found at [https://docs.microsoft.com/en-us/azure/machine-learning/how-to-configure-auto-train#configure-your-experiment-settings](https://docs.microsoft.com/en-us/azure/machine-learning/how-to-configure-auto-train#configure-your-experiment-settings).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You have now successfully trained all three types of AutoML models â€“ classification,
    regression, and forecasting. Not only can you train a simple forecasting model,
    but you also know how to improve models with the various forecasting parameters
    and how to build high-performing baseline models with ARIMA and Prophet.
  prefs: []
  type: TYPE_NORMAL
- en: Moreover, you've acquired a lot of knowledge regarding how forecasting differs
    from other problems and how to avoid common pitfalls. By utilizing the forecast
    horizon feature wisely, you can forecast days, months or years into the future,
    and now it's time to add a powerful tool to your repertoire.
  prefs: []
  type: TYPE_NORMAL
- en: In [*Chapter 7*](B16595_07_ePub.xhtml#_idTextAnchor094), *Using the Many Models
    Solution Accelerator*, you will be able to build individual models for each time
    series grain. Instead of building one forecasting model, you can build thousands
    of models all at the same time and score them as if they were one model. You will
    find that this approach can vastly enhance your model's performance and it is
    possible only with cloud-native technology.
  prefs: []
  type: TYPE_NORMAL
