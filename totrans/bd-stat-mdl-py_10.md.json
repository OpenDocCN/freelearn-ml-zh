["```py\nnumpy.diff(array_x, n=1)\n```", "```py\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom statsmodels.graphics.tsaplots import plot_acf\nrandom_white_noise = np.random.normal(loc=0, scale=1, size=1000)\n```", "```py\nfig, ax = plt.subplots(1,2, figsize=(10, 5))\nax[0].plot(random_white_noise)\nax[0].axhline(0, color='r')\nax[0].set_title('Raw Data')\nplot_acf(random_white_noise, ax=ax[1])\n```", "```py\nfrom statsmodels.stats.diagnostic import acorr_ljungbox\nacorr_ljungbox(random_white_noise, lags=[50], return_df=True)\n```", "```py\nimport numpy as np\nimport pandas as pd\nimport statsmodels.api as sm\nimport matplotlib.pyplot as plt\ndf = sm.datasets.macrodata.load().data\ndf['realinv'] = round(df['realinv'].astype('float32'), 2)\ndf['realdpi'] = round(df['realdpi'].astype('float32'), 2)\ndf_mod = df[['realinv','realdpi']]\n```", "```py\nfrom statsmodels.graphics.tsaplots import plot_acf\nfrom statsmodels.graphics.tsaplots import plot_pacf\nfig, ax = plt.subplots(2,2, figsize=(15,10))\nplot_acf(df_mod['realinv'], alpha=0.05, lags=50, ax=ax[0,1])\nax[0,1].set_title('Original ACF')\nax[0,0].set_title('Original Data')\nax[0,0].plot(df_mod['realinv'])\nplot_acf(np.diff(df_mod['realinv'], n=1), alpha=0.05, lags=50, ax=ax[1,1])\nax[1,1].set_title('Once-Differenced ACF')\nax[1,0].set_title('Once-Differenced Data')\nax[1,0].plot(np.diff(df_mod['realinv'], n=1))\n```", "```py\nimport numpy as np\nimport pandas as pd\nimport statsmodels.api as sm\nimport matplotlib.pyplot as plt\ndf = sm.datasets.macrodata.load().data\ndf['realinv'] = round(df['realinv'].astype('float32'), 2)\ndf['realdpi'] = round(df['realdpi'].astype('float32'), 2)\ndf_mod = df[['realinv','realdpi']]\n```", "```py\nfrom statsmodels.graphics.tsaplots import plot_acf\nfig, ax = plt.subplots(2,2, figsize=(20,8))\nfig.suptitle('Raw Data')\nax[0,0].plot(df_mod['realinv'])\nax[0,0].set_title('Realization')\nax[1,0].set_xlabel('realinv')\nax[0,1].plot(df_mod['realdpi'])\nax[0,1].set_title('Realization')\nax[1,1].set_xlabel('realdpi')\nplot_acf(df_mod['realinv'], alpha=0.05, lags=50, ax=ax[1,0])\nplot_acf(df_mod['realdpi'], alpha=0.05, lags=50, ax=ax[1,1])\n```", "```py\ndf_diff = pd.DataFrame()\ndf_diff['realinv'] = np.diff(df_mod['realinv'], n=1)\ndf_diff['realdpi'] = np.diff(df_mod['realdpi'], n=1)\n```", "```py\nfrom scipy.signal import correlate\nimport matplotlib.pyplot as plt\ndef plot_ccf(data_a, data_b, lag_lookback, percentile):\n    n = len(data_a)\n    ccf = correlate(data_a - np.mean(data_a), data_b - np.mean(data_b), method='direct') / (np.std(data_a) * np.std(data_b) * n)\n    _min = (len(ccf)-1)//2 - lag_lookback\n    _max = (len(ccf)-1)//2 + (lag_lookback-1)\n    zscore_vals={90:1.645,\n                 95:1.96,\n                 99:2.576}\n    plt.figure(figsize=(15, 5))\n    markers, stems, baseline = plt.stem(np.arange(-lag_lookback,(lag_lookback-1)), ccf[_min:_max], markerfmt='o', use_line_collection = True)\n    plt.setp(baseline, color='r', linewidth=1)\n    baseline.set_xdata([0,1])\n    baseline.set_transform(plt.gca().get_yaxis_transform())\n    z_score_95pct = zscore_vals.get(percentile)/np.sqrt(n) #1.645 for 90%, 1.96 for 95%, and 2.576 for 99%\n    plt.title('Cross-Correlation')\n    plt.xlabel('Lag')\n    plt.ylabel('Correlation')\n    plt.axhline(y=-z_score_95pct, color='b', ls='--')# Z-statistic for 95% CL LL\n    plt.axhline(y=z_score_95pct, color='b', ls='--')# Z-statistic for 95% CL UL\n    plt.axvline(x=0, color='black', ls='-')\n    ;\nimport numpy as np\nimport pandas as pd\nimport statsmodels.api as sm\nimport matplotlib.pyplot as plt\ndf = sm.datasets.macrodata.load().data\ndf['realinv'] = round(df['realinv'].astype('float32'), 2)\ndf['realdpi'] = round(df['realdpi'].astype('float32'), 2)\ndf_mod = df[['realinv','realdpi']]\ndf_diff = pd.DataFrame()\ndf_diff['realinv'] = np.diff(df_mod['realinv'], n=1)\ndf_diff['realdpi'] = np.diff(df_mod['realdpi'], n=1)\nplot = plot_ccf(data_a=df_diff['realdpi'], data_b=df_diff['realinv'], lag_lookback=50, percentile=95)\n```", "```py\nplot = plot_ccf(data_a=df_diff['realdpi'].shift(1).iloc[1:], data_b=df_diff['realinv'].iloc[1:], lag_lookback=50, percentile=95)\n```", "```py\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndata = pd.read_csv('airline-passengers.csv', header=0, index_col =0)\ndata.index = pd.to_datetime(data.index, format='%Y-%m-%d')\nplt.plot(data)\n```", "```py\nfrom statsmodels.tsa.seasonal import seasonal_decompose\nseason_trend = seasonal_decompose(data)\nseason_trend.plot()\nplt.show()\n```", "```py\nimport seaborn as sns\nfig, ax = plt.subplots(figsize=(24,10))\nsns.boxplot(x = data.index.year,y = data['Passengers'], ax = ax, color = \"cornflowerblue\")\nax.set(xlabel='Year', ylabel='Number of Passengers')\n```", "```py\nfrom statsmodels.graphics.tsaplots import plot_acf\nplot_acf(data, lags= 20, alpha=0.05)\nplt.show()\n```"]