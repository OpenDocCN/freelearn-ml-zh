["```py\nENV_ID=$C9_PID\naws cloud9 update-environment --managed-credentials-action DISABLE --environment-id $ENV_ID\n```", "```py\n    rm -vf /home/ubuntu/.aws/credentials\n    ```", "```py\n    aws sts get-caller-identity --query Arn \n    ```", "```py\narn:aws:sts::1234567890:assumed-role/kubeflow-on-eks/i-abcdefgh12345\n```", "```py\n    wget -O prerequisites.zip https://bit.ly/3ByyDGV\n    ```", "```py\n    unzip prerequisites.zip\n    ```", "```py\n    cd ch10_prerequisites\n    ```", "```py\n    chmod +x *.sh\n    ```", "```py\n    sudo ./00_install_kubectl_aws_jq_and_more.sh\n    ```", "```py\n    aws --version\n    ```", "```py\naws-cli/2.7.20 Python/3.9.11 Linux/5.4.0-1081-aws exe/x86_64.ubuntu.18 prompt/off\n```", "```py\n    kustomize version\n    ```", "```py\nVersion: {Version:kustomize/v3.2.3 GitCommit:f8412aa3d39f32151525aff97a351288f5a7470b BuildDate:2019-10-08T23:30:25Z GoOs:linux GoArch:amd64}\n```", "```py\n    eksctl version\n    ```", "```py\n0.109.0\n```", "```py\n    . ~/.bash_completion\n    ```", "```py\n    . ~/.bash_profile\n    ```", "```py\n    . ~/.bashrc\n    ```", "```py\n    export AWS_REGION=\"us-west-2\"\n    ```", "```py\n    echo \"export AWS_REGION=${AWS_REGION}\" | tee -a ~/.bash_profile\n    ```", "```py\n    aws configure set default.region ${AWS_REGION}\n    ```", "```py\n    aws configure get default.region\n    ```", "```py\n    cd ~/environment\n    ```", "```py\n    mkdir ch10\n    ```", "```py\n    cd ch10\n    ```", "```py\n    touch eks.yaml\n    ```", "```py\n    ---\n    ```", "```py\n    apiVersion: eksctl.io/v1alpha5\n    ```", "```py\n    kind: ClusterConfig\n    ```", "```py\n    metadata:\n    ```", "```py\n      name: kubeflow-eks-000\n    ```", "```py\n      region: us-west-2\n    ```", "```py\n      version: \"1.21\"\n    ```", "```py\n    availabilityZones: [\"us-west-2a\", \"us-west-2b\", \"us-west-2c\", \"us-west-2d\"]\n    ```", "```py\n    managedNodeGroups:\n    ```", "```py\n    - name: nodegroup\n    ```", "```py\n      desiredCapacity: 5\n    ```", "```py\n      instanceType: m5.xlarge\n    ```", "```py\n      ssh:\n    ```", "```py\n        enableSsm: true\n    ```", "```py\n    eksctl create cluster -f eks.yaml --dry-run\n    ```", "```py\n    eksctl create cluster -f eks.yaml\n    ```", "```py\n    kubectl get nodes -o wide\n    ```", "```py\n    CLUSTER_NAME=kubeflow-eks-000\n    ```", "```py\n    CLUSTER_REGION=us-west-2\n    ```", "```py\n    eksctl utils associate-iam-oidc-provider --cluster $CLUSTER_NAME --approve -v4\n    ```", "```py\n    aws eks update-kubeconfig --name $CLUSTER_NAME --region ${AWS_REGION}\n    ```", "```py\n    export KUBEFLOW_VERSION=v1.5.1\n    ```", "```py\n    export AWS_VERSION=v1.5.1-aws-b1.0.0\n    ```", "```py\n    git clone https://github.com/awslabs/kubeflow-manifests.git && cd kubeflow-manifests\n    ```", "```py\n    git checkout ${AWS_VERSION}\n    ```", "```py\n    git clone --branch ${KUBEFLOW_VERSION} \\\n    ```", "```py\n    https://github.com/kubeflow/manifests.git upstream\n    ```", "```py\n    cd deployments/vanilla\n    ```", "```py\n    while ! kustomize build . | kubectl apply -f -; do echo \"Retrying\"; sleep 30; done\n    ```", "```py\n    ns_array=(kubeflow kubeflow-user-example-com kserve cert-manager istio-system auth knative-eventing knative-serving)\n    ```", "```py\n    for i in ${ns_array[@]}; do \n    ```", "```py\n      echo \"[+] kubectl get pods -n $i\"\n    ```", "```py\n      kubectl get pods -n $i; \n    ```", "```py\n      echo \"---\"\n    ```", "```py\n    done\n    ```", "```py\n    kubectl port-forward svc/istio-ingressgateway -n istio-system 8080:80 --address=localhost\n    ```", "```py\n    def process_data(...):\n    ```", "```py\n        import pandas as pd    \n    ```", "```py\n        df_all_data = pd.read_csv(df_all_data_path)\n    ```", "```py\n        # and so on...\n    ```", "```py\n    def evaluate_model(\n    ```", "```py\n        model_path: InputPath(str),\n    ```", "```py\n        df_test_data_path: InputPath(str)):\n    ```", "```py\n        import pandas as pd\n    ```", "```py\n        from joblib import load\n    ```", "```py\n        df_test_data = pd.read_csv(df_test_data_path)\n    ```", "```py\n        model = load(model_path)\n    ```", "```py\n        # and so on...\n    ```", "```py\n    process_data_op = create_component_from_func(\n    ```", "```py\n        process_data, \n    ```", "```py\n        packages_to_install=['pandas', 'sklearn']\n    ```", "```py\n    )\n    ```", "```py\n    import kfp\n    ```", "```py\n    from kfp import dsl\n    ```", "```py\n    from kfp.components import InputPath, OutputPath\n    ```", "```py\n    from kfp.components import create_component_from_func\n    ```", "```py\n    def download_dataset(\n    ```", "```py\n        df_all_data_path: OutputPath(str)):\n    ```", "```py\n        import pandas as pd\n    ```", "```py\n        url=\"https://bit.ly/3POP8CI\"\n    ```", "```py\n        df_all_data = pd.read_csv(url)\n    ```", "```py\n        print(df_all_data)\n    ```", "```py\n        df_all_data.to_csv(\n    ```", "```py\n            df_all_data_path, \n    ```", "```py\n            header=True, \n    ```", "```py\n            index=False)\n    ```", "```py\n    def process_data(\n    ```", "```py\n        df_all_data_path: InputPath(str), \n    ```", "```py\n        df_training_data_path: OutputPath(str), \n    ```", "```py\n        df_test_data_path: OutputPath(str)):\n    ```", "```py\n        import pandas as pd\n    ```", "```py\n        from sklearn.model_selection import \\\n    ```", "```py\n            train_test_split\n    ```", "```py\n        df_all_data = pd.read_csv(df_all_data_path)\n    ```", "```py\n        print(df_all_data)\n    ```", "```py\n        mem = 'management_experience_months'\n    ```", "```py\n        ms = 'monthly_salary'\n    ```", "```py\n        X = df_all_data[mem].values \n    ```", "```py\n        y = df_all_data[ms].values\n    ```", "```py\n        X_train, X_test, y_train, y_test = \\\n    ```", "```py\n            train_test_split(\n    ```", "```py\n                X, y, test_size=0.3, random_state=0\n    ```", "```py\n            )\n    ```", "```py\n        df_training_data = pd.DataFrame({ \n    ```", "```py\n            'monthly_salary': y_train, \n    ```", "```py\n            'management_experience_months': X_train\n    ```", "```py\n        })\n    ```", "```py\n        df_training_data.to_csv(\n    ```", "```py\n            df_training_data_path, \n    ```", "```py\n            header=True, index=False\n    ```", "```py\n        )\n    ```", "```py\n        df_test_data = pd.DataFrame({ \n    ```", "```py\n            'monthly_salary': y_test, \n    ```", "```py\n            'management_experience_months': X_test\n    ```", "```py\n        })\n    ```", "```py\n        df_test_data.to_csv(\n    ```", "```py\n            df_test_data_path, \n    ```", "```py\n            header=True, index=False\n    ```", "```py\n        )\n    ```", "```py\n    def train_model(\n    ```", "```py\n        df_training_data_path: InputPath(str),\n    ```", "```py\n        model_path: OutputPath(str)):\n    ```", "```py\n        import pandas as pd\n    ```", "```py\n        from sklearn.linear_model import LinearRegression\n    ```", "```py\n        from joblib import dump\n    ```", "```py\n        df_training_data = pd.read_csv(\n    ```", "```py\n            df_training_data_path\n    ```", "```py\n        )\n    ```", "```py\n        print(df_training_data)\n    ```", "```py\n        mem = 'management_experience_months'\n    ```", "```py\n        X_train = df_training_data[mem].values\n    ```", "```py\n        ms = 'monthly_salary'\n    ```", "```py\n        y_train = df_training_data[ms].values\n    ```", "```py\n        model = LinearRegression().fit(\n    ```", "```py\n            X_train.reshape(-1, 1), y_train\n    ```", "```py\n        )\n    ```", "```py\n        print(model)\n    ```", "```py\n        dump(model, model_path)\n    ```", "```py\n    def evaluate_model(\n    ```", "```py\n        model_path: InputPath(str),\n    ```", "```py\n        df_test_data_path: InputPath(str)):\n    ```", "```py\n        import pandas as pd\n    ```", "```py\n        from joblib import load\n    ```", "```py\n        df_test_data = pd.read_csv(df_test_data_path)\n    ```", "```py\n        mem = 'management_experience_months'\n    ```", "```py\n        ms = 'monthly_salary'\n    ```", "```py\n        X_test = df_test_data[mem].values\n    ```", "```py\n        y_test = df_test_data[ms].values\n    ```", "```py\n        model = load(model_path)\n    ```", "```py\n        print(model.score(X_test.reshape(-1, 1), y_test))\n    ```", "```py\n    def perform_sample_prediction(\n    ```", "```py\n        model_path: InputPath(str)):\n    ```", "```py\n        from joblib import load\n    ```", "```py\n        model = load(model_path)\n    ```", "```py\n        print(model.predict([[42]])[0])\n    ```", "```py\n    download_dataset_op = create_component_from_func(\n    ```", "```py\n        download_dataset, \n    ```", "```py\n        packages_to_install=['pandas']\n    ```", "```py\n    )\n    ```", "```py\n    process_data_op = create_component_from_func(\n    ```", "```py\n        process_data, \n    ```", "```py\n        packages_to_install=['pandas', 'sklearn']\n    ```", "```py\n    )\n    ```", "```py\n    train_model_op = create_component_from_func(\n    ```", "```py\n        train_model, \n    ```", "```py\n        packages_to_install=[\n    ```", "```py\n            'pandas', 'sklearn', 'joblib'\n    ```", "```py\n        ]\n    ```", "```py\n    )\n    ```", "```py\n    evaluate_model_op = create_component_from_func(\n    ```", "```py\n        evaluate_model, \n    ```", "```py\n        packages_to_install=[\n    ```", "```py\n            'pandas', 'joblib', 'sklearn'\n    ```", "```py\n        ]\n    ```", "```py\n    )\n    ```", "```py\n    perform_sample_prediction_op = \\\n    ```", "```py\n        create_component_from_func(\n    ```", "```py\n            perform_sample_prediction, \n    ```", "```py\n            packages_to_install=['joblib', 'sklearn']\n    ```", "```py\n        )\n    ```", "```py\n    @dsl.pipeline(\n    ```", "```py\n        name='Basic pipeline',\n    ```", "```py\n        description='Basic pipeline'\n    ```", "```py\n    )\n    ```", "```py\n    def basic_pipeline():\n    ```", "```py\n        DOWNLOAD_DATASET = download_dataset_op()\n    ```", "```py\n        PROCESS_DATA = process_data_op(\n    ```", "```py\n            DOWNLOAD_DATASET.output\n    ```", "```py\n        )\n    ```", "```py\n        TRAIN_MODEL = train_model_op(\n    ```", "```py\n            PROCESS_DATA.outputs['df_training_data']\n    ```", "```py\n        )\n    ```", "```py\n        EVALUATE_MODEL = evaluate_model_op(\n    ```", "```py\n            TRAIN_MODEL.outputs['model'], \n    ```", "```py\n            PROCESS_DATA.outputs['df_test_data']\n    ```", "```py\n        )\n    ```", "```py\n        PERFORM_SAMPLE_PREDICTION = \\\n    ```", "```py\n            perform_sample_prediction_op(\n    ```", "```py\n                TRAIN_MODEL.outputs['model']\n    ```", "```py\n            )\n    ```", "```py\n        PERFORM_SAMPLE_PREDICTION.after(EVALUATE_MODEL)\n    ```", "```py\n    kfp.compiler.Compiler().compile(\n    ```", "```py\n        basic_pipeline, \n    ```", "```py\n        'basic_pipeline.yaml'\n    ```", "```py\n    )\n    ```", "```py\n    kubectl port-forward svc/istio-ingressgateway -n istio-system 8080:80 --address=localhost\n    ```", "```py\n    cd ~/environment/ch10/kubeflow-manifests/\n    ```", "```py\n    cd deployments/vanilla/\n    ```", "```py\n    kustomize build . | kubectl delete -f -\n    ```", "```py\n    eksctl delete cluster --region $CLUSTER_REGION --name $CLUSTER_NAME\n    ```"]