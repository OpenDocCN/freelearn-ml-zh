["```py\nwget https://repo.continuum.io/archive/Anaconda3-5.0.1-Linux-x86_64.sh\nbash Anaconda3-5.0.1-MacOSX-x86_64.sh\n```", "```py\nwget https://repo.continuum.io/archive/Anaconda3-5.0.1-MacOSX-x86_64.sh\nbash Anaconda3-5.0.1-MacOSX-x86_64.sh\n```", "```py\nexport PATH=\"$PATH_TO_ANACONDA3/anaconda3/bin:$PATH\" \n```", "```py\nimport numpy as np \n\nA = [[1, 2],[3, 4]]\n\n# transpose A \nnp.transpose(A)\n```", "```py\nimport matplotlib.pyplot as plt \n```", "```py\n%matplotlib inline \n```", "```py\ndef plot_img(input_image): \n    \"\"\" \n    Takes in image \n    Plots image using matplotlib\n    \"\"\" \n    plt.figure(figsize=(12,8))\n\n    # change color channels order for matplotlib \n    plt.imshow(input_image)\n\n    # For easier view, turn off axis around image \n    plt.axis('off')\n    plt.show()\n```", "```py\nfrom scipy import linalg\n\nA = [[5, 6], [7, 8]]\neig_vals, eig_vectors = linalg.eig(A)\n```", "```py\njupyter notebook\n```", "```py\nconda install -c conda-forge opencv\n```", "```py\nsudo apt-get install build-essential\nsudo apt-get install cmake git libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev libswscale-dev\nsudo apt-get install libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff-dev libjasper-dev libdc1394-22-dev\n```", "```py\n# download opencv \nwget https://github.com/opencv/opencv/archive/3.3.0.zip\nunzip 3.3.0.zip\nmv opencv-3.3.0 opencv\nrm -rf 3.3.0.zip\n\n# install opencv \ncd opencv \nmkdir build && cd build\ncmake -D -DPYTHON_INCLUDE_DIR=$PATH_TO_ANACONDA/anaconda3/include/python3.6m/ \\\n -DPYTHON_EXECUTABLE=$PATH_TO_ANACONDA/anaconda3/bin/python \\\n -DPYTHON_PACKAGES_PATH=$PATH_TO_ANACONDA/anaconda3/lib/python3.6/site-packages \\\n -DINSTALL_PYTHON_EXAMPLES=ON \\\n -DCMAKE_INSTALL_PREFIX=$PATH_TO_ANACONDA/anaconda3 \\\n -DWITH_QT=ON \\\n -DFORCE_VTK=ON \\\n -DWITH_GDAL=ON \\\n -DWITH_FFMPEG=ON \\\n -DWITH_TBB=ON \\\n -DWITH_XINE=ON \\\n -DWITH_OPENCL=OFF \\\n -DBUILD_EXAMPLES=ON ..\n\nmake -j4\nmake install\n\n```", "```py\n# download opencv \nwget https://github.com/opencv/opencv/archive/3.3.0.zip\nunzip 3.3.0.zip\nmv opencv-3.3.0 opencv\nrm -rf 3.3.0.zip\n```", "```py\n# opencv contrib code \nwget https://github.com/opencv/opencv_contrib/archive/3.3.0.zip\nunzip 3.3.0.zip\nmv opencv_contrib-3.3.0 opencv_contrib\nrm -rf 3.3.0.zip\n```", "```py\ncd opencv \nmkdir build && cd build\ncmake -D -DOPENCV_EXTRA_MODULES_PATH=$PATH_TO_CONTRIB/opencv_contrib/modules \\\n -DPYTHON_INCLUDE_DIR=$PATH_TO_ANACONDA/anaconda3/include/python3.6m/ \\\n -DPYTHON_EXECUTABLE=$PATH_TO_ANACONDA/anaconda3/bin/python \\\n -DPYTHON_PACKAGES_PATH=$PATH_TO_ANACONDA/anaconda3/lib/python3.6/site-packages \\\n -DINSTALL_PYTHON_EXAMPLES=ON \\\n -DCMAKE_INSTALL_PREFIX=$PATH_TO_ANACONDA/anaconda3 \\\n -DWITH_QT=ON \\\n -DFORCE_VTK=ON \\\n -DWITH_GDAL=ON \\\n -DWITH_FFMPEG=ON \\\n -DWITH_TBB=ON \\\n -DWITH_XINE=ON \\\n -DWITH_OPENCL=OFF \\\n -DBUILD_EXAMPLES=ON ..\n\nmake -j4\nmake install\n```", "```py\nimport cv2\nprint(cv2.__version__)\n```", "```py\n img = cv2.imread('flower.png')\n```", "```py\ncv2.imwrite('image.png', img)\n```", "```py\n# to use default usb camera set the value to 0\nvideo_capture = cv2.VideoCapture(0)\n```", "```py\n# to use video file, set filename \nvideo_capture = cv2.VideoCapture('video.avi')\n```", "```py\nwhile(True):\n # get each frame\n ret, frame = video_capture.read()\n\n # if no frame available then quit\n if not ret:\n print(\"Frame not available\")\n break\n\n # show read frame in window\n cv2.imshow('frame', frame)\n\n # escape the loop on pressing 'q'\n if cv2.waitKey(1) & 0xFF == ord('q'):\n break\n```", "```py\npip install tensorflow=1.4.0\n```", "```py\npip install tensorflow-gpu=1.4.0\n```", "```py\npython -c \"import tensorflow as tf;print(tf.__version__)\"\n```", "```py\npip install keras\n```", "```py\npip install keras==2.1.2\n```", "```py\npython -c \"import keras;print(keras.__version__)\"\n```", "```py\nfrom __future__ import print_function\n\nfrom keras.datasets import mnist\nimport matplotlib.pyplot as plt \n\n# Download and load dataset \n(x_train, y_train), (x_test, y_test) = mnist.load_data()\n\n# to know the size of data\nprint(\"Train data shape:\", x_train.shape, \"Test data shape:\", x_test.shape)\n\n# plot sample image\nidx = 0\nprint(\"Label:\",y_train[idx])\nplt.imshow(x_train[idx], cmap='gray')\nplt.axis('off')\nplt.show()\n```", "```py\nfrom __future__ import print_function\n\nfrom keras.datasets import cifar10\nimport matplotlib.pyplot as plt \n\n# Download and load dataset \n(x_train, y_train), (x_test, y_test) = cifar10.load_data()\nlabels = ['airplane', 'automobile', 'bird', 'cat', 'deer', 'dog', 'frog', 'horse', 'ship', 'truck']\n# to know the size of data\nprint(\"Train data shape:\", x_train.shape, \"Test data shape:\", x_test.shape)\n\n# plot sample image\nidx = 1500\nprint(\"Label:\",labels[y_train[idx][0]])\nplt.imshow(x_train[idx])\nplt.axis('off')\nplt.show()\n```", "```py\n<annotation>\n  <folder>VOC2012</folder>\n  <filename>2007_000033.jpg</filename>\n  <source>\n    <database>The VOC2007 Database</database>\n    <annotation>PASCAL VOC2007</annotation>\n    <image>flickr</image>\n  </source>\n  <size>\n    <width>500</width>\n    <height>366</height>\n    <depth>3</depth>\n  </size>\n  <segmented>1</segmented>\n  <object>\n    <name>aeroplane</name>\n    <pose>Unspecified</pose>\n    <truncated>0</truncated>\n    <difficult>0</difficult>\n    <bndbox>\n      <xmin>9</xmin>\n      <ymin>107</ymin>\n      <xmax>499</xmax>\n      <ymax>263</ymax>\n    </bndbox>\n  </object>\n  <object>\n    <name>aeroplane</name>\n    <pose>Left</pose>\n    <truncated>0</truncated>\n    <difficult>0</difficult>\n    <bndbox>\n      <xmin>421</xmin>\n      <ymin>200</ymin>\n      <xmax>482</xmax>\n      <ymax>226</ymax>\n    </bndbox>\n  </object>\n  <object>\n    <name>aeroplane</name>\n    <pose>Left</pose>\n    <truncated>1</truncated>\n    <difficult>0</difficult>\n    <bndbox>\n      <xmin>325</xmin>\n      <ymin>188</ymin>\n      <xmax>411</xmax>\n      <ymax&amp;gt;223</ymax>\n    </bndbox>\n  </object>\n</annotation>\n```", "```py\ngit clone https://github.com/cocodataset/cocoapi.git\ncd cocoapi/PythonAPI\nmake\n```"]