["```py\nmyfiles <- list.files(path = \"../MachineLearning/Banks_model/Data\", pattern = \"20\",  full.names = TRUE)\n\n print(myfiles)\n##  [1] \"../MachineLearning/Banks_model/Data/2002\"\n##  [2] \"../MachineLearning/Banks_model/Data/2003\"\n##  [3] \"../MachineLearning/Banks_model/Data/2004\"\n##  [4] \"../MachineLearning/Banks_model/Data/2005\"\n##  [5] \"../MachineLearning/Banks_model/Data/2006\"\n##  [6] \"../MachineLearning/Banks_model/Data/2007\"\n##  [7] \"../MachineLearning/Banks_model/Data/2008\"\n##  [8] \"../MachineLearning/Banks_model/Data/2009\"\n##  [9] \"../MachineLearning/Banks_model/Data/2010\"\n## [10] \"../MachineLearning/Banks_model/Data/2011\"\n## [11] \"../MachineLearning/Banks_model/Data/2012\"\n## [12] \"../MachineLearning/Banks_model/Data/2013\"\n## [13] \"../MachineLearning/Banks_model/Data/2014\"\n## [14] \"../MachineLearning/Banks_model/Data/2015\"\n## [15] \"../MachineLearning/Banks_model/Data/2016\"\n```", "```py\nlibrary(readr)\n\n t <- proc.time()\n\n for (i in 1:length(myfiles)){\n\n tables<-list()\n myfiles <- list.files(path = \"../MachineLearning/Banks_model/Data\", pattern = \"20\",  full.names = TRUE)\n\n filelist <- list.files(path = myfiles[i], pattern = \"*\",  full.names = TRUE)\n filelist<-filelist[1:(length(filelist)-1)]\n\n for (h in 1:length(filelist)){\n\n aux = as.data.frame(read_delim(filelist[h],  \"\\t\", escape_double = FALSE, col_names = FALSE, trim_ws = TRUE, skip = 2))\n\n variables<-colnames(as.data.frame(read_delim(filelist[h],  \"\\t\", escape_double = FALSE, col_names = TRUE, trim_ws = TRUE, skip = 0)))\n\n colnames(aux)<-variables\n\n dataset_name<-paste(\"aux\",h,sep='')\n tables[[h]]<-assign(dataset_name,aux)\n\n }\n\n final_data_name<-paste(\"year\",i+2001,sep='')\n union <- Reduce(function(x, y) merge(x, y, all=T,\n     by=c(\"ID RSSD\",\"Reporting Period\")), tables, accumulate=F)\n\n assign(final_data_name,union)\n rm(list=ls()[! ls() %in% c(ls(pattern=\"year*\"),\"tables\",\"t\")])\n }\n\n proc.time() - t\n```", "```py\nrm(tables)\n database<-rbind(year2002,year2003,year2004,year2005,year2006,year2007,year2008,year2009,year2010,year2011,year2012,year2013,year2014,year2015,year2016)\n```", "```py\nrm(list=ls()[! ls() %in% c(ls(pattern=\"database\"))])\n```", "```py\nprint(\"Number of observations:\")\n## [1] \"Number of observations:\"\nprint(nrow(database))\n## [1] 420404\nprint(\"Number of columns/variables:\")\n## [1] \"Number of columns/variables:\"\nncol(database)\n## [1] 1571\n```", "```py\nhead(database[,1:5])\n ##   ID RSSD       Reporting Period UBPR1795 UBPR3123.x UBPR4635\n ## 1 1000052 12/31/2002 11:59:59 PM      958       1264      996\n ## 2 1000100 12/31/2002 11:59:59 PM      -26       2250       33\n ## 3 1000276 12/31/2002 11:59:59 PM       46        719       86\n ## 4 1000409 12/31/2002 11:59:59 PM    13926      57059    19212\n ## 5 1000511 12/31/2002 11:59:59 PM       37        514       86\n ## 6 1000557 12/31/2002 11:59:59 PM        0        120       16\n```", "```py\ndatabase[,grep(\".x\",colnames(database))]<-NULL\n```", "```py\nvar_names<-names(database)\n\n var_names<-gsub(\".y\",\"\",var_names)\n\n colnames(database)<-var_names\n\n rm(var_names)\n```", "```py\ndatabase[,grep(\"X\",colnames(database))]<-NULL\n```", "```py\nsave.image(\"Data1.RData\")\n```", "```py\nclass(database$'Reporting Period')\n## [1] \"character\"\n```", "```py\ndatabase$Date<-substr(database$'Reporting Period',1,10)\n```", "```py\ndatabase$Date<-as.Date(database$Date,\"%m/%d/%Y\")\n```", "```py\ndatabase$'Reporting Period'<-NULL\n```", "```py\ndatabase<-database[as.numeric(format(database$Date, \"%m\"))==12,]\n```", "```py\nprint(\"Observations in the filtered dataset:\")\n## [1] \"Observations in the filtered dataset:\"\nnrow(database)\n## [1] 110239\n```", "```py\nprint(\"Columns in the filtered dataset:\")\n## [1] \"Columns in the filtered dataset:\"\nncol(database)\n## [1] 1494\n```", "```py\nsave.image(\"Data2.RData\")\n```", "```py\ndatabase_names<-data.frame(colnames(database))\n```", "```py\nwrite.csv(database_names,file=\"database_names.csv\")\nrm(database_names)\n```", "```py\ndownload.file(\"https://www.fdic.gov/bank/individual/failed/banklist.csv\", \"failed_banks.csv\",method=\"auto\", quiet=FALSE, mode = \"wb\", cacheOK = TRUE)\n```", "```py\nfailed_banks<-read.csv(\"failed_banks.csv\", header=TRUE)\n```", "```py\nstr(failed_banks) \n```", "```py\nhead(failed_banks,n=10)# First 10 rows of dataset\n ##                                                Bank.Name\n ## 1                    Washington Federal Bank for Savings\n ## 2        The Farmers and Merchants State Bank of Argonia\n ## 3                                    Fayette County Bank\n ## 4  Guaranty Bank, (d/b/a BestBank in Georgia & Michigan)\n ## 5                                         First NBC Bank\n ## 6                                          Proficio Bank\n ## 7                          Seaway Bank and Trust Company\n ## 8                                 Harvest Community Bank\n ## 9                                            Allied Bank\n ## 10                          The Woodbury Banking Company\n ##                  City ST  CERT               Acquiring.Institution\n ## 1             Chicago IL 30570                  Royal Savings Bank\n ## 2             Argonia KS 17719                         Conway Bank\n ## 3          Saint Elmo IL  1802           United Fidelity Bank, fsb\n ## 4           Milwaukee WI 30003 First-Citizens Bank & Trust Company\n ## 5         New Orleans LA 58302                        Whitney Bank\n ## 6  Cottonwood Heights UT 35495                   Cache Valley Bank\n ## 7             Chicago IL 19328                 State Bank of Texas\n ## 8          Pennsville NJ 34951 First-Citizens Bank & Trust Company\n ## 9            Mulberry AR    91                        Today's Bank\n ## 10           Woodbury GA 11297                         United Bank\n ##    Closing.Date Updated.Date\n ## 1     15-Dec-17    21-Feb-18\n ## 2     13-Oct-17    21-Feb-18\n ## 3     26-May-17    26-Jul-17\n ## 4      5-May-17    22-Mar-18\n ## 5     28-Apr-17     5-Dec-17\n ## 6      3-Mar-17     7-Mar-18\n ## 7     27-Jan-17    18-May-17\n ## 8     13-Jan-17    18-May-17\n ## 9     23-Sep-16    25-Sep-17\n ## 10    19-Aug-16    13-Dec-18\n```", "```py\nclass(failed_banks$Closing.Date)\n ## [1] \"factor\"\n```", "```py\nlibrary(lubridate)\nfailed_banks$Closing.Date <- dmy(failed_banks$Closing.Date)\nclass(failed_banks$Closing.Date)\n ## [1] \"Date\"\n```", "```py\nfailed_banks$year<-as.numeric(format(failed_banks$Closing.Date, \"%Y\"))\n\n Failed_by_Year<-as.data.frame(table(failed_banks$year))\n colnames(Failed_by_Year)<-c(\"year\",\"Number_of_banks\")\n\n print(Failed_by_Year)\n ##    year Number_of_banks\n ## 1  2000               2\n ## 2  2001               4\n ## 3  2002              11\n ## 4  2003               3\n ## 5  2004               4\n ## 6  2007               3\n ## 7  2008              25\n ## 8  2009             140\n ## 9  2010             157\n ## 10 2011              92\n ## 11 2012              51\n ## 12 2013              24\n ## 13 2014              18\n ## 14 2015               8\n ## 15 2016               5\n ## 16 2017               8\n```", "```py\nlibrary(ggplot2)\n\n theme_set(theme_classic())\n\n # Plot\n g <- ggplot(Failed_by_Year, aes(year, Number_of_banks))\n g + geom_bar(stat=\"identity\", width = 0.5, fill=\"tomato2\") +\n       labs(title=\"Number of failed banks over time\",\n       caption=\"Source: FDIC list of failed banks\")+\n       theme(axis.text.x = element_text(angle=65, vjust=0.6))\n```", "```py\nmyfiles <- list.files(path = \"../MachineLearning/Banks_model/Data/IDS\", pattern = \"FFIEC CDR Call Bulk POR\",  full.names = TRUE)\n```", "```py\nIDs<-matrix(\"NA\",0,4)\n colnames(IDs)<-c(\"ID RSSD\",\"CERT\",\"Name\",\"id_year\")\n IDs<-as.data.frame(IDs)\n```", "```py\nfor (i in 1:length(myfiles))\n\n { \n aux <- read.delim(myfiles[i])\n aux$year<-as.numeric(2000+i)\n aux<-aux[,c(1,2,6,ncol(aux))]\n colnames(aux)<-c(\"ID RSSD\",\"CERT\",\"Name\",\"id_year\")\n IDs<-rbind(IDs,aux)\n }\n```", "```py\nhead(IDs)\n ##   ID RSSD  CERT                             Name id_year\n ## 1      37 10057           BANK OF HANCOCK COUNTY    2001\n ## 2     242  3850 FIRST COMMUNITY BANK XENIA-FLORA    2001\n ## 3     279 28868      MINEOLA COMMUNITY BANK, SSB    2001\n ## 4     354 14083                 BISON STATE BANK    2001\n ## 5     439 16498                     PEOPLES BANK    2001\n ## 6     457 10202                 LOWRY STATE BANK    2001\n```", "```py\nrm(list=setdiff(ls(), c(\"database\",\"failed_banks\",\"IDs\")))\n```", "```py\nfailed_banks$CERT<-as.numeric(failed_banks$CERT)\n\n IDs$CERT<-as.numeric(IDs$CERT)\n```", "```py\nfailed_banks$id_year<-failed_banks$year-1\n```", "```py\nfailed_banks<-merge(failed_banks,IDs,by.x=c(\"CERT\",\"id_year\"),all.x=TRUE)\nfailed_banks<-failed_banks[,c(\"CERT\",\"ID RSSD\",\"Closing.Date\")]\nhead(failed_banks)\n ##   CERT ID RSSD Closing.Date\n ## 1   91   28349   2016-09-23\n ## 2  151  270335   2011-02-18\n ## 3  182  454434   2010-09-17\n ## 4  416    3953   2012-06-08\n ## 5  513  124773   2011-05-20\n ## 6  916  215130   2014-10-24\n```", "```py\nsave.image(\"Data3.RData\")\n```", "```py\ndatabase<-merge(database,failed_banks,by=c(\"ID RSSD\"),all.x = TRUE)\n## Warning in merge.data.frame(database, failed_banks, by = c(\"ID RSSD\"),\n ## all.x = TRUE): column name 'UBPR4340' is duplicated in the result\n```", "```py\ngrep(\"UBPR4340\",colnames(database))\n## [1]  852 1454\n```", "```py\ndatabase[,1454]<-NULL\n```", "```py\nnrow(database[!is.na(database$Closing.Date),c('ID RSSD','Date','Closing.Date')])\n## [1] 3705\n```", "```py\nfailed_data<-database[!is.na(database$Closing.Date),c('ID RSSD','Date','Closing.Date')]\n head(failed_data)\n ##     ID RSSD       Date Closing.Date\n ## 259    2451 2003-12-31   2010-07-23\n ## 260    2451 2007-12-31   2010-07-23\n ## 261    2451 2008-12-31   2010-07-23\n ## 262    2451 2005-12-31   2010-07-23\n ## 263    2451 2004-12-31   2010-07-23\n ## 264    2451 2009-12-31   2010-07-23\n```", "```py\ndatabase$Diff<-as.numeric((database$Closing.Date-database$Date)/365)\n```", "```py\ndatabase$Default0<-ifelse(database$Diff>=1 | is.na(database$Diff),0,1)\n```", "```py\ntable(database$Default0)\n##\n ##      0      1\n ## 109763    476\n```", "```py\nhead(database[database$Default0==1,c('ID RSSD','Date','Closing.Date','Diff')],1)\n ##     ID RSSD       Date Closing.Date      Diff\n ## 264    2451 2009-12-31   2010-07-23 0.5589041\ndatabase$Default0<-NULL\n```", "```py\nsave.image(\"Data4.RData\")\n```", "```py\ncolnames(database)[1]<-\"ID_RSSD\"\n```", "```py\ndatabase_Failed<-database[!is.na(database$Diff),]\n```", "```py\nnrow(database_Failed)\n## [1] 3705\n```", "```py\nhead(database_Failed[,c(\"ID_RSSD\",\"Date\",\"Diff\")])\n\n ##     ID_RSSD       Date      Diff\n ## 259    2451 2003-12-31 6.5643836\n ## 260    2451 2007-12-31 2.5616438\n ## 261    2451 2008-12-31 1.5589041\n ## 262    2451 2005-12-31 4.5616438\n ## 263    2451 2004-12-31 5.5616438\n ## 264    2451 2009-12-31 0.5589041\n```", "```py\naux<-database_Failed[,c('ID_RSSD','Diff')]\n\nlibrary(sqldf)\naux<-sqldf(\"SELECT ID_RSSD,\n       min(Diff) as min_diff,\n       max(Diff) as max_diff\n       from aux group by ID_RSSD\")\n\n head(aux)\n\n ##   ID_RSSD  min_diff max_diff\n ## 1    2451 0.5589041 7.564384\n ## 2    3953 0.4383562 9.443836\n ## 3   15536 0.8301370 6.835616\n ## 4   16337 0.7506849 7.756164\n ## 5   20370 0.4027397 8.408219\n ## 6   20866 0.5589041 7.564384\n```", "```py\ndatabase_Failed<-merge(database_Failed,aux,by=c(\"ID_RSSD\"))\n```", "```py\ndatabase_Failed<-database_Failed[database_Failed$Diff==database_Failed$min_diff,]\n```", "```py\ndatabase_Failed$min_diff<-NULL\ndatabase_Failed$max_diff<-NULL\n```", "```py\ndatabase_NonFailed<-database[is.na(database$Diff),]\n```", "```py\nset.seed(10)\n```", "```py\nRandom<-runif(nrow(database_NonFailed))\n```", "```py\ndatabase_NonFailed<-cbind(database_NonFailed,Random)\n```", "```py\nmax<-aggregate(database_NonFailed$Random, by = list(database_NonFailed$ID_RSSD), max)\n\n colnames(max)<-c(\"ID_RSSD\",\"max\")\n```", "```py\ndatabase_NonFailed<-merge(database_NonFailed,max,all.x=TRUE)\n database_NonFailed<-    database_NonFailed[database_NonFailed$max==database_NonFailed$Random,]\n```", "```py\ndatabase_NonFailed$max<-NULL\ndatabase_NonFailed$Random<-NULL\n```", "```py\ndim(database_NonFailed)\n\n## [1] 9654 1496\n```", "```py\nModel_database<-rbind(database_NonFailed,database_Failed)\n```", "```py\nModel_database$Default<-ifelse(is.na(Model_database$Diff),0,1)\n```", "```py\nrm(list=setdiff(ls(), c(\"Model_database\")))\n```", "```py\nModel_database$CERT<-NULL\n\n Model_database$Closing.Date<-NULL\n\n Model_database$Diff<-NULL\n```", "```py\nsave.image(\"Data5.RData\")\n```"]