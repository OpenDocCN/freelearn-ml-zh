["```py\nimport pandas as pd\ny_proxy = pd.cut(y_train, bins=10, labels=False) \n```", "```py\nimport numpy as np\nbins = int(np.floor(1 + np.log2(len(X_train)))) \n```", "```py\nimport random\ndef Bootstrap(n, n_iter=3, random_state=None):\n    \"\"\"\n    Random sampling with replacement cross-validation generator.\n    For each iter a sample bootstrap of the indexes [0, n) is\n    generated and the function returns the obtained sample\n    and a list of all the excluded indexes.\n    \"\"\"\n    if random_state:\n        random.seed(random_state)\n    for j in range(n_iter):\n        bs = [random.randint(0, n-1) for i in range(n)]\n        out_bs = list({i for i in range(n)} - set(bs))\n        yield bs, out_bs \n```", "```py\nimport numpy as np\nimport pandas as pd\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import cross_val_predict\nfrom sklearn.metrics import roc_auc_score\ntrain = pd.read_csv(\"../input/tabular-playground-series-jan-2021/train.csv\")\ntest = pd.read_csv(\"../input/tabular-playground-series-jan-2021/test.csv\") \n```", "```py\ntrain = train.fillna(-1).drop([\"id\", \"target\"], axis=1)\ntest = test.fillna(-1).drop([\"id\", axis=1])\nX = train.append(test)\ny = [0] * len(train) + [1] * len(test) \n```", "```py\nmodel = RandomForestClassifier()\ncv_preds = cross_val_predict(model, X, y, cv=5, n_jobs=-1, method='predict_proba') \n```", "```py\nprint(roc_auc_score(y_true=y, y_score=cv_preds[:,1])) \n```", "```py\nprint(np.sum(cv_preds[:len(X), 1] > 0.5)) \n```", "```py\nmodel.fit(X, y)\nranks = sorted(list(zip(X.columns, model.feature_importances_)), \n               key=lambda x: x[1], reverse=True)\nfor feature, score in ranks:\n    print(f\"{feature:10} : {score:0.4f}\") \n```"]