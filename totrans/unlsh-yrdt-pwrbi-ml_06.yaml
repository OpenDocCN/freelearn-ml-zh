- en: '6'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Discovering New Features Using R and Python Visuals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [*Chapter 5*](B19500_05.xhtml#_idTextAnchor077) of this book, you discovered
    new columns and features for your queries using Power BI Desktop that will be
    migrated to the Power BI cloud service to train and test ML models. During your
    exploration and discovery of the data you also expanded the Power BI report that
    you will deliver to end users for interactive data exploration.
  prefs: []
  type: TYPE_NORMAL
- en: Before migrating your solution to the Power BI cloud service, you will take
    one last pass over the FAA Wildlife Strike data and seek out additional features
    to be added to the ML queries that will be used to build the Power BI ML models.
    In order to add some diverse capabilities to the analytic report, you’ll leverage
    R/Python visuals within Power BI. At the end of this chapter, you will be ready
    to publish your solution to the Power BI cloud service.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For this chapter, you’ll need the following resources:'
  prefs: []
  type: TYPE_NORMAL
- en: Power BI Desktop April 2023 or later (no licenses required)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: FAA Wildlife Strike data files from either the FAA website or the Packt GitHub
    repo
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'R installed on your local computer: [https://learn.microsoft.com/en-us/power-bi/create-reports/desktop-r-visuals](https://learn.microsoft.com/en-us/power-bi/create-reports/desktop-r-visuals)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Python installed on your local computer: [https://learn.microsoft.com/en-us/power-bi/connect-data/desktop-python-visuals](https://learn.microsoft.com/en-us/power-bi/connect-data/desktop-python-visuals)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring data with R visuals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Power BI has the capability to run R scripts and display R visuals. R is a powerful
    language that is often used by data scientists for statistics and ML. You will
    need to install R on your local machine to use it with Power BI Desktop per the
    instructions at [https://learn.microsoft.com/en-us/power-bi/create-reports/desktop-r-visuals](https://learn.microsoft.com/en-us/power-bi/create-reports/desktop-r-visuals).
  prefs: []
  type: TYPE_NORMAL
- en: There are numerous R visualizations that can be useful for data analysis and
    finding new features for ML models. The FAA Wildlife Strike data contains several
    True/False flags related to the portions of the aircraft struck, the location
    of damage, the ingestion of animals into the engines, and more. These values should
    fit nicely on an R correlation plot, which will graphically show flags that tend
    to correlate either positively or negatively. Let’s give it a shot!
  prefs: []
  type: TYPE_NORMAL
- en: 'You will follow three steps to find new features:'
  prefs: []
  type: TYPE_NORMAL
- en: Prep are the data for the R correlation plot.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Build the R correlation plot visualization and add it to your report.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Identify new features for your Power BI ML queries.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Note that if you don’t want to build all of these Power BI report pages as
    part of your journey through this book, the completed PBIT template for [*Chapter
    6*](B19500_06.xhtml#_idTextAnchor089) (including the R and Python components)
    is available at this link: [https://github.com/PacktPublishing/Unleashing-Your-Data-with-Power-BI-Machine-Learning-and-OpenAI/tree/main/Chapter-06](https://github.com/PacktPublishing/Unleashing-Your-Data-with-Power-BI-Machine-Learning-and-OpenAI/tree/main/Chapter-06).'
  prefs: []
  type: TYPE_NORMAL
- en: Preparing the data for the R correlation plot
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Converting the True/False columns to an integer column where `1` represents
    True and `0` represents False is necessary to prepare the data for the R correlation
    plot. Let’s identify the columns that will be used on the **Strike Reports** query
    of the **Curated Reporting** **Queries** group:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Ingested Other | Indicated Damage | Struck Random | Damaged Random |'
  prefs: []
  type: TYPE_TB
- en: '| Struck Windshield | Damaged Windshield | Struck Nose | Damaged Nose |'
  prefs: []
  type: TYPE_TB
- en: '| Struck Engine 1 | Damaged Engine 1 | Ingested Engine 1 | Struck Engine 2
    |'
  prefs: []
  type: TYPE_TB
- en: '| Damaged Engine 2 | Ingested Engine 2 | Struck Engine 3 | Damaged Engine 3
    |'
  prefs: []
  type: TYPE_TB
- en: '| Ingested Engine 3 | Struck Engine 4 | Damaged Engine 4 | Ingested Engine
    4 |'
  prefs: []
  type: TYPE_TB
- en: '| Struck Propeller | Damaged Propeller | Struck Wing or Rotor | Damaged Wing
    or Rotor |'
  prefs: []
  type: TYPE_TB
- en: '| Struck Fuselage | Damaged Fuselage | Struck Landing Gear | Damaged Landing
    Gear |'
  prefs: []
  type: TYPE_TB
- en: '| Struck Tail | Damaged Tail | Struck Lights | Damaged Lights |'
  prefs: []
  type: TYPE_TB
- en: '| Struck Other | Damaged Other |  |  |'
  prefs: []
  type: TYPE_TB
- en: Figure 6.1 – True/False columns related to wildlife strikes
  prefs: []
  type: TYPE_NORMAL
- en: 'If you were to change the data type of a column, and the column was being used
    in Power BI, you could potentially break a report or a DAX expression. Generally,
    it is a best practice to avoid changing data types unless absolutely necessary.
    Report users will also generally better understand the options of True or False
    rather than 1 or 0 in a report. Go ahead and create a new version of each column
    that is of an integer data type. Further down the road, you can decide which version
    to include in each dataset or ML query depending on the use case. Perform the
    following steps for the columns in *Figure 6**.1*:'
  prefs: []
  type: TYPE_NORMAL
- en: In the **Curated Reporting Queries** group, duplicate all of these columns.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename the new column to have `Int` at the end such that **Indicated Damage
    – Copy** becomes **Indicated** **Damage Int**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the data types of the new columns to `Whole Number`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Close & Apply** in Power Query to update the Power BI dataset.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: These flags are primarily related to damage and location of impact, but could
    also be useful for predicting the height and size of the animals. For example,
    the landing gear will probably not be struck above a certain height because it
    is only down for takeoffs and landings. If multiple parts of a plane are struck,
    it may correlate with a flock of birds versus a lone animal.
  prefs: []
  type: TYPE_NORMAL
- en: Now you can return to the Power BI report and build the R correlation plot visual!
  prefs: []
  type: TYPE_NORMAL
- en: Building the R correlation plot visualization and adding it to your report
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The integer versions of the True/False columns in the FAA Wildlife Strike data
    should now be available in your Power BI dataset. Also, per the technical requirements
    covered earlier in this chapter, you should have R installed on the local machine
    on which you’re running Power BI Desktop:'
  prefs: []
  type: TYPE_NORMAL
- en: Select the R script visual in Power BI Desktop, and add it to the canvas of
    a new page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the filters on the page to match `Airplane` and `greater than or equal to
    2014`. Add the integer **Indicated Damage Int** column to **Values**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.2 – R script visual in Power BI](img/B19500_06_002.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.2 – R script visual in Power BI
  prefs: []
  type: TYPE_NORMAL
- en: 'While the R visual is highlighted, a scripting window will be shown at the
    bottom of the page. Add some R code to activate the R correlation plot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.3 – Add the R code for an R correlation plot](img/B19500_06_003.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.3 – Add the R code for an R correlation plot
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the code that was added to the visual:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Now add the new integer columns that you created to **Values**, along with
    the original field that was added:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.4 – R correlation plot with True/False integer columns](img/B19500_06_004.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.4 – R correlation plot with True/False integer columns
  prefs: []
  type: TYPE_NORMAL
- en: The plot is expanded in Figure 6.5.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.5 – R correlation plot with True/False integer columns](img/B19500_06_005.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.5 – R correlation plot with True/False integer columns
  prefs: []
  type: TYPE_NORMAL
- en: Text for the columns in *Figure 6**.5* are too small to read, but represent
    all of the TRUE/FALSE indicators converted to integer values. The PBIT file for
    [*Chapter 6*](B19500_06.xhtml#_idTextAnchor089) in the GitHub repository allows
    you to view these values.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.6 – Code for R correlation plot with True/False integer columns.](img/B19500_06_006.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.6 – Code for R correlation plot with True/False integer columns.
  prefs: []
  type: TYPE_NORMAL
- en: Now you can dive into the data using an R correlation plot!
  prefs: []
  type: TYPE_NORMAL
- en: Identifying new features for your Power BI ML queries
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The R correlation plot displays circles that increase in size and color intensity
    to indicate positive and negative correlation levels. Blue indicates a positive
    correlation (where the values go up and down together), white indicates no correlation
    (values go up and down randomly related to each other), and red indicates a negative
    correlation (one value tends to go up when the other goes down).
  prefs: []
  type: TYPE_NORMAL
- en: 'Looking at the initial rendering of the R correlation plot in *Figure 6**.5*,
    there are not a great deal of blue or red circles besides the self-matches and
    a few light blue circles for different related damage flags. Adding a few filters
    to the page allows you to explore correlations within subsets of the data. The
    R correlation plot will re-calculate every time you select new filters. For example,
    *Figure 6**.7* has the following filters selected on the dataset:'
  prefs: []
  type: TYPE_NORMAL
- en: '`greater than or equal` `to 2014`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Airplane`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Large`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`3`, `4` or `5`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`blank`, `none`, or `other`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`1` or `2-10`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can see this in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.7 – When filters are selected, the R correlation plot is re-processed.](img/B19500_06_007.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.7 – When filters are selected, the R correlation plot is re-processed.
  prefs: []
  type: TYPE_NORMAL
- en: The text in the columns in *Figure 6**.7* is too small to read, but represent
    all of the True/False indicators converted to integer values. The PBIT file for
    [*Chapter 6*](B19500_06.xhtml#_idTextAnchor089) in the GitHub repository allows
    you to view these values.
  prefs: []
  type: TYPE_NORMAL
- en: 'After filtering down to a subset of data, correlations begin to emerge on the
    R correlation plot. Expand the visualization and focus on the **Indicated Damage
    Int** field correlations. The strongest correlations are for flags that also indicate
    some sort of damage. There are, however, some weaker positive correlations for
    other flags:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.8 – A few weak positive correlations shown for Indicated Damage](img/B19500_06_008.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.8 – A few weak positive correlations shown for Indicated Damage
  prefs: []
  type: TYPE_NORMAL
- en: 'After exploring additional filter combinations with the R correlation plot,
    the following features will be added to the ML queries:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Feature** | **Predict Damage** | **Predict Size** | **Predict Height**
    |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Ingested Other | Yes | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| Struck Windshield | Yes | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| Struck Engine 1 | Yes | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| Damaged Engine 2 | No | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| Ingested Engine 3 | Yes | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| Struck Propeller | Yes | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| Struck Fuselage | Yes | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| Struck Tail | Yes | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| Struck Other | Yes | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| Damaged Windshield | No | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| Damaged Engine 1 | No | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| Ingested Engine 2 | Yes | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| Struck Engine 4 | Yes | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| Damaged Propeller | No | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| Damaged Fuselage | No | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| Damaged Tail | No | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| Damaged Other | No | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| Struck Random | Yes | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| Struck Nose | Yes | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| Ingested Engine 1 | Yes | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| Struck Engine 3 | Yes | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| Damaged Engine 4 | No | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| Struck Wing or Rotor | Yes | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| Struck Landing Gear | Yes | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| Struck Lights | Yes | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| Damaged Random | No | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| Damaged Nose | No | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| Struck Engine 2 | Yes | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| Damaged Engine 3 | No | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| Ingested Engine 4 | Yes | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| Damaged Wing or Rotor | No | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| Damaged Landing Gear | No | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| Damaged Lights | No | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: Figure 6.9 – Features will be added to the ML queries
  prefs: []
  type: TYPE_NORMAL
- en: You’ve discovered a great number of features for your ML queries, but you’re
    not done yet! You can also use Python visuals to explore data in Power BI, which
    is your next task.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring data with Python visuals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In addition to R, Power BI also supports Python queries and visuals. Python
    is a very popular language that is also frequently used by data scientists. Per
    the requirements at the beginning of this chapter, you’ll need to install Python
    on your local machine for Power BI Desktop: [https://learn.microsoft.com/en-us/power-bi/connect-data/desktop-python-visuals](https://learn.microsoft.com/en-us/power-bi/connect-data/desktop-python-visuals).'
  prefs: []
  type: TYPE_NORMAL
- en: In the FAA Wildlife Strike data, **Height** and **Speed** are both fields that
    can be recorded for reports. Height is a measure in feet from the ground at which
    an incident happened, while speed is a measure of the speed the aircraft was traveling
    when it was struck by wildlife. You will take a look at both of these metrics
    using Python histograms so that you can compare the distribution of those values
    when selecting different filters.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Preparing the data for the Python histogram.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Building the Python histogram visualization and add it to your report.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Identifying new features for your Power BI ML queries.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let’s proceed.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing the data for the Python histogram
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Both **Height** and **Speed** are integer columns that also contain empty values.
    Empty values with numeric columns of data can be tricky because you don’t know
    whether it is zero or unknown. For the report page, you filter out the empty values
    for each visualization. Otherwise, the integer columns are ready to go for your
    Python histogram data visualizations.
  prefs: []
  type: TYPE_NORMAL
- en: Building the Python histogram visualization and add it to your report
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Next, we need to build the visualization:'
  prefs: []
  type: TYPE_NORMAL
- en: Select the Python script visual in Power BI Desktop, and add it to the canvas
    of a new page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Set the filters on the page to match `Airplane` and `greater than or equal
    to 2014`. Add the integer **Speed** column to **Values**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.10 – Python visual with Speed under Values](img/B19500_06_010.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.10 – Python visual with Speed under Values
  prefs: []
  type: TYPE_NORMAL
- en: 'While the Python visual is highlighted, a scripting window will be visible
    at the bottom of the page. Add some Python code to activate the Python histogram
    with a title of `Speed for Incidents` `with Damage`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.11– Python code that renders a histogram in Power BI](img/B19500_06_011.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.11– Python code that renders a histogram in Power BI
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the code entered into the script editor as shown in *Figure 6**.11*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'For the filters on this visual, set `True` and `is not (Blank)`. Now you can
    render the Python histogram visualization:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.12 – A Python histogram for incidents with damage by speed](img/B19500_06_012.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.12 – A Python histogram for incidents with damage by speed
  prefs: []
  type: TYPE_NORMAL
- en: Now you can use the Python histogram visual to analyze the distribution of data!
  prefs: []
  type: TYPE_NORMAL
- en: Identifying new features for Power BI ML queries
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s look at the visual:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Copy and paste the visual, and rename the title to `Speed for Incidents without
    Damage`. Here’s the Python code, which can be entered in the same way as in *Figure
    6**.10*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Change the `False`, and you can compare the two visuals:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.13 – Compare the speed of incidents with or without damage](img/B19500_06_013.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.13 – Compare the speed of incidents with or without damage
  prefs: []
  type: TYPE_NORMAL
- en: Note that there are incidents without damage that are in the 1200 knots bucket,
    which skews the histogram further to the left.
  prefs: []
  type: TYPE_NORMAL
- en: Filter the page for `less than 700` to create comparable histograms. Also add
    some filters to the page (anything you’d like to explore) such as **Size**, **Effect
    on Flight**, and **Month Name**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, copy and paste both charts and replace `Speed` with `Height`. Filter
    the whole page such that `Height` is not blank. Here’s the Python code for the
    histogram of the heights when damage was reported:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'And here is the Python script for a histogram without damage:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You can now interactively view the distribution of **Height** and **Speed**
    with many different filter settings:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 6.14 – Interactive\uFEFF Python histograms for Height and Speed](img/B19500_06_014.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 6.14 – Interactive Python histograms for Height and Speed
  prefs: []
  type: TYPE_NORMAL
- en: Height and speed both appear to change when damage has been reported. As a result
    of your exploration using Python histograms, you will be adding both **Height**
    and **Speed** to the ML queries. Using R and Python visuals, you have verified
    numerous new features that can be used to train and test your ML models in Power
    BI.
  prefs: []
  type: TYPE_NORMAL
- en: Adding new features to the ML queries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'So far in this chapter, you have identified numerous new features to be added
    to the **Predict Damage**, **Predict Size**, and **Predict Height** ML queries
    for your Power BI ML models. As you did in section three of [*Chapter 5*](B19500_05.xhtml#_idTextAnchor077),
    *Adding New Features to the ML Queries in Power Query*, you can add these features
    to the ML queries in Power Query:'
  prefs: []
  type: TYPE_NORMAL
- en: Double-click on **Remove Other Columns** under **Applied Steps**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add each of the features in *Figure 6**.9* (also include **Speed** and **Height**).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Your screen should look like this while adding the features:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.15 – Select the columns to be added to the ML query](img/B19500_06_015.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.15 – Select the columns to be added to the ML query
  prefs: []
  type: TYPE_NORMAL
- en: After adding the new features, you may note that `empty`. For example, with
    **Speed**, the impact of a collision at 5 knots versus 500 knots should be expected
    to be very different when hitting a large animal. Empty values could represent
    many different scenarios such as missing data or unknown speed. You will evaluate
    a few different options for handling these missing values when you build and test
    the ML models in Power BI.
  prefs: []
  type: TYPE_NORMAL
- en: Future iterations of your solution may very well contain additional features
    that you discover. For now, you have numerous features that you have identified
    and added to queries that are architected for ML, and you are ready to journey
    forward into the Power BI cloud services!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you added R and Python visuals to your Power BI reports to
    discover new features in the FAA Wildlife Strike data. Using an R correlation
    plot, you were able to interactively slice and dice several incident flag values
    for positive and negative correlations. With Python histograms you took a look
    at the impact of speed and height on the outcomes for your planned Power BI ML
    models. Finally, you added new features to your **Predict Damage**, **Predict
    Size**, and **Predict Height** ML queries that will be used for ML in Power BI.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will begin migrating content to the Power BI cloud
    service. After migrating the Power BI dataset and report, you will then migrate
    the Power Query scripts to dataflows for use with Power BI ML.
  prefs: []
  type: TYPE_NORMAL
