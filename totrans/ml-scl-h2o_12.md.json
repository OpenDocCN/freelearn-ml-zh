["```py\nmodel.download_mojo(path=\"path/for/my/mojo\")\n```", "```py\nModel.download_mojo(path=\"path/for/my/mojo\", \n```", "```py\n                    get_genmodel_jar=True)\n```", "```py\n    Import java.io.*;\n    import hex.genmodel.easy.RowData;\n    import hex.genmodel.easy.EasyPredictModelWrapper;\n    import hex.genmodel.easy.prediction.*;\n    import hex.genmodel.MojoModel; \n    public class BatchFileScorer {\n      public static void main(String[] args) throws Exception{\n      // we will fill with steps 2 to 4 that follows\n      }\n    }\n    ```", "```py\n    // get input parameters\n    File fileToScore = new File(args[0]);\n    String pathToMojo = args[1];\n    boolean doShapley = args.length == 3\n      && args[2].equals(\"--shap\"); \n    ```", "```py\n    // Load the mojo (only once) and configure\n    EasyPredictModelWrapper.Config config = \n      new EasyPredictModelWrapper.Config();\n    config.setModel(MojoModel.load(pathToMojo);\n    if (doShapley) config.setEnableContributions(true);\n    EasyPredictModelWrapper model = \n      new EasyPredictModelWrapper(config);\n    ```", "```py\n    // get each record from the file\n    BufferedReader br = new BufferedReader(new\n      FileReader(fileToScore));\n    // we are skipping the first line (header line)\n    br.readLine();\n    String record = null;\n    while ((record = br.readLine()) != null) {\n      // Convert input record to type required by mojo api\n      RowData mojoRow = convertInput(record);\n      // make the prediction\n      BinomialModelPrediction p = model.predictBinomial(mojoRow);\n      // get results from p and format it to your needs\n      // in this case, format is csv to write to file\n      String outputString = formatOutput(record, p, doShapley);\n      // can write this to file \n      // but printing to screen for ease of code explanation\n      System.out.println(outputString);\n      }\n    ```", "```py\nprivate static RowData convertInput(String record) {\n```", "```py\n  String[] featureValues = record.split(\",\");\n```", "```py\n  RowData row = new RowData();\n```", "```py\n  row.put(\"purpose_te\", featureValues[0]);\n```", "```py\n  row.put(\"addr_state_te\", featureValues[1]);\n```", "```py\n  row.put(\"loan_amnt\", featureValues[2]);\n```", "```py\n  row.put(\"term\", featureValues[3]);\n```", "```py\n  row.put(\"installment\", featureValues[4]);\n```", "```py\n  row.put(\"grade\", featureValues[5]);\n```", "```py\n  // omitting features 6 to 24, see code in github repo \n```", "```py\n  row.put(\"emp_length_missing\", featureValues[25]);\n```", "```py\n  return row;\n```", "```py\n}\n```", "```py\nBinomialModelPrediction p = model.predictBinomial(mojoRow); \n```", "```py\nprivate static String formatOutput(String record,\n```", "```py\n  BinomialModelPrediction p, boolean doShapley) {\n```", "```py\n  // start the ouput string with the record being scored\n```", "```py\n  String outputString = record;\n```", "```py\n  // add prediction to output string\n```", "```py\n  outputString += \"   PREDICTION (good=0, bad=1): \" + p.label\n```", "```py\n  + \" \" + p.classProbabilities[0];\n```", "```py\n  // add Shapley values (bar-delimited) to output string\n```", "```py\n  if(doShapley) {\n```", "```py\n    outputString += \"  SHAP VALUES > 0.01: \";\n```", "```py\n    for (int i=0; i < p.contributions.length; i++) {\n```", "```py\n        // retrieving only Shap values over 0.01\n```", "```py\n        if (p.contributions[i] <  0.01) continue;\n```", "```py\n        outputString += model.getContributionNames()[i] + \": \"\n```", "```py\n        + p.contributions[i] + \"|\" ;\n```", "```py\n    }\n```", "```py\n    return outputString;\n```", "```py\n}\n```", "```py\njava -jar BatchFileScorer.jar \\  \npath/to/file/to/score \\\npath/to/mojo\n```", "```py\njava -cp h2o-genmodel.jar hex.genmodel.tools.PrintMojo \\ \n-i \"path/to/mojo\" \\\n-o tree.png \\\n--format png \\\n--tree 0\n```"]