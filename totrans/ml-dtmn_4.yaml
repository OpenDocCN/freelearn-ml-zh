- en: Improving Individual Models
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will see how we can improve different models, and we will
    see how to modify model options. We will also learn how to use different models
    and see how we can remove noise by removing predictors that are not really needed
    for predictions. You will also understand how to prepare additional data for the
    models, and we will see how we can add additional fields. Finally, you see how
    how oversampling and undersampling different categories of an outcome variable
    can make it more likely that the model that you end up using actually better understands
    the data.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the topics that will be covered in this chapter, and these
    are the ways in which models can be improved:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Modifying model options
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using different models
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removing noise
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Doing additional data preparation
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Balancing data (oversampling/undersampling)
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modifying model options
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Modifying model options to improve the model is one of the straightforward
    ways to improve a model. We will see how we can do this with the help of an example:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: 'We will create an SVM model just as we did in the second chapter:'
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5df9f40a-f416-4358-a497-5ded25fa0549.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
- en: Click on Status, go to the Expert tab, and select Expert under Mode. As we have
    seen in [Chapter 2](f4f20b86-4417-4c0c-a8b2-d0be16f28e20.xhtml), *Getting Started
    with Machine Learning*, whenever we are using SVM models, we need to modify their
    settings. Change the Regularization parameter to 5\. And, in the Kernel type,
    select Polynomial. Then, click on Run.
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will see a model created. Now, let''s do our next step of analyzing the
    model. Connect your generated model to an Analysis node from the Output palette.
    Open the Analysis node, and select the Coincidence matrices (for the symbolic
    targets option) and click on Run. This will be the result that will be acquired:'
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ca69616e-309c-453d-b08a-0ba3c5710a08.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
- en: The results clearly show that the model isn't consistent as there is a huge
    difference between the accuracy percentage of the training and the testing dataset.
    But, what we can see is the testing percentage is better than the testing percentage
    that we acquired for the linear model in [Chapter 2](f4f20b86-4417-4c0c-a8b2-d0be16f28e20.xhtml),
    *Getting Started with Machine Learning*, around 73%. Hence, maybe the polynomial
    model can do a better job but not with the current model as it is capitalizing
    on chance.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have a potentially better model, we can go ahead and modify the
    settings of this model. You can go to the SVM model status, and in the Expert
    tab, you can see that the Degree is set to 3\. There is a chance that this cubic
    function may be proving a bit complex for the data that we have. Let's use a quadratic
    function instead. Change the Degree to 2 and click Run.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: 'Again, run the analysis just like we have always done, and you will find these
    results:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8554ba26-20aa-4c56-b168-1b0242cb7c29.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
- en: As you can see, the accuracy percentages of both the datasets are within a difference
    of 5%. Hence, we can say that the model is consistent. Moreover, we can also see
    that the overall accuracy for the testing dataset has improved.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: This is how we improved an existing model by modifying its options to provide
    better results with higher overall accuracy and consistency.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: Using a different model to improve results
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous section, we saw how we can improve a result acquired from the
    model by modifying its options. Now, we will see how to improve the results by
    changing the model itself.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: 'Every model looks at the data differently. They have their own algorithms.
    These algorithms provide us with different perspectives to look at the data. Sometimes,
    just changing the perception of looking at the data can give us improved results.
    The different algorithms capitalize on unique aspects of data. Let''s see how
    we can do this with the help of an example:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: Bring your data, and partition it into training and testing datasets.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Connect the Partition node to a Neural Net node from the Modeling palette:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/75253761-59fd-422c-aea4-a4e03a8f3af5.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
- en: 'Click on the Neural Net node and go to the Build Options tab. In this, go the
    Advanced option and just change the Random seed to `5000`:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4fd2e68f-7287-4803-b3a1-63fb082eb2b6.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
- en: The reason that we are keeping the seed as `5000` is because we have acquired
    a better result using `5000` as the seed, as you may can recall from [Chapter
    2](f4f20b86-4417-4c0c-a8b2-d0be16f28e20.xhtml), *Getting Started with Machine
    Learning*, where we have demonstrated a neural network.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Run.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once again, you will have to analyze the model that is built. For this, recall
    the steps that we have followed until now. Go to the Output palette, and connect
    the generated model node to the Analysis node. Run the Analysis node with the
    checked Coincidence matrices. The following will be the results acquired:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/df18ccd7-5fd4-43f7-aa7b-38a7f0f902a2.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
- en: You can see that we are at an overall accuracy of around 80%, and how each of
    the predictions have performed. The overall accuracy is similar to what we have
    achieved when we used the SVM model. Hence, we can say that the SVM and Neural
    Net models are doing equally well for this dataset. Let's see how we can improve
    these results a little more.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We will use a decision tree in this example. For adding a decision tree node,
    select the Partition node, and connect it to the C5.0 node from the Modeling palette:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/bbfe92f1-947f-4b21-b98e-186e5cd9d482.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
- en: The C5.0 model is a decision tree model that looks at the data from a very different
    perspective.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the C5.0 model node to build a **C5.0** model and run it:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a23483f3-5ab3-4967-8189-0ba7a4c1e610.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
- en: Now, connect the C5.0 model node to the Neural Net generated model node.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Connect the C5.0 generated model to the Analysis node:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e1bebf80-9c06-4a40-8a34-4cca560fee36.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
- en: This will enable us to compare the results very easily.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这将使我们能够非常容易地比较结果。
- en: 'Run the Analysis node. The following will be the results acquired:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行分析节点。以下将是获得的结果：
- en: '![](img/0156d7c3-821b-41a3-b8bb-33478e428957.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0156d7c3-821b-41a3-b8bb-33478e428957.png)'
- en: As you can see, the overall accuracy for the testing dataset with the C5.0 model
    is 85%. This is much better than what we had acquired with just the Neural Net
    model. We can certainly improve on this by making some modifications to the C5.0
    model, which I'll leave up to you as a homework exercise.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，使用C5.0模型对测试数据集的整体准确率为85%。这比我们仅使用神经网络模型获得的结果要好得多。我们当然可以通过对C5.0模型进行一些修改来进一步提高这一点，我将把它留作您的家庭作业练习。
- en: So, we saw how the C5.0 model slightly improved the results, and has done a
    good job in overall accuracy and with each of the predictions both for the training
    and testing dataset. This was just an example on another approach to improve the
    performance of a model. We will now see how removing noise from the data can give
    us much better results.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们看到了C5.0模型略微提高了结果，并在总体准确性和对训练集和测试集的每个预测方面都做得很好。这只是另一种提高模型性能的方法的例子。我们现在将看到去除数据中的噪声如何给我们带来更好的结果。
- en: Removing noise to improve models
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 去除噪声以改进模型
- en: Let's focus on how noise can affect the results. Noise is nothing but missing
    data, outliers, or too many predictors that try to confuse the model with unnecessary
    predictions.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们关注噪声如何影响结果。噪声不过是缺失数据、异常值或试图用不必要的预测来混淆模型的过多预测因子。
- en: Decision tree models don't have noise because of too many predictors, as by
    default, they eliminate the predictors that they don't use for predictions as
    opposed to other statistical and machine learning models.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 决策树模型由于默认情况下会消除它们不用于预测的预测因子，因此不会因为预测因子太多而产生噪声，这与其他统计和机器学习模型不同。
- en: 'Having too many predictors in a model causes the following problems:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 模型中过多的预测因子会导致以下问题：
- en: Additional noise in the data that affects the overall accuracy of the model
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据中的额外噪声会影响模型的总体准确性
- en: The model becomes much more complex than it should be
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模型变得比应有的复杂得多
- en: If new data is to be added for new predictions, we need to collect data even
    for the variables that are not important and are not really required for the predictions,
    because our model uses them up to a certain extent.
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果要添加新的数据以进行新的预测，我们需要收集那些不重要且实际上并不需要用于预测的变量的数据，因为我们的模型在某种程度上会使用它们。
- en: If these kinds of predictors are cleared and eliminated from the model, this
    could simplify the understanding of the model and, potentially, it will give better
    results as well.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这些类型的预测因子从模型中清除并消除，这可能会简化模型的理解，并且可能还会给出更好的结果。
- en: How to remove noise
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何去除噪声
- en: 'Let''s understand with the help of an example. Follow these steps:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过一个例子来理解。按照以下步骤操作：
- en: Partition your data into a training and testing dataset.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将您的数据划分为训练集和测试集。
- en: Connect your Partition node to a Neural Net model from the Modeling palette.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将您的分区节点连接到建模面板中的神经网络模型。
- en: Select the model and, just like we have always done, go to the Build Options
    tab, then to the Advanced options, and change the Random seed to `5000` (because
    that has given us the best results so far). Click on Run.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择模型，就像我们一直做的那样，转到“构建选项”选项卡，然后转到“高级选项”，将随机种子更改为`5000`（因为到目前为止这已经给出了最佳结果）。点击运行。
- en: 'We have seen the accuracy of this model before. Refer to the list of top 10
    predictors for different random seeds that we acquired and stored in a table while
    demonstrating Neural Net in [Chapter 2](f4f20b86-4417-4c0c-a8b2-d0be16f28e20.xhtml),
    *Getting Started with Machine Learning*:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们之前已经看到过这个模型的准确性。请参考我们在[第2章](f4f20b86-4417-4c0c-a8b2-d0be16f28e20.xhtml)“机器学习入门”中演示神经网络时获取并存储在表中的不同随机种子前10个预测因子列表：
- en: '![](img/6e878a7d-ac7e-449f-9a20-3c5b75b0fbf4.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6e878a7d-ac7e-449f-9a20-3c5b75b0fbf4.png)'
- en: We will now remove the variables, which haven't appeared in any of the models
    or have appeared in just a few.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将去除那些在任何模型中都没有出现或只出现几次的变量。
- en: 'For removing variables, we will create another version of this Neural Net model.
    Connect the Partition node to another Neural Net model from the Modeling palette:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了去除变量，我们将创建这个神经网络模型的另一个版本。将分区节点连接到建模面板中的另一个神经网络模型：
- en: '![](img/4251f35a-c0c2-40f3-b57d-f1ae18201be8.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4251f35a-c0c2-40f3-b57d-f1ae18201be8.png)'
- en: 'Edit the new Neural Net model: Here, in the Fields tab, we will remove the
    Predictors that didn''t appear in the top 10 list of any model:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3b731e5b-ff81-4d04-b837-297657a1df6a.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
- en: You just have to click the predictor from the Inputs list and click on the arrow
    pointing towards the left-side box. You can also restore them if needed using
    the same method. These are the variables that didn't appear in the top 10 list
    of any model.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: 'We will also remove the variables that appeared just once or twice in the lists:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0f8917ea-9fa6-4c73-9d7a-83d1088e724e.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
- en: Go to the Advanced options in the Build Options tab and change the Random seed
    to `5000.` Then click on Run.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Connect the first Neural Net model to the second Neural Net model:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e168247f-90d3-4dc4-83c0-ef782b8cd18b.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
- en: 'Connect the second Neural Net model to the Analysis node from the Output palette:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/bb652aff-a9e8-46bb-9409-b42ebf681a07.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
- en: 'Run the Analysis node, just like we have always done. The following will be
    the comparative analysis of the two models:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ddd7e56b-0830-4cf5-b040-e33ca0dc02f4.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
- en: As you can see, the overall accuracy for the testing and training dataset of
    the second model is slightly better than the first model. Hence, we got a 2% improvement
    in predictability just by removing some unnecessary predictors. If we see the
    job of the model in predicting for each of the individual categories, the model
    with noise removed has done well in that too.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: Hence, we have explored another way to improve the results acquired from a model.
    We saw how removing noise, and reducing the number of variables or predictors
    by eliminating the unnecessary ones, can give us better results. Let's move on
    to see another method to improve accuracy. We will see how preparing the data
    to some extent can give us better results.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: Doing additional data preparation
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will see how additional preparation done on the data can
    allow us to extract an extra piece of information.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: Until now, we have improved our model by modifying its options, using a different
    model, changing the perspective of looking at data, and removing noise. Sometimes
    though, these techniques will just slightly improve the model; but if you could
    go back to the data preparation phase and look for extra bits that can be pulled
    from the data that can give better results, this can really go a long way in improving
    accuracy.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: Preparing the data
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Follow these steps to prepare the data in the data preparation stage:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: Get your data and partition it.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run a Neural Net model again, with a Random seed of `5000`. We will get an accuracy
    of around 80%.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will now create a new model and add one additional predictor. If you go back
    to the list of top ten predictors list, we will find predictors such as the number
    of speakers and TVs that customers purchased. Hence, it makes sense to have a
    predictor that shows the total number of items purchased.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Go to the Field Ops palette and connect the Partition node to a Derive node:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e4bbdd4e-1820-4afb-91b6-036ef9b63b36.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
- en: A Derive node allows us to create additional variables.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the Derive node. Set the Derive field as `Total Items` and click on the
    expression builder button, which is on the right of the Formula field, and we
    will create an expression by selecting the predictors of interest and clicking
    on the plus button:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/98a8ca4d-86d7-41b9-b4d7-6bc7a20ae433.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
- en: 'This means that `Total Items` includes Stereos, TVs, and Speakers. You will
    get an expression in the Formula field, like this:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/15f8b8bf-8e7a-4d06-a0ff-5a47982557d8.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
- en: This is the expression that will be used for `Total Items`. Click on OK.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: 'The variable that we just created needs to be instantiated so that the model
    is able to use it; for this, connect the Total Items node to the Type node from
    the Field Ops palette:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2d96befb-9d04-40ec-8d39-b527c5e644c8.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
- en: 'Edit the Type node. Click on the Read Values button to read the new variable:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/411fecf1-2216-4a4a-9834-c3690eb8255f.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
- en: As you can see, the Total Items predictor is now read, and that it will be counted
    as an Input predictor in this model. Click on OK.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: 'Connect the Type node to a Neural Net model from the Modeling palette:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8b81bf1a-ad4f-444d-a4ff-04029669859c.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
- en: Run the Neural Net model with Random seed set to `5000`.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Take a look at the model results by clicking on the newly generated model.
    You can see that the Total Items has acquired its place in the top ten predictors
    in Predictor Importance:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3817cc99-fd3a-4d12-a4e3-0b5e7f86cdbb.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
- en: Close the window.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: 'We will now connect the first generated model to the second model:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e5599821-c246-4666-ae5e-48dc8a0e9ca3.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
- en: 'Add an Analysis node to the first Neural Net model:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/485ecf60-b958-48f0-b325-f7d0139299a5.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
- en: 'Run the Analysis node, as always. You should get the following results:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/39ca2cea-7c35-4900-bba7-4fa8123c2a97.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
- en: Notice that the accuracy that we have has slightly improved. We just added a
    variable to an existing model. Hence, we get an idea of how our results can be
    affected when we do additional preparation on the data before running the model.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: Speaking of how Total Items has helped the model, you can see the job it has
    done for predicting current customers. We have actually done a better job in predicting
    the current customer field. Hence, this shows that the new variables that we chose
    to add may not necessarily improve the accuracy of the overall model, but can
    certainly improve the accuracy of one or more predicted categories. You can decide
    which category is more important for your requirements and select a new variable
    accordingly. We will now move on to see how sampling can help us provide better
    results.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: Balancing data
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will see how we can oversample or undersample different
    aspects of the outcome variable to improve our accuracy. We will change our dataset
    to see this. Refer to the `Loan` dataset provided with the GitHub link of this
    book.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: The need for balancing data
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To demonstrate this, we will use a different dataset. Select the Var. File
    node on the canvas. Navigate to where the file is located by clicking the triple
    dots beside the file field. Then select the `Loan` dataset:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c7cf695c-f156-44e5-b18d-0be27afcdc9c.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
- en: 'Go to the Types tab and change the Loan predictor''s Role to Target. This is
    the variable that we will predict:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/997d3766-6a5c-4628-a83c-e348b8d32a48.png)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
- en: Click on Read Values. Then, click on OK. In this example, we are predicting
    whether or not people have a loan.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see the distribution of our loan variable; go to the Graphs palette
    and connect our source node, Loan, to a Distribution node:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/12c1e1d3-6e9b-4bd8-851e-d1d49887c575.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
- en: 'Click on the Distribution node. Then click on the arrow next to the field box
    to select our predictor, for which we need to see the distribution, in our case,
    loan:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2deb58f3-850b-4b01-921d-a1110f5ad231.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
- en: 'Then, click on Run. You will see the following distribution:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ffadf281-bcfb-44ee-9f38-18992d4b1072.png)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
- en: Notice that 86% of the people in this dataset have a loan, and 13% don't have
    a loan. In such a case, predicting the group of people having no loan can be a
    little difficult because the distribution is very uneven. Hence, in such a situation,
    we need to balance the data. This means making it a little more similar similar
    in terms of the category size of each group. This balancing of data is also known
    as oversampling or undersampling.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: Let's take a little more of an extreme example. Let's say that we're trying
    to predict fraud, and that the distribution of the dataset is that 99% of the
    cases are perfectly legitimate and only 1% of the cases are fraudulent. Now, if
    we build a model with that type of distribution, what will often happen is that
    the model is going to predict that all cases aren't fraudulent. The overall accuracy
    of such a model will be 99%, because 99% of the time it's right, but what we really
    care about is predicting those few fraudulent cases. If we're always predicting
    that we have a good case, then you know the model itself is not really that useful,
    even though its overall accuracy is 99%. Hence, sometimes the overall accuracy
    of the model is not that useful. What we really care more about is the accuracy
    of predicting each individual category.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: What happens with situations like the fraud detection example is, because one
    group is so over-represented, or technically the other group, or the smaller group,
    is under-represented, the model doesn't really learn the patterns or the characteristics
    that are going on for the smaller group, and that's why we sometimes need to oversample
    or undersample.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: Let's come back to our example and try and see what we can do with it.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: Implementing balance in data
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s first build a model to predict the loan and see what we find:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: Go to the Field Ops palette and connect the Loan node to a Partition node.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Connect the Neural Net model to the Partition node from the Modeling palette,
    and run the Neural Net model with defaults:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/aa6246f9-abcb-475b-851f-1944ce0b9ce5.png)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
- en: 'Go to the Output palette and connect the newly generated node to the Analysis
    node. Run the Analysis node with the Coincidence matrices checked, and you will
    get the following results:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ba16f041-ca0f-4a0b-9f32-ebc41e04ee97.png)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
- en: As you can see, the overall accuracy of the model is around 93%, and the model
    is quite consistent. Let's see how well the model has predicted each one of the
    categories. We are certainly predicting the Yes group pretty well. However, we
    are not doing so well with the No group. We can try to improve the way we predict
    our No group.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: The results acquired bring us to a stage where we will have to oversample the
    **No** group. Or undersample the **Yes** group.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: 'For oversampling, we will first need to partition the dataset into a training
    and testing dataset. One thing to remember here is when we are oversampling a
    dataset, we do not need to have equal oversampling on the training as well as
    the testing dataset. In fact, what we need is to assess the testing dataset on
    the original distribution, because with oversampling we run the risk of performing
    well on the training dataset but not on the testing dataset. To avoid this, we
    will first have to separate our data. Hence, we will first oversample the training
    dataset data, then build a model on it, and then apply it to the testing dataset:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to the Record Ops palette, and connect the Partition node to the Select
    node:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c540cd83-60ab-4ecd-8f78-b3cdbe1f437b.png)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
- en: 'Select the Select node. Here we will select only the people that are in the
    training dataset. We will perform our data manipulations, then oversample or undersample
    our data and get the results. For doing this, click on the expression builder.
    Then, select the Partition variable:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/660c1692-3a94-4f46-a63b-4bc525ef556f.png)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
- en: 'Click on the **=** sign, and then click on the field values button:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7e3bb5a8-6db6-4091-b19f-67a29ec3a660.png)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
- en: 'Then, select the Training dataset and click on OK:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/28c04fbc-d9e0-4e18-8304-fa59eb964160.png)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
- en: A dialogue box will open. Click OK on that too.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: 'Connect another Select node to the existing Select node:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e46787d5-ec29-4070-913d-ec07251891e1.png)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
- en: 'In this Select node, we will keep people with a value of No; for this, go to
    the expression builder and select the loan variable, click on the = sign, and
    then click on the field values button and select No:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/32af08b7-2893-47e4-acf7-e5c412441b45.png)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
- en: 'We will add another Select node connected to the first Select node:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/93b6c218-d985-4a99-9e89-32b917349cca.png)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
- en: Click on the expression builder. Select the loan variable, and click on the
    = sign. Click on the field values button and select the Yes value. Click on OK.
    So, now we have selected all people with a loan. This is a larger group of people,
    which is over-represented. This brings us to the stage where we select only one-third
    of the dataset.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to the Record Ops palette and connect the Sample node to the Select node
    of the Yes group:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b0380f14-be87-418d-9334-dcdcf9742366.png)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
- en: 'Edit the Sample node. Select Random% to randomly select the values, and set
    the value to 33%. Also, check the Repeatable partition assignment. This will allow
    us to select the same people every time we create a model for this selection.
    Click on OK:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7a0be76c-898a-455e-8913-a0cbae412d99.png)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
- en: 'We will have to combine this separate data and bring it back together. For
    this, connect the Select node that has all people with the value set as No to
    the Append node. Then right-click on the Sample node and select connect to connect
    it to the Append node:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/37bcd7c9-5889-451a-b764-e49cce86c5c9.png)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
- en: 'Click on the Append node and select All datasets, then click on OK:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0fcd1a05-80c1-4005-99cc-9ccead12a53a.png)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
- en: 'Let''s check how the distribution of the Loan field looks now after sampling.
    For this, go to the Graphs palette and connect the Append node to the Distribution
    node:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/499396cf-81a2-409e-8233-fd29ec77aee0.png)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
- en: 'Click on the Distribution node, go to the Field box, and select loan just as
    we did before. Then click on Run. Here is the distribution that we have acquired
    after sampling:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b6f718b4-972c-4b13-8261-875316efd736.png)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
- en: You can see that the No group constitutes about one-third of the sample.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: Hence, by undersampling the Yes node, we were able to see the difference from
    13%.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see oversampling:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: Let's now connect the Append node to the Type node from the Field Ops palette.
    Here, we won't be using the partition field. Hence, go to the Types node and change
    the Partition's role to None.
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will again build our model by going to the modeling palette. And connect
    the Type node to a neural net model. And run this setup on the defaults.
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, connect your first generated model to the newly generated model, and connect
    both of them to the Analysis node. Let''s see our results:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4b578ba2-2d91-42ba-b105-0637a652776e.png)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
- en: You can see how well we are predicting the No group now! Our model has performed
    pretty well in predicting the accuracies of the individual models. Hence, we ended
    up balancing the data, obviously it is at expense of errors in the yes group.
    But the No group was our matter of concern as it was under-represented.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter taught us how to modify the various options that are available
    for enhancing the model. We also learned how to add additional fields and remove
    noise from these models. Lastly, we sampled the data available, which helped us
    to understand the model better.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we are going to learn how to combine models and improve
    them even further.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将学习如何结合模型并进一步提升它们。
