["```py\nlinear_model = LinearRegression()\nlinear_model.fit(X, y)\nrfecv = RFECV(\n    estimator=linear_model,\n    step=1,\n    cv=2,\n    scoring=make_scorer(mape ,greater_is_better=False),\n    min_features_to_select=1\n)\nrfecv.fit(X,y)\n```", "```py\nfrom sklearn.metrics import mean_squared_error as MSE\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.datasets import load_boston\nimport statsmodels.api as sm\nimport pandas as pd\nboston_housing = load_boston()\ndf_boston = pd.DataFrame(boston_housing.data, columns = boston_housing.feature_names)\ndf_boston['PRICE'] = boston_housing.target\ndf_boston = sm.add_constant(df_boston, prepend=False\n```", "```py\nX = df_boston.drop('PRICE', axis=1)\ny = df_boston['PRICE']\n```", "```py\nsc = StandardScaler()\nX_scaled = sc.fit_transform(X)\n```", "```py\nX_train, X_test, y_train, y_test = train_test_split(\n    X_scaled, y, test_size=0.25, shuffle=True)\n```", "```py\nols_model = sm.OLS(y_train, X_train)\ncompiled_model = ols_model.fit()\ncompiled_model_ridge = ols_model.fit_regularized(method = 'elastic_net', L1_wt=0, alpha=0.1,refit=True)\nprint('OLS Error: ', MSE(y_train,\n    compiled_model.predict(X_train)) )\nprint('Ridge Regression Error: ', MSE(y_train,\n    compiled_model_ridge.predict(X_train)))\n```", "```py\nprint('OLS Error: ', MSE(y_test, compiled_model.predict(X_test)) )\nprint('Ridge Regression Error: ', MSE(y_test, compiled_model_ridge.predict(X_test)))\n```", "```py\nols_model = sm.OLS(y_train, X_train)\ncompiled_model = ols_model.fit()\ncompiled_model_lasso = ols_model.fit_regularized(method='elastic_net', L1_wt=1, alpha=0.1,refit=True)\n```", "```py\nprint('OLS Error: ', MSE(y_train, compiled_model.predict(X_train)) )\nprint('LASSO Regression Error: ', MSE(y_train, compiled_model_lasso.predict(X_train)))\n```", "```py\nprint('OLS Error: ', MSE(y_test, compiled_model.predict(X_test)) )\nprint('LASSO Regression Error: ', MSE(y_test, compiled_model_lasso.predict(X_test)))\n```", "```py\nols_model = sm.OLS(y_train, X_train)\ncompiled_model = ols_model.fit()\ncompiled_model_elastic = ols_model.fit_regularized(method='elastic_net', L1_wt=0.5, alpha=8,refit=True)\n```", "```py\nprint('OLS Error: ', MSE(y_train, compiled_model.predict(X_train)) )\nprint('Elastic Net Regression Error: ', MSE(y_train, compiled_model_elastic.predict(X_train)))\n```", "```py\nprint('OLS Error: ', MSE(y_test, compiled_model.predict(X_test)) )\nprint('Elastic Net Regression Error: ', MSE(y_test, compiled_model_elastic.predict(X_test)))\n```", "```py\n# Import libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import scale\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import KFold, cross_val_score, train_test_split\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.decomposition import PCA\n#location of dataset\nurl = \"/content/Hitters.csv\"\n#read in data\ndata = pd.read_csv(url).dropna() # to simply the analysis, we drop all missing values\n# create dummies variables\ndummies_variables = pd.get_dummies(data[['League', 'Division', 'NewLeague']])\n# create features and target\ntarget = data['Salary']\nfeature_to_drop = data.drop(['Salary', 'League', 'Division', 'NewLeague'],axis=1).astype('float64')\nX = pd.concat([feature_to_drop, dummies_variables[['League_N', 'Division_W', 'NewLeague_N']]], axis=1)\n#scaled data - preprocessing\nX_scaled = scale(X)\n# train test split\nX_train, X_test, y_train, y_test = train_test_split(X_scaled, target, test_size=0.2, random_state=42)\n```", "```py\n# First generate all the principal components\npca = PCA()\nX_pc_train = pca.fit_transform(X_train)\nX_pc_train.shape\n```", "```py\n# Define cross-validation folds\ncv = KFold(n_splits=10, shuffle=True, random_state=42)\nmodel = LinearRegression()\nrmse_score = []\n# Calculate MSE score - based on 19 PCs\nfor i in range(1, X_pc_train.shape[1]+1):\n    rmse = -cross_val_score(model, X_pc_train[:,:i], y_train, cv=cv, scoring='neg_root_mean_squared_error').mean()\n    rmse_score.append(rmse)\n# Plot results\nplt.plot(rmse_score, '-o')\nplt.xlabel('Number of principal components in regression')\nplt.ylabel('RMSE')\nplt.title('Salary')\nplt.xlim(xmin=-1)\nplt.xticks(np.arange(X_pc_train.shape[1]), np.arange(1, X_pc_train.shape[1]+1))\nplt.show()\n```", "```py\n# Train regression model on training data\nmodel = LinearRegression()\nmodel.fit(X_pc_train[:,:6], y_train)\npcr_score_train = -cross_val_score(model, X_pc_train[:,:6], y_train, cv=cv, scoring='neg_root_mean_squared_error').mean()\n# Prediction with test data\nX_pc_test = pca.fit_transform(X_test)[:,:6]\npred = model.predict(X_pc_test)\npcr_score_test = mean_squared_error(y_test, pred, squared=False)\n```"]