["```py\n    import matplotlib.pyplot as plt #Import the plot library \n\n    def mean(sampleset):  #Definition header for the mean function \n        total=0 \n        for element in sampleset: \n            total=total+element \n        return total/len(sampleset) \n\n    myset=[2.,10.,3.,6.,4.,6.,10.]  #We create the data set \n    mymean=mean(myset) #Call the mean funcion \n    plt.plot(myset)  #Plot the dataset \n    plt.plot([mymean] * 7)  #Plot a line of 7 points located on the mean \n```", "```py\n    import math #This library is needed for the power operation \n    def mean(sampleset):  #Definition header for the mean function \n        total=0 \n        for element in sampleset: \n            total=total+element \n        return total/len(sampleset) \n\n    def variance(sampleset):  #Definition header for the mean function \n        total=0 \n        setmean=mean(sampleset) \n        for element in sampleset: \n            total=total+(math.pow(element-setmean,2)) \n        return total/len(sampleset) \n\n    myset1=[2.,10.,3.,6.,4.,6.,10.]  #We create the data set \n    myset2=[1.,-100.,15.,-100.,21.] \n    print \"Variance of first set:\" + str(variance(myset1)) \n    print \"Variance of second set:\" + str(variance(myset2)) \n\n```", "```py\n    Variance of first set:8.69387755102\n    Variance of second set:3070.64\n```", "```py\n    plt.figure() \n    distro = np.random.binomial(1, .6, 10000)/0.5 \n    plt.hist(distro, 2 , normed=1) \n```", "```py\n    plt.figure()\n    distro = np.random.binomial(100, .6, 10000)/0.01 \n    plt.hist(distro, 100 , normed=1) \n    plt.show() \n```", "```py\n    plt.figure() \n    uniform_low=0.25 \n    uniform_high=0.8 \n\n    plt.hist(uniform, 50, normed=1) \n    plt.show() \n```", "```py\n    import matplotlib.pyplot as plt #Import the plot library \n    import numpy as np \n    mu=0\\. \n    sigma=2\\. \n    distro = np.random.normal(mu, sigma, 10000) \n    plt.hist(distro, 100, normed=True) \n    plt.show() \n```", "```py\n    import matplotlib.pyplot as plt #Import the plot library \n    import numpy as np \n    mu=0.5 \n    sigma=0.5 \n    distro2 = np.random.logistic(mu, sigma, 10000) \n    plt.hist(distro2, 50, normed=True) \n    distro = np.random.normal(mu, sigma, 10000) \n    plt.hist(distro, 50, normed=True) \n    plt.show() \n```", "```py\n    plt.figure() \n    logistic_cumulative = np.random.logistic(mu, sigma, 10000)/0.02 \n    plt.hist(logistic_cumulative, 50, normed=1, cumulative=True) \n    plt.show() \n```", "```py\n    import matplotlib.pyplot as plt \n    import numpy as np \n     %matplotlib inline \n\n    def quadratic(var): \n        return 2* pow(var,2) \n    x=np.arange(0,.5,.1) \n    plt.plot(x,quadratic(x)) \n    plt.plot([1,4], [quadratic(1), quadratic(4)],  linewidth=2.0) \n    plt.plot([1,4], [quadratic(1), quadratic(1)],  linewidth=3.0, \n    label=\"Change in x\") \n    plt.plot([4,4], [quadratic(1), quadratic(4)],  linewidth=3.0, \n    label=\"Change in y\") \n    plt.legend() \n    plt.plot (x, 10*x -8 ) \n    plt.plot() \n```", "```py\n    initial_delta = .1 \n    x1 = 1  \n    for power in range (1,6): \n        delta = pow (initial_delta, power) \n        derivative_aprox= (quadratic(x1+delta) - quadratic (x1) )/ \n        ((x1+delta) - x1 ) \n        print \"del    ta: \" + str(delta) + \", estimated derivative: \" + \n        str(derivative_aprox)  \n```", "```py\n    delta: 0.1, estimated derivative: 4.2 \n    delta: 0.01, estimated derivative: 4.02 \n    delta: 0.001, estimated derivative: 4.002 \n    delta: 0.0001, estimated derivative: 4.0002 \n    delta: 1e-05, estimated derivative: 4.00002 \n```"]