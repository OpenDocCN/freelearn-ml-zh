- en: '11'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Processing Refunds
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we’ll examine a scenario with the goal of solidifying the concepts
    presented in this book. This includes how to choose which IA template to use to
    start development, auditing, kill switches, and more. We’ll analyze the ML requirements
    of the use case, design a solution, and implement the solution’s structure.
  prefs: []
  type: TYPE_NORMAL
- en: The scenario used throughout this chapter is modeled on the *real-life* use
    case of an online retailer. This retailer is looking to automate the approval
    of refund requests received through email. This use case features *multiple ML
    models*, where one is internally developed and the others aren’t. We’ve previously
    only discussed solution designs for Processes with one ML model, but we’ll see
    that we can extend the designs and templates presented in this book to multiple
    models as well.
  prefs: []
  type: TYPE_NORMAL
- en: The IA team is building a solution to handle refund requests that are sent to
    the online retailer’s customer service email. The business wants to use ML to
    determine whether an email is asking to initiate a refund. If so, the case continues
    to be processed.
  prefs: []
  type: TYPE_NORMAL
- en: Next, the business users want to extract useful entities from the email, such
    as the order number and the item costs. If this data is extracted with a high
    enough confidence, while fulfilling other business criteria, the refund request
    is automatically processed.
  prefs: []
  type: TYPE_NORMAL
- en: If an automated refund request is successful, the business users will then use
    generative AI to create an email response to send to the customer. The business
    has already developed a prompt to use with the generative AI model. There’s a
    strategic initiative for the company to use more AI technologies and appear technologically
    innovative. Customers who have their email refund request automatically approved
    will be informed that their case was completed using automation and AI.
  prefs: []
  type: TYPE_NORMAL
- en: The customer support team has an SLA to provide the first customer response
    (not resolution) within 48 hours of receiving an email. They hope that an IA solution
    can provide a complete resolution to a portion of the refund requests in 48 hours
    instead.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, our role is that of a solution designer and developer on the
    IA team. We’re going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: ML model background information
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Solution design
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: The example in this chapter focuses on designing and implementing the IA solution
    *structure*. Details regarding the normal business logic aren’t discussed. The
    full solution, including ML API calls, won’t be implemented as well as those details
    are easily implemented and have been covered in earlier chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The IA Process template was discussed in [*Chapter 7*](B18416_07.xhtml#_idTextAnchor114).
    If you haven’t gone through that chapter, download and import the `.bprelease`
    file from [https://github.com/PacktPublishing/Intelligent-Automation-with-Blue-Prism/tree/main/ch7](https://github.com/PacktPublishing/Intelligent-Automation-with-Blue-Prism/tree/main/ch7).
    The examples in this chapter will be based on one of the templates.
  prefs: []
  type: TYPE_NORMAL
- en: ML model background information
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This scenario uses three ML models: an **email classifier (EC)**, an **entity
    recognition model (ER)**, and **generative AI (GAI)**. Before designing the solution,
    we need to understand some specific characteristics of the ML models. The IA team
    works with the business users, the data science team, and the ML vendor’s documentation
    to answer the following questions:'
  prefs: []
  type: TYPE_NORMAL
- en: Who develops and maintains the model?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What’s the consumption and deployment methodology of the ML model?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Is auditing of the ML model needed?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What are the estimated volumes of ML predictions?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What are the criteria for HITL reviews?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What are the SLAs for review?
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Is auditing of HITL reviews needed?
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: What interface will be used to review predictions?
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: EC model
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The business only wants to identify whether an email is requesting a refund.
    They don’t need to predict between other email categories, such as product inquiries
    and complaints. After discussing with the internal data science team, they decide
    to develop a *binary classification model* that predicts between a *refund request*
    and *not a* *refund request*.
  prefs: []
  type: TYPE_NORMAL
- en: Consumption and deployment method
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The EC model will be hosted on the intranet and called through an HTTP API.
    Since this model has yet to be developed, the IA team asks the ML operations team
    to use a *blue-green* style of deployment. The IA team wants to give themselves
    the option of doing no-downtime rollbacks of the model if needed. The IA team
    also asks for a model version to be returned in the API response, in case they
    need to store it for auditing purposes. The data science team agrees with these
    requests.
  prefs: []
  type: TYPE_NORMAL
- en: Prediction volumes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: After interviewing customer support staff, we find that they receive ~500 emails
    per day, of which 70 are refund requests. The customer support team estimates
    that around 20 out of 70 refund requests will meet the criteria needed for automatic
    approval.
  prefs: []
  type: TYPE_NORMAL
- en: HITL reviews, interface, and SLAs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: From previous experience with classifying emails, the data science team expects
    the accuracy of the binary classifier to be very high. As a result, the team decides
    to not require HITL reviews but to *randomly sample 5%* of the predictions (around
    25 per day) to validate that the model is performing correctly over time. Employees
    from the customer support team will perform these reviews in addition to their
    regular tasks. The IA team decides to make the EC prediction review *non-blocking*,
    meaning that we don’t wait for the review to complete in order to continue automated
    processing.
  prefs: []
  type: TYPE_NORMAL
- en: The interface for review is to forward the customer’s email to a newly created
    email distribution list that will be monitored by customer support. The reviewer
    simply replies to the email with *Y* to indicate that it is a refund request or
    *N* to indicate that it isn’t.
  prefs: []
  type: TYPE_NORMAL
- en: ML auditing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Since the model will be maintained by the data science team, the prediction
    input and output logs will be available from the API web server. The data science
    team agrees to make logs available for six months, meaning that we have the flexibility
    to decide whether we want to keep a copy of the logs in BP as well for convenience.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s discuss the next model which is used to extract data from the email.
  prefs: []
  type: TYPE_NORMAL
- en: Entity recognition model
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **entity recognition** (**ER**) ML model needs to identify either an order
    number or a product name and price from the email text in order to continue processing.
    The IA team finds that there are numerous off-the-shelf services that can extract
    the data that’s needed after testing some online commercial offerings.
  prefs: []
  type: TYPE_NORMAL
- en: Consumption and deployment method
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The IA team decides to use a pre-trained model that’s hosted on a cloud provider
    that they have an existing relationship with. Since we’ve chosen a generic, hosted
    ML solution, we can’t control when the model gets updated. We need to actively
    monitor the vendor website to see if a new model is available. The API endpoint
    for this model is *versioned*, meaning that we can switch between different versions
    of the ER model as needed.
  prefs: []
  type: TYPE_NORMAL
- en: Prediction volumes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The ER model is only used after the EC model when an email is believed to be
    a refund request. Customer support has given us a rough expectation of ~70 predictions
    per day. After taking the costs of using this API into consideration, the governance
    board decides that it’s still worthwhile to pursue.
  prefs: []
  type: TYPE_NORMAL
- en: HITL reviews, interface, and SLAs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Since ER returns *multiple* labels and confidence levels, we decide to use a
    thresholding scheme with multiple conditions. After obtaining historical refund
    request emails from customer support, we run experiments to determine the appropriate
    threshold values for HITL review of ER model predictions.
  prefs: []
  type: TYPE_NORMAL
- en: First, we require manual review if we’ve extracted an order ID, and the order
    ID has less than 97% confidence. Next, we review predictions where either the
    product name or price has a confidence lower than 93%. Finally, we review all
    predictions regardless of confidence where an extracted price is higher than $300\.
    Since the review method is complex, requiring the correction of multiple labels,
    the team decides to present the review data to reviewers through a custom-built
    web interface.
  prefs: []
  type: TYPE_NORMAL
- en: Since we’re targeting the resolution of cases within 48 hours, the team tentatively
    decides to have a review SLA of 24 hours.
  prefs: []
  type: TYPE_NORMAL
- en: ML auditing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Since the ER model is a third-party API, the IA team will need to keep track
    of the prediction inputs, outputs, and model versions in BP. While we could visit
    the cloud portal’s dashboards to view historical usage records, they are hidden
    behind different approval processes that are more complex than finding the data
    from inside BP.
  prefs: []
  type: TYPE_NORMAL
- en: The discussion of the ER model is complete. Next, we’ll discuss the third ML
    model, which is generative AI.
  prefs: []
  type: TYPE_NORMAL
- en: Generative AI model
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The customer service team wants to use GAI to create email replies for customers
    who have their refund requests automatically approved. While we could simply use
    an email template, the company wants to maintain its image of being technology-focused
    and forward-thinking to customers and investors.
  prefs: []
  type: TYPE_NORMAL
- en: Consumption and deployment method
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As the IA team can't access enough GPU processing power to develop a GAI model
    in-house, the team decides to use a hosted API solution. From looking at the API
    documentation, we find that the vendor uses a *continuous model upgrade scheme*.
    This means that the model behind the API endpoint is constantly being updated
    and that updates occur without notifying customers. The exact model version that
    is used is returned in the API response, but there’s no way to explicitly call
    an older version of the model. This makes the model version not so useful as it’s
    only possible to call the latest version of the model. The prompt that is sent
    to the GAI API will be the same for every customer.
  prefs: []
  type: TYPE_NORMAL
- en: Prediction volumes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It’s estimated that 20 emails will be sent per day. After taking these costs
    into account, the use case is still deemed to be viable.
  prefs: []
  type: TYPE_NORMAL
- en: HITL reviews, interface, and SLAs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The customer support team has tested the third-party GAI service and is happy
    with the email responses that are generated. The business has also created a static
    disclaimer that will be appended at the bottom of every email after the GAI response.
    This is done to remove ambiguity in case the GAI text is unclear. This disclaimer
    will make it clear to customers that their refund case was automatically processed,
    and approved, and that the email text is AI generated. Because of this disclaimer,
    the team doesn’t intend to review any of the GAI-generated emails. A contributing
    factor to choosing GAI is that it’s a positive customer outcome, which is inherently
    low risk.
  prefs: []
  type: TYPE_NORMAL
- en: ML auditing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The email message that’s generated must be sent to the customer through the
    CRM system, and not directly through a mail server. A copy of what was emailed
    to the customer can always be found through the CRM. Since the business team doesn’t
    intend to change the prompt, the IA team decides that keeping a copy of the input
    to each API call is unneeded. Although the model version is returned in the prediction
    response, there’s no way to actually specify which version of the model we want
    to call. We can decide whether we want to store the model version, although it
    isn’t particularly useful.
  prefs: []
  type: TYPE_NORMAL
- en: We’ve now gathered the information needed about the three ML models to come
    up with a solution design.
  prefs: []
  type: TYPE_NORMAL
- en: ML model summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A summary of the ML model characteristics that are relevant to the design and
    implementation of the solution is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Model** | **Deployment method** | **HITL** **review criteria** | **HITL**
    **review interface** | **HITL** **review SLA** | **ML Auditing** |'
  prefs: []
  type: TYPE_TB
- en: '| EC | Blue-green API | Random sampling, 5% | Email | N/A | On API servers
    |'
  prefs: []
  type: TYPE_TB
- en: '| ER | Unknown, but the API is versioned | Thresholding with multiple conditions
    | Website | 24 hours | In the IA solution |'
  prefs: []
  type: TYPE_TB
- en: '| GAI | Continuous, and the API response contains the model version | N/A |
    N/A | N/A | In the customer support system |'
  prefs: []
  type: TYPE_TB
- en: 'Table 11.1: A summary of the ML model characteristics'
  prefs: []
  type: TYPE_NORMAL
- en: With this information about the ML model, we can begin our solution design.
  prefs: []
  type: TYPE_NORMAL
- en: Solution design
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We need to consider how many Processes and Work Queues are appropriate for our
    solution. Recall from [*Chapter 5*](B18416_05.xhtml#_idTextAnchor075) that an
    ML solution can have a separate Process/Work Queue for the ML model and for the
    HITL review. Let’s look at each ML model separately to determine whether additional
    Processes and Queues will be needed.
  prefs: []
  type: TYPE_NORMAL
- en: Email classification model
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The EC ML model logs will be accessible directly from the on-premises API server,
    so from a logging perspective, there’s no need to have them saved in a separate
    Work Queue. There’s also no need to scale the ML predictions independently from
    the main Process. As a result, the IA team decides that a separate Process and
    Work Queue for the EC ML model is unnecessary.
  prefs: []
  type: TYPE_NORMAL
- en: Next, the IA team considers the HITL review requirements. Roughly 25 emails
    will be randomly sampled for review each day. Since the model is developed in-house,
    it makes sense to send corrected predictions back to the data scientists so that
    the model can be improved. The team decides to have a *separate Process and Work
    Queue for the HITL review* portion of the EC model.
  prefs: []
  type: TYPE_NORMAL
- en: Entity recognition model
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Since the ER model is an external API and performs a critical part of the overall
    business process, we want to keep an audit trail of the inputs and outputs of
    the model. This leads us to a design where the *ER model prediction has a separate
    Process and* *Work Queue*.
  prefs: []
  type: TYPE_NORMAL
- en: The review method is also complex and requires a custom-developed web interface.
    We’d like to control the creation of the shared data used for review and audit
    any human corrections to the predictions. For these reasons, we decide to have
    a *separate Process and Work Queue for the HITL review* portion of the ER model.
  prefs: []
  type: TYPE_NORMAL
- en: Generative AI model
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There’s no need to keep track of the input to the GAI model in the logs because
    the prompt is static. The API response (email text) will also be saved into the
    customer support system, so auditing of the ML prediction results does not need
    to be done from BP. There’s also no need for HITL as there will be boilerplate
    text sent along with the GAI-generated email, which lowers the chance of misunderstanding
    the email. The IA team decides to *not have separate Processes and Work Queues
    for the GAI portion* of the solution.
  prefs: []
  type: TYPE_NORMAL
- en: Solution design diagram
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Overall, a high-level BP solution design for the ML portion looks like the following.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.1: A diagram of the Processes and Work Queues of the solution design](img/B18416_11_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.1: A diagram of the Processes and Work Queues of the solution design'
  prefs: []
  type: TYPE_NORMAL
- en: Process 1 is the main process, which contains the business logic and the Stages
    that call the EC and the GAI models. After the EC prediction is made, Items that
    are randomly sampled are added to Work Queue 2 (A). Since the review is non-blocking,
    Process 2, which checks an email inbox for *Y* and *N* replies to emails can be
    scheduled to run during off-peak hours.
  prefs: []
  type: TYPE_NORMAL
- en: For emails that are predicted as refund requests, processing continues until
    we need to make a prediction using the ER model. Processing halts, and input data
    to the ER model is added to Work Queue 3 (B). If the ER prediction doesn’t need
    human review (C), the Item resumes its work in Process 1\. If the ER prediction
    requires review, it gets added to Work Queue 4 (D). Once HITL review for the ER
    prediction is complete, the Item’s Status will be updated in Queue 1 (E), so that
    processing can continue.
  prefs: []
  type: TYPE_NORMAL
- en: Implementation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After completing the IA solution design based on the characteristics of the
    three models discussed above, the developers start to build the overall structure
    of the solution, starting from the IA templates.
  prefs: []
  type: TYPE_NORMAL
- en: Example 1 – Creating the solution structure from IA templates
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Instead of jumping into the development of the business logic and Objects,
    we want to create the solution design structure to ensure that the coordination
    between the different Processes and Work Queues behave as intended. In this example,
    we will build the solution structure from nine high-level steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Use **Save As** on one of the templates from [*Chapter 7*](B18416_07.xhtml#_idTextAnchor114)
    to create the overall Process structure.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create the Work Queues.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the Data Items on the `Main Page` of each Process and **Get Next Item**
    to reference the newly created Work Queues.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Modify Process 1 of our solution to add Pages related to calling the EC and
    GAI ML model predictions directly.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the Data Items on the `IA Data` Page of each Process, which store the
    Tags, Statuses, and Item Data Fields that are used to keep Item Data consistent
    across different Work Queues of the solution.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Find and replace the `IA Data` Page Data Items in Process **01 - Processing
    Refunds** to fix some of the broken references to renamed Data Items. Fix the
    remaining issues by hand.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Find and replace the `IA Data` Page Data Items in Process **02 – Email Classifier
    HITL Review** to fix the broken references to renamed Data Items. Delete unneeded
    logic to update Work Queue 1 when the review is complete.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Find and replace the `IA Data` Page Data Items in Process **03 – Entity Recognition**
    to fix the broken references to renamed Data Items. Fix the remaining issues by
    hand.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Find and replace the `IA Data` Page Data Items in Process **04 – Entity Recognition**
    **HITL Review**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let’s start off by saving the templates as new Processes.
  prefs: []
  type: TYPE_NORMAL
- en: Save the template Processes as new Processes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If we look at *Figure 11**.1*, our solution is basically template 3 from [*Chapter
    7*](B18416_07.xhtml#_idTextAnchor114), with the HITL Review Process and Queue
    added twice. Let’s open the relevant Process templates and save them as new Processes:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the Studio section of BP. Create a new Group named *Ch11* under
    Processes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Expand the *Ch7* | *IA Template 3 - 3 Process 3* *Queue* Group.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the **01 - Business Logic** Process. Use *File* | *Save As* to save this
    as a new Process named **01 - Processing Refunds** in the *Ch11* Group. Close
    the resulting Process Studio window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the **02 - ML Prediction** Process. Use *File* | *Save As* to save this
    as a new Process named **03 - Entity Recognition** (note the renaming from 02
    to 03) in the *Ch11* Group. Close the resulting Process Studio window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the **03 - HITL Review** Process. Use *File* | *Save As* to save this as
    a new Process named **04 - Entity Recognition HITL Review** (note the renaming
    from 03 to 04) in the *Ch11* Group. Keep the Process Studio window open.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With the **04 - Entity Recognition HITL Review** Process still open, use *File*
    | *Save As* to save this as a new Process named **02 - Email Classifier HITL Review**
    in the *Ch11* Group. Close the resulting Process Studio window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Verify that your *Ch11* Group contains the following four Processes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.2: The contents of the Processes in Group Ch11](img/B18416_11_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.2: The contents of the Processes in Group Ch11'
  prefs: []
  type: TYPE_NORMAL
- en: Create the Work Queues
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The next step needed to create a functioning solution structure is to create
    the four Work Queues:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the *System* | *Workflows* | *Work Queues* area of BP.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the *Queues* area and create a new Group named *Ch11*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create four Work Queues inside the *Ch11* Group. Name the Queues identically
    to the Processes shown in *Figure 11**.2*. Leave the Key Names as *Field 1* for
    the time being.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Verify that the *Ch11* Group in Work Queues looks like the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.3: The contents of the Work Queues in Group Ch11](img/B18416_11_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.3: The contents of the Work Queues in Group Ch11'
  prefs: []
  type: TYPE_NORMAL
- en: We’ve finished creating the Work Queues and Process solution structure. Next,
    we need to change the Processes to match the solution diagram in *Figure 11**.1*.
  prefs: []
  type: TYPE_NORMAL
- en: Modify the template’s Work Queue Data Items
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The arrows in the solution diagram in *Figure 11**.1* show which Work Queues
    each Process needs to interact with. For each Process, we need to create a Data
    Item referencing each Work Queue that it has an *outbound arrow* to, in addition
    to its own Work Queue. The complete list of Data Items needed for each Process’
    `Main Page` is shown in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Process Name** | **Data** **Item Name** | **Data Item** **Initial Value**
    |'
  prefs: []
  type: TYPE_TB
- en: '| **01 -** **Processing Refunds** | Queue Name | **01 -** **Processing Refunds**
    |'
  prefs: []
  type: TYPE_TB
- en: '| **01 -** **Processing Refunds** | Queue Name 2 | **02 - Email Classifier**
    **HITL Review** |'
  prefs: []
  type: TYPE_TB
- en: '| **01 -** **Processing Refunds** | Queue Name 3 | **03 -** **Entity Recognition**
    |'
  prefs: []
  type: TYPE_TB
- en: '| **02 - Email Classifier** **HITL Review** | Queue Name 2 | **02 - Email Classifier**
    **HITL Review** |'
  prefs: []
  type: TYPE_TB
- en: '| **03 -** **Entity Recognition** | Queue Name | **01 -** **Processing Refunds**
    |'
  prefs: []
  type: TYPE_TB
- en: '| **03 -** **Entity Recognition** | Queue Name 3 | **03 -** **Entity Recognition**
    |'
  prefs: []
  type: TYPE_TB
- en: '| **03 -** **Entity Recognition** | Queue Name 4 | **04 - Entity Recognition**
    **HITL Review** |'
  prefs: []
  type: TYPE_TB
- en: '| **04 - Entity Recognition** **HITL Review** | Queue Name | **01 -** **Processing
    Refunds** |'
  prefs: []
  type: TYPE_TB
- en: '| **04 - Entity Recognition** **HITL Review** | Queue Name 4 | **04 - Entity
    Recognition** **HITL Review** |'
  prefs: []
  type: TYPE_TB
- en: 'Table 11.2: The Data Items needed to store the Work Queue names'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s edit each Process to use the correct Queues:'
  prefs: []
  type: TYPE_NORMAL
- en: Open Process **01 - Processing Refunds** in the Process Studio.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the `Main Page`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Modify the Data Items in the *Process Settings* Block to match rows 1 to 3 of
    *Table 11.2*. Ensure that the Data Items have the *Hide from other pages in the
    process* box unticked.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Modify the *two* **Get Next Item** Stages so that they use the Queue that is
    named identically to the current Process. For **01 - Processing Refunds**, set
    *Queue Name* to **[****Queue Name]**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Repeat *steps 1 - 4* for the three other Processes. For *step 3*, use row 4
    for Process 2, rows 5 - 7 for Process 3, and rows 8 - 9 for Process 4\. For *step
    4*, use **[Queue Name 2]** for Process 2, **[Queue Name 3]** for Process 3, and
    **[Queue Name 4]** for Process 4.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Verify that for Process **01 - Processing Refunds**, you have the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.4: The three Queue Data Items for Process 1](img/B18416_11_4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.4: The three Queue Data Items for Process 1'
  prefs: []
  type: TYPE_NORMAL
- en: 'For Process **02 - Email Classifier HITL Review**, you should have this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.5: The Queue Data Item for Process 2](img/B18416_11_5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.5: The Queue Data Item for Process 2'
  prefs: []
  type: TYPE_NORMAL
- en: 'For Process **03 - Entity Recognition**, you should have this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.6: The three Queue Data Items for Process 3](img/B18416_11_6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.6: The three Queue Data Items for Process 3'
  prefs: []
  type: TYPE_NORMAL
- en: 'For Process **04 - Entity Recognition HITL Review**, you should have this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.7: The two Queue Data Items for Process 4](img/B18416_11_7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.7: The two Queue Data Items for Process 4'
  prefs: []
  type: TYPE_NORMAL
- en: Ensure that you save the Processes so that you don’t lose your changes. Next,
    let’s add the missing ML logic Pages to Process **01 - Processing Refunds**, as
    there are additional ML predictions that we need to call that aren’t present in
    the template.
  prefs: []
  type: TYPE_NORMAL
- en: Add missing ML Pages to 01 - Processing Refunds
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We’ve started off this example by cloning *IA Template 3*. The template doesn’t
    have Process 1 make any ML predictions directly. However, our solution requires
    that Process 1 directly predicts using the EC and GAI models. Our solution also
    needs to randomly sample the EC model. Finally, we also need to push data into
    two Queues instead of just one. Let’s add these changes to Process 1 by cloning
    existing Pages from the other templates:'
  prefs: []
  type: TYPE_NORMAL
- en: Open Process **03 - Entity Recognition** in the Process Studio.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the `01 ML Prediction` Page tab and select **Copy**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.8: Right-click on the 01 ML Prediction Page in Process 3 and select
    Copy](img/B18416_11_8.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.8: Right-click on the 01 ML Prediction Page in Process 3 and select
    Copy'
  prefs: []
  type: TYPE_NORMAL
- en: Open Process **01 - Processing Refunds** in the Process Studio.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the `Main Page` tab and select **Paste**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.9: Right-click on Main Page in Process 1 and select Paste](img/B18416_11_9.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.9: Right-click on Main Page in Process 1 and select Paste'
  prefs: []
  type: TYPE_NORMAL
- en: Rename the newly pasted Page **02a Email** **Classifier Prediction**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the `Main Page` tab and select **Paste** again.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename the newly pasted Page **05 Generative** **AI Prediction**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Switch back to Process **03 - Entity Recognition** in the Process Studio.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the `02 Random Sampling` Page tab and select **Copy**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Switch back to Process **01 - Processing Refunds** in the Process Studio.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the `Main Page` tab and select **Paste**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename the newly pasted Page **02b** **Random Sampling**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename the `02 Push to Queue` Page **02d Push to** **Queue 3**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the `02d Push to Queue 3` Page tab and select **Copy**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the `Main Page` tab and select **Paste**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename the newly pasted Page to **02c Push to** **Queue 2**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Modify the *Work* Block on the `Main Page` so that it looks like the following.
    The additions to the Block are shown in bold font.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.10: Add the new Pages to the Work Block of Process 01 - Processing
    Refunds](img/B18416_11_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.10: Add the new Pages to the Work Block of Process 01 - Processing
    Refunds'
  prefs: []
  type: TYPE_NORMAL
- en: Now, the `Main Page` for Process 1 has placeholder Pages for the high-level
    steps needed to complete the ML potions of the solution. Our next task will be
    to change the Data Items on the `IA` `Data` Pages.
  prefs: []
  type: TYPE_NORMAL
- en: Modify each template’s IA Data Pages
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Recall that each Process in our template has a Page named `IA Data` that contains
    Data Items used to coordinate the creation of columns in **Item Data** across
    different Work Queues. There are also Data Items that contain Statuses and Tags
    that control the flow of Work Queue Items across the different Processes. The
    Data Items on these Pages need to be changed to accommodate the solution structure.
  prefs: []
  type: TYPE_NORMAL
- en: Process 1, **01 - Processing Refunds**, has the greatest number of Data Items
    (17) on this Page, as its **Item Data** needs to store information concerning
    all three ML models.
  prefs: []
  type: TYPE_NORMAL
- en: '| **Data** **Item Name** | **Data** **Item Value** | **Purpose** |'
  prefs: []
  type: TYPE_TB
- en: '| Prediction Item Data Field Name - EC | **Prediction -** **EC** | The Item
    Data Field Name that stores the EC model’s predicted result |'
  prefs: []
  type: TYPE_TB
- en: '| Confidence Item Data Field Name - EC | **Confidence -** **EC** | The Item
    Data Field Name that stores the EC model’s confidence score |'
  prefs: []
  type: TYPE_TB
- en: '| Prediction Item Data Field Name - ER | **Prediction -** **ER** | The Item
    Data Field Name that stores the ER model’s predicted result |'
  prefs: []
  type: TYPE_TB
- en: '| Reviewed Prediction Item Data Field Name - ER | **Reviewed Prediction -**
    **ER** | The Item Data Field Name that stores the reviewed value of the ER model
    |'
  prefs: []
  type: TYPE_TB
- en: '| Prediction Item Data Field Name - GAI | **Prediction -** **GAI** | The Item
    Data Field Name that stores the GAI model’s predicted result |'
  prefs: []
  type: TYPE_TB
- en: '| Confidence Item Data Field Name - GAI | **Confidence -** **GAI** | The Item
    Data Field Name that stores the GAI prediction’s confidence score |'
  prefs: []
  type: TYPE_TB
- en: '| Queue 1 Item ID Item Data Field Name | **Queue 1** **Item ID** | The Item
    Data Field Name used to store Work Queue 1’s Item ID in other Queues |'
  prefs: []
  type: TYPE_TB
- en: '| Queue 2 Item ID Item Data Field Name | **Queue 2** **Item ID** | The Item
    Data Field Name used to store Work Queue 2’s (EC) Item ID in this Queue |'
  prefs: []
  type: TYPE_TB
- en: '| Queue 3 Item ID Item Data Field Name | **Queue 3** **Item ID** | The Item
    Data Field Name used to store Work Queue 3’s (ER) Item ID in this Queue |'
  prefs: []
  type: TYPE_TB
- en: '| Prediction Complete Status - EC | **Prediction Complete -** **EC** | The
    Status used to indicate that the EC prediction is completed |'
  prefs: []
  type: TYPE_TB
- en: '| Prediction Complete Status - GAI | **Prediction Complete -** **GAI** | The
    Status used to indicate that the GAI prediction is completed |'
  prefs: []
  type: TYPE_TB
- en: '| Manual Review Not Required Status - ER | **Manual Review Not Required -**
    **ER** | The Status used to indicate that an ER prediction does not need HITL
    review |'
  prefs: []
  type: TYPE_TB
- en: '| Manual Review Complete Status - ER | **Manual Review Complete -** **ER**
    | The Status used to indicate that HITL review of an ER prediction is completed
    |'
  prefs: []
  type: TYPE_TB
- en: '| Waiting ML Prediction Tag - ER | **Waiting ML Prediction -** **ER** | The
    Tag used to show that the Item is waiting for an ER model prediction |'
  prefs: []
  type: TYPE_TB
- en: '| Manual Review Required Tag - ER | **Manual Review Required -** **ER** | The
    Tag used to show that the Item is waiting for HITL review of an ER prediction
    |'
  prefs: []
  type: TYPE_TB
- en: '| Throw Exception Review Text - ER | **BE** | This is how the reviewer of the
    ER model can indicate to Process 1 that it should throw a Business Exception |'
  prefs: []
  type: TYPE_TB
- en: '| Force HITL Review – EC | **False** | This is a Session Variable that controls
    whether we want to force all EC predictions to undergo review |'
  prefs: []
  type: TYPE_TB
- en: 'Table 11.3: 17 Data Items needed for Process 1 on the IA Data Page'
  prefs: []
  type: TYPE_NORMAL
- en: Process 2 (`IA Data` page is far fewer than for Process 1.
  prefs: []
  type: TYPE_NORMAL
- en: '| **Data** **Item Name** | **Data** **Item Value** | **Purpose** |'
  prefs: []
  type: TYPE_TB
- en: '| Reviewed Prediction Item Data Field Name - EC | Reviewed Prediction - EC
    | The Item Data Field Name that stores the human corrected EC prediction value
    |'
  prefs: []
  type: TYPE_TB
- en: '| Review Justification Item Data Field Name - EC | Review Justification - EC
    | The Item Data Field Name that stores the reason why the prediction value has
    been modified |'
  prefs: []
  type: TYPE_TB
- en: '| Review Data Created Item Data Field Name - EC | Review Data Created - EC
    | This Item Data Field Name stores whether the review data record has been created
    yet |'
  prefs: []
  type: TYPE_TB
- en: '| Manual Review Complete Status - EC | Manual Review Complete - EC | The Status
    used to indicate that HITL review of an EC prediction is completed |'
  prefs: []
  type: TYPE_TB
- en: '| Disable HITL Review - EC | False | This is a Session Variable that can be
    used to disable all HITL reviews for the EC model |'
  prefs: []
  type: TYPE_TB
- en: '| Force Create Review Data - EC | False | This is a Session Variable that can
    be used to forcibly recreate all review records |'
  prefs: []
  type: TYPE_TB
- en: 'Table 11.4: Six Data Items needed for Process 2 on the IA Data Page'
  prefs: []
  type: TYPE_NORMAL
- en: 'Process 3 (**03 - Entity Recognition**) needs to communicate with Processes
    1 (**01 - Processing Refunds**) and 4 (**04 - Entity Recognition HITL Review**).
    As a result, there are 11 Data Items to create:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Data** **Item Name** | **Data** **Item Value** | **Purpose** |'
  prefs: []
  type: TYPE_TB
- en: '| Prediction Item Data Field Name - ER | Prediction - ER | The Item Data Field
    Name that stores the ER model’s predicted result |'
  prefs: []
  type: TYPE_TB
- en: '| Confidence Item Data Field Name - ER | Confidence - ER | The Item Data Field
    Name that stores the ER model’s prediction confidence score |'
  prefs: []
  type: TYPE_TB
- en: '| Queue 1 Item ID Item Data Field Name | Queue 1 Item ID | The Item Data Field
    Name used to store Work Queue 1’s Item ID in other Queues |'
  prefs: []
  type: TYPE_TB
- en: '| Queue 3 Item ID Item Data Field Name | Queue 3 Item ID | The Item Data Field
    Name used to store Work Queue 3’s (ER) Item ID in this Queue |'
  prefs: []
  type: TYPE_TB
- en: '| Queue 4 Item ID Item Data Field Name | Queue 4 Item ID | The Item Data Field
    Name used to store Work Queue 4’s (GAI) Item ID in this Queue |'
  prefs: []
  type: TYPE_TB
- en: '| Prediction Complete Status - ER | Prediction Complete - ER | The Status used
    to indicate that the ER prediction is completed |'
  prefs: []
  type: TYPE_TB
- en: '| Manual Review Required Tag - ER | Manual Review Required - ER | The Tag used
    to show that the Item is waiting for HITL review of an ER prediction |'
  prefs: []
  type: TYPE_TB
- en: '| Manual Review Not Required Status - ER | Manual Review Not Required - ER
    | The Status used to indicate that an ER prediction does not need HITL review
    |'
  prefs: []
  type: TYPE_TB
- en: '| Waiting ML Prediction Tag - ER | Waiting ML Prediction - ER | The Tag used
    to show that the Item is waiting for an ER model prediction |'
  prefs: []
  type: TYPE_TB
- en: '| Manual Review Required Tag - ER | Manual Review Required - ER | The Tag used
    to show that the Item is waiting for HITL review of an ER prediction |'
  prefs: []
  type: TYPE_TB
- en: '| Force HITL Review - ER | False | This is a Session Variable that controls
    whether we want to force all ER predictions to undergo review |'
  prefs: []
  type: TYPE_TB
- en: 'Table 11.5: 11 Data Items needed for Process 3 on the IA Data Page'
  prefs: []
  type: TYPE_NORMAL
- en: 'Process 4 (**04 - Entity Recognition HITL Review** ) has eight Data Items to
    create:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Data** **Item Name** | **Data** **Item Value** | **Purpose** |'
  prefs: []
  type: TYPE_TB
- en: '| Reviewed Prediction Item Data Field Name - ER | Reviewed Prediction - ER
    | The Item Data Field Name that stores the reviewed value of the ER model |'
  prefs: []
  type: TYPE_TB
- en: '| Review Justification Item Data Field Name - ER | Review Justification - ER
    | The Item Data Field Name that stores the reason why the prediction value has
    been modified |'
  prefs: []
  type: TYPE_TB
- en: '| Review Data Created Item Data Field Name - ER | Review Data Created - ER
    | This Item Data Field Name stores whether the review data record has been created
    yet |'
  prefs: []
  type: TYPE_TB
- en: '| Queue 1 Item ID Item Data Field Name | Queue 1 Item ID | The Item Data Field
    Name used to store Work Queue 1’s Item ID in other Queues |'
  prefs: []
  type: TYPE_TB
- en: '| Manual Review Complete Status - ER | Manual Review Complete - ER | The Status
    used to indicate that HITL review of an ER prediction is completed |'
  prefs: []
  type: TYPE_TB
- en: '| Manual Review Required Tag - ER | Manual Review Required - ER | The Tag used
    to show that the Item is waiting for HITL review of an ER prediction |'
  prefs: []
  type: TYPE_TB
- en: '| Disable HITL Review - ER | False | This is a Session Variable that can be
    used to disable all HITL reviews for the ER model |'
  prefs: []
  type: TYPE_TB
- en: '| Force Create Review Data - ER | False | This is a Session Variable that can
    be used to forcibly recreate all review records |'
  prefs: []
  type: TYPE_TB
- en: 'Table 11.6: Eight Data Items needed for Process 4 on the IA Data Page'
  prefs: []
  type: TYPE_NORMAL
- en: Now let’s make changes to the `IA Data` Pages according to the tables above.
  prefs: []
  type: TYPE_NORMAL
- en: Open the **01 - Processing Refunds** Process in the Process Studio.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Delete all of the Data Items on the `IA` `Data` Page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create new Data Items on this Page according to *Table 11.3*. All of the Data
    Items need to be global with Data Type `Text`. The only exceptions are the Session
    Variables, which also need to be global, but with Data Type `Flag` and the Exposure
    set to *Session*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Repeat steps 1 to 3, except with the other Processes. Process 2 should create
    Data Items according to *Table 11.4*, Process 3 should use *Table 11.5*, and Process
    4 should use *Table 11.6*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After recreating the Data Items on the `IA Data` Page, we will have numerous
    broken references to previous Data Items. We will be fixing these next.
  prefs: []
  type: TYPE_NORMAL
- en: Fix IA Data Page references and logic for Process 1
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Recall that Process 1 is supposed to hold the main business logic, perform
    the EC prediction, and perform the GAI prediction. While we could fix the broken
    Data Item references by going through the Process Studio, clicking on the *Errors*
    button, and finding each error, we’ll speed up our work by exporting the Process
    as XML, and doing a find/replace. Then we’ll re-import the Process and fix the
    remaining issues by hand. Let’s start with the changes that are required for Process
    1:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the **01 - Processing Refunds** Process in the Process Studio.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on *File* | *Export* | *This Process*. Save the `.bpprocess` file to a
    location of your choice. Close the Process Studio.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `.bpprocess` file in a text editor, such as Notepad.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Perform the seven following find/replaces in your text editor. Save the `.``bpprocess`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **Find Text** | **Replace Text** |'
  prefs: []
  type: TYPE_TB
- en: '| [Manual Review Complete Status] | [Manual Review Complete Status - ER] |'
  prefs: []
  type: TYPE_TB
- en: '| [Manual Review Not Required Status] | [Manual Review Not Required Status
    - ER] |'
  prefs: []
  type: TYPE_TB
- en: '| [Manual Review Required Tag] | [Manual Review Required Tag - ER] |'
  prefs: []
  type: TYPE_TB
- en: '| [Waiting ML Prediction Tag] | [Waiting ML Prediction Tag - ER] |'
  prefs: []
  type: TYPE_TB
- en: '| [Throw Exception Review Text] | [Throw Exception Review Text - ER] |'
  prefs: []
  type: TYPE_TB
- en: '| [Force HITL Review] | [Force HITL Review - EC] |'
  prefs: []
  type: TYPE_TB
- en: '| [Reviewed Prediction Item Data Field Name] | [Reviewed Prediction Item Data
    Field Name - ER] |'
  prefs: []
  type: TYPE_TB
- en: Table 11.7 – Seven find/replaces for Process 1
  prefs: []
  type: TYPE_NORMAL
- en: 5. Return to the main BP software. Click on *File* | *Import* | *Process / Object*.
    Choose the `.bpprocess` file that was just saved and overwrite the existing Process.
  prefs: []
  type: TYPE_NORMAL
- en: 6. Open the **01 - Processing Refunds** Process in the Process Studio.
  prefs: []
  type: TYPE_NORMAL
- en: 7. Open the **02a Email Classifier Prediction** Page. On this Page, we’ll need
    to rename the Inputs of three Action Stages.
  prefs: []
  type: TYPE_NORMAL
- en: 8. Open the Properties of the **Add [Confidence Score] to [Item Data]** Action.
    Change the *Field Name* Input **[Confidence Item Data Field name -** **EC]**.
  prefs: []
  type: TYPE_NORMAL
- en: 9. Open the Properties of the **Add [Prediction] to [Item Data]** Action. Change
    the *Field Name* Input **[Prediction Item Data Field name -** **EC]**.
  prefs: []
  type: TYPE_NORMAL
- en: 10. Open the Properties of the `Set` **[Status] to "Prediction Complete"** Action.
    Change the *Status* Input **[Prediction Complete Status -** **EC]**.
  prefs: []
  type: TYPE_NORMAL
- en: 11. Open the `02b Random Sampling` Page. On this Page, we’ll delete four Stages
    and add a new Page Stage.
  prefs: []
  type: TYPE_NORMAL
- en: 12. Delete the four Stages between *Require Manual Review?* and *End*. These
    Stages are unneeded because we don’t need to wait for the EC prediction to be
    reviewed in order to continue automated processing.
  prefs: []
  type: TYPE_NORMAL
- en: 13. Create a new Page reference to `02c Push to Queue 2`. Connect the *Yes*
    path of the Decision Stage to this Page Stage and connect the Page Stage to *End*.
    This creates the logic where a randomly sampled prediction gets pushed into a
    new Queue for review.
  prefs: []
  type: TYPE_NORMAL
- en: 14. Connect the *No* path directly to *End*.
  prefs: []
  type: TYPE_NORMAL
- en: 15. Open the `02c Push to Queue 2` Page. On this Page, we’ll delete one Action
    Stage.
  prefs: []
  type: TYPE_NORMAL
- en: 16. Delete the **Add Tag “Waiting for ML Prediction”** Action. Connect the **Add
    To Queue 2** Action to the **Append “Queue 2 Item ID” to [Item** **Data]** Action.
  prefs: []
  type: TYPE_NORMAL
- en: 17. Open the `02d Push to Queue 3` Page. Here, we need to rename a Collection
    and consequently change every other Action Stage on this Page to use this renamed
    Collection. We also need to change the Item Data Field Names that are being used.
  prefs: []
  type: TYPE_NORMAL
- en: 18. Rename the Collection from **Queue 2 Item Data** to **Queue 3** **Item Data**.
  prefs: []
  type: TYPE_NORMAL
- en: 19. Open the Properties of the **Utility - Collection Manipulation:Copy Rows**
    Action. Change the *Output Collection* Output to **Queue 3** **Item Data**.
  prefs: []
  type: TYPE_NORMAL
- en: 20. Open the Properties of the **Append “Queue 1 Item ID” to [Queue 2 Item Data]**
    Action. Rename it **Append “Queue 1 Item ID” to [Queue 3 Item Data]**. Change
    the *Collection* Input to be **[Queue 3 Item Data]** and the *Appended Collection*
    Output to **Queue 3** **Item Data**.
  prefs: []
  type: TYPE_NORMAL
- en: 21. Open the Properties of the **Add to Queue 2** Action. Rename it **Add to
    Queue 3**. Change the *Queue Name* Input to **[Queue Name 3]** and the *Data*
    Input to **[Queue 3** **Item Data]**.
  prefs: []
  type: TYPE_NORMAL
- en: 22. Open the Properties of the **Append “Queue 2 Item ID” to [Item Data]** Action.
    Rename it **Append “Queue 3 Item ID” to [Item Data]**. Change the *Field Name*
    Input to **[Queue 3 Item ID Item Data** **Field Name]**.
  prefs: []
  type: TYPE_NORMAL
- en: 23. Open the `04 Work Step Using the ML Prediction` Page. On this Page, we need
    to change references to **[Prediction Item Data Field Name -** **ER]**.
  prefs: []
  type: TYPE_NORMAL
- en: 24. Open the Properties of the **Set [Prediction] as original prediction** Action.
    Change the *Field Name* Input to **[Prediction Item Data Field Name -** **ER]**.
  prefs: []
  type: TYPE_NORMAL
- en: 25. Open the `05 Generative AI Prediction` Page. Here, we need to change references
    to the GAI Item Data Collection Fields and Status.
  prefs: []
  type: TYPE_NORMAL
- en: 26. Open the Properties of the **Add [Confidence Score] to [Item Data]** Action.
    Change the *Field Name* Input to **[Confidence Item Data Field name -** **GAI]**.
  prefs: []
  type: TYPE_NORMAL
- en: 27. Open the Properties of the **Add [Prediction] to [Item Data]** Action. Change
    the *Field Name* Input to **[Prediction Item Data Field name -** **GAI]**.
  prefs: []
  type: TYPE_NORMAL
- en: 28. Open the Properties of the **Set [Status] to “Prediction Complete”** Action.
    Change the *Status* Input to **[Prediction Complete Status -** **GAI]**.
  prefs: []
  type: TYPE_NORMAL
- en: We’ve finished modifying Process 1\. Let’s continue with Process 2.
  prefs: []
  type: TYPE_NORMAL
- en: Fix IA Data Page references for Process 2 and delete unneeded logic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Process 2, contains the HITL review checking logic for the EC model. Again,
    we’ll use the find/replace method to speed up our work:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the **02 – Email Classifier HITL Review** Process in the Process Studio.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on *File* | *Export* | *This Process*. Save the `.bpprocess` file to a
    location of your choice. Close the Process Studio.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `.bpprocess` file in a text editor, such as Notepad.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Perform the six following find/replaces in your text editor. Save the `.``bpprocess`
    file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **Find Text** | **Replace Text** |'
  prefs: []
  type: TYPE_TB
- en: '| [Disable HITL Review] | [Disable HITL Review - EC] |'
  prefs: []
  type: TYPE_TB
- en: '| [Force Create Review Data] | [Force Create Review Data - EC] |'
  prefs: []
  type: TYPE_TB
- en: '| [Reviewed Prediction Item Data Field Name] | [Reviewed Prediction Item Data
    Field Name - EC] |'
  prefs: []
  type: TYPE_TB
- en: '| [Review Justification Item Data Field Name] | [Review Justification Item
    Data Field Name - EC] |'
  prefs: []
  type: TYPE_TB
- en: '| [Review Data Created Item Data Field Name] | [Review Data Created Item Data
    Field Name - EC] |'
  prefs: []
  type: TYPE_TB
- en: '| [Manual Review Complete Status] | [Manual Review Complete Status - EC] |'
  prefs: []
  type: TYPE_TB
- en: Table 11.8 – Six find/replaces for Process 2
  prefs: []
  type: TYPE_NORMAL
- en: 5. Return to the main BP software. Click on *File* | *Import* | *Process / Object*.
    Choose the `.bpprocess` file that was just saved and overwrite the existing Process.
  prefs: []
  type: TYPE_NORMAL
- en: 6. Open the `02 Check for Reviewed Predictions` Page. Here, we need to delete
    the logic used to update the Work Queue Item for Work Queue 1 since that is no
    longer needed.
  prefs: []
  type: TYPE_NORMAL
- en: 7. Connect the *Review Complete?* Decision Stage’s *No* path directly to an
    *End* Stage.
  prefs: []
  type: TYPE_NORMAL
- en: 8. Delete all of the Stages shown in the following diagram, as they are related
    to updating Work Queue 1’s Item. Updating Process 1 when a review is complete
    is not needed according to the design.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.11: Stages to delete from Page 02 Check for Reviewed Predictions](img/B18416_11_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.11: Stages to delete from Page 02 Check for Reviewed Predictions'
  prefs: []
  type: TYPE_NORMAL
- en: 9. Connect the Anchor under *Set [Item Data]* to Action **Update Status to “Manual**
    **Review Complete”**.
  prefs: []
  type: TYPE_NORMAL
- en: We’ve now finished making changes to Process 2\. Let’s continue with Process
    3.
  prefs: []
  type: TYPE_NORMAL
- en: Fix IA Data Page references and logic for Process 3
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Process 3 performs the ML steps for the ER model. Let’s fix the Item Data references
    for this Process. We’ll again export the Process in `.bpprocess` format, and perform
    find/replaces on the text to speed up our work:'
  prefs: []
  type: TYPE_NORMAL
- en: Open Process **03 – Entity Recognition** in the Process Studio.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on *File* | *Export* | *This Process*. Save the `.bpprocess` file to a
    location of your choice. Close the Process Studio.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `.bpprocess` file in a text editor, such as Notepad.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Perform the eight following find/replaces in your text editor. Save the `.``bpprocess`
    file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **Find Text** | **Replace Text** |'
  prefs: []
  type: TYPE_TB
- en: '| [Force HITL Review] | [Force HITL Review - ER] |'
  prefs: []
  type: TYPE_TB
- en: '| [Prediction Item Data Field Name] | [Prediction Item Data Field Name - ER]
    |'
  prefs: []
  type: TYPE_TB
- en: '| [Confidence Item Data Field Name] | [Confidence Item Data Field Name - ER]
    |'
  prefs: []
  type: TYPE_TB
- en: '| [Prediction Complete Status] | [Prediction Complete Status - ER] |'
  prefs: []
  type: TYPE_TB
- en: '| [Manual Review Required Status] | [Manual Review Required Status - ER] |'
  prefs: []
  type: TYPE_TB
- en: '| [Manual Review Not Required Status] | [Manual Review Not Required Status
    - ER] |'
  prefs: []
  type: TYPE_TB
- en: '| [Waiting ML Prediction Tag] | [Waiting ML Prediction Tag - ER] |'
  prefs: []
  type: TYPE_TB
- en: '| [Manual Review Required Tag] | [Manual Review Required Tag - ER] |'
  prefs: []
  type: TYPE_TB
- en: Table 11.9 – Eight find/replaces for Process 3
  prefs: []
  type: TYPE_NORMAL
- en: 5. Return to the main BP software. Click on *File* | *Import* | *Process / Object*.
    Choose the `.bpprocess` file that was just saved and overwrite the existing Process.
  prefs: []
  type: TYPE_NORMAL
- en: 6. Open the **03 – Entity Recognition** Process in the Process Studio.
  prefs: []
  type: TYPE_NORMAL
- en: 7. Open the `02 Thresholding` Page. On this Page, we’ll replace the **Intelligent**
    **Automation::Get Threshold by Label** Action with a placeholder Calculation Stage.
  prefs: []
  type: TYPE_NORMAL
- en: 8. Replace the **Utility – Intelligent Automation::Get Threshold by Label**
    Action with a Calculation Stage named *Implement Threshold Logic*. Set the *Expression*
    to **0.8** and *Store Result In* as **Threshold Value**. This will act as a placeholder
    for the actual threshold logic.
  prefs: []
  type: TYPE_NORMAL
- en: 9. Open the `03b Push to Queue 3 and Update Queue 1 Item` Page. Rename this
    Page `03b Push to Queue 4 and Update Queue 1 Item`. Here, we need to rename a
    Collection and consequently change every other Action Stage on this Page to use
    this renamed Collection.
  prefs: []
  type: TYPE_NORMAL
- en: 10. Rename the **Queue 3 Item Data** Collection **Queue 4** **Item Data**.
  prefs: []
  type: TYPE_NORMAL
- en: 11. Open the Properties of the **Utility - Collection Manupulation:Copy Rows**
    Action. Change the *Output Collection* Output to **Queue 4** **Item Data**.
  prefs: []
  type: TYPE_NORMAL
- en: 12. Open the Properties of the **Append "Queue 2 Item ID" to [Queue 3 Item Data]**
    Action. Rename it to **Append "Queue 3 Item ID" to [Queue 4 Item Data]**. Change
    the *Collection* Input to **[Queue 4 Item Data]**. Change the *Field Name* Input
    to **[Queue 3 Item ID Item Data Field Name]**. Change the *Appended Collection*
    Output to be **Queue 4** **Item Data**.
  prefs: []
  type: TYPE_NORMAL
- en: 13. Open the Properties of the **Add to Queue 3** Action. Rename it to **Add
    to Queue 4**. Change the *Queue Name* Input to **[Queue Name 4]** and the *Data*
    Input to be **[Queue 4** **Item Data]**.
  prefs: []
  type: TYPE_NORMAL
- en: 14. Open the Properties of the **Add Queue 3 Item ID to [Queue 1 Item Data]**
    Action. Rename it to **Add Queue 4 Item ID to [Queue 1 Item Data]**. Change the
    *Field Name* Input to **[Queue 4 Item ID Item Data** **Field Name]**.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, let’s make the reference changes needed for Process 4.
  prefs: []
  type: TYPE_NORMAL
- en: Fix IA Data Page references for Process 4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Process 4 performs the HITL review steps for the ER model. Let’s fix the Item
    Data references for this Process. We only need to perform the find/replaces, no
    other changes to the Process logic are needed:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the **04 – Entity Recognition HITL Review** Process in the Process Studio.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on *File* | *Export* | *This Process*. Save the `.bpprocess` file to a
    location of your choice. Close the Process Studio.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `.bpprocess` file in a text editor, such as Notepad.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Perform the seven following find/replaces in your text editor. Save the `.``bpprocess`
    file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **Find Text** | **Replace Text** |'
  prefs: []
  type: TYPE_TB
- en: '| [Disable HITL Review] | [Disable HITL Review - ER] |'
  prefs: []
  type: TYPE_TB
- en: '| [Force Create Review Data] | [Force Create Review Data - ER] |'
  prefs: []
  type: TYPE_TB
- en: '| [Reviewed Prediction Item Data Field Name] | [Reviewed Prediction Item Data
    Field Name - ER] |'
  prefs: []
  type: TYPE_TB
- en: '| [Review Justification Item Data Field Name] | [Review Justification Item
    Data Field Name - ER] |'
  prefs: []
  type: TYPE_TB
- en: '| [Review Data Created Item Data Field Name] | [Review Data Created Item Data
    Field Name - ER] |'
  prefs: []
  type: TYPE_TB
- en: '| [Manual Review Complete Status] | [Manual Review Complete Status - ER] |'
  prefs: []
  type: TYPE_TB
- en: '| [Manual Review Required Tag] | [Manual Review Required Tag - ER] |'
  prefs: []
  type: TYPE_TB
- en: Table 11.10 – Seven find/replaces for Process 4
  prefs: []
  type: TYPE_NORMAL
- en: 5. Return to the main BP software. Click on *File* | *Import* | *Process / Object*.
    Choose the `.bpprocess` file that was just saved and overwrite the existing Process.
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ve finished creating the structure of the solution design shown in *Figure
    11**.1*. A model solution can be found on GitHub: [https://github.com/PacktPublishing/Intelligent-Automation-with-Blue-Prism/blob/main/ch11/Ex_1_Creating_the_Solution_Structure.bprelease](https://github.com/PacktPublishing/Intelligent-Automation-with-Blue-Prism/blob/main/ch11/Ex_1_Creating_the_Solution_Structure.bprelease).
    The changes that were made to the template are highlighted in orange font on the
    Process diagrams. Process 1 also loads three Items into Work Queue 1 to facilitate
    testing the solution flow. If you’d like, publish the four Processes and run the
    model solution in the Process Studio to confirm that the solution flow matches
    the design.'
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have the structure of the solution in place, let’s add in some of
    the IA details that we know of for Process 1.
  prefs: []
  type: TYPE_NORMAL
- en: Example 2 – Implementing the IA details in Process 1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After verifying that the solution structure works, we decide to proceed further
    with the IA implementation. As the EC model is internally developed, we don’t
    have a test API to use just yet.
  prefs: []
  type: TYPE_NORMAL
- en: 'The previous discussions with the business users and ML team, have led to a
    number of decisions around the review criteria and auditing. These are captured
    in *Table 11.1*. Some of these ML requirements can be implemented even without
    a finalized model. In this example, we’ll be implementing some of those details
    in eight high-level steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Import the model solution to use as a starting point (optional).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a mock EC prediction.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Remove the EC prediction BP logging.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create an EC model kill switch.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the EC prediction’s random sampling rate to 5%.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a mock GAI prediction.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Remove the GAI prediction BP logging.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a GAI model kill switch.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download and import the solution structure
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is an optional step if you haven’t completed *Example 1*. Download the
    Release from ([https://github.com/PacktPublishing/Intelligent-Automation-with-Blue-Prism/blob/main/ch11/Ex_1_Creating_the_Solution_Structure.bprelease](https://github.com/PacktPublishing/Intelligent-Automation-with-Blue-Prism/blob/main/ch11/Ex_1_Creating_the_Solution_Structure.bprelease))
    and import it into BP. Verify that it contains four Processes, four Work Queues,
    and one Credential.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.12 – The Release contents to start Example 2](img/B18416_11_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.12 – The Release contents to start Example 2
  prefs: []
  type: TYPE_NORMAL
- en: Add a mock EC prediction
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The EC prediction API isn’t finalized yet, but we’d still like to test different
    branches of our Process flow, depending on if the prediction is *refund* or *not
    a refund*. We know that roughly 70/500 = 14% emails received daily will be actual
    refund requests, so let’s create fake predictions using a random number generator,
    which sets the prediction to be *refund* 14% of the time:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the **01 – Processing Refunds** Process in the Process Studio.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `02a Email Classifier Prediction` Page and locate the orange Block
    named *Predict*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Delete the placeholder *Note*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a `Number` Data Item named **Refund Percentage**. Set the Initial Value
    to **14**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a `Number` Data Item named **Random Value**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a `Text` Data Item named **Predicted Value**. Set the Initial Value to
    **Not** **a Refund**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a **Utility – Intelligent Automation::Random Integer In Range** Action.
    Set the *Lower Limit* Input to **1** and the *Upper Limit* Input to **100**. Set
    the *Output* Value to **Random Value**. Link to it from the *Log [Model Version]*
    Calculation Stage.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a Decision Stage named *Refund?* Under the Action from the previous step.
    Set the *Expression* to **[Random Value] <= [Refund Percentage]**. Link to this
    from the Action Stage.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a Calculation Stage named *Set Predicted Value to Refund*. Set the *Expression*
    to **"Refund"** and *Store Result In* to **Predicted Value**. Link the *Yes* path
    of the *Refund?* Decision Stage to this Stage. Link this Stage to the *Set [Prediction]
    and [Confidence Score]* Multi Calc Stage.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Link the *No* path of the *Refund?* Decision Stage to the *Set [Prediction]
    and [Confidence Score]* Multi Calc Stage.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the *Set [Prediction] and [Confidence Score]* Multi Calc Stage. Change
    the Expression of the first row to **[****Predicted Value]**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Verify that your diagram looks like the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.13 – Create a mock EC prediction](img/B18416_11_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.13 – Create a mock EC prediction
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have the EC mock prediction, let’s delete the model version logging.
  prefs: []
  type: TYPE_NORMAL
- en: Remove the EC model logging
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Recall that the EC model calls will be logged on the API server’s side. We don’t
    need to log it from BP. Turning off the logging will reduce the amount of data
    stored in the database.
  prefs: []
  type: TYPE_NORMAL
- en: Delete the *Log [Model Version]* Calculation Stage. Link the Stages that were
    before and after this deleted Stage to bridge the gap. Ensure that you link the
    *No* Path of the previous Decision Stage.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the *Set [Prediction] and [Confidence Score]* Multi Calc Stage. Set *Stage
    logging* to *Errors only*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Delete the **temp** and **Model Version** Data Items.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: While we’re still on the `02a Email Classifier Prediction` Page, we should also
    create a unique kill switch for this model.
  prefs: []
  type: TYPE_NORMAL
- en: Create a unique kill switch for the EC prediction
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The kill switch in the template is a placeholder. Let’s put a real one in place
    by creating a Credential and an Environment Variable and editing the kill switch
    logic:'
  prefs: []
  type: TYPE_NORMAL
- en: Visit *System* | *Security* | *Credentials*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click *New* and set the Name to **Ch11 EC** **Kill Switch**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the *Access Rights* tab. Under *Security Roles*, choose *All Roles*.
    Under *Processes (legacy)*, choose *All Processes*. Under *Resources (legacy)*,
    choose *All Resources*. This is not best practices and is only being done for
    ease of demonstration.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Visit *System* | *Processes* | *Environment Variables*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on *Add Variable*. Name it `Text` and the Value to **Ch11 EC** **Kill
    Switch**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Return to the Process Studio, to the `02a Email Classifier` `Prediction` Page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the **Kill Switch Credential Name** Data Item Exposure to *Environment*.
    Set the Name to **Ch11 Example 2 EC Kill** **Switch Name**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the Properties of the **Get Kill Switch Credential** Action. Change the
    *Credential Name* Input to **[Ch11 Example 2 EC Kill** **Switch Name]**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We’ve finished creating the kill switch for the EC model. Next, let’s set the
    EC model’s random sampling rate according to the requirements.
  prefs: []
  type: TYPE_NORMAL
- en: Change the EC sampling rate to 5%
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To change the random sampling rate, we’ll create a `Number` Environment Variable
    and set it to *5*. Then we’ll change the diagram to make use of this Environment
    Variable:'
  prefs: []
  type: TYPE_NORMAL
- en: Visit *System* | *Processes* | *Environment Variables*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on *Add Variable*. Name it `Number` and the Value to **5.0**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Return to the Process Studio’s **01 –** **Processing Refunds**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `02b Random` `Sampling` Page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the **Random Sampling Rate** Data Item’s Exposure to *Environment*. Choose
    **Ch11 Example 2 EC Random Sampling Target** as the *Name*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the Expression of the *Require Manual Review?* Decision Stage to **[Force
    HITL Review - EC] OR [Random Number] < [Ch11 Example 2 EC Random** **Sampling
    Target]**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We’ve finished implementing some of the requirements for the EC model. Let’s
    move to the GAI model next and create a mock GAI prediction call.
  prefs: []
  type: TYPE_NORMAL
- en: Add a mock GAI prediction
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'While the GAI model is available to be called, doing so incurs costs. We still
    want to have a mock GAI call and to save using actual calls until later. For this,
    we’ll simply hard-code an email text message as the result of a GAI prediction:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `05 Generative AI Prediction` Page and locate the orange Block named
    *Predict*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Delete the placeholder *Note*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a `Text` Data Item named **GAI Email**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a Calculation Stage named *Set GAI Email*. Set the *Expression* to **"Your
    refund request was processed automatically"**. Set *Store Result in* to **GAI
    Email**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the *Set [Prediction] and [Confidence Score]* Multi Calc Stage. Change
    the Expression of the first row to **[****GAI Email]**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Link Calculation Stage *Log [Model Version]* to Calculation Stage *Set GAI Email*
    and to Multi Calc Stage *Set [Prediction] and [**Confidence Score]*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Remove the GAI model logging
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Recall that the GAI model results don’t need to be logged. The input prompt
    is static and the output email is logged in the CRM system. While the model version
    number is returned, we essentially don’t have any control over model rollbacks
    as it’s a third-party service. Turning off the logging will reduce the amount
    of data stored in the database:'
  prefs: []
  type: TYPE_NORMAL
- en: Delete the *Log [Model Version]* Calculation Stage. Link the Stages that were
    before and after this deleted Stage to bridge the gap. Ensure that you link the
    *No* Path of the previous Decision Stage.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the *Set [Prediction] and [Confidence Score]* Multi Calc Stage. Set *Stage
    logging* to *Errors only*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Delete the **temp** and **Model Version** Data Items.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a unique kill switch for the GAI prediction
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The kill switch in the template is a placeholder. Let’s put a real one in place
    by creating a Credential and an Environment Variable and editing the kill switch
    logic:'
  prefs: []
  type: TYPE_NORMAL
- en: Visit *System* | *Security* | *Credentials*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click *New* and set the Name to **Ch11 GAI** **Kill Switch**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the *Access Rights* tab. Under *Security Roles*, choose *All Roles*.
    Under *Processes (legacy)*, choose *All Processes*. Under *Resources (legacy)*,
    choose *All Resources*. This is not best practice and is only being done for ease
    of demonstration.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Visit *System* | *Processes* | *Environment Variables*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on *Add Variable*. Name it `Text` and the Value to **Ch11 GAI** **Kill
    Switch**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Return to the Process Studio, to the `05 Generative AI` `Prediction` Page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the **Kill Switch Credential Name** Data Item Exposure to *Environment*.
    Set the Name to **Ch11 Example 2 GAI Kill** **Switch Name**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the Properties of the **Get Kill Switch Credential** Action. Change the
    *Credential Name* Input to **[Ch11 Example 2 GAI Kill** **Switch Name]**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We’ve completed the second example. Here, we implemented some mock predictions
    for the EC and GAI models. We also fulfilled the auditing and random sampling
    requirements. While we could continue modifying the other Processes, the procedure
    is largely the same. Continuing with further development would require getting
    into the Objects and business logic details.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we went through the requirements of a real-life use case that
    uses three different ML models. We analyzed the requirements of each ML model
    individually, which informed us of their auditing and scaling needs. This helped
    us determine the appropriate number of Processes and Work Queues to use in our
    IA solution.
  prefs: []
  type: TYPE_NORMAL
- en: We went through an example to implement the solution structure. We started with
    the three-Process and three-Work Queue templates, and used `IA Data` Page of each
    template to clearly define what Item Data Field names, Statuses, Tags, and Session
    Variables will be used in the solution. Finally, we edited the IA solution logic
    to make use of these new Data Items.
  prefs: []
  type: TYPE_NORMAL
- en: This example will help structure your thinking around how to design a complex
    IA solution, how to think about the ML requirements, and how to choose the proper
    template to get you started. Keep in mind that you should be creating templates
    of your own if you come across situations that the templates in this book haven’t
    covered.
  prefs: []
  type: TYPE_NORMAL
- en: Then, we looked at a second example, where we implemented simple mock predictions
    for two of the ML models. Creating mock predictions is important, as it allows
    you to save costs from calling commercial APIs, and it prevents you from waiting
    for the ML model to be built before continuing forward. ML models are almost always
    being built in parallel to IA, and mocking allows you to test the entire process
    flow, even if the model isn’t ready yet.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we’ll look at another real-life IA scenario, but we’ll
    shift away from development and design, and instead focus on the ongoing management
    and deployment aspects of an IA solution.
  prefs: []
  type: TYPE_NORMAL
