["```py\nimport statsmodels.api as sm\ndf_affairs = sm.datasets.fair.load().data\ntotal_count = df_affairs.shape[0]\npositive_count = df_affairs.loc[df_affairs['affairs'] > 0].shape[0]\npositive_pct = positive_count / total_count\nnegative_pct = 1 - positive_pct\nprint(\"Class 1 Balance: {}%\".format(round(positive_pct*100, 2)))\nprint(\"Class 2 Balance: {}%\".format(round(negative_pct*100, 2)))\n```", "```py\ndf_affairs['affairs'] = np.where(df_affairs['affairs'] > 0, 1, 0)\n```", "```py\nX=df_affairs[['rate_marriage','age','yrs_married','children','religious','educ','occupation','occupation_husb']]\ny=df_affairs['affairs']\n```", "```py\ndf_affairs_sd = pd.concat([X, y], axis=1)\nfor col in df_affairs_sd.columns:\n    if col not in ['affairs','occupation','occupation_husb']:\n        print('Affairs = 0, Feature = {}, Standard Deviation = {}'.format(col, round(np.std(df_affairs_sd.loc[df_affairs_sd['affairs'] == 0, col]), 2)))\n        print('Affairs = 1, Feature = {}, Standard Deviation = {}'.format(col, round(np.std(df_affairs_sd.loc[df_affairs_sd['affairs'] == 1, col]), 2)))\n```", "```py\nimport pandas as pd\npd.options.mode.chained_assignment = None\nX['occupation'] = X['occupation'].map({1:'Occupation_One',\n                                       2:'Occupation_Two',\n                                       3:'Occupation_Three',\n                                       4:'Occupation_Four',\n                                       5:'Occupation_Five',\n                                       6:'Occupation_Six'})\nX = pd.get_dummies(X, columns=['occupation'])\nX.drop('occupation_husb', axis=1, inplace=True)\n```", "```py\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)\n```", "```py\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import StandardScaler\nX_train_sc = X_train.copy()\nX_test_sc = X_test.copy()\nct = ColumnTransformer([\n        ('', StandardScaler(), ['rate_marriage','age','yrs_married','children','religious','educ'])], remainder='passthrough')\nX_train_sc = ct.fit_transform(X_train_sc)\nct = ColumnTransformer([\n        ('', StandardScaler(), ['rate_marriage','age','yrs_married','children','religious','educ'])], remainder='passthrough')\nX_test_sc = ct.fit_transform(X_test_sc)\n```", "```py\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nlda = LinearDiscriminantAnalysis()\nlda.fit(X_train_sc, y_train)\n```", "```py\ndef precision_score(true_positives:int, false_positives:int):\n    precision = true_positives / (true_positives + false_positives)\n    return precision;\ndef recall_score(true_positives:int, false_negatives:int):\n    recall = true_positives / (true_positives + false_negatives)\n    return recall;\n```", "```py\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\ny_train_pred = lda.predict(X_train_sc)\ncf_train = confusion_matrix(y_train, y_train_pred, labels=[0,1])\ntn_train, fp_train, fn_train, tp_train = cf_train.ravel()\ncf_matrix = sns.heatmap(cf_train, annot=True, fmt='g', cbar=False)\ncf_matrix.set(xlabel='Predicted', ylabel='Actual', title='Confusion Matrix - Train');\nprint('Precision on Train: ', round(precision_score(tp_train, fp_train), 4))\nprint('Recall on Train: ', round(recall_score(tp_train, fn_train), 4))\n```", "```py\ny_test_pred = lda.predict(X_test_sc)\ncf_test = confusion_matrix(y_test, y_test_pred, labels=[0,1])\ntn_test, fp_test, fn_test, tp_test = cf_test.ravel()\ncf_matrix = sns.heatmap(cf_test, annot=True, fmt='g', cbar=False)\ncf_matrix.set(xlabel='Predicted', ylabel='Actual', title='Confusion Matrix - Test');\nprint('Precision on Test: ', round(precision_score(tp_test, fp_test), 4))\nprint('Recall on Test: ', round(recall_score(tp_test, fn_test), 4))\n```", "```py\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nlda = LinearDiscriminantAnalysis()\nX_reduced = lda.fit_transform(X_train_sc, y_train)\n```", "```py\nprint('Input data dimensions: ', X_train_sc.shape)\nprint('Transformed data dimensions: ', X_reduced.shape)\n```", "```py\nfrom sklearn.discriminant_analysis import QuadraticDiscriminantAnalysis\n# fit the model using sklearn\nmodel_qda = QuadraticDiscriminantAnalysis(store_covariance=True)\nmodel_qda.fit(X_train, y_train)\ny_hat_qda = model_qda.predict(X_test)\npred_qda = list(map(round, y_hat_qda))\n```", "```py\nimport matplotlib.pyplot as plt\nFIGSIZE = (8,8)\nXax= np.array(df1[\"sepal_length\"])\nYax= np.array(df1[\"sepal_width\"])\nlabels= np.array(df1[\"target\"])\ncdict={0:'red',1:'green', 2 :'blue'}\nlabl={0:'setosa',1:'versicolor', 2: 'virginica'}\nmarker={0:'*',1:'o', 2:'p'}\nalpha={0:.3, 1:.5, 2:.3}\nfig,ax=plt.subplots(figsize=FIGSIZE)\nfig.patch.set_facecolor('white')\nfor l in np.unique(labels):\n   ix=np.where(labels==l)\n   ax.scatter(Xax[ix],Yax[ix],c=cdict[l],s=40,\n      label=labl[l],marker=marker[l],alpha=alpha[l])\nplt.xlabel(\"Sepal Length\",fontsize=14)\nplt.ylabel(\"Sepal Width\",fontsize=14)\nplt.legend()\nplt.show()\n```", "```py\ndf1['species'] = df1['target']\ndf1['species'] = df1['species'].apply(lambda x: 'setosa'\n      if x==0 else('versicolor' if x==1 else 'virginica'))\nX = df1.drop(['target','species'], axis=1)\ny = df1['target']\nmodel_qda = QuadraticDiscriminantAnalysis(store_covariance=True)\nmodel_qda.fit(X,y)\n```", "```py\nsepal_length = np.linspace(4, 8, 500)\nsepal_width = np.linspace(1.5, 4.5, 500)\nsepal_length,sepal_width  = np.meshgrid(sepal_length, sepal_width)\nprediction = np.array([model_qda.predict( np.array([[x,y]])) for x,y in zip(np.ravel(sepal_length), np.ravel(sepal_width)) ]).reshape(sepal_length.shape)\n```", "```py\nfig = sns.FacetGrid(df1, hue=\"species\", size=8, palette = 'colorblind').map(plt.scatter, \"sepal_length\", \"sepal_width\").add_legend()\nfigax = fig.ax\nfigax.contourf(sepal_length,sepal_width, prediction, 2, alpha = .1, colors = ('red','green','blue'))\nfigax.contour(sepal_length,sepal_width, prediction, 2, alpha = 1, colors = ('red','green','blue'))\nfigax.set_xlabel('Sepal Length')\nfigax.set_ylabel('Sepal Width')\nfigax.set_title('QDA Visualization')\nplt.show()\n```"]