- en: '*Chapter 7*: Clustering Using the K-Means Algorithm'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we'll introduce unsupervised machine learning, and you'll learn
    how to use BigQuery ML to build K-Means algorithms to cluster similar data into
    multiple categories.
  prefs: []
  type: TYPE_NORMAL
- en: Unsupervised machine learning is particularly useful when we have datasets without
    any labels, and we need to infer the structure of the data without any initial
    knowledge.
  prefs: []
  type: TYPE_NORMAL
- en: In different industries, it can be very valuable to identify similar events,
    objects, and people according to a specific set of features. K-Means clustering
    is typically used to identify similar customers, documents, products, events,
    or items according to a specific set of characteristics.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we'll focus our attention on the K-Means clustering algorithm,
    which is widely used to reveal similarities in structured and unstructured data.
    We'll go through all the steps required to build a K-Means clustering model, leveraging
    BigQuery ML.
  prefs: []
  type: TYPE_NORMAL
- en: 'With an incremental approach, we''ll go through the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing the business scenario
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Discovering K-Means clustering
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring and understanding the dataset
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Training a K-Means clustering model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Evaluating a K-Means clustering model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using a K-Means clustering model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Drawing business conclusions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter requires you to have access to a web browser and to be able to
    leverage the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A **Google Cloud Platform** (**GCP**) account to access the **GCP** console
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A GCP project to host the BigQuery datasets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that we're ready with the technical requirements, let's dive into the analysis
    and development of our BigQuery ML clustering model.
  prefs: []
  type: TYPE_NORMAL
- en: 'Check out the following video to see the Code in Action: [https://bit.ly/2Rx2Uk5](https://bit.ly/2Rx2Uk5)'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing the business scenario
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Imagine that you are a business analyst who works for large taxi companies in
    Chicago. These taxi companies make thousands of trips every day to satisfy the
    public transport needs of the entire city. The work and the behavior of the taxi
    drivers are fundamental in generating revenues for companies and delivering an
    effective service for all customers, every day.
  prefs: []
  type: TYPE_NORMAL
- en: 'For our business scenario, let''s imagine that all the taxi companies want
    to give an additional reward to drivers who perform the best. The goal of the
    companies is to segment the drivers into three distinct categories, according
    to generated revenue and driving speed. The three groups can be described as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The **Top Drivers** are the employees with the best revenue and efficiency throughout
    the year. This group will receive a huge additional reward.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Good Drivers** are drivers who performed well but aren't excelling. This
    group will not receive any reward.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Neutral Drivers** are drivers with neutral or negative results in terms
    of revenue and efficiency.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The parameters to identify the clusters are not known *a priori* because they
    can change according to different factors, such as profitability, speed, and traffic
    conditions. Some years are more profitable than others, and it can happen that
    the driving speed could be impacted by particular traffic conditions.
  prefs: []
  type: TYPE_NORMAL
- en: As a business analyst, your job is to find the best algorithm to cluster the
    Chicago taxi drivers according to the described categories in order to classify
    the drivers into three clusters, according to their performance.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we've explained and understood the problem statement, let's take a
    look at the machine learning technique that we can use to predict a numerical
    value such as the duration of a trip.
  prefs: []
  type: TYPE_NORMAL
- en: Discovering K-Means clustering
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we'll understand what **unsupervised learning** is and we'll
    learn the basics of the **K-Means** clustering technique.
  prefs: []
  type: TYPE_NORMAL
- en: '**K-Means** is an **unsupervised learning** algorithm that solves clustering
    problems. This technique is used to classify data into a set of classes. The letter
    *k* represents the number of clusters that are fixed *a priori*. For our business
    scenario, we''ll use three different clusters.'
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: While supervised learning is based on a prior knowledge of what the output values
    of labels should be in a training dataset, unsupervised learning does not leverage
    labeled datasets. Its goal is to infer the structure of data within a training
    dataset, without any prior knowledge of it.
  prefs: []
  type: TYPE_NORMAL
- en: Each cluster of data is characterized by a **centroid**. The centroid represents
    the midpoint of the cluster and is identified during the training stage and according
    to the features of the model.
  prefs: []
  type: TYPE_NORMAL
- en: After the training of the K-Means clustering model, each entity can be associated
    with the nearest centroid and included in one of the *k* clusters.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following diagram, you can take a look at the graphical representation
    of a simple clustering model based on two features and a value of *k* equals to
    `3`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.1 – Graphical representation of K-Means clustering'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16722_07_002.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.1 – Graphical representation of K-Means clustering
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding Cartesian diagram, you can see some observations represented
    by dots. The diagram is composed of two axes that correspond to the features used
    to train the K-Means clustering machine learning model.
  prefs: []
  type: TYPE_NORMAL
- en: According to the values of the two features, some observations are closer than
    others. Assuming that we need to cluster the observations into three different
    clusters, the K-Means model is trained to find the three areas that divide the
    observations into different classes.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll not go through all the details of the K-Means clustering algorithm in
    this book, but we can mention some examples of use cases where this kind of algorithm
    is applicable. In real life, we can find a lot of scenarios that can be addressed
    with a clustering model, such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Customer segmentation**: Finding similar customers in the customer base of
    a company to improve the effectiveness of marketing campaigns and promotions'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Employee segmentation**: Identifying employees with the best performance'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Document classification**: Clustering documents into multiple categories
    according to tags, topics, authors, and publishing dates'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In our business scenario, we''ll train a K-Means clustering model based on
    three different clusters: **top**, **good**, and **neutral** drivers. To achieve
    our goal, we''ll use information regarding the revenues generated by each taxi
    driver and the driving speed, calculated as the ratio between miles driven and
    the time spent on each ride.'
  prefs: []
  type: TYPE_NORMAL
- en: We've learned the basics of K-Means clustering, so now it's time to take a look
    at the dataset that we'll use to build our machine learning model.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring and understanding the dataset
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before diving into the machine learning implementation, we'll start analyzing
    the dataset that will be used to train our machine learning model.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this use case, we''ll use the BigQuery public dataset we''ve already used
    in [*Chapter 5*](B16722_05_Final_ASB_ePub.xhtml#_idTextAnchor075), *Predicting
    Boolean Values Using Binary Logistic Regression*. This dataset contains information
    on taxi rides collected by the *City of Chicago*, which can be found at the following
    link: [https://console.cloud.google.com/marketplace/details/city-of-chicago-public-data/chicago-taxi-trips](https://console.cloud.google.com/marketplace/details/city-of-chicago-public-data/chicago-taxi-trips).'
  prefs: []
  type: TYPE_NORMAL
- en: Let's start by getting a clear understanding of the information that we have
    in our dataset to build our K-Means clustering model.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we'll explore the structure of the data we'll use to develop
    our BigQuery ML model.
  prefs: []
  type: TYPE_NORMAL
- en: 'To start exploring the data, we need to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to GCP and access the **BigQuery** user interface from the navigation
    menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new dataset under the project that we created in [*Chapter 2*](B16722_02_Final_ASB_ePub.xhtml#_idTextAnchor039),
    *Setting Up Your GCP and BigQuery Environment*. For this use case, we'll create
    a `07_chicago_taxi_drivers` dataset with default options.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the `bigquery-public-data` GCP project that hosts all the BigQuery public
    datasets and browse the items until we find the `chicago_taxi_trips` dataset.
    In this public dataset, we can see only one BigQuery table: `taxi_trips`. This
    table contains all the information about taxi rides happening in the city of Chicago,
    and we''ll use it to train and test our K-Means clustering model.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We've already used the same data in [*Chapter 5*](B16722_05_Final_ASB_ePub.xhtml#_idTextAnchor075),
    *Predicting Boolean Values Using Binary Logistic Regression*. For this reason,
    we already know the overall schema of the `taxi_trips` table and its fields.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following screenshot, you can see the full list of fields belonging
    to the `taxi_trips` table:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.2 – The list of fields belonging to the taxi_trips table'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16722_07_003.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.2 – The list of fields belonging to the taxi_trips table
  prefs: []
  type: TYPE_NORMAL
- en: 'For this use case, we focus our attention on the following fields that will
    be used in the creation of our machine learning model:'
  prefs: []
  type: TYPE_NORMAL
- en: '`trip_miles`: Contains the number of miles traveled by the taxi driver during
    a specific ride.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`trip_seconds`: Represents the duration of each taxi ride, expressed in seconds.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fare`: This is the fee paid by the customer to the taxi driver and represents
    the income of the driver.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tips`: This column contains the value of the tip that the taxi driver received
    from the customer.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We deliberately ignore other columns related to the cost of the taxi ride, such
    as `tolls` and `extras`, because these values are not directly impacted by the
    taxi driver's activity.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we've selected the table and columns that will be used to train
    our machine learning model. Now, it's time to look at the data so that we can
    understand how to use it.
  prefs: []
  type: TYPE_NORMAL
- en: Checking the data quality
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we'll apply some data quality checks before developing our
    machine learning model.
  prefs: []
  type: TYPE_NORMAL
- en: The quality of data is fundamental to building effective K-Means clustering
    models. Since the goal is to cluster observations into multiple categories, outliers
    in the data can create unbalanced clusters, based on incorrect values in the data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start analyzing the dataset that will be used to build our machine learning
    model, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to identify the time frame of our dataset, let''s extract the minimum
    and maximum value of the `trip_start_timestamp` field, like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: On executing this `2013` to `2020`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The result of the query is presented in the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 7.3 – The result of the query shows the time frame of the dataset'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B16722_07_004.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 7.3 – The result of the query shows the time frame of the dataset
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: To address our business scenario, we can focus our attention on the taxi rides
    that occurred in `2020`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In the second step, we''ll inspect the maximum values of the speed (expressed
    in miles per hour) and of a taxi driver''s income. Let''s execute the following
    query:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The internal `SELECT` statement calculates the average speed, dividing the value
    of the `trip_miles` field and the duration of the ride expressed in hours `(trip_seconds/60/60)`.
    The calculated value is stored in the `speed_mph` column. It also creates the
    `tot_income` field, which sums up the `fare` and `tips` values for each `taxi_id`
    field. With the `EXTRACT(YEAR from trip_start_timestamp) = 2020` filter, we're
    selecting only the taxi rides that occurred in `2020`. Adding filters on the `trip_seconds`,
    `trip_miles`, and `fare` fields, we're also excluding all the empty and `NULL`
    values that can occur in the dataset. The most external `SELECT` statement identifies
    the maximum values of the average speed and of the income, using the `MAX (speed_mph),
    MAX (tot_income)` keywords.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The result of the query is presented in the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 7.4 – The result of the query shows outliers in terms of speed and
    income'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16722_07_005.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.4 – The result of the query shows outliers in terms of speed and income
  prefs: []
  type: TYPE_NORMAL
- en: From the results, it's quite clear that the dataset contains some outliers that
    are not compatible with the actual use case. In fact, the maximum average speed
    is about 667 miles per hour, and the maximum income for a taxi driver is more
    than 1 million **US dollars** (**USD**).
  prefs: []
  type: TYPE_NORMAL
- en: The query that we've just executed points out that there are some unrealistic
    values in our dataset that need to be filtered out in the next steps.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we've performed some quality checks on our dataset, let's focus on
    creating our training datasets.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the training datasets
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For K-Means clustering, we only need to create a dataset that will be used to
    train and test the machine learning model.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start creating our datasets that will be used to train two different
    K-Means clustering models, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First of all, let''s create a table that contains only the `speed_mph` field
    as an input feature for our K-Means clustering model, by running the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The query creates the `taxi_miles_per_minute` table in the `07_chicago_taxi_drivers`
    dataset.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The table contains two different fields: the identifier of the taxi in the
    `taxi_id` column, and the average speed (expressed in miles per hour) in the `speed_mph`
    field. The average speed is calculated for each `taxi_id` field present in the
    `taxi_trips` table, using the `GROUP BY taxi_id` clause. The new table includes
    only the taxi rides that occurred in 2020.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The last two lines of the query contain the `WHERE` clause that is used to filter
    out outliers. We're assuming that the maximum realistic average speed is `50`
    miles per hour.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In the second step, we''ll create another table to host the additional feature
    (namely, `tot_income`), as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The execution of the query generates a `taxi_speed_and_income` table. This table
    includes the `speed_mph` field calculated with the same rules of *Step 1*. The
    table also includes the `tot_income` field. This value is calculated as the `SUM`
    of the `fare` and the `tips` for each `taxi_id` field and for the entire duration
    of 2020.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Compared to the table created in *Step 1*, we've added another filter that limits
    the annual `tot_income` value to 150,000.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: This second table will be used to create another K-Means clustering machine
    learning model based on the two `speed_mph` and `tot_income` features.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now that we've created the tables on which our BigQuery ML model will be trained,
    let's dive into the creation of the machine learning model.
  prefs: []
  type: TYPE_NORMAL
- en: Training the K-Means clustering model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we''ll create two different K-Means machine learning models.
    The first model will be created using `taxi_miles_per_minute` as a training dataset,
    while the second will include also `tot_income` as a feature and will leverage
    `taxi_speed_and_income`. Let''s proceed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'As a first step, let''s start training a machine learning model named `clustering_by_speed`
    by running the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The first lines of the SQL statement are composed of the `CREATE OR REPLACE
    MODEL` keywords, followed by the identifier of the `` `07_chicago_taxi_drivers.clustering_by_speed`
    `` machine learning model and the `OPTIONS` clause.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, let''s take a look at the options that we''ve used to train the machine
    learning model. The selected model type is `''kmeans''`. This option describes
    the technique that we''re using to train the model. The `num_clusters` option
    is valued at `3` because we''re trying to classify observations into three different
    clusters: *Top*, *Good*, and *Neutral*.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: By default, BigQuery ML starts the training of the K-Means clustering algorithm
    with a random starting point. The quality of the machine learning model also depends
    on this point, which is randomly chosen by BigQuery. By using the `kmeans_init_method
    = 'KMEANS++'` option, the point is initialized leveraging the `taxi_miles_per_minute`
    table except for the `taxi_id` column, which will only be used during the prediction
    phase.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'After the training of the first machine learning model, let''s train a second
    one, which also includes the `tot_income` value of the taxi driver during the
    year, as illustrated in the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This query is very similar to the SQL statement executed for the creation of
    the previous K-Means clustering model, but we can immediately notice a relevant
    difference. The `clustering_by_speed_and_income` model is trained using an additional
    option, `standardize_features = true`. This option is particularly useful when
    you have numeric features with different orders of magnitude. In this case, the
    model is using the `speed_mph` field (which goes from 0 to 50) and the `tot_income`
    field, which can reach a value of 150,000.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now that we've trained two different machine learning models based on the K-Means
    clustering algorithm, let's take a look at how we can evaluate them leveraging
    BigQuery ML SQL syntax and the BigQuery **user interface** (**UI**).
  prefs: []
  type: TYPE_NORMAL
- en: Evaluating the K-Means clustering model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we'll learn how to evaluate the performance of our K-Means
    clustering model.
  prefs: []
  type: TYPE_NORMAL
- en: 'The evaluation stage of a K-Means clustering model is different from the supervised
    machine learning models that we''ve performed in the previous chapters. Let''s
    take a look at the steps we need to take to evaluate our machine learning model,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s extract the centroids from the first machine learning model that we
    trained in the previous section, by running the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `ML.CENTROIDS` function returns information about the centroids of the K-Means
    model. It accepts the model name as input in the round brackets, preceded by the
    `MODEL` keyword.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Important note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: A centroid represents the center of a cluster in a K-Means clustering model.
    During the training phase of the machine learning model, the centroids are iteratively
    optimized to minimize the distance between centroids and observations in the training
    dataset. When the training stage ends, the centroids are stabilized. BigQuery
    ML stops iterating when the relative loss improvement is less than the value specified
    for the `MIN_REL_PROGRESS` parameter.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The execution of the query returns three centroids, as shown in the following
    screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 7.5 – The result of the query shows the centroids identified by the
    machine learning model'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B16722_07_006.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 7.5 – The result of the query shows the centroids identified by the machine
    learning model
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In this case, each centroid is represented only by the numerical value of the
    `speed_mph` feature that represents the average speed of the taxi driver.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The same information can be achieved leveraging the BigQuery UI. Selecting
    the `clustering_by_speed` model from the BigQuery navigation menu and accessing
    the `1` belongs to the first cluster and represents the taxi drivers with the
    best average speed: the *Top Drivers*. From the BigQuery UI, we can also notice
    that 869 taxi drivers belong to this cluster.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The second centroid includes most of the population, with a `speed_mph` value
    of 14.3222\. This centroid is the center of the *Good Drivers* cluster.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The last centroid is the center of the cluster with the slowest drivers and
    includes 425 observations in the *Neutral Drivers* cluster.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If we choose to analyze the `clustering_by_speed_and_income` model from the
    **Evaluation** tab in the BigQuery UI, we'll see the following information:![Figure
    7.7 – The Evaluation tab of the clustering_by_speed_and_income BigQuery ML model
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B16722_07_008.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 7.7 – The Evaluation tab of the clustering_by_speed_and_income BigQuery
    ML model
  prefs: []
  type: TYPE_NORMAL
- en: 'Looking at the clusters and centroids identified by this second model, we can
    immediately notice that the clusters are based on two different features: `speed_mph`
    and `tot_income`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first cluster, with `1`, includes the best 466 drivers in terms of speed
    and annual income: *Top Drivers*. The second one contains the 417 *Neutral Drivers*
    with the poorest performance. The last centroid includes the majority of the drivers
    and is the *Good Drivers* cluster.'
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: The result of training different iterations of K-Means clustering can generate
    different values, according to the initialization seeds that are used by BigQuery
    ML. It could happen that the positions of the centroids are different from the
    values shown in this section.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we've taken a look at the results created by the training of the K-Means
    clustering models, let's start using them to classify taxi drivers into different
    clusters.
  prefs: []
  type: TYPE_NORMAL
- en: Using the K-Means clustering model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we'll understand how to use our K-Means clustering model on
    new data.
  prefs: []
  type: TYPE_NORMAL
- en: To use our BigQuery ML model, we'll use the `ML.PREDICT` function on the same
    table that we've created to train the machine learning model.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this case, we''ll also include the `taxi_id` column, which identifies each
    taxi driver. The following query will classify each `taxi_id` field to the nearest
    cluster, according to the values of the `speed_mph` and `tot_income` fields:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The query statement is composed of a `SELECT` keyword that extracts all the
    columns returned by the `ML.PREDICT` function, except for the `nearest_centroids_distance`
    field.
  prefs: []
  type: TYPE_NORMAL
- en: 'The execution of the query generates the result shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.8 – The result of the query shows the application of the K-Means
    clustering model'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16722_07_009.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.8 – The result of the query shows the application of the K-Means clustering
    model
  prefs: []
  type: TYPE_NORMAL
- en: Each `taxi_id` field is assigned to a specific centroid and to the corresponding
    cluster. The assignment is visible from the first column, `CENTROID_ID`.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we've applied our model, let's formulate some final considerations
    and provide a list of taxi drivers that can be rewarded because they're in the
    *Top Drivers* cluster.
  prefs: []
  type: TYPE_NORMAL
- en: Drawing business conclusions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we'll formulate some final considerations using the results
    that we got from the application of our machine learning model.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the query executed in the *Using the K-Means clustering model* section,
    we can create a table that contains the *Top Drivers* identified by the `clustering_by_speed_and_income`
    K-Means machine learning model, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The execution of the query generates a `top_taxi_drivers_by_speed_and_income`
    table that contains all the drivers classified in the cluster with `CENTROID_ID=1`
    and corresponding to the *Top Drivers* cluster. Keep in mind that the K-Means
    clustering algorithm doesn't always return the same segmentations. For this reason,
    the clause `CENTROID_ID=1` can vary according to the results generated by each
    training stage.
  prefs: []
  type: TYPE_NORMAL
- en: This result set includes the identifiers of the taxi drivers that should be
    rewarded for their performances.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we've built our unsupervised machine learning model. After
    a brief introduction of the business scenario, we've discovered what unsupervised
    machine learning is and used the K-Means clustering algorithm to group similar
    observations within the same clusters.
  prefs: []
  type: TYPE_NORMAL
- en: Before diving into the development of the machine learning models, we applied
    some data quality checks to our dataset and selected the fields to use as features
    of our machine learning models.
  prefs: []
  type: TYPE_NORMAL
- en: During the training stage, we trained two different machine learning models
    to learn how to create a K-Means clustering model.
  prefs: []
  type: TYPE_NORMAL
- en: Then, we evaluated the two models, leveraging BigQuery ML SQL syntax and the
    functionalities available in the BigQuery UI.
  prefs: []
  type: TYPE_NORMAL
- en: In the last step, we tested our machine learning model to cluster the taxi drivers
    available in the dataset according to their features and into the clusters generated
    by the K-Means model.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we've also created a list of drivers belonging to the *Top Drivers*
    cluster that can be rewarded because they can be considered top performers against
    the average of the other drivers.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll introduce forecasting, using time series data.
  prefs: []
  type: TYPE_NORMAL
- en: Further resources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Chicago Taxi Trips public dataset**: [https://console.cloud.google.com/marketplace/details/city-of-chicago-public-data/chicago-taxi-trips](https://console.cloud.google.com/marketplace/details/city-of-chicago-public-data/chicago-taxi-trips)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Chicago Open Data**: [https://data.cityofchicago.org/](https://data.cityofchicago.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CREATE MODEL` **statement**: [https://cloud.google.com/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-create](https://cloud.google.com/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-create)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ML.EVALUATE` **function**: [https://cloud.google.com/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-evaluate](https://cloud.google.com/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-evaluate)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ML.PREDICT` **function**: [https://cloud.google.com/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-predict](https://cloud.google.com/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-predict)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**BigQuery ML K-Means clustering example**: [https://cloud.google.com/bigquery-ml/docs/kmeans-tutorial](https://cloud.google.com/bigquery-ml/docs/kmeans-tutorial)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
