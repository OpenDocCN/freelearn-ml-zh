["```py\nfrom sklearn.model_selection import train_test_split\n```", "```py\ndf_train, df_unseen = train_test_split(df, test_size=0.2, random_state=0)\n```", "```py\ndf_val, df_test = train_test_split(df_unseen, test_size=0.5, random_state=0)\n```", "```py\ndf_train, df_unseen = train_test_split(df, test_size=0.2, random_state=0, stratify=df['class'])\n```", "```py\ndf_val, df_test = train_test_split(df_unseen, test_size=0.5, random_state=0, stratify=df_unseen['class'])\n```", "```py\nFrom sklearn.model_selection import train_test_split, Kfold\n```", "```py\ndf_cv, df_test = train_test_split(df, test_size=0.2, random_state=0)\n```", "```py\nkf = Kfold(n_splits=4)\n```", "```py\nfor train_index, val_index in kf.split(df_cv):\n```", "```py\ndf_train, df_val = df_cv.iloc[train_index], df_cv.iloc[val_index]\n```", "```py\n#perform training or hyperparameter tuning here\n```", "```py\nFrom sklearn.model_selection import train_test_split, StratifiedKFold\n```", "```py\ndf_cv, df_test = train_test_split(df, test_size=0.2, random_state=0, stratify=df['class'])\n```", "```py\nskf = StratifiedKFold(n_splits=4)\n```", "```py\nfor train_index, val_index in skf.split(df_cv, df_cv['class']):\n```", "```py\ndf_train, df_val = df_cv.iloc[train_index], df_cv.iloc[val_index]\n```", "```py\n#perform training or hyperparameter tuning here\n```", "```py\nfrom sklearn.model_selection import train_test_split, RepeatedKFold\n```", "```py\ndf_cv, df_test = train_test_split(df, test_size=0.2, random_state=0)\n```", "```py\nrkf = RepeatedKFold(n_splits=4, n_repeats=3, random_state=0)\n```", "```py\nfor train_index, val_index in rkf.split(df_cv):\n```", "```py\ndf_train, df_val = df_cv.iloc[train_index], df_cv.iloc[val_index]\n```", "```py\n#perform training or hyperparameter tuning here\n```", "```py\nfrom sklearn.model_selection import train_test_split, RepeatedStratifiedKFold\n```", "```py\ndf_cv, df_test = train_test_split(df, test_size=0.2, random_state=0, stratify=df['class'])\n```", "```py\nrskf = RepeatedStratifiedKFold(n_splits=4, n_repeats=3, random_state=0)\n```", "```py\nfor train_index, val_index in rskf.split(df_cv, df_cv['class']):\n```", "```py\ndf_train, df_val = df_cv.iloc[train_index], df_cv.iloc[val_index]\n```", "```py\n#perform training or hyperparameter tuning here\n```", "```py\nfrom sklearn.model_selection import train_test_split, LeaveOneOut\n```", "```py\ndf_cv, df_test = train_test_split(df, test_size=0.2, random_state=0)\n```", "```py\nloo = LeaveOneOut()\n```", "```py\nfor train_index, val_index in loo.split(df_cv):\n```", "```py\ndf_train, df_val = df_cv.iloc[train_index], df_cv.iloc[val_index]\n```", "```py\n#perform training or hyperparameter tuning here\n```", "```py\nfrom sklearn.model_selection import train_test_split, LeavePOut\n```", "```py\ndf_cv, df_test = train_test_split(df, test_size=0.2, random_state=0)\n```", "```py\nlpo = LeavePOut(p=2)\n```", "```py\nfor train_index, val_index in lpo.split(df_cv):\n```", "```py\ndf_train, df_val = df_cv.iloc[train_index], df_cv.iloc[val_index]\n```", "```py\n#perform training or hyperparameter tuning here\n```", "```py\nfrom sklearn.model_selection import train_test_split, TimeSeriesSplit\n```", "```py\ndf_cv, df_test = train_test_split(df, test_size=0.2, random_state=0, shuffle=False)\n```", "```py\ntscv = TimeSeriesSplit(n_splits=5)\n```", "```py\nfor train_index, val_index in tscv.split(df_cv):\n```", "```py\ndf_train, df_val = df_cv.iloc[train_index], df_cv.iloc[val_index]\n```", "```py\n#perform training or hyperparameter tuning here\n```"]