["```py\n# importing all the libraries\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import learning_curve\nimport matplotlib.pyplot as plt\n\n#reading the data\ndata= pd.read_excel(\"Powerplant.xlsx\")\n\n#Investigating the data\nprint(data.info())\ndata.head()\n```", "```py\n# As discussed here we are trying to vary the size of training set\ntrain_size = [1, 100, 500, 2000, 5000]\nfeatures = ['AT', 'V', 'AP', 'RH']\ntarget = 'PE'\n# estimating the training score & validation score\ntrain_sizes, train_scores, validation_scores = learning_curve(estimator = LinearRegression(), X = data[features],y = data[target], train_sizes = train_size, cv = 5,scoring ='neg_mean_squared_error')\n```", "```py\n# Generating the Learning_Curve\ntrain_scores_mean = -train_scores.mean(axis = 1) \nvalidation_scores_mean = -validation_scores.mean(axis = 1)\nimport matplotlib.pyplot as plt \nplt.style.use('seaborn') \nplt.plot(train_sizes, train_scores_mean, label = 'Train_error') \nplt.plot(train_sizes, validation_scores_mean, label = 'Validation_error') \nplt.ylabel('MSE', fontsize = 16) \nplt.xlabel('Training set size', fontsize = 16) \nplt.title('Learning_Curves', fontsize = 20, y = 1) \nplt.legend() \n\n```", "```py\n# importing libraries\n import numpy as np\n import matplotlib.pyplot as plt\n from scipy.optimize import curve_fit\n\n# writing a function of Line\n def func(x, a, b):\n return a + b * x \n x_d = np.linspace(0, 5, 2) # generating 2 numbers between 0 & 5\n y = func(x_d,1.5, 0.7) \n y_noise = 0.3 * np.random.normal(size=x_d.size)\n y_d = y + y_noise\n plt.plot(x_d, y_d, 'b-', label='data')\n\n popt, pcov = curve_fit(func, x_d, y_d) # fitting the curve\n plt.plot(x_d, func(x_d, *popt), 'r-', label='fit')\n```", "```py\n x_d = np.linspace(0, 5, 3) # generating 3 numbers between 0 & 5\n```", "```py\nfrom sklearn.datasets import load_breast_cancer # importing the dataset\nfrom sklearn.cross_validation import train_test_split,cross_val_score # it will help in splitting train & test\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn import metrics\n\nBC =load_breast_cancer() \nX = BC.data\ny = BC.target\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state=4)\n\nknn = KNeighborsClassifier(n_neighbors=5)\nknn.fit(X_train, y_train)\ny_pred = knn.predict(X_test)\nprint(metrics.accuracy_score(y_test, y_pred))\n\nknn = KNeighborsClassifier(n_neighbors=5)\nscores = cross_val_score(knn, X, y, cv=10, scoring='accuracy')\nprint(scores)\nprint(scores.mean())\n```", "```py\nknn = KNeighborsClassifier(n_neighbors=20)\nprint(cross_val_score(knn, X, y, cv=10, scoring='accuracy').mean())\n```", "```py\n# 10-fold cross-validation with logistic regression\nfrom sklearn.linear_model import LogisticRegression\nlogreg = LogisticRegression()\nprint(cross_val_score(logreg, X, y, cv=10, scoring='accuracy').mean())\n```"]