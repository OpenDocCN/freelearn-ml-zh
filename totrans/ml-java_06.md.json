["```py\n<dependency> \n <groupId>org.apache.mahout</groupId> \n  <artifactId>mahout-mr</artifactId> \n  <version>0.10.0</version> \n</dependency> \n```", "```py\nuserID,itemID[,preference[,timestamp]] \n```", "```py\nDataModel model = new FileDataModel(new File(path)); \n```", "```py\nclass StringItemIdFileDataModel extends FileDataModel { \n\n  //initialize migrator to covert String to unique long \n  public ItemMemIDMigrator memIdMigtr; \n\n  public StringItemIdFileDataModel(File dataFile, String regex) \n     throws IOException { \n    super(dataFile, regex); \n  } \n\n  @Override \n  protected long readItemIDFromString(String value) { \n\n    if (memIdMigtr == null) { \n      memIdMigtr = new ItemMemIDMigrator(); \n    } \n\n    // convert to long \n    long retValue = memIdMigtr.toLongID(value); \n    //store it to cache  \n    if (null == memIdMigtr.toStringID(retValue)) { \n      try { \n        memIdMigtr.singleInit(value); \n      } catch (TasteException e) { \n        e.printStackTrace(); \n      } \n    } \n    return retValue; \n  } \n\n  // convert long back to String \n  String getItemIDAsString(long itemId) { \n    return memIdMigtr.toStringID(itemId); \n  } \n} \n```", "```py\nclass ItemMemIDMigrator extends AbstractIDMigrator { \n\n  private FastByIDMap<String> longToString; \n\n  public ItemMemIDMigrator() { \n    this.longToString = new FastByIDMap<String>(10000); \n  } \n\n  public void storeMapping(long longID, String stringID) { \n    longToString.put(longID, stringID); \n  } \n\n  public void singleInit(String stringID) throws TasteException { \n    storeMapping(toLongID(stringID), stringID); \n  } \n\n  public String toStringID(long longID) { \n    return longToString.get(longID); \n  } \n} \n```", "```py\nStringItemIdFileDataModel model = new StringItemIdFileDataModel( \n  new File(\"datasets/chap6/BX-Book-Ratings.csv\"), \";\"); \nSystem.out.println( \n\"Total items: \" + model.getNumItems() +  \n\"\\nTotal users: \" +model.getNumUsers()); \n```", "```py\n    Total items: 340556\n    Total users: 105283\n\n```", "```py\n<dependency> \n  <groupId>org.apache.mahout</groupId> \n  <artifactId>mahout-integration</artifactId> \n  <version>0.7</version> \n</dependency> \n```", "```py\n<dependency> \n  <groupId>mysql</groupId> \n  <artifactId>mysql-connector-java</artifactId> \n  <version>5.1.35</version> \n</dependency> \n```", "```py\nMysqlDataSource dbsource = new MysqlDataSource(); \n  dbsource.setUser(\"user\"); \n  dbsource.setPassword(\"pass\"); \n  dbsource.setServerName(\"hostname.com\"); \n  dbsource.setDatabaseName(\"db\"); \n```", "```py\nCREATE TABLE taste_preferences ( \n  user_id BIGINT NOT NULL, \n  item_id BIGINT NOT NULL, \n  preference REAL NOT NULL, \n  PRIMARY KEY (user_id, item_id) \n) \nCREATE INDEX taste_preferences_user_id_index ON taste_preferences \n   (user_id); \nCREATE INDEX taste_preferences_item_id_index ON taste_preferences \n   (item_id); \n```", "```py\nDataModel dataModel = new MySQLJDBCDataModel(dbsource, \n   \"taste_preferences\",  \n  \"user_id\", \"item_id\", \"preference\", \"timestamp\"); \n```", "```py\nFastByIDMap <PreferenceArray> preferences = new FastByIDMap \n   <PreferenceArray> ();  \n```", "```py\nPreferenceArray prefsForUser1 =  \n  new GenericUserPreferenceArray (10);   \n```", "```py\nprefsForUser1.setUserID (0, 1L);  \n```", "```py\nprefsForUser1.setItemID (0, 101L);  \n```", "```py\nprefsForUser1.setValue (0, 3.0f);   \n```", "```py\nprefsForUser1.setItemID (1, 102L);  \nprefsForUser1.setValue (1, 4.5F);  \n```", "```py\npreferences.put (1L, prefsForUser1); // use userID as the key  \n```", "```py\nDataModel dataModel = new GenericDataModel(preferences); \n```", "```py\nStringItemIdFileDataModel model = new StringItemIdFileDataModel( \n    new File(\"/datasets/chap6/BX-Book-Ratings.csv\", \";\"); \n```", "```py\nUserSimilarity similarity =  \n  new PearsonCorrelationSimilarity(model); \n```", "```py\nUserNeighborhood neighborhood =  \n  new ThresholdUserNeighborhood(0.1, similarity, model); \n```", "```py\nUserBasedRecommender recommender =  \nnew GenericUserBasedRecommender(model, neighborhood, similarity); \n```", "```py\nlong userID = 80683; \nint noItems = 10; \n\nList<RecommendedItem> recommendations = recommender.recommend( \n  userID, noItems); \n\nSystem.out.println(\"Rated items by user:\"); \nfor(Preference preference : model.getPreferencesFromUser(userID)) { \n  // convert long itemID back to ISBN \n  String itemISBN = model.getItemIDAsString( \n  preference.getItemID()); \n  System.out.println(\"Item: \" + books.get(itemISBN) +  \n    \" | Item id: \" + itemISBN +  \n    \" | Value: \" + preference.getValue()); \n} \n\nSystem.out.println(\"\\nRecommended items:\"); \nfor (RecommendedItem item : recommendations) { \n  String itemISBN = model.getItemIDAsString(item.getItemID()); \n  System.out.println(\"Item: \" + books.get(itemISBN) +  \n    \" | Item id: \" + itemISBN +  \n    \" | Value: \" + item.getValue()); \n} \n```", "```py\n    Rated items:\n    Item: The Handmaid's Tale | Item id: 0395404258 | Value: 0.0\n    Item: Get Clark Smart : The Ultimate Guide for the Savvy Consumer | Item id: 1563526298 | Value: 9.0\n    Item: Plum Island | Item id: 0446605409 | Value: 0.0\n    Item: Blessings | Item id: 0440206529 | Value: 0.0\n    Item: Edgar Cayce on the Akashic Records: The Book of Life | Item id: 0876044011 | Value: 0.0\n    Item: Winter Moon | Item id: 0345386108 | Value: 6.0\n    Item: Sarah Bishop | Item id: 059032120X | Value: 0.0\n    Item: Case of Lucy Bending | Item id: 0425060772 | Value: 0.0\n    Item: A Desert of Pure Feeling (Vintage Contemporaries) | Item id: 0679752714 | Value: 0.0\n    Item: White Abacus | Item id: 0380796155 | Value: 5.0\n    Item: The Land of Laughs : A Novel | Item id: 0312873115 | Value: 0.0\n    Item: Nobody's Son | Item id: 0152022597 | Value: 0.0\n    Item: Mirror Image | Item id: 0446353957 | Value: 0.0\n    Item: All I Really Need to Know | Item id: 080410526X | Value: 0.0\n    Item: Dreamcatcher | Item id: 0743211383 | Value: 7.0\n    Item: Perplexing Lateral Thinking Puzzles: Scholastic Edition | Item id: 0806917695 | Value: 5.0\n    Item: Obsidian Butterfly | Item id: 0441007813 | Value: 0.0\n\n    Recommended items:\n    Item: Keeper of the Heart | Item id: 0380774933 | Value: 10.0\n    Item: Bleachers | Item id: 0385511612 | Value: 10.0\n    Item: Salem's Lot | Item id: 0451125452 | Value: 10.0\n    Item: The Girl Who Loved Tom Gordon | Item id: 0671042858 | Value: 10.0\n    Item: Mind Prey | Item id: 0425152898 | Value: 10.0\n    Item: It Came From The Far Side | Item id: 0836220730 | Value: 10.0\n    Item: Faith of the Fallen (Sword of Truth, Book 6) | Item id: 081257639X | Value: 10.0\n    Item: The Talisman | Item id: 0345444884 | Value: 9.86375\n    Item: Hamlet | Item id: 067172262X | Value: 9.708363\n    Item: Untamed | Item id: 0380769530 | Value: 9.708363\n\n```", "```py\nStringItemIdFileDataModel model = new StringItemIdFileDataModel( \n  new File(\"datasets/chap6/BX-Book-Ratings.csv\"), \";\"); \n\nItemSimilarity itemSimilarity = new \n   PearsonCorrelationSimilarity(model); \n\nItemBasedRecommender recommender = new \n   GenericItemBasedRecommender(model, itemSimilarity); \n\nString itemISBN = \"0395272238\"; \nlong itemID = model.readItemIDFromString(itemISBN); \nint noItems = 10; \nList<RecommendedItem> recommendations = \n   recommender.mostSimilarItems(itemID, noItems); \n\nSystem.out.println(\"Recommendations for item: \n   \"+books.get(itemISBN)); \n\nSystem.out.println(\"\\nMost similar items:\"); \nfor (RecommendedItem item : recommendations) { \n  itemISBN = model.getItemIDAsString(item.getItemID()); \n  System.out.println(\"Item: \" + books.get(itemISBN) + \" | Item id: \n     \" + itemISBN + \" | Value: \" + item.getValue()); \n} \nRecommendations for item: Close to the BoneMost similar items:Item: Private Screening | Item id: 0345311396 | Value: 1.0Item: Heartstone | Item id: 0553569783 | Value: 1.0Item: Clockers / Movie Tie In | Item id: 0380720817 | Value: 1.0Item: Rules of Prey | Item id: 0425121631 | Value: 1.0Item: The Next President | Item id: 0553576666 | Value: 1.0Item: Orchid Beach (Holly Barker Novels (Paperback)) | Item id: 0061013412 | Value: 1.0Item: Winter Prey | Item id: 0425141233 | Value: 1.0Item: Night Prey | Item id: 0425146413 | Value: 1.0Item: Presumed Innocent | Item id: 0446359866 | Value: 1.0Item: Dirty Work (Stone Barrington Novels (Paperback)) | Item id: \n   0451210158 | Value: 1.0\n```", "```py\nclass MyRescorer implements IDRescorer { \n\n  public double rescore(long itemId, double originalScore) { \n    double newScore = originalScore; \n    if(bookIsNew(itemId)){ \n      originalScore *= 1.3; \n    } \n    return newScore; \n  } \n\n  public boolean isFiltered(long arg0) { \n    return false; \n  } \n\n} \n```", "```py\nIDRescorer rescorer = new MyRescorer(); \nList<RecommendedItem> recommendations =  \nrecommender.recommend(userID, noItems, rescorer); \n```", "```py\npublic class BookRecommender implements RecommenderBuilder  { \n  public Recommender buildRecommender(DataModel dataModel) { \n    UserSimilarity similarity =  \n      new PearsonCorrelationSimilarity(model); \n    UserNeighborhood neighborhood =  \n      new ThresholdUserNeighborhood(0.1, similarity, model); \n    UserBasedRecommender recommender =  \n      new GenericUserBasedRecommender( \n        model, neighborhood, similarity); \n    return recommender; \n  } \n} \n```", "```py\nDataModel dataModel = new FileDataModel( \n  new File(\"/path/to/dataset.csv\")); \n```", "```py\nRecommenderEvaluator evaluator =  \n  new AverageAbsoluteDifferenceRecommenderEvaluator(); \n```", "```py\nRecommenderBuilder builder = new MyRecommenderBuilder(); \n```", "```py\ndouble result = evaluator.evaluate(builder, null, model, 0.9, \n   1.0); \nSystem.out.println(result); \n```", "```py\nclass OnlineRecommendation{ \n\n  Recommender recommender; \n  int concurrentUsers = 100; \n  int noItems = 10; \n\n  public OnlineRecommendation() throws IOException { \n\n    DataModel model = new StringItemIdFileDataModel( \n      new File /chap6/BX-Book-Ratings.csv\"), \";\"); \n    PlusAnonymousConcurrentUserDataModel plusModel = new \n       PlusAnonymousConcurrentUserDataModel\n         (model, concurrentUsers); \n    recommender = ...; \n\n  } \n\n  public List<RecommendedItem> recommend(long userId, \n     PreferenceArray preferences){ \n\n    if(userExistsInDataModel(userId)){ \n      return recommender.recommend(userId, noItems); \n    } \n\n    else{ \n\n      PlusAnonymousConcurrentUserDataModel plusModel = \n        (PlusAnonymousConcurrentUserDataModel) \n           recommender.getDataModel(); \n\n      // Take an available anonymous user form the poll \n      Long anonymousUserID = plusModel.takeAvailableUser(); \n\n      // Set temporary preferences \n      PreferenceArray tempPrefs = preferences; \n      tempPrefs.setUserID(0, anonymousUserID); \n      tempPrefs.setItemID(0, itemID); \n       plusModel.setTempPrefs(tempPrefs, anonymousUserID); \n\n      List<RecommendedItem> results = \n         recommender.recommend(anonymousUserID, noItems); \n\n      // Release the user back to the poll \n      plusModel.releaseUser(anonymousUserID); \n\n      return results; \n\n    } \n\n  } \n} \n```", "```py\nclass MyItemSimilarity implements ItemSimilarity { \n ... \n public double itemSimilarity(long itemID1, long itemID2) { \n  MyBook book1 = lookupMyBook (itemID1); \n  MyBook book2 = lookupMyBook (itemID2); \n  double similarity = 0.0; \n  if (book1.getGenre().equals(book2.getGenre())  \n   similarity += 0.15; \n  } \n  if (book1.getAuthor().equals(book2\\. getAuthor ())) { \n   similarity += 0.50; \n  } \n  return similarity; \n } \n ... \n} \n```"]