["```py\nimport random\nX = [\n     1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, \n     6, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9, 10, 10, 10\n]\ny = [\n     x + random.random() for x in X[:15]] + \n    [x * 2 + random.random() for x in X[15:]\n]\n```", "```py\nimport matplotlib.pyplot as plt\nplt.scatter(X, y)\n```", "```py\nX_dict = [{'X': x} for x in X]\nfor X_i, y_i in zip(X_dict, y):\n  print(X_i, y_i)\n```", "```py\n!pip install river\nfrom river.neighbors import KNNRegressor\nmy_knn = KNNRegressor(window_size=3)\nX_dict = [{'X': x} for x in X]\nfor X_i, y_i in zip(X_dict, y):\n  my_knn.learn_one(X_i, y_i)\n```", "```py\npreds = []\nfor X_i in X_dict:\n  preds.append(my_knn.predict_one(X_i))\nsum_absolute_error = 0\nfor pred, real in zip(preds, y):\n  sum_absolute_error += abs(pred - real)\nmean_absolute_error = sum_absolute_error / len(preds)\nprint(mean_absolute_error)\n```", "```py\nmy_knn = KNNRegressor(window_size=3)\nX_dict = [{'X': x} for x in X]\nstep_by_step_error = []\nfor i in range(len(X_dict)):\n  my_knn.learn_one(X_dict[i], y[i])\n  abs_error = abs(my_knn.predict_one(X_dict[i]) - y[i])\n  step_by_step_error.append(abs_error)\n```", "```py\nplt.plot(step_by_step_error)\n```", "```py\npreds = []\nfor X_i in X_dict:\n  preds.append(my_knn.predict_one(X_i))\nall_errors = []\nfor pred, real in zip(preds, y):\n  all_errors.append(abs(pred - real))\nplt.plot(step_by_step_error)\nplt.plot(all_errors)\nplt.show()\n```", "```py\nmy_knn = KNNRegressor(window_size=3)\nX_dict = [{'X': x} for x in X]\nstep_by_step_error = []\nfor i in range(len(X_dict)):\n  my_knn.learn_one(X_dict[i], y[i])\n  abs_error = abs(my_knn.predict_one(X_dict[i]) - y[i])\n  step_by_step_error.append(abs_error)\n  all_errors_recomputed = []\n  for j in range(i):\n    orig_error = step_by_step_error[j]\n    after_error = abs(my_knn.predict_one(X_dict[j]) - y[j])\n    if after_error > orig_error:\n      print(f'At learning step {i}, data point {j} was partly forgotten')\n```", "```py\nimport pandas as pd\nice_cream_sales = [10, 9, 8, 7, 6, 5, 4, 3, 2 , 1]\ndegrees_celsius = [30, 25, 20, 19, 18, 17, 15, 13, 10, 5]\nprice  = [2,2, 3, 3, 4, 4, 5, 5, 6, 6]\ndata = pd.DataFrame({\n    'ice_cream_sales': ice_cream_sales,\n    'degrees_celsius': degrees_celsius,\n    'price': price\n})\ndata\n```", "```py\nplt.scatter(data['degrees_celsius'], data['ice_cream_sales'])\n```", "```py\nplt.scatter(data['price'], data['ice_cream_sales'])\n```", "```py\nfrom sklearn.linear_model import LinearRegression\nmy_lr = LinearRegression()\nmy_lr.fit(X = data[['degrees_celsius', 'price']], y = data['ice_cream_sales'])\n```", "```py\nfrom sklearn.metrics import r2_score\nr2_score(data['ice_cream_sales'], my_lr.predict(data[['degrees_celsius', 'price']]))\n```", "```py\npd.DataFrame({'variable': ['degrees_celsius', 'price'], 'coefficient': my_lr.coef_})\n```", "```py\nfrom sklearn.tree import DecisionTreeRegressor\nmy_dt = DecisionTreeRegressor()\nmy_dt.fit(X = data[['degrees_celsius', 'price']], y = data['ice_cream_sales'])\n```", "```py\nr2_score(data['ice_cream_sales'], my_dt.predict(data[['degrees_celsius', 'price']]))\n```", "```py\nimport sklearn\nplt.figure(figsize=(15,15))\nsklearn.tree.plot_tree(my_dt)\nplt.show()\n```", "```py\npd.DataFrame({'variable': ['degrees_celsius', 'price'], 'importance': my_dt.feature_importances_})\n```"]