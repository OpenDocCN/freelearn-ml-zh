["```py\n# read the file with data using openpyxl\nimport pandas as pd\n# we read the data from the excel file,\n# which is the defect data from the ant 1.3 system\ndfDataAnt13 = pd.read_excel('./chapter_6_dataset_numerical.xlsx',\n                            sheet_name='ant_1_3',\n                            index_col=0)\n```", "```py\n# now, let's visualize the data using correlograms\n# for that, we use the seaborn library\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n# in seaborn, the correlogram is called\n# pairplot\nsns.pairplot(dfDataAnt13)\n```", "```py\n# heatmap\np1 = sns.heatmap(dfDataAnt13, cmap=\"Reds\")\n```", "```py\n# now, let's make some density plots\n# set seaborn style\nsns.set_style(\"white\")\n# Basic 2D density plot\nsns.kdeplot(x=dfDataAnt13.CBO, y=dfDataAnt13.DCC)\nplt.show()\n```", "```py\n# Custom the color, add shade and bandwidth\nsns.kdeplot(x=dfDataAnt13.WMC,\n            y=dfDataAnt13.ImportCoupling,\n            cmap=\"Reds\",\n            shade=True,\n            bw_adjust=.5)\nplt.show()\n```", "```py\n# now a bubble diagram\n# use the scatterplot function to build the bubble map\nsns.scatterplot(data=dfDataAnt13,\n                x=\"NOM\",\n                y=\"DCC\",\n                size=\"Defect\",\n                legend=False,\n                sizes=(20, 2000))\n# show the graph\nplt.show()\n```", "```py\n# boxplot\nsns.boxplot( x=dfDataAnt13.Defect, y=dfDataAnt13.CBO )\n```", "```py\n# before we use PCA, we need to remove the variable \"defect\"\n# as this is the variable which we predict\ndfAnt13NoDefects = dfDataAnt13.drop(['Defect'], axis=1)\n# PCA for the data at hand\nfrom sklearn.decomposition import PCA\n# we instantiate the PCA class with two parameters\n# the first one is the number of principal components\n# and the second is the random state\npcaComp = PCA(n_components=2,\n              random_state=42)\n# then we find the best fit for the principal components\n# and fit them to the data\nvis_dims = pcaComp.fit_transform(dfAnt13NoDefects)\n```", "```py\n# and of course, we could visualize it\nimport matplotlib.pyplot as plt\nimport matplotlib\nimport numpy as np\ncolors = [\"red\", \"darkgreen\"]\nx = [x for x,y in vis_dims]\ny = [y for x,y in vis_dims]\n# please note that we use the dataset with defects to\n# assign colors to the data points in the diagram\ncolor_indices = dfDataAnt13.Defect\ncolormap = matplotlib.colors.ListedColormap(colors)\nplt.scatter(x, y, c=color_indices, cmap=colormap, alpha=0.3)\nfor score in [0,1]:\n    color = colors[score]\nplt.rcParams['figure.figsize'] = (20,20)\n```", "```py\n# importing the images library\nfrom datasets import load_dataset, Image\n# loading a dataset \"food101\", or more concretely it's split for training\ndataset = load_dataset(\"food101\", split=\"train\")\n```", "```py\n# visualizing the first image\ndataset[0][\"image\"]\n```", "```py\nDataset({ features: ['image', 'label'], num_rows: 75750 })\n```", "```py\n# we can also plot the histogram\n# to check the distribution of labels in the dataset\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nplt.rcParams['figure.figsize'] = (20,10)\nsns.histplot(data=dataset['label'], x=dataset['label'])\n```", "```py\n# import Hugging Face Dataset\nfrom datasets import load_dataset\n# load the dataset with text classification labels\ndataset = load_dataset('imdb')\n```", "```py\n# show the first example\ndataset['train'][0]\n```", "```py\n# plot the distribution of the labels\nsns.histplot(dataset['train']['label'], bins=2)\n```", "```py\n# now, let us import the code to the text summarization dataset\ndsCode = load_dataset('code_x_glue_ct_code_to_text', 'java', split='test')\n# and see the first example of the code\ndsCode[0]\n```", "```py\nimport pandas as pd\nimport matplotlib.pyplot as plt\n# create a list of tokens\nlstCodeLines = dsCode['code_tokens']\n# flatten the list of lists to one list\nlstCodeLines = [item for sublist in lstCodeLines for item in sublist]\n#print the first elements of the list\nprint(lstCodeLines[:10])\ndfCode = pd.DataFrame(lstCodeLines, columns=['token'])\n# group the tokens and count the number of occurences\n# which will help us to visualize the frequency of tokens in the next step\ndfCodeCounts = dfCode.groupby('token').size().reset_index(name='counts')\n# sort the counts by descending order\ndfCodeCounts = dfCodeCounts.sort_values(by='counts', ascending=False)\nfig, ax = plt.subplots(figsize=(12, 6))\n# plot the frequency of tokens as a barplot\n# for the simplicity, we only take the first 20 tokens\nsns.barplot(x='token',\n            y='counts',\n            data=dfCodeCounts[:20],\n            palette=sns.color_palette(\"BuGn_r\", n_colors=20),\n            ax=ax)\n# rotate the x-axis labels to make sure that\n# we see the full token names, i.e. lines of code\nax.set_xticklabels(ax.get_xticklabels(),\n                   rotation=45,\n                   horizontalalignment='right')\n```"]