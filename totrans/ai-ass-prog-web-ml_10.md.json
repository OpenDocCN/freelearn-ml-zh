["```py\ndef process_cart():\n    # get cart from database\n    cart = get_cart()\n    card = cart.get_card()\n    process_payment(card, cart)\n    ship_order(cart) \n```", "```py\ndef process_payment(card, cart): \n    if card.is_valid():\n        if card.has_funds(cart.total):\n            charge_card(card, cart.total)\n            return 0\n        else:\n            return 1 \n```", "```py\n```", "```py \n```", "```py\n```", "```py \n```", "```py\ndef get_payment_status(cart):\n    card = cart.get_card()\n    return process_payment(card, cart)\ndef process_cart():\n    # get cart from database\n    cart = get_cart()\n    payment_status = get_payment_status(cart)\n    # Only ship the order if the payment was successful\n    if payment_status != 1:\n        ship_order(cart) \n```", "```py\n```", "```py \n```", "```py\nimport re\ndef validate_card(card):\n    # Visa cards start with 4 and have 13 or 16 digits.\n    # MasterCard cards start with 51 through 55 and have 16 digits.\n    # American Express cards start with 34 or 37 and have 15 digits.\n    visa_pattern = r'^4[0-9]{12}(?:[0-9]{3})?$'\n    mastercard_pattern = r'^5[1-5][0-9]{14}$'\n    amex_pattern = r'^3[47][0-9]{13}$'\n    if re.match(visa_pattern, card):\n        return 'Visa'\n    elif re.match(mastercard_pattern, card):\n        return 'MasterCard'\n    elif re.match(amex_pattern, card):\n        return 'American Express'\n    else:\n        return None \n```", "```py\n```", "```py \n```", "```py\nimport time\ndef profile(func):\n    def wrapper(*args, **kwargs):\n        start = time.time()\n        result = func(*args, **kwargs)\n        end = time.time()\n        print(f'{func.__name__} took {end - start} seconds')\n        return result\n    return wrapper\n@profile\ndef sleep_two_seconds():\n    time.sleep(2)\nsleep_two_seconds() \n```", "```py\nsleep_two_seconds took 2.000000238418579 seconds \n```", "```py\ndef process_records(records):\n    for i in range(len(records)):\n        for j in range(len(records)):\n            if i != j and records[i] == records[j]:\n                print(f'Duplicate record found: {records[i]}') \n```", "```py\ndef process_records(records):\n    record_set = set()\n    for record in records:\n        if record in record_set:\n            print(f'Duplicate record found: {record}')\n        else:\n            record_set.add(record) \n```", "```py\n# old code\n@profile\ndef process_records(records):\n    for i in range(len(records)):\n        for j in range(len(records)):\n            if i != j and records[i] == records[j]:\n                print(f'Duplicate record found: {records[i]}')\nrecords_10000 = [i for i in range(10000)]\nprocess_records(records_10000) \n```", "```py\nprocess_records took 5.193912506103516 seconds \n```", "```py\n# new code\n@profile\ndef process_records(records):\n    record_set = set()\n    for record in records:\n        if record in record_set:\n            print(f'Duplicate record found: {record}')\n        else:\n            record_set.add(record)\nrecords_10000 = [i for i in range(10000)]\nprocess_records(records_10000) \n```", "```py\nprocess_records took 0.0011200904846191406 seconds \n```", "```py\ndef calculate_total(cart, discounts):\n    # Define discount functions\n    def three_for_two(items):\n        total = 0\n        for item in items:\n            total += item.price * (item.quantity - item.quantity // 3)\n        return total\n    def christmas_discount(items):\n        total = 0\n        for item in items:\n            total += item.price * item.quantity * 0.5\n        return total\n    def cheapest_free(items):\n        items_sorted = sorted(items, key=lambda x: x.price)\n        total = 0\n        for item in items_sorted[1:]:\n            total += item.price * item.quantity\n        return total\n    # Calculate totals for each discount\n    totals = []\n    for discount in discounts:\n        if discount == '3 for 2':\n            totals.append((discount, three_for_two(cart)))\n        elif discount == 'Christmas Discount':\n            totals.append((discount, christmas_discount(cart)))\n        elif discount == 'Cheapest Free':\n            totals.append((discount, cheapest_free(cart)))\n    # Sort totals and return the lowest one\n    totals_sorted = sorted(totals, key=lambda x: x[1])\n    return totals_sorted[0][1] if totals_sorted else sum(item.price * item.quantity for item in cart)\n# Define discounts\ndiscounts = ['3 for 2', 'Christmas Discount', 'Cheapest Free']\n# Define cart\ncart = [\n    {'name': 'item1', 'price': 10, 'quantity': 3},\n    {'name': 'item2', 'price': 20, 'quantity': 1},\n    {'name': 'item3', 'price': 30, 'quantity': 1}\n]\n# Calculate total\ntotal = calculate_total(cart, discounts)\nprint(f'Total: {total}') \n```", "```py\nimport unittest\nclass TestCalculateTotal(unittest.TestCase):\n    def test_no_discounts(self):\n        cart = [\n            {'name': 'item1', 'price': 10, 'quantity': 3},\n            {'name': 'item2', 'price': 20, 'quantity': 1},\n            {'name': 'item3', 'price': 30, 'quantity': 1}\n        ]\n        discounts = []\n        total = calculate_total(cart, discounts)\n        self.assertEqual(total, 80)\n    def test_three_for_two_discount(self):\n        cart = [\n            {'name': 'item1', 'price': 10, 'quantity': 3},\n            {'name': 'item2', 'price': 20, 'quantity': 1},\n            {'name': 'item3', 'price': 30, 'quantity': 1}\n        ]\n        discounts = ['3 for 2']\n        total = calculate_total(cart, discounts)\n        self.assertEqual(total, 70)\n    def test_christmas_discount(self):\n        cart = [\n            {'name': 'item1', 'price': 10, 'quantity': 3},\n            {'name': 'item2', 'price': 20, 'quantity': 1},\n            {'name': 'item3', 'price': 30, 'quantity': 1}\n        ]\n        discounts = ['Christmas Discount']\n        total = calculate_total(cart, discounts)\n        self.assertEqual(total, 40)\n    def test_cheapest_free_discount(self):\n        cart = [\n            {'name': 'item1', 'price': 10, 'quantity': 3},\n            {'name': 'item2', 'price': 20, 'quantity': 1},\n            {'name': 'item3', 'price': 30, 'quantity': 1}\n        ]\n        discounts = ['Cheapest Free']\n        total = calculate_total(cart, discounts)\n        self.assertEqual(total, 70)\n    def test_multiple_discounts(self):\n        cart = [\n            {'name': 'item1', 'price': 10, 'quantity': 3},\n            {'name': 'item2', 'price': 20, 'quantity': 1},\n            {'name': 'item3', 'price': 30, 'quantity': 1}\n        ]\n        discounts = ['3 for 2', 'Christmas Discount', 'Cheapest Free']\n        total = calculate_total(cart, discounts)\n        self.assertEqual(total, 40)\nif __name__ == '__main__':\n    unittest.main() \n```", "```py\nimport unittest\nfrom discount_old import calculate_total, Item\nfrom item import Item\nclass TestCalculateTotal(unittest.TestCase):\n    def test_no_discounts(self):\n        cart = [\n            Item('item1', 10, 3),\n            Item('item2', 20, 1),\n            Item('item3', 30, 1)\n        ]\n        discounts = []\n        total = calculate_total(cart, discounts)\n        self.assertEqual(total, 80)\n    def test_three_for_two_discount(self):\n        cart = [\n            Item('item1', 10, 3),\n            Item('item2', 20, 1),\n            Item('item3', 30, 1)\n        ]\n        discounts = ['3 for 2']\n        total = calculate_total(cart, discounts)\n        self.assertEqual(total, 70)\n    def test_christmas_discount(self):\n        cart = [\n            Item('item1', 10, 3),\n            Item('item2', 20, 1),\n            Item('item3', 30, 1)\n        ]\n        discounts = ['Christmas Discount']\n        total = calculate_total(cart, discounts)\n        self.assertEqual(total, 40)\n    def test_cheapest_free_discount(self):\n        cart = [\n            Item('item1', 10, 3), #30\n            Item('item2', 20, 1), # 20\n            Item('item3', 30, 1) # 30\n        ]\n        discounts = ['Cheapest Free']\n        total = calculate_total(cart, discounts)\n        self.assertEqual(total, 60)\n    def test_multiple_discounts(self):\n        cart = [\n            Item('item1', 10, 3),\n            Item('item2', 20, 1),\n            Item('item3', 30, 1)\n        ]\n        discounts = ['3 for 2', 'Christmas Discount', 'Cheapest Free']\n        total = calculate_total(cart, discounts)\n        self.assertEqual(total, 40)\nif __name__ == '__main__':\n    unittest.main() \n```", "```py\nfrom item import Item\ndef calculate_total(cart, discounts):\n    # Define discount functions\n    def three_for_two(items):\n        total = 0\n        for item in items:\n            total += item.price * (item.quantity - item.quantity // 3)\n        return total\n    def christmas_discount(items):\n        total = 0\n        for item in items:\n            total += item.price * item.quantity * 0.5\n        return total\n    def cheapest_free(items):\n        if not items:\n            return 0\n        items_sorted = sorted(items, key=lambda x: x.price * x.quantity)\n        cheapest_item = items_sorted[0]\n        total = 0\n        for item in items:\n            total += item.price * item.quantity\n        total -= cheapest_item.price * cheapest_item.quantity if cheapest_item.quantity > 0 else 0\n        return total\n    # Calculate totals for each discount\n    totals = []\n    for discount in discounts:\n        if discount == '3 for 2':\n            totals.append((discount, three_for_two(cart)))\n        elif discount == 'Christmas Discount':\n            totals.append((discount, christmas_discount(cart)))\n        elif discount == 'Cheapest Free':\n            totals.append((discount, cheapest_free(cart)))\n    # Sort totals and return the lowest one\n    totals_sorted = sorted(totals, key=lambda x: x[1])\n    return totals_sorted[0][1] if totals_sorted else sum(item.price * item.quantity for item in cart)\n# if run as script,\nif __name__ == '__main__':\n    # Define discounts\n    discounts = ['3 for 2', 'Christmas Discount', 'Cheapest Free']\n    # Define cart\n    cart = [\n        Item('item1', 10, 3),\n        Item('item2', 20, 1),\n        Item('item3', 30, 1)\n    ]\n    # Calculate total\n    total = calculate_total(cart, discounts)\n    print(f'Total: {total}') \n```", "```py\nfrom item import Item\n# Define discount functions\ndef three_for_two(items):\n    total = 0\n    for item in items:\n        total += item.price * (item.quantity - item.quantity // 3)\n    return total\ndef christmas_discount(items):\n    total = 0\n    for item in items:\n        total += item.price * item.quantity * 0.5\n    return total\ndef cheapest_free(items):\n    if not items:\n        return 0\n    items_sorted = sorted(items, key=lambda x: x.price * x.quantity)\n    cheapest_item = items_sorted[0]\n    total = 0\n    for item in items:\n        total += item.price * item.quantity\n    total -= cheapest_item.price * cheapest_item.quantity if cheapest_item.quantity > 0 else 0\n    return total\ndef calculate_total(cart, discounts):\n    # Map discount names to functions\n    discount_functions = {\n        '3 for 2': three_for_two,\n        'Christmas Discount': christmas_discount,\n        'Cheapest Free': cheapest_free\n    }\n    # Calculate totals for each discount\n    totals = []\n    for discount in discounts:\n        if discount in discount_functions:\n            totals.append((discount, discount_functions[discount](cart)))\n    # Sort totals and return the lowest one\n    totals_sorted = sorted(totals, key=lambda x: x[1])\n    return totals_sorted[0][1] if totals_sorted else sum(item.price * item.quantity for item in cart)\n# if run as script,\nif __name__ == '__main__':\n    # Define discounts\n    discounts = ['3 for 2', 'Christmas Discount', 'Cheapest Free']\n    # Define cart\n    cart = [\n        Item('item1', 10, 3),\n        Item('item2', 20, 1),\n        Item('item3', 30, 1)\n    ]\n    # Calculate total\n    total = calculate_total(cart, discounts)\n    print(f'Total: {total}') \n```", "```py\n<!-- a page showing a list of items in a basket, each item should have title, price, quantity, sum and buttons to increase or decrease quantity and the page should have a link to \"checkout\" at the bottom  -->\n<html>\n<head>\n    <title>Basket</title>\n    <link rel=\"stylesheet\" href=\"css/basket.css\">\n\n    <!-- add bootstrap -->\n    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n</head>\n<body>\n    <!-- add 3  basket items with each item having id, name, price, quantity, use card css class -->\n\n<!-- \n    <div class=\"container\">\n        <div id=\"basket\" class=\"basket\">\n        </div>\n    </div> -->\n    <!-- add app.js  -->\n    <!-- add app.js, type javascript -->\n\n    <div id=\"basket\" class=\"basket\">\n        <!-- render basket from Vue app, use Boostrap  -->\n        <div v-for=\"(item, index) in basket\" class=\"basket-item\">\n            <div class=\"basket-item-text\">\n                <h2>{{ item.name }}</h2>\n                <p>Price: {{ item.price }}</p>\n                <p>Quantity: {{ item.quantity }}</p>\n                <p>Sum: {{ item.price * item.quantity }}</p>\n            </div>\n            <div class=\"basket-item-buttons\">\n                <button type=\"submit\" class=\"btn btn-primary btn-block btn-large\" @click=\"increaseQuantity(index)\">+</button>\n                <button type=\"submit\" class=\"btn btn-primary btn-block btn-large\" @click=\"decreaseQuantity(index)\">-</button>\n            </div>\n        </div>\n    </div>\n     <!-- add Vue 3  -->\n     <script src=\"img/vue@next\"></script>\n    <!-- add boostrap code for Vue 3 -->\n    <script>\n        let app = Vue.createApp({\n            data() {\n                return {\n                    basket: [\n                        {\n                            id: 1,\n                            name: 'Product 1',\n                            price: 100,\n                            quantity: 1\n                        },\n                        {\n                            id: 2,\n                            name: 'Product 2',\n                            price: 200,\n                            quantity: 2\n                        },\n                        {\n                            id: 3,\n                            name: 'Product 3',\n                            price: 300,\n                            quantity: 3\n                        },\n                        {\n                            id: 4,\n                            name: 'Product 4',\n                            price: 400,\n                            quantity: 4\n                        }\n                    ]\n                }\n            },\n            methods: {\n                increaseQuantity(index) {\n                    this.basket[index].quantity++;\n                },\n                decreaseQuantity(index) {\n                    if (this.basket[index].quantity > 0) {\n                        this.basket[index].quantity--;\n                    }\n                }\n            },\n            computed: {\n                total() {\n                    let total = 0;\n                    for (let i = 0; i < this.basket.length; i++) {\n                        total += this.basket[i].price * this.basket[i].quantity;\n                    }\n\n     return total;\n                }\n            }\n        });\n        app.mount('#basket');\n    </script>\n    <!-- <script src=\"img/app.js\"></script> -->\n</body> \n```", "```py\n<!-- index.html -->\n<html>\n<head>\n    <title>Basket</title>\n    <link rel=\"stylesheet\" href=\"css/basket.css\">\n    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n</head>\n<body>\n    <div id=\"basket\" class=\"basket\"></div>\n    <script src=\"img/vue@next\"></script>\n    <script src=\"img/app.js\"></script>\n</body>\n</html> \n```", "```py\n// app.js\nlet app = Vue.createApp({\n    data() {\n        return {\n            basket: [\n                { id: 1, name: 'Product 1', price: 100, quantity: 1 },\n                { id: 2, name: 'Product 2', price: 200, quantity: 2 },\n                { id: 3, name: 'Product 3', price: 300, quantity: 3 },\n                { id: 4, name: 'Product 4', price: 400, quantity: 4 }\n            ]\n        }\n    },\n    methods: {\n        increaseQuantity(index) {\n            this.basket[index].quantity++;\n        },\n        decreaseQuantity(index) {\n            if (this.basket[index].quantity > 0) {\n                this.basket[index].quantity--;\n            }\n        }\n    },\n    computed: {\n        total() {\n            return this.basket.reduce((total, item) => total + item.price * item.quantity, 0);\n        }\n    }\n});\napp.mount('#basket'); \n```", "```py\n# app.py\nfrom flask import Flask, jsonify\napp = Flask(__name__)\n@app.route('/api/basket')\ndef get_basket():\n    basket = [\n        { 'id': 1, 'name': 'Product 1', 'price': 100, 'quantity': 1 },\n        { 'id': 2, 'name': 'Product 2', 'price': 200, 'quantity': 2 },\n        { 'id': 3, 'name': 'Product 3', 'price': 300, 'quantity': 3 },\n        { 'id': 4, 'name': 'Product 4', 'price': 400, 'quantity': 4 }\n    ]\n    return jsonify(basket)\nif __name__ == '__main__':\n    app.run(debug=True) \n```", "```py\nlet app = Vue.createApp({\n    data() {\n        return {\n            basket: []\n        }\n    },\n    methods: {\n        increaseQuantity(index) {\n            this.basket[index].quantity++;\n        },\n        decreaseQuantity(index) {\n            if (this.basket[index].quantity > 0) {\n                this.basket[index].quantity--;\n            }\n        }\n    },\n    computed: {\n        total() {\n            return this.basket.reduce((total, item) => total + item.price * item.quantity, 0);\n        }\n    },\n    mounted() {\n        fetch('/api/basket')\n            .then(response => response.json())\n            .then(data => {\n                this.basket = data;\n            });\n    }\n});\napp.mount('#basket'); \n```", "```py\nnpm install -g @vue/cli \n```", "```py\nvue create my-project\ncd my-project \n```", "```py\n<!-- src/components/Basket.vue -->\n<template>\n  <div id=\"basket\">\n    <!-- Your basket template goes here -->\n  </div>\n</template>\n<script>\nexport default {\n  data() {\n    return {\n      basket: []\n    };\n  },\n  methods: {\n    increaseQuantity(index) {\n      this.basket[index].quantity++;\n    },\n    decreaseQuantity(index) {\n      if (this.basket[index].quantity > 0) {\n        this.basket[index].quantity--;\n      }\n    }\n  },\n  computed: {\n    total() {\n      return this.basket.reduce((total, item) => total + item.price * item.quantity, 0);\n    }\n  },\n  mounted() {\n    fetch('/api/basket')\n      .then(response => response.json())\n      .then(data => {\n        this.basket = data;\n      });\n  }\n};\n</script>\n<style scoped>\n/* Your CSS goes here */\n</style> \n```", "```py\n<!-- src/App.vue -->\n<template>\n  <div id=\"app\">\n    <Basket />\n  </div>\n</template>\n<script>\nimport Basket from './components/Basket.vue';\nexport default {\n  name: 'App',\n  components: {\n    Basket\n  }\n};\n</script>\n<style>\n/* Your CSS goes here */\n</style> \n```", "```py\nnpm run build \n```"]