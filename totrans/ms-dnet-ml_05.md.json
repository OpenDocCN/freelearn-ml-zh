["```py\n#r \"System.Transactions.dll\"\n\nopen System\nopen System.Text\nopen System.Data.SqlClient\n\ntype ProductInfo = {ProductID:int; AvgOrders:float; AvgReviews: float; ListPrice: float}\n\nlet productInfos = ResizeArray<ProductInfo>()\n\n[<Literal>]\nlet connectionString = \"data source=nc54a9m5kk.database.windows.net;initial catalog=AdventureWorks2014;user id= PacktReader;password= P@cktM@chine1e@rning;\"\n\n[<Literal>]\nlet query =\n    \"Select \n    A.ProductID, AvgOrders, AvgReviews, ListPrice\n    From\n    (Select \n    ProductID,\n    (Sum(OrderQty) + 0.0)/(Count(Distinct SOH.CustomerID) + 0.0) as AvgOrders\n    from [Sales].[SalesOrderDetail] as SOD\n    inner join [Sales].[SalesOrderHeader] as SOH\n    on SOD.SalesOrderID = SOH.SalesOrderID\n    inner join [Sales].[Customer] as C\n    on SOH.CustomerID = C.CustomerID\n    Where C.StoreID is not null\n    Group By ProductID) as A\n    Inner Join \n    (Select\n    ProductID,\n    (Sum(Rating) + 0.0) / (Count(ProductID) + 0.0) as AvgReviews\n    from [Production].[ProductReview] as PR\n    Group By ProductID) as B\n    on A.ProductID = B.ProductID\n    Inner Join\n    (Select\n    ProductID,\n    ListPrice\n    from [Production].[Product]\n    ) as C\n    On A.ProductID = C.ProductID\"\n\nlet connection = new SqlConnection(connectionString)\nlet command = new SqlCommand(query,connection)\nconnection.Open()\nlet reader = command.ExecuteReader()\nwhile reader.Read() do\n    productInfos.Add({ProductID=reader.GetInt32(0);\n                        AvgOrders=(float)(reader.GetDecimal(1));\n                        AvgReviews=(float)(reader.GetDecimal(2));\n                        ListPrice=(float)(reader.GetDecimal(3));})\n\nproductInfos\n```", "```py\nPM> Install-Package SQLProvider -prerelease\n\n```", "```py\n#r \"../packages/SQLProvider.0.0.11-alpha/lib/ FSharp.Data.SQLProvider.dll\"\n```", "```py\nopen System\nopen System.Linq\nopen FSharp.Data.Sql\n\n[<Literal>]\nlet connectionString = \"data source=nc54a9m5kk.database.windows.net;initial catalog=AdventureWorks2014;user id= PacktReader;password= P@cktM@chine1e@rning;\"\n\ntype AdventureWorks = SqlDataProvider<Common.DatabaseProviderTypes.MSSQLSERVER,connectionString>\nlet context = AdventureWorks.GetDataContext()\n\nSending that to the FSI gives us this:\nval connectionString : string =\n  \"data source=nc54a9m5kk.database.windows.net;initial catalog=A\"+[72 chars]\ntype AdventureWorks = SqlDataProvider<...>\nval context : SqlDataProvider<...>.dataContext\n```", "```py\nlet customers =  \n    query {for c in context.Sales.Customer do\n           where (c.StoreId > 0)\n           select c.CustomerId}\n           |> Seq.toArray \n```", "```py\nval customers : int [] =\n [|1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21;\n 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34; 35; 36; 37; 38; 39; 40;\n 41; 42; 43; 44; 45; 46; 47; 48; 49; 50; 51; 52; 53; 54; 55; 56; 57; 58; 59;\n 60; 61; 62; 63; 64; 65; 66; 67; 68; 69; 70; 71; 72; 73; 74; 75; 76; 77; 78;\n 79; 80; 81; 82; 83; 84; 85; 86; 87; 88; 89; 90; 91; 92; 93; 94; 95; 96; 97;\n 98; 99; 100; ...|]\n\n```", "```py\nlet products = \n    query {for soh in context.Sales.SalesOrderHeader do\n           join sod in context.Sales.SalesOrderDetail on (soh.SalesOrderId = sod.SalesOrderId)\n           join c in context.Sales.Customer on (soh.CustomerId = c.CustomerId)\n           join p in context.Production.Product on (sod.ProductId = p.ProductId)\n           where (c.CustomerId |=| customers)\n           select (p.ProductId)}\n           |> Seq.distinct\n           |> Seq.toArray \n```", "```py\nval products : int [] =\n [|776; 777; 778; 771; 772; 773; 774; 714; 716; 709; 712; 711; 762; 758; 745;\n 743; 747; 715; 742; 775; 741; 708; 764; 770; 730; 754; 725; 765; 768; 753;\n 756; 763; 732; 729; 722; 749; 760; 726; 733; 738; 766; 755; 707; 710; 761;\n 748; 739; 744; 736; 767; 717; 769; 727; 718; 759; 751; 752; 750; 757; 723;\n 786; 787; 788; 782; 783; 779; 780; 781; 815; 816; 808; 809; 810; 823; 824;\n\n```", "```py\njoin sod in context.Sales.SalesOrderDetail on (soh.SalesOrderId = sod.SalesOrderId)\njoin c in context.Sales.Customer on (soh.CustomerId = c.CustomerId)\njoin p in context.Production.Product on (sod.ProductId = p.ProductId)\n```", "```py\nwhere (c.CustomerId |=| customers)\n```", "```py\nselect (p.ProductId)}\n|> Seq.distinct\n|> Seq.toArray\n```", "```py\nlet averageReviews = \n    query {for pr in context.Production.ProductReview do\n            where (pr.ProductId |=| products)\n            select pr}\n            |> Seq.groupBy(fun pr -> pr.ProductId)\n            |> Seq.map(fun (id,a) -> id, a |> Seq.sumBy(fun pr -> pr.Rating), a |> Seq.length)\n            |> Seq.map( fun (id,r,c) -> id, float(r)/float(c))\n            |> Seq.sortBy(fun (id, apr) -> id)\n            |> Seq.toArray\n```", "```py\nval averageReviews : (int * float) [] =\n [|(749, 3.9); (750, 3.977272727); (751, 3.93877551); (752, 4.02173913);\n (753, 3.939393939); (754, 3.965517241); (755, 3.628571429);\n (756, 3.742857143); (757, 3.9375); (758, 3.845070423); (759, 3.483870968);\n (760, 4.035874439);\n\n```", "```py\nlet listPrices = \n    query {for p in context.Production.Product do\n            where (p.ProductId |=| products)\n            select p}\n            |> Seq.map(fun p -> p.ProductId, p.ListPrice)   \n            |> Seq.sortBy(fun (id, lp) -> id)\n            |> Seq.toArray\n```", "```py\nval listPrices : (int * decimal) [] =\n [|(707, 34.9900M); (708, 34.9900M); (709, 9.5000M); (710, 9.5000M);\n (711, 34.9900M); (712, 8.9900M); (714, 49.9900M); (715, 49.9900M);\n (716, 49.9900M); (717, 1431.5000M); (718, 1431.5000M); (719, 1431.5000M);\n (722, 337.2200M); (723, 337.2200M); (725, 337.2200M); (726, 337.2200M);\n (727, 337.2200M)\n\n```", "```py\nlet averageOrders = \n    query {for soh in context.Sales.SalesOrderHeader do\n            join sod in context.Sales.SalesOrderDetail on (soh.SalesOrderId = sod.SalesOrderId)\n            join c in context.Sales.Customer on (soh.CustomerId = c.CustomerId)\n            where (c.CustomerId |=| customers)\n            select (soh,sod)}\n            |> Seq.map (fun (soh,sod) -> sod.ProductId, sod.OrderQty, soh.CustomerId)\n            |> Seq.groupBy (fun (pid,q,cid) -> pid )\n            |> Seq.map (fun (pid,a) -> pid, a |> Seq.sumBy (fun (pid,q,cid) -> q), a |> Seq.distinctBy (fun (pid,q,cid) -> cid))\n            |> Seq.map (fun (pid,q,a) -> pid,q, a |> Seq.length)\n            |> Seq.map (fun (pid,q,c) -> pid, float(q)/float(c))\n            |> Seq.sortBy (fun (id, ao) -> id)\n            |> Seq.toArray\n```", "```py\nval averageOrders : (int * float) [] =\n [|(707, 17.24786325); (708, 17.71713147); (709, 16.04347826);\n (710, 3.214285714); (711, 17.83011583); (712, 22.33941606);\n (714, 15.35576923); (715, 22.82527881); (716, 13.43979058);\n (717, 4.708737864); (718, 5.115789474); (719, 3.303030303);\n\n```", "```py\n|> Seq.map(fun (pid,a) -> pid, a |> Seq.sumBy(fun (pid,q,cid) -> q), a |> Seq.distinctBy(fun (pid,q,cid) -> cid))\n```", "```py\n|> Seq.map(fun (pid,q,c) -> pid, float(q)/float(c))\n```", "```py\naverageOrders: ProductId, AverageNumberOfOrders\naverageReviews: ProductId, AverageReviews\nlistPrices: ProductId, PriceOfProduct\n```", "```py\nSeq.zip3 averageOrders  averageReviews  listPrices \n```", "```py\nval it : seq<(int * float) * (int * float) * (int * decimal)> =\n  seq\n    [((707, 17.24786325), (749, 3.9), (707, 34.9900M));\n     ((708, 17.71713147),\n```", "```py\n#load \"../packages/FsLab.0.3.17/FsLab.fsx\"\nopen Foogle\nopen Deedle\nopen FSharp.Data\n```", "```py\n[Loading F:\\Git\\MLDotNet\\Book Chapters\\Chapter05\\TypeProviders.Solution\\packages\\FsLab.0.3.10\\FsLab.fsx]\n\nnamespace FSI_0009.FsLab\n val server : Foogle.SimpleHttp.HttpServer option ref\n val tempDir : string\n val pid : int\n val counter : int ref\n val displayHtml : html:string -> unit\nnamespace FSI_0009.FSharp.Charting\n type Chart with\n static member\n\nLine : data:Deedle.Series<'K,#FSharp.Charting.value> * ?Name:string *\n ?Title:string * ?Labels:#seq<string> * ?Color:Drawing.Color *\n\n```", "```py\nlet averageOrders' = Frame.ofRecords averageOrders\nlet listPrices' = Frame.ofRecords listPrices\nlet averageReviews' = Frame.ofRecords averageReviews\n```", "```py\n      Item1 Item2            \n0  -> 749   3.9              \n1  -> 750   3.97727272727273 \n2  -> 751   3.93877551020408 \n3  -> 752   4.02173913043478 \n4  -> 753   3.9393939393939\n```", "```py\nlet orderNames = [\"ProductId\"; \"AvgOrder\"]\nlet priceNames = [\"ProductId\"; \"Price\"]\nlet reviewNames = [\"ProductId\"; \"AvgReview\"]\n\nlet adjustFrame frame headers =\n    frame |> Frame.indexColsWith headers\n          |> Frame.indexRowsInt \"ProductId\"\n          |> Frame.sortRowsByKey\n\nlet averageOrders'' = adjustFrame averageOrders' orderNames\nlet listPrices'' = adjustFrame listPrices' priceNames\nlet averageReviews'' = adjustFrame averageReviews' reviewNames\nSending that to the REPL, should see something like:\nval averageReviews'' : Frame<int,string> =\n\n       AvgReview        \n749 -> 3.9              \n750 -> 3.97727272727273 \n751 -> 3.93877551020408\n```", "```py\naverageOrders'' |> Frame.join JoinKind.Inner listPrices''\n                |> Frame.join JoinKind.Inner averageReviews''\n```", "```py\n AvgReview        Price     AvgOrder \n749 -> 3.9              3578.2700 4.47457627118644 \n750 -> 3.97727272727273 3578.2700 4.72727272727273 \n751 -> 3.93877551020408 3578.2700 4.875 \n752 -> 4.02173913043478\n\n```", "```py\nPM> Install-Package FSharp.EntityFramework.MicrosoftSqlServer â€“Pre\n```", "```py\n#I @\"..\\packages\" \n#r @\"EntityFramework.Core.7.0.0-rc1-final\\lib\\net451\\EntityFramework.Core.dll\"\n#r @\"EntityFramework.MicrosoftSqlServer.7.0.0-rc1-final\\lib\\net451\\EntityFramework.MicrosoftSqlServer.dll\"\n#r @\"EntityFramework.Relational.7.0.0-rc1-final\\lib\\net451\\EntityFramework.Relational.dll\"\n#r @\"Inflector.1.0.0.0\\lib\\net45\\Inflector.dll\"\n#r @\"Microsoft.Extensions.Caching.Abstractions.1.0.0-rc1-final\\lib\\net451\\Microsoft.Extensions.Caching.Abstractions.dll\"\n#r @\"Microsoft.Extensions.Caching.Memory.1.0.0-rc1-final\\lib\\net451\\Microsoft.Extensions.Caching.Memory.dll\"\n#r @\"Microsoft.Extensions.Configuration.1.0.0-rc1-final\\lib\\net451\\Microsoft.Extensions.Configuration.dll\"\n#r @\"Microsoft.Extensions.Configuration.Abstractions.1.0.0-rc1-final\\lib\\net451\\Microsoft.Extensions.Configuration.Abstractions.dll\"\n#r @\"Microsoft.Extensions.Configuration.Binder.1.0.0-rc1-final\\lib\\net451\\Microsoft.Extensions.Configuration.Binder.dll\"\n#r @\"Microsoft.Extensions.DependencyInjection.1.0.0-rc1-final\\lib\\net451\\Microsoft.Extensions.DependencyInjection.dll\"\n#r @\"Microsoft.Extensions.Logging.1.0.0-rc1-final\\lib\\net451\\Microsoft.Extensions.Logging.dll\"\n#r @\"Microsoft.Extensions.Logging.Abstractions.1.0.0-rc1-final\\lib\\net451\\Microsoft.Extensions.Logging.Abstractions.dll\"\n#r @\"Microsoft.Extensions.OptionsModel.1.0.0-rc1-final\\lib\\net451\\Microsoft.Extensions.OptionsModel.dll\"\n#r @\"Microsoft.Extensions.Primitives.1.0.0-rc1-final\\lib\\net451\\Microsoft.Extensions.Primitives.dll\"\n#r @\"Remotion.Linq.2.0.1\\lib\\net45\\Remotion.Linq.dll\"\n#r @\"System.Collections.Immutable.1.1.36\\lib\\portable-net45+win8+wp8+wpa81\\System.Collections.Immutable.dll\"\n#r @\"System.Diagnostics.DiagnosticSource.4.0.0-beta-23516\\lib\\dotnet5.2\\System.Diagnostics.DiagnosticSource.dll\"\n#r @\"Ix-Async.1.2.5\\lib\\net45\\System.Interactive.Async.dll\"\n\n#r \"../packages/Microsoft.Extensions.DependencyInjection.Abstractions.1.0.0-rc1-final/lib/net451/Microsoft.Extensions.DependencyInjection.Abstractions.dll\"\n#r @\"FSharp.EntityFramework.MicrosoftSqlServer.0.0.2.0-alpha\\lib\\net451\\FSharp.EntityFramework.MicrosoftSqlServer.dll\"\n```", "```py\nopen System\nopen System.Data.SqlClient\nopen Microsoft.Data.Entity\nopen FSharp.Data.Entity\n\n[<Literal>]\nlet connectionString = \"data source=nc54a9m5kk.database.windows.net;initial catalog=AdventureWorks2014; user id= PacktReader;password= P@cktM@chine1e@rning;\"\n\ntype AdventureWorks = SqlServer<connectionString, Pluralize = true>\nlet context = new AdventureWorks()\nSending this to the REPL will give you this:\n    nested type Sales.SpecialOffer\n    nested type Sales.SpecialOfferProduct\n    nested type Sales.Store\n    nested type dbo.AWBuildVersion\n    nested type dbo.DatabaseLog\n    nested type dbo.ErrorLog\n  end\nval context : AdventureWorks\n```", "```py\nlet salesOrderQuery = \n    query { for soh in context.``Sales.SalesOrderHeaders`` do\n            join sod in context.``Sales.SalesOrderDetails`` on (soh.SalesOrderID = sod.SalesOrderID)\n            where (soh.OrderDate > DateTime(2013,5,1))\n            select(soh)} |> Seq.head\n```", "```py\n FK_SalesOrderHeader_Address_BillToAddressID = null;\n FK_SalesOrderHeader_CreditCard_CreditCardID = null;\n FK_SalesOrderHeader_CurrencyRate_CurrencyRateID = null;\n FK_SalesOrderHeader_Customer_CustomerID = null;\n FK_SalesOrderHeader_SalesPerson_SalesPersonID = null;\n FK_SalesOrderHeader_SalesTerritory_TerritoryID = null;\n FK_SalesOrderHeader_ShipMethod_ShipMethodID = null;\n Freight = 51.7855M;\n ModifiedDate = 5/9/2013 12:00:00 AM;\n OnlineOrderFlag = true;\n OrderDate = 5/2/2013 12:00:00 AM;\n PurchaseOrderNumber = null;\n RevisionNumber = 8uy;\n SalesOrderDetail = null;\n SalesOrderHeaderSalesReason = null;\n SalesOrderID = 50788;\n SalesOrderNumber = \"SO50788\";\n SalesPersonID = null;\n ShipDate = 5/9/2013 12:00:00 AM;\n ShipMethodID = 1;\n ShipToAddressID = 20927;\n Status = 5uy;\n SubTotal = 2071.4196M;\n TaxAmt = 165.7136M;\n TerritoryID = 4;\n TotalDue = 2288.9187M;\n rowguid = 74fca7f8-654b-432f-95fb-0dd42b0e3cf1;}\n>\n\n```", "```py\nlet salesOrderQuery' = \n    query { for soh in context.``Sales.SalesOrderHeaders`` do\n            join sod in context.``Sales.SalesOrderDetails`` on (soh.SalesOrderID = sod.SalesOrderID)\n            join p in context.``Production.Products`` on (sod.ProductID = p.ProductID)\n            where (soh.OrderDate > DateTime(2013,5,1) && p.ProductSubcategoryID =  new System.Nullable<int>(1))\n            select(soh)} |> Seq.head\nsalesOrderQuery'\n```", "```py\n     SalesPersonID = null;\n     ShipDate = 5/9/2013 12:00:00 AM;\n     ShipMethodID = 1;\n     ShipToAddressID = 20927;\n     Status = 5uy;\n     SubTotal = 2071.4196M;\n     TaxAmt = 165.7136M;\n     TerritoryID = 4;\n     TotalDue = 2288.9187M;\n     rowguid = 74fca7f8-654b-432f-95fb-0dd42b0e3cf1;}\n>\n```", "```py\nlet salesOrderQuery''' =\n query { for soh in context.``Sales.SalesOrderHeaders`` do\n            join sod in context.``Sales.SalesOrderDetails`` on (soh.SalesOrderID = sod.SalesOrderID)\n            join p in context.``Production.Products`` on (sod.ProductID = p.ProductID)\n            where (soh.OrderDate > DateTime(2013,5,1) && p.ProductSubcategoryID |=| [|1;2;3|])\n            select(soh)} |> Seq.head\n```", "```py\nSqlServerProviders.fsx(199,105): error FS0001: This expression was expected to have type\n Nullable<int> \n> but here has type\n int \n\n```", "```py\nlet produceSubcategories = [|new System.Nullable<int>(1); new System.Nullable<int>(2); new System.Nullable<int>(3)|]\n\nlet salesOrderQuery''' = \nquery { for soh in context.``Sales.SalesOrderHeaders`` do\n        join sod in context.``Sales.SalesOrderDetails`` on (soh.SalesOrderID = sod.SalesOrderID)\n        join p in context.``Production.Products`` on (sod.ProductID = p.ProductID)\n        where (soh.OrderDate > DateTime(2013,5,1) && p.ProductSubcategoryID |=| produceSubcategories)\n        select(soh)} |> Seq.head\n```", "```py\nSystem.ArgumentException: The input sequence was empty.\nParameter name: source\n at Microsoft.FSharp.Collections.SeqModule.Head[T](IEnumerable`1 source)\n at <StartupCode$FSI_0024>.$FSI_0024.main@() in F:\\Git\\MLDotNet\\Book Chapters\\Chapter05\\TypeProviders.Solution\\TypeProviders\\SqlServerProviders.fsx:line 206\nStopped due to error\n\n```", "```py\nlet isBikeSubcategory id =\n    let produceSubcategories = [|new System.Nullable<int>(1);\n    new System.Nullable<int>(2); new System.Nullable<int>(3)|]\n    Array.contains id produceSubcategories\n\nisBikeSubcategory(new System.Nullable<int>(1))\nisBikeSubcategory(new System.Nullable<int>(6))\n\nlet salesOrderQuery''' = \n    query { for soh in context.``Sales.SalesOrderHeaders`` do\n            join sod in context.``Sales.SalesOrderDetails`` on (soh.SalesOrderID = sod.SalesOrderID)\n            join p in context.``Production.Products`` on (sod.ProductID = p.ProductID)\n            where (soh.OrderDate > DateTime(2013,5,1) && isBikeSubcategory(p.ProductSubcategoryID))\n            select(soh)} |> Seq.head\nsalesOrderQuery'''\n```", "```py\n Status = 5uy;\n SubTotal = 2071.4196M;\n TaxAmt = 165.7136M;\n TerritoryID = 4;\n TotalDue = 2288.9187M;\n rowguid = 74fca7f8-654b-432f-95fb-0dd42b0e3cf1;}\n>\n\n```", "```py\nlet produceSubcategories = [|new System.Nullable<int>(1);\nnew System.Nullable<int>(2); new System.Nullable<int>(3)|]\nlet (|=|) id a = Array.contains id a\n\nlet salesOrderQuery4 = \n    query { for soh in context.``Sales.SalesOrderHeaders`` do\n            join sod in context.``Sales.SalesOrderDetails`` on (soh.SalesOrderID = sod.SalesOrderID)\n            join p in context.``Production.Products`` on (sod.ProductID = p.ProductID)\n            where (soh.OrderDate > DateTime(2013,5,1) && p.ProductSubcategoryID |=| produceSubcategories )\n            select(soh)} |> Seq.head\nsalesOrderQuery4\n```", "```py\nlet (|=|) id a = Array.contains id a\n```", "```py\nwhere (soh.OrderDate > DateTime(2013,5,1) && p.ProductSubcategoryID |=| produceSubcategories )\n```", "```py\nlet produceSubcategories = [|new System.Nullable<int>(1);\nnew System.Nullable<int>(2); new System.Nullable<int>(3)|]\n\nlet salesOrderQuery5 = \n    query { for soh in context.``Sales.SalesOrderHeaders`` do\n            join sod in context.``Sales.SalesOrderDetails`` on (soh.SalesOrderID = sod.SalesOrderID)\n            join p in context.``Production.Products`` on (sod.ProductID = p.ProductID)\n            where (soh.OrderDate > DateTime(2013,5,1) &&  Array.contains p.ProductSubcategoryID produceSubcategories)\n            select(soh)} |> Seq.head\nsalesOrderQuery5\n```", "```py\n     ShipDate = 5/9/2013 12:00:00 AM;\n     ShipMethodID = 1;\n     ShipToAddressID = 20927;\n     Status = 5uy;\n     SubTotal = 2071.4196M;\n     TaxAmt = 165.7136M;\n     TerritoryID = 4;\n     TotalDue = 2288.9187M;\n     rowguid = 74fca7f8-654b-432f-95fb-0dd42b0e3cf1;}\n>\n```", "```py\n#load \"../packages/FsLab.0.3.17/FsLab.fsx\"\n\n#I @\"..\\packages\" \n#r @\"EntityFramework.Core.7.0.0-rc1-final\\lib\\net451\\EntityFramework.Core.dll\"\n#r @\"EntityFramework.MicrosoftSqlServer.7.0.0-rc1-final\\lib\\net451\\EntityFramework.MicrosoftSqlServer.dll\"\n#r @\"EntityFramework.Relational.7.0.0-rc1-final\\lib\\net451\\EntityFramework.Relational.dll\"\n#r @\"Inflector.1.0.0.0\\lib\\net45\\Inflector.dll\"\n#r @\"Microsoft.Extensions.Caching.Abstractions.1.0.0-rc1-final\\lib\\net451\\Microsoft.Extensions.Caching.Abstractions.dll\"\n#r @\"Microsoft.Extensions.Caching.Memory.1.0.0-rc1-final\\lib\\net451\\Microsoft.Extensions.Caching.Memory.dll\"\n#r @\"Microsoft.Extensions.Configuration.1.0.0-rc1-final\\lib\\net451\\Microsoft.Extensions.Configuration.dll\"\n#r @\"Microsoft.Extensions.Configuration.Abstractions.1.0.0-rc1-final\\lib\\net451\\Microsoft.Extensions.Configuration.Abstractions.dll\"\n#r @\"Microsoft.Extensions.Configuration.Binder.1.0.0-rc1-final\\lib\\net451\\Microsoft.Extensions.Configuration.Binder.dll\"\n#r @\"Microsoft.Extensions.DependencyInjection.1.0.0-rc1-final\\lib\\net451\\Microsoft.Extensions.DependencyInjection.dll\"\n#r @\"Microsoft.Extensions.Logging.1.0.0-rc1-final\\lib\\net451\\Microsoft.Extensions.Logging.dll\"\n#r @\"Microsoft.Extensions.Logging.Abstractions.1.0.0-rc1-final\\lib\\net451\\Microsoft.Extensions.Logging.Abstractions.dll\"\n#r @\"Microsoft.Extensions.OptionsModel.1.0.0-rc1-final\\lib\\net451\\Microsoft.Extensions.OptionsModel.dll\"\n#r @\"Microsoft.Extensions.Primitives.1.0.0-rc1-final\\lib\\net451\\Microsoft.Extensions.Primitives.dll\"\n#r @\"Remotion.Linq.2.0.1\\lib\\net45\\Remotion.Linq.dll\"\n#r @\"System.Collections.Immutable.1.1.36\\lib\\portable-net45+win8+wp8+wpa81\\System.Collections.Immutable.dll\"\n#r @\"System.Diagnostics.DiagnosticSource.4.0.0-beta-23516\\lib\\dotnet5.2\\System.Diagnostics.DiagnosticSource.dll\"\n#r @\"Ix-Async.1.2.5\\lib\\net45\\System.Interactive.Async.dll\"\n#r \"../packages/Microsoft.Extensions.DependencyInjection.Abstractions.1.0.0-rc1-final/lib/net451/Microsoft.Extensions.DependencyInjection.Abstractions.dll\"\n#r @\"FSharp.EntityFramework.MicrosoftSqlServer.0.0.2.0-alpha\\lib\\net451\\FSharp.EntityFramework.MicrosoftSqlServer.dll\"\n\nopen System\nopen Foogle\nopen Deedle\nopen FSharp.Data\nopen System.Data.SqlClient\nopen Microsoft.Data.Entity\n```", "```py\n[<Literal>]\nlet connectionString = \"data source=nc54a9m5kk.database.windows.net;initial catalog=AdventureWorks2014;user id=chickenskills@nc54a9m5kk;password=sk1lzm@tter;\"\n\ntype AdventureWorks = SqlServer<connectionString, Pluralize = true>\nlet context = new AdventureWorks()\n\nlet salesNames = [\"Date\"; \"Sales\"]\nlet salesByDay = \n    query { for soh in context.``Sales.SalesOrderHeaders`` do\n            join sod in context.``Sales.SalesOrderDetails`` on (soh.SalesOrderID = sod.SalesOrderID)\n            where (soh.OrderDate > DateTime(2013,5,1))\n            select(soh)}\n            |> Seq.countBy(fun soh -> soh.OrderDate)\n            |> Frame.ofRecords\n            |> Frame.indexColsWith salesNames\n            |> Frame.indexRowsDate \"Date\"\n            |> Frame.sortRowsByKeySend it to the REPL to get this:\n                         Sales \n5/2/2013 12:00:00 AM  -> 9     \n5/3/2013 12:00:00 AM  -> 9     \n:                        ...   \n6/30/2014 12:00:00 AM -> 96    \n```", "```py\nlet stockNames = [\"Date\"; \"PriceChange\"]\ntype Stocks = CsvProvider<\"http://ichart.finance.yahoo.com/table.csv?s=^DJI\">\nlet dow = Stocks.Load(\"http://ichart.finance.yahoo.com/table.csv?s=^DJI\")\nlet stockChangeByDay = \n    dow.Rows |> Seq.map(fun r -> r.Date, (r.``Adj Close`` - r.Open)/r.Open)\n             |> Frame.ofRecords\n             |> Frame.indexColsWith stockNames\n             |> Frame.indexRowsDate \"Date\"\n             |> Frame.sortRowsByKey\n```", "```py\ntype Stocks = CsvProvider<...>\nval dow : CsvProvider<...>\nval stockChangeByDay : Frame<int,string> =\n\n PriceChange \n1/29/1985 12:00:00 AM  -> 0.0116614159112959501515062411 \n1/30/1985 12:00:00 AM  -> -0.0073147907201291486627914499 \n:                         ... \n11/25/2015 12:00:00 AM -> -0.000416362767587419771025076 \n11/27/2015 12:00:00 AM -> 0.0004128690819110368634773694 \n\n```", "```py\nlet sunspotNames = [\"Date\"; \"Sunspots\"]\n\ntype Sunspots = JsonProvider<\"https://www.quandl.com/api/v3/datasets/SIDC/SUNSPOTS_D.json?start_date=2015-10-01&end_date=2015-10-01\">\nlet sunspots = Sunspots.Load(\"https://www.quandl.com/api/v3/datasets/SIDC/SUNSPOTS_D.json?start_date=2013-05-01\")\nlet sunspotsByDay = \n    sunspots.Dataset.Data |> Seq.map(fun r -> r.DateTime, Seq.head r.Numbers ) \n                          |> Frame.ofRecords\n                          |> Frame.indexColsWith sunspotNames\n                          |> Frame.indexRowsDate \"Date\"\n                          |> Frame.sortRowsByKey\n```", "```py\nval sunspotsByDay : Frame<DateTime,string> =\n\n Sunspots \n5/1/2013 12:00:00 AM   -> 142.0 \n5/2/2013 12:00:00 AM   -> 104.0 \n:                         ... \n10/30/2015 12:00:00 AM -> 88.0 \n10/31/2015 12:00:00 AM -> 83.0\n\n```", "```py\nlet dataFrame = salesByDay |> Frame.join JoinKind.Inner stockChangeByDay\n                           |> Frame.join JoinKind.Inner sunspotsByDay\n```", "```py\nval dataFrame : Frame<DateTime,string> =\n\n PriceChange                     Sales Sunspots \n5/2/2013 12:00:00 AM  -> 0.0088858122275952653140731221  9     104.0 \n5/3/2013 12:00:00 AM  -> 0.0095997784626598973212920005  9     98.0 \n:                        ...                             ...   ... \n6/27/2014 12:00:00 AM -> 0.0002931965456766616196704027  82    67.0 \n6/30/2014 12:00:00 AM -> -0.0015363085597738848688182542 96    132.0 \n\n```", "```py\n#r \"../packages/FSharp.Data.2.2.5/lib/net40/FSharp.Data.dll\"\n\nopen System.IO\nopen System.Text\nopen FSharp.Data\n\n[<Literal>]\nlet sample = \"..\\Data\\BingHttpGet.json\"\ntype Context = JsonProvider<sample>\n\nlet getGeocode address =\n    let apiKey = \"yourApiKeyHere\"\n    let baseUri = \"http://dev.virtualearth.net/REST/v1/Locations?q=\" + address + \"&o=json&key=\" + apiKey\n    let searchResult = Context.Load(baseUri)\n    let resourceSets = searchResult.ResourceSets\n    match resourceSets.Length with\n    | 0 -> None\n    | _ -> let resources = resourceSets.[0].Resources\n           match resources.Length with\n           | 0 -> None\n           | _ -> let resource = resources.[0]\n                  Some resource.GeocodePoints\n\nlet address = \"1%20Microsoft%20Way%20Redmond%20WA%2098052\"\nlet address' = \"Webser st and Holtz ln Cary,NC\"\n\ngetGeocode address'\n```", "```py\n#r \"../packages/FSharp.Data.2.2.5/lib/net40/FSharp.Data.dll\"\n#r \"System.Data.Entity.dll\"\n#r \"FSharp.Data.TypeProviders.dll\"\n#r \"System.Data.Linq.dll\"\n#load \"BingGeocode.fsx\"\n\nopen System\nopen System.Data.Linq\nopen System.Data.Entity\nopen Microsoft.FSharp.Data.TypeProviders\n\n[<Literal>]\nlet connectionString = \"data source=nc54a9m5kk.database.windows.net;initial catalog=Traffic;user id=chickenskills@nc54a9m5kk;password=sk1lzm@tter;\"\n\ntype EntityConnection = SqlEntityConnection<connectionString,Pluralize = true>\nlet context = EntityConnection.GetDataContext()\n\ntype Crash = {Id: int; OnRoad:string; FromRoad:string }\n\nlet trafficCrashes = \n    context.dbo_TrafficCrashes \n    |> Seq.filter(fun tc -> tc.MunicipalityId = Nullable<int>(13))\n    |> Seq.filter(fun tc -> (float)tc.Miles <= 0.25)\n    |> Seq.map(fun tc -> {Id=tc.Id; OnRoad=tc.OnRoad; FromRoad=tc.FromRoad})\n    |> Seq.toArray\n\nlet trafficCrashes' = \n    trafficCrashes \n    |> Array.map(fun c -> c.Id, c.OnRoad + \" and \" + c.FromRoad + \" Cary,NC\")\n    |> Array.map(fun (i,l) -> i, BingGeocode.getGeocode(l))\n\nlet trafficCrashes'' = \n    trafficCrashes' \n    |> Array.filter(fun (i,p) -> p.IsSome)\n    |> Array.map(fun (i,p) -> i, p.Value.[0].Coordinates.[0], p.Value.[0].Coordinates.[1])\n```", "```py\n//Write so we can continue to work without going to Bing again\n//They throttle so you really only want to go there once\nopen System.IO\nlet baseDirectory = System.IO.DirectoryInfo(__SOURCE_DIRECTORY__)\nlet dataDirectory = baseDirectory.Parent.Parent.FullName + @\"\\Data\"\n\nuse outFile = new StreamWriter(dataDirectory + @\"\\crashGeocode.csv\")\ntrafficCrashes'' |> Array.map (fun (i,lt,lg) -> i.ToString() ,lt.ToString(), lg.ToString())\n                 |> Array.iter (fun (i,lt,lg) -> outFile.WriteLine(sprintf \"%s,%s,%s\" i lt lg))\noutFile.Flush\noutFile.Close()\n```", "```py\ntype Crash' = {Id: int; Latitude: float; Longitude: float}\n\nlet updateDatabase (crash:Crash') =\n    let trafficCrash = \n        context.dbo_TrafficCrashes \n        |> Seq.find(fun tc -> tc.Id = crash.Id)\n    trafficCrash.Latitude <- Nullable<float>(crash.Latitude)\n    trafficCrash.Longitude <- Nullable<float>(crash.Longitude)\n    context.DataContext.SaveChanges() |> ignore\n\nopen FSharp.Data\ntype CrashProvider = CsvProvider<\"../Data/crashGeocode.csv\">\nlet crashes = \n    CrashProvider.Load(\"../Data/crashGeocode.csv\").Rows\n    |> Seq.map(fun r -> {Id=r.id; Latitude=float r.latitude; Longitude= float r.longitude})\n    |> Seq.toArray\n    |> Array.iter(fun c -> updateDatabase(c))\n```", "```py\nlet trafficCrashes = \n    context.dbo_TrafficCrashes\n    |> Seq.filter (fun tc -> tc.MunicipalityId = Nullable<int>(13))\n    |> Seq.filter (fun tc -> (float)tc.Miles <= 0.25)\n    |> Seq.map (fun tc -> {Id=tc.Id; OnRoad=tc.OnRoad; FromRoad=tc.FromRoad})\n    |> Seq.take 200\n    |> Seq.toArray\n\nopen System.Diagnostics\nlet stopwatch = Stopwatch()\nstopwatch.Start()\nlet trafficCrashes' = \n    trafficCrashes \n    |> Array.map (fun c -> c.Id, c.OnRoad + \" and \" + c.FromRoad + \" Cary,NC\")\n    |> Array.map (fun (i,l) -> i, BingGeocode.getGeocode(l))\n\nstopwatch.Stop()\nprintfn \"serial - %A\" stopwatch.Elapsed.Seconds \n```", "```py\nserial - 33\n```", "```py\nstopwatch.Reset()\n\nopen Microsoft.FSharp.Collections.Array.Parallel\n\nstopwatch.Start()\nlet pTrafficCrashes' = \n    trafficCrashes \n    |> Array.map (fun c -> c.Id, c.OnRoad + \" and \" + c.FromRoad + \" Cary,NC\")\n    |> Array.Parallel.map (fun (i,l) -> i, BingGeocode.getGeocode(l))\n\nstopwatch.Stop()\nprintfn \"parallel - %A\" stopwatch.Elapsed.Seconds\n```", "```py\n|> Array.map (fun (i,l) -> i, BingGeocode.getGeocode(l))\n```", "```py\n|> Array.Parallel.map (fun (i,l) -> i, BingGeocode.getGeocode(l))\n```", "```py\nparallel - 12\n\n```", "```py\n#r \"System.Net.Http.dll\"\n#r \"../packages/FSharp.Data.2.2.5/lib/net40/FSharp.Data.dll\"\n\nopen System\nopen System.Net\nopen FSharp.Data\nopen System.Net.Http\nopen System.Net.Http.Headers\nopen System.Collections.Generic\n\n[<Literal>]\nlet uri = \"http://www.ncdc.noaa.gov/cdo-web/api/v2/data?datasetid=GHCND&locationid=ZIP:27519&startdate=2012-01-01&enddate=2012-12-31&limit=1000\"\nlet apiToken = \"yourApiTokenHere\"\nuse client = new WebClient()\nclient.Headers.Add(\"token\", apiToken)\nlet resultJson = client.DownloadString(uri)\n\n[<Literal>]\nlet weatherSample = \"..\\Data\\NOAAHttpGet.json\"\ntype weatherServiceContext = JsonProvider<weatherSample>\nlet searchResult = weatherServiceContext.Parse(resultJson)\nlet results = searchResult.Results\n\nlet dailyPrecipitation = \n    results \n    |> Seq.where (fun r -> r.Value > 0)\n    |> Seq.groupBy (fun r -> r.Date)\n    |> Seq.map (fun (d,a) -> d, a |> Seq.sumBy (fun r -> r.Value))\n    |> Seq.sortBy (fun (d,c) -> d) \n```", "```py\nlet searchResult = weatherServiceContext.Parse(resultJson)\n```", "```py\nopen System.IO\nlet baseDirectory = System.IO.DirectoryInfo(__SOURCE_DIRECTORY__)\nlet dataDirectory = baseDirectory.Parent.Parent.FullName + @\"\\Data\"\n\nuse outFile = new StreamWriter(dataDirectory + @\"\\dailyPrecipitation.csv\")\ndailyPrecipitation \n    |> Seq.map(fun (d,p) -> d.ToString(), p.ToString())\n    |> Seq.iter(fun (d,p) -> outFile.WriteLine(sprintf \"%s,%s\" d p))\n\noutFile.Flush\noutFile.Close()\n```", "```py\ntype DailyPercipitation = {WeatherDate: DateTime; Amount: int; }\nlet dailyWeather = \n    context.dbo_DailyPercipitation \n    |> Seq.map(fun dw -> {WeatherDate=dw.RecordDate; Amount=dw.Amount;})\n    |> Seq.toArray\n```", "```py\ntype DailyPercipitation =\n {WeatherDate: DateTime;\n Amount: int;}\nval dailyWeather : DailyPercipitation [] =\n [|{WeatherDate = 1/9/2012 12:00:00 AM;\n Amount = 41;};\n {WeatherDate = 1/10/2012 12:00:00 AM;\n Amount = 30;}; {WeatherDate = 1/11/2012 12:00:00 AM;\n Amount = 5;};\n {WeatherDate = 1/12/2012 12:00:00 AM;\n Amount = 124;}; \n {WeatherDate = 1/13/2012 12:00:00 AM;\n Amount = 5;}; \n {WeatherDate = 1/21/2012 12:00:00 AM;\n...\n\n```"]