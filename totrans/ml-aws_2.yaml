- en: '2'
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: '2'
- en: Summarizing
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Text Documents Using NLP
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 NLP 处理文本文档
- en: Learning Objectives
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 学习目标
- en: 'By the end of this chapter, you will able to:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将能够：
- en: Use Amazon Comprehend to examine text, in order to determine its primary language
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Amazon Comprehend 检查文本，以确定其主要语言
- en: Extract information such as entities (people or places), key phrases (noun phrases
    that are indicative of the content), emotional sentiments, and topics in a set
    of documents
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从一组文档中提取信息，如实体（人或地点）、关键词（指示内容的名词短语）、情感倾向和主题
- en: Set up a Lambda function to process and analyze the imported text using Comprehend
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置 Lambda 函数以使用 Comprehend 处理和分析导入的文本
- en: This chapter describes the use of Amazon Comprehend to summarize the text documents
    and creating Lambda function to analyze the text.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本章描述了使用 Amazon Comprehend 概括文本文档以及创建 Lambda 函数来分析文本的方法。
- en: Introduction
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 简介
- en: The Amazon Comprehend service continually learns from new data from Amazon.com
    product descriptions and consumer reviews, and thus, it perpetually improves its
    ability to understand a variety of topics from *Government*, *Health*, *Media*,
    *Education*, *Advertising*, and so on. Overall, Amazon Comprehend can analyze
    a collection of text documents and can organize the articles by topic, identify
    the most frequently mentioned features, and group articles by subject matter,
    to enable personalized recommendations to website visitors.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Amazon Comprehend 服务不断从 Amazon.com 的产品描述和消费者评论中学习新数据，因此，它持续提高理解各种主题（如政府、健康、媒体、教育、广告等）的能力。总体而言，Amazon
    Comprehend 可以分析一组文本文档，并可以根据主题组织文章，识别最常提到的特征，并根据主题对文章进行分组，以便为网站访客提供个性化推荐。
- en: In the first part of this chapter, you learned how to use Amazon Comprehend
    to extract insights through using **Natural Language Processing (NLP)** from the
    contents of documents. Now, you will learn how to use the Amazon Comprehend API
    to produce insights by recognizing the language, entities, key phrases, sentiments,
    and topics in a document. This will allow you to understand deep learning-based
    NLP to build more complex applications, which we will do on Day 2\.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的第一部分，你学习了如何使用 Amazon Comprehend 通过从文档内容中使用**自然语言处理（NLP）**来提取见解。现在，你将学习如何使用
    Amazon Comprehend API 通过识别文档中的语言、实体、关键词、情感和主题来产生见解。这将使你能够理解基于深度学习的 NLP，以构建更复杂的应用程序，我们将在第二天进行。
- en: In the second part of this chapter, you will learn about AWS Lambda, and how
    to integrate this service with Amazon Comprehend. You will also integrate a database
    to provide the foundation to build scalable NLP processing applications.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的第二部分，你将了解 AWS Lambda，以及如何将此服务与 Amazon Comprehend 集成。你还将集成数据库，为构建可扩展的 NLP
    处理应用程序提供基础。
- en: What is Natural Language Processing?
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是自然语言处理？
- en: Amazon Comprehend is a Natural Language Processing (NLP) service. The overall
    goal of an NLP service is to make machines understand our spoken and written language.
    Virtual Assistants, such as Alexa or Siri, use NLP to produce insights from input
    data. The input data is structured by a language, which has a unique grammar,
    syntax, and vocabulary. Thus, processing text data requires identifying the language
    first, to apply subsequent rules to identify the document's information. NLP's
    general task is to capture this information as a numeral representation. The general
    task is further specified into specific tasks, such as identifying languages,
    entities, key phrases, emotional sentiments, and topics.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Amazon Comprehend 是一种自然语言处理（NLP）服务。NLP 服务的总体目标是使机器理解我们的口语和书面语言。虚拟助手，如 Alexa
    或 Siri，使用 NLP 从输入数据中产生见解。输入数据由一种语言结构化，该语言具有独特的语法、句法和词汇。因此，处理文本数据需要首先识别语言，然后应用后续规则来识别文档的信息。NLP
    的通用任务是捕获这些信息作为数值表示。通用任务进一步具体化为特定任务，例如识别语言、实体、关键词、情感倾向和主题。
- en: Amazon Comprehend processes any text file in UTF-8 format. It uses a pre-trained
    model to examine a document or set of documents, in order to gather insights about
    the document set. Amazon continuously trains the model so that there is no need
    to provide training data.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Amazon Comprehend 处理任何 UTF-8 格式的文本文件。它使用预训练的模型来检查文档或文档集，以便收集关于文档集的见解。Amazon
    持续训练模型，因此无需提供训练数据。
- en: Using Amazon Comprehend to Inspect Text and Determine the Primary Language
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Amazon Comprehend 检查文本并确定主要语言
- en: Amazon Comprehend is used to gather insights from a variety of topics (Health,
    Media, Telecom, Education, Government, and so on) and languages in text data.
    Thus, the first step to analyze text data and utilize more complex features (such
    as topic, entity, and sentiment analysis) is to determine the dominant language.
    Determining the dominant language ensures the accuracy of more in-depth analysis.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Amazon Comprehend 用于从各种主题（健康、媒体、电信、教育、政府等）和文本数据中的语言中获取见解。因此，分析文本数据并利用更复杂的功能（如主题、实体和情感分析）的第一步是确定主导语言。确定主导语言确保了更深入分析的正确性。
- en: To examine the text in order to determine the primary language, there are two
    operations (`DetectDominantLanguage` and `BatchDetectDominantLanguage`).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 为了检查文本以确定主要语言，有两种操作（`DetectDominantLanguage` 和 `BatchDetectDominantLanguage`）。
- en: '`DetectDominantLanguage` accepts a `UTF-8` text string that is at least 20
    characters in length and must contain fewer than 5,000 bytes of UTF-8 encoded
    characters. `BatchDetectDominantLanguage` accepts an array of strings as a list.
    The list can contain a maximum of 25 documents. Each document should have at least
    20 characters, and must contain fewer than 5,000 bytes of UTF-8 encoded characters.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '`DetectDominantLanguage` 接受至少 20 个字符长度的 `UTF-8` 文本字符串，并且必须包含少于 5,000 个 UTF-8
    编码字符。`BatchDetectDominantLanguage` 接受字符串数组作为列表。该列表可以包含最多 25 个文档。每个文档应至少有 20 个字符，并且必须包含少于
    5,000 个 UTF-8 编码字符。'
- en: 'The response includes what language was identified using a two-letter code.
    The following table shows the language codes for different countries:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 响应包括使用双字母代码识别的语言。以下表格显示了不同国家的语言代码：
- en: Note
  id: totrans-21
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: Check out https://docs.aws.amazon.com/comprehend/latest/dg/how-languages.html
    for an updated list of supported languages.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 查看https://docs.aws.amazon.com/comprehend/latest/dg/how-languages.html以获取支持语言的最新列表。
- en: '![Figure 2.1: Amazon Comprehend – supported languages'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.1：Amazon Comprehend – 支持的语言'
- en: '](img/image0011.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/image0011.jpg]'
- en: 'Figure 2.1: Amazon Comprehend supported languages'
  id: totrans-25
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 2.1：Amazon Comprehend 支持的语言
- en: 'The reaction also includes a score that indicates the certainty level that
    Amazon Comprehend has that a specific language is the dominant language in the
    document (see the following screenshot). The language scores are independent of
    other scores, and so reaction does not provide the percentage of the document
    that is represented by a particular language:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 反应还包括一个分数，表示 Amazon Comprehend 对特定语言是文档中的主导语言的确定性水平（见以下截图）。语言分数与其他分数独立，因此反应不提供文档中由特定语言表示的百分比：
- en: '![Figure 2.2: Dominant language score confidence output'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.2：主导语言分数置信度输出'
- en: '](img/image002.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/image002.jpg]'
- en: 'Figure 2.2: Dominant language score confidence output'
  id: totrans-29
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 2.2：主导语言分数置信度输出
- en: 'Exercise 5: Detecting the Dominant Language Using the Command-Line Interface
    in a text document'
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习 5：使用命令行界面在文本文档中检测主导语言
- en: 'In this exercise, you will learn how to detect Comprehend''s using `detectDominantLanguage`
    function. The following steps describe how to detect the dominant language:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，你将学习如何使用 `detectDominantLanguage` 函数检测 Comprehend。以下步骤描述了如何检测主导语言：
- en: Note
  id: totrans-32
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: 'The source code is available via GitHub in the repository at: https://github.com/TrainingByPackt/Machine-Learning-with-AWS/blob/master/lesson2/topic_a/detect_dominant_languages.py.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 源代码可通过 GitHub 上的存储库获取：https://github.com/TrainingByPackt/Machine-Learning-with-AWS/blob/master/lesson2/topic_a/detect_dominant_languages.py。
- en: 'First, we must import the AWS SDK for Python (boto3) http://boto3.readthedocs.io/en/latest/:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们必须导入 Python 的 AWS SDK（boto3）http://boto3.readthedocs.io/en/latest/：
- en: '[PRE0]'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Then, import the JSON module to serialize the JSON https://docs.python.org/3.6/library/json.html
    :'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，导入 JSON 模块以序列化 JSON https://docs.python.org/3.6/library/json.html：
- en: '[PRE1]'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Replace <`input region`> with your unique region (for example, `us-east-1`).
    The following instantiates a new Comprehend client:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `<`输入区域`>` 替换为您的唯一区域（例如，`us-east-1`）。以下实例化一个新的 Comprehend 客户端：
- en: '[PRE2]'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Next, we assign English and Spanish strings to be analyzed by Comprehend:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将英语和西班牙语字符串分配给 Comprehend 进行分析：
- en: '[PRE3]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Next, we print a string to indicate the respective variable that our script
    is about to execute:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们打印一个字符串来指示我们的脚本即将执行的相关变量：
- en: '[PRE4]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Lastly, call Comprehend''s `detect_dominant_language` method with the `engligh_string`
    and `spanish_string` variables https://docs.aws.amazon.com/comprehend/latest/dg/API_DetectDominantLanguage.html
    . `json.dumps()` writes the JSON data to a Python string in the terminal:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，使用`engligh_string`和`spanish_string`变量调用Comprehend的`detect_dominant_language`方法
    https://docs.aws.amazon.com/comprehend/latest/dg/API_DetectDominantLanguage.html
    。`json.dumps()`将JSON数据写入终端中的Python字符串：
- en: '[PRE5]'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Save the changes to the file. Open a command prompt, if you haven't already,
    and activate your virtual environment.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将更改保存到文件中。如果尚未打开，请打开命令提示符并激活您的虚拟环境。
- en: 'Navigate to the `detect_dominant_languages.py` location. Type `python detect_dominant_languages.py`
    in the command prompt. Executing this command will produce the following output
    (see the following screenshot):'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到`detect_dominant_languages.py`的位置。在命令提示符中输入`python detect_dominant_languages.py`。执行此命令将生成以下输出（见以下截图）：
- en: As expected, the `english_text` string is identified as English (with the "`en`"
    language code) with a ~0.99 confidence score (see the following output).
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如预期的那样，`english_text`字符串被识别为英语（使用"`en`"语言代码），置信度分数为 ~0.99（见以下输出）。
- en: 'Also as expected, the `spanish_text` string is identified Spanish (with the
    "`es`" language code) with a ~0.99 confidence score (see the following output):'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如预期的那样，`spanish_text` 字符串被识别为西班牙语（使用 "`es`" 语言代码），置信度分数为 ~0.99（见以下输出）：
- en: '![Figure 2.3: Detecting the dominant language output – English and Spanish'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.3：检测主导语言输出 – 英语和西班牙语'
- en: '](img/image0031.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片 0031](img/image0031.jpg)'
- en: 'Figure 2.3: Detecting the dominant language output – English and Spanish'
  id: totrans-52
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 2.3：检测主导语言输出 – 英语和西班牙语
- en: 'Exercise 6: Detecting the Dominant Language in Multiple Documents by Using
    the Command-Line Interface (CLI)'
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习 6：使用命令行界面（CLI）检测多份文档中的主导语言
- en: 'In this exercise, you will learn how to detect Comprehend''s `detectDominantLanguage`
    operation for multiple documents. The following steps describe how to detect the
    dominant language:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，你将学习如何检测Comprehend的`detectDominantLanguage`操作对多份文档。以下步骤描述了如何检测主导语言：
- en: Note
  id: totrans-55
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: 'The source code is available via GitHub in the repository at: https://github.com/TrainingByPackt/Machine-Learning-with-AWS/blob/master/lesson2/topic_a/batch_detect_dominant_languages.py.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 源代码可通过GitHub上的存储库获取：https://github.com/TrainingByPackt/Machine-Learning-with-AWS/blob/master/lesson2/topic_a/batch_detect_dominant_languages.py。
- en: 'First, we import the AWS SDK for Python (boto3) http://boto3.readthedocs.io/en/latest/:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们导入Python的AWS SDK（boto3） http://boto3.readthedocs.io/en/latest/：
- en: '[PRE6]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Then, we import the JSON module to serialize the JSON https://docs.python.org/3.6/library/json.html
    :'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们导入JSON模块以序列化JSON https://docs.python.org/3.6/library/json.html ：
- en: '[PRE7]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Replace <`input region`> with your unique region (for example, ''us-east-1'').
    The following instantiates a new Comprehend client:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `<`输入区域`>` 替换为您的唯一区域（例如，`us-east-1`）。以下实例化了新的Comprehend客户端：
- en: '[PRE8]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Next, assign a list of English and Spanish strings to be analyzed by Comprehend:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，分配一个包含英语和西班牙语字符串的列表，由Comprehend进行分析：
- en: '`english_string_list` = [''Machine Learning is fascinating.'', ''Studying Artificial
    Intelligence is my passion.'']'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`english_string_list` = [''机器学习令人着迷.'', ''学习人工智能是我的热情。'']'
- en: '`spanish_string_list` = [''El aprendizaje automático es fascinante.'', ''Estudiar
    Inteligencia Artificial es mi pasión.'']'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`spanish_string_list` = [''自动学习令人着迷.'', ''学习人工智能是我的热情。'']'
- en: 'Lastly, we call Comprehend''s "`batch_detect_dominant_language`" method with
    the `engligh_string_list` and `spanish_string_list` variables https://docs.aws.amazon.com/comprehend/latest/dg/API_DetectDominantLanguage.html.
    Then, `json.dumps()` writes the JSON data to a Python string to the terminal:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们使用`engligh_string_list`和`spanish_string_list`变量调用Comprehend的"`batch_detect_dominant_language`"方法
    https://docs.aws.amazon.com/comprehend/latest/dg/API_DetectDominantLanguage.html。然后，`json.dumps()`将JSON数据写入终端中的Python字符串：
- en: '[PRE9]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The important concepts to remember are that Comprehend has the ability to detect
    different languages and can take text input as a single string or in batch format
    as
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 需要记住的重要概念是Comprehend能够检测不同的语言，并且可以接受文本输入作为单个字符串或批量格式作为
- en: a list of strings.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 一系列字符串。
- en: In this chapter, we reviewed how Comprehend's `DetectDominantLanguage` method
    is structured, and how to pass in both strings and a list of strings. Next, we
    will extract entities, phrases, and sentiments from a set of documents.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们回顾了Comprehend的`DetectDominantLanguage`方法的架构，以及如何传入字符串和字符串列表。接下来，我们将从一系列文档中提取实体、短语和情感。
- en: Extracting Information in a Set of Documents
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从一系列文档中提取信息
- en: At a business level, knowing if and why a customer is angry or happy when they
    text a Virtual assistant is extremely important, in order to retain the customer.
    At an NLP level, this requires more information to extract and a more complex
    algorithm. The additional information to extract, and quantify are `entities`,
    `key phrases`, `emotional sentiment`, and `topics`.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在业务层面，了解客户在给虚拟助手发短信时是否愤怒或高兴，以及原因，这对保留客户至关重要。在 NLP 层面，这需要提取更多信息，并使用更复杂的算法。需要提取和量化的附加信息包括
    `实体`，`关键词`，`情感倾向` 和 `主题`。
- en: Detecting Named Entities – AWS SDK for Python (boto3)
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 命名实体检测 – AWS SDK for Python (boto3)
- en: An entity is a textual reference to the unique name of a real-world object,
    such as people, places, commercial items, and precise references to measurements
    such as dates and quantities. For example, in the text "Martin lives at 27 Broadway
    St.", **Martin** might be detected as a **PERSON**, while **27 Broadway St** might
    be detected as a **LOCATION**.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 实体是对现实世界中对象唯一名称的文本引用，例如人、地点、商业物品以及对日期和数量等测量的精确引用。例如，在文本 "Martin lives at 27
    Broadway St." 中，**Martin** 可能被检测为 **PERSON**，而 **27 Broadway St** 可能被检测为 **LOCATION**。
- en: 'Entities also have a score to indicate the confidence level that the entity
    type was detected correctly. The following table shows a complete list of entity
    types and descriptions:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 实体还有一个分数来表示检测到的实体类型的置信水平。以下表格显示了实体类型和描述的完整列表：
- en: '![Figure 2.4: AWS Comprehend - entity types and descriptions'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.4：AWS Comprehend - 实体类型和描述'
- en: '](img/image004.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片 004](img/image004.jpg)'
- en: 'Figure 2.4: AWS Comprehend entity types and descriptions'
  id: totrans-78
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 2.4：AWS Comprehend 实体类型和描述
- en: DetectEntites – Input and Output
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: DetectEntites – 输入和输出
- en: 'DetectEntites takes a `LanguageCode` and string of text as an input, and then
    provides the following information about each entity within the input text: `BeginOffset`,
    `EndOffset`, `Score`, `Text`, and `Type`. The following table shows a complete
    list of AWS Comprehend DetectEntities, types, and descriptions:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: DetectEntites 接收一个 `LanguageCode` 和一段文本作为输入，然后提供关于输入文本中每个实体的以下信息：`BeginOffset`，`EndOffset`，`Score`，`Text`
    和 `Type`。以下表格显示了 AWS Comprehend DetectEntities 的完整列表，类型和描述：
- en: '![Figure 2.5: AWS Comprehend - entity types and descriptions'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.5：AWS Comprehend - 实体类型和描述'
- en: '](img/image0051.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片 0051](img/image0051.jpg)'
- en: 'Figure 2.5: AWS Comprehend entity types and descriptions'
  id: totrans-83
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: '![图 2.5：AWS Comprehend 实体类型和描述'
- en: 'Exercise 7: Determining the Named Entities in a Document'
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习 7：确定文档中的命名实体
- en: 'In this exercise, we will determine the named entities in a document. For this,
    we will use Amazon Comprehend''s `DetectEntities` operation. The following are
    the steps for detecting the Named Entities:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将确定文档中的命名实体。为此，我们将使用 Amazon Comprehend 的 `DetectEntities` 操作。以下是为检测命名实体所采取的步骤：
- en: Note
  id: totrans-86
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: 'The source code is available via GitHub in the repository at: https://github.com/TrainingByPackt/Machine-Learning-with-AWS/blob/master/lesson2/topic_b/detect_entities.py.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 源代码可通过 GitHub 在以下仓库中获取：https://github.com/TrainingByPackt/Machine-Learning-with-AWS/blob/master/lesson2/topic_b/detect_entities.py.
- en: Navigate to the `detect_entities.py` location, replace <`input region`> with
    your specific region, and save the file.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到 `detect_entities.py` 位置，将 `<input region>` 替换为您的特定区域，并保存文件。
- en: 'Now, import the AWS SDK for python (boto3) https://boto3.amazonaws.com/v1/documentation/api/latest/index.html
    by using the following command:'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，通过以下命令导入 AWS SDK for python (boto3) https://boto3.amazonaws.com/v1/documentation/api/latest/index.html：
- en: '[PRE10]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now, import the `JSON` module to serialize `JSON` from https://docs.python.org/3.6/library/json.html
    by using the following command:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，通过以下命令导入 `JSON` 模块以序列化 `JSON` https://docs.python.org/3.6/library/json.html：
- en: '[PRE11]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now, instantiate a new Comprehend client:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，实例化一个新的 Comprehend 客户端：
- en: '[PRE12]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Now, after instantiating a new Comprehend, provide `english_string = "I study
    Machine Learning in Seattle on Thursday.":`
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在实例化一个新的 Comprehend 之后，提供 `english_string = "I study Machine Learning in
    Seattle on Thursday.":`
- en: '[PRE13]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now, `json.dumps()` writes JSON data to a Python string:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，`json.dumps()` 将 JSON 数据写入 Python 字符串：
- en: '[PRE14]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Run the code by executing the `detect_entities.py` command with `python`. The
    output of the preceding code is shown in the following screenshot:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过执行 `detect_entities.py` 命令并使用 `python` 运行代码。前面代码的输出如下截图所示：
- en: '![Figure 2.6: AWS Comprehend – DetectEntities output'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.6：AWS Comprehend – DetectEntities 输出'
- en: '](img/image006.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片 006](img/image006.jpg)'
- en: 'Figure 2.6: AWS Comprehend DetectEntities output'
  id: totrans-102
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 2.6：AWS Comprehend DetectEntities 输出
- en: 'The confidence scores were both ~0.99, as the inputs were simple examples.
    As expected, **Seattle** was detected as a **LOCATION**, and **Thursday** was
    detected as the **DATE**:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 由于输入是简单的示例，置信度分数都是 ~0.99。正如预期的那样，**西雅图**被检测为**地点**，而**星期四**被检测为**日期**：
- en: '![Figure 2.7: AWS Comprehend - BeginOffset and EndOffset review'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.7：AWS Comprehend - BeginOffset 和 EndOffset 检查'
- en: '](img/image0071.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image0071.jpg)'
- en: 'Figure 2.7: AWS Comprehend BeginOffset and EndOffset review'
  id: totrans-106
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 2.7：AWS Comprehend BeginOffset 和 EndOffset 检查
- en: DetectEntities in a Set of Documents (Text Files)
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在一组文档（文本文件）中检测实体
- en: 'We are now going to extract entities from a set of documents (text files).
    Navigate to the https://github.com/TrainingByPackt/Machine-Learning-with-AWS/blob/master/lesson2/topic_b/detect_entities_from_documents.py
    location, replace ''<`input region`>'' with your specific region, and save the
    file. Run the code by executing the command with `python detect_key_phrases.py`:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将从一个文档集（文本文件）中提取实体。导航到 https://github.com/TrainingByPackt/Machine-Learning-with-AWS/blob/master/lesson2/topic_b/detect_entities_from_documents.py
    位置，将 `<`input region`>` 替换为您的特定区域，并保存文件。通过执行以下命令运行代码：`python detect_key_phrases.py`：
- en: '![Figure 2.8: detectKeyPhrases output'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.8：detectKeyPhrases 输出'
- en: '](img/image008.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image008.jpg)'
- en: 'Figure 2.8: DetectKeyPhrases output'
  id: totrans-111
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 2.8：DetectKeyPhrases 输出
- en: Detecting Key Phrases
  id: totrans-112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 检测关键短语
- en: A key phrase for AWS is analogous to a noun phrase, which represents an actual
    thing. In English when we put together different words that represent one concrete
    idea we call it a noun phrase. For example, "**A fast machine**" is a noun phrase
    because it consists of "**A**", the article, "**fast**", an adjective, and "**machine**"
    which is a noun. AWS looks for appropriate word combinations and gives scores
    that indicates the confidence that a string is actually a noun phrase.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 AWS 来说，一个关键短语相当于一个名词短语，它代表一个实际事物。在英语中，当我们把代表一个具体想法的不同单词组合在一起时，我们称之为名词短语。例如，"**一台快速的机器**"
    是一个名词短语，因为它由 "**一台**"，冠词，"**快速**"，形容词，和 "**机器**"，一个名词组成。AWS 寻找合适的词组组合，并给出分数，表示字符串实际上是一个名词短语的置信度。
- en: 'Exercise 8: Determining the Key Phrase Detection.'
  id: totrans-114
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习 8：确定关键短语检测。
- en: 'In this exercise, we will determine the key phrase detection. To do so we will
    use Amazon Comprehend''s `DetectKeyPhrase` operation. The following are the steps
    for detecting the Named Entities:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将确定关键短语检测。为此，我们将使用 Amazon Comprehend 的 `DetectKeyPhrase` 操作。以下是为检测命名实体的步骤：
- en: Note
  id: totrans-116
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: 'The source code is available via GitHub in the repository at: https://github.com/TrainingByPackt/Machine-Learning-with-AWS/blob/master/lesson2/topic_b/detect_key_phrases.py.'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 源代码可通过 GitHub 在以下存储库中获取：https://github.com/TrainingByPackt/Machine-Learning-with-AWS/blob/master/lesson2/topic_b/detect_key_phrases.py。
- en: 'Navigate to the `detect_key_phrases.py` location, replace `<input region>`
    with your specific region, and save the file. Import the AWS SDK for python (boto3)
    http://boto3.readthedocs.io/en/latest/ by using the following command:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到 `detect_key_phrases.py` 位置，将 `<input region>` 替换为您的特定区域，并保存文件。通过以下命令导入 AWS
    SDK for python (boto3) http://boto3.readthedocs.io/en/latest/：
- en: '[PRE15]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Now, import the JSON module to serialize the JSON from https://docs.python.org/3.6/library/json.html
    by using the following command:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，导入 JSON 模块以使用以下命令序列化来自 https://docs.python.org/3.6/library/json.html 的 JSON：
- en: '[PRE16]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Now, instantiate a new Comprehend client by using the following code:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，使用以下代码创建一个新的 Comprehend 客户端：
- en: '[PRE17]'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Now, provide **English** text to analyze, using the following code:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，提供要分析的 **英文** 文本，使用以下代码：
- en: '[PRE18]'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Run the code by executing the command with `python detect_key_phrases.py`.
    You will see the following output:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过执行以下命令运行代码：`python detect_key_phrases.py`。您将看到以下输出：
- en: '![Figure 2.9: AWS Comprehend – DetectKeyPhrases output'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.9：AWS Comprehend – DetectKeyPhrases 输出'
- en: '](img/image0081.jpg)'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image0081.jpg)'
- en: 'Figure 2.9: AWS Comprehend DetectKeyPhrases output'
  id: totrans-129
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 2.9：AWS Comprehend DetectKeyPhrases 输出
- en: Detecting Sentiments
  id: totrans-130
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 检测情感
- en: Amazon Comprehend can be used to determine the sentiment of a document. You
    can determine whether the sentiment is positive, negative, neutral, or mixed.
    For example, you can use sentiment analysis to determine the sentiments of comments
    on a blog post, to determine whether your readers liked the post.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: Amazon Comprehend 可以用来确定文档的情感。您可以确定情感是积极的、消极的、中性的还是混合的。例如，您可以使用情感分析来确定博客文章的评论情感，以确定您的读者是否喜欢该文章。
- en: 'Exercise 9: Detecting Sentiment Analysis'
  id: totrans-132
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习 9：检测情感分析
- en: 'In this exercise, We will determine the sentiment analysis. To do so, we will
    use Amazon Comprehend''s `DetectSentiment` operation. The following are the steps
    for detecting Sentiment Analysis:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将确定情感分析。为此，我们将使用Amazon Comprehend的`DetectSentiment`操作。以下是检测情感分析的步骤：
- en: Note
  id: totrans-134
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: 'The source code is available via Github in the repository at: https://github.com/TrainingByPackt/Machine-Learning-with-AWS/blob/master/lesson2/topic_b/detect_sentiment.py.'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 源代码可通过以下GitHub仓库中的链接获取：https://github.com/TrainingByPackt/Machine-Learning-with-AWS/blob/master/lesson2/topic_b/detect_sentiment.py。
- en: 'Navigate to the `detect_sentiment.py` location, replace ''<`input region`>''
    with your specific region, and save the file. Import the `AWS SDK` for Python
    (boto3) from http://boto3.readthedocs.io/en/latest/ by using the following command:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到`detect_sentiment.py`位置，将`<`input region`>`替换为您的特定区域，并保存文件。通过以下命令从http://boto3.readthedocs.io/en/latest/导入Python的`AWS
    SDK`（boto3）：
- en: '[PRE19]'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Now, import the `JSON` module to serialize JSON from https://docs.python.org/3.6/library/json.html
    by using the following command:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，导入`JSON`模块以使用以下命令序列化来自https://docs.python.org/3.6/library/json.html的JSON：
- en: '[PRE20]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Now, instantiate a new comprehend client, using the following code:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，使用以下代码实例化一个新的comprehend客户端：
- en: '[PRE21]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Then, provide a text string to analyze, using the following code:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，提供要分析的文本字符串，使用以下代码：
- en: '[PRE22]'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Run the code by executing the command with: `python detect_seniment.py`. The
    output is shown as follows:'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过执行以下命令运行代码：`python detect_seniment.py`。输出如下所示：
- en: '![Figure 2.10: AWS Comprehend – DetectSentiment output'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '![图2.10：AWS Comprehend – DetectSentiment输出'
- en: '](img/image0091.jpg)'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/image0091.jpg]'
- en: 'Figure 2.10: AWS Comprehend – DetectSentiment output'
  id: totrans-147
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图2.10：AWS Comprehend – DetectSentiment输出
- en: Setting up a Lambda function and Analyzing Imported Text Using Comprehend
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置Lambda函数并使用Comprehend分析导入的文本
- en: In this topic, we will be integrating AWS Lambda functions to Comprehend, which
    provides a more powerful, scalable infrastructure. You can use AWS Lambda to run
    your code in response to events, such as changes to data in an Amazon S3 Bucket.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个主题中，我们将集成AWS Lambda函数到Comprehend，这提供了一个更强大、可扩展的基础设施。您可以使用AWS Lambda在事件（如Amazon
    S3桶中的数据更改）发生时运行您的代码。
- en: Executing code in response to events provides a real-world solution for developing
    scalable software architecture. Overall, this increases our data pipeline and
    provides the ability to handle more complex Big Data volumes and NLP operations.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 通过对事件执行代码提供了一种开发可扩展软件架构的实用解决方案。总体而言，这增加了我们的数据管道，并提供了处理更复杂的Big Data体积和NLP操作的能力。
- en: What is AWS Lambda?
  id: totrans-151
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 什么是AWS Lambda？
- en: 'AWS Lambda is a compute service that runs code without provisioning or managing
    servers. AWS Lambda executes the code only when needed, and scales automatically.
    AWS Lambda runs your code on high availability compute infrastructure, which performs
    the administration of the compute service. More specifically, AWS Lambda performs
    the following: server and operating system maintenance, capacity provisioning
    and automatic scaling, code monitoring, and logging.'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: AWS Lambda是一种无需配置或管理服务器的计算服务。AWS Lambda仅在需要时执行代码，并自动扩展。AWS Lambda在高度可用的计算基础设施上运行您的代码，该基础设施执行计算服务的管理。更具体地说，AWS
    Lambda执行以下操作：服务器和操作系统维护、容量配置和自动扩展、代码监控和日志记录。
- en: Overall, the goal of a Lambda is to make short, simple, modular code segments
    that you can tie together into a larger processing infrastructure.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 总体而言，Lambda的目标是创建短小、简单、模块化的代码段，您可以将其组合成更大的处理基础设施。
- en: What does AWS Lambda do?
  id: totrans-154
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: AWS Lambda做什么？
- en: Lambda allows users to run small segments of code (Java, Node, or Python) to
    complete a specific task. These specific tasks can be storing and then executing
    changes to your AWS setup, or responding to events in S3 (we will explore the
    latter later on in this topic). Before Lambda, you would typically need a separate
    EC2 server to run your entire code; however, Lambda allows small segments of the
    code to run without the need for EC2.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: Lambda允许用户运行小段代码（Java、Node或Python）以完成特定任务。这些特定任务可以是存储并执行对AWS设置的更改，或者响应S3中的事件（我们将在本主题的后面部分探讨这一点）。在Lambda之前，您通常需要一个单独的EC2服务器来运行整个代码；然而，Lambda允许代码的小段运行，而无需EC2。
- en: Lambda Function Anatomy
  id: totrans-156
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Lambda函数结构
- en: AWS Lambda provides two options for implementing Python code. First, you can
    upload a complete Python code file. Second, you can use the Lambda function editor
    entirely in-line, which means that you can enter and modify the code directly,
    without having to upload any files to AWS. The code that you enter will be executed
    when the Lambda function is invoked. The second option will allow for easier testing,
    so we will use it.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: AWS Lambda 提供了两种实现 Python 代码的选项。首先，您可以上传一个完整的 Python 代码文件。其次，您可以使用 Lambda 函数编辑器完全内联，这意味着您可以直接输入和修改代码，而无需将任何文件上传到
    AWS。您输入的代码将在 Lambda 函数被调用时执行。第二种选项将允许更容易地进行测试，因此我们将使用它。
- en: 'Let''s examine the structure of the Lambda function:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查 Lambda 函数的结构：
- en: 'When you create a function (for example, `s3_trigger`), AWS creates a folder
    named the same, with a Python file named `Lambda_function.py` within the `Lambda_handler`
    function, which is the entry point of our Lambda function. The entry point takes
    two parameters as arguments:'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当您创建一个函数（例如，`s3_trigger`）时，AWS 会创建一个同名文件夹，并在 `Lambda_handler` 函数中包含一个名为 `Lambda_function.py`
    的 Python 文件，这是我们的 Lambda 函数的入口点。入口点接受两个参数作为参数：
- en: The event argument provides the value of the payload, which is sent to the function
    from the `calling` process. It typically takes the form of a Python `dict` type,
    although it could also be one of list, `str`, `int`, `float`, or `NoneType`.
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 事件参数提供了有效负载的值，该有效负载是从 `调用` 进程发送到函数的。它通常采用 Python `dict` 类型的形式，尽管它也可能是列表、`str`、`int`、`float`
    或 `NoneType` 之一。
- en: The context argument is of the type **LambdaContext** and contains runtime information.
    You will be using this parameter for an exercise in a later section. The return
    value of the function can be any type that is JSON serializable. This value gets
    returned to the calling application, after serializing.
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 上下文参数是 **LambdaContext** 类型，包含运行时信息。您将在稍后的练习中使用此参数。函数的返回值可以是任何可 JSON 序列化的类型。此值在序列化后返回给调用应用程序。
- en: 'We will incorporate Lambda, S3, and Amazon Comprehend, in order to automatically
    perform document analysis when a text document is uploaded to S3\. The architecture
    of a Lambda function is as follows:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将结合使用 Lambda、S3 和 Amazon Comprehend，以便在文本文档上传到 S3 时自动执行文档分析。Lambda 函数的架构如下：
- en: '![ Figure 2.11: Architecture diagram'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.11: 架构图]'
- en: '](img/image010.jpg)'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/image010.jpg]'
- en: 'Figure 2.11: Architecture diagram'
  id: totrans-165
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: '![图 2.11: 架构图]'
- en: 'Exercise 10: Setting up a Lambda function for S3'
  id: totrans-166
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习 10：为 S3 设置 Lambda 函数
- en: 'In this exercise, we will integrate the following AWS services: S3, Lambda,
    and Amazon Comprehend. For performing this exercise, the architecture should be
    recollected. Upload a file (`test_s3trigger_configured.txt`) to S3 and view the
    results from Comprehend''s analysis. The following are the steps for setting up
    a Lambda function.'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将集成以下 AWS 服务：S3、Lambda 和 Amazon Comprehend。为了执行此练习，应记住架构。将文件 (`test_s3trigger_configured.txt`)
    上传到 S3 并查看 Comprehend 的分析结果。以下是为设置 Lambda 函数的步骤。
- en: '**Creating the S3 Bucket**'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '**创建 S3 存储桶**'
- en: 'First, navigate to the Amazon S3 service, https://console.aws.amazon.com/s3/,
    and click on **Create bucket**:![Figure 2.12: S3 Bucket creation for the Lambda
    trigger'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '首先，导航到 Amazon S3 服务，https://console.aws.amazon.com/s3/，并点击 **创建存储桶**：![图 2.12:
    为 Lambda 触发器创建 S3 存储桶'
- en: '](img/image0111.jpg)'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![img/image0111.jpg]'
- en: 'Figure 2.12: S3 Bucket creation for the Lambda trigger'
  id: totrans-171
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: '![图 2.12: 为 Lambda 触发器创建 S3 存储桶]'
- en: 'For the Bucket name, type `aws-ml-s3-trigger`, and then clickon **Create**:![Figure
    2.13: Creating an S3 Bucket'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '对于存储桶名称，键入 `aws-ml-s3-trigger`，然后点击 **创建**：![图 2.13: 创建 S3 存储桶'
- en: '](img/image012.jpg)'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![img/image012.jpg]'
- en: 'Figure 2.13: Creating an S3 Bucket'
  id: totrans-174
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: '![图 2.13: 创建 S3 存储桶]'
- en: 'Your `Bucket` will be created, and you will be redirected to the **Bucket list**:![Figure
    2.14: S3 Bucket list screen'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '您的 `Bucket` 将被创建，您将被重定向到 **存储桶列表**：![图 2.14: S3 存储桶列表屏幕'
- en: '](img/image0131.jpg)'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![img/image0131.jpg]'
- en: 'Figure 2.14: S3 Bucket list screen'
  id: totrans-177
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: '![图 2.14: S3 存储桶列表屏幕]'
- en: 'Next, navigate to https://console.aws.amazon.com/Lambda/ and click on **Create
    a function**:![Figure 2.15: AWS Lambda home screen.'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '接下来，导航到 https://console.aws.amazon.com/Lambda/ 并点击 **创建函数**：![图 2.15: AWS Lambda
    主屏幕。'
- en: '](img/image014.jpg)'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![img/image014.jpg]'
- en: 'Figure 2.15: AWS Lambda home screen.'
  id: totrans-180
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: '![图 2.15: AWS Lambda 主屏幕。'
- en: 'Choose Author from scratch from the options. For Name, `type s3_trigger`:![Figure
    2.16: AWS Lambda – Creating a function with the “author from scratch” selection'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '从选项中选择从头开始创建作者。对于名称，`type s3_trigger`：![图 2.16: AWS Lambda – 使用“从头开始创建作者”选择创建函数'
- en: '](img/image0151.jpg)'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![img/image0151.jpg]'
- en: 'Figure 2.16: AWS Lambda – Creating a function with the "author from scratch"
    selection'
  id: totrans-183
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图2.16：AWS Lambda – 使用“从头开始创建”选项创建函数
- en: 'For the runtime options, choose `Python 3.6` from the list:![Figure 2.17: AWS
    Lambda – Python 3.6 selection'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于运行时选项，从列表中选择`Python 3.6`：![图2.17：AWS Lambda – Python 3.6选择
- en: '](img/image016.jpg)'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![img/image016.jpg](img/image016.jpg)'
- en: 'Figure 2.17: AWS Lambda – Python 3.6 selection'
  id: totrans-186
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图2.17：AWS Lambda – Python 3.6选择
- en: 'For the Role field, choose `s3TriggerRole` in the Role name field. Then, click
    on the `Lambda function` in AWS:![Figure 2.18: AWS Lambda – Create function screen'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于角色字段，在角色名称字段中选择`s3TriggerRole`。然后，点击AWS中的`Lambda函数`：![图2.18：AWS Lambda – 创建函数屏幕
- en: '](img/image0171.jpg)'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![img/image0171.jpg](img/image0171.jpg)'
- en: 'Figure 2.18: AWS Lambda – Create function screen'
  id: totrans-189
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图2.18：AWS Lambda – 创建函数屏幕
- en: 'Then, click on the drop-down menu under **Policy templates**:![Figure 2.19:
    Policy template selection dropdown'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，点击**策略模板**下的下拉菜单：![图2.19：策略模板选择下拉
- en: '](img/image018.jpg)'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![img/image018.jpg](img/image018.jpg)'
- en: 'Figure 2.19: Policy template selection drop-down menu'
  id: totrans-192
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图2.19：策略模板选择下拉菜单
- en: 'Select **Amazon S3** object read-only permissions:![Figure 2.20: Amazon S3
    object read-only permissions selection'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**Amazon S3**对象的只读权限：![图2.20：Amazon S3对象只读权限选择
- en: '](img/image0191.jpg)'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![img/image0191.jpg](img/image0191.jpg)'
- en: 'Figure 2.20: Amazon S3 object read-only permissions selection'
  id: totrans-195
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图2.20：Amazon S3对象只读权限选择
- en: 'Then, click on the `Lambda function`:![Figure 2.21: Clicking on Create function'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，点击`Lambda函数`：![图2.21：点击创建函数
- en: '](img/image020.jpg)'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![img/image020.jpg](img/image020.jpg)'
- en: 'Figure 2.21: Clicking on Create function'
  id: totrans-198
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图2.21：点击创建函数
- en: Note
  id: totrans-199
  prefs:
  - PREF_IND
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: If you receive a `NoSuchEntity` error, this is a temporary warning that occurs
    when Amazon creates the service role for the `s3_trigger`. AWS has a reference
    to the possible temporary issues under the Roles heading. This will not affect
    your ability to continue with the chapter. Refresh your screen, and in a few minutes
    the warning message should disappear.
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你收到`NoSuchEntity`错误，这是当Amazon为`s3_trigger`创建服务角色时出现的临时警告。AWS在“角色”标题下有关于可能临时问题的参考。这不会影响你继续本章的能力。刷新你的屏幕，几分钟后警告信息应该会消失。
- en: 'You will know that the issues have been resolved when the `Logs` service becomes
    available as a resource for the function''s role:![Figure 2.22: Amazon CloudWatch
    Logs'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当`Logs`服务作为函数角色的资源可用时，你会知道问题已经解决：![图2.22：Amazon CloudWatch日志
- en: '](img/image0211.jpg)'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![img/image0211.jpg](img/image0211.jpg)'
- en: 'Figure 2.22: Amazon CloudWatch Logs'
  id: totrans-203
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图2.22：Amazon CloudWatch日志
- en: 'You should see a configuration screen, as follows:![Figure 2.23: AWS Lambda
    - Successful s3_trigger created verification screen'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你应该看到一个配置屏幕，如下所示：![图2.23：AWS Lambda - 成功创建s3_trigger的验证屏幕
- en: '](img/image022.jpg)'
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![img/image022.jpg](img/image022.jpg)'
- en: 'Figure 2.23: AWS Lambda successful s3_trigger verification screen'
  id: totrans-206
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图2.23：AWS Lambda成功s3_trigger验证屏幕
- en: 'Now, let''s add S3 as a trigger. Under **Add triggers**, scroll to S3:![Figure
    2.24: AWS Lambda – Adding S3 as a trigger selection screen'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们添加S3作为触发器。在**添加触发器**下，滚动到S3：![图2.24：AWS Lambda – 添加S3作为触发器选择屏幕
- en: '](img/image0231.jpg)'
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![img/image0231.jpg](img/image0231.jpg)'
- en: 'Figure 2.24: AWS Lambda – Adding S3 as a trigger selection screen'
  id: totrans-209
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图2.24：AWS Lambda – 添加S3作为触发器选择屏幕
- en: 'Click `S3,` and it will auto-populate under the `s3_trigger`. After clicking
    `S3`, your screen will look as follows:'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击`S3`，它将自动填充在`s3_trigger`下。点击`S3`后，你的屏幕将如下所示：
- en: '![Figure 2.25: Aws Lambda – S3 trigger selection, configuration required'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: '![图2.25：Aws Lambda – S3触发器选择，需要配置'
- en: '](img/image024.jpg)'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/image024.jpg](img/image024.jpg)'
- en: 'Figure 2.25: AWS Lambda – S3 trigger selection, configuration required'
  id: totrans-213
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图2.25：AWS Lambda – S3触发器选择，需要配置
- en: 'Exercise 11: Configuring the Trigger for an S3 Bucket'
  id: totrans-214
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习11：配置S3存储桶的触发器
- en: 'In this exercise, we will configure the trigger for the `Bucket` created in
    the preceding exercise. To configure the trigger, follow these steps:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将配置前面练习中创建的`Bucket`的触发器。要配置触发器，请按照以下步骤操作：
- en: 'Scroll down the screen to the configure triggers section from `aws-ml-s3-trigger`.:![Figure
    2.26: AWS Lambda – Configuring S3 trigger, S3 Bucket selection'
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将屏幕向下滚动到`aws-ml-s3-trigger`的配置触发器部分：![图2.26：AWS Lambda – 配置S3触发器，S3存储桶选择
- en: '](img/image0251.jpg)'
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![img/image0251.jpg](img/image0251.jpg)'
- en: 'Figure 2.26: AWS Lambda – Configuring S3 trigger, S3 Bucket selection'
  id: totrans-218
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图2.26：AWS Lambda – 配置S3触发器，S3存储桶选择
- en: 'Leave the remaining default settings. Next, scroll down the screen and click on **Add**:![Figure
    2.27: AWS Lambda – Adding the S3 Bucket as a trigger'
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保持其余默认设置。接下来，将屏幕向下滚动并点击**添加**：![图2.27：AWS Lambda – 添加S3存储桶作为触发器
- en: '](img/image0271.jpg)'
  id: totrans-220
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![img/image0271.jpg](img/image0271.jpg)'
- en: 'Figure 2.27: AWS Lambda – Adding the S3 Bucket as a trigger'
  id: totrans-221
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图2.27：AWS Lambda – 将S3存储桶添加为触发器
- en: The next step is to click on the **Save** button:![AWS Lambda – Saving the S3
    trigger
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是点击**保存**按钮：![AWS Lambda – 保存S3触发器
- en: '](img/image0272.jpg)'
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/image0272.jpg)'
- en: AWS Lambda – Saving the S3 trigger
  id: totrans-224
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: AWS Lambda – 保存S3触发器
- en: 'Next, scroll down the screen to the **Function code** section. The default
    code will be the same as or similar to, the following:![Figure 2.28: AWS Lambda
    – the default Lambda_function screen'
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，将屏幕向下滚动到**函数代码**部分。默认代码将与以下代码相同或类似：![图2.28：AWS Lambda – 默认Lambda_function屏幕
- en: '](img/image028.jpg)'
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/image028.jpg)'
- en: 'Figure 2.28: AWS Lambda The default Lambda_function screen'
  id: totrans-227
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图2.28：AWS Lambda 默认Lambda_function屏幕
- en: Here, we can enter and edit our code entirely within the Lambda function screen
    (as long as the Code entry type is set to Edit code inline, which is the default
    value in the drop-down menu).
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，我们可以在Lambda函数屏幕内完全输入和编辑我们的代码（只要代码输入类型设置为“编辑内联代码”，这是下拉菜单中的默认值）。
- en: Note
  id: totrans-229
  prefs:
  - PREF_IND
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: For this step, you may either follow along and type in the code, or obtain it
    from the source code folder at https://github.com/TrainingByPackt/Machine-Learning-with-AWS/blob/master/lesson2/topic_c/s3_trigger.py
    file.
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于这一步，你可以跟随操作并输入代码，或者从https://github.com/TrainingByPackt/Machine-Learning-with-AWS/blob/master/lesson2/topic_c/s3_trigger.py文件中的源代码文件夹获取代码。
- en: 'First, we import the **AWS SDK** for Python (boto3) http://boto3.readthedocs.io/en/latest/:'
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们导入Python的**AWS SDK**（boto3）http://boto3.readthedocs.io/en/latest/：
- en: '[PRE23]'
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Next, create a function that takes two parameters-event and context:'
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，创建一个接受两个参数-事件和上下文的函数：
- en: '[PRE24]'
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Next, create the s3 client object:'
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，创建s3客户端对象：
- en: '[PRE25]'
  id: totrans-236
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Add an `if` event to check whether an event occurs.
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个`if`事件来检查是否发生事件。
- en: 'Next, replace `<input Bucket name>` with the Bucket you created (`aws-ml-s3-trigger`,
    in my example):'
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，将`<input Bucket name>`替换为你创建的Bucket（在我的例子中是`aws-ml-s3-trigger`）：
- en: '[PRE26]'
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Next, access the event `Records` first index to obtain the text file object:'
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，首先访问事件`Records`的第一个索引以获取文本文件对象：
- en: '[PRE27]'
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Next, assign the text `filename` to a variable, and print the filename:'
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，将文本`filename`分配给一个变量，并打印文件名：
- en: '[PRE28]'
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Next, create the file object by getting the Bucket and key:'
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，通过获取Bucket和key来创建文件对象：
- en: '[PRE29]'
  id: totrans-245
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Assign the text to the `body_str_obj` variable:'
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文本分配给`body_str_obj`变量：
- en: '[PRE30]'
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Replace <`input region name`> with your specific region. In addition, create
    the comprehend variable (us-east-1, in my example):'
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将<`input region name`>替换为你的特定区域。此外，创建comprehend变量（在我的例子中是us-east-1）：
- en: '[PRE31]'
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The next three lines of code call the respective comprehend functions to detect
    the sentiment, entities, and key phrases from the text document. Then, the output
    is printed to the console:'
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来的三行代码调用相应的comprehend函数来检测文本文档中的情感、实体和关键短语。然后，输出打印到控制台：
- en: '[PRE32]'
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The final statement returns the string ''Hello from Lambda'', like so:'
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后一条语句返回字符串'Hello from Lambda'，如下所示：
- en: '[PRE33]'
  id: totrans-253
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Now, click on the **Save** button:'
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，点击**保存**按钮：
- en: '![Figure 2.29: AWS Lambda – Save screen'
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '![图2.29：AWS Lambda – 保存屏幕'
- en: '](img/image0291.jpg)'
  id: totrans-256
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/image0291.jpg)'
- en: 'Figure 2.29: AWS Lambda – Save screen'
  id: totrans-257
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图2.29：AWS Lambda – 保存屏幕
- en: From this exercise, the `s3_trigger` function has access to S3, but not Amazon
    Comprehend. We need to attach a policy to the `s3_trigger` function to allow it
    to access Amazon Comprehend to execute the text analysis functions (`detect_sentiment`,
    `detect_entities`, and `detect_key_phrases`).
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这个练习，`s3_trigger`函数可以访问S3，但不能访问Amazon Comprehend。我们需要将策略附加到`S3_trigger`函数上，以便允许它访问Amazon
    Comprehend以执行文本分析函数（`detect_sentiment`、`detect_entities`和`detect_key_phrases`）。
- en: 'Exercise 12: Assigning Policies to S3_trigger to Access Comprehend'
  id: totrans-259
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习12：将策略分配给S3_trigger以访问Comprehend
- en: 'In this exercise, we will attach the policies to the `S3_trigger` function,
    in order to allow it to access comprehend. The steps for completion for assigning
    the policies are as follows:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将策略附加到`S3_trigger`函数上，以便允许它访问comprehend。分配策略的完成步骤如下：
- en: 'Navigate to the Identity and Access Management dashboard at https://console.aws.amazon.com/iam:![Figure
    2.30: IAM dashboard](img/image030.jpg)'
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到https://console.aws.amazon.com/iam的“身份和访问管理”仪表板：![图2.30：IAM仪表板](img/image030.jpg)
- en: 'Figure 2.30: IAM dashboard'
  id: totrans-262
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图2.30：IAM仪表板
- en: 'Now, once you get to the IAM dashboard, click on **Roles**:![Figure 2.31: Left-hand
    side of the IAM dashboard'
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，一旦你到达IAM仪表板，点击**角色**：![图2.31：IAM仪表板的左侧
- en: '](img/image0311.jpg)'
  id: totrans-264
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/image0311.jpg)'
- en: 'Figure 2.31: Left-hand side of the IAM dashboard'
  id: totrans-265
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图2.31：IAM仪表板的左侧
- en: 'Now, the screen will be populated with the Role list. Click on `s3TriggerRole`
    in the Role list:![Figure 2.32: Role list – selecting s3TriggerRole'
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，屏幕将填充角色列表。在角色列表中点击`s3TriggerRole`：![图2.32：角色列表 – 选择s3TriggerRole
- en: '](img/image032.jpg)'
  id: totrans-267
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片](img/image032.jpg)'
- en: 'Figure 2.32: Role list Selecting s3TriggerRole'
  id: totrans-268
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图2.32：角色列表选择s3TriggerRole
- en: 'The option of `s3TriggerRole` will be enabled. Then, click on **Attach policies**:![Figure
    2.33: Permissions tab for s3TriggerRole'
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`s3TriggerRole`的选项将被启用。然后，单击**附加策略**：![图2.33：s3TriggerRole的权限选项卡'
- en: '](img/image0331.jpg)'
  id: totrans-270
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片](img/image0331.jpg)'
- en: 'Figure 2.33: Permissions tab for s3TriggerRole'
  id: totrans-271
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图2.33：s3TriggerRole的权限选项卡
- en: 'Type `Comprehend` to filter the policies. Then, click the checkbox next to
    `ComprehendFullAccess`:![Figure 2.34: ComprehendFullAccess policy selection'
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入`Comprehend`以过滤策略。然后，点击`ComprehendFullAccess`旁边的复选框：![图2.34：ComprehendFullAccess策略选择
- en: '](img/image034.jpg)'
  id: totrans-273
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片](img/image034.jpg)'
- en: 'Figure 2.34: ComprehendFullAccess policy selection'
  id: totrans-274
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图2.34：ComprehendFullAccess策略选择
- en: 'Once you have selected the checkbox, click on **Attach policy** (located in
    the lower right-hand side of the screen):![Figure 2.35: Attaching the selected
    policies'
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦选中复选框，请单击屏幕右下角的**附加策略**：![图2.35：附加所选策略
- en: '](img/image0351.jpg)'
  id: totrans-276
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片](img/image0351.jpg)'
- en: 'Figure 2.35: Attaching the selected policies'
  id: totrans-277
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图2.35：附加所选策略
- en: 'You will be redirected to the `s3TriggerRole` screen, and you will receive
    the following message:'
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将被重定向到`s3TriggerRole`屏幕，并且您将收到以下消息：
- en: '![Figure 2.36: Successfully attached polices message'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: '![图2.36：成功附加策略消息'
- en: '](img/image036.jpg)'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/image036.jpg)'
- en: 'Figure 2.36: Successfully attached polices message'
  id: totrans-281
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图2.36：成功附加策略消息
- en: 'Activity 3: Integrating Lambda with Amazon Comprehend to Perform Text Analysis'
  id: totrans-282
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 活动三：将Lambda与Amazon Comprehend集成以执行文本分析
- en: In this activity, we will integrate the Lambda function with Comprehend to perform
    text analysis (`detect_sentiment`, `detect_entities`, and `detect_key_phrases`)
    when a document is uploaded to S3.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 在此活动中，我们将Lambda函数与Comprehend集成，以便在文档上传到S3时执行文本分析（检测情感、检测实体和检测关键短语）。
- en: 'Suppose that you are an entrepreneur creating a chatbot. You have identified
    a business topic and the corresponding text documents, with content that will
    allow the chatbot to make your business successful. Your next step is to integrate
    the Lambda function with Comprehend, for sentiment, key phrases, and entities.
    To ensure that this happens correctly, you will need to have `test_s3trigger_configured.txt`.
    Before you execute the `s3_trigger`, consider the output, based on the following
    aspects of the text: sentiment (positive, negative, or neutral), entities (quantity,
    person, place, and so on), and key phrases:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你是一位正在创建聊天机器人的企业家。你已经确定了一个商业主题和相应的文本文档，其中包含的内容可以使你的业务成功。你的下一步是将Lambda函数与Comprehend集成，以进行情感、关键短语和实体的分析。为了确保正确执行，你需要有`test_s3trigger_configured.txt`。在执行`s3_trigger`之前，请考虑以下文本的以下方面的输出：情感（正面、负面或中性）、实体（数量、人物、地点等）和关键短语：
- en: First, navigate to the `S3_trigger` Lambda function.
  id: totrans-285
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，导航到`S3_trigger` Lambda函数。
- en: Add `test_s3trigger_configured.txt` to the S3 Bucket, in order to verify the
    Lambda `S3_trigger` function.
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`test_s3trigger_configured.txt`添加到S3存储桶中，以验证Lambda `S3_trigger`函数。
- en: Now, upload the file into the Bucket and monitor the file.
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，将文件上传到存储桶并监控该文件。
- en: Next, click on View logs in the `CloudWatch` by using the log stream.
  id: totrans-288
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，使用日志流在`CloudWatch`中单击“查看日志”。
- en: Now, expand the output in a text format.
  id: totrans-289
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，以文本格式展开输出。
- en: 'The following will be the output:'
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下将是输出结果：
- en: '`Sentiment_response` -> Classified as 60.0% likely to be a Positive'
  id: totrans-291
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`情感响应` -> 被分类为有60.0%的可能性是正面'
- en: '`Sentiment_response:`'
  id: totrans-292
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`情感响应：`'
- en: '[PRE34]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '`entity_response` --> Classified as 70.5% likely to be a Quantity'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: '`实体响应` --> 被分类为有70.5%的可能性是数量'
- en: '`entity_response:`'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: '`实体响应：`'
- en: '[PRE35]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '`key_phases_response` -> Classified as 89.9% likely "a test file" and 98.5%
    likely ''the s3 trigger" are the key phrases:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: '`关键短语响应` -> 被分类为有89.9%的可能性是“测试文件”和98.5%的可能性是“s3触发器”是关键短语：'
- en: '`key_phases_response:`'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: '`关键短语响应：`'
- en: '[PRE36]'
  id: totrans-299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Note
  id: totrans-300
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: To refer to the detailed steps, go to the *Appendix A* at the end of this book
    on Page no.198
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解详细步骤，请参阅本书末尾的附录A第198页。
- en: Summary
  id: totrans-302
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned how Comprehend's `DetectDominantLanguage` method
    is structured, and how to pass in both strings and a list of strings. You learned
    how to extract entities, sentiments, key phrases, and topics, which provide the
    data for complex NLP processing. This allows Amazon Comprehend to become more
    efficient, by automating text analysis upon a text document that's been uploaded
    to S3.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何构建Comprehend的`DetectDominantLanguage`方法的结构，以及如何传入字符串和字符串列表。你学习了如何提取实体、情感、关键短语和主题，这些为复杂NLP处理提供了数据。这允许Amazon
    Comprehend通过在已上传到S3的文本文档上自动进行文本分析，从而变得更加高效。
- en: Overall, the culmination of these independent functions provides the foundation
    for building complex machine learning-based NLP applications (for example, Siri,
    Alexa, and so on). Knowing how and why the individual functions operate will allow
    you to build your own AWS-based NLP applications.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 总体而言，这些独立功能的综合提供了构建基于复杂机器学习的NLP应用（例如，Siri、Alexa等）的基础。了解每个函数如何以及为什么运作，将使你能够构建自己的基于AWS的NLP应用。
- en: In the next chapter, we will explore Topic Modeling and perform theme extraction.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨主题建模并执行主题提取。
