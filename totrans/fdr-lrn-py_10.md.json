["```py\nfrom enum import Enum, IntEnum\n```", "```py\nclass IDPrefix:\n    agent = 'agent'\n    aggregator = 'aggregator'\n    db = 'database'\n```", "```py\n# CLIENT STATE\nclass ClientState(IntEnum):\n    waiting_gm = 0\n    training = 1\n    sending = 2\n    gm_ready = 3\n```", "```py\nclass ModelType(Enum):\n    local = 0\n    cluster = 1\n```", "```py\nclass DBMsgType(Enum):\n    push = 0\n```", "```py\nclass AgentMsgType(Enum):\n    participate = 0\n    update = 1\n    polling = 2\n```", "```py\nclass AggMsgType(Enum):\n    welcome = 0\n    update = 1\n    ack = 2\n```", "```py\nclass ParticipateMSGLocation(IntEnum):\n    msg_type = 0\n    agent_id = 1\n    model_id = 2\n    lmodels = 3\n    init_flag = 4\n    sim_flag = 5\n    exch_socket = 6\n    gene_time = 7\n    meta_data = 8\n    agent_ip = 9\n    agent_name = 10\n    round = 11\n```", "```py\nclass ParticipateConfirmationMSGLocation(IntEnum):\n    msg_type = 0\n    aggregator_id = 1\n    model_id = 2\n    global_models = 3\n    round = 4\n    agent_id = 5\n    exch_socket = 6\n    recv_socket = 7\n```", "```py\nclass DBPushMsgLocation(IntEnum):\n    msg_type = 0\n    component_id = 1\n    round = 2\n    model_type = 3\n    models = 4\n    model_id = 5\n    gene_time = 6\n    meta_data = 7\n    req_id_list = 8\n```", "```py\nclass GMDistributionMsgLocation(IntEnum):\n    msg_type = 0\n    aggregator_id = 1\n    model_id = 2\n    round = 3\n    global_models = 4\n```", "```py\nclass ModelUpMSGLocation(IntEnum):\n    msg_type = 0\n    agent_id = 1\n    model_id = 2\n    lmodels = 3\n    gene_time = 4\n    meta_data = 5\n```", "```py\nclass PollingMSGLocation(IntEnum):\n    msg_type = 0\n    round = 1\n    agent_id = 2\n```", "```py\nimport websockets, asyncio, pickle, logging\n```", "```py\ndef init_db_server(func, ip, socket):\n    start_server = websockets.serve( \\\n        func, ip, socket, max_size=None, max_queue=None)\n    loop = asyncio.get_event_loop()\n    loop.run_until_complete(start_server)\n    loop.run_forever()\n```", "```py\ndef init_fl_server(register, receive_msg_from_agent, \\\n            model_synthesis_routine, aggr_ip, \\\n            reg_socket, recv_socket):\n    loop = asyncio.get_event_loop()\n    start_server = websockets.serve(register, aggr_ip, \\\n        reg_socket, max_size=None, max_queue=None)\n    start_receiver = websockets.serve( \\\n        receive_msg_from_agent, aggr_ip, recv_socket, \\\n        max_size=None, max_queue=None)\n    loop.run_until_complete(asyncio.gather( \\\n        start_server, start_receiver, \\\n        model_synthesis_routine))\n    loop.run_forever()\n```", "```py\ndef init_client_server(func, ip, socket):\n    loop = asyncio.new_event_loop()\n    asyncio.set_event_loop(loop)\n    client_server = websockets.serve(func, ip, socket, \\\n        max_size=None, max_queue=None)\n    loop.run_until_complete(asyncio.gather(client_server))\n    loop.run_forever()\n```", "```py\nasync def send(msg, ip, socket):\n    resp = None\n    try:\n        wsaddr = f'ws://{ip}:{socket}'\n        async with websockets.connect( \\\n                wsaddr, max_size=None, max_queue=None, \\\n                ping_interval=None) as websocket:\n            await websocket.send(pickle.dumps(msg))\n            try:\n                rmsg = await websocket.recv()\n                resp = pickle.loads(rmsg)\n            except:\n                pass\n            return resp\n    except:\n        return resp\n```", "```py\nasync def send_websocket(msg, websocket):\n    while not websocket:\n        await asyncio.sleep(0.001)\n    await websocket.send(pickle.dumps(msg))\n```", "```py\nasync def receive(websocket):\n    return pickle.loads(await websocket.recv())\n```", "```py\nfrom typing import Dict\nimport numpy as np\n```", "```py\nclass LimitedDict(dict):\n    def __init__(self, keys):\n        self._keys = keys\n        self.clear()\n    def __setitem__(self, key, value):\n        if key not in self._keys:\n            raise KeyError\n        dict.__setitem__(self, key, value)\n    def clear(self):\n        for key in self._keys:\n            self[key] = list()\n```", "```py\ndef convert_LDict_to_Dict(ld: LimitedDict)\n        -> Dict[str,np.array]:\n    d = dict()\n    for key, val in ld.items():\n        d[key] = val[0]\n    return d\n```", "```py\nimport json, time, pickle, pathlib, socket, asyncio\nfrom getmac import get_mac_address as gma\nfrom typing import Dict, List, Any\nfrom hashlib import sha256\nfrom fl_main.lib.util.states import IDPrefix, ClientState\n```", "```py\ndef set_config_file(config_type: str) -> str:\n    # set the config file name\n    module_path = pathlib.Path.cwd()\n    config_file = \\\n        f'{module_path}/setups/config_{config_type}.json'\n    return config_file\n```", "```py\ndef read_config(config_path: str) -> Dict[str, Any]:\n    with open(config_path) as jf:\n        config = json.load(jf)\n    return config\n```", "```py\ndef generate_id() -> str:\n    macaddr = gma()\n    in_time = time.time()\n    raw = f'{macaddr}{in_time}'\n    hash_id = sha256(raw.encode('utf-8'))\n    return hash_id.hexdigest()\n```", "```py\ndef generate_model_id(component_type: str, \\\n        component_id: str, gene_time: float) -> str:\n    raw = f'{component_type}{component_id}{gene_time}'\n    hash_id = sha256(raw.encode('utf-8'))\n    return hash_id.hexdigest()\n```", "```py\ndef create_data_dict_from_models( \\\n        model_id, models, component_id):\n    data_dict = dict()\n    data_dict['models'] = models\n    data_dict['model_id'] = model_id\n    data_dict['my_id'] = component_id\n    data_dict['gene_time'] = time.time()\n    return data_dict\n```", "```py\ndef create_meta_data_dict(perf_val, num_samples):\n    meta_data_dict = dict()\n    meta_data_dict[\"accuracy\"] = perf_val\n    meta_data_dict[\"num_samples\"] = num_samples\n    return meta_data_dict\n```", "```py\ndef compatible_data_dict_read(data_dict: Dict[str, Any])\n        -> List[Any]:\n    if 'my_id' in data_dict.keys():\n        id = data_dict['my_id']\n    else:\n        id = generate_id()\n    if 'gene_time' in data_dict.keys():\n        gene_time = data_dict['gene_time']\n    else:\n        gene_time = time.time()\n    if 'models' in data_dict.keys():\n        models = data_dict['models']\n    else:\n        models = data_dict\n    if 'model_id' in data_dict.keys():\n        model_id = data_dict['model_id']\n    else:\n        model_id = generate_model_id( \\\n                       IDPrefix.agent, id, gene_time)\n    return id, gene_time, models, model_id\n```", "```py\ndef save_model_file(\n        data_dict: Dict[str, Any], path: str, name: str,\n        performance_dict: Dict[str, float] = dict()):\n    data_dict['performance'] = performance_dict\n    fname = f'{path}/{name}'\n    with open(fname, 'wb') as f:\n        pickle.dump(data_dict, f)\n```", "```py\ndef load_model_file(path: str, name: str) \\\n        -> (Dict[str, Any], Dict[str, float]):\n    fname = f'{path}/{name}'\n    with open(fname, 'rb') as f:\n        data_dict = pickle.load(f)\n    performance_dict = data_dict.pop('performance')\n    # data_dict only includes models\n    return data_dict, performance_dict\n```", "```py\ndef read_state(path: str, name: str) -> ClientState:\n    fname = f'{path}/{name}'\n    with open(fname, 'r') as f:\n        st = f.read()\n    if st == '':\n        time.sleep(0.01)\n        return read_state(path, name)\n    return int(st)\n```", "```py\ndef write_state(path: str, name: str, state: ClientState):\n    fname = f'{path}/{name}'\n    with open(fname, 'w') as f:\n        f.write(str(int(state)))\n```", "```py\ndef get_ip() -> str:\n    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n    try:\n        # doesn't even have to be reachable\n        s.connect(('1.1.1.1', 1))\n        ip = s.getsockname()[0]\n    except:\n        ip = '127.0.0.1'\n    finally:\n        s.close()\n    return ip\n```", "```py\ndef init_loop(func):\n    loop = asyncio.new_event_loop()\n    asyncio.set_event_loop(loop)\n    loop.run_until_complete(asyncio.gather(func))\n    loop.run_forever()\n```", "```py\nimport time\nimport numpy as np\nfrom typing import Dict, List, Any\nfrom fl_main.lib.util.states import \\\n    ModelType, DBMsgType, AgentMsgType, AggMsgType\n```", "```py\ndef generate_db_push_message(\n      component_id: str, round: int, model_type: ModelType,\n      models: Dict[str,np.array], model_id: str,\n      gene_time: float, performance_dict: Dict[str,float])\n          -> List[Any]:\n    msg = list()\n    msg.append(DBMsgType.push)  # 0\n    msg.append(component_id)  # 1\n    msg.append(round)  # 2\n    msg.append(model_type)  # 3\n    msg.append(models)  # 4\n    msg.append(model_id)  # 5\n    msg.append(gene_time)  # 6\n    msg.append(performance_dict)  # 7\n    return msg\n```", "```py\ndef generate_lmodel_update_message(\n        agent_id: str, model_id: str,\n        local_models: Dict[str,np.array],\n        performance_dict: Dict[str,float]) -> List[Any]:\n    msg = list()\n    msg.append(AgentMsgType.update)  # 0\n    msg.append(agent_id)  # 1\n    msg.append(model_id)  # 2\n    msg.append(local_models)  # 3\n    msg.append(time.time())  # 4\n    msg.append(performance_dict)  # 5\n    return msg\n```", "```py\ndef generate_cluster_model_dist_message(\n        aggregator_id: str, model_id: str, round: int,\n        models: Dict[str,np.array]) -> List[Any]:\n    msg = list()\n    msg.append(AggMsgType.update)  # 0\n    msg.append(aggregator_id)  # 1\n    msg.append(model_id)  # 2\n    msg.append(round)  # 3\n    msg.append(models)  # 4\n    return msg\n```", "```py\ndef generate_agent_participation_message(\n       agent_name: str, agent_id: str, model_id: str,\n       models: Dict[str,np.array], init_weights_flag: bool,\n       simulation_flag: bool, exch_socket: str,\n       gene_time: float, meta_dict: Dict[str,float],\n       agent_ip: str) -> List[Any]:\n    msg = list()\n    msg.append(AgentMsgType.participate)  # 0\n    msg.append(agent_id)  # 1\n    msg.append(model_id)  # 2\n    msg.append(models)  # 3\n    msg.append(init_weights_flag)  # 4\n    msg.append(simulation_flag)  # 5\n    msg.append(exch_socket)  # 6\n    msg.append(gene_time)  # 7\n    msg.append(meta_dict)  # 8\n    msg.append(agent_ip)  # 9\n    msg.append(agent_name)  # 9\n    return msg\n```", "```py\ndef generate_agent_participation_confirm_message(\n        aggregator_id: str, model_id: str,\n        models: Dict[str,np.array], round: int,\n        agent_id: str, exch_socket: str, recv_socket: str)\n            -> List[Any]:\n    msg = list()\n    msg.append(AggMsgType.welcome)  # 0\n    msg.append(aggregator_id)  # 1\n    msg.append(model_id)  # 2\n    msg.append(models)  # 3\n    msg.append(round)  # 4\n    msg.append(agent_id) # 5\n    msg.append(exch_socket)  # 6\n    msg.append(recv_socket)  # 7\n    return msg\n```", "```py\ndef generate_polling_message(round: int, agent_id: str):\n    msg = list()\n    msg.append(AgentMsgType.polling) # 0\n    msg.append(round) # 1\n    msg.append(agent_id) # 2\n    return msg\n```", "```py\ndef generate_ack_message():\n    msg = list()\n    msg.append(AggMsgType.ack) # 0\n    return msg\n```"]