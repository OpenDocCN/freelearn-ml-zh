- en: '*Chapter 12*: Advanced Topics with MLflow'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will cover advanced topics to address common situations
    and use cases whereby you can leverage your MLflow knowledge by using different
    types of models from the ones exposed in the rest of the book, to ensure a breadth
    of feature coverage and exposure to assorted topics.
  prefs: []
  type: TYPE_NORMAL
- en: 'Specifically, we will look at the following sections in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Exploring MLflow use cases with AutoML
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Intergrating MLflow with other languages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding MLflow plugins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will represent each of the cases with a brief description of the problem
    and solutions in a pattern format—namely, a problem context and a solution approach.
  prefs: []
  type: TYPE_NORMAL
- en: The different sections of this chapter don't present continuity as they address
    different issues.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For this chapter, you will need the following prerequisites:'
  prefs: []
  type: TYPE_NORMAL
- en: The latest version of Docker installed on your machine. If you don't already
    have it installed, please follow the instructions at [https://docs.docker.com/get-docker/](https://docs.docker.com/get-docker/).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The latest version of Docker Compose installed—please follow the instructions
    at [https://docs.docker.com/compose/install/](https://docs.docker.com/compose/install/).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Access to Git in the command line, and installed as described at [https://git-scm.com/book/en/v2/Getting-Started-Installing-Git](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Access to a Bash terminal (Linux or Windows).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Access to a browser.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Python 3.5+ installed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The latest version of your ML library installed locally as described in [*Chapter
    4*](B16783_04_Final_SB_epub.xhtml#_idTextAnchor081), *Experiment Management in
    MLflow*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring MLflow use cases with AutoML
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Executing an ML project requires a breadth of knowledge in multiple areas and,
    in a lot of cases, deep technical steps of expertise. One emergent technique to
    ease the adoption and accelerate **time to market** (**TTM**) in projects is the
    use of **automated machine learning** (**AutoML**), where some of the activities
    of the model developer are automated. It basically consists of automating steps
    in ML in a twofold approach, outlined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Feature selection**: Using optimization techniques (for example, Bayesian
    techniques) to select the best features as input to a model'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Modeling**: Automatically identifying a set of models to use by testing multiple
    algorithms using hyperparameter optimization techniques'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will explore the integration of MLflow with an ML library called PyCaret
    ([https://pycaret.org/](https://pycaret.org/)) that allows us to leverage its
    AutoML techniques and log the process in MLflow so that you can automatically
    obtain the best performance for your problem.
  prefs: []
  type: TYPE_NORMAL
- en: We will look next at the use case of pyStock in the book and will look at automatically
    modeling based on our training data.
  prefs: []
  type: TYPE_NORMAL
- en: AutoML pyStock classification use case
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For this section, we will work on a solution that you can follow along with
    (https://github.com/PacktPublishing/Machine-Learning-Engineering-with-MLflow/tree/master/Chapter12/automl_pycaret)
    with the notebook and our project dataset. We will execute the following steps
    in order to implement AutoML for our use case:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start by installing the full version of PyCaret, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'First, we should import the necessary libraries, like so:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, we read all the training data, like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we set up the project data and load the input data, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Here is the output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 12.1 – Automatic feature inference'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/image0018.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 12.1 – Automatic feature inference
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Then, we execute `compare_models()`, like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Here is the output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 12.2 – Different types of models'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/image0029.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 12.2 – Different types of models
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Select your best model by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run MLflow to check all the models (in the following **Uniform Resource Locator**
    (**URL**): http://127.0.0.1:5000/#/experiments/1), and you should then see a screen
    like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/image0038.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.3 – Models logged in MLflow
  prefs: []
  type: TYPE_NORMAL
- en: We will next look at implementing AutoML in a scenario where we don't have targets.
    We will need to use anomaly detection, a non-supervised ML technique.
  prefs: []
  type: TYPE_NORMAL
- en: AutoML – anomaly detection in fraud
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For this section, we will work on a solution that you can follow along with
    (https://github.com/PacktPublishing/Machine-Learning-Engineering-with-MLflow/tree/master/Chapter12/automl_pycaret_fraud)
    with the notebook and our project dataset. We will execute the following steps
    in order to implement AutoML for our use case:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we should import the libraries, like so:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, we read all the training data, like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Here is the output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 12.4 – Models automatically available in MLflow'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/image0049.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 12.4 – Models automatically available in MLflow
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Next, we set up the project data and load the input data, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, we execute `compare_models()`, like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Here is the output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 12.5 – Different types of models'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/image0057.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 12.5 – Different types of models
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Then, execute your chosen anomaly detection model, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, run MLflow to check all the models (at the following URL: http://127.0.0.1:5000/#/experiments/1),
    and you should see a screen like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.6 – Models automatically available in MLflow'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/image0066.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.6 – Models automatically available in MLflow
  prefs: []
  type: TYPE_NORMAL
- en: At this stage, you should be able to leverage the knowledge you have gained
    throughout the book to use the models identified in this book for models in production.
    We will next look at intergrating MLflow with other languages—in this case, Java.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating MLflow with other languages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: MLflow is primarily a tool ingrained in the Python ecosystem in the ML space.
    At its core, MLflow components provide a **REpresentational State Transfer** (**REST**)
    interface. As long as **application programming interface** (**API**) wrappers
    are made, the underlying code is accessible from any language with REST support.
    The REST interface is extensively documented in [https://www.mlflow.org/docs/latest/rest-api.html](https://www.mlflow.org/docs/latest/rest-api.html);
    most of the integration into other languages is about providing layers to access
    the API in a concise, language-specific library.
  prefs: []
  type: TYPE_NORMAL
- en: MLflow Java example
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Multiple teams in the ML space are inserted in a context where multiple languages
    are used. One of the most important platforms on large-scale distributed systems
    is **Java Virtual Machine** (**JVM**). Being able to implement systems that can
    interact with Java-based systems is paramount for a smooth integration of MLflow
    with the wider **information technology** (**IT**) infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will show an example of using MLflow in Java (you can have access to the
    code here: https://github.com/PacktPublishing/Machine-Learning-Engineering-with-MLflow/tree/master/Chapter12/psystock-java-example).
    In order to use MLflow in Java, you will have to execute the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Install Java and the Java build tool called `Maven`, as directed by [https://maven.apache.org/install.html](https://maven.apache.org/install.html).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a dependencies `pom.xml` file with the MLflow client dependency, as
    follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Implement your main class, like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Build your project with Maven, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Execute your Java project by running the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: At this stage, MLflow is natively integrated into the Python ecosystem. It provides
    links to other ecosystems similar to what we demonstrated in this chapter with
    the JVM language. We will next explore an example in the R language.
  prefs: []
  type: TYPE_NORMAL
- en: MLflow R example
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will show an example of using MLflow in R using the Databricks environment
    (you can have access to the code here: [https://github.com/PacktPublishing/Machine-Learning-Engineering-with-MLflow/tree/master/Chapter12/mlflow-example-r](https://github.com/PacktPublishing/Machine-Learning-Engineering-with-MLflow/tree/master/Chapter12/mlflow-example-r)).
    You can import the notebook from the Databricks Community Edition environment
    and explore the code from there.'
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will run a random forest classifier in R over the standard
    dataset available as an R package, called `Pima.tf` ([https://rdrr.io/cran/MASS/man/Pima.tr.html](https://rdrr.io/cran/MASS/man/Pima.tr.html)).
    This is a simple dataset with a set of biomedical features to detect whether a
    specific patient has diabetes or not.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to create a notebook for your R example code, you need to execute
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Sign up to Databricks Community Edition at [https://community.cloud.databricks.com/](https://community.cloud.databricks.com/)
    and create an account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Log in to your account with your just-created credentials.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a cluster to use for your workloads. You are allowed to have clusters
    for your workloads with a limit of 15 **gigabytes** (**GB**) of **random-access
    memory** (**RAM**) and with usage for a defined period of time.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You can see an overview of the cluster-creation process in the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 12.7 – Creating a cluster in Databricks Community Edition'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/Image_007.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 12.7 – Creating a cluster in Databricks Community Edition
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Create a new notebook in your Databricks platform on your landing workspace
    page by clicking on the **Create a Blank Notebook** button in the top right of
    the page, as illustrated in the following screenshot:![Figure 12.8 – Creating
    a new notebook in Databricks Community Edition
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Image_008.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 12.8 – Creating a new notebook in Databricks Community Edition
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We are now ready to start a notebook to execute a basic training job in this
    managed environment. You can start by clicking on **New Notebook** in your workspace.
    You need to set the default language as **R** and attach the notebook to your
    cluster created in the previous chapter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You can see an overview of the notebook-creation process in the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 12.9 – Adding details of your new R notebook'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/Image_009.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 12.9 – Adding details of your new R notebook
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You start on your notebook by importing the MLflow dependencies through `install.packages`
    and by instantiating the library, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We will now proceed to install extra packages with the data we will need to
    be able to execute our example. In this particular example, we will be using the
    `carrier` package to facilitate the manipulation of remote functions and log information
    about them. We will also include the `MASS` package, which contains the dataset
    we will be using in this example. The `el071` package and `randomforest` will
    be used for statistical functions and to run the prediction classifier. Here is
    the code you will need:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we will focus on starting the experiment by starting a block of code
    with this line of code: `with(mlflow_start_run(), {`. This will basically allow
    us to start logging the model parameters through the `mlflow_log_param` function.
    In the following case, we will be logging in MLflow the number of trees (`ntree`)
    and the number of features randomly sampled (`mtry`) at each split of the algorithm.
    The code is illustrated in the following snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the next two lines, we instantiate the `random forest` algorithm by specifying
    the `Pima.tr` training dataset and adding the algorithm parameters. We then predict
    using the `Pima.te` test data. The code is illustrated in the following snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We can now focus on calculating metrics around model performance—in this case,
    specificity and sensitivity—through the `confusionMatrix` method available in
    the `caret` package, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We can now focus on uploading a confusion matrix plot based on previous metrics.
    The method in R to achieve logging of the model is `mlflow_log_artifact`. Here''s
    the code you''ll need:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, we can serialize the model function and log it in MLflow so that it
    can be reusable from another R notebook, by using the `crate` method available
    on the `carrier` package. We end up logging the model with `mlflow_log_model`
    and closing the code with a bracket on the last line, as illustrated in the following
    code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You are now free to explore the **Experiment** tab on your environment, and
    you should have access to your model log and be able to explore the metrics and
    details of the run, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.10 – Models automatically available in MLflow'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Image0102.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.10 – Models automatically available in MLflow
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we explored examples in Java and R, extremely relevant languages
    in the ML ecosystem for both engineers and data scientists. We will now delve
    into extending MLflow functionalities through plugins.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding MLflow plugins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As an ML engineer, multiple times in your project you can reach the limits of
    a framework. MLflow provides an extension system through its plugin features.
    A plugin architecture allows the extensibility and adaptability of a software
    system.
  prefs: []
  type: TYPE_NORMAL
- en: 'MLflow allows the creation of the following types of plugins:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Tracking store plugins**: This type of plugin controls and tweaks the store
    that you use to log your experiment metrics in a specific type of data store.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`log_artifact` and `download_artifacts`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`git_tags` and `repo_uri`, and other relevant elements of the context of your
    system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Model Registry store**: This feature allows you to customize where your models
    are stored; you can store them—for instance—in a **Secure File Transfer Protocol**
    (**SFTP**) system if this is the only way you might store the models of your production
    infrastructure. This feature can be advantageous in regulated environments where
    only a limited set of services and your Model Registry store need to adapt to
    the situation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**MLflow project deployment**: This type of plugin controls and tweaks how
    you deploy. In a case where your deployment is not for an environment supported
    by MLflow, you can use this feature to specialize the way you deploy.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Request header provider**: Enables you to control and add extra values to
    outgoing REST requests from MLflow. One example would be if all **HyperText Transfer
    Protocol** (**HTTP**) requests needed a header key related to a security token
    in your network that integrates with the company **single sign-on** (**SSO**).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Project backend**: This gives extensibility to run MLflow in different execution
    environments. For instance, Kubernetes is a backend as well as Sagemaker, so the
    integration of MLflow and the environment where models will be deployed needs
    specific code for each situation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To create a plugin, you will have to create a Python package that overrides
    a specific module in MLflow. We will develop step by step an example MLflow plugin
    from the official documentation. You can follow along with the following repository
    URL: https://github.com/PacktPublishing/Machine-Learning-Engineering-with-MLflow/tree/master/Chapter12/mlflow-psystock-plugin.
    To run through the process, follow these next steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Define your plugin in the `setup.py` file. The `install_requires=["mlflow"]`
    line of code bundles MLflow with your package, being sufficient to install your
    new plugin package, and it will create a changed instance of MLflow. The code
    is illustrated in the following snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create a package namespace empty file in a folder called `mlflow-psystock-deployment/_init_.py`
    to signal the creation of a package.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The next step involves overriding the creation of a file with methods that we
    want in our plugin to override the default behavior in MLflow.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In our specific case, we will be looking at overriding the `BaseDeploymentClient`
    class in MLflow, which basically means that we need to implement all the methods.
    We will implement a set of dummy methods to illustrate the process, starting with
    the `create_deployment` and `update_deployment` methods, as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We then implement the `list_deployments` and `get_deployments` methods, as
    follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `run_local(name, model_uri, flavor=None, config=None)` method is the main
    method that will be executed upon instantiation of this plugin.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You can now install your plugin on top of **MLflow** by running the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We conclude the book with this section on extending MLflow with new functionalities,
    allowing you as an ML engineer to extend MLflow whenever it makes sense.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we addressed some use cases, with example MLflow pipelines.
    We looked at implementing AutoML in two different scenarios. Where we don't have
    targets, we will need to use anomaly detection as an unsupervised ML technique.
    The use of non-Python-based platforms was addressed, and we concluded with how
    to extend MLflow with plugins.
  prefs: []
  type: TYPE_NORMAL
- en: At this stage, we have addressed a good breadth and depth of topics in the area
    of ML engineering using MLflow. Your next step is definitely to explore more,
    and leverage on your project the techniques learned in this book.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to further your knowledge, you can consult the documentation at the
    following links:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://pycaret.org/about](https://pycaret.org/about)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.mlflow.org/docs/latest/plugins.html](https://www.mlflow.org/docs/latest/plugins.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
