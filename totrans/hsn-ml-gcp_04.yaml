- en: Querying Your Data with BigQuery
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Technological evolution has, over the last few years, led to a considerable
    increase in electronic devices able to automate numerous operations, both in the
    business world and in families. These devices generate a huge amount of data every
    day, the volume of which has seen an exponential growth in recent years.
  prefs: []
  type: TYPE_NORMAL
- en: This data represents a great resource that, in the past, has not been expressed
    for too long. Today, large companies are aware that the success of their activities
    depends at least, if not largely, on the information derived from the processing
    of such data. But dealing with a large amount of data requires a great deal of
    effort on the part of companies—both technological and human effort. Google was
    one of the first companies that understood the importance of data management,
    and over time it created a technological background that is available to companies
    and individuals today.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will get an introduction to the BigQuery and Data Studio
    platform to manage and view data. To start, we will take a look at big data and
    the problems associated with managing large amounts of data. We will then analyze
    how to organize data and the tools used to correctly query databases. With this
    in mind, an introduction to the SQL language will be proposed. We will then analyze
    Google BigQuery, a web service that enables interactive analysis of massively
    large datasets. Finally, we will analyze how to create reports from our data using
    Google Data Studio.
  prefs: []
  type: TYPE_NORMAL
- en: 'The topics covered are:'
  prefs: []
  type: TYPE_NORMAL
- en: Big data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Querying databases
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SQL language
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Google BigQuery
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Google Data Studio
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: At the end of the chapter, the reader will be able to apply these tools to analyze
    their data without the need for technological support. Several examples will be
    dealt with to make the use of such tools as realistic as possible in real cases.
  prefs: []
  type: TYPE_NORMAL
- en: Approaching big data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The explosion of social networks, combined with the unstoppable spread of smartphones,
    justifies the fact that one of the recurring terms in the world of innovation,
    marketing, and information technology in recent years is big data. This term indicates
    data produced in large quantities, with considerable speed, and in the most diverse
    formats, the processing of which requires technologies and resources that go well
    beyond the conventional systems of management and storage of data. But what is
    enclosed in this term?
  prefs: []
  type: TYPE_NORMAL
- en: 'In a widely quoted article, *The Age of Big Data*, Steve Lohr (a technology
    reporter for *The New York Times*) explained big data in this way:'
  prefs: []
  type: TYPE_NORMAL
- en: '"What is Big Data? A meme and a marketing term, for sure, but also shorthand
    for advancing trends in technology that open the door to a new approach to understanding
    the world and making decisions."'
  prefs: []
  type: TYPE_NORMAL
- en: 'For a detailed reading of the entire article, refer to the following URL: [http://www.nytimes.com/2012/02/12/sunday-review/big-datas-impact-in-the-world.html](http://www.nytimes.com/2012/02/12/sunday-review/big-datas-impact-in-the-world.html).'
  prefs: []
  type: TYPE_NORMAL
- en: The term big data should not mislead us; in fact, at first sight, we may think
    that this phenomenon concerns only the data size. Although the dimensions certainly
    represent an element of the problem, there are other aspects or other properties
    of big data that are not necessarily associated with them.
  prefs: []
  type: TYPE_NORMAL
- en: '*"Big data has three dimensions—volume, variety, and velocity*," says Michael
    Minelli. "*And within each of those three dimensions is a wide range of variables*."'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a closer look at the three dimensions associated with big data:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Volume**: Big data implies huge volumes of data. Earlier, it was men who
    created data. Now that data is generated by machines, networks, and social media,
    the volume of data to be analyzed is enormous. Yet volume is not the only problem
    that needs to be addressed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Variety**: The variety in data is due to the many sources and types of both
    structured and unstructured data in which such data is stored. In the past, data
    was stored in spreadsheets and databases. Now it is available in the form of photos,
    videos, audio, emails, and so on. This variety of unstructured data creates problems
    for storing, extracting, and analyzing data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Velocity**: Finally, velocity refers to the sequence in which data arrives
    from sources such as industrial processes, machines, networks, social media, mobile
    devices, and so on. The flow of data is therefore massive and continuous. This
    real-time data can help researchers and companies make important decisions that
    offer strategic competitive advantages if they are able to manage the speed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Companies are generating ever-increasing amounts of data, capturing trillions
    of information bytes on their customers, suppliers, and operations. This large
    amount of information is due to the fact that the data arrives massively from
    sources such as:'
  prefs: []
  type: TYPE_NORMAL
- en: Sensors that collect different types of data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GPRS packages of mobile phones that map the position of potential customers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Contents on social media
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Images—digital and video
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Online recordings of purchase transactions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Any other source that can produce information of our interest
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'These are shown in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8e0587ef-60f2-4af4-a2c1-ce6abedc3c17.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Functionally, gathering this large amount of structured and unstructured data
    can help organizations to:'
  prefs: []
  type: TYPE_NORMAL
- en: Reduce costs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improve operational efficiency and production performance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improve customer relationships
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Develop new products in a more informed way
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accelerate and synchronize deliveries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Formulate and respond to more in-depth requests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improve and simplify decision-making
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All this is already the reality for many large companies. The challenge for
    the future is to make sure that even small companies as well as individuals can
    have access to resources that allow them to process data in a simple and functional
    way.
  prefs: []
  type: TYPE_NORMAL
- en: Thanks to data storage and cloud computing, the ability to memorize, aggregate,
    and combine data (and therefore to use the results to perform deep analysis) is
    gradually becoming more accessible. In other words, these services continue to
    reduce their costs and other technological barriers in the face of an increasingly
    performant and efficient service. For example, with cloud computing, highly scalable
    computing resources can be accessed through the internet, often at lower prices
    than those needed to install on their computers, as resources are shared among
    many users.
  prefs: []
  type: TYPE_NORMAL
- en: Data structuring
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Every day, everywhere in the world, large volumes of data are generated by the
    different activities of man. Originally, these pieces of data are not structured
    as they come from sources of different natures. They therefore require an organization
    to be ready for use. Thus, the unstructured information collected must be processed
    according to specific requirements and subsequently stored as structured data.
    There are many forms of data structures, ranging from basic to advanced and complex,
    and their use is essential in the process of structuring data.
  prefs: []
  type: TYPE_NORMAL
- en: Data structuring consists of a set of linear or nonlinear operations performed
    on apparently random and unstructured data taken as input. These operations are
    intended to analyze the nature of the data and its importance. The system then
    divides the data into broad categories of information, as measured by the results
    of the analysis, and stores them or sends them for further analysis. This additional
    analysis can be used to subdivide the data into additional subcategories of nested
    categories. During the analysis, some data can also be considered useless and
    eventually discarded.
  prefs: []
  type: TYPE_NORMAL
- en: The result of this process is represented by structured data, which can be further
    analyzed or used directly to extract information not known until now. The shift
    from unstructured data to useful information is what the cycle of structuring
    and processing data is based on, and their success often determines the importance
    of data in a given field of application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Data structuring is a methodology for organizing and archiving data so that
    it can be accessed and modified efficiently. In particular, a data structure consists
    of a collection of data values, in the relationships between them and in the functions
    or operations that can be applied to the data, as shown in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/aebf9994-917a-4808-a80b-6261fa0507c9.png)'
  prefs: []
  type: TYPE_IMG
- en: Over time, data has been organized in different ways, starting from very basic
    structures like arrays that are commonly used in programming languages, all the
    way to modern data structures that can take complex forms. Modern data structures
    are databases of different types that support a wide range of elaborations and
    extended operations, which allow easy manipulation, categorization, and sorting
    of data in many different ways.
  prefs: []
  type: TYPE_NORMAL
- en: '**Relational databases** are the preferred data structure for many people because
    they have been widely used for many years. The term **database** indicates the
    set of data used in a specific information system, of a business, scientific,
    administrative, or some other type. A database consists of two different types
    of information, belonging to distinct levels of abstraction:'
  prefs: []
  type: TYPE_NORMAL
- en: Data, which represents the entities of the system to be modeled. The properties
    of these entities are described in terms of values (numeric, alphanumeric, and
    so on). The pieces of data are also grouped or classified into categories based
    on their common structure (for example, books, authors, and so on).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Structures (metadata), which describe the common characteristics of various
    categories of data, such as names and types of property values.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A database must represent the different aspects of reality, and, in particular,
    in addition to the actual data, also the relationships between the data, that
    is, the logical connections among the various categories. For example, the association
    that binds each author to their books and vice versa must be represented. The
    database must also meet the following requirements:'
  prefs: []
  type: TYPE_NORMAL
- en: Data must be organized with minimal redundancy, that is, not be unnecessarily
    duplicated. This condition derives from the need to avoid not only the unnecessary
    use of storage resources, but also and above all the burden of managing multiple
    copies; furthermore, if the information relating to a category of data is duplicated,
    there is a risk that an update carried out on one of the copies and not shown
    on the others has negative consequences on the consistency and reliability of
    all data.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data must be usable at the same time by multiple users. This requirement derives
    from the previous point; the situation in which each user (or category of users)
    works on his own copy of the data is to be avoided, and there must be a single
    version of the data, to which all users can access; this implies the need for
    each type of user to have a specific view of the data and specific access rights
    to the data. Furthermore, techniques are necessary to prevent the activity of
    the various users from creating conflicts for the simultaneous use of the same
    data.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data must be permanent. This implies not only the use of mass memories, but
    also the application of techniques that preserve the set of data in case of malfunction
    of any component of the system.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The table is the fundamental data structure of a relational database. The tables
    represent the entities and relationships of the conceptual schema. It consists
    of records (rows or tuples) and fields (columns or attributes):'
  prefs: []
  type: TYPE_NORMAL
- en: Each record represents an instance (or occurrence or tuple) of the entity/relationship
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each field represents an attribute of the entity/relationship
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For each field a domain is identified (datatype): alphanumeric, numeric, date,
    Boolean, and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The set of fields whose values uniquely identify a record within a table is
    called a **primary key**. When the primary key consists of only one field, it
    is called a **key field**. The following diagram shows an example of a primary
    key in a database:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/33f32066-23ad-4fc7-b2ab-4e6002b12406.png)'
  prefs: []
  type: TYPE_IMG
- en: When a key field cannot be found between the attributes of an entity, a numeric
    ID field is defined that auto-increments (counter).
  prefs: []
  type: TYPE_NORMAL
- en: 'Referential integrity is a set of rules of the relational model that guarantees
    data integrity when relationships are associated with one another through the
    foreign key: these rules are used to validate associations between tables and
    to eliminate errors in inserting, deleting, or modifying linked data.'
  prefs: []
  type: TYPE_NORMAL
- en: The index is relevant in a database. An index is a data structure designed to
    improve data search times. Fields in a table for which searches or join operations
    are required can be indexed. In the absence of an index, the search for the value
    of a field takes place sequentially on the records in the table. Indexes are automatically
    generated from the database for fields defined as keys.
  prefs: []
  type: TYPE_NORMAL
- en: Querying the database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far we have seen how to move from unstructured information to structured
    information. In particular, we have learned that this operation requires a lot
    of resources. The need for properly structured data derives from the need to search
    for information in a database to extract knowledge.
  prefs: []
  type: TYPE_NORMAL
- en: 'Any **Database management system** (**DBMS**) provides a very powerful tool
    for consulting the contents of database tables: queries.'
  prefs: []
  type: TYPE_NORMAL
- en: A DBMS, is a software system designed to allow the creation, manipulation (by
    a DBA administrator) and the efficient query (by one or more client users) of
    databases, so also called a **database manager** or an **engine**, and hosted
    on a dedicated hardware architecture (server) or on a simple computer.
  prefs: []
  type: TYPE_NORMAL
- en: 'A query is a method for querying the database, that is, to display information
    extracted from the tables. For this purpose it is possible to perform several
    operations:'
  prefs: []
  type: TYPE_NORMAL
- en: Filter the data contained in a table according to various criteria
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reassociate data contained in different tables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Choose which fields to view
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sort the result based on the values of some fields
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Group (aggregate) records that have the same values in a certain field
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Queries can be executed to display the result only once, or they can be saved
    in the database to be executed several times. If you use a query again after changing
    the table, the query result returns the new table contents.
  prefs: []
  type: TYPE_NORMAL
- en: 'Suppose, for example, that you have a library database containing two tables:'
  prefs: []
  type: TYPE_NORMAL
- en: The Books table, represents the books in the catalog and contains the fields
    `ID_Book` (primary key), Title, Author, Year, Price, Publisher
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Publisher table, represents the publishing houses with which the library
    has contacts and includes the fields Publishing House (primary key), City, Telephone
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Think of wanting to define a query that shows the title and price of all books.
    This query will need to access the Books table and present the user with only
    the two fields chosen (Title and Price). In case the Books table contains 80 volumes,
    the query will display 80 Title and Price pairs in the result. If one of the records
    were deleted from the Books table, rerunning the already-defined query would result
    in only 79 Title and Price pairs, without having to intervene on the definition
    of the query.
  prefs: []
  type: TYPE_NORMAL
- en: SQL basics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'At this point it is legitimate to ask the following question: *which language
    to use to formulate queries to a database?* We need a query language that is a
    language used to create queries on databases and information systems by users.
    It is used to make it possible to extract information from the database, through
    the relevant DBMS, querying the database, and then interfacing with the user and
    their service requests. The universally used query language is SQL.'
  prefs: []
  type: TYPE_NORMAL
- en: SQL is a language for defining and manipulating data. As a manipulation language,
    SQL allows to select data of interest from the base and to update its content.
    The queries are used both in the SQL constructs of data definition and in those
    of updating the database.
  prefs: []
  type: TYPE_NORMAL
- en: 'SQL is a declarative language: it allows you to specify what to look for without
    saying how. When a query is executed by the query processor, it is translated
    into a procedural language inside the system which allows specifying how to access
    the data. There are generally several translations of a SQL query into the procedural
    language. The task of the query optimizer is to choose the most efficient execution
    plan.'
  prefs: []
  type: TYPE_NORMAL
- en: A SQL query is performed on a database, then on a set of tables connected to
    one another by the mechanism of foreign keys. The result of a query is a table.
    We will introduce SQL by example, that is, showing increasingly rich and complex
    examples of interrogation.
  prefs: []
  type: TYPE_NORMAL
- en: 'To understand how SQL works, we analyze the table containing the number of
    visitors to Italian museums in the two years, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/725e0fec-6d0f-41ae-b9d1-5de4b857eda9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This table in named **Museum**; the simplest interrogation that can be written
    is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The result is the entire museum table. The first line of the query is called
    `select` statement and is used to retrieves data from a database. The `*` operator
    allows us to select all columns. The second line of the query is called `from`
    statement and serves to indicate which tables to use. The `select` statement and
    that from are mandatory in a query. Pay close attention to the case, spacing,
    and logical separation of the components of each query by SQL keywords.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we are interested only in the name and in the city of museums, we can select
    them in this way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Museum** | **City** |'
  prefs: []
  type: TYPE_TB
- en: '| Colosseo e Foro Romano | ROMA |'
  prefs: []
  type: TYPE_TB
- en: '| Scavi di Pompei | POMPEI |'
  prefs: []
  type: TYPE_TB
- en: '| Galleria degli Uffizi | FIRENZE |'
  prefs: []
  type: TYPE_TB
- en: '| Galleria dell''Accademia di Firenze | FIRENZE |'
  prefs: []
  type: TYPE_TB
- en: '| Castel Sant''Angelo | ROMA |'
  prefs: []
  type: TYPE_TB
- en: '| Venaria Reale | VENARIA R. |'
  prefs: []
  type: TYPE_TB
- en: '| Museo Egizio di Torino | TORINO |'
  prefs: []
  type: TYPE_TB
- en: '| Circuito Museale Boboli… | FIRENZE |'
  prefs: []
  type: TYPE_TB
- en: '| Reggia di Caserta | CASERTA |'
  prefs: []
  type: TYPE_TB
- en: '| Galleria Borghese | ROMA |'
  prefs: []
  type: TYPE_TB
- en: 'To clarify the difference between database tables and SQL tables, we see a
    simple query that generates a table with two columns with the same name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Museum** | **Museum** |'
  prefs: []
  type: TYPE_TB
- en: '| Colosseo e Foro Romano | Colosseo e Foro Romano |'
  prefs: []
  type: TYPE_TB
- en: '| Scavi di Pompei | Scavi di Pompei |'
  prefs: []
  type: TYPE_TB
- en: '| Galleria degli Uffizi | Galleria degli Uffizi |'
  prefs: []
  type: TYPE_TB
- en: '| Galleria dell''Accademia di Firenze | Galleria dell''Accademia di Firenze
    |'
  prefs: []
  type: TYPE_TB
- en: '| Castel Sant''Angelo | Castel Sant''Angelo |'
  prefs: []
  type: TYPE_TB
- en: '| Venaria Reale | Venaria Reale |'
  prefs: []
  type: TYPE_TB
- en: '| Museo Egizio di Torino | Museo Egizio di Torino |'
  prefs: []
  type: TYPE_TB
- en: '| Circuito Museale Boboli … | Circuito Museale Boboli … |'
  prefs: []
  type: TYPE_TB
- en: '| Reggia di Caserta | Reggia di Caserta |'
  prefs: []
  type: TYPE_TB
- en: '| Galleria Borghese | Galleria Borghese |'
  prefs: []
  type: TYPE_TB
- en: A SQL table can contain duplicate rows and columns of the same name. The columns
    are uniquely identified by their position. This is true for the tables resulting
    from the queries. The database tables, that is, those that are part of the database,
    cannot have columns of the same name.
  prefs: []
  type: TYPE_NORMAL
- en: 'Furthermore, we show a simple query that generates a table with equal rows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **City** |'
  prefs: []
  type: TYPE_TB
- en: '| ROMA |'
  prefs: []
  type: TYPE_TB
- en: '| POMPEI |'
  prefs: []
  type: TYPE_TB
- en: '| FIRENZE |'
  prefs: []
  type: TYPE_TB
- en: '| FIRENZE |'
  prefs: []
  type: TYPE_TB
- en: '| ROMA |'
  prefs: []
  type: TYPE_TB
- en: '| VENARIA R. |'
  prefs: []
  type: TYPE_TB
- en: '| TORINO |'
  prefs: []
  type: TYPE_TB
- en: '| FIRENZE |'
  prefs: []
  type: TYPE_TB
- en: '| CASERTA |'
  prefs: []
  type: TYPE_TB
- en: '| ROMA |'
  prefs: []
  type: TYPE_TB
- en: 'Also, you can specify the `distinct` keyword after the `select` keyword to
    eliminate duplicates:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **City** |'
  prefs: []
  type: TYPE_TB
- en: '| ROMA |'
  prefs: []
  type: TYPE_TB
- en: '| POMPEI |'
  prefs: []
  type: TYPE_TB
- en: '| FIRENZE |'
  prefs: []
  type: TYPE_TB
- en: '| VENARIA R. |'
  prefs: []
  type: TYPE_TB
- en: '| TORINO |'
  prefs: []
  type: TYPE_TB
- en: '| CASERTA |'
  prefs: []
  type: TYPE_TB
- en: 'Now let''s introduce the `where` clause:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Museum** | **City** |'
  prefs: []
  type: TYPE_TB
- en: '| Colosseo e Foro Romano | ROMA |'
  prefs: []
  type: TYPE_TB
- en: '| Castel Sant''Angelo | ROMA |'
  prefs: []
  type: TYPE_TB
- en: '| Galleria Borghese | ROMA |'
  prefs: []
  type: TYPE_TB
- en: 'If you ever want to find a particular item or group of items in your database,
    you need one or more conditions. Conditions are contained in the `where` clause.
    For example, to find museums that in 2016 registered a number of visitors over
    one million, we will have to write:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Museum** | **City** | **Visitors_2016** |'
  prefs: []
  type: TYPE_TB
- en: '| Colosseo e Foro Romano | ROMA | 6408852 |'
  prefs: []
  type: TYPE_TB
- en: '| Scavi di Pompei | POMPEI | 3283740 |'
  prefs: []
  type: TYPE_TB
- en: '| Galleria degli Uffizi | FIRENZE | 2010631 |'
  prefs: []
  type: TYPE_TB
- en: '| Galleria dell''Accademia di Firenze | FIRENZE | 1461185 |'
  prefs: []
  type: TYPE_TB
- en: '| Castel Sant''Angelo | ROMA | 1234443 |'
  prefs: []
  type: TYPE_TB
- en: '| Venaria Reale | VENARIA R. | 1012033 |'
  prefs: []
  type: TYPE_TB
- en: 'In this series of examples we have learned to correctly formulate queries to
    a database using the SQL language. As we have seen, using SQL is extremely simple.
    In the following table the some of the most important SQL commands are listed:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Command** | **Brief description** |'
  prefs: []
  type: TYPE_TB
- en: '| `SELECT` | Extracts data from a database |'
  prefs: []
  type: TYPE_TB
- en: '| `UPDATE` | Updates data in a database |'
  prefs: []
  type: TYPE_TB
- en: '| `DELETE` | Deletes data from a database |'
  prefs: []
  type: TYPE_TB
- en: '| `INSERT INTO` | Inserts new data into a database |'
  prefs: []
  type: TYPE_TB
- en: '| `CREATE DATABASE` | Creates a new database |'
  prefs: []
  type: TYPE_TB
- en: '| `ALTER DATABASE` | Modifies a database |'
  prefs: []
  type: TYPE_TB
- en: '| `CREATE TABLE` | Creates a new table |'
  prefs: []
  type: TYPE_TB
- en: '| `ALTER TABLE` | Modifies a table |'
  prefs: []
  type: TYPE_TB
- en: '| `DROP TABLE` | Deletes a table |'
  prefs: []
  type: TYPE_TB
- en: '| `CREATE INDEX` | Creates an index (search key) |'
  prefs: []
  type: TYPE_TB
- en: '| `DROP INDEX` | Deletes an index |'
  prefs: []
  type: TYPE_TB
- en: We will now address other SQL queries so we can acquire further skills.
  prefs: []
  type: TYPE_NORMAL
- en: Google BigQuery
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Data represents a fundamental factor for the management and growth of companies.
    Ensuring that data is protected, available and easily accessible is a fundamental
    requirement of any IT department. More importantly, another requirement is to
    ensure that data is used in the correct way: to manage processes, to inform decision
    makers, and to intervene intelligently in changing circumstances.'
  prefs: []
  type: TYPE_NORMAL
- en: The way companies ensure data availability is rapidly changing. Cloud computing
    has seen impressive growth in recent years, both as a concept and as a practical
    component of the IT infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: Cloud computing is a technology that allows the use, via remote server, of software
    and hardware resources (such as mass storage for data storage), whose use is offered
    as a service by a provider, specifically by subscription.
  prefs: []
  type: TYPE_NORMAL
- en: A particularly interesting Cloud computing solution is Google BigQuery. BigQuery,
    is a web service designed to allow you to perform queries on large datasets; for
    example, it is able to perform selection and aggregation queries on tables with
    billions of records in a few seconds, so it would be a good step forward to obtain
    in an interactive way information that previously took days to be calculated.
  prefs: []
  type: TYPE_NORMAL
- en: BigQuery enables companies and developers around the world to manage large amounts
    of data in real time, without the support of any hardware or software investment.
    The service provided by Google is useful if, for example, a large multinational
    company has to optimize its daily spending based on sales and advertising data,
    but even if a small online retailer has to change the presentation of a product
    based on the user clicks. The system, as stated by the producers themselves, also
    aims to help many companies fight the prevailing world economic crisis.
  prefs: []
  type: TYPE_NORMAL
- en: By making BigQuery a public service, Google claims to have reached an important
    milestone in the effort to make Big data analytics accessible to all businesses
    through the Cloud service. BigQuery is accessible through a simple user interface
    that allows you to take advantage of the power of calculation offered by Google.
    The collected data is protected on multiple levels of security, replicated in
    multiple servers and can be easily exported. Developers and businesses can subscribe
    online to the service and take advantage of 100 GB of data per month for free.
  prefs: []
  type: TYPE_NORMAL
- en: 'The main features of BigQuery are:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Scalability**: One of the inherent advantages of Cloud computing is the ability
    to expand the infrastructure on demand, ensuring a dynamic scalability of application
    capacity based on the increase in needs. This is particularly useful when the
    peak usage level of hosted applications changes consistently with the passage
    of time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Interactivity**: Manages to perform selection or group queries on billions
    of records in a matter of seconds.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Familiarity**: Uses an SQL dialect for writing queries.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It also allows a good sharing of data, the use of Google Storage allows you
    to create a collaboration hub. Whenever the need arises to share their data with
    other users it is possible to give access to the information available to those
    who want to appropriately by setting up the **access control list** (**ACL**).
  prefs: []
  type: TYPE_NORMAL
- en: An ACL is a mechanism used to express complex rules that determine whether some
    of the IT system's resources are accessed by its users.
  prefs: []
  type: TYPE_NORMAL
- en: BigQuery contains methods that allow both to create, populate, and delete tables,
    and to query above them. Writing queries in BigQuery is possible using a SQL dialect;
    in this dialect, some SQL methods have been modified to speed up the execution
    of some queries; in those cases, where the precision of the results is not essential,
    they are based on statistical estimates and return an indicative value.
  prefs: []
  type: TYPE_NORMAL
- en: BigQuery basics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'BigQuery is the data warehouse of Google Analytics. It is basically a fully
    managed, petabyte and low-cost tool. BigQuery is NoOps: the term **NoOps** (short
    for **no operation**) identifies an IT environment so automated and abstracted
    from the underlying infrastructure that does not require a dedicated team to manage
    the software internally. In fact, in BigQuery there is no infrastructure to manage
    and a database administrator is not required. The time saved can be used to analyze
    data in order to find meaningful information. To form queries in BigQuery we can
    use a familiar SQL syntax, very simple to learn, and extremely effective. But
    the real convenience in using this technology comes from the actual savings due
    to the pay-as-you-go model that allows us to pay only for the actual use of the
    resources needed to perform a specific analysis.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To access BigQuery we can essentially use three modes:'
  prefs: []
  type: TYPE_NORMAL
- en: Using a graphical web UI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using a command-line tool
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using API or client libraries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this chapter, we will only analyze the operation of BigQuery through a graphical
    interface.
  prefs: []
  type: TYPE_NORMAL
- en: Using a graphical web UI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: BigQuery can be accessed through a web graphical user interface that can be
    used to load and export data, perform queries, and perform other user and management
    tasks in the browser. The web user interface can be run in any browser, even if
    Google recommends using Chrome web browser as it produces maximum performance.
  prefs: []
  type: TYPE_NORMAL
- en: 'To access BigQuery via web UI, go to the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://bigquery.cloud.google.com](https://bigquery.cloud.google.com)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have logged in, you will see the BigQuery console as shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d641a327-ad27-462d-8afa-1e4b170fe86f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the BigQuery console a welcome message is displayed. In it, various activities
    are proposed to us:'
  prefs: []
  type: TYPE_NORMAL
- en: Read the BigQuery Quickstart guide
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Run a query—on sample data already available to practice—by clicking "Compose
    Query"
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a new dataset and load data into a table using the menu on the left
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Discover the cost control options in BigQuery
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, refer to the BigQuery web user interface guide for more information
    about the user interface
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To analyze in detail the BigQuery console, we will choose the second option,
    then click on the COMPOSE QUERY button at the top left. In this way, the window
    shown in the following screenshot is displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d130988f-4d11-4054-8fcf-5b629d235ed6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the previous screenshot two main sections are highlighted:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Navigation bar**: Starting from the top, it contains a list of elements that
    describes what action you want to perform: compose a query, consult the query
    history, or consult the job history. Continuing down, we can identify a list of
    datasets in the current project that has read access, plus a public dataset called
    **public data**. This list shows a series of public databases made available to
    us for practicing. To be able to use this data, just click on the icon of the
    dataset expansion next to any dataset or the name of the dataset, so the link
    will be extended and we will be able to view the tables within that dataset.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Query box**: Represents a box where you can type a query in the SQL syntax.
    This is the main part of the window as it represents the place where we formulate
    our queries. As anticipated in order to formulate a query it is necessary to use
    the SQL syntax that we have at least partly seen in the previous sections. Of
    course, in the examples that we will propose we will have the opportunity to deepen
    the topic. After correctly formulating the query to execute it, just click on
    the Run Query button at the bottom of the query box.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Dataset details**: Represents the section that contains a summary of the
    data we have selected in the navigation bar. The name of the dataset, a brief
    description of its content, a series of details, and finally the tables contained
    in the dataset are proposed. To get a preview of the contents of a single table,
    simply click on the table name.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s take an example to understand the ease of use of the BigQuery console.
    We use one of the public datasets available:'
  prefs: []
  type: TYPE_NORMAL
- en: '`bigquery-public-data.new_york.tlc_yellow_trips_2015`.'
  prefs: []
  type: TYPE_NORMAL
- en: This dataset is collected by the NYC **Taxi and Limousine Commission** (**TLC**)
    and includes trip records from all trips completed by yellow and green taxis in
    New York City from 2009 to present, and all trips in **for-hire vehicles** (**FHV**)
    from 2015 to present. Records include fields capturing pick-up and drop-off dates/times,
    pick-up and drop-off locations, trip distances, itemized fares, rate types, payment
    types, and driver-reported passenger counts.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following table are listed the several fields contained in the dataset
    with a brief description of the content:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Field name** | **Brief description** |'
  prefs: []
  type: TYPE_TB
- en: '| `vendor_id` | A code indicating the TPEP provider that provided the record.
    *1=Creative Mobile Technologies, LLC;* *2=VeriFone Inc*. |'
  prefs: []
  type: TYPE_TB
- en: '| `pickup_datetime` | The date and time when the meter was engaged. |'
  prefs: []
  type: TYPE_TB
- en: '| `dropoff_datetime` | The date and time when the meter was disengaged. |'
  prefs: []
  type: TYPE_TB
- en: '| `passenger_count` | The number of passengers in the vehicle. This is a driver-entered
    value. |'
  prefs: []
  type: TYPE_TB
- en: '| `trip_distance` | The elapsed trip distance in miles reported by the taximeter.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `pickup_longitude` | Longitude where the meter was engaged. |'
  prefs: []
  type: TYPE_TB
- en: '| `pickup_latitude` | Latitude where the meter was engaged. |'
  prefs: []
  type: TYPE_TB
- en: '| `rate_code` | The final rate code in effect at the end of the trip. *1=Standard
    rate*, *2=JFK*, *3=Newark*, *4=Nassau* or *Westchester*, *5=Negotiated fare*,
    *6=Group ride*. |'
  prefs: []
  type: TYPE_TB
- en: '| `store_and_fwd_flag` | This flag indicates whether the trip record was held
    in the vehicle''s memory before sending to the vendor, also known as **store and
    forward**, because the vehicle did not have a connection to the server. *Y=store
    and forward trip;* *N=not a store and forward trip*. |'
  prefs: []
  type: TYPE_TB
- en: '| `dropoff_longitude` | Longitude where the meter was disengaged. |'
  prefs: []
  type: TYPE_TB
- en: '| `dropoff_latitude` | Latitude where the meter was disengaged. |'
  prefs: []
  type: TYPE_TB
- en: '| `payment_type` | A numeric code signifying how the passenger paid for the
    trip. *1=Credit card*, *2=Cash*, *3=No charge*, *4=Dispute*, *5=Unknown*, *6=Voided
    trip*. |'
  prefs: []
  type: TYPE_TB
- en: '| `fare_amount` | The time-and-distance fare calculated by the meter. |'
  prefs: []
  type: TYPE_TB
- en: '| `extra` | Miscellaneous extras and surcharges. Currently, this only includes
    the $0.50 and $1 rush hour and overnight charges. |'
  prefs: []
  type: TYPE_TB
- en: '| `mta_tax` | $0.50 MTA tax that is automatically triggered based on the metered
    rate in use. |'
  prefs: []
  type: TYPE_TB
- en: '| `tip_amount` | Tip amount—this field is automatically populated for credit
    card tips. Cash tips are not included. |'
  prefs: []
  type: TYPE_TB
- en: '| `tolls_amount` | Total amount of all tolls paid in trip. |'
  prefs: []
  type: TYPE_TB
- en: '| `imp_surcharge` | $0.30 improvement surcharge assessed trips at the flag
    drop. The improvement surcharge began being levied in 2015. |'
  prefs: []
  type: TYPE_TB
- en: '| `total_amount` | The total amount charged to passengers. Does not include
    cash tips. |'
  prefs: []
  type: TYPE_TB
- en: To start, let's formulate a simple query to the database. *How many trips did
    Yellow taxis take each month in 2015?* This query must return monthly trip totals
    for all Yellow taxis in 2015\. Someone may think that we are starting with operations
    that are too simple; in fact, it seems trivial to count the taxi calls made each
    month. This is true for most small cities but not for a metropolis like New York.
    In fact, we are talking about a database of dimensions equal to 18.1 GB and with
    a number of observations equal to 146,112,989.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see then the SQL code to insert into the query box:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s explain it line by line to understand the meaning of each command used.
    Let''s start from the first line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The first line is inserted to let BigQuery know you want to use SQL standard.
    We can enable standard SQL for a query, so you do not have to insert this tag
    into your SQL. To do so, just click on the Show Options button located immediately
    below the query box. In the section that opens uncheck the Use Legacy SQL checkbox.
    Let''s move forward in the analysis of the query:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'In this piece of code we use the `SELECT` statement, which as already anticipated
    in the previous sections, retrieves data from a database. In the first part of
    the statement, you specify which data to retrieve. We have said that the number
    of trips for each month is in us. To do this we will count the number of lines
    for each month. Recall that each line in the database corresponds to a trip. The
    field containing this information is `pickup_datetime`. To return the data in
    an easily readable format, we used the `TIMESTAMP_TRUNC` function which truncates
    to `TIMESTAMP` value (the return value is of type `TIMESTAMP`). Then, we use the
    `count()` function that returns the number of rows that match a specified criteria.
    Let''s move forward:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'With the `FROM` clause, we select the table in which to search. Finally the
    last two lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'These lines have been inserted to group and sort the data. The results are
    shown in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Row** | **month** | **trips** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | 2015-01-01 00:00:00.000 UTC | 12748986 |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | 2015-02-01 00:00:00.000 UTC | 12450521 |'
  prefs: []
  type: TYPE_TB
- en: '| 3 | 2015-03-01 00:00:00.000 UTC | 13351609 |'
  prefs: []
  type: TYPE_TB
- en: '| 4 | 2015-04-01 00:00:00.000 UTC | 13071789 |'
  prefs: []
  type: TYPE_TB
- en: '| 5 | 2015-05-01 00:00:00.000 UTC | 13158262 |'
  prefs: []
  type: TYPE_TB
- en: '| 6 | 2015-06-01 00:00:00.000 UTC | 12324935 |'
  prefs: []
  type: TYPE_TB
- en: '| 7 | 2015-07-01 00:00:00.000 UTC | 11562783 |'
  prefs: []
  type: TYPE_TB
- en: '| 8 | 2015-08-01 00:00:00.000 UTC | 11130304 |'
  prefs: []
  type: TYPE_TB
- en: '| 9 | 2015-09-01 00:00:00.000 UTC | 11225063 |'
  prefs: []
  type: TYPE_TB
- en: '| 10 | 2015-10-01 00:00:00.000 UTC | 12315488 |'
  prefs: []
  type: TYPE_TB
- en: '| 11 | 2015-11-01 00:00:00.000 UTC | 11312676 |'
  prefs: []
  type: TYPE_TB
- en: '| 12 | 2015-12-01 00:00:00.000 UTC | 11460573 |'
  prefs: []
  type: TYPE_TB
- en: 'As you can see, the number of trips in each month ranges from a minimum of
    11,130,304 to a maximum of 13,351,609\. The following screenshot shows the results
    in the BigQuery console:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d61dd6e3-1bad-44a9-8e51-029485be8d74.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the previous screenshot two details are highlighted:'
  prefs: []
  type: TYPE_NORMAL
- en: A report on calculation times and data processed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A series of results storage options
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the first case, BigQuery tells us that to complete the operation, the Google
    resources have been committed to 4.5 s, and that 1.09 GB of data was processed
    during this time. This information will be useful for calculating the cost of
    the transaction.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the previous image we highlighted the available storage options. Four options
    are offered to us:'
  prefs: []
  type: TYPE_NORMAL
- en: Download as CSV
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Download as JSON
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Save as table
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Save to Google Sheets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you recall, the JSON syntax is a subset of the JavaScript syntax, while Google
    Sheets is an online spreadsheet app that lets users create and format spreadsheets
    and simultaneously work with other people.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the previous screenshot, it is possible to notice that at the top of the
    results there are two tabs: Results and Details. So far, we have seen what is
    returned in the Results tab; let''s see what we see if we click on the Details
    tab instead. A series of statistics on the operation performed are returned to
    us, as shown in the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: This information refers once again to the query we performed and to the results
    obtained.
  prefs: []
  type: TYPE_NORMAL
- en: Visualizing data with Google Data Studio
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Google Data Studio is a **FREE** tool that allows us to create captivating reports
    quickly and easily. We can finally say goodbye to redundant and confusing data
    sheets. With Data Studio, in fact, besides being able to insert simple tables,
    it is possible to attach customizable graphics with various colors and fonts that
    will be easily understandable. With Google Data Studio, sharing reports is even
    easier as it is a Google Drive application and works similarly.
  prefs: []
  type: TYPE_NORMAL
- en: The most important news for companies (but also, if not above all, for customers)
    lies in the extremely intuitive interface. To keep everything under control, moreover,
    Google gives the possibility to change the date range (at the report or chart
    level).
  prefs: []
  type: TYPE_NORMAL
- en: 'In a few clicks, in fact, you can realize the progress of the site almost in
    real time. Data Studio is useful for two types of users:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Who creates the reports**: Analysis and marketing employees'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Who will read the reports**: Customers and CEOs of companies'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Google Data Studio, currently available in beta, allows you to create dynamic
    reports and dashboards with a strong visual impact. With Data Studio it is possible
    to:'
  prefs: []
  type: TYPE_NORMAL
- en: Easily connect to different data sources
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: View your data with dynamic, interactive, and eye-catching reports and dashboards
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Share and collaborate with others, following the logic in use on Google Drive
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To view a report with Data Studio, the following requirements must be met:'
  prefs: []
  type: TYPE_NORMAL
- en: 'All you need is a web browser (the ones tested are: Chrome, Firefox, and Safari).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You do not need a Google account.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'While to create reports and data sources, the following requirements must be
    met:'
  prefs: []
  type: TYPE_NORMAL
- en: You need to be logged in to a Google account
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You need to be in one of the supported countries (in other words, all countries
    bar these: the People''s Republic of China, Russia, Svalbard Islands and Jan Mayen,
    Iran, Iraq, Crimea, North Korea, Syria, Cuba)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You need to be able to use Google Drive
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data sources use pipelines to secure datasets called **connectors**. When Data
    Studio first connects to a specific type of dataset, such as Google Analytics
    or AdWords, you are asked for permission to connect, which can be removed at any
    time. At this point, to connect to a certain type of dataset, for example, for
    Google Analytics, you can connect to only one account, one property and one view;
    for AdWords, you connect to an administrator or standard account; for BigQuery,
    you provide a project and a table or a custom query, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Creating reports in Data Studio
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To start, let''s see what are the first steps to be done to immediately create
    a report in Data Studio. To be able to use Data Studio, it is not necessary to
    fill in any registration form; you just need to have an active Google account.
    If you''ve already signed into your Google Account, just type the following URL
    in a browser: [https://datastudio.google.com/](https://datastudio.google.com/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'This will take you directly to the Data Studio home page, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/373caf0d-c853-4cf3-af32-7c4604c24fd1.png)'
  prefs: []
  type: TYPE_IMG
- en: Once you have viewed the main page of Data Studio we can identify some sections
    that will help us to create our reports (in the previous screenshot they are highlighted).
    To start getting comfortable with the Data Studio interface we can consult some
    built-in templates to start already available. You can choose an existing model
    and modify it or simply start with a new blank report.
  prefs: []
  type: TYPE_NORMAL
- en: Clicking on the All models drop-down menu displays all the built-in templates.
    In this way we can choose any model that matches our needs and modify it using
    the available editor, in order to adapt it to our needs. Predefined templates
    are useful to get started or for those who have little time to spend on formatting
    settings. In fact, in these models the functionalities are already ready for use,
    thus saving a lot of time.
  prefs: []
  type: TYPE_NORMAL
- en: 'To understand effectively how to use Data Studio we will start from an empty
    report, in order to explain all the steps necessary to create a report. There
    are two ways to start with a new report:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the empty plus (+) page on the horizontal header (blank)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Click on the (+) icon in the lower right corner
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Both options are clearly highlighted in the previous figure, and in both cases
    the window that shows in the following screen is displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/360df404-979e-41a1-b9c3-341afa6e892b.png)'
  prefs: []
  type: TYPE_IMG
- en: This displays the report editor with all the controls and elements needed to
    add charts and data, and to choose the style of your report. Initially, the new
    report has a default name (`Untitled Report`) at the top left of the screen, so
    just click on it and we will enter a new name for the report (`First Report`).
  prefs: []
  type: TYPE_NORMAL
- en: 'The first thing to do is to add a data source to the report. To do this we
    have two options again:'
  prefs: []
  type: TYPE_NORMAL
- en: An existing data source
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create new data source
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the previous screenshot, the two areas in which the options can be activated
    are highlighted. It is possible to notice that data sources proposed by exercise
    are already available at the bottom of the data source selector. On this occasion,
    we will refer to these resources. For example, to select the first item that refers
    to `[Sample] World Population Data 2005-2014`, just click on it. This dataset
    contains the world population data from 2005 to 2014\. In this case the window
    shown in the following screenshot will be displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b939a5f7-faf5-446b-9b78-a2b5b1baa803.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After clicking on the ADD TO REPORT button, the main window of Data Studio
    is enriched with new components:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Menu Bar**: This allows you to access many other menu functions by right-clicking
    on a component.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Toolbar**: This allows you to choose among various tools, pages, and control
    options. This toolbar is divided into five sections.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Layout and Theme properties panel**: We can control the way your report appears
    on the viewer''s screen using the options in this panel. This is the default properties
    panel; it appears when no other component is selected.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the following screenshot, you can see the new aspect of the Report Figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fba3d30e-2d6e-47c1-8c76-d04443f35364.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To add a chart to the page in our empty report, just click on one of the icons
    in the toolbar. For example, to add a bar chart of the world population from 2005
    until 2014 will suffice:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the second icon in the third area of the toolbar (Bar chart)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Position the viewfinder at the point on the page where you want the graph to
    be shown
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Draw the graph under the title, to move it just click and drag it, or select
    it, and use the arrow keys on the keyboard
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once this is done, the bar chart of our data will appear in the main area and
    the Layout and Theme properties panel on the right will give way to the bar chart
    properties panel, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0d3d2111-0e66-4b6e-b007-45c4c2d37d3a.png)'
  prefs: []
  type: TYPE_IMG
- en: The bar chart properties panel becomes essential to make changes to the chart
    just added to our report. We can in fact change the type of chart, change the
    data source, add another dimension, add a new metric, and change the sorting of
    the data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Data Studio does not allow the entire dashboard or multiple reports in a `.pdf`
    or other format. Although it is possible to export a single table or chart in
    a CSV format. To export a chart or a table:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the View tab at the top right to view the reports in view mode
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hover over the graph or report you want to export
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Right click and select Export CSV
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To export a whole dashboard as a PDF, there is not any internal functionality
    added yet that will help you export reports as `.pdf`. But by using a chrome extension
    you can do this very easily (Google Data Studio PDF Export). An alternative way
    of exporting a report to PDF is to print to PDF via your browser. You would have
    to do that for each report page.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, an introduction of the BigQuery and Data Studio platform to
    manage and view data are proposed. To start, we explored the big data and the
    problems associated with managing large amounts of data. Then we analyzed how
    to organize data in a structured format to correctly query databases.
  prefs: []
  type: TYPE_NORMAL
- en: After this, you were introduced to SQL. SQL is a language for defining and manipulating
    data. As a manipulation language, SQL allows to select data of interest from the
    base and to update its content. The queries are used both in the SQL constructs
    of data definition and in those of updating the database.
  prefs: []
  type: TYPE_NORMAL
- en: Then a Google BigQuery introduction was performed. BigQuery is a web service
    that enables interactive analysis of massively large datasets. BigQuery enables
    companies and developers around the world to manage large amounts of data in real
    time, without the support of any hardware or software investment.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we have analyzed how to create reports from our data using Google Data
    Studio. Google Data Studio is a FREE tool that allows us to create captivating
    reports quickly and easily. With Data Studio, besides being able to insert simple
    tables, it is possible to attach customizable graphics with various colors and
    fonts that will be easily understandable.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will we present Dataprep a services useful to pre-process
    the data, extract features and clean up the records, and Dataflow a service to
    implement streaming and batch processing.
  prefs: []
  type: TYPE_NORMAL
