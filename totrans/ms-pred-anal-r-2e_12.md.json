["```py\n>oliver<- c(1,1,2,5,7,8,9,7)\n>thibault<- c(5,9,4,1,1,7,5,9)\n>maria<- c(1,4,2,5,8,6,2,8)\n>pedro<- c(2,6,7,2,6,1,8,9)\n>ines<- c(1,3,2,4,8,9,7,7)\n>gertrude<- c(1,6,5,7,3,2,5,5)\n>ratingMatrix<- rbind(oliver, thibault, maria, pedro, ines,  \ngertrude)\n>colnames(ratingMatrix) <- c(\"Berny's\", \"La Traviata\", \"El Pollo\n  Loco\", \"Joey's Pizza\", \"The Old West\", \"Jake and Jill\", \"Full \n  Moon\", \"Acropolis\")\n>ratingMatrix\n         Berny's La Traviata El Pollo Loco Joey's Pizza\noliver         1           1             2            5\nthibault       5           9             4            1\nmaria          1           4             2            5\npedro          2           6             7            2\nines           1           3             2            4\ngertrude       1           6             5            7\n         The Old West Jake and Jill Full Moon Acropolis\noliver              7             8         9         7\nthibault            1             7         5         9\nmaria               8             6         2         8\npedro               6             1         8         9\nines                8             9         7         7\ngertrude            3             2         5         5\n```", "```py\n>dist(ratingMatrix, method = 'euclidean')\noliverthibaultmariapedroines\nthibault 12.529964                                        \nmaria     8.000000 11.000000                              \npedro    10.723805  9.899495 10.246951                    \nines      3.316625 11.224972  6.082763 10.583005          \ngertrude 10.488088 10.344080  8.717798  8.062258 10.440307\n```", "```py\n>dist(t(ratingMatrix), method = 'euclidean')\n                Berny's La Traviata El Pollo Loco Joey's Pizza\nLa Traviata    8.366600                                       \nEl Pollo Loco  6.708204    5.744563                           \nJoey's Pizza   9.643651    9.949874      7.745967             \nThe Old West  13.038405   12.247449     10.535654     7.810250\nJake and Jill 12.000000   11.575837     12.449900     9.848858\nFull Moon     12.369317   10.246951      8.717798     9.486833\nAcropolis     14.212670    8.831761     10.723805    11.789826\n              The Old West Jake and Jill Full Moon\nLa Traviata\nEl Pollo Loco                                     \nJoey's Pizza                                      \nThe Old West                                      \nJake and Jill     8.246211                        \nFull Moon         8.062258      9.110434          \nAcropolis         8.831761      9.273618  7.549834\n```", "```py\n> library(\"proxy\")\n>dist(ratingMatrix, method = 'cosine')\noliverthibaultmariapedroines\nthibault 0.28387670                                            \nmaria    0.12450495 0.23879093                                 \npedro    0.20947046 0.17687385 0.20854178                      \nines     0.02010805 0.22821528 0.06911870 0.20437426           \ngertrude 0.22600742 0.21481973 0.19156876 0.12227138 0.22459114\n```", "```py\n>binaryRatingMatrix<- ratingMatrix> 5\n>dist(binaryRatingMatrix, method = 'jaccard')\noliverthibaultmariapedroines\nthibault 0.6000000                                        \nmaria    0.2500000 0.5000000                              \npedro    0.5000000 0.6666667 0.6666667                    \nines     0.0000000 0.6000000 0.2500000 0.5000000          \ngertrude 1.0000000 0.7500000 1.0000000 0.8333333 1.0000000\n```", "```py\n>centered_rm<- t(apply(ratingMatrix, 1, function(x) x - mean(x)))\n>centered_rm\n         Berny's La Traviata El Pollo Loco Joey's Pizza\noliver     -4.00       -4.00         -3.00          0.0\nthibault   -0.12        3.88         -1.12         -4.1\nmaria      -3.50       -0.50         -2.50          0.5\npedro      -3.12        0.88          1.88         -3.1\nines       -4.12       -2.12         -3.12         -1.1\ngertrude   -3.25        1.75          0.75          2.8\n         The Old West Jake and Jill Full Moon Acropolis\noliver           2.00           3.0      4.00      2.00\nthibault        -4.12           1.9     -0.12      3.88\nmaria            3.50           1.5     -2.50      3.50\npedro            0.88          -4.1      2.88      3.88\nines             2.88           3.9      1.88      1.88\ngertrude        -1.25          -2.2      0.75      0.75\n```", "```py\n> options(digits = 2)\n> (rm_svd<- svd(ratingMatrix))\n$d\n[1] 35.6 10.6  7.5  5.7  4.7  1.3\n$u\n      [,1]  [,2]   [,3]   [,4]   [,5]   [,6]\n[1,] -0.44  0.48 -0.043 -0.401  0.315  0.564\n[2,] -0.41 -0.56  0.703 -0.061  0.114  0.099\n[3,] -0.38  0.24  0.062  0.689 -0.494  0.273\n[4,] -0.43 -0.40 -0.521 -0.387 -0.483 -0.033\n[5,] -0.44  0.42  0.170 -0.108 -0.003 -0.764\n[6,] -0.33 -0.26 -0.447  0.447  0.641 -0.114\n$v\n      [,1]   [,2]  [,3]    [,4]   [,5]   [,6]\n[1,] -0.13 -0.255  0.30 -0.0790  0.013  0.301\n[2,] -0.33 -0.591  0.16  0.3234  0.065 -0.486\n[3,] -0.25 -0.382 -0.36 -0.0625 -0.017 -0.200\n[4,] -0.27  0.199 -0.36  0.5796  0.578  0.284\n[5,] -0.38  0.460 -0.30  0.1412 -0.556 -0.325\n[6,] -0.39  0.401  0.68  0.0073  0.239 -0.226\n[7,] -0.42  0.044 -0.26 -0.7270  0.369 -0.047\n[8,] -0.52 -0.161  0.11  0.0279 -0.398  0.628\n```", "```py\n>reconstructed_rm<- rm_svd$u %*% diag(rm_svd$d) %*% t(rm_svd$v)\n>reconstructed_rm\n     [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8]\n[1,]    1    1    2    5    7    8    9    7\n[2,]    5    9    4    1    1    7    5    9\n[3,]    1    4    2    5    8    6    2    8\n[4,]    2    6    7    2    6    1    8    9\n[5,]    1    3    2    4    8    9    7    7\n[6,]    1    6    5    7    3    2    5    5\n```", "```py\n>all.equal(ratingMatrix, reconstructed_rm, tolerance = 0.000001,\ncheck.attributes = F)\n[1] TRUE\n```", "```py\n> energy <- rm_svd$d ^ 2\n>cumsum(energy) / sum(energy)\n[1] 0.85 0.92 0.96 0.98 1.00 1.00\n```", "```py\n>d92<- c(rm_svd$d[1:2], rep(0, length(rm_svd$d) - 2))\n>reconstructed92_rm<- rm_svd$u %*% diag(d92) %*% t(rm_svd$v)\n>reconstructed92_rm\n     [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8]\n[1,] 0.68  2.0  1.9  5.1  8.3  8.0  6.7  7.2\n[2,] 3.37  8.3  5.9  2.7  2.9  3.3  5.9  8.6\n[3,] 1.10  3.0  2.4  4.1  6.4  6.3  5.9  6.7\n[4,] 3.02  7.5  5.4  3.2  3.9  4.2  6.2  8.6\n[5,] 0.87  2.5  2.2  5.1  8.1  7.9  6.8  7.5\n[6,] 2.20  5.5  4.0  2.6  3.3  3.5  4.9  6.6\n```", "```py\n> library(data.table)\n> jester <- fread(\"jesterfinal151cols.csv\", sep = \",\", header = F)\n> jester[, V1 := NULL]\n```", "```py\n>jester_m<- as.matrix(jester) \n>jester_m<- ifelse(jester_m == 99, NA, jester_m)\n> library(recommenderlab)\n>jester_rrm<- as(jester_m, \"realRatingMatrix\")\n```", "```py\n> movies <- fread(\"ratings.dat\", sep = \":\", header = F)\n> movies[, c(\"V2\", \"V4\", \"V6\", \"V7\") := NULL]\n> head(movies)\nV1V3V5\n1:  1 1193  5\n2:  1  661  3\n3:  1  914  3\n4:  1 3408  4\n5:  1 2355  5\n6:  1 1197  3\n```", "```py\n>userid_factor<- as.factor(movies[, V1])\n>movieid_factor<- as.factor(movies[, V3])\n>movies_sm<- sparseMatrix(i = as.numeric(userid_factor), j = \nas.numeric(movieid_factor), x = as.numeric(movies[,V5]))\n>movies_rrm<- new(\"realRatingMatrix\", data = movies_sm)\n>colnames(movies_rrm) <- levels(movieid_factor)\n>rownames(movies_rrm) <- levels(userid_factor)\n> dim(movies_rrm)\n[1] 6040 3706\n```", "```py\n>jester_ratings<- getRatings(jester_rrm)\n>jester_normalized_ratings<- getRatings(normalize(jester_rrm, \n                                          method = \"Z-score\"))\n```", "```py\n>jester_items_rated_per_user<- rowCounts(jester_rrm)\n>jester_average_item_rating_per_item<- colMeans(jester_rrm)\n```", "```py\n> (jester_avg_items_rated_per_user<- mean(rowCounts(jester_rrm)))\n[1] 34.10493\n> (jester_avg_item_rating<- mean(colMeans(jester_rrm), na.rm = T))\n[1] 1.633048\n> (movies_avg_items_rated_per_user<- mean(rowCounts(movies_rrm)))\n[1] 165.5975\n> (movies_avg_item_rating<- mean(colMeans(movies_rrm)))\n[1] 3.238892 \n```", "```py\n>jester_bn<- binarize(jester_rrm, minRating = 5)\n>jester_bn<- jester_bn[rowCounts(jester_bn) > 1]\n> dim(jester_bn)\n[1] 13789   150\n```", "```py\n> algorithms <- list(\n\"Random\" = list(name = \"RANDOM\", param = NULL),\n\"Popular\" = list(name = \"POPULAR\", param = NULL),\n\"UserBasedCF_COS\" = list(name = \"UBCF\", \nparam = list(method = \"Cosine\", nn = 50)),\n\"UserBasedCF_JAC\" = list(name = \"UBCF\", \nparam = list(method = \"Jaccard\", nn = 50))\n )\n```", "```py\n>jester_split_scheme<- evaluationScheme(jester_bn, method = \n\"split\", train = 0.8, given = 10, k = 1)\n```", "```py\n>jester_split_eval<- evaluate(jester_split_scheme, algorithms, \n                                n = 1 : 20)\nRANDOM run \n  1  [0.015sec/1.87sec] \nPOPULAR run \n  1  [0.006sec/12.631sec] \nUBCF run \n  1  [0.001sec/36.862sec] \nUBCF run \n  1  [0.002sec/36.342sec]\n```", "```py\n> options(digits = 4)\n>getConfusionMatrix(jester_split_eval[[4]])\n[[1]]\nTP      FP    FN    TN precision  recall     TPRFPR\n1  0.5181  0.4819 18.47 120.5    0.5181 0.06272 0.06272 0.003867\n2  1.0261  0.9739 17.96 120.0    0.5131 0.12042 0.12042 0.007790\n3  1.4953  1.5047 17.49 119.5    0.4984 0.16470 0.16470 0.012011\n4  1.9307  2.0693 17.06 118.9    0.4827 0.20616 0.20616 0.016547\n5  2.3575  2.6425 16.63 118.4    0.4715 0.24215 0.24215 0.021118\n6  2.7687  3.2313 16.22 117.8    0.4614 0.27509 0.27509 0.025791\n7  3.1530  3.8470 15.83 117.2    0.4504 0.30508 0.30508 0.030709\n8  3.5221  4.4779 15.46 116.5    0.4403 0.33216 0.33216 0.035735\n9  3.8999  5.1001 15.09 115.9    0.4333 0.36069 0.36069 0.040723\n10 4.2542  5.7458 14.73 115.3    0.4254 0.38723 0.38723 0.045890\n11 4.6037  6.3963 14.38 114.6    0.4185 0.40927 0.40927 0.051036\n12 4.9409  7.0591 14.04 114.0    0.4117 0.43368 0.43368 0.056345\n13 5.2534  7.7466 13.73 113.3    0.4041 0.45345 0.45345 0.061856\n14 5.5638  8.4362 13.42 112.6    0.3974 0.47248 0.47248 0.067360\n15 5.8499  9.1501 13.14 111.9    0.3900 0.48907 0.48907 0.073066\n16 6.1298  9.8702 12.86 111.1    0.3831 0.50604 0.50604 0.078836\n17 6.4090 10.5910 12.58 110.4    0.3770 0.52151 0.52151 0.084592\n18 6.6835 11.3165 12.30 109.7    0.3713 0.53664 0.53664 0.090384\n19 6.9565 12.0435 12.03 109.0    0.3661 0.55187 0.55187 0.096198\n20 7.2165 12.7835 11.77 108.2    0.3608 0.56594 0.56594 0.102095\n```", "```py\n> plot(jester_split_eval, annotate = 2, legend = \"topright\")\n> title(main = \"TPR vs FPR For Binary Jester Data\")\n```", "```py\n> plot(jester_split_eval, \"prec/rec\", annotate = 2, \n       legend = \"bottomright\")\n> title(main = \"Precision versus Recall Binary Jester Data\")\n```", "```py\n>normalized_algorithms<- list(\n\"Random\" = list(name = \"RANDOM\", param = list(normalize =  \n\"Z-score\")),\n\"Popular\" = list(name = \"POPULAR\", param = list(normalize = \n\"Z-score\")),\n\"UserBasedCF\" = list(name = \"UBCF\", param = list(normalize = \n\"Z-score\", method = \"Cosine\", nn = 50)),\n\"ItemBasedCF\" = list(name = \"IBCF\", param = list(normalize = \n\"Z-score\")),\n\"SVD\" = list(name = \"SVD\", param = list(categories = 30, \n                      normalize = \"Z-score\", treat_na = \"median\"))\n )\n```", "```py\n>movies_cross_scheme<- evaluationScheme(movies_rrm, method = \n\"cross-validation\", k = 10, given = 10, goodRating = 4)\n>movies_cross_eval<- evaluate(movies_cross_scheme, \nnormalized_algorithms, n = 1 : 20)\n```", "```py\n> plot(movies_cross_eval, annotate = 4, legend = \"topright\")\n> title(main = \"TPR versus FPR For Movielens Data\")\n```", "```py\n> plot(movies_split_eval, \"prec/rec\", annotate = 3, \n       legend = \"bottomright\")\n> title(main = \"Precision versus Recall For Movielens Data\")\n```", "```py\n>jester_split_scheme<- evaluationScheme(jester_rrm, method = \n\"split\", train = 0.8, given = 5, goodRating = 5)\n```", "```py\n>jester_ubcf_srec<- Recommender(getData(jester_split_scheme, \n\"train\"), \"UBCF\")\n>jester_ibcf_srec<- Recommender(getData(jester_split_scheme, \n\"train\"), \"IBCF\")\n```", "```py\n>jester_ubcf_known<- predict(jester_ubcf_srec, \ngetData(jester_split_scheme, \"known\"), type=\"ratings\")\n>jester_ibcf_known<- predict(jester_ibcf_srec, \ngetData(jester_split_scheme, \"known\"), type=\"ratings\") \n```", "```py\n> (jester_ubcf_acc<- calcPredictionAccuracy(jester_ubcf_known, \ngetData(jester_split_scheme, \"unknown\")))\nRMSEMSE      MAE \n 4.70765 22.16197  3.54130 \n> (jester_ibcf_acc<- calcPredictionAccuracy(jester_ibcf_known, \ngetData(jester_split_scheme, \"unknown\")))\nRMSEMSE       MAE \n 5.012211 25.122256  3.518815\n```"]