["```py\n    public enum LuisActions {\n        None, GetRoomTemperature, SetRoomTemperature, GetNews\n    }\n```", "```py\n    private void OnLuisUtteranceResultUpdated(object sender, LuisUtteranceResultEventArgs e)\n    {\n        Application.Current.Dispatcher.Invoke(async () => {\n            StringBuilder sb = new StringBuilder(ResultText);\n\n            _requiresResponse = e.RequiresReply;\n\n            sb.AppendFormat(\"Status: {0}\\n\", e.Status);\n            sb.AppendFormat(\"Summary: {0}\\n\\n\", e.Message);\n```", "```py\n    if (!string.IsNullOrEmpty(e.IntentName))\n        await TriggerActionExectution(e.IntentName, e.EntityName);\n```", "```py\n            ResultText = sb.ToString();\n        }); \n    }\n```", "```py\n    private async Task TriggerActionExectution(string intentName) {\n        LuisActions action;\n        if (!Enum.TryParse(intentName, true, out action))\n            return;\n```", "```py\n        switch(action) {\n            case LuisActions.GetRoomTemperature:\n            case LuisActions.SetRoomTemperature:\n            case LuisActions.None:\n            default:\n                break;\n            case LuisActions.GetNews:\n          break;\n        }\n    }\n```", "```py\n    public string EntityName { get; set; }\n```", "```py\n        if (!string.IsNullOrEmpty(result.TopScoringIntent.Name)) {\n            var intentName = result.TopScoringIntent.Name;\n            args.IntentName = intentName;\n        }\n\n        else {\n            args.IntentName = string.Empty;\n        }\n\n        if(result.Entities.Count > 0) {\n        var entity = result.Entities.First().Value;\n\n        if(entity.Count > 0)  {\n            var entityName = entity.First().Value;\n            args.EntityName = entityName;\n        }\n    }\n```", "```py\n    await TriggerActionExectution(e.IntentName, e.EntityName);\n```", "```py\n    private BingSearch _bingSearch;\n```", "```py\nprivate async Task GetLatestNews(string queryString)\n{\n    BingNewsResponse news = await _bingSearch.SearchNews (queryString, SafeSearch.Moderate);\n\n    if (news.value == null || news.value.Length == 0)\n        return;\n```", "```py\n    await ParseNews(news.value[0]);\n```", "```py\nprivate async Task ParseNews(Value newsArticle)  {\n    string articleDescription = $\"{newsArticle.name}, published {newsArticle.datePublished}. Description:\n    {newsArticle.description}. \";\n\n    await _ttsClient.SpeakAsync(articleDescription, CancellationToken.None);\n}\n```", "```py\nprivate IVisionServiceClient _visionClient;\n```", "```py\n_visionClient = new VisionServiceClient(\"FACE_API_KEY\", \"ROOT_URI\");\n```", "```py\nprivate async Task<string> GetImageDescription(string contentUrl)\n{\n    try {\n        AnalysisResult imageAnalysisResult = await _visionClient.AnalyzeImageAsync(contentUrl, new List<VisualFeature>() { VisualFeature.Description });\n```", "```py\n    if (imageAnalysisResult == null || imageAnalysisResult.Description?.Captions?.Length == 0) \n        return \"none\";\n    return imageAnalysisResult.Description.Captions.First().Text;\n}\n```", "```py\n        catch(Exception ex) {\n            Debug.WriteLine(ex.Message);\n            return \"none\";\n        }\n    }\n```", "```py\nstring imageDescription = await GetImageDescription (newsArticle.image.thumbnail.contentUrl);\n```", "```py\n    string articleDescription = $\"{newsArticle.name}, published\n           {newsArticle.datePublished}. Description:\n           {newsArticle.description}. Corresponding image is      \n           {imageDescription}\";\n```"]