- en: Chapter 5. Case Study – Building Your Own Recommendation Engine
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 5 章. 案例研究 – 构建您自己的推荐引擎
- en: The previous two chapters showed how you how to build, test, and optimize recommender
    systems using R. Although the chapters were full of examples, they were based
    on datasets provided by an R package. The data was structured using redyal and
    was ready to be processed. However, in real life, the data preparation is an important,
    time-consuming, and tough step.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 前两章展示了如何使用 R 语言构建、测试和优化推荐系统。尽管这些章节充满了示例，但它们基于 R 包提供的数据集。数据使用 redyal 结构化，并已准备好处理。然而，在现实生活中，数据准备是一个重要、耗时且困难的步骤。
- en: Another limitation of the previous examples is that they are based on the ratings
    only. In most of the situations, there are other data sources such as item descriptions
    and user profiles. A good solution comes from a combination of all the relevant
    information.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 之前示例的另一个局限性是它们仅基于评分。在大多数情况下，还有其他数据源，如项目描述和用户资料。一个很好的解决方案是结合所有相关信息。
- en: 'This chapter shows a practical example in which we will build and optimize
    a recommender system, starting from raw data. This chapter will cover the following
    topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将展示一个实际示例，我们将从原始数据开始构建和优化推荐系统。本章将涵盖以下主题：
- en: Preparing the data to build a recommendation engine
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 准备数据以构建推荐引擎
- en: Exploring the data through visualization techniques
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过可视化技术探索数据
- en: Choosing and building a recommendation model
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择和构建推荐模型
- en: Optimizing the performance of the recommendation model by setting its parameters
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过设置其参数来优化推荐模型的性能
- en: In the end, we will build an engine that generates recommendations.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将构建一个生成推荐的引擎。
- en: Preparing the data
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备数据
- en: Starting from raw data, this section will show you how to prepare the input
    for the recommendation models.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 从原始数据开始，本节将向您展示如何为推荐模型准备输入。
- en: Description of the data
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据描述
- en: The data is about Microsoft users visiting a website during one week. For each
    user, the data displays which areas the users visited. For the sake of simplicity,
    from now on we will refer to the website areas with the term "items".
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 数据是关于一周内访问网站的微软用户。对于每个用户，数据显示了用户访问的区域。为了简化，从现在起我们将使用“项目”一词来指代网站区域。
- en: There are 5,000 users and they are represented by sequential numbers between
    10,001 and 15,000\. Items are represented by numbers between 1,000 and 1,297,
    even if they are less than 298.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 有 5,000 个用户，它们由 10,001 到 15,000 之间的连续数字表示。项目由 1,000 到 1,297 之间的数字表示，即使它们小于 298。
- en: 'The dataset is an unstructured text file. Each record contains a number of
    fields between 2 and 6\. The first field is a letter defining what the record
    contains. There are three main types of records, which are as follows:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 数据集是一个未结构化的文本文件。每个记录包含 2 到 6 个字段。第一个字段是一个字母，定义了记录包含的内容。主要有三种类型的记录，如下所示：
- en: '**Attribute (A)**: This is the description of the website area'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**属性 (A)**：这是网站区域的描述'
- en: '**Case (C)**: This is the case for each user, containing its ID'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**案例 (C)**：这是每个用户的案例，包含其 ID'
- en: '**Vote (V)**: This is the vote lines for the case'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**投票 (V)**：这是案例的投票行'
- en: Each case record is followed by one or more votes, and there is just one case
    for each user.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 每个案例记录后面跟着一个或多个投票，每个用户只有一个案例。
- en: Our target is to recommend each user to explore some areas of the website that
    they haven't explored yet.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的目标是为每个用户推荐他们尚未探索的网站区域。
- en: Importing the data
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 导入数据
- en: 'This section will show you how to import data. First, let''s load the packages
    that we will use:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将向您展示如何导入数据。首先，让我们加载我们将要使用的包：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The preceding code is explained in the following points:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码将在以下要点中解释：
- en: '`data.table`: This manipulates the data'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`data.table`：这个包用于处理数据'
- en: '`ggplot2`: This builds charts'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ggplot2`：这个包用于制作图表'
- en: '`recommenderlab`: This builds recommendation engines'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`recommenderlab`：这个包用于构建推荐引擎'
- en: '`countrycode`: This package contains the country names'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`countrycode`：这个包包含国家名称'
- en: 'Then, let''s load the table into memory. If the text file is already in our
    working directory, it''s enough to define its name. Otherwise, we need to define
    its full path:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，让我们将表格加载到内存中。如果文本文件已经在我们的工作目录中，只需定义其名称即可。否则，我们需要定义其完整路径：
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The rows contain different numbers of columns, which means that the data is
    unstructured. However, there are at most six columns, so we can load the file
    into a table using `read.csv`. The rows with fewer than six fields will have just
    empty values:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '| V1 | V2 | V3 | V4 | V5 | V6 |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- | --- | --- |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
- en: '| `I` | `4` | `www.microsoft.com` | `created by getlog.pl` |   |   |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
- en: '| `T` | `1` | `VRoot` | `0` | `0` | `VRoot` |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
- en: '| `N` | `0` | `0` |   |   |   |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
- en: '| `N` | `1` | `1` |   |   |   |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
- en: '| `T` | `2` | `Hide1` | `0` | `0` | `Hide` |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
- en: '| `N` | `0` | `0` |   |   |   |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
- en: 'The first two columns contain the user IDs and their purchases. We can just
    drop the other columns:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In order to process the data more easily, we can convert it into a data table,
    using this command:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The columns are as follows:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: '`category`: This is a letter specifying the content of the column. The columns
    containing a user or an item ID belong to the categories C and V, respectively.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`value`: This is a number specifying the user or item ID.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We can assign the column names and select the rows containing either users
    or items:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '| category | value |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
- en: '| `C` | `10001` |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
- en: '| `V` | `1038` |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
- en: '| `V` | `1026` |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
- en: '| `V` | `1034` |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
- en: '| `C` | `10002` |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
- en: '| `V` | `1008` |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
- en: The `table_users` object contains structured data, which is our starting point
    to define a rating matrix.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: Defining a rating matrix
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Our target is to define a table having a row for each item and a column for
    each purchase. For each user, `table_users` contains its ID and purchases in separate
    rows. In each block or rows, the first column contains the user ID and the other
    contains the item IDs.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: 'You can use the following steps to define a rating matrix:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: Label the cases.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Define a table in the long format.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Define a table in the wide format.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Define the rating matrix.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In order to reshape the table, the first step is to define a field called `chunk_user`
    containing an incremental number for each user. The `category == "C"` condition
    is true for the user rows, which are the first rows of the chunks. Using `cumsum`,
    we are incrementing the index of 1 whenever there is a row with a new user:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '| category | value | chunk_user |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
- en: '| `C` | `10001` | `1` |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
- en: '| `V` | `1038` | `1` |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
- en: '| `V` | `1026` | `1` |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
- en: '| `V` | `1034` | `1` |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
- en: '| `C` | `10002` | `2` |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
- en: '| `V` | `1008` | `2` |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
- en: 'The next step is to define a table in which rows correspond to the purchases.
    We need a column with the user ID and a column with the item ID. The new table
    is called `table_long`, because it''s in a `long` format:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '| chunk_user | user | item |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
- en: '| `1` | `10001` | `1038` |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
- en: '| `1` | `10001` | `1026` |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
- en: '| `1` | `10001` | `1034` |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
- en: '| `2` | `10002` | `1008` |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
- en: '| `2` | `10002` | `1056` |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
- en: '| `2` | `10002` | `1032` |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
- en: 'Now, we can define a table having a row for each user and a column for each
    item. The values are equal to 1 if the item has been purchased, and 0 otherwise.
    We can build the table using the `reshape` function. Its inputs are as follows:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: '`data`: This is the table in the `long` format.'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`data`：这是`long`格式的表。'
- en: '`direction`: This shows whether we are reshaping from long to wide or otherwise.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`direction`：这显示了我们是将数据从长格式转换为宽格式还是其他方式。'
- en: '`idvar`: This is the variable identifying the group, which, in this case, is
    the user.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`idvar`：这是标识组的变量，在这种情况下，是用户。'
- en: '`timevar`: This is the variable identifying the record within the same group.
    In this case, it''s the item.'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`timevar`：这是标识同一组内记录的变量。在这种情况下，它是项目。'
- en: '`v.names`: This is name of the values. In this case, it''s the rating that
    is always equal to one. Missing user-item combinations will be NA values.'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`v.names`：这是值的名称。在这种情况下，它是始终等于一的评分。缺失的用户-项目组合将是NA值。'
- en: 'After defining the column `value` equal to `1`, we can build `table_wide` using
    `reshape`:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在将列`value`设置为`1`后，我们可以使用`reshape`构建`table_wide`：
- en: '[PRE8]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '| chunk_user | user | value.1038 | value.1026 | value.1034 |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| chunk_user | user | value.1038 | value.1026 | value.1034 |'
- en: '| --- | --- | --- | --- | --- |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- |'
- en: '| `1` | `10001` | `1` | `1` | `1` |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '| `1` | `10001` | `1` | `1` | `1` |'
- en: '| `2` | `10002` | `NA` | `NA` | `NA` |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '| `2` | `10002` | `NA` | `NA` | `NA` |'
- en: '| `3` | `10003` | `1` | `1` | `NA` |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '| `3` | `10003` | `1` | `1` | `NA` |'
- en: '| `4` | `10004` | `NA` | `NA` | `NA` |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '| `4` | `10004` | `NA` | `NA` | `NA` |'
- en: '| `5` | `10005` | `1` | `1` | `1` |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '| `5` | `10005` | `1` | `1` | `1` |'
- en: '| `6` | `10006` | `NA` | `NA` | `1` |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '| `6` | `10006` | `NA` | `NA` | `1` |'
- en: 'In order to build the rating matrix, we need to keep only the columns containing
    ratings. In addition, the user name will be the matrix row names, so we need to
    store them in the `vector_users` vector:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 为了构建评分矩阵，我们需要只保留包含评分的列。此外，用户名将是矩阵的行名，因此我们需要将它们存储在`vector_users`向量中：
- en: '[PRE9]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'In order to have the column names equal to the item names, we need from the
    `value` prefix. For this purpose, we can use the `substring` function:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使列名与项目名相等，我们需要从`value`前缀中获取。为此，我们可以使用`substring`函数：
- en: '[PRE10]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We need to store the rating matrix within a `recommenderlab` object. For this
    purpose, we need to convert `table_wide` in a matrix first. In addition, we need
    to set the row names equal to the user names:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要在`recommenderlab`对象中存储评分矩阵。为此，我们首先需要将`table_wide`转换为矩阵。此外，我们还需要将行名设置为用户名：
- en: '[PRE11]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '| user | 1038 | 1026 | 1034 | 1008 | 1056 | 1032 |'
  id: totrans-107
  prefs: []
  type: TYPE_TB
  zh: '| user | 1038 | 1026 | 1034 | 1008 | 1056 | 1032 |'
- en: '| --- | --- | --- | --- | --- | --- | --- |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- |'
- en: '| **10001** | `1` | `1` | `1` | `NA` | `NA` | `NA` |'
  id: totrans-109
  prefs: []
  type: TYPE_TB
  zh: '| **10001** | `1` | `1` | `1` | `NA` | `NA` | `NA` |'
- en: '| **10002** | `NA` | `NA` | `NA` | `1` | `1` | `1` |'
  id: totrans-110
  prefs: []
  type: TYPE_TB
  zh: '| **10002** | `NA` | `NA` | `NA` | `1` | `1` | `1` |'
- en: '| **10003** | `1` | `1` | `NA` | `NA` | `NA` | `NA` |'
  id: totrans-111
  prefs: []
  type: TYPE_TB
  zh: '| **10003** | `1` | `1` | `NA` | `NA` | `NA` | `NA` |'
- en: '| **10004** | `NA` | `NA` | `NA` | `NA` | `NA` | `NA` |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
  zh: '| **10004** | `NA` | `NA` | `NA` | `NA` | `NA` | `NA` |'
- en: '| **10005** | `1` | `1` | `1` | `1` | `NA` | `NA` |'
  id: totrans-113
  prefs: []
  type: TYPE_TB
  zh: '| **10005** | `1` | `1` | `1` | `1` | `NA` | `NA` |'
- en: '| **10006** | `NA` | `NA` | `1` | `NA` | `NA` | `NA` |'
  id: totrans-114
  prefs: []
  type: TYPE_TB
  zh: '| **10006** | `NA` | `NA` | `1` | `NA` | `NA` | `NA` |'
- en: 'The last step is coercing `matrix_wide` into a binary rating matrix using `as`,
    in the following way:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是使用`as`将`matrix_wide`强制转换为二进制评分矩阵，如下所示：
- en: '[PRE12]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Let''s take a look at the matrix using `image`:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用`image`查看矩阵：
- en: '[PRE13]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The following image shows the binary rating matrix:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 下图显示了二进制评分矩阵：
- en: '![Defining a rating matrix](img/B03888_05_01.jpg)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![定义评分矩阵](img/B03888_05_01.jpg)'
- en: 'As expected, the matrix is sparse. We can also visualize the distributions
    of the number of users purchasing an item:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 如预期的那样，矩阵是稀疏的。我们还可以可视化购买某个物品的用户数量的分布：
- en: '[PRE14]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The following image displays the distribution of the number of users:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 下图显示了用户数量的分布：
- en: '![Defining a rating matrix](img/B03888_05_02.jpg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![定义评分矩阵](img/B03888_05_02.jpg)'
- en: 'There are some outliers, that is, items purchased by many users. Let''s visualize
    the distribution excluding them:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些异常值，即被许多用户购买的物品。让我们排除它们来可视化分布：
- en: '[PRE15]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The following image displays the distribution of the numbers of users:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 下图显示了用户数量的分布：
- en: '![Defining a rating matrix](img/B03888_05_03.jpg)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![定义评分矩阵](img/B03888_05_03.jpg)'
- en: 'There are many items that have been purchased by a few users only, and we won''t
    recommend them. Since they increase the computational time, we can just remove
    them by defining a minimum number of purchases, for example, `5`:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多物品只被少数用户购买，我们不会推荐它们。由于它们增加了计算时间，我们可以通过定义最小购买数量来删除它们，例如，`5`：
- en: '[PRE16]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Now, we have 166 items, compared to the initial 236\. As regards users, we
    want to recommend items to everyone. However, there might be users that have purchased
    only items that we removed. Let''s check it:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们有166个项目，与最初的236个相比。至于用户，我们希望向每个人推荐项目。然而，可能有一些用户只购买了我们已经删除的项目。让我们检查一下：
- en: '[PRE17]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'There are 15 users with no purchases. These purchases should be removed. In
    addition, users who have purchased just a few items are difficult to deal with.
    Therefore, we only keep users that have purchased at least five items:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 有15个用户没有购买任何东西。这些购买应该被删除。此外，只购买了几件商品的用户的处理比较困难。因此，我们只保留至少购买过五件商品的用户：
- en: '[PRE18]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Extracting item attributes
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 提取项目属性
- en: 'The `table_in` raw data contains some records starting with `A`, and they display
    some information about the items. In order to extract these records, we can convert
    `table_in` into a data table and extract the rows having `A` in the first column:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '`table_in`原始数据中包含一些以`A`开头的记录，并显示有关项目的一些信息。为了提取这些记录，我们可以将`table_in`转换为数据表，并提取第一列包含`A`的行：'
- en: '[PRE19]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '| V1 | V2 | V3 | V4 | V5 |'
  id: totrans-138
  prefs: []
  type: TYPE_TB
  zh: '| V1 | V2 | V3 | V4 | V5 |'
- en: '| --- | --- | --- | --- | --- |'
  id: totrans-139
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- |'
- en: '| `A` | `1277` | `1` | `NetShow for PowerPoint` | `/stream` |'
  id: totrans-140
  prefs: []
  type: TYPE_TB
  zh: '| `A` | `1277` | `1` | `NetShow for PowerPoint` | `/stream` |'
- en: '| `A` | `1253` | `1` | `MS Word Development` | `/worddev` |'
  id: totrans-141
  prefs: []
  type: TYPE_TB
  zh: '| `A` | `1253` | `1` | `MS Word Development` | `/worddev` |'
- en: '| `A` | `1109` | `1` | `TechNet (World Wide Web Edition)` | `/technet` |'
  id: totrans-142
  prefs: []
  type: TYPE_TB
  zh: '| `A` | `1109` | `1` | `TechNet (World Wide Web Edition)` | `/technet` |'
- en: '| `A` | `1038` | `1` | `SiteBuilder Network Membership` | `/sbnmember` |'
  id: totrans-143
  prefs: []
  type: TYPE_TB
  zh: '| `A` | `1038` | `1` | `SiteBuilder Network Membership` | `/sbnmember` |'
- en: '| `A` | `1205` | `1` | `Hardware Supprt` | `/hardwaresupport` |'
  id: totrans-144
  prefs: []
  type: TYPE_TB
  zh: '| `A` | `1205` | `1` | `Hardware Supprt` | `/hardwaresupport` |'
- en: '| `A` | `1076` | `1` | `NT Workstation Support` | `/ntwkssupport` |'
  id: totrans-145
  prefs: []
  type: TYPE_TB
  zh: '| `A` | `1076` | `1` | `NT Workstation Support` | `/ntwkssupport` |'
- en: 'The relevant columns are:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 相关的列是：
- en: '**V2**: Item ID'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**V2**: 项目ID'
- en: '**V4**: Item description'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**V4**: 项目描述'
- en: '**V5**: Web page URL'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**V5**: 网页URL'
- en: 'In order to have a more clear table, we can extract and rename them. In addition,
    we can sort the table by item ID:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使表格更清晰，我们可以提取并重命名它们。此外，我们可以按项目ID对表格进行排序：
- en: '[PRE20]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '| id | description | url |'
  id: totrans-152
  prefs: []
  type: TYPE_TB
  zh: '| id | description | url |'
- en: '| --- | --- | --- |'
  id: totrans-153
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `1000` | `regwiz` | `/regwiz` |'
  id: totrans-154
  prefs: []
  type: TYPE_TB
  zh: '| `1000` | `regwiz` | `/regwiz` |'
- en: '| `1001` | `Support desktop` | `/support` |'
  id: totrans-155
  prefs: []
  type: TYPE_TB
  zh: '| `1001` | `Support desktop` | `/support` |'
- en: '| `1002` | `End user produced view` | `/athome` |'
  id: totrans-156
  prefs: []
  type: TYPE_TB
  zh: '| `1002` | `End user produced view` | `/athome` |'
- en: '| `1003` | `Knowledge base` | `/kb` |'
  id: totrans-157
  prefs: []
  type: TYPE_TB
  zh: '| `1003` | `Knowledge base` | `/kb` |'
- en: '| `1004` | `Microsoft.com search` | `/search` |'
  id: totrans-158
  prefs: []
  type: TYPE_TB
  zh: '| `1004` | `Microsoft.com search` | `/search` |'
- en: '| `1005` | `Norway` | `/norge` |'
  id: totrans-159
  prefs: []
  type: TYPE_TB
  zh: '| `1005` | `Norway` | `/norge` |'
- en: 'We need to identify one or more features describing the items. If we look at
    the table, we can identify two categories of web pages:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要识别一个或多个描述项目的特征。如果我们看一下表格，我们可以识别出两种网页类别：
- en: Microsoft product
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 微软产品
- en: Geographic location
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 地理位置信息
- en: 'We can identify the records containing a geographic location, and consider
    the remaining as products. For this purpose, we can start defining the field `category`
    that, at the moment, is equal to `product` for all the records:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以识别包含地理位置信息的记录，并将剩余的视为产品。为此，我们可以开始定义字段`category`，目前，对于所有记录，该字段等于`product`：
- en: '[PRE21]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The country code package provides us with the `countrycode_data` object that
    contains most of the country names. We can define the `name_countries` vector
    that contains the names of countries and geographic locations. Then, we can categorize
    as `region` all the records whose description is in `name_countries`:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 国家代码包为我们提供了包含大多数国家名称的`countrycode_data`对象。我们可以定义一个包含国家和地理位置名称的`name_countries`向量。然后，我们可以将所有描述在`name_countries`中的记录分类为`region`：
- en: '[PRE22]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'There are other records containing the word `region`. We can identify them
    through a regular expression using `grepl`:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 有其他记录包含单词`region`。我们可以通过使用`grepl`的正则表达式来识别它们：
- en: '[PRE23]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '| V2 | description | url | category |'
  id: totrans-169
  prefs: []
  type: TYPE_TB
  zh: '| V2 | description | url | category |'
- en: '| --- | --- | --- | --- |'
  id: totrans-170
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| `1000` | `regwiz` | `/regwiz` | `product` |'
  id: totrans-171
  prefs: []
  type: TYPE_TB
  zh: '| `1000` | `regwiz` | `/regwiz` | `product` |'
- en: '| `1001` | `Support Desktop` | `/support` | `product` |'
  id: totrans-172
  prefs: []
  type: TYPE_TB
  zh: '| `1001` | `Support Desktop` | `/support` | `product` |'
- en: '| `1002` | `End User Produced View` | `/athome` | `product` |'
  id: totrans-173
  prefs: []
  type: TYPE_TB
  zh: '| `1002` | `End User Produced View` | `/athome` | `product` |'
- en: '| `1003` | `Knowledge Base` | `/kb` | `product` |'
  id: totrans-174
  prefs: []
  type: TYPE_TB
  zh: '| `1003` | `Knowledge Base` | `/kb` | `product` |'
- en: '| `1004` | `Microsoft.com Search` | `/search` | `product` |'
  id: totrans-175
  prefs: []
  type: TYPE_TB
  zh: '| `1004` | `Microsoft.com Search` | `/search` | `product` |'
- en: '| `1005` | `Norway` | `/norge` | `region` |'
  id: totrans-176
  prefs: []
  type: TYPE_TB
  zh: '| `1005` | `Norway` | `/norge` | `region` |'
- en: 'Let''s take a look at the result and find out the number of items we have for
    each category:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下结果，并找出每个类别中我们有多少个项目：
- en: '[PRE24]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '| category | n_items |'
  id: totrans-179
  prefs: []
  type: TYPE_TB
  zh: '| category | n_items |'
- en: '| --- | --- |'
  id: totrans-180
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `product` | `248` |'
  id: totrans-181
  prefs: []
  type: TYPE_TB
  zh: '| `product` | `248` |'
- en: '| `region` | `46` |'
  id: totrans-182
  prefs: []
  type: TYPE_TB
  zh: '| `region` | `46` |'
- en: About 80 percent of the web pages are products, and the remaining 20 percent
    are regions.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 大约80%的网页是产品，其余20%是地区。
- en: We are now ready to build recommendation models.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已准备好构建推荐模型。
- en: Building the model
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建模型
- en: This section will show you how to build a recommendation model using item descriptions
    and user purchases. The model combines item-based collaborative filtering with
    some information about the items. We will include the item description using a
    monolithic hybrid system with feature combination. The recommender will learn
    from the two data sources in two separate stages.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将向您展示如何使用商品描述和用户购买构建推荐模型。该模型结合了基于商品的协同过滤和一些关于商品的信息。我们将使用具有特征组合的单体混合系统包含商品描述。推荐器将在两个不同的阶段从两个数据源中学习。
- en: 'Following the approach described in [Chapter 3](ch03.html "Chapter 3. Recommender
    Systems"), *Recommender Systems*, let''s split the data into the training and
    the test set:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 按照第3章中描述的方法，[第3章](ch03.html "第3章。推荐系统")，*推荐系统*，让我们将数据分为训练集和测试集：
- en: '[PRE25]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Now, we can build an IBCF model using `Recommender`. Since the rating matrix
    is binary, we will set the distance method to `Jaccard`. For more details, look
    at the *Collaborative filtering on binary data* section in [Chapter 3](ch03.html
    "Chapter 3. Recommender Systems"), *Recommender Systems*. The remaining parameters
    are left to their defaults:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以使用`Recommender`构建一个IBCF模型。由于评分矩阵是二进制的，我们将距离方法设置为`Jaccard`。更多详情，请参阅第3章中关于[第3章](ch03.html
    "第3章。推荐系统")，*推荐系统*的*二进制数据上的协同过滤*部分。其余参数保持默认值：
- en: '[PRE26]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The engine of IBCF is based on a similarity matrix about the items. The distances
    are computed from the purchases. The more the number of items purchased by the
    same users, the more similar they are.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: IBCF的引擎基于一个关于商品的相似度矩阵。距离是从购买中计算出来的。相同用户购买的物品越多，它们就越相似。
- en: 'We can extract the matrix from the `sim` element in the slot model. Let''s
    take a look at it:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以从槽模型中的`sim`元素中提取矩阵。让我们看看它：
- en: '[PRE27]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The matrix belongs to the `dgCMatrix` class, and it is square. We can visualize
    it using `image`:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 该矩阵属于`dgCMatrix`类，并且是方阵。我们可以使用`image`可视化它：
- en: '[PRE28]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The following image is the output of the preceding code:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的图像是前面代码的输出：
- en: '![Building the model](img/B03888_05_04.jpg)'
  id: totrans-197
  prefs: []
  type: TYPE_IMG
  zh: '![构建模型](img/B03888_05_04.jpg)'
- en: 'We can''t identify any clear pattern, and it''s because the items are not sorted.
    Let''s take a look at the range of values:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 我们无法识别任何明显的模式，这是因为商品没有排序。让我们看看值的范围：
- en: '[PRE29]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: All the distances are between 0 and 1.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 所有距离都在0到1之间。
- en: 'Our target is to combine the distance matrix with the item descriptions, via
    the following steps:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的目标是将距离矩阵与商品描述结合，通过以下步骤：
- en: Define a similarity matrix based on the purchases.
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 基于购买定义一个相似度矩阵。
- en: Define a similarity matrix based on the item descriptions.
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 基于商品描述定义一个相似度矩阵。
- en: Combine the two matrices.
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 结合两个矩阵。
- en: 'Starting from `recc_model`, we can define the purchases similarity matrix.
    All we need to do is to convert the `dgCMatrix` object into `matrix`:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 从`recc_model`开始，我们可以定义购买相似度矩阵。我们所需做的只是将`dgCMatrix`对象转换为`matrix`：
- en: '[PRE30]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'In order to build the matrix based on item descriptions, we can use the `dist`
    function. Given that it''s based on a category column only, the distance will
    be as follows:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 为了根据商品描述构建矩阵，我们可以使用`dist`函数。鉴于它仅基于类别列，距离将如下所示：
- en: 1, if the two items belong to the same category
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1，如果两个商品属于同一类别
- en: 0, if the two items belong to different categories
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 0，如果两个商品属于不同类别
- en: 'We need to build a similarity matrix, and we have a distance matrix. Since
    distances are between 0 and 1, we can just use `1 - dist()`. All the operations
    are performed within the data table:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要构建一个相似度矩阵，我们有一个距离矩阵。由于距离在0到1之间，我们可以直接使用`1 - dist()`。所有操作都在数据表中执行：
- en: '[PRE31]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The `dist_category` raw data is a `dist` object that can be easily converted
    into a matrix using the `as()` function :'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: '`dist_category`原始数据是一个`dist`对象，可以使用`as()`函数轻松转换为矩阵：'
- en: '[PRE32]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Let''s compare the dimensions of `dist_category` with `dist_ratings`:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们比较`dist_category`和`dist_ratings`的维度：
- en: '[PRE33]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: The `dist_category` table has more rows and columns, and the reason is that
    it contains all the items, whereas `dist_ratings` contains only the ones that
    have been purchased.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '`dist_category`表有更多的行和列，原因是它包含所有商品，而`dist_ratings`只包含那些已经被购买的商品。'
- en: 'In order to combine `dist_category` with `dist_ratings`, we need to have the
    same items. In addition, they need to be sorted in the same way. We can match
    them using the item names using these steps:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将`dist_category`与`dist_ratings`结合，我们需要有相同的项。此外，它们需要按相同的方式排序。我们可以使用以下步骤使用项目名称匹配它们：
- en: Make sure that both the matrices have the item names in their row and column
    names.
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保两个矩阵的行和列名中都包含项目名称。
- en: Extract the row and column names from `dist_ratings`.
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`dist_ratings`中提取行和列名。
- en: Subset and order `dist_category` according to the names of `dist_ratings`.
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据`dist_ratings`的名称子集和排序`dist_category`。
- en: 'The `dist_ratings` table already contains the row and column names. We need
    to add them to `dist_category`, starting from `table_items`:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: '`dist_ratings`表格已经包含了行和列名。我们需要从`table_items`开始将它们添加到`dist_category`中：'
- en: '[PRE34]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Now, it''s sufficient to extract the names from `dist_ratings` and subset `dist_category`:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们只需要从`dist_ratings`中提取名称并子集`dist_category`：
- en: '[PRE35]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Let''s check whether the two matrices match:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查两个矩阵是否匹配：
- en: '[PRE36]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Everything is identical, so they match. Let''s take a look at `dist_category`:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 一切都是相同的，所以它们匹配。让我们看看`dist_category`：
- en: '[PRE37]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'The following image is the output of the preceding code:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的图像是前面代码的输出：
- en: '![Building the model](img/B03888_05_05.jpg)'
  id: totrans-230
  prefs: []
  type: TYPE_IMG
  zh: '![构建模型](img/B03888_05_05.jpg)'
- en: The matrix contains only 0s and 1s, and it's based on two categories, so there
    are clear patterns. In addition, we can notice that the matrix is symmetric.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 矩阵只包含0和1，它基于两个类别，因此有明显的模式。此外，我们可以注意到矩阵是对称的。
- en: 'We need to combine the two tables, and we can do it with a weighted average.
    Since `dist_category` takes account of two categories of items only, it''s better
    not to give it too much relevance. For instance, we can set its weight to 25 percent:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要合并两个表，我们可以通过加权平均来实现。由于`dist_category`只考虑两种项目类别，因此最好不要给它太多的相关性。例如，我们可以将其权重设置为25%：
- en: '[PRE38]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Let''s take a look at the `dist_tot` matrix using `image`:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看使用`image`的`dist_tot`矩阵：
- en: '[PRE39]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'The following image is the output of the preceding code:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的图像是前面代码的输出：
- en: '![Building the model](img/B03888_05_06.jpg)'
  id: totrans-237
  prefs: []
  type: TYPE_IMG
  zh: '![构建模型](img/B03888_05_06.jpg)'
- en: We can see some white dots representing items that are very similar. In addition,
    we can still see the patterns of `dist_category` in the background.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到一些代表非常相似项目的白色点。此外，我们还可以在背景中看到`dist_category`的模式。
- en: 'Now, we can include the new matrix within `recc_model`. For this purpose, it''s
    sufficient to convert `dist_tot` into `dgCMatrix` and insert it in `recc_model`:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以在`recc_model`中包含新的矩阵。为此，将`dist_tot`转换为`dgCMatrix`并插入到`recc_model`中：
- en: '[PRE40]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'As shown in [Chapter 3](ch03.html "Chapter 3. Recommender Systems"), *Recommender
    Systems*, we can recommend items using `predict()`:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 如[第3章](ch03.html "第3章。推荐系统")中所示，*推荐系统*，我们可以使用`predict()`来推荐项目：
- en: '[PRE41]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'The `itemLabels` slot of `recc_predicted` contains the item names, that is,
    their code:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: '`recc_predicted`的`itemLabels`槽包含项目名称，即它们的代码：'
- en: '[PRE42]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'In order to display the item description, we can use `table_items`. All we
    need to do is make sure that the items are ordered in the same way as `itemLabels`.
    For this purpose, we will prepare a data frame containing the item information.
    We will also make sure that it''s sorted in the same way as the item labels using
    the following steps:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 为了显示项目描述，我们可以使用`table_items`。我们只需要确保项目按与`itemLabels`相同的方式排序。为此，我们将准备一个包含项目信息的数据框。我们还将确保它按项目标签的相同方式排序，以下步骤：
- en: Define a data frame having a column with the ordered item labels.
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个包含有序项目标签列的数据框。
- en: '[PRE43]'
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Left-join between `table_labels` and `table_items`. Note the argument `sort
    = FALSE` that does not let us re-sort the table:'
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`table_labels`和`table_items`之间进行左连接。注意参数`sort = FALSE`不允许我们重新排序表格：
- en: '[PRE44]'
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Convert the description from factor to character:'
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将描述从因子转换为字符：
- en: '[PRE45]'
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Let''s take a look at `table_labels`:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看`table_labels`：
- en: '[PRE46]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '| id | description | url | category |'
  id: totrans-254
  prefs: []
  type: TYPE_TB
  zh: '| id | description | url | category |'
- en: '| --- | --- | --- | --- |'
  id: totrans-255
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| `1038` | `SiteBuilder Network Membership` | `/sbnmember` | `product` |'
  id: totrans-256
  prefs: []
  type: TYPE_TB
  zh: '| `1038` | `SiteBuilder Network Membership` | `/sbnmember` | `product` |'
- en: '| `1026` | `Internet Site Construction for Developers` | `/sitebuilder` | `product`
    |'
  id: totrans-257
  prefs: []
  type: TYPE_TB
  zh: '| `1026` | `Internet Site Construction for Developers` | `/sitebuilder` | `product`
    |'
- en: '| `1034` | `Internet Explorer` | `/ie` | `product` |'
  id: totrans-258
  prefs: []
  type: TYPE_TB
  zh: '| `1034` | `Internet Explorer` | `/ie` | `product` |'
- en: '| `1008` | `Free Downloads` | `/msdownload` | `product` |'
  id: totrans-259
  prefs: []
  type: TYPE_TB
  zh: '| `1008` | `Free Downloads` | `/msdownload` | `product` |'
- en: '| `1056` | `sports` | `/sports` | `product` |'
  id: totrans-260
  prefs: []
  type: TYPE_TB
  zh: '| `1056` | `sports` | `/sports` | `product` |'
- en: '| `1032` | `Games` | `/games` | `product` |'
  id: totrans-261
  prefs: []
  type: TYPE_TB
  zh: '| `1032` | `Games` | `/games` | `product` |'
- en: 'As expected, the table contains the description of the items. Now, we are able
    to extract the recommendations. For instance, we can do it for the first user:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 如预期的那样，表格包含了项目的描述。现在，我们能够提取推荐。例如，我们可以为第一个用户做这件事：
- en: '[PRE47]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Windows family of OSs, Support Desktop, Knowledge Base, Microsoft.com Search,
    Products, and Windows 95.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: Windows操作系统系列、支持桌面、知识库、Microsoft.com 搜索、产品、Windows 95。
- en: Now, we can define a table with the recommendations to all users. Each column
    corresponds to a user and each row to a recommended item. Having set `n_recommended`
    to `10`, the table should have 10 rows. For this purpose, we can use `sapply()`
    For each element of `recc_predicted@items`, we identify the related item descriptions.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以定义一个包含对所有用户推荐的表格。每一列对应一个用户，每一行对应一个推荐的项目。将 `n_recommended` 设置为 `10` 后，表格应该有10行。为此，我们可以使用
    `sapply()`。对于 `recc_predicted@items` 的每个元素，我们识别相关的项目描述。
- en: 'However, the number of recommended items per user is a number between 1 and
    10, which is not the same for each user. In order to define a structured table
    with 10 rows, we need the same number of elements for each user. For this reason,
    we will replace the missing recommendations with empty strings. We can obtain
    it by replicating the empty string with `rep()`:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，每个用户被推荐的项目数量是一个介于1到10之间的数字，对每个用户来说都不相同。为了定义一个有10行的结构化表格，我们需要每个用户有相同数量的元素。因此，我们将缺失的推荐替换为空字符串。我们可以通过使用
    `rep()` 来复制空字符串来获得它：
- en: '[PRE48]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Let''s take a look at the recommendations for the first three users:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看前三个用户的推荐：
- en: '[PRE49]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '| Windows family of OSs | Products | Developer workshop |'
  id: totrans-270
  prefs: []
  type: TYPE_TB
  zh: '| Windows操作系统系列 | 产品 | 开发者工作坊 |'
- en: '| --- | --- | --- |'
  id: totrans-271
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Support Desktop | MS Word | SiteBuilder Network Membership |'
  id: totrans-272
  prefs: []
  type: TYPE_TB
  zh: '| 支持桌面 | MS Word | 站点构建网络会员 |'
- en: '| Knowledge Base | isapi | isapi |'
  id: totrans-273
  prefs: []
  type: TYPE_TB
  zh: '| 知识库 | isapi | isapi |'
- en: '| Microsoft.com Search | regwiz | Microsoft.com Search |'
  id: totrans-274
  prefs: []
  type: TYPE_TB
  zh: '| Microsoft.com 搜索 | regwiz | Microsoft.com 搜索 |'
- en: '| Products | Windows family of OSs | Windows Family of OSs |'
  id: totrans-275
  prefs: []
  type: TYPE_TB
  zh: '| 产品 | Windows操作系统系列 | Windows操作系统系列 |'
- en: '| Windows 95 | Microsoft.com Search | Web Site Builder''s Gallery |'
  id: totrans-276
  prefs: []
  type: TYPE_TB
  zh: '| Windows 95 | Microsoft.com 搜索 | 网站构建者画廊 |'
- en: 'We can notice that some items have been recommended to the three of them: Products
    and Support Desktop. Therefore, we suspect that some items are much more likely
    to be recommended.'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以注意到，有些项目被推荐给了三个用户：产品和支持桌面。因此，我们怀疑有些项目更有可能被推荐。
- en: 'Just like we did in [Chapter 3](ch03.html "Chapter 3. Recommender Systems"),
    *Recommender Systems*, we can explore the output. For each item, we can count
    how many times it has been recommended:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 就像我们在[第3章](ch03.html "第3章。推荐系统")中做的那样，*推荐系统*，我们可以探索输出。对于每个项目，我们可以计算它被推荐了多少次：
- en: '[PRE50]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'In order to visualize the result, we `bin_recomm_per_item` using `cut()`:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 为了可视化结果，我们使用 `cut()` 对 `bin_recomm_per_item` 进行操作：
- en: '[PRE51]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Using `qplot`, we can visualize the `recomm_per_item` distribution:'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `qplot`，我们可以可视化 `recomm_per_item` 的分布：
- en: '[PRE52]'
  id: totrans-283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'The following image displays the recommendations per item:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图像显示了每个项目的推荐：
- en: '![Building the model](img/B03888_05_07.jpg)'
  id: totrans-285
  prefs: []
  type: TYPE_IMG
  zh: '![构建模型](img/B03888_05_07.jpg)'
- en: Most of the items have been recommended 10 times or fewer, and a few of them
    have more than 100 recommendations. The distribution has a long tail.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数项目被推荐了10次或更少，而其中一些项目被推荐了超过100次。分布具有长尾。
- en: 'We can also identify the most popular items by sorting `recomm_per_item`:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以通过排序 `recomm_per_item` 来识别最受欢迎的项目：
- en: '[PRE53]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '| name | n_recomm |'
  id: totrans-289
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | n_recomm |'
- en: '| --- | --- |'
  id: totrans-290
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `Internet Explorer` | `126` |'
  id: totrans-291
  prefs: []
  type: TYPE_TB
  zh: '| `Internet Explorer` | `126` |'
- en: '| `Windows Family of OSs` | `120` |'
  id: totrans-292
  prefs: []
  type: TYPE_TB
  zh: '| `Windows操作系统系列` | `120` |'
- en: '| `Knowledge Base` | `118` |'
  id: totrans-293
  prefs: []
  type: TYPE_TB
  zh: '| `知识库` | `118` |'
- en: '| `Products` | `115` |'
  id: totrans-294
  prefs: []
  type: TYPE_TB
  zh: '| `产品` | `115` |'
- en: In this section, we built and explored a hybrid recommender model. The next
    step is to evaluate it and optimize its parameters.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们构建并探索了一个混合推荐模型。下一步是评估它并优化其参数。
- en: Evaluating and optimizing the model
  id: totrans-296
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 评估和优化模型
- en: This section will show you how to evaluate the performance of our recommender.
    Starting from the evaluation, we can try some parameter configurations and choose
    the one performing the best. For more details, see [Chapter 4](ch04.html "Chapter 4. Evaluating
    the Recommender Systems"), *Evaluating the Recommender Systems*.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将向您展示如何评估我们推荐系统的性能。从评估开始，我们可以尝试一些参数配置，并选择表现最好的一个。有关更多详细信息，请参阅[第4章](ch04.html
    "第4章。评估推荐系统")，*评估推荐系统*。
- en: 'The following are the steps to evaluate and optimize the model:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是对模型进行评估和优化的步骤：
- en: Build a function that evaluates the model given a parameter configuration
  id: totrans-299
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建一个给定参数配置评估模型的函数
- en: Use the function to test different parameter configurations and pick the best
    one
  id: totrans-300
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用该函数测试不同的参数配置，并选择最佳配置
- en: Let's go through these steps in detail.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细地走一遍这些步骤。
- en: Building a function to evaluate the model
  id: totrans-302
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建一个用于评估模型的函数
- en: 'This section will show you how to define a function that:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将向您展示如何定义一个函数：
- en: Sets up cross validation using the *k*-fold.
  id: totrans-304
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用*k*-折设置交叉验证。
- en: Builds a hybrid IBCF.
  id: totrans-305
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建一个混合IBCF。
- en: Recommends the items to the users in the test sets.
  id: totrans-306
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向测试集中的用户推荐项目。
- en: Evaluates the recommendation.
  id: totrans-307
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 评估推荐。
- en: 'The inputs of our function are as follows:'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 我们函数的输入如下：
- en: '**Data**: This is the rating matrix table with the item description'
  id: totrans-309
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据**：这是包含项目描述的评分矩阵表'
- en: '**k-fold parameters**: This is the number of folds, the number of items to
    keep in the test set'
  id: totrans-310
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**k-折参数**：这是折数，测试集中保留的项目数'
- en: '**Model parameters**: This is the number of nearest neighbors, weight to the
    description-based distance, number of items to recommend'
  id: totrans-311
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模型参数**：这是最近邻的数量，基于描述的距离权重，推荐的项目数量'
- en: 'Let''s define the function arguments. You can find the description of each
    argument as a comment next to its name:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们定义函数参数。您可以在每个参数名称旁边的注释中找到每个参数的描述：
- en: '[PRE54]'
  id: totrans-313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Now, we can walk through the function body step by step. For a more detailed
    explanation, see the previous section and [Chapter 4](ch04.html "Chapter 4. Evaluating
    the Recommender Systems"), *Evaluating the Recommender Systems*:'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以一步一步地遍历函数体。对于更详细的解释，请参阅上一节和[第4章](ch04.html "第4章。评估推荐系统")，*评估推荐系统*：
- en: 'Using the `evaluationScheme()` function, set-up a *k*-fold. The parameters
    *k* and given are set according to the inputs `n_fold` and `items_to_keep`, respectively.
    The `set.seed(1)` command makes sure that the example is reproducible, that is,
    the random component will be the same if repeated:'
  id: totrans-315
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`evaluationScheme()`函数设置*k*-折。参数*k*和给定分别根据输入`n_fold`和`items_to_keep`设置。`set.seed(1)`命令确保示例可重复，也就是说，如果重复执行，随机成分将是相同的：
- en: '[PRE55]'
  id: totrans-316
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Using `Recommender()`, build an IBCF defining the distance function as `Jaccard`
    and the *k* argument as the `number_neighbors` input:'
  id: totrans-317
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`Recommender()`构建一个定义距离函数为`Jaccard`和*k*参数为`number_neighbors`输入的IBCF：
- en: '[PRE56]'
  id: totrans-318
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Extract the rating-based distance matrix from the `recc_model` model:'
  id: totrans-319
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`recc_model`模型中提取基于评分的距离矩阵：
- en: '[PRE57]'
  id: totrans-320
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Starting from the `table_items` input, define the description-based distance
    matrix:'
  id: totrans-321
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`table_items`输入开始，定义基于描述的距离矩阵：
- en: '[PRE58]'
  id: totrans-322
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Define the distance matrix combining `dist_ratings` and `dist_category`. The
    combination is a weighted average, and the weight is defined by the `weight_description`
    input:'
  id: totrans-323
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义结合`dist_ratings`和`dist_category`的距离矩阵。组合是加权平均，权重由`weight_description`输入定义：
- en: '[PRE59]'
  id: totrans-324
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Predict the test set users with known purchases. Since we are using a table
    with 0 and 1 ratings only, we can specify that we predict the top `n` recommendations
    with the argument `type = "topNList"`. The argument `n`, defining the number of
    items to recommend, comes from the `items_to_recommend` input:'
  id: totrans-325
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 预测具有已知购买的测试集用户。由于我们使用的是只有0和1评分的表格，我们可以指定使用`type = "topNList"`参数预测前`n`个推荐项。定义推荐项目数量的参数`n`来自`items_to_recommend`输入：
- en: '[PRE60]'
  id: totrans-326
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Evaluate the model performance using `calcPredictionAccuracy()`. Specifying
    `byUser = FALSE`, we have a table with the average indices such as precision and
    recall:'
  id: totrans-327
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`calcPredictionAccuracy()`评估模型性能。指定`byUser = FALSE`，我们得到一个包含平均指标（如精确率和召回率）的表格：
- en: '[PRE61]'
  id: totrans-328
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'The function output is the `eval_accuracy` table:'
  id: totrans-329
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 函数输出是`eval_accuracy`表：
- en: '[PRE62]'
  id: totrans-330
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'Now, we can test our function:'
  id: totrans-331
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以测试我们的函数：
- en: '[PRE63]'
  id: totrans-332
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '| index | value |'
  id: totrans-333
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| index | value |'
- en: '| --- | --- |'
  id: totrans-334
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `TP` | `2` |'
  id: totrans-335
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `TP` | `2` |'
- en: '| `FP` | `8` |'
  id: totrans-336
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `FP` | `8` |'
- en: '| `FN` | `1` |'
  id: totrans-337
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `FN` | `1` |'
- en: '| `TN` | `145` |'
  id: totrans-338
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `TN` | `145` |'
- en: '| `precision` | `19%` |'
  id: totrans-339
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `precision` | `19%` |'
- en: '| `recall` | `64%` |'
  id: totrans-340
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `recall` | `64%` |'
- en: '| `TPR` | `64%` |'
  id: totrans-341
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `TPR` | `64%` |'
- en: '| `FPR` | `5%` |'
  id: totrans-342
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `FPR` | `5%` |'
- en: You can find a detailed description of the indices in [Chapter 4](ch04.html
    "Chapter 4. Evaluating the Recommender Systems"), *Evaluating the Recommender
    Systems*.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[第4章](ch04.html "第4章。评估推荐系统")中找到索引的详细描述，*评估推荐系统*。
- en: In this section, we defined a function evaluating our model with given settings.
    This function will help us with parameter optimization.
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们定义了一个使用给定设置的函数来评估我们的模型。这个函数将帮助我们进行参数优化。
- en: Optimizing the model parameters
  id: totrans-345
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 优化模型参数
- en: 'Starting with our `evaluateModel()` function, we can optimize the model parameters.
    In this section, we will optimize these parameters:'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
- en: '`number_neighbors`: This is the number of nearest neighbors of IBCF'
  id: totrans-347
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`weight_description`: This is the weight given to the description-based distance'
  id: totrans-348
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Although we could optimize other parameters, we will just leave them to their
    defaults, for the sake of simplicity.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
- en: Our recommender model combines IBCF with the item descriptions. Therefore, it's
    a good practice to optimize IBCF first, that is, the `number_neighbors` parameter.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we have to decide which values we want to test. We take account of k,
    that is, at most, half of the items, that is, about `80`. On the other hand, we
    exclude values that are smaller than 4, since the algorithm would be too unstable.
    Setting a granularity of `2`, we can generate a vector with the values to test:'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  id: totrans-352
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'Now, we can measure the performance depending on `number_neighbors`. Since
    we are optimizing the IBCF part only, we will set weight_`description = 0`. Using
    `lapply`, we can build a list of elements that contain the performance for each
    value of `nn_to_test`:'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  id: totrans-354
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'Let''s take a look at the first element of the list:'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  id: totrans-356
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '| name | value |'
  id: totrans-357
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-358
  prefs: []
  type: TYPE_TB
- en: '| `TP` | `1.663` |'
  id: totrans-359
  prefs: []
  type: TYPE_TB
- en: '| `FP` | `8.337` |'
  id: totrans-360
  prefs: []
  type: TYPE_TB
- en: '| `FN` | `1.683` |'
  id: totrans-361
  prefs: []
  type: TYPE_TB
- en: '| `TN` | `144.3` |'
  id: totrans-362
  prefs: []
  type: TYPE_TB
- en: '| `precision` | `0.1663` |'
  id: totrans-363
  prefs: []
  type: TYPE_TB
- en: '| `recall` | `0.5935` |'
  id: totrans-364
  prefs: []
  type: TYPE_TB
- en: '| `TPR` | `0.5935` |'
  id: totrans-365
  prefs: []
  type: TYPE_TB
- en: '| `FPR` | `0.05449` |'
  id: totrans-366
  prefs: []
  type: TYPE_TB
- en: The first element contains all the performance metrics. In order to evaluate
    our model, we can use the precision and recall. See [Chapter 4](ch04.html "Chapter 4. Evaluating
    the Recommender Systems"), *Evaluating the Recommender Systems* for more information.
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
- en: 'We can extract a vector of precisions (or recalls) using `sapply`:'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  id: totrans-369
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'In order to analyze the output, we can define a table whose columns are `nn_to_test`,
    precisions, and recalls:'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  id: totrans-371
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'In addition, we can define a performance index that we will optimize. The performance
    index can be a weighted average between the precision and the recall. The weights
    depend on the use case, so we can just leave them to 50 percent:'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  id: totrans-373
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: '| nn | precision | recall | performance |'
  id: totrans-374
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  id: totrans-375
  prefs: []
  type: TYPE_TB
- en: '| `4` | `0.1663` | `0.5935` | `0.3799` |'
  id: totrans-376
  prefs: []
  type: TYPE_TB
- en: '| `6` | `0.1769` | `0.621` | `0.399` |'
  id: totrans-377
  prefs: []
  type: TYPE_TB
- en: '| `8` | `0.1769` | `0.5973` | `0.3871` |'
  id: totrans-378
  prefs: []
  type: TYPE_TB
- en: '| `10` | `0.175` | `0.5943` | `0.3846` |'
  id: totrans-379
  prefs: []
  type: TYPE_TB
- en: '| `12` | `0.174` | `0.5909` | `0.3825` |'
  id: totrans-380
  prefs: []
  type: TYPE_TB
- en: '| `14` | `0.1808` | `0.6046` | `0.3927` |'
  id: totrans-381
  prefs: []
  type: TYPE_TB
- en: The precision is the percentage of recommended items that have been purchased,
    and the recall is the percentage of purchased items that have been recommended.
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
- en: The `table_performance` table contains all the evaluation metrics. Starting
    with it, we can build charts that help us identify the optimal `nn`.
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
- en: 'Before building the charts, let''s define the `convertIntoPercent()` function
    that we will use within the `ggplot2` functions:'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  id: totrans-385
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'We are ready to build the charts. The first chart is about the precision based
    on `nn`. We can build it using these functions:'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
- en: '`qplot`: This builds the scatterplot.'
  id: totrans-387
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`geom_smooth`: This adds a smoothing line.'
  id: totrans-388
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`geom_smooth`：这添加了一条平滑线。'
- en: '`scale_y_continuous`: This changes the `y` scale. In our case, we just want
    to display the percentage.'
  id: totrans-389
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`scale_y_continuous`：这改变了`y`轴的刻度。在我们的例子中，我们只想显示百分比。'
- en: 'The following command consists of the preceding points:'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令包括前面的点：
- en: '[PRE71]'
  id: totrans-391
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'The following image is the output of the preceding code:'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图像是前面代码的输出：
- en: '![Optimizing the model parameters](img/B03888_05_08.jpg)'
  id: totrans-393
  prefs: []
  type: TYPE_IMG
  zh: '![优化模型参数](img/B03888_05_08.jpg)'
- en: The smoothed line grows until the global maximum, which is around `nn = 35`,
    slowly decreases. This index expresses the percentage of recommendations that
    have been successful, so it's useful when there are high costs associated with
    advertising.
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 平滑的线条增长到全局最大值，大约在`nn = 35`，然后缓慢下降。这个指标表示成功推荐的百分比，因此当与广告相关的成本较高时很有用。
- en: 'Let''s take a look at the recall, using the same commands:'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看召回率，使用相同的命令：
- en: '[PRE72]'
  id: totrans-396
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'The following image is the output of the preceding screenshot:'
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图像是前面屏幕截图的输出：
- en: '![Optimizing the model parameters](img/B03888_05_09.jpg)'
  id: totrans-398
  prefs: []
  type: TYPE_IMG
  zh: '![优化模型参数](img/B03888_05_09.jpg)'
- en: The maximum recall is around `nn = 40`. This index expresses the percentage
    of purchases that we recommended, so it's useful if we want to be sure to predict
    most of the purchases.
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 最大召回率大约在`nn = 40`。这个指标表示我们推荐的购买百分比，因此如果我们想确保预测大多数购买很有用。
- en: 'The performance takes account of the precision and the recall at the same time.
    Let''s take a look at it:'
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 性能同时考虑了精确度和召回率。让我们看看它：
- en: '[PRE73]'
  id: totrans-401
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: '![Optimizing the model parameters](img/B03888_05_10.jpg)'
  id: totrans-402
  prefs: []
  type: TYPE_IMG
  zh: '![优化模型参数](img/B03888_05_10.jpg)'
- en: 'The optimal performances are between 30 and 45\. We can identify the best `nn`
    using `which.max`:'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: 最佳性能在30到45之间。我们可以使用`which.max`识别最佳的`nn`：
- en: '[PRE74]'
  id: totrans-404
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'The optimal value is `34`. We optimized the IBCF parameter, and the next step
    is determining the weight of the item description component. First, let''s define
    the weights to try. The possible weights range between 0 and 1, and we just need
    to set the granularity, for instance, `0.05`:'
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 最佳值是`34`。我们优化了IBCF参数，下一步是确定项目描述组件的权重。首先，让我们定义要尝试的权重。可能的权重范围在0到1之间，我们只需要设置粒度，例如，`0.05`：
- en: '[PRE75]'
  id: totrans-406
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'Using `lapply`, we can test the recommender based on the weight:'
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`lapply`，我们可以根据权重测试推荐器：
- en: '[PRE76]'
  id: totrans-408
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'Just like we did earlier, we can build a table containing precisions, recalls,
    and performances:'
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: 就像我们之前做的那样，我们可以构建一个包含精确度、召回率和性能的表格：
- en: '[PRE77]'
  id: totrans-410
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'Now, we can visualize the performance based on the weight through a chart:'
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以通过图表可视化基于权重的性能：
- en: '[PRE78]'
  id: totrans-412
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'The following image is the output of the preceding command:'
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图像是前面命令的输出：
- en: '![Optimizing the model parameters](img/B03888_05_11.jpg)'
  id: totrans-414
  prefs: []
  type: TYPE_IMG
  zh: '![优化模型参数](img/B03888_05_11.jpg)'
- en: The performance is the same for each point, with the exception of the extremes.
    Therefore, the smoothing line is not useful.
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: 性能在每个点上都是相同的，除了极端值。因此，平滑线没有用。
- en: We have the best performance that takes account of both ratings and descriptions.
    The extreme **0.00** corresponds to pure IBCF, and it performs slightly worse
    than the hybrid. The model in the extreme **1.00** is based on the item description
    only, and that's why it performs so badly.
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到了考虑评分和描述的最佳性能。极端的**0.00**对应于纯IBCF，它的表现略逊于混合模型。极端的**1.00**模型仅基于项目描述，这就是为什么它的表现如此糟糕。
- en: The reason why the performance doesn't change much is that the item description
    is based on a binary feature only. If we add other features, we will see a greater
    impact.
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: 性能变化不大的原因是项目描述仅基于二进制特征。如果我们添加其他特征，我们将看到更大的影响。
- en: This section showed you how to optimize our recommendation algorithm on the
    basis of two parameters. A next step could be optimizing on the basis of the remaining
    IBCF parameters and improving the item description.
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 这一节向您展示了如何基于两个参数优化我们的推荐算法。下一步可以是基于剩余的IBCF参数优化并改进项目描述。
- en: Summary
  id: totrans-419
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter showed you how to apply the techniques in a real-life context.
    Starting with raw unstructured data, we built a rating matrix, which is the input
    of collaborative filtering. In addition, we extracted the item description, which
    improved the performance of our model. Using performance evaluations, we optimized
    the model parameters. The same approach can be applied in real-life contexts,
    if properly refined.
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 本章向您展示了如何在现实生活场景中应用这些技术。我们从原始的非结构化数据开始，构建了一个评分矩阵，这是协同过滤的输入。此外，我们还提取了项目描述，这提高了我们模型的表现。通过性能评估，我们优化了模型参数。如果适当细化，这种方法也可以应用于现实生活场景。
- en: This book is a path that shows, first, the basics of machine learning and then
    a practical application. After having read this book, you will be able to deal
    with real-life challenges, identifying the most appropriate recommendation solution.
    Thank you for following until this point.
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: 本书是一条路径，首先展示了机器学习的基础知识，然后是实际应用。阅读完本书后，您将能够应对现实生活中的挑战，确定最合适的推荐解决方案。感谢您一直跟随到这里。
- en: If you have any queries, don't hesitate to contact us.
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有任何疑问，请随时联系我们。
