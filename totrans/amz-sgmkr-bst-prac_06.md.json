["```py\n    #Feature group name\n    weather_feature_group_name_offline = 'weather-feature-group-offline' + strftime('%d-%H-%M-%S', gmtime())\n    ```", "```py\n    ##Create FeatureDefinitions\n    fd_location=FeatureDefinition(feature_name='location', feature_type=FeatureTypeEnum('Integral'))\n    fd_event_time=FeatureDefinition(feature_name='EventTime', feature_type=FeatureTypeEnum('Fractional'))\n    …\n    weather_feature_definitions = []\n    weather_feature_definitions.append(fd_location)\n    weather_feature_definitions.append(fd_event_time)\n    …\n    ```", "```py\n    ##Define unique identifier\n    record_identifier_feature_name = \"location\"\n    ```", "```py\n    #Create offline feature group\n    weather_feature_group_offline =     \\ \n        FeatureGroup(name=weather_feature_group_name_offline,\n             feature_definitions=weather_feature_definitions,\n                     sagemaker_session=sagemaker_session) \n    weather_feature_group_offline.create(\n                 s3_uri=f\"s3://{s3_bucket_name}/{prefix}\",\n                record_identifier_name=\"location\",\n                event_time_feature_name=\"EventTime\",\n                role_arn=role\n    )\n    ```", "```py\n    weather_feature_group_offline_online.create(\n                s3_uri=f\"s3://{s3_bucket_name}/{prefix}\",\n        record_identifier_name=\"location\", \n               event_time_feature_name=\"EventTime\",\n               role_arn=role,\n              enable_online_store=True\n    )\n    ```", "```py\n    weather_feature_group_online.create(\n                s3_uri=False,\n                record_identifier_name=\"location\", \n               event_time_feature_name=\"EventTime\",\n               role_arn=role,\n               enable_online_store=True\n    )\n    ```", "```py\n##Create a record to ingest into the feature group\nrecord = []\nevent_time_feature = {'FeatureName': 'EventTime','ValueAsString': str(int(round(time.time())))}\nlocation_feature =   {'FeatureName': 'location','ValueAsString': str('200.0')}\nismobile_feature =   {'FeatureName':   'ismobile','ValueAsString': str('0')}\nvalue_feature ={'FeatureName': 'value','ValueAsString': str('34234.0')}\n\nrecord.append(event_time_feature)\nrecord.append(location_feature)\nrecord.append(ismobile_feature)\nrecord.append(value_feature)\n\nresponse = sagemaker_fs_runtime_client.put_record(\n       FeatureGroupName=weather_feature_group_online,\n                                             Record=record)\n```", "```py\n#Read csv directly from S3 into a dataframe\nweather_df = pd.read_csv(s3_path)\n\n#Ingest features into the feature group\nweather_feature_group_offline.ingest(\n          data_frame=weather_df, max_workers=3, wait=True\n)\n```", "```py\ns3://<bucket-name>/<customer-prefix>/<account-id>/sagemaker/<aws-region>/offline-store/<feature-group-name>-<feature-group-creation-time>/data/year=<event-time-year>/month=<event-time-month>/day=<event-time-day>/hour=<event-time-hour>/<timestamp_of_latest_event_time_in_file>_<16-random-alphanumeric-digits>.parquet\n```", "```py\nrecord_identifier_value = str('300')\nresponse = sagemaker_fs_runtime_client.get_record\n(FeatureGroupName=weather_feature_group_name_online,\nRecordIdentifierValueAsString=record_identifier_value)\nresponse\nResponse from the code block looks similar to the following figure:\n{'ResponseMetadata': {'RequestId': '195debf2-3b10-4116-98c7-142dc13e9df3',\n  'HTTPStatusCode': 200,\n  'HTTPHeaders': {'x-amzn-requestid': '195debf2-3b10-4116-98c7-142dc13e9df3',\n   'content-type': 'application/json',\n   'content-length': '214',\n   'date': 'Wed, 14 Jul 2021 04:27:11 GMT'},\n  'RetryAttempts': 0},\n 'Record': [{'FeatureName': 'value', 'ValueAsString': '4534.0'},\n  {'FeatureName': 'ismobile', 'ValueAsString': '0'},\n  {'FeatureName': 'location', 'ValueAsString': '300'},\n  {'FeatureName': 'EventTime', 'ValueAsString': '1626236799'}]}\n```", "```py\nrecord_identifier_values = [\"200\", \"250\", \"300\"]\nresponse=sagemaker_fs_runtime_client.batch_get_record(\n            Identifiers=[\n           {\"FeatureGroupName\": weather_feature_group_name_online, \"RecordIdentifiersValueAsString\": record_identifier_values}\n            ]\n)\nresponse\n```", "```py\n{'ResponseMetadata': {'RequestId': '3c3e1f5f-3a65-4b54-aa18-8683c83962c5',\n  'HTTPStatusCode': 200,\n  'HTTPHeaders': {'x-amzn-requestid': '3c3e1f5f-3a65-4b54-aa18-8683c83962c5',\n   'content-type': 'application/json',\n   'content-length': '999',\n   'date': 'Wed, 14 Jul 2021 04:29:47 GMT'},\n  'RetryAttempts': 0},\n 'Records': [{'FeatureGroupName': 'weather-feature-group-online-13-19-23-46',\n   'RecordIdentifierValueAsString': '300',\n   'Record': [{'FeatureName': 'value', 'ValueAsString': '4534.0'},\n           {'FeatureName': 'ismobile', 'ValueAsString': '0'},\n           {'FeatureName': 'location', 'ValueAsString': '300'},\n          {'FeatureName': 'EventTime', 'ValueAsString': '1626236799'}]},\n  {'FeatureGroupName': 'weather-feature-group-online-13-19-23-46',\n   'RecordIdentifierValueAsString': '200',\n   'Record': [{'FeatureName': 'value', 'ValueAsString': '34234.0'},\n            {'FeatureName': 'ismobile', 'ValueAsString': '0'},\n           {'FeatureName': 'location', 'ValueAsString': '200'},\n          {'FeatureName': 'EventTime', 'ValueAsString': '1626236410'}]}],\n 'Errors': [],\n 'UnprocessedIdentifiers': []}\n```", "```py\nweather_data_query = weather_feature_group.athena_query()\nweather_table = weather_data_query.table_name\n\n#Query string\nquery_string = 'SELECT * FROM \"'+ weather_table + '\"'\nprint('Running ' + query_string)\n\n#run Athena query. The output is loaded to a Pandas dataframe.\nweather_data_query.run(query_string=query_string, output_location='s3://'+s3_bucket_name+'/'+prefix+'/query_results/')\nweather_data_query.wait()\ndataset = weather_data_query.as_dataframe()\n```", "```py\n#Query string with specific date/time\ntimestamp = int(round(time.time()))\ntime_based_query_string = f\"\"\"\nSELECT *\nFROM \"{weather_table}\"\nwhere eventtime <= {timestamp} and city=1080.0\n\"\"\"\n# Run Athena query. The output is loaded to a Pandas dataframe.\nweather_query.run(query_string=time_based_query_string, output_location='s3://'+s3_bucket_name+'/'+prefix+'/query_results/')\nweather_query.wait()\ndataset = weather_query.as_dataframe()\n```"]