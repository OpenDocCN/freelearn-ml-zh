- en: Data Exploration and Data Visualization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Data Exploration and Data Visualization techniques are essential to understanding
    data before one can implement predictive modeling. With existing open source R
    packages for statistical and mathematical algorithms, data professionals can easily
    explore their data and discover patterns/trends that are otherwise challenging
    to do in a relational database. Using SQL Server **Machine Learning Services**
    (**ML Services**) with R means that data exploration and data visualization are
    no longer siloed work, leading to faster and easier paths to predictive modeling.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter outlines essential tips and tricks developers must know for data
    exploration and data visualization using R. You will learn how to integrate R
    for data exploration and data visualization in T-SQL and then stitch these techniques
    in SSRS and Power BI. If you are already familiar with R for data exploration
    and data visualization, feel free to skip to the last section of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding SQL and R data types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we dive into exploring data using R in T-SQL, let's get started with
    understanding data types to store data in R. The first and most important data
    type to be familiar with when working with R in T-SQL is data frame. The input
    and output parameters of `sp_execute_external_script` in SQL Server received and
    sent from R are data frames. Other data types that are important to know for data
    munging, and that are very similar to data frame, are matrix and data table, which
    are beyond the scope of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Aside from data frame, R supports a limited number of scalar data types such
    as character, complex, date/time, integer, logical, numeric, and raw. Thus, when
    you provide data from SQL Server in R Scripts, when necessary the data will be
    implicitly converted to a compatible data type in R. When a conversion cannot
    be performed automatically, R will return `Unhandled SQL data type`. The following
    table provides a short example of data type conversion. For more information about
    implicit data type conversion, please visit *R Libraries and R Data Types* at [https://docs.microsoft.com/en-us/sql/advanced-analytics/r/r-libraries-and-data-types#changes-in-data-types-between-sql-server-2016-and-earlier-versions](https://docs.microsoft.com/en-us/sql/advanced-analytics/r/r-libraries-and-data-types#changes-in-data-types-between-sql-server-2016-and-earlier-versions):'
  prefs: []
  type: TYPE_NORMAL
- en: '| **SQL Server Data Type (input parameters to sp_execute_external_script)**
    | **R Class** | **RESULT SET Data Type (output parameters to sp_execute_external_script)**
    |'
  prefs: []
  type: TYPE_TB
- en: '| `datetime` | `POSIXct` | `Datetime` |'
  prefs: []
  type: TYPE_TB
- en: '| `numeric(p,s)` | `numeric` | `float` |'
  prefs: []
  type: TYPE_TB
- en: '| `int` | `integer` | `int` |'
  prefs: []
  type: TYPE_TB
- en: '| `varbinary(n)` | `raw` | `varbinary(max)` |'
  prefs: []
  type: TYPE_TB
- en: '| `varchar(n)` | `character` | `varchar(max)` |'
  prefs: []
  type: TYPE_TB
- en: Data frames in R
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A data frame contains rows and columns, just like a table in SQL Server, where
    each column can have different basic data types, for example integer, character,
    and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'Use `?` to learn more about a function:'
  prefs: []
  type: TYPE_NORMAL
- en: '`? [function]`'
  prefs: []
  type: TYPE_NORMAL
- en: 'For more information about data frames, you can type the following command
    in **R Tools for Visual Studio** (**RTVS**), R Studio, or your other favorite
    R IDE:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: By default, R uses memory. So once the input data frame is passed from `sp_execute_external_script`,
    R will store the input data in memory. Machine Learning Services (In-Database)
    is managed by Resource Governor in SQL Server as discussed in [Chapter 3](part0039.html#1565U0-e3f81285367248f4bbc6431bcd4f926d),
    *Managing Machine Learning Services for SQL Server 2017 and R**.*
  prefs: []
  type: TYPE_NORMAL
- en: A general guideline is to strive for a good balance between what types of computation
    should be done in SQL Server VS in R. This includes whether to do data munging/manipulation
    in R vs in SQL Server.
  prefs: []
  type: TYPE_NORMAL
- en: There are some built-in data frames available in R, such as `mtcars` or `iris`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at a data frame in R. Run the following code in RTVS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should be like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00039.gif)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.1 - mtcars data
  prefs: []
  type: TYPE_NORMAL
- en: 'To check the data type, you can call the function `call` on the variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Data exploration and data munging
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Data munging in R can be done independently without using SQL Server. The following
    diagram illustrates a recommended high-level process that developers can follow
    when using SQL Server and R. If you have worked in R before, you are likely familiar
    with steps 2, 3, and 5 performed in R directly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Please note that Steps 3 and 4 are optional and will be discussed more in [Chapter
    6](part0096.html#2RHM00-e3f81285367248f4bbc6431bcd4f926d), *Predictive Modeling*
    and [Chapter 7](part0102.html#318PC0-e3f81285367248f4bbc6431bcd4f926d), *Operationalizing
    R Code*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00040.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.2 - High-Level Development Process for SQL Server Machine Learning
    Services with R
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s get started with *Data Munging in R*. Specifically, in this section,
    we will be working with the R environment so that we know how it works in R before
    we stitch it together with T-SQL. If you are familiar with R, you may skip this
    section. Following are prerequisites for this section:'
  prefs: []
  type: TYPE_NORMAL
- en: An R IDE, for example RTVS as part of Visual Studio 2015 or 2017\. For more
    information about RTVS, please visit [http://aka.ms/rtvs](http://aka.ms/rtvs).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `WideWorldImporters` database restored to SQL Server 2016 or above. Please
    refer to [http://aka.ms/wwi](http://aka.ms/wwi) to download the full SQL backup
    files that you can restore in your environment.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Importing SQL Server data into R
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The most common way to connect to SQL Server from R is by using the RODBC package.
    Please note that prior to SQL Server 2016, this is the step that you'll likely
    need to work with.
  prefs: []
  type: TYPE_NORMAL
- en: In the example below, we want to retrieve a data set related to Sales Person
    Monthly Orders in 2015 from a SQL Server instance, `MsSQLGirl`; and a database,
    `WideWorldImporters` using a trusted connection (Windows Authentication).
  prefs: []
  type: TYPE_NORMAL
- en: 'Using RTVS, perform the steps mentioned as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new script called `Chapter04_01.R`. Ensure that the `RODBC` library
    is loaded by typing the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the connection string and get the connection handle:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the query that you want to run in SQL Server. This can also be a query
    to call stored procedures, functions, views and so on. In this specific example,
    the query will get the Monthly Orders in 2015 by Sales Person:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Execute the query and store the output into `orders` variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Type the following to see the dataset in `orders`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Or alternatively in RTVS go to the Variable Explorer window as shown in *Figure
    4 - 2* and expand orders to see the details of the variable. Use the magnifying
    glass tool (![](img/00041.jpeg) )to see the output as shown in *Figure 4 - 3*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00042.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4 - 3 Variable Explorer in RTVS
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00043.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4 - 4 Viewing orders in Variable Explorer
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a data dictionary of the `orders` variable. It''s useful to be familiar
    with the following columns as we will be using the orders data frame and its derived
    variables in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Column Names** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `OrderMonth` | The month that the orders take place |'
  prefs: []
  type: TYPE_TB
- en: '| `OrderCount` | The number of orders in the month for the Sales person. |'
  prefs: []
  type: TYPE_TB
- en: '| `TotalAmount` | The order dollar amount |'
  prefs: []
  type: TYPE_TB
- en: '| `SalesPerson` | The name of the Sales Person |'
  prefs: []
  type: TYPE_TB
- en: Exploring data in R
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are a number of ways to explore data in R: following are some useful
    functions. `df` denotes a data frame variable and `col` denotes a column in `df`:'
  prefs: []
  type: TYPE_NORMAL
- en: '`head(df)` returns the first few rows of the data frame `df`, by default 6.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tail(df)` returns the last few rows of the data frame `df` , by default 6.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`summary(df)` provides basic summary statistics for each column in the data
    frame `df` .'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`names(df)` returns the column name of the data frame `df` .'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`str(df)` returns basic information about the data frame `df`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`describe(df$col)` describes the distribution/skewness of a set of `col` values
    in `df` data frame. This can be quite powerful for constructing scales and item
    analysis. This requires the `psych` package to be installed first.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Following is an example of using the function `str` against the data frame
    `orders`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'This is how the output looks:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00044.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4-5 The Output of str(orders)
  prefs: []
  type: TYPE_NORMAL
- en: Unlike SQL Server, R is case-sensitive for both functions and variables. Ensure
    that you type them correctly.
  prefs: []
  type: TYPE_NORMAL
- en: Data munging in R
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Data munging is the manual process of transforming one *raw* format into another
    format so that it is more consumable, either by humans or the next processes such
    as reporting, data visualization, statistical analysis, predictive analysis, and
    many more.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are numerous R packages that are available for Data Munging. R comes
    preloaded with packages for simple data transformation and visualization. In this
    section, you will learn two super powerful packages that are commonly used for
    data munging: `dplyr`, `reshape`, and `lubridate`.'
  prefs: []
  type: TYPE_NORMAL
- en: Adding/removing rows/columns in data frames
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Adding or removing rows or columns can be achieved easily. Following is a list
    of examples showing how you can achieve it with R as well as using `dplyr`:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Adding new rows**: Let''s create a new data frame, `orders_newrows`, which contain
    2 new rows that we want to append to the end of `orders`. Then we want to see
    the last few rows of `orders`, using the `tail` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'This will trigger the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Using `dplyr`, you can call `bind_rows` to append multiple data frames. For
    example, the following displays `orders` and `orders_newrows` appended twice:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '**Adding new columns**: To illustrate let''s create a new data frame `orders_tax`
    that contains a sequence id for each row and the 10% Sales Tax amount of the Total
    Amount. We use `cbind` function to bind the orders variable with the `orders_tax`
    variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'This will give us the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Using `dplyr`, you can call `bind_cols` to add a new column:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Or you can add a new column called `TotalPlusTax`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '**Removing a column**: Now let''s remove `RowID` from `orders`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: The command `names(orders)` lists the column names in orders. So, `!names(orders)
    == "RowID"` excludes the column name `RowID`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using `dplyr`, you can call `select` to select a set of column. For example,
    the following excludes `RowID` from `orders`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also easily select columns in orders where the column names start with
    `Order`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s show `orders` with `SalesPerson` starting with `J`. First, to get the
    indexes of those that start with `J`, we can use the `grep` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Using `dplyr`, you can call `select` to select a set of column. For example,
    the following excludes `RowID` from `orders`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: You may have noticed in the last few `dplyr` examples that `dplyr` has a friendlier
    syntax. As an example, in the `filter` function, there is no need to specify the
    variable that the column belongs to.
  prefs: []
  type: TYPE_NORMAL
- en: '`  > orders[grep("^J.*", orders$SalesPerson),]; # base`'
  prefs: []
  type: TYPE_NORMAL
- en: '`> filter(orders, grepl("^J.*", SalesPerson)); # dplyr` Also, the select function
    is much friendlier.'
  prefs: []
  type: TYPE_NORMAL
- en: '`  > orders <- orders[, !names(orders) == "RowID"] # base`'
  prefs: []
  type: TYPE_NORMAL
- en: '`  > select(orders, -RowID); # dplyr`'
  prefs: []
  type: TYPE_NORMAL
- en: More data munging with dplyr
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The following is a quick list of useful data munging activities, functions,
    and examples. `df` denotes a data frame variable.
  prefs: []
  type: TYPE_NORMAL
- en: '| **Purpose** | **Functions** |'
  prefs: []
  type: TYPE_TB
- en: '| Rename columns | `rename(df, new_column_name = old_column_name)` |'
  prefs: []
  type: TYPE_TB
- en: '| Sort/order data | `arrange(df, col1)`order data frame `df` by `col1`. |'
  prefs: []
  type: TYPE_TB
- en: '| Deduplicate data | `distinct(df)``distinct(df, [column names])`Deduplicate
    `df` for `[column names]` when provided. |'
  prefs: []
  type: TYPE_TB
- en: '| Piping | *x %>% f(y)*Perform *f(x,y)*. You can nest the syntax. For example:*x
    %>% f(y)**%>% g(z) *is equivalent to *x %>% g(f(x,y),z)*. |'
  prefs: []
  type: TYPE_TB
- en: Finding missing values
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: R has a very short and simple way of finding missing values, which is `is.na(df)`.
    It returns row index(es) in `df` with missing values.
  prefs: []
  type: TYPE_NORMAL
- en: Transpose data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Transposing a dataset is not a trivial thing to do in SQL Server. Use `t(df)`
    in R to swap rows and columns of a data frame, `df`.
  prefs: []
  type: TYPE_NORMAL
- en: Pivot / Unpivot data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `reshape` package is super useful for pivoting and unpivoting data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Use `cast` to pivot data as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Use `melt` to unpivot data as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Example - data exploration and munging using R in T-SQL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As shown earlier, there are very nifty data munging and data exploration techniques
    that you can do in R. Let''s now stitch it all together in T-SQL. In this following
    example, we want to get a statistical summary of monthly sales person order counts
    and the total amount, in 2015 - specifically Min, Max, 1^(st) Quartile, Median,
    3^(rd) Quartile - to get a sense of the data range and the distribution of the
    monthly orders per sales person:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Data visualization in R
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Good data visualization draws insights from a large amount of data and serves
    as a medium to communicate to the audience. Fortunately, R has powerful built-in
    functions as well as packages that can help you to create good data visualization.
    In this section, we will go through a number of built-in graphical functions and
    R libraries to show their capabilities. Then we'll walk through an example on
    how to stitch it together with T-SQL. You will also learn how to display graphics
    from R in SQL Operations Studio. Similar to the previous section, we will be using
    the `orders` dataset and will create a data frame **d** to narrow down the analysis
    for sales persons Amy, Jack, and Hudson.
  prefs: []
  type: TYPE_NORMAL
- en: Plot
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `plot()` function in R draws a simple scatterplot showing the relationship
    between two variables and distribution trends/outliers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s an example of a script that visualizes the relationship between the
    number of orders and the monthly sales amount for `Amy`, `Jack`, and `Hudson`
    in 2015:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'The following diagram shows the Monthly Amount and the number of Orders that
    each Sales Person made in 2015\. Using a plot like this allows us to easily see
    that there is a strong Sales Person denoted in blue dots:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00045.gif)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4-5 Scatterplot using the basic plot function
  prefs: []
  type: TYPE_NORMAL
- en: Obviously the preceding plot diagram takes a few steps to draw and you'll also
    need to add a `legend()` call to map the colors to the Sales Person. Following
    is a simpler way to draw a plot diagram with a one call.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `ggplot2` library offers an easy way to create a similar chart using the
    `qplot` function. Following script is equivalent to the previous call:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'The following chart comes complete with a legend, which helps to show that
    Hudson is the top-performing SalesPerson:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00046.gif)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4-6 Scatterplot using the ggplot function
  prefs: []
  type: TYPE_NORMAL
- en: Histogram
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `hist()` function in R draws a histogram representing the frequency distribution
    of the dataset.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s a script that draws a frequency distribution of the monthly sales person
    Total Amount in 2015:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Using the following histogram, we can easily see that the most common monthly
    total amount (per sales person) is between $400 K and $500 K every month:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00047.gif)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4-7 Histogram chart using basic hist function
  prefs: []
  type: TYPE_NORMAL
- en: Boxplot
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The boxplot chart allows us to show outliers for each Sales Person. This can
    easily be achieved in R using the `boxplot()` function. However, the `ggplot`
    function is very easy to use and to customize. Here''s an example of writing a
    boxplot diagram using `ggplot()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'The following diagram shows the distribution of the Monthly Orders that each
    Sales Person made in 2015:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00048.gif)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4-8 Boxplot chart using ggplot function
  prefs: []
  type: TYPE_NORMAL
- en: Scatter plot
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In R, `scatterplot()` can be used to understand the relationship/trend between
    variables.
  prefs: []
  type: TYPE_NORMAL
- en: 'Following is an example of using scatterplot to understand the trend of monthly
    total amounts in 2015 for Amy, Hudson, and Jack:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Based on the following diagram, we can draw the conclusion that Hudson''s monthly
    Total Amount is trending slightly down even though in general they are higher
    than Amy''s and Jack. We can also see that Amy''s monthly Total Amount has dropped
    quite sharply:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00049.gif)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4-9 Scatterplot chart using the scatterplot function
  prefs: []
  type: TYPE_NORMAL
- en: 'The ggplot function can also be used to create a scatterplot and overlays it
    with smooth lines that show the monthly pattern of the Sales Person:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/00050.gif)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4-10 Scatterplot chart using ggplot function
  prefs: []
  type: TYPE_NORMAL
- en: Tree diagram
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Data preparation for predictive modeling includes exploring the data structure
    and visualizing the decision rules for predicting values. These values can be
    categorical and continuous, represented as classification tree and regression
    tree respectively.
  prefs: []
  type: TYPE_NORMAL
- en: 'Below is an example of script to create a tree diagram depicting the decision
    rules for predicting the monthly Total Amount for a given Sales Person and `OrderCount`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Running the preceding script will give a neat tree diagram with the first line
    on the node as the average monthly Total Amount (that is, *619e+3* in scientific
    notation is actually $619,000), followed by n as the number of observations and
    the percentage that makes up the node:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00051.gif)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4-11 Tree Diagram using the rpart function
  prefs: []
  type: TYPE_NORMAL
- en: Example – R data visualization in T-SQL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have learned a few examples of using R for data visualization, let's
    stitch it all together with T-SQL in SQL Operations Studio. Please note that SSMS
    doesn't render the image produced by R in T-SQL.
  prefs: []
  type: TYPE_NORMAL
- en: Download SQL Operations Studio from [https://docs.microsoft.com/en-us/sql/sql-operations-studio/download](https://docs.microsoft.com/en-us/sql/sql-operations-studio/download).
  prefs: []
  type: TYPE_NORMAL
- en: Perform the following steps to run R in T-SQL to produce an image that can be
    visualized in SQL Operations Studio.
  prefs: []
  type: TYPE_NORMAL
- en: Open SQL Operations Studio.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect to the `WideWorldImporters` database in your server in SQL Operations
    Studio.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Copy `Part 1` from Example: Data Visualization in T-SQL as we want to reuse
    the `@SQLScript` variable definition:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: In SQL Operations Studio, execute the preceding script and you will get a result
    set with a column called `plot`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on Chart Viewer, then choose image from Chart Type:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00052.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4-12 Data Visualization output from R in SQL Operations Studio
  prefs: []
  type: TYPE_NORMAL
- en: Integrating R code in reports and visualizations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will delve into familiar reports and visualization Tools
    that are available in the Microsoft BI stack, such as **SQL Server Reporting Services**
    (**SSRS**), Power BI, and Mobile Reports.
  prefs: []
  type: TYPE_NORMAL
- en: There are three main use cases for integrating R graphics with SQL Server.
  prefs: []
  type: TYPE_NORMAL
- en: 'Get a dataset output representing data / statistical analysis, training model,
    or predictive model:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00053.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4-13 SQL Server Machine Learning Services process for data analysis in
    R
  prefs: []
  type: TYPE_NORMAL
- en: Execute `sp_execute_external_script` to run R to produce a dataset output as
    illustrated in (1) + (2) + (3). The data set output (3) could be from data/statistical
    analysis, a training model, predictive output, and so on. In SQL Server, we can
    optionally process the output further (4), for example, saving it into a table
    or passing it on to another stored procedure.
  prefs: []
  type: TYPE_NORMAL
- en: Get a dataset output containing the varbinary representation of the graphics
    output of R.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00054.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4-14 SQL Server R Services process for data visualization
  prefs: []
  type: TYPE_NORMAL
- en: Execute `sp_execute_external_script` to run R to produce a dataset output as
    illustrated in (1) + (2) + (3). The dataset output (3) in this case would have
    a varbinary (max) representation of the graphics output. In SQL Server, we can
    insert the output further (4), for example, saving the images as varbinary (max)
    into a table.
  prefs: []
  type: TYPE_NORMAL
- en: 'Save the R graphics output to files and store the file paths in the dataset
    output. This is ideal when offline rendering is preferred:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00055.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4-17 SQL Server Machine Learning Services process for data visualization
    to files
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute `sp_execute_external_script` to run R to produce a dataset output as
    illustrated in (1) + (2) + (3). The dataset output (3) in this case contain the
    file paths where the graphic outputs need to reside. In SQL Server, we can optionally
    process the output further (4). You can also integrate Filestream for this solution
    as described in *Tomaž Kaštrun''s* blog here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://tomaztsql.wordpress.com/2016/09/25/filetable-and-storing-graphs-from-microsoft-r-server/](https://tomaztsql.wordpress.com/2016/09/25/filetable-and-storing-graphs-from-microsoft-r-server/)'
  prefs: []
  type: TYPE_NORMAL
- en: Integrating R in SSRS reports
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: SSRS reports can read datasets from either a query or a stored procedure. Essentially
    this gives us enough flexibility to choose how we want to incorporate the R output
    as part of ad-hoc or operational reports in SSRS.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's take a look at a couple of examples where we integrate R in SSRS
    Reports. Suppose a data analyst wants to do a quick statistical analysis to understand
    the strength of the relationship between Sales Person and Total Amount. It's very
    easy to do this using SSRS. Here's an example showing how you can achieve this.
  prefs: []
  type: TYPE_NORMAL
- en: Using either **Visual Studio 2017** or **SQL Server Management Studio**, connect
    to `WideWorldImporters`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new stored procedure called `dbo.usp_AnalyzeOrdersUsingAnova`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Using Visual Studio 2017 or Report Builder, create a new report.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save this file as `SQL+R_Chapter04_SSRS_Anova_01.rdl` by pressing *Ctrl*+*S*,
    or go to the File menu and click Save.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new Data Source and save this `WideWorldImporters` that connects to
    the `WideWorldImporters` database on your server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then create a new Data Set with the following query definition, then click
    Refresh Fields:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/00056.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4-16 Specify the stored procedure to execute
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a **Tablix** to represent `AOV_SalesPerson` columns:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00057.gif)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4-17 Add a Tablix that has all the columns from AOV_SalesPerson
  prefs: []
  type: TYPE_NORMAL
- en: 'Optionally add another **Tablix** where its `DataSetName` is mapped to `AOV_SalesPerson`.
    On the first cell of the **Tablix** body, describe how to interpret the analysis
    with the following expression:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Click Run to see a preview of the report:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00058.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4-18 Preview the Report
  prefs: []
  type: TYPE_NORMAL
- en: Another scenario that is commonly seen for using R is to draw data visualizations.
    In the following example, we are going to compare how Sales Person performs in
    the year 2015\. From here, we can see the trend of Sales Person monthly orders
    and how they're performing in the 12 months.
  prefs: []
  type: TYPE_NORMAL
- en: Using either **Visual Studio 2017** or **SQL Server Management Studio**, connect
    to `WideWorldImporters`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new stored procedure called `dbo.usp_CreateMonthlySalesPlot`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'In Report Builder, open `SQL+R_Chapter04_SSRS_Anova_01.rdl` from earlier, create
    a new Data Set with the following query definition, then click Refresh Fields.
    The field created is called `Plot` and there should be one row:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/00059.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4-19 Specify the stored procedure to be executed
  prefs: []
  type: TYPE_NORMAL
- en: 'Insert a new Image, with the following General properties:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the image source: Database'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use this field: `=First(Fields!plot.Value, "MonthlyPlot")`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use this MIME type: `image/jpeg`'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00060.gif)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4-20 Configure Image to render the plot
  prefs: []
  type: TYPE_NORMAL
- en: Optionally, go to the Size item on the left pane and change Display to Original
    Size.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click Run to see a preview of the report:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00061.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4-21 Preview the report with the plot
  prefs: []
  type: TYPE_NORMAL
- en: This RDL file can now be published to an **SSRS Report Server**.
  prefs: []
  type: TYPE_NORMAL
- en: 'For more information about SSRS, the following Microsoft Docs website is very
    useful:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://docs.microsoft.com/sql/reporting-services/create-deploy-and-manage-mobile-and-paginated-reports](https://docs.microsoft.com/sql/reporting-services/create-deploy-and-manage-mobile-and-paginated-reports)'
  prefs: []
  type: TYPE_NORMAL
- en: Integrating R in Power BI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Power BI is a powerful tool for visualizing data. Together with R, Power BI
    can render beautiful images with uncompromised dynamic interactivity. In this
    example, you''ll learn how to create data visualizations similar to the one that
    we created in SSRS in the previous section:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00062.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4-22 Power BI Visualization with R Script Editor
  prefs: []
  type: TYPE_NORMAL
- en: 'For simplicity, we will use Power BI desktop but you could just as well create
    one from the online [PowerBI.com](https://powerbi.microsoft.com/en-us/) version:'
  prefs: []
  type: TYPE_NORMAL
- en: Launch **Power BI Desktop** and create a new file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the Home menu, click on Get Data | SQL Server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect to your SQL Server instance that has the `WideWorldImporters` database.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then click on Advanced Options to provide the following query on the SQL statement
    field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'The dialog box should now look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00063.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4-23 SQL Server database data source details
  prefs: []
  type: TYPE_NORMAL
- en: Click OK to see the preview of the query.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then click Load on the preview window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00064.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4-24 Preview of the query
  prefs: []
  type: TYPE_NORMAL
- en: From the Visualizations pane, click on the R Script icon.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag and drop the `OrderMonth`, `SalesPerson`, and `TotalAmount` columns from
    the Fields pane into the Values box.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Please note that your table might be called `Query1` and you can rename this
    to something more meaningful such as MonthlyOrders, as shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00065.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4-25 Choose Fields as inputs to R
  prefs: []
  type: TYPE_NORMAL
- en: 'With the OrderMonth, instead of the default Date Hierarchy choose OrderMonth
    from the drop-down list in the Values field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00066.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4-26 Choose Order Month instead of Data Hierarchy to display
  prefs: []
  type: TYPE_NORMAL
- en: 'Ensure that the R Script graphic box is still in focus. Optionally you can
    resize it to make it wider or taller:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00067.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4-27 R Visualization box in Power BI Desktop
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, in **R Script Editor** located on the lower half of Power BI screen,
    enter the following R code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Click on the Run Script button located on the right of the R Script Editor bar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a Slicer, then drag and drop OrderMonth.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Deselect all the OrderMonth hierarchy except for Year, by clicking on the X from
    the OrderMonth list in the **Values** filed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00068.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4-28 Slicer for Year
  prefs: []
  type: TYPE_NORMAL
- en: 'Now your Power BI report should look something like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00069.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4-29 Power BI Report
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you have learned the importance of data preparation in predictive
    modeling, which involves both data exploration and data visualization exercises.
    R has a number of open-source packages that are useful for data munging, for example
    `dplyr`, `reshape`, and many more. The challenge is to hit the right balance between
    having data munging activities in SQL Server VS in R. The beauty of SQL Server
    Machine Learning Services is that it allows easy integration with SQL Server Reporting
    Services. In addition, Power BI also supports interactive data exploration with
    R visualizations. In the next chapter, you will learn more about the `RevoScaleR`
    library for portable, scalable, and distributable R functions.
  prefs: []
  type: TYPE_NORMAL
