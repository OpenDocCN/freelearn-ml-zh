["```py\n0,0,0,4000,0\n1,1,1,4500,1\n0,1,0,5000,0\n0,0,1,4500,0\n0,0,0,3000,1\n0,1,0,3100,1\n0,1,1,3500,1\n1,1,1,5500,0\n1,1,1,4200,1\n```", "```py\n0,0,0,2010,1\n1,0,0,2600,1\n1,0,0,3700,0\n1,1,0,3100,1\n1,1,0,3600,0\n0,1,0,3500,0\n0,0,1,3400,1\n0,0,1,5100,0\n```", "```py\nusing Microsoft.ML.Data;\n\nnamespace chapter04.ML.Objects\n{\n    public class CarInventory\n    {\n        [LoadColumn(0)]\n        public float HasSunroof { get; set; }\n\n        [LoadColumn(1)]\n        public float HasAC { get; set; }\n\n        [LoadColumn(2)]\n        public float HasAutomaticTransmission { get; set; }\n\n        [LoadColumn(3)]\n        public float Amount { get; set; }\n\n        [LoadColumn(4)]\n        public bool Label { get; set; }\n    }\n}\n```", "```py\nnamespace chapter04.ML.Objects\n{\n    public class CarInventoryPrediction\n    {\n        public bool Label { get; set; }\n\n        public bool PredictedLabel { get; set; }\n\n        public float Score { get; set; }\n\n        public float Probability { get; set; }\n    }\n}\n```", "```py\nvar predictionEngine = MlContext.Model.CreatePredictionEngine<CarInventory, CarInventoryPrediction>(mlModel);            \n```", "```py\nvar prediction = predictionEngine.Predict(JsonConvert.DeserializeObject<CarInventory>(json));\n```", "```py\nConsole.WriteLine(\n    $\"Based on input json:{System.Environment.NewLine}\" +\n    $\"{json}{System.Environment.NewLine}\" + \n    $\"The car price is a {(prediction.PredictedLabel ? \"good\" : \"bad\")} deal, with a {prediction.Probability:P0} confidence\");\n```", "```py\nif (!File.Exists(testFileName))\n{\n    Console.WriteLine($\"Failed to find test data file ({testFileName}\");\n\n    return;\n}\n```", "```py\nIEstimator<ITransformer> dataProcessPipeline = MlContext.Transforms.Concatenate(\"Features\",\n typeof(CarInventory).ToPropertyList<CarInventory>(nameof(CarInventory.Label)))\n .Append(MlContext.Transforms.NormalizeMeanVariance(inputColumnName: \"Features\",\n outputColumnName: \"FeaturesNormalizedByMeanVar\"));\n```", "```py\nvar trainer = MlContext.BinaryClassification.Trainers.FastTree(\n    labelColumnName: nameof(CarInventory.Label),\n    featureColumnName: \"FeaturesNormalizedByMeanVar\",\n    numberOfLeaves: 2,\n    numberOfTrees: 1000,\n    minimumExampleCountPerLeaf: 1,\n    learningRate: 0.2);\n```", "```py\nvar trainingPipeline = dataProcessPipeline.Append(trainer);\n\nvar trainedModel = trainingPipeline.Fit(trainingDataView);\n\nMlContext.Model.Save(trainedModel, trainingDataView.Schema, ModelPath);\n```", "```py\nvar evaluationPipeline = trainedModel.Append(MlContext.Transforms\n .CalculateFeatureContribution(trainedModel.LastTransformer)\n .Fit(dataProcessPipeline.Fit(trainingDataView).Transform(trainingDataView)));\n\nvar testDataView = MlContext.Data.LoadFromTextFile<CarInventory>(testFileName, ',', hasHeader: false);\n\nvar testSetTransform = evaluationPipeline.Transform(testDataView);\n\nvar modelMetrics = MlContext.BinaryClassification.Evaluate(data: testSetTransform,\n labelColumnName: nameof(CarInventory.Label),\n scoreColumnName: \"Score\");\n```", "```py\nConsole.WriteLine($\"Accuracy: {modelMetrics.Accuracy:P2}\");\nConsole.WriteLine($\"Area Under Curve: {modelMetrics.AreaUnderRocCurve:P2}\");\nConsole.WriteLine($\"Area under Precision recall Curve: {modelMetrics.AreaUnderPrecisionRecallCurve:P2}\");\nConsole.WriteLine($\"F1Score: {modelMetrics.F1Score:P2}\");\nConsole.WriteLine($\"LogLoss: {modelMetrics.LogLoss:#.##}\");\nConsole.WriteLine($\"LogLossReduction: {modelMetrics.LogLossReduction:#.##}\");\nConsole.WriteLine($\"PositivePrecision: {modelMetrics.PositivePrecision:#.##}\");\nConsole.WriteLine($\"PositiveRecall: {modelMetrics.PositiveRecall:#.##}\");\nConsole.WriteLine($\"NegativePrecision: {modelMetrics.NegativePrecision:#.##}\");\nConsole.WriteLine($\"NegativeRecall: {modelMetrics.NegativeRecall:P2}\");\n```", "```py\nif (args.Length < 2)\n{\n    Console.WriteLine($\"Invalid arguments passed in, exiting.{Environment.NewLine}        {Environment.NewLine}Usage:{Environment.NewLine}\" +\n $\"predict <path to input json file>{Environment.NewLine}\" +\n $\"or {Environment.NewLine}\" +\n $\"train <path to training data file> <path to test data file>{Environment.NewLine}\");\n\n    return;\n}\n```", "```py\nswitch (args[0])\n{\n    case \"predict\":\n        new Predictor().Predict(args[1]);\n        break;\n    case \"train\":\n        new Trainer().Train(args[1], args[2]);\n        break;\n    default:\n        Console.WriteLine($\"{args[0]} is an invalid option\");\n        break;\n}\n```", "```py\nPS chapter04\\bin\\Debug\\netcoreapp3.0> .\\chapter04.exe train ..\\..\\..\\Data\\sampledata.csv ..\\..\\..\\Data\\testdata.csv\nAccuracy: 88.89%\nArea Under Curve: 100.00%\nArea under Precision recall Curve: 100.00%\nF1Score: 87.50%\nLogLoss: 2.19\nLogLossReduction: -1.19\nPositivePrecision: 1\nPositiveRecall: .78\nNegativePrecision: .82\nNegativeRecall: 100.00%\n```", "```py\n{\n    \"HasSunroof\":0,\n    \"HasAC\":0,\n    \"HasAutomaticTransmission\":0,\n    \"Amount\":1300\n}\n```", "```py\nPS chapter04\\bin\\Debug\\netcoreapp3.0> .\\chapter04.exe predict .\\input.json\nBased on input json:\n{\n\"HasSunroof\":0,\"HasAC\":0,\"HasAutomaticTransmission\":0,\"Amount\":1300\n}\nThe car price is a good deal, with a 100% confidence\n```", "```py\n\"Order #1234\",\"Thank you for ordering a new CPU\",\"order@cpulandia.com\",\"orders\"\n\"Get Free Free\",\"Click here for everything free\",\"freefree@asasdasd.com\",\"spam\"\n\"Checking in\",\"How is it going?\",\"johndough@gmail.com\",\"friend\"\n\"Order 4444\",\"Thank you for ordering a pizza\",\"order@pizzalandia.com\",\"orders\"\n\"Unlock Free\",\"Click here to unlock your spam\",\"spammer@asasdasd.com\",\"spam\"\n\"Hello\",\"Did you see my last message?\",\"janedough@gmail.com\",\"friend\"\n```", "```py\n\"Order 955\",\"Thank you for ordering a new gpu\",\"order@gpulandia.com\",\"orders\"\n\"Win Free Money\",\"Lottery winner, click here\",\"nowfree@asasdasd.com\",\"spam\"\n\"Yo\",\"Hey man?\",\"john@gmail.com\",\"friend\"\n```", "```py\nusing Microsoft.ML.Data;\n\nnamespace chapter04_multiclass.ML.Objects\n{\n    public class Email\n    {\n        [LoadColumn(0)]\n        public string Subject { get; set; }\n\n        [LoadColumn(1)]\n        public string Body { get; set; }\n\n        [LoadColumn(2)]\n        public string Sender { get; set; }\n\n        [LoadColumn(3)]\n        public string Category { get; set; }\n    }\n}\n```", "```py\nusing Microsoft.ML.Data;\n\nnamespace chapter04_multiclass.ML.Objects\n{\n    public class EmalPrediction\n    {\n        [ColumnName(\"PredictedLabel\")]\n        public string Category;\n    }\n}\n```", "```py\nvar predictionEngine = MlContext.Model.CreatePredictionEngine<Email, EmailPrediction>(mlModel);            \n```", "```py\nvar prediction = predictionEngine.Predict(JsonConvert.DeserializeObject<Email>(json));\n```", "```py\nConsole.WriteLine(\n    $\"Based on input json:{System.Environment.NewLine}\" +\n    $\"{json}{System.Environment.NewLine}\" + \n    $\"The email is predicted to be a {prediction.Category}\");\n```", "```py\nvar trainingDataView = MlContext.Data.LoadFromTextFile<Email>(trainingFileName, ',', hasHeader: false);           \n```", "```py\nvar dataProcessPipeline = MlContext.Transforms.Conversion.MapValueToKey(inputColumnName: nameof(Email.Category), outputColumnName: \"Label\")\n    .Append(MlContext.Transforms.Text.FeaturizeText(inputColumnName: nameof(Email.Subject), outputColumnName: \"SubjectFeaturized\"))\n    .Append(MlContext.Transforms.Text.FeaturizeText(inputColumnName: nameof(Email.Body), outputColumnName: \"BodyFeaturized\"))\n    .Append(MlContext.Transforms.Text.FeaturizeText(inputColumnName: nameof(Email.Sender), outputColumnName: \"SenderFeaturized\"))\n    .Append(MlContext.Transforms.Concatenate(\"Features\", \"SubjectFeaturized\", \"BodyFeaturized\", \"SenderFeaturized\"))\n    .AppendCacheCheckpoint(MlContext);\n\nvar trainingPipeline = dataProcessPipeline\n    .Append(MlContext.MulticlassClassification.Trainers.SdcaMaximumEntropy(\"Label\", \"Features\"))\n    .Append(MlContext.Transforms.Conversion.MapKeyToValue(\"PredictedLabel\"));\n```", "```py\nvar testDataView = MlContext.Data.LoadFromTextFile<Email>(testFileName, ',', hasHeader: false);\n\nvar modelMetrics = MlContext.MulticlassClassification.Evaluate(trainedModel.Transform(testDataView));\n\nConsole.WriteLine($\"MicroAccuracy: {modelMetrics.MicroAccuracy:0.###}\");\nConsole.WriteLine($\"MacroAccuracy: {modelMetrics.MacroAccuracy:0.###}\");\nConsole.WriteLine($\"LogLoss: {modelMetrics.LogLoss:#.###}\");\nConsole.WriteLine($\"LogLossReduction: {modelMetrics.LogLossReduction:#.###}\");\n```", "```py\nPS chapter04-multiclass\\bin\\Debug\\netcoreapp3.0> .\\chapter04-multiclass.exe train ..\\..\\..\\Data\\sampledata.csv ..\\..\\..\\Data\\testdata.csv\nMicroAccuracy: 1\nMacroAccuracy: 1\nLogLoss: .1\nLogLossReduction: .856\n```", "```py\n{\n    \"Subject\":\"hello\",\n    \"Body\":\"how is it?\",\n    \"Sender\":\"joe@gmail.com\"\n}\n```", "```py\nPS chapter04-multiclass\\bin\\Debug\\netcoreapp3.0> .\\chapter04-multiclass.exe predict .\\input.json\nBased on input json:\n{\n\"Subject\":\"hello\",\n\"Body\":\"how is it?\",\n\"Sender\":\"joe@gmail.com\"\n}\nThe email is predicted to be a \"friend\"\n```"]