["```py\n    import pandas as pd\n    df = pd.read_csv(“dataset_demand-forecasting_ts.csv”)\n    df.head()\n    ```", "```py\n    import plotly.express as px\n    import plotly.graph_objects as go\n    fig = px.line(df, x=”Date”, y=”Sales”, title=’Single Product Demand’, width=800, height=400)\n    fig.update_traces(line_color=’#4169E1’)\n    fig.show()\n    ```", "```py\n    def get_features(dataframe):\n        dataframe[“sales”] = dataframe[“sales”]\n        dataframe[“Date”] = pd.to_datetime(dataframe[‘Date’])\n        dataframe[‘year’] = dataframe.Date.dt.year\n        dataframe[‘month’] = dataframe.Date.dt.month\n        dataframe[‘day’] = dataframe.Date.dt.day\n        dataframe[‘dayofyear’] = dataframe.Date.dt.dayofyear\n        dataframe[‘dayofweek’] = dataframe.Date.dt.dayofweek\n        dataframe[‘weekofyear’] = dataframe.Date.dt.weekofyear\n        return dataframe \n    df = get_features(df)\n    df.head()\n    ```", "```py\n    plt.figure(figsize=(10,5))\n    ax = sns.boxplot(x=’year’, y=’sales’, data=df)\n    ax.set_xlabel(‘Year’, fontsize = 16)\n    ax.set_ylabel(‘Sales’, fontsize = 16)\n    ```", "```py\n    plt.figure(figsize=(10,5))\n    ax = sns.boxplot(x=’month’, y=’sales’, data=df)\n    ax.set_xlabel(‘Month’, fontsize = 16)\n    ax.set_ylabel(‘Sales’, fontsize = 16)\n    ```", "```py\n    df[“Rolling_20”] = df[“sales”].rolling(window=20).mean()\n    df[“Rolling_100”] = df[“sales”].rolling(window=100).mean()\n    ```", "```py\n    fig = go.Figure()\n    fig.add_trace(go.Scatter(x=df[“Date”], y=df[“sales”], mode=’lines’, name=’Raw Data’, line=dict(color=”#bec2ed”)))\n    fig.add_trace(go.Scatter(x=df[“Date”], y=df[“Rolling_20”], mode=’lines’, name=’Rolling 20’, line=dict(color=”#858eed”,dash=”dash”)))\n    fig.add_trace(go.Scatter(x=df[“Date”], y=df[“Rolling_100”], mode=’lines’, name=’Rolling 100’, line=dict(color=”#d99543”)))\n    fig.update_layout(width=800, height=500)\n    ```", "```py\n    dftmp = pd.DataFrame({‘data’: df.Rolling_100.values},\n                          index=df.Date)\n    dftmp = dftmp.dropna()\n    dftmp.head()\n    ```", "```py\n    from statsmodels.tsa.seasonal import seasonal_decompose\n    result = seasonal_decompose(dftmp, model=’multiplicative’, period=365)\n    ```", "```py\n    result.plot()\n    pyplot.show()\n    ```", "```py\n    df[“AverageSales”] = df[“Sales”].rolling(window=20).mean()\n    fig = go.Figure()\n    fig.add_trace(go.Scatter(x=df[“Date”], y=df[“Sales”], mode=’lines’, name=’Raw Data’, line=dict(color=”#bec2ed”)))\n    fig.add_trace(go.Scatter(x=df[“Date”], y=df[“AverageSales”], mode=’lines’, name=’Rolling 20’, line=dict(color=”#3d43f5”)))\n    fig.update_layout(width=800, height=500)\n    ```", "```py\n    df2 = df[[“Date”, “AverageSales”]]\n    df2 = df2.dropna()\n    df2.columns = [“ds”, “y”]\n    ```", "```py\n    m = Prophet()\n    m.fit(df2)\n    ```", "```py\n    future = m.make_future_dataframe(periods=365*2)\n    ```", "```py\n    forecast = m.predict(future)\n    forecast[[‘ds’, ‘yhat’, ‘yhat_lower’, ‘yhat_upper’]].tail()\n    ```", "```py\n    fig1 = m.plot(forecast)\n    ```", "```py\n    df[‘Sales’] = df[“Sales”].rolling(window=20).mean()\n    df = df.dropna()\n    ```", "```py\n    ds = df[[“Sales”]].values\n    scaler = MinMaxScaler(feature_range=(0, 1))\n    ds = scaler.fit_transform(ds)\n    ```", "```py\n    train_size = int(len(ds) * 0.75)\n    test_size = len(ds) - train_size\n    train = ds[0: train_size,:]\n    test = ds[train_size : len(ds), :]\n    ```", "```py\n    lookback = 100\n    X_train, y_train = dataset_generator(train, lookback)\n    X_test, y_test = dataset_generator(test, lookback)\n    ```", "```py\n    X_train = np.reshape(X_train, (X_train.shape[0], 1, X_train.shape[1]))\n    X_test = np.reshape(X_test, (X_test.shape[0], 1, X_test.shape[1]))\n    ```", "```py\n    model = Sequential()\n    model.add(LSTM(2, input_shape=(1, lookback)))\n    model.add(Dense(1))\n    ```", "```py\n    opt = tf.keras.optimizers.Adam(learning_rate=0.001)\n    model.compile(loss=’mean_squared_error’, optimizer=opt)\n    ```", "```py\n    model.summary()\n    ```", "```py\n    history = model.fit(X_train, y_train, epochs=10, batch_size=1, verbose=2)\n    ```", "```py\n    plt.figure(figsize=(10,6))\n    plt.plot(history.history[“loss”], linewidth=2)\n    plt.title(“Model Loss”, fontsize=15)\n    plt.xlabel(“# Epochs”, fontsize=15)\n    plt.ylabel(“Mean Squared Error”, fontsize=15)\n    ```", "```py\n    X_train_forecast = scaler.inverse_transform(model.predict(X_train))\n    y_train = scaler.inverse_transform([y_train.ravel()])\n    X_test_forecast = scaler.inverse_transform(model.predict(X_test))\n    y_test = scaler.inverse_transform([y_test.ravel()])\n    ```", "```py\n    plt.plot(list(range(0, len(ds))), scaler.inverse_transform(ds), label=”Original”, color=”lightgrey”)\n    ```", "```py\n    train_y_plot = X_train_forecast\n    train_x_plot = [i+lookback for i in list(range(0, len(X_train_forecast)))]\n    plt.plot(train_x_plot, train_y_plot , label=”Train”, color=”blue”)\n    ```", "```py\n    test_y_plot = X_test_forecast\n    test_x_plot = [i+lookback*2 for i in\n                   list(range(len(X_train_forecast), \n                   len(X_train_forecast)+len(X_test_forecast)))]\n    plt.plot(test_x_plot, test_y_plot , label=”Forecast”, \n             color=”darkorange”, linewidth=2, linestyle=”--”)\n    plt.legend()\n    ```"]