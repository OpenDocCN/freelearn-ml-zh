["```py\nx1=[4,8] \nx2= [20,30]\n```", "```py\n#transformation from 2-D to 3-D vector\ndef t(x): \n    return [x[0]**2, np.sqrt(2)*x[0]*x[1], x[1]**2]\n```", "```py\nx1_3D= t(x1) \nx2_3D= t(x2)\n\nprint(np.dot(x1_3D,x2_3D))# the result is 102400\n```", "```py\ndef kernel(a, b): \n    return a[0]**2 * b[0]**2 + 2*a[0]*b[0]*a[1]*b[1] + a[1]**2 * b[1]**2\n```", "```py\nkernel(x1,x2) #the result is 102400\n```", "```py\ndef polynomial_kernel(x1, x2, degree, constant=0): \n    result = sum([x1[i] * x2[i] for i in range(len(x1))]) + constant \n    return pow(result, degree)\n```", "```py\nx1= [4,8]\nx2=[20,30] \npolynomial_kernel(x1,x2,2,0)\n# result would be 102400\n```", "```py\nimport pandas as pd\nimport numpy as np\nfrom sklearn import svm, datasets\nfrom sklearn.svm import SVC\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import classification_report\nfrom sklearn.utils import shuffle\n%matplotlib inline\n```", "```py\nBC_Data = datasets.load_breast_cancer()\n```", "```py\nprint(BC_Data.DESCR)\n```", "```py\nX_train, X_test, y_train, y_test = train_test_split(BC_Data.data, BC_Data.target, random_state=0)\n```", "```py\nC= 1.0\nsvm= SVC(kernel=\"linear\",C=C)\nsvm.fit(X_train, y_train)\nprint('Accuracy-train dataset: {:.3f}'.format(svm.score(X_train,y_train)))\nprint('Accuracy- test dataset: {:.3f}'.format(svm.score(X_test,y_test)))\n```", "```py\nAccuracy-train dataset: 0.967\n\nAccuracy- test dataset: 0.958\n```", "```py\nsvm= SVC(kernel=\"rbf\",C=C)\nsvm.fit(X_train, y_train)\nprint('Accuracy-train dataset: {:.3f}'.format(svm.score(X_train,y_train)))\nprint('Accuracy- test dataset: {:.3f}'.format(svm.score(X_test,y_test)))\n```", "```py\nAccuracy-train dataset: 1.000\n\nAccuracy- test dataset: 0.629\n```", "```py\nmin_train = X_train.min(axis=0)\nrange_train = (X_train - min_train).max(axis=0)\nX_train_scaled = (X_train - min_train)/range_train\nX_test_scaled = (X_test - min_train)/range_train\n```", "```py\nsvm= SVC(kernel=\"rbf\",C=C)\nsvm.fit(X_train_scaled, y_train)\nprint('Accuracy-train dataset: {:.3f}'.format(svm.score(X_train_scaled,y_train)))\nprint('Accuracy test dataset: {:.3f}'.format(svm.score(X_test_scaled,y_test)))\n```", "```py\nAccuracy-train dataset: 0.948\n\nAccuracy test dataset: 0.951\n```", "```py\nparameters = [{'kernel': ['rbf'],\n 'gamma': [1e-4, 1e-3, 0.01, 0.1, 0.2, 0.5],\n 'C': [1, 10, 100, 1000]},\n {'kernel': ['linear'], 'C': [1, 10, 100, 1000]}]\nclf = GridSearchCV(SVC(decision_function_shape='ovr'), parameters, cv=5)\nclf.fit(X_train, y_train)\nprint(\"Best parameters set found on development set:\")\nprint()\nprint(clf.best_params_)\nprint()\nprint(\"Grid scores on training set:\")\nprint()\nmeans = clf.cv_results_['mean_test_score']\nstds = clf.cv_results_['std_test_score']\nfor mean, std, params in zip(means, stds, clf.cv_results_['params']):\n print(\"%0.3f (+/-%0.03f) for %r\"\n % (mean, std * 2, params))\nprint()\n```"]