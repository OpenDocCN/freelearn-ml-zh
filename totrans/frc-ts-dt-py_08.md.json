["```py\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom prophet import Prophet\nfrom prophet.plot import add_changepoints_to_plot\ndf = pd.read_csv('divvy_daily.csv')\ndf = df[['date', 'rides']]\ndf['date'] = pd.to_datetime(df['date'])\ndf.columns = ['ds', 'y']\n```", "```py\nmodel = Prophet(seasonality_mode='multiplicative',\n                yearly_seasonality=4)\nmodel.fit(df)\nforecast = model.predict()\n```", "```py\nfig = model.plot(forecast)\nadd_changepoints_to_plot(fig.gca(), model, forecast)\nplt.show()\n```", "```py\nprint(model.params['delta'])\n```", "```py\nmodel = Prophet(seasonality_mode='multiplicative',\n                yearly_seasonality=4,\n                n_changepoints=5)\n```", "```py\nmodel = Prophet(seasonality_mode='multiplicative',\n                yearly_seasonality=4,\n                changepoint_range=.5)\n```", "```py\nmodel = Prophet(seasonality_mode='multiplicative',\n                yearly_seasonality=4,\n                changepoint_prior_scale=1)\nmodel.fit(df)\nforecast = model.predict()\nfig = model.plot(forecast)\nadd_changepoints_to_plot(fig.gca(), model, forecast)\nplt.show()\n```", "```py\nmodel = Prophet(seasonality_mode='multiplicative',\n                yearly_seasonality=4,\n                changepoint_prior_scale=.007)\nmodel.fit(df)\nforecast = model.predict()\nfig = model.plot(forecast)\nadd_changepoints_to_plot(fig.gca(), model, forecast)\nplt.show()\n```", "```py\ndf = pd.read_csv('instagram_jamesrodriguez10.csv')\ndf['Date'] = pd.to_datetime(df['Date'])\ndf.columns = ['ds', 'y']\n```", "```py\nwc_2014 = pd.DataFrame({'holiday': 'World Cup 2014',\n                       'ds':pd.to_datetime(['2014-06-12']),\n                       'lower_window': 0,\n                       'upper_window': 31})\nwc_2018 = pd.DataFrame({'holiday': 'World Cup 2018',\n                       'ds›:pd.to_datetime(['2018-06-14']),\n                       'lower_window': 0,\n                       'upper_window': 31})\nsigning = pd.DataFrame({'holiday': 'Bayern Munich',\n                       'ds':pd.to_datetime(['2017-07-11']),\n                       'lower_window': 0,\n                       'upper_window': 14})\nspecial_events = pd.concat([wc_2014, wc_2018, signing])\n```", "```py\nchangepoints = ['2014-06-12',\n                '2014-07-13',\n                '2017-07-11',\n                '2017-07-31',\n                '2018-06-14',\n                '2018-07-15']\n```", "```py\nmodel = Prophet(seasonality_mode='multiplicative',\n                holidays=special_events,\n                yearly_seasonality=False,\n                weekly_seasonality=False,\n                changepoint_prior_scale=1,\n                changepoints=changepoints)\n```", "```py\nmodel.fit(df)\nforecast = model.predict()\nfig = model.plot(forecast)\nadd_changepoints_to_plot(fig.gca(), model, forecast)\nplt.show()\nfig2 = model.plot_components(forecast)\nplt.show()\n```", "```py\nimport numpy as np\ndef set_changepoints(df, n_changepoints=25,\n                     changepoint_range=0.8):\n    df = df.sort_values('ds').reset_index(drop=True)\n    hist_size = int(np.floor(df.shape[0] * \\\n                             changepoint_range))\n    if n_changepoints + 1 > hist_size:\n        n_changepoints = hist_size - 1\n        print(‹n_changepoints greater than number of '+\n              'observations. Using {}.'\\\n              .format(n_changepoints))\n    if n_changepoints > 0:\n        cp_indexes = (np.linspace(0,\n                                  hist_size - 1,\n                                  n_changepoints + 1).\n                      round().astype(np.int))\n        changepoints = df.iloc[cp_indexes]['ds'].tail(-1)\n    else:\n        # set empty changepoints\n        changepoints = pd.Series(pd.to_datetime([]),\n                                 name=›ds›)\n    return changepoints\n```", "```py\nchangepoints = set_changepoints(df, 5, 0.8)\nnew_changepoints = pd.Series(pd.to_datetime(['2014-05-02',\n                                            '2014-08-25',\n                                            '‹2017-07-31',\n                                            '2018-06-14',\n                                            '2018-06-04',\n                                            '2018-07-03']))\nchangepoints = changepoints = pd.concat([changepoints, \nnew_changepoints])\nchangepoints = \\\nchangepoints.sort_values().reset_index(drop=True)\n```", "```py\nmodel = Prophet(seasonality_mode='multiplicative',\n                holidays=special_events,\n                yearly_seasonality=False,\n                weekly_seasonality=False,\n                changepoint_prior_scale=1,\n                changepoints=changepoints)\nmodel.fit(df)\nforecast = model.predict()\nfig = model.plot(forecast)\nadd_changepoints_to_plot(fig.gca(), model, forecast)\nplt.show()\n```"]