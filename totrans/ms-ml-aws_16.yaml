- en: Building Conversational Interfaces Using AWS Lex
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the most popular applications of machine learning is chatbots; they can
    talk to you like a human being and understand your instructions. These chatbots
    use **natural language processing** (**NLP**) to decipher instructions and return
    a query or answer based on your questions. Amazon offers a service called **Lex**
    (it is a short form of **Alexa**), where you can build sophisticated chatbots
    that can perform various tasks.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Introducing Amazon Lex
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building custom chatbot using Amazon Lex
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing Amazon Lex
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Amazon Lex ([https://aws.amazon.com/lex/](https://aws.amazon.com/lex/)) offers
    services that can be used to create conversational bots. Conversational bots use
    various machine learning technologies such as **speech recognition**, **NLP**,
    and **deep learning**. Due to advances in these fields in recent years, conversational
    bots have become a mainstay in our everyday life. Millions of people use Amazon
    Alexa, Google Assistant, Siri, or Cortana as a conversational device to perform
    various tasks. These devices can perform simple tasks, such as tell you the weather,
    call an Uber for you, order a pizza, and control your lighting. Many businesses
    offer chatbots for customer support. For example, Verizon FIOS, which is an internet
    provider, offers a chatbot that can perform tasks such as pointing you to the
    correct troubleshooting documentation or resetting your router based on a chat
    with you. Many companies also use such conversational bots to make robocalls (automated
    calls), where it is very hard for a person to tell whether the caller on the other
    side is not a real human being.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: Building such conversational bots from scratch is not easy. As we studied in
    [Chapter 10](b83ce0ca-e2d7-43f5-9e82-21edb54250c9.xhtml), *Working with AWS Comprehend*,
    natural language does not follow a rigid grammatical structure and we have multiple
    ways to convey the same meaning. So, a conversational bot needs to be able to
    decipher the relevant data from a natural language query and respond with the
    most likely answer. Devices such as Amazon Echo can understand the query in different
    formats and discover what is the most relevant information that can be presented
    to the user. Firstly, such devices need to understand the speech and convert it
    into text that the machine can understand. Secondly, they need to trigger the
    correct skill that can answer that question and present the user input to that
    skill. Once the skill generates the answer, it has to be translated back to speech
    using text-to-speech transformers. All these steps require dedicated and high-quality
    deep learning models to perform these tasks. For example, Amazon uses a deep learning
    model to determine the pauses between words in their text-to-speech transformers.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: Although building such conversational bots may sound like a daunting task, Amazon
    also offers services where you utilize their models to generate such tasks. This
    service is called Amazon Lex and you access it using the AWS console.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然构建这样的对话机器人可能听起来是一项艰巨的任务，但 Amazon 还提供了您可以使用他们的模型来生成此类任务的服务。这项服务称为 Amazon Lex，您可以通过
    AWS 控制台访问它。
- en: Building a custom chatbot using Amazon Lex
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Amazon Lex 构建 custom chatbot
- en: 'In this section, we will build a simple custom conversational bot using Amazon
    Lex. To access the Amazon Lex dashboard, simply go to the AWS console and search
    for this service. Once you reach the dashboard, you will have an option to create
    a new bot. You can build separate bots that can handle specific tasks. In this
    example, we provide the following steps to create a bot that the user can ask
    to order food from a specific restaurant at a specified time:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用 Amazon Lex 构建一个简单的自定义对话机器人。要访问 Amazon Lex 控制台，只需进入 AWS 控制台并搜索此服务。一旦到达控制台，您将有一个选项来创建一个新的机器人。您可以构建可以处理特定任务的独立机器人。在本例中，我们提供了以下步骤来创建一个用户可以要求在指定时间从特定餐厅订购食物的机器人：
- en: 'To get started, click on the Create bot option on the dashboard. You will be
    able to access the following screenshot:'
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要开始，请点击控制台上的“创建机器人”选项。您将能够访问以下截图：
- en: '![](img/6d292eae-ebb2-4f8b-8785-8d2642748649.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/6d292eae-ebb2-4f8b-8785-8d2642748649.png)'
- en: You will have to specify the bot name on this screen and the voice that you
    want to select when testing the bot. You can also specify when the session times
    out so that a person who has left the order incomplete and left their machine
    are not at risk of someone else continuing their chat session. We are creating
    a custom bot in this example. However, you can also access sample bots to test
    the service and see how those bots were created.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 您必须在屏幕上指定机器人名称以及测试机器人时想要选择的语音。您还可以指定会话超时时间，这样离开订单未完成并离开机器的人就不会有其他人继续他们的聊天会话的风险。在本例中，我们创建了一个自定义机器人。然而，您也可以访问示例机器人来测试服务并了解这些机器人是如何创建的。
- en: 'When you click on the Create button, you will be taken to the next screen where
    you have to enter information regarding how your bot works. Firstly, you will
    have to specify how your specific bot is triggered in the chat screen. In our
    case, there are various ways in which a user can let the chat window know that
    they are hungry, so you should add samples of what queries should trigger your
    bot. Such queries are called **utterances** in Amazon Lex. We added the following
    utterances that would trigger our bot:'
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当您点击创建按钮时，您将被带到下一个屏幕，您需要输入有关您的机器人如何工作的信息。首先，您必须指定您的特定机器人在聊天屏幕中是如何被触发的。在我们的案例中，用户有多种方式可以让聊天窗口知道他们饿了，因此您应该添加应该触发您的机器人的查询示例。这些查询在
    Amazon Lex 中被称为**utterances**。我们添加了以下将触发我们的机器人的utterances：
- en: '![](img/a38b09b9-146e-40d5-8ac6-5cf230c244c7.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/a38b09b9-146e-40d5-8ac6-5cf230c244c7.png)'
- en: Amazon Lex will use machine learning to expand the list of utterances, so that
    if a user asks a question such as `Can you order some food`, our bot will still
    be triggered, as the utterance is similar to the one we specified.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Amazon Lex 将使用机器学习来扩展 utterances 列表，这样如果用户提出“你能订购一些食物”这样的问题，我们的机器人仍然会被触发，因为
    utterance 与我们指定的相似。
- en: 'Once we specify what will trigger our bot, we have to specify what happens
    when the bot starts. You can either use the Lambda function on AWS that can perform
    a specific task, or use the dashboard to design the chat. Since designing lambda
    functions is not in the scope of this book, we will use the dashboard to ask the
    user what they would like to order. The following screen options show how we can
    add information that we expect from the users:'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦我们指定了将触发我们的机器人，我们必须指定机器人启动时会发生什么。您可以使用 AWS 上的 Lambda 函数执行特定任务，或者使用控制台来设计聊天。由于设计
    Lambda 函数不在本书的范围内，我们将使用控制台来询问用户他们想订购什么。以下屏幕选项显示了我们可以添加的预期用户信息：
- en: '![](img/e62ce9d9-5ede-4a61-b81f-2cb7c7a06d72.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/e62ce9d9-5ede-4a61-b81f-2cb7c7a06d72.png)'
- en: We define three variables that we would like our chatbot to get inputs on. For
    example, we would want to know the name of the restaurant they want to order from,
    what they want to order, and the time they want their food to be ready. Amazon
    Lex offers pre-built slots (variable types) that you can select when getting the
    inputs. For example, the AMAZON.Food slot type will try to ensure that the value
    of the variable is a type of food, while the AMAZON.Time variable type will ensure
    that the time added is a valid time.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们定义了三个变量，我们希望我们的聊天机器人能够获取这些变量的输入。例如，我们想知道他们想要从哪家餐厅订购，他们想要订购什么，以及他们希望食物准备好的时间。Amazon
    Lex 提供了预构建的槽位（变量类型），您在获取输入时可以选择。例如，AMAZON.Food 槽位类型将尝试确保变量的值是食物类型，而 AMZON.Time
    变量类型将确保添加的时间是有效的时间。
- en: 'Once our bot has information for all the variables that are required, you have
    to specify how the bot will respond. In our case, to keep it simple, we will just
    tell the user that we have ordered the food (please note that this code does not
    really order food). If you were building a real application that orders food,
    you can also invoke a lambda function that can run custom code with the variable
    names. The following screenshot shows how you can add the information about how
    the bot responds, along with a confirmation screen:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当我们的机器人有了所有必需变量的信息后，您必须指定机器人将如何响应。在我们的例子中，为了保持简单，我们只需告诉用户我们已经订购了食物（请注意，此代码实际上并没有订购食物）。如果您正在构建一个真正的订购食物的应用程序，您还可以调用一个
    lambda 函数，该函数可以运行与变量名称相关的自定义代码。以下截图显示了如何添加有关机器人响应的信息，以及确认屏幕：
- en: '![](img/fa22ea15-33f0-47e9-a717-a1d1b48c0b9c.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/fa22ea15-33f0-47e9-a717-a1d1b48c0b9c.png)'
- en: 'If the user confirms, you can provide a thank you message to the user using
    the following Fulfillment option:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果用户确认，您可以使用以下 Fulfillment 选项向用户发送感谢信息：
- en: '![](img/0a012d34-ec3d-4e03-b473-c83d63d8ed3d.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/0a012d34-ec3d-4e03-b473-c83d63d8ed3d.png)'
- en: 'Once you are done filling out the form, you can build your bot using the build
    option on the screen. If you made any errors on the screen, the build will prompt
    you to fix them. Finally, once you have built your bot successfully, you can test
    it by selecting the Test Chatbot option on the right-hand side. The following
    screen shows how our chatbot works. As you can see, we were able to chat with
    our chatbot and (pretend to) order food from it, as shown in the following screenshot:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当您填写完表格后，您可以使用屏幕上的构建选项来构建您的机器人。如果您在屏幕上犯了任何错误，构建会提示您修复它们。最后，一旦您成功构建了机器人，您可以通过选择右侧的测试聊天机器人选项来测试它。以下屏幕显示了我们的聊天机器人是如何工作的。如您所见，我们能够与我们的聊天机器人进行聊天，并（假装）从它那里订购食物，如下面的截图所示：
- en: '![](img/61016471-0011-470e-b426-f535a20fc273.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/61016471-0011-470e-b426-f535a20fc273.png)'
- en: Amazon Lex makes creating chatbots very accessible to everyone by adding a layer
    of abstraction between the actual machine learning models and the users. You can
    concentrate on building a bot that best fits your needs, without worrying about
    the algorithms behind the scenes. As Amazon Lex is a service, AWS charges you
    based on the calls you make to their machine learning models.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在真实机器学习模型和用户之间添加一层抽象层，Amazon Lex 使得创建聊天机器人对每个人都非常容易。您可以专注于构建最适合您需求的机器人，而无需担心背后的算法。由于
    Amazon Lex 是一项服务，AWS 会根据您对其机器学习模型的调用次数向您收费。
- en: Moreover, Amazon Lex models can be exported to the Alexa Skills kit easily using
    the Export option in the Actions drop-down menu for each bot. So, by using Amazon
    Lex, you can design chatbots in a matter of minutes and publish them to be used
    by Alexa. Amazon Lex also has APIs that you can use to build the bots, so that
    you can update or edit your utterances or slots using your code. Please refer
    to the boto3 API ([https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/lex-models.html](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/lex-models.html))
    documentation to learn how to use the API. The calls to APIs use codes similar
    to the examples we presented in [Chapter 10](b83ce0ca-e2d7-43f5-9e82-21edb54250c9.xhtml),
    *Working with AWS Comprehend*, and [Chapter 11](b6601397-10a0-4a94-ba9f-32b5bfcdbb06.xhtml),
    *Using AWS Rekognition*.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您可以通过每个机器人的操作下拉菜单中的“导出”选项轻松地将 Amazon Lex 模型导出到 Alexa 技能套件。因此，通过使用 Amazon
    Lex，您可以在几分钟内设计聊天机器人并将其发布供 Alexa 使用。Amazon Lex 还提供了 API，您可以使用这些 API 来构建机器人，以便您可以使用代码更新或编辑您的语句或槽位。请参阅
    boto3 API 文档（[https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/lex-models.html](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/lex-models.html)）以了解如何使用
    API。对 API 的调用使用与我们第 10 章“与 AWS Comprehend 一起工作”和第 11 章“使用 AWS Rekognition”中提供的示例类似的代码。
- en: Summary
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Amazon Lex makes building conversational bots easier and more accessible for
    everyone. Conversational bots use a lot of machine learning models to provide
    users with quick answers to their queries. Amazon Lex provides a graphical interface
    where you can specify what utterances your bot should respond to, slots of information
    it should collect, and confirmation questions that your bot should ask the user.
    Such tools can be tested directly on the dashboard, as we demonstrated in the
    previous section.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Amazon Lex 使得构建对话机器人对每个人来说都更容易、更易于访问。对话机器人使用许多机器学习模型来为用户提供快速回答。Amazon Lex 提供了一个图形界面，您可以在其中指定您的机器人应该响应哪些语句，应该收集哪些信息槽位，以及机器人应该向用户提出哪些确认问题。此类工具可以直接在仪表板上进行测试，正如我们在上一节中所展示的那样。
- en: As data scientists need to build applications that wow the customers, using
    tools such as Amazon Comprehend, Rekognition, and Lex is a good way to build these
    prototypes rapidly. However, these services may prove to be expensive when used
    on a large scale. In such cases, we always work on building our own models using
    frameworks such as Apache Spark or SageMaker.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 作为数据科学家，需要构建能够让客户惊叹的应用程序，使用 Amazon Comprehend、Rekognition 和 Lex 等工具快速构建这些原型是一个好方法。然而，当大规模使用时，这些服务可能会变得昂贵。在这种情况下，我们总是致力于使用
    Apache Spark 或 SageMaker 等框架构建我们自己的模型。
- en: In the next chapter, we will study how to set up new AWS clusters, and examine
    the nuances of how to select the correct cluster for your task.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何设置新的 AWS 集群，并探讨如何根据您的任务选择正确的集群的细微差别。
- en: Exercises
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习
- en: Create a chatbot that provides you with the status of a flight based on the
    information provided by the user.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个聊天机器人，根据用户提供的信息提供航班状态。
- en: Create a chatbot that can answer various weather-related questions.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个能够回答各种与天气相关的问题的聊天机器人。
