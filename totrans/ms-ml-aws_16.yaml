- en: Building Conversational Interfaces Using AWS Lex
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the most popular applications of machine learning is chatbots; they can
    talk to you like a human being and understand your instructions. These chatbots
    use **natural language processing** (**NLP**) to decipher instructions and return
    a query or answer based on your questions. Amazon offers a service called **Lex**
    (it is a short form of **Alexa**), where you can build sophisticated chatbots
    that can perform various tasks.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing Amazon Lex
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building custom chatbot using Amazon Lex
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing Amazon Lex
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Amazon Lex ([https://aws.amazon.com/lex/](https://aws.amazon.com/lex/)) offers
    services that can be used to create conversational bots. Conversational bots use
    various machine learning technologies such as **speech recognition**, **NLP**,
    and **deep learning**. Due to advances in these fields in recent years, conversational
    bots have become a mainstay in our everyday life. Millions of people use Amazon
    Alexa, Google Assistant, Siri, or Cortana as a conversational device to perform
    various tasks. These devices can perform simple tasks, such as tell you the weather,
    call an Uber for you, order a pizza, and control your lighting. Many businesses
    offer chatbots for customer support. For example, Verizon FIOS, which is an internet
    provider, offers a chatbot that can perform tasks such as pointing you to the
    correct troubleshooting documentation or resetting your router based on a chat
    with you. Many companies also use such conversational bots to make robocalls (automated
    calls), where it is very hard for a person to tell whether the caller on the other
    side is not a real human being.
  prefs: []
  type: TYPE_NORMAL
- en: Building such conversational bots from scratch is not easy. As we studied in
    [Chapter 10](b83ce0ca-e2d7-43f5-9e82-21edb54250c9.xhtml), *Working with AWS Comprehend*,
    natural language does not follow a rigid grammatical structure and we have multiple
    ways to convey the same meaning. So, a conversational bot needs to be able to
    decipher the relevant data from a natural language query and respond with the
    most likely answer. Devices such as Amazon Echo can understand the query in different
    formats and discover what is the most relevant information that can be presented
    to the user. Firstly, such devices need to understand the speech and convert it
    into text that the machine can understand. Secondly, they need to trigger the
    correct skill that can answer that question and present the user input to that
    skill. Once the skill generates the answer, it has to be translated back to speech
    using text-to-speech transformers. All these steps require dedicated and high-quality
    deep learning models to perform these tasks. For example, Amazon uses a deep learning
    model to determine the pauses between words in their text-to-speech transformers.
  prefs: []
  type: TYPE_NORMAL
- en: Although building such conversational bots may sound like a daunting task, Amazon
    also offers services where you utilize their models to generate such tasks. This
    service is called Amazon Lex and you access it using the AWS console.
  prefs: []
  type: TYPE_NORMAL
- en: Building a custom chatbot using Amazon Lex
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will build a simple custom conversational bot using Amazon
    Lex. To access the Amazon Lex dashboard, simply go to the AWS console and search
    for this service. Once you reach the dashboard, you will have an option to create
    a new bot. You can build separate bots that can handle specific tasks. In this
    example, we provide the following steps to create a bot that the user can ask
    to order food from a specific restaurant at a specified time:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To get started, click on the Create bot option on the dashboard. You will be
    able to access the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6d292eae-ebb2-4f8b-8785-8d2642748649.png)'
  prefs: []
  type: TYPE_IMG
- en: You will have to specify the bot name on this screen and the voice that you
    want to select when testing the bot. You can also specify when the session times
    out so that a person who has left the order incomplete and left their machine
    are not at risk of someone else continuing their chat session. We are creating
    a custom bot in this example. However, you can also access sample bots to test
    the service and see how those bots were created.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you click on the Create button, you will be taken to the next screen where
    you have to enter information regarding how your bot works. Firstly, you will
    have to specify how your specific bot is triggered in the chat screen. In our
    case, there are various ways in which a user can let the chat window know that
    they are hungry, so you should add samples of what queries should trigger your
    bot. Such queries are called **utterances** in Amazon Lex. We added the following
    utterances that would trigger our bot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a38b09b9-146e-40d5-8ac6-5cf230c244c7.png)'
  prefs: []
  type: TYPE_IMG
- en: Amazon Lex will use machine learning to expand the list of utterances, so that
    if a user asks a question such as `Can you order some food`, our bot will still
    be triggered, as the utterance is similar to the one we specified.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once we specify what will trigger our bot, we have to specify what happens
    when the bot starts. You can either use the Lambda function on AWS that can perform
    a specific task, or use the dashboard to design the chat. Since designing lambda
    functions is not in the scope of this book, we will use the dashboard to ask the
    user what they would like to order. The following screen options show how we can
    add information that we expect from the users:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e62ce9d9-5ede-4a61-b81f-2cb7c7a06d72.png)'
  prefs: []
  type: TYPE_IMG
- en: We define three variables that we would like our chatbot to get inputs on. For
    example, we would want to know the name of the restaurant they want to order from,
    what they want to order, and the time they want their food to be ready. Amazon
    Lex offers pre-built slots (variable types) that you can select when getting the
    inputs. For example, the AMAZON.Food slot type will try to ensure that the value
    of the variable is a type of food, while the AMAZON.Time variable type will ensure
    that the time added is a valid time.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once our bot has information for all the variables that are required, you have
    to specify how the bot will respond. In our case, to keep it simple, we will just
    tell the user that we have ordered the food (please note that this code does not
    really order food). If you were building a real application that orders food,
    you can also invoke a lambda function that can run custom code with the variable
    names. The following screenshot shows how you can add the information about how
    the bot responds, along with a confirmation screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/fa22ea15-33f0-47e9-a717-a1d1b48c0b9c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If the user confirms, you can provide a thank you message to the user using
    the following Fulfillment option:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0a012d34-ec3d-4e03-b473-c83d63d8ed3d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you are done filling out the form, you can build your bot using the build
    option on the screen. If you made any errors on the screen, the build will prompt
    you to fix them. Finally, once you have built your bot successfully, you can test
    it by selecting the Test Chatbot option on the right-hand side. The following
    screen shows how our chatbot works. As you can see, we were able to chat with
    our chatbot and (pretend to) order food from it, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/61016471-0011-470e-b426-f535a20fc273.png)'
  prefs: []
  type: TYPE_IMG
- en: Amazon Lex makes creating chatbots very accessible to everyone by adding a layer
    of abstraction between the actual machine learning models and the users. You can
    concentrate on building a bot that best fits your needs, without worrying about
    the algorithms behind the scenes. As Amazon Lex is a service, AWS charges you
    based on the calls you make to their machine learning models.
  prefs: []
  type: TYPE_NORMAL
- en: Moreover, Amazon Lex models can be exported to the Alexa Skills kit easily using
    the Export option in the Actions drop-down menu for each bot. So, by using Amazon
    Lex, you can design chatbots in a matter of minutes and publish them to be used
    by Alexa. Amazon Lex also has APIs that you can use to build the bots, so that
    you can update or edit your utterances or slots using your code. Please refer
    to the boto3 API ([https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/lex-models.html](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/lex-models.html))
    documentation to learn how to use the API. The calls to APIs use codes similar
    to the examples we presented in [Chapter 10](b83ce0ca-e2d7-43f5-9e82-21edb54250c9.xhtml),
    *Working with AWS Comprehend*, and [Chapter 11](b6601397-10a0-4a94-ba9f-32b5bfcdbb06.xhtml),
    *Using AWS Rekognition*.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Amazon Lex makes building conversational bots easier and more accessible for
    everyone. Conversational bots use a lot of machine learning models to provide
    users with quick answers to their queries. Amazon Lex provides a graphical interface
    where you can specify what utterances your bot should respond to, slots of information
    it should collect, and confirmation questions that your bot should ask the user.
    Such tools can be tested directly on the dashboard, as we demonstrated in the
    previous section.
  prefs: []
  type: TYPE_NORMAL
- en: As data scientists need to build applications that wow the customers, using
    tools such as Amazon Comprehend, Rekognition, and Lex is a good way to build these
    prototypes rapidly. However, these services may prove to be expensive when used
    on a large scale. In such cases, we always work on building our own models using
    frameworks such as Apache Spark or SageMaker.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will study how to set up new AWS clusters, and examine
    the nuances of how to select the correct cluster for your task.
  prefs: []
  type: TYPE_NORMAL
- en: Exercises
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Create a chatbot that provides you with the status of a flight based on the
    information provided by the user.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a chatbot that can answer various weather-related questions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
