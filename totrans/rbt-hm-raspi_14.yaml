- en: '14'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '14'
- en: Continuing Your Journey – Your Next Robot
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 继续您的旅程——您的下一个机器人
- en: Throughout this book, you’ve learned how to plan, design, build, and program
    a robot. We’ve covered many fundamental topics with some hands-on experience,
    examples demonstrating the basics, and ideas for improving them. In this chapter,
    we will briefly recap our knowledge to take it further.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在整本书中，你已经学会了如何规划、设计、构建和编程一个机器人。我们通过一些动手经验、展示基本原理的例子以及改进它们的想法，涵盖了众多基本主题。在本章中，我们将简要回顾我们的知识，以进一步拓展。
- en: Thinking about your next robot, we’ll answer questions such as the following
    – how would you plan and design it? What skills might you need to research and
    experiment with? What would you build?
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑您的下一个机器人，我们将回答以下问题——您会如何规划和设计它？您可能需要研究哪些技能并进行实验？您会构建什么？
- en: 'In this chapter, we will cover the following main topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要主题：
- en: A summary of what you have learned in this book
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本书所学内容的总结
- en: Planning to extend this robot
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 规划扩展这个机器人
- en: Planning your next robot
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 规划您的下一个机器人
- en: Further suggested areas to learn about
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 进一步建议学习的领域
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'For this chapter, you will require the following:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本章，你需要以下内容：
- en: Diagramming tools such as a pen or pencil and paper to sketch ideas
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 绘图工具，如笔和纸来绘制想法
- en: Cardboard, a ruler, and cutting tools to make a test fit
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 纸板、尺子和切割工具进行测试适配
- en: A computer with internet access
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一台可以上网的电脑
- en: Sketching tools such as [https://app.diagrams.net/](https://app.diagrams.net/)
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 绘图工具，如[https://app.diagrams.net/](https://app.diagrams.net/)
- en: A summary of what you have learned in this book
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本书所学内容的总结
- en: As a robot builder, you have started from the basic plan for a robot. You learned
    about skills useful for robotics, designing, building with tools, programming,
    interfacing electronics, or integrating systems combining all of these, so let’s
    dive deeper.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 作为机器人构建者，您已经从基本的机器人计划开始。您学习了机器人学中有用的技能，设计、使用工具进行构建、编程、电子接口，或者整合结合所有这些的系统，那么让我们深入探讨。
- en: Basic robotics with Raspberry Pi Pico
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Raspberry Pi Pico进行基本机器人技术
- en: From the first chapter, we learned about Raspberry Pi Pico, why it’s a great
    controller for robots, and how it stacks against others, considering the trade-offs
    between Pico and its larger Raspberry Pi family.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 从第一章开始，我们了解了Raspberry Pi Pico，为什么它是一个出色的机器人控制器，以及它与其他控制器相比的优势，考虑到Pico与其更大的Raspberry
    Pi家族之间的权衡。
- en: We covered ways in which Raspberry Pi Pico can be programmed and chose CircuitPython
    for it. CircuitPython has excellent access to hardware, with a growing library
    of support for many electronics modules used in robotics.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们介绍了如何编程Raspberry Pi Pico的方法，并为其选择了CircuitPython。CircuitPython对硬件有出色的访问权限，拥有一个不断增长的用于机器人中使用的许多电子模块的支持库。
- en: 'We took a tour of concepts such as the interface ports:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们参观了诸如接口端口等概念：
- en: GPIO to control or interface externally from Pico.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GPIO用于从Pico外部控制和接口。
- en: UART, SPI, and I2C form data buses to send and receive data from devices.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: UART、SPI和I2C形成数据总线，用于从设备发送和接收数据。
- en: The unique **Programmable Input/Output** (**PIO**) peripheral lets you adapt
    or build interfaces.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 独特的**可编程输入/输出**（**PIO**）外围设备让您可以适应或构建接口。
- en: We then planned a robot around Raspberry Pi Pico, considering its size, type,
    and complexity. We calculated the power requirements and specified a driver board
    to control motor power. We thought about the sensors we might want to use and
    how all these decisions are trade-offs.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们围绕Raspberry Pi Pico规划了一个机器人，考虑了其大小、类型和复杂性。我们计算了功率需求并指定了一个驱动板来控制电机功率。我们考虑了我们可能想要使用的传感器，以及所有这些决定都是权衡。
- en: We considered the GPIO pin usage, ensuring that all the chosen devices would
    be usable on Raspberry Pi Pico together.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们考虑了GPIO引脚的使用，确保所有选定的设备都能在Raspberry Pi Pico上一起使用。
- en: We then used simple cardboard templating to test-fit our basic robot design
    to see whether it was a viable plan to take to the next stage.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们使用简单的纸板模板来测试适配我们的基本机器人设计，看看它是否是一个可行的计划，可以进入下一阶段。
- en: We looked at places to shop for parts, drew up a parts list to shop for, and
    bought the components and tools needed to build the moving robot.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们研究了购买零件的商店，制定了一个购买零件清单，并购买了构建移动机器人的所需组件和工具。
- en: In [*Chapter 3*](B18001_03.xhtml#_idTextAnchor055) and [*Chapter 4*](B18001_04.xhtml#_idTextAnchor080),
    after designing a robot using FreeCAD in 3D, we then built the robot using sheet
    plastic and simple tools.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第3章*](B18001_03.xhtml#_idTextAnchor055)和[*第4章*](B18001_04.xhtml#_idTextAnchor080)中，我们在使用FreeCAD进行3D设计机器人之后，然后使用塑料板和简单工具构建了机器人。
- en: After building the robot platform, in [*Chapter 5*](B18001_05.xhtml#_idTextAnchor098),
    we used GPIO to control the motors, demonstrating the initial movements of the
    robot. Then, we used this to drive along a planned path, demonstrating that we
    can control it in sequence and observing some of the shortcomings of control without
    sensors.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建机器人平台后，在[*第5章*](B18001_05.xhtml#_idTextAnchor098)中，我们使用GPIO来控制电机，展示了机器人的初始运动。然后，我们使用它沿着计划路径行驶，展示了我们可以按顺序控制它，并观察了没有传感器时的控制的一些不足。
- en: After this, we looked at the initial sensors on the robot.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在此之后，我们检查了机器人上的初始传感器。
- en: Extending a Raspberry Pi Pico robot with sensors
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过传感器扩展Raspberry Pi Pico机器人
- en: We were able to add sensors and learned how to make use of them. In [*Chapter
    6*](B18001_06.xhtml#_idTextAnchor115), we used encoder sensors that were part
    of the motor assembly, and then in [*Chapter 7*](B18001_07.xhtml#_idTextAnchor139),
    we specified additional sensors – where we would fit them, the modifications we’d
    need to make to the chassis, and which sensors to buy. Adding sensors is where
    block diagrams of the robot’s hardware came in handy to see what was connected
    where.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们能够添加传感器，并学习了如何使用它们。在[*第6章*](B18001_06.xhtml#_idTextAnchor115)中，我们使用了作为电机组件一部分的编码器传感器，然后在[*第7章*](B18001_07.xhtml#_idTextAnchor139)中，我们指定了额外的传感器——我们将它们放置在哪里，需要对我们底盘进行的修改，以及需要购买哪些传感器。添加传感器时，机器人硬件的框图非常有用，可以查看连接在哪里。
- en: 'The following diagram shows the sensors we used in our robot:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图显示了我们在机器人上使用的传感器：
- en: '![Figure 14.1 – The sensors on our robot ](img/Figure_14.01_B18001.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![图14.1 – 我们机器人上的传感器](img/Figure_14.01_B18001.jpg)'
- en: Figure 14.1 – The sensors on our robot
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.1 – 我们机器人上的传感器
- en: 'The preceding diagram shows the sensors we used on the Raspberry Pi Pico robot.
    The sensors are numbered:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 上述图显示了我们在Raspberry Pi Pico机器人上使用的传感器。传感器被编号：
- en: The encoders can measure the movement of the robot’s motors and, by extension,
    the robot’s wheels. We can use these to measure distance or speed. We covered
    using Raspberry Pi Pico’s PIO system to read these sensors continuously so that
    our code would not miss encoder steps.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编码器可以测量机器人电机的运动，以及通过扩展，机器人的车轮。我们可以使用这些来测量距离或速度。我们介绍了使用Raspberry Pi Pico的PIO系统连续读取这些传感器，以确保我们的代码不会错过编码器步数。
- en: The distance sensors (from [*Chapter 8*](B18001_08.xhtml#_idTextAnchor166))
    can detect how far away objects in front of the robot are. We interfaced these
    using I2C and looked at how to mount them and wire them in and at the programs
    used to fetch distance information from them. We learned how these sensors work
    by bouncing a signal off objects to sense them.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 距离传感器（从[*第8章*](B18001_08.xhtml#_idTextAnchor166)）可以检测机器人前方物体的距离。我们使用I2C与它们接口，并研究了如何安装它们、连接它们以及从它们获取距离信息的程序。我们通过从物体上反射信号来感知它们，学习了这些传感器的工作原理。
- en: Bluetooth (from [*Chapter 9*](B18001_09.xhtml#_idTextAnchor189)) is not a sensor
    but more of a communication system. We were able to build a shelf to fit the Bluetooth
    LE module, wire it in, and write code so we could communicate between Raspberry
    Pi Pico and a smartphone. We could use the phone to control the robot and display
    or plot data from the robot.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 蓝牙（从[*第9章*](B18001_09.xhtml#_idTextAnchor189)）不是一个传感器，而更像是一个通信系统。我们能够构建一个架子来安装蓝牙LE模块，将其连接，并编写代码，以便我们可以在Raspberry
    Pi Pico和智能手机之间进行通信。我们可以使用手机来控制机器人并显示或绘制来自机器人的数据。
- en: We added an **Inertial Measurement Unit** (**IMU**) in [*Chapter 12*](B18001_12.xhtml#_idTextAnchor252)
    and learned how to use it to sense the robot’s orientation by combining results
    from an accelerometer, gyroscope, and magnetometer. First, we looked at how to
    connect this with I2C and then how to calibrate (set up and orient) the sensor
    and get initial readings.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在[*第12章*](B18001_12.xhtml#_idTextAnchor252)中，我们添加了一个**惯性测量单元**（**IMU**），并学习了如何通过结合加速度计、陀螺仪和磁力计的结果来使用它来感知机器人的方向。首先，我们研究了如何通过I2C连接它，然后是如何校准（设置和定位）传感器以及获取初始读数。
- en: As well as adding the sensors, we began exploring what our robot could do with
    them and wrote behaviors utilizing them.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 除了添加传感器外，我们还开始探索我们的机器人可以使用它们做什么，并编写了利用它们的程序。
- en: Writing CircuitPython behavior code for Raspberry Pi Pico
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为Raspberry Pi Pico编写CircuitPython行为代码
- en: We wrote programs that made the robot use sensor inputs to drive its motors
    in smart ways, defining these kinds of programs as behaviors.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们编写了使机器人以智能方式使用传感器输入来驱动其电机的程序，将这些程序定义为行为。
- en: The first behaviors (from [*Chapter 5*](B18001_05.xhtml#_idTextAnchor098)) followed
    a pre-planned path with motors only; however, without sensors, this wasn’t very
    accurate. In [*Chapter 6*](B18001_06.xhtml#_idTextAnchor115), we learned about
    the encoder sensor and measuring encoder counts, and then saw how to use them
    to stop driving at a fixed count. This code introduced sensor loops, with feedback
    from the sensors used to control the motors.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个行为（来自[*第五章*](B18001_05.xhtml#_idTextAnchor098)）遵循了预先规划的路径，仅使用电机；然而，没有传感器，这并不非常准确。在[*第六章*](B18001_06.xhtml#_idTextAnchor115)中，我们学习了编码器传感器和测量编码器计数，然后看到了如何使用它们在固定计数时停止驱动。这段代码引入了传感器循环，通过传感器的反馈来控制电机。
- en: In the next section, starting from [*Chapter 7*](B18001_07.xhtml#_idTextAnchor139),
    we specified more peripherals to add. We started with the distance sensor in [*Chapter
    8*](B18001_08.xhtml#_idTextAnchor166), where we learned how to make a behavior
    to avoid colliding with walls.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，从[*第七章*](B18001_07.xhtml#_idTextAnchor139)开始，我们指定了更多要添加的外设。我们从[*第八章*](B18001_08.xhtml#_idTextAnchor166)中的距离传感器开始，在那里我们学习了如何创建一个避免碰撞墙壁的行为。
- en: In [*Chapter 9*](B18001_09.xhtml#_idTextAnchor189), we linked up the Bluetooth
    device, which opened more exciting and complex behaviors by letting us observe
    and plot sensor data.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第九章*](B18001_09.xhtml#_idTextAnchor189)中，我们连接了蓝牙设备，这使得我们可以观察和绘制传感器数据，从而开启了更多激动人心且复杂的行为。
- en: The scope of sensor feedback loops became more interesting when we learned about
    the **Proportional-Integral-Derivative** (**PID**) algorithm in [*Chapter 10*](B18001_10.xhtml#_idTextAnchor210),
    letting us set up smooth motor responses to stimuli. We demonstrated this with
    distance sensors to keep at a known distance from an object. We then used the
    same technique to follow walls, which was most satisfying to test with a few boxes
    in the middle of the room, watching the robot navigate autonomously around them.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在[*第十章*](B18001_10.xhtml#_idTextAnchor210)中学习了**比例-积分-微分**（**PID**）算法时，传感器反馈循环的范围变得更加有趣，这让我们能够设置平滑的电机对刺激的反应。我们用距离传感器演示了这一点，以保持与物体的已知距离。然后我们使用同样的技术来跟随墙壁，这在房间中间放置几个箱子时进行测试最为令人满意，观察机器人自主地绕它们导航。
- en: The PID algorithm prompted us to revisit the encoders in [*Chapter 11*](B18001_11.xhtml#_idTextAnchor233).
    We converted counts into standard speed units and then used the PID algorithm
    to control the motor and wheel speeds to meet a value in meters per second. This
    refinement allowed the robot to travel in a straight line, and controlled its
    motion to drive it for a known distance at a desired speed; for example, we could
    instruct a robot to travel 1 m in a straight line at 0.17 m/s.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: PID算法促使我们在[*第十一章*](B18001_11.xhtml#_idTextAnchor233)中重新审视编码器。我们将计数转换为标准速度单位，然后使用PID算法来控制电机和车轮速度，以达到每秒米数的目标。这种改进使得机器人能够直线行驶，并控制其运动，使其以期望的速度行驶已知距离；例如，我们可以指示机器人以0.17米/秒的速度直线行驶1米。
- en: With the introduction of the IMU in [*Chapter 12*](B18001_12.xhtml#_idTextAnchor252),
    once we had connected and calibrated it, we learned how to use the IMU to get
    the robot’s orientation. We then connected that with a PID algorithm to make the
    robot turn to face north, regardless of its initial heading.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第十二章*](B18001_12.xhtml#_idTextAnchor252)中引入IMU后，一旦我们连接并校准了它，我们就学习了如何使用IMU获取机器人的方向。然后我们将它与PID算法结合起来，使机器人转向面对北方，无论其初始航向如何。
- en: We also looked at how to use the IMU to make a precise turn – 90 degrees or
    otherwise.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还研究了如何使用IMU进行精确转向——90度或其他角度。
- en: In [*Chapter 13*](B18001_13.xhtml#_idTextAnchor274), we learned about Monte
    Carlo simulation, with which we simulated many potential poses for the robot,
    using the encoders to track movements. We used sensor input to give each pose
    a likelihood weight. The weights were used in a resample algorithm to select the
    most likely poses. A combination of sensor fusion and statistics makes a robot
    feel smart as it estimates its position in an arena. We also demonstrated two
    behaviors running together, with collision avoidance running alongside Monte Carlo
    simulation.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第十三章*](B18001_13.xhtml#_idTextAnchor274)中，我们学习了蒙特卡洛模拟，我们使用编码器跟踪运动来模拟机器人的许多潜在姿态。我们使用传感器输入为每个姿态分配一个可能性权重。这些权重用于重采样算法，以选择最可能的姿态。传感器融合和统计的结合使机器人感觉智能，因为它在竞技场中估计其位置。我们还演示了两种行为同时运行，其中碰撞避免与蒙特卡洛模拟并行进行。
- en: This robot has some interesting capabilities, but where do we take them next?
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这个机器人有一些有趣的功能，但我们接下来该把它们用到哪里呢？
- en: Planning to extend this robot
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 计划扩展这个机器人
- en: I rarely view robot projects as complete, especially those that are learning
    and development platforms. There are always new sensors to try, new programming
    algorithms to make, or simply bugs and quirks to iron out. On the other hand,
    there are ways to make robots more robust and cope with rougher environments,
    making the chassis lighter or the electronics simpler, so let’s start by considering
    some ideas for this robot and hopefully inspire some of your own.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我很少将机器人项目视为完整，尤其是那些学习和开发平台的项目。总有新的传感器尝试，新的编程算法制作，或者仅仅是需要解决的一些错误和怪癖。另一方面，有方法使机器人更加坚固，能够应对更恶劣的环境，例如使底盘更轻或电子设备更简单，所以让我们先考虑一些关于这个机器人的想法，并希望激发一些你自己的灵感。
- en: Sensors you could add
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可以添加的传感器
- en: The first exciting way to extend this robot is to add more sensors. Sensors
    are fun to program to get data from. This means you may have to figure out how
    to incorporate them into existing behaviors and mount them, though.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展这个机器人的第一种令人兴奋的方式是添加更多传感器。编程传感器以获取数据很有趣。这意味着你可能需要想出如何将它们整合到现有行为中并安装它们。
- en: 'The following figure shows a selection of sensor extensions that could be interesting:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 下图展示了一些可能感兴趣的传感器扩展选择：
- en: '![Figure 14.2 – Robot sensor extensions ](img/Figure_14.02_B18001.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![图 14.2 – 机器人传感器扩展](img/Figure_14.02_B18001.jpg)'
- en: Figure 14.2 – Robot sensor extensions
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.2 – 机器人传感器扩展
- en: 'The preceding figure shows a selection of sensors that would be great to extend
    this robot and the things you could get it to do. The sensor types are numbered:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的图显示了可以扩展这个机器人的传感器选择以及你可以让它执行的事情。传感器类型已编号：
- en: '**Line detectors** or **reflectance sensors**: These light up with an **Infrared**
    (**IR**) LED and then detect how much light reflects from an object that they
    point toward, or how bright/dark it is. Makers mount these under the robot as
    a line-following sensor. Some sensors, such as the *SunFounder 5-channel line
    sensor*, come with arrays of light detectors, which can be used with code to follow
    a line drawn on a floor. An example of a single sensor type is a TCRT5000.'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**线检测器**或**反射传感器**：这些传感器通过一个红外（IR）LED 发光，然后检测它们指向的对象反射的光量，或者检测其亮度/暗度。制造商将这些传感器安装在机器人下方作为循线传感器。一些传感器，如
    *SunFounder 5通道线传感器*，带有光检测器阵列，可以用代码在地板上绘制线条进行跟随。单一传感器类型的例子是 TCRT5000。'
- en: '**Bump switches**: Makers use these less in modern robots, and distance sensors
    should mean they aren’t needed. However, you could use them so that if a robot
    surpasses a safe distance and bumps into something, it will immediately disengage
    or move back. They tend to be simple on-off switches with long lever arms to extend
    the edge along which they sense.'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**碰撞开关**：在现代机器人中，制造商使用这些开关较少，距离传感器应该意味着它们不再需要。然而，你可以使用它们，这样如果机器人超过安全距离并撞到某物，它会立即断开或后退。它们通常是简单的开/关开关，带有长杠杆臂以延长它们感应的边缘。'
- en: '**Additional distance sensors**: We’ve used two sensors and moved them around.
    A set of four sensors would allow the different existing behaviors to be enhanced.
    It also offers more information for Monte Carlo simulation and could be used for
    a maze-following behavior.'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**额外的距离传感器**：我们使用了两个传感器并将它们移动到不同的位置。一套四个传感器可以增强现有的不同行为。它还提供了更多用于蒙特卡洛模拟的信息，并且可以用于迷宫跟随行为。'
- en: '**A camera**: There are camera sensors that we could use with Pico, such as
    OV7670 camera modules. They are complicated to connect and may require an additional
    Raspberry Pi Pico. Using downscaling and running edge detection or ML algorithms
    on it, it is possible to match objects. A good alternative is cameras with onboard
    processing, such as the HuskyLens ([https://bit.ly/3Dzurrb](https://bit.ly/3Dzurrb)).
    Another type of camera is a FLIR IR heat camera.'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**摄像头**：我们可以使用 Pico 的摄像头传感器，例如 OV7670 摄像头模块。它们连接起来很复杂，可能需要额外的 Raspberry Pi
    Pico。通过降采样并在其上运行边缘检测或机器学习算法，可以匹配对象。一个好的替代方案是带有板载处理的摄像头，如 HuskyLens ([https://bit.ly/3Dzurrb](https://bit.ly/3Dzurrb))。另一种类型的摄像头是
    FLIR 红外热成像仪。'
- en: '**LIDAR sensors**: These scan and return the depths of objects in their field
    of view. Having many distance sensors could extend the accuracy of Monte Carlo
    simulation. However, these produce a lot of data quickly and may need a more powerful
    CPU to control them. Solid-state sensors are low-power, small, and cheap. Pictured
    in *Figure 14**.2* is an LDRobot LD-07 solid-state LIDAR.'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**LIDAR传感器**：这些传感器扫描并返回其视野中物体的深度。拥有多个距离传感器可以扩展蒙特卡洛模拟的准确性。然而，这些传感器会产生大量数据，可能需要一个更强大的CPU来控制它们。固态传感器功耗低、体积小、价格便宜。图14.2中展示了LDRobot
    LD-07固态LIDAR。'
- en: Light sensors can read how much light falls on them. You could use these to
    program behaviors that move toward or away from light or more complex interactions
    with light.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 光传感器可以读取它们上落下的光线量。你可以使用这些传感器来编程行为，使机器人向光或远离光移动，或者与光进行更复杂的交互。
- en: A robot can have internal sensors, such as thermal, current, and voltage monitors,
    to monitor its batteries and motors so that the code can respond to low-battery
    or high-current scenarios.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 机器人可以具有内部传感器，如热敏、电流和电压监控器，以监控其电池和电机，以便代码可以响应低电量或高电流情况。
- en: Optical flow sensors, such as the PAA5100JE, facilitate odometry based on the
    flow of the ground below a robot and can be used to detect the overall speed of
    the robot; this can compensate for issues such as wheels slipping, which encoders
    would miss.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 光流传感器，如PAA5100JE，通过机器人下方地面的流动来促进里程计算，可以用来检测机器人的整体速度；这可以补偿编码器可能忽略的问题，如轮子打滑。
- en: We’ve covered some sensor ideas for our robot, but another way to get information
    to and from a robot is through user interactions.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经介绍了一些关于我们机器人的传感器想法，但获取机器人信息的一种另一种方式是通过用户交互。
- en: Interacting with the robot
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 与机器人交互
- en: 'The robot in this book doesn’t have many options for user interaction:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中的机器人用户交互选项不多：
- en: '![Figure 14.3 – Human interaction I/O ](img/Figure_14.03_B18001.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![图14.3 – 人机交互I/O](img/Figure_14.03_B18001.jpg)'
- en: Figure 14.3 – Human interaction I/O
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.3 – 人机交互I/O
- en: '*Figure 14**.3* shows many ways to improve human interaction with the robot:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '*图14.3* 展示了许多改善人与机器人交互的方法：'
- en: '**Buttons**: Add buttons for starting and stopping a behavior on a robot.'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**按钮**：在机器人上添加按钮以启动和停止行为。'
- en: '**LED lights**: Some LED lights, perhaps with different colors, can be good
    to show a little feedback on what is running. Big LEDs can also be used as headlights.'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**LED灯**：一些LED灯，可能具有不同的颜色，可以用来显示运行状态的反馈。大LED灯也可以用作前灯。'
- en: '**RGB LED displays**: These come in strips or panels, and each LED can be set
    to a different color. They can provide more debugging and can make cute eyes or
    faces too. They use multiple interfaces, a custom one-pin system, and SPI or I2C.
    The Pimoroni PIM435 pictured uses I2C.'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**RGB LED显示屏**：这些显示屏可以是条形或面板式，每个LED都可以设置为不同的颜色。它们可以提供更多的调试功能，也可以制作出可爱的小眼睛或面孔。它们使用多种接口，包括自定义的单针系统，以及SPI或I2C。图中的Pimoroni
    PIM435使用的是I2C。'
- en: '**OLED screens**: These can show pictures, dials, menus, text, or graphics
    right on the robot. These come in mono or color varieties and are frequently I2C-controlled.
    One such mono I2C device is the Velleman WPI438 I2C screen.'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**OLED屏幕**：这些屏幕可以直接在机器人上显示图片、旋钮、菜单、文本或图形。它们有单色或彩色两种，通常由I2C控制。例如，Velleman WPI438
    I2C屏幕就是这样一种单色I2C设备。'
- en: '**Game joypads**: A game joypad controller would be a nice way to control a
    robot. However, it may require a more advanced Bluetooth setup to interface with
    Raspberry Pi Pico.'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**游戏手柄**：游戏手柄控制器将是控制机器人的一种好方法。然而，它可能需要一个更高级的蓝牙设置来与Raspberry Pi Pico接口。'
- en: '**A phone web app**: We’ve been using the BlueFruit app, but by swapping Bluetooth
    for Wi-Fi (such as with Raspberry Pi Pico-W), you can write far more interactive
    phone control. This will require writing more code for a frontend. At the time
    of writing, a system for graphing on a smartphone requires a fair amount of code
    to produce over Wi-Fi, and a convenient app, such as BlueFruit LE Connect, doesn’t
    yet exist.'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**手机网页应用**：我们一直在使用BlueFruit应用，但通过将蓝牙换成Wi-Fi（例如使用Raspberry Pi Pico-W），你可以编写更多交互式的手机控制代码。这将需要为前端编写更多的代码。在撰写本文时，智能手机上的绘图系统需要相当多的代码才能通过Wi-Fi生成，而且还没有方便的应用程序，例如BlueFruit
    LE Connect。'
- en: '**A beeper**: These can make beeping and buzzing sounds for the robot. You
    can drive some of these directly from GPIO pins, with musical tones indicating
    the program’s state or making interesting sounds.'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**蜂鸣器**：这些可以为机器人发出蜂鸣和嗡嗡声。你可以直接从GPIO引脚驱动一些这些蜂鸣器，用音乐音调表示程序的状态或产生有趣的声音。'
- en: '**A microphone**: There are UART-capable voice control modules suitable for
    Raspberry Pi Pico. They have a small set of commands to start behaviors, and,
    with LED or beeper feedback, could be a novel way to interact with the robot.'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**麦克风**：有适用于 Raspberry Pi Pico 的 UART 兼容语音控制模块。它们有一组小命令来启动行为，并且，通过 LED 或蜂鸣器反馈，这可能是一种与机器人互动的新颖方式。'
- en: User interactions can manipulate behaviors, but we need somewhere good to mount
    these LEDs. What can we do to the robot’s chassis to improve and extend it?
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 用户交互可以操纵行为，但我们需要一个合适的地方来安装这些 LED。我们能为机器人的底盘做些什么来改进和扩展它？
- en: Chassis and form enhancements
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 底盘和形状增强
- en: 'The robot’s chassis is simple and light, but we could take this much further,
    making it a more robust or aesthetically pleasing robot:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 机器人的底盘简单且轻便，但我们可以进一步改进，使其成为一个更坚固或更具美学吸引力的机器人：
- en: '![Figure 14.4 – Chassis enhancements ](img/Figure_14.04_B18001.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![图 14.4 – 底盘增强](img/Figure_14.04_B18001.jpg)'
- en: Figure 14.4 – Chassis enhancements
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.4 – 底盘增强
- en: '*Figure 14**.4* has examples of two ways to improve the robot or its sensors
    with an outer shell:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 14.4* 有两种改进机器人或其传感器的外壳方法的示例：'
- en: '*Figure 14**.4* (*1*) shows a lunchbox adapted into a robot. A lunchbox, ice
    cream tub, or roller paint tray with holes cut into it can be made into the fairing
    for the robot, enclosing the electronics and holding its wiring and electronics.'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*图 14.4* (*1*) 展示了一个改造为机器人的午餐盒。一个午餐盒、冰淇淋桶或带有孔洞的滚筒油漆托盘可以被制成机器人的整流罩，封装电子元件并固定其电线和电子元件。'
- en: '*Figure 14**.4* (*2*) shows a robot with sensor mounts that have been 3D-printed.
    Custom fairings and brackets can be made this way or through vacuum forming or
    laser cutting. See the *Design and manufacturing* section later in this chapter.'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*图 14.4* (*2*) 展示了一个带有 3D 打印传感器支架的机器人。可以通过这种方式或通过真空成型或激光切割制作定制的整流罩和支架。参见本章后面的
    *设计和制造* 部分。'
- en: Whichever method you choose, it needs to be lightweight and easy to remove so
    that the electronics are accessible and you can change the batteries. It could
    be held in place by bolts or Velcro.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你选择哪种方法，它都需要轻便且易于拆卸，以便电子元件易于访问，你可以更换电池。它可以通过螺栓或魔术贴固定在原位。
- en: You‘ll need to consider how to make controls accessible – such as putting switches
    and charging ports on the outside. Having a fairing invites more decoration, the
    use of color, and style paneling. Combining this with the RGB LEDs could make
    for an interesting-looking robot. You could take style cues from your favorite
    sci-fi robot and use a similar color scheme.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要考虑如何使控制装置易于访问——例如，将开关和充电端口放在外面。拥有一个整流罩可以邀请更多的装饰，使用颜色和风格面板。将此与 RGB LED 结合，可以制作出外观有趣的机器人。你可以从你最喜欢的科幻机器人那里获得风格灵感，并使用类似的配色方案。
- en: Electronics enhancements
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 电子增强
- en: The electronics we’ve used so far have been composed of modules tethered together
    with connector cables, using breadboards to assemble them. Breadboards are great
    for prototyping but take up a lot of space and weight and are susceptible to movement
    and vibration, with wires quickly coming loose or forming poor connections. They
    also look messy. What could we research to upgrade this?
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们迄今为止使用的电子元件是由连接电缆连接在一起的模块，使用面包板组装它们。面包板非常适合原型设计，但占用大量空间和重量，容易受到移动和振动的影响，导致电线迅速松动或形成不良连接。它们看起来也很杂乱。我们能够研究什么来升级这一点？
- en: 'Here are some sturdiness enhancements we can make to the robot electronics:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些我们可以对机器人电子元件进行的坚固性增强：
- en: '![Figure 14.5 – Improving robot electronics ](img/Figure_14.05_B18001.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![图 14.5 – 改善机器人电子元件](img/Figure_14.05_B18001.jpg)'
- en: Figure 14.5 – Improving robot electronics
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.5 – 改善机器人电子元件
- en: 'Electronics in the robot could be made smaller, lighter, and tidier. Try these
    ideas:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 机器人中的电子元件可以做得更小、更轻、更整洁。尝试以下想法：
- en: Pictured in *Figure 14**.5* (*1*) is an Inventor 2040 W from Pimoroni ([https://shop.pimoroni.com/products/inventor-2040-w](https://shop.pimoroni.com/products/inventor-2040-w)).
    Motor and robot boards for Raspberry Pi Pico or incorporating an RP2040 will reduce
    the amount of wiring. The Inventor 2040 W includes motor control, lights, and
    servo connections.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 *图 14.5* (*1*) 中展示的是 Pimoroni 的 Inventor 2040 W ([https://shop.pimoroni.com/products/inventor-2040-w](https://shop.pimoroni.com/products/inventor-2040-w))。适用于
    Raspberry Pi Pico 或集成 RP2040 的电机和机器人板可以减少布线的数量。Inventor 2040 W 包含电机控制、灯光和伺服连接。
- en: Soldered boards will be tidier. An intermediate option is using a stripboard
    or perfboard. These pre-made printed circuit boards can mimic the wiring arrangement
    of breadboard strips, allowing you to transfer breadboard designs onto them. You
    can then solder parts and wires into them. Wires going to external parts, such
    as motors and sensors, will have their connectors soldered into the board.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 焊接的电路板会更整洁。一个中间选项是使用条形板或穿孔板。这些预制印刷电路板可以模仿面包板条线的布线排列，允许你将面包板设计转移到它们上面。然后你可以将部件和电线焊接进去。连接到外部部件，如电机和传感器，的电线将会有它们的连接器焊接在板上。
- en: '*Figure 14**.5* (*2*) shows a custom **Printed Circuit Board** (**PCB**) from
    [https://github.com/uwrobotics/MarsRoverHardware](https://github.com/uwrobotics/MarsRoverHardware).
    You can download or design your own using software such as KiCad. This is complicated
    but gives you lots of options for customization. You use a PCB view to lay out
    a circuit board and route connections between parts. Using PCBs allows you to
    make small, light, and tidy robot designs. In addition, it opens your designs
    to using surface mount electronics, which makes more components available. You
    can use **design rules** to ensure that the connections are all made and tracks
    are not touching. After this, you can then prepare the part for manufacture. You
    can take these designs to a board house, such as Seeed Studio ([https://www.seeedstudio.com/](https://www.seeedstudio.com/)),
    that prints the board for you.'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '*图14.5*（*2*）显示了来自[https://github.com/uwrobotics/MarsRoverHardware](https://github.com/uwrobotics/MarsRoverHardware)的定制**印刷电路板**（**PCB**）。你可以使用如KiCad等软件下载或设计自己的PCB。这很复杂，但为你提供了许多定制选项。你使用PCB视图来布置电路板并布置部件之间的连接。使用PCB可以使你制作出小、轻、整洁的机器人设计。此外，它还使你的设计可以采用表面贴装电子元件，这使得更多元件可用。你可以使用**设计规则**来确保所有连接都已制作，并且轨迹没有接触。在此之后，你就可以准备部件进行制造了。你可以将这些设计带到如Seeed
    Studio（[https://www.seeedstudio.com/](https://www.seeedstudio.com/））这样的电路板制造商那里，他们为你打印电路板。'
- en: Some board houses offer a **Printed Circuit Board with Assembly** (**PCBA**)
    service, where, at additional cost, they will solder on components, sockets, and
    connectors before sending the part to you. Using a PCBA service means you just
    need to plug in the external sensors and perhaps a Pico into a socket on receiving
    the board. That means that you do not need to solder surface mount parts yourself.
    Just be aware that this will take experience, and you may produce boards that
    aren’t right the first time.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 一些电路板制造商提供**印刷电路板组装**（**PCBA**）服务，在额外收费的情况下，他们会在将部件发送给你之前将元件、插座和连接器焊接在板上。使用PCBA服务意味着你只需在收到电路板后插入外部传感器，也许还需要将Pico插入插座。这意味着你不需要自己焊接表面贴装元件。只是要注意，这需要经验，并且你可能会在第一次制作时产生不正确的电路板。
- en: '![Figure 14.6 – Tidying wiring ](img/Figure_14.06_B18001.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![图14.6 – 整理线路](img/Figure_14.06_B18001.jpg)'
- en: Figure 14.6 – Tidying wiring
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.6 – 整理线路
- en: You can tidy robot cabling using 6 mm spiral wrap and cable clips, as shown
    in *Figure 14**.6* (*3*), or just masking tape, as shown in *Figure 14**.6* (*4*).
    Wiring can be aesthetically pleasing if you make an effort to route it nicely.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以使用6毫米螺旋缠绕带和电缆夹，如图*图14.6*（*3*）所示，或只是使用胶带，如图*图14.6*（*4*）所示，来整理机器人电缆。如果你努力将线路布置得很好，线路可以看起来很美观。
- en: For connectors, we have used Dupont connectors due to their convenience. However,
    once you are on a soldered circuit board, you can consider locking connectors,
    such as JST or Molex PicoBlade connectors. These lock cables in place so that
    they will not vibrate loose or easily be pulled out, and add further protection
    by being polarized. You will need to get practice with a crimping tool to use
    these effectively, but it will be worth it for better robot builds.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于连接器，我们由于它们的便利性而使用了杜邦连接器。然而，一旦你处于焊接电路板上，你可以考虑使用锁定连接器，例如JST或Molex PicoBlade连接器。这些连接器将电缆固定在原位，这样它们就不会因振动而松动或轻易被拉出，并且通过极化增加了额外的保护。你需要练习使用压接工具才能有效地使用这些连接器，但这对更好的机器人构建来说将是值得的。
- en: With a robust chassis and tidier electronics, perhaps you can get more ambitious
    with further outputs. Let’s see things you could make the robot’s outputs do.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 借助坚固的车身和更整洁的电子设备，你可能可以进一步增加输出。让我们看看机器人输出可以做些什么。
- en: Outputs you could add
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 你可以添加的输出
- en: 'Outputs mean a robot could do more to move or alter its surroundings. Additional
    motors, such as servo motors, can be used to make interesting mechanical devices,
    for example, those shown in the following figure:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 输出意味着机器人可以做更多的事情来移动或改变其周围环境。可以使用额外的电机，例如伺服电机，来制作有趣的机械装置，例如以下图中所示：
- en: '![Figure 14.7 – Motors and outputs in use ](img/Figure_14.07_B18001.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![图14.7 – 使用中的电机和输出](img/Figure_14.07_B18001.jpg)'
- en: Figure 14.7 – Motors and outputs in use
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.7 – 使用中的电机和输出
- en: '*Figure 14**.7* shows a few interesting ways to use further motors to extend
    the robot:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '*图14.7* 展示了使用更多电机来扩展机器人的几种有趣方式：'
- en: '**A gripper** – This could grasp items and move them around. The Pololu Micro
    Gripper Kit uses a single servo to open or close the jaws. These are fun to attach
    to the front of a robot.'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**夹爪** – 夹爪可以抓取物品并将它们移动。Pololu微型夹爪套件使用一个伺服电机来打开或关闭夹爪。将这些夹爪安装在机器人前面很有趣。'
- en: '**A pan-and-tilt mechanism** – Putting sensors on this means you can direct
    a sensor at a particular point of interest or use the head to sweep with a sensor.
    One servo motor rotates the head left and right (panning), and the other tilts
    the head up and down. The Adafruit Mini Pan-Tilt Kit is a good example of this.'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**俯仰和倾斜机构** – 在这个机构上放置传感器意味着你可以将传感器指向特定的感兴趣点，或者使用头部用传感器进行扫视。一个伺服电机旋转头部左右（俯仰），另一个倾斜头部上下。Adafruit微型俯仰倾斜套件是这方面的一个好例子。'
- en: '**A lift-and-lower mechanism** – These use a motor to lift and lower a platform,
    like a forklift. This could be combined with the gripper to make a robot that
    can stack objects.'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**升降机构** – 这些机构使用电机来升降平台，就像叉车一样。这可以与夹爪结合，制作出能够堆叠物体的机器人。'
- en: '**A ball launcher** – A launcher would be fun so that a robot could aim at
    targets. Robotics competitions such as PiWars have events that involve using these.
    Motors are required to direct the aim, and a motor or actuator is required for
    launching the ball.'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**球发射器** – 发射器会让机器人能够瞄准目标，这会很有趣。像PiWars这样的机器人竞赛中就有涉及使用这些发射器的项目。需要电机来指引瞄准，并且需要一个电机或执行器来发射球。'
- en: These are just a few examples; there are plenty more mechanisms you can either
    buy or build. You could even add a whole arm with a kit such as the MeArm Servo
    Robot Arm Kit.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 这些只是几个例子；还有很多机制你可以购买或自己制作。你甚至可以使用像MeArm伺服机器人手臂套件这样的套件添加一个整个手臂。
- en: Now that we’ve seen some outputs, perhaps we can better use these sensors and
    outputs with more behaviors.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经看到了一些输出，也许我们可以更好地使用这些传感器和输出，结合更多的行为。
- en: Extending the code and behaviors
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 扩展代码和行为
- en: 'The robot’s code and behaviors are what bring the robot to life. However, there
    are many ways we could improve the code on this robot, as shown in the following
    figure:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 机器人的代码和行为是让机器人活起来的关键。然而，我们可以以多种方式改进这个机器人的代码，如下面的图所示：
- en: '![Figure 14.8 – Behavior suggestions ](img/Figure_14.08_B18001.jpg)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![图14.8 – 行为建议](img/Figure_14.08_B18001.jpg)'
- en: Figure 14.8 – Behavior suggestions
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.8 – 行为建议
- en: '*Figure 14**.8* depicts some suggestions; the following list covers these and
    more:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '*图14.8* 展示了一些建议；以下列表涵盖了这些以及其他更多内容：'
- en: '**Line-following**: Using the line detection sensors previously mentioned in
    the section on sensors, you could program a robot to follow lines drawn on the
    floor. Line-following can use *if-then, bang-bang* control, or a PID algorithm
    for smooth line-following.'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**循线**：使用在传感器部分提到的线检测传感器，你可以编程机器人跟随地板上画出的线条。循线可以使用 *if-then, bang-bang* 控制，或者使用PID算法来实现平滑的循线。'
- en: '**A menu system**: You can combine all the behaviors in a menu for selection.
    Consider how each program would be tidied up so another can take over. A variation
    of this is using a voice control module, along with beeps, to indicate the current
    robot mode.'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**菜单系统**：你可以将所有行为组合到一个菜单中进行选择。考虑如何整理每个程序，以便另一个程序可以接管。这种方法的变体是使用语音控制模块，以及蜂鸣声，来指示当前机器人的模式。'
- en: '**Driving with a camera**: Adding a camera and serving it to a phone web app
    means you could drive the robot with a camera view – a robot periscope.'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**使用摄像头驾驶**：添加一个摄像头并将其提供给手机网页应用，这意味着你可以通过摄像头视图来驾驶机器人——一个机器人潜望镜。'
- en: '**Maze solving**: With more distance sensors, the robot would be able to look
    for openings and find its way around a maze. Depending on the complexity of the
    maze, simple rules such as always turning left might work, or the robot might
    have a map of the maze and use the Monte Carlo method with precision navigation.
    For example, a turning-left method using the encoders might be able to memorize
    what turns it took and where, backtrack, and try other routes.'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**迷宫解决**：使用更多的距离传感器，机器人将能够寻找出口并在迷宫中找到路径。根据迷宫的复杂程度，简单的规则，如始终向左转，可能有效，或者机器人可能有一个迷宫地图，并使用蒙特卡洛方法进行精确导航。例如，使用编码器的向左转方法可能能够记住它所采取的转弯和位置，然后回溯并尝试其他路线。'
- en: '**Camera navigation**: Camera images can be scaled to low resolutions, and
    algorithms can be used to pick out features where image intensity or colors have
    changed over a threshold. The detected feature locations can then be combined
    with a PID algorithm to orient the robot relative to such features.'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**摄像头导航**：摄像头图像可以被缩放到低分辨率，并可以使用算法来检测图像强度或颜色超过阈值的变化。检测到的特征位置可以与PID算法结合，以相对于这些特征定位机器人。'
- en: '**Camera recognition**: Recognition is considerably more complex and may require
    looking at a machine learning system such as TinyML. See [https://bit.ly/3xy3twx](https://bit.ly/3xy3twx)
    for news on TinyML ports for CircuitPython. You can use similar techniques with
    microphones for speech recognition, but this may be intensive enough that multiple
    Raspberry Pi Pico boards would be required.'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**摄像头识别**：识别要复杂得多，可能需要查看机器学习系统，如TinyML。参见[https://bit.ly/3xy3twx](https://bit.ly/3xy3twx)了解TinyML对CircuitPython的端口新闻。你可以使用类似的技术与麦克风进行语音识别，但这可能足够强大，以至于需要多个Raspberry
    Pi Pico板。'
- en: 'The following suggestions are not pictured but represent advanced behaviors:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 以下建议未在图中展示，但代表了高级行为：
- en: '**Simultaneous Location and Mapping** (**SLAM**): A robot can use its sensors
    to build up a map of its location and then keep track of its pose relative to
    what it has already mapped. This technique would use several sensors together
    and benefit from the LIDAR sensors that we have already mentioned. However, this
    advanced technique can be a deep rabbit hole!'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**同时定位与建图**（**SLAM**）：机器人可以使用其传感器构建其位置的地图，然后跟踪其相对于已映射内容的姿态。这种技术将使用多个传感器一起，并从我们已提到的激光雷达传感器中受益。然而，这种高级技术可能是一个深不可测的兔子洞！'
- en: '**Task planning** and **motion planning**: Combining controlled turns, controlled
    movements, and location tracking with a hopper or gripper would mean you could
    make behaviors to seek out, collect items, and place them in a collection point.'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**任务规划**和**运动规划**：结合受控转弯、受控移动和位置跟踪与跳斗或夹爪，意味着你可以创建行为来寻找、收集物品并将它们放置在收集点。'
- en: These suggestions should hopefully inspire some creative behaviors. There are
    endless possibilities for combinations of code, sensors, and outputs, which you
    can use to improve your knowledge, solve problems with a robot, and extend your
    toolbox.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 希望这些建议能够激发一些创造性的行为。代码、传感器和输出的组合可能性无穷无尽，你可以利用这些来提高你的知识，用机器人解决问题，并扩展你的工具箱。
- en: So far, though, these suggestions have been focused on extending the existing
    platform. So, what happens when we extend to thinking about your next robot platform?
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，到目前为止，这些建议一直集中在扩展现有平台。那么，当我们扩展到考虑你的下一个机器人平台时会发生什么呢？
- en: Planning your next robot
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 规划你的下一个机器人
- en: In [*Chapter 1*](B18001_01.xhtml#_idTextAnchor015), *Planning a Robot with Raspberry
    Pi Pico*, we saw a few styles under the *What style of robot is suitable?* section.
    Now, inviting a greater level of imagination, let’s revisit how different a robot
    can be.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第1章*](B18001_01.xhtml#_idTextAnchor015)中，*使用Raspberry Pi Pico规划机器人*，我们在*哪种机器人样式合适？*这一节中看到了几种样式。现在，让我们邀请更丰富的想象力，重新审视机器人可以有多么不同。
- en: Form, shape, and chassis
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 形状、形状和底盘
- en: 'We’ll start by considering the styles from [*Chapter 1*](B18001_01.xhtml#_idTextAnchor015)
    again and how you might get there:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将再次考虑[*第1章*](B18001_01.xhtml#_idTextAnchor015)中的样式以及你如何到达那里：
- en: '![Figure 14.9 – Different robot styles ](img/Figure_14.09_B18001.jpg)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![图14.9 – 不同的机器人样式](img/Figure_14.09_B18001.jpg)'
- en: Figure 14.9 – Different robot styles
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.9 – 不同的机器人样式
- en: 'The preceding figure shows four styles of robots. We can now imagine more variations
    on these:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的图显示了四种机器人样式。现在我们可以想象更多基于这些样式的变体：
- en: '**A larger wheeled platform** to hold more sensors and electronics, perhaps
    with a more interesting wheel arrangement.'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**更大的轮式平台**以容纳更多传感器和电子设备，可能还有更有趣的轮子排列。'
- en: '**A hexapod robot** with six legs – for exploring walking and gaits. This will
    use lots of servo motors.'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**六足机器人**有六条腿 – 用于探索行走和步态。这将使用大量的伺服电机。'
- en: '**A robot arm**, such as the MeArm mentioned previously. These can be servo
    motor-based or stepper motor-based.'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**机器人臂**，例如之前提到的MeArm。这些可以是伺服电机或步进电机驱动。'
- en: '**A quadcopter drone** is super-light, but involves more interesting IMU and
    PID use.'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**四旋翼无人机**非常轻，但涉及到更有趣的IMU和PID应用。'
- en: 'The following diagram shows a few other robot ideas:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表显示了一些其他机器人想法：
- en: '![Figure 14.10 – More robot types ](img/Figure_14.10_B18001.jpg)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![图14.10 – 更多机器人类型](img/Figure_14.10_B18001.jpg)'
- en: Figure 14.10 – More robot types
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.10 – 更多机器人类型
- en: '*Figure 14**.10* shows a few more types of robots you could consider for your
    next project; these are potentially more ambitious as far as the ideas go:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '*图14.10* 展示了一些你可以考虑用于你下一个项目的更多机器人类型；就想法而言，它们可能更具雄心：'
- en: A **snake robot** is made of multiple robot segments with distributed electronics.
    The segments can flex like carriages on a train, with power and control running
    along between the segments. You can use servo motors to control the flex, and
    motors on segments driving wheels or tracks provide traction to pull the snake
    along with sensors. The front segment usually carries forward-facing sensors.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**蛇形机器人**由多个带有分布式电子的机器人段组成。这些段可以像火车上的车厢一样弯曲，动力和控制沿着段之间运行。你可以使用伺服电机来控制弯曲，段上的电机驱动轮子或履带提供牵引力以拉动蛇，并带有传感器。前段通常携带面向前方的传感器。'
- en: A **submarine robot** would be fun to use to explore lakes or ponds. These require
    thinking about how you would power an immersed motor, how you might safely retrieve
    a robot if it loses power, and how you would control it through water, which can
    block RF signals such as Bluetooth or Wi-Fi. A tether cord may be necessary. You’ll
    need to think about weighting, ballasts, and movable thrusters. A fun variation
    may be an amphibious floating robot that can drive on land, move in the water,
    and dive.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用**潜艇机器人**探索湖泊或池塘会很有趣。这需要考虑如何给浸没的电机供电，如果机器人失去电力，如何安全地回收它，以及如何通过水控制它，因为水会阻挡如蓝牙或Wi-Fi之类的射频信号。可能需要一根绳索。你还需要考虑重量、压载物和可移动推进器。一个有趣的变体可能是一种两栖浮动物体，它可以在陆地上行驶，在水中移动，并且可以下潜。
- en: '*A*n **XY** or **gantry-type robot** frequently uses stepper motors, arranged
    so one set moves along each axis. 3D printers, CNC mills, and laser cutters frequently
    use this type. They can also be used to plot images or with a grabber to pick
    up objects and place them somewhere.'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*一种* **XY** 或 **龙门式机器人**通常使用步进电机，排列方式是每一组电机沿着每个轴移动。3D打印机、CNC铣床和激光切割机经常使用这种类型。它们也可以用来绘制图像，或者与抓取器一起拾取物体并将它们放置在某个地方。'
- en: These robot variations should inspire you. Next, let’s look at a few variations
    on the wheeled platform.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 这些机器人变体应该能给你带来灵感。接下来，让我们看看轮式平台的一些变体。
- en: Variations on wheels
  id: totrans-154
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 轮子的变体
- en: 'The wheeled platform is still a practical and straightforward robot style.
    However, you can extend those wheels in many exciting ways:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 轮式平台仍然是一种实用且直接的机器人风格。然而，你可以以许多令人兴奋的方式扩展这些轮子：
- en: '**Caterpillar tracks** can offer more traction than wheels and deal with uneven
    surfaces. They also look attractive. Some types use a single rubber molded track,
    such as the tracks on the tiny Zumo chassis, and others use tracks made of links,
    such as those on the Devastator robot chassis. Depending on these types, you may
    run into problems with friction when trying to turn, and may need more torque
    depending on the surface.'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**履带**比轮子提供更大的牵引力，并能处理不平的表面。它们看起来也很吸引人。一些类型使用单个橡胶模具的履带，例如小型Zumo底盘上的履带，而其他类型使用由链节组成的履带，例如Devastator机器人底盘上的履带。根据这些类型，在尝试转向时可能会遇到摩擦问题，并且根据表面可能需要更大的扭矩。'
- en: '**Mecanum wheels** are unique. As well as moving forward/back and turning,
    mecanum platforms can also “*crab-walk*” sideways and drive in almost any direction;
    you will need four independent motors and some specialized control algorithms
    for this implementation. See [https://bit.ly/3y1Kjzp](https://bit.ly/3y1Kjzp)
    for an example.'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**麦卡诺轮**是独特的。除了前进/后退和转向外，麦卡诺平台还可以“*横着爬行*”并几乎在任何方向上行驶；为此实现，你需要四个独立的电机和一些专业的控制算法。参见[https://bit.ly/3y1Kjzp](https://bit.ly/3y1Kjzp)获取示例。'
- en: '**Tristar wheels** are clusters of three wheels set up so that either individual
    wheels can turn or whole clusters can turn; this allows them to climb up steps
    depending on their relative size. They are mechanically complicated, but you can
    drive them like regular wheels. They should be a four- or six-wheel drive combination.'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**三联轮**是由三个轮子组成的集群，设置方式是单个轮子可以转动，或者整个集群可以转动；这使得它们可以根据相对大小爬上台阶。它们在机械上很复杂，但可以像普通轮子一样驾驶。它们应该是四轮或六轮驱动组合。'
- en: '**Independent drive** uses individually steerable wheel pods; the Mars Discovery
    rover has these, with a stepper or servo motor turning each wheel assembly, and
    each wheel being individually drivable too; they can both crab-walk and steer.
    These are more complicated than mecanum wheels but are robust.'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**独立驱动**使用可单独转向的轮子组件；火星探测车就有这些，每个轮子组件由步进电机或伺服电机驱动，每个轮子都可以单独驱动；它们可以横着爬行和转向。这些比麦卡诺轮更复杂，但更坚固。'
- en: Now, we have some idea of the next robot’s form and ways we could build on the
    simple wheeled chassis. What process would you use to design the robot?
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们对下一个机器人的形状和如何在此基础上构建简单的轮式底盘有了些想法。您将使用什么过程来设计机器人？
- en: Design stages
  id: totrans-161
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设计阶段
- en: You would design a robot such as this by starting with sketches and simple cardboard
    parts as we did in [*Chapter 1*](B18001_01.xhtml#_idTextAnchor015), *Planning
    a Robot with Raspberry Pi Pico*, and then take the design to CAD as you become
    clearer on what it is you want.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过从草图和简单的纸板部件开始，就像我们在[*第1章*](B18001_01.xhtml#_idTextAnchor015)中做的那样，*使用Raspberry
    Pi Pico规划机器人*，然后随着您对想要的设计越来越清晰，将设计带到CAD中。
- en: We will look at some of the electronics further, but you’ll want to incorporate
    those into the CAD designs so you are clear on the dimensions and where to attach
    things before fabricating any parts for a robot.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将进一步探讨一些电子设备，但您希望在将它们纳入CAD设计之前，对尺寸和部件的安装位置有清晰的认识，以便在为机器人制造任何部件之前。
- en: Let’s look at the electronics.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看电子设备。
- en: Electronics and sensors
  id: totrans-165
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 电子和传感器
- en: You will need to adapt the electronics for each form and use case. For example,
    larger robots with larger motors will naturally need larger motor controllers
    and power systems capable of handling more significant power requirements. Larger
    motor drivers include the LM2575, capable of handling 15 A motors at 36 V.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要为每种形式和用例调整电子设备。例如，配备更大电机的机器人将自然需要更大的电机控制器和能够处理更多功率需求的电源系统。较大的电机驱动器包括LM2575，能够处理15
    A的电机在36 V的电压下工作。
- en: Robots with servo motors will need controllers such as the Adafruit 16 servo
    controller to handle the power and control of many servo motors. Robots with stepper
    motors may need similar breakouts for stepper motors, although depending on the
    precision needed, a DC motor controller with four channels can also drive stepper
    motors.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 配备伺服电机的机器人需要像Adafruit 16伺服控制器这样的控制器来处理多个伺服电机的电源和控制。配备步进电机的机器人可能需要类似的步进电机分线器，尽管根据所需的精度，四通道直流电机控制器也可以驱动步进电机。
- en: Submarine robots need to be waterproof, and quadcopters need high efficiency.
    For these, brushless motors are most suitable, and they will need to be driven
    by **Electronic Speed Controllers** (**ESCs**). Some wheeled robots also use brushless
    motors for their great efficiency.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 潜水机器人需要防水，而多旋翼无人机需要高效率。对于这些，无刷电机是最合适的，它们需要由**电子速度控制器**（**ESCs**）驱动。一些轮式机器人也使用无刷电机，因为它们的效率很高。
- en: An integrated motor controller such as the Pimoroni Inventor 2040 W (seen in
    the *Electronics enhancements* section) or the Pimoroni Servo 2040 might make
    sense for smaller robots. For example, the Servo 2040 can control 18 motors, making
    it ideal for a 6-legged hexapod robot.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 对于较小的机器人，一个集成的电机控制器，如Pimoroni Inventor 2040 W（在*电子增强*部分中看到）或Pimoroni Servo 2040可能是有意义的。例如，Servo
    2040可以控制18个电机，使其非常适合6足步态机器人。
- en: Where more battery power is required, you may need an upgrade from AA batteries
    to Li-ion or LiPo technology. In addition, you will need to carefully consider
    battery management systems that prevent catastrophic events and ensure you have
    chargers for them. The Lipo SHIM from Pimoroni will help charge these and power
    Raspberry Pi Pico.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 当需要更多电池功率时，您可能需要从AA电池升级到锂离子或锂聚合物技术。此外，您还需要仔细考虑电池管理系统，以防止灾难性事件发生，并确保您有充电器。Pimoroni的Lipo
    SHIM将帮助为这些电池充电并为Raspberry Pi Pico供电。
- en: In terms of sensors, you can consider the full range described previously. When
    planning them, consider which Raspberry Pi Pico pins will be in use. [https://pico.pinout.xyz/](https://pico.pinout.xyz/)
    is an excellent resource for this purpose.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在传感器方面，您可以考虑之前描述的全套传感器。在规划时，请考虑哪些Raspberry Pi Pico引脚将被使用。[https://pico.pinout.xyz/](https://pico.pinout.xyz/)是此目的的一个极好的资源。
- en: As you use more pins and sensors, you may have to use more I2C sensors, which
    may require I2C multiplexers, such as TCA9548A modules. If the sensors are not
    I2C and simply need GPIO pins, then a PCF8574 adds other GPIO pins over I2C. If
    you need to add more complex sensors, a second Raspberry Pi Pico or RP2040-based
    board might be necessary.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 随着您使用更多的引脚和传感器，您可能需要使用更多的I2C传感器，这可能需要I2C多路复用器，如TCA9548A模块。如果传感器不是I2C，只需要GPIO引脚，那么PCF8574通过I2C添加其他GPIO引脚。如果您需要添加更复杂的传感器，可能需要第二个Raspberry
    Pi Pico或基于RP2040的板。
- en: You can also consider adding I2S audio amplifiers for speakers for sounds more
    interesting than beeps and microphones for sound recognition on Pico.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以考虑为扬声器添加I2S音频放大器，以产生比蜂鸣声更有趣的声音，并在Pico上添加麦克风以进行声音识别。
- en: It is also worth considering whether the robot application requires a powerful
    CPU such as a full Raspberry Pi, and reserving Raspberry Pi Pico as an IO coprocessor.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 还值得考虑机器人应用是否需要强大的CPU，如完整的Raspberry Pi，并将Raspberry Pi Pico保留为IO协处理器。
- en: For a robot such as a snake robot, you may consider how you’d need to wire the
    modules throughout the segments. If you build a submarine robot, how will you
    protect electronics against water getting in?
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 对于像蛇形机器人这样的机器人，你可能需要考虑如何在各个段之间布线模块。如果你建造一个潜艇机器人，你将如何保护电子设备免受水进入？
- en: Next, we will look at the kind of code you might try with these designs.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将看看你可以尝试使用这些设计的代码类型。
- en: Code and behavior
  id: totrans-177
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 代码和行为
- en: 'Choosing the code has a few factors:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 选择代码有几个因素：
- en: What control code do you need for the sensors, outputs, and mechanisms?
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你需要什么样的控制代码来处理传感器、输出和机制？
- en: How smart does the robot need to be to solve specific problems?
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 机器人需要有多智能才能解决特定问题？
- en: What safety factors might be needed, and how will this interact with the form
    and shape? For example, what control system might you need to stop a robot quickly?
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可能需要哪些安全因素，以及这将如何与形状和形式相互作用？例如，你可能需要什么样的控制系统来快速停止机器人？
- en: The control mechanism for a legged robot may need code to group servo motors
    into legs with multiple joints and then smoothly move between positions defined
    by gaits – walking strategies. These are generally sequenced patterns; they may
    adjust or carry on following a sequence depending on feedback from the legs or
    foot sensors. Usually, the gait code controls the movement, with another program
    steering this gait code in a **horse-and-rider** configuration.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 腿式机器人的控制机制可能需要代码将伺服电机分组为具有多个关节的腿，然后平滑地在由步态定义的位置之间移动——行走策略。这些通常是顺序模式；它们可能会根据腿或脚传感器的反馈进行调整或继续遵循顺序。通常，步态代码控制运动，另一个程序以**马和骑手**配置引导这个步态代码。
- en: With a robot arm or snake robot, researching **inverse kinematic** algorithms
    would help to position parts of the robot relative to other parts, choosing the
    angles at which the servos along the arm or the snake need to be to reach this
    point.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 对于机器人臂或蛇形机器人，研究**逆运动学**算法将有助于确定机器人各部分相对于其他部分的位置，选择伺服电机在臂或蛇上需要达到该点的角度。
- en: Robots that use a more powerful CPU running Linux may justify going beyond simple
    Python scripts into **Robot Operating** **System** (**ROS**).
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 使用更强大的CPU运行Linux的机器人可能需要超越简单的Python脚本，进入**机器人操作系统**（**ROS**）。
- en: If speed is an issue, you can consider a fast controller such as a Teensy, a
    powerful controller such as Raspberry Pi, or explore other programming languages
    such as C and Rust. You can use C to extend CircuitPython and Python to glue together
    different robot functions.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 如果速度是一个问题，你可以考虑一个快速的控制器，如Teensy，一个强大的控制器，如Raspberry Pi，或者探索其他编程语言，如C和Rust。你可以使用C来扩展CircuitPython，并使用Python将不同的机器人功能粘合在一起。
- en: If you start to need multiple RP2040 controllers, how will they communicate
    and interact with each other? Via an I2C bus or UART? You may need to research
    and consider a protocol for them to send requests to each other.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你开始需要多个RP2040控制器，它们将如何相互通信和交互？通过I2C总线或UART？你可能需要研究和考虑一个协议，以便它们可以相互发送请求。
- en: You’ve now considered the robot’s form and chassis, the electronics it might
    need, and the code you will want. Learning about more ways to build robots or
    situations in which to test and demonstrate code can help you build these new
    robot designs.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在已经考虑了机器人的外形和底盘，它可能需要的电子设备，以及你想要的代码。了解更多构建机器人的方法或测试和展示代码的情况可以帮助你构建这些新的机器人设计。
- en: Further suggested areas to learn about
  id: totrans-188
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步建议学习的领域
- en: You have some ideas for a future robot (or even a few future robots) that you
    want to build. Learning about some other skills will allow you to take those designs
    further and get more creative. Let’s dive in.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 你对未来的机器人（甚至是一些未来的机器人）有一些想法，你想要构建。了解一些其他技能将允许你进一步设计这些设计并更具创造性。让我们深入探讨。
- en: Electronics
  id: totrans-190
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 电子学
- en: 'Refer to the *Electronics enhancements* section earlier in this chapter for
    inspiration here. To recap, see the following:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 参考本章前面提到的**电子学增强**部分以获取灵感。为了回顾，请参阅以下内容：
- en: Learn about designing circuits with stripboard or veroboard and further soldering
    skills.
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解如何使用条形板或Veroboard设计电路以及进一步的焊接技能。
- en: Learn more about designing PCBs with tools such as KiCad. You place parts such
    as Raspberry Pi Pico (or, if you are braver, an RP2040) into the schematic editor
    to work out their connections.
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习使用KiCad等工具设计PCB板。你将Raspberry Pi Pico（或者，如果你更勇敢，是RP2040）等部件放入原理图编辑器中，以确定它们的连接。
- en: Consider how to keep the cabling tidy, perhaps designing cable routing into
    drawings and CAD designs for a very tidy robot.
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 考虑如何保持电缆整洁，也许在设计图纸和CAD设计中设计电缆路由，以制作一个非常整洁的机器人。
- en: Use connectors that reduce vibration and connect only one way to reduce mistakes.
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用减少振动并只能单向连接的连接器，以减少错误。
- en: 'There are further ways to extend your robots toolbox:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 有更多方法可以扩展你的机器人工具箱：
- en: Oscilloscopes to view circuit waveforms, great for looking at PWM (see the section
    *An introduction to pulse width modulation speed control* in [*Chapter 5*](B18001_05.xhtml#_idTextAnchor098))
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 示波器用于查看电路波形，非常适合查看PWM（参见[*第5章*](B18001_05.xhtml#_idTextAnchor098)中的*脉冲宽度调制速度控制简介*部分）
- en: Logic analyzers to debug data buses and logic systems
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 逻辑分析仪用于调试数据总线和逻辑系统
- en: Bench power supplies to test electronics without worrying about batteries
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 台式电源用于测试电子设备，无需担心电池
- en: More advanced soldering stations
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更先进的焊接站
- en: Clamps to hold boards and components in place and test those connections
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 夹具用于固定电路板和组件，并测试这些连接
- en: A stock of electronic components, such as diodes, resistors, capacitors, and
    wires
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 库存中的电子元件，如二极管、电阻器、电容器和电线
- en: Some standard chips, such as op-amps and regulators, along with motor spares
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一些标准芯片，如运算放大器和稳压器，以及电机备件
- en: Another advanced electronic capability is to look at **Field-Programmable Gate
    Arrays** (**FPGAs**). These devices allow you to program digital circuitry into
    them, allowing fast I/O helpers beyond PIO and even small CPU cores. They are
    not cheap or easy to use, but they offer huge flexibility in interfacing and prototyping
    new chips.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 另一项高级电子能力是查看**现场可编程门阵列**（**FPGA**）。这些设备允许你将数字电路编程到它们中，允许快速I/O辅助器超越PIO，甚至小型CPU核心。它们不便宜也不容易使用，但它们在接口和原型设计新芯片方面提供了巨大的灵活性。
- en: We can look at advanced manufacturing techniques now that you’ve seen some advanced
    electronics techniques.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经看到了一些高级电子技术，我们可以看看更先进的制造技术。
- en: Design and manufacturing
  id: totrans-206
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设计和制造
- en: We’ve used hand tools to build this robot. However, some techniques allow you
    to create far more intricate robot shapes. We touched on them in the *Chassis
    and form enhancements* section in this chapter.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用手工具来构建这个机器人。然而，一些技术允许你创建更复杂的机器人形状。我们在本章的*底盘和形状改进*部分提到了它们。
- en: The gateway to many of these is practicing using 3D CAD and learning about Blender
    to create more organic forms. It is worth experimenting with 3D CAD alternatives
    to FreeCAD, such as Solvespace or Fusion 360, and seeing which work for you. Finally,
    it is worth learning about the Inkscape program for 2D drawing or making decals
    to place on the 3D forms. During design, you should also be clear on how to assemble
    the parts when they arrive.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 许多这些工具的入门途径是练习使用3D CAD，并学习Blender来创建更有机的形式。尝试FreeCAD之外的3D CAD替代品，如Solvespace或Fusion
    360，看看哪个更适合你，是值得的。最后，学习Inkscape程序进行2D绘图或制作用于3D形状的贴纸也是值得的。在设计过程中，你还应该清楚如何组装到达的零件。
- en: 'All fabrication methods require considering the limitations of the systems
    at design: for example, minimum cut widths, part thickness to avoid breaking,
    and how a cutting tool might access the different surfaces in a part.'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 所有制造方法在设计时都需要考虑系统的限制：例如，最小切割宽度、零件厚度以避免断裂，以及切割工具如何访问零件的不同表面。
- en: 'Let’s see a list of how you can manufacture parts:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看你可以如何制造零件的列表：
- en: '**Laser cutting** is a natural extension of how we’ve been cutting parts. The
    CAD output is precision shapes to be cut into a 2D sheet of material. Designs
    are assembled like flat-pack furniture or using stand-offs. You can make impressive
    designs with this fabrication system. The MeArm ([https://mearm.com/](https://mearm.com/))
    robot arm or OhBot robot head ([https://www.ohbot.co.uk/](https://www.ohbot.co.uk/))
    are made with laser cutting.'
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**激光切割**是我们切割零件的自然延伸。CAD输出是用于切割成2D材料板的精确形状。设计组装方式类似于平板家具或使用支架。你可以用这种制造系统制作出令人印象深刻的设计。MeArm
    ([https://mearm.com/](https://mearm.com/)) 机器人臂或OhBot机器人头 ([https://www.ohbot.co.uk/](https://www.ohbot.co.uk/))
    就是使用激光切割制作的。'
- en: '**CNC milling** lets you make cuts into material with a robotically controlled
    cutting part, and can cut wood, plastic, and metal. It can cut out parts with
    different depths forming complicated shapes, but mostly operate from above and
    cannot make cuts from the side or below.'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CNC铣削**允许你使用机器人控制的切割部件在材料上切割，可以切割木材、塑料和金属。它可以切割出不同深度的部件，形成复杂的形状，但主要从上方操作，不能从侧面或下方进行切割。'
- en: '**3D printing** presents the possibility of fully 3D intricate parts, especially
    when they may be one-off parts for a single robot design. You can iterate with
    these, printing refinements to parts as you improve a design. Desktop 3D printers
    are inexpensive and can make sense in a home lab.'
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**3D打印**提供了完全3D复杂部件的可能性，尤其是当它们可能是单个机器人设计的单件部件时。你可以使用这些部件进行迭代，随着设计的改进打印部件的改进。桌面3D打印机价格低廉，在家庭实验室中很有意义。'
- en: '**Vacuum forming** is where a plastic sheet is pulled against a mold (or a
    buck) to create a shell. This technique allows for thin yet single-part plastic
    areas and may be perfect for robot shells (fairings). You can use the other techniques
    mentioned to make the buck.'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**真空成型**是将塑料板拉向模具（或凹模）以形成外壳的过程。这种技术允许制作薄而单件的塑料区域，可能非常适合机器人外壳（外壳）。你可以使用提到的其他技术来制作凹模。'
- en: '**Metal techniques** such as welding, cutting, and using sheet metal may be
    useful for large robots or those that might be handled roughly. However, most
    small hobby robots will not need this. Some metal construction can be made simply
    by using aluminum extrusion, a hacksaw, and t-slot bolt heads.'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**金属技术**，如焊接、切割和使用金属板，可能对大型机器人或可能被粗鲁对待的机器人有用。然而，大多数小型业余机器人不需要这些。一些金属结构可以通过使用铝型材、锯子和T型槽螺栓头简单地制作。'
- en: Where can you get these manufactured? Many of these machines are large and expensive.
    If you do not have the space at home, you can consider sending designs to a company
    and have them cut them for you, such as [https://razorlab.online/](https://razorlab.online/).
    If you are part of a school, college, or university, it may have these devices
    in its labs. Otherwise, see the *Places to build robots* section later in this
    chapter for information about maker spaces.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 你在哪里可以找到这些机器进行制造？许多这些机器都很大且价格昂贵。如果你家里没有足够的空间，你可以考虑将设计发送给公司，让他们为你切割，例如 [https://razorlab.online/](https://razorlab.online/)。如果你是学校、学院或大学的一员，它可能在实验室里有这些设备。否则，请参阅本章后面的“建造机器人的地方”部分，以获取有关创客空间的信息。
- en: The preceding techniques will let you make interesting and varied robot designs,
    improving on parts and exploring different shapes. Access to these techniques
    and people to help you learn about them becomes easier if you get involved in
    robotics communities.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 前述技术将让你制作有趣且多样化的机器人设计，改进部件并探索不同的形状。如果你参与机器人社区，这些技术和帮助你学习它们的人会更容易获得。
- en: Robotic competitions and communities
  id: totrans-218
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 机器人竞赛和社区
- en: There are many robotics communities. This section does not aim to be exhaustive
    but to get you started with getting involved with them.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多机器人社区。本节的目的不是详尽无遗，而是帮助你开始参与其中。
- en: Social media
  id: totrans-220
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 社交媒体
- en: This book has a Discord community at [https://discord.gg/2VHYY3FkXV](https://discord.gg/2VHYY3FkXV).
    You can use this to ask me questions and discuss your robotics with other robot
    builders.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书有一个位于 [https://discord.gg/2VHYY3FkXV](https://discord.gg/2VHYY3FkXV) 的 Discord
    社区。你可以用这个社区来向我提问，并与其他机器人构建者讨论你的机器人。
- en: Adafruit has a Discord community for discussing robotics, electronics, and CircuitPython
    – find out more at [https://blog.adafruit.com/2019/02/05/adafruit-community-server-on-discord-now-included-in-the-open-source-listings-discordapp-discord-opensource-circuitpython/](https://blog.adafruit.com/2019/02/05/adafruit-community-server-on-discord-now-included-in-the-open-source-listings-discordapp-discord-opensource-circuitpython/).
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: Adafruit 有一个用于讨论机器人、电子和 CircuitPython 的 Discord 社区 - 更多信息请访问 [https://blog.adafruit.com/2019/02/05/adafruit-community-server-on-discord-now-included-in-the-open-source-listings-discordapp-discord-opensource-circuitpython/](https://blog.adafruit.com/2019/02/05/adafruit-community-server-on-discord-now-included-in-the-open-source-listings-discordapp-discord-opensource-circuitpython/)。
- en: There is a lively robotics community on Twitter. I am on there as `@orionrobots`,
    and I regularly share and boost robotics tweets; I will answer robotics questions
    and introduce robot builders into the community.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: Twitter 上有一个活跃的机器人社区。我在那里是 `@orionrobots`，我经常分享和推广机器人推文；我会回答机器人问题，并将机器人构建者介绍到社区中。
- en: Many of the following communities have Twitter handles or tags, which are worth
    checking out. Twitter also has a `#MakersHour` tag for people talking about making
    anything, including robots.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 以下许多社区都有Twitter账号或标签，值得一看。Twitter还有一个`#MakersHour`标签，用于人们谈论制作任何东西，包括机器人。
- en: I am also available on YouTube at [http://youtube.com/orionrobots](http://youtube.com/orionrobots),
    where you can see the robots I’ve been building, on Mastodon at [https://fosstodon.org/@orionrobots](mailto:https://fosstodon.org/@orionrobots),
    and on Facebook at [https://www.facebook.com/orionrobots](https://www.facebook.com/orionrobots).
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 我也在YouTube上[http://youtube.com/orionrobots](http://youtube.com/orionrobots)有账号，你可以看到我一直在建造的机器人，在Mastodon上[https://fosstodon.org/@orionrobots](mailto:https://fosstodon.org/@orionrobots)，以及在Facebook上[https://www.facebook.com/orionrobots](https://www.facebook.com/orionrobots)。
- en: The robot builder James Bruton showcases inspiring robot builds as `@XRobotsUk`
    at [https://twitter.com/XRobotsUK](https://twitter.com/XRobotsUK) and on YouTube
    at [https://bit.ly/3RYScxp](https://bit.ly/3RYScxp).
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 机器人建造者詹姆斯·布鲁顿在[https://twitter.com/XRobotsUK](https://twitter.com/XRobotsUK)和YouTube上[https://bit.ly/3RYScxp](https://bit.ly/3RYScxp)以`@XRobotsUk`展示令人鼓舞的机器人建造。
- en: Another great robot builder with a community is Kevin McAleer at [https://www.youtube.com/c/kevinmcaleer28](https://www.youtube.com/c/kevinmcaleer28).
    In addition, he has a lively Facebook robot community at [https://www.facebook.com/groups/smallrobots](https://www.facebook.com/groups/smallrobots)
    for discussing exactly the kinds of robots we have built in this book and extending
    far past this.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 另一位拥有社区的杰出机器人建造者是凯文·麦克利尔，他在[https://www.youtube.com/c/kevinmcaleer28](https://www.youtube.com/c/kevinmcaleer28)。此外，他在[https://www.facebook.com/groups/smallrobots](https://www.facebook.com/groups/smallrobots)拥有一个活跃的Facebook机器人社区，用于讨论我们在这本书中建造的机器人类型，并远远超出这些范围。
- en: Events
  id: totrans-228
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 活动
- en: The PiWars event is a competition held in the UK for robot builders using Raspberry
    Pi to compete in autonomous and manually driven challenges, showing off and improving
    robot building, robot driving, and coding skills. The community is global, welcoming,
    and happy to share techniques. You can find its website at [https://piwars.org/](https://piwars.org/).
    PiWars also has a [https://twitter.com/piwarsrobotics](https://twitter.com/piwarsrobotics)
    account and a PiWars Discord server at [https://discord.gg/sjABKje](https://discord.gg/sjABKje).
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: PiWars活动是在英国举办的机器人建造者竞赛，他们使用Raspberry Pi在自主和手动驾驶挑战中竞争，展示并提高机器人建造、驾驶和编码技能。这个社区是全球性的、欢迎的，并且乐于分享技术。你可以在其网站[https://piwars.org/](https://piwars.org/)上找到它。PiWars还有一个[https://twitter.com/piwarsrobotics](https://twitter.com/piwarsrobotics)账号和一个PiWars
    Discord服务器[https://discord.gg/sjABKje](https://discord.gg/sjABKje)。
- en: The **UK Micromouse and Robotics Society** (**UKMARS**) community runs robotics
    competitions, with Micromouse being the oldest. Micromouse is a maze-running robot
    challenge running in the UK, with a lively community of robot builders. Visit
    [https://ukmars.org/](https://ukmars.org/) for more information.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: '**英国微型鼠和机器人协会**（**UKMARS**）社区举办机器人竞赛，其中微型鼠竞赛是最古老的。微型鼠是一种在英国运行的迷宫跑机器人挑战赛，拥有一个活跃的机器人建造者社区。访问[https://ukmars.org/](https://ukmars.org/)获取更多信息。'
- en: The **First Robotics Competition** (**FRC**) at [https://bit.ly/3BnWOWG](https://bit.ly/3BnWOWG)
    inspires people to build robotics and compete at robotics globally. The events
    occur in some local areas, with championships eventually taking place in Houston,
    Texas. The regional events mean that in-person competitions and collaboration
    can take place with teams long before traveling to Texas.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: '**第一机器人竞赛**（**FRC**）在[https://bit.ly/3BnWOWG](https://bit.ly/3BnWOWG)举行，它激励人们建造机器人并在全球范围内进行机器人竞赛。这些活动在某些地区举行，最终在德克萨斯州的休斯顿举行锦标赛。区域活动意味着在前往德克萨斯州之前，团队可以进行面对面的比赛和合作。'
- en: Maker faires are events held all over the world, and there may be some taking
    place in your country. Makers come to exhibit, talk about, and celebrate their
    creations. These are based around maker communities and provide great inspiration
    and contact between makers of all kinds, including robot builders. See [https://makerfaire.com/](https://makerfaire.com/)
    for details, including a search for maker faires near you.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: Maker faires是在全球范围内举办的活动，你所在的国家可能也有一些。制作者们来到这里展示、讨论和庆祝他们的创作。这些活动围绕制作者社区展开，为各种类型的制作者，包括机器人建造者，提供了极大的灵感和联系。有关详细信息，包括查找你附近的maker
    faires，请参阅[https://makerfaire.com/](https://makerfaire.com/)。
- en: Where can you build these robots if you need more help, tools, or space than
    you can get home?
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要比在家更多的帮助、工具或空间来建造这些机器人，你可以在哪里建造？
- en: Places to build robots
  id: totrans-234
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 建造机器人的地方
- en: Tools and experience are important for building robots. While talking online
    can help, little is as useful as working with people experienced in the use of
    certain tools. Where can you find a space like the one in the following figure?
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 工具和经验对于构建机器人非常重要。虽然在线交流有所帮助，但与使用特定工具经验丰富的人一起工作几乎是无价的。你可以在以下图中找到类似的空间吗？
- en: '![Figure 14.11 – A maker space ](img/Figure_14.11_B18001.jpg)'
  id: totrans-236
  prefs: []
  type: TYPE_IMG
  zh: '![图 14.11 – 一个创客空间](img/Figure_14.11_B18001.jpg)'
- en: Figure 14.11 – A maker space
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.11 – 一个创客空间
- en: Maker spaces, hackspaces, or **Fabrication Laboratories** (**Fab Labs**) such
    as the one illustrated in *Figure 14**.11* are places where you can come and gain
    access to advanced tools such as 3D printers, laser cutters, and CNC machines,
    along with arrays of hand tools, electronics equipment, and large workbenches
    for them. They are usually accessible via membership and a small donation.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 创客空间、黑客空间或**制造实验室**（**Fab Labs**），如图 14.11 所示，是你可以前来获取高级工具的地方，例如 3D 打印机、激光切割机和数控机床，以及一系列的手工工具、电子设备和为他们提供的大型工作台。它们通常通过会员资格和少量捐赠即可访问。
- en: These spaces are usually well lit. Knowledgeable people maintain the tools and
    can also help you with your builds, with advice and training for the tools. An
    expert may also suggest a different manufacturing technique that may get you the
    results you want in a better way (quicker, cheaper, or stronger).
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 这些空间通常光线充足。有知识的人会维护这些工具，并且也可以在构建过程中为你提供建议和培训。专家还可能建议一种不同的制造技术，这可能以更好的方式（更快、更便宜或更强）帮助你获得想要的结果。
- en: These spaces also tend to have safety systems, such as fume or dust removal,
    which is essential when soldering electronics or cutting materials such as wood.
    You will also find that these spaces usually have components or materials to hand
    that are needed to try a new technique. Using a small amount of material or borrowing
    a tool is essential if you want to try a technique before buying a lot of equipment.
    Searching for a Fab Lab, maker space, or hackerspace near you is strongly recommended.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 这些空间也往往有安全系统，如烟雾或灰尘去除，这在焊接电子产品或切割木材等材料时是必不可少的。你还会发现，这些空间通常有尝试新技术的所需组件或材料。如果你想在购买大量设备之前尝试一种技术，使用少量材料或借用工具是至关重要的。强烈建议你寻找附近的
    Fab Lab、创客空间或黑客空间。
- en: Some coder dojos offer robotics programming as part of their courses. Coder
    dojos will focus more on the code and algorithms and less on building the robots.
    Schools that run code clubs or STEM clubs may also be amenable to robot programming
    and building.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 一些程序员道场将机器人编程作为他们课程的一部分。程序员道场将更多地关注代码和算法，而不是构建机器人。运行代码俱乐部或 STEM 俱乐部的学校也可能愿意接受机器人编程和构建。
- en: Now that we’ve seen some communities, what further areas are there to explore
    in the code area?
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经看到了一些社区，那么在代码领域还有哪些进一步探索的领域？
- en: Robotics systems and code
  id: totrans-243
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 机器人系统和代码
- en: The software that runs on robots has a huge potential for exploration. With
    the ability to add additional controllers and memory or expand to larger and more
    powerful controllers, there are few limitations in this area.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 在机器人上运行的软件具有巨大的探索潜力。有了添加额外控制器和内存或扩展到更大、更强大的控制器的功能，这个领域几乎没有什么限制。
- en: We’ve seen in [*Chapter 13*](B18001_13.xhtml#_idTextAnchor274), *Determining
    Position Using Monte Carlo Localization*, how a robot can use simulation to help
    the robot understand its world, so you may even consider expanding upon that in
    a virtual environment too. While that is appropriate for algorithms on the robot,
    extending this to full visualization and 3D would be reinventing the wheel. Simulation
    using systems such as the Godot game engine or the ROS Gazebo system will let
    you start to test robot algorithms away from the actual robot, letting you improve
    planning and SLAM techniques using sensor data. You can build 3D, physics-enabled
    worlds for a robot and test code there. There are considerations about being able
    to transfer code between the languages used in the simulations and CircuitPython
    that you’ll need to resolve. However, you may consider languages other than CircuitPython
    as you move to larger projects. You may be able to tune some things, but be aware
    that PID algorithm values will likely change when you attempt to try the same
    robot code in the real world.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第13章*](B18001_13.xhtml#_idTextAnchor274)，*使用蒙特卡洛定位确定位置*中，我们看到了机器人如何使用模拟来帮助机器人理解其世界，因此你甚至可以考虑在虚拟环境中扩展这一点。虽然这对于机器人的算法来说是合适的，但将其扩展到完整的可视化和3D将是在重新发明轮子。使用Godot游戏引擎或ROS
    Gazebo系统等系统进行模拟将让你开始测试机器人算法，而不必在实际机器人上进行，让你能够使用传感器数据改进规划和SLAM技术。你可以为机器人构建3D、具有物理功能的虚拟世界，并在那里测试代码。你需要解决在模拟中使用的语言和CircuitPython之间能够转移代码的问题。然而，当你转向更大的项目时，你可能需要考虑CircuitPython之外的语言。你可能能够调整一些东西，但请注意，当你尝试在现实世界中尝试相同的机器人代码时，PID算法的值可能会发生变化。
- en: Building on the idea of location mapping concepts are goal-based algorithms
    and task planning (mentioned in the *Extending the code and behaviors* section).
    These consist of planning how a robot can reach one location from another and
    what a robot may need to do if it has to move items to complete that operation.
    For example, the PiWars eco-disaster ([https://bit.ly/3xBPIwz](https://bit.ly/3xBPIwz))
    challenge required planning how to move barrels to a specific location without
    knocking over others. With random barrel locations, this is a good challenge to
    use to learn about these advanced robot algorithms.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 在位置映射概念的基础上，有基于目标的算法和任务规划（在*扩展代码和行为*部分提到）。这包括规划机器人如何从一个位置到达另一个位置，以及如果机器人需要移动物品以完成该操作，它可能需要做什么。例如，PiWars生态灾难([https://bit.ly/3xBPIwz](https://bit.ly/3xBPIwz))挑战要求规划如何将桶移动到特定位置而不碰倒其他桶。在随机放置的桶的情况下，这是一个很好的挑战，可以用来学习这些高级机器人算法。
- en: We’ve briefly mentioned machine learning before. There are a few different techniques,
    with variations on neural networks being the most popular type at the time of
    writing. Deep learning offers image and sound recognition results with TensorFlow
    on big controllers and TinyML on small ones such as Raspberry Pi Pico. These extend
    to image analysis, as well as image classification. Combining this with advanced
    computer vision techniques and navigating with a camera or two as the sensors
    become possible. However, LIDAR sensors are still a reliable source of distance
    information.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前简要提到了机器学习。有一些不同的技术，其中神经网络的变体在写作时是最受欢迎的类型。深度学习在大型控制器上使用TensorFlow，在小型控制器（如Raspberry
    Pi Pico）上使用TinyML，提供了图像和声音识别的结果。这扩展到图像分析和图像分类。结合先进的计算机视觉技术和使用摄像头作为传感器的导航成为可能。然而，LIDAR传感器仍然是可靠的距离信息来源。
- en: Another interesting technique is clustered robots, a group of robots working
    as a single system. These would need to communicate with each other using RF,
    such as Wi-Fi, Bluetooth, or IR. You will need code that can plan how multiple
    robots will solve a problem. I recommend researching bird flocking and other artificial
    life subjects to build up to solving this, along with the planning techniques
    mentioned previously.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种有趣的技巧是集群机器人，一群机器人作为一个单一系统工作。这些机器人需要通过射频（如Wi-Fi、蓝牙或红外）相互通信。你需要编写能够规划多个机器人如何解决问题的代码。我建议研究鸟群和其他人工生命主题，以逐步解决此问题，并配合之前提到的规划技巧。
- en: You’ve now seen algorithms to extend your learning about robotics further. Let’s
    recap what we have seen.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在已经看到了扩展你对机器人学了解的算法。让我们回顾一下我们看到了什么。
- en: Summary
  id: totrans-250
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have gone back over what we have learned in *Raspberry Pi
    Pico Robotics for Workbench Wizards* and the robot we’ve built using these skills.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们回顾了在《*Raspberry Pi Pico Robotics for Workbench Wizards*》中学到的内容，以及我们使用这些技能构建的机器人。
- en: We then investigated how we could extend this robot, building additional features
    such as sensors, outputs, and a more interesting or robust chassis, and extending
    the code to do amazing things.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 我们随后调查了如何扩展这个机器人，构建额外的功能，例如传感器、输出，以及更有趣或更坚固的车身，并将代码扩展以实现惊人的功能。
- en: We branched out further, providing ideas and inspiration or areas of research
    for your next robot, things you could design and build with a clean slate.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 我们进一步拓展，提供给你下一个机器人的想法和灵感或研究领域，你可以从一张白纸开始设计和构建。
- en: Finally, we dove into advanced techniques in electronics, ways to manufacture
    far more intricate parts, the robot communities and spaces you could be part of,
    and where robotics programming can go. This last section should provide plenty
    of inspiration for continuing to build robots!
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们深入研究了电子领域的先进技术，如何制造更复杂的零件，你可以参与的机器人社区和空间，以及机器人编程可以走向何方。这一部分应该为继续构建机器人提供大量的灵感！
- en: Exercises
  id: totrans-255
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习
- en: 'The following exercises will deepen your understanding of these topics and
    make the robot’s code better:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 以下练习将加深你对这些主题的理解，并使机器人的代码更加完善：
- en: Consider an interesting improvement to the current robot, plan it, and get started.
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 考虑对当前机器人进行有趣的改进，制定计划，然后开始行动。
- en: Join a robotics community and get involved with robots on Discord, Facebook,
    Twitter, or Mastodon.
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加入机器人社区，并在 Discord、Facebook、Twitter 或 Mastodon 上参与机器人。
- en: Plan and build your next robot or robotics-related gadget. Then, share it with
    the communities!
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 计划并构建你的下一个机器人或机器人相关的小工具。然后，与社区分享它！
- en: Your robotics journey is just starting now. I look forward to seeing you in
    the robotics community, along with the machines you create!
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 你的机器人之旅现在才刚刚开始。我期待在机器人社区见到你，以及你创造的机器！
- en: Further reading
  id: totrans-261
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'You can continue your robot-building journey with the following books and reading
    areas:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过以下书籍和阅读区域继续你的机器人构建之旅：
- en: In *Learn Robotics Programming* by *Danny Staple*, *Packt Publishing*, I have
    written about building robots with Raspberry Pi, with another wheeled robot build,
    visual processing, and speech control covered, along with a different power system.
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在《*学习机器人编程*》一书中，作者是*丹尼·斯泰普尔*，由*Packt Publishing*出版，我讲述了使用树莓派构建机器人，包括另一个轮式机器人构建、视觉处理和语音控制，以及不同的电源系统。
- en: '*Python Robotics Projects* by *Prof. Diwakar Vaish*, *Packt Publishing*, shows
    you how to build several small robots, explores the code in them, and has machine
    learning projects to try with them.'
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 《*Python 机器人项目*》由*迪瓦卡·瓦伊什教授*编写，由*Packt Publishing*出版，展示了如何构建几个小型机器人，探索其中的代码，并提供了可以与之尝试的机器学习项目。
