- en: Deploying, Managing, and Monitoring Database Solutions containing R Code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Operationalizing R code in a SQL Server database means that data scientists/database
    developers can also leverage productionizing data science solutions as part of
    **Database Lifecycle Management** (**DLM**). This includes the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Checking in R code as part of a SQL Server database project into a version control
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding the stored procedures for the data science solution as part of SQL Server
    unit tests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating the data science solution into the **Continuous Integration/Continuous
    Delivery** (**CI/CD**) process
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Monitoring performance of the data science solution in the production on a regular
    basis
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this chapter, we will be using **SQL Server Data Tools** (**SSDT**) in Visual
    Studio 2017 and Visual Studio Team Services to perform this DLM workflow. However,
    the underlying concept can be applied to any other CI/CD platform that you or
    your team might already be using.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating R into the SQL Server Database lifecycle workflow
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Earlier in [Chapter 7](part0102.html#318PC0-e3f81285367248f4bbc6431bcd4f926d),
    *Operationalizing R Prediction Models*, we discussed how to create an R project
    in Visual Studio 2017\. We also talked about integrating R code as part of `sp_execute_external_script`
    in SQL Server. Here, we will revisit Visual Studio 2017, specifically in the context
    of integrating R code in `sp_execute_external_script` as part of a SQL Server
    Database Project, and holistically as part of the database lifecycle workflow.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing your environment for the database lifecycle workflow
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will discuss the stages of the database lifecycle workflow
    and the tools that we will be using. For each of the stages in the workflow, there
    will also be some suggested alternatives for you to explore.
  prefs: []
  type: TYPE_NORMAL
- en: '**Coding and managing SQL Server database projects/solutions**: There are a
    few different ways to manage your SQL Server DML/DDL scripts that form a SQL Server
    database project. SQL SSDT in Visual Studio 2017 (VS2017) is a mature product
    that formalizes the creation and modification of Database Schema and Objects.
    In this section, we will use SSDT in VS2017.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You can use VS2017 Community, Professional, or Enterprise editions. Please
    check [https://www.visualstudio.com/vs/compare/](https://www.visualstudio.com/vs/compare/)
    for more up-to-date information on how these editions compare. In the walkthroughs
    and examples in this section, we will be using Visual Studio Enterprise Edition,
    but you can use any of the editions. You can download these from: [https://www.visualstudio.com/vs/](https://www.visualstudio.com/vs/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Other following alternatives worth trying are:'
  prefs: []
  type: TYPE_NORMAL
- en: '**SQL Server Management Studio**: There are a few plugins developed by RedGate
    that can enrich DevOps/Database Lifecycle Management'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SQL Operations Studio** (in Preview): This tool is built based on VS Code,
    which means that it has high potential of meeting DevOps workflows too, including
    source control'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Unit testing**: Just like application development, database development would
    benefit from a unit testing framework, especially if it can be automated. There
    are two well-known unit testing frameworks that are available for SQL Server databases,
    tSQLt, and SQL Server Unit Test integrated in Visual Studio. Here are the links:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**tSQLt**: [http://tsqlt.org/](http://tsqlt.org/)'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SQL Server Unit Test in Visual Studio**: [https://msdn.microsoft.com/en-us/library/jj851200(v=vs.103).aspx](https://msdn.microsoft.com/en-us/library/jj851200(v=vs.103).aspx)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: In this section, we will use SQL Server Unit Test in VS2017.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another tool worth trying is:'
  prefs: []
  type: TYPE_NORMAL
- en: RedGate SQL Test that is based on the tSQLt framework, an extension of SSMS
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Version Control**: There are a number of popular choices for Version Control
    systems out there, for example, Git and **Team Foundation Version Control** (**TFVC**).
    In this section, we will use TFVC hosted in **Visual Studio Team Services** (**VSTS**).
    VS2017 can connect to a VSTS repository. You can sign up for a VSTS account online
    at: [https://www.visualstudio.com/team-services/](https://www.visualstudio.com/team-services/).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Other alternatives worth trying are:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Using Visual Studio, you can connect to online version control hosts, such
    as GitHub and VSTS, as well as a private on-premises version control servers,
    such as **Team Foundation Server** (**TFS**):'
  prefs: []
  type: TYPE_NORMAL
- en: '**GitHub Extension for Visual Studio**: [https://visualstudio.github.com/](https://visualstudio.github.com/)'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Team Foundation Server**: [https://www.visualstudio.com/tfs/](https://www.visualstudio.com/tfs/)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CI/CD**: VSTS supports both hosted agent and private agent. Hosted agent
    is a cloud-based agent that performs continuous integration and continuous delivery.
    Private agent is an on-premises-based agent version, available in Visual Studio
    2017\. Having CI in place means that as the script is checked in, the agent will
    automatically build and optionally perform a number of tests. Having CD in place
    allows us to test the code release and/or the schema changes only against the
    baseline. In this chapter, we will use VSTS with a private agent to deploy against
    an on-premises SQL Server database.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Other alternatives worth trying are:'
  prefs: []
  type: TYPE_NORMAL
- en: VSTS supports the hosted agent, which allows you to deploy automatically to
    Azure VM
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: VSTS supports the hosted agent, which allows you to deploy to the Azure SQL
    Database, which since October 2017, also supports R
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Figure 8.1* shows a CI/CD workflow using VSTS, which we will use in this chapter
    for our sample SQL Server R Services solution:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00124.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.1 CI/CD process using VSTS
  prefs: []
  type: TYPE_NORMAL
- en: 'Source: [https://docs.microsoft.com/en-us/vsts/build-release/actions/ci-cd-part-1](https://docs.microsoft.com/en-us/vsts/build-release/actions/ci-cd-part-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Prerequisites for this chapter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '| **Tools** | **URL** | **Notes** |'
  prefs: []
  type: TYPE_TB
- en: '| **Visual Studio 2017** | To download: [https://www.visualstudio.com/downloads/](https://www.visualstudio.com/downloads/)
    | The Community Edition is free. |'
  prefs: []
  type: TYPE_TB
- en: '| **VSTS** | Sign up/sign in: [https://www.visualstudio.com/team-services/](https://www.visualstudio.com/team-services/)
    | Sign up for the personal account for free. |'
  prefs: []
  type: TYPE_TB
- en: '| **Power Shell v2.0 or above** | Download PowerShell: [https://www.microsoft.com/en-us/download/details.aspx?id=42554](https://www.microsoft.com/en-us/download/details.aspx?id=42554)
    | You will need this for setting up the Private Agent locally. |'
  prefs: []
  type: TYPE_TB
- en: Creating the SQL Server database project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will walk you through how to create a database project in
    VS2017.
  prefs: []
  type: TYPE_NORMAL
- en: In VS2017, click on File | New Project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose SQL Server from Installed on the left pane and click on the SQL Server
    Database Project template.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type `Ch08` in the Name: field and `SQL Server R Services Book` in the Solution
    name: file, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00125.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.2 New Project in Visual Studio
  prefs: []
  type: TYPE_NORMAL
- en: Choose the Location to save the solution.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you already have a local folder for your version control, you can specify
    the path here.
  prefs: []
  type: TYPE_NORMAL
- en: In this example, my VSTS project is named SQL Server R Services Book, which
    is associated to my local folder named `C:\VSTS\SQL Server R Services Book`.
  prefs: []
  type: TYPE_NORMAL
- en: Ensure that both Create directory for solution and Add to Source Control are
    checked.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on OK in the New Project dialog box. The Solution Explorer window should
    show something similar to the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00126.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.3 Database Project in Solution Explorer
  prefs: []
  type: TYPE_NORMAL
- en: From here, you can add new objects such as a table, a stored procedure, and
    many other objects.
  prefs: []
  type: TYPE_NORMAL
- en: Importing an existing database into the project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have a blank database, we can import an existing database that
    you have created from Chapter 7, *Operationalizing R Prediction Models*:'
  prefs: []
  type: TYPE_NORMAL
- en: 'On Ch08, right-click and choose Import | Database:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00127.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.4 Import database into a database project
  prefs: []
  type: TYPE_NORMAL
- en: In the Import Database dialog box, click on Select Connection. Then, specify
    the database connection to the database that you previously created in [Chapter
    7](part0102.html#318PC0-e3f81285367248f4bbc6431bcd4f926d), *Operationalizing R
    Prediction Models*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The Import Database dialog box should look like the following. Click on Start:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00128.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.5 Import Database dialog box
  prefs: []
  type: TYPE_NORMAL
- en: 'The Import Database dialog box then shows Summary of the import progress:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00129.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.6 Summary of database project import
  prefs: []
  type: TYPE_NORMAL
- en: 'The solution should look something as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00130.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.7 Solution Explorer displaying a database project after the database
    is imported
  prefs: []
  type: TYPE_NORMAL
- en: Before we make any more changes, let's build the solution by right-clicking
    on the root Solution node and choose Build Solution, or you can also click on
    *Ctrl* + *Shift* + *B*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Note that the output should contain a number of warnings for each stored procedure
    referring to the `sp_execute_external` script similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Adding a new stored procedure object
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here''s an example of how to add a new object to an existing database project:'
  prefs: []
  type: TYPE_NORMAL
- en: To create a new procedure, you can right-click on the `Stored Procedures` folder,
    then click on Add | Stored Procedure...
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type `uspTrainTipPredictionModelWithRealTimeScoringDTree` in the Name  field
    as the new stored procedure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00131.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.8 Adding a new item to a Database Project
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following script to the stored procedure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Press *Ctrl* + *S* to save the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can now rebuild the solution using *Ctrl* + *Shift* + *B*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Publishing schema changes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are two options of publishing changes to an environment:'
  prefs: []
  type: TYPE_NORMAL
- en: Existing database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In this example, NYCTaxi already exists in the database. You can identify the
    schema changes and create an update script:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on Ch08 and choose Schema Compare.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ensure that the source on the left is pointing to the database project path.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the Select Target drop-down list, click on it to set the target database.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose Database and click on Select Connection. Here, you can provide connection
    to the existing `NYCTaxi` database.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on Compare, which should only show one file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00132.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.9 Schema Compare in Visual Studio
  prefs: []
  type: TYPE_NORMAL
- en: Here, you can click on Update to make the changes directly to the database or
    click on the Generate Script icon to generate the script for the changes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As a best practice, especially if you have a formal production change management
    process, you would choose generate script and include it in the change management
    request.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a unit test against a stored procedure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Adding a unit test against programmability objects, such as stored procedures
    or functions, is part of good practice of programming:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a unit test suite by right-clicking on one of the stored procedures
    or functions, such as `Ch08 `| `dbo` | `Stored Procedures` | `uspTrainTipPredictionModel`.
    Then, choose Create Unit Tests...:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00133.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.10 Creating unit test in Visual Studio
  prefs: []
  type: TYPE_NORMAL
- en: 'Choose the connection:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00134.gif)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.11 SQL Server test configuration
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you click on OK, you will see a new unit test project created and an example
    of a unit test template created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00135.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.12 SQL Server unit test template
  prefs: []
  type: TYPE_NORMAL
- en: 'On the top-right pane, you can curate your unit test cases. As  `dbo.uspTrianTipPredictionModel`
    trains sample data and stores the model as well as the AUC into `dbo.NYCTaxiModel`,
    we are going to create a unit test to ensure that:'
  prefs: []
  type: TYPE_NORMAL
- en: The new record is inserted, and
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: The AUC created meets a certain threshold
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Copy the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: In the Test Conditions pane, click on inconclusiveCondition1 and click on the
    red cross to delete it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, choose Scalar Value from Test Conditions and click on the plus button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, right-click on the scalarValueCondition1 and click on Properties.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Update the following values in the Properties window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Name**: `TestNYCTaxiModelAdded`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Expected value**: `1`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Null Expected**: `False`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Repeat steps 6 to 8 and change the following values in the Properties window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Name**: `TestNYCTaxiModelAdded`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Expected value**: `1`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Null Expected**: `False`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once you have set things up, your Visual Studio should look something like
    this now:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00136.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.13 SQL Server unit test for dbo.uspTrainTipPredictionModel
  prefs: []
  type: TYPE_NORMAL
- en: Remove `UnitTest.cs`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, right-click on the Ch08_Test project and click on Build.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to Test Explorer and click on Run All.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In a few seconds, `dbo_uspTrainTipPredictionModelTest` appears under Passed
    Test. Click on it to see a summary of the execution.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on Output to see more details, for example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00137.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.14 Test execution results
  prefs: []
  type: TYPE_NORMAL
- en: You have now learned how to create a unit test against a stored procedure, executed
    against an existing stored procedure on an existing NYC Taxi Model. Ideally, the
    unit test is run against a recently published SQL Server.
  prefs: []
  type: TYPE_NORMAL
- en: Using version control
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: From Visual Studio, we can check in the solution and manage changes in version
    control. In this specific instance, we are using VSTS to check in. It is assumed
    that you have created a project in VSTS.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the prerequisites for the rest of this section:'
  prefs: []
  type: TYPE_NORMAL
- en: '**A VSTS project**: To set up a new VSTS project, simply go to: [https://www.visualstudio.com/team-services/](https://www.visualstudio.com/team-services/).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The URL for a VSTS project should follow this format:'
  prefs: []
  type: TYPE_NORMAL
- en: '`https://<your account>.visualstudio.com/<VSTS Project>`'
  prefs: []
  type: TYPE_NORMAL
- en: The VSTS project referred to in this chapter is named `SQL Server R Services
    Book`. So, the URL in my case is    `https://mssqlgirl.visualstudio.com/SQL%20Server%20R%20Services%20Book`
  prefs: []
  type: TYPE_NORMAL
- en: The VSTS project is mapped to a local folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The local folder here mapped to the project is `C:\VSTS\SQL Server R Services
    Book`. Earlier in this chapter, we created the SQL Server database solution in
    this path.
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps to check in your solution from Visual Studio:'
  prefs: []
  type: TYPE_NORMAL
- en: On the Solution root node, right-click and choose Check In.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Team Explorer window, under the Pending Changes, type `Initial check-in` in
    the Comment text box.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Review Related Work Items, Included Changes, and Excluded Changes before you
    click on Check In:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00138.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.15 Checking in Pending Changes
  prefs: []
  type: TYPE_NORMAL
- en: On the Check-in Confirmation dialog box, click on Yes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once all the files are checked in successfully, you can also view them on the
    VSTS site. As an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '`https://mssqlgirl.visualstudio.com/SQL%20Server%20R%20Services%20Book/_versionControl`'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up continuous integration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The main idea of **continuous integration** (**CI**) is to perform builds that
    are automated based on one or more triggers. One of the triggers to perform a
    build is a check-in event. Another one could be a scheduled build. Choosing which
    trigger is appropriate depends on various factors, such as the complexity of the
    project and the culture of the team. In this section, because the project is small,
    we are going to automate the build triggered by check-ins. We will also add tests
    as part of the build.
  prefs: []
  type: TYPE_NORMAL
- en: VSTS is a good platform to automate builds, deployments for testing, and monitoring.
    In this section, we will configure a build definition and schedule a continuous
    integration in VSTS.
  prefs: []
  type: TYPE_NORMAL
- en: Ensure that the Visual Studio solution, including the SQL Server database project
    and the SQL Server Unit Test project, are built successfully.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 8.16* shows the SQL Server R Services Book team in VSTS online. In
    these next few sections, we will be using VSTS on your browser to configure CI:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00139.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.16 Checking in Pending Changes
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a prerequisite for the rest of this section:'
  prefs: []
  type: TYPE_NORMAL
- en: To be able to deploy a SQL Server database project to an on-premises SQL Server
    instance, you will need to create a private agent hosted locally that is registered
    with VSTS. This is only available in Visual Studio 2017\. To set this up, follow
    the documentation at: [https://docs.microsoft.com/en-us/vsts/build-release/actions/agents/v2-windows](https://docs.microsoft.com/en-us/vsts/build-release/actions/agents/v2-windows).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a build definition in VSTS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Follow these steps to create a build definition in VSTS:'
  prefs: []
  type: TYPE_NORMAL
- en: On the VSTS project site, click on Build and Release from the top menu, then
    choose Builds. Choose New Definition.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start with Empty Process.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Under Tasks, go to Process and choose the private agent from the Agent queue
    drop-down list. In the mssqlgirl account, the private agent is named Default:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00140.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.17 Selecting Private Agent (Default) for the tasks in the build
  prefs: []
  type: TYPE_NORMAL
- en: Review the selections in Get sources.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The local path under `$(build.sourcesdirectory)` is referring to the private
    agent's workspace to do builds and perform additional tasks.
  prefs: []
  type: TYPE_NORMAL
- en: Click on Phase 1 and replace the Display name value with Build Phase.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the top menu, choose Save from the Save &amp; Queue drop-down list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Review Save build definition and place a comment.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a task to Build Phase by clicking on the plus sign.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In Add tasks, search for MS Build, then click on Add.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change Project to `$/SQL Server R Services Book/SQL Server R Services Book/SQL
    Server R Services Book.sln`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The default value is `**/*.sln`, which refers to all solution files in the VSTS
    project.
  prefs: []
  type: TYPE_NORMAL
- en: On Build Phase, add another task, named Publish Build Artifacts. This allows
    us to get the files that can be important later, such as the DACPAC file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On the Publish Build Artifacts task, specify the following details:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Path to publish: `$(Build.Repository.LocalPath)\SQL Server R Services Book\Ch08\bin\Debug`
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Artifact name: `DACPAC`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Artifact publish location: `Visual Studio Team Services/TFS`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: In this step, we are only publishing the DACPAC file. Publishing this specific
    file in the Visual Studio Team Services area allows us to later refer to this
    DACPAC in the Release process (a Continuous Delivery step).
  prefs: []
  type: TYPE_NORMAL
- en: Click on Save &amp; Queue to test the build definition.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Review the options in queue build for SQL Server R Services Book-CI and click
    on Queue.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The page will then show that a build is being queued, similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00141.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.18 Adding publish artifact task
  prefs: []
  type: TYPE_NORMAL
- en: 'If the build is successful, you will see something similar to the following.
    Now would be a good time to get familiar with the Summary page of the build and
    the artifacts page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00142.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.19 Viewing build results
  prefs: []
  type: TYPE_NORMAL
- en: 'When you navigate to the Artifacts tab, you should be able to see the `DACPAC`
    folder. By clicking on Explore, you can see the files inside the solution including
    the build output similar to what a local build via Visual Studio would do:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00143.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.20 Exploring Artifacts published from the previous successful build
  prefs: []
  type: TYPE_NORMAL
- en: Deploying the build to a local SQL Server instance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that the build via VSTS on the private agent is successful, let''s try
    deploying the database to an SQL Server instance. The prerequisite for this is
    that the private agent must be able to access the SQL Server instance. *Figure
    8.21* shows how VSTS with on-premises (Private) agent(s) can be used for deploying
    to multiple on-premises servers/environments:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00144.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.21 High level layout of VSTS and On-prem agents/environment
  prefs: []
  type: TYPE_NORMAL
- en: 'Source: [https://docs.microsoft.com/en-us/vsts/build-release/concepts/agents/agents](https://docs.microsoft.com/en-us/vsts/build-release/concepts/agents/agents)'
  prefs: []
  type: TYPE_NORMAL
- en: 'When a SQL Server database project is built, it will produce a DACPAC file
    that can be used to create a new database. So, in the Build Phase of the SQL Server
    R Services Book-CI build definition, we will add a new task:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the SQL Server R Services Book-CI build definition.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Build Phase and add a new task.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Search for `WinRM - SQL Server DB Deployment`. Then, click on Add.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If it doesn't exist, click on Check out our Marketplace. Search for `IIS Web
    App Deployment using WinRM` and install it against your VSTS account.
  prefs: []
  type: TYPE_NORMAL
- en: 'In Deploy using : DACPAC, type the following details:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Machines: `$(UATMachine)`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Admin Login: `$(UATAdminUser)`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Password: `$(UATAdminPwd)`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'DACPAC file: `$(Build.Repository.LocalPath)\SQL Server R Services Book\Ch08\bin\Debug\Ch08.dacpac`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Specify SQL Using: `Publish Profile`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Publish Profile: `$(System.DefaultWorkingDirectory)$(UATPublishProfilePath)`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following new variables:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **Name** | **Value** | **Secret** |'
  prefs: []
  type: TYPE_TB
- en: '| `UATMachine` | {Enter your machine name in FQDN or IP address, for example:
    `uatpc.mssqlgirl.com`} | No |'
  prefs: []
  type: TYPE_TB
- en: '| `UATAdminUser` | {Enter the admin user that can log in to the UAT Machine}
    | No |'
  prefs: []
  type: TYPE_TB
- en: '| `UATAdminPwd` | {Enter the admin password for the admin} | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| `UATPublisProfilePath` | `\SQL Server R Services Book\Ch08\Ch08-UAT.publish.xml`
    | No |'
  prefs: []
  type: TYPE_TB
- en: Click on Save and Queue to test the build.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Adding the test phase to the build definition
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, you will learn how to add a test phase to the SQL Server R
    Services Book-CI build definition. This test phase will perform the unit testing
    that we have done earlier.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we can start unit testing, we need to prepare for the test. This includes
    populating the `dbo.nyctaxisample` table:'
  prefs: []
  type: TYPE_NORMAL
- en: To add a new Test Phase, go to Process**,** click on ...**,** and choose Add
    agent phase.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In Agent phase, type `Test Phase` in Display name.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On Test Phase, add a new task.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Search for `Command Line`. Then, click on `Add`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Command Line task, type the following details:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Tool: `bcp`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Arguments: `Ch08.dbo.nyctaxi_sample in "$(System.DefaultWorkingDirectory)$(UATSampleFilePath)"
    -c -t , -r \n -U $(UATDBUser) -P $(UATDBPwd)`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Save.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, we can add the step that creates and executes the unit testing:'
  prefs: []
  type: TYPE_NORMAL
- en: On Test Phase, add a new task.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Search for `Visual Studio Test`. Then, click on Add.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In `Visual Studio Test`, type the following details:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Display name: `Unit Test`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select tests using: `Test assemblies`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Test assemblies: `**\Ch08_test*.dll`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Search folder: `$(System.DefaultWorkingDirectory)`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Test platform station: `Visual Studio 2017`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Test run title: `Ch08 SQL Server Testing`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Save &amp; Queue.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When you view the build, you should be able to see something like the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00145.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.22 Successful automated testing
  prefs: []
  type: TYPE_NORMAL
- en: Automating the build for CI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have defined the SQL Server R Services Book-CI with Build Phase
    and Test Phase, we are ready to automate it:'
  prefs: []
  type: TYPE_NORMAL
- en: In VSTS, edit SQL Server R Services Book-CI.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Triggers tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ensure that Enable continuous integration is checked.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Optionally, click on + Add for Scheduled:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00146.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.23 Configuring build for CI and specific schedule
  prefs: []
  type: TYPE_NORMAL
- en: Click on the Options tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In Build Properties | Build number format, type `Build_$(Date:yyyyMMdd)$(Rev:.r)`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Save.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, to test if the automation works, let''s make a change to the solution,
    for example:'
  prefs: []
  type: TYPE_NORMAL
- en: In Visual Studio, open the SQL Server R Services Book solution.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Remove the following files from the Ch08 project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`nyc_taxi_models.sql`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`PersistModel.sql`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`PredictTipBatchMode.sql`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`PredictTipSingleMode.sql`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's check in the pending changes now. Right-click on the Solution node and
    choose Check In.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Optionally, add a comment before clicking on the Check In button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After a successful check-in, you should be able to see the Changeset number:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00147.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.24 Checking Changeset information for Visual Studio
  prefs: []
  type: TYPE_NORMAL
- en: 'In VSTS, you should be able to go to the latest build and see the matching
    Source version, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00148.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.25 Validating automated CI via Changeset information in VSTS
  prefs: []
  type: TYPE_NORMAL
- en: Setting up continuous delivery
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Continuous delivery aims to ensure that we can deploy good builds to the desired
    environment. This could mean the UAT environment or the Production environment.
    In this section, we will use VSTS to implement continuous delivery:'
  prefs: []
  type: TYPE_NORMAL
- en: In VSTS, go to the SQL Server R Services Book project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to Build and Release | Release from the top menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on + | New Definition.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Review the Select Template pane. From here, you can choose from many options,
    including Run Automated Tests from Test Manager. This option is highly recommended
    for regularly checking the accuracy of your existing model, which will be discussed
    in the next step of what the manual process entails. For now, let's choose Empty
    and click on Add.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the top title where it says All definitions **|** New Release Definition,
    click on the pencil icon to edit the name to `UAT Release`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s continue with the Pipeline tab. There are two boxes: Artifacts and Environments.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Artifacts box, click on Add artifact.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Provide the following details and click on Add:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Project**: SQL Server R Services Book'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Source** (build definition): SQL Server R Services Book-CI'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Environments box, click on 1 phase, 0 task in Environment 1.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Tasks tab, click on the first line that says Environment 1\. Change the
    Environment name to `UAT`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Tasks tab, click on the Agent phase and provide the following details:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Display name: Deploy to UAT'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Agent queue: Default'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, add a new task for Deploy to UAT.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Search for `WinRM - SQL Server DB Deployment` and click on Add.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In Deploy using : Dacpac, fill in the following details:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Machines: `$(UATMachine)`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Admin Login: `$(UATAdminUser)`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Password: `` `$(UATAdminPwd)` ``'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'DACPAC File: `$(System.ArtifactsDirectory)\$(Build.DefinitionName)\DACPAC\Ch08.dacpac`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Sever Name: `{specify the server name, for example: localhost}`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Database Name: `NYCTaxiUAT`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Go to the Variables tab and add the following variables:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **Name** | **Value** | **Secret** |'
  prefs: []
  type: TYPE_TB
- en: '| `UATMachine` | {Enter your machine name in FQDN or IP address, for example:
    uatpc.mssqlgirl.com} | No |'
  prefs: []
  type: TYPE_TB
- en: '| `UATAdminUser` | {Enter the admin user that can log in to the UAT Machine}
    | No |'
  prefs: []
  type: TYPE_TB
- en: '| `UATAdminPwd` | {Enter the admin password for the admin} | Yes |'
  prefs: []
  type: TYPE_TB
- en: Then, click on Save and accept the default values.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To test this release definition, under New Release Definition, click on + Release
    and choose Create **Release**, then choose ....
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On the Create new release for New Release Definition, type `Test UAT deployment` in
    Release Description. Then, click on Create, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00149.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.26 Creating a new release for the UAT environment based on the latest
    successful build
  prefs: []
  type: TYPE_NORMAL
- en: 'It is possible to deploy to multiple environments with different database connection
    settings. An extension that will help you achieve this is XDT Transform:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://marketplace.visualstudio.com/items?itemName=qetza.xdttransform](https://marketplace.visualstudio.com/items?itemName=qetza.xdttransform)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the release is completed, it will look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00150.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.27 Results of a successful release
  prefs: []
  type: TYPE_NORMAL
- en: 'To enable Continuous Deliverable on the release, you''ll have to edit the definition:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to the Releases view, click on ... of UAT Release, then choose Edit.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the Pipeline view, go to SQL Server R Services Book-CI inside the Artifacts
    box.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the Continuous deployment trigger, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00151.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.28 Changing the Continuous Deployment Trigger
  prefs: []
  type: TYPE_NORMAL
- en: In the Continuous deployment trigger window, ensure that the Enabled slider
    is on.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Save.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To test the UAT Release''s Continuous deliverable setup, you can invoke a new
    build on SQL Server R Services Book-CI. The view should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00152.gif)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.29 Results of a successful release through Continuous Development
  prefs: []
  type: TYPE_NORMAL
- en: 'In the summary, the Details should say that the release is Triggered by SQL
    Server R Services Book-CI Build_20180101.1\. Therefore, we successfully created
    a basic Continuous Delivery process. Advanced steps like setting up integration
    testing and load testing can now be added to the release using similar steps to
    the ones shown earlier. For more information about setting this up in VSTS, please
    refer to the following tutorial from Microsoft: [https://docs.microsoft.com/en-us/vsts/build-release/test/example-continuous-testing#configure-cd](https://docs.microsoft.com/en-us/vsts/build-release/test/example-continuous-testing#configure-cd).'
  prefs: []
  type: TYPE_NORMAL
- en: Monitoring the accuracy of the productionized model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In [Chapter 6](part0096.html#2RHM00-e3f81285367248f4bbc6431bcd4f926d), *Predictive
    Modeling*, we discussed a number of predictive modeling examples. The model(s)
    created is/are based on trained data. In a real-world scenario, new data keeps
    coming in, for example, online transactions, taxi cab transactions (remember the
    earlier NYC taxi example), and air flight delay predictions. Therefore, the data
    model should be checked regularly to ensure that it is still satisfactory and
    that there is no other better model that could be generated for it. With the latter,
    a good data scientist would continuously be asking at least four of these questions:'
  prefs: []
  type: TYPE_NORMAL
- en: Is there a different algorithm to consider due to changes of the data?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For example, if the current model is using logistic regression (`rxLogit`),
    would the decision tree algorithm more accurate (`rxDTree`) either due to the
    size or due to changes in the expected outcome?
  prefs: []
  type: TYPE_NORMAL
- en: Are there other features from newer transactions that are becoming more significant?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Consider the following scenario: Currently, tipping prediction on taxi rides
    are using passenger count, trip distance, trip time, and direct distance. Perhaps
    regularly checking whether other features, such as hour of day, day of week, pick-up
    zip code and/or drop-off zip code, holiday season, cleanliness of the taxi, or
    customer rating, would contribute more to the tipping prediction.'
  prefs: []
  type: TYPE_NORMAL
- en: Has there been changes in the requirements that can yield to actions to improve
    the business or customer?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the taxi ride tipping prediction, the current prediction is a binary value,
    that is, true or false. The business might be interested in understanding more
    about how cleanliness of the taxi or the customer rating can be correlated to
    no tips, small tips, medium tips, or large tips. Cleanliness of the taxi cab is
    an action that the driver can use to drive better improvement.
  prefs: []
  type: TYPE_NORMAL
- en: Is performance slow down caused by the model execution or input data bottleneck?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It is possible that as the input dataset/data source grows and is not optimized,
    the end-to-end predictive modeling would also slow down.
  prefs: []
  type: TYPE_NORMAL
- en: 'To capture the performance of the model, one should log the performance of
    the actual prediction or the reasonable representation of actual data. Here is
    an example of what the log table should look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Value** | **Data Type** | **Comments** |'
  prefs: []
  type: TYPE_TB
- en: '| `LogID` | `INT` | Sequential ID for execution. |'
  prefs: []
  type: TYPE_TB
- en: '| `Created On` | `DATETIME` | Date the model was generated and tested. |'
  prefs: []
  type: TYPE_TB
- en: '| `ModelID` | `INT` | Unique ID for each model. |'
  prefs: []
  type: TYPE_TB
- en: '| `Model` | `VARBINARY(MAX)` | This is the serialized representation of the
    model. |'
  prefs: []
  type: TYPE_TB
- en: '| `RxFunction` | `VARCHAR(50)` | This is the rx function used in the model.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `Formula` | `VARCHAR(1000)` | The formula for the prediction model. |'
  prefs: []
  type: TYPE_TB
- en: '| `Training Input Query` | `VARCHAR(MAX)` | The training dataset that is reproducible
    |'
  prefs: []
  type: TYPE_TB
- en: '| `AUC` | `FLOAT` | The AUC representation of the model. This can be any other
    metric that you can use to compare quality of the model. |'
  prefs: []
  type: TYPE_TB
- en: '| `Training Row Count` | `INT` | The number of row counts. |'
  prefs: []
  type: TYPE_TB
- en: '| `CPU Time` | `INT` | The number of seconds to generate the model. |'
  prefs: []
  type: TYPE_TB
- en: 'Once you capture the execution, you can analyze the AUC value and the CPU time,
    as shown in *Figure 8.30*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00153.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.30 Monitoring Model comparisons on AUC and CPU Time
  prefs: []
  type: TYPE_NORMAL
- en: 'These diagrams compare the performance of the following models:'
  prefs: []
  type: TYPE_NORMAL
- en: '|  | **Formula B** | **Formula C** |'
  prefs: []
  type: TYPE_TB
- en: '| `rxDTree` | Model ID 2 | Model ID 3 |'
  prefs: []
  type: TYPE_TB
- en: '| `rxLogit` | Model ID 4 | Model ID 5 |'
  prefs: []
  type: TYPE_TB
- en: 'The description is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Formula B is *tipped ~ passenger_count + trip_distance + trip_time_in_secs +
    direct_distance + payment_type*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Formula C is *tipped ~ passenger_count + trip_distance + trip_time_in_secs +
    payment_type*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'And each of the models is run against:'
  prefs: []
  type: TYPE_NORMAL
- en: Last 2 months of data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Random top 5 percent of data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Based on the previously mentioned comparisons, we can see that Model ID 4, which
    is `rxLogit` with Formula B, has the highest AUC range and lowest CPU time. So,
    this model is the best out of the two. Next is to decide if this model should
    replace the ones in production.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have learned the technique of comparing models and some of the
    metrics that are important in prediction modeling, you can schedule this performance
    testing similar to the one shown earlier. The scheduling can be a SQL Agent job,
    as shown in [Chapter 7](part0102.html#318PC0-e3f81285367248f4bbc6431bcd4f926d), *Operationalizing
    R Code*, where you can get alerted should new results fall below a certain threshold.
    Or, you can issue this as part of a separate SQL Server database unit project
    deployed in VSTS to check against the database with the latest transactions data.
  prefs: []
  type: TYPE_NORMAL
- en: Useful references
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Integrate SQL Server 2017 into your DevOps pipeline: [https://www.microsoft.com/en-us/sql-server/developer-get-started/sql-devops/](https://www.microsoft.com/en-us/sql-server/developer-get-started/sql-devops/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Visual Studio Team Services (VSTS): [https://www.visualstudio.com/team-services/](https://www.visualstudio.com/team-services/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Compare Visual Studio 2017 IDEs: [https://www.visualstudio.com/vs/compare/](https://www.visualstudio.com/vs/compare/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Configure Hosted Agent in VS 2017: [https://docs.microsoft.com/en-us/vsts/build-release/actions/agents/v2-windows](https://docs.microsoft.com/en-us/vsts/build-release/actions/agents/v2-windows)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Continuous Delivery: [https://www.visualstudio.com/learn/what-is-continuous-delivery/](https://www.visualstudio.com/learn/what-is-continuous-delivery/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Visual Studio 2017 is a powerful IDE for data scientists/developers to manage
    their code, unit testing, and version control. Combined with Visual Studio Team
    Services, they form a complete toolkit to execute Database Lifecycle Management,
    which can also be easily adapted to DevOps practices. This chapter describes in
    detail how you can integrate SQL Server Machine Learning Services with R in SQL
    Server Database projects, DevOps practices, and CI/CD workflows. Finally, you
    have also learned how to monitor a Prediction Model accuracy over time.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll discuss how DBAs can also take advantage of Machine
    Learning Services with R.
  prefs: []
  type: TYPE_NORMAL
