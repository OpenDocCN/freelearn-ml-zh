- en: '6'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '6'
- en: Reusable IA Components
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可重用IA组件
- en: In this chapter, we’ll discuss four **reusable IA components**. These reusable
    logic pieces are short, making them easy to add to existing IA Processes. They’re
    built by combining core BP functionality, such as Environment Variables, Session
    Variables, and Credentials, making them simple to implement. Their purpose is
    to provide functionality that’s useful to every IA solution, without requiring
    major rework.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论四个**可重用IA组件**。这些可重用逻辑片段很短，因此很容易添加到现有的IA流程中。它们通过结合核心BP功能（如环境变量、会话变量和凭证）构建，因此易于实现。它们的目的在于提供对每个IA解决方案都很有用的功能，而无需进行重大修改。
- en: 'More specifically, we’ll look at the implementation of four components:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 更具体地说，我们将查看四个组件的实现：
- en: IA session control
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IA会话控制
- en: ML prediction kill switch
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ML预测关闭开关
- en: ML model versioning
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ML模型版本控制
- en: New ML model evaluation
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新的ML模型评估
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'Download and import the two `.bprelease` files from the `ch6` folder on GitHub:
    [https://github.com/PacktPublishing/Intelligent-Automation-with-Blue-Prism/tree/main/ch6](https://github.com/PacktPublishing/Intelligent-Automation-with-Blue-Prism/tree/main/ch6).'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 从GitHub上的`ch6`文件夹下载并导入两个`.bprelease`文件：[https://github.com/PacktPublishing/Intelligent-Automation-with-Blue-Prism/tree/main/ch6](https://github.com/PacktPublishing/Intelligent-Automation-with-Blue-Prism/tree/main/ch6)。
- en: IA session control
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: IA会话控制
- en: '**Session Variables** are used when the Controller needs to change how execution
    behaves during an active session. In the context of IA, the most common reasons
    for wanting to change execution behavior are to do the following:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**会话变量**在控制器需要更改活动会话期间执行行为时使用。在IA的上下文中，想要更改执行行为最常见的原因是执行以下操作：'
- en: Force items to undergo HITL review
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 强制项进行HITL审查
- en: Disable HITL review temporarily
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 暂时禁用HITL审查
- en: Force shared data used for reviews to be recreated
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 强制重新创建用于审查的共享数据
- en: Forcing HITL review
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 强制HITL审查
- en: There may be a need to force all items in a running Session to undergo HITL
    review, disable HITL completely, and revert to the default behavior. Forcing all
    items in a Session to be reviewed can be useful for debugging and model validation
    purposes. Disabling HITL temporarily could be used when there’s a shortage of
    reviewers or when the need to meet SLAs takes priority over the need for review.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 可能需要强制运行会话中的所有项进行HITL审查，完全禁用HITL，并恢复默认行为。强制会话中的所有项进行审查对于调试和模型验证可能很有用。在审阅人员短缺或需要满足服务级别协议（SLA）的需求高于审查需求时，暂时禁用HITL可能是有用的。
- en: In the design examples that we’ve seen in previous chapters, the data used to
    specify the thresholds or random sampling rates were stored in Environment Variables.
    Changing Environment Variables *won’t* affect Sessions that are already running.
    However, they’ll affect *all* Sessions moving forward, which might not be desired.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们之前章节中看到的示例设计中，用于指定阈值或随机抽样率的用于存储的数据存储在环境变量中。更改环境变量**不会**影响已经运行的会话。然而，它们将影响**所有**未来的会话，这可能不是所希望的。
- en: 'Implementing a way to force HITL reviews to happen in a currently running Session
    is simple. Create a Data Item with **Exposure** set to **Session**. Set **Data
    Type** to **Flag**, with **Initial Value** set to **False**. If the value is **False**,
    we continue with the random sampling or thresholding logic. If the value is **True**,
    we mark the Item as requiring HITL review. The best place to locate a check for
    this Flag is just before we tag or update the status of the Item to indicate that
    it requires manual review:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 实现一种强制在当前运行的会话中发生HITL审查的方法很简单。创建一个数据项，将**曝光**设置为**会话**。将**数据类型**设置为**标志**，将**初始值**设置为**False**。如果值为**False**，我们继续使用随机抽样或阈值逻辑。如果值为**True**，我们将该项标记为需要HITL审查。检查此标志的最佳位置是在我们标记或更新项的状态以指示需要手动审查之前：
- en: '![Figure 6.1 – A Session variable to force HITL review](img/B18416_06_1.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![图6.1 – 强制HITL审查的会话变量](img/B18416_06_1.jpg)'
- en: Figure 6.1 – A Session variable to force HITL review
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.1 – 强制HITL审查的会话变量
- en: Disabling HITL review
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 禁用HITL审查
- en: 'Similarly, we can create a new Session variable to disable HITL. Create a Data
    Item, set **Data Type** to **Flag**, **Exposure** to **Session**, and **Initial
    Value** to **False**. When the value is **False**, the original review logic is
    respected. When the value is **True**, HITL review is skipped, and automated processing
    continues with the original predicted value. This Flag should be checked just
    before we update the Item’s Tags or Status to indicate that HITL review is complete:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，我们可以创建一个新的会话变量来禁用HITL。创建一个数据项，将**数据类型**设置为**标志**，**暴露**设置为**会话**，**初始值**设置为**False**。当值为**False**时，尊重原始审查逻辑。当值为**True**时，跳过HITL审查，并使用原始预测值继续自动化处理。这个标志应该在更新项目标签或状态以指示HITL审查完成之前进行检查：
- en: '![Figure 6.2 – A Session variable to disable HITL review](img/B18416_06_2.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![图6.2 – 一个用于禁用HITL审查的会话变量](img/B18416_06_2.jpg)'
- en: Figure 6.2 – A Session variable to disable HITL review
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.2 – 一个用于禁用HITL审查的会话变量
- en: 'What happens if both the **Force HITL Review** and **Disable HITL Review**
    Session Variables’ Values are set to **True**? **Disable HITL Review** “overrides”
    **Force HITL Review**, since it’s checked later. The following table summarizes
    what happens for different combinations of the two Flags:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果**强制HITL审查**和**禁用HITL审查**会话变量的值都设置为**True**会发生什么？**禁用HITL审查**“覆盖”**强制HITL审查**，因为它是在后面检查的。以下表格总结了两个标志的不同组合会发生什么：
- en: '| **Force** **HITL Review** | **Disable** **HITL Review** | **Behavior** |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| **强制** **HITL审查** | **禁用** **HITL审查** | **行为** |'
- en: '| False | False | Use the Process’s original logic (this is the default behavior)
    |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| 否 | 否 | 使用流程的原始逻辑（这是默认行为） |'
- en: '| False | True | All items in the Session will continue automated processing
    *without* HITL review |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| 否 | 是 | 会话中的所有项目将继续自动化处理 *而不* 进行HITL审查 |'
- en: '| True | False | All Items in the Session *will* require review |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| 是 | 否 | 会话中的所有项目 *都将* 需要审查 |'
- en: '| True | True | All Items in the Session will continue automated processing
    *without* HITL review |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| 是 | 是 | 会话中的所有项目将继续自动化处理 *而不* 进行HITL审查 |'
- en: Table 6.1 – Force HITL Review and Disable HITL Review Session variable behavior
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 表6.1 – 强制HITL审查和禁用HITL审查会话变量行为
- en: Forcing review data recreation
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 强制审查数据重建
- en: A potentially brittle part of an IA solution lies in the data-sharing interface
    between BP and the reviewers. There are numerous possible scenarios where a record
    could go missing, leading to a prediction that cannot be reviewed. This Item ends
    up stuck unless the Controller manually edits its Status from the `Flag` Session
    variable as well, similar to **Force HITL Review** and **Disable** **HITL Review**.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: IA解决方案的一个可能脆弱的部分在于BP和审查员之间的数据共享接口。存在许多可能的情况，记录可能会丢失，导致无法审查的预测。除非控制器手动从`标记`会话变量编辑其状态，否则此项目将陷入停滞，类似于**强制HITL审查**和**禁用HITL审查**。
- en: We’ve discussed three Session Variables that are unique to IA and how they can
    be set up. Next, let’s go through an example where the three Session Variables,
    including modifications to the Process logic, are implemented.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经讨论了三个仅属于IA的会话变量以及它们如何设置。接下来，让我们通过一个例子来看看三个会话变量，包括对流程逻辑的修改，是如何实现的。
- en: Example 1 – three IA Session Variables
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例1 – 三个IA会话变量
- en: 'In this example, we’ll look at a modified version of the *three* Processes,
    *three* Work Queue design from [*Chapter 5*](B18416_05.xhtml#_idTextAnchor075),
    and see exactly where in the Process diagram the three Session Variables have
    been added. Then we’ll test the Session Variables to ensure that they function
    as expected. Our goal is to understand how and where we should check for the Session
    Variables in the Process. This example has seven high-level steps:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将查看三个流程的修改版本，三个工作队列设计来自[*第五章*](B18416_05.xhtml#_idTextAnchor075)，并确切地看到三个会话变量在流程图中的添加位置。然后我们将测试会话变量以确保它们按预期工作。我们的目标是了解我们如何在流程中检查会话变量。这个例子有七个高级步骤：
- en: Verify the Release contents.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证发布内容。
- en: Examine the logic for the `Force HITL Review` Session variable.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查`强制HITL审查`会话变量的逻辑。
- en: Test `Force HITL Review` from the Control Room.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从控制室测试 `强制HITL审查`。
- en: Examine the logic for the `Force Create Review Data` Session variable.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查`强制创建审查数据`会话变量的逻辑。
- en: Test `Force Create Review Data` from the Control Room.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从控制室测试 `强制创建审查数据`。
- en: Examine the logic for the `Disable HITL Review` Session variable.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查`禁用HITL审查`会话变量的逻辑。
- en: Test `Disable HITL Review` from the Control Room.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从控制室测试 `禁用HITL审查`。
- en: Verify the release contents
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 验证发布内容
- en: 'First, let’s get familiar with the contents of the Release file for this example.
    Verify that *three* Processes, *three* Work Queues, and *three* Environment Variables
    have been imported:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们熟悉一下本示例的发布文件内容。验证是否已导入*三个*流程、*三个*工作队列和*三个*环境变量：
- en: '![Figure 6.3 – Example 1’s Release contents](img/B18416_06_3.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![图6.3 – 示例1的发布内容](img/B18416_06_3.jpg)'
- en: Figure 6.3 – Example 1’s Release contents
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.3 – 示例1的发布内容
- en: The first Process, named **Example 1A – Three IA Session Variables**, only performs
    the standard business logic and isn’t affected by the three Session Variables
    described in this section. Process 2, **Example 1B – Force HITL Review**, has
    one of the Session Variables. Let’s look at it next.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个流程，命名为**示例1A – 三个IA会话变量**，仅执行标准业务逻辑，不受本节中描述的三个会话变量的影响。流程2，**示例1B – 强制HITL审查**，包含一个会话变量。让我们接下来看看它。
- en: Examine the Force HITL Review Session variable logic
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 检查强制HITL审查会话变量逻辑
- en: 'The **Force HITL Review** Session variable controls whether we want all ML
    predictions to undergo human review. This belongs in Process 2, which is where
    ML prediction is made and the thresholding or random sampling logic is checked.
    Let’s find the Decision Stage logic in Process 2 that checks for our Session variable:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '**强制HITL审查**会话变量控制我们是否希望所有ML预测都经过人工审查。这属于流程2，即ML预测制作和阈值或随机抽样逻辑检查的地方。让我们在流程2中找到检查我们会话变量的决策阶段逻辑：'
- en: Open **Example 1B – Three IA Session Variables** Process in the *Ch6* Group
    in the Process Studio.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在流程工作室的*Ch6*组中打开**示例1B – 三个IA会话变量**流程。
- en: 'See that a global Session variable has been added to the `Main Page`:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请查看是否在`主页面`中添加了一个全局会话变量：
- en: '![Figure 6.4 – The Session Variable is saved on the Main Page of Process 2](img/B18416_06_4.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![图6.4 – 会话变量已保存在流程2的主页上](img/B18416_06_4.jpg)'
- en: Figure 6.4 – The Session Variable is saved on the Main Page of Process 2
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.4 – 会话变量已保存在流程2的主页上
- en: Open the `02 Check for Manual` `Review` Page.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`02 检查手动` `审查`页面。
- en: 'Open the *Require Manual Review?* Decision Stage. See that we’ve added a check
    for the Session Variable as an `OR` condition in the Expression:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开*是否需要手动审查？*决策阶段。查看我们是否已将检查会话变量作为表达式中的`OR`条件添加：
- en: '![Figure 6.5 – The Session Variable has been added to the Decision Stage](img/B18416_06_5.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![图6.5 – 会话变量已添加到决策阶段](img/B18416_06_5.jpg)'
- en: Figure 6.5 – The Session Variable has been added to the Decision Stage
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.5 – 会话变量已添加到决策阶段
- en: Test the Force HITL Review Session Variable
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试强制HITL审查会话变量
- en: 'Now that we know how the Session Variable is checked, let’s test it in the
    Control Room. This Process adds 10 items to [*Chapter 6*](B18416_06.xhtml#_idTextAnchor093)
    *Example 1* *Queue 1*:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经知道了如何检查会话变量，让我们在控制室中测试它。此流程向[*第6章*](B18416_06.xhtml#_idTextAnchor093)
    *示例1* *队列1*添加了10个项目：
- en: Run **Example 1A – Three IA Session Variables** in the Control Room. Wait for
    the Session to complete.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在控制室中运行**示例1A – 三个IA会话变量**。等待会话完成。
- en: 'Open **Control** | **Session Management**. Click on **Show Session Variables**
    to ensure that the **Session Variables** panel is open:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开**控制** | **会话管理**。点击**显示会话变量**以确保**会话变量**面板已打开：
- en: '![Figure 6.6 – Ensure that the Session Variables panel is opened](img/B18416_06_6.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![图6.6 – 确保会话变量面板已打开](img/B18416_06_6.jpg)'
- en: Figure 6.6 – Ensure that the Session Variables panel is opened
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.6 – 确保会话变量面板已打开
- en: Keeping the panel open will allow us to quickly change the value of the `Force
    HITL Review` Session Variable in *step 4*.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 保持面板打开将允许我们在*步骤4*中快速更改`强制HITL审查`会话变量的值。
- en: Run **Example 1B – Force HITL Review** in the Control Room. Do *not* wait for
    the Session to complete.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在控制室中运行**示例1B – 强制HITL审查**。**不要**等待会话完成。
- en: 'Set the **Force HITL Review** Session Variable to **True** in the **Session
    Variables** panel. Every ML prediction that’s made from this point forward will
    be marked as needing HITL review:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**会话变量**面板中将**强制HITL审查**会话变量设置为**True**。从现在起，所有做出的ML预测都将标记为需要HITL审查：
- en: '![Figure 6.7 – Set the Force HITL Review Session Variable to True](img/B18416_06_7.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![图6.7 – 将强制HITL审查会话变量设置为True](img/B18416_06_7.jpg)'
- en: Figure 6.7 – Set the Force HITL Review Session Variable to True
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.7 – 将强制HITL审查会话变量设置为True
- en: 'Once the Session is complete, view the contents of [*Chapter 6*](B18416_06.xhtml#_idTextAnchor093)
    *Example 1 Queue 1*. Depending on how quickly you changed the Session Variable,
    you should see all, or almost all, of the Queue Items as needing manual review:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦会话完成，查看[*第6章*](B18416_06.xhtml#_idTextAnchor093) *示例1 队列1*的内容。根据你更改会话变量的速度，你应该看到所有或几乎所有队列项都需要人工审查：
- en: '![Figure 6.8 – Almost every Item in Work Queue 1 should require a manual review](img/B18416_06_8.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![图6.8 – 工作队列1中的几乎所有项目都应该需要人工审查](img/B18416_06_8.jpg)'
- en: Figure 6.8 – Almost every Item in Work Queue 1 should require a manual review
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.8 – 工作队列1中的几乎所有项目都应该需要人工审查
- en: We’ve confirmed that the `Force HITL Review` Session variable is working. Now,
    let’s look at the Session variable that forces the re-creation of review data.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已确认`强制HITL审查`会话变量正在工作。现在，让我们看看强制重新创建评论数据的会话变量。
- en: Examine the Force Create Review Data Session Variable logic
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 检查强制创建评论数据会话变量逻辑
- en: 'Recall that the third Process contains the logic to write review data to disk
    and checks to see whether the review has been completed. Here, we’ll examine Process
    3 to see how the file recreation Session Variable logic has been implemented:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 回想一下，第三个流程包含将评论数据写入磁盘的逻辑，并检查评论是否已完成。在这里，我们将检查流程3，看看文件重建会话变量逻辑是如何实现的：
- en: Open **Example 1C - Disable HITL Review and Force Create Review Data** Process
    in the *Ch6* Group in the Process Studio.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在流程工作室的*Ch6*组中打开**示例1C - 禁用HITL审查和强制创建评论数据**流程。
- en: 'See that two global Session Variables are on the `Main Page`. The `Force Create
    Review Data` Session Variable is what we’re interested in here:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 看到两个全局会话变量在`主页`上。`强制创建评论数据`会话变量是我们这里感兴趣的：
- en: '![Figure 6.9 – Two Session Variables are saved on the Main Page of Process
    3](img/B18416_06_9.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![图6.9 – 两个会话变量保存在流程3的主页上](img/B18416_06_9.jpg)'
- en: Figure 6.9 – Two Session Variables are saved on the Main Page of Process 3
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.9 – 两个会话变量保存在流程3的主页上
- en: Open the `01 Write Shared Review` `Data` Page.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`01 编写共享评论` `数据`页面。
- en: Find the Block named **Session Variable Logic**. This Block is newly added to
    this Page compared to the original example in the previous chapter.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到名为**会话变量逻辑**的块。与上一章中的原始示例相比，这个块是新添加到这个页面上的。
- en: Open the *Force Create Review Data?* Decision Stage. We’ll check to see whether
    **Force Create Review Data** is **True**. If it is, we’ll try to delete the existing
    file and remove references to it from our Item Data. Then we’ll proceed to create
    a new review file as if it never existed.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开*强制创建评论数据？*决策阶段。我们将检查**强制创建评论数据**是否为**真**。如果是，我们将尝试删除现有文件并从我们的项目数据中移除对其的引用。然后我们将继续创建一个新评论文件，就像它从未存在过一样。
- en: '![Figure 6.10 – The logic that allows for review files to be forcibly created](img/B18416_06_10.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![图6.10 – 允许强制创建评论文件的逻辑](img/B18416_06_10.jpg)'
- en: Figure 6.10 – The logic that allows for review files to be forcibly created
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.10 – 允许强制创建评论文件的逻辑
- en: Test the Force Create Review Data Session Variable
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试强制创建评论数据会话变量
- en: Now, let’s test to see whether the Session Variable works. We will be running
    Process 3 a total of three times. The first run creates all of the review files
    once. The second run confirms that the review files don’t get recreated by default.
    For the third run, we’ll change the Session Variable and see that the previous
    review files are being deleted, with newer ones being created in their place.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们测试会话变量是否工作。我们将总共运行流程3三次。第一次运行创建所有评论文件一次。第二次运行确认默认情况下不会重新创建评论文件。对于第三次运行，我们将更改会话变量，并看到之前的评论文件正在被删除，同时以新的文件替换它们。
- en: Run **Example 1C - Disable HITL Review and Force Create Review Data** in the
    Control Room. This Process also has a sleep Stage between items to make it easier
    to edit Session Variables. Wait for the Session to complete.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在控制室中运行**示例1C - 禁用HITL审查和强制创建评论数据**。此流程在项目之间也有一个睡眠阶段，以便更容易编辑会话变量。等待会话完成。
- en: Visit the folder defined by the `Ch6 Example 1 To Review Folder Path` Environment
    Variable in Windows Explorer. Verify that the number of files present in the folder
    is equal to the number of items that are waiting for manual review. Keep note
    of the timestamps of when these files were created.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Windows资源管理器中访问由`Ch6 Example 1 To Review Folder Path`环境变量定义的文件夹。验证文件夹中文件的数量是否与等待人工审查的项目数量相等。注意这些文件创建的时间戳。
- en: Wait for the deferral times of the Items in [*Chapter 6*](B18416_06.xhtml#_idTextAnchor093)
    *Example 1 Queue 3* to pass.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 等待[*第6章*](B18416_06.xhtml#_idTextAnchor093) *示例 1 队列 3*中项目的延迟时间通过。
- en: Run **Example 1C - Disable HITL Review and Force Create Review Data** in the
    Control Room for a second time. Wait for the Session to complete.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在控制室中第二次运行**Example 1C - Disable HITL Review and Force Create Review Data**。等待会话完成。
- en: Return to the folder defined by the `Ch6 Example 1 To Review Folder Path` Environment
    Variable. Verify that the timestamps of the files have not changed. This indicates
    that the review files haven’t been recreated.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回由`Ch6 Example 1 To Review Folder Path`环境变量定义的文件夹。验证文件的日期时间戳没有更改。这表明审查文件尚未被重新创建。
- en: Wait for the deferral times of the items in [*Chapter 6*](B18416_06.xhtml#_idTextAnchor093)
    *Example 1 Queue 3* to pass.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 等待[*第6章*](B18416_06.xhtml#_idTextAnchor093) *示例 1 队列 3*中项目的延迟时间通过。
- en: Run **Example 1C - Disable HITL Review and Force Create Review Data** in the
    Control Room for a third time. Do *not* wait for the Session to complete.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在控制室中第三次运行**Example 1C - Disable HITL Review and Force Create Review Data**。不要等待会话完成。
- en: 'Set the **Force Create Review Data** Session Variable to **True** in the **Session
    Variables** panel. Every Item from this point forward will have its review data
    recreated. Wait for the Session to complete:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**会话变量**面板中将**Force Create Review Data**会话变量设置为**True**。从这一点开始，每个项目都将重新创建其审查数据。等待会话完成：
- en: '![Figure 6.11 – Set the Force Create Review Data Session Variable to True](img/B18416_06_11.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![图6.11 – 将Force Create Review Data会话变量设置为True](img/B18416_06_11.jpg)'
- en: Figure 6.11 – Set the Force Create Review Data Session Variable to True
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.11 – 将Force Create Review Data会话变量设置为True
- en: Return to the folder defined by the **Ch6 Example 1 To Review Folder Path**
    Environment Variable. Verify that the date-modified timestamps of the files have
    changed, indicating that they’ve been recreated.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回由**Ch6 Example 1 To Review Folder Path**环境变量定义的文件夹。验证文件的修改日期时间戳已更改，表明它们已被重新创建。
- en: At this point, we’ve tested two of our Session Variables. Let’s proceed and
    look at the third, which is used to disable HITL review checking.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经测试了我们的两个会话变量。让我们继续并查看第三个，它用于禁用HITL审查检查。
- en: Examine the Disable HITL Review Session variable logic
  id: totrans-99
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 检查Disable HITL Review会话变量逻辑
- en: 'Our final Session Variable is also in the third Process. Let’s see how it’s
    implemented:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们最后的会话变量也在第三个流程中。让我们看看它是如何实现的：
- en: Open `Main Page` of this Process.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开此流程的`Main Page`。
- en: Open the `02 Check for Reviewed` `Predictions` Page.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`02 Check for Reviewed` `Predictions`页面。
- en: 'See that a Decision Stage named **Disable HITL Review** has been added, which
    skips to the Stages that should run after an Item has been reviewed:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确认已添加名为**Disable HITL Review**的决策阶段，该阶段跳过后审查项目后应运行的阶段：
- en: '![Figure 6.12 – A Decision Stage has been added to Disable HITL Review](img/B18416_06_12.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![图6.12 – 已添加决策阶段以禁用HITL Review](img/B18416_06_12.jpg)'
- en: Figure 6.12 – A Decision Stage has been added to Disable HITL Review
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.12 – 已添加决策阶段以禁用HITL Review
- en: Test the Disable HITL Review Session Variable
  id: totrans-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试Disable HITL Review会话变量
- en: 'In the last section of this example, we will run the third Process again, set
    the **Disable HITL Review** Session Variable to **True**, and verify that the
    Items have had their Status and Tags removed in [*Chapter 6*](B18416_06.xhtml#_idTextAnchor093)
    *Example 1* *Queue 1*:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在本例的最后部分，我们将再次运行第三个流程，将**Disable HITL Review**会话变量设置为**True**，并验证[*第6章*](B18416_06.xhtml#_idTextAnchor093)
    *示例 1* *队列 1*中的项目是否已移除其状态和标签：
- en: Run **Example 1C – Disable HITL Review and Force Create Review Data** in the
    Control Room. Do *not* wait for the Session to complete.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在控制室中再次运行**Example 1C – Disable HITL Review and Force Create Review Data**。不要等待会话完成。
- en: Set the **Disable HITL Review** Session Variable to **True** in the **Session
    Variables** panel. Every Item from this point forward will no longer require HITL
    review. Wait for the Session to complete.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**会话变量**面板中将**Disable HITL Review**会话变量设置为**True**。从这一点开始，每个项目将不再需要HITL审查。等待会话完成。
- en: 'View the contents of the [*Chapter 6*](B18416_06.xhtml#_idTextAnchor093) *Example
    1 Queue 1* Work Queue. The Status of the Items that were previously **Manual Review
    Required** should now be **Manual Review Complete** with their Tags removed. The
    Items in Queue 1 are ready to continue their automated Processing:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看[*第6章*](B18416_06.xhtml#_idTextAnchor093) *示例 1 队列 1*工作队列的内容。之前需要**手动审查**的项目现在应显示为**手动审查完成**，并移除了其标签。队列1中的项目准备继续其自动化处理：
- en: '![Figure 6.13 – The Items in Queue 1 have skipped the HITL review](img/B18416_06_13.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![图6.13 – 队列1中的项目已跳过HITL审查](img/B18416_06_13.jpg)'
- en: Figure 6.13 – The Items in Queue 1 have skipped the HITL review
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.13 – 队列1中的项目已跳过HITL审查
- en: We’ve completed the example in which we implemented a reusable design snippet
    containing three Session Variables. These Session Variables enable us to control
    IA-specific behaviors while the Session is still running. Now, let’s move on from
    looking at Session-specific design controls to a design component that can work
    across multiple Sessions.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经完成了包含三个会话变量的可重用设计片段的实现示例。这些会话变量使我们能够在会话仍在运行时控制IA特定的行为。现在，让我们从查看特定于会话的设计控制转向一个可以在多个会话中工作的设计组件。
- en: ML prediction kill switch
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 机器学习预测终止开关
- en: Imagine that a significant flaw is discovered in an ML algorithm after it’s
    already running in production. We’d like to stop *all Sessions* that are already
    in flight from making predictions with the model. One option is to disable the
    ML model from its source – for instance, by turning off the cloud service or internal
    web server. However, it’s fairly unlikely that this could be done by a member
    of the IA team and achieved in a short period of time.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下，在机器学习算法已经在生产环境中运行后，发现了一个重大的缺陷。我们希望停止所有正在进行的会话，使其不再使用该模型进行预测。一个选项是从源头上禁用机器学习模型——例如，通过关闭云服务或内部Web服务器。然而，IA团队成员在短时间内完成这一操作的可能性相当低。
- en: The most obvious option available to the IA controller team is to use *Request
    Stop*, but based on the standard BP Process template, the check for *Stop* only
    happens after an Item has finished executing. Adding a *Session Variable* to stop
    ML predictions is also an option if the number of concurrent running Sessions
    is low enough. But what if we have dozens, or even hundreds of Sessions underway?
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: IA控制器团队可用的最明显选项是使用*请求停止*，但根据标准的BP流程模板，只有在项目执行完成后才会进行*停止*的检查。如果并发运行的会话数量足够低，添加*会话变量*来停止机器学习预测也是一个选项。但如果我们有数十个，甚至数百个会话在进行中呢？
- en: The design component that can be used to prevent an ML prediction from running
    across *all Sessions* here is a **kill switch**. The purpose of the kill switch
    is to allow an IA controller to stop all currently running Sessions from starting
    an ML prediction, in a controlled manner. Implementing a kill switch is simple;
    however, it uses a BP feature – the *Credential*, in an unintended fashion.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 可以用来防止机器学习预测在所有会话中运行的组件设计是一个**终止开关**。终止开关的目的是允许IA控制器以可控的方式停止所有当前正在运行的会话，以停止机器学习预测。实现终止开关很简单；然而，它使用了一个BP功能——*凭证*，以一种非预期的方式。
- en: Example 2 – kill switch
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例2 – 终止开关
- en: 'Since implementing a kill switch is simple, let’s build one from scratch and
    see how it works. The kill switch uses a Credential and its *Marked as invalid*
    property. At a high level, we will be going through seven steps:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 由于实现终止开关很简单，让我们从头开始构建一个，看看它是如何工作的。终止开关使用凭证及其*标记为无效*属性。从高层次来看，我们将进行七个步骤：
- en: Create the Credential and grant it Permissions.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建凭证并授予其权限。
- en: Create a Process that uses the Credential.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个使用凭证的流程。
- en: Add Exception handling to the Process.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在流程中添加异常处理。
- en: Finalize the kill switch logic.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确定终止开关的逻辑。
- en: Test the Process with an *inactive* kill switch.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用*非活动*的终止开关测试流程。
- en: Activate the kill switch.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 激活终止开关。
- en: Test the Process with an *active* kill switch.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用*活动*的终止开关测试流程。
- en: Create a Credential and grant Permissions
  id: totrans-127
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建凭证并授予权限
- en: 'The first step of implementing the kill switch is to create a new credential:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 实现终止开关的第一步是创建一个新的凭证：
- en: Create a new Credential from the **System** | **Security** | **Credentials**
    area of BP.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从BP的**系统**|**安全**|**凭证**区域创建一个新的凭证。
- en: 'Name the credential **Kill Switch**:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将凭证命名为**终止开关**：
- en: '![Figure 6.14 – Name the Credential “Kill Switch”](img/B18416_06_14.jpg)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![图6.14 – 将凭证命名为“终止开关”](img/B18416_06_14.jpg)'
- en: Figure 6.14 – Name the Credential “Kill Switch”
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.14 – 将凭证命名为“终止开关”
- en: Click on the **Access** **Rights** tab.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**访问****权限**标签。
- en: Click on the **Security Roles** sub-tab and select the **All Roles** checkbox.
    Note that this isn’t best practice, but we’re doing it to simplify the example.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**安全角色**子标签，并勾选**所有角色**复选框。请注意，这不是最佳实践，但我们这样做是为了简化示例。
- en: Click on the **Processes (legacy)** sub-tab and check the **All** **Processes**
    checkbox.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**流程（旧版）**子标签，并勾选**所有****流程**复选框。
- en: Click on the **Resources (legacy)** sub-tab and check the **All** **Resources**
    checkbox.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**资源（旧版）**子标签，并勾选**所有****资源**复选框。
- en: Save the Credential.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存凭证。
- en: Create the Process and kill switch
  id: totrans-138
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建流程和杀死开关
- en: 'Next, let’s create a BP Process that uses this Credential:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们创建一个使用此凭证的 BP 流程：
- en: Create a Process named **Example 2 – Test Kill Switch** in the *Ch6* Group.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在*Ch6*组中创建一个名为**示例2 – 测试杀死开关**的流程。
- en: Open **Example 2 – Test Kill Switch** Process in the Process Studio.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在流程工作室中打开**示例2 – 测试杀死开关**流程。
- en: Add an Action Stage to the diagram.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在流程图中添加一个操作阶段。
- en: 'Open the Action Stage, then set the `"Kill Switch"` as **Credentials Name**:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开操作阶段，然后设置`"杀死开关"`为**凭证名称**：
- en: '![Figure 6.15 – Add a Credentials::Get Action to the diagram](img/B18416_06_15.jpg)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![图6.15 – 将凭证::Get操作添加到流程图中](img/B18416_06_15.jpg)'
- en: Figure 6.15 – Add a Credentials::Get Action to the diagram
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.15 – 将凭证::Get操作添加到流程图中
- en: 'Click on the **Outputs** tab. Create a Data Item named **Status** to store
    the Status Output:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**输出**选项卡。创建一个名为**状态**的数据项以存储状态输出：
- en: '![Figure 6.16 – Store the Status Output of the Credentials::Get action](img/B18416_06_16.jpg)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![图6.16 – 存储凭证::Get操作的输出状态](img/B18416_06_16.jpg)'
- en: Figure 6.16 – Store the Status Output of the Credentials::Get action
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.16 – 存储凭证::Get操作的输出状态
- en: Save the Action.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存操作。
- en: '**Link** *Start* to the Action.'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**链接****开始**到操作。'
- en: Add Exception handling
  id: totrans-151
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加异常处理
- en: 'The next part of the kill switch is to add some simple Exception handling.
    This IA component needs to handle Exceptions if the Credential has been accidentally
    deleted:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 杀死开关的下一部分是添加一些简单的异常处理。此IA组件需要处理如果凭证意外删除的异常：
- en: Add a Block around the `Kill Switch`.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`杀死开关`周围添加一个块。
- en: Add a Recover Stage inside the Block.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在块内添加一个恢复阶段。
- en: '**Link** the Recover Stage to a Resume Stage. The Resume Stage should be outside
    of the Block.'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**链接**恢复阶段到一个恢复阶段。恢复阶段应该位于**阻塞**之外。'
- en: 'Add an Exception Stage. Fill in the details as follows:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个异常阶段。填写以下详细信息：
- en: '![Figure 6.17 – Create an Exception](img/B18416_06_17.jpg)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![图6.17 – 创建异常](img/B18416_06_17.jpg)'
- en: Figure 6.17 – Create an Exception
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.17 – 创建异常
- en: '**Link** the Resume Stage to the Exception Stage. The diagram so far should
    look like the following:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**链接**恢复阶段到异常阶段。到目前为止的流程图应该看起来如下：'
- en: '![Figure 6.18 – The kill switch Process diagram so far](img/B18416_06_18.jpg)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![图6.18 – 到目前为止的杀死开关流程图](img/B18416_06_18.jpg)'
- en: Figure 6.18 – The kill switch Process diagram so far
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.18 – 到目前为止的杀死开关流程图
- en: The kill switch structure is almost complete. Next, we need to add logic to
    check the status of the Credential.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 杀死开关结构几乎完成。接下来，我们需要添加逻辑来检查凭证的状态。
- en: Finalize the kill switch
  id: totrans-163
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 完成杀死开关
- en: 'The kill switch makes use of the Credential’s *Marked as invalid* property.
    Let’s add a Decision Stage to check for it:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 杀死开关利用凭证的*标记为无效*属性。让我们添加一个决策阶段来检查它：
- en: Add a Decision Stage to the diagram inside the *Kill* *Switch* Block.
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在*杀死***开关**块内添加一个决策阶段到流程图中。
- en: 'Set the Decision Stage’s name to `Status = Invalid?` and the Expression to
    the following:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将决策阶段的名称设置为`状态 = 无效？`并将表达式设置为以下：
- en: '[PRE0]'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '![Figure 6.19 – The Decision Stage setup](img/B18416_06_19.jpg)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![图6.19 – 决策阶段设置](img/B18416_06_19.jpg)'
- en: Figure 6.19 – The Decision Stage setup
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.19 – 决策阶段设置
- en: Copy and paste the Exception Stage named *SE – Kill Switch Triggered* into the
    diagram again so that it appears twice. Ensure that this new Exception is located
    inside the *Kill* *Switch* Block.
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将名为*SE – 杀死开关触发*的异常阶段复制并粘贴到流程图中，使其出现两次。确保这个新的异常位于*杀死***开关**块内。
- en: '**Link** the **Credentials::Get** Action to the *Status = Invalid?* Decision
    Stage.'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**链接****凭证::Get**操作到**状态 = 无效？**决策阶段。'
- en: '**Link** the Decision Stage’s *Yes* path to the newly-pasted Exception and
    the *No* path to *End*.'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**链接**决策阶段的**是**路径到新粘贴的异常和**否**路径到**结束**。'
- en: Save the Process.
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存流程。
- en: 'Verify that the diagram looks similar to the following:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确认流程图看起来类似于以下：
- en: '![Figure 6.20 – The final kill switch test Process](img/B18416_06_20.jpg)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![图6.20 – 最终的杀死开关测试流程](img/B18416_06_20.jpg)'
- en: Figure 6.20 – The final kill switch test Process
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.20 – 最终的杀死开关测试流程
- en: We’ve now completed the kill switch. It checks to see whether a Credential is
    *Marked as invalid*. If it is, an Exception is thrown. If not, we can continue
    to the Stages that follow. When using this kill switch in a real IA Process, the
    Decision Stage should link directly to the ML prediction calling Stages instead
    of to *End*.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经完成了终止开关。它会检查凭据是否被 **标记为无效**。如果是，则抛出异常。如果不是，我们可以继续到后续的阶段。当在真实的 IA 流程中使用此终止开关时，决策阶段应直接链接到调用机器学习预测的阶段，而不是链接到
    **结束**。
- en: Run the Process from the Process Studio with the kill switch inactive
  id: totrans-178
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用未激活的终止开关从流程工作室运行流程
- en: 'Let’s run the Process as-is, with a dormant kill switch. This is the default
    behavior, or what will happen when we want our IA Process to make ML predictions:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们以当前状态运行流程，使用休眠的终止开关。这是默认行为，或者当我们想要我们的 IA 流程进行机器学习预测时会发生的情况：
- en: Run **Example 2 – Test Kill Switch** from the Process Studio.
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从流程工作室运行 **示例 2 – 测试终止开关**。
- en: See that it simply goes from **Start** to **End**.
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 看到它只是从 **开始** 到 **结束**。
- en: We’ve seen the uneventful case where the kill switch is inactive. Next, we’ll
    activate the ML kill switch.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了终止开关未激活的无事案例。接下来，我们将激活机器学习终止开关。
- en: Activate the kill switch by marking the Credential as invalid
  id: totrans-183
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通过将凭据标记为无效来激活终止开关
- en: To activate the kill switch, we mark the Credential as invalid. When the kill
    switch is active, execution will be prevented from continuing past the *Kill Switch*
    Block. Under normal circumstances, we would activate the kill switch while a Session
    is still running. However, we’re triggering it outside of a Session run for the
    benefit of readers who are using the Trial and Learning editions of BP.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 要激活终止开关，我们标记凭据为无效。当终止开关激活时，执行将被阻止继续通过 **终止开关** 块。在正常情况下，我们会在会话仍在运行时激活终止开关。然而，我们在这里触发它是为了方便使用
    BP 的试用版和学习版的读者。
- en: Navigate to **System** | **Security** | **Credentials** and open the Credential
    named **Kill Switch**.
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到 **系统** | **安全** | **凭据**，并打开名为 **终止开关** 的凭据。
- en: 'Check the **Marked as invalid** checkbox and save the Credential:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 **标记为无效** 复选框并保存凭据：
- en: '![Figure 6.21 – Check the Credential’s Marked as invalid box](img/B18416_06_21.jpg)'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.21 – 检查标记为无效的凭据框](img/B18416_06_21.jpg)'
- en: Figure 6.21 – Check the Credential’s Marked as invalid box
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.21 – 检查标记为无效的凭据框
- en: With the Credential marked as invalid, our kill switch is *active*, and all
    current and future Session runs of the *Test Kill Switch* Process will throw the
    Exception when execution reaches the *Status = Invalid?* Decision Stage.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 当凭据被标记为无效时，我们的终止开关是 **激活** 的，并且所有当前和未来的 *Test Kill Switch* 流程的会话运行在执行达到 *状态
    = 无效？* 决策阶段时都会抛出异常。
- en: Run the Process from the Process Studio with the kill switch active
  id: totrans-190
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用激活的终止开关从流程工作室运行流程
- en: 'With the kill switch active, let’s run our Process again. This should throw
    an exception, preventing us from reaching the area of the Process past the *Kill*
    *Switch* block:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 在终止开关激活的情况下，让我们再次运行我们的流程。这应该会抛出异常，阻止我们到达流程中终止开关块之后的区域：
- en: Run **Example 2 – Test Kill Switch** from the Process Studio.
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从流程工作室运行 **示例 2 – 测试终止开关**。
- en: See that the Exception is thrown.
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 看到抛出了异常。
- en: An Exception is thrown when the Process tries to obtain an invalidated Credential.
    Work stops on the current item, and subsequent items, across *all Sessions* using
    this particular Credential. This lasts until the Credential is marked as valid
    again. This kill switch is best paired with Item Statuses and a Choice Stage that
    allows execution to be skipped right before the kill switch logic is called.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 当流程尝试获取已作废的凭据时，会抛出异常。当前项目的工作停止，并且使用此特定凭据的所有会话中的后续项目工作也会停止。这会持续到凭据再次被标记为有效。此终止开关最好与项目状态和允许在调用终止开关逻辑之前跳过执行的决策阶段一起使用。
- en: Important note
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Users who want to mark a Credential as invalid might need additional Permissions
    in BP. Using a kill switch in production may require a review of the Logical Access
    Model, which defines which Users should have which User Roles, and which User
    Roles should have which Permissions in BP.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 想要将凭据标记为无效的用户可能在 BP 中需要额外的权限。在生产环境中使用终止开关可能需要审查逻辑访问模型，该模型定义了哪些用户应该拥有哪些用户角色，以及哪些用户角色应该在
    BP 中拥有哪些权限。
- en: Deleting the Credential (not recommended) can also be done to trigger the kill
    switch, but you must remember to recreate the Credential with the exact same name.
    Creating and deleting Encryption Schemes and Environment Variables could also
    be used to implement kill switches, but using Credentials is a cleaner implementation.
    Checking the **Marked as invalid** checkbox is simpler to do and undo.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 删除凭证（不推荐）也可以用来触发关闭开关，但您必须记得使用完全相同的名称重新创建凭证。创建和删除加密方案和环境变量也可以用来实现关闭开关，但使用凭证是一种更简洁的实现方式。勾选**标记为无效**的复选框操作起来更简单，也更易于撤销。
- en: You’d generally have one kill switch for each ML model in production. The same
    kill switch Credential can be used across different Processes if multiple Processes
    use the same ML model.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，您会为生产中的每个机器学习模型设置一个关闭开关。如果多个进程使用相同的机器学习模型，则可以使用相同的关闭开关凭证。
- en: We’ve finished discussing the kill switch. Let’s move on to the third IA component
    of this chapter, which discusses the need to version ML models for auditing purposes.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经讨论了关闭开关。让我们继续讨论本章的第三个IA组件，该组件讨论了为了审计目的需要对机器学习模型进行版本化的需求。
- en: ML model versioning
  id: totrans-200
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 机器学习模型版本化
- en: ML programs, like all software, should receive regular updates. Updates are
    needed for many reasons – there could be new data, changes in the ML framework,
    improvements to the model tuning, security fixes, and so on. Regardless of why
    an update has occurred, the IA team should be notified when they happen as they
    can affect how predictions are made.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 机器学习程序，就像所有软件一样，应该定期更新。更新可能出于许多原因——可能有新数据、机器学习框架的变化、模型调优的改进、安全修复等。无论更新发生的原因是什么，当它们发生时，IA团队都应该被告知，因为它们可能会影响预测的准确性。
- en: Ideally, production-facing ML models will be **versioned** by the vendor. Updates
    to the model should result in new documentation and a *new URL endpoint*. Having
    a new endpoint allows the IA team to consciously choose when to use an updated
    model and revert to an older model if necessary. In reality, the ML vendor might
    simply reuse the same endpoint with an updated model and not actively notify customers
    of changes.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 理想情况下，面向生产的机器学习模型将由供应商进行版本化。模型的更新应导致新的文档和新的URL端点。拥有新的端点允许IA团队有意识地选择何时使用更新的模型，并在必要时回滚到旧模型。然而，在现实中，机器学习供应商可能会简单地重用相同的端点并使用更新的模型，而不会主动通知客户变化。
- en: If the IA team isn’t actively notified of changes to the ML model, it should
    *manually* keep track of when updates occur *for debugging and auditing purposes*.
    Otherwise, when we look at our Session Logs, we won’t know which version of the
    model was actually being used! Our goal is to know *which version of an ML model
    was used by looking only at the Session Logs*. But since there are multiple ways
    to trigger an ML prediction, it isn’t immediately obvious how this can be achieved.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 如果IA团队没有主动被告知机器学习模型的变化，它应该**手动**跟踪更新发生的时间，以进行调试和审计。否则，当我们查看会话日志时，我们不会知道实际使用了哪个版本的模型！我们的目标是仅通过查看会话日志就能知道**哪个版本的机器学习模型被使用**。但由于触发机器学习预测有多种方式，这并不立即明显如何实现。
- en: Important note
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 重要注意事项
- en: The purpose of versioning is not to ensure determinism. A deterministic model
    is one where the same set of inputs always results in the same prediction. Many
    models introduce randomness; for example, generative AI gives you different outputs
    even if you provide the same prompt multiple times. For versioning, we’re not
    looking for determinism, but we want to be confident that the model was created
    using the same data, underlying algorithms, libraries, hyperparameters, and so
    on.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 版本化的目的不是为了确保确定性。确定性模型是指相同的输入集总是导致相同的预测。许多模型引入了随机性；例如，生成式AI即使在多次提供相同提示的情况下也会给出不同的输出。对于版本化，我们不是在寻找确定性，但我们希望有信心模型是使用相同的数据、底层算法、库、超参数等创建的。
- en: Two different ways of calling web APIs
  id: totrans-206
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调用Web API的两种不同方式
- en: Web APIs are by far the most common way to deploy an ML model. In BP, we connect
    to web APIs either through *Objects* or *Web API Services* (potentially downloaded
    from the DX). The URL of the API will either be embedded as a Data Item, in the
    case of an Object, or directly saved in the Web API Services configuration. This
    leads to *four* different scenarios that we need to consider when thinking about
    how ML models can be versioned in BP. The Object case is also applicable to Code
    Stages and CLI scripts.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: Web API是目前部署ML模型最常见的方式。在BP中，我们通过*对象*或*Web API服务*（可能从DX下载）连接到Web API。API的URL将作为数据项嵌入，在对象的情况下，或者直接保存在Web
    API服务的配置中。这导致我们需要考虑*四种*不同的情况，当我们思考如何在BP中为ML模型进行版本控制时。对象的情况也适用于代码阶段和CLI脚本。
- en: '| **BP** **calling method** | **Do new models have** **separate endpoints?**
    | **What** **to do** |'
  id: totrans-208
  prefs: []
  type: TYPE_TB
  zh: '| **BP调用方法** | **新模型是否有** **独立的端点**？ | **要做什么** |'
- en: '| Object | Yes | Enable logging in the Object Stage to show which URL is being
    used |'
  id: totrans-209
  prefs: []
  type: TYPE_TB
  zh: '| 对象 | 是 | 在对象阶段启用日志记录以显示正在使用的URL |'
- en: '| Object | No | Keep track of versions manually |'
  id: totrans-210
  prefs: []
  type: TYPE_TB
  zh: '| 对象 | 否 | 手动跟踪版本 |'
- en: '| Web API Services | Yes | Keep track of versions manually |'
  id: totrans-211
  prefs: []
  type: TYPE_TB
  zh: '| Web API服务 | 是 | 手动跟踪版本 |'
- en: '| Web API Services | No | Keep track of versions manually |'
  id: totrans-212
  prefs: []
  type: TYPE_TB
  zh: '| Web API服务 | 否 | 手动跟踪版本 |'
- en: Table 6.2 – Four ways to version ML models for debugging and auditing
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 表6.2 – 调试和审计ML模型的四种版本控制方式
- en: In the next sections, we’ll go through each of the four web API calling scenarios
    outlined in *Table 6.2*.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将逐一介绍*表6.2*中概述的四个Web API调用场景。
- en: Calling a web API using an Object when a new endpoint is provided
  id: totrans-215
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 当提供新端点时使用对象调用Web API
- en: 'Let’s say that the ML vendor has updated its model and has also provided us
    with a new URL endpoint. If we’re calling this URL using an Object, we can tie
    a Session run to which model is being used by simply logging the URL. In the Object,
    the URL will either be stored as a Data Item or an Environment Variable, or directly
    typed in as an Input to an Action. Regardless of how the URL is input into the
    Object, all we need to do is enable logging in the appropriate Stage. Note that
    **Stage logging** in Objects is disabled by default, so we must explicitly turn
    logging on:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 假设ML供应商已更新其模型，并已为我们提供了新的URL端点。如果我们使用对象调用此URL，我们可以通过记录URL将会话运行与正在使用的模型关联起来。在对象中，URL将作为数据项、环境变量存储，或者直接作为动作的输入输入。无论URL如何输入到对象中，我们所需做的就是启用适当的阶段的日志记录。请注意，对象的**阶段日志记录**默认是禁用的，因此我们必须明确打开日志记录：
- en: '![Figure 6.22 – Enable Stage logging in the Object to log the URL endpoint](img/B18416_06_22.jpg)'
  id: totrans-217
  prefs: []
  type: TYPE_IMG
  zh: '![图6.22 – 在对象中启用阶段日志记录以记录URL端点](img/B18416_06_22.jpg)'
- en: Figure 6.22 – Enable Stage logging in the Object to log the URL endpoint
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.22 – 在对象中启用阶段日志记录以记录URL端点
- en: Calling a web API using an Object when the vendor reuses an existing endpoint
  id: totrans-219
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 当供应商重用现有端点时使用对象调用Web API
- en: If the vendor doesn’t provide a new endpoint when the model is updated, we need
    to create our own versioning scheme and explicitly log that in the Session Logs
    just prior to the API call. I recommend using `Date Time`, which stores the date
    of when we know for certain that a model was updated as the versioning scheme.
    Let’s implement this IA component together in an example.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 如果供应商在更新模型时没有提供新的端点，我们需要创建自己的版本控制方案，并在API调用之前在会话日志中明确记录。我建议使用`日期时间`，它存储了我们确定模型已更新的日期作为版本控制方案。让我们通过一个示例一起实现这个IA组件。
- en: Example 3 – versioning ML endpoints manually
  id: totrans-221
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例3 – 手动版本控制ML端点
- en: '*Environment Variables* are the most suitable place to store our API version,
    since we’d like to update its value outside of the Process and Object diagrams.
    However, changes to Environment Variables show up in *Audit Logs*, not *Session
    Logs*. Therefore, we can’t tell which ML model version is used by a particular
    Session run just by looking at Session Logs. You’d need to cross-reference the
    *dates of the Session Logs* with the *Audit Logs* to find out when that Environment
    Variable was modified and what the value has been changed to. Needing to look
    at two different types of logs is not ideal.'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '*环境变量*是我们存储API版本的最佳位置，因为我们希望在流程和对象图之外更新其值。然而，环境变量的更改会在*审计日志*中显示，而不是在*会话日志*中。因此，仅通过查看会话日志，我们无法知道特定会话运行使用了哪个ML模型版本。您需要将*会话日志的日期*与*审计日志*交叉引用，以找出何时修改了该环境变量以及更改了什么值。需要查看两种不同类型的日志并不是理想的情况。'
- en: '![Figure 6.23 – Changes to Environment Variables appear in the audit log](img/B18416_06_23.jpg)'
  id: totrans-223
  prefs: []
  type: TYPE_IMG
- en: Figure 6.23 – Changes to Environment Variables appear in the audit log
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: A better solution is to always log the value of the Environment Variable in
    the Session Logs right before our API call. This makes it easy to find out which
    API version is being used to make a prediction. To achieve this, we add a “dummy”
    Calculation Stage right before our API call, with logging enabled.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
- en: 'In this example, we’ll demonstrate how to implement ML versioning that results
    in the ML version appearing in the Session Logs. We’ll go through five high-level
    steps:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: Create an Environment Variable.
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a test Process.
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the Process in the Control Room and view the Session Logs.
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Update the Environment Variable with a new API model version.
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the Process again in the Control Room and view the Session Logs.
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create an Environment Variable
  id: totrans-232
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'First, we need to create an Environment Variable and populate it with a `DateTime`
    value – this will be the “version” of the API that is currently in use:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **System** | **Processes** | **Environment Variables**.
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a new Environment Variable named `DateTime`, and the Value to your current
    DateTime.
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Apply**.
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a test Process
  id: totrans-237
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Next, let’s create a test Process that calls a dummy API Object. The dummy
    Object takes the place of a real ML API call:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
- en: Create a Process named **Example 3 – ML Versioning** in the *Ch6* Group.
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open **Example 3 – ML Versioning** in the Process Studio.
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the `Ch6 Example 3 ML API Version` Environment Variable to the diagram as
    a Data Item.
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a Calculation Stage under `Temp` Data Item and set **Stage logging** to
    **Enabled**:'
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.24 – Create a Calculation Stage to log the Environment Variable
    value](img/B18416_06_24.jpg)'
  id: totrans-243
  prefs: []
  type: TYPE_IMG
- en: Figure 6.24 – Create a Calculation Stage to log the Environment Variable value
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
- en: What we’re doing is logging the Environment Variable’s value to the Session
    logs by saving it to a throwaway Data Item named `Temp`.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
- en: Add an `"www.testapi.com"`. Set **Stage logging** to **Enabled**. We will use
    this **Set Clipboard** Action as a stand-in for actually calling an API.
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Link** **Start** to the Calculation Stage, the Calculation Stage to the Action,
    and the Action to **End**. The completed diagram should look like the following
    figure:'
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.25 – A simple test Process](img/B18416_06_25.jpg)'
  id: totrans-248
  prefs: []
  type: TYPE_IMG
- en: Figure 6.25 – A simple test Process
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
- en: Publish and save the Process.
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the test Process and view the Session logs
  id: totrans-251
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s run the Process once in the Control Room and see what the Session Logs
    show:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
- en: Run **Example 3 – ML Versioning** in the Control Room and wait for the Session
    to complete.
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the Session Log for that Session run. Make a note of the Value of the
    **Log API Version** Calculation Stage and the URL of our “fake API call,” **Set
    Clipboard**:'
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.26 – View the Session Logs and take note of the ML API version and
    URL](img/B18416_06_26.jpg)'
  id: totrans-255
  prefs: []
  type: TYPE_IMG
- en: Figure 6.26 – View the Session Logs and take note of the ML API version and
    URL
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.26 – 查看会话日志并注意机器学习 API 版本和 URL
- en: Now, suppose that the ML vendor has updated the ML model while *keeping the
    URL endpoint the same*. Logging the values of the “URL” in **Set Clipboard** won’t
    let us know that the model has changed based on the Session Logs. We will need
    to update our Environment Variable to a new model version value.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，假设机器学习供应商在保持 URL 端点不变的情况下更新了机器学习模型。在 **设置剪贴板** 中记录“URL”的值不会让我们根据会话日志知道模型已更改。我们需要将我们的环境变量更新到新的模型版本值。
- en: Update the Environment Variable
  id: totrans-258
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 更新环境变量
- en: 'Since we don’t need to update the URL, let’s update the Environment Variable
    to a new `DateTime` value. This along with our Calculation Stage will record the
    fact that the underlying ML model has been updated, despite the URL staying the
    same:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们不需要更新 URL，让我们更新环境变量到一个新的 `DateTime` 值。这将与我们的计算阶段一起记录下底层机器学习模型已更新的事实，尽管 URL
    保持不变：
- en: Navigate to **System** | **Processes** | **Environment Variables**.
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到 **系统** | **流程** | **环境变量**。
- en: Update `Ch6 Example 3 ML API Version` to your current DateTime.
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `Ch6 Example 3 ML API Version` 更新为当前的 DateTime。
- en: Click **Apply**.
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **应用**。
- en: Run the test Process and view the Session Logs again
  id: totrans-263
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 运行测试流程并再次查看会话日志
- en: 'Let’s run the Process again and verify that changing the Environment Variable
    is reflected in the Session Logs:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再次运行流程并验证更改环境变量是否反映在会话日志中：
- en: Run **Example 3 – ML Versioning** in the Control Room.
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在控制室中运行 **示例 3 – 机器学习版本控制**。
- en: 'Open the Session Log for the latest Session run. See that the updated Environment
    Value has been reflected in our logs:'
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开最新会话运行的会话日志。查看更新的环境值是否已反映在我们的日志中：
- en: '![Figure 6.27 – The updated Environment Variable is reflected in the Session
    Logs](img/B18416_06_27.jpg)'
  id: totrans-267
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.27 – 更新的环境变量反映在会话日志中](img/B18416_06_27.jpg)'
- en: Figure 6.27 – The updated Environment Variable is reflected in the Session Logs
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.27 – 更新的环境变量反映在会话日志中
- en: In this third example, we discussed a component that includes an Environment
    Variable and a Calculation Stage. The purpose of this component is to enable the
    manual versioning of ML models for debugging and auditing purposes.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个第三个例子中，我们讨论了一个包含环境变量和计算阶段的组件。这个组件的目的是为了手动对机器学习模型进行版本控制，以便进行调试和审计。
- en: It’s not completely necessary to use the Calculation Stage, as changes to the
    Environment Variable are reflected in the Audit Logs. This could be cross-referenced
    with the Session Logs to determine which version of an ML model was used during
    a Session run. However, it’s simpler to have the ML model version saved directly
    in the Session Logs and avoid potential issues in obtaining the Audit Logs, such
    as user access restrictions.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 完全没有必要使用计算阶段，因为环境变量的更改会反映在审计日志中。这可以与会话日志进行交叉引用，以确定在会话运行期间使用了哪个版本的机器学习模型。然而，将机器学习模型版本直接保存到会话日志中会更简单，从而避免获取审计日志时可能遇到的问题，例如用户访问限制。
- en: Calling Web API Services
  id: totrans-271
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调用 Web API 服务
- en: 'If a web API is used instead of an Object, the base endpoint will be saved
    directly somewhere in the configuration. In the following figure, it’s saved in
    each individual Action:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 如果使用 Web API 而不是对象，基本端点将直接保存在配置中的某个地方。在下面的图中，它保存在每个单独的操作中：
- en: '![Figure 6.28 – The URL is saved in the Web API Services configuration](img/B18416_06_28.jpg)'
  id: totrans-273
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.28 – URL 保存到 Web API 服务配置中](img/B18416_06_28.jpg)'
- en: Figure 6.28 – The URL is saved in the Web API Services configuration
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.28 – URL 保存到 Web API 服务配置中
- en: 'Let’s say that the API version changes from *v1* in the preceding figure to
    *v2*. The *Audit Logs* will show that the Web API Service has been modified, but
    the new and previous URLs *can’t be seen*. This doesn’t allow us to know exactly
    which URL (and thus model) was used during a Session run:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 假设 API 版本从前面图中的 *v1* 变更为 *v2*。*审计日志* 将显示 Web API 服务已被修改，但新的和之前的 URL *无法看到*。这使我们无法确切知道在会话运行期间使用了哪个
    URL（以及因此模型）：
- en: '![Figure 6.29 – The previous and new URLs can’t be found in the Audit Logs](img/B18416_06_29.jpg)'
  id: totrans-276
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.29 – 之前和新的 URL 在审计日志中找不到](img/B18416_06_29.jpg)'
- en: Figure 6.29 – The previous and new URLs can’t be found in the Audit Logs
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.29 – 之前和新的 URL 在审计日志中找不到
- en: Therefore, if we’re using Web API Services to make our ML prediction, it doesn’t
    matter whether a new endpoint is provided or not – *historic changes to the URLs
    can’t be found in any of the BP logs.* We have to use the same scheme devised
    in *Example 3*, involving a Calculation Stage and an Environment Variable, if
    we want to know which endpoint is being used for Web API Services.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果我们使用 Web API 服务来制作我们的 ML 预测，是否提供了新的端点并不重要——*历史更改的 URL 在任何 BP 日志中都无法找到。*
    如果我们想了解正在使用哪个端点进行 Web API 服务，我们必须使用在 *示例 3* 中制定的相同方案，包括一个计算阶段和一个环境变量。
- en: We’ve finished discussing how to log ML model versions in the Session Logs.
    Next, let’s look at the final reusable IA component, which is used to evaluate
    new ML models in sequence with the current one running in production.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经讨论了如何在会话日志中记录 ML 模型版本。接下来，让我们看看最终的可重用 IA 组件，该组件用于按顺序评估新的 ML 模型，与当前在生产中运行的模型一起。
- en: New ML model evaluation
  id: totrans-280
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 新的 ML 模型评估
- en: Prediction models are expected to change for many reasons, including updates
    to the training data, hyperparameter tuning, or switching to a completely new
    algorithm. When an ML model is changed, it needs to be evaluated against a *validation*
    dataset – but that may not be enough. The purpose of this component is to allow
    us to evaluate a proposed model against *production* data. The goal is to gather
    data on how the proposed model behaves against production data so that the data
    science or IA team can determine whether it’s acceptable.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 预测模型可能会因多种原因而改变，包括训练数据的更新、超参数调整或切换到全新的算法。当一个 ML 模型发生变化时，它需要与一个 *验证* 数据集进行评估——但这可能还不够。该组件的目的是允许我们对一个提议的模型与
    *生产* 数据进行评估。目标是收集有关提议的模型如何与生产数据交互的数据，以便数据科学或 IA 团队可以确定它是否可接受。
- en: 'The IA component described in this section is implemented through a Process
    template. When used in an IA Process, this template allows us to predict against
    a second ML model using live data. The principles underlying the design of this
    component include the following:'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 本节所述的 IA 组件是通过一个流程模板实现的。当在 IA 流程中使用时，此模板允许我们使用实时数据对第二个 ML 模型进行预测。该组件设计背后的原则包括以下内容：
- en: Being simple enough to integrate into an existing IA Process
  id: totrans-283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 足够简单，可以集成到现有的 IA 流程中。
- en: Limiting logging to a single Stage to facilitate extracting Session Log information
    for data scientists’ consumption
  id: totrans-284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将日志限制在单个阶段，以方便提取会话日志信息供数据科学家使用。
- en: Resuming any Exceptions that occur in the template so that they don’t affect
    the primary production Process
  id: totrans-285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在模板中恢复任何发生的异常，以免影响主生产流程。
- en: Having short and simple logic to avoid increasing the Item’s Total Work Time
    by too much
  id: totrans-286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用简短且简单的逻辑来避免过多增加项目的总工作时间。
- en: Let’s see how we can implement this through an example.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过一个例子来看看如何实现这一点。
- en: Example 4 – new ML model evaluation Process template
  id: totrans-288
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例 4 – 新的 ML 模型评估流程模板
- en: 'In this example, we’ll go through an already-developed Process template and
    explain how it works. We’ll also discuss the steps needed to incorporate the template
    into an existing IA Process. Our example contains three high-level steps:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将通过一个已经开发的流程模板，并解释它是如何工作的。我们还将讨论将模板纳入现有 IA 流程所需的步骤。我们的例子包含三个高级步骤：
- en: Verify the Release contents.
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证发布内容。
- en: Understand the template logic.
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 理解模板逻辑。
- en: Understand how to integrate it into an existing IA Process.
  id: totrans-292
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 理解如何将其集成到现有的 IA 流程中。
- en: Verify the Release contents
  id: totrans-293
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 验证发布内容
- en: 'The Release should have been imported in the *Technical requirements* section.
    Verify that *one* Process, *one* Work Queue, and *two* Environment Variables have
    been imported:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 发布内容应在 *技术要求* 部分中导入。验证是否已导入 *一个* 流程、*一个* 工作队列和 *两个* 环境变量：
- en: '![Figure 6.30 – The Release file contents](img/B18416_06_30.jpg)'
  id: totrans-295
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.30 – 发布文件内容](img/B18416_06_30.jpg)'
- en: Figure 6.30 – The Release file contents
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.30 – 发布文件内容
- en: The `Ch6 Example 4 Enable Model Evaluation` Environment Variable determines
    whether this template is active or not. The `Ch6 Example 4 Evaluation Model ID`
    Environment Variable is a self-defined ID for the ML model that we want to test.
    This is to help us keep track of which model we’re testing in production. Next,
    let’s open the Process and understand the template contents.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: '`Ch6 Example 4 Enable Model Evaluation` 环境变量确定此模板是否激活。`Ch6 Example 4 Evaluation
    Model ID` 环境变量是我们想要测试的 ML 模型的自定义 ID。这是为了帮助我们跟踪在生产中正在测试哪个模型。接下来，让我们打开流程并了解模板内容。'
- en: Understand the template logic
  id: totrans-298
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The Process template logic is simple, with only two Pages. There’s a placeholder
    Page where you’re expected to provide the logic that makes the ML prediction.
    Complete the following steps:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
- en: Open **Example 4 – New Model Evaluation Process Template** in the *Ch6* Group
    in the Process Studio.
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Double-click on the `Main Page`. See that we’re supposed to pass in two Collections.
    The `Input Data` Collection stores the prediction Input Data required by the ML
    model that we want to evaluate. The `Original Prediction Result` Collection (optional)
    can be passed in if we want to log the result of the actual production prediction
    alongside the prediction of the model that’s being evaluated. This makes it easier
    to compare the two results:'
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.31 – The Input parameters of the Start Stage](img/B18416_06_31.jpg)'
  id: totrans-302
  prefs: []
  type: TYPE_IMG
- en: Figure 6.31 – The Input parameters of the Start Stage
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
- en: Look at the *Enable Model Evaluation?* Decision Stage that’s connected to `Ch6
    Example 4 Enable Model Evaluation` Environment Variable to see whether to use
    this template or not.
  id: totrans-304
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Look at the `Input Data` into a new Queue (specified by `Queue Name`), and
    immediately lock that Item for Processing using `Queue Name` should be different
    from the calling Process’s Work Queue:'
  id: totrans-305
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.32 – Add an item into a new queue](img/B18416_06_32.jpg)'
  id: totrans-306
  prefs: []
  type: TYPE_IMG
- en: Figure 6.32 – Add an item into a new queue
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
- en: The reason for creating an Item in a new queue is to make it easy to find the
    evaluation prediction for individual Items from the Control Room.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
- en: Look at the `Ch6 Example 4 Evaluation Model ID` Environment Variable. This provides
    a way for you to version or identify what model is being evaluated. This will
    be logged in the Session Logs for reference.
  id: totrans-309
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Look at the **Recover1** Stage. Exception handling is added to ensure that exceptions
    aren’t bubbled up to the calling Process.
  id: totrans-310
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the `Call Prediction` Page. This Page is mostly a placeholder for you
    to insert the actual Stages needed to make predictions using the evaluation ML
    model. The prediction output must be added into the **Output Data** Collection
    for writing into the Session Logs. When adding your logic, make sure to only turn
    on Stage Logging for the Stages that you want to record the start and end times
    of:'
  id: totrans-311
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.33 – The Call Prediction Page](img/B18416_06_33.jpg)'
  id: totrans-312
  prefs: []
  type: TYPE_IMG
- en: Figure 6.33 – The Call Prediction Page
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
- en: 'Look at the `Log New Model Evaluation Results` Multi Calc Stage. This logs
    all of the information that’s relevant to data scientists so that it’s easy to
    retrieve in a single Session Log entry: `Ch6 Example 4 Evaluation Model ID`, `Input
    Data`, `Original Prediction Result`, and `Output Data`.'
  id: totrans-314
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Integration with an existing Process
  id: totrans-315
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now that we’ve seen the template’s logic, we’ll discuss what steps are needed
    to implement it into an existing IA Process:'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
- en: Open the template in the Process Studio and use **Save As** to create a new
    Process.
  id: totrans-317
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new Work Queue under `Main Page` to match it. The **Key Name** field
    of the Work Queue should be set based on the input data of the ML call, or it
    can be left blank.
  id: totrans-318
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`主页面`下创建一个新的工作队列以匹配它。工作队列的**键名**字段应根据ML调用的输入数据设置，或者可以留空。
- en: Create two new Environment Variables to replace `Ch6 Example 4 Evaluation Model
    ID` and `Ch6 Example 4 Enable Model Evaluation`. Set their values and replace
    the two Environment Variables on the `Main Page` with the newly created ones.
    This also results in needing to change the *Enable Model Evaluation?* Decision
    Stage on the `Main Page`, and the *Log New Model Evaluation Results* Calculation
    Stage on the `Call` `Prediction` Page.
  id: totrans-319
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建两个新的环境变量来替换`Ch6 Example 4 评估模型ID`和`Ch6 Example 4 启用模型评估`。设置它们的值，并将`主页面`上的两个环境变量替换为新创建的变量。这也导致需要更改`主页面`上的*启用模型评估？*决策阶段，以及`调用``预测`页面上的*记录新模型评估结果*计算阶段。
- en: Open the `Call Prediction` Page. Insert the logic to make the evaluation ML
    model prediction using data from the `Input Data` Collection. The prediction output
    should be formatted into the `Output` `Data` Collection.
  id: totrans-320
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`调用预测`页面。插入逻辑以使用`输入数据`集合中的数据对评估ML模型进行预测。预测输出应格式化为`输出``数据`集合。
- en: Enable Stage Logging on the specific action or web API that makes the ML prediction.
    Otherwise, set the logging of the Stages that have been added to *Errors only*.
  id: totrans-321
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在特定操作或Web API上启用阶段日志记录以进行ML预测。否则，将已添加的阶段日志设置为仅记录*错误*。
- en: Save the template.
  id: totrans-322
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存模板。
- en: In the existing IA Process, add a *Process* Stage after the live prediction
    results have been obtained. Configure this to use the Process template that was
    just saved. On the `Input Data` needed by the evaluation model to make its prediction,
    and optionally, `Original Prediction Result` if you’d like to log it alongside
    the evaluation model.
  id: totrans-323
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在现有的IA流程中，在获得实时预测结果后添加一个*流程*阶段。配置此阶段使用刚刚保存的流程模板。在评估模型进行预测所需的`输入数据`上，以及可选的，如果您想将其与评估模型一起记录，则`原始预测结果`。
- en: With this component, we can make live predictions against an evaluation ML model
    with very few changes to an existing IA Process. The only modification to the
    original Process that’s needed is to call the sub-Process.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此组件，我们可以在对现有IA流程进行很少的更改的情况下，对评估ML模型进行实时预测。对原始流程的唯一修改是调用子流程。
- en: Accessing the results of these evaluation predictions is simplified since all
    of the Session Logging occurs in a single Stage. Session Logs can be exported
    and filtered by the name of the *Multi Calc* Stage. This gives data scientists
    all the information that they need to further evaluate their model, including
    the model ID, the input data, the production prediction result, and the evaluation
    prediction result.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 由于所有会话日志记录都在单个阶段中发生，因此访问这些评估预测的结果变得简单。可以按*多计算*阶段的名称导出和过滤会话日志。这为数据科学家提供了他们进一步评估模型所需的所有信息，包括模型ID、输入数据、生产预测结果和评估预测结果。
- en: Reusable IA components review
  id: totrans-326
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可重用IA组件审查
- en: 'We’ve covered four different reusable components that can be used across many
    different IA Processes. A summary of the purpose of each component and what BP
    features were used to create them is shown in the following table:'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经介绍了四个不同的可重用组件，这些组件可以在许多不同的IA流程中使用。以下表格显示了每个组件的目的以及创建它们所使用的BP功能摘要：
- en: '| **Name** | **Major BP** **features used** | **Purpose** |'
  id: totrans-328
  prefs: []
  type: TYPE_TB
  zh: '| **姓名** | **使用的BP主要功能** | **目的** |'
- en: '| IA Session control | Session Variables and Decision Stages | Session-based
    control of whether:Items must forcibly undergo HITL review.Review checking is
    disabled.Shared data used for reviews should be recreated. |'
  id: totrans-329
  prefs: []
  type: TYPE_TB
  zh: '| IA会话控制 | 会话变量和决策阶段 | 基于会话控制是否：项目必须强制进行HITL审查。审查检查被禁用。用于审查的共享数据应重新创建。|'
- en: '| ML prediction kill switch | Credential (marked as invalid), Decision Stage,
    and Exception handling | Allow for ML predictions to be prevented across all current
    and future Sessions that use a particular model |'
  id: totrans-330
  prefs: []
  type: TYPE_TB
  zh: '| ML预测终止开关 | 凭证（标记为无效）、决策阶段和异常处理 | 允许防止使用特定模型的所有当前和未来的会话进行ML预测 |'
- en: '| ML model versioning | Calculation Stage (with logging enabled) and Environment
    Variable | Create Session Logs that specify which ML model version was used to
    make a prediction, even if the API endpoint stays the same |'
  id: totrans-331
  prefs: []
  type: TYPE_TB
  zh: '| ML模型版本控制 | 计算阶段（启用日志记录）和环境变量 | 创建指定使用哪个ML模型版本进行预测的会话日志，即使API端点保持不变 |'
- en: '| New ML model evaluation | Work Queue, Environment Variables, Exception handling,
    and Multi Calc Stage (for logging) | Run an evaluation ML model alongside the
    primary ML model in a way that makes the extraction of prediction results simple
    |'
  id: totrans-332
  prefs: []
  type: TYPE_TB
  zh: '| 新机器学习模型评估 | 工作队列、环境变量、异常处理和多计算阶段（用于日志记录） | 以一种使预测结果提取简单的方式进行，在主机器学习模型旁边运行一个评估机器学习模型
    |'
- en: Table 6.3 – A summary of the four reusable IA components
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 表6.3 – 四个可重用IA组件的总结
- en: Summary
  id: totrans-334
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we developed four reusable IA components that provide additional
    functionality that’s specifically relevant to ML operations. These components
    can be easily integrated into existing IA Processes.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们开发了四个可重用的IA组件，它们提供了与机器学习操作特别相关的附加功能。这些组件可以轻松集成到现有的IA流程中。
- en: Our first component was a set of three Session Variables. These Session Variables
    allow Control Room operators to exercise more control over HITL prediction validation
    according to real-time needs.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的第一个组件是一组三个会话变量。这些会话变量允许控制室操作员根据实时需求对HITL预测验证行使更多的控制权。
- en: Next, we discussed a kill switch, which can be used easily to disable and re-enable
    ML prediction across all present and future Sessions. This can be used if there
    is an urgent need to stop all ML predictions used in IA by a certain model.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们讨论了一个可以轻松使用的“关闭开关”，它可以用来在整个现有和未来的会话中禁用和重新启用机器学习预测。如果需要紧急停止某个模型在IA中使用的所有机器学习预测，这可以派上用场。
- en: The third component, ML model versioning, addresses a problem caused by imperfect
    audit logging (as of version 7.1.2) in BP. Updating a URL in Web API Services
    doesn’t show the specific URLs that have been changed in Audit Logs. This means
    that we don’t know exactly which API URL or version has been used to make a prediction,
    even if we look at both the Session Logs and Audit Logs. This third component
    rectifies this issue through the manual versioning of ML models. This allows us
    to know which version of a model was used by viewing only the Session Logs.
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 第三个组件，机器学习模型版本控制，解决了BP中不完善的审计日志（截至版本7.1.2）引起的问题。在Web API服务中更新URL不会显示在审计日志中更改的具体URL。这意味着即使我们查看会话日志和审计日志，我们也不知道确切使用了哪个API
    URL或版本来进行预测。这个第三个组件通过手动版本控制机器学习模型来解决这个问题。这使我们能够通过仅查看会话日志来了解模型使用了哪个版本。
- en: Finally, our fourth component was a Process template that can be used to extend
    existing IA Processes. This component allows us to run an additional ML prediction
    alongside the production one for evaluation purposes against live data.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们的第四个组件是一个可以用来扩展现有IA流程的流程模板。这个组件允许我们在生产机器学习预测的同时运行额外的机器学习预测，以便对实时数据进行评估。
- en: The concept of creating reusable templates is extremely important to both RPA
    and IA development. It allows for standardization, simpler maintenance, and faster
    development time. In the next chapter, we’ll combine all that has been covered,
    starting from [*Chapter 1*](B18416_01.xhtml#_idTextAnchor015) until now, into
    standardized, reusable IA Process and Object templates. These can be used to kickstart
    an IA solution design and serve as a base for creating IA templates in your organization.
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 创建可重用模板的概念对于RPA和IA开发都极其重要。它允许标准化、简化维护和加快开发时间。在下一章中，我们将从[*第一章*](B18416_01.xhtml#_idTextAnchor015)开始，结合所有已涵盖的内容，形成一个标准化的、可重用的IA流程和对象模板。这些模板可以用来启动IA解决方案设计，并作为在您的组织中创建IA模板的基础。
