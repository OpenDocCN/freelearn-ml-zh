["```py\nimport scipy\nround(scipy.stats.norm.cdf(1),4)\n# 0.8413\n```", "```py\nimport pandas as pd\nimport numpy as np\nimport scipy.stats as stats\nIQ = np.array([90, 78,110, 110, 99, 115,130, 100, 95, 93])\nz_score = stats.zscore(IQ)\n# Create dataframe\ndata_zscore = {\n  \"IQ score\": IQ,\n  \"z-score\": z_score\n}\nIQ_zscore = pd.DataFrame(data_zscore)\nIQ_zscore\n```", "```py\n#calculate z scores at x=95 and 104\nzscore_95 = round((95-98)/12,2)\nzscore_104 = round((104-98)/12,2)\n#calculate cdf and probability\ncdf_95 = stats.norm.cdf(zscore_95)\ncdf_104 = stats.norm.cdf(zscore_104)\nprob = abs(cdf_95-cdf_104)\n#print the probability\nprint(f\"The probability that the taken score between 95 and 104 is {round(prob*100,2)}%!\")\n```", "```py\nimport pandas as pd\nimport numpy as np\nimport scipy.stats as stats\nimport math\n# standard error\nn= 4\nsigma = 12\nse = sigma/math.sqrt(n)\n#calculate z scores at x=95 and 104\nzscore_95 = round((95-98)/se,2)\nzscore_104 = round((104-98)/se,2)\n#calculate cdf and probability\ncdf_95 = stats.norm.cdf(zscore_95)\ncdf_104 = stats.norm.cdf(zscore_104)\nprob = abs(cdf_95-cdf_104)\n#print the probability\nprint(f\"The probability that the taken score between 95 and 104 is {round(prob*100,2)}%!\")\n```", "```py\n scipy.stats.norm.sf(abs(x))\n```", "```py\nimport scipy.stats\n#find p-value\nround(scipy.stats.norm.sf(abs(-2.67)),4)\n```", "```py\n#find p-value for two-tailed test\nscipy.stats.norm.sf(abs(2.67))*2\n```", "```py\nscipy.stats.norm.ppf(alpha)\n```", "```py\nimport scipy.stats\nalpha = 0.05 # level of significance\n#find Z critical value for left-tailed test\nprint(f\" The critical value is {scipy.stats.norm.ppf(alpha)}\")\n#find Z critical value for left-tailed test\nprint(f\" The critical value is {scipy.stats.norm.ppf(1-alpha)}\")\n##find Z critical value for two-tailed test\nprint(f\" The critical values are {-scipy.stats.norm.ppf(1-alpha/2)} and {scipy.stats.norm.ppf(1-alpha/2)}\")\n```", "```py\nIQscores = [95,110, 105, 120, 125, 110, 98, 90, 99, 100,\n            110, 112, 106, 92, 108, 97, 95, 99, 100, 100,\n            103, 125, 122, 110, 112, 102, 92, 97, 89, 102]\nIQmean = np.array(IQscores).mean()\n```", "```py\nn=30 #number of students\nsigma =12 #population standard deviation\nIQmean = 104.17 # IQ mean of 30 students after the training\nmu = 98 # population mean\nz = (IQmean-mu)/(sigma/math.sqrt(n))\n```", "```py\nstatsmodels.stats.weightstats.ztest(x1, x2=None,\n    value=0, alternative='two-sided')\n```", "```py\nfrom statsmodels.stats.weightstats import ztest as ztest\n#IQ scores after training sections\nIQscores = [95,110, 105, 120, 125, 110, 98, 90, 99, 100,\n            110, 112, 106, 92, 108, 97, 95, 99, 100, 100,\n            103, 125, 122, 110, 112, 102, 92, 97, 89, 102]\n#perform one sample z-test\nz_statistic, p_value = ztest(IQscores, value=98, alternative = 'larger')\nprint(f\"The test statistic is {z_statistic} and the\n    corresponding p-value is {p_value}.\")\n```", "```py\nfrom statsmodels.stats.weightstats import ztest as ztest\n#IQ score\nA= [95,110, 105, 120, 125, 110, 98, 90, 99, 100,\n    110, 112, 106, 92, 108, 97, 95, 99, 100, 100,\n    103, 125, 122, 110, 112, 102, 92, 97, 89,102] #school A\nB = [98, 90, 100, 93, 91, 79, 90, 100, 121, 89,\n     101, 98, 75, 90, 95, 99, 100, 120, 121, 95,\n     96, 89, 115, 99, 95, 121, 122, 98, 97, 97]  # school B\n#perform two- sample z-test\nz_statistic, p_value = ztest(A, B, value=0, alternative = 'two-sided')\nprint(f\"The test statistic is {z_statistic} and the corresponding p-value is {p_value}.\")\n```", "```py\nstatsmodels.stats.proportion.proportions_ztest(count,\n    nobs, value=None, alternative='two-sided')\n```", "```py\n#import proportions_ztest function\nfrom statsmodels.stats.proportion import proportions_ztest\ncount = 0.8*500\nnobs = 500\nvalue = 0.84\n#perform one proportion two-tailed z-test\nz_statistic, p_value = proportions_ztest(count, nobs,\n    value, alternative = 'two-sided')\nprint(f\"The test statistic is {z_statistic} and the\n    corresponding p-value is {p_value}.\")\n```", "```py\nscipy.stats.norm.sf(abs(z))*2\n```", "```py\nimport math\nimport scipy\np_1bar = 0.8\np_2bar = 0.7\nn1 = 100.0\nn2 = 100.0\np= (p_1bar*n1 + p_2bar*n2)/(n1+n2)   # the total pooled proportion\nz = (p_1bar-p_2bar)/math.sqrt(p*(1-p)*(1/n1+1/n2))\npval = scipy.stats.norm.sf(abs(z))*2\nprint(f\"The test statistic is {z} and the p-value for two tailed test is {pval}.\")\n```", "```py\nimport statsmodels.api as sm\nimport math\ndf_prof = sm.datasets.get_rdataset(\"Salaries\", \"carData\").data\ndf_prof_A = df_prof.loc[df_prof['discipline'] == 'A']\ndf_prof_B = df_prof.loc[df_prof['discipline'] == 'B']\ndef pooled_standard_deviation(dataset1, dataset2, column) -> float:\n    pooledSD = math.sqrt(((len(dataset1) - 1)*(dataset1[column].std()**2)+(len(dataset2) - 1)*(dataset2[column].std()**2))/(len(dataset1) + len(dataset2) - 2))\n    return pooledSD;\nstdDeviation = pooled_standard_deviation(\n    dataset1 = df_prof_A, dataset2=df_prof_B,\n    column='salary')\nfrom statsmodels.stats.power import NormalIndPower\neffect = abs(df_prof_B['salary'].mean() –\n    df_prof_A['salary'].mean() ) / stdDeviation\n# The difference between two means divided by std if pooled 2-sample\nalpha = 0.05\npower = 0.8\nratio=1.19 # # of obs in sample 2 relative to sample 1\nanalysis = NormalIndPower()\nresult = analysis.solve_power(effect, power=power, nobs1=None, ratio=ratio, alpha=alpha, alternative='two-sided')\nprint('Sample Size Required in Sample 1: {:.3f}'.format(\n    result*ratio)) # nobs1 is the sample size.\nprint('Sample Size Required in Sample 2: {:.3f}'.format(\n    result)) # nobs2 is the sample size.\n```", "```py\nSample Size Required in Sample 1: 171.620\nSample Size Required in Sample 2: 144.218\neffect = abs(df_prof_B['salary'].mean() –\n    df_prof_A['salary'].mean() ) / stdDeviation\nalpha = 0.01\npower = 0.9\nratio=1.19 # # of obs in sample 2 relative to sample 1\nanalysis = NormalIndPower()\nresult = analysis.solve_power(effect, power=power,\n    nobs1=None, ratio=ratio, alpha=alpha,\n    alternative='two-sided')\nprint('Sample Size Required in Sample 1: {:.3f}'.format(\n    result*ratio)) # nobs1 is the sample size.\nprint('Sample Size Required in Sample 2: {:.3f}'.format(\n    result)) # nobs2 is the sample size.\n```"]