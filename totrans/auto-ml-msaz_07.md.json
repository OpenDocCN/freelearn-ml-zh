["```py\n    from azureml.core import Workspace, Dataset, Datastore\n    from azureml.core import Experiment\n    from azureml.core.compute import ComputeTarget\n    from azureml.train.automl import AutoMLConfig\n    from azureml.train.automl.run import AutoMLRun\n    from azureml.widgets import RunDetails\n    ```", "```py\n    import pandas as pd\n    import numpy as np\n    ```", "```py\n    ws = Workspace.from_config()\n    ```", "```py\n    compute_name = 'compute-cluster'\n    compute_target = ComputeTarget(ws, compute_name)\n    ```", "```py\n    datastore = Datastore.get_default(ws)\n    my_datastore_name = 'workspaceblobstore'\n    my_datastore = Datastore.get(ws, my_datastore_name)\n    ```", "```py\n    dataset_name = \"Titanic Training Data\"\n    dataset = Dataset.get_by_name(ws, dataset_name, version='latest')\n    ```", "```py\n    dataset.take(10).to_pandas_dataframe()\n    ```", "```py\n    dfRaw = dataset.to_pandas_dataframe()\n    round(dfRaw.groupby(['Sex'])['Age'].mean())\n    ```", "```py\n    dfRaw['Age'] = dfRaw.apply(\n       lambda row: 31 if np.isnan(row['Age'])\\\n        and row['Sex']=='male'\\\n        else (28 if np.isnan(row['Age'])\\\n              and row['Sex']=='female'\\\n        else row['Age']),axis=1)\n    ```", "```py\n    dfRaw['BinUnder15'] = np.where(dfRaw.Age < 15,1,0)\n    dfRaw['Bin15to34'] = np.where((dfRaw.Age>14)\\\n                                & (dfRaw.Age < 35),1,0)\n    dfRaw['Bin35to60'] = np.where((dfRaw.Age>34)\\\n                                & (dfRaw.Age < 61),1,0)\n    dfRaw['BinOver60'] = np.where(dfRaw.Age > 60,1,0)\n    ```", "```py\n    df = dfRaw.drop(['Age'],axis=1)\n    ```", "```py\n    Dataset.Tabular.register_pandas_dataframe(df, datastore,\n                                \"Titanic Transformed\")\n    ```", "```py\n    experiment_name = 'Titanic-Transformed-Classification'\n    exp = Experiment(workspace=ws, name=experiment_name) \n    ```", "```py\n    dataset_name = \"Titanic Transformed\"\n    dataset = Dataset.get_by_name(ws, dataset_name, version='latest')\n    ```", "```py\n    target_column = 'Survived'\n    ```", "```py\n    task = 'classification'\n    ```", "```py\n    primary_metric = 'accuracy'\n    ```", "```py\n    featurization = 'auto'\n    ```", "```py\n    num_classes = df[target_column].nunique()  \n    ```", "```py\n    config = AutoMLConfig(task=task,\n                         primary_metric=primary_metric,\n                         num_classes=num_classes,\n                         featurization=featurization,\n                         compute_target=compute_target,\n                         training_data=dataset,\n                         label_column_name=target_column,\n                         experiment_timeout_minutes=15,\n                         enable_early_stopping=True,\n                         n_cross_validations=5,\n                         model_explainability=True,\n                         enable_stack_ensemble=True,\n                         enable_voting_ensemble=True)\n    ```", "```py\n    AutoML_run = exp.submit(config, show_output = True)\n    RunDetails(remote_run).show()\n    ```", "```py\n    description = 'Best AutoML Classification Run using Transformed Titanic Data.' \n    tags = {'project' : \"Titanic\", \"creator\" : \"your name\"} \n    model_name = 'Titanic-Transformed-Classification-AutoML' \n    ```", "```py\n    AutoML_run.register_model(model_name=model_name, \\\n    description=description, tags=tags)\n    ```", "```py\n    from azureml.core import Workspace, Dataset, Datastore\n    from azureml.core import Experiment\n    from azureml.core.compute import ComputeTarget\n    from azureml.train.automl import AutoMLConfig\n    from azureml.train.automl.run import AutoMLRun\n    from azureml.widgets import RunDetails\n    ```", "```py\n    Import pandas as pd\n    import numpy as np\n    ```", "```py\n    ws = Workspace.from_config()\n    ```", "```py\n    compute_name = 'compute-cluster'\n    compute_target = ComputeTarget(ws, compute_name)\n    ```", "```py\n    datastore = Datastore.get_default(ws)\n    my_datastore_name = 'workspaceblobstore'\n    my_datastore = Datastore.get(ws, my_datastore_name)\n    ```", "```py\n    dataset_name = \"Iris Training\"\n    dataset = Dataset.get_by_name(ws, dataset_name, version='latest')\n    ```", "```py\n    dataset.take(10).to_pandas_dataframe()\n    ```", "```py\n    dataset.to_pandas_dataframe().species.unique()\n    ```", "```py\n    experiment_name = 'Iris-Multi-Classification'\n    exp = Experiment(workspace=ws, name=experiment_name) \n    ```", "```py\n    target_column = 'species'\n    ```", "```py\n    task = 'classification'\n    ```", "```py\n    primary metric = 'accuracy'\n    ```", "```py\n    featurization = 'auto'\n    ```", "```py\n    num_classes = 3  \n    ```", "```py\n    config = AutoMLConfig(task=task,\n                         primary_metric=primary_metric,\n                         num_classes=num_classes,\n                         featurization=featurization,\n                         compute_target=compute_target,\n                         training_data=dataset,\n                         label_column_name=target_column,\n                         experiment_timeout_minutes=15,\n                         enable_early_stopping=True,\n                         n_cross_validations=10,\n                         model_explainability=True,\n                         enable_stack_ensemble=True,\n                         enable_voting_ensemble=True)\n    ```", "```py\n    AutoML_run = exp.submit(config, show_output = True)\n    RunDetails(remote_run).show()\n    ```", "```py\n    description = 'AutoML Multiclass Run using Iris Data.' \n    tags = {'project' : \"Iris\", \"creator\" : \"your name\"} \n    model_name = 'Iris-Multi-Classification-AutoML' \n    AutoML_run.register_model(model_name=model_name,description=\\\n    description,tags=tags)\n    ```"]