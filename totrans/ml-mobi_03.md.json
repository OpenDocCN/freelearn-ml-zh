["```py\npip install pandas\npip install -U scikit-learn\npip install -U pandas\n```", "```py\npip install -U coremltools\n```", "```py\n# importing required packages\n import numpy as np\n```", "```py\nimport pandas as pd\n from pandas.core import series\n```", "```py\nfrom sklearn.ensemble import RandomForestClassifier\n\nfrom sklearn.metrics import accuracy_score\nimport sklearn.datasets as dsimport sklearn.datasets as ds\n```", "```py\ndataset = ds.load_breast_cancer()\n```", "```py\n cancerdata = pd.DataFrame(dataset.data)\n```", "```py\n cancerdata.columns = dataset.feature_names\n```", "```py\nfor i in range(0,len(dataset.feature_names)):\nif ['mean concave points', 'mean area', 'mean radius', 'mean perimeter', 'mean concavity'].\\\n__contains__(dataset.feature_names[i]):\ncontinue\nelse:\ncancerdata = cancerdata.drop(dataset.feature_names[i], axis=1)\n```", "```py\ncancerdata.to_csv(\"myfile.csv\")\n```", "```py\n cancer_types = dataset.target_names\n```", "```py\ncancer_names = []\n//getting all the corresponding cancer types with name [string] format.\nfor i in range(len(dataset.target)):\ncancer_names.append(cancer_types[dataset.target[i]])\nx_train, x_test, y_train, y_test = sklearn.model_selection.train_test_split(cancerdata,cancer_names,test_size=0.3, random_state=5)\n```", "```py\n classifier = RandomForestClassifier()\n```", "```py\nclassifier.fit(x_train, y_train)\n```", "```py\n//testing the model with test data\nprint(classifier.predict(x_test))\n```", "```py\n//converting the fitted model to a Core ML Model file\n\nmodel = coremltools.converters.sklearn.convert(classifier, input_features=list(cancerdata.columns.values), output_feature_names='typeofcancer')\n\nmodel.save(\"cancermodel.mlmodel\")\n```", "```py\nimport coremltools\n```", "```py\nimport UIKit\nimport Core ML \nclass ViewController: UIViewController {\n    let model = cancermodel()\n    @IBOutlet weak var meanradius: UITextField!\n    @IBOutlet weak var cancertype: UILabel!\n    @IBOutlet weak var meanperimeter: UITextField!\n    @IBOutlet weak var meanarea: UITextField!\n    @IBOutlet weak var meanconcavity: UITextField!\n    @IBOutlet weak var meanconcavepoints: UITextField!\n    override func didReceiveMemoryWarning() {\n        super.didReceiveMemoryWarning()\n        // Dispose of any resources that can be recreated.\n    }\n    override func viewDidLoad() {\n        super.viewDidLoad();\n        updated(meanconcavepoints);\n        //This line is to fire the initial update of the cancer type.\n    }\n    /*\nThis method will send the input data to your generated model class and display the returned result to the label.\n*/\n\n    @IBAction func updated(_ sender: Any) {\n        guard let modeloutput = try? model.prediction(mean_radius: \n        Double(meanradius.text!)!, mean_perimeter: \n        Double(meanperimeter.text!)!, mean_area: Double(meanarea.text!)!, \n        mean_concavity: Double(meanconcavity.text!)!, mean_concave_points: \n        Double(meanconcavepoints.text!)!) else {\n            fatalError(\"unexpected runtime error\")\n        }\n        cancertype.text = modeloutput.typeofcancer;\n    }\n}\n```"]