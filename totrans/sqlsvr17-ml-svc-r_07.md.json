["```py\nbcp <database name>.dbo.nyctaxi_sample in <file path> -c -t, -T -S<server name>\n```", "```py\nbcp NYCTaxi.dbo.nyctaxi_sample in c:\\nyctaxi_sample.csv -c -t, -T -SMsSQLGirl\n```", "```py\nCREATE TABLE [dbo].[nyctaxi_sample]( \n   [medallion] [varchar](50) NOT NULL, \n   [hack_license] [varchar](50) NOT NULL, \n   [vendor_id] [char](3) NULL, \n   [rate_code] [char](3) NULL, \n   [store_and_fwd_flag] [char](3) NULL, \n   [pickup_datetime] [datetime] NOT NULL, \n   [dropoff_datetime] [datetime] NULL, \n   [passenger_count] [int] NULL, \n   [trip_time_in_secs] [bigint] NULL, \n   [trip_distance] [float] NULL, \n   [pickup_longitude] [varchar](30) NULL, \n   [pickup_latitude] [varchar](30) NULL, \n   [dropoff_longitude] [varchar](30) NULL, \n   [dropoff_latitude] [varchar](30) NULL, \n   [payment_type] [char](3) NULL, \n   [fare_amount] [float] NULL, \n   [surcharge] [float] NULL, \n   [mta_tax] [float] NULL, \n   [tolls_amount] [float] NULL, \n   [total_amount] [float] NULL, \n   [tip_amount] [float] NULL, \n   [tipped] [int] NULL, \n   [tip_class] [int] NULL \n) ON [PRIMARY] \nGO \n```", "```py\nCREATE FUNCTION [dbo].[fnCalculateDistance]  \n(@Lat1 FLOAT, @Long1 FLOAT, @Lat2 FLOAT, @Long2 FLOAT) \n-- User-defined function calculate the direct distance  \n-- between two geographical coordinates. \nRETURNS FLOAT \nAS \nBEGIN \n  DECLARE @distance DECIMAL(28, 10) \n  -- Convert to radians \n  SET @Lat1 = @Lat1 / 57.2958 \n  SET @Long1 = @Long1 / 57.2958 \n  SET @Lat2 = @Lat2 / 57.2958 \n  SET @Long2 = @Long2 / 57.2958 \n  -- Calculate distance \n  SET @distance = (SIN(@Lat1) * SIN(@Lat2)) + (COS(@Lat1) * COS(@Lat2) * COS(@Long2 - @Long1)) \n  --Convert to miles \n  IF @distance <> 0 \n  BEGIN \n    SET @distance = 3958.75 * ATAN(SQRT(1 - POWER(@distance, 2)) / @distance); \n  END \n  RETURN @distance \nEND \n```", "```py\nCREATE TABLE [dbo].[NYCTaxiModel]( \n   [Model] VARBINARY(MAX) NOT NULL, \n   [AUC] FLOAT NULL, \n   [CreatedOn] DATETIME NOT NULL \n         CONSTRAINT DF_NYCTaxiModel_CreatedOn DEFAULT (GETDATE()), \n   [IsRealTimeScoring] BIT NOT NULL  \n         CONSTRAINT DF_NYCTaxiModel_IsRealTimeScoring DEFAULT (0) \n) ON [PRIMARY]  \n```", "```py\nCREATE PROCEDURE [dbo].[uspTrainTipPredictionModel] \nAS \nBEGIN \n   DECLARE @auc FLOAT; \n   DECLARE @model VARBINARY(MAX); \n\n   -- The data to be used for training \n   DECLARE @inquery NVARCHAR(MAX) = N' \n         SELECT  \n               tipped,  \n               fare_amount,  \n               passenger_count, \n               trip_time_in_secs, \n               trip_distance, \n               pickup_datetime,  \n               dropoff_datetime, \n               dbo.fnCalculateDistance(pickup_latitude,  \n                     pickup_longitude,   \n                     dropoff_latitude,  \n                     dropoff_longitude) as direct_distance \n         FROM dbo.nyctaxi_sample \n         TABLESAMPLE (10 PERCENT) REPEATABLE (98052)' \n\n  -- Calculate the model based on the trained data and the AUC. \n  EXEC sp_execute_external_script @language = N'R', \n                                  @script = N' \n         ## Create model \n         logitObj <- rxLogit(tipped ~ passenger_count +  \n                           trip_distance +  \n                           trip_time_in_secs +  \n                           direct_distance,  \n                           data = InputDataSet); \n         summary(logitObj) \n\n         ## Serialize model             \n         model <- serialize(logitObj, NULL); \n         predOutput <- rxPredict(modelObject = logitObj,  \n                     data = InputDataSet, outData = NULL,  \n                     predVarNames = \"Score\", type = \"response\",  \n                     writeModelVars = FALSE, overwrite = TRUE); \n\n         library(''ROCR''); \n         predOutput <- cbind(InputDataSet, predOutput); \n\n         auc <- rxAuc(rxRoc(\"tipped\", \"Score\", predOutput)); \n         print(paste0(\"AUC of Logistic Regression Model:\", auc)); \n         ', \n     @input_data_1 = @inquery,      \n     @output_data_1_name = N'trained_model', \n     @params = N'@auc FLOAT OUTPUT, @model VARBINARY(MAX) OUTPUT', \n     @auc = @auc OUTPUT, \n     @model = @model OUTPUT; \n\n  -- Store the train model output and its AUC  \n  INSERT INTO [dbo].[NYCTaxiModel] (Model, AUC) \n  SELECT @model, @auc; \n\nEND \nGO \n```", "```py\nEXEC [dbo].[uspTrainTipPredictionModel] \n```", "```py\nSELECT [Model], [AUC], [CreatedOn], [IsRealTimeScoring] \nFROM [dbo].[NYCTaxiModel] \n```", "```py\nCREATE PROCEDURE [dbo].[uspPredictTipSingleMode]  \n   @passenger_count int = 0, \n   @trip_distance float = 0, \n   @trip_time_in_secs int = 0, \n   @pickup_latitude float = 0, \n   @pickup_longitude float = 0, \n   @dropoff_latitude float = 0, \n   @dropoff_longitude float = 0 \nAS \nBEGIN \n\n  DECLARE @inquery nvarchar(max) = N' \n   SELECT  \n         @passenger_count as passenger_count, \n         @trip_distance as trip_distance, \n         @trip_time_in_secs as trip_time_in_secs, \n         [dbo].[fnCalculateDistance] ( \n               @pickup_latitude, \n               @pickup_longitude, \n               @dropoff_latitude, \n               @dropoff_longitude) as direct_distance'; \n\n  DECLARE @lmodel2 varbinary(max); \n\n  -- Get the latest non-real-time scoring model \n  SET @lmodel2 = (SELECT TOP 1 \n               [Model] \n               FROM [dbo].[NYCTaxiModel] \n               WHERE IsRealTimeScoring = 0 \n               ORDER BY [CreatedOn] DESC); \n\n  EXEC sp_execute_external_script @language = N'R', \n   @script = N' \n         mod <- unserialize(as.raw(model)); \n         print(summary(mod)) \n         OutputDataSet<-rxPredict(modelObject = mod,  \ndata = InputDataSet,  \n                           outData = NULL, predVarNames = \"Score\",  \n                           type = \"response\",  \nwriteModelVars = FALSE,  \noverwrite = TRUE); \n               str(OutputDataSet) \n               print(OutputDataSet)', \n         @input_data_1 = @inquery, \n         @params = N'@model varbinary(max), \n@passenger_count int, \n@trip_distance float, \n                           @trip_time_in_secs INT , \n                           @pickup_latitude FLOAT , \n                           @pickup_longitude FLOAT , \n                           @dropoff_latitude FLOAT , \n                           @dropoff_longitude FLOAT',\n```", "```py\n @model = @lmodel2, \n         @passenger_count =@passenger_count , \n         @trip_distance=@trip_distance, \n         @trip_time_in_secs=@trip_time_in_secs, \n         @pickup_latitude=@pickup_latitude, \n         @pickup_longitude=@pickup_longitude, \n         @dropoff_latitude=@dropoff_latitude, \n         @dropoff_longitude=@dropoff_longitude \n  WITH RESULT SETS ((Score FLOAT)); \n\nEND \nGO \n```", "```py\nEXEC [dbo].[uspPredictTipSingleMode]  \n    @passenger_count = 2 \n   ,@trip_distance   = 10 \n   ,@trip_time_in_secs     = 1950 \n   ,@pickup_latitude = 47.643272 \n   ,@pickup_longitude      = -122.127235 \n   ,@dropoff_latitude      = 47.620529 \n   ,@dropoff_longitude     = -122.349297 \n```", "```py\nScore \n---------------------- \n0.640058591034195 \n```", "```py\nEXEC dbo.sp_rxPredict @model, \n@inputData = @query; \n```", "```py\nSELECT  d.Input1, d.Input2, p.Output_Pred \nFROM PREDICT( MODEL = @model,  DATA = d)  \n     WITH (Output_Pred FLOAT) p; \n```", "```py\nCREATE PROCEDURE [dbo].[uspTrainTipPredictionModelWithRealTimeScoring] \nAS \nBEGIN \n   DECLARE @auc FLOAT; \n   DECLARE @model VARBINARY(MAX); \n\n   -- The data to be used for training \n   DECLARE @inquery NVARCHAR(MAX) = N' \n         SELECT  \n               tipped,  \n               fare_amount,  \n               passenger_count, \n               trip_time_in_secs, \n               trip_distance, \n               pickup_datetime,  \n               dropoff_datetime, \n               dbo.fnCalculateDistance(pickup_latitude,  \n                     pickup_longitude,   \n                     dropoff_latitude,  \n                     dropoff_longitude) as direct_distance \n         FROM dbo.nyctaxi_sample \n         TABLESAMPLE (10 PERCENT) REPEATABLE (98052)' \n\n  -- Calculate the model based on the trained data and the AUC. \n  EXEC sp_execute_external_script @language = N'R', \n                                   @script = N' \n         ## Create model \n         logitObj <- rxLogit(tipped ~ passenger_count +  \n                           trip_distance +  \n                           trip_time_in_secs +  \n                           direct_distance,  \n                           data = InputDataSet); \n         summary(logitObj) \n\n         ## Serialize model             \n         ## model <- serialize(logitObj, NULL); \n         model <- rxSerializeModel(logitObj,  \nrealtimeScoringOnly = TRUE); \n         predOutput <- rxPredict(modelObject = logitObj,  \n                     data = InputDataSet, outData = NULL,  \n                     predVarNames = \"Score\", type = \"response\",  \n                     writeModelVars = FALSE, overwrite = TRUE); \n\n         library(''ROCR''); \n         predOutput <- cbind(InputDataSet, predOutput); \n\n         auc <- rxAuc(rxRoc(\"tipped\", \"Score\", predOutput)); \n         print(paste0(\"AUC of Logistic Regression Model:\", auc)); \n         ', \n     @input_data_1 = @inquery,      \n     @output_data_1_name = N'trained_model', \n     @params = N'@auc FLOAT OUTPUT, @model VARBINARY(MAX) OUTPUT', \n     @auc = @auc OUTPUT, \n     @model = @model OUTPUT; \n\n  -- Store the train model output and its AUC  \n  INSERT INTO [dbo].[NYCTaxiModel] (Model, AUC, IsRealTimeScoring) \n  SELECT @model, @auc, 1; \n\nEND \nGO \n```", "```py\nDECLARE @logit_model VARBINARY(MAX) =  \n   (SELECT TOP 1 [Model]  \n   FROM [dbo].[NYCTaxiModel] \n   WHERE [IsRealTimeScoring] = 1 \n   ORDER BY [CreatedOn] DESC); \n\nEXEC dbo.sp_rxPredict @model = @logit_model, \n@inputData = N'SELECT \n                     2 AS passenger_count,  \n                     10 AS trip_distance,  \n                     1950 AS trip_time_in_secs,  \n                     dbo.fnCalculateDistance(47.643272,  \n                           -122.127235,   \n                           47.620529,  \n                           -122.349297) AS direct_distance'; \n```", "```py\ntipped_Pred\n----------------------\n0.640058591034195\n\n(1 row affected)\n\n```", "```py\nDECLARE @logit_model VARBINARY(MAX) =  \n   (SELECT TOP 1 [Model]  \n   FROM [dbo].[NYCTaxiModel] \n   WHERE [IsRealTimeScoring] = 1 \n   ORDER BY [CreatedOn] DESC); \n\nWITH d AS ( \n   SELECT      2 AS passenger_count,  \n               10 AS trip_distance,  \n               1950 AS trip_time_in_secs,  \n               dbo.fnCalculateDistance(47.643272,  \n                     -122.127235,   \n                     47.620529,  \n                     -122.349297) AS direct_distance) \nSELECT  * \nFROM PREDICT( MODEL = @logit_model, DATA = d)  \nWITH (tipped_Pred FLOAT) p; \n```", "```py\ntipped_Pred passenger_count trip_distance trip_time_in_secs direct_distance\n----------- --------------- ------------- ----------------- ---------------\n0.640058591 2               10            1950              10.4581575644\n\n(1 row affected)\n\n```", "```py\n-- Create a new role  \nCREATE ROLE TutorialDBRUser AUTHORIZATION dbo \nGO \n\n-- Assign the role to a new member JulieGuest2 so that the login \n-- can connect to the database Tutorial DB. \nALTER ROLE TutorialDBRUser ADD MEMBER JulieGuest2 \nGO \n\n-- Allow members of TutorialDBRUser to read and write.  \nALTER ROLE db_datareader ADD MEMBER TutorialDBRUser \nGO \n\nALTER ROLE db_datareader ADD MEMBER TutorialDBRUser \nGO \n\n-- Allow members of TutorialDBRUser to run external script \nGRANT EXECUTE ANY EXTERNAL SCRIPT TO [TutorialDBRUser] \nGO \n\n-- Allow members of TutorialDBRUser to run a specific  \n-- stored procedure. \nGRANT EXECUTE ON [dbo].[predict_rentals] TO [TutorialDBRUser] \nGO \n```", "```py\nGRANT ALTER ANY EXTERNAL LIBRARY TO [TutorialDBRUser] \nGO \n```", "```py\nCREATE EXTERNAL LIBRARY ggplot2pkg  \nFROM  \n  (CONTENT = 'C:\\Program Files\\Microsoft SQL Server\\MSSQL14.MSSQLSERVER\\ggplot2.zip')  \nWITH (LANGUAGE = 'R'); \n```", "```py\nSELECT *  \nFROM sys.dm_os_performance_counters  \nWHERE object_name LIKE '%External Scripts%' \n```", "```py\nSELECT  \n   [external_script_request_id]  \n  , [language] \n  , [degree_of_parallelism] \n  , [external_user_name] \nFROM sys.dm_external_script_requests; \n```", "```py\n$SqlConnection = New-Object System.Data.SqlClient.SqlConnection\n$SqlConnection.ConnectionString = \"Server=.;Database=Taxi;Integrated Security=True\"\n$SqlCmd = New-Object System.Data.SqlClient.SqlCommand\n$SqlCmd.CommandText = \"EXEC [dbo].[uspPredictTipSingleMode] \n @passenger_count    = 2\n ,@trip_distance   = 10\n ,@trip_time_in_secs     = 35\n ,@pickup_latitude = 47.643272\n ,@pickup_longitude      = -122.127235\n ,@dropoff_latitude      = 47.620529\n ,@dropoff_longitude     = -122.349297\n \"\n$SqlCmd.Connection = $SqlConnection\n$SqlAdapter = New-Object System.Data.SqlClient.SqlDataAdapter\n$SqlAdapter.SelectCommand = $SqlCmd\n$DataSet = New-Object System.Data.DataSet\n$SqlAdapter.Fill($DataSet)\n$SqlConnection.Close()\n$DataSet.Tables[0] \n\n```"]