- en: Chapter 6. What's Next?
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章。接下来是什么？
- en: You have done a lot so far. Starting from basic math operations to complex filters
    and object tracking, we reviewed the most popular and most multifunctional libraries
    on Computer Vision, which are available in the JavaScript world. There are a lot
    of topics in Computer Vision and image processing, which we did not touch in this
    book. Here, we will try to provide an idea where you can go next.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经做了很多。从基本的数学运算到复杂的滤波器和物体跟踪，我们回顾了JavaScript世界中可用的一些最受欢迎和多功能性最强的计算机视觉库。计算机视觉和图像处理中有许多主题我们没有在本书中涉及。在这里，我们将尝试提供一个想法，告诉你下一步可以走向何方。
- en: First, we will summarize the topics in Computer Vision, which you have already
    learned. Then, we will discuss why it is so important to use JavaScript in some
    cases.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将总结你已经学过的计算机视觉主题。然后，我们将讨论在某些情况下为什么使用JavaScript如此重要。
- en: Next, we will introduce several JavaScript libraries, which were not covered
    in the previous chapters. Many of them provide improvements in algorithms and
    extend applications of Computer Vision in the Web.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将介绍几个在前几章中没有涉及到的JavaScript库。许多库在算法上提供了改进，并扩展了计算机视觉在Web上的应用。
- en: 'We will cover the following topics in this chapter:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Understanding the importance of client-side scripting
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解客户端脚本的重要性
- en: Overview of some other interesting libraries in Computer Vision
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 计算机视觉中一些其他有趣库的概述
- en: Refresh your memory
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 刷新你的记忆
- en: 'In this book, we have applied different image processing and Computer Vision
    techniques to images and videos. Starting from fundamental math operations, we
    saw how basic math can be used for different applications and how it is important
    to know mathematics to understand the basics of image processing. Those operations
    were extended to provide a clear means of image filtering. The main concept here
    was the image convolution when a transformation was applied for each image pixel.
    Then, we followed the path of object detection. We even created our own object
    detector! The face detection and tracking algorithms showed us that these types
    of methods can be applied to create a human interface. We saw an example of this
    in the previous chapter (cube rotation with a head). One of the most exciting
    methods is optical flow, with the help of which you can easily track objects and
    create complex programs that are controlled by gestures. Let''s have a small exercise.
    In the following image, you can see that we applied different Computer Vision
    and image processing methods on an image:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在这本书中，我们将不同的图像处理和计算机视觉技术应用于图像和视频。从基本的数学运算开始，我们看到了如何将基本的数学应用于不同的应用，以及了解数学对于理解图像处理基础知识的重要性。这些操作被扩展以提供清晰的图像滤波方法。这里的主要概念是在对每个图像像素应用变换时的图像卷积。然后，我们沿着物体检测的路径前进。我们甚至创建了自己的物体检测器！人脸检测和跟踪算法表明，这些类型的方法可以应用于创建人机界面。我们在上一章中看到了一个例子（头部旋转的立方体）。最令人兴奋的方法之一是光流，借助它可以轻松跟踪物体并创建由手势控制的复杂程序。让我们做一个小的练习。在下面的图像中，你可以看到我们对图像应用了不同的计算机视觉和图像处理方法：
- en: '![Refresh your memory](img/image00138.jpeg)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![刷新你的记忆](img/image00138.jpeg)'
- en: The original image is in color, you can find it in the provided image bundle.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 原始图像是彩色的，你可以在提供的图像包中找到它。
- en: The preceding image is divided into eight parts, and we have applied different
    algorithms on them. The first part is the original part of an image. The second
    is the converted into grayscale. Try to guess other ones, we have learnt all of
    them during the course of the book. If you want to check yourself, look at the
    answer at the end of this section.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的图像被分成了八个部分，我们在它们上应用了不同的算法。第一部分是图像的原始部分。第二部分是转换为灰度的。试着猜猜其他部分，我们在本书的学习过程中都学过它们。如果你想检查自己，请查看本节末尾的答案。
- en: Importance of client-side scripting
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 客户端脚本的重要性
- en: So, why do we use JavaScript? We have already addressed this in the preface.
    Now, you can probably answer it by yourself.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，为什么我们使用JavaScript呢？我们已经在前言中讨论过这个问题了。现在，你可能可以自己回答这个问题了。
- en: When it comes to practical Computer Vision, many people mention the OpenCV library
    ([http://opencv.org](http://opencv.org)). Yes, it does provide the outstanding
    functionality for people who do not know much about Computer Vision. Unfortunately,
    it is written in C++ and does not provide an interface for JavaScript. And if
    it does, a user needs to install the OpenCV package on their computer, which is
    not good for the end user, as they would want to use your websites without installing
    anything.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 当谈到实用的计算机视觉时，许多人会提到OpenCV库（[http://opencv.org](http://opencv.org)）。是的，它确实为对计算机视觉知之甚少的人提供了出色的功能。不幸的是，它是用C++编写的，并且不提供JavaScript的接口。即使它提供了，用户也需要在他们的电脑上安装OpenCV包，这对最终用户来说并不好，因为他们希望在不安装任何东西的情况下使用你的网站。
- en: If you just install the backend library on your side and do the whole computation
    on your servers, then you will need a ton of clusters to support your website.
    Even a small portion of Computer Vision algorithms can slow down computer performance
    significantly. This is probably why you will prefer to use the client-side scripting.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你只是在你的一侧安装后端库并在你的服务器上完成整个计算，那么你需要大量的集群来支持你的网站。即使是计算机视觉算法的一小部分也可能显著降低计算机性能。这可能是你更愿意使用客户端脚本的原因。
- en: 'It is now time for JavaScript to show its full potential. Using it, we kill
    two birds with one stone. Note that:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候让JavaScript展示其全部潜力了。使用它，我们一石二鸟。请注意：
- en: There is no need anymore for a user to install anything but a browser (which
    is usually already installed) on their computer
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户现在不再需要在他们的电脑上安装任何东西，除了浏览器（这通常已经安装）。
- en: JavaScript runs directly on the end user machine, so you do not need to use
    expensive equipment.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JavaScript直接在最终用户机器上运行，因此你不需要使用昂贵的设备。
- en: There are already many Computer Vision algorithms implemented in JavaScript.
    Unfortunately, not as many as in OpenCV, for example. But you can already use
    the JavaScript libraries and even extend them! We think that you are prepared
    enough to extend current boundaries of Computer Vision in the JavaScript world.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 已经有很多计算机视觉算法是用JavaScript实现的。不幸的是，没有OpenCV中那么多。但你可以使用JavaScript库，甚至扩展它们！我们认为你已经准备好在JavaScript世界中扩展计算机视觉的当前边界了。
- en: 'Here are the answers for the image earlier in this section. The relevant chapter
    number is written in brackets after each answer. After the grayscale part of the
    image (1) the answers for image parts from left to right are: histogram equalization
    (2), blur (Gaussian Blur) (2), Sobel Filter (2), Canny Edge detection (2), feature
    extraction (FAST features) (3), and finally color object detection (3).'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是本节前面提到的图像的答案。每个答案后面都写有相关的章节编号。在图像的灰度部分（1）之后，从左到右的图像部分答案是：直方图均衡化（2）、模糊（高斯模糊）（2）、Sobel滤波器（2）、Canny边缘检测（2）、特征提取（FAST特征）（3），最后是颜色目标检测（3）。
- en: Other interesting libraries in Computer Vision
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 计算机视觉中的其他有趣库
- en: We already saw a lot of Computer Vision JavaScript libraries, but there are
    many of them which we did not discuss in the book. Some of those libraries are
    focused on face and face particle detection, others are a bit more general and
    implement several object detection techniques.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了很多计算机视觉JavaScript库，但书中没有讨论的还有很多。其中一些库专注于人脸和面部粒子检测，其他的一些则更为通用，实现了多种目标检测技术。
- en: CCV library and its extensions
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CCV库及其扩展
- en: 'Face detection is probably the most popular task in web applications. One of
    the original libraries, which provide face detection is the CCV library ([https://github.com/liuliu/ccv](https://github.com/liuliu/ccv)).
    The main part of the library consists of C functions, but there are JavaScript
    parts that are responsible for the face detection. There are a lot of libraries
    which base their face detection on it, for example:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 人脸检测可能是网络应用中最受欢迎的任务之一。提供人脸检测的一个原始库是CCV库（[https://github.com/liuliu/ccv](https://github.com/liuliu/ccv)）。库的主要部分由C函数组成，但也有一些负责人脸检测的JavaScript部分。有很多库基于它来实现人脸检测，例如：
- en: '[http://facedetection.jaysalvat.com](http://facedetection.jaysalvat.com): This
    is the jQuery library with an easy-to-follow installation guide and API.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://facedetection.jaysalvat.com](http://facedetection.jaysalvat.com)：这是一个带有易于遵循的安装指南和API的jQuery库。'
- en: '[https://github.com/wesbos/HTML5-Face-Detection](https://github.com/wesbos/HTML5-Face-Detection):
    This library is very easy to use; it detects a face using only the `App.start()`
    command.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/wesbos/HTML5-Face-Detection](https://github.com/wesbos/HTML5-Face-Detection)：这个库非常易于使用；它仅使用`App.start()`命令即可检测面部。'
- en: Face detection and more
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 面部检测及其他
- en: There are libraries that tend to provide face detection extensions. Some of
    them use libraries that are already discussed in this book, for example, the JSFeat
    library ([http://inspirit.github.io/jsfeat/](http://inspirit.github.io/jsfeat/)).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 有些库倾向于提供面部检测扩展。其中一些使用本书中已经讨论过的库，例如，JSFeat库 ([http://inspirit.github.io/jsfeat/](http://inspirit.github.io/jsfeat/))。
- en: We start from the Camgaze library ([https://github.com/wallarelvo/camgaze.js](https://github.com/wallarelvo/camgaze.js)).
    Its primary focus is eyes detection and gaze prediction.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从Camgaze库 ([https://github.com/wallarelvo/camgaze.js](https://github.com/wallarelvo/camgaze.js))
    开始。它的主要重点是眼睛检测和注视预测。
- en: 'Another wonderful library is CLMtrackr ([https://github.com/auduno/clmtrackr](https://github.com/auduno/clmtrackr)).
    It is an exceptional library for fitting facial models to a face on a video or
    an image. To understand this better, look at the following image:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个出色的库是CLMtrackr ([https://github.com/auduno/clmtrackr](https://github.com/auduno/clmtrackr))。它是一个将面部模型拟合到视频或图像中的面部上的卓越库。为了更好地理解这一点，请查看以下图像：
- en: '![Face detection and more](img/image00139.jpeg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![面部检测及其他](img/image00139.jpeg)'
- en: The library tries to fit the facial model point-by-point. With the help of this
    model, you can precisely track a face or recognize emotions. The author provides
    a couple of examples where you can perform these tasks. In addition to this, there
    are examples of face deformation and face masking. For a basic explanation of
    how this is done, you can follow an excellent overview of that library, which
    is available at [http://auduno.com/post/61888277175/fitting-faces](http://auduno.com/post/61888277175/fitting-faces).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 该库试图将面部模型点对点地拟合。借助这个模型，你可以精确地追踪面部或识别情绪。作者提供了一些示例，你可以执行这些任务。此外，还有面部变形和面部遮罩的示例。对于如何进行基本解释，你可以参考该库的优秀概述，该概述可在[http://auduno.com/post/61888277175/fitting-faces](http://auduno.com/post/61888277175/fitting-faces)找到。
- en: Object detection with js-objectdetect
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用js-objectdetect进行目标检测
- en: We will introduce one more library here. It is js-objectdetect ([https://github.com/mtschirs/js-objectdetect](https://github.com/mtschirs/js-objectdetect)),
    which is an excellent library. You may ask, why is that? It provides a lot of
    trained Haar classifiers, so you can play with them a bit more. In addition to
    face, eye, and mouth detectors, it contains classifiers for smile, body (full
    and upper), hands (open and fist), nose, and profile face.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里将介绍另一个库。它是js-objectdetect ([https://github.com/mtschirs/js-objectdetect](https://github.com/mtschirs/js-objectdetect))，这是一个非常出色的库。你可能会问，为什么这么说呢？它提供了大量的训练好的Haar分类器，因此你可以对它们进行更多的探索。除了面部、眼睛和嘴巴检测器外，它还包含微笑、身体（全身和上半身）、手（张开和拳头）、鼻子和侧面面部分类器。
- en: Not all classifiers in the library have the same performance, many of them are
    sensitive for lighting conditions and noise. But they are totally worth a try!
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 并非库中的所有分类器性能都相同，其中许多对光照条件和噪声很敏感。但它们绝对值得一试！
- en: Summary
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: We have completed the book. Congratulations! It was an exciting journey for
    all of us. In this closing chapter, we reviewed methods that we covered in the
    book, and we saw when it is appropriate to use JavaScript in web projects. Moreover,
    we prepared you a way for other amazing JavaScript libraries. You can start to
    build your own projects right now!
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经完成了这本书。恭喜！这对我们所有人来说都是一次激动人心的旅程。在本章的结尾，我们回顾了书中介绍的方法，并看到了何时在Web项目中使用JavaScript是合适的。此外，我们还为你准备了一些其他令人惊叹的JavaScript库。你现在就可以开始构建自己的项目了！
- en: Certainly, by now, you have much more experience in the Computer Vision realm.
    You have built skills to apply very complex Computer Vision and image processing
    algorithms in your web applications. The Computer Vision world is wide and it
    always brings something new.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，到目前为止，你在计算机视觉领域已经积累了更多的经验。你已经掌握了在Web应用程序中应用非常复杂的计算机视觉和图像处理算法的技能。计算机视觉的世界很广阔，它总是带来新的东西。
