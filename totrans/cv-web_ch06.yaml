- en: Chapter 6. What's Next?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You have done a lot so far. Starting from basic math operations to complex filters
    and object tracking, we reviewed the most popular and most multifunctional libraries
    on Computer Vision, which are available in the JavaScript world. There are a lot
    of topics in Computer Vision and image processing, which we did not touch in this
    book. Here, we will try to provide an idea where you can go next.
  prefs: []
  type: TYPE_NORMAL
- en: First, we will summarize the topics in Computer Vision, which you have already
    learned. Then, we will discuss why it is so important to use JavaScript in some
    cases.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will introduce several JavaScript libraries, which were not covered
    in the previous chapters. Many of them provide improvements in algorithms and
    extend applications of Computer Vision in the Web.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the importance of client-side scripting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Overview of some other interesting libraries in Computer Vision
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Refresh your memory
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this book, we have applied different image processing and Computer Vision
    techniques to images and videos. Starting from fundamental math operations, we
    saw how basic math can be used for different applications and how it is important
    to know mathematics to understand the basics of image processing. Those operations
    were extended to provide a clear means of image filtering. The main concept here
    was the image convolution when a transformation was applied for each image pixel.
    Then, we followed the path of object detection. We even created our own object
    detector! The face detection and tracking algorithms showed us that these types
    of methods can be applied to create a human interface. We saw an example of this
    in the previous chapter (cube rotation with a head). One of the most exciting
    methods is optical flow, with the help of which you can easily track objects and
    create complex programs that are controlled by gestures. Let''s have a small exercise.
    In the following image, you can see that we applied different Computer Vision
    and image processing methods on an image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Refresh your memory](img/image00138.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The original image is in color, you can find it in the provided image bundle.
  prefs: []
  type: TYPE_NORMAL
- en: The preceding image is divided into eight parts, and we have applied different
    algorithms on them. The first part is the original part of an image. The second
    is the converted into grayscale. Try to guess other ones, we have learnt all of
    them during the course of the book. If you want to check yourself, look at the
    answer at the end of this section.
  prefs: []
  type: TYPE_NORMAL
- en: Importance of client-side scripting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So, why do we use JavaScript? We have already addressed this in the preface.
    Now, you can probably answer it by yourself.
  prefs: []
  type: TYPE_NORMAL
- en: When it comes to practical Computer Vision, many people mention the OpenCV library
    ([http://opencv.org](http://opencv.org)). Yes, it does provide the outstanding
    functionality for people who do not know much about Computer Vision. Unfortunately,
    it is written in C++ and does not provide an interface for JavaScript. And if
    it does, a user needs to install the OpenCV package on their computer, which is
    not good for the end user, as they would want to use your websites without installing
    anything.
  prefs: []
  type: TYPE_NORMAL
- en: If you just install the backend library on your side and do the whole computation
    on your servers, then you will need a ton of clusters to support your website.
    Even a small portion of Computer Vision algorithms can slow down computer performance
    significantly. This is probably why you will prefer to use the client-side scripting.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is now time for JavaScript to show its full potential. Using it, we kill
    two birds with one stone. Note that:'
  prefs: []
  type: TYPE_NORMAL
- en: There is no need anymore for a user to install anything but a browser (which
    is usually already installed) on their computer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JavaScript runs directly on the end user machine, so you do not need to use
    expensive equipment.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are already many Computer Vision algorithms implemented in JavaScript.
    Unfortunately, not as many as in OpenCV, for example. But you can already use
    the JavaScript libraries and even extend them! We think that you are prepared
    enough to extend current boundaries of Computer Vision in the JavaScript world.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the answers for the image earlier in this section. The relevant chapter
    number is written in brackets after each answer. After the grayscale part of the
    image (1) the answers for image parts from left to right are: histogram equalization
    (2), blur (Gaussian Blur) (2), Sobel Filter (2), Canny Edge detection (2), feature
    extraction (FAST features) (3), and finally color object detection (3).'
  prefs: []
  type: TYPE_NORMAL
- en: Other interesting libraries in Computer Vision
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We already saw a lot of Computer Vision JavaScript libraries, but there are
    many of them which we did not discuss in the book. Some of those libraries are
    focused on face and face particle detection, others are a bit more general and
    implement several object detection techniques.
  prefs: []
  type: TYPE_NORMAL
- en: CCV library and its extensions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Face detection is probably the most popular task in web applications. One of
    the original libraries, which provide face detection is the CCV library ([https://github.com/liuliu/ccv](https://github.com/liuliu/ccv)).
    The main part of the library consists of C functions, but there are JavaScript
    parts that are responsible for the face detection. There are a lot of libraries
    which base their face detection on it, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://facedetection.jaysalvat.com](http://facedetection.jaysalvat.com): This
    is the jQuery library with an easy-to-follow installation guide and API.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/wesbos/HTML5-Face-Detection](https://github.com/wesbos/HTML5-Face-Detection):
    This library is very easy to use; it detects a face using only the `App.start()`
    command.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Face detection and more
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are libraries that tend to provide face detection extensions. Some of
    them use libraries that are already discussed in this book, for example, the JSFeat
    library ([http://inspirit.github.io/jsfeat/](http://inspirit.github.io/jsfeat/)).
  prefs: []
  type: TYPE_NORMAL
- en: We start from the Camgaze library ([https://github.com/wallarelvo/camgaze.js](https://github.com/wallarelvo/camgaze.js)).
    Its primary focus is eyes detection and gaze prediction.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another wonderful library is CLMtrackr ([https://github.com/auduno/clmtrackr](https://github.com/auduno/clmtrackr)).
    It is an exceptional library for fitting facial models to a face on a video or
    an image. To understand this better, look at the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Face detection and more](img/image00139.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The library tries to fit the facial model point-by-point. With the help of this
    model, you can precisely track a face or recognize emotions. The author provides
    a couple of examples where you can perform these tasks. In addition to this, there
    are examples of face deformation and face masking. For a basic explanation of
    how this is done, you can follow an excellent overview of that library, which
    is available at [http://auduno.com/post/61888277175/fitting-faces](http://auduno.com/post/61888277175/fitting-faces).
  prefs: []
  type: TYPE_NORMAL
- en: Object detection with js-objectdetect
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will introduce one more library here. It is js-objectdetect ([https://github.com/mtschirs/js-objectdetect](https://github.com/mtschirs/js-objectdetect)),
    which is an excellent library. You may ask, why is that? It provides a lot of
    trained Haar classifiers, so you can play with them a bit more. In addition to
    face, eye, and mouth detectors, it contains classifiers for smile, body (full
    and upper), hands (open and fist), nose, and profile face.
  prefs: []
  type: TYPE_NORMAL
- en: Not all classifiers in the library have the same performance, many of them are
    sensitive for lighting conditions and noise. But they are totally worth a try!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have completed the book. Congratulations! It was an exciting journey for
    all of us. In this closing chapter, we reviewed methods that we covered in the
    book, and we saw when it is appropriate to use JavaScript in web projects. Moreover,
    we prepared you a way for other amazing JavaScript libraries. You can start to
    build your own projects right now!
  prefs: []
  type: TYPE_NORMAL
- en: Certainly, by now, you have much more experience in the Computer Vision realm.
    You have built skills to apply very complex Computer Vision and image processing
    algorithms in your web applications. The Computer Vision world is wide and it
    always brings something new.
  prefs: []
  type: TYPE_NORMAL
