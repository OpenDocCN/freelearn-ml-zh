["```py\n    import h2o\n    import shutil\n    from h2o.automl import H2OautoML\n    ```", "```py\n    h2o.init()\n    ```", "```py\n    wine_quality_dataframe = h2o.import_file(path = \"sec/main/resources/winequality_combined.csv\")\n    ```", "```py\n    wine_quality_dataframe[\"color\"] = wine_quality_dataframe[\"color\"].asfactor()\n    ```", "```py\n    train, valid = wine_quality_dataframe.split_frame(ratios=[.7])\n    ```", "```py\n    label = \"color\"\n    features = [\"fixed acidity\", \"volatile acidity\", \"citric acid\", \"residual sugar\", \"chlorides\", \"free sulfur dioxide\", \"total sulfur dioxide\", \"density\", \"pH\", \"sulphates\", \"alcohol\"]\n    ```", "```py\n    aml_for_color_predictor = H2OAutoML(max_models=10, seed=123, exclude_algos=[\"StackedEnsemble\"], max_runtime_secs=300)\n    aml_for_color_predictor.train(x = features, y = label, training_frame=train, validation_frame = valid)\n    ```", "```py\n    model = aml_for_color_predictor.leader\n    model.model_id = \"WineColorPredictor\"\n    print(model)\n    model.download_pojo(path=\"tmp\")\n    ```", "```py\n    label=\"quality\"\n    aml_for_quality_predictor = H2OAutoML(max_models=10, seed=123, exclude_algos=[\"StackedEnsemble\"], max_runtime_secs=300)\n    aml_for_quality_predictor.train(x = features, y = label, training_frame=train, validation_frame = valid)\n    ```", "```py\n    model = aml_for_color_predictor.leader\n    model.model_id = \"WineQualityPredictor\"\n    print(model)\n    model.download_pojo(path=\"tmp\")\n    ```", "```py\n    with open(\"tmp/WineColorPredictor.java\", \"r\") as raw_model_POJO:\n         with open(\"src/main/java/com.h2o_wine_predictor.demo/model/ WineColorPredictor.java\", \"w\") as model_POJO:\n               model_POJO.write(f'package com.h2o_wine_predictor.demo;\\n' + raw_model_POJO.read())\n    ```", "```py\n    with open(\"tmp/WineQualityPredictor.java\", \"r\") as raw_model_POJO:\n         with open(\"src/main/java/com.h2o_wine_predictor.demo/model/ WineQualityPredictor.java\", \"w\") as model_POJO:\n               model_POJO.write(f'package com.h2o_wine_predictor.demo;\\n' + raw_model_POJO.read())\n    ```", "```py\n    shutil.rmtree(\"tmp\")\n    ```", "```py\npython3 script.py\n```", "```py\n    mvn spring-boot:run -e\n    ```", "```py\ncurl -X POST localhost:8082/api/v1/predict -H \"Content-Type: application/json\" -d '{\"fixed acidity\":6.8,\"volatile acidity\":0.18,\"citric acid\":0.37,\"residual sugar\":1.6,\"chlorides\":0.055,\"free sulfur dioxide\":47,\"total sulfur dioxide\":154,\"density\":0.9934,\"pH\":3.08,\" ,\"sulphates\":0.45,\"alcohol\":9.1}'\n```", "```py\ngit clone https://github.com/apache/storm.git\n```", "```py\nmvn clean install -DskipTests=true\n```", "```py\n    import h2o\n    from h2o.automl import H2OautoML\n    ```", "```py\n    h2o.init()\n    ```", "```py\n    wine_quality_dataframe = h2o.import_file(path = \"training_data.csv\")\n    ```", "```py\n    label = \"complications\"\n    features = [\"age\", \"anemia\", \"creatinine_phosphokinase\", \"diabetes\", \"ejection_fraction\", \"high_blood_pressure\", \"platelets\", \"serum_creatinine \", \"serum_sodium\", \"sex\", \"smoking\", \"time\"]\n    ```", "```py\n    aml_for_complications = H2OAutoML(max_models=10, seed=123, exclude_algos=[\"StackedEnsemble\"], max_runtime_secs=300)\n    aml_for_complications.train(x = features, y = label, training_frame = wine_quality_dataframe )\n    ```", "```py\n    model = aml_for_color_predictor.leader\n    model.model_id = \"HeartFailureComplications\"\n    print(model)\n    model.download_pojo(path=\"tmp\")\n    ```", "```py\npython3 script.py\n```", "```py\n    Util.sleep(1000)\n    ```", "```py\nFile file = new File(\"live_data.csv\")\n```", "```py\nString[] observation = null;\n```", "```py\ntry {\n      String line=\"\";\n      BufferedReader br = new BufferedReader(new FileReader(file));\n      while (i++<=_cnt.get()) line = br.readLine(); // stream thru to next line\n      observation = line.split(\",\");\n    } catch (Exception e) {\n      e.printStackTrace();\n      _cnt.set(0);\n    }\n```", "```py\n_cnt.getAndIncrement();\nif (_cnt.get() == 1000) _cnt.set(0);\n```", "```py\n_collector.emit(new Values(observation));\n```", "```py\n    LinkedList<String> fields_list = new LinkedList<String>(Arrays.asList(ComplicationPredictorModel.NAMES));\n    fields_list.add(0,\"complication\");\n    String[] fields = fields_list.toArray(new String[fields_list.size()]);\n    declarer.declare(new Fields(fields));\n    ```", "```py\n    HeartFailureComplications h2oModel = new HeartFailureComplications();\n    ```", "```py\nArrayList<String> stringData = new ArrayList<String>();\nfor (Object tuple_value : tuple.getValues()) stringData.add((String) tuple_value);\nString[] rawData = stringData.toArray(new String[stringData.size()]);\n```", "```py\ndouble data[] = new double[rawData.length-1]; \nString[] columnName = tuple.getFields().toList().toArray(new String[tuple.size()]);\nfor (int I = 1; i < rawData.length; ++i) {\n   data[i-1] = h2oModel.getDomainValues(columnName[i]) == null\n             ? Double.valueOf(rawData[i])\n            : h2oModel.mapEnum(h2oModel.getColIdx(columnName[i]), rawData[i]);\n}\n```", "```py\ndouble[] predictions = new double [h2oModel.nclasses()+1];\nh2oModel.score0(data, predictions);\n_collector.emit(tuple, new Values(rawData[0], predictions[1]));\n```", "```py\n_collector.ack(tuple);\n```", "```py\n        _collector.emit(tuple, new Values(expected, complicationProb <= _threshold ? \"No Complication\" : \"Possible Complication\"));\n        _collector.ack(tuple);\n        ```", "```py\n    TopologyBuilder builder = new TopologyBuilder();\n    ```", "```py\nbuilder.setSpout(\"inputDataRow\", new H2ODataSpout(), 10);\nbuilder.setBolt(\"scoreProbabilities\", new PredictionBolt(), 3).shuffleGrouping(\"inputDataRow\");\nbuilder.setBolt(\"classifyResults\", new ClassifierBolt(), 3).shuffleGrouping(\"scoreProbabilities\");\n```", "```py\nConfig conf = new Config();\n```", "```py\nLocalCluster cluster = new LocalCluster();\ncluster.submitTopology(\"HeartComplicationPredictor\", conf, builder.createTopology());\n```", "```py\nUtils.sleep(1000 * 60 * 60);\ncluster.killTopology(\"HeartComplicationPredictor\");\ncluster.shutdown();\n```", "```py\n    python3 script.py\n    ```", "```py\n    <dependency>\n        <groupId>ai.h2o</groupId>\n        <artifactId>h2o-genmodel</artifactId>\n        <version>3.36.1.3</version>\n    </dependency>\n    ```"]