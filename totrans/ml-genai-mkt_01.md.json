["```py\nconda create --name ai_marketing python=3.8\nconda activate ai_marketing \n```", "```py\n    conda install numpy pandas \n    ```", "```py\n    conda install matplotlib seaborn \n    ```", "```py\n    conda install scikit-learn \n    ```", "```py\n    conda install tensorflow keras \n    ```", "```py\n    conda install nltk spacy \n    ```", "```py\n    pip install transformers \n    ```", "```py\nconda install jupyterlab \n```", "```py\njupyter lab \n```", "```py\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport sklearn\nimport tensorflow as tf\nimport transformers\nprint(\"Environment setup successful!\") \n```", "```py\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.datasets import load_iris\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.tree import DecisionTreeClassifier, plot_tree\nfrom sklearn.metrics import precision_score, recall_score, f1_score \n```", "```py\niris = load_iris()\niris_df = pd.DataFrame(data=iris.data, columns=iris.feature_names)\niris_df['species'] = iris.target_names[iris.target]\niris_df.head() \n```", "```py\n    print(iris_df.info()) \n    ```", "```py\n    iris_df.hist(figsize=(12, 8), bins=20)\n    plt.subtitle('Feature Distribution')\n    plt.show() \n    ```", "```py\n    sns.scatterplot(x='sepal length (cm)', y='sepal width (cm)', hue='species', data=iris_df)\n    plt.title('Sepal Length vs. Sepal Width')\n    plt.show()\n    sns.scatterplot(x='petal length (cm)', y='petal width (cm)', hue='species', data=iris_df)\n    plt.title('Petal Length vs. Petal Width')\n    plt.show() \n    ```", "```py\nsns.pairplot(iris_df, hue='species')\nplt.show() \n```", "```py\n    X = iris_df[['sepal length (cm)', 'sepal width (cm)', 'petal length (cm)', 'petal width (cm)']]\n    y = iris_df['species'] \n    ```", "```py\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) \n    ```", "```py\n    scaler = StandardScaler()\n    X_train_scaled = scaler.fit_transform(X_train)\n    X_test_scaled = scaler.transform(X_test)\n    X_train_scaled_df = pd.DataFrame(X_train_scaled, columns=X_train.columns)\n    X_train_scaled_df.head() \n    ```", "```py\ndt_classifier = DecisionTreeClassifier(random_state=42)\ndt_classifier.fit(X_train, y_train) \n```", "```py\ny_pred = dt_classifier.predict(X_test)\nprint(\"First few predictions:\", y_pred[:5]) \n```", "```py\nFirst few predictions: ['versicolor' 'setosa' 'virginica' 'versicolor' 'versicolor'] \n```", "```py\nplt.figure(figsize=(20,10))\nplot_tree(dt_classifier, filled=True, feature_names=iris.feature_names, class_names=iris.target_names.tolist()) \n```", "```py\nprecision = precision_score(y_test, y_pred, average='macro')\nrecall = recall_score(y_test, y_pred, average='macro')\nf1 = f1_score(y_test, y_pred, average='macro')\nprint(f\"Precision: {precision:.2f}\")\nprint(f\"Recall: {recall:.2f}\")\nprint(f\"F1-Score: {f1:.2f}\") \n```", "```py\nPrecision: 1.00\nRecall: 1.00\nF1-Score: 1.00 \n```"]