["```py\nimport numpy as np\nimport glob\nimport matplotlib.pyplot as plt\nimport cv2\nfrom tqdm import tqdm_notebook\nimport tensorflow\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report, confusion_matrix\n%matplotlib inline\n```", "```py\ngood_bangle_paths = glob.glob(\"dataset/good/*.jpg\")\ndefected_bangle_paths = glob.glob(\"dataset/defect/*.jpg\")\nbroken_bangle_paths = glob.glob(\"dataset/broken/*.jpg\")\nprint(len(good_bangle_paths), len(defected_bangle_paths), \\\n    len(broken_bangle_paths))\n```", "```py\n520 244 316\n```", "```py\nplt.figure(figsize=(10, 10))\nfor ix, img_path in enumerate( \\\n    np.random.choice(good_bangle_paths, size=5)\n):\n    img = cv2.imread(img_path)\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n    plt.subplot(550 + 1 + ix)\n    plt.imshow(img)\n    plt.axis('off')\n    plt.title('Good Bangle!')\nplt.show()\nprint(\"-\"*101)\n```", "```py\nplt.figure(figsize=(10, 10))\nfor ix, img_path in enumerate( \\\n    np.random.choice(defected_bangle_paths, size=5)\n):\n    img = cv2.imread(img_path)\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n    plt.subplot(550 + 1 + ix)\n    plt.imshow(img)\n    plt.axis('off')\n    plt.title('Defected Bangle!')\nplt.show()\nprint(\"-\"*101)\n```", "```py\nplt.figure(figsize=(10, 10))\nfor ix, img_path in enumerate( \\\n    np.random.choice(broken_bangle_paths, size=5)\n):\n    img = cv2.imread(img_path)\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n    plt.subplot(550 + 1 + ix)\n    plt.imshow(img)\n    plt.axis('off')\n    plt.title('Broken Bangle!')\nplt.show()\n```", "```py\ngood_bangles = []\ndefected_bangles = []\nbroken_bangles = []\nfor img_path in tqdm_notebook(good_bangle_paths):\n    img = cv2.imread(img_path)\n    img = cv2.resize(img, (200, 200))\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n    good_bangles.append(img)\ngood_bangles = np.array(good_bangles)\ngood_bangles = np.expand_dims(good_bangles, axis=-1)\n```", "```py\nfor img_path in tqdm_notebook(defected_bangle_paths):\n    img = cv2.imread(img_path)\n    img = cv2.resize(img, (200, 200))\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n    defected_bangles.append(img)\ndefected_bangles = np.array(defected_bangles)\ndefected_bangles = np.expand_dims(defected_bangles, axis=-1)\n```", "```py\nfor img_path in tqdm_notebook(broken_bangle_paths):\n    img = cv2.imread(img_path)\n    img = cv2.resize(img, (200, 200))\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n    broken_bangles.append(img)\nbroken_bangles = np.array(broken_bangles)\nbroken_bangles = np.expand_dims(broken_bangles, axis=-1)\nprint(good_bangles.shape, defected_bangles.shape, \\\n    broken_bangles.shape)\n```", "```py\n(520, 200, 200, 1) (244, 200, 200, 1) (316, 200, 200, 1)\n```", "```py\ngood_bangles_train = good_bangles[:int( \\\n    len(good_bangles)*0.75),]\ngood_bangles_test = good_bangles[int( \\\n    len(good_bangles)*0.75):,]\ndefected_bangles_train = defected_bangles[:int( \\\n    len(defected_bangles)*0.75),]\ndefected_bangles_test = defected_bangles[int( \\\n    len(defected_bangles)*0.75):,]\nbroken_bangles_train = broken_bangles[:int( \\\n    len(broken_bangles)*0.75),]\nbroken_bangles_test = broken_bangles[int( \\\n    len(broken_bangles)*0.75):,]\nprint(good_bangles_train.shape, good_bangles_test.shape)\n```", "```py\n(390, 200, 200, 1) (130, 200, 200, 1)\n```", "```py\nall_train_images = np.concatenate((good_bangles_train, \\\n    defected_bangles_train, broken_bangles_train), axis=0)\nall_train_labels = np.concatenate((\n    np.array([0]*len(good_bangles_train)),\n    np.array([1]*len(defected_bangles_train)),\n    np.array([2]*len(broken_bangles_train))),\n    axis=0\n)\n```", "```py\nall_test_images = np.concatenate((good_bangles_test, \\\n    defected_bangles_test, broken_bangles_test), axis=0)\nall_test_labels = np.concatenate((\n    np.array([0]*len(good_bangles_test)),\n    np.array([1]*len(defected_bangles_test)),\n    np.array([2]*len(broken_bangles_test))),\n    axis=0\n)\nprint(all_train_images.shape, all_train_labels.shape)\nprint(all_test_images.shape, all_test_labels.shape)\n```", "```py\n(810, 200, 200, 1) (810,)\n(270, 200, 200, 1) (270,)\n```", "```py\ndef unison_shuffled_copies(a, b):\n    assert len(a) == len(b)\n    p = np.random.permutation(len(a))\n    return a[p], b[p]\nall_train_images, all_train_labels = unison_shuffled_copies( \\\n    all_train_images, all_train_labels)\nall_test_images, all_test_labels = unison_shuffled_copies( \\\n    all_test_images, all_test_labels)\n```", "```py\ndef convolution_block(data, filters, kernel, strides):\n    data = tensorflow.keras.layers.Conv2D(\n        filters=filters,\n        kernel_size=kernel,\n        strides=strides,\n    )(data)\n    data = tensorflow.keras.layers.BatchNormalization()(data)\n    data = tensorflow.keras.layers.Activation('relu')(data)\n    data = tensorflow.keras.layers.MaxPooling2D(strides=strides)(data)\n    data = tensorflow.keras.layers.Dropout(0.2)(data)\n    return data\n```", "```py\ninput_data = tensorflow.keras.layers.Input(shape=(200, 200, 1))\ndata = input_data\ndata = convolution_block(data, filters=64, kernel=2, strides=2)\ndata = convolution_block(data, filters=128, kernel=2, strides=2)\ndata = convolution_block(data, filters=256, kernel=2, strides=2)\ndata = convolution_block(data, filters=256, kernel=2, strides=1)\n```", "```py\ndata = tensorflow.keras.layers.Flatten()(data)\ndata = tensorflow.keras.layers.Dense(64)(data)\ndata = tensorflow.keras.layers.Activation('relu')(data)\ndata = tensorflow.keras.layers.Dense(3)(data)\noutput_data = tensorflow.keras.layers.Activation('softmax')(data)\nmodel = tensorflow.keras.models.Model(inputs=input_data, \\\n    outputs=output_data)\nmodel.summary()\n```", "```py\nmodel.compile(\n    loss='sparse_categorical_crossentropy',\n    optimizer='adam',\n    metrics=['accuracy']\n)\n```", "```py\nhistory = model.fit(\n    x=all_train_images,\n    y=all_train_labels,\n    batch_size=64,\n    epochs=50,\n    validation_data=(all_test_images, all_test_labels),\n)\n```", "```py\nEpoch 1/50\n13/13 [==============================] - 6s 311ms/step - loss: 1.1004 - accuracy: 0.5000 - val_loss: 7.9670 - val_accuracy: 0.2259\nEpoch 2/50\n13/13 [==============================] - 3s 260ms/step - loss: 0.8947 - accuracy: 0.5938 - val_loss: 11.9169 - val_accuracy: 0.2259\n-     -    -    -\nEpoch 50/50\n13/13 [==============================] - 3s 225ms/step - loss: 0.1369 - accuracy: 0.9481 - val_loss: 0.9686 - val_accuracy: 0.6741\n```", "```py\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'val'], loc='upper left')\nplt.show()\n```", "```py\nplt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title('TF model accuracy trend.')\nplt.ylabel('TF model accuracy')\nplt.xlabel('epoch number')\nplt.legend(['train', 'val'], loc='upper left')\nplt.show()\n```", "```py\nfor iteration in range(2):\n    plt.figure(figsize=(12, 12))\n    for idx, img_idx in enumerate(np.random.permutation( \\\n        len(all_test_images))[:4]\n    ):\n        img = all_test_images[img_idx]\n        label = all_test_labels[img_idx]\n        pred = model.predict(np.array([img]), verbose=0)\n        model_output = np.argmax(pred)\n        plt.subplot(440 + 1 + idx)\n        plt.imshow(img, cmap='gray')\n        plt.title(f'Label: {label}, Model_output: \\\n            {model_output}')\n        plt.axis('off')\n    plt.show()\n```", "```py\ntest_pred = model.predict(all_test_images)\ntest_outputs = [np.argmax(pred) for pred in test_pred]\n```", "```py\nprint(\n    classification_report(all_test_labels,\n                      test_outputs,\n                      target_names=['Good', 'Defected', 'Broken'],\n    )\n)\n```", "```py\n              precision    recall  f1-score   support\n        Good       0.88      0.52      0.65       130\n    Defected       0.62      0.69      0.65        61\n      Broken       0.58      0.92      0.71        79\n    accuracy                           0.67       270\n   macro avg       0.69      0.71      0.67       270\nweighted avg       0.73      0.67      0.67       270\n```", "```py\nconfusion_matrix(all_test_labels, test_outputs,)\n```", "```py\narray([[67, 21, 42],\n       [ 8, 42, 11],\n       [ 1,  5, 73]])\n```", "```py\nmodel.save(\n    filepath='gs://my-training-artifacts/tf_model/',\n    overwrite=True,\n)\n```", "```py\nPROJECT_ID='417812395597'\nREGION='us-central1'\nARTIFACT_URI='gs://my-training-artifacts/tf_model/'\nMODEL_DISPLAY_NAME='tf-bangle-defect-detector-v1'\nSERVING_IMAGE='us-docker.pkg.dev/vertex-ai/prediction/tf2-cpu.2-11:latest'\n```", "```py\naiplatform.init(project=PROJECT_ID, location=REGION)\nmodel = aiplatform.Model.upload(\n    display_name=MODEL_DISPLAY_NAME,\n    artifact_uri=ARTIFACT_URI,\n    serving_container_image_uri=SERVING_IMAGE,\n    sync=True,\n)\nmodel.wait()\nprint(\"Model Display Name: \", model.display_name)\nprint(\"Model Resource Name: \", model.resource_name)\n```", "```py\nModel Display Name:  tf-bangle-defect-detector-v1\nModel Resource Name:  projects/417812395597/locations/us-central1/models/3991356951198957568\n```", "```py\ndef create_vertex_endpoint(\n    project_id: str,\n    display_name: str,\n    location: str,\n):\n    aiplatform.init(project=project_id, location=location)\n    endpoint = aiplatform.Endpoint.create(\n        display_name=display_name,\n        project=project_id,\n        location=location,\n    )\n    print(\"Endpoint Display Name: \", endpoint.display_name)\n    print(\"Endpoint Resource Name: \", endpoint.resource_name)\n    return endpoint\n```", "```py\nENDPOINT_DISPLAY_NAME='tf-bangle-defect-detector-endpoint'\nvertex_endpoint = create_vertex_endpoint(\n    project_id=PROJECT_ID,\n    display_name=ENDPOINT_DISPLAY_NAME,\n    location=REGION,\n)\n```", "```py\nEndpoint Display Name:  tf-bangle-defect-detector-endpoint\nEndpoint Resource Name:  projects/417812395597/locations/us-central1/endpoints/4516901519043330048\n```", "```py\ngcloud ai endpoints list --region={REGION}\n```", "```py\nENDPOINT_ID          DISPLAY_NAME\n4516901519043330048  tf-bangle-defect-detector-endpoint\n```", "```py\n## List Model versions\nmodels = aiplatform.Model.list( \\\n    filter=f\"display_name={MODEL_DISPLAY_NAME}\")\nprint(\"Number of models:\", len(models))\nprint(\"Version ID:\", models[0].version_id)\nOutput:\nNumber of models: 1\nVersion ID: 1\n```", "```py\nMODEL = models[0]\nDEPLOYED_MODEL_DISPLAY_NAME='tf-bangle-defect-detector-deployed-v1'\nMACHINE_TYPE='n1-standard-16'\n#Deploy the model to the Vertex AI endpoint\nresponse = vertex_endpoint.deploy(\n    model=MODEL,\n    deployed_model_display_name=DEPLOYED_MODEL_DISPLAY_NAME,\n    machine_type=MACHINE_TYPE,\n)\n```", "```py\nvertex_endpoint.gca_resource.deployed_models[0]\n```", "```py\nid: \"4885783272115666944\"\nmodel: \"projects/417812395597/locations/us-central1/models/3991356951198957568\"\ndisplay_name: \"tf-bangle-defect-detector-deployed-v1\"\ncreate_time {\n    seconds: 1694242166\n    nanos: 923666000\n}\ndedicated_resources {\n    machine_spec {\n        machine_type: \"n1-standard-16\"\n    }\n    min_replica_count: 1\n    max_replica_count: 1\n}\nmodel_version_id: \"1\"\n```", "```py\nimport base64\nInstances = [\n    {\n      \"input_1\": {\n        \"b64\": base64.b64encode(all_test_images[0]).decode(\"utf-8\")\n      }\n    }\n]\n```", "```py\nfrom google.protobuf import json_format\nfrom google.protobuf.struct_pb2 import Value\nENDPOINT_ID=\"4516901519043330048\"\nclient_options = {\"api_endpoint\": \"us-central1-aiplatform.googleapis.com\"}\nclient = aiplatform.gapic.PredictionServiceClient( \\\n    client_options=client_options)\ninstances = [\n    json_format.ParseDict(instance_dict, Value()) for \\\n        instance_dict in Instances\n]\nparameters_dict = {}\nparameters = json_format.ParseDict(parameters_dict, Value())\n```", "```py\nendpoint = client.endpoint_path(\n    project=PROJECT_ID, location=REGION, endpoint=ENDPOINT_ID\n)\nresponse = client.predict(\n    endpoint=endpoint, instances=instances, \\\n    parameters=parameters\n)\nprint(\"response\")\nprint(\" deployed_model_id:\", response.deployed_model_id)\npredictions = response.predictions\n```"]