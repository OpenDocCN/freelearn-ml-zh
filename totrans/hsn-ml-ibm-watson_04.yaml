- en: Supervised Machine Learning Models for Your Data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter (along with previous two) acts as the backbone for the entire book.
    It provides a tour of the machine learning paradigm—the features and functionalities
    available through the IBM Cloud and IBM Watson platforms, with a focus on well-known
    approaches and algorithms. We'll start the chapter by giving a somewhat practical
    background to what model evaluation, model selection, and algorithm selection
    in machine learning entail. Next, we will look at how the IBM Cloud platform can
    help to simplify and fast-track the entire process.
  prefs: []
  type: TYPE_NORMAL
- en: Moreover, this chapter will discuss machine learning algorithms for classification
    and regression problems, and again approach these topics using the IBM Cloud platform.
    By the end of the chapter, the reader should be able to not only understand the
    concepts involved in selecting an appropriate classification technique and estimators,
    but be able to build and deploy basic machine learning models for the data at
    hand, using IBM Cloud.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll divide this chapter into the following areas:'
  prefs: []
  type: TYPE_NORMAL
- en: Model selection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing the model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Classification
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Regression
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing the predictive capability
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Model selection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Machine learning has become more and more ordinary, and understanding which
    machine learning algorithm (or model type) to use, based upon your data and objectives,
    is important, and if you are relatively new to the process, it can be daunting.
  prefs: []
  type: TYPE_NORMAL
- en: Fitting a model to training data is one thing, but how do you know that the
    model (technique) or algorithm you select will generalize well to all your data
    and create the best prediction? Too much training or overfitting doesn't solve
    this problem; in fact, in this situation, it is typical for the model to perform
    poorly with totally new data.
  prefs: []
  type: TYPE_NORMAL
- en: Once again, the IBM Cloud platform provides robust and practical tools to assist
    you with this process.
  prefs: []
  type: TYPE_NORMAL
- en: The cloud offers a machine learning service (IBM Watson Machine Learning). The
    service offers the ability to manage your developed machine learning models using
    a continuous learning system, as well as an easy method for deployment, including
    online, batch, and streaming modes.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can head over to the following link to know more about IBM Watson Machine
    Learning: [https://console.bluemix.net/catalog/services/machine-learning](https://console.bluemix.net/catalog/services/machine-learning).'
  prefs: []
  type: TYPE_NORMAL
- en: In addition, the model builder offered in IBM Watson Studio (which includes
    tutorials and sample datasets to illustrate how to train different types of machine
    learning models without the need for coding) can get you going quickly by stepping
    you through the, perhaps tedious, task of model selection (and even evaluation
    and deployment).
  prefs: []
  type: TYPE_NORMAL
- en: Later in this chapter, we will refer to a provided data asset to illustrate
    the process of bringing the reader to an understanding of the process of selecting
    a model type, steps to train the model and evaluating the models performance.
  prefs: []
  type: TYPE_NORMAL
- en: IBM Watson Studio Model Builder
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Model Builder in IBM Watson Studio is a graphical tool that actually guides
    you, step by step, through building your first machine learning models. The model
    builder utilizes the following workflow:'
  prefs: []
  type: TYPE_NORMAL
- en: Upload data to train
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose a machine learning technique and algorithm
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Train and evaluate the model
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Test and deploy the model
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The model builder (currently) focuses on creating three basic types of machine
    learning model techniques (which is typically more than sufficient for starting
    out with most machine learning projects). Furthermore, for each kind of model,
    you can choose from multiple algorithms to implement within the model. These are
    referred to as model techniques.
  prefs: []
  type: TYPE_NORMAL
- en: 'Part of the angst of building a machine learning solution is selecting the
    proper ML algorithm to be used. If unsure, or in the interest of saving time,
    at least for your first few attempts, you may want to utilize the option of having
    the model builder automatically select an algorithm for you, based upon the training
    data you provide. The model techniques include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Binary classifier**: Classifies data into two categories'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Multiclass classifier**: Classifies data into multiple categories'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Regression**: Predicts a value from a continuous set of values'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the model builder
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s now step through some initial illustrations of using the model builder:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To use the model builder, you need to add the Watson Machine Learning service
    as an asset to a new or existing project (this is referred to as associating the
    service with the project). To do this from within your project, you can click
    on Add to project and then choose the WATSON MACHINE LEARNING service as the asset
    type, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/08abd59d-8055-437c-847a-1ab9a126c4d6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you have added this service to your project, you can then create and add
    new models to the project simply by clicking on New Watson Machine Learning model
    under Models:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/07192c06-ada4-43b1-bd9b-a129d1e18094.png)'
  prefs: []
  type: TYPE_IMG
- en: 'On the New model page (as shown in the following screenshot), you must provide
    your new model''s basic details as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Name: The name of your new model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Description: A description of your model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Machine Learning Service: The service that the model will use (there are others,
    but for now, we''ll select the IBM Watson Machine Learning service: Machine Learning-bg).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Select model type: In this first attempt, we want to have Model builder help
    us choose the model type and algorithms, so you can select Automatic.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Select runtime: Select the runtime environment (just use the Default Spark
    Scala 2.11 option for now). Runtime environments are the combination of memory,
    space and CPUs which can effect pricing and cost. You can review the details of
    various runtimes online ([https://dataplatform.cloud.ibm.com/docs/content/wsj/console/environment-runtimes.html](https://dataplatform.cloud.ibm.com/docs/content/wsj/console/environment-runtimes.html)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Finally, you can click on Create:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1e888075-2a5e-47ca-a7d1-1432cb205b98.png)'
  prefs: []
  type: TYPE_IMG
- en: Scala has gained a lot of popularity and is widely used by large number of companies.
    Scala and Spark are being used at Facebook, Pinterest, Netflix, Conviva, and TripAdvisor
    for big data and machine learning applications. The IBM Cloud platform offers
    Scala as one of its defaults.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you miss or skip the step of associating a machine learning service, when
    you click on Create, you will see the following message:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7d298d2a-9a87-45d3-87a4-a21d6cea9dca.png)'
  prefs: []
  type: TYPE_IMG
- en: If you do see this message, you will need to click the Associate a Machine Learning
    service instance link, select a service, and then click on Reload before you can
    proceed with creating the model.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Training data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'At this point, we need to select some training data for our model. So, from
    the Select data asset page, we need to locate our specific data asset (file),
    click on the selection radio button to the left of it, and click on Next:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2ebb30e2-7dc0-4a7d-a1f0-6aa4ba18a825.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As a note, the Select data asset page makes it easy to determine which data
    asset to use for training the model with features such as Click to preview data:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/841a8ab8-44ca-42c9-8a21-b8febc878c5b.png)'
  prefs: []
  type: TYPE_IMG
- en: By hovering over any listed asset and then clicking on it(Click to preview date),
    Watson will retrieve and load the data for you to review.
  prefs: []
  type: TYPE_NORMAL
- en: 'You cannot alter or refine data here, but you can scroll through it to make
    sure that this is the data asset that you want to use to train your model. If
    you are satisfied that you want to use this data in your model, you can click
    on Use This Data:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4be27ed3-9ae4-429f-b5c7-e246289b27a6.png)'
  prefs: []
  type: TYPE_IMG
- en: At this point, it is time to select one of the three model techniques to use.
    First, you choose what you want to predict (the column in your data file, known
    as the label column, for which you want the model to predict its value) and the
    columns to use to determine the prediction. These are known as the columns of
    data in the data asset that the model should feature—or the feature columns.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can then use the model builder''s suggested technique (or in other words
    algorithm) or select your own:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/50105550-ac6b-4bc2-a956-afd4a60517b0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'One of the clear advantages of using the model builder is that you can easily
    try before you buy, so to speak. In other words, if you are not sure as to which
    modeling technique to select and use, you have the opportunity to use and evaluate
    each option quickly and with minimal investment. In the preceding example, I elected
    to use a very simple tryst: I want the model to predict a player''s height, given
    his weight, for a selected year (or NFL season).'
  prefs: []
  type: TYPE_NORMAL
- en: Looking at the model technique options offered, Multiclass Classification is
    the process of classifying instances into one of three or more classes; **Binary
    Classification**; is the classification of instances into one of the two classes,
    and Regression would work with a large number of classes.
  prefs: []
  type: TYPE_NORMAL
- en: Guessing which technique to use
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this example, the values for height would most likely have more than two
    possible values, and hence we might choose Multiclass Classification or even Regression.
    Again, it would be best, since the model builder makes quick work of this, to
    try both and then evaluate the results.
  prefs: []
  type: TYPE_NORMAL
- en: Moving on, if you indicated a manual approach (or selected the Manual mode)
    to build the model, you'll have to click on Add Estimators (in the upper right
    of the page) to choose one or more specific estimators. Choosing the right model
    estimator is often even harder than choosing the technique. Different estimators
    are a better match for different types of data and for solving different problems.
  prefs: []
  type: TYPE_NORMAL
- en: As we'll see later in this chapter, the model builder allows you to select multiple
    estimators for the same model and train on each of them so that you can then easily
    compare and contrast each estimator's performance results together on the same
    page.
  prefs: []
  type: TYPE_NORMAL
- en: 'With the model builder, based upon the classification technique chosen, you''ll
    have a number of estimators to choose from (as shown in the following screenshot).
    For example, we chose Multiclass Classification, so you could pick one of the
    following estimators:'
  prefs: []
  type: TYPE_NORMAL
- en: Decision Tree Classifier
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Random Forecast Classifier
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Naive Bayes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here, we will choose the Random Forest Classifier estimator and click on Add:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a816874f-8f32-4538-9c66-e3feec24233a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After clicking Add, and then Next, the model will be trained on the data, technique,
    and estimator selected. The results will then be posted to the Select model page
    (as shown in the following screenshot), where you can click on Save to save the
    model results for evaluation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ed8d6853-088c-480e-bddc-1c6404e18cab.png)'
  prefs: []
  type: TYPE_IMG
- en: A Watson Machine Learning model (created with the Model Builder) becomes an
    asset and is listed as such (shown above) on the IBM Watson Studio project page
    for later reference, refinement and reuse.
  prefs: []
  type: TYPE_NORMAL
- en: It is worth mentioning that an approach to learning how to select a classification
    technique (algorithm) and estimator is through experimentation with the model
    builder. In other words, using the broader terms of classification and feature
    selection, the model builder now makes it effective and efficient enough to test
    hypotheses with a variety of approaches, easily assess the results, and then deploy
    the best fit (more on evaluating model performance and accuracy in a later section
    of this chapter and throughout this book) as a continuous learning model with
    new and unseen data.
  prefs: []
  type: TYPE_NORMAL
- en: We will see more on this process with some experimentation later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Deployment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Deployment of a predictive model so that it can be leveraged in routine decision-making
    is typically a somewhat complex process due to a variety of challenges, and let's
    face it—predictive models that never get deployed never add value.
  prefs: []
  type: TYPE_NORMAL
- en: When you create a model by using the IBM Watson Studio model builder, you can
    deploy the model directly from the model builder after you train it. Even better,
    after you deploy your model, you can set up a continuous learning and evaluation
    process for your model.
  prefs: []
  type: TYPE_NORMAL
- en: When you deploy a model, you save it to the model repository that is associated
    with your Watson Machine Learning service, where you can then use your deployed
    model to score data and build an application.
  prefs: []
  type: TYPE_NORMAL
- en: Model builder deployment steps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To deploy our predictive model, we can use the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: On the model page, click on Add Deployment.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the Deploy model page, select the Online deployment type and enter a deployment
    name and description.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Deploy.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When model deployment is complete, from the ACTIONS menu (circled in the following
    screenshot), click on View:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4d6dd1c6-a206-4ba4-8204-e67d72da8e3e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The deployment details window appears, showing three tabs: Overview, Implementation,
    and Test (as shown in the following screenshot):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3863b720-b8ad-43b4-9c1a-fb7b6b41aa06.png)'
  prefs: []
  type: TYPE_IMG
- en: Testing the model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now is a good time to have a look at how you can test the model prediction
    right here in IBM Watson Studio. To do this, you can click on Test:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a68989e6-c88b-478c-b3ec-009a9da63f7e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The default test format generated shows you an input form that you can use
    to enter data values. Later, you''ll see that if you have an external process
    generating test data, you can use the input format icons to use JSON data file
    format and paste in your data test values:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1abb0f86-9580-47a3-be10-13438f495d63.png)'
  prefs: []
  type: TYPE_IMG
- en: 'For now (staying on the Test tab), leave the default format (input form) and
    enter some values for the important columns (the input data form is populated
    with a sample record from the dataset). To test the model, change the values and
    click on Predict:'
  prefs: []
  type: TYPE_NORMAL
- en: For year, enter `2016`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For position, enter `QB`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For weight, enter `225`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Predict
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once your model test is complete, IBM Watson Studio displays a graphical score
    (with percentages) of the column''s ability to predict the result. In the following
    example, fields 5 and 6 are **position** and **weight**, respectively, and we
    can see by the model''s performance scores, their ability to predict the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/187f7fd6-bb33-42e0-b376-0143de39bb03.png)'
  prefs: []
  type: TYPE_IMG
- en: So, given the preceding output, we can perhaps conclude that in our NFL player
    statistical file, a player's position is a pretty good indicator as to what the
    player's height is.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are so inclined, you can click the output formatting icon (shown circled
    in the following screenshot) and convert the performance information to raw output
    (View raw output):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/42988bd6-b80a-43ac-8cdd-d82e192290f6.png)'
  prefs: []
  type: TYPE_IMG
- en: When you deploy your model in this way (using Watson Studio deploy), the deployment
    is a one-time event. In other words, you enter your data, train the model on the
    data, then see the performance results and draw your conclusions.
  prefs: []
  type: TYPE_NORMAL
- en: This works for exploration and investigation purposes, but realistically, you'd
    want to retain and continually train the model with new data as it becomes available.
    To do this, you can use the IBM Watson Machine Learning continuous learning system,
    which provides automated monitoring of model performance (discussed briefly in
    the next section of this chapter), retraining, and redeployment to ensure prediction
    quality from your model.
  prefs: []
  type: TYPE_NORMAL
- en: Continuous learning and model evaluation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although we won't take the time to go deeply into this topic here in this chapter,
    IBM Watson Studio does provide a straightforward method to accomplish this, using
    a model you developed and deployed using the model builder. This method does require
    choosing a Spark Service or Environment option and establishing a feedback data
    store as a project resource, which is where the resulting model performance metrics
    will be retained (saved).
  prefs: []
  type: TYPE_NORMAL
- en: 'These resources can be configured using the Configure performance monitoring
    page shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cfe7c773-887b-4ca9-8fa7-630e4b05ed16.png)'
  prefs: []
  type: TYPE_IMG
- en: Once you establish a (feedback) data store, you can use Watson Studio and the
    model builder to easily define metrics and triggers as part of a continuous learning
    process and periodically review the updated model performance metrics and use
    chart controls to switch metrics or to view the results as a chart or as a table.
  prefs: []
  type: TYPE_NORMAL
- en: Classification
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Classification is a key concept in both machine learning and statistics. We've
    shown that the model builder offers both binary and multiclass classification
    techniques (as well as regression). Earlier in this chapter, we used the model
    builder and arbitrarily selected a classification technique just to show how easy
    it is to build, train, and deploy a model using the tool. In this section, we
    will take a closer look at each technique and which choice would make the most
    sense, given our training data.
  prefs: []
  type: TYPE_NORMAL
- en: Binary classification
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Binary (also referred to as **binomial**) classification is the process of classifying
    the elements of a given set into two groups on the basis of a classification rule.
    The product documentation offers a great example exercise that you can use to
    understand when binary classification is perhaps the best choice for your model.
    The example is training a model to predict whether or not a customer is likely
    to buy a tent from an outdoor equipment store, given the training data sample.
    If you go ahead and download the sample data and then examine the columns, you
    can understand how binary classification works. Let's analyze the exercise.
  prefs: []
  type: TYPE_NORMAL
- en: We want to build a model that will predict whether a given customer is likely
    to purchase a particular product; in this case, a tent. Suppose we again use the
    model builder to create a new model, load the sample data provided, and set the
    basic model details.
  prefs: []
  type: TYPE_NORMAL
- en: 'The process is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Define a label column. In this example, the choice is `IS_TENT`. This column
    indicates whether or not the customer bought a tent.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Define the feature columns. Feature columns are columns in the data that contain
    the traits on which the machine learning model will base its predictions. In this
    historical data, there are the following four feature columns:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`GENDER`: Customer gender'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`AGE`: Customer age'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MARITAL_STATUS`: `Married`, `Single`, or `Unspecified`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PROFESSION`: General category of the customer''s profession, such as Hospitality
    or Sales, or simply Other'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set the build type to Automatic (this will cause model builder to automatically
    select an algorithm to implement the machine learning technique you specify).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Create and add the training data.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To train the model, you will specify the preceding label and feature columns
    and then pick the machine learning technique: binary classification. After the
    model is saved, the model details page will open automatically. To see which algorithm
    the model builder used, you can go to the Summary table in the Overview information
    on the model details page (shown in the following screenshot) and click on View
    in the Model builder details row:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/aaaa58fb-6862-4df9-9507-89383ddee0c5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This will reveal the following details for review:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/96d3dd44-a95e-42ed-acde-fd5dfc69afde.png)'
  prefs: []
  type: TYPE_IMG
- en: You can see that the model builder, after we picked binary classification, chose
    LogisticRegression as its best choice for an estimator. Logistic regression is
    the usual choice when the dependent variable is dichotomous (binary). In our case,
    the dependent variable is our label column, `IS_TENT`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The conclusion, considering our data and objective, is that binary classification
    was picked as the technique because we want to classify the data into defined
    categories (think about how the records in the training data could be grouped,
    for example: males, married, who work in sales; males, single, who work as a professional;
    and so on). The estimator used (logistic regression) was chosen since, again,
    the dependent variable is binary (will purchase or will not purchase).'
  prefs: []
  type: TYPE_NORMAL
- en: Aligning the sample data values with the chosen technique and estimator, the
    reasoning behind these choices should begin to make sense. It is a good idea to
    continue to experiment with data and the model builder to gain further comfort
    with these concepts.
  prefs: []
  type: TYPE_NORMAL
- en: Multiclass classification
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Multiclass (also referred to as **multinomial**) classification is the duty
    of classifying elements of a prearranged set into one of three or more groups.
    Again, the product documentation provides a good example of this: training a model
    to predict which product category is most likely to interest a customer in an
    outdoor equipment store.'
  prefs: []
  type: TYPE_NORMAL
- en: In the previous section, the example used the same data, but this example use
    case is looking to determine a product category (group) as the result, rather
    than a particular purchase decision. The model built in this example will predict
    which product line is most likely to interest a given customer.
  prefs: []
  type: TYPE_NORMAL
- en: 'Stepping through the example process, we''ll have the same training data and
    the same feature columns (as the prior example) but a different label column:
    `PRODUCT_LINE`. Also, in this example, rather than picking Automatic, choose Manual
    so that you can choose the specific algorithms the model uses.'
  prefs: []
  type: TYPE_NORMAL
- en: 'So, to train this model, you will specify the preceding label and feature columns
    and then pick the machine learning technique: Multiclass Classification. Another
    difference in this exercise is that we want to add two estimators (algorithm choices)
    for the model to use so that we can compare each performance:'
  prefs: []
  type: TYPE_NORMAL
- en: Click Add Estimators to view the estimators (algorithms) that are available
    to use with the multiclass classification technique in the model builder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the card labeled Naive Bayes and then click on Add.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Add Estimators again.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click the card labeled Random Forest Classifier and then click on Add:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/654bcb99-8086-4b55-9908-6bd6d8dd4678.png)'
  prefs: []
  type: TYPE_IMG
- en: 'A neat feature with the model builder is that, after the training completes,
    you can see evaluations of both algorithm choices (as seen in the following screenshot):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c6eaa13f-0403-457a-b5c8-8b04334cf19d.png)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding screenshot, you can see that the performance evaluation of
    the model using Naive Bayes is rated as Poor, while the performance of the model
    using random forest classification is Excellent. Consider the following, as I
    have mentioned already in this chapter, and as is even stated in the product documentation.
  prefs: []
  type: TYPE_NORMAL
- en: '"To find the best solution for a given machine learning problem, you sometimes
    have to experiment with your training data, the model design, and/or the algorithms
    used. With the model builder, you can easily compare the results of different
    algorithms used (to better understand what the best choice should be).”'
  prefs: []
  type: TYPE_NORMAL
- en: This is extremely good and practical advice, especially to those relatively
    new to machine learning.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s now move on to the final topic of this chapter: regression.'
  prefs: []
  type: TYPE_NORMAL
- en: Regression
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Regression is essentially a statistical approach used to find the relationship
    between variables. In machine learning, this is used to predict the outcome of
    an event based on the relationship between variables obtained from the dataset.
  prefs: []
  type: TYPE_NORMAL
- en: 'As we''ve seen with prior options for training a model, the product documentation
    gives us a very good example exercise we can use to illustrate the regression
    approach to machine learning: training a model to predict the amount of money
    a customer is likely to spend on a trip to an outdoor equipment store.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Again, we''ll go over the appropriate steps required for this exercise. For
    this exercise, we will choose the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`PURCHASE_AMOUNT` (which is the average amount of money the customer has spent
    on each visit to the store) as our label column'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`GENDER`, `AGE`, `MARITAL_STATUS`, and `PROFESSION` as our feature columns'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Next, as in the preceding section''s exercise, we will again click on Manual
    so that we will be able to choose the specific algorithms the model uses (instead
    of letting the model builder chose for us), then perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: For the Select a technique option (shown in the following screenshot), select
    Regression.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the estimator named Gradient Boosted Tree Regressor. The following screenshot
    indicates the parameters we''ve chosen for this exercise model build:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/762d465d-3415-4e67-85eb-5161977edeea.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the preceding details are set, you can click on Next to begin training
    the model with the sample data, using the selected technique and estimator. After
    training completes, you can click on Save. Of course, after the model is saved,
    the model details page opens automatically:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d1353dd7-f6d6-4839-b3ea-0d9b0888c94b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the usual fashion, to verify the algorithm the model builder used, you can
    again go to the Summary table in the Overview information on the model details
    page (shown in the following screenshot) and click on View in the Model builder
    details row:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/fe968d2c-4d16-4af6-b649-89095e47e21a.png)'
  prefs: []
  type: TYPE_IMG
- en: Testing the predictive capability
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Another useful feature of the model builder is that it provides you with the
    ability to easily test the predictive ability of a deployed model, without having
    to do any programming.
  prefs: []
  type: TYPE_NORMAL
- en: 'To test a deployed model from the deployment details page, perform the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, in the Test area of the deployment details page, there will be a simple
    input form (see the following screenshot), where you can type in some values for
    the feature columns: `GENDER`, `AGE`, `MARITAL_STATUS`, and `PROFESSION` (you
    can ignore the other fields in the form):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5217d02d-0f42-4c91-adcd-b31f91861498.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, click on Predict to create a prediction based upon the values that you
    just entered and the model you have built. This will be the prediction of how
    much money a customer with the entered attributes is likely to spend on a trip
    to the store. The following screenshot shows the result of a test. The predicted
    amount of spend is $118.81:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3710b002-8695-4dd3-a55e-ea99608b1166.png)'
  prefs: []
  type: TYPE_IMG
- en: As the documentation suggests, you can take additional value combinations from
    the training file and enter them into the input data form to do additional testing.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we discussed the significance of model selection; specifically,
    selecting classification techniques and related estimators. We saw how using the
    IBM Cloud platform and Watson Studio offers a way to explore the performance of
    various techniques and estimators in an efficient and effective way. Using this
    easy exploration process, you can feel confident that your selected model fits
    to the data well. We also saw how to use Watson Studio to build, deploy, and test
    a model and configure it for continuous learning.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will discuss the difference between supervised and unsupervised
    learning, as well as looking at semi-supervised learning. Moreover, we will look
    at the concept of clustering algorithms, and examine online versus batch learning.
  prefs: []
  type: TYPE_NORMAL
