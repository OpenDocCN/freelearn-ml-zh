["```py\ntar -C /usr/local -xzf go$VERSION.$OS-$ARCH.tar.gz && \\\n export PATH=$PATH:/usr/local/go/bin\n```", "```py\nexport GOPATH=$HOME/go\n```", "```py\nmkdir -p datasets/words && \\\nwget http://www.cs.jhu.edu/~mdredze/datasets/sentiment/processed_acl.tar.gz -O datasets/words-temp.tar.gz && \\\ntar xzvf datasets/words-temp.tar.gz -C datasets/words && \\\nrm datasets/words-temp.tar.gz\n```", "```py\na := 1\nimport \"fmt\"\nfmt.Println(\"Hello, world\")\na\n```", "```py\nimport \"io/ioutil\"\n\nconst kitchenReviews = \"../datasets/words/processed_acl/kitchen\"\n\npositives, err := ioutil.ReadFile(kitchenReviews + \"/positive.review\")\nnegatives, err2 := ioutil.ReadFile(kitchenReviews + \"/negative.review\")\nif err != nil || err2 != nil {\n fmt.Println(\"Error(s)\", err, err2)\n}\n```", "```py\nthem_it:1 hovering:1 and_occasional:1 cousin_the:2 fictional_baudelaire:1 their_struggles:1\n```", "```py\ntype Pair struct {\n  Phrase string\n  Frequency int\n}\n```", "```py\npairsPositive := strings.Fields(string(positives))\npairsNegative := strings.Fields(string(negatives))\n```", "```py\n// pairsAndFilters returns a slice of Pair, split by : to obtain the phrase and frequency,\n// as well as a map of the phrases that can be used as a lookup table later.\nfunc pairsAndFilters(splitPairs []string) ([]Pair, map[string]bool) {\n  var (\n    pairs []Pair\n    m map[string]bool\n  )\n  m = make(map[string]bool)\n  for _, pair := range splitPairs {\n    p := strings.Split(pair, \":\")\n    phrase := p[0]\n    m[phrase] = true\n    if len(p) < 2 {\n      continue\n    }\n    freq, err := strconv.Atoi(p[1])\n    if err != nil {\n      continue\n    }\n    pairs = append(pairs, Pair{\n      Phrase: phrase,\n      Frequency: freq,\n    })\n  }\n  return pairs, m\n}\n```", "```py\n// exclude returns a slice of Pair that does not contain the phrases in the exclusion map\nfunc exclude(pairs []Pair, exclusions map[string]bool) []Pair {\n  var ret []Pair\n  for i := range pairs {\n    if !exclusions[pairs[i].Phrase] {\n      ret = append(ret, pairs[i])\n    }\n  }\n  return ret\n}\n\n```", "```py\nparsedPositives, posPhrases := pairsAndFilters(pairsPositive)\nparsedNegatives, negPhrases := pairsAndFilters(pairsNegative)\nparsedPositives = exclude(parsedPositives, negPhrases)\nparsedNegatives = exclude(parsedNegatives, posPhrases)\n```", "```py\ndfPos := dataframe.LoadStructs(parsedPositives)\ndfNeg := dataframe.LoadStructs(parsedNegatives)\n```", "```py\ndfPos = dfPos.Arrange(dataframe.RevSort(\"Frequency\"))\ndfNeg = dfNeg.Arrange(dataframe.RevSort(\"Frequency\"))\n```", "```py\n[46383x2] DataFrame\n\n    Phrase       Frequency\n\n 0: tic-tac-toe  10       \n\n 1: wusthoff     7        \n\n 2: emperor      7        \n\n 3: shot_glasses 6        \n\n 4: pulp         6        \n\n 5: games        6        \n\n 6: sentry       6        \n\n 7: gravel       6        \n\n 8: the_emperor  5        \n\n 9: aebleskivers 5        \n\n    ...          ...      \n\n    <string>     <int>    \n```", "```py\n[45760x2] DataFrame\n\n    Phrase          Frequency\n 0: seeds           9        \n\n 1: perculator      7        \n\n 2: probes          7        \n\n 3: cork            7        \n\n 4: coffee_tank     5        \n\n 5: brookstone      5        \n\n 6: convection_oven 5        \n\n 7: black_goo       5        \n\n 8: waring_pro      5        \n\n 9: packs           5        \n\n    ...             ...      \n\n    <string>        <int>    \n```", "```py\nGender,Height,Weight,Index\nMale,174,96,4\nMale,189,87,2\nFemale,185,110,4\nFemale,195,104,3\nMale,149,61,3\n...\n```", "```py\nb, err := ioutil.ReadFile(path)\nif err != nil {\n  fmt.Println(\"Error!\", err)\n}\ndf := dataframe.ReadCSV(bytes.NewReader(b))\n```", "```py\n[500x4] DataFrame\n\n    Gender   Height Weight Index\n 0: Male     174    96     4    \n\n 1: Male     189    87     2    \n\n 2: Female   185    110    4    \n\n 3: Female   195    104    3    \n\n 4: Male     149    61     3    \n\n 5: Male     189    104    3    \n\n 6: Male     147    92     5    \n\n 7: Male     154    111    5    \n\n 8: Male     174    90     3    \n\n 9: Female   169    103    4    \n\n    ...      ...    ...    ...  \n\n    <string> <int>  <int>  <int>\n```", "```py\nfmt.Println(\"Minimum\", df.Col(\"Height\").Min())\nfmt.Println(\"Maximum\", df.Col(\"Height\").Max())\nfmt.Println(\"Mean\", df.Col(\"Height\").Mean())\nfmt.Println(\"Median\", df.Col(\"Height\").Quantile(0.5))\n```", "```py\n[7x5] DataFrame\n\n    column   Gender   Height     Weight     Index   \n 0: mean     -        169.944000 106.000000 3.748000\n\n 1: stddev   -        16.375261  32.382607  1.355053\n\n 2: min      Female   140.000000 50.000000  0.000000\n\n 3: 25%      -        156.000000 80.000000  3.000000\n\n 4: 50%      -        170.000000 106.000000 4.000000\n\n 5: 75%      -        184.000000 136.000000 5.000000\n 6: max      Male     199.000000 160.000000 5.000000\n\n    <string> <string> <float>    <float>    <float> \n```", "```py\n// SeriesToPlotValues takes a column of a Dataframe and converts it to a gonum/plot/plotter.Values slice.\n// Panics if the column does not exist.\nfunc SeriesToPlotValues(df dataframe.DataFrame, col string) plotter.Values {\n  rows, _ := df.Dims()\n  v := make(plotter.Values, rows)\n  s := df.Col(col)\n  for i := 0; i < rows; i++ {\n    v[i] = s.Elem(i).Float()\n  }\n  return v\n}\n```", "```py\n// HistogramData returns a byte slice of JPEG data for a histogram of the column with name col in the dataframe df.\nfunc HistogramData(v plotter.Values, title string) []byte {\n  // Make a plot and set its title.\n  p, err := plot.New()\n  if err != nil {\n    panic(err)\n  }\n  p.Title.Text = title\n  h, err := plotter.NewHist(v, 10)\n  if err != nil {\n    panic(err)\n  }\n  //h.Normalize(1) // Uncomment to normalize the area under the histogram to 1\n  p.Add(h)\n  w, err := p.WriterTo(5*vg.Inch, 4*vg.Inch, \"jpg\")\n  if err != nil {\n    panic(err)\n  }\n  var b bytes.Buffer\n  writer := bufio.NewWriter(&b)\n  w.WriteTo(writer)\n  return b.Bytes()\n}\n```", "```py\nDisplay.JPEG(HistogramData(SeriesToPlotValues(df, \"Age\"), \"Age Histogram\"))\n```", "```py\n[1034x6] DataFrame\n\n    Name            Team     Position       Height(inches) Weight(pounds) ...\n\n 0: Adam_Donachie   BAL      Catcher        74             180            ...\n\n 1: Paul_Bako       BAL      Catcher        74             215            ...\n\n 2: Ramon_Hernandez BAL      Catcher        72             210            ...\n\n 3: Kevin_Millar    BAL      First_Baseman  72             210            ...\n\n 4: Chris_Gomez     BAL      First_Baseman  73             188            ...\n\n 5: Brian_Roberts   BAL      Second_Baseman 69             176            ...\n\n 6: Miguel_Tejada   BAL      Shortstop      69             209            ...\n\n 7: Melvin_Mora     BAL      Third_Baseman  71             200            ...\n\n 8: Aubrey_Huff     BAL      Third_Baseman  76             231            ...\n\n 9: Adam_Stern      BAL      Outfielder     71             180            ...\n\n    ...             ...      ...            ...            ...            ...\n\n    <string>        <string> <string>       <int>          <int>          ...\n\nNot Showing: Age <float>\n```", "```py\ndf = df.Select([]string{\"Position\", \"Height(inches)\", \"Weight(pounds)\", \"Age\"})\n```", "```py\ndf = df.Rename(\"Height\", \"Height(inches)\")\ndf = df.Rename(\"Weight\", \"Weight(pounds)\")\n```", "```py\n[1034x4] DataFrame\n\n    Position       Height Weight Age      \n\n 0: Catcher        74     180    22.990000\n\n 1: Catcher        74     215    34.690000\n\n 2: Catcher        72     210    30.780000\n\n 3: First_Baseman  72     210    35.430000\n\n 4: First_Baseman  73     188    35.710000\n\n 5: Second_Baseman 69     176    29.390000\n\n 6: Shortstop      69     209    30.770000\n\n 7: Third_Baseman  71     200    35.070000\n\n 8: Third_Baseman  76     231    30.190000\n\n 9: Outfielder     71     180    27.050000\n\n    ...            ...    ...    ...      \n\n    <string>       <int>  <int>  <float>  \n```", "```py\nheightFloat := series.New(df.Col(\"Height\"), series.Float, \"Height\")\n```", "```py\ndf.Mutate(heightFloat)\n```", "```py\n[1034x4] DataFrame\n\n    Position       Height Weight Age      \n 0: Catcher        74.00000     180.00000    22.990000\n\n 1: Catcher        74.00000     215.00000    34.690000\n\n 2: Catcher        72.00000     210.00000    30.780000\n\n 3: First_Baseman  72.00000     210.00000    35.430000\n\n 4: First_Baseman  73.00000     188.00000    35.710000\n\n 5: Second_Baseman 69.00000     176.00000    29.390000\n\n 6: Shortstop      69.00000     209.00000    30.770000\n\n 7: Third_Baseman  71.00000     200.00000    35.070000\n\n 8: Third_Baseman  76.00000     231.00000    30.190000\n\n 9: Outfielder     71.00000     180.00000    27.050000\n\n    ...            ...    ...    ...      \n\n    <string>       <float>  <float>  <float> \n```", "```py\ndf = df.Filter(dataframe.F{\"Weight\", \"<\", 260})\n```", "```py\n// rescale maps the given column values onto the range [0,1]\nfunc rescale(df dataframe.DataFrame, col string) dataframe.DataFrame {\n  s := df.Col(col)\n  min := s.Min()\n  max := s.Max()\n  v := make([]float64, s.Len(), s.Len())\n  for i := 0; i < s.Len(); i++ {\n    v[i] = (s.Elem(i).Float() - min) / (max - min)\n  }\n  rs := series.Floats(v)\n  rs.Name = col\n  return df.Mutate(rs)\n}\n```", "```py\n// meanNormalise maps the given column values onto the range [-1,1] by subtracting mean and dividing by max - min\nfunc meanNormalise(df dataframe.DataFrame, col string) dataframe.DataFrame {\n  s := df.Col(col)\n  min := s.Min()\n  max := s.Max()\n  mean := s.Mean()\n  v := make([]float64, s.Len(), s.Len())\n  for i := 0; i < s.Len(); i++ {\n    v[i] = (s.Elem(i).Float() - mean) / (max - min)\n  }\n  rs := series.Floats(v)\n  rs.Name = col\n  return df.Mutate(rs)\n}\n```", "```py\n// meanNormalise maps the given column values onto the range [-1,1] by subtracting mean and dividing by max - min\nfunc standardise(df dataframe.DataFrame, col string) dataframe.DataFrame {\n  s := df.Col(col)\n  std := s.StdDev()\n  mean := s.Mean()\n  v := make([]float64, s.Len(), s.Len())\n  for i := 0; i < s.Len(); i++ {\n    v[i] = (s.Elem(i).Float() - mean) / std\n  }\n  rs := series.Floats(v)\n  rs.Name = col\n  return df.Mutate(rs)\n}\n```", "```py\ndf = rescale(df, \"Height\")\ndf = rescale(df, \"Weight\")\n```", "```py\n[1034x4] DataFrame\n\n    Position       Height   Weight   Age      \n\n 0: Catcher        0.437500 0.214286 22.990000\n\n 1: Catcher        0.437500 0.464286 34.690000\n\n 2: Catcher        0.312500 0.428571 30.780000\n\n 3: First_Baseman  0.312500 0.428571 35.430000\n\n 4: First_Baseman  0.375000 0.271429 35.710000\n\n 5: Second_Baseman 0.125000 0.185714 29.390000\n\n 6: Shortstop      0.125000 0.421429 30.770000\n\n 7: Third_Baseman  0.250000 0.357143 35.070000\n\n 8: Third_Baseman  0.562500 0.578571 30.190000\n\n 9: Outfielder     0.250000 0.214286 27.050000\n\n    ...            ...      ...      ...      \n\n    <string>       <float>  <float>  <float> \n```", "```py\nrand.Perm(df.Nrow())\n```", "```py\n// split splits the dataframe into training and validation subsets. valFraction (0 <= valFraction <= 1) of the samples\n// are reserved for validation and the rest are for training.\nfunc Split(df dataframe.DataFrame, valFraction float64) (training dataframe.DataFrame, validation dataframe.DataFrame) {\n  perm := rand.Perm(df.Nrow())\n  cutoff := int(valFraction * float64(len(perm)))\n  training = df.Subset(perm[:cutoff])\n  validation = df.Subset(perm[cutoff:len(perm)])\n  return training, validation\n}\n```", "```py\n[723x4] DataFrame\n\n    Position         Height   Weight   Age      \n 0: Relief_Pitcher   0.500000 0.285714 25.640000\n\n 1: Starting_Pitcher 0.500000 0.500000 33.410000\n\n 2: Second_Baseman   0.375000 0.235714 28.200000\n\n 3: Relief_Pitcher   0.562500 0.392857 33.310000\n\n 4: Outfielder       0.187500 0.250000 27.450000\n\n 5: Relief_Pitcher   0.500000 0.042857 27.320000\n\n 6: Relief_Pitcher   0.562500 0.428571 40.970000\n\n 7: Second_Baseman   0.250000 0.357143 33.150000\n\n 8: Outfielder       0.312500 0.071429 25.180000\n\n 9: Relief_Pitcher   0.562500 0.321429 29.990000\n\n    ...              ...      ...      ...      \n\n    <string>         <float>  <float>  <float>  \n\n [310x4] DataFrame\n\n    Position         Height   Weight   Age      \n\n 0: Relief_Pitcher   0.375000 0.285714 25.080000\n\n 1: Relief_Pitcher   0.437500 0.285714 28.310000\n\n 2: Outfielder       0.437500 0.357143 34.140000\n\n 3: Shortstop        0.187500 0.285714 25.080000\n\n 4: Starting_Pitcher 0.500000 0.428571 32.550000\n\n 5: Outfielder       0.250000 0.250000 30.550000\n\n 6: Starting_Pitcher 0.500000 0.357143 28.480000\n\n 7: Third_Baseman    0.250000 0.285714 30.960000\n\n 8: Catcher          0.250000 0.421429 30.670000\n\n 9: Third_Baseman    0.500000 0.428571 25.480000\n\n    ...              ...      ...      ...      \n\n    <string>         <float>  <float>  <float>  \n```", "```py\nfunc UniqueValues(df dataframe.DataFrame, col string) []string {\n  var ret []string\n  m := make(map[string]bool)\n  for _, val := range df.Col(col).Records() {\n    m[val] = true\n  }\n  for key := range m {\n    ret = append(ret, key)\n  }\n  return ret\n}\n```", "```py\n[Shortstop Outfielder Starting_Pitcher Relief_Pitcher Second_Baseman First_Baseman Third_Baseman Designated_Hitter Catcher]\n```", "```py\nfunc OneHotSeries(df dataframe.DataFrame, col string, vals []string) []series.Series {\n  m := make(map[string]int)\n  s := make([]series.Series, len(vals), len(vals))\n  //cache the mapping for performance reasons\n  for i := range vals {\n    m[vals[i]] = i\n  }\n  for i := range s {\n    vals := make([]int, df.Col(col).Len(), df.Col(col).Len())\n    for j, val := range df.Col(col).Records() {\n      if i == m[val] {\n        vals[j] = 1\n      }\n    }\n    s[i] = series.Ints(vals)\n  }\n  for i := range vals {\n    s[i].Name = vals[i]\n  }\n  return s\n}\n```", "```py\nohSeries := OneHotSeries(df, \"Position\", UniqueValues(df, \"Position\"))\nfor i := range ohSeries {\n  df = df.Mutate(ohSeries[i])\n}\n```", "```py\n[1034x13] DataFrame\n\n    Position       Height   Weight   Age       Shortstop Catcher ...\n\n 0: Catcher        0.437500 0.214286 22.990000 0         1       ...\n\n 1: Catcher        0.437500 0.464286 34.690000 0         1       ...\n\n 2: Catcher        0.312500 0.428571 30.780000 0         1       ...\n\n 3: First_Baseman  0.312500 0.428571 35.430000 0         0       ...\n\n 4: First_Baseman  0.375000 0.271429 35.710000 0         0       ...\n\n 5: Second_Baseman 0.125000 0.185714 29.390000 0         0       ...\n\n 6: Shortstop      0.125000 0.421429 30.770000 1         0       ...\n\n 7: Third_Baseman  0.250000 0.357143 35.070000 0         0       ...\n\n 8: Third_Baseman  0.562500 0.578571 30.190000 0         0       ...\n\n 9: Outfielder     0.250000 0.214286 27.050000 0         0       ...\n\n    ...            ...      ...      ...       ...       ...     ...\n\n    <string>       <float>  <float>  <float>   <int>     <int>   ...\n\nNot Showing: Second_Baseman <int>, Outfielder <int>, Designated_Hitter <int>,\n\nStarting_Pitcher <int>, Relief_Pitcher <int>, First_Baseman <int>, Third_Baseman <int>\n```"]