["```py\n> # Simulating observations from Weibull distribution\n> set.seed(123)\n> sr <- rweibull(1000,0.5,15)\n> mean(sr); sd(sr); var(sr)\n[1] 30.41584\n[1] 69.35311\n[1] 4809.854\n```", "```py\n> # Calculating the pseudovalues for the mean\n> pv_mean <- NULL; n <- length(sr)\n> for(i in 1:n)\n+   pv_mean[i] <- sum(sr)- (n-1)*mean(sr[-i])\n> head(sr,20)\n [1]  23.29756524   0.84873231  11.99112962   0.23216910   0.05650965\n [6] 143.11046494   6.11445277   0.19432310   5.31450418   9.21784734\n[11]   0.02920662   9.38819985   2.27263386   4.66225355  77.54961762\n[16]   0.16712791  29.48688494 150.60696742  18.64782005   0.03252283\n> head(pv_mean,20)\n [1]  23.29756524   0.84873231  11.99112962   0.23216910   0.05650965\n [6] 143.11046494   6.11445277   0.19432310   5.31450418   9.21784734\n[11]   0.02920662   9.38819985   2.27263386   4.66225355  77.54961762\n[16]   0.16712791  29.48688494 150.60696742  18.64782005   0.03252283\n> mean(pv_mean); sd(pv_mean)\n[1] 30.41584\n[1] 69.35311\n```", "```py\n> # Calculating the pseudovalues for the variance\n> pv_var <- NULL\n> pseudo_var <- function(x,i){\n+   n = length(x)\n+   psv <- (n/(n-2))*(x[i]-mean(x))^2-(1/(n-1)*(n-2))*sum(x-mean(x))^2\n+   return(psv)\n+ }\n> pv_var <- NULL\n> for(i in 1:n)\n+   pv_var[i] <- pseudo_var(sr,i)\n> head(pv_var)\n[1]    50.77137   875.96574   340.15022   912.87970   923.53596 12725.52973\n> var(sr); mean(pv_var)\n[1] 4809.854\n[1] 4814.673\n> sd(pv_var)\n[1] 35838.59\n```", "```py\n> library(survival)\n> library(pseudo)\n> library(gee)\n> data(pbc)\n> time_pseudo <- pseudomean(time=pbc$time,event=pbc$status==2)\n> pbc_gee <- gee(time_pseudo ~ trt + age + sex + ascites + hepato +\n+                  spiders + edema + bili + chol + albumin + copper + \n+                  alk.phos + ast + trig + platelet + protime + stage,\n+                id=1:nrow(pbc), family=\"gaussian\",\n+                data=pbc)\nBeginning Cgee S-function, @(#) geeformula.q 4.13 98/01/27\nrunning glm to get initial regression estimate\n (Intercept)          trt          age         sexf      ascites       hepato \n5901.1046673  115.5247130  -23.6893551  233.0351191 -251.2292823  -63.1776549 \n     spiders        edema         bili         chol      albumin       copper \n-264.2063329 -441.2298926  -67.7863015   -0.5739644  438.5953357   -2.3704801 \n    alk.phos          ast         trig     platelet      protime        stage \n  -0.0619931   -1.1273468    0.2317984   -0.4243154 -160.6784722 -292.9838866 \n> summary(pbc_gee)\n\n GEE:  GENERALIZED LINEAR MODELS FOR DEPENDENT DATA\n gee S-function, version 4.13 modified 98/01/27 (1998) \n\nModel:\n Link:                      Identity \n Variance to Mean Relation: Gaussian \n Correlation Structure:     Independent \n\nCall:\ngee(formula = time_pseudo ~ trt + age + sex + ascites + hepato + \n    spiders + edema + bili + chol + albumin + copper + alk.phos + \n    ast + trig + platelet + protime + stage, id = 1:nrow(pbc), \n    data = pbc, family = \"gaussian\")\n\nSummary of Residuals:\n       Min         1Q     Median         3Q        Max \n-3515.1303  -792.8410   112.1563   783.9519  3565.1490 \n\nCoefficients:\n                Estimate   Naive S.E.    Naive z  Robust S.E.   Robust z\n(Intercept) 5901.1046673 1.524661e+03  3.8704367 1.470722e+03  4.0123856\ntrt          115.5247130 1.616239e+02  0.7147750 1.581686e+02  0.7303895\nage          -23.6893551 8.507630e+00 -2.7844835 8.204491e+00 -2.8873643\nsexf         233.0351191 2.701785e+02  0.8625227 3.215865e+02  0.7246421\nascites     -251.2292823 4.365874e+02 -0.5754387 5.133867e+02 -0.4893568\nhepato       -63.1776549 1.884840e+02 -0.3351885 1.786614e+02 -0.3536166\nspiders     -264.2063329 1.986929e+02 -1.3297220 2.045738e+02 -1.2914962\nedema       -441.2298926 4.155360e+02 -1.0618331 4.850261e+02 -0.9097034\nbili         -67.7863015 2.651543e+01 -2.5564852 2.009844e+01 -3.3727151\nchol          -0.5739644 4.117889e-01 -1.3938317 3.929789e-01 -1.4605475\nalbumin      438.5953357 2.321347e+02  1.8894000 2.156405e+02  2.0339196\ncopper        -2.3704801 1.120153e+00 -2.1162114 1.102365e+00 -2.1503594\nalk.phos      -0.0619931 3.932052e-02 -1.5766092 4.571919e-02 -1.3559535\nast           -1.1273468 1.640940e+00 -0.6870130 1.797116e+00 -0.6273089\ntrig           0.2317984 1.416552e+00  0.1636356 1.375674e+00  0.1684980\nplatelet      -0.4243154 9.348907e-01 -0.4538663 9.106646e-01 -0.4659403\nprotime     -160.6784722 9.139593e+01 -1.7580484 9.254740e+01 -1.7361749\nstage       -292.9838866 1.137951e+02 -2.5746618 1.025891e+02 -2.8558966\n\nEstimated Scale Parameter:  1675818\nNumber of Iterations:  1\nWorking Correlation\n     [,1]\n[1,]    1\n```", "```py\n> LS <- read.csv(\"../Data/Law_School.csv\",header=TRUE)\n> LS\n   School LSAT  GPA\n1       1  576 3.39\n2       2  635 3.30\n3       3  558 2.81\n\n13     13  545 2.76\n14     14  572 2.88\n15     15  594 2.96\n> windows(height=100,width=100)\n> layout(matrix(c(1,2,3,3),byrow=TRUE, nrow=2))\n> hist(LS$LSAT,xlab=\"LSAT\",main=\"Histogram of LSAT\")\n> hist(LS$GPA,xlab=\"GPA\",main=\"Histogram of GPA\")\n> plot(LS[,2:3],main=\"Scatter plot between LSAT and GPA\")\n```", "```py\n> matrix(c(1,2,3,3),byrow=TRUE, nrow=2)\n     [,1] [,2]\n[1,]    1    2\n[2,]    3    3\n```", "```py\n> n <- nrow(LS)\n> B <- 3200\n> TB <- c(25,50,100,200,400,800,1600,3200)\n> seB <- NULL\n> tcorr <- NULL\n> myseed <- 54321\n> for(i in 1:B){\n+   myseed <- myseed+1\n+   set.seed(myseed)\n+   tcorr[i] <- as.numeric(cor(LS[sample(1:n,n,replace=TRUE),2:3])[1,2])\n+ }\n> for(j in 1:length(TB)) seB[j] <- sd(tcorr[1:TB[j]])\n> round(seB,3)\n[1] 0.141 0.124 0.115 0.135 0.133 0.132 0.133 0.131\n> for(j in 2:B){\n+   corrB[j] <- mean(tcorr[1:j])\n+   seB[j] <- sd(tcorr[1:j])\n+   }\n> round(corrB[TB],3)\n[1] 0.775 0.787 0.793 0.777 0.782 0.773 0.771 0.772\n> round(seB[TB],3)\n[1] 0.141 0.124 0.115 0.135 0.133 0.132 0.133 0.131\n> plot.ts(seB,xlab=\"Number of Bootstrap Samples\",\n+         ylab=\"Bootstrap Standard Error of Correlation\")\n```", "```py\n> for(i in 1:length(TB)) print(quantile(tcorr[1:TB[i]],c(0.025,0.975)))\n     2.5%     97.5% \n0.5225951 0.9481351 \n     2.5%     97.5% \n0.5205679 0.9399541 \n     2.5%     97.5% \n0.5429510 0.9513826 \n     2.5%     97.5% \n0.4354776 0.9588759 \n     2.5%     97.5% \n0.4662406 0.9668964 \n     2.5%     97.5% \n0.4787843 0.9667736 \n     2.5%     97.5% \n0.4614067 0.9621344 \n     2.5%     97.5% \n0.4609731 0.9606689 \n```", "```py\n> LS_mean <- colMeans(LS[,2:3])\n> LS_var<- var(LS[,2:3])\n> LS_mean; LS_var\n      LSAT        GPA \n600.266667   3.094667 \n            LSAT       GPA\nLSAT 1746.780952 7.9015238\nGPA     7.901524 0.0592981\n```", "```py\n> TB <- c(25,50,100,200,400,800,1600,3200)\n> ptcorr <- NULL\n> ptcorrB <- NULL\n> pseB <- NULL\n> myseed <- 54321\n> for(i in 1:B){\n+   myseed <- myseed+1\n+   set.seed(myseed)\n+   temp <- rmvnorm(n,LS_mean,LS_var)\n+   ptcorr[i] <- as.numeric(cor(temp)[1,2])\n+ }\n> for(j in 2:B){\n+   ptcorrB[j] <- mean(ptcorr[1:j])\n+   pseB[j] <- sd(ptcorr[1:j])\n+ }\n> round(ptcorrB[TB],3)\n[1] 0.760 0.782 0.772 0.761 0.766 0.763 0.762 0.766\n> round(pseB[TB],3)\n[1] 0.129 0.114 0.109 0.129 0.118 0.117 0.120 0.120\n> windows(height=100,width=100)\n> plot.ts(pseB,xlab=\"Number of Bootstrap Samples\",\n+         ylab=\"Parametric Bootstrap Standard Error of Correlation\")\n> for(i in 1:length(TB)) print(quantile(ptcorr[1:TB[i]],c(0.025,0.975)))\n     2.5%     97.5% \n0.4360780 0.9048064 \n     2.5%     97.5% \n0.5439972 0.9211768 \n     2.5%     97.5% \n0.5346929 0.9200953 \n     2.5%     97.5% \n0.4229031 0.9179324 \n     2.5%     97.5% \n0.4650078 0.9194452 \n     2.5%     97.5% \n0.4747372 0.9214653 \n     2.5%     97.5% \n0.4650078 0.9245066 \n     2.5%     97.5% \n0.4662502 0.9241084 \n```", "```py\n> OC <- read.csv(\"../Data/OpenClose.csv\")\n> pairs(OC)\n> OC_xbar <- colMeans(OC)\n> OC_xbar\n      MC       VC       LO       NO       SO \n38.95455 50.59091 50.60227 46.68182 42.30682 \n> OC_Cov <- cov(OC)\n> OC_Cov\n         MC        VC        LO        NO        SO\nMC 305.7680 127.22257 101.57941 106.27273 117.40491\nVC 127.2226 172.84222  85.15726  94.67294  99.01202\nLO 101.5794  85.15726 112.88597 112.11338 121.87056\nNO 106.2727  94.67294 112.11338 220.38036 155.53553\nSO 117.4049  99.01202 121.87056 155.53553 297.75536\n> OC_Cor <- cor(OC)\n> OC_Cor\n          MC        VC        LO        NO        SO\nMC 1.0000000 0.5534052 0.5467511 0.4093920 0.3890993\nVC 0.5534052 1.0000000 0.6096447 0.4850813 0.4364487\nLO 0.5467511 0.6096447 1.0000000 0.7108059 0.6647357\nNO 0.4093920 0.4850813 0.7108059 1.0000000 0.6071743\nSO 0.3890993 0.4364487 0.6647357 0.6071743 1.0000000\n```", "```py\n> OC_eigen <- eigen(OC_Cov)\n> OC_eigen$values\n[1] 686.98981 202.11107 103.74731  84.63044  32.15329\n> OC_eigen$vectors\n           [,1]        [,2]       [,3]         [,4]        [,5]\n[1,] -0.5054457  0.74874751 -0.2997888  0.296184264 -0.07939388\n[2,] -0.3683486  0.20740314  0.4155900 -0.782888173 -0.18887639\n[3,] -0.3456612 -0.07590813  0.1453182 -0.003236339  0.92392015\n[4,] -0.4511226 -0.30088849  0.5966265  0.518139724 -0.28552169\n[5,] -0.5346501 -0.54778205 -0.6002758 -0.175732020 -0.15123239\n> OC_eigen$values/sum(OC_eigen$values)\n[1] 0.61911504 0.18214244 0.09349705 0.07626893 0.02897653\n```", "```py\n> thetaB <- NULL; sethetaB <- NULL\n> B <- 500\n> n <- nrow(OC)\n> myseed <- 54321\n> for(i in 1:B){\n+   myseed <- myseed+1\n+   set.seed(myseed)\n+   OCt <- OC[sample(1:n,n,replace=TRUE),]\n+   OCt_eigen <- eigen(cov(OCt))\n+   thetaB[i] <- max(OCt_eigen$values)/sum(OCt_eigen$values)\n+ }\n> for(j in 2:B){\n+   thetaB[j] <- mean(thetaB[1:j])\n+   sethetaB[j] <- sd(thetaB[1:j])\n+ }\n> plot.ts(sethetaB,xlab=\"Number of Bootstrap Samples\",\n+         ylab=\"Bootstrap Standard Error for First Principal Component\")\n```", "```py\n> TB <- seq(50,500,50)\n> for(i in 1:length(TB)) print(quantile(thetaB[1:TB[i]],c(0.025,0.975)))\n     2.5%     97.5% \n0.6300403 0.6478871 \n     2.5%     97.5% \n0.6330791 0.6424721 \n     2.5%     97.5% \n0.6342183 0.6401195 \n     2.5%     97.5% \n0.6348247 0.6394432 \n     2.5%     97.5% \n0.6348774 0.6392892 \n     2.5%     97.5% \n0.6352836 0.6391456 \n     2.5%     97.5% \n0.6357643 0.6390937 \n     2.5%     97.5% \n0.6360647 0.6388585 \n     2.5%     97.5% \n0.6360818 0.6387047 \n     2.5%     97.5% \n0.6361244 0.6386785 \n```", "```py\nboot(data, statistic, R, sim = \"ordinary\", stype = c(\"i\", \"f\", \"w\"), \n     strata = rep(1,n), L = NULL, m = 0, weights = NULL, \n     ran.gen = function(d, p) d, mle = NULL, simple = FALSE, ...,\n     parallel = c(\"no\", \"multicore\", \"snow\"),\n     ncpus = getOption(\"boot.ncpus\", 1L), cl = NULL)\n```", "```py\n> corx <- function(data,i) cor(data[i,1],data[i,2])\n> corboot <- boot(data=LS[,2:3],statistic=corx,R=200,stype=\"i\")\n> corboot\nORDINARY NONPARAMETRIC BOOTSTRAP\nCall:\nboot(data = LS[, 2:3], statistic = corx, R = 200, stype = \"i\")\nBootstrap Statistics :\n     original      bias    std. error\nt1* 0.7763745 -0.01791293   0.1357282\n```", "```py\n> corboot$t0\n[1] 0.7763745\n> corboot$t\n            [,1]\n  [1,] 0.8094277\n  [2,] 0.7251170\n  [3,] 0.7867994\n  [4,] 0.7253745\n  [5,] 0.7891611\n\n[196,] 0.9269368\n[197,] 0.8558334\n[198,] 0.4568741\n[199,] 0.6756813\n[200,] 0.7536155\n> mean(corboot$t)-corboot$t0\n[1] -0.01791293\n```", "```py\n> confint(corboot)\nBootstrap quantiles, type =  bca \n      2.5 %    97.5 %\n1 0.3294379 0.9441656\n```", "```py\n> Eigen_fn <- function(data,i)  {\n+  eig <- eigen(cov(data[i,]))\n+  val <- max(eig$values)/sum(eig$values)\n+  val\n+ }\n> eigenboot <- boot(data=OC,statistic = Eigen_fn,R=200,stype = \"i\")\n> eigenboot\nORDINARY NONPARAMETRIC BOOTSTRAP\nCall:\nboot(data = OC, statistic = Eigen_fn, R = 200, stype = \"i\")\nBootstrap Statistics :\n    original        bias    std. error\nt1* 0.619115 -0.0002657842   0.0488226\n> confint(eigenboot)\nBootstrap quantiles, type =  bca \n      2.5 %    97.5 %\n1 0.5242984 0.7130783\n```", "```py\n> t2 <- function(data,i) {\n+   p <- t.test(data[i,1],data[i,2],var.equal=TRUE)$statistic\n+   p\n+ }\n> data(galton)\n> gt <- boot(galton,t2,R=100)\n> gt\nORDINARY NONPARAMETRIC BOOTSTRAP\nCall:\nboot(data = galton, statistic = t2, R = 100)\nBootstrap Statistics :\n     original     bias    std. error\nt1* -2.167665 0.03612774   0.6558595\n> confint(gt)\nBootstrap quantiles, type =  percent \n      2.5 %     97.5 %\n1 -3.286426 -0.5866314\nWarning message:\nIn confint.boot(gt) :\n  BCa method fails for this problem.  Using 'perc' instead\n> t.test(galton[,1],galton[,2],var.equal=TRUE)\n\tTwo Sample t-test\ndata:  galton[, 1] and galton[, 2]\nt = -2.1677, df = 1854, p-value = 0.03031\nalternative hypothesis: true difference in means is not equal to 0\n95 percent confidence interval:\n -0.41851632 -0.02092334\nsample estimates:\nmean of x mean of y \n 68.08847  68.30819 \n```", "```py\n> v2 <- function(data,i) {\n+   v <- var.test(data[i,1],data[i,2])$statistic\n+   v\n+ }\n> gv <- boot(galton,v2,R=100)\n> gv\nORDINARY NONPARAMETRIC BOOTSTRAP\nCall:\nboot(data = galton, statistic = v2, R = 100)\nBootstrap Statistics :\n    original       bias    std. error\nt1* 1.984632 -0.002454309   0.1052697\n> confint(gv)\nBootstrap quantiles, type =  percent \n     2.5 %   97.5 %\n1 1.773178 2.254586\nWarning message:\nIn confint.boot(gv) :\n  BCa method fails for this problem.  Using 'perc' instead\n> var.test(galton[,1],galton[,2])\n\tF test to compare two variances\ndata:  galton[, 1] and galton[, 2]\nF = 1.9846, num df = 927, denom df = 927, p-value < 2.2e-16\nalternative hypothesis: true ratio of variances is not equal to 1\n95 percent confidence interval:\n 1.744743 2.257505\nsample estimates:\nratio of variances \n          1.984632 \n```", "```py\n> data(usc)\n> usc_Formula <- as.formula(\"R~.\")\n> usc_lm <- lm(usc_Formula,usc)\n> summary(usc_lm)\nCall:\nlm(formula = usc_Formula, data = usc)\nResiduals:\n    Min      1Q  Median      3Q     Max \n-34.884 -11.923  -1.135  13.495  50.560 \n\nCoefficients:\n              Estimate Std. Error t value Pr(>|t|)    \n(Intercept) -6.918e+02  1.559e+02  -4.438 9.56e-05 ***\nAge          1.040e+00  4.227e-01   2.460  0.01931 *  \nS           -8.308e+00  1.491e+01  -0.557  0.58117    \nEd           1.802e+00  6.496e-01   2.773  0.00906 ** \nEx0          1.608e+00  1.059e+00   1.519  0.13836    \nEx1         -6.673e-01  1.149e+00  -0.581  0.56529    \nLF          -4.103e-02  1.535e-01  -0.267  0.79087    \nM            1.648e-01  2.099e-01   0.785  0.43806    \nN           -4.128e-02  1.295e-01  -0.319  0.75196    \nNW           7.175e-03  6.387e-02   0.112  0.91124    \nU1          -6.017e-01  4.372e-01  -1.376  0.17798    \nU2           1.792e+00  8.561e-01   2.093  0.04407 *  \nW            1.374e-01  1.058e-01   1.298  0.20332    \nX            7.929e-01  2.351e-01   3.373  0.00191 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 21.94 on 33 degrees of freedom\nMultiple R-squared:  0.7692,\tAdjusted R-squared:  0.6783 \nF-statistic: 8.462 on 13 and 33 DF,  p-value: 3.686e-07\n```", "```py\n> f <- function(obj) summary(obj)$adj.r.squared\n> usc_boot <- Boot(usc_lm,f=f,R=100)\n> summary(usc_boot)\n     R original bootBias   bootSE bootMed\nV1 100  0.67833 0.096618 0.089858 0.79162\n> confint(usc_boot)\nBootstrap quantiles, type =  bca \n\n       2.5 %    97.5 %\nV1 0.5244243 0.7639986\nWarning message:\nIn norm.inter(t, adj.alpha) : extreme order statistics used as endpoints\n```", "```py\n> Med_Surv <- function(data){\n+   s2 <- survfit(Surv(time,status==2)~1,data=data)\n+   s2s <- summary(s2)\n+   s2median <- s2s$time[which.min(s2s$surv>0.5)]\n+   s2median\n+ }\n> pbc2 <- pbc[,2:3]\n> pbc_median_boot <- censboot(data=pbc2,statistic=Med_Surv,R=100)\n> pbc_median_boot\nCASE RESAMPLING BOOTSTRAP FOR CENSORED DATA\nCall:\ncensboot(data = pbc2, statistic = Med_Surv, R = 100)\n\nBootstrap Statistics :\n    original  bias    std. error\nt1*     3395   21.36    198.2795\n> pbc_median_boot$t\n       [,1]\n  [1,] 3282\n  [2,] 3358\n  [3,] 3574\n  [4,] 3358\n  [5,] 3244\n\n [96,] 3222\n [97,] 3445\n [98,] 3222\n [99,] 3282\n[100,] 3222\n> confint(pbc_median_boot)\nBootstrap quantiles, type =  percent \n  2.5 % 97.5 %\n1  3090   3853\nWarning message:\nIn confint.boot(pbc_median_boot) :\n  BCa method fails for this problem.  Using 'perc' instead\n```", "```py\n> Mean_Surv <- function(data,time){\n+   s2 <- survfit(Surv(time,status==2)~1,data=data)\n+   smean <- as.numeric(\n+     survival:::survmean(s2,rmean=time)[[1]][\"*rmean\"])\n+   smean\n+ }\n> censboot(data=pbc2,time=2000,statistic=Mean_Surv,R=100)\nCASE RESAMPLING BOOTSTRAP FOR CENSORED DATA\nCall:\ncensboot(data = pbc2, statistic = Mean_Surv, R = 100, time = 2000)\nBootstrap Statistics :\n    original    bias    std. error\nt1* 1659.415 -3.582645    25.87415\n```", "```py\ntsboot(tseries, statistic, R, l = NULL, sim = \"model\",\n       endcorr = TRUE, n.sim = NROW(tseries), orig.t = TRUE,\n       ran.gen, ran.args = NULL, norm = TRUE, ...,\n       parallel = c(\"no\", \"multicore\", \"snow\"),\n       ncpus = getOption(\"boot.ncpus\", 1L), cl = NULL)\n```", "```py\n> Var.fun <- function(ts) {\n+   ar.fit <- ar(ts, order.max = 25)\n+   ar.fit$var\n+ }\n> ?AirPassengers\n> AP_Boot <- tsboot(AirPassengers,Var.fun,R=999,l=20,sim=\"fixed\")\n> AP_Boot\nBLOCK BOOTSTRAP FOR TIME SERIES\nFixed Block Length of 20 \nCall:\ntsboot(tseries = AirPassengers, statistic = Var.fun, R = 999, \n    l = 20, sim = \"fixed\")\nBootstrap Statistics :\n    original   bias    std. error\nt1* 906.1192 2080.571    1111.977\n> quantile(AP_Boot$t,c(0.025,0.975))\n    2.5%    97.5% \n1216.130 5357.558 \n```"]