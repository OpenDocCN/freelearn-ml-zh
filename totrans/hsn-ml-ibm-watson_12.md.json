["```py\nimport pylab as pl\ndf_data_1.drop('lito_ID' ,axis=1).hist(bins=30, figsize=(10,10))\npl.suptitle(\"Histogram for each numeric input variable\")\nplt.savefig('lithofacies_hist')\nplt.show()\n```", "```py\nfrom pandas.tools.plotting import scatter_matrix\nfrom matplotlib import cm\nfeature_names = [ 'GCR', 'NPHI', 'PE', 'ILD', 'ILM']\nX = df_data_1[feature_names]\ny = df_data_1['lito_ID']\ncmap = cm.get_cmap('gnuplot')\nscatter = pd.plotting.scatter_matrix(X, c = y, marker = 'o', s=40, hist_kwds={'bins':15}, figsize=(9,9), cmap = cmap)\nplt.suptitle('Scatter-matrix for each input variable')\nplt.savefig('lithofacies_scatter_matrix')\n```", "```py\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state=0)\nfrom sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)\n```", "```py\nAccuracy of Decision Tree classifier on training set: 0.99 \nAccuracy of Decision Tree classifier on test set: 0.00\n```", "```py\n!pip install graphviz\nfrom sklearn.tree import DecisionTreeClassifier, export_graphviz\nfrom sklearn import tree\nfrom sklearn.datasets import load_wine\nfrom IPython.display import SVG\nfrom graphviz import Source\nfrom IPython.display import display\n\n# feature matrix\nfeature_names = [ 'GCR', 'NPHI', 'PE', 'ILD', 'ILM']\nX = df_data_1[feature_names]\n\n# target vector\ny = df_data_1['lithofacies']\n\n# print dataset description\nestimator = DecisionTreeClassifier()\nestimator.fit(X, y)\n\ngraph = Source(tree.export_graphviz(estimator, out_file=None\n   , feature_names=labels\n   , filled = True))\ndisplay(SVG(graph.pipe(format='svg')))\n```"]