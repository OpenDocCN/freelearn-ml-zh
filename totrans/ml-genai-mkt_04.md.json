["```py\ndf = pd.read_csv(\"./data.csv\", encoding=\"latin\")\ndf[\"OrderDate\"] = pd.to_datetime(df[\"OrderDate\"])\nts_df = df[[\n    \"OrderID\", \"OrderDate\", \"Quantity\", \"Sales\", \"Category\"\n]].copy().set_index(\"OrderDate\")\ndf.columns = [x.replace(\" \", \"\") for x in df.columns] \n```", "```py\nmonthly_unique_orders = ts_df[\"OrderID\"].resample(\"MS\").nunique()\nmonthly_unique_order_changes = (\n    monthly_unique_orders - monthly_unique_orders.shift()\n)/monthly_unique_orders.shift()*100 \n```", "```py\nmonthly_quantities = ts_df[\"Quantity\"].resample(\"MS\").sum()\nmonthly_quantities_changes = (\n    monthly_quantities - monthly_quantities.shift()\n)/monthly_quantities.shift()*100\nmonthly_sales = ts_df[\"Sales\"].resample(\"MS\").sum()\nmonthly_sales_changes = (\n    monthly_sales - monthly_sales.shift()\n)/monthly_sales.shift()*100 \n```", "```py\nfig, axes = plt.subplots(\nnrows=3, ncols=1, figsize=(10, 10), sharex=True\n)\nmonthly_unique_orders.plot(\n    ax=axes[0], grid=True\n)\nmonthly_unique_order_changes.plot(\n    ax=axes[0], secondary_y=True, color=\"silver\", linestyle=\"dashed\"\n)\naxes[0].set_title(\"Monthly Unique Orders\")\naxes[0].set_ylabel(\"# Unique Orders\")\naxes[0].right_ax.set_ylabel(\"Month over Month Change (%)\")\nmonthly_quantities.plot(\n    ax=axes[1], grid=True\n)\nmonthly_quantities_changes.plot(\n    ax=axes[1], secondary_y=True, color=\"silver\", linestyle=\"dashed\"\n)\naxes[1].set_title(\"Monthly Order Quantities\")\naxes[1].set_ylabel(\"Order Quantity\")\naxes[1].right_ax.set_ylabel(\"Month over Month Change (%)\")\nmonthly_sales.plot(\n    ax=axes[2], grid=True\n)\nmonthly_sales_changes.plot(\n    ax=axes[2], secondary_y=True, color=\"silver\", linestyle=\"dashed\"\n)\naxes[2].set_title(\"Monthly Sales\")\naxes[2].set_ylabel(\"Sales\")\naxes[2].right_ax.set_ylabel(\"Month over Month Change (%)\")\nplt.show() \n```", "```py\nm6_ma_sales = monthly_sales.rolling(6).mean()\nm12_ma_sales = monthly_sales.rolling(12).mean() \n```", "```py\nax = monthly_sales[\"2015-01-01\":].plot(figsize=(10,5))\nm6_ma_sales[\"2015-01-01\":].plot(ax=ax, grid=True)\nm12_ma_sales[\"2015-01-01\":].plot(ax=ax, grid=True)\nax.set_ylabel(\"Sales Amount\")\nax.set_xlabel(\"Order Date\")\nax.set_title(\"Monthly Sales Amount\")\nplt.legend([\"Monthly Sales\", \"6mo Moving Average\", \"12mo Moving Average\"])\nplt.show() \n```", "```py\nm6_ma_sales_std = monthly_sales.rolling(6).std()\nax = monthly_sales[\"2015-01-01\":].plot(figsize=(10,5))\nm6_ma_sales[\"2015-01-01\":].plot(ax=ax, grid=True)\n(m6_ma_sales[\"2015-01-01\":] + m6_ma_sales_std[\"2015-01-01\":]).plot(\n    ax=ax, grid=True, linestyle=\"dashed\", color=\"silver\", linewidth=1\n)\n(m6_ma_sales[\"2015-01-01\":] - m6_ma_sales_std[\"2015-01-01\":]).plot(\n    ax=ax, grid=True, linestyle=\"dashed\", color=\"silver\", linewidth=1\n)\nax.set_ylabel(\"Sales Amount\")\nax.set_xlabel(\"Order Date\")\nax.set_title(\"Monthly Sales Amount\")\ndates = m6_ma_sales[\"2015-01-01\":].index\nplt.fill_between(\n    dates,\n    m6_ma_sales[\"2015-01-01\":] + m6_ma_sales_std[\"2015-01-01\":],\n    m6_ma_sales[\"2015-01-01\":] - m6_ma_sales_std[\"2015-01-01\":],\n    facecolor=\"grey\",\n    alpha=0.2,\n)\nplt.legend([\"Monthly Sales\", \"6mo Moving Average (MA)\", \"6mo MA Upper\", \"6mo MA Lower\"])\nplt.show() \n```", "```py\nfrom statsmodels.graphics.tsaplots import plot_acf, plot_pacf\nplot_acf(\n    monthly_sales, lags=25\n)\nplt.show() \n```", "```py\nplot_pacf(\n    monthly_sales, lags=15\n)\nplt.show() \n```", "```py\nfurniture_monthly_sales = ts_df.loc[\n    ts_df[\"Category\"] == \"Furniture\"\n][\"Sales\"].resample(\"MS\").sum()\noffice_monthly_sales = ts_df.loc[\n    ts_df[\"Category\"] == \"Office Supplies\"\n][\"Sales\"].resample(\"MS\").sum()\ntech_monthly_sales = ts_df.loc[\n    ts_df[\"Category\"] == \"Technology\"\n][\"Sales\"].resample(\"MS\").sum()\nfig, axes = plt.subplots(nrows=3, ncols=1, figsize=(10, 10), sharex=True)\nfurniture_monthly_sales.plot(ax=axes[0], grid=True)\naxes[0].set_title(\"Monthly Furniture Sales\")\noffice_monthly_sales.plot(ax=axes[1], grid=True)\naxes[1].set_title(\"Monthly Office Supplies Sales\")\ntech_monthly_sales.plot(ax=axes[2], grid=True)\naxes[2].set_title(\"Monthly Technology Sales\")\nplt.show() \n```", "```py\nimport statsmodels.api as sm\ndecomposition = sm.tsa.seasonal_decompose(\n    furniture_monthly_sales, model='additive'\n)\nfig = decomposition.plot()\nplt.show() \n```", "```py\nreconstructed_wo_resid = decomposition.trend + decomposition.seasonal\ncorr = np.corrcoef(\n    list(furniture_monthly_sales[dates]),\n    list(reconstructed_wo_resid[dates])\n)[0,1]\ndist = np.sqrt(\n    np.square(\n        furniture_monthly_sales[dates] - reconstructed_wo_resid[dates]\n    ).sum()\n)\nrmse = np.sqrt(\n    np.square(\n        furniture_monthly_sales[dates] - reconstructed_wo_resid[dates]\n    ).mean()\n) \n```", "```py\nprint(f\"Correlation: {corr:.02f}\\nEuclidean Distance: {dist:.02f}\\nRMSE: {rmse:.02f}\") \n```", "```py\nCorrelation: 0.95\nEuclidean Distance: 15995.62\nRMSE: 2665.94 \n```", "```py\ndates = reconstructed_wo_resid.dropna().index\nax = furniture_monthly_sales[dates].plot(figsize=(10,5))\nreconstructed_wo_resid[dates].plot(ax=ax, grid=True)\ndecomposition.trend[dates].plot(ax=ax, grid=True)\nax.set_ylabel(\"Sales Amount\")\nax.set_xlabel(\"Order Date\")\nax.set_title(\"Monthly Furniture Sales Amount\")\nplt.legend([\"Monthly Furniture Sales\", \"Reconstructed (Additive)\", \"Trend Decomposed\"])\nplt.show() \n```", "```py\ndecomposition = sm.tsa.seasonal_decompose(\n    furniture_monthly_sales, model='multiplicative'\n)\nfig = decomposition.plot()\nplt.show() \n```", "```py\nreconstructed_wo_resid = decomposition.trend * decomposition.seasonal \n```", "```py\ncorr = np.corrcoef(\n    list(furniture_monthly_sales[dates]),\n    list(reconstructed_wo_resid[dates])\n)[0,1]\ndist = np.sqrt(\n    np.square(\n        furniture_monthly_sales[dates] - reconstructed_wo_resid[dates]\n    ).sum()\n)\nrmse = np.sqrt(\n    np.square(\n        furniture_monthly_sales[dates] - reconstructed_wo_resid[dates]\n    ).mean()\n) \n```", "```py\nprint(f\"Correlation: {corr:.02f}\\nEuclidean Distance: {dist:.02f}\\nRMSE: {rmse:.02f}\") \n```", "```py\nCorrelation: 0.95\nEuclidean Distance: 15307.16\nRMSE: 2551.19 \n```", "```py\ndates = reconstructed_wo_resid.dropna().index\nax = furniture_monthly_sales[dates].plot(figsize=(10,5))\nreconstructed_wo_resid[dates].plot(ax=ax, grid=True)\ndecomposition.trend[dates].plot(ax=ax, grid=True)\nax.set_ylabel(\"Sales Amount\")\nax.set_xlabel(\"Order Date\")\nax.set_title(\"Monthly Furniture Sales Amount\")\nplt.legend([\"Monthly Furniture Sales\", \"Reconstructed (Additive)\", \"Trend Decomposed\"])\nplt.show() \n```", "```py\nfrom statsmodels.tsa.arima.model import ARIMA\nmodel = ARIMA(furniture_monthly_sales[:\"2017-06-01\"], order=(12,1,3))\nmodel_fit = model.fit() \nARIMA class to build an ARIMA model in Python. For the inputs for the model, we are giving the monthly furniture sales time-series data, which is the variable furniture_monthly_sales in our case, and the parameters that we have discussed previously. As an example, we are using 12 for the *p* or AR component, 1 for the *d* or I component, and 3 for the *q* or MA component. \n```", "```py\nprint(model_fit.summary()) \n```", "```py\nmodel_fit.plot_diagnostics(figsize=(12, 6))\nplt.show() \n```", "```py\npred = model_fit.get_forecast(steps=6)\npred_ci = pred.conf_int() \n```", "```py\nax = furniture_monthly_sales[\"2015-01-01\":].plot(figsize=(15,5))\npred.predicted_mean.plot(\n    ax=ax, grid=True\n)\nax.fill_between(\n    pred_ci.index,\n    pred_ci.iloc[:, 0],\n    pred_ci.iloc[:, 1],\n    color='cornflowerblue',\n    alpha=.3\n)\nax.set_xlabel('Date')\nax.set_ylabel('Furniture Sales')\nplt.legend([\"Observed\", \"Forecasted\"])\nplt.show() \n```", "```py\nrmse = np.sqrt(\n    np.square(furniture_monthly_sales[\"2017-07-01\":] - pred.predicted_mean).mean()\n)\nrmse \n```", "```py\n5913.227463714012 \n```", "```py\npip install prophet \n```", "```py\nfrom prophet import Prophet\nmonthly_furniture_sales_df = pd.DataFrame(\n    furniture_monthly_sales[:\"2016-12-01\"]\n).reset_index()\nmonthly_furniture_sales_df.columns = [\"ds\", \"y\"] \n```", "```py\nmodel = Prophet()\nmodel.fit(monthly_furniture_sales_df) \n```", "```py\ndates = model.make_future_dataframe(periods=24, freq='MS') \n```", "```py\nforecast = model.predict(dates) \n```", "```py\nfig = model.plot(forecast, uncertainty=True)\nax = fig.axes[0]\noutsample_dates = furniture_monthly_sales[\"2017-01-01\":].index\nax.plot(\n    outsample_dates,\n    furniture_monthly_sales.loc[outsample_dates],\n    \"k.\",\n    marker=\"x\",\n    color=\"red\"\n)\nplt.legend([\n    \"actual (in-sample)\", \"predicted\", \"pred band\", \"actual (out-sample)\"\n])\nplt.show() \n```", "```py\nrmse = np.sqrt(\n    np.square(\n        forecast.loc[\n            forecast[\"ds\"].isin(outsample_dates)\n        ][\"yhat\"].to_numpy() - furniture_monthly_sales.loc[outsample_dates].to_numpy()\n    ).mean()\n)\nprint(f\"Out-Sample RMSE: {rmse:.02f}\") \n```", "```py\nOut-Sample RMSE: 4295.65 \n```", "```py\nmodel.plot_components(forecast) \n```"]