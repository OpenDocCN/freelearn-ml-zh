["```py\nmodel = RandomForestRegressor(n_estimators=10, max_depth=2)\nmodel.fit(X_train, Y_train)\nY_pred = model.predict(X_test)\n```", "```py\nrnd_clf = RandomForestClassifier(n_estimators=2,\n                                    max_leaf_nodes=10,\n                                    n_jobs=-1)\n```", "```py\nnumEstimators = [2, 4, 8, 16, 32, 64, 128, 256, 512]\nnumLeaves = [2, 4, 8, 16, 32, 64, 128]\nfor nEst in numEstimators:\n  for nLeaves in numLeaves:\n    rnd_clf = RandomForestClassifier(n_estimators=nEst,\n                                    max_leaf_nodes=nLeaves,\n                                    n_jobs=-1)\n    rnd_clf.fit(X_train, y_train)\n    y_pred_rf = rnd_clf.predict(X_test)\n    accuracy_rf = accuracy_score(y_test, y_pred_rf)\n    print(f'Trees: {nEst}, Leaves: {nLeaves}, Acc: {accuracy_rf:.2f}')\n```", "```py\n# Create the parameter grid based on the results of random search\nparam_grid = {\n    'max_depth': [2, 4, 8, 16, 32, 64, 128],\n    'n_estimators': [2, 4, 8, 16, 32, 64, 128, 256, 512]\n}\n# Create a base model\nrf = RandomForestClassifier()\n# Instantiate the grid search model\ngrid_search = GridSearchCV(estimator = rf,\n                           param_grid = param_grid,\n                           cv = 3,\n                           n_jobs = -1)\n# Fit the grid search to the data\ngrid_search.fit(X_train, y_train)\n# get the best parameters\nbest_grid = grid_search.best_estimator_\n# print the best parameters\nprint(grid_search.best_params_)\n```"]