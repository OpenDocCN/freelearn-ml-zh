["```py\nimport time\nimport board\nimport digitalio\nmotor_A1 = digitalio.DigitalInOut(board.GP17)\nmotor_A1.direction = digitalio.Direction.OUTPUT\nmotor_A1.value = True\ntime.sleep(0.3)\nmotor_A1.value = False\n```", "```py\nimport motors_test_1_pin\n```", "```py\nimport time\nimport board\nimport digitalio\nmotor_A1 = digitalio.DigitalInOut(board.GP17)\nmotor_A2 = digitalio.DigitalInOut(board.GP16)\nmotor_B1 = digitalio.DigitalInOut(board.GP18)\nmotor_B2 = digitalio.DigitalInOut(board.GP19)\nmotor_A1.direction = digitalio.Direction.OUTPUT\nmotor_A2.direction = digitalio.Direction.OUTPUT\nmotor_B1.direction = digitalio.Direction.OUTPUT\nmotor_B2.direction = digitalio.Direction.OUTPUT\nmotor_A1.value = True\ntime.sleep(0.3)\nmotor_A1.value = False\ntime.sleep(0.3)\nmotor_A2.value = True\ntime.sleep(0.3)\nmotor_A2.value = False\ntime.sleep(0.3)\nmotor_B1.value = True\ntime.sleep(0.3)\nmotor_B1.value = False\ntime.sleep(0.3)\nmotor_B2.value = True\ntime.sleep(0.3)\nmotor_B2.value = False\n```", "```py\nimport board\nimport digitalio\nmotor_A1 = digitalio.DigitalInOut(board.GP17)\nmotor_A2 = digitalio.DigitalInOut(board.GP16)\nmotor_B1 = digitalio.DigitalInOut(board.GP18)\nmotor_B2 = digitalio.DigitalInOut(board.GP19)\nmotor_A1.direction = digitalio.Direction.OUTPUT\nmotor_A2.direction = digitalio.Direction.OUTPUT\nmotor_B1.direction = digitalio.Direction.OUTPUT\nmotor_B2.direction = digitalio.Direction.OUTPUT\n```", "```py\nimport time\nimport robot\nrobot.motor_A1.value = True\ntime.sleep(0.3)\nrobot.motor_A1.value = False\n```", "```py\nimport time\nimport robot\nrobot.motor_A1.value = True\nrobot.motor_B1.value = True\ntime.sleep(0.3)\nrobot.motor_A1.value = False\nrobot.motor_B1.value = False\n```", "```py\nimport time\nimport robot\nrobot.motor_A2.value = True\nrobot.motor_B2.value = True\ntime.sleep(0.3)\nrobot.motor_A2.value = False\nrobot.motor_B2.value = False\n```", "```py\ndef stop():\n    motor_A1.value = False\n    motor_A2.value = False\n    motor_B1.value = False\n    motor_B2.value = False\n```", "```py\nimport time\nimport robot\nrobot.motor_A1.value = True\ntime.sleep(0.3)\nrobot.stop()\n```", "```py\nimport time\nimport robot\nrobot.motor_A1.value = True\nrobot.motor_B2.value = True\ntime.sleep(0.3)\nrobot.stop()\n```", "```py\nimport time\nimport board\nimport pwmio\nA1_PWM = pwmio.PWMOut(board.GP17)\nA1_PWM.duty_cycle = 2**16-1\ntime.sleep(0.3)\nA1_PWM.duty_cycle = 2**15\ntime.sleep(0.3)\nA1_PWM.duty_cycle = 0\n```", "```py\nimport board\nimport pwmio\nmotor_A1 = pwmio.PWMOut(board.GP17)\nmotor_A2 = pwmio.PWMOut(board.GP16)\nmotor_B1 = pwmio.PWMOut(board.GP18)\nmotor_B2 = pwmio.PWMOut(board.GP19)\ndef stop():\n    motor_A1.duty_cycle = 0\n    motor_A2.duty_cycle = 0\n    motor_B1.duty_cycle = 0\n    motor_B2.duty_cycle = 0\n```", "```py\nimport time\nimport robot\nmax_speed = 2**16-1\nrobot.motor_A1.duty_cycle = int(0.8 * max_speed)\ntime.sleep(0.3)\nrobot.stop()\n```", "```py\nmax_speed = 2**16-1\nright_motor = motor_A1, motor_A2\nleft_motor = motor_B1, motor_B2\n```", "```py\ndef set_speed(motor, speed):\n    if speed < 0:\n        direction = motor[1], motor[0]\n        speed = -speed\n    else:\n        direction = motor\n    speed = min(speed, 1) # limit to 1.0\n    direction[0].duty_cycle = int(max_speed * speed)\n    direction[1].duty_cycle = 0\n```", "```py\ndef set_left(speed):\n    set_speed(left_motor, speed)\ndef set_right(speed):\n    set_speed(right_motor, speed)\n```", "```py\nimport time\nimport robot\ntry:\n    for speed in range(5, 10):\n        robot.set_left(speed/10)\n        robot.set_right(speed/10)\n        time.sleep(0.3)\nfinally:\n    robot.stop()\n```", "```py\nimport time\nimport robot\ntry:\n    robot.set_left(1.0)\n    robot.set_right(0.5)\n    time.sleep(1)\nfinally:\n    robot.stop()\n```", "```py\nimport time\nimport robot\ndef straight(speed, duration):\n    robot.set_left(speed)\n    robot.set_right(speed)\n    time.sleep(duration)\ndef left(speed, duration):\n    robot.set_left(0)\n    robot.set_right(speed)\n    time.sleep(duration)\n```", "```py\ntry:\n    for n in range(0, 4):\n        straight(0.6, 1.0)\n        left(0.6, 1.0)\nfinally:\n    robot.stop()\n```"]