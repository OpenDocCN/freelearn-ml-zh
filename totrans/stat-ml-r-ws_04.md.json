["```py\n\nstudents = tibble(age = c(26, 30, 28, 31, 25, 29, 30, 29),\n                  country = c('SG', 'CN', 'US', 'UK','CN', 'SG', 'IN', 'SG'),\n                  gender = c('F', 'F', 'M', 'M', 'M', 'F', 'F', 'M'),\nheight = c(168, 169, 175, 178, 170, 170, 172, 180))\n```", "```py\n\n    students_new = students %>%\n      mutate(country_fullname = recode(country,\n                                       \"SG\"=\"Singapore\",\n                                       \"CN\"=\"China\",\n                                       \"UK\"=\"United Kingdom\",\n                                       \"IN\"=\"India\"))\n    >>> students_new\n    # A tibble: 8 x 5\n        age country gender height country_fullname\n      <dbl> <chr>   <chr>   <dbl> <chr>\n    1    26 SG      F         168 Singapore\n    2    30 CN      F         169 China\n    3    28 UK      M         175 United Kingdom\n    4    31 UK      M         178 United Kingdom\n    5    25 CN      M         170 China\n    6    29 SG      F         170 Singapore\n    7    30 IN      F         172 India\n    8    29 SG      M         180 Singapore\n    ```", "```py\n\n    students_new = students_new %>%\n      mutate(country_fullname2 = recode_factor(country,\n                                       \"SG\"=\"Singapore\",\n                                       \"CN\"=\"China\",\n                                       \"UK\"=\"United Kingdom\",\n                                       \"IN\"=\"India\"))\n    >>> students_new\n    # A tibble: 8 x 6\n        age country gender height country_fullname country_fullname2\n      <dbl> <chr>   <chr>   <dbl> <chr>            <fct>\n    1    26 SG      F         168 Singapore        Singapore\n    2    30 CN      F         169 China            China\n    3    28 UK      M         175 United Kingdom   United Kingdom\n    4    31 UK      M         178 United Kingdom   United Kingdom\n    5    25 CN      M         170 China            China\n    6    29 SG      F         170 Singapore        Singapore\n    7    30 IN      F         172 India            India\n    8    29 SG      M         180 Singapore        Singapore\n    ```", "```py\n\nstudents_new = students %>%\n  mutate(type = case_when(age >= 30 & country %in% c(\"SG\",\"IN\",\"CN\") ~ \"asia_30+\",\n                             age < 30 & age >= 20 & country %in% c(\"SG\",\"IN\",\"CN\") ~ \"asia_20+\",\n                             TRUE ~ \"others\"))\n>>> students_new\n# A tibble: 8 x 5\n    age country gender height type\n  <dbl> <chr>   <chr>   <dbl> <chr>\n1    26 SG      F         168 asia_20+\n2    30 CN      F         169 asia_30+\n3    28 UK      M         175 others\n4    31 UK      M         178 others\n5    25 CN      M         170 asia_20+\n6    29 SG      F         170 asia_20+\n7    30 IN      F         172 asia_30+\n8    29 SG      M         180 asia_20+\n```", "```py\n\n    students_new = students %>%\n      mutate(age_group = cut(x = age,\n                        breaks = c(-Inf, 25, 30, Inf),\n                        labels = c(\"<=25\", \"26-30\", \">30\")))\n    >>> students_new\n    # A tibble: 8 x 5\n        age country gender height age_group\n      <dbl> <chr>   <chr>   <dbl> <fct>\n    1    26 SG      F         168 26-30\n    2    30 CN      F         169 26-30\n    3    28 UK      M         175 26-30\n    4    31 UK      M         178 >30\n    5    25 CN      M         170 <=25\n    6    29 SG      F         170 26-30\n    7    30 IN      F         172 26-30\n    8    29 SG      M         180 26-30\n    ```", "```py\n\n    students_new = students %>%\n      mutate(age_group = cut_interval(age, n=3))\n    >>> students_new\n    # A tibble: 8 x 5\n        age country gender height age_group\n      <dbl> <chr>   <chr>   <dbl> <fct>\n    1    26 SG      F         168 [25,27]\n    2    30 CN      F         169 (29,31]\n    3    28 UK      M         175 (27,29]\n    4    31 UK      M         178 (29,31]\n    5    25 CN      M         170 [25,27]\n    6    29 SG      F         170 (27,29]\n    7    30 IN      F         172 (29,31)\n    8    29 SG      M         180 (27,29)\n    ```", "```py\n    >>> summary(students_new$age_group)\n    [25,27] (27,29) (29,31)\n          2       3       3\n    ```", "```py\n\n    students_new = students %>%\n      mutate(age_group = cut_number(age, n=3))\n    >>> students_new\n    # A tibble: 8 x 5\n        age country gender height age_group\n      <dbl> <chr>   <chr>   <dbl> <fct>\n    1    26 SG      F         168 [25,28.3]\n    2    30 CN      F         169 (29.7,31]\n    3    28 UK      M         175 [25,28.3]\n    4    31 UK      M         178 (29.7,31]\n    5    25 CN      M         170 [25,28.3]\n    6    29 SG      F         170 (28.3,29.7]\n    7    30 IN      F         172 (29.7,31)\n    8    29 SG      M         180 (28.3,29.7)\n    ```", "```py\n    >>> summary(students_new$age_group)\n      [25,28.3] (28.3,29.7)   (29.7,31)\n    3           2           3\n    ```", "```py\n\n    students_wide = students %>%\n      spread(key = country, value = height)\n    >>> students_wide\n    # A tibble: 7 x 6\n        age gender    CN    IN    SG    UK\n      <dbl> <chr>  <dbl> <dbl> <dbl> <dbl>\n    1    25 M        170    NA    NA    NA\n    2    26 F         NA    NA   168    NA\n    3    28 M         NA    NA    NA   175\n    4    29 F         NA    NA   170    NA\n    5    29 M         NA    NA   180    NA\n    6    30 F        169   172    NA    NA\n    7    31 M         NA    NA    NA   178\n    ```", "```py\n\n    avg_height = round(mean(students$height))\n    students_wide2 = students %>%\n      spread(key = country, value = height, fill = avg_height)\n    >>> students_wide2\n    # A tibble: 7 x 6\n        age gender    CN    IN    SG    UK\n      <dbl> <chr>  <dbl> <dbl> <dbl> <dbl>\n    1    25 M        170   173   173   173\n    2    26 F        173   173   168   173\n    3    28 M        173   173   173   175\n    4    29 F        173   173   170   173\n    5    29 M        173   173   180   173\n    6    30 F        169   172   173   173\n    7    31 M        173   173   173   178\n    ```", "```py\n\n    students_long = students_wide %>%\n      gather(key = \"country\", value = \"height\", CN:UK)\n    >>> students_long\n    # A tibble: 28 x 4\n         age gender country height\n       <dbl> <chr>  <chr>    <dbl>\n     1    25 M      CN         170\n     2    26 F      CN          NA\n     3    28 M      CN          NA\n     4    29 F      CN          NA\n     5    29 M      CN          NA\n     6    30 F      CN         169\n     7    31 M      CN          NA\n     8    25 M      IN          NA\n     9    26 F      IN          NA\n    10    28 M      IN          NA\n    # … with 18 more rows\n    ```", "```py\n\n    students_long = students_long %>%\n      drop_na(height)\n    >>> students_long\n    # A tibble: 8 x 4\n        age gender country height\n      <dbl> <chr>  <chr>    <dbl>\n    1    25 M      CN         170\n    2    30 F      CN         169\n    3    30 F      IN         172\n    4    26 F      SG         168\n    5    29 F      SG         170\n    6    29 M      SG         180\n    7    28 M      UK         175\n    8    31 M      UK         178\n    ```", "```py\n\n    >>> all_equal(students, students_long, ignore_row_order = T, ignore_col_order = T)\n    TRUE\n    ```", "```py\n\n    >>> \"statistics workshop\"\n    \"statistics workshop\"\n    ```", "```py\n\n    >>> \"\"statistics\" workshop\"\n    Error: unexpected symbol in \"\"\"statistics\"\n    ```", "```py\n\n    >>> '\"statistics\" workshop'\n    \"\\\"statistics\\\" workshop\"\n    ```", "```py\n\n    >>> \"\\\"statistics\\\" workshop\"\n    \"\\\"statistics\\\" workshop\"\n    ```", "```py\n\n    >>> writeLines(\"\\\"statistics\\\" workshop\")\n    \"statistics\" workshop\n    ```", "```py\n\n    >>> format(123000, big.mark = \",\")\n    \"123,000\"\n    ```", "```py\n\n    >>> format(123000, scientific = TRUE)\n    \"1.23e+05\"\n    ```", "```py\n\n    >>> format(1.256, digits = 3)\n    \"1.26\"\n    ```", "```py\n\n    >>> round(1.256, digits = 2)\n    1.26\n    ```", "```py\n\n    >>> paste(\"statistics\", \"workshop\")\n    \"statistics workshop\"\n    ```", "```py\n\n    >>> paste(\"statistics\", \"workshop\", sep = \"\")\n    \"statisticsworkshop\"\n    Let’s see what happens when we connect a single string to a vector of strings.\n    ```", "```py\n\n    >>> paste(c(\"statistics\", \"workshop\"), \"course\")\n    \"statistics course\" \"workshop course\"\n    ```", "```py\n\n    >>> paste(c(\"statistics\", \"workshop\"), \"course\", collapse = \" + \")\n    \"statistics course + workshop course\"\n    ```", "```py\n\n    >>> str_c(\"statistics\", \"workshop\", sep = \" \")\n    \"statistics workshop\"\n    ```", "```py\n\n    >>> str_c(c(\"statistics\", \"workshop\"), \"course\", sep = \" \")\n    \"statistics course\" \"workshop course\"\n    ```", "```py\n\n    >>> str_c(c(\"statistics\", \"workshop\"), \"course\", sep = \" \", collapse = \" + \")\n    \"statistics course + workshop course\"\n    ```", "```py\n\n    >>> str_length(c(\"statistics\", \"workshop\"))\n    10  8\n    ```", "```py\n\n    >>> nchar(c(\"statistics\", \"workshop\"))\n    10  8\n    ```", "```py\n\n    >>> str_sub(c(\"statistics\", \"workshop\"), start = 1, end = 3)\n    \"sta\" \"wor\"\n    ```", "```py\n\n    >>> str_detect(c(\"statistics\", \"workshop\"), \"stat\")\n    TRUE FALSE\n    ```", "```py\n\n    >>> str_subset(c(\"statistics\", \"workshop\"), \"stat\")\n    \"statistics\"\n    ```", "```py\n\n    >>> str_count(c(\"statistics\", \"workshop\"), \"t\")\n    3 0\n    ```", "```py\n\n    >>> str_split(c(\"statistics & machine leaning workshop\"), \"&\")\n    [[1]]\n    [1] \"statistics \"               \" machine leaning workshop\"\n    ```", "```py\n\n    >>> str_split(c(\"statistics & machine leaning workshop\"), \" & \")\n    [[1]]\n    [1] \"statistics\"               \"machine leaning workshop\"\n    ```", "```py\n\n    >>> str_split(c(\"statistics & machine leaning workshop\"), \" & \")[[1]][2]\n    \"machine leaning workshop\"\n    In this example, the first original string is split into two substrings while the second is split into three. Each original string corresponds to an entry in the list and can assume a different number of substrings.\n    The resulting DataFrame will assume the same number of rows as the input vector and the same number of columns as the longest entry in the list.\n    ```", "```py\n\n>>> str_replace(c(\"statistics & machine leaning workshop\", \"stats & ml & workshop\"), pattern = \"&\", replacement = \"and\")\n\"statistics and machine leaning workshop\" \"stats and ml & workshop\"\n>>> str_replace_all(c(\"statistics & machine leaning workshop\", \"stats & ml & workshop\"), pattern = \"&\", replacement = \"and\")\n\"statistics and machine leaning workshop\" \"stats and ml and workshop\"\n```", "```py\n\n    >>> title = \"statistics and machine leaning workshop\"\n    >>> title = str_replace(title, pattern = \"and\", replacement = \"&\")\n    >>> title\n    \"statistics & machine leaning workshop\"\n    ```", "```py\n\n    >>> a = str_split(title, \" & \")\n    >>> a\n    [[1]]\n    [1] \"statistics\"               \"machine leaning workshop\"\n    ```", "```py\n\n    >>> b = str_c(str_sub(a[[1]][1], 1, 4), str_sub(a[[1]][1], -1, -1))\n    >>> b\n    \"stats\"\n    ```", "```py\n\n    >>> c = unlist(str_split(a[[1]][2], \" \"))\n    >>> c\n    \"machine\"  \"leaning\"  \"workshop\"\n    ```", "```py\n\n    >>> d = str_c(str_sub(c[1], 1, 1), str_sub(c[2], 1, 1))\n    >>> d\n    \"ml\"\n    ```", "```py\n\n    >>> e = str_c(b, \"&\", d, c[3], sep = \" \")\n    >>> e\n    \"stats & ml workshop\"\n    ```", "```py\n\n>>> str_detect(c(\"statistics\", \"machine learning\"), pattern = START %R% \"s\")\nTRUE FALSE\n```", "```py\n\n>>> START\n<regex> ^\n```", "```py\n\n>>> str_view(c(\"statistics\", \"machine learning\"), pattern = START %R% \"s\")\n```", "```py\n\n    >>> texts = c(\"stats 101\", \"machine learning\", \"R 101 ABC workshop\", \"101 R workshop\")\n    ```", "```py\n\n    >>> str_subset(texts, pattern = \"learning\" %R% END)\n    \"machine learning\"\n    ```", "```py\n\n    >>> str_subset(texts, pattern = ANY_CHAR %R% \"101\")\n    \"stats 101\"          \"R 101 ABC workshop\"\n    ```", "```py\n    >>> ANY_CHAR\n    <regex> .\n    ```", "```py\n\n    >>> str_subset(texts, pattern = START %R% ANY_CHAR %R% ANY_CHAR %R% \"a\")\n    \"stats 101\"\n    ```", "```py\n\n    >>> str_subset(texts, pattern = START %R% or(\"stats\", \"R\"))\n    \"stats 101\"          \"R 101 ABC workshop\"\n    ```", "```py\n\n    >>> str_subset(texts, pattern = one_or_more(char_class(\"aA\")))\n    \"stats 101\"          \"machine learning\"   \"R 101 ABC workshop\"\n    ```", "```py\n\ntexts = c(\"stats 101\", \"Machine Learning\", \"R and ML workshop\", \"R workshop & Statistics with R\")\ntexts_df = tibble(id = 1:length(texts), text = texts)\n>>> texts_df\n# A tibble: 4 x 2\n     id text\n  <int> <chr>\n1     1 stats 101\n2     2 Machine Learning\n3     3 R and ML workshop\n4     4 R workshop & Statistics with R\n```", "```py\n\n    >>> tidy_df <- texts_df %>%\n      unnest_tokens(unit_token, text)\n    >>> tidy_df\n    # A tibble: 13 x 2\n          id unit_token\n       <int> <chr>\n    1 stats\n     2     1 101\n     3     2 machine\n     4     2 learning\n     5     3 r\n     6     3 and\n     7     3 ml\n     8     3 workshop\n     9     4 r\n    10     4 workshop\n    11     4 statistics\n    12     4 with\n    13     4 r\n    ```", "```py\n    >>> tidy_df2 <- texts_df %>%\n      unnest_tokens(unit_token, text, token = \"ngrams\", n = 2)\n    >>> tidy_df2\n    # A tibble: 9 x 2\n         id unit_token\n      <int> <chr>\n    1     1 stats 101\n    2     2 machine learning\n    3     3 r and\n    4     3 and ml\n    5     3 ml workshop\n    6     4 r workshop\n    7     4 workshop statistics\n    8     4 statistics with\n    9     4 with r\n    ```", "```py\n\n    >>> tidy_df %>%\n    count(unit_token, sort = TRUE)\n    # A tibble: 10 x 2\n       unit_token     n\n       <chr>      <int>\n     1 r              3\n     2 workshop       2\n     3 101            1\n     4 and            1\n     5 learning       1\n     6 machine        1\n     7 ml             1\n     8 statistics     1\n     9 stats          1\n    10 with           1\n    ```", "```py\n    >>> get_stopwords()\n    # A tibble: 175 x 2\n       word      lexicon\n       <chr>     <chr>\n     1 i         snowball\n     2 me        snowball\n     3 my        snowball\n     4 myself    snowball\n     5 we        snowball\n     6 our       snowball\n     7 ours      snowball\n     8 ourselves snowball\n     9 you       snowball\n    10 your      snowball\n    # … with 165 more rows\n    ```", "```py\n\n    >>> tidy_df2 = tidy_df %>%\n      filter(!(unit_token %in% get_stopwords()$word)) %>%\n      count(unit_token, sort = TRUE)\n    >>> tidy_df2\n    # A tibble: 8 x 2\n      unit_token     n\n      <chr>      <int>\n    1 r              3\n    2 workshop       2\n    3 101            1\n    4 learning       1\n    5 machine        1\n    6 ml             1\n    7 statistics     1\n    8 stats          1\n    ```", "```py\n\n    >>> count_df = tidy_df %>%\n      group_by(id, unit_token) %>%\n      summarise(count=n())\n    >>> count_df\n    # A tibble: 12 x 3\n    # Groups:   id [4]\n          id unit_token count\n       <int> <chr>      <int>\n     1     1 101            1\n     2     1 stats          1\n     3     2 learning       1\n     4     2 machine        1\n     5     3 and            1\n     6     3 ml             1\n     7     3 r              1\n     8     3 workshop       1\n     9     4 r              2\n    10     4 statistics     1\n    11     4 with           1\n    12     4 workshop       1\n    ```", "```py\n\n    >>> dtm = count_df %>%\n      cast_dtm(id, unit_token, count)\n    >>> dtm\n    <<DocumentTermMatrix (documents: 4, terms: 10)>>\n    Non-/sparse entries: 12/28\n    Sparsity           : 70%\n    Maximal term length: 10\n    Weighting          : term frequency (tf)\n    ```", "```py\n    >>> as.data.frame(as.matrix(dtm), stringsAsFactors=False)\n      101 stats learning machine and ml r workshop statistics with\n    1   1     1        0       0   0  0 0        0          0    0\n    2   0     0        1       1   0  0 0        0          0    0\n    3   0     0        0       0   1  1 1        1          0    0\n    4   0     0        0       0   0  0 2        1          1    1\n    ```", "```py\n\n    >>> tidy_dtm = tidy(dtm)\n    >>> tidy_dtm\n    # A tibble: 12 x 3\n       document term       count\n       <chr>    <chr>      <dbl>\n     1 1        101            1\n     2 1        stats          1\n     3 2        learning       1\n     4 2        machine        1\n     5 3        and            1\n     6 3        ml             1\n     7 3        r              1\n     8 4        r              2\n     9 3        workshop       1\n    10 4        workshop       1\n    11 4        statistics     1\n    12 4        with           1\n    ```"]