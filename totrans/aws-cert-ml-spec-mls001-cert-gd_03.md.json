["```py\n    from __future__ import print_function\n    import boto3\n    def lambda_handler(event, context):\n        print(\"========lambda_handler started=======\")\n        # read the bucket name (key) from the event\n        name_of_the_bucket=event['Records'][0]['s3']['bucket']\n    ['name']\n        # read the object from the event\n        name_of_the_photo=event['Records'][0]['s3']['object']['key']\n        detect_labels(name_of_the_photo,name_of_the_bucket)\n        print(\"Labels detected Successfully\")\n    def detect_labels(photo, bucket):\n        client=boto3.client('rekognition')\n      response=client.detect_labels(Image={'S3Object':{'Bucket':bucket,'Name':photo}})\n        print('Detected labels for ' + photo) \n        print('==============================')   \n        for label in response['Labels']:\n            print (\"Label: \" + label['Name'])\n            print (\"Confidence: \" + \n    str(label['Confidence']))\n            print (\"Instances:\")\n            for instance in label['Instances']:\n                print (\"  Bounding box\")\n                print (\"Top: \n    \"+str(instance['BoundingBox']['Top']))\n                print (\"Left: \\\n    \"+str(instance['BoundingBox']['Left']))\n                print (\"Width: \\\n    \"+str(instance['BoundingBox']['Width']))\n                print (\"Height: \\\n    \"+str(instance['BoundingBox']['Height']))\n                print (\"Confidence: \n    \"+str(instance['Confidence']))\n                print()\n            print (\"Parents:\")\n            for parent in label['Parents']:\n                print (\"   \" + parent['Name'])\n            print (\"----------\")\n            print('==============================') \n        return response \n    ```", "```py\n{\"time\":370,\"type\":\"word\",\"start\":5,\"end\":9,\"value\":\"went\"}\n```", "```py\n    File Content:  Hello Everyone, Welcome to Dublin. How \n    are you doing today?\n    {'ResponseMetadata': {'RequestId': '74ca4afd-5844-\n    47d8-9664-3660a26965e4', 'HTTPStatusCode': 200, \n    'HTTPHeaders': {'x-amzn-requestid': '74ca4afd-5844-\n    47d8-9664-3660a26965e4', 'content-type': \n    'application/json', 'content-length': '471', 'date': \n    'Thu, 24 Sep 2020 18:50:57 GMT'}, 'RetryAttempts': 0}, \n    'SynthesisTask': {'Engine': 'standard', 'TaskId': \n    '57548c6b-d21a-4885-962f-450952569dc7', 'TaskStatus': \n    'scheduled', 'OutputUri': 'https://s3.us-east-\n    1.amazonaws.com/polly-test-baba/output-\n    audio/.57548c6b-d21a-4885-962f-450952569dc7.mp3', \n    'CreationTime': datetime.datetime(2020, 9, 24, 18, 50, \n    57, 769000, tzinfo=tzlocal()), 'RequestCharacters': \n    59, 'OutputFormat': 'mp3', 'TextType': 'text', \n    'VoiceId': 'Aditi', 'LanguageCode': 'en-GB'}}\n    ```", "```py\nTranslation of the text from the Image :   \n{'PREVENCION DEL COVID-19': 'PREVENTION OF COVID-19', \n'LAVATE LAS MANOS EVITA EL CONTACTO NO TE TOQUES oJOs, \nEVITA': 'WASHE HANDS AVOID CONTACT DO NOT TOUCH EYES', \n'60 SEGUNDOS CON CONTAGIADOS NARIZ O BOCA \nAGLOMERACIONES': '60 SECONDS WITH CONTAGIOUS NOSE OR \nMOUTH AGGLOMERATIONS', 'NO COMPARTAS NO VIAJES A MENOS \nSI TE PONES ENFERMO': \"DON'T SHARE NOT TRAVEL UNLESS \nYOU GET SICK\", 'CUBIERTOS NI COMIDA QUE SEA NECESARIO \nBUSCA AYUDA MEDICA': 'CUTLERY OR FOOD NEEDED SEEK \nMEDICAL HELP'}\n```", "```py\n    import boto3\n    import time\n    from trp import Document\n    textract_client=boto3.client('textract')\n\n    def lambda_handler(event, context): \n        print(\"- - - Amazon Textract Demo - - -\") \n        # read the bucket name from the event \n        name_of_the_bucket=event['Records'][0]['s3']['bucket'] ['name'] \n        # read the object from the event \n        name_of_the_doc=event['Records'][0]['s3']['object']['key']\n        print(name_of_the_bucket)\n        print(name_of_the_doc)\n        response = \n    textract_client.analyze_document(Document={'S3Object': \n    {'Bucket': name_of_the_bucket,'Name': \n    name_of_the_doc}},FeatureTypes=[\"TABLES\",\"FORMS\"])\n        print(str(response))\n        doc=Document(response)\n        for page in doc.pages:\n            # Print tables\n            for table in page.tables:\n                for r, row in enumerate(table.rows):\n                    for c, cell in enumerate(row.cells):\n                        print(\"Table[{}][{}] = \n    {}\".format(r, c, cell.text))\n        for page in doc.pages:\n            # Print fields\n            print(\"Fields:\")\n            for field in page.form.fields:\n                print(\"Key: {}, Value: \n    {}\".format(field.key, field.value))\n    ```"]