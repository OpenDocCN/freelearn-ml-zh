["```py\nfrom sagemaker import get_execution_role\n```", "```py\nfrom sagemaker.model import Model\n```", "```py\nfrom sagemaker.predictor import RealTimePredictor\n```", "```py\nrole = get_execution_role()\n```", "```py\nmodel_artifact='s3://your-s3-bucket/path/to/model.tar.gz'\n```", "```py\nmodel = Model(model_data=model_artifact, role=role)\n```", "```py\npredictor = model.deploy(instance_type='ml.m4.xlarge', endpoint_name='image-classification-endpoint')\n```", "```py\nfrom sagemaker.transformer import Transformer\n```", "```py\ntransformer = Transformer(model_name='your-model-name',\n```", "```py\n                          instance_count=1,\n```", "```py\n                          instance_type='ml.m4.xlarge',\n```", "```py\n                          strategy='SingleRecord',\n```", "```py\n                          assemble_with='Line',\n```", "```py\n                          output_path='s3://your-s3-bucket/output')\n```", "```py\ntransformer.transform('s3://your-s3-bucket/input/data.csv', content_type='text/csv')\n```", "```py\ntransformer.wait()\n```", "```py\nfrom sagemaker.multimodel import MultiModel\n```", "```py\nmulti_model = MultiModel(model_data_prefix='s3://your-s3-bucket/multi-models')\n```", "```py\npredictor = multi_model.deploy(instance_type='ml.m4.xlarge', endpoint_name='multi-model-endpoint')\n```", "```py\nfrom sagemaker.predictor import Predictor\n```", "```py\npredictor = Predictor(endpoint_name='your-endpoint-name', sagemaker_session=sagemaker_session)\n```", "```py\npredictor.predict('input_data')\n```", "```py\nimport boto3\n```", "```py\nimport json\n```", "```py\ndef lambda_handler(event, context):\n```", "```py\n    # Perform preprocessing on input data\n```", "```py\n    input_data = event['input_data']\n```", "```py\n    # Call SageMaker endpoint\n```", "```py\n    # ...\n```", "```py\n    return {\n```", "```py\n        'statusCode': 200,\n```", "```py\n        'body': json.dumps('Inference successful!')\n```", "```py\n    }\n```", "```py\ndef lambda_handler(event, context):\n```", "```py\nTODO\n```", "```py\n{\n```", "```py\n\"Comment\": \"A very handy example of how to call a lamnbda function with retry option\",\n```", "```py\n\"StartAt\": \"Invoke Lambda function\",\n```", "```py\n\"States\": {\n```", "```py\n\"Invoke Lambda function\": {\n```", "```py\n\"Type\": \"Task\",\n```", "```py\n\"Resource\": \"arn:aws:states:::lambda:invoke\",\n```", "```py\n\"Parameters\": {\n```", "```py\n\"FunctionName\": \"arn:aws:lambda:your-function-identification\",\n```", "```py\n\"Payload\": {\n```", "```py\n\"Input\": {\n```", "```py\n\"env\": \"STAGE\"\n```", "```py\n}\n```", "```py\n}\n```", "```py\n},\n```", "```py\n\"Retry\": [\n```", "```py\n{\n```", "```py\n\"ErrorEquals\": [\"States.ALL\"],\n```", "```py\n\"IntervalSeconds\": 60,\n```", "```py\n\"MaxAttempts\": 5,\n```", "```py\n\"BackoffRate\": 2.0\n```", "```py\n}\n```", "```py\n],\n```", "```py\n\"Next\": \"Example\"\n```", "```py\n},\n```", "```py\n\"Example\": {\n```", "```py\n\"Type\": \"Pass\",\n```", "```py\n\"Result\": \"Just to show you how to configure other steps\",\n```", "```py\n\"End\": true\n```", "```py\n}\n```", "```py\n}\n```", "```py\n}\n```", "```py\nfrom sagemaker import get_execution_role\n```", "```py\nfrom sagemaker.model import Model\n```", "```py\nrole = get_execution_role()\n```", "```py\nmodel_artifact='s3://your-s3-bucket/path/to/model.tar.gz'\n```", "```py\nmodel = Model(model_data=model_artifact, role=role)\n```", "```py\npredictor = model.deploy(instance_type='ml.m4.xlarge', endpoint_name='real-time-endpoint', endpoint_auto_scaling=True)\n```", "```py\nfrom sagemaker.transformer import Transformer\n```", "```py\ntransformer = Transformer(model_name='your-model-name',\n```", "```py\n                          instance_count=1,\n```", "```py\n                          instance_type='ml.m4.xlarge',\n```", "```py\n                          strategy='SingleRecord',\n```", "```py\n                          assemble_with='Line',\n```", "```py\n                          output_path='s3://your-s3-bucket/output',\n```", "```py\n                          max_concurrent_transforms=4)  # Set max_concurrent_transforms for autoscaling\n```", "```py\nfrom sagemaker.multimodel import MultiModel\n```", "```py\nmulti_model = MultiModel(model_data_prefix='s3://your-s3-bucket/multi-models')\n```", "```py\npredictor = multi_model.deploy(instance_type='ml.m4.xlarge', endpoint_name='multi-model-endpoint', endpoint_auto_scaling=True)\n```", "```py\n    from sagemaker import Session\n    ```", "```py\n    role = get_execution_role()\n    ```", "```py\n    sagemaker_session = Session()\n    ```", "```py\n    vpc_config = {'SecurityGroupIds': ['sg-xxxxx'], 'Subnets': ['subnet-xxxxx']}\n    ```", "```py\n    predictor = model.deploy(instance_type='ml.m4.xlarge', endpoint_name='secured-endpoint', vpc_config_override=vpc_config)\n    ```", "```py\n      \"Version\": \"2012-10-17\",\n    ```", "```py\n      \"Statement\": [\n    ```", "```py\n       {\n    ```", "```py\n         \"Effect\": \"Allow\",\n    ```", "```py\n         \"Action\": \"sagemaker:CreateModel\",\n    ```", "```py\n         \"Resource\": \"arn:aws:sagemaker:region:account-id:model/model-name\"\n    ```", "```py\n       },\n    ```", "```py\n       {\n    ```", "```py\n          \"Effect\": \"Deny\",\n    ```", "```py\n          \"Action\": \"sagemaker:CreateModel\",\n    ```", "```py\n          \"Resource\": \"*\"\n    ```", "```py\n      }\n    ```", "```py\n    ]\n    ```", "```py\n    }\n    ```", "```py\n    from sagemaker import Session\n    ```", "```py\n    role = get_execution_role()\n    ```", "```py\n    sagemaker_session = Session()\n    ```", "```py\n    predictor = model.deploy(instance_type='ml.m4.xlarge', endpoint_name='encrypted-endpoint', encrypt_parameters=True)\n    ```", "```py\n    from sagemaker.model_monitor import EndpointInput\n    ```", "```py\n    from sagemaker import get_execution_role\n    ```", "```py\n    role = get_execution_role()\n    ```", "```py\n    monitor = ModelQualityMonitor(\n    ```", "```py\n        role=role,\n    ```", "```py\n        instance_count=1,\n    ```", "```py\n        instance_type='ml.m4.xlarge',\n    ```", "```py\n        volume_size_in_gb=20,\n    ```", "```py\n        max_runtime_in_seconds=1800\n    ```", "```py\n    )\n    ```"]