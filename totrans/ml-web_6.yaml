- en: Chapter 6. Getting Started with Django
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 6 章. Django 入门
- en: '**Django** is an open source web framework employed in commercial environments
    because it is easy to use, stable, and flexible (it takes advantage of the multiple
    libraries available in Python).'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**Django** 是一个开源网络框架，在商业环境中被采用，因为它易于使用、稳定且灵活（它利用了 Python 中可用的多个库）。'
- en: In this chapter, we will focus on the features that we think are crucial for
    managing and analyzing data in the framework. We also explain the main parts relevant
    to building an essential web application, but further details and information
    can be found online at [https://docs.djangoproject.com](https://docs.djangoproject.com)
    or other sources. We will introduce the main parts of the framework with the basic
    concepts of a web server application (settings, models, and commands), the basics
    of HTML and the shell interface, and the general ideas of a REST framework interface
    and how it is implemented in Django (serializers, REST calls, and swagger). After
    a brief introduction of the HTTP GET and POST method for transferring data over
    the Internet, we start installing and creating a new server in Django.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将关注我们认为对于在框架中管理和分析数据至关重要的功能。我们还解释了与构建基本网络应用相关的关键部分，但更详细的信息和资料可以在 [https://docs.djangoproject.com](https://docs.djangoproject.com)
    或其他来源找到。我们将介绍框架的主要部分，包括网络服务器应用的基本概念（设置、模型和命令）、HTML 的基础知识以及 shell 接口，以及 REST 框架接口的一般思想和它在
    Django 中的实现（序列化器、REST 调用和 Swagger）。在简要介绍了通过互联网传输数据的 HTTP GET 和 POST 方法之后，我们开始安装和创建
    Django 中的新服务器。
- en: HTTP – the basics of the GET and POST methods
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTTP – GET 和 POST 方法的概述
- en: '**Hypertext Transfer Protocol** ( **HTTP** ) allows a client (for example,
    the web browser) to interact with a server (our application). Given a URL of a
    server web page, the GET method is the way the client queries data from the server,
    specifying some parameters. This can be explained using the `curl` command, as
    follows:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '**超文本传输协议**（**HTTP**）允许客户端（例如，网页浏览器）与服务器（我们的应用）交互。给定服务器网页的 URL，GET 方法是客户端从服务器查询数据的方式，指定了一些参数。这可以通过以下
    `curl` 命令进行解释：'
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: After the `?` symbol, the name/value pair specifies which data to query, and
    they are separated by a `&` symbol.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `?` 符号之后，名称/值对指定了要查询的数据，它们由一个 `&` 符号分隔。
- en: 'The way a client transfers data to the server is called POST, and the data
    is in the *body* of the call:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端将数据传输到服务器的方式称为 POST，数据位于调用的 *body* 中：
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Now we can start discussing how to create a new server and an application using
    Django.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以开始讨论如何使用 Django 创建一个新的服务器和应用。
- en: Installation and server creation
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装和服务器创建
- en: 'The Django library is installed by typing the following command in the Terminal:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在终端中输入以下命令安装 Django 库：
- en: '[PRE2]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The command should install Django Version 1.7 or above (the author used version
    1.7). In order to start a new app, we type the following command:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 命令应安装 Django 版本 1.7 或更高版本（作者使用了 1.7 版本）。为了启动一个新的应用，我们输入以下命令：
- en: '[PRE3]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'It will generate a new folder `test_app` with the following tree of files:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 它将生成一个新的文件夹 `test_app`，其中包含以下文件结构：
- en: '[PRE4]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We can see that, inside the folder, we have the `manage.py` file, which allows
    the programmer to run various actions, and another subfolder, `test_app` , with
    the following files:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，在文件夹内，我们有 `manage.py` 文件，它允许程序员运行各种操作，还有一个名为 `test_app` 的子文件夹，其中包含以下文件：
- en: '`settings.py` : This stores all the parameters'' settings to configure the
    server'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`settings.py`：此文件存储所有参数设置以配置服务器'
- en: '`urls.py` : This collects all the URL paths available on your web application,
    and the actual functions behind the web pages are usually written in the `views.py`
    app file'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`urls.py`：此文件收集您网络应用上可用的所有 URL 路径，而网页背后的实际功能通常编写在 `views.py` 应用文件中'
- en: '`wsgi.py` : This is a module to make a server communicate with a web application'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`wsgi.py`：这是一个模块，使服务器能够与网络应用通信'
- en: '`__init__.py` : This file is used to define every folder as a package, to import
    modules internally'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`__init__.py`：此文件用于将每个文件夹定义为包，以便内部导入模块'
- en: 'On our local machine, the server with a **Welcome to Django** page is deployed
    on `http://127.0.0` `.1:8080/` simply by typing the following command:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的本地机器上，带有 **欢迎来到 Django** 页面的服务器通过简单地输入以下命令部署在 `http://127.0.0` `.1:8080/`：
- en: '[PRE5]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Here, `8080` is the port on which the server is started (if no port is specified,
    by default the server is started on `port 8000` ). Now that the server is ready,
    we can create as many applications as we want by simply typing the following command:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`8080`是服务器启动的端口（如果没有指定端口，默认情况下服务器在`端口8000`启动）。现在服务器已准备就绪，我们可以通过简单地输入以下命令来创建我们想要的任何数量的应用程序：
- en: '[PRE6]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This will create a new folder, `nameapp` , inside the `test_app` folder at
    root:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在根目录下的`test_app`文件夹内创建一个新的文件夹`nameapp`：
- en: '[PRE7]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: We will discuss the contents of this folder and its functions after we explain
    the most important settings parameters. Note that for Django Version 1.9, the
    `nameapp` folder contains the `apps.py` file in order to configure `nameapp` without
    using the `settings.py` file.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在解释最重要的设置参数之后，我们将讨论这个文件夹的内容及其功能。请注意，对于Django版本1.9，`nameapp`文件夹包含`apps.py`文件，以便在不使用`settings.py`文件的情况下配置`nameapp`。
- en: Settings
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置
- en: 'The `settings.py` file stores all the configurations needed for the Django
    server to operate. The most important parameters to set are as follows:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`settings.py`文件存储了Django服务器运行所需的所有配置。需要设置的最重要参数如下：'
- en: 'Apart from the common Django apps installed by default to manage a website,
    we will also install the REST framework:'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 除了默认安装的用于管理网站的常见Django应用外，我们还将安装REST框架：
- en: '[PRE8]'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The REST framework is an application that allows the Django app (`nameapp` in
    this case) to communicate through a REST API, and the REST Framework Swagger is
    just a web interactive interface to manage the REST APIs. These functionalities
    will be explained in the following sections. Also, note that each app created
    needs to be added in this field (in this case, `nameapp` ).
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: REST框架是一个允许Django应用（在这种情况下为`nameapp`）通过REST API进行通信的应用程序，而REST Framework Swagger只是一个用于管理REST
    API的Web交互界面。这些功能将在以下章节中解释。此外，请注意，每个创建的应用都需要添加到这个字段中（在这种情况下，`nameapp`）。
- en: 'Different backend databases ( **MySQL** , **Oracle** , **PostgreSQL** , and
    so on) can be used to store the data. In this case, we use **SQLite3** (the default
    option):'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以使用不同的后端数据库（**MySQL**、**Oracle**、**PostgreSQL**等）来存储数据。在这种情况下，我们使用**SQLite3**（默认选项）：
- en: '[PRE9]'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The web pages are written in HTML, so a folder to store the HTML code is required.
    The `templates` folder is usually used to store the web pages layout:'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 网页是用HTML编写的，因此需要一个文件夹来存储HTML代码。通常使用`templates`文件夹来存储网页布局：
- en: '[PRE10]'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'To embellish a website, the CSS formatting and JavaScript code are usually
    stored in another folder, `static` , at the same level as the `server` folder.
    Then the settings need to be configured to take the files from the folder:'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了装饰网站，CSS格式化和JavaScript代码通常存储在另一个文件夹`static`中，与`server`文件夹处于同一级别。然后需要配置设置以从文件夹中获取文件：
- en: '[PRE11]'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'To set the URL of the website, the settings are configured to take the path
    from the file (in this case, `test_server/urls.py` ):'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要设置网站的URL，设置被配置为从文件中获取路径（在这种情况下，`test_server/urls.py`）：
- en: '[PRE12]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'It is possible to set up a file to store all the printout statements we want
    to put in the code for debugging purposes. We use the `logging` library and the
    following configuration:'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有可能设置一个文件来存储我们希望在代码中用于调试目的的所有打印语句。我们使用`logging`库和以下配置：
- en: '[PRE13]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Here, the `test_server.log` file stores all the print statements defined using
    the `logging` library (for example, `logging.debug('write something')` ).
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，`test_server.log`文件存储了使用`logging`库定义的所有打印语句（例如，`logging.debug('write something')`）。
- en: 'Now that all the most important settings are configured, we can focus on developing
    a new app that creates a simple email address book. So we create the app as usual:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在所有最重要的设置都已配置，我们可以专注于开发一个创建简单电子邮件地址簿的新应用。所以我们像往常一样创建应用：
- en: '[PRE14]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now, we add the templates and static folder on the root `test_server` directory
    of the server:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们在服务器的根目录`test_server`下添加模板和静态文件夹：
- en: '[PRE15]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Note that the `nameapp` on the `INSTALLED_APPS` becomes `addressesapp` . In
    the following section, we will discuss the main features of how to implement the
    app. All the code can be found in the `chapter_6` folder of the author's GitHub
    repository ([https://github.com/ai2010/machine_learning_for_the_web/tree/master/chapter_6](https://github.com/ai2010/machine_learning_for_the_web/tree/master/chapter_6)
    ).
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，`INSTALLED_APPS`中的`nameapp`变为`addressesapp`。在下一节中，我们将讨论实现应用的主要功能。所有代码都可以在作者的GitHub仓库的`chapter_6`文件夹中找到（[https://github.com/ai2010/machine_learning_for_the_web/tree/master/chapter_6](https://github.com/ai2010/machine_learning_for_the_web/tree/master/chapter_6)）。
- en: Writing an app – most important features
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写应用 – 最重要功能
- en: To create a web application that stores e-mail addresses, we will need a table
    that stores the data and web pages that allow the end user to add, delete, and
    review the address book. Furthermore, we may want to transform the address book
    to read as a spreadsheet, or send the data to another app through the Internet.
    There are specific Django features to accomplish all these actions (`models` ,
    `views` , `admin` , API REST-framework, and `commands` ) and we will now discuss
    the way the data is stored.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个存储电子邮件地址的 Web 应用程序，我们需要一个存储数据的表和允许最终用户添加、删除和查看地址簿的网页。此外，我们可能还想将地址簿转换为电子表格格式，或者通过互联网将数据发送到另一个应用程序。Django
    有特定的功能来完成所有这些操作（`models`、`views`、`admin`、API REST-framework 和 `commands`），我们现在将讨论数据是如何存储的。
- en: Models
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模型
- en: 'To create an e-mail address book, we need to store, in a table, the name of
    each contact with their e-mail address. A table in Django is called a model and
    it is defined in the `models.py` file:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个电子邮件地址簿，我们需要在一个表中存储每个联系人的姓名和他们的电子邮件地址。在 Django 中，表被称为模型，并在 `models.py`
    文件中定义：
- en: '[PRE16]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'In Django, the columns of a table are the fields of the model, and can be of
    different types: integer, char, and so on. Note that Django automatically adds
    an incremental ID field to any new object. The unique option means that duplicate
    names cannot exist in the model, and blank states whether the field can be empty
    or not. The `__unicode__` function is optional, and it is used to render each
    person as a string (we set the name string in this case).'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Django 中，表的列是模型的字段，可以是不同类型：整数、字符等。请注意，Django 会自动为任何新对象添加一个递增的 ID 字段。唯一选项意味着模型中不能存在重复的名称，而空白状态表示字段是否可以为空。`__unicode__`
    函数是可选的，它用于将每个人渲染为字符串（在这种情况下我们设置了名称字符串）。
- en: 'Now that the model has been created, we need to apply it to the SQLite database:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在模型已经创建，我们需要将其应用到 SQLite 数据库中：
- en: '[PRE17]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '`makemigrations` will transform the model changes to migration files (for folder
    `migrations` inside `addressesapp` ), while `migrate` applies the change to the
    database schema. Note that in case multiple applications are used by the same
    website, then the command to generate migrations is `python manage.py makemigrations
    ''appname''` .'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`makemigrations` 命令会将模型更改转换为迁移文件（位于 `addressesapp` 文件夹内的 `migrations` 文件夹中），而
    `migrate` 命令则将更改应用到数据库模式中。请注意，如果同一网站使用了多个应用程序，那么生成迁移的命令是 `python manage.py makemigrations
    ''appname''`。'
- en: URL and views behind HTML web pages
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: HTML 网页背后的 URL 和视图
- en: Now that we know how to store data, we need to record contacts through a web
    page and show the contacts in another page. In the following section, the pages
    are described giving a brief overview of the main properties of HTML pages.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道了如何存储数据，我们需要通过网页记录联系人并通过另一个页面显示联系人。在下一节中，将描述这些页面，并简要概述 HTML 页面的主要属性。
- en: HTML pages
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: HTML 页面
- en: All the code explained in this section is stored in the folder template under
    the `test_server` folder.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 本节中解释的所有代码都存储在 `test_server` 文件夹下的模板文件夹中。
- en: 'The main page of the application allows the user to record a new contact, and
    it looks like the following screenshot:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序的主页允许用户记录新的联系人，如下面的截图所示：
- en: '![HTML pages](img/Image00528.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![HTML 页面](img/Image00528.jpg)'
- en: 'As you can see, the body of the page is specified by two boxes to be filled
    in with the person''s name and their e-mail address, pressing **Add** to add them
    to the database. The HTML file, `home.html` , is as follows:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，页面的主体由两个需要填写的人名和电子邮件地址的框指定，按下 **Add** 按钮将它们添加到数据库中。HTML 文件 `home.html`
    如下所示：
- en: '[PRE18]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'We used the POST form to submit the data collected by the two paragraph fields
    (specified by `<p>...</p>` ) and activated by the **Add** button tag (`&raquo`
    : is to render the small arrows after the text). The title of the page, **Add
    person to address book** , is rendered by a header of type 2 (`<h2>...</h2>` ).
    Note the `csrt_token` tag, which enables the cross-site forgery protection request
    (see more at [https://www.squarefree.com/securitytips/web-developers.html#CSRF](https://www.squarefree.com/securitytips/web-developers.html#CSRF)
    ).'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 POST 表单提交了由两个段落字段（由 `<p>...</p>` 指定）收集的数据，并通过 **Add** 按钮标签（`&raquo`：用于在文本后渲染小箭头）激活。页面的标题
    **Add person to address book** 由类型 2 的标题（`<h2>...</h2>`）渲染。注意 `csrt_token` 标签，它启用了跨站伪造保护请求（更多信息请参阅
    [https://www.squarefree.com/securitytips/web-developers.html#CSRF](https://www.squarefree.com/securitytips/web-developers.html#CSRF)）。
- en: 'The style of the page (CSS and JavaScript files), as well as the page footer
    and the header bar with the **Home** , **Emails Book** , and **Find** buttons,
    are defined in the `base.html` file (see the `template` folder). The **Find**
    button is implemented as a form:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 页面的样式（CSS和JavaScript文件）、页脚以及带有**主页**、**电子邮件簿**和**查找**按钮的页眉栏都在 `base.html` 文件中定义（见
    `template` 文件夹）。**查找**按钮被实现为一个表单：
- en: '[PRE19]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The `div` tag has been used to define the text field and the **Find** button,
    which activates a GET call to the URL defined as `get_contacts` in the `urls.py`
    file (see the following section).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `div` 标签定义了文本字段和**查找**按钮，该按钮激活对在 `urls.py` 文件中定义为 `get_contacts` 的URL的GET调用（见下一节）。
- en: 'The other page to display is the address book:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 要显示的另一个页面是地址簿：
- en: '![HTML pages](img/Image00529.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![HTML页面](img/Image00529.jpg)'
- en: '[PRE20]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Again, `base.html` is called to render the main header buttons, the footer,
    and the style. After a header (of type 2) containing **Email address book** ,
    a `for` loop on the alphabet letters, `{% for letter in alphabet %}` , is performed
    to show only the contacts starting with the corresponding letter. This is achieved
    by calling the `addressesbook` URL with the letter to query `{{letter}}` . The
    list of contacts shown is then rendered, looping over the contacts list `{% for
    contact in contacts %}` : a paragraph tag displays the name, email, and a button
    to use to delete the person from the database. We will now discuss the implementation
    of the page actions (add, find, or delete person, and show address book).'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，`base.html` 被调用以渲染主标题按钮、页脚和样式。在包含**电子邮件地址簿**（Email address book）类型的标题（2级）之后，执行一个基于字母表的循环，`{%
    for letter in alphabet %}`，以仅显示以相应字母开头的联系人。这是通过调用带有查询字母 `{{letter}}` 的 `addressesbook`
    URL 来实现的。然后渲染显示的联系人列表，循环遍历联系人列表 `{% for contact in contacts %}`：一个段落标签显示姓名、电子邮件和一个用于从数据库中删除人员的按钮。我们现在将讨论页面动作的实现（添加、查找或删除人员，以及显示地址簿）。
- en: URL declarations and views
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: URL声明和视图
- en: We will now discuss the way `urls.py` and `views.py` work together with the
    HTML code of each page to perform the desired actions.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将讨论 `urls.py` 和 `views.py` 如何与每个页面的HTML代码协同工作以执行所需动作。
- en: 'As we have seen, the two main pages of the application, home and address book,
    are associated with a URL, which in Django is declared in the `urls.py` file:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所见，应用程序的两个主要页面，主页和地址簿，与一个URL相关联，在Django中在 `urls.py` 文件中声明：
- en: '[PRE21]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Each URL is specified by a regex (an `r` in front of the URL string), so the
    main page is specified by `http://127.0.0.1:8000/` (the `^` start symbol is followed
    by the `$` end symbol) and its action (`add record` ) is implemented in the `main`
    function of the `views.py` file:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 每个URL都由一个正则表达式（URL字符串前的 `r`）指定，因此主页由 `http://127.0.0.1:8000/`（`^` 开始符号后跟 `$`
    结束符号）指定，其动作（`添加记录`）在 `views.py` 文件的 `main` 函数中实现：
- en: '[PRE22]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Whenever the user posts a new contact to be store, the POST method redirects
    the call to a GET method. If the name and the email have been provided, a new
    object of the `Person` model will be added, or updated if it already exists. In
    this method, the same name but in capital letters will be considered a distinct
    name, so `Andrea` , `ANDREA` , and `andrea` will be three separate contacts. To
    change this, the reader can simply apply the lower function over the name field,
    so that the three `andrea` expressions will all refer to one `andrea` .
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户提交一个新的联系人以存储时，POST方法将调用重定向到GET方法。如果提供了姓名和电子邮件，将添加一个新的 `Person` 模型对象，如果已存在则更新。在此方法中，相同名称但大写字母将被视为不同的名称，因此
    `Andrea`、`ANDREA` 和 `andrea` 将是三个不同的联系人。要更改此，读者只需在名称字段上应用小写函数，这样三个 `andrea` 表达式都将指向一个
    `andrea`。
- en: 'The find action in the `base.html` file is associated with the `http://127.0.0.1:8000/book-search/`
    URL, and the action is defined in the `get_contacts` function in `views.py` :'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`base.html` 文件中的查找动作与 `http://127.0.0.1:8000/book-search/` URL相关联，并且动作在 `views.py`
    文件中的 `get_contacts` 函数中定义：'
- en: '[PRE23]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: If the user specifies a non-empty string on the text header field, the function
    will redirect to the `addressesbook` function with the name to search (otherwise
    a not found page is displayed).
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户在文本标题字段中指定了非空字符串，则函数将重定向到带有搜索名称的 `addressesbook` 函数（否则显示一个未找到的页面）。
- en: 'The header button **Emails book** is linked to the `http://127.0.0.1:8000/book/`
    URL, which shows the contacts according to the `addressesbook` function:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 标题按钮**电子邮件簿**链接到 `http://127.0.0.1:8000/book/` URL，该URL根据 `addressesbook` 函数显示联系人：
- en: '[PRE24]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The letter field stores the name (in case of redirection from the **Find** header
    button) or the letter (in case of calling from the emails book page), and a lookup
    over the contacts in the `Person` model is performed. The retrieved contacts are
    then stored in the `contacts` context object, while the letters are stored in
    the `alphabet` context object. If no letter is specified, all the contacts in
    the database are returned. Note that the name can have both a capital and a lowercase
    first letter, so the usual `order_by` method will not sort the names in alphabetical
    order. Therefore, the function `sort_lower` will convert each name to lowercase
    and sort the contacts alphabetically.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 字母字段存储名称（如果从**查找**标题按钮重定向）或字母（如果从电子邮件书页调用），并对`Person`模型中的联系人进行查找。检索到的联系人随后存储在`contacts`上下文对象中，而字母存储在`alphabet`上下文对象中。如果没有指定字母，则返回数据库中的所有联系人。请注意，名称可以有大写和小写的第一个字母，因此通常的`order_by`方法不会按字母顺序对名称进行排序。因此，`sort_lower`函数将每个名称转换为小写并按字母顺序对联系人进行排序。
- en: 'The delete action is performed by the `delete_person` function and called by
    the `http://127.0.0.1:8000/delete/(?P<name>.*)/` URL. The `.*` indicates that
    all the characters are valid for forming a name (note that if we wanted only character
    numbers and whitespace, we should have `[a-zA-Z0-9 ]+` ):'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 删除操作由`delete_person`函数执行，并通过`http://127.0.0.1:8000/delete/(?P<name>.*)/` URL调用。`.*`表示所有字符都可用于构成名称（注意，如果我们只想有字符、数字和空格，我们应该使用`[a-zA-Z0-9
    ]+`）：
- en: '[PRE25]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The `name` query variable is searched on the `Person` table in the database
    and deleted. The function returns the emails book page with the remaining contacts.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在数据库的`Person`表中搜索`name`查询变量，并将其删除。函数返回带有剩余联系人的电子邮件书页。
- en: In the same way, the not found URL activates the not found function, and you
    should now be able to understand how it works.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，未找到的URL激活了未找到功能，你现在应该能够理解它是如何工作的。
- en: The admin URL refers to the Django interface (see following section) while the
    docs is the REST framework swagger discussed in the *RESTful application programming
    interfaces (APIs)* section of this book.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 管理员URL指的是Django界面（见下文），而docs是本书*RESTful应用程序编程接口（API）*部分中讨论的REST框架swagger。
- en: Admin
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理员
- en: 'The admin panel is a user interface for managing the application, accessible
    through the browser. In the `admin.py` file, we can add the model just created
    with the following command:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 管理面板是管理应用程序的用户界面，可以通过浏览器访问。在`admin.py`文件中，我们可以使用以下命令添加刚刚创建的模型：
- en: '[PRE26]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'All the models can be accessed by a user interface at:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 所有模型都可以通过用户界面访问：
- en: '`http://127.0.0.1:8000/admin/`'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '`http://127.0.0.1:8000/admin/`'
- en: 'At this link, the user name and password are required. We create that with
    the following command:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在此链接中，需要用户名和密码。我们使用以下命令创建它：
- en: '[PRE27]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Then we type a username and password (in my case, `andrea/a` ).
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们输入用户名和密码（在我的情况下，`andrea/a`）。
- en: 'Now, we can explore the panel that follows:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以探索下面的面板：
- en: '![Admin](img/Image00530.jpg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![管理员](img/Image00530.jpg)'
- en: 'Clicking on **Persons** , we will see all `Person` objects shown by name (because
    the`__unicode__` function in the model refers to the name field):'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**人员**，我们将看到按名称显示的所有`Person`对象（因为模型中的`__unicode__`函数引用的是名称字段）：
- en: '![Admin](img/Image00531.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![管理员](img/Image00531.jpg)'
- en: Shell interface
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 壳接口
- en: 'The Django framework also provides a shell to explore the created models and
    test them. To start it, we type the following in the terminal:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: Django框架还提供了一个shell来探索创建的模型并对其进行测试。要启动它，我们在终端中输入以下内容：
- en: '[PRE28]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Now we can import the `Person` model and play with it:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以导入`Person`模型并对其进行操作：
- en: '[PRE29]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: In these lines, we have created a new contact, `myfriend1` , and verified it
    has been added to the list of `Person` objects.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些行中，我们创建了一个新的联系人，`myfriend1`，并验证它已被添加到`Person`对象列表中。
- en: Commands
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 命令
- en: 'The Django framework also allows us to write custom commands through the `manage.py`
    module. For example, we would like to export the entire list of contacts into
    a CSV file. To achieve that, we create a `commands` folder inside a `management`
    folder (with `__init__.py` in each folder). The file implements the custom command
    to export the contacts list to CSV, extending the `BaseCommand` class:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: Django框架还允许我们通过`manage.py`模块编写自定义命令。例如，我们希望将整个联系人列表导出到CSV文件。为了实现这一点，我们在`management`文件夹（每个文件夹中都有`__init__.py`）内创建一个`commands`文件夹。该文件实现了将联系人列表导出到CSV的自定义命令，扩展了`BaseCommand`类：
- en: '[PRE30]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The command must define a `handler` function, which will perform the export
    operation. Type the following from the `test_server` folder:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 命令必须定义一个`handler`函数，该函数将执行导出操作。在`test_server`文件夹中输入以下内容：
- en: '[PRE31]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: RESTful application programming interfaces (APIs)
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: RESTful应用程序编程接口（API）
- en: 'A RESTful API is an application programming interface that employs HTTP requests
    (such as GET and POST) to manage the data of an application. In this case, the
    API is used to obtain the address book through a `curl` call. In order to do that,
    we have defined the `rest_framework` app in the `INSTALLED_APPS` section of `settings.py`
    , and then the `api.py` file implements the API:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: RESTful API是一种应用程序编程接口，它使用HTTP请求（如GET和POST）来管理应用程序的数据。在这种情况下，API通过`curl`调用获取地址簿。为了做到这一点，我们在`settings.py`的`INSTALLED_APPS`部分中定义了`rest_framework`应用，然后`api.py`文件实现了API：
- en: '[PRE32]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'We have used the `ListAPIView` class to return all `Person` objects, or only
    the one that matches the `name` value. Since the returned list may be too large,
    we need to override the `PageNumberPagination` class to show more objects on the
    same page; the `LargeResultsSetPagination` class allows a maximum of 10,000 objects
    per page. This API needs to transform the `Person` objects to a JSON format object,
    which is performed by the `AddressesSerializer serializer` implemented in `serializers.py`
    :'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经使用`ListAPIView`类来返回所有`Person`对象，或者只返回匹配`name`值的那个对象。由于返回的列表可能太大，我们需要重写`PageNumberPagination`类，以便在同一页面上显示更多对象；`LargeResultsSetPagination`类允许每页最多显示10,000个对象。这个API需要将`Person`对象转换为JSON格式对象，这通过在`serializers.py`中实现的`AddressesSerializer`序列化器来完成：
- en: '[PRE33]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Now the address book can be retrieved using the `curl` command:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 现在可以使用`curl`命令检索地址簿：
- en: '[PRE34]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Note the forward slash at the end of the URL. In the same way, we can Note
    the forward slash at the end of the URL. In the same way, we can specify a name
    value to get their email:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 注意URL末尾的斜杠。同样，我们可以指定一个名称值来获取他们的电子邮件：
- en: '[PRE35]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Note that we can always specify the page query parameter, in case the number
    of contacts is too large (or change the pagination size value). In the `urls.py`
    file, we also defined the docs URL to be our Swagger RESTful API, which allows
    the user to explore and test the API using a browser:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们始终可以指定页面查询参数，以防联系人数量太大（或更改分页大小值）。在`urls.py`文件中，我们还定义了docs URL为我们的Swagger
    RESTful API，允许用户使用浏览器探索和测试API：
- en: '![RESTful application programming interfaces (APIs)](img/Image00532.jpg)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![RESTful应用程序编程接口（API）](img/Image00532.jpg)'
- en: This is a user-friendly way to verify that the API is working as expected and
    the data is shown in the correct format.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个用户友好的方式来验证API是否按预期工作，并且数据以正确的格式显示。
- en: Summary
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have discussed how to create a web application using the
    Django framework. The main features of Django, such as the `models` , `admin`
    , `views` , `commands` , `shell` , and the `RESTful API` , have been described,
    so the reader should now have the necessary knowledge to develop a web application
    in a real-life scenario.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了如何使用Django框架创建Web应用程序。Django的主要功能，如`models`、`admin`、`views`、`commands`、`shell`和`RESTful
    API`，都已被描述，因此读者现在应该具备在现实场景中开发Web应用程序的必要知识。
- en: We will use this knowledge, together with what we have learned in the preceding
    chapters, to build our movie recommendation engine and movie sentiment analysis
    application in the following two chapters.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用这些知识，结合我们在前几章中学到的知识，在接下来的两章中构建我们的电影推荐引擎和电影情感分析应用程序。
