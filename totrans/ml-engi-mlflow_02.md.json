["```py\n    $ git clone https://github.com/PacktPublishing/Machine-Learning-Engineering-with-Mlflow.git\n    $ cd Machine-Learning-Engineering-with-Mlflow\n    $ cd Chapter01\n    ```", "```py\n    FROM jupyter/scipy-notebook\n    RUN pip install mlflow\n    RUN pip install sklearn\n    ```", "```py\n    docker build -t chapter_1_homlflow\n    ```", "```py\n    ./run.sh\n    ```", "```py\n    from sklearn import datasets\n    from sklearn.model_selection import train_test_split\n    dataset = datasets.load_iris()\n    X_train, X_test, y_train, y_test = train_test_split(dataset.data, dataset.target, test_size=0.4)\n    ```", "```py\n    from sklearn.linear_model import LogisticRegression\n    clf = LogisticRegression()\n    clf.fit(X_train, y_train)\n    ```", "```py\n    import mlflow\n    from sklearn.linear_model import LogisticRegression\n    mlflow.sklearn.autolog()\n    with mlflow.start_run():\n        clf = LogisticRegression()\n        clf.fit(X_train, y_train)\n    ```", "```py\n    $ ls -l \n    total 24\n    -rw-r--r-- 1 jovyan users 12970 Oct 14 16:30 chapther_01_introducing_ml_flow.ipynb\n    -rw-r--r-- 1 jovyan users    53 Sep 30 20:41 Dockerfile\n    drwxr-xr-x 4 jovyan users   128 Oct 14 16:32 mlruns\n    -rwxr-xr-x 1 jovyan users    97 Oct 14 13:20 run.sh\n    ```", "```py\n    ├── 46dc6db17fb5471a9a23d45407da680f\n    │   ├── artifacts\n    │   │   └── model\n    │   │       ├── MLmodel\n    │   │       ├── conda.yaml\n    │   │       ├── input_example.json\n    │   │       └── model.pkl\n    │   ├── meta.yaml\n    │   ├── metrics\n    │   │   └── training_score\n    │   ├── params\n    │   │   ├── C\n    │   │   …..\n    │   └── tags\n    │       ├── mlflow.source.type\n    │       └── mlflow.user\n    └── meta.yaml\n    ```", "```py\nartifact_uri: file:///home/jovyan/mlruns/0/518d3162be7347298abe4c88567ca3e7/artifacts\nend_time: 1602693152677\nentry_point_name: ''\nexperiment_id: '0'\nlifecycle_stage: active\nname: ''\nrun_id: 518d3162be7347298abe4c88567ca3e7\nrun_uuid: 518d3162be7347298abe4c88567ca3e7\nsource_name: ''\nsource_type: 4\nsource_version: ''\nstart_time: 1602693152313\nstatus: 3\ntags: []\nuser_id: jovyan\n```", "```py\n├── 46dc6db17fb5471a9a23d45407da680f\n│   ├── artifacts\n│   │   └── model\n│   │       ├── MLmodel\n│   │  ^   ├── conda.yaml\n│   │       ├── input_example.json\n│   │       └── model.pkl\n```", "```py\npip install mlflow\n```", "```py\nname: condapred\nconda_env:\n  image: conda.yaml\nentry_points:\n  main:\n    command: \"python mljob.py\"\n```", "```py\nname: syspred\nentry_points:\n  main:\n    command: \"python mljob.py\"\n```", "```py\nname: syspred\ndocker_env:\n  image: stockpred-docker\nentry_points:\n  main:\n    command: \"python mljob.py\"\n```", "```py\n    name: stockpred\n    docker_env:\n      image: stockpred-docker\n    entry_points:\n      main:\n        command: \"python train.py\"\n    ```", "```py\n    FROM continuumio/miniconda:4.5.4\n    RUN pip install mlflow==1.11.0 \\\n        && pip install numpy==1.14.3 \\\n        && pip install scipy \\\n        && pip install pandas==0.22.0 \\\n        && pip install scikit-learn==0.20.4 \\\n        && pip install cloudpickle \\\n        && pip install pandas_datareader>=0.8.0\n    ```", "```py\n    import numpy as np\n    import datetime\n    import pandas_datareader.data as web\n    from sklearn.model_selection import train_test_split\n    from sklearn.ensemble import RandomForestClassifier\n    from sklearn.metrics import classification_report\n    from sklearn.metrics import precision_score\n    from sklearn.metrics import recall_score\n    from sklearn.metrics import f1_score\n    import mlflow.sklearn\n    ```", "```py\n    def acquire_training_data():\n        start = datetime.datetime(2019, 7, 1)\n        end = datetime.datetime(2019, 9, 30)\n        df = web.DataReader(\"BTC-USD\", 'yahoo', start, end)\n        return df\n    ```", "```py\n    def digitize(n):\n        if n > 0:\n            return 1\n        return 0\n    def rolling_window(a, window):\n        \"\"\"\n            Takes np.array 'a' and size 'window' as parameters\n            Outputs an np.array with all the ordered sequences of values of 'a' of size 'window'\n            e.g. Input: ( np.array([1, 2, 3, 4, 5, 6]), 4 )\n                 Output:\n                         array([[1, 2, 3, 4],\n                               [2, 3, 4, 5],\n                               [3, 4, 5, 6]])\n        \"\"\"\n        shape = a.shape[:-1] + (a.shape[-1] - window + 1, window)\n        strides = a.strides + (a.strides[-1],)\n        return np.lib.stride_tricks.as_strided(a, shape=shape, strides=strides)\n    def prepare_training_data(data):\n        data['Delta'] = data['Close'] - data['Open']\n        data['to_predict'] = data['Delta'].apply(lambda d: digitize(d))\n        return data\n    ```", "```py\n    if __name__ == \"__main__\":\n        with mlflow.start_run():\n        training_data = acquire_training_data()\n        prepared_training_data_df = prepare_training_data(training_data)\n        btc_mat = prepared_training_data_df.as_matrix()\n        WINDOW_SIZE = 14\n        X = rolling_window(btc_mat[:, 7], WINDOW_SIZE)[:-1, :]\n        Y = prepared_training_data_df['to_predict'].as_matrix()[WINDOW_SIZE:]\n        X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.25, random_state=4284, stratify=Y)\n        clf = RandomForestClassifier(bootstrap=True, criterion='gini', min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=50, random_state=4284, verbose=0)\n        clf.fit(X_train, y_train)\n        predicted = clf.predict(X_test)\n        mlflow.sklearn.log_model(clf, \"model_random_forest\")\n        mlflow.log_metric(\"precision_label_0\", precision_score(y_test, predicted, pos_label=0))\n        mlflow.log_metric(\"recall_label_0\", recall_score(y_test, predicted, pos_label=0))\n        mlflow.log_metric(\"f1score_label_0\", f1_score(y_test, predicted, pos_label=0))\n        mlflow.log_metric(\"precision_label_1\", precision_score(y_test, predicted, pos_label=1))\n        mlflow.log_metric(\"recall_label_1\", recall_score(y_test, predicted, pos_label=1))\n        mlflow.log_metric(\"f1score_label_1\", f1_score(y_test, predicted, pos_label=1))\n    ```", "```py\n    ├── Dockerfile\n    ├── MLproject\n    ├── README.md\n    └── train.py\n    ```", "```py\n    stockpred tag. This image will be usable in MLflow in the subsequent steps as the model is now logged into your local registry. Following execution of this command, you should expect a successful Docker build:\n\n    ```", "```py\n\n    ```", "```py\n    mlflow run .\n    ```", "```py\n    MLFLOW_EXPERIMENT_ID=0 stockpred:3451a1f python train.py' in run with ID '442275f18d354564b6259a0188a12575' ===\n                  precision    recall  f1-score   support\n               0       0.61      1.00      0.76        11\n               1       1.00      0.22      0.36         9\n        accuracy                           0.65        20\n       macro avg       0.81      0.61      0.56        20\n    weighted avg       0.79      0.65      0.58        20\n    2020/10/15 19:19:39 INFO mlflow.projects: === Run (ID '442275f18d354564b6259a0188a12575') succeeded ===\n    ```", "```py\nmlflow run https://github.com/PacktPublishing/Machine-Learning-Engineering-with-MLflow/tree/master/Chapter01/stockpred\n```", "```py\nmlflow ui\n```", "```py\n├── MLmodel\n├── conda.yaml\n└── model.pkl\n```", "```py\nartifact_path: model_random_forest\nflavors:\n  python_function:\n    env: conda.yaml\n    loader_module: mlflow.sklearn\n    model_path: model.pkl\n    python_version: 3.7.6\n  sklearn:\n    pickled_model: model.pkl\n    serialization_format: cloudpickle\n    sklearn_version: 0.23.2\nrun_id: 22c91480dc2641b88131c50209073113\nutc_time_created: '2020-10-15 20:16:26.619071'\n~\n```", "```py\nmlflow models serve -m ./mlruns/0/b9ee36e80a934cef9cac3a0513db515c/artifacts/model_random_forest/\n```", "```py\ncurl http://127.0.0.1:5000/invocations -H 'Content-Type: application/json' -d '{\"data\":[[1,1,1,1,0,1,1,1,0,1,1,1,0,0]]}' [1]%\n```"]