- en: '12'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '12'
- en: Deploying, Testing, and Operating an Intelligent MSA Enterprise System
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署、测试和运营智能 MSA 企业系统
- en: In the previous chapters, we talked in detail about microservices, monolithic
    architecture, the pros and cons of each architecture, how to transition into MSA,
    and how to make the MSA system smarter using AI services. We also discussed, in
    [*Chapter 11*](B18934_11.xhtml#_idTextAnchor132), some of the best practices for
    deploying the MSA system.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，我们详细讨论了微服务、单体架构、每种架构的优缺点、如何过渡到 MSA 以及如何使用 AI 服务使 MSA 系统更智能。我们还在 [*第
    11 章*](B18934_11.xhtml#_idTextAnchor132) 中讨论了部署 MSA 系统的一些最佳实践。
- en: In this final chapter, we will integrate all the topics and concepts covered
    throughout the book to understand how we can apply what we have learned through
    hands-on and practical examples.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的最后，我们将整合整本书中涵盖的所有主题和概念，以了解我们如何通过实际和实用的示例应用我们所学的知识。
- en: Before we dive into the details, we need to understand what existing system
    we have in place first.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入细节之前，我们需要首先了解我们现有的系统是什么。
- en: Obviously, every organization is different and has different deployment needs,
    criteria, and dependencies. Some organizations will deploy in a greenfield, and
    others in a brownfield. In order to walk you through detailed practical examples
    and steps for deploying, testing, and operating an intelligent MSA system, we
    will assume a brownfield environment with an existing monolithic architecture
    system.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，每个组织都是不同的，并且有不同的部署需求、标准和依赖关系。一些组织将在绿地（全新环境）部署，而另一些组织将在棕地（现有环境）部署。为了向您详细介绍部署、测试和操作智能
    MSA 系统的详细实际示例和步骤，我们将假设一个具有现有单体架构系统的棕地环境。
- en: 'We will sometimes use our ABC-Monolith as an example of the existing system
    to illustrate the concepts covered in the chapter. In this chapter, we will cover,
    the following topics:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有时会以我们的 ABC-Monolith 作为现有系统的例子来阐述本章中涵盖的概念。在本章中，我们将涵盖以下主题：
- en: Overcoming deployment dependencies
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 克服部署依赖关系
- en: Deploying the MSA system
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署 MSA 系统
- en: Testing and tuning the MSA system
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试和调整 MSA 系统
- en: The post-deployment review
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署后的审查
- en: Overcoming system dependencies
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 克服系统依赖关系
- en: Before deploying the ABC-Intelligent-MSA system we built earlier in [*Chapter
    10*](B18934_10.xhtml#_idTextAnchor115), it is important to first decide what our
    deployment strategy should be. Based on the requirements, cost, complexity, and
    pros and cons of the deployment strategies we discussed in [*Chapter 11*](B18934_11.xhtml#_idTextAnchor132),
    we believe the best deployment strategy for our ABC system would be a mix between
    the ramped deployment and canary deployment strategies.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在部署我们在 [*第 10 章*](B18934_10.xhtml#_idTextAnchor115) 中构建的 ABC-Intelligent-MSA
    系统之前，首先决定我们的部署策略是什么非常重要。根据需求、成本、复杂性和我们在 [*第 11 章*](B18934_11.xhtml#_idTextAnchor132)
    中讨论的部署策略的优缺点，我们相信 ABC 系统的最佳部署策略将是渐增部署和金丝雀部署策略的混合。
- en: This deployment strategy will allow us to keep the ABC-Monolith system online
    and serve users uninterrupted while we deploy the new ABC-Intelligent-MSA system.
    We will gradually replace older components in ABC-Monolith with the corresponding
    microservices in the ABC-Intelligent-MSA system. This can be accomplished by routing
    traffic from the older components to those ABC-Intelligent-MSA system microservices.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这种部署策略将使我们能够在部署新的 ABC-Intelligent-MSA 系统的同时保持 ABC-Monolith 系统在线并服务用户，不间断地运行。我们将逐步用
    ABC-Intelligent-MSA 系统中的相应微服务替换 ABC-Monolith 中的旧组件。这可以通过将流量从旧组件路由到 ABC-Intelligent-MSA
    系统的微服务来实现。
- en: Although this trickle approach has lower cost, lower complexity, and lower risk
    than other deployment approaches, we still need to carefully study the incompatibilities,
    dependencies, and the proper integration between older and newer components.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这种涓流式方法比其他部署方法具有更低的成本、更低的复杂性和更低的风险，但我们仍然需要仔细研究新旧组件之间的不兼容性、依赖关系和适当的集成。
- en: Furthermore, we will need to evaluate which of our infrastructure and existing
    system ABC-Monolith’s components can be reused in the new architecture, if any.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还需要评估我们的基础设施和现有系统 ABC-Monolith 的哪些组件可以在新的架构中重用，如果有的话。
- en: Reusable ABC-Monolith components and dependencies
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可重用的 ABC-Monolith 组件和依赖关系
- en: We cannot think of a specific ABC-Monolith code base component that can be reused
    as is without modification. All of the ABC-Monolith components will have to be
    either rewritten from scratch or modified to different degrees to be compatible
    with the ABC-Intelligent-MSA system.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们无法想到一个具体的ABC-Monolith代码库组件可以未经修改直接重用。所有的ABC-Monolith组件都必须从头开始重写或者进行不同程度的修改，以便与ABC-Intelligent-MSA系统兼容。
- en: Some of the ABC-Monolith and existing infrastructure components that we know
    can be reused are the business logic itself, server infrastructure, operating
    systems, virtualization infrastructure, data storage, network infrastructure,
    existing monitoring, and network management tools, and some of the software and
    database licensing. Nevertheless, even these components may need to be updated
    or upgraded in order to perform the functions of the new system.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们知道可以重用的ABC-Monolith和现有基础设施组件包括业务逻辑本身、服务器基础设施、操作系统、虚拟化基础设施、数据存储、网络基础设施、现有的监控和网络管理工具，以及一些软件和数据库许可。尽管如此，即使这些组件也可能需要更新或升级，以便执行新系统的功能。
- en: In our system installation, command line, and code examples listed in earlier
    chapters, we had the most updated Ubuntu, Python, and database versions. In a
    real-life situation, however, that may not be the case; we will likely have the
    monolithic application running in an older operating system and have an older
    Python and/or database version.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们之前章节中列出的系统安装、命令行和代码示例中，我们使用了最新的Ubuntu、Python和数据库版本。然而，在实际情况下，情况可能并非如此；我们可能会在较旧的操作系统上运行单体应用程序，并且使用较旧的Python和/或数据库版本。
- en: These situations may produce some incompatibilities between the older components
    and the newer ones. An older Python version, for example, may have some deprecated
    functions that are no longer valid with the new MSA code base, and hence, will
    require some updates or upgrades to the existing system. Furthermore, the potentially
    different technology stack may also produce more dependencies.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这些情况可能会导致旧组件和新组件之间产生一些不兼容性。例如，较旧的Python版本可能有一些已弃用的函数，在新MSA代码库中不再有效，因此，需要对现有系统进行一些更新或升级。此外，可能不同的技术栈也可能产生更多的依赖。
- en: In order to minimize these dependencies, we would rather deploy the new system
    components on a separate server or virtual infrastructure with their own environment,
    including their own data storage and using their own technology stack. The new
    environment will have a container engine that will carry all of our ABC-Intelligent-MSA
    microservices.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 为了最小化这些依赖，我们宁愿在具有自己环境（包括自己的数据存储和自己的技术栈）的独立服务器或虚拟基础设施上部署新的系统组件。新的环境将有一个容器引擎，它将携带我们所有的ABC-Intelligent-MSA微服务。
- en: It is important to note that each system is different, and the specific reusable
    and non-reusable components will vary depending on the existing monolithic system.
    A thorough analysis and evaluation of the existing system’s components is necessary
    to determine what can and cannot be reused when migrating to a microservices architecture.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要注意，每个系统都是不同的，可重用和非可重用的组件将根据现有的单体系统而有所不同。对现有系统组件进行彻底的分析和评估是必要的，以确定在迁移到微服务架构时可以和不能重用哪些组件。
- en: Mitigating ABC-Intelligent-MSA deployment risks
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 缓解ABC-Intelligent-MSA部署风险
- en: Some of the risks discussed in [*Chapter 11*](B18934_11.xhtml#_idTextAnchor132)
    are relevant to our scenario. However, we still need to determine which CAPEX
    risks are applicable, examine the risks related to deployment time, potential
    service disruption, and OPEX, and take specific actions to mitigate these risks.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第11章*](B18934_11.xhtml#_idTextAnchor132)中讨论的一些风险与我们的场景相关。然而，我们仍然需要确定哪些资本支出风险是适用的，检查与部署时间、潜在的服务中断和运营成本相关的风险，并采取具体措施来缓解这些风险。
- en: Since we are using containers on top of virtualized infrastructure in our implementation,
    CAPEX risks are significantly reduced. As long as the existing infrastructure
    has the storage and workload capacity to absorb the new ABC system, we are safe.
    If additional infrastructure resources are needed, we may then need to look into
    some capacity planning and upgrades to be able to run the system during and after
    the deployment.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们在实现中是在虚拟化基础设施之上使用容器，因此资本支出风险显著降低。只要现有基础设施有足够的存储和工作负载容量来吸收新的ABC系统，我们就是安全的。如果需要额外的基础设施资源，我们可能需要考虑一些容量规划和升级，以便在部署期间和部署后运行系统。
- en: Adopting a trickle migration approach gives us the chance to catch up quickly
    with any learning curve involved with the new technologies being deployed, which,
    in return, helps mitigate system failure risks and deployment delays.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 采用渐进式迁移方法给我们提供了快速赶上新部署技术中涉及的学习曲线的机会，这反过来有助于缓解系统故障风险和部署延迟。
- en: The ramped deployment strategy also helps mitigate other OPEX risks. As we will
    discuss in this chapter, during the deployment, we can test and monitor the performance
    of the newly deployed components, identify and resolve any issues, and make necessary
    adjustments before redirecting all traffic to these new components.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 逐步部署策略也有助于缓解其他OPEX风险。正如我们将在本章讨论的，在部署过程中，我们可以测试和监控新部署组件的性能，识别和解决任何问题，并在将所有流量重定向到这些新组件之前进行必要的调整。
- en: Another way of mitigating OPEX risks is to establish a robust change management
    process by establishing a structured and transparent process for managing changes.
    This includes creating clear guidelines for how changes will be proposed, evaluated,
    approved, and implemented, as well as communicating the changes to relevant stakeholders.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种缓解OPEX风险的方法是通过建立一个结构化和透明的变更管理流程来建立一个强大的变更管理流程。这包括创建明确的指南，说明如何提出、评估、批准和实施变更，以及向相关利益相关者传达变更。
- en: 'Part of the change management process is the rollback plan. The rollback plan
    is essential to bringing back the system to an operational state if a specific
    technical change is unsuccessful. The following are the steps we need to consider
    to build a successful rollback plan:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 变更管理过程的一部分是回滚计划。如果特定的技术更改失败，回滚计划对于将系统恢复到操作状态至关重要。以下是我们需要考虑的步骤，以构建一个成功的回滚计划：
- en: 'Specify some checkpoints for the change where a rollback may be needed. In
    our example, and should the ACL be used, the ACL would be deployed prior to switching
    any traffic to the new microservice. During the change (and right after switching
    some test traffic to the ABC-Intelligent-MSA), a few good checkpoint examples
    would be as follows:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 指定一些变更检查点，在这些检查点可能需要回滚。在我们的例子中，如果使用ACL，ACL将在将任何流量切换到新微服务之前部署。在变更期间（以及将一些测试流量切换到ABC-Intelligent-MSA之后），一些好的检查点示例如下：
- en: Testing the payment verification communication between ABC-Monolith and the
    ACL
  id: totrans-31
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 测试ABC-Monolith和ACL之间的支付验证通信
- en: Testing how the ACL processes the requests
  id: totrans-32
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 测试ACL如何处理请求
- en: Testing the communication between the ACL and the ABC-Intelligent-MSA system
  id: totrans-33
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 测试ACL和ABC-Intelligent-MSA系统之间的通信
- en: Testing how the overall end-to-end requests are handled and whether they are
    processed as expected
  id: totrans-34
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 测试整体端到端请求的处理方式以及它们是否按预期处理
- en: 'Common Docker and Linux commands to test and troubleshoot the communication
    between the ACL, the monolith, and the MSA include the following:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 测试和排除ACL、单体和MSA之间通信的常见Docker和Linux命令包括以下内容：
- en: '`curl`, to simulate an API call to the ACL or a specific microservice'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`curl`，用于模拟对ACL或特定微服务的API调用'
- en: '`netstat`, to check whether a specific service is actively listening to connections,
    what the listening port is, and whether there are any active connections'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`netstat`，用于检查特定服务是否正在积极监听连接，监听端口是什么，以及是否存在任何活动连接'
- en: '`docker inspect`, to return detailed JSON information about a specific microservice’s
    configuration, state, and network settings'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docker inspect`，用于返回特定微服务的配置、状态和网络设置的详细JSON信息'
- en: '`docker log`, to view the logs of a running container'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docker log`，用于查看运行容器的日志'
- en: Develop a plan for reversing the change at each of the preceding specified checkpoints.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为每个先前指定的检查点制定一个逆转变化的计划。
- en: Whenever possible, test the rollback plan in a test or staging environment to
    ensure it is workable and complete.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在可能的情况下，在测试或预生产环境中测试回滚计划，以确保其可行性和完整性。
- en: Know the time by which the rollback plan needs to be completely executed at
    each of the specified checkpoints, and allocate a reasonable amount of time in
    your change for it.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 了解在每个指定的检查点，回滚计划需要完全执行的时间，并在您的变更中为其分配合理的时间。
- en: Monitor the system throughout the change and make adjustments as needed.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在变更期间监控系统，并根据需要做出调整。
- en: Have a post-mortem after the change, especially in case of a change failure.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 变更后进行事后分析，特别是在变更失败的情况下。
- en: In case the rollback plan is executed, the team will then need to include in
    the post-mortem the reasons for the change failure, and how effective the rollback
    plan was. They need to accordingly make the necessary adjustments to the deployment
    and rollback plan before scheduling another change.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果执行回滚计划，团队需要在事后分析变更失败的原因以及回滚计划的有效性。他们需要在安排下一次变更之前对部署和回滚计划进行必要的调整。
- en: By this point, we should have a clear understanding of the deployment dependencies
    and risks and be able to determine methods for mitigating them. We are ready now
    to create a deployment plan and execute it in a manner that minimizes downtime
    and maintains business continuity.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们应该对部署依赖关系和风险有清晰的理解，并能够确定缓解它们的方法。我们现在准备好创建一个部署计划，并以最小化停机时间和保持业务连续性的方式执行它。
- en: In the next section, we will build the ABC-Intelligent-MSA system’s deployment
    plan in the presence of the running ABC-Monolith system.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将构建在运行中的ABC-Monolith系统存在的情况下ABC-Intelligent-MSA系统的部署计划。
- en: Deploying the MSA system
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MSA系统的部署
- en: In [*Chapter 9*](B18934_09.xhtml#_idTextAnchor102) and [*Chapter 10*](B18934_10.xhtml#_idTextAnchor115),
    we discussed in detail how to install Docker, containers, and other components
    for our ABC-Intelligent-MSA system. This installation was mostly done in a lab
    environment with no specific regard to any existing system in the environment.
    We were basically just simulating a real-life development or staging environment.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第9章*](B18934_09.xhtml#_idTextAnchor102)和[*第10章*](B18934_10.xhtml#_idTextAnchor115)中，我们详细讨论了如何为ABC-Intelligent-MSA系统安装Docker、容器和其他组件。这个安装主要是在实验室环境中完成的，没有特别考虑环境中的任何现有系统。我们基本上只是在模拟现实生活中的开发或预发布环境。
- en: In this section, we will focus rather on how we can take the ABC-Intelligent-MSA
    system we built, and gradually migrate it into a brownfield production environment
    where we have the ABC-Monolith system already running in production. The goal
    is to ramp up the ABC-Intelligent-MSA system’s operations until the system is
    able to carry the entire existing traffic, then completely phase out the old ABC-Monolith.
    Everything should be done with minimal operational interruptions.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将重点关注如何将我们构建的ABC-Intelligent-MSA系统逐步迁移到已经运行ABC-Monolith系统的brownfield生产环境中。目标是逐步提升ABC-Intelligent-MSA系统的运行能力，直到系统能够承载全部现有流量，然后完全淘汰旧的ABC-Monolith系统。所有操作都应尽量减少运营中断。
- en: The current status by now is that we still have ABC-Monolith running in production,
    and the ABC-Intelligent-MSA running in the staging environment. The following
    are detailed broken-down deployment plans with their execution steps.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们仍在生产中运行ABC-Monolith，ABC-Intelligent-MSA运行在预发布环境中。以下是与执行步骤详细分解的部署计划。
- en: The anti-corruption layer
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 防腐层
- en: Both our ABC-Monolith and ABC-Intelligent-MSA systems use the same type of RESTful
    APIs and the same JSON data formats. Moreover, our demo system is not complicated
    enough to justify an ACL. We, therefore, won’t be needing an ACL in our migration.
    However, we developed an ACL in our demo just in case you decide to try it out.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的ABC-Monolith和ABC-Intelligent-MSA系统使用相同类型的RESTful API和相同的JSON数据格式。此外，我们的演示系统并不复杂，不足以证明ACL的必要性。因此，在我们的迁移中我们不需要ACL。然而，我们还是在演示中开发了一个ACL，以防你决定尝试它。
- en: In case you are interested in trying the ACL, the first step you would need
    to do is to get the ACL up and running. The ACL will act as a buffer and handle
    the communication between the ABC-Monolith and the ABC-Intelligent-MSA systems.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你感兴趣尝试ACL，你需要做的第一步是启动ACL。ACL将充当缓冲区并处理ABC-Monolith和ABC-Intelligent-MSA系统之间的通信。
- en: '![Figure 12.1: Deploying with the ACL](img/B18934_12_1.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![图12.1：使用ACL进行部署](img/B18934_12_1.jpg)'
- en: 'Figure 12.1: Deploying with the ACL'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.1：使用ACL进行部署
- en: ACLs are usually a specific custom-built code for the organization’s specific
    situation, the old system, and the new MSA system. We built the `abc_acl` ACL
    for our ABC system. The `abc_acl` code can be found in our GitHub repository.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: ACL通常是针对组织特定情况、旧系统和新的MSA系统定制的特定代码。我们为ABC系统构建了`abc_acl` ACL。`abc_acl`代码可以在我们的GitHub仓库中找到。
- en: It would make much more sense to deploy all the new components, including `abc_acl`,
    on a separate host or virtual workload. In our lab examples, however, and for
    simplicity, we are building the new system’s containers on the same host that’s
    running the ABC-Monolith.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在单独的主机或虚拟工作负载上部署所有新组件，包括`abc_acl`，会更有意义。然而，在我们的实验室示例中，为了简化，我们是在运行ABC-Monolith的主机上构建新系统的容器。
- en: We built the **Facade**, **Adaptor**, and **Translator** components all together
    as part of the ACL in one microservice. The Facade is created to interface with
    the ABC-Monolith, the Adaptor to interface with the ABC-Intelligent-MSA, and the
    translator for input/output data format mappings. Since we are using the same
    data formats in both the monolith and the MSA systems, the translator code is
    not doing any processing and is just used as a placeholder.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将**门面**、**适配器**和**翻译器**组件作为一个整体构建到ACL中，作为一个微服务的一部分。门面是为了与ABC-Monolith接口而创建的，适配器是为了与ABC-Intelligent-MSA接口，而翻译器用于输入/输出数据格式映射。由于我们在单体和MSA系统中使用相同的数据格式，翻译器代码不做任何处理，仅用作占位符。
- en: 'We can set up and start the `abc_acl` microservice the same way we did with
    other microservices in [*Chapter 9*](B18934_09.xhtml#_idTextAnchor102) and [*Chapter
    10*](B18934_10.xhtml#_idTextAnchor115), using the `docker build` command to build
    the `abc_acl_image` image from the Dockerfile, then using the `docker run` command
    to create the `abc_acl_container` container, as follows:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以像在[*第9章*](B18934_09.xhtml#_idTextAnchor102)和[*第10章*](B18934_10.xhtml#_idTextAnchor115)中处理其他微服务一样设置并启动`abc_acl`微服务，使用`docker
    build`命令从Dockerfile构建`abc_acl_image`镜像，然后使用`docker run`命令创建`abc_acl_container`容器，如下所示：
- en: '[PRE0]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Once the image is successfully created, use the following command to run the
    container, and start listening to port TCP/8020 on the host’s IP:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦镜像成功创建，使用以下命令运行容器，并开始在主机的IP上监听TCP/8020端口：
- en: '[PRE1]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Now the ACL is running, it is time to test it before routing any traffic to
    it. We can do that using the shell `curl` command as we did in the previous chapters,
    or we can use some of the ACL built-in API tools created to verify the connection.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 现在ACL正在运行，在将任何流量路由到它之前，是时候对其进行测试了。我们可以使用与之前章节中相同的方式使用shell `curl`命令，或者我们可以使用一些ACL内置的API工具来验证连接。
- en: 'The following is a `curl` command issued on the host machine to ensure that
    the ACL is running successfully:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在主机机器上发出的`curl`命令，以确保ACL正在成功运行：
- en: '[PRE2]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The following is an example of another way to test the ACL – more specifically,
    to test the communication between the ACL and both ABC-Monolith and ABC-Intelligent-MSA
    systems:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个测试ACL的另一种方式的示例——更具体地说，是测试ACL与ABC-Monolith和ABC-Intelligent-MSA系统之间的通信：
- en: '[PRE3]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The first `curl` command ensures that the ACL is listening to API calls from
    both ABC-Monolith and ABC-Intelligent-MSA, while the second `curl` command ensures
    that the ACL can successfully communicate with both systems.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个`curl`命令确保ACL正在监听来自ABC-Monolith和ABC-Intelligent-MSA的API调用，而第二个`curl`命令确保ACL可以成功与这两个系统通信。
- en: The ACL operation is now verified; in the next subsection, we will start migrating
    the MSA services from the staging (or lab) environment to the actual production
    environment running the old monolithic system.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: ACL操作现在已验证；在下一小节中，我们将开始将MSA服务从预发布（或实验室）环境迁移到运行旧单体系统的实际生产环境。
- en: Integrating the MSA system’s services
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 集成MSA系统的服务
- en: With the ACL now up and running and tested successfully, we are ready to start
    switching specific traffic to specific parts of the ABC-Intelligent-MSA. We will,
    however, use direct interaction between both the monolith and the MSA system since
    the ACL is not really needed in our demo example.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在ACL已经启动并成功测试，我们准备开始将特定流量切换到ABC-Intelligent-MSA的特定部分。然而，由于在我们的演示示例中ACL实际上并不需要，我们将使用单体和MSA系统之间的直接交互。
- en: Please note that, depending on the existing monolith structure, design, and
    system’s code base, this process could either be very straightforward or as complicated
    as can be. Our deployment strategy requires some code changes in the monolith
    system to be able to route some parts of the traffic to the new MSA.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，根据现有的单体结构、设计和系统代码库，这个过程可能非常简单，也可能非常复杂。我们的部署策略需要在对单体系统进行一些代码更改后，才能将部分流量路由到新的MSA。
- en: For that reason, we may very well choose, in some systems, to have the MSA completely
    tested in a staging environment, then put the MSA on an LA period where partial
    production traffic is passing through the system for deeper testing. Then, once
    comfortable with the new MSA system’s performance, we can just start forwarding
    the entire production traffic, and finally, shut down the old monolith.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 12**.2* shows a high-level view of the migration before and after status.
    During the migration, we will route a specific function of ABC-Monolith to one
    microservice in ABC-Intelligent-MSA. That microservice should be able to replace
    the corresponding function in the ABC-Monolith system. After we test the operation
    of that part of the migration, we then move traffic of another monolithic function,
    then another, and so on, until we end up migrating all of the ABC-Monolith functions
    to the ABC-Intelligent-MSA system.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.2: A high-level view of where we are and where to be](img/B18934_12_2.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.2: A high-level view of where we are and where to be'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: We can start with a simple microservice such as `abc_msa_notify_user_container`).
    We can route the traffic destined to the `notify_user()` function in the ABC-Monolith
    by replacing the function’s code with an API call to `abc_msa_notify_user_container`.
    All user traffic will still flow through the ABC-Monolith, but all user notifications
    will be processed through the ABC-Intelligent-MSA.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: In the same manner, the `abc_msa_customer_management_container`) should replace
    the `register_customer()` function from the ABC-Monolith, and `place_order()`
    and `order_status_update()` functions, and so on.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: As the system stabilizes, we gradually migrate to other MSA services. That migration
    cycle is shown in *Figure 12**.3*.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: By following the migration cycle, eventually, all of the ABC-Monolith functions
    will be replaced with microservices in the ABC-Intelligent-MSA system.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.3: The microservices integration testing and tuning cycle](img/B18934_12_3.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.3: The microservices integration testing and tuning cycle'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 12**.4* shows a snapshot of the system status during the migration
    process. In the figure, we have the **Notification Management**, **Customer Management**,
    and **Order Management** microservices successfully migrated, but not any other
    microservice yet.'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.4: A system snapshot during the migration process](img/B18934_12_4.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.4: A system snapshot during the migration process'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: Monitor the system closely during the monolithic function migration, and use
    the rollback plan if necessary. Once the last ABC-Monolith function is migrated
    to the new system, we will need to carefully run an end-to-end test on the ABC-Intelligent-MSA
    system to ensure the system is running properly and independent of the ABC-Monolith.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: Testing all microservice logs and stats is essential in the testing process.
    We need to have a formal testing process in place every step of the way during
    the migration process. The test process is described in more detail in the next
    section.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在测试过程中，测试所有微服务日志和统计信息是至关重要的。在迁移过程中，我们需要在每个步骤都建立正式的测试流程。测试过程将在下一节中更详细地描述。
- en: Keep both systems running for a period of time just in case some overseen issues
    take place and always be prepared with a contingency plan.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 保持两个系统运行一段时间，以防出现一些未预见的问题，并始终准备好应急计划。
- en: The final step is shutting down the monolith. If the migration steps were followed
    and tested correctly, user traffic and system operations should not be impacted.
    However, complex systems may have a component or more still processing traffic.
    To avoid business interruptions in this situation, it is best to shut down the
    monolith during a maintenance window to allow the migration team to analyze any
    unforeseen issues and create a plan to resolve them.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是关闭单体。如果迁移步骤被正确遵循和测试，用户流量和系统操作不应受到影响。然而，复杂的系统可能有一个或多个组件仍在处理流量。为了避免这种情况下的业务中断，最好在维护窗口期间关闭单体，以便迁移团队能够分析任何意外问题并制定解决这些问题的计划。
- en: In this section, using our ABC system, we explained the MSA system deployment
    process using an ACL and using a direct monolith-to-microservices approach. We
    covered the steps to be taken, what to watch for, and how to make the transition
    to the new system as smooth as possible with minimal system interruption.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们使用我们的 ABC 系统，通过 ACL 和直接单体到微服务的途径解释了 MSA 系统的部署过程。我们涵盖了需要采取的步骤、需要注意的事项以及如何以最小的系统中断尽可能使过渡到新系统变得顺利。
- en: In the next section, we will cover the formal test methodology that should be
    planned and followed after every microservice migration to ensure system reliability
    and stability.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将介绍在每次微服务迁移后应计划并遵循的正式测试方法，以确保系统的可靠性和稳定性。
- en: Testing and tuning the MSA system
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试和调整 MSA 系统
- en: Prior to deploying microservices, a formal testing or QA process should be applied
    to each microservice to prevent errors during deployment and in production.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在部署微服务之前，应该对每个微服务应用正式的测试或质量保证流程，以防止部署和生产过程中的错误。
- en: There are a couple of tests that need to be performed on the MSA system microservices
    before deploying them in the production environment. First, testing the microservice
    itself as a standalone and before integrating it into any parts of the ABC system
    – what we refer to it as, **unit testing**. Second, testing the integration of
    that microservice into the ABC-Intelligent-MSA system – what we refer to it as
    **integration testing**. And third, testing how the microservice functions during
    an interim mix of operations between the ABC-Monolith and the ABC-Intelligent-MSA
    systems.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在将 MSA 系统微服务部署到生产环境之前，需要对这些微服务执行一些测试。首先，测试微服务本身作为一个独立单元，在将其集成到 ABC 系统的任何部分之前——我们称之为**单元测试**。其次，测试该微服务集成到
    ABC-Intelligent-MSA 系统中——我们称之为**集成测试**。第三，测试微服务在 ABC-Monolith 和 ABC-Intelligent-MSA
    系统之间的操作混合期间的功能。
- en: Testing the ABC system functions every time a new microservice is deployed is
    crucial to ensure a successful migration and that the system is able to properly
    function and sustain the applied traffic load and user requests.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 每次部署新的微服务时，测试 ABC 系统功能对于确保成功迁移和系统能够正确运行并承受应用流量负载和用户请求至关重要。
- en: Building structured test cases is an important part of the testing process.
    Test cases are a set of steps that describe how to test a specific feature or
    functionality of a system. These test cases should be well defined, easy to understand,
    and should cover all possible scenarios.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 构建结构化的测试用例是测试过程中的重要部分。测试用例是一系列步骤，描述了如何测试系统的一个特定功能或功能。这些测试用例应该定义清晰、易于理解，并覆盖所有可能的场景。
- en: 'Creating a test case should include the following main steps:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 创建测试用例应包括以下主要步骤：
- en: Identify the requirements of the system and the feature or functionality that
    we want to test.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确定系统的需求和我们要测试的功能或功能。
- en: Write a test case that describes the steps to be taken to test that feature
    or functionality.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个描述测试该功能或功能的步骤的测试用例。
- en: In the test case, specify any prerequisites that are required to run the test.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在测试用例中，指定运行测试所需的任何先决条件。
- en: Identify the pass/fail criteria based on the expected outcome of the test case.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the test case and compare the test results to the expected outcome. Accordingly,
    and based on the pass/criteria specified, record the result of the test in simple
    PASS or FAIL terms.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The following is a simple example of a test case for the **Notification Management**
    microservice. The test case verifies that the microservice is actually sending
    an SMS notification to a registered user’s mobile number. Another test case should
    also be written to test the microservice’s email *Send* functionality. We can
    write as many test cases as needed for each individual microservice, and for the
    system functionality overall.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: '| **Test** **Case Details** |'
  id: totrans-105
  prefs: []
  type: TYPE_TB
- en: '| Title | ABC-Intelligent-MSA Notification Management Microservice SMS Functionality
    |'
  id: totrans-106
  prefs: []
  type: TYPE_TB
- en: '| ID | 002912 |'
  id: totrans-107
  prefs: []
  type: TYPE_TB
- en: '| Description | To ensure that the microservice is actually sending an SMS
    notification to the specified mobile number |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
- en: '| Requirement(s) | Access to the SMS gateway. |'
  id: totrans-109
  prefs: []
  type: TYPE_TB
- en: '| Test Setup | Have access to the receiver test phone +1 (555) 555-5555.Have
    access to the Ubuntu test environment.Verify SMS gateway access. |'
  id: totrans-110
  prefs: []
  type: TYPE_TB
- en: '| Procedure | Ensure the `abc_msa_notify_user_container` container is running,
    or start it as follows:`docker container` `start abc_msa_notify_user_container`Issue
    a shell `curl` command as follows:`curl http://192.168.1.100:8010/api?func=send_sms&num=15555555555&msg=order+received`
    |'
  id: totrans-111
  prefs: []
  type: TYPE_TB
- en: '| Test Type | Unit testing |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
- en: '| Pass/Fail Criteria | Test case passes if you receive the message “order received”
    on the test phone |'
  id: totrans-113
  prefs: []
  type: TYPE_TB
- en: Table 12.1 – A sample test case for notification management in ABC-Intelligent-MSA
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: Testing the AI services of the ABC-Intelligent-MSA system can be more challenging,
    and the conventional test case approach may not be sufficient. Testing the AI
    part of the system will require a multi-level approach that would require including
    the microservice itself in isolation (unit testing), integration testing, functional
    testing, performance testing, data validation testing, and human-in-the-loop testing.
    By using all these approaches together in building your test cases, we can ensure
    that the AI components of the system are functioning as intended and are making
    accurate predictions and decisions.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we covered the importance of building a structured testing
    process and built a test case example as part of our system’s testing process.
    We discussed how to create a test case and identify the requirements and expected
    outcomes.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will talk about the importance of conducting a post-deployment
    review after the completion of the ABC-Intelligent-MSA system deployment. The
    section will also cover the different types of post-deployment reviews, including
    user feedback reviews.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: The post-deployment review
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The ABC-Intelligent-MSA system is currently running, but it hasn’t been operational
    for a sufficient amount of time to guarantee its stability and resilience under
    typical traffic patterns and loads. A post-deployment review is crucial for ensuring
    the success of the ABC system deployment and its compliance, as well as enhancing
    its functionality and overall user satisfaction.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: During the post-deployment review, we will need to monitor the system closely
    and look for any errors, bugs, or any other operational problems that may happen.
    Then, we will need to make recommendations for addressing system issues and making
    necessary improvements to the system to ensure that the system is meeting the
    user requirements it was created for.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: We need to have special monitoring for the AI services we built in the system
    to make sure they are performing as they are supposed to and continuously improving
    themselves and the system’s operations overall. A closer look at the AI services
    logs that we discussed in [*Chapter 10*](B18934_10.xhtml#_idTextAnchor115) is
    important to ensure the system’s stability and enhanced performance.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: The following are some of the aspects and criteria that need to be considered
    when conducting a post-deployment review.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: Checking the new system’s performance
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We start by defining performance metrics, which will help us create a baseline
    for what to expect from the system, in terms of response time, user interactions,
    network traffic, and so on. We can use tools available on the internet or the
    `ms_perfmon.py` we previously discussed in [*Chapter 10*](B18934_10.xhtml#_idTextAnchor115)
    to measure the performance of the new system and compare that to the monolith’s
    performance.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: The variance between both the old and the new system’s performances would highly
    depend on the design, architecture, operational criteria, and infrastructure used
    in both cases.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: Identifying and fixing system defects
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This goes back to the testing and tuning process discussed earlier, and how
    the process should be conducted. It is important to point out here that post-deployment,
    identifying system defects is not yet part of the QA process until they are first
    documented in the organization’s defect tracking system.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: We are talking here about monitoring the operational aspects of the system and
    ensuring proper system supportability. The support process may very well lead
    to filing specific issues found in the system post-deployment. Later, a thorough
    investigation of customer support cases with their severity levels will need to
    be conducted to address and fix these issues.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: System issues can also be identified by gathering customer feedback, as we will
    discuss in the next couple of sections, as well as from the outcomes of the different
    audit processes conducted on the system post-deployment.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: Compliance
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Perform regular maintenance and updates to the system to keep it running smoothly.
    As briefly discussed in [*Chapter 8*](B18934_08.xhtml#_idTextAnchor086), a considerable
    part of compliance can be done through automation or commercial tools. The tools
    will help audit the system for different types of compliances, such as the GDPR,
    PCI, HIPAA, SCSEM, and so on. The specific compliances that an organization has
    to comply with will depend on the organization’s business itself, the nature of
    the system, and what processes and users it is serving.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: Start by identifying the relevant regulations and standards that apply to the
    new system. This may include data privacy regulations, industry-specific standards,
    and cybersecurity standards.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: Conduct a risk assessment the way we described in the previous chapter, to identify
    any potential areas of non-compliance and their associated risks. This may involve
    reviewing the process of the system’s design, architecture, and data processing.
    Then, put together a mitigation plan to mitigate the identified risks.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: Make sure the organization’s staff are fully aware of compliance, its importance,
    and the individual roles and responsibilities in that regard. Keeping the staff
    trained is another aspect of keeping the organization compliant with specific
    rules, regulations, and specific industry compliances.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: The compliance process is not a one-time thing, the organization has to conduct
    regular audits to maintain that compliance. Audits may include regularly running
    specific automated audit tools, and conducting manual system audits by checking
    system logs, data checks, physical and digital security checks, and so on.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: System maintenance and updates
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Just like your preventive car maintenance, performing regular system maintenance
    and updates is important to keep the system running smoothly with no sudden unplanned
    failures.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: 'By planning, preparing, testing, implementing, monitoring, documenting the
    process, and taking a proactive role, we can ensure that our newly deployed system
    is functioning as expected and able to minimize operational interruptions. The
    following are a few points to consider in the maintenance plan:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: Put together a regular maintenance plan. This is a must-have for successful
    and reliable operations. This includes which part of the system needs to be updated,
    what maintenance activities need to be conducted and how often, prioritizing the
    maintenance tasks, and determining the resources required.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make sure you have a regular system backup plan in place and have an updated
    backup before any maintenance work. This is important to bring back the system
    to its original state in case of any work mishaps.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Test any planned work before actually applying the update or the change. Test
    the change thoroughly in a lab or staging environment to ensure it is functioning
    as expected.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Monitor the system after the updates have been deployed. This includes monitoring
    performance metrics, running automated checks, checking users’ feedback, and checking
    system logs.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Update your documentation with the changes, and document the maintenance and
    update outcome. The documentation will help ensure that the maintenance and update
    process is repeatable for future reference, and help troubleshoot in case of any
    issues that may happen in the future.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the beginning, the maintenance plan may not be as perfect as you may like
    it to be, but as the process is repeated during the lifetime of the system, the
    process will eventually get refined to a very accurate level.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: User satisfaction
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Monitoring and improving user satisfaction are sometimes underestimated in the
    success of deploying any new IT system. By gathering feedback from the system’s
    internal and external customers, analyzing that feedback, prioritizing changes,
    implementing changes, monitoring progress, and continuously improving, we can
    ensure that the system meets customer requirements.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a four-step cycle for ensuring high customer satisfaction
    post-deployment:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.5: The four-step customer satisfaction cycle](img/B18934_12_5.jpg)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.5: The four-step customer satisfaction cycle'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: The first step in monitoring our customer satisfaction is to gather feedback
    from the system users. The feedback can be collected through surveys, direct customer
    interaction and visits, phone conversations, and so on.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Analyze the gathered feedback to identify common complaints, common patterns,
    and specific use cases that may have not been covered during the system testing
    phase. This will help us understand the strengths of the system and the areas
    where we need to improve.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Prioritize whatever system changes are decided as an outcome of the gathered
    feedback. This part should have the biggest impact on customer satisfaction. It
    will show customers that you are addressing their concerns, reacting to their
    requests, and, sometimes, even being proactive to customer needs.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Implement the changes as prioritized. Start with the changes with the highest
    impact and lowest effort similar to what we discussed in [*Chapter 11*](B18934_11.xhtml#_idTextAnchor132)
    under the *Risk mitigation* section and in *Figure 11**.2*.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We need to continuously regather customer feedback to regularly monitor customer
    satisfaction progress. This will ensure that the changes being carried out are
    having the desired customer satisfaction effect.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: The four-step process will help continuously meet customer needs and improve
    customer satisfaction accordingly. The process helps also constantly improve the
    system features, supportability, reliability, and stability to enhance the overall
    user experience.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we covered the post-deployment review process, the different
    aspects, and activities that need to be considered when conducting the review,
    and how that is essential in the overall success of the ABC-Intelligent-MSA system
    operations.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we discussed, the various steps involved in the successful
    deployment of the new system. We talked about the importance of overcoming the
    system deployment dependencies, the importance of building structured test cases,
    and the steps involved in testing and tuning the system.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: By following the steps outlined in this chapter, organizations can ensure the
    successful deployment of their MSA system, including overcoming dependencies,
    integrating with the monolith during the transition phase, testing and tuning
    the system, and conducting a post-deployment review. The chapter concluded by
    emphasizing the significance of following a customer satisfaction cycle and having
    customers engaged in the process of adapting the new system’s operations.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
