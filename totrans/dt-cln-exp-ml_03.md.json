["```py\n    import pandas as pd\n    import matplotlib.pyplot as plt\n    import seaborn as sns\n    covidtotals = pd.read_csv(\"data/covidtotals.csv\")\n    covidtotals.set_index(\"iso_code\", inplace=True)\n    covidtotals.info()\n    <class 'pandas.core.frame.DataFrame'>\n    Index: 221 entries, AFG to ZWE\n    Data columns (total 16 columns):\n     #  Column                  Non-Null Count     Dtype\n    --  --------                ---------------    -------\n     0  lastdate                221    non-null    object \n     1  location                221    non-null    object \n     2  total_cases             192    non-null    float64\n     3  total_deaths            185    non-null    float64\n     4  total_cases_mill        192    non-null    float64\n     5  total_deaths_mill       185    non-null    float64\n     6  population              221    non-null    float64\n     7  population_density      206    non-null    float64\n     8  median_age              190    non-null    float64\n     9  gdp_per_capita          193    non-null    float64\n    10  aged_65_older           188    non-null    float64\n    11  total_tests_thous        13    non-null    float64\n    12  life_expectancy         217    non-null    float64\n    13  hospital_beds_thous     170    non-null    float64\n    14  diabetes_prevalence     200    non-null    float64\n    15  region                  221    non-null    object\n    dtypes: float64(13), object(3)\n    memory usage: 29.4+ KB\n    ```", "```py\n    totvars = ['location','total_cases_mill', \n      'total_deaths_mill']\n    demovars = ['population_density','aged_65_older', \n      'gdp_per_capita','life_expectancy', \n      'diabetes_prevalence']\n    covidkeys = covidtotals.loc[:, totvars + demovars]\n    ```", "```py\n    corrmatrix = covidkeys.corr(method=\"pearson\")\n    corrmatrix\n                      total_cases_mill  total_deaths_mill\\\n    total_cases_mill              1.00               0.71\n    total_deaths_mill             0.71               1.00\n    population_density            0.04              -0.03\n    aged_65_older                 0.53               0.53\n    gdp_per_capita                0.46               0.22\n    life_expectancy               0.57               0.46\n    diabetes_prevalence           0.02              -0.01\n                    population_density  aged_65_older  gdp_per_capita\\\n    total_cases_mill         0.04          0.53       0.46\n    total_deaths_mill       -0.03          0.53       0.22\n    population_density       1.00          0.06       0.41\n    aged_65_older            0.06          1.00       0.49\n    gdp_per_capita           0.41          0.49       1.00\n    life_expectancy          0.23          0.73       0.68\n    diabetes_prevalence      0.01         -0.06       0.12\n                      life_expectancy  diabetes_prevalence\n    total_cases_mill        0.57           0.02  \n    total_deaths_mill       0.46          -0.01  \n    population_density      0.23           0.01  \n    aged_65_older           0.73          -0.06  \n    gdp_per_capita          0.68           0.12  \n    life_expectancy         1.00           0.19  \n    diabetes_prevalence     0.19           1.00\n    ```", "```py\n    sns.heatmap(corrmatrix, xticklabels =\n      corrmatrix.columns, yticklabels=corrmatrix.columns, \n      cmap=\"coolwarm\")\n    plt.title('Heat Map of Correlation Matrix')\n    plt.tight_layout()\n    plt.show()\n    ```", "```py\n    covidkeys['total_cases_q'] = \\\n      pd.qcut(covidkeys['total_cases_mill'],\n      labels=['very low','low','medium','high',\n      'very high'], q=5, precision=0)\n    covidkeys['total_deaths_q'] = \\\n      pd.qcut(covidkeys['total_deaths_mill'],\n      labels=['very low','low','medium','high',\n      'very high'], q=5, precision=0)\n    ```", "```py\n    pd.crosstab(covidkeys.total_cases_q, \n      covidkeys.total_deaths_q)\n    total_deaths_q  very low  low  medium  high  very high\n    total_cases_q                                         \n    very low              27    7       0     0          0\n    low                    9   24       4     0          0\n    medium                 1    6      23     6          1\n    high                   0    0       6    21         11\n    very high              0    0       4    10         25\n    covidkeys.mean()\n    total_cases_mill         36,649\n    total_deaths_mill           683\n    population_density          453\n    aged_65_older                 9\n    gdp_per_capita           19,141\n    life_expectancy              73\n    diabetes_prevalence           8\n    ```", "```py\n    covidtotals.loc[(covidkeys.total_cases_q==\"very high\")\n      & (covidkeys.total_deaths_q==\"medium\")].T\n    iso_code            CYP        KWT        MDV    QAT\n    lastdate            2021-07-07 2021-07-07 2021-07-07  2021-07-07\n    location            Cyprus    Kuwait   Maldives  Qatar\n    total_cases         80,588    369,227  74,724  222,918\n    total_deaths        380       2,059    213     596\n    total_cases_mill    90,752    86,459   138,239 77,374\n    total_deaths_mill   428       482      394     207\n    population         888,005 4,270,563 540,542 2,881,060\n    population_density  128       232      1,454    227\n    median_age          37        34       31       32\n    gdp_per_capita      32,415    65,531   15,184   116,936\n    aged_65_older       13        2        4        1\n    total_tests_thous   NaN       NaN      NaN     NaN\n    life_expectancy     81        75       79      80\n    hospital_beds_thous 3         2        NaN     1\n    diabetes_prevalence 9         16       9       17\n    region              Eastern   West     South   West  \n                        Europe    Asia     Asia    Asia\n    ```", "```py\n    covidtotals.loc[(covidkeys. total_cases_q==\"medium\")\n      & (covidkeys.total_deaths_q==\"very high\")].T\n    iso_code                         MEX\n    lastdate                  2021-07-07\n    location                      Mexico\n    total_cases                2,558,369\n    total_deaths                 234,192\n    total_cases_mill              19,843\n    total_deaths_mill              1,816\n    population               128,932,753\n    population_density                66\n    median_age                        29\n    gdp_per_capita                17,336\n    aged_65_older                      7\n    total_tests_thous                NaN\n    life_expectancy                   75\n    hospital_beds_thous                1\n    diabetes_prevalence               13\n    region                 North America\n    ```", "```py\n    import pandas as pd\n    import numpy as np\n    import matplotlib.pyplot as plt\n    import seaborn as sns\n    covidtotals = pd.read_csv(\"data/covidtotals.csv\")\n    covidtotals.set_index(\"iso_code\", inplace=True)\n    ax = sns.regplot(x=\"total_cases_mill\",\n      y=\"total_deaths_mill\", data=covidtotals)\n    ax.set(xlabel=\"Cases Per Million\", ylabel=\"Deaths Per \n      Million\", title=\"Total COVID Cases and Deaths by \n      Country\")\n    plt.show()\n    ```", "```py\n    covidtotals.loc[(covidtotals.total_cases_mill<75000) \\\n      & (covidtotals.total_deaths_mill>5500)].T\n    iso_code                           PER\n    lastdate                    2021-07-07\n    location                          Peru\n    total_cases                  2,071,637\n    total_deaths                   193,743\n    total_cases_mill                62,830\n    total_deaths_mill                5,876\n    population                  32,971,846\n    population_density                  25\n    median_age                          29\n    gdp_per_capita                  12,237\n    aged_65_older                        7\n    total_tests_thous                  NaN\n    life_expectancy                     77\n    hospital_beds_thous                  2\n    diabetes_prevalence                  6\n    region                   South America\n    ```", "```py\n    fig, axes = plt.subplots(1,2, sharey=True)\n    sns.regplot(x=covidtotals.aged_65_older, \n      y=covidtotals.total_cases_mill, ax=axes[0])\n    sns.regplot(x=covidtotals.gdp_per_capita, \n      y=covidtotals.total_cases_mill, ax=axes[1])\n    axes[0].set_xlabel(\"Aged 65 or Older\")\n    axes[0].set_ylabel(\"Cases Per Million\")\n    axes[1].set_xlabel(\"GDP Per Capita\")\n    axes[1].set_ylabel(\"\")\n    plt.suptitle(\"Age 65 Plus and GDP with Cases Per \n      Million\")\n    plt.tight_layout()\n    fig.subplots_adjust(top=0.92)\n    plt.show()\n    ```", "```py\n    landtemps = pd.read_csv(\"data/landtemps2019avgs.csv\")\n    low, high = landtemps.loc[landtemps.elevation<=1000],\n      landtemps.loc[landtemps.elevation>1000]\n    low.shape[0], low.avgtemp.mean()\n    (9538, 12.161417937651676)\n    high.shape[0], high.avgtemp.mean()\n    (2557, 7.58321486951755)\n    ```", "```py\n    plt.scatter(x=\"latabs\", y=\"avgtemp\", c=\"blue\",\n      data=low)\n    plt.scatter(x=\"latabs\", y=\"avgtemp\", c=\"red\", \n      data=high)\n    plt.legend(('low elevation', 'high elevation'))\n    plt.xlabel(\"Latitude (N or S)\")\n    plt.ylabel(\"Average Temperature (Celsius)\")\n    plt.title(\"Latitude and Average Temperature in 2019\")\n    plt.show()\n    ```", "```py\n    landtemps['elevation_group'] = \n      np.where(landtemps.elevation<=1000,'low','high')\n    sns.lmplot(x=\"latabs\", y=\"avgtemp\", \n      hue=\"elevation_group\", palette=dict(low=\"blue\", \n      high=\"red\"), legend_out=False, data=landtemps)\n    plt.xlabel(\"Latitude (N or S)\")\n    plt.ylabel(\"Average Temperature\")\n    plt.legend(('low elevation', 'high elevation'), \n      loc='lower left')\n    plt.yticks(np.arange(-60, 40, step=20))\n    plt.title(\"Latitude and Average Temperature in 2019\")\n    plt.tight_layout()\n    plt.show()\n    ```", "```py\n    fig = plt.figure()\n    plt.suptitle(\"Latitude, Temperature, and Elevation in \n      2019\")\n    ax = plt.axes(projection='3d')\n    ax.set_xlabel(\"Elevation\")\n    ax.set_ylabel(\"Latitude\")\n    ax.set_zlabel(\"Avg Temp\")\n    ax.scatter3D(landtemps.elevation, landtemps.latabs, \n      landtemps.avgtemp)\n    plt.show()\n    ```", "```py\n    nls97 = pd.read_csv(\"data/nls97.csv\")\n    nls97.set_index(\"personid\", inplace=True)\n    def gettots(x):\n      out = {}\n      out['min'] = x.min()\n      out['qr1'] = x.quantile(0.25)\n      out['med'] = x.median()\n      out['qr3'] = x.quantile(0.75)\n      out['max'] = x.max()\n      out['count'] = x.count()\n      return pd.Series(out)\n    nls97.groupby(['highestdegree'])['weeksworked17'].\\\n      apply(gettots).unstack()\n                       min   qr1   med   qr3   max   count\n    highestdegree                                  \n    0\\. None              0     0    40    52    52     510\n    1\\. GED               0     8    47    52    52     848\n    2\\. High School       0    31    49    52    52   2,665\n    3\\. Associates        0    42    49    52    52     593\n    4\\. Bachelors         0    45    50    52    52   1,342\n    5\\. Masters           0    46    50    52    52     538\n    6\\. PhD               0    46    50    52    52      51\n    7\\. Professional      0    47    50    52    52      97\n    ```", "```py\n    import seaborn as sns\n    myplt = sns.boxplot(x='highestdegree', \n      y= 'weeksworked17' , data=nls97,\n      order=sorted(nls97.highestdegree.dropna().unique()))\n    myplt.set_title(\"Boxplots of Weeks Worked by Highest \n      Degree\")\n    myplt.set_xlabel('Highest Degree Attained')\n    myplt.set_ylabel('Weeks Worked 2017')\n    myplt.set_xticklabels(myplt.get_xticklabels(),\n      rotation=60, horizontalalignment='right')\n    plt.tight_layout()\n    plt.show()\n    ```", "```py\n    sns.boxplot(x='total_cases_mill', y='region',\n      data=covidtotals)\n    sns.swarmplot(y=\"region\", x=\"total_cases_mill\",\n      data=covidtotals, size=1.5, color=\".3\", linewidth=0)\n    plt.title(\"Boxplots of Total Cases Per Million by \n      Region\")\n    plt.xlabel(\"Cases Per Million\")\n    plt.ylabel(\"Region\")\n    plt.tight_layout()\n    plt.show()\n    ```", "```py\n    import pandas as pd\n    import matplotlib.pyplot as plt\n    import statsmodels.api as sm\n    covidtotals = pd.read_csv(\"data/covidtotals.csv\")\n    covidtotals.set_index(\"iso_code\", inplace=True)\n    ```", "```py\n    xvars = ['population_density','aged_65_older',\n      'gdp_per_capita','diabetes_prevalence']\n    covidtotals[['total_cases_mill'] + xvars].\\\n      quantile(np.arange(0.0,1.05,0.25)) \n      total_cases_mill  population_density  aged_65_older\\\n    0.00             8.52                0.14         1.14\n    0.25         2,499.75               36.52         3.50 \n    0.50        19,525.73               87.25         6.22\n    0.75        64,834.62              213.54        13.92\n    1.00       181,466.38           20,546.77        27.05\n             gdp_per_capita  diabetes_prevalence  \n    0.00             661.24                 0.99  \n    0.25           3,823.19                 5.34  \n    0.50          12,236.71                 7.20  \n    0.75          27,216.44                10.61  \n    1.00         116,935.60                30.53\n    ```", "```py\ndef getlm(df, ycolname, xcolnames):\n  df = df[[ycolname] + xcolnames].dropna()\n  y = df[ycolname]\n  X = df[xcolnames]\n  X = sm.add_constant(X)\n  lm = sm.OLS(y, X).fit()\n  influence = lm.get_influence().summary_frame()\n  coefficients = pd.DataFrame(zip(['constant'] + \n    xcolnames, lm.params, lm.pvalues),\n    columns=['features','params','pvalues'])\n  return coefficients, influence, lm \n```", "```py\n    coefficients, influence, lm = getlm(covidtotals,\n      'total_cases_mill', xvars)\n    coefficients\n    features                        params       pvalues\n    0  constant                 -1,076.471         0.870\n    1  population_density           -6.906         0.030\n    2  aged_65_older             2,713.918         0.000\n    3  gdp_per_capita                0.532         0.001\n    4  diabetes_prevalence         736.809         0.241\n    ```", "```py\ninfluencethreshold = 3*influence.cooks_d.mean()\ncovidtotals = covidtotals.join(influence[['cooks_d']])\ncovidtotalsoutliers = \\\n  covidtotals.loc[covidtotals.cooks_d >\n  influencethreshold]\ncovidtotalsoutliers.shape\n(13, 17)\ncovidtotalsoutliers[['location','total_cases_mill', \n  'cooks_d'] + xvars].sort_values(['cooks_d'],\n  ascending=False).head()\n     location  total_cases_mill   cooks_d    population_density\\\niso_code               \nBHR  Bahrain        156,793.409     0.230    1,935.907\nSGP  Singapore       10,709.116     0.200    7,915.731\nHKG  Hong Kong        1,593.307     0.181    7,039.714\nJPN  Japan            6,420.871     0.095    347.778\nMDV  Maldives       138,239.027     0.069    1,454.433\n         aged_65_older  gdp_per_capita  diabetes_prevalence  \niso_code                                                      \nBHR              2.372      43,290.705          16.520\nSGP             12.922      85,535.383          10.990\nHKG             16.303      56,054.920           8.330\nJPN             27.049      39,002.223           5.720\nMDV              4.120      15,183.616           9.190\n```", "```py\n    coefficients, influence, lm2 = \\\n      getlm(covidtotals.drop(['HKG','SGP']),\n      'total_cases_mill', xvars)\n    coefficients\n       features                  params     pvalues\n    0  constant              -2,864.219       0.653\n    1  population_density        26.989       0.005\n    2  aged_65_older          2,669.281       0.000\n    3  gdp_per_capita             0.553       0.000\n    4  diabetes_prevalence      319.262       0.605\n    ```", "```py\n    import pandas as pd\n    from pyod.models.knn import KNN\n    from sklearn.preprocessing import StandardScaler\n    covidtotals = pd.read_csv(\"data/covidtotals.csv\")\n    covidtotals.set_index(\"iso_code\", inplace=True)\n    ```", "```py\n    standardizer = StandardScaler()\n    analysisvars =['location', 'total_cases_mill', \n      'total_deaths_mill','population_density',\n      'diabetes_prevalence', 'aged_65_older', \n      'gdp_per_capita']\n    covidanalysis = \n      covidtotals.loc[:,analysisvars].dropna()\n    covidanalysisstand = \n      standardizer.fit_transform(covidanalysis.iloc[:,1:])\n    ```", "```py\n    clf_name = 'KNN'\n    clf = KNN(contamination=0.1)\n    clf.fit(covidanalysisstand)\n    y_pred = clf.labels_\n    y_scores = clf.decision_scores_\n    ```", "```py\n    pred = pd.DataFrame(zip(y_pred, y_scores), \n      columns=['outlier','scores'], \n      index=covidanalysis.index)\n    pred.outlier.value_counts()\n    0    156\n    1     18\n    pred.groupby(['outlier'])[['scores']].\\\n      agg(['min','median','max'])\n                   scores            \n               min      median    max\n    outlier                   \n    0         0.11        0.84   1.74\n    1         1.77        2.48   9.34\n    ```", "```py\n    covidanalysis = covidanalysis.join(pred).\\\n      loc[:,analysisvars + ['scores']].\\\n      sort_values(['scores'], ascending=False)\n    covidanalysis.head(10)\n          location           total_cases_mill   total_deaths_mill\\\n    iso_code                                                     …  \n    SGP   Singapore                 10,709.12         6.15\n    HKG   Hong Kong                  1,593.31        28.28\n    PER   Peru                      62,830.48     5,876.01\n    QAT   Qatar                     77,373.61       206.87\n    BHR   Bahrain                  156,793.41       803.37\n    LUX   Luxembourg               114,617.81     1,308.36\n    BRN   Brunei                       608.02         6.86\n    KWT   Kuwait                    86,458.62       482.14\n    MDV   Maldives                 138,239.03       394.05\n    ARE   United Arab Emirates      65,125.17       186.75\n              aged_65_older    gdp_per_capita    scores\n    iso_code                                         \n    SGP               12.92         85,535.38      9.34\n    HKG               16.30         56,054.92      8.03\n    PER                7.15         12,236.71      4.37\n    QAT                1.31        116,935.60      4.23\n    BHR                2.37         43,290.71      3.51\n    LUX               14.31         94,277.96      2.73\n    BRN                4.59         71,809.25      2.60\n    KWT                2.35         65,530.54      2.52\n    MDV                4.12         15,183.62      2.51\n    ARE                1.14         67,293.48      2.45\n    ```", "```py\n    covidanalysis.loc['JPN','scores']\n    2.03\n    ```", "```py\n    import pandas as pd\n    import matplotlib.pyplot as plt\n    from sklearn.preprocessing import StandardScaler\n    from sklearn.ensemble import IsolationForest\n    covidtotals = pd.read_csv(\"data/covidtotals.csv\")\n    covidtotals.set_index(\"iso_code\", inplace=True)\n    ```", "```py\n    analysisvars = ['location','total_cases_mill','total_deaths_mill',\n      'population_density','aged_65_older','gdp_per_capita']\n    standardizer = StandardScaler()\n    covidanalysis = covidtotals.loc[:, analysisvars].dropna()\n    covidanalysisstand =\n      standardizer.fit_transform(covidanalysis.iloc[:, 1:])\n    ```", "```py\n    clf=IsolationForest(n_estimators=50, \n      max_samples='auto', contamination=.1, \n      max_features=1.0)\n    clf.fit(covidanalysisstand)\n    covidanalysis['anomaly'] = \n      clf.predict(covidanalysisstand)\n    covidanalysis['scores'] = \n      clf.decision_function(covidanalysisstand)\n    covidanalysis.anomaly.value_counts()\n     1    156\n    -1     18\n    Name: anomaly, dtype: int64\n    ```", "```py\n    inlier, outlier = \n      covidanalysis.loc[covidanalysis.anomaly==1],\\\n      covidanalysis.loc[covidanalysis.anomaly==-1]\n    outlier[['location','total_cases_mill',\n      'total_deaths_mill',\n      'scores']].sort_values(['scores']).head(10)\n         location   total_cases_mill  total_deaths_mill   scores\n    iso_code                                              \n    SGP  Singapore      10,709.12          6.15     -0.20\n    HKG  Hong Kong       1,593.31         28.28     -0.16\n    BHR  Bahrain       156,793.41        803.37     -0.14\n    QAT  Qatar          77,373.61        206.87     -0.13\n    PER  Peru           62,830.48      5,876.01     -0.12\n    LUX  Luxembourg    114,617.81      1,308.36     -0.09\n    JPN  Japan           6,420.87        117.40     -0.08\n    MDV  Maldives      138,239.03        394.05     -0.07\n    CZE  Czechia       155,782.97      2,830.43     -0.06\n    MNE  Montenegro    159,844.09      2,577.77     -0.03\n    ```", "```py\n    fig = plt.figure()\n    ax = plt.axes(projection='3d')\n    ax.set_title('Isolation Forest Anomaly Detection')\n    ax.set_zlabel(\"Cases Per Million (thous.)\")\n    ax.set_xlabel(\"GDP Per Capita (thous.)\")\n    ax.set_ylabel(\"Aged 65 Plus %\")\n    ax.scatter3D(inlier.gdp_per_capita/1000,\n      inlier.aged_65_older, inlier.total_cases_mill/1000, \n      label=\"inliers\", c=\"blue\")\n    ax.scatter3D(outlier.gdp_per_capita/1000,\n      outlier.aged_65_older, \n      outlier.total_cases_mill/1000, label=\"outliers\", \n      c=\"red\")\n    ax.legend()\n    plt.show()\n    ```"]