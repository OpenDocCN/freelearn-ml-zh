["```py\n<RelativeLayout   \n\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\".MainActivity\">\n    <SurfaceView\n        android:id=\"@+id/surfaceView\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        />\n    <SurfaceView\n        android:id=\"@+id/surfaceViewOnTop\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        />\n    <Button\n        android:id=\"@+id/capture\"\n        android:text=\"Capture\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"70dp\"\n        android:layout_alignParentBottom=\"true\"\n        android:layout_centerHorizontal=\"true\"\n        android:layout_marginBottom=\"10dp\"\n        android:padding=\"10dp\"\n        android:textColor=\"#FFF\"\n        android:background=\"@android:color/holo_blue_dark\"\n        />\n    <Button\n        android:id=\"@+id/save\"\n        android:text=\"Save\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"70dp\"\n        android:padding=\"10dp\"\n        android:textColor=\"#FFF\"\n        android:background=\"@android:color/holo_purple\"\n        android:layout_marginRight=\"10dp\"\n        android:layout_alignTop=\"@+id/capture\"\n        android:layout_alignParentRight=\"true\"\n        android:layout_alignParentEnd=\"true\" />\n</RelativeLayout>\n```", "```py\npublic class MainActivity extends ActionBarActivity {\n    private Button captureBtn, saveBtn; // used to interact with capture and save Button in UI\n    private SurfaceView mSurfaceView, mSurfaceViewOnTop; // used to display the camera frame in UI\n    private Camera mCam;\n    private boolean isPreview; // Is the camera frame displaying?\n    private boolean safeToTakePicture = true; // Is it safe to capture a picture?\n```", "```py\n@Override\nprotected void onCreate(Bundle savedInstanceState){\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_main);\n\n    isPreview = false;\n    mSurfaceView = (SurfaceView)findViewById(R.id.surfaceView);\n    mSurfaceView.getHolder().addCallback(mSurfaceCallback);\n\n    mSurfaceViewOnTop = (SurfaceView)findViewById(R.id.surfaceViewOnTop);\n    mSurfaceViewOnTop.setZOrderOnTop(true);    // necessary\n    mSurfaceViewOnTop.getHolder().setFormat(PixelFormat.TRANSPARENT);\n\n    captureBtn = (Button) findViewById(R.id.capture);\n    captureBtn.setOnClickListener(captureOnClickListener);\n\n    saveBtn = (Button) findViewById(R.id.save);\n    saveBtn.setOnClickListener(saveOnClickListener);\n}\n```", "```py\nView.OnClickListener captureOnClickListener = new View.OnClickListener() {\n    @Override\n    public void onClick(View v) {\n    }\n};\nView.OnClickListener saveOnClickListener = new View.OnClickListener() {\n    @Override\n    public void onClick(View v) {\n    }\n};\n```", "```py\n<uses-feature android:name=\"android.hardware.camera\" />\n<uses-permission android:name=\"android.permission.CAMERA\" />\n<uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" />\n```", "```py\nSurfaceHolder.Callback mSurfaceCallback = new SurfaceHolder.Callback(){\n    @Override\n    public void surfaceCreated(SurfaceHolder holder) {\n        try {\n            // Tell the camera to display the frame on this surfaceview\n            mCam.setPreviewDisplay(holder);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n    @Override\n    public void surfaceChanged(SurfaceHolder holder, int format, int width, int height) {\n        // Get the default parameters for camera\n        Camera.Parameters myParameters = mCam.getParameters();\n        // Select the best preview size\n        Camera.Size myBestSize = getBestPreviewSize( myParameters );\n        if(myBestSize != null){\n            // Set the preview Size\n            myParameters.setPreviewSize(myBestSize.width, myBestSize.height);\n            // Set the parameters to the camera\n            mCam.setParameters(myParameters);\n            // Rotate the display frame 90 degree to view in portrait mode\n            mCam.setDisplayOrientation(90);\n            // Start the preview\n            mCam.startPreview();\n            isPreview = true;\n        }\n    }\n    @Override\n    public void surfaceDestroyed(SurfaceHolder holder) {\n    }\n};\n```", "```py\nprivate Camera.Size getBestPreviewSize(Camera.Parameters parameters){\n    Camera.Size bestSize = null;\n    List<Camera.Size> sizeList = parameters.getSupportedPreviewSizes();\n    bestSize = sizeList.get(0);\n    for(int i = 1; i < sizeList.size(); i++){\n        if((sizeList.get(i).width * sizeList.get(i).height) >\n                (bestSize.width * bestSize.height)){\n            bestSize = sizeList.get(i);\n        }\n    }\n    return bestSize;\n}\n```", "```py\n@Override\nprotected void onResume() {\n    super.onResume();\n    mCam = Camera.open(0); // 0 for back camera\n}\n@Override\nprotected void onPause() {\n    super.onPause();\n    if(isPreview){\n        mCam.stopPreview();\n    }\n    mCam.release();\n    mCam = null;\n    isPreview = false;\n}\n```", "```py\n<activity   \n    android:screenOrientation=\"portrait\"\n    android:name=\".MainActivity\"\n    android:label=\"@string/app_name\" >\n```", "```py\nView.OnClickListener captureOnClickListener = new View.OnClickListener() {\n    @Override\n    public void onClick(View v) {\n        if(mCam != null && safeToTakePicture){\n            // set the flag to false so we don't take two picture at a same time\n            safeToTakePicture = false;\n            mCam.takePicture(null, null, jpegCallback);\n        }\n    }\n};\n```", "```py\nCamera.PictureCallback jpegCallback = new Camera.PictureCallback() {\n    public void onPictureTaken(byte[] data, Camera camera) {\n        // decode the byte array to a bitmap\n        Bitmap bitmap = BitmapFactory.decodeByteArray(data, 0, data.length);\n        // Rotate the picture to fit portrait mode\n        Matrix matrix = new Matrix();\n        matrix.postRotate(90);\n        bitmap = Bitmap.createBitmap(bitmap, 0, 0, bitmap.getWidth(), bitmap.getHeight(), matrix, false);\n\n        // TODO: Save the image to a List to pass them to OpenCV method\n\n        Canvas canvas = null;\n        try {\n            canvas = mSurfaceViewOnTop.getHolder().lockCanvas(null);\n            synchronized (mSurfaceViewOnTop.getHolder()) {\n                // Clear canvas\n                canvas.drawColor(Color.TRANSPARENT, PorterDuff.Mode.CLEAR);\n\n                // Scale the image to fit the SurfaceView\n                float scale = 1.0f * mSurfaceView.getHeight() / bitmap.getHeight();\n                Bitmap scaleImage = Bitmap.createScaledBitmap(bitmap, (int)(scale * bitmap.getWidth()), mSurfaceView.getHeight() , false);\n                Paint paint = new Paint();\n                // Set the opacity of the image\n                paint.setAlpha(200);\n                // Draw the image with an offset so we only see one third of image.\n                canvas.drawBitmap(scaleImage, -scaleImage.getWidth() * 2 / 3, 0, paint);\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            if (canvas != null) {\n                mSurfaceViewOnTop.getHolder().unlockCanvasAndPost(canvas);\n            }\n        }\n        // Start preview the camera again and set the take picture flag to true\n        mCam.startPreview();\n        safeToTakePicture = true;\n    }\n};\n```", "```py\nView.OnClickListener saveOnClickListener = new View.OnClickListener() {\n    @Override\n    public void onClick(View v) {\n        Thread thread = new Thread(imageProcessingRunnable);\n        thread.start();\n    }\n};\n```", "```py\nProgressDialog ringProgressDialog;\n```", "```py\nprivate Runnable imageProcessingRunnable = new Runnable() {\n    @Override\n    public void run() {\n        showProcessingDialog();\n        // TODO: implement OpenCV parts\n        closeProcessingDialog();\n    }\n};\n```", "```py\nprivate void showProcessingDialog(){\n    runOnUiThread(new Runnable() {\n        @Override\n        public void run() {\n            mCam.stopPreview();\n            ringProgressDialog = ProgressDialog.show(MainActivity.this, \"\", \"Panorama\", true);\n            ringProgressDialog.setCancelable(false);\n        }\n    });\n}\n```", "```py\nprivate void closeProcessingDialog(){\n    runOnUiThread(new Runnable() {\n        @Override\n        public void run() {\n            mCam.startPreview();\n            ringProgressDialog.dismiss();\n        }\n    });\n}\n```", "```py\ndependencies {\n    compile fileTree(dir: 'libs', include: ['*.jar'])\n    compile 'com.android.support:appcompat-v7:22.1.1'\n\n    compile project(\":opencv-java\")\n}\n```", "```py\nstatic {\n    //If you use OpenCV 2.*, use \"opencv_java\"\n    System.loadLibrary(\"opencv_java3\");\n}\n```", "```py\npublic class NativePanorama {\n    public native static void processPanorama(long[] imageAddressArray, long outputAddress);\n}\n```", "```py\njavah -d jni -classpath ../../build/intermediates/classes/debug/ com.example.panorama.NativePanorama\n```", "```py\n#include \"com_example_panorama_NativePanorama.h\"\nJNIEXPORT void JNICALL Java_com_example_panorama_NativePanorama_processPanorama\n  (JNIEnv * env, jclass clazz, jlongArray imageAddressArray, jlong outputAddress){\n}\n```", "```py\nsdk.dir=/Users/quanhua92/Library/Android/sdk\nndk.dir=/Users/quanhua92/Software/android-ndk-r10e\n```", "```py\nimport org.apache.tools.ant.taskdefs.condition.Os\n```", "```py\n// begin NDK OPENCV\nsourceSets.main {\n    jni.srcDirs = [] //disable automatic ndk-build call\n}\ntask ndkBuild(type: Exec, description: 'Compile JNI source via NDK') {\n    def rootDir = project.rootDir\n    def localProperties = new File(rootDir, \"local.properties\")\n    Properties properties = new Properties()\n    localProperties.withInputStream { instr ->\n        properties.load(instr)\n    }\n    def ndkDir = properties.getProperty('ndk.dir')\n    if (Os.isFamily(Os.FAMILY_WINDOWS)) {\n        commandLine \"$ndkDir\\\\ndk-build.cmd\",\n                'NDK_PROJECT_PATH=build/intermediates/ndk',\n                'NDK_LIBS_OUT=src/main/jniLibs',\n                'APP_BUILD_SCRIPT=src/main/jni/Android.mk',\n                'NDK_APPLICATION_MK=src/main/jni/Application.mk'\n    } else {\n        commandLine \"$ndkDir/ndk-build\",\n                'NDK_PROJECT_PATH=build/intermediates/ndk',\n                'NDK_LIBS_OUT=src/main/jniLibs',\n                'APP_BUILD_SCRIPT=src/main/jni/Android.mk',\n                'NDK_APPLICATION_MK=src/main/jni/Application.mk'\n    }\n}\ntasks.withType(JavaCompile) {\n    compileTask -> compileTask.dependsOn ndkBuild\n}\n//end\n```", "```py\nAPP_STL := gnustl_static\nAPP_CPPFLAGS := -frtti -fexceptions\nAPP_ABI := all\nAPP_PLATFORM := android-16\n```", "```py\nLOCAL_PATH := $(call my-dir)\n\ninclude $(CLEAR_VARS)\n#opencv\nOPENCVROOT:= /Volumes/Data/OpenCV/OpenCV-android-sdk\nOPENCV_CAMERA_MODULES:=on\nOPENCV_INSTALL_MODULES:=on\nOPENCV_LIB_TYPE:=SHARED\ninclude ${OPENCVROOT}/sdk/native/jni/OpenCV.mk\n\nLOCAL_SRC_FILES := com_example_panorama_NativePanorama.cpp\nLOCAL_LDLIBS += -llog\nLOCAL_MODULE := MyLib\n\ninclude $(BUILD_SHARED_LIBRARY)\n```", "```py\npublic class MainActivity extends ActionBarActivity {\n    static{\n        System.loadLibrary(\"opencv_java3\");\n        System.loadLibrary(\"MyLib\");\n    }\n```", "```py\nprivate List<Mat> listImage = new ArrayList<>();\n```", "```py\nMat mat = new Mat();\nUtils.bitmapToMat(bitmap, mat);\nlistImage.add(mat);\n```", "```py\ntry {\n    // Create a long array to store all image address\n    int elems=  listImage.size();\n    long[] tempobjadr = new long[elems];\n    for (int i=0;i<elems;i++){\n        tempobjadr[i]=  listImage.get(i).getNativeObjAddr();\n    }\n    // Create a Mat to store the final panorama image\n    Mat result = new Mat();\n    // Call the OpenCV C++ Code to perform stitching process\n    NativePanorama.processPanorama(tempobjadr, result.getNativeObjAddr());\n\n    // Save the image to external storage\n    File sdcard = Environment.getExternalStorageDirectory();\n    final String fileName = sdcard.getAbsolutePath() + \"/opencv_\" + System.currentTimeMillis() + \".png\";\n    Imgcodecs.imwrite(fileName, result);\n\n    runOnUiThread(new Runnable() {\n        @Override\n        public void run() {\n            Toast.makeText(getApplicationContext(), \"File saved at: \" + fileName, Toast.LENGTH_LONG).show();\n        }\n    });\n\n    listImage.clear();\n} catch (Exception e) {\n    e.printStackTrace();\n}\n```", "```py\n#include \"com_example_panorama_NativePanorama.h\"\n#include \"opencv2/opencv.hpp\"\n#include \"opencv2/stitching.hpp\"\n\nusing namespace std;\nusing namespace cv;\n\nJNIEXPORT void JNICALL Java_com_example_panorama_NativePanorama_processPanorama\n  (JNIEnv * env, jclass clazz, jlongArray imageAddressArray, jlong outputAddress){\n  // Get the length of the long array\n  jsize a_len = env->GetArrayLength(imageAddressArray);\n  // Convert the jlongArray to an array of jlong\n  jlong *imgAddressArr = env->GetLongArrayElements(imageAddressArray,0);\n  // Create a vector to store all the image\n  vector< Mat > imgVec;\n  for(int k=0;k<a_len;k++)\n  {\n    // Get the image\n    Mat & curimage=*(Mat*)imgAddressArr[k];\n    Mat newimage;\n    // Convert to a 3 channel Mat to use with Stitcher module\n    cvtColor(curimage, newimage, CV_BGRA2RGB);\n    // Reduce the resolution for fast computation\n    float scale = 1000.0f / curimage.rows;\n    resize(newimage, newimage, Size(scale * curimage.rows, scale * curimage.cols));\n    imgVec.push_back(newimage);\n  }\n  Mat & result  = *(Mat*) outputAddress;\n  Stitcher stitcher = Stitcher::createDefault();\n  stitcher.stitch(imgVec, result);\n  // Release the jlong array \n  env->ReleaseLongArrayElements(imageAddressArray, imgAddressArr ,0);\n}\n```", "```py\n  Stitcher stitcher = Stitcher::createDefault();\n```"]