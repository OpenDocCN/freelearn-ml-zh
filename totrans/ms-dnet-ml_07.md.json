["```py\nPM> install-package Accord.MachineLearning\n\n```", "```py\n#r \"../packages/Accord.3.0.2/lib/net40/Accord.dll\"\n#r \"../packages/Accord.Math.3.0.2/lib/net40/Accord.Math.dll\"\n#r \"../packages/Accord.Statistics.3.0.2/lib/net40/Accord.Statistics.dll\"\n#r \"../packages/Accord.MachineLearning.3.0.2/lib/net40/Accord.MachineLearning.dll\"\n\nopen Accord.MachineLearning\n```", "```py\nlet drinks = [\"Boones Farm\", 0;\n                \"Mad Dog\", 1;\n                \"Night Train\", 2;\n                \"Buckfast\", 3;\n                \"Smirnoff\", 4;\n                \"Bacardi\", 5;\n                \"Johhnie Walker\", 6;\n                \"Snow\", 7;\n                \"Tsingtao\", 8;\n                \"Budweiser\", 9;\n                \"Skol\", 10;\n                \"Yanjing\", 11;\n                \"Heineken\", 12;\n                \"Harbin\", 13]\n```", "```py\nval drinks : (string * int) list =\n [(\"Boones Farm\", 0); (\"Mad Dog\", 1); (\"Night Train\", 2); (\"Buckfast\", 3);\n (\"Smirnoff\", 4); (\"Bacardi\", 5); (\"Johhnie Walker\", 6); (\"Snow\", 7);\n (\"Tsingtao\", 8); (\"Budweiser\", 9); (\"Skol\", 10); (\"Yanjing\", 11);\n (\"Heineken\", 12); (\"Harbin\", 13)]\n\n>\n\n```", "```py\nlet observations = [|[|1.0;2.0;3.0|];[|1.0;1.0;0.0|];\n                                             [|5.0;4.0;4.0|];[|4.0;4.0;5.0|];[|4.0;5.0;5.0|];[|6.0;4.0;5.0|];\n                                             [|11.0;8.0;7.0|];[|12.0;8.0;9.0|];[|10.0;8.0;9.0|]|]\n```", "```py\nval observations : float [] [] =\n [|[|1.0; 2.0; 3.0|]; [|1.0; 1.0; 0.0|]; [|5.0; 4.0; 4.0|]; [|4.0; 4.0; 5.0|];\n [|4.0; 5.0; 5.0|]; [|6.0; 4.0; 5.0|]; [|11.0; 8.0; 7.0|];\n [|12.0; 8.0; 9.0|]; [|10.0; 8.0; 9.0|]|]\n\n```", "```py\nlet numberOfClusters = 3\nlet kmeans = new KMeans(numberOfClusters);\nlet labels = kmeans.Compute(observations)\n```", "```py\nval numberOfClusters : int = 3\nval kmeans : KMeans\nval labels : int [] = [|0; 0; 1; 1; 1; 1; 2; 2; 2|]\n\n```", "```py\nlet numberOfClusters = 2\nlet kmeans = new KMeans(numberOfClusters);\nlet labels = kmeans.Compute(observations)\n```", "```py\nval numberOfClusters : int = 2\nval kmeans : KMeans\nval labels : int [] = [|1; 1; 1; 1; 1; 1; 0; 0; 0|]\n\n```", "```py\nkmeans.Clusters.[0]\n```", "```py\nval it : KMeansCluster =\n Accord.MachineLearning.KMeansCluster\n {Covariance = [[4.3; 2.6; 3.2]\n [2.6; 2.266666667; 2.733333333]\n [3.2; 2.733333333; 3.866666667]];\n Index = 0;\n Mean = [|3.5; 3.333333333; 3.666666667|];\n Proportion = 0.6666666667;}\n\n```", "```py\n#r \"../packages/Accord.3.0.2/lib/net40/Accord.dll\"\n#r \"../packages/Accord.Math.3.0.2/lib/net40/Accord.Math.dll\"\n#r \"../packages/Accord.Statistics.3.0.2/lib/net40/Accord.Statistics.dll\"\n\nopen Accord.Statistics.Analysis\n\nlet sourceMatrix = [|[|2.5; 2.4|];[|0.5; 0.7|];[|2.2; 2.9|];\n                    [|1.9; 2.2|];[|3.1; 3.0|];[|2.3; 2.7|];[|2.0; 1.6|];\n                    [|1.0; 1.1|];[|1.5; 1.6|]; [|1.1; 0.9|]|] \n```", "```py\nval sourceMatrix : float [] [] =\n [|[|2.5; 2.4|]; [|0.5; 0.7|]; [|2.2; 2.9|]; [|1.9; 2.2|]; [|3.1; 3.0|];\n [|2.3; 2.7|]; [|2.0; 1.6|]; [|1.0; 1.1|]; [|1.5; 1.6|]; [|1.1; 0.9|]|]\n\n```", "```py\nlet pca = new PrincipalComponentAnalysis(sourceMatrix, AnalysisMethod.Center)\npca.Compute()\npca.Transform(sourceMatrix)\npca.ComponentMatrix\n```", "```py\nval pca : PrincipalComponentAnalysis\nval it : float [,] = [[0.6778733985; -0.7351786555]\n [0.7351786555; 0.6778733985]]\n\n```", "```py\npca.ComponentProportions\n```", "```py\nval it : float [] = [|0.9631813143; 0.03681868565|]\n\n```", "```py\nPM> install-package Accord.MachineLearning\n\n```", "```py\n#r \"System.Data.Entity.dll\"\n#r \"FSharp.Data.TypeProviders.dll\"\n#r \"System.Data.Linq.dll\"\n#r \"../packages/Accord.3.0.2/lib/net40/Accord.dll\"\n#r \"../packages/Accord.Math.3.0.2/lib/net40/Accord.Math.dll\"\n#r \"../packages/Accord.Statistics.3.0.2/lib/net40/Accord.Statistics.dll\"\n#r \"../packages/Accord.MachineLearning.3.0.2/lib/net40/Accord.MachineLearning.dll\"\n\nopen System\nopen System.Linq\nopen System.Data.Linq\nopen System.Data.Entity\nopen Accord.MachineLearning\nopen System.Collections.Generic\nopen Accord.Statistics.Analysis\nopen Microsoft.FSharp.Data.TypeProviders\n\n[<Literal>]\nlet connectionString = \"data source=nc54a9m5kk.database.windows.net;initial catalog=Traffic;user id=chickenskills@nc54a9m5kk;password=sk1lzm@tter;\"\ntype Geolocation = {Latitude: float; Longitude: float} \n\ntype EntityConnection = SqlEntityConnection<connectionString,Pluralize = true>\nlet context = EntityConnection.GetDataContext()\n```", "```py\nval connectionString : string =\n \"data source=nc54a9m5kk.database.windows.net;initial catalog=T\"+[61 chars]\ntype Geolocation =\n {Latitude: float;\n Longitude: float;}\ntype EntityConnection =\n class\n static member GetDataContext : unit -> EntityConnection.ServiceTypes.SimpleDataContextTypes.EntityContainer\n + 1 overload\n nested type ServiceTypes\n end\nval context :\n EntityConnection.ServiceTypes.SimpleDataContextTypes.EntityContainer\n\n```", "```py\n//Stop Data\ntype TrafficStop = {StopDateTime: DateTime; Geolocation: Geolocation; DispositionId: int}\nlet trafficStops = \n    context.dbo_TrafficStops \n    |> Seq.map(fun ts -> {StopDateTime = ts.StopDateTime.Value; \n                          Geolocation = {Latitude = Math.Round(ts.Latitude.Value,3); \n                          Longitude = Math.Round(ts.Longitude.Value,3)}; \n                          DispositionId = ts.DispositionId.Value})\n    |> Seq.toArray\n```", "```py\ntype TrafficStop =\n {StopDateTime: DateTime;\n Geolocation: Geolocation;\n DispositionId: int;}\nval trafficStops : TrafficStop [] =\n [|{StopDateTime = 6/30/2012 12:36:38 AM;\n Geolocation = {Latitude = 35.789;\n Longitude = -78.829;};\n DispositionId = 7;}; {StopDateTime = 6/30/2012 12:48:38 AM;\n Geolocation = {Latitude = 35.821;\n Longitude = -78.901;};\n DispositionId = 15;};\n {StopDateTime = 6/30/2012 1:14:29 AM;\n Geolocation = {Latitude = 35.766;\n\n```", "```py\n    |> Seq.map(fun ts -> {StopDateTime = ts.StopDateTime.Value; \n                          Geolocation = {Latitude = Math.Round(ts.Latitude.Value,3); \n                          Longitude = Math.Round(ts.Longitude.Value,3)}; \n                          DispositionId = ts.DispositionId.Value})\n```", "```py\n//Crash Data\ntype TrafficCrash = {CrashDateTime: DateTime;  Geolocation: Geolocation; CrashSeverityId: int; CrashTypeId: int; }\nlet trafficCrashes= \n    context.dbo_TrafficCrashes \n    |> Seq.filter(fun tc -> tc.MunicipalityId = Nullable<int>(13))\n    |> Seq.filter(fun tc -> not (tc.Latitude = Nullable<float>()))\n    |> Seq.map(fun tc -> {CrashDateTime=tc.CrashDateTime.Value; \n                          Geolocation = {Latitude =Math.Round(tc.Latitude.Value,3); \n                        Longitude=Math.Round(tc.Longitude.Value,3)};\n                        CrashSeverityId=tc.CrashSeverityId.Value; \n                        CrashTypeId =tc.CrashTypeId.Value})\n    |> Seq.toArray\n```", "```py\ntype TrafficCrash =\n {CrashDateTime: DateTime;\n Geolocation: Geolocation;\n CrashSeverityId: int;\n CrashTypeId: int;}\nval trafficCrashes : TrafficCrash [] =\n [|{CrashDateTime = 12/30/2011 1:00:00 AM;\n Geolocation = {Latitude = 35.79;\n Longitude = -78.781;};\n CrashSeverityId = 4;\n CrashTypeId = 3;}; {CrashDateTime = 12/30/2011 3:12:00 AM;\n Geolocation = {Latitude = 35.783;\n Longitude = -78.781;};\n CrashSeverityId = 3;\n CrashTypeId = 24;};\n\n```", "```py\n//Weather Data\ntype DailyPercipitation = {WeatherDate: DateTime; Amount: int; }\nlet dailyWeather = \n    context.dbo_DailyPercipitation \n    |> Seq.map(fun dw -> {WeatherDate=dw.RecordDate; Amount=dw.Amount;})\n    |> Seq.toArray\n```", "```py\ntype DailyPercipitation =\n {WeatherDate: DateTime;\n Amount: int;}\nval dailyWeather : DailyPercipitation [] =\n [|{WeatherDate = 1/9/2012 12:00:00 AM;\n Amount = 41;}; {WeatherDate = 1/10/2012 12:00:00 AM;\n Amount = 30;}; {WeatherDate = 1/11/2012 12:00:00 AM;\n Amount = 5;};\n {WeatherDate = 1/12/2012 12:00:00 AM;\n\n```", "```py\nlet stopData = \n    trafficStops\n    |> Array.countBy(fun ts -> ts.Geolocation)\n```", "```py\nval stopData : (Geolocation * int) [] =\n [|({Latitude = 35.789;\n Longitude = -78.829;}, 178); ({Latitude = 35.821;\n Longitude = -78.901;}, 8);\n ({Latitude = 35.766;\n Longituâ€¦\n\n```", "```py\nlet crashData =\n    trafficCrashes\n    |> Array.countBy(fun tc -> tc.Geolocation)\n```", "```py\nval crashData : (Geolocation * int) [] =\n [|({Latitude = 35.79;\n Longitude = -78.781;}, 51); ({Latitude = 35.783;\n\n```", "```py\ntype GeoTraffic = {Geolocation:Geolocation; CrashCount: int; StopCount: int}\n\nlet trafficGeo = \n    Enumerable.Join(crashData, stopData, \n                (fun crashData -> fst crashData), \n                (fun stopData -> fst stopData), \n                (fun crashData stopData -> { Geolocation = fst crashData; StopCount = snd crashData ; CrashCount = snd stopData }))\n                |> Seq.toArray\n```", "```py\ntype GeoTraffic =\n {Geolocation: Geolocation;\n CrashCount: int;\n StopCount: int;}\nval trafficGeo : GeoTraffic [] =\n [|{Geolocation = {Latitude = 35.79;\n Longitude = -78.781;};\n CrashCount = 9;\n StopCount = 51;}; {Geolocation = {Latitude = 35.783;\n Longitude = -78.781;};\n CrashCount = 16;\n StopCount = 5;};\n {Geolocation = {Latitude = 35.803;\n Longitude = -78.775;};\n CrashCount = 76;\n StopCount = 2;};\n\n```", "```py\nlet kmeansInput = \n    trafficGeo \n    |> Array.map(fun cs -> [|float cs.CrashCount; float cs.StopCount |])\n```", "```py\nval kmeansInput : float [] [] =\n [|[|9.0; 51.0|]; [|16.0; 5.0|]; [|76.0; 2.0|]; [|10.0; 1.0|]; [|80.0; 7.0|];\n [|92.0; 27.0|]; [|8.0; 2.0|]; [|104.0; 11.0|]; [|47.0; 4.0|];\n [|36.0; 16.0\n\n```", "```py\nlet numberOfClusters = 3\nlet kmeans = new KMeans(numberOfClusters)\nlet labels = kmeans.Compute(kmeansInput.ToArray())\nkmeans.Clusters.[0]\nkmeans.Clusters.[1]\nkmeans.Clusters.[2]\n```", "```py\nval numberOfClusters : int = 3\nval kmeans : KMeans\nval labels : int [] =\n [|1; 1; 0; 1; 0; 0; 1; 0; 0; 1; 0; 0; 0; 1; 1; 0; 1; 1; 0; 0; 0; 2; 1; 0; 1;\n 2; 0; 2;\n\n```", "```py\nval it : KMeansCluster =\n  Accord.MachineLearning.KMeansCluster\n    {Covariance = [[533.856744; 25.86726804]\n                   [25.86726804; 42.23152921]];\n     Index = 0;\n     Mean = [|67.50515464; 6.484536082|];\n     Proportion = 0.1916996047;}\n> \nval it : KMeansCluster =\n  Accord.MachineLearning.KMeansCluster\n    {Covariance = [[108.806009; 8.231942669]\n                   [8.231942669; 16.71306776]];\n     Index = 1;\n     Mean = [|11.69170984; 2.624352332|];\n     Proportion = 0.7628458498;}\n> \nval it : KMeansCluster =\n  Accord.MachineLearning.KMeansCluster\n    {Covariance = [[5816.209486; -141.4980237]\n                   [-141.4980237; 194.4189723]];\n     Index = 2;\n     Mean = [|188.8695652; 13.34782609|];\n     Proportion = 0.04545454545;}\n```", "```py\nlet trafficGeo' = Array.zip trafficGeo labels\n```", "```py\nval trafficGeo' : (GeoTraffic * int) [] =\n [|({Geolocation = {Latitude = 35.79;\n Longitude = -78.781;};\n CrashCount = 9;\n StopCount = 51;}, 1); ({Geolocation = {Latitude = 35.783;\n Longitude = -78.781;};\n CrashCount = 16;\n StopCount = 5;}, 1);\n\n```", "```py\nlet crashCounts =\n    trafficCrashes\n    |> Array.countBy(fun tc -> tc.CrashDateTime.DayOfYear)\n```", "```py\nval crashCounts : (int * int) [] =\n [|(364, 10); (365, 3); (1, 2); (2, 3); (3, 12); (4, 5); (5, 3); (6, 1);\n (7, 9); (8, 6); (9, 10); (10, 6); (11, 9);\n\n```", "```py\nlet stopCounts = \n    trafficStops\n    |> Array.countBy(fun ts -> ts.StopDateTime.DayOfYear)\n```", "```py\nval stopCounts : (int * int) [] =\n [|(182, 58); (183, 96); (184, 89); (185, 65); (38, 65);\n\n```", "```py\nlet weatherData' =\n    dailyWeather\n    |> Array.map(fun w -> w.WeatherDate.DayOfYear, w.Amount)\n```", "```py\nval weatherData' : (int * int) [] =\n [|(9, 41); (10,` 30); (11, 5); (12, 124);\n\n```", "```py\nlet getItem dataSet item  =\n    let found = dataSet |> Array.tryFind(fun sd -> fst(sd) = item)\n    match found with\n    | Some value -> snd value\n    | None -> 0\n```", "```py\nval getItem : dataSet:('a * int) [] -> item:'a -> int when 'a : equality\n\n```", "```py\nlet getItem (dataSet:(int*int)[], item:int)  =\n    let found = dataSet |> Array.tryFind(fun sd -> fst(sd) = item)\n    match found with\n    | Some value -> snd value\n    | None -> 0\n```", "```py\nval getItem : dataSet:(int * int) [] * item:int -> int\n\n```", "```py\ntype TrafficDay = {DayNumber:int; CrashCount: int; StopCount: int; RainAmount: int}\n\nlet trafficDates = \n    [|1..366|]\n    |> Array.map(fun d -> {DayNumber=d;\n                          CrashCount=getItem crashCounts d;\n                          StopCount=getItem stopCounts d;\n                          RainAmount=getItem weatherData' d})\n```", "```py\ntype TrafficDay =\n {DayNumber: int;\n CrashCount: int;\n StopCount: int;\n RainAmount: int;}\nval trafficDates : TrafficDay [] =\n [|{DayNumber = 1;\n CrashCount = 2;\n StopCount = 49;\n RainAmount = 0;}; {DayNumber = 2;\n CrashCount = 3;\n StopCount = 43;\n RainAmount = 0;};\n\n```", "```py\nlet pcaInput = \n    trafficDates \n    |> Array.map(fun td -> [|float td.CrashCount; float td.StopCount; float td.RainAmount |])\n```", "```py\nval pcaInput : float [] [] =\n [|[|2.0; 49.0; 0.0|]; [|3.0; 43.0; 0.0|]; [|12.0; 52.0; 0.0|];\n [|5.0; 102.0; 0.0|];\n\n```", "```py\nlet pca = new PrincipalComponentAnalysis(pcaInput, AnalysisMethod.Center)\npca.Compute()\npca.Transform(pcaInput)\npca.ComponentMatrix\npca.ComponentProportions\n```", "```py\nval pca : PrincipalComponentAnalysis\nval it : unit = ()\n\n> \nval it : float [] [] =\n [|[|-43.72753865; 26.15506878; -4.671924583|];\n\nval it : float [,] = [[0.00127851745; 0.01016388954; 0.999947529]\n [0.01597172498; -0.999821004; 0.01014218229]\n [0.9998716265; 0.01595791997; -0.001440623449]]\n> \nval it : float [] = [|0.9379825626; 0.06122702459; 0.0007904128341|]\n>\n\n>\n\n```", "```py\nnamespace Hack4Good.Traffic\n\nopen System\nopen System.Linq\nopen System.Data.Linq\nopen System.Data.Entity\nopen Accord.MachineLearning\nopen System.Collections.Generic\nopen Accord.Statistics.Analysis\nopen Microsoft.FSharp.Data.TypeProviders\n\ntype Geolocation = {Latitude: float; Longitude: float}\ntype private EntityConnection = SqlEntityConnection<\"data source=nc54a9m5kk.database.windows.net;initial catalog=Traffic;user id=chickenskills@nc54a9m5kk;password=sk1lzm@tter;\",Pluralize = true>\ntype TrafficStop = {StopDateTime: DateTime; Geolocation: Geolocation; DispositionId: int}\ntype TrafficCrash = {CrashDateTime: DateTime;  Geolocation: Geolocation; CrashSeverityId: int; CrashTypeId: int; }\ntype GeoTraffic = {Geolocation:Geolocation; CrashCount: int; StopCount: int}\ntype GeoTraffic' = {Geolocation:Geolocation; CrashCount: int; StopCount: int; Cluster: int}\n```", "```py\ntype TrafficML(connectionString:string) = \n    let context = EntityConnection.GetDataContext(connectionString)\n\n        let trafficStops = \n        context.dbo_TrafficStops \n        |> Seq.map(fun ts -> {StopDateTime = ts.StopDateTime.Value; \n                             Geolocation = {Latitude =Math.Round(ts.Latitude.Value,3); \n                             Longitude=Math.Round(ts.Longitude.Value,3)}; \n                             DispositionId = ts.DispositionId.Value})\n        |> Seq.toArray\n\n    let trafficCrashes= \n        context.dbo_TrafficCrashes \n        |> Seq.filter(fun tc -> tc.MunicipalityId = Nullable<int>(13))\n        |> Seq.filter(fun tc -> not (tc.Latitude = Nullable<float>()))\n        |> Seq.map(fun tc -> {CrashDateTime=tc.CrashDateTime.Value; \n                            Geolocation = {Latitude =Math.Round(tc.Latitude.Value,3); \n                            Longitude=Math.Round(tc.Longitude.Value,3)};\n                            CrashSeverityId=tc.CrashSeverityId.Value; \n                            CrashTypeId =tc.CrashTypeId.Value})\n        |> Seq.toArray\n\n    let stopData = \n        trafficStops\n        |> Array.countBy(fun ts -> ts.Geolocation)\n\n    let crashData =\n        trafficCrashes\n        |> Array.countBy(fun tc -> tc.Geolocation)\n\n    let trafficGeo = \n        Enumerable.Join(crashData, stopData, \n                    (fun crashData -> fst crashData), \n                    (fun stopData -> fst stopData), \n                    (fun crashData stopData -> { GeoTraffic.Geolocation = fst crashData; \n                       StopCount = snd crashData ; \n                       CrashCount = snd stopData }))\n                    |> Seq.toArray\n\n    let kmeansInput = \n        trafficGeo \n        |> Array.map(fun cs -> [|float cs.CrashCount; float cs.StopCount |])\n\n    let numberOfClusters = 3\n    let kmeans = new KMeans(numberOfClusters)\n    let labels = kmeans.Compute(kmeansInput.ToArray())\n    let trafficGeo' = Array.zip trafficGeo labels\n                      |> Array.map(fun (tg,l) -> {Geolocation=tg.Geolocation;CrashCount=tg.CrashCount;StopCount=tg.StopCount;Cluster=l} ) \n```", "```py\n    member this.GetCluster(latitude: float, longitude: float, distance: float) =\n        let geolocation = {Latitude=latitude; Longitude=longitude}\n        let found = trafficGeo' \n                    |> Array.map(fun gt -> gt,(haversine gt.Geolocation geolocation))\n                    |> Array.filter(fun (gt,d) -> d < distance)\n                    |> Array.sortByDescending(fun (gt,d) -> gt.Cluster)\n        match found.Length with\n        | 0 -> -1\n        | _ -> let first = found |> Array.head\n               let gt = fst first\n               gt.Cluster\n```", "```py\n<Button x:Name=\"crashbutton\" Content=\"Crash\" Click=\"notifyButton_Click\" HorizontalAlignment=\"Left\" Height=\"41\" Margin=\"31,115,0,0\" VerticalAlignment=\"Top\" Width=\"123\"/>\n<Button x:Name=\"stopButton\" Content=\"Stop\" Click=\"notifyButton_Click\" HorizontalAlignment=\"Left\" Height=\"41\" Margin=\"171,115,0,0\" VerticalAlignment=\"Top\" Width=\"132\"/>\n<TextBlock x:Name=\"statusTextBlock\" HorizontalAlignment=\"Left\" Height=\"100\" Margin=\"31,10,0,0\" TextWrapping=\"Wrap\" Text=\"Current Status: No Risk\" VerticalAlignment=\"Top\" Width=\"272\"/>\n```", "```py\nusing System.Configuration;\nusing System.Device.Location;\n```", "```py\n        TrafficML _trafficML = null;\n        GeoCoordinateWatcher _watcher = null;\n        String _connectionString = null;\n```", "```py\n            InitializeComponent();\n            _connectionString = ConfigurationManager.ConnectionStrings[\"trafficDatabase\"].ConnectionString;\n            _trafficML = new TrafficML(_connectionString);\n\n            _watcher = new GeoCoordinateWatcher(GeoPositionAccuracy.High);\n            _watcher.PositionChanged += Watcher_PositionChanged;\n            bool started = this._watcher.TryStart(false, TimeSpan.FromMilliseconds(2000));\n            StartUpdateLoop();\n```", "```py\n        private void Watcher_PositionChanged(object sender, GeoPositionChangedEventArgs<GeoCoordinate> e)\n        {\n            var location = e.Position.Location;\n            var latitude = Double.Parse(location.Latitude.ToString(\"00.000\"));\n            var longitude = Double.Parse(location.Longitude.ToString(\"00.000\"));\n\n            var cluster = _trafficML.GetCluster(latitude, longitude);\n            var status = \"No Risk\";\n            switch(cluster)\n            {\n                case 0:\n                    status = \"Low Risk\";\n                    break;\n                case 1:\n                    status = \"Medium Risk\";\n                    break;\n                case 2:\n                    status = \"High Risk\";\n                    break;\n                default:\n                    status = \"No Risk\";\n                    break;\n            }\n            this.statusTextBlock.Text = \"Current Status: \" + status;\n\n        }\n```", "```py\n        private async Task StartUpdateLoop()\n        {\n            while (true)\n            {\n                await Task.Delay(TimeSpan.FromMinutes(1.0));\n                _trafficML = await Task.Run(() => new TrafficML(_connectionString));\n            }\n        }\n```", "```py\n        private void notifyButton_Click(object sender, RoutedEventArgs e)\n        {\n            //TODO\n        }\n```", "```py\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<configuration>\n    <startup> \n        <supportedRuntime version=\"v4.0\" sku=\".NETFramework,Version=v4.5.2\" />\n    </startup>\n  <connectionStrings>\n    <add name=\"trafficDatabase\" \n         connectionString=\"data source=nc54a9m5kk.database.windows.net;initial catalog=Traffic;\n         user id=chickenskills@nc54a9m5kk;password=sk1lzm@tter;\" />\n  </connectionStrings>\n</configuration>\n```", "```py\n    let trafficGeo' = Array.zip trafficGeo labels\n                      |> Array.map(fun (tg,l) -> {Geolocation=tg.Geolocation;CrashCount=tg.CrashCount;StopCount=tg.StopCount;Cluster=l} ) \n```", "```py\n    let toRadian x = (Math.PI/180.0) * x\n\n    let haversine x y =\n        let dlon = toRadian (x.Longitude - y.Longitude)\n        let dLat = toRadian (x.Latitude - y.Latitude)\n        let a0 = pown (Math.Sin(dLat/2.0)) 2\n        let a1 = Math.Cos(toRadian(x.Latitude)) * Math.Cos(toRadian(y.Latitude))\n        let a2 = pown (Math.Sin(dlon/2.0)) 2\n        let a = a0 + a1 * a2\n        let c = 2.0 * Math.Atan2(sqrt(a),sqrt(1.0-a))\n        let R = 3956.0\n        R * c\n```", "```py\n    member this.GetCluster(latitude: float, longitude: float, distance: float) =\n        let geolocation = {Latitude=latitude; Longitude=longitude}\n        let found = trafficGeo' |> Array.map(fun gt -> gt,(haversine gt.Geolocation geolocation))\n                                |> Array.filter(fun (gt,d) -> d < distance)\n                                |> Array.sortByDescending(fun (gt,d) -> gt.Cluster)\n        match found.Length with\n        | 0 -> -1\n        | _ -> let first = found |> Array.head\n               let gt = fst first\n               gt.Cluster \n```", "```py\nvar cluster = _trafficML.GetCluster(latitude, longitude);\n```", "```py\nvar cluster = _trafficML.GetCluster(latitude, longitude, 2.0);\n```", "```py\n            var location = _watcher.Position.Location;\n            var latitude = Double.Parse(location.Latitude.ToString(\"00.000\"));\n            var longitude = Double.Parse(location.Longitude.ToString(\"00.000\"));\n            _trafficML.AddGeolocationToClusterOverride(latitude, longitude);\n```", "```py\n    member this.AddGeolocationToClusterOverride(latitude: float, longitude: float)  =\n        let clusterOverride = EntityConnection.ServiceTypes.dbo_ClusterOverride()\n        clusterOverride.Latitude <- latitude\n        clusterOverride.Longitude <- longitude\n        clusterOverride.Cluster <- 2\n        clusterOverride.OverrideDateTime <- DateTime.UtcNow\n        context.dbo_ClusterOverride.AddObject(clusterOverride)\n        context.DataContext.SaveChanges() |> ignore\n```", "```py\n    let trafficGeo' = Array.zip trafficGeo labels\n                      |> Array.map(fun (tg,l) -> {Geolocation=tg.Geolocation;CrashCount=tg.CrashCount;StopCount=tg.StopCount;Cluster=l} ) \n```", "```py\n    let overrides = context.dbo_ClusterOverride\n                    |> Seq.filter(fun co -> (DateTime.UtcNow - co.OverrideDateTime) > TimeSpan(0,5,0))\n                    |> Seq.toArray\n\n        let checkForOverride (geoTraffic:GeoTraffic') =\n        let found = overrides\n                    |> Array.tryFind(fun o -> o.Latitude = geoTraffic.Geolocation.Latitude && \n                    o.Longitude = geoTraffic.Geolocation.Longitude)\n        match found.IsSome with\n        | true -> {Geolocation=geoTraffic.Geolocation;\n                  CrashCount=geoTraffic.CrashCount;\n                  StopCount=geoTraffic.StopCount;\n                  Cluster=found.Value.Cluster}\n        | false -> geoTraffic\n\n    let trafficGeo' = Array.zip trafficGeo labels\n                      |> Array.map(fun (tg,l) -> {Geolocation=tg.Geolocation;\n                       CrashCount=tg.CrashCount;\n                       StopCount=tg.StopCount;\n                       Cluster=l} ) \n                      |> Array.map(fun gt -> checkForOverride(gt))\n```"]