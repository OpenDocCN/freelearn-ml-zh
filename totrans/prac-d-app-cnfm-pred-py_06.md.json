["```py\n    !pip install nonconformist\n    ```", "```py\n    from nonconformist.base import ClassifierAdapter\n    ```", "```py\n    from nonconformist.cp import IcpClassifier\n    ```", "```py\n    from nonconformist.nc import NcFactory\n    ```", "```py\n    from nonconformist.nc import ClassifierNc,\n    ```", "```py\n    InverseProbabilityErrFunc, andMarginErrFunc specify the nonconformity measure using NcFactory.create_nc\n    ```", "```py\n    icp=IcpClassifier(ClassifierNc(ClassifierAdapter (LogisticRegression()), MarginErrFunc()))\n    ```", "```py\n    icp.fit(X_train, y_train)\n    ```", "```py\n    icp.calibrate(X_calib, y_calib)\n    ```", "```py\n    y_pred_calib = model.predict(X_calib)\n    ```", "```py\n    y_pred_score_calib = model.predict_proba(X_calib)\n    ```", "```py\n    y_pred_test = model.predict(X_test)\n    ```", "```py\n    y_pred_score_test = model.predict_proba(X_test)\n    ```", "```py\nX_train_calib, X_test, y_train_calib, y_test = train_test_split(X, y, test_size=1000, random_state=42, stratify=y)\n```", "```py\nX_train, X_calib, y_train, y_calib = train_test_split(X_train_calib, y_train_calib, test_size=1000, random_state=42, stratify=y_train_calib)\n```", "```py\n    model = LogisticRegression()\n    ```", "```py\n    model.fit(X_train, y_train)\n    ```", "```py\n    y_pred_calib = model.predict(X_calib)\n    ```", "```py\n    y_pred_score_calib = model.predict_proba(X_calib)\n    ```", "```py\n    y_pred_test = model.predict(X_test)\n    ```", "```py\n    y_pred_score_test = model.predict_proba(X_test)\n    ```", "```py\n    print('Classification accuracy on the test: {}'.format(accuracy_score(y_test, y_pred_test)))\n    ```", "```py\n    print('ROC AUC on the test set: {}'.format(roc_auc_score(y_test, y_pred_score_test[:,1])))\n    ```", "```py\n    icp = IcpClassifier(ClassifierNc(ClassifierAdapter (LogisticRegression()),MarginErrFunc()))\n    ```", "```pyIcpClassifier(ClassifierNc(ClassifierAdapter` **(LogisticRegression())), MarginErrFunc())`**: Finally, an ICP is created. An ICP is a type of conformal predictor that separates the calibration set from the training set, thereby providing valid predictions even under distribution shift. It uses the defined nonconformity scorer (based on the logistic regression classifier) and the margin error function to make predictions.\n7.  Then, we must train the ICP classifier on the proper training set and calibrate it on the calibration set:\n\n    ```", "```py\n\n    ```", "```py\n\n8.  Now that we have trained the conformal predictor, we can compute predictions on the test set using the specified significance level:\n\n    ```", "```py\n\n    ```"]