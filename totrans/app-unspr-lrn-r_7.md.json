["```py\n    iris_data<-iris\n    ```", "```py\n    iris_data$t_color='red'\n    iris_data$t_color[which(iris_data$Species=='setosa')]<-'green'\n    iris_data$t_color[which(iris_data$Species=='virginica')]<-'blue'\n    ```", "```py\n    k1<-c(7,3)\n    k2<-c(5,3)\n    k3<-c(6,2.5)\n    ```", "```py\n    plot(iris_data$Sepal.Length,iris_data$Sepal.Width,col=iris_data$t_color)\n    points(k1[1],k1[2],pch=4)\n    points(k2[1],k2[2],pch=5)\n    points(k3[1],k3[2],pch=6)\n    ```", "```py\n    number_of_steps<-10\n    ```", "```py\n    n<-1\n    ```", "```py\n    while(n<number_of_steps){\n    ```", "```py\n    iris_data$distance_to_clust1 <- sqrt((iris_data$Sepal.Length-k1[1])^2+(iris_data$Sepal.Width-k1[2])^2)\n    iris_data$distance_to_clust2 <- sqrt((iris_data$Sepal.Length-k2[1])^2+(iris_data$Sepal.Width-k2[2])^2)\n    iris_data$distance_to_clust3 <- sqrt((iris_data$Sepal.Length-k3[1])^2+(iris_data$Sepal.Width-k3[2])^2)\n    ```", "```py\n      iris_data$clust_1 <- 1*(iris_data$distance_to_clust1<=iris_data$distance_to_clust2 & iris_data$distance_to_clust1<=iris_data$distance_to_clust3)\n      iris_data$clust_2 <- 1*(iris_data$distance_to_clust1>iris_data$distance_to_clust2 & iris_data$distance_to_clust3>iris_data$distance_to_clust2)\n      iris_data$clust_3 <- 1*(iris_data$distance_to_clust3<iris_data$distance_to_clust1 & iris_data$distance_to_clust3<iris_data$distance_to_clust2)\n    ```", "```py\n      k1[1]<-mean(iris_data$Sepal.Length[which(iris_data$clust_1==1)])\n      k1[2]<-mean(iris_data$Sepal.Width[which(iris_data$clust_1==1)])\n      k2[1]<-mean(iris_data$Sepal.Length[which(iris_data$clust_2==1)])\n      k2[2]<-mean(iris_data$Sepal.Width[which(iris_data$clust_2==1)])\n      k3[1]<-mean(iris_data$Sepal.Length[which(iris_data$clust_3==1)])\n      k3[2]<-mean(iris_data$Sepal.Width[which(iris_data$clust_3==1)])\n      n=n+1\n    }\n    ```", "```py\n    iris_data$color='red'\n    iris_data$color[which(iris_data$clust_2==1)]<-'blue'\n    iris_data$color[which(iris_data$clust_3==1)]<-'green'\n    ```", "```py\n    plot(iris_data$Sepal.Length,iris_data$Sepal.Width,col=iris_data$color)\n    points(k1[1],k1[2],pch=4)\n    points(k2[1],k2[2],pch=5)\n    points(k3[1],k3[2],pch=6)\n    ```", "```py\n    ws<-read.csv('wholesale_customers_data.csv')\n    ```", "```py\n    ws<-ws[5:6]\n    ```", "```py\n    library(factoextra)\n    ```", "```py\n    clus<-kmeans(ws,2)\n    ```", "```py\n    fviz_cluster(clus,data=ws)\n    ```", "```py\n    clus<-kmeans(ws,3)\n    ```", "```py\n    fviz_cluster(clus,data=ws)\n    ```", "```py\n    clus<-kmeans(ws,4)\n    ```", "```py\n    fviz_cluster(clus,data=ws)\n    ```", "```py\n    clus<-kmeans(ws,5)\n    ```", "```py\n    fviz_cluster(clus,data=ws)\n    ```", "```py\n    clus<-kmeans(ws,6)\n    ```", "```py\n    fviz_cluster(clus,data=ws)\n    ```", "```py\n    ws<-read.csv('wholesale_customers_data.csv')\n    ```", "```py\n    ws<-ws[5:6]\n    ```", "```py\n    library(factoextra)\n    ```", "```py\n    library(cluster)\n    ```", "```py\n    clus<-pam(ws,4)\n    ```", "```py\n    fviz_cluster(clus,data=ws)\n    ```", "```py\n    clus<-kmeans(ws,4)\n    fviz_cluster(clus,data=ws)\n    ```", "```py\n    ws<-read.csv('wholesale_customers_data.csv')\n    ```", "```py\n    ws<-ws[5:6]\n    ```", "```py\n    fviz_nbclust(ws, kmeans, method = \"silhouette\",k.max=20)\n    ```", "```py\n    fviz_nbclust(ws, kmeans, method = \"wss\", k.max=20)\n    ```", "```py\n    fviz_nbclust(ws, kmeans, method = \"gap_stat\",k.max=20)\n    ```", "```py\n    ms<-read.csv('mushrooms.csv')\n    ```", "```py\n    dim(ms)\n    ```", "```py\n    [1] 8124   23\n    ```", "```py\n    summary.data.frame(ms)\n    ```", "```py\n    ms_k<-ms[,2:23]\n    ```", "```py\n    install.packages('klaR')\n    library(klaR)\n    ```", "```py\n    kmodes_ms<-kmodes(ms_k,2)\n    ```", "```py\n    result = table(ms$class, kmodes_ms$cluster)\n    result\n    ```", "```py\n           1    2\n      e   80 4128\n      p 3052  864\n    ```", "```py\n    library(dbscan)\n    library(factoextra)\n    ```", "```py\n    data(multishapes)\n    ```", "```py\n    ms<-multishapes[,1:2]\n    ```", "```py\n    plot(ms)\n    ```", "```py\n    km.res<-kmeans(ms,4)\n    fviz_cluster(km.res, ms,ellipse = FALSE)\n    ```", "```py\n    db.res<-dbscan(ms,eps = .15)\n    fviz_cluster(db.res, ms,ellipse = FALSE,geom = 'point')\n    ```", "```py\n    sd<-read.delim('seeds_dataset.txt')\n    ```", "```py\n    sd_c<-sd[,1:7]\n    ```", "```py\n    library(cluster)\n    ```", "```py\n    h.res<-hclust(dist(sd_c),\"ave\")\n    plot(h.res)\n    ```", "```py\n    memb <- cutree(h.res, k = 3)\n    results<-table(sd$X1,memb)\n    results\n    ```", "```py\n    d.res<-diana(sd_c,metric =\"euclidean\",)\n    plot(d.res)\n    ```", "```py\n    memb <- cutree(h.res, k = 3)\n    results<-table(sd$X1,memb)\n    results\n    ```", "```py\n    df<-iris\n    ```", "```py\n    df=df[df$Species=='setosa',]\n    ```", "```py\n    library(kdensity)\n    ```", "```py\n    dist <- kdensity(df$Sepal.Length)\n    plot(dist)\n    ```", "```py\n    dist <- kdensity(df$Sepal.Width)\n    plot(dist)\n    ```", "```py\n    df<-iris\n    ```", "```py\n    df=df[df$Species=='setosa',]\n    ```", "```py\n    sdev<-sd(df$Sepal.Length)\n    mn<-mean(df$Sepal.Length)\n    ```", "```py\n    xnorm<-rnorm(100,mean=mn,sd=sdev)\n    ```", "```py\n    plot(ecdf(xnorm),col='blue')\n    plot(ecdf(df$Sepal.Length),add=TRUE,pch = 4,col='red')\n    ```", "```py\n    ks.test(xnorm,df$Sepal.Length)\n    ```", "```py\n        Two-sample Kolmogorov-Smirnov test\n    data: xnorm and df$Sepal.Length\n    D = 0.14, p-value = 0.5307\n    alternative hypothesis: two-sided\n    ```", "```py\n    sdev<-sd(df$Sepal.Width)\n    mn<-mean(df$Sepal.Width)\n    xnorm<-rnorm(100,mean=mn,sd=sdev)\n    plot(ecdf(xnorm),col='blue')\n    plot(ecdf(df$Sepal.Width),add=TRUE,pch = 4,col='red')\n    ```", "```py\n    ks.test(xnorm,df$Sepal.Length)\n    ```", "```py\n        Two-sample Kolmogorov-Smirnov test\n    data: xnorm and df$Sepal.Width\n    D = 0.12, p-value = 0.7232\n    alternative hypothesis: two-sided\n    ```", "```py\n    Boston<-Boston[,-12]\n    ```", "```py\n    Boston_original<-Boston\n    ```", "```py\n    Boston$highcrim<-1*(Boston$indus>median(Boston$crim))\n    Boston$lowcrim<-1*(Boston$indus<=median(Boston$crim))\n    ```", "```py\n    Boston$highzn<-1*(Boston$zn>median(Boston$zn))\n    Boston$lowzn<-1*(Boston$zn<=median(Boston$zn))\n    ```", "```py\n    Boston$highindus<-1*(Boston$indus>median(Boston$indus))\n    Boston$lowindus<-1*(Boston$indus<=median(Boston$indus))\n    ```", "```py\n    Boston$highchas<-(Boston$chas)\n    Boston$lowchas<-(1-Boston$chas)\n    ```", "```py\n    Boston$highnox<-1*(Boston$nox>median(Boston$nox))\n    Boston$lownox<-1*(Boston$nox<=median(Boston$nox))\n    ```", "```py\n    Boston$highrm<-1*(Boston$rm>median(Boston$rm))\n    Boston$lowrm<-1*(Boston$rm<=median(Boston$rm))\n    ```", "```py\n    Boston$highage<-1*(Boston$age>median(Boston$age))\n    Boston$lowage<-1*(Boston$age<=median(Boston$age))\n    ```", "```py\n    Boston$highdis<-1*(Boston$dis>median(Boston$dis))\n    Boston$lowdis<-1*(Boston$dis<=median(Boston$dis))\n    ```", "```py\n    Boston$highrad<-1*(Boston$rad>median(Boston$rad))\n    Boston$lowrad<-1*(Boston$rad<=median(Boston$rad))\n    ```", "```py\n    Boston$hightax<-1*(Boston$tax>median(Boston$tax))\n    Boston$lowtax<-1*(Boston$tax<=median(Boston$tax))\n    ```", "```py\n    Boston$highptratio<-1*(Boston$ptratio>median(Boston$ptratio))\n    Boston$lowptratio<-1*(Boston$ptratio<=median(Boston$ptratio))\n    ```", "```py\n    Boston$highlstat<-1*(Boston$lstat>median(Boston$lstat))\n    Boston$lowlstat<-1*(Boston$lstat<=median(Boston$lstat))\n    ```", "```py\n    Boston$highmedv<-1*(Boston$medv>median(Boston$medv))\n    Boston$lowmedv<-1*(Boston$medv<=median(Boston$medv))\n    ```", "```py\n    Bostondummy<-Boston[,14:ncol(Boston)]\n    ```", "```py\n    Boston<-Boston_original\n    ```", "```py\n    Boston_cov<-cov(Boston)\n    Boston_eigen<-eigen(Boston_cov)\n    print(Boston_eigen$vectors)\n    ```", "```py\n    print(Boston_eigen$values)\n    ```", "```py\n    plot(Boston_eigen$values,type='o')\n    ```", "```py\n    neigen<-10\n    transformed<-t(t(as.matrix(Boston_eigen$vectors[,1:neigen])) %*% t(as.matrix(Boston)))\n    ```", "```py\n    restored<- t(as.matrix(Boston_eigen$vectors[,1:neigen]) %*% t(as.matrix(transformed)))\n    ```", "```py\n    print(head(restored-Boston))\n    ```", "```py\n    support_thresh<-0.2\n    firstpass<-unname(which(colMeans(Bostondummy,na.rm=TRUE)>support_thresh))\n    ```", "```py\n    secondcand<-t(combn(firstpass,2))\n    secondpass<-NULL\n    k<-1\n    while(k<=nrow(secondcand)){\n    support<-mean(Bostondummy[,secondcand[k,1]]*Bostondummy[,secondcand[k,2]],na.rm=TRUE)\n    if(support>support_thresh){\n    secondpass<-rbind(secondpass,secondcand[k,])\n    }\n    k<-k+1\n    }\n    ```", "```py\n    thirdpass<-NULL\n    k<-1\n    while(k<=nrow(secondpass)){\n    j<-1\n    while(j<=length(firstpass)){\n    n<-1\n    product<-1\n    while(n<=ncol(secondpass)){\n    product<-product*Bostondummy[,secondpass[k,n]]\n    n<-n+1\n    }\n    if(!(firstpass[j] %in% secondpass[k,])){\n    product<-product*Bostondummy[,firstpass[j]]\n    support<-mean(product,na.rm=TRUE)\n    if(support>support_thresh){\n    thirdpass<-rbind(thirdpass,c(secondpass[k,],firstpass[j]))\n    }\n    }\n    j<-j+1\n    }\n    k<-k+1\n    }\n    thirdpass_conf<-NULL\n    k<-1\n    while(k<=nrow(thirdpass)){\n    support<-mean(Bostondummy[,thirdpass[k,1]]*Bostondummy[,thirdpass[k,2]]*Bostondummy[,thirdpass[k,3]],na.rm=TRUE)\n    confidence<-mean(Bostondummy[,thirdpass[k,1]]*Bostondummy[,thirdpass[k,2]]*Bostondummy[,thirdpass[k,3]],na.rm=TRUE)/mean(Bostondummy[,thirdpass[k,1]]*Bostondummy[,thirdpass[k,2]],na.rm=TRUE)\n    lift<-confidence/mean(Bostondummy[,thirdpass[k,3]],na.rm=TRUE)\n    thirdpass_conf<-rbind(thirdpass_conf,unname(c(thirdpass[k,],support,confidence,lift)))\n    k<-k+1\n    }\n    ```", "```py\n    print(head(thirdpass_conf))\n    ```", "```py\n    install.packages('imager')\n    library('imager')\n    filepath<-'borges.jpg'\n    im <- imager::load.image(file =filepath) \n    ```", "```py\n    im<-imager::rm.alpha(im)\n    im<-imager::grayscale(im)\n    im<-imager::imsplit(im,axis = \"x\", nb = 10)   \n    ```", "```py\n    matrix <- matrix(nrow = 10, ncol = 10)\n    ```", "```py\n    for (i in 1:10) {\n      is <- imager::imsplit(im = im[[i]], axis = \"y\", nb = 10)\n      for (j in 1:10) {\n        matrix[j,i] <- mean(is[[j]])\n      }\n    }\n    ```", "```py\n    borges_signature<-get_signature(matrix)\n    borges_signature\n    ```", "```py\n    filepath<-'borges.jpg'\n    im <- imager::load.image(file =filepath) \n    im<-imager::rm.alpha(im)\n    im<-imager::grayscale(im)\n    im<-imager::imsplit(im,axis = \"x\", nb = 9)\n    ```", "```py\n    matrix <- matrix(nrow = 9, ncol = 9)\n    ```", "```py\n    for (i in 1:9) {\n      is <- imager::imsplit(im = im[[i]], axis = \"y\", nb = 9)\n      for (j in 1:9) {\n        matrix[j,i] <- mean(is[[j]])\n      }\n    }\n    ```", "```py\n    borges_signature_ninebynine<-get_signature(matrix)\n    borges_signature_ninebynine\n    ```", "```py\n    install.packages('imager')\n    library('imager')\n    filepath<-'alamo_marked.jpg'\n    im <- imager::load.image(file =filepath) \n    ```", "```py\n    im<-imager::rm.alpha(im)\n    im<-imager::grayscale(im)\n    im<-imager::imsplit(im,axis = \"x\", nb = 10)   \n    ```", "```py\n    matrix <- matrix(nrow = 10, ncol = 10)\n    ```", "```py\n    for (i in 1:10) {\n      is <- imager::imsplit(im = im[[i]], axis = \"y\", nb = 10)\n      for (j in 1:10) {\n        matrix[j,i] <- mean(is[[j]])\n      }\n    }\n    ```", "```py\n    watermarked_signature<-get_signature(matrix)\n    watermarked_signature\n    ```", "```py\n    comparison<-mean(abs(watermarked_signature-building_signature))\n    comparison\n    ```", "```py\n    factor<-read.csv('factor.csv')\n    ```", "```py\n    library(psych)\n    ```", "```py\n    ratings<-factor[,2:11]\n    ```", "```py\n    ratings_cor<-cor(ratings)\n    ```", "```py\n    parallel <- fa.parallel(ratings_cor, fm = 'minres', fa = 'fa')\n    ```", "```py\n    factor_analysis<-fa(ratings_cor, nfactors=1)\n    ```", "```py\n    print(factor_analysis)\n    ```", "```py\n    data(islands)\n    ```", "```py\n    boxplot(islands)\n    ```", "```py\n    log_islands<-log(islands)\n    ```", "```py\n    boxplot(log_islands)\n    ```", "```py\n    interquartile_range<-quantile(islands,.75)-quantile(islands,.25)\n    ```", "```py\n    upper_limit<-quantile(islands,.75)+1.5*interquartile_range\n    ```", "```py\n    outliers<-islands[which(islands>upper_limit)]\n    ```", "```py\n    interquartile_range_log<-quantile(log_islands,.75)-quantile(log_islands,.25)\n    ```", "```py\n    upper_limit_log<-quantile(log_islands,.75)+1.5*interquartile_range_log\n    ```", "```py\n    outliers_log<-islands[which(log_islands>upper_limit_log)]\n    ```", "```py\n    print(outliers)\n    ```", "```py\n    print(outliers_log)\n    ```", "```py\n    island_mean<-mean(islands)\n    island_sd<-sd(islands)\n    ```", "```py\n    outliers<-islands[which(islands>(island_mean+2*island_sd))]\n    outliers\n    ```", "```py\n    island_mean_log<-mean(log_islands)\n    island_sd_log<-sd(log_islands)\n    ```", "```py\n    outliers_log<-log_islands[which(log_islands>(island_mean_log+2*island_sd_log))]\n    ```", "```py\n    print(outliers_log)\n    ```", "```py\n    data(cars)\n    plot(cars)\n    ```", "```py\n    centroid<-c(mean(cars$speed),mean(cars$dist))\n    ```", "```py\n    cov_mat<-cov(cars)\n    ```", "```py\n    inv_cov_mat<-solve(cov_mat)\n    ```", "```py\n    all_distances<-NULL\n    ```", "```py\n    k<-1\n    while(k<=nrow(cars)){\n    the_distance<-cars[k,]-centroid\n    mahalanobis_dist<-t(matrix(as.numeric(the_distance)))%*% matrix(inv_cov_mat,nrow=2) %*% matrix(as.numeric(the_distance))\n    all_distances<-c(all_distances,mahalanobis_dist)\n    k<-k+1\n    }\n    ```", "```py\n    plot(cars)\n    points(cars$speed[which(all_distances>quantile(all_distances,.9))], cars$dist[which(all_distances>quantile(all_distances,.9))],col='red',pch=19)\n    ```"]