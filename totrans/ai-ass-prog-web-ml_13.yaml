- en: '13'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '13'
- en: Building a Regression Model for Customer Spend with ChatGPT
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用ChatGPT构建客户消费回归模型
- en: Introduction
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: In the realm of data-driven decision making, understanding customer behavior
    is pivotal for optimizing business strategies. Building on our exploration of
    classification techniques, this chapter shifts focus to regression analysis, specifically
    linear regression, to predict numerical values such as a customer’s annual spending.
    Linear regression helps us discover relationships within data, enabling predictions
    based on observed patterns.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在数据驱动决策的领域，理解客户行为对于优化商业策略至关重要。基于我们对分类技术的探索，本章将重点转向回归分析，特别是线性回归，以预测数值，例如客户的年度消费。线性回归帮助我们发现数据中的关系，使我们能够根据观察到的模式进行预测。
- en: This chapter will guide you through the process of building a predictive model
    that estimates annual spending by customers based on their interactions with a
    digital platform. We aim to deepen your understanding of linear regression, demonstrating
    how to prepare, process, and utilize datasets to construct accurate and reliable
    models.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将指导您构建一个预测模型，该模型根据客户与数字平台的互动来估计客户的年度消费。我们旨在加深您对线性回归的理解，展示如何准备、处理和利用数据集来构建准确和可靠的模型。
- en: 'As we progress, we will explore various techniques to enhance model accuracy
    and handle complex data scenarios:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们前进，我们将探索各种技术来提高模型准确性和处理复杂数据场景：
- en: '**Utilizing advanced regularization techniques** to improve model stability
    and performance.'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**利用高级正则化技术**来提高模型稳定性和性能。'
- en: '**Generating synthetic datasets** to better understand model behaviors under
    different data conditions.'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**生成合成数据集**以更好地理解模型在不同数据条件下的行为。'
- en: '**Streamlining model development** with comprehensive, end-to-end coding examples.'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**通过综合、端到端的编码示例简化模型开发**。'
- en: By the end of this chapter, you will be well equipped with the knowledge and
    skills necessary to utilize linear regression for data-driven decision-making
    in your business. Let’s embark on this journey into regression analysis to optimize
    customer engagement and revenue generation on our app or website.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，您将具备利用线性回归进行商业数据驱动决策所需的知识和技能。让我们开始这段回归分析的旅程，以优化我们应用程序或网站上的客户参与度和收入生成。
- en: 'In this chapter, we will:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将：
- en: '**Build a regression model with ChatGPT:** Readers will learn how ChatGPT can
    assist in generating Python code for building a regression model to predict the
    yearly amount spent by customers on our app or website using the dataset we have,
    offering a hands-on approach to understanding and interacting with datasets.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用ChatGPT构建回归模型**：读者将学习如何使用ChatGPT辅助生成用于构建回归模型的Python代码，以预测客户在我们的应用程序或网站上花费的年度金额，提供一种动手理解与交互数据集的方法。'
- en: '**Apply prompting techniques:** Effective techniques will be introduced to
    craft prompts that guide ChatGPT in providing the most useful code snippets and
    insights for regression tasks.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应用提示技术**：将介绍有效的技术来构建提示，引导ChatGPT提供最有用的代码片段和回归任务见解。'
- en: Business problem
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 商业问题
- en: An e-commerce store seeks to optimize customer engagement and increase revenue
    by gaining deeper insights into customer behavior and preferences. By analyzing
    various customer attributes and their purchasing patterns, the store aims to tailor
    its marketing strategies, improve customer retention, and enhance the overall
    shopping experience.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 一家电子商务商店希望通过深入了解客户行为和偏好来优化客户参与度和增加收入。通过分析各种客户属性及其购买模式，商店旨在定制其营销策略，提高客户保留率，并提升整体购物体验。
- en: Problem and data domain
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题与数据领域
- en: We will employ regression techniques to understand the relationship between
    yearly spending and other parameters. **Regression** is a way to find out whether
    and how different factors (like time spent on an app or website) relate to how
    much customers spend in the online store. It helps us understand and predict customer
    behavior. By understanding which factors are most influential in driving sales,
    an e-commerce store can tailor its strategies to enhance these areas and potentially
    increase revenue.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用回归技术来了解年度消费与其他参数之间的关系。**回归**是一种找出不同因素（如花在应用程序或网站上的时间）如何与客户在在线商店的消费金额相关联的方法。它帮助我们理解和预测客户行为。通过了解哪些因素对推动销售最有影响力，电子商务商店可以调整其策略来增强这些领域，并可能增加收入。
- en: Dataset overview
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据集概述
- en: 'The e-commerce store collects the following information from the customer:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 电子商务店铺从客户那里收集以下信息：
- en: '**Email:** This is the customer’s email address. It is a unique identifier
    for each customer and can be used for communication, such as sending order confirmations,
    newsletters, or personalized marketing offers.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**电子邮件：** 这是客户的电子邮件地址。它是每个客户的唯一标识符，可用于通信，例如发送订单确认、时事通讯或个性化的营销优惠。'
- en: '**Address:** This refers to the physical address of the customer. It’s crucial
    for delivering products they have purchased. Additionally, address data can sometimes
    provide insights into geographical trends in sales and preferences.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**地址：** 这指的是客户的物理地址。对于交付他们购买的产品至关重要。此外，地址数据有时可以提供关于销售和偏好的地理趋势的见解。'
- en: '**Avatar:** This could be a digital representation or image chosen by the user.
    It might not directly impact sales or customer behavior, but it can be part of
    customer engagement strategies, adding a personal touch to user profiles.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**头像：** 这可能是用户选择的数字表示或图像。它可能不会直接影响销售或客户行为，但它可以是客户互动策略的一部分，为用户资料增添个性化触感。'
- en: '**Avg Session Length:** This is the average duration of all sessions combined,
    in minutes. This is like measuring how long a customer spends in your store each
    time they visit. Imagine someone walking around, looking at products for, say,
    33 minutes on average.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**平均会话时长：** 这是所有会话的平均持续时间，以分钟计算。这就像测量客户每次访问您的店铺时花费的时间。想象一下，有人平均花费33分钟在您的店铺里四处走动，查看产品。'
- en: '**Time on App:** This the duration of presence on the store’s application,
    in minutes. Think of it as how long they are browsing through your app, maybe
    while they are on the bus or waiting in line at the coffee shop.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应用使用时间：** 这是指客户在店铺应用上的停留时长，以分钟计算。可以将其视为他们在应用中浏览的时间，比如在公交车上或咖啡店排队时。'
- en: '**Time on Website:** This is similar to the time on the app, but this is for
    your website. If they’re using a computer at home or work to look at your store,
    how long do they stay?'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**网站使用时间：** 这与应用使用时间类似，但这是针对您的网站。如果他们在家里或工作场所使用电脑查看您的店铺，他们会停留多久？'
- en: '**Length of Membership:** This is how long these customers have been with your
    store. Some might be new, while others have been shopping with you for years.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**会员时长：** 这表示这些客户在您的店铺中的时间长短。有些人可能是新顾客，而其他人可能已经与您合作多年。'
- en: '**Yearly Amount Spent:** This is the total amount of money each customer spends
    at your store in a year, in dollars.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**年度消费金额：** 这是指每位客户在您的店铺中一年内花费的总金额，以美元计算。'
- en: 'In the context of our dataset:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的数据集背景下：
- en: '**Email and address**: These should be used primarily for transactional purposes
    unless the customer has agreed to receive marketing communications. We will not
    use them for analysis.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**电子邮件和地址：** 这些应主要用于交易目的，除非客户同意接收营销通讯。我们不会将它们用于分析。'
- en: '**Avatar**: This can be used to personalize the user experience but does not
    hold significant analytical value for sales predictions.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**头像：** 这可以用于个性化用户体验，但对于销售预测的统计分析价值不大。'
- en: '**Other data**: Variables like “Time on App” and “Time on Website” can be analyzed
    to improve user experience and business strategies without infringing on personal
    privacy.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**其他数据：** 如“应用使用时间”和“网站使用时间”等变量可以进行分析，以改进用户体验和业务策略，同时不侵犯个人隐私。'
- en: In summary, while data like email, address, and avatar can be valuable for business
    operations and customer engagement, they must be handled with a high degree of
    responsibility, prioritizing the privacy and preferences of the customers.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，虽然像电子邮件、地址和头像这样的数据对于业务运营和客户互动很有价值，但它们必须以高度的责任心处理，优先考虑客户的隐私和偏好。
- en: Note that the data used is not a real dataset and hence the emails, addresses,
    and so on are all made up.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，所使用的数据不是真实的数据集，因此电子邮件、地址等都是虚构的。
- en: Breaking the problem down into features
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将问题分解为特征
- en: 'Given the nature of our dataset, which includes both independent variables
    (like “Avg. Session Length,” “Time on App,” “Time on Website,” and “Length of
    Membership”) and a dependent variable (“Yearly Amount Spent”), we will start with
    a simple regression technique with both ChatGPT and ChatGPT Plus or GPT-4\. This
    will include the following high-level steps:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到我们的数据集包括独立变量（如“平均会话时长”、“应用使用时间”、“网站使用时间”和“会员时长”）以及一个因变量（“年度消费金额”），我们将从使用ChatGPT和ChatGPT
    Plus或GPT-4的简单回归技术开始。这包括以下高级步骤：
- en: '**Building the model step by step**: Users will understand the process of building
    a machine learning model step by step, including loading the dataset, splitting
    it into training and testing sets, training the model, making predictions, and
    evaluating its performance.'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Apply regularization techniques**: Users will learn how to apply regularization
    techniques such as Ridge regression and Lasso regression with cross-validation
    to improve the performance of a linear regression model. This includes initializing
    the models, training them using the training data, and evaluating their performance.'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Generate a synthetic dataset to add complexity**: Users will discover how
    to generate a synthetic dataset with added complexity using the `make_regression`
    function from the `sklearn.datasets` module. This involves specifying the number
    of samples, features, and noise levels to mimic real-world data.'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Generating code to develop a model in a single step for a synthetic dataset**:
    Users will see how to write end-to-end code in a single step to load the synthetic
    dataset, split it into training and testing sets, train a linear regression model,
    evaluate its performance, and print the evaluation metrics. This allows for a
    streamlined approach to model development and evaluation.'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Prompting strategy
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To leverage ChatGPT for machine learning, we need to have a clear understanding
    of how to implement the prompting strategies specifically for code generation
    for machine learning.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: Let’s brainstorm what we would like to achieve in this task to get a better
    understanding of what needs to go into the initial prompt.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: 'Strategy 1: Task-Actions-Guidelines (TAG) prompt strategy'
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**1.1 – Task**: The specific task or goal is to create a simple linear regression
    model to predict the “**Yearly Amount Spent**” bydataset based on various attributes
    in the dataset.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: '**1.2 – Actions**: In this case, the strategy is to let ChatGPT decide the
    steps, hence no specific steps are provided.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: '**1.3 – Guidelines**: We will provide the following guidelines to ChatGPT in
    our prompt:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: The code should be compatible with Jupyter Notebook
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensure that there are detailed comments for each line of code.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You have to explain each line of code, which will be then copied into the text
    block of the notebook in detail for each method used in the code before providing
    the code.
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Strategy 2: Persona-Instructions-Context (PIC) prompt strategy'
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**2.1 – Persona**: We will adopt the persona of a beginner who needs to learn
    the different steps of model creation; hence the code should be generated step
    by step.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: '**2.2 – Instructions**: We have included the step to mount Google Drive explicitly
    since it’s a common oversight.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: '**2.3 – Context**: The most important part is to provide the context of the
    dataset and exact field names to generate the code that can be executed directly,
    or to provide the dataset itself in the case of ChatGPT Plus.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: 'Strategy 3: Learn-Improvise-Feedback-Evaluate (LIFE) prompt strategy'
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**3.1 – Learn**:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '**3.1 – 学习**:'
- en: We want to learn about linear regression and how it works.
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们想了解线性回归及其工作原理。
- en: Understand feature engineering techniques and model evaluation metrics.
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解特征工程技术和模型评估指标。
- en: We want to learn how to create a synthetic dataset.
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们想学习如何创建合成数据集。
- en: '**3.2 – Improvise**:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '**3.2 – 改进**:'
- en: We will use it later while applying regularization techniques.
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将在应用正则化技术时使用它。
- en: '**3.3 – Feedback**:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '**3.3 – 反馈**:'
- en: If the code provided results in any errors, then feedback should be provided
    back to ChatGPT. We applied it in the Lasso and Ridge code execution using ChatGPT
    Plus.
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果提供的代码导致任何错误，则应向ChatGPT提供反馈。我们已在ChatGPT Plus中应用了Lasso和Ridge代码执行。
- en: '**3.4 – Evaluate**:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '**3.4 – 评估**:'
- en: Execute the code provided by ChatGPT to ensure accuracy and validity. This is
    used throughout the chapter.
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行ChatGPT提供的代码以确保准确性和有效性。这一点在本章中一直被使用。
- en: Building a simple linear regression model to predict the “Yearly Amount Spent”
    by customers using the free version of ChatGPT
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用ChatGPT的免费版本构建一个简单的线性回归模型来预测“年度消费金额”
- en: When using the free version, it’s important to give ChatGPT a clear description
    of the dataset first, which serves as an effective approach to generating code,
    followed by user evaluation. ChatGPT is already trained very well on Python and
    a machine learning algorithm; hence, we do not need to provide specific steps
    here. To verify that the generated code functions correctly, we will be using
    Google Colab.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用免费版本时，首先向ChatGPT提供一个清晰的关于数据集的描述非常重要，这作为生成代码的有效方法，随后进行用户评估。ChatGPT已经在Python和机器学习算法上训练得很好；因此，我们在这里不需要提供具体的步骤。为了验证生成的代码是否正确运行，我们将使用Google
    Colab。
- en: 'Feature 1: Building the model step by step'
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 特征1：逐步构建模型
- en: Let’s craft our initial prompt for the classification model.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为分类模型制定初始提示。
- en: '[P**rompt]**'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '[提示**]'
- en: 'I want to create a simple linear regression model to predict the “Yearly Amount
    Spent” (TAG 1.1) by customers for the e-commerce customers dataset which consists
    of the following columns (PIC 2.3):'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我想创建一个简单的线性回归模型来预测电子商务客户数据集中客户的“年度消费金额”（TAG 1.1），该数据集包含以下列（PIC 2.3）：
- en: '**Email**: The electronic mail unique to each customer, used here as an identification.'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**电子邮件**：每个客户的独特电子邮箱，在此用作识别。'
- en: '**Address**: The physical geographical location of each customer.'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**地址**：每个客户的物理地理位置。'
- en: '**Avatar**: This is the visual anonymity representation of the customers in
    the database.'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**头像**：这是数据库中客户的视觉匿名表示。'
- en: '**Avg. Session Length**: The average duration of all session combined in minutes.'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**平均会话长度**：所有会话合并后的平均持续时间，以分钟为单位。'
- en: '**Time on App**: This the duration of presence on the stores’ application,
    in minutes.'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**应用时间**：这是在商店应用程序中的持续时间，以分钟为单位。'
- en: '**Time on Website**: This is the time duration on the website of the store,
    in minutes.'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**网站时间**：这是在商店网站上的时间长度，以分钟为单位。'
- en: '**Length of Membership**: This is the amount of time a customer remains a registered
    user of the store’s online resources.'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**会员时长**：这是客户作为商店在线资源注册用户的时长。'
- en: '**Yearly Amount Spent**: This is the cost implication of accessing the store’s
    online resources, paid by the customers, in dollars.'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**年度消费金额**：这是客户支付商店在线资源的成本，以美元计算。'
- en: 'I am a beginner user (PIC 2.1), so please provide step by step code and strictly
    follow following instructions (PIC 2.2):'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我是一个初学者用户（PIC 2.1），所以请提供逐步的代码，并严格遵循以下说明（PIC 2.2）：
- en: Code should be compatible with Jupyter notebook
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码应与Jupyter笔记本兼容
- en: Ensure that there are detailed comments for each line of code.
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保每行代码都有详细的注释。
- en: You have to explain each line of code, which will be then copied in the text
    block of the notebook in detail for each method used in code before providing
    the code.
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您必须解释每一行代码，然后详细地将其复制到笔记本的文本块中，详细说明代码中使用的每种方法，在提供代码之前。
- en: Also note that the dataset is placed in Google Drive at this path `'/content/drive/My
    Drive/Chapter05/Ecommerce Customers.csv '` (TAG 1.2).
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 还请注意，数据集放置在Google Drive的此路径`'/content/drive/My Drive/Chapter05/Ecommerce Customers.csv
    '`（TAG 1.2）。
- en: So, add the code to mount the drive, load the dataset, provide one step at a
    time, and wait for users feedback.
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 因此，添加代码来挂载驱动器，加载数据集，一次提供一步，并等待用户反馈。
- en: '[E**nd of prompt]**'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '[提示结束**]'
- en: You should receive a response similar to the following.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该收到以下类似的响应。
- en: '![](img/B21232_13_01.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21232_13_01.png)'
- en: 'Figure 13.1: The initial response from ChatGPT'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: '[P**rompt response]**'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: Sure, let’s proceed step by step. First, we need to mount Google Drive in our
    Jupyter Notebook environment so we can access the dataset.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s how you can do it:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Explanation:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: '`from google.colab import drive`: This line imports the `drive` module from
    the `google.colab` package.'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`drive.mount(''/content/drive'')`: This command mounts your Google Drive at
    the specified path `/content/drive`. When you run this cell, it will prompt you
    to authenticate and give you a link to follow to get an authorization code. Once
    you enter the code, your Google Drive will be mounted.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let me know if you have any questions before we proceed.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: '[E**nd of response]**'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: We will now apply the evaluate prompting strategy and validate the code by executing
    the code in Google Colab for every step. The code runs perfectly fine and mounts
    Google Drive.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: Please note that it requires permission to access the drive and would prompt
    the user.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: Please refer to the notebook `Learning simple regression with ChatGPT.ipynb`
    for the executable code snippets or copy the code from the prompt response.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: Running your cell, you should see a message that says “Mounted at /content/drive
    as a result of calling drive.mount.”
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: 'We will now instruct ChatGPT to proceed to the next step:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: '[P**rompt]**'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: Let’s proceed
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: '[E**nd of prompt]**'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: 'We should receive a response similar to the following to load the dataset into
    the notebook:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: '[P**rompt response]**'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: Great! Now that we have mounted Google Drive, we can load the dataset into our
    notebook.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s how you can load the dataset:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Explanation:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: '`import pandas as pd`: This line imports the pandas library and aliases it
    as `pd`, which is a common convention.'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`file_path = ''/content/drive/My Drive/Chapter05/Ecommerce Customers.csv''`:
    This line defines the file path where the dataset is located in your Google Drive.'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pd.read_csv(file_path)`: This function reads the CSV file located at the specified
    path and creates a DataFrame from it.'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`print(ecommerce_data.head())`: This line prints the first few rows of the
    DataFrame to verify that the dataset has been loaded correctly.'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let me know if you have any questions or if you’d like to proceed to the next
    step!
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: '[E**nd of response]**'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: We executed the code provided by ChatGPT in the notebook and it loads the dataset
    from the defined path and prints the first few rows. As we had given the path
    of the file in the initial prompt, we don’t need to change anything in the code
    and it runs perfectly fine. The takeaway is that we need to be specific with file
    paths and locations where required.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot of a computer](img/B21232_13_02.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13.2: Loading the dataset'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: Next, we’ll provide the output to ChatGPT and then proceed to *Step 1*. In this
    instance, we’ve employed the strategy of providing additional context to ChatGPT
    by presenting the output textually.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: 'It is important to note that since we are utilizing GPT-3.5, which lacks the
    capability to execute code or process images, we are limited to providing textual
    outputs from the notebook:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要注意，由于我们正在使用GPT-3.5，它没有执行代码或处理图像的能力，所以我们只能从笔记本中提供文本输出：
- en: '[P**rompt]**'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '[提示]**'
- en: '[PRE2]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[E**nd of prompt]**'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '[提示结束]**'
- en: 'We anticipate receiving a response similar to the following, wherein ChatGPT
    will offer guidance on the subsequent steps. Initially, we refrained from specifying
    any particular steps in the initial prompt, opting instead to allow ChatGPT to
    determine the subsequent course of action:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我们预计会收到以下类似的响应，其中ChatGPT将提供后续步骤的指导。最初，我们在初始提示中未指定任何特定步骤，而是选择让ChatGPT确定后续的行动方案：
- en: '[P**rompt response]**'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '[提示响应]**'
- en: Great! The dataset has been loaded successfully. Now, we can proceed with building
    our linear regression model to predict the “Yearly Amount Spent” by customers.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 太好了！数据集已成功加载。现在，我们可以继续构建我们的线性回归模型来预测客户花费的“年度金额”。
- en: 'The steps involved in building a simple linear regression model are as follows:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 构建简单线性回归模型的步骤如下：
- en: '**Data Preparation**: Split the dataset into input features (`X`) and the target
    variable (`y`).'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据准备**：将数据集分割为输入特征（`X`）和目标变量（`y`）。'
- en: '**Split Data**: Split the dataset into training and testing sets.'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分割数据**：将数据集分割为训练集和测试集。'
- en: '**Model Initialization**: Create a linear regression model object.'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模型初始化**：创建一个线性回归模型对象。'
- en: '**Model Training**: Fit the model to the training data.'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模型训练**：将模型拟合到训练数据。'
- en: '**Model Evaluation**: Evaluate the model’s performance using the testing data.'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模型评估**：使用测试数据评估模型性能。'
- en: 'Let’s start with *step 1*:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从*步骤1*开始：
- en: 'Step 1: Data Preparation:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 第1步：数据准备：
- en: '[PRE3]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Explanation:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 说明：
- en: '`X = ecommerce_data[[''Avg. Session Length'', ''Time on App'', ''Time on Website'',
    ''Length of Membership'']]`: This line selects the input features (`''Avg. Session
    Length''`, `''Time on App''`, `''Time on Website''`, `''Length of Membership''`)
    from the dataset and assigns them to the variable `X`.'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`X = ecommerce_data[[''Avg. Session Length'', ''Time on App'', ''Time on Website'',
    ''Length of Membership'']]`：这一行从数据集中选择了输入特征（`''Avg. Session Length''`，`''Time
    on App''`，`''Time on Website''`，`''Length of Membership''`）并将其分配给变量`X`。'
- en: '`y = ecommerce_data[''Yearly Amount Spent'']`: This line selects the target
    variable `''Yearly Amount Spent''` from the dataset and assigns it to the variable
    `y`.'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`y = ecommerce_data[''Yearly Amount Spent'']`：这一行从数据集中选择了目标变量`''Yearly Amount
    Spent''`并将其分配给变量`y`。'
- en: Let me know if you have any questions or if you’d like to proceed to the next
    step!
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有任何问题或想要进行下一步，请告诉我！
- en: '[E**nd of response]**'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '[响应结束]**'
- en: ChatGPT has outlined the steps it will adhere to for code generation. Furthermore,
    it has furnished the code for the initial step, data preparation, wherein the
    dataset is divided into features and the target variable. Notably, it adeptly
    discerned the features by excluding email addresses, avatars, and addresses. Additionally,
    it precisely employed the column names as stipulated in the description provided
    in the initial prompt. The strategy employed here involves including the dataset
    column names in the prompt to ensure compatibility with the generated code. Hence,
    the code executes without any modifications or errors.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: ChatGPT概述了它将遵循的代码生成步骤。此外，它提供了第一步的代码，即数据准备，其中数据集被分为特征和目标变量。值得注意的是，它巧妙地排除了电子邮件地址、头像和地址等特征。此外，它精确地使用了初始提示中提供的描述中规定的列名。这里采用的策略是在提示中包含数据集列名，以确保生成的代码的兼容性。因此，代码执行时无需任何修改或错误。
- en: '![](img/B21232_13_03.png)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21232_13_03.png)'
- en: 'Figure 13.3: Step 1 – data preparation'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.3：步骤1 – 数据准备
- en: 'Next, we will instruct ChatGPT to proceed:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将指示ChatGPT继续：
- en: '[P**rompt]**'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '[提示]**'
- en: Let’s proceed to the next step.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续下一步。
- en: '[E**nd of prompt]**'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '[提示结束]**'
- en: 'We should receive a response similar to the following to split the data along
    with the explanation:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该收到以下类似的响应，以根据说明分割数据：
- en: '[P**rompt response]**'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '[提示响应]**'
- en: Great! Now that we have prepared our data by separating the input features (`X`)
    and the target variable (`y`), we can proceed to the next step, which is splitting
    the data into training and testing sets.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 太好了！现在我们已经通过分离输入特征（`X`）和目标变量（`y`）来准备我们的数据，我们可以继续到下一步，即将数据分割为训练集和测试集。
- en: 'Step 2: Split Data:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 第2步：分割数据：
- en: '[PRE4]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Explanation:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 说明：
- en: '`from sklearn.model_selection import train_test_split`: This line imports the
    `train_test_split` function from the `sklearn.model_selection` module, which is
    used to split the dataset into training and testing sets.'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`from sklearn.model_selection import train_test_split`: 这行代码从 `sklearn.model_selection`
    模块导入 `train_test_split` 函数，该函数用于将数据集分为训练集和测试集。'
- en: '`train_test_split(X, y, test_size=0.2, random_state=42)`: This function splits
    the input features (`X`) and the target variable (`y`) into training and testing
    sets. The `test_size` parameter specifies the proportion of the dataset to include
    in the testing set (in this case, 20% for testing). The `random_state` parameter
    is used for reproducibility, ensuring that the same random split is generated
    each time the code is run.'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`train_test_split(X, y, test_size=0.2, random_state=42)`: 这个函数将输入特征（`X`）和目标变量（`y`）分为训练集和测试集。`test_size`
    参数指定了要包含在测试集中的数据集比例（在本例中，测试集为 20%）。`random_state` 参数用于可重复性，确保每次运行代码时生成相同的随机分割。'
- en: '`X_train, X_test, y_train, y_test`: These variables hold the training and testing
    sets for the input features (`X`) and the target variable (`y`), respectively.'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`X_train, X_test, y_train, y_test`: 这些变量分别持有输入特征（`X`）和目标变量（`y`）的训练集和测试集。'
- en: '`print("Training set shape - X_train:", X_train.shape, "y_train:", y_train.shape)`:
    This line prints the shapes of the training set input features (`X_train`) and
    target variable (`y_train`).'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`print("Training set shape - X_train:", X_train.shape, "y_train:", y_train.shape)`:
    这行代码打印了训练集输入特征（`X_train`）和目标变量（`y_train`）的形状。'
- en: '`print("Testing set shape - X_test:", X_test.shape, "y_test:", y_test.shape)`:
    This line prints the shapes of the testing set input features (`X_test`) and target
    variable (`y_test`).'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`print("Testing set shape - X_test:", X_test.shape, "y_test:", y_test.shape)`:
    这行代码打印了测试集输入特征（`X_test`）和目标变量（`y_test`）的形状。'
- en: Let me know if you have any questions or if you’d like to proceed to the next
    step!
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有任何问题或想要进行下一步，请告诉我！
- en: '[E**nd of response]**'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '[响应结束]**'
- en: The code executed successfully, and the data was split into training and testing
    sets with the expected 80-20 ratio. Notably, we did not explicitly specify the
    ratio, yet ChatGPT defaulted to the standard 80-20 split.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 代码执行成功，数据已按照预期的 80-20 比例分为训练集和测试集。值得注意的是，我们没有明确指定比例，但 ChatGPT 默认为标准的 80-20 分割。
- en: '![A white screen with text  Description automatically generated with medium
    confidence](img/B21232_13_04.png)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![带有文本的白色屏幕  自动生成的中等置信度描述](img/B21232_13_04.png)'
- en: 'Figure 13.4: Step 2 – split the data'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.4：步骤 2 – 分割数据
- en: 'Next, we will provide the output of the previous step to ChatGPT, which should
    let ChatGPT know about the shape and it should also provide us the code for the
    next step:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将提供上一步的输出给 ChatGPT，这样 ChatGPT 应该会了解形状，并且也应该为我们提供下一步的代码：
- en: '[P**rompt]**'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '[提示]**'
- en: '[PRE5]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[E**nd of prompt]**'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '[提示结束]**'
- en: 'We should receive a response similar to the following where the model is initialized:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该收到一个类似的响应，其中模型已初始化：
- en: '[P**rompt response]**'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '[提示响应]**'
- en: Perfect! We have successfully split our dataset into training and testing sets.
    The training set contains 400 samples, while the testing set contains 100 samples.
    Each sample consists of four input features and one target variable.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 完美！我们已经成功将数据集分为训练集和测试集。训练集包含 400 个样本，而测试集包含 100 个样本。每个样本由四个输入特征和一个目标变量组成。
- en: Now, let’s proceed to the next step, which is initializing our linear regression
    model.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们进行下一步，即初始化我们的线性回归模型。
- en: 'Step 3: Model Initialization:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 步骤 3：模型初始化：
- en: '[PRE6]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Explanation:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 说明：
- en: '`from sklearn.linear_model import LinearRegression`: This line imports the
    `LinearRegression` class from the `sklearn.linear_model` module, which is used
    to create a linear regression model.'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`from sklearn.linear_model import LinearRegression`: 这行代码从 `sklearn.linear_model`
    模块导入 `LinearRegression` 类，用于创建线性回归模型。'
- en: '`model = LinearRegression()`: This line initializes a linear regression model
    object and assigns it to the variable model.'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`model = LinearRegression()`: 这行代码初始化一个线性回归模型对象，并将其分配给变量 model。'
- en: Let me know if you have any questions or if you’d like to proceed to the next
    step!
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有任何问题或想要进行下一步，请告诉我！
- en: '[E**nd of response]**'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '[响应结束]**'
- en: The code is executed perfectly fine without any errors. Necessary imports are
    also provided by ChatGPT.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 代码执行得很好，没有任何错误。必要的导入也由 ChatGPT 提供。
- en: '![A screenshot of a computer program  Description automatically generated](img/B21232_13_05.png)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
  zh: '![计算机程序的截图  自动生成的描述](img/B21232_13_05.png)'
- en: 'Figure 13.5: Step 3 – model initialization'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.5：步骤 3 – 模型初始化
- en: 'We’ll simply direct ChatGPT to continue. It’s worth noting that because our
    initial prompt included the instruction to provide step-by-step code, we don’t
    need to tailor our subsequent prompts to each individual step or task. Instead,
    we’ll allow ChatGPT to lead us, providing it with the outputs from the preceding
    steps as necessary:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: '[P**rompt]**'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: Let’s proceed.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: '[E**nd of prompt]**'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: 'We should receive a response similar to the following to train the model:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: '[P**rompt response]**'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: Great! Now that we have initialized our linear regression model, we can move
    on to the next step, which is training the model using the training data.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 4: Model Training:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Explanation:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: '`model.fit(X_train, y_train)`: This line fits (or trains) the linear regression
    model using the training data. The `fit` method takes the input features (`X_train`)
    and the corresponding target variable (`y_train`) as arguments and adjusts the
    model’s parameters to minimize the difference between the actual and predicted
    values.'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that our model has been trained, we can proceed to the final step, which
    is evaluating the model’s performance using the testing data.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: Let me know if you have any questions or if you’d like to proceed!
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: '[E**nd of response]**'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: We will execute the code and that should train the model.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: '![A computer screen shot of a computer code  Description automatically generated](img/B21232_13_06.png)'
  id: totrans-198
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13.6: Step 4 – model training'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: 'We will instruct ChatGPT to proceed:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: '[P**rompt]**'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
- en: Let’s proceed
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: '[E**nd of prompt]**'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: 'We should receive a response similar to the following to evaluate the performance
    of the model using test data:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
- en: '[P**rompt response]**'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: Great! Now that our linear regression model has been trained, we can evaluate
    its performance using the testing data.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 5: Model Evaluation:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Explanation:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
- en: '`model.predict(X_test)`: This line uses the trained model to make predictions
    on the input features (`X_test`), which generates the predicted values of the
    target variable.'
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`from sklearn.metrics import mean_squared_error, r2_score`: This line imports
    the `mean_squared_error` and `r2_score` functions from the `sklearn.metrics` module,
    which are used to evaluate the model’s performance.'
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mean_squared_error(y_test, y_pred)`: This function calculates the mean squared
    error (`MSE`) between the actual target variable (`y_test`) and the predicted
    values (`y_pred`).'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`r2_score(y_test, y_pred)`: This function calculates the R-squared (coefficient
    of determination) between the actual target variable (`y_test`) and the predicted
    values (`y_pred`).'
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`print("Mean Squared Error (MSE):", mse)`: This line prints the mean squared
    error (`MSE`), which measures the average squared difference between the actual
    and predicted values. A lower MSE indicates better model performance.'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`print("R-squared (Coefficient of Determination):", r_squared)`: This line
    prints the R-squared value, which represents the proportion of the variance in
    the target variable that is explained by the model. A higher R-squared value (closer
    to 1) indicates better fit.'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These evaluation metrics will help us assess how well our linear regression
    model is performing in predicting the “Yearly Amount Spent” by customers.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
- en: Let me know if you have any questions or if you’d like further explanation on
    any part!
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: '[E**nd of response]**'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: We execute the code and it runs perfectly fine without any errors and prints
    the **mean-squared error** (**MSE**) and the coefficient of determination (`R-squared`).
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot of a computer  Description automatically generated](img/B21232_13_07.png)'
  id: totrans-220
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13.7: Model evaluation output'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
- en: 'For those new to machine learning, it’s crucial to assess whether the model
    performance meets acceptable standards. Once more, we’ll seek assistance from
    ChatGPT and furnish it with the output for evaluation:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
- en: '[P**rompt]**'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[E**nd of prompt]**'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
- en: 'We should receive a response from ChatGPT explaining the results, which suggests
    that our model is actually performing very well given that R-squared is very close
    to 1:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: '[P**rompt response]**'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
- en: 'The evaluation metrics indicate that our linear regression model performs quite
    well on the testing data:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: '**Mean Squared Error (MSE)**: The MSE value is approximately 109.86\. This
    indicates that, on average, the squared difference between the actual and predicted
    values of the “Yearly Amount Spent” is around 109.86\. Lower MSE values are desirable,
    indicating better model performance.'
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**R-squared (Coefficient of Determination)**: The R-squared value is approximately
    0.978\. This indicates that approximately 97.8% of the variance in the “Yearly
    Amount Spent” can be explained by the linear regression model. A higher R-squared
    value closer to 1 suggests that the model provides a better fit to the data.'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Overall, these evaluation metrics suggest that our linear regression model is
    performing well in predicting the “Yearly Amount Spent” by customers based on
    the provided input features.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
- en: If you have any further questions or need additional assistance, feel free to
    ask!
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
- en: '[E**nd of response]**'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
- en: Having now acquired proficiency in utilizing ChatGPT to construct a linear regression
    model incrementally, we’ll transition to the second feature and delve into the
    application of regularization techniques. While our current model exhibits satisfactory
    performance, regularization can prove invaluable, particularly in scenarios where
    the model is either underfitted or overfitted.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
- en: 'Feature 2: Applying regularization techniques'
  id: totrans-235
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will use the learn and improvise prompting strategy (LIFE 3.1 and 3.2) with
    ChatGPT to understand whether the model could be overfitted and what should be
    done in such a case:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
- en: '[P**rompt]**'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
- en: Could the model be overfitting?
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
- en: '[E**nd of prompt]**'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
- en: 'We receive the response from ChatGPT indicating that it is unlikely that our
    model is overfitted but it does suggest some things to consider such as regularization
    techniques and cross-validation:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
- en: '[P**rompt response]**'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
- en: It’s essential to consider the possibility of overfitting when interpreting
    the model’s performance. Overfitting occurs when the model learns to capture noise
    or random fluctuations in the training data, rather than the underlying relationships
    between the input features and the target variable. This can result in a model
    that performs well on the training data but generalizes poorly to unseen data.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are a few indicators that suggest overfitting may be occurring:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
- en: '**Large Discrepancy Between Training and Testing Performance**: If the model
    performs significantly better on the training data compared to the testing data,
    it may be overfitting. In our case, if the MSE and R-squared values are much better
    on the training set than on the testing set, it could indicate overfitting.'
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Complexity of the Model**: Overly complex models with a large number of parameters
    relative to the size of the training data are more prone to overfitting. Linear
    regression is relatively simple, but if you were using a more complex model (e.g.,
    polynomial regression with high-degree polynomials), it could increase the risk
    of overfitting.'
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Regularization Techniques**: Regularization techniques like Lasso or Ridge
    regression can be applied to mitigate overfitting by penalizing large coefficients.
    If overfitting is suspected, applying regularization may help improve the model’s
    generalization performance.'
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cross-Validation**: Using cross-validation techniques, such as k-fold cross-validation,
    can provide a more robust estimate of the model’s performance by evaluating it
    on multiple train-test splits of the data. If the model’s performance varies significantly
    across different splits, it could indicate overfitting.'
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In our case, with a high R-squared value and a relatively low MSE on the testing
    data, it’s less likely that the model is overfitting. However, it’s always a good
    practice to explore these indicators and consider additional steps to ensure the
    model’s generalization performance. If you suspect overfitting, you could try
    simplifying the model, applying regularization techniques, or using cross-validation
    to further evaluate its performance.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
- en: '[E**nd of response]**'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
- en: 'We will ask ChatGPT to apply regularization and cross-validation techniques:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
- en: '[P**rompt]**'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
- en: Let’s try applying regularization techniques first and then cross-validation
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
- en: '[E**nd of prompt]**'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
- en: 'ChatGPT should provide us with the code to apply either Lasso or Ridge along
    with cross-validation and also the explanation:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
- en: '[P**rompt response]**'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
- en: Sure! Let’s start by applying regularization techniques to our linear regression
    model. Two common regularization techniques are Lasso regression (L1 regularization)
    and Ridge regression (L2 regularization). These techniques add a penalty term
    to the loss function, which helps prevent overfitting by penalizing large coefficients.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
- en: We’ll begin by trying Ridge regression, which adds the squared sum of the coefficients
    (L2 norm) to the loss function.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s how you can implement Ridge regression with cross-validation:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Explanation:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
- en: '`RidgeCV(alphas=[0.1, 1.0, 10.0], cv=5)`: This initializes a Ridge regression
    model with cross-validation. The `alphas` parameter specifies the regularization
    strength (alpha values) to be tested, and `cv` specifies the number of folds for
    cross-validation.'
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ridge_model.fit(X_train, y_train)`: This trains the Ridge regression model
    using the training data.'
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ridge_model.predict(X_test)`: This makes predictions on the testing data using
    the trained Ridge regression model.'
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ridge_mse = mean_squared_error(y_test, ridge_y_pred)`: This calculates the
    mean squared error (`MSE`) between the actual and predicted values using Ridge
    regression.'
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ridge_model.score(X_test, y_test)`: This calculates the R-squared value (coefficient
    of determination) using Ridge regression.'
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ridge_model.alpha_`: This attribute returns the best alpha (regularization
    strength) selected by cross-validation.'
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let me know if you’d like to proceed with Ridge regression or if you have any
    questions!
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
- en: '[E**nd of response]**'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
- en: Let’s try executing the code and see whether it works and shows any improvement.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot of a computer program  Description automatically generated](img/B21232_13_08.png)'
  id: totrans-270
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13.8: Ridge regression'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
- en: 'The code is compatible with previously provided code and the output is very
    similar to the linear regression code. But note that ChatGPT doesn’t need any
    specific instructions and it could generate a perfectly fine executable code.
    Next, we will provide ChatGPT with the output and see what it suggests:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
- en: '[P**rompt]**'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[E**nd of prompt]**'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
- en: 'In this case, ChatGPT has interpreted the results and also provided the code
    for Lasso regression with cross-validation. The response may vary depending on
    the suggestions provided by ChatGPT in previous interactions:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
- en: '[P**rompt response]**'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
- en: It looks like the Ridge regression model with cross-validation performed quite
    similarly to the standard linear regression model. The **Mean Squared Error**
    (**MSE**) and R-squared values are very close to those obtained from the standard
    linear regression model.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
- en: The best alpha selected by cross-validation for the Ridge regression model is
    0.1, indicating that a small amount of regularization was applied to the model.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
- en: Since the performance of Ridge regression with cross-validation is comparable
    to that of the standard linear regression model, we can conclude that regularization
    did not significantly improve the model’s performance in this case.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, let’s try using Lasso regression (L1 regularization) with cross-validation
    to see if it yields any improvement:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Let me know if you’d like to proceed with Lasso regression or if you have any
    questions!
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
- en: '[E**nd of response]**'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
- en: We will execute the code and see whether it works and produces any different
    results than Ridge regression.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot of a computer program  Description automatically generated](img/B21232_13_09.png)'
  id: totrans-286
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13.9: Lasso regression'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
- en: Lasso regression with cross-validation also produced similar results to both
    the standard linear regression and Ridge regression models. The MSE and R-squared
    values are very close to those obtained previously.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
- en: However, it’s important to note that the dataset used here may not be complex
    enough to benefit significantly from regularization techniques. In cases where
    the dataset is larger or more complex, regularization may play a more crucial
    role in preventing overfitting and improving model generalization.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
- en: Let’s move to the next feature to generate a synthetic dataset for our problem
    to add complexity.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
- en: 'Feature 3: Generating a synthetic dataset to add complexity'
  id: totrans-291
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will use the conversation style with ChatGPT and ask it to provide code
    to generate a synthetic dataset:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
- en: '[P**rompt]**'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
- en: Can you please provide me a code to generate the synthetic dataset for it to
    add complexity?
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
- en: '[E**nd of prompt]**'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
- en: 'You may receive a variant of the following response. However, you may notice
    that this is generic code and is not suitable for generating the code specific
    to our dataset. Hence, we will need to refine the prompt by providing feedback
    to ChatGPT:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
- en: '[P**rompt response]**'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
- en: Sure! We can generate a synthetic dataset with additional complexity using the
    `make_regression` function from the `sklearn.datasets` module. This function generates
    a random regression problem with specified characteristics, such as the number
    of samples, the number of features, and the noise level.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s how you can generate a synthetic dataset with added complexity:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Explanation:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
- en: '`make_regression(n_samples=500, n_features=10, noise=50, random_state=42)`:
    This function generates a synthetic regression dataset with 500 samples, 10 features,
    and increased noise level (specified by the noise parameter). The `random_state`
    parameter ensures reproducibility.'
  id: totrans-302
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pd.DataFrame(X_synthetic, columns=[f''Feature_{i}'' for i in range(1, 11)])`:
    This creates a DataFrame from the synthetic input features (`X_synthetic`) and
    assigns column names `''Feature_1''` to `''Feature_10''`.'
  id: totrans-303
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`synthetic_data[''Target''] = y_synthetic`: This adds the synthetic target
    variable (`y_synthetic`) to the DataFrame with the column name `''Target''`.'
  id: totrans-304
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`synthetic_data.to_csv(''synthetic_dataset.csv'', index=False)`: This saves
    the synthetic dataset to a CSV file named `''synthetic_dataset.csv''` without
    including the `index` column.'
  id: totrans-305
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can adjust the parameters of the `make_regression` function to control the
    complexity of the synthetic dataset, such as the number of samples, the number
    of features, and the noise level.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
- en: Let me know if you need further assistance!
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
- en: '[E**nd of response]**'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
- en: 'We will simply instruct ChatGPT that we need the code for our dataset:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
- en: '[P**rompt]**'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
- en: No, I meant for our problem.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
- en: '[E**nd of prompt]**'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s see what ChatGPT suggests and whether it really works:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
- en: '[P**rompt response]**'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
- en: Got it! We can create a synthetic dataset for our problem by using the same
    input features as the original dataset but with added complexity. We’ll generate
    additional features that are nonlinear combinations of the original features and
    add noise to mimic real-world data.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s how you can generate a synthetic dataset with added complexity for our
    problem:'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-317
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Explanation:'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
- en: We generate synthetic input features (`avg_session_length`, `time_on_app`, `time_on_website`,
    `length_of_membership`) using normal distributions with specified mean and standard
    deviation to mimic the characteristics of the original dataset.
  id: totrans-319
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We generate the synthetic target variable (`yearly_amount_spent`) as a linear
    combination of the input features with added noise.
  id: totrans-320
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, we create a DataFrame from the synthetic dataset and save it to a CSV
    file.
  id: totrans-321
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This synthetic dataset will have similar characteristics to the original dataset
    but with added complexity, which can be useful for testing models and understanding
    their performance in more challenging scenarios.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
- en: Let me know if you need further clarification or assistance!
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
- en: '[E**nd of response]**'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
- en: The code looks impressive and is adapted to our dataset. On executing, it runs
    without any errors and generates a CSV file named `synthetic_ecommerce_data.csv`
    and stores it in the runtime environment of the notebook. It also prints the first
    few rows. You can also download it for future use.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will request ChatGPT to generate the complete code and evaluate model
    performance with the added noise in the synthetic dataset. Let’s move to our next
    feature.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
- en: 'Feature 4: Generating code to develop a model in a single step for a synthetic
    dataset'
  id: totrans-327
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We have learned how to create a regression model step by step in previous features,
    hence we will now request ChatGPT to provide the entire code in a single step
    for the synthetic dataset:'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
- en: '[P**rompt]**'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
- en: Now provide me the end-to-end code in a single step to run using the generated
    synthetic dataset.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
- en: '[E**nd of prompt]**'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
- en: 'We should receive a response similar to the following where complete code is
    provided, including loading the dataset, splitting the dataset, model training,
    and model evaluation:'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
- en: '[P**rompt response]**'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
- en: Certainly! Below is the end-to-end code that loads the synthetic dataset, splits
    it into training and testing sets, trains a linear regression model, evaluates
    its performance, and prints the evaluation metrics.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-335
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This code will load the synthetic dataset from the CSV file, split it into training
    and testing sets, train a linear regression model using the training data, make
    predictions on the testing data, evaluate the model’s performance using Mean Squared
    Error (MSE) and R-squared (Coefficient of Determination), and print the evaluation
    metrics.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
- en: You can simply run this code in your Python environment, assuming you have the
    pandas library installed to work with DataFrames and the scikit-learn library
    installed for machine learning functionalities.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
- en: Let me know if you have any questions or if there’s anything else I can assist
    you with!
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
- en: '[E**nd of response]**'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
- en: We execute the code and it runs seamlessly.
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
- en: 'The evaluation metrics for the linear regression model trained on the synthetic
    dataset are as follows:'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
- en: '**MSE**: Approximately 2103.19'
  id: totrans-342
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**R-squared (coefficient of determination)**: Approximately 0.9197'
  id: totrans-343
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'These metrics provide insight into the model’s performance:'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
- en: '**MSE**: The MSE measures the average squared difference between the actual
    and predicted values. In this case, the MSE indicates that, on average, the squared
    difference between the actual and predicted yearly amount spent is approximately
    2103.19\. Lower MSE values are desirable, indicating better model performance.'
  id: totrans-345
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**R-squared (coefficient of determination)**: The R-squared value represents
    the proportion of the variance in the target variable (`Yearly Amount Spent`)
    that is explained by the model. In this case, the R-squared value of approximately
    0.9197 suggests that approximately 91.97% of the variance in the yearly amount
    spent can be explained by the linear regression model. A higher R-squared value
    closer to 1 indicates a better fit.'
  id: totrans-346
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Overall, these evaluation metrics suggest that the linear regression model performs
    reasonably well on the synthetic dataset.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
- en: 'In the context of the online e-commerce store, the insights from these models
    can be used for various purposes:'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
- en: '**Customer segmentation**: The models can help identify high-value customers
    based on their predicted `Yearly Amount Spent`, allowing for targeted marketing
    efforts.'
  id: totrans-349
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Recommendation systems**: Understanding the factors that influence spending
    can be used to improve product recommendations and enhance the customer shopping
    experience.'
  id: totrans-350
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Retention strategies**: `Length of Membership` appears to be an important
    factor. Strategies to increase customer retention and loyalty can be developed
    based on this insight.'
  id: totrans-351
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Optimizing website and app**: Insights into the impact of `Average Session
    Length`, `Time on App`, and `Time on Website` can guide decisions on website and
    app optimization.'
  id: totrans-352
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This concludes our learning with ChatGPT 3.5\. Now, let’s see how prompting
    and learning differ with ChatGPT Plus.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
- en: Learning simple linear regression using ChatGPT Plus
  id: totrans-354
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have learned about simple linear regression while using ChatGPT,
    let’s learn about linear regression while using ChatGPT Plus. ChatGPT Plus, or
    GPT-4, includes the ability to upload datasets, analyze the dataset, and produce
    results if using simple libraries such as Python and Matplotlib. At the time of
    writing this chapter, it had a GPT assistant named **Data Analysis**, provided
    by OpenAI when using the mobile app. You could also select GPT-4 if using the
    browser version.
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
- en: Note that you can also achieve the same using the free version but would need
    to execute the code yourself and modify the prompt.
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
- en: 'Feature 1: Building a simple linear regression model step by step'
  id: totrans-357
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have learned how to create a regression model step by step using the free
    version of ChatGPT where we had to provide the dataset description, instructions
    on from where to load, and code compatible with Jupyter Notebook. In the case
    of ChatGPT Plus, all of that is taken care of by ChatGPT Plus and it also provides
    a runtime environment to execute the code.
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that it cannot run TensorFlow, Keras, or deep learning libraries:'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
- en: '[P**rompt]**'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
- en: I want to create a simple linear regression model to predict the “Yearly Amount
    Spent” (TAG 1.1) by customers for the attached e-commerce customers dataset (PIC
    2.3)
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
- en: 'I am a beginner user (PIC 2.1), so please provide step-by-step code and strictly
    follow the following instructions (PIC 2.2):'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
- en: Ensure that there are detailed comments for each line of code.
  id: totrans-363
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You have to explain each line of code and provide one step at a time and wait
    for users feedback
  id: totrans-364
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[E**nd of prompt]**'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
- en: 'We should receive a response similar to the following where the complete code
    is provided, including loading the dataset, splitting the dataset, model training,
    and model evaluation:'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
- en: '[P**rompt response]**'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
- en: Great! Let’s start building a simple linear regression model using Python. We’ll
    be using libraries such as `pandas` for handling the data and `sklearn` for creating
    the regression model.
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 1: Import Libraries and Load Data'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
- en: First, we’ll import necessary libraries and load your dataset. We’ll also take
    a look at the first few rows of the dataset to understand its structure.
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the code for this step:'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-372
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'This block of code does the following:'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
- en: '**Imports libraries**: We load `pandas` for data handling, and several modules
    from `sklearn` for splitting the data and performing linear regression.'
  id: totrans-374
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Loads the data**: The `pd.read_csv` function reads the CSV file into a DataFrame,
    which is a 2-dimensional labeled data structure with columns of potentially different
    types.'
  id: totrans-375
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Prints the first few rows**: This helps us see the initial rows of our dataset
    to understand the available data and its format.'
  id: totrans-376
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s execute this step and check the output to ensure everything is loaded
    correctly and to understand what your data looks like. Shall we proceed?
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
- en: '[E**nd of response]**'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
- en: 'We will instruct ChatGPT to proceed:'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
- en: '[P**rompt]**'
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
- en: Yes, please.
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
- en: '[E**nd of prompt]**'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
- en: We should receive a response similar to the following, where ChatGPT has executed
    the code and printed the first few rows.
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that the file is loaded in ChatGPT’s run time environment; if you need
    to execute code in your local environment or Jupyter Colab, you would be required
    to modify the step to read CSV:'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
- en: '[P**rompt response]**'
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the snapshot of the first few rows of your dataset:'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
- en: '| Email | Address | Avatar | Avg. Session Length | Time on App | Time on Website
    | Length of Membership | Yearly Amount Spent |'
  id: totrans-387
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- | --- | --- | --- | --- |'
  id: totrans-388
  prefs: []
  type: TYPE_TB
- en: '| mstephenson@fernandez.com | 835 Frank Tunnel Wrightmouth, MI 82180-9605 |
    Violet | 34.497268 | 12.655651 | 39.577668 | 4.082621 | 587.951054 |'
  id: totrans-389
  prefs: []
  type: TYPE_TB
- en: '| hduke@hotmail.com | 4547 Archer Common Diazchester, CA 06566-8576 | DarkGreen
    | 31.926272 | 11.109461 | 37.268959 | 2.664034 | 392.204933 |'
  id: totrans-390
  prefs: []
  type: TYPE_TB
- en: '| pallen@yahoo.com | 24645 Valerie Unions Suite 582 Cobbborough, ... | Bisque
    | 33.000915 | 11.330278 | 37.110597 | 4.104543 | 487.547505 |'
  id: totrans-391
  prefs: []
  type: TYPE_TB
- en: '| riverarebecca@gmail.com | 1414 David Throughway Port Jason, OH 22070-1220
    | SaddleBrown | 34.305557 | 13.717514 | 36.721283 | 3.120179 | 581.852344 |'
  id: totrans-392
  prefs: []
  type: TYPE_TB
- en: '| mstephens@davidson-herman.com | 14023 Rodriguez Passage Port Jacobville,
    PR 3... | MediumAquaMarine | 33.330673 | 12.795189 | 37.536653 | 4.446308 | 599.406092
    |'
  id: totrans-393
  prefs: []
  type: TYPE_TB
- en: The dataset includes both customer contact information (like `Email` and `Address`)
    and numerical data related to their interaction with the e-commerce platform (like
    “Avg. Session Length”, “Time on App”, “Time on Website”, and “Length of Membership”).
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 2: Data Preparation'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
- en: 'The next step will involve preparing the data for our linear regression model.
    This includes:'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
- en: Selecting the relevant numerical columns for the prediction.
  id: totrans-397
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Splitting the data into a training set and a testing set.
  id: totrans-398
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Do you have any specific columns you want to use for predicting “Yearly Amount
    Spent”, or should I proceed with a general approach using all numerical columns?
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
- en: '[E**nd of response]**'
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
- en: 'We will instruct ChatGPT to proceed using numerical columns:'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
- en: '[P**rompt]**'
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
- en: Please use only numerical columns.
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
- en: '[E**nd of prompt]**'
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
- en: 'We should receive a response similar to the following, where ChatGPT has provided
    code for selecting the features, splitting the dataset, and printing the shape:'
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
- en: '[P**rompt response]**'
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 2: Data Preparation'
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll now proceed with the following steps in preparing the data:'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
- en: '**Selecting the relevant columns**: We’ll include the columns that are numerical
    and directly relate to customer behavior.'
  id: totrans-409
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Splitting the data into training and testing sets**: This helps us evaluate
    our model on unseen data to ensure it performs well generally.'
  id: totrans-410
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here’s the code to perform these steps:'
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-412
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'This block of code:'
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
- en: '**Selects features and target**: We separate the columns for the features and
    the target variable which is what we aim to predict.'
  id: totrans-414
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Splits the data**: Using `train_test_split`, we divide the data into training
    and testing sets. The `test_size=0.2` means 20% of the data is reserved for testing.
    `random_state` is set for reproducibility of results.'
  id: totrans-415
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Prints shapes**: We print the shapes of our training and testing sets to
    confirm the split was successful.'
  id: totrans-416
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Should we run this part of the code to prepare the data and check the split?
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
- en: '[E**nd of response]**'
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
- en: 'We will instruct ChatGPT to proceed with code execution:'
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
- en: '[P**rompt]**'
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
- en: Yes, please.
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
- en: '[E**nd of prompt]**'
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
- en: 'We should receive a response similar to the following, where ChatGPT has executed
    the code and printed the shape of features and labels:'
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
- en: '[P**rompt response]**'
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
- en: 'The data has been successfully split into training and testing sets. Here’s
    the breakdown:'
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
- en: '**Training features shape**: 400 rows and 4 columns'
  id: totrans-426
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Testing features shape**: 100 rows and 4 columns'
  id: totrans-427
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Training labels shape**: 400 values'
  id: totrans-428
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Testing labels shape**: 100 values'
  id: totrans-429
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This indicates that 80% of the data is used for training the model, and 20%
    is reserved for testing the model’s performance.
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 3: Building the Linear Regression Model'
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we’ll create and train the linear regression model using the training
    data. Here’s the plan:'
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
- en: '**Initialize the linear regression model**: This involves setting up our model
    ready to be fitted to the data.'
  id: totrans-433
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fit the model to the training data**: This is where the model learns the
    relationship between the features and the target from the training data.'
  id: totrans-434
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Evaluate the model on the training data**: This step is to get a quick check
    on how well our model has learned from the training data.'
  id: totrans-435
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Shall I proceed with this next step and show you the code to build and evaluate
    the model on the training data?
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
- en: '[E**nd of response]**'
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
- en: 'We will instruct ChatGPT to proceed to the next steps:'
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
- en: '[P**rompt]**'
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
- en: Yes, Please.
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
- en: '[E**nd of prompt]**'
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
- en: 'We should receive a response similar to the following, where ChatGPT has provided
    the code:'
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
- en: '[P**rompt response]**'
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
- en: Let’s move on to building and training the linear regression model.
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 3: Building the Linear Regression Model'
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the code to create, train, and initially evaluate the linear regression
    model:'
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-447
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'This code does the following:'
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
- en: '**Initializes the model**: `LinearRegression()` is called to create a linear
    regression model.'
  id: totrans-449
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fits the model**: `model.fit(X_train, y_train)` adjusts weights on the regression
    line to fit the input features and the target output.'
  id: totrans-450
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Makes predictions**: `model.predict(X_train)` is used to see how well the
    model has learned to predict the training data.'
  id: totrans-451
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Calculates errors**: `mean_absolute_error` and `mean_squared_error` provide
    metrics to gauge the model’s accuracy and performance by comparing the predicted
    values against the actual values.'
  id: totrans-452
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Would you like me to run this code now to see how the model performs on the
    training data?
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
- en: '[E**nd of response]**'
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
- en: 'We will instruct ChatGPT to proceed:'
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
- en: '[P**rompt]**'
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
- en: Yes, Please.
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
- en: '[E**nd of prompt]**'
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
- en: 'We should receive a response similar to the following, where ChatGPT has executed
    the code and printed the results:'
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
- en: '[P**rompt response]**'
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
- en: 'The linear regression model has been successfully trained on the dataset, and
    here are the performance metrics on the training data:'
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
- en: '**Mean Absolute Error (MAE) on training data**: 7.727'
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
- en: '**Mean Squared Error (MSE) on training data**: 95.823'
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
- en: 'These metrics help us understand the average errors made by the model in predictions:'
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
- en: '**MAE** tells us that, on average, the model’s predictions are approximately
    7.73 units away from the actual values.'
  id: totrans-465
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**MSE** indicates a slightly larger error in the predictions, considering it
    squares the errors, emphasizing larger discrepancies.'
  id: totrans-466
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Next Steps:'
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
- en: Now, the model is trained and preliminarily evaluated on the training set. We
    should now test its performance on the unseen testing set to truly evaluate its
    effectiveness.
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
- en: Would you like to proceed with testing the model on the testing set and seeing
    how it performs with new data?
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
- en: '[E**nd of response]**'
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
- en: 'We will instruct ChatGPT to proceed with testing the model performance on the
    test set:'
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
- en: '[P**rompt]**'
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
- en: Yes, please.
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
- en: '[E**nd of prompt]**'
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
- en: 'We should receive a response similar to the following, where ChatGPT has executed
    the code and printed the results:'
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
- en: '[P**rompt response]**'
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
- en: 'The evaluation of the model on the testing set yielded the following results:'
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
- en: '**Mean Absolute Error (MAE) on testing data**: 8.558'
  id: totrans-478
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mean Squared Error (MSE) on testing data**: 109.864'
  id: totrans-479
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'These results tell us the following:'
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
- en: The **MAE** of 8.558 suggests that the model’s predictions on the testing data
    are, on average, about 8.56 units away from the actual values. This is slightly
    worse than the training MAE, which is to be expected as the model is now predicting
    data it hasn’t seen before.
  id: totrans-481
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **MSE** of 109.864 is also higher than the training MSE, indicating that
    some predictions have larger errors.
  id: totrans-482
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Summary:'
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
- en: The model performs reasonably well but shows a typical behavior of slightly
    reduced performance on the testing data compared to the training data. This is
    normal and indicates that the model is generalizing as expected without significant
    overfitting or underfitting.
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
- en: 'Final Steps:'
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
- en: 'You now have a functioning linear regression model that can predict the “Yearly
    Amount Spent” based on customer behavior metrics. Depending on your goals, you
    might want to explore further:'
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
- en: '**Improving the model**: You could look into more sophisticated modelling techniques
    or feature engineering.'
  id: totrans-487
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Model interpretation**: Analyse the coefficients of the model to understand
    the impact of each feature.'
  id: totrans-488
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Would you like to explore any of these additional steps or need further assistance
    with something else?
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
- en: '[E**nd of response]**'
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
- en: We have seen that similar to the free version, ChatGPT Plus does a pretty good
    job in creating a simple linear regression model step by step, by providing the
    code as well as executing it for us. Next, we will see whether the Plus version
    can apply the regularization techniques.
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
- en: 'Feature 2: Applying regularization techniques'
  id: totrans-492
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will ask ChatGPT Plus to apply regularization techniques:'
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
- en: '[P**rompt]**'
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
- en: Can you please apply Lasso, Ridge, and cross-validation to check whether it
    leads to any improvement?
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
- en: '[E**nd of prompt]**'
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
- en: 'We should receive a response similar to the following, where ChatGPT has provided
    the code for Lasso and Ridge, along with cross-validation:'
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
- en: '[P**rompt response]**'
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 5: Applying Lasso and Ridge Regression with Cross-Validation'
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
- en: 'Lasso Regression:'
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
- en: Lasso regression not only helps in reducing overfitting but can also be used
    for feature selection since it can shrink the coefficients of less important features
    to zero.
  id: totrans-501
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Ridge Regression:'
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
- en: Ridge regression reduces the model complexity by imposing a penalty on the size
    of coefficients.
  id: totrans-503
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We’ll use the scikit-learn library, which provides convenient functions to perform
    these analyses.
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the code to apply Lasso and Ridge with cross-validation:'
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-506
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'This code performs the following:'
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
- en: '**LassoCV and RidgeCV**: These are Lasso and Ridge regression methods with
    built-in cross-validation of the alpha parameter.'
  id: totrans-508
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cross-validation scores**: The `.score()` method returns the R² score that
    indicates the proportion of variance in the dependent variable that is predictable
    from the independent variables.'
  id: totrans-509
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mean Absolute Error**: This provides an absolute measure of fit quality on
    the testing set.'
  id: totrans-510
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s run this code to see if the regularization and cross-validation can enhance
    the model’s performance. Shall we proceed?
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
- en: '[E**nd of response]**'
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
- en: 'We will instruct ChatGPT to execute the code:'
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
- en: '[P**rompt]**'
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
- en: Yes, please.
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
- en: '[E**nd of prompt]**'
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
- en: '**[Prompt response]**'
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
- en: In our scenario, ChatGPT encountered an internal error and was unable to execute
    the code. Such errors can occur due to various reasons, including unavailability
    of services at the time of execution, memory issues, or the absence of required
    libraries or dependencies in its runtime environment. It’s important to note that
    you might receive a different response that executes the code flawlessly, as errors
    like these are sporadic. However, we’ve included this scenario to troubleshoot
    and illustrate how to proceed in such cases. Here, we have applied the prompting
    strategy to get feedback from the AI assistant (LIFE 3.3).
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
- en: '[E**nd of response]**'
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
- en: 'We will now take the suggestion from ChatGPT and execute the code locally using
    Jupyter Colab, and since we are loading the dataset from Google Drive, we will
    provide the instructions in the prompt:'
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
- en: '[P**rompt]**'
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
- en: Ok, give me complete code to run locally and note that the file needs to be
    mounted from Google Drive from path `'/content/drive/My Drive/Chapter05/Ecommerce
    Customers.csv'` in the Jupyter notebook.
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
- en: '[E**nd of prompt]**'
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
- en: 'We should receive a response similar to the following, where ChatGPT has provided
    the complete code:'
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
- en: '[P**rompt response]**'
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
- en: Certainly! Below is the complete code that you can run locally in a Jupyter
    Notebook. This script includes steps for importing the dataset directly from Google
    Drive, preprocessing the data, fitting both Lasso and Ridge regression models
    with cross-validation, and then evaluating them.
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-527
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Instructions for Running the Code:'
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
- en: '**Google Colab Specifics**: The `drive.mount()` function is specific to Google
    Colab and allows you to access files on your Google Drive. If you are not using
    Google Colab, you will need to adjust the file loading method according to your
    development environment.'
  id: totrans-529
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Dependencies**: Ensure you have all required libraries installed. You can
    install them using `pip` (e.g., `pip install pandas scikit-learn google-colab`).'
  id: totrans-530
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Data Path**: Adjust the `file_path` if your file is located in a different
    directory on your Google Drive.'
  id: totrans-531
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Run this code in your Jupyter Notebook environment to see how the models perform
    with your data. If you encounter any errors or need further assistance, feel free
    to reach out!
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
- en: '[E**nd of response]**'
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
- en: We execute the code and it runs perfectly fine without any modifications or
    errors. Here, we learned that we can use the hybrid approach of running code within
    ChatGPT Plus or request it to provide the code to execute locally in case of any
    issues.
  id: totrans-534
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will move on to Feature 3 of generating a synthetic dataset using ChatGPT
    Plus.
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
- en: 'Feature 3: Generating a synthetic dataset to add complexity'
  id: totrans-536
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now, let’s try, if we are able, to generate a synthetic dataset using ChatGPT
    Plus for our dataset. For this purpose, we will use the Data Analyst GPT and start
    a fresh conversation.
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that specific GPTs can be invoked by providing `@<GPT Name>` in the message
    prompt:'
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
- en: '![A white background with black text  Description automatically generated](img/B21232_13_10.png)Figure
    13.10: Invoking the Data Analyst GPT'
  id: totrans-539
  prefs: []
  type: TYPE_NORMAL
- en: '[P**rompt]**'
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
- en: '@Data Analyst – Provide me the code to generate the synthetic dataset for the
    above dataset from the perspective of predicting `Yearly Amount Spent`, along
    with the code to generate it. <Attach the dataset file here>'
  id: totrans-541
  prefs: []
  type: TYPE_NORMAL
- en: '[E**nd of prompt]**'
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
- en: 'We should receive a response similar to the following, where ChatGPT has provided
    the code and printed the first few rows:'
  id: totrans-543
  prefs: []
  type: TYPE_NORMAL
- en: '[P**rompt response]**'
  id: totrans-544
  prefs: []
  type: TYPE_NORMAL
- en: To help you generate a synthetic dataset for predicting yearly amount spent,
    I’ll first need to take a look at the structure and content of your provided dataset.
    Let’s start by loading and examining the data from your file. I’ll display the
    first few rows and summary statistics to understand what kind of features we’re
    dealing with. Then, I’ll assist you in creating a synthetic dataset based on this
    structure. Let’s get started with loading the data.
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
- en: 'The dataset consists of 500 entries with the following features:'
  id: totrans-546
  prefs: []
  type: TYPE_NORMAL
- en: '**Email**: The customer’s email address (string).'
  id: totrans-547
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Address**: The customer’s address (string).'
  id: totrans-548
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Avatar**: The avatar color (string).'
  id: totrans-549
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Avg. Session Length**: Average session length in minutes (numeric).'
  id: totrans-550
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Time on App**: Time spent on the app in minutes (numeric).'
  id: totrans-551
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Time on Website**: Time spent on the website in minutes (numeric).'
  id: totrans-552
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Length of Membership**: Length of membership in years (numeric).'
  id: totrans-553
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Yearly Amount Spent**: Yearly amount spent in dollars (numeric).'
  id: totrans-554
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To create a synthetic dataset for the purpose of modeling and predicting “Yearly
    Amount Spent”, we can use a technique called **bootstrapping**, which involves
    sampling with replacement from the existing dataset to create a new synthetic
    dataset that has a similar distribution. However, to add some variability and
    simulate a realistic dataset, we can also introduce random noise into the numeric
    fields.
  id: totrans-555
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s a Python code snippet to generate a synthetic dataset using bootstrapping
    and adding noise to the numeric columns:'
  id: totrans-556
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-557
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'This code will:'
  id: totrans-558
  prefs: []
  type: TYPE_NORMAL
- en: Sample 500 entries from the original dataset, allowing replacements (bootstrapping).
  id: totrans-559
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add Gaussian noise to each numeric column based on 5% of the standard deviation
    of that column.
  id: totrans-560
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Optionally, the new synthetic dataset can be saved to a CSV file.
  id: totrans-561
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Would you like to proceed with generating this synthetic dataset? Or do you
    have any modifications or specific requirements to include in the synthesis process?
  id: totrans-562
  prefs: []
  type: TYPE_NORMAL
- en: '[E**nd of response]**'
  id: totrans-563
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will instruct ChatGPT to generate the code and provide us with the
    file to download the dataset:'
  id: totrans-564
  prefs: []
  type: TYPE_NORMAL
- en: '[P**rompt]**'
  id: totrans-565
  prefs: []
  type: TYPE_NORMAL
- en: Please generate the dataset and make it available to download.
  id: totrans-566
  prefs: []
  type: TYPE_NORMAL
- en: '[E**nd of prompt]**'
  id: totrans-567
  prefs: []
  type: TYPE_NORMAL
- en: 'We should receive a response similar to the following, where ChatGPT has executed
    the code and provided the link to download the synthetic dataset:'
  id: totrans-568
  prefs: []
  type: TYPE_NORMAL
- en: '[P**rompt response]**'
  id: totrans-569
  prefs: []
  type: TYPE_NORMAL
- en: 'The synthetic dataset has been generated and saved. You can download it using
    the link below:'
  id: totrans-570
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-571
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[E**nd of response]**'
  id: totrans-572
  prefs: []
  type: TYPE_NORMAL
- en: Here, we learned that ChatGPT Plus can provide the code, execute the code, and
    also generate CSV files available to download.
  id: totrans-573
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will request ChatGPT Plus to generate the complete code and evaluate
    model performance with the added noise in the synthetic dataset. Let’s move to
    our next feature.
  id: totrans-574
  prefs: []
  type: TYPE_NORMAL
- en: 'Feature 4: Generating code to develop a model in a single step for a synthetic
    dataset'
  id: totrans-575
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[P**rompt]**'
  id: totrans-576
  prefs: []
  type: TYPE_NORMAL
- en: Can you please generate the complete code to perform linear regression, apply
    Lasso and Ridge regularization techniques on our synthetic dataset, and evaluate
    the model performance?
  id: totrans-577
  prefs: []
  type: TYPE_NORMAL
- en: '[E**nd of prompt]**'
  id: totrans-578
  prefs: []
  type: TYPE_NORMAL
- en: 'We should receive a response similar to the following, where ChatGPT has provided
    the complete code:'
  id: totrans-579
  prefs: []
  type: TYPE_NORMAL
- en: '[P**rompt response]**'
  id: totrans-580
  prefs: []
  type: TYPE_NORMAL
- en: Sure, I can provide you with a Python script that performs linear regression,
    as well as Lasso and Ridge regression, on the synthetic dataset we just created.
    We will also evaluate the model performance using metrics like the R-squared score,
    mean squared error (MSE), and mean absolute error (MAE).
  id: totrans-581
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a complete Python code snippet for the whole process:'
  id: totrans-582
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-583
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Make sure to replace `'/path/to/your/Synthetic_Ecommerce_Customers.csv'` with
    the actual path where your synthetic dataset is stored when running the script
    in your local environment.
  id: totrans-584
  prefs: []
  type: TYPE_NORMAL
- en: 'This script will:'
  id: totrans-585
  prefs: []
  type: TYPE_NORMAL
- en: Load your synthetic dataset.
  id: totrans-586
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Select appropriate features and split the data into training and test sets.
  id: totrans-587
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Initialize and train Linear, Lasso, and Ridge regression models.
  id: totrans-588
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Evaluate and print out the performance metrics for each model.
  id: totrans-589
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This should help you understand the performance differences and impacts of regularization
    in your predictive models!
  id: totrans-590
  prefs: []
  type: TYPE_NORMAL
- en: '[E**nd of response]**'
  id: totrans-591
  prefs: []
  type: TYPE_NORMAL
- en: 'We will instruct ChatGPT Plus to execute the code for us:'
  id: totrans-592
  prefs: []
  type: TYPE_NORMAL
- en: '[P**rompt]**'
  id: totrans-593
  prefs: []
  type: TYPE_NORMAL
- en: Please execute the code.
  id: totrans-594
  prefs: []
  type: TYPE_NORMAL
- en: '[E**nd of prompt]**'
  id: totrans-595
  prefs: []
  type: TYPE_NORMAL
- en: 'ChatGPT Plus should have executed the code and we should receive a response
    similar to the following:'
  id: totrans-596
  prefs: []
  type: TYPE_NORMAL
- en: '[P**rompt response]**'
  id: totrans-597
  prefs: []
  type: TYPE_NORMAL
- en: 'The models have been trained and evaluated. Here are the performance metrics
    for each:'
  id: totrans-598
  prefs: []
  type: TYPE_NORMAL
- en: 'Linear Regression:'
  id: totrans-599
  prefs: []
  type: TYPE_NORMAL
- en: '**Mean Squared Error (MSE)**: 133.01'
  id: totrans-600
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mean Absolute Error (MAE)**: 8.79'
  id: totrans-601
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**R-squared (R2)**: 0.977'
  id: totrans-602
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Lasso Regression:'
  id: totrans-603
  prefs: []
  type: TYPE_NORMAL
- en: '**Mean Squared Error (MSE)**: 133.04'
  id: totrans-604
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mean Absolute Error (MAE)**: 8.79'
  id: totrans-605
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**R-squared (R2)**: 0.977'
  id: totrans-606
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Ridge Regression:'
  id: totrans-607
  prefs: []
  type: TYPE_NORMAL
- en: '**Mean Squared Error (MSE)**: 133.08'
  id: totrans-608
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mean Absolute Error (MAE)**: 8.79'
  id: totrans-609
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**R-squared (R2)**: 0.977'
  id: totrans-610
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All three models show very similar performance metrics, with high R2 scores
    close to 0.977, indicating that each model explains about 97.7% of the variance
    in the Yearly Amount Spent. The slight differences in MSE and MAE across models
    are minimal, suggesting that regularization (both Lasso and Ridge) does not significantly
    alter the performance in this particular case, possibly due to the absence of
    multicollinearity or other issues that these techniques help address.
  id: totrans-611
  prefs: []
  type: TYPE_NORMAL
- en: '[E**nd of response]**'
  id: totrans-612
  prefs: []
  type: TYPE_NORMAL
- en: By working through this exercise, you’ve not only learned how to perform a regression
    analysis using the free version of ChatGPT and ChatGPT Plus but also how to create
    a linear regression model step by step using your own dataset, apply regularization
    techniques, and generate synthetic datasets.
  id: totrans-613
  prefs: []
  type: TYPE_NORMAL
- en: Assignment
  id: totrans-614
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Generate a single-step code for our dataset and execute it in Google Colab for
    the random forest algorithm.
  id: totrans-615
  prefs: []
  type: TYPE_NORMAL
- en: Challenge
  id: totrans-616
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Can you enhance the following prompt by incorporating prompting strategies to
    ensure the retrieval of a specific dataset, rather than a random one that may
    not exist or may have an incorrect path, ensuring it’s fit for the intended use?
  id: totrans-617
  prefs: []
  type: TYPE_NORMAL
- en: 'Provide the output from the current prompt as well as the improved prompt:'
  id: totrans-618
  prefs: []
  type: TYPE_NORMAL
- en: '[P**rompt]**'
  id: totrans-619
  prefs: []
  type: TYPE_NORMAL
- en: Can you please provide me with the complete end-to-end Python code for a publicly
    available advertising dataset along with a detailed explanation that it is compatible
    with the Jupyter Notebook?
  id: totrans-620
  prefs: []
  type: TYPE_NORMAL
- en: '[E**nd of prompt]**'
  id: totrans-621
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-622
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We explored the application of TAG, PIC, and LIFE prompting strategies in crafting
    regression models, employing both ChatGPT and ChatGPT Plus for rapid analysis
    and predictive tasks. This approach is particularly valuable in the early stages
    of machine learning development, offering immediate insights and the flexibility
    to experiment with different models or algorithms without the burden of managing
    execution environments or programming instances. Additionally, we learned how
    to effectively utilize single prompts for generating comprehensive code. While
    it’s possible to craft prompts for discrete tasks or steps, many of these require
    only succinct lines of code and were not the focus here. Providing feedback is
    instrumental in this process, and validating the output is crucial to ensure the
    code’s functionality.
  id: totrans-623
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn how to use ChatGPT to generate the code for
    the **multilayer perceptron** (**MLP**) model with the help of the Fashion-MNIST
    dataset.
  id: totrans-624
  prefs: []
  type: TYPE_NORMAL
- en: Join our community on Discord
  id: totrans-625
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Join our community’s Discord space for discussions with the author and other
    readers:'
  id: totrans-626
  prefs: []
  type: TYPE_NORMAL
- en: '[https://packt.link/aicode](https://packt.link/aicode)'
  id: totrans-627
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/QR_Code510410532445718281.png)'
  id: totrans-628
  prefs: []
  type: TYPE_IMG
