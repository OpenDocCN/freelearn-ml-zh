- en: '3'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '3'
- en: Training Machine Learning Models in AMLS
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 AMLS 中训练机器学习模型
- en: 'Training **Machine Learning** (**ML**) models in **Azure Machine Learning**
    (**AML**) is key to enabling your data science workload. Typically, during the
    model creation process, data is split into test and training datasets. Models
    are then built with the training data and evaluated using the test dataset. During
    this process, many algorithms are selected and used to answer the question: what
    model will provide the best results on an unseen dataset? AML has the capability
    to log metrics, taking snapshots of the code that produced a given model performance
    to enable answering this question. AML comes with a variety of accelerating capacities.
    During this chapter, we will focus on the creation of experiments to train models
    and on the basic functionality of AML experiments to unlock using compute instances,
    compute clusters, and registered datasets.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Azure Machine Learning (AML) 中训练**机器学习 (ML**) 模型是启用您的数据科学工作负载的关键。通常，在模型创建过程中，数据会被分成测试集和训练集。然后使用训练数据构建模型，并使用测试集进行评估。在这个过程中，选择了多种算法并使用它们来回答问题：哪个模型将在未见过的数据集上提供最佳结果？AML
    具有记录指标的能力，对产生给定模型性能的代码进行快照，以回答这个问题。AML 提供了各种加速能力。在本章中，我们将重点关注创建用于训练模型的实验，以及 AML
    实验的基本功能，以解锁使用计算实例、计算集群和已注册数据集。
- en: Model training can be established through the AML Python SDK or the designer
    for a low-code experience. During the model training process, different compute
    resources can be used to accomplish this task. In this chapter, we will explore
    using compute instances for basic model training and compute clusters for a repeatable
    training environment, as well as through the designer for a low-code experience.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 模型训练可以通过 AML Python SDK 或设计器来实现低代码体验。在模型训练过程中，可以使用不同的计算资源来完成这项任务。在本章中，我们将探讨使用计算实例进行基本模型训练、使用计算集群进行可重复训练环境，以及通过设计器实现低代码体验。
- en: In this chapter, we will learn how to use datasets to build ML models with AML
    compute and datasets.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何使用数据集通过 AML 计算和数据集构建 ML 模型。
- en: 'We will cover the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将涵盖以下主题：
- en: Training code-free models with the Designer
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用设计器训练无代码模型
- en: Training on a compute instance
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在计算实例上训练
- en: Training on a compute cluster
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在计算集群上训练
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: Refer to [*Chapter 1*](B18003_01.xhtml#_idTextAnchor020), *Introducing the Azure
    Machine Learning Service*, to create the environment workspace to use.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅[*第 1 章*](B18003_01.xhtml#_idTextAnchor020)，*介绍 Azure Machine Learning 服务*，以创建用于使用的环境工作区。
- en: 'The following are the prerequisites for this chapter:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的先决条件如下：
- en: Have access to the internet.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有互联网访问权限。
- en: Have a web browser, preferably Google Chrome or Microsoft Edge Chromium.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 拥有一个网络浏览器，最好是 Google Chrome 或 Microsoft Edge Chromium。
- en: 'To access the Azure Machine Learning Service workspace, please go to this address:
    [https://ml.azure.com](https://ml.azure.com). Select the workspace from the drop-down
    list.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要访问 Azure Machine Learning 服务工作区，请访问此地址：[https://ml.azure.com](https://ml.azure.com)。从下拉列表中选择工作区。
- en: Training code-free models with the designer
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用设计器训练无代码模型
- en: In this section, let’s see what options are available for code-free modeling
    using the **designer**. The Designer enables data scientists to create models
    without the need to write code. It makes it easy for any data scientist to build
    and compare models. Within the designer, the development environment is a graphical
    user interface that allows right-clicking to change the settings for a given step.
    The interface allows not only the development of the model but also one-click
    deployment to deploy to various styles of APIs, including real-time or batch endpoints,
    which are REST APIs that can be consumed by other business applications or downstream
    applications.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，让我们看看使用**设计器**进行无代码建模可用的选项。设计器使数据科学家能够在不编写代码的情况下创建模型。它使任何数据科学家都能够轻松构建和比较模型。在设计器中，开发环境是一个图形用户界面，允许右键单击以更改给定步骤的设置。该界面不仅允许开发模型，还可以一键部署到各种风格的
    API，包括实时或批量端点，这些是其他业务应用或下游应用可以消费的 REST API。
- en: For example, drag a task to connect to a data source and configure the properties
    to connect to the data source. These properties include the dataset name and connection
    string parameters, including the username and password.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，拖动一个任务以连接到数据源，并配置属性以连接到数据源。这些属性包括数据集名称和连接字符串参数，包括用户名和密码。
- en: Creating a dataset using the user interface
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用用户界面创建数据集
- en: 'Let’s go through the steps to create a dataset using the user interface:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们一步步通过使用用户界面创建数据集的步骤：
- en: Go to [https://ml.azure.com](https://ml.azure.com).
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往 [https://ml.azure.com](https://ml.azure.com)。
- en: Select your workspace name.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择你的工作区名称。
- en: 'On the left side of the workspace, select **Designer**, as seen in the following
    screenshot:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在工作区的左侧，选择 **Designer**，如下截图所示：
- en: '![Figure 3.1 – Designer icon ](img/B18003_03_001.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![图3.1 – 设计师图标](img/B18003_03_001.jpg)'
- en: Figure 3.1 – Designer icon
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.1 – 设计师图标
- en: Once you are on the **Designer** screen, you’ll see that the screen is divided
    into two parts. The top part shows some examples or samples available for anyone
    to test. All samples use open source datasets, so anyone can test, develop, and
    learn from them. The bottom parts show the experiments you created, and if you
    click on an experiment, the graph will be shown in the canvas to the right.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦你进入 **Designer** 屏幕，你会看到屏幕分为两部分。顶部部分显示了一些可供任何人测试的示例或样本。所有样本都使用开源数据集，因此任何人都可以测试、开发和从中学习。底部部分显示你创建的实验，如果你点击一个实验，图表将显示在右侧的画布上。
- en: 'The designer experience is shown in the following screenshot:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 设计师体验如下截图所示：
- en: '![Figure 3.2 – Designer experience ](img/B18003_03_002.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![图3.2 – 设计师体验](img/B18003_03_002.jpg)'
- en: Figure 3.2 – Designer experience
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.2 – 设计师体验
- en: Before creating an experiment, make sure a compute cluster is created, as shown
    in [*Chapter 1*](B18003_01.xhtml#_idTextAnchor020), *Introducing the Azure Machine
    Learning Service*, or you can also find it in this chapter where we show how to
    create a cluster for remote jobs.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在创建实验之前，请确保已创建计算集群，如[*第1章*](B18003_01.xhtml#_idTextAnchor020)“介绍Azure机器学习服务”中所示，或者你也可以在本章中找到它，我们展示了如何为远程作业创建集群。
- en: 'Click the **+** button to create a new experiment:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **+** 按钮创建一个新的实验：
- en: '![Figure 3.3 – Create a new designer experiment ](img/B18003_03_003.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![图3.3 – 创建新的设计实验](img/B18003_03_003.jpg)'
- en: Figure 3.3 – Create a new designer experiment
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.3 – 创建新的设计实验
- en: Clicking `Classificationsample1` as the name. Now, we also have to provide a
    compute target. From the dropdown, select **Compute cluster** and then select
    the cluster that you have created. The cluster can be CPU-based or GPU-based.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 `Classificationsample1` 作为名称。现在，我们还需要提供一个计算目标。从下拉菜单中选择 **Compute cluster**，然后选择你已创建的集群。该集群可以是基于CPU或GPU的。
- en: Tip
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: A compute cluster provides a way to scale compute across multiple VMs to scale
    horizontally. Select CPU or GPU based on the use case. For example, most tabular
    datasets with less-than-TB size can use CPU-based clusters. For vision-based workloads,
    please choose GPU clusters.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 计算集群提供了一种在多个虚拟机之间扩展计算的方法，以实现横向扩展。根据用例选择CPU或GPU。例如，大多数小于TB大小的表格数据集可以使用基于CPU的集群。对于基于视觉的工作负载，请选择GPU集群。
- en: 'Select the default data store, which usually would be the Azure Machine Learning
    service’s underlying data store. Select **workspaceblobstore** as your choice
    and provide experiment details in the **Draft details** section. Then, click on
    the **X** icon on the right side to see the entire canvas:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择默认的数据存储，通常会是Azure机器学习服务底层数据存储。选择 **workspaceblobstore** 作为你的选择，并在 **草稿详情**
    部分提供实验详情。然后，点击右侧的 **X** 图标以查看整个画布：
- en: '![Figure 3.4 – Create a new designer experiment canvas ](img/B18003_03_004.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![图3.4 – 创建新的设计实验画布](img/B18003_03_004.jpg)'
- en: Figure 3.4 – Create a new designer experiment canvas
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.4 – 创建新的设计实验画布
- en: Note, from *Figure 3**.4*, that on the left side you have the menu options.
    This is where we have all the tasks that can be dragged and dropped onto the canvas
    to build a model. The menu is categorized for different operations, such as datasets,
    data input and output, data transformation, and ML algorithms. Consider reading
    the product documentation online for each task and its properties and functionalities.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，从[图3.4](#)中可以看到，在左侧有菜单选项。这是我们所有可以拖放到画布上构建模型的任务的地方。菜单按不同的操作分类，如数据集、数据输入和输出、数据转换和机器学习算法。建议阅读每个任务及其属性和功能的在线产品文档。
- en: Let’s build a model. The first thing you are going to bring is the dataset that
    you have it registered from [*Chapter 2*](B18003_02.xhtml#_idTextAnchor038), *Working
    with Data in AMLS*. In the left menu, expand **Datasets**, select the one to use,
    and drag and drop it to the canvas.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们构建一个模型。你将要带来的第一件事是你从[*第 2 章*](B18003_02.xhtml#_idTextAnchor038)，“在 AMLS 中处理数据”中注册的数据集。在左侧菜单中展开**数据集**，选择要使用的选项，并将其拖放到画布上。
- en: Important note
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: In this chapter, I am going to walk you through a basic ML modeling step.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我将带您了解一个基本的机器学习建模步骤。
- en: 'For this chapter, I have created a Titanic open source data sample and configured
    as a dataset. Here is how it looks when you drag and drop it on the canvas. Right-click
    on the dataset and the property sheet will show on the right side of the screen.
    Select **Output** and view the dataset sample rows. An option to view the data
    profile will also be provided:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于本章，我创建了一个泰坦尼克号开源数据样本并将其配置为数据集。当你将其拖放到画布上时，它看起来是这样的。右键单击数据集，属性表将显示在屏幕的右侧。选择**输出**并查看数据集样本行。还将提供查看数据概要的选项：
- en: '![Figure 3.5 – Dataset on canvas ](img/B18003_03_005.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.5 – 画布上的数据集](img/B18003_03_005.jpg)'
- en: Figure 3.5 – Dataset on canvas
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.5 – 画布上的数据集
- en: 'Now, in the search box of the left menu, type `Select Columns in Dataset` and
    drag and drop it on the canvas, then connect the previous dataset to **Select
    Columns in Dataset**. Now, click **Select Columns in Dataset**, go to **Select
    columns**, and select the **Edit columns** to use for modeling. This task allows
    us to choose which columns we can use:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在左侧菜单的搜索框中输入`数据集中的选择列`并将其拖放到画布上，然后将其连接到**数据集中的选择列**。现在，点击**数据集中的选择列**，转到**选择列**，并选择用于建模的**编辑列**。这个任务允许我们选择我们可以使用的列：
- en: '![Figure 3.6 – Select Columns in Dataset ](img/B18003_03_006.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.6 – 数据集中的选择列](img/B18003_03_006.jpg)'
- en: Figure 3.6 – Select Columns in Dataset
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.6 – 数据集中的选择列
- en: In the **Edit Columns** section, choose the columns we need. There are options
    to select all columns, all features, or all labels or choose by name. For the
    preceding sample, we chose to select by column name and selected columns from
    the list.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在**编辑列**部分，选择我们需要的列。有选项可以选择所有列、所有特征或所有标签，或者通过名称选择。对于前面的示例，我们选择通过列名选择，并从列表中选择列。
- en: 'The next transformation is going to be for cleaning data. This is a common
    task to perform to get rid of unwanted rows that have no values, null values,
    and so on. Type `Clean Missing Data` in the search box and drop it on the canvas,
    then connect it to the previous task, in this case, **Select Columns** **in Dataset**:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一个转换将是清理数据。这是一个常见的任务，用于去除没有值、空值等不想要的行。在搜索框中输入`清理缺失数据`并将其拖放到画布上，然后将其连接到前面的任务，在这种情况下，是**数据集中的选择列**：
- en: '![Figure 3.7 – Clean Missing Data ](img/B18003_03_007.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.7 – 清理缺失数据](img/B18003_03_007.jpg)'
- en: Figure 3.7 – Clean Missing Data
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.7 – 清理缺失数据
- en: 'Click **Edit column** and select the columns or features to clean. Feature
    or column selection can be either by rule or by name. When you click on the text
    box, a list will pop up, as shown in *Figure 3**.8*. Select the columns or features
    you need to model. In this example, select all the columns:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**编辑列**并选择要清理的列或特征。特征或列的选择可以是按规则或按名称。当你点击文本框时，将弹出一个列表，如图 3.8 所示。选择你需要建模的列或特征。在这个例子中，选择所有列：
- en: '![Figure 3.8 – Edit column ](img/B18003_03_008.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.8 – 编辑列](img/B18003_03_008.jpg)'
- en: Figure 3.8 – Edit column
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.8 – 编辑列
- en: Now that we have done some feature engineering, it’s time to split the data
    for training and testing. It’s a very common practice during ML to split the dataset
    into training and testing. Usually, the split is 70% training and 30% testing.
    Type `Split Data` in the search box and drag and drop it on the canvas to connect
    it to the previous task. The property sheet will show up on the right. For `0.7`.
    This setting allows us to split the dataset into 70% for training and the remaining
    30% for the test dataset.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经进行了一些特征工程，是时候将数据分割为训练和测试了。在机器学习中，将数据集分割为训练和测试是一个非常常见的做法。通常，分割是 70% 的训练和
    30% 的测试。在搜索框中输入`分割数据`并将其拖放到画布上以连接到前面的任务。属性表将显示在右侧。对于`0.7`，这个设置允许我们将数据集分割为 70%
    用于训练，剩余的 30% 用于测试数据集。
- en: 'The **Split Data** activity enables you to choose the split, whether the split
    should be randomized, the seed used for splitting, and whether the split should
    be stratified, as shown in the following screenshot:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '**分割数据**活动允许你选择分割方式，分割是否应该随机化，分割使用的种子，以及分割是否应该分层，如以下截图所示：'
- en: '![Figure 3.9 – Split Data ](img/B18003_03_009.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![图3.9 – 分割数据](img/B18003_03_009.jpg)'
- en: Figure 3.9 – Split Data
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.9 – 分割数据
- en: After `Two-Class Boosted Decision Tree` and drag and drop it onto the canvas.
    Since this is a simple survived ML task, we are choosing two-class boosted decision
    tree. You can select another two-class algorithm as needed. Once the algorithm
    is selected, we need to configure its parameters. Typically, you can leave most
    as the default values, as these parameters are chosen based on statistics of various
    model runs. You should ensure that you set your random seed as shown in *Figure
    3**.10*.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**双类提升决策树**后将其拖放到画布上。由于这是一个简单的存活机器学习任务，我们选择双类提升决策树。根据需要，你可以选择另一个双类算法。一旦选择了算法，我们需要配置其参数。通常，你可以将大多数设置为默认值，因为这些参数是基于各种模型运行统计选择的。你应该确保设置你的随机种子，如*图3.10*所示。
- en: 'The following screenshot showcases the parameters to set for **Two-Class Boosted**
    **Decision Tree**:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图展示了为**双类提升** **决策树**设置的参数：
- en: '![Figure 3.10 – Two-Class Boosted Decision Tree ](img/B18003_03_010.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![图3.10 – 双类提升决策树](img/B18003_03_010.jpg)'
- en: Figure 3.10 – Two-Class Boosted Decision Tree
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.10 – 双类提升决策树
- en: Now, on the left menu, in the search box, type in `Train Model` and drop it
    onto the canvas. For **Train Model**, we need to connect to two inputs, which
    are one from the model output and the other from the first output of **Split Data**.
    Make sure the algorithm and training data are connected. Then, select **Train
    Model** and the label column to predict.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在左侧菜单中，在搜索框中输入`训练模型`并将其拖放到画布上。对于**训练模型**，我们需要连接到两个输入，一个来自模型输出，另一个来自**分割数据**的第一个输出。确保算法和训练数据已连接。然后，选择**训练模型**和预测的标签列。
- en: 'Select **Edit Column** and then set **Label column** to **Survived**. **Model
    explanations** is a feature that allows us to enable model expandability:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**编辑列**然后设置**标签列**为**存活**。**模型解释**是一个允许我们启用模型可扩展性的功能：
- en: '![Figure 3.11 – Train Model ](img/B18003_03_011.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![图3.11 – 训练模型](img/B18003_03_011.jpg)'
- en: Figure 3.11 – Train Model
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.11 – 训练模型
- en: 'Now, you can score the model. Go to the left menu and in the search box, type
    in `Score Model` and drag and drop it onto the canvas. **Score Model** must be
    connected to two outputs. The first input should be connected to the output of
    **Train Model** and the second input has to be connected to **Split Data**’s second
    output. **Score Model** takes the training output model and then consumes the
    test dataset to score the test dataset:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你可以评分模型。转到左侧菜单，在搜索框中输入`评分模型`并将其拖放到画布上。**评分模型**必须连接到两个输出。第一个输入应该连接到**训练模型**的输出，第二个输入必须连接到**分割数据**的第二个输出。**评分模型**接受训练输出模型，然后消耗测试数据集以评分测试数据集：
- en: '![Figure 3.12 – Score Model ](img/B18003_03_012.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![图3.12 – 评分模型](img/B18003_03_012.jpg)'
- en: Figure 3.12 – Score Model
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.12 – 评分模型
- en: 'Now, the last step here is adding the **Evaluate Model** output and getting
    the model accuracy scores. For this, from the left menu, drag and drop **Evaluate
    Model** onto the canvas. For **Evaluate Model**, the first input should be connected
    to the **Score Model** output. There are no settings for this task:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，这里的最后一步是添加**评估模型**输出并获取模型准确度分数。为此，从左侧菜单中，将**评估模型**拖放到画布上。对于**评估模型**，第一个输入应该连接到**评分模型**输出。此任务没有设置：
- en: '![Figure 3.13 – Evaluate Model ](img/B18003_03_013.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![图3.13 – 评估模型](img/B18003_03_013.jpg)'
- en: Figure 3.13 – Evaluate Model
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.13 – 评估模型
- en: 'Now, click **Save** on the canvas. We have now completed our development of
    the model. In the upper-right corner, you will see a button for **Submit**:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在画布上点击**保存**。我们现在已经完成了模型开发。在右上角，你会看到一个用于**提交**的按钮：
- en: '![Figure 3.14 – Submit experiment ](img/B18003_03_014.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![图3.14 – 提交实验](img/B18003_03_014.jpg)'
- en: Figure 3.14 – Submit experiment
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.14 – 提交实验
- en: 'Click on **Submit** and provide a name for the experiment:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**提交**并为实验提供一个名称：
- en: '![Figure 3.15 – New experiment ](img/B18003_03_015.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![图3.15 – 新实验](img/B18003_03_015.jpg)'
- en: Figure 3.15 – New experiment
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.15 – 新实验
- en: 'Then, click `Classificationsample1`. Provide a job description for the experiment,
    which is optional. Leave **Compute target** as **Default** as we selected at the
    beginning of the experiment. Wait for the experiment to complete. Once the experiment
    is started, you should see the following screenshot:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，点击`Classificationsample1`。为实验提供作业描述，这是可选的。将**计算目标**保留为**默认**，因为我们已经在实验开始时选择了它。等待实验完成。一旦实验开始，你应该看到以下截图：
- en: '![Figure 3.16 – Experiment status ](img/B18003_03_016.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.16 – 实验状态](img/B18003_03_016.jpg)'
- en: Figure 3.16 – Experiment status
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.16 – 实验状态
- en: Optionally, you can also see the run details by clicking on **Jobs**, and then
    for **Classificationsample1**, click on its latest job.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 可选地，你也可以通过点击**作业**来查看运行详情，然后对于**Classificationsample1**，点击其最新的作业。
- en: 'Once the experiment is completed, you should see all the tasks in green, as
    per the following screenshot:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦实验完成，你应该看到所有任务都显示为绿色，如下面的截图所示：
- en: '![Figure 3.17 – Experiment completed ](img/B18003_03_017.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.17 – 实验完成](img/B18003_03_017.jpg)'
- en: Figure 3.17 – Experiment completed
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.17 – 实验完成
- en: 'By clicking on the **Evaluate Model** task, we can review the results of the
    **Evaluate Model** task. In our case, I am only going to show **Evaluate Model**
    to see the confusion matrix and the **Receiver Operating Characteristic** (**ROC**)
    curve:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 通过点击**评估模型**任务，我们可以查看**评估模型**任务的结果。在我们的案例中，我将只展示**评估模型**以查看混淆矩阵和**接收者操作特征**（**ROC**）曲线：
- en: '![Figure 3.18 – ROC curve ](img/B18003_03_018.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.18 – ROC曲线](img/B18003_03_018.jpg)'
- en: Figure 3.18 – ROC curve
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.18 – ROC曲线
- en: 'In addition to reviewing the ROC curve, we can also review the confusion matrix,
    as shown in the following screenshot:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 除了审查ROC曲线，我们还可以审查混淆矩阵，如下面的截图所示：
- en: '![Figure 3.19 – Confusion matrix ](img/B18003_03_019.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.19 – 混淆矩阵](img/B18003_03_019.jpg)'
- en: Figure 3.19 – Confusion matrix
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.19 – 混淆矩阵
- en: In this section, we saw how to train a model using the Designer in AMLS. Using
    the Designer, we can train the model using the drag-and-drop interface, as well
    as carrying out feature engineering to provide an improved model. As a follow-up,
    take a look at each task in the user interface.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们看到了如何使用AMLS中的设计器来训练模型。使用设计器，我们可以通过拖放界面来训练模型，同时进行特征工程以提供改进的模型。作为后续，查看用户界面中的每个任务。
- en: In the next section, you will learn how to train a model by writing Python code
    and running it on a compute instance.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，你将学习如何通过编写Python代码并在计算实例上运行它来训练模型。
- en: Training on a compute instance
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在计算实例上训练
- en: You can train a model on a compute instance or on a compute cluster. In this
    section, we will use our existing compute instance before continuing with training
    on a compute cluster.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在计算实例或计算集群上训练模型。在本节中，我们将在继续在计算集群上训练之前使用现有的计算实例。
- en: To begin working with a compute instance, we will need to turn on the compute
    instance that was created in [*Chapter 1*](B18003_01.xhtml#_idTextAnchor020),
    *Introducing the Azure Machine* *Learning Service*.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用计算实例，我们需要打开在[*第1章*](B18003_01.xhtml#_idTextAnchor020)，“介绍Azure机器学习服务”中创建的计算实例。
- en: 'Follow these steps to train a model on a compute instance within AMLS:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤在AMLS中计算实例上训练模型：
- en: Go to [https://ml.azure.com](https://ml.azure.com).
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往[https://ml.azure.com](https://ml.azure.com)。
- en: Select your workspace name.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择你的工作区名称。
- en: 'On the left side of the workspace, click **Compute**:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在工作区的左侧，点击**计算**：
- en: '![Figure 3.20 – Compute instance icon ](img/B18003_03_020.jpg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.20 – 计算实例图标](img/B18003_03_020.jpg)'
- en: Figure 3.20 – Compute instance icon
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.20 – 计算实例图标
- en: 'On the **Compute** screen, select your compute instance and select **Start**:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**计算**屏幕上，选择你的计算实例并选择**开始**：
- en: '![Figure 3.21 – Start compute ](img/B18003_03_021.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.21 – 开始计算](img/B18003_03_021.jpg)'
- en: Figure 3.21 – Start compute
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.21 – 开始计算
- en: Your compute instance will change from **Stopped** to **Starting** status. Once
    the compute instance moves from **Starting** to **Running** status, it is ready
    for use.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 你的计算实例将从**停止**状态变为**启动**状态。一旦计算实例从**启动**状态变为**运行**状态，它就准备好使用。
- en: Click on the Terminal blue hyperlink under applications.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在应用程序下点击终端蓝色的超链接。
- en: 'This will open the terminal on your compute instance. Note your user will be
    included in the directory path. Type the following into the terminal to clone
    the sample notebooks into your working directory: [https://github.com/PacktPublishing/Azure-Machine-Learning-Engineering.git](https://github.com/PacktPublishing/Azure-Machine-Learning-Engineering.git).'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将在您的计算实例上打开终端。请注意，您的用户名将包含在目录路径中。在终端中输入以下内容以将示例笔记本克隆到您的工作目录：[https://github.com/PacktPublishing/Azure-Machine-Learning-Engineering.git](https://github.com/PacktPublishing/Azure-Machine-Learning-Engineering.git)。
- en: 'Clicking on the refresh icon shown in *Figure 3**.22* will display the repository
    in your working directory:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击显示在*图3.22*中的刷新图标，将在您的当前工作目录中显示仓库：
- en: '![Figure 3.22 – Refresh ](img/B18003_03_022.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![图3.22 – 刷新](img/B18003_03_022.jpg)'
- en: Figure 3.22 – Refresh
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.22 – 刷新
- en: 'After clicking the refresh icon within AML, the cloned repository will be displayed
    in your working directory, as shown in the following screenshot:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在AML中点击刷新图标后，克隆的仓库将显示在您的工作目录中，如下面的截图所示：
- en: '![Figure 3.23 – Azure-Machine-Learning-Engineering ](img/B18003_03_023.jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![图3.23 – Azure-Machine-Learning-Engineering](img/B18003_03_023.jpg)'
- en: Figure 3.23 – Azure-Machine-Learning-Engineering
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.23 – Azure-Machine-Learning-Engineering
- en: Clicking on the **train-on-compute-instance.ipynb** notebook will bring up the
    notebook.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**train-on-compute-instance.ipynb**笔记本将打开笔记本。
- en: 'The code snippet shown in *Figure 3**.24* enables you to connect to the Azure
    ML workspace in your compute instance:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如*图3.24*所示的代码片段使您能够连接到计算实例中的Azure ML工作区：
- en: '![Figure 3.24 – Connecting to the workspace ](img/B18003_03_024.jpg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![图3.24 – 连接到工作区](img/B18003_03_024.jpg)'
- en: Figure 3.24 – Connecting to the workspace
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.24 – 连接到工作区
- en: 'The code snippet shown in *Figure 3**.25* uses pandas to read in the dataset
    that is located in the `my_data` folder and then view it:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如*图3.25*所示的代码片段使用pandas读取位于`my_data`文件夹中的数据集，然后查看它：
- en: '![Figure 3.25 – Data exploration: Reading in the dataset and viewing the data
    ](img/B18003_03_025.jpg)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![图3.25 – 数据探索：读取数据集并查看数据](img/B18003_03_025.jpg)'
- en: 'Figure 3.25 – Data exploration: Reading in the dataset and viewing the data'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.25 – 数据探索：读取数据集并查看数据
- en: 'The next cell checks to see what columns have null data have so that we can
    cleanse the dataset:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个单元格将检查哪些列有空数据，以便我们可以清洗数据集：
- en: '![Figure 3.26 – Data exploration: View null values in the dataset ](img/B18003_03_026.jpg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![图3.26 – 数据探索：查看数据集中的空值](img/B18003_03_026.jpg)'
- en: 'Figure 3.26 – Data exploration: View null values in the dataset'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.26 – 数据探索：查看数据集中的空值
- en: 'The `Pclass` and `Sex` when the value is `null`:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当值为`null`时的`Pclass`和`Sex`：
- en: '![Figure 3.27 – Data cleansing: Populating the Age column’s null values with
    the medians for Pclass and Sex ](img/B18003_03_027.jpg)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![图3.27 – 数据清洗：用Pclass和Sex的中位数填充Age列的空值](img/B18003_03_027.jpg)'
- en: 'Figure 3.27 – Data cleansing: Populating the Age column’s null values with
    the medians for Pclass and Sex'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.27 – 数据清洗：用Pclass和Sex的中位数填充Age列的空值
- en: 'For `Cabin`, we can use the first character and treat it as a categorical variable
    during model creation to represent the location in the ship. If the value is `null`,
    we will replace it with `X`, representing an unknown `Cabin` type, as shown in
    *Figure 3**.28*:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于`Cabin`，我们可以在创建模型时使用第一个字符，将其视为分类变量来表示船上的位置。如果值为`null`，我们将将其替换为`X`，表示未知的`Cabin`类型，如图*图3.28*所示：
- en: '![Figure 3.28 – Feature engineering: Populating the Loc column ](img/B18003_03_028.jpg)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![图3.28 – 特征工程：填充Loc列](img/B18003_03_028.jpg)'
- en: 'Figure 3.28 – Feature engineering: Populating the Loc column'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.28 – 特征工程：填充Loc列
- en: 'We will drop the `Cabin` column, given we have retrieved the useful information
    from it, and also remove the `Ticket` column, as the `Loc` column will now represent
    the location within the ship, as shown in *Figure 3**.29*:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将删除`Cabin`列，因为我们已经从其中检索了有用的信息，并且也将删除`Ticket`列，因为`Loc`列现在将代表船上的位置，如图*图3.29*所示：
- en: '![Figure 3.29 – Data cleansing: Dropping unnecessary columns ](img/B18003_03_029.jpg)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![图3.29 – 数据清洗：删除不必要的列](img/B18003_03_029.jpg)'
- en: 'Figure 3.29 – Data cleansing: Dropping unnecessary columns'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.29 – 数据清洗：删除不必要的列
- en: 'Continuing with feature engineering, we will create a column called `GroupSize`,
    as groups of passengers that were family members may have had a greater chance
    at survival by working together:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在继续特征工程时，我们将创建一个名为`GroupSize`的列，因为可能是家庭成员的乘客群体通过合作有更大的生存机会：
- en: '![Figure 3.30 – Feature engineering: Group size ](img/B18003_03_030.jpg)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![图3.30 – 特征工程：组大小](img/B18003_03_030.jpg)'
- en: 'Figure 3.30 – Feature engineering: Group size'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.30 – 特征工程：组大小
- en: 'Given the values for the `''Embarked''` column are limited, and we only have
    two rows with null values, we will arbitrarily set them to the value of `''S''`,
    as shown in *Figure 3**.31*:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于`'Embarked'`列的值有限，我们只有两行带有空值，我们将任意地将它们设置为`'S'`的值，如图*3.31*所示：
- en: '![Figure 3.31 – Data cleansing: Populating null value with a default value
    ](img/B18003_03_031.jpg)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![图3.31 – 数据清洗：用默认值填充空值](img/B18003_03_031.jpg)'
- en: 'Figure 3.31 – Data cleansing: Populating null value with a default value'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.31 – 数据清洗：用默认值填充空值
- en: 'As shown in *Figure 3**.32*, we will drop the columns that we won’t be using
    during the training process:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 如*图3.32*所示，我们将删除在训练过程中不会使用的列：
- en: '![Figure 3.32 – Data cleansing: Dropping columns not needed for model training
    ](img/B18003_03_032.jpg)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![图3.32 – 数据清洗：删除模型训练不需要的列](img/B18003_03_032.jpg)'
- en: 'Figure 3.32 – Data cleansing: Dropping columns not needed for model training'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.32 – 数据清洗：删除模型训练不需要的列
- en: 'We will create a folder to hold our training data, as shown in *Figure 3**.33*.
    This is not required but will keep our directories clear:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将创建一个文件夹来存放我们的训练数据，如图*3.33*所示。这不是必需的，但会使我们的目录更清晰：
- en: '![Figure 3.34 – View the clean_training_data folder in the directory](img/B18003_03_033.jpg)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![图3.34 – 在目录中查看clean_training_data文件夹](img/B18003_03_033.jpg)'
- en: Figure 3.33 – Folder creation
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.33 – 创建文件夹
- en: 'The directory can be seen on the left pane in the *Notebooks* section after
    clicking on the refresh button, as shown in *Figure 3**.34*:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在点击刷新按钮后，可以在*Notebooks*部分的左侧面板中看到目录，如图*3.34*所示：
- en: '![](img/B18003_03_034.jpg)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18003_03_034.jpg)'
- en: Figure 3.34 – View the clean_training_data folder in the directory
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.34 – 在目录中查看clean_training_data文件夹
- en: 'With the newly created directory, we can save the dataset to the `clean_training_data`
    directory, as shown in *Figure 3**.35*:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用新创建的目录，我们可以将数据集保存到`clean_training_data`目录中，如图*3.35*所示：
- en: '![Figure 3.35 – Saving the engineered dataset ](img/B18003_03_035.jpg)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![图3.35 – 保存工程化数据集](img/B18003_03_035.jpg)'
- en: Figure 3.35 – Saving the engineered dataset
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.35 – 保存工程化数据集
- en: 'We will begin with importing the needed libraries to create a logistic regression
    model, as shown in *Figure 3**.36*:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将开始导入创建逻辑回归模型所需的库，如图*3.36*所示：
- en: '![Figure 3.36 – Import libraries ](img/B18003_03_036.jpg)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![图3.36 – 导入库](img/B18003_03_036.jpg)'
- en: Figure 3.36 – Import libraries
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.36 – 导入库
- en: 'After importing the libraries required for our experiment, we will focus on
    the main method, which will be called as the code is executed on the compute instance:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在导入实验所需的库之后，我们将重点关注主方法，该方法将在计算实例上执行代码时被调用：
- en: '![Figure 3.37 – Main module of the experiment ](img/B18003_03_037.jpg)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![图3.37 – 实验的主模块](img/B18003_03_037.jpg)'
- en: Figure 3.37 – Main module of the experiment
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.37 – 实验的主模块
- en: Using MLflow, which is an open source ML framework to manage an end-to-end ML
    life cycle and is fully integrated with AMLS, we will create an experiment named
    `'titanic_local_compute'`, which can be seen in *Figure 3**.37* inside the main
    method. If it does not exist the first time the notebook is run, it will be created
    in the AML workspace. This experiment can be viewed on the `mlflow.start_run()`
    method, which will begin a new run within the experiment. Using the `mlflow.sklearn.autolog()`
    and `mlflow.log_metric()` methods, we can log parameters and ML metrics for the
    current run.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 使用MLflow，这是一个开源的机器学习生命周期管理框架，与AMLS完全集成，我们将创建一个名为`'titanic_local_compute'`的实验，如图*3.37*所示，在主方法内部。如果笔记本第一次运行时不存在，它将在AML工作区中创建。这个实验可以在`mlflow.start_run()`方法中查看，它将在实验中开始一个新的运行。使用`mlflow.sklearn.autolog()`和`mlflow.log_metric()`方法，我们可以记录当前运行的参数和机器学习指标。
- en: 'Next, we will discuss the `model_train` function, as shown in *Figure 3**.38*:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将讨论`model_train`函数，如图*3.38*所示：
- en: '![Figure 3.38 – Model _train ](img/B18003_03_038.jpg)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![图3.38 – 模型_train](img/B18003_03_038.jpg)'
- en: Figure 3.38 – Model _train
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.38 – 模型_train
- en: A logistic regression model is created in the `model_train` function, as shown
    in *Figure 3**.38*. The inputs and the response variable are separated and a train-test
    split is applied using the `sklearn` library. The model is fitted and the AUC
    and accuracy are printed as outputs in the notebook, but also leveraging the MLflow
    framework, they are logged to the experiment as output. In addition to logging
    key metrics and parameters as part of an experiment, figures associated with these
    metrics will be automatically logged using MLflow, which we will look at later
    in this section.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在`model_train`函数中创建了一个逻辑回归模型，如图*图3.38*所示。输入变量和响应变量被分离，并使用`sklearn`库应用了训练-测试分割。模型被拟合，AUC和准确率作为笔记本中的输出打印出来，同时利用MLflow框架，它们也被记录到实验中作为输出。除了将关键指标和参数作为实验的一部分进行记录外，与这些指标相关的图表也将自动使用MLflow进行记录，我们将在本节稍后讨论。
- en: 'Given the training has been handled, we also want to include a preprocessor
    pipeline to handle data transformation as part of our pipeline, as shown in the
    following screenshot:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 由于训练已经处理完毕，我们还想将预处理管道包含在我们的管道中，以处理数据转换，如图中所示：
- en: '![Figure 3.39 – Preprocessor ](img/B18003_03_039.jpg)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![图3.39 – 预处理](img/B18003_03_039.jpg)'
- en: Figure 3.39 – Preprocessor
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.39 – 预处理程序
- en: We have incorporated a preprocessor pipeline to handle data transformation,
    as shown in *Figure 3**.39*. Creating a pipeline for data transformation ensures
    that when we score unseen data, the same transformations that were applied to
    our training dataset will be applied to the testing data, and to the new data
    the model hasn’t seen before. This enables model deployment to use the same transformations
    in a deployed model when we get to that step.
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们已经集成了一个预处理管道来处理数据转换，如图*图3.39*所示。创建一个数据转换的管道确保当我们对未见过的数据进行评分时，应用于我们的训练数据集的相同转换也会应用于测试数据和模型之前未见过的新的数据。这使模型部署能够在到达该步骤时在部署的模型中使用相同的转换。
- en: Within the `model_train` method, after plotting the ROC curve, we use the `confusion_Matrix()`
    method to calculate the confusion matrix for the run of the experiment, which
    will also be logged automatically within AML, as shown later in the section.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`model_train`方法中，在绘制ROC曲线之后，我们使用`confusion_Matrix()`方法计算实验运行的混淆矩阵，它也将自动在AML中记录，如图中所示。
- en: 'This experiment was run directly on the AML compute instance as cells are executed
    in the notebook. Print statements and `plt.show` provide output directly in the
    notebook, as shown in *Figure 3**.40*, but the Azure Machine Learning service
    has also captured this information within an experiment run, so when a notebook
    is cleared out, key metrics for model evaluation are not lost:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这个实验直接在AML计算实例上运行，因为笔记本中的单元格是逐个执行的。打印语句和`plt.show`命令会在笔记本中直接提供输出，如图*图3.40*所示。但是，Azure
    Machine Learning服务也捕获了实验运行中的这些信息，所以当笔记本被清空时，模型评估的关键指标不会丢失：
- en: '![Figure 3.40 – Notebook output ](img/B18003_03_040.jpg)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![图3.40 – 笔记本输出](img/B18003_03_040.jpg)'
- en: Figure 3.40 – Notebook output
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.40 – 笔记本输出
- en: 'On the left pane, by clicking on the **Jobs** icon, we can see **titanic_local_compute**
    under **Experiment** as a blue hyperlink. By clicking on this experiment, we can
    drill into an overview of the different runs of our experiment, as shown in *Figure
    3**.41*:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧面板中，通过点击**作业**图标，我们可以在**实验**下看到蓝色的超链接**titanic_local_compute**。通过点击这个实验，我们可以深入了解实验的不同运行情况，如图*图3.41*所示：
- en: '![Figure 3.41 – Experiment run output ](img/B18003_03_041.jpg)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
  zh: '![图3.41 – 实验运行输出](img/B18003_03_041.jpg)'
- en: Figure 3.41 – Experiment run output
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.41 – 实验运行输出
- en: 'Clicking on the display name of a given run in the experiment provides details
    regarding the experiment run, as shown in *Figure 3**.42*:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在实验中点击某个运行显示名称，可以提供有关实验运行的详细信息，如图*图3.42*所示：
- en: '![Figure 3.42 – Run details ](img/B18003_03_042.jpg)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![图3.42 – 运行详情](img/B18003_03_042.jpg)'
- en: Figure 3.42 – Run details
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.42 – 运行详情
- en: 'By clicking on the **Metrics** tab, we can see our **AUC** and **Accuracy**
    values, as logged for the run of the experiment in *Figure 3**.43*. This enables
    a data scientist to easily compare models to understand how changes to the model
    impact performance, accelerating model development:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过点击**指标**选项卡，我们可以看到我们的**AUC**和**准确率**值，如图*图3.43*所示。这使数据科学家能够轻松比较模型，了解模型的变化如何影响性能，从而加速模型开发：
- en: '![Figure 3.43 – Run metrics ](img/B18003_03_043.jpg)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
  zh: '![图3.43 – 运行指标](img/B18003_03_043.jpg)'
- en: Figure 3.43 – Run metrics
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.43 – 运行指标
- en: 'The **Images** tab captures the figures associated with model metrics, such
    as the ROC curve, precision-recall curve, and confusion matrix, as shown in *Figure
    3**.44*:'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**图片** 标签页捕获与模型指标相关的图表，例如 ROC 曲线、精确率-召回率曲线和混淆矩阵，如图 *3.44* 所示：'
- en: '![Figure 3.44 – Images tab ](img/B18003_03_044.jpg)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.44 – 图片标签页](img/B18003_03_044.jpg)'
- en: Figure 3.44 – Images tab
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.44 – 图片标签页
- en: This section showed how to train a model using an AML compute instance. The
    objective is to show how we can train a model using a code-first approach with
    common open source libraries to tackle the task of data engineering, feature selection,
    and model development.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 本节展示了如何使用 AML 计算实例来训练模型。目标是展示我们如何使用以代码优先的方法，结合常见的开源库来处理数据工程、特征选择和模型开发的任务。
- en: In the next section, we will use a compute cluster to train a model.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将使用计算集群来训练模型。
- en: Training on a compute cluster
  id: totrans-186
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在计算集群上训练
- en: In the previous section, we showed how to train your model on a compute instance.
    In this section, we will show you how to submit your training job to a compute
    cluster when the training job needs to scale out. AML has made it extremely easy
    to run your training code on various compute targets without the need to change
    the training script. You need to create an AML pipeline that handles the data
    processing, the model training, and registering the trained model, as explained
    in this section.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们展示了如何在计算实例上训练您的模型。在本节中，我们将向您展示如何在需要扩展的训练作业时将训练作业提交到计算集群。AML 使您能够在各种计算目标上运行训练代码变得极其简单，而无需更改训练脚本。您需要创建一个
    AML 管道来处理数据处理、模型训练和注册训练好的模型，如本节所述。
- en: 'The following are the steps to train your model on a compute cluster:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在计算集群上训练您的模型的步骤：
- en: Go to [https://ml.azure.com](https://ml.azure.com).
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到 [https://ml.azure.com](https://ml.azure.com)。
- en: Select your workspace name.
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择您的工作区名称。
- en: 'On the left side of the workspace user interface, click **Compute**:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在工作区用户界面的左侧，点击 **计算**：
- en: '![Figure 3.45 – Compute icon ](img/B18003_03_045.jpg)'
  id: totrans-192
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.45 – 计算图标](img/B18003_03_045.jpg)'
- en: Figure 3.45 – Compute icon
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.45 – 计算图标
- en: 'On the **Compute** screen, click on the **Compute clusters** tab and then click
    on **+ New**, as shown in *Figure 3**.46*:'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **计算** 屏幕上，点击 **计算集群** 标签，然后点击 **+ 新建**，如图 *3.46* 所示：
- en: '![Figure 3.46 – Creating a new compute cluster ](img/B18003_03_046.jpg)'
  id: totrans-195
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.46 – 创建新的计算集群](img/B18003_03_046.jpg)'
- en: Figure 3.46 – Creating a new compute cluster
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.46 – 创建新的计算集群
- en: 'The next few screens allow you to create and configure a compute cluster based
    on your need. Once done, click on **Create**, as shown in *Figure 3**.47*:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来的几个屏幕允许您根据需要创建和配置计算集群。完成后，点击 **创建**，如图 *3.47* 所示：
- en: '![Figure 3.47 – Configuring a compute cluster ](img/B18003_03_047.jpg)'
  id: totrans-198
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.47 – 配置计算集群](img/B18003_03_047.jpg)'
- en: Figure 3.47 – Configuring a compute cluster
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.47 – 配置计算集群
- en: 'After a few seconds, your new compute cluster will be running, as shown in
    *Figure 3**.48*:'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 几秒钟后，您的新计算集群将启动，如图 *3.48* 所示：
- en: '![Figure 3.48 – List of compute clusters ](img/B18003_03_048.jpg)'
  id: totrans-201
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.48 – 计算集群列表](img/B18003_03_048.jpg)'
- en: Figure 3.48 – List of compute clusters
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.48 – 计算集群列表
- en: 'Go to your working directory, as shown in *Figure 3**.49*:'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照如图 *3.49* 所示，转到您的工作目录：
- en: '![Figure 3.49 – Working directory ](img/B18003_03_049.jpg)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.49 – 工作目录](img/B18003_03_049.jpg)'
- en: Figure 3.49 – Working directory
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.49 – 工作目录
- en: Clicking on **train-on-compute-cluster.ipynb** will bring up the notebook, which
    is very similar to the notebook in the previous section. We will not repeat all
    the steps here again and will only go through the steps needed to run the training
    on the remote cluster that you have just created. To learn more about AML pipelines
    and submitting remote jobs, please refer to [https://github.com/Azure/azureml-examples](https://github.com/Azure/azureml-examples).
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **train-on-compute-cluster.ipynb** 将会打开笔记本，它与上一节中的笔记本非常相似。我们在此不再重复所有步骤，只介绍如何在您刚刚创建的远程集群上运行训练所需的步骤。要了解更多关于
    AML 管道和提交远程作业的信息，请参阅 [https://github.com/Azure/azureml-examples](https://github.com/Azure/azureml-examples)。
- en: 'The code snippet shown in *Figure 3**.50* is used to create an object to access
    your AML workspace:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 图 *3.50* 中所示的代码片段用于创建一个对象以访问您的 AML 工作区：
- en: '![Figure 3.50 – Working directory ](img/B18003_03_050.jpg)'
  id: totrans-208
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.50 – 工作目录](img/B18003_03_050.jpg)'
- en: Figure 3.50 – Working directory
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.50 – 工作目录
- en: 'Next, we will create an AML environment, which is an encapsulated Python environment
    where different steps of an ML pipeline, such as the training step, happen. *Figure
    3**.51* shows how to create a `conda` environment for your jobs, using a `conda`.`yaml`
    file:'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将创建一个 AML 环境，这是一个封装的 Python 环境，其中 ML 管道的不同步骤，如训练步骤，会发生。*图 3.51* 展示了如何使用
    `conda.yaml` 文件为你的作业创建一个 `conda` 环境：
- en: '![Figure 3.51 – conda environment ](img/B18003_03_051.jpg)'
  id: totrans-211
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.51 – conda 环境](img/B18003_03_051.jpg)'
- en: Figure 3.51 – conda environment
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.51 – conda 环境
- en: 'The preceding `.yaml` specification file contains Python packages, which are
    used in the pipeline. You can then use this .`yaml` file to create and register
    this custom environment in your AML workspace, as shown in *Figure 3**.52*:'
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前面的 `.yaml` 规范文件包含在管道中使用的 Python 包。然后你可以使用这个 `.yaml` 文件在你的 AML 工作区中创建和注册这个自定义环境，如图
    *3.52* 所示：
- en: '![Figure 3.52 – Creating and registering a custom environment in AML ](img/B18003_03_052.jpg)'
  id: totrans-214
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.52 – 在 AML 中创建和注册自定义环境](img/B18003_03_052.jpg)'
- en: Figure 3.52 – Creating and registering a custom environment in AML
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.52 – 在 AML 中创建和注册自定义环境
- en: To create an AML component, you need to write a Python script to implement the
    ML task. This script can take input data and input parameters, which are used
    within the code, and output the results (for example, a transformed dataset or
    a trained model) to a persistent place, such as a mounted folder. An output of
    an ML component can be used as an input to the next step in the pipeline via its
    ML component’s input. Once you have the Python script, you can create the component
    either programmatically or using a .`yaml` definition.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建 AML 组件，你需要编写一个 Python 脚本来实现 ML 任务。此脚本可以接受输入数据和输入参数，这些参数在代码中使用，并将结果（例如，转换后的数据集或训练好的模型）输出到一个持久位置，例如挂载的文件夹。ML
    组件的输出可以通过其 ML 组件的输入用作管道中下一步的输入。一旦你有了 Python 脚本，你可以通过编程方式或使用 `.yaml` 定义来创建组件。
- en: 'Next, we need to write a Python script for the data processing step of the
    pipeline, as shown in *Figure 3**.53*:'
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要为管道的数据处理步骤编写一个 Python 脚本，如图 *3.53* 所示：
- en: '![Figure 3.53 – Python script for the data preparation step of the pipeline
    ](img/B18003_03_053.jpg)'
  id: totrans-218
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.53 – 管道数据准备步骤的 Python 脚本](img/B18003_03_053.jpg)'
- en: Figure 3.53 – Python script for the data preparation step of the pipeline
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.53 – 管道数据准备步骤的 Python 脚本
- en: 'Now that we have a script to perform the data processing task, we can create
    an AML component from it using the programmatic definition. To create an ML component,
    we will use the `command` class to specify the inputs and outputs of the Python
    script, the source code directory of the script, the command line to run the script,
    and the Python environment where this job will run, as shown in *Figure 3**.54*:'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们有了执行数据处理任务的脚本，我们可以使用程序定义来创建一个 AML 组件。要创建 ML 组件，我们将使用 `command` 类来指定 Python
    脚本的输入和输出、脚本的源代码目录、运行脚本的命令行以及此作业将运行的 Python 环境，如图 *3.54* 所示：
- en: '![Figure 3.54 – Creating a data processing component using the command class
    ](img/B18003_03_054.jpg)'
  id: totrans-221
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.54 – 使用命令类创建数据处理组件](img/B18003_03_054.jpg)'
- en: Figure 3.54 – Creating a data processing component using the command class
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.54 – 使用命令类创建数据处理组件
- en: 'Next, we need to write a Python script for the model training step of the pipeline
    and then create an AML component from it. Please refer to our GitHub to use the
    Python code for the model training. To create an AML component from it, we will
    be using the .`yaml` definition this time, as shown in *Figure 3**.55*:'
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要为管道的模型训练步骤编写一个 Python 脚本，然后从中创建一个 AML 组件。请参考我们的 GitHub 以使用模型训练的 Python
    代码。要创建 AML 组件，我们将这次使用 `.yaml` 定义，如图 *3.55* 所示：
- en: '![Figure 3.55 – Creating a model training component using the yaml definition
    ](img/B18003_03_055.jpg)'
  id: totrans-224
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.55 – 使用 yaml 定义创建模型训练组件](img/B18003_03_055.jpg)'
- en: Figure 3.55 – Creating a model training component using the yaml definition
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.55 – 使用 yaml 定义创建模型训练组件
- en: 'We can load the training component from the .`yaml` file and then register
    it to the workspace using the code snippet shown in *Figure 3**.56*:'
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以从 `.yaml` 文件中加载训练组件，然后使用图 *3.56* 中所示的代码片段将其注册到工作区：
- en: '![Figure 3.56 – Loading and registering the model training component ](img/B18003_03_056.jpg)'
  id: totrans-227
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.56 – 加载和注册模型训练组件](img/B18003_03_056.jpg)'
- en: Figure 3.56 – Loading and registering the model training component
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.56 – 加载和注册模型训练组件
- en: 'Now that both the data processing and model training components have been created,
    we can start coding the pipeline definition, which will be called in a later step.
    We will use the `@dsl.pipeline` decorator to tell the SDK that we are defining
    an AML pipeline, as shown in *Figure 3**.57*. As you can see, the compute target
    is specified here, which is our compute cluster that we created earlier in this
    section:'
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在数据预处理和模型训练组件都已创建，我们可以开始编写管道定义的代码，该代码将在后续步骤中调用。我们将使用`@dsl.pipeline`装饰器来告诉SDK我们正在定义一个AML管道，如图*图3**.57*所示。如图所示，这里指定了计算目标，即我们在此节之前创建的计算集群：
- en: '![Figure 3.57 – Defining an AML pipeline using the @dsl.pipeline decorator
    ](img/B18003_03_057.jpg)'
  id: totrans-230
  prefs: []
  type: TYPE_IMG
  zh: '![图3.57 – 使用@dsl.pipeline装饰器定义AML管道](img/B18003_03_057.jpg)'
- en: Figure 3.57 – Defining an AML pipeline using the @dsl.pipeline decorator
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.57 – 使用@dsl.pipeline装饰器定义AML管道
- en: 'Now that we have defined our pipeline, let’s instantiate it by passing our
    dataset, the split rate, and the name for the trained model, as shown in *Figure
    3**.58*:'
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经定义了我们的管道，让我们通过传递我们的数据集、分割率和训练模型的名称来实例化它，如图*图3**.58*所示：
- en: '![Figure 3.58 – Instantiating the pipeline by passing data and parameters ](img/B18003_03_058.jpg)'
  id: totrans-233
  prefs: []
  type: TYPE_IMG
  zh: '![图3.58 – 通过传递数据和参数实例化管道](img/B18003_03_058.jpg)'
- en: Figure 3.58 – Instantiating the pipeline by passing data and parameters
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.58 – 通过传递数据和参数实例化管道
- en: 'Now that we have instantiated the pipeline object, we can submit the job to
    run in AML, which uses the compute cluster to run the steps within the pipeline,
    as shown in *Figure 3**.59*:'
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经实例化了管道对象，我们可以将作业提交到AML中运行，AML使用计算集群来运行管道内的步骤，如图*图3**.59*所示：
- en: '![Figure 3.59 – Submitting a pipeline job to run in AML ](img/B18003_03_059.jpg)'
  id: totrans-236
  prefs: []
  type: TYPE_IMG
  zh: '![图3.59 – 将管道作业提交到AML中运行](img/B18003_03_059.jpg)'
- en: Figure 3.59 – Submitting a pipeline job to run in AML
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.59 – 将管道作业提交到AML中运行
- en: 'To see the pipeline progress and details about each step of the pipeline, you
    can either click on the link shown in *Figure 3**.61* or click on the **Jobs**
    tab, which will show you a list of experiments, including **titanic_remote_cluster**,
    as shown in *Figure 3**.60*:'
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要查看管道进度和每个步骤的详细信息，你可以点击图*图3**.61*中显示的链接，或者点击**作业**选项卡，这将显示一个包含**titanic_remote_cluster**等实验的列表，如图*图3**.60*所示：
- en: '![Figure 3.60 – Submitting a pipeline job to run in AML ](img/B18003_03_060.jpg)'
  id: totrans-239
  prefs: []
  type: TYPE_IMG
  zh: '![图3.60 – 将管道作业提交到AML中运行](img/B18003_03_060.jpg)'
- en: Figure 3.60 – Submitting a pipeline job to run in AML
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.60 – 将管道作业提交到AML中运行
- en: 'Go ahead and click on the **titanic_remote_cluster** experiment to see a list
    of all the runs associated with this pipeline job. You should only see one run
    for this job, which we just ran in the notebook. Clicking on that will take you
    to a screen with a graphical representation of the pipeline, as shown in *Figure
    3**.61*:'
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**titanic_remote_cluster**实验，查看与该管道作业关联的所有运行的列表。你应该只看到这个作业的一个运行，这是我们刚刚在笔记本中运行的。点击它将带你去一个带有管道图形表示的屏幕，如图*图3**.61*所示：
- en: '![Figure 3.61 – Graphical view of an AML pipeline ](img/B18003_03_061.jpg)'
  id: totrans-242
  prefs: []
  type: TYPE_IMG
  zh: '![图3.61 – AML管道的图形视图](img/B18003_03_061.jpg)'
- en: Figure 3.61 – Graphical view of an AML pipeline
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.61 – AML管道的图形视图
- en: 'Go ahead and click on different steps of the pipeline to see detailed information
    regarding each step. For instance, by clicking on the **Train Titanic Survival
    Model** step, you can see model metrics such as accuracy, precision, and recall,
    as shown in *Figure 3**.62*:'
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击管道的不同步骤，查看每个步骤的详细信息。例如，通过点击**训练泰坦尼克号生存模型**步骤，你可以看到模型指标，如准确率、精确率和召回率，如图*图3**.62*所示：
- en: '![Figure 3.62 – Detailed view of pipeline steps ](img/B18003_03_062.jpg)'
  id: totrans-245
  prefs: []
  type: TYPE_IMG
  zh: '![图3.62 – 管道步骤的详细视图](img/B18003_03_062.jpg)'
- en: Figure 3.62 – Detailed view of pipeline steps
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.62 – 管道步骤的详细视图
- en: You have successfully trained a model and reviewed the metrics within your AML
    workspace using an AML compute cluster. Now, let’s review the chapter.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经成功训练了一个模型，并使用AML计算集群在你的AML工作区中查看了指标。现在，让我们回顾本章。
- en: Summary
  id: totrans-248
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: We have covered a lot of topics in this chapter. We have shown you how to train
    an ML model using the AML Designer, which requires no coding. It is a great fit
    for citizen data scientists or advanced data scientists who would like to explore
    different algorithms quickly and evaluate their performance without having to
    write a lot of code to do so. Next, you learned how to train an ML model through
    the AML Python SDK, running on both a compute instance and a compute cluster for
    more compute-intensive ML jobs.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本章中涵盖了大量的主题。我们向您展示了如何使用AML Designer训练一个机器学习模型，这不需要编写代码。这对于希望快速探索不同算法并评估其性能的公民数据科学家或高级数据科学家来说是一个很好的选择。接下来，您学习了如何通过AML
    Python SDK训练一个机器学习模型，该SDK可以在计算实例和计算集群上运行，以处理更计算密集型的机器学习任务。
- en: In the next chapter, you will learn how to tune hyperparameters for your ML
    models using AML HyperDrive.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将学习如何使用AML HyperDrive调整您的机器学习模型的超参数。
