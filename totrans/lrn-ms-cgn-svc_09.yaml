- en: Chapter 9. Adding Specialized Searches
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第九章：添加专业搜索
- en: The previous chapter explored the relationship between academic papers and journals,
    and we learned how to search for academic papers. This chapter moves on to the
    last of the top-level APIs, Search. In this chapter, we will learn how to search
    for web content. We will see how we can search for the latest news with certain
    keywords or categories. Further on, we will search for images and videos, and
    learn how to automatically suggest search queries for the end user. By the end
    of this chapter, we will be introduced to Bing Visual Search and find out how
    to create customized search experiences by using Bing Custom Search.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 上一章探讨了学术论文与期刊之间的关系，我们学习了如何搜索学术论文。本章将进入顶级 API 的最后一部分，即搜索。在本章中，我们将学习如何搜索网络内容。我们将看到如何使用特定关键词或类别搜索最新新闻。进一步地，我们将搜索图片和视频，并学习如何自动为最终用户建议搜索查询。在本章结束时，我们将介绍
    Bing Visual Search，并了解如何通过使用 Bing Custom Search 创建定制的搜索体验。
- en: 'In this chapter, we will learn about the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习以下主题：
- en: How to search for web pages and documents
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何搜索网页和文档
- en: How to search for news articles
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何搜索新闻文章
- en: How to search for images and videos
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何搜索图片和视频
- en: How to add autosuggestions in applications
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在应用程序中添加自动建议
- en: How to filter search results based on safe search policies
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何根据安全搜索策略过滤搜索结果
- en: Searching the web using the smart-house application
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用智能家居应用程序进行网络搜索
- en: The Bing Web Search API provides us with a search experience similar to what
    we find at [http://bing.com/search](http://bing.com/search). It returns results
    that are relevant to any queries.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Bing Web Search API 为我们提供了与我们在 [http://bing.com/search](http://bing.com/search)
    找到的类似搜索体验。它返回与任何查询相关的结果。
- en: A response for any request to this API will contain web pages, images, videos,
    and news articles. In a typical scenario, this is the API you would use for any
    of these searches.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 对此 API 的任何请求的响应将包含网页、图片、视频和新闻文章。在典型场景中，这是您用于这些搜索的 API。
- en: Note that, in a real-life scenario, all requests should be made from a server-side
    application, not from a client, as we do in this example.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在实际场景中，所有请求都应该从服务器端应用程序发出，而不是从客户端，就像我们在示例中所做的那样。
- en: Note
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you have not already done so, sign up for the Bing Web Search API at [https://portal.azure.com](https://portal.azure.com).
    You can read more on the API at [https://azure.microsoft.com/en-us/services/cognitive-services/bing-web-search-api/](https://azure.microsoft.com/en-us/services/cognitive-services/bing-web-search-api/).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您还没有这样做，请前往 [https://portal.azure.com](https://portal.azure.com) 注册 Bing Web
    Search API。您可以在 [https://azure.microsoft.com/en-us/services/cognitive-services/bing-web-search-api/](https://azure.microsoft.com/en-us/services/cognitive-services/bing-web-search-api/)
    了解更多关于 API 的信息。
- en: Preparing the application for web searches
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备应用程序进行网络搜索
- en: Before diving into the required technicalities for web searches, we are going
    to prepare our smart-house application.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入探讨网络搜索所需的技术细节之前，我们将准备我们的智能家居应用程序。
- en: Add a new View in the `Views` folder called `BingSearchView.xaml`. At the very
    least, this should contain two `Combobox` elements, one for the search type and
    one for the search filter. We need one `TextBox` element for our search query,
    as well as one `Button` element to execute the search. Finally, we need a `TextBox`
    element to display the search result.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `Views` 文件夹中添加一个名为 `BingSearchView.xaml` 的新视图。至少，它应该包含两个 `Combobox` 元素，一个用于搜索类型，一个用于搜索过滤器。我们需要一个
    `TextBox` 元素用于我们的搜索查询，以及一个 `Button` 元素来执行搜索。最后，我们需要一个 `TextBox` 元素来显示搜索结果。
- en: 'To accompany the search types and search filter, we need to add a new file,
    called `BingSearchTypes.cs`, in the `Model` folder. Add the following two `enums`:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 为了配合搜索类型和搜索过滤器，我们需要在 `Model` 文件夹中添加一个名为 `BingSearchTypes.cs` 的新文件。添加以下两个 `enum`：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Adding this allows us to use both the Bing Web Search and Bing News Search APIs.
    The latter will be discussed later. The second `enum`, `SafeSearch`, will also
    be discussed in more detail later.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 添加这一功能使我们能够同时使用 Bing Web Search 和 Bing News Search API。后者将在稍后讨论。第二个 `enum`，`SafeSearch`，也将在稍后进行更详细的讨论。
- en: We need a new ViewModel. Add a new file called `BingSearchViewModel.cs`, to
    the `ViewModels` folder. In this, we need to add two `string` properties for our
    search query and the search results. We will also need one property of type `BingSearchType`
    to represent the selected search type. Also needed is a property of type `SafeSearch`
    to represent the selected safe-search filter. An `ICommand` property is needed
    for our button.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要一个新视图模型。在 `ViewModels` 文件夹中添加一个名为 `BingSearchViewModel.cs` 的新文件。在这里，我们需要为我们的搜索查询和搜索结果添加两个
    `string` 属性。我们还需要一个 `BingSearchType` 类型的属性来表示选定的搜索类型。还需要一个 `SafeSearch` 类型的属性来表示选定的安全搜索过滤器。还需要一个
    `ICommand` 属性用于我们的按钮。
- en: 'In addition, we need to be able to display the values from the previously created
    `SafeSearch enums`. This can be achieved by adding the following properties:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还需要能够显示之前创建的 `SafeSearch enums` 的值。这可以通过添加以下属性来实现：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We get all the values from each `enum`, and return them as an `IEnumerable`.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从每个 `enum` 中获取所有值，并将它们作为 `IEnumerable` 返回。
- en: At the time of writing, none of the search APIs have any NuGet client packages,
    so we need to make the web requests ourselves. Copy the `WebRequest.cs` file we
    used in earlier chapters into the `Model` folder. Rename the file `BingWebRequest.cs`
    and the class `BingWebRequest`.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写本文档时，没有任何搜索 API 有任何 NuGet 客户端包，因此我们需要自己进行网络请求。将我们在早期章节中使用的 `WebRequest.cs`
    文件复制到 `Model` 文件夹中。将文件重命名为 `BingWebRequest.cs` 并将类重命名为 `BingWebRequest`。
- en: 'As all API calls are `GET` requests, we can simplify this class a bit. Remove
    the URL parameter from the constructor, and remove the `_endpoint` member completely.
    Doing so allows us to simplify the `MakeRequest` function, as follows:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 由于所有 API 调用都是 `GET` 请求，我们可以稍微简化这个类。从构造函数中移除 URL 参数，并完全移除 `_endpoint` 成员。这样做可以简化
    `MakeRequest` 函数，如下所示：
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We do not need a request body, and have removed the `TRequest` and corresponding
    code. We have also hardcoded the HTTP method, and said that we will specify the
    complete URL endpoint when calling the function. The rest of the function should
    stay the same.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不需要请求体，并已移除 `TRequest` 和相应的代码。我们还硬编码了 HTTP 方法，并说明在调用函数时我们将指定完整的 URL 端点。函数的其余部分应保持不变。
- en: Note
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Remember to add references to `System.Web` and `System.Runtime.Serialization`.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 记得添加对 `System.Web` 和 `System.Runtime.Serialization` 的引用。
- en: With that in place, we can move on. Make sure that the code compiles and executes
    before continuing.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在此基础上，我们可以继续前进。在继续之前，请确保代码可以编译并执行。
- en: Searching the web
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 网络搜索
- en: To be able to use Bing Web Search, we need to create a new class. Add a new
    file called `BingSearch.cs`, to the `Model` folder.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 Bing Web Search，我们需要创建一个新的类。在 `Model` 文件夹中添加一个名为 `BingSearch.cs` 的新文件。
- en: 'We need to add a member of type `BingWebRequest`, which we will create in the
    constructor:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要添加一个 `BingWebRequest` 类型的成员，我们将在构造函数中创建它：
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Create a new function called `SearchWeb`. This should accept two parameters,
    a string for the search query and a `SafeSearch` parameter. The function should
    be marked as `async` and return a `Task<WebSearchResponse>`. `WebSearchResponse`
    is a data contract we will learn more about presently:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为 `SearchWeb` 的新函数。这个函数应该接受两个参数，一个用于搜索查询的字符串和一个 `SafeSearch` 参数。该函数应标记为
    `async` 并返回 `Task<WebSearchResponse>`。`WebSearchResponse` 是我们将要了解更多信息的数据合约：
- en: '[PRE4]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: First, we construct our endpoint, which points us to the web search service.
    We make sure that we specify the query, `q`, the `safeSearch` selection, and the
    market, `mkt`. The latter two will be discussed presently in this chapter.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们构建我们的端点，它指向网络搜索服务。我们确保指定查询 `q`、`safeSearch` 选择和区域 `mkt`。后两个将在本章中讨论。
- en: 'The only required parameter is the query string. This should not exceed a length
    of 1,500 characters. Other optional parameters are described in the following
    table:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一必需的参数是查询字符串。其长度不应超过 1,500 个字符。其他可选参数将在下表中描述：
- en: '| Parameter | Description |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| 参数 | 描述 |'
- en: '| --- | --- |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `responseFilter` | A **comma-delimited** list of the result types to include
    in the response. If not specified, results will contain all types. Legal values
    include `Computation`, `Images`, `News`, `RelatedSearches`, `SpellSuggestions`,
    `TimeZone`, `Videos`, and `WebPages`. |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| `responseFilter` | 要包含在响应中的结果类型的逗号分隔列表。如果未指定，结果将包含所有类型。合法值包括 `Computation`、`Images`、`News`、`RelatedSearches`、`SpellSuggestions`、`TimeZone`、`Videos`
    和 `WebPages`。 |'
- en: '| `setLang` | A two-letter language code to specify the language for user interface
    strings. |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| `setLang` | 用于指定用户界面字符串的语言的两字母代码。 |'
- en: '| `textDecorations` | Specifies whether or not the query term is highlighted
    in the results. Defaults to false. |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| `textDecorations` | 指定查询词是否在结果中突出显示。默认为false。|'
- en: '| `textFormat` | The type of formatting to apply to display strings. Can be
    either raw or HTML, with raw being the default. |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| `textFormat` | 要应用于显示字符串的格式类型。可以是原始的或HTML，默认为原始。|'
- en: There are a few more parameters apart from these ones. They are, however, common
    to all searches and will be discussed at the end of this chapter.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这些参数之外，还有一些其他参数。然而，它们对所有搜索都是通用的，将在本章末尾讨论。
- en: 'With the endpoint in place, we can move on:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在端点就绪后，我们可以继续：
- en: '[PRE5]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: With the newly constructed endpoint, we call `MakeRequest` on the `_webRequest`
    object. We specify the API key and endpoint as parameters to this call, and we
    expect a `WebSearchResponse` object as a response.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 使用新构建的端点，我们在`_webRequest`对象上调用`MakeRequest`。我们将API密钥和端点作为此调用的参数，并期望得到一个`WebSearchResponse`对象作为响应。
- en: '`WebSearchResponse` is a data contract, which we get by deserializing the JSON
    response from the API service. The top-level object will contain objects with
    the different result types. Look in the code samples provided in the file called
    `BingSearchResponse.cs` for a complete data contract.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`WebSearchResponse`是一个数据合约，我们通过反序列化API服务的JSON响应来获取。顶层对象将包含不同结果类型的对象。请查看名为`BingSearchResponse.cs`的文件中提供的代码示例，以获取完整的数据合约。'
- en: Note
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For a complete list of response objects from Bing Web Search, visit [https://msdn.microsoft.com/en-us/library/dn760794.aspx#searchresponse](https://msdn.microsoft.com/en-us/library/dn760794.aspx#searchresponse).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取Bing网络搜索的完整响应对象列表，请访问[https://msdn.microsoft.com/en-us/library/dn760794.aspx#searchresponse](https://msdn.microsoft.com/en-us/library/dn760794.aspx#searchresponse)。
- en: 'Heading back to the `BingSearchViewModel.cs` file, we can add `BingSearch`
    as a member. The constructor should look as follows:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 返回到`BingSearchViewModel.cs`文件，我们可以添加`BingSearch`作为成员。构造函数应如下所示：
- en: '[PRE6]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The `CanSearch` parameter should return true if we have any text entered into
    the search query text field. `Search` should, for now, look as follows:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`CanSearch`参数应返回true，如果我们已经在搜索查询文本字段中输入了任何文本。`Search`目前应如下所示：'
- en: '[PRE7]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We call the `SearchWeb` function on the `_bingSearch` object, passing on the
    `SearchQuery` and `SelectedSafeSearchFilter` properties as parameters. With a
    successful response, we send the response to a new function, `ParseWebSearch`:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在`_bingSearch`对象上调用`SearchWeb`函数，将`SearchQuery`和`SelectedSafeSearchFilter`属性作为参数传递。在成功响应后，我们将响应发送到新函数`ParseWebSearch`：
- en: '[PRE8]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: When we interpret the results from a web search, we are interested in the resulting
    `webPages`. For each web page, we want to output the name, the display URL, and
    a descriptive snippet.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们解释网络搜索的结果时，我们对结果中的`webPages`感兴趣。对于每个网页，我们希望输出名称、显示URL和描述性摘要。
- en: 'A successful test run with the web search should present us with the following
    result:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 网络搜索的成功测试运行应向我们展示以下结果：
- en: '![Searching the web](img/B12373_09_01.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![在网络上搜索](img/B12373_09_01.jpg)'
- en: Result objects from a web search contain a `RankingResponse` object. This will
    identify how the results will typically be displayed on a search website, ordered
    in a mainline and sidebar. In a production system, you should always aim to display
    results in the order specified by `RankingResponse`.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 来自网络搜索的结果对象包含一个`RankingResponse`对象。这将标识结果通常如何在搜索网站上显示，按主线和侧边栏排序。在生产系统中，你应该始终旨在按`RankingResponse`指定的顺序显示结果。
- en: This can be done in two ways. One is to use the specified ID field to rank all
    of the results. The other way is a bit more complex. It involves splitting the
    results based on answer types and the result index.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以通过两种方式完成。一种是通过指定的ID字段对所有结果进行排名。另一种方式稍微复杂一些。它涉及根据答案类型和结果索引拆分结果。
- en: Apart from the queries we have seen up to now, we can also query for computations
    (for instance, 2 + 2), time zone calculations, and related searches. These queries
    will result in JSON responses, which is a bit different from a regular web search.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 除了我们迄今为止看到的查询之外，我们还可以查询计算（例如，2 + 2）、时区计算和相关搜索。这些查询将产生JSON响应，这与常规网络搜索略有不同。
- en: Getting the news
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取新闻
- en: 'Using the Bing News Search API, we can search for news in several ways. There
    are three endpoints we can use for this API:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Bing新闻搜索API，我们可以以几种方式搜索新闻。我们可以使用此API的三个端点：
- en: '`/news`: Get top news articles, based on category'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/news`：根据类别获取顶级新闻文章'
- en: '`/news/search`: Get news articles based on a search query'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/news/search`：根据搜索查询获取新闻文章'
- en: '`/news/trendingtopics`: Get top trending news topics'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/news/trendingtopics`：获取顶级趋势新闻主题'
- en: In our smart-house application, we will add the first two, while we will only
    cover the last one theoretically.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的智能屋应用中，我们将添加前两个，而我们将只理论性地涵盖最后一个。
- en: Note
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you have not already done so, sign up for the Bing News Search API at [https://portal.azure.com](https://portal.azure.com).
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您还没有这样做，请前往[https://portal.azure.com](https://portal.azure.com)注册Bing新闻搜索API。
- en: News from queries
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 来自查询的新闻
- en: A lot of the groundwork for query-based news searches has already been done
    in the web search sample. To search for news based on given queries, we need to
    add a new function in the `BingSearch` class.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 基于查询的新闻搜索的大部分基础工作已经在网络搜索示例中完成。为了根据给定的查询搜索新闻，我们需要在`BingSearch`类中添加一个新函数。
- en: 'Open the `BingSearch.cs` file and add a new function called `SearchNews`. This
    should accept a `string` and a `SafeSearch` parameter. The function should be
    marked as `async`, and return a `Task<BingNewsResponse>` object:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`BingSearch.cs`文件并添加一个名为`SearchNews`的新函数。这个函数应该接受一个`string`和一个`SafeSearch`参数。该函数应标记为`async`，并返回一个`Task<BingNewsResponse>`对象：
- en: '[PRE9]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: We will construct an endpoint consisting of the URL, the search query, and the
    `safeSearch` parameter. Notice how we specify the market, `mkt`, while limiting
    the `count` to 5\. Both of these parameters will be described presently in this
    chapter.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将构建一个由URL、搜索查询和`safeSearch`参数组成的端点。注意我们如何指定市场，`mkt`，同时将`count`限制为5。这两个参数将在本章中详细描述。
- en: The only required parameter is the query string, `q`. Apart from parameters
    described for web searches (`setLang`, `textDecorations`, and `textFormat`), we
    can also specify a parameter called `originalImg`. This is a Boolean value, which,
    if set to true, will provide a URL to the original image (for any image in the
    article). If that is set to false, which is the default, a URL for the thumbnail
    is provided.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们唯一需要的参数是查询字符串，`q`。除了为网络搜索描述的参数（`setLang`、`textDecorations`和`textFormat`）之外，我们还可以指定一个名为`originalImg`的参数。这是一个布尔值，如果设置为true，将提供一个指向原始图片的URL（对于文章中的任何图片）。如果设置为false，默认值，将提供一个缩略图的URL。
- en: 'With an endpoint in place, we can call the API:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在设置好端点后，我们可以调用API：
- en: '[PRE10]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: We call `MakeRequest`, on the `_webRequest` object, passing on the endpoint
    as a parameter.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在`_webRequest`对象上调用`MakeRequest`，将端点作为参数传递。
- en: A successful call will result in a JSON response, which we deserialize into
    a `BingNewsResponse` object. This object needs to be created as a data contract.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 成功的调用将导致一个JSON响应，我们将将其反序列化为一个`BingNewsResponse`对象。这个对象需要作为一个数据合同来创建。
- en: The `BingNewsResponse` object will contain an array of news articles. Each item
    in this array will contain the article name, URL, image, description, publishing
    date, and more.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`BingNewsResponse`对象将包含一个新闻文章数组。这个数组中的每个项目将包含文章名称、URL、图片、描述、发布日期等。'
- en: Note
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For full details of each item in the news article array, visit [https://msdn.microsoft.com/en-us/library/dn760793.aspx#newsarticle](https://msdn.microsoft.com/en-us/library/dn760793.aspx#newsarticle).
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解新闻文章数组中每个项目的详细信息，请访问[https://msdn.microsoft.com/en-us/library/dn760793.aspx#newsarticle](https://msdn.microsoft.com/en-us/library/dn760793.aspx#newsarticle)。
- en: 'With that in place, we can head back into the `BingSearchViewModel.cs` file
    and modify the `Search` function. We do so by adding a case for `BingSearchType.News`
    inside the `switch` statement:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在此基础上，我们可以回到`BingSearchViewModel.cs`文件并修改`Search`函数。我们通过在`switch`语句中添加对`BingSearchType.News`的case来实现这一点：
- en: '[PRE11]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'A successful response will be parsed and displayed in the UI:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 成功的响应将被解析并显示在UI上：
- en: '[PRE12]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: We are mostly interested in the news article name, the date it is published,
    and a description.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们主要对新闻文章的名称、发布日期和描述感兴趣。
- en: 'A good test run of this should present us with the following result:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这次的良好测试运行应该给我们以下结果：
- en: '![News from queries](img/B12373_09_02.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![来自查询的新闻](img/B12373_09_02.jpg)'
- en: News from categories
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 来自类别的新闻
- en: When we want to get the top articles for certain categories, we go through a
    similar procedure as we did for regular news queries. The difference lies in the
    endpoint we construct.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们想要获取特定类别的顶级文章时，我们将执行与常规新闻查询类似的程序。区别在于我们构建的端点。
- en: 'Let''s create a new function, `SearchNewsCategory`, in the `BingSearch` class:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在`BingSearch`类中创建一个新函数，名为`SearchNewsCategory`：
- en: '[PRE13]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Here, we have a category parameter, with the topic we wish to search for. This
    is an optional parameter. If it is empty, we will get the top news article for
    all categories.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们有一个类别参数，包含我们希望搜索的主题。这是一个可选参数。如果它是空的，我们将获取所有类别的顶级新闻文章。
- en: 'For this search, we can specify two different markets, `en-GB` and `en-US`.
    Each of these comes with a list of pre-defined categories that are currently supported:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这次搜索，我们可以指定两个不同的市场，`en-GB` 和 `en-US`。每个市场都附带一个当前支持的预定义类别列表：
- en: Note
  id: totrans-98
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For a complete list of supported categories, visit [https://msdn.microsoft.com/en-us/library/dn760793.aspx#categoriesbymarket](https://msdn.microsoft.com/en-us/library/dn760793.aspx#categoriesbymarket).
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取支持的类别完整列表，请访问 [https://msdn.microsoft.com/en-us/library/dn760793.aspx#categoriesbymarket](https://msdn.microsoft.com/en-us/library/dn760793.aspx#categoriesbymarket)。
- en: '[PRE14]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: With the newly constructed endpoint, we call `MakeRequest` on the `_webRequest`
    object. This should result in the same response object as for regular news queries.
    In our ViewModel, we add a `case` for this search type in the `Search` function.
    With the response, we utilize the already created `ParseNewsResponse` to get the
    data we want.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 使用新构建的端点，我们在 `_webRequest` 对象上调用 `MakeRequest`。这应该会产生与常规新闻查询相同的响应对象。在我们的ViewModel中，我们在
    `Search` 函数中添加了对这种搜索类型的 `case`。有了响应，我们利用已经创建的 `ParseNewsResponse` 来获取我们想要的数据。
- en: Trending news
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 趋势新闻
- en: 'The search for trending news is only available for the `en-US` and `zh-CN`
    markets. To execute this search, make a request to the following URL: [https://api.cognitive.microsoft.com/bing/v7.0/news/trendingtopics](https://api.cognitive.microsoft.com/bing/v7.0/news/trendingtopics).'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 趋势新闻的搜索仅适用于 `en-US` 和 `zh-CN` 市场。要执行此搜索，请向以下URL发出请求：[https://api.cognitive.microsoft.com/bing/v7.0/news/trendingtopics](https://api.cognitive.microsoft.com/bing/v7.0/news/trendingtopics)。
- en: No parameters are required by this call, but you can add filters, such as the
    common filters we will discuss later. The only exception is the `freshness` filter,
    which will not work for this request.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 此调用不需要任何参数，但您可以添加过滤器，例如我们稍后将要讨论的常用过滤器。唯一的例外是 `freshness` 过滤器，它不会适用于此请求。
- en: 'A successful call to this endpoint will result in a `TrendingTopicAnswer` object
    that will contain an array of trending topics. Each item in this array will contain
    the following data:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 成功调用此端点将返回一个包含趋势话题数组的 `TrendingTopicAnswer` 对象。数组中的每个项目将包含以下数据：
- en: '| Data field | Description |'
  id: totrans-106
  prefs: []
  type: TYPE_TB
  zh: '| 数据字段 | 描述 |'
- en: '| --- | --- |'
  id: totrans-107
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `image` | A link to a related image |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
  zh: '| `image` | 一个指向相关图片的链接 |'
- en: '| `isBreakingNews` | A Boolean indicating whether this topic is considered
    breaking news |'
  id: totrans-109
  prefs: []
  type: TYPE_TB
  zh: '| `isBreakingNews` | 一个布尔值，表示此主题是否被视为突发新闻 |'
- en: '| `name` | The title of the topic |'
  id: totrans-110
  prefs: []
  type: TYPE_TB
  zh: '| `name` | 主题的标题 |'
- en: '| `query` | A query string that will return this topic |'
  id: totrans-111
  prefs: []
  type: TYPE_TB
  zh: '| `query` | 一个查询字符串，将返回此主题 |'
- en: '| `webSearchUrl` | A URL to the Bing search results for this topic |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
  zh: '| `webSearchUrl` | 一个指向此主题Bing搜索结果的URL |'
- en: '| `webSearchUrlPingSuffix` | A query string fragment to identify the `webSearchUrl`
    |'
  id: totrans-113
  prefs: []
  type: TYPE_TB
  zh: '| `webSearchUrlPingSuffix` | 一个用于识别 `webSearchUrl` 的查询字符串片段 |'
- en: Searching for images and videos
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 搜索图片和视频
- en: The Bing Image Search API and Bing Video Search API allow us to search directly
    for images or videos. These APIs should be used only if you need image or video
    content. There is a possibility that calling these APIs will affect performance
    and relevance negatively, and as such, one should aim to use the Bing Web Search
    API.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: Bing图片搜索API和Bing视频搜索API允许我们直接搜索图片或视频。只有在您需要图片或视频内容时才应使用这些API。有可能调用这些API会对性能和相关性产生负面影响，因此，我们应该尽量使用Bing网络搜索API。
- en: Note
  id: totrans-116
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you have not already done so, sign up for the Bing Image Search API and the
    Bing Video Search API at [https://portal.azure.com](https://portal.azure.com).
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您尚未这样做，请在 [https://portal.azure.com](https://portal.azure.com) 为Bing图片搜索API和Bing视频搜索API注册。
- en: Using a common user interface
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用常见的用户界面
- en: As we do not need image or video search in our smart-house application, we will
    go on to create a new project. Create this project using the MVVM template that
    we created in [Chapter 1](ch01.html "Chapter 1. Getting Started with Microsoft
    Cognitive Services"), *Getting Started with Microsoft Cognitive Services*.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 由于在我们的智能屋应用程序中不需要图片或视频搜索，我们将继续创建一个新的项目。使用我们在 [第1章](ch01.html "第1章。使用Microsoft认知服务入门")
    中创建的MVVM模板来创建此项目，*使用Microsoft认知服务入门*。
- en: These APIs do not come with any client packages. Like we did previously, we
    should really make these calls from the server-side application not the client
    application. In any case, we need to copy the `BingWebRequest.cs` file from the
    smart-house application to the `Model` folder. Make sure to change the namespace.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 这些API没有提供任何客户端包。像我们之前做的那样，我们应该真正从服务器端应用程序而不是客户端应用程序中进行这些调用。在任何情况下，我们需要将智能屋应用程序中的
    `BingWebRequest.cs` 文件复制到 `Model` 文件夹。确保更改命名空间。
- en: Note
  id: totrans-121
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Remember to add references to `System.Web` and `System.Runtime.Serialization`.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 记得添加对`System.Web`和`System.Runtime.Serialization`的引用。
- en: We will need to install the `Newtonsoft.Json` NuGet package for our deserialization
    to work. Do so through the NuGet package manager.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要安装`Newtonsoft.Json` NuGet包以使我们的反序列化工作。通过NuGet包管理器进行安装。
- en: As we will output some of the results as text, we can get away with one common
    user interface.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们将输出一些结果作为文本，我们可以使用一个通用的用户界面。
- en: Open the `MainView.xaml` file. Add two `TextBox` elements, one for the search
    query and one for the result. We need a `ComboBox` element to select between search
    types. Finally, we need to add a `Button` element for our search command.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`MainView.xaml`文件。添加两个`TextBox`元素，一个用于搜索查询，一个用于结果。我们需要一个`ComboBox`元素来选择搜索类型。最后，我们需要添加一个`Button`元素用于搜索命令。
- en: 'In the `MainViewModel.xaml` file, we need to add an `enum` with the search
    types. Add the following at the bottom of the file, beneath the class:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在`MainViewModel.xaml`文件中，我们需要添加一个表示搜索类型的`enum`。在文件的底部添加以下内容，位于类下方：
- en: '[PRE15]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: We are only interested in image and video searches with queries. In addition
    to these search forms, both APIs can search for trending images and videos. The
    Bing Video Search API also allows us to get more detail on any given video we
    have already searched for.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只对基于查询的图像和视频搜索感兴趣。除了这些搜索形式，这两个API还可以搜索趋势图像和视频。必应视频搜索API还允许我们获取任何已搜索视频的更多详细信息。
- en: 'In the `MainViewModel` class, we need to add two `string` properties corresponding
    to our `TextBox` elements. We will also need a property of type `SearchType` to
    indicate the selected search type. To indicate what search types we have available,
    we add an `IEnumerable` property, as follows:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在`MainViewModel`类中，我们需要添加两个与我们的`TextBox`元素对应的`string`属性。我们还需要一个类型为`SearchType`的属性来指示选定的搜索类型。为了指示我们有哪些可用的搜索类型，我们添加一个`IEnumerable`属性，如下所示：
- en: '[PRE16]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The last property we need to add to our ViewModel is the `ICommand` property,
    which will be bound to our `Button` element.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要添加到我们的ViewModel中的最后一个属性是`ICommand`属性，它将被绑定到我们的`Button`元素。
- en: Now, we need to create a new class, so create a new file called `BingSearch.cs`,
    in the `Model` folder. This will be responsible for constructing the correct endpoints
    and executing both search types.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要创建一个新的类，因此创建一个名为`BingSearch.cs`的新文件，位于`Model`文件夹中。这将负责构建正确的端点并执行两种搜索类型。
- en: 'We will need to add a member of type `BingWebRequest`. This should be created
    in the constructor:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要添加一个类型为`BingWebRequest`的成员。这应该在构造函数中创建：
- en: '[PRE17]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: That is all we need to do here for now.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 目前我们在这里需要做的就这些。
- en: 'Back in the ViewModel, we need to add a member of type `BingSearch`. With that
    in place, we can create our constructor:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 回到ViewModel中，我们需要添加一个类型为`BingSearch`的成员。有了这个，我们可以创建我们的构造函数：
- en: '[PRE18]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: With the ViewModel in place, we can do some searches.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在ViewModel就绪后，我们可以进行一些搜索。
- en: Searching for images
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 搜索图像
- en: 'For our example, we will only be executing the image search based on user queries.
    To allow for this, we will need to add a function in the `BingSearch` class. Call
    the function `SearchImages` and let it accept a string as a parameter. The function
    should return `Task<ImageSearchResponse>` and be marked as `async`. `ImageSearchResponse`
    will, in this case, be a data contract object, with data deserialized from our
    response:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的示例，我们只将执行基于用户查询的图像搜索。为了允许这样做，我们需要在`BingSearch`类中添加一个函数。将函数命名为`SearchImages`，并让它接受一个字符串作为参数。该函数应返回`Task<ImageSearchResponse>`并标记为`async`。在这种情况下，`ImageSearchResponse`将是一个数据合同对象，数据是从我们的响应反序列化而来的：
- en: '[PRE19]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: We will start by constructing our endpoint. In this case, we only specify the
    query parameter, `q`. This is a required parameter.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先构建我们的端点。在这种情况下，我们只指定查询参数，`q`。这是一个必需的参数。
- en: 'Apart from the common query parameters, which we will see presently, we can
    also add the following parameters:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 除了我们即将看到的通用查询参数之外，我们还可以添加以下参数：
- en: '| Parameter | Description |'
  id: totrans-144
  prefs: []
  type: TYPE_TB
  zh: '| 参数 | 描述 |'
- en: '| --- | --- |'
  id: totrans-145
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `cab` | Bottom coordinate of the region to crop, in a value from 0.0 to 1.0\.
    Measured from the top-left corner. |'
  id: totrans-146
  prefs: []
  type: TYPE_TB
  zh: '| `cab` | 裁剪区域的底部坐标，取值范围从0.0到1.0。从左上角开始测量。 |'
- en: '| `cal` | The left coordinate of the region to crop, in a value from 0.0 to
    1.0. |'
  id: totrans-147
  prefs: []
  type: TYPE_TB
  zh: '| `cal` | 裁剪区域的左坐标，取值范围从0.0到1.0。 |'
- en: '| `car` | The right coordinate of the region to crop, in a value from 0.0 to
    1.0. |'
  id: totrans-148
  prefs: []
  type: TYPE_TB
  zh: '| `car` | 裁剪区域的右坐标，取值范围从0.0到1.0。 |'
- en: '| `cat` | The top coordinate of the region to crop, in a value from 0.0 to
    1.0. |'
  id: totrans-149
  prefs: []
  type: TYPE_TB
  zh: '| `cat` | 裁剪区域的顶部坐标，取值范围从0.0到1.0。 |'
- en: '| `ct` | The crop type to use. Currently, the only legal value is 0 - Rectangular.
    |'
  id: totrans-150
  prefs: []
  type: TYPE_TB
  zh: '| `ct` | 要使用的裁剪类型。目前，唯一合法的值是 0 - 矩形。|'
- en: 'In addition, we can specify the following parameters as filters:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们可以指定以下参数作为过滤器：
- en: '| Filter name | Description |'
  id: totrans-152
  prefs: []
  type: TYPE_TB
  zh: '| 过滤名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-153
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `aspect` | Filter images by aspect ratio. Legal values are `Square`, `Wide`,
    `Tall`, and `All`. |'
  id: totrans-154
  prefs: []
  type: TYPE_TB
  zh: '| `aspect` | 通过宽高比过滤图像。合法值有 `Square`、`Wide`、`Tall` 和 `All`。|'
- en: '| `color` | Filter images by specific colors. |'
  id: totrans-155
  prefs: []
  type: TYPE_TB
  zh: '| `color` | 通过特定颜色过滤图像。|'
- en: '| `imageContent` | Filter images by image content. Legal values are `Face`
    and `Portrait`. |'
  id: totrans-156
  prefs: []
  type: TYPE_TB
  zh: '| `imageContent` | 通过图像内容过滤图像。合法值有 `Face` 和 `Portrait`。|'
- en: '| `imageType` | Filter images by image types. Legal values are `AnimatedGif`,
    `Clipart`, `Line`, `Photo`, and `Shopping`. |'
  id: totrans-157
  prefs: []
  type: TYPE_TB
  zh: '| `imageType` | 通过图像类型过滤图像。合法值有 `AnimatedGif`、`Clipart`、`Line`、`Photo` 和 `Shopping`。|'
- en: '| `license` | Filter images by license that apply to the image. Legal values
    are `Public`, `Share`, `ShareCommercially`, `Modify`, `ModifyCommercially`, and
    `All`. |'
  id: totrans-158
  prefs: []
  type: TYPE_TB
  zh: '| `license` | 通过适用于图像的许可证过滤图像。合法值有 `Public`、`Share`、`ShareCommercially`、`Modify`、`ModifyCommercially`
    和 `All`。|'
- en: '| `size` | Filter images by size. Legal values are `Small` (< 200 x 200 pixels),
    `Medium` (200 x 200 to 500 x 500 pixels), `Large` (>500 x 500 pixels), `Wallpaper`,
    and `All`. |'
  id: totrans-159
  prefs: []
  type: TYPE_TB
  zh: '| `size` | 通过大小过滤图像。合法值有 `Small`（< 200 x 200像素）、`Medium`（200 x 200到500 x 500像素）、`Large`（>500
    x 500像素）、`Wallpaper` 和 `All`。|'
- en: '| `height` | Only get results with a specific height. |'
  id: totrans-160
  prefs: []
  type: TYPE_TB
  zh: '| `height` | 仅获取具有特定高度的图像。|'
- en: '| `width` | Only get results with a specific width. |'
  id: totrans-161
  prefs: []
  type: TYPE_TB
  zh: '| `width` | 仅获取具有特定宽度的结果。|'
- en: 'With the endpoint in place, we can execute the request:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 确定了端点后，我们可以执行请求：
- en: '[PRE20]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: We will call `MakeRequest` on the `_webRequest` object, passing on the endpoint
    as a parameter. A successful call will result in an `ImageSearchResponse`, which
    is the deserialized data contract object from the JSON response.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在 `_webRequest` 对象上调用 `MakeRequest`，并将端点作为参数传递。成功的调用将导致 `ImageSearchResponse`，这是从JSON响应反序列化的数据合同对象。
- en: The resulting object will contain a lot of data. Among that data is an array
    that contains information about images. Each item in that array contains data,
    such as an image name, date published, URL, and image ID.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 结果对象将包含大量数据。其中之一是一个包含图像信息的数组。该数组中的每个项目都包含数据，例如图像名称、发布日期、URL 和图像ID。
- en: Note
  id: totrans-166
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For a complete list of the data available in a response, visit [https://msdn.microsoft.com/en-us/library/dn760791.aspx#images](https://msdn.microsoft.com/en-us/library/dn760791.aspx#images).
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看响应中可用的完整数据列表，请访问 [https://msdn.microsoft.com/en-us/library/dn760791.aspx#images](https://msdn.microsoft.com/en-us/library/dn760791.aspx#images)。
- en: 'Heading over to `MainViewModel.cs`, we can now create the `Search` function:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 转到 `MainViewModel.cs`，我们现在可以创建 `Search` 函数：
- en: '[PRE21]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'With a successful response, we parse the `imageResponse`. Normally, this would
    mean displaying images in a list or similar, but we will take the easier option
    by outputting textual information:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 在成功响应后，我们将解析 `imageResponse`。通常，这意味着在列表或类似的地方显示图像，但我们将选择更简单的方法，通过输出文本信息：
- en: '[PRE22]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: We will print out the number of matches in the search. Then, we will loop through
    the image array, printing the name, size, host, and URL of each image.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将打印出搜索结果的数量。然后，我们将遍历图像数组，打印出每张图像的名称、大小、主机和URL。
- en: 'A successful test run should present us with the following screen:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 成功的测试运行应显示以下屏幕：
- en: '![Searching for images](img/B12373_09_03.jpg)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![搜索图像](img/B12373_09_03.jpg)'
- en: 'In addition to the query-based image search, we can also search for trending
    images. To do so, you will have to call the following endpoint: [https://api.cognitive.microsoft.com/bing/v7.0/images/trending](https://api.cognitive.microsoft.com/bing/v7.0/images/trending).'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 除了基于查询的图像搜索外，我们还可以搜索趋势图像。为此，您必须调用以下端点：[https://api.cognitive.microsoft.com/bing/v7.0/images/trending](https://api.cognitive.microsoft.com/bing/v7.0/images/trending)。
- en: 'Currently, this is only available for the following markets: `en-US`, `en-CA`,
    and `en-AU`. A successful call to this endpoint will result in an array of categories.
    Each item in this array will contain an array of trending images, as well as the
    title of the category.'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，此功能仅适用于以下市场：`en-US`、`en-CA` 和 `en-AU`。对端点的成功调用将导致一个包含类别的数组。该数组中的每个项目将包含一个趋势图像数组以及类别的标题。
- en: Searching for videos
  id: totrans-177
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 搜索视频
- en: Searching for videos is nearly the same process as for images. The only real
    difference is how we construct the endpoint and the response we get.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 搜索视频的过程几乎与搜索图像相同。唯一的真正区别是我们如何构建端点以及我们得到的响应。
- en: 'We are going to add a new function in the `BingSearch` class to accompany a
    video search:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在`BingSearch`类中添加一个新功能，以配合视频搜索：
- en: '[PRE23]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'As you can see, there is only one required parameter: the query string, `q`.
    We can also specify a few optional parameters that are common to all the search
    APIs, which will be described later.'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，只有一个必需的参数：查询字符串，`q`。我们还可以指定一些对所有搜索API都通用的可选参数，这些参数将在后面进行描述。
- en: 'Aside from common filters, video can also filter results based on the following
    filters:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 除了常见的筛选器之外，视频还可以根据以下筛选器进行筛选：
- en: '| Filter | Description |'
  id: totrans-183
  prefs: []
  type: TYPE_TB
  zh: '| 筛选器 | 描述 |'
- en: '| --- | --- |'
  id: totrans-184
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `pricing` | Filter videos by price. Legal values are Free, Paid, and All.
    |'
  id: totrans-185
  prefs: []
  type: TYPE_TB
  zh: '| `pricing` | 通过价格筛选视频。合法值是Free、Paid和All。 |'
- en: '| `resolution` | Filter by resolution. Legal values are 480p, 720p, 1080p,
    and All. |'
  id: totrans-186
  prefs: []
  type: TYPE_TB
  zh: '| `resolution` | 通过分辨率进行筛选。合法值是480p、720p、1080p和All。 |'
- en: '| `videoLength` | Filter videos by length. Legal values is `Short` (< 5 minutes),
    `Medium` (5 to 20 minutes), `Long` (> 20 minutes), and `All`. |'
  id: totrans-187
  prefs: []
  type: TYPE_TB
  zh: '| `videoLength` | 通过长度筛选视频。合法值是`Short`（< 5分钟）、`Medium`（5到20分钟）、`Long`（> 20分钟）和`All`。
    |'
- en: 'With the endpoint in place, we call the API:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 在端点就绪后，我们调用API：
- en: '[PRE24]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: We will call `MakeRequest` on the `_webRequest` object, passing on the endpoint
    as a parameter. A successful call will result in a `VideoSearchResponse` object.
    This is a data contract, deserialized from the JSON response.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在`_webRequest`对象上调用`MakeRequest`，并将端点作为参数传递。成功的调用将产生一个`VideoSearchResponse`对象。这是一个数据合约，从JSON响应反序列化而来。
- en: Among other data, it will contain an array of videos. Each item in this array
    contains a video name, description, publisher, duration, URL, and more.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 除了其他数据外，它将包含一个视频数组。数组中的每个项目都包含视频名称、描述、发布者、时长、URL等更多信息。
- en: Note
  id: totrans-192
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For a complete list of data available in the search response, visit [https://msdn.microsoft.com/en-US/library/dn760795.aspx#videos](https://msdn.microsoft.com/en-US/library/dn760795.aspx#videos).
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取搜索响应中可用的完整数据列表，请访问[https://msdn.microsoft.com/en-US/library/dn760795.aspx#videos](https://msdn.microsoft.com/en-US/library/dn760795.aspx#videos)。
- en: 'To be able to search for videos, we add a new case in the `Search` function,
    in `MainViewModel`:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 为了能够搜索视频，我们在`MainViewModel`的`Search`函数中添加了一个新情况：
- en: '[PRE25]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'We call the newly created `SearchVideos`, passing on the search query as a
    parameter. If the call succeeds, we go on to parse the video:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 我们调用新创建的`SearchVideos`，并将搜索查询作为参数传递。如果调用成功，我们将继续解析视频：
- en: '[PRE26]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: As for images, we just show video information textually. In our example, we
    choose to show the video name, duration, URL, and all publishers of a video.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 至于图像，我们只是以文本形式显示视频信息。在我们的示例中，我们选择显示视频名称、时长、URL和视频的所有发布者。
- en: 'A successful video search should give the following result:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 成功的视频搜索应该给出以下结果：
- en: '![Searching for videos](img/B12373_09_04.jpg)'
  id: totrans-200
  prefs: []
  type: TYPE_IMG
  zh: '![搜索视频](img/B12373_09_04.jpg)'
- en: 'In addition to the query-based video search, we can also search for trending
    videos. To do so, you would have to call the following endpoint: [https://api.cognitive.microsoft.com/bing/v7.0/videos/trending](https://api.cognitive.microsoft.com/bing/v7.0/videos/trending).'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 除了基于查询的视频搜索之外，我们还可以搜索热门视频。为此，您需要调用以下端点：[https://api.cognitive.microsoft.com/bing/v7.0/videos/trending](https://api.cognitive.microsoft.com/bing/v7.0/videos/trending)。
- en: 'Currently, this is only available for the following markets: `en-US`, `en-CA`,
    and `en-AU`. A successful call to this endpoint will result in an array of categories
    and tiles. Each item in the category array will contain a title and an array of
    subcategories. Each subcategory will contain an array of tiles and the title.
    Each item in a tile array will contain the video thumbnail and a query to use
    to get the specific video.'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，此功能仅适用于以下市场：`en-US`、`en-CA`和`en-AU`。成功调用此端点将产生一个包含类别和图标的数组。类别数组中的每个项目将包含一个标题和子类别的数组。每个子类别将包含图标的数组和标题。图标数组中的每个项目将包含视频缩略图和用于获取特定视频的查询。
- en: 'If we want to get more information about any video, we can query the following
    endpoint: [https://api.cognitive.microsoft.com/bing/v7.0/videos/details](https://api.cognitive.microsoft.com/bing/v7.0/videos/details).'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想获取任何视频的更多信息，我们可以查询以下端点：[https://api.cognitive.microsoft.com/bing/v7.0/videos/details](https://api.cognitive.microsoft.com/bing/v7.0/videos/details)。
- en: This requires us to specify an `id` so that we can identify a video. We can
    also specify the `modulesRequested`. This is a comma-separated list of the details
    we want. Currently, the legal values are `All`, `RelatedVideos`, and `VideoResult`.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 这需要我们指定一个`id`，以便我们可以识别视频。我们还可以指定`modulesRequested`。这是一个以逗号分隔的我们想要获取的详细信息列表。目前，合法值是`All`、`RelatedVideos`和`VideoResult`。
- en: Note
  id: totrans-205
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For a complete list of data available in the response from a details query,
    visit [https://msdn.microsoft.com/en-US/library/dn760795.aspx#video](https://msdn.microsoft.com/en-US/library/dn760795.aspx#video).
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取详细查询响应中可用的完整数据列表，请访问[https://msdn.microsoft.com/en-US/library/dn760795.aspx#video](https://msdn.microsoft.com/en-US/library/dn760795.aspx#video)。
- en: Helping the user with autosuggestions
  id: totrans-207
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用自动建议帮助用户
- en: Autosuggestions are a great way to enhance user experience. The typical use
    case is where, whenever a user enters some text into a text field, a list of suggested
    words is displayed.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 自动建议是增强用户体验的绝佳方式。典型的用例是，每当用户在文本字段中输入一些文本时，都会显示一个建议词列表。
- en: Note
  id: totrans-209
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you have not already done so, sign up for the Bing Autosuggest API at [https://portal.azure.com](https://portal.azure.com).
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您还没有这样做，请前往[https://portal.azure.com](https://portal.azure.com)注册Bing Autosuggest
    API。
- en: Adding autosuggest to the user interface
  id: totrans-211
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将自动建议添加到用户界面
- en: As textboxes in WPF do not contain any autosuggestion features, we need to add
    some on our own. We are going to use a third-party package, so install the `WPFTextBoxAutoComplete`
    package through the NuGet package manager, in our example project.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 由于WPF中的文本框不包含任何自动建议功能，我们需要自己添加一些。我们将使用第三方包，因此通过NuGet包管理器在我们的示例项目中安装`WPFTextBoxAutoComplete`包。
- en: 'In the `MainView.xaml` file, add the following attribute to the starting `Window`
    tag:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 在`MainView.xaml`文件中，将以下属性添加到起始`Window`标签：
- en: 'We will also need to make sure that the `TextBox` binding for our search query
    updates whenever the user enters data. This can be done by making sure that the
    `Text` attribute looks as follows:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要确保当用户输入数据时，我们的搜索查询的`TextBox`绑定会更新。这可以通过确保`Text`属性看起来如下完成：
- en: '[PRE27]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'In the same `TextBox` element, add the following:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 在相同的`TextBox`元素中，添加以下内容：
- en: '[PRE28]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: In the ViewModel, in the `MainViewModel.cs` file, we need the corresponding
    property. This should be an `IEnumerable<string>` object. This will be updated
    with the result from the autosuggest query we will perform presently.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 在ViewModel中，在`MainViewModel.cs`文件中，我们需要相应的属性。这应该是一个`IEnumerable<string>`对象。它将使用我们即将执行的自动建议查询的结果进行更新。
- en: Suggesting queries
  id: totrans-219
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 建议查询
- en: To get autosuggestions, we first add a new class. Add a new file called `BingAutoSuggest.cs`,
    to the `Model` folder. The `BingAutoSuggest` class should have a member of type
    `BingWebRequest`, which should be created in the constructor.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取自动建议，我们首先添加一个新的类。在`Model`文件夹中添加一个名为`BingAutoSuggest.cs`的新文件。`BingAutoSuggest`类应该有一个类型为`BingWebRequest`的成员，该成员应在构造函数中创建。
- en: Create a new function called `Suggest`. This should accept a `string` as a parameter,
    returning a `Task<List<string>>` object. Mark the function as `async`.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为`Suggest`的新函数。这个函数应该接受一个`string`作为参数，返回一个`Task<List<string>>`对象。将函数标记为`async`。
- en: 'We will start by constructing an endpoint, where we specify the query string,
    `q`. This field is required. We also specify the market, `mkt`, although this
    is not required. We do not need any other parameters. Before we execute the API
    call, we will create a list of suggestions, which we will return to the caller:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先构建一个端点，其中我们指定查询字符串`q`。此字段是必需的。我们还指定市场`mkt`，尽管这不是必需的。我们不需要任何其他参数。在我们执行API调用之前，我们将创建一个建议列表，并将其返回给调用者：
- en: '[PRE29]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: We will make a call to `MakeRequest` on the `_webRequest` object, passing on
    the endpoint as a parameter. If the call succeeds, we expect the JSON response
    to deserialize into a `BingAutoSuggestResponse` object. This object will contain
    an array of `suggestionGroups`, where each item contains an array of `SearchSuggestions`.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在`_webRequest`对象上调用`MakeRequest`，并将端点作为参数传递。如果调用成功，我们期望JSON响应反序列化为`BingAutoSuggestResponse`对象。此对象将包含一个`suggestionGroups`数组，其中每个项目包含一个`SearchSuggestions`数组。
- en: 'Each item of `SearchSuggestion` contains a URL, display text, a query string,
    and a search kind. We are interested in the display text, which we add to the
    `suggestionResult` list. This list is returned to the caller:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '`SearchSuggestion`的每个项目都包含一个URL、显示文本、查询字符串和搜索类型。我们感兴趣的是显示文本，我们将其添加到`suggestionResult`列表中。此列表返回给调用者：'
- en: '[PRE30]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Note
  id: totrans-227
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For a complete description of response data, go to [https://msdn.microsoft.com/en-us/library/mt711395.aspx#suggestions](https://msdn.microsoft.com/en-us/library/mt711395.aspx#suggestions).
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取响应数据的完整描述，请访问[https://msdn.microsoft.com/en-us/library/mt711395.aspx#suggestions](https://msdn.microsoft.com/en-us/library/mt711395.aspx#suggestions)。
- en: 'In the `MainViewModel.cs` file, we want to get suggestions as we type. We will
    create a new function, as follows:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 在`MainViewModel.cs`文件中，我们希望在键入时获取建议。我们将创建一个新函数，如下所示：
- en: '[PRE31]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: This will call the newly created `Suggest` function, with the current value
    of the `SearchQuery`. If any results are returned, we assign them to the `SuggestionsIEnumerable`
    that we created earlier. Make sure to call this function when we set the value
    in the `SearchQuery` property.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
- en: In the UI, this will have the first suggestion automatically populated in the
    search-query field. This is not ideal for users, but it will do for our test example.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
- en: Search commonalities
  id: totrans-233
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For all the APIs we have covered, there are a few similarities. We will cover
    these now.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
- en: Languages
  id: totrans-235
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is highly recommended to specify which market you want results for. Searches
    will typically return results for the local market and language of the user, based
    on the current location. As you can imagine, this is not always what the user
    wants. By specifying the market, you can tailor the search results for the user.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
- en: How you choose to solve this technically is dependent on the requirements of
    your application. For a smart-house application, you would probably allow the
    user to set the market in the settings. For a web application created only for
    French users in France, you would probably not allow the user to change the market.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
- en: Specifying the market is done by adding the `mkt` parameter to the `GET` request.
    This should then specify the market code, for example, `en-US` for English in
    the United States.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-239
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: While any API may support a specific market, some features may not support a
    given market.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
- en: A subset of the languages supported is English, Spanish, German, Dutch, French,
    Portuguese, Traditional Chinese, Italian, Russian, and Arabic.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
- en: In addition, we can specify a `cc` parameter to the `GET` request. This specifies
    a country (typically, the country the user is in). This parameter should be in
    the form of a two-letter country code, for instance, GB for United Kingdom.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
- en: A wide variety of countries can be specified, and the list is continuously subject
    to change.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
- en: Pagination
  id: totrans-244
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Some searches may yield a large number of results. In these cases, you may want
    to perform pagination. This can be achieved by specifying the `count` and `offset`
    parameters in the GET request.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
- en: If you want 10 results per page, you would start by setting the count to 10,
    and the offset to 0 for the first page. When the user navigates to the next page,
    you would keep the `count` at 10, but increase the `offset` to 10\. For the next
    page, you would increase the `offset` to 20, and so on.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
- en: 'The maximum number of results returned in each query (the count parameter)
    varies for each API. See the following table for the current maximum count per
    API:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
- en: '| API | Maximum search results | Default search results |'
  id: totrans-248
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  id: totrans-249
  prefs: []
  type: TYPE_TB
- en: '| Bing News Search | 100 | 10 |'
  id: totrans-250
  prefs: []
  type: TYPE_TB
- en: '| Bing Web Search | 50 | 10 |'
  id: totrans-251
  prefs: []
  type: TYPE_TB
- en: '| Bing Image Search | 150 | 35 |'
  id: totrans-252
  prefs: []
  type: TYPE_TB
- en: '| Bing Video Search | 105 | 35 |'
  id: totrans-253
  prefs: []
  type: TYPE_TB
- en: Filters
  id: totrans-254
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have seen some filters for individual APIs. In addition to these, there are
    a couple of filters which can be applied to all searches.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
- en: Safe search
  id: totrans-256
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The safe search filter can be used to filter search results for adult content.
    This parameter is added in the request URL.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
- en: 'The `safeSearch` parameter can be one of the following values:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
- en: '**Off**: All result items will be returned'
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Moderate**: Result items can contain adult text, but no adult images or videos
    will be included'
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Strict**: No adult text, images, or videos are included in the result items'
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note that, if the IP address of the user indicates a location that requires
    the Strict safe search, this setting will be ignored. Bing will, in this case,
    default to the Strict policy.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
- en: If the parameter has not been set, it defaults to moderate.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
- en: Freshness
  id: totrans-264
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'By adding the `freshness` parameter to a request, you can filter search results
    based on the age of result items. The values that can be specified are as follows:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
- en: '**Day**: Results from the last 24 hours'
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Week**: Results from the last 7 days'
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Month**: Results from the last 30 days'
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Errors
  id: totrans-269
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Among all the APIs we have covered, there are a few possible response codes
    that you may receive for each request. The following table describes all of the
    possible response codes:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
- en: '| Code | Description |'
  id: totrans-271
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-272
  prefs: []
  type: TYPE_TB
- en: '| `200` | Successful request. |'
  id: totrans-273
  prefs: []
  type: TYPE_TB
- en: '| `400` | One or more required query parameters are missing, or one of the
    parameters is invalid. More details are described in the `ErrorResponse` field.
    |'
  id: totrans-274
  prefs: []
  type: TYPE_TB
- en: '| `401` | The provided subscription key is invalid or missing. |'
  id: totrans-275
  prefs: []
  type: TYPE_TB
- en: '| `403` | Typically returned if the monthly quota is exceeded. Can also be
    used if the caller does not have permission to access the requested resource.
    |'
  id: totrans-276
  prefs: []
  type: TYPE_TB
- en: '| `410` | The HTTP protocol has been used instead of HTTPS, which is the only
    supported protocol. |'
  id: totrans-277
  prefs: []
  type: TYPE_TB
- en: '| `429` | The quota per second has been exceeded. |'
  id: totrans-278
  prefs: []
  type: TYPE_TB
- en: Searching for visual content using Bing Visual Search
  id: totrans-279
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using the **Bing Visual Search** API, one can interpret images. This API allows
    us to gain insights about images. This includes finding visually similar images,
    searches, and shopping sources. It can also identify people, places, and objects,
    as well as text.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
- en: Sending a request
  id: totrans-281
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You will typically upload an image to the API to retrieve insights on it. In
    addition, you can pass on an URL to an image.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-283
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The endpoint you should use to query the Bing Visual Search API is [https://api.cognitive.microsoft.com/bing/v7.0/images/visualsearch](https://api.cognitive.microsoft.com/bing/v7.0/images/visualsearch).
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
- en: 'In either scenario, the following query parameters can be added:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
- en: '**cc**: The two-letter language code of the country where the results should
    come from.'
  id: totrans-286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mkt**: The market where the results come from. This should always be specified.'
  id: totrans-287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**safeSearch**: The filter used to filter adult content. Can be *Off*, *Moderate*,
    or *Strict*.'
  id: totrans-288
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**setLang**: The language to use for user interface strings, that is, a two-letter
    language code.'
  id: totrans-289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In addition, two content headers must be specified. These are `Content-Type`
    and `Ocp-Apim-Subscription-Key`. The first one must be set to `multipart/form-data;boundary={BOUNDARY}`.
    The latter must specify the API key.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，还必须指定两个内容头。这些是`Content-Type`和`Ocp-Apim-Subscription-Key`。第一个必须设置为`multipart/form-data;boundary={BOUNDARY}`。后者必须指定API密钥。
- en: Note
  id: totrans-291
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For more information on content headers, please visit [https://docs.microsoft.com/en-us/azure/cognitive-services/bing-visual-search/overview#content-form-types](https://docs.microsoft.com/en-us/azure/cognitive-services/bing-visual-search/overview#content-form-types).
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 有关内容头的更多信息，请访问[https://docs.microsoft.com/en-us/azure/cognitive-services/bing-visual-search/overview#content-form-types](https://docs.microsoft.com/en-us/azure/cognitive-services/bing-visual-search/overview#content-form-types)。
- en: Receiving a response
  id: totrans-293
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 接收响应
- en: Once the request has gone through, a JSON object will be returned as a response.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦请求通过，将返回一个JSON对象作为响应。
- en: 'This object will contain two objects: an array of `tags` and an `image` string.
    The image string is simply the insights token for the image. The list of `tags`
    contains a `tag` name and a list of `actions` (insights). A tag, in this context,
    means category. For instance, if an actor is recognized in the image, the tag
    for this might be *Actor*.'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 此对象将包含两个对象：一个`tags`数组和一个`image`字符串。图像字符串是图像的洞察令牌。`tags`列表包含一个`tag`名称和一系列`actions`（洞察）。在这个上下文中，标签意味着类别。例如，如果图像中识别出演员，这个标签可能是*演员*。
- en: Each action, or insight, describes something of the image. It might describe
    text in the image or different products discovered in the image. Each action includes
    a whole variety of data.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 每个动作或洞察都描述了图像中的某些内容。它可能描述图像中的文本或图像中发现的不同的产品。每个动作都包含一系列数据。
- en: Note
  id: totrans-297
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: To see a full list of default insights, please visit [https://docs.microsoft.com/en-us/azure/cognitive-services/bing-visual-search/default-insights-tag](https://docs.microsoft.com/en-us/azure/cognitive-services/bing-visual-search/default-insight).
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看默认洞察的完整列表，请访问[https://docs.microsoft.com/en-us/azure/cognitive-services/bing-visual-search/default-insights-tag](https://docs.microsoft.com/en-us/azure/cognitive-services/bing-visual-search/default-insight)。
- en: Adding a custom search
  id: totrans-299
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加自定义搜索
- en: Bing Custom Search gives you the opportunity to add a powerful, tailored search
    experience to your own applications. It allows you to search specifically for
    topics you care about.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: Bing自定义搜索为您提供了将强大的定制搜索体验添加到您自己的应用程序的机会。它允许您针对您关心的特定主题进行搜索。
- en: By using the portal at [https://www.customsearch.ai/](https://www.customsearch.ai/),
    you can create a custom view of the web.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用[https://www.customsearch.ai/](https://www.customsearch.ai/)上的门户，您可以创建一个定制的网络视图。
- en: Typical workflow
  id: totrans-302
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 典型工作流程
- en: If you want to build a custom search web page, the following steps describe
    the typical workflow.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想构建一个自定义搜索网页，以下步骤描述了典型的工作流程。
- en: '**Create a custom search instance**: This can be done at the portal linked
    in the previous section.'
  id: totrans-304
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**创建自定义搜索实例**：这可以在上一节中链接的门户中完成。'
- en: '**Add active entries**: This is a list of sites that should be included in
    the search results.'
  id: totrans-305
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**添加活动条目**：这是一个应包含在搜索结果中的网站列表。'
- en: '**Add blocked entries**: This is a list of sites that should be excluded from
    the search results.'
  id: totrans-306
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**添加阻止条目**：这是一个应从搜索结果中排除的网站列表。'
- en: '**Add pinned entries**: If any search term should have websites pinned to the
    top of the search result, it should be specified in the pinned entries section.'
  id: totrans-307
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**添加固定条目**：如果任何搜索词应该将网站固定在搜索结果顶部，应在固定条目部分指定。'
- en: '**Configure hosted UI**: Set the layout, color theme, and other options for
    the hosted UI.'
  id: totrans-308
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**配置托管UI**：设置布局、颜色主题和其他托管UI选项。'
- en: '**Publish the search instance**: Publish the custom search instance.'
  id: totrans-309
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**发布搜索实例**：发布自定义搜索实例。'
- en: Consuming the search instance
  id: totrans-310
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 消费搜索实例
- en: There are three ways to consume the custom search instance.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 有三种方式来使用自定义搜索实例。
- en: The first, and easiest option, is to integrate a JavaScript snippet. Once you
    have published the search instance, you will be provided with a pre-configured
    JavaScript snippet, rendering the hosted UI. This can be pasted into your existing
    web page. This will render the search form on your website.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个，也是最容易的选项，是集成一个JavaScript代码片段。一旦您发布了搜索实例，您将获得一个预配置的JavaScript代码片段，渲染托管UI。这可以粘贴到您的现有网页中。这将渲染您网站上的搜索表单。
- en: Another option is to link to the custom HTML site directly. This is the link
    used in a JavaScript snippet, but it is only used directly.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个选项是直接链接到自定义HTML网站。这是在JavaScript代码片段中使用的链接，但仅用于直接链接。
- en: The last option is to use the REST API directly from your own code. We will
    not go into deeper details on this in this book.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个选项是直接从您自己的代码中使用REST API。在这本书中，我们不会对此进行更深入的探讨。
- en: Summary
  id: totrans-315
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have looked at the different Bing Search APIs. We started
    by looking at how we can use the Bing Web Search API to search for all kinds of
    content. Next, we found the latest news, based on query strings and categories.
    From there, we moved on to image and video searches. In addition, we looked at
    how to enhance the user experience by adding autosuggestions. We did this by using
    the Bing Autosuggestion API. Finally, we briefly introduced you to Bing Visual
    Search and Bing Custom Search.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了不同的必应搜索API。我们首先了解了如何使用必应网络搜索API来搜索各种内容。接下来，我们根据查询字符串和类别找到了最新的新闻。然后，我们转向了图片和视频搜索。此外，我们还探讨了如何通过添加自动建议来增强用户体验。我们是通过使用必应自动建议API来做到这一点的。最后，我们简要介绍了必应视觉搜索和必应自定义搜索。
- en: In the next and final chapter, we will wrap things up. We will complete our
    smart-house application by connecting the pieces. We will also take a look at
    the road ahead.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章和最后一章中，我们将总结全文。我们将通过连接各个部分来完成我们的智能家居应用程序。我们还将展望未来的道路。
