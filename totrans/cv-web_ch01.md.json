["```py\n<!doctype html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <title>chapter1</title>\n    <script src=\"img/jsfeat.js\"></script>\n</head>\n<body></body></html>\n```", "```py\nvar matrix = new jsfeat.matrix_t(3, 3, jsfeat.U8_t | jsfeat.C1_t);\nmatrix.data[1] = 1;\nmatrix.data[5] = 2;\nmatrix.data[7] = 1;\nfor (var i = 0; i < matrix.rows; ++i) {\n  var start = i * matrix.cols;\n  console.log(matrix.data.subarray(start, start + matrix.cols));\n}\n```", "```py\n[0, 1, 0]\n[0, 0, 2]\n[0, 1, 0]\n```", "```py\n<canvas id=\"initCanvas\"></canvas>\n```", "```py\nvar canvas = document.getElementById('initCanvas'),\n    context = canvas.getContext('2d'),\n    image = new Image();\nimage.src = 'path/to/image.jpg';\n\nimage.onload = function () {\n    var cols = image.width;\n    var rows = image.height;\n    canvas.width = cols;\n    canvas.height = rows;\n    context.drawImage(image, 0, 0, image.width, image.height);\n};\n```", "```py\nvar imageData = context.getImageData(0, 0, cols, rows);\nvar dataBuffer = new jsfeat.data_t(cols * rows, imageData.data.buffer);\nvar mat = new jsfeat.matrix_t(cols, rows, jsfeat.U8_t | jsfeat.C4_t, dataBuffer);\n```", "```py\nvar gray = new jsfeat.matrix_t(mat.cols, mat.rows, jsfeat.U8_t | jsfeat.C1_t);\njsfeat.imgproc.grayscale(mat.data, mat.cols, mat.rows, gray);\n```", "```py\nvar transposed = new jsfeat.matrix_t(mat.rows, mat.cols, mat.type | mat.channel);\njsfeat.matmath.transpose(transposed, mat);\n```", "```py\nvar A = new jsfeat.matrix_t(2, 3, jsfeat.S32_t | jsfeat.C1_t);\nvar B = new jsfeat.matrix_t(3, 2, jsfeat.S32_t | jsfeat.C1_t);\nvar C = new jsfeat.matrix_t(3, 3, jsfeat.S32_t | jsfeat.C1_t);\nfor (var i = 0; i < A.data.length; ++i) {\n    A.data[i] = i + 1;\n    B.data[i] = B.data.length / 2 - i;\n}\njsfeat.matmath.multiply(C, A, B);\n```", "```py\n[1, 2] [3,  2,  1] [ 3,  0, -3]\n[3, 4] [0, -1, -2] [-3,  9,  2]\n[5, 6]             [ 2, -5, 15]\n```", "```py\nvar levels = 4, start_width = mat.cols, start_height = mat.rows,\n    data_type = jsfeat.U8_t | jsfeat.C1_t;\nvar pyramid = new jsfeat.pyramid_t(levels);\npyramid.allocate(start_width, start_height, data_type);\npyramid.build(mat);\n```", "```py\nvar data = new Uint8ClampedArray(matColour.data);\nvar imageData = new ImageData(data, matColour.cols, matColour.rows);\ncontext.putImageData(imageData, 0, 0);\n```", "```py\nvar imageData = new ImageData(mat.cols, mat.rows);\nvar data = new Uint32Array(imageData.data.buffer);\nvar alpha = (0xff << 24);\nvar i = mat.cols * mat.rows, pix = 0;\nwhile (--i >= 0) {\n    pix = mat.data[i];\n    data[i] = alpha | (pix << 16) | (pix << 8) | pix;\n}\n```", "```py\n    var compareFunc = function (a, b) {\n        return a < b;\n    };\n    ```", "```py\n    var length = mat.data.length;\n    jsfeat.math.qsort(mat.data, length / 3 * 2, length - 1, compareFunc);\n    ```", "```py\nvar arr1 = [2, 3, 1, 8, 5];\nvar arr2 = [4, 6, 2, 9, -1, 6];\nvar median1 = jsfeat.math.median(arr1, 0, arr1.length - 1);\nvar median2 = jsfeat.math.median(arr2, 0, arr2.length - 1);\n```", "```py\nvar bufA = [9, 6, -3, 2, -2, 4, -2, 1, -2],\n        bufB = [6, -4, 0];\n\nvar A = new jsfeat.matrix_t(3, 3, jsfeat.F32_t | jsfeat.C1_t, new jsfeat.data_t(bufA.length, bufA));\nvar B = new jsfeat.matrix_t(3, 1, jsfeat.F32_t | jsfeat.C1_t, new jsfeat.data_t(bufB.length, bufB));\n\njsfeat.linalg.lu_solve(A, B);\n```", "```py\n[2.000..., -4.000..., -4.000..]\n```", "```py\njsfeat.linalg.svd_solve(A, X, B);\n```", "```py\nvar imgRectified = new jsfeat.matrix_t(mat.cols, mat.rows, jsfeat.U8_t | jsfeat.C1_t);\nvar transform = new jsfeat.matrix_t(3, 3, jsfeat.F32_t | jsfeat.C1_t);\n\njsfeat.math.perspective_4point_transform(transform,\n        0, 0, 0, 0, // first pair x1_src, y1_src, x1_dst, y1_dst\n        640, 0, 640, 0, // x2_src, y2_src, x2_dst, y2_dst and so on.\n        640, 480, 640, 480,\n        0, 480, 180, 480);\njsfeat.matmath.invert_3x3(transform, transform);\njsfeat.imgproc.warp_perspective(mat, imgRectified, transform, 255);\n```"]