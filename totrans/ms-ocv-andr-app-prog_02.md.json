["```py\n<ImageView\n        android:layout_width=\"fill_parent\"\n        android:layout_height=\"fill_parent\"\n        android:id=\"@+id/image_view\"\n        android:visibility=\"visible\"/>\n```", "```py\n<item android:id=\"@+id/OpenGallery\" android:title=\"@string/OpenGallery\"\n        android:orderInCategory=\"100\" android:showAsAction=\"never\" />\n```", "```py\nIntent intent = new Intent(Intent.ACTION_PICK, Uri.parse(\"content://media/internal/images/media\"));\n```", "```py\npublic boolean onOptionsItemSelected(MenuItem item) {\n        // Handle action bar item clicks here. The action bar will\n        // automatically handle clicks on the Home/Up button, so long\n        // as you specify a parent activity in AndroidManifest.xml.\n        int id = item.getItemId();\n\n        //noinspection SimplifiableIfStatement\n        if (id == R.id.action_settings) {\n            return true;\n        }\n        else if (id == R.id.open_gallery) {\n            Intent intent = new Intent(Intent.ACTION_PICK, Uri.parse(\"content://media/internal/images/media\"));\n            startActivityForResult(intent, 0);\n        }\n    }\n```", "```py\nprotected void onActivityResult(int requestCode, int resultCode, Intent data) {\n        super.onActivityResult(requestCode, resultCode, data);\n\n        if (requestCode == 0 && resultCode == RESULT_OK && null != data) {\n            Uri selectedImage = data.getData();\n            String[] filePathColumn = {MediaStore.Images.Media.DATA};\n\n            Cursor cursor = getContentResolver().query(selectedImage,\n                    filePathColumn, null, null, null);\n            cursor.moveToFirst();\n\n            int columnIndex = cursor.getColumnIndex(filePathColumn[0]);\n            String picturePath = cursor.getString(columnIndex);\n            cursor.close();\n\n            // String picturePath contains the path of selected Image\n\n            //To speed up loading of image\n            BitmapFactory.Options options = new BitmapFactory.Options();\n            options.inSampleSize = 2;\n\n            Bitmap temp = BitmapFactory.decodeFile(picturePath, options);\n\n            //Get orientation information\n            int orientation = 0;\n            try {\n                ExifInterface imgParams = new ExifInterface(picturePath);\n                orientation = imgParams.getAttributeInt(ExifInterface.TAG_ORIENTATION, ExifInterface.ORIENTATION_UNDEFINED);\n\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n\n            //Rotating the image to get the correct orientation\n            Matrix rotate90 = new Matrix();\n            rotate90.postRotate(orientation);\n            originalBitmap = rotateBitmap(temp,orientation);\n\n            //Convert Bitmap to Mat\n            Bitmap tempBitmap = originalBitmap.copy(Bitmap.Config.ARGB_8888,true);\n            originalMat = new Mat(tempBitmap.getHeight(), tempBitmap.getWidth(), CvType.CV_8U);\n            Utils.bitmapToMat(tempBitmap, originalMat);\n\n            currentBitmap = originalBitmap.copy(Bitmap.Config.ARGB_8888,false);\n            loadImageToImageView();\n        }\n    }\n```", "```py\nprivate void loadImageToImageView()\n    {\n        ImageView imgView = (ImageView) findViewById(R.id.image_view);\n        imgView.setImageBitmap(currentBitmap);\n    }\n```", "```py\n<uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\"/>\n```", "```py\n<item android:id=\"@+id/DoG\" android:title=\"@string/DoG\"\n        android:orderInCategory=\"100\" android:showAsAction=\"never\" />\n```", "```py\npublic void DifferenceOfGaussian()\n    {\n        Mat grayMat = new Mat();\n        Mat blur1 = new Mat();\n        Mat blur2 = new Mat();\n\n        //Converting the image to grayscale\n        Imgproc.cvtColor(originalMat,grayMat,Imgproc.COLOR_BGR2GRAY);\n\n        //Bluring the images using two different blurring radius\n        Imgproc.GaussianBlur(grayMat,blur1,new Size(15,15),5);\n        Imgproc.GaussianBlur(grayMat,blur2,new Size(21,21),5);\n\n        //Subtracting the two blurred images\n        Mat DoG = new Mat();\n        Core.absdiff(blur1, blur2,DoG);\n\n        //Inverse Binary Thresholding\n        Core.multiply(DoG,new Scalar(100), DoG);\n        Imgproc.threshold(DoG,DoG,50,255,Imgproc.THRESH_BINARY_INV);\n\n        //Converting Mat back to Bitmap\n        Utils.matToBitmap(DoG, currentBitmap);\n        loadImageToImageView();\n    }\n```", "```py\n<item android:id=\"@+id/CannyEdges\" android:title=\"@string/CannyEdges\"\n        android:orderInCategory=\"100\" android:showAsAction=\"never\" />\n```", "```py\n//Canny Edge Detection\n    public void Canny()\n    {\n        Mat grayMat = new Mat();\n        Mat cannyEdges = new Mat();\n        //Converting the image to grayscale\n            Imgproc.cvtColor(originalMat,grayMat,Imgproc.COLOR_BGR2GRAY);\n\n        Imgproc.Canny(grayMat, cannyEdges,10, 100);\n\n        //Converting Mat back to Bitmap\n        Utils.matToBitmap(cannyEdges, currentBitmap);\n        loadImageToImageView();\n    }\n```", "```py\n<item android:id=\"@+id/SobelFilter\" android:title=\"@string/SobelFilter\"\n        android:orderInCategory=\"100\" android:showAsAction=\"never\" />\n```", "```py\n//Sobel Operator\n    void Sobel()\n    {\n        Mat grayMat = new Mat();\n        Mat sobel = new Mat(); //Mat to store the result\n\n        //Mat to store gradient and absolute gradient respectively\n        Mat grad_x = new Mat();\n        Mat abs_grad_x = new Mat();\n\n        Mat grad_y = new Mat();\n        Mat abs_grad_y = new Mat();\n\n        //Converting the image to grayscale\n        Imgproc.cvtColor(originalMat,grayMat,Imgproc.COLOR_BGR2GRAY);\n\n        //Calculating gradient in horizontal direction\n        Imgproc.Sobel(grayMat, grad_x,CvType.CV_16S, 1,0,3,1,0);\n\n        //Calculating gradient in vertical direction\n        Imgproc.Sobel(grayMat, grad_y,CvType.CV_16S, 0,1,3,1,0);\n\n        //Calculating absolute value of gradients in both the direction\n        Core.convertScaleAbs(grad_x, abs_grad_x);\n        Core.convertScaleAbs(grad_y, abs_grad_y);\n\n        //Calculating the resultant gradient\n        Core.addWeighted(abs_grad_x, 0.5, abs_grad_y, 0.5, 1, sobel);\n\n        //Converting Mat back to Bitmap\n        Utils.matToBitmap(sobel, currentBitmap);\n        loadImageToImageView();\n    }\n```", "```py\n//Calculating absolute value of gradients in both the direction\n        Core.convertScaleAbs(grad_x, abs_grad_x);\n        Core.convertScaleAbs(grad_y, abs_grad_y);\n\n        //Calculating the resultant gradient\n        Core.addWeighted(abs_grad_x, 0.5, abs_grad_y, 0.5, 1, sobel);\n```", "```py\nvoid HarrisCorner() {\n        Mat grayMat = new Mat();\n        Mat corners = new Mat();\n\n        //Converting the image to grayscale\n        Imgproc.cvtColor(originalMat, grayMat, Imgproc.COLOR_BGR2GRAY);\n\n        Mat tempDst = new Mat();\n        //finding corners        Imgproc.cornerHarris(grayMat, tempDst, 2, 3, 0.04);\n\n        //Normalizing harris corner's output\n        Mat tempDstNorm = new Mat();\n        Core.normalize(tempDst, tempDstNorm, 0, 255, Core.NORM_MINMAX);\n        Core.convertScaleAbs(tempDstNorm, corners);\n\n        //Drawing corners on a new image\n        Random r = new Random();\n        for (int i = 0; i < tempDstNorm.cols(); i++) {\n            for (int j = 0; j < tempDstNorm.rows(); j++) {\n                double[] value = tempDstNorm.get(j, i);\n                if (value[0] > 150)\n                    Core.circle(corners, new Point(i, j), 5, new Scalar(r.nextInt(255)), 2);\n            }\n        }\n\n        //Converting Mat back to Bitmap\n        Utils.matToBitmap(corners, currentBitmap);\n        loadImageToImageView();\n    }\n```", "```py\nvoid HoughLines()\n    {\n\n        Mat grayMat = new Mat();\n        Mat cannyEdges = new Mat();\n        Mat lines = new Mat();\n\n        //Converting the image to grayscale\n        Imgproc.cvtColor(originalMat,grayMat,Imgproc.COLOR_BGR2GRAY);\n\n        Imgproc.Canny(grayMat, cannyEdges,10, 100);\n\n        Imgproc.HoughLinesP(cannyEdges, lines, 1, Math.PI/180, 50, 20, 20);\n\n        Mat houghLines = new Mat();\n        houghLines.create(cannyEdges.rows(),cannyEdges.cols(),CvType.CV_8UC1);\n\n        //Drawing lines on the image\n        for(int i = 0 ; i < lines.cols() ; i++)\n        {\n            double[] points = lines.get(0,i);\n            double x1, y1, x2, y2;\n\n            x1 = points[0];\n            y1 = points[1];\n            x2 = points[2];\n            y2 = points[3];\n\n            Point pt1 = new Point(x1, y1);\n            Point pt2 = new Point(x2, y2);\n\n            //Drawing lines on an image\n            Core.line(houghLines, pt1, pt2, new Scalar(255, 0, 0), 1);\n        }\n\n        //Converting Mat back to Bitmap\n        Utils.matToBitmap(houghLines, currentBitmap);\n        loadImageToImageView();\n\n    }\n```", "```py\nvoid HoughCircles()\n    {\n        Mat grayMat = new Mat();\n        Mat cannyEdges = new Mat();\n        Mat circles = new Mat();\n\n        //Converting the image to grayscale\n        Imgproc.cvtColor(originalMat,grayMat,Imgproc.COLOR_BGR2GRAY);\n\n        Imgproc.Canny(grayMat, cannyEdges,10, 100);\n\n        Imgproc.HoughCircles(cannyEdges, circles, Imgproc.CV_HOUGH_GRADIENT,1, cannyEdges.rows() / 15);//, grayMat.rows() / 8);\n\n        Mat houghCircles = new Mat();\n        houghCircles.create(cannyEdges.rows(),cannyEdges.cols(),CvType.CV_8UC1);\n\n        //Drawing lines on the image\n        for(int i = 0 ; i < circles.cols() ; i++)\n        {\n            double[] parameters = circles.get(0,i);\n            double x, y;\n            int r;\n\n            x = parameters[0];\n            y = parameters[1];\n            r = (int)parameters[2];\n\n            Point center = new Point(x, y);\n\n            //Drawing circles on an image\n            Core.circle(houghCircles,center,r, new Scalar(255,0,0),1);\n        }\n\n        //Converting Mat back to Bitmap\n        Utils.matToBitmap(houghCircles, currentBitmap);\n        loadImageToImageView();\n    }\n```", "```py\nvoid Contours()\n    {\n        Mat grayMat = new Mat();\n        Mat cannyEdges = new Mat();\n        Mat hierarchy = new Mat();\n\n        List<MatOfPoint> contourList = new ArrayList<MatOfPoint>(); //A list to store all the contours\n\n        //Converting the image to grayscale\n        Imgproc.cvtColor(originalMat,grayMat,Imgproc.COLOR_BGR2GRAY);\n\n        Imgproc.Canny(grayMat, cannyEdges,10, 100);\n\n        //finding contours\n        Imgproc.findContours(cannyEdges,contourList,hierarchy,Imgproc.RETR_LIST, Imgproc.CHAIN_APPROX_SIMPLE);\n\n        //Drawing contours on a new image\n        Mat contours = new Mat();\n        contours.create(cannyEdges.rows(),cannyEdges.cols(),CvType.CV_8UC3);\n        Random r = new Random();\n        for(int i = 0; i < contourList.size(); i++)\n        {\n            Imgproc.drawContours(contours,contourList,i,new Scalar(r.nextInt(255),r.nextInt(255),r.nextInt(255)), -1);\n        }\n        //Converting Mat back to Bitmap\n        Utils.matToBitmap(contours, currentBitmap);\n        loadImageToImageView();\n    }\n```"]