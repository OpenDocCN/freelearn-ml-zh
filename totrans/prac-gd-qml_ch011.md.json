["```py\n\nfrom qiskit.quantum_info import Statevector \n\nzero = Statevector([1,0]) \n\nprint(\"zero is\", zero)\n\n```", "```py\n\nzero is Statevector([1.+0.j, 0.+0.j], \n\n            dims=(2,))\n\n```", "```py\n\none = Statevector([0,1]) \n\nprint(\"one is\",one)\n\n```", "```py\n\none is Statevector([0.+0.j, 1.+0.j], \n\n            dims=(2,))\n\n```", "```py\n\nzero = Statevector.from_int(0, dims = 2) \n\none = Statevector.from_int(1, dims = 2) \n\nprint(\"zero is\",zero) \n\nprint(\"one is\",one)\n\n```", "```py\n\nzero is Statevector([1.+0.j, 0.+0.j], \n\n            dims=(2,)) \n\none is Statevector([0.+0.j, 1.+0.j], \n\n            dims=(2,))\n\n```", "```py\n\npsi = one.tensor(zero.tensor(zero)) \n\nprint(\"psi is\",psi)\n\n```", "```py\n\npsi is Statevector([0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 1.+0.j, 0.+0.j, \n\n             0.+0.j, 0.+0.j], \n\n            dims=(2, 2, 2))\n\n```", "```py\n\npsi = one^zero^zero \n\npsi.draw(\"latex\")\n\n```", "```py\n\npsi = Statevector.from_int(4, dims = 8)\n\n```", "```py\n\nfrom numpy import sqrt \n\nghz = 1/sqrt(2)*(zero^zero^zero) + 1/sqrt(2)*(one^one^one)\n\n```", "```py\n\nfrom qiskit.quantum_info import Pauli \n\nZ0Z1 = Pauli(\"ZZI\") \n\nprint(\"Z0Z1 is\",Z0Z1) \n\nprint(\"And its matrix is\") \n\nprint(Z0Z1.to_matrix())\n\n```", "```py\n\nZ0Z1 is ZZI \n\nAnd its matrix is \n\n[[ 1.+0.j  0.+0.j  0.+0.j  0.+0.j  0.+0.j  0.+0.j  0.+0.j  0.+0.j] \n\n [ 0.+0.j  1.+0.j  0.+0.j  0.+0.j  0.+0.j  0.+0.j  0.+0.j  0.+0.j] \n\n [ 0.+0.j  0.+0.j -1.+0.j  0.+0.j  0.+0.j  0.+0.j  0.+0.j  0.+0.j] \n\n [ 0.+0.j  0.+0.j  0.+0.j -1.+0.j  0.+0.j  0.+0.j  0.+0.j  0.+0.j] \n\n [ 0.+0.j  0.+0.j  0.+0.j  0.+0.j -1.+0.j  0.+0.j  0.+0.j  0.+0.j] \n\n [ 0.+0.j  0.+0.j  0.+0.j  0.+0.j  0.+0.j -1.+0.j  0.+0.j  0.+0.j] \n\n [ 0.+0.j  0.+0.j  0.+0.j  0.+0.j  0.+0.j  0.+0.j  1.+0.j  0.+0.j] \n\n [ 0.+0.j  0.+0.j  0.+0.j  0.+0.j  0.+0.j  0.+0.j  0.+0.j  1.+0.j]]\n\n```", "```py\n\nprint(\"The sparse representation of Z0Z1 is\") \n\nprint(Z0Z1.to_matrix(sparse=True))\n\n```", "```py\n\nZ0Z1 is ZZI \n\nThe sparse representation of Z0Z1 is \n\n  (0, 0)    (1+0j) \n\n  (1, 1)    (1+0j) \n\n  (2, 2)    (-1+0j) \n\n  (3, 3)    (-1+0j) \n\n  (4, 4)    (-1+0j) \n\n  (5, 5)    (-1+0j) \n\n  (6, 6)    (1+0j) \n\n  (7, 7)    (1+0j)\n\n```", "```py\n\nfrom qiskit.opflow.primitive_ops import PauliOp \n\nH_cut = PauliOp(Pauli(\"ZZI\")) + PauliOp(Pauli(\"ZIZ\")) \n\nprint(\"H_cut is\") \n\nprint(H_cut) \n\nprint(\"The sparse representation of H_cut is\") \n\nprint(H_cut.to_spmatrix())\n\n```", "```py\n\nH_cut is \n\n1.0 * ZZI \n\n+ 1.0 * ZIZ \n\nThe sparse representation of H_cut is \n\n  (0, 0)    (2+0j) \n\n  (3, 3)    (-2+0j) \n\n  (4, 4)    (-2+0j) \n\n  (7, 7)    (2+0j)\n\n```", "```py\n\nfrom qiskit.opflow import I, Z \n\nH_cut = (Z^Z^I) + (Z^I^Z) \n\nprint(\"H_cut is\") \n\nprint(H_cut)\n\n```", "```py\n\nH_cut is \n\n1.0 * ZZI \n\n+ 1.0 * ZIZ\n\n```", "```py\n\nH_ising = -0.5*(Z^Z^I) + 2*(Z^I^Z) -(I^Z^Z) + (I^Z^I) -5*(I^I^Z)\n\n```", "```py\n\nprint(\"The expectation value is\", psi.expectation_value(H_cut))\n\n```", "```py\n\nThe expectation value is (-2+0j)\n\n```", "```py\n\nprint(\"The expectation value is\", psi.inner(psi.evolve(H_cut)))\n\n```"]