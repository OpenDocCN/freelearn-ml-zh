["```py\n33\n34\n301\n33\n44\n299\n40\n50\n400\n60\n76\n500\n```", "```py\n10\n25\n444\n9\n11\n333\n4\n3\n500\n```", "```py\nnamespace chapter08.Enums\n{\n    public enum ProgramActions\n    {\n        TRAINING,\n        PREDICT\n    }\n}\n```", "```py\npublic static T ParseArguments<T>(string[] args) \n```", "```py\nif (args == null)\n{\n    throw new ArgumentNullException(nameof(args));\n}\n```", "```py\nif (args.Length == 0)\n{\n    Console.WriteLine(\"No arguments passed in - using defaults\");\n\n    return Activator.CreateInstance<T>();\n}\n```", "```py\nif (args.Length % 2 != 0)\n{\n    throw new ArgumentException($\"Arguments must be in pairs, there were {args.Length} passed in\");\n}\n```", "```py\nvar argumentObject = Activator.CreateInstance<T>();\n```", "```py\nvar properties = argumentObject.GetType().GetProperties();\n```", "```py\nfor (var x = 0; x < args.Length; x += 2)\n{\n    var property = properties.FirstOrDefault(a => a.Name.Equals(args[x], StringComparison.CurrentCultureIgnoreCase));\n\n    if (property == null)\n    {\n        Console.WriteLine($\"{args[x]} is an invalid argument\");\n\n        continue;\n    }\n\n    if (property.PropertyType.IsEnum)\n    {\n        property.SetValue(argumentObject, Enum.Parse(property.PropertyType, args[x + 1], true));\n    }\n    else\n    {\n        property.SetValue(argumentObject, args[x + 1]);\n    }\n}\n```", "```py\nusing Microsoft.ML;\n\nnamespace chapter08.ML.Base\n{\n    public class BaseML\n    {\n        protected readonly MLContext MlContext;\n\n        protected BaseML()\n        {\n            MlContext = new MLContext(2020);\n        }\n    }\n}\n```", "```py\nnamespace chapter08.ML.Objects\n{\n    public class StockPrediction\n    {\n        public float[] StockForecast { get; set; }\n\n        public float[] LowerBound { get; set; }\n\n        public float[] UpperBound { get; set; }\n    }\n}\n```", "```py\nusing Microsoft.ML.Data;\n\nnamespace chapter08.ML.Objects\n{\n    public class StockPrices\n    {\n        [LoadColumn(0)]\n        public float StockPrice;\n\n        public StockPrices(float stockPrice)\n        {\n            StockPrice = stockPrice;\n        }\n    }\n}\n```", "```py\npublic void Predict(ProgramArguments arguments)   \n```", "```py\nif (!File.Exists(arguments.ModelFileName))\n{\n    Console.WriteLine($\"Failed to find model at {arguments.ModelFileName}\");\n\n    return;\n}\n```", "```py\nif (!File.Exists(arguments.PredictionFileName))\n{\n    Console.WriteLine($\"Failed to find input data at {arguments.PredictionFileName}\");\n\n    return;\n}\n```", "```py\nusing (var stream = new FileStream(Path.Combine(AppContext.BaseDirectory, arguments.ModelFileName), FileMode.Open, FileAccess.Read, FileShare.Read))\n{\n    mlModel = MlContext.Model.Load(stream, out _);\n}\n```", "```py\nvar predictionEngine = mlModel.CreateTimeSeriesEngine<StockPrices, StockPrediction>(MlContext);\n```", "```py\nvar stockPrices = File.ReadAllLines(arguments.PredictionFileName);\n```", "```py\nforeach (var stockPrice in stockPrices)\n{\n    var prediction = predictionEngine.Predict(new StockPrices(Convert.ToSingle(stockPrice)));\n\n    Console.WriteLine($\"Given a stock price of ${stockPrice}, the next 5 values are predicted to be: \" +\n                      $\"{string.Join(\", \", prediction.StockForecast.Select(a => $\"${Math.Round(a)}\"))}\");\n}\n```", "```py\npublic void Train(ProgramArguments arguments)     \n```", "```py\nif (!File.Exists(arguments.TrainingFileName))\n{\n    Console.WriteLine($\"Failed to find training data file ({arguments.TrainingFileName})\");\n\n    return;\n}\n```", "```py\nif (!File.Exists(arguments.TestingFileName))\n{\n    Console.WriteLine($\"Failed to find test data file ({arguments.TestingFileName})\");\n\n    return;\n}\n```", "```py\nvar dataView = MlContext.Data.LoadFromTextFile<StockPrices>(arguments.TrainingFileName);\n```", "```py\nvar model = MlContext.Forecasting.ForecastBySsa(\n    outputColumnName: nameof(StockPrediction.StockForecast),\n    inputColumnName: nameof(StockPrices.StockPrice), \n    windowSize: 7, \n    seriesLength: 30, \n    trainSize: 24, \n    horizon: 5,\n    confidenceLevel: 0.95f,\n    confidenceLowerBoundColumn: nameof(StockPrediction.LowerBound),\n    confidenceUpperBoundColumn: nameof(StockPrediction.UpperBound));\n```", "```py\nvar transformer = model.Fit(dataView);\n\nvar forecastEngine = transformer.CreateTimeSeriesEngine<StockPrices, StockPrediction>(MlContext);\n\nforecastEngine.CheckPoint(MlContext, arguments.ModelFileName);\n\nConsole.WriteLine($\"Wrote model to {arguments.ModelFileName}\");\n```", "```py\npublic ProgramActions Action { get; set; }\n\npublic string TrainingFileName { get; set; }\n\npublic string TestingFileName { get; set; }\n\npublic string PredictionFileName { get; set; }\n\npublic string ModelFileName { get; set; }\n```", "```py\npublic ProgramArguments()\n{\n    ModelFileName = \"chapter8.mdl\";\n\n    PredictionFileName = @\"..\\..\\..\\Data\\predict.csv\";\n\n    TrainingFileName = @\"..\\..\\..\\Data\\sampledata.csv\";\n\n    TestingFileName = @\"..\\..\\..\\Data\\testdata.csv\";\n}\n```", "```py\nConsole.Clear();\n```", "```py\nvar arguments = CommandLineParser.ParseArguments<ProgramArguments>(args);\n```", "```py\nswitch (arguments.Action)\n{\n    case ProgramActions.PREDICT:\n        new Predictor().Predict(arguments);\n        break;\n    case ProgramActions.TRAINING:\n        new Trainer().Train(arguments);\n        break;\n    default:\n        Console.WriteLine($\"Unhandled action {arguments.Action}\");\n        break;\n}\n```", "```py\nPS chapter08\\bin\\Debug\\netcoreapp3.0> .\\chapter08.exe\nNo arguments passed in - using defaults\nWrote model to chapter8.mdl\n```", "```py\nPS chapter08\\bin\\Debug\\netcoreapp3.0> .\\chapter08.exe action predict\nGiven a stock price of $101, the next 5 values are predicted to be: $128, $925, $140, $145, $1057\nGiven a stock price of $102, the next 5 values are predicted to be: $924, $138, $136, $1057, $158\nGiven a stock price of $300, the next 5 values are predicted to be: $136, $134, $852, $156, $150\nGiven a stock price of $40, the next 5 values are predicted to be: $133, $795, $122, $149, $864\nGiven a stock price of $30, the next 5 values are predicted to be: $767, $111, $114, $837, $122\nGiven a stock price of $400, the next 5 values are predicted to be: $105, $102, $676, $116, $108\nGiven a stock price of $55, the next 5 values are predicted to be: $97, $594, $91, $103, $645\nGiven a stock price of $69, the next 5 values are predicted to be: $557, $81, $87, $605, $90\nGiven a stock price of $430, the next 5 values are predicted to be: $76, $78, $515, $84, $85\n```"]