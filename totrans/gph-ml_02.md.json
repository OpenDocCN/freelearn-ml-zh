["```py\nJupyter==1.0.0\nnetworkx==2.5\nsnap-stanford==5.0.0\nmatplotlib==3.2.2\npandas==1.1.3\nscipy==1.6.2\n```", "```py\nimport networkx as nx\nG = nx.Graph()\nV = {'Dublin', 'Paris', 'Milan', 'Rome'}\nE = [('Milan','Dublin'), ('Milan','Paris'), ('Paris','Dublin'), ('Milan','Rome')]\nG.add_nodes_from(V)\nG.add_edges_from(E)\n```", "```py\nprint(f\"V = {G.nodes}\")\nprint(f\"E = {G.edges}\")\n```", "```py\nV = ['Rome', 'Dublin', 'Milan', 'Paris']\nE = [('Rome', 'Milan'), ('Dublin', 'Milan'), ('Dublin', 'Paris'), ('Milan', 'Paris')]\n```", "```py\nprint(f\"Graph Order: {G.number_of_nodes()}\")\nprint(f\"Graph Size: {G.number_of_edges()}\")\nprint(f\"Degree for nodes: { {v: G.degree(v) for v in G.nodes} }\")\nprint(f\"Neighbors for nodes: { {v: list(G.neighbors(v)) for v in G.nodes} }\") \n```", "```py\nGraph Order: 4\nGraph Size: 4\nDegree for nodes: {'Rome': 1, 'Paris': 2, 'Dublin':2, 'Milan': 3}\nNeighbors for nodes: {'Rome': ['Milan'], 'Paris': ['Milan', 'Dublin'], 'Dublin': ['Milan', 'Paris'], 'Milan': ['Dublin', 'Paris', 'Rome']}\n```", "```py\nego_graph_milan = nx.ego_graph(G, \"Milan\")\nprint(f\"Nodes: {ego_graph_milan.nodes}\")\nprint(f\"Edges: {ego_graph_milan.edges}\")\n```", "```py\nNodes: ['Paris', 'Milan', 'Dublin', 'Rome']\nEdges: [('Paris', 'Milan'), ('Paris', 'Dublin'), ('Milan', 'Dublin'), ('Milan', 'Rome')]\n```", "```py\n#Add new nodes and edges\nnew_nodes = {'London', 'Madrid'}\nnew_edges = [('London','Rome'), ('Madrid','Paris')]\nG.add_nodes_from(new_nodes)\nG.add_edges_from(new_edges)\nprint(f\"V = {G.nodes}\")\nprint(f\"E = {G.edges}\")\n```", "```py\nV = ['Rome', 'Dublin', 'Milan', 'Paris', 'London', 'Madrid']\nE = [('Rome', 'Milan'), ('Rome', 'London'), ('Dublin', 'Milan'), ('Dublin', 'Paris'), ('Milan', 'Paris'), ('Paris', 'Madrid')]\n```", "```py\nnode_remove = {'London', 'Madrid'}\nG.remove_nodes_from(node_remove)\nprint(f\"V = {G.nodes}\")\nprint(f\"E = {G.edges}\")\n```", "```py\nV = ['Rome', 'Dublin', 'Milan', 'Paris']\nE = [('Rome', 'Milan'), ('Dublin', 'Milan'), ('Dublin', 'Paris'), ('Milan', 'Paris')]\n```", "```py\nnode_edges = [('Milan','Dublin'), ('Milan','Paris')]\nG.remove_edges_from(node_edges)\nprint(f\"V = {G.nodes}\")\nprint(f\"E = {G.edges}\")\n```", "```py\nV = ['Dublin', 'Paris', 'Milan', 'Rome']\nE = [('Dublin', 'Paris'), ('Milan', 'Rome')]\n```", "```py\nG = nx.DiGraph()\nV = {'Dublin', 'Paris', 'Milan', 'Rome'}\nE = [('Milan','Dublin'), ('Paris','Milan'), ('Paris','Dublin'), ('Milan','Rome')]\nG.add_nodes_from(V)\nG.add_edges_from(E)\n```", "```py\nprint(f\"Indegree for nodes: { {v: G.in_degree(v) for v in G.nodes} }\")\nprint(f\"Outdegree for nodes: { {v: G.out_degree(v) for v in G.nodes} }\")\n```", "```py\nIndegree for nodes: {'Rome': 1, 'Paris': 0, 'Dublin': 2, 'Milan': 1}\nOutdegree for nodes: {'Rome': 0, 'Paris': 2, 'Dublin': 0, 'Milan': 2}\n```", "```py\ndirected_multi_graph = nx.MultiDiGraph()\nundirected_multi_graph = nx.MultiGraph()\nV = {'Dublin', 'Paris', 'Milan', 'Rome'}\nE = [('Milan','Dublin'), ('Milan','Dublin'), ('Paris','Milan'), ('Paris','Dublin'), ('Milan','Rome'), ('Milan','Rome')]\ndirected_multi_graph.add_nodes_from(V)\nundirected_multi_graph.add_nodes_from(V)\ndirected_multi_graph.add_edges_from(E)\nundirected_multi_graph.add_edges_from(E)\n```", "```py\nG = nx.DiGraph()\nV = {'Dublin', 'Paris', 'Milan', 'Rome'}\nE = [('Milan','Dublin', 19), ('Paris','Milan', 8), ('Paris','Dublin', 11), ('Milan','Rome', 5)]\nG.add_nodes_from(V)\nG.add_weighted_edges_from(E)\n```", "```py\nimport pandas as pd\nimport numpy as np\nn_nodes = 10\nn_edges = 12\nbottom_nodes = [ith for ith in range(n_nodes) if ith % 2 ==0]\n top_nodes = [ith for ith in range(n_nodes) if ith % 2 ==1]\niter_edges = zip(\n    np.random.choice(bottom_nodes, n_edges),  \n    np.random.choice(top_nodes, n_edges))\nedges = pd.DataFrame([\n    {\"source\": a, \"target\": b} for a, b in iter_edges])\nB = nx.Graph()\nB.add_nodes_from(bottom_nodes, bipartite=0)\n B.add_nodes_from(top_nodes, bipartite=1)\n B.add_edges_from([tuple(x) for x in edges.values])\n```", "```py\nfrom networkx.drawing.layout import bipartite_layout\npos = bipartite_layout(B, bottom_nodes)\n nx.draw_networkx(B, pos=pos)\n```", "```py\nnx.to_pandas_adjacency(G) #adjacency matrix as pd DataFrame\nnt.to_numpy_matrix(G) #adjacency matrix as numpy matrix\n```", "```py\n          Rome  Dublin  Milan  Paris\nRome     0.0     0.0    0.0    0.0\nDublin   0.0     0.0    0.0    0.0\nMilan    1.0     1.0    0.0    0.0\nParis    0.0     1.0    1.0    0.0\n[[0\\. 0\\. 0\\. 0.]\n [0\\. 0\\. 0\\. 0.]\n [1\\. 1\\. 0\\. 0.]\n [0\\. 1\\. 1\\. 0.]]\n```", "```py\nprint(nx.to_pandas_edgelist(G))\n```", "```py\n  source  target\n0  Milan  Dublin\n1  Milan    Rome\n2  Paris   Milan\n3  Paris  Dublin\n```", "```py\ndef draw_graph(G, nodes_position, weight):\n      nx.draw(G, pos_ position, with_labels=True, font_size=15, node_size=400, edge_color='gray', arrowsize=30)\n             if plot_weight:\n             edge_labels=nx.get_edge_attributes(G,'weight')\n         nx.draw_networkx_edge_labels(G, pos_ position, edge_labels=edge_labels)\n```", "```py\nG = nx.Graph()\nV = {'Paris', 'Dublin','Milan', 'Rome'}\nE = [('Paris','Dublin', 11), ('Paris','Milan', 8),\n     ('Milan','Rome', 5), ('Milan','Dublin', 19)]\nG.add_nodes_from(V)\nG.add_weighted_edges_from(E)\nnode_position = {\"Paris\": [0,0], \"Dublin\": [0,1], \"Milan\": [1,0], \"Rome\": [1,1]}\ndraw_graph(G, node_position, True)\n```", "```py\nG = nx.Graph()\nnodes = {1:'Dublin',2:'Paris',3:'Milan',4:'Rome',5:'Naples',\n         6:'Moscow',7:'Tokyo'}\nG.add_nodes_from(nodes.keys())\nG.add_edges_from([(1,2),(1,3),(2,3),(3,4),(4,5),(5,6),(6,7),(7,5)])\n```", "```py\npath = nx.shortest_path(G,source=1,target=7)\n```", "```py\n[1,3,4,5,6]\n```", "```py\nnx.average_shortest_path_length(G)\n```", "```py\n2.1904761904761907\n```", "```py\nnx.global_efficiency(G)\n```", "```py\n0.6111111111111109\n```", "```py\nnx.local_efficiency(G)\n```", "```py\n0.6666666666666667\n```", "```py\nnx.average_clustering(G)\n```", "```py\n0.6666666666666667\n```", "```py\nnx.clustering(G)\n```", "```py\n{1: 1.0,\n 2: 1.0,\n 3: 0.3333333333333333,\n 4: 0,\n 5: 0.3333333333333333,\n 6: 1.0,\n 7: 1.0}\n```", "```py\nnx.transitivity(G)\n```", "```py\n0.5454545454545454\n```", "```py\nimport networkx.algorithms.community as nx_comm\nnx_comm.modularity(G, communities=[{1,2,3}, {4,5,6,7}])\n```", "```py\n0.3671875\n```", "```py\nnx.degree_centrality(G)\n```", "```py\n{1: 0.3333333333333333, 2: 0.3333333333333333, 3: 0.5, 4: 0.3333333333333333, 5: 0.5, 6: 0.3333333333333333, 7: 0.3333333333333333}\n```", "```py\nnx.closeness_centrality(G)\n```", "```py\n{1: 0.4, 2: 0.4, 3: 0.5454545454545454, 4: 0.6, 5: 0.5454545454545454, 6: 0.4, 7: 0.4}\n```", "```py\nnx.betweenness_centrality(G)\n```", "```py\n{1: 0.0, 2: 0.0, 3: 0.5333333333333333, 4: 0.6, 5: 0.5333333333333333, 6: 0.0, 7: 0.0}\n```", "```py\nnx.degree_pearson_correlation_coefficient(G)\n```", "```py\n-0.6\n```", "```py\ncomplete = nx.complete_graph(n=7)\n```", "```py\n    lollipop = nx.lollipop_graph(m=7, n=3)\n    ```", "```py\n    barbell = nx.barbell_graph(m1=7, m2=4)\n    ```", "```py\ndef get_random_node(graph):\n    return np.random.choice(graph.nodes)\nallGraphs = nx.compose_all([complete, barbell, lollipop])\nallGraphs.add_edge(get_random_node(lollipop), get_random_node(lollipop))\nallGraphs.add_edge(get_random_node(complete), get_random_node(barbell))\n```", "```py\ngraph = nx.watts_strogatz_graph(n=20, k=5, p=0.2)\n```", "```py\nba_model = nx.extended_barabasi_albert_graph(n,m=1,p=0,q=0)\ndegree = dict(nx.degree(ba_model)).values()\nbins = np.round(np.logspace(np.log10(min(degree)), np.log10(max(degree)), 10))\ncnt = Counter(np.digitize(np.array(list(degree)), bins))\n```", "```py\n%%MatrixMarket matrix coordinate pattern symmetric \n```", "```py\nfrom scipy.io import mmread\nadj_matrix = mmread(\"ca-AstroPh.mtx\")\ngraph = nx.from_scipy_sparse_matrix(adj_matrix)\n```", "```py\nstats = pd.DataFrame({\n    \"centrality\": nx.centrality.betweenness_centrality(graph), \n    \"C_i\": nx.clustering(graph), \n    \"degree\": nx.degree(graph)\n})\n```", "```py\nneighbors = [n for n in nx.neighbors(graph, 6933)]\n```", "```py\nnTop = round(len(neighbors)*sampling)\nidx = {\n    \"random\": stats.loc[neighbors].sort_index().index[:nTop], \n    \"centrality\": stats.loc[neighbors]\\\n         .sort_values(\"centrality\", ascending=False)\\\n         .index[:nTop],\n    \"C_i\": stats.loc[neighbors]\\\n         .sort_values(\"C_i\", ascending=False)\\\n         .index[:nTop]\n}\n```", "```py\ndef plotSubgraph(graph, indices, center = 6933):\n    nx.draw_kamada_kawai(\n        nx.subgraph(graph, list(indices) + [center])\n    )\n```", "```py\nplotSubgraph(graph, idx[\"random\"]) \n```", "```py\nnx.write_gext(graph, \"ca-AstroPh.gext\")\n```", "```py\n% asym unweighted\n% 49743 12591 12591 \n```", "```py\n%%MatrixMarket matrix coordinate pattern general\n12591 12591 49743 \n```", "```py\ng = nx.read_edgelist(\"amazon0302.txt\")\n```", "```py\nfrom snap import LoadEdgeList, PNGraph\ngraph = LoadEdgeList(PNGraph, \"amazon0302.txt\", 0, 1, '\\t')\n```", "```py\nnetworkx_graph = snap2networkx(snap_graph)\nsnap_graph = networkx2snap(networkx_graph) \n```"]