["```py\nUSE [master];\nGO\nCREATE DATABASE [DelayedDurability];\nGO\n\nALTER DATABASE [DelayedDurability] SET DELAYED_DURABILITY = ALLOWED    \nWITH NO_WAIT;\nGO\nBACKUP DATABASE [DelayedDurability] TO DISK = N'nul'\nGO  \n```", "```py\nUSE [DelayedDurability];\nGO\n\nDROP TABLE IF EXISTS TestDDTable;\nGO\n\nCREATE TABLE TestDDTable\n(ID INT IDENTITY(1,1) PRIMARY KEY\n,R_num INT\n,Class CHAR(10) \n,InsertTime DATETIME DEFAULT(GETDATE())\n);\nGO  \n```", "```py\nEXECUTE sys.sp_flush_log;\nGO\n\nDECLARE @count INT = 0\nDECLARE @start1 DATETIME = GETDATE()\nWHILE (@count <= 250000)\n          BEGIN\n                BEGIN TRAN\n                      INSERT INTO TestDDTable(R_num, class) VALUES(@count, 'WITHOUT_DD')\n                      SET @count += 1\n                COMMIT\n          END\n\nSET @count = 0\nDECLARE @start2 DATETIME = GETDATE()\nWHILE (@count <= 250000)\n          BEGIN\n                BEGIN TRAN\n                      INSERT INTO TestDDTable(R_num, class) VALUES(@count, 'WITH_DD')\n                      SET @count += 1\n                COMMIT WITH (DELAYED_DURABILITY = ON)\n          END\n\nSELECT \nDATEDIFF(SECOND, @start1, GETDATE()) AS With_DD_OFF\n,DATEDIFF(SECOND, @start2, GETDATE()) AS With_DD_ON\n```", "```py\nSELECT * FROM sys.dm_os_wait_stats\nWHERE wait_type IN ('WRITELOG');\nGO \n```", "```py\n-- creating extended event\n\nIF EXISTS(SELECT * FROM sys.server_event_sessions WHERE name='DelayDurab_Log_flush') \nDROP EVENT session DelayDurab_Log_flush ON SERVER; \n\n-- Get DelayedDurability database ID\nSELECT db_id()\n\nCREATE EVENT SESSION DelayDurab_Log_flush ON SERVER\nADD EVENT sqlserver.log_flush_start\n (WHERE  (database_id=40)),\nADD EVENT sqlserver.databases_log_flush \n (WHERE (database_id =40)),\nADD EVENT sqlserver.transaction_log\n (WHERE (database_id =40))\n-- maybe add batchrequests/second\n\n ADD TARGET package0.event_file\n(\n SET filename     ='C:\\CH09\\MonitorDelayDurability.xel'\n ,metadatafile ='C:\\CH09\\MonitorDelayDurability.xem'\n)\nWITH (MAX_MEMORY=4096KB\n ,EVENT_RETENTION_MODE=ALLOW_SINGLE_EVENT_LOSS\n ,MAX_DISPATCH_LATENCY=30 SECONDS\n ,MEMORY_PARTITION_MODE=NONE\n ,STARTUP_STATE=ON);\nGO  \n```", "```py\nSELECT \n      CAST(event_data AS XML) AS event_data\nFROM sys.fn_xe_file_target_read_file('C:\\CH09\\MonitorDelayDurability*.xel', 'C:\\CH09\\MonitorDelayDurability*.xem', null, null) \n```", "```py\nCREATE DATABASE ServerInfo;\nGO\n\nUSE [ServerInfo]\nGO\n\nDROP TABLE IF EXISTS server_info;\nGO\n\nCREATE TABLE [dbo].[server_info]([XE01] [tinyint] NULL, [XE02] [tinyint] NULL,\n [XE03] [tinyint] NULL, [XE04] [tinyint] NULL, [XE05] [tinyint] NULL,\n [XE06] [tinyint] NULL, [XE07] [tinyint] NULL, [XE08] [tinyint] NULL,\n      [XE09] [tinyint] NULL, [XE10] [tinyint] NULL, [XE11] [tinyint] NULL,\n [XE12] [tinyint] NULL, [XE13] [tinyint] NULL, [XE14] [tinyint] NULL,\n [XE15] [tinyint] NULL, [XE16] [tinyint] NULL, [XE17] [tinyint] NULL,\n      [XE18] [tinyint] NULL, [XE19] [tinyint] NULL, [XE20] [tinyint] NULL,\n [XE21] [tinyint] NULL, [XE22] [tinyint] NULL, [XE23] [tinyint] NULL,\n [XE24] [tinyint] NULL, [XE25] [tinyint] NULL, [XE26] [tinyint] NULL,\n [XE27] [tinyint] NULL, [XE28] [tinyint] NULL, [XE29] [tinyint] NULL,\n [XE30] [tinyint] NULL, [XE31] [tinyint] NULL, [XE32] [tinyint] NULL\n) ON [PRIMARY];\nGO  \n```", "```py\ndbConn <- odbcDriverConnect('driver={SQL Server};server=TOMAZK\\\\MSSQLSERVER2017;database=ServerInfo;trusted_connection=true') \nserver.feature <- sqlQuery(dbConn, 'SELECT * FROM Server_info') \nclose(dbConn) \nboxplot(server.feature) \n```", "```py\n# replace value 25 with N/A\nserver.feature$XE12[server.feature$XE12==\"25\"]<-NA\nserver.feature$XE18[server.feature$XE18==\"25\"]<-NA\nserver.feature$XE24[server.feature$XE24==\"25\"]<-NA\nserver.feature$XE27[server.feature$XE27==\"25\"]<-NA\n\ncor.plot(server.feature,numbers=TRUE,main=\"Server Features\")  \n```", "```py\nfa.parallel(server.feature, fa=\"fa\")  \n```", "```py\nfa.model <- fa(server.feature,7,n.obs = 459,fm=\"pa\",scores=\"regression\", use=\"pairwise\",rotate=\"varimax\") #can use WLS - weighted least squares\nfa.model.r <- target.rot(fa.model)\nfa.diagram(fa.model.r) \n```", "```py\n-- Factor Analysis\n-- extract factor loadings\n\nDECLARE @Rcode NVARCHAR(MAX)\nSET @Rcode = N'\n ## with actual FA funcitons\n library(psych)\n library(Hmisc)\n ## for data munching and visualization\n library(ggplot2)\n library(plyr)\n library(pastecs)\n\n server.feature <- InputDataSet\n\n server.feature$XE12[server.feature$XE12==\"25\"]<-NA\n server.feature$XE18[server.feature$XE18==\"25\"]<-NA\n server.feature$XE24[server.feature$XE24==\"25\"]<-NA\n server.feature$XE27[server.feature$XE27==\"25\"]<-NA\n\n fa.model <- fa(server.feature\n ,7\n ,fm=\"pa\"\n               ,scores=\"regression\"\n ,use=\"pairwise\"\n ,rotate=\"varimax\") #can use WLS - weighted least squares\n\n fa.loadings <- as.list.data.frame(fa.model$loadings)\n      OutputDataSet <- data.frame(fa.loadings)'\n\n EXEC sp_execute_external_script\n @language = N'R'\n ,@script = @Rcode\n      ,@input_data_1 = N'SELECT * FROM server_info'\nWITH RESULT SETS\n((\n PA1 NUMERIC(16,3)\n ,PA2 NUMERIC(16,3)\n ,PA3 NUMERIC(16,3)\n ,PA4 NUMERIC(16,3)\n ,PA5 NUMERIC(16,3)\n ,PA6 NUMERIC(16,3)\n ,PA7 NUMERIC(16,3)\n ))  \n```", "```py\nUSE [master];\nGO\n\nCREATE DATABASE Workloads;\nGO\n\nUSE Workloads;\nGO  \n```", "```py\nEXEC sp_execute_external_script \n @language = N'R' \n,@script = N' \n               library(car) \n               library(ggplot2) \n               dataset <- InputDataSet \n               dataset$WL_ID <- as.numeric(recode(dataset$WL_ID, \"''WL1''=1; ''WL2''=2;''WL3''=3\")) \n               dataset$Param1 <- as.numeric(dataset$Param1) \n               dataset$Param2 <- as.numeric(dataset$Param2) \n\n               m.dist <- mahalanobis(dataset, colMeans(dataset), cov(dataset)) \n               dataset$maha_dist <- round(m.dist) \n\n               # Mahalanobis Outliers - Threshold set to 7 \n               dataset$outlier_mah <- \"No\" \n               dataset$outlier_mah[dataset$maha_dist > 7] <- \"Yes\" \n\n                image_file = tempfile();   \n               jpeg(filename = image_file);   \n\n               # Scatterplot for checking outliers using Mahalanobis  \n               ggplot(dataset, aes(x = Param1, y = Param2, color = outlier_mah)) + \n                 geom_point(size = 5, alpha = 0.6) + \n                 labs(title = \"Mahalanobis distances for multivariate regression outliers\", \n                        subtitle = \"Comparison on 1 parameter for three synthetic Workloads\") + \n                 xlab(\"Parameter 1\") + \n                 ylab(\"Parameter 2\") + \n                 scale_x_continuous(breaks = seq(5, 55, 5)) + \n                 scale_y_continuous(breaks = seq(0, 70, 5))    + geom_abline(aes(intercept = 12.5607 , slope = 0.5727)) \n\n                 dev.off();  \n               OutputDataSet <- data.frame(data=readBin(file(image_file, \"rb\"), what=raw(), n=1e6))' \n,@input_data_1 = N'SELECT * FROM WLD' \n```", "```py\ndataset$Param1 <- as.numeric(dataset$Param1)\ndataset$Param2 <- as.numeric(dataset$Param2)\ndataset$WL_ID <- as.numeric(recode(dataset$WL_ID, \"'WL1'=1; 'WL2'=2;'WL3'=3\"))\n\nLM.man <- Anova(lm(cbind(Param1, Param2) ~ WL_ID, data=dataset))\nsummary(LM.man)    \n```", "```py\nUSE [master];\nGO\n\nCREATE DATABASE FixSizeDB\nCONTAINMENT = NONE\nON  PRIMARY\n( NAME = N'FixSizeDB', FILENAME = N'C:\\Program Files\\Microsoft SQL Server\\MSSQL14.MSSQLSERVER2017\\MSSQL\\DATA\\FixSizeDB_2.mdf' , \nSIZE = 8192KB , FILEGROWTH = 0)\nLOG ON\n( NAME = N'FixSizeDB_log', FILENAME = N'C:\\Program Files\\Microsoft SQL Server\\MSSQL14.MSSQLSERVER2017\\MSSQL\\DATA\\FixSizeDB_2_log.ldf',\nSIZE = 8192KB , FILEGROWTH = 0)\nGO\nALTER DATABASE [FixSizeDB] SET COMPATIBILITY_LEVEL = 140\nGO\nALTER DATABASE [FixSizeDB] SET RECOVERY SIMPLE\nGO  \n```", "```py\nCREATE TABLE DataPack\n (\n DataPackID BIGINT IDENTITY NOT NULL\n ,col1 VARCHAR(1000) NOT NULL\n ,col2 VARCHAR(1000) NOT NULL\n )  \n```", "```py\nDECLARE @i INT = 1;\nBEGIN TRAN\n WHILE @i <= 1000\n BEGIN\n INSERT dbo.DataPack(col1, col2)\n SELECT\n REPLICATE('A',200)\n ,REPLICATE('B',300);\n SET @i = @i + 1;\n END\nCOMMIT;\nGO  \n```", "```py\nSELECT\n t.NAME AS TableName\n ,s.Name AS SchemaName\n ,p.rows AS RowCounts\n ,SUM(a.total_pages) * 8 AS TotalSpaceKB\n ,SUM(a.used_pages) * 8 AS UsedSpaceKB\n ,(SUM(a.total_pages) - SUM(a.used_pages)) * 8 AS UnusedSpaceKB\nFROM\n sys.tables t\nINNER JOIN sys.indexes AS i\n ON t.OBJECT_ID = i.object_id\nINNER JOIN sys.partitions AS p\n ON i.object_id = p.OBJECT_ID\n AND i.index_id = p.index_id\nINNER JOIN sys.allocation_units AS a\n ON p.partition_id = a.container_id\nLEFT OUTER JOIN sys.schemas AS s\n ON t.schema_id = s.schema_id\nWHERE\n t.NAME NOT LIKE 'dt%'\n AND t.is_ms_shipped = 0\n AND i.OBJECT_ID > 255\n AND t.Name = 'DataPack'\nGROUP BY t.Name, s.Name, p.Rows  \n```", "```py\nDECLARE @nof_steps INT = 0\nWHILE @nof_steps < 15\nBEGIN\n BEGIN TRAN\n -- insert some data\n DECLARE @i INT = 1;\n              WHILE @i <= 1000 -- step is 100 rows\n BEGIN\n                                         INSERT dbo.DataPack(col1, col2)\n SELECT\n                                                             REPLICATE('A',FLOOR(RAND()*200))\n                                                            ,REPLICATE('B',FLOOR(RAND()*300));\n SET @i = @i + 1;\n END\n -- run statistics on table\n INSERT INTO dbo.DataPack\n SELECT\n                     t.NAME AS TableName\n                     ,s.Name AS SchemaName\n                     ,p.rows AS RowCounts\n                     ,SUM(a.total_pages) * 8 AS TotalSpaceKB\n                     ,SUM(a.used_pages) * 8 AS UsedSpaceKB\n                     ,(SUM(a.total_pages) - SUM(a.used_pages)) * 8 AS UnusedSpaceKB\n ,GETDATE() AS TimeMeasure\n FROM \n sys.tables AS t\n                     INNER JOIN sys.indexes AS i\n                     ON t.OBJECT_ID = i.object_id\n                     INNER JOIN sys.partitions AS p\n                     ON i.object_id = p.OBJECT_ID\n                     AND i.index_id = p.index_id\n                     INNER JOIN sys.allocation_units AS a\n                     ON p.partition_id = a.container_id\n                     LEFT OUTER JOIN sys.schemas AS s\n                     ON t.schema_id = s.schema_id\n              WHERE\n                            t.NAME NOT LIKE 'dt%'\n                     AND t.is_ms_shipped = 0\n                     AND t.name = 'DataPack'\n                     AND i.OBJECT_ID > 255\n              GROUP BY t.Name, s.Name, p.Rows\n              WAITFOR DELAY '00:00:02'\n       COMMIT;\nEND\n```", "```py\nDECLARE @RScript nvarchar(max)\nSET @RScript = N'\n library(Hmisc) \n mydata <- InputDataSet\n all_sub <- mydata[2:3]\n c <- cor(all_sub, use=\"complete.obs\", method=\"pearson\")\n t <- rcorr(as.matrix(all_sub), type=\"pearson\")\n c <- cor(all_sub, use=\"complete.obs\", method=\"pearson\")\n c <- data.frame(c)\n OutputDataSet <- c'\nDECLARE @SQLScript nvarchar(max)\nSET @SQLScript = N'SELECT\n TableName\n ,RowCounts\n ,UsedSpaceKB\n ,TimeMeasure\n FROM DataPack_Info_SMALL'\nEXECUTE sp_execute_external_script\n @language = N'R'\n ,@script = @RScript\n ,@input_data_1 = @SQLScript\n WITH result SETS ((RowCounts VARCHAR(100)\n ,UsedSpaceKB  VARCHAR(100)));\nGO  \n```", "```py\nDECLARE @nof_steps INT = 0\nWHILE @nof_steps < 15\nBEGIN\n BEGIN TRAN\n -- insert some data\n DECLARE @i INT = 1;\n DECLARE @insertedRows INT = 0;\n              DECLARE @deletedRows INT = 0;\n DECLARE @Rand DECIMAL(10,2) = RAND()*10\n IF @Rand < 5\n BEGIN\n WHILE @i <= 1000 -- step is 100 rows\n BEGIN\n                                                                  INSERT dbo.DataPack(col1, col2)\n                                                                         SELECT\n                                                                                 REPLICATE('A',FLOOR(RAND()*200))  -- pages are filling up differently\n                                                                                ,REPLICATE('B',FLOOR(RAND()*300));\n                                                               SET @i = @i + 1;\n                                                           END\n SET @insertedRows = 1000 \n                     END\n\n               IF @Rand  >= 5\n BEGIN \n                                  SET @deletedRows = (SELECT COUNT(*) FROM dbo.DataPack WHERE DataPackID % 3 = 0)\n                                  DELETE FROM dbo.DataPack\n                                                    WHERE\n                                  DataPackID % 3 = 0 OR DataPackID % 5 = 0\n\n                     END\n              -- run statistics on table\n              INSERT INTO dbo.DataPack_Info_LARGE\n              SELECT\n                     t.NAME AS TableName\n                     ,s.Name AS SchemaName\n                     ,p.rows AS RowCounts\n                     ,SUM(a.total_pages) * 8 AS TotalSpaceKB\n                     ,SUM(a.used_pages) * 8 AS UsedSpaceKB\n                     ,(SUM(a.total_pages) - SUM(a.used_pages)) * 8 AS UnusedSpaceKB\n                     ,GETDATE() AS TimeMeasure\n                     ,CASE WHEN @Rand < 5 THEN 'Insert'\n                             WHEN @Rand >= 5 THEN 'Delete'\n                             ELSE 'meeeh' END AS Operation\n                     ,CASE WHEN @Rand < 5 THEN @insertedRows\n                             WHEN @Rand >= 5 THEN @deletedRows\n                             ELSE 0 END AS NofRowsOperation\n FROM \n                           sys.tables AS t\n                     INNER JOIN sys.indexes AS i\n                     ON t.OBJECT_ID = i.object_id\n                     INNER JOIN sys.partitions AS p\n                     ON i.object_id = p.OBJECT_ID\n                     AND i.index_id = p.index_id\n                     INNER JOIN sys.allocation_units AS a\n                     ON p.partition_id = a.container_id\n                     LEFT OUTER JOIN sys.schemas AS s\n                     ON t.schema_id = s.schema_id\n\n              WHERE\n                            t.NAME NOT LIKE 'dt%'\n                     AND t.is_ms_shipped = 0\n                     AND t.name = 'DataPack'\n                     AND i.OBJECT_ID > 255\n              GROUP BY t.Name, s.Name, p.Rows\n              WAITFOR DELAY '00:00:01'\n       COMMIT;\nEND  \n```", "```py\nDECLARE @RScript1 nvarchar(max)\nSET @RScript1 = N'\n    library(Hmisc) \n                                mydata <- InputDataSet\n                                all_sub <- mydata[4:5]\n                                c <- cor(all_sub, use=\"complete.obs\", method=\"pearson\")\n                                c <- data.frame(c)\n                                OutputDataSet <- c'\n\nDECLARE @SQLScript1 nvarchar(max)\nSET @SQLScript1 = N'SELECT\n\n                                              TableName\n                                             ,RowCounts\n                                             ,TimeMeasure\n    ,UsedSpaceKB \n                                             ,UnusedSpaceKB\n                                             FROM DataPack_Info_SMALL\n                                             WHERE RowCounts <> 0'\nEXECUTE sp_execute_external_script\n @language = N'R'\n ,@script = @RScript1\n ,@input_data_1 = @SQLScript1\n       WITH result SETS ( (\n                                          RowCounts VARCHAR(100)\n                                         ,UsedSpaceKB  VARCHAR(100)\n                                         ));\n\nDECLARE @RScript2 nvarchar(max)\nSET @RScript2 = N'\n    library(Hmisc) \n                            mydata <- InputDataSet\n                            all_sub <- mydata[4:5]\n                            c <- cor(all_sub, use=\"complete.obs\", method=\"pearson\")\n                            c <- data.frame(c)\n                            OutputDataSet <- c'\nDECLARE @SQLScript2 nvarchar(max)\nSET @SQLScript2 = N'SELECT\n                                          TableName\n                                         ,RowCounts\n                                         ,TimeMeasure\n    ,UsedSpaceKB \n                                         ,UnusedSpaceKB\n                                         FROM DataPack_Info_LARGE\n                                         WHERE NofRowsOperation <> 0\n                                         AND RowCounts <> 0'\n\nEXECUTE sp_execute_external_script\n @language = N'R'\n ,@script = @RScript2\n ,@input_data_1 = @SQLScript2\n WITH result SETS ( (\n RowCounts VARCHAR(100)\n ,UsedSpaceKB  VARCHAR(100)\n                                         )\n                                   );\nGO  \n```", "```py\nSELECT\n TableName\n ,Operation\n ,NofRowsOperation\n ,UsedSpaceKB\n ,UnusedSpaceKB\nFROM dbo.DataPack_Info_LARGE\n```", "```py\n-- GLM prediction\nDECLARE @SQL_input AS NVARCHAR(MAX)\nSET @SQL_input = N'SELECT\n TableName\n                                  ,CASE WHEN Operation = ''Insert'' THEN 1 ELSE 0 END AS Operation\n ,NofRowsOperation\n ,UsedSpaceKB\n ,UnusedSpaceKB\n FROM dbo.DataPack_Info_LARGE\n WHERE\n NofRowsOperation <> 0';\n\nDECLARE @R_code AS NVARCHAR(MAX)\nSET @R_code = N'library(RevoScaleR)\n library(dplyr)\n                DPLogR <- rxGlm(UsedSpaceKB ~ Operation + NofRowsOperation + UnusedSpaceKB, data = DataPack_info, family = Gamma)\n                df_predict <- data.frame(TableName=(\"DataPack\"), Operation=(1), NofRowsOperation=(451), UnusedSpaceKB=(20))\n predictions <- rxPredict(modelObject = DPLogR, data = df_predict, outData = NULL, \n                                predVarNames = \"UsedSpaceKB\", type = \"response\",checkFactorLevels=FALSE);\n                OutputDataSet <- predictions'\n\nEXEC sys.sp_execute_external_script\n @language = N'R'\n    ,@script = @R_code\n    ,@input_data_1 = @SQL_input\n ,@input_data_1_name = N'DataPack_info'\n       WITH RESULT SETS ((\n                         UsedSpaceKB_predict INT\n                         ));\nGO \n```", "```py\ndf_predict <- data.frame(TableName=(\"DataPack\"), Operation=(1), NofRowsOperation=(451), UnusedSpaceKB=(20))\n```", "```py\nCREATE PROCEDURE Predict_UsedSpace\n    (\n     @TableName NVARCHAR(100)\n    ,@Operation CHAR(1)  -- 1  = Insert; 0 = Delete\n    ,@NofRowsOperation NVARCHAR(10)\n    ,@UnusedSpaceKB NVARCHAR(10)\n    )\n    AS\n    DECLARE @SQL_input AS NVARCHAR(MAX)\n    SET @SQL_input = N'SELECT\n                                      TableName\n                                      ,CASE WHEN Operation = ''Insert'' THEN 1 ELSE 0 END AS Operation\n                                      ,NofRowsOperation\n                                      ,UsedSpaceKB\n                                      ,UnusedSpaceKB\n                                       FROM dbo.DataPack_Info_LARGE\n                                       WHERE\n                                             NofRowsOperation <> 0';\n    DECLARE @R_code AS NVARCHAR(MAX)\n    SET @R_code = N'library(RevoScaleR)\n                    DPLogR <- rxGlm(UsedSpaceKB ~ Operation + NofRowsOperation + UnusedSpaceKB, data = DataPack_info, family = Gamma)\n    df_predict <- data.frame(TableName=(\"'+@TableName+'\"), Operation=('+@Operation+'), \n                              NofRowsOperation=('+@NofRowsOperation+'), UnusedSpaceKB=('+@UnusedSpaceKB+'))\n                    predictions <- rxPredict(modelObject = DPLogR, data = df_predict, outData = NULL,  predVarNames = \"UsedSpaceKB\", type = \"response\",checkFactorLevels=FALSE);\n                    OutputDataSet <- predictions'\n\n    EXEC sys.sp_execute_external_script\n         @language = N'R'\n        ,@script = @R_code\n        ,@input_data_1 = @SQL_input\n        ,@input_data_1_name = N'DataPack_info'\n\n    WITH RESULT SETS ((\n                                        UsedSpaceKB_predict INT\n                                       ));\n    GO\n\n```", "```py\nEXECUTE Predict_UsedSpace\n @TableName = 'DataPack'\n                     ,@Operation = 1\n                     ,@NofRowsOperation = 120\n                     ,@UnusedSpaceKB = 2;\nGO\n\nEXECUTE Predict_UsedSpace\n                     @TableName = 'DataPack'\n                     ,@Operation = 1\n                     ,@NofRowsOperation = 500\n                     ,@UnusedSpaceKB = 12;\nGO  \n```"]