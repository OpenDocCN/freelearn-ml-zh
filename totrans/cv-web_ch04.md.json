["```py\n    <script src=\"img/frontalface.js\"></script>\n    ```", "```py\n    var classifier = jsfeat.haar.frontalface;\n    ```", "```py\n    var imageData = context.getImageData(0, 0, cols, rows);\n    ```", "```py\n    var mat = new jsfeat.matrix_t(cols, rows, jsfeat.U8C1_t);\n    jsfeat.imgproc.grayscale(imageData.data, cols, rows, mat);\n    ```", "```py\n    jsfeat.imgproc.equalize_histogram(mat, mat);\n    jsfeat.imgproc.gaussian_blur(mat, mat, 3);\n    ```", "```py\n    var integralSum = new Int32Array((cols + 1) * (rows + 1));\n    var integralSqSum = new Int32Array((cols + 1) * (rows + 1));\n    var integralTilted = new Int32Array((cols + 1) * (rows + 1));\n    jsfeat.imgproc.compute_integral_image(mat, integralSum, integralSqSum, classifier.tilted ? integralTilted : null);\n    ```", "```py\n    var integralCanny = new Int32Array((cols + 1) * (rows + 1));\n    var edges = new jsfeat.matrix_t(cols, rows, jsfeat.U8C1_t);\n    jsfeat.imgproc.canny(mat, edges, 10, 50);\n    jsfeat.imgproc.compute_integral_image(edges, integralCanny, null, null);\n    ```", "```py\n    jsfeat.haar.edges_density = 0.13;\n    ```", "```py\n    var minScale = 2;\n    var scaleFactor = 1.1;\n    var bb = jsfeat.haar.detect_multi_scale(integralSum, integralSqSum, integralTilted, integralCanny,\n            mat.cols, mat.rows, classifier, scaleFactor, minScale);\n    ```", "```py\nbb = jsfeat.haar.group_rectangles(bb, 1);\n```", "```py\njsfeat.math.qsort(bb, 0, bb.length - 1, function (a, b) {\n    return (b.confidence < a.confidence);\n});\nfor (var i = 0; i < maxFaceNumber; ++i) {\n    var b = bb[i];\n    context.strokeStyle = \"#fff\";\n    context.strokeRect(b.x, b.y, b.width, b.height);\n}\n```", "```py\n<script src=\"img/bbf_face.js\"></script>\n```", "```py\njsfeat.bbf.prepare_cascade(jsfeat.bbf.face_cascade);\n```", "```py\nvar imageData = context.getImageData(0, 0, cols, rows);\nvar mat = new jsfeat.matrix_t(cols, rows, jsfeat.U8C1_t);\njsfeat.imgproc.grayscale(imageData.data, cols, rows, mat);\n```", "```py\nvar pyramid = jsfeat.bbf.build_pyramid(mat, minWidth, minHeight, interval);\n```", "```py\nvar bb = jsfeat.bbf.detect(pyramid, jsfeat.bbf.face_cascade);\nbb = jsfeat.bbf.group_rectangles(bb, 1);\n```", "```py\n    <script src=\"img/face.js\"></script>\n    <script src=\"img/eye.js\"></script>\n    <script src=\"img/mouth.js\"></script>\n    ```", "```py\n    var tracker = new tracking.ObjectTracker(['face', 'eye', 'mouth']);\n    ```", "```py\n    tracker.setStepSize(1.2);\n    ```", "```py\n    tracker.on('track', function (event) {\n        event.data.forEach(function (rect) {\n            plot(rect.x, rect.y, rect.width, rect.height);\n        });\n    });\n    ```", "```py\n    var canvas = document.getElementById('initCanvas');\n    var context = canvas.getContext('2d');\n    function plot(x, y, w, h) {\n        context.lineWidth = 3;\n        context.globalAlpha = 0.8;\n        context.strokeStyle = \"#fff\";\n        context.strokeRect(x, y, w, h);\n    }\n    ```", "```py\ntracking.track('#initCanvas', tracker);\n```", "```py\n    <div id=\"photo\"><img id=\"img\" src=\"img/image.jpg\"/></div>\n    ```", "```py\n    var theBeatles = ['George Harrison', 'John Lennon', 'Ringo Starr', 'Paul McCartney'];\n    ```", "```py\n    var tracker = new tracking.ObjectTracker('face');\n    ```", "```py\n    tracker.on('track', function (event) {\n        var data = event.data;\n        data.sort(function (a, b) {\n            return b.x â€“ a.x;\n        });\n        data = data.filter(function (el) {\n            return el.width >= 50;\n        });\n        data.forEach(function (rect) {\n            tag(rect.x, rect.y, rect.width, rect.height);\n        });\n    });\n    ```", "```py\n    var img = document.getElementById('img');\n    var tag = function (x, y, w, h) {\n        var rect = document.createElement('div');    \n        var input = document.createElement('input');\n\n        input.value = theBeatles.pop();\n        rect.appendChild(input);\n        imageContainer.appendChild(rect);\n        rect.style.width = w + 'px';\n        rect.style.height = h + 'px';\n        rect.style.left = (img.offsetLeft + x) + 'px';\n        rect.style.top = (img.offsetTop + y) + 'px';\n        rect.style.position = 'absolute';\n        rect.style.border = '3px solid white';\n    };\n    ```", "```py\n    tracking.track(img, tracker);\n    ```", "```py\n    <script src=\"img/headtrackr.js\"></script>\n    ```", "```py\n    <canvas id=\"buffer\" width=\"320\" height=\"240\" style=\"display:none\"></canvas>\n    <video id=\"inputVideo\" autoplay loop width=\"320\" height=\"240\"></video>\n    <canvas id=\"overlay\" width=\"320\" height=\"240\"></canvas>\n    <canvas id=\"debug\" width=\"320\" height=\"240\"></canvas>\n    ```", "```py\n    <span id='headtrackerMessage'></span>\n    ```", "```py\n    var canvasInput = document.getElementById('buffer');\n    var videoInput = document.getElementById('inputVideo');\n    var canvasOverlay = document.getElementById('overlay');\n    var overlayContext = canvasOverlay.getContext('2d');\n    var debugOverlay = document.getElementById('debug');\n    canvasOverlay.style.position = \"absolute\";\n    canvasOverlay.style.top = '0px';\n    canvasOverlay.style.zIndex = '100001';\n    canvasOverlay.style.display = 'block';\n    ```", "```py\n    var htracker = new headtrackr.Tracker({\n        altVideo: {webm: \"/path/to/your/video.webm\"},\n        calcAngles: true,\n        ui: true,\n        debug: debugOverlay\n    });\n    ```", "```py\n    htracker.init(videoInput, canvasInput);\n    htracker.start();\n    ```", "```py\n    htracker.stop();\n    ```", "```py\n    document.addEventListener(\"facetrackingEvent\", function (event) {\n        overlayContext.clearRect(0, 0, 320, 240);\n        if (event.detection == \"CS\") {\n            overlayContext.translate(event.x, event.y);\n            overlayContext.rotate(event.angle - (Math.PI / 2));\n            overlayContext.strokeStyle = \"#00CC00\";\n            overlayContext.strokeRect((-event.width / 2) >> 0, (-event.height / 2) >> 0, event.width, event.height);\n            overlayContext.rotate((Math.PI / 2) - event.angle);\n            overlayContext.translate(-event.x, -event.y);\n        }\n    });\n    ```"]