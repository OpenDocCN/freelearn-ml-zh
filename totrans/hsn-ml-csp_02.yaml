- en: ReflectInsight â€“ Real-Time Monitoring
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Every developer needs to have a good logging tool. Unfortunately, what I see
    happening a lot is developers keeping up with the latest and greatest of everything,
    but not logging. In a way this is good, the best logging framework is the one
    you don't even know is working. However, if you have not used **ReflectInsight**
    from **ReflectSoftware** before, you are going to love this chapter. It is so
    incredibly important to have the right logging tool, especially in machine learning,
    and nothing comes close to the rich, robust logging provided by this tool!
  prefs: []
  type: TYPE_NORMAL
- en: You absolutely need to know what's going on inside your algorithm, and ReflectSoftware
    has the richest logging capabilities around. Especially when it comes to machine
    learning algorithms, there is nothing that remotely comes close. And when you
    move into deep learning, you are going to be very happy you can see what is going
    on under the covers.
  prefs: []
  type: TYPE_NORMAL
- en: 'With an algorithm running for possibly days, the insights you receive from
    the right kind of logging are invaluable:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cc573a49-f429-4cdd-9a25-af4843fb4fd8.png)'
  prefs: []
  type: TYPE_IMG
- en: ReflectInsight is comprised of a **Software Development Kit** (**SDK**), a router,
    a Log Viewer, and a Live Viewer. We'll take up each one separately and discuss
    them in detail.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Router
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Log Viewer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Live Viewer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Message navigation
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Searching through your messages
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Time zone formatting
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Auto Save/Purge
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: SDK
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuration editor
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Router
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The router is the central part of the logging system. All log messages are
    sent to the router, which can distribute the messages from there to listeners,
    such as viewers, text files, binary files, event logs, databases, and more. You
    would typically have the router installed on a separate machine from the rest
    of your logging system, but you do not have to. Once installed and configured
    (the configuration out of the box is usually suitable for most situations), the
    router runs as a Windows service and has no user interface, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/540171a8-236d-4940-af41-c4c4c65bd7b4.png)'
  prefs: []
  type: TYPE_IMG
- en: Next we'll talk about the Log and Live Viewers.
  prefs: []
  type: TYPE_NORMAL
- en: Log Viewer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Log Viewer is designed to view historical log files that have been saved
    either manually or from the router/viewer configuration. If you are streaming
    a high number of messages through the system, you will no doubt collect a lot
    of log files; they may need to be viewed. I wrote an enterprise-grade microservice
    system for a client that used ReflectInsight at the center of its system and streamed
    messages to and through a **RabbitMQ** system.
  prefs: []
  type: TYPE_NORMAL
- en: On average, we streamed roughly 1 million messages a day (it is still used in
    production); when problems arose, the Log Viewer's historical logging capabilities
    were invaluable.
  prefs: []
  type: TYPE_NORMAL
- en: Live Viewer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Live Viewer is what you will use most of the time to view your real-time
    logging. The capabilities of the Live Viewer are extensive to say the least. Briefly,
    the high-performance logging allows us to monitor instrumented applications in
    real time by displaying log messages in the Live Viewer. We can log incredibly
    rich details, such as exceptions, objects, datasets, images, process and thread
    information, and well-formatted XML. We can also quickly and easily navigate and
    trace through our applications to find the information we need. The Message Details
    panel displays the extended details of the selected message. The details could
    be as simple as the message itself, or complex data such as an object, dataset,
    binary blob, image, process and thread information, and the contents of a collection.
    Syntax highlighting is available for select message types such as SQL, XML, and
    HTML-related messages, as well as full Unicode support, which aids in the viewing
    of these types of messages.
  prefs: []
  type: TYPE_NORMAL
- en: Message navigation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ReflectInsight supports many ways of navigating through your logged messages.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can navigate using one of the following methods:'
  prefs: []
  type: TYPE_NORMAL
- en: Find a matching Enter/Exit method block
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jump to a parent Enter/Exit method block
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jump from any message in a User Defined view to the All Messages view
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Go to a message by Line Number
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Advanced Search
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Quick Search (active view only)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Message Type browse navigator
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bookmarks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Message properties
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This panel allows us to further inspect a selected message. We can view various
    Date Time values, the Time Zone, Process Id, Thread Id, Request Id, Category,
    Machine Name, and so on. We can also extend the message Properties panel by attaching
    user-defined properties to single or multiple messages during logging:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c168ac48-4218-435f-99f8-f78695f18066.png)'
  prefs: []
  type: TYPE_IMG
- en: Watches
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Available only in the Live Viewer, the Watches panel allows us to display non-persistent
    information for quick and dirty data change. We can write directly to the Watches
    or, if using the ReflectInsight **PostSharp AOP** extension, we can easily decorate
    an object property with a predefined custom attribute.
  prefs: []
  type: TYPE_NORMAL
- en: 'This attribute forces ReflectInsight to display the value of the property whenever
    its value changes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c0d9f98e-e9e4-43d6-8e2f-5dae14b77d0b.png)'
  prefs: []
  type: TYPE_IMG
- en: Bookmarks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Bookmarks panel allows us to view bookmarks for the current logging session:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fad43f8c-6956-436c-ae0e-c1c095f19158.png)'
  prefs: []
  type: TYPE_IMG
- en: 'It can be persisted with our log file for later retrieval. We can filter bookmarks
    for the active view or a given view, or see all bookmarks across All Views. We
    can also navigate to any bookmark and immediately activate the view to select
    where the bookmarked message is located:'
  prefs: []
  type: TYPE_NORMAL
- en: Call Stack
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Call Stack panel displays the Call Stack level of the current selected message.
    Call Stack entries are generated using the Enter/Exit methods, or if the message
    was contained within the `TraceMethod` using block.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can easily navigate the Call Stack by double-clicking on a Call Stack entry,
    taking us to the top of the Enter/Exit message block within the active message
    log panel:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5eae42c7-0b4e-44c7-9c8a-bc53c5a8f513.png)'
  prefs: []
  type: TYPE_IMG
- en: Searching through your messages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Live Viewer provides two ways to search messages by criteria, as shown
    in the following screenshot. They are Quick Search and Advanced Search:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Quick Search** is mainly used for simple, quick, text-based searching.'
  prefs: []
  type: TYPE_NORMAL
- en: Advanced Search
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This is primarily used to search messages where a more complex search criterion
    is needed. The search criteria can include a combination of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Message Content
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Message Type
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Content AND Message Type
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Content OR Message Type
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In addition to a Regular Expression
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Advanced Search view provides the ability to either navigate to the search
    result or bookmark it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9b7324e9-24bf-44fd-9b6b-e47b992b3786.png)'
  prefs: []
  type: TYPE_IMG
- en: Time zone formatting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can display our time details in either Standard or Military time formats.
    Select the Time Zone Type that best suits your location, such as Source, Local,
    UTC, or Custom (choosing from one of the available system time zones).
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/be6933e7-e724-41b2-9d65-a5258373805a.png)'
  prefs: []
  type: TYPE_IMG
- en: Auto Save/Purge
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Apart from the library''s ability to Auto Save rolling log files, the Live
    Viewer has similar capabilities in addition to Auto Purge the top portion of a
    rolling log file. You can configure the Live Viewer to either Auto Save or Auto
    Purge by applying one of the following methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/dfe7af23-ee0f-4f33-96a4-8032466e2135.png)'
  prefs: []
  type: TYPE_IMG
- en: Auto Save -This method forces the Live Viewer to save the files once a specific
    criterion has been met (that is, on a new day and/or message limit).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Auto Purge -This method forces the Live Viewer to purge the top portion of the
    logged messages, based on predefined size percentages of the current log file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'It is sufficient to say that if we look at the following screenshot, we can
    see the amount of information that may be gathered from our algorithms and applications;
    it''s huge:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/80faab8c-4cab-4a79-a05e-84853e12b424.png)'
  prefs: []
  type: TYPE_IMG
- en: Example
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We've mentioned just how valuable a tool such as this can be when it comes to
    machine learning, so it's only fair that we show you exactly what we mean. Up
    next is a screenshot of an actual machine learning algorithm outputting data to
    the Live Viewer. Without this information in real time, we would be lost with
    respect to the efficacy and performance of our application!
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d4bfc724-4901-4e4e-a8b5-b9bdac3900d5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'ReflectInsight Utilities:'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Message Statistics can be viewed and adjusted to meet your criteria with this
    incredibly valuable tool. You can search for various types of messages, by names,
    categories, users and more. From there you can see the composition of such messages.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/55f4be94-f881-4519-989e-597c384f3dbc.png)'
  prefs: []
  type: TYPE_IMG
- en: Watches
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Watches observe parameters and variables in real-time as shown below. You define
    your own watches programatically and periodically update their values and/or parameters.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2801e7ff-f9d2-4c4c-97b2-1255c488cfc8.png)'
  prefs: []
  type: TYPE_IMG
- en: Software Development Kit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The SDK is what allows us to connect ReflectInsight to our applications. We
    will see as we get further along just how easy it is to do this. The beautiful
    thing about how this SDK works compared to others is the rich image set assigned
    to each message. When you have thousands of messages streaming per second, colors
    and images can be a huge help in focusing your attention on just what you need
    to see.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a screenshot that shows exactly what I mean. As an example,
    if we use the SendException message, then the red *X* will be displayed in the
    icon panel along the far left-hand side of the Live Viewer/Log Viewer. The same
    applies for all the other messages you see in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5a4f32d3-060b-4c44-871c-9ae0d0c7a5ee.png)'
  prefs: []
  type: TYPE_IMG
- en: Configuration editor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The configuration editor is a visual interface into the ability to make configuration
    parameter changes for the application. This makes it simpler and more intuitive
    compared to changing text file parameters.
  prefs: []
  type: TYPE_NORMAL
- en: Overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can use the XML-based configuration file with our applications to make the
    ReflectInsight viewer behave the way we want it to. There are a few configuration
    categories available, from autosave and filtering, to message coloring and many
    more.
  prefs: []
  type: TYPE_NORMAL
- en: XML configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ReflectInsight is configured using an XML configuration file. The configuration
    information can be embedded within other XML configuration files, such as the
    application or `web.config` file, or in a separate file. The configuration is
    easily readable and updatable while retaining the flexibility to express all configurations.
  prefs: []
  type: TYPE_NORMAL
- en: Alternatively, ReflectInsight can be configured programmatically. We will use
    a combination of both throughout this book, with the main configuration usually
    done via the `app.config` file.
  prefs: []
  type: TYPE_NORMAL
- en: Dynamic configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ReflectInsight automatically monitors its configuration file for changes and
    dynamically applies these changes when made. In many cases, it is possible to
    diagnose application issues without terminating the process in question. This
    can be a very valuable tool in investigating issues from our deployed applications.
  prefs: []
  type: TYPE_NORMAL
- en: Main Screen
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The ReflectInsight insight configuration editor helps in easily creating configuration
    files through a visual interface, but advanced users can work with XML.
  prefs: []
  type: TYPE_NORMAL
- en: 'The tool is very useful for editing settings, defining message patterns/formats,
    defining extensions, defining listeners, associating colors with message types,
    and more:'
  prefs: []
  type: TYPE_NORMAL
- en: Easy-to-understand layout
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It remembers the recent files list
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Predefined selections and dynamic section lookups
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Key values popup editor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Message pattern popup editor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Method types popup editor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Color definition and message color popup editor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Following is a screenshot of the configuration editor and the various parameters
    its changes can affect:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3f8d6cb0-ed3d-4aed-aa0b-7d3e3991fef5.png)'
  prefs: []
  type: TYPE_IMG
- en: You can download a trial copy of ReflectInsight from [www.reflectsoftware.com](http://www.reflectsoftware.com).
    Mention this book when purchasing and get a substantial discount off the retail
    price!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about ReflectInsight and the incredible benefits
    it can provide you. We saw especially how it can help the machine learning developer
    see exactly what is going on inside their algorithm. I encourage you to download
    your copy and try it out. You will never look at logging the same way again. Our
    next chapter will expose the famous Traveling Salesman problem, and we will get
    our first exposure to the second love of my life, neurons, as well as work with
    the famous Bayes theorem!
  prefs: []
  type: TYPE_NORMAL
- en: ReflectInsight is a copyright of ReflectSoftware. All images, text, and logos
    are used with permission.
  prefs: []
  type: TYPE_NORMAL
