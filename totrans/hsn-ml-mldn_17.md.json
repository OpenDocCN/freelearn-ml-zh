["```py\npublic class DimensionsBase\n{\n    public float X { get; set; }\n\n    public float Y { get; set; }\n\n    public float Height { get; set; }\n\n    public float Width { get; set; }\n}\n```", "```py\npublic class YoloBoundingBox\n{\n    public BoundingBoxDimensions Dimensions { get; set; }\n\n    public string Label { get; set; }\n\n    public float Confidence { get; set; }\n\n    public RectangleF Rect => new RectangleF(Dimensions.X, Dimensions.Y, Dimensions.Width, Dimensions.Height);\n\n    public Color BoxColor { get; set; }\n}\n```", "```py\npublic class BoundingBoxDimensions : DimensionsBase { }\n```", "```py\n<Grid>\n    <Grid.RowDefinitions>\n        <RowDefinition Height=\"Auto\" />\n        <RowDefinition Height=\"*\" />\n    </Grid.RowDefinitions>\n\n    <Button Grid.Row=\"0\" Margin=\"0,10,0,0\" Width=\"200\" Height=\"35\" Content=\"Select Image File\" HorizontalAlignment=\"Center\" Click=\"btnSelectFile_Click\" />\n\n    <Image Grid.Row=\"1\" Margin=\"10,10,10,10\" Source=\"{Binding SelectedImageSource}\" />\n</Grid>\n```", "```py\n<Window x:Class=\"chapter13.wpf.MainWindow\"\n\n        mc:Ignorable=\"d\"\n        ResizeMode=\"NoResize\"\n        WindowStyle=\"SingleBorderWindow\"\n        WindowState=\"Maximized\"\n        WindowStartupLocation=\"CenterScreen\"\n        Background=\"#1e1e1e\"\n        Title=\"Chapter 13\" Height=\"450\" Width=\"800\">\n```", "```py\npublic struct ImageNetSettings\n{\n    public const int imageHeight = 416;\n    public const int imageWidth = 416;\n}   \n```", "```py\npublic struct TinyYoloModelSettings\n{\n    public const string ModelInput = \"image\";\n\n    public const string ModelOutput = \"grid\";\n}\n```", "```py\npublic (bool Success, string Exception) Initialize()\n{\n    try\n    {\n        if (File.Exists(ML_NET_MODEL))\n        {\n            var data = MlContext.Data.LoadFromEnumerable(new List<ImageDataInputItem>());\n\n            var pipeline = MlContext.Transforms.LoadImages(outputColumnName: \"image\", imageFolder: \"\", \n                    inputColumnName: nameof(ImageDataInputItem.ImagePath))\n                .Append(MlContext.Transforms.ResizeImages(outputColumnName: \"image\", \n                    imageWidth: ImageNetSettings.imageWidth, \n                    imageHeight: ImageNetSettings.imageHeight, \n                    inputColumnName: \"image\"))\n                .Append(MlContext.Transforms.ExtractPixels(outputColumnName: \"image\"))\n                .Append(MlContext.Transforms.ApplyOnnxModel(modelFile: ML_NET_MODEL, \n                    outputColumnNames: new[] { TinyYoloModelSettings.ModelOutput }, \n                    inputColumnNames: new[] { TinyYoloModelSettings.ModelInput }));\n\n            _model = pipeline.Fit(data);\n\n            return (true, string.Empty);\n        }\n\n        return (false, string.Empty);\n    }\n    catch (Exception ex)\n    {\n        return (false, ex.ToString());\n    }\n}\n```", "```py\npublic byte[] Predict(string fileName)\n{\n    var imageDataView = MlContext.Data.LoadFromEnumerable(new List<ImageDataInputItem> { new ImageDataInputItem { ImagePath = fileName } });\n\n    var scoredData = _model.Transform(imageDataView);\n\n    var probabilities = scoredData.GetColumn<float[]>(TinyYoloModelSettings.ModelOutput);\n\n    var parser = new YoloOutputParser();\n\n    var boundingBoxes =\n        probabilities\n            .Select(probability => parser.ParseOutputs(probability))\n            .Select(boxes => parser.FilterBoundingBoxes(boxes, 5, .5F));\n\n    return DrawBoundingBox(fileName, boundingBoxes.FirstOrDefault());\n}\n```", "```py\nprivate void LoadImageBytes(byte[] parsedImageBytes)\n{\n    var image = new BitmapImage();\n\n    using (var mem = new MemoryStream(parsedImageBytes))\n    {\n        mem.Position = 0;\n\n        image.BeginInit();\n\n        image.CreateOptions = BitmapCreateOptions.PreservePixelFormat;\n        image.CacheOption = BitmapCacheOption.OnLoad;\n        image.UriSource = null;\n        image.StreamSource = mem;\n\n        image.EndInit();\n    }\n\n    image.Freeze();\n\n    SelectedImageSource = image;\n}\n```", "```py\npublic void Classify(string imagePath)\n{\n    var result = _prediction.Predict(imagePath);\n\n    LoadImageBytes(result);\n}\n```"]