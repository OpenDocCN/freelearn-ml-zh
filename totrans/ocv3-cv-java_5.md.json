["```py\npublic boolean train(Mat trainData, int tflag, Mat responses)\n```", "```py\npublic class App\n{\n  static{ System.loadLibrary(Core.NATIVE_LIBRARY_NAME); }\n\n  public static void main(String[] args) throws Exception {\n\n    Mat data = new Mat(5, 3, CvType.CV_32FC1, new Scalar(0));\n\n    data.put(0, 0, new float[]{1.69f, 1, 0});\n    data.put(1, 0, new float[]{1.76f, 0, 0});\n    data.put(2, 0, new float[]{1.80f, 0, 0});\n    data.put(3, 0, new float[]{1.77f, 0, 0});\n    data.put(4, 0, new float[]{1.83f, 0, 1});\n\n    Mat responses = new Mat(5, 1, CvType.CV_32SC1, new Scalar(0));\n\n    responses.put(0,0, new int[]{0,1,1,0,1});\n\n    Boost boost = Boost.create();\n    boost.setBoostType(Boost.DISCRETE);\n    boost.setWeakCount(3);\n    boost.setMinSampleCount(4);\n\n    boost.train(data, Ml.ROW_SAMPLE, responses);\n\n    //This will simply show the input data is correctly classified\n\n    for(int i=0;i<5;i++){\n      System.out.println(\"Result = \" + boost.predict(data.row(i)));\n    }\n\n    Mat newPerson = new Mat(1,3,CvType.CV_32FC1, new Scalar(0));\n    newPerson.put(0, 0, new float[]{1.60f, 1,0});\n    System.out.println(newPerson.dump());\n    System.out.println(\"New (woman) = \" + boost.predict(newPerson));\n\n    newPerson.put(0, 0, new float[]{1.8f, 0,1});\n    System.out.println(\"New (man) = \" + boost.predict(newPerson));\n\n    newPerson.put(0, 0, new float[]{1.7f, 1,0});\n    System.out.println(\"New (?) = \" + boost.predict(newPerson));\n\n  }\n}\n```", "```py\nprivate void loadCascade() {\n  String cascadePath = \"src/main/resources/cascades/lbpcascade_frontalface.xml\";\n  faceDetector = new CascadeClassifier(cascadePath);\n}\n```", "```py\nprivate void detectAndDrawFace(Mat image) {\n  MatOfRect faceDetections = new MatOfRect();\n  faceDetector.detectMultiScale(image, faceDetections);\n  for (Rect rect : faceDetections.toArray()) {\n    Core.rectangle(image, new Point(rect.x, rect.y), new Point(rect.x + rect.width, rect.y + rect.height), new Scalar(0, 255, 0));\n  }\n}\n```", "```py\nopencv_createsamples -info cars.info -num 550 -w 48 -h 24 -vec cars.vec.\n```", "```py\nimages/image1.jpg  1  90 100 45 45\nimages/image2.jpg  2  200 300 50 50   100 30 25 25\n```", "```py\nopencv_traincascade -data data -vec cars.vec -bg cars-neg.info -numPos 500 -numNeg 500 -numStages 10 -w 48 -h 24 -featureType LBP\n```", "```py\nconvert_cascade --size=\"48x24\" haarcascade haarcascade-inter.xml\n```"]