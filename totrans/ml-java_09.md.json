["```py\nString databasePath = \"/Users/bostjan/Dropbox/ML Java Book/book/datasets/chap9/features.arff\"; \n\n// Load the data in arff format \nInstances data = new Instances(new BufferedReader(new \n   FileReader(databasePath))); \n\n// Set class the last attribute as class \ndata.setClassIndex(data.numAttributes() - 1); \n\n// Build a basic decision tree model \nString[] options = new String[]{}; \nJ48 model = new J48(); \nmodel.setOptions(options); \nmodel.buildClassifier(data); \n\n// Output decision tree \nSystem.out.println(\"Decision tree model:\\n\"+model); \n```", "```py\n    Decision tree model:\n    J48 pruned tree\n    ------------------\n\n    max <= 10.353474\n    |   fft_coef_0000 <= 38.193106: standing (46.0)\n    |   fft_coef_0000 > 38.193106\n    |   |   fft_coef_0012 <= 1.817792: walking (77.0/1.0)\n    |   |   fft_coef_0012 > 1.817792\n    |   |   |   max <= 4.573082: running (4.0/1.0)\n    |   |   |   max > 4.573082: walking (24.0/2.0)\n    max > 10.353474: running (93.0)\n\n    Number of Leaves  : 5\n\n    Size of the tree : 9\n```", "```py\n// Check accuracy of model using 10-fold cross-validation \nEvaluation eval = new Evaluation(data); \neval.crossValidateModel(model, data, 10, new Random(1), new \n   String[] {}); \nSystem.out.println(\"Model performance:\\n\"+ \n   eval.toSummaryString()); \n```", "```py\n    Correctly Classified Instances         226               92.623  %\n    Incorrectly Classified Instances        18                7.377  %\n    Kappa statistic                          0.8839\n    Mean absolute error                      0.0421\n    Root mean squared error                  0.1897\n    Relative absolute error                 13.1828 %\n    Root relative squared error             47.519  %\n    Coverage of cases (0.95 level)          93.0328 %\n    Mean rel. region size (0.95 level)      27.8689 %\n    Total Number of Instances              244     \n```", "```py\nclass SpuriousActivityRemoval{ \n\n  List<Object> last; \n  int window; \n\n  public SpuriousActivityRemoval(int window){ \n    this.last = new ArrayList<Object>(); \n    this.window = window; \n  } \n```", "```py\n  public Object filter(Object obj){ \n    if(last.size() < window){ \n      last.add(obj); \n      return obj; \n  } \n```", "```py\n    Object o = getMostFrequentElement(last); \n    last.add(obj); \n    last.remove(0); \n    return o; \n  } \n```", "```py\n  private Object getMostFrequentElement(List<Object> list){ \n\n    HashMap<String, Integer> objectCounts = new HashMap<String, \n       Integer>(); \n    Integer frequntCount = 0; \n    Object frequentObject = null; \n```", "```py\n    for(Object obj : list){ \n      String key = obj.toString(); \n      Integer count = objectCounts.get(key); \n      if(count == null){ \n        count = 0; \n      } \n      objectCounts.put(key, ++count); \n\n      if(count >= frequntCount){ \n        frequntCount = count; \n        frequentObject = obj; \n      } \n    } \n\n    return frequentObject; \n  } \n\n} \n```", "```py\nString[] activities = new String[]{\"Walk\", \"Walk\", \"Walk\", \"Run\", \n   \"Walk\", \"Run\", \"Run\", \"Sit\", \"Sit\", \"Sit\"}; \nSpuriousActivityRemoval dlpFilter = new \n   SpuriousActivityRemoval(3); \nfor(String str : activities){ \n  System.out.println(str +\" -> \"+ dlpFilter.filter(str)); \n} \n```", "```py\n    Walk -> Walk\n    Walk -> Walk\n    Walk -> Walk\n    Run -> Walk\n    Walk -> Walk\n    Run -> Walk\n    Run -> Run\n    Sit -> Run\n    Sit -> Run\n    Sit -> Sit\n```", "```py\n// Output source code implementing the decision tree \nSystem.out.println(\"Source code:\\n\" +  \n  model.toSource(\"ActivityRecognitionEngine\")); \n```", "```py\nclass ActivityRecognitionEngine { \n\n  public static double classify(Object[] i) \n    throws Exception { \n\n    double p = Double.NaN; \n    p = ActivityRecognitionEngine.N17a7cec20(i); \n    return p; \n  } \n  static double N17a7cec20(Object []i) { \n    double p = Double.NaN; \n    if (i[64] == null) { \n      p = 1; \n    } else if (((Double) i[64]).doubleValue() <= 10.353474) { \n    p = ActivityRecognitionEngine.N65b3120a1(i); \n    } else if (((Double) i[64]).doubleValue() > 10.353474) { \n      p = 2; \n    }  \n    return p; \n  } \n... \n```"]