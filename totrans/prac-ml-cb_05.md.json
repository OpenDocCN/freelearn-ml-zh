["```py\n > devtools::install_github(\"ellisp/nzelect/pkg2\")\n> library(leaflet)\n> library(nzcensus)\n> library(Metrics)\n> library(ggplot2)\n> library(scales)\n> library(boot)\n> library(dplyr)\n> library(Hmisc)\n> library(mgcv)\n> library(caret)\n> library(grid)\n> library(stringr)\n> library(ggrepel)\n> library(glmnet)\n> library(maps)\n\n```", "```py\n    > tmp <- AreaUnits2013[AreaUnits2013$WGS84Longitude> 0 & !is.na(AreaUnits2013$MedianIncome2013), ]\n\n```", "```py\n    > palette <- colorQuantile(\"RdBu\", NULL, n = 10)\n\n```", "```py\n    > labels <- paste0(tmp$AU_NAM, \" $\", format(tmp$MedianIncome2013, big.mark = \",\"))\n\n```", "```py\n> leaflet() %>%\n+ addProviderTiles(\"CartoDB.Positron\") %>%\n+ addCircles(lng = tmp$WGS84Longitude, lat = tmp$WGS84Latitude,\n+ color = pal(-tmp$MedianIncome2013),\n+ popup = labs,\n+ radius = 500) %>%\n+ addLegend(\n+ pal = pal,\n+ values = -tmp$MedianIncome2013,\n+ title = \"Quantile of median<br>household income\",\n+ position = \"topleft\",\n+ bins = 5) \n\n```", "```py\n    > au <- AreaUnits2013 %>%     +  select(-AU2014, -AU_NAM, -NZTM2000Easting, -NZTM2000Northing) %>%     +  select(-PropWorked40_49hours2013, -Prop35to39_2013, -PropFemale2013)     > row.names(au) <- AreaUnits2013$AU_NAM\n\n```", "```py\n names(au) <- gsub(\"_2013\", \"\", names(au))\n> names(au) <- gsub(\"2013\", \"\", names(au))\n> names(au) <- gsub(\"Prop\", \"\", names(au))\n\n```", "```py\n    > au <- au[complete.cases(au), ]\n\n```", "```py\n    > data_use <- au\n\n```", "```py\n    > dim(data_use)\n\n```", "```py\n    > data_use <- data_use[the_data$WGS84Longitude > 100, ]\n\n```", "```py\n    > names(data_use) <- make.names(names(data_use))\n\n```", "```py\n    > names(data_use)\n\n```", "```py\n    > reg_data <- spearman2(MedianIncome ~ ., data = data_use)\n\n```", "```py\n    > reg_data[order(-reg_data[ ,6])[1:15], ]\n\n```", "```py\n> reg_formula <- terms(MedianIncome ~\ns(FullTimeEmployed, k = 6) +\ns(InternetHH, k = 6) +\ns(NoQualification, k = 5) +\ns(UnemploymentBenefit, k = 5) +\ns(Smoker, k = 5) +\ns(Partnered, k = 5) +\ns(Managers, k = 4) +\ns(Bachelor, k = 4) +\ns(SelfEmployed, k = 4) +\ns(NoMotorVehicle, k = 4) +\ns(Unemployed, k = 3) +\ns(Labourers, k = 3) +\ns(Worked50_59hours, k = 3) +\ns(Separated, k = 3) +\ns(Maori, k = 3) +\ns(WGS84Longitude, WGS84Latitude) +\n.,\ndata = data_use)\n\n```", "```py\n> gam_model <- gam(reg_formula, data = data_use) \n\n```", "```py\n    > par(bty = \"l\", mar = c(5,4, 2, 1))     > par(mar = rep(2, 4))     > plot(gam_model, residuals = TRUE, pages = 1, shade = TRUE, seWithMean = TRUE, ylab = \"\")\n\n```", "```py\n    > rmses_gam_boot <- boot(data = data_use, statistic = fit_gam, R = 99)\n\n```", "```py\n    > rmses_gam_boot\n\n```", "```py\n    > gam_rmse <- mean(rmses_gam_boot$t)\n\n```", "```py\n    > gam_rmse\n\n```", "```py\n> install.packages(\"graphics\")\n> install.packages(\"splines\")\n> library(graphics)\n> library(splines)\n\n```", "```py\n    > matrx = matrix(cbind(1,.99, .99,1),nrow=2)\n\n```", "```py\n> cholsky = t(chol(matrx))\n> nvars = dim(cholsky)[1]\n\n```", "```py\n    > numobs = 1000     \n> set.seed(1)\n\n```", "```py\n    > random_normal = matrix(rnorm(nvars*numobs,10,1), nrow=nvars, ncol=numobs)\n\n```", "```py\n    > X = cholsky %*% random_normal\n\n```", "```py\n    > newX = t(X)\n\n```", "```py\n    > raw = as.data.frame(newX)\n\n```", "```py\n    > head(raw)\n\n```", "```py\n    > raw_original = as.data.frame(t(random_normal))\n\n```", "```py\n    > names(raw) = c(\"response\",\"predictor1\")\n\n```", "```py\n    > raw$predictor1_3 = raw$predictor1^3\n\n```", "```py\n    > head(raw$predictor1_3)\n\n```", "```py\n    > raw$predictor1_2 = raw$predictor1^2\n\n```", "```py\n    > head(raw$predictor1_2)\n\n```", "```py\n    > fit = lm(raw$response ~ raw$predictor1_3)\n\n```", "```py\n    > fit\n\n```", "```py\n    > plot(raw$response ~ raw$predictor1_3, pch=16, cex=.4, xlab=\"Predictor\", ylab=\"Response\", col =\"red\", main=\"Simulated Data with Slight Curve\")\n\n```", "```py\n    > abline(fit)\n\n```", "```py\n    > x_axis <- with(cars, speed)\n\n```", "```py\n    > y_axis <- with(cars, dist)\n\n```", "```py\n    > eval_length = 50\n\n```", "```py\n> fit_loess <- loess.smooth(x_axis, y_axis, evaluation = eval_length, family=\"gaussian\", span=.75, degree=1) \n\n```", "```py\n    > fit_loess\n\n```", "```py\n    > fit_loess_2 <- loess(y_axis ~ x_axis, family=\"gaussian\", span=.75, degree=1)\n\n```", "```py\n    > fit_loess_2\n\n```", "```py\n    > new_x_axis = seq(min(x_axis),max(x_axis), length.out=eval_length)\n\n```", "```py\n    > new_x_axis\n\n```", "```py\n> conf_int = cbind( \n + predict(fit_loess_2, data.frame(x=new_x_axis)), \n + predict(fit_loess_2, data.frame(x=new_x_axis))+ \n + predict(fit_loess_2, data.frame(x=new_x_axis), se=TRUE)$se.fit*qnorm(1-.05/2), \n + predict(fit_loess_2, data.frame(x=new_x_axis))- \n+ predict(fit_loess_2, data.frame(x=new_x_axis), se=TRUE)$se.fit*qnorm(1-.05/2) \n + )\n\n```", "```py\n    > fit_lm = lm(y_axis ~ x_axis)\n\n```", "```py\n    > fit_lm\n\n```", "```py\n    > fit_poly = lm(y_axis ~ poly(x_axis,3) )\n\n```", "```py\n    > fit_poly\n\n```", "```py\n    > fit_nat_spline = lm(y_axis ~ ns(x_axis, 3) )\n\n```", "```py\n    > fit_nat_spline\n\n```", "```py\n    > fit_smth_spline <- smooth.spline(y_axis ~ x_axis, nknots=15)\n\n```", "```py\n    > fit_smth_spline\n\n```", "```py\n    > plot(x_axis, y_axis, xlim=c(min(x_axis),max(x_axis)), ylim=c(min(y_axis),max(y_axis)), pch=16, cex=.5, ylab = \"Stopping Distance (feet)\", xlab= \"Speed (MPH)\", main=\"Comparison of Models\", sub=\"Splines\")\n\n```", "```py\n    > matplot(new_x_axis, conf_int, lty = c(1,2,2), col=c(1,2,2), type = \"l\", add=T)\n\n```", "```py\n    > lines(new_x_axis, predict(fit_lm, data.frame(x=new_x_axis)), col=\"red\", lty=3)\n\n```", "```py\n    > lines(new_x_axis, predict(fit_poly, data.frame(x=new_x_axis)), col=\"blue\", lty=4)\n\n```", "```py\n    > lines(new_x_axis, predict(fit_nat_spline, data.frame(x=new_x_axis)), col=\"green\", lty=5)\n\n```", "```py\n    > lines(fit_smth_spline, col=\"dark grey\", lty=6)\n\n```", "```py\n    > lines(ksmooth(x_axis, y_axis, \"normal\", bandwidth = 5), col = 'purple', lty=7)\n\n```", "```py\n> library(dataRetrieval)\n> library(dplyr)\n\n```", "```py\n> siteNumber <- c(\"01538000\") \n\n```", "```py\n    > parameterCd <- \"00060\"\n\n```", "```py\n    > Q_daily <- readNWISdv(siteNumber, parameterCd)\n\n```", "```py\n    > tail(Q_daily)\n\n```", "```py\n    > str(Q_daily)\n\n```", "```py\n    > Q_daily <- renameNWISColumns(Q_daily)\n\n```", "```py\n    > tail(Q_daily)\n\n```", "```py\n    > stationInfo <- readNWISsite(siteNumber)\n\n```", "```py\n> if(as.numeric(diff(range(Q_daily$Date))) != (nrow(Q_daily)+1)){\n+ fullDates <- seq(from=min(Q_daily$Date),\n+ to = max(Q_daily$Date), by=\"1 day\")\n+ fullDates <- data.frame(Date = fullDates,\n+ agency_cd = Q_daily$agency_cd[1],\n+ site_no = Q_daily$site_no[1],\n+ stringsAsFactors = FALSE)\n+ Q_daily <- full_join(Q_daily, fullDates,\n+ by=c(\"Date\",\"agency_cd\",\"site_no\")) %>%\n+ arrange(Date)\n+ }\n\n```", "```py\n> moving_avg <- function(x,n=30){stats::filter(x,rep(1/n,n), sides=1)}     > \nQ_daily <- Q_daily %>% mutate(rollMean = as.numeric(moving_avg(Flow)), day.of.year = as.numeric(strftime(Date, format = \"%j\")))\n\n```", "```py\n    > tail(Q_daily)\n\n```", "```py\n> Q_summary >- Q_daily %>%\n+ group_by(day.of.year) %>%\n+ summarize(p75 = quantile(rollMean, probs = .75, na.rm = TRUE),\n+ p25 = quantile(rollMean, probs = .25, na.rm = TRUE),\n+ p10 = quantile(rollMean, probs = 0.1, na.rm = TRUE),\n+ p05 = quantile(rollMean, probs = 0.05, na.rm = TRUE),\n+ p00 = quantile(rollMean, probs = 0, na.rm = TRUE))\n\n```", "```py\n> current_year <- as.numeric(strftime(Sys.Date(), format = \"%Y\"))\n> summary.0 <- Q_summary %>% mutate(Date = as.Date(day.of.year - 1,\norigin = paste0(current_year-2,\"-01-01\")), day.of.year = day.of.year - 365)\n> summary.1 <- Q_summary %>% mutate(Date = as.Date(day.of.year - 1,\norigin = paste0(current_year-1,\"-01-01\")))\n> summary.2 <- Q_summary %>% mutate(Date = as.Date(day.of.year - 1,\norigin = paste0(current_year,\"-01-01\")), day.of.year = day.of.year + 365)\n\n```", "```py\n    > Q_summary <- bind_rows(summary.0, summary.1, summary.2) \n\n```", "```py\n    > Q_summary\n\n```", "```py\n    > smooth.span <- 0.3\n\n```", "```py\n    > Q_summary$sm.75 <- predict(loess(p75~day.of.year, data = Q_summary, span = smooth.span))\n\n```", "```py\n    > head(Q_summary$sm.75)\n\n```", "```py\n    > Q_summary$sm.25 <- predict(loess(p25~day.of.year, data = Q_summary, span = smooth.span))\n\n```", "```py\n    > head(summaryQ$sm.25)\n\n```", "```py\n    > Q_summary$sm.10 <- predict(loess(p10~day.of.year, data = Q_summary, span = smooth.span))\n\n```", "```py\n    > head(summaryQ$sm.10)\n\n```", "```py\n    > Q_summary$sm.05 <- predict(loess(p05~day.of.year, data = Q_summary, span = smooth.span))\n\n```", "```py\n    > head(summaryQ$sm.05)\n\n```", "```py\n    > Q_summary$sm.00 <- predict(loess(p00~day.of.year, data = Q_summary, span = smooth.span))\n\n```", "```py\n    > head(summaryQ$sm.00)\n\n```", "```py\n    > Q_summary <- select(Q_summary, Date, day.of.year, sm.75, sm.25, sm.10, sm.05, sm.00) %>% filter(Date >= as.Date(paste0(current_year-1,\"-01-01\")))\n\n```", "```py\n    > Q_summary\n\n```", "```py\n    > latest.years <- Q_daily %>% filter(Date >= as.Date(paste0(current_year-1,\"-01-01\"))) %>% mutate(day.of.year = 1:nrow(.))\n\n```", "```py\n> title.text <- paste0(stationInfo$station_nm,\"n\", \"Provisional Data - Subject to changen\", \"Record Start = \", min(Q_daily$Date), \"  Number of years = \", as.integer (as.numeric(difftime(time1 = max(Q_daily$Date), time2 = min(Q_daily$Date), units = \"weeks\"))/52.25), \"nDate of plot = \",Sys.Date(), \"  Drainage Area = \",stationInfo$drain_area_va, \"mi^2\")     > mid.month.days <- c(15, 45, 74, 105, 135, 166, 196, 227, 258, 288, 319, 349)     > month.letters <- c(\"J\",\"F\",\"M\",\"A\",\"M\",\"J\",\"J\",\"A\",\"S\",\"O\",\"N\",\"D\")     > start.month.days <- c(1, 32, 61, 92, 121, 152, 182, 214, 245, 274, 305, 335)     > label.text <- c(\"Normal\",\"DroughtWatch\",\"DroughtWarning\",\"Drought Emergency\")     > year1_summary <- data.frame(Q_summary[2:366,])     > head(year1_summary) \n\n```", "```py\n    > year2_summary <- data.frame(Q_summary[367:733,])     \n> head(year2_summary)\n\n```", "```py\n> simple.plot <- ggplot(data = Q_summary, aes(x = day.of.year)) + \n+ geom_ribbon(aes(ymin = sm.25, ymax = sm.75, fill = \"Normal\")) + \n    + geom_ribbon(aes(ymin = sm.10, ymax = sm.25, fill =       \"Drought Watch\")) +\n    + geom_ribbon(aes(ymin = sm.05, ymax = sm.10, fill = \"Drought Warning\")) +\n+ geom_ribbon(aes(ymin = sm.00, ymax = sm.05, fill = \"Drought Emergency\")) + \n+ scale_y_log10(limits = c(1,1000)) + \n+ geom_line(data = latest.years, aes(x=day.of.year, y=rollMean, color = \"30-Day Mean\"),size=2) + \n+ geom_vline(xintercept = 365) \n    > simple.plot\n\n```"]