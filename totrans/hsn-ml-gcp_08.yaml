- en: Creating ML Applications with Firebase
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Firebase创建机器学习应用程序
- en: 'In the previous chapter, we learned about using some of the various Google
    machine learning APIs to predict/classify an event. However, we performed all
    our work in Datalab. In a real-world scenario, we could want to integrate machine
    learning APIs into a web application or a mobile application that we build. Firebase
    comes in handy in such a scenario. Firebase is a platform allows us to build web
    and mobile applications without server-side programming. Firebase provides multiple
    features that ensure that the developer focuses on building the application, while
    the backend is taken care of. Some of the features that Firebase provides are:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们学习了如何使用一些Google机器学习API来预测/分类事件。然而，我们在Datalab中完成了所有工作。在实际场景中，我们可能希望将机器学习API集成到我们构建的网络应用程序或移动应用程序中。在这种情况下，Firebase非常有用。Firebase是一个平台，允许我们构建无需服务器端编程的Web和移动应用程序。Firebase提供了多个功能，确保开发者专注于构建应用程序，而后端由Firebase负责。Firebase提供的一些功能包括：
- en: Real-time database
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实时数据库
- en: File storage
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文件存储
- en: Cloud functions
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 云函数
- en: Hosting
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主机服务
- en: Performance monitoring
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 性能监控
- en: Analytics
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分析
- en: Authentication
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 身份验证
- en: In this chapter, we will understand more about the various features provided
    by Firebase. Also, to understand how Firebase helps in building applications with
    machine learning capabilities, we will build a web application and a mobile application
    that translates text in any given language into english using the Google Translate
    API and provides the most translated text.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将了解Firebase提供的各种功能。此外，为了了解Firebase如何帮助构建具有机器学习功能的应用程序，我们将构建一个网络应用程序和一个移动应用程序，该应用程序使用Google翻译API将任何给定语言的文本翻译成英语，并提供最常翻译的文本。
- en: Features of Firebase
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Firebase的功能
- en: 'Some of the features that Firebase provides are as follows:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Firebase提供的一些功能如下：
- en: '**Real-time database**: Enables us to store and sync app data in milliseconds'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**实时数据库**：使我们能够在毫秒内存储和同步应用程序数据'
- en: '**Cloud firestore**: Enables us to store and sync data on global scale'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**云Firestore**：使我们能够在全球范围内存储和同步数据'
- en: '**Cloud functions**: Enables us to run backend code without managing servers'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**云函数**：使我们能够在不管理服务器的情况下运行后端代码'
- en: '**Hosting**: Delivers web app assets with speed and security'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**主机服务**：以速度和安全交付网络应用程序资产'
- en: '**Performance monitoring**: Helps gain insights into an app''s performance'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**性能监控**：帮助我们深入了解应用程序的性能'
- en: '**Crashlytics**: Enables us to prioritize and fix issues with powerful, real-time
    crash reporting'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**崩溃分析**：使我们能够通过强大的实时崩溃报告来优先处理和修复问题'
- en: '**Authentication**: Helps us authenticate users simply and securely'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**身份验证**：帮助我们简单且安全地验证用户'
- en: '**Cloud storage**: Enables us to store and serve files at Google scale'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**云存储**：使我们能够在Google规模上存储和提供文件'
- en: '**Predictions**: Enables us to define dynamic user groups based on predicted
    behavior'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**预测**：使我们能够根据预测的行为定义动态用户组'
- en: '**Remote config**: Enables us to modify our app without deploying a new version'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**远程配置**：使我们能够在不部署新版本的情况下修改我们的应用程序'
- en: '**App indexing**: Enables us to drive search traffic to mobile app'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应用索引**：使我们能够将搜索流量引导到移动应用程序'
- en: '**Cloud messaging**: Enables us to send targeted messages and notifications'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**云消息服务**：使我们能够发送有针对性的消息和通知'
- en: '**Dynamic links**: Enables us to drive growth by using deep links with attribution'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**动态链接**：使我们能够通过使用带有归因的深度链接来驱动增长'
- en: '**Invites**: Enables us to drive growth by using deep links with attribution'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**邀请**：使我们能够通过使用带有归因的深度链接来驱动增长'
- en: In this chapter, we will build an application that takes an input text and translates
    it into English—first a web application and then a mobile application.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将构建一个应用程序，该应用程序可以将输入文本翻译成英语——首先是一个网络应用程序，然后是一个移动应用程序。
- en: Building a web application
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建网络应用程序
- en: In order to build the web application, we make use of Node.js.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 为了构建网络应用程序，我们使用了Node.js。
- en: 'Download and install Node.js:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 下载并安装Node.js：
- en: '`node.js` can be downloaded from the link here: [https://nodejs.org/en/](https://nodejs.org/en/).'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`node.js`可以从以下链接下载：[https://nodejs.org/en/](https://nodejs.org/en/)。'
- en: For the version that we are building now, we will use the 8.11.1 LTS version
    of Node.js on Windows 64-bit machine.
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于我们现在正在构建的版本，我们将在Windows 64位机器上使用Node.js的8.11.1 LTS版本。
- en: Once you download the executable file from [https://nodejs.org/dist/v8.11.1/node-v8.11.1-x64.msi](https://nodejs.org/dist/v8.11.1/node-v8.11.1-x64.msi),
    make sure to install Node.js using the default parameters.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载可执行文件 [https://nodejs.org/dist/v8.11.1/node-v8.11.1-x64.msi](https://nodejs.org/dist/v8.11.1/node-v8.11.1-x64.msi)
    后，请确保使用默认参数安装 Node.js。
- en: 'Create a Firebase project:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 创建 Firebase 项目：
- en: 'A Firebase project can be created by logging in to the Firebase console here:
    [https://console.firebase.google.com](https://console.firebase.google.com/)'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可以通过登录 Firebase 控制台在这里创建 Firebase 项目：[https://console.firebase.google.com](https://console.firebase.google.com/)
- en: 'Within the console, click on Add project:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在控制台中，点击添加项目：
- en: '![](img/d0e73c87-b687-41ba-aa70-3257a4b986d5.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d0e73c87-b687-41ba-aa70-3257a4b986d5.png)'
- en: 'Enter project name (highlighted in red) and fetch project ID (highlighted in
    black), as follows:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入项目名称（用红色突出显示）并获取项目 ID（用黑色突出显示），如下所示：
- en: '![](img/289a67db-84a6-4ffd-80a7-9cbd8141346c.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](img/289a67db-84a6-4ffd-80a7-9cbd8141346c.png)'
- en: 'Install Firebase tools using Node.js package manager, as follows:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 Node.js 包管理器安装 Firebase 工具，如下所示：
- en: 'Change directory to the folder where the `firebase` function files need to
    be stored. In the following screenshot, we are creating a folder named `firebase`
    in the `E` drive:'
  id: totrans-40
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将目录更改为需要存储 `firebase` 函数文件的文件夹。在以下屏幕截图中，我们在 `E` 驱动器中创建了一个名为 `firebase` 的文件夹：
- en: '![](img/a07da3ae-5716-4fd7-9109-0f80980dd6c7.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a07da3ae-5716-4fd7-9109-0f80980dd6c7.png)'
- en: 'We install Firebase tools using the following code snippet:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们使用以下代码片段安装 Firebase 工具：
- en: '![](img/c90d5a0e-51f7-45fc-83e6-4b99ee707fff.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c90d5a0e-51f7-45fc-83e6-4b99ee707fff.png)'
- en: 'Log in and initialize Firebase:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 登录并初始化 Firebase：
- en: 'We log into Firebase, by specifying:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过指定以下内容登录 Firebase：
- en: '[PRE0]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The previous code snippet would allow us to log in using our credentials. Make
    sure to allow Firebase CLI to access your Google account.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之前的代码片段将允许我们使用我们的凭据登录。请确保允许 Firebase CLI 访问您的 Google 账户。
- en: 'Once we are logged into Firebase, we initialize `firebase` as follows:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦我们登录到 Firebase，我们就可以如下初始化 `firebase`：
- en: '[PRE1]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You will get the following screen:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你将看到以下屏幕：
- en: '![](img/c1fdcdf4-af7d-489c-b9c7-8b7507a85b0a.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c1fdcdf4-af7d-489c-b9c7-8b7507a85b0a.png)'
- en: Press *Y* to initialize Firebase.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按 *Y* 初始化 Firebase。
- en: 'Select the features that are needed for the current application by pressing
    the space bar, and, once done with selection, press *Enter*:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过按空格键选择当前应用程序所需的特性，选择完成后按 *Enter* 键：
- en: '![](img/334ae5fc-9f99-486f-84c9-35710568d815.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](img/334ae5fc-9f99-486f-84c9-35710568d815.png)'
- en: 'Once selected, for the version that we use here, let us specify that our functions
    are deployed with JavaScript, as follows:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选中后，对于我们这里使用的版本，让我们指定我们的函数使用 JavaScript 部署，如下所示：
- en: '![](img/129cda59-384c-4302-98c5-c23a4903fef1.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](img/129cda59-384c-4302-98c5-c23a4903fef1.png)'
- en: 'Once selected, we set the project with the project directory:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选中后，我们使用项目目录设置项目：
- en: '![](img/bd43fce2-8e09-4523-b36d-32ab9b2c5579.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bd43fce2-8e09-4523-b36d-32ab9b2c5579.png)'
- en: 'Note that `mytranslator` is the project that we created in *step 2*. Also note
    that once we''ve initialized Firebase, the folder structure looks like this:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 注意 `mytranslator` 是我们在 *步骤 2* 中创建的项目。还请注意，一旦我们初始化了 Firebase，文件夹结构如下所示：
- en: '![](img/56d7a5b4-af7c-49de-9e35-0c2e03efdc5f.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](img/56d7a5b4-af7c-49de-9e35-0c2e03efdc5f.png)'
- en: 'In Command Prompt, press *Enter* for the various prompts after initializing
    Firebase. At the end of initialization, you should get a confirmation upon completing
    initialization as follows:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令提示符中，初始化 Firebase 后按 *Enter* 键以获取各种提示。初始化完成后，你应该会收到以下确认信息：
- en: '![](img/0d9a7645-2078-4cb3-9b29-9c7d17519931.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0d9a7645-2078-4cb3-9b29-9c7d17519931.png)'
- en: 'Install Google Translate using Node.js package manager after scrolling to the
    `functions` folder:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在滚动到 `functions` 文件夹后，使用 Node.js 包管理器安装 Google Translate：
- en: '![](img/75d1e6f5-2658-4050-9c64-5e0735f6d8c2.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](img/75d1e6f5-2658-4050-9c64-5e0735f6d8c2.png)'
- en: 'We specify all the functionalities (public API methods) that are required for
    our use case. These functions handle all the server programming:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们指定了我们用例所需的所有功能（公共 API 方法）。这些函数处理所有服务器编程：
- en: In order to specify these, let us overwrite the `index.js` file present in the
    `functions` folder with the following code snippet.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了指定这些，让我们用以下代码片段覆盖 `functions` 文件夹中现有的 `index.js` 文件。
- en: '[PRE2]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In this code, we import the required Node.js packages by using the following
    code:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此代码中，我们通过以下代码导入所需的 Node.js 包：
- en: '[PRE3]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We initialize the connection to the database by specifying the following:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们通过指定以下内容初始化与数据库的连接：
- en: '[PRE4]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We create `translate` object and pass the project ID as a parameter in it,
    as follows:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们创建`translate`对象，并将项目ID作为参数传递给它，如下所示：
- en: '[PRE5]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We then create a public facing API with name `translateMessage`, as follows:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们创建一个名为`translateMessage`的公开API，如下所示：
- en: '[PRE6]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The input given by user is fetched through the following line:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户输入通过以下行获取：
- en: '[PRE7]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The translation of input text and the corresponding storage of translated text
    in the output is done by this code:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入文本的翻译和相应存储在输出中的翻译文本是通过此代码完成的：
- en: '[PRE8]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We create an instance of database, as follows:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们创建一个数据库实例，如下所示：
- en: '[PRE9]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The input is updated in the database:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入在数据库中更新：
- en: '[PRE10]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'If a new input is given, `count` is initialized to `1`; else, `count` is incremented
    by `1`:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果给出新的输入，则`count`初始化为`1`；否则，`count`增加`1`：
- en: '[PRE11]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Enable the **Google Cloud Translation API**, as follows:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 启用**Google Cloud Translation API**，如下所示：
- en: '![](img/f8fc2986-fcf9-4097-bd42-0bc8c46c6e36.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f8fc2986-fcf9-4097-bd42-0bc8c46c6e36.png)'
- en: 'Deploy the `firebase` function:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 部署`firebase`函数：
- en: 'We can deploy the `firebase` function as shown in the following screenshot:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以按照以下截图所示部署`firebase`函数：
- en: '![](img/660f97c0-73eb-49b9-9a61-296816558bac.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](img/660f97c0-73eb-49b9-9a61-296816558bac.png)'
- en: 'Once the function is deployed, check out Functions in the DEVELOP section of
    Project Overview:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 函数部署后，检查项目概述的开发部分中的函数：
- en: '![](img/fdde39b3-a99a-4cea-9cb1-343b53f3fb7b.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fdde39b3-a99a-4cea-9cb1-343b53f3fb7b.png)'
- en: 'Once we click on Functions, we should be able to see a dashboard that contains
    the function that we just created—`translateMessage`:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击函数后，我们应该能够看到一个包含我们刚刚创建的函数`translateMessage`的仪表板：
- en: '![](img/4d25db6d-843c-4d0a-968f-bc9f4d3be734.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4d25db6d-843c-4d0a-968f-bc9f4d3be734.png)'
- en: 'Note that, the previous event provides us with a URL, using which we should
    be able to translate the input text, as follows:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，前面的事件为我们提供了一个URL，使用该URL我们应该能够翻译输入文本，如下所示：
- en: '![](img/9057d9c3-0cd8-4eb7-a33f-60022317a938.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9057d9c3-0cd8-4eb7-a33f-60022317a938.png)'
- en: Note the usage of `?text=` in the URL, which is the input.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 注意URL中`?text=`的使用，这是输入。
- en: In case there is an issue with the execution, we should be able to understand
    them in the Logs tab (of the Functions dashboard).
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 如果执行过程中出现问题，我们应该能够在函数仪表板的日志标签中理解它们。
- en: 'Additionally, all the inputs that we have searched for, are stored in database:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们搜索过的所有输入都存储在数据库中：
- en: '![](img/caab7455-583e-43c8-bd50-de5a115b83b5.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](img/caab7455-583e-43c8-bd50-de5a115b83b5.png)'
- en: Note that the count value is initialized as searched for the term `hola`.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，计数值初始化为搜索术语`hola`。
- en: Replace the content of `index.html` file in the `public` folder with the following
    code snippet. The output of following code snippet would be to create a textbox
    that lets us give an input text, translate the text, and produce the translated
    output.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 将`public`文件夹中的`index.html`文件的内容替换为以下代码片段。以下代码片段的输出将创建一个文本框，允许我们输入文本，翻译文本，并生成翻译后的输出。
- en: 'In your execution, replace the project ID `mytranslator-c656d` with your own
    project ID:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的执行中，将项目ID `mytranslator-c656d`替换为您自己的项目ID：
- en: '[PRE12]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We deploy Firebase so that we upload the HTML file that specifies the structure
    of the final URL we would be working on:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们部署Firebase，以便上传指定最终URL结构的HTML文件：
- en: '![](img/96024a9e-a6c8-4f00-9b49-0d5a2190a058.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](img/96024a9e-a6c8-4f00-9b49-0d5a2190a058.png)'
- en: 'We should now be able to access the link shown, which helps us in translating
    text, as follows:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们应该能够访问显示的链接，这有助于我们翻译文本，如下所示：
- en: '![](img/beb2f050-23fb-48fa-8f0a-a0443a9f3d88.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](img/beb2f050-23fb-48fa-8f0a-a0443a9f3d88.png)'
- en: From this, we have seen that we are able to create a web application that translates
    any given input text. Note that the web application made use of the API endpoint
    that was created by function, and the frontend code would only vary by the framework
    that we use—it could be different when we use Angular over HTML, but the server
    side code would remain the same.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 从这个例子中，我们看到我们能够创建一个翻译任何给定输入文本的Web应用程序。请注意，Web应用程序使用了函数创建的API端点，而前端代码将根据我们使用的框架而有所不同——当我们使用Angular而不是HTML时，它可能会有所不同，但服务器端代码将保持不变。
- en: Building a mobile application
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建移动应用程序
- en: In the previous section, we understood the frontend of an HTML page that would
    translate input for us. In this section, we will build the frontend of an Android
    app that leverages the endpoint we generated for the function to return the translated
    text for us.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们了解了将为我们翻译输入的HTML页面的前端。在本节中，我们将构建利用我们为函数生成的端点返回翻译文本的Android应用程序的前端。
- en: 'We create the layout of the app as follows:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建应用的布局如下：
- en: '[PRE13]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The preceding code would output the layout of the app:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码会输出应用的布局：
- en: '![](img/394b75ab-8707-4b3c-93cd-188b37613337.png)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![](img/394b75ab-8707-4b3c-93cd-188b37613337.png)'
- en: Note that we have an EditText view that takes input.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们有一个用于接收输入的EditText视图。
- en: The Button is used to execute the translation and out is the TextView where
    the output is displayed.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 按钮用于执行翻译，而out是用于显示输出的TextView。
- en: Also note that in the preceding code, we have ensured that the components are
    aligned to the screen.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，请注意，在前面的代码中，我们确保了组件对齐到屏幕。
- en: 'Within main activity, we execute the following code:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在主活动（main activity）中，我们执行以下代码：
- en: '[PRE14]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Let us understand the preceding code.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们理解前面的代码。
- en: 'Import the relevant packages:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 导入相关包：
- en: '[PRE15]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Initialize the objects that we use in the `MainActivity` class:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 初始化我们在`MainActivity`类中使用的对象：
- en: '[PRE16]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Also, initialize the views using the following code:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，使用以下代码初始化视图：
- en: '[PRE17]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Set the on-click listener:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 设置点击监听器：
- en: '[PRE18]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Specify the tasks that need to be executed when clicked on the button:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 指定点击按钮时需要执行的任务：
- en: '[PRE19]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: From the preceding code, the URL gets evaluated to the URL that we have seen
    in the previous web application section.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的代码中，URL被评估为我们在之前网络应用部分看到的URL。
- en: 'The output of the preceding code is as follows:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 前面代码的输出如下：
- en: '![](img/374bfb06-bb99-46b7-8632-189359cb0a99.png)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![](img/374bfb06-bb99-46b7-8632-189359cb0a99.png)'
- en: Note that, on clicking the BUTTON, we should be able to translate our text.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，点击按钮时，我们应该能够翻译我们的文本。
- en: Summary
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概述
- en: In this chapter, we understood the various features of Firebase and using `firebase`
    functions to build the backend of web and mobile applications. We also used `firebase`
    functions to update a database on a real-time basis and retrieve the most searched
    term historically from the database.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们了解了Firebase的各种功能，并使用`firebase`函数构建网络和移动应用的底层。我们还使用`firebase`函数实时更新数据库，并从数据库中检索历史上搜索最多的术语。
