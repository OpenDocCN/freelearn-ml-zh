- en: Creating ML Applications with Firebase
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the previous chapter, we learned about using some of the various Google
    machine learning APIs to predict/classify an event. However, we performed all
    our work in Datalab. In a real-world scenario, we could want to integrate machine
    learning APIs into a web application or a mobile application that we build. Firebase
    comes in handy in such a scenario. Firebase is a platform allows us to build web
    and mobile applications without server-side programming. Firebase provides multiple
    features that ensure that the developer focuses on building the application, while
    the backend is taken care of. Some of the features that Firebase provides are:'
  prefs: []
  type: TYPE_NORMAL
- en: Real-time database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: File storage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cloud functions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hosting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performance monitoring
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Analytics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Authentication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this chapter, we will understand more about the various features provided
    by Firebase. Also, to understand how Firebase helps in building applications with
    machine learning capabilities, we will build a web application and a mobile application
    that translates text in any given language into english using the Google Translate
    API and provides the most translated text.
  prefs: []
  type: TYPE_NORMAL
- en: Features of Firebase
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Some of the features that Firebase provides are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Real-time database**: Enables us to store and sync app data in milliseconds'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cloud firestore**: Enables us to store and sync data on global scale'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cloud functions**: Enables us to run backend code without managing servers'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Hosting**: Delivers web app assets with speed and security'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Performance monitoring**: Helps gain insights into an app''s performance'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Crashlytics**: Enables us to prioritize and fix issues with powerful, real-time
    crash reporting'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Authentication**: Helps us authenticate users simply and securely'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cloud storage**: Enables us to store and serve files at Google scale'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Predictions**: Enables us to define dynamic user groups based on predicted
    behavior'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Remote config**: Enables us to modify our app without deploying a new version'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**App indexing**: Enables us to drive search traffic to mobile app'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cloud messaging**: Enables us to send targeted messages and notifications'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Dynamic links**: Enables us to drive growth by using deep links with attribution'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Invites**: Enables us to drive growth by using deep links with attribution'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this chapter, we will build an application that takes an input text and translates
    it into Englishâ€”first a web application and then a mobile application.
  prefs: []
  type: TYPE_NORMAL
- en: Building a web application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to build the web application, we make use of Node.js.
  prefs: []
  type: TYPE_NORMAL
- en: 'Download and install Node.js:'
  prefs: []
  type: TYPE_NORMAL
- en: '`node.js` can be downloaded from the link here: [https://nodejs.org/en/](https://nodejs.org/en/).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For the version that we are building now, we will use the 8.11.1 LTS version
    of Node.js on Windows 64-bit machine.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Once you download the executable file from [https://nodejs.org/dist/v8.11.1/node-v8.11.1-x64.msi](https://nodejs.org/dist/v8.11.1/node-v8.11.1-x64.msi),
    make sure to install Node.js using the default parameters.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a Firebase project:'
  prefs: []
  type: TYPE_NORMAL
- en: 'A Firebase project can be created by logging in to the Firebase console here:
    [https://console.firebase.google.com](https://console.firebase.google.com/)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Within the console, click on Add project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d0e73c87-b687-41ba-aa70-3257a4b986d5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Enter project name (highlighted in red) and fetch project ID (highlighted in
    black), as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/289a67db-84a6-4ffd-80a7-9cbd8141346c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Install Firebase tools using Node.js package manager, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Change directory to the folder where the `firebase` function files need to
    be stored. In the following screenshot, we are creating a folder named `firebase`
    in the `E` drive:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/a07da3ae-5716-4fd7-9109-0f80980dd6c7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We install Firebase tools using the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c90d5a0e-51f7-45fc-83e6-4b99ee707fff.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Log in and initialize Firebase:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We log into Firebase, by specifying:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The previous code snippet would allow us to log in using our credentials. Make
    sure to allow Firebase CLI to access your Google account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once we are logged into Firebase, we initialize `firebase` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'You will get the following screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c1fdcdf4-af7d-489c-b9c7-8b7507a85b0a.png)'
  prefs: []
  type: TYPE_IMG
- en: Press *Y* to initialize Firebase.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the features that are needed for the current application by pressing
    the space bar, and, once done with selection, press *Enter*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/334ae5fc-9f99-486f-84c9-35710568d815.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once selected, for the version that we use here, let us specify that our functions
    are deployed with JavaScript, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/129cda59-384c-4302-98c5-c23a4903fef1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once selected, we set the project with the project directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/bd43fce2-8e09-4523-b36d-32ab9b2c5579.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Note that `mytranslator` is the project that we created in *step 2*. Also note
    that once we''ve initialized Firebase, the folder structure looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/56d7a5b4-af7c-49de-9e35-0c2e03efdc5f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In Command Prompt, press *Enter* for the various prompts after initializing
    Firebase. At the end of initialization, you should get a confirmation upon completing
    initialization as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0d9a7645-2078-4cb3-9b29-9c7d17519931.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Install Google Translate using Node.js package manager after scrolling to the
    `functions` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/75d1e6f5-2658-4050-9c64-5e0735f6d8c2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We specify all the functionalities (public API methods) that are required for
    our use case. These functions handle all the server programming:'
  prefs: []
  type: TYPE_NORMAL
- en: In order to specify these, let us overwrite the `index.js` file present in the
    `functions` folder with the following code snippet.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'In this code, we import the required Node.js packages by using the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'We initialize the connection to the database by specifying the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'We create `translate` object and pass the project ID as a parameter in it,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'We then create a public facing API with name `translateMessage`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The input given by user is fetched through the following line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The translation of input text and the corresponding storage of translated text
    in the output is done by this code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'We create an instance of database, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The input is updated in the database:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'If a new input is given, `count` is initialized to `1`; else, `count` is incremented
    by `1`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Enable the **Google Cloud Translation API**, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f8fc2986-fcf9-4097-bd42-0bc8c46c6e36.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Deploy the `firebase` function:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can deploy the `firebase` function as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/660f97c0-73eb-49b9-9a61-296816558bac.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the function is deployed, check out Functions in the DEVELOP section of
    Project Overview:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/fdde39b3-a99a-4cea-9cb1-343b53f3fb7b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once we click on Functions, we should be able to see a dashboard that contains
    the function that we just createdâ€”`translateMessage`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4d25db6d-843c-4d0a-968f-bc9f4d3be734.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Note that, the previous event provides us with a URL, using which we should
    be able to translate the input text, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9057d9c3-0cd8-4eb7-a33f-60022317a938.png)'
  prefs: []
  type: TYPE_IMG
- en: Note the usage of `?text=` in the URL, which is the input.
  prefs: []
  type: TYPE_NORMAL
- en: In case there is an issue with the execution, we should be able to understand
    them in the Logs tab (of the Functions dashboard).
  prefs: []
  type: TYPE_NORMAL
- en: 'Additionally, all the inputs that we have searched for, are stored in database:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/caab7455-583e-43c8-bd50-de5a115b83b5.png)'
  prefs: []
  type: TYPE_IMG
- en: Note that the count value is initialized as searched for the term `hola`.
  prefs: []
  type: TYPE_NORMAL
- en: Replace the content of `index.html` file in the `public` folder with the following
    code snippet. The output of following code snippet would be to create a textbox
    that lets us give an input text, translate the text, and produce the translated
    output.
  prefs: []
  type: TYPE_NORMAL
- en: 'In your execution, replace the project ID `mytranslator-c656d` with your own
    project ID:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'We deploy Firebase so that we upload the HTML file that specifies the structure
    of the final URL we would be working on:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/96024a9e-a6c8-4f00-9b49-0d5a2190a058.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We should now be able to access the link shown, which helps us in translating
    text, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/beb2f050-23fb-48fa-8f0a-a0443a9f3d88.png)'
  prefs: []
  type: TYPE_IMG
- en: From this, we have seen that we are able to create a web application that translates
    any given input text. Note that the web application made use of the API endpoint
    that was created by function, and the frontend code would only vary by the framework
    that we useâ€”it could be different when we use Angular over HTML, but the server
    side code would remain the same.
  prefs: []
  type: TYPE_NORMAL
- en: Building a mobile application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous section, we understood the frontend of an HTML page that would
    translate input for us. In this section, we will build the frontend of an Android
    app that leverages the endpoint we generated for the function to return the translated
    text for us.
  prefs: []
  type: TYPE_NORMAL
- en: 'We create the layout of the app as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code would output the layout of the app:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/394b75ab-8707-4b3c-93cd-188b37613337.png)'
  prefs: []
  type: TYPE_IMG
- en: Note that we have an EditText view that takes input.
  prefs: []
  type: TYPE_NORMAL
- en: The Button is used to execute the translation and out is the TextView where
    the output is displayed.
  prefs: []
  type: TYPE_NORMAL
- en: Also note that in the preceding code, we have ensured that the components are
    aligned to the screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'Within main activity, we execute the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Let us understand the preceding code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Import the relevant packages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Initialize the objects that we use in the `MainActivity` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, initialize the views using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Set the on-click listener:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Specify the tasks that need to be executed when clicked on the button:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: From the preceding code, the URL gets evaluated to the URL that we have seen
    in the previous web application section.
  prefs: []
  type: TYPE_NORMAL
- en: 'The output of the preceding code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/374bfb06-bb99-46b7-8632-189359cb0a99.png)'
  prefs: []
  type: TYPE_IMG
- en: Note that, on clicking the BUTTON, we should be able to translate our text.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we understood the various features of Firebase and using `firebase`
    functions to build the backend of web and mobile applications. We also used `firebase`
    functions to update a database on a real-time basis and retrieve the most searched
    term historically from the database.
  prefs: []
  type: TYPE_NORMAL
