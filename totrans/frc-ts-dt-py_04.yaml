- en: '4'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '4'
- en: Handling Non-Daily Data
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理非每日数据
- en: When Prophet was first released, it was assumed all data would be collected
    on a daily scale, with one row of data per day. It has since grown to handle many
    different granularities of data, but because of its historical conventions, there
    are a few things to be cautious of when working with non-daily data in Prophet.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 当 Prophet 首次发布时，假设所有数据都是按日收集的，每天有一行数据。它现在已经发展到可以处理许多不同粒度的数据，但由于其历史惯例，当在 Prophet
    中处理非每日数据时，有一些事情需要谨慎处理。
- en: In this chapter, you will look at monthly data (and in fact, this is applicable
    to any data that is measured in timeframes greater than a day) and see how to
    change the frequency of predictions to avoid unexpected results. You will also
    look at hourly data and observe an additional component in the components plot.
    Finally, you will learn how to handle data that has regular gaps along the time
    axis.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将查看月度数据（实际上，这适用于任何以大于一天的时间框架测量的数据），并了解如何更改预测频率以避免意外结果。你还将查看小时数据，并观察组件图中额外的组件。最后，你将学习如何处理沿时间轴有规律间隔的数据。
- en: 'This chapter will cover the following:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下内容：
- en: Using monthly data
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用月度数据
- en: Using sub-daily data
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用亚日数据
- en: Using data with regular gaps
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用有规律间隔的数据
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: The data files and code for examples in this chapter can be found at [https://github.com/PacktPublishing/Forecasting-Time-Series-Data-with-Prophet-Second-Edition](https://github.com/PacktPublishing/Forecasting-Time-Series-Data-with-Prophet-Second-Edition).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本章示例的数据文件和代码可以在 [https://github.com/PacktPublishing/Forecasting-Time-Series-Data-with-Prophet-Second-Edition](https://github.com/PacktPublishing/Forecasting-Time-Series-Data-with-Prophet-Second-Edition)
    找到。
- en: Please refer to the *Preface* of this book for the technical requirements necessary
    to run the code examples.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅本书的 *前言* 了解运行代码示例所需的技术要求。
- en: Using monthly data
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用月度数据
- en: In [*Chapter 2*](B19630_02.xhtml#_idTextAnchor104), *Getting Started with Prophet*,
    we built our first Prophet model using the `Mauna Loa` dataset. The data was reported
    daily, which is what Prophet expects by default and is therefore why we did not
    need to change any of Prophet’s default parameters. In this next example, though,
    let’s take a look at a new set of data that is not reported every day, the `Air
    Passengers` dataset, to see how Prophet handles this difference in data granularity.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [*第 2 章*](B19630_02.xhtml#_idTextAnchor104) 中，*使用 Prophet 入门*，我们使用 `Mauna
    Loa` 数据集构建了我们的第一个 Prophet 模型。数据是按天报告的，这是 Prophet 默认期望的，因此我们不需要更改 Prophet 的任何默认参数。然而，在这个下一个例子中，让我们看看一组新的数据，这些数据不是每天报告的，即
    `Air Passengers` 数据集，看看 Prophet 如何处理这种数据粒度的差异。
- en: This is a classic time series dataset spanning 1949 through 1960\. It counts
    the number of passengers on commercial airlines each month during that period
    of explosive growth in the industry. The `Air Passengers` dataset, in contrast
    to the Mauna Loa dataset, has one observation per month. What happens if we attempt
    to predict future dates?
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个经典的时间序列数据集，涵盖了 1949 年至 1960 年间的数据。它记录了该行业爆炸性增长期间每个月商业航空公司乘客的数量。与 Mauna Loa
    数据集相比，`Air Passengers` 数据集每月只有一个观测值。如果我们尝试预测未来的日期会发生什么？
- en: 'Let’s create a model and plot the forecast to see what happens. We begin as
    we did with the Mauna Loa example, by importing the necessary libraries and loading
    our data into a properly formatted DataFrame:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个模型并绘制预测图，看看会发生什么。我们像 Mauna Loa 示例那样开始，导入必要的库并将我们的数据加载到一个格式正确的 DataFrame
    中：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Before building our model, let’s just take a look at the first few rows to
    ensure that our DataFrame looks as expected:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建我们的模型之前，让我们先查看前几行，以确保我们的 DataFrame 看起来符合预期：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You should now see this output:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在应该看到以下输出：
- en: '![Figure 4.1 – The Air Passengers DataFrame](img/Fig_4.1.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.1 – 空中旅客 DataFrame](img/Fig_4.1.jpg)'
- en: Figure 4.1 – The Air Passengers DataFrame
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.1 – 空中旅客 DataFrame
- en: The data is reported on a monthly basis, with one measurement for each month.
    Passenger numbers are reported per thousand, which means that the first row indicates
    that 112,000 commercial passengers took to the skies during the month beginning
    January 1, 1949.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 数据按月报告，每月有一个测量值。乘客数量按千计，这意味着第一行表示 1949 年 1 月 1 日开始的那个月有 112,000 名商业乘客乘坐飞机。
- en: 'Just as we did with Mauna Loa in the previous chapter, we will next instantiate
    our model and fit it. With this `Air Passengers` dataset, we will set `seasonality_mode`
    to `''multiplicative''`, but don’t concern yourself with this for now—we’ll cover
    it in [*Chapter 5*](B19630_05.xhtml#_idTextAnchor254), *Working with* *Seasonality*.
    Next, we send our data to the `fit` method and then make a `future` DataFrame.
    Let’s forecast `5` years. Finally, we will use `predict` with `future` and then
    plot the forecast to see how we did:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在上一章关于莫纳罗亚山的讨论中做的那样，我们接下来将实例化我们的模型并对其进行拟合。使用这个 `Air Passengers` 数据集，我们将
    `seasonality_mode` 设置为 `'multiplicative'`，但你现在不必担心这一点——我们将在 [*第 5 章*](B19630_05.xhtml#_idTextAnchor254)，*处理季节性*
    中讨论它。接下来，我们将数据发送到 `fit` 方法，然后创建一个 `future` DataFrame。让我们预测 `5` 年。最后，我们将使用 `predict`
    与 `future` 结合，然后绘制预测图以查看我们的结果：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'As you can see, we created our `future` DataFrame with `5` years of daily data,
    having provided Prophet only with monthly data. Prophet is able to apply its seasonality
    calculations appropriately on the first day of each month, for which it has good
    training data. For the remaining days, though, it doesn’t quite know what to do
    and overfits its seasonality curve in wild and unpredictable ways, as can be seen
    in the following graph:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们使用 `5` 年的每日数据创建了 `future` DataFrame，只向 Prophet 提供了月度数据。Prophet 能够在每月的第一天适当地应用其季节性计算，因为它有良好的训练数据。然而，对于剩余的天数，它并不完全知道该怎么办，并且以非常混乱和不可预测的方式过度拟合其季节性曲线，如下面的图表所示：
- en: '![Figure 4.2 – Future forecast with daily frequency](img/Fig_4.2.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.2 – 以日频率进行的未来预测](img/Fig_4.2.jpg)'
- en: Figure 4.2 – Future forecast with daily frequency
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.2 – 以日频率进行的未来预测
- en: 'We can fix this by instructing Prophet to only forecast on a monthly scale,
    to match the monthly data it is trained on. We need to specify a frequency in
    the `make_future_dataframe` method, and we do this by passing the `freq` argument.
    We must also update `periods` because although we are still forecasting `5` years
    into the future, we only want `12` entries per year, one for each month:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过指示 Prophet 仅在月度上进行预测，以匹配其训练的月度数据来解决这个问题。我们需要在 `make_future_dataframe`
    方法中指定一个频率，这是通过传递 `freq` 参数来完成的。我们还必须更新 `periods`，因为尽管我们仍然在预测 `5` 年后的未来，但我们每年只想有
    `12` 个条目，每个月一个：
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The `freq` argument accepts anything that pandas identifies as a frequency
    string. In this case, we used `''MS''`, meaning *month start*. Here is the output
    of that code block, showing the plotted forecast now that Prophet has been instructed
    to predict only on the first day of each month:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '`freq` 参数接受 pandas 识别为频率字符串的任何内容。在这种情况下，我们使用了 `''MS''`，意味着 *月起始日*。以下是该代码块的输出，显示了
    Prophet 被指示仅在每月的第一天进行预测后的预测图：'
- en: '![Figure 4.3 – Future forecast with monthly frequency](img/Fig_4.3.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.3 – 以月频率进行的未来预测](img/Fig_4.3.jpg)'
- en: Figure 4.3 – Future forecast with monthly frequency
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.3 – 以月频率进行的未来预测
- en: That’s much better, exactly what we might expect the forecast to look like.
    By feeding the `freq` argument to the `make_future_dataframe` method, we do not
    make the mistake of asking Prophet to forecast dates for which it has no training
    knowledge. By default, the frequency is set to `'D'`, for *daily*, and our periods
    are the number of days we want to forecast. Whenever changing the frequency to
    some other setting, be sure to set your periods to the same scale.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这好多了，这正是我们可能期望的预测图的样子。通过将 `freq` 参数传递给 `make_future_dataframe` 方法，我们避免了要求 Prophet
    预测它没有训练知识的日期。默认情况下，频率设置为 `'D'`，即 *每日*，我们的周期是我们想要预测的天数。每次更改频率到其他设置时，请确保将您的周期设置为相同的比例。
- en: 'Now let’s see what changes when we use data on a sub-daily scale. To do that,
    I’ll introduce a new dataset: Divvy.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看使用子日数据时会发生什么变化。为了做到这一点，我将引入一个新的数据集：Divvy。
- en: Using sub-daily data
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用子日数据
- en: 'In this section, we will be using data from the *Divvy bike share program*
    in Chicago, Illinois. The data contains the number of bicycle rides taken each
    hour from the beginning of 2014 through to the end of 2018 and exhibits a general
    increasing trend along with very strong yearly seasonality. Because it is hourly
    data and there are very few rides overnight (sometimes zero per hour), the data
    does show a density of measurements at the low end:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用来自伊利诺伊州芝加哥的 *Divvy 自行车共享计划* 的数据。这些数据包含了从 2014 年初到 2018 年底每小时骑行的自行车次数，并显示出一种普遍的增长趋势以及非常强烈的年度季节性。由于这是按小时的数据，并且夜间骑行次数非常少（有时每小时为零），数据确实显示了在低端的测量密度：
- en: "![Figure 4.4 – \uFEFFNumber of Divvy rides per hour](img/Fig_4.4.jpg)"
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![图4.4 – 每小时Divvy骑行次数](img/Fig_4.4.jpg)'
- en: Figure 4.4 – Number of Divvy rides per hour
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.4 – 每小时Divvy骑行次数
- en: Using `Air Passengers` data previously. You as the analyst need to use the `freq`
    argument and adjust the periods in the `make_future_dataframe` method, and Prophet
    will do the rest. If Prophet sees at least two days of data and the spacing between
    data is less than one day, it will fit daily seasonality.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 使用之前提到的`Air Passengers`数据。作为分析师，你需要使用`freq`参数并在`make_future_dataframe`方法中调整周期，然后Prophet会完成剩余的工作。如果Prophet看到至少两天数据，并且数据之间的间隔小于一天，它将拟合日季节性。
- en: 'Let’s see this in action by making a simple forecast. We already imported the
    necessary libraries in the previous example, so let’s continue by loading the
    new data and adding it to our DataFrame:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过进行一个简单的预测来实际看看。在先前的示例中，我们已经导入了必要的库，所以让我们继续加载新数据并将其添加到我们的数据框中：
- en: '[PRE4]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Next, we continue as we did in the previous example by instantiating our model
    (again, using `seasonality_mode='multiplicative'`, and again, not worrying about
    it for now) before fitting our model. When we create the `future` DataFrame, we
    again need to set a frequency but this time we will use `'h'`, for hourly.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们继续按照前一个示例中的方法进行，在拟合模型之前实例化我们的模型（再次使用`seasonality_mode='multiplicative'`，并且现在我们暂时不考虑它）。当我们创建`future`数据框时，我们再次需要设置频率，但这次我们将使用`'h'`，表示每小时。
- en: 'Now that our frequency is hourly, we need to adjust our period to match, so
    we multiply the `365`-day forecast we want by `24` hours per day:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们的频率是每小时，我们需要调整我们的周期以匹配，所以我们将我们想要的`365`天预测乘以每天`24`小时：
- en: '[PRE5]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Finally, we will predict our `future` DataFrame. With our forecast complete,
    we will plot it with the first `plot` function and then the components in the
    second `plot` function:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将预测我们的`future`数据框。随着预测完成，我们将使用第一个`plot`函数绘制它，然后使用第二个`plot`函数绘制成分：
- en: '[PRE6]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The first of those two plots is the forecast shown here:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 上述两个图表中的第一个是这里显示的预测：
- en: '![Figure 4.5 – Divvy forecast plot](img/Fig_4.5.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![图4.5 – Divvy预测图](img/Fig_4.5.jpg)'
- en: Figure 4.5 – Divvy forecast plot
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.5 – Divvy预测图
- en: 'The forecast includes a rather large amount of uncertainty. To understand why,
    we need to look at the components plot as shown in *Figure 4**.6*:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 预测包括相当大的不确定性。要理解原因，我们需要查看如图*图4.6*所示的成分图：
- en: '![Figure 4.6 – Divvy components plot](img/Fig_4.6.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![图4.6 – Divvy成分图](img/Fig_4.6.jpg)'
- en: Figure 4.6 – Divvy components plot
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.6 – Divvy成分图
- en: There are a few things to note about this series of plots. Starting from the
    uppermost plot, the **trend** plot, we can see that it still exhibits annual periodicity.
    Why wasn’t this captured in the **yearly** seasonality plot? Unfortunately, this
    data contains some very complex seasonalities that Prophet is unable to fully
    model.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 关于这一系列图表，有几个需要注意的地方。从最上面的图表开始，即**趋势**图，我们可以看到它仍然表现出年度周期性。为什么这没有在**年度**季节性图表中捕捉到？遗憾的是，这些数据包含一些非常复杂的季节性，Prophet无法完全建模。
- en: In particular, the **daily** seasonality itself is seasonal within the year.
    It’s seasonality within seasonality. The daily seasonality rises in the day and
    falls in the night, but the amount of the increase is dependent upon the time
    of year, and Prophet is not built to capture this type of seasonality. This is
    what causes so much forecast uncertainty. In later chapters, we will learn a few
    techniques to control this.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 特别是，**日**季节性本身在一年中也是季节性的。这是季节性中的季节性。日季节性在白天上升，在夜间下降，但增加的量取决于一年中的时间，而Prophet并没有设计来捕捉这种季节性。这就是造成预测不确定性的原因。在后面的章节中，我们将学习一些控制这种季节性的技术。
- en: Next, we look at the `Mauna Loa` plot featured several straight-line segments.
    Also, the plot goes from Sunday to Sunday, whereas the `Mauna Loa` plot went from
    Sunday to Saturday. Both of these changes reflect the more continuous nature of
    hourly data.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们来看一下包含几个直线段的`Mauna Loa`图。此外，该图从周日到周日，而`Mauna Loa`图则是从周日到周六。这两个变化都反映了每小时数据的连续性。
- en: When we only had daily data, as we did with Mauna Loa, the weekly seasonality
    only needed to show the effect of each day (although, under the hood, it was still
    a continuous model). But now that we have hourly data, it is important to see
    the continuous effect. We are shown 12:00:00 a.m. on Sunday through 11:59:59 p.m.
    on Saturday, which is 1 second shy of 8 days. The `Mauna Loa` plot in essence
    showed the daily effect at a single moment each day, exactly 7 days, hence the
    difference between the two plots.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们只有每日数据，就像我们在Mauna Loa所做的那样，每周季节性只需要显示每一天的效果（尽管在底层，它仍然是一个连续模型）。但现在我们有了小时数据，看到连续效果很重要。我们展示了从周日的午夜12:00:00到周六晚上11:59:59，总共8天少1秒。Mauna
    Loa图本质上显示了每天单次时刻的每日效果，正好是7天，这就是两个图表之间的差异。
- en: Now take a look at the **yearly** seasonality. It’s quite *wavy*. Just take
    note of that for now. We’ll talk about it in [*Chapter 5*](B19630_05.xhtml#_idTextAnchor254),
    *Working with Seasonality*, when we learn about the **Fourier order**.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在看看**年度**季节性。它相当**波动**。现在先注意这一点。当我们学习**傅里叶级数**时，我们将在[*第五章*](B19630_05.xhtml#_idTextAnchor254)
    *处理季节性*中讨论它。
- en: Finally, the **daily** seasonality plot. This is new and only appears when Prophet
    models sub-daily data. It’s quite revealing with this dataset, though. It seems
    that riders in the Divvy network ride a lot around 8 a.m., possibly commuting
    to work. There is an even larger spike just after 5 p.m., possibly riders returning
    home. And finally, there’s a small hump just after midnight. These must be the
    night owls, who spent the evening out with friends and are returning home to bed.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，是**每日**季节性图。这是一个新特性，仅在Prophet模型处理亚日数据时出现。但在这个数据集中，它却非常揭示。看起来Divvy网络中的骑行者在早上8点左右骑行很多，可能是上下班途中。下午5点后有一个更大的峰值，可能是骑行者回家。最后，午夜后有一个小峰，这一定是那些熬夜的人，他们晚上和朋友出去玩，现在回家睡觉。
- en: 'I also want to mention one more thing about the forecast: the model predicts
    some negative values, although it’s impossible for Divvy to have a negative number
    of rides taken during any given hour. The Prophet developers are actively working
    on this issue and will release a solution in a future update.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我还想提到关于预测的另一件事：模型预测了一些负值，尽管Divvy在任何给定小时内都不可能有负数的骑行次数。Prophet的开发者正在积极解决这个问题，并将在未来的更新中发布解决方案。
- en: In the last two sections, you learned that super-daily data and sub-daily data
    pose no difficult issues to overcome; we can simply adjust the frequency of future
    predictions. But now suppose that Divvy had only been collecting data from 8 a.m.
    until 6 p.m. each day. The last topic to cover in this chapter is how to handle
    data with regular gaps.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在前两节中，你了解到超级日数据和亚日数据并不构成难以克服的难题；我们只需调整未来预测的频率即可。但现在假设Divvy每天只收集从早上8点到下午6点的数据。本章最后要讨论的话题是如何处理具有规律间隔的数据。
- en: Using data with regular gaps
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用具有规律间隔的数据
- en: Throughout your career, you may encounter datasets with regular gaps in reporting,
    particularly when the data was collected by humans who have working hours, personal
    hours, and sleeping hours. It simply may not be possible to collect measurements
    with perfect periodicity.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的职业生涯中，你可能会遇到具有规律间隔的报表数据集，尤其是在数据由有工作时间、个人时间和睡眠时间的人类收集时。可能根本无法以完美的周期性收集测量数据。
- en: As you will see when we look at outliers in a later chapter, Prophet is robust
    in handling missing values. However, when that missing data occurs at regular
    intervals, Prophet will have no training data at all during those gaps to make
    estimations with. The seasonality will be constrained during periods where data
    exists but unconstrained during the gaps, and Prophet’s predictions can exhibit
    much larger fluctuations than the actual data displays. Let’s see this in action.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在后面的章节中查看异常值时，你会看到Prophet在处理缺失值方面非常稳健。然而，当缺失数据以规律间隔出现时，Prophet在这些间隔期间将没有任何训练数据来进行估计。在存在数据的时期，季节性会受到约束，但在间隔期间则不受约束，Prophet的预测可能会显示出比实际数据显示更大的波动。让我们看看实际操作中的情况。
- en: 'Suppose that Divvy’s data had only been collected between the hours of 8 a.m.
    and 6 p.m. each day. We can simulate this by removing the data from outside these
    hours from our DataFrame:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 假设Divvy的数据每天只收集从早上8点到下午6点之间的数据。我们可以通过从我们的DataFrame中移除这些时间之外的数据来模拟这种情况：
- en: '[PRE7]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now compare the following plot of this new DataFrame with the full dataset,
    which we saw in *Figure 4**.4*:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 现在比较以下新DataFrame的图与我们在*图4*中看到的完整数据集：
- en: '![Figure 4.7 – Divvy rides per hour between 8 a.m. and 6 p.m.](img/Fig_4.7.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![图4.7 – 上午8点到下午6点每小时的Divvy骑行次数](img/Fig_4.7.jpg)'
- en: Figure 4.7 – Divvy rides per hour between 8 a.m. and 6 p.m.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.7 – 上午8点到下午6点每小时的Divvy骑行次数
- en: 'This plot is much sparser than *Figure 4**.4*, particularly at low *y*-axis
    values. We lost all overnight data, from when ridership is down. Each day only
    has 10 data points now, one for each hour between 8 a.m. and 6 p.m. Now, let’s
    build a forecast model exactly as we did in the previous section, making our `future`
    DataFrame with one year of hourly frequency, but taking no extra precautions:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这个图比*图4.4*要稀疏得多，尤其是在低*y*轴值处。我们失去了所有夜间数据，因为骑行人数下降。现在每天只有10个数据点，每个小时从上午8点到下午6点有一个。现在，让我们像上一节那样构建一个预测模型，用一年每小时频率的`future`
    DataFrame，但不采取任何额外的预防措施：
- en: '[PRE8]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The plotted forecast shows much wider daily fluctuations in the future period
    than the historical training data:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 绘制的预测显示未来期间的每日波动比历史训练数据要宽得多：
- en: '![Figure 4.8 – Divvy forecast with regular gaps](img/Fig_4.8.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![图4.8 – 修复了常规间隔的Divvy预测](img/Fig_4.8.jpg)'
- en: Figure 4.8 – Divvy forecast with regular gaps
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.8 – 修复了常规间隔的Divvy预测
- en: 'Here, we are seeing unconstrained estimates in the future period causing wide
    fluctuations in predictions. This is the same effect that we observed with the
    `Air Passengers` data when we predicted daily forecasts with monthly data. We
    can zoom in on just 3 days in August 2018 to see more clearly what’s going on
    by replotting and using Matplotlib to constrain the limits of the `x` and `y`
    axes:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们看到未来期间的无约束估计值导致预测的波动很大。这与我们在使用月度数据预测每日预测时观察到的`Air Passengers`数据中的相同效应。我们可以通过重新绘制并使用Matplotlib来约束`x`轴和`y`轴的极限，来放大2018年8月的3天，以更清楚地了解正在发生的情况：
- en: '[PRE9]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Whereas the forecast plot from before showed 5 years of predictions, this plot
    shows just 3 days, so you can fully see what’s going on:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 与之前的预测图显示了5年的预测不同，这个图只显示了3天，因此你可以清楚地看到正在发生的情况：
- en: '![Figure 4.9 – Divvy forecast over 3 days](img/Fig_4.9.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![图4.9 – 3天内的Divvy预测](img/Fig_4.9.jpg)'
- en: Figure 4.9 – Divvy forecast over 3 days
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.9 – 3天内的Divvy预测
- en: In the previous section, when we looked at *Figure 4**.6*, we noted that the
    daily seasonality component showed ridership picking up before 8 a.m. and hitting
    a local peak right at 8 a.m. There was a slump at midday and then a large peak
    right after 6 p.m. We are seeing the same thing in *Figure 4**.9*, except that
    Prophet is making wild predictions before 8 a.m. and after 6 p.m., where it has
    no training data. This area is unconstrained and can follow almost any pattern
    as long as the equations work out for the midday period where data exists.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，当我们查看*图4.6*时，我们注意到每日季节性成分显示在上午8点之前骑行人数增加，并在上午8点达到局部峰值。中午时分有一个低谷，然后在下午6点后有一个大峰值。我们在*图4.9*中也看到了相同的情况，只不过Prophet在上午8点之前和下午6点之后做出了疯狂的预测，在这些时间段内它没有训练数据。这个区域是不受约束的，只要中午存在数据，它几乎可以遵循任何模式。
- en: 'The solution to this problem is to simply modify the `future` DataFrame to
    exclude those times for which our training data had regular gaps. We don’t even
    need to instantiate a new model or refit; we can just reuse our previous work.
    So, continuing on, we create a new `future2` DataFrame, remove those times earlier
    than 8 a.m. and later than 6 p.m., and then predict our forecast and plot the
    results:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 解决这个问题的方法很简单，就是修改`future` DataFrame，排除那些我们训练数据中存在常规间隔的时间。我们甚至不需要实例化一个新的模型或重新拟合；我们只需重复使用我们之前的工作。所以，继续进行，我们创建一个新的`future2`
    DataFrame，移除早于上午8点或晚于下午6点的时间，然后预测我们的预测并绘制结果：
- en: '[PRE10]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now we see a good forecast:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们看到了一个好的预测：
- en: "![Figure 4.10 – Divvy with regular gap\uFEFFs fixed](img/Fig_4.10.jpg)"
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![图4.10 – 修复了常规间隔的Divvy](img/Fig_4.10.jpg)'
- en: Figure 4.10 – Divvy with regular gaps fixed
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.10 – 修复了常规间隔的Divvy
- en: 'The daily fluctuations in the predicted future are of the same magnitude as
    our historical training data. Contrast that with *Figure 4**.8*, where the future
    period showed a much wider range of predictions. Let’s again plot those same 3
    days in August to compare the output with *Figure 4**.9*:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 预测的未来每日波动与我们的历史训练数据的幅度相同。与*图4.8*进行对比，其中未来期间显示了更广泛的预测范围。让我们再次绘制8月份的相同3天，以将输出与*图4.9*进行比较：
- en: '[PRE11]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We see the same curve as before for the hours between 8 a.m. and 6 p.m., but
    this time, Prophet simply connects them with a straight line. There is, in fact,
    no data in our `forecast` DataFrame for these time periods; Prophet simply ignores
    them:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到与前文相同的时间段（上午8点到下午6点）的曲线，但这次Prophet只是用一条直线将它们连接起来。实际上，在我们的`forecast`数据框中，这些时间段并没有数据；Prophet只是忽略了它们：
- en: '![Figure 4.11 – Divvy 3-day forecast with regular gaps fixed](img/Fig_4.11.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![图4.11 – 修复常规间隔后的Divvy 3天预测](img/Fig_4.11.jpg)'
- en: Figure 4.11 – Divvy 3-day forecast with regular gaps fixed
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.11 – 修复常规间隔后的Divvy 3天预测
- en: 'Prophet is a continuous time model, so although the `forecast` DataFrame ignores
    those excluded times, the equations that underpin the model are defined continuously.
    We can observe this by plotting the daily seasonality with the `plot_seasonality`
    function. This function is contained within Prophet’s `plot` package, so we need
    to import it first. It takes two required arguments, the model and a string identifying
    the seasonality to plot, and we also pass an optional argument to change the figure
    size:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: Prophet是一个连续时间模型，因此尽管`forecast`数据框忽略了这些排除的时间，但支撑模型的方程是连续定义的。我们可以通过使用`plot_seasonality`函数来观察这一点。这个函数包含在Prophet的`plot`包中，因此我们首先需要导入它。它需要两个必需的参数，即模型和一个标识要绘制的季节性的字符串，我们还传递了一个可选参数来更改图形大小：
- en: '[PRE12]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Remember that we did not create a new model to solve the regular gap problem;
    we only removed those empty periods from our `forecast` DataFrame the second time
    around. As we used only one model in these two examples, of course the components
    are the same. So, the daily seasonality we plotted is the same for both versions:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，我们没有创建一个新的模型来解决常规间隔问题；我们只是在第二次处理时从我们的`forecast`数据框中移除了那些空期。由于这两个例子中我们只使用了一个模型，当然组件是相同的。因此，我们绘制的日季节性与两个版本相同：
- en: '![Figure 4.12 – Divvy daily seasonality](img/Fig_4.12.jpg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![图4.12 – Divvy日季节性](img/Fig_4.12.jpg)'
- en: Figure 4.12 – Divvy daily seasonality
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.12 – Divvy日季节性
- en: As you can see, the period from 8 a.m. until 6 p.m. matches both *Figure 4**.9*
    and *Figure 4**.11*, even though those two plots showed wildly different results
    overnight. As we have no training or future data for times outside that range,
    those times on the daily seasonality plot can be ignored. They are merely mathematical
    artifacts of the equations that created the midday curve.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，上午8点到下午6点的时间段与*图4*.*9*和*图4*.*11*都相匹配，尽管这两个图表在夜间显示了截然不同的结果。由于我们没有训练或未来数据来覆盖这个范围之外的时间，因此可以忽略日季节性图上的这些时间。它们仅仅是创建中午曲线的方程的数学上的附属品。
- en: Summary
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you took the lessons learned from the basic `Mauna Loa` model
    you built in [*Chapter 2*](B19630_02.xhtml#_idTextAnchor104), *Getting Started
    with Prophet*, and learned what changes you need to make when the periodicity
    of your data is not daily. Specifically, you used the `Air Passengers` dataset
    to model monthly data and used the `freq` argument when making your `future` DataFrame
    in order to hold back Prophet from making daily predictions.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你从你在[*第二章*](B19630_02.xhtml#_idTextAnchor104)“使用Prophet入门”中构建的基本`Mauna
    Loa`模型中学到了经验教训，并了解了当你的数据周期不是每日时需要做出哪些改变。具体来说，你使用了`Air Passengers`数据集来模拟月度数据，并在创建`future`数据框时使用了`freq`参数来阻止Prophet做出每日预测。
- en: Then, you used the hourly data from Divvy’s bike share program to set the future
    frequency to hourly so that Prophet would increase the granularity of its prediction
    timescale. Finally, you simulated periodic missing data in the Divvy dataset and
    learned a different way to match the `future` DataFrame’s schedule to that of
    the training data, in order to prevent Prophet from making unconstrained predictions.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你使用了Divvy自行车共享计划的每小时数据来设置未来的频率为每小时，这样Prophet就会增加其预测时间尺度的粒度。最后，你在Divvy数据集中模拟了周期性缺失数据，并学习了一种不同的方法来匹配`future`数据框的日程安排与训练数据，以防止Prophet做出不受约束的预测。
- en: Now that you know how to handle the different datasets you will encounter in
    this book, you’re ready for the next topic! In the next chapter, you will learn
    all about seasonality. Seasonality is at the heart of Prophet’s power and it’s
    a big topic, so prepare yourself!
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经知道了如何处理这本书中会遇到的不同数据集，你准备好学习下一个主题了！在下一章中，你将学习所有关于季节性的知识。季节性是Prophet力量的核心，这是一个很大的主题，所以请做好准备！
