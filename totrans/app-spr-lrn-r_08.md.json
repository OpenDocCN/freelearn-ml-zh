["```py\n    #----------Code listing for model.R-----------------------------\n    library(mlbench)\n    data(PimaIndiansDiabetes)\n    df<-PimaIndiansDiabetes\n    ```", "```py\n    model<-glm(diabet-es~pregnant+glucose+pressure, data=df,\n               family=binomial(link='logit'))\n    ```", "```py\n    #' @get /predict_data\n    function(pregnant, glucose, pressure){\n    ```", "```py\n      pregnant <- as.numeric(pregnant)\n      glucose <- as.numeric(glucose)\n      pressure <- as.numeric(pressure)\n    ```", "```py\n      sample <- data.frame(pregnant=pregnant,                       glucose=glucose,                       pressure=pressure)\n    ```", "```py\n      y_pred<-ifelse(predict(model,newdata=sample)>0.5,\"yes\",\"no\")\n    ```", "```py\n      list(Answer=y_pred)\n    }\n    ```", "```py\n    #' @get /predict_data\n    ```", "```py\n    #----------Code listing for model.R-----------------------------\n    library(mlbench)\n    data(PimaIndiansDiabetes)\n    df<-PimaIndiansDiabetes\n    model<-glm(diabet-es~pregnant+glucose+pressure, data=df,\n               family=binomial(link='logit'))\n    #' @get /predict_data\n    function(pregnant, glucose, pressure){\n      pregnant <- as.numeric(pregnant)\n      glucose <- as.numeric(glucose)\n      pressure <- as.numeric(pressure)\n      sample <- data.frame(pregnant=pregnant,                       glucose=glucose,                       pressure=pressure)\n      y_pred<-ifelse(predict(model,newdata=sample)>0.5,\"yes\",\"no\")\n      list(Answer=y_pred)\n    }\n    ```", "```py\n    #-------main.R-----------------\n    install.packages(\"plumber\")\n    library(plumber)\n    # (The previous code snippet is supposed to be save as 'model.R')\n    ```", "```py\n    pr <- plumber::plumb(\"model.R\")\n    pr$run(port=8080,host='127.0.0.1')\n    ```", "```py\n    #' @get /predict_data\n    ```", "```py\n    http://127.0.0.1:8080/predict_data?pregnant=1&glucose=3&pressure=1\n    ```", "```py\n    {\"Answer\":[\"no\"]}\n    ```", "```py\n    FROM rocker/r-ver:3.5.0\n    ```", "```py\n    RUN apt-get update -qq && apt-get install -y  libssl-dev  libcurl4-gnutls-dev\n    ```", "```py\n    RUN R -e \"install.packages(c('plumber','mlbench'))\"\n    ```", "```py\n    COPY / /\n    ```", "```py\n    EXPOSE 8080\n    ```", "```py\n    ENTRYPOINT [\"Rscript\", \"main.R\"]\n    ```", "```py\n    FROM rocker/r-ver:3.5.0\n    RUN apt-get update -qq && apt-get install -y  libssl-dev  libcurl4-gnutls-dev\n    RUN R -e \"install.packages(c('plumber','mlbench'))\"\n    COPY / /\n    EXPOSE 8080\n    ENTRYPOINT [\"Rscript\", \"main.R\"]\n    ```", "```py\n    docker build -t r_ml_demo .\n    ```", "```py\n    docker run --rm -p 8080:8080 r_ml_demo\n    ```", "```py\n    library(reticulate)\n    library(readr)\n    ```", "```py\n    sagemaker <- import('sagemaker')\n    session <- sagemaker$Session()\n    bucket <- session$default_bucket()\n    role_arn <- session$expand_role('sagemaker-service-role')\n    ```", "```py\n    set.seed(2019)\n    install.packages(\"mlbench\")\n    library(mlbench)\n    data(PimaIndiansDiabetes) \n    df<- PimaIndiansDiabetes\n    ```", "```py\n    df$diabetes <- ifelse(df$diabetes == \"yes\",1,0)\n    ```", "```py\n    df<- df[,c(9,1:8)]\n    ```", "```py\n    train_index <- sample(seq_len(nrow(df)),floor(0.7 * nrow(df)))\n    train <- df[train_index,]\n    test <- df[-train_index,]\n    ```", "```py\n    write_csv(train, 'diabetes_train.csv', col_names = FALSE)\n    write_csv(test, 'diabetes_test.csv', col_names = FALSE)\n    s3_train <- session$upload_data(path = 'diabetes_train.csv', \n                                    bucket = bucket, \n                                    key_prefix = 'data')\n    s3_test <- session$upload_data(path = 'diabetes_test.csv', \n                                   bucket = bucket, \n                                   key_prefix = 'data')\n    ```", "```py\n    s3_train_input <- sagemaker$s3_input(s3_data = s3_train,\n                                         content_type = 'csv')\n    s3_test_input <- sagemaker$s3_input(s3_data = s3_test,\n                                        content_type = 'csv')\n    ```", "```py\n    containers <- list('us-west-2' = \n    '433757028032.dkr.ecr.us-west-2.amazonaws.com/xgboost:latest',\n                       'us-east-1' = \n    '811284229777.dkr.ecr.us-east-1.amazonaws.com/xgboost:latest',\n                       'us-east-2' =\n     '825641698319.dkr.ecr.us-east-2.amazonaws.com/xgboost:latest',\n                       'eu-west-1' =\n     '685385470294.dkr.ecr.eu-west-1.amazonaws.com/xgboost:latest')\n    ```", "```py\n    container <- containers[session$boto_region_name][[1]]\n    ```", "```py\n    s3_output <- paste0('s3://', bucket, '/output')\n    ```", "```py\n    estimator <- sagemaker$estimator$Estimator(image_name = container,\n                                               role = role_arn,\n                                               train_instance_count = 1L,\n                                               train_instance_type = 'ml.m5.large',\n                                               train_volume_size = 30L,\n                                               train_max_run = 3600L,\n                                               input_mode = 'File',\n                                               output_path = s3_output,\n                                               output_kms_key = NULL,\n                                               base_job_name = NULL,\n                                               sagemaker_session = NULL)\n    ```", "```py\n    estimator$set_hyperparameters(num_round = 100L)\n    job_name <- paste('sagemaker-train-xgboost', format(Sys.time(), '%H-%M-%S'), \n                                 sep = '-')\n    input_data <- list('train' = s3_train_input,\n                       'validation' = s3_test_input)\n    ```", "```py\n    estimator$fit(inputs = input_data, job_name = job_name)\n    ```", "```py\n    model_endpoint <- estimator$deploy(initial_instance_count = 1L,\n                                       instance_type = 'ml.t2.medium')\n    model_endpoint$content_type <- 'text/csv'\n    model_endpoint$serializer <- sagemaker$predictor$csv_serializer\n    ```", "```py\n    one_test <- test\n    ```", "```py\n    one_test$diabetes<-NULL\n    ```", "```py\n    test_sample <- as.matrix(one_test[7, ])\n    ```", "```py\n    dimnames(test_sample)[[2]] <- NULL\n    ```", "```py\n    predictions <- model_endpoint$predict(test_sample)\n    ```", "```py\n    print(ifelse(predictions>0.5,\"yes\",'no'))\n    ```", "```py\n    1] \"no\"\n    ```", "```py\n    import os, io, boto3, json, csv\n    # grab environment variables\n    ENDPOINT_NAME = os.environ['ENDPOINT_NAME']\n    runtime= boto3.client('runtime.sagemaker')\n    ```", "```py\n    def lambda_handler(event, context):\n        print(\"Received event: \" + json.dumps(event, indent=2))\n\n        #Load JSON data from API call\n        data = json.loads(json.dumps(event))\n        payload = data['data']\n        print(payload)\n\n        #Invoke Sagemaker endpoint and pass Payload\n        response = runtime.invoke_endpoint(EndpointName=ENDPOINT_NAME,\n                                           ContentType='text/csv',\n                                           Body=bytes(str(payload),'utf'))\n\n        result = json.loads(response['Body'].read().decode())\n        predicted_label = 'yes' if result >0.5 else 'no'\n        return predicted_label\n    ```", "```py\n    {\"Answer\":[22.5813]}Note\n    ```"]