- en: '15'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Recommender Systems – Predict What Movies a User Would Like to Watch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Recommender systems, as the name suggests, are solutions that are designed to
    provide recommendations to users based on various parameters, such as past behavior,
    item similarity, or even user demographics. These systems are used in a range
    of applications, such as for suggesting videos on YouTube, movies on Netflix,
    or products on Amazon.
  prefs: []
  type: TYPE_NORMAL
- en: The primary goal of recommender systems is to personalize online user experiences
    to drive business outcomes such as higher user engagement and increased revenues.
    As the amount of available content and choices increases, personalized recommendations
    become crucial for enhancing user experience and ensuring that the customers don’t
    get overwhelmed by the available options.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Overview of the different types of recommender systems
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying a movie recommender system on Vertex AI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: First, we’ll look at the different types of recommender systems you will typically
    find in the wild.
  prefs: []
  type: TYPE_NORMAL
- en: Different types of recommender systems
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we’ll delve into the diverse types of recommendation engines,
    shedding light on their methodologies and the unique advantages each brings to
    the table:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Collaborative filtering**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This approach is based on the idea that users who have agreed in the past will
    agree in the future about their preference for certain items. As shown in the
    following figure, the model tries to find similar users by looking at their viewing/reading
    and recommends the content viewed by one user to other, similar users:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 15.1 – Collaborative filtering](img/B17792_15_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.1 – Collaborative filtering
  prefs: []
  type: TYPE_NORMAL
- en: '**Content-based filtering**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This method uses item attributes to recommend additional items similar to what
    the user likes, based on their previous actions or explicit feedback.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: For example, if a user has shown a preference for movies directed by Christopher
    Nolan, the system will rank the movies that were directed by him higher when making
    recommendations. Here, the content (director, genre, actors, and more) of the
    movies is taken into account.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Advantages**: Can handle new items, so there’s no need for other user’s data.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Challenges**: Over-specialization (may only show very similar items) and
    requires good quality metadata.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'As shown in the following figure, in content-based filtering, the model tries
    to find content similar to the content the user has viewed in the past and then
    recommends similar content to the user in the future:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 15.2 – Content-based filtering](img/B17792_15_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.2 – Content-based filtering
  prefs: []
  type: TYPE_NORMAL
- en: '**Demographic filtering**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Demographic recommenders provide personalized recommendations by categorizing
    users based on personal attributes and then offering recommendations based on
    demographic classes.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: For example, if data indicates that males aged 18-24 in a particular region
    have a high affinity for action movies such as *Fast and Furious*, then a male
    in that age bracket from that region would be more likely to receive a recommendation
    for that movie or similar action-packed movies.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Advantages**: Straightforward and doesn’t need past user-item interactions.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Challenges**: Less personalized, stereotype-based, and requires user demographic
    data.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In practice, many state-of-the-art systems use hybrid methods that combine elements
    from multiple types of recommendation techniques to overcome the limitations of
    any single approach. An example is Netflix’s recommendation engine, which uses
    a mix of collaborative, content-based, and other techniques to provide its users
    with movie and show recommendations.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Next, we’ll look at how content recommender systems are evaluated in real-world
    applications through user behavior and feedback.
  prefs: []
  type: TYPE_NORMAL
- en: Real-world evaluation of recommender systems
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the real world, the evaluation of recommender systems extends beyond traditional
    machine learning metrics to encompass a broader range of **key performance indicators**
    (**KPIs**) that align more closely with business objectives and user experience.
    Unlike typical “lab” settings, where accuracy metrics such as precision, recall,
    or RMSE are emphasized, real-world evaluations prioritize KPIs such as **click-through
    rate** (**CTR**), conversion rate, and user engagement. These KPIs offer a direct
    reflection of how users interact with the recommendations in a live environment.
  prefs: []
  type: TYPE_NORMAL
- en: For instance, a high CTR indicates that users find the recommendations relevant
    enough to explore them further, while a strong conversion rate suggests that the
    recommendations are effective in driving the desired user actions, such as purchases
    or content consumption.
  prefs: []
  type: TYPE_NORMAL
- en: 'Additionally, metrics such as **customer lifetime value** (**CLV**) and **net
    promoter score** (**NPS**) provide insights into the long-term impact of the recommender
    system on business revenue and user loyalty. By focusing on these KPIs, organizations
    can assess the real-world effectiveness of their recommender systems, ensuring
    they not only perform well in terms of machine learning metrics but also contribute
    positively to user satisfaction and business goals. This approach recognizes that
    the ultimate success of recommender systems lies in their ability to enhance the
    user experience and drive business outcomes, rather than just achieving high scores
    on traditional evaluation metrics. Let’s take a closer look at the different types
    of metrics:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Engagement metrics**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Engagement metrics assess how users interact with the recommendations, providing
    insights into the system’s ability to capture and retain user interest.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Let’s look at some different engagement metrics:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**CTR**: The ratio of clicks to the number of recommendations displayed, indicating
    how engaging the recommendations are'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Conversion rate**: The percentage of recommendations that result in a desired
    action, such as a purchase or a subscription'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Average time spent**: The amount of time users spend interacting with the
    recommended content, reflecting user engagement and content relevance'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**User satisfaction**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: User satisfaction metrics evaluate the extent to which users are pleased with
    the recommendations, serving as a direct indicator of the system’s success from
    the user’s perspective.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The following are some user satisfaction metrics:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**User feedback and ratings**: Direct user feedback on the recommended items,
    providing insights into user satisfaction'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**NPS**: A metric that gauges user satisfaction and loyalty by asking users
    how likely they are to recommend the system to others'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Business** **impact metrics**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Business impact metrics quantify the economic value and effectiveness of the
    recommender system in contributing to the organization’s financial goals.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The following are key business impact metrics:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Revenue per user** (**RPU**): The average revenue generated per user, indicating
    the economic value of the recommendations'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CLV**: The total revenue expected from a user over their lifetime, impacted
    by the effectiveness of the recommendations'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Coverage metrics**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Coverage metrics determine the extent to which the recommender system effectively
    utilizes the available content and reaches a wide user base.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The following are some different coverage metrics:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Catalog coverage**: The proportion of items in the catalog recommended to
    users, reflecting the system’s ability to utilize the entire inventory'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**User coverage**: The percentage of users receiving relevant recommendations.
    This is crucial for user inclusivity and engagement'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: In recommender systems, KPIs are essential for monitoring performance, understanding
    user preferences, and aligning recommendations with business goals. A balanced
    focus on accuracy, user engagement, satisfaction, and business impact ensures
    the development of an effective and user-centric recommender system. Continuous
    monitoring and optimization of these KPIs are vital to maintaining relevance and
    effectiveness in a dynamic user environment.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s look at how to build and deploy a recommender system on Vertex AI.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying a movie recommender system on Vertex AI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, let’s walk through an example of creating a movie recommendation system
    based on a collaborative filtering type model, deploying it on Vertex AI, and
    then querying it to get movie recommendations for specific users and movie genre
    types. The key steps are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Data preparation
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Model design and training
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Local model testing
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Registering the model on Vertex AI
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Deploying the model
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Getting predictions
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The notebook for this exercise can be found at [https://github.com/PacktPublishing/The-Definitive-Guide-to-Google-Vertex-AI/blob/main/Chapter15/Chp-15_Movie_Recommender.ipynb](https://github.com/PacktPublishing/The-Definitive-Guide-to-Google-Vertex-AI/blob/main/Chapter15/Chp-15_Movie_Recommender.ipynb).
  prefs: []
  type: TYPE_NORMAL
- en: '**Dataset**: To train the model, we will use the **MovieLens dataset** (*F.
    Maxwell Harper and Joseph A. Konstan. 2015\. The MovieLens Datasets: History and
    Context. ACM Transactions on Interactive Intelligent Systems (TiiS) 5, 4:* *19:1–19:19.*
    [https://doi.org/10.1145/2827872](https://doi.org/10.1145/2827872)).'
  prefs: []
  type: TYPE_NORMAL
- en: The MovieLens dataset is one of the most popular datasets that’s used in the
    field of recommendation systems. It’s a collection of movie ratings and has been
    produced by the *GroupLens Research Project* at the *University* *of Minnesota*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Additional details about this dataset:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Data: The dataset contains multiple versions with different sizes (ranging
    from 100k ratings to 25M ratings). It consists of movie ratings, movie metadata
    (genres and year of release), and demographic data of the users.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Data fields:'
  prefs: []
  type: TYPE_NORMAL
- en: '**User data**: User ID, age, gender, occupation, and ZIP code'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Movie data**: Movie ID, title, release date, and associated genres (such
    as action, adventure, comedy, and so on)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Ratings**: User ID, movie ID, rating (typically on a scale of 1 to 5), and
    timestamp'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Use cases: It is mainly used for experimenting with collaborative filtering,
    content-based filtering, and hybrid recommendation algorithms.'
  prefs: []
  type: TYPE_NORMAL
- en: The dataset aids in understanding user behavior and patterns in movie ratings.
  prefs: []
  type: TYPE_NORMAL
- en: The MovieLens dataset’s popularity stems from its relatively clean data, which
    lacks much of the noise and inconsistencies found in larger, more real-world datasets.
    This makes it ideal for prototyping, learning, and initial experimentation in
    the realm of recommender systems.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s use this dataset to create a simple collaborative filtering-based
    movie recommendation solution.
  prefs: []
  type: TYPE_NORMAL
- en: Data preparation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this section, we will download and preprocess the MovieLens dataset to get
    the model training data ready for the recommendation model. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ml-latest-small.zip` file, which contains the MovieLens dataset:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`ratings.csv` file into a DataFrame for processing:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Encode the data**: Encode both the user and movie IDs as integer indices
    for model training:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Since our training data is now ready in the form of the `users` and `movies`
    DataFrames, let’s build the recommender model.
  prefs: []
  type: TYPE_NORMAL
- en: Model building
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this section, we’ll build the structure of our deep learning recommendation
    model using Keras and train it on the dataset we created in the previous section:'
  prefs: []
  type: TYPE_NORMAL
- en: '`RecommendationModel` model class, which uses embeddings for users and movies:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The model calculates a match score through a dot product of user and movie embeddings.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '**Model compilation**: Compile the model using binary cross-entropy as the
    loss function and Adam as the optimizer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '**Model training**: Train the model using the training data and validate it
    using the validation data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Local model testing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before deploying the model, let’s test its predictions locally to ensure it
    works as expected:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Prepare the test data**: For a random user, create an array of movies they
    haven’t watched yet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Predict ratings**: Use the model to predict ratings for movies the user hasn’t
    rated before:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Recommend movies**: Now, based on the predicted ratings, let’s identify and
    display the top 10 movie recommendations for the user:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The final predictions from the model are shown here. Your list of movies will
    vary based on the user selected from the dataset:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: So, it seems like the model is working well in the local environment and can
    generate movie recommendations. Now, let’s deploy the model to the cloud.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying the model on Google Cloud
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The first step is to deploy the model on GCP so that we can upload and register
    our local model on Vertex AI. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Register the model on Vertex AI**: To register/upload the model on Vertex
    AI, we need to save the core machine learning model artifacts to a **Google Cloud
    Storage** (**GCS**) bucket:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we must upload the saved model to the Vertex AI Model Registry. To do
    this, we will need to pass the following parameters:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`display_name`: The model’s display name that will be displayed in the Vertex
    AI Model Registry.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`artifact_uri`: The location of the saved model in GCS.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`serving_container_image_uri`: The Docker image to be used as a serving container.
    You can use one of the images provided as part of Vertex AI or upload a custom
    container image to the GCP Artifact Registry. This chapter’s Jupyter Notebook
    provides more details.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`is_default_version`: This specifies whether this will be the default version
    for the model resource.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`version_ailiases`: Alternative alias names for the model version.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`version_description`: User description of the model version.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Deploy the model as a Vertex** **AI endpoint**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create an endpoint on Vertex AI and deploy the model for real-time inference.
    Ensure you provide a display name:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, deploy the model to the newly created endpoint while specifying the machine
    type and other configuration settings:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Using the model for inference
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This is the fun part! We’ll use our machine learning model, which has been
    deployed in Google Cloud Vertex AI, to make predictions using API calls. First,
    we’ll create a Python function to send the prediction requests, then create a
    test/inference dataset we can send to the model as part of our request. Finally,
    we’ll parse the prediction response we receive back from the model. Let’s get
    started:'
  prefs: []
  type: TYPE_NORMAL
- en: '`predict_custom_trained_model_sample` so that you can make predictions using
    the deployed model on Vertex AI:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Create the inference dataset**: Create a sample inference dataset for a user
    and genre:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a prediction input dataset consisting of all movies in the selected
    genre that the user has not watched (not rated):'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: '**Send a prediction request**: Submit the inference dataset to the Vertex AI
    Prediction API endpoint:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Parse the results**: Parse the predictions received from the API endpoint
    and combine them:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Create a DataFrame**: Create a DataFrame from the instances list/array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Print**: Print the final recommended list of movies:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output will look something like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Starting with a dataset of movies rated by users, we were able to train a model
    that can now provide movie recommendations for the users in the group.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we provided a brief overview of recommender systems, different
    techniques used for building them, and detailed steps for training, deploying,
    and querying a movie recommender model on Google Cloud’s Vertex AI. Since the
    key objective was to showcase how you can address a real-world use case using
    GCP Vertex AI, we kept the core model somewhat simple. But if you are interested
    in doing a deeper dive into recommender solutions, you can look at courses such
    as *Recommender Systems Specialization* on Coursera.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will look into another real-world use case around building
    a vision-based machine learning solution to detect defects during the manufacturing
    process.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To learn more about the topics that were covered in this chapter, take a look
    at the following resources:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Collaborative Filtering for Movie* *Recommendations*: [https://keras.io/examples/structured_data/collaborative_filtering_movielens/](https://keras.io/examples/structured_data/collaborative_filtering_movielens/)'
  prefs: []
  type: TYPE_NORMAL
- en: '*Get started with Vertex AI Model* *Registry*: [https://github.com/GoogleCloudPlatform/vertex-ai-samples/blob/main/notebooks/official/model_registry/get_started_with_model_registry.ipynb](https://github.com/GoogleCloudPlatform/vertex-ai-samples/blob/main/notebooks/official/model_registry/get_started_with_model_registry.ipynb)'
  prefs: []
  type: TYPE_NORMAL
