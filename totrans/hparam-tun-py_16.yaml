- en: '*Chapter 13*: Tracking Hyperparameter Tuning Experiments'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第 13 章*：跟踪超参数调优实验'
- en: Working with a lot of experiments can sometimes be overwhelming. Many iterations
    of experiments will need to be done. It will become even more complicated when
    we are experimenting with many ML models.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 与大量实验一起工作时，有时可能会感到不知所措。需要执行许多实验迭代。当我们尝试许多机器学习模型时，这将会变得更加复杂。
- en: In this chapter, you will be introduced to the importance of tracking hyperparameter
    tuning experiments, along with the usual practices. You will also be introduced
    to several open source packages that are available and learn how to utilize each
    of them in practice.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将了解到跟踪超参数调优实验的重要性，以及常规实践。您还将了解到一些可用的开源包，并学习如何在实践中利用它们。
- en: By the end of this chapter, you will be able to utilize your favorite package
    to track your hyperparameter tuning experiment. Being able to track your hyperparameter
    tuning experiment will boost the effectiveness of your workflow.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，您将能够利用您喜欢的包来跟踪您的超参数调优实验。能够跟踪您的超参数调优实验将提高您工作流程的有效性。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Revisiting the usual practices
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重温常规实践
- en: Exploring Neptune
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索 Neptune
- en: Exploring Scikit-Optimize
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索 Scikit-Optimize
- en: Exploring Optuna
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索 Optuna
- en: Exploring Microsoft NNI
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索 Microsoft NNI
- en: Exploring MLflow
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索 MLflow
- en: Technical requirements
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'In this chapter, we will learn how to track hyperparameter tuning experiments
    with various packages. To ensure that you can reproduce the code examples in this
    chapter, you will require the following:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何使用各种包跟踪超参数调优实验。为了确保您能够复现本章中的代码示例，您将需要以下内容：
- en: The Python 3 (version 3.7 or above)
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 3（版本 3.7 或更高）
- en: The `pandas` package (version 1.3.4 or above)
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pandas` 包（版本 1.3.4 或更高）'
- en: The `NumPy` package (version 1.21.2 or above)
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NumPy` 包（版本 1.21.2 或更高）'
- en: The `scikit-learn` package (version 1.0.1 or above)
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`scikit-learn` 包（版本 1.0.1 或更高）'
- en: The `matplotlib` package (version 3.5.0 or above)
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`matplotlib` 包（版本 3.5.0 或更高）'
- en: The `Plotly` package (version 4.0.0 or above)
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Plotly` 包（版本 4.0.0 或更高）'
- en: The `Neptune-client` package (version 0.16.3 or above)
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Neptune-client` 包（版本 0.16.3 或更高）'
- en: The `Neptune-optuna` package (version 0.9.14 or above)
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Neptune-optuna` 包（版本 0.9.14 或更高）'
- en: The Scikit-Optimize package (version 0.9.0 or above)
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Scikit-Optimize 包（版本 0.9.0 或更高）
- en: The `TensorFlow` package (version 2.4.1 or above)
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TensorFlow` 包（版本 2.4.1 或更高）'
- en: The `Optuna` package (version 2.10.0 or above)
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Optuna` 包（版本 2.10.0 或更高）'
- en: The `MLflow` package (version 1.27.0 or above)
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MLflow` 包（版本 1.27.0 或更高）'
- en: All the code examples for this chapter can be found on GitHub at [https://github.com/PacktPublishing/Hyperparameter-Tuning-with-Python](https://github.com/PacktPublishing/Hyperparameter-Tuning-with-Python).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的所有代码示例都可以在 GitHub 上找到：[https://github.com/PacktPublishing/Hyperparameter-Tuning-with-Python](https://github.com/PacktPublishing/Hyperparameter-Tuning-with-Python)。
- en: Revisiting the usual practices
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重温常规实践
- en: Conducting hyperparameter tuning experiments in a small-scale project may seem
    straightforward. We can easily do several iterations of experiments and write
    all the results in a separate document. We can log the details of the best set
    of hyperparameter values (or the tested set of hyperparameters if we perform a
    manual search method, as shown in [*Chapter 3*](B18753_03_ePub.xhtml#_idTextAnchor031)*,
    Exhaustive Search*), along with the evaluation metric, in each experiment iteration.
    By having an experiment log, we can learn from the history and define a better
    hyperparameter space in the next iteration of the experiment.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个小规模项目中执行超参数调优实验可能看起来很简单。我们可以轻松地进行多次实验迭代，并将所有结果写入一个单独的文档中。我们可以在每个实验迭代中记录最佳超参数值集（或如果我们执行手动搜索方法，如[*第
    3 章*](B18753_03_ePub.xhtml#_idTextAnchor031)*，穷举搜索*）的详细信息，以及评估指标。通过拥有实验日志，我们可以从历史中学习，并在实验的下一轮迭代中定义更好的超参数空间。
- en: When we adopt the automated hyperparameter tuning method (all the methods we’ve
    discussed so far besides the manual search method), we can get the final best
    set of hyperparameter values directly. However, this is not the case when we adopt
    the manual search method. We need to test numerous sets of hyperparameters manually.
    Several practices are adopted by the community when performing manual searches.
    Let’s take a look.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们采用自动超参数调整方法（除了手动搜索方法之外的所有我们之前讨论过的方法）时，我们可以直接获得最终的最佳超参数值集合。然而，当我们采用手动搜索方法时并非如此。我们需要手动测试大量的超参数集合。社区在执行手动搜索时采用了几种实践。让我们来看看。
- en: Using a built-in Python dictionary
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用内置的 Python 字典
- en: 'This is the most straightforward approach since we just need to create a Python
    dictionary that stores all the hyperparameter values that need to be tested. Although
    this practice is very simple, it has drawbacks. For example, we may not notice
    if we overwrite some of the hyperparameter values and forget to log the correct
    set of hyperparameter values. The following example of utilizing a built-in Python
    dictionary to store all of the hyperparameter values needs to be tested in a particular
    manual search iteration:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这是最直接的方法，因为我们只需要创建一个 Python 字典来存储所有需要测试的超参数值。尽管这种做法非常简单，但它也有缺点。例如，我们可能没有注意到覆盖了一些超参数值，并且忘记记录正确的超参数值集合。以下示例展示了如何使用内置的
    Python 字典来存储所有需要测试的超参数值，需要在特定的手动搜索迭代中进行测试：
- en: '[PRE0]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Next, let’s look at configuration files.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们看看配置文件。
- en: Using a configuration file
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用配置文件
- en: Whether it is a JSON, YAML, or CFG file, configuration files are another option.
    We can put all the hyperparameter details within this configuration file, along
    with other additional information, including (but not limited to) project name,
    author name, and data pre-processing pipeline methods. Once you have created the
    configuration file, you can load it into your Python script or Jupyter notebook,
    and treat it like a standard Python dictionary. The main advantage of using a
    configuration file is that all the important parameters are located within a single
    file, so it will be very easy to reuse the previously saved configuration files
    and increase the readability of your code. However, utilizing configuration files
    when working with a big project or huge code base can sometimes confuse us since
    we have to maintain several configuration files.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 不论是 JSON、YAML 还是 CFG 文件，配置文件都是另一种选择。我们可以在配置文件中放置所有超参数的详细信息，以及其他附加信息，包括（但不限于）项目名称、作者名称和数据预处理管道方法。一旦创建了配置文件，你就可以将其加载到你的
    Python 脚本或 Jupyter 笔记本中，并像处理标准的 Python 字典一样处理它。使用配置文件的主要优势是所有重要参数都位于单个文件中，因此将非常容易重用之前保存的配置文件，并提高代码的可读性。然而，在处理大型项目或庞大的代码库时，有时使用配置文件可能会让我们感到困惑，因为我们不得不维护多个配置文件。
- en: Using additional modules
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用额外的模块
- en: The `argparse` and `Click` modules come in handy if you want to specify the
    hyperparameter values or any other training arguments via the **Command Line Interface**
    (**CLI**). These modules can be utilized when we write our code in a Python script,
    not in a Jupyter notebook.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要通过命令行界面（CLI）指定超参数值或其他任何训练参数，`argparse` 和 `Click` 模块会很有用。这些模块可以在我们用 Python
    脚本编写代码时使用，而不是在 Jupyter 笔记本中。
- en: Using argparse
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 argparse
- en: 'The following code shows how to utilize `argparse` in a Python script:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码展示了如何在 Python 脚本中利用 `argparse`：
- en: '[PRE8]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The following code shows how to access the values from the CLI:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码展示了如何从命令行界面（CLI）访问值：
- en: '[PRE17]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'You can run the Python script with specified parameters, as follows:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以按照以下方式使用指定的参数运行 Python 脚本：
- en: '[PRE25]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: It is worth noting that the default values of the hyperparameters will be used
    if you don’t specify them when calling the Python script.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，如果你在调用 Python 脚本时没有指定超参数，将使用默认的超参数值。
- en: Using click
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 click
- en: 'The following code shows how to utilize `click` in a Python script. Note that
    `click` is very similar to `argparse` with a simpler implementation. We just need
    to add decorations on top of a particular function:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码展示了如何在 Python 脚本中利用 `click`。请注意，`click` 与 `argparse` 非常相似，但实现更简单。我们只需要在特定函数上添加装饰器：
- en: '[PRE26]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[PRE32]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[PRE34]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Similar to `argparse`, you can run the Python script with specified parameters,
    as shown here. The default hyperparameter values will be used if you don’t specify
    them when calling the Python script:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 与 `argparse` 类似，你可以使用指定的参数运行 Python 脚本，如下所示。如果你在调用 Python 脚本时没有指定它们，将使用默认的超参数值：
- en: '[PRE36]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: While experimenting with either `argparse` or `click` is very easy to do, it
    is worth noting that neither saves values anywhere. Hence, it requires extra effort
    to log all of the experimented hyperparameter values in each trial.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管使用 `argparse` 或 `click` 进行实验非常容易，但值得注意的是，它们都不会保存任何值。因此，在每次试验中记录所有实验的超参数值需要额外的努力。
- en: Regardless of whether we are adopting manual search or other automated hyperparameter
    tuning methods, it will require a lot of effort if we have to log the resulting
    experiment’s details manually. It can be overwhelming, especially when we are
    working with larger-scale experiments where we have to test several different
    ML models, data pre-processing pipelines, and other experiment setups. That’s
    why, in the coming sections, you will be introduced to several packages that can
    help you track your hyperparameter tuning experiments so that you have a more
    effective workflow.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 无论我们采用手动搜索还是其他自动化超参数调整方法，如果需要手动记录实验结果详情，这将需要大量的工作。特别是当我们处理更大规模的实验时，我们必须测试几个不同的机器学习模型、数据预处理管道和其他实验设置，这可能会让人感到不知所措。这就是为什么在接下来的章节中，您将了解到几个可以帮助您跟踪超参数调整实验的包，以便您拥有更有效的流程。
- en: Exploring Neptune
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索 Neptune
- en: '**Neptune** is a Python (and R) package that acts as a metadata store for MLOps.
    This package supports a lot of features for working with the model-building metadata.
    We can utilize Neptune for tracking our experiments, not only hyperparameter tuning
    experiments but also other model-building-related experiments. We can log, visualize,
    organize, and manage our experiments just by using a single package. Furthermore,
    it also supports model registry and live monitors our ML jobs.'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '**Neptune** 是一个 Python（和 R）包，充当 MLOps 的元数据存储。此包支持许多用于处理模型构建元数据的特性。我们可以利用 Neptune
    来跟踪我们的实验，不仅限于超参数调整实验，还包括其他与模型构建相关的实验。我们只需使用一个包就可以记录、可视化、组织和管理工作。此外，它还支持模型注册并实时监控我们的机器学习作业。'
- en: 'Installing Neptune is very easy – you can just use `pip install neptune-client`
    or `conda install -c conda-forge neptune-client`. Once it has been installed,
    you need to sign up for an account to get the API token. Neptune is free for an
    individual plan within the quota limit, but you need to pay if you want to utilize
    Neptune for commercial team usage. Further information about registering yourself
    for Neptune can be found on their official website: https://neptune.ai/register.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 安装 Neptune 非常简单 – 您可以使用 `pip install neptune-client` 或 `conda install -c conda-forge
    neptune-client`。一旦安装完成，您需要注册一个账户以获取 API 令牌。Neptune 在个人计划配额限制内是免费的，但如果您想为商业团队使用
    Neptune，则需要付费。有关注册 Neptune 的更多信息，请访问他们的官方网站：https://neptune.ai/register。
- en: 'Using Neptune to help track your hyperparameter tuning experiments is straightforward,
    as shown in the following steps:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Neptune 来帮助跟踪您的超参数调整实验非常简单，如下面的步骤所示：
- en: 'Create a new project from your Neptune account’s home page:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从您的 Neptune 账户主页创建一个新的项目：
- en: '![Figure 13.1 – Creating a new Neptune project'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 13.1 – 创建一个新的 Neptune 项目'
- en: '](img/B18753_13_001.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/B18753_13_001.jpg](img/B18753_13_001.jpg)'
- en: Figure 13.1 – Creating a new Neptune project
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.1 – 创建一个新的 Neptune 项目
- en: 'Enter a name and description for your project:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为您的项目输入一个名称和描述：
- en: '![Figure 13.2 – Entering the project’s details'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 13.2 – 输入项目详情'
- en: '](img/B18753_13_002.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/B18753_13_002.jpg](img/B18753_13_002.jpg)'
- en: Figure 13.2 – Entering the project’s details
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.2 – 输入项目详情
- en: 'Write the hyperparameter tuning experiment script. Neptune provides several
    boilerplate code options based on the framework you want to use, including (but
    not limited to) Optuna, PyTorch, Keras, TensorFlow, scikit-learn, and XGBoost.
    You can just copy the provided boilerplate code and customize it based on your
    needs. For example, let’s use the provided boilerplate code for Optuna (see *Figure
    13.3*) and save the training script as `train_optuna.py`. Please see the full
    code in this book’s GitHub repository, which was provided in the *Technical requirements*
    section:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写超参数调整实验脚本。Neptune 提供了基于您想要使用的框架的模板代码选项，包括但不限于 Optuna、PyTorch、Keras、TensorFlow、scikit-learn
    和 XGBoost。您可以直接复制提供的模板代码并根据您的需求进行定制。例如，让我们使用提供的模板代码为 Optuna（见 *图 13.3*）并保存训练脚本为
    `train_optuna.py`。请参阅本书 GitHub 仓库中的完整代码，该代码在 *技术要求* 部分提供：
- en: '![Figure 13.3 – Creating the hyperparameter tuning experiment script'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 13.3 – 创建超参数调整实验脚本'
- en: '](img/B18753_13_003.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/B18753_13_003.jpg](img/B18753_13_003.jpg)'
- en: Figure 13.3 – Creating the hyperparameter tuning experiment script
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.3 – 创建超参数调整实验脚本
- en: 'Run the hyperparameter tuning script (`python train_optuna.py`) and look at
    the metadata of the experiments on your Neptune project page. Every run will be
    stored as a new experiment ID in Neptune, so you don’t have to worry about the
    experiment versioning since Neptune will handle it automatically for you:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行超参数调整脚本（`python train_optuna.py`）并查看 Neptune 项目页面上的实验元数据。每个运行都将存储为 Neptune
    中的一个新实验 ID，因此您不必担心实验版本控制，因为 Neptune 会自动为您处理：
- en: '![Figure 13.4 – Neptune’s experiment runs table'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 13.4 – Neptune 的实验运行表'
- en: '](img/B18753_13_004.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/B18753_13_004.jpg)'
- en: Figure 13.4 – Neptune’s experiment runs table
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.4 – Neptune 的实验运行表
- en: 'You can also see all the metadata for each of the experiment runs, including
    (but not limited to) the tested hyperparameters, source code, CPU/GPU usage, metric
    charts, artifacts (data, model, or any other related files), and figures (for
    example, confusion matrices), as shown in the following screenshot:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以看到每个实验运行的全部元数据，包括（但不限于）测试的超参数、源代码、CPU/GPU 使用情况、指标图表、工件（数据、模型或任何其他相关文件）和图表（例如，混淆矩阵），如下面的截图所示：
- en: '![Figure 13.5 – Metadata stored in Neptune'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 13.5 – 存储在 Neptune 中的元数据'
- en: '](img/B18753_13_005.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/B18753_13_005.jpg)'
- en: Figure 13.5 – Metadata stored in Neptune
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.5 – 存储在 Neptune 中的元数据
- en: 'Analyze the experiment results. Neptune can not only help you log all of the
    metadata for each experiment run, but it can also compare several different runs
    using several types of comparison strategies. You can see the hyperparameter values
    comparison via parallel plot or line charts. You can also compare all of the experiment
    details via a **Side-by-side** comparison strategy (see *Figure 13.6*). Furthermore,
    Neptune also enables us to compare the logged images or artifacts between each
    run:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 分析实验结果。Neptune 不仅可以帮助您记录每个实验运行的全部元数据，还可以使用多种比较策略比较几个不同的运行。您可以通过并行图或折线图查看超参数值比较。您还可以通过**并排比较**策略比较所有实验细节（见图
    13.6）。此外，Neptune 还使我们能够比较每个运行之间记录的图像或工件：
- en: '![Figure 13.6 – Comparing the experiment runs and their results'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 13.6 – 比较实验运行及其结果'
- en: '](img/B18753_13_006.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/B18753_13_006.jpg)'
- en: Figure 13.6 – Comparing the experiment runs and their results
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.6 – 比较实验运行及其结果
- en: 'For more information regarding what you can log and display in Neptune, please
    refer to the official documentation page: https://docs.neptune.ai/you-should-know/what-can-you-log-and-display.'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 有关在 Neptune 中可以记录和显示的信息的更多信息，请参阅官方文档页面：https://docs.neptune.ai/you-should-know/what-can-you-log-and-display。
- en: Integrations in Neptune
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: Neptune 的集成
- en: 'Neptune provides numerous integrations for ML-related experiments in general
    and also for specific hyperparameter tuning-related tasks. Three integrations
    are supported by Neptune for hyperparameter tuning tasks: Optuna, Keras, and Scikit-Optimize.
    For more information, please refer to the official documentation page: https://docs.neptune.ai/integrations-and-supported-tools/intro.'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: Neptune 为机器学习相关实验以及特定超参数调整任务提供了许多集成。Neptune 支持三种超参数调整任务的集成：Optuna、Keras 和 Scikit-Optimize。有关更多信息，请参阅官方文档页面：https://docs.neptune.ai/integrations-and-supported-tools/intro。
- en: More examples
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 更多示例
- en: 'Neptune is a very powerful package that can be utilized for other ML experiment-related
    tasks, too. For more examples of how to utilize Neptune in general, please refer
    to the official documentation page: https://docs.neptune.ai/getting-started/examples.'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: Neptune 是一个非常强大的包，可以用于其他机器学习实验相关任务。有关如何一般使用 Neptune 的更多示例，请参阅官方文档页面：https://docs.neptune.ai/getting-started/examples。
- en: In this section, you were introduced to Neptune and how to utilize it to help
    you track your hyperparameter tuning experiments. In the next section, you will
    learn how to utilize the famous Scikit-Optimize package for hyperparameter tuning
    experiment tracking purposes.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您已了解 Neptune 及其如何帮助您跟踪超参数调整实验。在下一节中，您将学习如何利用著名的 Scikit-Optimize 包进行超参数调整实验跟踪。
- en: Exploring scikit-optimize
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索 scikit-optimize
- en: You were introduced to the **Scikit-Optimize** package in [*Chapter 7*](B18753_07_ePub.xhtml#_idTextAnchor062),
    *Hyperparameter Tuning via Scikit*, to conduct a hyperparameter tuning experiment.
    In this section, we will learn how to utilize this package to track all hyperparameter
    tuning experiments conducted using this package.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 您在[*第 7 章*](B18753_07_ePub.xhtml#_idTextAnchor062)中介绍了**Scikit-Optimize**包，*通过
    Scikit 进行超参数调整*，以进行超参数调整实验。在本节中，我们将学习如何利用此包跟踪使用此包进行的所有超参数调整实验。
- en: 'Scikit-Optimize provides very nice visualization plots that summarize the tested
    hyperparameter values, the objective function scores, and the relationship between
    them. Three plots are available in this package, as shown here. Please see the
    full code in this book’s GitHub repository for more details. The following plots
    were generated based on the same experimental setup that was provided in [*Chapter
    7*](B18753_07_ePub.xhtml#_idTextAnchor062), *Hyperparameter Tuning via Scikit*,
    for the BOGP hyperparameter tuning method:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: Scikit-Optimize 提供了非常棒的可视化图表，这些图表总结了测试的超参数值、目标函数分数以及它们之间的关系。本包中有三个图表可用，如上图所示。更多详细信息，请参阅本书
    GitHub 仓库中的完整代码。以下图表是基于在 [*第 7 章*](B18753_07_ePub.xhtml#_idTextAnchor062) 中提供的相同实验设置生成的，*通过
    Scikit 进行超参数调整*，用于 BOGP 超参数调整方法：
- en: '`plot_convergence`: This is used to visualize the hyperparameter tuning optimization
    progress for each iteration:'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`plot_convergence`：这个用于可视化每个迭代的超参数调整优化进度：'
- en: '![Figure 13.7 – Convergence plot'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 13.7 – 收敛图'
- en: '](img/B18753_13_007.jpg)'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B18753_13_007.jpg)'
- en: Figure 13.7 – Convergence plot
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.7 – 收敛图
- en: '`plot_evaluations`: This is used to visualize the optimization evolution process
    history. In other words, it shows the order in which hyperparameter values were
    sampled during the optimization process. For each hyperparameter, a histogram
    of explored hyperparameter values is generated. For each pair of hyperparameters,
    the scatter plot of tested hyperparameter values is visualized and equipped with
    colors to act as the legend of the evolution history (from blue to yellow):'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`plot_evaluations`：这个用于可视化优化进化的历史过程。换句话说，它显示了在优化过程中超参数值被采样的顺序。对于每个超参数，都会生成一个探索的超参数值的直方图。对于每个超参数对，都会可视化测试的超参数值的散点图，并配备颜色作为进化历史的图例（从蓝色到黄色）：'
- en: '![Figure 13.8 – Evaluation plot'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 13.8 – 评估图'
- en: '](img/B18753_13_008.jpg)'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B18753_13_008.jpg)'
- en: Figure 13.8 – Evaluation plot
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.8 – 评估图
- en: '`plot_objective`: This is used to visualize the pairwise dependence plot of
    the objective function. This visualization helps us gain information regarding
    the relationship between the tested hyperparameter values and the objective function
    scores. From this plot, you can see which subspace needs more attention and which
    subspace, or even which hyperparameter, needs to be removed from the original
    space in the next trial:'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`plot_objective`：这个用于可视化目标函数的对应依赖图。这种可视化有助于我们了解测试的超参数值与目标函数分数之间的关系。从这张图中，你可以看到哪个子空间需要更多的关注，以及哪个子空间，甚至哪个超参数，需要在下一次试验中从原始空间中移除：'
- en: '![Figure 13.9 – Pairwise dependence plot'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 13.9 – 对应依赖图'
- en: '](img/B18753_13_009.jpg)'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B18753_13_009.jpg)'
- en: Figure 13.9 – Pairwise dependence plot
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.9 – 对应依赖图
- en: Integration with Neptune
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 与 Neptune 集成
- en: 'Scikit-Optimize provides very informative visualization modules. However, it
    does not support any experiment versioning capabilities, unlike the Neptune package.
    To get the best of both worlds, we can integrate Scikit-Optimize with Neptune
    via its integration module. For more information about this, please refer to the
    official documentation page: https://docs-legacy.neptune.ai/integrations/skopt.html.'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: Scikit-Optimize 提供了非常信息丰富的可视化模块。然而，它不像 Neptune 包那样支持任何实验版本化功能。为了取长补短，我们可以通过其集成模块将
    Scikit-Optimize 与 Neptune 集成。有关更多信息，请参阅官方文档页面：https://docs-legacy.neptune.ai/integrations/skopt.html。
- en: In this section, you learned how to utilize the Scikit-Optimize package to help
    you track your hyperparameter tuning experiments. In the next section, you will
    learn how to utilize the Optuna package for hyperparameter tuning experiment tracking
    purposes.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你学习了如何利用 Scikit-Optimize 包来帮助你跟踪你的超参数调整实验。在下一节中，你将学习如何利用 Optuna 包进行超参数调整实验跟踪。
- en: Exploring Optuna
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索 Optuna
- en: '**Optuna** is a hyperparameter tuning package in Python that provides several
    hyperparameter tuning methods. We discussed how to utilize Optuna to conduct a
    hyperparameter tuning experiment in [*Chapter 9*](B18753_09_ePub.xhtml#_idTextAnchor082),
    *Hyperparameter Tuning via Optuna*. Here, we will discuss how to utilize this
    package to track those experiments.'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '**Optuna** 是一个 Python 超参数调整包，它提供了几种超参数调整方法。我们在 [*第 9 章*](B18753_09_ePub.xhtml#_idTextAnchor082)
    中讨论了如何利用 Optuna 进行超参数调整实验，*通过 Optuna 进行超参数调整*。在这里，我们将讨论如何利用这个包来跟踪这些实验。'
- en: 'Similar to Scikit-Optimize, Optuna provides very nice visualization modules
    to help us track the hyperparameter tuning experiments and as a guide for us to
    decide which subspace to search in the next trial. Four visualization modules
    can be utilized, as shown here. All of them expect the `study` object (see *Chapter
    9*, *Hyperparameter Tuning via Optuna*) as input. Please see the full code in
    this book’s GitHub repository:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 与Scikit-Optimize类似，Optuna提供了非常优秀的可视化模块，帮助我们跟踪超参数调优实验，并作为我们决定下一次试验中搜索哪个子空间的指南。这里展示了四个可利用的可视化模块。所有这些模块都期望以`study`对象（见*第9章*，*通过Optuna进行超参数调优*）作为输入。请参阅本书GitHub仓库中的完整代码：
- en: '`plot_contour`: This is used to visualize the relationship between hyperparameters
    (as well as the objective function scores) in the form of contour plots:'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`plot_contour`：这个用于以等高线图的形式可视化超参数（以及目标函数分数）之间的关系：'
- en: '![Figure 13.10 – Contour plot'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '![图13.10 – 等高线图'
- en: '](img/B18753_13_010.jpg)'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B18753_13_010.jpg)'
- en: Figure 13.10 – Contour plot
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.10 – 等高线图
- en: '`plot_optimization_history`: This is used to visualize the hyperparameter tuning
    optimization progress for each iteration:'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`plot_optimization_history`：这个用于可视化每个迭代的超参数调优优化进度：'
- en: '![Figure 13.11 – Optimization history plot'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '![图13.11 – 优化历史图'
- en: '](img/B18753_13_011.jpg)'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B18753_13_011.jpg)'
- en: Figure 13.11 – Optimization history plot
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.11 – 优化历史图
- en: '`plot_parallel_coordinate`: This is used to visualize the relationship between
    hyperparameters (as well as the objective function scores) in the form of a parallel
    coordinate plot:'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`plot_parallel_coordinate`：这个用于以平行坐标图的形式可视化超参数（以及目标函数分数）之间的关系：'
- en: '![Figure 13.12 – Parallel coordinate plot'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '![图13.12 – 平行坐标图'
- en: '](img/B18753_13_012.jpg)'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B18753_13_012.jpg)'
- en: Figure 13.12 – Parallel coordinate plot
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.12 – 平行坐标图
- en: '`plot_slice`: This is used to visualize the hyperparameter tuning method’s
    search evolution. You can see what hyperparameter values have been tested in the
    experiment and which subspace is getting more attention during the search process:'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`plot_slice`：这个用于可视化超参数调优方法搜索进化的过程。你可以看到实验中测试过的超参数值，以及搜索过程中哪个子空间受到了更多关注：'
- en: '![Figure 13.13 – Slice plot'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '![图13.13 – 切片图'
- en: '](img/B18753_13_013.jpg)'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B18753_13_013.jpg)'
- en: Figure 13.13 – Slice plot
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.13 – 切片图
- en: The nice thing about all the visualization modules in Optuna is that they are
    all interactive charts since they are created using the `Plotly` visualization
    package. You can zoom in on a specific area in the charts and use other interactive
    features.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: Optuna中所有可视化模块的优点在于它们都是交互式图表，因为它们是使用`Plotly`可视化包创建的。你可以在图表中放大特定区域，并使用其他交互式功能。
- en: Integration with Neptune
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 与Neptune集成
- en: 'Similar to Scikit-Optimize, Optuna provides very informative visualization
    modules. However, it does not support any experiment versioning capability, unlike
    the Neptune package. We can integrate Optuna with Neptune via its integration
    module. For more information about this, please refer to the official documentation
    page: https://docs-legacy.neptune.ai/integrations/optuna.html.'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 与Scikit-Optimize类似，Optuna提供了非常丰富的可视化模块。然而，它不像Neptune包那样支持任何实验版本化功能。我们可以通过其集成模块将Optuna与Neptune集成。有关更多信息，请参阅官方文档页面：https://docs-legacy.neptune.ai/integrations/optuna.html。
- en: In this section, you learned how to utilize the Optuna package to track your
    hyperparameter tuning experiments. In the next section, you will learn how to
    utilize the Microsoft NNI package for hyperparameter tuning experiment tracking
    purposes.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你学习了如何利用Optuna包来跟踪你的超参数调优实验。在下一节中，你将学习如何利用Microsoft NNI包进行超参数调优实验跟踪。
- en: Exploring Microsoft NNI
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索Microsoft NNI
- en: '**Neural Network Intelligence** (**NNI**) is a package that is developed by
    Microsoft and can be utilized not only for hyperparameter tuning tasks but also
    for neural architecture search, model compression, and feature engineering. We
    discussed how to utilize NNI to conduct hyperparameter tuning experiments in [*Chapter
    10*](B18753_10_ePub.xhtml#_idTextAnchor092), *Advanced Hyperparameter Tuning with
    DEAP and Microsoft NNI*.'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '**神经网络智能**（**NNI**）是一个由微软开发的包，不仅可以用于超参数调优任务，还可以用于神经架构搜索、模型压缩和特征工程。我们在[*第10章*](B18753_10_ePub.xhtml#_idTextAnchor092)，*使用DEAP和Microsoft
    NNI进行高级超参数调优*中讨论了如何利用NNI进行超参数调优实验。'
- en: In this section, we will discuss how to utilize this package to track those
    experiments. All of the experiment tracking modules provided by NNI are located
    in the *web portal*. You learned about the web portal in [*Chapter 10*](B18753_10_ePub.xhtml#_idTextAnchor092),
    *Advanced Hyperparameter Tuning with DEAP and Microsoft NNI*. However, we haven’t
    discussed it in depth and there are many useful features you should know about.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将讨论如何利用此包来跟踪这些实验。NNI提供的所有实验跟踪模块都位于*门户网站*。您在[*第 10 章*](B18753_10_ePub.xhtml#_idTextAnchor092)中学习了关于*门户网站*的内容，*使用
    DEAP 和 Microsoft NNI 进行高级超参数调整*。然而，我们还没有深入讨论，还有很多有用的功能您应该了解。
- en: 'The web portal can be utilized to visualize all of the hyperparameter tuning
    experiment’s metadata, including (but not limited to) tuning and training progress,
    evaluation metrics, and error logs. It can also be utilized to update the experiment’s
    concurrency and duration, and retry the failed trials. The following is a list
    of all the important modules in the NNI web portal that can be utilized to help
    us track our hyperparameter tuning experiments. The following plots have been
    generated based on the same experimental setup that was stated in [*Chapter 10*](B18753_10_ePub.xhtml#_idTextAnchor092),
    *Advanced Hyperparameter Tuning with DEAP and Microsoft NNI*, for the Random Search
    method. Please see the full code in this book’s GitHub repository:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 门户网站可以用来可视化所有超参数调整实验的元数据，包括但不限于调整和训练进度、评估指标和错误日志。它还可以用来更新实验的并发性和持续时间，以及重试失败的试验。以下是在
    NNI 门户网站中可以用来帮助我们跟踪超参数调整实验的所有重要模块列表。以下图表是基于[*第 10 章*](B18753_10_ePub.xhtml#_idTextAnchor092)中所述的相同实验设置生成的，*使用
    DEAP 和 Microsoft NNI 进行高级超参数调整*，针对随机搜索方法。请参阅本书 GitHub 仓库中的完整代码：
- en: 'The **Overview** page shows an overview of our hyperparameter tuning experiment,
    including its name and ID, status, start and end time, best metric, elapsed duration,
    number of trials faceted by the status, as well as the experiment path, training
    platform, and tuner details. Here, you can also change the maximum duration, the
    maximum number of trials, and the experiment’s concurrency. There is also a dedicated
    module that shows the top-performing trials:'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**概览**页面显示了我们的超参数调整实验的概览，包括其名称和ID、状态、开始和结束时间、最佳指标、已过持续时间、按状态分面的试验数量，以及实验路径、训练平台和调整器详情。在这里，您还可以更改最大持续时间、最大试验数量和实验的并发性。还有一个专门的模块显示表现最佳的试验：'
- en: '![Figure 13.14 – The Overview page'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 13.14 – 概览页面'
- en: '](img/B18753_13_014.jpg)'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B18753_13_014.jpg)'
- en: Figure 13.14 – The Overview page
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.14 – 概览页面
- en: 'The **Trials detail** page shows every detail regarding the experiment’s trials,
    including a visualization of all the metrics (see *Figure 13.15*), a hyperparameter
    values parallel plot (see *Figure 13.16*), a bar chart of the duration of all
    the trials (see *Figure 13.17*), and a line chart of all intermediate results
    that shows the trend of each trial during the intermediate steps. We can also
    see the details of each trial via the **Trial jobs** module, including (but not
    limited to) the trial’s ID, duration, status, metric, hyperparameter value details,
    and log files (see *Figure 13.18*):'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**试验详情**页面显示了关于实验试验的每一个细节，包括所有指标的可视化（见 *图 13.15*），超参数值的平行图（见 *图 13.16*），所有试验持续时间的条形图（见
    *图 13.17*），以及显示每个试验在中间步骤趋势的所有中间结果的折线图。我们还可以通过**试验作业**模块查看每个试验的详细信息，包括但不限于试验的ID、持续时间、状态、指标、超参数值详情和日志文件（见
    *图 13.18*）：'
- en: '![Figure 13.15 – The Trials detail page'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 13.15 – 试验详情页面'
- en: '](img/B18753_13_015.jpg)'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B18753_13_015.jpg)'
- en: Figure 13.15 – The Trials detail page
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.15 – 试验详情页面
- en: 'The following is a parallel plot that shows different hyperparameter values
    that had been tested in the experiment:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的平行图显示了实验中测试过的不同超参数值：
- en: '![Figure 13.16 – Hyperparameter values parallel plot'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 13.16 – 超参数值平行图'
- en: '](img/B18753_13_016.jpg)'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B18753_13_016.jpg)'
- en: Figure 13.16 – Hyperparameter values parallel plot
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.16 – 超参数值平行图
- en: 'The following is a bar chart containing information about the duration of all
    the trials in the experiment:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的条形图包含了关于实验中所有试验持续时间的详细信息：
- en: '![Figure 13.17 – Trials duration bar chart'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 13.17 – 试验持续时间条形图'
- en: '](img/B18753_13_017.jpg)'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B18753_13_017.jpg)'
- en: Figure 13.17 – Trials duration bar chart
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.17 – 试验持续时间条形图
- en: 'Finally, there’s the **Trial jobs** module:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，还有**试验作业**模块：
- en: '![Figure 13.18 – The Trial jobs module'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 13.18 – 试验作业模块'
- en: '](img/B18753_13_018.jpg)'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/B18753_13_018.jpg)'
- en: Figure 13.18 – The Trial jobs module
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.18 – 试验作业模块
- en: 'The Trial jobs module includes the following:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 试验作业模块包括以下内容：
- en: '**Sidebar**: We can access all the information related to the search space,
    config, and log files in the sidebar:'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**侧边栏**：我们可以在侧边栏中访问与搜索空间、配置和日志文件相关的所有信息：'
- en: '![Figure 13.19 – Sidebar'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '![图13.19 – 侧边栏'
- en: '](img/B18753_13_019.jpg)'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/B18753_13_019.jpg)'
- en: Figure 13.19 – Sidebar
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.19 – 侧边栏
- en: 'The **Auto refresh** button: We can also change the refresh interval of the
    web portal by using the **Auto refresh** button:'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动刷新**按钮：我们还可以通过使用**自动刷新**按钮来更改Web门户的刷新间隔：'
- en: '![Figure 13.20 – The Auto refresh button'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '![图13.20 – 自动刷新按钮'
- en: '](img/B18753_13_020.jpg)'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/B18753_13_020.jpg)'
- en: Figure 13.20 – The Auto refresh button
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.20 – 自动刷新按钮
- en: 'The **Experiment summary** button: By clicking this button, you can view all
    the summaries for the current experiment:'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**实验摘要**按钮：通过点击此按钮，你可以查看当前实验的所有摘要：'
- en: '![Figure 13.21 – The Experiment summary button'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '![图13.21 – 实验摘要按钮'
- en: '](img/B18753_13_021.jpg)'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/B18753_13_021.jpg)'
- en: Figure 13.21 – The Experiment summary button
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.21 – 实验摘要按钮
- en: In this section, you learned how to utilize the Microsoft NNI package to track
    your hyperparameter tuning experiments. In the next section, you will learn how
    to utilize the MLflow package for hyperparameter-tuning experiment tracking purposes.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你学习了如何利用Microsoft NNI包来跟踪你的超参数调整实验。在下一节中，你将学习如何利用MLflow包进行超参数调整实验跟踪。
- en: Exploring MLflow
  id: totrans-196
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索MLflow
- en: '`pip install mlflow` command.'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '`pip install mlflow`命令。'
- en: To track our hyperparameter tuning experiments with MLflow, we simply need to
    add several logging functions to our code base. Once we’ve added the required
    logging function, we can go to the provided UI by simply entering the `mlflow
    ui` command in the command line and opening it at [http://localhost:5000](http://localhost:5000).
    Many logging functions are provided by MLflow, and the following are some of the
    main important logging functions you need to be aware of. Please see the full
    example c
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用MLflow跟踪我们的超参数调整实验，我们只需在我们的代码库中添加几个日志函数。一旦我们添加了所需的日志函数，我们只需在命令行中输入`mlflow
    ui`命令并打开它，就可以进入提供的UI界面[http://localhost:5000](http://localhost:5000)。MLflow提供了许多日志函数，以下是一些你需要了解的主要重要日志函数。请参阅完整的示例代码。
- en: 'ode in this book’s GitHub repository:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 本书GitHub仓库中的ode：
- en: '`create_experiment()`: This function is used to create a new experiment. You
    can specify the name of the experiment, tags, and the path to store the experiment
    artifacts.'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`create_experiment()`: 此函数用于创建一个新的实验。你可以指定实验的名称、标签以及存储实验工件的路由。'
- en: '`set_experiment()`: This function is used to set the given experiment name
    or ID as the current active experiment.'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`set_experiment()`: 此函数用于将给定的实验名称或ID设置为当前活动实验。'
- en: '`start_run()`: This function is used to start a new MLflow run under the current
    active experiment. It is suggested to use this function as a context manager within
    a `with` block.'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`start_run()`: 此函数用于在当前活动实验下启动一个新的MLflow运行。建议在`with`块中使用此函数作为上下文管理器。'
- en: '`log_metric()`: This function is used to log a single metric within the currently
    active run. If you want to do bulk logging, you can also use the `log_metrics()`
    function by passing a dictionary of metrics.'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`log_metric()`: 此函数用于在当前活动运行中记录单个指标。如果你想进行批量记录，你也可以通过传递指标字典来使用`log_metrics()`函数。'
- en: '`log_param()`: This function is used to log a parameter or hyperparameter within
    the currently active run. If you want to do bulk logging, you can also use the
    `log_params()` function by passing a dictionary of metrics.'
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`log_param()`: 此函数用于在当前活动运行中记录参数或超参数。如果你想进行批量记录，你也可以通过传递指标字典来使用`log_params()`函数。'
- en: '`log_artifact()`: This function is used to log a file or directory as an artifact
    of the currently active run. If you want to log all the contents of a local directory,
    you can also use the `log_artifacts()` function.'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`log_artifact()`: 此函数用于将文件或目录记录为当前活动运行的工件。如果你想记录本地目录的所有内容，你也可以使用`log_artifacts()`函数。'
- en: '`set_tag()`: This function is used to set a tag for the currently active run.
    You must provide the key and value of the tag. For example, you can set the key
    as `“release_version”` and the value as `“1.0.0”`.'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`set_tag()`: 此函数用于为当前活动运行设置一个标签。你必须提供标签的键和值。例如，你可以将键设置为`“release_version”`，值设置为`“1.0.0”`。'
- en: '`log_figure()`: This function is used to log a figure as an artifact of the
    currently active run. This function supports the `matplotlib` and `pyplot` figure
    object types.'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`log_figure()`: 此函数用于将图形作为当前活动运行的工件进行记录。此函数支持`matplotlib`和`pyplot`图形对象类型。'
- en: '`log_image()`: This function is used to log an image as an artifact of the
    currently active run. This function supports the `numpy.ndarray` and `PIL.image.image`
    object types.'
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`log_image()`: 此函数用于将图像作为当前活动运行的工件进行记录。此函数支持`numpy.ndarray`和`PIL.image.image`对象类型。'
- en: MLflow Logging Functions
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: MLflow记录函数
- en: 'For more information regarding all the available logging functions in MLfLow,
    please refer to the official documentation page: https://www.mlflow.org/docs/latest/tracking.html#logging-functions.'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 有关MLfLow中所有可用记录函数的更多信息，请参阅官方文档页面：https://www.mlflow.org/docs/latest/tracking.html#logging-functions。
- en: MLflow Integrations
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: MLflow集成
- en: 'MLflow also supports integrations with many well-known open source packages,
    including (but not limited to) scikit-learn, TensorFlow, XGBoost, PyTorch, and
    Spark. You can do automatic logging by utilizing the provided integrations. For
    more information, please refer to the official documentation page: https://www.mlflow.org/docs/latest/tracking.html#automatic-logging.'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: MLflow还支持与许多知名开源包的集成，包括但不限于scikit-learn、TensorFlow、XGBoost、PyTorch和Spark。你可以通过利用提供的集成来进行自动记录。有关更多信息，请参阅官方文档页面：https://www.mlflow.org/docs/latest/tracking.html#automatic-logging。
- en: Examples of Hyperparameter Tuning Use Cases
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 超参数调优用例示例
- en: 'The author of MLflow has provided example code for hyperparameter tuning use
    cases. For more information, please refer to the official GitHub repository: https://github.com/mlflow/mlflow/tree/master/examples/hyperparam.'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: MLflow的作者为超参数调优用例提供了示例代码。有关更多信息，请参阅官方GitHub仓库：https://github.com/mlflow/mlflow/tree/master/examples/hyperparam。
- en: In this section, you learned how to utilize the MLflow package to track your
    hyperparameter tuning experiments. You can start exploring this package by yourself
    to get a better understanding of how this package works and how powerful it is.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你学习了如何利用MLflow包来跟踪你的超参数调优实验。你可以自己开始探索这个包，以更好地理解这个包的工作方式和它的强大功能。
- en: Summary
  id: totrans-216
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we discussed the importance of tracking hyperparameter tuning
    experiments, along with the usual practices. You were also introduced to several
    open source packages that are available and learned how to utilize each of them
    in practice, including Neptune, Scikit-Optimize, Optuna, Microsoft NNI, and MLflow.
    At this point, you should be able to utilize your favorite package to track your
    hyperparameter tuning experiment, which will boost the effectiveness of your workflow.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了跟踪超参数调优实验的重要性以及常规做法。你还介绍了几个可用的开源包，并学习了如何在实践中利用它们，包括Neptune、Scikit-Optimize、Optuna、Microsoft
    NNI和MLflow。此时，你应该能够利用你喜欢的包来跟踪你的超参数调优实验，这将提高你工作流程的有效性。
- en: In the next chapter, we’ll conclude all the topics we have discussed throughout
    this book. We’ll also discuss the next steps you can take to expand your hyperparameter
    tuning knowledge.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将总结本书中讨论的所有主题。我们还将讨论你可以采取的下一步来扩展你的超参数调优知识。
