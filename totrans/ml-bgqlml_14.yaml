- en: '*Chapter 11*: Implementing Deep Neural Networks'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Deep Neural Networks** (**DNNs**) are one of the most advanced techniques
    to implement machine learning algorithms. They''re widely used for different use
    cases and can be considered pervasive in everyday life.'
  prefs: []
  type: TYPE_NORMAL
- en: When we interact with a virtual assistant, or we use mobile applications for
    automatic translation and image recognition, we're leveraging the capabilities
    of DNNs trained with large datasets of audio and images.
  prefs: []
  type: TYPE_NORMAL
- en: After reading this chapter, you'll be able to develop, evaluate, and test a
    DNN using BigQuery ML. In this chapter, we'll see all the stages necessary to
    implement a DNN by using BigQuery ML to predict the duration of rentals related
    to the New York City bike-sharing service.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using BigQuery ML, we''ll go through the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing the business scenario
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Discovering DNNs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preparing the dataset
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Training the DNN models
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Evaluating the DNN models
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the DNN models
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Drawing business conclusions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter requires you to have access to a web browser and to be able to
    leverage the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A GCP account to access Google Cloud Console
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A GCP project to host the BigQuery datasets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that we're ready with the technical requirements, let's dive into the analysis
    and development of our BigQuery ML DNN models.
  prefs: []
  type: TYPE_NORMAL
- en: 'Check out the following video to see the Code in Action: [https://bit.ly/33lbq8A](https://bit.ly/33lbq8A)'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing the business scenario
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, you'll be introduced to the business scenario that will be
    handled with the DNNs technique.
  prefs: []
  type: TYPE_NORMAL
- en: The business scenario is very similar to the use case presented and used in
    [*Chapter 4*](B16722_04_Final_ASB_ePub.xhtml#_idTextAnchor061), *Predicting Numerical
    Values with Linear Regression*. In this chapter, we'll use the same dataset related
    to the New York City bike-sharing service, but we'll apply more advanced machine
    learning algorithms.
  prefs: []
  type: TYPE_NORMAL
- en: We can remember that the hypothetical goal of the ML model is to predict the
    trip time of a bike rental. The predicted value could be used to provide a better
    experience to the customers of the bike-sharing service through the new mobile
    application. Leveraging the predicted ride duration, the customer will get a clear
    indication of the time it will take to reach a specific destination and also an
    estimation of the ride cost.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we've explained and understood the business scenario, let's take a
    look at the machine learning technique that we can use to automatically classify
    trees according to their features.
  prefs: []
  type: TYPE_NORMAL
- en: Discovering DNNs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we'll learn what **DNNs** are, and we'll understand which regression
    and classification use cases can be managed with advanced machine learning algorithms.
  prefs: []
  type: TYPE_NORMAL
- en: '**Artificial Neural Networks** (**ANNs**) are artificial systems that try to
    reproduce the human brain. They''re inspired by biological neural networks and
    are composed of neurons and synapses that connect the neurons. Each neuron of
    the artificial network is a component that applies a specific mathematical activation
    function to the input and returns an output that is passed through a synapse to
    the next neuron. In ANNs, the neurons are usually organized in layers between
    the input and the output.'
  prefs: []
  type: TYPE_NORMAL
- en: Different from linear models, ANNs are designed to model non-linear relationships
    between the input and the output variables.
  prefs: []
  type: TYPE_NORMAL
- en: '**DNNs** are ANNs composed of multiple layers between the input and the output,
    usually two or more. Each layer of neurons is called a **hidden layer** and its
    function is to accept a series of input signals and return to the next layer a
    series of output signals.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following diagram, we can see that a DNN is composed of three input
    variables, two hidden layers, and an output variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.1 – Diagram of a DNN'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16722_11_001.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.1 – Diagram of a DNN
  prefs: []
  type: TYPE_NORMAL
- en: Each neuron in the network applies a specific function to the input signal and
    returns the output of the function as the output of the neuron. Training a DNN
    is an activity focused on finding the right weights of each synapse between each
    neuron in the network.
  prefs: []
  type: TYPE_NORMAL
- en: 'Although, to achieve the potential of DNNs we need important hardware resources,
    the machine learning models implemented with this technique can achieve optimal
    results in important tasks that are typical of the human brain. Some examples
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Speech recognition**: The ability to process an audio file to identify the
    words of a speech, making them readable. This capability is widely used in the
    virtual assistants of our smartphones or in contact center applications.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Image and face recognition**: The possibility to recognize different entities,
    animals, or persons in pictures and videos. This technique is particularly useful
    to automatically extract insights from images and videos avoiding any manual effort.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Natural language processing**: Widely used to analyze and retrieve information
    from free texts and to analyze the sentiment of the messages. For example, these
    kinds of algorithms are used to automatically identify the policy violations in
    the social networks or to evaluate the sentiment in the product reviews.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that we've discovered what DNNs are, let's focus on how BigQuery ML offers
    these powerful algorithms.
  prefs: []
  type: TYPE_NORMAL
- en: DNNs in BigQuery ML
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we'll learn the model type options provided by BigQuery ML
    to create a DNN model.
  prefs: []
  type: TYPE_NORMAL
- en: 'BigQuery ML allows you to create two different types of DNNs:'
  prefs: []
  type: TYPE_NORMAL
- en: '**DNNClassifier**: This algorithm can be used to classify events, objects,
    or entities into a finite number of discrete classes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**DNNRegressor**: This kind of model is similar to the previous one with the
    difference that it returns a continuous result. For this reason, it can be used
    to predict numerical values.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For our business scenario, we''ll use **DNNRegressor** because our goal is
    to predict a continuous value: *the ride time of the bike rental*.'
  prefs: []
  type: TYPE_NORMAL
- en: 'When we''ve chosen which type of DNN to use according to our use case, the
    next choice will be focused on the function that each neuron will apply to the
    input signal. BigQuery ML allows us to choose one of the following functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Rectified Linear Function** (**ReLU**): This is a linear function that returns
    the input value itself if it''s positive, otherwise zero.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ReLU6**: This is similar to the previous function with a capped maximum output
    value of 6\. This is just an arbitrary value that derives from empirical tests
    of the different functions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Concatenated Rectified Linear Units** (**CReLU**): Different from the previous
    functions, it preserves the negative values.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Exponential Linear Unit** (**ELU**): This is an exponential function that
    tends to converge to the result faster and produce outputs with more accuracy.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Scaled Exponential Linear Unit** (**SELU**): This is an evolution of ELU
    that adds the self-normalization of the math function.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SIGMOID**: This is similar to a step function and always outputs a value
    between 0 and 1\. This function introduces non-linearity into the DNN.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**TANH**: This is similar to the sigmoid function but returns a value between
    -1 and 1.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each function has some pros and cons, and they should be chosen according to
    the use case and to the training dataset to achieve the best results. For our
    business scenario, we'll experiment with the training of DNNs using some of these
    functions and choose the function that produces the best results.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we've learned the basics of DNNs and the main options that BigQuery
    ML offers through its SQL interface, let's start preparing the data for the creation
    of our machine learning models.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing the dataset
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before starting the ML implementation, it's necessary to analyze and prepare
    the data for our use case. Since the dataset has been already used in [*Chapter
    4*](B16722_04_Final_ASB_ePub.xhtml#_idTextAnchor061), *Predicting Numerical Values
    with Linear Regression*, we will not start the analysis from the beginning, but
    we will focus exclusively on the queries relevant for our use case.
  prefs: []
  type: TYPE_NORMAL
- en: 'To start the preparation of our data, we need to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Log into Google Cloud Console and access the **BigQuery** user interface from
    the navigation menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new dataset under the project that we created in [*Chapter 2*](B16722_02_Final_ASB_ePub.xhtml#_idTextAnchor039),
    *Setting Up Your GCP and BigQuery Environment*. For this use case, we'll create
    the dataset `11_nyc_bike_sharing_dnn` with the default options.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now we''re ready to create the table that will contain the training dataset.
    Let''s execute the following SQL statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The result of the query is stored in the new table, `` `11_nyc_bike_sharing_dnn.training_table`
    ``, which we've created to support the following steps of our use case.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The `SELECT` statement extracts the fields from the table `citibike_trips` and
    applies some transformations. `tripduration` is converted from seconds to minutes.
    The fields `start_station_name` and `end_station_name` are extracted as is. Using
    `starttime`, the query calculates whether the rental is happening during the week
    or at the weekend. Finally, the age of the customer at the time of the ride is
    calculated using the difference between `starttime` and `birth_year`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: As we've already done in the [*Chapter 4*](B16722_04_Final_ASB_ePub.xhtml#_idTextAnchor061),
    *Predicting Numerical Values with Linear Regression*, the `WHERE` clause allows
    us to consider only the months that we want to use for the training stage. The
    time frame goes from April 2017 to February 2018 for the training dataset. In
    the same `WHERE` clause, we've also applied the filters that come from the data
    quality checks.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'After the creation of the training table, we can create the second table dedicated
    to the records that will be used to evaluate our machine learning model:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The query is very similar to the statement used to create the training table.
    The only difference is related to the period selected in the `WHERE` clause. For
    the table `` `11_nyc_bike_sharing_dnn.evaluation_table` ``, we've focused our
    `SELECT` statement on the records related to the months of March and April of
    2018 that were previously excluded from the training table.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Adopting the same approach, we can also create the table that will be used
    to test our machine learning model:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The query applies the same logic used to create the training and the evaluation
    table but takes into consideration only the month of May 2018.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now that we've segmented our dataset and are clear on which records to use for
    the training, evaluation, and test phase, let's train our DNN models with BigQuery
    ML.
  prefs: []
  type: TYPE_NORMAL
- en: Training the DNN models
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we''ve segmented the dataset into multiple tables to support the different
    stages of the ML model life cycle, let''s train our DNN regression models using
    different activation functions:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First of all, we can start with the training of a DNN model by using the `RELU`
    function. Let''s execute the following SQL statement to create the machine learning
    model `` `11_nyc_bike_sharing_dnn.trip_duration_by_stations_day_age_relu` ``:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the SQL statement, we can notice the keywords `CREATE OR REPLACE MODEL` used
    to create a new model. These keywords are followed by the identifier of the model
    represented by the concatenation of the dataset and ML model name.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: After these first lines, we find the `OPTIONS` keyword where the type of machine
    learning model is specified. Since we're trying to predict the continuous field
    `tripduration`, we've chosen to use `DNN_REGRESSOR` as `model_type`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The other important option during the training of a DNN is the activation function
    that will be applied to the neurons of the network. For this first attempt, we''re
    using one of the most common functions: `RELU`. This choice is specified with
    the clause `ACTIVATION_FN = ''RELU''`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: After `OPTIONS`, we need to specify the set of records on which the ML model
    will be trained. Since we've already identified the relevant fields in [*Chapter
    4*](B16722_04_Final_ASB_ePub.xhtml#_idTextAnchor061), *Predicting Numerical Values
    with Linear Regression*, the query uses the fields `start_station_name`, `end_station_name`,
    `is_weekend`, and `age` as features of the DNN model.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: With the keywords `as label`, we are instructing BigQuery ML to use `tripduration`
    as the label of our machine learning model. As an alternative, it is possible
    to include the label among the list of `OPTIONS` with the keyword `INPUT_LABEL_COLS`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Since DNNs are advanced and complex models, it can take several minutes before
    converging to the solution and generating the machine learning model.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: At the end of the execution of the SQL query, we can select the DNN model `trip_duration_by_stations_day_age_relu`
    in the BigQuery navigation menu and click on the `tripduration`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'As you can see in the following screenshot, the **Mean absolute error** is
    very close to 4 minutes:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 11.2 – The Evaluation tab shows some key performance indicators of
    the DNN model'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B16722_11_002.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 11.2 – The Evaluation tab shows some key performance indicators of the
    DNN model
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'As a second attempt, we can try to change the activation function in the neurons
    of our neural network to see if the performance of the first model can be further
    improved. Let''s run the following SQL statement using the `CRELU` activation
    function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The query to train the DNN `` `11_nyc_bike_sharing_dnn.trip_duration_by_stations_day_age_crelu`
    `` is very similar to the SQL statement that we used in our first attempt. The
    only difference is represented by the different activation function specified
    in `OPTIONS`. Using the clause `ACTIVATION_FN = 'CRELU'`, we're using the `CRELU`
    function in the neurons of the network.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The execution of the training query will take several minutes to complete.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: At the end of the execution of the SQL query, we can select the DNN model `trip_duration_by_stations_day_age_crelu`
    in the BigQuery navigation menu and visualize the performance in the **Evaluation**
    tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'As you can see in the following screenshot, the **Mean absolute error** is
    almost close to 4 minutes:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 11.3 – The Evaluation tab shows some key performance indicators of
    the DNN model'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16722_11_003.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.3 – The Evaluation tab shows some key performance indicators of the
    DNN model
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's start the evaluation of the DNNs that we've trained in this section.
  prefs: []
  type: TYPE_NORMAL
- en: Evaluating the DNN models
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To evaluate our BigQuery ML DNNs, we''ll use the `ML.EVALUATE` function and
    the table that we''ve expressly created as an evaluation dataset:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First of all, we can start evaluating the model `` `11_nyc_bike_sharing_dnn.trip_duration_by_stations_day_age_relu`
    ``. Let''s run the following query:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the SQL statement, we can notice the keyword `ML.EVALUATE` is used to evaluate
    the DNN. The evaluation function is followed by the identifier of the BigQuery
    ML model: `` `11_nyc_bike_sharing_dnn.trip_duration_by_stations_day_age_relu`
    ``.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The evaluation function is applied on the `SELECT` statement that extracts
    all the fields from the table: `` `11_nyc_bike_sharing_dnn.evaluation_table` ``.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'After some seconds, we can see the results of the evaluation stage as shown
    in the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 11.4 – The results of the evaluation SQL statement'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B16722_11_004.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 11.4 – The results of the evaluation SQL statement
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We can notice that the **mean_absolute_error** value is not so different from
    the value that we've achieved during the training phase. We can say that our model
    is not affected by overfitting and works well on the new records of the evaluation
    dataset.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Let''s apply the same evaluation logic on the second model, `` `11_nyc_bike_sharing_dnn.trip_duration_by_stations_day_age_crelu`
    ``. To evaluate the performance of this BigQuery ML model, we run the following
    SQL statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The only difference between the last query and the previous one is in the name
    of the DNN that is subject to the evaluation: `` `11_nyc_bike_sharing_dnn.trip_duration_by_stations_day_age_crelu`
    ``.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'After some seconds, we''ll see the results of the evaluation as presented in
    the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 11.5 – The results of the evaluation SQL statement'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16722_11_005.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.5 – The results of the evaluation SQL statement
  prefs: []
  type: TYPE_NORMAL
- en: Also, in this case, the **mean_absolute_error** value is not far from the value
    of 4 minutes that we achieved during the training stage. This model is not affected
    by overfitting and works similar to the previous one.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we've evaluated our BigQuery ML models, let's see how we can use the
    DNN based on the `ReLU` activation function to get predictions about the duration
    of the bike rentals.
  prefs: []
  type: TYPE_NORMAL
- en: Using the DNN models
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we'll use the DNN model based on the `ReLU` function and trained
    to leverage the BigQuery ML capabilities to predict the duration of the bike rides
    for the New York City bike-sharing company.
  prefs: []
  type: TYPE_NORMAL
- en: 'To test our DNN, we''ll use the `ML.PREDICT` function on the table `prediction_table`.
    Let''s run the following SQL statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The query statement is composed of a `SELECT` keyword that extracts the actual
    and the predicted duration of the rental. It calculates the difference in minutes
    and orders the results from the minimum to the maximum difference of minutes.
    To calculate the difference, we've used the `ABS` function that extracts the absolute
    value of a numeric.
  prefs: []
  type: TYPE_NORMAL
- en: The `ML.PREDICT` function is applied to the `SELECT` statement, which extracts
    the features and the actual duration from `prediction_table`. This last field
    is used only for comparison with the predicted value and is not used by the DNN
    to return the prediction.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following screenshot, you can see the results of the query execution:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.6 – The output of the query shows the actual and the predicted
    label'
  prefs: []
  type: TYPE_NORMAL
- en: with the difference expressed in minutes
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16722_11_006.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.6 – The output of the query shows the actual and the predicted label
    with the difference expressed in minutes
  prefs: []
  type: TYPE_NORMAL
- en: Now that we've tested our BigQuery ML model, let's look at some final considerations
    comparing the results of the DNN based on the `CReLU` activation function with
    the results that we achieved using linear regression in [*Chapter 4*](B16722_04_Final_ASB_ePub.xhtml#_idTextAnchor061),
    *Predicting Numerical Values with Linear Regression*.
  prefs: []
  type: TYPE_NORMAL
- en: Drawing business conclusions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we'll apply our DNN model and understand how many times the
    BigQuery ML model is able to predict a rental duration close to the actual one.
  prefs: []
  type: TYPE_NORMAL
- en: We'll add a parent `SELECT COUNT` statement to the previous query to count how
    many times the difference between the actual duration and the predicted one is
    less than `15` minutes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s execute the following query to calculate how often the trip duration
    predictions are far from the actual values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The result of the `SELECT COUNT` query returns a value of 1,640,446 predictions
    with a difference between the predicted and the actual value of less than `15`
    minutes.
  prefs: []
  type: TYPE_NORMAL
- en: Considering that the total size of the table `prediction_table` is 1,728,078,
    we can say that in 94.92% of the cases our DNN is able to predict the trip duration
    with a difference less than 15 minutes.
  prefs: []
  type: TYPE_NORMAL
- en: Now we can compare the best results that we've achieved with the DNN with the
    performance that we've reached using the linear regression model in [*Chapter
    4*](B16722_04_Final_ASB_ePub.xhtml#_idTextAnchor061), *Predicting Numerical Values
    with Linear Regression*.
  prefs: []
  type: TYPE_NORMAL
- en: Deep neural networks versus linear models
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the following table, the results of the DNN model based on the `CReLU` activation
    function are compared to the linear regression model:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.7 – Comparison between the DNN model and the linear regression
    model'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16722_11_007.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.7 – Comparison between the DNN model and the linear regression model
  prefs: []
  type: TYPE_NORMAL
- en: Looking at the preceding table, we can say that to predict the trip duration
    of the New York City bike-sharing service, the best results can be achieved using
    a DNN model. For this reason, we can suggest using a DNN model to suggest the
    trip duration to the customers of the company. Using the DNN we can decrease the
    mean absolute error by more than 43%. In some industries, such an improvement
    could be a great competitive advantage for the company.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we've implemented two DNNs. We remembered the business scenario
    that was already introduced in [*Chapter 4*](B16722_04_Final_ASB_ePub.xhtml#_idTextAnchor061),
    *Predicting Numerical Values with Linear Regression*. The use case was based on
    the need to predict the rental time for the New York City bike-sharing service.
    After that, we learned the basics of DNNs and the different activation functions
    that can be used to implement the neurons in a network.
  prefs: []
  type: TYPE_NORMAL
- en: 'We segmented the BigQuery public dataset into three different tables: one to
    host training data, the second one for the evaluation stage, and the last one
    to test our DNN model.'
  prefs: []
  type: TYPE_NORMAL
- en: During the training phase of the BigQuery ML model, we tested two different
    activation functions, `ReLU` and `CReLU`, comparing the mean absolute error to
    find the best one.
  prefs: []
  type: TYPE_NORMAL
- en: After that, we evaluated our DNN models on a new set of records to prevent any
    overfitting and get more confident about the good quality of our BigQuery ML models.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we applied the model, based on the `ReLU` function, to the last subset
    of records to predict the trip duration of each bike rental. We discovered that
    our BigQuery ML model is able to predict a trip duration within a range of 15
    minutes of the actual one for more than 94% of the rentals.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we also compared the performance of the DNN model with the linear regression
    outcomes achieved in [*Chapter 4*](B16722_04_Final_ASB_ePub.xhtml#_idTextAnchor061),
    *Predicting Numerical Values with Linear Regression*. We noticed that the DNN
    outperforms linear regression, decreasing the mean absolute error by 43%, and
    can achieve better results for our business scenario.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll learn how to use BigQuery ML with GCP AI notebooks.
  prefs: []
  type: TYPE_NORMAL
- en: Further resources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**NYC Bike-Sharing Public Dataset**: [https://console.cloud.google.com/marketplace/product/city-of-new-york/nyc-citi-bike](https://console.cloud.google.com/marketplace/product/city-of-new-york/nyc-citi-bike)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**BigQuery ML Create Model**: [https://cloud.google.com/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-create-dnn-models](https://cloud.google.com/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-create-dnn-models)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**BigQuery ML Evaluate Model**: [https://cloud.google.com/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-evaluate](https://cloud.google.com/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-evaluate)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**BigQuery ML Predict**: [https://cloud.google.com/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-predict](https://cloud.google.com/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-predict)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
