- en: '*Chapter 1*: Introducing MLflow'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第一章*：介绍MLflow'
- en: '**MLflow** is an open source platform for the **machine learning** (**ML**)
    life cycle, with a focus on *reproducibility*, *training*, and *deployment*. It
    is based on an open interface design and is able to work with any language or
    platform, with clients in Python and Java, and is accessible through a REST API.
    Scalability is also an important benefit that an ML developer can leverage with
    MLflow.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**MLflow**是一个专注于**机器学习**（**ML**）生命周期、**可重复性**、**训练**和**部署**的开源平台。它基于开放的接口设计，能够与任何语言或平台协同工作，拥有Python和Java客户端，并通过REST
    API提供访问。可扩展性也是ML开发者可以利用的MLflow的一个重要优势。'
- en: In this chapter of the book, we will take a look at how MLflow works, with the
    help of examples and sample code. This will build the necessary foundation for
    the rest of the book in order to use the concept to engineer an end-to-end ML
    project.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的这一章中，我们将通过示例和示例代码来查看MLflow的工作原理。这将建立使用该概念来构建端到端ML项目的必要基础。
- en: 'Specifically, we will look at the following sections in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 具体来说，我们将在本章中查看以下部分：
- en: What is MLflow?
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是MLflow？
- en: Getting started with MLflow
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开始使用MLflow
- en: Exploring MLflow modules
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索MLflow模块
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'For this chapter, you will need the following prerequisites:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本章，你需要以下先决条件：
- en: 'The latest version of Docker installed in your machine. In case you don''t
    have the latest version, please follow the instructions at the following URL:
    [https://docs.docker.com/get-docker/](https://docs.docker.com/get-docker/).'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在您的机器上安装了最新版本的Docker。如果您没有最新版本，请按照以下URL的说明操作：[https://docs.docker.com/get-docker/](https://docs.docker.com/get-docker/)。
- en: Access to a bash terminal (Linux or Windows).
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问bash终端（Linux或Windows）。
- en: Access to a browser.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问浏览器。
- en: Python 3.5+ installed.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已安装Python 3.5+。
- en: PIP installed.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已安装PIP。
- en: What is MLflow?
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是MLflow？
- en: Implementing a product based on ML can be a laborious task. There is a general
    need to reduce the friction between different steps of the ML development life
    cycle, and between teams of data scientists and engineers that are involved in
    the process.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 基于ML的产品实施可能是一项费力的任务。普遍需要减少ML开发生命周期不同步骤之间的摩擦，以及参与过程的数据科学家和工程师团队之间的摩擦。
- en: ML practitioners, such as data scientists and ML engineers, operate with different
    systems, standards, and tools. While data scientists spend most of their time
    developing models in tools such as Jupyter Notebooks, when running in production,
    the model is deployed in the context of a software application with an environment
    that is more demanding in terms of scale and reliability.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 机器学习从业者，如数据科学家和机器学习工程师，使用不同的系统、标准和工具进行操作。虽然数据科学家大部分时间在Jupyter Notebooks等工具中开发模型，但在生产环境中运行时，模型是在一个对规模和可靠性要求更高的软件应用环境中部署的。
- en: 'A common occurrence in ML projects is to have the models reimplemented by an
    engineering team, creating a custom-made system to serve the specific model. A
    set of challenges are common with teams that follow bespoke approaches regarding
    model development:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在ML项目中，一个常见的情况是工程团队重新实现模型，创建一个定制的系统来提供特定的模型。对于遵循定制方法的模型开发团队，以下是一些常见的挑战：
- en: ML projects that run over budget due to the need to create bespoke software
    infrastructure to develop and serve models
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于需要创建定制的软件基础设施来开发和提供模型，导致超出预算的ML项目
- en: Translation errors when reimplementing the models produced by data scientists
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在重新实现数据科学家产生的模型时出现的翻译错误
- en: Scalability issues when serving predictions
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在提供预测时遇到的可扩展性问题
- en: Friction in terms of reproducing training processes between data scientists
    due to a lack of standard environments
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于缺乏标准环境，数据科学家在重现训练过程中出现的摩擦
- en: Companies leveraging ML tend to create their own (often extremely laborious)
    internal systems in order to ensure a smooth and structured process of ML development.
    Widely documented ML platforms include systems such as Michelangelo and FBLearner,
    from Uber and Facebook, respectively.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 利用机器学习的公司往往创建自己的（通常是极其费力的）内部系统，以确保机器学习开发过程的顺畅和结构化。广泛记录的机器学习平台包括来自Uber和Facebook的Michelangelo和FBLearner等系统。
- en: It is in the context of the increasing adoption of ML that MLflow was initially
    created at Databricks and open sourced as a platform, to aid in the implementation
    of ML systems.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在机器学习（ML）日益普及的背景下，MLflow最初在Databricks创建，并作为一个平台开源，旨在帮助实现机器学习系统的实施。
- en: MLflow enables an everyday practitioner in one platform to manage the ML life
    cycle, from iteration on model development up to deployment in a reliable and
    scalable environment that is compatible with modern software system requirements.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 'MLflow 允许一个日常实践者在单一平台上管理机器学习生命周期，从模型开发的迭代到在兼容现代软件系统要求的可靠和可扩展环境中部署。 '
- en: Getting started with MLflow
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用 MLflow
- en: 'Next, we will install MLflow on your machine and prepare it for use in this
    chapter. You will have two options when it comes to installing MLflow. The first
    option is through a Docker container-based recipe provided in the repository of
    the book: [https://github.com/PacktPublishing/Machine-Learning-Engineering-with-Mlflow.git](https://github.com/PacktPublishing/Machine-Learning-Engineering-with-Mlflow.git).'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将在您的机器上安装 MLflow 并为其在本章中使用做准备。安装 MLflow 时，您有两个选择。第一个选择是通过书中提供的基于 Docker
    容器的配方在存储库中：[https://github.com/PacktPublishing/Machine-Learning-Engineering-with-Mlflow.git](https://github.com/PacktPublishing/Machine-Learning-Engineering-with-Mlflow.git)。
- en: 'To install it, follow these instructions:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装它，请按照以下说明操作：
- en: 'Use the following commands to install the software:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令安装软件：
- en: '[PRE0]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The Docker image is very simple at this stage: it simply contains MLflow and
    sklearn, the main tools to be used in this chapter of the book. For illustrative
    purposes, you can look at the content of the `Dockerfile`:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个阶段，Docker 镜像非常简单：它仅包含 MLflow 和 sklearn，这是本书这一章节中要使用的主要工具。为了说明目的，您可以查看 `Dockerfile`
    的内容：
- en: '[PRE1]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'To build the image, you should now run the following command:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要构建镜像，您现在应该运行以下命令：
- en: '[PRE2]'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Right after building the image, you can run the `./run.sh` command:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在构建镜像后，您可以运行 `./run.sh` 命令：
- en: '[PRE3]'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Important note
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重要提示
- en: It is important to ensure that you have the latest version of Docker installed
    on your machine.
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 确保您的机器上安装了最新版本的 Docker 非常重要。
- en: Open your browser to [http://localhost:888](http://localhost:888) and you should
    be able to navigate to the `Chapter01` folder.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的浏览器，访问 [http://localhost:888](http://localhost:888)，您应该能够导航到 `Chapter01`
    文件夹。
- en: In the following section, we will be developing our first model with MLflow
    in the Jupyter environment created in the previous set of steps.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分，我们将使用之前步骤中创建的 Jupyter 环境使用 MLflow 开发我们的第一个模型。
- en: Developing your first model with MLflow
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 MLflow 开发您的第一个模型
- en: From the point of view of simplicity, in this section, we will use the built-in
    sample datasets in sklearn, the ML library that we will use initially to explore
    MLflow features. For this section, we will choose the famous `Iris` dataset to
    train a multi-class classifier using MLflow.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 从简单性的角度来看，在本节中，我们将使用 sklearn 内置的样本数据集，这是我们最初用来探索 MLflow 功能的机器学习库。对于本节，我们将选择著名的
    `Iris` 数据集，使用 MLflow 训练一个多类分类器。
- en: 'The Iris dataset (one of sklearn''s built-in datasets available from [https://scikit-learn.org/stable/datasets/toy_dataset.html](https://scikit-learn.org/stable/datasets/toy_dataset.html))
    contains the following elements as features: sepal length, sepal width, petal
    length, and petal width. The target variable is the class of the iris: Iris Setosa,
    Iris Versocoulor, or Iris Virginica:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: Iris 数据集（sklearn 内置数据集之一，可通过 [https://scikit-learn.org/stable/datasets/toy_dataset.html](https://scikit-learn.org/stable/datasets/toy_dataset.html)
    获取）包含以下作为特征的元素：花瓣长度、花瓣宽度、花萼长度和花萼宽度。目标变量是鸢尾花的类别：Iris Setosa、Iris Versicolor 或 Iris
    Virginica：
- en: 'Load the sample dataset:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 加载样本数据集：
- en: '[PRE4]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Next, let's train your model.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，让我们训练您的模型。
- en: 'Training a simple machine model with a framework such as scikit-learn involves
    instantiating an estimator such as `LogisticRegression` and calling the `fit`
    command to execute training over the `Iris` dataset built in scikit-learn:'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用 scikit-learn 等框架训练简单的机器学习模型涉及实例化一个估算器，如 `LogisticRegression`，并调用 `fit` 命令在
    scikit-learn 内置的 `Iris` 数据集上执行训练：
- en: '[PRE5]'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The preceding lines of code are just a small portion of the ML **Engineering**
    process. As will be demonstrated, a non-trivial amount of code needs to be created
    in order to productionize and make sure that the preceding training code is usable
    and reliable. One of the main objectives of MLflow is to aid in the process of
    setting up ML systems and projects. In the following sections, we will demonstrate
    how MLflow can be used to make your solutions robust and reliable.
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述代码行只是 ML **工程** 流程的一小部分。正如将要展示的，为了将前面的训练代码投入生产并确保其可用性和可靠性，需要创建大量的代码。MLflow
    的一个主要目标就是帮助设置 ML 系统和项目的过程。在接下来的章节中，我们将展示如何使用 MLflow 使您的解决方案更加健壮和可靠。
- en: Then, we will add MLflow.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们将添加 MLflow。
- en: 'With a few more lines of code, you should be able to start your first MLflow
    interaction. In the following code listing, we start by importing the `mlflow`
    module, followed by the `LogisticRegression` class in scikit-learn. You can use
    the accompanying Jupyter notebook to run the next section:'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过几行额外的代码，你应该能够开始你的第一个 MLflow 交互。在以下代码列表中，我们首先导入 `mlflow` 模块，然后是 scikit-learn
    中的 `LogisticRegression` 类。你可以使用附带的 Jupyter 笔记本来运行下一部分：
- en: '[PRE6]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The `mlflow.sklearn.autolog()` instruction enables you to automatically log
    the experiment in the local directory. It captures the metrics produced by the
    underlying ML library in use. **MLflow Tracking** is the module responsible for
    handling metrics and logs. By default, the metadata of an MLflow run is stored
    in the local filesystem.
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`mlflow.sklearn.autolog()` 指令允许您在本地目录中自动记录实验。它捕获了使用的底层机器学习库产生的指标。**MLflow Tracking**
    是负责处理指标和日志的模块。默认情况下，MLflow 运行的元数据存储在本地文件系统中。'
- en: 'If you run the following excerpt on the accompanying notebook''s root document,
    you should now have the following files in your home directory as a result of
    running the following command:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你在一个附带的笔记本的根文档上运行以下摘录，你应该现在在你的主目录中有以下文件，这是运行以下命令的结果：
- en: '[PRE7]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `mlruns` folder is generated alongside your notebook folder and contains
    all the experiments executed by your code in the current context.
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`mlruns` 文件夹与你的笔记本文件夹同时生成，包含当前上下文中由你的代码执行的所有实验。'
- en: 'The `mlruns` folder will contain a folder with a sequential number identifying
    your experiment. The outline of the folder will appear as follows:'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`mlruns` 文件夹将包含一个带有顺序编号的文件夹来标识你的实验。文件夹的结构如下所示：'
- en: '[PRE8]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: So, with very little effort, we have a lot of traceability available to us,
    and a good foundation to improve upon.
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 因此，我们几乎不需要付出太多努力，就有很多可追溯性可用，并且有一个很好的基础来改进。
- en: 'Your experiment is identified as `UUID` on the preceding sample by `46dc6db17fb5471a9a23d45407da680f`.
    At the root of the directory, you have a `yaml` file named `meta.yaml`, which
    contains the content:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 你的实验在先前的样本中被识别为 `UUID`，由 `46dc6db17fb5471a9a23d45407da680f`。在目录的根目录下，有一个名为 `meta.yaml`
    的 `yaml` 文件，其中包含以下内容：
- en: '[PRE9]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This is the basic metadata of your experiment, with information including start
    time, end time, identification of the run (`run_id` and `run_uuid`), an assumption
    of the life cycle stage, and the user who executed the experiment. The settings
    are basically based on a default run, but provide valuable and readable information
    regarding your experiment:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这是你实验的基本元数据，包括开始时间、结束时间、运行识别（`run_id` 和 `run_uuid`）、生命周期阶段的假设以及执行实验的用户。设置基本上基于默认运行，但提供了关于你实验的有价值和可读的信息：
- en: '[PRE10]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The `model.pkl` file contains a serialized version of the model. For a scikit-learn
    model, there is a binary version of the Python code of the model. Upon autologging,
    the metrics are leveraged from the underlying machine library in use. The default
    packaging strategy was based on a `conda.yaml` file, with the right dependencies
    to be able to serialize the model.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`model.pkl` 文件包含模型的序列化版本。对于 scikit-learn 模型，有一个模型的 Python 代码的二进制版本。在自动记录时，利用了底层机器库的指标。默认的打包策略基于一个
    `conda.yaml` 文件，其中包含正确的依赖关系，以便能够序列化模型。'
- en: The `MLmodel` file is the main definition of the project from an MLflow project
    with information related to how to run inference on the current model.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '`MLmodel` 文件是从 MLflow 项目中关于如何运行当前模型进行推理的主要定义。'
- en: The `metrics` folder contains the training score value of this particular run
    of the training process, which can be used to benchmark the model with further
    model improvements down the line.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`metrics` 文件夹包含训练过程的这次特定运行的训练分数值，可以用来与后续模型改进进行基准测试。'
- en: The `params` folder on the first listing of folders contains the default parameters
    of the logistic regression model, with the different default possibilities listed
    transparently and stored automatically.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在文件夹列表的第一项中，`params` 文件夹包含了逻辑回归模型的默认参数，不同的默认可能性被透明地列出并自动存储。
- en: Exploring MLflow modules
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索 MLflow 模块
- en: MLflow modules are software components that deliver the core features that aid
    in the different phases of the ML life cycle. MLflow features are delivered through
    modules, extensible components that organize related features in the platform.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: MLflow 模块是软件组件，它们提供了辅助不同机器生命周期阶段的核心理念。MLflow 功能通过模块提供，这些模块是可扩展的组件，它们在平台上组织相关的功能。
- en: 'The following are the built-in modules in MLflow:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在MLflow中内置的模块：
- en: '**MLflow Tracking**: Provides a mechanism and UI to handle metrics and artifacts
    generated by ML executions (training and inference)'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**MLflow跟踪**：提供了一种机制和用户界面来处理由ML执行（训练和推理）生成的指标和工件'
- en: '**Mlflow Projects**: A package format to standardize ML projects'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**MLflow项目**：一种用于标准化ML项目的包格式'
- en: '**Mlflow Models**: A mechanism that deploys to different types of environments,
    both on-premises and in the cloud'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**MLflow模型**：一种机制，可以部署到不同类型的本地和云环境'
- en: '**Mlflow Model Registry**: A module that handles the management of models in
    MLflow and its life cycle, including state'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**MLflow模型注册表**：一个模块，用于管理MLflow中的模型及其生命周期，包括状态'
- en: 'In order to explore the different modules, we will install MLflow in your local
    environment using the following command:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 为了探索不同的模块，我们将使用以下命令在您的本地环境中安装MLflow：
- en: '[PRE11]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Important note
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: It is crucial that the technical requirements are correctly installed on your
    local machine to allow you to follow along. You can also use the `pip` command
    with the required permissions.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 确保在您的本地机器上正确安装了技术要求，以便您能够跟随操作。您也可以使用具有所需权限的`pip`命令。
- en: Exploring MLflow projects
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 探索MLflow项目
- en: 'An MLflow project represents the basic unit of organization of ML projects.
    There are three different environments supported by MLflow projects: the Conda
    environment, Docker, and the local system.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: MLflow项目代表ML项目的组织基本单位。MLflow项目支持三种不同的环境：Conda环境、Docker和本地系统。
- en: Important note
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Model details of the different parameters available on an MLProject file can
    be consulted in the official documentation available at [https://www.mlflow.org/docs/latest/projects.html#running-projects](https://www.mlflow.org/docs/latest/projects.html#running-projects).
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在官方文档中查看MLProject文件上可用的不同参数的模型详细信息，该文档可在[https://www.mlflow.org/docs/latest/projects.html#running-projects](https://www.mlflow.org/docs/latest/projects.html#running-projects)找到。
- en: 'The following is an example of an `MLproject` file of a `conda` environment:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个`conda`环境`MLproject`文件的示例：
- en: '[PRE12]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: In the `conda` option, the assumption is that there is a `conda.yaml` file with
    the required dependencies. MLflow, when asked to run the project, will start the
    environment with the specified dependencies.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在`conda`选项中，假设存在一个包含所需依赖项的`conda.yaml`文件。当MLflow被要求运行项目时，它将使用指定的依赖项启动环境。
- en: 'The system-based environment will look like the following; it''s actually quite
    simple:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 基于系统的环境将如下所示；实际上相当简单：
- en: '[PRE13]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The preceding system variant will basically rely on the local environment dependencies,
    assuming that the underlying operating system contains all the dependencies. This
    approach is particularly prone to library conflicts with the underlying operating
    system; it might be valuable in contexts where there is already an existing operating
    system environment that fits the project.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 上述系统变体将基本上依赖于本地环境依赖项，假设底层操作系统包含所有依赖项。这种方法特别容易与底层操作系统发生库冲突；在已经存在适合项目的操作系统环境的情况下，这可能是有价值的。
- en: 'The following is a Docker environment-based `MLproject` file:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是基于Docker环境的`MLproject`文件：
- en: '[PRE14]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Once you have your environment, the main file that defines how your project
    should look is the `MLProject` file. This file is used by MLflow to understand
    how it should run your project.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您有了环境，定义您的项目外观的主要文件是`MLProject`文件。此文件由MLflow用于了解它应该如何运行您的项目。
- en: Developing your first end-to-end pipeline in MLflow
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在MLflow中开发您的第一个端到端管道
- en: We will prototype a simple stock prediction project in this section with MLflow
    and will document the different files and phases of the solution. You will develop
    it in your local system using the MLflow and Docker installed locally.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本节中使用MLflow和本地安装的Docker原型化一个简单的股票预测项目，并将记录解决方案的不同文件和阶段。您将使用本地系统上安装的MLflow和Docker来开发它。
- en: Important note
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: In this section, we are assuming that MLflow and Docker are installed locally,
    as the steps in this section will be executed in your local environment.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们假设MLflow和Docker已在本地安装，因为本节中的步骤将在您的本地环境中执行。
- en: The task in this illustrative project is to create a basic MLflow project and
    produce a working baseline ML model to predict, based on market signals over a
    certain number of days, whether the stock market will go up or down.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在本示例项目中，任务是创建一个基本的MLflow项目，并生成一个可工作的基线ML模型，根据一定数量的市场信号预测股市是上涨还是下跌。
- en: In this section, we will use a Yahoo Finance dataset available for quoting the
    BTC-USD pair in [https://finance.yahoo.com/quote/BTC-USD/](https://finance.yahoo.com/quote/BTC-USD/)
    over a period of 3 months. We will train a model to predict whether the quote
    will be going up or not on a given day. A REST API will be made available for
    predictions through MLflow.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用 Yahoo Finance 提供的 BTC-USD 对 3 个月期间的报价数据集。我们将训练一个模型来预测在给定的一天内报价是否会上涨。将通过
    MLflow 提供一个 REST API 进行预测。
- en: 'We will illustrate, step by step, the creation of an MLflow project to train
    a classifier on stock data, using the Yahoo API for financial information retrieved
    using the package''s pandas data reader:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将逐步说明创建一个 MLflow 项目，用于在股票数据上训练分类器，使用 Yahoo API 通过包的 pandas 数据读取器检索金融信息：
- en: 'Add your `MLProject` file:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加你的 `MLProject` 文件：
- en: '[PRE15]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The preceding `MLProject` file specifies that dependencies will be managed in
    Docker with a specific image name. MLflow will try to pull the image using the
    version of Docker installed on your system. If it doesn't find it, it will try
    to retrieve it from Docker Hub. For the goals of this chapter, it is completely
    fine to have MLflow running on your local machine.
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 前面的 `MLProject` 文件指定依赖项将使用特定的镜像名称在 Docker 中管理。MLflow 将尝试使用您系统上安装的 Docker 版本来拉取镜像。如果找不到，它将尝试从
    Docker Hub 获取。对于本章的目标，MLflow 在您的本地机器上运行是完全可行的。
- en: The second configuration that we add to our project is the main entry point
    command. The command to be executed will invoke in the Docker environment the
    `train.py` Python file, which contains the code of our project.
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们添加到项目中的第二个配置是主入口点命令。要执行的命令将在 Docker 环境中调用我们的项目代码的 `train.py` Python 文件。
- en: Add a Docker file to the project.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 Docker 文件添加到项目中。
- en: 'Additionally, you can specify the Docker registry URL of your image. The advantage
    of running Docker is that your project is not bound to the Python language, as
    we will see in the advanced section of this book. The MLflow API is available
    in a Rest interface alongside the official clients: Python, Java, and R:'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此外，您还可以指定您镜像的 Docker 注册表 URL。运行 Docker 的优势是您的项目不受 Python 语言的限制，正如我们将在本书的高级部分中看到的那样。MLflow
    API 在 Rest 接口以及官方客户端（Python、Java 和 R）中可用：
- en: '[PRE16]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The preceding Docker image file is based on the open source package Miniconda,
    a free minimal installer with a minimal set of packages for data science that
    allow us to control the details of the packages that we need in our environment.
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 前面的 Docker 镜像文件基于开源软件包 Miniconda，这是一个免费的、包含数据科学所需的最小包集的最小安装程序，它允许我们控制环境中所需包的详细信息。
- en: We will specify the version of MLflow (our ML platform), `numpy`, and `scipy`
    for numerical calculations. `Cloudpickle` allows us to easily serialize objects.
    We will use `pandas` to manage data frames, and `pandas_datareader` to allow us
    to easily retrieve the data from public sources.
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们将指定 MLflow（我们的 ML 平台）的版本、`numpy` 和 `scipy` 用于数值计算。`Cloudpickle` 允许我们轻松序列化对象。我们将使用
    `pandas` 来管理数据框，并使用 `pandas_datareader` 来允许我们轻松从公共来源检索数据。
- en: Import the packages required for the project.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入项目所需的所有包。
- en: 'On the following listing, we explicitly import all the libraries that we will
    use during the execution of the training script: the library to read the data,
    and the different `sklearn` modules related to the chosen initial ML model:'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在下面的列表中，我们明确导入了在执行训练脚本期间将使用的所有库：读取数据的库，以及与所选初始 ML 模型相关的不同 `sklearn` 模块：
- en: '[PRE17]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: We explicitly chose for the stock market movement detection problem a `RandomForestClassifier`,
    due to the fact that it's an extremely versatile and widely accepted baseline
    model for classification problems.
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们明确选择了 `RandomForestClassifier` 作为股票市场运动检测问题的模型，因为它是一个非常灵活且广泛接受的分类问题基线模型。
- en: Acquire your training data.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取您的训练数据。
- en: The component of the code that acquires the Yahoo Finance stock dataset is intentionally
    small, so we choose a specific interval of 3 months to train our classifier.
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 代码中获取 Yahoo Finance 股票数据集的部分故意很小，因此我们选择一个 3 个月的特定间隔来训练我们的分类器。
- en: 'The `acquire_training_data` method returns a `pandas` data frame with the relevant
    dataset:'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`acquire_training_data` 方法返回一个包含相关数据集的 `pandas` 数据框：'
- en: '[PRE18]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The format of the data acquired is the classic format for financial securities
    in exchange APIs. For every day of the period, we retrieve the following data:
    the highest value of the stock, the lowest, opening, and close values of the stock,
    as well as the volume. The final column represents the adjusted close value, the
    value after dividends, and splits:'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 获取数据的格式是交易所API中金融证券的经典格式。对于期间每一天，我们检索以下数据：股票的最高价、最低价、开盘价和收盘价，以及成交量。最后一列代表调整后的收盘价，即除息和拆股后的价值：
- en: '![Figure 1.1 – Excerpt from the acquired data'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图1.1 – 获取数据的摘录'
- en: '](img/image001.jpg)'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![img/image001.jpg](img/image001.jpg)'
- en: Figure 1.1 – Excerpt from the acquired data
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图1.1 – 获取数据的摘录
- en: '*Figure 1.2* is illustrative of the target variable that we would like to achieve
    by means of the current data preparation process:'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*图1.2* 说明了我们希望通过当前数据准备过程实现的目标变量：'
- en: '![Figure 1.2 – Excerpt from the acquired data with the prediction column'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图1.2 – 带有预测列的获取数据摘录'
- en: '](img/image002.jpg)'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![img/image002.jpg](img/image002.jpg)'
- en: Figure 1.2 – Excerpt from the acquired data with the prediction column
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图1.2 – 获取数据中带有预测列的摘录
- en: Make the data usable by scikit-learn.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使数据可由scikit-learn使用。
- en: The data acquired in the preceding step is clearly not directly usable by `RandomForestAlgorithm`,
    which thrives on categorical features. In order to facilitate the execution of
    this, we will transform the raw data into a feature vector using the rolling window
    technique.
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在先前的步骤中获取的数据显然不能直接由`RandomForestAlgorithm`使用，因为它依赖于分类特征。为了便于执行此操作，我们将使用滚动窗口技术将原始数据转换为特征向量。
- en: 'Basically, the feature vector for each day becomes the deltas between the current
    and previous window days. In this case, we use the previous day''s market movement
    (1 for a stock going up, 0 otherwise):'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 基本上，每一天的特征向量成为当前窗口日和前一个窗口日之间的差值。在这种情况下，我们使用前一天的股市走势（股票上涨为1，否则为0）：
- en: '[PRE19]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The following example is illustrative of the data frame output produced with
    the binarized ups and downs of the previous days:'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下示例说明了使用前一天的二值化涨跌产生的数据框输出：
- en: '![Figure 1.3 – Feature vector with binarized market ups and downs'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图1.3 – 二值化市场涨跌的特征向量'
- en: '](img/image003.jpg)'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![img/image003.jpg](img/image003.jpg)'
- en: Figure 1.3 – Feature vector with binarized market ups and downs
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图1.3 – 二值化市场涨跌的特征向量
- en: Train and store your model in MLflow.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在MLflow中训练和存储您的模型。
- en: This portion of the following code listing calls the data preparation methods
    declared previously and executes the prediction process.
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下代码列表的这一部分调用了先前声明的数据准备方法并执行了预测过程。
- en: The main execution also explicitly logs the ML model trained in the current
    execution in the MLflow environment.
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 主要执行还明确地将当前执行中在MLflow环境中训练的ML模型记录下来。
- en: '[PRE20]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The `mlflow.sklearn.log_model(clf, "model_random_forest")` method takes care
    of persisting the model upon training. In contrast to the previous example, we
    are explicitly asking MLflow to log the model and the metrics that we find relevant.
    This flexibility in the items to log allows one program to log multiple models
    into MLflow.
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`mlflow.sklearn.log_model(clf, "model_random_forest")` 方法负责在训练后持久化模型。与先前的示例相比，我们明确要求MLflow记录我们认为相关的模型和指标。这种对记录项的灵活性允许一个程序将多个模型记录到MLflow中。'
- en: 'In the end, your project layout should look like the following, based on the
    files created previously:'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 最后，根据先前创建的文件，您的项目布局应如下所示：
- en: '[PRE21]'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Build your project's Docker image.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建您项目的Docker镜像。
- en: 'In order to build your Docker image, you should run the following command:'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了构建您的Docker镜像，您应该运行以下命令：
- en: '[PRE22]'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '---> 268cb080fed2'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '---> 268cb080fed2'
- en: Successfully built 268cb080fed2
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 成功构建 268cb080fed2
- en: Successfully tagged stockpred:latest
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 成功标记 stockpred:latest
- en: '[PRE23]'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Run your project.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行您的项目。
- en: 'In order to run your project, you can now run the MLflow project:'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了运行您的项目，您现在可以运行MLflow项目：
- en: '[PRE24]'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Your output should look similar to the excerpt presented here:'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您的输出应类似于此处提供的摘录：
- en: '[PRE25]'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: This contains a printout of your model, the ID of your experiment, and the metrics
    captured during the current run.
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这包含了对您的模型的打印输出、实验ID以及当前运行期间捕获的指标。
- en: At this stage, you have a simple, reproducible baseline of a stock predictor
    pipeline using MLflow that you can improve on and easily share with others.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，您有一个使用MLflow的简单、可复制的股票预测管道的基线，您可以在此基础上进行改进并轻松与他人分享。
- en: Re-running experiments
  id: totrans-152
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 重新运行实验
- en: Another extremely useful feature of MLflow is the ability to re-run a specific
    experiment with the same parameters as it was run with originally.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: 'For instance, you should be able to run your previous project by specifying
    the GitHub URL of the project:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Basically, what happens with the previous command is that MLflow clones the
    repository to a temporary directory and executes it, according to the recipe on
    MLProject.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: The ID of the experiment (or the name) allows you to run the project with the
    original parameters, thereby enabling complete reproducibility of the project.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: The MLflow projects feature allows your project to run in advanced cloud environments
    such as Kubernetes and Databricks. Scaling your ML job seamlessly is one of the
    main selling points of a platform such as MLflow.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: As you have seen from the current section, the **MLflow project** module allows
    the execution of a reproducible ML job that is treated as a self-contained project.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: Exploring MLflow tracking
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **MLflow tracking** component is responsible for observability. The main
    features of this module are the logging of metrics, artifacts, and parameters
    of an MLflow execution. It provides vizualisations and artifact management features.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: In a production setting, it is used as a centralized tracking server implemented
    in Python that can be shared by a group of ML practitioners in an organization.
    This enables improvements in ML models to be shared within the organization.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: In *Figure 1.4*, you can see an interface that logs all the runs of your model
    and allows you to log your experiment's observables (metrics, files, models and
    artifacts). For each run, you can look and compare the different metrics and parameters
    of your module.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: It addresses common pain points when model developers are comparing different
    iterations of their models on different parameters and settings.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot presents the different metrics for our last run of
    the previous model:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.4 – Sample of the MLFlow interface/UI'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: '](img/image004.jpg)'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.4 – Sample of the MLFlow interface/UI
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: 'MLflow allows the inspection of arbitrary artifacts associated with each model
    and its associated metadata, allowing metrics of different runs to be compared.
    You can see the RUN IDs and the Git hash of the code that generated the specific
    run of your experiment:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.5 – Inspecting logged model artifacts'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: '](img/image005.jpg)'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.5 – Inspecting logged model artifacts
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: 'In your current directory of `stockpred`, you can run the following command
    to have access to the results of your runs:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Running the MLflow UI locally will make it available at the following URL:
    [http://127.0.0.1:5000/](http://127.0.0.1:5000/).'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: 'In the particular case of the runs shown in the following screenshot, we have
    a named experiment where the parameter of the size of the window in the previous
    example was tweaked. Clear differences can be seen between the performance of
    the algorithms in terms of F1 score:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.6 – Listing of MLflow runs'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.6 – MLflow运行的列表'
- en: '](img/image006.jpg)'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/image006.jpg)'
- en: Figure 1.6 – Listing of MLflow runs
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.6 – MLflow运行的列表
- en: 'Another very useful feature of MLFlow tracking is the ability to compare between
    different runs of jobs:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: MLFlow跟踪的另一个非常有用的功能是能够在不同作业运行之间进行比较：
- en: '![Figure 1.7 – Comparison of F1 metrics of job runs'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.7 – 任务运行F1指标的对比'
- en: '](img/image007.jpg)'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/image007.jpg)'
- en: Figure 1.7 – Comparison of F1 metrics of job runs
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.7 – 任务运行F1指标的对比
- en: This preceding visualization allows a practitioner to make a decision as to
    which model to use in production or whether to iterate further.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 此前的可视化允许从业者决定在生产中使用哪种模型，或者是否进一步迭代。
- en: Exploring MLflow Models
  id: totrans-185
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 探索MLflow模型
- en: '**MLflow Models** is the core component that handles the different model flavors
    that are supported in MLflow and intermediates the deployment into different execution
    environments.'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '**MLflow模型**是处理MLflow中支持的不同模型风味以及将部署到不同执行环境的中介的核心组件。'
- en: We will now delve into the different models supported in the latest version
    of MLflow.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将深入探讨MLflow最新版本中支持的不同模型。
- en: 'As shown in the *Getting started with MLflow* section, MLflow models have a
    specific serialization approach for when the model is persisted in its internal
    format. For example, the serialized folder of the model implemented on the `stockpred`
    project would look like the following:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 如*MLflow入门*部分所示，MLflow模型在模型以内部格式持久化时具有特定的序列化方法。例如，`stockpred`项目上实现的模型的序列化文件夹看起来如下：
- en: '[PRE28]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Internally, MLflow sklearn models are persisted with the `conda` files with
    their dependencies at the moment of being run and a pickled model as logged by
    the source code:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 内部，MLflow sklearn模型在运行时使用`conda`文件及其依赖项持久化，并使用源代码记录的pickle模型：
- en: '[PRE29]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: MLflow, by default, supports serving models in two flavors, namely, as a `python_function`
    or in `s``klearn` format. The flavors are basically a format to be used by tools
    or environments serving models.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，MLflow支持以两种风味提供模型服务，即作为`python_function`或`sklearn`格式。这些风味基本上是用于工具或环境的模型格式。
- en: 'A good example of using the preceding is being able to serve your model without
    any extra code by executing the following command:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 使用前面的一个很好的例子是能够通过执行以下命令来提供服务而无需任何额外代码：
- en: '[PRE30]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'You have access to a very simple web server that can run your model. Your model
    prediction interface can be executed by running the following command:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以访问一个非常简单的Web服务器，可以运行您的模型。您可以通过运行以下命令来执行模型预测接口：
- en: '[PRE31]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: The response to the API call to our model was `1`; as defined in our predicted
    variable, this means that in the next reading, the stock will move up.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 对我们模型API调用的响应是`1`；根据我们的预测变量定义，这意味着在下次读取时，股票将上涨。
- en: The final few steps outline how powerful MLflow is as an end-to-end tool for
    model development, including for the prototyping of REST-based APIs for ML services.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 最后几个步骤概述了MLflow作为端到端模型开发工具的强大之处，包括为ML服务原型设计基于REST的API。
- en: The MLflow Models component allows the creation of custom-made Python modules
    that will have the same benefits as the built-in models, as long as a prediction
    interface is followed.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: MLflow模型组件允许创建具有与内置模型相同优势的自定义Python模块，只要遵循预测接口即可。
- en: 'Some of the notable model types supported will be explored in upcoming chapters,
    including the following:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将探讨一些值得注意的模型类型，包括以下内容：
- en: XGBoost model format
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: XGBoost模型格式
- en: R functions
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: R函数
- en: H2O model
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: H2O模型
- en: Keras
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Keras
- en: PyTorch
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PyTorch
- en: Sklearn
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Sklearn
- en: Spark MLib
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spark MLib
- en: TensorFlow
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TensorFlow
- en: Fastai
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Fastai
- en: Support for the most prevalent ML types of models, combined with its built-in
    capability for on-premises and cloud deployment, is one of the strongest features
    of MLflow Models. We will explore this in more detail in the deployment-related
    chapters.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 支持最普遍的ML模型类型，结合其内置的本地和云部署能力，是MLflow模型的最强功能之一。我们将在与部署相关的章节中更详细地探讨这一点。
- en: Exploring MLflow Model Registry
  id: totrans-211
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 探索MLflow模型注册
- en: The model registry component in MLflow gives the ML developer an abstraction
    for model life cycle management. It is a centralized store for an organization
    or function that allows models in the organization to be shared, created, and
    archived collaboratively.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: MLflow中的模型注册组件为ML开发者提供了模型生命周期管理的抽象。它是一个集中存储库，允许组织或功能中的模型可以协作地共享、创建和归档。
- en: 'The management of the model can be made with the different APIs of MLflow and
    with the UI. *Figure 1.7* demonstrates the Artifacts UI in the tracking server
    that can be used to register a model:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.8 – Registering a model as an artifact'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: '](img/image008.jpg)'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.8 – Registering a model as an artifact
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
- en: 'Upon registering the model, you can annotate the registered model with the
    relevant metadata and manage its life cycle. One example is to have models in
    a staging pre-production environment and manage the life cycle by sending the
    model to production:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.9 – Managing different model versions and stages'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: '](img/image009.jpg)'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.9 – Managing different model versions and stages
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: The model registry module will be explored further in the book, with details
    on how to set up a centralized server and manage ML model life cycles, from conception
    through to phasing out a model.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-222
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we introduced MLflow, and explored some of the motivation behind
    adopting a ML platform to reduce the time from model development to production
    in ML development. With the knowledge and experience acquired in this chapter,
    you can start improving and making your ML development workflow reproducible and
    trackable.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
- en: 'We delved into each of the important modules of the platform: projects, models,
    trackers, and model registry. A particular emphasis was given to practical examples
    to illustrate each of the core capabilities, allowing you to have a hands-on approach
    to the platform. MLflow offers multiple out-of-the-box features that will reduce
    friction in the ML development life cycle with minimum code and configuration.
    Out-of-the-box metrics management, model management, and reproducibility are provided
    by MLflow.'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: We will build on this introductory knowledge and expand our skills and knowledge
    in terms of building practical ML platforms in the rest of the chapters.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
- en: We briefly introduced in this chapter the use case of stock market prediction,
    which will be used in the rest of the book. In the next chapter, we will focus
    on defining rigorously the ML problem of stock market prediction.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  id: totrans-227
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to enhance your knowledge, you can consult the documentation available
    at the following links:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: 'Reference information for MLflow is available here: [https://www.mlflow.org/docs/latest/](https://www.mlflow.org/docs/latest/)'
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Review notes on ML platforms: [https://medium.com/nlauchande/review-notes-of-ml-platforms-uber-michelangelo-e133eb6031da](https://medium.com/nlauchande/review-notes-of-ml-platforms-uber-michelangelo-e133eb6031da)'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'MLflow technical paper: [https://www-cs.stanford.edu/people/matei/papers/2018/ieee_mlflow.pdf](https://www-cs.stanford.edu/people/matei/papers/2018/ieee_mlflow.pdf)'
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
