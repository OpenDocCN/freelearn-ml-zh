- en: DevOps with vRealize Code Stream
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The DevOps operating model and its supporting CI/CD toolsets implementation
    approach to managing IT is changing the roles and responsibilities of IT resources,
    as well as the traditional design, delivery, and operation processes. This chapter
    will enable you to make the process changes that are required for the adoption
    of DevOps. We will look into the highest priority processes to transform and apply
    techniques to compare and contrast the key differences between legacy operating
    models, processes, and team structures with the strategic operating model that's
    required for DevOps. We will also go through **VMware vRealize Code Stream** (**vRCS**)
    and its orchestration for DevOps release processes and continuous application
    delivery.
  prefs: []
  type: TYPE_NORMAL
- en: You will learn about the DevOps Cloud operational model for the private cloud.
    which enables developers to seamlessly deploy, configure, and manage production-ready
    applications by leveraging VMware Cloud Automation services, along with configuration
    management tools such as Puppet to accelerate DevOps operations. You will also
    learn about CI/CD with **VMware Kubernetes Engine** (**VKE**).
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Application development life cycles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automation with vRealize
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: vRCS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can download VMware vRealize Code Stream from [https://my.vmware.com/web/vmware/info/slug/infrastructure_operations_management/vmware_vrealize_code_stream/2_x](https://my.vmware.com/web/vmware/info/slug/infrastructure_operations_management/vmware_vrealize_code_stream/2_x) and
    VMware Wavefront from [https://www.vmware.com/download/eula/wavefront-terms-of-service.html](https://www.vmware.com/download/eula/wavefront-terms-of-service.html).
  prefs: []
  type: TYPE_NORMAL
- en: Application development life cycles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is important to understand the change that has taken place in terms of application
    development life cycles in order to understand application transformation. When
    the pace of change was slow, application development always had a pre-determined
    plan with a finite end goal. The design of the application was thought through
    and agreed up-front, including capturing all of the user's requirements. Then,
    a series of steps followed that involved developing the plan, testing the functionality
    of the application, testing whether the application would run efficiently and
    to the right scale (non-functional testing), user acceptance testing to agree
    that the application had been built the way it was supposed to be, before finally
    going live in its final format.
  prefs: []
  type: TYPE_NORMAL
- en: The pace of change in some modern applications, coupled with the fact that they
    can be very experimental in nature, means that the waterfall approach (where the
    final application design is fully understood upfront) just doesn't work. Instead,
    application development, application design, user, and even customer testing occurs
    in rapid iterations, meaning that the application develops with a continuous feedback
    loop. Development teams are also typically assigned to individual components,
    so there is no concept of a controlled state that everyone has to comply with.
    Development occurs in simultaneous streams with frequent code check-ins to confirm
    overall functionality.
  prefs: []
  type: TYPE_NORMAL
- en: We can apply these results in terms such as CD, DevOps, and Agile. While these
    principles can be applied to traditional application architectures, they tend
    to be best suited to cloud-based application tools, platforms, and architectures.
    It should be noted that this area has several models and is still maturing, despite
    being widely practiced.
  prefs: []
  type: TYPE_NORMAL
- en: One very important thing to realize is that Agile and DevOps is not a replacement
    for waterfall. Customers will use both disciplines, which are dependent on the
    application development requirements. Applying Agile principles of development
    to a mission-critical traditional application could have terrible consequences,
    and conversely you could use as many cloud technologies as you want, but using
    a waterfall approach for application development that is exploratory in nature
    would fundamentally cripple the ability to deliver effectively.
  prefs: []
  type: TYPE_NORMAL
- en: CD pipeline
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'DevOps helps with the CD pipeline process by going through the following procedure:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Plan**: We have to first plan and define software release cycles; user-defined
    use cases; Agile planned actions; and a proper plan for backlogs and problems
    with a follow-up plan.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Code**: This is defined with a set of processes with related tools that allows
    us to write scripts, along with its assessment and testing. It also helps with
    following defined security and compliance metrics.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Commit**: This can help us define procedures and its related tools for code
    assessment, consolidation, and executing it with the main source code repository.
    This stack also assists in maintaining source control with daily testing, executing
    on-demand, and the proactive scanning of code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CI pipeline
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The CI pipeline provides processes, practices, and tooling to help with the
    automated building and testing of every code commit in the source code repository.
    This includes automated security and compliance testing and logging.
  prefs: []
  type: TYPE_NORMAL
- en: Test processes, practices, and tooling for automated unit, functional, security,
    and compliance testing, logging results, and gaining approval to promote artifacts
    to the next stage in the flow.
  prefs: []
  type: TYPE_NORMAL
- en: The artifact repository consists of services and activities that are necessary
    to achieve the desired end state in terms of maintaining version, promotion, governance,
    and policy controls that are related deliverable artifacts. Generally stated,
    such artifacts are those that are converted from sources into binary packages,
    though other transformations may exist.
  prefs: []
  type: TYPE_NORMAL
- en: We develop and update software continuously so that the software can be released
    to production on-demand via CD.
  prefs: []
  type: TYPE_NORMAL
- en: The configuration consists of services and activities that are necessary to
    achieve the desired end state in terms of automating idempotent and expedient
    deployment of applications to static and on-demand hybrid cloud infrastructures.
    The design and implementation will be consistent with predefined SDLC process,
    including proper source artifact management (for example, Puppet modules, Chef
    cookbooks, deployment blueprints, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: The control stack consists of services that are necessary to achieve the desired
    end state in terms of managing the tool chains that are recommended to operate
    the applications that are deployed by this infrastructure. This will also incorporate
    the SDLC processes, tools, integrations, and actions that are needed to maintain
    defined service-level agreements for a specific customer.
  prefs: []
  type: TYPE_NORMAL
- en: The feedback stack allows you to get automated feedback such as alerts, audit
    reports, test reports, and deployment process reports delivered when required.
  prefs: []
  type: TYPE_NORMAL
- en: Planning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To achieve consistently successful business outcomes, VMware collaborates with
    customers in assessing, recommending, and documenting changes that are necessary
    to achieve optimal delivery processes. This collaborative effort is based on industry
    best practices in the following service foundation areas:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Software Development Life Cycle** (**SDLC**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Source code management** (**SCM**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Continuous integration** (**CI**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Artifact repository** (**AR**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Continuous delivery** (**CD**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Hybrid cloud provisioning** (**HCP**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Configuration management** (**CM**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Continuous operational management** (**COM**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SDLC
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The SDLC foundation consists of services and activities that are necessary to
    achieve optimally aligned personnel roles, tool chains, and processes to achieve
    the desired end state of the software delivery life cycle management by the customer.
  prefs: []
  type: TYPE_NORMAL
- en: SCM
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The SCM foundation consists of services and activities that are necessary to
    achieve the desired end state in terms of managing and version-controlling software
    source artifacts. Source artifacts include, among other sources, application source
    code, documentation, configuration information, and process control flow configurations.
  prefs: []
  type: TYPE_NORMAL
- en: CI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The CI consists of services and activities that are necessary to achieve the
    desired end state in terms of automated build, test, and deliverable (that is,
    binary) artifact creation. The CI process assists in application builds and its
    verification tests with rapid feedback while developers build software by using
    tools such as Jenkins, Gerrit Triggers, and vRA.
  prefs: []
  type: TYPE_NORMAL
- en: AR
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: VMware and customers collaborate to define and refine processes and activities
    that transform sources into customer deliverable artifacts. This includes assessing
    and realigning activities and related key accountability roles, responsibilities,
    and required skillsets, key interactions, and hand-offs related to supporting
    the service definition process with agreed upon use cases and business outcomes.
  prefs: []
  type: TYPE_NORMAL
- en: The AR foundation consists of services and activities that are necessary to
    achieve the desired end state in terms of maintaining version, promotion, governance,
    and policy controls related to deliverable artifacts. Generally stated, such artifacts
    are those that are converted from sources into binary packages, though other transformations
    may exist.
  prefs: []
  type: TYPE_NORMAL
- en: Release pipeline automation (CD)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The CD consists of services and activities that are necessary to achieve the
    desired end state in terms of automating governance and release policies regarding
    deliverable artifacts. This involves providing the tools and integrations that
    are necessary to orchestrate manually-gated organizational decision processing
    and automated delivery processes.
  prefs: []
  type: TYPE_NORMAL
- en: CM
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The CM foundation consists of services and activities that are necessary to
    achieve the desired end state in terms of automated, idempotent, and expedient
    deployment of applications to a static and on-demand hybrid cloud infrastructure.
    The design and implementation will be consistent with the agreed upon SDLC process,
    including proper source artifact management (for example, Puppet modules, Chef
    cookbooks, deployment blueprints, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: HC
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The HC foundation consists of services and activities that are necessary to
    achieve the desired end state in terms of automating resource provisioning to
    achieve application deployments to the hybrid cloud. In this context, the hybrid
    cloud may include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: VMware vCloud Air, Linux containers, AWS, and other heterogeneous cloud platforms
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On-premise virtualized/cloud and physical infrastructures
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This foundation service involves providing the tools and integrations that are
    necessary to automate the provisioning of infrastructure services (that is, compute,
    network, and storage) for all deliverable artifact deployments. The design and
    implementation will be consistent with the agreed upon SDLC process, including
    proper source artifact management (for example, provisioning blueprints, workflow
    scripts, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: COM
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The COM foundation consists of services and activities that are necessary to
    achieve the desired end state in terms of managing the tool chains that operate
    the service foundations, as well as the applications that are deployed by that
    infrastructure. This consists of incorporating processes, tools, integrations,
    and activities that are necessary to maintain any **service-level agreements**
    (**SLA**) that the customer is either bound to or reasonably desires.
  prefs: []
  type: TYPE_NORMAL
- en: Feedback
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Feedback into the planning stack is necessary as errors occur. This consists
    of bug reporting and deficiencies in software features, including any change that's
    required by the operating software and its underlying infrastructure, all of which
    should be tracked for handling by the coding stack. Then, the cycle continues.
    This feedback then goes into the planning stack and we start the iteration again.
    We always want to be ensuring that all of our stacks are working well together
    and providing us with the desired outcomes. Our various processes can be continually
    updated an improved to keep pace with changes and updates in the tool chain, in
    the types of code that the stacks are dealing with, and the infrastructure that
    the resulting applications are hosted on.
  prefs: []
  type: TYPE_NORMAL
- en: Request fulfillment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: vRealize Automation assists users in requesting and managing different kinds
    of IT services through a unified IT service catalog that spans across the hybrid
    cloud.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a screenshot of the catalog for software provisioning:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/54cea82e-e0eb-462b-8f06-8a2bb59c4732.png)'
  prefs: []
  type: TYPE_IMG
- en: It can provide programmatic access to support the on-demand delivery of software
    based on the DevOps model.
  prefs: []
  type: TYPE_NORMAL
- en: Change management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: vRO has an internal versioning system that automatically keeps track of changes.
    It has API interfaces to integrate with third-party tools such as Jenkins and
    also has an audit log that help users to review changes and access. vRA can provide
    automation for approval processes by integrating with Active Directory and can
    also be configuring for alternate approvers to ensure that change management and
    business requirements are met.
  prefs: []
  type: TYPE_NORMAL
- en: Release management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There have been fundamental changes in the application's release process which
    demands new tooling that can keep up with it. The first change is in the rise
    of containers and microservices. They enable faster code pushes, but this is at
    the expense of increased complexity. Instead of the 100 metrics you had for your
    virtualization environments, now you need to track thousands and at high speed.
    The old-style tooling cannot keep up with these scale and changes, and they fail
    over. CD and DevOps are being adopted in larger enterprises, so engineering teams
    are now pushing code to production many times per day, thus driving the need for
    continuous monitoring. DevOps is mainstream, even though the tools that the operations
    teams use are still fragmented and consequentially slowing down troubleshooting
    services.
  prefs: []
  type: TYPE_NORMAL
- en: Compliance management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Customers expect data centers to be compliant because it is an extension of
    their IT. Heavily regulated verticals such as the public sector, finance, and
    healthcare cannot use this infrastructure without compliance certifications. Customers
    running a hybrid or public cloud infrastructure rely on compliance certifications
    instead of independent audits to ensure that proper security controls are in place.
    A number of high profile security breaches, court cases, and global legislative
    changes have raised awareness of the complexity and risks of running in the cloud.
    Open a browser and go to [https://marketplace.vmware.com](https://marketplace.vmware.com.).
  prefs: []
  type: TYPE_NORMAL
- en: '**VMware Cloud** (**VMC**) on AWS is working on implementing the compliance
    certifications and frameworks by targeting **Cloud Security Alliance** (**CSA**)
    and **General Data Protection Regulation** (**GDPR**) first, followed by **International
    Organization for Standardization** (**ISO**), **Security Operations Center** (**SOC**),
    **Health Insurance Portability and Accountability Act** (**HIPPA**), **Payment
    Card Industry** (**PCI**), the **Federal Risk Authorization and Management Program** (**FedRAMP**),
    and **Criminal Justice ****Information Services** (**CJIS**). Security certifications that
    exist today are applicable to cloud computing and should be strongly considered.
    Cloud services will apply the mandated principles of policy, security, strategy,
    and compliance, which must be followed even by the lightest requirement use cases.'
  prefs: []
  type: TYPE_NORMAL
- en: Incident management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An incident is essentially any issue that, if left unattended, could result
    in customer escalation. We can avoid many escalations by implementing a customer
    incident management process. We do not define customer escalation processes in
    any geographies. Our customer relationship management approach must evolve to
    emphasize the importance of escalation prevention. In response, we can plan to
    identify incidents, track them, and resolve them to avoid escalations. Management
    oversight and guidance during this process should help managers resolve these
    kinds of situations before they become escalations. Communication is the major
    focus. Communications protocols must define who, what, and when. The response
    to the customer must provide a balance between the cost of gained customer satisfaction
    and the cost of investment. We can do a better job at managing customer expectations
    and issues before they result in an escalation. The purpose of this process is
    to highlight issues that could escalate early on so that management and executive
    oversights can be applied in a timely manner to either prevent escalations from
    occurring or reduce the severity of an escalation if one does occur. The DevOps
    team now acts as level 2 support while before they came into action as level 3
    support.
  prefs: []
  type: TYPE_NORMAL
- en: Event management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The DevOps team have to monitor and manage all of the applications, as per the
    customer's requirements, for compute, storage, network, VMs, containers, and so
    on, by using vRealize tools and get critical alerts for the events related to
    applications.
  prefs: []
  type: TYPE_NORMAL
- en: Capacity management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Custom profiles allow you to expand the capabilities of capacity planning by
    automating capacity calculations based on specifications that you create. Choosing
    a committed project will alter our capacity numbers as it assumes the resource
    is committed. If we don't want these numbers to change, then we can go back and
    select a plan from the Capacity and Utilization dashboard. Maintenance mode allows
    us to prevent planned downtime from affecting capacity planning.
  prefs: []
  type: TYPE_NORMAL
- en: 'The solution must provide the ability to proactively determine capacity issues
    and risks for the virtual environment. It must provide capacity trending, demand
    forecasting, and a what-if impact analysis of future projects:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/de0fb929-c7a3-4377-b4af-e8f0a8357108.png)'
  prefs: []
  type: TYPE_IMG
- en: 'A custom dashboard will be created for use by the test and development team.
    The intention is to give a specific view of test and dev VMs in the vSphere infrastructure,
    focusing on workload, capacity remaining, and reclaimable capacity. The following
    components will make up the test and dev dashboard:'
  prefs: []
  type: TYPE_NORMAL
- en: Dev VMs overview, displaying health, risk, and efficiency for the server and
    workstation VMs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: VM workload heat map, color-coded to display the selected type VMs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'VMs with the lowest disk space Capacity Remaining (%) over the past week:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/ea5c4395-2301-4813-87be-3fd45792936f.png)'
  prefs: []
  type: TYPE_IMG
- en: Idle VMs and VMs with the lowest utilization, flagged as idle if the utilization
    index becomes 1
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reclaimable capacity displays the percentage of resources that can be reclaimed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Powered off VMs and VMs are flagged as powered on
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wavefront dashboard
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Wavefront is a metric-driven monitoring and analytics platform. DevOps and developers
    teams at enterprises that run cloud-native apps such as Box, Lyft, Intuit, and
    Workday use Wavefront to monitor the performance of cloud applications that reach
    amazing scale. The Wavefront platform collects and analyzes metrics from distributed
    applications running on VMware Cloud on AWS, AWS containers, microservices, cloud
    infrastructure, and even business data. Once metric data is in a Wavefront time-series
    database, Wavefront customers can apply powerful and flexible analytics in the
    form of the Wavefront Query Language. Developer teams use this to monitor the
    performance of their cloud services and distributed applications at unprecedented
    scale. They can troubleshoot faster and proactively alert and detect the leading
    indicators of anomalies with instant access, and unified visibility drives accelerate
    code releases by enabling the same visibility across all cloud services, infrastructures,
    and tools. Developer teams get instant visibility across all cloud services. Wavefront
    spreads across hundreds of engineers, enabling a self-service approach and empowering
    teams to innovate because Wavefront provides visibility in digital environments
    (digital service is the business). Business decisions are aligned with application
    code delivery, which helps everyone move faster with unified visibility.
  prefs: []
  type: TYPE_NORMAL
- en: Wavefront offers many ways to ingest data. We can retrieve data from AWS (APIs,
    CloudWatch, and CloudTrail) directly and can create metrics from logs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Wavefront''s key differentiators from DevOps and developer teams are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Wavefront allows you to apply advanced metrics and query-driven analytics. There
    are over 100 mathematical transformations available for you to work with metrics
    data. We can troubleshoot issues faster using analytics. Wavefront, as a SaaS
    analytics platform, offers massive scale and high availability.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It offers customizable dashboards that help DevOps teams take ownership of code
    in production. Dashboards can be shared and exported with one click.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Intelligent alerting and proactive monitoring help detect leading indicators
    (quickly) or quickly zero-in on an anomaly where we can isolate problems by their
    desired shape or time, or by any condition we define.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once Wavefront enters an organization, its adoption spreads across hundreds
    of developers, enabling a self-service approach and empowering them to innovate
    in a collaborative fashion. Synchronized business decisions aligned with code
    releases helps SaaS businesses move faster. Because Wavefront is typically adopted
    at leading SaaS enterprises, and since their cloud service is their lifeline,
    it helps business leaders make analytics-driven business decisions. These decisions
    are synchronized with cloud services code delivery, helping everyone move faster.
  prefs: []
  type: TYPE_NORMAL
- en: Wavefront integrations allow you to collect, analyze, and harness data from
    any data source, and tier important things to remember. Wavefront integrations
    help to accelerate this process with full RESTful APIs and user interfaces. Data
    from individual tools can be correlated with other tiers. Wavefront is unique
    at a very high scale with these features. Powerful correlations across tiers help
    us win across point tools and metrics platforms. The Wavefront platform offers
    RESTful APIs for extensibility. The Wavefront API integrates with any tool of
    choice for developers or DevOps tooling, and makes integration easy. For example,
    Lyft wanted to keep their Grafana dashboards and use Wavefront as the most scalable
    backend time-series database.
  prefs: []
  type: TYPE_NORMAL
- en: Getting insights by monitoring how people work
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have to monitor how people are working and get better insights in to whether
    the business and operations are going well or not. It is always hard to collect
    metrics and monitor people, and we can't compel people to generate metrics on
    their own. So, with the collaborative solutions such as slack and SaaS metrics
    monitoring solutions such as Wavefront, it becomes easier to track and monitor
    people's interests and activities, and gain insights from this. Wavefront allows
    you to apply advanced metrics and query-driven analytics. There are over 100 mathematical
    transformations available to work with metrics data. We can troubleshoot issues
    faster with Wavefront, which is a SaaS analytics platform with massive scale and
    high availability. It offers customizable dashboards, which help DevOps teams
    to take ownership for code in production. Their dashboards have one-click intelligent
    alerting and proactive monitoring where we can isolate a problem by its desired
    shape or time, or any condition that's been defined.
  prefs: []
  type: TYPE_NORMAL
- en: Automation with vRealize
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'vRA can be designed in a distributed and highly available architecture to provide
    multi-role services. This highly available architecture with load balancing can
    be configured from the vRA installation wizard by integrating it with VMware Identity
    Manager with high availability mode for **Single Sign-On** (**SSO**). It will
    be clustered with embedded vRA appliance PostgreSQL internal databases as the
    external PostgreSQL option is no longer available. It also has clustered embedded
    vRO services and high availability for workflows and extensibility. It accesses
    Microsoft Active Directory servers to perform the authentication of users and
    Active Directory group membership enumeration. This provides a prescribed reference
    architecture design that allows for an SDDC content life cycle solution. The solution
    addresses the following three main objectives:'
  prefs: []
  type: TYPE_NORMAL
- en: Automation of the transfer of vRO and vRA content between different environments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: vRO/vRA content storage and version control, including rollbacks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reduction of the time and effort required to test the compliance of the vRO/vRA
    content using automation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This has been designed to allow authenticated users to achieve the synchronization
    of content between vRA environments. The services that are defined in the project
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Creation of content packages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing packages on a test/validation environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deployment of packages to the deployment's target environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Management of endpoints (adding/deleting)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following diagram shows the **SDDC Content** **Life cycle**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2f3d75f7-1ad5-47bd-91bb-98373b51b4b3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Following are the components:'
  prefs: []
  type: TYPE_NORMAL
- en: The **Production Tenant** is the production vRA tenant endpoint. vRA and vRO
    content is deployed to this endpoint so that it can be consumed by end users.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**vRO** provides orchestration capabilities using workflows for capture, test,
    and release content.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Workflows** are organized into a vRCS pipeline that represents the content
    life cycle, allowing content to flow through development, test, and into production.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Xenon** provides the content storage capability. The SDDC content is stored
    in the repository after it is captured and version controlled throughout its life
    cycle.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Configuration** of the VMs that are used to host the services of the solution
    is based on the recommendation to deploy an infrastructure that supports up to
    100 pipelines and up to 30 simultaneous pipeline executions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying Infrastructure as Code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We need to configure vRA and NSX, which will allow for an isolated network of
    VMs to be used from the dev environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'The network layout of the desired solution is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/14548237-9354-4a06-ad88-681c6a02b5fe.png)'
  prefs: []
  type: TYPE_IMG
- en: 'NSX Edge will provide **Source Network Address Translation** (**SNAT**) routing
    so that isolated VMs can have access to external dev network resources in this
    layout. It will also provide **destination NAT** (**DNAT**) port forwarding so
    that dev machines are able to access specific services on a target isolated VM
    by addressing the NSX Edge in this layout. This design will also make use of the
    vSphere linked clones technology to minimize storage requirements. vRA provisioning
    will be implemented with the following blueprint structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Base Windows image**: This will provision a blank Windows image that will
    become accessible through vRA.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Base Linux image**: This will provision a blank Linux image that will be
    become accessible through vRA.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Windows linked clone component**: This will be the linked clone blueprint
    on top of the VM that was instantiated from the base Windows image and a specific
    snapshot. This represents the actual isolated VM to be provisioned.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Linux linked clone component**: This will be the linked cone blueprint on
    top of the VM that was instantiated from the base Linux image and a specific snapshot.
    This represents the actual isolated VM to be provisioned.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Multi-machine blueprint**: This will be a collection of the component blueprints
    that will be provisioned at once:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To provision the machine properly, the following components should be included:'
  prefs: []
  type: TYPE_NORMAL
- en: '**External network profile**: This is a definition of the subnet from the external
    dev network, along with details for routing and DNS resolution:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cluster reservation**: A dedicated reservation is needed to limit resource
    usage to only a single datastore (so that the linked clone works), as well as
    to map the network port group to the External network profile.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**NAT network profile**: This is a definition of the subnet that isolated VMs
    will use behind NSX Edge. This is only a template that will later be copied into
    the multi-machine blueprint components assignment:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/3359a955-98d0-4fb5-9e05-76826c1bb0e6.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Reservation policy**: This will be a dedicated reservation policy that ensures
    that all blueprints will only address the designated cluster reservation that''s
    created.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Machine prefix**: This is only used to distinguish the machines that have
    been provisioned by the multi-machine blueprint.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: vRealize Code Stream
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'vRealize Application Services is about modeling an application and automating
    its provisioning. vRCS is about modeling an application release process. The two
    are complementary: Code Stream relies on integrations with **virtual reality as
    a service** (**vRAAS**), scripts, Puppet, and so on to deploy code. Code Stream
    allows us to codify or model the entire release process and promotion of builds
    across stages and/or environments (functional testing, load testing, systems integration
    testing, staging, and finally production). This includes not just triggering application
    deployment (via scripts or other tools) but triggering tests and looking at test
    results before deciding to promote a build to the next stage.'
  prefs: []
  type: TYPE_NORMAL
- en: It also supports creating manual tasks in a stage for operations that are not
    automated today. It's really a process orchestration tool rather than an app deployment
    or provisioning solution. Code Stream allows us to trigger the deployment of individual
    artifacts (`.jar`, `.war`, config files, and so on) as opposed to vRAAS, which
    forces us to redeploy the entire stack, including the underlying machine. One
    Code Stream appliance can handle about 100 concurrent pipeline executions. Puppet,
    Chef, and other configuration management tools are not direct competitors to Code
    Stream. These tools are often used to configure and deploy software, but Code
    Stream is all about modeling a release process. The core value of Code Stream
    is really to tie configuration management and infrastructure provisioning, as
    well as continuous integration and testing and approval systems together to automate
    the entire release process.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are a number of technical advantages of this:'
  prefs: []
  type: TYPE_NORMAL
- en: Code Stream can automate and accelerate the life cycle of any type of software.
    This includes applications (traditional and cloud-native), as well as infrastructure
    and IT content (blueprints, workflows, scripts, templates, and so on).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Code Stream does not prescribe a certain type of release model or toolset. It
    can model the release process for companies who are just starting out and put
    a majority of manual tasks to a 100% automated release model. Therefore, it adapts
    to an organization's maturity level and allows them to gradually move toward a
    more automated model.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Code Stream allows teams to provision and deploy code to private as well as
    public clouds. Code Stream can take advantage of vRA's converged blueprint or
    work with other provisioning solutions such as Cloud Foundry.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: VMware offers the best full-stack and completely integrated solution from the
    foundational SDDC to the management/provisioning layer with vRA, and finally release
    automation capabilities with Code Stream. So, while all products can be used independently
    (no vendor lock-in), when used together, customers have an unmatched platform
    to help them become more agile.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We can install Code Stream without vRA as there is definitely value in deploying
    both products to get benefits from a fully integrated solution for provisioning
    automation and release automation. Code Stream supports two deployment models:'
  prefs: []
  type: TYPE_NORMAL
- en: Standalone, where only the Code Stream functionality is enabled on the virtual
    appliance. Admins can then optionally configure Code Stream to provision machines
    via an external vRA appliance.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unified, where both the Code Stream and vRA functionality is enabled on the
    same appliance. vRA also requires a separate Windows server for IaaS functionality.
    This configuration is not a supported configuration for production.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jenkins is a build automation tool that promotes CI, a development practice
    that requires developers to integrate code into a shared source code repository
    such as Git several times a day. Each check-in is then verified by an automated
    build, allowing teams to detect problems early. At the heart of any CI tool is
    the job that automates a build and build-related activities such as a test that
    is run pre or post-build.
  prefs: []
  type: TYPE_NORMAL
- en: Release Automation tools such as Code Stream focus on modeling and automating
    the broader release process, all the way to production, which typically integrates
    CI and additional categories of tools such as provisioning, change management,
    and monitoring, and often, people do this for some manual tasks and/or approvals.
    Companies often use release automation tools to work toward CD, a practice where
    every good build is potentially pushed to production. CD is a superset of CI,
    involving more tools and more teams—not just development but operations and release
    teams as well. At the heart of a release automation or CD tool is the pipeline
    that models a process, including business constructs such as approvals.
  prefs: []
  type: TYPE_NORMAL
- en: 'Jenkins is an extensible tool and can be customized to go beyond doing basic
    builds and testing to orchestrate other activities toward the release process.
    We can customize vRO workflows to do some of what vRA does, but at some point
    we end up writing so much logic that the workflow-based solution becomes hard
    to maintain over time. The same can happen with custom solutions on top of Jenkins:
    they may work initially but get harder to manage over time, especially as you
    try to manage more applications. That''s the typical drawback of a build versus
    buy approach. Jenkins Enterprise has a pipeline component to achieve release automation.
    It''s still lacking key capabilities such as manual tasks and approvals and easy
    passing of variables from one step to the next in the pipeline, which are typically
    offered by top release automation vendors.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Code Stream is only available as a standalone product because of the following
    reasons:'
  prefs: []
  type: TYPE_NORMAL
- en: It does not comply with all the requirements and expected capabilities of suites
    such as vCloud or vRealize. For instance, it does not support localization, HA,
    or unattended installation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It needs to evolve rapidly and follow a more frequent release cadence than existing
    suites.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It shares some common services with vRA, but it can be deployed without vRA
    so that release engineers or DevOps teams who don't use vRA can still have a lightweight
    continuous delivery solution.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pipeline automation model – the release process for any kind of software
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'vRealize Code Stream is used by customers who want to automate their release
    or CD process. vRealize Code Stream allows developers and operations teams to
    release software more frequently by reducing operational risk. It is designed
    based on the principle to integrate and extend rather than rip and replace so
    that that we can use existing tools alongside the SDLC. This will help developers
    to use their existing investment in tools and skills. At the time of writing this
    book, vRealize Code Stream has three main capabilities:'
  prefs: []
  type: TYPE_NORMAL
- en: Pipeline automation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Artifact management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Release dashboard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'It will provide RESTful APIs and capabilities based on a comprehensive integration
    framework. Some examples of manual tasks are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Approvals**:Code Stream has its own native approval workflow capability,
    which is shared with other vRealize products. Approvals can be used to add manual
    oversight at any stage in the pipeline''s execution. In addition, Code Stream
    can also leverage vRO plugins to call work order ticketing systems to coordinate
    the approval workflows.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Modeling manual tasks**: Tasks that require manual execution usually require
    some type of notification to the task owner via a work order ticketing system.
    Code Stream leverages vRO workflows and plugins to integrate with existing systems
    such as BMC Remedy **IT Service Management** (**ITSM**), HP Service Manager, ServiceNow,
    and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: vRCS deployment architecture
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter describes the recommended deployment topologies for vRCS. vRCS
    can leverage vRA for VM provisioning. There are a couple of possible deployments:'
  prefs: []
  type: TYPE_NORMAL
- en: vRCS and vRA on the same single appliance (recommended for small POCs where
    vRCS and vRA are both lab/evaluation systems)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: vRCS and vRA on two separate appliances (recommended for large POCs or production)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: vRCS and vRA on two separate appliances where vRA is HA enabled (recommended
    for large POCs or production)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Artifactory deployed as an external entity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'vRCS does not support connecting to an external vRO and does not support its
    own HA setup, but it can integrate with an external HA setup of vRA for VM provisioning:'
  prefs: []
  type: TYPE_NORMAL
- en: vRCS and vRA (vRA) on the same single appliance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: vRCS and vRA on two separate appliances
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: vRCS and vRA on two separate appliances where vRA is HA enabled
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Artifactory deployed as an external entity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Please be aware of the following when configuring the deployment:'
  prefs: []
  type: TYPE_NORMAL
- en: If the deployment of vRCS and vRA is in same appliance, it can lock up the whole
    appliance. Since the HA setup of vRA has its own SSO server, and there is no identity
    federation support, vRCS must use a shared user account to access vRA.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Please configure the vRA endpoint as a shared account and not per user session. vRCS
    integrates with **Advanced Service Designer** (**ASD**) forms, and there is a
    new plugin named ASD that is shipped with vRCS 1.2\. This plugin only works with
    an internal vRA.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: System architecture
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The vRCS architecture describes the various components that are involved with
    the system architecture. Both vRCS and vRA can be on the same appliance with the
    appropriate license. vRCS requires the endpoint to be configured so that it can
    be integrated with any external product or service deployment. It requires an
    endpoint from vRA, even though vRA and vRCS are in same appliance for vRCS to
    communicate with vRA for VM provisioning.
  prefs: []
  type: TYPE_NORMAL
- en: 'vRCS can interact with vRA in two ways:'
  prefs: []
  type: TYPE_NORMAL
- en: Shared account (using single common user)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Per user session (SSO):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/3eb3c018-862e-43c5-956d-781dc3a09565.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Users have access to the following ports:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Server role** | **Port** |'
  prefs: []
  type: TYPE_TB
- en: '| vRCS/vRA appliance | `443` |'
  prefs: []
  type: TYPE_TB
- en: '| vRA identity appliance | `7444` |'
  prefs: []
  type: TYPE_TB
- en: 'The following diagram represents the vRCS communication workflow:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/55d6b76a-0aa4-40bc-800e-7bd54e544f84.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Administrators need access to the following ports, other than the ports that
    are required by users:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Server role** | **Port**  |'
  prefs: []
  type: TYPE_TB
- en: '| vRA identity appliance | `5480` |'
  prefs: []
  type: TYPE_TB
- en: '| vRCS/vRA appliance | `5480` |'
  prefs: []
  type: TYPE_TB
- en: '| **Server role** | **Inbound ports** | ** Service/system outbound ports**
    |'
  prefs: []
  type: TYPE_TB
- en: '| vRCS/vRA appliance | `443`SSH: `22`VAMI: `5480` | Identity VA: `7444` |'
  prefs: []
  type: TYPE_TB
- en: '| vRA identity appliance | `7444`SSH: `22`VAMI: `5480` | LDAP: `389`LDAPS:
    `636` |'
  prefs: []
  type: TYPE_TB
- en: Integrating vRCS with an external, standalone vRA
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: vRCS can integrate with an existing vRA for VM provisioning. Therefore, an endpoint needs
    to be created where external vRA endpoint-related details can be specified. This
    endpoint will be listed under the provisioning category while adding a task in
    a stage. This endpoint can support both shared account and per user session options.
    If an external vRA and vRCS links to the same SSO server, both options per user
    session and shared account are supported. However, if an external vRA has its
    own SSO server, only the shared account option is supported. This is because the
    identity federation between two SSO servers is not supported.
  prefs: []
  type: TYPE_NORMAL
- en: 'The user needs access to the following ports:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Server role** | **Port** |'
  prefs: []
  type: TYPE_TB
- en: '| vRCS | `443` |'
  prefs: []
  type: TYPE_TB
- en: '| vRA appliance | `443` |'
  prefs: []
  type: TYPE_TB
- en: '| vRA identity appliance (Code Stream) | `7444` |'
  prefs: []
  type: TYPE_TB
- en: 'Administrators need access to the following ports, in addition to the ports
    that are required by users:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Server role** | **Port** |'
  prefs: []
  type: TYPE_TB
- en: '| vRCS | `5480` |'
  prefs: []
  type: TYPE_TB
- en: '| vRA appliance | `5480` |'
  prefs: []
  type: TYPE_TB
- en: '| **Server role** | **Inbound ports** | **Service/system outbound ports** |'
  prefs: []
  type: TYPE_TB
- en: '| vRCS | `443`SSH: `22`VAMI: `5480` | Identity CS VA: `7444`vRA VA: `443` |'
  prefs: []
  type: TYPE_TB
- en: '| vRA appliance | `443`SSH: `22`VAMI: `5480` | Identity vRA VA: `7444` |'
  prefs: []
  type: TYPE_TB
- en: '| vRA identity appliance (Code Stream) | `7444`SSH: `22`VAMI: `5480` | LDAP:
    `389`LDAPS: `636` |'
  prefs: []
  type: TYPE_TB
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Code Stream provides the ability to model and visualize the release process
    of any type of software (applications, blueprints, workflows, configuration files,
    Puppet manifests, Chef recipes, and so on). All stakeholders (devs, operations
    teams, release engineers, and so on) can go to a central place to track the state
    of application and software releases. Users can view not just the history but
    exactly where builds and releases have failed. Code Stream and vRA use the same
    delivery platform (the same virtual appliance) and share many common services,
    including capturing release processes that IT is struggling with or spending a
    lot of time on, and automating those via vRCS and vRA.
  prefs: []
  type: TYPE_NORMAL
- en: 'As opposed to acquiring, integrating, and managing different solutions for
    provisioning and release automation, customers can benefit from a single solution.
    By integrating with artifact repositories such as JFrog Artifactory, Code Stream
    can manage and track the multiple artifact versions that are generated with new
    releases, and track their deployment across various environments. As companies
    release new app versions more often, the risk of deploying the wrong artifact
    version and breaking production increases significantly. To help customers have
    visibility into and tie all of their different repositories (Yum, NuGet, Nexus,
    and so on) into one place for troubleshooting and security auditing, it is important
    to track which artifacts have been deployed where. Code Stream can work for both
    Java/Linux and .NET/Windows shops and their respective toolsets. Certain release
    management tools (for example, Octopus, Microsoft Release Manager, and Chef Delivery)
    support only one technology or are optimized for one technology or certain toolsets.
    Code Stream does not prescribe any particular toolset, meaning it can support
    different teams using different technologies across the enterprise. In fact, it
    can be even be used for the life cycle of software that is not an application:
    scripts, workflows, blueprints, and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, [Chapter 10](5cce66c5-1e67-470e-a3f8-1ba791438615.xhtml), *Transforming
    VMware IT Operations Using ML* we will learn about how to manage different cloud
    models from a single console and about the phase-wise transformation of data center
    operations methodologies. We will also learn how to design scalable infrastructure
    to host both legacy and new cloud native apps on unified platforms using ML-based
    solutions.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*DevOps and Agile development—VMware*, at [https://www.vmware.com/content/dam/digitalmarketing/vmware/en/pdf/solutionoverview/vmware-devops-agile-development-white-paper.pdf](https://www.vmware.com/content/dam/digitalmarketing/vmware/en/pdf/solutionoverview/vmware-devops-agile-development-white-paper.pdf)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*vRealize Code Stream Management Pack for IT DevOps—VMware*, at [https://www.vmware.com/files/pdf/products/vrealize/vmware-vrealize-code-stream-management-solution-brief.pdf](https://www.vmware.com/files/pdf/products/vrealize/vmware-vrealize-code-stream-management-solution-brief.pdf)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*DevOps-Ready IT: Continuous Delivery of vRealize Automation Blueprints*, at [https://blogs.vmware.com/management/2016/05/devops-ready-it-continuous-delivery-of-vrealize-automation-blueprints.html](https://blogs.vmware.com/management/2016/05/devops-ready-it-continuous-delivery-of-vrealize-automation-blueprints.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*vRealize Code Stream | Application Release Automation*, at [https://www.vmware.com/in/products/vrealize-code-stream.html](https://www.vmware.com/in/products/vrealize-code-stream.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*vRealize Code Stream Documentation—VMware Docs*, at [https://docs.vmware.com/en/vRealize-Code-Stream/index.html](https://docs.vmware.com/en/vRealize-Code-Stream/index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*From Zero to DevOps Hero using Cloud Automation*, at [https://blogs.vmware.com/management/2018/10/devops-hero-with-cloud-automation.html](https://blogs.vmware.com/management/2018/10/devops-hero-with-cloud-automation.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*vRealize Code Stream—VMware*, at [https://code.vmware.com/web/sdk/2.2.0/vrealize-code-stream](https://code.vmware.com/web/sdk/2.2.0/vrealize-code-stream)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Overview of vSphere Integrated Containers For DevOps Administrators—VMware
    vSphere*, at [https://vmware.github.io/vic-product/assets/files/html/1.1/vic_dev_ops/overview_of_vic_devops.html](https://vmware.github.io/vic-product/assets/files/html/1.1/vic_dev_ops/overview_of_vic_devops.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
