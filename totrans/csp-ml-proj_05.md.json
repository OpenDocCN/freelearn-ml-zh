["```py\n// Categorical Variable #1: Building Type\nConsole.WriteLine(\"\\nCategorical Variable #1: Building Type\");\nvar buildingTypeDistribution = houseDF.GetColumn&lt;string&gt;(\n    \"BldgType\"\n).GroupBy&lt;string&gt;(x =&gt; x.Value).Select(x =&gt; (double)x.Value.KeyCount);\nbuildingTypeDistribution.Print();\n\nvar buildingTypeBarChart = DataBarBox.Show(\n    buildingTypeDistribution.Keys.ToArray(),\n    buildingTypeDistribution.Values.ToArray()\n);\nbuildingTypeBarChart.SetTitle(\"Building Type Distribution (Categorical)\");\n```", "```py\n// Categorical Variable #2: Lot Configuration\nConsole.WriteLine(\"\\nCategorical Variable #1: Building Type\");\nvar lotConfigDistribution = houseDF.GetColumn&lt;string&gt;(\n    \"LotConfig\"\n).GroupBy&lt;string&gt;(x =&gt; x.Value).Select(x =&gt; (double)x.Value.KeyCount);\nlotConfigDistribution.Print();\n\nvar lotConfigBarChart = DataBarBox.Show(\n    lotConfigDistribution.Keys.ToArray(),\n    lotConfigDistribution.Values.ToArray()\n);\nlotConfigBarChart.SetTitle(\"Lot Configuration Distribution (Categorical)\");\n```", "```py\n// Ordinal Categorical Variable #1: Overall material and finish of the house\nConsole.WriteLine(\"\\nOrdinal Categorical #1: Overall material and finish of the house\");\nvar overallQualDistribution = houseDF.GetColumn&lt;string&gt;(\n    \"OverallQual\"\n).GroupBy&lt;int&gt;(\n    x =&gt; Convert.ToInt32(x.Value)\n).Select(\n    x =&gt; (double)x.Value.KeyCount\n).SortByKey().Reversed;\noverallQualDistribution.Print();\n\nvar overallQualBarChart = DataBarBox.Show(\n    overallQualDistribution.Keys.Select(x =&gt; x.ToString()),\n    overallQualDistribution.Values.ToArray()\n);\noverallQualBarChart.SetTitle(\"Overall House Quality Distribution (Ordinal)\");\n```", "```py\n// Ordinal Categorical Variable #2: Exterior Quality\nConsole.WriteLine(\"\\nOrdinal Categorical #2: Exterior Quality\");\nvar exteriorQualDistribution = houseDF.GetColumn&lt;string&gt;(\n    \"ExterQual\"\n).GroupBy&lt;string&gt;(x =&gt; x.Value).Select(\n    x =&gt; (double)x.Value.KeyCount\n)[new string[] { \"Ex\", \"Gd\", \"TA\", \"Fa\" }];\nexteriorQualDistribution.Print();\n\nvar exteriorQualBarChart = DataBarBox.Show(\n    exteriorQualDistribution.Keys.Select(x =&gt; x.ToString()),\n    exteriorQualDistribution.Values.ToArray()\n);\nexteriorQualBarChart.SetTitle(\"Exterior Quality Distribution (Ordinal)\");\n```", "```py\n// Continuous Variable #1-1: First Floor Square Feet\nvar firstFloorHistogram = HistogramBox\n.Show(\n    houseDF.DropSparseRows()[\"1stFlrSF\"].ValuesAll.ToArray(),\n    title: \"First Floor Square Feet (Continuous)\"\n)\n.SetNumberOfBins(20);\n```", "```py\n// Continuous Variable #1-2: Log of First Floor Square Feet\nvar logFirstFloorHistogram = HistogramBox\n.Show(\n    houseDF.DropSparseRows()[\"1stFlrSF\"].Log().ValuesAll.ToArray(),\n    title: \"First Floor Square Feet - Log Transformed (Continuous)\"\n)\n.SetNumberOfBins(20);\n```", "```py\n// Continuous Variable #2-1: Size of garage in square feet\nvar garageHistogram = HistogramBox\n.Show(\n    houseDF.DropSparseRows()[\"GarageArea\"].ValuesAll.ToArray(),\n    title: \"Size of garage in square feet (Continuous)\"\n)\n.SetNumberOfBins(20);\n```", "```py\n// Continuous Variable #2-2: Log of Value of miscellaneous feature\nvar logGarageHistogram = HistogramBox\n.Show(\n    houseDF.DropSparseRows()[\"GarageArea\"].Log().ValuesAll.ToArray(),\n    title: \"Size of garage in square feet - Log Transformed (Continuous)\"\n)\n.SetNumberOfBins(20);\n```", "```py\n// Target Variable: Sale Price\nvar salePriceHistogram = HistogramBox\n.Show(\n    houseDF.DropSparseRows()[\"SalePrice\"].ValuesAll.ToArray(),\n    title: \"Sale Price (Continuous)\"\n)\n.SetNumberOfBins(20);\n```", "```py\n// Target Variable: Sale Price - Log Transformed\nvar logSalePriceHistogram = HistogramBox\n.Show(\n    houseDF.DropSparseRows()[\"SalePrice\"].Log().ValuesAll.ToArray(),\n    title: \"Sale Price - Log Transformed (Continuous)\"\n)\n.SetNumberOfBins(20);\n```", "```py\nstring[] categoricalVars = new string[]\n{\n    \"Alley\", \"BldgType\", \"BsmtCond\", \"BsmtExposure\", \"BsmtFinType1\", \"BsmtFinType2\",\n    \"BsmtQual\", \"CentralAir\", \"Condition1\", \"Condition2\", \"Electrical\", \"ExterCond\",\n    \"Exterior1st\", \"Exterior2nd\", \"ExterQual\", \"Fence\", \"FireplaceQu\", \"Foundation\",\n    \"Functional\", \"GarageCond\", \"GarageFinish\", \"GarageQual\", \"GarageType\",\n    \"Heating\", \"HeatingQC\", \"HouseStyle\", \"KitchenQual\", \"LandContour\", \"LandSlope\", \n    \"LotConfig\", \"LotShape\", \"MasVnrType\", \"MiscFeature\", \"MSSubClass\", \"MSZoning\", \n    \"Neighborhood\", \"PavedDrive\", \"PoolQC\", \"RoofMatl\", \"RoofStyle\", \n    \"SaleCondition\", \"SaleType\", \"Street\", \"Utilities\"\n};\n```", "```py\nprivate static Frame&lt;int, string&gt; CreateCategories(Series&lt;int, string&gt; rows, string originalColName)\n{\n\n    var categoriesByRows = rows.GetAllValues().Select((x, i) =&gt;\n    {\n        // Encode the categories appeared in each row with 1\n        var sb = new SeriesBuilder&lt;string, int&gt;();\n        sb.Add(String.Format(\"{0}_{1}\", originalColName, x.Value), 1);\n\n        return KeyValue.Create(i, sb.Series);\n    });\n\n    // Create a data frame from the rows we just created\n    // And encode missing values with 0\n    var categoriesDF = Frame.FromRows(categoriesByRows).FillMissing(0);\n\n    return categoriesDF;\n}\n```", "```py\nvar featuresDF = Frame.CreateEmpty&lt;int, string&gt;();\n\nforeach(string col in houseDF.ColumnKeys)\n{\n    if (categoricalVars.Contains(col))\n    {\n        var categoryDF = CreateCategories(houseDF.GetColumn&lt;string&gt;(col), col);\n\n        foreach (string newCol in categoryDF.ColumnKeys)\n        {\n            featuresDF.AddColumn(newCol, categoryDF.GetColumn&lt;int&gt;(newCol));\n        }\n    }\n    else if (col.Equals(\"SalePrice\"))\n    {\n        featuresDF.AddColumn(col, houseDF[col]);\n        featuresDF.AddColumn(\"Log\"+col, houseDF[col].Log());\n    }\n    else\n    {\n        featuresDF.AddColumn(col, houseDF[col].Select((x, i) =&gt; x.Value.Equals(\"NA\")? 0.0: (double) x.Value));\n    }\n}\nfeaturesDF(in line 1), and start adding in features one by one. For those categorical variables for which we are going to create dummy variables, we are calling the encoding method, CreateCategories, that we wrote previously and then adding the newly created dummy variable columns to the featuresDF data frame (in lines 5-12).  For the SalePrice variable, which is the target variable for this project, we are applying log transformation and adding it to the featuresDF data frame (in lines 13-17). Lastly, we append all the other continuous variables, after replacing the NA values with 0s, to the featuresDF data frame (in lines 18-20).\n```", "```py\nstring outputPath = Path.Combine(dataDirPath, \"features.csv\");\nConsole.WriteLine(\"Writing features DF to {0}\", outputPath);\nfeaturesDF.SaveCsv(outputPath);\n```", "```py\n// Split the sample set into train and test sets\ndouble trainProportion = 0.8;\n\nint[] shuffledIndexes = featuresDF.RowKeys.ToArray();\nshuffledIndexes.Shuffle();\n\nint trainSetIndexMax = (int)(featuresDF.RowCount * trainProportion);\nint[] trainIndexes = shuffledIndexes.Where(i =&gt; i &lt; trainSetIndexMax).ToArray();\nint[] testIndexes = shuffledIndexes.Where(i =&gt; i &gt;= trainSetIndexMax).ToArray();\n\nvar trainSet = featuresDF.Where(x =&gt; trainIndexes.Contains(x.Key));\nvar testSet = featuresDF.Where(x =&gt; testIndexes.Contains(x.Key));\n\nConsole.WriteLine(\"\\nTrain Set Shape: ({0}, {1})\", trainSet.RowCount, trainSet.ColumnCount);\nConsole.WriteLine(\"Test Set Shape: ({0}, {1})\", testSet.RowCount, testSet.ColumnCount);\nfeaturesDF data frame that we created in the previous feature engineering and encoding step into train and test sets.\n```", "```py\nstring targetVar = \"LogSalePrice\";\nstring[] features = featuresDF.ColumnKeys.Where(\n    x =&gt; !x.Equals(\"Id\") && !x.Equals(targetVar) && !x.Equals(\"SalePrice\")\n).ToArray();\n\ndouble[][] trainX = BuildJaggedArray(\n    trainSet.Columns[features].ToArray2D&lt;double&gt;(),\n    trainSet.RowCount,\n    features.Length\n);\ndouble[][] testX = BuildJaggedArray(\n    testSet.Columns[features].ToArray2D&lt;double&gt;(),\n    testSet.RowCount,\n    features.Length\n);\n\ndouble[] trainY = trainSet[targetVar].ValuesAll.ToArray();\ndouble[] testY = testSet[targetVar].ValuesAll.ToArray();\n```", "```py\nConsole.WriteLine(\"\\n**** Linear Regression Model ****\");\n// OLS learning algorithm\nvar ols = new OrdinaryLeastSquares()\n{\n    UseIntercept = true,\n    IsRobust = true\n};\n\n// Fit a linear regression model\nMultipleLinearRegression regFit = ols.Learn(\n    trainX,\n    trainY\n);\n\n// in-sample predictions\ndouble[] regInSamplePreds = regFit.Transform(trainX);\n// out-of-sample predictions\ndouble[] regOutSamplePreds = regFit.Transform(testX);\n```", "```py\nConsole.WriteLine(\"\\n**** Linear Support Vector Machine ****\");\n// Linear SVM Learning Algorithm\nvar teacher = new LinearRegressionNewtonMethod()\n{\n    Epsilon = 0.5,\n    Tolerance = 1e-5,\n    UseComplexityHeuristic = true\n};\n\n// Train SVM\nvar svm = teacher.Learn(trainX, trainY);\n\n// in-sample predictions\ndouble[] linSVMInSamplePreds = svm.Score(trainX);\n// out-of-sample predictions\ndouble[] linSVMOutSamplePreds = svm.Score(testX);\n```", "```py\nConsole.WriteLine(\"\\n**** Support Vector Machine with a Polynomial Kernel ****\");\n// SVM with Polynomial Kernel\nvar polySVMLearner = new FanChenLinSupportVectorRegression&lt;Polynomial&gt;()\n{\n    Epsilon = 0.1,\n    Tolerance = 1e-5,\n    UseKernelEstimation = true,\n    UseComplexityHeuristic = true,\n    Kernel = new Polynomial(3)\n};\n\n// Train SVM with Polynomial Kernel\nvar polySvm = polySVMLearner.Learn(trainX, trainY);\n\n// in-sample predictions\ndouble[] polySVMInSamplePreds = polySvm.Score(trainX);\n// out-of-sample predictions\ndouble[] polySVMOutSamplePreds = polySvm.Score(testX);\n```", "```py\nConsole.WriteLine(\"\\n**** Support Vector Machine with a Gaussian Kernel ****\");\n// SVM with Gaussian Kernel\nvar gaussianSVMLearner = new FanChenLinSupportVectorRegression&lt;Gaussian&gt;()\n{\n    Epsilon = 0.1,\n    Tolerance = 1e-5,\n    Complexity = 1e-4,\n    UseKernelEstimation = true,\n    Kernel = new Gaussian()\n};\n\n// Train SVM with Gaussian Kernel\nvar gaussianSvm = gaussianSVMLearner.Learn(trainX, trainY);\n\n// in-sample predictions\ndouble[] guassianSVMInSamplePreds = gaussianSvm.Score(trainX);\n// out-of-sample predictions\ndouble[] guassianSVMOutSamplePreds = gaussianSvm.Score(testX);\n```", "```py\nprivate static void ValidateModelResults(string modelName, double[] regInSamplePreds, double[] regOutSamplePreds, double[][] trainX, double[] trainY, double[][] testX, double[] testY)\n{\n    // RMSE for in-sample \n    double regInSampleRMSE = Math.Sqrt(new SquareLoss(trainX).Loss(regInSamplePreds));\n    // RMSE for out-sample \n    double regOutSampleRMSE = Math.Sqrt(new SquareLoss(testX).Loss(regOutSamplePreds));\n\n    Console.WriteLine(\"RMSE: {0:0.0000} (Train) vs. {1:0.0000} (Test)\", regInSampleRMSE, regOutSampleRMSE);\n\n    // R^2 for in-sample \n    double regInSampleR2 = new RSquaredLoss(trainX[0].Length, trainX).Loss(regInSamplePreds);\n    // R^2 for out-sample \n    double regOutSampleR2 = new RSquaredLoss(testX[0].Length, testX).Loss(regOutSamplePreds);\n\n    Console.WriteLine(\"R^2: {0:0.0000} (Train) vs. {1:0.0000} (Test)\", regInSampleR2, regOutSampleR2);\n\n    // Scatter Plot of expected and actual\n    var scatterplot = ScatterplotBox.Show(\n        String.Format(\"Actual vs. Prediction ({0})\", modelName), testY, regOutSamplePreds\n    );\n\n}\n```", "```py\nValidateModelResults(\"Linear Regression\", regInSamplePreds, regOutSamplePreds, trainX, trainY, testX, testY);\nValidateModelResults(\"Linear SVM\", linSVMInSamplePreds, linSVMOutSamplePreds, trainX, trainY, testX, testY);\nValidateModelResults(\"Polynomial SVM\", polySVMInSamplePreds, polySVMOutSamplePreds, trainX, trainY, testX, testY);\nValidateModelResults(\"Guassian SVM\", guassianSVMInSamplePreds, guassianSVMOutSamplePreds, trainX, trainY, testX, testY);\nValidateModelResults method. When you run this code, you will see the following output on your console:\n```"]