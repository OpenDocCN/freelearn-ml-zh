["```py\nimport (\n \"fmt\"\n \"github.com/kniren/gota/dataframe\"\n \"github.com/kniren/gota/series\"\n \"io/ioutil\"\n \"bytes\"\n \"math/rand\"\n)\n\nconst path = \"../datasets/iris/iris.csv\"\n\nb, err := ioutil.ReadFile(path)\nif err != nil {\n    fmt.Println(\"Error!\", err)\n}\ndf := dataframe.ReadCSV(bytes.NewReader(b))\ndf.SetNames(\"petal length\", \"petal width\", \"sepal length\", \"sepal width\", \"species\")\n```", "```py\nfeatures, classification := DataFrameToXYs(df, \"species\")\n```", "```py\nimport (\n    \"gonum.org/v1/plot\"\n    \"gonum.org/v1/plot/plotter\"\n    \"gonum.org/v1/plot/plotutil\"\n    \"gonum.org/v1/plot/vg\"\n    \"github.com/cdipaolo/goml/cluster\"\n    \"github.com/cdipaolo/goml/base\"\n    \"bufio\"\n    \"strconv\"\n)\n\nmodel := cluster.NewKMeans(3, 30, features)\n\nif err := model.Learn(); err != nil {\n    panic(err)\n}\n```", "```py\nfunc PredictionsToScatterData(features [][]float64, model base.Model, featureForXAxis, featureForYAxis int) (map[int]plotter.XYs) {\n    ret := make(map[int]plotter.XYs)\n    if features == nil {\n        panic(\"No features to plot\")\n    }\n\n    for i := range features {\n        var pt struct{X, Y float64}\n        pt.X = features[i][featureForXAxis]\n        pt.Y = features[i][featureForYAxis]\n        p, _ := model.Predict(features[i])\n        ret[int(p[0])] = append(ret[int(p[0])], pt)\n    }\n    return ret\n}\n\nscatterData := PredictionsToScatterData(features, model, 2, 3)\n```", "```py\nfunc PredictionsToScatterData(features [][]float64, model base.Model, featureForXAxis, featureForYAxis int) (map[int]plotter.XYs) {\n    ret := make(map[int]plotter.XYs)\n    if features == nil {\n        panic(\"No features to plot\")\n    }\n\n    for i := range features {\n        var pt struct{X, Y float64}\n        pt.X = features[i][featureForXAxis]\n        pt.Y = features[i][featureForYAxis]\n        p, _ := model.Predict(features[i])\n        ret[int(p[0])] = append(ret[int(p[0])], pt)\n    }\n    return ret\n}\n\nscatterData := PredictionsToScatterData(features, model, 2, 3)\n```", "```py\ndf = Standardise(df, \"petal length\")\ndf = Standardise(df, \"petal width\")\ndf = Standardise(df, \"sepal length\")\ndf = Standardise(df, \"sepal width\")\nlabels := df.Col(\"species\").Float()\ndf = DropColumn(df, \"species\")\n```", "```py\nimport (\n    \"github.com/gonum/matrix/mat64\"\n)\n\n// DataFrameToMatrix converts the given dataframe to a gonum matrix\nfunc DataFrameToMatrix(df dataframe.DataFrame) mat64.Matrix {\n    var x []float64 //slice to hold matrix entries in row-major order\n\n    for i := 0; i < df.Nrow(); i++ {\n        for j := 0; j < df.Ncol(); j ++ {\n            x = append(x, df.Elem(i,j).Float())\n        } \n    }\n    return mat64.NewDense(df.Nrow(), df.Ncol(), x)\n}\n\nfeatures := DataFrameToMatrix(df)\n```", "```py\nmodel := stat.PC{}\nif ok := model.PrincipalComponents(features, nil); !ok {\n  fmt.Println(\"Error!\")\n}\nvariances := model.Vars(nil)\ncomponents := model.Vectors(nil)\n```", "```py\ntotal_variance := 0.0\nfor i := range variances {\n  total_variance += variances[i]\n}\n\nfor i := range variances {\n  fmt.Printf(\"Component %d: %5.3f\\n\", i+1, variances[i]/total_variance)\n}\n```", "```py\ntransform := mat64.NewDense(df.Nrow(), 4, nil)\ntransform.Mul(features, components)\n\nfunc PCAToScatterData(m mat64.Matrix, labels []float64) map[int]plotter.XYs {\n    ret := make(map[int]plotter.XYs)\n    nrows, _ := m.Dims()\n    for i := 0; i < nrows; i++ {\n        var pt struct{X, Y float64}\n        pt.X = m.At(i, 0)\n        pt.Y = m.At(i, 1)\n        ret[int(labels[i])] = append(ret[int(labels[i])], pt)\n    }\n    return ret\n} \n\nscatterData := PCAToScatterData(transform, labels)\n```"]