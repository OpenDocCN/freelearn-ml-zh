["```py\n<uses-permission \n        android:name=\"android.permission.CAMERA\"/>\n<uses-permission\n        android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\"/>\n        <uses-permission\n        android:name=\"android.permission.READ_EXTERNAL_STORAGE\"/>\n```", "```py\n<activity\n    android:name=\".LensActivity\"\n    android:label=\"@string/title_activity_lens\"\n    android:theme=\"@style/AppTheme\"  >\n    <intent-filter>\n        <action android:name=\"android.intent.action.MAIN\" />\n\n        <category android:name=\"android.intent.category.LAUNCHER\" />\n    </intent-filter>\n</activity>\n```", "```py\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<ScrollView \n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\" >\n    <LinearLayout android:orientation=\"vertical\" android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\">\n\n        <ImageView\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"0dp\"\n            android:layout_weight=\"0.5\"\n            android:id=\"@+id/ivImage\" />\n        <LinearLayout\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:orientation=\"horizontal\">\n            <Button\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"wrap_content\"\n                android:layout_weight=\"0.5\"\n                android:id=\"@+id/bClickImage\"\n                android:text=\"Click image\"/>\n            <Button\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"wrap_content\"\n                android:layout_weight=\"0.5\"\n                android:id=\"@+id/bLoadImage\"\n                android:text=\"Load image\"/>\n        </LinearLayout>\n\n    </LinearLayout>\n</ScrollView>\n```", "```py\nivImage = (ImageView)findViewById(R.id.ivImage);\nButton bClickImage, bLoadImage;\n\nbClickImage = (Button)findViewById(R.id.bClickImage);\nbLoadImage = (Button)findViewById(R.id.bLoadImage);\n\nbClickImage.setOnClickListener(new View.OnClickListener() {\n    @Override\n    public void onClick(View v) {\n        Intent intent = new \n        Intent(MediaStore.ACTION_IMAGE_CAPTURE);\n        errorMsg = null;\n        File imagesFolder = new File(FILE_LOCATION);\n        imagesFolder.mkdirs();\n        File image = new File(imagesFolder, \"image_10.jpg\");\n        fileUri = Uri.fromFile(image);\n        Log.d(\"LensActivity\", \"File URI = \" + fileUri.toString());\n        intent.putExtra(MediaStore.EXTRA_OUTPUT, fileUri); \n\n        // start the image capture Intent\n        startActivityForResult(intent, CLICK_PHOTO);\n    }\n});        \nbLoadImage.setOnClickListener(new View.OnClickListener() {\n    @Override\n    public void onClick(View v) {\n        Intent intent = new Intent();\n        intent.setType(\"image/*\");\n        intent.setAction(Intent.ACTION_GET_CONTENT);\n        intent.addCategory(Intent.CATEGORY_OPENABLE);\n        errorMsg = null;\n        startActivityForResult(intent, LOAD_PHOTO);\n    }\n});\n```", "```py\n@Override\nprotected void onActivityResult(int requestCode, int \n  resultCode, Intent imageReturnedIntent) {\n    super.onActivityResult(requestCode, resultCode, \n      imageReturnedIntent);\n\n    Log.d(\"LensActivity\", requestCode + \" \" + CLICK_PHOTO + \" \n      \" + resultCode + \" \" + RESULT_OK);\n\n    switch(requestCode) {\n        case CLICK_PHOTO:\n            if(resultCode == RESULT_OK){\n                try {\n                    Log.d(\"LensActivity\", fileUri.toString());\n                    final InputStream imageStream = \n                      getContentResolver().\n                      openInputStream(fileUri);\n                    final Bitmap selectedImage = \n                      BitmapFactory.decodeStream(imageStream);\n                    srcOrig = new Mat(selectedImage.\n                      getHeight(), selectedImage.\n                      getWidth(), CvType.CV_8UC4);\n                    src = new Mat();\n                    Utils.bitmapToMat(selectedImage, srcOrig);\n\n                    scaleFactor = calcScaleFactor(\n                      srcOrig.rows(), srcOrig.cols());\n\n                    Imgproc.resize(srcOrig, src, new \n                      Size(srcOrig.rows()/scaleFactor, \n                      srcOrig.cols()/scaleFactor));\n                    getPage();\n                } catch (FileNotFoundException e) {\n                    e.printStackTrace();\n                }\n            }\n            break;\n        case LOAD_PHOTO:\n            if(resultCode == RESULT_OK){\n                try {\n                    InputStream stream = getContentResolver().\n                      openInputStream(\n                      imageReturnedIntent.getData());\n                    final Bitmap selectedImage = \n                      BitmapFactory.decodeStream(stream);\n                    stream.close();\n                    ivImage.setImageBitmap(selectedImage);\n                    srcOrig = new Mat(selectedImage.\n                      getHeight(), selectedImage.\n                      getWidth(), CvType.CV_8UC4);\n                    Imgproc.cvtColor(srcOrig, srcOrig, \n                      Imgproc.COLOR_BGR2RGB);\n                    Utils.bitmapToMat(selectedImage, srcOrig);\n                    scaleFactor = calcScaleFactor(\n                      srcOrig.rows(), srcOrig.cols());\n                    src = new Mat();\n                    Imgproc.resize(srcOrig, src, new \n                      Size(srcOrig.rows()/scaleFactor, \n                      srcOrig.cols()/scaleFactor));\n                    Imgproc.GaussianBlur(src, src, \n                      new Size(5,5), 1);\n                    getPage();\n                } catch (FileNotFoundException e) {\n                    e.printStackTrace();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n            break;\n    }\n}\nprivate static int calcScaleFactor(int rows, int cols){\n    int idealRow, idealCol;\n    if(rows<cols){\n        idealRow = 240;\n        idealCol = 320;\n    } else {\n        idealCol = 240;\n        idealRow = 320;\n    }\n    int val = Math.min(rows / idealRow, cols / idealCol);\n    if(val<=0){\n        return 1;\n    } else {\n        return val;\n    }\n}\n```", "```py\nMat samples = new Mat(src.rows() * src.cols(), 3, CvType.CV_32F);\nfor( int y = 0; y < src.rows(); y++ ) {\n    for( int x = 0; x < src.cols(); x++ ) {\n        for( int z = 0; z < 3; z++) {\n            samples.put(x + y*src.cols(), z, src.get(y,x)[z]);\n        }\n    }\n}\n```", "```py\nint clusterCount = 2;\nMat labels = new Mat();\nint attempts = 5;\nMat centers = new Mat();\n\nCore.kmeans(samples, clusterCount, labels, new \n  TermCriteria(TermCriteria.MAX_ITER | \n  TermCriteria.EPS, 10000, 0.0001), attempts, \n  Core.KMEANS_PP_CENTERS, centers);\n```", "```py\ndouble dstCenter0 = calcWhiteDist(centers.get(0, \n  0)[0], centers.get(0, 1)[0], centers.get(0, 2)[0]);\ndouble dstCenter1 = calcWhiteDist(centers.get(1, \n  0)[0], centers.get(1, 1)[0], centers.get(1, 2)[0]);\nint paperCluster = (dstCenter0 < dstCenter1)?0:1;\n\nstatic double calcWhiteDist(double r, double g, double b){\n    return Math.sqrt(Math.pow(255 - r, 2) + \n      Math.pow(255 - g, 2) + Math.pow(255 - b, 2));\n}\n```", "```py\nMat srcRes = new Mat( src.size(), src.type() );\nMat srcGray = new Mat();\n```", "```py\nfor( int y = 0; y < src.rows(); y++ ) {\n    for( int x = 0; x < src.cols(); x++ )\n    {\n        int cluster_idx = (int)labels.get(x + y*src.cols(),0)[0];\n        if(cluster_idx != paperCluster){\n            srcRes.put(y,x, 0, 0, 0, 255);\n        } else {\n            srcRes.put(y,x, 255, 255, 255, 255);\n        }\n    }\n}\n```", "```py\nImgproc.cvtColor(src, srcGray, Imgproc.COLOR_BGR2GRAY);\nImgproc.Canny(srcGray, srcGray, 50, 150);\nList<MatOfPoint> contours = new ArrayList<MatOfPoint>();\nMat hierarchy = new Mat();\n\nImgproc.findContours(srcGray, contours, hierarchy, \n  Imgproc.RETR_TREE, Imgproc.CHAIN_APPROX_SIMPLE);\n```", "```py\nint index = 0;\ndouble maxim = Imgproc.contourArea(contours.get(0));\n\nfor (int contourIdx = 1; contourIdx < contours.size(); \n  contourIdx++) {\n    double temp;\n    temp=Imgproc.contourArea(contours.get(contourIdx));\n    if(maxim<temp)\n    {\n        maxim=temp;\n        index=contourIdx;\n    }\n}\nMat drawing = Mat.zeros(srcRes.size(), CvType.CV_8UC1);\nImgproc.drawContours(drawing, contours, index, new Scalar(255), \n  1);\n```", "```py\nMat lines = new Mat();\nImgproc.HoughLinesP(drawing, lines, 1, Math.PI/180, 70, 30, 10);\n\nArrayList<Point> corners = new ArrayList<Point>();\nfor (int i = 0; i < lines.cols(); i++)\n{\n    for (int j = i+1; j < lines.cols(); j++) {\n        double[] line1 = lines.get(0, i);\n        double[] line2 = lines.get(0, j);\n\n        Point pt = findIntersection(line1, line2);\n        Log.d(\"com.packtpub.chapter9\", pt.x+\" \"+pt.y);\n        if (pt.x >= 0 && pt.y >= 0 && pt.x <= \n          drawing.cols() && pt.y <= drawing.rows()){\n            if(!exists(corners, pt)){\n                corners.add(pt);\n            }\n        }\n    }\n}\n\nstatic Point findIntersection(double[] line1, double[] line2) {\n    double start_x1 = line1[0], start_y1 = line1[1], \n      end_x1 = line1[2], end_y1 = line1[3], start_x2 = \n      line2[0], start_y2 = line2[1], end_x2 = line2[2], \n      end_y2 = line2[3];\n    double denominator = ((start_x1 - end_x1) * (start_y2 - \n      end_y2)) - ((start_y1 - end_y1) * (start_x2 - end_x2));\n\n    if (denominator!=0)\n    {\n        Point pt = new Point();\n        pt.x = ((start_x1 * end_y1 - start_y1 * end_x1) * \n          (start_x2 - end_x2) - (start_x1 - end_x1) * \n          (start_x2 * end_y2 - start_y2 * end_x2)) / \n          denominator;\n        pt.y = ((start_x1 * end_y1 - start_y1 * end_x1) * \n          (start_y2 - end_y2) - (start_y1 - end_y1) * \n          (start_x2 * end_y2 - start_y2 * end_x2)) / \n          denominator;\n        return pt;\n    }\n    else\n        return new Point(-1, -1);\n}\n```", "```py\nstatic boolean exists(ArrayList<Point> corners, Point pt){\n    for(int i=0; i<corners.size(); i++){\n        if(Math.sqrt(Math.pow(corners.get(i).x-pt.x, \n          2)+Math.pow(corners.get(i).y-pt.y, 2)) < 10){\n            return true;\n        }\n    }\n    return false;\n}\n```", "```py\nif(corners.size() != 4){\n    errorMsg =  \"Cannot detect perfect corners\";\n    return null;\n}\n```", "```py\nstatic void sortCorners(ArrayList<Point> corners)\n{\n    ArrayList<Point> top, bottom;\n\n    top = new ArrayList<Point>();\n    bottom = new ArrayList<Point>();\n\n    Point center = new Point();\n\n    for(int i=0; i<corners.size(); i++){\n        center.x += corners.get(i).x/corners.size();\n        center.y += corners.get(i).y/corners.size();\n    }\n\n    for (int i = 0; i < corners.size(); i++)\n    {\n        if (corners.get(i).y < center.y)\n            top.add(corners.get(i));\n        else\n            bottom.add(corners.get(i));\n    }\n    corners.clear();\n\n    if (top.size() == 2 && bottom.size() == 2){\n        Point top_left = top.get(0).x > top.get(1).x ? \n          top.get(1) : top.get(0);\n        Point top_right = top.get(0).x > top.get(1).x ? \n          top.get(0) : top.get(1);\n        Point bottom_left = bottom.get(0).x > bottom.get(1).x \n          ? bottom.get(1) : bottom.get(0);\n        Point bottom_right = bottom.get(0).x > bottom.get(1).x \n          ? bottom.get(0) : bottom.get(1);\n\n        top_left.x *= scaleFactor;\n        top_left.y *= scaleFactor;\n\n        top_right.x *= scaleFactor;\n        top_right.y *= scaleFactor;\n\n        bottom_left.x *= scaleFactor;\n        bottom_left.y *= scaleFactor;\n\n        bottom_right.x *= scaleFactor;\n        bottom_right.y *= scaleFactor;\n\n        corners.add(top_left);\n        corners.add(top_right);\n        corners.add(bottom_right);\n        corners.add(bottom_left);\n    }\n}\n```", "```py\ndouble top = Math.sqrt(Math.pow(corners.get(0).x - corners.get(1).x, 2) + Math.pow(corners.get(0).y - corners.get(1).y, 2));\n\ndouble right = Math.sqrt(Math.pow(corners.get(1).x - corners.get(2).x, 2) + Math.pow(corners.get(1).y - corners.get(2).y, 2));\n\ndouble bottom = Math.sqrt(Math.pow(corners.get(2).x - corners.get(3).x, 2) + Math.pow(corners.get(2).y - corners.get(3).y, 2));\n\ndouble left = Math.sqrt(Math.pow(corners.get(3).x - corners.get(1).x, 2) + Math.pow(corners.get(3).y - corners.get(1).y, 2));\nMat quad = Mat.zeros(new Size(Math.max(top, bottom), Math.max(left, right)), CvType.CV_8UC3);\n```", "```py\nArrayList<Point> result_pts = new ArrayList<Point>();\nresult_pts.add(new Point(0, 0));\nresult_pts.add(new Point(quad.cols(), 0));\nresult_pts.add(new Point(quad.cols(), quad.rows()));\nresult_pts.add(new Point(0, quad.rows()));\n```", "```py\nMat cornerPts = Converters.vector_Point2f_to_Mat(corners);\nMat resultPts = Converters.vector_Point2f_to_Mat(result_pts);\n\nMat transformation = Imgproc.getPerspectiveTransform(cornerPts, \n  resultPts);\nImgproc.warpPerspective(srcOrig, quad, transformation,\n  quad.size());\nImgproc.cvtColor(quad, quad, Imgproc.COLOR_BGR2RGBA);\nBitmap bitmap = Bitmap.createBitmap(quad.cols(), quad.rows(),\n  Bitmap.Config.ARGB_8888);\nUtils.matToBitmap(quad, bitmap);\n\nreturn bitmap;\n```", "```py\nif(bitmap!=null) {\n    ivImage.setImageBitmap(bitmap);\n} else if (errorMsg != null){\n    Toast.makeText(getApplicationContext(), \n      errorMsg, Toast.LENGTH_SHORT).show();\n}\n```"]