["```py\n$ pip install library-name\n```", "```py\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\ndf = pd.read_csv(\"../../datasets/dataset_wisc_sd.csv\")\nX = df.drop(columns = [\"id\", \"diagnosis\"])\ny = df.diagnosis.values\nX_train, X_test, y_train, y_test = train_test_split(X, y)\n```", "```py\nimport pandas as pd\nimport numpy as np\ndf = pd.read_csv(\"../../datasets/dataset_wisc_sd.csv\")\ndf.shape\n```", "```py\ndf[[\"id\", \"diagnosis\", \"radius_mean\", \"texture_mean\", \"concave points_worst\"]].head()\n```", "```py\ndf[[\"id\", \"diagnosis\", \"radius_mean\", \"texture_mean\", \"perimeter_mean\", \"area_mean\", \"concave points_worst\"]].describe()\n```", "```py\ndf.dtypes\n```", "```py\ndf['concave points_worst'] = df['concave points_worst'].astype(float)\n```", "```py\ndf[df['concave points_worst'].str.contains(r\"\\\\n\")]\n```", "```py\ndf[\"concave points_worst\"].iloc[146]\n```", "```py\ndf = df.replace(r'\\\\n','', regex=True)\n```", "```py\ndf[\"concave points_worst\"].iloc[146]\n```", "```py\ndf.isna().values.sum()\n```", "```py\ndf = df.dropna()\n```", "```py\ndf['diagnosis'].value_counts()\n```", "```py\nsns.countplot(df['diagnosis'])\n```", "```py\nsns.pairplot(df[[\"diagnosis\", \"radius_mean\", \"concave points_mean\", \"texture_mean\"]], hue = 'diagnosis')\n```", "```py\ndfm = df[df[\"diagnosis\"] == \"M\"]\nQ1 = dfm['radius_mean'].quantile(0.25)\nQ3 = dfm['radius_mean'].quantile(0.75)\nIQR = Q3 - Q1\n```", "```py\nsns.boxplot(x='diagnosis', y='radius_mean', data=df)\n```", "```py\ndf = df.query('(@Q1 - 1.5 * @IQR) <= radius_mean <= (@Q3 + 1.5 * @IQR)')\n```", "```py\nf, ax=plt.subplots( figsize = (20,15))\nsns.heatmap(df.corr(), annot= True, fmt = \".1f\", ax=ax)\nplt.xticks(fontsize=18)\nplt.yticks(fontsize=18)\nplt.title('Breast Cancer Correlation Map', fontsize=18)\nplt.show()\n```", "```py\ncorr_matrix = df.corr().abs()\nupper = corr_matrix.where(np.triu(np.ones(corr_matrix.shape), k=1).astype(np.bool))\nto_drop = [column for column in upper.columns if any(upper[column] > 0.90)]\n```", "```py\ndf.drop(to_drop, axis=1, inplace=True)\n```", "```py\n    X = df.drop(columns = [\"id\", \"diagnosis\"])\n    y = df.diagnosis.values\n    ```", "```py\n    from sklearn.preprocessing import StandardScaler\n    scaler = StandardScaler()\n    X_scaled = pd.DataFrame(scaler.fit_transform(X), columns = X.columns)\n    ```", "```py\n    from sklearn.model_selection import train_test_split\n    X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, random_state=40)\n    ```", "```py\n       from sklearn.naive_bayes import GaussianNB\n       from sklearn.metrics import accuracy_score\n    ```", "```py\n       gnb_clf = GaussianNB()\n    ```", "```py\n       gnb_clf.fit(X_train, y_train)\n    ```", "```py\n    gnb_pred = gnb_clf.predict(X_test)\n       print(accuracy_score(gnb_pred, y_test))\n      0.95035\n    ```", "```py\n    from sklearn.metrics import classification_report\n    print(classification_report(gnb_pred, y_test))\n    ```", "```py\nimport pickle\npickle.dump(gnb_clf, open(\"../../models/gnb_clf.pickle\", 'wb'))\n```", "```py\nloaded_gnb_clf = pickle.load(open(\"../../models/gnb_clf.pickle\", 'rb'))\nloaded_gnb_clf.score(X_test, y_test)\n```"]