["```py\n    from azureml.core import Workspace, Dataset, Datastore\n    from azureml.core import Experiment, Environment, Model\n    from azureml.core.compute import ComputeTarget, AksCompute\n    ```", "```py\n    from azureml.core.model import InferenceConfig\n    from azureml.core.webservice import AciWebservice\n    from azureml.core.webservice import AksWebservice\n    from azureml.train.automl.run import AutoMLRun\n    ```", "```py\n    import pandas as pd\n    import numpy as np\n    import random as r\n    import requests\n    import json\n    import os\n    ```", "```py\n    ws = Workspace.from_config()\n    ```", "```py\n    datastore = Datastore.get_default(ws)\n    my_datastore_name = 'workspaceblobstore'\n    my_datastore = Datastore.get(ws, my_datastore_name)\n    ```", "```py\n    compute_name = 'compute-cluster'\n    compute_target = ComputeTarget(ws, compute_name)\n    ```", "```py\n    environment = Environment.get(ws, 'AzureML-AutoML')\n    ```", "```py\n    model = Model(ws, 'Diabetes-AllData-Regression-AutoML')\n    ```", "```py\n    experiment = Experiment(ws, 'Diabetes-Sample-Regression') \n    runID = 'AutoML_your_run_ID' \n    ```", "```py\n    run = AutoMLRun(experiment, runID)\n    ```", "```py\n    best_run, fitted_model = run.get_output()\n    ```", "```py\n    os.makedirs('Real_Time_Scripts', exist_ok=True)\n    ```", "```py\n    script_path =\\\n    'Real_Time_Scripts/Diabetes_Inference.py'\n    best_run.download_file('outputs/scoring_file_v_1_0_0.py', script_path)\n    ```", "```py\n    aci_service_name = 'diabetes-scoring-aci'\n    ```", "```py\n    inference_config =\\\n    InferenceConfig(entry_script=script_path,\\\n    environment = environment)\n    ```", "```py\n    aci_config =\\\n    AciWebservice.deploy_configuration(\\\n    cpu_cores = 1, memory_gb = 1,\\\n    tags = {'Project': 'Diabetes'},\\\n    description = 'Diabetes Real-Time ACI Deployment')\n    ```", "```py\n    aci_service =\\\n    Model.deploy(ws, aci_service_name,\\\n    [model], inference_config, aci_config,overwrite=True)\\\n    aci_service.wait_for_deployment(True)\n    ```", "```py\n    AGE_range = np.arange(19,79,1)\n    SEX_range = np.arange(1,2,1)\n    BMI_range = np.arange(18.0,42.2,0.1)\n    BP_range = np.arange(62, 133, 1)\n    S1_range = np.arange(97, 301, 1)\n    S2_range = np.arange(41.6, 242.4, 0.1)\n    S3_range = np.arange(22, 99, 1)\n    S4_range = np.arange(2, 9.09, 0.01)\n    S5_range = np.arange(3.258, 6.107, 0.001)\n    S6_range = np.arange(58, 124, 1)\n    ```", "```py\n    DiabetesList = []\n    columns =\\\n    ['AGE', 'SEX', 'BMI', 'BP', 'S1', 'S2', 'S3', 'S4', 'S5', 'S6']\n    DiabetesDF = pd.DataFrame(columns=columns)\n    ```", "```py\n    for i in range(0,5):\n        values = [r.choice(AGE_range),\\\n    r.choice(SEX_range),r.choice(BMI_range),\\\n    r.choice(BP_range), r.choice(S1_range),\\\n    r.choice(S2_range), r.choice(S3_range),\\\n    r.choice(S4_range), r.choice(S5_range),\\\n    r.choice(S6_range)]\n        DiabetesDict = pd.DataFrame(dict(zip(columns, values)), index=[0])\n        DiabetesList.append(DiabetesDict)\n    DiabetesDF = DiabetesDF.append(DiabetesList,True)\n    ```", "```py\n    Dataset.Tabular.register_pandas_dataframe(\\\n    DiabetesDF, datastore, 'Diabetes Scoring')\n    ```", "```py\n    test = '{\"data\":' +\\\n    DiabetesDF.to_json(orient='records') + '}'\n    ```", "```py\n    Test\n    ```", "```py\n    aci_url = 'your-aci-endpoint-url'\n    headers = {'Content-Type': 'application/json'}\n    ```", "```py\n    response =\\\n    requests.post(aci_url, test, headers=headers)\n    print(resp.text)\n    ```", "```py\n    aks_cluster_name = 'aks-code-cluster'\n    vm_type = 'Standard_DS3_v2'\n    node_count = 3\n    AKS_location = 'northcentralus'\n    ```", "```py\n    prov_config =\\\n    AksCompute.provisioning_configuration(vm_size =\\\n    vm_type, agent_count = node_count, location =\\\n    AKS_location)\n    ```", "```py\n    aks_target =\\\n    ComputeTarget.create(workspace = ws, name =\\\n    aks_cluster_name, provisioning_configuration =\\\n    prov_config)\n    aks_target.wait_for_completion(show_output = True)\n    ```", "```py\n    aks_cluster = AksCompute(ws, 'aks-code-cluster')\n    ```", "```py\n    aks_service_name = 'diabetes-scoring-aks' \n    ```", "```py\n    aks_config =\\\n    AksWebservice.deploy_configuration(cpu_cores = 1,\\\n                      memory_gb = 1, tags = {'Project':\\\n                      'Diabetes'}, description =\\\n                      'Diabetes Real-Time ACI Deployment')\n    ```", "```py\n    aks_service =\\\n    Model.deploy(ws, aks_service_name, [model],\\\n    inference_config, aks_config, aks_cluster,\\\n    overwrite=True)\n    aks_service.wait_for_deployment(show_output = True)\n    ```", "```py\n    aks_url = 'your-aks-endpoint-url'\n    key = 'your-aks-key'\n    headers = {'Content-Type': 'application/json'}\n    headers['Authorization'] = f'Bearer {key}'\n    ```", "```py\n    resp = requests.post(aks_url, test, headers=headers)\n    print(resp.text)\n    ```"]