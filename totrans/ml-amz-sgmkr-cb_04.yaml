- en: '*Chapter 3*: Understanding and Defining Business Problems'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter covers topics that are the most critical for success and yet are
    not discussed in detail in data science programs or books. Although the topic
    of understanding and defining business problems is mentioned very briefly as something
    that should be done, it is very rare that the discussion will go into how to actually
    do it properly. In this chapter, we will go into specific tools and methods that
    can be used to gain an understanding of the system under consideration and determine
    the problem that needs to be solved.
  prefs: []
  type: TYPE_NORMAL
- en: This section is independent of DataRobot, as DataRobot cannot help you with
    this part of the process. This is something that a data analyst, a business analyst,
    or a data scientist has to do. Correctly defining a business problem is hard to
    do—it is not automatable, and it is also not done properly most of the time. If
    you gain this skill, you will become invaluable. This is a key area where there
    will always be a need for experienced data scientists (or whatever they are called
    in the future).
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this chapter, you will have learned about some of the core concepts
    and methods you need to know in order to ensure that you are solving the right
    problems. The rest of the book will explain how to solve those problems in the
    right way.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the chapter, we''re going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the system context
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the *why* and the *how*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting to the root of the business problem
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining the **machine learning** (**ML**) problem
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Determining predictions, actions, and consequences for Responsible **artificial
    intelligence** (**AI**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Operationalizing and generating value
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the system context
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All problems arise within the context of a system. A system could be a single
    cell of an organism, a global population, or the entire economy. In the same way,
    all solutions need to fit into a system. A technological solution (for example,
    an AI solution) will typically require changes to processes, people, skills, other
    IT systems, or even the business model for it to be effective. For an organization,
    the system could be its entire supply chain, competitors, and customers. Given
    that a system's definition can be very broad, it is generally advisable that you
    imagine a system to be broader than the problems you are considering. You want
    all the components or agents that your problem touches to be part of the system
    context. Defining the system boundary is part art and part science, and it is
    an iterative process. Given that you will be looking at the system from a broader
    perspective, this also means that the same system context will be valid for multiple
    ML projects or use cases. The understanding you gain here will pay dividends across
    many projects.
  prefs: []
  type: TYPE_NORMAL
- en: Data scientists or analysts who might have worked in an organization or industry
    would have intuitively learned many of the systemic aspects of the problem. They
    might feel that they do not need to look into this further as they already understand
    key issues. While that might be true, it is also true that people develop blind
    spots and start to overlook key missing pieces or carry implicit assumptions that
    are mostly correct but sometimes wrong. Using structured methods to capture systemic
    understanding helps overcome these problems and also ensures that everyone is
    working from a common understanding. These issues are typically ones leading to
    problems or delays in projects downstream. Let's look at how we build this understanding
    by creating a context diagram.
  prefs: []
  type: TYPE_NORMAL
- en: 'A context diagram is a high-level view of your system, showing key players
    and their interactions, as illustrated here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.1 – Context diagram'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17159_03_01.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.1 – Context diagram
  prefs: []
  type: TYPE_NORMAL
- en: The specific diagramming convention is not that important; what is more important
    is that you understand and document the components and understand how they interact.
    There are many diagramming conventions out there, so feel free to use the one
    you like. Make sure to capture three to five important instances of each topic
    in the diagram. The arrows need not be one-way.
  prefs: []
  type: TYPE_NORMAL
- en: 'As you look at this simple diagram, you will agree that we should know all
    of these things. As you try to build this diagram, you might be shocked to learn
    that finding and capturing this information is not that straightforward. Most
    people in an organization will have some notion of these things but might not
    be able to precisely specify the most important customers or **key performance
    indicators** (**KPIs**), and so on. In most organizations, it might take some
    time and discussion to put this together. Most of the components in the diagram
    are easy to understand but some are a bit confusing, so it''s worth discussing
    them a little bit, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Key objectives**: Key objectives are measurable metrics that let you determine
    whether you are achieving your goals in a timely fashion. These typically take
    the form of financial performance, market share, customer satisfaction, reputation,
    quality levels, and compliance. It is important to have precise and measurable
    definitions and alignment with the goals of the organization. These represent
    true value to an organization, and it is important to understand how your projects
    and models impact these.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**External drivers/risks**: These are external factors or drivers that impact
    the key objectives but are not under your control. Notice that we are not discussing
    specific events, but changes in value of factors that might be considered events—for
    example, the factor might be **gross domestic product** (**GDP**) change. It is
    not in our control, and a value of -20% might indicate a financial crash. So,
    our driver in this case is GDP change as opposed to financial crash.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Key decision levers**: These are also drivers that impact key objectives,
    but they are in our control. For example, the number of employees is a factor
    that is in our control (as we can decide how many to hire) and it will have an
    impact on outcomes. Other examples could be how much to invest in new technology
    or in marketing, and so on. These could be strategic decisions or choices, such
    as creating a new distribution channel, bundling products, and so on. Regardless
    of type, the important thing to remember is to make sure that the idea is captured
    in a precise way—for example, if a new distribution channel is a driver, you should
    know what the five actual choices are.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note of caution
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Please do not get trapped in philosophical debates. Quickly create the first
    iteration of your diagram and refine it in the future, as needed. It is OK to
    move forward with the first draft, as your analysis might inform and change the
    current thinking.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: As you may have guessed by now, the reason for highlighting these three items
    is that historic data about them will be critical for any data science project.
    You will also agree that data about these factors is critical for operational
    as well as strategic decisions, yet you might find that this data might not be
    easily available or might have quality issues. In addition, pay special attention
    to key knowledge stores. These will be the databases, data warehouses, data lakes,
    or filesystems that contain data for your organization. We will revisit these
    items again in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we understand the context, we want to understand how our system operates
    and why it behaves a certain way. Both of these aspects are critical to understanding
    the system. In the next section, we will describe how to create that understanding.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the why and the how
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The key to understanding a system''s function and its behavior lies in the
    following aspects:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Process**: How do objects and information flow through the system''s processes?'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Interaction**: How do different entities or components of the system interact
    with each other?'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**State**: How does the state of an entity evolve over time?'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Causal**: What are the causal relationships?'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each of these aspects is represented via diagrams. There are many diagramming
    conventions for process modeling, causal modeling, and interaction diagrams. These
    conventions are used differently in different domains. You can follow any of the
    conventions that you like or are already familiar with. In this book, we will
    follow certain conventions that are amenable to computational modeling. What that
    means is that these diagrams can be combined with data and turned into models
    that can be used for analysis. This will become important in the later stages
    of our project. In-depth details of how to create these diagrams and turn them
    into computational models are beyond the scope of this book, but if you are interested
    you can seek out other sources to learn about these techniques. Even if you do
    not create computational models, these diagrams will provide useful insights that
    you will be able to use in your ML projects. It is possible that you have people
    in your organization that build—or have built—such diagrams. You should seek those
    people out and elicit their help in building these diagrams. Let's look at each
    of these aspects in more detail.
  prefs: []
  type: TYPE_NORMAL
- en: Process diagrams
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In an organization''s operation, there are several functions that have well-defined
    processes. Objects, people, or information flow through these processes, as illustrated
    in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.2 – Process diagram'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17159_03_02.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.2 – Process diagram
  prefs: []
  type: TYPE_NORMAL
- en: Based on the system context, you already know the most important processes in
    an organization. You can start building diagrams for these key processes—or at
    the very least, the one that is relevant to your project. It is important to build
    end-to-end process flows—for example, the entire customer journey, or the entire
    development process for a product. It is also important to understand the process
    from a customer's viewpoint (gray boxes) and not just internal processes (white
    boxes). Make sure to capture failure points or rework paths, or where a process
    might end abruptly instead of normal completion. As entities flow through these
    processes, decisions or computations are made that could be candidate ML problems.
    Regardless of the project you are starting from, it is a good idea to identify
    other potential opportunities along the way. It may turn out that looking at the
    process differently or building a different ML model could provide larger benefit
    or might preempt a need for the current project. Whether or not that turns out
    to be the case, it is important to capture this information. By the way, did you
    notice in the preceding process diagram that the customer is not receiving a reject
    message? As you can imagine, this is an important part of the customer experience
    that is being left out. I am sure that error will be caught at some point, but
    making the process explicit increases the odds of catching it sooner and taking
    it into account as you are building your models.
  prefs: []
  type: TYPE_NORMAL
- en: Besides building the diagram, it is important to capture data about the process.
    You will frequently run into situations where someone has already built a process
    diagram but did not capture any data. If you are reading this book, then I do
    not need to tell you how important collecting that data is for accurately understanding
    the process. Typical information to be captured is counts and types of objects
    flowing through each step, time taken at each step, labor hours and resources
    required at each step, probability of taking a specific path, quality metrics,
    and so on. If such information is not being captured for key processes, then it
    is important to start collecting this information as soon as possible. This information
    could be critical for building a business case for your project, serving as useful
    features in the model, and helping identify problems that might be otherwise hidden.
  prefs: []
  type: TYPE_NORMAL
- en: It is important to note again that you do not want to get stuck in terminology
    debates, and instead quickly create a diagram that is sufficient to help you understand
    what happens in the process, as opposed to a very detailed view with every little
    nuance in it. It is OK to revisit this if a need arises to get into more details
    on some specific aspect of the process.
  prefs: []
  type: TYPE_NORMAL
- en: Actual processes are typically a little more complex than what we show in *Figure
    3.2* but not by much, and it is not uncommon to uncover things that are not known
    to many people outside the specific department where these tasks are done. In
    my experience, it is also not uncommon to find that no single person understands
    the entire process. The exercise can be valuable in itself by highlighting key
    problems but it is especially valuable to the data science team building models
    to automate some part of this process, yet I am surprised to see how many times
    data science teams build models without understanding the process.
  prefs: []
  type: TYPE_NORMAL
- en: Interaction diagrams
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are many interactions happening in a system that do not follow a fixed
    process. These interactions can happen in different orders and need to be kept
    flexible, and are best understood via interaction diagrams. Those of you with
    software development backgrounds are likely familiar with such diagrams that show
    interactions among software components or objects. In our case, we are interested
    in understanding interactions between key players in a system, as illustrated
    in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.3 – Interaction diagram'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17159_03_03.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.3 – Interaction diagram
  prefs: []
  type: TYPE_NORMAL
- en: The diagram shows a marketplace where several competitors are selling their
    products. Customers come to this marketplace to purchase the products. The competitors
    spend money to advertise their products on various media channels, and set their
    prices. The consumers are influenced by the advertising, pricing, and word of
    mouth from other consumers. At any given time, many of these interactions are
    taking place, creating a complex and dynamic environment. If you are building
    a pricing model you have to take all of this into account, or your model will
    show great statistical fit to data but will prove ineffective during operation.
  prefs: []
  type: TYPE_NORMAL
- en: Note that key players can be people, organizations, bots, marketplaces, fraudsters,
    and so on. The idea behind building this and other diagrams is to codify and make
    explicit what you know. This enables everyone to share a common view of the system
    and question assumptions or point out missing information. It is also important
    to make sure that you treat these diagrams as hypotheses that need to be tested
    with data. You have to continually ask whether the data supports what we are saying
    in these diagrams. If not, then maybe your assumptions need to be refined, or
    perhaps you have missing data or other data-quality problems. Perhaps the data
    collection is biased. I am sure you have heard stories about how biased data was
    used to make predictions that turned out to be totally wrong. Building a diagram
    is not a guarantee that you will catch biased data, but it does improve your odds
    of catching it.
  prefs: []
  type: TYPE_NORMAL
- en: State diagrams
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A state diagram captures the evolution of state of some important entity or
    actor in a system. Typical candidates are customers and products. As with other
    diagrams, you build these diagrams for only the important or critical actors in
    a system.
  prefs: []
  type: TYPE_NORMAL
- en: 'An example state diagram can be seen here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.4 – State diagram'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17159_03_04.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.4 – State diagram
  prefs: []
  type: TYPE_NORMAL
- en: State diagrams are very similar in concept to **Markov chains** (this concept
    represents the probability of transitioning a system from one state to another
    state in such a way that the probability is fixed and not dependent on any previous
    history), except in a state diagram you do not have to assume that history does
    not matter. A state diagram is built for a specific agent. *Figure 3.4* shows
    a state diagram of a person progressing through various states over time. The
    arrows represent transitions from one state to another, and the person stays in
    a given state until they transition to the next state. The transition is typically
    assumed to be instantaneous. You can also think of the transitions in terms of
    transition probabilities (in which case, it starts resembling a Markov chain).
    The diagrams can be hierarchical in the sense that a state can be decomposed into
    sub-states, and those sub-states can be interconnected via transitions.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to building a diagram, you want to understand what causes a transition
    to take place. Is it deterministic or is it random? You also want to collect data
    about how often and when these transitions take place as this data is very useful
    for further analysis, as well as for building ML models. Transitions of one actor
    might cause a transition in another actor's state, thus state diagrams are also
    connected to interaction diagrams. Each of the transitions is a potential candidate
    for an ML model, where you can use data to predict when a transition (and which
    one) might fire. As you can imagine, building these diagrams will lead to the
    identification of opportunities that might otherwise be missed.
  prefs: []
  type: TYPE_NORMAL
- en: Using these diagrams, you now have an understanding of how a system functions.
    We are now ready to look at what determines a system's behavior.
  prefs: []
  type: TYPE_NORMAL
- en: Causal diagrams
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Causal diagrams intend to capture our understanding of cause-and-effect relationships
    present in a system. This understanding may or may not be correct. In fact, you
    might never be able to prove causation. Philosophical debates aside, you can greatly
    improve your understanding by using the methods outlined in this section, combined
    with data.
  prefs: []
  type: TYPE_NORMAL
- en: 'An example causal diagram can be seen here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.5 – Causal diagram'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17159_03_05.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.5 – Causal diagram
  prefs: []
  type: TYPE_NORMAL
- en: The preceding diagram shows the relationships in a housing market (this is just
    an example—it doesn't show all the causal influences). It says that as interest
    rates go up, home sales decline. Home sales are also influenced by demand and
    prices. As prices go up, the rising prices can increase demand as more people
    want to buy homes to make money, but the price itself is a deterrent. You can
    see that there are opposing effects and feedback loops present in this simple
    diagram. No wonder the dynamics confound us, and this frequently leads to the
    system going haywire. Everyone thinks they understand how the housing market works,
    but real understanding is difficult to achieve in the presence of complex dynamics.
    Similar dynamics are at play in many business situations. It is easy to build
    an ML model to predict home prices, but it is much harder to understand the overall
    dynamics. This lack of understanding can lead to a situation where you are using
    excellent ML models to make bad decisions, hence building such models is critical
    for understanding the true nature of the problem you are trying to solve. Such
    diagrams are also useful for understanding and treating confounding variables
    and counterfactual analysis [Pearl].
  prefs: []
  type: TYPE_NORMAL
- en: 'There is one more representation of causal models that comes from the discipline
    of system dynamics. This representation combines some ideas from the other diagrams
    with causal diagrams to create a view that can be very insightful and can be easily
    turned into a dynamic simulation model. System dynamics is a vast discipline in
    itself, and there are many good books and papers on the topic [Sterman]. Here,
    I will only introduce the notion and what it looks like, and how it can be useful.
    Here is an example system dynamics (also known as stock and flow) diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.6 – System dynamics (stock and flow) diagram'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17159_03_06.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.6 – System dynamics (stock and flow) diagram
  prefs: []
  type: TYPE_NORMAL
- en: This diagram captures ideas from a state diagram, a process diagram, and a causal
    diagram into a composite view that can be very instructive. Imagine the journey
    of a product as it changes state, going from a *raw product* to a *shipped product*.
    Each box in this case represents the quantity of a product in a specific state—for
    example, the **Assembled Product** box represents all products that have been
    assembled and are now waiting to become *finished products*. This happens at a
    rate called the *finish rate*. The finish rate is dependent on how many assemblers
    are available to perform the work. You will also notice that some assembled products
    turn out to be defective. These products flow into the **Defective Product** box
    at a rate called the *defect rate*. These then have to be repaired by repairers.
    Because of defects, the shipping target is not met and there is a shortfall. This
    shortfall increases pressure on the employees, which increases burnout. The burnout
    in turn reduces the number of assemblers (they quit or get sick). Since the number
    of assemblers is reduced, this slows down the finish rate. This in turn increases
    the pressure and more people are shifted to become repairers, as repairs can be
    done faster. This leaves no one working as preventers and causes the vicious cycle
    to continue, with the process becoming more and more backlogged.
  prefs: []
  type: TYPE_NORMAL
- en: This dynamic plays out in many organizations and they wonder why they are always
    under pressure. Once the diagram is laid out, you can see the problem is that
    they are fixing symptoms as opposed to the root problem of defects. In this simple
    diagram it is easy to see, but in more complex situations you can run simulations
    of these diagrams to find the problem points. The diagram also helps to clarify
    the relationship between the processes, decisions, and business objectives. These
    diagrams can be simulated to understand the business impacts of decisions, as
    well as the impacts of deploying ML models. This is a great way to show the value
    of your efforts in a way that most people can easily understand.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's come back to ML. If this analysis is not done, then it is most likely
    that defect repair will get flagged as a problem, and it is likely you will be
    building a model to predict how many defects will be created or predict how many
    items will be shipped. You will build a great model, but that will not solve the
    problem. The key problem is to find which factors are causing the defects and
    how the defects can be reduced. This will require the manufacturing team to work
    closely with the data science team to find a solution. Again, the key point is
    that unless someone does this analysis, the data science team is likely to be
    solving the wrong problem. You might think that this doesn't happen often, but
    I contend that this happens a lot more than you might think because the true problem
    often stays hidden for a long time.
  prefs: []
  type: TYPE_NORMAL
- en: In general, it is best to treat each causal relationship you have drawn in these
    diagrams as a hypothesis. The diagram then represents a collection of hypotheses.
    There are statistical and simulation methods that can be used to validate these
    hypotheses. For this, you will need to start collecting data or start discovering
    where that data is stored. Now that we have learned about these diagrams, let's
    look at how we get to the root of the problem.
  prefs: []
  type: TYPE_NORMAL
- en: Getting to the root of the business problem
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Some problems are easy to solve, while others prove to be much harder. One of
    the reasons this happens is that when a problem's symptoms appear somewhere else
    and after some delay, then it is very difficult to know where the problem really
    is. By definition, the symptoms are clearly visible—they are explicit and you
    can easily collect data about them. The underlying problem, on the other hand,
    is happening in some other department or building and is not visible because it
    is not causing immediate pain. Most likely, no data is being collected about the
    root problem, or it might be too hard to collect that data. Given the nature of
    ML, it is almost a given that all the data you are getting is about symptoms.
    If you are lucky, you might get some data about the root problem as well (although
    you will not know it).
  prefs: []
  type: TYPE_NORMAL
- en: 'One of the ways to get started is by using an old method called *five whys*,
    which basically involves asking the question *Why?* five times to get to the root
    cause. Many times, there might be multiple causes at each level. So, in practical
    terms, many people use another diagram that is called a *fishbone diagram* to
    capture this information, as illustrated here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.7 – Fishbone diagram'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17159_03_07.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.7 – Fishbone diagram
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding fishbone example diagram, we are trying to understand why we
    have a software defect problem. As you ask *why* questions and capture the causes,
    you begin to add potential causes. You continue this process until you feel that
    you have captured the essence of the problem. As you can tell, this is partly
    a causal diagram and can be used as a starting point for building a causal model
    for your system while maintaining focus on a specific problem. Data can then be
    collected to confirm or reject the hypotheses. As you can see, this fishbone diagram
    will inform the system dynamics diagram we saw in *Figure 3.6*. The key point
    of the exercise is to understand the root cause and work on fixing this. I hope
    you are beginning to see that accurately predicting something is not always the
    same as fixing the real problem, and you have to be a bit careful about setting
    up your ML problem for your project to be successful. Also, notice that there
    might be multiple causes leading up to a problem and you might have to address
    multiple issues in order to see significant mitigation of the problem. On the
    other hand, addressing only one aspect (say, employee burnout) without understanding
    the full picture could lead you to conclude that burnout is not a problem. It
    is not uncommon in organizations to have reached wrong conclusions that then get
    incorporated into the myths of the organization—"*we already tried that, and it
    does not work.*"
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have identified the business problem that needs to be tackled, let's
    look at how we turn it into an ML problem.
  prefs: []
  type: TYPE_NORMAL
- en: Defining the ML problem
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we get into the details of ML, it is important to note that not all
    problems are appropriate to be solved with ML. For a problem to be a good candidate,
    it should have the following characteristics (we will focus only on **supervised
    learning** (**SL**) problems for now):'
  prefs: []
  type: TYPE_NORMAL
- en: There is a clear target or label value that would be useful if an algorithm
    can predict it. In the absence of an algorithm this value remains unknown, requires
    a person's judgment, or requires substantial effort for it to be determined. Sometimes,
    the target will not be the actual variable of interest but a critical component
    of that calculation. This part is not always obvious, but the problem analysis
    you did in previous sections of this chapter will certainly help in clarifying
    which variable makes the best target.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You have access to a large enough historical dataset that contains the values
    of the target or label you wish to predict. You will need to create a list of
    data sources that contain relevant data and start understanding the data that
    they contain.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Determine which type of SL problem is best suited to your problem (regression,
    classification, or time series). Sometimes, you can cast one type of problem into
    another type.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is typically a trade-off between accuracy, explainability, and understandability.
    It is important for you to consider what is more important for your business problem.
    In many situations, we are willing to sacrifice accuracy to improve understandability.
    This, in turn, determines which algorithms and which explanatory method you should
    select.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You will have to review your datasets and the business problem definition to
    see whether you can craft a specification such that the conditions listed previously
    are satisfied. In doing so, there are several transformations that might have
    to be performed, such as these:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Transform the target such that it is more valuable as an output or better suited
    to solve the business problem. Take the following examples:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: (a) If numeric target values are over a very large range of values or are distributed
    with a high skew, then you can try to log the target as a new target.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: (b) If the actual value is less important than a range, then you can create
    bins and use the binned values as targets.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: (c) Sometimes, a change in value or the rate of change makes for a better target.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create interaction features based on the causal diagrams. Take the following
    examples:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: (a) Intermediate variables in the causal model that are not directly observed
    but can be computed by combining various other features.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: (b) If your target is in log form, then it might make sense to create logs of
    various features.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: (c) Similarly, you might want to bin certain features if the bins have a special
    significance in the business problem.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: (d) Explore whether creating rate-of-change features would be important for
    your model.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Identify missing data that showed up in the causal diagram but is not present
    in your dataset. Depending on the importance and how easy it is to get this, you
    might want to collect it before building the model. Another choice is to get the
    data collection process started in parallel with building the model with the data
    you already have. In the latter case, you can always revisit the model in the
    next iteration when you have collected the data.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In addition, you also have to think about how you will define and assess errors.
    Which metric will be best for the problem? We covered metrics in [*Chapter 2*](B17159_02_Final_NM_ePub.xhtml#_idTextAnchor039),
    *Machine Learning Basics*, and DataRobot automatically picks an appropriate metric
    for the problem. I have found the selections to be very good most of the time,
    so it is a good idea to go with the recommendation unless you have a good reason
    not to. In addition to metrics, you need to think about whether you care more
    about errors in a specific range versus some other range—for example, maybe you
    want to be more accurate in the high-value range of a feature versus the low-value
    range. In such cases, you can consider using this numeric feature (this has to
    be a non-target feature) as a weight for computing the error metrics. You can
    find this setting under **Advanced Options** in the **Additional** tab, as illustrated
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.8 – Additional options'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17159_03_08.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.8 – Additional options
  prefs: []
  type: TYPE_NORMAL
- en: The preceding screenshot shows the options for selecting a feature to be used
    as a weighting for the predictions. Note that this has to be set at the start
    of a project. Once the model building starts, you cannot change this setting.
  prefs: []
  type: TYPE_NORMAL
- en: Once you have the ML problem defined, DataRobot comes into action to build the
    models. We will cover this in later chapters. For now, we want to discuss what
    happens when the models are built and are now able to generate predictions.
  prefs: []
  type: TYPE_NORMAL
- en: Determining predictions, actions, and consequences for Responsible AI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After the model is built and deployed in DataRobot, it might seem that our job
    is done—but not so fast. You should start analyzing what the predictions profile
    looks like and start discussing with users and stakeholders the details of actions
    to be taken. The models you have helped build are likely to introduce many changes
    in your system and will impact other people. It is therefore important to try
    to make sure that these impacts are not negative. Making sure that your models
    will not cause harm is called Responsible AI. This will build upon the work you
    did during the understanding phase through various diagrams.
  prefs: []
  type: TYPE_NORMAL
- en: Just as in previous sections we saw how a causal diagram helps you to relate
    features to a target, we can also see how the target affects other parts of the
    system. The diagram should reveal how the target impacts key objectives or outcomes;
    it should also reveal key feedback loops that will change the behavior of the
    rest of the system, as well as giving a hint of other consequences. This makes
    it relatively straightforward to understand and compute the **return on investment**
    (**ROI**) from your model. A common challenge expressed by data science teams
    is that they find it hard to express the impacts of a model. As you can now see,
    the work we put into understanding our system from a causal perspective also helps
    to determine the business impact of the model.
  prefs: []
  type: TYPE_NORMAL
- en: It is very common to see that most systems don't provide a free lunch—there
    are always trade-offs. Your actions might improve one objective but might hurt
    another. It is very important to understand these trade-offs and to ensure that
    your stakeholders understand them as well. It is very possible that even though
    the model will provide a positive ROI, it might cause performance to degrade in
    other areas, such that you might not want to go forward with it. Some of these
    consequences could be in the areas of regulatory or ethical issues. These areas
    are often overlooked, only to be discovered (painfully) at a later point in time.
    One of the key benefits of doing this analysis is to make sure you are catching
    any problems earlier.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another mechanism that is often used is to simulate the system dynamics diagrams.
    This allows you to understand the dynamic behavior of your system and can serve
    as a virtual experiment. Virtual experiments or simulations let you test out different
    strategies in a safe environment before launching your models. Not only does this
    help you avoid costly mistakes—it can often also suggest improvements or strategies
    to further optimize the benefits. The reasons many data science projects do not
    succeed are that data science teams rarely do this, typically do not have the
    skills to do this analysis, and have historically not taken this part very seriously.
    Let''s look here at a simple example of an ML model in a system:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.9 – Impact analysis'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17159_03_09.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.9 – Impact analysis
  prefs: []
  type: TYPE_NORMAL
- en: In this example, you have a price promotion model that uses some features to
    generate a promotion price. This model monitors the sales and updates the price
    accordingly. For some reason (database updates, approvals, and so on), there is
    a delay involved in updating these prices on the e-commerce site. This creates
    a lag in the sales data that is not known to the modeling team because the modeling
    team did not understand the entire flow and how much time it takes to update prices
    on the site. If you were to do an analysis of this simple diagram, you would discover
    that such feedback loops with delays produce oscillating behavior. This means
    that the pricing will always be off—sometimes higher and sometimes lower. This
    behavior is somewhat similar to what you see in most model results anyway, so
    it is entirely possible that this effect will be missed. The system will perform
    poorly even though the model itself was fine. I have kept this example very simple
    to make a point. You can imagine that if the situation were more complex, most
    people would not be able to see the problem on their own till it is too late.
  prefs: []
  type: TYPE_NORMAL
- en: On the flip side, you can also evaluate how much sales impact your model will
    make compared to the status quo. This is a great way to show ROI and the business
    value of your work. Since simulations based on these diagrams are a visual representation
    of your business, most people find it a lot easier to understand as compared to
    narratives or spreadsheets. This also helps in gaining acceptance of your ML models.
  prefs: []
  type: TYPE_NORMAL
- en: While DataRobot does not help with many of these aspects, it does offer mechanisms
    to determine whether your model is biased along with any protected features and
    measure the amount of bias that exists in the model. This, combined with the preceding
    analysis, can go a long way to ensure that your models are not biased and that
    the results are not being used in a way that goes against your organization's
    values. Now that we are happy with the model's expected results, we can start
    the process of deployment.
  prefs: []
  type: TYPE_NORMAL
- en: Operationalizing and generating value
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Operationalizing a model in your infrastructure can be a complicated undertaking.
    There are some aspects of deployment that are made simple by DataRobot, but there
    are other parts of deployment that are outside the scope of DataRobot and can
    be quite challenging. Let''s discuss the tasks that are part of this process,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Deploying a model as an application programming interface (API)**: One of
    the very first tasks is to deploy your model as an API so that it can serve predictions
    as needed. You will have to decide whether this needs to be a batch or real-time
    operation. DataRobot automates much of the task of setting this up, and you can
    have an API serving predictions in minutes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Integration and testing with business systems**: Having an API is only part
    of the story—you will now need to integrate this API into your business systems.
    Sometimes, you can serve up predictions to users via standalone Excel files or
    web pages, but for many use cases integration is required. This can sometimes
    take time and effort and can slow things down. Another potential path that many
    organizations are beginning to use is **robotic process automation** (**RPA**).
    DataRobot offers integrations with several RPA tools that can speed up the integration
    process if your use case is amenable to an RPA implementation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Building an end use interface**: This is not needed if your use case calls
    for complete automation, but most use cases will have some level of user involvement.
    With integration out of the way, you will still require some way for the user
    to interact with the prediction and make appropriate decisions. You will need
    to consider how users will adjust to a new way of doing business and how to make
    this experience as frictionless as possible. In fact, in many use cases, the predictions
    are specifically set up to reduce friction in an existing process.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**User training**: Make sure you are planning for and ready to offer training
    to users whose workflow is being impacted by the new models. Creating training
    and offering this training is a great way to increase adoption and acceptance
    of the model. Many times, this is thought of after the fact and can cause delays
    or reduce acceptance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**User acceptance and change management**: This is typically an ongoing process.
    It is generally a good idea to involve users and stakeholders from the start.
    If users feel that their voice is heard, this will improve the chances of acceptance.
    Users can also help avoid potential problems that the data science team will not
    catch on their own. Frequent communication about why you are doing this project,
    how it impacts the users, and how their work will change (hopefully for the better)
    are all good strategies to improve your odds of success. Building the diagrams
    listed previously in conjunction with users is a great way to start this dialog
    and is ultimately what adds value to the business. As you can see, many things
    have to happen before and after a model is built to realize value. It is no wonder
    that projects often do not succeed in adding value.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Model monitoring and maintenance**: Once the model is operational, you will
    need to set up mechanisms to monitor the prediction service and the performance.
    Over time, the performance tends to degrade, or you might want to improve the
    performance of the model. This requires the models to be updated or retrained
    with new data. Luckily, DataRobot makes these tasks very easy as it provides mechanisms
    to set up the monitoring and retraining of the models.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we covered some tools and methods to help you gain an understanding
    of your system and the business problem you are trying to solve. Some of these
    methods will be new or unfamiliar to even experienced data scientists, but it
    is important to take the time to internalize them and practice them on your projects.
    Some of this will feel unnecessary given the time pressures. This is one of the
    reasons tools such as DataRobot are beneficial, as they reduce the time you need
    to spend on repetitive tasks and allow you to focus on things that tools cannot
    do.
  prefs: []
  type: TYPE_NORMAL
- en: Hopefully, I have convinced you that the combination of data science teams focusing
    more on understanding the problem and using automation tools for some of the model
    building and tuning tasks provides the best value to an organization. A lot of
    the work done here will also come in handy toward the end of the project when
    we are getting ready to operationalize the models into the organization. Specifically,
    in this chapter, we have learned how to understand the broader system context,
    how the system operates, and why it behaves a certain way. We also saw how to
    get to the root problem that a business needs to solve and turn the business problem
    into a form that can be solved with ML. We then learned how to make sure that
    the solution solves the right problem and does not create unintended side effects.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we learned how to make sure that the solution is accepted by the stakeholders
    and gets operationalized, leading to the realization of business value.
  prefs: []
  type: TYPE_NORMAL
- en: We are now ready to start working with some example datasets and begin using
    DataRobot to help solve the business problem we have uncovered and the ML problem
    we have defined.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Causality: Models, Reasoning and Inference, Second Edition*, Judea Pearl,
    Cambridge University Press.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Business Dynamics: Systems Thinking and Modeling for a Complex World*, John
    D. Sterman, Irwin/McGraw-Hill.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
