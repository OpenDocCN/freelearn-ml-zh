["```py\n0,1,1,0\n0,1,1,0\n0,1,1,0\n2,0,0,0\n2,0,0,0\n2,0,0,0\n2,0,0,0\n2,0,0,0\n2,0,0,0\n2,0,0,0\n2,0,0,0\n2,0,0,0\n2,0,0,0\n2,0,0,0\n1,1,0,1\n1,1,0,1\n1,1,0,1\n1,1,0,1\n```", "```py\n0,1,1,0\n0,1,1,0\n2,0,0,0\n2,0,0,0\n2,0,0,0\n2,0,0,0\n2,0,0,0\n2,0,0,0\n1,1,0,1\n```", "```py\nnamespace chapter05.Common\n{\n    public class Constants\n    {\n        public const string MODEL_FILENAME = \"chapter5.mdl\";\n\n        public const string SAMPLE_DATA = \"sampledata.csv\";\n\n        public const string TEST_DATA = \"testdata.csv\";\n    }\n}\n```", "```py\nprotected const string FEATURES = \"Features\";\n```", "```py\nnamespace chapter05.Enums\n{\n    public enum FileTypes\n    {\n        Executable = 0,\n        Document = 1,\n        Script = 2\n    }\n}\n```", "```py\npublic class FileData\n{\n    private const float TRUE = 1.0f;\n    private const float FALSE = 0.0f;\n```", "```py\npublic FileData(Span<byte> data, string fileName = null)\n{\n    // Used for training purposes only\n    if (!string.IsNullOrEmpty(fileName))\n    {\n        if (fileName.Contains(\"ps1\"))\n        {\n            Label = (float) FileTypes.Script;\n        } else if (fileName.Contains(\"exe\"))\n        {\n            Label = (float) FileTypes.Executable;\n        } else if (fileName.Contains(\"doc\"))\n        {\n            Label = (float) FileTypes.Document;\n        }\n    }\n\n    IsBinary = HasBinaryContent(data) ? TRUE : FALSE;\n\n    IsMZHeader = HasHeaderBytes(data.Slice(0, 2), \"MZ\") ? TRUE : FALSE;\n\n    IsPKHeader = HasHeaderBytes(data.Slice(0, 2), \"PK\") ? TRUE : FALSE;\n}\n```", "```py\n/// <summary>\n/// Used for mapping cluster ids to results only\n/// </summary>\n/// <param name=\"fileType\"></param>\npublic FileData(FileTypes fileType)\n{\n    Label = (float)fileType;\n\n    switch (fileType)\n    {\n        case FileTypes.Document:\n            IsBinary = TRUE;\n            IsMZHeader = FALSE;\n            IsPKHeader = TRUE;\n            break;\n        case FileTypes.Executable:\n            IsBinary = TRUE;\n            IsMZHeader = TRUE;\n            IsPKHeader = FALSE;\n            break;\n        case FileTypes.Script:\n            IsBinary = FALSE;\n            IsMZHeader = FALSE;\n            IsPKHeader = FALSE;\n            break;\n    }\n}\n```", "```py\nprivate static bool HasBinaryContent(Span<byte> fileContent) =>\n            System.Text.Encoding.UTF8.GetString(fileContent.ToArray()).Any(a => char.IsControl(a) && a != '\\r' && a != '\\n');\n\nprivate static bool HasHeaderBytes(Span<byte> data, string match) => System.Text.Encoding.UTF8.GetString(data) == match;\n```", "```py\n[ColumnName(\"Label\")]\npublic float Label { get; set; }\n\npublic float IsBinary { get; set; }\n\npublic float IsMZHeader { get; set; }\n\npublic float IsPKHeader { get; set; }\n```", "```py\npublic override string ToString() => $\"{Label},{IsBinary},{IsMZHeader},{IsPKHeader}\";\n```", "```py\nusing Microsoft.ML.Data;\n\nnamespace chapter05.ML.Objects\n{\n    public class FileTypePrediction\n    {\n        [ColumnName(\"PredictedLabel\")]\n        public uint PredictedClusterId;\n\n        [ColumnName(\"Score\")]\n        public float[] Distances;\n    }\n}\n```", "```py\nprivate void ExtractFolder(string folderPath, string outputFile)\n{\n    if (!Directory.Exists(folderPath))\n    {\n        Console.WriteLine($\"{folderPath} does not exist\");\n\n        return;\n    }\n\n    var files = Directory.GetFiles(folderPath);\n\n    using (var streamWriter =\n        new StreamWriter(Path.Combine(AppContext.BaseDirectory, $\"../../../Data/{outputFile}\")))\n    {\n        foreach (var file in files)\n        {\n            var extractedData = new FileData(File.ReadAllBytes(file), file);\n\n            streamWriter.WriteLine(extractedData.ToString());\n        }\n    }\n\n    Console.WriteLine($\"Extracted {files.Length} to {outputFile}\");\n}\n```", "```py\npublic void Extract(string trainingPath, string testPath)\n{\n    ExtractFolder(trainingPath, Constants.SAMPLE_DATA);\n    ExtractFolder(testPath, Constants.TEST_DATA);\n}\n```", "```py\nprivate Dictionary<uint, FileTypes> GetClusterToMap(PredictionEngineBase<FileData, FileTypePrediction> predictionEngine)\n{\n    var map = new Dictionary<uint, FileTypes>();\n\n    var fileTypes = Enum.GetValues(typeof(FileTypes)).Cast<FileTypes>();\n\n    foreach (var fileType in fileTypes)\n    {\n        var fileData = new FileData(fileType);\n\n        var prediction = predictionEngine.Predict(fileData);\n\n        map.Add(prediction.PredictedClusterId, fileType);\n    }\n\n    return map;\n}         \n```", "```py\nvar predictionEngine = MlContext.Model.CreatePredictionEngine<FileData, FileTypePrediction>(mlModel);\n\nvar fileData = new FileData(File.ReadAllBytes(inputDataFile));\n\nvar prediction = predictionEngine.Predict(fileData);\n\nvar mapping = GetClusterToMap(predictionEngine);\n```", "```py\nConsole.WriteLine(\n    $\"Based on input file: {inputDataFile}{Environment.NewLine}{Environment.NewLine}\" +\n    $\"Feature Extraction: {fileData}{Environment.NewLine}{Environment.NewLine}\" +\n    $\"The file is predicted to be a {mapping[prediction.PredictedClusterId]}{Environment.NewLine}\");\n\nConsole.WriteLine(\"Distances from all clusters:\");\n\nfor (uint x = 0; x < prediction.Distances.Length; x++) { \n    Console.WriteLine($\"{mapping[x+1]}: {prediction.Distances[x]}\");\n}\n```", "```py\nprivate IDataView GetDataView(string fileName)\n{\n    return MlContext.Data.LoadFromTextFile(path: fileName,\n        columns: new[]\n        {\n            new TextLoader.Column(nameof(FileData.Label), DataKind.Single, 0),\n            new TextLoader.Column(nameof(FileData.IsBinary), DataKind.Single, 1),\n            new TextLoader.Column(nameof(FileData.IsMZHeader), DataKind.Single, 2),\n            new TextLoader.Column(nameof(FileData.IsPKHeader), DataKind.Single, 3)\n        },\n        hasHeader: false,\n        separatorChar: ',');\n}\n```", "```py\nvar trainingDataView = GetDataView(trainingFileName);\n\nvar dataProcessPipeline = MlContext.Transforms.Concatenate(\n    FEATURES,\n    nameof(FileData.IsBinary),\n    nameof(FileData.IsMZHeader),\n    nameof(FileData.IsPKHeader));\n```", "```py\nvar trainer = MlContext.Clustering.Trainers.KMeans(featureColumnName: FEATURES, numberOfClusters: 3);\nvar trainingPipeline = dataProcessPipeline.Append(trainer);\nvar trainedModel = trainingPipeline.Fit(trainingDataView);\n\nMlContext.Model.Save(trainedModel, trainingDataView.Schema, ModelPath);\n```", "```py\nvar testingDataView = GetDataView(testingFileName);\n\nIDataView testDataView = trainedModel.Transform(testingDataView);\n\nClusteringMetrics modelMetrics = MlContext.Clustering.Evaluate(\n    data: testDataView,\n    labelColumnName: \"Label\",\n    scoreColumnName: \"Score\",\n    featureColumnName: FEATURES);\n```", "```py\nConsole.WriteLine($\"Average Distance: {modelMetrics.AverageDistance}\");\nConsole.WriteLine($\"Davies Bould Index: {modelMetrics.DaviesBouldinIndex}\");\nConsole.WriteLine($\"Normalized Mutual Information: {modelMetrics.NormalizedMutualInformation}\");\n```", "```py\nif (args.Length < 2)\n{\n    Console.WriteLine($\"Invalid arguments passed in, exiting.{Environment.NewLine}{Environment.NewLine}Usage:{Environment.NewLine}\" +\n                      $\"predict <path to input file>{Environment.NewLine}\" +\n                      $\"or {Environment.NewLine}\" +\n                      $\"train <path to training data file> <path to test data file>{Environment.NewLine}\" +\n                      $\"or {Environment.NewLine}\" + $\"extract <path to training folder> <path to test folder>{Environment.NewLine}\");\n\n    return;\n}\n```", "```py\nswitch (args[0])\n{\n    case \"extract\":\n        new FeatureExtractor().Extract(args[1], args[2]);\n        break;\n    case \"predict\":\n        new Predictor().Predict(args[1]);\n        break;\n    case \"train\":\n        new Trainer().Train(args[1], args[2]);\n        break;\n    default:\n        Console.WriteLine($\"{args[0]} is an invalid option\");\n        break;\n}\n```", "```py\nPS chapter05\\bin\\Debug\\netcoreapp3.0> .\\chapter05.exe extract ..\\..\\..\\TrainingData\\ ..\\..\\..\\TestData\\\nExtracted 80 to sampledata.csv\nExtracted 30 to testdata.csv\n```", "```py\nPS chapter05\\bin\\Debug\\netcoreapp3.0> .\\chapter05.exe train ..\\..\\..\\Data\\sampledata.csv ..\\..\\..\\Data\\testdata.csv \nAverage Distance: 0\nDavies Bould Index: 0\nNormalized Mutual Information: 1\n```", "```py\nPS chapter05\\bin\\Debug\\netcoreapp3.0> .\\chapter05.exe predict .\\chapter05.exe\nBased on input file: .\\chapter05.exe\n\nFeature Extraction: 0,1,1,0\n\nThe file is predicted to be a Executable\n\nDistances from all clusters:\nExecutable: 0\nScript: 2\nDocument: 2\n```"]