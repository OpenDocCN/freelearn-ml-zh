["```py\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom sklearn.utils import resample\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import classification_report\nfrom scipy import stats\n```", "```py\n# Load the fashion-mnist pre-shuffled train data and test data\n(x_train, y_train), (x_test, y_test) = tf.keras.datasets.fashion_mnist.load_data()\n```", "```py\n# Print training set shape \nprint(\"x_train shape:\", x_train.shape, \"y_train shape:\", y_train.shape)\n```", "```py\nnp.unique(y_train)\n```", "```py\nfig=plt.figure(figsize=(16,8))\n\n# number of columns for images in plot\ncolumns=5 \n\n# number of rows for images in plot\nrows=3\n\nfor i in range (1,columns*rows+1):\n      fig.add_subplot(rows,columns,i)\n      plt.title(\"Actual Class: {}\".\\\n              format((y_train[i])),color='r',fontsize=16)\n      plt.imshow(x_train[i])\nplt.show()\n```", "```py\naccuracy = pd.DataFrame( columns=[\"Accuracy\",\"Precision\",\"Recall\"])\npredictions = np.zeros(shape=(10000,7))\nrow_index = 0\nfor i in range(7):\n        # bootstrap sampling \n        boot_train = resample(x_train,y_train,replace=True, n_samples=40000, random_state=None)\n        model = tf.keras.Sequential([\n            tf.keras.layers.Flatten(input_shape=(28, 28)),\n            tf.keras.layers.Dense(256, activation=tf.nn.relu),\n            tf.keras.layers.Dense(128, activation=tf.nn.relu),\n            tf.keras.layers.Dense(128, activation=tf.nn.relu),\n            tf.keras.layers.Dense(128, activation=tf.nn.relu),\n            tf.keras.layers.Dense(128, activation=tf.nn.relu),\n            tf.keras.layers.Dense(128, activation=tf.nn.relu),\n            tf.keras.layers.Dense(128, activation=tf.nn.relu),\n            tf.keras.layers.Dense(128, activation=tf.nn.relu),\n            tf.keras.layers.Dense(128, activation=tf.nn.relu),\n            tf.keras.layers.Dense(128, activation=tf.nn.relu),\n            tf.keras.layers.Dense(10, activation=tf.nn.softmax)])\n\n        # compile the model\n        model.compile(loss='sparse_categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n\n        # Train the model\n        model.fit(x_train,y_train,epochs=10,batch_size=64)\n\n        # Evaluate accuracy\n        score = model.evaluate(x_test, y_test, batch_size=64)\n        accuracy.loc[row_index,\"Accuracy\"]=score[1]\n\n        # Make predictions\n        model_pred= model.predict(x_test)\n        pred_classes =model_pred.argmax(axis=-1)\n        accuracy.loc[row_index, 'Precision'] = precision_score(y_test, pred_classes, average='weighted')\n        accuracy.loc[row_index, 'Recall'] = recall_score(y_test, pred_classes,average='weighted')\n\n        # Save predictions to predictions array\n        predictions[:,i] = pred_classes\n\n        print(score)\n        row_index+=1\n\n        print(\"Iteration \" + str(i+1)+ \" Accuracy : \" + \"{0}\".format(score[1]))\n```", "```py\naccuracy\n```", "```py\n# Create dataframe using prediction of each iteration\ndf_iteration = pd.DataFrame([predictions[:,0],\\\n                           predictions[:,1],\\\n                           predictions[:,2],\\\n                           predictions[:,3],\\\n                           predictions[:,4],\\\n                           predictions[:,5],\\\n                           predictions[:,6]])\n```", "```py\ndf_iteration = df_iteration.astype('int64')\n```", "```py\n# find the mode for result\nmode = stats.mode(df_iteration)\n```", "```py\n# calculate the accuracy for test dataset\nprint(accuracy_score( y_test, mode[0].T))\n```", "```py\n# confusion matrix\ncm = confusion_matrix(y_test, mode[0].T, labels=[0, 1, 2, 3, 4, 5, 6, 7, 8])\n```", "```py\nax= plt.subplot()\n\n# annot=True to annotate cells\nsns.heatmap(cm, annot=True, ax = ax, fmt='g', cmap='Blues')\n```", "```py\naccuracy[\"Models\"]=[\"Model 1\",\\\n                   \"Model 2\",\\\n                   \"Model 3\",\\\n                   \"Model 4\",\\\n                   \"Model 5\",\\\n                   \"Model 6\",\\\n                   \"Model 7\"]\n```", "```py\naccuracy=accuracy.append(pd.DataFrame([[\\\n                                        accuracy_score(y_test,\\\n                                        mode[0].T),0,0,\\\n                                        \"Ensemble Model\"]], \\\n                                        columns=[\"Accuracy\",\\\n                                        \"Precision\",\"Recall\",\\\n                                        \"Models\"]))\n\naccuracy.index=range(accuracy.shape[0])\n\naccuracy.set_value(7, 'Precision', precision_score(y_test, mode[0].T, average='micro'))\naccuracy.set_value(7, 'Recall', recall_score(y_test, mode[0].T, average='micro'))\n```", "```py\nplt.figure(figsize=(20,8))\nplt.plot(accuracy.Models,accuracy.Accuracy)\nplt.title(\"Accuracy across all Iterations and Ensemble\")\nplt.ylabel(\"Accuracy\")\nplt.show()\n```", "```py\nplt.figure(figsize=(20,8))\nplt.plot(accuracy.Models,accuracy.Accuracy,accuracy.Models,accuracy.Precision)\nplt.title(\"Metrics across all Iterations and models\")\nplt.legend([\"Accuracy\",\"Precision\"])\nplt.show()\n```"]