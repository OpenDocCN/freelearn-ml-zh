- en: Chapter 8. Detecting Interest Points
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: Detecting corners in an image
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detecting features quickly
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detecting scale-invariant features
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detecting FAST features at multiple scales
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In computer vision, the concept of **interest points** also called **keypoints**
    or **feature points** has been largely used to solve many problems in object recognition,
    image registration, visual tracking, 3D reconstruction, and more. This concept
    relies on the idea that instead of looking at the image as a whole (that is, extracting
    global features), it could be advantageous to select some special points in the
    image and perform a local analysis on them (that is, extracting local features).
    This approach works well as long as a sufficient number of such points are detected
    in the images of interest, and these points are distinguishing and stable features,
    that can be accurately localized.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: Because they are used for analyzing image content, feature points should ideally
    be detected at the same scene or object location, no matter from which viewpoint,
    scale, or orientation the image was taken. View invariance is a very desirable
    property in image analysis and has been the object of numerous studies. As we
    will see, different detectors have different invariance properties. This chapter
    focuses on the keypoint extraction process itself. The following chapters will
    then show you how interest points can be put to work in different contexts, such
    as image matching or image geometry estimation.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: Detecting corners in an image
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When searching for interesting feature points in images, corners come out as
    an interesting solution. They are indeed local features that can be easily localized
    in an image, and in addition, they should abound in scenes of man-made objects
    (where they are produced by walls, doors, windows, tables, and so on). Corners
    are also interesting because they are two-dimensional features that can be accurately
    detected (even at sub-pixel accuracy), as they are at the junction of two edges.
    This is in contrast to points located on a uniform area or on the contour of an
    object; these ones would be difficult to repeatedly localize precisely on other
    images of the same object. The Harris feature detector is a classical approach
    to detecting corners in an image. We will explore this operator in this recipe.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The basic OpenCV function that is used to detect Harris corners is called `cv::cornerHarris`
    and is straightforward to use. You call it on an input image, and the result is
    an image of floats that gives you the corner strength at each pixel location.
    A threshold is then applied on this output image in order to obtain a set of detected
    corners. This is accomplished with the following code:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Here is the original image:![How to do it...](img/B05388_08_01.jpg)
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: 'The result is a binary map image, shown in the following screenshot, which
    is inverted for better viewing (that is, we used `cv::THRESH_BINARY_INV` instead
    of `cv::THRESH_BINARY` to get the detected corners in black):'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B05388_08_02.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
- en: From the preceding function call, we observe that this interest point detector
    requires several parameters (these will be explained in the next section) that
    might make it difficult to tune. In addition, the corner map that is obtained
    contains many clusters of corner pixels that contradict the fact that we would
    like to detect well-localized points. Therefore, we will try to improve the corner
    detection method by defining our own class to detect Harris corners.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: 'The class encapsulates the Harris parameters with their default values and
    corresponding getter and setter methods (which are not shown here):'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'To detect the Harris corners on an image, we proceed in two steps. First, the
    Harris values at each pixel are computed:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Next, the feature points are obtained, based on a specified threshold value.
    Since the range of possible values for Harris depends on the particular choices
    of its parameters, the threshold is specified as a quality level that is defined
    as a fraction of the maximal Harris value computed in the image:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This method returns a binary corner map of the detected features. The fact
    that the detection of the Harris features has been split into two methods, allows
    us to test the detection with a different threshold (until an appropriate number
    of feature points are obtained) without the need to repeat costly computations.
    It is also possible to obtain the Harris features in the form of a `std::vector`
    of `cv::Point` instances:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This class also improves the detection of the Harris corners by adding a non-maxima
    suppression step, which will be explained in the next section. The detected points
    can now be drawn on an image using the `cv::circle` function, as demonstrated
    by the following method:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Using this class, the detection of the Harris points is accomplished as follows:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This results in the following image:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B05388_08_03.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
- en: How it works...
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To define the notion of corners in images, the Harris feature detector looks
    at the average directional change in intensity in a small window around a putative
    interest point. If we consider a displacement vector, `(u,v)`, the intensity change
    can be measured by a sum of squared difference:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/B05388_08_17.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
- en: 'The summation is over a defined neighborhood around the considered pixel (the
    size of this neighborhood corresponds to the third parameter in the `cv::cornerHarris`
    function). This average intensity change can then be computed in all possible
    directions, which leads to the definition of a corner as a point for which the
    average change is high in more than one direction. From this definition, the Harris
    test is performed as follows: We first obtain the direction of the maximal average
    intensity change. Next, we check whether the average intensity change in the orthogonal
    direction is high as well. If this is the case, then we have a corner.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: 'Mathematically, this condition can be tested by using an approximation of the
    preceding formula using the Taylor expansion:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/B05388_08_18-1.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
- en: 'This is then rewritten in matrix form:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/B05388_08_19.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
- en: This matrix is a covariance matrix that characterizes the rate of intensity
    change in all directions. This definition involves the image's first derivatives
    that are often computed using the Sobel operator. This is the case with the OpenCV
    implementation, in which the fourth parameter of the function corresponds to the
    aperture used for the computation of the Sobel filters. It can be shown that the
    two eigenvalues of the covariance matrix give you the maximal average intensity
    change and the average intensity change for the orthogonal direction. Then, if
    these two eigenvalues are low, we are in a relatively homogenous region. If one
    eigenvalue is high and the other is low, we must be on an edge. Finally, if both
    eigenvalues are high, then we are at a corner location. Therefore, the condition
    for a point to be accepted as a corner is to have the smallest eigenvalue of its
    covariance matrix higher than a given threshold.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: 'The original definition of the Harris corner algorithm uses some properties
    of the eigen decomposition theory in order to avoid the cost of explicitly computing
    the eigenvalues. These properties are as follows:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: The product of the eigenvalues of a matrix is equal to its determinant
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The sum of the eigenvalues of a matrix is equal to the sum of the diagonal of
    the matrix (also known as the trace of the matrix)
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'It then follows that we can verify whether the eigenvalues of a matrix are
    high by computing the following score:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/B05388_08_20.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
- en: One can easily verify that this score will indeed be high only if both eigenvalues
    are high too. This is the score that is computed by the `cv::cornerHarris` function
    at each pixel location. The value of `k` is specified as the fifth parameter of
    the function. It could be difficult to determine what value is best for this parameter.
    However, in practice, a value in the range of `0.05` and `0.5` generally gives
    good results.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: 'To improve the result of the detection, the class described in the previous
    section adds an additional non-maxima suppression step. The goal here is to exclude
    Harris corners that are adjacent to others. Therefore, to be accepted, the Harris
    corner must not only have a score higher than the specified threshold, but it
    must also be a local maximum. This condition is tested by using a simple trick
    that consists of dilating the image of the Harris score in our `detect` method:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Since the dilation replaces each pixel value with the maximum in the defined
    neighborhood, the only points that will not be modified are the local maxima.
    This is what is verified by the following equality test:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The `localMax` matrix will therefore be true (that is, non-zero) only at local
    maxima locations. We then use it in our `getCornerMap` method to suppress all
    non-maximal features (using the `cv::bitwise` function).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Additional improvements can be made to the original Harris corner algorithm.
    This section describes another corner detector found in OpenCV, which expands
    the Harris detector to make its corners more uniformly distributed across the
    image. As we will see, this operator implements a generic interface defining the
    behavior of all feature detection operators. This interface allows easy testing
    of different interest point detectors within the same application.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: Good features to track
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: With the advent of floating-point processors, the mathematical simplification
    introduced to avoid eigenvalue decomposition has become negligible, and consequently,
    the detection of Harris corners can be made based on the explicitly computed eigenvalues.
    In principle, this modification should not significantly affect the result of
    the detection, but it avoids the use of the arbitrary `k` parameter. Note that
    two functions exist that allow you to explicitly get the eigenvalues (and eigenvectors)
    of the Harris covariance matrix; these are `cv::cornerEigenValsAndVecs` and `cv::cornerMinEigenVal`.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: 'A second modification addresses the problem of feature point clustering. Indeed,
    in spite of the introduction of the local maxima condition, interest points tend
    to be unevenly distributed across an image, showing concentrations at highly textured
    locations. A solution to this problem is to impose a minimum distance between
    two interest points. This can be achieved using the following algorithm. Starting
    from the point with the strongest Harris score (that is, with the largest minimum
    eigenvalue), only accept interest points if they are located at, at least, a given
    distance from the already accepted points. This solution is implemented in OpenCV
    by the **good-features-to-track** (**GFTT**) operator, which is thus named because
    the features it detects can be used as a good starting set in visual tracking
    applications. This operator is deployed as follows:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The first step is to create the feature detector using the appropriate static
    function (here, `cv::GFTTDetector::create`) and the initialization parameters.
    In addition to the quality-level threshold value, and the minimum tolerated distance
    between interest points, the function also uses a maximum number of points that
    can be returned (this is possible since points are accepted in the order of strength).
    Calling this function returns a OpenCV smart pointer to the detector instance.
    Once this object constructed, its `detect` method can be called. Note that the
    common interface also includes the definition of a `cv::Keypoint` class that encapsulates
    the properties of each detected feature point. For the Harris corners, only the
    position of the keypoints and its response strength is relevant. The *Detecting
    scale-invariant features* recipe of this chapter will discuss the other properties
    that can be associated with a keypoint.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: 'The preceding code produces the following result:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: '![Good features to track](img/B05388_08_04.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
- en: This approach increases the complexity of the detection, since it requires the
    interest points to be sorted by their Harris score, but it also clearly improves
    the distribution of the points across the image. Note that this function also
    includes an optional flag, that requests Harris corners to be detected using the
    classical corner score definition (using the covariance matrix determinant and
    trace).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: 'The OpenCV common interface for the feature detector defines an abstract class
    called `cv::Feature2D` that basically imposes, among others, the existence of
    a `detect` operation with the following signatures:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The second method allows interest points to be detected in a vector of images.
    The class also includes other methods such as the ones to compute feature descriptors
    (to be discussed in the next chapter) and the ones can read and write the detected
    points in a file.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The classic article that describes the Harris operator by *C. Harris* and *M.J.
    Stephens,  A combined corner and edge detector, Alvey Vision Conference*, pp.
    147-152, 1988
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The article by *J. Shi* and *C. Tomasi*, *Good features to track*, *Int. Conference
    on Computer Vision and Pattern Recognition*, pp. 593-600, 1994, introduces this
    special feature
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The article by *K. Mikolajczyk* and *C. Schmid*, *Scale and Affine invariant
    interest point detectors, International Journal of Computer Vision, vol 60*, no
    1, pp. 63-86, 2004, proposes a multi-scale and affine-invariant Harris operator
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detecting features quickly
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Harris operator proposed a formal mathematical definition for corners (or
    more generally, interest points) based on the rate of intensity changes in two
    perpendicular directions. Although this constitutes a sound definition, it requires
    the computation of the image derivatives, which is a costly operation, especially
    considering the fact that interest point detection is often just the first step
    in a more complex algorithm.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we present another feature point operator, called **FAST** (**Features
    from Accelerated Segment Test**). This one has been specifically designed to allow
    quick detection of interest points in an image, the decision to accept or not
    to accept a keypoint being based on only a few pixel comparisons.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As seen in the last section of the previous recipe, *Detecting corners in an
    image*, using the OpenCV common interface for feature point detection makes the
    deployment of any feature point detectors easy. The detector presented in this
    recipe is the FAST detector. As the name suggests, it has been designed to quickly
    detect interest points in an image:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Note that OpenCV also proposes a generic function to draw `keypoints` on an
    image:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'By specifying the chosen drawing flag, the keypoints are drawn over the input
    image, thus producing the following output result:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B05388_08_05.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
- en: An interesting option is to specify a negative value for the keypoint color.
    In this case, a different random color will be selected for each drawn circle.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As in the case with the Harris point detector, the FAST feature algorithm derives
    from the definition of what constitutes a corner. This time, this definition is
    based on the image intensity around a putative feature point. The decision to
    accept a keypoint is taken by examining a circle of pixels centered at a candidate
    point. If an arc of contiguous points of a length greater than three quarters
    of the circle perimeter in which all pixels significantly differ from the intensity
    of the center point (being all darker or all brighter) is found, then a keypoint
    is declared.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: This is a simple test that can be computed quickly. Moreover, in its original
    formulation, the algorithm uses an additional trick to further speed up the process.
    Indeed, if we first test four points separated by 90 degrees on the circle (for
    example, top, bottom, right, and left points), it can be easily shown that in
    order to satisfy the condition expressed previously, at least three of these points
    must all be brighter or darker than the central pixel.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: If this is not the case, the point can be rejected immediately, without inspecting
    additional points on the circumference. This is a very effective test, since in
    practice, most of the image points will be rejected by this simple 4-comparison
    test.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: 'In principle, the radius of the circle of examined pixels could have been a
    parameter of the method. However, it has been found that in practice, a radius
    of `3` gives you both good results and high efficiency. There are, then, `16`
    pixels that need to be considered on the circumference of the circle, shown as
    follows:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/B05388_08_06.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
- en: The four points used for the pretest are pixels **1**, **5**, **9**, and **13**,
    and the required number of contiguous darker or brighter points is **9**. This
    specific setting is often designated as the FAST-9 corner detector, and this the
    one OpenCV uses by default. You can, in fact, specify which type of FAST detector
    you want to use when you construct the detector instance; there is also a `setType`
    method. The options are `cv::FastFeatureDetector::TYPE_5_8`, `cv::FastFeatureDetector::TYPE_7_12`,
    and `cv::FastFeatureDetector::TYPE_9_16`.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: To be considered as being significantly darker or brighter, the intensity of
    a point must differ from the intensity of the central pixel by at least a given
    amount; this value corresponds to the threshold parameter specified when creating
    the detector instance. The larger this threshold is, the fewer corner points will
    be detected.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: As for Harris features, it is often better to perform non-maxima suppression
    on the corners that have been found. Therefore, a corner strength measure needs
    to be defined. Several alternative measures to this can considered, and the one
    that has been retained is the following. The strength of a corner is given by
    the sum of the absolute difference between the central pixel and the pixels on
    the identified contiguous arc. You can read the corner strength from the `response`
    attribute of the `cv::KeyPoint` instances.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: This algorithm results in very fast interest point detection and is therefore
    the feature of choice when speed is a concern. This is the case, for example,
    in real-time visual tracking or object-recognition applications where several
    points must be tracked or matched in a live video stream.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Different strategies can be used to make feature detection more suitable for
    your application.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, it is sometimes desirable to dynamically adapt the feature detection
    such to obtain a predefined number of interest points. A simple strategy to achieve
    this goal consists in using a permissive detection threshold such that a large
    number of interest points is obtained. You then simply have to extract the nth
    strongest points in the set. A standard C++ function allows you to accomplish
    this:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Here, `keypoints` is your `std::vector` of detected interest points and `numberOfPoints`
    is the desirable quantity of interest points. The last parameter in this function
    is the lambda comparator used to extract the best interest points. Note that if
    the number of detected interest points is too low (that is, lower than the seek
    quantity), this means that you should have used a lower threshold for detection.
    However, using a very permissive threshold generally increases the computational
    load; there is therefore a trade-off value that has to be identified.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: 'Another issue that often arises when detecting features, is the uneven distribution
    of the interest points over an image. Indeed, the `keypoints` tend to agglomerate
    at highly textured areas of the image. For example, here is the result obtained
    when detecting `100` interest points on our church image:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more...](img/B05388_08_07.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
- en: 'As you can see, most feature points are on the upper and bottom parts of the
    building. A common strategy used to obtain a better distribution of the interest
    points in an image consists in dividing this one into a grid of sub-images and
    perform an independent detection of each sub-image. The following code performs
    this grid adapted detection:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The key idea here is to use image ROIs in order to perform keypoint detection
    inside each sub-image of the grid. The resulting detection shows a more uniform
    keypoint distribution:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more...](img/image_08_012.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
- en: See also
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: OpenCV2 includes specialized adapted feature detection wrapper classes; see,
    for example, `cv::DynamicAdaptedFeatureDetector` or  `GridAdaptedFeatureDetector`
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The article by *E. Rosten* and *T. Drummond*, *Machine learning for high-speed
    corner detection*, *International European Conference on Computer Vision, pp.
    430-443*, 2006, describes the FAST feature algorithm and its variants in detail
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detecting scale-invariant features
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The view invariance of feature detection was presented as an important concept
    in the introduction of this chapter. While orientation invariance, which is the
    ability to detect the same points even if an image is rotated, has been relatively
    well handled by the simple feature point detectors that have been presented so
    far, the invariance to scale changes is more difficult to achieve. To address
    this problem, the concept of scale-invariant features has been introduced in computer
    vision. The idea here is to not only have a consistent detection of keypoints
    no matter at which scale an object is pictured, but to also have a scale factor
    associated with each of the detected feature points. Ideally, for the same object
    point featured at two different scales on two different images, the ratio of the
    two computed scale factors should correspond to the ratio of their respective
    scales. In recent years, several scale-invariant features have been proposed,
    and this recipe presents one of them, the **SURF** features. SURF stands for **Speeded
    Up Robust Features**, and as we will see, they are not only scale-invariant features,
    but they also offer the advantage of being computed efficiently.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The SURF feature detector is part of the `opencv_contrib` repository. To use
    it, you must then have built the OpenCV library together with these extra modules,
    as explained in [Chapter 1](ch01.html "Chapter 1. Playing with Images") , *Playing
    with Images*. In particular, we are interested here by the `cv::xfeatures2d` module
    that gives us access to the `cv::xfeatures2d::SurfFeatureDetector` class. As for
    the other detector, interest points are detected by first creating an instance
    of the detector and then calling its `detect` method:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'To draw these features, we again use the `cv::drawKeypoints` OpenCV function
    but now with the `cv::DrawMatchesFlags::DRAW_RICH_KEYPOINTS` flag so that we can
    visualize the associated scale factor:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The resulting image with the detected features is then as follows:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_08_013.jpg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
- en: Here, the size of the keypoint circles resulting from the use of the `cv::DrawMatchesFlags::DRAW_RICH_KEYPOINTS`
    flag is proportional to the computed scale of each feature. The SURF algorithm
    also associates an orientation with each feature to make them invariant to rotations.
    This orientation is illustrated by a radial line inside each drawn circle.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: 'If we take another picture of the same object but at a different scale, the
    feature-detection result is as follows:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_08_014.jpg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
- en: By carefully observing the detected keypoints on the two images, it can be seen
    that the change in the size of corresponding circles is often proportional to
    the change in scale. As an example, consider the two windows on the right part
    of the church; in both images, a SURF feature has been detected at that location,
    and the two corresponding circles (of different sizes) contain the same visual
    elements. Of course, this is not the case for all features, but as we will discover
    in the next chapter, the repeatability rate is sufficiently high to allow good
    matching between the two images.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In [Chapter 6](ch06.html "Chapter 6. Filtering the Images") , *Filtering the
    Images*, we learned that the derivatives of an image can be estimated using Gaussian
    filters. These filters make use of a `σ` parameter, which defines the aperture
    (size) of the kernel. As we saw, this `σ` parameter corresponds to the variance
    of the Gaussian function used to construct the filter, and it then implicitly
    defines a scale at which the derivative is evaluated. Indeed, a filter that has
    a larger `σ` value smooths out the finer details of the image. This is why we
    can say that it operates at a coarser scale.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: Now, if we compute, for instance, the Laplacian of a given image point using
    Gaussian filters at different scales, then different values are obtained. Looking
    at the evolution of the filter response for different scale factors, we obtain
    a curve that eventually reaches a maximum value at a given `σ` value. If we extract
    this maximum value for two images of the same object taken at two different scales,
    the ratio of these two `σ` maxima should correspond to the ratio of the scales
    at which the images were taken. This important observation is at the core of the
    scale-invariant feature extraction process. That is, scale-invariant features
    should be detected as the local maxima in both the spatial space (in the image)
    and the scale space (as obtained from the derivative filters applied at different
    scales).
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们使用不同尺度的高斯滤波器计算给定图像点的拉普拉斯算子，那么会得到不同的值。观察不同尺度因子滤波器响应的变化，我们得到一条曲线，最终在给定的`σ`值处达到最大值。如果我们从两个不同尺度拍摄的两个相同物体的图像中提取这个最大值，这两个`σ`最大值之比应该对应于拍摄图像的尺度之比。这个重要的观察结果是尺度不变特征提取过程的核心。也就是说，尺度不变特征应该在空间空间（在图像中）和尺度空间（通过在不同尺度上应用导数滤波器获得）中的局部最大值中被检测到。
- en: 'SURF implements this idea by proceeding as follows. First, to detect the features,
    the Hessian matrix is computed at each pixel. This matrix measures the local curvature
    of a function and is defined as follows:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: SURF通过以下步骤实现这个想法。首先，为了检测特征，计算每个像素处的Hessian矩阵。这个矩阵衡量函数的局部曲率，定义为如下：
- en: '![How it works...](img/B05388_08_21.jpg)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作...](img/B05388_08_21.jpg)'
- en: The determinant of this matrix gives you the strength of this curvature. The
    idea, therefore, is to define corners as image points with high local curvature
    (that is, high variation in more than one direction). Since it is composed of
    second-order derivatives, this matrix can be computed using Laplacian of Gaussian
    kernels of a different scale, that is, for different values of `σ`. This Hessian
    then becomes a function of three variables, `H(x,y,σ)`. Therefore, a scale-invariant feature is
    declared when the determinant of this Hessian reaches a local maximum in both
    spatial and scale space (that is, `3x3x3` non-maxima suppression needs to be performed).
    Note that in order to be considered as a valid point, this determinant must have
    a minimum value as specified by the first parameter of the `create` method of
    the `cv::xfeatures2d::SurfFeatureDetector` class.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 这个矩阵的行列式给出了这个曲率的强度。因此，定义角点为具有高局部曲率（即在一个以上方向上的高变化）的图像点。由于它由二阶导数组成，这个矩阵可以使用不同尺度的高斯核的拉普拉斯算子来计算，即对于不同的`σ`值。因此，当这个Hessian的行列式在空间和尺度空间中都达到局部最大值时（即需要进行`3x3x3`非最大值抑制），就声明了一个尺度不变特征。请注意，为了被视为一个有效点，这个行列式必须具有由`cv::xfeatures2d::SurfFeatureDetector`类的`create`方法的第一参数指定的最小值。
- en: 'However, the calculation of all of these derivatives at different scales is
    computationally costly. The objective of the SURF algorithm is to make this process
    as efficient as possible. This is achieved by using approximated Gaussian kernels
    that involve only few integer additions. These have the following structure:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在不同尺度上计算所有这些导数是计算上代价高昂的。SURF算法的目的是使这个过程尽可能高效。这是通过使用仅涉及少量整数加法的近似高斯核来实现的。这些核具有以下结构：
- en: '![How it works...](img/image_08_016.jpg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作...](img/image_08_016.jpg)'
- en: The kernel on the left-hand side is used to estimate the mixed second derivatives,
    while the one on the right-hand side estimates the second derivative in the vertical
    direction. A rotated version of this second kernel estimates the second derivative
    in the horizontal direction. The smallest kernels have a size of `9x9` pixels,
    corresponding to `σ≈1.2`. To obtain a scale-space representation, kernels of increasing
    size are successively applied. The exact number of filters that are applied can
    be specified by additional parameters of the `cv::xfeatures2d::SurfFeatureDetector::create`
    method. By default, `12` different sizes of kernels are used (going up to size
    `99x99`). Note that, as explained in [Chapter 4](ch04.html "Chapter 4. Counting
    the Pixels with Histograms") , *Counting the Pixels with Histograms*, the use
    of integral images guarantees that the sum inside each lobe of each filter can
    be computed by using only three additions independent of the size of the filter.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: Once the local maxima are identified, the precise position of each detected
    interest point is obtained through interpolation in both scale and image space.
    The result is then a set of feature points that are localized at sub-pixel accuracy
    and to which a scale value is associated.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The SURF algorithm has been developed as an efficient variant of another well-known
    scale-invariant feature detector called **SIFT** (**Scale-Invariant Feature Transform**).
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: The SIFT feature-detection algorithm
  id: totrans-129
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: SIFT also detects features as local maxima in the image and scale space, but
    uses the Laplacian filter response instead of the Hessian determinant. This Laplacian
    is computed at different scales (that is, increasing values of `σ`) using the
    Difference of Gaussian filters, as explained in [Chapter 6](ch06.html "Chapter 6. Filtering
    the Images") , *Filtering the Images*. To improve efficiency, each time the value
    of `σ` is doubled, the size of the image is reduced by two. Each pyramid level
    corresponds to an octave, and each scale is a *layer*. There are typically three
    layers per octave.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: 'The following figure illustrates a pyramid of two octaves in which the four
    Gaussian-filtered images of the first octave produce three DoG layers:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: '![The SIFT feature-detection algorithm](img/image_08_017.jpg)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
- en: 'The detection of the SIFT features proceeds in a way very similar to SURF:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Here, we use all the default arguments to construct the detector, but you can
    specify the number of desired SIFT points (the strongest ones are kept), the number
    of layers per octave, and the initial value for `σ`. As you can see in the following
    image, using three octaves for the detection (default value) leads to a quite
    broad range of scales:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: '![The SIFT feature-detection algorithm](img/image_08_018.jpg)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
- en: Since the computation of the feature point is based on floating-point kernels,
    SIFT is generally considered to be more accurate in terms of feature localization
    in regards to space and scale. For the same reason, it is also more computationally
    expensive, although this relative efficiency depends on each particular implementation.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: Note that in this recipe we used the `cv::xfeatures2d::SurfFeatureDetector`
    and the `cv::xfeatures2d::SiftFeatureDetector` classes to make explicit the fact
    that we are using them as interest point detectors. Equivalently, we could have
    used the `cv::xfeatures2d::SURF` and `cv::xfeatures2d::SIFT` classes (they are
    type equivalent). Indeed, the SURF and SIFT operators cover both the detection
    and the description of interest points. Interest point description is the object
    of the next chapter.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: As a final remark, it is important to mention the SURF and SIFT operators have
    been patented, and as such, their use in commercial applications might be subject
    to licensing agreements. This restriction is one of the reasons why these feature
    detectors are found in the `cv::xfeatures2d` package.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Computing the Laplacian of an image* recipe in [Chapter 6](ch06.html "Chapter 6. Filtering
    the Images") , *Filtering the Images*, gives you more details on the Laplacian-of-Gaussian
    operator and the use of the difference of Gaussians
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Counting pixels with integral images* recipe in [Chapter 4](ch04.html "Chapter 4. Counting
    the Pixels with Histograms") , *Counting the Pixels with Histograms* explains
    how integral images accelerate the computation of sums of pixels
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Describing and matching local intensity patterns* recipe in [Chapter 9](ch09.html
    "Chapter 9. Describing and Matching Interest Points") , *Describing and Matching
    Interest Points*, explains how these scale-invariant features can be described
    for robust image matching
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The article *SURF: Speeded Up Robust Features* by *H. Bay*, *A. Ess*, *T. Tuytelaars*
    and *L. Van Gool* in *Computer Vision and Image Understanding, vol. 110*, No.
    3, pp. 346-359, 2008, describes the SURF feature algorithm'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The pioneering work by *D. Lowe*,  *Distinctive Image Features from Scale Invariant
    Features* in *International Journal of Computer Vision, Vol. 60*, No. 2, 2004,
    pp. 91-110, describes the SIFT algorithm
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detecting FAST features at multiple scales
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: FAST has been introduced as a quick way to detect keypoints in an image. With
    SURF and SIFT, the emphasis was on designing scale-invariant features. More recently,
    new interest point detectors have been proposed with the objective of achieving
    both fast detection and invariance to scale changes. This recipe presents the
    **Binary Robust Invariant Scalable Keypoints** (**BRISK**) detector. It is based
    on the FAST feature detector that we described in a previous recipe of this chapter.
    Another detector, called **ORB** (**Oriented FAST and Rotated BRIEF**), will also
    be discussed at the end of this recipe. These two feature point detectors constitute
    an excellent solution when fast and reliable image matching is required. They
    are especially efficient when they are used in conjunction with their associated
    binary descriptors, as will be discussed in [Chapter 9](ch09.html "Chapter 9. Describing
    and Matching Interest Points") , *Describing and Matching Interest Points*.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: FAST被引入作为一种快速检测图像中关键点的方法。在SURF和SIFT中，重点是设计尺度不变的特征。最近，提出了新的兴趣点检测器，旨在实现快速检测和对尺度变化的鲁棒性。本食谱介绍了**二值鲁棒不变可伸缩关键点**（**BRISK**）检测器。它基于我们在本章先前的食谱中描述的FAST特征检测器。另一种称为**ORB**（**方向性FAST和旋转BRIEF**）的检测器也将在本食谱的末尾讨论。这两个特征点检测器构成了在需要快速且可靠图像匹配时的优秀解决方案。当与它们相关的二进制描述符一起使用时，它们尤其有效，这一点将在[第9章](ch09.html
    "第9章。描述和匹配兴趣点") *描述和匹配兴趣点* 中讨论。
- en: How to do it...
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Following what we did in the previous recipes, we first create an instance
    of the detector, and then the `detect` method is called on an image:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 按照我们在先前的食谱中所做的那样，我们首先创建检测器的一个实例，然后在一个图像上调用`detect`方法：
- en: '[PRE18]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The image result shows the BRISK `keypoints` detected at multiple scales:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 图像结果显示了BRISK在多个尺度上检测到的`关键点`：
- en: '![How to do it...](img/image_08_019.jpg)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/image_08_019.jpg)'
- en: How it works...
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: BRISK is not only a feature point detector; the method also includes a procedure
    that describes the neighborhood of each detected keypoint. This second aspect
    will be the subject of the next chapter. We describe here how the quick detection
    of keypoints at multiple scales is performed using BRISK.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: BRISK不仅是一个特征点检测器；该方法还包括一个描述每个检测到的关键点邻域的步骤。这一第二个方面将是下一章的主题。在这里，我们描述了如何使用BRISK在多个尺度上快速检测关键点。
- en: In order to detect interest points at different scales, the method first builds
    an image pyramid through two down-sampling processes. The first process starts
    from the original image size and downscales it by half at each layer (or octave).
    Secondly, in-between layers are created by down-sampling the original image by
    a factor of `1.5`, and from this reduced image, additional layers are generated
    through successive half-sampling.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 为了检测不同尺度的兴趣点，该方法首先通过两个下采样过程构建一个图像金字塔。第一个过程从原始图像大小开始，并在每一层（或八度）将其缩小一半。其次，通过将原始图像下采样一个因子`1.5`来创建中间层，然后从这个缩小后的图像中，通过连续的半采样生成额外的层。
- en: '![How it works...](img/image_08_020.jpg)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/image_08_020.jpg)'
- en: The FAST feature detector is then applied on all the images of this pyramid.
    Keypoint extraction is based on a criterion that is similar to the one used by
    SIFT. First, an acceptable interest point must be a local maximum, when comparing
    its strength with one of its eight spatial neighbors. If this is the case, the
    point is then compared with the scores of the neighboring points in the layers
    above and below; if its score is higher in scale as well, then it is accepted
    as an interest point. A key aspect of BRISK resides in the fact that the different
    layers of the pyramid have different resolutions. The method requires interpolation
    in both scale and space in order to locate each keypoint precisely. This interpolation
    is based on the FAST keypoint scores. In space, the interpolation is performed
    on a `3x3` neighborhood. In scale, it is computed by fitting a 1D parabola along
    the scale axis through the current point and its two neighboring local keypoints
    in the layers above and below; this keypoint localization in scale is illustrated
    in the preceding figure. As a result, even if the FAST keypoint detection is performed
    at discrete image scales, the resulting detected scales associated with each keypoint
    are continuous values.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: The `cv::BRISK` detector has two main parameters. The first one is a threshold
    value for FAST keypoints to be accepted, and the second parameter is the number
    of octaves that will be generated in the image pyramid; in our example, we used
    `5` octaves, which explains the large number of scales in the detected keypoints.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: BRISK is not the only multiscale, fast detector that is proposed in OpenCV.
    Another one is the ORB feature detector that can also perform efficient keypoint
    detection.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: The ORB feature-detection algorithm
  id: totrans-161
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: ORB stands for Oriented FAST and Rotated BRIEF. The first part of this acronym
    refers to the keypoint detection part, while the second part refers to the descriptor
    that is proposed by ORB. Here, we focus on the detection method; the descriptor
    will be presented in the next chapter.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: As with BRISK, ORB first creates an image pyramid. This one is made of a number
    of layers each of which being a down-sampled version of the previous one by a
    certain scale factor (typically, `8` scales and `1.2` scale factor reduction;
    these are the default parameter values when creating a `cv::ORB` detector). The
    strongest `N` keypoints are then accepted where the keypoint score is defined
    by the Harris cornerness measure, as defined in the first recipe of this chapter
    (the authors of this method found the Harris score to be a more reliable measure
    than the usual FAST corner strength).
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: An original aspect of the ORB detector resides in the fact that an orientation
    is associated with each detected interest point. As we will see in the next chapter,
    this information will be useful to align the descriptors of keypoints detected
    in different images. In the *Computing components' shape descriptors* recipe of
    [Chapter 7](ch07.html "Chapter 7. Extracting Lines, Contours, and Components")
    , *Extracting Lines, Contours, and Components*, we introduced the concept of image
    moments and in particular, we showed you how the centroid of a component can be
    computed from its first three moments. ORB proposes to use the orientation of
    the centroid of a circular neighborhood around the keypoint. Since, FAST keypoints,
    by definition, always have a decentered centroid, the angle of the line that joins
    the central point and the centroid will always be well defined.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: 'The ORB features are detected as follows:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'This call produces the following result:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: '![The ORB feature-detection algorithm](img/image_08_021.jpg)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
- en: As can be seen, since the keypoints are independently detected on each pyramid
    layer, the detector tends to repeatedly detect the same feature point at different
    scales.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-170
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Matching keypoints with binary descriptors* recipe in [Chapter 9](ch09.html
    "Chapter 9. Describing and Matching Interest Points") , *Describing and Matching
    Interest Points*, explains how simple binary descriptors can be used for efficient
    robust matching of these features
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The article *BRISK: Binary Robust Invariant Scalable Keypoint* by *S. Leutenegger*,
    *M. Chli* and *R. Y. Siegwart* in *IEEE International Conference on Computer Vision*,
    pp. 2448--2555, 2011, describes the BRISK feature algorithm'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The article *ORB: an efficient alternative to SIFT or SURF* by *E. Rublee*,
    *V. Rabaud*, *K. Konolige* and *G. Bradski* in *IEEE International Conference
    on Computer Vision*, pp.2564-2571, 2011, describes the ORB feature algorithm'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
