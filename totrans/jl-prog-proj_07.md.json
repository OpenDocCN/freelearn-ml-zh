["```py\nCSV@v.0.4.3\nDataFrames@v0.15.2\nGadfly@v1.0.1\nIJulia@v1.14.1\nRecommendation@v0.1.0+\n```", "```py\npkg> add PackageName@vX.Y.Z \n```", "```py\npkg> add IJulia@v1.14.1\n```", "```py\njulia> download(\"https://raw.githubusercontent.com/PacktPublishing/Julia-Projects/master/Chapter07/Project.toml\", \"Project.toml\")\npkg> activate . \npkg> instantiate\n```", "```py\njulia> users = CSV.read(\"BX-Users.csv\", header = 1, delim = ';', missingstring = \"NULL\", escapechar = '\\\\') \n```", "```py\njulia> books = CSV.read(\"BX-Books.csv\", header = 1, delim = ';', missingstring = \"NULL\", escapechar = '\\\\') \n271379×8 DataFrames.DataFrame \n# output omitted # \n\njulia> books_ratings = CSV.read(\"BX-Book-Ratings.csv\", header = 1, delim = ';', missingstring = \"NULL\", escapechar = '\\\\') \n1149780×3 DataFrames.DataFrame \n# output omitted # \n```", "```py\njulia> using DataFrames \njulia> describe(users, stats = [:min, :max, :nmissing, :nunique, :eltype]) \n```", "```py\njulia> using Gadfly \njulia> plot(users, x = :Age, Geom.histogram(bincount = 15)) \n```", "```py\njulia> users = users[users[:Age] .< 100, :] \nERROR: ArgumentError: unable to check bounds for indices of type Missing \n```", "```py\njulia> using Statistics \njulia> mean(skipmissing(users[:Age])) \n34.75143370454978 \n```", "```py\njulia> users[:Age] = coalesce.(users[:Age], mean(skipmissing(users[:Age]))) \n278858-element Array{Real,1}: \n 34.75143370454978 \n 18 \n 34.75143370454978 \n 17 \n 34.75143370454978 \n# output omitted # \n```", "```py\njulia> users = users[users[:Age] .< 100, :] \n278485×3 DataFrame\n # output omitted # \n\njulia> head(users) \n```", "```py\njulia> describe(books, stats = [:nmissing, :nunique, :eltype]) \n```", "```py\njulia> maximum(skipmissing(books[Symbol(\"Year-Of-Publication\")])) \n2050 \n\njulia> minimum(skipmissing(books[Symbol(\"Year-Of-Publication\")])) \n0 \n```", "```py\njulia> plot(books, x = Symbol(\"Year-Of-Publication\"), Geom.histogram) \n```", "```py\njulia> unique(books[Symbol(\"Year-Of-Publication\")]) |> sort \n116-element Array{Union{Missing, Int64},1}: \n    0 \n 1376 \n 1378 \n# output omitted # \n 2037 \n 2038 \n 2050 \n```", "```py\njulia> books = books[books[Symbol(\"Year-Of-Publication\")] .>= 1970, :] \n264071×8 DataFrame \n# output omitted # \n\njulia> books = books[books[Symbol(\"Year-Of-Publication\")] .<= 2004, :] \n263999×8 DataFrame \n# output omitted # \n\njulia> plot(books, x = Symbol(\"Year-Of-Publication\"), Geom.histogram) \n```", "```py\njulia> describe(books_ratings) \n```", "```py\njulia> plot(books_ratings, x = Symbol(\"Book-Rating\"), Geom.histogram) \n```", "```py\njulia> books_ratings = books_ratings[books_ratings[Symbol(\"Book-Rating\")] .> 0, :] \n433671×3 DataFrame \n# output omitted # \n\njulia> plot(books_ratings, x = Symbol(\"Book-Rating\"), Geom.histogram) \n```", "```py\njulia> books_ratings_books = join(books_ratings, books, on = :ISBN, kind = :inner) \n374896×10 DataFrame \n# output omitted # \n```", "```py\njulia> books_ratings_books_users = join(books_ratings_books, users, on = Symbol(\"User-ID\"), kind = :inner) \n374120×12 DataFrame \n# output omitted # \n```", "```py\njulia> top_ratings = books_ratings_books_users[books_ratings_books_users[Symbol(\"Book-Rating\")] .>= 8, :] \n217991×12 DataFrame \n# output omitted # \n```", "```py\njulia> for n in names(top_ratings) rename!(top_ratings, n => Symbol(replace(string(n), \"-\"=>\"\"))) end \n```", "```py\njulia> names(top_ratings) \n12-element Array{Symbol,1}: \n :UserID \n :ISBN \n :BookRating \n :BookTitle \n :BookAuthor \n :YearOfPublication \n :Publisher \n :ImageURLS \n :ImageURLM \n :ImageURLL \n :Location \n :Age \n```", "```py\njulia> ratings_count = by(top_ratings, :UserID, df -> size(df[:UserID])[1]) \n```", "```py\njulia> describe(ratings_count) \n```", "```py\njulia> ratings_count = ratings_count[ratings_count[:x1] .>= 5, :] \n7296×2 DataFrame \n# output omitted # \n```", "```py\njulia> plot(ratings_count, x = :x1, Geom.histogram(maxbincount = 6)) \n```", "```py\njulia> ratings_count[ratings_count[:x1] .> 1000, :] \n```", "```py\njulia> ratings_count = ratings_count[ratings_count[:x1] .<= 1000, :] \n7293×2 DataFrame \n# output omitted # \n```", "```py\njulia> top_ratings = join(top_ratings, ratings_count, on = :UserID, kind = :inner) \n150888×13 DataFrame \n# output omitted # \n```", "```py\njulia> CSV.write(\"top_ratings.csv\", top_ratings) \n```", "```py\njulia> top_ratings = CSV.read(\"top_ratings.csv\")  \n11061×13 DataFrame \n# output omitted # \n```", "```py\njulia> training_data = DataFrame(UserID = Int[], ISBN = String[], Rating = Int[]) \n0×3 DataFrame \n\njulia> test_data = DataFrame(UserID = Int[], ISBN = String[], Rating = Int[]) \n0×3 DataFrame \n```", "```py\njulia> for row in eachrow(top_ratings)\n rand(1:10) == 10 ? \n push!(test_data, convert(Array, row[[:UserID, :ISBN, :BookRating]])) :\n push!(training_data, convert(Array, row[[:UserID, :ISBN, :BookRating]]))\n end \n```", "```py\njulia> test_data \n1056×3 DataFrame\n # output omitted # \n\njulia> training_data \n10005×3 DataFrame \n# output omitted # \n```", "```py\njulia> test_data = CSV.read(\"data/test_data.csv\") \njulia> training_data = CSV.read(\"data/training_data.csv\") \n```", "```py\n pkg> add Recommendation#master  \n julia> using Recommendation \n```", "```py\nstruct Event \n    user::Int \n    item::Int \n    value::Float64 \nend \n```", "```py\njulia> user_mappings, book_mappings = Dict{Int,Int}(), Dict{String,Int}() \n```", "```py\njulia> user_counter, book_counter = 0, 0 \n```", "```py\njulia> events = Event[] \njulia> for row in eachrow(training_data) \n global user_counter, book_counter user_id, book_id, rating = row[:UserID], row[:ISBN], row[:Rating] haskey(user_mappings, user_id) || (user_mappings[user_id] = (user_counter += 1)) haskey(book_mappings, book_id) || (book_mappings[book_id] = (book_counter += 1)) push!(events, Event(user_mappings[user_id], book_mappings[book_id], rating)) end\n```", "```py\njulia> events \n10005-element Array{Event,1}: \n Event(1, 1, 10.0) \n Event(1, 2, 8.0) \n Event(1, 3, 9.0) \n Event(1, 4, 8.0) \n Event(1, 5, 8.0) \n # output omitted #\n```", "```py\njulia> da = DataAccessor(events, user_counter, book_counter) \n```", "```py\njulia> recommender = MF(da) \njulia> build(recommender) \n```", "```py\njulia> recommend(recommender, 1, 20, [1:book_counter...]) \n```", "```py\n20-element Array{Pair{Int64,Float64},1}: \n 5081 => 19.1974 \n 5079 => 19.1948 \n 5078 => 19.1946 \n 5077 => 17.1253 \n 5080 => 17.1246 \n # output omitted # \n```", "```py\njulia> function reverse_dict(d) Dict(value => key for (key, value) in d) end \n```", "```py\njulia> reverse_dict(user_mappings)[1] \n277427 \n```", "```py\njulia> reverse_dict(book_mappings)[5081] \n\"981013004X\" \n```", "```py\njulia> user_testing_data = test_data[test_data[:UserID] .== reverse_dict(user_mappings)[1], :] \n8×3 DataFrame \n```", "```py\ntesting_data DataFrame by doing an element-wise comparison—for each row, it checks if the UserID column equals 277427 (which is the ID returned by reverse_dict(user_mappings)[1], remember?). If yes, then the  whole row is added to user_testing_data.\n```", "```py\njulia> test_profile_ids = user_testing_data[:, :ISBN] \n8-element Array{Union{Missing, String},1}: \n \"0060006641\" \n \"0441627404\" \n \"0446600415\" \n \"0671727079\" \n \"0671740504\" \n \"0671749897\" \n \"0836218817\" \n \"0842370668\" \n```", "```py\njulia> function recommendations_to_books(recommendations) \n           [reverse_dict(book_mappings)[r[1]] for r in recommendations] \n       end \n```", "```py\njulia> recommendations_to_books(recommend(recommender, 1, 20, [1:book_counter...])) \n20-element Array{String,1}: \n \"981013004X\" \n \"1856972097\" \n \"1853263656\" \n \"1853263133\" \n \"1857231791\"\n # output omitted #\n```", "```py\njulia> intersect(test_profile_ids, recommendations_to_books(recommend(recommender, 1, 500, [1:book_counter...]))) \n1-element Array{Union{Missing, String},1}: \n \"0441627404\"  \n```", "```py\njulia> for i in recommendations_to_books(recommend(recommender, 1, 20, [1:book_counter...])) top_ratings[top_ratings.ISBN .== i, :BookTitle] |> println end  \n\nUnion{Missing, String}[\"Fun With Chinese Characters Volume 1\"] \nUnion{Missing, String}[\"Fantasy Stories (Story Library)\"] \nUnion{Missing, String}[\"The Wordsworth Complete Guide to Heraldry (Wordsworth Reference)\"] \nUnion{Missing, String}[\"The Savoy Operas (Wordsworth Collection)\"] \nUnion{Missing, String}[\"Against a Dark Background\"] \n```", "```py\nthumbs = DataFrame(Thumb = String[]) \n\nfor i in recommendations_to_profiles(recommend(recommender, 1, 20, [1:book_counter...])) \n    push!(thumbs, top_ratings[top_ratings.ISBN .== i, :ImageURLL]) \nend \n\nfor img in thumbs[:, :Thumb] \n    HTML(\"\"\"<img src=\"img/$(img)\">\"\"\") |> display \nend \n```"]