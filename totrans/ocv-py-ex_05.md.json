["```py\nimport cv2\nimport numpy as np\n\nimg = cv2.imread('box.jpg')\ngray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)\n\ngray = np.float32(gray)\n\ndst = cv2.cornerHarris(gray, 4,5, 0.04)      # to detect only sharp corners\n#dst = cv2.cornerHarris(gray, 14, 5, 0.04)    # to detect soft corners\n\n# Result is dilated for marking the corners\ndst = cv2.dilate(dst,None)\n\n# Threshold for an optimal value, it may vary depending on the image.\nimg[dst > 0.01*dst.max()] = [0,0,0]\n\ncv2.imshow('Harris Corners',img)\ncv2.waitKey()\n```", "```py\nimport cv2\nimport numpy as np\n\nimg = cv2.imread('box.jpg')\ngray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)\n\ncorners = cv2.goodFeaturesToTrack(gray, 7, 0.05, 25)\ncorners = np.float32(corners)\n\nfor item in corners:\n    x, y = item[0]\n    cv2.circle(img, (x,y), 5, 255, -1)\n\ncv2.imshow(\"Top 'k' features\", img)\ncv2.waitKey()\n```", "```py\nimport cv2\nimport numpy as np\n\ninput_image = cv2.imread('input.jpg')\ngray_image = cv2.cvtColor(input_image, cv2.COLOR_BGR2GRAY)\n\nsift = cv2.SIFT()\nkeypoints = sift.detect(gray_image, None)\n\ninput_image = cv2.drawKeypoints(input_image, keypoints, flags=cv2.DRAW_MATCHES_FLAGS_DRAW_RICH_KEYPOINTS)\n\ncv2.imshow('SIFT features', input_image)\ncv2.waitKey()\n```", "```py\nkeypoints, descriptors = sift.detectAndCompute(gray_image, None)\n```", "```py\nimport cv2\nimport numpy as np\n\nimg = cv2.imread('input.jpg')\ngray= cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n\nsurf = cv2.SURF()\n\n# This threshold controls the number of keypoints\nsurf.hessianThreshold = 15000\n\nkp, des = surf.detectAndCompute(gray, None)\n\nimg = cv2.drawKeypoints(img, kp, None, (0,255,0), 4)\n\ncv2.imshow('SURF features', img)\ncv2.waitKey()\n```", "```py\nimport cv2\nimport numpy as np\n\ngray_image = cv2.imread('input.jpg', 0)\n\nfast = cv2.FastFeatureDetector()\n\n# Detect keypoints\nkeypoints = fast.detect(gray_image, None)\nprint \"Number of keypoints with non max suppression:\", len(keypoints)\n\n# Draw keypoints on top of the input image\nimg_keypoints_with_nonmax = cv2.drawKeypoints(gray_image, keypoints, color=(0,255,0))\ncv2.imshow('FAST keypoints - with non max suppression', img_keypoints_with_nonmax)\n\n# Disable nonmaxSuppression\nfast.setBool('nonmaxSuppression', False)\n\n# Detect keypoints again\nkeypoints = fast.detect(gray_image, None)\n\nprint \"Total Keypoints without nonmaxSuppression:\", len(keypoints)\n\n# Draw keypoints on top of the input image\nimg_keypoints_without_nonmax = cv2.drawKeypoints(gray_image, keypoints, color=(0,255,0))\ncv2.imshow('FAST keypoints - without non max suppression', img_keypoints_without_nonmax)\ncv2.waitKey()\n```", "```py\nimport cv2â€©\nimport numpy as np\n\ngray_image = cv2.imread('input.jpg', 0)\n\n# Initiate FAST detector\nfast = cv2.FastFeatureDetector()\n\n# Initiate BRIEF extractor\nbrief = cv2.DescriptorExtractor_create(\"BRIEF\")\n\n# find the keypoints with STAR\nkeypoints = fast.detect(gray_image, None)\n\n# compute the descriptors with BRIEF\nkeypoints, descriptors = brief.compute(gray_image, keypoints)\n\ngray_keypoints = cv2.drawKeypoints(gray_image, keypoints, color=(0,255,0))\ncv2.imshow('BRIEF keypoints', gray_keypoints)\ncv2.waitKey()\n```", "```py\nimport cv2\nimport numpy as np\n\ninput_image = cv2.imread('input.jpg')\ngray_image = cv2.cvtColor(input_image, cv2.COLOR_BGR2GRAY)\n\n# Initiate ORB object\norb = cv2.ORB()\n\n# find the keypoints with ORB\nkeypoints = orb.detect(gray_image, None)\n\n# compute the descriptors with ORB\nkeypoints, descriptors = orb.compute(gray_image, keypoints)\n\n# draw only the location of the keypoints without size or orientation\nfinal_keypoints = cv2.drawKeypoints(input_image, keypoints, color=(0,255,0), flags=0)\n\ncv2.imshow('ORB keypoints', final_keypoints)\ncv2.waitKey()\n```"]