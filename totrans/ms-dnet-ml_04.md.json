["```py\nPM> Install-Package fslab\n\n```", "```py\nPM> Install-Package FSharp.Data.SqlClient\n\n```", "```py\n#load \"../packages/FsLab.0.3.11/FsLab.fsx\"\n```", "```py\n#r \"System.Data.Entity.dll\"\n#r \"FSharp.Data.TypeProviders.dll\"\n#r \"System.Data.Linq.dll\"\n\nopen System\nopen Foogle\nopen Deedle\nopen FSharp.Data\nopen FSharp.Charting\nopen System.Data.Linq\nopen System.Data.Entity\nopen Microsoft.FSharp.Data.TypeProviders\n```", "```py\n[<Literal>]\nlet connectionString = \"data source=nc54a9m5kk.database.windows.net;initial catalog=Traffic;user id=chickenskills@nc54a9m5kk;password=sk1lzm@tter;\"\n\ntype EntityConnection = SqlEntityConnection<connectionString,Pluralize = true>\nlet context = EntityConnection.GetDataContext()\ncontext.dbo_TrafficStops |> Seq.iter(fun ts -> printfn \"%s\" ts.StreetAddress)\n```", "```py\ntype EntityConnection = SqlEntityConnection<connectionString,Pluralize = true>\n```", "```py\nlet context = EntityConnection.GetDataContext()\n```", "```py\ncontext.dbo_TrafficStops |> Seq.iter(fun ts -> printfn \"%s\" ts.StreetAddress)\n```", "```py\n128 SW MAYNARD RD/KILMAYNE DR\n1 WALNUT ST TO US 1 RAMP NB/US 1 EXIT 101 RAMP NB\n2333 WALNUT ST\n1199 NW MAYNARD RD/HIGH HOUSE RD\n3430 TEN TEN RD\n\nval connectionString : string =\n \"data source=nc54a9m5kk.database.windows.net;initial catalog=T\"+[61 chars]\ntype EntityConnection =\n class\n static member GetDataContext : unit -> EntityConnection.ServiceTypes.SimpleDataContextTypes.EntityContainer\n + 1 overload\n nested type ServiceTypes\n end\nval context :\n EntityConnection.ServiceTypes.SimpleDataContextTypes.EntityContainer\nval it : unit = ()\n\n```", "```py\ncontext.dbo_TrafficStops |> Seq.head\n```", "```py\nval it : EntityConnection.ServiceTypes.dbo_TrafficStops =\n SqlEntityConnection1.dbo_TrafficStops\n {CadCallId = 120630019.0;\n DispositionDesc = \"VERBAL WARNING\";\n DispositionId = 7;\n EntityKey = System.Data.EntityKey;\n EntityState = Unchanged;\n Id = 13890;\n Latitude = 35.7891;\n Longitude = -78.8289;\n StopDateTime = 6/30/2012 12:36:38 AM;\n StreetAddress = \"4348 NW CARY PKWY/HIGH HOUSE RD\";}\n>\n\n```", "```py\nlet trafficStops = \n    context.dbo_TrafficStops \n    |> Seq.map(fun ts -> ts.StopDateTime, ts.Latitude, ts.Longitude, ts.DispositionId)\n```", "```py\nval trafficStops :\n seq<System.Nullable<System.DateTime> * System.Nullable<float> *\n System.Nullable<float> * System.Nullable<int>>\n\n>\n\n```", "```py\nlet dispoistions =\n    context.dbo_TrafficStops \n    |> Seq.distinctBy(fun ts -> ts.DispositionId, ts.DispositionDesc)   \n    |> Seq.map (fun d -> d.DispositionId, d.DispositionDesc)\n    |> Seq.toArray\n```", "```py\nval dispoistions : (System.Nullable<int> * string) [] =\n [|(7, \"VERBAL WARNING\"); (15, \"CITATION\"); (12, \"COMPLETED AS REQUESTED\");\n (4, \"WRITTEN WARNING\"); (13, \"INCIDENT REPORT\"); (9, \"ARREST\");\n (14, \"UNFOUNDED\"); (19, \"None Provided\");\n (10, \"NO FURTHER ACTION NECESSARY\"); (5, \"OTHER    SEE NOTES\");\n (2, \"UNABLE TO LOCATE\"); (16, \"FIELD CONTACT\");\n (6, \"REFERRED TO PROPER AGENCY\"); (17, \"BACK UP UNIT\");\n (11, \"CIVIL PROBLEM\"); (1, \"FURTHER ACTION NECESSARY\"); (3, \"FALSE ALARM\");\n (18, \"CITY ORDINANCE VIOLATION\")|]\n\n>\n\n```", "```py\nlet months = \n    context.dbo_TrafficStops\n    |> Seq.groupBy (fun ts -> ts.StopDateTime.Value.Month)\n    |> Seq.map (fun (m, ts) -> m, Seq.length ts)\n    |> Seq.sortBy (fun (m, ts) -> m)\n    |> Seq.toArray\n```", "```py\nval months : (int * int) [] =\n [|(1, 2236); (2, 2087); (3, 2630); (4, 2053); (5, 2439); (6, 2499);\n (7, 2265); (8, 2416); (9, 3365); (10, 1983); (11, 2067); (12, 1738)|]\n\n>\n\n```", "```py\n|> Seq.groupBy (fun ts -> ts.StopDateTime.Value.Month)\n```", "```py\nlet testArray = [|1;1;2;3;4;5;3;4;5;5;2;1;5|]\ntestArray |> Array.groupBy (id)\n```", "```py\nval testArray : int [] = [|1; 1; 2; 3; 4; 5; 3; 4; 5; 5; 2; 1; 5|]\nval it : (int * int []) [] =\n [|(1, [|1; 1; 1|]); (2, [|2; 2|]); (3, [|3; 3|]); (4, [|4; 4|]);\n (5, [|5; 5; 5; 5|])|]\n\n```", "```py\nlet dayOfMonth = \n    context.dbo_TrafficStops\n    |> Seq.groupBy (fun ts -> ts.StopDateTime.Value.Day)\n    |> Seq.map (fun (d, ts) -> d, Seq.length ts)\n    |> Seq.sortBy (fun (d, ts) -> d)\n    |> Seq.toArray\n\nlet weekDay = \n    context.dbo_TrafficStops\n    |> Seq.groupBy (fun ts -> ts.StopDateTime.Value.DayOfWeek)\n    |> Seq.map (fun (dow, ts) -> dow, Seq.length ts)\n    |> Seq.sortBy (fun (dow, ts) -> dow)\n    |> Seq.toArray\n```", "```py\nval dayOfMonth : (int * int) [] =\n [|(1, 918); (2, 911); (3, 910); (4, 941); (5, 927); (6, 840); (7, 940);\n (8, 785); (9, 757); (10, 805); (11, 766); (12, 851); (13, 825); (14, 911);\n (15, 977); (16, 824); (17, 941); (18, 956); (19, 916); (20, 977);\n (21, 988); (22, 906); (23, 1003); (24, 829); (25, 1036); (26, 1031);\n (27, 890); (28, 983); (29, 897); (30, 878); (31, 659)|]\n\nval weekDay : (System.DayOfWeek * int) [] =\n [|(Sunday, 3162); (Monday, 3277); (Tuesday, 3678); (Wednesday, 4901);\n (Thursday, 5097); (Friday, 4185); (Saturday, 3478)|]\n\n```", "```py\nlet weekDay = \n   context.dbo_TrafficStops\n    |> Seq.groupBy (fun ts -> ts.StopDateTime.Value.XXXXX)\n    |> Seq.map (fun (fst, snd) -> fst, Seq.length snd)\n    |> Seq.sortBy (fun (fst, snd) -> fst)\n    |> Seq.toArray\n```", "```py\nlet transform grouper mapper =\n    context.dbo_TrafficStops \n    |> Seq.groupBy grouper\n             |> Seq.map mapper\n                             |> Seq.sortBy fst \n                             |> Seq.toArray\n```", "```py\ntransform (fun ts -> ts.StopDateTime.Value.Month) (fun (m, ts) -> m, Seq.length ts)\ntransform (fun ts -> ts.StopDateTime.Value.Day) (fun (d, ts) -> d, Seq.length ts)\ntransform (fun ts -> ts.StopDateTime.Value.DayOfWeek) (fun (dow, ts) -> dow, Seq.length ts)\n```", "```py\nval transform :\n grouper:(EntityConnection.ServiceTypes.dbo_TrafficStops -> 'a) ->\n mapper:('a * seq<EntityConnection.ServiceTypes.dbo_TrafficStops> ->\n 'b * 'c) -> ('b * 'c) [] when 'a : equality and 'b : comparison\nval it : (System.DayOfWeek * int) [] =\n [|(Sunday, 3162); (Monday, 3277); (Tuesday, 3678); (Wednesday, 4901);\n (Thursday, 5097); (Friday, 4185); (Saturday, 3478)|]\n\n```", "```py\nlet transform (grouper, mapper) =\n```", "```py\nlet transform grouper  =\n    context.dbo_TrafficStops \n    |> Seq.groupBy grouper\n    |> Seq.map (fun (fst, snd) -> fst, Seq.length snd)\t\n    |> Seq.sortBy fst \n    |> Seq.toArray\n\ntransform (fun ts -> ts.StopDateTime.Value.Month) \ntransform (fun ts -> ts.StopDateTime.Value.Day) \ntransform (fun ts -> ts.StopDateTime.Value.DayOfWeek)\n```", "```py\nval transform :\n grouper:(EntityConnection.ServiceTypes.dbo_TrafficStops -> 'a) ->\n ('a * int) [] when 'a : comparison\n\n> \n\nval it : (System.DayOfWeek * int) [] =\n [|(Sunday, 3162); (Monday, 3277); (Tuesday, 3678); (Wednesday, 4901);\n (Thursday, 5097); (Friday, 4185); (Saturday, 3478)|]\n\n```", "```py\nlet getCounts counter =\n    context.dbo_TrafficStops \n    |> Seq.countBy counter\n    |> Seq.sortBy fst \n    |> Seq.toArray\n\ngetCounts (fun ts -> ts.StopDateTime.Value.DayOfWeek)\n```", "```py\nval getCounts :\n counter:(EntityConnection.ServiceTypes.dbo_TrafficStops -> 'a) ->\n ('a * int) [] when 'a : comparison\nval it : (System.DayOfWeek * int) [] =\n [|(Sunday, 3162); (Monday, 3277); (Tuesday, 3678); (Wednesday, 4901);\n (Thursday, 5097); (Friday, 4185); (Saturday, 3478)|]\n\n```", "```py\nlet months' = Seq.map (fun (m,c) -> string m,c) months\nChart.LineChart months'\n```", "```py\nval months' : seq<string * int>\nval it : FoogleChart = (Foogle Chart)\n\n>\n\n```", "```py\nlet locations = \n    context.dbo_TrafficStops \n    |> Seq.filter (fun ts -> ts.Latitude.HasValue && ts.Longitude.HasValue )\n    |> Seq.map (fun ts -> ts.StreetAddress, ts.Latitude.Value, ts.Longitude.Value)\n    |> Seq.map (fun (sa,lat,lon) -> sa, lat.ToString(), lon.ToString())\n    |> Seq.map (fun (sa,lat,lon) -> sa, lat + \",\" + lon)\n    |> Seq.take 2\n    |> Seq.toArray\n\nChart.GeoChart(locations,DisplayMode=GeoChart.DisplayMode.Markers,Region=\"US\")\n```", "```py\n#r \"System.Data.Entity.dll\"\n#r \"FSharp.Data.TypeProviders.dll\"\n#r \"System.Data.Linq.dll\"\n\nopen System\nopen System.Data.Linq\nopen System.Data.Entity\nopen Microsoft.FSharp.Data.TypeProviders\n\n[<Literal>]\nlet connectionString = \"data source=nc54a9m5kk.database.windows.net;initial catalog=Traffic;user id=chickenskills@nc54a9m5kk;password=sk1lzm@tter;\"\n\ntype EntityConnection = SqlEntityConnection<connectionString,Pluralize = true>\nlet context = EntityConnection.GetDataContext()\n```", "```py\nval connectionString : string =\n \"data source=nc54a9m5kk.database.windows.net;initial catalog=T\"+[61 chars]\ntype EntityConnection =\n class\n static member GetDataContext : unit -> EntityConnection.ServiceTypes.SimpleDataContextTypes.EntityContainer\n + 1 overload\n nested type ServiceTypes\n end\nval context :\n EntityConnection.ServiceTypes.SimpleDataContextTypes.EntityContainer\n\n>\n\n```", "```py\nPM> Install-Package Accord.MachineLearning\n\n```", "```py\n#r \"../packages/Accord.3.0.2/lib/net40/Accord.dll\"\n#r \"../packages/Accord.MachineLearning.3.0.2/lib/net40/Accord.MachineLearning.dll\"\n#r \"../packages/Accord.Statistics.3.0.2/lib/net40/Accord.Statistics.dll\"\nopen Accord\nopen Accord.MachineLearning\nopen Accord.MachineLearning.DecisionTrees\nopen Accord.MachineLearning.DecisionTrees.Learning\n```", "```py\ntype TrafficStop = {Month:int; DayOfWeek:DayOfWeek; AMPM: string; ReceviedTicket: bool option }\n```", "```py\nlet getAMPM (stopDateTime:System.DateTime) =\n    match stopDateTime.Hour < 12 with\n    | true -> \"AM\"\n    | false -> \"PM\"\n\nlet receviedTicket (disposition:string) =\n    match disposition.ToUpper() with\n    | \"CITATION\" -> Some true\n    | \"VERBAL WARNING\" | \"WRITTEN WARNING\" -> Some false\n    | _ -> None\n```", "```py\nval getAMPM : stopDateTime:DateTime -> string\nval receviedTicket : disposition:string -> bool option\n\n```", "```py\nlet dataFrame = context.dbo_TrafficStops\n                |> Seq.map (fun ts -> {Month=ts.StopDateTime.Value.Month;DayOfWeek=ts.StopDateTime.Value.DayOfWeek;\n                                      AMPM=getAMPM(ts.StopDateTime.Value); ReceviedTicket= receviedTicket(ts.DispositionDesc) })\n                |> Seq.filter (fun ts -> ts.ReceviedTicket.IsSome)\n                |> Seq.toArray\n```", "```py\n {Month = 7;\n DayOfWeek = Sunday;\n AMPM = \"PM\";\n ReceviedTicket = Some false;}; {Month = 7;\n DayOfWeek = Sunday;\n AMPM = \"PM\";\n ReceviedTicket = Some false;}; ...|]\n\n>\n\n```", "```py\nlet month = DecisionVariable(\"Month\",13)\nlet dayOfWeek = DecisionVariable(\"DayOfWeek\",7)\nlet ampm = DecisionVariable(\"AMPM\",2)\n\nlet attributes =[|month;dayOfWeek;ampm|]\nlet classCount = 2 \n```", "```py\nval month : Accord.MachineLearning.DecisionTrees.DecisionVariable\nval dayOfWeek : Accord.MachineLearning.DecisionTrees.DecisionVariable\nval ampm : Accord.MachineLearning.DecisionTrees.DecisionVariable\nval attributes : Accord.MachineLearning.DecisionTrees.DecisionVariable [] =\n [|Accord.MachineLearning.DecisionTrees.DecisionVariable;\n Accord.MachineLearning.DecisionTrees.DecisionVariable;\n Accord.MachineLearning.DecisionTrees.DecisionVariable|]\nval classCount : int = 2\n\n```", "```py\nlet getAMPM' (ampm: string) =\n    match ampm with\n    | \"AM\" -> 0\n    | _ -> 1\n\nlet receivedTicket' value =\n    match value with\n    | true -> 1\n    | false -> 0\n\nlet inputs = \n    dataFrame \n    |> Seq.map (fun ts -> [|(ts.Month); int ts.DayOfWeek; getAMPM'(ts.AMPM)|])\n    |> Seq.toArray\n\nlet outputs = \n    dataFrame \n    |> Seq.map (fun ts -> receivedTicket'(ts.ReceviedTicket.Value))\n    |> Seq.toArray\n```", "```py\n [|7; 0; 0|]; [|7; 0; 0|]; [|7; 0; 0|]; [|7; 0; 0|]; [|7; 0; 0|];\n [|7; 0; 0|]; [|7; 0; 0|]; [|7; 0; 0|]; [|7; 0; 0|]; [|7; 0; 0|];\n [|7; 0; 1|]; [|7; 0; 1|]; [|7; 0; 1|]; [|7; 0; 1|]; [|7; 0; 1|];\n [|7; 0; 1|]; [|7; 0; 1|]; [|7; 0; 1|]; [|7; 0; 1|]; [|7; 0; 1|];\n [|7; 0; 1|]; [|7; 0; 1|]; [|7; 0; 1|]; [|7; 0; 1|]; [|7; 0; 1|];\n [|7; 0; 1|]; [|7; 0; 1|]; [|7; 0; 1|]; [|7; 0; 1|]; [|7; 0; 1|]; ...|]\nval outputs : int [] =\n [|0; 1; 0; 1; 0; 0; 1; 0; 0; 0; 0; 0; 0; 1; 0; 0; 0; 0; 0; 0; 1; 1; 1; 0; 1;\n 0; 0; 0; 0; 0; 1; 0; 0; 0; 0; 0; 1; 1; 1; 0; 1; 1; 0; 1; 0; 0; 1; 0; 0; 0;\n 0; 0; 0; 1; 0; 1; 0; 0; 0; 0; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 1; 0; 0; 0;\n 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;\n ...|]\n\n>\n\n```", "```py\nlet tree = DecisionTree(attributes, classCount)\nlet id3learning = ID3Learning(tree)\nlet error = id3learning.Run(inputs, outputs)\n```", "```py\nval error : float = 0.2843236362\n\n```", "```py\nlet query = ([|10;6;1|])\nlet output = tree.Compute(query) \n```", "```py\nval query : int [] = [|10; 6; 1|]\nval output : int = 0\n\n```", "```py\ndataFrame \n    |> Seq.countBy (fun ts -> ts.Month) \n    |> Seq.sort\n    |> Seq.iter (fun t ->  printfn \"%A\" t)\n\ndataFrame \n    |> Seq.countBy (fun ts -> ts.DayOfWeek) \n    |> Seq.sort\n    |> Seq.iter (fun t ->  printfn \"%A\" t)\n\ndataFrame \n    |> Seq.countBy (fun ts -> ts.AMPM) \n    |> Seq.sort\n    |> Seq.iter (fun t ->  printfn \"%A\" t)\n\ndataFrame \n    |> Seq.countBy (fun ts -> ts.ReceviedTicket) \n    |> Seq.sort\n    |> Seq.iter (fun t ->  printfn \"%A\" t)\n```", "```py\n(1, 2125)\n(2, 1992)\n(3, 2529)\n(4, 1972)\n(5, 2342)\n(6, 2407)\n(7, 2198)\n(8, 2336)\n(9, 3245)\n(10, 1910)\n(11, 1989)\n(12, 1664)\n(Sunday, 3019)\n(Monday, 3169)\n(Tuesday, 3549)\n(Wednesday, 4732)\n(Thursday, 4911)\n(Friday, 4012)\n(Saturday, 3317)\n(\"AM\", 9282)\n(\"PM\", 17427)\n(Some false, 19081)\n(Some true, 7628)\n\nval it : unit = ()\n\n```", "```py\nlet getQuarter(month:int) =\n    match month with\n    | 1 | 2 | 3 -> 1\n    | 4 | 5 | 6 -> 2\n    | 7 | 8 | 9 -> 3\n    | _ -> 4\n\nlet inputs' = \n    dataFrame \n    |> Seq.map (fun ts -> [|getQuarter((ts.Month)); int ts.DayOfWeek; getAMPM'(ts.AMPM)|])\n    |> Seq.toArray\n\nlet outputs' = \n    dataFrame \n    |> Seq.map (fun ts -> receivedTicket'(ts.ReceviedTicket.Value))\n    |> Seq.toArray\n\nlet error' = id3learning.Run(inputs', outputs')\n```", "```py\nval error' : float = 0.2851473286\n\n```", "```py\nPM> Install-Package numl\n\n```", "```py\n#r \"System.Data.Entity.dll\"\n#r \"FSharp.Data.TypeProviders.dll\"\n#r \"System.Data.Linq.dll\"\n\nopen System\nopen System.Data.Linq\nopen System.Data.Entity\nopen Microsoft.FSharp.Data.TypeProviders\n\n[<Literal>]\nlet connectionString = \"data source=nc54a9m5kk.database.windows.net;initial catalog=Traffic;user id=chickenskills@nc54a9m5kk;password=sk1lzm@tter;\"\n\ntype EntityConnection = SqlEntityConnection<connectionString,Pluralize = true>\nlet context = EntityConnection.GetDataContext()\n\ntype TrafficStop = {Month:int; DayOfWeek:DayOfWeek; AMPM: string; ReceivedTicket: option<bool>}\n\nlet getAMPM (stopDateTime:System.DateTime) =\n    match stopDateTime.Hour < 12 with\n    | true -> \"AM\"\n    | false -> \"PM\"\n\nlet receviedTicket (disposition:string) =\n    match disposition.ToUpper() with\n    | \"CITATION\" -> Some true\n    | \"VERBAL WARNING\" | \"WRITTEN WARNING\" -> Some false\n    | _ -> None\n\nlet dataFrame = \n    context.dbo_TrafficStops\n    |> Seq.map (fun ts -> {Month=ts.StopDateTime.Value.Month;DayOfWeek=ts.StopDateTime.Value.DayOfWeek;\n       AMPM=getAMPM(ts.StopDateTime.Value); ReceivedTicket= receviedTicket(ts.DispositionDesc) })\n    |> Seq.filter (fun ts -> ts.ReceivedTicket.IsSome)\n    |> Seq.toArray\n```", "```py\n#r \"../packages/numl.0.8.26.0/lib/net40/numl.dll\"\nopen numl\nopen numl.Model\nopen numl.Supervised.DecisionTree\n```", "```py\ntype TrafficStop' = {[<Feature>] Month:int; [<Feature>] DayOfWeek:int; \n    [<Feature>] AMPM: string; [<Label>] ReceivedTicket: bool}\n\nlet dataFrame' = \n    dataFrame \n    |> Seq.map (fun ts -> {TrafficStop'.Month = ts.Month; DayOfWeek = int ts.DayOfWeek; AMPM=ts.AMPM; ReceivedTicket=ts.ReceivedTicket.Value})\n    |> Seq.map box\n\nlet descriptor = Descriptor.Create<TrafficStop'>()\n```", "```py\ntype TrafficStop' =\n {Month: int;\n DayOfWeek: int;\n AMPM: string;\n ReceivedTicket: bool;}\nval dataFrame' : seq<obj>\nval descriptor : Descriptor =\n Descriptor (TrafficStop') {\n [Month, -1, 1]\n [DayOfWeek, -1, 1]\n [AMPM, -1, 0]\n *[ReceivedTicket, -1, 1]\n}\n\n```", "```py\nlet generator = DecisionTreeGenerator(descriptor)\ngenerator.SetHint(false)\nlet model = Learner.Learn(dataFrame', 0.80, 25, generator)\n```", "```py\nval generator : DecisionTreeGenerator\nval model : LearningModel =\n Learning Model:\n Generator numl.Supervised.DecisionTree.DecisionTreeGenerator\n Model:\n [AM, 0.0021]\n |- 0\n |  [Month, 0.0021]\n |   |- 1 ≤ x < 6.5\n |   |  [DayOfWeek, 0.0001]\n |   |   |- 0 ≤ x < 3\n |   |   |   +(False, -1)\n |   |   |- 3 ≤ x < 6.01\n |   |   |   +(False, -1)\n |   |- 6.5 ≤ x < 12.01\n |   |   +(False, -1)\n |- 1\n |   +(False, -1)\n\n Accuracy: 71.98 %\n\n>\n\n```"]