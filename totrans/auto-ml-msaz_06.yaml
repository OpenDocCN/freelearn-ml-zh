- en: '*Chapter 4*: Building an AutoML Regression Solution'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第4章*：构建AutoML回归解决方案'
- en: You've taken the first step to becoming an Azure AutoML expert by building a
    solution with the AutoML guided user interface. Now, it's time to level up your
    skills by creating a solution with the **Azure Machine Learning Python Software
    Development Kit** (**AzureML Python SDK**). Using the Diabetes dataset that we
    built in [*Chapter 2*](B16595_02_ePub.xhtml#_idTextAnchor023), *Getting Started
    with Azure Machine Learning Service*, you will build a regression solution to
    predict how much a person's diabetes disease has advanced over the last year.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用AutoML引导用户界面构建解决方案，你已经迈出了成为Azure AutoML专家的第一步。现在，是时候通过创建一个使用**Azure机器学习Python软件开发工具包**（**AzureML
    Python SDK**）的解决方案来提升你的技能了。使用我们在[*第2章*](B16595_02_ePub.xhtml#_idTextAnchor023)，*Azure机器学习服务入门*中构建的Diabetes数据集，你将构建一个回归解决方案来预测一个人在过去一年中糖尿病病情的进展情况。
- en: You will begin this chapter by opening up a Jupyter notebook from your compute
    instance, which will let you write Python code. First, you will load in the Diabetes
    data. Then, you will train an AutoML model and register your trained model to
    your **Azure Machine Learning Service (AMLS)** workspace. You will accomplish
    this by using easily reusable Python scripts. After examining your model's results,
    you will learn how to register your model so that it can be optimized for a variety
    of regression-specific metrics and fine-tune your solution to improve performance.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 你将从这个章节开始，在你的计算实例中打开一个Jupyter笔记本，这将让你能够编写Python代码。首先，你将加载Diabetes数据。然后，你将训练一个AutoML模型并将你的训练模型注册到你的**Azure机器学习服务（AMLS）**工作区。你将通过使用易于重用的Python脚本来完成这项工作。在检查你的模型结果后，你将学习如何注册你的模型，以便它可以针对各种回归特定指标进行优化，并微调你的解决方案以提高性能。
- en: By the end of this chapter, you will have full mastery and knowledge of Azure
    AutoML's regression capabilities and be able to train regression models using
    your own data.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将完全掌握Azure AutoML的回归功能，并能够使用自己的数据训练回归模型。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Preparing data for AutoML regression
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 准备AutoML回归数据
- en: Training an AutoML regression model
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 训练AutoML回归模型
- en: Registering your trained regression model
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注册你的训练好的回归模型
- en: Fine-tuning your AutoML regression model
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 微调你的AutoML回归模型
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The following are the prerequisites for this chapter:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的先决条件如下：
- en: Access to the internet
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 上网权限
- en: A web browser, preferably Google Chrome or Microsoft Edge Chromium
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个网络浏览器，最好是Google Chrome或Microsoft Edge Chromium
- en: A Microsoft Azure account
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个Microsoft Azure账户
- en: An Azure Machine Learning service workspace
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure机器学习服务工作区
- en: The `titanic-compute-instance` compute instance from [*Chapter 2*](B16595_02_ePub.xhtml#_idTextAnchor023),
    *Getting Started with Azure Machine Learning Service*
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 来自[*第2章*](B16595_02_ePub.xhtml#_idTextAnchor023)，*Azure机器学习服务入门*的`titanic-compute-instance`计算实例
- en: The `compute-cluster` compute cluster from [*Chapter 2*](B16595_02_ePub.xhtml#_idTextAnchor023),
    *Getting Started with Azure Machine Learning Service*
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 来自[*第2章*](B16595_02_ePub.xhtml#_idTextAnchor023)，*Azure机器学习服务入门*的`compute-cluster`计算集群
- en: The `Diabetes Sample` dataset from [*Chapter 2*](B16595_02_ePub.xhtml#_idTextAnchor023),
    *Getting Started with Azure Machine Learning Service*
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 来自[*第2章*](B16595_02_ePub.xhtml#_idTextAnchor023)，*Azure机器学习服务入门*的`Diabetes Sample`数据集
- en: 'The code for this chapter is available here: [https://github.com/PacktPublishing/Automated-Machine-Learning-with-Microsoft-Azure/blob/master/Chapter04/Chapter-4-AutoML-on-Azure.ipynb](https://github.com/PacktPublishing/Automated-Machine-Learning-with-Microsoft-Azure/blob/master/Chapter04/Chapter-4-AutoML-on-Azure.ipynb).'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码在此处可用：[https://github.com/PacktPublishing/Automated-Machine-Learning-with-Microsoft-Azure/blob/master/Chapter04/Chapter-4-AutoML-on-Azure.ipynb](https://github.com/PacktPublishing/Automated-Machine-Learning-with-Microsoft-Azure/blob/master/Chapter04/Chapter-4-AutoML-on-Azure.ipynb)。
- en: Preparing data for AutoML regression
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备AutoML回归数据
- en: Before you can train any model with AutoML, you must have a properly cleansed
    dataset. This section will walk you through how to prepare data for any AutoML
    regression solution. You will begin by using your compute instance to access Jupyter
    notebook, a code editor that will let you code in Python. Following that, you
    will cleanse, transform, and register your data as an Azure dataset. This will
    give you a dataset that's ready for training in the next section.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在您可以使用AutoML训练任何模型之前，您必须有一个经过适当清洗的数据集。本节将指导您如何为任何AutoML回归解决方案准备数据。您将首先使用计算实例访问Jupyter笔记本，这是一个代码编辑器，让您可以用Python编写代码。之后，您将清洗、转换并注册您的数据作为Azure数据集。这将为您提供一个下一节中准备用于训练的数据集。
- en: Some of you may be new to Python or even to coding in general, but don't worry.
    While scripting an AutoML solution may seem much more difficult than using the
    *GUI*, in reality, it's a matter of making slight changes to boilerplate code.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 一些人对Python甚至是一般编程可能比较陌生，但不用担心。虽然编写AutoML解决方案可能看起来比使用*GUI*要困难得多，但实际上，这只是对样板代码进行微小修改的问题。
- en: Using the code found in this book's GitHub repository, you only have to alter
    it slightly to adapt it to your own custom solution using your own custom data.
    Furthermore, for this exercise, you've already completed most of the prerequisites.
    You have your **compute instance**, **compute cluster**, and **dataset** ready,
    and you're only a few lines of code away from being ready to train an AutoML regression
    solution.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 使用本书GitHub仓库中找到的代码，您只需稍作修改即可将其适应您自己的定制解决方案，并使用您自己的定制数据。此外，对于这个练习，您已经完成了大部分先决条件。您已经有了**计算实例**、**计算集群**和**数据集**，您只需几行代码就可以准备好训练AutoML回归解决方案。
- en: Setting up your Jupyter environment
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置您的Jupyter环境
- en: To write code yourself, you must open a Jupyter notebook. **Jupyter notebook**
    is an environment where you can write, edit, and run Python code. **Python** is
    a general-purpose programming language that is extremely popular among machine
    learning practitioners and forms the basis of the Azure Machine Learning service.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 要自己编写代码，您必须打开一个Jupyter笔记本。**Jupyter笔记本**是一个可以编写、编辑和运行Python代码的环境。**Python**是一种在机器学习从业者中极其流行的通用编程语言，是Azure
    Machine Learning服务的基础。
- en: 'The following steps will teach you how to access a Jupyter notebook environment
    through your Azure compute instance. You will then learn how to create a notebook
    within this environment that will allow you to script your AutoML regression solution:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将指导您如何通过Azure计算实例访问Jupyter笔记本环境。然后，您将学习如何在环境中创建一个笔记本，这将允许您编写AutoML回归解决方案的脚本：
- en: First, open Azure Machine Learning Studio by navigating to [http://ml.azure.com](http://ml.azure.com).
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，通过导航到[http://ml.azure.com](http://ml.azure.com)打开Azure Machine Learning Studio。
- en: Once you are in the studio, click **Compute** on the right-hand side of the
    studio, under **Manage**.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦您进入工作室，点击工作室右侧的**管理**下的**计算**。
- en: If your compute instance is currently paused, check the circular checkbox next
    to `titanic-compute-instance` and click the **Start** button.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您的计算实例目前处于暂停状态，请检查`titanic-compute-instance`旁边的圆形复选框，并点击**启动**按钮。
- en: Then, click **Jupyter** under **Application URI**, as shown in *Figure 4.1*:![Figure
    4.1 – Accessing your Jupyter environment ](img/B16595_4_01.jpg)
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，点击**应用程序URI**下的**Jupyter**，如图*图4.1*所示：![图4.1 – 访问您的Jupyter环境](img/B16595_4_01.jpg)
- en: Figure 4.1 – Accessing your Jupyter environment
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图4.1 – 访问您的Jupyter环境
- en: Once you have accessed your Jupyter environment, the next step is to create
    a Jupyter notebook. You can create as many Jupyter notebooks as you like, and
    you can also use this environment to upload and download files, create folder
    structures, and run both Python and R scripts. **R** is another programming language
    that is popular with machine learning practitioners, but we will not cover it
    in this book.
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一旦您访问了您的Jupyter环境，下一步就是创建一个Jupyter笔记本。您可以创建任意数量的Jupyter笔记本，您还可以使用此环境上传和下载文件，创建文件夹结构，并运行Python和R脚本。**R**是另一种在机器学习从业者中流行的编程语言，但本书中我们将不涉及它。
- en: Click **New** in the upper right-hand corner of your screen to access the drop-down
    menu.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在屏幕右上角点击**新建**以访问下拉菜单。
- en: Select **Python 3.6 – AzureML** from the drop-down menu, as shown in the *Figure
    4.2*:![Figure 4.2 – Creating a Jupyter notebook ](img/B16595_4_02.jpg)
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从下拉菜单中选择**Python 3.6 – AzureML**，如图*图4.2*所示：![图4.2 – 创建Jupyter笔记本](img/B16595_4_02.jpg)
- en: Figure 4.2 – Creating a Jupyter notebook
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图4.2 – 创建Jupyter笔记本
- en: Click the new Jupyter notebook that appears in the top-left corner of your screen;
    that is, `Untitled.ipynb`.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Rename `Untitled.ipynb` to `Diabetes_Regression_AutoML` by clicking `Diabetes_Regression_AutoML`
    into the resulting textbox, and clicking **Rename**, as shown in *Figure 4.3*:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.3 – Renaming your Jupyter notebook ](img/B16595_4_03.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
- en: Figure 4.3 – Renaming your Jupyter notebook
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: By creating and renaming your Jupyter notebook, you are now ready to begin coding
    in Python. This is also a step-by-step, repeatable process that consists of mostly
    boilerplate code. **Boilerplate** refers to code that can be reused from project
    to project and requires little to no customization. As such, you can write Azure
    AutoML scripts with next to no Python experience.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: Preparing your data for AutoML
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Every AutoML script begins exactly the same way. First, you load in your Python
    libraries. **Libraries** are simply collections of useful functions that let you
    complete complex tasks without having to write complicated code yourself. Then,
    you must set your **workspace, datastore, compute cluster,** and **dataset**.
    Once you've done this, manipulate your data if necessary and save it to a new
    dataset. If this is not necessary, simply move on to the *Training an AutoML regression
    model* section after loading your dataset.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following steps, you will load all the necessary libraries you''ll need
    to run the entire notebook from start to finish. These libraries are sufficient
    to run the data preparation, model training, and model registration portions of
    this chapter. You will then load the Diabetes dataset you created previously in
    [*Chapter 2*](B16595_02_ePub.xhtml#_idTextAnchor023)*, Getting Started with Azure
    Machine Learning Service*. After loading the data, you will make some slight data
    transformations before registering it as a new dataset. Let''s get started:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: 'Load in all the libraries you will need to run everything in this chapter by
    using the following code:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '`Workspace` lets you connect to your `Dataset` and `Datastore` let you access
    your previously created datasets and datastores, while `Experiment` lets you log
    the results of your AutoML.'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`ComputeTarget` lets you use your compute cluster to run your AutoML job. On
    the other hand, `AutoMLConfig` enables you to configure your run, while `AutoMLRun`
    is necessary to train your model. Finally, `RunDetails` lets you track your job
    in real time.'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Load in `pandas`, in particular, is necessary to view the data in your dataset:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Connect your Jupyter notebook to your AMLS workspace by using the following
    code:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Set your compute cluster to the one you created in [*Chapter 2*](B16595_02_ePub.xhtml#_idTextAnchor023)*,
    Getting Started with Azure Machine Learning Service*, by using the following code:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Set your datastore by using the following code. For this exercise, we will
    use the `workspaceblobstore` with the name of your datastore:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Set your dataset by using the following code. Use the `Diabetes Sample` dataset
    you created in [*Chapter 2*](B16595_02_ePub.xhtml#_idTextAnchor023)*, Getting
    Started with Azure Machine Learning Service*, for this. You can reuse this code
    by replacing the name shown in the following code:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码设置你的数据集。为此，请使用你在 [*第2章*](B16595_02_ePub.xhtml#_idTextAnchor023)*，Azure机器学习服务入门*
    中创建的 `Diabetes Sample` 数据集。你可以通过替换以下代码中显示的名称来重用此代码：
- en: '[PRE5]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Important Note
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重要提示
- en: For this code, you will always need to use the latest version of your dataset.
    If you wish to use an earlier version of your dataset, you can replace `'latest'`
    with a number.
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于这段代码，你将始终需要使用你数据集的最新版本。如果你希望使用你数据集的早期版本，你可以将 `'latest'` 替换为一个数字。
- en: 'View the first 10 rows of your data, as shown in the following screenshot,
    by using the following code:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码查看你的数据的前10行，如图所示：
- en: '[PRE6]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Whenever you view your data, it's important that you make sure the data looks
    correct. Verify that the columns have names that match what you expect. Make sure
    that the values are of the correct type, numeric or string, and that the values
    themselves look appropriate. If you see a number higher than 120 in the `AGE`
    column, for example, you may have problems in the dataset.
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 每次查看你的数据时，确保数据看起来正确是很重要的。验证列名是否与你的预期相符。确保值是正确的类型，数值或字符串，并且值本身看起来是合适的。例如，如果你在
    `AGE` 列中看到一个大于120的数字，你可能在数据集中有问题。
- en: If you do find any inconsistencies within your data, it is important that you
    fix them before training a model with AutoML. Leaving string values in columns
    that should be numeric will cause AutoML to treat those columns as categorical.
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你确实在你的数据中发现了任何不一致性，在用AutoML训练模型之前修复它们是很重要的。在应该为数值的列中留下字符串值会导致AutoML将这些列视为分类。
- en: In some cases, this will result in inferior performance. Likewise, leaving errors
    in your data may result in models that fail to make accurate predictions. As the
    old data science saying goes, "*Garbage in, garbage out*." Always inspect your
    data to make sure it's not garbage.
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在某些情况下，这可能会导致性能下降。同样，在数据中留下错误可能会导致模型无法做出准确的预测。正如老数据科学谚语所说，“*垃圾进，垃圾出*。”始终检查你的数据，确保它不是垃圾。
- en: 'The output should resemble *Figure 4.4*:'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出应该类似于 *图4.4*：
- en: '![Figure 4.4 – Viewing your dataset ](img/B16595_4_04.jpg)'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图4.4 – 查看你的数据集](img/B16595_4_04.jpg)'
- en: Figure 4.4 – Viewing your dataset
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图4.4 – 查看你的数据集
- en: 'If you wish to change anything about your data, use pandas to do so by converting
    your dataset into a pandas DataFrame using the following code:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你希望更改你的数据中的任何内容，请使用 pandas 通过以下代码将你的数据集转换为 pandas DataFrame 来这样做：
- en: '[PRE7]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'One common thing you may want to do is drop columns. You should drop any columns
    that are derived from the field that you are trying to predict that contain nearly
    all null values, or that will not be available when you''re processing new data.
    For example, if you don''t know the new patient''s `Sex` and `Age`, you can use
    the pandas `drop` function, as shown in the following code:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可能想要做的一件常见事情是删除列。你应该删除任何来自你试图预测的字段的列，这些列几乎全部是空值，或者在你处理新数据时将不可用。例如，如果你不知道新患者的
    `Sex` 和 `Age`，你可以使用 pandas 的 `drop` 函数，如下所示：
- en: '[PRE8]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Reregister your altered data and give the dataset a new name; that is, `Diabetes
    Sample Age/Sex Dropped`. Using the following code, you can save your altered pandas
    DataFrame to your datastore:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新注册你修改后的数据，并给数据集一个新的名称；即，`Diabetes Sample Age/Sex Dropped`。使用以下代码，你可以将你的修改后的
    pandas DataFrame 保存到你的数据存储中：
- en: '[PRE9]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Another common transformation you may want to try is binning. `Age` column
    into three different groups: children younger than 18 years old, adults between
    the ages of 18 to 64, and seniors older than 64 years old. The following code
    illustrates this:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可能想要尝试的另一个常见转换是分箱。将 `Age` 列分为三个不同的组：18岁以下的孩子，18至64岁的成年人，以及64岁以上的老年人。以下代码说明了这一点：
- en: '[PRE10]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Data scientists can also remove outliers. `Age` column:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 数据科学家还可以移除异常值。`Age` 列：
- en: '[PRE11]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'One last common data transformation is creating categorical columns from numeric
    columns based on cutoff points. Obesity is defined as having a BMI of 30 or greater.
    We can make a column, `Obesity_Flag`, that contains a `1` or `0` value to indicate
    whether an individual is obese with the following code:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后一个常见的数据转换是从数值列创建基于截止点的分类列。肥胖被定义为BMI为30或更高。我们可以使用以下代码创建一个包含 `1` 或 `0` 值的列，`Obesity_Flag`，以指示个人是否肥胖：
- en: '[PRE12]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Once again, save your altered data to your datastore and register it as a dataset
    called `Diabetes Sample Full Transform` by using the following code:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次，使用以下代码将修改后的数据保存到你的数据存储中，并注册为一个名为`Diabetes Sample Full Transform`的数据集：
- en: '[PRE13]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: You have accomplished a lot in this section. Your libraries have been loaded
    in, your workspace has been set, and you have all the necessary resources coded
    to easily create an AutoML run. Additionally, you have multiple versions of your
    Diabetes data saved as different datasets that you will use to train three AutoML
    models in the next section.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一节中，你已经取得了很大的成就。你的库已经加载，你的工作空间已经设置，你已经将所有必要的资源编码，以便轻松创建一个AutoML运行。此外，你已经将你的糖尿病数据保存为不同的数据集，你将在下一节中使用这些数据集来训练三个AutoML模型。
- en: Training an AutoML regression model
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 训练AutoML回归模型
- en: Compared to setting up your Jupyter environment and preparing your data, training
    an AutoML model involves fewer steps. First, you will need to set a name for your
    **experiment**. Remember that experiments automatically log information about
    your AutoML runs. Next, you will need to set your **Target** column, which is
    the column you wish to predict, and a few other settings. Finally, you will use
    AutoML to train a model and watch the results in real time.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 与设置你的Jupyter环境和准备你的数据相比，训练一个AutoML模型涉及更少的步骤。首先，你需要给你的**实验**命名。记住，实验会自动记录你的AutoML运行信息。接下来，你需要设置你的**目标**列，这是你希望预测的列，以及一些其他设置。最后，你将使用AutoML来训练一个模型，并实时查看结果。
- en: 'In this section, you will create an experiment, configure the various parameters
    and settings specific to AutoML regression tasks, and train three AutoML regression
    models using the datasets you created in the previous section. Let''s get started:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你将创建一个实验，配置AutoML回归任务特定的各种参数和设置，并使用上一节中创建的数据库训练三个AutoML回归模型。让我们开始吧：
- en: 'Set `Experiment` and give it a name by using the following code. This is where
    all of the logs and metrics of your run will be stored in the AML studio:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码设置`实验`并给它命名。这是你的所有运行日志和指标将在AML工作室中存储的地方：
- en: '[PRE14]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Set your `Target` column with the following code. AutoML will train a model
    that predicts the value of this column – in this case, the `Y` column:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码设置你的`目标`列。AutoML将训练一个模型来预测这个列的值——在这个例子中，是`Y`列：
- en: '[PRE15]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Create a variable for your `task` using the following code. `task` is the type
    of AutoML model you are trying to train, and the options for this are regression,
    forecasting, and classification. For predicting numeric values that do not have
    a time element, enter `regression`:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码为你的`任务`创建一个变量。`任务`是你试图训练的AutoML模型类型，这个选项包括回归、预测和分类。对于预测没有时间元素的数值，输入`regression`：
- en: '[PRE16]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Important Note
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重要提示
- en: If you are trying to predict data that has a time element, use *forecasting*
    instead of *regression*. If `date` is one of your columns or you are trying to
    predict future values based on the current situation, use *forecasting*.
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你试图预测具有时间元素的数据，请使用*预测*而不是*回归*。如果`日期`是你的列之一，或者你试图根据当前情况预测未来的值，请使用*预测*。
- en: Create a variable for your primary metric. This **primary metric** is how your
    model will be scored. You should use **normalized root mean squared error** here.
    This metric, referred to as **RSME**, takes the prediction and subtracts it from
    the actual value for each observation, squares it, and averages the score across
    all observations. The lower the score, the better your model. Other options for
    regression include **R2 score**, **Spearman correlation**, and **normalized mean
    absolute error**.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为你的主要指标创建一个变量。这个**主要指标**是评估你的模型的方式。你应该在这里使用**归一化均方根误差**。这个指标，被称为**RSME**，将预测值从每个观察的实际值中减去，然后平方，并平均所有观察的得分。得分越低，你的模型越好。回归的其他选项包括**R2分数**、**Spearman相关系数**和**归一化平均绝对误差**。
- en: 'The following code creates a variable and sets it to normalized RMSE. This
    variable will be passed into your AutoML configuration settings later:'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下代码创建了一个变量并将其设置为归一化RMSE。这个变量将在稍后传递到你的AutoML配置设置中：
- en: '[PRE17]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Create a variable for `featurization`. You can set featurization to `auto` or
    `off`. If you set featurization to `auto`, you will have to drop high-cardinality
    features, impute null values, one-hot encode your data, and generate additional
    features yourself.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为`特征化`创建一个变量。你可以将特征化设置为`auto`或`off`。如果你将特征化设置为`auto`，你将不得不删除高基数特征，填充空值，对数据进行独热编码，并自己生成额外的特征。
- en: 'Always set it to `auto` unless you are an expert data scientist and are comfortable
    doing everything yourself. The following code also creates a new variable that
    you will pass into your AutoML configuration settings:'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 除非你是经验丰富的数据科学家并且能够舒适地自己完成所有工作，否则请始终将其设置为 `auto`。以下代码还创建了一个新变量，你将把它传递到AutoML配置设置中：
- en: '[PRE18]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: To configure your AutoML, run the following code. Here, you will pass in your
    task, primary metric, featurization settings, compute target, dataset, and target
    column. You created all of these previously.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要配置你的AutoML，请运行以下代码。在这里，你将传递你的任务、主要指标、特征化设置、计算目标、数据集和目标列。你之前都创建过这些。
- en: 'You must also pass in how long the experiment will run for, whether it will
    stop early if the model''s performance does not improve, the number of cross-validations,
    and whether your experiment will record model explanations. `5` and `20`:'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你还必须传递实验将运行多长时间，如果模型性能没有提高，是否将提前停止，交叉验证的次数，以及你的实验是否将记录模型解释。`5` 和 `20`：
- en: '[PRE19]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Train your model and watch the results in real time. The following code trains
    the AutoML model with your configuration settings and logs the results of the
    run to the experiment you created earlier.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 训练你的模型并实时查看结果。以下代码使用你的配置设置训练AutoML模型，并将运行结果记录到之前创建的实验中。
- en: 'As it runs, this code will allow you to track the progress of your session
    in real time. Here, you can watch AutoML check the validity of your data, train
    models iteratively, and select the best model:'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在运行过程中，此代码将允许你实时跟踪会话的进度。在这里，你可以看到AutoML检查数据的有效性，迭代训练模型，并选择最佳模型：
- en: '[PRE20]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'If you''ve done everything correctly, your AutoML run will kick off and you
    can sit back, relax, and watch it train models. First, you will see it perform
    a **data guardrails** check, as shown in *Figure 4.5*:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你一切操作正确，你的AutoML运行将启动，你可以坐下来放松，观看它训练模型。首先，你会看到它执行 **数据守卫** 检查，如图 *4.5* 所示：
- en: '![Figure 4.5 – Data guardrails check ](img/B16595_4_05.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.5 – 数据守卫检查](img/B16595_4_05.jpg)'
- en: Figure 4.5 – Data guardrails check
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.5 – 数据守卫检查
- en: 'Next, AutoML will start training your models. You will notice that AutoML will
    train different combinations of feature transformations and algorithms. In cases
    where an identical feature transformation/algorithm pair is replicated, AutoML
    tests different hyperparameter combinations for that algorithm. As it runs, you
    will be able to track how long each model took to train, how well it scored, and
    the score of the best-performing model, as shown in *Figure 4.6*:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，AutoML 将开始训练你的模型。你会注意到AutoML会训练不同组合的特征转换和算法。在相同的特征转换/算法对被复制的情况下，AutoML会为该算法测试不同的超参数组合。在运行过程中，你将能够跟踪每个模型训练所需的时间、得分以及最佳性能模型的得分，如图
    *4.6* 所示：
- en: '![Figure 4.6 – AutoML results ](img/B16595_4_06.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.6 – AutoML 结果](img/B16595_4_06.jpg)'
- en: Figure 4.6 – AutoML results
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.6 – AutoML 结果
- en: Notice how the AutoML trained models do not progressively get better with each
    run. The first model that was trained has a normalized RMSE of `0.1808`. The third
    model trained has a score of `0.2027`. With normalized RMSE, the lower your score,
    the better.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 注意到AutoML训练的模型在每次运行中并不逐渐变得更好。第一个训练的模型具有归一化RMSE为 `0.1808`。第三个训练的模型得分为 `0.2027`。使用归一化RMSE，你的得分越低，表示越好。
- en: By the end of the experiment, the best model has a score of `0.1682`. When you
    run the model, you should see similar, but not exact, results, depending on which
    models AutoML trains. While you can see which models and transformations are being
    used under the `PIPELINE` column, hyperparameters remain hidden due to their large
    number for some algorithms.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 实验结束时，最佳模型的得分为 `0.1682`。当你运行模型时，你应该看到类似但不是完全相同的结果，这取决于AutoML训练了哪些模型。虽然你可以在 `PIPELINE`
    列下看到正在使用的模型和转换，但由于某些算法的参数数量庞大，超参数仍然隐藏。
- en: You can also get a visualization of these results, as shown in the following
    graph. Given enough time, you will notice that AutoML gets better and better.
    This is because it's following its own internal logic of trying different feature
    engineering/algorithm pairs until it can no longer find a higher-performing model,
    upon which AutoML will finish with two ensemble algorithms and end the run.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以通过以下图表获得这些结果的可视化。给定足够的时间，你会注意到AutoML会越来越好。这是因为它遵循自己的内部逻辑，尝试不同的特征工程/算法对，直到它无法找到更高性能的模型，此时AutoML将使用两种集成算法结束运行。
- en: Generally speaking, either `Diabetes Sample Age/Sex Dropped` dataset and another
    using the `Diabetes Sample Full Transform` dataset.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 通常来说，要么是使用`Diabetes Sample Age/Sex Dropped`数据集，要么是使用`Diabetes Sample Full Transform`数据集。
- en: '*Figure 4.7* provides a visualization of the results:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '*图4.7*提供了结果的可视化：'
- en: '![Figure 4.7 – AutoML results visualized](img/B16595_4_07.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![图4.7 – AutoML结果可视化](img/B16595_4_07.jpg)'
- en: Figure 4.7 – AutoML results visualized
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.7 – AutoML结果可视化
- en: In addition to these two charts, both of which can be found in your Jupyter
    notebook, there are two more visualizations you can access via AML studio. These
    are the **Predicted vs True** graph and your **Residuals** histogram. *Predicted
    vs True* shows you how well your model performed versus an ideal model, whereas
    *Residuals* gives you an idea of whether your errors are normally distributed
    or not.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这两个图表，你可以在你的Jupyter笔记本中找到它们之外，还有两个更多通过AML工作室可以访问的可视化。这些是**预测值与真实值**图和你的**残差**直方图。*预测值与真实值*显示了你的模型与理想模型相比的表现如何，而*残差*则可以让你了解你的误差是否呈正态分布。
- en: 'You can access these graphs by following these steps:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过以下步骤访问这些图表：
- en: Navigate to the front page of AML studio.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到AML工作室的首页。
- en: Click **Models** on the left-hand panel, under **Assets**.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**资产**下点击左侧面板中的**模型**。
- en: Click `Diabetes-AllData-Regression-AutoML`. This is the name of the model you
    trained.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击`Diabetes-AllData-Regression-AutoML`。这是你训练的模型名称。
- en: Click the blue link under **Run ID**. It should begin with AutoML, followed
    by a long string of letters and digits. This is the ID that your experiment was
    logged under.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**运行ID**下的蓝色链接。它应该以AutoML开头，后面跟着一长串字母和数字。这是你的实验记录下的ID。
- en: Click **Metrics**.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**指标**。
- en: Check the boxes for **predicted_true** and **residuals**.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开**predicted_true**和**residuals**的复选框。
- en: '*Predicted vs True* shows you how well your predictions performed against a
    model that predicts every data point perfectly. The horizontal axis represents
    your true values, whereas the vertical axis represents your predicted values.
    Likewise, the dotted green line represents the perfect model, while the solid
    blue line represents your actual model. There are also light-blue boundaries around
    your actual model, showing you the confidence interval. Confidence intervals estimate
    a range of how well your model would perform in the real world. Please carefully
    examine *Figure 4.8*:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '*预测值与真实值*显示了你的预测与一个完美预测每个数据点的模型相比的表现如何。水平轴代表你的真实值，而垂直轴代表你的预测值。同样，虚线绿色线代表完美模型，而实线蓝色线代表你的实际模型。你的实际模型周围还有浅蓝色边界，显示置信区间。置信区间估计了你的模型在现实世界中的表现范围。请仔细检查*图4.8*：'
- en: '![Figure 4.8 – Predicted vs. True graph ](img/B16595_4_08.jpg)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![图4.8 – 预测值与真实值图](img/B16595_4_08.jpg)'
- en: Figure 4.8 – Predicted vs. True graph
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.8 – 预测值与真实值图
- en: '*Residuals*, on the other hand, is a histogram that bins your error values
    and counts the number of data points in each bin. Error is simply how far off
    your predicted value was from the true value. For example, in *Figure 4.9*, we
    can see that there about 100 data points where the error fell between -38.5 and
    0, and about 115 data points where the error fell between 0 and 38.5\.'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，*残差*是一个直方图，它将你的误差值分箱，并计算每个箱中的数据点数量。误差只是你的预测值与真实值之间的偏差。例如，在*图4.9*中，我们可以看到大约有100个数据点的误差在-38.5到0之间，大约有115个数据点的误差在0到38.5之间。
- en: 'When examining this chart, you should make sure that it''s bell-shaped. If
    your chart isn''t bell-shaped, this means that something is causing a pattern
    in your errors and that you need to investigate the cause; usually, this means
    you are missing an important variable:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在检查这个图表时，你应该确保它是钟形的。如果你的图表不是钟形的，这意味着你的误差中存在某种模式，你需要调查原因；通常这意味着你遗漏了一个重要的变量：
- en: '![Figure 4.9 – Residuals ](img/B16595_4_09.jpg)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![图4.9 – 残差](img/B16595_4_09.jpg)'
- en: Figure 4.9 – Residuals
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.9 – 残差
- en: Although you have trained a high-performing machine learning model with AutoML,
    your work is not over yet. Ultimately, a machine learning model is only useful
    if you can use it to predict new data points. The past is the past, after all,
    and business value always lies in future situations.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然你已经使用AutoML训练了一个高性能的机器学习模型，但你的工作还没有结束。毕竟，一个机器学习模型只有在你能用它来预测新的数据点时才有用。过去就是过去，商业价值始终在于未来的情况。
- en: In this case, you are trying to predict patient outcomes so that you can identify
    and preemptively treat patients whose disease will progress the most quickly.
    To do so, you must first register your model for future use. We will look at this
    in the next section.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: Registering your trained regression model
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: AutoML lets you easily register your trained models for future use. In [*Chapter
    9*](B16595_09_ePub.xhtml#_idTextAnchor129)*, Implementing a Batch Scoring Solution*,
    and [*Chapter 11*](B16595_11_ePub.xhtml#_idTextAnchor172)*, Implementing a Real-Time
    Scoring Solution*, you will create batch execution inference pipelines and real-time
    scoring endpoints that will use your models. When registering your model, you
    can add tags and descriptions for easier tracking.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: One especially useful feature is the ability to register models based on metrics
    other than the one you used to score your model. Thus, even though you trained
    a model using normalized RMSE, you can also register the model that had the best
    R2 score, even if that model is different.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, you will write a simple description of your model, tag it,
    and give it a name. After that, you will register the model to your AMLS workspace.
    It also contains code that will let you register different models based on other
    metrics. Let''s get started:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: 'First, give your model a name, a description, and some tags. `tags` as you
    wish and feel free to be verbose in your description:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Next, register your model to your AMLS workspace, passing in your model''s
    name, tags, and description. Use the `AutoML_run` process you trained in the previous
    section:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Important Note
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'If time has elapsed since the time you trained your AutoML model, you can retrieve
    it by finding its `AutoML_run` using this ID, as follows:'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`experiment_name = ''Diabetes-Sample-Regression''`'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`exp = Experiment(workspace=ws, name=experiment_name)`'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`AutoML_run = AutoMLRun(experiment = exp, run_id = ''your_run_id'')`'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Try registering a different model based on R2 score. Give it a slightly different
    name, add an additional tag, and use an identical description:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: With that, your model has been registered and is ready for use. You have created
    a regression model that can be used to identify how diabetes is likely to progress
    in a patient over a 1-year period based on their gender, age, blood pressure,
    BMI, and six blood serum measurements. Try registering other AutoML models you've
    trained using the other datasets you created in this chapter. Give them appropriate
    tags, names, and descriptions that differentiate them.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: It's important to emphasize the importance of a good tagging strategy and robust
    descriptions. As you are working on a machine learning project, it's not such
    a big deal, as you will remember which models you trained and what datasets you
    trained them with. However, as you move on to other projects and as time passes,
    your memory becomes less and less reliable. If you don't have good tags, locating
    your models becomes a difficult endeavor.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: A proper tagging strategy will include the project name, the project creator,
    the metric the model was trained on, the dataset the model was trained with, and
    other pertinent information about the model. There is no need to include a version
    number, as AutoML includes one automatically. If you register a different model
    with the same name, a new version of the model will be registered and the old
    one can still be accessed by specifying its version number.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you''ve registered a few different models, try accessing one using the
    following code:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Now, you know how to register and call models that you've trained with AutoML.
    With this accomplished, we can move on and look at some tips and tricks that will
    improve your regression models as you train them more in the future.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: Fine-tuning your AutoML regression model
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, you will first review tips and tricks for improving your AutoML
    regression models and then review the algorithms used by AutoML for regression.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: Improving AutoML regression models
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'While AutoML will handle most of the complicated data transformations and feature
    engineering for you, there are a few tips you can follow to increase the accuracy
    of your model. Some of these tips are true across all three AutoML tasks – *regression*,
    *classification*, and *forecasting* – while others are regression-specific. Following
    them will yield higher-performing models and, more importantly, hone your understanding
    of machine learning techniques. I have listed a few tips and tricks here for quick
    reference:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: Fill in null values before passing them on to AutoML. Alternatively, drop any
    rows that contain a null value. Just because AutoML will automatically fill your
    null values does not mean that it will do a great job.
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In some situations, filling in null values with the mean of the column is appropriate.
    For example, if you''re missing the price of an item, it''s very likely that the
    mean price will approximate the missing value. For noisier columns, think deeply
    about how you should go about filling in missing values or whether you should
    include those datapoints at all. Here''s some Python code that will fill in null
    values for you:'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Become familiar with all of the different AutoML configuration options. You
    can find them at this link: [https://docs.microsoft.com/en-us/python/api/azureml-train-automl-client/azureml.train.automl.automlconfig.automlconfig?view=azure-ml-py](https://docs.microsoft.com/en-us/python/api/azureml-train-automl-client/azureml.train.automl.automlconfig.automlconfig?view=azure-ml-py).'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use `y_min` and `y_max` to take care of any outliers in your `Target` column.
    If you have values that are outliers, such as values that are `3` or more standard
    deviations away from the mean value of your `Target` column, setting `y_min` and
    `y_max` to `3` standard deviations below and above your mean, respectively, can
    yield better performing models. This only applies to regression models.
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following code calculates the mean and standard deviation of the `Target`
    column and uses them to set `y_min` and `y_max`:'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Research the four different primary metrics to understand which metrics fit
    your problem best. Normalized RMSE will suffice for most regression problems,
    but many research papers exist on the pros and cons of using other metrics.
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use [https://docs.microsoft.com/en-us/azure/machine-learning/how-to-understand-automated-ml](https://docs.microsoft.com/en-us/azure/machine-learning/how-to-understand-automated-ml)
    to understand what a good regression model looks like. A good model will have
    unbiased residuals, meaning that your model over and under predicts equally. A
    good model will also more closely fit the ideal line in the *Predicted vs True*
    graph shown in *Figure 4.8*.
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Go to **Experiments** under **Assets** in AML studio, click your experiment's
    name, select your run ID, click the **Models** tab, select the highest-performing
    algorithm, and click the **Metrics** tab. This will provide you with all of the
    different metrics and charts necessary to evaluate your algorithm.
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can use the `weight_column_name` configuration option to assign a weight
    column to your dataset. If some observations are more important to get right than
    others, assign a higher weight to those observations.
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For example, you can assign a weight of 2 to an important observation while
    assigning a weight of 1 to normal observations, thus weighing important observations
    twice as heavily. For example, if you're building an algorithm that predicts electricity
    usage of a factory, you may want to peak usage times more heavily.
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Enable longer experiment runtimes to obtain higher-performing models. Sometimes,
    this enables AutoML to find better hyperparameters for the models it trains. Other
    times, increasing the runtime doesn't help so much, but it's always worth giving
    it a try.
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If AutoML does not provide a satisfactory model, try adding more data. You can
    add either more historical data (more rows) or additional information (more columns).
    Be careful not to add too many columns to a very small dataset, however, as this
    can lead to overfitting.
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Overfitting** is where you produce a very good model that doesn''t generalize
    to new datapoints. If this happens to you, try adding more historical data or
    removing columns from your dataset.'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the end, if, after applying all of these tips and tricks, your model is still
    unsatisfactory, try changing your regression problem to a classification problem.
    Generally, classification problems are easier to solve than regression problems.
    The way you achieve this is by binning your target column.
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Instead of trying to predict a specific number, your algorithm will try to
    predict a range of numbers instead. You have to be creative for this approach
    to work. For example, with the `Diabetes Sample` dataset, try binning the `Target`
    column using the following code:'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Whenever you employ the trick of turning a regression problem into a classification
    problem, keep in mind that the resulting target column must be meaningful. In
    the following screenshot, we can see the values of the `Target` column indicating
    the extent to which the disease has progressed in patients.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: If there are substantial, meaningful differences between the four different
    bins, then this is a valid way to approach the problem. However, if the patients
    in each bin do not differ from each other in terms of medical outcome, then you
    should bin the data to make sure patients are lumped together correctly.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: 'In *Figure 4.10*, we can see the values of the `Target` column indicating the
    extent to which the disease has progressed in patients:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.10 – Results of binning the Diabetes data](img/B16595_4_10.jpg)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
- en: Figure 4.10 – Results of binning the Diabetes data
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: You are now familiar with many of the little techniques that data scientists
    employ to achieve higher-performing models and solve business problems. This list
    is far from exhaustive, and you will encounter more techniques as you build more
    models with AutoML. Anytime you find some interesting way to improve your model's
    performance, it is important to write it down somewhere and store the code in
    a repository.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: Whenever you encounter a difficult problem that seems impossible to solve, reread
    all of the tips in this section, then search your repository. Most of the time,
    with the right data and the right transformations, AutoML will be able to generate
    a solution on par with most data scientists. Other times, it's a matter of fine-tuning
    settings. Sometimes, the only thing you can do is try turning your regression
    problem into a classification problem and try again.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: One last thing that will help you use AutoML more efficiently is developing
    an understanding of the algorithms underlying the technology.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: Understanding AutoML regression algorithms
  id: totrans-186
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: AutoML uses many state-of-the-art machine learning algorithms. While it isn't
    necessary for you to understand them in order to use AutoML, learning more about
    them will help you develop as a data scientist. Certain algorithms perform better
    in certain situations. Furthermore, you can group the algorithms into roughly
    five groups.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: '**Standard regression algorithms** are those which assign coefficients to your
    explanatory variables in order to predict your target column. AutoML uses two
    of these techniques: **Elastic net** and **LARS** (**least angular regression**)
    **lasso**.'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: Elastic net trains a regression model using both L1 and L2 regularization techniques.
    **L1**, also called **lasso**, reduces the coefficients on less important variables
    to 0, while **L2**, called **ridge**, reduces the value of coefficients of less
    important variables. Elastic net combines both techniques to create simpler models
    that are easier to explain while not dropping as many variables as lasso regression.
    LARS lasso is a technique for data with lots of columns that iteratively uses
    the most important columns, but doesn't perform well with noisy data.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: '**Tree algorithms** split data based on a series of if-then decision rules,
    resulting in a mapping that resembles a branching tree. As you go further down
    the tree, you eventually reach a point where the algorithm predicts a value based
    on the series of rules it creates. AutoML uses three of these techniques:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: '**Decision tree** is a simple algorithm which is easily explainable but prone
    to overfitting, performing well on training data at the expense of generalizing
    to new data.'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Random forest** creates an ensemble of decision trees and averages them together.
    Each tree is created from a random sample of the training set and columns are
    randomly chosen to create decision rules.'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Extremely randomized trees** goes one step further by also randomizing the
    values chosen to make splits. This randomness reduces the variance of the models
    when generalized to new data, creating better models.'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Gradient boosting algorithms** work by combining many weak performing decision
    tree models, called **weak learners**, together. These algorithms start by creating
    a single weak leaner, looking for data points on which it doesn''t perform well,
    and creating another weak learner on that subset of data. This process is repeated
    until a certain threshold is met. AutoML uses three of these algorithms: **XGBoost**,
    **LightGBM**, and **gradient boosting**. All three work similarly and were chosen
    based on their high performance, but must be carefully tuned to avoid overfitting.'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: '**Nearest neighbor algorithms** work by looking at each row of data and calculating
    the mean value of similar data points, called nearest neighbors. K-nearest neighbors
    are the sole type of nearest neighbor algorithm used by AutoML. K refers to the
    number of nearest neighbors the algorithm examines when making its prediction.
    KNN works well when your data has a low number of columns as it tends to overfit
    when you use many columns to predict your target column.'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: '**Optimization algorithms** are those that iteratively minimize an objective
    function to try to converge on the best prediction. AutoML uses three of these:
    **Stochastic gradient descent** (**SGD**), **online gradient descent regressor**,
    and **fast linear regressor**. Each of these algorithms work by finding the slope
    of an objective function for each column and working down the slope until it gets
    as close to 0 as possible by adjusting weights.'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: This is a very slow process and SGD works by randomly picking datapoints along
    the slope to get to the minimum as fast as possible; online gradient descent regressor
    works similarly but with different weighting options. Fast linear regressor uses
    a new state-of-the-art optimization technique called **Stochastic Dual Coordinate
    Ascent** (**SDCA**) which optimizes a dual loss function instead of a single loss
    like the other algorithms.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: A summary of the 12 algorithms is provided in Figure 4.11.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.11 – AutoML regression algorithms ](img/B16595_4_11.jpg)'
  id: totrans-199
  prefs: []
  type: TYPE_IMG
- en: Figure 4.11 – AutoML regression algorithms
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition to the preceding 12 algorithms, AutoML also performs **model ensembling**
    at the end of each AutoML training run. Model ensembling is using the predictions
    of multiple machine learning models together to make a prediction. AutoML uses
    two ensembling techniques: voting and stacking.'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
- en: '**Voting ensembles** take a weighted average of your regression models and
    use that to make a prediction. **Stack ensembles**, in contrast, train an elastic
    net model using the output of other models. AutoML will train one voting ensemble
    and one stack ensemble per training run. Usually, one of these two ensemble models
    will be your highest performing model.'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: For more information on these models, please consult the AutoML documentation
    found at [https://docs.microsoft.com/en-us/azure/machine-learning/how-to-configure-auto-train#configure-your-experiment-settings](https://docs.microsoft.com/en-us/azure/machine-learning/how-to-configure-auto-train#configure-your-experiment-settings)
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-204
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With this chapter, you have successfully constructed a regression model using
    the AzureML Python SDK. Regardless of whether you're a Python novice or expert,
    you have loaded data, transformed it extensively using pandas, and built a useful
    machine learning model with AutoML. You then registered your model to an AMLS
    workspace. You will use that same model in future chapters to create inference
    pipelines and real-time scoring endpoints using REST APIs.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: By working through all the exercises in this chapter, you have obtained a level
    of mastery over Azure AutoML regression solutions. You can now take any set of
    data that's useful in predicting a number and use it to create a high-performing
    machine learning model. Furthermore, you can code all of this in Python and, if
    the model fails to perform, you know lots of little ways to improve performance,
    or, if worst comes to worst, change your regression problem to a classification
    problem.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
- en: In [*Chapter 5*](B16595_05_ePub.xhtml#_idTextAnchor068), *Building an AutoML
    Classification Solution*, you will learn how to solve these classification problems
    using AutoML, and then build a machine learning model that predicts a class instead
    of a number.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
