["```py\n> head(iris, n = 3)\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n```", "```py\n> new_sample\nSepal.Length  Sepal.Width Petal.Length  Petal.Width \n4.8          2.9          3.7          1.7\n```", "```py\n> iris_features <- iris[1:4]\n> dist_eucl <- function(x1, x2) sqrt(sum((x1 - x2) ^ 2))\n> distances <- apply(iris_features, 1,\n                     function(x) dist_eucl(x, new_sample))\n> distances_sorted <- sort(distances, index.return = T)\n\n> str(distances_sorted)\nList of 2\n $ x : num [1:150] 0.574 0.9 0.9 0.949 0.954 ...\n $ ix: int [1:150] 60 65 107 90 58 89 85 94 95 99 ...\n```", "```py\n> nn_5 <- iris[distances_sorted$ix[1:5],]\n> nn_5\n    Sepal.Length Sepal.Width Petal.Length Petal.Width    Species\n60           5.2         2.7          3.9         1.4 versicolor\n65           5.6         2.9          3.6         1.3 versicolor\n107          4.9         2.5          4.5         1.7 virginica\n90           5.5         2.5          4.0         1.3 versicolor\n58           4.9         2.4          3.3         1.0 versicolor\n```", "```py\n> library(\"caret\")\n> iris_numeric <- iris[1:4]\n> pp_unit <- preProcess(iris_numeric, method = c(\"range\"))\n> iris_numeric_unit <- predict(pp_unit, iris_numeric)\n> pp_zscore <- preProcess(iris_numeric, method = c(\"center\", \"scale\"))\n> iris_numeric_zscore <- predict(pp_zscore, iris_numeric)\n> pp_boxcox <- preProcess(iris_numeric, method = c(\"BoxCox\"))\n> iris_numeric_boxcox <- predict(pp_boxcox, iris_numeric)\n```", "```py\n> cor(iris_numeric)\n             Sepal.Length Sepal.Width Petal.Length Petal.Width\nSepal.Length    1.0000000  -0.1175698    0.8717538   0.8179411\nSepal.Width    -0.1175698   1.0000000   -0.4284401  -0.3661259\nPetal.Length    0.8717538  -0.4284401    1.0000000   0.9628654\nPetal.Width     0.8179411  -0.3661259    0.9628654   1.0000000\n```", "```py\n> iris_cor <- cor(iris_numeric)\n> findCorrelation(iris_cor)\n[1] 3\n> findCorrelation(iris_cor, cutoff = 0.99)\ninteger(0)\n> findCorrelation(iris_cor, cutoff = 0.80)\n[1] 3 4\n```", "```py\n> new_iris <- iris_numeric\n> new_iris$Cmb <- 6.7 * new_iris$Sepal.Length â€“\n                  0.9 * new_iris$Petal.Width\n> set.seed(68)\n> new_iris$Cmb.N <- new_iris$Cmb +   \n                    rnorm(nrow(new_iris), sd = 0.1)\n> options(digits = 4)\n> head(new_iris,n = 3)\n  Sepal.Length Sepal.Width Petal.Length Petal.Width   Cmb Cmb.N\n1          5.1         3.5          1.4         0.2 33.99 34.13\n2          4.9         3.0          1.4         0.2 32.65 32.63\n3          4.7         3.2          1.3         0.2 31.31 31.27\n```", "```py\n> findLinearCombos(new_iris)\n$linearCombos\n$linearCombos[[1]]\n[1] 5 1 4\n\n$remove\n[1] 5\n```", "```py\n> newer_iris <- iris_numeric\n> newer_iris$ZV <- 6.5\n> newer_iris$Yellow <- ifelse(rownames(newer_iris) == 1, T, F\n> head(newer_iris, n = 3)\n  Sepal.Length Sepal.Width Petal.Length Petal.Width  ZV Yellow\n1          5.1         3.5          1.4         0.2 6.5   TRUE\n2          4.9         3.0          1.4         0.2 6.5  FALSE\n3          4.7         3.2          1.3         0.2 6.5  FALSE\n```", "```py\n> nearZeroVar(newer_iris)\n[1] 5 6\n> nearZeroVar(newer_iris, saveMetrics = T)\n             freqRatio percentUnique zeroVar   nzv\nSepal.Length     1.111       23.3333   FALSE FALSE\nSepal.Width      1.857       15.3333   FALSE FALSE\nPetal.Length     1.000       28.6667   FALSE FALSE\nPetal.Width      2.231       14.6667   FALSE FALSE\nZV               0.000        0.6667    TRUE  TRUE\nYellow         149.000        1.3333   FALSE  TRUE\n```", "```py\n> pp_pca <- preProcess(iris_numeric,  method = c(\"BoxCox\", \"center\", \"scale\", \"pca\"), thresh = 0.95)\n> iris_numeric_pca <- predict(pp_pca, iris_numeric)\n> head(iris_numeric_pca, n = 3)\n     PC1     PC2\n1 -2.304 -0.4748\n2 -2.151  0.6483\n3 -2.461  0.3464\n```", "```py\n> options(digits = 2)\n> pp_pca$rotation\n               PC1    PC2\nSepal.Length  0.52 -0.386\nSepal.Width  -0.27 -0.920\nPetal.Length  0.58 -0.049\nPetal.Width   0.57 -0.037\n```", "```py\n> pp_pca_full <- preProcess(iris_numeric,  method = c(\"BoxCox\", \"center\", \"scale\", \"pca\"), pcaComp = 4)\n> iris_pca_full <- predict(pp_pca_full, iris_numeric)\n> pp_pca_var <- apply(iris_pca_full, 2, var)\n> iris_pca_var <- data.frame(Variance = round(100 * pp_pca_var / sum(pp_pca_var), 2), CumulativeVariance = round(100 * cumsum(pp_pca_var) / sum(pp_pca_var), 2))\n> iris_pca_var\n    Variance CumulativeVariance\nPC1    73.45              73.45\nPC2    22.82              96.27\nPC3     3.20              99.47\nPC4     0.53             100.00\n```", "```py\n> set.seed(2412)\n> iris_sampling_vector <- createDataPartition(iris$Species, p = 0.8, list = FALSE)\n```", "```py\n> iris_train     <- iris_numeric[iris_sampling_vector,]\n> iris_train_z   <- iris_numeric_zscore[iris_sampling_vector,]\n> iris_train_pca <- iris_numeric_pca[iris_sampling_vector,]\n> iris_train_labels <- iris$Species[iris_sampling_vector]\n>\n> iris_test        <- iris_numeric[-iris_sampling_vector,]\n> iris_test_z      <- iris_numeric_zscore[-iris_sampling_vector,]\n> iris_test_pca    <- iris_numeric_pca[-iris_sampling_vector,]\n> iris_test_labels <- iris$Species[-iris_sampling_vector]\n```", "```py\n> knn_model     <- knn3(iris_train, iris_train_labels, k = 5)\n> knn_model_z   <- knn3(iris_train_z, iris_train_labels, k = 5)\n> knn_model_pca <- knn3(iris_train_pca, iris_train_labels, k = 5)\n```"]