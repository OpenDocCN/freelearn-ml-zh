["```py\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom PIL import Image\n# Load an image\nimg = Image.open('../images/roseflower.jpeg')\n```", "```py\n# Convert image to numpy array\nimg_array = np.array(img)\n```", "```py\n# Plot the image\nplt.imshow(img_array)\nplt.show()\n```", "```py\nimport numpy as np\nfrom PIL import Image\nimport matplotlib.pyplot as plt\nimg_color = Image.open('../images/roseflower.jpeg')\n# Convert the image to grayscale\nimg_gray = img_color.convert('L')\n# Convert the image to a NumPy array\nimg_gray_array = np.array(img_gray)\n# Display the image using matplotlib\nplt.imshow(img_gray_array, cmap='gray')\n# Show the plot\nplt.show()\n```", "```py\nimport numpy as np\nfrom PIL import Image\nimport matplotlib.pyplot as plt\n# Load an image\nimg_color = Image.open('../images/roseflower.jpeg')\n# Convert image to numpy array\nimg_array = np.array(img_color)\n# Plot the histogram\nplt.hist(img_array.ravel(), bins=256)\nplt.show()\n```", "```py\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom PIL import Image\n# Load two images\nimg1 = Image.open('./images/roseflower.jpeg')\nimg2 = Image.open('./images/roseflower.jpeg')\n# Convert images to numpy arrays\nimg1_array = np.array(img1)\nimg2_array = np.array(img2)\n# Plot the images side-by-side\nfig, axes = plt.subplots(nrows=1, ncols=2)\naxes[0].imshow(img1_array)\naxes[1].imshow(img2_array)\nplt.show()\n```", "```py\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom PIL import Image\n# Load a color image\nimg = Image.open('../images/roseflower.jpeg')\n# Split the image into RGB channels\nr, g, b = img.split()\n# Convert channels to numpy arrays\nr_array = np.array(r)\ng_array = np.array(g)\nb_array = np.array(b)\n# Plot each channel separately\nfig, axes = plt.subplots(nrows=1, ncols=3)\naxes[0].imshow(r_array, cmap='Reds') # Use 'Reds' colormap for the red channel\naxes[1].imshow(g_array, cmap='Greens') # Use 'Greens' colormap for the green channel\naxes[2].imshow(b_array, cmap='Blues') # Use 'Blues' colormap for the blue channel\nplt.show()\n```", "```py\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom PIL import Image\n# Load an image\nimg = Image.open('../images/roseflower.jpeg')\n# Convert image to numpy array\nimg_array = np.array(img)\n# Plot the image with annotations\nplt.imshow(img_array)\nplt.scatter(100, 200, c='r', s=50)\nplt.annotate(\"Example annotation\", (50, 50), fontsize=12, color='w')\nplt.show()\n```", "```py\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom keras.datasets import cifar10\n# Load the CIFAR-10 dataset\n(x_train, _), (_, _) = cifar10.load_data()\n# Select a sample image for segmentation\nsample_image = x_train[0]  # You can choose any index here\n# Convert the image to grayscale (optional)\ngray_image = np.mean(sample_image, axis=2)\n# Apply a simple thresholding for segmentation\nthreshold = 100\nsegmented_image = np.where(\\\n    gray_image > threshold, 255, 0).astype(np.uint8)\n# Plot the original and segmented images\nplt.figure(figsize=(8, 4))\nplt.subplot(1, 2, 1)\nplt.imshow(sample_image)\nplt.title('Original Image')\nplt.subplot(1, 2, 2)\nplt.imshow(segmented_image, cmap='gray')\nplt.title('Segmented Image')\nplt.tight_layout()\nplt.show()\n```", "```py\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom skimage.feature import hog\nfrom skimage import exposure\nfrom keras.datasets import cifar10\n# Load the CIFAR-10 dataset\n(x_train, _), (_, _) = cifar10.load_data()\n# Select a sample image for feature extraction\nsample_image = x_train[0]  # You can choose any index here\n# Convert the image to grayscale (optional)\ngray_image = np.mean(sample_image, axis=2)\n# Apply Histogram of Oriented Gradients (HOG) feature extraction\nhog_features, hog_image = hog( \\\n    gray_image,pixels_per_cell=(8, 8),\\\n    cells_per_block=(2, 2), visualize=True)\n# Plot the original image and its HOG representation\nplt.figure(figsize=(8, 4))\nplt.subplot(1, 2, 1)\nplt.imshow(gray_image, cmap='gray')\nplt.title('Original Grayscale Image')\nplt.subplot(1, 2, 2)\nplt.imshow(hog_image, cmap='gray')\nplt.title('HOG Feature Extraction')\nplt.tight_layout()\nplt.show()\n```", "```py\nfrom PIL import Image\n# Open an example image\nimage_path = \"../images/roseflower.jpeg\"\nimage = Image.open(image_path)\n# Resize the image using different interpolation methods\nnearest_neighbor_resized = image.resize((100, 100), \\\n    resample=Image.NEAREST)\nbilinear_resized = image.resize((100, 100), \\\n    resample=Image.BILINEAR)\nbicubic_resized = image.resize((100, 100), \\\n    resample=Image.BICUBIC)\nlanczos_resized = image.resize((100, 100), \\\n    resample=Image.LANCZOS)\n# Save the resized images\nnearest_neighbor_resized.save(\"nearest_neighbor_resized.jpg\")\nbilinear_resized.save(\"bilinear_resized.jpg\")\nbicubic_resized.save(\"bicubic_resized.jpg\")\nlanczos_resized.save(\"lanczos_resized.jpg\")\n```", "```py\n #resizing Image\nfrom PIL import Image\n# Open image\nimg = Image.open('../images/roseflower.jpeg')\n# Resize image\nnew_size = (200, 200)\nresized_img = img.resize(new_size)\nresized_img.save(\"resized_image.jpg\")\n```", "```py\nimport os\nimport cv2\n```", "```py\n# Define the path to the image directory\nimg_dir = '../Images/resize_images'\n# Get a list of all image filenames in the directory\nimg_files = [os.path.join(img_dir, f) \\\n    for f in os.listdir(img_dir) \\\n    if os.path.isfile(os.path.join(img_dir, f))]\n```", "```py\n# Define the new size of the images\nnew_size = (224, 224)\n```", "```py\n# Loop through all the image files\nfor img_file in img_files:\n    # Load the image using OpenCV\n    img = cv2.imread(img_file)\n    # Resize the image\n    resized_img = cv2.resize(img, new_size)\n    # Save the resized image with the same filename\n    cv2.imwrite(img_file, resized_img)\n```", "```py\nnormalized_image = (image - min_value) / (max_value - min_value)\n```", "```py\nnormalized_image = (image - mean_value) / std_value\n```", "```py\nimport cv2\n# Load image\nimg = cv2.imread(\"image.jpg\", 0)\n# Apply histogram equalization\nequalized_img = cv2.equalizeHist(img)\n```", "```py\nimport os\nimport cv2\nimport numpy as np\n```", "```py\n# Define the path to the image directory\nimg_dir = 'path/to/image/directory'\n# Get a list of all image filenames in the directory\nimg_files = [os.path.join(img_dir, f) \\\n    for f in os.listdir(img_dir) \\\n    if os.path.isfile(os.path.join(img_dir, f))]\n```", "```py\n# Loop through all the image files\nfor img_file in img_files:\n    # Load the image using OpenCV\n    img = cv2.imread(img_file)\n```", "```py\n    # Convert the image to float32 data type\n    img = img.astype(np.float32)\n```", "```py\n    # Normalize the image pixels to have zero mean and unit variance\n    img -= np.mean(img)\n    img /= np.std(img)\n```", "```py\n    # Save the normalized image with the same filename\n    cv2.imwrite(img_file, img)\n```", "```py\n# import the necessary libraries\nfrom keras.preprocessing.image import ImageDataGenerator\nimport os\n```", "```py\n# Define the path to the image directory\nimg_dir = 'path/to/image/directory'\n```", "```py\n# Create an instance of the ImageDataGenerator class\ndatagen = ImageDataGenerator(\n    rotation_range=30,\n    width_shift_range=0.2,\n    height_shift_range=0.2,\n    shear_range=0.2,\n    zoom_range=0.2,\n    horizontal_flip=True,\n    fill_mode='nearest')\n```", "```py\n# Get a list of all image filenames in the directory\nimg_files = [os.path.join(img_dir, f) \\\n    for f in os.listdir(img_dir) \\\n    if os.path.isfile(os.path.join(img_dir, f))]\n# Loop through all the image files\nfor img_file in img_files:\n    # Load the image using Keras' load_img function\n    img = load_img(img_file)\n    # Convert the image to an array using Keras' img_to_array function\n    img_arr = img_to_array(img)\n```", "```py\n    # Reshape the array to have a batch dimension of 1\n    img_arr = img_arr.reshape((1,) + img_arr.shape)\n```", "```py\n    # Generate 5 augmented images for each input image\n    i = 0\n    for batch in datagen.flow( \\\n        img_arr, batch_size=1, save_to_dir=img_dir, \\\n        save_prefix='aug_', save_format='jpg' \\\n    ):\n        i += 1\n        if i == 5:\n            break\n```"]