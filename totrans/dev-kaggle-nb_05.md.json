["```py\ndf = df.sort_values(by=\"max\", ascending=False)\nsectors_f = go.Bar(\n        x = df['sector'],\n        y = df['max'],\n        name=\"Female borrowers\",\n        marker=dict(color=color_list[4]))\ndf2 = df2.sort_values(by=\"max\", ascending=False)\nsectors_m = go.Bar(\n        x = df2['sector'],\n        y = df2['max'],\n        name=\"Male borrowers\",\n        marker=dict(color=color_list[3]))\nfig = make_subplots(rows=1, cols=2, start_cell=\"top-left\",\n                   subplot_titles=(\"Loans with at least one female borrower\", \n                                   \"Loans with at least one male borrower\"))\nfig.add_trace(sectors_f, row=1, col=1)\nfig.add_trace(sectors_m, row=1, col=2)\nlayout = go.Layout(height=400, width=900, title=\"Maximum number of female/male borowers/loan\")\nfig.update_layout(layout)\nfig.update_layout(showlegend=False)\nfig.show() \n```", "```py\n# map with entire World\nm = folium.Map(location=[0, 0], zoom_start=2, tiles=\"CartoDB Positron\")\nfor _, r in region_df.iterrows():\n    folium.CircleMarker(location=[r['lat'], r['lon']],\n        fill=True,\n        color=color_list[3],\n        fill_color=color_list[3],\n        weight=0.9,\n        radius= 10 * (0.1 + r['MPI']),\n        popup=folium.Popup(\"<strong>Region</strong>: {}<br>\\\n               <strong>Country</strong>: {}<br>\\\n               <strong>Location Name</strong>: {}<br>\\\n               <strong>World Region</strong>: {}<br>\\\n               <strong>MPI</strong>: {}\".format(r['region'], r['country'],  r['LocationName'],\\\n                   r['world_region'], r['MPI']), min_width=100, max_width=300)).add_to(m)\nm \n```", "```py\ndef plotly_sankey(df,cat_cols=[],value_cols='',title='Sankey Diagram', color_palette=None, height=None):\n    \"\"\"\n    Plot a Sankey diagram\n    Args:\n        df: dataframe with data\n        cat_cals: grouped by features\n        valie_cols: feature grouped on\n        title: graph title\n        color_palette: list of colors\n        height: graph height\n    Returns:\n        figure with the Sankey diagram\n    \"\"\" \n```", "```py\nkiva_mpi_un_df = loan_mpi_df.merge(kiva_country_profiles_variables_df)\nkiva_loans_corr = kiva_mpi_un_df.loc[loan_mpi_df.currency==\"USD\"][sel_columns].corr()\nfig, ax = plt.subplots(1, 1, figsize = (16, 16))\nsns.heatmap(kiva_loans_corr, \n            xticklabels=kiva_loans_corr.columns.values,\n            yticklabels=kiva_loans_corr.columns.values, \n            cmap=cmap_custom, vmin=-1, vmax=1, annot=True, square=True,\n            annot_kws={\"size\":8})\nplt.suptitle('Kiva Loans & MPI, UN Countries Features Correlation')\nplt.show() \n```", "```py\nregion_df = kiva_mpi_region_locations_df.loc[~kiva_mpi_region_locations_df.MPI.isna()]\ndf = region_df.groupby([\"country\"])[\"MPI\"].agg([\"mean\", \"median\"]).reset_index()\ndf.columns = [\"country\", \"MPI_mean\", \"MPI_median\"]\nkiva_mpi_country_df = kiva_country_profiles_variables_df.merge(df)\ndf = kiva_mpi_country_df.sort_values(by=\"MPI_median\", ascending = False)[0:10]\ndf['MPI_median'] = df['MPI_median'] * 100\ndf['MPI_mean'] = df['MPI_mean'] * 100 \n```", "```py\ndf['Infant mortality rate /1000 births'] = df['Infant mortality rate (per 1000 live births']\ndf[\"Employment: Agriculture %\"] = df['Employment: Agriculture (% of employed)'].apply(lambda x: abs(x))\ndf[\"No improved sanitation facilit. %\"] = df['Pop. using improved sanitation facilities (urban/rural, %)'].apply(lambda x: 100 - float(x))\ndf ['No improved drinking water % (U)'] = df['Pop. using improved drinking water (urban/rural, %)'].apply(lambda x: 100 - float(x.split(\"/\")[0]))\ndf ['No improved drinking water % (R)'] = df['Pop. using improved drinking water (urban/rural, %)'].apply(lambda x: 100 - float(x.split(\"/\")[1])) \n```", "```py\nradar_columns = [\"No improved sanitation facilit. %\",\n                 \"MPI_median\", \"MPI_mean\",\n                 'No improved drinking water % (U)',\n                 'No improved drinking water % (R)',\n                 'Infant mortality rate /1000 births',\n                 \"Employment: Agriculture %\"] \n```", "```py\nfig = make_subplots(rows=1, shared_xaxes=True)\nfor _, row in df.iterrows():\n    r = []\n    for f in radar_columns:\n        r.append(row[f])\n    radar = go.Scatterpolar(r=r,\n       theta=radar_columns,\n       fill = 'toself',\n       opacity=0.7,\n       name = row['country'])\n    fig.add_trace(radar)\nfig.update_layout(height=900, width=900,\n        title=\"Selcted poverty dimmensions in the 10 countries with highest median MPI rate\",\n        polar=dict(\n            radialaxis=dict(visible=True, range=[0,100], gridcolor='black'),\n            bgcolor='white',\n            angularaxis=dict(visible=True, linecolor='black', gridcolor='black')\n        ),\n        margin=go.layout.Margin(l=200,r=200,b=50, t=100)\n    )\nfig.show() \n```"]