- en: '19'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Regression with Copilot Suggestions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we used GitHub Copilot Chat to build a regression problem
    and explored how AI can assist in coding. In this chapter, we’ll take a different
    approach. We will write code with the help of GitHub Copilot, allowing it to guide
    us through coding and adding helpful comments. This will be an interactive experience,
    combining our coding skills with Copilot’s suggestions to effectively tackle a
    regression problem. Let’s see how GitHub Copilot can enhance our coding process
    in real time.
  prefs: []
  type: TYPE_NORMAL
- en: In the task, we will use the Apple dataset to predict stock prices and help
    investors decide whether to buy or not. This is the same dataset we used in *Chapter
    18*, *Regression with Copilot Chat*, where we used Copilot Chat to analyze it.
  prefs: []
  type: TYPE_NORMAL
- en: Dataset overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This dataset provides us with a wealth of information about Apple’s stock (traded
    under AAPL) over the past decade, starting from the year 2010\. This data is incredibly
    valuable because it can help us develop forecasting algorithms to predict the
    future price of Apple’s stock, which is crucial for making investment decisions.
    The data in this set has been collected and aggregated from 25 different stock
    exchanges.
  prefs: []
  type: TYPE_NORMAL
- en: 'To effectively use this data for forecasting, we need to understand the key
    elements: the features that influence our target, which is predicting stock prices.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The dataset includes five important values that indicate how the stock price
    changes over a specific period of time, which is typically one day, but it could
    also be one week or one month. These values are:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Open**: This is the stock price at the beginning of the trading day.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Close**: This is the stock price at the end of the trading day.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**High**: This value shows the highest price the stock reached during the trading
    day.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Low**: This indicates the lowest price the stock hit during the trading day.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Volume**: This is the total number of shares that were traded throughout
    the day before the market closed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Our focus will be on using historical price data, which includes these five
    recorded values, along with the stock’s past performance, to make predictions
    about its future prices.
  prefs: []
  type: TYPE_NORMAL
- en: Prompt strategy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we’ll use the “Exploratory prompt pattern” as described in
    *Chapter 2*. We feel pretty confident on what actions we want to take in general
    but is interested in what the AI assistant will generate in case we need to pivot.
  prefs: []
  type: TYPE_NORMAL
- en: Start coding with Copilot’s help
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With GitHub Copilot installed, you’re ready to start coding your regression
    problem in Python. The approach of using suggestions in an open file is a bit
    different from using the chat window. The main difference is that we will rely
    on typing comments and use the *Tab* key to get Copilot to provide us with suggestions.
    This technique works equally well in Jupyter Notebook and normal text files. Here’s
    how it works:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we have an open text file. We’ve added comments to generate `import`
    statements. To get Copilot to generate a response, we need to use the *Return*
    key followed by the *Tab* key to accept the suggestion. Here’s how the above text
    file could change:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The `import` statement is what is generated by Copilot when pressing *Tab* followed
    by *Return*.
  prefs: []
  type: TYPE_NORMAL
- en: The AI assistant helps by providing code completion, but remember to review
    and understand each suggestion before accepting it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 1: Import libraries with Copilot’s assistance'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We could start with a prompt suggestion comment that describes the problem
    upfront, the dataset, and more, just like we did with Copilot Chat in other chapters
    in this book. Then, the prompt could look like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: However, we will try an approach where we ask for everything we need.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s begin. Let’s create our first comment (this is equivalent to typing in
    a chat window):'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Prompt]**'
  prefs: []
  type: TYPE_NORMAL
- en: import pandas
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**[End of prompt]**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Accept the suggestion with *Tab*. You should see the following bold code:'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Prompt response]**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '**[End of response]**'
  prefs: []
  type: TYPE_NORMAL
- en: Great! We have imported the libraries we need. Let’s load and explore the dataset
    next.
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 2: Load and explore the dataset'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the next step, we want to load the dataset and explore the data features.
    Keep working in the same file and add the below prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Prompt]**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '**[End of prompt]**'
  prefs: []
  type: TYPE_NORMAL
- en: 'At this point, Copilot understands what we’re trying to do, so we don’t need
    to type more than the above prompt comment. So, we just need to press *Return*
    followed by *Tab* a number of times, and we should get the content below:'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Prompt response]**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '**[End of response]**'
  prefs: []
  type: TYPE_NORMAL
- en: Ensure you have downloaded the dataset from Kaggle ([https://www.kaggle.com/datasets/varpit94/apple-stock-data-updated-till-22jun2021](https://www.kaggle.com/datasets/varpit94/apple-stock-data-updated-till-22jun2021))
    and that you have replaced the path in `read_csv` to point to where the file is
    in your system.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you run the suggested code, you should see similar output to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: If you see the above, that means the data was loaded successfully.
  prefs: []
  type: TYPE_NORMAL
- en: Get types and columns
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Great! Now that we’ve successfully loaded the data, let’s learn more about
    the loaded dataset, such as what columns and column types it has. As usual, let’s
    keep working on the same file and add a prompt as a comment like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Prompt]**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '**[End of prompt]**'
  prefs: []
  type: TYPE_NORMAL
- en: 'You should see the below results:'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Prompt response]**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '**[End of response]**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s run the code. It should show our columns and their data types:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Great! We see the columns, but many of the columns have the `object` type. That’s
    not good; they need to be numerical to be used in machine learning training. Let’s
    see if we can address this shortly, but first, let’s learn more about the shape
    of the dataset.
  prefs: []
  type: TYPE_NORMAL
- en: Shape of the dataset
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let’s learn more about our dataset in terms of structure, like how many columns
    and how many rows it consists of. This will help us assess its complexity, see
    how much data we have, and whether it’s enough to train a model to be reliable.
    Let’s write our next prompt comment:'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Prompt]**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '**[End of prompt]**'
  prefs: []
  type: TYPE_NORMAL
- en: 'You should see the below suggestion:'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Prompt response]**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '**[End of response]**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Running the code above should provide the response below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: This response tells us we have 2518 rows and 6 columns.
  prefs: []
  type: TYPE_NORMAL
- en: Addressing the column types
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'At this point, we know we need more numerical columns, so let’s deal with the
    ones that aren’t numerical. First, let’s identify those non-numerical columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Prompt]**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '**[End of prompt]**'
  prefs: []
  type: TYPE_NORMAL
- en: 'You should see a suggestion like below:'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Prompt response]**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '**[End of response]**'
  prefs: []
  type: TYPE_NORMAL
- en: It’s interesting that although we just asked to print the columns, Copilot makes
    the decision to show us only the columns of the `object` type. It’s not really
    surprising because Copilot has been trained on machine learning and is able to
    deduce what will happen next, which in this case is converting columns for use
    in model training.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, let’s be a bit prescriptive and ask for columns to be converted to numerical
    versions with the below prompt comment:'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Prompt]**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '**[End of prompt]**'
  prefs: []
  type: TYPE_NORMAL
- en: You should see the below code, which turns several columns into numerical versions.
  prefs: []
  type: TYPE_NORMAL
- en: '**[Prompt response]**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '**[End of response]**'
  prefs: []
  type: TYPE_NORMAL
- en: Great! Let’s inspect the columns next to ensure the conversion has been carried
    out correctly.
  prefs: []
  type: TYPE_NORMAL
- en: '**[Prompt]**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '**[End of prompt]**'
  prefs: []
  type: TYPE_NORMAL
- en: 'You should see a response similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Prompt response]**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '**[End of response]**'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you run the above code, you should see the response below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: We can clearly see that the dollar signs have been removed and the columns are
    now numerical, save for the Date column, which we can deal with later.
  prefs: []
  type: TYPE_NORMAL
- en: Statistical summary
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Next, let’s learn a bit more about the dataset by asking for a statistical
    summary. We can expect to see these values:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Count**: The number of non-null entries'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mean**: The average value'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Standard Deviation (std)**: The spread of the data'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Minimum (min)**: The smallest value'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**25th Percentile (25%)**: The value below which 25% of the data falls'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Median (50%)**: The middle value, also known as the 50th percentile'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**75th Percentile (75%)**: The value below which 75% of the data falls'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Maximum (max)**: The largest value'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'With that in mind, let’s write a prompt comment:'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Prompt]**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '**[End of prompt]**'
  prefs: []
  type: TYPE_NORMAL
- en: 'You should see an output similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Prompt response]**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '**[End of response]**'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you run the code, you will see data similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Check for missing values
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'It’s crucial to identify missing values to assess the quality of your dataset.
    High numbers of null values might indicate issues with data collection or entry
    and may affect our model, so we need a way to handle them:'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Prompt]**'
  prefs: []
  type: TYPE_NORMAL
- en: Check for missing values
  prefs: []
  type: TYPE_NORMAL
- en: '**[End of prompt]**'
  prefs: []
  type: TYPE_NORMAL
- en: 'You should see a response similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Prompt response]**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '**[End of response]**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Great! So, what does the code do? Well, let’s explain. Let’s say you have the
    following dataset:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Running the suggested code would summarize the number of missing values per
    column, and you would see a response like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: What you can do is replace the missing value with a value that doesn’t affect
    the overall score. One way to do so is to add the mean value and replace `None`
    with that.
  prefs: []
  type: TYPE_NORMAL
- en: Check for duplicates
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Another way to clean up the data is to remove duplicated data, because you
    don’t want that data to create a reinforcing effect on the model. Let’s create
    a comment for that and see if Copilot can help us:'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Prompt]**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '**[End of prompt]**'
  prefs: []
  type: TYPE_NORMAL
- en: 'At this point, Copilot understands what we’re trying to do, that is, identify
    and remove duplicates. So, you should see suggested code for both operations below:'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Prompt response]**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '**[End of response]**'
  prefs: []
  type: TYPE_NORMAL
- en: Scale numerical features
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Next, we’re going to scale values, so they fall into a specific range, 0–1\.
    This type of preprocessing will have beneficial effects on a number of things,
    such as algorithm performance, convergence speed, interpretability, and preventing
    a group of values from dominating. Let’s create a prompt for scaling features:'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Prompt]**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '**[End of prompt]**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that when there’s more than one row in the response, you may need to press
    *Return* and *Tab* repeatedly. You should see output similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Prompt response]**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '**[End of response]**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Running the suggested code should result in the below output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Visualization
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Next, we want to visualize our data. We could give vague instructions on how
    to do it, but in this case, a scatter plot is a good tool to use, so let’s reflect
    that in the prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Prompt]**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '**[End of prompt]**'
  prefs: []
  type: TYPE_NORMAL
- en: 'You should see a response similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Prompt response]**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '**[End of response]**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Running the code above should result in a scatter plot like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A blue dotted line with white text  Description automatically generated](img/B21232_19_01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 19.1: Scatter plot showing the relation between the Open and Close columns'
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 3: Split data into training and testing sets'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before we can train the model, we need to split the data into training data
    and test data. Let’s create a prompt to help with this:'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Prompt]**'
  prefs: []
  type: TYPE_NORMAL
- en: “use train_test_split from scikit-learn to split the dataset”
  prefs: []
  type: TYPE_NORMAL
- en: '**[End of prompt]**'
  prefs: []
  type: TYPE_NORMAL
- en: 'You should see an output similar to:'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Prompt response]**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '**[End of response]**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'If you run the code above, you should see a response similar to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Asking questions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Just like in the chat experience of Copilot, it’s possible to ask questions
    on a specific topic. If you prefix a question with “Q:”, Copilot understands it’s
    a question. Let’s try this to find out our next step:'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Prompt]**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Q: what is the next step after splitting the data into training and testing
    sets?'
  prefs: []
  type: TYPE_NORMAL
- en: '**[End of prompt]**'
  prefs: []
  type: TYPE_NORMAL
- en: 'You should see a response similar to:'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Prompt response]**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: '**[End of response]**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 4: Build a regression problem'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The time has come to train the model. You could be pretty vague here and just
    ask Copilot to perform training. It’s recommended, however, to suggest the type
    of training you want. In this case, we want linear regression, so let’s create
    a prompt that includes that:'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Prompt]**'
  prefs: []
  type: TYPE_NORMAL
- en: “initialize a LinearRegression model”.
  prefs: []
  type: TYPE_NORMAL
- en: '**[End of prompt]**'
  prefs: []
  type: TYPE_NORMAL
- en: 'You should see a response similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Prompt response]**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '**[End Suggestion Response]**'
  prefs: []
  type: TYPE_NORMAL
- en: Great! We have some code that ensures we use linear regression. We haven’t carried
    out any training, though, so that’s next.
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 5: Train the model'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'With the type of training specified, let’s train the model next:'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Prompt]**'
  prefs: []
  type: TYPE_NORMAL
- en: “fit the model”
  prefs: []
  type: TYPE_NORMAL
- en: '**[End of prompt]**'
  prefs: []
  type: TYPE_NORMAL
- en: 'You should see a response similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Prompt response]**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '**[End of response]**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 6: Evaluate model performance'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Great! We have trained the model, but we don’t know anything about how well
    it performs, and that’s something we should address next:'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Prompt]**'
  prefs: []
  type: TYPE_NORMAL
- en: Evaluate the performance metrics like MSE or R-squared.
  prefs: []
  type: TYPE_NORMAL
- en: '**[End of prompt]**'
  prefs: []
  type: TYPE_NORMAL
- en: 'You should see an output similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Prompt response]**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: '**[End of response]**'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you run the above code, you should see a response like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'The output we get represents two different errors: mean squared error and root
    mean squared error.'
  prefs: []
  type: TYPE_NORMAL
- en: A lower MSE indicates a better fit of the model to the data. In this case, the
    MSE is quite low, suggesting that the model’s predictions are very close to the
    actual values.
  prefs: []
  type: TYPE_NORMAL
- en: The RMSE value is also very low, reinforcing that the model’s predictions are
    highly accurate. Great! Let’s go over this chapter’s assignment, and then summarize
    what we have learned about using Copilot to help us with machine learning.
  prefs: []
  type: TYPE_NORMAL
- en: Assignment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Try to solve this problem using a prompting approach where you provide a lot
    of information upfront. We suggest constructing a prompt like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '“Carry out regression on a dataset with the following shape:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Open: This is the stock price at the beginning of the trading day.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Close: This represents the stock price at the end of the trading day.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'High: This value shows the highest price the stock reached during the trading
    day.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Low: This indicates the lowest price the stock hit during the trading day.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Volume: This is the total number of shares that were traded throughout the
    day before the market closed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Suggest all the steps from loading and pre-processing the data to training and
    evaluating the model. You must show code for each step.”
  prefs: []
  type: TYPE_NORMAL
- en: 'Then see what the response is and try to run the suggested code snippet for
    each step. If you encounter any issues, indicate the error to Copilot with a question
    prompt like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '“Q: the below/above code doesn’t work, please fix”'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Don’t forget to press *Return* and *Tab* to accept the completion.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we wanted to use the suggestion feature of GitHub Copilot,
    meaning we would type comments and use the *Return* and *Tab* keys to receive
    suggestions from Copilot. There’s a bit of a trick to it because sometimes you
    need to repeatedly press *Return* and *Tab* to get the full response. It’s also
    an AI experience that’s well suited to whenever you actively write code. GitHub
    Copilot Chat also has a place. In fact, the two different experiences complement
    one another; choose how much of each approach you want to use. Also, always test
    the code suggested by Copilot and ask Copilot to fix the code output if needed.
  prefs: []
  type: TYPE_NORMAL
- en: Join our community on Discord
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Join our community’s Discord space for discussions with the author and other
    readers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://packt.link/aicode](https://packt.link/aicode)'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/QR_Code510410532445718281.png)'
  prefs: []
  type: TYPE_IMG
