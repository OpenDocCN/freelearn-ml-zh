["```py\nPM> Install-Package Accord.MachineLearning\nPM> Install-Package Accord.Controls\n```", "```py\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nusing Accord.Controls;\nusing Accord.Statistics;\nusing Accord.Statistics.Models.Regression;\nusing Accord.Statistics.Models.Regression.Fitting;\n\nnamespace SampleAccordNETApp\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            double[][] inputs =\n            {\n                new double[] { 0, 0 },\n                new double[] { 0.25, 0.25 }, \n                new double[] { 0.5, 0.5 }, \n                new double[] { 1, 1 },\n            };\n\n            int[] outputs =\n            { \n                0,\n                0,\n                1,\n                1,\n            };\n\n            // Train a Logistic Regression model\n            var learner = new IterativeReweightedLeastSquares<LogisticRegression>()\n            {\n                MaxIterations = 100\n            };\n            var logit = learner.Learn(inputs, outputs);\n\n            // Predict output\n            bool[] predictions = logit.Decide(inputs);\n\n            // Plot the results\n            ScatterplotBox.Show(\"Expected Results\", inputs, outputs);\n            ScatterplotBox.Show(\"Actual Logistic Regression Output\", inputs, predictions.ToZeroOne());\n\n            Console.ReadKey();\n        }\n    }\n}\n```", "```py\nPM> Install-Package Deedle\n```", "```py\nusing Deedle;\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace DeedleApp\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // Read AAPL stock prices from a CSV file\n            var root = Directory.GetParent(Directory.GetCurrentDirectory()).Parent.FullName;\n            var aaplData = Frame.ReadCsv(Path.Combine(root, \"table_aapl.csv\"));\n            // Print the data\n            Console.WriteLine(\"-- Raw Data --\");\n            aaplData.Print();\n\n            // Set Date field as index\n            var aapl = aaplData.IndexRows<String>(\"Date\").SortRowsByKey();\n            Console.WriteLine(\"-- After Indexing --\");\n            aapl.Print();\n\n            // Calculate percent change from open to close\n            var openCloseChange = \n                ((\n                    aapl.GetColumn<double>(\"Close\") - aapl.GetColumn<double>(\"Open\")\n                ) / aapl.GetColumn<double>(\"Open\")) * 100.0;\n            aapl.AddColumn(\"openCloseChange\", openCloseChange);\n            Console.WriteLine(\"-- Simple Arithmetic Operations --\");\n            aapl.Print();\n\n            // Shift close prices by one row and calculate daily returns\n            var dailyReturn = aapl.Diff(1).GetColumn<double>(\"Close\") / aapl.GetColumn<double>(\"Close\") * 100.0;\n            aapl.AddColumn(\"dailyReturn\", dailyReturn);\n            Console.WriteLine(\"-- Shift --\");\n            aapl.Print();\n\n            Console.ReadKey();\n        }\n    }\n}\n```"]