["```py\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom prophet import Prophet\nfrom prophet.plot import add_changepoints_to_plot\nfrom prophet.diagnostics import cross_validation\nfrom prophet.diagnostics import performance_metrics\nfrom prophet.plot import plot_cross_validation_metric\n```", "```py\ndf = pd.read_csv('online_retail.csv')\ndf.columns = ['ds', 'y']\nmodel = Prophet(yearly_seasonality=4)\nmodel.fit(df)\nforecast = model.predict()\nfig = model.plot(forecast)\nadd_changepoints_to_plot(fig.gca(), model, forecast)\nplt.show()\n```", "```py\ndf_cv = cross_validation(model,\n                         horizon='90 days',\n                         period='30 days',\n                         initial='730 days',\n                         parallel='processes')\n```", "```py\ndf_p = performance_metrics(df_cv)\ndf_p.head()\n```", "```py\nfig = plot_cross_validation_metric(df_cv, metric='mae')\nplt.show()\n```", "```py\nfig = plt.figure(figsize=(10, 6))\nax = fig.add_subplot(111)\nplot_cross_validation_metric(df_cv,\n                             metric='rmse',\n                             rolling_window=.01,\n                             ax=ax)\nplot_cross_validation_metric(df_cv,\n                             metric='rmse',\n                             rolling_window=.1,\n                             ax=ax)\nplt.show()\n```", "```py\ndf = pd.read_csv('rainfall.csv')\ndf.columns = ['ds', 'y']\nmodel = Prophet(yearly_seasonality=4)\nmodel.fit(df)\nfuture = model.make_future_dataframe(periods=365 * 5)\nfuture = future[future['ds'].dt.day.isin([1, 11, 21])]\nforecast = model.predict(future)\nfig = model.plot(forecast)\na = add_changepoints_to_plot(fig.gca(), model, forecast)\nplt.show()\n```", "```py\ndf_cv = cross_validation(model,\n                         horizon='90 days',\n                         period='30 days',\n                         initial='1826 days',\n                         parallel='processes')\ndf_p = performance_metrics(df_cv)\nfig = plot_cross_validation_metric(df_cv, metric='rmse')\nplt.show()\n```", "```py\ncutoffs = [pd.Timestamp('{}-{}-{}'.format(year, month,\n                                          day))\n           for year in range(2005, 2019)\n           for month in range(1, 13)\n           for day in [1, 11, 21]]\n```", "```py\ndf_cv = cross_validation(model,\n                         horizon='90 days',\n                         parallel='processes',\n                         cutoffs=cutoffs)\ndf_p = performance_metrics(df_cv)\nfig = plot_cross_validation_metric(df_cv, metric='rmse')\nplt.show()\n```", "```py\nparam_grid = {'changepoint_prior_scale': [0.5, 0.1, 0.01,\n                                          0.001],\n              'seasonality_prior_scale': [10.0, 1.0, 0.1,\n                                          0.01],\n              'seasonality_mode': ['additive',\n                                   'multiplicative']}\n```", "```py\nimport numpy as np\nimport itertools\nall_params = [dict(zip(param_grid.keys(), value))\n              for value in itertools.product(\n                                  *param_grid.values())]\nrmse_values= []\n```", "```py\ncutoffs = [pd.Timestamp('{}-{}-{}'.format(year, month,\n                                          day))\n           for year in range(2010, 2019)\n           for month in range(1, 13)\n           for day in [1, 11, 21]]\n```", "```py\nfor params in all_params:\n    model = Prophet(yearly_seasonality=4, **params).fit(df)\n    df_cv = cross_validation(model,\n                             cutoffs=cutoffs,\n                             horizon='30 days',\n                             parallel='processes')\n    df_p = performance_metrics(df_cv, rolling_window=1)\n    rmse_values.append(df_p['rmse'].values[0])\n```", "```py\nresults = pd.DataFrame(all_params)\nresults['rmse'] = rmse_values\nresults.head()\n```", "```py\nbest_params = all_params[np.argmin(rmse_values)]\nprint(best_params)\n```", "```py\n'changepoint_prior_scale': 0.01,\n'seasonality_prior_scale': 1.0,\n'seasonality_mode': 'additive'}\n```"]