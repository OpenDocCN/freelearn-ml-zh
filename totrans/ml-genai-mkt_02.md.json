["```py\n    import pandas as pd\n    df = pd.read_csv(\"./data.csv\") \n    ```", "```py\n    df[\"conversion\"] = df[\"Response\"].apply(lambda x: 1 if x == \"Yes\" else 0) \n    ```", "```py\n    df[\"conversion\"].mean() \n    ```", "```py\n    ax = df.groupby(\"conversion\")[\"Customer\"].count().reset_index().plot.pie(\n        figsize=(5, 5),\n        y=\"Customer\",\n        autopct='%1.1f%%',\n        legend=False,\n        labels=[\"No Conversion\", \"Conversion\"],\n        explode=[0.05, 0.05]\n    )\n    ax.set_ylabel(None) \n    ```", "```py\ndf[\"income_category\"] = df[\"Income\"].apply(\n    lambda x: 0 if x == 0 else x//10000\n)\nincome_conversion = df.groupby(\"income_category\")[\"conversion\"].mean() * 100\nax = (\n    income_conversion\n).plot.bar(\n    figsize=(5, 5),\n    rot=45,\n)\nax.set_xticklabels([\"$0\" if x == 0 else f\"${x}0-{x+1}0k\" for x in income_conversion.index])\nax.set_ylabel(\"Conversion Rate (%)\")\nax.set_xlabel(\"Reported Income\")\nax.set_title(\"Conversion Rate across Reported Income\") \n```", "```py\nax = (\n    df.groupby(\"Sales Channel\")[\"conversion\"].mean() * 100\n).plot.bar(\n    figsize=(5, 5),\n    rot=45\n)\nax.set_ylabel(\"Conversion Rate (%)\")\nax.set_title(\"Conversion Rate per Sales Channel\") \n```", "```py\nsales_channel_count = df.groupby(\"Sales Channel\")[\"conversion\"].sum()\nax = sales_channel_count.reset_index().plot.pie(\n    figsize=(5, 5),\n    y=\"conversion\",\n    autopct='%1.1f%%',\n    legend=False,\n    labels=sales_channel_count.index,\n    explode=[0.02]*df[\"Sales Channel\"].nunique()\n)\nax.set_ylabel(None) \n```", "```py\ndf[\"Customer Lifetime Value\"].describe() \n```", "```py\ndf[\"Customer Lifetime Value\"].plot.box() \n```", "```py\nax=df[\"Customer Lifetime Value\"].hist(bins=25)\nplt.show() \n```", "```py\nax = df.groupby(\"State\")[\"Customer Lifetime Value\"].mean().plot.bar(\n    figsize=(5, 5),\n    rot=45\n)\nax.bar_label(ax.containers[0], fmt='$%.1f')\nax.set_ylabel(\"Customer Lifetime Value ($)\")\nax.set_title(\"CLV per State\") \n```", "```py\nax = df.groupby([\n    \"State\", \"Location Code\"\n])[\n    \"Customer Lifetime Value\"\n].mean().unstack().plot.bar(\n    figsize=(5, 5),\n    rot=45\n)\nax.set_ylabel(\"Customer Lifetime Value ($)\")\nax.set_title(\"CLV per State\") \n```", "```py\nax = df.groupby(\"Policy\")[\"Customer Lifetime Value\"].mean().plot.bar(\n    figsize=(5, 5),\n    rot=45\n)\nax.bar_label(ax.containers[0], fmt='$%.1f', fontsize=6)\nax.set_ylabel(\"Customer Lifetime Value ($)\")\nax.set_title(\"CLV per Product\") \n```", "```py\nimport numpy as np\ncost_distr = {\n    \"Agent\": {\"avg\": 200, \"std\": 40},\n    \"Branch\": {\"avg\": 85, \"std\": 17},\n    \"Call Center\": {\"avg\": 30, \"std\": 6},\n    \"Web\": {\"avg\": 2, \"std\": 0.5}\n}\ndf[\"est_acquisition_cost\"] = df[\"Sales Channel\"].apply(\n    lambda x: np.random.normal(cost_distr[x][\"avg\"], cost_distr[x][\"std\"], 1)[0]\n) \n```", "```py\ndf[\"est_acquisition_cost\"].describe() \n```", "```py\ncampaign_cost = df[\"est_acquisition_cost\"].sum() / df[\"conversion\"].sum() \n```", "```py\nprint(f\"${campaign_cost:.1f}\") \n```", "```py\n$739.8 \n```", "```py\nchannel_cpa = (\ndf.groupby(\"Sales Channel\")[\"est_acquisition_cost\"].sum()\n/\ndf.groupby(\"Sales Channel\")[\"conversion\"].sum()\n) \n```", "```py\nax = (\n    channel_cpa\n).plot.bar(\n    figsize=(5, 5),\n    rot=45\n)\nax.bar_label(ax.containers[0], fmt='$%.1f')\nax.set_ylabel(\"Cost per Acquisition ($)\")\nax.set_title(\"CPA per Sales Channel\") \n```", "```py\npromo_cpa = (\ndf.groupby(\"Renew Offer Type\")[\"est_acquisition_cost\"].sum()\n/\ndf.groupby(\"Renew Offer Type\")[\"conversion\"].sum()\n) \n```", "```py\nax = (\n    promo_cpa\n).plot.bar(\n    figsize=(5, 5),\n    rot=45\n)\nax.bar_label(ax.containers[0], fmt='$%.1f')\nax.set_ylabel(\"Cost per Acquisition ($)\")\nax.set_title(\"CPA per Promotion\") \n```", "```py\ndf.groupby(\"Renew Offer Type\")[\"conversion\"].mean() \n```", "```py\nax = df.groupby(\"Renew Offer Type\")[\"est_acquisition_cost\"].sum().plot.bar(\n    figsize=(5,5),\n    rot=45\n)\nax.bar_label(ax.containers[0], fmt='$%.1f')\nax.set_ylabel(\"Total Cost ($)\")\nax.set_title(\"Total Cost per Promotion\") \n```", "```py\ncampaign_cost = df[\"est_acquisition_cost\"].sum()\nconverted_clv = (df[\"Customer Lifetime Value\"] * df[\"conversion\"]).sum()\nprint(f\"Total CLV: ${converted_clv:,.02f}\")\nprint(f\"Total Cost: ${campaign_cost:,.02f}\")\nprint(f\"Overall ROI: {(converted_clv-campaign_cost)/campaign_cost:.01f}x\") \n```", "```py\nTotal CLV: $10,274,171.74\nTotal Cost: $972,130.58\nOverall ROI: 9.6x \n```", "```py\nimport plotly.graph_objects as go\nfig = go.Figure(\n    go.Waterfall(\n        name = \"Waterfall\",\n        orientation = \"v\",\n        measure = [\"relative\", \"relative\", \"total\"],\n        x = [\"Total CLV\", \"Total Marketing Cost\", \"Net Return\"],\n        textposition = \"outside\",\n        text = [\n            f\"${converted_clv:.01f}\",\n            f\"${campaign_cost:.01f}\",\n            f\"Return: ${converted_clv-campaign_cost:.1f} ({(converted_clv-campaign_cost)/campaign_cost:.01f}x)\"\n        ],\n        y = [converted_clv, -campaign_cost, 0],\n        connector = {\"line\":{\"color\":\"rgb(63, 63, 63)\"}},\n    )\n)\nfig.update_layout(\n    height=500,\n    width=500,\n    title = \"ROI\",\n    title_x = 0.5,\n    showlegend = True\n)\nfig.show() \n```", "```py\ndf[\"return\"] = (\ndf[\"Customer Lifetime Value\"] * df[\"conversion\"]\n) - df[\"est_acquisition_cost\"]\nchannel_roi = (\ndf.groupby(\"Sales Channel\")[\"return\"].sum()\n/\ndf.groupby(\"Sales Channel\")[\"est_acquisition_cost\"].sum()\n) \n```", "```py\nax = (\n    channel_roi\n).plot.bar(\n    figsize=(5, 5),\n    rot=45\n)\nax.bar_label(ax.containers[0], fmt='%.1fx')\nax.set_ylabel(\"Return on Investment (multiple)\")\nax.set_title(\"ROI per Sales Channel\") \n```", "```py\npromo_roi = (\n    df.groupby(\"Renew Offer Type\")[\"return\"].sum()\n    /\n    df.groupby(\"Renew Offer Type\")[\"est_acquisition_cost\"].sum()\n) \n```", "```py\nax = (\n    promo_roi\n).plot.bar(\n    figsize=(5, 5),\n    rot=45,\n    color=(promo_roi > 0).map({True: 'cornflowerblue', False: 'salmon'})\n)\nax.bar_label(ax.containers[0], fmt='%.1fx')\nax.set_ylabel(\"Return on Investment (multiple)\")\nax.set_title(\"ROI per Promotion\") \n```", "```py\nimport seaborn as sns\nimport matplotlib.pyplot as plt\ncorrelation_matrix = df[[\n    'Income', 'Monthly Premium Auto',\n    'Months Since Last Claim', 'Months Since Policy Inception',\n    'Number of Open Complaints', 'Number of Policies', 'Total Claim Amount',\n    'conversion', 'Customer Lifetime Value', 'est_acquisition_cost', 'return'\n]].corr()\nplt.figure(figsize=(10, 8))\nsns.heatmap(correlation_matrix, annot=True, fmt=\".2f\", cmap='coolwarm', cbar=True)\nplt.title('Correlation Matrix Heatmap of Marketing KPIs')\nplt.show() \n```"]