- en: '5'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Setting Up the Environments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In previous chapters, we discovered some of the theories and frameworks behind
    machine learning problems. In this chapter, we will move toward practical implementation.
    Installing Qlik machine learning environments is an essential step in leveraging
    the power of machine learning within Qlik Sense. In this chapter, we will cover
    the process of installing and setting up various Qlik machine learning environments.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this chapter, we will have a solid understanding of the installation
    and configuration process for Qlik machine learning environments, allowing us
    to leverage the power of machine learning within Qlik Sense for data-driven decision
    making.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is what we will learn as part of this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Advanced Analytics Integration with R and Python
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up Qlik AutoML
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cloud integrations with REST
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Advanced Analytics Integration with R and Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Advanced Analytics Integration is a feature that allows users to perform advanced
    data analysis and predictive modeling tasks within the Qlik Sense environment.
    With Advanced Analytics Integration, users can use popular statistical analysis
    and machine learning tools, such as R and Python, to build predictive models,
    perform data mining tasks, and gain insights from their data.
  prefs: []
  type: TYPE_NORMAL
- en: Data fetched from third-party systems using the Advanced Analytics connection
    is combined with data handled by the Qlik Associative Engine.
  prefs: []
  type: TYPE_NORMAL
- en: 'The workflow for Advanced Analytics Integration is illustrated in the following
    diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.1: Advanced Analytics Integration workflow](img/B19863_05_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.1: Advanced Analytics Integration workflow'
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will take a step-by-step look into the installation of R and Python
    integrations.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Advanced Analytics Integration with R
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this section, we will install R with Advanced Analytics Integration in a
    Qlik Sense client-managed environment. Let’s work through the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Prerequisites**: You need the latest version of client-managed Qlik Sense
    installed and properly licensed (Server Side Extensions are supported since the
    Feb 2018 release of Qlik Sense). You should also have a user account with appropriate
    access rights to configure the connection in the **Qlik Management** **Console**
    (**QMC**).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: First, we need to download and install the R environment. It can be downloaded
    from [https://cloud.r-project.org/](https://cloud.r-project.org/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The base package of R is enough. At the time of writing, R-4.3.1 is the latest
    version but you should use the most recent one. The correct binary is determined
    by your given operating system. You can install R on the same server as the client-managed
    Qlik Sense instance or on a separate server. In this example, we will install
    R on the same server as Qlik Sense. You can proceed with the default settings
    in the installer.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Next, we will need to install the `Rserve` package on our R environment in
    order to extend R functionality to applications via TCP/IP. Rserve makes it possible
    to invoke R scripts remotely and the SSE bridge is utilizing it as a part of communication
    flow. Open the Windows command line and navigate to the `bin` folder of your R
    environment directory. You might need to run an elevated command prompt that requires
    administrator privileges. In our example, the command to navigate to the right
    directory is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once you are in the correct directory, open the R environment by typing `R`
    and pressing *Enter*. You should see a similar view to that shown in the following
    screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 5.2: R environment running on the command line](img/B19863_05_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.2: R environment running on the command line'
  prefs: []
  type: TYPE_NORMAL
- en: 'Type the following command to install the `Rserve` package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: library(Rserve)
  prefs: []
  type: TYPE_NORMAL
- en: 'Rserve is now running and ready for commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'We need a bridge component between Rserve and Qlik Sense. Qlik provides an
    open source plugin version of this bridge component for R, which we will use in
    this example. There is also the possibility of developing your own bridge. Download
    the bridge from the following URL: [https://github.com/qlik-oss/sse-r-plugin](https://github.com/qlik-oss/sse-r-plugin).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'The plugin is written using C# and by default must be built. There is a prebuilt
    version of the plugin available in the `releases` section of the repository: [https://github.com/qlik-oss/sse-r-plugin/releases/tag/v1.2.1](https://github.com/qlik-oss/sse-r-plugin/releases/tag/v1.2.1).'
  prefs: []
  type: TYPE_NORMAL
- en: In this example, we will use the newest prebuilt version since compiling C#
    source code is out of the scope of this book.The **Bridge** component is used
    to provide the interface between the Qlik Advanced Analytics connector and third-party
    analytics engine. It is based on Google Remote Procedure Calls.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have either built the package or downloaded the prebuilt version,
    open a new command line, navigate to the folder containing `SSEtoRserve.exe`,
    and launch it from the command line. The following view should appear:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.3: SSEtoRserve running on the command line](img/B19863_05_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.3: SSEtoRserve running on the command line'
  prefs: []
  type: TYPE_NORMAL
- en: We have now verified that the bridge component can connect to Rserve. You should
    now close all open command-line windows before moving to the next step!
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The bridge component can run on the same server as the Qlik Sense environment
    or R environment, or on a separate server. Typically, it is recommended to install
    the bridge on the same server as Qlik Sense. In this example, we will install
    all the components on the same server.
  prefs: []
  type: TYPE_NORMAL
- en: If the bridge component and R environment are on different servers, you have
    to configure the bridge component to connect to the correct IP address and port
    where Rserve is running. To do that, modify the values in the `SSEtoRserve.exe.config`
    file in the same directory as `SSEtoRserve.exe`. There are also other options
    in this file, including settings for certificates, among other things.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will set up both R and our SSE-to-R bridge to run as a service. This
    will allow us to have an environment up and running all the time without the need
    to manually restart the services from the command line. There are multiple tools
    that can be used to run command-line scripts and programs as a service. In this
    example, we will use a free tool called NSSM. NSSM makes it easier to install
    and manage Windows services. Let’s start by downloading NSSM from the following
    link: [https://nssm.cc/download](https://nssm.cc/download).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you have finished downloading NSSM, extract the files from the `.zip` package
    and navigate to the `win64` folder (or `win32` if you are using a 32-bit environment)
    found inside the extracted folder using the command line. Make sure that you are
    running the command line with admin privileges.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We will start by installing Rserve as a service. To launch NSSM, type the following
    command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Figure 5.4: NSSM Rserve setup](img/B19863_05_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.4: NSSM Rserve setup'
  prefs: []
  type: TYPE_NORMAL
- en: Press the **Install service** button and you should get a message stating that
    the service was installed successfully.
  prefs: []
  type: TYPE_NORMAL
- en: To successfully run our Rserve service, we need to define the path to our R
    environment in the environment variables. To do that, let’s first open the environment
    variables window. It can be found by launching **Control Panel** � **System and
    Security** � **System** and selecting **Advanced system settings** on the left.
    The **System Properties** window will open. Click the **Environment Variables**
    button at the bottom of the window.
  prefs: []
  type: TYPE_NORMAL
- en: The `Path` and activate that. Then, press the **Edit** button. The **Edit environment
    variable** window opens.
  prefs: []
  type: TYPE_NORMAL
- en: 'Select **New** on the right side of the window and type the correct path to
    the directory containing your R executable. An example path is the following (You
    should use the actual path of your R installation here):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Confirm the edit by pressing `R_HOME` environment variable. For that, select
    `R_HOME` into the **Variable name** field and add the path to the R environment
    root folder into the **Variable** **value** field.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.5: System variable example](img/B19863_05_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.5: System variable example'
  prefs: []
  type: TYPE_NORMAL
- en: Press **OK** on all three windows until you get back to **Control Panel**. The
    system variables have now been created.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will install the bridge component as a service. Start by typing the
    following command into the same command-line window that we used in the previous
    step:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'A similar setup window to the one we saw in an earlier step should appear.
    Here, we will set our path to point to our `SSEtoRServe.exe` file located in our
    bridge connector folder. An example path is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The setup should look similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.6: NSSM SSEtoRserve setup](img/B19863_05_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.6: NSSM SSEtoRserve setup'
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will set `RserveService` as a dependency for our `SSEtoRServe` service.
    To do that, open the `RserveService` into the window, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.7: SSEtoRServe dependencies configuration](img/B19863_05_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.7: SSEtoRServe dependencies configuration'
  prefs: []
  type: TYPE_NORMAL
- en: After pressing the **Install service** button, we should get confirmation of
    a successful installation.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we can open the **Services** view from Windows and start our **SSEtoRserve**
    service. That should also fire up **RserveService**. Verify that both services
    are running correctly before proceeding to the next step.
  prefs: []
  type: TYPE_NORMAL
- en: The next step is to configure the Advanced Analytics connection in the QMC.
    Open `R`2.  `localhost`3.  `50051`4.  `20`5.  `0`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'An example of the settings is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.8: Analytic connection settings in the QMC](img/B19863_05_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.8: Analytic connection settings in the QMC'
  prefs: []
  type: TYPE_NORMAL
- en: Next, we can test that our connection works correctly. Open any Qlik Sense application
    or create a new one with some dummy data. Add a new sheet in the application and
    drag a KPI object onto the canvas.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Insert the following formula into the expression field in the KPI object:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The first part of the script tells the engine to utilize our newly created
    analytics connection. You can reference any analytics connection using its name
    as defined in the QMC. In this case, the name of our connection is `R`. The second
    part is a function provided by our bridge plugin. There are eight functions provided
    in total. We will take a deeper look at how to utilize these in [*Chapter 7*](B19863_07.xhtml#_idTextAnchor096).
    In this test, we will send a simple formula to sum two numbers in the R environment.
    R returns the sum of our calculation, and we should see it displayed in the KPI
    object:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 5.9: Example of a KPI calculated in R](img/B19863_05_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.9: Example of a KPI calculated in R'
  prefs: []
  type: TYPE_NORMAL
- en: We have now verified that our environment is working correctly. You can utilize
    the connection from the load script during data loads or on the fly just as we
    did with our example KPI.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The `SSEtoRserve` component writes a log into the `/logs` folder located in
    the `root` folder of the bridge. That log is a good place to start debugging possible
    issues and monitoring the performance of the environment and the models.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to run the Advanced Analytics connection on a Qlik Sense Desktop
    instance, you can add the connection details to the `Settings.ini` file located
    under `Documents/Qlik/Sense`. To create a connection to the R environment, add
    the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '`SSEPlugin=R,localhost:50051`'
  prefs: []
  type: TYPE_NORMAL
- en: Remember to add an empty line at the end of the file and then save it. Your
    Qlik Sense Desktop instance should now be able to connect to R using the Advanced
    Analytics connection. (Note that the `SSEtoRserve` bridge and Rserve must be running
    on your computer before starting Qlik Sense Desktop.)
  prefs: []
  type: TYPE_NORMAL
- en: Installing Advanced Analytics Integration with Python
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also utilize Python with the Advanced Analytics connection. In this
    section, we will install Python with Advanced Analytics Integration in a client-managed
    Qlik Sense environment. Let’s do this with the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Prerequisites**: You need the latest version of client-managed Qlik Sense
    installed and properly licensed. You should also have a user account with appropriate
    access rights to configure the connection in the QMC.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Download and install Python: [https://www.python.org/downloads/](https://www.python.org/downloads/).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the installer launches, select **Add python.exe to PATH** and press **Install
    Now**.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'This phase of the installer can be seen in the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 5.10: Python installation settings](img/B19863_05_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.10: Python installation settings'
  prefs: []
  type: TYPE_NORMAL
- en: 'After Python is successfully installed, we will add some libraries to it. Here,
    we are installing some of the most common statistical libraries needed in order
    to communicate through the bridge component. You can also install additional libraries
    based on your needs. Open a new command-line window and type the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 2.  For this example, we will also use predefined bridge that is created by
    Qlik. Download it from [https://github.com/qlik-oss/server-side-extension/releases/tag/v1.1.0](https://github.com/qlik-oss/server-side-extension/releases/tag/v1.1.0)
    and extract it to the server.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Next, we will configure our analytics connection in the QMC. Open `Script`4.  `localhost`5.  `50051`6.  `20`7.  `0`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, we will import our example application. Navigate to the folder containing
    the bridge downloaded in *step 4*. From there, navigate to the `\examples\python\FullScriptSupport`
    folder and look for an application called `SSE_Full_Script_Support.qvf`. Import
    that into your Qlik Sense environment.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the command line and navigate to the folder containing the bridge downloaded
    in *step 4*. From there, navigate to the `\examples\python\FullScriptSupport`
    folder. Type the following command and press *Enter*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You should see the following lines in a command-line window:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The Python environment is now running and ready to take commands from the Qlik
    application.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are installing this example on the same environment as the previous
    R example, you need to change the port for this Python example. To do that, you
    can modify the code in the `ExtensionService_Script.py` file located in the same
    folder where we ran our example in *step 7*. The port is defined on line *117*:'
  prefs: []
  type: TYPE_NORMAL
- en: '`parser.add_argument(''—port'',` `nargs=''?'', default=''50051'')`'
  prefs: []
  type: TYPE_NORMAL
- en: Change that and make the corresponding change in **QMC** � **Analytic connection**.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: You can also set up a Python environment to run as a service using the same
    method described earlier with R components. We will not cover that part in detail
    here, but basically, you can install Python as a service using NSSM and give the
    script as an argument.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `SSE_Full_Script_Support.qvf` file that we imported in *step 6* to
    verify the functionality. If you open the first sheet of the application, you
    should see the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.11: Python connection working](img/B19863_05_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.11: Python connection working'
  prefs: []
  type: TYPE_NORMAL
- en: We have now successfully installed Python with the Advanced Analytics connection
    on Qlik.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Qlik AutoML
  prefs: []
  type: TYPE_NORMAL
- en: 'Since Qlik AutoML is a SaaS solution, there is minimal setup required. In this
    section, we will look at the necessary steps to utilize AutoML. We will assume
    that a Qlik Cloud tenant is up and running. The Basic tier of Qlik AutoML is included
    as part of the Qlik Cloud subscription license. We will take a deep dive into
    Qlik AutoML itself in [*Chapter 8*](B19863_08.xhtml#_idTextAnchor101). To prepare
    our environment for that chapter, the following steps are needed:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Management Console** in Qlik Cloud and open the **Settings** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Under the **Feature control** section, make sure that **Machine learning endpoints**
    is enabled, as seen in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.12: Machine learning endpoints setting](img/B19863_05_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.12: Machine learning endpoints setting'
  prefs: []
  type: TYPE_NORMAL
- en: Select `ML` `experiments`. This will be our space for all the work done in [*Chapter
    8*](B19863_08.xhtml#_idTextAnchor101).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Our cloud environment is now set up and ready. We will now explore various integrations
    that we can use with Qlik Cloud.
  prefs: []
  type: TYPE_NORMAL
- en: Cloud integrations with REST
  prefs: []
  type: TYPE_NORMAL
- en: There are many third-party machine learning and AI platforms on the market.
    You can connect to most of these from Qlik Cloud. In this section, we will briefly
    look at the different options and requirements for each connection. We will not
    create the actual models on top of third-party tools in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: To start using connections to third-party machine learning endpoints, you must
    enable them from **Management Console** in Qlik Cloud. If you have been following
    this chapter from the beginning, we completed that step in the previous section.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are dedicated connectors available for the most common machine learning
    tools out there. At the time of writing this book, the connectors are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The general Advanced Analytics connector
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Amazon Comprehend connector
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Amazon SageMaker connector
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure ML connector
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure OpenAI connector
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Databricks MLflow connector
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DataRobot connector
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Qlik AutoML connector
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Qlik GeoOperations connector
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OpenAI connector
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All these connections are available when you select **Add New** � **Data connection**
    in Qlik Cloud. Analytics connections can send data to external machine learning
    endpoints for calculation. The functionality is similar to what we discovered
    with the R and Python connections earlier in this chapter. The data connection
    can be utilized either from a load script or *on the fly* from visualization expressions.
    We will go deeper into the syntax in [*Chapter 7*](B19863_07.xhtml#_idTextAnchor096).
  prefs: []
  type: TYPE_NORMAL
- en: Let’s take a closer look at some of these connectors.
  prefs: []
  type: TYPE_NORMAL
- en: General Advanced Analytics connector
  prefs: []
  type: TYPE_NORMAL
- en: 'To use a generic connector, there must be an endpoint to connect to, and this
    endpoint must be publicly accessible by the Qlik Cloud environment. The parameters
    for these connections are the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**URL**: Host URL for the platform where the model is deployed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Method**: GET or POST.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`application/json`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**HTTP Headers**: Custom headers sent with each request.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Query Parameters**: Parameters that will be attached to the end of the URL.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Authorization Method**: None, Bearer Token, or AWS Auth v4 Signature.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Request**: Format and content of the request.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Response Fields**: Whether to load all fields. If this is not selected, you
    can specify the fields to be loaded.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Response Table**: Definition of specific table fields. If the previous parameter
    is not checked, this is used to determine the fields to be loaded.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Association**: A field containing a unique identifier. The result table will
    be associated with the source table using this information. This can be any field
    containing a unique ID.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Name**: Connection name.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once you create a connection, it will appear under **Data connections** in **Data**
    **load editor**.
  prefs: []
  type: TYPE_NORMAL
- en: Amazon SageMaker connector
  prefs: []
  type: TYPE_NORMAL
- en: 'Amazon SageMaker is a well-known machine learning platform. There is a dedicated
    connector to interact with SageMaker from Qlik Cloud. To connect to a SageMaker
    endpoint, it must be publicly accessible by Qlik Cloud. The parameters for this
    connector are the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Endpoint Name**: Identifier used by the endpoint in the AWS environment.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Model Name**: Name given for the deployed model in AWS.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Model Variant Name**: If a multi-model endpoint is deployed, this parameter
    is used to recognize the variant. For a simple endpoint, this should not be provided.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Settings**: **Region** is where the AWS Region for the service is specified,
    and **Use FIPS Endpoint** specifies whether there is a need for a FIPS-compliant
    endpoint.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Authentication**: Here we use the AWS access key and secret key found in
    the AWS console.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Response Format**: JSON or Text Array. Most models use JSON.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Response Table**: **Name of Returned Table** identifies the table returned
    by the model and **Table Path** can be used to specify the table using a JMES
    path.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Response Fields**: Whether to load all fields. If this is not selected, you
    can specify the fields to be loaded using the **Table** **Fields** selector.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Association**: A field containing a unique identifier. The result table will
    be associated with the source table using this information. This can be any field
    with a unique ID.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Name**: Connection name.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure ML connector
  prefs: []
  type: TYPE_NORMAL
- en: 'Azure ML is another well-known machine learning platform. To connect to an
    Azure ML endpoint, it must be publicly accessible by Qlik Cloud. These are the
    parameters for this connector:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Format**: Azure ML or Azure ML (Legacy). Legacy format should be used for
    models created before January 2022.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Endpoint Name**: Identifier used for the endpoint in Azure.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Authentication**: The Azure ML Endpoint Key obtained from the Azure portal.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Request**: **Web Service Input Name** is the name of the JSON object expected
    by the model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Response Table**: Here, **Name of Returned Table** identifies the table returned
    by the model and **Table Path** can be used to specify the table using the JMES
    path.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Response Fields**: Whether to load all fields. If this is not selected, you
    can specify the fields to be loaded using the **Table** **Fields** selector.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Association**: A field containing a unique identifier. The result table will
    be associated with the source table using this information. This can be any field
    with a unique ID.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Name**: Connection name.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Qlik AutoML connector
  prefs: []
  type: TYPE_NORMAL
- en: 'Qlik AutoML is a machine learning environment in Qlik Cloud and has its own
    dedicated connection. We will take a closer look at AutoML and how to use it in
    [*Chapter 8*](B19863_08.xhtml#_idTextAnchor101). The parameters for Qlik AutoML
    connector are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Connection**: Name of the deployed ML model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Response Table**: **Name of the Returned Table** is the table returned by
    the model. You can also specify whether you would like to include SHAP values,
    the source dataset, and any errors in the response.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Association**: A field containing a unique identifier. The result table will
    be associated with the source table using this information. This can be any field
    with a unique ID.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Name**: Connection name.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We have now looked briefly at some of the parameters required by Advanced Analytics
    connections from Qlik Cloud to both third-party machine learning environments
    and Qlik AutoML. We will utilize some of these endpoints in later parts of this
    book.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: An interesting part of the analytics connector package are the OpenAI connector
    and Azure OpenAI connector. These connectors will provide a seamless integration
    into generative AI models. The principles of the connection are similar to the
    other analytics connections but there are an endless number of possibilities.
    In this chapter, we are not going deeper into setting up a connection, but you
    can find detailed instructions in the Qlik help site.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we started to move toward the practical implementation of machine
    learning models with Qlik. To prepare for the coming chapters, we installed different
    environments.
  prefs: []
  type: TYPE_NORMAL
- en: First, we went through the installation of the R environment and the Advanced
    Analytics connection from a client-managed Qlik Sense instance in R. We covered
    the steps to run the components as a service and created a simple sample application
    to verify the functionality.
  prefs: []
  type: TYPE_NORMAL
- en: We also installed a Python environment and connected that to our Qlik environment
    using Advanced Analytics Integration. We demonstrated the functionality of this
    environment using an example application. At the end of this chapter, we moved
    from on-premises into cloud environments and discovered how to create connections
    to external AI and machine learning platforms using REST. We also did a few setup
    steps for our AutoML environment to get it ready for our coming chapters.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will investigate the data-modeling capabilities of Qlik
    Sense. We will learn how to create a data model, how to clean data, and how to
    analyze it. We will learn about different techniques and tools to be able to prepare
    a perfect dataset for our machine learning purposes. We will utilize the skills
    learned here throughout the next chapter when we start to implement and create
    actual machine learning models.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
