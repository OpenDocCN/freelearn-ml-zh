["```py\n    android:theme=\"@android:style/Theme.NoTitleBar.Fullscreen\"\n    ```", "```py\n    <uses-permission android:name=\"android.permission.CAMERA\"/>\n        <uses-feature android:name=\"android.hardware.camera\" android:required=\"false\"/>\n        <uses-feature android:name=\"android.hardware.camera.autofocus\"      android:required=\"false\"/>\n        <uses-feature android:name=\"android.hardware.camera.front\" android:required=\"false\"/>\n        <uses-feature android:name=\"android.hardware.camera.front.autofocus\" android:required=\"false\"/>\n    ```", "```py\n    <org.opencv.android.JavaCameraView\n            android:layout_width=\"fill_parent\"\n            android:layout_height=\"fill_parent\"\n            android:id=\"@+id/java_surface_view\" />\n    ```", "```py\nprivate BaseLoaderCallback mLoaderCallback = new BaseLoaderCallback(this) {\n        @Override\n        public void onManagerConnected(int status) {\n            switch (status) {\n                case LoaderCallbackInterface.SUCCESS:\n                {\n                    Log.i(TAG, \"OpenCV loaded successfully\");\n                    try{\n                        InputStream is = getResources().openRawResource(<INSERT_RESOURCE_IDENTIFIER>);\n                        File cascadeDir = getDir(\"cascade\", Context.MODE_PRIVATE);\n                        mCascadeFile = new File(cascadeDir, \"cascade.xml\");\n                        FileOutputStream os = new FileOutputStream(mCascadeFile);\n\n                        byte[] buffer = new byte[4096];\n                        int bytesRead;\n                        while((bytesRead = is.read(buffer)) != -1)\n                        {\n                            os.write(buffer, 0, bytesRead);\n                        }\n                        is.close();\n                        os.close();\n\n                        haarCascade = new CascadeClassifier(mCascadeFile.getAbsolutePath());\n                        if (haarCascade.empty())\n                        {\n                            Log.i(\"Cascade Error\",\"Failed to load cascade classifier\");\n                            haarCascade = null;\n                        }\n                    }\n                    catch(Exception e)\n                    {\n                        Log.i(\"Cascade Error: \",\"Cascase not found\");\n                    }\n                    mOpenCvCameraView.enableView();\n                } break;\n                default:\n                {\n                    super.onManagerConnected(status);\n                } break;\n            }\n        }\n    };\n```", "```py\nInputStream is = getResources().openRawResource(<INSERT_RESOURCE_IDENTIFIER>);\nFile cascadeDir = getDir(\"cascade\", Context.MODE_PRIVATE);\nmCascadeFile = new File(cascadeDir, \"cascade.xml\");\nFileOutputStream os = new FileOutputStream(mCascadeFile);\n\nbyte[] buffer = new byte[4096];\nint bytesRead;\nwhile((bytesRead = is.read(buffer)) != -1)\n{\nos.write(buffer, 0, bytesRead);\n}\nis.close();\nos.close();\n```", "```py\nhaarCascade = new CascadeClassifier(mCascadeFile.getAbsolutePath());\nif (cascade.empty())\n{\n    Log.i(\"Cascade Error\",\"Failed to load cascade classifier\");\n    cascade = null;\n}\n```", "```py\n    @Override\n    public void onCameraViewStarted(int width, int height) {\n        mRgba = new Mat(height, width, CvType.CV_8UC4);\n    }\n\n    @Override\n    public void onPause()\n    {\n        super.onPause();\n        if (mOpenCvCameraView != null)\n            mOpenCvCameraView.disableView();\n    }\n\n    @Override\n    public void onResume()\n    {\n        super.onResume();\n        OpenCVLoader.initAsync(OpenCVLoader.OPENCV_VERSION_2_4_9, this, mLoaderCallback);\n    }\n\n    public void onDestroy() {\n        super.onDestroy();\n        if (mOpenCvCameraView != null)\n            mOpenCvCameraView.disableView();\n    }\n```", "```py\n@Override\n    public Mat onCameraFrame(CameraBridgeViewBase.CvCameraViewFrame inputFrame) {\n\n        //Rotating the input frame\n        Mat mGray = inputFrame.gray();\n        mRgba = inputFrame.rgba();\n        if (mIsFrontCamera)\n        {\n            Core.flip(mRgba, mRgba, 1);\n        }\n\n        //Detecting face in the frame\n        MatOfRect faces = new MatOfRect();\n        if(cascade != null)\n        {\n            cascade.detectMultiScale(mGray, faces, 1.1, 2, 2, new Size(200,200), new Size());\n        }\n\n        Rect[] facesArray = faces.toArray();\n        for (int i = 0; i < facesArray.length; i++)\n            Core.rectangle(mRgba, facesArray[i].tl(), facesArray[i].br(), new Scalar(100), 3);\n        return mRgba;\n    }\n```", "```py\ncascade.detectMultiScale(mGray, faces, 1.1, 2, 2, new Size(200,200), new Size());\n```", "```py\n    @Override\n        public boolean onCreateOptionsMenu(Menu menu) {\n            // Inflate the menu; this adds items to the action bar if it is present.\n            getMenuInflater().inflate(R.menu.menu_main, menu);\n            Log.i(TAG, \"called onCreateOptionsMenu\");\n            mItemSwitchCamera = menu.add(\"Toggle Front/Back camera\");\n            return true;\n        }\n    ```", "```py\n    @Override\n        public boolean onOptionsItemSelected(MenuItem item) {\n            String toastMesage = \"\";\n\n            if (item == mItemSwitchCamera) {\n                mOpenCvCameraView.setVisibility(SurfaceView.GONE);\n                mIsFrontCamera = !mIsFrontCamera;\n                mOpenCvCameraView = (CameraBridgeViewBase) findViewById(R.id.java_surface_view);\n                if (mIsFrontCamera) {\n\n                    mOpenCvCameraView.setCameraIndex(1);\n                    toastMesage = \"Front Camera\";\n                } else {\n                    mOpenCvCameraView.setCameraIndex(-1);\n                    toastMesage = \"Back Camera\";\n                }\n\n                mOpenCvCameraView.setVisibility(SurfaceView.VISIBLE);\n                mOpenCvCameraView.setCvCameraViewListener(this);\n                mOpenCvCameraView.enableView();\n                Toast toast = Toast.makeText(this, toastMesage, Toast.LENGTH_LONG);\n                toast.show();\n            }\n\n            return true;\n        }\n    ```", "```py\n    mOpenCvCameraView.setCameraIndex(-1);\n    ```", "```py\nelse if (id == R.id.FaceDetect) {\n            //Detec Faces\n            HOGDescriptor();\n        }\n```", "```py\nvoid HOGDescriptor() {\n        Mat grayMat = new Mat();\n        Mat people = new Mat();\n\n        //Converting the image to grayscale\n        Imgproc.cvtColor(originalMat, grayMat, Imgproc.COLOR_BGR2GRAY);\n\n        HOGDescriptor hog = new HOGDescriptor();\n        hog.setSVMDetector(HOGDescriptor.getDefaultPeopleDetector());\n\n        MatOfRect faces = new MatOfRect();\n        MatOfDouble weights = new MatOfDouble();\n\n        hog.detectMultiScale(grayMat, faces, weights);\n        originalMat.copyTo(people);\n        //Draw faces on the image\n        Rect[] facesArray = faces.toArray();\n        for (int i = 0; i < facesArray.length; i++)\n            Core.rectangle(people, facesArray[i].tl(), facesArray[i].br(), new Scalar(100), 3);\n\n        //Converting Mat back to Bitmap\n        Utils.matToBitmap(people, currentBitmap);\n        loadImageToImageView();\n    }\n```", "```py\nHOGDescriptor hog = new HOGDescriptor();\nhog.setSVMDetector(HOGDescriptor.getDefaultPeopleDetector());\n```"]