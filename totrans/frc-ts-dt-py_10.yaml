- en: '10'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '10'
- en: Accounting for Outliers and Special Events
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 考虑异常值和特殊事件
- en: An **outlier** is any data point that lies significantly away from other data
    points along one or multiple different axes. Outliers may be incorrect data, resulting
    from a miscalibrated sensor producing invalid data, or even a finger slip on the
    keyboard during data entry, or they can be accurately recorded data that happens
    to wildly miss historical trends for various reasons, such as whether a tornado
    passed over a wind speed sensor.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**异常值**是指任何在一条或多条不同轴上显著偏离其他数据点的数据点。异常值可能是由于传感器校准不当产生无效数据，或者在数据输入时键盘上的手指滑动造成的错误数据，或者它们可能是准确记录的数据，但由于各种原因（例如，龙卷风经过风速传感器）意外地与历史趋势相差甚远。'
- en: These uncharacteristic measurements will sway any statistical or machine learning
    model, so correcting outliers is a challenge throughout data science and statistics.
    Fortunately, Prophet is generally robust at handling mild outliers. With extreme
    outliers though, there are two problems Prophet can experience – one problem with
    seasonality and another with uncertainty intervals.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 这些不寻常的测量值会动摇任何统计或机器学习模型，因此纠正异常值是数据科学和统计学中的一个挑战。幸运的是，Prophet通常在处理轻微异常值方面很稳健。然而，对于极端异常值，Prophet可能会遇到两个问题——一个与季节性有关，另一个与不确定性区间有关。
- en: In this chapter, you’ll see examples of both of these problems and learn how
    to alleviate their effects on your forecast. You’ll also learn a few techniques
    to automate outlier detection, and finally, you’ll apply a lesson learned in [*Chapter
    8*](B19630_08.xhtml#_idTextAnchor537), *Influencing Trend Changepoints*, to keep
    the outliers in your model but instruct Prophet not to modify the trends or seasonalities
    to fit them.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将看到这两种问题的示例，并学习如何减轻它们对您预测的影响。您还将学习一些自动化异常值检测的技术，最后，您将应用在[*第8章*](B19630_08.xhtml#_idTextAnchor537)中学习到的经验，即*影响趋势变化点*，以在模型中保留异常值，但指示Prophet不要修改趋势或季节性以适应它们。
- en: 'This chapter will cover the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Correcting outliers that cause seasonality swings
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 纠正导致季节性波动的异常值
- en: Correcting outliers that cause wide uncertainty intervals
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 纠正导致宽不确定性区间的异常值
- en: Detecting outliers automatically
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动检测异常值
- en: Modeling outliers as special events
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将异常值建模为特殊事件
- en: Modeling shocks, such as COVID-19 lockdowns
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 建模冲击，例如COVID-19封锁
- en: Technical requirements
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: The data files and code for the examples in this chapter can be found at [https://github.com/PacktPublishing/Forecasting-Time-Series-Data-with-Prophet-Second-Edition](https://github.com/PacktPublishing/Forecasting-Time-Series-Data-with-Prophet-Second-Edition).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中示例的数据文件和代码可以在[https://github.com/PacktPublishing/Forecasting-Time-Series-Data-with-Prophet-Second-Edition](https://github.com/PacktPublishing/Forecasting-Time-Series-Data-with-Prophet-Second-Edition)找到。
- en: Correcting outliers that cause seasonality swings
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 纠正导致季节性波动的异常值
- en: We’ll be using a new dataset in this chapter to look at outliers – the average
    number of likes per day of posts on National Geographic’s Instagram account, `@NatGeo`.
    This data was collected on November 21, 2019.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将使用一个新的数据集来查看异常值——国家地理Instagram账户`@NatGeo`上每天帖子平均点赞数，这些数据是在2019年11月21日收集的。
- en: 'I’ve chosen this dataset because it exhibits several significant outliers,
    which are marked in the following plot:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我选择这个数据集是因为它显示了几个显著的异常值，这些异常值在以下图中标记：
- en: '![Figure 10.1 – Outliers on National Geographic’s Instagram account](img/Fig_10.1.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![图10.1 – 国家地理Instagram账户上的异常值](img/Fig_10.1.jpg)'
- en: Figure 10.1 – Outliers on National Geographic’s Instagram account
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.1 – 国家地理Instagram账户上的异常值
- en: Each dashed vertical line indicates a moment where the time series deviated
    significantly. The second line from the left indicates a radical trend change
    in the summer of **2015**, but the other four lines indicate outliers, with the
    last two outliers spanning across wide time ranges. We’ll specifically be looking
    at the line occurring in mid-**2016**, in August to be precise. This represents
    the most extreme outliers. The **2014** set of outliers can be safely ignored,
    as they do not affect the forecast too much. The **2017** and **2019** outliers
    look like they may be seasonal effects, so we’ll let the yearly seasonality capture
    them.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 每条虚线垂直线都表示时间序列发生了显著偏差的时刻。从左数第二条线表示**2015年**夏季发生了根本性的趋势变化，但其他四条线表示异常值，最后两个异常值跨越了较宽的时间范围。我们将特别关注发生在**2016年**中期的线条，具体来说是8月份。这代表了最极端的异常值。**2014年**的异常值可以安全忽略，因为它们对预测的影响不大。**2017年**和**2019年**的异常值看起来可能是季节性影响，所以我们将让年度季节性来捕捉它们。
- en: 'As it turns out, in September 2016, National Geographic published a book, *@NatGeo:
    The Most Popular Instagram Photos*. It seems that in the month prior to this,
    National Geographic undertook some marketing activities that boosted the number
    of likes on its Instagram account.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '事实上，在2016年9月，国家地理杂志（National Geographic）出版了一本书，[*NatGeo: 最受欢迎的Instagram照片*](https://example.org)。似乎在这之前的一个月，国家地理杂志进行了一些营销活动，从而提高了其Instagram账号的点赞数。'
- en: As we saw in [*Chapter 8*](B19630_08.xhtml#_idTextAnchor537), *Influencing Trend
    Changepoints*, James Rodríguez’s account also saw an increased number of likes
    during his World Cup appearances. However, in his case, these events were followed
    by higher baselines of likes at their conclusion – a significant trend change
    had occurred. In contrast, National Geographic’s August marketing work did not
    produce a lasting trend change, although it did increase the number of likes.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在[*第8章*](B19630_08.xhtml#_idTextAnchor537)中看到的，*影响趋势变化点*，詹姆斯·罗德里格斯（James
    Rodríguez）的账号在他的世界杯亮相期间也看到了点赞数的增加。然而，在他的情况下，这些事件在其结束时都伴随着更高的点赞基数——发生了显著的趋势变化。相比之下，国家地理杂志在8月份的营销工作并没有产生持久性的趋势变化，尽管它确实增加了点赞数。
- en: 'The spike represents the first type of problem outliers can cause in Prophet
    – they can dominate a seasonality curve. Let me show you what I mean by plotting
    a Prophet forecast. Let’s make our imports, load the data, and plot the forecast.
    We’ll use multiplicative seasonality and dampen the Fourier order of the yearly
    seasonality down to `6`:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 峰值代表了先知（Prophet）中异常值可能引起的第一种问题——它们可以主导季节性曲线。让我通过绘制先知预测图来展示我的意思。让我们导入必要的库，加载数据，并绘制预测图。我们将使用乘法季节性并将年度季节性的傅里叶阶数降低到`6`：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'These outliers have caused Prophet to model a spike in likes every August:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这些异常值导致Prophet模型在每年的8月份出现点赞数的峰值：
- en: '![Figure 10.2 – The NatGeo forecast with outliers](img/Fig_10.2.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![图10.2 – 带有异常值的国家地理（NatGeo）预测](img/Fig_10.2.jpg)'
- en: Figure 10.2 – The NatGeo forecast with outliers
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.2 – 带有异常值的国家地理（NatGeo）预测
- en: 'It’s true that August in **2013**, **2015**, **2017**, and **2019** also saw
    periods of increased likes, but the even years did not. Some seasonality would
    be expected but not this much. To make matters worse, this effect reverberates
    forever into the future. You can see how significant an effect this is by looking
    at the yearly seasonality plot:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 确实，在**2013年**、**2015年**、**2017年**和**2019年**的8月份也看到了点赞数的增加期，但偶数年份并没有。虽然可以预期会有一些季节性变化，但不会这么多。更糟糕的是，这种影响将永远影响未来。你可以通过查看年度季节性图来了解这种影响的显著性：
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Here, you can see the August peak clearly:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你可以清楚地看到8月的峰值：
- en: '![Figure 10.3 – Prophet’s yearly seasonality with outliers](img/Fig_10.3.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![图10.3 – 先知（Prophet）的年度季节性及异常值](img/Fig_10.3.jpg)'
- en: Figure 10.3 – Prophet’s yearly seasonality with outliers
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.3 – 先知（Prophet）的年度季节性及异常值
- en: While attempting to fit a yearly seasonality to those outliers in **2016**,
    Prophet has allowed **August** to contribute a boost of more than 20% to the number
    of expected likes. We see those frequent August boosts, so we do want Prophet
    to model them, but the **2016** anomaly is dominating.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在尝试将年度季节性拟合到**2016年**的这些异常值时，Prophet允许**8月**对预期点赞数的增加贡献超过20%。我们看到那些频繁的8月增加，所以我们确实希望Prophet能够模拟它们，但**2016年**的异常值占主导地位。
- en: The solution is simply to remove the points. Prophet handles missing data very
    well, so introducing a small gap won’t pose any issues. In [*Chapter 4*](B19630_04.xhtml#_idTextAnchor197),
    *Handling Non-Daily Data*, you learned how to handle regular gaps by removing
    those gaps from the `future` DataFrame as well. In this case though, as long as
    we have **August** data for other years, we don’t need to take that precaution.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: 'It seems that the first major outlier was on July 29 and the final one was
    on September 1, so we’ll exclude data between those dates using `pandas`’ Boolean
    indexing:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This new `df2` is identical to our original `df`, just excluding those outliers.
    Let’s build the same Prophet model as before but just switch out the previous
    DataFrame, `df`, for this new one, `df2`:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You can see the month-long gap in August 2016 in this plot. The forecast simply
    passes through it:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.4 – The NatGeo forecast with outliers removed](img/Fig_10.4.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
- en: Figure 10.4 – The NatGeo forecast with outliers removed
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: 'This new forecast also shows significant seasonality, but we do expect this,
    as NatGeo’s likes are frequently higher in the summer. To quantify the difference
    between this forecast and the previous, let’s also plot the yearly seasonality:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'It’s a very similar shape to *Figure 10**.3*, but with a less exaggerated August
    peak:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.5 – Prophet’s yearly seasonality with outliers removed](img/Fig_10.5.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
- en: Figure 10.5 – Prophet’s yearly seasonality with outliers removed
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: Now, the August peak has almost halved; it is just over 10% of a boost. This
    is much closer to what would be expected without the external (and non-repeating)
    shock of the marketing push before the release of National Geographic’s book.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s look at the second type of outlier issue.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: Correcting outliers that cause wide uncertainty intervals
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the first type of outlier we looked at, the problem was that the seasonality
    was affected and forever changed `yhat` in the forecast (if you remember from
    [*Chapter 2*](B19630_02.xhtml#_idTextAnchor104), *Getting Started with Prophet*,
    `yhat` is the predicted value for future dates contained in Prophet’s `forecast`
    DataFrame). In this second problem, `yhat` is minimally affected, but the uncertainty
    intervals widen dramatically.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: 'To simulate this issue, we need to modify our NatGeo data a bit. Let’s say
    that Instagram introduced a bug in their code that capped likes at 100,000 per
    post. It somehow went unnoticed for a year before being fixed, but unfortunately,
    all likes above 100,000 were lost. Such an error would look like this:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.6 – Capped likes on National Geographic’s Instagram account](img/Fig_10.6.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
- en: Figure 10.6 – Capped likes on National Geographic’s Instagram account
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: 'You can simulate this new dataset yourself with the following code:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This sets all the likes on all posts in 2016 to 100,000\. To see what problem
    this causes, let’s again build the same model as before:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We’re adding the changepoints to the plot in this example because that is exactly
    where the error is introduced, as seen in the following graph:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将变化点添加到图表中，因为这就是引入错误的地方，如下面的图表所示：
- en: '![Figure 10.7 – The NatGeo forecast with outliers](img/Fig_10.7.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![图10.7 – 包含异常值的NatGeo预测](img/Fig_10.7.jpg)'
- en: Figure 10.7 – The NatGeo forecast with outliers
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.7 – 包含异常值的NatGeo预测
- en: The future uncertainty explodes going forward. In the previous example, Prophet
    modeled the outliers with seasonality, adding extreme data to the yearly seasonality
    component. In this example though, Prophet models the outliers with trend changepoints.
    The seasonality is unaffected.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 随着时间的推移，未来的不确定性急剧增加。在之前的例子中，Prophet使用季节性来模拟异常值，向年度季节性组件添加极端数据。然而，在这个例子中，Prophet使用趋势变化点来模拟异常值。季节性不受影响。
- en: We’ll fully discuss uncertainty in [*Chapter 11*](B19630_11.xhtml#_idTextAnchor728),
    *Managing Uncertainty Intervals*, but briefly, what Prophet does is look at the
    frequency and magnitude of historical changepoints and model future uncertainty,
    assuming that future changepoints may occur with the same frequency and magnitude.
    So, dramatic historical changepoints, as you can see in *Figure 10**.7*, will
    cause dramatic future uncertainty, as Prophet is unsure whether they will occur
    again.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[*第11章*](B19630_11.xhtml#_idTextAnchor728)“管理不确定性区间”中全面讨论不确定性，但简而言之，Prophet所做的是查看历史变化点的频率和幅度，并预测未来的不确定性，假设未来的变化点可能以相同的频率和幅度发生。因此，如您在*图10.7*中看到的戏剧性历史变化点将导致戏剧性的未来不确定性，因为Prophet不确定它们是否会再次发生。
- en: 'The solution, fortunately, is the same as in the previous situation – simply
    remove the bad data. In the previous example, we removed the rows from our DataFrame
    that contained bad data, but in this example, we’ll set the `''y''` value to `None`:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，解决方案与之前的情况相同——简单地移除不良数据。在之前的例子中，我们移除了包含不良数据的DataFrame中的行，但在这个例子中，我们将`'y'`值设置为`None`：
- en: '[PRE7]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This makes no difference to our trends or seasonalities. Where it does make
    a difference is that now, instead of skipping over those dates in the `forecast`
    DataFrame, it predicts the values on those dates. You can see this in the forecast
    plot coming up in *Figure 10**.8*. Instead of a straight prediction line passing
    through the missing data, it follows the seasonality.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这对我们趋势或季节性没有影响。它产生影响的方面是，现在，我们不再跳过`forecast` DataFrame中的那些日期，而是在这些日期上预测值。您可以在即将出现的*图10.8*中看到这一点。与直接穿过缺失数据的预测线不同，它遵循季节性。
- en: 'Let’s rebuild our model again, using the `df3` DataFrame:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再次重建我们的模型，使用`df3` DataFrame：
- en: '[PRE8]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Compared to *Figure 10**.7*, we have now tamed that forecast uncertainty, as
    shown in the following plot:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 与*图10.7*相比，我们现在已经驯服了预测的不确定性，如下面的图表所示：
- en: '![Figure 10.8 – The NatGeo forecast with outliers removed](img/Fig_10.8.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![图10.8 – 移除异常值的NatGeo预测](img/Fig_10.8.jpg)'
- en: Figure 10.8 – The NatGeo forecast with outliers removed
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.8 – 移除异常值的NatGeo预测
- en: As mentioned before, we have missing data in 2016, but Prophet still made a
    prediction and plotted the predicted values. This is the result of setting those
    missing values to `None` instead of deleting them. Compare *Figure 10**.8* with
    *Figure 10**.4*, where the missing data has no predicted values and the plot passes
    right through them in a straight line.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，我们在2016年有缺失数据，但Prophet仍然做出了预测并绘制了预测值。这是将那些缺失值设置为`None`而不是删除它们的结果。将*图10.8*与*图10.4*进行比较，其中缺失数据没有预测值，图表直接穿过它们形成一条直线。
- en: Mathematically, it makes no difference to your future forecast; it just applies
    predicted values to those that were missing. It is entirely up to you whether
    you want these missing values to be predicted in the `future` DataFrame or ignored.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 从数学上讲，这对您的未来预测没有影响；它只是将预测值应用于那些缺失的值。是否希望这些缺失值在`future` DataFrame中被预测或忽略，完全取决于您。
- en: Detecting outliers automatically
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动检测异常值
- en: In these examples so far, we detected outliers with a simple visual inspection
    of the data and applied common sense. In a fully automated setting, defining logical
    rules for what we as humans do intuitively can be difficult. Outlier detection
    is a good use of an analyst’s time, as we humans are able to use much more intuition,
    domain knowledge, and experience than a computer can. But as Prophet was developed
    to reduce the workload of analysts and automate as much as possible, we’ll examine
    a couple of techniques to identify outliers automatically.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在到目前为止的这些例子中，我们通过简单的数据可视化检测到异常值，并应用常识。在一个完全自动化的环境中，定义我们作为人类直观行为的相关逻辑规则可能很困难。异常值检测是分析师时间的好用途，因为我们人类能够比计算机使用更多的直觉、领域知识和经验。但是，由于Prophet是为了减少分析师的工作量并尽可能实现自动化而开发的，我们将探讨一些自动识别异常值的技术。
- en: Winsorizing
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Winsorizing
- en: The first technique is called **Winsorization**, named after the statistician
    Charles P. Winsor. It is also sometimes called **clipping**. Winsorization is
    a blunt tool and tends not to work well with non-flat trends. Winsorization requires
    an analyst to specify a percentile; all data above or below that percentile is
    forced to remain at the value at the percentile.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 第一种技术被称为**Winsorization**，以统计学家查尔斯·P·Winsor的名字命名。有时它也被称为**截尾**。Winsorization是一种钝工具，通常不适用于非平稳趋势。Winsorization要求分析师指定一个百分位数；所有高于或低于该百分位数的数值都被迫保持在百分位数的值上。
- en: '**Trimming** is a similar technique, except that the extreme values are removed.
    The difference between these techniques can be seen in this simple example, in
    which the outliers are the two most extreme points on each side of the three plots:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '**Trimming**是一种类似的技术，不同之处在于移除了极端值。这些技术之间的差异可以通过这个简单的例子看到，在这个例子中，异常值是三个图表每侧最极端的两个点：'
- en: '![Figure 10.9 – Winsorization versus trimming](img/Fig_10.9.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![图10.9 – Winsorization与Trimming的比较](img/Fig_10.9.jpg)'
- en: Figure 10.9 – Winsorization versus trimming
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.9 – Winsorization与Trimming的比较
- en: Tip
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士
- en: In statistics, the word *stationary* means that the mean, variance, and autocorrelation
    structure do not change over time. In time series with a *flat trend*, the mean
    does not change over time, and so one (and possibly each) requirement of stationarity
    is met. With stationary data, outliers may often be replaced by the mean value;
    however, this technique typically does not work with time series lacking a flat
    trend, due to the stationarity requirement.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在统计学中，单词*stationary*意味着均值、方差和自相关结构不会随时间变化。在具有*平稳趋势*的时间序列中，均值不会随时间变化，因此满足了一个（以及可能每个）平稳性的要求。对于平稳数据，异常值通常可以用均值来替换；然而，由于平稳性的要求，这种技术通常不适用于缺乏平稳趋势的时间序列。
- en: To take a concrete example, refer back to *Figure 2**.2* from [*Chapter 2*](B19630_02.xhtml#_idTextAnchor104),
    *Getting Started with Prophet*, and look at the Keeling Curve of carbon dioxide
    levels at Mauna Loa and imagine replacing one of the final values – say, in 2015
    – with the mean of the full dataset. This would result in an absurdly low value
    of about 360 in 2015, a value not seen in 20 years.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 为了举一个具体的例子，请参考*第2.2节*中的*图2.2*，即[*第2章*](B19630_02.xhtml#_idTextAnchor104)，“Prophet入门”，并查看莫纳罗亚山二氧化碳水平的Keeling曲线，想象用全数据集的均值替换其中一个最终值——比如说，2015年的值。这将导致2015年一个荒谬的低值，大约为360，这是20年来未见过的。
- en: 'Let’s look at how to apply Winsorization to our National Geographic data. The
    `stats` package has a Winsorization tool, so we’ll use that. Note that we are
    dropping all null values, as those are not handled by this function. We are setting
    the lower limit to `0`, so no values are affected at the lower bound, and the
    upper limit to `.05`, so the upper fifth percentile is affected:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何将Winsorization应用于我们的国家地理数据。`stats`包有一个Winsorization工具，所以我们将使用它。请注意，我们正在丢弃所有空值，因为这些值不适用于此函数。我们将下限设置为`0`，因此下限不受影响，并将上限设置为`.05`，因此影响的是第五个百分位数：
- en: '[PRE9]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The Winsorized National Geographic data appears thus, with affected data points
    marked with an **x**:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: Winsorized国家地理数据看起来是这样的，受影响的数据点用**x**标记：
- en: "![Figure 10.10 – Winsori\uFEFF\uFEFFzed data](img/Fig_10.10.jpg)"
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![图10.10 – Winsorized数据](img/Fig_10.10.jpg)'
- en: Figure 10.10 – Winsorized data
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.10 – Winsorized数据
- en: Standard deviation
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 标准差
- en: Since Winsorization limits are set with percentiles, there is no account taken
    of natural variance in the data – that is, some datasets are distributed very
    tightly around a mean value and some are very spread out. Setting a percentile
    limit would not take this into account. So, instead of using percentiles, sometimes
    using standard deviation makes more sense. This is very similar to Winsorization
    and can have identical effects if the limits are set carefully.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Winsorization 的限制是通过百分位数设置的，因此没有考虑到数据的自然方差——也就是说，一些数据集非常紧密地围绕平均值分布，而另一些则非常分散。设置百分位数限制不会考虑这一点。因此，有时使用标准差比使用百分位数更有意义。这与
    Winsorization 非常相似，如果设置限制得当，可以产生相同的效果。
- en: 'When we Winsorized in the previous section, we forced the outliers to take
    on the value at the upper limit. In this case, we will simply remove the outliers.
    We are using the `zscore` function in the SciPy `stats` package to eliminate those
    data points lying `1.65` standard deviations above the mean; in a normal distribution,
    this upper value would demarcate 95% of the data, the same limit we set previously:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中我们进行 Winsorization 时，迫使异常值采用上限的值。在这种情况下，我们将简单地移除异常值。我们正在使用 SciPy `stats`
    包中的 `zscore` 函数来消除那些比平均值高 `1.65` 个标准差的数据点；在正态分布中，这个上限值将划分 95% 的数据，这是我们之前设置的相同限制：
- en: '[PRE10]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'In this case, the two techniques have nearly identical results, except that
    here, we are trimming the data:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，这两种技术几乎具有相同的结果，只是在这里，我们正在修剪数据：
- en: '![Figure 10.11 – Data trimmed with standard deviation](img/Fig_10.11.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.11 – 使用标准差修剪的数据](img/Fig_10.11.jpg)'
- en: Figure 10.11 – Data trimmed with standard deviation
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.11 – 使用标准差修剪的数据
- en: This method is also a poor fit when data features a trend. Obviously, points
    lying later in a time series with an upward trend are more likely to be trimmed
    than those lying earlier. The next technique takes this into account.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 当数据具有趋势时，这种方法也是一个不良的拟合。显然，在具有上升趋势的时间序列中，位于后面的点比位于前面的点更有可能被修剪。下一项技术将考虑这一点。
- en: The moving average
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 移动平均
- en: We just looked at the number of standard deviations spread out away from the
    mean of the entire dataset and saw why it fails when there is a trend. In this
    method, we will use a moving average so that we’re essentially localizing our
    mean and standard deviation calculations, only applying them to data points that
    are temporally near each other.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚查看的是从整个数据集的平均值向外扩展的标准差数量，并看到了为什么在存在趋势时它失败的原因。在这个方法中，我们将使用移动平均，这样我们实际上是在本地化我们的平均值和标准差计算，只将这些计算应用于时间上彼此接近的数据点。
- en: In this example, we will trim both the upper and lower bounds of the data, again
    using the `1.65` value for standard deviation as before. The analyst also needs
    to decide upon a window size. This is the number of surrounding data points to
    collect together for calculation. Set it too small and a group of outliers together
    will not be removed. Set it too large and we approach the previous technique of
    ignoring the trend.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将再次使用标准差 `1.65` 的值来修剪数据的上下限。分析师还需要决定窗口大小。这是用于计算时收集的周围数据点的数量。设置得太小，一组异常值将不会被移除。设置得太大，我们将接近之前忽略趋势的技术。
- en: 'Let’s use `300` here. We will use pandas’ `rolling` method to find the mean
    and standard deviation using a rolling window. Then, we calculate the upper and
    lower bounds using these values and filter our DataFrame with those bounds:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里使用 `300`。我们将使用 pandas 的 `rolling` 方法来使用滚动窗口找到平均值和标准差。然后，我们使用这些值计算上下限，并使用这些界限过滤我们的
    DataFrame：
- en: '[PRE11]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We are now getting more refined outlier removal, as can be seen in the following
    graph:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们正在获得更精细的异常值移除，如下面的图表所示：
- en: '![Figure 10.12 – Data trimmed with the moving average](img/Fig_10.12.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.12 – 使用移动平均修剪的数据](img/Fig_10.12.jpg)'
- en: Figure 10.12 – Data trimmed with the moving average
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.12 – 使用移动平均修剪的数据
- en: The strong advantage of this method is that it takes into account the trend.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法的强大优势是它考虑到了趋势。
- en: Error standard deviation
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 错误标准差
- en: The final method we will consider is the most precise of all. Let’s go back
    to the question of defining an outlier – it is a value that you don’t expect.
    Intuitively, we knew this when we visually inspected the data and removed points.
    So, how do you tell the computer what to expect? You build a forecast, of course.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将考虑的最终方法是最精确的。让我们回到定义异常值的问题——它是一个你不期望的值。直观上，当我们通过视觉检查数据并移除点时，我们就知道了这一点。那么，你如何告诉计算机期望什么？当然，你构建一个预测。
- en: Prophet’s `forecast` DataFrame makes predictions in the `yhat` column, but it
    also includes columns for `yhat_upper` and `yhat_lower`. These uncertainty intervals
    are by default set to 80%, but you’ll learn in [*Chapter 11*](B19630_11.xhtml#_idTextAnchor728),
    *Managing Uncertainty Intervals*, how to modify them. If we accept any errors
    contained within the uncertainty intervals, we can declare an outlier to be anything
    that falls outside of these bounds, as it would be unexpected.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: Prophet 的 `forecast` DataFrame 在 `yhat` 列中进行预测，但它还包括 `yhat_upper` 和 `yhat_lower`
    列。这些不确定性区间默认设置为 80%，但您将在 [*第 11 章*](B19630_11.xhtml#_idTextAnchor728)，*管理不确定性区间*
    中学习如何修改它们。如果我们接受不确定性区间内包含的任何误差，我们可以将超出这些界限的任何异常值宣布为异常值，因为它是不预期的。
- en: In fact, the moving average is a crude forecasting technique; the previous method
    indeed removed outliers based upon deviation in the error term. By using Prophet
    to identify the error, we allow seasonality and other effects to be included in
    our expected results.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，移动平均是一种粗略的预测技术；前一种方法确实基于误差项的偏差来去除异常值。通过使用 Prophet 来识别误差，我们允许季节性和其他效应包含在我们的预期结果中。
- en: As the most precise method available, this is unfortunately also the most prone
    to overfitting. If you do wish to use this approach, be sure to tread carefully
    with new datasets and make sure you like the results before fully automating it.
    That said, let’s see how to code it.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 作为最精确的方法，这不幸也是最容易过度拟合的方法。如果您确实希望使用这种方法，请确保在使用新数据集时谨慎行事，并在完全自动化之前确保您喜欢结果。话虽如此，让我们看看如何编写代码。
- en: 'Our approach will be to first remove null values to avoid downstream issues
    when comparing our `forecast` DataFrame to our raw DataFrame:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的方法将是首先去除空值，以避免在将我们的 `forecast` DataFrame 与原始 DataFrame 进行比较时出现下游问题：
- en: '[PRE12]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Next, we build a Prophet model on this data, including strong regularization
    to be sure we don’t overfit. Note that there is no need to predict the future.
    We include the `interval_width` argument here to increase the uncertainty interval
    to better align with our previous examples; we’ll cover this parameter in the
    next chapter:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们在这些数据上构建一个 Prophet 模型，包括强大的正则化以确保我们不会过度拟合。请注意，没有必要预测未来。我们在这里包含 `interval_width`
    参数是为了增加不确定性区间，以便更好地与之前的示例对齐；我们将在下一章中介绍这个参数：
- en: '[PRE13]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Finally, we create a DataFrame that excludes those values where the `y` value
    was either greater than `yhat_upper` or lower than `yhat_lower`. These would be
    our outliers:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们创建一个 DataFrame，排除了那些 `y` 值大于 `yhat_upper` 或小于 `yhat_lower` 的值。这些将是我们的异常值：
- en: '[PRE14]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The final DataFrame would then be used to build a whole new Prophet model,
    without needing to worry about outliers. This is what our data looks like now:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 最终的 DataFrame 将用于构建一个新的 Prophet 模型，无需担心异常值。这就是我们现在的数据看起来像这样：
- en: '![Figure 10.13 – Data trimmed with an error from the forecast](img/Fig_10.13.jpg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.13 – 从预测中去除误差的数据](img/Fig_10.13.jpg)'
- en: Figure 10.13 – Data trimmed with an error from the forecast
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.13 – 从预测中去除误差的数据
- en: We have certainly removed what would plausibly be considered outliers. Had we
    used Prophet’s default uncertainty interval, then outlier removal may have been
    a bit too aggressive in this case. If you compare *Figure 10**.13* with the data
    plots of our other methods, this one appears to be the most surgical – for instance,
    by allowing high values that we would expect in the summer but removing those
    that are uncharacteristically high.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我们确实去除了可能被认为是异常值的部分。如果我们使用了 Prophet 的默认不确定性区间，那么在这种情况下异常值去除可能过于激进。如果您将 *图 10*.*13*
    与我们其他方法的图表进行比较，这个方法看起来最为精确 – 例如，它允许我们预期在夏季的高值，但去除那些不寻常的高值。
- en: Using this method makes the implicit assumption that the data is stationary
    and has a constant variance, which appears to be a poor assumption throughout
    the full National Geographic dataset but a fair assumption when considering only
    the data after 2016\. The full data becomes more spread out as time advances.
    This is why more data points were dropped at later dates than earlier dates –
    just one more thing to consider when using this method.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这种方法隐含地假设数据是平稳的并且具有恒定的方差，这在整个国家地理数据集中似乎是一个较差的假设，但在仅考虑 2016 年之后的数据时是一个合理的假设。随着时间的推移，完整的数据变得更加分散。这就是为什么在较晚的日期比早期日期删除了更多的数据点
    – 这是在使用此方法时需要考虑的又一件事。
- en: Throughout this chapter, we have removed outliers from our data. However, there
    is one technique you can use to keep those outliers around if you believe they
    provide some valuable signal in your model but you want to control the effect.
    This technique uses the holiday functionality in Prophet. Let’s see how to do
    it next.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们已经从我们的数据中移除了异常值。然而，如果你认为这些异常值在你的模型中提供了一些有价值的信号，但你想控制其影响，你可以使用一种技术来保留这些异常值。这个技术使用Prophet的节假日功能。让我们看看如何操作。
- en: Modeling outliers as special events
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将异常值建模为特殊事件
- en: There is one final way to work with outliers in Prophet; it’s a technique we
    used with James Rodríguez’s data in [*Chapter 8*](B19630_08.xhtml#_idTextAnchor537),
    *Influencing Trend Changepoints* – we can declare the outliers as a special event,
    essentially a holiday. By putting the outliers into the `holidays` DataFrame,
    we essentially instruct Prophet to apply trends and seasonality as if the data
    points were not outliers and capture the additional variation beyond trends and
    seasonality in the holiday term.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在Prophet中处理异常值还有最后一种方法；这是一种我们在[*第8章*](B19630_08.xhtml#_idTextAnchor537)中使用的技巧，*影响趋势变化点*
    – 我们可以将异常值声明为特殊事件，本质上是一个假期。通过将异常值放入`holidays` DataFrame中，我们实际上指示Prophet将趋势和季节性应用于数据点，就像它们不是异常值一样，并在节假日项中捕捉趋势和季节性之外的额外变化。
- en: This can be useful if you know that the extreme observations are due to some
    external factor that you do not expect to repeat. Such external factors could
    be the World Cup or a large marketing campaign but may also be mysterious and
    unknown. You can keep the data in your model but essentially disregard it. An
    added benefit is that you can simulate what would happen if the event repeated.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你知道极端观测值是由于一些你预料不到的外部因素造成的，这将是有用的。这些外部因素可能是世界杯或大型营销活动，但也可能是神秘和未知的。你可以在模型中保留这些数据，但基本上可以忽略它们。一个额外的优点是，你可以模拟如果事件重复会发生什么。
- en: We’ll again use the National Geographic data but, this time, label that August
    2016 series of outliers as a holiday. If those additional likes were due to a
    marketing campaign surrounding the release of their book, we can predict what
    would happen if they repeated a similar marketing campaign at a later date.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将再次使用国家地理数据，但这次，将2016年8月的异常值系列标记为假期。如果这些额外的点赞是由于围绕他们书籍发布的营销活动，我们可以预测如果他们在稍后的日期重复类似的营销活动会发生什么。
- en: We covered the creation of custom holidays in [*Chapter 6*](B19630_06.xhtml#_idTextAnchor375),
    *Forecasting Holiday Effects*, so this first step should be a review. We are simply
    creating two holidays for our August 2016 marketing event and an identical, hypothetical
    June 2020 marketing event.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[*第6章*](B19630_06.xhtml#_idTextAnchor375)中介绍了自定义假期的创建，*预测节假日效应*，因此这一步应该是一个复习。我们只是为2016年8月的营销活动创建两个假期，以及一个相同的、假设的2020年6月的营销活动。
- en: Note that both events have the same name, `'Promo event'`, so Prophet knows
    to apply the same effect to each. They’re both the same number of days long, although
    they needn’t be – the holiday effects for each day of the hypothetical event will
    match the effects for each day of the measured event.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，这两个事件具有相同的名称，`'Promo event'`，所以Prophet知道将相同的效果应用于每个。它们持续的天数相同，尽管不必如此 – 假设事件每一天的节假日效应将与测量事件每一天的效应相匹配。
- en: If the hypothetical event is shorter, the effects will simply cease early. If
    the hypothetical event is longer though, the effects will cease once the length
    of the measured event is reached.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 如果假设事件较短，效应将提前结束。如果假设事件较长，则效应将在测量事件的长度达到时结束。
- en: 'We begin by defining the promotions the same way we define holidays:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先以定义假期的相同方式定义促销活动：
- en: '[PRE15]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Next, we build our model using the same parameters as throughout this chapter,
    except sending the first `promo` DataFrame to the `holidays` argument:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们使用本章中相同的参数构建我们的模型，除了将第一个`promo` DataFrame发送到`holidays`参数：
- en: '[PRE16]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Our forecast perfectly models that spike of outliers, without either letting
    seasonality get out of control (the first problem we looked at in this chapter)
    or the future uncertainty explode (the second problem):'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的预测完美地模拟了异常值的峰值，既没有让季节性失控（我们在本章中首先考虑的问题）或未来不确定性爆炸（第二个问题）：
- en: '![Figure 10.14 – The NatGeo forecast with outliers modeled as special events](img/Fig_10.14.jpg)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![图10.14 – 将异常值建模为特殊事件的NatGeo预测](img/Fig_10.14.jpg)'
- en: Figure 10.14 – The NatGeo forecast with outliers modeled as special events
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.14 – 将异常值建模为特殊事件的NatGeo预测
- en: 'To conclude this example, let’s try one more model but, this time, include
    that hypothetical promotional event:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 为了结束这个例子，让我们再尝试一个模型，但这次包括那个假设的促销活动：
- en: '[PRE17]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'This is the future forecast National Geographic could expect if they duplicated
    the promotional activities in 2020:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 如果国家地理频道在2020年复制了这些促销活动，他们可以预期的未来预测如下：
- en: '![Figure 10.15 – The NatGeo forecast with a hypothetical promotional event](img/Fig_10.15.jpg)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![图10.15 – 假设促销活动下的NatGeo预测](img/Fig_10.15.jpg)'
- en: Figure 10.15 – The NatGeo forecast with a hypothetical promotional event
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.15 – 假设促销活动下的NatGeo预测
- en: With just one instance of the holiday to train with, Prophet has perfectly matched
    the holiday effects to the data, which is a good recipe for overfitting. If National
    Geographic had several similar marketing events, they could model all of them
    as the same holiday, which would average out the effects.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 仅用一个假期的实例进行训练，Prophet已经完美地将假期效应与数据匹配，这可能是过度拟合的好方法。如果国家地理频道有几次类似的营销活动，他们可以将所有这些活动都建模为同一个假期，这样就可以平均化效应。
- en: This technique of modeling outliers as special events can even be used to model
    dramatic shocks to an entire time series. In the next section, we’ll see how to
    apply these principles to model the effects of COVID-19 lockdowns on pedestrian
    activity.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 将异常值建模为特殊事件的技术甚至可以用来建模对整个时间序列的巨大冲击。在下一节中，我们将看到如何应用这些原则来建模COVID-19封锁对行人活动的影响。
- en: Modeling shocks such as COVID-19 lockdowns
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 建模如COVID-19封锁这样的冲击
- en: In mid-2020, forecasters the world over were at a loss for what to predict in
    the coming months and years. The COVID-19 pandemic utterly transformed life around
    the world and, with it, many time series. Online purchases skyrocketed beyond
    anything anyone had predicted at the beginning of 2020; consumption of media such
    as Netflix and YouTube dramatically increased, while in-person event attendance
    dramatically decreased.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 到2020年中旬，世界各地的预测者对于未来几个月和几年的预测都感到迷茫。COVID-19大流行彻底改变了全球的生活，以及许多时间序列。在线购物在2020年初的预测之外急剧飙升；Netflix和YouTube等媒体的消费量急剧增加，而现场活动的人数急剧减少。
- en: As brilliant as Prophet can be when it comes to forecasting, it cannot simply
    predict the future. In the midst of the pandemic, Prophet would have struggled
    just as much as the forecasting experts at predicting when the pandemic would
    end and how time series would behave both during and after the lockdowns. However,
    we can model such shocks to the system after the fact in order to understand what
    effect they had. And just like the NatGeo promotion we modeled in the previous
    section, we can predict what would result from a hypothetical repeat of such a
    shock. In this section, we’ll use a new dataset, the number of pedestrians in
    the Bourke Street Mall in Melbourne, Australia.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然Prophet在预测方面非常出色，但它并不能简单地预测未来。在疫情期间，Prophet在预测疫情何时结束以及时间序列在封锁期间和封锁之后如何表现方面，会与预测专家一样感到困难。然而，我们可以在事后对系统中的这种冲击进行建模，以了解它们的影响。就像我们在上一节中建模的NatGeo促销活动一样，我们可以预测假设这种冲击重复发生的结果。在本节中，我们将使用一个新的数据集，即澳大利亚墨尔本Bourke
    Street Mall的行人数量。
- en: Since 2009, the city of Melbourne has counted pedestrians at several locations
    throughout the city through automated sensors. The data is shared on the city’s
    website, updated each month, and contains the hourly counts of pedestrians at
    each sensor. To make our analysis easier, the data we will use in this example
    has been pre-aggregated to daily counts, and we’ll only use the data from one
    sensor – the southern-most Bourke Street Mall sensor.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 自2009年以来，墨尔本市通过自动化传感器在全市多个地点统计行人数量。数据在城市的网站上共享，每月更新，包含每个传感器的每小时行人计数。为了使我们的分析更简单，本例中我们将使用的数据已经预先汇总为每日计数，我们只使用一个传感器的数据——最南端的Bourke
    Street Mall传感器。
- en: 'Bourke Street is one of Melbourne’s main streets, traditionally the entertainment
    hub of the city. It is a popular tourist destination and features many restaurants
    and major retail outlets. As the pandemic lockdowns most strongly affected tourism,
    restaurants, and in-person retail, this location seems like a prime spot to observe
    the effects of lockdown. Further, the government of the state of Victoria declared
    four official lockdown periods of varying lengths. We might expect these to mark
    clear and abrupt changes in behavior. Let’s load the dataset and take a look at
    it:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The data shows a moderately flat trend with obvious seasonal effects and, of
    course, a severe anomaly continuing onward from the beginning of 2020:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 10.16 – A daily count of pedestrians \uFEFFin the Bourke Street Mall](img/Fig_10.16.jpg)"
  id: totrans-148
  prefs: []
  type: TYPE_IMG
- en: Figure 10.16 – A daily count of pedestrians in the Bourke Street Mall
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: 'The dataset contains several columns that aren’t of interest to us for this
    analysis, so before we can see how Prophet will handle a forecast, we need to
    extract only the `Date` and `Daily_Counts` columns and rename them in Prophet’s
    format:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Now, let’s build a basic forecast, looking ahead a full year:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The forecast seems to be making an admirable effort to fit the trend around
    the COVID shock:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.17 – A forecast with no special consideration of shock](img/Fig_10.17.jpg)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
- en: Figure 10.17 – A forecast with no special consideration of shock
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: This model provides us no insight into what effect we can attribute to the lockdowns
    specifically. In order to model this lockdown shock, we will create holidays to
    represent days in lockdown and treat the shock similarly to how we treated NatGeo’s
    promotion in the previous section. To do this, we first need to define our lockdown
    holidays (a bit of an ironic oxymoron!).
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: 'In [*Chapter 6*](B19630_06.xhtml#_idTextAnchor375), *Forecasting Holiday Effects*,
    you learned how to create multi-day holidays using `lower_window` and `upper_window`.
    We’ll do that again here, defining each of the four official lockdowns with a
    start date and using `upper_window` to set the length of the lockdown:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'We don’t specify any future dates, so Prophet will not attempt to repeat these
    lockdowns at any point in the future. When we create our next model, we pass this
    `lockdown` DataFrame to the `holidays` argument:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Our resulting forecast looks very similar to the one in *Figure 10**.17*:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.18 – A forecast with the lockdown modeled as holidays](img/Fig_10.18.jpg)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
- en: Figure 10.18 – A forecast with the lockdown modeled as holidays
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, however, when we look at the `components` plot, we’ll see the specific
    effect of those lockdowns:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: We see a roughly 100% reduction in pedestrian numbers in the `holidays` plot!
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.19 – The components plot showing the effect of COVID-19 lockdowns](img/Fig_10.19.jpg)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
- en: Figure 10.19 – The components plot showing the effect of COVID-19 lockdowns
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: The plot of holidays in *Figure 10**.19* demonstrates how effectively the lockdowns
    brought pedestrian traffic nearly to a standstill. Another, possibly even longer-lasting,
    effect of the lockdowns has been the transition to remote work. Many workers throughout
    the world have been able to perform their job duties from home, and are no longer
    as strictly chained to the Monday–Friday, 9:00–5:00 schedule. We can hypothesize
    that this might change the weekly seasonality to some degree. The weekly peak
    shown in *Figure 10**.19* indicates that Friday is the most popular day on Bourke
    Street, followed by Saturday. Does this pattern remain true post-COVID-19?
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10.19*中节假日的分布图展示了封锁如何有效地使行人交通几乎停滞。封锁的另一个可能甚至更持久的影响是远程工作的转变。全世界的许多工人现在能够在家中履行工作职责，不再像以前那样严格地遵循周一至周五，9:00至17:00的日程安排。我们可以假设这可能会在一定程度上改变每周的季节性。*图10.19*中显示的每周高峰表明周五是Bourke
    Street上最受欢迎的一天，其次是周六。这种模式在COVID-19之后是否仍然成立？'
- en: 'You learned how to create conditional seasonalities in [*Chapter 5*](B19630_05.xhtml#_idTextAnchor254),
    *Working with Seasonality*; let’s use that same principle now to create a pre-COVID-19
    weekly seasonality and a post-COVID-19 weekly seasonality. We will define a `pre_covid`
    seasonality for all dates before the first lockdown began and a `post_covid` seasonality
    for all dates after the final lockdown ended. We could also create a `during_covid`
    seasonality for those dates in between, but as pedestrian traffic ground to a
    halt with no data available, any insights gained from such a seasonality would
    be meaningless at best and potentially even misleading:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 你在[*第五章*](B19630_05.xhtml#_idTextAnchor254)“处理季节性”中学习了如何创建条件季节性；现在让我们用同样的原则来创建COVID-19之前的每周季节性和COVID-19之后的每周季节性。我们将为第一个封锁开始之前的所有日期定义一个`pre_covid`季节性，为最终封锁结束之后的所有日期定义一个`post_covid`季节性。我们还可以为两者之间的日期创建一个`during_covid`季节性，但由于行人流量几乎停滞且没有数据可用，从这种季节性中获得的任何见解至多是无意义的，甚至可能具有误导性：
- en: '[PRE24]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: We’ll now make a third forecast of this data, but this time, we will turn off
    the default weekly seasonality and add our two conditional weekly seasonalities.
    Remember that we must add these conditions to the `future` DataFrame as well!
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将对此数据进行第三次预测，但这次我们将关闭默认的每周季节性，并添加我们的两个条件每周季节性。记住，我们必须将这些条件添加到`future`数据框中！
- en: '[PRE25]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Running this code will produce the following plot:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 运行此代码将生成以下图表：
- en: '![Figure 10.20 – A forecast with conditional weekly seasonalities](img/Fig_10.20.jpg)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![图10.20 – 带有条件每周季节性的预测](img/Fig_10.20.jpg)'
- en: Figure 10.20 – A forecast with conditional weekly seasonalities
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.20 – 带有条件每周季节性的预测
- en: 'Finally, let’s take a look at the `components` plot to see what lasting effect
    the lockdowns produced:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们看一下`components`图，看看封锁产生了哪些持久影响：
- en: '[PRE26]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The trend, holidays, and yearly seasonality look much the same as in *Figure
    10**.19*, so they have been cropped out of the following plot, which only shows
    the two weekly seasonalities for pre- and post-COVID-19 lockdowns:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 趋势、节假日和年度季节性与*图10.19*中的几乎相同，因此它们已被裁剪出以下图表，该图表仅显示COVID-19之前和之后的封锁的两种每周季节性：
- en: '![Figure 10.21 – A cropped components plot showing the conditional seasonalities](img/Fig_10.21.jpg)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
  zh: '![图10.21 – 一个显示条件季节性的裁剪成分图](img/Fig_10.21.jpg)'
- en: Figure 10.21 – A cropped components plot showing the conditional seasonalities
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.21 – 一个显示条件季节性的裁剪成分图
- en: As we noted in *Figure 10**.19*, Friday was the most popular day on Bourke Street
    pre-COVID-19\. However, post-COVID-19, it appears that Saturday is the most popular
    day. With more people working from home, it seems that there might be fewer post-work
    happy hours on Friday, and instead, people are staying in! Perhaps Netflix is
    seeing a reverse pattern in its consumption data…
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在*图10.19*中提到的，COVID-19之前周五是Bourke Street上最受欢迎的一天。然而，COVID-19之后，似乎周六是最受欢迎的一天。随着越来越多的人在家工作，周五可能的工作后欢乐时光似乎减少了，取而代之的是人们选择待在家里！也许Netflix在其消费数据中看到了相反的模式……
- en: Summary
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Outliers are a fact of any data analysis, but they do not always have to cause
    headaches. Prophet is very robust at handling most outliers without any special
    consideration, but sometimes problems can arise. In this chapter, you learned
    about the two problems most common with outliers in Prophet – uncontrolled seasonality
    and exploding uncertainty intervals.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 异常值是任何数据分析的事实，但它们并不总是需要引起头痛。Prophet 在处理大多数异常值时非常稳健，无需任何特殊考虑，但有时可能会出现问题。在本章中，你学习了Prophet中与异常值最常见的问题——不受控制的季节性和爆炸性的不确定性区间。
- en: In both cases, simply removing the data is the best approach to solving the
    problem. As long as data exists in other periods of the seasonality cycles for
    those gaps where data was removed, Prophet has no problem finding a good fit.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 在这两种情况下，简单地删除数据是解决问题的最佳方法。只要在那些删除数据的位置，季节性周期中的其他时期存在数据，Prophet 就没有问题找到良好的拟合。
- en: You also learned several automated outlier detection techniques, from the basic
    techniques of Winsorization and trimming, which tend not to work well on time
    series exhibiting a trend, to the more advanced technique of stacking forecasts
    and using errors in the first model to remove outliers for the second model.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 你还学习了多种自动异常值检测技术，从基本的Winsorization和trimming技术，这些技术通常对表现出趋势的时间序列效果不佳，到更高级的堆叠预测技术，使用第一个模型中的误差来为第二个模型移除异常值。
- en: Finally, you learned how to model both outliers and significant, lasting shocks
    such as COVID-19 lockdowns as special events, which has much the same effect as
    removing the data while retaining the information from that outlier. This technique
    has the advantage of allowing you to simulate a similar shock occurring in the
    future with your time series.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你学习了如何将异常值和重大的、持久的冲击，如COVID-19封锁，作为特殊事件进行建模，这具有与删除数据同时保留该异常值信息相同的效果。这种技术的好处是允许你模拟未来时间序列中发生的类似冲击。
- en: In the next chapter, we’ll look at a concept related to outliers – uncertainty
    intervals.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨与异常值相关的一个概念——不确定性区间。
