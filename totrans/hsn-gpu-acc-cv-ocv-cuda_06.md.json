["```py\n#include <iostream>\n#include \"opencv2/opencv.hpp\"\nint main ()\n{\n  //Gray Scale Image\n  cv::Mat h_img1 = cv::imread(\"images/cameraman.tif\",0);\n  cv::Scalar intensity = h_img1.at<uchar>(cv::Point(100, 50));\n  std::cout<<\"Pixel Intensity of gray scale Image at (100,50) is:\"  <<intensity.val[0]<<std::endl;\n  //Color Image\n  cv::Mat h_img2 = cv::imread(\"images/autumn.tif\",1);\n  cv::Vec3b intensity1 = h_img1.at<cv::Vec3b>(cv::Point(100, 50));\n  std::cout<<\"Pixel Intensity of color Image at (100,50) is:\"<<intensity1<<std::endl;\n  return 0;\n}\n```", "```py\nh_img1.at<uchar>(100, 50) = 128;\n```", "```py\nvoid cv::cuda::calcHist ( InputArray src, OutputArray hist)\n```", "```py\n#include <iostream>\n#include \"opencv2/opencv.hpp\"\nint main ()\n{\n  cv::Mat h_img1 = cv::imread(\"images/cameraman.tif\",0);\n  cv::cuda::GpuMat d_img1,d_result1;\n  d_img1.upload(h_img1);\n  cv::cuda::equalizeHist(d_img1, d_result1);\n  cv::Mat h_result1;\n  d_result1.download(h_result1);\n  cv::imshow(\"Original Image \", h_img1);\n  cv::imshow(\"Histogram Equalized Image\", h_result1);\n  cv::waitKey();\n  return 0;\n}\n```", "```py\n#include <iostream>\n#include \"opencv2/opencv.hpp\"\nint main ()\n{\n  cv::Mat h_img1 = cv::imread(\"images/autumn.tif\");\n  cv::Mat h_img2,h_result1;\n  cvtColor(h_img1, h_img2, cv::COLOR_BGR2HSV);\n  //Split the image into 3 channels; H, S and V channels respectively and store it in a std::vector\n  std::vector< cv::Mat > vec_channels;\n  cv::split(h_img2, vec_channels); \n  //Equalize the histogram of only the V channel \n  cv::equalizeHist(vec_channels[2], vec_channels[2]);\n  //Merge 3 channels in the vector to form the color image in HSV color space.\n  cv::merge(vec_channels, h_img2); \n  //Convert the histogram equalized image from HSV to BGR color space again\n  cv::cvtColor(h_img2,h_result1, cv::COLOR_HSV2BGR);\n  cv::imshow(\"Original Image \", h_img1);\n  cv::imshow(\"Histogram Equalized Image\", h_result1);\n  cv::waitKey();\n  return 0;\n}\n```", "```py\n#include <iostream>\n#include \"opencv2/opencv.hpp\"\nint main ()\n{\n  cv::Mat h_img1 = cv::imread(\"images/cameraman.tif\",0);\n  cv::cuda::GpuMat d_img1,d_result1,d_result2;\n  d_img1.upload(h_img1);\n  int width= d_img1.cols;\n  int height = d_img1.size().height;\n  cv::cuda::resize(d_img1,d_result1,cv::Size(200, 200),   cv::INTER_CUBIC);\n  cv::cuda::resize(d_img1,d_result2,cv::Size(0.5*width, 0.5*height),   cv::INTER_LINEAR); \n  cv::Mat h_result1,h_result2;\n  d_result1.download(h_result1);\n  d_result2.download(h_result2);\n  cv::imshow(\"Original Image \", h_img1);\n  cv::imshow(\"Resized Image\", h_result1);\n  cv::imshow(\"Resized Image 2\", h_result2);\n  cv::waitKey();\n  return 0;\n}\n```", "```py\n#include <iostream>\n#include \"opencv2/opencv.hpp\"\n\nint main ()\n{\n  cv::Mat h_img1 = cv::imread(\"images/cameraman.tif\",0);\n  cv::cuda::GpuMat d_img1,d_result1,d_result2;\n  d_img1.upload(h_img1);\n  int cols= d_img1.cols;\n  int rows = d_img1.size().height;\n  //Translation\n  cv::Mat trans_mat = (cv::Mat_<double>(2,3) << 1, 0, 70, 0, 1, 50);\n  cv::cuda::warpAffine(d_img1,d_result1,trans_mat,d_img1.size());\n  //Rotation\n  cv::Point2f pt(d_img1.cols/2., d_img1.rows/2.); \n  cv::Mat rot_mat = cv::getRotationMatrix2D(pt, 45, 1.0);\n  cv::cuda::warpAffine(d_img1, d_result2, rot_mat, cv::Size(d_img1.cols, d_img1.rows));\n  cv::Mat h_result1,h_result2;\n  d_result1.download(h_result1);\n  d_result2.download(h_result2);\n  cv::imshow(\"Original Image \", h_img1);\n  cv::imshow(\"Translated Image\", h_result1);\n  cv::imshow(\"Rotated Image\", h_result2);\n  cv::waitKey();\n  return 0;\n}\n```", "```py\n#include <iostream>\n#include \"opencv2/opencv.hpp\"\nint main ()\n{\n  cv::Mat h_img1 = cv::imread(\"images/cameraman.tif\",0);\n  cv::cuda::GpuMat d_img1,d_result3x3,d_result5x5,d_result7x7;\n  d_img1.upload(h_img1);\n  cv::Ptr<cv::cuda::Filter> filter3x3,filter5x5,filter7x7;\n  filter3x3 = cv::cuda::createBoxFilter(CV_8UC1,CV_8UC1,cv::Size(3,3));\n  filter3x3->apply(d_img1, d_result3x3);\n  filter5x5 = cv::cuda::createBoxFilter(CV_8UC1,CV_8UC1,cv::Size(5,5));\n  filter5x5->apply(d_img1, d_result5x5);\n  filter7x7 = cv::cuda::createBoxFilter(CV_8UC1,CV_8UC1,cv::Size(7,7));\n  filter7x7->apply(d_img1, d_result7x7);\n\n  cv::Mat h_result3x3,h_result5x5,h_result7x7;\n  d_result3x3.download(h_result3x3);\n  d_result5x5.download(h_result5x5);\n  d_result7x7.download(h_result7x7);\n  cv::imshow(\"Original Image \", h_img1);\n  cv::imshow(\"Blurred with kernel size 3x3\", h_result3x3);\n  cv::imshow(\"Blurred with kernel size 5x5\", h_result5x5);\n  cv::imshow(\"Blurred with kernel size 7x7\", h_result7x7);\n  cv::waitKey();\n  return 0;\n}\n```", "```py\n#include <iostream>\n#include \"opencv2/opencv.hpp\"\n\nint main ()\n{\n  cv::Mat h_img1 = cv::imread(\"images/cameraman.tif\",0);\n  cv::cuda::GpuMat d_img1,d_result3x3,d_result5x5,d_result7x7;\n  d_img1.upload(h_img1);\n  cv::Ptr<cv::cuda::Filter> filter3x3,filter5x5,filter7x7;\n  filter3x3 = cv::cuda::createGaussianFilter(CV_8UC1,CV_8UC1,cv::Size(3,3),1);\n  filter3x3->apply(d_img1, d_result3x3);\n  filter5x5 = cv::cuda::createGaussianFilter(CV_8UC1,CV_8UC1,cv::Size(5,5),1);\n  filter5x5->apply(d_img1, d_result5x5);\n  filter7x7 = cv::cuda::createGaussianFilter(CV_8UC1,CV_8UC1,cv::Size(7,7),1);\n  filter7x7->apply(d_img1, d_result7x7);\n\n  cv::Mat h_result3x3,h_result5x5,h_result7x7;\n  d_result3x3.download(h_result3x3);\n  d_result5x5.download(h_result5x5);\n  d_result7x7.download(h_result7x7);\n  cv::imshow(\"Original Image \", h_img1);\n  cv::imshow(\"Blurred with kernel size 3x3\", h_result3x3);\n  cv::imshow(\"Blurred with kernel size 5x5\", h_result5x5);\n  cv::imshow(\"Blurred with kernel size 7x7\", h_result7x7);\n  cv::waitKey();\n  return 0;\n}\n```", "```py\n#include <iostream>\n#include \"opencv2/opencv.hpp\"\n\nint main ()\n{\n  cv::Mat h_img1 = cv::imread(\"images/saltpepper.png\",0);\n  cv::Mat h_result;\n  cv::medianBlur(h_img1,h_result,3);\n  cv::imshow(\"Original Image \", h_img1);\n  cv::imshow(\"Median Blur Result\", h_result);\n  cv::waitKey();\n  return 0;\n}\n```", "```py\n#include <iostream>\n#include \"opencv2/opencv.hpp\"\n\nint main ()\n{\n  cv::Mat h_img1 = cv::imread(\"images/blobs.png\",0);\n  cv::cuda::GpuMat d_img1,d_resultx,d_resulty,d_resultxy;\n  d_img1.upload(h_img1);\n  cv::Ptr<cv::cuda::Filter> filterx,filtery,filterxy;\n  filterx = cv::cuda::createSobelFilter(CV_8UC1,CV_8UC1,1,0);\n  filterx->apply(d_img1, d_resultx);\n  filtery = cv::cuda::createSobelFilter(CV_8UC1,CV_8UC1,0,1);\n  filtery->apply(d_img1, d_resulty);\n  cv::cuda::add(d_resultx,d_resulty,d_resultxy); \n  cv::Mat h_resultx,h_resulty,h_resultxy;\n  d_resultx.download(h_resultx);\n  d_resulty.download(h_resulty);\n  d_resultxy.download(h_resultxy);\n  cv::imshow(\"Original Image \", h_img1);\n  cv::imshow(\"Sobel-x derivative\", h_resultx);\n  cv::imshow(\"Sobel-y derivative\", h_resulty);\n  cv::imshow(\"Sobel-xy derivative\", h_resultxy);\n  cv::waitKey();\n  return 0;\n}\n```", "```py\n#include <iostream>\n#include \"opencv2/opencv.hpp\"\nint main ()\n{\n  cv::Mat h_img1 = cv::imread(\"images/blobs.png\",0);\n  cv::cuda::GpuMat d_img1,d_resultx,d_resulty,d_resultxy;\n  d_img1.upload(h_img1);\n  cv::Ptr<cv::cuda::Filter> filterx,filtery;\n  filterx = cv::cuda::createScharrFilter(CV_8UC1,CV_8UC1,1,0);\n  filterx->apply(d_img1, d_resultx);\n  filtery = cv::cuda::createScharrFilter(CV_8UC1,CV_8UC1,0,1);\n  filtery->apply(d_img1, d_resulty);\n  cv::cuda::add(d_resultx,d_resulty,d_resultxy); \n  cv::Mat h_resultx,h_resulty,h_resultxy;\n  d_resultx.download(h_resultx);\n  d_resulty.download(h_resulty);\n  d_resultxy.download(h_resultxy);\n  cv::imshow(\"Original Image \", h_img1);\n  cv::imshow(\"Scharr-x derivative\", h_resultx);\n  cv::imshow(\"Scharr-y derivative\", h_resulty);\n  cv::imshow(\"Scharr-xy derivative\", h_resultxy);\n  cv::waitKey();\n    return 0;\n}\n```", "```py\n#include <iostream>\n#include \"opencv2/opencv.hpp\"\n\nint main ()\n{\n  cv::Mat h_img1 = cv::imread(\"images/blobs.png\",0);\n  cv::cuda::GpuMat d_img1,d_result1,d_result3;\n  d_img1.upload(h_img1);\n  cv::Ptr<cv::cuda::Filter> filter1,filter3;\n  filter1 = cv::cuda::createLaplacianFilter(CV_8UC1,CV_8UC1,1);\n  filter1->apply(d_img1, d_result1);\n  filter3 = cv::cuda::createLaplacianFilter(CV_8UC1,CV_8UC1,3);\n  filter3->apply(d_img1, d_result3);\n  cv::Mat h_result1,h_result3;\n  d_result1.download(h_result1);\n  d_result3.download(h_result3);\n  cv::imshow(\"Original Image \", h_img1);\n  cv::imshow(\"Laplacian filter 1\", h_result1);\n  cv::imshow(\"Laplacian filter 3\", h_result3);\n  cv::waitKey();\n  return 0;\n}\n```", "```py\n#include <iostream>\n#include \"opencv2/opencv.hpp\"\nint main ()\n{\n  cv::Mat h_img1 = cv::imread(\"images/blobs.png\",0);\n  cv::cuda::GpuMat d_img1,d_resulte,d_resultd,d_resulto, d_resultc;\n  cv::Mat element = cv::getStructuringElement(cv::MORPH_RECT,cv::Size(5,5)); \n  d_img1.upload(h_img1);\n  cv::Ptr<cv::cuda::Filter> filtere,filterd,filtero,filterc;\n  filtere = cv::cuda::createMorphologyFilter(cv::MORPH_ERODE,CV_8UC1,element);\n  filtere->apply(d_img1, d_resulte);\n  filterd = cv::cuda::createMorphologyFilter(cv::MORPH_DILATE,CV_8UC1,element);\n  filterd->apply(d_img1, d_resultd);\n  filtero = cv::cuda::createMorphologyFilter(cv::MORPH_OPEN,CV_8UC1,element);\n  filtero->apply(d_img1, d_resulto);\n  filterc = cv::cuda::createMorphologyFilter(cv::MORPH_CLOSE,CV_8UC1,element);\n  filterc->apply(d_img1, d_resultc);\n\n  cv::Mat h_resulte,h_resultd,h_resulto,h_resultc;\n  d_resulte.download(h_resulte);\n  d_resultd.download(h_resultd);\n  d_resulto.download(h_resulto);\n  d_resultc.download(h_resultc);\n  cv::imshow(\"Original Image \", h_img1);\n  cv::imshow(\"Erosion\", h_resulte);\n  cv::imshow(\"Dilation\", h_resultd);\n  cv::imshow(\"Opening\", h_resulto);\n  cv::imshow(\"closing\", h_resultc);\n  cv::waitKey();\n  return 0;\n}\n```"]