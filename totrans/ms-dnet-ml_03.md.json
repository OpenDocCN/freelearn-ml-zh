["```py\n#r \"../packages/Accord.3.0.2/lib/net40/Accord.dll\"\n#r \"../packages/Accord.Statistics.3.0.2/lib/net40/Accord.Statistics.dll\"\n#r \"../packages/Accord.Math.3.0.2/lib/net40/Accord.Math.dll\"\n\nopen Accord\nopen Accord.Statistics.Models.Regression.Linear\n```", "```py\nlet xs = [| [|15.0;130.0|];[|18.0;127.0|];[|15.0;128.0|];[|17.0;120.0|];[|16.0;115.0|] |]\n```", "```py\nval xs : float [] [] =\n [|[|15.0; 130.0|]; [|18.0; 127.0|]; [|15.0; 128.0|]; [|17.0; 120.0|]; [|16.0; 115.0|]|]\n\n```", "```py\nlet y = [|3.6;3.5;3.8;3.4;2.6|]\n```", "```py\nval y : float [] = [|3.6; 3.5; 3.8; 3.4; 2.6|]\n\n```", "```py\nlet regression = MultipleLinearRegression(2, true)\nlet error = regression.Regress(xs, y)\n\nlet a = regression.Coefficients.[0]\nlet b = regression.Coefficients.[1]\nlet c = regression.Coefficients.[2]\n```", "```py\nval regression : MultipleLinearRegression =\n\n y(x0, x1) = 0.0221298495645295*x0 + 0.0663103721298495*x1 + -5.20098970704672\nval error : float = 0.1734125099\nval a : float = 0.02212984956\nval b : float = 0.06631037213\nval c : float = -5.200989707\n\n```", "```py\nlet sse = regression.Regress(xs, y)\nlet mse = sse/float xs.Length \nlet rmse = sqrt(mse)\nlet r2 = regression.CoefficientOfDetermination(xs,y)\n```", "```py\nval sse : float = 0.1734125099\nval mse : float = 0.03468250198\nval rmse : float = 0.186232387\nval r2 : float = 0.7955041157\n\n```", "```py\nlet xs' = [| [|15.0;130.0;3.6|];[|18.0;127.0;3.5|];\n            [|15.0;128.0;3.7|];[|17.0;120.0;3.5|];\n            [|17.0;120.0;2.5|] |]\n\nlet regression' = MultipleLinearRegression(3,true)\nlet error' = regression'.Regress(xs',y)\n\nlet a' = regression'.Coefficients.[0]\nlet b' = regression'.Coefficients.[1]\nlet c' = regression'.Coefficients.[2]\nlet d' = regression'.Coefficients.[3]\n\nlet mse' = error'/float xs'.Length \nlet rmse' = sqrt(mse')\nlet r2' = regression'.CoefficientOfDetermination(xs',y)\n```", "```py\nval xs' : float [] [] =\n [|[|15.0; 130.0; 3.6|]; [|18.0; 127.0; 3.5|]; [|15.0; 128.0; 3.7|];\n [|17.0; 120.0; 3.5|]; [|17.0; 120.0; 2.5|]|]\nval regression' : MultipleLinearRegression =\n y(x0, x1, x2) = -0.0202088664499619*x0 + 0.0116951379763468*x1 + 0.834082578324918*x2 + -0.552984300435694\nval error' : float = 0.01071166747\nval a' : float = -0.02020886645\nval b' : float = 0.01169513798\nval c' : float = 0.8340825783\nval d' : float = -0.5529843004\nval mse' : float = 0.002142333495\nval rmse' : float = 0.0462853486\nval r2' : float = 0.9873683167\n\n```", "```py\n#r \"System.Transactions.dll\"\n#r \"../packages/Accord.3.0.2/lib/net40/Accord.dll\"\n#r \"../packages/Accord.Statistics.3.0.2/lib/net40/Accord.Statistics.dll\"\n#r \"../packages/Accord.Math.3.0.2/lib/net40/Accord.Math.dll\"\n\nopen Accord\nopen Accord.Statistics\nopen Accord.Statistics.Models.Regression.Linear\n\nopen System\nopen System.Data.SqlClient\n\ntype ProductInfo = {ProductID:int; AvgOrders:float; AvgReviews: float; ListPrice: float}\n\nlet productInfos =  ResizeArray<ProductInfo>()\n\n[<Literal>]\nlet connectionString = \"data source=nc54a9m5kk.database.windows.net;initial catalog=AdventureWorks2014;user id=chickenskills@nc54a9m5kk;password=sk1lzm@tter;\"\n\n[<Literal>]\nlet query = \"Select \n            A.ProductID, AvgOrders, AvgReviews, ListPrice\n            From\n            (Select \n            ProductID,\n            (Sum(OrderQty) + 0.0)/(Count(Distinct SOH.CustomerID) + 0.0) as AvgOrders\n            from [Sales].[SalesOrderDetail] as SOD\n            inner join [Sales].[SalesOrderHeader] as SOH\n            on SOD.SalesOrderID = SOH.SalesOrderID\n            inner join [Sales].[Customer] as C\n            on SOH.CustomerID = C.CustomerID\n            Where C.StoreID is not null\n            Group By ProductID) as A\n            Inner Join \n            (Select\n            ProductID,\n            (Sum(Rating) + 0.0) / (Count(ProductID) + 0.0) as AvgReviews\n            from [Production].[ProductReview] as PR\n            Group By ProductID) as B\n            on A.ProductID = B.ProductID\n            Inner Join\n            (Select\n            ProductID,\n            ListPrice\n            from [Production].[Product]\n            ) as C\n            On A.ProductID = C.ProductID\"\n\nlet connection = new SqlConnection(connectionString)\nlet command = new SqlCommand(query,connection)\nconnection.Open()\nlet reader = command.ExecuteReader()\nwhile reader.Read() do\n    productInfos.Add({ProductID=reader.GetInt32(0);\n                        AvgOrders=(float)(reader.GetDecimal(1));\n                        AvgReviews=(float)(reader.GetDecimal(2));\n                        ListPrice=(float)(reader.GetDecimal(3));})\n```", "```py\ntype ProductInfo =\n {ProductID: int;\n AvgOrders: float;\n AvgReviews: float;\n ListPrice: float;}\nval productInfos : Collections.Generic.List<ProductInfo>\nval connectionString : string =\n \"data source=nc54a9m5kk.database.windows.net;initial catalog=A\"+[72 chars]\nval query : string =\n \"Select \n A.ProductID, AvgOrders, AvgReviews, ListP\"+[937 chars]\nval connection : SqlConnection = System.Data.SqlClient.SqlConnection\nval command : SqlCommand = System.Data.SqlClient.SqlCommand\nval reader : SqlDataReader\nval it : unit = ()\n\n```", "```py\nlet xs = \n    productInfos \n    |> Seq.map (fun pi -> [|pi.AvgReviews; pi.ListPrice|]) \n    |> Seq.toArray\nlet y = \n    productInfos \n    |> Seq.map (fun pi -> pi.AvgOrders) \n    |> Seq.toArray\nlet regression = MultipleLinearRegression(2, true)\nlet error = regression.Regress(xs, y)\n\nlet a = regression.Coefficients.[0]\nlet b = regression.Coefficients.[1]\nlet c = regression.Coefficients.[2]\n\nlet mse = error/float xs.Length \nlet rmse = sqrt mse\nlet r2 = regression.CoefficientOfDetermination(xs, y)\n```", "```py\nval regression : MultipleLinearRegression =\n y(x0, x1) = 9.68314848116308*x0 + -0.000913619922709572*x1 + -26.1836956342657\nval error : float = 682.6439378\nval a : float = 9.683148481\nval b : float = -0.0009136199227\nval c : float = -26.18369563\nval mse : float = 7.037566369\nval rmse : float = 2.652841188\nval r2 : float = 0.3532529168\n\n```", "```py\ntype ProductInfo = {ProductID:int; AvgOrders:float; AvgReviews: float; ListPrice: float}\n```", "```py\nlet productInfos = ResizeArray<ProductInfo>()\n```", "```py\n[<Literal>]\nlet query = \"Select \n            A.ProductID, AvgOrders, AvgReviews, ListPrice\n            From\n            (Select \n            ProductID,\n            (Sum(OrderQty) + 0.0)/(Count(Distinct SOH.CustomerID) + 0.0) as AvgOrders,\n            Sum(OrderQty) as TotalOrders\n            from [Sales].[SalesOrderDetail] as SOD\n            inner join [Sales].[SalesOrderHeader] as SOH\n            on SOD.SalesOrderID = SOH.SalesOrderID\n            inner join [Sales].[Customer] as C\n            on SOH.CustomerID = C.CustomerID\n            Where C.StoreID is not null\n            Group By ProductID) as A\n            Inner Join \n            (Select\n            ProductID,\n            (Sum(Rating) + 0.0) / (Count(ProductID) + 0.0) as AvgReviews\n            from [Production].[ProductReview] as PR\n            Group By ProductID) as B\n            on A.ProductID = B.ProductID\n            Inner Join\n            (Select\n            ProductID,\n            ListPrice\n            from [Production].[Product]\n            ) as C\n            On A.ProductID = C.ProductID\"\n```", "```py\n        while reader.Read() do\n            productInfos.Add({ProductID=reader.GetInt32(0);\n                                AvgOrders=(float)(reader.GetDecimal(1));\n                                AvgReviews=(float)(reader.GetDecimal(2));\n                                ListPrice=(float)(reader.GetDecimal(3));})\n```", "```py\nlet x = reviews |> Seq.map(fun pr -> pr.AvgReviews) |> Seq.toArray\n```", "```py\n        let xs = \n            productInfos \n            |> Seq.map (fun pi -> [|pi.AvgReviews; pi.ListPrice|]) \n            |> Seq.toArray\n        let y = \n            productInfos \n            |> Seq.map (fun pi -> pi.AvgOrders) \n            |> Seq.toArray\n        let regression = MultipleLinearRegression(2, true)\n        let error = regression.Regress(xs, y)\n\n        let a = regression.Coefficients.[0]\n        let b = regression.Coefficients.[1]\n        let c = regression.Coefficients.[2]\n\n        let mse = error/float xs.Length \n        let rmse = sqrt mse\n        let r2 = regression.CoefficientOfDetermination(xs, y)\n\n        let productInfo = \n            productInfos \n            |> Seq.find (fun r -> r.ProductID = productId)\n        let xs' = [|[|productInfo.AvgReviews; productInfo.ListPrice|]|]\n        regression.Compute(xs') |> Seq.head\n```", "```py\n#r \"System.Transactions.dll\"\n#r \"../packages/Accord.3.0.2/lib/net40/Accord.dll\"\n#r \"../packages/Accord.Statistics.3.0.2/lib/net40/Accord.Statistics.dll\"\n#r \"../packages/Accord.Math.3.0.2/lib/net40/Accord.Math.dll\"\n\nopen Accord\nopen Accord.Statistics\nopen Accord.Statistics.Models.Regression.Linear\n\nopen System\nopen System.Data.SqlClient\n\ntype ProductInfo = {ProductID:int; AvgOrders:float; AvgReviews: float; ListPrice: float; Weight: float}\n\nlet productInfos = ResizeArray<ProductInfo>()\n\n[<Literal>]\nlet connectionString = \"data source=nc54a9m5kk.database.windows.net;initial catalog=AdventureWorks2014;user id=chickenskills@nc54a9m5kk;password=sk1lzm@tter;\"\n\n[<Literal>]\nlet query = \"Select \n            A.ProductID, AvgOrders, AvgReviews, ListPrice, Weight\n            From\n            (Select \n            ProductID,\n            (Sum(OrderQty) + 0.0)/(Count(Distinct SOH.CustomerID) + 0.0) as AvgOrders\n            from [Sales].[SalesOrderDetail] as SOD\n            inner join [Sales].[SalesOrderHeader] as SOH\n            on SOD.SalesOrderID = SOH.SalesOrderID\n            inner join [Sales].[Customer] as C\n            on SOH.CustomerID = C.CustomerID\n            Where C.StoreID is not null\n            Group By ProductID) as A\n            Inner Join \n            (Select\n            ProductID,\n            (Sum(Rating) + 0.0) / (Count(ProductID) + 0.0) as AvgReviews\n            from [Production].[ProductReview] as PR\n            Group By ProductID) as B\n            on A.ProductID = B.ProductID\n            Inner Join\n            (Select\n            ProductID,\n            ListPrice,\n            Weight\n            from [Production].[Product]\n            ) as C\n            On A.ProductID = C.ProductID\"\n\nlet connection = new SqlConnection(connectionString)\nlet command = new SqlCommand(query, connection)\nconnection.Open()\nlet reader = command.ExecuteReader()\nwhile reader.Read() do\n    productInfos.Add({ProductID=reader.GetInt32(0);\n                        AvgOrders=(float)(reader.GetDecimal(1));\n                        AvgReviews=(float)(reader.GetDecimal(2));\n                        ListPrice=(float)(reader.GetDecimal(3));\n                        Weight=(float)(reader.GetDecimal(4));})\n\nlet xs = \n    productInfos \n    |> Seq.map (fun pi -> [|pi.AvgReviews; pi.ListPrice; pi.Weight|]) \n    |> Seq.toArray\nlet y = \n    productInfos \n    |> Seq.map (fun pi -> pi.AvgOrders) \n    |> Seq.toArray\nlet regression = MultipleLinearRegression(3, true)\nlet error = regression.Regress(xs, y)\n\nlet a = regression.Coefficients.[0]\nlet b = regression.Coefficients.[1]\nlet c = regression.Coefficients.[2]\nlet d = regression.Coefficients.[3]\n\nlet mse = error/float xs.Length \nlet rmse = sqrt mse\nlet r2 = regression.CoefficientOfDetermination(xs, y)\n```", "```py\nval regression : MultipleLinearRegression =\n y(x0, x1, x2) = 8.94836007927991*x0 + -0.00103754084861455*x1 + -0.0848953592695415*x2 + -21.2973971475571\nval error : float = 671.2299241\nval a : float = 8.948360079\nval b : float = -0.001037540849\nval c : float = -0.08489535927\nval d : float = -21.29739715\nval mse : float = 6.919896125\nval rmse : float = 2.630569544\nval r2 : float = 0.3640667242\n\n```", "```py\n#r \"../packages/Accord.3.0.2/lib/net40/Accord.dll\"\n#r \"../packages/Accord.Statistics.3.0.2/lib/net40/Accord.Statistics.dll\"\n#r \"../packages/Accord.Math.3.0.2/lib/net40/Accord.Math.dll\"\n\nopen Accord\nopen Accord.Statistics.Analysis\nopen Accord.Statistics.Models.Regression\nopen Accord.Statistics.Models.Regression.Fitting\n\nlet xs = [| [|0.5|];[|0.75|];\n            [|1.0|];[|1.25|];[|1.5|];[|1.75|];[|1.75|];\n            [|2.0|];[|2.25|];[|2.5|];[|2.75|];\n            [|3.0|];[|3.25|];[|3.5|];\n            [|4.0|];[|4.25|];[|4.5|];[|4.75|];\n            [|5.0|];[|5.5|];|]\n\nlet y = [|0.0;0.0;0.0;0.0;0.0;0.0;1.0;0.0;1.0;0.0;\n          1.0;0.0;1.0;0.0;1.0;1.0;1.0;1.0;1.0;1.0|]\n```", "```py\nval xs : float [] [] =\n [|[|0.5|]; [|0.75|]; [|1.0|]; [|1.25|]; [|1.5|]; [|1.75|]; [|1.75|]; [|2.0|];\n [|2.25|]; [|2.5|]; [|2.75|]; [|3.0|]; [|3.25|]; [|3.5|]; [|4.0|]; [|4.25|];\n [|4.5|]; [|4.75|]; [|5.0|]; [|5.5|]|]\nval y : float [] =\n [|0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 1.0; 0.0; 1.0; 0.0; 1.0; 0.0; 1.0; 0.0; 1.0;\n 1.0; 1.0; 1.0; 1.0; 1.0|]\n\n```", "```py\nlet analysis = new LogisticRegressionAnalysis(xs, y)\nanalysis.Compute() |> ignore\nlet pValue = analysis.ChiSquare.PValue\nlet coefficientOdds = analysis.Regression.GetOddsRatio(0)\nlet hoursOfStudyingOdds = analysis.Regression.GetOddsRatio(1)\nlet coefficients = analysis.CoefficientValues\n```", "```py\nval analysis : LogisticRegressionAnalysis\nval pValue : float = 0.0006364826185\nval coefficientOdds : float = 0.01694617045\nval hoursOfStudyingOdds : float = 4.502556825\nval coefficients : float [] = [|-4.077713403; 1.504645419|]\n\n```", "```py\nval coefficientOdds : float = 0.01694617045\nval hoursOfStudyingOdds : float = 4.502556825\n\n```", "```py\nval coefficients : float [] = [|-4.077713403; 1.504645419|]\n\n```", "```py\nlet result = analysis.Regression.Compute([|3.75|])\n```", "```py\nval result : float = 0.8270277278\n\n```", "```py\nlet xs' = [| [|0.5;2.5|];\n   [|0.75;1.5|];\n            [|1.0;4.0|];\n  [|1.25;1.0|];\n  [|1.5;0.0|];\n  [|1.75;3.0|];\n  [|1.75;0.0|];\n            [|2.0;3.0|];\n            [|2.25;1.0|];\n            [|2.5;4.5|];\n            [|2.75;1.5|];\n            [|3.0;1.0|];\n            [|3.25;2.5|];\n            [|3.5;0.0|];\n            [|4.0;2.0|];\n            [|4.25;1.5|];\n            [|4.5;4.5|];\n            [|4.75;0.0|];\n            [|5.0;1.0|];\n            [|5.5;0.0|];|]\n\nlet analysis' = new LogisticRegressionAnalysis(xs', y)\nanalysis'.Compute() |> ignore\nlet pValue' = analysis'.ChiSquare.PValue\nlet coefficientOdds' = analysis'.Regression.GetOddsRatio(0)\nlet hoursOfStudyingOdds' = analysis'.Regression.GetOddsRatio(1)\nlet numberOfBeersDrankOdds' = analysis'.Regression.GetOddsRatio(2)\nlet coefficients' = analysis'.CoefficientValues\n```", "```py\nval analysis' : LogisticRegressionAnalysis\nval pValue' : float = 0.002336631577\nval coefficientOdds' : float = 0.02748131566\nval hoursOfStudyingOdds' : float = 4.595591714\nval numberOfBeersDrankOdds' : float = 0.7409200941\nval coefficients' : float [] = [|-3.594248936; 1.525097521; -0.2998624947|]\n\n```", "```py\nlet result' = analysis'.Regression.Compute([|4.50; 1.00|])\n```", "```py\nval result' : float = 0.9511458187\n\n```", "```py\n#r \"System.Transactions.dll\"\n#r \"../packages/Accord.3.0.2/lib/net40/Accord.dll\"\n#r \"../packages/Accord.Statistics.3.0.2/lib/net40/Accord.Statistics.dll\"\n#r \"../packages/Accord.Math.3.0.2/lib/net40/Accord.Math.dll\"\n\nopen Accord\nopen Accord.Statistics.Filters\nopen Accord.Statistics.Analysis\nopen Accord.Statistics.Models.Regression\nopen Accord.Statistics.Models.Regression.Fitting\n\nopen System\nopen System.Data.SqlClient\n\ntype ProductInfo = {ProductID:int; Color:string; AvgReviews: float; Markup: float}\nlet productInfos = ResizeArray<ProductInfo>()\n\n[<Literal>]\nlet connectionString = \"data source=nc54a9m5kk.database.windows.net;initial catalog=AdventureWorks2014;user id=chickenskills@nc54a9m5kk;password=sk1lzm@tter;\"\n\n[<Literal>]\nlet query = \"Select\n    A.ProductID,\n    A.Color,\n    B.AvgReviews,\n    A.MarkUp\n    From\n    (Select P.ProductID,\n      Color,\n      ListPrice - StandardCost as Markup\n      from [Sales].[SalesOrderDetail] as SOD\n        inner join [Sales].[SalesOrderHeader] as SOH\n        on SOD.SalesOrderID = SOH.SalesOrderID\n        inner join [Sales].[Customer] as C\n        on SOH.CustomerID = C.CustomerID\n      inner join [Production].[Product] as P\n      on SOD.ProductID = P.ProductID\n      inner join [Production].[ProductSubcategory] as PS\n      on P.ProductSubcategoryID = PS.ProductSubcategoryID\n      Where C.StoreID is null\n      and PS.ProductCategoryID = 1) as A\n    Inner Join\n    (Select PR.ProductID,\n      (Sum(Rating) + 0.0) / (Count(ProductID) + 0.0) as AvgReviews\n        from [Production].[ProductReview] as PR\n        Group By ProductID) as B\n    on A.ProductID = B.ProductID\"\n\nlet connection = new SqlConnection(connectionString)\nlet command = new SqlCommand(query, connection)\nconnection.Open()\nlet reader = command.ExecuteReader()\nwhile reader.Read() do\n    productInfos.Add({ProductID=reader.GetInt32(0);\n                        Color=(string)(reader.GetString(1));\n                        AvgReviews=(float)(reader.GetDecimal(2));\n                        Markup=(float)(reader.GetDecimal(3));})\n```", "```py\ntype ProductInfo =\n {ProductID: int;\n Color: string;\n AvgReviews: float;\n Markup: float;}\nval productInfos : List<ProductInfo>\nval connectionString : string =\n \"data source=nc54a9m5kk.database.windows.net;initial catalog=A\"+[72 chars]\nval query : string =\n \"Select\n A.ProductID,\n A.Color,\n B.AvgReviews,\n A.\"+[803 chars]\nval connection : SqlConnection = System.Data.SqlClient.SqlConnection\nval command : SqlCommand = System.Data.SqlClient.SqlCommand\nval reader : SqlDataReader\nval it : unit = ()\n\n```", "```py\ntype ProductInfo' = {ProductID:int; BlackInd:float; BlueInd:float; RedInd:float; SilverInd:float; OtherInd: float; AvgReviews: float; HighMargin:float}\n\nlet getProductInfo'(productInfo:ProductInfo) =\n        {ProductInfo'.ProductID=productInfo.ProductID;\n        BlackInd = (match productInfo.Color with | \"Black\" -> 1.0 | _ -> 0.0);\n        BlueInd = (match productInfo.Color with | \"Blue\" -> 1.0 | _ -> 0.0);\n        RedInd = (match productInfo.Color with | \"Red\" -> 1.0 | _ -> 0.0);\n        SilverInd = (match productInfo.Color with | \"Silver\" -> 1.0 | _ -> 0.0);\n        OtherInd = (match productInfo.Color with | \"Silver\" | \"Blue\" | \"Red\"  -> 0.0 | _ -> 1.0);\n        AvgReviews = productInfo.AvgReviews;\n        HighMargin = (match productInfo.Markup > 800.0 with | true -> 1.0 | false -> 0.0);}\n\nlet productInfos' = \n    productInfos \n    |> Seq.map (fun pi -> getProductInfo'(pi))\nlet xs = \n    productInfos' \n    |> Seq.map (fun pi -> [|pi.BlackInd; pi.BlueInd; pi.RedInd; pi.SilverInd; pi.OtherInd; pi.AvgReviews|]) \n    |> Seq.toArray\nlet y = \n    productInfos' \n    |> Seq.map (fun pi -> pi.HighMargin) \n    |> Seq.toArray\n\nlet analysis = new LogisticRegressionAnalysis(xs, y)\nanalysis.Compute() |> ignore\nlet pValue = analysis.ChiSquare.PValue\nlet coefficientOdds = analysis.Regression.GetOddsRatio(0)\nlet blackIndOdds = analysis.Regression.GetOddsRatio(1)\nlet blueIndOdds = analysis.Regression.GetOddsRatio(2)\nlet redIndOdds = analysis.Regression.GetOddsRatio(3)\nlet silverIndOdds = analysis.Regression.GetOddsRatio(4)\nlet otherIndOdds = analysis.Regression.GetOddsRatio(5)\nlet ratingsOdds = analysis.Regression.GetOddsRatio(6)\nlet coefficients = analysis.CoefficientValues\n```", "```py\nval analysis : LogisticRegressionAnalysis\nval pValue : float = 0.0\nval coefficientOdds : float = 4.316250806e-07\nval blackIndOdds : float = 6.708924364\nval blueIndOdds : float = 0.03366007966\nval redIndOdds : float = 0.0897074697\nval silverIndOdds : float = 0.04618907808\nval otherIndOdds : float = 0.003094736179\nval ratingsOdds : float = 127.5863311\nval coefficients : float [] =\n [|-14.65570849; 1.903438635; -3.391442724; -2.411201239; -3.075011914;\n -5.778052618; 4.848793242|]\n\n```", "```py\nlet getColorId (color:string) =\n    match color.ToLower() with\n    | \"black\" -> 1.0\n    | \"blue\" -> 2.0\n    | \"red\" -> 3.0\n    | \"silver\" -> 4.0\n    | _ -> 5.0\n```", "```py\nBlackInd = (match productInfo.Color with | \"Black\" -> 1.0 | _ -> 0.0);\n```", "```py\nHighMargin = (match productInfo.Markup > 800.0 with | true -> 1.0 | false -> 0.0);}\n```", "```py\nSelect \nProductID,\nP.Name,\nProductNumber,\nColor,\nStandardCost,\nListPrice,\nListPrice - StandardCost as Markup\nfrom [Production].[Product] as P\nInner Join [Production].[ProductSubcategory] as PS\non P.ProductSubcategoryID = PS.ProductSubcategoryID\nWhere PS.ProductCategoryID = 1\nOrder by ListPrice - StandardCost\n```", "```py\nnamespace AdventureWorks.MachineLearning\n\nopen Accord\nopen Accord.Statistics.Filters\nopen Accord.Statistics.Analysis\nopen Accord.Statistics.Models.Regression\nopen Accord.Statistics.Models.Regression.Fitting\n\nopen System\nopen System.Data.SqlClient\n```", "```py\ntype ProductInfo = {ProductID:int; Color:string; AvgReviews: float; Markup: float}\ntype ProductInfo' = {ProductID:int; BlackInd:float; BlueInd:float; RedInd:float; SilverInd:float; OtherInd: float; AvgReviews: float; HighMargin:float}\n\ntype public ColorPrediction () = \n    let productInfos = ResizeArray<ProductInfo>()\n\n    [<Literal>]\n    let connectionString = \"data source=nc54a9m5kk.database.windows.net;initial catalog=AdventureWorks2014;user id=chickenskills@nc54a9m5kk;password=sk1lzm@tter;\"\n\n    [<Literal>]\n    let query = \"Select\n        A.ProductID,\n        A.Color,\n        B.AvgReviews,\n        A.MarkUp\n        From\n        (Select P.ProductID,\n          Color,\n          ListPrice - StandardCost as Markup\n          from [Sales].[SalesOrderDetail] as SOD\n            inner join [Sales].[SalesOrderHeader] as SOH\n            on SOD.SalesOrderID = SOH.SalesOrderID\n            inner join [Sales].[Customer] as C\n            on SOH.CustomerID = C.CustomerID\n            inner join [Production].[Product] as P\n            on SOD.ProductID = P.ProductID\n            inner join [Production].[ProductSubcategory] as PS\n            on P.ProductSubcategoryID = PS.ProductSubcategoryID\n            Where C.StoreID is null\n            and PS.ProductCategoryID = 1) as A\n        Inner Join\n        (Select PR.ProductID,\n            (Sum(Rating) + 0.0) / (Count(ProductID) + 0.0) as AvgReviews\n            from [Production].[ProductReview] as PR\n            Group By ProductID) as B\n        on A.ProductID = B.ProductID\"\n```", "```py\n    member this.GetColors(attachmentPoint) = \n        let connection = new SqlConnection(connectionString)\n        let command = new SqlCommand(query, connection)\n        connection.Open()\n        let reader = command.ExecuteReader()\n        while reader.Read() do\n            productInfos.Add({ProductID=reader.GetInt32(0);\n              Color=(string)(reader.GetString(1));\n              AvgReviews=(float)(reader.GetDecimal(2));\n              Markup=(float)(reader.GetDecimal(3));})\n\n        let getProductInfo'(productInfo:ProductInfo) =\n                {ProductInfo'.ProductID=productInfo.ProductID;\n                BlackInd = (match productInfo.Color with | \"Black\" -> 1.0 | _ -> 0.0);\n                BlueInd = (match productInfo.Color with | \"Blue\" -> 1.0 | _ -> 0.0);\n                RedInd = (match productInfo.Color with | \"Red\" -> 1.0 | _ -> 0.0);\n                SilverInd = (match productInfo.Color with | \"Silver\" -> 1.0 | _ -> 0.0);\n                OtherInd = (match productInfo.Color with | \"Silver\" | \"Blue\" | \"Red\" | \"Silver\" -> 0.0 | _ -> 1.0);\n                AvgReviews = productInfo.AvgReviews;\n                HighMargin = (match productInfo.Markup > attachmentPoint with | true -> 1.0 | false -> 0.0);}\n\n        let productInfos' = \n            productInfos \n            |> Seq.map (fun pi -> getProductInfo'(pi))\n        let xs = \n            productInfos' \n            |> Seq.map (fun pi -> [|pi.BlackInd; pi.BlueInd; pi.RedInd; pi.SilverInd; pi.OtherInd; pi.AvgReviews|])\n            |> Seq.toArray\n        let \n            y = productInfos' \n            |> Seq.map (fun pi -> pi.HighMargin) \n            |> Seq.toArray\n\n        let colors = [|\"Black\";\"Blue\";\"Red\";\"Silver\";\"Other\"|]\n\n        let analysis = new LogisticRegressionAnalysis(xs, y)\n        match analysis.Compute() with \n            | true ->\n                let coefficientValues = analysis.CoefficientValues |> Seq.skip 1\n                let colors' = Seq.zip colors coefficientValues\n                colors' |> Seq.mapi (fun i (c,cv) -> c, (abs(cv)/cv), analysis.Regression.GetOddsRatio(i))\n                        |> Seq.map (fun (c, s, odr) -> c, s * odr)\n                        |> Seq.sortBy (fun (c, odr) -> odr)\n                        |> Seq.map (fun (c, odr) -> c)\n                        |> Seq.toArray\n            | false -> colors\n```", "```py\nanalysis.CoefficientValues |> Seq.skip 1\n```", "```py\nlet colors' = Seq.zip colors coefficientValues\n```", "```py\n                colors' |> Seq.mapi (fun i (c,cv) -> c, (abs(cv)/cv), analysis.Regression.GetOddsRatio(i+1))\n                        |> Seq.map (fun (c, s, odr) -> c, s * odr)\n                 |> Seq.sortByDescending (fun (c,odr)-> odr)\n                        |> Seq.map (fun (c, odr) -> c)\n                        |> Seq.toArray\n```", "```py\n|> Seq.mapi(fun i (c,cv) -> c, (abs(cv)/cv), analysis.Regression.GetOddsRatio(i+1))\n```", "```py\n|> Seq.map(fun (c, s, odr) -> c, s * odr)\n```", "```py\n|> Seq.sortByDescending(fun (c,odr)-> odr)\n```", "```py\n|> Seq.map(fun (c, odr) -> c)\n|> Seq.toArray\n```", "```py\nusing System;\nusing System.Collections.Generic;\nusing System.Configuration;\nusing System.Linq;\nusing System.Threading;\nusing System.Web;\nusing System.Web.Mvc;\nusing System.Web.Optimization;\nusing System.Web.Routing;\nusing AdventureWorks.MachineLearning;\n\nnamespace AdventureWorks\n{\n    public class MvcApplication : System.Web.HttpApplication\n    {\n        static Object _lock = new Object();\n        Timer _timer = null;\n        static String[] _bikeColors = null;\n\n        protected void Application_Start()\n        {\n            AreaRegistration.RegisterAllAreas();\n            FilterConfig.RegisterGlobalFilters(GlobalFilters.Filters);\n            RouteConfig.RegisterRoutes(RouteTable.Routes);\n            BundleConfig.RegisterBundles(BundleTable.Bundles);\n            _bikeColors = new string[5] { \"Red\", \"White\", \"Blue\", \"Black\", \"Silver\" };\n            _timer = new Timer(UpdateBikeColors,null,0,TimeSpan.FromMinutes(1).Milliseconds);\n        }\n\n        private void UpdateBikeColors(object state)\n        {\n            var attachmentPoint = Double.Parse(ConfigurationManager.AppSettings[\"attachmentPoint\"]);\n            var colorPrediction = new ColorPrediction();\n            BikeColors = colorPrediction.GetColors(attachmentPoint);\n        }\n\n        public static String[] BikeColors\n        {\n            get\n            {\n                lock(_lock)\n                {\n                    return _bikeColors;\n                }\n            }\n            set\n            {\n                lock(_lock)\n                {\n                    _bikeColors = value;\n                }\n            }\n        }\n    }\n}\n```", "```py\n        public static String[] BikeColors\n        {\n            get\n            {\n                lock(_lock)\n                {\n                    return _bikeColors;\n                }\n            }\n            set\n            {\n                lock(_lock)\n                {\n                    _bikeColors = value;\n                }\n            }\n        }\n```", "```py\n        private void UpdateBikeColors(object state)\n        {\n            var attachmentPoint = Double.Parse(ConfigurationManager.AppSettings[\"attachmentPoint\"]);\n            var colorPrediction = new ColorPrediction();\n            BikeColors = colorPrediction.GetColors(attachmentPoint);\n        }\n```", "```py\n_timer = new Timer(UpdateBikeColors,null,0,TimeSpan.FromMinutes(1).Milliseconds);\n```", "```py\n    <add key=\"attachmentPoint\" value=\"800\" />\n```", "```py\nvar colors = MvcApplication.BikeColors;\n```"]