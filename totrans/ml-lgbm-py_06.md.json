["```py\ntrain_df.info()\n#   Column                          Non-Null Count  Dtype\n---  ------                          --------------  -----\n 0   tracking_id                     28200 non-null  object\n 1   datetime                        28200 non-null  object\n 2   wind_speed(m/s)                 27927 non-null  float64\n 3   atmospheric_temperature(°C)     24750 non-null  float64\n 4   shaft_temperature(°C)           28198 non-null  float64\n...\n 20  windmill_height(m)              27657 non-null  float64\n 21  windmill_generated_power(kW/h)  27993 non-null  float64\n```", "```py\ntrain_df.describe().T.style.bar(subset=['mean'])\n```", "```py\nsns.histplot(train_df[\"atmospheric_temperature(°C)\"], bins=30)\n```", "```py\ntrain_df[train_df.duplicated()]\n```", "```py\ncolumn_data = frame[feature]\ncolumn_data = column_data[~np.isnan(column_data)]\nmean, std = np.mean(column_data), np.std(column_data)\nlower_bound = mean - std * 3\nupper_bound = mean + std * 3\nframe.loc[((frame[feature] < lower_bound) | (frame[feature] > upper_bound))] = np.nan\n```", "```py\nframe.loc[frame[\"wind_speed(m/s)\"] < 0, \"wind_speed(m/s)\"] = 0\nframe.loc[frame[\"wind_speed(m/s)\"] > 113, \"wind_speed(m/s)\"] = 113\nframe.loc[frame[\"blade_length(m)\"] < 0, \"blade_length(m)\"] = 0\nframe.loc[frame[\"windmill_height(m)\"] < 0, \"windmill_height(m)\"] = 0\nframe.loc[frame[\"resistance(ohm)\"] < 0, \"resistance(ohm)\"] = 0\n```", "```py\ndf.loc[frame[f] == -99.0, f] = np.nan\ndf.loc[frame[f] == 99.0, f] = np.nan\ndf.loc[frame[f] == -999.0, f] = np.nan\ndf.loc[frame[f] == 999.0, f] = np.nan\n```", "```py\nif f in numerical_columns:\n    frame[f].fillna(frame[f].mean(), inplace=True)\nelse:\n    frame[f].fillna(frame[f].mode()[0], inplace=True)\n```", "```py\nframe[\"date_year\"] = train_df[\"datetime\"].dt.year\nframe[\"date_month\"] = train_df[\"datetime\"].dt.month\nframe[\"date_day\"] = train_df[\"datetime\"].dt.day\nframe[\"date_hour\"] = train_df[\"datetime\"].dt.hour\nframe = frame.drop(columns=[\"tracking_id\", \"datetime\"], axis=1)\n```", "```py\ntrain_df.groupby(\"cloud_level\")[\"windmill_generated_power(kW/h)\"].mean().plot.bar()\n```", "```py\nsns.scatterplot(x='blades_angle(°)', y='windmill_generated_power(kW/h)', hue='cloud_level', data=train_df)\n```", "```py\nsns.scatterplot(x='date_month',y='windmill_generated_power(kW/h)',hue='cloud_level',data=train_df)\n```", "```py\nX = train_df.drop(columns=[\"windmill_generated_power(kW/h)\", axis=1)\ny = train_df[\"windmill_generated_power(kW/h)\"]\n```", "```py\nX_dummies = pd.get_dummies(X)\nlinear = LinearRegression()\nscores = cross_val_score(linear, X_dummies, y)\nscores = cross_val_score(linear, X_dummies, y, scoring=\"neg_mean_squared_error\")\nforest = RandomForestRegressor()\nX_dummies = pd.get_dummies(X)\nscores = cross_val_score(forest, X_dummies, y)\nscores = cross_val_score(forest, X_dummies, y, scoring=\"neg_mean_squared_error\")\nlgbm = lgb.LGBMRegressor(force_row_wise=True, verbose = -1)\nscores = cross_val_score(lgbm, X, y)\nscores = cross_val_score(lgbm, X_dummies, y, scoring=\"neg_mean_squared_error\")\n```", "```py\ndef objective(trial):\n    boosting_type = trial.suggest_categorical(\"boosting_type\", [\"dart\", \"gbdt\"])\n    lambda_l1 = trial.suggest_float(\n        'lambda_l1', 1e-8, 10.0, log=True),\n...\n    pruning_callback = optuna.integration.LightGBMPruningCallback(trial, \"mean_squared_error\")\n    model = lgb.LGBMRegressor(\n...\n        callbacks=[pruning_callback],\n        verbose=-1)\n    scores = cross_val_score(model, X, y, scoring=\"neg_mean_squared_error\")\n    return scores.mean()\n```", "```py\nsampler = optuna.samplers.TPESampler()\npruner = optuna.pruners.HyperbandPruner(\n    min_resource=20, max_resource=400, reduction_factor=3)\nstudy = optuna.create_study(\n    direction='maximize', sampler=sampler,\n    pruner=pruner\n)\nstudy.optimize(objective, n_trials=200, gc_after_trial=True, n_jobs=-1)\n```", "```py\njoblib.dump(model, \"wind_turbine_model.pkl\")\n```", "```py\ndef make_predictions(data):\n    model = joblib.load(\"wind_turbine_model.pkl\")\n    return model.predict(data)\nif __name__ == '__main__':\n    make_predictions(prepare_data(pd.read_csv(\"wind-turbine/test.csv\")))\n```", "```py\ntrain_df.info()\n#   Column                    Non-Null Count   Dtype\n---  ------                    --------------   -----\n 0   ID                        100000 non-null  object\n 1   Customer_ID               100000 non-null  object\n 2   Month                     100000 non-null  object\n 3   Name                      90015 non-null   object\n 4   Age                       100000 non-null  object\n 5   SSN                       100000 non-null  object\n ...\n 25  Payment_Behaviour         100000 non-null  object\n 26  Monthly_Balance           98800 non-null   object\n 27  Credit_Score              100000 non-null  object\n```", "```py\nframe[col] = frame[col].astype(str).str.replace(r'[^\\d\\.]', '', regex=True)\n```", "```py\nframe[col] = pd.to_numeric(frame[col], errors=\"coerce\")\n```", "```py\ndef clean_credit_age(age):\n    if age == 'nan':\n        return np.nan\n    if not \"Years\" in age:\n        return age\n    years, months = age.split(\" Years and \")\n    months = months.replace(\" Months\", \"\")\n    return int(years) + int(months) / 12\n```", "```py\n\"Home Equity Loan, and Payday Loan\"\n\"Payday Loan, Personal Loan\"\n\"Student Loan, Auto Loan, and Debt Consolidation Loan\"\n```", "```py\nframe[\"auto_loan\"] = frame[\"Type_of_Loan\"].str.lower().str.contains(\"auto loan\").astype(bool)\n```", "```py\nframe.loc[frame[\"Age\"] > 65, \"Age\"] = 65\nframe.loc[frame[\"Num_Bank_Accounts\"] > 1000, \"Num_Bank_Accounts\"] = 1000\nframe.loc[frame[\"Monthly_Balance\"] > 1e6, \"Monthly_Balance\"] = np.nan\n```", "```py\ntrain_df.info()\ntrain_df.isnull().sum()\ntrain_df[train_df.duplicated()]\n```", "```py\nsns.histplot(train_df[\"Age\"], bins=20)\n```", "```py\nsns.histplot(train_df[\"Monthly_Inhand_Salary\"], bins=30)\n```", "```py\nsns.histplot(train_df[\"Credit_Score\"], bins=30)\n```", "```py\nX = train_df.drop(columns=[\"Credit_Score\"], axis=1)\nX_dummies = pd.get_dummies(X)\ny = train_df[\"Credit_Score\"]\nsmote = SMOTE(sampling_strategy='auto')\nreturn smote.fit_resample(X_dummies, y)\n```"]