["```py\nlibrary(\"data.table\")\nlibrary(\"ggplot2\")\nlibrary(\"recommenderlab\")\nlibrary(\"countrycode\")\n```", "```py\nfile_in <- \"anonymous-msweb.test.txt\"\n\n```", "```py\ntable_in <- read.csv(file_in, header = FALSE)\nhead(table_in)\n```", "```py\ntable_users <- table_in[, 1:2]\n\n```", "```py\ntable_users <- data.table(table_users)\n\n```", "```py\nsetnames(table_users, 1:2, c(\"category\", \"value\"))\ntable_users <- table_users[category %in% c(\"C\", \"V\")]\nhead(table_users)\n\n```", "```py\ntable_users[, chunk_user := cumsum(category == \"C\")]\nhead(table_users)\n\n```", "```py\ntable_long <- table_users[, list(user = value[1], item = value[-1]), by = \"chunk_user\"]\nhead(table_long)\n\n```", "```py\ntable_long[, value := 1]\ntable_wide <- reshape(data = table_long,direction = \"wide\",idvar = \"user\",timevar = \"item\",v.names = \"value\")\nhead(table_wide[, 1:5, with = FALSE])\n\n```", "```py\nvector_users <- table_wide[, user]\ntable_wide[, user := NULL]\ntable_wide[, chunk_user := NULL]\n\n```", "```py\nsetnames(x = table_wide,old = names(table_wide),new = substring(names(table_wide), 7))\n```", "```py\nmatrix_wide <- as.matrix(table_wide)rownames(matrix_wide) <- vector_users\nhead(matrix_wide[, 1:6])\n\n```", "```py\nmatrix_wide[is.na(matrix_wide)] <- 0\nratings_matrix <- as(matrix_wide, \"binaryRatingMatrix\")\nratings_matrix\n## 5000 x 236 rating matrix of class binaryRatingMatrix with 15191 ratings.\n\n```", "```py\nimage(ratings_matrix[1:50, 1:50], main = \"Binary rating matrix\")\n```", "```py\nn_users <- colCounts(ratings_matrix)\nqplot(n_users) + stat_bin(binwidth = 100) + ggtitle(\"Distribution of the number of users\")\n\n```", "```py\nqplot(n_users[n_users < 100]) + stat_bin(binwidth = 10) + ggtitle(\"Distribution of the number of users\")\n\n```", "```py\nratings_matrix <- ratings_matrix[, colCounts(ratings_matrix) >= 5]\nratings_matrix\n## 5000 x 166 rating matrix of class 'binaryRatingMatrix' with 15043 ratings.\n\n```", "```py\nsum(rowCounts(ratings_matrix) == 0)\n## _15_\n```", "```py\nratings_matrix <- ratings_matrix[rowCounts(ratings_matrix) >= 5, ]\nratings_matrix\n## 959 x 166 rating matrix of class 'binaryRatingMatrix' with 6816 ratings\n\n```", "```py\ntable_in <- data.table(table_in)\ntable_items <- table_in[V1 == \"A\"]\nhead(table_items)\n\n```", "```py\ntable_items <- table_items[, c(2, 4, 5), with = FALSE]\nsetnames(table_items, 1:3, c(\"id\", \"description\", \"url\"))\ntable_items <- table_items[order(id)]\nhead(table_items)\n\n```", "```py\ntable_items[, category := \"product\"]\n```", "```py\nname_countries <- c(countrycode_data$country.name, \"Taiwan\", \"UK\", \"Russia\", \"Venezuela\", \"Slovenija\", \"Caribbean\", \"Netherlands (Holland)\", \"Europe\", \"Central America\", \"MS North Africa\")\ntable_items[description %in% name_countries, category := \"region\"]\n\n```", "```py\ntable_items[grepl(\"Region\", description), category := \"region\"]\nhead(table_items)\n\n```", "```py\ntable_items[, list(n_items = .N), by = category]\n\n```", "```py\nwhich_train <- sample(x = c(TRUE, FALSE),size = nrow(ratings_matrix),replace = TRUE,prob = c(0.8, 0.2))recc_data_train <- ratings_matrix[which_train, ]\nrecc_data_test <- ratings_matrix[!which_train, ]\n\n```", "```py\nrecc_model <- Recommender(data = recc_data_train,method = \"IBCF\",parameter = list(method = \"Jaccard\"))\n\n```", "```py\nclass(recc_model@model$sim)\n## dgCMatrix\ndim(recc_model@model$sim)\n## _166_ and _166_\n```", "```py\nimage(recc_model@model$sim)\n```", "```py\nrange(recc_model@model$sim)\n## _0_ and _1_\n```", "```py\ndist_ratings <- as(recc_model@model$sim, \"matrix\")\n```", "```py\ndist_category <- table_items[, 1 - dist(category == \"product\")]class(dist_category)\n## dist\n\n```", "```py\ndist_category <- as(dist_category, \"matrix\")\n\n```", "```py\ndim(dist_category)\n## _294_ and _294_\ndim(dist_ratings)\n## _166_ and _166_\n```", "```py\nrownames(dist_category) <- table_items[, id]\ncolnames(dist_category) <- table_items[, id]\n\n```", "```py\nvector_items <- rownames(dist_ratings)\ndist_category <- dist_category[vector_items, vector_items]\n\n```", "```py\nidentical(dim(dist_category), dim(dist_ratings))\n## TRUE\nidentical(rownames(dist_category), rownames(dist_ratings))\n## TRUE\nidentical(colnames(dist_category), colnames(dist_ratings))\n## TRUE\n```", "```py\nimage(dist_category)\n```", "```py\nweight_category <- 0.25\ndist_tot <- dist_category * weight_category + dist_ratings * (1 - weight_category)\n\n```", "```py\nimage(dist_tot)\n```", "```py\nrecc_model@model$sim <- as(dist_tot, \"dgCMatrix\")\nrecc_model@model$sim <- as(dist_tot, \"dgCMatrix\")\n\n```", "```py\nn_recommended <- 10\nrecc_predicted <- predict(object = recc_model, newdata = recc_data_test, n = n_recommended)\n\n```", "```py\nhead(recc_predicted@itemLabels)\n\n1038, 1026, 1034, 1008, 1056 and 1032\n```", "```py\n    table_labels <- data.frame(id = recc_predicted@itemLabels)\n\n    ```", "```py\n    table_labels <- merge(table_labels, table_items,\n     by = \"id\", all.x = TRUE, all.y = FALSE,\n     sort = FALSE)\n\n    ```", "```py\n    descriptions <- as(table_labels$description, \"character\")\n\n    ```", "```py\nhead(table_labels)\n```", "```py\nrecc_user_1 <- recc_predicted@items[[1]]\nitems_user_1 <- descriptions[recc_user_1]\nhead(items_user_1)\n\n```", "```py\nrecc_matrix <- sapply(recc_predicted@items, function(x){\n recommended <- descriptions[x]\n c(recommended, rep(\"\", n_recommended - length(recommended)))\n})\ndim(recc_matrix)\n## _10_ and _191_\n\n```", "```py\nhead(recc_matrix[, 1:3])\n\n```", "```py\ntable_recomm_per_item <- table(recc_matrix)\nrecomm_per_item <- as(table_recomm_per_item, \"numeric\")\n\n```", "```py\nbin_recomm_per_item <- cut(recomm_per_item,breaks = c(0, 10, 20, 100,max(recomm_per_item)))\n\n```", "```py\nqplot(bin_recomm_per_item) + ggtitle(\"Recommendations per item\")\n```", "```py\nrecomm_per_item_sorted <- sort(table_recomm_per_item,decreasing = TRUE) recomm_per_item_top <- head(recomm_per_item_sorted, n = 4)\ntable_top <- data.frame(\n name = names(recomm_per_item_top), n_recomm = recomm_per_item_top)\ntable_top\n\n```", "```py\nevaluateModel <- function (\n # data inputs\n ratings_matrix, # rating matrix\n table_items, # item description table\n # K-fold parameters\n n_fold = 10, # number of folds\n items_to_keep = 4, # number of items to keep in the test set\n # model parameters\n number_neighbors = 30, # number of nearest neighbors\n weight_description = 0.2, # weight to the item description-based distance\n items_to_recommend = 10 # number of items to recommend\n){\n # build and evaluate the model\n}\n\n```", "```py\n    set.seed(1)\n    eval_sets <- evaluationScheme(data = ratings_matrix,\n     method = \"cross-validation\",\n     k = n_fold,\n     given = items_to_keep)\n\n    ```", "```py\n    recc_model <- Recommender(data = getData(eval_sets, \"train\"),\n     method = \"IBCF\",\n     parameter = list(method = \"Jaccard\",\n     k = number_neighbors))\n\n    ```", "```py\n    dist_ratings <- as(recc_model@model$sim, \"matrix\")\n    vector_items <- rownames(dist_ratings)\n\n    ```", "```py\n    dist_category <- table_items[, 1 - as.matrix(dist(category == \"product\"))]\n    rownames(dist_category) <- table_items[, id]\n    colnames(dist_category) <- table_items[, id]\n    dist_category <- dist_category[vector_items, vector_items]\n\n    ```", "```py\n    dist_tot <- dist_category * weight_description +\n     dist_ratings * (1 - weight_description)\n    recc_model@model$sim <- as(dist_tot, \"dgCMatrix\")\n\n    ```", "```py\n    eval_prediction <- predict(object = recc_model, newdata = getData(eval_sets, \"known\"), n = items_to_recommend, type = \"topNList\")\n\n    ```", "```py\n    eval_accuracy <- calcPredictionAccuracy(\n     x = eval_prediction,\n     data = getData(eval_sets, \"unknown\"),\n     byUser = FALSE,\n     given = items_to_recommend)\n\n    ```", "```py\n    return(eval_accuracy)\n\n    ```", "```py\n    model_evaluation <- evaluateModel(ratings_matrix = ratings_matrix, table_items = table_items)\n    model_evaluation\n\n    ```", "```py\nnn_to_test <- seq(4, 80, by = 2)\n\n```", "```py\nlist_performance <- lapply(\n X = nn_to_test,\n FUN = function(nn){\n evaluateModel(ratings_matrix = ratings_matrix, table_items = table_items, number_neighbors = nn, weight_description = 0)\n })\n\n```", "```py\nlist_performance[[1]]\n\n```", "```py\nsapply(list_performance, \"[[\", \"precision\")^t\n\n0.1663, 0.1769, 0.1769, 0.175, 0.174, 0.1808, 0.176, 0.1779, 0.1788, 0.1788, 0.1808, 0.1817, 0.1817, 0.1837, 0.1846, 0.1837, 0.1827, 0.1817, 0.1827, 0.1827, 0.1817, 0.1808, 0.1817, 0.1808, 0.1808, 0.1827, 0.1827, 0.1837, 0.1827, 0.1808, 0.1798, 0.1798, 0.1798, 0.1798, 0.1798, 0.1798, 0.1788, 0.1788 and 0.1788\n\n```", "```py\ntable_performance <- data.table(\n nn = nn_to_test, precision = sapply(list_performance, \"[[\", \"precision\"), recall = sapply(list_performance, \"[[\", \"recall\")\n)\n\n```", "```py\nweight_precision <- 0.5\ntable_performance[\n performance := precision * weight_precision + recall * (1 - weight_precision)]\nhead(table_performance)\n\n```", "```py\nconvertIntoPercent <- function(x){\n paste0(round(x * 100), \"%\")\n}\n\n```", "```py\n qplot(table_performance[, nn], table_performance[, precision]) + geom_smooth() + scale_y_continuous(labels = convertIntoPercent)\n\n```", "```py\n qplot(table_performance[, nn], table_performance[, recall]) + geom_smooth() + scale_y_continuous(labels = convertIntoPercent)\n\n```", "```py\n qplot(table_performance[, nn], table_performance[, performance]) + geom_smooth() + scale_y_continuous(labels = convertIntoPercent)\n\n```", "```py\nrow_best <- which.max(table_performance$performance)\nnumber_neighbors_opt <- table_performance[row_best, nn]\nnumber_neighbors_opt\n## _34_\n\n```", "```py\nwd_to_try <- seq(0, 1, by = 0.05)\n\n```", "```py\nlist_performance <- lapply(\n X = wd_to_try, FUN = function(wd){\n evaluateModel(ratings_matrix = ratings_matrix, table_items = table_items, number_neighbors = number_neighbors_opt, weight_description = wd) })\n\n```", "```py\ntable_performance <- data.table(\n wd = wd_to_try, precision = sapply(list_performance, \"[[\", \"precision\"), recall = sapply(list_performance, \"[[\", \"recall\")\n)\ntable_performance[\n performance := precision * weight_precision + recall * (1 - weight_precision)]\n\n```", "```py\n qplot(table_performance[, wd], table_performance[, performance]) + geom_smooth() + scale_y_continuous(labels = convertIntoPercent)\n\n```"]