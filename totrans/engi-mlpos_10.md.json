["```py\nLearn_MLOps\n├──08_API_Microservices\n│   ├── Dockerfile\n    ├── app\n            └── variables.py\n            └── weather_api.py\n            └── requirements.txt\n            └── artifacts\n                       └── model-scaler.pkl\n                       └── svc.onnx\n```", "```py\nfrom pydantic import BaseModel\nclass WeatherVariables(BaseModel):\n                        temp_c: float \n                        humidity: float \n                        wind_speed_kmph: float \n                        wind_bearing_degree: float\n                        visibility_km: float \n                        pressure_millibars: float \n                        current_weather_condition: float\n```", "```py\n    import uvicorn\n    from fastapi import FastAPI\n    from variables import WeatherVariables\n    import numpy\n    import pickle\n    import pandas as pd\n    import onnxruntime as rt\n    ```", "```py\n    app = FastAPI()\n    # Load model scalar\n    pickle_in = open(\"artifacts/model-scaler.pkl\", \"rb\")\n    scaler = pickle.load(pickle_in)\n    # Load the model\n    sess = rt.InferenceSession(\"artifacts/svc.onnx\")\n    input_name = sess.get_inputs()[0].name\n    label_name = sess.get_outputs()[0].name\n    ```", "```py\n    @app.get('/')\n    def index():\n        return {'Hello': 'Welcome to weather prediction service, access the api     docs and test the API at http://0.0.0.0/docs.'}\n    ```", "```py\n    @app.post('/predict')\n    def predict_weather(data: WeatherVariables):\n        data = data.dict()\n        # fetch input data using data varaibles\n        temp_c = data['temp_c']\n        humidity = data['humidity']\n        wind_speed_kmph = data['wind_speed_kmph']\n        wind_bearing_degree = data['wind_bearing_degree']\n        visibility_km = data['visibility_km']\n        pressure_millibars = data['pressure_millibars']\n        current_weather_condition = data['current_weather_condition']\n    ```", "```py\n        data_to_pred = numpy.array([[temp_c, humidity, wind_speed_kmph,         \n    wind_bearing_degree,visibility_km, pressure_millibars, \n    current_weather_condition]])\n        # Scale input data\n        data_to_pred = scaler.fit_transform(data_to_pred.reshape(1, 7))\n      # Model inference\n        prediction = sess.run(\n            [label_name], {input_name: data_to_pred.astype(numpy.float32)})[0]\n    ```", "```py\n    if(prediction[0] > 0.5):\n            prediction = \"Rain\"\n        else:\n            prediction = \"No_Rain\"\n        return {\n            'prediction': prediction\n        }    \n    ```", "```py\nnumpy\nfastapi\nuvicorn\nscikit-learn==0.20.3\npandas\nonnx\nonnxruntime\n```", "```py\nFROM tiangolo/uvicorn-gunicorn-fastapi:python3.7\nCOPY ./app /app\nRUN pip install -r requirements.txt\nEXPOSE 80\nCMD [\"uvicorn\", \"weather_api:app\", \"--host\", \"0.0.0.0\", \"--port\", \"80\"]\n```", "```py\n    build command will start building the Docker image following the steps listed in the Dockerfile. The image is tagged with the name fastapi. After successful execution of the build command, you can validate whether the image is built and tagged successfully or not using the docker images command. It will output the information as follows, after successfully building the image:\n\n    ```", "```py\n\n    ```", "```py\n    fastapi Docker image. The name of the running container is weathercontainer and its port 80 is mapped to port 80 of the local computer. The container will run in the background as we have used -d in the RUN command. Upon successfully running a container, a container ID is output on the terminal, for example, 2729ff7a385b0a255c63cf03ec9b0e1411ce4426c9c49e8db 4883e0cf0fde567.\n    ```", "```py\n    fastapi is mapped and successfully running on port 80 of the local machine. We can access the service and test it from the browser on our local machine at the address 0.0.0.0:80.NoteIf you have no response or errors when you run or test your API service, you may have to disable CORS validation from browsers such as Chrome, Firefox, and Brave or add an extension (for example, go to the Chrome Web Store and search for one) that will disable CORS validation for running and testing APIs locally. By default, you don't need to disable CORS; do it only if required.You will see the message that follows:![Figure 8.6 – FastAPI service running on local port 80\n    ](img/B16572_08_06.jpg)Figure 8.6 – FastAPI service running on local port 80FastAPI uses the OpenAPI (read more: [https://www.openapis.org/](https://www.openapis.org/), [https://swagger.io/specification/](https://swagger.io/specification/)) Specification to serve the model. The `0.0.0.0:80/docs` and it will direct you to a Swagger-based UI (it uses the OAS) to test your API. \n    ```"]