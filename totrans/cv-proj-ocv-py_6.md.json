["```py\n%pylab notebook\n\nimport dlib\nimport cv2\nimport os\nimport tkinter\nfrom tkinter import filedialog\nfrom IPython import display\nroot = tkinter.Tk()\nroot.withdraw()\n#Go to your working directory (will be different for you)\n%cd /home/test/13293\n```", "```py\nimgname = filedialog.askopenfilename(parent = root,initialdir = os.getcwd(), title = 'Select image file...')\nimg = imread(imgname)\nimg.flags['WRITEABLE']=True\n\nannotated = img.copy()\n\npredictor_path = \"./shape_predictor_68_face_landmarks.dat\"\n\ndetector = dlib.get_frontal_face_detector()\n\npredictor = dlib.shape_predictor(predictor_path)\nfont = cv2.FONT_HERSHEY_SIMPLEX\n\ndets = detector(img, 1)\nprint(\"Number of faces detected: {}\".format(len(dets)))\nfor k, d in enumerate(dets):\n    print(\"Detection {}: Left: {} Top: {} Right: {} Bottom: {}\".format(k, d.left(), d.top(), d.right(), d.bottom()))\n    shape = predictor(img,d)\n    print(\"Part 0: {}, Part 1:{} ...\".format(shape.part(0),shape.part(1)))\n    head_width = shape.part(16).x-shape.part(0).y\n    fontsize = head_width/650\n\n    for pt in range(68):\n        x,y = shape.part(pt).x, shape.part(pt).y\n        annotated = cv2.putText(annotated, str(pt), (x,y), font, fontsize, (255,255,255),2, cv2.LINE_AA)\n\nfigure(figsize = (8,6))\nimshow(annotated)\n```", "```py\nimgname = filedialog.askopenfilename(parent = root,initialdir = os.getcwd(), title = 'Select image file...')\n```", "```py\nimg = imread(imgname)\nimg.flags['WRITEABLE']=True\n```", "```py\nannotated = img.copy()\n```", "```py\npredictor_path = \"./shape_predictor_68_face_landmarks.dat\"\n```", "```py\ndetector = dlib.get_frontal_face_detector()\n```", "```py\npredictor = dlib.shape_predictor(predictor_path)\n```", "```py\nfont = cv2.FONT_HERSHEY_SIMPLEX \n```", "```py\ndets = detector(img,1) \n```", "```py\nprint(\"Number of faces detected: {}\".format(len(dets))) \n```", "```py\n#1 detection = 1 face; iterate over them and display data \nfor k, d in enumerate(dets):\n```", "```py\nprint(\"Detection {}: Left: {} Top:{} Right: {} Bottom: {}\".format( \n   k, d.left(), d.top(), d.right(), d.bottom())) \n```", "```py\nshape = predictor(img, d) \n```", "```py\nprint(\"Part 0: {}, Part 1: {} ...\".format(shape.part(0), shape.part(1))) \n```", "```py\n#We want to scale the font to be in proportion to the head \n#pts 16 and 0 correspond to the extreme points on the right/left side of head \nhead_width = shape.part(16).x-shape.part(0).x \nfontsize = head_width/650 \n```", "```py\nfor pt in range(68); \n   x,y = shape.part(pt).x, shape.part(pt).y \n   annotated=cv2.putText(annotated, str(pt), (x,y), font, fontsize, (255,255,255),2, cv2.LINE_AA) \n```", "```py\nfigure(figsize=(8,6)) \nimshow(annotated) \n```", "```py\n%pylab inline\n%cd /home/test/13293\n\nimport dlib\nimport cv2\nimport os\nimport tkinter\nfrom tkinter import filedialog\nfrom IPython import display\nroot = tkinter.Tk()\nroot.withdraw()\n```", "```py\npredictor_path = \"./shape_predictor_68_face_landmarks.dat\" \ndetector = dlib.get_frontal_face_detector() \npredictor = dlib.shape_predictor(predictor_path) \n```", "```py\ncap = cv2.VideoCapture(0)  \n#0 is the first camera on your computer, change if you have more #than one camera \n```", "```py\ncap = cv2.Videocapture('./rollerc.mp4') \n```", "```py\nfont = cv2.FONT_HERSHEY_SIMPLEX \n```", "```py\nwhile(True): \n   #capture frame-by-frame \nret, img = cap.read \nimg.flags['WRITEABLE']=True #just in case \n```", "```py\ntry: \n   dets = detector(img, 1) \n   shape = predictor(img, dets[0]) \nexcept: \n   print('no face detected', end='\\r') \n   cap.release() \n   break \n```", "```py\nannotated=img.copy() \nhead_width = shape.part(16).x-shape.part(0).x \nfontsize = head_width/650 \nfor pt in range(68): \n   x,y = shape.part(pt).x, shape.part(pt).y \n   annotated=cv2.putText(annotated, str(pt), (x,y), font, fontsize, (255,255,255),2, cv2.LINE_AA) \n\n```", "```py\nfig=imshow(cv2.cvtColor(annotated,cv2.COLOR_BGR2RGB \n```", "```py\n#Prompt the user for two images with one face each \nimgname = filedialog.askopenfilename(parent=root, initialdir='faces', title='First face...') \nface1 = imread(imgname) \nface1.flags['WRITEABLE']=True \n#second face \nimgname = filedialog.askopenfilename(parent=root, initialdir='faces', title='Second face...') \nface2 = imread(imgname) \nface2.flags['WRITEABLE']=True \n```", "```py\npredictor_path = './shape_predictor_5_face_landmarks.dat \nface_rec_model_path= './ dlib_face_recognition_resnet_model_v1.dat \n```", "```py\ndetector = dlib.get_frontal_face_detector() \n```", "```py\nsp = dlib.shape_predictor(predictor_path) \nfacerec = dlib.face_recognition_model_v1(face_rec_model_path) \n```", "```py\ndets1 = detector(face1, 1) \nshape1 = sp(face1, dets1[0]) \ndets2 = detector(face2, 1) \nshape2 = sp(face2, dets2[0])\n```", "```py\nfigure(200) \nsubplot(1,2,1) \nimshow(face1) \nsubplot(1,2,2) \nimshow(face2) \n```", "```py\neuclidean_distance = np.linalg.norm(np.array(face_descriptor1)-np.array(face_descriptor2)) \n```", "```py\nif euclidean_distance<0.6: \n   print('Faces match') \nelse: \n   print('Faces are different') \n```"]