["```py\nCGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -a -tags netgo -ldflags '-w -extldflags \"-static\"' -o mlapp *.go\n```", "```py\nFROM scratch\nADD . /usr/share/app\nENTRYPOINT [\"/usr/share/app/mlapp\"]\n```", "```py\nimport (\n  \"io/ioutil\"\n  linear \"github.com/sjwhitworth/golearn/linear_models\"\n)\n\nfunc Marshal(model *linear.Model) ([]byte, error) {\n  tmpfile, err := ioutil.TempFile(\"\", \"models\")\n  if err != nil {\n    return nil, err\n  }\n  defer os.Remove(tmpfile.Name())\n  if err := linear.Export(model, tmpfile.Name()); err != nil {\n    return nil, err\n  }\n  return ioutil.ReadAll(tmpfile)\n}\n```", "```py\nimport \"github.com/sirupsen/logrus\"\n\nlogrus.SetFormatter(&logrus.JSONFormatter{})\nlogrus.SetReportCaller(true) // Add a field that reports the func name\n```", "```py\nimport \"github.com/sajari/regression\"\nmodel := new(regression.Regression)\n logrus.WithFields(logrus.Fields{ \"model\": \"linear regression\", }).Info(\"Starting training\")\nfor i := range trainingX {\n model.Train(regression.DataPoint(trainingY[i], trainingX[i]))\n}\nif err := model.Run(); err != nil {\n\nlogrus.WithFields(log.Fields{\n \"model\": \"linear regression\",\n \"error\": err.Error(), }).Error(\"Training error\")\n\n}\n logrus.WithFields(logrus.Fields{ \"model\": \"linear regression\", }).Info(\"Finished training\")\n```", "```py\nimport \"github.com/sajari/regression\"\nmodel := new(regression.Regression)\n log.WithFields(log.Fields{ \"model\": \"linear regression\", }).Info(\"Starting training\")\nstart := time.Now()\n\nfor i := range trainingX {\n model.Train(regression.DataPoint(trainingY[i], trainingX[i]))\n}\nif err := model.Run(); err != nil {\nlog.WithFields(log.Fields{ \"model\": \"linear regression\",\n \"error\": err.Error(), }).Error(\"Training error\")\n\n}\nelapsed := time.Since(start)\n log.WithFields(log.Fields{ \"model\": \"linear regression\",\n \"time_taken\": elapsed.Seconds(), }).Info(\"Finished training\")\n```", "```py\ndocker tag f8ab2d331c34 your_aws_account_id.dkr.ecr.region.amazonaws.com/my-ml-app\n```", "```py\ndocker push your_aws_account_id.dkr.ecr.region.amazonaws.com/my-ml-app\n```", "```py\ndocker pull your_aws_account_id.dkr.ecr.region.amazonaws.com/my-ml-app && \\\ndocker run -d your_aws_account_id.dkr.ecr.region.amazonaws.com/my-ml-app\n```", "```py\ndocker login myregistry.azurecr.io\n```", "```py\naz webapp create --resource-group myResourceGroup --plan myAppServicePlan --name <app name> --deployment-container-image-name myregistry.azurecr.io/my-ml-app\n```", "```py\ngcloud auth configure-docker\n```", "```py\ndocker tag quickstart-image gcr.io/[PROJECT-ID]/quickstart-image:tag1\n```", "```py\nfunc (c *NameOfService) NameOfPredictionMethod(input\n     *PredictionMethodInput) (*PredictionMethodOutput, error)\n```", "```py\nfunc (c *Rekognition) DetectFaces(input *DetectFacesInput\n     (*DetectFacesOutput, error)\n```", "```py\npackage main\nimport (\n     \"context\"\n     \"fmt\"\n     \"io/ioutil\"\n     \"log\"\n    texttospeech \"cloud.google.com/go/texttospeech/apiv1\"\n     texttospeechpb \"google.golang.org/genproto/googleapis/cloud/texttospeech/v1\"\n)\nfunc main() {\n     ctx := context.Background()\n    c, err := texttospeech.NewClient(ctx)\n     if err != nil {\n         log.Fatal(err)\n     }\n\n    req := texttospeechpb.SynthesizeSpeechRequest{\n         Input: &texttospeechpb.SynthesisInput{\n     InputSource: &texttospeechpb.SynthesisInput_Text{Text: \"Hello, World!\"},\n     },\n     Voice: &texttospeechpb.VoiceSelectionParams{\n         LanguageCode: \"en-US\",\n         SsmlGender: texttospeechpb.SsmlVoiceGender_NEUTRAL,\n     },\n     AudioConfig: &texttospeechpb.AudioConfig{\n         AudioEncoding: texttospeechpb.AudioEncoding_WAV,\n     },\n }\n    resp, err := c.SynthesizeSpeech(ctx, &req)\n         if err != nil {\n         log.Fatal(err)\n     }\n     filename := \"prediction.wav\"\n     err = ioutil.WriteFile(filename, resp.AudioContent, 0666)\n     if err != nil {\n         log.Fatal(err)\n     }\n}\n```"]