["```py\n$ docker --version\nDocker version 20.10.18, build b40c2f6\n$\n```", "```py\n$ docker run hello-world\nHello from Docker!\nThis message shows that your installation appears to be working correctly.\n:\n:\n```", "```py\nFROM ubuntu\n```", "```py\nFROM centos:7\n```", "```py\n$ docker build –t packt_demo_image ~/\n```", "```py\n$ docker image ls\n```", "```py\n$ docker run packt_demo_image\n```", "```py\n$ docker container ls\n```", "```py\n$ docker ps\n```", "```py\n$ docker volume create customer_management_volume\n```", "```py\n$ docker volume ls\n```", "```py\n$ docker volume inspect customer_management_volume\n[\n    {\n        \"CreatedAt\": \"2022-10-14T22:24:46Z\",\n        \"Driver\": \"local\",\n        \"Labels\": {},\n        \"Mountpoint\": \"/var/lib/docker/volumes/customer_management_volume/_data\",\n        \"Name\": \"customer_management_volume\",\n        \"Options\": {},\n        \"Scope\": \"local\"\n    }\n]\n```", "```py\n$ docker run -itd --mount source=customer_management_volume,target=/app_data --name customer_management_container packt_demo_image\n```", "```py\n$ docker container ls\n```", "```py\n$ curl localhost:8080/hello\n{\"status\":\"pass\",\"version\":\"4.1.0\",\"description\":\"Tyk GW\"}\n```", "```py\n$ docker images\nREPOSITORY                              TAG            IMAGE ID       CREATED         SIZE\nredis                                   6.2.7-alpine   48822f443672   3 days ago      25.5MB\ndocker.tyk.io/tyk-gateway/tyk-gateway   v4.1.0         0c21a95236de   8 weeks ago     341MB\nhello-world                             latest         feb5d9fea6a5   12 months ago   13.3kB\n$\n$ docker container ls\nCONTAINER ID   IMAGE                                          COMMAND                   CREATED          STATUS          PORTS                                        NAMES\nac3ac1802647   docker.tyk.io/tyk-gateway/tyk-gateway:v4.1.0    \"/opt/tyk-gateway/ty…\"   54 minutes ago   Up 54 minutes    0.0.0.0:8080->8080/tcp, :::8080->8080/tcp   tyk-gateway-docker_tyk-gateway_1\n9e0f1ecfb148   redis:6.2.7-alpine                             \"docker-entrypoint.s…\"   54 minutes ago   Up 54 minutes   0.0.0.0:6379->6379/tcp, :::6379->6379/tcp   tyk-gateway-docker_tyk-redis_1\n```", "```py\n# Docker File for \"customer_management\" microservice\nFROM ubuntu\n# Install some dependencies/packages\nRUN apt-get install -y apt-transport-https\nRUN apt-get update\nRUN apt-get install -y net-tools mysql-server python3 pip git build-essential curl wget vim software-properties-common;\n# Install OpenJDK\nRUN apt-get update && \\\n    apt-get install -y default-jdk\nENV JAVA_HOME /usr/lib/jvm/java-11-openjdk-amd64/\n# Install Flask to run our application and respond to API calls\nRUN pip install -U flask\n# Expose port TCP/8080 to listen the container's application/flask API calls\nEXPOSE 8080\n# Create the /app_data directory and make it the working directory in the container\nRUN mkdir /app_data\nWORKDIR /app_data\nENV PATH $PATH:/app_data\n# Download the microservice app code from GitHub repo\nENV GIT_DISCOVERY_ACROSS_FILESYSTEM 1\nRUN git config --global init.defaultBranch main\nRUN git init\nRUN git remote add origin https://github.com/mohameosam/abc_msa.git\nRUN git config core.sparseCheckout true\nRUN echo \"/microservices/customer_management/\" > /app_data/.git/info/sparse-checkout\nRUN git pull origin main\n# Initialize the flask app\nENV FLASK_APP /app_data/microservices/customer_management/customer_management_ms.py\n# Specify a mount point in the container\nVOLUME /app_data\n# Start mysql & flask services and available bash sheel\nRUN chmod +x /app_data/microservices/customer_management/start_services\nCMD /app_data/microservices/customer_management/start_services && bash\n```", "```py\nflask run -h 0.0.0.0 -p 8080 &\nusermod -d /var/lib/mysql/ mysql\nservice mysql start\n```", "```py\n$ docker build -t abc_msa_customer_management ~/\n```", "```py\nSuccessfully tagged abc_msa_customer_management:latest\n```", "```py\n$ docker run -itd -p 8003:8080 --mount source=customer_management_volume,target=/app_data --name customer_management_container abc_msa_customer_management\n```", "```py\n$ docker container ls\n```", "```py\n$ docker exec -u 0 -it customer_management_container bash\n```", "```py\n$ docker run -itd -p 8002:8080 -p 80:80 \\\n--mount source=dashboard_volume,target=/app_data \\\n--name dashboard_container abc_msa_dashboard\n```", "```py\n# Docker Compose File abc_msa.yaml\nversion: \"3.9\"\nservices:\n  customer_management_container:\n    image: abc_msa_customer_management\n    ports:\n      - \"8003:8080\"\n    volumes:\n      - customer_management_volume:/app_data\n  product_management_container:\n    image: abc_msa_product_management\n    ports:\n      - \"8004:8080\"\n    volumes:\n      - product_management_volume:/app_data\n  dashboard:\n    image: abc_msa_dashboard\n    ports:\n      - \"8002:8080\"\n      - \"80:80\"\n    volumes:\n      - dashboard_volume:/app_data\n    depends_on:\n      - customer_management_container\n      - product_management_container\nvolumes:\n  customer_management_volume:\n  product_management_volume:\n  dashboard_volume:\n```", "```py\n$ docker-compose -f abc_msa.yaml up &\n```", "```py\n$ docker network create abc_msa_network\n```", "```py\n$ docker network ls\n```", "```py\n$ docker run -itd -p 8003:8080 \\\n--network abc_msa_network --mount \\\nsource=customer_management_volume,target=/app_data \\\n--name customer_management_container abc_msa_customer_management\n```", "```py\n$ curl http://192.168.1.100:8004/\n<!DOCTYPE html>\n<head>\n   <title>PRODUCT MANAGEMENT Microservice</title>\n</head>\n<body>\n   <h3>Product Management Microservice Part of ABC-MSA System</h3>\n</body>\n```", "```py\n$ curl http://192.168.1.100:8004/api?func=service_info\n{\"service_name\": \"product_management\", \"service_descr\": \"ABC-MSA Product Management\"}\n```", "```py\n$ curl http://172.17.0.4:8080/api?func=service_info\n{\"service_name\": \"product_management\", \"service_descr\": \"ABC-MSA Product Management\"}\n```"]