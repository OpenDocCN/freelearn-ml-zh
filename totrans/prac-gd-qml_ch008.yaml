- en: Chapter 1
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第一章
- en: Foundations of Quantum Computing
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 量子计算基础
- en: '*The beginning is always today.*'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '*开始总是今天。*'
- en: — Mary Shelley
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: ——玛丽·雪莱
- en: You may have heard that the mathematics needed to understand quantum computing
    is arcane, mysterious and difficult…but we utterly disagree! In fact, in this
    chapter, we will introduce all the concepts that you will need in order to follow
    the quantum algorithms that we will be studying in the rest of the book. Actually,
    you may be surprised to see that we will only rely on some linear algebra and
    a bit of (extremely simple) trigonometry.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能听说过，理解量子计算所需的数学是晦涩、神秘且困难的……但我们完全不同意！实际上，在本章中，我们将介绍你为了跟随本书后面将要学习的量子算法所需的所有概念。实际上，你可能会惊讶地发现，我们只会依赖一些线性代数和一点（极其简单的）三角学。
- en: We shall start by giving a quick overview of what quantum computing is, what
    the current state of the art is, and what the main applications are expected to
    be. After that, we will introduce the **model of quantum circuits**. There are
    several computational models for quantum computing, but this is the most popular
    one and, moreover, it’s the one that we will be using throughout most of the book.
    Then, we will describe in detail what qubits are, how we can operate on them by
    using quantum gates, and how we can retrieve results by performing measurements.
    We will start with the simplest possible case — just a humble qubit! Then, we
    will steadily build upon that until we learn how to work with as many qubits as
    we want.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先简要概述量子计算是什么，当前的技术水平如何，以及预期的主要应用是什么。之后，我们将介绍**量子电路模型**。量子计算有几种计算模型，但这是最受欢迎的一个，而且，更重要的是，这是我们将在本书的大部分内容中使用的模型。然后，我们将详细描述量子比特是什么，我们如何通过使用量子门来操作它们，以及我们如何通过执行测量来获取结果。我们将从最简单的情况开始——只是一个谦逊的量子比特！然后，我们将逐步构建，直到我们学会如何处理我们想要的任意数量的量子比特。
- en: 'This chapter will cover the following topics:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: 'Quantum computing: the big picture'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 量子计算：全景
- en: The basics of the quantum circuit model
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 量子电路模型的基本原理
- en: Working with one qubit and the Bloch sphere
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与一个量子比特和布洛赫球一起工作
- en: Working with two qubits and entanglement
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与两个量子比特和纠缠一起工作
- en: Working with multiple qubits and universality
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与多个量子比特和通用性一起工作
- en: After reading this chapter, you will have acquired a solid understanding of
    the fundamentals of quantum computing and you will be more than ready to learn
    how practical quantum algorithms are developed.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在阅读本章后，你将获得对量子计算基础知识的牢固理解，并且将准备好学习如何开发实用的量子算法。
- en: '1.1 Quantum computing: the big picture'
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1.1 量子计算：全景
- en: In October 2019, an announcement made by a team of researchers from Google took
    the scientific world by storm. For the first time ever, a practical demonstration
    of quantum computational advantage had been shown. The results, published in the
    prestigious Nature journal [[9](ch030.xhtml#Xarute2019quantum)], reported that
    a quantum computer had solved, in just a few minutes, a problem that would have
    taken the most powerful classical supercomputer in the world thousands of years.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 2019年10月，谷歌研究团队发布的一项公告震惊了科学界。这是首次展示了量子计算优势的实用演示。发表在享有盛誉的《自然》杂志[[9](ch030.xhtml#Xarute2019quantum)]上的结果报告称，一台量子计算机仅用几分钟就解决了需要世界上最强大的经典超级计算机数千年才能解决的问题。
- en: Although the task solved by the quantum computer has no direct practical applications
    and it was later claimed that the computing time with classical resources had
    been overestimated (see [[75](ch030.xhtml#Xpednault2019quantum)] and, also, [[73](ch030.xhtml#Xpan2022solving)]),
    this feat remains a milestone in the history of computing and has fueled interest
    in quantum computing all over the world. So, what can these mysterious quantum
    computers do? How do they work in order to achieve these mind-blowing speed-ups?
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然量子计算机解决的问题没有直接的实际应用，后来也有人声称使用经典资源所需的计算时间被高估了（参见[[75](ch030.xhtml#Xpednault2019quantum)]和，也参见[[73](ch030.xhtml#Xpan2022solving)]），但这项成就仍然是计算史上的一个里程碑，并在全世界范围内激发了人们对量子计算的兴趣。那么，这些神秘的量子计算机能做什么？它们是如何工作的，才能实现这些令人惊叹的加速？
- en: We could define quantum computing as the study of the application of properties
    of quantum systems (such as superposition, entanglement, and interference) to
    accelerate some computational tasks. These properties do not manifest in our macroscopic
    world and, although they are present at the fundamental level in our computing
    devices, they are not explicitly used in the traditional computing models that
    we employ to build our microprocessors and to design our algorithms. For this
    reason, quantum computers behave in a radically different way to classical computers,
    making it possible to solve some tasks much more efficiently than with traditional
    computing devices.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将量子计算定义为研究量子系统（如叠加、纠缠和干涉）的性质在加速某些计算任务中的应用。这些性质在我们的宏观世界中并不显现，尽管它们在我们的计算设备的基本层面上存在，但它们并没有在传统的计算模型中明确使用，这些模型是我们用来构建微处理器和设计算法的。因此，量子计算机的行为与经典计算机截然不同，这使得解决某些任务比使用传统计算设备更加高效。
- en: The most famous problem for which quantum algorithms offer a huge advantage
    over classical methods is finding prime factors of big integers. The best known
    classical algorithm for this task requires an amount of time that grows almost
    exponentially with the length of the number (see *Appendix* *[*C*](ch026.xhtml#x1-233000C),
    *Computational Complexity*, for all the concepts referred to computational complexity,
    including exponential growth). Thus, factoring numbers that are several thousand
    bits long becomes infeasible with classical computers, and this inefficiency is
    the basis for some widely used cryptographic protocols, such as RSA, proposed
    by Rivest, Shamir, and Adleman [[80](ch030.xhtml#Xrivest1978method)].*
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 量子算法在解决经典方法无法解决的某些问题方面具有巨大优势的最著名问题之一是找到大整数的质因数。为此任务而知的最佳经典算法所需的时间几乎与数字的长度呈指数增长（参见*附录*
    *[*C*](ch026.xhtml#x1-233000C)，*计算复杂性*，其中所有涉及计算复杂性的概念，包括指数增长）。因此，用经典计算机分解几千位长的数字变得不可行，这种低效性是某些广泛使用的加密协议（如由Rivest、Shamir和Adleman提出的RSA[[80](ch030.xhtml#Xrivest1978method)]）的基础。*
- en: '*Nevertheless, more than twenty years ago, the mathematician Peter Shor proved
    in a celebrated paper [[87](ch030.xhtml#Xshor99polynomial)] that a quantum computer
    could factor numbers taking an amount of time that no longer grows exponentially
    with the size of the input, but only polynomially. Other examples in which quantum
    algorithms outperform classical ones include finding elements satisfying a given
    condition from an unsorted list (with Grover’s algorithm [[48](ch030.xhtml#Xgrover1996fast)])
    or sampling from the solutions of systems of linear equations (using the famous
    HHL algorithm [[49](ch030.xhtml#Xharrow2009quantum)]).'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '*尽管如此，二十多年前，数学家彼得·肖尔在一篇著名的论文[[87](ch030.xhtml#Xshor99polynomial)]中证明了，量子计算机可以在不随输入大小呈指数增长的时间内分解数字，而是仅以多项式时间进行。其他量子算法优于经典算法的例子包括从未排序的列表中找到满足给定条件的元素（使用Grover算法[[48](ch030.xhtml#Xgrover1996fast)])或从线性方程组的解中采样（使用著名的HHL算法[[49](ch030.xhtml#Xharrow2009quantum)])。*'
- en: Wonderful as the properties of these quantum algorithms are, they require quantum
    computers that are fault tolerant and more powerful than those available today.
    This is why, in the last few years, many researchers have focused on studying
    quantum algorithms that try to obtain some advantage with the noisy intermediate-scale
    quantum computers, also known as **NISQ** **devices**, that are at our disposal
    now. The **NISQ** name was coined by John Preskill in a greatly enjoyable article
    [[78](ch030.xhtml#Xpreskill2018quantum)] and has been widely adopted to describe
    the *evolutionary stage* in which quantum hardware currently is.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这些量子算法的特性非常出色，但它们需要比目前可用的量子计算机更强大且容错的量子计算机。这就是为什么在过去的几年里，许多研究人员专注于研究量子算法，这些算法试图在现在可用的噪声中等规模量子计算机（也称为**NISQ**
    **设备**)上获得一些优势。**NISQ**这个名字是由约翰·普雷斯凯尔在一篇非常有趣的文章[[78](ch030.xhtml#Xpreskill2018quantum)]中提出的，并且已被广泛采用来描述量子硬件目前所处的*进化阶段*。
- en: Machine learning and optimization are two of the fields that are being actively
    explored in this NISQ era. In these areas, many interesting algorithms have been
    proposed in recent years; some examples are the **Quantum** **Approximate Optimization
    Algorithm** (**QAOA**), the **Variational** **Quantum Eigensolver** (**VQE**),
    or different quantum flavors of machine learning models, including **Quantum Support
    Vector Machines** (**QSVMs**) and **Quantum Neural Networks** (**QNNs**).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 机器学习和优化是NISQ时代正在积极探索的两个领域。在这些领域，近年来已经提出了许多有趣的算法；一些例子包括**量子** **近似优化算法**（**QAOA**）、**变分**
    **量子本征值求解器**（**VQE**）或不同的量子机器学习模型，包括**量子支持向量机**（**QSVMs**）和**量子神经网络**（**QNNs**）。
- en: Since these algorithms are fairly new, we still lack a complete understanding
    of their full capabilities. However, some partial theoretical results show some
    evidence that these approaches can offer some advantages over what is possible
    with classical computers, for instance, by giving us better approximations to
    the solutions of hard **combinatorial optimization** **problems** or by showing
    better performance when learning from particular **datasets**.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这些算法相对较新，我们仍然缺乏对其全部能力的完整理解。然而，一些部分理论结果显示了一些证据，表明这些方法可以提供一些优于经典计算机的优势，例如，通过提供更好的**组合优化**
    **问题**的近似解，或者在学习特定**数据集**时表现出更好的性能。
- en: Exploring the real possibilities of these NISQ computers and the algorithms
    designed to take advantage of them will be crucial in the short and medium term,
    and it may very likely pave the way for the first practical applications of quantum
    computing to real-world problems.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 探索这些NISQ计算机的真正可能性以及设计来利用它们的算法，在短期和中期内将是至关重要的，并且很可能为量子计算在现实世界问题上的首次实际应用铺平道路。
- en: We believe that you can be part of the exciting task of making quantum computing
    applications a reality and we would like to help you on that journey. But, for
    that, we need to start by setting in place the tools that we will be using throughout
    the book.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们相信您能够参与到将量子计算应用变为现实这一激动人心的任务中来，并且我们愿意帮助您在这段旅程中。但是，为了做到这一点，我们需要首先建立我们将在这本书中使用的工具。
- en: If you are already familiar with the quantum circuit model, you can skip the
    rest of this chapter. However, we recommend that you at least skim through the
    following sections so that you can get familiar with the conventions and choices
    of notation that we will use in this book.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经熟悉量子电路模型，您可以跳过本章的剩余部分。然而，我们建议您至少浏览以下部分，以便您能够熟悉我们将在这本书中使用的约定和符号选择。
- en: 1.2 The basics of the quantum circuit model
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1.2 量子电路模型的基本原理
- en: We have mentioned that quantum computing relies on quantum phenomena such as
    **superposition**, **entanglement**, and **interference** to perform computations.
    But what does this really mean? To make this explicit, we need to define a particular
    computational model that allow us to describe mathematically how to take advantage
    of all these properties.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们提到，量子计算依赖于量子现象，如**叠加**、**纠缠**和**干涉**来执行计算。但这究竟意味着什么呢？为了使这一点明确，我们需要定义一个特定的计算模型，使我们能够从数学上描述如何利用所有这些属性。
- en: There are many such models, including **quantum Turing machines**, **measurement-based
    quantum computing** (also known as **one-way** **quantum computing**), or **adiabatic
    quantum computing**, and all of them are equivalent in power. However, the most
    popular one — and the one that we will be using for the most part in the book
    — is the **quantum circuit** **model**.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多这样的模型，包括**量子图灵机**、**基于测量的量子计算**（也称为**单向** **量子计算**）或**绝热量子计算**，它们在能力上都是等效的。然而，最受欢迎的一个——也是我们将在本书的大部分内容中使用的一个——是**量子电路**
    **模型**。
- en: To learn more…
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多...
- en: In addition to the quantum circuit model, sometimes we will also use the adiabatic
    model. All the necessary concepts will be introduced in *Chapter* *[*4*](ch012.xhtml#x1-750004),
    *Quantum Adiabatic Computing and Quantum Annealing*.*
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 除了量子电路模型之外，有时我们也会使用绝热模型。所有必要的概念都将在第 *[*4*](ch012.xhtml#x1-750004) 章，*量子绝热计算与量子退火*中介绍。
- en: '*Every computation has three elements: **data**, **operations**, and **output**.
    In the quantum circuit model, these correspond to some concepts that you may have
    already heard about: **qubits**, **quantum gates**, and **measurements**. Through
    the remainder of this chapter, we will briefly review all of them, highlighting
    some special details that will be of particular importance when talking about
    quantum machine learning and quantum optimization algorithms; at the same time,
    we will show the notation that will be used throughout the book. But before committing
    to that, let us have a quick overview of what a **quantum circuit** is.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '*每个计算有三个元素：**数据**、**操作**和**输出**。在量子电路模型中，这些对应于你可能已经听说过的概念：**量子比特**、**量子门**和**测量**。在本章的剩余部分，我们将简要回顾所有这些概念，突出一些在讨论量子机器学习和量子优化算法时特别重要的细节；同时，我们将展示本书中将使用的符号。但在我们做出承诺之前，让我们快速概述一下**量子电路**是什么。'
- en: Let’s have a look at *Figure* *[*1.1*](#Figure1.1). It shows a simple quantum
    circuit. The three horizontal lines that you see are sometimes called **wires**,
    and they represent the qubits that we are working with. Thus, in this case, we
    have three qubits. The circuit is meant to be read from left to right, and it
    represents all the different operations that are performed on the qubits. It is
    customary to assume that, at the very beginning, all the qubits are in state ![\left|
    0 \right\rangle](img/file6.png "\left| 0 \right\rangle"). You do not need to worry
    yet about what ![\left| 0 \right\rangle](img/file6.png "\left| 0 \right\rangle")
    means, but please notice how we have indicated that this is indeed the initial
    state of all the wires by writing ![\left| 0 \right\rangle](img/file6.png "\left|
    0 \right\rangle") to the left of each of them.*
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看*图*[*1.1*](#Figure1.1)。它展示了一个简单的量子电路。你看到的这三条水平线有时被称为**线**，它们代表我们正在处理的量子比特。因此，在这种情况下，我们有三个量子比特。电路的阅读顺序是从左到右，它代表了在量子比特上执行的所有不同操作。通常假设，在最开始时，所有量子比特都处于状态![\left|
    0 \right\rangle](img/file6.png "\left| 0 \right\rangle")。你目前不需要担心![\left| 0 \right\rangle](img/file6.png
    "\left| 0 \right\rangle")的含义，但请注意，我们通过在每个线的左侧写上![\left| 0 \right\rangle](img/file6.png
    "\left| 0 \right\rangle")来表示这确实是所有线的初始状态。
- en: '*![Figure 1.1: An example of a simple quantum circuit.](img/file7.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '*![图1.1：一个简单量子电路的示例。](img/file7.jpg)'
- en: '**Figure 1.1**: An example of a simple quantum circuit.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**图1.1**：一个简单量子电路的示例。'
- en: In that circuit, we start by applying an operation called a ![Z](img/file8.png
    "Z") gate on the top qubit; we will explain in the next section what all of these
    operations do, but note that we represent them with little boxes with the name
    of the operation inside. After that initial ![Z](img/file8.png "Z") gate, we apply
    individual gates ![X](img/file9.png "X"), ![H](img/file10.png "H"), and ![Y](img/file11.png
    "Y") on the top, middle, and bottom qubits and, then, a two-qubit gate on the
    top and middle qubits followed by a three-qubit gate, which acts on all the qubits
    at the same time. Finally, we measure the top and bottom qubits (we will get to
    measurements in the next section, don’t worry), and we represent this in the circuit
    using the **gauge symbol**. Notice that, after these measurements, the wires are
    represented with double lines, to indicate that we have obtained a result — technically,
    we say that the state of the qubit has **collapsed** to a classical value. This
    means that, from this point on, we do not have quantum data anymore, only classical
    bits. This collapse may seem a little bit mysterious (it is!), but don’t worry.
    In the next section, we will explain in detail the process by which quantum information
    (qubits) is transformed into classical data (bits).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在那个电路中，我们首先在顶部的量子比特上应用一个称为![Z](img/file8.png "Z")门的操作；我们将在下一节解释所有这些操作的作用，但请注意，我们用带有操作名称的小方块来表示它们。在初始的![Z](img/file8.png
    "Z")门之后，我们在顶部、中间和底部的量子比特上分别应用![X](img/file9.png "X")、![H](img/file10.png "H")和![Y](img/file11.png
    "Y")门，然后是一个作用于顶部和中间量子比特的两量子比特门，接着是一个作用于所有量子比特的三量子比特门。最后，我们测量顶部和底部的量子比特（我们将在下一节介绍测量，不用担心），我们使用**仪表符号**来表示这一点。请注意，在这些测量之后，线用双线表示，以表明我们已经得到了一个结果——技术上，我们说量子比特的状态已经**坍缩**到一个经典值。这意味着从这一点开始，我们不再有量子数据，只有经典比特。这种坍缩可能有点神秘（确实是！），但不用担心。在下一节中，我们将详细解释量子信息（量子比特）如何转换为经典数据（比特）的过程。
- en: As you may have noticed, quantum circuits are somewhat similar to digital ones,
    in which we have wires representing bits and different logical gates such as **AND**,
    **OR**, and **NOT** acting on them. However, our qubits, quantum gates, and measurements
    obey the rules of quantum mechanics and show some properties that are not found
    in classical circuits. The rest of this chapter is devoted to explaining all of
    this in detail, starting with the simplest of cases, that of a single qubit, but
    growing all the way up to fully-fledged quantum circuits that can use as many
    qubits and gates as desired.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所注意到的，量子电路在某种程度上类似于数字电路，其中我们有代表比特的线以及不同的逻辑门，如**AND**、**OR**和**NOT**作用于它们。然而，我们的量子比特、量子门和测量遵循量子力学的规则，并显示出一些在经典电路中找不到的性质。本章的其余部分致力于详细解释所有这些内容，从最简单的情况，即单个量子比特的情况开始，一直扩展到可以使用所需数量量子比特和门的完整量子电路。
- en: Ready? Let’s start, then!
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 准备好了吗？那么，让我们开始吧！
- en: 1.3 Working with one qubit and the Bloch sphere
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1.3 使用一个量子比特和布洛赫球体
- en: One of the advantages of using a computational model is that you can forget
    about the particularities of the physical implementation of your computer and
    focus instead on the properties of the elements on which you store information
    and the operations you can perform on them. For instance, we could define a qubit
    as a (physical) quantum system that is capable of being in two different states.
    In practice, it could be a photon with two possible polarizations, a particle
    with two possible values for its spin, or a superconducting circuit, whose current
    can be flowing in one of two directions. When using the quantum circuit model,
    we can forget about those implementation details and just define a qubit…as a
    mathematical vector!
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 使用计算模型的一个优点是，你可以忘记你计算机物理实现的特殊性，而专注于你存储信息元素的性质以及你可以对这些元素执行的操作。例如，我们可以定义量子比特为一个（物理）量子系统，它能够处于两种不同的状态。在实践中，它可能是一个具有两种可能偏振的光子，一个具有两种可能自旋值的粒子，或者一个电流可以沿两个方向流动的超导电路。当使用量子电路模型时，我们可以忘记这些实现细节，只需定义量子比特…作为一个数学向量！
- en: 1.3.1 What is a qubit?
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.3.1 什么是量子比特？
- en: In fact, a **qubit** (short for **quantum bit**, sometimes also written as **qbit**,
    **Qbit** or even **q-bit**) is the minimal information unit in quantum computing.
    In the same way that a **bit** (short for **binary digit**) can be in state ![0](img/file12.png
    "0") or in state ![1](img/file13.png "1"), a qubit can be in state ![\left| 0
    \right\rangle](img/file6.png "\left| 0 \right\rangle") or in state ![\left| 1
    \right\rangle](img/file14.png "\left| 1 \right\rangle"). Here, we are using the
    so-called **Dirac notation**, where these funny-looking symbols surrounding ![0](img/file12.png
    "0") and ![1](img/file13.png "1") are called **kets** and are used to indicate
    that we are dealing with vectors instead of regular numbers. In fact, ![\left|
    0 \right\rangle](img/file6.png "\left| 0 \right\rangle") and ![\left| 1 \right\rangle](img/file14.png
    "\left| 1 \right\rangle") are not the only possibilities for the state of a qubit
    and, in general, it could be in a **superposition** of the form
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，**量子比特**（简称**量子位**，有时也写作**qbit**、**Qbit**或甚至**q-bit**）是量子计算中的最小信息单位。就像**比特**（简称**二进制位**）可以处于状态![0](img/file12.png
    "0")或状态![1](img/file13.png "1")一样，量子比特可以处于状态 ![\left| 0 \right\rangle](img/file6.png
    "\left| 0 \right\rangle") 或状态 ![\left| 1 \right\rangle](img/file14.png "\left|
    1 \right\rangle")。在这里，我们使用所谓的**狄拉克符号**，其中围绕![0](img/file12.png "0")和![1](img/file13.png
    "1")的这些看起来很奇怪的符号被称为**基**，用于表示我们处理的是向量而不是常规数字。实际上，![\left| 0 \right\rangle](img/file6.png
    "\left| 0 \right\rangle")和![\left| 1 \right\rangle](img/file14.png "\left| 1 \right\rangle")并不是量子比特状态的唯一可能性，在一般情况下，它可能处于以下形式的**叠加**状态
- en: '![a\left| 0 \right\rangle + b\left| 1 \right\rangle,](img/file15.png "a\left|
    0 \right\rangle + b\left| 1 \right\rangle,")'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![a\left| 0 \right\rangle + b\left| 1 \right\rangle,](img/file15.png "a\left|
    0 \right\rangle + b\left| 1 \right\rangle,")'
- en: where ![a](img/file16.png "a") and ![b](img/file17.png "b") are complex numbers,
    called **amplitudes**, such that ![|a|^{2} + |b|^{2} = 1](img/file18.png "|a|^{2}
    + |b|^{2} = 1"). The quantity ![\sqrt{|a|^{2} + |b|^{2}}](img/file19.png "\sqrt{|a|^{2}
    + |b|^{2}}") is called the **norm** or **length** of the state and, when it is
    equal to ![1](img/file13.png "1"), we say that the state is **normalized**.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 其中 ![a](img/file16.png "a") 和 ![b](img/file17.png "b") 是复数，称为**振幅**，满足 ![|a|^{2}
    + |b|^{2} = 1](img/file18.png "|a|^{2} + |b|^{2} = 1")。量 ![\sqrt{|a|^{2} + |b|^{2}}](img/file19.png
    "\sqrt{|a|^{2} + |b|^{2}}") 被称为状态的**范数**或**长度**，当它等于 ![1](img/file13.png "1")
    时，我们说该状态是**归一化**的。
- en: To learn more…
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多...
- en: If you need a refresher on complex numbers or vector spaces, please check *Appendix*
    *[*A*](ch024.xhtml#x1-225000A), *Complex Numbers*, and *Appendix* *[*B*](ch025.xhtml#x1-226000B),
    *Basic Linear* *Algebra*.**
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要复习复数或向量空间，请参阅**附录** **[*A*](ch024.xhtml#x1-225000A)，**复数**，以及**附录** **[*B*](ch025.xhtml#x1-226000B)，**基础线性**
    **代数**。
- en: '**All these possible values for the state of a single qubit are vectors that
    live in a complex vector space of dimension 2 (in fact, they live in what is called
    a **Hilbert space**, but since we will be working only with finite dimensions,
    there is no real difference). Thus we shall fix the vectors ![\left| 0 \right\rangle](img/file6.png
    "\left| 0 \right\rangle") and ![\left| 1 \right\rangle](img/file14.png "\left|
    1 \right\rangle") as elements of a special **basis**, which we will refer to as
    the **computational basis**. We will represent these vectors, constituents of
    the computational basis, as the column vectors'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '**所有这些单个量子比特的状态的可能值都是存在于二维复向量空间中的向量（实际上，它们存在于所谓的**希尔伯特空间**中，但由于我们只会在有限维度上工作，所以实际上没有真正的区别）。因此，我们将向量
    ![\left| 0 \right\rangle](img/file6.png "\left| 0 \right\rangle") 和 ![\left| 1
    \right\rangle](img/file14.png "\left| 1 \right\rangle") 固定为一个特殊**基**的元素，我们将称之为**计算基**。我们将这些计算基的组成部分表示为列向量'
- en: '![\left| 0 \right\rangle = \begin{pmatrix} 1 \\ 0 \\ \end{pmatrix},\qquad\left|
    1 \right\rangle = \begin{pmatrix} 0 \\ 1 \\ \end{pmatrix}](img/file20.png "\left|
    0 \right\rangle = \begin{pmatrix} 1 \\ 0 \\ \end{pmatrix},\qquad\left| 1 \right\rangle
    = \begin{pmatrix} 0 \\ 1 \\ \end{pmatrix}")'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![\left| 0 \right\rangle = \begin{pmatrix} 1 \\ 0 \\ \end{pmatrix},\qquad\left|
    1 \right\rangle = \begin{pmatrix} 0 \\ 1 \\ \end{pmatrix}](img/file20.png "\left|
    0 \right\rangle = \begin{pmatrix} 1 \\ 0 \\ \end{pmatrix},\qquad\left| 1 \right\rangle
    = \begin{pmatrix} 0 \\ 1 \\ \end{pmatrix}")'
- en: and hence
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 因此
- en: '![a\left| 0 \right\rangle + b\left| 1 \right\rangle = a\begin{pmatrix} 1 \\
    0 \\ \end{pmatrix} + b\begin{pmatrix} 0 \\ 1 \\ \end{pmatrix} = \begin{pmatrix}
    a \\ b \\ \end{pmatrix}.](img/file21.png "a\left| 0 \right\rangle + b\left| 1
    \right\rangle = a\begin{pmatrix} 1 \\ 0 \\ \end{pmatrix} + b\begin{pmatrix} 0
    \\ 1 \\ \end{pmatrix} = \begin{pmatrix} a \\ b \\ \end{pmatrix}.")'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![a\left| 0 \right\rangle + b\left| 1 \right\rangle = a\begin{pmatrix} 1 \\
    0 \\ \end{pmatrix} + b\begin{pmatrix} 0 \\ 1 \\ \end{pmatrix} = \begin{pmatrix}
    a \\ b \\ \end{pmatrix}.](img/file21.png "a\left| 0 \right\rangle + b\left| 1
    \right\rangle = a\begin{pmatrix} 1 \\ 0 \\ \end{pmatrix} + b\begin{pmatrix} 0
    \\ 1 \\ \end{pmatrix} = \begin{pmatrix} a \\ b \\ \end{pmatrix}.")'
- en: 'If we are given a qubit and we want to determine or, rather, estimate its state,
    all we can do is perform a measurement and get one of two possible results: 0
    or 1\. We have nonetheless seen how a qubit can be in infinitely many states,
    so how does the state of a qubit determine the outcome of a measurement? As you
    likely already know, in quantum physics, these measurements are not deterministic,
    but probabilistic. In particular, given any qubit ![a\left| 0 \right\rangle +
    b\left| 1 \right\rangle](img/file22.png "a\left| 0 \right\rangle + b\left| 1 \right\rangle"),
    the probability of getting ![0](img/file12.png "0") upon a measurement is ![|a|^{2}](img/file23.png
    "|a|^{2}"), while that of getting ![1](img/file13.png "1") is ![|b|^{2}](img/file24.png
    "|b|^{2}"). Naturally, these two probabilities must add up to 1, hence the need
    for the **normalization** **condition** ![|a|^{2} + |b|^{2} = 1](img/file18.png
    "|a|^{2} + |b|^{2} = 1").'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们被给定一个量子比特，并且想要确定或，更确切地说，估计其状态，我们能做的只是进行测量，并得到两种可能的结果之一：0 或 1。然而，我们已经看到量子比特可以处于无限多种状态，那么量子比特的状态是如何决定测量结果的呢？正如你可能已经知道的，在量子物理学中，这些测量不是确定的，而是概率性的。特别是，对于任何量子比特
    ![a\left| 0 \right\rangle + b\left| 1 \right\rangle](img/file22.png "a\left| 0
    \right\rangle + b\left| 1 \right\rangle")，测量得到 ![0](img/file12.png "0") 的概率是 ![|a|^{2}](img/file23.png
    "|a|^{2}"), 而得到 ![1](img/file13.png "1") 的概率是 ![|b|^{2}](img/file24.png "|b|^{2}").
    自然地，这两个概率必须加起来等于 1，因此需要满足**归一化** **条件** ![|a|^{2} + |b|^{2} = 1](img/file18.png
    "|a|^{2} + |b|^{2} = 1").
- en: If upon measuring a qubit we get, let’s say, ![0](img/file12.png "0"), we then
    know that, after the measurement, the state of the qubit is ![\left| 0 \right\rangle](img/file6.png
    "\left| 0 \right\rangle"), and we say that the qubit has **collapsed** into that
    state. If we obtain ![1](img/file13.png "1"), the state collapses to ![\left|
    1 \right\rangle](img/file14.png "\left| 1 \right\rangle"). Since we are obtaining
    results that correspond to ![\left| 0 \right\rangle](img/file6.png "\left| 0 \right\rangle")
    and ![\left| 1 \right\rangle](img/file14.png "\left| 1 \right\rangle"), we say
    that we are **measuring in the computational basis**.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在测量一个量子比特后，我们得到，比如说，![0](img/file12.png "0")，那么我们就知道，在测量之后，量子比特的状态是![|0\rangle](img/file6.png
    "|0\rangle")，我们说量子比特已经**坍缩**到这个状态。如果我们得到![1](img/file13.png "1")，状态就坍缩到![|1\rangle](img/file14.png
    "|1\rangle")。由于我们得到的结果对应于![|0\rangle](img/file6.png "|0\rangle")和![|1\rangle](img/file14.png
    "|1\rangle")，我们说我们在**计算基**下进行测量。
- en: Exercise 1.1
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 练习1.1
- en: What is the probability of measuring 0 if the state of a qubit is ![\sqrt{\left.
    1\slash 2 \right.}\left| 0 \right\rangle + \sqrt{\left. 1\slash 2 \right.}\left|
    1 \right\rangle](img/file25.png "\sqrt{\left. 1\slash 2 \right.}\left| 0 \right\rangle
    + \sqrt{\left. 1\slash 2 \right.}\left| 1 \right\rangle")? And the probability
    of measuring 1? What if the state of the qubit is ![\sqrt{\left. 1\slash 3 \right.}\left|
    0 \right\rangle + \sqrt{\left. 2\slash 3 \right.}\left| 1 \right\rangle](img/file26.png
    "\sqrt{\left. 1\slash 3 \right.}\left| 0 \right\rangle + \sqrt{\left. 2\slash
    3 \right.}\left| 1 \right\rangle")? And if it is ![\sqrt{\left. 1\slash 2 \right.}\left|
    0 \right\rangle - \sqrt{\left. 1\slash 2 \right.}\left| 1 \right\rangle](img/file27.png
    "\sqrt{\left. 1\slash 2 \right.}\left| 0 \right\rangle - \sqrt{\left. 1\slash
    2 \right.}\left| 1 \right\rangle")?
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个量子比特的状态是 ![sqrt{1/2}|0\rangle + sqrt{1/2}|1\rangle](img/file25.png "\sqrt{1/2}|0\rangle
    + \sqrt{1/2}|1\rangle")，那么测量得到0的概率是多少？测量得到1的概率又是多少？如果量子比特的状态是 ![sqrt{1/3}|0\rangle
    + sqrt{2/3}|1\rangle](img/file26.png "\sqrt{1/3}|0\rangle + \sqrt{2/3}|1\rangle")呢？如果它是
    ![sqrt{1/2}|0\rangle - sqrt{1/2}|1\rangle](img/file27.png "\sqrt{1/2}|0\rangle
    - \sqrt{1/2}|1\rangle")呢？
- en: So a qubit is, mathematically, just a 2-dimensional vector that satisfies a
    normalization condition. Who could have known? But the surprises do not end here.
    In the next subsection, we will see how we can use those funny-looking kets to
    compute inner products in a very easy way.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，从数学上讲，量子比特只是一个满足归一化条件的二维向量。谁能想到呢？但惊喜还没有结束。在下一小节中，我们将看到我们如何使用那些看起来很奇怪的矢量以非常简单的方式计算内积。
- en: 1.3.2 Dirac notation and inner products
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.3.2狄拉克符号和内积
- en: Dirac notation can not only be used for column vectors, but also for row vectors.
    In that case, we talk of **bras**, which, together with kets, can be used to form
    **bra-kets**. This name is a pun, because, as we are about to show, bra-kets are,
    in fact, inner products that are written — you guessed it — between brackets.
    To be more mathematically precise, with each ket we can associate a bra that is
    its **adjoint** or **conjugate** **transpose** or **Hermitian transpose**. In
    order to obtain this adjoint, we take the ket’s column vector, we transpose it
    and conjugate each of its coordinates (which are, as we already know, complex
    numbers). We use ![\left\langle 0 \right|](img/file28.png "\left\langle 0 \right|")
    to denote the bra associated with ![\left| 0 \right\rangle](img/file6.png "\left|
    0 \right\rangle") and ![\left\langle 1 \right|](img/file29.png "\left\langle 1
    \right|") to denote the bra associated with ![\left| 1 \right\rangle](img/file14.png
    "\left| 1 \right\rangle"), so we have
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 狄拉克符号不仅可以用于列向量，也可以用于行向量。在这种情况下，我们谈论**内积**，它与**矢量**一起可以用来形成**内积对**。这个名字是一个双关语，因为正如我们即将展示的，内积对实际上是写成——你猜对了——括号之间的内积。为了更精确地数学上描述，我们可以与每个矢量关联一个**共轭转置**或**厄米转置**的**伴随**或**共轭**。为了获得这个伴随，我们取矢量的列向量，将其转置并对其每个坐标（正如我们已知，它们是复数）进行共轭。我们用![\left\langle
    0 \right|](img/file28.png "\left\langle 0 \right|")来表示与![\left| 0 \right\rangle](img/file6.png
    "\left| 0 \right\rangle")关联的伴随，用![\left\langle 1 \right|](img/file29.png "\left\langle
    1 \right|")来表示与![\left| 1 \right\rangle](img/file14.png "\left| 1 \right\rangle")关联的伴随，所以我们有
- en: '![\left\langle 0 \right| = \left| 0 \right\rangle^{\dagger} = \begin{pmatrix}
    1 \\ 0 \\ \end{pmatrix}^{\dagger} = \begin{pmatrix} 1 & 0 \\ \end{pmatrix},\qquad\left\langle
    1 \right| = \left| 1 \right\rangle^{\dagger} = \begin{pmatrix} 0 \\ 1 \\ \end{pmatrix}^{\dagger}
    = \begin{pmatrix} 0 & 1 \\ \end{pmatrix}](img/file30.png "\left\langle 0 \right|
    = \left| 0 \right\rangle^{\dagger} = \begin{pmatrix} 1 \\ 0 \\ \end{pmatrix}^{\dagger}
    = \begin{pmatrix} 1 & 0 \\ \end{pmatrix},\qquad\left\langle 1 \right| = \left|
    1 \right\rangle^{\dagger} = \begin{pmatrix} 0 \\ 1 \\ \end{pmatrix}^{\dagger}
    = \begin{pmatrix} 0 & 1 \\ \end{pmatrix}")'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![\left\langle 0 \right| = \left| 0 \right\rangle^{\dagger} = \begin{pmatrix}
    1 \\ 0 \\ \end{pmatrix}^{\dagger} = \begin{pmatrix} 1 & 0 \\ \end{pmatrix},\qquad\left\langle
    1 \right| = \left| 1 \right\rangle^{\dagger} = \begin{pmatrix} 0 \\ 1 \\ \end{pmatrix}^{\dagger}
    = \begin{pmatrix} 0 & 1 \\ \end{pmatrix}](img/file30.png "\left\langle 0 \right|
    = \left| 0 \right\rangle^{\dagger} = \begin{pmatrix} 1 \\ 0 \\ \end{pmatrix}^{\dagger}
    = \begin{pmatrix} 1 & 0 \\ \end{pmatrix},\qquad\left\langle 1 \right| = \left|
    1 \right\rangle^{\dagger} = \begin{pmatrix} 0 \\ 1 \\ \end{pmatrix}^{\dagger}
    = \begin{pmatrix} 0 & 1 \\ \end{pmatrix}")'
- en: and, in general,
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 并且，一般来说，
- en: '![a\left\langle 0 \right| + b\left\langle 1 \right| = a\left| 0 \right\rangle^{\dagger}
    + b\left| 1 \right\rangle^{\dagger} = a\begin{pmatrix} 1 & 0 \\ \end{pmatrix}
    + b\begin{pmatrix} 0 & 1 \\ \end{pmatrix} = \begin{pmatrix} a & b \\ \end{pmatrix},](img/file31.png
    "a\left\langle 0 \right| + b\left\langle 1 \right| = a\left| 0 \right\rangle^{\dagger}
    + b\left| 1 \right\rangle^{\dagger} = a\begin{pmatrix} 1 & 0 \\ \end{pmatrix}
    + b\begin{pmatrix} 0 & 1 \\ \end{pmatrix} = \begin{pmatrix} a & b \\ \end{pmatrix},")'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![a\left\langle 0 \right| + b\left\langle 1 \right| = a\left| 0 \right\rangle^{\dagger}
    + b\left| 1 \right\rangle^{\dagger} = a\begin{pmatrix} 1 & 0 \\ \end{pmatrix}
    + b\begin{pmatrix} 0 & 1 \\ \end{pmatrix} = \begin{pmatrix} a & b \\ \end{pmatrix},](img/file31.png
    "a\left\langle 0 \right| + b\left\langle 1 \right| = a\left| 0 \right\rangle^{\dagger}
    + b\left| 1 \right\rangle^{\dagger} = a\begin{pmatrix} 1 & 0 \\ \end{pmatrix}
    + b\begin{pmatrix} 0 & 1 \\ \end{pmatrix} = \begin{pmatrix} a & b \\ \end{pmatrix},")'
- en: where, as it is customary, we use the dagger symbol (![\dagger](img/file32.png
    "\dagger")) for the adjoint.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 其中，按照惯例，我们使用 dagger 符号 (![\dagger](img/file32.png "\dagger")) 表示伴随矩阵。
- en: Important note
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: When finding the adjoint, do not forget to conjugate the complex numbers! For
    instance, it holds that
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在寻找伴随矩阵时，不要忘记对复数进行共轭！例如，以下等式成立
- en: '![\begin{pmatrix} \frac{1 - i}{2} \\ \frac{i}{\sqrt{2}} \\ \end{pmatrix}^{\dagger}
    = \begin{pmatrix} \frac{1 + i}{2} & \frac{- i}{\sqrt{2}} \\ \end{pmatrix}.](img/file33.png
    "\begin{pmatrix} \frac{1 - i}{2} \\ \frac{i}{\sqrt{2}} \\ \end{pmatrix}^{\dagger}
    = \begin{pmatrix} \frac{1 + i}{2} & \frac{- i}{\sqrt{2}} \\ \end{pmatrix}.")'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![\begin{pmatrix} \frac{1 - i}{2} \\ \frac{i}{\sqrt{2}} \\ \end{pmatrix}^{\dagger}
    = \begin{pmatrix} \frac{1 + i}{2} & \frac{- i}{\sqrt{2}} \\ \end{pmatrix}.](img/file33.png
    "\begin{pmatrix} \frac{1 - i}{2} \\ \frac{i}{\sqrt{2}} \\ \end{pmatrix}^{\dagger}
    = \begin{pmatrix} \frac{1 + i}{2} & \frac{- i}{\sqrt{2}} \\ \end{pmatrix}.")'
- en: One of the reasons why Dirac notation is so popular for working with quantum
    systems is that, by using it, we can easily compute the inner products of kets
    and bras. For instance, we can readily show that
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: Dirac 符号之所以在处理量子系统时如此受欢迎，其中一个原因是通过使用它，我们可以轻松地计算 kets 和 bras 的内积。例如，我们可以很容易地证明
- en: '![\left\langle 0 \middle| 0 \right\rangle = \begin{pmatrix} 1 & 0 \\ \end{pmatrix}\begin{pmatrix}
    1 \\ 0 \\ \end{pmatrix} = 1,\qquad\left\langle 0 \middle| 1 \right\rangle = \begin{pmatrix}
    1 & 0 \\ \end{pmatrix}\begin{pmatrix} 0 \\ 1 \\ \end{pmatrix} = 0,](img/file34.png
    "\left\langle 0 \middle| 0 \right\rangle = \begin{pmatrix} 1 & 0 \\ \end{pmatrix}\begin{pmatrix}
    1 \\ 0 \\ \end{pmatrix} = 1,\qquad\left\langle 0 \middle| 1 \right\rangle = \begin{pmatrix}
    1 & 0 \\ \end{pmatrix}\begin{pmatrix} 0 \\ 1 \\ \end{pmatrix} = 0,")'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![\left\langle 0 \middle| 0 \right\rangle = \begin{pmatrix} 1 & 0 \\ \end{pmatrix}\begin{pmatrix}
    1 \\ 0 \\ \end{pmatrix} = 1,\qquad\left\langle 0 \middle| 1 \right\rangle = \begin{pmatrix}
    1 & 0 \\ \end{pmatrix}\begin{pmatrix} 0 \\ 1 \\ \end{pmatrix} = 0,](img/file34.png
    "\left\langle 0 \middle| 0 \right\rangle = \begin{pmatrix} 1 & 0 \\ \end{pmatrix}\begin{pmatrix}
    1 \\ 0 \\ \end{pmatrix} = 1,\qquad\left\langle 0 \middle| 1 \right\rangle = \begin{pmatrix}
    1 & 0 \\ \end{pmatrix}\begin{pmatrix} 0 \\ 1 \\ \end{pmatrix} = 0,")'
- en: '![\left\langle 1 \middle| 0 \right\rangle = \begin{pmatrix} 0 & 1 \\ \end{pmatrix}\begin{pmatrix}
    1 \\ 0 \\ \end{pmatrix} = 0,\qquad\left\langle 1 \middle| 1 \right\rangle = \begin{pmatrix}
    0 & 1 \\ \end{pmatrix}\begin{pmatrix} 0 \\ 1 \\ \end{pmatrix} = 1.](img/file35.png
    "\left\langle 1 \middle| 0 \right\rangle = \begin{pmatrix} 0 & 1 \\ \end{pmatrix}\begin{pmatrix}
    1 \\ 0 \\ \end{pmatrix} = 0,\qquad\left\langle 1 \middle| 1 \right\rangle = \begin{pmatrix}
    0 & 1 \\ \end{pmatrix}\begin{pmatrix} 0 \\ 1 \\ \end{pmatrix} = 1.")'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![\left\langle 1 \middle| 0 \right\rangle = \begin{pmatrix} 0 & 1 \\ \end{pmatrix}\begin{pmatrix}
    1 \\ 0 \\ \end{pmatrix} = 0,\qquad\left\langle 1 \middle| 1 \right\rangle = \begin{pmatrix}
    0 & 1 \\ \end{pmatrix}\begin{pmatrix} 0 \\ 1 \\ \end{pmatrix} = 1.](img/file35.png
    "\left\langle 1 \middle| 0 \right\rangle = \begin{pmatrix} 0 & 1 \\ \end{pmatrix}\begin{pmatrix}
    1 \\ 0 \\ \end{pmatrix} = 0,\qquad\left\langle 1 \middle| 1 \right\rangle = \begin{pmatrix}
    0 & 1 \\ \end{pmatrix}\begin{pmatrix} 0 \\ 1 \\ \end{pmatrix} = 1.")'
- en: This proves that ![\left| 0 \right\rangle](img/file6.png "\left| 0 \right\rangle")
    and ![\left| 1 \right\rangle](img/file14.png "\left| 1 \right\rangle") are not
    just elements of any basis but of an **orthonormal** one, since ![\left| 0 \right\rangle](img/file6.png
    "\left| 0 \right\rangle") and ![\left| 1 \right\rangle](img/file14.png "\left|
    1 \right\rangle") are orthogonal and of length 1\. Thus, we can compute the inner
    product of two states ![\left| \psi_{1} \right\rangle = a\left| 0 \right\rangle
    + b\left| 1 \right\rangle](img/file36.png "\left| \psi_{1} \right\rangle = a\left|
    0 \right\rangle + b\left| 1 \right\rangle") and ![\left| \psi_{2} \right\rangle
    = c\left| 0 \right\rangle + d\left| 1 \right\rangle](img/file37.png "\left| \psi_{2}
    \right\rangle = c\left| 0 \right\rangle + d\left| 1 \right\rangle") using Dirac
    notation by noting that
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这证明了![\left| 0 \right\rangle](img/file6.png "\left| 0 \right\rangle")和![\left|
    1 \right\rangle](img/file14.png "\left| 1 \right\rangle")不仅是一组基的元素，而且是**正交归一**的，因为![\left|
    0 \right\rangle](img/file6.png "\left| 0 \right\rangle")和![\left| 1 \right\rangle](img/file14.png
    "\left| 1 \right\rangle")是正交的，且长度为1。因此，我们可以通过注意到来计算两个状态![\left| \psi_{1} \right\rangle
    = a\left| 0 \right\rangle + b\left| 1 \right\rangle](img/file36.png "\left| \psi_{1}
    \right\rangle = a\left| 0 \right\rangle + b\left| 1 \right\rangle")和![\left| \psi_{2}
    \right\rangle = c\left| 0 \right\rangle + d\left| 1 \right\rangle](img/file37.png
    "\left| \psi_{2} \right\rangle = c\left| 0 \right\rangle + d\left| 1 \right\rangle")的内积，即
- en: '![\begin{array}{rlrl} \left\langle \psi_{1} \middle| \psi_{2} \right\rangle
    & {= \left( {a^{\ast}\left\langle 0 \right| + b^{\ast}\left\langle 1 \right|}
    \right)\left( {c\left| 0 \right\rangle + d\left| 1 \right\rangle} \right)\qquad}
    & & \qquad \\ & {= a^{\ast}c\left\langle 0 \middle| 0 \right\rangle + a^{\ast}d\left\langle
    0 \middle| 1 \right\rangle + b^{\ast}c\left\langle 1 \middle| 0 \right\rangle
    + b^{\ast}d\left\langle 1 \middle| 1 \right\rangle\qquad} & & \qquad \\ & {= a^{\ast}c
    + b^{\ast}d,\qquad} & & \qquad \\ \end{array}](img/file38.png "\begin{array}{rlrl}
    \left\langle \psi_{1} \middle| \psi_{2} \right\rangle & {= \left( {a^{\ast}\left\langle
    0 \right| + b^{\ast}\left\langle 1 \right|} \right)\left( {c\left| 0 \right\rangle
    + d\left| 1 \right\rangle} \right)\qquad} & & \qquad \\  & {= a^{\ast}c\left\langle
    0 \middle| 0 \right\rangle + a^{\ast}d\left\langle 0 \middle| 1 \right\rangle
    + b^{\ast}c\left\langle 1 \middle| 0 \right\rangle + b^{\ast}d\left\langle 1 \middle|
    1 \right\rangle\qquad} & & \qquad \\  & {= a^{\ast}c + b^{\ast}d,\qquad} & & \qquad
    \\ \end{array}")'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![\begin{array}{rlrl} \left\langle \psi_{1} \middle| \psi_{2} \right\rangle
    & {= \left( {a^{\ast}\left\langle 0 \right| + b^{\ast}\left\langle 1 \right|}
    \right)\left( {c\left| 0 \right\rangle + d\left| 1 \right\rangle} \right)\qquad}
    & & \qquad \\ & {= a^{\ast}c\left\langle 0 \middle| 0 \right\rangle + a^{\ast}d\left\langle
    0 \middle| 1 \right\rangle + b^{\ast}c\left\langle 1 \middle| 0 \right\rangle
    + b^{\ast}d\left\langle 1 \middle| 1 \right\rangle\qquad} & & \qquad \\ & {= a^{\ast}c
    + b^{\ast}d,\qquad} & & \qquad \\ \end{array}](img/file38.png "\begin{array}{rlrl}
    \left\langle \psi_{1} \middle| \psi_{2} \right\rangle & {= \left( {a^{\ast}\left\langle
    0 \right| + b^{\ast}\left\langle 1 \right|} \right)\left( {c\left| 0 \right\rangle
    + d\left| 1 \right\rangle} \right)\qquad} & & \qquad \\  & {= a^{\ast}c\left\langle
    0 \middle| 0 \right\rangle + a^{\ast}d\left\langle 0 \middle| 1 \right\rangle
    + b^{\ast}c\left\langle 1 \middle| 0 \right\rangle + b^{\ast}d\left\langle 1 \middle|
    1 \right\rangle\qquad} & & \qquad \\  & {= a^{\ast}c + b^{\ast}d,\qquad} & & \qquad
    \\ \end{array}")'
- en: where ![a^{\ast}](img/file39.png "a^{\ast}") and ![b^{\ast}](img/file40.png
    "b^{\ast}") are the complex conjugates of ![a](img/file16.png "a") and ![b](img/file17.png
    "b").
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 其中![a^{\ast}](img/file39.png "a^{\ast}")和![b^{\ast}](img/file40.png "b^{\ast}")是![a](img/file16.png
    "a")和![b](img/file17.png "b")的复共轭。
- en: Exercise 1.2
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 练习1.2
- en: What is the inner product of ![\sqrt{\left. 1\slash 2 \right.}\left| 0 \right\rangle
    + \sqrt{\left. 1\slash 2 \right.}\left| 1 \right\rangle](img/file25.png "\sqrt{\left.
    1\slash 2 \right.}\left| 0 \right\rangle + \sqrt{\left. 1\slash 2 \right.}\left|
    1 \right\rangle") and ![\sqrt{\left. 1\slash 3 \right.}\left| 0 \right\rangle
    + \sqrt{\left. 2\slash 3 \right.}\left| 1 \right\rangle](img/file26.png "\sqrt{\left.
    1\slash 3 \right.}\left| 0 \right\rangle + \sqrt{\left. 2\slash 3 \right.}\left|
    1 \right\rangle")? And the inner product of ![\sqrt{\left. 1\slash 2 \right.}\left|
    0 \right\rangle + \sqrt{\left. 1\slash 2 \right.}\left| 1 \right\rangle](img/file25.png
    "\sqrt{\left. 1\slash 2 \right.}\left| 0 \right\rangle + \sqrt{\left. 1\slash
    2 \right.}\left| 1 \right\rangle") and ![\sqrt{\left. 1\slash 2 \right.}\left|
    0 \right\rangle - \sqrt{\left. 1\slash 2 \right.}\left| 1 \right\rangle](img/file27.png
    "\sqrt{\left. 1\slash 2 \right.}\left| 0 \right\rangle - \sqrt{\left. 1\slash
    2 \right.}\left| 1 \right\rangle")?
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '![\sqrt{\left. 1\slash 2 \right.}\left| 0 \right\rangle + \sqrt{\left. 1\slash
    2 \right.}\left| 1 \right\rangle](img/file25.png "\sqrt{\left. 1\slash 2 \right.}\left|
    0 \right\rangle + \sqrt{\left. 1\slash 2 \right.}\left| 1 \right\rangle") 和 ![\sqrt{\left.
    1\slash 3 \right.}\left| 0 \right\rangle + \sqrt{\left. 2\slash 3 \right.}\left|
    1 \right\rangle](img/file26.png "\sqrt{\left. 1\slash 3 \right.}\left| 0 \right\rangle
    + \sqrt{\left. 2\slash 3 \right.}\left| 1 \right\rangle") 的内积是什么？以及 ![\sqrt{\left.
    1\slash 2 \right.}\left| 0 \right\rangle + \sqrt{\left. 1\slash 2 \right.}\left|
    1 \right\rangle](img/file25.png "\sqrt{\left. 1\slash 2 \right.}\left| 0 \right\rangle
    + \sqrt{\left. 1\slash 2 \right.}\left| 1 \right\rangle") 和 ![\sqrt{\left. 1\slash
    2 \right.}\left| 0 \right\rangle - \sqrt{\left. 1\slash 2 \right.}\left| 1 \right\rangle](img/file27.png
    "\sqrt{\left. 1\slash 2 \right.}\left| 0 \right\rangle - \sqrt{\left. 1\slash
    2 \right.}\left| 1 \right\rangle") 的内积是什么？'
- en: To learn more…
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多…
- en: 'Notice that, if ![\left| \psi \right\rangle = a\left| 0 \right\rangle + b\left|
    1 \right\rangle](img/file41.png "\left| \psi \right\rangle = a\left| 0 \right\rangle
    + b\left| 1 \right\rangle"), then ![\left| \left\langle 0 \middle| \psi \right\rangle
    \right|^{2} = |a|^{2}](img/file42.png "\left| \left\langle 0 \middle| \psi \right\rangle
    \right|^{2} = |a|^{2}"), which is the probability of measuring ![0](img/file12.png
    "0") if the state is ![\left| \psi \right\rangle](img/file43.png "\left| \psi
    \right\rangle"). This is not accidental. In *Chapter* * [*7*](ch015.xhtml#x1-1190007),
    *VQE: Variational Quantum* *Eigensolver*, for example, we will use measurements
    in orthonormal bases other than the computational one, and we will see how, in
    that case, the probability of measuring the result associated to an element ![\left|
    \varphi \right\rangle](img/file44.png "\left| \varphi \right\rangle") of a given
    orthonormal basis is exactly ![\left| \left\langle \varphi \middle| \psi \right\rangle
    \right|^{2}](img/file45.png "\left| \left\langle \varphi \middle| \psi \right\rangle
    \right|^{2}").*'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '注意，如果 ![\left| \psi \right\rangle = a\left| 0 \right\rangle + b\left| 1 \right\rangle](img/file41.png
    "\left| \psi \right\rangle = a\left| 0 \right\rangle + b\left| 1 \right\rangle")，那么
    ![\left| \left\langle 0 \middle| \psi \right\rangle \right|^{2} = |a|^{2}](img/file42.png
    "\left| \left\langle 0 \middle| \psi \right\rangle \right|^{2} = |a|^{2}")，这是在状态
    ![\left| \psi \right\rangle](img/file43.png "\left| \psi \right\rangle") 下测量 ![0](img/file12.png
    "0") 的概率。这不是偶然的。例如，在 *第* * [*7*](ch015.xhtml#x1-1190007) * 章 * *VQE: 变分量子* *本征值求解器*
    中，我们将使用除了计算基以外的正交归一基的测量，我们将看到在这种情况下，测量与给定正交归一基中的一个元素 ![\left| \varphi \right\rangle](img/file44.png
    "\left| \varphi \right\rangle") 相关的结果的概率正好是 ![\left| \left\langle \varphi \middle|
    \psi \right\rangle \right|^{2}](img/file45.png "\left| \left\langle \varphi \middle|
    \psi \right\rangle \right|^{2}").*'
- en: '*We now know what qubits are, how to measure them, and even how to benefit
    from Dirac notation for some useful computations. The only thing remaining is
    to study how to operate on qubits. Are you ready? It is time for us to get you
    introduced to the mighty quantum gates!'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '*我们现在已经知道了量子比特是什么，如何测量它们，甚至如何利用狄拉克符号进行一些有用的计算。唯一剩下的事情就是研究如何操作量子比特。你准备好了吗？是时候让我们向您介绍强大的量子门了！*'
- en: 1.3.3 One-qubit quantum gates
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.3.3 单量子比特量子门
- en: So far, we have focused on how a qubit stores information in its state and on
    how we can access (part of) that information with measurements. But in order to
    develop useful algorithms, we also need some way of manipulating the state of
    qubits to perform computations.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们关注的是量子比特在其状态中存储信息的方式，以及我们如何通过测量来访问（部分）这些信息。但为了开发有用的算法，我们还需要一种方法来操纵量子比特的状态以执行计算。
- en: Since a qubit is, fundamentally, a quantum system, its evolution follows the
    laws of quantum mechanics. More precisely, if we suppose that our system is isolated
    from its environment, it obeys the famous **Schrödinger** **equation**.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 由于量子比特本质上是一个量子系统，其演化遵循量子力学的规律。更确切地说，如果我们假设我们的系统与其环境是隔离的，它遵循著名的**薛定谔****方程**。
- en: To learn more…
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多…
- en: The time-independent Schrödinger equation can be written as
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 静态薛定谔方程可以写成
- en: '![H\left| {\psi(t)} \right\rangle = i\hslash\frac{\partial}{\partial t}\left|
    {\psi(t)} \right\rangle,](img/file46.png "H\left| {\psi(t)} \right\rangle = i\hslash\frac{\partial}{\partial
    t}\left| {\psi(t)} \right\rangle,")'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![H\left| {\psi(t)} \right\rangle = i\hslash\frac{\partial}{\partial t}\left|
    {\psi(t)} \right\rangle,](img/file46.png "H\left| {\psi(t)} \right\rangle = i\hslash\frac{\partial}{\partial
    t}\left| {\psi(t)} \right\rangle,")'
- en: where ![H](img/file10.png "H") is the **Hamiltonian** of the system, ![\left|
    {\psi(t)} \right\rangle](img/file47.png "\left| {\psi(t)} \right\rangle") is the
    state vector of the system at time ![t](img/file48.png "t"), ![i](img/file49.png
    "i") is the imaginary unit, and ![\hslash](img/file50.png "\hslash") is the reduced
    Planck constant.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 其中 ![H](img/file10.png "H") 是系统的**哈密顿量**，![\left| {\psi(t)} \right\rangle](img/file47.png
    "\left| {\psi(t)} \right\rangle") 是时间 ![t](img/file48.png "t") 时系统的状态向量，![i](img/file49.png
    "i") 是虚数单位，而 ![\hslash](img/file50.png "\hslash") 是约化普朗克常数。
- en: We will talk more about Hamiltonians in *Chapter* *[*3*](ch011.xhtml#x1-590003),
    *QUBO:* *Quadratic Unconstrained Binary Optimization*, *Chapter* *[*4*](ch012.xhtml#x1-750004),
    *Quantum* *Adiabatic Computing and Quantum Annealing*, and *Chapter* *[*7*](ch015.xhtml#x1-1190007),
    *VQE:* *Variational Quantum Eigensolver*.***
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在 *第 *3* 章 *QUBO:* *二次无约束二进制优化*，*第 *4* 章 *量子* *绝热计算和量子退火*，以及 *第 *7* 章 *VQE:*
    *变分量子本征值求解器* 中更多地讨论哈密顿量。
- en: '**Don’t panic! To program a quantum computer, you don’t need to know how to
    solve Schrödinger’s equation. In fact, the only thing that you need to know is
    that its solutions are always a special type of linear transformations. For the
    purposes of the quantum circuit model, since we are working in finite-dimensional
    spaces and we have fixed a basis, the operations can be described by matrices
    that are applied to the vectors that represent the states of the qubits.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '**不要慌张！要编程量子计算机，你不需要知道如何解薛定谔方程。事实上，你需要知道的是，其解总是特殊类型的线性变换。对于量子电路模型，由于我们在有限维空间中工作，并且已经固定了一个基，操作可以通过应用于表示量子比特状态的向量的矩阵来描述**。'
- en: But not any kind of matrix does the trick. According to quantum mechanics, the
    only matrices that we can use are the so-called **unitary** matrices, which are
    the matrices ![U](img/file51.png "U") such that
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 但并非任何类型的矩阵都能起到作用。根据量子力学，我们所能使用的只有所谓的**单位矩阵**，即满足以下条件的 ![U](img/file51.png "U")
    矩阵：
- en: '![U^{\dagger}U = UU^{\dagger} = I,](img/file52.png "U^{\dagger}U = UU^{\dagger}
    = I,")'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![U^{\dagger}U = UU^{\dagger} = I,](img/file52.png "U^{\dagger}U = UU^{\dagger}
    = I,")'
- en: where ![I](img/file53.png "I") is the identity matrix and ![U^{\dagger}](img/file54.png
    "U^{\dagger}") is the adjoint of ![U](img/file51.png "U"), that is, the matrix
    obtained by transposing ![U](img/file51.png "U") and replacing each element by
    its complex conjugate. This means that any unitary matrix ![U](img/file51.png
    "U") is invertible and its inverse is given by ![U^{\dagger}](img/file54.png "U^{\dagger}").
    In the context of the quantum circuit model, the operations represented by these
    matrices are called quantum gates.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 其中 ![I](img/file53.png "I") 是单位矩阵，而 ![U^{\dagger}](img/file54.png "U^{\dagger}")
    是 ![U](img/file51.png "U") 的伴随矩阵，即通过转置 ![U](img/file51.png "U") 并将每个元素替换为其复共轭得到的矩阵。这意味着任何单位矩阵
    ![U](img/file51.png "U") 都是可逆的，其逆矩阵由 ![U^{\dagger}](img/file54.png "U^{\dagger}")
    给出。在量子电路模型中，这些矩阵所表示的操作被称为量子门。
- en: To learn more…
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多信息…
- en: It is relatively easy to check that unitary matrices preserve vector lengths
    (see, for instance, Section *5.7.5* in *Dancing with Qubits*, by Robert Sutor
    [[92](ch030.xhtml#Xsutor2019dancing)]). That is, if ![U](img/file51.png "U") is
    a unitary matrix and ![\left| \psi \right\rangle](img/file43.png "\left| \psi
    \right\rangle") is a quantum state (and, hence, its norm is ![1](img/file13.png
    "1"), as we already know) then ![U\left| \psi \right\rangle](img/file55.png "U\left|
    \psi \right\rangle") also is a valid quantum state because its norm is still ![1](img/file13.png
    "1"). For this reason, we can safely apply unitary matrices to our quantum states
    and rest assured that the resulting states will satisfy the normalization condition.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 检查单位矩阵保持向量长度相对容易（例如，参见 Robert Sutor 的《与量子比特共舞》第 *5.7.5* 节 [[92](ch030.xhtml#Xsutor2019dancing)]）。也就是说，如果
    ![U](img/file51.png "U") 是一个单位矩阵，而 ![\left| \psi \right\rangle](img/file43.png
    "\left| \psi \right\rangle") 是一个量子态（因此，其范数为 ![1](img/file13.png "1")，正如我们已知的那样），那么
    ![U\left| \psi \right\rangle](img/file55.png "U\left| \psi \right\rangle") 也是一个有效的量子态，因为其范数仍然是
    ![1](img/file13.png "1")。因此，我们可以安全地将单位矩阵应用于我们的量子态，并确信得到的结果将满足归一化条件。
- en: When we have just one qubit, our unitary matrices need to be of size ![2 \times
    2](img/file56.png "2 \times 2") because the state vector is of dimension 2\. Thus,
    the simplest example of a quantum gate is the identity matrix of dimension 2,
    which transforms the state of the qubit by... well, by not transforming it at
    all. A less boring example is the ![X](img/file9.png "X") gate, whose matrix is
    given by
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们只有一个量子比特时，我们的单位矩阵需要是![2 \times 2](img/file56.png "2 \times 2")的大小，因为状态向量的维度是2。因此，量子门的最简单例子是2维的单位矩阵，它通过...好吧，通过根本不改变量子比特的状态来实现转换。一个不那么无聊的例子是![X](img/file9.png
    "X")门，其矩阵如下所示
- en: '![X = \begin{pmatrix} 0 & 1 \\ 1 & 0 \\ \end{pmatrix}.](img/file57.png "X =
    \begin{pmatrix} 0 & 1 \\ 1 & 0 \\ \end{pmatrix}.")'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![X = \begin{pmatrix} 0 & 1 \\ 1 & 0 \\ \end{pmatrix}.](img/file57.png "X =
    \begin{pmatrix} 0 & 1 \\ 1 & 0 \\ \end{pmatrix}.")'
- en: The ![X](img/file9.png "X") gate is also called the **NOT** gate, because its
    action on the elements of the computational basis is
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '![X](img/file9.png "X")门也被称为**非门**，因为其对计算基的元素的作用是'
- en: '![X\left| 0 \right\rangle = \begin{pmatrix} 0 & 1 \\ 1 & 0 \\ \end{pmatrix}\begin{pmatrix}
    1 \\ 0 \\ \end{pmatrix} = \begin{pmatrix} 0 \\ 1 \\ \end{pmatrix} = \left| 1 \right\rangle,\qquad
    X\left| 1 \right\rangle = \begin{pmatrix} 0 & 1 \\ 1 & 0 \\ \end{pmatrix}\begin{pmatrix}
    0 \\ 1 \\ \end{pmatrix} = \begin{pmatrix} 1 \\ 0 \\ \end{pmatrix} = \left| 0 \right\rangle,](img/file58.png
    "X\left| 0 \right\rangle = \begin{pmatrix} 0 & 1 \\ 1 & 0 \\ \end{pmatrix}\begin{pmatrix}
    1 \\ 0 \\ \end{pmatrix} = \begin{pmatrix} 0 \\ 1 \\ \end{pmatrix} = \left| 1 \right\rangle,\qquad
    X\left| 1 \right\rangle = \begin{pmatrix} 0 & 1 \\ 1 & 0 \\ \end{pmatrix}\begin{pmatrix}
    0 \\ 1 \\ \end{pmatrix} = \begin{pmatrix} 1 \\ 0 \\ \end{pmatrix} = \left| 0 \right\rangle,")'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![X\left| 0 \right\rangle = \begin{pmatrix} 0 & 1 \\ 1 & 0 \\ \end{pmatrix}\begin{pmatrix}
    1 \\ 0 \\ \end{pmatrix} = \begin{pmatrix} 0 \\ 1 \\ \end{pmatrix} = \left| 1 \right\rangle,\qquad
    X\left| 1 \right\rangle = \begin{pmatrix} 0 & 1 \\ 1 & 0 \\ \end{pmatrix}\begin{pmatrix}
    0 \\ 1 \\ \end{pmatrix} = \begin{pmatrix} 1 \\ 0 \\ \end{pmatrix} = \left| 0 \right\rangle,](img/file58.png
    "X\left| 0 \right\rangle = \begin{pmatrix} 0 & 1 \\ 1 & 0 \\ \end{pmatrix}\begin{pmatrix}
    1 \\ 0 \\ \end{pmatrix} = \begin{pmatrix} 0 \\ 1 \\ \end{pmatrix} = \left| 1 \right\rangle,\qquad
    X\left| 1 \right\rangle = \begin{pmatrix} 0 & 1 \\ 1 & 0 \\ \end{pmatrix}\begin{pmatrix}
    0 \\ 1 \\ \end{pmatrix} = \begin{pmatrix} 1 \\ 0 \\ \end{pmatrix} = \left| 0 \right\rangle,")'
- en: which is exactly what the NOT gate does in classical digital circuits.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这正是经典数字电路中非门（NOT gate）所做的事情。
- en: Exercise 1.3
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 练习1.3
- en: Check that the gate ![X](img/file9.png "X") matrix is, indeed, unitary. What
    is the inverse of ![X](img/file9.png "X")? What is the action of ![X](img/file9.png
    "X") on a general qubit in a state of the form ![a\left| 0 \right\rangle + b\left|
    1 \right\rangle](img/file22.png "a\left| 0 \right\rangle + b\left| 1 \right\rangle")?
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 检查![X](img/file9.png "X")矩阵确实是一个幺正矩阵。![X](img/file9.png "X")的逆矩阵是什么？![X](img/file9.png
    "X")对一个处于![a\left| 0 \right\rangle + b\left| 1 \right\rangle](img/file22.png "a\left|
    0 \right\rangle + b\left| 1 \right\rangle")形式的一般量子比特的作用是什么？
- en: A quantum gate with no classical analog is the **Hadamard** or ![H](img/file10.png
    "H") gate, given by
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 没有经典对应的量子门是**哈达玛门**（Hadamard gate）或![H](img/file10.png "H")门，其定义为
- en: '![H = \begin{pmatrix} \frac{1}{\sqrt{2}} & \frac{1}{\sqrt{2}} \\ \frac{1}{\sqrt{2}}
    & {- \frac{1}{\sqrt{2}}} \\ \end{pmatrix} = \frac{1}{\sqrt{2}}\begin{pmatrix}
    1 & 1 \\ 1 & {- 1} \\ \end{pmatrix}.](img/file59.png "H = \begin{pmatrix} \frac{1}{\sqrt{2}}
    & \frac{1}{\sqrt{2}} \\ \frac{1}{\sqrt{2}} & {- \frac{1}{\sqrt{2}}} \\ \end{pmatrix}
    = \frac{1}{\sqrt{2}}\begin{pmatrix} 1 & 1 \\ 1 & {- 1} \\ \end{pmatrix}.")'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![H = \begin{pmatrix} \frac{1}{\sqrt{2}} & \frac{1}{\sqrt{2}} \\ \frac{1}{\sqrt{2}}
    & {- \frac{1}{\sqrt{2}}} \\ \end{pmatrix} = \frac{1}{\sqrt{2}}\begin{pmatrix}
    1 & 1 \\ 1 & {- 1} \\ \end{pmatrix}.](img/file59.png "H = \begin{pmatrix} \frac{1}{\sqrt{2}}
    & \frac{1}{\sqrt{2}} \\ \frac{1}{\sqrt{2}} & {- \frac{1}{\sqrt{2}}} \\ \end{pmatrix}
    = \frac{1}{\sqrt{2}}\begin{pmatrix} 1 & 1 \\ 1 & {- 1} \\ \end{pmatrix}.")'
- en: This gate is extremely useful in quantum computing, for it can create superposition.
    To be precise, if we apply the ![H](img/file10.png "H") gate on a qubit in state
    ![\left| 0 \right\rangle](img/file6.png "\left| 0 \right\rangle"), we obtain
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 这个门在量子计算中非常有用，因为它可以创建叠加态。更准确地说，如果我们对一个处于![\left| 0 \right\rangle](img/file6.png
    "\left| 0 \right\rangle")状态的量子比特应用![H](img/file10.png "H")门，我们得到
- en: '![H\left| 0 \right\rangle = \frac{1}{\sqrt{2}}\left| 0 \right\rangle + \frac{1}{\sqrt{2}}\left|
    1 \right\rangle = \frac{1}{\sqrt{2}}\left( {\left| 0 \right\rangle + \left| 1
    \right\rangle} \right).](img/file60.png "H\left| 0 \right\rangle = \frac{1}{\sqrt{2}}\left|
    0 \right\rangle + \frac{1}{\sqrt{2}}\left| 1 \right\rangle = \frac{1}{\sqrt{2}}\left(
    {\left| 0 \right\rangle + \left| 1 \right\rangle} \right).")'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![H\left| 0 \right\rangle = \frac{1}{\sqrt{2}}\left| 0 \right\rangle + \frac{1}{\sqrt{2}}\left|
    1 \right\rangle = \frac{1}{\sqrt{2}}\left( {\left| 0 \right\rangle + \left| 1
    \right\rangle} \right)].](img/file60.png "H\left| 0 \right\rangle = \frac{1}{\sqrt{2}}\left|
    0 \right\rangle + \frac{1}{\sqrt{2}}\left| 1 \right\rangle = \frac{1}{\sqrt{2}}\left(
    {\left| 0 \right\rangle + \left| 1 \right\rangle} \right).")'
- en: This state is so important that it has its own name and symbol. It is called
    the **plus** state and it is denoted by ![\left| + \right\rangle](img/file61.png
    "\left| + \right\rangle"). In a similar way, we have that
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这种状态非常重要，因此它有自己的名字和符号。它被称为**正**状态，用![\left| + \right\rangle](img/file61.png
    "\left| + \right\rangle")表示。以类似的方式，我们有
- en: '![H\left| 1 \right\rangle = \frac{1}{\sqrt{2}}\left( {\left| 0 \right\rangle
    - \left| 1 \right\rangle} \right)](img/file62.png "H\left| 1 \right\rangle = \frac{1}{\sqrt{2}}\left(
    {\left| 0 \right\rangle - \left| 1 \right\rangle} \right)")'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![H\left| 1 \right\rangle = \frac{1}{\sqrt{2}}\left( {\left| 0 \right\rangle
    - \left| 1 \right\rangle} \right)](img/file62.png "H\left| 1 \right\rangle = \frac{1}{\sqrt{2}}\left(
    {\left| 0 \right\rangle - \left| 1 \right\rangle} \right)")'
- en: and, as you probably guessed, this state is called the **minus** state and it
    is denoted by ![\left| - \right\rangle](img/file63.png "\left| - \right\rangle").
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所猜，这种状态被称为**负**状态，它用![\left| - \right\rangle](img/file63.png "\left| - \right\rangle")表示。
- en: Exercise 1.4
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 练习1.4
- en: Check that the gate ![H](img/file10.png "H") matrix is, indeed, unitary. What
    is the action of ![H](img/file10.png "H") on ![\left| + \right\rangle](img/file61.png
    "\left| + \right\rangle") and ![\left| - \right\rangle](img/file63.png "\left|
    - \right\rangle")? What is the action of ![X](img/file9.png "X") on ![\left| +
    \right\rangle](img/file61.png "\left| + \right\rangle") and ![\left| - \right\rangle](img/file63.png
    "\left| - \right\rangle")?
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 检查门![H](img/file10.png "H")的矩阵是否确实是幺正的。![H](img/file10.png "H")对![\left| + \right\rangle](img/file61.png
    "\left| + \right\rangle")和![\left| - \right\rangle](img/file63.png "\left| - \right\rangle")的作用是什么？![X](img/file9.png
    "X")对![\left| + \right\rangle](img/file61.png "\left| + \right\rangle")和![\left|
    - \right\rangle](img/file63.png "\left| - \right\rangle")的作用是什么？
- en: 'Of course, we can apply several gates to the same qubit one after the other.
    For instance, consider the following circuit:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，我们可以依次将多个门应用到同一个量子比特上。例如，考虑以下电路：
- en: '![HXH ](img/file64.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![HXH ](img/file64.jpg)'
- en: We read gates from left to right, so in the preceding circuit we would first
    apply an ![H](img/file10.png "H") gate, then an ![X](img/file9.png "X") gate and,
    finally, another ![H](img/file10.png "H") gate. You can easily check that, if
    the initial state of the qubit is ![\left| 0 \right\rangle](img/file6.png "\left|
    0 \right\rangle"), it would end up again in state ![\left| 0 \right\rangle](img/file6.png
    "\left| 0 \right\rangle"). But were its initial state ![\left| 1 \right\rangle](img/file14.png
    "\left| 1 \right\rangle"), the final state would become ![- \left| 1 \right\rangle](img/file65.png
    "- \left| 1 \right\rangle").
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从左到右读取门，所以在前面的电路中，我们首先应用一个![H](img/file10.png "H")门，然后是一个![X](img/file9.png
    "X")门，最后再应用另一个![H](img/file10.png "H")门。你可以很容易地检查，如果量子比特的初始状态是![\left| 0 \right\rangle](img/file6.png
    "\left| 0 \right\rangle")，它最终会回到状态![\left| 0 \right\rangle](img/file6.png "\left|
    0 \right\rangle")。但如果它的初始状态是![\left| 1 \right\rangle](img/file14.png "\left| 1
    \right\rangle")，最终状态将变为![- \left| 1 \right\rangle](img/file65.png "- \left| 1
    \right\rangle")。
- en: 'It turns out that this operation is also very important, and, of course, it
    has its own name: we call it the ![Z](img/file8.png "Z") gate. From its action
    on ![\left| 0 \right\rangle](img/file6.png "\left| 0 \right\rangle") and ![\left|
    1 \right\rangle](img/file14.png "\left| 1 \right\rangle"), we can tell that its
    matrix will be'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 这种操作也非常重要，当然，它有自己的名字：我们称之为![Z](img/file8.png "Z")门。从其对![\left| 0 \right\rangle](img/file6.png
    "\left| 0 \right\rangle")和![\left| 1 \right\rangle](img/file14.png "\left| 1 \right\rangle")的作用，我们可以看出其矩阵将是
- en: '![Z = \begin{pmatrix} 1 & 0 \\ 0 & {- 1} \\ \end{pmatrix},](img/file66.png
    "Z = \begin{pmatrix} 1 & 0 \\ 0 & {- 1} \\ \end{pmatrix},")'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![Z = \begin{pmatrix} 1 & 0 \\ 0 & {- 1} \\ \end{pmatrix},](img/file66.png
    "Z = \begin{pmatrix} 1 & 0 \\ 0 & {- 1} \\ \end{pmatrix},")'
- en: something that we could have also deduced by multiplying the matrices of the
    gates ![H](img/file10.png "H"), ![X](img/file9.png "X"), and ![H](img/file10.png
    "H") one after the other.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以通过依次相乘门![H](img/file10.png "H")、![X](img/file9.png "X")和![H](img/file10.png
    "H")的矩阵来推断出这一点。
- en: Exercise 1.5
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 练习1.5
- en: Check that ![Z\left| 0 \right\rangle = \left| 0 \right\rangle](img/file67.png
    "Z\left| 0 \right\rangle = \left| 0 \right\rangle") and that ![Z\left| 1 \right\rangle
    = - \left| 1 \right\rangle](img/file68.png "Z\left| 1 \right\rangle = - \left|
    1 \right\rangle") in two different ways. First, use Dirac notation and the actions
    of ![H](img/file10.png "H") and ![X](img/file9.png "X") (remember that we have
    defined ![Z](img/file8.png "Z") as ![HXH](img/file69.png "HXH")). Then, derive
    the same result by performing the matrix multiplication
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 检查 ![Z\left| 0 \right\rangle = \left| 0 \right\rangle](img/file67.png "Z\left|
    0 \right\rangle = \left| 0 \right\rangle") 和 ![Z\left| 1 \right\rangle = - \left|
    1 \right\rangle](img/file68.png "Z\left| 1 \right\rangle = - \left| 1 \right\rangle")
    以两种不同的方式。首先，使用狄拉克符号和 ![H](img/file10.png "H") 和 ![X](img/file9.png "X") 的作用（记住我们已将
    ![Z](img/file8.png "Z") 定义为 ![HXH](img/file69.png "HXH")）)。然后，通过执行矩阵乘法得到相同的结果
- en: '![\begin{pmatrix} \frac{1}{\sqrt{2}} & \frac{1}{\sqrt{2}} \\ \frac{1}{\sqrt{2}}
    & {- \frac{1}{\sqrt{2}}} \\ \end{pmatrix}\begin{pmatrix} 0 & 1 \\ 1 & 0 \\ \end{pmatrix}\begin{pmatrix}
    \frac{1}{\sqrt{2}} & \frac{1}{\sqrt{2}} \\ \frac{1}{\sqrt{2}} & {- \frac{1}{\sqrt{2}}}
    \\ \end{pmatrix}.](img/file70.png "\begin{pmatrix} \frac{1}{\sqrt{2}} & \frac{1}{\sqrt{2}}
    \\ \frac{1}{\sqrt{2}} & {- \frac{1}{\sqrt{2}}} \\ \end{pmatrix}\begin{pmatrix}
    0 & 1 \\ 1 & 0 \\ \end{pmatrix}\begin{pmatrix} \frac{1}{\sqrt{2}} & \frac{1}{\sqrt{2}}
    \\ \frac{1}{\sqrt{2}} & {- \frac{1}{\sqrt{2}}} \\ \end{pmatrix}.")'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![\begin{pmatrix} \frac{1}{\sqrt{2}} & \frac{1}{\sqrt{2}} \\ \frac{1}{\sqrt{2}}
    & {- \frac{1}{\sqrt{2}}} \\ \end{pmatrix}\begin{pmatrix} 0 & 1 \\ 1 & 0 \\ \end{pmatrix}\begin{pmatrix}
    \frac{1}{\sqrt{2}} & \frac{1}{\sqrt{2}} \\ \frac{1}{\sqrt{2}} & {- \frac{1}{\sqrt{2}}}
    \\ \end{pmatrix}.](img/file70.png "\begin{pmatrix} \frac{1}{\sqrt{2}} & \frac{1}{\sqrt{2}}
    \\ \frac{1}{\sqrt{2}} & {- \frac{1}{\sqrt{2}}} \\ \end{pmatrix}\begin{pmatrix}
    0 & 1 \\ 1 & 0 \\ \end{pmatrix}\begin{pmatrix} \frac{1}{\sqrt{2}} & \frac{1}{\sqrt{2}}
    \\ \frac{1}{\sqrt{2}} & {- \frac{1}{\sqrt{2}}} \\ \end{pmatrix}.")'
- en: Since there are ![X](img/file9.png "X") and ![Z](img/file8.png "Z") gates, you
    may be wondering if there is also a ![Y](img/file11.png "Y") gate. Indeed, there
    is one, given by matrix ![Y = \begin{pmatrix} 0 & {- i} \\ i & 0 \\ \end{pmatrix}.](img/file71.png
    "Y = \begin{pmatrix} 0 & {- i} \\ i & 0 \\ \end{pmatrix}.")
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 由于存在 ![X](img/file9.png "X") 和 ![Z](img/file8.png "Z") 门，你可能想知道是否也存在 ![Y](img/file11.png
    "Y") 门。确实存在一个，由矩阵 ![Y = \begin{pmatrix} 0 & {- i} \\ i & 0 \\ \end{pmatrix}.](img/file71.png
    "Y = \begin{pmatrix} 0 & {- i} \\ i & 0 \\ \end{pmatrix}.") 给出。
- en: To learn more…
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多…
- en: 'The set ![\{ I,X,Y,Z\}](img/file72.png "\{ I,X,Y,Z\}"), known as the set of
    **Pauli matrices**, is of great importance in quantum computing. One of its many
    interesting properties is that it constitutes a basis of the vector space of ![2
    \times 2](img/file56.png "2 \times 2") complex matrices. We will work with it
    in *Chapter* * [*7*](ch015.xhtml#x1-1190007), *VQE: Variational* *Quantum Eigensolver*,
    for instance.*'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 集合 ![\{ I,X,Y,Z\}](img/file72.png "\{ I,X,Y,Z\}"), 被称为 **泡利矩阵** 集合，在量子计算中非常重要。它的许多有趣性质之一是它构成了
    ![2 \times 2](img/file56.png "2 \times 2") 复数矩阵空间的基。例如，我们将在 *第* * [*7*](ch015.xhtml#x1-1190007)
    *章* * [*7*](ch015.xhtml#x1-1190007) *，*变分量子本征值求解器* *中* 使用它。
- en: '*Other important one-qubit gates include the ![S](img/file73.png "S") and ![T](img/file74.png
    "T") gates, whose matrices are'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '*其他重要的单量子比特门包括 ![S](img/file73.png "S") 和 ![T](img/file74.png "T") 门，它们的矩阵如下'
- en: '![S = \begin{pmatrix} 1 & 0 \\ 0 & e^{i\frac{\pi}{2}} \\ \end{pmatrix},\qquad
    T = \begin{pmatrix} 1 & 0 \\ 0 & e^{i\frac{\pi}{4}} \\ \end{pmatrix}.](img/file75.png
    "S = \begin{pmatrix} 1 & 0 \\ 0 & e^{i\frac{\pi}{2}} \\ \end{pmatrix},\qquad T
    = \begin{pmatrix} 1 & 0 \\ 0 & e^{i\frac{\pi}{4}} \\ \end{pmatrix}.")'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![S = \begin{pmatrix} 1 & 0 \\ 0 & e^{i\frac{\pi}{2}} \\ \end{pmatrix},\qquad
    T = \begin{pmatrix} 1 & 0 \\ 0 & e^{i\frac{\pi}{4}} \\ \end{pmatrix}.](img/file75.png
    "S = \begin{pmatrix} 1 & 0 \\ 0 & e^{i\frac{\pi}{2}} \\ \end{pmatrix},\qquad T
    = \begin{pmatrix} 1 & 0 \\ 0 & e^{i\frac{\pi}{4}} \\ \end{pmatrix}.")'
- en: But, of course, there is an (uncountably!) infinite number of 2-dimensional
    unitary matrices and we cannot just list them all here. What we will do instead
    is introduce a beautiful geometrical representation of single-qubit states, and,
    with it, we will explain how all one-qubit quantum gates can, in fact, be understood
    as certain kinds of rotations. Enter the Bloch sphere!
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 但，当然，存在（不可数！）无限多的二维幺正矩阵，我们无法在这里列出它们所有。我们将要做的是引入单量子比特状态的美丽几何表示，并且，通过它，我们将解释所有单量子比特量子门实际上可以理解为某些类型的旋转。进入布洛赫球体！
- en: Exercise 1.6
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 练习 1.6
- en: Check that ![T^{2} = S](img/file76.png "T^{2} = S"). Then, use the most beautiful
    formula ever (i.e., Euler’s identity ![e^{i\pi} + 1 = 0](img/file77.png "e^{i\pi}
    + 1 = 0")) to check that ![S^{2} = Z](img/file78.png "S^{2} = Z"). Check also
    that ![S](img/file73.png "S") and ![T](img/file74.png "T") are unitary. Express
    ![S^{\dagger}](img/file79.png "S^{\dagger}") and ![T^{\dagger}](img/file80.png
    "T^{\dagger}") as powers of ![S](img/file73.png "S") and ![T](img/file74.png "T").
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 检查 ![T^{2} = S](img/file76.png "T^{2} = S")。然后，使用最美丽的公式（即欧拉公式 ![e^{i\pi} + 1
    = 0](img/file77.png "e^{i\pi} + 1 = 0")) 来检查 ![S^{2} = Z](img/file78.png "S^{2}
    = Z")。还要检查 ![S](img/file73.png "S") 和 ![T](img/file74.png "T") 是单位算子。将 ![S^{\dagger}](img/file79.png
    "S^{\dagger}") 和 ![T^{\dagger}](img/file80.png "T^{\dagger}") 表示为 ![S](img/file73.png
    "S") 和 ![T](img/file74.png "T") 的幂。
- en: 1.3.4 The Bloch sphere and rotations
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.3.4 毕洛球和旋转
- en: The general state of a qubit is described with two complex numbers. Since each
    of those numbers has two real components, it would be natural to think that we
    would need a four-dimensional real space in order to represent the state of a
    qubit. Surprisingly enough, all the possible states of a qubit can be drawn on
    the surface of an old-school sphere, which is a two-dimensional object!
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 一个量子比特的通用状态可以用两个复数来描述。由于每个数都有两个实数分量，所以自然会想到我们需要一个四维实空间来表示量子比特的状态。令人惊讶的是，所有可能的量子比特状态都可以绘制在旧式球面上，这是一个二维对象！
- en: To show how it can be accomplished, we need to remember that a complex number
    ![z](img/file81.png "z") can be written in polar coordinates as
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 为了展示如何实现这一点，我们需要记住一个复数 ![z](img/file81.png "z") 可以用极坐标表示为
- en: '![z = re^{i\alpha},](img/file82.png "z = re^{i\alpha},")'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![z = re^{i\alpha},](img/file82.png "z = re^{i\alpha},")'
- en: where ![r = |z|](img/file83.png "r = |z|") is a non-negative real number and
    ![\alpha](img/file84.png "\alpha") is an angle in ![\left\lbrack {0,2\pi} \right\rbrack](img/file85.png
    "\left\lbrack {0,2\pi} \right\rbrack"). Consider, then, a qubit in a state ![\left|
    \psi \right\rangle = a\left| 0 \right\rangle + b\left| 1 \right\rangle](img/file41.png
    "\left| \psi \right\rangle = a\left| 0 \right\rangle + b\left| 1 \right\rangle")
    and write ![a](img/file16.png "a") and ![b](img/file17.png "b") in polar coordinates
    as
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 其中 ![r = |z|](img/file83.png "r = |z|") 是一个非负实数，![\alpha](img/file84.png "\alpha")
    是 ![\left\lbrack {0,2\pi} \right\rbrack](img/file85.png "\left\lbrack {0,2\pi}
    \right\rbrack") 区间内的一个角度。考虑一个处于状态 ![\left| \psi \right\rangle = a\left| 0 \right\rangle
    + b\left| 1 \right\rangle](img/file41.png "\left| \psi \right\rangle = a\left|
    0 \right\rangle + b\left| 1 \right\rangle") 的量子比特，并将 ![a](img/file16.png "a")
    和 ![b](img/file17.png "b") 用极坐标表示为
- en: '![a = r_{1}e^{i\alpha_{1}},\qquad b = r_{2}e^{i\alpha_{2}}.](img/file86.png
    "a = r_{1}e^{i\alpha_{1}},\qquad b = r_{2}e^{i\alpha_{2}}.")'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![a = r_{1}e^{i\alpha_{1}},\qquad b = r_{2}e^{i\alpha_{2}}.](img/file86.png
    "a = r_{1}e^{i\alpha_{1}},\qquad b = r_{2}e^{i\alpha_{2}}.")'
- en: We know that ![r_{1}^{2} + r_{2}^{2} = |a|^{2} + |b|^{2} = 1](img/file87.png
    "r_{1}^{2} + r_{2}^{2} = |a|^{2} + |b|^{2} = 1") and, since ![0 \leq r_{1},r_{2}
    \leq 1](img/file88.png "0 \leq r_{1},r_{2} \leq 1"), there must exist an angle
    ![\theta](img/file89.png "\theta") in ![\lbrack 0,\pi\rbrack](img/file90.png "\lbrack
    0,\pi\rbrack") such that ![\left. {\cos}(\theta/2) = r_{1} \right.](img/file91.png
    "\left. {\cos}(\theta/2) = r_{1} \right.") and ![\left. {\sin}(\theta/2) = r_{2}
    \right.](img/file92.png "\left. {\sin}(\theta/2) = r_{2} \right."). The reason
    for considering ![\left. \theta\slash 2 \right.](img/file93.png "\left. \theta\slash
    2 \right.") instead of ![\theta](img/file89.png "\theta") in the cosine and sine
    will be apparent in a moment. Notice that, by now, we have
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 我们知道 ![r_{1}^{2} + r_{2}^{2} = |a|^{2} + |b|^{2} = 1](img/file87.png "r_{1}^{2}
    + r_{2}^{2} = |a|^{2} + |b|^{2} = 1")，并且由于 ![0 \leq r_{1},r_{2} \leq 1](img/file88.png
    "0 \leq r_{1},r_{2} \leq 1")，必须存在一个角度 ![\theta](img/file89.png "\theta") 在 ![\lbrack
    0,\pi\rbrack](img/file90.png "\lbrack 0,\pi\rbrack") 区间内，使得 ![\left. {\cos}(\theta/2)
    = r_{1} \right.](img/file91.png "\left. {\cos}(\theta/2) = r_{1} \right.") 和 ![\left.
    {\sin}(\theta/2) = r_{2} \right.](img/file92.png "\left. {\sin}(\theta/2) = r_{2}
    \right.")。考虑 ![\left. \theta\slash 2 \right.](img/file93.png "\left. \theta\slash
    2 \right.") 而不是 ![\theta](img/file89.png "\theta") 在余弦和正弦中的原因将在稍后变得明显。注意，到目前为止，我们有
- en: '![\left| \psi \right\rangle = \cos\frac{\theta}{2}e^{i\alpha_{1}}\left| 0 \right\rangle
    + \sin\frac{\theta}{2}e^{i\alpha_{2}}\left| 1 \right\rangle.](img/file94.png "\left|
    \psi \right\rangle = \cos\frac{\theta}{2}e^{i\alpha_{1}}\left| 0 \right\rangle
    + \sin\frac{\theta}{2}e^{i\alpha_{2}}\left| 1 \right\rangle.")'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![\left| \psi \right\rangle = \cos\frac{\theta}{2}e^{i\alpha_{1}}\left| 0 \right\rangle
    + \sin\frac{\theta}{2}e^{i\alpha_{2}}\left| 1 \right\rangle.](img/file94.png "\left|
    \psi \right\rangle = \cos\frac{\theta}{2}e^{i\alpha_{1}}\left| 0 \right\rangle
    + \sin\frac{\theta}{2}e^{i\alpha_{2}}\left| 1 \right\rangle.")'
- en: Another crucial observation is that we can multiply ![\left| \psi \right\rangle](img/file43.png
    "\left| \psi \right\rangle") by a complex number ![c](img/file95.png "c") with
    absolute value 1 without changing its state. Indeed, it is easy to see that ![c](img/file95.png
    "c") does not affect the probabilities of obtaining 0 and 1 when measuring in
    the computational basis (check it!) and, by linearity, it comes out when applying
    a quantum gate ![U](img/file51.png "U") (that is, ![U\left( {c\left| \psi \right\rangle}
    \right) = cU\left| \psi \right\rangle](img/file96.png "U\left( {c\left| \psi \right\rangle}
    \right) = cU\left| \psi \right\rangle")). Thus, there is no operation — either
    unitary transformation or measurement — that allows us to distinguish ![\left|
    \psi \right\rangle](img/file43.png "\left| \psi \right\rangle") from ![c\left|
    \psi \right\rangle](img/file97.png "c\left| \psi \right\rangle"). We call ![c](img/file95.png
    "c") a **global phase** and we have just shown that it is physically irrelevant.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: Notice, however, that **relative** phases are, unlike global ones, really relevant!
    For instance, ![\left| + \right\rangle = \frac{1}{\sqrt{2}}\left( {\left| 0 \right\rangle
    + \left| 1 \right\rangle} \right)](img/file98.png "\left| + \right\rangle = \frac{1}{\sqrt{2}}\left(
    {\left| 0 \right\rangle + \left| 1 \right\rangle} \right)") and ![\left| - \right\rangle
    = \frac{1}{\sqrt{2}}\left( {\left| 0 \right\rangle - \left| 1 \right\rangle} \right)](img/file99.png
    "\left| - \right\rangle = \frac{1}{\sqrt{2}}\left( {\left| 0 \right\rangle - \left|
    1 \right\rangle} \right)") differ just in the phase of ![\left| 1 \right\rangle](img/file14.png
    "\left| 1 \right\rangle"), but we can easily distinguish between them by first
    applying ![H](img/file10.png "H") to those states and then measuring them in the
    computational basis.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: We can, thus, multiply ![\left| \psi \right\rangle](img/file43.png "\left| \psi
    \right\rangle") by ![e^{- i\alpha_{1}}](img/file100.png "e^{- i\alpha_{1}}") to
    obtain an equivalent representation
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: '![\left| \psi \right\rangle = \cos\frac{\theta}{2}\left| 0 \right\rangle +
    \sin\frac{\theta}{2}e^{i\varphi}\left| 1 \right\rangle,](img/file101.png "\left|
    \psi \right\rangle = \cos\frac{\theta}{2}\left| 0 \right\rangle + \sin\frac{\theta}{2}e^{i\varphi}\left|
    1 \right\rangle,")'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
- en: where we have defined ![\varphi = \alpha_{2} - \alpha_{1}](img/file102.png "\varphi
    = \alpha_{2} - \alpha_{1}").
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: In this way, we can describe the state of any qubit with just two numbers ![\theta
    \in \left\lbrack {0,\pi} \right\rbrack](img/file103.png "\theta \in \left\lbrack
    {0,\pi} \right\rbrack") and ![\varphi \in \left\lbrack {0,2\pi} \right\rbrack](img/file104.png
    "\varphi \in \left\lbrack {0,2\pi} \right\rbrack") that we can interpret as a
    polar angle and an azimuthal angle, respectively (that is, we are using what are
    known as **spherical coordinates**). This gives us a three-dimensional point
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: '![(\sin\theta\cos\varphi,\sin\theta\sin\varphi,\cos\theta)](img/file105.png
    "(\sin\theta\cos\varphi,\sin\theta\sin\varphi,\cos\theta)")'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
- en: that locates the state of the qubit on the surface of a sphere, called the **Bloch**
    **sphere** (see *Figure* *[*1.2*](#Figure1.2)).*
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: '*![Figure 1.2: Qubit state \left| \psi \right\rangle represented on the Bloch
    sphere.](img/file106.png)'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: '**Figure 1.2**: Qubit state ![\left| \psi \right\rangle](img/file43.png "\left|
    \psi \right\rangle") represented on the Bloch sphere.'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: Notice that ![\theta](img/file89.png "\theta") runs from ![0](img/file12.png
    "0") to ![\pi](img/file107.png "\pi") to cover the whole range from the top to
    the bottom of the sphere. This is why we used ![\left. \theta\slash 2 \right.](img/file93.png
    "\left. \theta\slash 2 \right.") in the representation of our preceding qubit.
    We only needed to get up to ![\left. \pi\slash 2 \right.](img/file108.png "\left.
    \pi\slash 2 \right.") for our angles in the sines and cosines!
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: In the Bloch sphere, ![\left| 0 \right\rangle](img/file6.png "\left| 0 \right\rangle")
    is mapped to the North pole and ![\left| 1 \right\rangle](img/file14.png "\left|
    1 \right\rangle") to the South pole. In general, states that are orthogonal with
    respect to the inner product are antipodal on the sphere. For instance, ![\left|
    + \right\rangle](img/file61.png "\left| + \right\rangle") and ![\left| - \right\rangle](img/file63.png
    "\left| - \right\rangle") both lie on the equator, but on opposite points of the
    sphere. As we already know, the ![X](img/file9.png "X") gate takes ![\left| 0
    \right\rangle](img/file6.png "\left| 0 \right\rangle") to ![\left| 1 \right\rangle](img/file14.png
    "\left| 1 \right\rangle") and ![\left| 1 \right\rangle](img/file14.png "\left|
    1 \right\rangle") to ![\left| 0 \right\rangle](img/file6.png "\left| 0 \right\rangle"),
    but leaves ![\left| + \right\rangle](img/file61.png "\left| + \right\rangle")
    and ![\left| - \right\rangle](img/file63.png "\left| - \right\rangle") unchanged,
    at least up to an irrelevant global phase. In fact, this means that the ![X](img/file9.png
    "X") gate acts like a rotation of ![\pi](img/file107.png "\pi") radians around
    the ![X](img/file9.png "X") axis of the Bloch sphere…, so now you know why we
    use that name for the gate! In the same manner, ![Z](img/file8.png "Z") and ![Y](img/file11.png
    "Y") are rotations of ![\pi](img/file107.png "\pi") radians around the ![Z](img/file8.png
    "Z") and ![Y](img/file11.png "Y") axes, respectively.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: We can generalize this behavior to obtain rotations of any angle around any
    axis of the Bloch sphere. For instance, for the ![X](img/file9.png "X"), ![Y](img/file11.png
    "Y"), and ![Z](img/file8.png "Z") axes we may define
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: '![R_{X}(\theta) = e^{- i\frac{\theta}{2}X} = \cos\frac{\theta}{2}I - i\sin\frac{\theta}{2}X
    = \begin{pmatrix} {\cos\frac{\theta}{2}} & {- i\sin\frac{\theta}{2}} \\ {- i\sin\frac{\theta}{2}}
    & {\cos\frac{\theta}{2}} \\ \end{pmatrix},](img/file109.png "R_{X}(\theta) = e^{-
    i\frac{\theta}{2}X} = \cos\frac{\theta}{2}I - i\sin\frac{\theta}{2}X = \begin{pmatrix}
    {\cos\frac{\theta}{2}} & {- i\sin\frac{\theta}{2}} \\ {- i\sin\frac{\theta}{2}}
    & {\cos\frac{\theta}{2}} \\ \end{pmatrix},")'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
- en: '![R_{Y}(\theta) = e^{- i\frac{\theta}{2}Y} = \cos\frac{\theta}{2}I - i\sin\frac{\theta}{2}Y
    = \begin{pmatrix} {\cos\frac{\theta}{2}} & {- \sin\frac{\theta}{2}} \\ {\sin\frac{\theta}{2}}
    & {\cos\frac{\theta}{2}} \\ \end{pmatrix},](img/file110.png "R_{Y}(\theta) = e^{-
    i\frac{\theta}{2}Y} = \cos\frac{\theta}{2}I - i\sin\frac{\theta}{2}Y = \begin{pmatrix}
    {\cos\frac{\theta}{2}} & {- \sin\frac{\theta}{2}} \\ {\sin\frac{\theta}{2}} &
    {\cos\frac{\theta}{2}} \\ \end{pmatrix},")'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
- en: '![R_{Z}(\theta) = e^{- i\frac{\theta}{2}Z} = \cos\frac{\theta}{2}I - i\sin\frac{\theta}{2}Z
    = \begin{pmatrix} e^{- i\frac{\theta}{2}} & 0 \\ 0 & e^{i\frac{\theta}{2}} \\
    \end{pmatrix} \equiv \begin{pmatrix} 1 & 0 \\ 0 & e^{i\theta} \\ \end{pmatrix},](img/file111.png
    "R_{Z}(\theta) = e^{- i\frac{\theta}{2}Z} = \cos\frac{\theta}{2}I - i\sin\frac{\theta}{2}Z
    = \begin{pmatrix} e^{- i\frac{\theta}{2}} & 0 \\ 0 & e^{i\frac{\theta}{2}} \\
    \end{pmatrix} \equiv \begin{pmatrix} 1 & 0 \\ 0 & e^{i\theta} \\ \end{pmatrix},")'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
- en: where we use the ![\equiv](img/file112.png "\equiv") symbol for equivalent action
    up to a global phase. Notice that ![R_{X}(\pi) \equiv X](img/file113.png "R_{X}(\pi)
    \equiv X"), ![R_{Y}(\pi) \equiv Y](img/file114.png "R_{Y}(\pi) \equiv Y"), ![R_{Z}(\pi)
    \equiv Z](img/file115.png "R_{Z}(\pi) \equiv Z"), ![R_{Z}(\frac{\pi}{2}) \equiv
    S](img/file116.png "R_{Z}(\frac{\pi}{2}) \equiv S"), and ![R_{Z}(\frac{\pi}{4})
    \equiv T](img/file117.png "R_{Z}(\frac{\pi}{4}) \equiv T").
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 1.7
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: Check these equivalences by substituting the angles in the definitions of ![R_{X}](img/file118.png
    "R_{X}"), ![R_{Y}](img/file119.png "R_{Y}"), and ![R_{Z}](img/file120.png "R_{Z}").
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: In fact, it can be proved (see, for instance, the book by Nielsen and Chuang
    [[69](ch030.xhtml#Xnielsen11quantum)]) that for any one-qubit gate ![U](img/file51.png
    "U") there exists a unit vector ![r = (r_{x},r_{y},r_{z})](img/file121.png "r
    = (r_{x},r_{y},r_{z})") and an angle ![\theta](img/file89.png "\theta") such that
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: '![U \equiv \cos\frac{\theta}{2}I - i\sin\frac{\theta}{2}(r_{x}X + r_{y}Y +
    r_{z}Z).](img/file122.png "U \equiv \cos\frac{\theta}{2}I - i\sin\frac{\theta}{2}(r_{x}X
    + r_{y}Y + r_{z}Z).")'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
- en: For example, choosing ![\theta = \pi](img/file123.png "\theta = \pi") and ![\left.
    r = (1\slash\sqrt{2},0,1\slash\sqrt{2}) \right.](img/file124.png "\left. r = (1\slash\sqrt{2},0,1\slash\sqrt{2})
    \right.") we can obtain the Hadamard gate, for it holds that
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: '![H \equiv - i\frac{1}{\sqrt{2}}(X + Z).](img/file125.png "H \equiv - i\frac{1}{\sqrt{2}}(X
    + Z).")'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
- en: Additionally, it can also be proved that, again for any one-qubit gate ![U](img/file51.png
    "U"), there exist three angles ![\alpha](img/file84.png "\alpha"), ![\beta](img/file126.png
    "\beta"), and ![\gamma](img/file127.png "\gamma") such that
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: '![U \equiv R_{Z}(\alpha)R_{Y}(\beta)R_{Z}(\gamma).](img/file128.png "U \equiv
    R_{Z}(\alpha)R_{Y}(\beta)R_{Z}(\gamma).")'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
- en: In fact, you can obtain such a decomposition for any two rotation axes as long
    as they are not parallel, not just for ![Y](img/file11.png "Y") and ![Z](img/file8.png
    "Z").
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: Moreover, in some quantum computing architectures (including the ones used by
    companies such as IBM), it is common to use a **universal** one-qubit gate, called
    the ![U](img/file51.png "U")**-gate**, that depends on three angles and is able
    to generate any other one-qubit gate. Its matrix is
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: '![U\left( {\theta,\varphi,\lambda} \right) = \begin{pmatrix} {\cos\frac{\theta}{2}}
    & {- e^{i\lambda}\sin\frac{\theta}{2}} \\ {e^{i\varphi}\sin\frac{\theta}{2}} &
    {e^{i{({\varphi + \lambda})}}\cos\frac{\theta}{2}} \\ \end{pmatrix}.](img/file129.png
    "U\left( {\theta,\varphi,\lambda} \right) = \begin{pmatrix} {\cos\frac{\theta}{2}}
    & {- e^{i\lambda}\sin\frac{\theta}{2}} \\ {e^{i\varphi}\sin\frac{\theta}{2}} &
    {e^{i{({\varphi + \lambda})}}\cos\frac{\theta}{2}} \\ \end{pmatrix}.")'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
- en: Exercise 1.8
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: Show that ![U\left( {\theta,\varphi,\lambda} \right)](img/file130.png "U\left(
    {\theta,\varphi,\lambda} \right)") is unitary. Check that ![\left. R_{X}(\theta)
    = U(\theta, - \pi\slash 2,\pi\slash 2) \right.](img/file131.png "\left. R_{X}(\theta)
    = U(\theta, - \pi\slash 2,\pi\slash 2) \right."), that ![R_{Y}(\theta) = U(\theta,0,0)](img/file132.png
    "R_{Y}(\theta) = U(\theta,0,0)") and that, up to a global phase, ![U(\theta) =
    R_{Z}(0,0,\theta)](img/file133.png "U(\theta) = R_{Z}(0,0,\theta)").
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: All these observations about how to construct one-qubit gates from rotations
    and parametrized families will be very important when we talk about variational
    forms and feature maps in *Chapter* *[*9*](ch018.xhtml#x1-1600009), *Quantum Support
    Vector Machines*, and *Chapter* *[*10*](ch019.xhtml#x1-18100010), *Quantum Neural
    Networks*, and also to construct controlled gates later in this chapter.**
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: '**## 1.3.5 Hello, quantum world!'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: 'To put together everything that we have learned, we are going to create our
    very first complete quantum circuit. It looks like this:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: '![H ](img/file134.jpg)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
- en: It doesn’t seem very impressive, but let’s analyze it part by part. As you know,
    following convention, the initial state of our qubit is assumed to be ![\left|
    0 \right\rangle](img/file6.png "\left| 0 \right\rangle"), so that’s what we have
    before we do anything. Then we apply the ![H](img/file10.png "H") gate, so the
    state changes to ![\sqrt{\left. 1\slash 2 \right.}\left| 0 \right\rangle + \sqrt{\left.
    1\slash 2 \right.}\left| 1 \right\rangle](img/file25.png "\sqrt{\left. 1\slash
    2 \right.}\left| 0 \right\rangle + \sqrt{\left. 1\slash 2 \right.}\left| 1 \right\rangle").
    Finally, we measure the qubit. The probability of obtaining ![0](img/file12.png
    "0") will be ![\left. \left| \sqrt{\left. 1\slash 2 \right.} \right|^{2} = 1\slash
    2 \right.](img/file135.png "\left. \left| \sqrt{\left. 1\slash 2 \right.} \right|^{2}
    = 1\slash 2 \right."), and that of getting ![1](img/file13.png "1") will also
    be ![\left. 1\slash 2 \right.](img/file136.png "\left. 1\slash 2 \right."), so
    we have created a circuit that — at least in theory — generates random bits following
    a perfectly uniform distribution.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: To learn more…
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: Unbiased uniform bit distributions are of great relevance for multiple applications
    in simulation, cryptography, and even online gambling games. As we will learn
    in *Chapter* *[*2*](ch009.xhtml#x1-400002), *The Tools of the Trade*, current
    quantum computers deviate from this equilibrium because they are affected by noise
    and gate and measurement errors. However, protocols to extract perfect random
    bits even with noisy quantum computers have been proposed and could become one
    of the first practical applications of quantum computing (see, for instance, the
    paper by Acín and Masanes [[3](ch030.xhtml#Xacin2016certified)]).*
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: '*We can modify the previous circuit to obtain any distribution over ![0](img/file12.png
    "0") and ![1](img/file13.png "1") that we desire. If we want the probability of
    measuring ![0](img/file12.png "0") to be ![p \in \left\lbrack {0,1} \right\rbrack](img/file137.png
    "p \in \left\lbrack {0,1} \right\rbrack"), we just need to consider ![\theta =
    2\arccos\sqrt{p}](img/file138.png "\theta = 2\arccos\sqrt{p}") and the following
    circuit:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: '![R (𝜃) Y ](img/file139.jpg)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
- en: Exercise 1.9
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: Check that, with the preceding circuit, the state before measurement is ![\sqrt{p}\left|
    0 \right\rangle + \sqrt{1 - p}\left| 1 \right\rangle](img/file140.png "\sqrt{p}\left|
    0 \right\rangle + \sqrt{1 - p}\left| 1 \right\rangle") and, hence, the probability
    of measuring ![0](img/file12.png "0") is ![p](img/file141.png "p") and that of
    measuring ![1](img/file13.png "1") is ![1 - p](img/file142.png "1 - p").
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: For now, this is all that we need to know about one-qubit states, gates, and
    measurements. Let us move on to two-qubit systems, where the mysteries of entanglement
    are awaiting to be revealed!
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: 1.4 Working with two qubits and entanglement
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have mastered the inner workings of solitary qubits, we are ready
    to up the ante. In this section, we will learn about systems of two qubits and
    how they can become entangled. We will first define the mathematical representation
    of two-qubit systems and how we can measure them. After that, we will study different
    quantum gates that can act on two qubits at once and we will have a look at some
    of their very interesting and slightly puzzling properties. We will conclude with
    a simple but enlightening example of a two-qubit circuit. We promise that the
    ride is going to be amazing!
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: 1.4.1 Two-qubit states
  id: totrans-174
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'So far, we have worked with qubits in isolation. But the real power of quantum
    computing cannot be unleashed unless qubits can talk to each other. We will start
    by considering the simplest case of quantum systems in which there is qubit interaction:
    two-qubit systems.'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: 'Of course, in a two-qubit system, each of the qubits can be in state ![\left|
    0 \right\rangle](img/file6.png "\left| 0 \right\rangle") or in state ![\left|
    1 \right\rangle](img/file14.png "\left| 1 \right\rangle"). Thus, for the two qubits,
    we have four possible combinations: both are in state ![\left| 0 \right\rangle](img/file6.png
    "\left| 0 \right\rangle"), the first one is in state ![\left| 0 \right\rangle](img/file6.png
    "\left| 0 \right\rangle") and the second one in state ![\left| 1 \right\rangle](img/file14.png
    "\left| 1 \right\rangle"), the first one is in state ![\left| 1 \right\rangle](img/file14.png
    "\left| 1 \right\rangle") and the second one in state ![\left| 0 \right\rangle](img/file6.png
    "\left| 0 \right\rangle"), or both are in state ![\left| 1 \right\rangle](img/file14.png
    "\left| 1 \right\rangle"). These four possibilities form a basis (called the **computational
    basis**) of a ![4](img/file143.png "4")-dimensional space and we denote them,
    respectively, by'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: '![\left| 0 \right\rangle \otimes \left| 0 \right\rangle,\,\left| 0 \right\rangle
    \otimes \left| 1 \right\rangle,\,\left| 1 \right\rangle \otimes \left| 0 \right\rangle,\,\left|
    1 \right\rangle \otimes \left| 1 \right\rangle.](img/file144.png "\left| 0 \right\rangle
    \otimes \left| 0 \right\rangle,\,\left| 0 \right\rangle \otimes \left| 1 \right\rangle,\,\left|
    1 \right\rangle \otimes \left| 0 \right\rangle,\,\left| 1 \right\rangle \otimes
    \left| 1 \right\rangle.")'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
- en: Here, ![\otimes](img/file145.png "\otimes") is the symbol for the **tensor product**.
    The tensor product of two column vectors is defined by
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: '![\begin{pmatrix} a_{1} \\ a_{2} \\ {\vdots} \\ a_{n} \\ \end{pmatrix} \otimes
    \begin{pmatrix} b_{1} \\ b_{2} \\ {\vdots} \\ b_{m} \\ \end{pmatrix} = \begin{pmatrix}
    {a_{1}\begin{pmatrix} b_{1} \\ b_{2} \\ {\vdots} \\ b_{m} \\ \end{pmatrix}} \\
    {a_{2}\begin{pmatrix} b_{1} \\ b_{2} \\ {\vdots} \\ b_{m} \\ \end{pmatrix}} \\
    {\vdots} \\ {a_{n}\begin{pmatrix} b_{1} \\ b_{2} \\ {\vdots} \\ b_{m} \\ \end{pmatrix}}
    \\ \end{pmatrix} = \begin{pmatrix} {a_{1}b_{1}} \\ {a_{1}b_{2}} \\ {\vdots} \\
    {a_{1}b_{m}} \\ {a_{2}b_{1}} \\ {a_{2}b_{2}} \\ {\vdots} \\ {a_{2}b_{m}} \\ {\vdots}
    \\ {a_{n}b_{1}} \\ {a_{n}b_{2}} \\ {\vdots} \\ {a_{n}b_{m}} \\ \end{pmatrix}.](img/file146.png
    "\begin{pmatrix} a_{1} \\ a_{2} \\ {\vdots} \\ a_{n} \\ \end{pmatrix} \otimes
    \begin{pmatrix} b_{1} \\ b_{2} \\ {\vdots} \\ b_{m} \\ \end{pmatrix} = \begin{pmatrix}
    {a_{1}\begin{pmatrix} b_{1} \\ b_{2} \\ {\vdots} \\ b_{m} \\ \end{pmatrix}} \\
    {a_{2}\begin{pmatrix} b_{1} \\ b_{2} \\ {\vdots} \\ b_{m} \\ \end{pmatrix}} \\
    {\vdots} \\ {a_{n}\begin{pmatrix} b_{1} \\ b_{2} \\ {\vdots} \\ b_{m} \\ \end{pmatrix}}
    \\ \end{pmatrix} = \begin{pmatrix} {a_{1}b_{1}} \\ {a_{1}b_{2}} \\ {\vdots} \\
    {a_{1}b_{m}} \\ {a_{2}b_{1}} \\ {a_{2}b_{2}} \\ {\vdots} \\ {a_{2}b_{m}} \\ {\vdots}
    \\ {a_{n}b_{1}} \\ {a_{n}b_{2}} \\ {\vdots} \\ {a_{n}b_{m}} \\ \end{pmatrix}.")'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
- en: Hence, the four basis states can be represented by four-dimensional column vectors
    given by
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: '![\left| 0 \right\rangle \otimes \left| 0 \right\rangle = \begin{pmatrix} 1
    \\ 0 \\ 0 \\ 0 \\ \end{pmatrix},\qquad\left| 0 \right\rangle \otimes \left| 1
    \right\rangle = \begin{pmatrix} 0 \\ 1 \\ 0 \\ 0 \\ \end{pmatrix},\qquad\left|
    1 \right\rangle \otimes \left| 0 \right\rangle = \begin{pmatrix} 0 \\ 0 \\ 1 \\
    0 \\ \end{pmatrix},\qquad\left| 1 \right\rangle \otimes \left| 1 \right\rangle
    = \begin{pmatrix} 0 \\ 0 \\ 0 \\ 1 \\ \end{pmatrix}.](img/file147.png "\left|
    0 \right\rangle \otimes \left| 0 \right\rangle = \begin{pmatrix} 1 \\ 0 \\ 0 \\
    0 \\ \end{pmatrix},\qquad\left| 0 \right\rangle \otimes \left| 1 \right\rangle
    = \begin{pmatrix} 0 \\ 1 \\ 0 \\ 0 \\ \end{pmatrix},\qquad\left| 1 \right\rangle
    \otimes \left| 0 \right\rangle = \begin{pmatrix} 0 \\ 0 \\ 1 \\ 0 \\ \end{pmatrix},\qquad\left|
    1 \right\rangle \otimes \left| 1 \right\rangle = \begin{pmatrix} 0 \\ 0 \\ 0 \\
    1 \\ \end{pmatrix}.")'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
- en: Usually, we omit the ![\otimes](img/file145.png "\otimes") symbol and just write
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: '![\left| 0 \right\rangle\left| 0 \right\rangle,\,\left| 0 \right\rangle\left|
    1 \right\rangle,\,\left| 1 \right\rangle\left| 0 \right\rangle,\,\left| 1 \right\rangle\left|
    1 \right\rangle](img/file148.png "\left| 0 \right\rangle\left| 0 \right\rangle,\,\left|
    0 \right\rangle\left| 1 \right\rangle,\,\left| 1 \right\rangle\left| 0 \right\rangle,\,\left|
    1 \right\rangle\left| 1 \right\rangle")'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
- en: or
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: '![\left| {00} \right\rangle,\,\left| {01} \right\rangle,\,\left| {10} \right\rangle,\,\left|
    {11} \right\rangle](img/file149.png "\left| {00} \right\rangle,\,\left| {01} \right\rangle,\,\left|
    {10} \right\rangle,\,\left| {11} \right\rangle")'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
- en: or even
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: '![\left| 0 \right\rangle,\,\left| 1 \right\rangle,\,\left| 2 \right\rangle,\,\left|
    3 \right\rangle.](img/file150.png "\left| 0 \right\rangle,\,\left| 1 \right\rangle,\,\left|
    2 \right\rangle,\,\left| 3 \right\rangle.")'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
- en: Obviously, in this last case, the number of qubits that we are using must be
    clear from the context in order not to mistake the state ![\left| 0 \right\rangle](img/file6.png
    "\left| 0 \right\rangle") of a one-qubit system with the state ![\left| 0 \right\rangle](img/file6.png
    "\left| 0 \right\rangle") of a two-qubit system — or, as we will see soon, any
    other multi-qubit system!
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: As we have mentioned, these four states constitute a basis of the vector space
    of possible states for a two-qubit system. The general expression for the state
    of such a system is
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: '![\left| \psi \right\rangle = a_{00}\left| {00} \right\rangle + a_{01}\left|
    {01} \right\rangle + a_{10}\left| {10} \right\rangle + a_{11}\left| {11} \right\rangle](img/file151.png
    "\left| \psi \right\rangle = a_{00}\left| {00} \right\rangle + a_{01}\left| {01}
    \right\rangle + a_{10}\left| {10} \right\rangle + a_{11}\left| {11} \right\rangle")'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
- en: where ![a_{00}](img/file152.png "a_{00}"), ![a_{01}](img/file153.png "a_{01}"),
    ![a_{10}](img/file154.png "a_{10}"), and ![a_{11}](img/file155.png "a_{11}") are
    complex numbers (called amplitudes, remember?) such that ![{\sum}_{x,y = 0}^{1}\left|
    a_{xy} \right|^{2} = 1](img/file156.png "{\sum}_{x,y = 0}^{1}\left| a_{xy} \right|^{2}
    = 1").
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: If we measure in the computational basis both qubits at this generic state that
    we are considering, we will obtain ![00](img/file157.png "00") with probability
    ![\left| a_{00} \right|^{2}](img/file158.png "\left| a_{00} \right|^{2}"), ![01](img/file159.png
    "01") with probability ![\left| a_{01} \right|^{2}](img/file160.png "\left| a_{01}
    \right|^{2}"), ![10](img/file161.png "10") with probability ![\left| a_{10} \right|^{2}](img/file162.png
    "\left| a_{10} \right|^{2}"), and ![11](img/file163.png "11") with probability
    ![\left| a_{11} \right|^{2}](img/file164.png "\left| a_{11} \right|^{2}"). In
    all those cases, the state will collapse to the state corresponding to the outcome
    of the measurement, just as with one-qubit systems.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: Let’s now say that we only measure one of the qubits. What happens then? Suppose
    that we measure the first qubit. Then, the probability of obtaining ![0](img/file12.png
    "0") will be ![\left| a_{00} \right|^{2} + \left| a_{01} \right|^{2}](img/file165.png
    "\left| a_{00} \right|^{2} + \left| a_{01} \right|^{2}"), which is the sum of
    the probabilities of all the outcomes in which the first qubit can be ![0](img/file12.png
    "0"). If we measure the first qubit and the result turns out to be ![0](img/file12.png
    "0"), the system will not collapse completely, but it will remain in the state
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: '![\frac{a_{00}\left| {00} \right\rangle + a_{01}\left| {01} \right\rangle}{\sqrt{\left|
    a_{00} \right|^{2} + \left| a_{01} \right|^{2}}},](img/file166.png "\frac{a_{00}\left|
    {00} \right\rangle + a_{01}\left| {01} \right\rangle}{\sqrt{\left| a_{00} \right|^{2}
    + \left| a_{01} \right|^{2}}},")'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
- en: where we have divided by ![\sqrt{\left| a_{00} \right|^{2} + \left| a_{01} \right|^{2}}](img/file167.png
    "\sqrt{\left| a_{00} \right|^{2} + \left| a_{01} \right|^{2}}") to keep the state
    normalized. The situation in which the result of the measurement is ![1](img/file13.png
    "1") is analogous.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 1.10
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: Derive the formulas for the probability of measuring ![1](img/file13.png "1")
    on the first qubit in a general two-qubit state and for the state of the system
    after the measurement.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: Dirac notation is also useful to compute inner products of two-qubit states.
    We only need to notice that
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: '![\left( {\left\langle \psi_{1} \right| \otimes \left\langle \psi_{2} \right|}
    \right)\left( {\left| \varphi_{1} \right\rangle \otimes \left| \varphi_{2} \right\rangle}
    \right) = \left\langle \psi_{1} \middle| \varphi_{1} \right\rangle\left\langle
    \psi_{2} \middle| \varphi_{2} \right\rangle,](img/file168.png "\left( {\left\langle
    \psi_{1} \right| \otimes \left\langle \psi_{2} \right|} \right)\left( {\left|
    \varphi_{1} \right\rangle \otimes \left| \varphi_{2} \right\rangle} \right) =
    \left\langle \psi_{1} \middle| \varphi_{1} \right\rangle\left\langle \psi_{2}
    \middle| \varphi_{2} \right\rangle,")'
  id: totrans-199
  prefs: []
  type: TYPE_IMG
- en: apply distributivity and remember to conjugate the complex coefficients when
    obtaining a bra from a ket.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: Then, for instance, we can notice that the inner product of ![\frac{4}{5}\left|
    {01} \right\rangle + \frac{3i}{5}\left| {11} \right\rangle](img/file169.png "\frac{4}{5}\left|
    {01} \right\rangle + \frac{3i}{5}\left| {11} \right\rangle") and ![\frac{1}{\sqrt{2}}\left|
    {00} \right\rangle + \frac{1}{\sqrt{2}}\left| {11} \right\rangle](img/file170.png
    "\frac{1}{\sqrt{2}}\left| {00} \right\rangle + \frac{1}{\sqrt{2}}\left| {11} \right\rangle")
    is
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
- en: '![\begin{array}{rlrl} & {\left( {\frac{4}{5}\left\langle {01} \right| - \frac{3i}{5}\left\langle
    {11} \right|} \right)\left( {\frac{1}{\sqrt{2}}\left| {00} \right\rangle + \frac{1}{\sqrt{2}}\left|
    {11} \right\rangle} \right) = \qquad} & & \qquad \\ & {\quad\frac{4}{5\sqrt{2}}\left\langle
    01 \middle| 00 \right\rangle + \frac{4}{5\sqrt{2}}\left\langle 01 \middle| 11
    \right\rangle - \frac{3i}{5\sqrt{2}}\left\langle 11 \middle| 00 \right\rangle
    - \frac{3i}{5\sqrt{2}}\left\langle 11 \middle| 11 \right\rangle = \qquad} & &
    \qquad \\ & {\quad\frac{4}{5\sqrt{2}}\left\langle 0 \middle| 0 \right\rangle\left\langle
    1 \middle| 0 \right\rangle + \frac{4}{5\sqrt{2}}\left\langle 0 \middle| 1 \right\rangle\left\langle
    1 \middle| 1 \right\rangle - \frac{3i}{5\sqrt{2}}\left\langle 1 \middle| 0 \right\rangle\left\langle
    1 \middle| 0 \right\rangle - \frac{3i}{5\sqrt{2}}\left\langle 1 \middle| 1 \right\rangle\left\langle
    1 \middle| 1 \right\rangle = - \frac{3i}{5\sqrt{2}},\qquad} & & \qquad \\ \end{array}](img/file171.png
    "\begin{array}{rlrl}  & {\left( {\frac{4}{5}\left\langle {01} \right| - \frac{3i}{5}\left\langle
    {11} \right|} \right)\left( {\frac{1}{\sqrt{2}}\left| {00} \right\rangle + \frac{1}{\sqrt{2}}\left|
    {11} \right\rangle} \right) = \qquad} & & \qquad \\  & {\quad\frac{4}{5\sqrt{2}}\left\langle
    01 \middle| 00 \right\rangle + \frac{4}{5\sqrt{2}}\left\langle 01 \middle| 11
    \right\rangle - \frac{3i}{5\sqrt{2}}\left\langle 11 \middle| 00 \right\rangle
    - \frac{3i}{5\sqrt{2}}\left\langle 11 \middle| 11 \right\rangle = \qquad} & &
    \qquad \\  & {\quad\frac{4}{5\sqrt{2}}\left\langle 0 \middle| 0 \right\rangle\left\langle
    1 \middle| 0 \right\rangle + \frac{4}{5\sqrt{2}}\left\langle 0 \middle| 1 \right\rangle\left\langle
    1 \middle| 1 \right\rangle - \frac{3i}{5\sqrt{2}}\left\langle 1 \middle| 0 \right\rangle\left\langle
    1 \middle| 0 \right\rangle - \frac{3i}{5\sqrt{2}}\left\langle 1 \middle| 1 \right\rangle\left\langle
    1 \middle| 1 \right\rangle = - \frac{3i}{5\sqrt{2}},\qquad} & & \qquad \\ \end{array}")'
  id: totrans-202
  prefs: []
  type: TYPE_IMG
- en: since ![\left\langle 0 \middle| 1 \right\rangle = \left\langle 1 \middle| 0
    \right\rangle = 0](img/file172.png "\left\langle 0 \middle| 1 \right\rangle =
    \left\langle 1 \middle| 0 \right\rangle = 0") and ![\left\langle 0 \middle| 0
    \right\rangle = \left\langle 1 \middle| 1 \right\rangle = 1](img/file173.png "\left\langle
    0 \middle| 0 \right\rangle = \left\langle 1 \middle| 1 \right\rangle = 1").
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: '1.4.2 Two-qubit gates: tensor products'
  id: totrans-204
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Of course, the operations that we can conduct on two-qubit systems need to be
    unitary. Thus, two-qubit quantum gates are ![4 \times 4](img/file174.png "4 \times
    4") unitary matrices that act on 4-dimensional column vectors. The simplest way
    to construct such matrices is by taking the tensor product of two one-qubit quantum
    gates. Namely, if we consider two one-qubit gates ![U_{1}](img/file175.png "U_{1}")
    and ![U_{2}](img/file176.png "U_{2}") and two one-qubit states ![\left| \psi_{1}
    \right\rangle](img/file177.png "\left| \psi_{1} \right\rangle") and ![\left| \psi_{2}
    \right\rangle](img/file178.png "\left| \psi_{2} \right\rangle"), we can form a
    two-qubit gate ![U_{1} \otimes U_{2}](img/file179.png "U_{1} \otimes U_{2}") that
    acts on ![\left| \psi_{1} \right\rangle \otimes \left| \psi_{2} \right\rangle](img/file180.png
    "\left| \psi_{1} \right\rangle \otimes \left| \psi_{2} \right\rangle") as
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: '![\left( {U_{1} \otimes U_{2}} \right)\left( {\left| \psi_{1} \right\rangle
    \otimes \left| \psi_{2} \right\rangle} \right) = \left( {U_{1}\left| \psi_{1}
    \right\rangle} \right) \otimes \left( {U_{2}\left| \psi_{2} \right\rangle} \right).](img/file181.png
    "\left( {U_{1} \otimes U_{2}} \right)\left( {\left| \psi_{1} \right\rangle \otimes
    \left| \psi_{2} \right\rangle} \right) = \left( {U_{1}\left| \psi_{1} \right\rangle}
    \right) \otimes \left( {U_{2}\left| \psi_{2} \right\rangle} \right).")'
  id: totrans-206
  prefs: []
  type: TYPE_IMG
- en: By linearity, we can extend ![U_{1} \otimes U_{2}](img/file179.png "U_{1} \otimes
    U_{2}") to any combination of two-qubit states and we can associate a matrix to
    ![U_{1} \otimes U_{2}](img/file179.png "U_{1} \otimes U_{2}"). In fact, said matrix
    is given by the tensor product of the matrices associated to ![U_{1}](img/file175.png
    "U_{1}") and ![U_{2}](img/file176.png "U_{2}"). More concretely, the expression
    for the tensor product, ![A \otimes B](img/file182.png "A \otimes B"), of the
    ![2 \times 2](img/file56.png "2 \times 2") matrices ![A](img/file183.png "A")
    and ![B](img/file184.png "B") is
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
- en: '![\begin{array}{rlrl} {\begin{pmatrix} a_{11} & a_{12} \\ a_{21} & a_{22} \\
    \end{pmatrix} \otimes \begin{pmatrix} b_{11} & b_{12} \\ b_{21} & b_{22} \\ \end{pmatrix}}
    & {= \begin{pmatrix} {a_{11}\begin{pmatrix} b_{11} & b_{12} \\ b_{21} & b_{22}
    \\ \end{pmatrix}} & {a_{12}\begin{pmatrix} b_{11} & b_{12} \\ b_{21} & b_{22}
    \\ \end{pmatrix}} \\ {a_{21}\begin{pmatrix} b_{11} & b_{12} \\ b_{21} & b_{22}
    \\ \end{pmatrix}} & {a_{22}\begin{pmatrix} b_{11} & b_{12} \\ b_{21} & b_{22}
    \\ \end{pmatrix}} \\ \end{pmatrix}\qquad} & & \qquad \\ & {= \begin{pmatrix} {a_{11}b_{11}}
    & {a_{11}b_{12}} & {a_{12}b_{11}} & {a_{12}b_{12}} \\ {a_{11}b_{21}} & {a_{11}b_{22}}
    & {a_{12}b_{21}} & {a_{12}b_{22}} \\ {a_{21}b_{11}} & {a_{21}b_{12}} & {a_{22}b_{11}}
    & {a_{22}b_{12}} \\ {a_{21}b_{21}} & {a_{21}b_{22}} & {a_{22}b_{21}} & {a_{22}b_{22}}
    \\ \end{pmatrix}.\qquad} & & \qquad \\ \end{array}](img/file185.png "\begin{array}{rlrl}
    {\begin{pmatrix} a_{11} & a_{12} \\ a_{21} & a_{22} \\ \end{pmatrix} \otimes \begin{pmatrix}
    b_{11} & b_{12} \\ b_{21} & b_{22} \\ \end{pmatrix}} & {= \begin{pmatrix} {a_{11}\begin{pmatrix}
    b_{11} & b_{12} \\ b_{21} & b_{22} \\ \end{pmatrix}} & {a_{12}\begin{pmatrix}
    b_{11} & b_{12} \\ b_{21} & b_{22} \\ \end{pmatrix}} \\ {a_{21}\begin{pmatrix}
    b_{11} & b_{12} \\ b_{21} & b_{22} \\ \end{pmatrix}} & {a_{22}\begin{pmatrix}
    b_{11} & b_{12} \\ b_{21} & b_{22} \\ \end{pmatrix}} \\ \end{pmatrix}\qquad} &
    & \qquad \\  & {= \begin{pmatrix} {a_{11}b_{11}} & {a_{11}b_{12}} & {a_{12}b_{11}}
    & {a_{12}b_{12}} \\ {a_{11}b_{21}} & {a_{11}b_{22}} & {a_{12}b_{21}} & {a_{12}b_{22}}
    \\ {a_{21}b_{11}} & {a_{21}b_{12}} & {a_{22}b_{11}} & {a_{22}b_{12}} \\ {a_{21}b_{21}}
    & {a_{21}b_{22}} & {a_{22}b_{21}} & {a_{22}b_{22}} \\ \end{pmatrix}.\qquad} &
    & \qquad \\ \end{array}")'
  id: totrans-208
  prefs: []
  type: TYPE_IMG
- en: Now it is easy to verify that this operation is indeed unitary and, hence, deserves
    the name of quantum gate.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 1.11
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
- en: Check that, given any pair of unitary matrices ![U_{1}](img/file175.png "U_{1}")
    and ![U_{2}](img/file176.png "U_{2}"), the inverse of ![U_{1} \otimes U_{2}](img/file179.png
    "U_{1} \otimes U_{2}") is ![U_{1}^{\dagger} \otimes U_{2}^{\dagger}](img/file186.png
    "U_{1}^{\dagger} \otimes U_{2}^{\dagger}") and that ![{(U_{1} \otimes U_{2})}^{\dagger}
    = U_{1}^{\dagger} \otimes U_{2}^{\dagger}](img/file187.png "{(U_{1} \otimes U_{2})}^{\dagger}
    = U_{1}^{\dagger} \otimes U_{2}^{\dagger}").
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: 'Tensor products of gates occur naturally when we have circuits with two qubits
    and pairs of individual one-qubit gates are acting on each of them. For instance,
    in the following circuit, the gate ![X \otimes X](img/file188.png "X \otimes X")
    acts on the two qubits and then it is followed by the gate ![H \otimes I](img/file189.png
    "H \otimes I"), where ![I](img/file53.png "I") is the identity gate:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
- en: '![XHX ](img/file190.jpg)'
  id: totrans-213
  prefs: []
  type: TYPE_IMG
- en: Exercise 1.12
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: Explicitly compute the matrices for the gates ![X \otimes X](img/file188.png
    "X \otimes X") and ![H \otimes I](img/file189.png "H \otimes I").
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: You may complain that we haven’t done anything new so far. And you would be
    right! In fact, quantum gates that are obtained as the tensor product of one-qubit
    gates can be seen as operations on isolated qubits that just happen to be applied
    at the same time. But wait and see! In the next subsection, we will introduce
    a completely different way of acting on two-qubit systems.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
- en: 1.4.3 The CNOT gate
  id: totrans-217
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By taking tensor products of one-qubit gates, we can only obtain operations
    that act on each qubit individually. But this just leaves us with a (rather boring)
    subset of all the possible two-qubit gates. There are many unitary matrices that
    cannot be written as the tensor product of other simple matrices. In the two-qubit
    case, probably the most important one is the **controlled-NOT** (or **controlled-**![\mathbf{X}](img/file191.png
    "\mathbf{X}")) gate, usually called the **CNOT gate**, given by the unitary matrix
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: '![\begin{pmatrix} 1 & 0 & 0 & 0 \\ 0 & 1 & 0 & 0 \\ 0 & 0 & 0 & 1 \\ 0 & 0
    & 1 & 0 \\ \end{pmatrix}.](img/file192.png "\begin{pmatrix} 1 & 0 & 0 & 0 \\ 0
    & 1 & 0 & 0 \\ 0 & 0 & 0 & 1 \\ 0 & 0 & 1 & 0 \\ \end{pmatrix}.")'
  id: totrans-219
  prefs: []
  type: TYPE_IMG
- en: It is illuminating to see how this gate acts on the elements of the two-qubit
    computational basis. As you can easily check, we get
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: '![\text{CNOT}\left| {00} \right\rangle = \left| {00} \right\rangle,\qquad\text{CNOT}\left|
    {01} \right\rangle = \left| {01} \right\rangle,\qquad\text{CNOT}\left| {10} \right\rangle
    = \left| {11} \right\rangle,\qquad\text{CNOT}\left| {11} \right\rangle = \left|
    {10} \right\rangle.](img/file193.png "\text{CNOT}\left| {00} \right\rangle = \left|
    {00} \right\rangle,\qquad\text{CNOT}\left| {01} \right\rangle = \left| {01} \right\rangle,\qquad\text{CNOT}\left|
    {10} \right\rangle = \left| {11} \right\rangle,\qquad\text{CNOT}\left| {11} \right\rangle
    = \left| {10} \right\rangle.")'
  id: totrans-221
  prefs: []
  type: TYPE_IMG
- en: This means that the value of the second qubit is flipped if and only if the
    value of the first qubit is ![1](img/file13.png "1"). Or, to put it in other words,
    the application of a NOT gate on the second qubit (that we call the **target**)
    is **controlled** by the first qubit. Now the name of this gate makes much more
    sense, doesn’t it?
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
- en: 'In a quantum circuit, the CNOT gate is represented as follows:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
- en: '![ ](img/file194.jpg)'
  id: totrans-224
  prefs: []
  type: TYPE_IMG
- en: Notice that the control qubit is indicated by a solid black circle and the target
    qubit is indicated by the ![\oplus](img/file195.png "\oplus") symbol (the symbol
    for an ![X](img/file9.png "X") gate can also be used instead of ![\oplus](img/file195.png
    "\oplus")).
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes, technical difficulties restrict the number of CNOT gates that can
    be actually implemented on a quantum computer. For instance, on a certain quantum
    chip you may have the possibility of applying a CNOT gate targeting qubit ![1](img/file13.png
    "1") and controlled by qubit ![0](img/file12.png "0"), but not the other way around.
    If you find yourself in such a situation, there’s no need to panic. If you use
    the circuit
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: '![HHHH ](img/file196.jpg)'
  id: totrans-227
  prefs: []
  type: TYPE_IMG
- en: you are effectively applying a CNOT gate with target in the top qubit and control
    in the bottom one. And that’s how you can save the day!
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: 'The CNOT gate can also be used to interchange or **swap** the states of two
    qubits, by using the following circuit:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
- en: '![ ](img/file197.jpg)'
  id: totrans-230
  prefs: []
  type: TYPE_IMG
- en: Exercise 1.13
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
- en: 'Check these equivalences in two different ways: by computing the matrices of
    the circuits and by obtaining the result of using them with qubits in states ![\left|
    {00} \right\rangle](img/file198.png "\left| {00} \right\rangle"), ![\left| {01}
    \right\rangle](img/file199.png "\left| {01} \right\rangle"), ![\left| {10} \right\rangle](img/file200.png
    "\left| {10} \right\rangle"), and ![\left| {11} \right\rangle](img/file201.png
    "\left| {11} \right\rangle").'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
- en: In any case, the most prominent use of the CNOT gate is, without a doubt, the
    ability to create entanglement, an intriguing property of quantum systems that
    we will study next.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
- en: 1.4.4 Entanglement
  id: totrans-234
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Oddly enough, in order to define when a quantum system is entangled, we first
    need to define when it is **not** entangled. We say that a state ![\left| \psi
    \right\rangle](img/file43.png "\left| \psi \right\rangle") is a **product state**
    if it can be written as the tensor product of two other states ![\left| \psi_{1}
    \right\rangle](img/file177.png "\left| \psi_{1} \right\rangle") and ![\left| \psi_{2}
    \right\rangle](img/file178.png "\left| \psi_{2} \right\rangle"), each of at least
    one qubit,
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
- en: as in
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
- en: '![\left| \psi \right\rangle = \left| \psi_{1} \right\rangle \otimes \left|
    \psi_{2} \right\rangle.](img/file202.png "\left| \psi \right\rangle = \left| \psi_{1}
    \right\rangle \otimes \left| \psi_{2} \right\rangle.")'
  id: totrans-237
  prefs: []
  type: TYPE_IMG
- en: If ![\left| \psi \right\rangle](img/file43.png "\left| \psi \right\rangle")
    is not a product state, we say that it is **entangled**.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
- en: For example, ![\left| {01} \right\rangle](img/file199.png "\left| {01} \right\rangle")
    is a product state, because we know that it is just another way of writing ![\left|
    0 \right\rangle \otimes \left| 1 \right\rangle](img/file203.png "\left| 0 \right\rangle
    \otimes \left| 1 \right\rangle"). Also, ![\sqrt{\left. 1\slash 2 \right.}(\left|
    {00} \right\rangle + \left| {10} \right\rangle)](img/file204.png "\sqrt{\left.
    1\slash 2 \right.}(\left| {00} \right\rangle + \left| {10} \right\rangle)") is
    a product state, because we can factor ![\left| 0 \right\rangle](img/file6.png
    "\left| 0 \right\rangle") on the second qubit to obtain
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
- en: '![\frac{1}{\sqrt{2}}(\left| {00} \right\rangle + \left| {10} \right\rangle)
    = \left( {\frac{1}{\sqrt{2}}\left( {\left| 0 \right\rangle + \left| 1 \right\rangle}
    \right)} \right)\left| 0 \right\rangle.](img/file205.png "\frac{1}{\sqrt{2}}(\left|
    {00} \right\rangle + \left| {10} \right\rangle) = \left( {\frac{1}{\sqrt{2}}\left(
    {\left| 0 \right\rangle + \left| 1 \right\rangle} \right)} \right)\left| 0 \right\rangle.")'
  id: totrans-240
  prefs: []
  type: TYPE_IMG
- en: On the other hand, ![\sqrt{\left. 1\slash 2 \right.}\left( {\left| {00} \right\rangle
    + \left| {11} \right\rangle} \right)](img/file206.png "\sqrt{\left. 1\slash 2
    \right.}\left( {\left| {00} \right\rangle + \left| {11} \right\rangle} \right)")
    is an entangled state. No matter how hard you try, it is impossible to write it
    as a product of two one-qubit states. Suppose, for sake of contradiction, that
    it were possible. Then, you would have
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
- en: '![\begin{array}{rlrl} {\frac{1}{\sqrt{2}}\left( {\left| {00} \right\rangle
    + \left| {11} \right\rangle} \right)} & {= \left( {a\left| 0 \right\rangle + b\left|
    1 \right\rangle} \right)\left( {c\left| 0 \right\rangle + d\left| 1 \right\rangle}
    \right)\qquad} & & \qquad \\ & {= ac\left| {00} \right\rangle + ad\left| {01}
    \right\rangle + bc\left| {01} \right\rangle + bd\left| {11} \right\rangle.\qquad}
    & & \qquad \\ \end{array}](img/file207.png "\begin{array}{rlrl} {\frac{1}{\sqrt{2}}\left(
    {\left| {00} \right\rangle + \left| {11} \right\rangle} \right)} & {= \left( {a\left|
    0 \right\rangle + b\left| 1 \right\rangle} \right)\left( {c\left| 0 \right\rangle
    + d\left| 1 \right\rangle} \right)\qquad} & & \qquad \\  & {= ac\left| {00} \right\rangle
    + ad\left| {01} \right\rangle + bc\left| {01} \right\rangle + bd\left| {11} \right\rangle.\qquad}
    & & \qquad \\ \end{array}")'
  id: totrans-242
  prefs: []
  type: TYPE_IMG
- en: But this forces ![ad](img/file208.png "ad") to be ![0](img/file12.png "0"),
    because we have no ![\left| {01} \right\rangle](img/file199.png "\left| {01} \right\rangle")
    component in ![\sqrt{\left. 1\slash 2 \right.}(\left| {00} \right\rangle + \left|
    {11} \right\rangle)](img/file209.png "\sqrt{\left. 1\slash 2 \right.}(\left| {00}
    \right\rangle + \left| {11} \right\rangle)"). Then, either ![a = 0](img/file210.png
    "a = 0"), in which case ![ac](img/file211.png "ac") is ![0](img/file12.png "0"),
    or ![d = 0](img/file212.png "d = 0"), from which ![bd = 0](img/file213.png "bd
    = 0") follows. In both cases, it is impossible to reach the equality that we needed.
    Thus, it follows that the state is entangled.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 1.14
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
- en: Is ![\sqrt{\left. 1\slash 3 \right.}(\left| {00} \right\rangle + \left| {01}
    \right\rangle + \left| {11} \right\rangle)](img/file214.png "\sqrt{\left. 1\slash
    3 \right.}(\left| {00} \right\rangle + \left| {01} \right\rangle + \left| {11}
    \right\rangle)") entangled? And what about ![\frac{1}{2}(\left| {00} \right\rangle
    + \left| {01} \right\rangle + \left| {10} \right\rangle + \left| {11} \right\rangle)](img/file215.png
    "\frac{1}{2}(\left| {00} \right\rangle + \left| {01} \right\rangle + \left| {10}
    \right\rangle + \left| {11} \right\rangle)")?
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
- en: When measured, entangled states can show correlations that go beyond what can
    be explained with classical physics. For instance, if we have the entangled state
    ![\sqrt{\left. 1\slash 2 \right.}\left( {\left| {00} \right\rangle + \left| {11}
    \right\rangle} \right)](img/file206.png "\sqrt{\left. 1\slash 2 \right.}\left(
    {\left| {00} \right\rangle + \left| {11} \right\rangle} \right)") and we measure
    the first qubit, we can obtain ![0](img/file12.png "0") or ![1](img/file13.png
    "1"), each with probability ![\left. 1\slash 2 \right.](img/file136.png "\left.
    1\slash 2 \right."). However, if we measure the second qubit afterwards, the result
    will be completely determined by the value obtained when measuring the first qubit
    and, in fact, will be exactly the same. If we invert the order and measure first
    the second qubit, then the result will be ![0](img/file12.png "0") or ![1](img/file13.png
    "1"), with equal probability. But, in this case, the result of a subsequent measurement
    of the first qubit will be completely determined!
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
- en: This still happens even if we separate the two qubits thousands of light years
    apart, as if one qubit could somehow know what the result of measuring the other
    qubit was. This curious behavior haunted many physicists during the 20th century,
    including Albert Einstein, who called it a *”spooky* *action at a distance”* (see
    [[34](ch030.xhtml#Xeinstein2014born)]). Nevertheless, the effects of entanglement
    have been repeatedly demonstrated in uncountable experiments (in fact, the Nobel
    Prize in Physics 2022 was awarded to Alain Aspect, John F. Clauser, and Anton
    Zeilinger, pioneers in studying and testing this phenomenon in practice [[10](ch030.xhtml#Xaspect1982experimental),
    [25](ch030.xhtml#Xclauser1969proposed), [41](ch030.xhtml#Xfreedman1972experimental),
    [19](ch030.xhtml#Xbouwmeester1997experimental)]). And, very importantly for us,
    entanglement is one of the most powerful resources available in quantum computing.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
- en: But entanglement is, by no means, the only puzzling feature of qubit systems.
    In the next subsection, we are going to mathematically prove that copying quantum
    information, an operation that you may have taken for granted, is not possible
    in general. These qubits are, indeed, full of surprises!
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
- en: 1.4.5 The no-cloning theorem
  id: totrans-249
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Another peculiar property of quantum systems is that, in general, they don’t
    allow us to **copy information**. Surprising as this may seem, it is just an easy
    consequence of the linearity of quantum gates. To show why, let us be more precise
    about what we would need in order to copy information, for instance with just
    two qubits. We would like to have a two-qubit quantum gate ![U](img/file51.png
    "U") that will be able to copy the first qubit into the second. That is, for any
    given quantum state ![\left| \psi \right\rangle](img/file43.png "\left| \psi \right\rangle"),
    we would need
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
- en: '![U\left| \psi \right\rangle\left| 0 \right\rangle = \left| \psi \right\rangle\left|
    \psi \right\rangle.](img/file216.png "U\left| \psi \right\rangle\left| 0 \right\rangle
    = \left| \psi \right\rangle\left| \psi \right\rangle.")'
  id: totrans-251
  prefs: []
  type: TYPE_IMG
- en: Then, ![U\left| {00} \right\rangle = \left| {00} \right\rangle](img/file217.png
    "U\left| {00} \right\rangle = \left| {00} \right\rangle") and ![U\left| {10} \right\rangle
    = \left| {11} \right\rangle](img/file218.png "U\left| {10} \right\rangle = \left|
    {11} \right\rangle") and, by linearity,
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
- en: '![U\left( {\frac{1}{\sqrt{2}}(\left| {00} \right\rangle + \left| {10} \right\rangle)}
    \right) = \frac{1}{\sqrt{2}}\left( {U\left| {00} \right\rangle + U\left| {10}
    \right\rangle} \right) = \frac{1}{\sqrt{2}}\left( {\left| {00} \right\rangle +
    \left| {11} \right\rangle} \right).](img/file219.png "U\left( {\frac{1}{\sqrt{2}}(\left|
    {00} \right\rangle + \left| {10} \right\rangle)} \right) = \frac{1}{\sqrt{2}}\left(
    {U\left| {00} \right\rangle + U\left| {10} \right\rangle} \right) = \frac{1}{\sqrt{2}}\left(
    {\left| {00} \right\rangle + \left| {11} \right\rangle} \right).")'
  id: totrans-253
  prefs: []
  type: TYPE_IMG
- en: We should highlight that the state that we have obtained is entangled, as we
    proved in the previous subsection.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
- en: Nevertheless, notice that, in our original state, we can factor the second ![\left|
    0 \right\rangle](img/file6.png "\left| 0 \right\rangle") out to obtain
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
- en: '![\frac{1}{\sqrt{2}}(\left| {00} \right\rangle + \left| {10} \right\rangle)
    = \left( \frac{\left| 0 \right\rangle + \left| 1 \right\rangle}{\sqrt{2}} \right)\left|
    0 \right\rangle.](img/file220.png "\frac{1}{\sqrt{2}}(\left| {00} \right\rangle
    + \left| {10} \right\rangle) = \left( \frac{\left| 0 \right\rangle + \left| 1
    \right\rangle}{\sqrt{2}} \right)\left| 0 \right\rangle.")'
  id: totrans-256
  prefs: []
  type: TYPE_IMG
- en: Then, in virtue of the action of ![U](img/file51.png "U"), we should have
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
- en: '![U\left( {\frac{1}{\sqrt{2}}(\left| {00} \right\rangle + \left| {10} \right\rangle)}
    \right) = U\left( {\left( \frac{\left| 0 \right\rangle + \left| 1 \right\rangle}{\sqrt{2}}
    \right)\left| 0 \right\rangle} \right) = \frac{(\left| 0 \right\rangle + \left|
    1 \right\rangle)}{\sqrt{2}}\frac{(\left| 0 \right\rangle + \left| 1 \right\rangle)}{\sqrt{2}},](img/file221.png
    "U\left( {\frac{1}{\sqrt{2}}(\left| {00} \right\rangle + \left| {10} \right\rangle)}
    \right) = U\left( {\left( \frac{\left| 0 \right\rangle + \left| 1 \right\rangle}{\sqrt{2}}
    \right)\left| 0 \right\rangle} \right) = \frac{(\left| 0 \right\rangle + \left|
    1 \right\rangle)}{\sqrt{2}}\frac{(\left| 0 \right\rangle + \left| 1 \right\rangle)}{\sqrt{2}},")'
  id: totrans-258
  prefs: []
  type: TYPE_IMG
- en: which is a product state. However, we had obtained earlier that ![U(\sqrt{\left.
    1\slash 2 \right.}(\left| {00} \right\rangle + \left| {10} \right\rangle)) = \sqrt{\left.
    1\slash 2 \right.}(\left| {00} \right\rangle + \left| {11} \right\rangle)](img/file222.png
    "U(\sqrt{\left. 1\slash 2 \right.}(\left| {00} \right\rangle + \left| {10} \right\rangle))
    = \sqrt{\left. 1\slash 2 \right.}(\left| {00} \right\rangle + \left| {11} \right\rangle)"),
    which is entangled! This contradiction implies that, alas, no such ![U](img/file51.png
    "U") exists.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
- en: This remarkable result is called the **no-cloning theorem** and we should explain
    its meaning in a little more detail. On the one hand, notice that this does not
    imply that we cannot copy classical information. In fact, if ![\left| \psi \right\rangle](img/file43.png
    "\left| \psi \right\rangle") is just ![\left| 0 \right\rangle](img/file6.png "\left|
    0 \right\rangle") or ![\left| 1 \right\rangle](img/file14.png "\left| 1 \right\rangle"),
    we can easily achieve ![U\left| \psi \right\rangle\left| 0 \right\rangle = \left|
    \psi \right\rangle\left| \psi \right\rangle](img/file223.png "U\left| \psi \right\rangle\left|
    0 \right\rangle = \left| \psi \right\rangle\left| \psi \right\rangle") by taking
    ![U](img/file51.png "U") to be the CNOT gate. On the other hand, the theorem applies
    to unknown states ![\left| \psi \right\rangle](img/file43.png "\left| \psi \right\rangle").
    If we know what ![\left| \psi \right\rangle](img/file43.png "\left| \psi \right\rangle")
    is — that is, if we know a circuit that prepares ![\left| \psi \right\rangle](img/file43.png
    "\left| \psi \right\rangle") starting from ![\left| 0 \right\rangle](img/file6.png
    "\left| 0 \right\rangle") — then, of course, we can create as many independent
    copies of it as we want. However, if ![\left| \psi \right\rangle](img/file43.png
    "\left| \psi \right\rangle") is handed to us without any additional information
    about its state, the no-cloning theorem shows that we cannot replicate its state
    in general.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
- en: To learn more…
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
- en: The no-cloning theorem plays an important role in the security of quantum key
    distribution protocols such as the famous **BB84**, introduced in 1984 by Bennett
    and Brassard [[13](ch030.xhtml#Xbennett84quantum)].
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
- en: After this brief detour, let’s return to our study of two-qubit quantum gates.
    In the next subsection, we will show how to construct many interesting two-qubit
    unitary operations whose action is controlled by one of their inputs.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
- en: 1.4.6 Controlled gates
  id: totrans-264
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You may be wondering if, in addition to a controlled-![X](img/file9.png "X")
    (or CNOT) gate, there are also **controlled-**![\mathbf{Y}](img/file224.png "\mathbf{Y}"),
    **controlled-**![\mathbf{Z}](img/file225.png "\mathbf{Z}"), or **controlled-**![\mathbf{H}](img/file226.png
    "\mathbf{H}") gates. The answer is a resounding yes and, in fact, for any quantum
    gate ![U](img/file51.png "U"), it is possible to define a **controlled-**![U](img/file51.png
    "U") (or, simply, ![\text{C}\mathbf{U}](img/file227.png "\text{C}\mathbf{U}"))
    gate whose action on the computational basis is
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
- en: '![\text{C}U\left| {00} \right\rangle = \left| {00} \right\rangle,\qquad\text{C}U\left|
    {01} \right\rangle = \left| {01} \right\rangle,\qquad\text{C}U\left| {10} \right\rangle
    = \left| 1 \right\rangle U\left| 0 \right\rangle,\qquad\text{C}U\left| {11} \right\rangle
    = \left| 1 \right\rangle U\left| 1 \right\rangle.](img/file228.png "\text{C}U\left|
    {00} \right\rangle = \left| {00} \right\rangle,\qquad\text{C}U\left| {01} \right\rangle
    = \left| {01} \right\rangle,\qquad\text{C}U\left| {10} \right\rangle = \left|
    1 \right\rangle U\left| 0 \right\rangle,\qquad\text{C}U\left| {11} \right\rangle
    = \left| 1 \right\rangle U\left| 1 \right\rangle.")'
  id: totrans-266
  prefs: []
  type: TYPE_IMG
- en: Exercise 1.15
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
- en: Check that the matrix of ![\text{C}U](img/file229.png "\text{C}U") is
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
- en: '![\begin{pmatrix} 1 & 0 & 0 & 0 \\ 0 & 1 & 0 & 0 \\ 0 & 0 & u_{11} & u_{12}
    \\ 0 & 0 & u_{21} & u_{22} \\ \end{pmatrix},](img/file230.png "\begin{pmatrix}
    1 & 0 & 0 & 0 \\ 0 & 1 & 0 & 0 \\ 0 & 0 & u_{11} & u_{12} \\ 0 & 0 & u_{21} &
    u_{22} \\ \end{pmatrix},")'
  id: totrans-269
  prefs: []
  type: TYPE_IMG
- en: where ![{(u_{ij})}_{i,j = 1}^{2}](img/file231.png "{(u_{ij})}_{i,j = 1}^{2}")
    is the matrix of ![U](img/file51.png "U"). Check also that ![\text{C}U](img/file229.png
    "\text{C}U") is unitary. What is the adjoint of ![\text{C}U](img/file229.png "\text{C}U")?
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
- en: The circuit representation of a ![\text{C}U](img/file229.png "\text{C}U") gate
    is similar to the one that we use for the CNOT gate, namely
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
- en: '![U ](img/file232.jpg) ,'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
- en: where the solid black circle indicates the control and the box with ![U](img/file51.png
    "U") inside indicates the target.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
- en: Constructing a controlled gate is simpler than it seems, provided your quantum
    computer already implements rotation gates and the two-qubit CNOT gate. In fact,
    from the decomposition in rotations that we mentioned at the end of *Section*
    *[*1.3.4*](#x1-250001.3.4), it can be proved (see the book by Nielsen and Chuang
    [[69](ch030.xhtml#Xnielsen11quantum), Corollary 4.2]) that any one-qubit quantum
    gate ![U](img/file51.png "U") can be written in the form*
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
- en: '*![U = e^{i\theta}AXBXC](img/file233.png "U = e^{i\theta}AXBXC")'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
- en: 'for some angle ![\theta](img/file89.png "\theta") and gates ![A](img/file183.png
    "A"), ![B](img/file184.png "B"), and ![C](img/file234.png "C") such that ![ABC
    = I](img/file235.png "ABC = I"). Then, the following circuit implements ![\text{C}U](img/file229.png
    "\text{C}U"):'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
- en: '![RCBA (𝜃) Z ](img/file236.jpg)'
  id: totrans-277
  prefs: []
  type: TYPE_IMG
- en: 'Sometimes, though, constructing a controlled gate is much easier. For instance,
    it can be shown that a controlled-![Z](img/file8.png "Z") gate can be obtained
    from a controlled-![X](img/file9.png "X") and two ![H](img/file10.png "H") gates,
    as shown in the identity of the following circuits:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
- en: '![Z ](img/file237.jpg) ![\qquad = \qquad](img/file238.png "\qquad = \qquad")
    ![HH ](img/file239.jpg)'
  id: totrans-279
  prefs: []
  type: TYPE_IMG
- en: Exercise 1.16
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
- en: Prove the preceding equivalence.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
- en: We now have everything we need in order to construct our first two-qubit quantum
    circuit. Let’s get those qubits entangled!
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
- en: 1.4.7 Hello, entangled world!
  id: totrans-283
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To finish up with our study of two-qubit systems, let us show how to create
    entangled states with the help of the CNOT gate. Consider the following circuit:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
- en: '![|H|00⟩⟩ ](img/file240.jpg)'
  id: totrans-285
  prefs: []
  type: TYPE_IMG
- en: Initially, the state of the system is ![\left| {00} \right\rangle](img/file198.png
    "\left| {00} \right\rangle"). After we apply the ![H](img/file10.png "H") gate,
    we get into the state ![\sqrt{\left. 1\slash 2 \right.}(\left| {00} \right\rangle
    + \left| {10} \right\rangle)](img/file204.png "\sqrt{\left. 1\slash 2 \right.}(\left|
    {00} \right\rangle + \left| {10} \right\rangle)"). Finally, when we apply the
    CNOT gate, the state changes to ![\sqrt{\left. 1\slash 2 \right.}(\left| {00}
    \right\rangle + \left| {11} \right\rangle)](img/file209.png "\sqrt{\left. 1\slash
    2 \right.}(\left| {00} \right\rangle + \left| {11} \right\rangle)"), which, as
    we proved in *Section* * [*1.4.4*](#x1-310001.4.4), is indeed an entangled state.*
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
- en: '*The state ![\sqrt{\left. 1\slash 2 \right.}\left( {\left| {00} \right\rangle
    + \left| {11} \right\rangle} \right)](img/file206.png "\sqrt{\left. 1\slash 2
    \right.}\left( {\left| {00} \right\rangle + \left| {11} \right\rangle} \right)")
    is known as a **Bell state**, of which there are four. The other three are ![\sqrt{\left.
    1\slash 2 \right.}\left( {\left| {00} \right\rangle - \left| {11} \right\rangle}
    \right)](img/file241.png "\sqrt{\left. 1\slash 2 \right.}\left( {\left| {00} \right\rangle
    - \left| {11} \right\rangle} \right)"), ![\sqrt{\left. 1\slash 2 \right.}(\left|
    {10} \right\rangle + \left| {01} \right\rangle)](img/file242.png "\sqrt{\left.
    1\slash 2 \right.}(\left| {10} \right\rangle + \left| {01} \right\rangle)"), and
    ![\sqrt{\left. 1\slash 2 \right.}(\left| {10} \right\rangle - \left| {01} \right\rangle)](img/file243.png
    "\sqrt{\left. 1\slash 2 \right.}(\left| {10} \right\rangle - \left| {01} \right\rangle)").
    All of them are entangled, and they can be prepared with circuits similar to the
    preceding one.'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 1.17
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
- en: 'Show that all four Bell states are entangled. Obtain circuits to prepare them.
    *Hint*: you can use ![Z](img/file8.png "Z") and ![X](img/file9.png "X") gates
    after the CNOT in the preceding circuit.'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
- en: We are now ready for the big moment. In the next section, we will finally learn
    how to work with not just one or two qubits, but with as many as we can get in
    our quantum computers.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
- en: 1.5 Working with multiple qubits and universality
  id: totrans-291
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have mastered working with two-qubit systems, it will be fairly
    straightforward to generalize all the notions that we have been studying to the
    case in which the number of qubits in our circuits is arbitrarily big. You know
    the drill: we will start by defining, mathematically, what a multi-qubit system
    is, we will then learn how to measure it and, finally, we will introduce quantum
    gates that act on many qubits at the same time.'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
- en: 1.5.1 Multi-qubit systems
  id: totrans-293
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With all that we have learned so far, it will now be very easy to understand
    how to work with **multi-qubit systems**.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
- en: As you may have already deduced, if we have ![n](img/file244.png "n") qubits,
    the states that constitute the computational basis are
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
- en: '![\begin{matrix} {\left| 0 \right\rangle \otimes \left| 0 \right\rangle \otimes
    \cdots \otimes \left| 0 \right\rangle,} & \\ {\left| 0 \right\rangle \otimes \left|
    0 \right\rangle \otimes \cdots \otimes \left| 1 \right\rangle,} & \\ {\vdots}
    & \\ {\left| 1 \right\rangle \otimes \left| 1 \right\rangle \otimes \cdots \otimes
    \left| 1 \right\rangle.} & \\ \end{matrix}](img/file245.png "\begin{matrix} {\left|
    0 \right\rangle \otimes \left| 0 \right\rangle \otimes \cdots \otimes \left| 0
    \right\rangle,} & \\ {\left| 0 \right\rangle \otimes \left| 0 \right\rangle \otimes
    \cdots \otimes \left| 1 \right\rangle,} & \\ {\vdots} & \\ {\left| 1 \right\rangle
    \otimes \left| 1 \right\rangle \otimes \cdots \otimes \left| 1 \right\rangle.}
    & \\ \end{matrix}")'
  id: totrans-296
  prefs: []
  type: TYPE_IMG
- en: We usually omit the ![\otimes](img/file145.png "\otimes") symbol to write
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
- en: '![\begin{matrix} {\left| 0 \right\rangle\left| 0 \right\rangle\cdots\left|
    0 \right\rangle,} & \\ {\left| 0 \right\rangle\left| 0 \right\rangle\cdots\left|
    1 \right\rangle,} & \\ {\left| 1 \right\rangle\left| 1 \right\rangle\cdots\left|
    1 \right\rangle} & \\ \end{matrix}](img/file246.png "\begin{matrix} {\left| 0
    \right\rangle\left| 0 \right\rangle\cdots\left| 0 \right\rangle,} & \\ {\left|
    0 \right\rangle\left| 0 \right\rangle\cdots\left| 1 \right\rangle,} & \\ {\left|
    1 \right\rangle\left| 1 \right\rangle\cdots\left| 1 \right\rangle} & \\ \end{matrix}")'
  id: totrans-298
  prefs: []
  type: TYPE_IMG
- en: or
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
- en: '![\left| {00\cdots 0} \right\rangle,\left| {00\cdots 1} \right\rangle,\ldots,\left|
    {11\cdots 1} \right\rangle](img/file247.png "\left| {00\cdots 0} \right\rangle,\left|
    {00\cdots 1} \right\rangle,\ldots,\left| {11\cdots 1} \right\rangle")'
  id: totrans-300
  prefs: []
  type: TYPE_IMG
- en: or simply
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
- en: '![\left| 0 \right\rangle,\left| 1 \right\rangle,\ldots,\left| {2^{n} - 1} \right\rangle.](img/file248.png
    "\left| 0 \right\rangle,\left| 1 \right\rangle,\ldots,\left| {2^{n} - 1} \right\rangle.")'
  id: totrans-302
  prefs: []
  type: TYPE_IMG
- en: Important note
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
- en: When using the ![\left| 0 \right\rangle,\left| 1 \right\rangle,\ldots,\left|
    {2^{n} - 1} \right\rangle](img/file249.png "\left| 0 \right\rangle,\left| 1 \right\rangle,\ldots,\left|
    {2^{n} - 1} \right\rangle") notation for basis states, the total number of qubits
    must be clear from context. Otherwise, a state like, for example, ![\left| 2 \right\rangle](img/file250.png
    "\left| 2 \right\rangle") might mean either ![\left| {10} \right\rangle](img/file200.png
    "\left| {10} \right\rangle"), ![\left| {010} \right\rangle](img/file251.png "\left|
    {010} \right\rangle"), ![\left| {0010} \right\rangle](img/file252.png "\left|
    {0010} \right\rangle"), or any string with leading zeroes and ending in ![10](img/file161.png
    "10")…and that would be an intolerable ambiguity!
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
- en: Of course, a generic state of the system will then be of the form
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
- en: '![\left| \psi \right\rangle = a_{0}\left| 0 \right\rangle + a_{1}\left| 1 \right\rangle
    + \ldots + a_{2^{n} - 1}\left| {2^{n} - 1} \right\rangle](img/file253.png "\left|
    \psi \right\rangle = a_{0}\left| 0 \right\rangle + a_{1}\left| 1 \right\rangle
    + \ldots + a_{2^{n} - 1}\left| {2^{n} - 1} \right\rangle")'
  id: totrans-306
  prefs: []
  type: TYPE_IMG
- en: subject to the only condition that the amplitudes ![a_{i}](img/file254.png "a_{i}")
    should be complex numbers such that ![{\sum}_{l = 0}^{2^{n} - 1}\left| a_{l} \right|^{2}
    = 1](img/file255.png "{\sum}_{l = 0}^{2^{n} - 1}\left| a_{l} \right|^{2} = 1").
    Our dear old friend, the normalization condition!
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
- en: To learn more…
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
- en: Notice that the number of parameters describing the general state of an ![n](img/file244.png
    "n")-qubit system is exponential in ![n](img/file244.png "n"). For highly entangled
    states, we do not know how to represent all this information in a more succinct
    way and it is strongly suspected that it is not possible. Part of the power of
    quantum computing comes from this possibility of implicitly working with ![2^{n}](img/file256.png
    "2^{n}") complex numbers by manipulating just ![n](img/file244.png "n") qubits.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 1.18
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
- en: 'Check that the basis state ![\left| j \right\rangle](img/file257.png "\left|
    j \right\rangle") is represented by a ![2^{n}](img/file256.png "2^{n}")-dimensional
    column vector whose ![j](img/file258.png "j")-th component is 1, while the rest
    are 0 (*Hint*: Use, repeatedly, the expression for the tensor product of column
    vectors that we discussed in *Section* * [*1.4.1*](#x1-280001.4.1) and the fact
    that the tensor product is associative). Deduce that any ![n](img/file244.png
    "n")-qubit state can be represented by a ![2^{n}](img/file256.png "2^{n}")-dimensional
    column vector with unit length.*'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
- en: '*If we decide to measure all the qubits of the system in the computational
    basis, we will obtain ![m](img/file259.png "m") with probability ![\left| a_{m}
    \right|^{2}](img/file260.png "\left| a_{m} \right|^{2}"). If that is the case,
    then the state will collapse to ![\left| m \right\rangle](img/file261.png "\left|
    m \right\rangle"). But if we only measure one of the qubits, say the ![j](img/file258.png
    "j")-th one, then we will obtain ![0](img/file12.png "0") with probability'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
- en: '![\sum\limits_{l \in J_{0}}\left| a_{l} \right|^{2},](img/file262.png "\sum\limits_{l
    \in J_{0}}\left| a_{l} \right|^{2},")'
  id: totrans-313
  prefs: []
  type: TYPE_IMG
- en: where ![J_{0}](img/file263.png "J_{0}") is the set of numbers whose ![j](img/file258.png
    "j")-th bit is ![0](img/file12.png "0"). In this scenario, the state of the system
    after measuring ![0](img/file12.png "0") would be
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
- en: '![\frac{\sum\limits_{l \in J_{0}}a_{l}\left| l \right\rangle}{\sqrt{\sum\limits_{l
    \in J_{0}}\left| a_{i} \right|^{2}}}.](img/file264.png "\frac{\sum\limits_{l \in
    J_{0}}a_{l}\left| l \right\rangle}{\sqrt{\sum\limits_{l \in J_{0}}\left| a_{i}
    \right|^{2}}}.")'
  id: totrans-315
  prefs: []
  type: TYPE_IMG
- en: Exercise 1.19
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
- en: Derive the formulas for the case in which the result of the measurement is ![1](img/file13.png
    "1").
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 1.20
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
- en: What is the probability of getting ![0](img/file12.png "0") when we measure
    the second qubit of ![\left. (1\slash 2)\left| {100} \right\rangle + (1\slash
    2)\left| {010} \right\rangle + \sqrt{\left. 1\slash 2 \right.}\left| {001} \right\rangle
    \right.](img/file265.png "\left. (1\slash 2)\left| {100} \right\rangle + (1\slash
    2)\left| {010} \right\rangle + \sqrt{\left. 1\slash 2 \right.}\left| {001} \right\rangle
    \right.")? What will the state be after the measurement if we indeed get ![0](img/file12.png
    "0")?
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
- en: Computing inner products of ![n](img/file244.png "n")-qubit systems in Dirac
    notation is very similar to doing it with two-qubit systems. The procedure is
    analogous to the one we showed in *Section* * [*1.4.1*](#x1-280001.4.1), but taking
    into account that*
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
- en: '*![\left( {\left\langle \psi_{1} \right| \otimes \ldots \otimes \left\langle
    \psi_{n} \right|} \right)\left( {\left| \varphi_{1} \right\rangle \otimes \ldots
    \otimes \left| \varphi_{n} \right\rangle} \right) = \left\langle \psi_{1} \middle|
    \varphi_{1} \right\rangle\ldots\left\langle \psi_{n} \middle| \varphi_{n} \right\rangle.](img/file266.png
    "\left( {\left\langle \psi_{1} \right| \otimes \ldots \otimes \left\langle \psi_{n}
    \right|} \right)\left( {\left| \varphi_{1} \right\rangle \otimes \ldots \otimes
    \left| \varphi_{n} \right\rangle} \right) = \left\langle \psi_{1} \middle| \varphi_{1}
    \right\rangle\ldots\left\langle \psi_{n} \middle| \varphi_{n} \right\rangle.")'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 1.21
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
- en: Compute the inner product of ![\left| x \right\rangle](img/file267.png "\left|
    x \right\rangle") and ![\left| y \right\rangle](img/file268.png "\left| y \right\rangle"),
    where ![x](img/file269.png "x") and ![y](img/file270.png "y") are both binary
    strings of length ![n](img/file244.png "n"). Use your result to prove that ![{\{\left|
    x \right\rangle\}}_{x \in {\{ 0,1\}}^{n}}](img/file271.png "{\{\left| x \right\rangle\}}_{x
    \in {\{ 0,1\}}^{n}}") is, indeed, an orthonormal basis.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 1.22
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
- en: Compute the inner product of the states ![\sqrt{\left. 1\slash 2 \right.}\left(
    {\left| {000} \right\rangle + \left| {111} \right\rangle} \right)](img/file272.png
    "\sqrt{\left. 1\slash 2 \right.}\left( {\left| {000} \right\rangle + \left| {111}
    \right\rangle} \right)") and ![\left. 1\slash 2\left( {\left| {000} \right\rangle
    + \left| {011} \right\rangle + \left| {101} \right\rangle + \left| {110} \right\rangle}
    \right) \right.](img/file273.png "\left. 1\slash 2\left( {\left| {000} \right\rangle
    + \left| {011} \right\rangle + \left| {101} \right\rangle + \left| {110} \right\rangle}
    \right) \right.").
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
- en: We can now turn to the question of how to operate on many qubits at once. Let’s
    define multi-qubit gates!
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
- en: 1.5.2 Multi-qubit gates
  id: totrans-327
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Since ![n](img/file244.png "n")-qubit states are represented by ![2^{n}](img/file256.png
    "2^{n}")-dimensional column vectors, ![n](img/file244.png "n")-qubit gates can
    be identified with ![2^{n} \times 2^{n}](img/file274.png "2^{n} \times 2^{n}")
    unitary matrices. Similar to the two-qubit case, we can construct ![n](img/file244.png
    "n")-qubit gates by taking the tensor product of gates on a smaller number of
    qubits. Namely, if ![U_{1}](img/file175.png "U_{1}") is an ![n_{1}](img/file275.png
    "n_{1}")-qubit gate and ![U_{2}](img/file176.png "U_{2}") is an ![n_{2}](img/file276.png
    "n_{2}")-qubit gate, then ![U_{1} \otimes U_{2}](img/file179.png "U_{1} \otimes
    U_{2}") is an ![(n_{1} + n_{2})](img/file277.png "(n_{1} + n_{2})")-qubit gate
    and its matrix is given by the tensor product of the matrices ![U_{1}](img/file175.png
    "U_{1}") and ![U_{2}](img/file176.png "U_{2}").
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
- en: To learn more…
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
- en: The expression for the tensor product of two matrices ![A](img/file183.png "A")
    and ![B](img/file184.png "B") is
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
- en: '![\begin{pmatrix} a_{11} & {\ldots} & a_{1q} \\ {\vdots} & \ddots & {\vdots}
    \\ a_{p1} & {\ldots} & a_{pq} \\ \end{pmatrix} \otimes B = \begin{pmatrix} {a_{11}B}
    & {\ldots} & {a_{1q}B} \\ {\vdots} & \ddots & {\vdots} \\ {a_{p1}B} & {\ldots}
    & {a_{pq}B} \\ \end{pmatrix}.](img/file278.png "\begin{pmatrix} a_{11} & {\ldots}
    & a_{1q} \\ {\vdots} & \ddots & {\vdots} \\ a_{p1} & {\ldots} & a_{pq} \\ \end{pmatrix}
    \otimes B = \begin{pmatrix} {a_{11}B} & {\ldots} & {a_{1q}B} \\ {\vdots} & \ddots
    & {\vdots} \\ {a_{p1}B} & {\ldots} & {a_{pq}B} \\ \end{pmatrix}.")'
  id: totrans-331
  prefs: []
  type: TYPE_IMG
- en: However, there are ![n](img/file244.png "n")-qubit gates that cannot be constructed
    as tensor products of smaller gates. One such example is the **Toffoli** or **CCNOT**
    gate, a three-qubit gate that acts on the computational basis as
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
- en: '![\text{CCNOT}\left| x \right\rangle\left| y \right\rangle\left| z \right\rangle
    = \left| x \right\rangle\left| y \right\rangle\left| {z \oplus \left( {x \land
    y} \right)} \right\rangle,](img/file279.png "\text{CCNOT}\left| x \right\rangle\left|
    y \right\rangle\left| z \right\rangle = \left| x \right\rangle\left| y \right\rangle\left|
    {z \oplus \left( {x \land y} \right)} \right\rangle,")'
  id: totrans-333
  prefs: []
  type: TYPE_IMG
- en: where ![\oplus](img/file195.png "\oplus") is the **XOR** function and ![\land](img/file280.png
    "\land") is the symbol for the AND Boolean function. Thus, CCNOT applies a doubly
    controlled (in this case, by the first two qubits) NOT gate to the third qubit
    — hence the name!
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 1.23
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
- en: Obtain the matrix for the CCNOT gate and verify that it is unitary.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
- en: The Toffoli gate is important because, using it and with the help of auxiliary
    qubits, we can construct any classical Boolean operator. For instance, ![\text{CCNOT}\left|
    1 \right\rangle\left| 1 \right\rangle\left| z \right\rangle = \left| 1 \right\rangle\left|
    1 \right\rangle\left| {\neg z} \right\rangle](img/file281.png "\text{CCNOT}\left|
    1 \right\rangle\left| 1 \right\rangle\left| z \right\rangle = \left| 1 \right\rangle\left|
    1 \right\rangle\left| {\neg z} \right\rangle") (where ![\neg z](img/file282.png
    "\neg z") is the negation of ![z](img/file81.png "z")) and ![\text{CCNOT}\left|
    x \right\rangle\left| y \right\rangle\left| 0 \right\rangle = \left| x \right\rangle\left|
    y \right\rangle\left| {x \land y} \right\rangle](img/file283.png "\text{CCNOT}\left|
    x \right\rangle\left| y \right\rangle\left| 0 \right\rangle = \left| x \right\rangle\left|
    y \right\rangle\left| {x \land y} \right\rangle"). This shows that, with quantum
    circuits, we can simulate the behavior of any classical digital circuit at the
    cost of using some additional ancillary qubits, since any Boolean function can
    be built with just negations and conjunctions. This is somewhat surprising, because
    we know that all quantum gates are invertible, while not all Boolean functions
    are. It then follows that we could make all of our digital circuits reversible
    just by implementing a classical version of the Toffoli gate!
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
- en: We will not be studying any other concrete examples of gates that act on three
    (or more!) qubits because, in fact, we can simulate their behavior with circuits
    that only use one- and two-qubit gates. Keep on reading to know how!
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
- en: 1.5.3 Universal gates in quantum computing
  id: totrans-339
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Current quantum computers can’t implement every possible quantum gate. Instead,
    they rely on **universality results** that show how any unitary operation can
    be decomposed as a circuit that uses a reduced set of **primitive** gates. In
    previous sections, we mentioned, for instance, that any one-qubit gate can be
    obtained by using just ![R_{Z}](img/file120.png "R_{Z}") and ![R_{Y}](img/file119.png
    "R_{Y}") rotations. It turns out that similar results exist for the general case
    of ![n](img/file244.png "n")-qubit quantum gates.
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
- en: To us, it will be important to know that, for any unitary operation, we can
    construct a circuit that implements it using only one-qubit gates and the CNOT
    gate. For this reason, we say that those gates are **universal** — in the same
    sense that, for example, negation and conjunction are universal for Boolean logic.
    This fact will be crucial for our study of **feature maps** and **variational
    forms** in connection to **quantum neural networks** and other quantum machine
    learning models.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
- en: To learn more…
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
- en: In addition to one-qubit gates plus CNOT, there are many other sets of universal
    gates. For instance, it can be shown that the three gates ![H](img/file10.png
    "H"), ![T](img/file74.png "T"), and CNOT can be used to approximate any unitary
    operation to any desired accuracy — and they are universal in that sense. See
    Section *4.5* of the book by Nielsen and Chuang [[69](ch030.xhtml#Xnielsen11quantum)]
    for proofs of these facts and for more examples of universal gate sets.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
- en: 'To illustrate how CNOT and one-qubit gates can be used to implement any other
    quantum gate, the following circuit shows a possible decomposition of the Toffoli
    gate targeting the top qubit:'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
- en: '![HTTTTHTTT††† ](img/file284.jpg) .'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 1.24
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
- en: Verify that the preceding circuit implements the Toffoli gate by checking its
    action on the states of the computational basis.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
- en: This concludes our review of the fundamentals of quantum computing. We’ve come
    a long way since the beginning of this chapter, but by now we have mastered all
    the mathematics that we will need in order to study quantum machine learning and
    quantum optimization algorithms. Soon, we will see all these concepts in action!
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-349
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we have introduced the quantum circuit model and the main
    concepts that it relies on: qubits, gates, and measurements. We have started by
    studying the most humble circuits, those that only have one or two qubits, but
    we have used our experience with them to grow all the way up to multi-qubit systems.
    In the process, we have discovered some powerful properties, such as superposition
    and entanglement, and we have mastered the mathematics — mainly some linear algebra
    — needed to work with them.'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
- en: These notions will be extremely valuable to us, because they make up the language
    in which we will be describing the quantum algorithms for machine learning and
    optimization that we will study in the rest of the book. Soon, all the pieces
    will come together to form a beautiful structure. And we will be able to appreciate
    it and understand it fully because of the solid foundations that we have acquired
    by now.
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will start applying all that we have learned by implementing
    and running quantum circuits on quantum simulators and on actual quantum computers.
    We don’t know about you, but we are pretty excited!*****************
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
