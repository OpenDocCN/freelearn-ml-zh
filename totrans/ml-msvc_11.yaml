- en: '11'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Managing the New System’s Deployment – Greenfield versus Brownfield
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapters, we discussed building an MSA system and integrating
    AI algorithms to form an Intelligent MSA. We covered concepts, techniques, and
    methodologies while accompanying them with examples.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will discuss the different **greenfield** and **brownfield**
    deployment considerations, and ways to smoothly deploy the new intelligent MSA
    system with minimal operational disruptions, to be able to maintain overall system
    stability and business continuity.
  prefs: []
  type: TYPE_NORMAL
- en: We will also examine how to overcome general deployment challenges, particularly
    in brownfield deployments where existing systems are in production, and implement
    a successful and effective migration plan for the new Intelligent MSA system.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Deployment strategies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Greenfield versus brownfield deployment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Overcoming deployment challenges
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deployment strategies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Organizations utilize various techniques to minimize downtime and ensure a
    seamless and successful deployment when deploying a new system. Some of the most
    commonly used deployment strategies organizations follow are Recreate, Ramped,
    Blue/Green, Canary, A/B Testing, and Shadow deployments:'
  prefs: []
  type: TYPE_NORMAL
- en: The **Recreate deployment** is a simple, straightforward approach that involves
    replacing the entire infrastructure at once, similar to the Big Bang migration
    we discussed in [*Chapter 3*](B18934_03.xhtml#_idTextAnchor039). This approach
    is best suited for small and simple systems; however, it also means that the system
    is completely offline during the deployment process, which can lead to significant
    downtime.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Ramped deployment** is similar to the Trickle migration we discussed in
    [*Chapter 3*](B18934_03.xhtml#_idTextAnchor039). The Ramped deployment allows
    the existing system to remain online during the deployment process. The new system
    is brought online gradually, and traffic is gradually routed to it, allowing both
    systems to stay available to users throughout the deployment process. Although
    this can be effective in small businesses and simple systems, this approach is
    ideal for larger, more complex systems, where minimizing downtime is a priority.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Blue/Green deployment** is a technique that involves maintaining two identical
    production environments, referred to as “blue” and “green,” and routing traffic
    to one or the other. This allows for a seamless switchover in case any operational
    issues are experienced in the newly deployed version. This method is best suited
    for mission-critical systems since it ensures that there is always a working system
    available to users at any given time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Canary deployment** is a technique that involves deploying the new system
    alongside the existing one and routing a small percentage of traffic to the new
    system. This allows for testing the new system with actual production traffic
    before rolling it out completely. If problems arise in the new system, the rollout
    can be reevaluated based on the type of issues encountered; then, the previous
    system can be reinstated while the problems are being resolved. This approach
    is often used to deploy changes to critical systems that require high levels of
    availability.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **A/B testing deployment** is another approach that involves simultaneously
    running both the old and the new system but testing them with different subsets
    of users to determine which performs better. This method works best for testing
    new system features or services.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the **Shadow deployment**, the new system is deployed to run alongside the
    existing system. The live production traffic of the old system is then redirected
    to the new system to test a newly released feature, the system stability under
    load, or test the new system altogether. This approach is best used in large systems
    deployed in large organizations.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following is a comparison summary of all the preceding deployment strategies:'
  prefs: []
  type: TYPE_NORMAL
- en: '|  | **Continuous Uptime** | **Production** **Traffic Testing** | **Cost**
    | **Complexity** |'
  prefs: []
  type: TYPE_TB
- en: '| Recreate | No | No | Low | Low |'
  prefs: []
  type: TYPE_TB
- en: '| Ramped | Yes | No | Low | Low |'
  prefs: []
  type: TYPE_TB
- en: '| Blue/Green | Yes | No | High | Medium |'
  prefs: []
  type: TYPE_TB
- en: '| Canary | Yes | Yes | Low | Medium |'
  prefs: []
  type: TYPE_TB
- en: '| A/B Testing | Yes | Yes | Low | High |'
  prefs: []
  type: TYPE_TB
- en: '| Shadow | Yes | Yes | High | High |'
  prefs: []
  type: TYPE_TB
- en: 'Table 11.1: Comparison of the different deployment strategies'
  prefs: []
  type: TYPE_NORMAL
- en: Each of these strategies has its pros and cons, and none of them would be best
    suited for every case. Organizations must choose the appropriate strategy based
    on their specific needs and the nature of the changes being deployed.
  prefs: []
  type: TYPE_NORMAL
- en: The complexity and design of the existing system that’s being upgraded or replaced,
    as well as its age and operation and the technology stack being used, play significant
    roles in determining the deployment strategy. In the next section, we will discuss
    the greenfield and brownfield deployments and their impact on determining the
    specifics of the deployment approach and plan.
  prefs: []
  type: TYPE_NORMAL
- en: Greenfield versus brownfield deployment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With our intelligent MSA system ready for deployment, we now need to think in
    detail about the infrastructure we have or need to acquire to deploy the system
    in production.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of the main questions we need to address are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: What are the infrastructure details needed to run the intelligent MSA system?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Do we have the hardware and software resources needed to deploy and run the
    system efficiently?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Can we leverage our existing infrastructure and applications to deploy the new
    system?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is the delta between the infrastructure needed and the infrastructure we
    have in place, and how can we fill that gap?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The organization’s current infrastructure setup and existing systems (if any)
    play a crucial role in answering all of the preceding questions – that is, whether
    the new system is being deployed in a greenfield or brownfield environment.
  prefs: []
  type: TYPE_NORMAL
- en: Greenfield deployment refers to building and deploying a new system or infrastructure
    from scratch with no previous system or infrastructure in place. Thus, we must
    build the new system without major constraints, dependencies, integration work,
    or compatibility issues to consider before building and running the new system.
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, a brownfield deployment refers to the process of deploying
    a new system or infrastructure on a site that is already running with an existing
    system in place. The site may have existing infrastructure such as servers, applications,
    network components, and more that may be reused for deploying the new system.
  prefs: []
  type: TYPE_NORMAL
- en: In short, greenfield deployment is a new start from scratch, whereas brownfield
    deployment involves building on top of existing systems or infrastructure and
    possibly dealing with some integration issues, compatibility concerns, and resource
    constraints.
  prefs: []
  type: TYPE_NORMAL
- en: Whether it is a greenfield or brownfield deployment is often determined by the
    organization’s situation and how the organization’s business process is being
    conducted. Nevertheless, it is still important to understand the pros and cons
    of each deployment type to plan accurately.
  prefs: []
  type: TYPE_NORMAL
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: If cost saving is a major focus in the organization, we should leverage as many
    existing components as possible from the existing brownfield infrastructure. However,
    we need to reuse existing components in a way that cannot negatively impact the
    deployed system’s efficiency, reliability, or functionality.
  prefs: []
  type: TYPE_NORMAL
- en: The following are some factors to consider when evaluating both deployment types.
  prefs: []
  type: TYPE_NORMAL
- en: Flexibility
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Because in greenfield deployment we are starting from scratch, this gives us
    the liberty to design, implement, and optimize the new system for the specific
    needs of the organization without restricting ourselves to any dependent components
    or existing production systems.
  prefs: []
  type: TYPE_NORMAL
- en: In brownfield, on the other hand, we must always think of the already running
    systems and their dependencies before designing or deploying any part of the new
    system. This in itself can limit the deployment, customization, or optimization
    of the new system.
  prefs: []
  type: TYPE_NORMAL
- en: Scalability
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Greenfield implementations offer higher scalability compared to brownfield because,
    in greenfield implementations, we deploy new infrastructure without any existing
    constraints that could limit the design or customization of the new system.
  prefs: []
  type: TYPE_NORMAL
- en: This lack of constraints gives architects and system designers the choice to
    design the system so that it scales without thinking of underlying technology
    or existing equipment that may hinder the system’s capabilities or scale.
  prefs: []
  type: TYPE_NORMAL
- en: The existing infrastructure in the brownfield’s case, however, may have legacy
    systems that are likely to be reused in part or as a whole whenever possible.
    Reusing different parts of the legacy systems may impede the new system’s scalability.
  prefs: []
  type: TYPE_NORMAL
- en: Moreover, legacy systems usually allocate more physical space and are more power-consuming
    than modern systems, which adds more limitations to the overall system scalability.
  prefs: []
  type: TYPE_NORMAL
- en: Having said that, as we deploy the new system and gradually refresh the existing
    infrastructure, we will use up-to-date technologies and modern systems that will
    free up physical space and reduce power requirements. This, in turn, will help
    us eventually scale the system better.
  prefs: []
  type: TYPE_NORMAL
- en: Technology stack
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In a greenfield deployment, we have the liberty to leverage the latest technologies,
    applications, and tools, which can, among many other things, enhance performance,
    security, and capability, and prolong the system’s overall lifetime.
  prefs: []
  type: TYPE_NORMAL
- en: With the legacy systems in brownfield environments, older technology, hardware,
    tools, and systems are used, which can introduce limitations on the system’s supportability,
    capabilities, scalability, and future expansions and integration.
  prefs: []
  type: TYPE_NORMAL
- en: Integration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As explained in other aspects of the comparison, in greenfield environments,
    all the components of the system are new and are designed and built from the beginning
    to work together seamlessly. Integration, therefore, is not an issue at all.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating a new system with an existing IT infrastructure in the case of a
    brownfield deployment, however, can be challenging, as the two systems may not
    be fully compatible. Integration efforts may be needed for old and new components
    to work together, and even then, the new mixed system may later provide operational
    challenges that can cause unforeseen system mishaps.
  prefs: []
  type: TYPE_NORMAL
- en: Cost
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: From an acquisition and CAPEX perspective, building a new system from scratch
    is higher in cost than building the system from a mix of reused and newly acquired
    components.
  prefs: []
  type: TYPE_NORMAL
- en: To set up the new system, a certain level of expertise is required that may
    not be available in-house. The effort and expertise needed to bring the system
    up and running will certainly have associated costs. However, it could be argued
    that this cost can be easily offset by the efforts and expertise needed to integrate
    the new and old components. Possibly different effort and different expertise,
    but similar cost.
  prefs: []
  type: TYPE_NORMAL
- en: When it comes to OPEX, in a greenfield deployment, we need to consider training
    costs for the new technologies and systems deployed, as well as potential operational
    mistakes that can be caused due to the lack of new system hands-on experience.
    In brownfield deployments, these training costs are usually lower.
  prefs: []
  type: TYPE_NORMAL
- en: Power consumption is typically lower in greenfield deployments, as new systems
    and technologies are often geared toward power usage optimization.
  prefs: []
  type: TYPE_NORMAL
- en: Another important OPEX consideration is the potential **technical debt** in
    brownfield implementations. Technical debt is the shortcuts the organization takes
    to get the system up and running. In other words, this involves taking a band-aid
    approach to resolving an integration or operational issue during the deployment,
    and achieving short-term results that can be catastrophic in the long term.
  prefs: []
  type: TYPE_NORMAL
- en: Time-to-market
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Time-to-market is an interesting aspect of the deployment and can go both ways.
    Generally speaking, deploying a system in a greenfield environment takes longer
    than integrating with an already existing functioning system, as is the case in
    a brownfield environment. But that would be highly dependent on how complex an
    existing system may be.
  prefs: []
  type: TYPE_NORMAL
- en: If we are deploying our new system on top of a significantly old or complex
    disorganized infrastructure, we could argue that deploying a new system fresh
    from scratch is much more straightforward and a time saver than trying to get
    both systems integrated successfully.
  prefs: []
  type: TYPE_NORMAL
- en: Risks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is another aspect of the deployment that can be debated either way.
  prefs: []
  type: TYPE_NORMAL
- en: With a lack of experience with the new infrastructure, new technologies, new
    systems, new tools, and new applications, system operational mishaps are more
    likely, and the time to resolution could be higher. In contrast, with no backup
    system in place, there will be no fallback option if the new system does not perform
    as expected.
  prefs: []
  type: TYPE_NORMAL
- en: But again, if the old system in the brownfield environment is too complex or
    disorganized, the risks would be higher in a brownfield deployment due to complexities
    in integration, potential technical debt, old unsupported components, and more.
  prefs: []
  type: TYPE_NORMAL
- en: Staff onboarding
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Companies that are already using an existing system have a better understanding
    of how it works and insights into its operations and potential issues, which can
    make the deployment process and system operations smoother.
  prefs: []
  type: TYPE_NORMAL
- en: In greenfield deployments, training and accumulated experience are needed before
    staff can start to become familiar with the system details.
  prefs: []
  type: TYPE_NORMAL
- en: User adoption
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: User adoption of the new system may require adapting to new ways of performing
    day-to-day tasks, a shift in internal and potentially external business operations,
    and how the organization deals with internal and external customers. This shift
    may require a change in organizational culture, which can pose a significant challenge
    to the successful implementation of the system and reveal operational shortcomings
    after deployment.
  prefs: []
  type: TYPE_NORMAL
- en: In a brownfield environment, the updated system capabilities could be incremental
    or somewhat transparent to the user, which makes user adoption much easier and
    faster compared to deploying a completely new system, as in the case of a greenfield
    deployment. A successful and gradual user adoption helps uncover potential design,
    implementation, and operational deficiencies that can be quickly addressed and
    fixed.
  prefs: []
  type: TYPE_NORMAL
- en: In either case, user training is needed, but certainly, in a greenfield, training
    is more complex and involved over the brownfield case.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table summarizes the comparison between greenfield and brownfield
    aspects of the deployment:'
  prefs: []
  type: TYPE_NORMAL
- en: '|  | **Greenfield** | **Brownfield** |'
  prefs: []
  type: TYPE_TB
- en: '| Flexibility | High | Low |'
  prefs: []
  type: TYPE_TB
- en: '| Scalability | High | Low |'
  prefs: []
  type: TYPE_TB
- en: '| Technology Stack | Flexible and optimized | Restrictive |'
  prefs: []
  type: TYPE_TB
- en: '| Integration | Minimal to none | High efforts |'
  prefs: []
  type: TYPE_TB
- en: '| Cost | CAPEX is high but better OPEX | CAPEX is lower but higher OPEX |'
  prefs: []
  type: TYPE_TB
- en: '| Time-To-Market | Usually longer | Usually shorter |'
  prefs: []
  type: TYPE_TB
- en: '| Risks | Usually higher | Usually lower |'
  prefs: []
  type: TYPE_TB
- en: '| Staff Onboarding | Longer process | Shorter time |'
  prefs: []
  type: TYPE_TB
- en: '| User Adoption | Slow | Fast |'
  prefs: []
  type: TYPE_TB
- en: 'Table 11.2: Greenfield versus brownfield'
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we discussed the main differences between greenfield and brownfield
    deployments, the pros and cons of each environment, what to consider, and why.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will go over how we can overcome deployment challenges
    in both environments and the deployment best practices in each case.
  prefs: []
  type: TYPE_NORMAL
- en: Overcoming deployment challenges
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We now understand the different aspects of system deployment in greenfield and
    brownfield environments, as well as the several challenges that can be presented
    during the system design and implementation. In this section, we will cover some
    of the concepts, strategies, and approaches for mitigating these challenges to
    ensure a smooth and successful system deployment.
  prefs: []
  type: TYPE_NORMAL
- en: We should begin our deployment project with a solid project team that possesses
    diverse skills and experiences in technical areas of the project, deployment and
    project management, and vendor management.
  prefs: []
  type: TYPE_NORMAL
- en: In the absence of in-house experience, outsourcing one or more project experience
    areas through third parties may be necessary. Partners may include system integrators,
    and/or equipment vendors, and value-added resellers.
  prefs: []
  type: TYPE_NORMAL
- en: This experienced team will help conduct thorough planning and research to be
    able to understand the specific needs of the organization, potential risks, local
    regulations, and any necessary compliance needs.
  prefs: []
  type: TYPE_NORMAL
- en: Compliance with industry and local regulations is an essential part of the project.
    Aside from the technical aspects and technologies of the project, a system processing
    credit cards, for example, will require team members who are experienced in PCI
    compliance and rules. A healthcare system deployed in the United States, for example,
    may need members who have experience with HIPAA compliance needs, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Project management is key to establishing clear team communication and collaboration.
    The project managers help track the project process, changes, and requirements,
    and ensure that the timelines and goals are met throughout the project cycles.
    The project managers also make certain that all stakeholders are properly informed
    and engaged throughout the different phases of the project.
  prefs: []
  type: TYPE_NORMAL
- en: The type of project management style or approach is dependent on the organization
    itself, the timeline, and the implementation details and technologies deployed.
    Whether it is waterfall, agile, scrum, or something else, the project manager
    must decide with the team.
  prefs: []
  type: TYPE_NORMAL
- en: Addressing deployment challenges is a task that is pursued within the project
    cycle. Our focus here is on this aspect of the project cycle, particularly concerning
    greenfield and brownfield deployments.
  prefs: []
  type: TYPE_NORMAL
- en: Before any deployment activities, complete visibility of the deployment risks
    is necessary. Therefore, it is imperative to develop a clear deployment risk plan
    to be able to identify the risks and mitigate each risk to ensure a successful
    deployment.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following chart illustrates the risk management process for our deployment
    cycle. The process should start with identifying the risks, determining ways to
    avoid or minimize them, developing a mitigation plan, and continually testing,
    monitoring, and reviewing the deployment to update the mitigation plan for any
    new risks or challenges that arise during implementation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.1: Main steps of overcoming deployment challenges](img/B18934_11_1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.1: Main steps of overcoming deployment challenges'
  prefs: []
  type: TYPE_NORMAL
- en: In the following subsections, we will go over the main activities of a risk
    management plan and how each phase of the plan is relevant to our deployment activities.
  prefs: []
  type: TYPE_NORMAL
- en: Identify deployment risks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To address the deployment challenges, we start by identifying the potential
    risks we may encounter when deploying our system. In a greenfield environment,
    the risks we identified earlier are as follows. The **greenfield risk** is referred
    to as **GR**:'
  prefs: []
  type: TYPE_NORMAL
- en: '**GR1**: High CAPEX'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**GR2**: Deployment time'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**GR3**: System failures due to lack of training and experienced staff'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**GR4**: Slow or lack of user adoption'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In a brownfield environment, the risks we identified earlier are as follows.
    The **brownfield risk** is referred to as **BR**:'
  prefs: []
  type: TYPE_NORMAL
- en: '**BR1**: System capabilities limitation due to potentially low flexibility
    and scalability, and some reused legacy technologies'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**BR2**: High OPEX'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that we have identified the potential risks, it’s time to prioritize them
    based on their likelihood and potential impact on the project. This will help
    us calculate the **risk exposure** and plan and allocate proper resources effectively.
  prefs: []
  type: TYPE_NORMAL
- en: Prioritize risks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Risk exposure is the risk probability multiplied by the impact of that risk
    on the deployment project. The higher the risk exposure, the higher the priority
    of working on mitigating that risk should be.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 11**.2* shows a color-coded risk exposure matrix for the previously
    identified risks. Please note that the level of risk exposure can greatly vary
    between organizations based on various factors, such as project complexity and
    organizational needs, the stability and complexity of the existing system, project
    requirements, budget, timeline, and more:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.2: Risk exposure matrix](img/B18934_11_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.2: Risk exposure matrix'
  prefs: []
  type: TYPE_NORMAL
- en: We always prioritize from the top right to the bottom left of the risk mitigation
    chart. The red zone, where the risk and the likelihood are Medium to High, is
    where we need to start allocating resources. This is followed by the yellow zone,
    then the green zone.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, we should start with greenfield risk #1 (GR1), how to mitigate high CAPEX
    risks, then GR3, where we lack experienced staff to deploy the new system, then
    GR2, where the new system deployment time may be an issue, and then conclude the
    mitigation of greenfield risks by addressing GR4, where we may face a slow user
    adoption of the new system.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For brownfield risk mitigation, we start with brownfield risk #1 (BR1) since
    it has a higher exposure in the red zone of the matrix, then do BR2.'
  prefs: []
  type: TYPE_NORMAL
- en: Risks are not always avoidable. Risks often aren’t. In cases where risk elimination
    is not possible, the mitigation plan has to address how we can at least minimize
    the risks to a manageable level.
  prefs: []
  type: TYPE_NORMAL
- en: Many organizations choose to ignore risks with low/very low likelihood and low/very
    low impact. The process of mitigating risks in this particular case may very well
    be costly and riskier than the risk itself.
  prefs: []
  type: TYPE_NORMAL
- en: Developing and implementing a risk mitigation plan
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We need to develop a mitigation plan to manage the identified risks. This plan
    should include specific actions that will be taken to mitigate or eliminate the
    risks, resources involved, and contingencies in case the risks do occur.
  prefs: []
  type: TYPE_NORMAL
- en: We also need to identify our risk mitigation strategies based on the calculated
    exposure of each risk. As we will see in the next few subsections, these strategies
    can include implementing operational safeguards, extra measures using additional
    system components, testing the system before deployment, training both system
    users and administrators to ensure they can effectively use the new system, and
    developing a rollback plan in case of any unexpected deployment issues.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s apply all these to our deployment project’s identified risks.
  prefs: []
  type: TYPE_NORMAL
- en: GR1 – high CAPEX risk
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When addressing the high CAPEX risk, we need to focus on a few things – first,
    the project budget, second, the system and project requirements, and third, how
    to use effective negotiation skills to acquire the necessary infrastructure that
    would successfully fulfill all of the desired system requirements.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes, of course, budget and time constraints become a barrier to acquiring
    all of the requirements’ wish list items. Therefore, it is important to prioritize
    your requirements, especially if you have strong budget constraints.
  prefs: []
  type: TYPE_NORMAL
- en: The objective is to acquire the infrastructure that would get us all of our
    wish list requirements; however, at some point, we may need to give up some of
    the nice-to-have features of the system for the sake of meeting our budget. This
    is where our negotiation skills become vital. The stronger our negotiation skills,
    the greater the likelihood of successfully deploying the new system and meeting
    all the requirements within budget.
  prefs: []
  type: TYPE_NORMAL
- en: It is useful to go over a few important negotiation techniques that can help
    us achieve our objective.
  prefs: []
  type: TYPE_NORMAL
- en: Start by conducting thorough research on all vendors that can be involved in
    providing the infrastructure assets. This includes the technical and business
    strengths and weaknesses of each potential vendor, their list prices, the quality
    level of their deployment and operational support, their product roadmap, and
    their future business outlook.
  prefs: []
  type: TYPE_NORMAL
- en: Then, we can come up with multiple options from our vendor research. Having
    multiple options gives us more flexibility and bargaining power during our vendor
    negotiation phase.
  prefs: []
  type: TYPE_NORMAL
- en: Out of all the available options, having a clear **Best Alternative To a Negotiated
    Agreement** (**BATNA**) is critical. BATNA means having the most favorable option
    we can achieve if the negotiations fail and no agreement is reached with the infrastructure
    vendors. It is the fallback option that we can rely on if the negotiations do
    not go as we initially planned with a specific vendor.
  prefs: []
  type: TYPE_NORMAL
- en: Having a clear and well-defined BATNA is important in displaying strong bargaining
    power during the negotiation process. A BATNA gives the vendors a sense of how
    much they can miss out if they do not close the infrastructure acquisition deal.
  prefs: []
  type: TYPE_NORMAL
- en: BATNA also helps us understand when it’s time to walk away from the negotiations
    if the vendors are not willing to meet our infrastructure needs with the available
    budget. It is about the alternatives that are available to us and the consequences
    of choosing or not choosing a specific vendor.
  prefs: []
  type: TYPE_NORMAL
- en: Larger and highly reputable organizations can use leverage. Leverage is the
    ability to use your reputation, market position, or market size to influence the
    outcome of the negotiation. Leverage can be very effective in striking a good
    deal with vendors. Vendors generally strive to gain a foothold in large organizations
    to create a customer reference or as a way to build more business out of that
    particular deal.
  prefs: []
  type: TYPE_NORMAL
- en: 'Having said all that, it is essential to show a certain level of flexibility
    during the negotiation. Flexibility will demonstrate our willingness to compromise
    and is likely to lead to a strong long-term and healthy business relationship
    with the vendors:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.3: Negotiation strategies](img/B18934_11_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.3: Negotiation strategies'
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 11**.3* sums up the negotiation strategies you could follow to minimize
    budget overrun risks due to infrastructure cost and the overall project CAPEX.'
  prefs: []
  type: TYPE_NORMAL
- en: Another effective way of mitigating CAPEX risks is to use a cloud provider in
    deploying your new infrastructure, especially during the initial testing and adjustment
    phases of the project.
  prefs: []
  type: TYPE_NORMAL
- en: Using containerization and virtualization to build new workloads is another
    way to help reduce CAPEX risks. However, by doing so, we may introduce some OPEX
    and other types of deployment risks, especially if the staff is not trained enough
    on cloud environment deployments.
  prefs: []
  type: TYPE_NORMAL
- en: GR2 – deployment time risks
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When deploying a new project, especially a project that involves new technologies,
    techniques, and concepts, the potential of running behind schedule cannot be ignored.
    There is always a learning curve associated with the overall project cycle.
  prefs: []
  type: TYPE_NORMAL
- en: Moreover, potential frequent changes and scope creeps are also important to
    account for. This emphasizes the importance of engaging a skilled team from the
    start even more.
  prefs: []
  type: TYPE_NORMAL
- en: A highly skilled and well-trained project team will help minimize scope creep
    and time delay risks. In the absence of in-house subject matter experts, hiring
    an external party as a system integrator and building an adequate training plan
    for the team become critical when managing time delay risks.
  prefs: []
  type: TYPE_NORMAL
- en: There may be factors other than team skills that can contribute to project timeline
    and scope creep risks. As part of our risk mitigation plan, we need to account
    for all of these factors and make sure they are controlled to consequently control
    their associated risks.
  prefs: []
  type: TYPE_NORMAL
- en: MSA systems can be very complex and burdensome to deploy. The more complex the
    system is, the more difficult it can be to predict and manage the deployment timeline.
  prefs: []
  type: TYPE_NORMAL
- en: In brownfields, the deployment of the new system often depends on the availability
    and operational stability of the already existing systems. Furthermore, integrating
    the new system with the existing systems can add another level of complexity and
    time-consuming tasks, all of which can potentially prolong the overall deployment
    timeline.
  prefs: []
  type: TYPE_NORMAL
- en: One way to mitigate the effect of complexity on the overall risk is to avoid
    forklift and big bang changes. Rather, use a trickle approach by breaking down
    the deployment into multiple simple phases and stages. Follow the famous Einstein
    rule, “*Everything should be made as simple as possible, but not simpler.*” Simplify
    as much as possible, but not in a way to compromise the system’s functionality
    or reliability.
  prefs: []
  type: TYPE_NORMAL
- en: Although thorough testing is necessary to ensure the new system’s reliability
    and adherence to the organization’s needs, over-analyzing and over-testing often
    happen in complex projects. This process can significantly delay the system deployment.
  prefs: []
  type: TYPE_NORMAL
- en: One way to address the testing delays factor is to consider running the system
    in production in a **Limited Availability** (**LA**) fashion, a beta version,
    or a pre-launch period of some sort. This LA approach will help us apply real
    user traffic to the system while we focus on monitoring and making system changes
    as needed before we transition the system into full-scale production.
  prefs: []
  type: TYPE_NORMAL
- en: GR3 and GR4 – system failure risks and user adoption risks
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: User adoption can highly depend on any new **user interface/user experience**
    (**UI/UX**) changes or added complexities. Assuming a well-designed system’s UI/UX,
    system failure and slow user adoption risks are also dependent on the experience
    of the project and operation teams, and how familiar the users are with working
    on the system.
  prefs: []
  type: TYPE_NORMAL
- en: To normalize the experience and user familiarity risks, it’s important to first
    include a solid UI/UX design team from the outset of the project, then adopt a
    top-down approach by securing a strong buy-in from project sponsors and executives.
  prefs: []
  type: TYPE_NORMAL
- en: The top-down approach will help adopt the organization’s processes and changes
    necessary to create a cultural shift in conducting the business using the new
    system. The buy-in can also help enforce a training program for both system users
    and the project team. This training can significantly help in bridging the gaps
    between the existing experience of the project team and the experience needed.
  prefs: []
  type: TYPE_NORMAL
- en: BR1 – system capability limitations
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Because we are deploying the new system with some older components being used
    in the existing system, we are likely to run into integration incompatibilities,
    limitations in the older hardware and software features, and limitations in scaling
    in terms of traffic, data loads, or storage.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, a system with legacy components may become outdated sooner than
    anticipated. This can result in obsolete software and hardware components that
    are no longer usable or valuable, or in vendor out-of-support announcements, which
    would shorten the life span of the new system.
  prefs: []
  type: TYPE_NORMAL
- en: When system components are out of support, vendors can no longer provide part
    replacements or software updates, or even assist in case any operational issues
    arise on the out-of-support components. This can severely impact the system’s
    reliability and jeopardize the organization’s business continuity.
  prefs: []
  type: TYPE_NORMAL
- en: To mitigate the risk of system capability limitations, we must have clear visibility
    and understanding of the vendor product map for each reused legacy system component
    and clear visibility of the component’s dependencies. This understanding shall
    help us assess the impact of that component on the scalability levels, and future
    operational reliability and stability of the system being deployed.
  prefs: []
  type: TYPE_NORMAL
- en: BR2 – high OPEX
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As we have previously explained, integrating both new and older systems can
    introduce many deployment and operational challenges that can make the system
    much more complex, and introduce technical debt, high maintenance costs, and high
    operational costs to keep the system running smoothly.
  prefs: []
  type: TYPE_NORMAL
- en: Security is also a major concern in brownfield deployments. Technical debt,
    along with mixing older and new components, may introduce vulnerabilities that
    were not present in the existing infrastructure, which can lead to costly data
    corruption, data loss, data recovery, security breaches, and irreversible reputational
    damage.
  prefs: []
  type: TYPE_NORMAL
- en: To mitigate these risks, organizations should thoroughly evaluate the impact
    and have a clear cost-benefit analysis of each reusable component of the existing
    system before proceeding with the deployment.
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, having a robust disaster recovery and backup plan in place in case
    of data loss or corruption is key to mitigating some OPEX risks.
  prefs: []
  type: TYPE_NORMAL
- en: All the preceding risk examples and their mitigation strategies should be thoroughly
    discussed as part of the developed risk mitigation plan, with step-by-step guides
    and documentation.
  prefs: []
  type: TYPE_NORMAL
- en: Should any of these risks take place, especially in the case of brownfields,
    where an existing system may already be running, a comprehensive rollback plan
    should be executed immediately. The rollback plan is the next step in how to overcome
    the deployment challenges. The following subsection takes us through what a rollback
    plan is and what it entails.
  prefs: []
  type: TYPE_NORMAL
- en: The rollback plan
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Remember Murphy’s Law, which states “*Anything that can go wrong will* *go wrong*”?
  prefs: []
  type: TYPE_NORMAL
- en: How often do we create a solid and well-crafted implementation or migration
    plan, expecting a smooth change in the system, but then experience unexpected
    and bizarre behavior during the execution of the plan?
  prefs: []
  type: TYPE_NORMAL
- en: A rule of thumb here is that anything can go wrong during the deployment. We
    put enough planning and precautions for nothing to go wrong, but unfortunately,
    things do not always work in our favor. We may still overlook things, system bugs
    may get triggered, equipment mishaps may happen, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, developing a rollback plan is necessary to be able to maintain business
    continuity. We should have the plan built in a way that it includes clear steps
    and procedures to move back to the initial system state before the change and
    resume normal operations quickly.
  prefs: []
  type: TYPE_NORMAL
- en: Adopting a phased deployment approach, as previously discussed, helps to quickly
    roll back only a portion of the change, which helps us avoid wasting resources,
    valuable change window time, and efforts invested during the deployment, and in
    developing the deployment plan.
  prefs: []
  type: TYPE_NORMAL
- en: Test, monitor, and adjust
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The next step in overcoming deployment challenges is to test and validate the
    system’s requirements and functionality to ensure it meets the performance, functional,
    and operational requirements.
  prefs: []
  type: TYPE_NORMAL
- en: The project teams, when under time pressures, often deprioritize system security
    over system functionality. Data security and data protection, when overlooked,
    can severely impact the project’s overall deployment and reliability, especially
    with systems that handle critical user data and have to comply with certain regulations
    and compliance acts, as in the case of PCI or HIPAA.
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, the test plan has to have a specific section dedicated to system
    security and compliance testing. Hiring a specialized firm in the area of security
    and compliance helps minimize the risk of data breaches or other security incidents.
  prefs: []
  type: TYPE_NORMAL
- en: As we gradually apply test and production load to the system, the test plan
    should be able to ensure the systems being deployed are scalable and flexible
    enough to adapt to changing needs and requirements. This is a critical aspect
    of the test plan during a brownfield deployment since the integration with the
    existing system may hinder the overall system’s capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: Then, we need to continuously and carefully monitor and review the identified
    risks throughout the project to ensure that the risk mitigation plan is effective
    and that any new risks are identified and addressed promptly.
  prefs: []
  type: TYPE_NORMAL
- en: Any newly identified risks will have to be included in the mitigation plan through
    the project change management process. The newly identified risks and mitigation
    strategies will need to be communicated to all stakeholders, including the project
    team, the organization’s management, and the system users.
  prefs: []
  type: TYPE_NORMAL
- en: Post-deployment and pre-production review
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once the deployment is over, the system is operational, tested, and running
    in a pre-production or LA manner. Just before closing the deployment project,
    we need to evaluate the effectiveness of our risk management plan, identify any
    areas for improvement, and document the outcome of our findings. The outcome can
    then be integrated into the same project deployment effort or conclude the existing
    deployment and initiate a new project for that matter.
  prefs: []
  type: TYPE_NORMAL
- en: The post-deployment assessment will ensure the new system’s continued stability,
    performance, and reliability.
  prefs: []
  type: TYPE_NORMAL
- en: In brownfields, we may end up running in a bi-modal approach, where both systems
    are running at the same time and serving users at the same time but in different
    ways and at different levels. In this case, we need to consider building specific
    roles and responsibilities matrices for each system. This helps streamline operations
    and increase the system’s supportability.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we covered greenfield and brownfield deployments, the difference
    between each, their pros and cons, risk details during the deployment process
    in general, and the specifics of each risk in each deployment case.
  prefs: []
  type: TYPE_NORMAL
- en: We also provided examples of the risks associated with greenfield and brownfield
    deployments, along with the strategies to mitigate these risks, to gain a better
    understanding of the challenges involved in successfully deploying a new system.
  prefs: []
  type: TYPE_NORMAL
- en: The topics that were discussed in this chapter act as introductions to what
    we will be learning in the following chapter. In the next chapter, we will apply
    some of what we have learned in this chapter and discuss ways to test, monitor,
    and update our new ABC-Intelligent MSA system.
  prefs: []
  type: TYPE_NORMAL
