["```py\nCSV@v0.4.3\nDataFrames@v0.15.2\nIJulia@v1.14.1\nPlots@v0.22.0\nTimeSeries@v0.14.0\n```", "```py\npkg> add PackageName@vX.Y.Z \n```", "```py\npkg> add IJulia@v1.14.1\n```", "```py\njulia> download(\"https://raw.githubusercontent.com/PacktPublishing/Julia-Programming-Projects/master/Chapter10/Project.toml\", \"Project.toml\")\npkg> activate . \npkg> instantiate\n```", "```py\n# load the raw data file as a DataFrame \njulia> using CSV, DataFrames \njulia> df = CSV.read(\"une_rt_m_1.tsv\", header = true, delim = '\\t') \n1×157 DataFrames.DataFrame. Omitted printing of 148 columns \n```", "```py\njulia> values = convert(Array, df[1, 2:end]) 1×156 Array{Union{Missing, String},2}: \"21 974\" \"22 303\" \"22 085\" \"21 036\" \"20 849\" ... # output omitted \n```", "```py\njulia> values = map(x -> parse(Int, replace(x, \" \"=>\"\")), values)[:] \n156-element Array{Int64,1}: \n 21974 \n 22303 \n 22085 \n 21036 \n# output omitted \n```", "```py\njulia> dates = names(df)[2:end] \n156-element Array{Symbol,1}: \n Symbol(\"2005M01\") \n Symbol(\"2005M02\") \n Symbol(\"2005M03\") \n Symbol(\"2005M04\") \n Symbol(\"2005M05\") \n# output omitted \n```", "```py\njulia> dates = map(x -> replace(string(x), \"M\"=>\"-\"), dates) \n156-element Array{String,1}: \n \"2005-01\" \n \"2005-02\" \n \"2005-03\" \n \"2005-04\" \n \"2005-05\" \n# output omitted \n```", "```py\njulia> using Dates \njulia> dateformat = DateFormat(\"y-m\") \ndateformat\"y-m\" \n\njulia> dates = map(x -> Date(x, dateformat), dates) \n156-element Array{Date,1}: \n 2005-01-01 \n 2005-02-01 \n 2005-03-01 \n 2005-04-01 \n 2005-05-01 \n# output omitted \n```", "```py\n# store the extracted data in a new DataFrame \njulia> df2 = DataFrame(Dates = dates, Values = values) \n156×2 DataFrames.DataFrame \n│ Row │ Dates      │ Values │ \n│ 1   │ 2005-01-01 │ 21974  │ \n│ 2   │ 2005-02-01 │ 22303  │ \n│ 3   │ 2005-03-01 │ 22085  │ \n│ 4   │ 2005-04-01 │ 21036  │ \n│ 5   │ 2005-05-01 │ 20849  │ \n# output omitted \n```", "```py\n# write DataFrame to file \njulia> CSV.write(\"UE-unemployment.tsv\", df2) \n```", "```py\njulia> using TimeSeries\njulia> unemployment_data = readtimearray(\"UE-unemployment.tsv\")\n156x1 TimeArray{Float64,2,Date,Array{Float64,2}} 2005-01-01 to 2017-12-01\n```", "```py\njulia> TimeSeries.head(unemployment_data, 10) \n10x1 TimeArray{Float64,2,Date,Array{Float64,2}} 2005-01-01 to 2005-10-01 \n```", "```py\njulia> head(unemployment_data, 10) \nWARNING: both TimeSeries and DataFrames export \"head\"; uses of it in module Main must be qualified \nERROR: UndefVarError: head not defined \n```", "```py\njulia> using Plots \njulia> pyplot() \n```", "```py\njulia> using Pkg \njulia> pkg\"add PyCall LaTeXStrings\"\n```", "```py\njulia> plot(unemployment_data) \n```", "```py\njulia> plot() \njulia> for y in 2005:2017 \n           TimeSeries.values(when(unemployment_data, year, y))[:] |> plot! \n           gui() \n       end \n```", "```py\njulia> using Statistics \njulia> moving_avg = moving(mean, unemployment_data, 12) \n145×1 TimeArray{Float64,2,Date,Array{Float64,2}} 2005-12-01 to 2017-12-01 \n```", "```py\n julia> moving(mean, unemployment_data, 12, padding = true)\n 156×1 TimeArray{Float64,2,Date,Array{Float64,2}} 2005-01-01 to 2017-12-01\n```", "```py\njulia> plot(unemployment_data) \njulia> plot!(moving_avg) \n```", "```py\njulia> sn = unemployment_data ./ moving_avg \n145×1 TimeArray{Float64,2,Date,Array{Float64,2}} 2005-12-01 to 2017-12-01  \n```", "```py\njulia> plot(sn) \n```", "```py\njulia> month_avg = Float64[] \n0-element Array{Float64,1} \n\njulia> for m in 1:12 \n            md = when(sn, month, m) \n            push!(month_avg, mean(TimeSeries.values(md)[:]))  \n       end \n```", "```py\njulia> month_avg \n12-element Array{Float64,1}: \n 1.0376512639850295 \n 1.0466377033754193 \n 1.0301198608484736 \n 1.0014842494206564 \n 0.9830320492870818 \n 0.9705256323692862 \n 0.9630153389575429 \n 0.9634443756458616 \n 0.9763782494700372 \n 0.9893785521401298 \n 0.9987100016253194 \n 0.9913489915307253 \n```", "```py\njulia> s = sum(month_avg) \n11.951726268655563 \n```", "```py\njulia> norm_month_avg = map(m -> 12m/s, month_avg) \n```", "```py\n12-element Array{Float64,1}: \n 1.0418423989910408 \n 1.0508651351431808 \n 1.0342805760704734 \n 1.0055293037095092 \n 0.9870025740450584 \n 0.9744456429674838 \n 0.9669050150351592 \n 0.9673357846281114 \n 0.9803218991358666 \n 0.993374710799588  \n 1.0027438505627655 \n 0.9953531089117633 \n```", "```py\njulia> sum(norm_month_avg) \n12.0 \n```", "```py\njulia> adj_unemployment_data = deepcopy(unemployment_data) \n156×1 TimeArray{Float64,2,Date,Array{Float64,2}} 2005-01-01 to 2017-12-01 \n```", "```py\njulia> map(adj_unemployment_data) do d,v \n           v[1] /= norm_month_avg[month(d)] \n           d,v \n       end \n156×1 TimeArray{Float64,2,Date,Array{Float64,2}} 2005-01-01 to 2017-12-01 \n```", "```py\njulia> using Dates \njulia> ts1 = TimeArray(Date(today()) - Week(1):Day(1):Date(today()) |> collect, rand(8)) \n8×1 TimeArray{Float64,1,Date,Array{Float64,1}} 2018-11-06 to 2018-11-13 \n```", "```py\njulia> ts2 = TimeArray(Date(today()) - Week(1):Day(1):Date(today()) |> collect, rand(8)) \n8x1 TimeSeries.TimeArray{Float64,1,Date,Array{Float64,1}} 2018-01-31 to 2018-02-07 \n```", "```py\njulia> tsc = ts1 .> ts2 \n8×1 TimeArray{Bool,1,Date,BitArray{1}} 2018-11-06 to 2018-11-13 \n```", "```py\njulia> tsc .== false \n8×1 TimeArray{Bool,1,Date,BitArray{1}} 2018-11-06 to 2018-11-13  \n```", "```py\njulia> diffts = diff(unemployment_data) \n155×1 TimeArray{Float64,2,Date,Array{Float64,2}} 2005-02-01 to 2017-12-01 \n```", "```py\njulia> bar(diffts)\n```", "```py\njulia> ts1 \n8×1 TimeArray{Float64,1,Date,Array{Float64,1}} 2018-11-06 to 2018-11-13 \n```", "```py\njulia> lag(ts1) \n7×1 TimeArray{Float64,1,Date,Array{Float64,1}} 2018-11-07 to 2018-11-13 \n```", "```py\njulia> lagged = lag(unemployment_data, 12) \n144×1 TimeArray{Float64,2,Date,Array{Float64,2}} 2006-01-01 to 2017-12-01 \n```", "```py\njulia> common = merge(unemployment_data, lagged) \n144×2 TimeArray{Float64,2,Date,Array{Float64,2}} 2006-01-01 to 2017-12-01 \n```", "```py\njulia> plot(unemployment_data) julia> plot!(lagged) \n```", "```py\njulia> update(unemployment_data, Date(2018, 1, 1), \n TimeSeries.values(adj_unemployment_data[end])[:][end] * norm_month_avg[1] |> round) \n157×1 TimeArray{Float64,2,Date,Array{Float64,2}} 2005-01-01 to 2018-01-01 \n```", "```py\njulia> mean(TimeSeries.values(adj_unemployment_data)[:]) \n21589.641025641027 \n```", "```py\njulia> findall(adj_unemployment_data[:Values] .== \n maximum(TimeSeries.values(adj_unemployment_data)[:])) \n1-element Array{Int64,1}: \n 98 \n\njulia> adj_unemployment_data[98] \n1×1 TimeArray{Float64,2,Date,Array{Float64,2}} 2013-02-01 to 2013-02-01 \n```", "```py\njulia> last_trend = from(adj_unemployment_data, Date(2013, 2, 1)) \n59×1 TimeArray{Float64,2,Date,Array{Float64,2}} 2013-02-01 to 2017-12-01 \n```", "```py\njulia> x = 1:length(last_trend) \n1:59 \n\njulia> y = values(last_trend)[:] \n59-element Array{Float64,1}: \n 27790.0 \n 27292.0 \n# output truncated \n\njulia> linreg(x, y) = reverse([x ones(length(x))]\\y) \n\njulia> a, b = linreg(x, y) \n2-element Array{Float64,1}: \n 27522.02805376972 \n  -161.58229105786072  \n```", "```py\njulia> y = a+b*60 \n17827.09059029808 \n```", "```py\njulia> y = y * norm_month_avg[1] |> round \n18573.0 \n```", "```py\njulia> update(unemployment_data, Date(2018, 1, 1), y) |> plot \njulia> plot!(unemployment_data) \n```"]