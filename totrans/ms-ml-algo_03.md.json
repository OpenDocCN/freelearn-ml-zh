["```py\nfrom sklearn.datasets import make_classification\n\nnb_samples = 100\nnb_unlabeled = 75\n\nX, Y = make_classification(n_samples=nb_samples, n_features=2, n_informative=2, n_redundant=0, random_state=1000)\nY[Y==0] = -1\nY[nb_samples - nb_unlabeled:nb_samples] = 0\n```", "```py\nfrom sklearn.neighbors import kneighbors_graph\n\nnb_neighbors = 2\n\nW_knn_sparse = kneighbors_graph(X, n_neighbors=nb_neighbors, mode='connectivity', include_self=True)\nW_knn = W_knn_sparse.toarray()\n```", "```py\nimport numpy as np\n\ndef rbf(x1, x2, gamma=10.0):\n    n = np.linalg.norm(x1 - x2, ord=1)\n    return np.exp(-gamma * np.power(n, 2))\n\nW_rbf = np.zeros((nb_samples, nb_samples))\n\nfor i in range(nb_samples):\n    for j in range(nb_samples):\n        W_rbf[i, j] = rbf(X[i], X[j])\n```", "```py\nD_rbf = np.diag(np.sum(W_rbf, axis=1))\nD_rbf_inv = np.linalg.inv(D_rbf)\n```", "```py\ntolerance = 0.01\n\nYt = Y.copy()\nY_prev = np.zeros((nb_samples,))\niterations = 0\n\nwhile np.linalg.norm(Yt - Y_prev, ord=1) > tolerance:\n    P = np.dot(D_rbf_inv, W_rbf)\n    Yt = np.dot(P, Yt)\n    Yt[0:nb_samples - nb_unlabeled] = Y[0:nb_samples - nb_unlabeled]\n    Y_prev = Yt.copy()\n\nY_final = np.sign(Yt)\n```", "```py\ntolerance = 0.01\n\nYt = Y.copy()\nY_prev = np.zeros((nb_samples,))\niterations = 0\n\nwhile np.linalg.norm(Yt - Y_prev, ord=1) > tolerance:\n    P = np.dot(D_rbf_inv, W_rbf)\n    Yt = np.dot(P, Yt)\n    Y_prev = Yt.copy()\n\nY_final = np.sign(Yt)\n```", "```py\nfrom sklearn.datasets import make_classification\n\nnb_samples = 1000\nnb_unlabeled = 750\n\nX, Y = make_classification(n_samples=nb_samples, n_features=2, n_informative=2, n_redundant=0, random_state=100)\nY[nb_samples - nb_unlabeled:nb_samples] = -1\n```", "```py\nfrom sklearn.semi_supervised import LabelPropagation\n\nlp = LabelPropagation(kernel='rbf', gamma=10.0)\nlp.fit(X, Y)\n\nY_final = lp.predict(X)\n```", "```py\nfrom sklearn.datasets import make_classification\n\nnb_samples = 5000\nnb_unlabeled = 1000\n\nX, Y = make_classification(n_samples=nb_samples, n_features=2, n_informative=2, n_redundant=0, random_state=100)\nY[nb_samples - nb_unlabeled:nb_samples] = -1\n```", "```py\nfrom sklearn.semi_supervised import LabelSpreading\n\nls = LabelSpreading(kernel='rbf', gamma=10.0, alpha=0.2)\nls.fit(X, Y)\n\nY_final = ls.predict(X)\n```", "```py\nfrom sklearn.datasets import make_blobs\n\nnb_samples = 2000\nnb_unlabeled = 1950\nnb_classes = 2\n\nX, Y = make_blobs(n_samples=nb_samples, \n                  n_features=2, \n                  centers=nb_classes,\n                  cluster_std=2.5,\n                  random_state=500)\n\nY[nb_samples - nb_unlabeled:] = -1\n```", "```py\nimport numpy as np\n\nfrom sklearn.neighbors import kneighbors_graph\n\ndef rbf(x1, x2, sigma=1.0):\n    d = np.linalg.norm(x1 - x2, ord=1)\n    return np.exp(-np.power(d, 2.0) / (2 * np.power(sigma, 2)))\n\nW = kneighbors_graph(X, n_neighbors=15, mode='connectivity', include_self=True).toarray()\n\nfor i in range(nb_samples):\n    for j in range(nb_samples):\n        if W[i, j] != 0.0:\n            W[i, j] = rbf(X[i], X[j])\n```", "```py\nD = np.diag(np.sum(W, axis=1))\nL = D - W\nLuu = L[nb_samples - nb_unlabeled:, nb_samples - nb_unlabeled:]\nWul = W[nb_samples - nb_unlabeled:, 0:nb_samples - nb_unlabeled,]\nYl = Y[0:nb_samples - nb_unlabeled]\n```", "```py\nYu = np.round(np.linalg.solve(Luu, np.dot(Wul, Yl)))\nY[nb_samples - nb_unlabeled:] = Yu.copy()\n```", "```py\nPu = np.linalg.solve(Luu, np.dot(Wul, Yl))\nH = -np.sum(Pu * np.log(Pu + 1e-6))\n```", "```py\nfrom sklearn.datasets import fetch_olivetti_faces\n\nfaces = fetch_olivetti_faces()\n```", "```py\nfrom sklearn.manifold import Isomap\n\nisomap = Isomap(n_neighbors=5, n_components=2)\nX_isomap = isomap.fit_transform(faces['data'])\n```", "```py\nfrom sklearn.manifold import LocallyLinearEmbedding\n\nlle = LocallyLinearEmbedding(n_neighbors=15, n_components=2)\nX_lle = lle.fit_transform(faces['data'])\n```", "```py\nfrom sklearn.manifold import SpectralEmbedding\n\nse = SpectralEmbedding(n_components=2, n_neighbors=15)\nX_se = se.fit_transform(faces['data'])\n```", "```py\nfrom sklearn.manifold import TSNE\n\ntsne = TSNE(n_components=2, perplexity=20)\nX_tsne = tsne.fit_transform(faces['data'])\n```"]