["```py\nimport pandas as pd\nfrom prophet import Prophet\nimport json\nfrom prophet.serialize import model_to_json, \\\nmodel_from_json\n```", "```py\ndf = pd.read_csv('baltimore_crime.csv')\ndf.columns = ['ds', 'y']\ndf.loc[df['y'] > 250, 'y'] = None\nmodel = Prophet()\nmodel.fit(df)\n```", "```py\nwith open('baltimore_crime_model.json', 'w') as file_out:\n    json.dump(model_to_json(model), file_out)\n```", "```py\nwith open('baltimore_crime_model.json', 'r') as file_in:\n    model = model_from_json(json.load(file_in))\n```", "```py\nforecast = model.predict()\nfig = model.plot(forecast)\n```", "```py\ndf_yesterday = df[df['ds'] < df['ds'].max()]\n```", "```py\nmodel1 = Prophet().fit(df_yesterday)\n```", "```py\n%timeit model2 = Prophet().fit(df)\n```", "```py\n865 ms ± 183 ms per loop (mean ± std. dev. of 7 runs, \\\n                          1 loop each)\n```", "```py\nimport numpy as np\nclass StanInit:\n    def __init__(self, model):\n        self.params = {\n            'k': np.mean(model.params['k']),\n            'm': np.mean(model.params['m']),\n            'sigma_obs': \\\n             np.mean(model.params['sigma_obs']),\n            'delta': np.mean(model.params['delta'],\n                             axis=0),\n            'beta': np.mean(model.params['beta'], axis=0)\n        }\n    def __call__(self):\n        return self.params\n```", "```py\n%timeit model2 = Prophet().fit(\n     df,\n     inits=StanInit(model1)())\n```", "```py\n195 ms ± 90 ms per loop (mean ± std. dev. of 7 runs, \\\n                         1 loop each)\n```", "```py\nmodel1 = Prophet().fit(df)\nmodel2 =\nProphet(mcmc_samples=200).fit(\n    df,\n    inits=StanInit(model1)())\n```", "```py\nconda install -c plotly plotly=5.11.0\n```", "```py\npip install plotly==5.11.0\n```", "```py\n# Jupyter Notebook support\nconda install \"notebook>=5.3\" \"ipywidgets>=7.5\"\n# JupyterLab support\nconda install \"jupyterlab>=3\" \"ipywidgets>=7.6\"\n# JupyterLab renderer support\njupyter labextension install jupyterlab-plotly@5.11.0\n# OPTIONAL: Jupyter widgets extension\njupyter labextension install @jupyter-widgets/jupyterlab-\\\nmanager plotlywidget@5.11.0\n```", "```py\n# Jupyter Notebook support\npip install \"notebook>=5.3\" \"ipywidgets>=7.5\"\n# JupyterLab support\npip install \"jupyterlab>=3\" \"ipywidgets>=7.6\"\n# JupyterLab renderer support\njupyter labextension install jupyterlab-plotly@5.11.0\n# OPTIONAL: Jupyter widgets extension\njupyter labextension install @jupyter-widgets/jupyterlab-\\\nmanager plotlywidget@5.11.0\n```", "```py\nfrom datetime import timedelta\nimport plotly.offline as py\npy.init_notebook_mode()\n```", "```py\ndf = pd.read_csv('divvy_daily.csv')\ndf = df[['date', 'rides', 'temperature']]\ndf['date'] = pd.to_datetime(df['date'])\ndf.columns = ['ds', 'y', 'temp']\n```", "```py\nmodel = Prophet(seasonality_mode='multiplicative',\n                yearly_seasonality=6)\nmodel.add_regressor('temp')\nmodel.fit(df[df['ds'] < df['ds'].max() - \\\n          timedelta(weeks=2)])\nfuture = model.make_future_dataframe(periods=14)\nfuture['temp'] = df['temp']\nforecast = model.predict(future)\n```", "```py\nfrom prophet.plot import (\n    plot_plotly,\n    plot_components_plotly,\n    plot_forecast_component_plotly,\n    plot_seasonality_plotly\n)\n```", "```py\nfig = plot_plotly(model, forecast, trend=True)\npy.iplot(fig)\n```", "```py\nfig = plot_components_plotly(model, forecast ,\n                             figsize=(800, 175))\npy.iplot(fig)\n```", "```py\nfig = plot_forecast_component_plotly(model, forecast,\n                                     'temp')\npy.iplot(fig)\n```", "```py\nfig = plot_seasonality_plotly(model, 'yearly')\npy.iplot(fig)\n```"]