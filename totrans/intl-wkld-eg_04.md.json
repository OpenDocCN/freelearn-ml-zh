["```py\n     \"auth\": {\n       \"method\": \"file\",\n       \"credentials\": {\n         \"profile\": \"idtgg\"\n       }\n     }\n    ```", "```py\n    ========== Test Summary ==========\n    Execution Time:   3s\n    Tests Completed:   2\n    Tests Passed:     1\n    Tests Failed:     1\n    Tests Skipped:     0\n    ----------------------------------\n    Test Groups:\n        pretestvalidation:     PASSED\n        coredependencies:     FAILED\n    ----------------------------------\n    Failed Tests:\n    Group Name: coredependencies\n            Test Name: javaversion\n                Reason: Encountered error while fetching java version on the device: Failed to run Java version command with error: Command '{java -version 2>&1 map[] 30s}' exited with code 127\\. Error output: .\n    ```", "```py\n========== Test Summary ==========\nExecution Time:   22m59s\nTests Completed:   7\nTests Passed:     7\nTests Failed:     0\nTests Skipped:     0\n----------------------------------\nTest Groups:\n    pretestvalidation:   PASSED\n    coredependencies:   PASSED\n    version:       PASSED\n    component:       PASSED\n    lambdadeployment:   PASSED\n    mqtt:         PASSED\n----------------------------------\n```", "```py\n    sudo -E java -Droot=\"/greengrass/v2\" -Dlog.store=FILE \\\n      -jar ./greengrass/lib/Greengrass.jar \\\n      --aws-region us-west-2 \\\n      --thing-name hbshub001 \\\n      --thing-group-name hbshubprototypes \\\n      --tes-role-name GreengrassV2TokenExchangeRole \\\n      --tes-role-alias-name GreengrassCoreTokenExchangeRoleAlias \\\n      --component-default-user ggc_user:ggc_group \\\n      --provision true \\\n      --setup-system-service true \\\n      --deploy-dev-tools true\n    ```", "```py\n    Created device configuration\n    Successfully configured Nucleus with provisioned resource details!\n    Creating a deployment for Greengrass first party components to the thing group\n    Configured Nucleus to deploy aws.greengrass.Cli component\n    Successfully set up Nucleus as a system service\n    ```", "```py\n    java.lang.RuntimeException: Unable to create ipc client and Please run CLI as authorized user or group. This is an example of IoT Greengrass security principles at work. By default, the IoT Greengrass software is installed as the root system user. Only the root user, or a system user added to /etc/sudoers, can interact with the IoT Greengrass core software, even through the IoT Greengrass CLI. Components are run as the default system user identified in the configuration (please refer to the --component-default-user argument in the installation command), or each component can define an override system user to run as. Run the command again using sudo (*superuser do*):\n    ```", "```py\n    RUNNING, indicating the component's life cycle is either on or available. That makes sense because the CLI should always be available to us while the component is being deployed. Components that run once, perform a task, and close would show a state of FINISHED after they have completed their life cycle tasks.That's just the component's status, so next, let's take a look at the component's recipe and artifacts. As defined earlier, a component is made up of two resources: a recipe file and a set of artifacts. So what does the recipe file for the CLI component look like? You can find this in the `/greengrass/v2/packages/recipes` directory.\n    ```", "```py\n    Selection of recipe.yaml for aws.greengrass.C--\n    RecipeFormatVersion: \"2020-01-25\"\n    ComponentName: \"aws.greengrass.Cli\"\n    ComponentVersion: \"2.4.0\"\n    ComponentType: \"aws.greengrass.plugin\"\n    ComponentDescription: \"The Greengrass CLI component provides a local command-line interface that you can use on Greengrass core devices to develop and debug components locally. The Greengrass CLI lets you create local deployments and restart components on the Greengrass core device, for example.\"\n    ComponentPublisher: \"AWS\"\n    ComponentDependencies:\n      aws.greengrass.Nucleus:\n        VersionRequirement: \">=2.4.0 <2.5.0\"\n        DependencyType: \"SOFT\"\n    Manifests:\n    - Platform:\n        os: \"linux\"\n      Lifecycle: {}\n      Artifacts:\n      - Uri: \"greengrass:UbhqXXSJj65QLVH5UqL6nBRterSKIhQu5FKeVAStZGc=/aws.greengrass.cli.client.zip\"\n        Digest: \"uziZS73Z6dKgQgB0tna9WCJ1KhtyhsAb/DSv2Eaev8I=\"\n        Algorithm: \"SHA-256\"\n        Unarchive: \"ZIP\"\n        Permission:\n          Read: \"ALL\"\n          Execute: \"ALL\"\n      - Uri: \"greengrass:2U_cb2X7-GFaXPMsXRutuT_zB6CdImClH0DSNVvzy1Y=/aws.greengrass.Cli.jar\"\n        Digest: \"UpynbTgG+wYShtkcAr3X+l8/9QerGwaMw5U4IiicrMc=\"\n        Algorithm: \"SHA-256\"\n        Unarchive: \"NONE\"\n        Permission:\n          Read: \"OWNER\"\n          Execute: \"NONE\"\n    Lifecycle: {}\n    ```", "```py\n    #!/bin/bash\n    if [ -z $1 ]; then\n            target=\"world\"\n    else\n            target=$1\n    fi\n    echo \"Hello, $target\"\n    ```", "```py\n    {\n      \"RecipeFormatVersion\": \"2020-01-25\",\n      \"ComponentName\": \"com.hbs.hub.HelloWorld\",\n      \"ComponentVersion\": \"1.0.0\",\n      \"ComponentDescription\": \"My first AWS IoT Greengrass component.\",\n      \"ComponentPublisher\": \"Home Base Solutions\",\n      \"ComponentConfiguration\": {\n        \"DefaultConfiguration\": {\n          \"Message\": \"world!\"\n        }\n      },\n      \"Manifests\": [\n        {\n          \"Platform\": {\n            \"os\": \"linux\"\n          },\n          \"Lifecycle\": {\n            \"Run\": \". {artifacts:path}/hello.sh '{configuration:/Message}'\"\n          }\n        }\n      ]\n    }\n    ```", "```py\n    sudo /greengrass/v2/bin/greengrass-cli deployment create   --recipeDir ~/hbshub/recipes --artifactDir ~/hbshub/artifacts --merge \"com.hbs.hub.HelloWorld=1.0.0\"\n    ```", "```py\n    Local deployment submitted! Deployment Id: b0152914-869c-4fec-b24a-37baf50f3f69\n    ```", "```py\n    Components currently running in Greengrass:\n    Component Name: com.hbs.hub.HelloWorld\n        Version: 1.0.0\n        State: FINISHED\n        Configuration: {\"Message\":\"world!\"}\n    ```", "```py\n    2021-05-26T22:22:02.325Z [INFO] (pool-2-thread-32) com.hbs.hub.HelloWorld: shell-runner-start. {scriptName=services.com.hbs.hub.HelloWorld.lifecycle.Run, serviceName=com.hbs.hub.HelloWorld, currentState=STARTING, command=[\"/greengrass/v2/packages/artifacts/com.hbs.hub.HelloWorld/1.0.0/hello.sh 'world...\"]}\n    2021-05-26T22:22:02.357Z [INFO] (Copier) com.hbs.hub.HelloWorld: stdout. Hello, world!. {scriptName=services.com.hbs.hub.HelloWorld.lifecycle.Run, serviceName=com.hbs.hub.HelloWorld, currentState=RUNNING}\n    2021-05-26T22:22:02.365Z [INFO] (Copier) com.hbs.hub.HelloWorld: Run script exited. {exitCode=0, serviceName=com.hbs.hub.HelloWorld, currentState=RUNNING}\n    ```"]