["```py\n#import necessary modules here\n#--the final notebook will have complete codes that can be\n#--copied out into self-contained .py scripts\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport cv2 \nimport sys\nimport tempfile\n\nfrom sklearn import svm, metrics\nimport tensorflow as tf\n\nfrom tensorflow.examples.tutorials.mnist import input_data\n```", "```py\n#what kind of data do we already have?\nfrom sklearn import datasets\ndigits=datasets.load_digits()\n\nexample_image=digits.images[0]\nprint(type(example_image))\nplt.imshow(example_image); plt.show()\nexample_image.reshape((8*8,1))\n```", "```py\nexample_image=digits.images[0]\nprint(type(example_image))\n```", "```py\nplt.imshow(example_image); plt.show()\nexample_image.reshape((8*8,1))\n```", "```py\nexample_image.reshape((8*8,1))\n```", "```py\n#acquire standard MNIST handwritten digit data\n#http://yann.lecun.com/exdb/mnist/\n\ndata_dir = '/tmp/tensorflow/mnist/input_data'\nmnist = input_data.read_data_sets(data_dir, one_hot=True)\n```", "```py\n#now we load and examine the data\ntrain_data=mnist.train.images\nprint(train_data.shape)\nn_samples = train_data.shape[0]\n\ntrain_labels=np.array(np.where(mnist.train.labels==1))[1]\n\nplt.imshow(train_data[1000].reshape((28,28))); plt.show()\n```", "```py\n#now we load and examine the data\ntrain_data=mnist.train.images\n```", "```py\nprint(train_data.shape)\n```", "```py\nn_samples = train_data.shape[0]\n```", "```py\ntrain_labels=np.array(np.where(mnist.train.labels==1))[1]\nplt.imshow(train_data[1000].reshape((28,28))); plt.show()\n```", "```py\n# Create a classifier: a support vector classifier\nclassifier = svm.SVC(gamma=0.001)\n# Learn about gamma and other SVM parameters here:\n# http://scikit-learn.org/stable/auto_examples/svm/plot_rbf_parameters.html\n# Exercise: Experiment with the parameters to see how they affect execution \n# time and accuracy\n\n# Train the model -- we're only going to use the training data (and not\n# the test data) to ensure that our model generalizes to unseen cases.\n# This (training) is typically what takes the most computational time\n# when doing machine learning.\nclassifier.fit(train_data, train_labels)\n```", "```py\n# Now predict the value of the digit on the test data:\ntest_data=mnist.test.images\ntest_labels=np.array(np.where(mnist.test.labels==1))[1]\n\nexpected = test_labels\npredicted = classifier.predict(test_data)\n```", "```py\n# And display the results\nprint(\"See https://en.wikipedia.org/wiki/Precision_and_recall to understand metric definitions\")\nprint(\"Classification report for classifier %s:\\n%s\\n\"\n      % (classifier, metrics.classification_report(expected, predicted)))\nprint(\"Confusion matrix:\\n%s\" % metrics.confusion_matrix(expected, predicted))\n\nimages_and_predictions = list(zip(test_data, predicted))\nfor index, (image, prediction) in enumerate(images_and_predictions[:4]):\n    plt.subplot(2, 4, index + 5)\n    plt.axis('off')\n    plt.imshow(image.reshape((28,28)), cmap=plt.cm.gray_r, interpolation='nearest')\n    plt.title('Prediction: %i' % prediction)\n\nplt.show()\n```", "```py\n#Let's test our model on images we draw ourselves!\n\nfrom matplotlib.lines import Line2D\n%pylab notebook \n#This is needed for plot widgets\n\nclass Annotator(object):\n    def __init__(self, axes):\n        self.axes = axes\n\n        self.xdata = []\n        self.ydata = []\n        self.xy = []\n        self.drawon = False\n\n    def mouse_move(self, event):\n        if not event.inaxes:\n            return\n\n        x, y = event.xdata, event.ydata\n        if self.drawon:\n            self.xdata.append(x)\n            self.ydata.append(y)\n            self.xy.append((int(x),int(y)))\n            line = Line2D(self.xdata,self.ydata)\n            line.set_color('r')\n            self.axes.add_line(line)\n\n            plt.draw()\n\n    def mouse_release(self, event):\n        # Erase x and y data for new line\n        self.xdata = []\n        self.ydata = []\n        self.drawon = False\n\n    def mouse_press(self, event):\n        self.drawon = True\n\nimg = np.zeros((28,28,3),dtype='uint8')\n\nfig, axes = plt.subplots(figsize=(3,3))\naxes.imshow(img)\nplt.axis(\"off\")\nplt.gray()\nannotator = Annotator(axes)\nplt.connect('motion_notify_event', annotator.mouse_move)\nplt.connect('button_release_event', annotator.mouse_release)\nplt.connect('button_press_event', annotator.mouse_press)\n\naxes.plot()\n\nplt.show()\n```", "```py\n#Let's test our model on images we draw ourselves!\n\nfrom matplotlib.lines import Line2D\n```", "```py\n%pylab notebook\n```", "```py\nclass Annotator(object):\n    def __init__(self, axes):\n        self.axes = axes\n\n        self.xdata = []\n        self.ydata = []\n        self.xy = []\n        self.drawon = False\n\n    def mouse_move(self, event):\n        if not event.inaxes:\n            return\n\n        x, y = event.xdata, event.ydata\n        if self.drawon:\n            self.xdata.append(x)\n            self.ydata.append(y)\n            self.xy.append((int(x),int(y)))\n            line = Line2D(self.xdata,self.ydata)\n            line.set_color('r')\n            self.axes.add_line(line)\n\n            plt.draw()\n\n    def mouse_release(self, event):\n        # Erase x and y data for new line\n        self.xdata = []\n        self.ydata = []\n        self.drawon = False\n\n    def mouse_press(self, event):\n        self.drawon = True\n```", "```py\nimg = np.zeros((28,28,3),dtype='uint8')\n```", "```py\nfig, axes = plt.subplots(figsize=(3,3))\naxes.imshow(img)\nplt.axis(\"off\")\nplt.gray()\nannotator = Annotator(axes)\nplt.connect('motion_notify_event', annotator.mouse_move)\nplt.connect('button_release_event', annotator.mouse_release)\nplt.connect('button_press_event', annotator.mouse_press)\n\naxes.plot()\n\nplt.show()\n```", "```py\n# Now we see how our model \"sees\" (predicts the digit from)\n# our hand drawn image...\n# First, we rasterize (convert to pixels) our vector data\n# and process the image to more closely resemble something\n# drawn with a pencil or pressure-sensitive tablet.\n\ndigimg = np.zeros((28,28,3),dtype='uint8')\nfor ind, points in enumerate(annotator.xy[:-1]):\n    digimg=cv2.line(digimg, annotator.xy[ind], annotator.xy[ind+1],(255,0,0),1)\ndigimg = cv2.GaussianBlur(digimg,(5,5),1.0)\ndigimg = (digimg.astype('float') *1.0/np.amax(digimg)).astype('float')[:,:,0]\ndigimg **= 0.5; digimg[digimg>0.9]=1.0\n\n#The model is expecting the input in a particular format\ntestim = digimg.reshape((-1,28*28))\n\nprint(\"Support vector machine prediction:\",classifier.predict( testim ))\n\noutimg = testim.reshape((28,28))\nfigure(figsize=(3,3)); imshow(outimg);\n```", "```py\ndigimg = np.zeros((28,28,3),dtype='uint8')\n```", "```py\nfor ind, points in enumerate(annotator.xy[:-1]):\n    digimg=cv2.line(digimg, annotator.xy[ind], annotator.xy[ind+1],(255,0,0),1)\ndigimg = cv2.GaussianBlur(digimg,(5,5),1.0)\n```", "```py\ndigimg = (digimg.astype('float') *1.0/np.amax(digimg)).astype('float')[:,:,0]\n```", "```py\ndigimg **= 0.5; digimg[digimg>0.9]=1.0\n```", "```py\n#The model is expecting the input in a particular format\ntestim = digimg.reshape((-1,28*28))\n```", "```py\nprint(\"Support vector machine prediction:\",classifier.predict( testim ))\n\noutimg = testim.reshape((28,28))\nfigure(figsize=(3,3)); imshow(outimg);\n```", "```py\ndata_dir = '/tmp/tensorflow/mnist/input_data'\nmnist = input_data.read_data_sets(data_dir, one_hot=True)\n\n# Create the model\nx = tf.placeholder(tf.float32, [None, 784])\nW = tf.Variable(tf.zeros([784, 10]))\nb = tf.Variable(tf.zeros([10]))\ny = tf.matmul(x, W) + b\n\n# Define loss and optimizer\ny_ = tf.placeholder(tf.float32, [None, 10])\n\ncross_entropy = tf.reduce_mean(\n  tf.nn.softmax_cross_entropy_with_logits(labels=y_, logits=y))\ntrain_step = tf.train.GradientDescentOptimizer(0.5).minimize(cross_entropy)\n\nsess = tf.InteractiveSession()\ntf.global_variables_initializer().run()\n# Train\nfor _ in range(1000):\n    batch_xs, batch_ys = mnist.train.next_batch(100)\n    sess.run(train_step, feed_dict={x: batch_xs, y_: batch_ys})\n\n# Test trained model\ncorrect_prediction = tf.equal(tf.argmax(y, 1), tf.argmax(y_, 1))\naccuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))\nprint(\\\"Model accuracy:\\\",sess.run(accuracy, feed_dict={x: mnist.test.images,\n                                    y_: mnist.test.labels}))\n```", "```py\ndata_dir = '/tmp/tensorflow/mnist/input_data'\nmnist = input_data.read_data_sets(data_dir, one_hot=True)\n```", "```py\nx = tf.placeholder(tf.float32, [None, 784])\nW = tf.Variable(tf.zeros([784, 10]))\nb = tf.Variable(tf.zeros([10]))\ny = tf.matmul(x, W) + b\n```", "```py\ny_ = tf.placeholder(tf.float32, [None, 10])\n```", "```py\ncross_entropy = tf.reduce_mean(\n  tf.nn.softmax_cross_entropy_with_logits(labels=y_, logits=y))\ntrain_step = tf.train.GradientDescentOptimizer(0.5).minimize(cross_entropy)\n```", "```py\nsess = tf.InteractiveSession()\ntf.global_variables_initializer().run()\nfor _ in range(1000):\n    batch_xs, batch_ys = mnist.train.next_batch(100)\n    sess.run(train_step, feed_dict={x: batch_xs, y_: batch_ys})\n```", "```py\ncorrect_prediction = tf.equal(tf.argmax(y, 1), tf.argmax(y_, 1))\naccuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))\nprint(\\\"Model accuracy:\\\",sess.run(accuracy, feed_dict={x: mnist.test.images,\n                                    y_: mnist.test.labels}))\n```", "```py\nimg = np.zeros((28,28,3),dtype='uint8')\nfig, axes = plt.subplots(figsize=(3,3))\naxes.imshow(img)\nplt.axis(\"off\")\nplt.gray()\nannotator = Annotator(axes)\nplt.connect('motion_notify_event', annotator.mouse_move)\nplt.connect('button_release_event', annotator.mouse_release)\nplt.connect('button_press_event', annotator.mouse_press)\naxes.plot()\nplt.show()\n```", "```py\nfor tindex in range(10):\n    testlab = np.zeros((1,10))\n    testlab[0,tindex] = 1\n    if sess.run(accuracy, feed_dict={x: testim, y_ : testlab}) == 1:\n        break\n```", "```py\ndef deepnn(x):\n     with tf.name_scope('reshape'):\n     x_image = tf.reshape(x, [-1, 28, 28, 1])\n```", "```py\n     with tf.name_scope('conv1'):\n     W_conv1 = weight_variable([5, 5, 1, 32])\n     b_conv1 = bias_variable([32])\n     h_conv1 = tf.nn.relu(conv2d(x_image, W_conv1) + b_conv1)\n\n     # Pooling layer - downsamples by 2X.\n     with tf.name_scope('pool1'):\n     h_pool1 = max_pool_2x2(h_conv1)\n\n     # Second convolutional layer -- maps 32 feature maps to 64.\n     with tf.name_scope('conv2'):\n     W_conv2 = weight_variable([5, 5, 32, 64])\n     b_conv2 = bias_variable([64])\n     h_conv2 = tf.nn.relu(conv2d(h_pool1, W_conv2) + b_conv2)\n\n     # Second pooling layer.\n     with tf.name_scope('pool2'):\n     h_pool2 = max_pool_2x2(h_conv2)\n\n     # Fully connected layer 1 -- after 2 round of downsampling, our 28x28 image\n     # is down to 7x7x64 feature maps -- maps this to 1024 features.\n     with tf.name_scope('fc1'):\n     W_fc1 = weight_variable([7 * 7 * 64, 1024])\n     b_fc1 = bias_variable([1024])\n\n     h_pool2_flat = tf.reshape(h_pool2, [-1, 7*7*64])\n     h_fc1 = tf.nn.relu(tf.matmul(h_pool2_flat, W_fc1) + b_fc1)\n\n     # Dropout - controls the complexity of the model, prevents co-adaptation of\n     # features.\n     with tf.name_scope('dropout'):\n     keep_prob = tf.placeholder(tf.float32)\n     h_fc1_drop = tf.nn.dropout(h_fc1, keep_prob)\n\n     # Map the 1024 features to 10 classes, one for each digit\n     with tf.name_scope('fc2'):\n     W_fc2 = weight_variable([1024, 10])\n     b_fc2 = bias_variable([10])\n\n     y_conv = tf.matmul(h_fc1_drop, W_fc2) + b_fc2\n     return y_conv, keep_prob\n\n    def conv2d(x, W):\n \"\"\"conv2d returns a 2d convolution layer with full stride.\"\"\"\n     return tf.nn.conv2d(x, W, strides=[1, 1, 1, 1], padding='SAME')\n\n    def max_pool_2x2(x):\n     \"\"\"max_pool_2x2 downsamples a feature map by 2X.\"\"\"\n     return tf.nn.max_pool(x, ksize=[1, 2, 2, 1],\n     strides=[1, 2, 2, 1], padding='SAME')\n\n    def weight_variable(shape):\n    \"\"\"weight_variable generates a weight variable of a given shape.\"\"\"\n     initial = tf.truncated_normal(shape, stddev=0.1)\n     return tf.Variable(initial)\n\n    def bias_variable(shape):\n    \"\"\"bias_variable generates a bias variable of a given shape.\"\"\"\n     initial = tf.constant(0.1, shape=shape)\n     return tf.Variable(initial)\n\n```", "```py\n  ###begin main code\n\n    data_dir= '/tmp/tensorflow/mnist/input_data'\n    # Import data\n    mnist = input_data.read_data_sets(data_dir, one_hot=True)\n\n    # Create the model\n    x = tf.placeholder(tf.float32, [None, 784])\n\n    # Define loss and optimizer\n    y_ = tf.placeholder(tf.float32, [None, 10])\n\n    # Build the graph for the deep net\n    y_conv, keep_prob = deepnn(x)\n\n    with tf.name_scope('loss'):\n     cross_entropy = tf.nn.softmax_cross_entropy_with_logits(labels=y_,\n     logits=y_conv)\n    cross_entropy = tf.reduce_mean(cross_entropy)\n\n    with tf.name_scope('adam_optimizer'):\n     train_step = tf.train.AdamOptimizer(1e-4).minimize(cross_entropy)\n\n    with tf.name_scope('accuracy'):\n     correct_prediction = tf.equal(tf.argmax(y_conv, 1), tf.argmax(y_, 1))\n     correct_prediction = tf.cast(correct_prediction, tf.float32)\n     accuracy = tf.reduce_mean(correct_prediction)\n\n    graph_location = tempfile.mkdtemp()\n    print('Saving graph to: %s' % graph_location)\n    train_writer = tf.summary.FileWriter(graph_location)\n    train_writer.add_graph(tf.get_default_graph())\n\n    # Let's run the model\n    sess = tf.InteractiveSession()\n    sess.run(tf.global_variables_initializer())\n    for i in range(20000):\n     batch = mnist.train.next_batch(50)\n     if i % 100 == 0:\n     train_accuracy = accuracy.eval(feed_dict={\n     x: batch[0], y_: batch[1], keep_prob: 1.0})\n     print('step %d, training accuracy %g' % (i, train_accuracy))\n     train_step.run(feed_dict={x: batch[0], y_: batch[1], keep_prob: 0.5})\n\n    # How did we do?\n    print('test accuracy %g' % accuracy.eval(feed_dict={\n     x: mnist.test.images, y_: mnist.test.labels, keep_prob: 1.0}))\n```", "```py\n# Test on handwritten digits again\nimg = np.zeros((28,28,3),dtype='uint8')\nfig, axes = plt.subplots(figsize=(3,3))\naxes.imshow(img)\nplt.axis(\"off\")\nplt.gray()\nannotator = Annotator(axes)\nplt.connect('motion_notify_event', annotator.mouse_move)\nplt.connect('button_release_event', annotator.mouse_release)\nplt.connect('button_press_event', annotator.mouse_press)\naxes.plot()\nplt.show()\n```", "```py\n# Rasterize and preprocess the above\ndigimg = np.zeros((28,28,3),dtype='uint8')\nfor ind, points in enumerate(annotator.xy[:-1]):\n    digimg=cv2.line(digimg, annotator.xy[ind], annotator.xy[ind+1],(255,0,0),1)\ndigimg = cv2.GaussianBlur(digimg,(5,5),1.0)\ndigimg = (digimg.astype('float') *1.0/np.amax(digimg)).astype('float')[:,:,0]\ndigimg **= 0.5; digimg[digimg>0.9]=1.0\ntestim = digimg.reshape((-1,28*28))\n\n# And run through our model\nfor tindex in range(10):\n    testlab = np.zeros((1,10))\n    testlab[0,tindex] = 1\n    if accuracy.eval(feed_dict={x: testim, y_: testlab, \n                                keep_prob: 1.0}) == 1:\n        break\n\nprint(\"Predicted #:\",tindex) #tindex = TF model prediction\n\n# Display our rasterized digit\noutimg = testim.reshape((28,28))\nfigure(figsize=(3,3)); imshow(outimg)\n```"]