- en: '4'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '4'
- en: Data Visualization with ggplot2
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 ggplot2 进行数据可视化
- en: The previous chapter covered intermediate data processing techniques, focusing
    on dealing with string data. When the raw data has been transformed and processed
    into a clean and structured shape, we can take the analysis to the next level
    by visualizing the clean data in a graph, which we aim to accomplish in this chapter.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 上一章介绍了中级数据处理技术，重点是处理字符串数据。当原始数据经过转换和处理，变成干净和结构化的形状后，我们可以通过在图表中可视化干净数据来将分析提升到下一个层次，这正是我们本章的目标。
- en: By the end of this chapter, you will be able to plot standard graphs using the
    `ggplot2` package and add customizations to present excellent visuals.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，您将能够使用 `ggplot2` 软件包绘制标准图表，并添加自定义设置以呈现出色的视觉效果。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Introducing `ggplot2`
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍 `ggplot2`
- en: Understanding the grammar of graphics
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解图形语法
- en: Geometries in graphics
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图形中的几何形状
- en: Controlling themes in graphics
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制图形主题
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'To complete the exercises in this chapter, you will need to have the latest
    versions of the following packages:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成本章的练习，您需要拥有以下软件包的最新版本：
- en: The `ggplot2` package, version 3.3.6\. Alternatively, install the `tidyverse`
    package and load `ggplot2` directly.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ggplot2` 软件包，版本 3.3.6。或者，安装 `tidyverse` 软件包并直接加载 `ggplot2`。'
- en: The `ggthemes` package, version 4.2.4.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ggthemes` 软件包，版本 4.2.4。'
- en: The versions mentioned along with the packages in the preceding list are the
    latest ones while I am writing this book.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在我编写本书时，前述列表中提到的软件包版本都是最新的。
- en: All the code and data for this chapter is available at [https://github.com/PacktPublishing/The-Statistics-and-Machine-Learning-with-R-Workshop/tree/main/Chapter_4](https://github.com/PacktPublishing/The-Statistics-and-Machine-Learning-with-R-Workshop/tree/main/Chapter_4).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中所有代码和数据均可在[https://github.com/PacktPublishing/The-Statistics-and-Machine-Learning-with-R-Workshop/tree/main/Chapter_4](https://github.com/PacktPublishing/The-Statistics-and-Machine-Learning-with-R-Workshop/tree/main/Chapter_4)找到。
- en: Introducing ggplot2
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍 ggplot2
- en: Conveying information via graphs tends to be more effective and visually appealing
    than tables alone. After all, humans are much quicker at processing visual information,
    such as recognizing a car in an image. In building **machine learning** (**ML**)
    models, we are often interested in the training and test loss profile in the form
    of a line chart that indicates the reduction in the training and test set loss
    as the model gets trained for a more extended period. Observing performance metrics
    helps us better diagnose whether a model is **underfitting** or **overfitting**—in
    other words, whether the current model is too simple or overly complex. Note that
    the test set is used to approximate a future dataset, and minimizing the test
    set error helps the model generalize to new datasets, an approach known as **empirical
    risk minimization**. Underfitting refers to the case when the model does poorly
    in both training and test sets due to insufficient fitting power, while overfitting
    means the model does well in the training set but not in the test set due to an
    overly complex model. Both underfitting and overfitting lead to high error frequency
    on the test set and thus low generalization power.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 通过图表传达信息通常比单独的表格更有效、更具视觉吸引力。毕竟，人类在处理视觉信息方面要快得多，比如在图像中识别一辆汽车。在构建 **机器学习**（**ML**）模型时，我们通常对训练和测试损失曲线感兴趣，该曲线以折线图的形式表示随着模型训练时间的延长，训练集和测试集损失逐渐减少。观察性能指标有助于我们更好地诊断模型是否
    **欠拟合** 或 **过拟合**——换句话说，当前模型是否过于简单或过于复杂。请注意，测试集用于近似未来的数据集，最小化测试集错误有助于模型泛化到新的数据集，这种方法被称为
    **经验风险最小化**。欠拟合是指模型在训练集和测试集上都表现不佳，这是由于拟合能力不足造成的，而过拟合则意味着模型在训练集上表现良好，但在测试集上表现不佳，这是由于模型过于复杂造成的。无论是欠拟合还是过拟合，都会导致测试集上的错误频率高，从而降低泛化能力。
- en: Good visualization skills are also a signpost of a good communicator. Creating
    good visualizations requires carefully designing the interface while satisfying
    the technical constraints regarding what is achievable. When tasked with building
    an ML model, most of the time is often spent on data processing, model development,
    and fine-tuning, only leaving a disproportionately small amount of time to communicate
    the modeling results to stakeholders. Effective communication means that an ML
    model, albeit a black-box solution for people outside this field, could still
    be transparently and adequately explained to and understood by its internal users.
    Meaningful and powerful visualizations created by various offerings from `ggplot2`,
    the specific package from the `tidyverse` ecosystem that focuses on graphing,
    serve as an excellent enabler to effective communication; the outputs are generally
    more visually engaging and attractive than the default plotting options offered
    by base R. After all, creating good visualizations will be an essential skill
    as you climb up the corporate ladder and think more from the audience’s perspective.
    Good presentation skills will become equally important to (if not more important
    than) your technical skills?, such as model development.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 良好的可视化技能也是良好沟通者的标志。创建良好的可视化需要仔细设计界面，同时满足关于可实现性的技术限制。当被要求构建机器学习模型时，大部分时间通常花在数据处理、模型开发和微调上，只留下极小的一部分时间来向利益相关者传达建模结果。有效的沟通意味着即使对于该领域外的人来说，机器学习模型虽然是一个黑盒解决方案，但仍然可以透明且充分地向内部用户解释和理解。由`ggplot2`等提供的有意义的强大可视化，这是`tidyverse`生态系统中专注于图形的特定包，是有效沟通的绝佳促进者；其输出通常比基础R提供的默认绘图选项更具视觉吸引力和吸引力。毕竟，随着你在企业阶梯上的攀升和更多地从观众的角度思考，创建良好的可视化将成为一项基本技能。良好的演示技巧将和（如果不是比）你的技术技能（如模型开发）同样重要？
- en: This section will show you how to achieve good visual communication by building
    simple yet powerful plots using the `ggplot2` package. It will help demystify
    modern visualization techniques using R and prepare you for more advanced visualization
    techniques. We will start with a simple scatter plot example and introduce the
    basic plotting grammar of the `ggplot2` package using the `mtcars` dataset, which
    contains a set of automobile-related observations and is automatically loaded
    in the working environment when loading `ggplot2`.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将向您展示如何通过构建简单而强大的图表来达到良好的视觉沟通效果，使用的是`ggplot2`包。这将有助于揭开使用R的现代可视化技术的神秘面纱，并为您准备更高级的可视化技术。我们将从一个简单的散点图示例开始，并使用包含一系列与汽车相关的观察数据的`mtcars`数据集介绍`ggplot2`包的基本绘图语法，该数据集在加载`ggplot2`时自动加载到工作环境中。
- en: Building a scatter plot
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建散点图
- en: A scatter plot is a two-dimensional plot where the value of the two variables,
    often numeric in type, uniquely determines each dot on the plot. It is the go-to
    plot when we want to assess the relationship between two numeric variables.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 散点图是一种二维图表，其中两个变量的值（通常是数值类型）唯一确定图表上的每个点。当我们想要评估两个数值变量之间的关系时，散点图是首选的图表类型。
- en: Let us go through an exercise to plot the relationship between the number of
    cylinders (the `cyl` variable) in a car and the miles per gallon (the `mpg` variable)
    using the `mtcars` dataset.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过一个练习来绘制使用`mtcars`数据集的汽车气缸数（`cyl`变量）和每加仑英里数（`mpg`变量）之间的关系图。
- en: Exercise 4.1 – Building a scatter plot using the mtcars dataset
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习4.1 – 使用mtcars数据集构建散点图
- en: 'In this exercise, we will first examine the structure of the `mtcars` dataset
    and generate a bivariate scatter plot using `ggplot2`. Proceed as follows:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将首先检查`mtcars`数据集的结构，并使用`ggplot2`生成一个双变量散点图。按照以下步骤进行：
- en: 'Load and examine the structure of the `mtcars` dataset, like so:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 加载并检查`mtcars`数据集的结构，如下所示：
- en: '[PRE0]'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The result shows that the `mtcars` DataFrame contains 32 rows and 11 columns,
    a relatively small and structured dataset that is easy to work with. Next, we
    will plot the relationship between `cyl` and `mpg`.
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 结果显示，`mtcars` DataFrame包含32行和11列，这是一个相对较小且结构化的数据集，易于处理。接下来，我们将绘制`cyl`和`mpg`之间的关系图。
- en: 'Use the `ggplot()` and `geom_point()` functions to generate a scatter plot
    based on the `cyl` and `mpg` variables. Enlarge the size of the title and text
    for the plot along both axes using the `theme` layer:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`ggplot()`和`geom_point()`函数根据`cyl`和`mpg`变量生成散点图。使用`theme`层放大标题和两轴上的文本大小：
- en: '[PRE1]'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'As shown in *Figure 4**.1*, the generated result contains 32 dots whose positions
    are uniquely determined by a combination of `cyl` and `mpg`. The screenshot suggests
    a decreasing trend in the value of `mpg` as `cyl` increases, although the within-group
    variation is also pronounced across the three groups of `cyl`:'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如*图4**.1*所示，生成的结果包含32个点，其位置由`cyl`和`mpg`的组合唯一确定。截图表明，随着`cyl`的增加，`mpg`的值呈下降趋势，尽管在`cyl`的三个组内也存在明显的组内变异：
- en: '![Figure 4.1 – Scatter plot between cyl and mpg](img/B18680_04_001.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![图4.1 – cyl和mpg之间的散点图](img/B18680_04_001.jpg)'
- en: Figure 4.1 – Scatter plot between cyl and mpg
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.1 – cyl和mpg之间的散点图
- en: Note that the `aes()` function maps `cyl` to the *x* axis and `mpg` to the *y*
    axis. When the mapping relationship is not explicitly shown, we often assume that
    the first argument corresponds to the horizontal axis and the second to the vertical
    axis.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，`aes()`函数将`cyl`映射到*x*轴，将`mpg`映射到*y*轴。当映射关系没有明确显示时，我们通常假设第一个参数对应于水平轴，第二个对应于垂直轴。
- en: 'The script used to generate the scatter plot consists of two high-level functions:
    `ggplot()` and `geom_point()`. The `ggplot()` function specifies the dataset to
    be used in the first argument and the variables to be respectively plotted on
    the two axes in the second argument, wrapped using the `aes()` function (more
    on this later). The `geom_point()` function enforces the display to be in a scatter
    plot. These two functions are chained together via a particular `+` operator,
    indicating overlaying the second layer of operation to the first.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 生成散点图的脚本由两个高级函数组成：`ggplot()`和`geom_point()`。`ggplot()`函数在第一个参数中指定要使用的数据集，在第二个参数中指定分别绘制在两个轴上的变量，使用`aes()`函数包装（更多内容将在后面介绍）。`geom_point()`函数强制显示为散点图。这两个函数通过特定的`+`运算符连接在一起，表示将第二层操作叠加到第一层。
- en: 'Also, note that the `cyl` variable is treated as numeric by `ggplot()`, as
    shown by the additional labels of `5` and `7` on the horizontal axis. We can verify
    the distinct values of `cyl` via the `unique()` function as follows:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，请注意，`ggplot()`将`cyl`变量视为数值，如水平轴上的额外标签`5`和`7`所示。我们可以通过以下方式验证`cyl`的独立值：
- en: '[PRE2]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Apparently, we need to treat it as a categorical variable to avoid unwanted
    interpolation between different values. This can be achieved by wrapping the `cyl`
    variable via the `factor()` function, which converts the input argument to a categorical
    output:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，我们需要将其视为一个分类变量，以避免不同值之间的不必要插值。这可以通过使用`factor()`函数包装`cyl`变量来实现，该函数将输入参数转换为分类输出：
- en: '[PRE3]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The resulting plot is shown in *Figure 4**.2*. By explicitly converting `cyl`
    to a categorical variable, the horizontal axis correctly indicates a distribution
    of dots for each unique value of `cyl`:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 结果图示在*图4**.2*中。通过显式地将`cyl`转换为分类变量，水平轴正确地表示了每个唯一`cyl`值的点分布：
- en: '![Figure 4.2 – Scatter plot after converting cyl to a categorical variable](img/B18680_04_002.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![图4.2 – 将cyl转换为分类变量后的散点图](img/B18680_04_002.jpg)'
- en: Figure 4.2 – Scatter plot after converting cyl to a categorical variable
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.2 – 将cyl转换为分类变量后的散点图
- en: Up until now, we have learned how to build a scatter plot by passing in the
    variables of interest after converting to the desired type. This works similarly
    to other kinds of plots, which observe a standard set of grammatical rules. Next,
    we will go through these fundamental rules to understand their commonalities.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经学习了如何通过转换到所需类型后传入感兴趣的变量来构建散点图。这与其他类型的图表类似，遵循一套标准的语法规则。接下来，我们将探讨这些基本规则以了解它们的共性。
- en: Understanding the grammar of graphics
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解图形语法
- en: 'The previous example contained the three essential layers that need to be specified
    when plotting a graph: **data**, **aesthetics**, and **geometries**. The primary
    purpose of each layer is listed as follows:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的例子包含了在绘图时需要指定的三个基本层：**数据**、**美学**和**几何形状**。每一层的主要目的如下列出：
- en: The data layer specifies the dataset to be plotted. This corresponds to the
    `mtcars` dataset we specified earlier.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据层指定要绘制的数据集。这对应于我们之前指定的`mtcars`数据集。
- en: The aesthetics layer specifies the scale-related items that map the variables
    to the visual properties of the plot. Examples include the variables to be shown
    for the *x* axis and *y* axis, the size and color, and other plot aesthetics.
    This corresponds to the `cyl` and `mpg` variables we specified earlier.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 美学层指定了与缩放相关的项目，这些项目将变量映射到图表的视觉属性。例如，包括用于*x*轴和*y*轴的变量、大小和颜色，以及其他图表美学。这对应于我们之前指定的`cyl`和`mpg`变量。
- en: The geometry layer specifies the visual elements used for the data, such as
    presenting the data via points, lines, or other forms. The `geom_point()` command
    we set in the previous example tells the plot to be shown as a scatter plot.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 几何层指定了用于数据的视觉元素，例如通过点、线或其他形式呈现数据。我们在前面的例子中设置的`geom_point()`命令告诉图表以散点图的形式显示。
- en: Other layers, such as the theme layer, also help beautify the plot, which we
    will cover later.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 其他层，如主题层，也有助于美化图表，我们将在后面介绍。
- en: 'The `geom_point()` layer from the previous example also suggests that we could
    easily switch to another type of plot by changing the keyword after the underscore.
    For example, as shown in the following code snippet, we can show the scatter plot
    as a boxplot for each unique value of `cyl` using the `geom_boxplot()` function:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的例子中的`geom_point()`层还暗示我们可以通过更改下划线后的关键字轻松切换到另一种类型的图表。例如，如以下代码片段所示，我们可以使用`geom_boxplot()`函数将散点图显示为每个独特的`cyl`值的箱线图：
- en: '[PRE4]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Running this command generates the output shown in *Figure 4**.3*, which visualizes
    a set of points as a boxplot for each distinct value of `cyl`. Employing a boxplot
    is an excellent way to detect outliers, such as the two extreme points lying outside
    the third boxplot:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 执行此命令将生成*图4.3*所示的输出，该输出将每个不同的`cyl`值的一组点作为箱线图进行可视化。使用箱线图是检测异常值（如位于第三个箱线图外的两个极端点）的一种极好方式：
- en: '![Figure 4.3 – Visualizing the same plot using a boxplot](img/B18680_04_003.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![图4.3 – 使用箱线图可视化相同的图表](img/B18680_04_003.jpg)'
- en: Figure 4.3 – Visualizing the same plot using a boxplot
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.3 – 使用箱线图可视化相同的图表
- en: Similarly, we could change the color and size of the points in the previous
    scatter plot by tweaking the aesthetics layer. Let us go through an exercise to
    see how this can be achieved.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，我们可以通过调整美学层来改变之前散点图中点的颜色和大小。让我们通过一个练习来看看如何实现这一点。
- en: Exercise 4.2 – Changing the color and size of points in a scatter plot
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习4.2 – 改变散点图中点的颜色和大小
- en: 'In this exercise, we will use the aesthetics layer to modify the color and
    size of the points displayed in the last scatter plot based on the `disp` and
    `hp` variables. The `disp` variable measures the engine displacement, and the
    `hp` variable indicates the gross horsepower. The points will thus vary in color
    and size given different values of `disp` and `hp`. Proceed as follows:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将使用美学层根据`disp`和`hp`变量修改最后散点图中显示的点的颜色和大小。`disp`变量衡量发动机排量，而`hp`变量表示总马力。因此，点的颜色和大小将根据`disp`和`hp`的不同值而变化。按照以下步骤进行：
- en: 'Change the color of the points in the scatter plot by passing `disp` to the
    `color` argument in the `aes()` function. Enlarge the `size` parameter of the
    legend as well:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在`aes()`函数中将`disp`传递给`color`参数来改变散点图中点的颜色。同时，也将图例的`size`参数放大：
- en: '[PRE5]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Running this command will generate the output shown in *Figure 4**.4*, where
    the color gradient of each point changes based on the value of `disp`:'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 执行此命令将生成*图4.4*所示的输出，其中每个点的颜色渐变根据`disp`的值而变化：
- en: '![Figure 4.4 – Adding color to the scatter plot](img/B18680_04_004.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![图4.4 – 向散点图添加颜色](img/B18680_04_004.jpg)'
- en: Figure 4.4 – Adding color to the scatter plot
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.4 – 向散点图添加颜色
- en: 'Change the size of the points in the scatter plot by passing `hp` to the `size`
    argument in the `aes()` function, as follows:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在`aes()`函数中将`hp`传递给`size`参数，如下所示，来改变散点图中点的尺寸：
- en: '[PRE6]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Running this command will generate the output shown in *Figure 4**.5*, where
    the size of each point also changes based on the value of `hp`:'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 执行此命令将生成*图4.5*所示的输出，其中每个点的尺寸也根据`hp`的值而变化：
- en: '![Figure 4.5 – Changing point size in the scatter plot](img/B18680_04_005.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![图4.5 – 改变散点图中点的尺寸](img/B18680_04_005.jpg)'
- en: Figure 4.5 – Changing point size in the scatter plot
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.5 – 改变散点图中点的尺寸
- en: 'Although the plot now looks more enriched, be careful when adding dimensions
    to a single plot. In our current example, the single plot contains four dimensions
    of information: `cyl`, `mpg`, `disp`, and `hp`. Human brains are adept at processing
    two- or three-dimensional visuals but may struggle when presented with higher
    dimensions of graphs. The presentation style depends on what message we want to
    convey to our audience. Instead of lumping all dimensions together, building a
    separate plot with just two or three variables for illustration may be more effective.
    Remember—effective communication in model development lies in the quality of the
    message to the audience and not in the richness of the visual output.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然现在图表看起来更加丰富，但在向单个图表添加维度时要小心。在我们的当前示例中，单个图表包含四个维度的信息：`cyl`、`mpg`、`disp` 和 `hp`。人类大脑擅长处理二维或三维视觉，但在面对更高维度的图表时可能会感到困难。展示风格取决于我们想要传达给观众的信息。与其将所有维度混合在一起，不如构建一个只包含两个或三个变量的单独图表进行说明可能更有效。记住——在模型开发中，有效的沟通在于传达给观众的信息质量，而不是视觉输出的丰富性。
- en: The following exercise will let us look at the individual components of different
    layers in more detail.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 以下练习将让我们更详细地查看不同层级的各个组件。
- en: Exercise 4.3 – Building a scatter plot with smooth curve fitting
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习 4.3 – 使用平滑曲线拟合构建散点图
- en: 'In this exercise, we will build a scatter plot and fit a smooth curve that
    passes through the points. Adding a smooth curve helps us detect the overall pattern
    among the points and is achieved using the `geom_smooth()` function. Proceed as
    follows:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将构建一个散点图，并拟合一个穿过点的平滑曲线。添加平滑曲线有助于我们检测点之间的整体模式，这是通过使用 `geom_smooth()`
    函数实现的。按照以下步骤进行：
- en: 'Build a scatter plot using `hp` and `mpg` with smooth curve fitting using `geom_smooth()`
    and coloring using `disp`, and adjust the opacity of the points by setting `alpha=0.6`
    in `geom_point()`:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `hp` 和 `mpg` 构建散点图，并使用 `geom_smooth()` 进行平滑曲线拟合，使用 `disp` 进行着色，并通过在 `geom_point()`
    中设置 `alpha=0.6` 来调整点的透明度：
- en: '[PRE7]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Running the preceding command generates the output shown in *Figure 4**.6*,
    where the central blue curve represents a model that best fits the points and
    the surrounding bounds indicate the uncertainty interval. We will discuss more
    on the concept of a model in a later chapter:'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 执行前面的命令会生成**图 4**.6 所示的输出，其中中心蓝色曲线代表最佳拟合点的模型，周围的界限表示不确定性区间。我们将在后面的章节中更详细地讨论模型的概念：
- en: '![Figure 4.6 – Fitting a smooth curve among the points in a scatter plot](img/B18680_04_006.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![**图 4.6** – 在散点图中拟合点之间的平滑曲线](img/B18680_04_006.jpg)'
- en: Figure 4.6 – Fitting a smooth curve among the points in a scatter plot
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 4.6** – 在散点图中拟合点之间的平滑曲线'
- en: Since the graphics are based on the concept of additive layers, we can also
    generate a plot by starting with some components, storing them in a variable,
    and then furnishing the graph variable with additional components. Let us see
    how this is done in the following steps.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 由于图形是基于叠加层概念构建的，我们也可以通过从一些组件开始，将它们存储在变量中，然后向图形变量添加额外的组件来生成一个图。让我们看看以下步骤是如何实现的。
- en: 'Build a scatter plot using `hp` and `mpg` with the same opacity level and store
    the plot in the `plt` variable:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用与之前相同的透明度级别，使用 `hp` 和 `mpg` 构建散点图，并将其存储在 `plt` 变量中：
- en: '[PRE8]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'As shown in *Figure 4**.7*, directly printing out `plt` generates a working
    plot, which suggests that a plot can also be stored as an object:'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如**图 4**.7 所示，直接打印出 `plt` 会生成一个工作图，这表明一个图也可以作为一个对象存储：
- en: '![Figure 4.7 – Generating a scatter plot using hp and mpg](img/B18680_04_007.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![**图 4.7** – 使用 hp 和 mpg 生成散点图](img/B18680_04_007.jpg)'
- en: Figure 4.7 – Generating a scatter plot using hp and mpg
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 4.7** – 使用 hp 和 mpg 生成散点图'
- en: 'Color the points using `disp` and add a smooth curve fitting to the previous
    plot, like so:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `disp` 着色点，并像这样向之前的图表添加平滑曲线拟合：
- en: '[PRE9]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Running these commands will generate the same plot as the one shown in *Figure
    4**.6*. Therefore, we can build a base plot, save it in a variable, and adjust
    its visual properties by adding extra layer specifications.
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 执行这些命令将生成与**图 4**.6 所示相同的图。因此，我们可以构建一个基础图，将其保存在变量中，并通过添加额外的图层规格来调整其视觉属性。
- en: We can also exercise more refined control over the size, shape, and color of
    the points in a scatter plot, all achieved by specifying the relevant arguments.
    Let us see how this can be completed in the following exercise.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以通过指定相关参数来对散点图中点的尺寸、形状和颜色进行更精细的控制，所有这些都可以在以下练习中完成。
- en: Exercise 4.4 – Controlling the size, shape, and color of points in a scatter
    plot
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习 4.4 – 控制散点图中点的尺寸、形状和颜色
- en: 'In this exercise, we will experiment with different input parameters to control
    a few visual properties of the points in the scatter plot. These controls are
    provided by the `geom_point()` function. Proceed as follows:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将通过不同的输入参数来控制散点图中点的几个视觉属性。这些控制由 `geom_point()` 函数提供。按照以下步骤进行：
- en: 'Generate a scatter plot between `hp` and `mpg`, and color the points using
    `disp`. Show the points as circles of size `4`:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 生成 `hp` 和 `mpg` 之间的散点图，并使用 `disp` 为点着色。将点显示为大小为 `4` 的圆圈：
- en: '[PRE10]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Running this command will generate the output shown in *Figure 4**.8*, where
    we see that the points are enlarged to be circles of different colors:'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 执行此命令将生成 *图 4.8* 中所示的输出，其中我们看到点被放大成不同颜色的圆圈：
- en: '![Figure 4.8 – Generating the same scatter plot with bigger-sized circles as
    points](img/B18680_04_008.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.8 – 使用较大尺寸的圆圈作为点的散点图](img/B18680_04_008.jpg)'
- en: Figure 4.8 – Generating the same scatter plot with bigger-sized circles as points
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.8 – 使用较大尺寸的圆圈作为点的散点图
- en: 'Note that setting `shape=1` in `geom_point()` presents the points as circles.
    We could show them in other forms by changing this argument. For example, the
    following command visualizes the points as triangles of a smaller size:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在 `geom_point()` 中设置 `shape=1` 将点显示为圆圈。我们可以通过更改此参数以其他形式展示它们。例如，以下命令将点可视化成较小尺寸的三角形：
- en: '[PRE11]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This is shown in *Figure 4**.9*:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这在 *图 4.9* 中显示：
- en: '![Figure 4.9 – Visualizing the points as triangles in the scatter plot](img/B18680_04_009.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.9 – 在散点图中将点可视化成三角形](img/B18680_04_009.jpg)'
- en: Figure 4.9 – Visualizing the points as triangles in the scatter plot
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.9 – 在散点图中将点可视化成三角形
- en: Next, we will look at how to make the scatter plot more visually appealing by
    filling in the inner color of the points.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将探讨如何通过填充点的内部颜色来使散点图更具视觉吸引力。
- en: 'Fill in the color of the previous scatter plot using `cyl` (after converting
    it to a factor type) in the `aes()` function, and set the `shape` parameter to
    `21`, `size` to `5`, and transparency (via `alpha`) to `0.6` in the `geom_point()`
    function:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `aes()` 函数中的 `cyl`（在将其转换为因子类型后）填充之前散点图的颜色，并在 `geom_point()` 函数中将 `shape`
    参数设置为 `21`，`size` 设置为 `5`，透明度（通过 `alpha`）设置为 `0.6`：
- en: '[PRE12]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Looking at the output in *Figure 4**.10*, the plot now looks more visually
    appealing, where three groups of points are spread across different ranges of
    `hp` and `mpg`. A shrewd reader may wonder why we are setting `shape=21` when
    the points are still visualized as circles. This is because `21` is a special
    value that allows the inner color of circles to be filled, along with their outlines
    or outer color:'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 观察到 *图 4.10* 中的输出，现在图表看起来更具视觉吸引力，其中三组点分布在 `hp` 和 `mpg` 的不同范围内。一个敏锐的读者可能会想知道为什么我们设置
    `shape=21`，而点仍然被可视化成圆圈。这是因为 `21` 是一个特殊值，允许填充圆圈的内部颜色，以及它们的轮廓或外部颜色：
- en: '![Figure 4.10 – Filling the inner color of the points in the scatter plot](img/B18680_04_010.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.10 – 散点图中点的内部颜色填充](img/B18680_04_010.jpg)'
- en: Figure 4.10 – Filling the inner color of the points in the scatter plot
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.10 – 散点图中点的内部颜色填充
- en: Note that other than visualizing points on a graph, we can also present them
    as textual labels, which is more informative in a particular scenario. It could
    also be the case that multiple points overlap, making it difficult to tell them
    apart. Let’s look at how to handle such situations and present the points using
    an alternative way via the following exercise.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，除了在图上可视化点之外，我们还可以将它们作为文本标签来展示，这在特定场景中可能更有信息量。也可能出现多个点重叠的情况，使得难以区分它们。让我们看看如何处理这种情况，并通过以下练习以不同的方式展示点。
- en: Exercise 4.5 – Alternative ways of presenting points in a scatter plot
  id: totrans-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习 4.5 – 散点图中展示点的不同方式
- en: 'In this exercise, we will learn two different ways of presenting the points
    in a scatter plot: showing textual labels and jittering the overlapping points.
    Both techniques will add more flexibility to our plotting toolkit. Proceed as
    follows:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将学习两种不同的方式来展示散点图中的点：显示文本标签和抖动重叠的点。这两种技术都将为我们的绘图工具包增加更多灵活性。按照以下步骤进行：
- en: 'Visualize the brand names based on the names of each row using `row.names()`
    and plot them on the previous scatter plot of `hp` against `mpg` using `geom_text()`:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `row.names()` 根据每行的名称可视化品牌名称，并使用 `geom_text()` 将它们绘制在 `hp` 对 `mpg` 的先前散点图上：
- en: '[PRE13]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Running this command will generate the output shown in *Figure 4**.11*, where
    brand names replace the points. However, some brand names overlap with each other,
    making it difficult to identify their specific text. Let us see how to remedy
    this:'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 执行此命令将生成如图 *图 4**.11* 所示的输出，其中品牌名称取代了点。然而，一些品牌名称彼此重叠，使得难以识别它们的特定文本。让我们看看如何解决这个问题：
- en: '![Figure 4.11 – Showing brand names in a scatter plot](img/B18680_04_011.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.11 – 在散点图中显示品牌名称](img/B18680_04_011.jpg)'
- en: Figure 4.11 – Showing brand names in a scatter plot
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.11 – 在散点图中显示品牌名称
- en: 'Adjust the overlapping text using the `position_jitter()` function by passing
    it into the `position` argument of the `geom_text()` function:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过将 `position_jitter()` 函数传递给 `geom_text()` 函数的 `position` 参数来调整重叠文本：
- en: '[PRE14]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Executing this command will generate the output shown in *Figure 4**.12*, where
    we have additionally specified the `fontface` argument to be `bold` for better
    clarity. By changing the `width` and `height` parameters of the `position_jitter()`
    function and passing it to the `position` argument of `geom_text()`, we managed
    to adjust the position of the text on the graph, which is now more visually digestible:'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 执行此命令将生成如图 *图 4**.12* 所示的输出，其中我们额外指定了 `fontface` 参数为 `bold` 以提高清晰度。通过更改 `position_jitter()`
    函数的 `width` 和 `height` 参数并将其传递给 `geom_text()` 函数的 `position` 参数，我们成功调整了图表中文本的位置，使其现在更易于视觉理解：
- en: '![Figure 4.12 – Jittering the position of the text](img/B18680_04_012.jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.12 – 抖动文本的位置](img/B18680_04_012.jpg)'
- en: Figure 4.12 – Jittering the position of the text
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.12 – 抖动文本的位置
- en: Next, we will look at how to jitter overlapping points.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将探讨如何抖动重叠点。
- en: 'Generate a scatter plot of factored `cyl` against `mpg`, as follows:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按如下方式生成 `cyl` 因素与 `mpg` 的散点图：
- en: '[PRE15]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Running this command generates the output shown in *Figure 4**.13*, where we
    intentionally used the `cyl` categorical variable to show that multiple points
    are overlapping on the graph:'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 执行此命令将生成如图 *图 4**.13* 所示的输出，其中我们故意使用了 `cyl` 分类型变量来显示多个点在图上重叠：
- en: '![Figure 4.13 – Visualizing a scatter plot with overlapping points](img/B18680_04_013.jpg)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.13 – 可视化具有重叠点的散点图](img/B18680_04_013.jpg)'
- en: Figure 4.13 – Visualizing a scatter plot with overlapping points
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.13 – 可视化具有重叠点的散点图
- en: Let us adjust the position of the overlapping points so that they are visually
    separable, giving us a sense of how many such points line up on a single spot.
    Note that jittering means adding random positional adjustments to the points in
    this case.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们调整重叠点的位置，使它们在视觉上可区分，从而给我们一个关于有多少这样的点排列在单个位置上的感觉。请注意，抖动意味着在这种情况下向点添加随机位置调整。
- en: 'Jitter the points using `geom_jitter()`, like so:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `geom_jitter()` 函数对点进行抖动，如下所示：
- en: '[PRE16]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Running this command generates the output shown in *Figure 4**.14*, where the
    points along each category of `cyl` are now separated from each other instead
    of aligning on the same line. Adding random jitters thus helps visually separate
    the overlapping points using random perturbations:'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 执行此命令将生成如图 *图 4**.14* 所示的输出，其中 `cyl` 每个类别的点现在彼此分离，而不是排列在同一条线上。添加随机抖动因此有助于通过随机扰动来视觉上分离重叠的点：
- en: '![Figure 4.14 – Randomly jittering the overlapping points](img/B18680_04_014.jpg)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.14 – 随机抖动重叠点](img/B18680_04_014.jpg)'
- en: Figure 4.14 – Randomly jittering the overlapping points
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.14 – 随机抖动重叠点
- en: Next, we will look at the geometry of graphics that determines the visual elements
    shown in the plot.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将探讨确定图中显示的视觉元素的图形几何形状。
- en: Geometries in graphics
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 图形中的几何形状
- en: 'The previous section mostly covered scatter plots. In this section, we will
    go over two additional common types of plots: bar charts and line plots. We will
    discuss different ways to construct these plots, focusing on the geometries that
    can be used to control layer-specific visual properties of the graph.'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 上一节主要介绍了散点图。在本节中，我们将介绍两种额外的常见图表类型：条形图和折线图。我们将讨论构建这些图表的不同方法，重点关注可以用来控制图形特定视觉属性的几何形状。
- en: Understanding geometry in scatter plots
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解散点图中的几何关系
- en: Let us revisit the scatter plot and zoom in on the geometry layer. The geometry
    layer determines how the plot actually looks, which is an essential layer in our
    visual communication. At the time of writing, there are over 50 geometries we
    can choose from, all of which start with the `geom_` keyword.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一下散点图，并放大几何层。几何层决定了图表的实际外观，这是我们视觉交流中的基本层。在撰写本文时，我们有超过50种几何形状可供选择，所有这些都以
    `geom_` 关键字开头。
- en: 'Some overall guidelines apply when deciding which type of geometry to use.
    For example, the following list contains the possible kinds of applicable geometries
    for a typical scatter plot:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在决定使用哪种几何形状时，有一些总体指南适用。例如，以下列表包含典型散点图可能适用的几何形状类型：
- en: '**Point**, which visualizes the data as points'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**点**，将数据可视化表示为点'
- en: '**Jitter**, which adds positional jittering to a scatter plot'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**抖动**，向散点图添加位置抖动'
- en: '**Abline**, which adds a line on the scatter plot'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**拟合线**，在散点图上添加一条线'
- en: '**Smooth**, which smooths the plot by fitting a trend line along with the confidence
    bounds to help identify a particular pattern in the data'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**平滑**，通过拟合趋势线并添加置信界限来平滑图表，以帮助识别数据中的特定模式'
- en: '**Count**, which counts and shows the number of observations at each location
    in the scatter plot'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**计数**，在散点图的每个位置计数并显示观测值的数量'
- en: Each geometry layer is associated with its own aesthetic configurations, including
    both compulsory and optional settings. For example, the `geom_point()` function
    requires `x` and `y` as mandatory arguments to uniquely locate points on the plot
    and allows optional settings such as the `alpha` parameter to control the level
    of transparency, as well as `color` and `fill` to manage the coloring of the points,
    along with their `shape` and `size` parameters, and so on.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 每个几何层都与其自己的美学配置相关联，包括强制性和可选设置。例如，`geom_point()` 函数需要 `x` 和 `y` 作为强制参数来唯一定位图表上的点，并允许可选设置，如
    `alpha` 参数来控制透明度级别，以及 `color` 和 `fill` 来管理点的着色，以及它们的 `shape` 和 `size` 参数，等等。
- en: 'Since the geometry layer provides layer-specific control, we can set some of
    the visual properties in either the aesthetics layer or the geometry layer. For
    example, the following code generates the same plot as the one shown in *Figure
    4**.15*, where the coloring can be set in either the base `ggplot()` function
    or the layer-specific `geom_point()` function:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 由于几何层提供层特定控制，我们可以在美学层或几何层中设置一些视觉属性。例如，以下代码生成了与图*4.15*中显示的相同图表，其中着色可以在基本的 `ggplot()`
    函数或特定于层的 `geom_point()` 函数中设置：
- en: '[PRE17]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'That produces the following plot:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 这会产生以下图表：
- en: '![Figure 4.15 – Generating the same scatter plot using layer-specific geometry
    control](img/B18680_04_015.jpg)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![图4.15 – 使用特定于层的几何控制生成相同的散点图](img/B18680_04_015.jpg)'
- en: Figure 4.15 – Generating the same scatter plot using layer-specific geometry
    control
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.15 – 使用特定于层的几何控制生成相同的散点图
- en: The flexibility from layer-specific control manifests when we have more than
    one layer (not necessarily a different type) to display in the plot. We will see
    how multiple geometry layers can be used together in the following exercise.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在图表中显示多个层（不一定是不同类型）时，层特定控制带来的灵活性就显现出来了。在接下来的练习中，我们将看到如何一起使用多个几何层。
- en: Exercise 4.6 – Using multiple geometry layers
  id: totrans-146
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习4.6 – 使用多个几何层
- en: 'In this exercise, we will display the average `hp` and `mpg` values across
    different groups of `cyl` on top of the previous scatter plot. Once obtained from
    the raw `mtcars` dataset, extra mean statistics can be added by overlaying another
    geometry layer, taking the same type of scatter plot. Proceed as follows:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将在之前的散点图上显示不同 `cyl` 组的 `hp` 和 `mpg` 的平均值。一旦从原始 `mtcars` 数据集中获得，可以通过叠加另一个几何层，采用相同类型的散点图来添加额外的平均统计信息。按照以下步骤进行：
- en: 'Calculate the average values for all columns for each group of `cyl` using
    the `dplyr` library and store the result in a variable called `tmp`:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `dplyr` 库计算每个 `cyl` 组所有列的平均值，并将结果存储在一个名为 `tmp` 的变量中：
- en: '[PRE18]'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: We can see that the summary statistics on the average of all columns are obtained
    using the `summarize_all()` function, a utility function that applies the input
    function across all columns for each group. Here, we pass the `mean` function
    to calculate the average of a column. The resulting `tibble` object, stored in
    `tmp`, contains the average value for all variables across three groups of `cyl`.
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们可以看到，使用`summarize_all()`函数获取所有列的平均值的摘要统计信息，这是一个将输入函数应用于每个组的所有列的实用函数。在这里，我们传递`mean`函数来计算列的平均值。结果存储在`tmp`中的`tibble`对象包含了`cyl`三个组中所有变量的平均值。
- en: It is important to note that upon adding an extra geometry layer, the base aesthetics
    layer expects the same column names in each geometry layer. The base aesthetics
    layer in the `ggplot()` function applies to all geometry layers. Let us see how
    to add an extra geometry layer as a scatter plot to show the average `hp` and
    `mpg` values across different groups of `cyl`.
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 需要注意的是，在添加额外的几何层时，基础美学层期望每个几何层中具有相同的列名。在`ggplot()`函数中的基础美学层适用于所有几何层。让我们看看如何添加一个额外的几何层作为散点图来展示不同`cyl`组中平均`hp`和`mpg`值。
- en: 'Add an extra layer of scatter plot to show the average `hp` and `mpg` values
    as big squares for each group of `cyl`:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个额外的散点图层来展示每个`cyl`组的平均`hp`和`mpg`值作为大正方形：
- en: '[PRE19]'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Running this command will generate the output shown in *Figure 4**.16*, where
    the big squares (obtained by setting `shape=15` and `size=6` in the second `geom_point`
    layer) are sourced from the `tmp` dataset, as specified by the `data` parameter
    in the additional geometry layer.
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 执行此命令将生成*图4.16*中所示的输出，其中大正方形（通过在第二个`geom_point`层中设置`shape=15`和`size=6`获得）来源于`tmp`数据集，这是通过附加几何层中的`data`参数指定的。
- en: 'Note that the average `hp` and `mpg` values are automatically left-joined into
    the existing dataset, which shows different values of `hp` and `mpg` for each
    group of `cyl`. To ensure the two geometry layers are compatible with each other
    when plotted together, we need to ensure all matching coordinates (the `x` and
    `y` arguments) exist in the corresponding raw datasets:'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，平均`hp`和`mpg`值会自动左连接到现有数据集中，这显示了每个`cyl`组中不同的`hp`和`mpg`值。为了确保两个几何层在绘图时相互兼容，我们需要确保所有匹配的坐标（`x`和`y`参数）存在于相应的原始数据集中：
- en: '![Figure 4.16 – Visualizing the average hp and mpg values for each group of
    cyl](img/B18680_04_016.jpg)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![图4.16 – 可视化每个cyl组的平均hp和mpg值](img/B18680_04_016.jpg)'
- en: Figure 4.16 – Visualizing the average hp and mpg values for each group of cyl
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.16 – 可视化每个cyl组的平均hp和mpg值
- en: This plot consists of two geometry layers, where the first layer plots each
    observation as small circles, and the second layer plots the average values as
    big boxes for `hp` and `mpg` for each group of `cyl`. Adding extra layers follows
    the same principle, as long as the data source for each layer contains the column
    names as specified in the base aesthetics layer.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 此图由两个几何层组成，其中第一层将每个观测值绘制为小圆圈，第二层将每个`cyl`组的`hp`和`mpg`的平均值绘制为大正方形。添加额外层遵循相同的原理，只要每个层的源数据包含基础美学层中指定的列名。
- en: 'To further illustrate the need for matching coordinates for multiple layers,
    let us try typing the following command in the console, where we only select the
    `mpg` and `disp` columns in the raw data passed to the second geometry layer.
    As you can see from the output, the `hp` column is expected, without which an
    error is thrown:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 为了进一步说明多个层需要匹配坐标的需求，让我们在控制台中尝试输入以下命令，其中我们只选择传递给第二个几何层的原始数据中的`mpg`和`disp`列。如输出所示，期望有`hp`列，如果没有它将抛出错误：
- en: '[PRE20]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'In the next section, we will look at a new type of plot: a bar chart, along
    with its associated geometry layer.'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将探讨一种新的绘图类型：条形图，以及与其相关的几何层。
- en: Introducing bar charts
  id: totrans-162
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 引入条形图
- en: A bar chart displays certain statistics (such as frequency or proportion) of
    a categorical or continuous variable in the form of bars. Among multiple types
    of bar charts, a histogram is a special type of bar chart that shows the binned
    distribution of a single continuous variable. Therefore, plotting a histogram
    is always in terms of one continuous input variable, achieved using the `geom_histogram()`
    function and only specifying the `x` argument. Under the hood, the function first
    cuts the continuous input variable into discrete bins. It then uses the internally
    calculated `count` variable to indicate the number of observations in each bin
    to be passed to the `y` argument.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 条形图以条形的形式显示分类或连续变量的某些统计信息（如频率或比例）。在多种类型的条形图中，直方图是一种特殊的条形图，它显示了单个连续变量的分箱分布。因此，绘制直方图始终涉及一个连续输入变量，使用
    `geom_histogram()` 函数并仅指定 `x` 参数来实现。在内部，该函数首先将连续输入变量切割成离散的箱。然后，它使用内部计算的 `count`
    变量来指示每个箱中要传递给 `y` 参数的观测数。
- en: Let us look at how to build a histogram in the following exercise.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何在以下练习中构建直方图。
- en: Exercise 4.7 – Building a histogram
  id: totrans-165
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习 4.7 – 构建直方图
- en: 'In this exercise, we will look at different ways to apply positional adjustments
    when displaying a histogram. Proceed as follows:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将探讨在显示直方图时应用位置调整的不同方法。按照以下步骤进行：
- en: 'Build a histogram of the `hp` variable using the `geom_histogram()` layer,
    like so:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `geom_histogram()` 层构建 `hp` 变量的直方图，如下所示：
- en: '[PRE21]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Running this command will generate the output shown in *Figure 4**.17*, along
    with the warning message on the binning. This is because the default binning value
    is not suitable since there are multiple gaps between the bars, making it difficult
    to interpret for a continuous variable. We will need to fine-tune the width of
    each bin using the `binwidth` argument:'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 执行此命令将生成 *图 4.17* 中所示的输出，以及关于分箱的警告信息。这是因为默认的分箱值不适合，因为条形之间存在多个间隙，这使得对连续变量的解释变得困难。我们需要使用
    `binwidth` 参数微调每个箱的宽度：
- en: '![Figure 4.17 – Plotting a histogram for hp](img/B18680_04_017.jpg)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.17 – 为 hp 绘制直方图](img/B18680_04_017.jpg)'
- en: Figure 4.17 – Plotting a histogram for hp
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.17 – 为 hp 绘制直方图
- en: 'Adjust the `binwidth` argument to make the histogram continuous and remove
    the warning message, as follows:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调整 `binwidth` 参数以使直方图连续并移除警告信息，如下所示：
- en: '[PRE22]'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'This produces the following output:'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将产生以下输出：
- en: '![Figure 4.18 – Displaying a continuous histogram](img/B18680_04_018.jpg)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.18 – 显示连续直方图](img/B18680_04_018.jpg)'
- en: Figure 4.18 – Displaying a continuous histogram
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.18 – 显示连续直方图
- en: Making a continuous-looking histogram is data-dependent and requires trial and
    error. In this case, setting `binwidth=40` seems to be working for us.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 制作看起来连续的直方图取决于数据，并且需要尝试和错误。在这种情况下，设置 `binwidth=40` 似乎对我们有效。
- en: Next, we will introduce grouping to the previous histogram by changing the coloring
    of the bars.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将通过更改条形的着色将分组引入之前的直方图。
- en: 'Fill in the bars with different colors using the `fill` argument based on the
    factored `cyl`:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据因子的 `cyl` 使用 `fill` 参数以不同颜色填充条形：
- en: '[PRE23]'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Running this command generates the output shown in *Figure 4**.19*, where each
    bar represents different groups of `cyl`. However, a shrewd reader may immediately
    find that, for some bars with two colors, it is difficult to discern whether they
    are overlapping or stacked on top of one another. Indeed, the default setting
    for the histogram is `position="stack"`, meaning the bars are stacked by default.
    To remove such confusion, we can explicitly show the bars side by side:'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 执行此命令将生成 *图 4.19* 中所示的输出，其中每个条形代表不同的 `cyl` 组。然而，一个机敏的读者可能会立即发现，对于某些有两种颜色的条形，很难判断它们是重叠的还是堆叠在一起的。确实，直方图的默认设置是
    `position="stack"`，这意味着条形默认是堆叠的。为了消除这种混淆，我们可以明确地显示条形并排：
- en: '![Figure 4.19 – Coloring the bars in the histogram](img/B18680_04_019.jpg)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.19 – 为直方图的条形着色](img/B18680_04_019.jpg)'
- en: Figure 4.19 – Coloring the bars in the histogram
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.19 – 为直方图的条形着色
- en: 'Display the bars side by side by setting `position="dodge"`, as follows:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过设置 `position="dodge"` 来并排显示条形，如下所示：
- en: '[PRE24]'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Running this command generates the output shown in *Figure 4**.20*, where the
    bars are now shown side by side. We can further adjust the `binwidth` parameter
    to reduce the gaps in between:'
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 执行此命令将生成 *图 4.20* 中所示的输出，其中条形现在并排显示。我们可以进一步调整 `binwidth` 参数以减少条形之间的间隙：
- en: '![Figure 4.20 – Side-by-side bar chart](img/B18680_04_020.jpg)'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
  zh: '![图4.20 – 并排条形图](img/B18680_04_020.jpg)'
- en: Figure 4.20 – Side-by-side bar chart
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.20 – 并排条形图
- en: Finally, we can also show the statistics as proportions instead of counts.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们还可以将统计数据以比例而不是计数的形式显示。
- en: 'Show the previous histogram of `hp` by `cyl` as proportions by executing the
    following code:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过执行以下代码来显示按`cyl`分类的`hp`的前一个直方图作为比例：
- en: '[PRE25]'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Running this command generates the output shown in *Figure 4**.21*, where the
    `ylab()` function is used to change the label of the *y* axis. Since the proportion
    of each bin needs to sum to `1`, the plot contains bars of equal height, each
    containing one or more groups. For each bin with multiple groups, the height of
    each color represents the proportion of observations falling in this group of
    `cyl` within the specific bin. Such a plot is often used when we only care about
    the relative percentage of each group instead of the absolute count:'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 执行此命令将生成*图4.21*中所示的输出，其中`ylab()`函数用于更改*y*轴的标签。由于每个箱子的比例需要加起来等于`1`，因此图表包含等高的条形，每个条形包含一个或多个组。对于包含多个组的每个箱子，每种颜色的高度代表落在该特定`cyl`组内的观测值的比例。这种图表通常在我们只关心每个组的相对百分比而不是绝对计数时使用：
- en: '![Figure 4.21 – Showing the bar chart as proportions](img/B18680_04_021.jpg)'
  id: totrans-193
  prefs: []
  type: TYPE_IMG
  zh: '![图4.21 – 以比例显示条形图](img/B18680_04_021.jpg)'
- en: Figure 4.21 – Showing the bar chart as proportions
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.21 – 以比例显示条形图
- en: As mentioned earlier, a histogram is a special type of bar chart. A classical
    bar chart contains a categorical variable on the *x* axis, where each position
    represents the count of the number of observations falling into that particular
    category. A bar chart can be generated using the `geom_bar()` function, which
    allows the same positional adjustment as `geom_histogram()`. Let us go through
    the following exercise to learn its usage.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，直方图是一种特殊的条形图。经典的条形图包含*x*轴上的分类变量，其中每个位置代表落在该特定类别中的观测数的计数。可以使用`geom_bar()`函数生成条形图，该函数允许与`geom_histogram()`相同的定位调整。让我们通过以下练习来学习其用法。
- en: Exercise 4.8 – Building a bar chart
  id: totrans-196
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习4.8 – 构建条形图
- en: 'In this exercise, we will visualize the count of observations by `cyl` and
    `gear` as a bar chart. Proceed as follows:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将通过`cyl`和`gear`来可视化观测值的计数作为条形图。按照以下步骤进行：
- en: 'Plot the count of observations for each unique combination of `cyl` and `gear`
    in a stacked bar chart, using `cyl` as the *x* axis:'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`cyl`作为*x*轴，在堆叠条形图中绘制每个独特的`cyl`和`gear`组合的观测值计数。
- en: '[PRE26]'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Running this command will generate the output shown in *Figure 4**.22*, where
    the height of the bar represents the count of observations for the particular
    combination of `cyl` and `gear`:'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 执行此命令将生成*图4.22*中所示的输出，其中条形的高度代表特定`cyl`和`gear`组合的观测数计数：
- en: '![Figure 4.22 – Stacked bar chart by cyl and gear](img/B18680_04_022.jpg)'
  id: totrans-201
  prefs: []
  type: TYPE_IMG
  zh: '![图4.22 – 按cyl和gear堆叠的条形图](img/B18680_04_022.jpg)'
- en: Figure 4.22 – Stacked bar chart by cyl and gear
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.22 – 按cyl和gear堆叠的条形图
- en: We can also represent the bar chart using the proportion/percentage of observations
    in the respective group.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用各自组中观测值的比例/百分比来表示条形图。
- en: 'Convert the bar chart to a percentage-based plot to show the distribution of
    each combination, as follows:'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将条形图转换为基于百分比的图表，以显示每个组合的分布，如下所示：
- en: '[PRE27]'
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Running this command will generate the output shown in *Figure 4**.23*:'
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 执行此命令将生成*图4.23*中所示的输出：
- en: '![Figure 4.23 – Visualizing a bar chart as proportions](img/B18680_04_023.jpg)'
  id: totrans-207
  prefs: []
  type: TYPE_IMG
  zh: '![图4.23 – 将条形图可视化成比例](img/B18680_04_023.jpg)'
- en: Figure 4.23 – Visualizing a bar chart as proportions
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.23 – 将条形图可视化成比例
- en: As before, we can also convert the bar chart from stacked to side by side.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，我们还可以将条形图从堆叠转换为并排。
- en: 'Visualize the previous information in a side-by-side bar chart, as follows:'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下方式将之前的信息可视化成并排条形图：
- en: '[PRE28]'
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Running this command will generate the output shown in *Figure 4**.24*:'
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 执行此命令将生成*图4.24*中所示的输出：
- en: '![Figure 4.24 – A side-by-side bar chart](img/B18680_04_024.jpg)'
  id: totrans-213
  prefs: []
  type: TYPE_IMG
  zh: '![图4.24 – 并排条形图](img/B18680_04_024.jpg)'
- en: Figure 4.24 – A side-by-side bar chart
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.24 – 并排条形图
- en: 'We can also customize the bar chart so that the bars partially overlap with
    each other. This is achieved using the `position_dodge()` function as follows,
    where we adjust the `width` parameter to jitter the overlapping bars to a certain
    extent:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以自定义条形图，使条形部分重叠。这可以通过使用`position_dodge()`函数实现，如下所示，其中我们调整`width`参数以将重叠的条形抖动到一定程度：
- en: '[PRE29]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Running this command generates the output shown in *Figure 4**.25*:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 执行此命令将生成*图4.25*中显示的输出：
- en: '![Figure 4.25 – Adjusting overlapping bars in a bar chart](img/B18680_04_025.jpg)'
  id: totrans-218
  prefs: []
  type: TYPE_IMG
  zh: '![图4.25 – 调整柱状图中重叠的条形](img/B18680_04_025.jpg)'
- en: Figure 4.25 – Adjusting overlapping bars in a bar chart
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.25 – 调整柱状图中重叠的条形
- en: 'Next, we will look at another popular type of plot: a line plot.'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将查看另一种流行的绘图类型：线形图。
- en: Introducing line plots
  id: totrans-221
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍线形图
- en: A **line plot** displays the value of one variable as the other variable changes.
    As with a scatter plot, a line plot can be considered scattered points connected
    via a line. It is mainly used to depict the relationship between two variables.
    For example, when two variables are positively correlated with each other, increasing
    one variable would lead to a seemingly proportionate increase in the other variable.
    Visualizing such a relationship on a line plot could result in a trend line between
    the two variables with a positive slope.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '**线形图**显示一个变量的值随着另一个变量的变化而变化。与散点图一样，线形图可以被认为是通过线连接的散点。它主要用于描述两个变量之间的关系。例如，当两个变量相互正相关时，增加一个变量会导致另一个变量似乎成比例增加。在线形图上可视化这种关系可能会在两个变量之间产生一个正斜率的趋势线。'
- en: One of the most widely used types of line plots is the time series plot, where
    the value of a particular metric (such as stock price) is shown as a function
    of time (such as daily). In the following exercise, we will look at the quarterly
    earnings of Johnson & Johnson between 1960 and 1981, using the `JohnsonJohnson`
    dataset provided by base R. We will explore different ways to visualize the line
    chart, along with a little bit of data processing specific to time series data.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 线形图中最广泛使用的一种类型是时间序列图，其中特定指标（如股价）的值被显示为时间的函数（如每日）。在下面的练习中，我们将使用由base R提供的`JohnsonJohnson`数据集，查看1960年至1981年间Johnson
    & Johnson的季度收益。我们将探索不同的可视化线形图的方法，以及一些针对时间序列数据的数据处理。
- en: Exercise 4.9 – Building a time series plot
  id: totrans-224
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习4.9 – 绘制时间序列图
- en: 'In this exercise, we will look at visualizing the time series data as a line
    plot. Proceed as follows:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将查看将时间序列数据可视化成线形图。按照以下步骤进行：
- en: 'Examine the structure of the `JohnsonJohnson` dataset by executing the following
    code:'
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过执行以下代码来检查`JohnsonJohnson`数据集的结构：
- en: '[PRE30]'
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The output suggests that the dataset is a univariate (meaning a single variable)
    time series ranging from `1960` to `1981`. Printing out its contents (only showing
    the top five rows) also tells us that the frequency is quarterly, using year-quarter
    as a unique index for each data point in the time series:'
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出表明该数据集是一个从`1960`到`1981`的单变量（即单一变量）时间序列。打印其内容（仅显示前五行）也告诉我们，频率是季度性的，使用年-季度作为时间序列中每个数据点的唯一索引：
- en: '[PRE31]'
  id: totrans-229
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Let us convert it to our familiar DataFrame format to ease data manipulation.
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 让我们将它转换为熟悉的DataFrame格式，以便于数据操作。
- en: 'Convert it to a DataFrame called `JohnsonJohnson2` with two columns: `qtr_earning`
    to store the quarterly time series, and `date` to store the approximate date:'
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其转换为名为`JohnsonJohnson2`的DataFrame，包含两列：`qtr_earning`用于存储季度时间序列，`date`用于存储近似日期：
- en: '[PRE32]'
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: The `date` column is obtained by extracting the `time` index from the `JohnsonJohnson`
    time series object, displaying as the year-month format using `as.yearmon()`,
    and then converting to a date format using `as.Date()`.
  id: totrans-233
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`date`列是通过从`JohnsonJohnson`时间序列对象中提取`time`索引得到的，使用`as.yearmon()`显示为年月格式，然后使用`as.Date()`转换为日期格式。'
- en: We will also add two extra indicator columns for plotting purposes later.
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们还将添加两个额外的指示列，用于后续的绘图。
- en: 'Add an `ind` indicator column that takes the value of `TRUE` if the date is
    equal to or beyond `1975-01-01`, and `FALSE` otherwise. Also, extract the quarter
    from the `date` variable and store it in the `qtr` variable:'
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个`ind`指示列，如果日期等于或晚于`1975-01-01`，则其值为`TRUE`，否则为`FALSE`。同时，从`date`变量中提取季度并存储在`qtr`变量中：
- en: '[PRE33]'
  id: totrans-236
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: In this command, we used the `quarters()` function to extract the quarter from
    a date-formatted field. Next, we will plot the quarterly earnings as a time series.
  id: totrans-237
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在此命令中，我们使用了`quarters()`函数从一个日期格式化的字段中提取季度。接下来，我们将绘制季度收益作为时间序列。
- en: 'Plot `qtr_earning` as a function of `date` using a line plot, as follows:'
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用线形图将`qtr_earning`作为`date`的函数进行绘图，如下所示：
- en: '[PRE34]'
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Running this command generates the output shown in *Figure 4**.26*, where we
    specify the `date` column as the *x* axis and `qtr_earning` as the *y* axis, followed
    by the `geom_line()` layer:'
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 执行此命令将生成如图 *图 4**.26* 所示的输出，其中我们将 `date` 列指定为 *x* 轴，将 `qtr_earning` 指定为 *y*
    轴，然后是 `geom_line()` 层：
- en: '![Figure 4.26 – Time series plot of quarterly earnings](img/B18680_04_026.jpg)'
  id: totrans-241
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.26 – 季度收益的时间序列图](img/B18680_04_026.jpg)'
- en: Figure 4.26 – Time series plot of quarterly earnings
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.26 – 季度收益的时间序列图
- en: The line chart for the quarterly earnings displays a long-term increasing trend
    and short-term fluctuations. The subject of time series forecasting focuses on
    using these structural components (such as trend and seasonality) to predict future
    values.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 季度收益的线图显示长期上升趋势和短期波动。时间序列预测的主题集中在使用这些结构组件（如趋势和季节性）来预测未来值。
- en: In addition, we can color code the time series so that different line segments
    display a different color according to another grouping variable.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还可以对时间序列进行着色编码，以便不同的线段根据另一个分组变量显示不同的颜色。
- en: 'Specify the color of the line plot according to the `ind` column, as follows:'
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据列 `ind` 指定线图的颜色，如下所示：
- en: '[PRE35]'
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Running this command generates the output shown in *Figure 4**.27*, where we
    set `color=ind` in the base aesthetics layer to change the coloring. Note that
    the two line segments are disconnected since they are essentially separate time
    series plotted on the chart:'
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 执行此命令将生成如图 *图 4**.27* 所示的输出，其中我们在基础美学层中设置 `color=ind` 以更改颜色。请注意，由于这两个线段实际上是图表上分别绘制的独立时间序列，因此它们是断开的：
- en: '![Figure 4.27 – Two line charts of different colors](img/B18680_04_027.jpg)'
  id: totrans-248
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.27 – 两种不同颜色的线图](img/B18680_04_027.jpg)'
- en: Figure 4.27 – Two line charts of different colors
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.27 – 两种不同颜色的线图
- en: We can also plot multiple lines when there are multiple categories in the grouping
    variable, each of which will assume a different color.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 当分组变量中有多个类别时，我们也可以绘制多条线，每条线将假设不同的颜色。
- en: 'Plot the time series for each quarter respectively, like so:'
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 分别绘制每个季度的时序图，如下所示：
- en: '[PRE36]'
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Running the preceding command will generate the output shown in *Figure 4**.28*,
    where `1980`:'
  id: totrans-253
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 执行前面的命令将生成如图 *图 4**.28* 所示的输出，其中 `1980`：
- en: '![Figure 4.28 – Yearly times series plot for each quarter](img/B18680_04_028.jpg)'
  id: totrans-254
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.28 – 每个季度的年度时序图](img/B18680_04_028.jpg)'
- en: Figure 4.28 – Yearly times series plot for each quarter
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.28 – 每个季度的年度时序图
- en: In the next section, we will look at the theme layer, which controls the stylistic
    elements of a plot.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将查看主题层，它控制图形的样式元素。
- en: Controlling themes in graphics
  id: totrans-257
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 控制图形中的主题
- en: The theme layer specifies all non-data-related properties on the plot, such
    as the background, legend, axis labels, and so on. Proper control of the themes
    in the plot could aid visual communication by highlighting critical information
    and directing users’ attention to the intended message we would like to convey.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 主题层指定了图上所有非数据相关的属性，如背景、图例、轴标签等。适当控制图中的主题可以通过突出关键信息并引导用户注意我们想要传达的信息来帮助视觉沟通。
- en: 'There are three types of visual elements controlled by the theme layer, as
    follows:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 主题层控制了以下三种类型的视觉元素，如下所示：
- en: '**Text**, used to specify the textual display (for example, color) of the axis
    label'
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文本**，用于指定轴标签的文本显示（例如，颜色）'
- en: '**Line**, used to specify the visual properties of the axes such as color and
    line type'
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**行**，用于指定轴的视觉属性，如颜色和线型'
- en: '**Rectangle**, used to control the borders and backgrounds of the plot'
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**矩形**，用于控制图形的边框和背景'
- en: All three types are specified using functions that start with `element_`, including
    examples such as `element_text()` and `element_line()`. We will go over these
    functions in the following section.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 所有三种类型都使用以 `element_` 开头的函数指定，包括例如 `element_text()` 和 `element_line()` 的示例。我们将在下一节中介绍这些函数。
- en: Adjusting themes
  id: totrans-264
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调整主题
- en: The theme layer can be easily applied as an additional layer on the existing
    graph. Let us go through an exercise on how this can be achieved.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 主题层可以轻松地作为现有图的一个附加层应用。让我们通过一个练习来看看如何实现这一点。
- en: Exercise 4.10 – Applying themes
  id: totrans-266
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习 4.10 – 应用主题
- en: 'In this exercise, we will look at how to tweak the theme-related elements of
    the previous time series plot, including moving the legend and changing the properties
    of the axes. Proceed as follows:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将查看如何调整之前时间序列图的与主题相关的元素，包括移动图例和更改轴的属性。按照以下步骤进行：
- en: 'Display the legend of the previous time series plot at the bottom by overlaying
    a theme layer with its `legend.position` argument specified as `"bottom"`. Also,
    enlarge the font size of the text along the axes and legend:'
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过叠加一个主题层，并将其`legend.position`参数指定为`"bottom"`，在底部显示前一个时间序列图的图例。同时，增大轴和图例中文字的字体大小：
- en: '[PRE37]'
  id: totrans-269
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Running this command generates the output shown in *Figure 4**.29*, where the
    legend is now moved to the bottom of the plot:'
  id: totrans-270
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 执行此命令将生成如图*图4.29*所示的输出，其中图例现在被移动到图的底部：
- en: '![Figure 4.29 – Displaying the legend at the bottom](img/B18680_04_029.jpg)'
  id: totrans-271
  prefs: []
  type: TYPE_IMG
  zh: '![图4.29 – 在底部显示图例](img/B18680_04_029.jpg)'
- en: Figure 4.29 – Displaying the legend at the bottom
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.29 – 在底部显示图例
- en: We can also position the legend anywhere within the plot by providing the coordinate
    information to the `legend.position` argument. The coordinates start at the lower-left
    corner with a value of `(0,0)` and span all the way to the upper-right corner,
    taking the value of `(1,1)`. Since the upper-left part of the plot seems vacant,
    we may consider moving the legend there to save some extra space.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以通过向`legend.position`参数提供坐标信息来将图例放置在图的任何位置。坐标从左下角开始，值为`(0,0)`，一直延伸到右上角，值为`(1,1)`。由于图的左上部分看起来比较空旷，我们可能考虑将图例移动到那里以节省一些额外空间。
- en: 'Move the legend to the upper-left corner by supplying a pair of proper coordinates:'
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过提供一对适当的坐标来将图例移动到左上角：
- en: '[PRE38]'
  id: totrans-275
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Here, we specified the legend’s position to be `(0.1, 0.8)`. In general, configuring
    a proper position using the coordinate system requires trial and error. We have
    also saved the result in a variable called `tmp`, which will be used later. The
    generated plot is shown in *Figure 4**.30*:'
  id: totrans-276
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，我们将图例的位置指定为`(0.1, 0.8)`。通常，使用坐标系配置适当的位置需要尝试和错误。我们还将结果保存在名为`tmp`的变量中，稍后将使用它。生成的图如图*图4.30*所示：
- en: '![Figure 4.30 – Coordinate-based positional adjustment for the legend](img/B18680_04_030.jpg)'
  id: totrans-277
  prefs: []
  type: TYPE_IMG
  zh: '![图4.30 – 基于坐标的位置调整图例](img/B18680_04_030.jpg)'
- en: Figure 4.30 – Coordinate-based positional adjustment for the legend
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.30 – 基于坐标的位置调整图例
- en: Next, we will adjust the properties of the axes.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将调整轴的属性。
- en: 'Based on the previous plot, change the color of the axes’ titles to blue using
    the `element_text()` function on the `axis.title` property. Also, make the axes’
    lines solid black using the `element_line()` function on the `axis.line` property:'
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 基于前一个图，使用`element_text()`函数在`axis.title`属性上更改轴标题的颜色为蓝色。同时，使用`element_line()`函数在`axis.line`属性上使轴的线条为实线黑色：
- en: '[PRE39]'
  id: totrans-281
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Running this command generates the output shown in *Figure 4**.31*, where we
    used the `element_text()` and `element_line()` functions to adjust the visual
    properties (`color` and `linetype`) of the title (`axis.title`) and the lines
    (`axis.line`) for the axes:'
  id: totrans-282
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 执行此命令将生成如图*图4.31*所示的输出，其中我们使用了`element_text()`和`element_line()`函数来调整标题(`axis.title`)和轴的线条(`axis.line`)的视觉属性（`color`和`linetype`）：
- en: '![Figure 4.31 – Changing the titles and lines of the axes](img/B18680_04_031.jpg)'
  id: totrans-283
  prefs: []
  type: TYPE_IMG
  zh: '![图4.31 – 更改轴的标题和线条](img/B18680_04_031.jpg)'
- en: Figure 4.31 – Changing the titles and lines of the axes
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.31 – 更改轴的标题和线条
- en: Finally, we can change the default background and grids as well.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们还可以更改默认的背景和网格。
- en: 'Remove the default grids and background in the previous plot by executing the
    following code:'
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过执行以下代码来移除前一个图中默认的网格和背景：
- en: '[PRE40]'
  id: totrans-287
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Here, we used `panel.grid.major` and `panel.grid.minor` to access the grid
    properties and `panel.background` to access the background property of the plot.
    The `element_blank()` removes all existing configurations and is specified for
    all these three properties. The result is shown in *Figure 4**.32*:'
  id: totrans-288
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，我们使用`panel.grid.major`和`panel.grid.minor`来访问网格属性，使用`panel.background`来访问图的背景属性。`element_blank()`移除所有现有配置，并指定为这三个属性。结果如图*图4.32*所示：
- en: '![Figure 4.32 – Removing the grids and background setting](img/B18680_04_032.jpg)'
  id: totrans-289
  prefs: []
  type: TYPE_IMG
  zh: '![图4.32 – 移除网格和背景设置](img/B18680_04_032.jpg)'
- en: Figure 4.32 – Removing the grids and background setting
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.32 – 移除网格和背景设置
- en: Note that we can also save the theme layer in a variable and apply it as an
    overlay to other plots. We treat the whole plot or a specific layer configuration
    as a variable, making it convenient to scale to multiple plots.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们还可以将主题层保存到变量中，并将其作为叠加应用到其他图中。我们将整个图或特定的图层配置作为一个变量，这使得将其扩展到多个图变得方便。
- en: 'Besides creating our own themes, we can also utilize the built-in theme layers
    provided by `ggplot2`. As listed here, these built-in themes provide off-the-shelf
    solutions to facilitate plotting:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 除了创建我们自己的主题之外，我们还可以利用 `ggplot2` 提供的内置主题层。如列表所示，这些内置主题提供了现成的解决方案，以简化绘图：
- en: '`theme_gray()`, the default theme we used earlier'
  id: totrans-293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`theme_gray()`，我们之前使用的默认主题'
- en: '`theme_classic()`, the traditional theme mostly used in scientific plotting'
  id: totrans-294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`theme_classic()`，在科学绘图中最常用的传统主题'
- en: '`theme_void()`, which removes all non-data-related properties'
  id: totrans-295
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`theme_void()`，它移除了所有非数据相关的属性'
- en: '`theme_bw()`, mostly used when the transparency level is configured'
  id: totrans-296
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`theme_bw()`，主要用于配置透明度级别时'
- en: 'For example, we can use the `theme_classic()` function to generate a similar
    plot as before, as shown in the following code snippet:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们可以使用 `theme_classic()` 函数生成与之前相似的图表，如下面的代码片段所示：
- en: '[PRE41]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Running this command generates the output shown in *Figure 4**.33*:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 执行此命令会生成如图 *图 4**.33* 所示的输出：
- en: '![Figure 4.33 – Using out-of-the-box theme setting](img/B18680_04_033.jpg)'
  id: totrans-300
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.33 – 使用现成的主题设置](img/B18680_04_033.jpg)'
- en: Figure 4.33 – Using out-of-the-box theme setting
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.33 – 使用现成的主题设置
- en: Other than the built-in themes, the `ggthemes` package provides additional themes
    that further extend our choices of available themes. Let us explore this package
    in the next section.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 除了内置的主题之外，`ggthemes` 包还提供了额外的主题，进一步扩展了我们的主题选择。让我们在下一节中探索这个包。
- en: Exploring ggthemes
  id: totrans-303
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 探索 ggthemes
- en: The `ggthemes` package contains multiple pre-built themes. Just as using `dplyr`
    could significantly accelerate our data processing task, using the pre-built themes
    could also ease our graphing efforts compared with ground-up development. Let
    us look at a few available themes in this package.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: '`ggthemes` 包包含多个预构建的主题。就像使用 `dplyr` 可以显著加速我们的数据处理任务一样，使用预构建的主题也可以与从头开始开发相比，简化我们的绘图工作。让我们看看这个包中可用的几个主题。'
- en: Exercise 4.11 – Exploring themes
  id: totrans-305
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习 4.11 – 探索主题
- en: 'In this exercise, we will explore a few additional out-of-the-box themes provided
    by `ggthemes`. Remember to download and load this package before continuing with
    the following code examples. We will cover two theme functions. Proceed as follows:'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将探索 `ggthemes` 提供的一些额外的现成主题。记住在继续下面的代码示例之前，下载并加载这个包。我们将涵盖两个主题函数。按照以下步骤进行：
- en: 'Apply the `theme_fivethirtyeight` theme on the previous plot, as follows:'
  id: totrans-307
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在上一个图表上应用 `theme_fivethirtyeight` 主题，如下所示：
- en: '[PRE42]'
  id: totrans-308
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Running this command generates the output shown in *Figure 4**.34*, where the
    legend is placed at the bottom:'
  id: totrans-309
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 执行此命令会生成如图 *图 4**.34* 所示的输出，其中图例位于底部：
- en: '![Figure 4.34 – Applying the theme_fivethirtyeight theme](img/B18680_04_034.jpg)'
  id: totrans-310
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.34 – 应用 theme_fivethirtyeight 主题](img/B18680_04_034.jpg)'
- en: Figure 4.34 – Applying the theme_fivethirtyeight theme
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.34 – 应用 theme_fivethirtyeight 主题
- en: 'Apply the `theme_tufte()` theme, like so:'
  id: totrans-312
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用 `theme_tufte()` 主题，如下所示：
- en: '[PRE43]'
  id: totrans-313
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Running this command generates the output shown in *Figure 4**.35*, the type
    of plot commonly used in scientific papers. Note that the plots in academic papers
    recommend only showing essential information. This means that additional configurations
    such as background are discouraged. Real-life plots, on the other hand, prefer
    a decent balance between usefulness and beauty:'
  id: totrans-314
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 执行此命令会生成如图 *图 4**.35* 所示的输出，这是科学论文中常用的绘图类型。请注意，学术论文中的图表建议只显示必要的信息。这意味着背景等额外配置是不被鼓励的。另一方面，现实生活中的图表则更倾向于在实用性和美观性之间保持一个合理的平衡：
- en: '![Figure 4.35 – Applying the theme_tufte theme](img/B18680_04_035.jpg)'
  id: totrans-315
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.35 – 应用 theme_tufte 主题](img/B18680_04_035.jpg)'
- en: Figure 4.35 – Applying the theme_tufte theme
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.35 – 应用 theme_tufte 主题
- en: Throughout this section, we looked at controlling theme-related elements in
    a graph, which gives us great flexibility when it comes to fine-tuning and customizing
    a graph.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们探讨了控制图表中与主题相关的元素，这在我们进行微调和自定义图表时提供了很大的灵活性。
- en: Summary
  id: totrans-318
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概述
- en: 'In this chapter, we introduced essential graphics techniques based on the `ggplot2`
    package. We started by going over the basic scatter plot and learned the grammar
    of developing layers in a plot. To build, edit, and improve a plot, we need to
    specify three essential layers: data, aesthetics, and geometries. For example,
    the `geom_point()` function used to build a scatter plot allows us to control
    the size, shape, and color of the points on a graph. We can also display them
    as text in addition to presenting points using the `geom_text()` function.'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了基于`ggplot2`包的基本图形技术。我们首先回顾了基本的散点图，并学习了在图表中开发层面的语法。为了构建、编辑和改进一个图表，我们需要指定三个基本层面：数据、美学和几何。例如，用于构建散点图的`geom_point()`函数允许我们控制图表上点的尺寸、形状和颜色。我们还可以使用`geom_text()`函数将它们显示为文本，除了使用点来表示之外。
- en: We also covered the layer-specific control provided by the geometry layer and
    showed examples using bar charts and line plots. A bar chart can help represent
    the frequency distribution of categorical variables and the histogram of continuous
    variables. A line chart supports time series data and can help identify trends
    and patterns if appropriately plotted.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还介绍了由几何层提供的层特定控制，并展示了使用条形图和折线图的示例。条形图可以帮助表示分类变量的频率分布和连续变量的直方图。折线图支持时间序列数据，并且如果绘制得当，可以帮助识别趋势和模式。
- en: Finally, we also covered the theme layer, which allows us to control all non-data-related
    visual aspects of a graph. Coupled with the built-in themes by base R and off-the-shelf
    themes by `ggthemes`, we have many options to choose from and accelerate the graphing
    effort.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们还介绍了主题层，它允许我们控制图表中所有与数据无关的视觉方面。结合基础R的内置主题和`ggthemes`的现成主题，我们有多种选择，可以加速绘图工作。
- en: In the next chapter, we will cover **exploratory data analysis** (**EDA**),
    a common and essential step in many data analytics and modeling tasks.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍**探索性数据分析**（**EDA**），这是许多数据分析建模任务中常见且必要的一步。
