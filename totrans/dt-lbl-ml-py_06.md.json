["```py\nfrom PIL import Image\nimport numpy as np\ndef rotate_image(image_path, degrees):\n    img = Image.open(image_path)\n    rotated_image = img.rotate(degrees)\n    return rotated_image\nimage_path = \"path/to/image.jpg\"\nrotated_image = rotate_image(image_path, 45)\nrotated_image.show()\n```", "```py\nfrom PIL import Image\nimport numpy as np\ndef translate_image(image_path, x_offset, y_offset):\n    img = Image.open(image_path)\n    translated_image = img.transform(img.size, \\\n        Image.AFFINE, (1, 0, x_offset, 0, 1, y_offset))\n    return translated_image\nimage_path = \"path/to/image.jpg\"\ntranslated_image = translate_image(image_path, 50, 50)\ntranslated_image.show()\n```", "```py\nfrom PIL import Image\nimport numpy as np\ndef scale_image(image_path, scale_factor):\n    img = Image.open(image_path)\n    scaled_image = img.resize((int(img.size[0]*scale_factor),\\\n        int(img.size[1]*scale_factor)))\n    return scaled_image\nimage_path = \"path/to/image.jpg\"\nscaled_image = scale_image(image_path, 0.5)\nscaled_image.show()\n```", "```py\npip install keras\n```", "```py\nfrom keras.datasets import cifar10\n(x_train, y_train), (x_test, y_test) = cifar10.load_data()\n```", "```py\n# Reshape the input images\nx_train = x_train.reshape(x_train.shape[0], -1)\nx_test = x_test.reshape(x_test.shape[0], -1)\n```", "```py\n# Convert pixel values to between 0 and 1\nx_train = x_train / 255\nx_test = x_test / 255\n```", "```py\n# Convert class labels to one-hot encoded vectors\nnum_classes = 10\ny_train = keras.utils.to_categorical(y_train, num_classes)\ny_test = keras.utils.to_categorical(y_test, num_classes)\n```", "```py\nfrom sklearn import svm\n# Create an instance of the SVC class with default hyperparameters\nclf = svm.SVC()\n```", "```py\n# Fit the training data to the classifier\nclf.fit(x_train, y_train)\n```", "```py\nfrom sklearn.metrics import accuracy_score\n# Predict the class labels of the test data\ny_pred = clf.predict(x_test)\n# Calculate the accuracy of the classifier\naccuracy = accuracy_score(y_test, y_pred)\nprint(\"Accuracy: %.2f%%\" % (accuracy * 100.0))\n```", "```py\nfrom keras.preprocessing.image import ImageDataGenerator\n# Create an instance of the ImageDataGenerator class\ndatagen = ImageDataGenerator(rotation_range=20, \\\n    width_shift_range=0.1, height_shift_range=0.1, \\\n    shear_range=0.2, zoom_range=0.2, horizontal_flip=True)\n# Generate new batches of training data\ngen_train = datagen.flow(x_train, y_train, batch_size=64)\n```", "```py\n# Train the classifier on each batch of training data\nfor i in range(100):\n    x_batch, y_batch = gen_train.next()\n    clf.partial_fit(x_batch, y_batch, classes=np.unique(y_train))\n```", "```py\n# Predict the class labels of the test data\ny_pred_aug = clf.predict(x_test)\n# Calculate the accuracy of the classifier\naccuracy_aug = accuracy_score(y_test, y_pred_aug)\nprint(\"Accuracy with Data Augmentation: %.2f%%\" % (accuracy_aug * 100.0))\n```", "```py\nimport tensorflow as tf\nfrom sklearn.svm import SVC\nfrom sklearn.model_selection import GridSearchCV\nfrom keras.datasets import mnist\nfrom keras.preprocessing.image import ImageDataGenerator\n# load MNIST dataset\n(x_train, y_train), (x_test, y_test) = mnist.load_data()\n# normalize pixel values between 0 and 1\nx_train = x_train / 255.0\nx_test = x_test / 255.0\n# convert labels to one-hot encoded vectors\ny_train = tf.keras.utils.to_categorical(y_train)\ny_test = tf.keras.utils.to_categorical(y_test)\n# create image data generator for data augmentation\ndatagen = ImageDataGenerator(rotation_range=20, \\\n    width_shift_range=0.1, height_shift_range=0.1, zoom_range=0.2)\n# fit image data generator on training dataset\ndatagen.fit(x_train.reshape(-1, 28, 28, 1))\n# create SVM model\nsvm_model = SVC()\n# define hyperparameters for grid search\nparam_grid = {'C': [0.1, 1, 10], 'kernel': ['linear', \\\n    'poly', 'rbf'], 'degree': [2, 3, 4]}\n# perform grid search for optimal hyperparameters\nsvm_grid_search = GridSearchCV(svm_model, param_grid, cv=3)\nsvm_grid_search.fit(datagen.flow(\n    x_train.reshape(-1, 28, 28, 1),y_train, batch_size=32), \\\n    steps_per_epoch=len(x_train) / 32)\n# evaluate SVM model on test dataset\naccuracy = svm_grid_search.score(x_test.reshape(-1, 28*28), y_test)\nprint(\"Accuracy with data augmentation: {:.2f}%\".format(accuracy*100))\n```", "```py\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout\nfrom keras.preprocessing.image import ImageDataGenerator\nimport numpy as np\n```", "```py\ndatagen = ImageDataGenerator(\n    rotation_range=20,\n    width_shift_range=0.2,\n    height_shift_range=0.2,\n    horizontal_flip=True,\n    validation_split=0.2\n)\n```", "```py\ntrain_generator = datagen.flow_from_directory(\n    '/path/to/dataset',\n    target_size=(224, 224),\n    batch_size=32,\n    class_mode='categorical',\n    subset='training'\n)\nval_generator = datagen.flow_from_directory(\n    '/path/to/dataset',\n    target_size=(224, 224),\n    batch_size=32,\n    class_mode='categorical',\n    subset='validation'\n)\n```", "```py\nmodel = Sequential()\nmodel.add(Conv2D(32, (3, 3), activation='relu', input_shape=(224, 224, 3)))\nmodel.add(MaxPooling2D((2, 2)))\nmodel.add(Conv2D(64, (3, 3), activation='relu'))\nmodel.add(MaxPooling2D((2, 2)))\nmodel.add(Conv2D(128, (3, 3), activation='relu'))\nmodel.add(MaxPooling2D((2, 2)))\nmodel.add(Conv2D(256, (3, 3), activation='relu'))\nmodel.add(MaxPooling2D((2, 2)))\nmodel.add(Flatten())\nmodel.add(Dense(512, activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(2, activation='softmax'))\nmodel.compile(loss='categorical_crossentropy', \\\n    optimizer='adam', metrics=['accuracy'])\n```", "```py\nmodel.fit(\n    train_generator,\n    steps_per_epoch=train_generator.samples // 32,\n    validation_data=val_generator,\n    validation_steps=val_generator.samples // 32,\n    epochs=10\n)\n```", "```py\nimport tensorflow as tf\nfrom tensorflow.keras.datasets import cifar10\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\n# Load the CIFAR-10 dataset\n(x_train, y_train), (x_test, y_test) = cifar10.load_data()\n# Normalize the input data\nx_train = x_train.astype('float32') / 255.0\nx_test = x_test.astype('float32') / 255.0\n# Convert the labels to one-hot encoding\ny_train = tf.keras.utils.to_categorical(y_train)\ny_test = tf.keras.utils.to_categorical(y_test)\n# Define the CNN architecture\n```", "```py\nmodel = Sequential()\n```", "```py\nmodel.add(Conv2D(32, (3, 3), activation='relu', \\\n    padding='same', input_shape=x_train.shape[1:]))\n```", "```py\nmodel.add(Conv2D(32, (3, 3), activation='relu'))\n```", "```py\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\n```", "```py\nmodel.add(Dropout(0.25))\n```", "```py\nmodel.add(Conv2D(64, (3, 3), activation='relu', padding='same'))\nmodel.add(Conv2D(64, (3, 3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\n```", "```py\nmodel.add(Flatten())\n```", "```py\nmodel.add(Dense(512, activation='relu'))\n```", "```py\nmodel.add(Dropout(0.5))\n```", "```py\nmodel.add(Dense(10, activation='softmax'))\n```", "```py\n# Define the data augmentation parameters\ndatagen = ImageDataGenerator(\n    rotation_range=15,\n    width_shift_range=0.1,\n    height_shift_range=0.1,\n    horizontal_flip=True\n)\n# Compile the model\nmodel.compile(optimizer='adam', loss='categorical_crossentropy',\\\n    metrics=['accuracy'])\n# Train the model with data augmentation\nhistory = model.fit(datagen.flow(x_train, y_train, \\\n    batch_size=64), epochs=100, \\\n    validation_data=(x_test, y_test))\n# Evaluate the model on the test set\nscore = model.evaluate(x_test, y_test, verbose=0)\nprint('Test loss:', score[0])\nprint('Test accuracy:', score[1])\n```"]