["```py\n# a recursive function to calculate the fibonacci number\n# this is a standard solution that is used in almost all\n# of computer science examples\ndef fibRec(n):\n  if n < 2:\n      return n\n  else:\n      return fibRec(n-1) + fibRec(n-2)\n# a short loop that uses the above function\nfor i in range(23):\n  print(fibRec(i))\n```", "```py\n#predicting fibonacci with linear regression\nimport pandas as pd\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\n# training data for the algorithm\n# the first two columns are the numbers and the third column is the result\ndfTrain = pd.DataFrame([[1, 1, 2],\n                        [2, 1, 3],\n                        [3, 2, 5],\n                        [5, 3, 8],\n                        [8, 5, 13]\n])\n# now, let's make some predictions\n# we start the sequence as a list with the first two numbers\nlstSequence = [0,1]\n# we add the names of the columns to make it look better\ndfTrain.columns = ['first number','second number','result']\n```", "```py\n# algorithm to train\n# here, we use linear regression\nmodel = LinearRegression()\n# now, the actual process of training the model\nmodel.fit(dfTrain[['first number', 'second number']],\n                               dfTrain['result'])\n# printing the score of the model, i.e. how good the model is when trained\nprint(model.score(dfTrain[['first number', 'second number']], dfTrain['result']))\n```", "```py\n# and loop through the newly predicted numbers\nfor k in range(23):\n  # the line below is where the magic happens\n  # it takes two numbers from the list\n  # formats them to an array\n  # and makes the prediction\n  # since the model returns a float,\n  # we need to convert it to it\n  intFibonacci = int(model.predict(np.array([[lstSequence[k],lstSequence[k+1]]])))\n  # add this new number to the list for the next iteration\n  lstSequence.append(intFibonacci)\n  # and print it\n  print(intFibonacci)\n```"]