["```py\n<menu \n\n    tools:context=\"com.packtpub.masteringopencvandroid.chapter3.MainActivity\">\n    <item android:id=\"@+id/action_load_first_image\"\n        android:title=\"@string/action_load_first_image\"\n        android:orderInCategory=\"1\"\n        android:showAsAction=\"never\" />\n    <item android:id=\"@+id/action_load_second_image\"\n        android:title=\"@string/action_load_second_image\"\n        android:orderInCategory=\"2\"\n        android:showAsAction=\"never\" />\n</menu>\n```", "```py\nnew AsyncTask<Void, Void, Bitmap>() {\n    private long startTime, endTime;\n    @Override\n    protected void onPreExecute() {\n        super.onPreExecute();\n        startTime = System.currentTimeMillis();\n    }\n\n    @Override\n    protected Bitmap doInBackground(Void... params) {\n        return executeTask();\n    }\n\n    @Override\n    protected void onPostExecute(Bitmap bitmap) {\n        super.onPostExecute(bitmap);\n        endTime = System.currentTimeMillis();\n        ivImage1.setImageBitmap(bitmap);\n        tvKeyPointsObject1.setText(\"Object 1 : \"+keypointsObject1);\n        tvKeyPointsObject2.setText(\"Object 2 : \"+keypointsObject2);\n        tvKeyPointsMatches.setText(\"Keypoint Matches : \"+keypointMatches);\n        tvTime.setText(\"Time taken : \"+(endTime-startTime)+\" ms\");\n    }\n}.execute();\n```", "```py\nFeatureDetector detector;\nMatOfKeyPoint keypoints1, keypoints2;\nDescriptorExtractor descriptorExtractor;\nMat descriptors1, descriptors2;\n```", "```py\nswitch (ACTION_MODE){\n        case HomeActivity.MODE_SIFT:\n                detector = FeatureDetector.create(FeatureDetector.SIFT);\n                descriptorExtractor = DescriptorExtractor.create(DescriptorExtractor.SIFT);\n                //Add SIFT specific code\n                break;\n        //Add cases for other algorithms\n}\n```", "```py\ndetector.detect(src2, keypoints2);\ndetector.detect(src1, keypoints1);\nkeypointsObject1 = keypoints1.toArray().length; //These have been added to display the number of keypoints later.\nkeypointsObject2 = keypoints2.toArray().length;\n```", "```py\ndescriptorExtractor.compute(src1, keypoints1, descriptors1);\ndescriptorExtractor.compute(src2, keypoints2, descriptors2);\n```", "```py\nDescriptorMatcher descriptorMatcher;\nMatOfDMatch matches = new MatOfDMatch();\n```", "```py\ndescriptorMatcher = DescriptorMatcher.create(DescriptorMatcher.BRUTEFORCE_SL2);\n```", "```py\ndescriptorMatcher = DescriptorMatcher.create(DescriptorMatcher.FLANNBASED);\n```", "```py\ndescriptorMatcher.match(descriptors1, descriptors2, matches);1\n```", "```py\nstatic Mat drawMatches(Mat img1, MatOfKeyPoint key1, Mat img2, MatOfKeyPoint key2, MatOfDMatch matches, boolean imageOnly){\n        Mat out = new Mat();\n        Mat im1 = new Mat();\n        Mat im2 = new Mat();\n        Imgproc.cvtColor(img1, im1, Imgproc.COLOR_BGR2RGB);\n        Imgproc.cvtColor(img2, im2, Imgproc.COLOR_BGR2RGB);\n        if (imageOnly){\n            MatOfDMatch emptyMatch = new MatOfDMatch();\n            MatOfKeyPoint emptyKey1 = new MatOfKeyPoint();\n            MatOfKeyPoint emptyKey2 = new MatOfKeyPoint();\n            Features2d.drawMatches(im1, emptyKey1, im2, emptyKey2, emptyMatch, out);\n        } else {\n            Features2d.drawMatches(im1, key1, im2, key2, matches, out);\n        }\n        Bitmap bmp = Bitmap.createBitmap(out.cols(), out.rows(), Bitmap.Config.ARGB_8888);\n        Imgproc.cvtColor(out, out, Imgproc.COLOR_BGR2RGB);\n        Core.putText(out, \"FRAME\", new Point(img1.width() / 2,30), Core.FONT_HERSHEY_PLAIN, 2, new Scalar(0,255,255),3);\n        Core.putText(out, \"MATCHED\", new Point(img1.width() + img2.width() / 2,30), Core.FONT_HERSHEY_PLAIN, 2, new Scalar(255,0,0),3);\n        return out;\n    }\n```", "```py\nLOCAL_PATH := $(call my-dir)\n\ninclude $(CLEAR_VARS)\n\nOPENCV_CAMERA_MODULES:=on\nOPENCV_INSTALL_MODULES:=on\n\ninclude <OpenCV4Android_SDK_location>/sdk/native/jni/OpenCV.mk\n\nLOCAL_MODULE    := nonfree\nLOCAL_SRC_FILES := nonfree_init.cpp \\\nsift.cpp \\\nsurf.cpp\nLOCAL_LDLIBS +=  -llog -ldl\ninclude $(BUILD_SHARED_LIBRARY)\n```", "```py\nAPP_STL := gnustl_static\nAPP_CPPFLAGS := -frtti -fexceptions\nAPP_ABI := armeabi-v7a\nAPP_PLATFORM := android-8\n```", "```py\nsourceSets.main {\n    jniLibs.srcDir 'src/main/libs'\n    jni.srcDirs = [] //disable automatic ndk-build call\n}\n```", "```py\ncd <project_directory>/app/src/main/jni\n\n```", "```py\n<ndk_dir>/ndk-build\n\n```", "```py\nSystem.loadLibrary(\"nonfree\");\n```", "```py\ncase HomeActivity.MODE_SURF:\n    detector = FeatureDetector.create(FeatureDetector.SURF);\n    descriptorExtractor = DescriptorExtractor.create(DescriptorExtractor.SURF);\n    descriptorMatcher = DescriptorMatcher.create(DescriptorMatcher.BRUTEFORCE_SL2);\n    break;\n```", "```py\ncase HomeActivity.MODE_ORB:\n    detector = FeatureDetector.create(FeatureDetector.ORB);\n    descriptorExtractor = DescriptorExtractor.create(DescriptorExtractor.ORB);\n    descriptorMatcher = DescriptorMatcher.create(DescriptorMatcher.BRUTEFORCE_HAMMING);\n    break;\n```", "```py\ncase HomeActivity.MODE_BRISK:\n    detector = FeatureDetector.create(FeatureDetector.BRISK);\n    descriptorExtractor = DescriptorExtractor.create(DescriptorExtractor.BRISK);\n    descriptorMatcher = DescriptorMatcher.create(DescriptorMatcher.BRUTEFORCE_HAMMING);\n    break;\n```", "```py\ncase HomeActivity.MODE_FREAK:\n    detector = FeatureDetector.create(FeatureDetector.FAST);\n    descriptorExtractor = DescriptorExtractor.create(DescriptorExtractor.FREAK);\n    descriptorMatcher = DescriptorMatcher.create(DescriptorMatcher.BRUTEFORCE_HAMMING);\n    break;\n```"]