["```py\nshared_preload_libraries = 'pgml,pg_stat_statements'\nsudo service postgresql restart\n```", "```py\nCREATE EXTENSION pgml;\n```", "```py\nSELECT pgml.version();\n```", "```py\npgml.train(\n    project_name TEXT,\n    task TEXT DEFAULT NULL,\n    relation_name TEXT DEFAULT NULL,\n    y_column_name TEXT DEFAULT NULL,\n    algorithm TEXT DEFAULT 'linear',\n    hyperparams JSONB DEFAULT '{}'::JSONB,\n    search TEXT DEFAULT NULL,\n    search_params JSONB DEFAULT '{}'::JSONB,\n    search_args JSONB DEFAULT '{}'::JSONB,\n    preprocess JSONB DEFAULT '{}'::JSONB,\n    test_size REAL DEFAULT 0.25,\n    test_sampling TEXT DEFAULT 'random'\n)\n```", "```py\nSELECT * FROM pgml.train(\n    project_name => 'Regression Project',\n    task => 'regression',\n    relation_name => pgml.diabetes',\n    y_column_name => 'target'\n);\n```", "```py\nSELECT * FROM pgml.train(\n    'Regression Project ',\n    algorithm => 'lightgbm'\n);\n```", "```py\nSELECT * FROM pgml.train('Regression Project',\n                algorithm => 'lightgbm',\n                search => 'random',\n                search_args => '{\"n_iter\": 100 }',\n                search_params => '{\n                        \"learning_rate\": [0.001, 0.1, 0.5],\n                        \"n_estimators\": [20, 100, 200]\n                }'\n);\n```", "```py\nSELECT pgml.train(\n…\npreprocess => '{\n        \"model\": {\"encode\": {\"ordinal\": [\"Ford\", \"Kia\",\n            \"Volkswagen\"]}}\n        \"price\": {\"impute\": \"mean\", scale: \"standard\"}\n        \"fuel_economy\": {\"scale\": \"standard\"}\n    }'\n);\n```", "```py\npgml.deploy(\n    project_name TEXT,\n    strategy TEXT DEFAULT 'best_score',\n    algorithm TEXT DEFAULT NULL\n)\n```", "```py\npgml.predict (\n    project_name TEXT,\n    features REAL[]\n)\n```", "```py\nCREATE TABLE pgml.telco_churn\n(\n    customerid       VARCHAR(100),\n    gender           VARCHAR(100),\n    seniorcitizen    BOOLEAN,\n    partner          VARCHAR(10),\n    dependents       VARCHAR(10),\n    tenure           REAL,\n...\n    monthlycharges   VARCHAR(50),\n    totalcharges     VARCHAR(50),\n    churn            VARCHAR(10)\n);\n```", "```py\nCOPY pgml.telco_churn (customerid,\n                       gender,\n                       seniorcitizen,\n                       partner,\n...\n                       streamingtv,\n                       streamingmovies,\n                       contract,\n                       paperlessbilling,\n                       paymentmethod,\n                       monthlycharges,\n                       totalcharges,\n                       churn\n    ) FROM '/tmp/telco-churn.csv'\n    DELIMITER ','\n    CSV HEADER;\n```", "```py\nUPDATE pgml.telco_churn\nSET totalcharges = NULL\nWHERE totalcharges = ' ';\n```", "```py\nCREATE VIEW pgml.telco_churn_data AS\nSELECT gender,\n       seniorcitizen,\n       CAST(CASE partner\n                WHEN 'Yes' THEN true\n                WHEN 'No' THEN false\n           END AS BOOLEAN) AS partner,\n...\n       CAST(monthlycharges AS REAL),\n       CAST(totalcharges AS REAL),\n       CAST(CASE churn\n                WHEN 'Yes' THEN true\n                WHEN 'No' THEN false\n           END AS BOOLEAN) AS churn\nFROM pgml.telco_churn;\n```", "```py\nSELECT *\nFROM pgml.train('Telco Churn',\n                task => 'classification',\n                relation_name => 'pgml.telco_churn_data',\n                y_column_name => 'churn',\n                algorithm => 'lightgbm',\n                preprocess => '{\"totalcharges\": {\"impute\": \"mean\"} }',\n                search => 'random',\n                search_args => '{\"n_iter\": 500 }',\n                search_params => '{\n                        \"num_leaves\": [2, 4, 8, 16, 32, 64]\n                }'\n    );\n```", "```py\nSELECT metrics, hyperparams\nFROM pgml.models m\nLEFT OUTER JOIN pgml.projects p on p.id = m.project_id\nWHERE p.name = 'Telco Churn';\n```", "```py\nSELECT pgml.predict(\n               'Telco Churn',\n               ROW (\n                   CAST('Male' AS VARCHAR(30)),\n                   1,\n...\n                   CAST('Electronic check' AS VARCHAR(30)),\n                   CAST(20.25 AS REAL),\n                   CAST(4107.25 AS REAL)\n                   )\n           ) AS prediction;\n```", "```py\nSELECT *,\n       pgml.predict(\n               'Telco Churn',\n               ROW (\n                   gender,\n                   seniorcitizen,\n…\n                   paymentmethod,\n                   CAST(monthlycharges AS REAL),\n                   CAST(totalcharges AS REAL)\n                   )\n           ) AS prediction\nFROM pgml.telco_churn;\n```"]