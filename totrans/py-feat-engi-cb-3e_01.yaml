- en: '1'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '1'
- en: Imputing Missing Data
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 填充缺失数据
- en: Missing data—meaning the absence of values for certain observations—is an unavoidable
    problem in most data sources. Some machine learning model implementations can
    handle missing data out of the box. To train other models, we must remove observations
    with missing data or transform them into permitted values.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 缺失数据——即某些观测值的值缺失——是大多数数据源中不可避免的问题。某些机器学习模型的实现可以开箱即用地处理缺失数据。为了训练其他模型，我们必须删除具有缺失数据的观测值或将它们转换为允许的值。
- en: The act of replacing missing data with their statistical estimates is called
    **imputation**. The goal of any imputation technique is to produce a complete
    dataset. There are multiple imputation methods. We select which one to use, depending
    on whether the data is missing at random, the proportion of missing values, and
    the machine learning model we intend to use. In this chapter, we will discuss
    several imputation methods.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 将缺失数据替换为其统计估计的行为称为**填充**。任何填充技术的目标都是生成一个完整的数据集。有多种填充方法。我们根据数据是否随机缺失、缺失值的比例以及我们打算使用的机器学习模型来选择使用哪种方法。在本章中，我们将讨论几种填充方法。
- en: 'This chapter will cover the following recipes:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下食谱：
- en: Removing observations with missing data
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除具有缺失数据的观测值
- en: Performing mean or median imputation
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行均值或中位数填充
- en: Imputing categorical variables
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 填充分类变量
- en: Replacing missing values with an arbitrary number
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用任意数替换缺失值
- en: Finding extreme values for imputation
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为填充找到极端值
- en: Marking imputed values
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标记填充值
- en: Implementing forward and backward fill
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实施前向和后向填充
- en: Carrying out interpolation
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行插值
- en: Performing multivariate imputation by chained equations
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过链式方程进行多元填充
- en: Estimating missing data with nearest neighbors
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用最近邻估计缺失数据
- en: Technical requirements
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: In this chapter, we will use the Python libraries Matplotlib, pandas, NumPy,
    scikit-learn, and Feature-engine. If you need to install Python, the free Anaconda
    Python distribution ([https://www.anaconda.com/](https://www.anaconda.com/)) includes
    most numerical computing libraries.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用Python库Matplotlib、pandas、NumPy、scikit-learn和Feature-engine。如果您需要安装Python，免费的Anaconda
    Python发行版([https://www.anaconda.com/](https://www.anaconda.com/))包括了大多数数值计算库。
- en: '`feature-engine` can be installed with `pip` as follows:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用以下方式使用`pip`安装`feature-engine`：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'If you use Anaconda, you can install `feature-engine` with `conda`:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用Anaconda，可以使用`conda`安装`feature-engine`：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Note
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The recipes from this chapter were created using the latest versions of the
    Python libraries at the time of publishing. You can check the versions in the
    `requirements.txt` file in the accompanying GitHub repository, at [https://github.com/PacktPublishing/Python-Feature-engineering-Cookbook-Third-Edition/blob/main/requirements.txt](https://github.com/PacktPublishing/Python-Feature-engineering-Cookbook-Third-Edition/blob/main/requirements.txt).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的食谱是在出版时使用Python库的最新版本创建的。您可以在附带的GitHub仓库中的`requirements.txt`文件中检查版本，网址为[https://github.com/PacktPublishing/Python-Feature-engineering-Cookbook-Third-Edition/blob/main/requirements.txt](https://github.com/PacktPublishing/Python-Feature-engineering-Cookbook-Third-Edition/blob/main/requirements.txt)。
- en: 'We will use the **Credit Approval** dataset from the *UCI Machine Learning
    Repository* ([https://archive.ics.uci.edu/](https://archive.ics.uci.edu/)), licensed
    under the CC BY 4.0 creative commons attribution: [https://creativecommons.org/licenses/by/4.0/legalcode](https://creativecommons.org/licenses/by/4.0/legalcode).
    You’ll find the dataset at this link: [http://archive.ics.uci.edu/dataset/27/credit+approval](http://archive.ics.uci.edu/dataset/27/credit+approval).'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用来自*UCI机器学习仓库*的**信用批准**数据集([https://archive.ics.uci.edu/](https://archive.ics.uci.edu/))，该数据集根据CC
    BY 4.0创意共享许可：[https://creativecommons.org/licenses/by/4.0/legalcode](https://creativecommons.org/licenses/by/4.0/legalcode)。您可以在以下链接找到数据集：[http://archive.ics.uci.edu/dataset/27/credit+approval](http://archive.ics.uci.edu/dataset/27/credit+approval)。
- en: 'I downloaded and modified the data as shown in this notebook: [https://github.com/PacktPublishing/Python-Feature-engineering-Cookbook-Third-Edition/blob/main/ch01-missing-data-imputation/credit-approval-dataset.ipynb](https://github.com/PacktPublishing/Python-Feature-engineering-Cookbook-Third-Edition/blob/main/ch01-missing-data-imputation/credit-approval-dataset.ipynb)'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我下载并修改了如本笔记本所示的数据：[https://github.com/PacktPublishing/Python-Feature-engineering-Cookbook-Third-Edition/blob/main/ch01-missing-data-imputation/credit-approval-dataset.ipynb](https://github.com/PacktPublishing/Python-Feature-engineering-Cookbook-Third-Edition/blob/main/ch01-missing-data-imputation/credit-approval-dataset.ipynb)
- en: 'We will also use the **air passenger** dataset located in Facebook’s Prophet
    GitHub repository ([https://github.com/facebook/prophet/blob/main/examples/example_air_passengers.csv](https://github.com/facebook/prophet/blob/main/examples/example_air_passengers.csv)),
    licensed under the MIT license: [https://github.com/facebook/prophet/blob/main/LICENSE](https://github.com/facebook/prophet/blob/main/LICENSE)'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将使用位于Facebook的Prophet GitHub仓库中的**航空乘客**数据集（[https://github.com/facebook/prophet/blob/main/examples/example_air_passengers.csv](https://github.com/facebook/prophet/blob/main/examples/example_air_passengers.csv)），该数据集受MIT许可协议保护：[https://github.com/facebook/prophet/blob/main/LICENSE](https://github.com/facebook/prophet/blob/main/LICENSE)
- en: 'I modified the data as shown in this notebook: [https://github.com/PacktPublishing/Python-Feature-engineering-Cookbook-Third-Edition/blob/main/ch01-missing-data-imputation/air-passengers-dataset.ipynb](https://github.com/PacktPublishing/Python-Feature-engineering-Cookbook-Third-Edition/blob/main/ch01-missing-data-imputation/air-passengers-dataset.ipynb)'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我已经在这个笔记本中修改了数据，如所示：[https://github.com/PacktPublishing/Python-Feature-engineering-Cookbook-Third-Edition/blob/main/ch01-missing-data-imputation/air-passengers-dataset.ipynb](https://github.com/PacktPublishing/Python-Feature-engineering-Cookbook-Third-Edition/blob/main/ch01-missing-data-imputation/air-passengers-dataset.ipynb)
- en: 'You’ll find a copy of the modified data sets in the accompanying GitHub repository:
    [https://github.com/PacktPublishing/Python-Feature-engineering-Cookbook-Third-Edition/blob/main/ch01-missing-data-imputation/](https://github.com/PacktPublishing/Python-Feature-engineering-Cookbook-Third-Edition/blob/main/ch01-missing-data-imputation/)'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在附带的GitHub仓库中找到修改后的数据集副本：[https://github.com/PacktPublishing/Python-Feature-engineering-Cookbook-Third-Edition/blob/main/ch01-missing-data-imputation/](https://github.com/PacktPublishing/Python-Feature-engineering-Cookbook-Third-Edition/blob/main/ch01-missing-data-imputation/)
- en: Removing observations with missing data
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 删除含有缺失数据的观测值
- en: '**Complete Case Analysis** (**CCA**), also called list-wise deletion of cases,
    consists of discarding observations with missing data. CCA can be applied to both
    categorical and numerical variables. With CCA, we preserve the distribution of
    the variables after the imputation, provided the data is missing at random and
    only in a small proportion of observations. However, if data is missing across
    many variables, CCA may lead to the removal of a large portion of the dataset.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**完全案例分析**（**CCA**），也称为案例的逐行删除，包括丢弃含有缺失数据的观测值。CCA可以应用于分类和数值变量。在使用CCA的情况下，如果数据是随机缺失且仅在一小部分观测值中缺失，我们可以在插补后保留变量的分布。然而，如果数据在许多变量中缺失，CCA可能会导致大量数据集的删除。'
- en: Note
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Use CCA only when a small number of observations are missing and you have good
    reasons to believe that they are not important to your model.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 只有在观测值缺失数量很少，并且你有充分的理由相信它们对你的模型不重要时，才使用CCA。
- en: How to do it...
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Let’s begin by making some imports and loading the dataset:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先进行一些导入和加载数据集的操作：
- en: 'Let’s import `pandas`, `matplotlib`, and the train/test split function from
    scikit-learn:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们导入`pandas`、`matplotlib`以及来自scikit-learn的训练/测试分割函数：
- en: '[PRE2]'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Let’s load and display the dataset described in the *Technical* *requirements*
    section:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们加载并显示在*技术要求*部分描述的数据集：
- en: '[PRE3]'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In the following image, we see the first 5 rows of data:'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在以下图像中，我们可以看到数据的前5行：
- en: '![Figure 1.1 – First 5 rows of the dataset](img/B22396_01_01.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![图1.1 – 数据集的前5行](img/B22396_01_01.jpg)'
- en: Figure 1.1 – First 5 rows of the dataset
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.1 – 数据集的前5行
- en: 'Let’s proceed as we normally would if we were preparing the data to train machine
    learning models; by splitting the data into a training and a test set:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们正在准备数据以训练机器学习模型，我们会像通常那样继续操作；通过将数据分为训练集和测试集：
- en: '[PRE4]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Let’s now make a bar plot with the proportion of missing data per variable
    in the training and test sets:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们制作一个条形图，显示训练集和测试集中每个变量的缺失数据比例：
- en: '[PRE5]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The previous code block returns the following bar plots with the fraction of
    missing data per variable in the training (top) and test sets (bottom):'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 之前的代码块返回以下条形图，显示了训练集（顶部）和测试集（底部）中每个变量的缺失数据比例：
- en: '![Figure 1.2 – Proportion of missing data per variable](img/B22396_01_02.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![图1.2 – 每个变量的缺失数据比例](img/B22396_01_02.jpg)'
- en: Figure 1.2 – Proportion of missing data per variable
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.2 – 每个变量的缺失数据比例
- en: 'Now, we’ll remove observations if they have missing values in any variable:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将删除任何变量中含有缺失值的观测值：
- en: '[PRE6]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Note
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'pandas’ `dropna()`drops observations with any missing value by default. We
    can remove observations with missing data in a subset of variables like this:
    `data.dropna(subset=["A3", "A4"])`.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: pandas的`dropna()`默认会删除任何含有缺失值的观测值。我们可以通过以下方式删除变量子集（如"A3", "A4"）中的缺失数据：`data.dropna(subset=["A3",
    "A4"])`。
- en: 'Let’s print and compare the size of the original and complete case datasets:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们打印并比较原始数据集和完整案例数据集的大小：
- en: '[PRE7]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We removed more than 200 observations with missing data from the training set,
    as shown in the following output:'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们从训练集中移除了超过200个有缺失数据的观测值，如下所示输出：
- en: '[PRE8]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'After removing observations from the training and test sets, we need to align
    the target variables:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在从训练集和测试集中移除观测值后，我们需要对齐目标变量：
- en: '[PRE9]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Now, the datasets and target variables contain the rows without missing data.
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，数据集和目标变量包含没有缺失数据的行。
- en: 'To drop observations with missing data utilizing `feature-engine`, let’s import
    the required transformer:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要使用`feature-engine`丢弃有缺失数据的观测值，让我们导入所需的转换器：
- en: '[PRE10]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Let’s set up the imputer to automatically find the variables with missing data:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们设置填充器以自动找到有缺失数据的变量：
- en: '[PRE11]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Let’s fit the transformer so that it finds the variables with missing data:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们调整transformer，使其找到有缺失数据的变量：
- en: '[PRE12]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Let’s inspect the variables with NAN that the transformer found:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们检查transformer找到的含有NAN的变量：
- en: '[PRE13]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The previous command returns the names of the variables with missing data:'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 前一个命令返回了有缺失数据的变量名称：
- en: '[PRE14]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Let’s remove the rows with missing data in the training and test sets:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们移除训练集和测试集中有缺失数据的行：
- en: '[PRE15]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Use `train_cca.isnull().sum()` to corroborate the absence of missing data in
    the complete case dataset.
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用`train_cca.isnull().sum()`来证实完整案例数据集中没有缺失数据。
- en: '`DropMissingData` can automatically adjust the target after removing missing
    data from the training set:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`DropMissingData`可以在从训练集中移除缺失数据后自动调整目标：'
- en: '[PRE16]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The previous code removed rows with `nan` from the training and test sets and
    then re-aligned the target variables.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码从训练集和测试集中移除了`nan`行，然后重新对齐了目标变量。
- en: Note
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: To remove observations with missing data in a subset of variables, use `DropMissingData(variables=['A3',
    'A4'])`. To remove rows with `nan` in at least 5% of the variables, use `DropMissingData(threshold=0.95)`.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 要从变量子集中移除有缺失数据的观测值，使用`DropMissingData(variables=['A3', 'A4'])`。要移除至少5%变量中有`nan`的行，使用`DropMissingData(threshold=0.95)`。
- en: How it works...
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In this recipe, we plotted the proportion of missing data in each variable and
    then removed all observations with missing values.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们绘制了每个变量中缺失数据的比例，然后移除了所有有缺失值的观测值。
- en: We used `pandas` `isnull()` and `mean()` methods to determine the proportion
    of missing observations in each variable. The `isnull()` method created a Boolean
    vector per variable with `True` and `False` values indicating whether a value
    was missing. The `mean()` method took the average of these values and returned
    the proportion of missing data.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`pandas`的`isnull()`和`mean()`方法来确定每个变量中缺失观测值的比例。`isnull()`方法为每个变量创建了一个布尔向量，其中`True`和`False`值表示值是否缺失。`mean()`方法取这些值的平均值，并返回缺失数据的比例。
- en: We used `pandas` `plot.bar()` to create a bar plot of the fraction of missing
    data per variable. In *Figure 1**.2*, we saw the fraction of `nan` per variable
    in the training and test sets.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`pandas`的`plot.bar()`创建每个变量的缺失数据分数的条形图。在*图1*.2中，我们看到了训练集和测试集中每个变量的`nan`分数。
- en: To remove observations with missing values in *any* variable, we used pandas’
    `dropna()`, thereby obtaining a complete case dataset.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 要移除任何变量中的缺失值观测，我们使用了pandas的`dropna()`，从而获得了一个完整案例数据集。
- en: Finally, we removed missing data using Feature-engine’s `DropMissingData()`.
    This imputer automatically identified and stored the variables with missing data
    from the train set when we called the `fit()` method. With the `transform()` method,
    the imputer removed observations with `nan` in those variables. With `transform_x_y()`,
    the imputer removed rows with `nan` from the data sets and then realigned the
    target variable.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们使用Feature-engine的`DropMissingData()`移除了缺失数据。这个填充器在调用`fit()`方法时自动识别并存储了训练集中的缺失数据变量。使用`transform()`方法，填充器移除了那些变量中的`nan`观测值。使用`transform_x_y()`，填充器从数据集中移除了`nan`行，然后重新对齐了目标变量。
- en: See also
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: 'If you want to use `DropMissingData()` within a pipeline together with other
    Feature-engine or scikit-learn transformers, check out Feature-engine’s `Pipeline`:
    [https://Feature-engine.trainindata.com/en/latest/user_guide/pipeline/Pipeline.html](https://Feature-engine.trainindata.com/en/latest/user_guide/pipeline/Pipeline.html).
    This pipeline can align the target with the training and test sets after removing
    rows.'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想在管道中使用`DropMissingData()`与其他Feature-engine或scikit-learn转换器一起使用，请查看Feature-engine的`Pipeline`：[https://Feature-engine.trainindata.com/en/latest/user_guide/pipeline/Pipeline.html](https://Feature-engine.trainindata.com/en/latest/user_guide/pipeline/Pipeline.html)。此管道在删除行后可以与训练集和测试集对齐目标。
- en: Performing mean or median imputation
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行均值或中值插补
- en: Mean or median imputation consists of replacing missing data with the variable’s
    mean or median value. To avoid data leakage, we determine the mean or median using
    the train set, and then use these values to impute the train and test sets, and
    all future data.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 均值或中值插补包括用变量的均值或中值值替换缺失数据。为了避免数据泄露，我们使用训练集来确定均值或中值，然后使用这些值来插补训练集、测试集以及所有未来的数据。
- en: Scikit-learn and Feature-engine learn the mean or median from the train set
    and store these parameters for future use out of the box.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: Scikit-learn和Feature-engine从训练集中学习均值或中值，并存储这些参数以供将来使用。默认情况下。
- en: In this recipe, we will perform mean and median imputation using `pandas`, `scikit`-`learn`,
    and `feature-engine`.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将使用`pandas`、`scikit-learn`和`feature-engine`执行均值和中值插补。
- en: Note
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Use mean imputation if variables are normally distributed and median imputation
    otherwise. Mean and median imputation may distort the variable distribution if
    there is a high percentage of missing data.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 如果变量呈正态分布，则使用均值插补；否则使用中值插补。如果缺失数据比例较高，均值和中值插补可能会扭曲变量分布。
- en: How to do it...
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Let’s begin this recipe:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始这个菜谱：
- en: 'First, we’ll import `pandas` and the required functions and classes from `scikit-learn`
    and `feature-engine`:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们将导入`pandas`以及从`scikit-learn`和`feature-engine`中所需的函数和类。
- en: '[PRE17]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Let’s load the dataset that we prepared in the *Technical* *requirements* section:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们加载我们在*技术要求*部分准备的数据集：
- en: '[PRE18]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Let’s split the data into train and test sets with their respective targets:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们将数据分割成训练集和测试集及其相应的目标：
- en: '[PRE19]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Let’s make a list with the numerical variables by excluding variables of type
    object:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们通过排除对象类型的变量来创建一个数值变量的列表：
- en: '[PRE20]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'If you execute `numeric_vars`, you will see the names of the numerical variables:
    `[''A2'', ''A3'', ''A8'', ''A11'', ''``A14'', ''A15'']`.'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你执行`numeric_vars`，你将看到数值变量的名称：`['A2', 'A3', 'A8', 'A11', 'A14', 'A15']`。
- en: 'Let’s capture the variables’ median values in a dictionary:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们在字典中捕获变量的中值：
- en: '[PRE21]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Tip
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士
- en: Note how we calculate the median using the train set. We will use these values
    to replace missing data in the train and test sets. To calculate the mean, use
    pandas `mean()` instead of `median()`.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 注意我们如何使用训练集计算中值。我们将使用这些值来替换训练集和测试集中的缺失数据。要计算均值，请使用pandas的`mean()`而不是`median()`。
- en: 'If you execute `median_values`, you will see a dictionary with the median value
    per variable: `{''A2'': 28.835, ''A3'': 2.75, ''A8'': 1.0, ''A11'': 0.0, ''A14'':
    160.0, ''``A15'': 6.0}.`'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '如果你执行`median_values`，你将看到一个包含每个变量的中值字典：`{''A2'': 28.835, ''A3'': 2.75, ''A8'':
    1.0, ''A11'': 0.0, ''A14'': 160.0, ''A15'': 6.0}`。'
- en: 'Let’s replace missing data with the median:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们用中值替换缺失数据：
- en: '[PRE22]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: If you execute `X_train_t[numeric_vars].isnull().sum()` after the imputation,
    the number of missing values in the numerical variables should be `0`.
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在插补后，如果你执行`X_train_t[numeric_vars].isnull().sum()`，数值变量中的缺失值数量应该是`0`。
- en: Note
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: '`pandas` `fillna()` returns a new dataset with imputed values by default. To
    replace missing data in the original DataFrame, set the `inplace` parameter to
    `True`: `X_train.fillna(value=median_values, inplace=True)`.'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '`pandas fillna()`默认返回一个包含插补值的新数据集。要替换原始DataFrame中的缺失数据，请将`inplace`参数设置为`True`：`X_train.fillna(value=median_values,
    inplace=True)`。'
- en: Now, let’s impute missing values with the median using `scikit-learn`.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们使用`scikit-learn`用中值插补缺失值。
- en: 'Let’s set up the imputer to replace missing data with the median:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们设置插补器，用中值替换缺失数据：
- en: '[PRE23]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Note
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'To perform mean imputation, set `SimpleImputer()` as follows: `imputer =` `SimpleImputer(strategy
    = "``mean")`.'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 要执行均值插补，请按以下方式设置`SimpleImputer()`：`imputer = SimpleImputer(strategy = "mean")`。
- en: 'We restrict the imputation to the numerical variables by using `ColumnTransformer()`:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们通过使用`ColumnTransformer()`来限制插补仅应用于数值变量：
- en: '[PRE24]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Note
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Scikit-learn can return `numpy` arrays, `pandas` DataFrames, or `polar` frames,
    depending on how we set out the transform output. By default, it returns `numpy`
    arrays.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 根据我们如何设置转换输出，Scikit-learn可以返回`numpy`数组、`pandas` DataFrame或`polar`框架。默认情况下，它返回`numpy`数组。
- en: 'Let’s fit the imputer to the train set so that it learns the median values:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们将填充器拟合到训练集，以便它学习中值：
- en: '[PRE25]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Let’s check out the learned median values:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们检查学习到的中值：
- en: '[PRE26]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The previous command returns the median values per variable:'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 之前的命令返回了每个变量的中值：
- en: '[PRE27]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Let’s replace missing values with the median:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们用中值替换缺失值：
- en: '[PRE28]'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Let’s display the resulting training set:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们显示结果训练集：
- en: '[PRE29]'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'We see the resulting DataFrame in the following image:'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在以下图像中，我们可以看到结果DataFrame：
- en: '![Figure 1.3 – Training set after the imputation. The imputed variables are
    marked by the imputer prefix; the untransformed variables show the prefix remainder](img/B22396_01_03.jpg)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![图1.3 – 填充后的训练集。填充的变量由填充器前缀标记；未转换的变量显示前缀余数](img/B22396_01_03.jpg)'
- en: Figure 1.3 – Training set after the imputation. The imputed variables are marked
    by the imputer prefix; the untransformed variables show the prefix remainder
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.3 – 填充后的训练集。填充的变量由填充器前缀标记；未转换的变量显示前缀余数
- en: Finally, let’s perform median imputation using `feature-engine`.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们使用`feature-engine`执行中值填充：
- en: 'Let’s set up the imputer to replace missing data in numerical variables with
    the median:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们设置填充器，用中值替换数值变量中的缺失值：
- en: '[PRE30]'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Note
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: To perform mean imputation, change `imputation_method` to `"mean"`. By default
    `MeanMedianImputer()` will impute all numerical variables in the DataFrame, ignoring
    categorical variables. Use the `variables` argument to restrict the imputation
    to a subset of numerical variables.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 要执行均值填充，将`imputation_method`更改为`"mean"`。默认情况下，`MeanMedianImputer()`将填充DataFrame中的所有数值变量，忽略分类变量。使用`variables`参数限制填充到数值变量的子集。
- en: 'Fit the imputer so that it learns the median values:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将填充器拟合以学习中值：
- en: '[PRE31]'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Inspect the learned medians:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查学习到的中值：
- en: '[PRE32]'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The previous command returns the median values in a dictionary:'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 之前的命令返回了字典中的中值：
- en: '[PRE33]'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Finally, let’s replace the missing values with the median:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，让我们用中值替换缺失值：
- en: '[PRE34]'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Feature-engine’s `MeanMedianImputer()` returns a `DataFrame`. You can check
    that the imputed variables do not contain missing values using `X_train[numeric_vars].isnull().mean()`.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: Feature-engine的`MeanMedianImputer()`返回一个`DataFrame`。您可以使用`X_train[numeric_vars].isnull().mean()`检查填充的变量是否不包含缺失值。
- en: How it works...
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In this recipe, we replaced missing data with the variable’s median values using
    `pandas`, `scikit-learn`, and `feature-engine`.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们使用`pandas`、`scikit-learn`和`feature-engine`替换了缺失数据，用变量的中值。
- en: We divided the dataset into train and test sets using scikit-learn’s `train_test_split()`
    function. The function takes the predictor variables, the target, the fraction
    of observations to retain in the test set, and a `random_state` value for reproducibility,
    as arguments. It returned a train set with 70% of the original observations and
    a test set with 30% of the original observations. The 70:30 split was done at
    random.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用scikit-learn的`train_test_split()`函数将数据集分为训练集和测试集。该函数接受预测变量、目标、测试集中要保留的观测值比例以及用于可重复性的`random_state`值作为参数。它返回一个包含原始观测值70%的训练集和一个包含原始观测值30%的测试集。70:30的分割是随机的。
- en: To impute missing data with pandas, in *step 5*, we created a dictionary with
    the numerical variable names as keys and their medians as values. The median values
    were learned from the training set to avoid data leakage. To replace missing data,
    we applied `pandas`’ `fillna()` to train and test sets, passing the dictionary
    with the median values per variable as a parameter.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用pandas进行缺失数据填充，在*步骤5*中，我们创建了一个字典，其中数值变量名作为键，它们的平均值作为值。中值是从训练集中学习的，以避免数据泄露。为了替换缺失数据，我们对训练集和测试集应用了`pandas`的`fillna()`，并将每个变量的中值字典作为参数传递。
- en: To replace the missing values with the median using `scikit-learn`, we used
    `SimpleImputer()` with the `strategy` set to `"median"`. To restrict the imputation
    to numerical variables, we used `ColumnTransformer()`. With the `remainder` argument
    set to `passthrough`, we made `ColumnTransformer()` return *all the variables*
    seen in the training set in the transformed output; the imputed ones followed
    by those that were not transformed.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 `scikit-learn` 将缺失值替换为中位数，我们使用了 `strategy` 设置为 `"median"` 的 `SimpleImputer()`。为了限制推断仅限于数值变量，我们使用了
    `ColumnTransformer()`。通过将 `remainder` 参数设置为 `passthrough`，我们使 `ColumnTransformer()`
    在转换后的输出中返回训练集中看到的所有变量；推断的变量随后是未转换的变量。
- en: Note
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: '`ColumnTransformer()` changes the names of the variables in the output. The
    transformed variables show the prefix `imputer` and the unchanged variables show
    the prefix `remainder`.'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '`ColumnTransformer()` 改变了输出中变量的名称。转换后的变量显示前缀 `imputer`，而未更改的变量显示前缀 `remainder`。'
- en: In *step 8*, we set the output of the column transformer to `pandas` to obtain
    a DataFrame as a result. By default, `ColumnTransformer()` returns `numpy` arrays.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *步骤 8* 中，我们将列转换器的输出设置为 `pandas` 以获得一个 DataFrame 作为结果。默认情况下，`ColumnTransformer()`
    返回 `numpy` 数组。
- en: Note
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: From version 1.4.0, `scikit-learn` transformers can return `numpy` arrays, `pandas`
    DataFrames, or `polar` frames as a result of the `transform()` method.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 1.4.0 开始，`scikit-learn` 转换器可以通过 `transform()` 方法返回 `numpy` 数组、`pandas` DataFrame
    或 `polar` 帧。
- en: With `fit()`, `SimpleImputer()` learned the median of each numerical variable
    in the train set and stored them in its `statistics_` attribute. With `transform()`,
    it replaced the missing values with the medians.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 `fit()`，`SimpleImputer()` 学习了训练集中每个数值变量的中位数，并将它们存储在其 `statistics_` 属性中。通过
    `transform()`，它用中位数替换了缺失值。
- en: To replace missing values with the median using Feature-engine, we used the
    `MeanMedianImputer()` with the `imputation_method` set to `median`. To restrict
    the imputation to a subset of variables, we passed the variable names in a list
    to the `variables` parameter. With `fit()`, the transformer learned and stored
    the median values per variable in a dictionary in its `imputer_dict_` attribute.
    With `transform()`, it replaced the missing values, returning a pandas DataFrame.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 Feature-engine 将缺失值替换为中位数，我们使用了 `imputation_method` 设置为 `median` 的 `MeanMedianImputer()`。为了限制推断仅限于变量子集，我们将变量名称列表传递给
    `variables` 参数。通过 `fit()`，转换器学习并存储了每个变量的中位数值，并将其存储在其 `imputer_dict_` 属性中的字典中。通过
    `transform()`，它替换了缺失值，返回一个 pandas DataFrame。
- en: Imputing categorical variables
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 推断分类变量
- en: We typically impute categorical variables with the most frequent category, or
    with a specific string. To avoid data leakage, we find the frequent categories
    from the train set. Then, we use these values to impute the train, test, and future
    datasets. `scikit-learn` and `feature-engine` find and store the frequent categories
    for the imputation, out of the box.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通常使用最频繁的类别或特定的字符串来推断分类变量。为了避免数据泄露，我们从训练集中找到频繁的类别。然后，我们使用这些值来推断训练集、测试集和未来的数据集。`scikit-learn`
    和 `feature-engine` 可以直接找到并存储用于推断的频繁类别。
- en: In this recipe, we will replace missing data in categorical variables with the
    most frequent category, or with an arbitrary string.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将用最频繁的类别或任意字符串替换分类变量中的缺失数据。
- en: How to do it...
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To begin, let’s make a few imports and prepare the data:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们进行一些导入并准备数据：
- en: 'Let’s import `pandas` and the required functions and classes from `scikit-learn`
    and `feature-engine`:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们导入 `pandas` 以及从 `scikit-learn` 和 `feature-engine` 中所需的函数和类：
- en: '[PRE35]'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Let’s load the dataset that we prepared in the *Technical* *requirements* section:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们加载我们在 *技术要求* 部分准备的数据集：
- en: '[PRE36]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Let’s split the data into train and test sets and their respective targets:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们将数据分割成训练集和测试集及其相应的目标：
- en: '[PRE37]'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Let’s capture the categorical variables in a list:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们将分类变量放入一个列表中：
- en: '[PRE38]'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Let’s store the variables’ most frequent categories in a dictionary:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们将变量的最频繁类别存储在一个字典中：
- en: '[PRE39]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Let’s replace missing values with the frequent categories:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们用频繁的类别替换缺失值：
- en: '[PRE40]'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Note
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: '`fillna()` returns a new DataFrame with the imputed values by default. We can
    replace missing data in the original DataFrame by executing `X_train.fillna(value=frequent_values,
    inplace=True)`.'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '`fillna()` 默认返回一个包含推断值的新的 DataFrame。我们可以通过执行 `X_train.fillna(value=frequent_values,
    inplace=True)` 来替换原始 DataFrame 中的缺失数据。'
- en: 'To replace missing data with a specific string, let’s create an imputation
    dictionary with the categorical variable names as the keys and an arbitrary string
    as the values:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要用特定字符串替换缺失数据，让我们创建一个以分类变量名称为键、任意字符串为值的填充字典：
- en: '[PRE41]'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Now, we can use this dictionary and the code in *step 6* to replace missing
    data.
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，我们可以使用这个字典和 *步骤 6* 中的代码来替换缺失数据。
- en: Note
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: With `pandas` `value_counts()` we can see the string added by the imputation.
    Try executing, for example, `X_train["A1"].value_counts()`.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `pandas` 的 `value_counts()` 我们可以看到填充中添加的字符串。例如，尝试执行 `X_train["A1"].value_counts()`。
- en: Now, let’s impute missing values with the most frequent category using `scikit-learn`.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们使用 `scikit-learn` 用最频繁的类别来填充缺失值。
- en: 'Let’s set up the imputer to find the most frequent category per variable:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们设置填充器，为每个变量找到最频繁的类别：
- en: '[PRE42]'
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Note
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: '`SimpleImputer()` will learn the mode for numerical and categorical variables
    alike. But in practice, mode imputation is done for categorical variables only.'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '`SimpleImputer()` 将学习数值和分类变量的众数。但在实际操作中，众数填充仅适用于分类变量。'
- en: 'Let’s restrict the imputation to the categorical variables:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们将填充限制在分类变量上：
- en: '[PRE43]'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Note
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'To impute missing data with a string instead of the most frequent category,
    set `SimpleImputer()` as follows: `imputer =` `SimpleImputer(strategy="constant",
    fill_value="missing")`.'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 要用字符串而不是最频繁的类别来填充缺失数据，请按以下方式设置 `SimpleImputer()`：`imputer = SimpleImputer(strategy="constant",
    fill_value="missing")`。
- en: 'Fit the imputer to the train set so that it learns the most frequent values:'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将填充器拟合到训练集，以便它学习最频繁的值：
- en: '[PRE44]'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Let’s take a look at the most frequent values learned by the imputer:'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们看看填充器学习到的最频繁值：
- en: '[PRE45]'
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'The previous command returns the most frequent values per variable:'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 之前的命令返回每个变量的最频繁值：
- en: '[PRE46]'
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Finally, let’s replace missing values with the frequent categories:'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，让我们用频繁类别替换缺失值：
- en: '[PRE47]'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Make sure to inspect the resulting DataFrames by executing `X_train_t.head()`.
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 确保通过执行 `X_train_t.head()` 来检查生成的 DataFrames。
- en: Note
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The `ColumnTransformer()` changes the names of the variables. The imputed variables
    show the prefix `imputer` and the untransformed variables the prefix `remainder`.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '`ColumnTransformer()` 改变了变量的名称。填充的变量显示前缀 `imputer`，未转换的变量显示前缀 `remainder`。'
- en: Finally, let’s impute missing values using `feature-engine`.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们使用 `feature-engine` 来填充缺失值。
- en: 'Let’s set up the imputer to replace the missing data in categorical variables
    with their most frequent value:'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们设置填充器，用最频繁的值替换分类变量中的缺失数据：
- en: '[PRE48]'
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Note
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: With the `variables` parameter set to `None`, `CategoricalImputer()` will automatically
    impute all categorical variables found in the train set. Use this parameter to
    restrict the imputation to a subset of categorical variables, as shown in *step
    13*.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 将 `variables` 参数设置为 `None`，`CategoricalImputer()` 将自动填充训练集中找到的所有分类变量。使用此参数将填充限制为分类变量的子集，如
    *步骤 13* 所示。
- en: 'Fit the imputer to the train set so that it learns the most frequent categories:'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将填充器拟合到训练集，以便它学习最频繁的类别：
- en: '[PRE49]'
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Note
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: To impute categorical variables with a specific string, set `imputation_method`
    to `missing` and `fill_value` to the desired string.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 要用特定字符串填充分类变量，将 `imputation_method` 设置为 `missing` 并将 `fill_value` 设置为所需的字符串。
- en: 'Let’s check out the learned categories:'
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们检查学习到的类别：
- en: '[PRE50]'
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'We can see the dictionary with the most frequent values in the following output:'
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们可以在以下输出中看到包含最频繁值的字典：
- en: '[PRE51]'
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Finally, let’s replace the missing values with frequent categories:'
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，让我们用频繁类别替换缺失值：
- en: '[PRE52]'
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: If you want to impute numerical variables with a string or the most frequent
    value using `CategoricalImputer()`, set the `ignore_format` parameter to `True`.
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你想使用 `CategoricalImputer()` 用字符串或最频繁的值填充数值变量，请将 `ignore_format` 参数设置为 `True`。
- en: '`CategoricalImputer()` returns a pandas DataFrame as a result.'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '`CategoricalImputer()` 返回一个 pandas DataFrame 作为结果。'
- en: How it works...
  id: totrans-221
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In this recipe, we replaced missing values in categorical variables with the
    most frequent categories or an arbitrary string. We used `pandas`, `scikit-learn`,
    and `feature-engine`.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们用最频繁的类别或任意字符串替换了分类变量中的缺失值。我们使用了 `pandas`、`scikit-learn` 和 `feature-engine`。
- en: In *step 5*, we created a dictionary with the variable names as keys and the
    frequent categories as values. To capture the frequent categories, we used pandas
    `mode()`, and to return a dictionary, we used pandas `to_dict()`. To replace the
    missing data, we used `pandas` `fillna()`, passing the dictionary with the variables
    and their frequent categories as parameters. There can be more than one mode in
    a variable, that’s why we made sure to capture only one of those values by using
    `.iloc[0]`.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤 5*中，我们创建了一个字典，变量名作为键，频繁类别作为值。为了捕获频繁类别，我们使用了pandas的`mode()`，为了返回一个字典，我们使用了pandas的`to_dict()`。由于一个变量中可能有多个众数，所以我们确保只捕获其中一个值，使用了`.iloc[0]`。
- en: To replace the missing values using `scikit-learn`, we used `SimpleImputer()`
    with the `strategy` set to `most_frequent`. To restrict the imputation to categorical
    variables, we used `ColumnTransformer()`. With `remainder` set to `passthrough`,
    we made `ColumnTransformer()` return all the variables present in the training
    set as a result of the `transform()` method .
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用`scikit-learn`替换缺失值，我们使用了将`strategy`设置为`most_frequent`的`SimpleImputer()`。为了将填充限制在分类变量上，我们使用了`ColumnTransformer()`。通过将`remainder`设置为`passthrough`，我们使`ColumnTransformer()`在`transform()`方法的结果中返回训练集中存在的所有变量。
- en: Note
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: '`ColumnTransformer()` changes the names of the variables in the output. The
    transformed variables show the prefix `imputer` and the unchanged variables show
    the prefix `remainder`.'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '`ColumnTransformer()`会更改输出中变量的名称。转换后的变量显示前缀`imputer`，未更改的变量显示前缀`remainder`。'
- en: With `fit()`, `SimpleImputer()` learned the variables’ most frequent categories
    and stored them in its `statistics_` attribute. With `transform()`, it replaced
    the missing data with the learned parameters.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 在`fit()`中，`SimpleImputer()`学习了变量的最频繁类别并将它们存储在其`statistics_`属性中。在`transform()`中，它用学习到的参数替换了缺失数据。
- en: '`SimpleImputer()` and `ColumnTransformer()` return NumPy arrays by default.
    We can change this behavior with the `set_output()` parameter.'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '`SimpleImputer()`和`ColumnTransformer()`默认返回NumPy数组。我们可以通过`set_output()`参数更改此行为。'
- en: To replace missing values with `feature-engine`, we used the `CategoricalImputer()`
    with `imputation_method` set to `frequent`. With `fit()`, the transformer learned
    and stored the most frequent categories in a dictionary in its `imputer_dict_`
    attribute. With `transform()`, it replaced the missing values with the learned
    parameters.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用`feature-engine`替换缺失值，我们使用了将`imputation_method`设置为`frequent`的`CategoricalImputer()`。在`fit()`中，转换器学习并存储了最频繁类别在一个字典中，该字典存储在其`imputer_dict_`属性中。在`transform()`中，它用学习到的参数替换了缺失值。
- en: Unlike `SimpleImputer()`, `CategoricalImputer()` will only impute categorical
    variables, unless specifically told not to do so by setting the `ignore_format`
    parameter to `True`. In addition, with `feature-engine` transformers we can restrict
    the transformations to a subset of variables through the transformer itself. For
    `scikit-learn` transformers, we need the additional `ColumnTransformer()` class
    to apply the transformation to a subset of the variables.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 与`SimpleImputer()`不同，`CategoricalImputer()`只会填充分类变量，除非通过将`ignore_format`参数设置为`True`来明确指示不要这样做。此外，使用`feature-engine`转换器，我们可以通过转换器本身限制转换到变量子集。对于`scikit-learn`转换器，我们需要额外的`ColumnTransformer()`类来将转换应用于变量子集。
- en: Replacing missing values with an arbitrary number
  id: totrans-231
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用任意数字替换缺失值
- en: We can replace missing data with an arbitrary value. Commonly used values are
    `999`, `9999`, or `-1` for positive distributions. This method is used for numerical
    variables. For categorical variables, the equivalent method is to replace missing
    data with an arbitrary string, as described in the *Imputing categorical* *variables*
    recipe.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以用任意值替换缺失数据。常用的值是`999`、`9999`或对于正分布的`-1`。这种方法用于数值变量。对于分类变量，等效的方法是像在*填充分类变量*配方中描述的那样，用任意字符串替换缺失数据。
- en: When replacing missing values with arbitrary numbers, we need to be careful
    not to select a value close to the mean, the median, or any other common value
    of the distribution.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 当用任意数字替换缺失值时，我们需要小心不要选择接近均值、中位数或分布中任何其他常见值的数值。
- en: Note
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: We’d use arbitrary number imputation when data is not missing at random, use
    non-linear models, or when the percentage of missing data is high. This imputation
    technique distorts the original variable distribution.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 当数据不是随机缺失时，使用非线性模型，或者当缺失数据的百分比很高时，我们会使用任意数字填充。这种填充技术会扭曲原始变量分布。
- en: In this recipe, we will impute missing data with arbitrary numbers using `pandas`,
    `scikit-learn`, and `feature-engine`.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将使用 `pandas`、`scikit-learn` 和 `feature-engine` 来用任意数字填充缺失数据。
- en: How to do it...
  id: totrans-237
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Let’s begin by importing the necessary tools and loading the data:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先导入必要的工具并加载数据：
- en: 'Import `pandas` and the required functions and classes:'
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入 `pandas` 和所需的函数和类：
- en: '[PRE53]'
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Let’s load the dataset described in the *Technical* *requirements* section:'
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们加载 *技术要求* 部分中描述的数据集：
- en: '[PRE54]'
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Let’s separate the data into train and test sets:'
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们将数据分为训练集和测试集：
- en: '[PRE55]'
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: We will select arbitrary values greater than the maximum value of the distribution.
  id: totrans-245
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们将选择大于分布最大值的任意值。
- en: 'Let’s find the maximum value of four numerical variables:'
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们找到四个数值变量的最大值：
- en: '[PRE56]'
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'The previous command returns the following output:'
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 之前的命令返回以下输出：
- en: '[PRE57]'
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Let’s make a copy of the original DataFrames:'
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们复制原始的 DataFrames：
- en: '[PRE58]'
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Now, we replace the missing values with `99`:'
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将缺失值替换为 `99`：
- en: '[PRE59]'
  id: totrans-253
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: Note
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'To impute different variables with different values using `pandas` `fillna()`,
    use a dictionary like this: `imputation_dict = {"A2": -1, "A3": -1, "A8": 999,
    "``A11": 9999}`.'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: '要使用 `pandas` 的 `fillna()` 用不同的值填充不同的变量，请使用如下字典：`imputation_dict = {"A2": -1,
    "A3": -1, "A8": 999, "``A11": 9999}`。'
- en: Now, we’ll impute missing values with an arbitrary number using `scikit-learn`.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将使用 `scikit-learn` 用任意数字填充缺失值。
- en: 'Let’s set up `imputer` to replace missing values with `99`:'
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们设置 `imputer`，将缺失值替换为 `99`：
- en: '[PRE60]'
  id: totrans-258
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Note
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: '`注意`'
- en: If your dataset contains categorical variables, `SimpleImputer()` will add `99`
    to those variables as well if any values are missing.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的数据集包含分类变量，`SimpleImputer()` 也会将这些变量中的任何缺失值添加 `99`。
- en: 'Let’s fit `imputer` to a slice of the train set containing the variables to
    impute:'
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们将 `imputer` 拟合到包含要填充的变量的训练集的一个子集：
- en: '[PRE61]'
  id: totrans-262
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Replace the missing values with `99` in the desired variables:'
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在所需的变量中将缺失值替换为 `99`：
- en: '[PRE62]'
  id: totrans-264
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: Go ahead and check the lack of missing values by executing `X_test_t[["A2",
    "A3", "``A8", "A11"]].isnull().sum()`.
  id: totrans-265
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 执行 `X_test_t[["A2", "A3", "``A8", "A11"]].isnull().sum()` 来检查缺失值的缺失情况。
- en: To finish, let’s impute missing values using `feature-engine`.
  id: totrans-266
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了完成，让我们使用 `feature-engine` 填充缺失值。
- en: 'Let’s set up the `imputer` to replace missing values with `99` in 4 specific
    variables:'
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们设置 `imputer`，在 4 个特定变量中将缺失值替换为 `99`：
- en: '[PRE63]'
  id: totrans-268
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '`Note`'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: '`注意`'
- en: '`ArbitraryNumberImputer()` will automatically select all numerical variables
    in the train set for imputation if we set the `variables` parameter to `None`.'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将 `variables` 参数设置为 `None`，`ArbitraryNumberImputer()` 将自动选择训练集中的所有数值变量进行填充。
- en: 'Finally, let’s replace the missing values with `99`:'
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，让我们将缺失值替换为 `99`：
- en: '[PRE64]'
  id: totrans-272
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: Note
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: '`注意`'
- en: 'To impute different variables with different numbers, set up `ArbitraryNumberImputer()`
    as follows: `ArbitraryNumberImputer(imputater_dict = {"A2": -1, "A3": -1, "A8":
    999, "``A11": 9999})`.'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: '要用不同的数字填充不同的变量，请按以下方式设置 `ArbitraryNumberImputer()`：`ArbitraryNumberImputer(imputer_dict
    = {"A2": -1, "A3": -1, "A8": 999, "``A11": 9999})`。'
- en: We have now replaced missing data with arbitrary numbers using three different
    open-source libraries.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经使用三个不同的开源库用任意数字替换了缺失数据。
- en: How it works...
  id: totrans-276
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In this recipe, we replaced missing values in numerical variables with an arbitrary
    number using `pandas`, `scikit-learn`, and `feature-engine`.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们使用 `pandas`、`scikit-learn` 和 `feature-engine` 用任意数字替换了数值变量中的缺失值。
- en: To determine which arbitrary value to use, we inspected the maximum values of
    four numerical variables using pandas’ `max()`. We chose `99` because it was greater
    than the maximum values of the selected variables. In *step 5*, we used `pandas`
    `fillna()` to replace the missing data.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确定使用哪个任意值，我们使用 pandas 的 `max()` 检查了四个数值变量的最大值。我们选择了 `99`，因为它大于所选变量的最大值。在 *步骤
    5* 中，我们使用 `pandas` 的 `fillna()` 替换了缺失数据。
- en: To replace missing values using `scikit-learn`, we utilized `SimpleImputer()`,
    with the `strategy` set to `constant`, and specified `99` in the `fill_value`
    argument. Next, we fitted the imputer to a slice of the train set with the numerical
    variables to impute. Finally, we replaced missing values using `transform()`.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 `scikit-learn` 替换缺失值，我们使用了 `SimpleImputer()`，将 `strategy` 设置为 `constant`，并在
    `fill_value` 参数中指定了 `99`。接下来，我们将填充器拟合到包含要填充的数值变量的训练集的一个子集。最后，我们使用 `transform()`
    替换了缺失值。
- en: To replace missing values with `feature-engine` we used `ArbitraryValueImputer()`,
    specifying the value `99` and the variables to impute as parameters. Next, we
    applied the `fit_transform()` method to replace missing data in the train set
    and the `transform()` method to replace missing data in the test set.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用`feature-engine`替换缺失值，我们使用了`ArbitraryValueImputer()`，指定值为`99`和要插补的变量作为参数。接下来，我们应用了`fit_transform()`方法来替换训练集中的缺失数据，以及`transform()`方法来替换测试集中的缺失数据。
- en: Finding extreme values for imputation
  id: totrans-281
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 寻找插补的极值
- en: Replacing missing values with a value at the end of the variable distribution
    (extreme values) is like replacing them with an arbitrary value, but instead of
    setting the arbitrary values manually, the values are automatically selected from
    the end of the variable distribution.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 用变量分布的末端值（极值）替换缺失值，就像用任意值替换一样，但不是手动设置任意值，而是自动从变量分布的末端选择值。
- en: We can replace missing data with a value that is greater or smaller than most
    values in the variable. To select a value that is greater, we can use the mean
    plus a factor of the standard deviation. Alternatively, we can set it to the 75th
    quantile + IQR × 1.5\. **IQR** stands for **inter-quartile range** and is the
    difference between the 75th and 25th quantile. To replace missing data with values
    that are smaller than the remaining values, we can use the mean minus a factor
    of the standard deviation, or the 25th quantile – IQR × 1.5.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以用一个大于变量中大多数值的值来替换缺失数据。为了选择一个较大的值，我们可以使用平均值加上标准差的因子。或者，我们可以将其设置为第75百分位数 +
    IQR × 1.5。**IQR**代表**四分位距**，是第75百分位数和第25百分位数之间的差。为了用小于剩余值的值替换缺失数据，我们可以使用平均值减去标准差的因子，或者第25百分位数
    – IQR × 1.5。
- en: Note
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: End-of-tail imputation may distort the distribution of the original variables,
    so it may not be suitable for linear models.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 尾部插补可能会扭曲原始变量的分布，因此可能不适合线性模型。
- en: In this recipe, we will implement end-of-tail or extreme value imputation using
    `pandas` and `feature-engine`.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将使用`pandas`和`feature-engine`实现尾部或极值插补。
- en: How to do it...
  id: totrans-287
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To begin this recipe, let’s import the necessary tools and load the data:'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始这个菜谱，让我们导入必要的工具并加载数据：
- en: 'Let’s import `pandas` and the required function and class:'
  id: totrans-289
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们导入`pandas`和所需的函数和类：
- en: '[PRE65]'
  id: totrans-290
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'Let’s load the dataset we described in the *Technical* *requirements* section:'
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们加载在*技术要求*部分描述的数据集：
- en: '[PRE66]'
  id: totrans-292
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'Let’s capture the numerical variables in a list, excluding the target:'
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们将数值变量放入一个列表中，排除目标变量：
- en: '[PRE67]'
  id: totrans-294
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'Let’s split the data into train and test sets, keeping only the numerical variables:'
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们将数据分为训练集和测试集，只保留数值变量：
- en: '[PRE68]'
  id: totrans-296
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'We’ll now determine the IQR:'
  id: totrans-297
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在将确定IQR：
- en: '[PRE69]'
  id: totrans-298
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'We can visualize the IQR values by executing `IQR` or `print(IQR)`:'
  id: totrans-299
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们可以通过执行`IQR`或`print(IQR)`来可视化IQR值：
- en: '[PRE70]'
  id: totrans-300
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'Let’s create a dictionary with the variable names and the imputation values:'
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们创建一个包含变量名称和插补值的字典：
- en: '[PRE71]'
  id: totrans-302
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE71]'
- en: Note
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: If we use the inter-quartile range proximity rule, we determine the imputation
    values by adding 1.5 times the IQR to the 75th quantile. If variables are normally
    distributed, we can calculate the imputation values as the mean plus a factor
    of the standard deviation, `imputation_dict = (X_train.mean() + 3 *` `X_train.std()).to_dict()`.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们使用四分位距邻近规则，我们将通过将1.5倍的IQR加到第75百分位数来确定插补值。如果变量呈正态分布，我们可以将插补值计算为平均值加上标准差的因子，`imputation_dict
    = (X_train.mean() + 3 * X_train.std()).to_dict()`。
- en: 'Finally, let’s replace the missing data:'
  id: totrans-305
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，让我们替换缺失数据：
- en: '[PRE72]'
  id: totrans-306
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE72]'
- en: Note
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: We can also replace missing data with values at the left tail of the distribution
    using `value = X_train[var].quantile(0.25) - 1.5 * IQR` or `value = X_train[var].mean()
    – 3 *` `X_train[var].std()`.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以使用分布左尾的值来替换缺失数据，使用`value = X_train[var].quantile(0.25) - 1.5 * IQR`或`value
    = X_train[var].mean() – 3 * X_train[var].std()`。
- en: To finish, let’s impute missing values using `feature-engine`.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们使用`feature-engine`来插补缺失值。
- en: 'Let’s set up `imputer` to estimate a value at the right of the distribution
    using the IQR proximity rule:'
  id: totrans-310
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们设置`imputer`来使用IQR邻近规则估计分布右侧的值：
- en: '[PRE73]'
  id: totrans-311
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE73]'
- en: Note
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: To use the mean and standard deviation to calculate the replacement values,
    set `imputation_method="Gaussian"`. Use `left` or `right` in the `tail` argument
    to specify the side of the distribution to consider when finding values for the
    imputation.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用平均值和标准差来计算替换值，设置`imputation_method="Gaussian"`。在`tail`参数中使用`left`或`right`来指定在寻找插补值时要考虑分布的哪一侧。
- en: 'Let’s fit `EndTailImputer()` to the train set so that it learns the values
    for the imputation:'
  id: totrans-314
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们将`EndTailImputer()`拟合到训练集，以便它学习填充的值：
- en: '[PRE74]'
  id: totrans-315
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'Let’s inspect the learned values:'
  id: totrans-316
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们检查学习到的值：
- en: '[PRE75]'
  id: totrans-317
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'The previous command returns a dictionary with the values to use to impute
    each variable:'
  id: totrans-318
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 之前的命令返回一个包含用于填充每个变量的值的字典：
- en: '[PRE76]'
  id: totrans-319
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'Finally, let’s replace the missing values:'
  id: totrans-320
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，让我们替换缺失值：
- en: '[PRE77]'
  id: totrans-321
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE77]'
- en: Remember that you can corroborate that the missing values were replaced by using
    `X_train[['A2','A3', 'A8', 'A11', '``A14', 'A15']].isnull().mean()`.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，你可以使用`X_train[['A2','A3', 'A8', 'A11', '``A14', 'A15']].isnull().mean()`来验证缺失值已被替换。
- en: How it works...
  id: totrans-323
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In this recipe, we replaced missing values in numerical variables with a number
    at the end of the distribution using `pandas` and `feature-engine`.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们使用`pandas`和`feature-engine`将数值变量中的缺失值替换为分布末尾的数字。
- en: We determined the imputation values according to the formulas described in the
    introduction to this recipe. We used pandas `quantile()` to find specific quantile
    values, or `pandas` `mean()` and `std()` for the mean and standard deviation.
    With pandas `fillna()` we replaced the missing values.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 我们根据本菜谱引言中描述的公式确定了填充值。我们使用pandas的`quantile()`找到特定的分位数值，或使用`pandas`的`mean()`和`std()`来计算均值和标准差。通过pandas的`fillna()`我们替换了缺失值。
- en: To replace missing values with `EndTailImputer()` from `feature-engine`, we
    set `distribution` to `iqr` to calculate the values based on the IQR proximity
    rule. With `tail` set to `right` the transformer found the imputation values from
    the right of the distribution. With `fit()`, the imputer learned and stored the
    values for the imputation in a dictionary in the `imputer_dict_` attribute. With
    `transform()`, we replaced the missing values, returning DataFrames.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用`feature-engine`中的`EndTailImputer()`替换缺失值，我们将`distribution`设置为`iqr`，根据IQR邻近规则计算值。将`tail`设置为`right`，转换器从分布的右侧找到填充值。通过`fit()`，填充器学习并存储在`imputer_dict_`属性中的字典中的填充值。通过`transform()`，我们替换了缺失值，返回DataFrame。
- en: Marking imputed values
  id: totrans-327
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 标记填充值
- en: In the previous recipes, we focused on replacing missing data with estimates
    of their values. In addition, we can add missing indicators to *mark* observations
    where values were missing.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的菜谱中，我们专注于用它们值的估计来替换缺失数据。此外，我们还可以添加缺失指标来*标记*值缺失的观测值。
- en: A missing indicator is a binary variable that takes the value `1` or `True`
    to indicate whether a value was missing, and `0` or `False` otherwise. It is common
    practice to replace missing observations with the mean, median, or most frequent
    category while simultaneously marking those missing observations with missing
    indicators. In this recipe, we will learn how to add missing indicators using
    `pandas`, `scikit-learn`, and `feature-engine`.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 缺失指标是一个二元变量，它取值为`1`或`True`以指示值是否缺失，否则为`0`或`False`。在将缺失观测值替换为均值、中位数或最频繁的类别的同时，用缺失指标标记这些缺失观测值是一种常见做法。在这个菜谱中，我们将学习如何使用`pandas`、`scikit-learn`和`feature-engine`添加缺失指标。
- en: How to do it...
  id: totrans-330
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Let’s begin by making some imports and loading the data:'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先进行一些导入和加载数据：
- en: 'Let’s import the required libraries, functions, and classes:'
  id: totrans-332
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们导入所需的库、函数和类：
- en: '[PRE78]'
  id: totrans-333
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'Let’s load and split the dataset described in the *Technical* *requirements*
    section:'
  id: totrans-334
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们加载并分割*技术要求*部分中描述的数据集：
- en: '[PRE79]'
  id: totrans-335
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'Let’s capture the variable names in a list:'
  id: totrans-336
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们将变量名捕获到一个列表中：
- en: '[PRE80]'
  id: totrans-337
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'Let’s create names for the missing indicators and store them in a list:'
  id: totrans-338
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们为缺失指标创建名称并将它们存储在一个列表中：
- en: '[PRE81]'
  id: totrans-339
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'If we execute `indicators`, we will see the names we will use for the new variables:
    `[''A1_na'', ''A3_na'', ''A4_na'', ''A5_na'', ''A6_na'', ''``A7_na'', ''A8_na'']`.'
  id: totrans-340
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果我们执行`indicators`，我们将看到用于新变量的名称：`['A1_na', 'A3_na', 'A4_na', 'A5_na', 'A6_na',
    '``A7_na', 'A8_na']`。
- en: 'Let’s make a copy of the original DataFrames:'
  id: totrans-341
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们复制原始的DataFrames：
- en: '[PRE82]'
  id: totrans-342
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'Let’s add the missing indicators:'
  id: totrans-343
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们添加缺失指标：
- en: '[PRE83]'
  id: totrans-344
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE83]'
- en: Note
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: If you want the indicators to have `True` and `False` as values instead of `0`
    and `1`, remove `astype(int)` in *step 6*.
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你希望指标以`True`和`False`作为值而不是`0`和`1`，请在*步骤 6*中移除`astype(int)`。
- en: 'Let’s inspect the resulting DataFrame:'
  id: totrans-347
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们检查生成的DataFrame：
- en: '[PRE84]'
  id: totrans-348
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'We can see the newly added variables at the right of the DataFrame in the following
    image:'
  id: totrans-349
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们可以在以下图像的DataFrame右侧看到新添加的变量：
- en: '![Figure 1.4 – DataFrame with the missing indicators](img/B22396_01_04.jpg)'
  id: totrans-350
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.4 – 带有缺失指标的DataFrame](img/B22396_01_04.jpg)'
- en: Figure 1.4 – DataFrame with the missing indicators
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.4 – 带有缺失指标的DataFrame
- en: Now, let’s add missing indicators using Feature-engine instead.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们使用 Feature-engine 添加缺失指示符。
- en: 'Set up the imputer to add binary indicators to every variable with missing
    data:'
  id: totrans-353
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置缺失值填充器，为每个有缺失数据的变量添加二进制指示符：
- en: '[PRE85]'
  id: totrans-354
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE85]'
- en: 'Fit the imputer to the train set so that it finds the variables with missing
    data:'
  id: totrans-355
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将填充器拟合到训练集，以便它找到有缺失数据的变量：
- en: '[PRE86]'
  id: totrans-356
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE86]'
- en: Note
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: If we execute `imputer.variables_`, we will find the variables for which missing
    indicators will be added.
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们执行 `imputer.variables_`，我们将找到需要添加缺失指示符的变量。
- en: 'Finally, let’s add the missing indicators:'
  id: totrans-359
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，让我们添加缺失指示符：
- en: '[PRE87]'
  id: totrans-360
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE87]'
- en: So far, we just added missing indicators. But we still have the missing data
    in our variables. We need to replace them with numbers. In the rest of this recipe,
    we will combine the use of missing indicators with mean and mode imputation.
  id: totrans-361
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 到目前为止，我们只是添加了缺失指示符。但我们的变量中仍然有缺失数据。我们需要用数字来替换它们。在本食谱的其余部分，我们将结合使用缺失指示符和均值以及众数填充。
- en: 'Let’s create a pipeline to add missing indicators to categorical and numerical
    variables, then impute categorical variables with the most frequent category,
    and numerical variables with the mean:'
  id: totrans-362
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们创建一个管道，将缺失指示符添加到分类和数值变量中，然后使用最频繁的类别填充分类变量，使用均值填充数值变量：
- en: '[PRE88]'
  id: totrans-363
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE88]'
- en: Note
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: '`feature-engine` imputers automatically identify numerical or categorical variables.
    So there is no need to slice the data or pass the variable names as arguments
    to the transformers in this case.'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: '`feature-engine` 缺失值填充器会自动识别数值或分类变量。因此，在这种情况下，无需切片数据或传递变量名作为参数给转换器。'
- en: 'Let’s add the indicators and impute missing values:'
  id: totrans-366
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们添加指示符并填充缺失值：
- en: '[PRE89]'
  id: totrans-367
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE89]'
- en: Note
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Use `X_train_t.isnull().sum()` to corroborate that there is no data missing.
    Execute `X_train_t.head()` to get a view of the resulting datafame.
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `X_train_t.isnull().sum()` 来证实没有数据缺失。执行 `X_train_t.head()` 来查看结果数据帧。
- en: Finally, let’s add missing indicators and simultaneously impute numerical and
    categorical variables with the mean and most frequent categories respectively,
    utilizing scikit-learn.
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们添加缺失指示符，并使用 scikit-learn 分别用均值和最频繁的类别来填充数值和分类变量。
- en: 'Let’s make a list with the names of the numerical and categorical variables:'
  id: totrans-371
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们列出数值变量和分类变量的名称：
- en: '[PRE90]'
  id: totrans-372
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE90]'
- en: 'Let’s set up a pipeline to perform mean and frequent category imputation while
    marking the missing data:'
  id: totrans-373
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们设置一个管道来执行均值和频繁类别填充，同时标记缺失数据：
- en: '[PRE91]'
  id: totrans-374
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE91]'
- en: 'Now, let’s carry out the imputation:'
  id: totrans-375
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们进行填充：
- en: '[PRE92]'
  id: totrans-376
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE92]'
- en: Make sure to explore `X_train_t.head()` to get familiar with the pipeline’s
    output.
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 确保探索 `X_train_t.head()` 以熟悉管道的输出。
- en: How it works...
  id: totrans-378
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: To add missing indicators using pandas, we used `isna()`, which created a new
    vector assigning the value of `True` if there was a missing value or `False` otherwise.
    We used `astype(int)` to convert the Boolean vectors into binary vectors with
    values `1` and `0`.
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 pandas 添加缺失指示符，我们使用了 `isna()`，它创建了一个新向量，如果存在缺失值则分配 `True` 的值，否则分配 `False`。我们使用了
    `astype(int)` 将布尔向量转换为具有值 `1` 和 `0` 的二进制向量。
- en: To add a missing indicator with `feature-engine`, we used `AddMissingIndicator()`.
    With `fit()` the transformer found the variables with missing data. With `transform()`
    it appended the missing indicators to the right of the train and test sets.
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 `feature-engine` 添加缺失指示符，我们使用了 `AddMissingIndicator()`。使用 `fit()` 方法，转换器找到了有缺失数据的变量。使用
    `transform()` 方法，它将缺失指示符追加到训练集和测试集的右侧。
- en: To sequentially add missing indicators and then replace the `nan` values with
    the most frequent category or the mean, we lined up Feature-engine’s `AddMissingIndicator()`,
    `CategoricalImputer()`, and `MeanMedianImputer()` within a `pipeline`. The `fit()`
    method from the `pipeline` made the transformers find the variables with `nan`
    and calculate the mean of the numerical variables and the mode of the categorical
    variables. The `transform()` method from the `pipeline` made the transformers
    add the missing indicators and then replace the missing values with their estimates.
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 为了顺序添加缺失指示符，然后用最频繁的类别或均值替换 `nan` 值，我们在 `pipeline` 中排列了 Feature-engine 的 `AddMissingIndicator()`、`CategoricalImputer()`
    和 `MeanMedianImputer()`。`pipeline` 的 `fit()` 方法使转换器找到 `nan` 变量，并计算数值变量的均值和分类变量的众数。`pipeline`
    的 `transform()` 方法使转换器添加缺失指示符，然后用估计值替换缺失值。
- en: Note
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Feature-engine transformations return DataFrames respecting the original names
    and order of the variables. Scikit-learn’s `ColumnTransformer()`, on the other
    hand, changes the variable’s names and order in the resulting data.
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 特征工程转换返回的 DataFrame 保留了变量的原始名称和顺序。另一方面，Scikit-learn 的 `ColumnTransformer()`
    会改变结果数据中变量的名称和顺序。
- en: Finally, we added missing indicators and replaced missing data with the mean
    and most frequent category using `scikit-learn`. We lined up two instances of
    `SimpleImputer()`, the first to impute data with the mean and the second to impute
    data with the most frequent category. In both cases, we set the `add_indicator`
    parameter to `True` to add the missing indicators. We wrapped `SimpleImputer()`
    with `ColumnTransformer()` to specifically modify numerical or categorical variables.
    Then we used the `fit()` and `transform()` methods from the `pipeline` to train
    the transformers and then add the indicators and replace the missing data.
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们添加了缺失指示符，并使用 `scikit-learn` 将缺失数据替换为平均值和最频繁的类别。我们排列了两个 `SimpleImputer()`
    实例，第一个用于用平均值插补数据，第二个用于用最频繁的类别插补数据。在这两种情况下，我们将 `add_indicator` 参数设置为 `True` 以添加缺失指示符。我们用
    `ColumnTransformer()` 包装 `SimpleImputer()` 以专门修改数值或分类变量。然后我们使用 `pipeline` 中的 `fit()`
    和 `transform()` 方法来训练转换器，然后添加指示符并替换缺失数据。
- en: When returning DataFrames, `ColumnTransformer()` changes the names of the variables
    and their order. Take a look at the result from *step 15* by executing `X_train_t.head()`.
    You’ll see that the name given to each step of the pipeline is added as a prefix
    to the variables to flag which variable was modified with each transformer. Then,
    `num_imputer__A2` was returned by the first step of the pipeline, while `cat_imputer__A12`
    was returned by the second step of the pipeline.
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 当返回 DataFrame 时，`ColumnTransformer()` 会改变变量的名称和顺序。通过执行 `X_train_t.head()` 来查看
    *步骤 15* 的结果。你会看到，将每个步骤的名称添加为前缀到变量中，以标记每个转换器修改了哪个变量。然后，`num_imputer__A2` 由管道的第一个步骤返回，而
    `cat_imputer__A12` 由管道的第二个步骤返回。
- en: There’s more…
  id: totrans-386
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'Scikit-learn has the `MissingIndicator()` transformer that just adds missing
    indicators. Check it out in the documentation: [https://scikit-learn.org/stable/modules/generated/sklearn.impute.MissingIndicator.html](https://scikit-learn.org/stable/modules/generated/sklearn.impute.MissingIndicator.html)
    and find an example in the accompanying GitHub repository at [https://github.com/PacktPublishing/Python-Feature-engineering-Cookbook-Third-Edition/blob/main/ch01-missing-data-imputation/Recipe-06-Marking-imputed-values.ipynb](https://github.com/PacktPublishing/Python-Feature-engineering-Cookbook-Third-Edition/blob/main/ch01-missing-data-imputation/Recipe-06-Marking-imputed-values.ipynb).'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: Scikit-learn 包含一个名为 `MissingIndicator()` 的转换器，它仅添加缺失指示符。请在文档中查看相关信息：[https://scikit-learn.org/stable/modules/generated/sklearn.impute.MissingIndicator.html](https://scikit-learn.org/stable/modules/generated/sklearn.impute.MissingIndicator.html)，并在配套的
    GitHub 仓库中找到一个示例：[https://github.com/PacktPublishing/Python-Feature-engineering-Cookbook-Third-Edition/blob/main/ch01-missing-data-imputation/Recipe-06-Marking-imputed-values.ipynb](https://github.com/PacktPublishing/Python-Feature-engineering-Cookbook-Third-Edition/blob/main/ch01-missing-data-imputation/Recipe-06-Marking-imputed-values.ipynb)。
- en: Implementing forward and backward fill
  id: totrans-388
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现前向和后向填充
- en: Time series data also show missing values. To impute missing data in time series,
    we use specific methods. Forward fill imputation involves filling missing values
    in a dataset with the most recent non-missing value that precedes it in the data
    sequence. In other words, we carry forward the last seen value to the next valid
    value. Backward fill imputation involves filling missing values with the next
    non-missing value that follows it in the data sequence. In other words, we carry
    the last valid value backward to its preceding valid value.
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 时间序列数据也会显示缺失值。要在时间序列中插补缺失数据，我们使用特定的方法。前向填充插补涉及在数据序列中用最接近的前一个非缺失值填充数据集中的缺失值。换句话说，我们将最后看到的值向前传递到下一个有效值。后向填充插补涉及用数据序列中跟随它的下一个非缺失值填充缺失值。换句话说，我们将最后一个有效值向后传递到其前面的有效值。
- en: In this recipe, we will replace missing data in a time series with forward and
    backward fills.
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将使用前向和后向填充替换时间序列中的缺失数据。
- en: How to do it...
  id: totrans-391
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现...
- en: 'Let’s begin by importing the required libraries and time series dataset:'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先导入所需的库和时间序列数据集：
- en: 'Let’s import `pandas` and `matplotlib`:'
  id: totrans-393
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们导入 `pandas` 和 `matplotlib`：
- en: '[PRE93]'
  id: totrans-394
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE93]'
- en: 'Let’s load the air passengers dataset that we described in the *Technical requirements*
    section and display the first five rows of the time series:'
  id: totrans-395
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们加载我们在 *技术要求* 部分描述的航空乘客数据集，并显示时序的前五行：
- en: '[PRE94]'
  id: totrans-396
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE94]'
- en: 'We see the time series in the following output:'
  id: totrans-397
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们在以下输出中看到时序：
- en: '[PRE95]'
  id: totrans-398
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE95]'
- en: Note
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: You can determine the percentage of missing data by executing `df.isnull().mean()`.
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过执行 `df.isnull().mean()` 来确定缺失数据的百分比。
- en: 'Let’s plot the time series to spot any obvious data gaps:'
  id: totrans-401
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们绘制时序图以查找任何明显的数据间隙：
- en: '[PRE96]'
  id: totrans-402
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE96]'
- en: 'The previous code returns the following plot, where we see intervals of time
    where data is missing:'
  id: totrans-403
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 之前的代码返回以下图表，其中我们看到数据缺失的时间间隔：
- en: '![Figure 1.5 – Time series data showing missing values](img/B22396_01_05.jpg)'
  id: totrans-404
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.5 – 显示缺失值的时序数据](img/B22396_01_05.jpg)'
- en: Figure 1.5 – Time series data showing missing values
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.5 – 显示缺失值的时序数据
- en: 'Let’s impute missing data by carrying the last observed value in any interval
    to the next valid value:'
  id: totrans-406
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们通过将任何区间中最后观测到的值携带到下一个有效值来插补缺失数据：
- en: '[PRE97]'
  id: totrans-407
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE97]'
- en: You can verify the absence of missing data by executing `df_imputed.isnull().sum()`.
  id: totrans-408
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你可以通过执行 `df_imputed.isnull().sum()` 来验证缺失数据的缺失。
- en: 'Let’s now plot the complete dataset and overlay as a dotted line the values
    used for the imputation:'
  id: totrans-409
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们绘制完整的数据集，并将用于插补的值以虚线形式叠加：
- en: '[PRE98]'
  id: totrans-410
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE98]'
- en: 'The previous code returns the following plot, where we see the values used
    to replace `nan` as dotted lines overlaid in between the continuous time series
    lines:'
  id: totrans-411
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 之前的代码返回以下图表，其中我们看到用于替换 `nan` 的值作为连续时序线之间的虚线叠加：
- en: '![Figure 1.6 – Time series data where missing values were replaced by the last
    seen observations (dotted line)](img/B22396_01_06.jpg)'
  id: totrans-412
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.6 – 缺失值被最后观测到的值替换的时序数据（虚线）](img/B22396_01_06.jpg)'
- en: Figure 1.6 – Time series data where missing values were replaced by the last
    seen observations (dotted line)
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.6 – 缺失值被最后观测到的值替换的时序数据（虚线）
- en: 'Alternatively, we can impute missing data using backward fill:'
  id: totrans-414
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 或者，我们可以使用后向填充来插补缺失数据：
- en: '[PRE99]'
  id: totrans-415
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE99]'
- en: 'If we plot the imputed dataset and overlay the imputation values as we did
    in *step 5*, we’ll see the following plot:'
  id: totrans-416
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果我们绘制插补数据集，并像在 *步骤 5* 中那样叠加插补值，我们将看到以下图表：
- en: '![Figure 1.7 – Time series data where missing values were replaced by backward
    fill (dotted line)](img/B22396_01_07.jpg)'
  id: totrans-417
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.7 – 缺失值被后向填充替换的时序数据（虚线）](img/B22396_01_07.jpg)'
- en: Figure 1.7 – Time series data where missing values were replaced by backward
    fill (dotted line)
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.7 – 缺失值被后向填充替换的时序数据（虚线）
- en: Note
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The heights of the values used in the imputation are different in *Figures 1.6
    and 1.7*. In *Figure 1**.6*, we carry the last value forward, hence the height
    is lower. In *Figure 1**.7*, we carry the next value backward, hence the height
    is higher.
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 用于插补的值的高度在 *图 1.6 和 1.7* 中不同。在 *图 1.6* 中，我们向前携带最后一个值，因此高度较低。在 *图 1.7* 中，我们向后携带下一个值，因此高度较高。
- en: We’ve now obtained complete datasets that we can use for time series analysis
    and modeling.
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经获得了完整的数据集，我们可以用它来进行时序分析和建模。
- en: How it works...
  id: totrans-422
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: '`pandas` `ffill()` takes the last seen value in any temporal gap in a time
    series and propagates it forward to the next observed value. Hence, in *Figure
    1**.6* we see the dotted overlay corresponding to the imputation values at the
    height of the last seen observation.'
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: '`pandas` 的 `ffill()` 在时序中的任何时间间隙中取最后观测到的值，并将其传播到下一个观测值。因此，在 *图 1*.6 中，我们看到与最后观测值高度对应的插补值虚线叠加。'
- en: '`pandas` `bfill()` takes the next valid value in any temporal gap in a time
    series and propagates it backward to the previously observed value. Hence, in
    *Figure 1**.7* we see the dotted overlay corresponding to the imputation values
    at the height of the next observation in the gap.'
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: '`pandas` 的 `bfill()` 在时序中的任何时间间隙中取下一个有效值，并将其传播到之前观测到的值。因此，在 *图 1*.7 中，我们看到与间隙中下一个观测值高度对应的插补值虚线叠加。'
- en: By default, `ffill()` and `bfill()` will impute all values between valid observations.
    We can restrict the imputation to a maximum number of data points in any interval
    by setting a limit, using the `limit` parameter in both methods. For example,
    `ffill(limit=10)` will only replace the first 10 data points in any gap.
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`ffill()` 和 `bfill()` 将在有效观测值之间插补所有值。我们可以通过设置一个限制，使用两种方法中的 `limit` 参数来限制任何区间内的数据点数量。例如，`ffill(limit=10)`
    将只替换任何间隙中的前 10 个数据点。
- en: Carrying out interpolation
  id: totrans-426
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行插值
- en: We can impute missing data in time series by using interpolation between two
    non-missing data points. Interpolation is the estimation of one or more values
    in a range by means of a function. In linear interpolation, we fit a linear function
    between the last observed value and the next valid point. In spline interpolation,
    we fit a low-degree polynomial between the last and next observed values. The
    idea of using interpolation is to obtain better estimates of the missing data.
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过在两个非缺失数据点之间进行插值来对时间序列中的缺失数据进行插补。插值是通过函数估计一个或多个值在范围内的方法。在线性插值中，我们在最后一个观测值和下一个有效点之间拟合一个线性函数。在样条插值中，我们在最后一个和下一个观测值之间拟合一个低度多项式。使用插值的想法是获得更好的缺失数据估计。
- en: In this recipe, we’ll carry out linear and spline interpolation in a time series.
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将在一个时间序列中执行线性插值和样条插值。
- en: How to do it...
  id: totrans-429
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: Let’s begin by importing the required libraries and time series dataset.
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先导入所需的库和时间序列数据集。
- en: 'Let’s import `pandas` and `matplotlib`:'
  id: totrans-431
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们导入 `pandas` 和 `matplotlib`：
- en: '[PRE100]'
  id: totrans-432
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE100]'
- en: 'Let’s load the time series data described in the *Technical* *requirements*
    section:'
  id: totrans-433
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们加载在 *技术要求* 部分描述的时间序列数据：
- en: '[PRE101]'
  id: totrans-434
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE101]'
- en: Note
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: You can plot the time series to find data gaps as we did in *step 3* of the
    *Implementing forward and backward* *fill* recipe.
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以绘制时间序列以找到数据缺口，就像我们在 *实现前向和后向填充* 菜谱的 *步骤3* 中所做的那样。
- en: 'Let’s impute the missing data by linear interpolation:'
  id: totrans-437
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们通过线性插值来插补缺失数据：
- en: '[PRE102]'
  id: totrans-438
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE102]'
- en: Note
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: If the time intervals between rows are not uniform then the `method` should
    be set to `time` to achieve a linear fit.
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: 如果行之间的时间间隔不均匀，则应将 `method` 设置为 `time` 以实现线性拟合。
- en: You can verify the absence of missing data by executing `df_imputed.isnull().sum()`.
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过执行 `df_imputed.isnull().sum()` 来验证缺失数据的缺失。
- en: 'Let’s now plot the complete dataset and overlay as a dotted line the values
    used for the imputation:'
  id: totrans-442
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们现在绘制完整数据集，并将用于插补的值作为虚线叠加：
- en: '[PRE103]'
  id: totrans-443
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE103]'
- en: 'The previous code returns the following plot, where we see the values used
    to replace `nan` as dotted lines in between the continuous line of the time series:'
  id: totrans-444
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 之前的代码返回以下图表，其中我们可以看到用于替换 `nan` 的值作为时间序列连续线之间的虚线：
- en: '![Figure 1.8 – Time series data where missing values were replaced by linear
    interpolation between the last and next valid data points (dotted line)](img/B22396_01_08.jpg)'
  id: totrans-445
  prefs: []
  type: TYPE_IMG
  zh: '![图1.8 – 通过在最后和下一个有效数据点之间进行线性插值替换缺失值的时间序列数据（虚线）](img/B22396_01_08.jpg)'
- en: Figure 1.8 – Time series data where missing values were replaced by linear interpolation
    between the last and next valid data points (dotted line)
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.8 – 通过在最后和下一个有效数据点之间进行线性插值替换缺失值的时间序列数据（虚线）
- en: 'Alternatively, we can impute missing data by doing spline interpolation. We’ll
    use a polynomial of the second degree:'
  id: totrans-447
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 或者，我们可以通过进行样条插值来插补缺失数据。我们将使用二次多项式：
- en: '[PRE104]'
  id: totrans-448
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE104]'
- en: 'If we plot the imputed dataset and overlay the imputation values as we did
    in *step 4*, we’ll see the following plot:'
  id: totrans-449
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果我们绘制插补数据集，并像在 *步骤4* 中那样叠加插补值，我们将看到以下图表：
- en: '![Figure 1.9 – Time series data where missing values were replaced by fitting
    a second-degree polynomial between the last and next valid data points (dotted
    line)](img/B22396_01_09.jpg)'
  id: totrans-450
  prefs: []
  type: TYPE_IMG
  zh: '![图1.9 – 通过在最后和下一个有效数据点之间拟合二次多项式替换缺失值的时间序列数据（虚线）](img/B22396_01_09.jpg)'
- en: Figure 1.9 – Time series data where missing values were replaced by fitting
    a second-degree polynomial between the last and next valid data points (dotted
    line)
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.9 – 通过在最后和下一个有效数据点之间拟合二次多项式替换缺失值的时间序列数据（虚线）
- en: Note
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Change the degree of the polynomial used in the interpolation to see how the
    replacement values vary.
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: 改变用于插值的二次多项式的度数，以查看替换值的变化。
- en: We’ve now obtained complete datasets that we can use for analysis and modeling.
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经获得了可以用于分析和建模的完整数据集。
- en: How it works...
  id: totrans-455
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: '`pandas` `interpolate()` fills missing values in a range by using an interpolation
    method. When we set the `method` to `linear`, `interpolate()` treats all data
    points as equidistant and fits a line between the last and next valid points in
    an interval with missing data.'
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: '`pandas` 的 `interpolate()` 方法通过使用插值方法在范围内填充缺失值。当我们设置 `method` 为 `linear` 时，`interpolate()`
    将所有数据点视为等距，并在缺失数据的区间内拟合一条线，连接最后一个和下一个有效点。'
- en: Note
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: If you want to perform linear interpolation, but your data points are not equally
    distanced, set `method` to `time`.
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要执行线性插值，但你的数据点不是等距的，请将 `method` 设置为 `time`。
- en: We then performed spline interpolation with a second-degree polynomial by setting
    `method` to `spline` and `order` to `2`.
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们通过将`method`设置为`spline`和`order`设置为`2`，使用二次多项式进行样条插值。
- en: '`pandas` `interpolate()` uses `scipy.interpolate.interp1d` and `scipy.interpolate.UnivariateSpline`
    under the hood, and can therefore implement other interpolation methods. Check
    out pandas documentation for more details at [https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.interpolate.html](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.interpolate.html).'
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: '`pandas`的`interpolate()`在内部使用`scipy.interpolate.interp1d`和`scipy.interpolate.UnivariateSpline`，因此可以实现其他插值方法。有关更多详细信息，请查看pandas文档，链接为[https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.interpolate.html](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.interpolate.html)。'
- en: See also
  id: totrans-461
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: While interpolation aims to get better estimates of the missing data compared
    to forward and backward fill, these estimates may still not be accurate if the
    times series show strong trend and seasonality. To obtain better estimates of
    the missing data in these types of time series, check out time series decomposition
    followed by interpolation in the *Feature Engineering for Time Series Course*
    at [https://www.trainindata.com/p/feature-engineering-for-forecasting](https://www.trainindata.com/p/feature-engineering-for-forecasting).
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然插值旨在比前向填充和后向填充获得更好的缺失数据估计，但如果时间序列显示出强烈的趋势和季节性，这些估计可能仍然不准确。为了获得这些类型时间序列中缺失数据的更好估计，请查看在[https://www.trainindata.com/p/feature-engineering-for-forecasting](https://www.trainindata.com/p/feature-engineering-for-forecasting)的*时间序列特征工程课程*中关于时间序列分解后插值的说明。
- en: Performing multivariate imputation by chained equations
  id: totrans-463
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过链式方程进行多变量插补
- en: Multivariate imputation methods, as opposed to univariate imputation, use multiple
    variables to estimate the missing values. **Multivariate Imputation by Chained
    Equations** (**MICE**) models each variable with missing values as a function
    of the remaining variables in the dataset. The output of that function is used
    to replace missing data.
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: 与单变量插补不同，多变量插补方法使用多个变量来估计缺失值。**链式方程多变量插补**（**MICE**）将每个有缺失值的变量建模为数据集中剩余变量的函数。该函数的输出用于替换缺失数据。
- en: 'MICE involves the following steps:'
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: MICE包括以下步骤：
- en: First, it performs a simple univariate imputation to every variable with missing
    data. For example, median imputation.
  id: totrans-466
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，它对每个有缺失数据的变量执行简单的单变量插补。例如，中位数插补。
- en: Next, it selects one specific variable, say, `var_1`, and sets the missing values
    back to missing.
  id: totrans-467
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，它选择一个特定的变量，比如`var_1`，并将缺失值重新设置为缺失。
- en: It trains a model to predict `var_1` using the other variables as input features.
  id: totrans-468
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它训练一个模型，使用其他变量作为输入特征来预测`var_1`。
- en: Finally, it replaces the missing values of `var_1` with the output of the model.
  id: totrans-469
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，它用模型的输出替换`var_1`的缺失值。
- en: MICE repeats *steps 2* to *4* for each of the remaining variables.
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: MICE对剩余的每个变量重复*步骤2*到*4*。
- en: An imputation cycle concludes once all the variables have been modeled. MICE
    carries out multiple imputation cycles, typically 10\. That is, we repeat *steps
    2* to *4* for each variable 10 times. The idea is that by the end of the cycles,
    we should have found the best possible estimates of the missing data for each
    variable.
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: 当所有变量都已建模时，一个插补周期结束。MICE执行多个插补周期，通常是10次。也就是说，我们对每个变量重复*步骤2*到*4*共10次。其想法是，到周期结束时，我们应该找到了每个变量的最佳可能缺失数据估计。
- en: Note
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Multivariate imputation can be a useful alternative to univariate imputation
    in situations where we don’t want to distort the variable distributions. Multivariate
    imputation is also useful when we are interested in having good estimates of the
    missing data.
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: 多变量插补在不想扭曲变量分布的情况下，可以作为一个有用的替代单变量插补的方法。当我们对拥有良好估计的缺失数据感兴趣时，多变量插补也非常有用。
- en: In this recipe, we will implement MICE using scikit-learn.
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将使用scikit-learn实现MICE。
- en: How to do it...
  id: totrans-475
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To begin the recipe, let’s import the required libraries and load the data:'
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始这个菜谱，让我们导入所需的库并加载数据：
- en: 'Let’s import the required Python libraries, classes, and functions:'
  id: totrans-477
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们导入所需的Python库、类和函数：
- en: '[PRE105]'
  id: totrans-478
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE105]'
- en: 'Let’s load some numerical variables from the dataset described in the *Technical*
    *requirements* section:'
  id: totrans-479
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们从*技术要求*部分描述的数据集中加载一些数值变量：
- en: '[PRE106]'
  id: totrans-480
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE106]'
- en: 'Let’s divide the data into train and test sets:'
  id: totrans-481
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们将数据分为训练集和测试集：
- en: '[PRE107]'
  id: totrans-482
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE107]'
- en: 'Let’s create a MICE imputer using Bayes regression, specifying the number of
    iteration cycles and setting `random_state` for reproducibility:'
  id: totrans-483
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE108]'
  id: totrans-484
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE108]'
- en: Note
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
- en: '`IterativeImputer()` contains other useful arguments. For example, we can specify
    the first imputation strategy using the `initial_strategy` parameter. We can choose
    from the mean, median, mode, or arbitrary imputation. We can also specify how
    we want to cycle over the variables, either randomly or from the one with the
    fewest missing values to the one with the most.'
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s fit `IterativeImputer()` so that it trains the estimators to predict
    the missing values in each variable:'
  id: totrans-487
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE109]'
  id: totrans-488
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE109]'
- en: Note
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
- en: We can use any regression model to estimate the missing data with `IterativeImputer()`.
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, let’s fill in the missing values in both the train and test sets:'
  id: totrans-491
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE110]'
  id: totrans-492
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE110]'
- en: Note
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
- en: To corroborate the lack of missing data, we can execute `X_train_t.isnull().sum()`.
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
- en: To wrap up the recipe, let’s impute the variables with a simple univariate imputation
    method and compare the effect on the variables’ distribution.
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s set up scikit-learn’s `SimpleImputer()` to perform mean imputation, and
    then transform the datasets:'
  id: totrans-496
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE111]'
  id: totrans-497
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE111]'
- en: 'Let’s now make a histogram of the `A3` variable after MICE imputation, followed
    by a histogram of the same variable after mean imputation:'
  id: totrans-498
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE112]'
  id: totrans-499
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE112]'
- en: 'In the following plot, we see that mean imputation distorts the variable distribution,
    with more observations toward the mean value:'
  id: totrans-500
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 1.10 –  Histogram of variable A3 after mice imputation (top) or mean
    imputation (bottom), showing the distortion in the variable distribution caused
    by the latter](img/B22396_01_10.jpg)'
  id: totrans-501
  prefs: []
  type: TYPE_IMG
- en: Figure 1.10 – Histogram of variable A3 after mice imputation (top) or mean imputation
    (bottom), showing the distortion in the variable distribution caused by the latter
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-503
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we performed multivariate imputation using `IterativeImputer()`
    from `scikit-learn`. When we fit the model, `IterativeImputer()` carried out the
    steps that we described in the introduction of the recipe. That is, it imputed
    all variables with the mean. Then it selected one variable and set its missing
    values back to missing. And finally, it fitted a Bayes regressor to estimate that
    variable based on the others. It repeated this procedure for each variable. That
    was one cycle of imputation. We set it to repeat this process 10 times. By the
    end of this procedure, `IterativeImputer()` had one Bayes regressor trained to
    predict the values of each variable based on the other variables in the dataset.
    With `transform()`, it uses the predictions of these Bayes models to impute the
    missing data.
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
- en: '`IterativeImputer()` can only impute missing data in numerical variables based
    on numerical variables. If you want to use categorical variables as input, you
    need to encode them first. However, keep in mind that it will only carry out regression.
    Hence it is not suitable to estimate missing data in discrete or categorical variables.'
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-506
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To learn more about MICE, take a look at the following resources:'
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
- en: 'A multivariate technique for multiplying imputing missing values using a sequence
    of regression models: [https://www.researchgate.net/publication/244959137](https://www.researchgate.net/publication/244959137_A_Multivariate_Technique_for_Multiply_Imputing_Missing_Values_Using_a_Sequence_of_Regression_Models)'
  id: totrans-508
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Multiple Imputation by Chained Equations: What is it and how does it* *work?*:
    [https://www.jstatsoft.org/article/download/v045i03/550](https://www.jstatsoft.org/article/download/v045i03/550)'
  id: totrans-509
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Estimating missing data with nearest neighbors
  id: totrans-510
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Imputation with **K-Nearest Neighbors** (**KNN**) involves estimating missing
    values in a dataset by considering the values of their nearest neighbors, where
    similarity between data points is determined based on a distance metric, such
    as the Euclidean distance. It assigns the missing value the average of the nearest
    neighbors’ values, weighted by their distance.
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
- en: Consider the following data set containing 4 variables (columns) and 11 observations
    (rows). We want to impute the dark value in the fifth row of the second variable.
    First, we find the row’s k-nearest neighbors, where *k=3* in our example, and
    they are highlighted by the rectangular boxes (middle panel). Next, we take the
    average value shown by the closest neighbors for variable 2.
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.11 – Diagram showing a value to impute (dark box), the three closest
    rows to the value to impute (square boxes), and the values considered to take
    the average for the imputation](img/B22396_01_11.jpg)'
  id: totrans-513
  prefs: []
  type: TYPE_IMG
- en: Figure 1.11 – Diagram showing a value to impute (dark box), the three closest
    rows to the value to impute (square boxes), and the values considered to take
    the average for the imputation
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
- en: The value for the imputation is given by (value1 × w1 + value2 × w2 + value3
    × w3) / 3, where w1, w2, and w3 are proportional to the distance of the neighbor
    to the data to impute.
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will perform KNN imputation using scikit-learn.
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-517
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To proceed with the recipe, let’s import the required libraries and prepare
    the data:'
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s import the required libraries, classes, and functions:'
  id: totrans-519
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE113]'
  id: totrans-520
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE113]'
- en: 'Let’s load the dataset described in the *Technical requirements* section (only
    some numerical variables):'
  id: totrans-521
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE114]'
  id: totrans-522
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE114]'
- en: 'Let’s divide the data into train and test sets:'
  id: totrans-523
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE115]'
  id: totrans-524
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE115]'
- en: 'Let’s set up the imputer to replace missing data with the weighted mean of
    its closest five neighbors:'
  id: totrans-525
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE116]'
  id: totrans-526
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE116]'
- en: Note
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
- en: The replacement values can be calculated as the uniform mean of the k-nearest
    neighbors, by setting `weights` to `uniform` or as the weighted average, as we
    do in the recipe. The weight is based on the distance of the neighbor to the observation
    to impute. The nearest neighbors carry more weight.
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
- en: 'Find the nearest neighbors:'
  id: totrans-529
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE117]'
  id: totrans-530
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE117]'
- en: 'Replace the missing values with the weighted mean of the values shown by the
    neighbors:'
  id: totrans-531
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE118]'
  id: totrans-532
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE118]'
- en: The result is a pandas DataFrame with the missing data replaced.
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-534
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we replaced missing data with the average value shown by each
    observation’s k-nearest neighbors. We set up `KNNImputer()` to find each observation’s
    five closest neighbors based on the Euclidean distance. The replacement values
    were estimated as the weighted average of the values shown by the five closest
    neighbors for the variable to impute. With `transform()`, the imputer calculated
    the replacement value and replaced the missing data.
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个方法中，我们用每个观测值的k个最近邻的平均值替换了缺失数据。我们设置了`KNNImputer()`来根据欧几里得距离找到每个观测值的五个最近邻。替换值被估计为要插补的变量五个最近邻显示的值的加权平均值。通过`transform()`方法，插补器计算了替换值并替换了缺失数据。
