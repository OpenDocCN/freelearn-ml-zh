["```py\n    from sagemaker.tensorflow import TensorFlow\n    tf_estimator = TensorFlow(\n      entry_point=\"<Training script name>\",\n      role= \"<AWS IAM role>\",\n      instance_count=<Number of instances),\n      instance_type=\"<Instance type>\",\n      framework_version=\"<TensorFlow version>\",\n      py_version=\"<Python version>\",)\n    tf_estimator.fit(\"<Training data location>\") \n    ```", "```py\n    from sagemaker.pytorch import PyTorch\n    pytorch_estimator = PyTorch(\n      entry_point=\"<Training script name>\",\n      role= \"<AWS IAM role>\",\n      instance_count=<Number of instances),\n      instance_type=\"<Instance type>\",\n      framework_version=\"<PyTorch version>\",\n      py_version=\"<Python version>\",)\n    pytorch_estimator.fit(\"<Training data location>\") \n    ```", "```py\n    from sagemaker.xgboost.estimator import XGBoost\n    xgb_estimator = XGBoost(\n      entry_point=\"<Training script name>\",\n      hyperparameters=<dictionary of hyperparameters>,\n      role=<AWS IAM role>,\n      instance_count=<Number of instances>,\n      instance_type=\"<Instance type>\",\n      framework_version=\"<Xgboost version>\")\n    xgb_estimator.fit(\"<train data location>\") \n    ```", "```py\n    from sagemaker.sklearn.estimator import SKLearn\n    sklearn_estimator = SKLearn(\n      entry_point=\"<Training script name>\",\n      hyperparameters=<dictionary of hyperparameters>,\n      role=<AWS IAM role>,\n      instance_count=<Number of instances>,\n      instance_type=\"<Instance type>\",\n         framework_version=\"<sklearn version>\")\n    Sklearn_estimator.fit(\"<training data>\") \n    ```", "```py\n    from sagemaker.estimator import Estimator\n    custom_estimator = Estimator (\n      image_uri=\"<custom model inference container image uri>\"\n      role=<AWS IAM role>,\n      instance_count=<Number of instances>,\n      instance_type=\"<Instance type>\")\n    custom_estimator.fit(\"<training data location>\") \n    ```", "```py\nimport boto3\nclient = boto3.client('sagemaker')\nresponse = client.create_training_job(\n    TrainingJobName='<job name>',\n    HyperParameters={<list of parameters and value>},\n    AlgorithmSpecification={...},\n    RoleArn='<AWS IAM Role>',\n    InputDataConfig=[...],\n    OutputDataConfig={...},\n    ResourceConfig={...},\n    ...\n} \n```", "```py\nimport airflow\nfrom airflow import DAG\nfrom airflow.contrib.operators.sagemaker_training_operator import SageMakerTrainingOperator\ndefault_args = {\n    'owner': 'myflow',\n    'start_date': '2021-01-01'\n}\ndag = DAG('tensorflow_training', default_args=default_args,\n          schedule_interval='@once')\ntrain_op = SageMakerTrainingOperator(\n    task_id='tf_training',\n    config=train_config,\n    wait_for_completion=True,\n    dag=dag) \n```", "```py\n    from sagemaker.tensorflow.serving import Model\n    tensorflow_model = Model(\n        model_data=<S3 location of the TF ML model artifacts>,\n        role=<AWS IAM role>,\n       framework_version=<tensorflow version>\n    )\n    tensorflow_model.deploy(\n      initial_instance_count=<instance count>, instance_type=<instance type>\n    ) \n    ```", "```py\n    from sagemaker.pytorch.model import PyTorchModel\n    pytorch_model = PyTorchModel(\n        model_data=<S3 location of the PyTorch model artifacts>,\n        role=<AWS IAM role>,\n        framework_version=<PyTorch version>\n    )\n    pytorch_model.deploy(\n        initial_instance_count=<instance count>, instance_type=<instance type>\n    ) \n    ```", "```py\n    import sagemaker\n    from sagemaker.sparkml.model import SparkMLModel\n    sparkml_model = SparkMLModel(\n        model_data=<S3 location of the Spark ML model artifacts>,\n        role=<AWS IAM role>,\n        sagemaker_session=sagemaker.Session(),\n        name=<Model name>,\n        env={\"SAGEMAKER_SPARKML_SCHEMA\": <schema_json>}\n    )\n    sparkml_model.deploy(\n        initial_instance_count=<instance count>, instance_type=<instance type>\n    ) \n    ```", "```py\n    from sagemaker.xgboost.model import XGBoostModel\n    xgboost_model = XGBoostModel(\n        model_data=<S3 location of the Xgboost ML model artifacts>,\n        role=<AWS IAM role>,\n        entry_point=<entry python script>,\n        framework_version=<xgboost version>\n    )\n    xgboost_model.deploy(\n        instance_type=<instance type>,\n        initial_instance_count=<instance count>\n    ) \n    ```", "```py\n    from sagemaker.sklearn.model import SKLearnModel\n    sklearn_model = SKLearnModel(\n        model_data=<S3 location of the Xgboost ML model artifacts>,\n        role=<AWS IAM role>,\n        entry_point=<entry python script>,\n        framework_version=<scikit-learn version>\n    )\n    sklearn_model.deploy(instance_type=<instance type>, initial_instance_count=<instance count>) \n    ```", "```py\n    from sagemaker.model import Model\n    custom_model = Model(\n        Image_uri = <custom model inference container image uri>,\n        model_data=<S3 location of the ML model artifacts>,\n        role=<AWS IAM role>,\n        framework_version=<scikit-learn version>\n    )\n    custom_model.deploy(instance_type=<instance type>, initial_instance_count=<instance count>) \n    ```", "```py\n    Description: \"Model hosting cloudformation template\"\n    Resources:\n    Endpoint:\n    Type: \"AWS::SageMaker::Endpoint\"\n    Properties:\n    EndpointConfigName:\n    !GetAtt EndpointConfig.EndpointConfigName\n    EndpointConfig:\n    Type: \"AWS::SageMaker::EndpointConfig\"\n    Properties:\n    ProductionVariants:\n    - InitialInstanceCount: 1\n    InitialVariantWeight: 1.0\n    InstanceType: ml.t2.large\n    ModelName: !GetAtt Model.ModelName\n    VariantName: !GetAtt Model.ModelName\n    Model:\n    Type: \"AWS::SageMaker::Model\"\n    Properties:\n    PrimaryContainer:\n    Image: <container uri>\n    ExecutionRoleArn: !GetAtt ExecutionRole.Arn\n    ... \n    ```", "```py\n    Aws sagemaker create-model --model-name <value> --execution-role-arn <value>\n    aws sagemaker Create-endpoint-config --endpoint-config-name <value> --production-variants <value>\n    aws sagemaker Create-endpoint --endpoint-name <value> --endpoint-config-name <value> \n    ```", "```py\nType: AWS::SageMaker::Domain\nProperties:\nAppNetworkAccessType: String\nAuthMode: String\nDefaultUserSettings:\nUserSettings\nDomainName: String\nKmsKeyId: String\nSubnetIds:\n- String\nTags:\n- Tag\nVpcId: String \n```"]