- en: '5'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Data Understanding and Visualization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Data visualization is an art! No matter how much effort you and your team put
    into data preparation and preliminary analysis for modeling, if you don’t know
    how to show your findings effectively, your audience may not understand the point
    you are trying to make.
  prefs: []
  type: TYPE_NORMAL
- en: Often, such situations may be even worse when you are dealing with decision-makers.
    For example, if you choose the wrong set of charts to tell a particular story,
    people can misinterpret your analysis and make bad decisions.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the different types of data visualizations, and knowing how they
    fit with each type of analysis, will put you in a very good position in terms
    of engaging your audience and transmitting the information you want.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn about some data visualization techniques. You
    will be covering the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Visualizing relationships in your data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Visualizing comparisons in your data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Visualizing compositions in your data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Visualizing distributions in your data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building key performance indicators
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing QuickSight
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You already know why you need to master these topics. Get started!
  prefs: []
  type: TYPE_NORMAL
- en: Visualizing relationships in your data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you need to show relationships in your data, you are usually talking about
    plotting two or more variables in a chart to visualize their level of dependency.
    A **scatter plot** is probably the most common type of chart to show the relationship
    between two variables. *Figure 5**.1* shows a scatter plot for two variables,
    X and Y.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.1 – Plotting relationships with a scatter plot](img/B21197_05_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.1 – Plotting relationships with a scatter plot
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 5**.1* shows a clear relationship between *X* and *Y*. As *X* increases,
    *Y* also increases. In this particular case, you can say that there is a linear
    relationship between both variables. Keep in mind that scatter plots may also
    catch other types of relationships, not only linear ones. For example, it would
    also be possible to find an exponential relationship between the two variables.'
  prefs: []
  type: TYPE_NORMAL
- en: Another nice chart to make comparisons with is the **bubble chart**. Just like
    a scatter plot, it will also show the relationship between variables; however,
    here, you can use a third dimension, which will be represented by the size of
    the point.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 5**.2* is a bubble chart that explains an investment schema, where
    the *x* axis is the annual rate, *y* is the investment period, and the size of
    the bubble indicates the amount allocated to each investment option.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.2 – Plotting relationships with a bubble chart](img/B21197_05_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.2 – Plotting relationships with a bubble chart
  prefs: []
  type: TYPE_NORMAL
- en: 'Looking at *Figure 5**.2*, you can see two types of relationships. The first
    one is the relationship between the annual rate and investment period: the longer
    the investment period, the higher your annual rate. The second one is the relationship
    between the amount invested and the annual rate: the higher the amount invested,
    the higher your annual rate. As you can see, this is a very effective way to present
    this type of analysis. Next, you will learn how to compare variables.'
  prefs: []
  type: TYPE_NORMAL
- en: Visualizing comparisons in your data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Comparisons are very common in data analysis and there are different ways to
    present them. Starting with the **bar chart**, you must have seen many reports
    that have used this type of visualization.
  prefs: []
  type: TYPE_NORMAL
- en: Bar charts can be used to compare one variable among different classes – for
    example, a car’s price across different models or population size per country.
    In *Figure 5**.3*, the bar chart is used to analyze the percentage of positive
    tests for COVID-19 in a range of regions of India as of April 7th, 2020.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.3 – Plotting comparisons with a bar chart (source: State Health
    Department of India)](img/B21197_05_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.3 – Plotting comparisons with a bar chart (source: State Health Department
    of India)'
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes, you can also use **stacked column charts** to add another dimension
    to the data that is being analyzed. For example, *Figure 5**.4* uses a stacked
    bar chart to show how many people were on board the Titanic by sex. Additionally,
    it breaks down the number of people who survived (positive class) and those who
    did not (negative class), also by sex.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.4 – Using a stacked bar chart to analyze the Titanic disaster dataset](img/B21197_05_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.4 – Using a stacked bar chart to analyze the Titanic disaster dataset
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, most of the women survived the disaster, while most of the men
    did not. The stacked bars help us visualize the difference between the fates of
    the sexes. Finally, you should know that you can also show percentages on those
    stacked bars, not just absolute numbers.
  prefs: []
  type: TYPE_NORMAL
- en: '**Column** **charts** are also useful if you need to compare one or two variables
    across different periods. For example, in *Figure 5**.5*, you can see the annual
    Canadian electronic vehicle sales by province.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.5 – Plotting comparisons with a column chart (source: https://electrek.co/)](img/B21197_05_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.5 – Plotting comparisons with a column chart (source: [https://electrek.co/](https://electrek.co/))'
  prefs: []
  type: TYPE_NORMAL
- en: Another very effective way to make comparisons across different periods is by
    using **line** **charts**. *Figure 5**.6* shows a pretty interesting example of
    how you can compare different algorithms’ performance, in a particular project,
    across different release dates.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Line charts are usually very helpful to indicate whether there is any trend
    in the data over the period of time under analysis. A very common use case for
    line charts is forecasting, where you usually have to analyze trends and seasonality
    in time series data.
  prefs: []
  type: TYPE_NORMAL
- en: For example, in *Figure 5**.6* you can see that the **Classification and Regression
    Trees (CART)** model used to be the poorest performant model compared to other
    algorithms, such as **AdaBoost (ADA), gradient boosting (GB), random forest (RF),
    and logistic** **regression (LOGIT).**
  prefs: []
  type: TYPE_NORMAL
- en: However, in July, the CART model was optimized, and it turned out to be the
    third-best model across all other models. The whole story about the best model
    for each period can easily be seen in *Figure 5**.6*.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.6 – Plotting comparisons with a line chart](img/B21197_05_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.6 – Plotting comparisons with a line chart
  prefs: []
  type: TYPE_NORMAL
- en: Finally, you can also show comparisons of your data using tables. Tables are
    more useful when you have multiple dimensions (usually placed in the rows of the
    table) and one or multiple metrics to make comparisons against (usually placed
    in the columns of the table).
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, you will learn about another set of charts that aims to
    show the distribution of your variables. This set of charts is particularly important
    for modeling tasks, since you must know the distribution of a feature to think
    about potential data transformations for it.
  prefs: []
  type: TYPE_NORMAL
- en: Visualizing distributions in your data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Exploring the distribution of your feature is very important to understand
    some key characteristics of it, such as its skewness, mean, median, and quantiles.
    You can easily visualize skewness by plotting a histogram. This type of chart
    groups your data into bins or buckets and performs counts on top of them. For
    example, *Figure 5**.7* shows a histogram for the *age* variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.7 – Plotting distributions with a histogram](img/B21197_05_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.7 – Plotting distributions with a histogram
  prefs: []
  type: TYPE_NORMAL
- en: Looking at the histogram, you could conclude that most of the people are between
    20 and 50 years old. You can also see a few people more than 60 years old. Another
    example of a histogram is shown in *Figure 5**.8*, which plots the distribution
    of payments from a particular event that has different ticket prices. It aims
    to analyze how much money people are paying per ticket.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.8 – Checking skewness with a histogram](img/B21197_05_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.8 – Checking skewness with a histogram
  prefs: []
  type: TYPE_NORMAL
- en: Here, you can see that most of the people are paying a maximum of 100 dollars
    per ticket. That is the reason why you can see a skewed distribution to the right-hand
    side (the tail side).
  prefs: []
  type: TYPE_NORMAL
- en: If you want to see other characteristics of the distribution, such as its median,
    quantiles, and outliers, then you should use box plots. In *Figure 5**.9*, there
    is another performance comparison of different algorithms in a given dataset.
  prefs: []
  type: TYPE_NORMAL
- en: These algorithms were executed many times, in a cross-validation process, which
    resulted in multiple outputs for the same algorithm; for example, one accuracy
    metric for each execution of the algorithm on each fold.
  prefs: []
  type: TYPE_NORMAL
- en: Since there are multiple accuracy metrics for each algorithm, you can use a
    box plot to check how each of those algorithms performed during the cross-validation
    process.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.9 – Plotting distributions with a box plot](img/B21197_05_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.9 – Plotting distributions with a box plot
  prefs: []
  type: TYPE_NORMAL
- en: Here, you can see that box plots can present some information about the distribution
    of the data, such as its median, lower quartile, upper quartile, and outliers.
    For a complete understanding of each element of a box plot, take a look at *Figure
    5**.10*.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.10 – Box plot elements](img/B21197_05_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.10 – Box plot elements
  prefs: []
  type: TYPE_NORMAL
- en: By analyzing the box plot shown in *Figure 5**.9*, you could conclude that the
    ADA algorithm has presented some outliers during the cross-validation process,
    since one of the executions resulted in a very good model (around 92% accuracy).
    All the other executions of AdaBoost resulted in less than 85% accuracy, with
    a median value of around 80%.
  prefs: []
  type: TYPE_NORMAL
- en: Another conclusion you could make after analyzing *Figure 5**.9* is that the
    CART algorithm presented the poorest performance during the cross-validation process
    (the lowest median and lower quartile).
  prefs: []
  type: TYPE_NORMAL
- en: Before you wrap up this section, note that you can also use a scatter plot to
    analyze data distributions when you have more than one variable. Next, you will
    look at another set of charts that is useful for showing compositions in your
    data.
  prefs: []
  type: TYPE_NORMAL
- en: Visualizing compositions in your data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes, you want to analyze the various elements that compose a feature –
    for example, the percentage of sales per region or percentage of queries per channel.
    In both examples, they are not considering any time dimension; instead, they are
    just looking at the entire data points. For these types of compositions, where
    you don’t have the time dimension, you could show your data using **pie charts,
    stacked 100% bar charts, and** **tree maps.**
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 5**.11* is a pie chart showing the number of queries per customer channel
    for a given company over a pre-defined period of time.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.11 – Plotting compositions with a pie chart](img/B21197_05_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.11 – Plotting compositions with a pie chart
  prefs: []
  type: TYPE_NORMAL
- en: If you want to show compositions while considering a time dimension, then your
    most common options are a **stacked area chart, a stacked 100% area chart, a stacked
    column chart, or a stacked 100% column chart.** For reference, take a look at
    *Figure 5**.12*, which shows the sales per region from 2016 until 2020.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.12 – Plotting compositions with a stacked 100% column chart](img/B21197_05_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.12 – Plotting compositions with a stacked 100% column chart
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, stacked 100% column charts help us understand compositions across
    different periods.
  prefs: []
  type: TYPE_NORMAL
- en: Building key performance indicators
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before you wrap up these data visualization sections, you need to be introduced
    to **key** **performance indicators**, or **KPIs** for short.
  prefs: []
  type: TYPE_NORMAL
- en: A KPI is usually a single value that describes the results of a business indicator,
    such as the churn rate, **net promoter score (NPS), return on investment (ROI),**
    and so on. Although there are some standard indicators across different industries,
    you usually need to build custom metrics based on the company’s needs.
  prefs: []
  type: TYPE_NORMAL
- en: To be honest, the most complex challenge associated with indicators is not in
    their visualization aspect itself, but in the way they have been built (the rules
    used) and the way they will be communicated and used across different levels of
    the company.
  prefs: []
  type: TYPE_NORMAL
- en: From a visualization perspective, just like any other single value, you can
    use all those charts that you have learned about to analyze your indicator, depending
    on your need. However, if you just want to show your KPI, with no time dimension,
    you can use a **widget**.
  prefs: []
  type: TYPE_NORMAL
- en: Alright, these are the most important topics about data visualization that you
    should know for the AWS Certified Machine Learning – Specialty exam. Now, let
    us have a look at QuickSight, an AWS service where you can implement all these
    visualization techniques you have just learned.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing QuickSight
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Amazon QuickSight is a cloud-based analytics service that allows you to build
    data visualizations and ad hoc analysis. QuickSight supports a variety of data
    sources, such as Redshift, Aurora, Athena, RDS, and your on-premises database
    solution.
  prefs: []
  type: TYPE_NORMAL
- en: Other sources of data include S3, where you can retrieve data from Excel, CSV,
    or log files, and **Software-as-a-Service (SaaS)** solutions, where you can retrieve
    data from Salesforce entities.
  prefs: []
  type: TYPE_NORMAL
- en: 'Amazon QuickSight has two versions:'
  prefs: []
  type: TYPE_NORMAL
- en: Standard edition
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enterprise edition
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The most important difference between these two versions is the possibility
    of integration with Microsoft **Active Directory (AD)** and encryption at rest.
    Both features are only provided in the Enterprise edition.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Keep in mind that AWS services are constantly evolving, so more differences
    between the Standard and Enterprise versions may crop up in the future. You should
    always consult the latest documentation of AWS services to check what is new.
  prefs: []
  type: TYPE_NORMAL
- en: 'In terms of access management, QuickSight offers a very simple interface you
    can use to control user access. In the Standard edition, you have pretty much
    two options for inviting a user to your QuickSight account:'
  prefs: []
  type: TYPE_NORMAL
- en: You can invite an IAM user.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can send an invitation to an email address.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you invite IAM users, then they can automatically log in to your account
    and see or edit your visualization, depending on the type of permission you have
    provided during QuickSight user creation. If you have invited an email address,
    then the email owner has to access their mailbox to complete this operation.
  prefs: []
  type: TYPE_NORMAL
- en: Removing a user is also straightforward. The only extra information you have
    to provide while removing a user is whether you want to transfer the orphaned
    resources to another user into your account *or* delete all the user’s resources.
  prefs: []
  type: TYPE_NORMAL
- en: If you are playing with the Enterprise edition, this process of authorizing
    users can be a little different, since you have AD working for you. In this case,
    you can grant access to AD groups, and all the users from those groups will be
    granted access to your account on QuickSight.
  prefs: []
  type: TYPE_NORMAL
- en: Also, remember that in both versions, all data transfer is encrypted; however,
    you will only find encryption at rest in the Enterprise edition.
  prefs: []
  type: TYPE_NORMAL
- en: When you are bringing data into QuickSight, you are technically creating what
    are known as **datasets**. Datasets, in turn, are imported in an optimized structure
    into QuickSight, known as the **Super-fast, Parallel, In-memory, Calculation Engine
    (SPICE)**. That is why QuickSight can perform data visualization on big data.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, you should know that QuickSight does not only allow you to plot your
    data, but also perform some small data preparation tasks, such as renaming fields,
    computing new fields, changing data types, preparing queries to retrieve data
    from the source, and joining tables from the same source.
  prefs: []
  type: TYPE_NORMAL
- en: 'Summarizing the main steps for working with QuickSight:'
  prefs: []
  type: TYPE_NORMAL
- en: User creation and authorization.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connecting to a **data source.**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Bringing data into a **dataset**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Your dataset will be imported into **SPICE**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From a dataset, you can create an **analysis**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, inside your analysis, you can add **visuals**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you want to go further, you can create a snapshot of your analysis and place
    it in a **dashboard**. Alternatively, you can group your analysis into **stories**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: That brings you to the end of this chapter about data visualizations! Now, take
    some time to recap what you have learned.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You started this chapter by learning how to visualize relationships in the data.
    Scatter plots and bubble charts are the most important charts in this category
    to show relationships between two or three variables, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: Then, you moved to another category of data visualization, which aimed to make
    comparisons in the data. The most common charts that you can use to show comparisons
    are bar charts, column charts, and line charts. Tables are also useful to show
    comparisons.
  prefs: []
  type: TYPE_NORMAL
- en: The next use case that you learned was visualizing data distributions. The most
    common types of charts that are used to show distributions are histograms and
    box plots.
  prefs: []
  type: TYPE_NORMAL
- en: Then, you moved to compositions. You can use this set of charts when you want
    to show the different elements that make up the data. While showing compositions,
    you must be aware of whether you want to present static data or data that changes
    over time. For static data, you should use a pie chart, a stacked 100% bar chart,
    or a tree map. For data that changes over time, you should use a stacked area
    chart, a stacked 100% area chart, a stacked column chart, or a stacked 100% column
    chart.
  prefs: []
  type: TYPE_NORMAL
- en: The last section of this chapter was reserved for QuickSight, which is an AWS
    service that you can use to visualize your data. You learned about the different
    versions and features of the service, and you were then introduced to SPICE.
  prefs: []
  type: TYPE_NORMAL
- en: Well done! In the next chapter, you will learn about machine learning algorithms.
    That is going to be a very important chapter for your certification journey, so
    make sure you are prepared! However, before you jump into that new chapter, take
    some time to practice a little more for the exam!
  prefs: []
  type: TYPE_NORMAL
- en: Exam Readiness Drill – Chapter Review Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Apart from a solid understanding of key concepts, being able to think quickly
    under time pressure is a skill that will help you ace your certification exam.
    That is why working on these skills early on in your learning journey is key.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter review questions are designed to improve your test-taking skills progressively
    with each chapter you learn and review your understanding of key concepts in the
    chapter at the same time. You’ll find these at the end of each chapter.
  prefs: []
  type: TYPE_NORMAL
- en: How To Access These Resources
  prefs: []
  type: TYPE_NORMAL
- en: To learn how to access these resources, head over to the chapter titled [*Chapter
    11*](B21197_11.xhtml#_idTextAnchor1477), *Accessing the Online* *Practice Resources*.
  prefs: []
  type: TYPE_NORMAL
- en: 'To open the Chapter Review Questions for this chapter, perform the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Click the link – [https://packt.link/MLSC01E2_CH05](https://packt.link/MLSC01E2_CH05).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Alternatively, you can scan the following **QR code** (*Figure 5**.13*):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 5.13 – QR code that opens Chapter Review Questions for logged-in users](img/B21197_05_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.13 – QR code that opens Chapter Review Questions for logged-in users
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you log in, you’ll see a page similar to the one shown in *Figure 5**.14*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.14 – Chapter Review Questions for Chapter 5](img/B21197_05_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.14 – Chapter Review Questions for Chapter 5
  prefs: []
  type: TYPE_NORMAL
- en: Once ready, start the following practice drills, re-attempting the quiz multiple
    times.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Exam Readiness Drill
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For the first three attempts, don’t worry about the time limit.
  prefs: []
  type: TYPE_NORMAL
- en: ATTEMPT 1
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The first time, aim for at least **40%**. Look at the answers you got wrong
    and read the relevant sections in the chapter again to fix your learning gaps.
  prefs: []
  type: TYPE_NORMAL
- en: ATTEMPT 2
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The second time, aim for at least **60%**. Look at the answers you got wrong
    and read the relevant sections in the chapter again to fix any remaining learning
    gaps.
  prefs: []
  type: TYPE_NORMAL
- en: ATTEMPT 3
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The third time, aim for at least **75%**. Once you score 75% or more, you start
    working on your timing.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: You may take more than **three** attempts to reach 75%. That’s okay. Just review
    the relevant sections in the chapter till you get there.
  prefs: []
  type: TYPE_NORMAL
- en: Working On Timing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Target: Your aim is to keep the score the same while trying to answer these
    questions as quickly as possible. Here’s an example of how your next attempts
    should look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Attempt** | **Score** | **Time Taken** |'
  prefs: []
  type: TYPE_TB
- en: '| Attempt 5 | 77% | 21 mins 30 seconds |'
  prefs: []
  type: TYPE_TB
- en: '| Attempt 6 | 78% | 18 mins 34 seconds |'
  prefs: []
  type: TYPE_TB
- en: '| Attempt 7 | 76% | 14 mins 44 seconds |'
  prefs: []
  type: TYPE_TB
- en: Table 5.1 – Sample timing practice drills on the online platform
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The time limits shown in the above table are just examples. Set your own time
    limits with each attempt based on the time limit of the quiz on the website.
  prefs: []
  type: TYPE_NORMAL
- en: With each new attempt, your score should stay above **75%** while your “time
    taken” to complete should “decrease”. Repeat as many attempts as you want till
    you feel confident dealing with the time pressure.
  prefs: []
  type: TYPE_NORMAL
