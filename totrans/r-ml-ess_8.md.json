["```py\nlibrary(data.table)\ndtBank <- data.table(read.csv('bank.csv', sep=';'))\n```", "```py\n# remove the duration\ndtBank[, duration := NULL]\n```", "```py\n    dtBank[, table(y)]\n    y\n     no  yes\n    4000  521\n\n    ```", "```py\n    dtBank[, table(y) / .N]\n    y\n     no     yes \n    0.88476 0.11524\n\n    ```", "```py\n    DefPercentage <- function(frequency)\n    {\n      percentage = frequency / sum(frequency)\n      percentage = round(percentage * 100)\n      percentage = paste(percentage, '%')\n      return(percentage)\n    }\n    ```", "```py\n    defPercentage(dtBank[, table(y) / .N])\n    [1] \"88 %\" \"12 %\"\n\n    ```", "```py\n    help(barplot)\n    ```", "```py\n    tableOutput <- dtBank[, table(y)]\n    colPlot <- rainbow(length(tableOutput))\n    percOutput <- defPercentage(tableOutput)\n    ```", "```py\n    barplot(\n      height = tableOutput,\n      names.arg = percOutput,\n      col = colPlot,\n      legend.text = names(tableOutput),\n      xlab = 'Subscribing'\n      ylab = 'Number of clients',\n      main = 'Proportion of clients subscribing'\n    )\n    ```", "```py\nstr(dtBank)\nClasses 'data.table' and 'data.frame':    4521 obs. of  16 variables:\n $ age      : int  30 33 35 30 59 35 36 39 41 43 ...\n $ job      : Factor w/ 12 levels \"admin.\",\"blue-collar\",..: 11 8 5 5 2 5 7 10 3 8 ...\n $ marital  : Factor w/ 3 levels \"divorced\",\"married\",..: 2 2 3 2 2 3 2 2 2 2 ...\n...\n\n```", "```py\n    classFeatures <- lapply(dtBank, class)\n    ```", "```py\n    classFeatures <- classFeatures[names(classFeatures) != 'y']\n    ```", "```py\n    featCategoric <- names(classFeatures)[\n      classFeatures == 'factor'\n      ]\n    ```", "```py\n    featNumeric <- names(classFeatures)[\n      classFeatures == 'integer'\n      ]\n    ```", "```py\nhelp(par)\n```", "```py\n    par(mfcol = c(2, 3), mar = c(3, 4, 1, 2))\n    ```", "```py\nfor(feature in featCategoric){\n```", "```py\n      TableFeature <- dtBank[, table(get(feature))]\n      rainbCol <- rainbow(length(tableFeature))\n      percFeature <- defPercentage(tableFeature)\n    ```", "```py\n       plot.new()\n       legend(\n         'top', names(tableFeature),\n         col = rainbCol, pch = 16,\n         title = feature\n       )\n    ```", "```py\n      barplot(\n        height = tableFeature,\n        names.arg = percFeature,\n        col = colPlot,\n        xlab = feature,\n        ylab = 'Number of clients'\n      )\n    }\n    ```", "```py\npercJob <- dtBank[, table(job) / .N]\ncolRelevant <- names(percJob)[percJob > 0.08]\nfor(nameCol in colRelevant){\n  newCol <- paste('job', nameCol, sep='_')\n  dtBank[, eval(newCol) := ifelse(job == nameCol, 1, 0)]\n}\ndtBank[, job := NULL]\n```", "```py\ndtBank[, single := ifelse(marital == 'single', 1, 0)]\ndtBank[, divorced := ifelse(marital == 'divorced', 1, 0)]\ndtBank[, marital := NULL]\n```", "```py\ndtBank[, edu_primary := ifelse(education == 'primary', 1, 0)]\ndtBank[, edu_tertiary := ifelse(education == 'tertiary', 1, 0)]\ndtBank[, education := NULL]\n```", "```py\ndtBank[, housing := as.numeric(housing) - 1]\ndtBank[, default := as.numeric(default) - 1]\ndtBank[, loan := as.numeric(loan) - 1]\n```", "```py\ndtBank[, cellular := ifelse(contact == 'cellular', 1, 0)]\ndtBank[, telephone := ifelse(contact == 'telephone', 1, 0)]\ndtBank[, contact := NULL]\n```", "```py\nMonths <- tolower(month.abb)\nmonths <- c(\n    'jan', 'feb', 'mar', 'apr', 'may', 'jun',\n    'jul', 'aug', 'sep', 'oct', 'nov', 'dec'\n)\ndtBank[\n  , month := which(month == months),\n  by=1:nrow(dtBank)\n  ]\n```", "```py\ndtBank[, past_success := ifelse(poutcome == 'success', 1, 0)]\ndtBank[, past_failure := ifelse(poutcome == 'failure', 1, 0)]\ndtBank[, poutcome := NULL]\n```", "```py\n    par(mfrow=c(3, 2), mar=c(5, 4, 4, 2) + 0.1)\n    ```", "```py\nfor(feature in featNumeric){\n  dtBank[, hist(x = get(feature), main=feature, xlab = feature)]\n}\n```", "```py\ndtBank[, not_contacted := ifelse(pdays == -1, 1, 0)]\ndtBank[pdays == -1, pdays := 0]\n```", "```py\ndtBank[, balance_negative := ifelse(balance < 0, 1, 0)]\ndtBank[balance < 0, balance := 0]\n```", "```py\ndtBank[, pdays := log(pdays + 1)]\ndtBank[, balance := log(balance + 1)]\ndtBank[, campaign := log(campaign + 1)]\ndtBank[, previous := log(previous + 1)]\n```", "```py\nstr(dtBank)\nView(dtBank)\n```", "```py\ndtBank[, output := as.numeric(y) â€“ 1]\ndtBank[, y := NULL]\n```", "```py\nfeatPers <- c(\n  'age', 'default', 'balance', 'balance_negative',\n  'housing', 'loan',\n  'job_admin.', 'job_blue-collar',\t'job_management',\n  'job_services', 'job_technician',\n  'single', 'divorced', 'edu_primary', 'edu_tertiary'\n)\ndtPers <- dtBank[, featPers, with=F]\n```", "```py\n    d <- dist(dtPers, method = 'euclidean')\n    ```", "```py\n    hcOut <- hclust(d, method = 'average')\n    ```", "```py\n    par(mfrow = c(1, 1))\n    plot(\n      hcOut,\n      labels = FALSE,\n      hang = -1,\n      main = 'Dendrogram',\n      xlab = 'Client clusters',\n      ylab = 'Agglomeration distance'\n    )\n    ```", "```py\nk1 <- 3\nk2 <- 7\npar(mfrow=c(1, 1))\nrect.hclust(hcOut, k = k1)\nrect.hclust(hcOut, k = k2)\n```", "```py\n    dtClust <- dtBank[, 'output', with = F]\n    ```", "```py\n    dtClust[, clusterHc1 := cutree(hclOut, k = k1)]\n    dtClust[, clusterHc2 := cutree(hclOut, k = k2)]\n    ```", "```py\n    par(mfrow = c(1, 3), oma = c(0, 0, 10, 0))\n    ```", "```py\n    for(iCluster in 1:k1){\n      tableClust <- dtClust[\n        clusterHc1 == iCluster,\n        table(output)\n        ]\n      sizeCluster <- dtClust[, sum(clusterHc1 == iCluster)]\n      titlePie <- paste(sizeCluster, 'clients')\n      barplot(\n        height = tableClust,\n        names.arg = defPercentage(tableClust),\n        legend.text = c('no', 'yes'),\n        col = c('blue', 'red'),\n        main = titlePie\n      )\n    }\n    ```", "```py\n    mtext(\n      text = 'Hierarchic clustering, n = 3',\n      outer = TRUE, line = 1, cex = 2\n    )\n    ```", "```py\n    par(mfrow = c(2, 4), oma = c(0, 0, 10, 0))\n    ```", "```py\n    for(iCluster in 1:k2){\n      tableClust <- dtClust[\n        clusterHc2 == iCluster,\n        table(output)\n        ]\n      sizeCluster <- dtClust[, sum(clusterHc2 == iCluster)]\n      titlePie <- paste(sizeCluster, 'clients')\n      barplot(\n        height = tableClust,\n        names.arg = defPercentage(tableClust),\n        col = c('blue', 'red'),\n        main = titlePie\n      )\n    }\n    ```", "```py\n    mtext(\n      text = 'Hierarchic clustering, n = 7',\n      outer = TRUE, line = 1, cex = 2\n    )\n    ```", "```py\n    library('randomForest')\n    ```", "```py\n    arrayFeatures <- names(dtBank)\n    arrayFeatures <- arrayFeatures[arrayFeatures != 'output']\n    formulaAll <- paste('output', '~')\n    formulaAll <- paste(formulaAll, arrayFeatures[1])\n    for(nameFeature in arrayFeatures[-1]){\n      formulaAll <- paste(formulaAll, '+', nameFeature)\n    }\n    formulaAll <- formula(formulaAll)\n    ```", "```py\n    dtTestBinded <- data.table()\n    ```", "```py\n    nIter <- 10\n    ```", "```py\n    for(iIter in 1:nIter)\n    {\n    ```", "```py\n    indexTrain <- sample(\n      x = c(TRUE, FALSE),\n      size = nrow(dtBank),\n      replace = T,\n      prob = c(0.8, 0.2)\n    )\n    dtTrain <- dtBank[indexTrain]\n    dtTest <- dtBank[!indexTrain]\n    ```", "```py\n      dtTest1 <- dtTest[output == 1]\n      dtTest0 <- dtTest[output == 0]\n      n0 <- nrow(dtTest0)\n      n1 <- nrow(dtTest1)\n      dtTest0 <- dtTest0[sample(x = 1:n0, size = n1)]\n      dtTest <- rbind(dtTest0, dtTest1)\n    ```", "```py\n    modelRf <- randomForest(\n      formula = formulaAll,\n      data = dtTrain\n    )\n    ```", "```py\n    modelLr <- glm(\n      formula = formulaAll,\n      data = dtTest,\n      family = binomial(logit)\n    )\n    ```", "```py\n    dtTest[, outputRf := predict(\n      object = modelRf, newdata = dtTest, type='response'\n      )]\n    ```", "```py\n    dtTest[, outputLr := predict(\n      object = modelLr, newdata = dtTest, type='response'\n      )]\n    ```", "```py\n    dtTestBinded <- rbind(dtTestBinded, dtTest)\n    ```", "```py\n    }\n    ```", "```py\n    plotDistributions <- function(dtTestBinded, colPred)\n    {\n    ```", "```py\n      densityLr0 <- dtTestBinded[\n        output == 0,\n        density(get(colPred), adjust = 0.5)\n        ]\n    ```", "```py\n      densityLr1 <- dtTestBinded[\n        output == 1,\n        density(get(colPred), adjust = 0.5)\n        ]\n    ```", "```py\n      col0 <- rgb(1, 0, 0, 0.3)\n      col1 <- rgb(0, 0, 1, 0.3)\n    ```", "```py\n      plot(densityLr0, xlim = c(0, 1), main = 'density')\n      polygon(densityLr0, col = col0, border = 'black')\n    ```", "```py\n      polygon(densityLr1, col = col1, border = 'black')\n    ```", "```py\n      legend(\n        'top',\n        c('0', '1'),\n        pch = 16,\n        col = c(col0, col1)\n      )\n    ```", "```py\n      return()\n    }\n    ```", "```py\npar(mfrow = c(1, 1))\nplotDistributions(dtTestBinded, 'outputRf')\n```", "```py\nplotDistributions(dtTestBinded, 'outputLr')\n```", "```py\n    library('ROCR')\n    ```", "```py\n    plotPerformance <- function(dtTestBinded, colPred)\n    {\n    ```", "```py\n      pred <- dtTestBinded[, prediction(get(colPred), output)]\n    ```", "```py\n      perfRates <- performance(pred, 'tpr', 'fpr')\n      plot(perfRates)\n    ```", "```py\n      perfAuc <- performance(pred, 'auc')\n      auc <- perfAuc@y.values[[1]]\n    ```", "```py\n      return(auc)\n    }\n    ```", "```py\naucRf <- plotPerformance(dtTestBinded, 'outputRf')\n```", "```py\naucLr <- plotPerformance(dtTestBinded, 'outputLr')\n```"]