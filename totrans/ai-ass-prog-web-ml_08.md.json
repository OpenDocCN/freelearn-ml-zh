["```py\npython -m venv venv \n```", "```py\n# q: How do I create a virtual environment for Python? a: python –m venv venv \n```", "```py\na: Venv\\Scripts\\activate \n```", "```py\npip install Flask \n```", "```py\n# q: How do I create a virtual environment for Python? a: python –m venv venv\n# q: How do I install Flask with pip? a: pip install Flask \n```", "```py\nfrom flask import Flask \n```", "```py\nfrom flask import Flask\n# create app\napp = Flask(__name__)\n# default route\n@app.route('/')\ndef index():\n    return 'Hello World!'\n# hello route\n@app.route('/hello')\ndef hello():\n    return 'Hello World!'\n# start app on port 5000\nif __name__ == '__main__':\n    app.run(debug=True, port=5000) \n```", "```py\nfrom flask import Flask\n# create app\napp = Flask(__name__)\n# default route\n@app.route('/')\ndef index():\n    return 'Hello World!'\n# product catalog\n@app.route('/products')\ndef products():\n    return 'Products'\n# shopping cart\n@app.route('/cart')\ndef cart():\n    return 'Cart'\n# checkout\n@app.route('/checkout')\ndef checkout():\n    return 'Checkout'\n# start app on port 5000\nif __name__ == '__main__':\n    app.run(debug=True, port=5000) \n```", "```py\nfrom flask import Flask, jsonify\n# create app\napp = Flask(__name__)\n# default route\n@app.route('/')\ndef index():\n    return jsonify({'message': 'Hello World!'})\n# product catalog\n@app.route('/products')\ndef products():\n    products = [\n        {'id': 1, 'name': 'Product 1', 'price': 10.99},\n        {'id': 2, 'name': 'Product 2', 'price': 5.99},\n        {'id': 3, 'name': 'Product 3', 'price': 7.99}\n    ]\n    return jsonify(products)\n# shopping cart\n@app.route('/cart')\ndef cart():\n    return jsonify({'message': 'Cart'})\n# checkout\n@app.route('/checkout')\ndef checkout():\n    return jsonify({'message': 'Checkout'})\n# start app on port 5000\nif __name__ == '__main__':\n    app.run(debug=True, port=5000) \n```", "```py\nimport sqlite3\nfrom flask import Flask, jsonify\n# create app\napp = Flask(__name__)\n# connect to database\nconn = sqlite3.connect('example.db')\n# create table\nconn.execute('''CREATE TABLE IF NOT EXISTS products\n             (id INTEGER PRIMARY KEY AUTOINCREMENT,\n             name TEXT NOT NULL,\n             price REAL NOT NULL);''')\n# insert data\nconn.execute(\"INSERT INTO products (name, price) VALUES (?, ?)\", ('Product 1', 10.99))\nconn.execute(\"INSERT INTO products (name, price) VALUES (?, ?)\", ('Product 2', 5.99))\nconn.execute(\"INSERT INTO products (name, price) VALUES (?, ?)\", ('Product 3', 7.99))\nconn.commit()\n# default route\n@app.route('/')\ndef index():\n    return jsonify({'message': 'Hello World!'})\n# product catalog\n@app.route('/products')\ndef products():\n    cursor = conn.execute(\"SELECT id, name, price FROM products\")\n    products = []\n    for row in cursor:\n        product = {'id': row[0], 'name': row[1], 'price': row[2]}\n        products.append(product)\n    return jsonify(products)\n# shopping cart\n@app.route('/cart')\ndef cart():\n    return jsonify({'message': 'Cart'})\n# checkout\n@app.route('/checkout')\ndef checkout():\n    return jsonify({'message': 'Checkout'})\n# close connection\nconn.close()\n# start app on port 5000\nif __name__ == '__main__':\n    app.run(debug=True, port=5000) \n```", "```py\nimport sqlite3\nfrom flask import Flask, jsonify\n# create app\napp = Flask(__name__)\n# connect to database\nconn = sqlite3.connect('example.db')\n# create table \nconn.execute('''CREATE TABLE IF NOT EXISTS products\n             (id INTEGER PRIMARY KEY AUTOINCREMENT,\n             name TEXT NOT NULL,\n             price REAL NOT NULL);''')\n# insert data\nconn.execute(\"INSERT INTO products (name, price) VALUES (?, ?)\", ('Product 1', 10.99))\nconn.execute(\"INSERT INTO products (name, price) VALUES (?, ?)\", ('Product 2', 5.99))\nconn.execute(\"INSERT INTO products (name, price) VALUES (?, ?)\", ('Product 3', 7.99))\nconn.commit()\n# default route\n@app.route('/')\ndef index():\n    return jsonify({'message': 'Hello World!'})\n# product catalog\n@app.route('/products')\ndef products():\n    cursor = conn.execute(\"SELECT id, name, price FROM products\")\n    products = []\n    for row in cursor:\n        product = {'id': row[0], 'name': row[1], 'price': row[2]}\n        products.append(product)\n    return jsonify(products)\n# shopping cart\n@app.route('/cart')\ndef cart():\n    cursor = conn.execute(\"SELECT id, name, price FROM products\")\n    products = []\n    for row in cursor:\n        product = {'id': row[0], 'name': row[1], 'price': row[2]}\n        products.append(product)\n    return jsonify(products)\n# checkout\n@app.route('/checkout')\ndef checkout():\n    cursor = conn.execute(\"SELECT id, name, price FROM products\")\n    products = []\n    for row in cursor:\n        product = {'id': row[0], 'name': row[1], 'price': row[2]}\n        products.append(product)\n    return jsonify(products)\n# close connection\nconn.close()\n# start app on port 5000\nif __name__ == '__main__':\n    app.run(debug=True, port=5000) \n```", "```py\nimport sqlite3\nimport json\nimport flask\n# create app\napp = flask.Flask(__name__)\n# connect to database\ndb = sqlite3.connect('example.db')\n# create tables\ndb.execute('''CREATE TABLE IF NOT EXISTS products\n             (id INTEGER PRIMARY KEY AUTOINCREMENT,\n             name TEXT NOT NULL,\n             price REAL NOT NULL);''')\ndb.execute('''CREATE TABLE IF NOT EXISTS cart\n             (id INTEGER PRIMARY KEY AUTOINCREMENT,\n             product_id INTEGER NOT NULL,\n             quantity INTEGER NOT NULL);''')\ndb.execute('''CREATE TABLE IF NOT EXISTS checkout\n             (id INTEGER PRIMARY KEY AUTOINCREMENT,\n             cart_id INTEGER NOT NULL,\n             total REAL NOT NULL);''')\ndb.commit()\ndb.close()\n# default route\n@app.route('/')\ndef index():\n    return flask.jsonify({'message': 'Hello World!'})\n# product catalog\n@app.route('/products')\ndef products():\n    db = sqlite3.connect('example.db')\n    cursor = db.execute(\"SELECT id, name, price FROM products\")\n    products = []\n    for row in cursor:\n        product = {'id': row[0], 'name': row[1], 'price': row[2]}\n        products.append(product)\n    db.close()\n    return flask.jsonify(products)\n# shopping cart\n@app.route('/cart')\ndef cart():\n    db = sqlite3.connect('example.db')\n    cursor = db.execute(\"SELECT id, product_id, quantity FROM cart\")\n    cart = []\n    for row in cursor:\n        item = {'id': row[0], 'product_id': row[1], 'quantity': row[2]}\n        cart.append(item)\n    db.close()\n    return flask.jsonify(cart)\n# add product to cart, productId and quantity in body, create cart if needed, else update\n@app.route('/cart/', methods=['POST'])\ndef add_to_cart():\n    db = sqlite3.connect('example.db')\n    # get product id and quantity from body\n    product_id = flask.request.json['productId']\n    quantity = flask.request.json['quantity']\n    # check if cart exists\n    cursor = db.execute(\"SELECT id FROM cart\")\n    cart_id = None\n    for row in cursor:\n        cart_id = row[0]\n    # if cart exists, update\n    if cart_id:\n        db.execute(\"UPDATE cart SET product_id = ?, quantity = ? WHERE id = ?\", (product_id, quantity, cart_id))\n    # else create\n    else:\n        db.execute(\"INSERT INTO cart (product_id, quantity) VALUES (?, ?)\", (product_id, quantity))\n    # close\n    db.commit()\n    db.close()\n    return flask.jsonify({'message': 'Added to cart'})\n# checkout POST, cartId in body\n@app.route('/checkout', methods=['POST'])\ndef checkout():\n    # insert cart into checkout\n    conn = sqlite3.connect('example.db')\n    # get cart id from body\n    cart_id = flask.request.json['cartId']\n    # write to checkout\n    conn.execute(\"INSERT INTO checkout (cart_id, total) VALUES (?, ?)\", (cart_id, 0))\n    # close\n    conn.commit()\n    conn.close() \n```", "```py\n# flask variable windows\nset FLASK_APP=app.py\nflask run \n```", "```py\ndb.execute(\"INSERT INTO products (name, price) VALUES (?, ?)\", ('Apple', 1.99))\ndb.execute(\"INSERT INTO products (name, price) VALUES (?, ?)\", ('Banana', 2.99)) \n```", "```py\n[\n  {\n    \"id\": 1,\n    \"name\": \"Apple\",\n    \"price\": 1.99\n  },\n  {\n    \"id\": 2,\n    \"name\": \"Banana\",\n    \"price\": 2.99\n  }\n] \n```", "```py\nimport sqlite3\n# connect to database\nconn = sqlite3.connect('example.db')\n# create tables\nconn.execute('''CREATE TABLE IF NOT EXISTS products\n             (id INTEGER PRIMARY KEY AUTOINCREMENT,\n             name TEXT NOT NULL,\n             price REAL NOT NULL);''')\nconn.execute('''CREATE TABLE IF NOT EXISTS cart\n             (id INTEGER PRIMARY KEY AUTOINCREMENT,\n             product_id INTEGER NOT NULL,\n             quantity INTEGER NOT NULL);''')\nconn.execute('''CREATE TABLE IF NOT EXISTS checkout\n             (id INTEGER PRIMARY KEY AUTOINCREMENT,\n             cart_id INTEGER NOT NULL,\n             total REAL NOT NULL);''')\nconn.execute(\"INSERT INTO products (name, price) VALUES (?, ?)\", ('Apple', 1.99))\nconn.execute(\"INSERT INTO products (name, price) VALUES (?, ?)\", ('Banana', 2.99))\nconn.commit()\ndef get_products():\n    cursor = conn.execute(\"SELECT id, name, price FROM products\")\n    products = []\n    for row in cursor:\n        product = {'id': row[0], 'name': row[1], 'price': row[2]}\n        products.append(product)\n    return products\ndef get_cart():\n    cursor = conn.execute(\"SELECT id, product_id, quantity FROM cart\")\n    cart = []\n    for row in cursor:\n        item = {'id': row[0], 'product_id': row[1], 'quantity': row[2]}\n        cart.append(item)\n    return cart\ndef add_to_cart(product_id, quantity):\n    # check if cart exists\n    cursor = conn.execute(\"SELECT id FROM cart\")\n    cart_id = None\n    for row in cursor:\n        cart_id = row[0]\n    # if cart exists, update\n    if cart_id:\n        conn.execute(\"UPDATE cart SET product_id = ?, quantity = ? WHERE id = ?\", (product_id, quantity, cart_id))\n    # else create\n    else:\n        conn.execute(\"INSERT INTO cart (product_id, quantity) VALUES (?, ?)\", (product_id, quantity))\n    conn.commit()\ndef checkout(cart_id):\n    # insert cart into checkout\n    conn.execute(\"INSERT INTO checkout (cart_id, total) VALUES (?, ?)\", (cart_id, 0))\n    conn.commit() \n```", "```py\nimport flask\nimport db\n# create app\napp = flask.Flask(__name__)\n# default route\n@app.route('/')\ndef index():\n    return flask.jsonify({'message': 'Hello World!'})\n# product catalog\n@app.route('/products')\ndef products():\n    products = db.get_products()\n    return flask.jsonify(products)\n# shopping cart\n@app.route('/cart')\ndef cart():\n    cart = db.get_cart()\n    return flask.jsonify(cart)\n# add product to cart, productId and quantity in body, create cart if needed, else update\n@app.route('/cart', methods=['POST'])\ndef add_to_cart():\n    # get product id and quantity from body\n    product_id = flask.request.json['productId']\n    quantity = flask.request.json['quantity']\n    db.add_to_cart(product_id, quantity)\n    return flask.jsonify({'message': 'Added to cart'})\n# checkout POST, cartId in body\n@app.route('/checkout', methods=['POST'])\ndef checkout():\n    # get cart id from body\n    cart_id = flask.request.json['cartId']\n    db.checkout(cart_id)\n    return flask.jsonify({'message': 'Checkout successful'})\n# start app on port 5000\nif __name__ == '__main__':\n    app.run(debug=True, port=5000) \n```", "```py\n# app.py\nimport flask\nimport db\nfrom flasgger import Swagger, swag_from\n# create app\napp = flask.Flask(__name__)\nswagger = Swagger(app)\n# default route\n@app.route('/')\ndef index():\n    return flask.jsonify({'message': 'Hello World!'})\n# product catalog\n@app.route('/products', methods=['GET'])\n@swag_from('swagger/products.yml')\ndef products():\n    products = db.get_products()\n    return flask.jsonify(products)\n# shopping cart\n@app.route('/cart', methods=['GET'])\n@swag_from('swagger/cart.yml')\ndef cart():\n    cart = db.get_cart()\n    return flask.jsonify(cart)\n# add product to cart, productId and quantity in body, create cart if needed, else update\n@app.route('/cart/add', methods=['POST'])\n@swag_from('swagger/add_to_cart.yml')\ndef add_to_cart():\n    # get product id and quantity from body\n    product_id = flask.request.json['productId']\n    quantity = flask.request.json['quantity']\n    db.add_to_cart(product_id, quantity)\n    return flask.jsonify({'message': 'Added to cart'})\n# checkout POST, cartId in body\n@app.route('/checkout', methods=['POST'])\n@swag_from('swagger/checkout.yml')\ndef checkout():\n    # get cart id from body\n    cart_id = flask.request.json['cartId']\n    db.checkout(cart_id)\n    return flask.jsonify({'message': 'Checkout successful'})\n# start app on port 5000\nif __name__ == '__main__':\n    app.run(debug=True, port=5000) \n```", "```py\nfolder: swagger \nproducts.yml \nfile: cart.yml \nfile: add_to_cart.yml \nfile: checkout.yml \nfile: swagger.yml \n```", "```py\nproducts.yml\n---\ntags:\n  - products\nresponses:\n  200:\n    description: A list of products\n    schema:\n      type: array\n      items:\n        type: object\n        properties:\n          id:\n            type: integer\n          name:\n            type: string\n          price:\n            type: number\ncart.yml\n---\ntags:\n  - cart\nresponses:\n  200:\n    description: A list of items in the cart\n    schema:\n      type: array\n      items:\n        type: object\n        properties:\n          id:\n            type: integer\n          product_id:\n            type: integer\n          quantity:\n            type: integer\nadd_to_cart.yml\n---\ntags:\n  - cart\nparameters:\n  - in: body\n    name: body\n    required: true\n    schema:\n      type: object\n      properties:\n        productId:\n          type: integer\n        quantity:\n          type: integer\nresponses:\n  200:\n    description: Added to cart\ncheckout.yml\n---\ntags:\n  - checkout\nparameters:\n  - in: body\n    name: body\n    required: true\n    schema:\n      type: object\n      properties:\n        cartId:\n          type: integer\nresponses:\n  200:\n    description: Checkout successful \n```", "```py\npip install flasgger \n```"]