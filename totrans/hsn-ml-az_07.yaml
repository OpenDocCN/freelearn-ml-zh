- en: Machine Learning Server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Microsoft ML Server and its capabilities in SQL Server and HDInsight are the
    subject of this chapter. In addition, the chapter will provide a walk-through
    on ML Server's use in order to demonstrate optimal situations in which to use
    it and how to deploy a solution with it.
  prefs: []
  type: TYPE_NORMAL
- en: Classified algorithms are supervised learning algorithms, which means that they
    make predictions based on a set of examples.
  prefs: []
  type: TYPE_NORMAL
- en: Often, it is useful to use data to predict a category, and this is known as
    classification. Take, for example, Andrew Ng's work on the classification of YouTube
    content as a cat video, or a video of something that is not a cat. As in the famous
    work by Andrew Ng, when there are only two choices, it is called **two-class**
    or ...
  prefs: []
  type: TYPE_NORMAL
- en: What is Microsoft ML Server?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Microsoft ML Server brings machine learning and artificial intelligence to your
    data. It makes it possible for you to have data underlying intelligence apps in
    an enterprise environment that provides the opportunities of open source, with
    the security and reliance of Microsoft software. Microsoft ML Server offers an
    enterprise-ready platform for cleaning, modelling, and analyzing data at scale.
    It allows organizations to become insight-driven, allowing you to analyze data
    in SQL, as well as offering full enterprise support for Python and R.
  prefs: []
  type: TYPE_NORMAL
- en: ML Server meets the needs of everyone involved in analyzing data, from business
    users to data engineers and data scientists. With SQL, Python, and R, businesses
    can be assured of having the opportunity to analyze their data using the most
    commonly-known and adopted languages in the world, offering businesses the opportunity
    to have data-based innovation. With Microsoft ML Server, the availability of R,
    SQL, and Python amalgamates the best of the open source and proprietary worlds
    together to bring true data science.
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft ML Server used to be known as Microsoft R Server. In continuation
    of this effort to democratize data, R support is built on a legacy of previous
    versions of Microsoft R Server, and Revolution R Enterprise products.
  prefs: []
  type: TYPE_NORMAL
- en: With the advent of Microsoft ML Server, significant machine learning and AI
    capabilities enhancements are made in every release. Python support was added
    in the most recent release. ML Server supports the full data science life cycle
    of your Python-based analytics.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, ML Server enables operationalization support so that you can deploy
    your models to a scalable grid for both batch and real-time scoring. This means
    that you can go through the machine learning process, and then set your model
    for use by everyone in the organization. This is the true democratization of data
    for everyone!
  prefs: []
  type: TYPE_NORMAL
- en: 'What problems does Microsoft ML Server solve? Microsoft ML Server can help
    solve many different, real-life business problems. It can take care of data in
    an end-to-end process. For example, it can clean and preprocess larger sets of
    data so that downstream systems can work with the data in order to produce insights.
    There are different examples for which HDInsight is useful, such as:'
  prefs: []
  type: TYPE_NORMAL
- en: Sentiment analysis
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Website traffic patterns
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Weather correlation effects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sales analysis
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Customer analysis
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Internet of Things (IoT)** projects'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Next, we will look at getting started with Microsoft ML Server.
  prefs: []
  type: TYPE_NORMAL
- en: How to get started with Microsoft ML Server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To get started with Microsoft ML Server, it is recommended that the Microsoft
    **Data Science Virtual Machine** (**DSVM**) is used.
  prefs: []
  type: TYPE_NORMAL
- en: The DSVM is a specially-built custom virtual machine that is hosted on Microsoft's
    Azure cloud. It is designed specifically for data science, and for giving learners
    a jump start in learning this new technology. It has Microsoft ML Server pre-installed
    and preconfigured so you can get started right away with data science projects.
  prefs: []
  type: TYPE_NORMAL
- en: You can use languages such as R and Python to do your data analytics right on
    the Microsoft DSVM. It is great for prototyping, and is a useful learning tool
    so that learners are set up for success early in the process.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the DSVM
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The wizard that creates the Microsoft DSVM needs to be configured. The options
    are listed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Name**:Give the DSVM a name.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**VM disk type**: Choose SSD or HDD.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Username**: Specify the admin account ID to sign in.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Password**: Specify the admin account password.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Subscription**: If you have more than one subscription, select the one on
    which the machine is to be created and billed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Resource group**: You can create a new resource group or use an existing
    group.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Location**: Select the data center that is most appropriate. For the fastest
    network access, it is the data center that has most of your data or is closest
    to your actual location.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Size**: Select one of the server types that meets your functional requirements
    and cost constraints. For more choices of VM sizes, select View All.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Settings**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use managed disks. Choose Managed if you want Azure to manage the disks for
    the VM. If not, you need to specify a new or existing storage account.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Other parameters. You can use the default values. If you want to use non-default
    values, hover over the informational link for help on the specific fields.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Once the settings have been configured, the next step is to check and verify
    that all the information you entered is correct. Then, select Create and the DSVM
    will be set up in Azure.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that the DSVM is set up, let's look at the opportunities to use Python in
    Microsoft ML Server.
  prefs: []
  type: TYPE_NORMAL
- en: Machine learning with Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Python has a lot of machine learning functionality. One of the most commonly
    used machine learning libraries in Python is the scikit-learn library. It is used
    for creating, training, and evaluating models. In this hands-on book, the Python
    scikit-learn library is used in the code to train and evaluate the model.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started with Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Python is a popular programming language that is rapidly gaining worldwide acceptance.
    Python has many strengths; it is reliable, flexible, easy to learn and use, and
    is free to use on all operating systems. It has been widely adopted among the
    open source community, and is supported by a strong developer community. Python
    has many free libraries for you to download and use in your data science work.
  prefs: []
  type: TYPE_NORMAL
- en: Python meets developers where they are; it supports all different types of development,
    including web applications, iterative development, web services, desktop apps,
    scripting, scientific, and mathematical computing. Python is used by businesses
    as well as many universities, scientists, casual developers, and professional
    developers alike.
  prefs: []
  type: TYPE_NORMAL
- en: Throughout this chapter, the Python coding will be completed using Microsoft
    Visual Studio, which incorporates a powerful Python IDE on Windows. Visual Studio
    provides open source support for the Python language through the Python development
    and data science workloads (Visual Studio 2017) and the free **Python Tools for
    Visual Studio** (**PTVS**) (Visual Studio 2015 and earlier).
  prefs: []
  type: TYPE_NORMAL
- en: Using the DSVM, we can clean, model, analyze, and visualize our data and develop
    models using Microsoft ML Server with Python.
  prefs: []
  type: TYPE_NORMAL
- en: For Python, there are many common development studios. Since the chapter will
    use R and Python, we will use Visual Studio Community edition because it has both
    R and Python IDEs in place. For the hands-on part of the chapter, the DSVM already
    has the PTVS extension and R extensions pre-installed, so there is no need for
    us to take time to install and configure these additional items.
  prefs: []
  type: TYPE_NORMAL
- en: Set up your Python environment in Visual Studio
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Visual Studio needs to be configured so that it is using Python with Microsoft
    ML Server. This is the first step, and it only needs to be conducted once.
  prefs: []
  type: TYPE_NORMAL
- en: In Visual Studio, select the View | Other Windows | Python Environments menu
    command.
  prefs: []
  type: TYPE_NORMAL
- en: We are going to create a `cookiecutter` Python project. To do this, firstly,
    we need to install `cookiecutter`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open Command Prompt, and type in the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Then, we can proceed to use the `cookiecutter` functionality in Visual Studio
    to get off to a great start with Python and Visual Studio.
  prefs: []
  type: TYPE_NORMAL
- en: In this exercise, the code will come from a Microsoft repository, which is stored
    on GitHub.
  prefs: []
  type: TYPE_NORMAL
- en: In Visual Studio, choose File | ...
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Writing your own code with Python in Microsoft ML Server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the last section, there was an end-to-end example that demonstrated the ability
    to use machine learning with Python in Microsoft ML Server. In this hands-on walk-through,
    there will be an exploration of writing Python code from scratch using Microsoft
    ML Server.
  prefs: []
  type: TYPE_NORMAL
- en: 'Walk-through: reading data in and out in Microsoft ML Server'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this hands-on walk-through, the same Iris dataset will be used to provide
    further examples using a familiar dataset. The purpose of the code is to show
    one of the in-built datasets, and read it out to the Python output screen.
  prefs: []
  type: TYPE_NORMAL
- en: In this walk-through, we will read data in and out of Microsoft ML Server. Initially,
    the code imports the Iris dataset from the scikit-learn library. The initial code
    will print out the data in the Iris dataset. The data is assigned to the `df`
    variable , which is set to a dataframe.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the sequence of steps, in summary, of how we will proceed at a high
    level:'
  prefs: []
  type: TYPE_NORMAL
- en: It imports the Iris dataset from the scikit-learn library
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Pandas library is imported, ...
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing regression with Python in Microsoft ML Server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this example, the Iris dataset is used again, since it is already available
    as part of the Python installation. In this segment of Python code, the Python
    Seaborn library is used to produce charts and graphs. Seaborn is a Python package
    that allows us to produce interesting results that can help our machine learning
    work.
  prefs: []
  type: TYPE_NORMAL
- en: In this next demo, the code will be changed in order to produce more charts,
    and save them to the Git repository on the DSVM.
  prefs: []
  type: TYPE_NORMAL
- en: At a high level, the code uses the Iris dataset, and produces charts based on
    the data. In the last plot, the linear regression line is added for clarity.
  prefs: []
  type: TYPE_NORMAL
- en: The chart shows the relationship between the length of the sepal, and the length
    of the petals, in three species of Iris. The data is grouped by color, and it
    is clear to see that the linear regression line fits through each of the three
    species.
  prefs: []
  type: TYPE_NORMAL
- en: In the simplest invocation, the Seaborn `lmplot` function draws a scatterplot
    of two variables, `x` and `y`, and then fits the regression model `y` ~ `x`. It
    plots the resulting regression line and a 95% confidence interval for that regression.
    In the example here, it has been conducted for each of the species.
  prefs: []
  type: TYPE_NORMAL
- en: 'The code is commented at a low level as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first step is to load the Iris dataset:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, the colour scheme is set:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'This code will generate a joint plot using the Iris dataset:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The next step is to save the output to an image, and then produce a plot:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'This code will generate a `jointplot` using the Iris dataset:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we save the output to an image:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we feed back success to the user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'This code will generate a linear regression plot using the Iris dataset:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is then saved to an image:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we feed back success to the user via the console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: When the script is executed, the image files can be found in the Visual Studio
    repository folder. This is an example of where the images might be found in a
    repository folder: `C:\Users\myusername\source\repos\Python Packt Example\Python
    Packt Example`.
  prefs: []
  type: TYPE_NORMAL
- en: More data visualization charts in Python and the Microsoft Machine Learning
    service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The code will also produce two more charts: a pairplot and a jointplot.'
  prefs: []
  type: TYPE_NORMAL
- en: A pairplot sets out to plot pairwise relationships in a dataset. The pairplot
    takes variables such as petal width, petal length, sepal width, and sepal length,
    and correlates them with one another. The output is generated very quickly using
    Python in Microsoft ML Server. The visualization allows the patterns in the data
    to be seen very quickly. For example, there is an interesting relationship between
    petal length and petal width, which can be viewed from the lower row of the pairplot.
  prefs: []
  type: TYPE_NORMAL
- en: In Seaborn, a jointplot draws a plot of two variables with bivariate and univariate
    graphs. This is produced ...
  prefs: []
  type: TYPE_NORMAL
- en: Regression code walk-through with Python and Microsoft ML Server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will change the file by commenting out the existing Python code, and we
    can add our new code to the same file. It is important to know how to comment
    out code, so that the code is readable and maintainable:'
  prefs: []
  type: TYPE_NORMAL
- en: Comment out the existing Python code by inserting a hash sign, `#` , at the
    start of each line.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The code should appear as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Copy the code given previously into the file. The file should appear as illustrated
    in the next screenshot, which only shows some of the code for the purposes of
    clarity:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4a401afd-a789-4a25-ad40-30876180d563.png)'
  prefs: []
  type: TYPE_IMG
- en: To run the code, click on the file in Solution Explorer so that it is highlighted.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the Start button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The code will execute, and the Python interpreter will appear. Here is an example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/fdbf294d-5796-4119-8c87-c1c50e3117ce.PNG)'
  prefs: []
  type: TYPE_IMG
- en: Once the code finishes execution, press any key to continue, as instructed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Search for the repository folder on the DSVM to look for the images produced
    by the Python code. If you are unclear about the repository location, search for `*.png` and
    you will find the completed files.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save your work by going to File | Save All in the Visual Studio menu bar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Analyzing results in machine learning models
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'No data has meaning apart from in its context. Machine learning is the way
    forward to understand data, but it needs to be interpreted as well. At a very
    high level, this process can be depicted as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/15e94601-4495-4120-b45d-af731d44b66e.png)'
  prefs: []
  type: TYPE_IMG
- en: Data needs to be understood; data goes through an analysis process. There can
    be trade-offs between accuracy and performance. Sometimes it is better to select
    an algorithm that is less accurate in order to have better performance. Another
    advantage of choosing more approximate methods is that they naturally tend to
    avoid overfitting.
  prefs: []
  type: TYPE_NORMAL
- en: There is no one single best method for interpreting statistics ...
  prefs: []
  type: TYPE_NORMAL
- en: Measuring the fit of the model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: How well do the model's predictions actually match the observed data? It is
    crucial to understand the extent to which the predicted response value for a given
    observation is close to the actual response value for that observation.
  prefs: []
  type: TYPE_NORMAL
- en: In regression, the most common measure is the **mean squared error** (**MSE**),
    which is the average squared difference between the estimated values and the actual
    value that is estimated. If the MSE is small, then the predicted responses are
    very close to the true responses. If the MSE is large, then the predicted and
    true responses differ substantially. This is the first step in showing that the
    model is not a good fit.
  prefs: []
  type: TYPE_NORMAL
- en: Note that the analysis focuses on the MSE test data, not the MSE for the training
    data. The most interesting results use test data that the model has not seen previously,
    and this is where we focus our analysis on MSE results.
  prefs: []
  type: TYPE_NORMAL
- en: Cross validation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As we test and train our model, the MSE can vary widely across different sets
    of data. For this reason, cross-validation is important in order to understand
    the true results. Cross validation seeks to show how the model works in practice.
    The question is: Will our model generalize to an independent dataset?'
  prefs: []
  type: TYPE_NORMAL
- en: To conduct cross validation, the model is continually trained and then it is
    given a series of test sets of data. Cross validation combines the measures of
    fitness and averages them in order to derive model prediction performance.
  prefs: []
  type: TYPE_NORMAL
- en: Variance and bias
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What do we mean by the variance and bias of the results? Variance refers to
    the amount by which the predicted values would change if it was estimated using
    a different set of training data. Throughout the training process, different training
    datasets will result in different predictions, but it is hoped that the predictions
    will not vary too much between training sets.
  prefs: []
  type: TYPE_NORMAL
- en: Bias refers to the error that is introduced by simplifying a real-life problem
    to a dataset. By simplifying data into a simpler model, bias may be introduced.
    When we look at the complexities of real life, this is a common issue that needs
    to be understood and taken into account when interpreting results.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have investigated Visual Studio for Python and run through
    some interesting walk-throughs. We have learned about the modelling process using
    the **Team Data Science Process **(**TDSP**). As part of this process, we have
    looked at modeling and analyzing our results, as well as conducting data visualization
    to evangelize our work.
  prefs: []
  type: TYPE_NORMAL
