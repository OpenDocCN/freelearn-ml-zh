["```py\nimport os print(os.path.expanduser(\"~\"))\n\n```", "```py\nimport numpy as np \nimport csv \ndata_filename = \"data/ionosphere.data\"\n\n```", "```py\nX = np.zeros((351, 34), dtype='float') \ny = np.zeros((351,), dtype='bool')\n\n```", "```py\nwith open(data_filename, 'r') as input_file: \n    reader = csv.reader(input_file) \n    for i, row in enumerate(reader): \n        # Get the data, converting each item to a float \n        data = [float(datum) for datum in row[:-1]] \n        # Set the appropriate row in our dataset \n        X[i] = data \n        # 1 if the class is 'g', 0 otherwise \n        y[i] = row[-1] == 'g'\n\n```", "```py\nfrom sklearn.cross_validation import train_test_split \nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state=14)\n\n```", "```py\nfrom sklearn.neighbors import KNeighborsClassifier estimator = KNeighborsClassifier()\n\n```", "```py\nestimator.fit(X_train, y_train)\n\n```", "```py\ny_predicted = estimator.predict(X_test) \naccuracy = np.mean(y_test == y_predicted) * 100     \nprint(\"The accuracy is {0:.1f}%\".format(accuracy))\n\n```", "```py\nfrom sklearn.cross_validation import cross_val_score\n\n```", "```py\nscores = cross_val_score(estimator, X, y, scoring='accuracy') \naverage_accuracy = np.mean(scores) * 100 \nprint(\"The average accuracy is {0:.1f}%\".format(average_accuracy))\n\n```", "```py\navg_scores = [] \nall_scores = [] \nparameter_values = list(range(1, 21))  # Include 20 \nfor n_neighbors in parameter_values: \n    estimator = KNeighborsClassifier(n_neighbors=n_neighbors) \n    scores = cross_val_score(estimator, X, y, scoring='accuracy')     avg_scores.append(np.mean(scores))     \nall_scores.append(scores)\n\n```", "```py\n%matplotlib inline\n\n```", "```py\nfrom matplotlib import pyplot as plt plt.plot(parameter_values,  avg_scores, '-o')\n\n```", "```py\nX_broken = np.array(X)\n\n```", "```py\nX_broken[:,::2] /= 10\n\n```", "```py\nestimator = KNeighborsClassifier() \noriginal_scores = cross_val_score(estimator, X, y,scoring='accuracy') \nprint(\"The original average accuracy for is {0:.1f}%\".format(np.mean(original_scores) * 100)) \nbroken_scores = cross_val_score(estimator, X_broken, y,   scoring='accuracy') \nprint(\"The 'broken' average accuracy for is   {0:.1f}%\".format(np.mean(broken_scores) * 100))\n\n```", "```py\nfromsklearn.preprocessing import MinMaxScaler\n\n```", "```py\nX_transformed = MinMaxScaler().fit_transform(X)\n\n```", "```py\nX_transformed = MinMaxScaler().fit_transform(X_broken) \nestimator = KNeighborsClassifier() \ntransformed_scores = cross_val_score(estimator, X_transformed, y,    scoring='accuracy') \nprint(\"The average accuracy for is {0:.1f}%\".format(np.mean(transformed_scores) * 100))\n\n```", "```py\nfromsklearn.pipeline import Pipeline\n\n```", "```py\nscaling_pipeline = Pipeline([('scale', MinMaxScaler()), \n                             ('predict', KNeighborsClassifier())])\n\n```", "```py\nscores = cross_val_score(scaling_pipeline, X_broken, y, scoring='accuracy') \nprint(\"The pipeline scored an average accuracy for is {0:.1f}%\".format(np.mean(transformed_scores) * 100))\n\n```"]