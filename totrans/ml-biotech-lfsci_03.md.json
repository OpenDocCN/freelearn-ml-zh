["```py\n  $ pwd\n```", "```py\nUsers/alkhalifas\n```", "```py\n  $ ls\n```", "```py\n  $ mkdir machine-learning-biotech\n```", "```py\n  $ cd machine-learning-practice\n```", "```py\n  $ pwd\nUsers/alkhalifas/machine-learning-biotech\n```", "```py\n  $ cd ..\n```", "```py\n  $ vim myscript.py\n```", "```py\n# myscript.py\nimport datetime\nnow = datetime.datetime.now()\nprint(\"Hello Biotech World\")\nprint (\"The current date and time is:\")\nprint (now.strftime(\"%Y-%m-%d %H:%M:%S\"))\n```", "```py\n  $ python3 myscript.py\n```", "```py\nHello Biotech World!\nThe current date and time is:\n2021-05-23 18:40:21\n```", "```py\n  $ ps -ef\n```", "```py\n  $ ps -ef | grep python\n```", "```py\n  $ pkill -9 -f someScript.py\n```", "```py\n  $ pip install sklearn\n```", "```py\n  $ pip show sklearn\n```", "```py\n  $ pip install sklearn==0.15.2\n```", "```py\n  $ pip freeze > requirements.txt\n```", "```py\n  $ python\n```", "```py\n  $ jupyter notebook\n```", "```py\n     $ python\n  >>> x = 5\n  >>> y = 10\n  >>> z = x + y\n  >>> print(z)\n  15\n```", "```py\n  >>> x = \"biotechnology\"\n  >>> x = 3.14159\n  >>> x = True\n```", "```py\n  >>> x = 55\n  >>> type(x)\n      int\n```", "```py\n  >>> x = 55\n  >>> x = str(x)\n  >>> type(x)\n      str\n```", "```py\n>>> import statistics\n```", "```py\n>>> from statistics import *\n```", "```py\n>>> from statistics import mean\n```", "```py\n     >>> from math import exp\n     >>> EA = 50000\n     >>> R = 8.31\n     >>> T1 = 293\n\n     >>> exp(-EA / (R*T1))\n  1.2067e-09\n```", "```py\n     >>> T2 = 303\n     >>> exp(-EA / (R*T2))\n  2.3766e-09\n```", "```py\n   >>> homogenousList = [\"toluene\", \"methanol\", \"ethanol\"]\n  >>> heterogenousList = [\"dichloromethane\", 3.14, True]\n```", "```py\n  >>> len(heterogenousList)\n  3\n```", "```py\n  >>> heterogenousList[0]\n  dichloromethane\n  >>> heterogenousList[1]\n  3.14\n```", "```py\n  >>> len(homogenousList)\n  3\n  >>> homogenousList.append(\"acetonitrile\")\n  >>> len(homogenousList)\n  4\n```", "```py\n  >>> singleChemical = {\"name\" : \"acetonitrile\",\n          \"exp_date\" : \"5/26/2021\"}\n```", "```py\n>>> singleChemical[\"name\"]\n  acetonitrile\n```", "```py\n    import numpy as np\n    newArray = np.array([1,2,3,4,5,6,7,8,9,10])\n    ```", "```py\n      >>> newArray= np.append(newArray,25)\n      >>> newArray\n       [1,2,3,4,5,6,7,8,9,10,25]\n    ```", "```py\n      >>> len(newArray)\n       11\n    ```", "```py\n      >>> firstHalf = newArray[:5]\n      >>> firstHalf\n       [1,2,3,4,5]\n    ```", "```py\ndef squaring_function(x):\n  # A function that squares the input\n  return x * x\n```", "```py\n  >>> num = squaring_function(5)\n  >>> print(num)\n  25\n```", "```py\ninput_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\noutput_list = []\nfor val in input_list:\n    squared_val = squaring_function(val)\n    output_list.append(squared_val)\n    print(val, \" squared is: \", squared_val)\n```", "```py\ncurrent_val = 0\nwhile current_val < 10:\n    print(current_val)\n    current_val += 1\n```", "```py\n   >>> my_squared_list = [squaring_function(val) for val in  input_list]\n```", "```py\n>>> import pandas as pd\n>>> \n df = pd.DataFrame([[1,2,3],[4,5,6],[7,8,9]],columns = ['col1','col2', 'col3'])\n>>> print(df)\n```", "```py\n>>> df.columns = [\"ColumnA\", \"ColumnB\", \"ColumnC\"]\n```", "```py\n>>> df[\"ColumnC_Squared\"] = df[\"ColumnC\"] ** 2\n>>> print(df)\n```", "```py\n  >>> import pandas as pd\n  >>> df = pd.read_csv('dataset_lipophilicity_sd.csv')\n```", "```py\n  >>> df = df[[\"ID\", \"TPSA\", \"MolWt\", \"LogP\"]]\n  >>> df.head()\n```", "```py\n  >>> df.tail()\n```", "```py\nimport requests\nr = requests.get('https://raw.githubusercontent.com/alkhalifas/node-api-books/master/services/books.json')\ndata = r.json()\n```", "```py\n  >>> data[0]\n```", "```py\n  >>> data[0][\"type\"]\n  HARD_COVER\n```", "```py\n  alkhalifas@titanium ~ % pip install tika\n```", "```py\n  from tika import parser\n   raw = parser.from_file(\"./datasets/COVID19-CDC.pdf\")\n   print(raw['content'])\n```", "```py\n>>> import pickle\n>>> cell_lines = [\"COS\", \"MDCK\", \"L6\", \"HeLa\", \"H1\", \"H9\"]\n```", "```py\n>>> pickledList = open('./tmp/cellLineList.pkl', 'wb')\n>>> pickle.dump(cell_lines, pickledList)\n```", "```py\n>>> pickledList = open('./tmp/cellLineList.pkl', 'rb')\n>>> cell_lines_loaded = pickle.load(pickledList)\n>>> print(cell_lines_loaded)\n[\"COS\", \"MDCK\", \"L6\", \"HeLa\", \"H1\", \"H9\"]\n```", "```py\n    import datetime\n    from dateutil import parser\n    ```", "```py\n    class Chemical:\n    ```", "```py\n    class Chemical:\n            def __init__(self, name, symbol, exp_date, count):\n                self.name = name\n                self.symbol = symbol\n                self.exp_date = exp_date\n                self.count = count\n    ```", "```py\n            def isExpired(self):\n                todays_date = datetime.datetime.today()\n                exp_date = parser.parse(self.exp_date)\n                return todays_date > exp_date\n    ```", "```py\n    >>> chem1 = Chemical(name=\"Toluene\", symbol=\"TOL\", exp_date=\"2019-05-20\", count = 5)\n    ```", "```py\n    name field was not followed by parentheses in the way we have previously seen. This is because name is only a field that is associated with the class and not a function. \n    ```", "```py\n    self argument.\n    ```", "```py\n    >>> chem2 = Chemical(name=\"Toluene\", symbol=\"TOL\", exp_date=\"2021-11-25\", count = 4)\n    >>> chem3 = Chemical(name=\"Dichloromethane\", symbol=\"DCM\", exp_date=\"2020-05-13\", count = 12)\n    >>> chem4 = Chemical(name=\"Methanol\", symbol=\"MET\", exp_date=\"2021-01-13\", count = 5)\n    ```", "```py\n            def summarizer(self):\n                print(\"The chemical\", self.name, \"with the symbol (\",self.symbol,\") has the expiration date\", self.exp_date)\n    ```", "```py\n    >>> print(chem1.summarizer())\n    The chemical Toluene with the symbol ( TOL ) has the expiration date 2019-05-20\n    ```", "```py\n            def setCount(self, value):\n                self.count = value\n    ```", "```py\n    >>> chem1 = Chemical(name=\"Toluene\", symbol=\"TOL\", exp_date=\"2019-05-20\", count = 5)\n    >>> chem1.count\n      5\n    >>> chem1.setCount(25)\n    >>> chem1.count\n    25\n    ```", "```py\nfrom rdkit import Chem \n```", "```py\nSMILES = \"[Br-].[Br-].CCCCCCCCCCC[N+]1=CC=C(CCCC2=CC=[N+](CCCCCCCCCCC)C=C2)C=C1\" \n```", "```py\nmolecule = Chem.MolFromSmiles(SMILES) \nmolecule \n```", "```py\ntail_pattern = Chem.MolFromSmarts('CCCCCCCCCCC') \npatter \n```", "```py\nmolecule.HasSubstructMatch(tail_pattern) \n```", "```py\nfrom rdkit import DataStructs \nfrom rdkit.Chem import Draw \nmol_sim = [Chem.MolFromSmiles('[Br-].[Br-].CCCCCC[N+]1=CC=C(CCCC2=CC=[N+](CCCCCC)C=C2)C=C1'), Chem.MolFromSmiles('[Br-].[Br-].CCCCCCCCCCC[N+]1=CC=C(CCCC2=CC=[N+](CCCCCCCCCCC)C=C2)C=C1')] \n```", "```py\nfps = [Chem.RDKFingerprint(x) for x in mol_sim] \n```", "```py\nDataStructs.FingerprintSimilarity(fps[0],fps[1], metric=DataStructs.CosineSimilarity) \n```"]