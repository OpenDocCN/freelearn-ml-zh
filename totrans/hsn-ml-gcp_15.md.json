["```py\npip install gym\n```", "```py\nimport gym\nenv = gym.make('CartPole-v0')\nenv.reset()\nfor i in range(1000):\n    env.render()\n    env.step(env.action_space.sample())\n```", "```py\nimport gym\n```", "```py\nenv = gym.make('CartPole-v0')\n```", "```py\nenv.reset()\n```", "```py\nfor i in range(1000):\n    env.render()\n    env.step(env.action_space.sample())\n```", "```py\npython cart.py\n```", "```py\nimport gym\nenv = gym.make('CartPole-v0')\nobservation = env.reset()\nfor i in range(1000):\n    env.render()\n    print(observation)\n    observation, reward, done, info = env.step(env.action_space.sample())\n```", "```py\nimport gym\nimport numpy as np\nenv = gym.make('CartPole-v0')\nHighReward = 0\nBestWeights = None\nfor i in range(200):\n  observation = env.reset()\n  Weights = np.random.uniform(-1,1,4)\n  SumReward = 0\n  for j in range(1000):\n    env.render()\n    action = 0 if np.matmul(Weights,observation) < 0 else 1\n    observation, reward, done, info = env.step(action)\n    SumReward += reward\n    print( i, j, Weights, observation, action, SumReward, BestWeights)\n\n  if SumReward > HighReward:\n    HighReward = SumReward\n    BestWeights = Weights\n```", "```py\nimport gym\nimport numpy as np\n```", "```py\nenv = gym.make('CartPole-v0')\n```", "```py\nHighReward = 0\nBestWeights = None\n```", "```py\nfor i in range(200):\n```", "```py\n  observation = env.reset() \n```", "```py\nWeights = np.random.uniform(-1,1,4)\n```", "```py\nSumReward = 0\n```", "```py\nfor j in range(1000):\n```", "```py\nenv.render()\n```", "```py\naction = 0 if np.matmul(Weights,observation) < 0 else 1\n```", "```py\nobservation, reward, done, info = env.step(action)\n```", "```py\nSumReward += reward\n```", "```py\nprint( i, j, Weights, observation, action, SumReward, BestWeights)\n```", "```py\nif SumReward > HighReward:\n```", "```py\nHighReward = SumReward\n```", "```py\nBestWeights = Weights\n```", "```py\nobservation = env.reset()\nfor j in range(100):\n  env.render()\n  action = 0 if np.matmul(BestWeights,observation) < 0 else 1\n  observation, reward, done, info = env.step(action)\n  print( j, action)\n```", "```py\nobservation = env.reset() \n```", "```py\nfor j in range(100):\n```", "```py\nenv.render()\n```", "```py\naction = 0 if np.matmul(BestWeights,observation) < 0 else 1\n```", "```py\nobservation, reward, done, info = env.step(action)\n```"]