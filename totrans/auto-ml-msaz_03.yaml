- en: '*Chapter 2*: Getting Started with Azure Machine Learning Service'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we know that the key to delivering return on investment in artificial
    intelligence is delivering machine learning (ML) projects at a brisk pace, we
    need to learn how to use **Automated Machine Learning** (**AutoML**) to achieve
    that goal. Before we can do that, however, we need to learn how to use the **Azure
    Machine Learning Service** (**AMLS**). AMLS is Microsoft's premier ML platform
    on the Azure cloud.
  prefs: []
  type: TYPE_NORMAL
- en: We will begin this chapter by creating an Azure account and creating an AMLS
    workspace. Once you have created a workspace, you will proceed to create different
    types of compute to run Python code and ML jobs remotely using a cluster of machines.
    Next, you will learn how to work with data using the Azure dataset and datastore
    constructs. Finally, we will provide an overview of AutoML. This will boost your
    ability to create high-performing models.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating your first AMLS workspace
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building compute to run your AutoML jobs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with data in AMLS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding how AutoML works on Azure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to complete the exercises in this chapter, you will need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Access to the internet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A web browser, preferably Google Chrome or Microsoft Edge Chromium
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Microsoft account
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating your first AMLS workspace
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Navigating Microsoft Azure for the first time can be a daunting experience.
    With hundreds of services with similar capabilities, it's easy to get lost. Therefore,
    it is important for you to follow this guide step by step, beginning by creating
    an Azure account. If you already have an Azure account, you can skip ahead to
    the *Creating an AMLS workspace* section.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an Azure account
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s begin:'
  prefs: []
  type: TYPE_NORMAL
- en: To create an Azure account, navigate to [https://azure.microsoft.com](https://azure.microsoft.com).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click the green **Start free** button, as shown in the following screenshot.
    Depending on your location, this button may be located in a slightly different
    location. Once you''ve clicked this button, you will be asked to select an email
    address associated with your Microsoft account:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If you use Microsoft Windows, you should have a Microsoft account. If you do
    not, then you can create a Microsoft account by following the instructions at
    [https://account.microsoft.com/account](https://account.microsoft.com/account).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.1 – Microsoft Azure account creation screen ](img/B16595_02_001.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.1 – Microsoft Azure account creation screen
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft will ask you to fill in some information about your country, first
    name, last name, email address, and phone number. You will then have to verify
    your identity via a phone number and enter your credit card information.
  prefs: []
  type: TYPE_NORMAL
- en: Note that you will not be charged for creating an Azure account unless you upgrade.
    Once you sign the agreement, you will have $200 free credit to use for your first
    30 days of Azure. You will not be automatically charged at the end of the 30-day
    period.
  prefs: []
  type: TYPE_NORMAL
- en: Important tip
  prefs: []
  type: TYPE_NORMAL
- en: If you have already signed up for a Microsoft Azure free account with an email
    address, you will not receive an additional $200 free credit. It can only be received
    once, and you will only be able to choose the pay-as-you-go option. In this case,
    create a new Microsoft account with a different email address and try again.
  prefs: []
  type: TYPE_NORMAL
- en: With an account in place, you can now create resources within Microsoft Azure.
    Hundreds of resources are available, and it can be tempting to explore them. Stay
    focused. Setting up AMLS is the first step you must take toward using AutoML.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an AMLS workspace
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once you have created an Azure account, you can create an **Azure Machine Learning
    Service (AMLS)** workspace. An AMLS workspace is a centralized resource for all
    your ML work on Azure. It also provides access to **AML studio**. This studio
    is a graphical web portal that allows easy, intuitive access to all the different
    components of the AMLS workspace. Let''s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: Begin by navigating to [https://portal.azure.com](https://portal.azure.com).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Create a resource** button, which should be in a blue cross. Resources
    are simply Azure services. Every Azure service, be it a virtual machine, cloud
    database, or ML tool, counts as a resource.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After clicking the blue cross, type `Machine Learning` into the search box and
    press *Enter*. You will see a new screen with a large blue flask in the top-right
    corner. This is the AML symbol.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Create**. The following screenshot shows the process flow:![Figure 2.2
    – Creating an AMLS resource ](img/B16595_02_002.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Figure 2.2 – Creating an AMLS resource
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You will then be presented with a screen asking you to select a subscription,
    fill in a resource group, create a workspace name, select a region, and select
    a workspace edition. If you have multiple Azure subscriptions, select the one
    associated with the account you would like to use. A **resource group** is simply
    a collection of Azure resources. Create a new one by following the naming conventions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Important tip
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Different Azure resources have different naming conventions. Resource groups
    must consist of alphanumeric characters, periods, hyphens, parentheses, and underscores,
    while AMLS workspaces must consist of alphanumeric characters, hyphens, and underscores.
    Simply follow any instructions that appear if you provide an incorrect name.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Fill in the rest of the form by naming your AMLS workspace and selecting a region.
    Pick a region close to where you live. For example, if you live in Chicago, select
    North Central US or East US, but don't select North Europe. After filling out
    all the values, your form should look similar to what's shown in the following
    screenshot.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Notice that, in addition to the AMLS workspace, you are also creating additional
    resources automatically. A **container registry** to hold containerized code will
    be automatically created for you if you require it, so do not create one:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.3 – Example of a filled-in AMLS workspace creation form ](img/B16595_02_003.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Figure 2.3 – Example of a filled-in AMLS workspace creation form
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Finish creating your AMLS workspace by clicking **Review + create**, followed
    by **Create**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will see a screen that says **Deployment is in progress**, and four different
    Azure resources will be created. This will include your AMLS workspace, a **Storage
    account** instance for storing your data, an **Azure Key Vault** instance for
    storing your passwords, and an **Application Insights** resource for monitoring
    your ML jobs. Do not delete any of these resources once they have been created.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Important Tip
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Once you've created a ML pipeline or a real-time endpoint, an Azure container
    registry will be automatically created. Like the other automatically created resources,
    do not delete it.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Creating an AMLS workspace with code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Alternatively, you can create an AMLS workspace by using the **Azure CLI** with
    either **Bash** or **PowerShell**. The **Azure command-line interface** (**Azure
    CLI**) is an interface you can use to create and manage Azure resources. Bash
    is the UNIX shell and command language, while PowerShell is a Microsoft-specific
    framework. The Azure CLI can be accessed via the front page of [https://portal.azure.com](https://portal.azure.com)
    by clicking the computer screen icon at the top left. When you hover over it,
    the words **Cloud Shell** will pop up.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create an AMLS workspace, type in the following commands in the order shown
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the Azure CLI ML extension with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, create a resource group. Make sure that you specify your Azure location.
    `-n` denotes the resource group''s name, while `-l` specifies its location:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Instantiate your AMLS workspace. `-w` denotes your workspace name, while `-g`
    specifies your resource group. Make sure it matches the resource group you created
    in the previous step:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You can learn more about workspace-specific commands at [https://docs.microsoft.com/en-us/azure/machine-learning/reference-azure-machine-learning-cli](https://docs.microsoft.com/en-us/azure/machine-learning/reference-azure-machine-learning-cli).
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have created an AMLS workspace, you are ready to explore its many
    objects. You will do this through AML studio, a GUI built on top of your AMLS
    workspace.
  prefs: []
  type: TYPE_NORMAL
- en: Navigating AML studio
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With your AMLS workspace created, you can now navigate to AML studio.
  prefs: []
  type: TYPE_NORMAL
- en: 'Either navigate to [https://ml.azure.com](https://ml.azure.com) or open your
    AMLS workspace and click **Launch Now**, which can be found in the middle of the
    screen. AML studio is your one-stop shop for your AMLS needs. The following screenshot
    shows the studio and its navigation bar:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.4 – AML studio home page and navigation ](img/B16595_02_004.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.4 – AML studio home page and navigation
  prefs: []
  type: TYPE_NORMAL
- en: 'Your AML studio can be quite intimidating at first. With many tabs to navigate
    and a plethora of unfamiliar terms, many first-time users get lost. To make your
    journey easier, here''s a description of each tab and what it does:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Home** returns you to the AML studio home page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Notebooks** lets you write code using **Jupyter** or **JupyterLab**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Automated ML (preview)** lets you run AutoML jobs using a guided user interface.
    It is currently in preview mode.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Designer (preview)** lets you transform data and create ML models using a
    guided user interface. It is currently in preview mode.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Datasets** are pointers to files in Azure Storage accounts or SQL queries
    in Azure SQL databases. You can use this tab to create new datasets or profile,
    update, and retrieve information on existing datasets.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Experiments** are records of your ML training jobs on Azure. Experiments
    contains the results of your runs, along with logs, charts, and graphs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Pipelines** keeps track of any ML pipelines you have created. Pipelines are
    used for batch scoring or model training and are commonly scheduled using Azure
    Data Factory. Use this tab to retrieve your pipeline names and IDs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Models** keeps track of any ML models you have trained and registered to
    your AMLS workspace. Use this tab to keep track of them.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Endpoints** keeps track of any real-time endpoints you have created for real-time
    scoring, as well as any pipeline endpoints you have created. You can also find
    pipeline endpoints in the **Pipelines** tab.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Compute** lets you create and access **compute instances** for running Jupyter,
    JupyterLab, and R Studio notebooks. It also lets you create **compute clusters**
    for running remote training jobs. We will create both in the next section.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Datastores** are pointers to blob containers on Azure Storage accounts or
    to Azure SQL databases. You can use this tab to create new datastores and retrieve
    information about your existing datastores.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Data Labeling** is useful for labeling image data. As you manually label
    images, you can train a machine model to make this process automatic in the future.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Throughout the rest of this chapter, we will explore the **Compute**, **Dataset**,
    and **Datastore** tabs. As we proceed throughout this book, we will use the **Automated
    ML**, **Experiment**, **Model**, **Pipeline**, and **Endpoint** tabs. We will
    not cover the **Notebook**, **Designer**, or **Data Labeling** tabs. To run AutoML
    jobs through the GUI or through code, you will first need compute, so let's start
    there.
  prefs: []
  type: TYPE_NORMAL
- en: Building compute to run your AutoML jobs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first time you open AML studio, navigate to the **Compute** tab to create
    a compute instance and a compute cluster. Once you open the tab, you will see
    four headings at the top: **Compute instances**, **Compute clusters**, **Inference
    clusters**, and **Attached compute**. Let''s take a look at these in more detail:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Compute instances** are virtual machines that you can use to write and run
    Python code in Jupyter or JupyterLab notebooks; you can also use a compute instance
    to write R code using R Studio.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Compute clusters** are groups of virtual machines used to train ML models
    remotely. You can kick off jobs on a compute cluster and continue working on code
    in your compute instance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Inference clusters** are groups of virtual machines used to score data in
    real time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Attached compute** refers to using Databricks or HDInsight compute to run
    big data jobs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's see them in action.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a compute instance
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''ll start with a compute instance:'
  prefs: []
  type: TYPE_NORMAL
- en: Make sure the tab at the top is highlighted in black. Then, click the **Add
    New** button, which is the blue cross highlighted in the following screenshot:![Figure
    2.5 – Creating a compute instance ](img/B16595_02_005.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Figure 2.5 – Creating a compute instance
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You will be asked to select a virtual machine type and a virtual machine size.
    Select **CPU** for your virtual machine type and **Standard_DS3_v2** as your virtual
    machine size. **Standard_DS3_v2** is the recommended virtual machine for most
    ML jobs using small- to medium-sized datasets.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'For larger datasets, you will want virtual machines with more RAM. As a rough
    guideline, we recommend having 20 times more RAM than the size of your data in
    CSV format. Once you have entered your settings, as shown in the following screenshot,
    click **Next**:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Important Tip – CPU versus GPU
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: For the majority of your AutoML and ML jobs, CPUs will be sufficient. When you
    are training deep learning models, however, you want to select the more expensive
    GPU virtual machines.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.6 – Compute instance settings ](img/B16595_02_006.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Figure 2.6 – Compute instance settings
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You will then be asked to name your compute instance. Give it any name you wish
    or use `automl-compute-instance`, as shown in the following screenshot, and click
    **Create**:![Figure 2.7 – Naming your compute instance ](img/B16595_02_007.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Figure 2.7 – Naming your compute instance
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now that you have created a compute instance, you can start coding to complete
    the rest of your tasks or you can continue to use the GUI. To write in Python,
    simply open the link to **Jupyter**, as shown in the following screenshot:![Figure
    2.8 – Opening a Jupyter notebook ](img/B16595_02_008.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Figure 2.8 – Opening a Jupyter notebook
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You can begin coding by creating a Python notebook in Jupyter. To do this,
    click the **New** button at the top right of the screen. From the dropdown, select
    the latest version of Python with AzureML, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.9 – Creating a new Python notebook ](img/B16595_02_009.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.9 – Creating a new Python notebook
  prefs: []
  type: TYPE_NORMAL
- en: Now, you are ready to start coding!
  prefs: []
  type: TYPE_NORMAL
- en: Creating a compute cluster
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Your next step is to create a compute cluster so that you can run AutoML jobs
    using the visual interface. You can create a compute cluster either using code
    in a Jupyter notebook or through the GUI.
  prefs: []
  type: TYPE_NORMAL
- en: To create a compute cluster through the GUI, click the **Compute** tab, click
    **Compute clusters**, and then click the **Create** button, as shown in the following
    screenshot:![Figure 2.10 – Creating a compute cluster](img/B16595_02_010.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Figure 2.10 – Creating a compute cluster
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: There are more settings when it comes to creating a compute cluster. First,
    create a name by following the naming convention. Compute clusters can only have
    names that are 16 characters long, so think carefully. Your region is automatically
    selected so that it matches your workspace.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'As we did previously, select **CPU** as the virtual machine''s type and **Standard_DS3_v2**
    as the virtual machine''s size. For virtual machine priority, select **Dedicated**
    instead of **Low priority**. Jobs running on low-priority virtual machines may
    be interrupted in periods of high usage. Then, click **Next**, as shown in the
    following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.11 – Compute cluster settings – part 1 ](img/B16595_02_011.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Figure 2.11 – Compute cluster settings – part 1
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: On the next page, begin by naming your compute cluster while following the naming
    convention. Compute clusters can only have names that are 16 characters long,
    so think carefully. Then, select the number of nodes. This is the most important
    difference between compute clusters and compute instances.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With compute instances, you have a single node to run your jobs; with clusters,
    you can set the minimum and maximum numbers of nodes, and they will autoscale
    according to your job. AutoML makes use of compute clusters by training different
    models in parallel on separate nodes.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Set your minimum node count to `0` to minimize your costs when no jobs are
    running and set your maximum node count to `4`. Lastly, change the number of seconds
    before nodes scale down to `1200` seconds, or `20` minutes, to keep your machines
    from shutting down while you work. Check your settings against those shown in
    the following screenshot and click the **Create** button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.12 – Compute cluster settings – part 2 ](img/B16595_02_012.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.12 – Compute cluster settings – part 2
  prefs: []
  type: TYPE_NORMAL
- en: Creating a compute cluster with code
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can also create a compute cluster using Python code in a Jupyter notebook.
    Let''s take a look:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, import the necessary packages so that you can connect to your AMLS workspace
    and create your compute cluster:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, connect to your AMLS workspace with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, set your variables so that they match the settings you used when you
    created the cluster on the GUI:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once you have stored the variables, create a provisioning configuration for
    your compute cluster by using the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, create the compute target:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Next, we will see another way to create the compute clusters and instances.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a compute cluster and compute instance with the Azure CLI
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A third way to create both compute clusters and compute instances is through
    the Azure CLI. To do so, open the Azure CLI by navigating to [https://portal.azure.com](https://portal.azure.com)
    and clicking on the computer screen icon in the top right of the screen. When
    you hover over the icon, it will say *Cloud Shell*. Once it''s opened, do the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a compute instance. `-n` denotes the name of your compute instance,
    while `-s` specifies your virtual machine''s size:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a compute cluster. `-n` denotes the name of your compute cluster, while
    `-s` specifies your virtual machine''s size. You also need to set your minimum
    and maximum numbers of nodes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You now know three ways you can create compute on AMLS: through the GUI, through
    Python code, and through the Azure CLI. By creating compute, you can now run all
    the AutoML jobs you want. Think of compute as the engine of AutoML. Like any engine,
    however, it requires fuel to run. If compute is the engine of AutoML, data is
    its fuel.'
  prefs: []
  type: TYPE_NORMAL
- en: Working with data in AMLS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that you've created a compute, all you need to do is create a dataset and
    you will be ready to run your first AutoML job. **Datasets** are simply pointers
    to files on your **Storage account** or pointers to SQL queries on Azure SQL databases.
  prefs: []
  type: TYPE_NORMAL
- en: A dataset is not a file itself. You can create datasets from local files, from
    SQL queries, or from files in your storage accounts. **Azure Open Datasets**,
    publicly available data curated by Microsoft, can also be registered as datasets.
    For this exercise, we will create a dataset using the Diabetes open dataset.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a dataset using the GUI
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s begin:'
  prefs: []
  type: TYPE_NORMAL
- en: Click the **Dataset** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click the `Sample: Diabetes`, `Sample: OJ Sales Simulated Data`, and `The MNIST
    database of handwritten digits` are useful for demoing ML. You can use Diabetes
    for regression, OJ Sales for forecasting, and MNIST for deep learning image recognition.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type `Diabetes` into the search bar, click the **Sample: Diabetes** box, and
    then click **Next**, as shown in the following screenshot:![Figure 2.14 – Selecting
    the sample – Diabetes open dataset ](img/B16595_02_014.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Figure 2.14 – Selecting the sample – Diabetes open dataset
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You will now be asked to name your dataset. Dataset names must be unique in
    your workspace. Unlike many other Azure artifacts, dataset names may contain spaces,
    but they may not begin or end with a white space. Datasets also contain version
    numbers, beginning with 1.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Every time you update a dataset so that it points to a different file with
    updated data, a new version will be created. Give your dataset the name `Diabetes
    Sample` and click **Create**, as shown in the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.15 – Naming your dataset ](img/B16595_02_015.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.15 – Naming your dataset
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations! Now, you have a dataset that you can use for AutoML.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a dataset using code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Like compute clusters, you can also create datasets entirely from code:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Begin by loading in the following packages. `Diabetes` makes `Sample: Diabetes`
    available, while `Dataset` lets you create, register, and use datasets:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once you have imported your packages, run the following code to pull in Diabetes
    data as a tabular dataset. **Tabular datasets** refer to data that contains rows
    and columns, whereas **file datasets** are used for non-tabular data such as image
    files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, give your dataset a name and register it in your workspace. To do this,
    you will need the workspace code we used earlier while making a compute cluster:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once a dataset has been registered to your AMLS workspace, it''s extremely
    easy to call it in the future. Simply navigate to the **Dataset** tab, select
    your dataset, and hit **Consume** to obtain the code you need to call your dataset.
    Click the folded page icon next to **Sample usage** to copy the code to your clipboard,
    as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.16 – Using your dataset ](img/B16595_02_016.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.16 – Using your dataset
  prefs: []
  type: TYPE_NORMAL
- en: You have now learned how to create a dataset using the GUI and code. Datasets
    are useful not only for AutoML but for all tasks within AMLS. Accessing datasets
    is as easy as copying automatically generated code into the studio. Try creating
    your own from local files using the GUI before moving on to the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Your AutoML is ready to run. You built the engine in the previous section and
    now you have your fuel; that is, your data. Before you give AutoML a try, however,
    it's important to understand how it works. You wouldn't want to drive it into
    a ditch, after all.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding how AutoML works on Azure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before running your first AutoML experiment, it's important to understand how
    AutoML works on Azure. AutoML is more than just machine learning, after all. It's
    also about data transformation and manipulation.
  prefs: []
  type: TYPE_NORMAL
- en: 'As shown in the following diagram, you can divide the stages of AutoML into
    roughly five parts: **Data Guardrails Check**, **Intelligent Feature Engineering**,
    **Iterative Data Transformation**, **Iterative ML Model Building**, and **Model
    Ensembling**. Only at the end of this process does AutoML produce a definitive
    best model:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.17 – The Azure AutoML process ](img/B16595_02_017.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.17 – The Azure AutoML process
  prefs: []
  type: TYPE_NORMAL
- en: Let's take a closer look at each step in this process.
  prefs: []
  type: TYPE_NORMAL
- en: Ensuring data quality with data guardrails
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Data guardrails** check to make sure that your data is in the correct format
    for AutoML, and if it is not, it will alter the data accordingly. There are currently
    six main checks that are performed on your data. Two of the checks – one to detect
    missing values and another to detect high-cardinality columns – will occur on
    every dataset. The other four checks are problem- or setting-dependent.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Missing feature values imputation** will detect any null values in your dataset.
    **High-cardinality feature handling**, on the other hand, will identify any categorical
    columns with a large number of unique values. These are both important for the
    next step; that is, **Intelligent Feature Engineering**.'
  prefs: []
  type: TYPE_NORMAL
- en: Unlike the first two checks, **validation split handling** will only occur if
    you set the validation configuration to **auto**. We will go over all of the different
    settings in *Chapters 4*, *5*, and *6*. This check automatically splits the data
    into training and test sets so that you don't have to. It's one of the many ways
    that AutoML speeds up the data science process.
  prefs: []
  type: TYPE_NORMAL
- en: '**Class balancing detection** is specific to classification problems that are
    trying to predict a category, while **memory issues detection** and **frequency
    detection** are specific to forecasting problems that are trying to predict a
    future number. More on these checks will be discussed in [*Chapter 5*](B16595_05_ePub.xhtml#_idTextAnchor068)*,
    Building an AutoML Classification Solution*, and [*Chapter 6*](B16595_06_ePub.xhtml#_idTextAnchor081)*,
    Building an AutoML Forecasting Solution*, which cover classification and forecasting,
    respectively.'
  prefs: []
  type: TYPE_NORMAL
- en: Improving data with intelligent feature engineering
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once your data has passed the data guardrails check, the next step is **intelligent
    feature engineering**. This consists of filling in missing values, dealing with
    high-cardinality categorical features, generating additional features, and one-hot
    encoding categorical features. More advanced feature engineering techniques using
    k-means clustering, weight of evidence, and advanced text analytics are also applied
    here.
  prefs: []
  type: TYPE_NORMAL
- en: To begin, any columns consisting of all missing values, identical values, or
    extremely high cardinality (ID fields, GUIDs, and so on) will be automatically
    removed. Next, your missing numeric values will be filled in with the average
    (mean) of the column, while your missing categorical values will be filled with
    the most common value.
  prefs: []
  type: TYPE_NORMAL
- en: Following missing value imputation, additional columns will be generated for
    datetime features and text features. Datetime features include year, month, day,
    day of week, day of year, quarter, week of the year, hour, minute, and second.
    Text features include term frequency for groups of one, two, and three words.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: It's sometimes better to fill in your missing values with measures other than
    the mean or most common value. In this case, fill in your data before it reaches
    AutoML.
  prefs: []
  type: TYPE_NORMAL
- en: '**One-hot encoding** is then applied to all categorical columns. Simply put,
    this means that columns of 1s and 0s are created to represent each unique value
    in your original column. If your original column was *animal*, a dog will have
    a *1* in the newly created dog column and a *0* in all other animal columns. High-cardinality
    categorical columns will have grouped columns (*dog-cat*) created instead.'
  prefs: []
  type: TYPE_NORMAL
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: Advanced feature engineering is also applied; these techniques require a high
    degree of specialized knowledge in data science and text analytics. If you would
    like to learn more, please check Microsoft's *Featurization in Automated ML* documentation,
    located at [https://docs.microsoft.com/en-us/azure/machine-learning/how-to-configure-auto-features](https://docs.microsoft.com/en-us/azure/machine-learning/how-to-configure-auto-features).
  prefs: []
  type: TYPE_NORMAL
- en: Normalizing data for ML with iterative data transformation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: ML models often perform better when you scale data. For example, if you have
    one column of numeric data with values between 5 and 10 and another column with
    values between 1 and 10 million, it's often better to normalize each column so
    that its minimum value is 0 and its maximum value is 1\. There are many types
    of normalization, and luckily, AutoML performs them for you with **iterative data
    transformation**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Every time AutoML trains a new model, it begins by scaling your data using
    one of seven methods. These seven methods are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**StandardScaler**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**MinMaxScaler**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Maximum absolute value scaler**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**RobustScaler**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**PCA**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Truncated Singular Value Decomposition**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SparseNormalizer**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Usually, you would have to code these yourself and try each one to determine
    which scaling method works best, but with AutoML, you don't even have to think
    about it.
  prefs: []
  type: TYPE_NORMAL
- en: Training models quickly with iterative ML model building
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The core of Azure AutoML is **iterative ML model building**. AutoML will train
    models in parallel based on your settings from an extensive list of algorithms.
    Microsoft's AutoML team has only selected the best-performing algorithms models
    to be included in AutoML, and before adding a new one, it undergoes extensive
    testing. This ensures high model performance.
  prefs: []
  type: TYPE_NORMAL
- en: As you watch AutoML train models, you will often notice that it uses the same
    algorithm over and over again. In this case, it's trying out different combinations
    of hyperparameters to achieve a higher score. Hyperparameters are simply settings
    you can set that are specific to an algorithm, such as **tree depth** for decision
    trees or **loss** in stochastic gradient descent.
  prefs: []
  type: TYPE_NORMAL
- en: Speaking of scores, each type of problem – regression, classification, and forecasting
    – has different metrics you can use to score. AutoML also uses a different set
    of algorithms for each problem type. More information on both scoring metrics
    and algorithms is found in *Chapters 4, 5*, and *6*, which are on regression,
    classification, and forecasting, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: Getting the best results with ML model ensembling
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: AutoML will keep training ML models until it reaches a set time limit or a set
    limit on the number of models. Once either of these limits is passed, it will
    perform **machine learning model ensembling** using a **voting ensemble** and
    a **stack ensemble**. Voting ensembles score data based on the weighted averages
    of your best models, while stack ensembles train a meta-model based on the predictions
    of your best models.
  prefs: []
  type: TYPE_NORMAL
- en: After training your ensemble models, AutoML will stop running and output the
    best model. Either the voting ensemble or stack ensemble will usually be your
    best-performing model. Sometimes, however, another model will slightly outperform
    both.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you have learned about all the prerequisites that are necessary
    for creating AutoML solutions in Azure. You created an AMLS workspace and accessed
    AML studio before creating the necessary compute to run and write your AutoML
    jobs. You then loaded data into a datastore and registered it as a dataset to
    make it available for your AutoML runs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Importantly, you should now understand the four steps of the AutoML process:
    a data guardrails check, intelligent feature engineering, data transformation,
    and iterative ML model building. Everything you have done in this chapter will
    enable you to create a ML model in record time.'
  prefs: []
  type: TYPE_NORMAL
- en: You are now ready for [*Chapter 3*](B16595_03_ePub.xhtml#_idTextAnchor044),
    *Training Your First AutoML Model*, where you will build your first AutoML model
    through a **GUI**. This chapter will cover a range of topics, from examining data
    to scoring models and explaining results. By the end of that chapter, you will
    not only be able to train models with AutoML, but you will also be able to show
    and explain your results to end users in a way that's guaranteed to earn their
    trust.
  prefs: []
  type: TYPE_NORMAL
