["```py\n\n>>> library(readr)\n>>> df = read_csv(\"https://raw.githubusercontent.com/fivethirtyeight/data/master/comic-characters/marvel-wikia-data.csv\")\n>>> head(df,5)\n# A tibble: 16,376 × 13\n   page_id name              urlslug ID    ALIGN EYE   HAIR  SEX   GSM   ALIVE APPEARANCES\n     <dbl> <chr>             <chr>   <chr> <chr> <chr> <chr> <chr> <chr> <chr>       <dbl>\n 1    1678 \"Spider-Man (Pet… \"\\\\/Sp… Secr… Good… Haze… Brow… Male… NA    Livi…        4043\n 2    7139 \"Captain America… \"\\\\/Ca… Publ… Good… Blue… Whit… Male… NA    Livi…        3360\n 3   64786 \"Wolverine (Jame… \"\\\\/Wo… Publ… Neut… Blue… Blac… Male… NA    Livi…        3061\n 4    1868 \"Iron Man (Antho… \"\\\\/Ir… Publ… Good… Blue… Blac… Male… NA    Livi…        2961\n 5    2460 \"Thor (Thor Odin… \"\\\\/Th… No D… Good… Blue… Blon… Male… NA    Livi…        2258\n 6    2458 \"Benjamin Grimm … \"\\\\/Be… Publ… Good… Blue… No H… Male… NA    Livi…        2255\n 7    2166 \"Reed Richards (… \"\\\\/Re… Publ… Good… Brow… Brow… Male… NA    Livi…        2072\n 8    1833 \"Hulk (Robert Br… \"\\\\/Hu… Publ… Good… Brow… Brow… Male… NA    Livi…        2017\n 9   29481 \"Scott Summers (… \"\\\\/Sc… Publ… Neut… Brow… Brow… Male… NA    Livi…        1955\n10    1837 \"Jonathan Storm … \"\\\\/Jo… Publ… Good… Blue… Blon… Male… NA    Livi…        1934\n# … with 16,366 more rows, and 2 more variables: `FIRST APPEARANCE` <chr>, Year <dbl>\n```", "```py\n\n    >>> unique(df$ALIGN)\n    \"Good Characters\"    \"Neutral Characters\" \"Bad Characters\"     NA\n    >>> unique(df$SEX)\n    \"Male Characters\"        \"Female Characters\"      \"Genderfluid Characters\" \"Agender Characters\"     NA\n    ```", "```py\n\n    >>> df = df %>%\n      filter(!is.na(ALIGN),\n             !is.na(SEX))\n    ```", "```py\n    >>> dim(df)\n    12942    13\n    >>> sum(is.na(df$ALIGN))\n    0\n    >>> sum(is.na(df$SEX))\n    0\n    ```", "```py\n\n    >>> table(df$ALIGN, df$SEX)\n                         Agender Characters Female Characters Genderfluid Characters Male Characters\n      Bad Characters                     20               976                       0            5338\n      Good Characters                    10              1537                       1            2966\n      Neutral Characters                 13               640                       1            1440\n    ```", "```py\n\n    >>> library(ggplot2)\n    >>> ggplot(df, aes(x=SEX, fill=ALIGN)) +\n      geom_bar() +\n      theme(axis.text=element_text(size=18),\n            axis.title=element_text(size=18,face=\"bold\"),\n            legend.position = c(0.2, 0.8),\n            legend.key.size = unit(2, 'cm'),\n            legend.text = element_text(size=20))\n    Figure 5*.1*. Here, we used the properties in the theme layer to adjust the size of labels on the graph. For example, axis.text and axis.title are used to increase the size of texts and titles along the axes, legend.position is used to move the legend to the upper-left corner, and legend.key.size and legend.text are used to enlarge the overall display of the legend:\n    ```", "```py\n\n>>> df %>%\n  filter(!(SEX %in% c(\"Agender Characters\", \"Genderfluid Characters\"))) %>%\n  ggplot(aes(x=SEX, fill=ALIGN)) +\n  geom_bar()\n```", "```py\n\n    >>> options(scipen=999, digits=3)\n    >>> count_df = table(df$ALIGN, df$SEX)\n    >>> prop.table(count_df)\n                         Agender Characters Female Characters Genderfluid Characters Male Characters\n      Bad Characters              0.0015454         0.0754134               0.0000000       0.4124556\n      Good Characters             0.0007727         0.1187606               0.0000773       0.2291763\n      Neutral Characters          0.0010045         0.0494514               0.0000773       0.1112656\n    ```", "```py\n    >>> sum(prop.table(count_df))\n    1\n    ```", "```py\n\n    >>> prop.table(count_df, margin=1)\n                         Agender Characters Female Characters Genderfluid Characters Male Characters\n      Bad Characters               0.003158          0.154089                0.000000        0.842753\n      Good Characters              0.002215          0.340496                0.000222        0.657067\n      Neutral Characters           0.006208          0.305635                0.000478        0.687679\n    ```", "```py\n    >>> rowSums(prop.table(count_df, margin=1))\n        Bad Characters    Good Characters Neutral Characters\n                     1                  1                  1\n    ```", "```py\n\n    >>> prop.table(count_df, margin=2)\n                         Agender Characters Female Characters Genderfluid Characters Male Characters\n      Bad Characters                  0.465             0.310                   0.000           0.548\n      Good Characters                 0.233             0.487                   0.500           0.304\n      Neutral Characters              0.302             0.203                   0.500           0.148\n    ```", "```py\n    >>> colSums(prop.table(count_df, margin=2))\n        Agender Characters      Female Characters Genderfluid Characters        Male Characters\n                         1                      1                      1                      1\n    ```", "```py\n\n    >>> df %>%\n      filter(!(SEX %in% c(\"Agender Characters\", \"Genderfluid Characters\"))) %>%\n      ggplot(aes(x=SEX, fill=ALIGN)) +\n      geom_bar(position=\"fill\") +\n      ylab(\"proportion\") +\n      theme(axis.text=element_text(size=18),\n            axis.title=element_text(size=18,face=\"bold\"),\n            legend.key.size = unit(2, 'cm'),\n            legend.text = element_text(size=20))\n    ```", "```py\n\n>>> df %>%\n  filter(!(SEX %in% c(\"Agender Characters\", \"Genderfluid Characters\"))) %>%\n  ggplot(aes(x=ALIGN, fill=SEX)) +\n  geom_bar(position=\"fill\") +\n  ylab(\"proportion\") +\n  theme(axis.text=element_text(size=18),\n        axis.title=element_text(size=18,face=\"bold\"),\n        legend.key.size = unit(2, 'cm'),\n        legend.text = element_text(size=20))\n```", "```py\n\n>>> colSums(count_df)\n    Agender Characters      Female Characters Genderfluid Characters         Male Characters\n                    43                   3153                      2                    9744\n```", "```py\n\n>>> table(df$SEX)\n    Agender Characters      Female Characters Genderfluid Characters         Male Characters\n                    43                   3153                      2                    9744\n```", "```py\n\n>>> df %>%\n  filter(!(SEX %in% c(\"Agender Characters\", \"Genderfluid Characters\"))) %>%\n  ggplot(aes(x=SEX)) +\n  geom_bar() +\n  facet_wrap(~ALIGN) +\n  theme(axis.text=element_text(size=15),\n        axis.title=element_text(size=15,face=\"bold\"),\n        strip.text.x = element_text(size = 30))\n```", "```py\n\n>>> df$ALIGN = factor(df$ALIGN, levels = c(\"Bad Characters\", \"Neutral Characters\", \"Good Characters\"))\n```", "```py\n\n    >>> summary(df$Year)\n       Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's\n       1939    1973    1989    1984    2001    2013     641\n    ```", "```py\n\n    >>> ggplot(df, aes(x=Year)) +\n      geom_dotplot(dotsize=0.2) +\n      theme(axis.text=element_text(size=18),\n            axis.title=element_text(size=18,face=\"bold\"))\n    ```", "```py\n\n    >>> ggplot(df, aes(x=Year)) +\n      geom_histogram() +\n      theme(axis.text=element_text(size=18),\n            axis.title=element_text(size=18,face=\"bold\"))\n    ```", "```py\n\n    >>> ggplot(df, aes(x=Year)) +\n      geom_density() +\n      theme(axis.text=element_text(size=18),\n            axis.title=element_text(size=18,face=\"bold\"))\n    ```", "```py\n\n    >>> ggplot(df, aes(x=Year)) +\n      geom_boxplot() +\n      theme(axis.text=element_text(size=18),\n            axis.title=element_text(size=18,face=\"bold\"))\n    ```", "```py\n\n    >>> ggplot(df, aes(x=Year)) +\n      geom_boxplot() +\n      facet_wrap(~SEX) +\n      theme(axis.text=element_text(size=18),\n            axis.title=element_text(size=18,face=\"bold\"),\n            strip.text.x = element_text(size = 30))\n    ```", "```py\n\n    >>> df %>%\n      filter(!(SEX %in% c(\"Agender Characters\", \"Genderfluid Characters\"))) %>%\n      ggplot(aes(x=Year)) +\n      geom_density() +\n      facet_grid(ALIGN ~ SEX, labeller = label_both) +\n      facet_grid(ALIGN ~ SEX, labeller = label_both) +\n      theme(axis.text=element_text(size=18),\n            axis.title=element_text(size=18,face=\"bold\"),\n            strip.text.x = element_text(size = 30),\n            strip.text.y = element_text(size = 12))\n    ```", "```py\n\n    >>> df %>%\n      filter(!(SEX %in% c(\"Agender Characters\", \"Genderfluid Characters\"))) %>%\n      ggplot(aes(x=Year)) +\n      geom_histogram() +\n      facet_grid(ALIGN ~ SEX, labeller = label_both) +\n      theme(axis.text=element_text(size=18),\n            axis.title=element_text(size=18,face=\"bold\"),\n            strip.text.x = element_text(size = 30),\n            strip.text.y = element_text(size = 12))\n    ```", "```py\n\n    >>> mean(df$APPEARANCES)\n    NA\n    ```", "```py\n    >>> summary(df$APPEARANCES)\n       Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's\n          1       1       3      20       9    4043     749\n    ```", "```py\n    >>> mean(df$APPEARANCES, na.rm = TRUE)\n    19.8\n    ```", "```py\n\n    >>> median(df$APPEARANCES, na.rm = TRUE)\n    3\n    ```", "```py\n\n    >>> mode <- function(x){\n      ux <- unique(x)\n      ux[which.max(tabulate(match(x, ux)))]\n    }\n    >>> mode(df$APPEARANCES)\n    1\n    ```", "```py\n\n    >>> df %>%\n      group_by(ALIGN) %>%\n      summarise(mean_appear = mean(APPEARANCES, na.rm=TRUE),\n                median_appear = median(APPEARANCES, na.rm=TRUE))\n      ALIGN              mean_appear median_appear\n      <fct>                    <dbl>         <dbl>\n    1 Bad Characters            8.64             3\n    2 Neutral Characters       20.3              3\n    3 Good Characters          35.6              5\n    ```", "```py\n\n    >>> tmp = df$APPEARANCES[!is.na(df$APPEARANCES)]\n    >>> pop_var = sum((tmp - mean(tmp))^2)/length(tmp)\n    >>> formatC(pop_var, digits = 2, format = \"f\")\n    \"11534.53\"\n    ```", "```py\n\n    >>> sample_var = sum((tmp - mean(tmp))^2)/(length(tmp)-1)\n    >>> formatC(sample_var, digits = 2, format = \"f\")\n    \"11535.48\"\n    ```", "```py\n\n    >>> formatC(var(tmp), digits = 2, format = \"f\")\n    \"11535.48\"\n    ```", "```py\n\n    >>> sd(tmp)\n    107.4\n    ```", "```py\n\n    >>> IQR(tmp)\n    8\n    ```", "```py\n    >>> summary(tmp)\n       Min. 1st Qu.  Median    Mean 3rd Qu.    Max.\n        1.0     1.0     3.0    19.8     9.0  4043.0\n    ```", "```py\n\n    >>> tmp2 = tmp[tmp != max(tmp)]\n    >>> sd(tmp2)\n    101.04\n    >>> IQR(tmp2)\n    8\n    ```", "```py\n\n    >>> df %>%\n      group_by(ALIGN) %>%\n      summarise(sd_appear = sd(APPEARANCES, na.rm=TRUE),\n                IQR_appear = IQR(APPEARANCES, na.rm=TRUE),\n                count = n())\n      ALIGN              sd_appear IQR_appear count\n      <fct>                  <dbl>      <dbl> <int>\n    1 Bad Characters          26.4          5  6334\n    2 Neutral Characters     112.           8  2094\n    3 Good Characters        161.          14  4514\n    ```", "```py\n\n    >>> tmp = df %>%\n      filter(Year >= 2000)\n    >>> ggplot(tmp, aes(x=APPEARANCES, fill=ALIGN)) +\n      geom_density(alpha=0.2) +\n      theme(axis.text=element_text(size=18),\n            axis.title=element_text(size=18,face=\"bold\"),\n            legend.position = c(0.8, 0.8),\n            legend.key.size = unit(2, 'cm'),\n            legend.text = element_text(size=20))\n    ```", "```py\n\n    >>> tmp = tmp %>%\n      filter(APPEARANCES <= quantile(APPEARANCES, 0.9, na.rm=TRUE))\n    >>> ggplot(tmp, aes(x=log(APPEARANCES), fill=ALIGN)) +\n      geom_density(alpha=0.2) +\n      theme(axis.text=element_text(size=18),\n            axis.title=element_text(size=18,face=\"bold\"),\n            legend.position = c(0.8, 0.8),\n            legend.key.size = unit(2, 'cm'),\n            legend.text = element_text(size=20))\n    ```", "```py\n\n    >>> ggplot(tmp, aes(x=log(APPEARANCES), fill=ALIGN)) +\n      geom_density(alpha=0.2) +\n      theme(axis.text=element_text(size=18),\n            axis.title=element_text(size=18,face=\"bold\"),\n            legend.position = c(0.8, 0.8),\n            legend.key.size = unit(2, 'cm'),\n            legend.text = element_text(size=20))\n    ```", "```py\n\n    >>> install.packages(\"yfR\")\n    >>> library(yfR)\n    ```", "```py\n\n    >>> first_date = as.Date(\"2021-01-01\")\n    >>> last_date = as.Date(\"2022-01-01\")\n    >>> my_ticker <- c('META', 'NFLX', 'GOOG', 'AMZN', 'MSFT')\n    ```", "```py\n\n    >>> df <- yf_get(tickers = my_ticker,\n                             first_date = first_date,\n                             last_date = last_date)\n    ```", "```py\n    ── Running yfR for 5 stocks | 2021-01-01 --> 2022-01-01 (365 days) ──\n    ℹ Downloading data for benchmark ticker ^GSPC\n    ℹ (1/5) Fetching data for AMZN\n       - found cache file (2021-01-04 --> 2021-12-31)\n       - got 252 valid rows (2021-01-04 --> 2021-12-31)\n       - got 100% of valid prices -- Got it!\n    ℹ (2/5) Fetching data for GOOG\n       - found cache file (2021-01-04 --> 2021-12-31)\n       - got 252 valid rows (2021-01-04 --> 2021-12-31)\n       - got 100% of valid prices -- Good stuff!\n    ℹ (3/5) Fetching data for META\n    !   - not cached\n       - cache saved successfully\n       - got 252 valid rows (2021-01-04 --> 2021-12-31)\n       - got 100% of valid prices -- Mais contente que cusco de cozinheira!\n    ℹ (4/5) Fetching data for MSFT\n       - found cache file (2021-01-04 --> 2021-12-31)\n       - got 252 valid rows (2021-01-04 --> 2021-12-31)\n       - got 100% of valid prices -- All OK!\n    ℹ (5/5) Fetching data for NFLX\n       - found cache file (2021-01-04 --> 2021-12-31)\n       - got 252 valid rows (2021-01-04 --> 2021-12-31)\n       - got 100% of valid prices -- Youre doing good!\n    ℹ Binding price data\n    ── Diagnostics ───────────────────────────────────────\n     Returned dataframe with 1260 rows -- Time for some tea?\n    ℹ Using 156.6 kB at /var/folders/zf/d5cczq0571n0_x7_7rdn0r640000gn/T//Rtmp7hl9eR/yf_cache for 1 cache files\n    ℹ Out of 5 requested tickers, you got 5 (100%)\n    ```", "```py\n    >>> str(df)\n    tibble [1,260 × 11] (S3: tbl_df/tbl/data.frame)\n     $ ticker                : chr [1:1260] \"AMZN\" \"AMZN\" \"AMZN\" \"AMZN\" ...\n     $ ref_date              : Date[1:1260], format: \"2021-01-04\" ...\n     $ price_open            : num [1:1260] 164 158 157 158 159 ...\n     $ price_high            : num [1:1260] 164 161 160 160 160 ...\n     $ price_low             : num [1:1260] 157 158 157 158 157 ...\n     $ price_close           : num [1:1260] 159 161 157 158 159 ...\n     $ volume                : num [1:1260] 88228000 53110000 87896000 70290000 70754000 ...\n     $ price_adjusted        : num [1:1260] 159 161 157 158 159 ...\n     $ ret_adjusted_prices   : num [1:1260] NA 0.01 -0.0249 0.00758 0.0065 ...\n     $ ret_closing_prices    : num [1:1260] NA 0.01 -0.0249 0.00758 0.0065 ...\n     $ cumret_adjusted_prices: num [1:1260] 1 1.01 0.985 0.992 0.999 ...\n     - attr(*, \"df_control\")= tibble [5 × 5] (S3: tbl_df/tbl/data.frame)\n      ..$ ticker              : chr [1:5] \"AMZN\" \"GOOG\" \"META\" \"MSFT\" ...\n      ..$ dl_status           : chr [1:5] „OK\" „OK\" „OK\" „OK\" ...\n      ..$ n_rows              : int [1:5] 252 252 252 252 252\n      ..$ perc_benchmark_dates: num [1:5] 1 1 1 1 1\n      ..$ threshold_decision  : chr [1:5] \"KEEP\" \"KEEP\" \"KEEP\" \"KEEP\" ...\n    ```", "```py\n\n    >>> ggplot(df,\n           aes(x = ref_date, y = price_adjusted,\n               color = ticker)) +\n      geom_line() +\n      theme(axis.text=element_text(size=18),\n            axis.title=element_text(size=18,face=\"bold\"),\n            legend.text = element_text(size=20))\n    ```", "```py\n\n    >>> ggplot(df, aes(x=price_adjusted, fill=ticker)) +\n      geom_histogram(bins=100) +\n      theme(axis.text=element_text(size=18),\n            axis.title=element_text(size=18,face=\"bold\"),\n            legend.text = element_text(size=20))\n    ```", "```py\n\n    >>> ggplot(df, aes(x=price_adjusted, fill=ticker)) +\n      geom_density(alpha=0.2) +\n      theme(axis.text=element_text(size=18),\n            axis.title=element_text(size=18,face=\"bold\"),\n            legend.text = element_text(size=20))\n    ```", "```py\n\n    >>> ggplot(df, aes(ticker, price_adjusted, fill=ticker)) +\n      geom_boxplot() +\n      theme(axis.text=element_text(size=18),\n            axis.title=element_text(size=18,face=\"bold\"),\n            legend.text = element_text(size=20))\n    ```", "```py\n\n    >>> df %>%\n      group_by(ticker) %>%\n      summarise(mean = mean(price_adjusted, na.rm=TRUE),\n                sd = sd(price_adjusted, na.rm=TRUE),\n                IQR = IQR(price_adjusted, na.rm=TRUE),\n                count = n())\n    # A tibble: 5 × 5\n      ticker  mean    sd   IQR count\n      <chr>  <dbl> <dbl> <dbl> <int>\n    1 AMZN    167.  8.00  10.7   252\n    2 GOOG    126\\. 18.4   31.1   252\n    3 META    321\\. 34.9   44.2   252\n    4 MSFT    273\\. 37.2   58.5   252\n    5 NFLX    558\\. 56.0   87.5   252\n    ```", "```py\n\n    >>> library(tidyr)\n    >>> wide_df <- df %>%\n      select(ref_date, ticker, price_adjusted) %>%\n      spread(ticker, price_adjusted)\n    ```", "```py\n    >>> head(wide_df)\n    # A tibble: 6 × 6\n      ref_date    AMZN  GOOG  META  MSFT  NFLX\n      <date>     <dbl> <dbl> <dbl> <dbl> <dbl>\n    1 2021-01-04  159.  86.4  269.  214.  523.\n    2 2021-01-05  161.  87.0  271.  215.  521.\n    3 2021-01-06  157.  86.8  263.  209.  500.\n    4 2021-01-07  158.  89.4  269.  215.  509.\n    5 2021-01-08  159.  90.4  268.  216.  510.\n    6 2021-01-11  156.  88.3  257.  214.  499.\n    ```", "```py\n\n    >>> install.packages(\"corrplot\")\n    >>> library(corrplot)\n    >>> cor_table = cor(wide_df[,-1])\n    >>> corrplot(cor_table, method = \"circle\")\n    ```", "```py\n\n>>> cor_table\n      AMZN  GOOG  META  MSFT  NFLX\nAMZN 1.000 0.655 0.655 0.635 0.402\nGOOG 0.655 1.000 0.855 0.945 0.633\nMETA 0.655 0.855 1.000 0.692 0.267\nMSFT 0.635 0.945 0.692 1.000 0.782\nNFLX 0.402 0.633 0.267 0.782 1.000\n```"]