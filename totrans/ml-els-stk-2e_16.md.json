["```py\n    GET _ml/trained_models/breast-cancer-wisconsin-classification-1612270856116\n    ```", "```py\n    GET _ml/trained_models/breast-cancer-wisconsin-classification-*\n    ```", "```py\n    GET _cat/ml/trained_models\n    ```", "```py\n    from elasticsearch import Elasticsearch\n    ```", "```py\n    es_client = Elasticsearch(es_url, http_auth=(ES_USERNAME, ES_PASSWORD))\n    ```", "```py\n    from elasticsearch.client import MlClient\n    ```", "```py\n    ml_client = MlClient(es_client)\n    ```", "```py\n    model_id = breast-cancer-wisconsin-classification-1612270856116 \n    compressed_model = ml.client.get_trained_models(model_id, decompress_definition=False, include_model_definition=True, for_export=True)\n    Figure 13.3. Note that the actual response returned is much longer and is not shown to save space:\n    ```", "```py\n    import json \n    ```", "```py\n    with open(filename, 'w') as handle:\n        handle.write(json.dumps(compressed_model))\n    ```", "```py\n    With open(filename, 'r') as handle:\n        model_definition = json.loads(handle.read())\n    ```", "```py\n    {\n      \"inference\": {\n        \"model_id\": \" lang_ident_model_1\",\n        \"target_field\": \"text_language_prediction\",\n        \"field_map\": {\n          \"post\": \"text\"\n        },\n        \"inference_config\": { \"classification\": {} }\n      }\n    }\n    ```", "```py\n          \"input\" : {\n            \"field_names\" : [\n              \"text\"\n            ]\n          }\n    ```", "```py\n        \"field_map\": {\n          \"post\": \"text\"\n        },\n    ```", "```py\n    PUT _ingest/pipeline/language-identification-pipeline\n    {\n      \"description\": \"Pipeline for classifying language in social media posts\",\n      \"processors\": [\n    {\n      \"inference\": {\n        \"model_id\": \" lang_ident_model_1\",\n        \"target_field\": \"text_language_prediction\",\n        \"field_map\": {\n          \"post\": \"text\"\n        },\n        \"inference_config\": { \"classification\": {} }\n      }\n    }\n      ]\n    }\n    ```", "```py\n    POST social-media-feed-inference/_doc?pipeline=language-identification-pipeline\n    {\n      \"username\": \"Sanna\",\n        \"statistics\": {\n          \"likes\": 320,\n          \"shares\": 8000\n        },\n        \"timestamp\": \"2021-01-20T23:19:06\",\n        \"post\" : \"Terveisiä Suomesta! Täällä olen talvilomalla!\"\n    }\n    ```", "```py\n    POST _ingest/pipeline/language-identification-pipeline/_simulate\n    {\n      \"docs\": [\n        {\"_source\": {\n      \"username\": \"Sanna\",\n        \"statistics\": {\n          \"likes\": 320,\n          \"shares\": 8000\n        },\n        \"timestamp\": \"2021-01-20T23:19:06\",\n        \"post\" : \"Terveisiä Suomesta! Täällä olen talvilomalla!\"\n    }\n    }\n      ]\n    }\n    ```", "```py\n    {\n          \"doc\" : {\n            \"_index\" : \"_index\",\n            \"_type\" : \"_doc\",\n            \"_id\" : \"_id\",\n            \"_source\" : {\n              \"post\" : \"Terveisiä Suomesta! Täällä olen talvilomalla!\",\n              \"text_language_prediction\" : {\n                \"prediction_score\" : 0.9999995958245499,\n                \"model_id\" : \"lang_ident_model_1\",\n                \"prediction_probability\" : 0.9999995958245499,\n                \"predicted_value\" : \"fi\"\n              },\n              \"username\" : \"Sanna\",\n              \"statistics\" : {\n                \"shares\" : 8000,\n                \"likes\" : 320\n              },\n              \"timestamp\" : \"2021-01-20T23:19:06\"\n            },\n            \"_ingest\" : {\n              \"timestamp\" : \"2021-03-29T01:35:07.492629377Z\"\n            }\n          }\n        }\n      ]\n    }\n    ```", "```py\n    POST social-media-feed-inference/_doc?pipeline=language-identification-pipeline\n    {\n      \"username\": \"Sanna\",\n        \"statistics\": {\n          \"likes\": 320,\n          \"shares\": 8000\n        },\n        \"timestamp\": \"2021-01-20T23:19:06\",\n        \"post_text\" : \"Terveisiä Suomesta! Täällä olen talvilomalla!\"\n    }\n    ```", "```py\n    PUT _ingest/pipeline/language-identification-pipeline-v2\n    {\n      \"description\": \"Pipeline for classifying language in social media posts\",\n      \"processors\": [\n    {\n      \"inference\": {\n        \"model_id\": \" lang_ident_model_1\",\n        \"target_field\": \"text_language_prediction\",\n        \"field_map\": {\n          \"post\": \"text\"\n        },\n        \"inference_config\": { \"classification\": {\"num_top_classes\": 3} }\n      }\n    }\n      ]\n    }\n    ```", "```py\n    POST social-media-feed-inference/_doc?pipeline=language-identification-pipeline-v2\n    {\n      \"username\": \"Sanna\",\n        \"statistics\": {\n          \"likes\": 320,\n          \"shares\": 8000\n        },\n        \"timestamp\": \"2021-01-20T23:19:06\",\n        \"post\" : \"Terveisiä Suomesta! Täällä olen talvilomalla!\"\n    }\n    ```", "```py\n    # import a variation of the breast cancer dataset we have been using in earlier chapters\n    from sklearn.datasets import load_breast_cancer\n    # import the function that trains a DecisionTreeClassifier\n    from sklearn.tree import DecisionTreeClassifier\n    # import a helper function to generate the test/train split\n    from sklearn.model_selection import train_test_split \n    ```", "```py\n    # let's load the dataset and store the datapoints in the variable X and the class labels in the variable y\n    X, y = load_breast_cancer(return_X_y=True)\n    ```", "```py\n    # while Elasticsearch performs the train/test split for us during the training process # in scikit-learn, we have to perform this step manually using the train_test_split function\n    X_train, X_test, y_train, y_test = train_test_split(X,y, random_state=12345)\n    ```", "```py\n    # now, let's create the decision tree classifier\n    dec_tree = DecisionTreeClassifier(random_state=12345).fit(X_train, y_train)\n    ```", "```py\n    # import the required eland class\n    from eland.ml import MLModel\n    ```", "```py\n    data = load_breast_cancer() \n    feature_names = data.feature_names\n    ```", "```py\n    es_model = MLModel.import_model(\n        es_client,\n        model_id=model_id,\n        model=dec_tree,\n        feature_names=list(feature_names),\n        es_if_exists='replace'\n    )\n    ```", "```py\n    model_id = \"external-model_breast-cancer-decision-tree\"\n    ```", "```py\n    GET _ml/trained_models/external-model_breast-cancer-decision-tree\n    ```"]