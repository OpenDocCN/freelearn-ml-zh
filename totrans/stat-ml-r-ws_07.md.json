["```py\n\n>>> install.packages(\"rmarkdown\")\n>>> library(rmarkdown)\n```", "```py\n\n    # Introduction to statistical model\n    ```", "```py\n\n    A *statistical model* takes the form $y=f(x)+\\epsilon$, where\n    ```", "```py\n\n    * $x$ is the **input**\n    * $f$ is the **model**\n    * $\\epsilon$ is the **random noise**\n    * $y$ is the **output**\n    ```", "```py`r Sys.Date()`\"``.\n\nThese are some of the common commands that we can use in a `.Rmd` file to format the texts in the resulting HTML file. Next, we will look at how to write R code in R Markdown.\n\n## Writing R code\n\nIn R Markdown, the R code is contained inside code chunks enclosed by three backticks, ```", "```py ```", "```py\n\n```", "```py\n```", "```py\n\n```", "```py\n```", "```py\n\n```", "```py\n```", "```py\n\n>>> install.packages(\"quantmod\")\n>>> library(quantmod)\n```", "```py\n\n    ---\n    title: \"Financial analysis\"\n    output: html_document\n    date: \"2022-10-12\"\n    author: \"Liu Peng\"\n    ---\n    ```", "```py\n\n    # Analyzing Google's stock data since 2007\n    Getting Google's stock data\n    ```", "```py\n    ```", "```py\n\n    Total number of observations of `df`\n    ```", "```py\n    Displaying the first two rows of `df`\n    ```", "```py\n    Displaying the last two rows of `df`\n    ```", "```py\n    ```", "```py\n\n    Plotting the stock price data\n    ```", "```py\n    ```", "```py\n\nThe following image can be accessed [here](https://github.com/PacktPublishing/The-Statistics-and-Machine-Learning-with-R-Workshop/blob/main/Chapter_6/Image.png).\n![](https://raw.githubusercontent.com/PacktPublishing/The-Statistics-and-Machine-Learning-with-R-Workshop/main/Chapter_6/Image.png)\n```", "```py\n\n    library(dplyr)\n    library(tibble)\n    df_tbl = df %>%\n      as_tibble() %>%\n      add_column(date = index(df), .before = 1)\n    ```", "```py\n\n    max_ytd = df_tbl %>%\n      filter(date >= as.Date(\"2022-01-01\")) %>%\n      summarise(price = max(GOOG.Close)) %>%\n      .$price\n    avg_ytd = df_tbl %>%\n      filter(date >= as.Date(\"2022-01-01\")) %>%\n      summarise(price = mean(GOOG.Close)) %>%\n      .$price\n    min_ytd = df_tbl %>%\n      filter(date >= as.Date(\"2022-01-01\")) %>%\n      summarise(price = min(GOOG.Close)) %>%\n      .$price\n    ```", "```py\n\n    Google's **highest** year-to-date stock price is `r max_ytd`.\n    Google's **average** year-to-date stock price is `r avg_ytd`.\n    Google's **lowest** year-to-date stock price is `r min_ytd`.\n    ```", "```py\n\n    library(ggplot2)\n    library(lubridate)\n    df_tbl = df_tbl %>%\n      mutate(Month = factor(month(date), levels = as.character(1:12)),\n             Year = as.character(year(date)))\n    tmp_df = df_tbl %>%\n      filter(Year %in% c(2019, 2020, 2021)) %>%\n      group_by(Year, Month) %>%\n      summarise(avg_close_price = mean(GOOG.Close)) %>%\n      ungroup()\n    ```", "```py\n\n    p = ggplot(tmp_df,\n           aes(x = Month, y = avg_close_price,\n               group = Year,\n               color = Year)) +\n      geom_line() +\n      theme(axis.text=element_text(size=16),\n            axis.title=element_text(size=16,face=\"bold\"),\n            legend.text=element_text(size=20)) +\n      labs(titel = \"Monthly average closing price between 2019 and 2021\",\n          x = \"Month of the year\",\n          y = \"Average closing price\")\n    p\n    ```", "```py\n\n    Control the figure size via the `fig.width` and `fig.height` parameters.\n    ```", "```py\n    ```", "```py\n\n    Align the figure using the `fig.align` parameter.\n    ```", "```py\n    ```", "```py\n\n    Add figure caption via the `fig.cap` parameter.\n    ```", "```py\n    ```", "```py\n\n    # Adding tables\n    Printing `tmp_df` as a static summary table via the `kable()` function.\n    ```", "```py\n    ```", "```py\n\n    Changing column names via the `col.names` parameter.\n    ```", "```py\n    ```", "```py\n\n    Align the table via the `align` argument.\n    ```", "```py\n    ```", "```py\n\n    Add table caption via the `caption` parameter.\n    ```", "```py\n\n    Knitting the document with these added commands produces *Figure 6**.21*:\n\n![Figure 6.21 – Adding a caption to the table](img/B18680_06_021.jpg)\n\nFigure 6.21 – Adding a caption to the table\n\nIn the next section, we will discuss some common options we can use to modify the code chunk outputs after knitting the R Markdown document.\n\n## Configuring code chunks\n\nWe have seen several options from previous exercises that we can use to control the output style of a code chunk. For example, by setting `warning=FALSE` and `message=FALSE`, we could hide potential warnings and messages in the resulting output document.\n\nThere are other commonly used options. For example, we can use the `include` option to decide whether the code and results appear in the output report or not. In other words, setting `include=FALSE` will hide the code and results of the specific code chunk in the report, although the code will still be executed upon knitting the R Markdown document. By default, we have `include=TRUE` and all the code and execution results will appear in the report.\n\nAnother related option is `echo`, where setting `echo=FALSE` hides the code and only shows the execution outputs in the report. We can consider this option when we’re generating plots in the report since most users are more interested in the graphical analysis compared to the process that generates the graph. Again, by default, we have `echo=TRUE`, which displays the code in the report before the plots.\n\nBesides this, we may only be interested in showing some code instead of executing all of it. In this case, we can set `eval=FALSE` to make sure that the code in the code chunk does not impact the overall execution and result of the report. This is in contrast to setting `include=FALSE`, which hides the code but still executes it in the backend, thus bearing an effect on the subsequent code. By default, we have `eval=FALSE`, which evaluates all the code in the code chunk. *Figure 6**.22* summarizes these three options:\n\n|  | **Code execution** | **Code appearance** | **Result appearance** |\n| `include=FALSE` | Yes | No | No |\n| `echo=FALSE` | Yes | No | Yes |\n| `eval=FALSE` | No | Yes | No |\n\nFigure 6.22 – Common options for configuring code chunks\n\nNext, we will go over an exercise to practice different options.\n\n### Exercise 6.6 – configuring code chunks\n\nIn this exercise, we will go through a few ways to configure the code chunks we covered previously:\n\n1.  Display the maximum closing price for the past five years in a table. Show both the code and the result in the report:\n\n    ```", "```py{r}\n    tmp_df = df_tbl %>%\n      mutate(Year = as.integer(Year)) %>%\n      filter(Year >= max(Year)-5,\n             Year < max(Year)) %>%\n      group_by(Year) %>%\n      summarise(max_closing = max(GOOG.Close))\n    kable(tmp_df)\n    ```", "```py\n\n    Here, we first convert `Year` into an integer-typed variable, then subset the DataFrame to keep only the last five years of data, followed by extracting the maximum closing price for each year. The result is then shown via the `kable()` function.\n\n    Knitting the document with these added commands produces *Figure 6**.23*. The result shows that Google has been making new highs over the years:\n\n![Figure 6.23 – Displaying the maximum closing price for the past five years](img/B18680_06_023.jpg)\n\nFigure 6.23 – Displaying the maximum closing price for the past five years\n\n1.  Obtain the highest closing price in a code chunk with the code and result hidden in the report by setting `include=FALSE`. Display the result in a new code chunk:\n\n    ```", "```py{r include=FALSE}\n    total_max_price = max(df_tbl$GOOG.Close)\n    ```", "```py{r}\n    total_max_price\n    ```", "```py\n\n    Knitting the document with these commands produces *Figure 6**.24*:\n\n![Figure 6.24 – Hiding the code and result in one code chunk and displaying the result separately](img/B18680_06_024.jpg)\n\nFigure 6.24 – Hiding the code and result in one code chunk and displaying the result separately\n\n1.  For the running table, hide the code chunk and only display the result in the report by setting `echo=FALSE`:\n\n    ```", "```py{r echo=FALSE}\n    kable(tmp_df)\n    ```", "```py\n\n    Knitting the document with these commands produces *Figure 6**.25*:\n\n![Figure 6.25 – Hiding the code chunk and displaying the result in the report](img/B18680_06_025.jpg)\n\nFigure 6.25 – Hiding the code chunk and displaying the result in the report\n\n1.  Only display the code on table generation in the code chunk and do not execute it in the report by setting `eval=FALSE`:\n\n    ```", "```py{r eval=FALSE}\n    kable(tmp_df)\n    ```", "```py\n\n    Knitting the document with these commands produces *Figure 6**.26*:\n\n![Figure 6.26 – Displaying the code chunk without executing it in the report](img/B18680_06_026.jpg)\n\nFigure 6.26 – Displaying the code chunk without executing it in the report\n\n1.  Print a test message and a warning message in separate blocks. Then, put the same contents in a single block by setting `collapse=TRUE`:\n\n    ```", "```py{r}\n    print(\"This is a test message\")\n    warning(\"This is a test message\")\n    ```", "```py{r collapse=TRUE}\n    print(\"This is a test message\")\n    warning(\"This is a test message\")\n    ```", "```py\n\n    Knitting the document with these commands produces *Figure 6**.27*, which shows that both the printed and warning messages are shown in a single block together with the code:\n\n![Figure 6.27 – Displaying the code and results in one block](img/B18680_06_027.jpg)\n\nFigure 6.27 – Displaying the code and results in one block\n\nIn addition, we can hide the warning by configuring the `warning` attribute in the code chunk.\n\n1.  Hide the warning by setting `warning=FALSE`:\n\n    ```", "```py{r collapse=TRUE, warning=FALSE}\n    print(\"This is a test message\")\n    warning(\"This is a test message\")\n    ```", "```py\n\n    Knitting the document with these commands produces *Figure 6**.28*, where the warning has now been removed from the report:\n\n![Figure 6.28 – Hiding the warning in the report](img/B18680_06_028.jpg)\n\nFigure 6.28 – Hiding the warning in the report\n\nSetting the display parameters for each code chunk becomes troublesome when we need to repeat the same operation for many chunks. Instead, we can make a global configuration that applies to all chunks in the R Markdown document by using the `knitr::opts_chunk()` function at the beginning of the document. For example, the following code snippet hides the warnings for all following code chunks:\n\n```", "```py{r include=FALSE}\nknitr::opts_chunk$set(warning=FALSE)\n```", "```py\n\nIn the next section, we will look at how to customize R Markdown reports, such as by adding a table of contents and changing the report style.\n\n# Customizing R Markdown reports\n\nIn this section, we will look at adding metadata such as a table of contents to the report, followed by introducing more options for changing the report style.\n\n## Adding a table of contents\n\nWhen reading a report for the first time, a table of contents provides an overview of the report and thus helps readers quickly navigate the different sections of the report.\n\nTo add a table of contents, we can append a colon to the `html_document` field in the YAML header and set `toc: true` as a separate line with one more indentation than the `html_document` field. This is shown in the following code snippet:\n\n```", "```py\n\nKnitting the document with these commands produces *Figure 6**.29*, where a table of contents is now displayed at the top of the report. Note that when you click on a header in the table of contents, the report will directly jump to that section, which is a nice and user-friendly feature:\n\n![Figure 6.29 – Adding a table of contents to the report](img/B18680_06_029.jpg)\n\nFigure 6.29 – Adding a table of contents to the report\n\nWe can also set `toc_float=true` to make the table of contents float. With this property specified, the table of contents will remain visible as the user scrolls through the report. The following code snippet includes this property in the YAML header:\n\n```", "```py\n\nKnitting the document with these commands produces *Figure 6**.30*, where the table of contents appears on the left-hand side and remains visible as the user navigates different sections:\n\n![Figure 6.30 – Setting up a floating table of contents in the report](img/B18680_06_030.jpg)\n\nFigure 6.30 – Setting up a floating table of contents in the report\n\nNext, we will look at creating a report with parameters in the YAML header.\n\n## Creating a report with parameters\n\nRecall that our running dataset contains the daily stock prices of Google since 2007\\. Imagine that we need to create a separate annual report for each year; we may need to manually edit the `year` parameter for each report, which would be a repetitive process. Instead, we can set an input parameter in the YAML header as a global variable that’s accessible to all code chunks. When generating other similar reports, we could simply change this parameter and rerun the same R Markdown file.\n\nWe can set a parameter input by adding the `params` field, followed by a colon in the YAML header. Then, we must add another line, indent it, and add the key and value of the parameter setting, which are separated by a colon. Note that the value of the parameter is not wrapped in quotations.\n\nLet’s go through an exercise to illustrate this.\n\n### Exercise 6.7 – generating reports using parameters\n\nIn this exercise, we will configure parameters to generate reports that are similar and only differ in the parameter setting:\n\n1.  Add a `year` parameter to the YAML header and set its value to `2020`:\n\n    ```", "```py\n\n    Here, we use the `params` field to initiate the parameter setting and add `year: 2020` as a key-value pair.\n\n2.  Extract the summary of the closing price using the `summary()` function for 2020:\n\n    ```", "```py{r}\n    df_tbl %>%\n      filter(Year == params$year) %>%\n      select(GOOG.Close) %>%\n      summary()\n    ```", "```py\n\n    Knitting the document with these commands produces *Figure 6**.31*, where we use `Year` `== params$year` as a filtering condition in the `filter()` function:\n\n![Figure 6.31 – Generating summary statistics of the closing price for 2020 using parameters](img/B18680_06_031.jpg)\n\nFigure 6.31 – Generating summary statistics of the closing price for 2020 using parameters\n\n1.  Change the parameter setting and generate the same statistics for 2021:\n\n    ```", "```py\n\n    Knitting the document with these commands produces *Figure 6**.32*. With a simple change of value in the parameters, we can generate a report for a different year without editing the contents following the YAML header:\n\n![Figure 6.32 – Generating summary statistics of the closing price for 2021 using parameters](img/B18680_06_032.jpg)\n\nFigure 6.32 – Generating summary statistics of the closing price for 2021 using parameters\n\nWe can also create a report based on multiple parameters, which can be appended as key-value pairs in the YAML header.\n\n1.  Generate the same statistics for the closing price for Q1 2021:\n\n    ```", "```py{r}\n    df_tbl %>%\n      mutate(Qter = quarters(date)) %>%\n      filter(Year == params$year,\n             Qter == params$quarter) %>%\n      select(GOOG.Close) %>%\n      summary()\n    ```", "```py\n\n    Here, we create a new column to represent the quarter using the `quarters()` function based on the date, followed by filtering using the `year` and `the` `quarter` parameters set in the YAML header. Knitting the document with these commands produces *Figure 6**.33*:\n\n![Figure 6.33 – Generating summary statistics of the closing price for 2021 Q1 using multiple parameters](img/B18680_06_033.jpg)\n\nFigure 6.33 – Generating summary statistics of the closing price for 2021 Q1 using multiple parameters\n\nIn the following section, we will look at the style of the report using **Cascading Style Sheets** (**CSS**), a commonly used web programming language to adjust the style of web pages.\n\n## Customizing the report style\n\nThe report style includes details such as the color and font of text in the report. Like any web programming framework, R Markdown offers controls that allow attentive users to make granular adjustments to the report’s details. The adjustable components include most HTML elements in the report, such as the title, body text, code, and more. Let’s go through an exercise to learn about different types of style control.\n\n### Exercise 6.8 – customizing the report style\n\nIn this exercise, we will customize the report style by adding relevant configurations within the `<style>` and `</style>` flags. The specification starts by choosing the element(s) to be configured, such as the main body (using the `body` identifier) or code chunk (using the `pre` identifier). Each property should start with a new line, have the same level of indentation, and have one more level of indentation than the preceding HTML element.\n\nIn addition, all contents to be specified are key-value pairs that end with a semicolon and are wrapped within curly braces, `{}`. The style configuration can also exist anywhere after the YAML header. Let’s look at a few examples of specifying the report style:\n\n1.  Change the color of the text in the main body to red and the background color to `#F5F5F5`, the hex code that corresponds to gray:\n\n    ```", "```py\n\n    Here, we directly use the word `blue` to set the color attribute of the text in the body and the hex code to set its background color; these two approaches are equivalent. Knitting the document with these commands produces *Figure 6**.34*:\n\n![Figure 6.34 – Changing the color of the text in the body of the report](img/B18680_06_034.jpg)\n\nFigure 6.34 – Changing the color of the text in the body of the report\n\n1.  Change the color of the code in the code chunks to red by specifying `color: red` in the `pre` attribute:\n\n    ```", "```py\n\n    Knitting the document with these commands produces *Figure 6**.35*:\n\n![Figure 6.35 – Changing the color of the code in the report](img/B18680_06_035.jpg)\n\nFigure 6.35 – Changing the color of the code in the report\n\n1.  For the table of contents, change the color of the text and border to `green`, and set the font size to `16px`:\n\n    ```", "```py\n\n    Note that the style for the table of contents is specified using `#TOC` without any space in between. Knitting the document with these commands produces *Figure 6**.36*:\n\n![Figure 6.36 – Changing the color and font size of the table of contents in the report](img/B18680_06_036.jpg)\n\nFigure 6.36 – Changing the color and font size of the table of contents in the report\n\n1.  For the header, change the color to `orange`, the opacity to `0.9`, and the font size to `20px`:\n\n    ```"]