- en: '*Chapter 5*: Predicting Boolean Values Using Binary Logistic Regression'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Binary logistic regression is one of the most widely used **Machine Learning**
    (**ML**) algorithms to predict the classification of future events and behaviors.
    It's used in different industries and contexts. Some variables that can be predicted
    with this technique are the propensity to buy a product and the probability of
    getting positive or negative feedback from customers for a specific service.
  prefs: []
  type: TYPE_NORMAL
- en: Most digital native companies offer their services in subscription mode. In
    streaming video services, telco operators, and pay TVs, the binary logistic regression
    technique is widely used to predict the probability of churn of a customer. Predicting
    this kind of information is fundamental to target marketing campaigns and special
    offers to customers with the highest propensity to buy and increase revenue.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we'll see all the stages necessary to implement a binary logistic
    regression model leveraging BigQuery ML.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the BigQuery ML SQL language, we''ll go through the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing the business scenario
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Discovering binary logistic regression
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring and understanding the dataset
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Training the binary logistic regression model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Evaluating the binary logistic regression model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the binary logistic regression model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Drawing business conclusions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter requires access to a web browser and the possibility to leverage
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A GCP account to access Google Cloud Console
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A GCP project to host the BigQuery datasets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that we're ready with the technical requirements, let's dive into the analysis
    and development of our BigQuery ML binary logistic regression model.
  prefs: []
  type: TYPE_NORMAL
- en: 'Check out the following video to see the Code in Action: [https://bit.ly/2QXCGHM](https://bit.ly/2QXCGHM)'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing the business scenario
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we'll introduce the business scenario that will be tackled
    with binary logistic regression.
  prefs: []
  type: TYPE_NORMAL
- en: Let's take an example wherein you are a taxi driver who is passionate about
    ML. You're currently working in Chicago and your goal is to provide an additional
    tool to all your colleagues to understand the probability of getting a tip from
    your customers.
  prefs: []
  type: TYPE_NORMAL
- en: Getting a tip from a customer is very important for taxi drivers to increase
    their income. Predicting the probability of getting a tip can be useful to, for
    example, know when to reserve a particularly gentle treatment for a specific subset
    of customers.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following photo, you can see a taxi in Chicago:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.1 – Taxi in Chicago'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16722_05_001.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.1 – Taxi in Chicago
  prefs: []
  type: TYPE_NORMAL
- en: The city of Chicago has collected information about most of the taxi trips that
    have occurred since 2013\. This dataset is available in the BigQuery public datasets
    marketplace ([https://console.cloud.google.com/marketplace/details/city-of-chicago-public-data/chicago-taxi-trips](https://console.cloud.google.com/marketplace/details/city-of-chicago-public-data/chicago-taxi-trips))
    and can be easily accessed and used.
  prefs: []
  type: TYPE_NORMAL
- en: Your goal is to leverage the available information about taxi trips, such as
    the payment type, the miles traveled, the fare, and the name of the taxi company,
    to predict whether a taxi driver will receive a tip at the end of the taxi ride.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we've explained and understood the business scenario, let's take a
    look at the ML technique that we can use to predict whether a specific event will
    happen or not.
  prefs: []
  type: TYPE_NORMAL
- en: Discovering binary logistic regression
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we'll learn what **binary logistic regression** is and we'll
    understand the use cases that can be tackled with this ML algorithm.
  prefs: []
  type: TYPE_NORMAL
- en: '**Logistic regression** is a classification ML technique that can be used to
    predict a categorical variable. We can apply **binary logistic regression** when
    the variable to predict is binary and can assume only two values, such as true
    or false, yes or no, or 1 or 0.'
  prefs: []
  type: TYPE_NORMAL
- en: In order to predict one of the two labels, this ML algorithm calculates the
    probability of two different outcomes and allows us to choose a probability threshold
    to get the final classification of the binary variable.
  prefs: []
  type: TYPE_NORMAL
- en: Since this is an algorithm based on a regression technique, the prediction of
    the label is based on a set of independent variables called features that are
    used to predict the dependent variable, called a label.
  prefs: []
  type: TYPE_NORMAL
- en: 'This ML technique can be used to answer relevant business questions across
    different industries, such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Will this customer buy my product?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Is my customer satisfied with my service?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Will my customer unsubscribe from my service in the next months?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Will this student pass the next exam?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Will this person develop diabetes in the next year?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In our business scenario, the possibility of getting a tip at the end of a taxi
    ride can be predicted by leveraging binary logistic regression. In fact, we're
    interested in predicting whether a certain event will happen or not. If the taxi
    driver will get a tip, the binary categorical variable will be valued with 1,
    otherwise 0.
  prefs: []
  type: TYPE_NORMAL
- en: Training a binary logistic regression model means trying to find the values
    of the coefficients that can be used in the equation between the input variables,
    called features, and the binary output variable, called the label.
  prefs: []
  type: TYPE_NORMAL
- en: After the training, we'll leverage a **confusion matrix** to evaluate the performance
    of our binary logistic regression model. In this matrix, the rows represent the
    predicted value of the label while the columns are used to store the actual values.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following figure represents a confusion matrix that is used to evaluate
    the performances of the binary logistic regression:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.2 – Confusion matrix'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16722_05_Table_01.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.2 – Confusion matrix
  prefs: []
  type: TYPE_NORMAL
- en: This matrix allows us to visualize the performance of an ML algorithm, comparing
    the right predictions with the wrong ones.
  prefs: []
  type: TYPE_NORMAL
- en: 'From the numbers that will be presented in the confusion matrix, we can extract
    a fundamental performance indicator for logistic regression models: the **Area
    Under the Curve** (**AUC**) and the **Receiver Operating Characteristic** (**ROC**).
    The **ROC** is a curve that helps us in measuring the performance of a classification
    scenario with various thresholds. Basically, it tells us the capability of our
    ML model in predicting the right class.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The **ROC** curve is a graph plotted using the following two parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**False positive rate** on the abscissa axis. This parameter is calculated
    as the ratio between the number of **false positives** and the sum of **false
    positives** and **true negatives**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**True positive rate** on the ordinate axis. This parameter is also called
    the **recall** of the model. It is calculated as the ratio between **true positives**
    and the sum of **true positives** and **false negatives**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the **area under the curve**, called the **AUC**, is high and close to 1,
    the model is more likely to be able to predict the right label.
  prefs: []
  type: TYPE_NORMAL
- en: We've learned about the basics of binary logistic regression; now it's time
    to take a look at the dataset that we'll use to build our ML model.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring and understanding the dataset
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we learned in [*Chapter 4*](B16722_04_Final_ASB_ePub.xhtml#_idTextAnchor061),
    *Predicting Numerical Values with Linear Regression*, before diving into the ML
    implementation, it's necessary to analyze the data available for our use case.
    We need to begin by having a clear understanding of the data that can be used
    for our business scenario.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To start exploring the data, we need to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to Google Cloud Console and access the **BigQuery** user interface from
    the navigation menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new dataset in the project that we created in [*Chapter 2*](B16722_02_Final_ASB_ePub.xhtml#_idTextAnchor039),
    *Setting Up Your GCP and BigQuery Environment*. For this use case, we'll create
    the `05_chicago_taxi` dataset with the default options.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the `bigquery-public-data` GCP project that hosts all the BigQuery public
    datasets and browse the items until you find the `chicago_taxi_trips` dataset.
    In this public dataset, we can see only one BigQuery table: `taxi_trips`. This
    table contains all the information about the taxi rides that happened in the city
    of Chicago and we''ll use it to train and test our ML model:![Figure 5.3 – The
    chicago_taxi_trips dataset contains only one table: taxi_trips'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B16722_05_003.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 5.3 – The chicago_taxi_trips dataset contains only one table: taxi_trips'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Let''s click on the table named `tips` column, represented with the numeric
    `FLOAT` format. Apparently, this might seem like a problem because our ML model
    is only able to predict Boolean values. This situation can easily be overcome
    by transforming the numeric value into a binary value by applying the following
    rule: if the value of `tips` is greater than 0, the label is 1, otherwise it''s
    0.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We can leverage all the other columns in the table as **features** of our ML
    model. The duration of the taxi ride could be a good feature because during longer
    rides, the taxi driver has more time to familiarize themselves with the customer
    than during short trips of just some minutes. The pick-up and drop-off locations
    can impact the tip because, as we can imagine, some areas are more profitable
    than others. For example, an area of the city with a lot of businesses and offices
    of large companies can increase the probability of getting a tip.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The payment type used to pay for the taxi ride is another important factor in
    our analysis. When you need to pay a taxi driver with electronic payment, it's
    usually easier to give a tip simply by pressing a button on the **Point of Sale**
    (**POS**) device.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Furthermore, the name of the taxi company could be another important feature
    to consider. Some taxi companies can offer a better experience to customers in
    terms of services, professionalism of the drivers, and comfort of the cars. All
    these ingredients can influence a customer in giving a tip to the taxi driver.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: From a schema perspective, this table includes a lot of useful information that
    can be used to develop our binary logistic regression model. Let's proceed with
    our analysis, deepening our understanding of the data.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: As a next step, let's take a look at how many records we have in the table and
    whether they're enough for our purposes. In the **Details** tab, we can notice
    that the table contains more than 194 million records. We can be confident in
    building our ML model with this amount of data:![Figure 5.4 – The Details tab
    on the taxi_trips table shows the number of records
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: and the table size in terms of GB
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B16722_05_004.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 5.4 – The Details tab on the taxi_trips table shows the number of records
    and the table size in terms of GB
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, let''s take a look at the actual data in the `taxi_trips` table:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The query shows all the fields of the table filtering on the first 10 rows.
    The `LIMIT 10` clause is used to limit the number of records in the result set
    and returns a random selection of rows from the table.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'After getting a preview of the table content, we can analyze the time frame
    of our dataset:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The query extracts the minimum and maximum values of the `trip_start_timestamp`
    field to have a clear understanding of the period over which the data is collected.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In the following screenshot, you can view the result of the query execution:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 5.5 – The query returns the minimum and maximum values of the trip_start_timestamp
    field'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B16722_05_005.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 5.5 – The query returns the minimum and maximum values of the trip_start_timestamp
    field
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: At the time of writing this book, the minimum value is represented by 1 January
    2013, while the maximum value is 1 October 2020.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Then, we can apply a data quality check on the `tips` field on which our label
    will be based. In fact, if the `tips` column is greater than 0, we can assume
    that the taxi driver got a tip from the customer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the following screenshot, you can see the result of the query:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 5.6 – The query returns the 4,784 records with the tips field empty'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16722_05_006.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.6 – The query returns the 4,784 records with the tips field empty
  prefs: []
  type: TYPE_NORMAL
- en: Executing the `SELECT COUNT(*)` query, we can notice that there are 4,784 records
    where the `tips` field is empty. We'll take into consideration this aspect during
    the creation of the ML model, filtering these rows.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, we''ve analyzed the dataset that we can leverage in order
    to build our ML model, so now let''s start segmenting it into three different
    sets: training, evaluation, and classification.'
  prefs: []
  type: TYPE_NORMAL
- en: Segmenting the dataset
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before implementing our binary logistic regression model, let''s segment our
    dataset according to the main stages of the ML development: training, evaluation,
    and use:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To understand how the data is distributed across the years and months, we can
    use the following query statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `SELECT` statement extracts the information about the year and month when
    the taxi rides occurred and for each month counts the total number of rides. This
    aggregation is possible by the `GROUP BY` clause at the end of the query.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The query extracts the records from the `taxi_trips` table but applies some
    important filters. All the records with an empty `tips` field are excluded as
    well as all the rows with the potential features equal to `NULL`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In order to exclude outliers and possible incorrect measurements, we've decided
    to keep only the taxi rides with a duration greater than 3 minutes and longer
    than a mile.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Thanks to the `ORDER BY` clause, the results are ascendingly ordered:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 5.7 – The query returns the distribution of the records in the taxi_trips
    table'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B16722_05_007.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 5.7 – The query returns the distribution of the records in the taxi_trips
    table
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Focusing on the most recent months, we can immediately notice a drop in the
    numbers in April 2020\. This sudden decrease is probably caused by the restrictions
    introduced to manage the COVID-19 pandemic. To avoid any impact of this event
    on our analysis, let's focus our implementation only on the year 2019\. We'll
    split our dataset using a time frame that starts from January 2019 up to October
    2019.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Let''s create a table that contains the rows that will be used to train our
    BigQuery ML model. For this use case, we''ll select only the taxi rides that occurred
    from January 2019 until August 2019 inclusive:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As we can notice from the `CREATE TABLE` statement, the query filters all the
    rows with empty features and labels that could cause issues during the implementation
    of the ML model.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'After that, we create another table dedicated to the records that will be used
    to evaluate our ML model:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The only difference, compared to the table that contains the training data,
    is in the month that we've selected to create this table. In this case, we've
    chosen to include the records related to the month of September of 2019.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The last preparatory step is based on the creation of the table that we''ll
    use to test our binary logistic regression model. Let''s create `classification_table`
    as specified in the following SQL statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Thanks to the selection and the filters that we''ve applied in this query,
    our set will contain only the records related to October 2019\. We can also notice
    that all the other filters remain unchanged and uniform across the three datasets:
    training, evaluation, and classification.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now that we've divided our dataset into three parts. Let's start the actual
    training of the binary logistic regression ML model.
  prefs: []
  type: TYPE_NORMAL
- en: Training the binary logistic regression model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As we already did in [*Chapter 4*](B16722_04_Final_ASB_ePub.xhtml#_idTextAnchor061),
    *Predicting Numerical Values with Linear Regression*, we''ll adopt an incremental
    approach in trying to improve the performance of our ML model at each attempt:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start training our first ML model, `binary_classification_version_1`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In this BigQuery ML statement, we can see the `CREATE OR REPLACE MODEL` keywords
    used to start the training of the model. These keywords are followed by the identifier
    of the ML model. After the identifier, we can notice the `OPTIONS` clause. As
    our options, we've chosen to train the model with a `logistic_reg` algorithm and
    to use the `will_get_tip` field as the target label.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The `SELECT` statement points out that the `will_get_tip` label is valued with
    `1` if the value of the `tips` field is greater than 0, otherwise with `0`. In
    the `SELECT` statement, we''ve also included the only feature that we''re using
    for our first attempt: `trip_seconds`. This feature represents the duration expressed
    in seconds of the taxi ride.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Finally, the `SELECT` statement is based on the table that we''ve created to
    perform the training of the model: `05_chicago_taxi.training_table`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: At the end of the training, we can access the ML model from the BigQuery navigation
    menu to have a look at the performance of the model. Selecting the **Evaluation**
    tab, we can see the **ROC AUC** value. In this case, we can see we haven't achieved
    great results because it is not close to 1; it's **0.5696**:![Figure 5.8 – The
    Evaluation tab shows the ROC AUC value related to the trained ML model
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B16722_05_008.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 5.8 – The Evaluation tab shows the ROC AUC value related to the trained
    ML model
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In the same tab, we can also see the ROC curve:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 5.9 – In the Evaluation tab, it is also possible to graphically analyze
    the ROC curve and see the blue area under the ROC curve'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B16722_05_009.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 5.9 – In the Evaluation tab, it is also possible to graphically analyze
    the ROC curve and see the blue area under the ROC curve
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: As we can see from the preceding diagram, the ROC curve, which expresses the
    rate between the true positive and the false positive, is not close to 1\. The
    blue area under the curve is about 50% of the entire square.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'As shown in the following screenshot, we can also leverage the confusion matrix
    in the same tab to experiment with the outcome of the ML model according to different
    thresholds:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 5.10 – In the Evaluation tab, it is also possible to see the confusion
    matrix of the classification model'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B16722_05_010.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 5.10 – In the Evaluation tab, it is also possible to see the confusion
    matrix of the classification model
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Let''s try to improve our ML model by adding features that can be useful to
    predict the probability of getting a tip. We''ll introduce the fare of the taxi
    ride, any tolls paid during the ride, and the name of the taxi company as new
    features:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `CREATE OR REPLACE MODEL` part is similar to the previous one but includes
    the new features previously mentioned. Despite adding the new fields, the improvement
    in terms of **ROC AUC** is not significant. In fact, with this attempt, we have
    achieved a value of **0.5902**.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'It''s time to introduce a feature that can be extremely helpful for the development
    of our ML model. The next ML model, `binary_classification_version_3`, will introduce
    the payment type used by the customer to pay the taxi driver:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: After the training of this ML model, we can immediately notice a huge increase
    in the value of **ROC AUC**. Adding the payment method as a feature to our model,
    we have achieved a value of **0.9809**. This is very close to 1 and represents
    a significant improvement in the performance of our binary logistic regression
    model.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The result that we''ve achieved with the `binary_classification_version_3`
    ML model in the preceding code block is already a great result. Let''s see whether
    it''s possible to further improve our classification model by leveraging the information
    about the pick-up and drop-off locations of the taxi trip:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The query is very similar to the other training statements but introduces two
    more features: `pickup_location` and `dropoff_location`. The two fields represent
    the area where the taxi ride started and ended.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: After the training of the ML model, we can immediately appreciate that we've
    further improved the performances of our classification model. This is clearly
    visible from the **ROC AUC** value, which is **0.9827**.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Looking at the **Confusion matrix**, we can choose the best threshold that gives
    us the right balance between true positive and true negative predictions.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The threshold value influences the ratio between the True Positive Rate and
    the False Positive Rate. Finding the best threshold means to find a value that
    maximize the True Positive Rate and minimize the False Positive Rate.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In the following screenshot, you can see the confusion matrix and the **Positive
    class threshold** slider:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 5.11 – The confusion matrix shows excellent performances in terms
    of'
  prefs: []
  type: TYPE_NORMAL
- en: predicted labels versus the actual ones
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16722_05_011.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.11 – The confusion matrix shows excellent performances in terms of
    predicted labels versus the actual ones
  prefs: []
  type: TYPE_NORMAL
- en: All the other key performance indicators, such as the precision, recall, and
    accuracy, are very high and close to the maximum of 1.
  prefs: []
  type: TYPE_NORMAL
- en: 'From a graphical perspective, we can appreciate the excellent quality of our
    ML model. In fact, the blue area under the ROC curve is very close to 1 and covers
    almost the entire area of the square. The following screenshot shows the ROC curve
    of the last ML model and shows that our ML model has achieved an excellent result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.12 – The area under the ROC curve is very close to 1 and to filling
    in the entire square'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16722_05_012.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.12 – The area under the ROC curve is very close to 1 and to filling
    in the entire square
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we've trained some binary logistic regression ML models leveraging
    the features available in our dataset. To proceed with the evaluation stage, we
    choose to pick up the `binary_classification_version_4` model, which showed the
    best performance. Now, let's see how to start the evaluation phase.
  prefs: []
  type: TYPE_NORMAL
- en: Evaluating the binary logistic regression model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To evaluate our BigQuery ML model, we'll use the `ML.EVALUATE` function and
    the table that we've expressly created as the evaluation dataset.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following query will tell us whether the model is suffering from overfitting
    or is also able to perform well on new data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The `SELECT` statement extracts the `roc_auc` value returned by the `ML.EVALUATE`
    function and also provides a clear description of the quality of the model, starting
    from `'POOR'` and going up to the `'EXCELLENT'` grade, passing through some intermediate
    stages such as `'NEEDS IMPROVEMENTS'` and `'GOOD'`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Executing the query, we can see that the score is very high, and the result
    is `EXCELLENT`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.13 – The evaluation stage returns an EXCELLENT quality result of
    our BigQuery ML model'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16722_05_013.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.13 – The evaluation stage returns an EXCELLENT quality result of our
    BigQuery ML model
  prefs: []
  type: TYPE_NORMAL
- en: Now that we've evaluated our ML model, let's see how we can apply it to other
    records to get the predictions.
  prefs: []
  type: TYPE_NORMAL
- en: Using the binary logistic regression model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we'll use the ML model to predict the probability of getting
    a tip from our customers.
  prefs: []
  type: TYPE_NORMAL
- en: 'To test our BigQuery ML model, we''ll use the `ML.PREDICT` function on the
    `classification_table` table:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The query is composed of a `SELECT` statement that extracts the actual and predicted
    values of the `will_get_tip` field. If not specified, `ML.PREDICT` will use the
    value `0.5` as the default threshold.
  prefs: []
  type: TYPE_NORMAL
- en: 'The output of the query shows the following columns:'
  prefs: []
  type: TYPE_NORMAL
- en: The predicted label in the first column
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The calculated probabilities for each label in the second and third columns
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The actual value extracted from `classification_table` as the last column
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the following screenshot, you can see the result of the query execution:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.14 – The output of the query shows the predicted label compared
    with the actual one'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16722_05_014.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.14 – The output of the query shows the predicted label compared with
    the actual one
  prefs: []
  type: TYPE_NORMAL
- en: Now that we've tested our BigQuery ML model, let's make some final considerations
    about the possibility of predicting whether a customer will give a tip to the
    taxi driver according to the information that we have about the taxi ride.
  prefs: []
  type: TYPE_NORMAL
- en: Drawing business conclusions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we'll use our ML model, and we'll understand how many times
    the BigQuery ML model is able to predict the actual outcome.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the default threshold of `0.5`, let''s see how many times the ML model
    is able to correctly identify when a driver will get a tip:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: To calculate this value, we've introduced the `WHERE` clause, filtering only
    the rows where the predicted value is equal to the actual one.
  prefs: []
  type: TYPE_NORMAL
- en: '`SELECT COUNT` returns a value of 727,462 predictions corresponding with the
    predicted value being equal to the actual one.'
  prefs: []
  type: TYPE_NORMAL
- en: On a total of 744,058 rows, we can say that our model with a standard threshold
    of 0.5 predicts the right outcome in 97.76% of cases.
  prefs: []
  type: TYPE_NORMAL
- en: Since we've created a very effective binary logistic regression model leveraging
    BigQuery ML, we're now confident with providing insights and suggestions to our
    taxi drivers. Knowing in advance the probability of getting a tip, they can behave
    differently according to the probability of getting a tip from the customer they're
    serving.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we implemented a binary logistic regression model. We introduced
    the business scenario based on the data collected by the city of Chicago about
    taxi services. After that, we learned how the binary logistic regression technique
    can be used to predict binary values.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to build an effective model, we performed a detailed analysis of the
    data, and then segmented the dataset according to our needs into three tables:
    one to host training data, the second for evaluation, and the last one to apply
    our classification model.'
  prefs: []
  type: TYPE_NORMAL
- en: During the training phase of the BigQuery ML model, we constantly improved the
    performances of the ML model based on the confusion matrix and the ROC AUC value.
  prefs: []
  type: TYPE_NORMAL
- en: After that, we evaluated the best ML model on a new set of records to verify
    the absence of overfitting and gain more confidence in the good quality of our
    binary logistic regression model.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we applied our ML model to the last subset of records to predict the
    probability of getting a tip or not from the customer at the end of each taxi
    ride. We discovered that our ML model is able to correctly predict the customer's
    behavior in more than 97% of cases.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll go through multiclass logistic regression and we'll
    learn how to apply this algorithm to classify trees into different species according
    to their characteristics.
  prefs: []
  type: TYPE_NORMAL
- en: Further resources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Chicago Taxi Trips public dataset**: [https://console.cloud.google.com/marketplace/details/city-of-chicago-public-data/chicago-taxi-trips](https://console.cloud.google.com/marketplace/details/city-of-chicago-public-data/chicago-taxi-trips)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Chicago Open Data**: [https://data.cityofchicago.org/](https://data.cityofchicago.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**BigQuery ML CREATE MODEL**: [https://cloud.google.com/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-create](https://cloud.google.com/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-create)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**BigQuery ML EVALUATE MODEL**: [https://cloud.google.com/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-evaluate](https://cloud.google.com/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-evaluate)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**BigQuery ML PREDICT**: [https://cloud.google.com/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-predict](https://cloud.google.com/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-predict)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**BigQuery ML binary logistic regression example**: [https://cloud.google.com/bigquery-ml/docs/logistic-regression-prediction](https://cloud.google.com/bigquery-ml/docs/logistic-regression-prediction)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
