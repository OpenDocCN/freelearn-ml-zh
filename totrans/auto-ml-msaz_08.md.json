["```py\n    from azureml.core import Workspace, Dataset, Datastore\n    from azureml.core import Experiment\n    from azureml.core.compute import ComputeTarget\n    from azureml.train.automl import AutoMLConfig\n    from azureml.train.automl.run import AutoMLRun\n    from azureml.widgets import RunDetails\n    from azureml.opendatasets import OjSalesSimulated\n    from azureml.automl.core.forecasting_parameters import ForecastingParameters\n    ```", "```py\n    import pandas as pd\n    import numpy as np\n    import os\n    from pathlib import Path\n    ```", "```py\n    ws = Workspace.from_config()\n    ```", "```py\n    compute_name = 'compute-cluster'\n    compute_target = ComputeTarget(ws, compute_name)\n    ```", "```py\n    datastore = Datastore.get_default(ws)\n    ```", "```py\n    oj_sales_files = OjSalesSimulated.get_file_dataset()\n    oj_sales = oj_sales_files.take(10)\n    ```", "```py\n    folder_name = \"OJ_Sales\"\n    os.makedirs(folder_name, exist_ok=True)\n    ```", "```py\n    oj_sales.download(folder_name, overwrite=True)\n    ```", "```py\n    OJ_file_path = Path('OJ_Sales').rglob('*.csv')\n    OJ_files = [x for x in OJ_file_path]\n    df = pd.concat((pd.read_csv(f) for f in OJ_files))\n    ```", "```py\n    df.head(10)\n    ```", "```py\n    Dataset.Tabular.register_pandas_dataframe(df, datastore,\n                                \"OJ Sales Sample\")\n    ```", "```py\n    experiment_name = 'OJ-Sales-Forecasting'\n    exp = Experiment(workspace=ws, name=experiment_name)\n    ```", "```py\n    dataset_name = \"OJ Sales Sample\"\n    dataset = Dataset.get_by_name(ws, dataset_name, version='latest')\n    ```", "```py\n    target_column = 'Quantity'\n    ```", "```py\n    task = 'forecasting'\n    ```", "```py\n    primary_metric = 'normalized_root_mean_squared_error'\n    ```", "```py\n    featurization = 'auto'\n    ```", "```py\n    params=\\\n    ForecastingParameters.from_parameters_dict( \n    {'country_or_region_for_holidays':'US',\\\n                    'drop_columns_names':'Revenue',\\\n                    'forecast_horizon': 6,\\\n                    'target_rolling_window_size': 'auto',\\\n                    'target_lags': 'auto',\\\n                    'feature_lags': 'auto',\\\n                    'seasonality': 'auto',\\\n                    'short_series_handling': True,\\\n                    'use_stl': 'season_trend',\\\n                    'time_column_name':'WeekStarting',\\\n                    'time_series_id_column_names':\\\n                    ['Store','Brand'],\\\n                   'short_series_handling_configuration':\\\n                    'auto'},\\\n                    validate_params=True)\n    ```", "```py\n    config = AutoMLConfig(task=task,\n                         primary_metric=primary_metric,\n                         featurization=featurization,\n                         compute_target=compute_target,\n                         training_data=dataset,\n                         label_column_name=target_column,\n                         experiment_timeout_minutes=15,\n                         enable_early_stopping=True,\n                         n_cross_validations=3,\n                         model_explainability=True,\n                         enable_stack_ensemble=False,\n                         enable_voting_ensemble=True,\n                         forecasting_parameters=params)\n    ```", "```py\n    AutoML_run = exp.submit(config, show_output = True)\n    RunDetails(AutoML_run).show()\n    ```", "```py\n    params=\\\n    ForecastingParameters.from_parameters_dict(\\\n    {'country_or_region_for_holidays':None,\\\n                      'drop_columns_names':\\\n                      ['Revenue','Price','Advert'],\\\n                      'forecast_horizon': 6,\\\n                      'target_rolling_window_size': None,\\\n                      'target_lags': None,\\\n                      'feature_lags': None,\\\n                      'seasonality': 'auto',\\\n                      'short_series_handling': True,\\\n                      'use_stl': 'season_trend',\\\n                      'time_column_name':'WeekStarting',\\\n                      'time_series_id_column_names':\\\n                      ['Store','Brand'],\n                   'short_series_handling_configuration':\\\n                      'auto'},\\\n                      validate_params=True)\n    ```", "```py\n    Prophet_ARIMA_run = exp.submit(config, show_output = True)\n    RunDetails(Prophet_ARIMA_run).show()\n    ```", "```py\n    description = 'Best AutoML Forecasting Run using OJ Sales Sample Data.' \n    tags = {'project' : \"OJ Sales\", \"creator\" : \"your name\"} \n    model_name = 'OJ-Sales-Sample-Forecasting-AutoML' \n    ```", "```py\n    AutoML_run.register_model(model_name=model_name, description=description, tags=tags)\n    ```", "```py\n    description = 'Best AutoML Forecasting Run using OJ Sales Sample Data.'\n    tags = {'project' : \"OJ Sales\", \"creator\" : \"your name\", \"metric\" : \"R2 Score\"} \n    model_name = 'OJ-Sales-Sample-Forecasting-AutoML-R2'\n    AutoML_run.register_model(model_name=model_name, description=description, tags=tags, metric = 'r2_score')\n    ```", "```py\nexperiment_name = 'OJ-Sales-Forecasting'\nexp = Experiment(workspace=ws, name=experiment_name) \nAutoML_run = AutoMLRun(experiment = exp, run_id = 'your_run_id') \ndescription = 'Retrieved AutoML Forecasting Run for OJ Sales Data.'\ntags = {'project' : \"OJ Sales\", \"creator\" : \"your name\"} \nmodel_name = 'OJ-Sales-Sample-Forecasting-AutoML-Retrieved'\nAutoML_run.register_model(model_name=model_name, description=description, tags=tags)\n```"]