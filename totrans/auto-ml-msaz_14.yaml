- en: '*Chapter 11*: Implementing a Real-Time Scoring Solution'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While most **machine learning (ML)** projects involve **batch scoring**, the
    most complex ML projects use **real-time solutions**. Think about models that
    determine whether a credit card transaction is fraudulent, models that decide
    which ads to show online shoppers, and models that decide whether a customer at
    a car dealership is creditworthy or not. These situations all demand a real-time
    scoring solution and it's incredibly important that your model be both fast and
    accurate.
  prefs: []
  type: TYPE_NORMAL
- en: Luckily, creating a fast, reliable real-time scoring solution in AutoML is easy
    whether you decide to code it with Python or use the **Azure Machine Learning**
    (**AML**)Studio **graphical user interface** (**GUI**).
  prefs: []
  type: TYPE_NORMAL
- en: You will begin this chapter by creating a real-time scoring endpoint through
    the AML studio GUI. **Real-time scoring endpoints** are web services through which
    you can pass data and quickly receive results. Continuing, you will then create
    real-time scoring endpoints through Python code using the AzureML SDK in a Jupyter
    notebook. Lastly, you will learn how to improve the performance of your real-time
    scoring endpoints to better serve your end users.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this chapter, you will have a more complete data science skillset.
    Being able to train models, score models in batch, retrain models on a schedule,
    and score models in real time are all fundamental ML engineering skills that you
    will have in your repertoire. This skillset is in high demand. Moreover, you will
    be able to craft real-time scoring endpoints that you can embed in complex scenarios.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating real-time endpoints through the UI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating real-time endpoints through the SDK
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improving performance on your AKS cluster
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you will be creating an `Diabetes-AllData-Regression-AutoML`
    that you created in [*Chapter 4*](B16595_04_ePub.xhtml#_idTextAnchor056), *Building
    an AutoML Regression Solution*.
  prefs: []
  type: TYPE_NORMAL
- en: As such, you will need a working internet connection, an **Azure Machine Learning
    Service** (**AMLS**) workspace, and a compute instance. You will also need permission
    to create an AKS cluster. If you are using a personal account, this will not be
    an issue.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the prerequisites for the chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Have access to the internet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Have a web browser, preferably Google Chrome or Microsoft Edge Chromium
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Have a Microsoft Azure account
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Have created an AMLS workspace
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Have created the `compute-cluster` compute cluster in [*Chapter 2*](B16595_02_ePub.xhtml#_idTextAnchor023),
    *Getting Started with Azure Machine Learning Service*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understand how to navigate to the Jupyter environment from an Azure compute
    instance as demonstrated in [*Chapter 4*](B16595_04_ePub.xhtml#_idTextAnchor056),
    *Building an AutoML Regression Solution*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Have trained and registered the `Diabetes-AllData-Regression-AutoML` ML model
    in [*Chapter 4*](B16595_04_ePub.xhtml#_idTextAnchor056), *Building an AutoML Regression
    Solution*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The code for this chapter is available here: [https://github.com/PacktPublishing/Automated-Machine-Learning-with-Microsoft-Azure/tree/master/Chapter11](https://github.com/PacktPublishing/Automated-Machine-Learning-with-Microsoft-Azure/tree/master/Chapter11).'
  prefs: []
  type: TYPE_NORMAL
- en: Creating real-time endpoints through the UI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The crux of any real-time scoring solution is a real-time scoring endpoint,
    a web URL through which you can pass data and immediately retrieve MLpredictions.
    Endpoints are hosted on containerized services that are up and running 24 hours
    a day, 7 days a week, waiting for incoming requests.
  prefs: []
  type: TYPE_NORMAL
- en: '**Requests** send data to the endpoint for scoring and can be written in any
    computer language including Python. As soon as a request comes through, your endpoint
    will automatically execute the underlying code and return results.'
  prefs: []
  type: TYPE_NORMAL
- en: You can use these endpoints anywhere; any coding language from C# to Python
    to Java can make use of real-time scoring endpoints. Thus, once you obtain the
    URL that hosts the endpoint, you are free to implement it in any other piece of
    code. Commonly, real-time scoring endpoints are incorporated in streaming jobs,
    web applications, and mobile apps.
  prefs: []
  type: TYPE_NORMAL
- en: 'When using real-time scoring endpoints based on AutoML models, there are a
    few key points to keep in mind that make them quite different from the batch scoring
    pipelines you created in [*Chapter 9*](B16595_09_ePub.xhtml#_idTextAnchor129),
    *Implementing a Batch Scoring Solution*. They are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: First, when passing data into an endpoint that's scoring data using an AutoML-trained
    model, you must pass input data in a JSON format, the most common format for sending
    data through an endpoint. Pandas dataframes or any format other than JSON will
    fail.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Second, you do not have to write a Python script for scoring AutoML-trained
    models. Azure AutoML automatically generates one for you. Because of this, the
    data you pass into the endpoint must be in the proper shape needed to score. You
    cannot do data preprocessing within your endpoint itself unless you want to alter
    the underlying scripts generated by AutoML.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are two main services that AMLS uses to host endpoints, **Azure Container
    Instances** (**ACI**) and AKS. Both are containerized and use Docker. Both can
    be created either using the GUI within AML studio or using the Python SDK through
    a Jupyter notebook. ACI is lightweight, cheap, and used largely for testing. AKS
    is powerful, expensive, and used for production.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: A key difference between ACI and AKS is authentication. ACI supports **key-based
    authentication** only whereas AKS supports both key-based and **token-based authentication**.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, you will use the AML studio GUI to create an endpoint using
    the `Diabetes-AllData-Regression-AutoML` ML model you built in [*Chapter 4*](B16595_04_ePub.xhtml#_idTextAnchor056),
    *Building an AutoML Regression Solution*, hosted on ACI. Then, you will create
    an **AKS cluster** through the UI; an AKS cluster is a group of **virtual machines**
    (**VMs**) that run 24/7 to host your endpoints. You will wrap up this section
    by creating an endpoint hosted on your AKS cluster.
  prefs: []
  type: TYPE_NORMAL
- en: Overall, the goal of this section is to introduce you to endpoints and show
    how you can easily create them with AutoML trained models in just a few clicks.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an ACI-hosted endpoint through the UI
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, create an Azure container instance using the AI using the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open up your AML studio by navigating to [https://ml.azure.com/.](https://ml.azure.com/.)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Models** on the left-hand panel under **Assets**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will see a list of all of the ML models you have trained on this AMLS workspace.
    Click the blue link to `Diabetes-AllData-Regression-AutoML`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the blue link under `AutoML_` followed by a GUID, a unique string of characters.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Deploy** near the top of your screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Give your endpoint the name `diabetes-aci-gui`. Endpoint names may only consist
    of lowercase letters, numbers, and dashes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Azure Container Instance** for **Compute type**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After confirming that your settings match the following screenshot, click **Deploy**:![Figure
    11.1 – ACI settings ](img/Figure_11.1_B16595.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Figure 11.1 – ACI settings
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Your model will take a few minutes to deploy. After waiting a sufficient amount
    of time, click **Endpoints** on the left-hand panel under **Assets**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Important note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The first time you create an endpoint in either ACI or AKS, AMLS will create
    a container registry to host them. Do not, under any circumstances, delete this
    registry as you will be unable to deploy endpoints from that point on.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click the blue link to `diabetes-aci-gui`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Consume** near the top of your screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the `REST` endpoint URL into a text editor such as Notepad. Notice that
    there is also code to use the model in C#, Python, and R. You have now created
    a functioning scoring endpoint hosted on ACI.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With an ACI built, you now have a working endpoint that you can use to score
    new data. ACI is great for testing purposes, but to create a production-ready
    solution, you need AKS.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an AKS cluster through the UI
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before you can host an endpoint on AKS, you first need to build an AKS cluster.
    Follow these steps to create one using the GUI:'
  prefs: []
  type: TYPE_NORMAL
- en: Click **Compute** on the left-hand panel under **Manage**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Inference clusters** near the top of your screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Create**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **North Central US** for **Location** or whatever Azure location your
    AMLS workspace is located in.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the search box on the right-hand side to search for `Standard_DS3_v2`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select `Standard_DS3_v2` for your VM and click **Next**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Give your AKS cluster a name. Call it `aks-amls-cluster`. It can only be 16
    characters long.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Dev/test** for **Cluster purpose**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set `3`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Important note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: When creating an AKS cluster, ensure that the number of cores on your VM type
    multiplied by the number of nodes is equal to or greater than 12\. `Standard_DS3_v2`
    VMs have 4 cores each, thus we set the number of nodes to `4`. This is a minimum
    requirement.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Once you compare your settings to the following screenshot and ensure they match,
    click **Create**:![Figure 11.2 – AKS cluster settings ](img/Figure_11.2_B16595.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Figure 11.2 – AKS cluster settings
  prefs: []
  type: TYPE_NORMAL
- en: You have now successfully created an AKS cluster. You can use this cluster to
    host a large number of ML models. While ACI is suitable only for running models
    up to 1 GB in size, you can use AKS clusters to host much larger models. Next,
    you will create an endpoint on this cluster.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an AKS-hosted endpoint through the UI
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to create a real-time scoring endpoint hosted on AKS, you need to
    follow nearly the exact same steps that you used to create one hosted on ACI.
    Begin with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Open up your AML studio by navigating to [https://ml.azure.com/](https://ml.azure.com/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Models** on the left-hand panel under **Assets**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will see a list of all of the ML models you have trained on this AMLS workspace.
    Click the blue link to open `Diabetes-AllData-Regression-AutoML`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the blue link under `AutoML_` followed by a GUID, a unique string of characters.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Deploy** near the top of your screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Give your endpoint the name `diabetes-aks-gui`. Endpoint names may only consist
    of lowercase letters, numbers, and dashes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Azure Kubernetes Service** for **Compute type**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Switch **Enable Authentication** on.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Key-based authentication** for **Type**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After confirming that your settings match with the following screenshot, click
    **Deploy**:![Figure 11.3 – AKS settings ](img/Figure_11.3_B16595.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Figure 11.3 – AKS settings
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Your model will take a few minutes to deploy, the same as your ACI-hosted model.
    Once it's ready, click **Endpoints** on the left-hand panel under **Assets**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the blue link to open `diabetes-aks-gui`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Consume** near the top of your screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the `REST` endpoint URL into a text editor such as Notepad. Also, copy
    one of the keys. You can use either the primary key or the secondary key. Either
    will work for authentication.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Via this section, you have now created two real-time scoring endpoints, one
    hosted in ACI and the other in AKS. You have also created an AKS cluster to host
    your endpoints and assigned key-based authentication to secure your AKS-hosted
    endpoint. Through AML studio, by clicking **Consume**, you can also easily find
    code to deploy your endpoint in C#, Python, and R.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, you will do the same thing with code. Additionally, you
    will also test your endpoints to see how they work.
  prefs: []
  type: TYPE_NORMAL
- en: Creating real-time endpoints through the SDK
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One-click deployment through AML studio is really easy, but most organizations
    will require you to develop your solutions via code. Luckily, creating real-time
    scoring endpoints for AutoML models via the AzureML Python SDK is almost as easy
    as creating them through the UI. Furthermore, you'll gain a deeper understanding
    of how your endpoints work and how to format your JSON testing to pass data into
    the endpoint as a request.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, you'll begin by entering your Jupyter environment and creating
    a new notebook. First, you will deploy your `Diabetes-AllData-Regression-AutoML`
    model via ACI, test it, and, once you've confirmed that your test is a success,
    create a new AKS cluster via code and deploy it there. You will conclude this
    section by testing your AKS deployment and confirm that everything works as expected.
  prefs: []
  type: TYPE_NORMAL
- en: The goal of this section is to further your understanding of real-time scoring
    endpoints, teach you how to create everything in code, and enable you to craft
    and test complex real-time solutions.
  prefs: []
  type: TYPE_NORMAL
- en: Creating and testing a real-time endpoint with ACI through Python
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Anytime you intend to deploy a ML model in real time, you should begin by deploying
    your model to ACI and testing it. This way, you can get an idea of how your data
    needs to be formatted, how long your endpoint will take to respond with a score,
    and whether your model works. Begin by creating an endpoint.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a real-time scoring endpoint hosted on ACI
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Much like previous chapters, you first need to open a Jupyter notebook on your
    compute instance. Then, build a real-time scoring endpoint with the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open up your AML studio by navigating to [https://ml.azure.com/](https://ml.azure.com/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Compute**, start up a compute instance, and open a Jupyter environment.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new Jupyter notebook and name it `real-time-endpoints`. If you need
    a refresher, please review [*Chapter 4*](B16595_04_ePub.xhtml#_idTextAnchor056),
    *Building an AutoML Regression Solution*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import your standard Azure libraries with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: All of these packages should be familiar to you by now except `AksCompute`.
    If you need a refresher, consult [*Chapter 4*](B16595_04_ePub.xhtml#_idTextAnchor056),
    *Building an AutoML Regression Solution*, for `Workspace`, `Dataset`, `Datastore`,
    `Experiment`, and `ComputeTarget`, and [*Chapter 9*](B16595_09_ePub.xhtml#_idTextAnchor129),
    *Implementing a Batch Scoring Solution*, for `Environment` and `Model`. `AksCompute`
    allows you to create an AKS cluster via code.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Import your Azure libraries specific to creating an endpoint with ACI with
    the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`InferenceConfig` lets you specify the Python script and environment you will
    use to create your endpoint deployment. This package is used with both AKS and
    ACI-based deployments.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`AciWebservice` is what you use to actually create endpoints deployed on ACI
    and `AksWebservice` is what you use to create endpoints deployed on AKS. `AutoMLRun`
    will let you access previous AutoML training runs. You will need to recover the
    Python script created when you trained your model.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Important tip
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'If you are having trouble loading Azure libraries, update the AzureML SDK by
    running the `Update AzureML SDK.ipynb` notebook, found here: [https://github.com/PacktPublishing/Automated-Machine-Learning-with-Microsoft-Azure/blob/master/Update-AzureML-SDK.ipynb](https://github.com/PacktPublishing/Automated-Machine-Learning-with-Microsoft-Azure/blob/master/Update-AzureML-SDK.ipynb).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Import the non-Azure libraries with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You are already familiar with `pandas`, `numpy`, `os`, and `random`. If you
    need a refresher, please consult [*Chapter 4*](B16595_04_ePub.xhtml#_idTextAnchor056),
    *Building an AutoML Regression Solution*, or [*Chapter 9*](B16595_09_ePub.xhtml#_idTextAnchor129),
    *Implementing a Batch Scoring Solution*, for `os` and `random`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Onto the new packages, `requests` lets you make web requests to your deployed
    endpoints. This package will let you test your deployment and score data using
    your endpoint, while `json` lets you transform your data into the JSON format
    used by web requests.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Connect your Jupyter notebook to your AMLS workspace with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If you are prompted to log in, follow the instructions.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Set your datastore to the default with the first line of code. If you want
    to use a different datastore, use the second and third lines of code instead,
    replacing `workspaceblobstore`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set your compute cluster to the one you created in [*Chapter 2*](B16595_02_ePub.xhtml#_idTextAnchor023),
    *Getting Started with Azure Machine Learning Service*, with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set your environment to `AzureML-AutoML` with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`AzureML-AutoML` is a standard environment that comes with the AzureML SDK.
    You can use this environment for any real-time AutoML deployment.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: There are many different standard environments that come with the AzureML SDK.
    You can access a list of them by using the `Environment.list` function.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Set your `Diabetes-AllData-Regression-AutoML` model with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This is the model you will deploy to an endpoint to score diabetes data in real
    time.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Navigate to your AML studio and click **Models** on the left-hand panel. You
    need to retrieve the experiment and run the ID associated with your model.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the blue link to open `Diabetes-AllData-Regression-AutoML`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy `Diabetes-Sample-Regression` if you followed the instructions word for
    word in [*Chapter 4*](B16595_04_ePub.xhtml#_idTextAnchor056), *Building an AutoML
    Regression Solution*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Set your experiment and run ID with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Retrieve your AutoML run with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The reason you are retrieving your old run is so you can pull the Python script
    out of it that was used to deploy the models. This is the same script that was
    used to deploy your models using the GUI.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Important tip
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You can always retrieve old model runs using this code. This is important if
    you forgot to register models. You can similarly retrieve old ML pipeline runs.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Extract the best model fitted by AutoML with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This code retrieves two objects, the best run as well as the model. You will
    only use the best run, but `get_output()` requires you to pass two objects or
    the function will return an error.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Make a folder to hold all of your real-time scripts with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Retrieve the Python script you will use for scoring data in real time with
    the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: When AutoML trains a model, it outputs a scoring file for real-time inferencing.
    This file is always called `scoring_file_v_1_0_0.py` and is located in the `outputs`
    folder. This code grabs that file and saves it as `Diabetes_Inference.py`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Set a variable to name your ACI deployment:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Configure your endpoint to use your Python script and `Azure-AutoML` environment
    with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Configure your ACI deployment with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Notice you need to set the number of cores to use for the deployment as well
    as the amount of memory to reserve. You can also set tags and add a description.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create your ACI endpoint with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This code requires you to pass your AMLS workspace, the name of your ACI deployment,
    your ML model, your endpoint (inference) configuration, your ACI configuration,
    and to set an `overwrite` flag to `True` or `False`. Your endpoint should take
    between 5 and 10 minutes to deploy.
  prefs: []
  type: TYPE_NORMAL
- en: Testing your real-time scoring endpoint
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now that you have created a real-time scoring endpoint on ACI, it''s time to
    test it. First, you''ll need to create some data to test it with, then you need
    to convert it to JSON and pass it into the endpoint with the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To create some random `Diabetes` data, first, create a range of possible values
    for each variable using the minimum and maximum values from the `Diabetes` sample
    dataset you created in [*Chapter 2*](B16595_02_ePub.xhtml#_idTextAnchor023), *Getting
    Started with Azure Machine Learning Service*, with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create an empty list to help generate the sample data. This is similar to the
    method you used to create sample `Iris` data in [*Chapter 9*](B16595_09_ePub.xhtml#_idTextAnchor129),
    *Implementing a Batch Scoring Solution*. Also, create an empty pandas dataframe
    and assign columns to it with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use the following code to create sample diabetes data using a `for` loop:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This code is identical to the code you used to create `Iris` data. Please refer
    to [*Chapter 9*](B16595_09_ePub.xhtml#_idTextAnchor129), *Implementing a Batch
    Scoring Solution*, for a detailed explanation.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Register your sample data with the name `Diabetes Scoring` with the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will write the underlying data to your default datastore and register it
    as a dataset called `Diabetes Scoring`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Convert `DiabetesDF` into a JSON object beginning with `{"data":` and ending
    with `}`. Every AutoML real-time deployment requires data in this format:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Important tip
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: When creating a JSON file, always set `orient` to `records`. Any other JSON
    format risks errors.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'View your data to understand what your incoming data should look like:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Your data should resemble *Figure 11.4*, although the values will be different
    based on your data. The key point is that the JSON values need to be in a key-value
    pair to guarantee a correct prediction:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 11.4 – JSON format ](img/Figure_11.4_B16595.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Figure 11.4 – JSON format
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Navigate to your AML studio front page and click **Endpoints**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the blue link to `diabetes-scoring-aci` and click **Consume**. Copy the
    URL that links to your endpoint and paste it in a text editor such as Notepad.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Going back to your code, set the URL and headers as variables:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: While you need to enter your URL, the headers will be the same for every deployment.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Test your ACI deployment with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You have now coded a real-time scoring endpoint hosted on ACI and have successfully
    tested it. Additionally, you understand how your data needs to be shaped and formatted
    in JSON in order to be scored. Once you have confirmed that your real-time endpoint
    is working in ACI, the next step is to create an AKS cluster and deploy the production
    version there as you will do next.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an AKS cluster through Python
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Creating an AKS cluster through code is just as easy and straightforward as
    creating it through the GUI. Many organizations require all infrastructure to
    be created as code, and you can use the following steps as a template:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Continuing in your Jupyter notebook, set variables for your VM size, the number
    of nodes required, your AKS cluster location, and your AKS cluster name:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set your AKS cluster configurations with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: When setting your configurations, keep in mind that your node count multiplied
    by the number of cores on each VM must be greater than or equal to 12\. Also,
    think about where the incoming data will be coming from when setting your Azure
    location.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create your AKS cluster with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You have to pass in your AMLS workspace, AKS cluster name, and AKS cluster provisioning
    configurations. It should take about 5-10 minutes to spin up your cluster.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You have just created an AKS cluster via code. Once it is up and running, you
    can deploy your scoring endpoint to your AKS cluster and test it using many of
    the same variables you have already created. For this reason, it's recommended
    that you create both the ACI and AKS endpoint in the same Jupyter notebook. It
    will save you a lot of work copying over code.
  prefs: []
  type: TYPE_NORMAL
- en: Creating and testing a real-time endpoint with AKS through Python
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Your last task in this section is to deploy your real-time scoring endpoint
    to your AKS cluster, grab the URL and access key, and test your deployment. There
    are only a few steps, as you have already created most of the code when deploying
    to ACI.
  prefs: []
  type: TYPE_NORMAL
- en: 'At the end of this chapter, remember to delete your AKS endpoints and cluster
    as they can be quite expensive and rack up a bill. Within the same Jupyter notebook,
    continue with the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Set your target AKS cluster with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set a variable for the name of your AKS deployment:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Configure your AKS deployment with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Notice that these configurations are identical to those used for your ACI deployment.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create your AKS endpoint with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Notice that this code is nearly identical to the code you used to create the
    ACI deployment; the one difference is that you also must pass in the AKS cluster.
    This is because AKS is hosted on a cluster of VMs that you manage, whereas ACI
    is a serverless container service.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Navigate to your AML studio front page and click **Endpoints**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the blue link to open `diabetes-scoring-aks` and click **Consume**. Copy
    the URL that links to your endpoint and paste it in a text editor such as Notepad.
    Do the same thing for your access key, using either the primary or secondary key.
    Either will work.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Going back to your code, set your URL, key, and headers as variables:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, you need to add in one additional header for authorization. **Bearer functions**
    work by granting access to anyone who provides the correct key.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Important tip
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In a production setting, make sure you store all of your keys in **Azure Key
    Vault** and do not expose your passwords and keys in open code. This is a best
    practice that will protect you.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Test your AKS deployment with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You should see the same results as your ACI test as they use the same input
    data. Make sure the output matches and you can call your test a success.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You have now learned everything you need to learn in order to successfully create
    a real-time scoring endpoint in Azure. These endpoints can be used anywhere in
    any other piece of code. Make sure that any data that gets pushed into the endpoint
    is in the correct JSON format and your projects will be successful.
  prefs: []
  type: TYPE_NORMAL
- en: The last part of this chapter deals with optimizing the performance of your
    AKS clusters. There is some fine-tuning involved that can greatly enhance the
    response time of your scoring solution.
  prefs: []
  type: TYPE_NORMAL
- en: Improving performance on your AKS cluster
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes you will deploy an endpoint on AKS and it doesn't perform how you'd
    like. Maybe it times out, maybe it's too slow, maybe an endpoint that was previously
    working fine suddenly gets a lot more traffic that it cannot handle. These situations
    happen, and you must be prepared to face them.
  prefs: []
  type: TYPE_NORMAL
- en: 'Thankfully, AKS deployments have a lot of additional configurations that you
    can take advantage of to solve these problems. This section covers some of the
    more common situations as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Depending on how complex your model is, how many data points you are trying
    to score, and the size of your VMs, AKS models can sometimes take a while to score
    or even timeout. In this situation, there are many things you can do.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: First, you can try increasing the size of your VM, selecting one with more RAM.
    Next, you can add an additional setting to your deployment configuration, `scoring_timeout_ms`.
    This setting defaults to `60000` milliseconds, or 1 minute. You can adjust it
    to a maximum of `300000` milliseconds, or 5 minutes. Sometimes, adjusting `memory_gb`
    or upping the number of `cpu_cores` can help too.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Check the size of your model using AML studio. You can do this by clicking `memory_gb`
    setting on your deployment configurations.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the case where your endpoint is suddenly encountering surges in traffic that
    it cannot handle, try turning on autoscaling and increasing its ability to scale.
    `autoscale_enabled` to `True` in your deployment configurations.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can also manually adjust the minimum and maximum number of replicas autoscaling
    will create using `autoscale_min_replicas` and `autoscale_max_replicas`. These
    default to `1` and `10`, respectively. Try upping both of these to increase performance
    in the case of heavy traffic.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Armed with this information, you can easily create powerful AKS deployments
    that meet your business and performance requirements. When traffic is heavy, up
    the autoscaling. When your application times out, adjust the timeout setting.
    When your AKS endpoint runs slowly, try using a larger VM or adjusting the memory
    settings. Above all, always test your deployment in ACI before deploying it in
    AKS, and make sure that input data is coming in the correct JSON format in key-value
    pairs.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You have now created and tested real-time scoring solutions using an AutoML
    trained model. Deploying first on ACI and then on AKS, you understand the full
    end-to-end process of creating a real-time scoring endpoint.
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, you understand how data must be shaped and formatted in order to
    generate predictions using these endpoints, which can be incorporated into any
    piece of code using a wide variety of computer languages to create powerful, innovative
    solutions.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, [*Chapter 12*](B16595_12_ePub.xhtml#_idTextAnchor184),
    *Realizing Business Value with AutoML*, the final chapter of the book, you will
    learn how to present AutoML solutions in a way that will gain the trust of your
    non-technical business partners. Their trust and acceptance, after all, is the
    foundation to unlocking the power and value of ML and artificial intelligence
    in your organization.
  prefs: []
  type: TYPE_NORMAL
