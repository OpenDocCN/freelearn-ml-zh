- en: Getting Started with PyCUDA
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have seen how we can accelerate various applications using OpenCV and CUDA.
    We have used C or C++ as a programming language. Nowadays, Python is very popular
    in many domains, so it will be very useful if we can accelerate Python applications
    using CUDA. Python provides a PyCUDA module that does exactly that.
  prefs: []
  type: TYPE_NORMAL
- en: It uses the Nvidia CUDA toolkit which, in turn, requires an Nvidia graphics
    card installed on the computer. This chapter will give an introduction to the
    Python language and the PyCUDA module, in particular. It will discuss the installation
    procedure for the PyCUDA module on the Windows and Linux operating systems. Though
    the chapter requires some familiarity with the Python language, newcomers will
    also be able to follow most of the procedures.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to the Python Programming Language
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction to the PyCUDA module
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installation of PyCUDA on Windows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installation of PyCUDA on Ubuntu
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter requires a good understanding of the Python programming language.
    It also requires any computer or laptop with an Nvidia GPU on board. The PyCUDA
    installation file for Windows used in this chapter can be downloaded from the
    following GitHub link: [https://github.com/PacktPublishing/Hands-On-GPU-Accelerated-Computer-Vision-with-OpenCV-and-CUDA](https://github.com/PacktPublishing/Hands-On-GPU-Accelerated-Computer-Vision-with-OpenCV-and-CUDA).'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to Python programming language
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Python is continuously gaining popularity as it can be used in many fields with
    a wide range of applications. It is a high-level programming language that helps
    in expressing complex systems with a few lines of code. The Python syntax is easy
    to learn and more readable than other languages such as C++ and Java, which makes
    it easy to learn for novice programmers.
  prefs: []
  type: TYPE_NORMAL
- en: Python is a lightweight scripting language that can be easily used in embedded
    applications. Moreover, it is an interpreted language that requires an interpreter
    rather than a compiler, as is case for other programming languages. This allows
    the programmer to execute code line by line. It requires a Python interpreter
    that can be easily installed on all operating systems. Since Python is open source,
    a large community chooses to work with it. They have developed a wide range of
    libraries and made it open source, and hence it can be easily used in applications
    without any cost.
  prefs: []
  type: TYPE_NORMAL
- en: Python can be used in various domains such as data science, machine learning,
    deep learning, data analytics, image processing, computer vision, data mining,
    and web development. It has ready-to-use modules for almost all of the OS mentioned
    domains, which help in the rapid development of applications. OpenCV library,
    which was explained earlier in this book, also has a Python interface. Thus, it
    can be easily integrated with Python code for computer vision applications. Python
    has libraries for machine learning and deep learning that can be used for computer
    vision applications along with OpenCV.
  prefs: []
  type: TYPE_NORMAL
- en: One disadvantage of an interpreted language like Python is that it is much slower
    than compiled languages like C or C++. Python has a feature whereby it can integrate
    C or C++ code within a Python script. This allows you to write computationally
    intensive code in C or C++ with a Python wrapper.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to the PyCUDA module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the last section, we saw many advantages of using the Python programming
    language. It is also mentioned that Python is much slower than C or C++. So, it
    will be beneficial if it can leverage the parallel processing capability of a
    GPU. Python provides a PyCUDA wrapper that can utilize the parallel computing
    capability of a GPU by using the Nvidia CUDA API. Python also has a `PyOpenCL`
    module that can be used for parallel computation on any GPU.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, one question you might ask is why you have to use PyCUDA, which is specific
    to Nvidia GPUs. There are many advantages of using PyCUDA over other similar modules;
    the following are the reasons:'
  prefs: []
  type: TYPE_NORMAL
- en: It provides an easy interface with CUDA API for Python developers and has good
    documentation, which make it easy to learn.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The full power of CUDA API provided by Nvidia can be used within Python code
    using the PyCUDA module.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The base layer of PyCUDA is written in C++, which makes it faster.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It has a higher level of abstraction, which makes it easy to use compared to
    the Nvidia C-based runtime API.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It has a very efficient memory management mechanism with object cleanup tied
    to the lifetime of the objects. This feature helps it to write correct code, without
    memory leak or crashing.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The errors within the CUDA code can also be handled by Python exceptions, which
    helps with the error-handling mechanism in the code.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This section described the advantage of using PyCUDA for the acceleration of
    Python applications. In the next section, we will see the procedure to install
    PyCUDA on Windows and Ubuntu operating systems.
  prefs: []
  type: TYPE_NORMAL
- en: Installing PyCUDA on Windows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This section will describe the steps to install PyCUDA on a Windows operating
    system. Windows 10 is used for the demonstration, but the procedure will work
    on any recent Windows versions. The steps are described below:'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you have not installed CUDA toolkit, as described in the first chapter,
    then download the latest CUDA toolkit from [https://developer.nvidia.com/cuda-downloads](https://developer.nvidia.com/cuda-downloads).
    It will ask for your operating system, CPU architecture, and whether to install
    using the internet or to download the entire installer first. As can be seen from
    the following screenshot, we have chosen Windows 10 with the local installer.
    You can choose values according to your settings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ae642ac8-6b1a-4f9b-9532-8fbe1e3cb864.png)'
  prefs: []
  type: TYPE_IMG
- en: Install the CUDA toolkit by double-clicking on the downloaded installer and
    follow the on-screen prompts.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Install the latest Visual Studio edition, which has a visual C++ version. We
    are using Visual Studio 2017 community edition, which is free to use. The path
    for visual C++ should be added to the path environment variable. The environment
    variable can be accessed by right-clicking on My Computer (This PC) | Properties
    |Advanced System Settings | Environment Variables | System variables. Add the
    path for the bin folder of the visual C++ installation and CUDA toolkit installation
    in the path environment variable, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a70049af-9585-4a38-8118-9a140b897611.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Anaconda distribution will be used as a Python interpreter so it can be downloaded
    from the site: [https://www.anaconda.com/download/](https://www.anaconda.com/download/).
    We are using Anaconda 5.2 with the Python 3.6 version, as shown in the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/42406870-55a4-4387-828f-335d04cca10a.png)'
  prefs: []
  type: TYPE_IMG
- en: Install Anaconda by double-clicking on the downloaded installer and following
    the on-screen prompts. Make sure you check the checkbox for adding the installation
    path to the path environment variable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Download the latest PyCUDA binary according to your system settings from the
    following link: [https://www.lfd.uci.edu/~gohlke/Pythonlibs/#pycuda](https://www.lfd.uci.edu/~gohlke/pythonlibs/#pycuda).
    We are using CUDA 9.2148 and Python 3.6, so the PyCUDA version is chosen accordingly,
    as the following shows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/30cf9414-6c74-4169-afec-83990c47786d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Open Command Prompt, go to the folder where the PyCUDA binary is downloaded
    and execute the command as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/472e61cf-6ce4-4c7e-9c99-5e40b9498d48.png)'
  prefs: []
  type: TYPE_IMG
- en: The command will complete the installation of PyCUDA in the Python distribution.
  prefs: []
  type: TYPE_NORMAL
- en: Steps to check PyCUDA installation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following steps are to be followed to check whether PyCUDA has been installed
    correctly or not:'
  prefs: []
  type: TYPE_NORMAL
- en: Open Spyder, which is a Python IDE, that comes with Anaconda installations.
    You can open it by writing `Spyder` in the start menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In Spyder IDE, type `import pycuda` on the IPython console as shown in the following
    screenshot. If no error is reported, then PyCUDA is installed correctly.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9892c652-ffaf-47d0-8b22-3f4074e9660b.png)'
  prefs: []
  type: TYPE_IMG
- en: Installing PyCUDA on Ubuntu
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This section will describe the steps to install PyCUDA on Linux operating systems.
    Ubuntu is used for demonstration but the procedure will work on any recent Linux
    distribution. The steps are described below:'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you have not installed the CUDA toolkit, as described in the first chapter,
    then download the latest CUDA toolkit from [https://developer.nvidia.com/cuda-downloads](https://developer.nvidia.com/cuda-downloads).
    It will ask for your operating system, CPU architecture, and whether to install
    using the internet or to download the entire installer first. As can be seen from
    the following screenshot, we have chosen Ubuntu with the runfile (local) installer.
    You can choose values according to your settings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c9df1b5b-84b8-4232-9b4f-efb0443e53bd.png)'
  prefs: []
  type: TYPE_IMG
- en: Run the **sudo sh cuda_9.2.148_396.37_linux.run** command on Command Prompt
    to install the CUDA toolkit.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Anaconda distribution will be used as a Python interpreter so it can be downloaded
    and installed from the site: [https://www.anaconda.com/download/](https://www.anaconda.com/download/).
    We are using Anaconda 5.2 with the Python 3.6 version, as shown in the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/325eb07d-faf7-490a-9d6e-04376debb772.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After installing Anaconda, execute the following command on the Terminal, as
    shown in the following screenshot to install PyCUDA:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e65a3086-c320-425d-9b02-72ddde1d3fbc.png)'
  prefs: []
  type: TYPE_IMG
- en: The command will complete the installation of PyCUDA in the Python distribution.
  prefs: []
  type: TYPE_NORMAL
- en: Steps to check the PyCUDA installation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following steps are to be followed to check whether PyCUDA has been installed
    correctly or not:'
  prefs: []
  type: TYPE_NORMAL
- en: Open Spyder, which is the Python IDE that comes with the Anaconda installation.
    You can open it by writing `Spyder` in the Terminal.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In Spyder IDE, type `import pycuda` on the IPython console as shown in the following
    screenshot. If no error is reported then PyCUDA is installed correctly.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/a27e743a-edf4-4077-bd34-a07581ff11bb.png)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To summarize, this chapter gave an introduction to the Python programming language
    and how it is used in various domains for a vast range of applications. It is
    lightweight but slow compared to the C or C++ languages. So, if it can leverage
    the advantages of the parallel computing capability of the GPU then it will be
    very useful. PyCUDA is a Python wrapper that allows the Python code to take advantage
    of Nvidia CUDA APIs. The advantage of PyCUDA over other parallel processing modules
    available in Python is explained in detail. PyCUDA uses an Nvidia CUDA runtime
    API and Python interpreter. Anaconda, which is a famous Python distribution, comes
    with many useful Python libraries and IDEs installed, along with the CUDA toolkit.
    The detailed steps to install PyCUDA on Windows and Ubuntu operating systems are
    discussed in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: We will see how to use PyCUDA to accelerate Python applications in detail in
    the next two chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What are the advantages of Python over programming languages like C or C++?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the difference between compiled type languages and interpreted languages?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'State true or false: Python is faster than C or C++.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the advantage of PyOpenCL over PyCUDA?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'State true or false: Python allows the use of C or C++ code within Python script.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
