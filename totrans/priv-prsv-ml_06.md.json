["```py\n%matplotlib inline\nimport numpy as np\nimport matplotlib.pyplot as plt\nx = np.arange(0,10, 0.25)\n# define f(x) = e power (-x)\nplt.plot(x, np.exp(-x));\nplt.xlabel(\"x\")\nplt.ylabel(\"f(x)\")\n```", "```py\ndef laplace_dist(x, μ, b):\n    return 1 / (2 * b) * np.exp(-np.abs(x - μ) / b)\ndef plot_laplace_dist(x, μ, b):\n    plt.plot(x, laplace_dist(x, μ, b),\n    label=\"μ={}, b={}\".format(μ, b))\nx = np.arange(-10, 10, 0.1)\nplot_laplace_dist(x, -2, 4)\nplt.axvline(x=-2, linestyle='dotted', linewidth=3, label='mean')\nplot_laplace_dist(x, 4, 8)\nplt.axvline(x=4, color='orange', linestyle='dotted', linewidth=3, label='mean')\nplt.legend();\n```", "```py\nε = 0.5\nx = np.arange(90.2, 110, 0.20)\nquery_result=np.average(x)\ndist1 = laplace_dist(x, query_result, 1 / ε)\ndist2 = laplace_dist(x, query_result + 1, 1 / ε)\nplt.plot(x, dist1, label=\"distribution 1\")\nplt.plot(x, dist2, label=\"distribution 2\")\nplt.axvline(x=query_result, c=\"black\", linestyle='dotted', label=\"query result\")\nplt.legend()\n```", "```py\np1 = laplace_dist(query_result, query_result, 1 / ε)\np2 = laplace_dist(query_result, query_result+1, 1 / ε)\nprint(p1,p2)\n```", "```py\np1, p2 * np.exp(ε)\n```", "```py\ndef guissan_dist(x, μ, σ):\n    return (1/(σ * np.sqrt(2 * np.pi)) * np.exp(-(x - μ)**2 / (2 * σ**2)))\ndef plot_guissan(x, μ, σ ):\n    plt.plot(x, guissan_dist(x, μ, σ),\n    label=\"μ={}, σ ={}\".format(μ, σ ))\nx = np.arange(-10, 10, 0.1)\nstdv=np.std(x)\nplot_guissan(x, -2, stdv)\nplot_laplace_dist(x,-2,4)\nplt.legend()\n```", "```py\nquery_result=100\np1 = guissan_dist(query_result, query_result, 1 / ε)\np2 = guissan_dist(query_result, query_result+1, 1 / ε)\nprint(p1,p2)\n0.19947114020071635 0.17603266338214976\np1, p2 * np.exp(ε)\n0.19947114020071635, 0.29022879645614585\n```", "```py\np1, p2 * np.exp(ε)-0.09075\n0.19947114020071635, 0.19947879645614586\n```", "```py\ndef f(x):\n    return x ** 3\ndef sensitivity(f, xa, xb):\n    sensitivity = abs(f(xa) - f(xb))\n    return sensitivity\n# Sensitivity calculation for the input range 0 to 6 and summing the sensitivities\ntotal_sensitivity = 0\nfor x in range(6):\n    xa = x\n    xb = x + 1\n    sensitivity_value = sensitivity(f, xa, xb)\n    print(sensitivity_value)\n    total_sensitivity += sensitivity_value\nprint(\"Total Sensitivity within the range 0 to 6:\", total_sensitivity)\n```", "```py\n1\n7\n19\n37\n61\n91\nTotal sensitivity within the range 0 to 6: 216\n```", "```py\nimport numpy as np\nTotal_employees = 4\nsensitivity = 1\nprint(\"sensitivity:\",sensitivity )\n# epsilon =privacy loss or budget\nepsilon= 0.8\nnoise = np.random.laplace(loc=0, scale=sensitivity/epsilon)\nprint(\"noise:\",noise)\ncount_employee_dp = Total_employees + noise\nprint (\"count with DP:\", count_employee_dp)\n```", "```py\nsensitivity: 1\nnoise: 2.247932787995729\ncount with DP: 6.24793278799573\n```", "```py\nTotal_salary = 1400\nLower_bound=100\nUpper_bound=9999\nsensitivity = Upper_bound - Lower_bound\nprint(\"sensitivity:\",sensitivity )\n# epsilon =privacy loss or budget\nepsilon= 0.9\nnoise = np.random.laplace(loc=0, scale=sensitivity/epsilon)\nprint(\"noise:\",noise)\nTotal_salary_dp = Total_salary + noise\nprint (\"total salary with DP:\",Total_salary_dp)\n```", "```py\nsensitivity: 9899\nnoise: 4724.329480136737\ntotal salary with DP: 6124.329480136737\n```", "```py\nAverage_salary = 350\nTotal_salary_dp = 6124.329480136737\ncount_dp = 6.24793278799573\ndp_average = (Total_salary_dp)/count_dp\ndp_average\n980.2169274137402\n```", "```py\nimport random\n# Generate a list of simulated likes per user\nlikes_per_user = [random.randint(0, 100) for _ in range(1000)]\nprint(likes_per_user)\n# Calculate the average number of likes per user\naverage_likes = sum(likes_per_user) / len(likes_per_user)\nprint(\"Average likes per user (without differential\nprivacy):\", average_likes)\n```", "```py\nimport random\nimport numpy as np\n# Generate a list of simulated likes per user\nlikes_per_user = [random.randint(0, 100) for _ in range(1000)]\naverage_likes = sum(likes_per_user) / len(likes_per_user)\nprint(\"Average likes per user (without differential\nprivacy):\", average_likes)\n# Set the sensitivity\nsensitivity = 1\n# Clip the likes per user to a specified range\nclipped_likes_per_user = np.clip(likes_per_user, 0, 100)\n# Calculate the average number of likes per user\nclipped_average_likes = np.mean(clipped_likes_per_user)\n# Define the privacy budget and epsilon value\nprivacy_budget = 1.0\nepsilon = 0.1\n# Calculate the scale parameter for the Laplace distribution\nscale = sensitivity / (privacy_budget * epsilon)\n# Inject noise using the Laplace mechanism\nnoisy_average_likes = clipped_average_likes + np.random.laplace(0, scale)\nprint(\"Average likes per user (with differential privacy):\", noisy_average_likes)\nAverage likes per user (without differential privacy): 51.252\nAverage likes per user (with differential privacy): 41.61714462702061\n```", "```py\nimport pandas as pd\ndata = {'age': [32, 44, 55, 66],\n  'salary': [200, 300, 400, 500]}\ndf = pd.DataFrame(data)\ndf['salary'].clip(lower=0, upper=999)\n```", "```py\n0    200\n1    300\n2    400\n3    500\nName: salary, dtype: int64\n```", "```py\nimport pandas as pd\ndata = {'age': [32, 44, 55, 66], 'salary': [200, 300, 400, 500]}\ndf = pd.DataFrame(data)\ndf['salary'].clip(lower=250, upper=400)\n```", "```py\n0    250\n1    300\n2    400\n3    400\nName: salary, dtype: int64\n```", "```py\ndef laplace_mech(v, sensitivity, epsilon):\n    return v + np.random.laplace(loc=0, scale=sensitivity/epsilon)\nepsilon = 0.9\nsensitivity=400-100\nprint(laplace_mech(df['salary'].clip(lower=100, upper=400).sum(),sensitivity,epsilon))\nprint(laplace_mech(df['salary'].sum(),sensitivity,epsilon))\n```", "```py\n1693.8114539575836.  (With clipped)\n1793.7575175454226.  (without clipping)\n```", "```py\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nplt.style.use('seaborn-whitegrid')\ndata = {'age': [32, 44, 55,66], 'salary': [200, 300, 400, 500]}\ndf = pd.DataFrame(data)\ndef laplace_mech(queryresult, sensitivity, epsilon):\n    return queryresult + np.random.laplace(loc=0, scale=sensitivity/epsilon)\nepsilon = 0.5\nplt.plot([laplace_mech(df['salary'].clip(lower=0, upper=i).sum(), i, epsilon) for i in range(100,800,100)])\nplt.xlabel('Clipping ranges for salary')\nplt.ylabel('Total salary');\n```"]