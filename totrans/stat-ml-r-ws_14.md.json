["```py\n\nlibrary(socviz)\ndata(gss_lon)\n```", "```py\n\n>>> dim(gss_lon)\n62466    25\n```", "```py\n\n>>> glimpse(gss_lon)\n```", "```py\n\n    >>> summary(gss_lon$siblings)\n        0     1     2     3     4     5    6+  NA's\n     3047 10152 11313  9561  7024  5066 14612  1691\n    ```", "```py\n\n    gss2016 = gss_lon %>% filter(year == 2016)\n    Plot the count of siblings in a bar chart using ggplot().\n    ggplot(gss2016, aes(x = siblings)) +\n      geom_bar() +\n      labs(title = \"Frequency count of siblings\", x = \"Number of siblings\", y = \"Count\") +\n      theme(text = element_text(size = 16))\n    ```", "```py\n\n    p_hat = gss2016 %>%\n      summarize(prop_2sib = mean(siblings==\"2\", na.rm=TRUE)) %>%\n      pull()\n    >>> p_hat\n    0.208246\n    ```", "```py\n\n    library(infer)\n    gss2016 = gss2016 %>%\n      mutate(siblings_two_ind = if_else(siblings==\"2\",\"Y\",\"N\")) %>%\n      filter(!is.na(siblings_two_ind))\n    bs = gss2016 %>%\n      specify(response = siblings_two_ind,\n              success = \"Y\") %>%\n      generate(reps = 500,\n               type = \"bootstrap\") %>%\n      calculate(stat = \"prop\")\n    ```", "```py\n    >>> bs\n    Response: siblings_two_ind (factor)\n    # A tibble: 500 × 2\n       replicate  stat\n           <int> <dbl>\n     1         1 0.205\n     2         2 0.209\n     3         3 0.218\n     4         4 0.189\n     5         5 0.207\n     6         6 0.205\n     7         7 0.221\n     8         8 0.214\n     9         9 0.212\n    10        10 0.212\n    # … with 490 more rows\n    # i Use `print(n = ...)` to see more rows\n    ```", "```py\n\n    >>> ggplot(bs, aes(x = stat)) +\n      geom_density() +\n      labs(title = \"Density plot of the sample proportions\", x = \"Sample proportion\", y = \"Density\") +\n      theme(text = element_text(size = 16))\n    ```", "```py\n\n    SE = bs %>%\n      summarise(sd(stat)) %>%\n      pull()\n    >>> SE\n    0.007181953\n    ```", "```py\n\n    >>> c(p_hat - 2*SE, p_hat + 2*SE)\n    0.1938821 0.2226099\n    ```", "```py\n\n    SE2 = sqrt(p_hat*(1-p_hat)/nrow(gss2016))\n    >>> c(p_hat - 2*SE2, p_hat + 2*SE2)\n    0.193079 0.223413\n    ```", "```py\n\n    gss2016 %>%\n      ggplot(aes(x = siblings_two_ind)) +\n      geom_bar() +\n      labs(title = \"Frequency count of families with two siblings\", x = \"Have two siblings\", y = \"Count\") +\n      theme(text = element_text(size = 16))\n    ```", "```py\n\n    p_hat = gss2016 %>%\n      summarize(mean(siblings_two_ind==\"Y\")) %>%\n      pull()\n    >>> p_hat\n    0.208246\n    ```", "```py\n\n    null = gss2016 %>%\n      specify(response = siblings_two_ind,\n              success = \"Y\") %>%\n      hypothesise(null = \"point\",\n                  p = 0.19) %>%\n      generate(reps = 500,\n               type = \"draw\") %>%\n      calculate(stat = \"prop\")\n    >>> null\n    Response: siblings_two_ind (factor)\n    Null Hypothesis: point\n    # A tibble: 500 × 2\n       replicate  stat\n       <fct>     <dbl>\n     1 1         0.179\n     2 2         0.193\n     3 3         0.176\n     4 4         0.181\n     5 5         0.181\n     6 6         0.198\n     7 7         0.191\n     8 8         0.189\n     9 9         0.194\n    10 10        0.189\n    # … with 490 more rows\n    # i Use `print(n = ...)` to see more rows\n    ```", "```py\n\n    ggplot(null, aes(x = stat)) +\n      geom_density() +\n      geom_vline(xintercept = p_hat,\n                 color = \"red\") +\n      labs(title = \"Density plot using bootstrap\", x = \"Sample proportion\", y = \"Density\") +\n      theme(text = element_text(size = 16))\n    ```", "```py\n\n    >>> null %>%\n      summarise(mean(stat > p_hat)) %>%\n      pull()* 2\n    0.02\n    ```", "```py\n\n    gss2016 = gss2016 %>%\n      mutate(higher_degree = if_else(degree %in% c(\"Bachelor\",\"Graduate\"), \"Y\", \"N\"))\n    ```", "```py\n\n    >>> table(gss2016$higher_degree)\n       N    Y\n    2008  854\n    >>> table(gss2016$sex)\n      Male Female\n      1274   1588\n    ```", "```py\n\n    ggplot(gss2016, aes(x = sex, fill=higher_degree)) +\n      geom_bar() +\n      labs(title = \"Frequency count for gender and degree\", x = \"Gender\", y = \"Count\") +\n      theme(text = element_text(size = 16))\n    ```", "```py\n\nggplot(gss2016, aes(x = sex, fill=higher_degree)) +\n  geom_bar(position = \"fill\") +\n  labs(title = \"Sample proportions for gender and degree\", x = \"Gender\", y = \"Ratio\") +\n  theme(text = element_text(size = 16))\n```", "```py\n\n    p_hats = gss2016 %>%\n      group_by(sex) %>%\n      summarise(mean(higher_degree==\"Y\", na.rm=TRUE)) %>%\n      pull()\n    d_hat = diff(p_hats)\n    >>> d_hat\n    0.007288771\n    ```", "```py\n\n    gss2016 %>%\n      specify(\n        response = higher_degree,\n        explanatory = sex,\n        success = \"Y\"\n      ) %>%\n      hypothesise(null = \"independence\") %>%\n      generate(reps = 1, type = \"permute\")\n    Response: higher_degree (factor)\n    Explanatory: sex (factor)\n    Null Hypothesis: independence\n    # A tibble: 2,862 × 3\n    # Groups:   replicate [1]\n       higher_degree sex    replicate\n       <fct>         <fct>      <int>\n     1 N             Male           1\n     2 N             Male           1\n     3 Y             Male           1\n     4 N             Female         1\n     5 N             Female         1\n     6 N             Female         1\n     7 Y             Male           1\n     8 N             Female         1\n     9 N             Male           1\n    10 N             Male           1\n    # … with 2,852 more rows\n    # i Use `print(n = ...)` to see more rows\n    ```", "```py\n\n    null = gss2016 %>%\n      specify(\n        higher_degree ~ sex,\n        success = \"Y\"\n      ) %>%\n      hypothesise(null = \"independence\") %>%\n      generate(reps = 500, type = \"permute\") %>%\n      calculate(stat = \"diff in props\", order = c(\"Female\", \"Male\"))\n    >>> null\n    Response: higher_degree (factor)\n    Explanatory: sex (factor)\n    Null Hypothesis: independence\n    # A tibble: 500 × 2\n       replicate     stat\n           <int>    <dbl>\n     1         1  0.00870\n     2         2  0.00587\n     3         3 -0.00120\n     4         4  0.0228\n     5         5  0.00446\n     6         6 -0.00827\n     7         7 -0.0366\n     8         8  0.0129\n     9         9  0.0172\n    10        10 -0.00261\n    # … with 490 more rows\n    # i Use `print(n = ...)` to see more rows\n    ```", "```py\n\n    ggplot(null, aes(x = stat)) +\n      geom_density() +\n      geom_vline(xintercept = d_hat, color = \"red\") +\n      labs(x = \"Difference in sample proportion (female - male)\", y = \"Count\") +\n      theme(text = element_text(size = 16))\n    ```", "```py\n\n    null %>%\n      summarize(pval = 2 * mean(stat > d_hat)) %>%\n      pull()\n    0.608\n    ```", "```py\n\n>>> table(gss2016$degree)\nLt High School    High School Junior College       Bachelor        Graduate\n           328           1459            215            536             318\n```", "```py\n\nggplot(gss2016, aes(x = sex, fill=degree)) +\n  geom_bar() +\n  labs(title = \"Frequency count for gender and degree\", x = \"Gender\", y = \"Count\") +\n  theme(text = element_text(size = 16))\n```", "```py\n\ntab = gss2016 %>%\n  select(sex, degree) %>%\n  table()\n>>> tab\n        degree\nsex      Lt High School High School Junior College Bachelor Graduate\n  Male              147         661             89      243      132\n  Female            181         798            126      293      186\n```", "```py\n\nperm_1 = gss2016 %>%\n  # Specify the variables of interest\n  specify(degree ~ sex) %>%\n  # Set up the null hypothesis\n  hypothesize(null = \"independence\") %>%\n  # Generate a single permuted dataset\n  generate(reps = 1, type = \"permute\")\n>>> perm_1\nResponse: degree (factor)\nExplanatory: sex (factor)\nNull Hypothesis: independence\n# A tibble: 2,856 × 3\n# Groups:   replicate [1]\n   degree         sex    replicate\n   <fct>          <fct>      <int>\n 1 Junior College Male           1\n 2 Bachelor       Male           1\n 3 High School    Male           1\n 4 High School    Female         1\n 5 High School    Female         1\n 6 High School    Female         1\n 7 Graduate       Male           1\n 8 Bachelor       Female         1\n 9 High School    Male           1\n10 High School    Male           1\n# … with 2,846 more rows\n# i Use `print(n = ...)` to see more rows\n```", "```py\n\nnull_spac = gss2016 %>%\n  specify(degree ~ sex) %>%\n  hypothesize(null = \"independence\") %>%\n  generate(reps = 500, type = \"permute\") %>%\n  calculate(stat = \"Chisq\")\n>>> null_spac\nResponse: degree (factor)\nExplanatory: sex (factor)\nNull Hypothesis: independence\n# A tibble: 500 × 2\n   replicate  stat\n       <int> <dbl>\n 1         1  3.50\n 2         2  1.11\n 3         3 14.0\n 4         4  4.62\n 5         5  1.41\n 6         6  1.41\n 7         7  9.69\n 8         8  4.17\n 9         9  5.97\n10        10  2.86\n# … with 490 more rows\n# i Use `print(n = ...)` to see more rows\n```", "```py\n\n# calculate expected frequency table\nrow_totals = rowSums(tab)\ncol_totals = colSums(tab)\noverall_total = sum(tab)\nexpected = outer(row_totals, col_totals) / overall_total\n>>> expected\n       Lt High School High School Junior College Bachelor Graduate\nMale          146.084    649.8067        95.7563 238.7227 141.6303\nFemale        181.916    809.1933       119.2437 297.2773 176.3697\n```", "```py\n\n# Compute chi-square statistic\nobserved_chi_square = sum((tab - expected)^2 / expected)\n>>> observed_chi_square\n2.536349\n```", "```py\n\nggplot(null_spac, aes(x = stat)) +\n  geom_density() +\n  geom_vline(xintercept = observed_chi_square, color = \"red\") +\n  labs(title = \"Density curve of bootstrapped chi-square statistic\", x = \"Chi-square statistic\", y = \"Density\") +\n  theme(text = element_text(size = 16))\n```", "```py\n\n>>> null_spac %>%\n  summarize(pval = 2 * mean(stat < observed_chi_square)) %>%\n  pull()\n0.72\n```", "```py\n\ndata(mtcars)\n>>> str(mtcars)\n'data.frame':  32 obs. of  11 variables:\n $ mpg : num  21 21 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 ...\n $ cyl : num  6 6 4 6 8 6 8 4 4 6 ...\n $ disp: num  160 160 108 258 360 ...\n $ hp  : num  110 110 93 110 175 105 245 62 95 123 ...\n $ drat: num  3.9 3.9 3.85 3.08 3.15 2.76 3.21 3.69 3.92 3.92 ...\n $ wt  : num  2.62 2.88 2.32 3.21 3.44 ...\n $ qsec: num  16.5 17 18.6 19.4 17 ...\n $ vs  : num  0 0 1 1 0 1 0 1 1 1 ...\n $ am  : num  1 1 1 0 0 0 0 0 0 0 ...\n $ gear: num  4 4 4 3 3 3 3 4 4 4 ...\n $ carb: num  4 4 1 1 2 1 4 2 2 4 ...\n```", "```py\n\n    bs <- mtcars %>%\n      specify(response = mpg) %>%\n      generate(reps = 10000, type = \"bootstrap\") %>%\n      calculate(stat = \"median\")\n    >>> bs\n    Response: mpg (numeric)\n    # A tibble: 10,000 × 2\n       replicate  stat\n           <int> <dbl>\n     1         1  21.4\n     2         2  22.2\n     3         3  20.4\n     4         4  17.8\n     5         5  19.2\n     6         6  19.2\n     7         7  18.4\n     8         8  20.4\n     9         9  19.0\n    10        10  21.4\n    # … with 9,990 more rows\n    # i Use `print(n = ...)` to see more rows\n    ```", "```py\n\nggplot(bs, aes(x = stat)) +\n  geom_density() +\n  labs(title = \"Density plot for bootstrapped median\", x = \"Median\", y = \"Probability\") +\n  theme(text = element_text(size = 16))\n```", "```py\n\n>>> bs %>%\n  summarize(\n    l = quantile(stat, 0.025),\n    u = quantile(stat, 0.975)\n  )\n# A tibble: 1 × 2\n      l     u\n  <dbl> <dbl>\n1  16.6  21.4\n```", "```py\n\nSE = bs %>%\n  summarise(sd(stat)) %>%\n  pull()\nobserved_median = median(mtcars$mpg)\n>>> c(observed_median - 2*SE, observed_median + 2*SE)\n16.64783 21.75217\n```", "```py\n\nbs = mtcars %>%\n  specify(response = mpg) %>%\n  hypothesize(null = \"point\", med = 16) %>%\n  generate(reps = 10000, type = \"bootstrap\") %>%\n  calculate(stat = \"median\")\n>>> bs\nResponse: mpg (numeric)\nNull Hypothesis: point\n# A tibble: 10,000 × 2\n   replicate  stat\n       <int> <dbl>\n 1         1  16\n 2         2  16.2\n 3         3  18\n 4         4  16.2\n 5         5  16\n 6         6  16.2\n 7         7  16\n 8         8  16\n 9         9  17.8\n10        10  16\n# … with 9,990 more rows\n# i Use `print(n = ...)` to see more rows\n```", "```py\n\nggplot(bs, aes(x = stat)) +\n  geom_density() +\n  geom_vline(xintercept = median(mtcars$mpg), color = \"red\") +\n  labs(title = \"Density curve of bootstrapped median\", x = \"Sample median\", y = \"Density\") +\n  theme(text = element_text(size = 16))\n```", "```py\n\n    x = pt(3, df = 10)\n    >>> x\n    0.9933282\n    ```", "```py\n\n    y = 1 - x\n    >>> y\n    0.006671828\n    ```", "```py\n\n    z = 1 - pt(3, df = 100)\n    >>> z\n    0.001703958\n    ```", "```py\n\n    d = qt(0.95, df = 10)\n    >>> d\n    1.812461\n    ```", "```py\n\n    e = qt(0.975, df = 10)\n    >>> e\n    2.228139\n    ```", "```py\n\n    f = qt(0.975, df = 100)\n    >>> f\n    1.983972\n    ```", "```py\n\n>>> mean(mtcars$mpg)\n20.09062\n```", "```py\n\n# Construct 95% CI for avg mpg\n>>> t.test(mtcars$mpg)\n  One Sample t-test\ndata:  mtcars$mpg\nt = 18.857, df = 31, p-value < 2.2e-16\nalternative hypothesis: true mean is not equal to 0\n95 percent confidence interval:\n 17.91768 22.26357\nsample estimates:\nmean of x\n 20.09062\n```", "```py\n\n    # Define two samples\n    sample1 = c(10, 12, 14, 16, 18)\n    sample2 = c(15, 17, 19, 21, 23)\n    # Combine samples into a data frame\n    data = tibble(\n      value = c(sample1, sample2),\n      group = factor(rep(c(\"Group 1\", \"Group 2\"), each = length(sample1)))\n    )\n    >>> data\n    # A tibble: 10 × 2\n       value group\n       <dbl> <fct>\n     1    10 Group 1\n     2    12 Group 1\n     3    14 Group 1\n     4    16 Group 1\n     5    18 Group 1\n     6    15 Group 2\n     7    17 Group 2\n     8    19 Group 2\n     9    21 Group 2\n    10    23 Group 2\n    ```", "```py\n\n    bootstrap_results = data %>%\n      specify(response = value, explanatory = group) %>%\n      hypothesize(null = \"independence\") %>%\n      generate(reps = 1000, type = \"bootstrap\") %>%\n      calculate(stat = \"diff in means\", order = c(\"Group 1\", \"Group 2\"))\n    >>> bootstrap_results\n    Response: value (numeric)\n    Explanatory: group (factor)\n    Null Hypothesis: independence\n    # A tibble: 1,000 × 2\n       replicate  stat\n           <int> <dbl>\n     1         1 -7.5\n     2         2 -6.17\n     3         3 -5\n     4         4 -2.20\n     5         5 -8.05\n     6         6 -4.2\n     7         7 -3.5\n     8         8 -6.67\n     9         9 -4.2\n    10        10 -6.90\n    # … with 990 more rows\n    # i Use `print(n = ...)` to see more rows\n    ```", "```py\n\n    ci = bootstrap_results %>%\n      filter(!is.na(stat)) %>%\n      get_confidence_interval(level = 0.95, type = \"percentile\")\n    >>> ci\n    # A tibble: 1 × 2\n      lower_ci upper_ci\n         <dbl>    <dbl>\n    1       -9    -1.17\n    ```", "```py\n\n    t_test_result = t.test(sample1, sample2)\n    >>> t_test_result\n       Welch Two Sample t-test\n    data:  sample1 and sample2\n    t = -2.5, df = 8, p-value = 0.03694\n    alternative hypothesis: true difference in means is not equal to 0\n    95 percent confidence interval:\n     -9.6120083 -0.3879917\n    sample estimates:\n    mean of x mean of y\n           14        19\n    ```", "```py\n    t_test_result2 = t.test(value ~ group, data = data)\n    >>> t_test_result2\n        Welch Two Sample t-test\n    data:  value by group\n    t = -2.5, df = 8, p-value = 0.03694\n    alternative hypothesis: true difference in means between group Group 1 and group Group 2 is not equal to 0\n    95 percent confidence interval:\n     -9.6120083 -0.3879917\n    sample estimates:\n    mean in group Group 1 mean in group Group 2\n                       14                    19\n    ```", "```py\n\ndata(PlantGrowth)\n>>> str(PlantGrowth)\n'data.frame':   30 obs. of  2 variables:\n $ weight: num  4.17 5.58 5.18 6.11 4.5 4.61 5.17 4.53 5.33 5.14 ...\n $ group : Factor w/ 3 levels \"ctrl\",\"trt1\",..: 1 1 1 1 1 1 1 1 1 1 ...\n```", "```py\n\nanova_results = PlantGrowth %>%\n  specify(response = weight, explanatory = group) %>%\n  hypothesize(null = \"independence\") %>%\n  generate(reps = 1000, type = \"permute\") %>%\n  calculate(stat = \"F\")\n>>> anova_results\nResponse: weight (numeric)\nExplanatory: group (factor)\nNull Hypothesis: independence\n# A tibble: 1,000 × 2\n   replicate  stat\n       <int> <dbl>\n 1         1 0.162\n 2         2 0.198\n 3         3 1.18\n 4         4 0.328\n 5         5 1.21\n 6         6 3.00\n 7         7 1.93\n 8         8 0.605\n 9         9 0.446\n10        10 1.10\n# … with 990 more rows\n# i Use `print(n = ...)` to see more rows\n```", "```py\n\np_value = anova_results %>%\n  get_p_value(obs_stat = anova_results, direction = \"right\") %>%\n  pull()\n>>> p_value\n0.376\n```"]