["```py\n(defn make-sea-bass []\n  ;; sea bass are mostly long and light in color\n  #{:sea-bass\n    (if (< (rand) 0.2) :fat :thin)\n    (if (< (rand) 0.7) :long :short)\n    (if (< (rand) 0.8) :light :dark)})\n\n(defn make-salmon []\n  ;; salmon are mostly fat and dark\n  #{:salmon\n    (if (< (rand) 0.8) :fat :thin)\n    (if (< (rand) 0.5) :long :short)\n    (if (< (rand) 0.3) :light :dark)})\n\n(defn make-sample-fish []\n  (if (< (rand) 0.3) (make-sea-bass) (make-salmon)))\n\n(def fish-training-data\n  (for [i (range 10000)] (make-sample-fish)))\n```", "```py\n(defn probability\n  \"Calculates the probability of a specific category\n   given some attributes, depending on the training data.\"\n  [attribute & {:keys\n                [category prior-positive prior-negative data]\n                :or {category nil\n                     data fish-training-data}}]\n  (let [by-category (if category\n                      (filter category data)\n                      data)\n        positive (count (filter attribute by-category))\n        negative (- (count by-category) positive)\n        total (+ positive negative)]\n    (/ positive negative)))\n```", "```py\nuser> (probability :dark :category :salmon)\n1204/1733\nuser> (probability :dark :category :sea-bass)\n621/3068\nuser> (probability :light :category :salmon)\n529/1733\nuser> (probability :light :category :sea-bass)\n2447/3068\n```", "```py\n(defn evidence-of-salmon [& attrs]\n  (let [attr-probs (map #(probability % :category :salmon) attrs)\n        class-and-attr-prob (conj attr-probs\n                                  (probability :salmon))]\n    (float (apply * class-and-attr-prob))))\n```", "```py\nuser> (evidence-of-salmon :dark)\n0.4816\nuser> (evidence-of-salmon :dark :long)\n0.2396884\nuser> (evidence-of-salmon)\n0.6932\n```", "```py\nuser> (+ (evidence-of-sea-bass) (evidence-of-salmon))\n1.0000000298023224\n```", "```py\n(defn evidence-of-category-with-attrs\n  [category & attrs]\n  (let [attr-probs (map #(probability % :category category) attrs)\n        class-and-attr-prob (conj attr-probs\n                                  (probability category))]\n    (float (apply * class-and-attr-prob))))\n```", "```py\nuser> (evidence-of-salmon :dark :fat)\n0.38502988\nuser> (evidence-of-category-with-attrs :salmon :dark :fat)\n0.38502988\n```", "```py\n(def probability-dark-long-fat-is-salmon\n  (let [attrs [:dark :long :fat]\n        sea-bass? (apply evidence-of-sea-bass attrs)\n        salmon? (apply evidence-of-salmon attrs)]\n    (/ salmon?\n       (+ sea-bass? salmon?))))\n```", "```py\nuser> probability-dark-long-fat-is-salmon\n0.957091799207812\n```", "```py\n(defn make-category-probability-pair\n  [category attrs]\n  (let [evidence-of-category (apply\n  evidence-of-category-with-attrs\n                              category attrs)]\n    {:category category\n     :evidence evidence-of-category}))\n\n(defn calculate-probability-of-category\n  [sum-of-evidences pair]\n  (let [probability-of-category (/ (:evidence pair)\n                                   sum-of-evidences)]\n    (assoc pair :probability probability-of-category)))\n```", "```py\n(defn classify-by-attrs\n  \"Performs Bayesian classification of the attributes,\n   given some categories.\n   Returns a map containing the predicted category and\n   the category's\n   probability of occurrence.\"\n  [categories & attrs]\n  (let [pairs (map #(make-category-probability-pair % attrs)\n                   categories)\n        sum-of-evidences (reduce + (map :evidence pairs))\n        probabilities (map #(calculate-probability-of-category\n                              sum-of-evidences %)\n                           pairs)\n        sorted-probabilities (sort-by :probability probabilities)\n        predicted-category (last sorted-probabilities)]\n    predicted-category))\n```", "```py\nuser> (classify-by-attrs [:salmon :sea-bass] :dark :long :fat)\n{:probability 0.957091799207812, :category :salmon, :evidence 0.1949689}\nuser> probability-dark-long-fat-is-salmon\n0.957091799207812\n```", "```py\nuser> (classify-by-attrs [:salmon :sea-bass] :dark)\n{:probability 0.8857825967670728, :category :salmon, :evidence 0.4816}\nuser> (classify-by-attrs [:salmon :sea-bass] :light)\n{:probability 0.5362699908806723, :category :sea-bass, :evidence 0.2447}\nuser> (classify-by-attrs [:salmon :sea-bass] :thin)\n{:probability 0.6369809383442954, :category :sea-bass, :evidence 0.2439}\n```", "```py\nuser> (classify-by-attrs [:salmon] :dark)\n{:probability 1.0, :category :salmon, :evidence 0.4816}\nuser> (classify-by-attrs [:salmon])\n{:probability 1.0, :category :salmon, :evidence 0.6932}\n```", "```py\n[cc.artifice/clj-ml \"0.4.0\"]\n```", "```py\n(ns my-namespace\n  (:use [clj-ml classifiers data]))\n```", "```py\n(defn rand-in-range\n  \"Generates a random integer within the given range\"\n  [min max]\n  (let [len      (- max min)\n        rand-len (rand-int len)]\n    (+ min rand-len)))\n\n;; sea bass are mostly long and light in color\n(defn make-sea-bass []\n  (vector :sea-bass\n          (rand-in-range 6 10)          ; length\n          (rand-in-range 0 5)           ; width\n          (rand-in-range 4 10)))        ; lightness of skin\n\n;; salmon are mostly fat and dark\n(defn make-salmon []\n  (vector :salmon\n          (rand-in-range 0 7)           ; length\n          (rand-in-range 4 10)          ; width\n          (rand-in-range 0 6)))         ; lightness of skin\n```", "```py\n(def bayes-classifier (make-classifier :bayes :naive))\n```", "```py\n(def fish-template\n  [{:category [:salmon :sea-bass]}\n   :length :width :lightness])\n\n(def fish-dataset\n  (make-dataset \"fish\" fish-template fish-training-data))\n```", "```py\n(defn train-bayes-classifier []\n  (dataset-set-class fish-dataset 0)\n  (classifier-train bayes-classifier fish-dataset))\n```", "```py\nuser> (train-bayes-classifier)\n#<NaiveBayes Naive Bayes Classifier\n\n                     Class\nAttribute        salmon  sea-bass\n                  (0.7)    (0.3)\n=================================\nlength\n  mean            2.9791   7.5007\n  std. dev.       1.9897   1.1264\n  weight sum        7032     2968\n  precision            1        1\n\nwidth\n  mean            6.4822   1.9747\n  std. dev.        1.706    1.405\n  weight sum        7032     2968\n  precision            1        1\n\nlightness\n  mean            2.5146   6.4643\n  std. dev.       1.7047   1.7204\n  weight sum        7032     2968\n  precision            1        1\n\n>\n```", "```py\n(def sample-fish\n  (make-instance fish-dataset [:salmon 5.0 6.0 3.0]))\n```", "```py\nuser> (classifier-classify bayes-classifier sample-fish)\n:salmon\n```", "```py\n(def K1-classifier (make-classifier :lazy :ibk))\n\n(defn train-K1-classifier []\n  (dataset-set-class fish-dataset 0)\n  (classifier-train K1-classifier fish-dataset))\n```", "```py\n(def K10-classifier (make-classifier\n                     :lazy :ibk {:num-neighbors 10}))\n```", "```py\nuser> (train-K1-classifier)\n#<IBk IB1 instance-based classifier\nusing 1 nearest neighbour(s) for classification\n>\n```", "```py\nuser> (classifier-classify K1-classifier sample-fish)\n:salmon\n```", "```py\n(def DT-classifier (make-classifier :decision-tree :c45))\n\n(defn train-DT-classifier []\n  (dataset-set-class fish-dataset 0)\n  (classifier-train DT-classifier fish-dataset))\n```", "```py\nuser> (train-DT-classifier)\n#<J48 J48 pruned tree\n------------------\nwidth <= 3: sea-bass (2320.0)\nwidth > 3\n|   length <= 6\n|   |   lightness <= 5: salmon (7147.0/51.0)\n|   |   lightness > 5: sea-bass (95.0)\n|   length > 6: sea-bass (438.0)\n\nNumber of Leaves  : 4\n\nSize of the tree : 7\n>\n```", "```py\nuser> (classifier-classify DT-classifier sample-fish)\n:salmon\n```", "```py\n(def UDT-classifier (make-classifier\n                     :decision-tree :c45 {:unpruned true}))\n```", "```py\nuser> (train-UDT-classifier)\n#<J48 J48 unpruned tree\n------------------\nwidth <= 3: sea-bass (2320.0)\nwidth > 3\n|   length <= 6\n|   |   lightness <= 5\n|   |   |   length <= 5: salmon (6073.0)\n|   |   |   length > 5\n|   |   |   |   width <= 4\n|   |   |   |   |   lightness <= 3: salmon (121.0)\n|   |   |   |   |   lightness > 3\n|   |   |   |   |   |   lightness <= 4: salmon (52.0/25.0)\n|   |   |   |   |   |   lightness > 4: sea-bass (50.0/24.0)\n|   |   |   |   width > 4: salmon (851.0)\n|   |   lightness > 5: sea-bass (95.0)\n|   length > 6: sea-bass (438.0)\n\nNumber of Leaves  : 8\n\nSize of the tree : 15\n```", "```py\nuser> (classifier-classify UDT-classifier sample-fish)\n:salmon\n```"]