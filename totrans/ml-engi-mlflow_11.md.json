["```py\n    name: pystock_training\n    conda_env: conda.yaml\n    entry_points:\n      main:\n        data_file: path\n        command: \"python main.py\"\n      train_model:\n        command: \"python train_model.py\"\n      evaluate_model:\n        command: \"python evaluate_model.py \"\n      register_model:\n        command: \"python register_model.py\"\n    ```", "```py\n    name: pystock-training\n    channels:\n      - defaults\n    dependencies:\n      - python=3.8\n      - numpy\n      - scipy\n      - pandas\n      - cloudpickle\n      - pip:\n        - git+git://github.com/mlflow/mlflow\n        - sklearn\n        - pandas_datareader\n        - great-expectations==0.13.15\n        - pandas-profiling\n        - xgboost\n    ```", "```py\n    import mlflow\n    import click\n    import os\n    def _run(entrypoint, parameters={}, source_version=None, use_cache=True):\n        print(\"Launching new run for entrypoint=%s and parameters=%s\" % (entrypoint, parameters))\n        submitted_run = mlflow.run(\".\", entrypoint, parameters=parameters)\n        return mlflow.tracking.MlflowClient().get_run(submitted_run.run_id)\n    @click.command()\n    def workflow():\n        with mlflow.start_run(run_name =\"pystock-training\") as active_run:\n            mlflow.set_tag(\"mlflow.runName\", \"pystock-training\")\n            _run(\"train_model\")\n            _run(\"evaluate_model\")        \n            _run(\"register_model\")\n\n    if __name__==\"__main__\":\n        workflow()\n    ```", "```py\n    mlflow run.\n    ```", "```py\n    import pandas as pd\n    import mlflow\n    import xgboost as xgb\n    import mlflow.xgboost\n    from sklearn.model_selection import train_test_split\n    ```", "```py\n    def train_test_split_pandas(pandas_df,t_size=0.33,r_state=42):\n        X=pandas_df.iloc[:,:-1]\n        Y=pandas_df.iloc[:,-1]\n        X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=t_size, random_state=r_state)\n        return X_train, X_test, y_train, y_test\n    ```", "```py\n    if __name__ == \"__main__\":\n        THRESHOLD = 0.5\n        mlflow.xgboost.autolog()\n        with mlflow.start_run(run_name=\"train_model\") as run:\n            mlflow.set_tag(\"mlflow.runName\", \"train_model\")\n            pandas_df=pd.read_csv(\"data/training/data.csv\")\n            pandas_df.reset_index(inplace=True)\n            X_train, X_test, y_train, y_test = train_test_split_pandas(pandas_df)\n            train_data = xgb.DMatrix(X_train, label=y_train)\n            test_data =  xgb.DMatrix(X_test)\n            model = xgb.train(dtrain=train_data,params={})        \n    ```", "```py\n            y_probas=model.predict(test_data) \n            y_preds = [1 if  y_proba > THRESHOLD else 0\\. for y_proba in y_probas]\n    ```", "```py\n            test_prediction_results = pd.DataFrame(data={'y_pred':y_preds,'y_test':y_test})\n            result = test_prediction_results.reset_index(drop=True)\n\n            result.to_csv(\"data/predictions/test_predictions.csv\")    \n    ```", "```py\n     mlflow ui\n    ```", "```py\n    import pandas as pd\n    import mlflow\n    from sklearn.model_selection import train_test_split\n    from sklearn.metrics import  \\\n        classification_report, \\\n        confusion_matrix, \\\n        accuracy_score, \\\n        auc, \\\n        average_precision_score, \\\n        balanced_accuracy_score, \\\n        f1_score, \\\n        fbeta_score, \\\n        hamming_loss, \\\n        jaccard_score, \\\n        log_loss, \\\n        matthews_corrcoef, \\\n        precision_score, \\\n        recall_score, \\\n        zero_one_loss\n    ```", "```py\n    def classification_metrics(df:None):\n        metrics={}\n        metrics[\"accuracy_score\"]=accuracy_score(df[\"y_pred\"], df[\"y_test\"]  )\n        metrics[\"average_precision_score\"]=average_precision_score( df[\"y_pred\"], df[\"y_test\"]  )\n        metrics[\"f1_score\"]=f1_score( df[\"y_pred\"], df[\"y_test\"]  )\n        metrics[\"jaccard_score\"]=jaccard_score( df[\"y_pred\"], df[\"y_test\"]  )\n        metrics[\"log_loss\"]=log_loss( df[\"y_pred\"], df[\"y_test\"]  )\n        metrics[\"matthews_corrcoef\"]=matthews_corrcoef( df[\"y_pred\"], df[\"y_test\"]  )\n        metrics[\"precision_score\"]=precision_score( df[\"y_pred\"], df[\"y_test\"]  )\n        metrics[\"recall_score\"]=recall_score( df[\"y_pred\"], df[\"y_test\"] )\n        metrics[\"zero_one_loss\"]=zero_one_loss( df[\"y_pred\"], df[\"y_test\"]  )\n        return metrics\n    ```", "```py\n    if __name__ == \"__main__\":\n        with mlflow.start_run(run_name=\"evaluate_model\") as run:\n            mlflow.set_tag(\"mlflow.runName\", \"evaluate_model\")\n            df=pd.read_csv(\"data/predictions/test_predictions.csv\")\n            metrics = classification_metrics(df)\n            mlflow.log_metrics(metrics)    \n    ```", "```py\nimport mlflow\nif __name__ == \"__main__\":\n\n    with mlflow.start_run(run_name=\"register_model\") as run:\n        mlflow.set_tag(\"mlflow.runName\", \"register_model\")\n        model_uri = \"runs:/{}/sklearn-model\".format(run.info.run_id)\n        result = mlflow.register_model(model_uri, \"training-model-psystock\")\n\n```", "```py\n    FROM continuumio/miniconda3:4.9.2\n    RUN apt-get update && apt-get install build-essential -y\n    RUN pip install \\\n        mlflow==1.18.0 \\\n        pymysql==1.0.2 \\\n        boto3\n    COPY ./training_project /src\n    WORKDIR /src\n    ```", "```py\n    docker build -t psystock_docker_training_image .\n    ```", "```py\n    docker run -e MLflow_TRACKING_SERVER=$TRACKING_SERVER_URI psystock_docker_training_image\n    ```"]