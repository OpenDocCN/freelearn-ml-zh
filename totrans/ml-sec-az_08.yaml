- en: '8'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Managing and Securing the MLOps Life Cycle
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As important as data and infrastructure are, their management can create overhead
    and take away from the actual ML tasks. When different roles collaborate on an
    ML project, there is a need to automate and standardize things to make the daily
    tasks more efficient.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will explore MLOps best practices and how we can implement
    them using Azure and other tools. We will dive into how to leverage **Infrastructure
    as Code** (**IaC**) and some applications of DevOps in the ML life cycle for **continuous
    integration**/**continuous delivery** (**CI**/**CD**) using Azure DevOps. These
    are not the only ways to implement MLOps, though. Azure provides us with comprehensive
    monitoring and logging capabilities, which we can leverage with services such
    as Event Grid and others to initiate event-driven workflows. This means we are
    not limited to tools but we can implement our own workflows and easily tailor
    them to our own processes.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we’re going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Working with MLOps in Azure Machine Learning
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Leveraging IaC
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing CI/CD
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring event-driven workflows in Azure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of the chapter, we will know what MLOps is, what CI/CD looks like
    in Azure Machine Learning, and how to combine different services and create our
    own workflows.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter delves into several DevOps concepts. Some experience with Git,
    version control, and DevOps will be useful to understand the concepts described
    in this chapter. If you lack knowledge of the preceding technologies, the following
    learning resources will help you understand some basic concepts and functions.
    Go through them to review the prerequisites needed to understand the content of
    this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Git and version** **control**: [https://learn.microsoft.com/en-us/training/modules/intro-to-git/](https://learn.microsoft.com/en-us/training/modules/intro-to-git/
    )'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Building applications with Azure** **DevOps**: [https://learn.microsoft.com/en-us/training/paths/build-applications-with-azure-devops/](https://learn.microsoft.com/en-us/training/paths/build-applications-with-azure-devops/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**GitHub** **Actions**: [https://learn.microsoft.com/en-us/training/paths/automate-workflow-github-actions/](https://learn.microsoft.com/en-us/training/paths/automate-workflow-github-actions/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with MLOps in Azure Machine Learning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The term **MLOps** is a combination of **Machine Learning** and **Operations**
    and refers to the practices, tools, and strategies for the life cycle management
    of ML models in a production environment. Just as DevOps aims to streamline the
    development and operations processes for software, MLOps aims to do the same for
    ML systems. Implementing MLOps can improve productivity, reproducibility, and
    agility in ML projects. MLOps focuses on a specific set of practices.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us explore each practice and how we can use Azure Machine Learning features
    for each one:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Collaboration**: Facilitating effective collaboration between various roles
    such as data scientists, ML engineers, and operations teams is core in ML projects
    as there are multiple roles involved in the success of the project. By using shared
    platforms and tools, a data scientist focuses on model prototyping, an ML engineer
    ensures it’s production-ready, and an operations specialist monitors its real-time
    performance. Azure Machine Learning is already implemented via a dedicated workspace
    where everyone can collaborate, promoting transparency and teamwork. Additionally,
    it is based on Azure, and with the help of Microsoft Entra ID and RBAC, we can
    implement collaboration easily while adhering to security best practices.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Versioning**: Version control in MLOps is not restricted to just code. It
    extends to datasets, model configurations, parameters, and results. The aim is
    to ensure that any experiment or model training can be deterministically reproduced
    at any time. Consider a scenario where a model’s performance suddenly drops. Using
    version control, a team can revert to an earlier, better-performing model configuration,
    identifying which dataset and hyperparameters were used at that time. This involves
    maintaining a systematic record of model versions, training data, decisions, and
    changes. It is essential for compliance, especially in regulated industries, and
    ensures that model decisions are transparent and traceable. Azure Machine Learning
    allows us to have tracking and versioning in data and models by registering them
    to the workspace.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Model validation**: This practice ensures models meet quality standards before
    deployment. It involves rigorous testing, including unit tests for code, validation
    against holdout datasets, and even real-world scenario simulations. For example,
    before deploying a self-driving car model, it’s tested in a virtual environment
    to ensure it correctly identifies pedestrians, obeys traffic signals, and reacts
    to various weather conditions. This can be implemented as part of a CI/CD pipeline.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CI/CD**: CI/CD for ML automates the model training, validation, and deployment
    processes. When new data arrives or the code changes, the model is retrained and,
    if it meets set standards, is automatically deployed. For example, after refining
    a model’s architecture, a data scientist pushes the changes to a repository. The
    CI/CD pipeline retrains the model, evaluates it, and, if it surpasses a predefined
    accuracy threshold, updates the model in production without manual intervention.
    In the next section, we will see some implementations using DevOps.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Monitoring and logging**: Continuous monitoring tracks a model’s health,
    performance, and any potential data drift. Logging captures predictions, input
    data, and anomalies, ensuring there’s traceable evidence of the model’s behavior
    in production. An image recognition model in production begins misclassifying
    certain objects. Monitoring tools detect this performance dip, and by inspecting
    the logs, engineers can identify the issue. Azure Machine Learning maintains logs
    about multiple aspects of the workspace, whether it is data drift or an endpoint
    not responding.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Scalability**: MLOps focuses on building ML systems that can scale with increasing
    data or demand, ensuring that infrastructure and processes can handle growth without
    degradation in performance. Suppose a start-up’s user base grows tenfold in a
    year. Their recommendation system, designed with scalability in mind, handles
    this surge without requiring a complete overhaul or causing service interruptions.
    As Azure Machine Learning leverages the Azure infrastructure, we can scale endpoints
    and compute to accommodate scaling scenarios such as this one.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Reproducibility**: Central to MLOps is the ability to recreate experiments,
    results, or model deployments. This ensures consistency, aids debugging, and promotes
    trust in the system. Suppose a team member discovers a groundbreaking model improvement;
    using MLOps practices, other team members can replicate the exact conditions,
    data preprocessing steps, and training configuration to verify and further build
    upon the findings. Model registration handles this within the workspace.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Automation**: Many stages of the ML life cycle, from data ingestion to model
    retraining, are automated to enhance efficiency and reduce manual errors. When
    monthly sales data is uploaded to cloud storage, an automated pipeline preprocesses
    the data, retrains a forecasting model, and updates dashboards with new predictions—all
    without human intervention. Depending on what it is that we want to do, we can
    leverage services such as DevOps, Azure Functions, or simple Webhooks to automate
    pipelines and workflows.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Incorporating MLOps practices in Azure Machine Learning creates a comprehensive
    and efficient ML life cycle management system, ensuring models are reliable and
    efficient and bring consistent value.
  prefs: []
  type: TYPE_NORMAL
- en: Let us see some of those practices in action, starting with IaC.
  prefs: []
  type: TYPE_NORMAL
- en: Leveraging IaC
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: IaC is a key practice in DevOps that enables developers and operations to automatically
    manage, provision, and configure IT infrastructure through code. In Azure, there
    are a variety of tools and services that facilitate IaC practices. We have already
    mentioned some of these previously but we will review everything here.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us delve into how IaC is implemented in Azure and the services we can use:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Azure Resource Manager** (**ARM**) **templates**: ARM templates are the native
    IaC solution in Azure. They are JSON files that define the resources you need
    to deploy for your solution. By using ARM templates, you can define and deploy
    your infrastructure declaratively. We can make them more modular by defining parameters
    for our templates to create reusable deployment scripts and implement conditional
    logic for resource deployment.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Azure Bicep**: Bicep is a language for deploying Azure resources declaratively.
    It’s essentially a transparent abstraction over ARM templates, making it easier
    to write and manage Azure infrastructure. Bicep offers a more concise and readable
    syntax compared to ARM’s JSON, and there are development environment integrations
    that provide autocompletion, type safety, and other helpful features.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Azure CLI and PowerShell**: Both Azure CLI and Azure PowerShell are command-line
    tools provided by Azure for managing Azure resources. While they are technically
    imperative tools (you’re telling Azure exactly what to do, step by step), they’re
    often used in scripts to automate provisioning and configuration tasks in an IaC
    manner.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Azure Blueprints**: Azure Blueprints allows organizations to define a repeatable
    set of Azure resources that adhere to organizational standards and requirements.
    Blueprints are more comprehensive than ARM templates, as they can define role
    assignments, policy assignments, and ARM template deployments. Like code, blueprints
    are versioned, so previous versions can be used when assigning new subscriptions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Terraform on Azure**: Terraform is an open source IaC tool developed by HashiCorp.
    It uses a language called **HashiCorp Configuration Language** (**HCL**) to define
    and provision infrastructure. Azure fully supports Terraform, allowing you to
    use it as an alternative to ARM templates. Other supported third-party platforms
    are Ansible, Chef, and Pulumi for infrastructure automation in Azure.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Regardless of which service you use, there are multiple benefits to using IaC.
    We gain consistency by eliminating environmental drift and ensuring that every
    environment is provisioned the same way. There is reusability because we can use
    the same scripts or templates across different environments or projects. In services
    that support it, such as Azure Blueprints, we can have versioning. For others
    that do not support this out of the box, we can still save the scripts using version
    control systems, to keep track of changes and roll back when necessary. Additionally,
    we can integrate IaC into CI/CD pipelines to automatically provision or update
    infrastructure as part of the deployment process.
  prefs: []
  type: TYPE_NORMAL
- en: Let us discover how IaC integrates with Azure Machine Learning.
  prefs: []
  type: TYPE_NORMAL
- en: Combining IaC with Azure Machine Learning
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Combining IaC with Azure Machine Learning means that we are integrating the
    automated setup, management, and provisioning of ML resources with the broader
    cloud infrastructure on which they rely. This approach ensures consistency, reproducibility,
    and efficiency in ML operations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some examples of combining IaC with Azure Machine Learning:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Infrastructure**: Everything starts with setting up the resources needed,
    including the workspace itself, compute instances such as training clusters (for
    example, **Azure Kubernetes Service** (**AKS**) or AML compute), inference clusters,
    and networking components such as VNets, subnets, and security groups.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Datastores and datasets**: Datastores in Azure Machine Learning represent
    storage backends (for example, Azure Blob Storage). After the provisioning, we
    can use the Azure Machine Learning SDK to programmatically register datastores
    and datasets once they are set up via IaC.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Model deployment**: The same principle as for the data follows the models.
    Once models are trained, they can be deployed to endpoints for real-time or batch
    inferencing. We can use IaC to provision deployment targets such as AKS or **Azure
    Container Instances** (**ACI**). Then, we can use the Azure Machine Learning SDK
    to deploy models to these targets and integrate features such as autoscaling,
    logging, and monitoring.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Automation and orchestration**: We can store all IaC scripts and ML code
    in a version control system such as Git. Then, we can use Azure DevOps, GitHub
    Actions, or other CI/CD tools to automate the deployment of infrastructure and
    execution of ML workflows. This ensures that infrastructure changes or updates
    to ML models initiate automated processes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By integrating IaC with Azure Machine Learning, teams can ensure a consistent
    environment, streamline ML workflows, and foster collaboration between data scientists,
    ML engineers, and DevOps teams. As IaC is an integral part of MLOps, this setup
    ensures that every change—whether it’s infrastructure-related or model-related
    – is versioned, reproducible, and automatically processed. This streamlined process
    minimizes manual interventions and potential errors, optimizing the ML development
    life cycle.
  prefs: []
  type: TYPE_NORMAL
- en: Another core part of MLOps is continuous integration and delivery. Let us explore
    how to use it with Azure DevOps.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing CI/CD
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: CI/CD is a software engineering practice that promotes frequent code integration
    and automated deployment. This approach is becoming increasingly popular in ML
    projects to ensure models are constantly improved, validated, and deployed in
    a streamlined manner. In Azure Machine Learning, there are multiple tools and
    services to help you implement CI/CD in your ML life cycle.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s an example of CI/CD:'
  prefs: []
  type: TYPE_NORMAL
- en: By using VS Code with Azure Machine Learning extensions for development, we
    can develop our scripts.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Those scripts can be version-controlled using Git repositories (such as GitHub
    or Azure Repos).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If we have the expertise, we can set up automated testing to validate our models.
    This might include unit tests, integration tests, and other validation or data
    checks.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We can configure Azure Pipelines to automatically trigger when changes are
    made to the repository. A CI/CD pipeline could include the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Training the model
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Logging metrics
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Retrieving the registered model
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Packaging and deploying the model
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Let us see an example of Azure DevOps and Pipelines next.
  prefs: []
  type: TYPE_NORMAL
- en: Working with Azure DevOps
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Azure DevOps is a set of development tools and services to work and collaborate
    on code development and build and deploy applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'Azure DevOps consists of a range of services, such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Azure Boards**: This provides work tracking with Kanban boards, backlogs,
    team dashboards, and custom reporting. It allows teams to plan, track, and discuss
    work across the entire development life cycle.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Azure Repos**: This is a version control system that provides Git repositories
    for source control. It supports pull requests, branching, and searching.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Azure Pipelines**: This is a CI/CD platform for deploying and testing applications
    to different platforms both for cloud and on-premises offerings.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Azure Test Plans**: This is a platform that includes multiple testing tools
    for different scenarios such as exploratory or continuous testing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Azure Artifacts**: This allows collaboration between teams to share packages
    from private or public repositories such as NuGet or Maven into their pipelines.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Signing up for Azure DevOps
  prefs: []
  type: TYPE_NORMAL
- en: 'To get started with Azure DevOps, follow this quickstart guide: [https://learn.microsoft.com/en-us/azure/devops/user-guide/sign-up-invite-teammates?view=azure-devops](https://learn.microsoft.com/en-us/azure/devops/user-guide/sign-up-invite-teammates?view=azure-devops).'
  prefs: []
  type: TYPE_NORMAL
- en: For Azure Machine Learning, we can leverage pipelines to trigger ML tasks. Let
    us see how we can connect the Azure Machine Learning workspace and run our ML
    pipelines via Azure DevOps.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a connection to the workspace
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Before we work with anything that has to do with the Azure Machine Learning
    workspace, we need to create a service connection with Azure DevOps. For this,
    we need to create a new project in Azure DevOps. Here are the steps for it:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open your Azure DevOps project and, under **Project Settings**, look for **Service
    connections**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.1 – Creating a service connection](img/B21076_08_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.1 – Creating a service connection
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on **Create service connection**, and in the form that follows, choose
    **Azure Resource Manager**, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.2 – Starting with the Azure Resource Manager option](img/B21076_08_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.2 – Starting with the Azure Resource Manager option
  prefs: []
  type: TYPE_NORMAL
- en: Click **Next** at the bottom of the page, and in the **Authentication method**
    options, the fastest option is to choose **Service principal (automatic)** because
    it requires no further configuration from the Azure portal. For better security,
    you might consider **Managed identity** if you have one created, but if you are
    not sure, you can just go ahead with the **Service principal (****automatic)**
    option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.3 – Choosing the Service principal option](img/B21076_08_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.3 – Choosing the Service principal option
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, choose the workspace resource in your **Subscription** level by filling
    in the details shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.4 – Selecting and connecting to the workspace resource](img/B21076_08_4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.4 – Selecting and connecting to the workspace resource
  prefs: []
  type: TYPE_NORMAL
- en: That is it! Now we have a connection to the workspace, and we can use it to
    run pipelines. You can still make any updates or see usage data by choosing your
    connection from the list.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.5 – Changing connection properties](img/B21076_08_5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.5 – Changing connection properties
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have our connection, we are free to run pipelines. Let us see how
    in the following section.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new pipeline
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The steps to create a new pipeline are straightforward. The challenge is to
    have the necessary preparations in place to call the Azure Machine Learning pipeline
    from Azure DevOps.
  prefs: []
  type: TYPE_NORMAL
- en: If you do not have any examples, you can use the following repository, which
    includes pipeline examples and code.
  prefs: []
  type: TYPE_NORMAL
- en: Azure Machine Learning example repository
  prefs: []
  type: TYPE_NORMAL
- en: 'If you don’t have a pipeline and would like to explore some ML examples in
    Azure, you can fork and run code from this repository: https://github.com/Azure/mlops-v2-ado-demo.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In Azure DevOps, you will need to build a YAML pipeline to run your tasks.
    Here are the steps necessary to create a new pipeline:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Start by creating a new pipeline, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.6 – New pipeline](img/B21076_08_6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.6 – New pipeline
  prefs: []
  type: TYPE_NORMAL
- en: 'You will need to provide the repository where your scripts are stored. You
    can use the repository from your project or an external one such as Bitbucket
    or GitHub:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.7 – Choosing your code repository](img/B21076_08_7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.7 – Choosing your code repository
  prefs: []
  type: TYPE_NORMAL
- en: 'I selected the one in the repository in the same project, so all I have to
    do is select the name of the repository, as shown in the next screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: f
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.8 – Selecting the repository from the list](img/B21076_08_8.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.8 – Selecting the repository from the list
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, select the **Starter pipeline** template to load a simple pipeline YAML
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.9 – Choosing the Starter pipeline template](img/B21076_08_9.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.9 – Choosing the Starter pipeline template
  prefs: []
  type: TYPE_NORMAL
- en: Now, here is the big challenge. You need to define the triggers and start up
    your Azure Machine Learning pipeline from here. An effective way to get started
    is to use the CLI to submit any ML jobs.
  prefs: []
  type: TYPE_NORMAL
- en: 'The starter pipeline does provide some sample code, as shown in the next screenshot,
    to get started and fill in the details. For several things, such as variables,
    you can also add them via an integrated designer:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.10 – Filling in the code to call your pipeline](img/B21076_08_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.10 – Filling in the code to call your pipeline
  prefs: []
  type: TYPE_NORMAL
- en: If you chose to clone the repository suggested in the previous section, you
    can find the pipeline YAML code in the `mlops/devops-pipelines` folder. Copy and
    paste the file of your choice and submit the code.
  prefs: []
  type: TYPE_NORMAL
- en: Once you submit the code, you can run your pipeline. If anything goes wrong,
    you can see what happened with the associated error messages and you can always
    go back to fix the pipeline code and resubmit the job.
  prefs: []
  type: TYPE_NORMAL
- en: YAML pipeline editor
  prefs: []
  type: TYPE_NORMAL
- en: 'For a brief introduction to the YAML editor in Azure DevOps, take a look at
    the information at this link: [https://learn.microsoft.com/en-us/azure/devops/pipelines/get-started/yaml-pipeline-editor?view=azure-devops](https://learn.microsoft.com/en-us/azure/devops/pipelines/get-started/yaml-pipeline-editor?view=azure).'
  prefs: []
  type: TYPE_NORMAL
- en: Azure DevOps provides logs and output that can help you monitor the run. Additionally,
    you can also monitor the run directly from the Azure Machine Learning workspace.
    Consider using *triggers* in Azure DevOps to automate the ML pipeline run – for
    example, every time there is a change to your training script or dataset.
  prefs: []
  type: TYPE_NORMAL
- en: GitHub Actions
  prefs: []
  type: TYPE_NORMAL
- en: 'Similar functionality can also be accomplished using GitHub Actions. For a
    quickstart guide, take a look at this tutorial: https:/learn.microsoft.com/en-us/azure/machine-learning/how-to-github-actions-machine-learning?view=azureml-api-2&tabs=userlevel.'
  prefs: []
  type: TYPE_NORMAL
- en: Remember, the specific steps and tasks you will undertake will depend on the
    complexity of your ML project and how you wish to structure your CI/CD pipelines.
    The preceding steps offer a high-level guide, but you might need to delve into
    specifics depending on your requirements.
  prefs: []
  type: TYPE_NORMAL
- en: Azure DevOps offers a comprehensive and integrated suite of tools that facilitate
    agile software development, CI/CD, testing, and collaboration among teams. However,
    it is not the only CI/CD tool that integrates with Azure Machine Learning. We
    can use GitHub Actions or create our own workflows by using other services altogether.
  prefs: []
  type: TYPE_NORMAL
- en: Let us see how we can use Azure events and logs to drive workflows in Azure
    Machine Learning.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring event-driven workflows in Azure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the context of Microsoft Azure, the term *event* can be associated with several
    services and concepts, but most commonly, it refers to a message or notification
    that indicates the occurrence of something on the platform. For example, every
    action we complete in the workspace generates events, such as when the workspace
    was created or when we changed settings. These events can be leveraged by other
    services such as Azure Event Grid to create workflows triggered by the event.
    Let us check it next.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring Event Grid
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Azure Event Grid is a fully managed event routing service. It enables you to
    easily build applications that react to changes or events happening within Azure
    services or even on-premises. Azure Event Grid is designed to connect different
    parts of a cloud-based application together through events. Applications can greatly
    benefit from Azure Event Grid in various scenarios, such as automating workflows
    in response to events (for example, creating a thumbnail when an image is uploaded
    to Azure Blob Storage) or monitoring resources in Azure (for example, getting
    notifications of virtual machine changes).
  prefs: []
  type: TYPE_NORMAL
- en: Event Grid uses a publish-subscribe model to distribute events. The **publish-subscribe**
    (often abbreviated as **pub-sub**) model is a messaging communication pattern
    used in distributed systems. It decouples the senders (publishers) from the receivers
    (subscribers), allowing them to operate independently. This decoupling means that
    the publisher and subscriber don’t need to know about each other’s existence.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s how the publish-subscribe model works. There are at least three components:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Publisher**: This is the entity or component that produces messages or events.
    It doesn’t send them directly to a specific receiver or subscriber. Instead, it
    publishes the messages to an intermediary known as a topic or channel.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Topic or channel**: A topic (sometimes called a channel) is a conduit where
    messages are published. Subscribers express interest in one or more topics and
    only receive messages that are of interest, without knowing who the publishers
    are.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Subscribers or handlers**: This is the entity or component interested in
    receiving certain messages. It subscribes to a specific topic or channel and gets
    notified when a publisher sends a message to that topic.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Publish-subscribe model
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a little more information regarding the publish-subscribe model: https://learn.microsoft.com/en-us/azure/architecture/patterns/publisher-subscriber.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Event Grid is an eventing plane that takes care of managing topics, storing
    messages, and notifying subscribers. Here are some key benefits:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Event sources**: Azure Event Grid supports various built-in event sources
    such as Azure Blob Storage, ARM, and more. It also allows the creation of custom
    topics for user-defined events.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Unified event schema**: Event Grid has a common event model, which makes
    it easier to handle events across different Azure services.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Event filtering**: It enables fine-grained control by allowing subscribers
    to filter the events they’re interested in based on event type or subject.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Reliability**: It offers an *at-least-once* delivery guarantee to ensure
    that events are always delivered to subscribers. It also provides an option called
    **dead lettering** to save events that were, for whatever reason, *dropped* to
    a storage blob for further processing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Scalability**: It is built to automatically scale based on demand, ensuring
    that your application can handle large numbers of events, as provided by most
    Azure services.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Low latency**: It provides consistent low-latency event delivery, which is
    crucial for real-time applications.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Decoupling**: By separating event producers from event consumers, Event Grid
    allows for greater flexibility and more modular application architectures.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the next section, we will see an example where the publisher is the Azure
    Machine Learning workspace, and the handler is the storage queue.
  prefs: []
  type: TYPE_NORMAL
- en: Let us see how to implement this using the Event Grid.
  prefs: []
  type: TYPE_NORMAL
- en: Working with events in Azure Machine Learning
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can start the process directly from the Azure portal. Here are the steps
    to do it:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the **Azure Machine Learning Resource** blade and find the **Events**
    section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.11 – Opening AzureML resource events](img/B21076_08_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.11 – Opening AzureML resource events
  prefs: []
  type: TYPE_NORMAL
- en: 'In the **Get started** tab, if we scroll down, we can see which event handlers
    are natively supported by Event Grid. Of course, we can always create our own:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.12 – Azure Event Grid handlers](img/B21076_08_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.12 – Azure Event Grid handlers
  prefs: []
  type: TYPE_NORMAL
- en: 'At the top of the page, we can click on **+ Event Subscription** to create
    a new event subscription. Fill in the basic fields, carefully choosing the event
    we want to monitor, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.13 – Create Event Subscription](img/B21076_08_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.13 – Create Event Subscription
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, we can choose a destination. For this example, we are going to add them
    to a storage queue for further processing, but always remember that you can trigger
    simple to complex workflows by using another service such as Azure Functions or
    Azure Logic Apps. Under **ENDPOINT DETAILS**, select the **Storage Queues** endpoint
    type and click **Select** **an endpoint**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.14 – Choosing a storage queue](img/B21076_08_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.14 – Choosing a storage queue
  prefs: []
  type: TYPE_NORMAL
- en: 'Complete the details and, when prompted, select **Create new queue** and provide
    a name for it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.15 – Creating a new queue](img/B21076_08_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.15 – Creating a new queue
  prefs: []
  type: TYPE_NORMAL
- en: 'Under **MANAGED IDENTITY FOR DELIVERY**, select **System Assigned**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.16 – Selecting a managed identity](img/B21076_08_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.16 – Selecting a managed identity
  prefs: []
  type: TYPE_NORMAL
- en: 'In the **Filters** tab, you can select your desired filters. I will skip this
    tab for now:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.17 – Selecting filters](img/B21076_08_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.17 – Selecting filters
  prefs: []
  type: TYPE_NORMAL
- en: 'In the **Additional Features** tab, it is wise to select the **Enable dead-lettering**
    option, and you can choose your desired **RETRY POLICIES** and **EVENT SUBSCRIPTION
    EXPIRATION** **TIME** values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.18 – Enabling additional features](img/B21076_08_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.18 – Enabling additional features
  prefs: []
  type: TYPE_NORMAL
- en: 'In the **Delivery Properties** tab, select an appropriate storage queue message
    **time to live** (**TTL**). The default is **7** days:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.19 – Selecting the message time to live](img/B21076_08_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.19 – Selecting the message time to live
  prefs: []
  type: TYPE_NORMAL
- en: Finally, click on **Create** and that is it. Now, every time an event is logged
    into the service, it will be saved in the storage queue.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Of course, this is not the only option we have; we can use multiple services
    as event handlers to capture events from Event Grid. Let us explore those services
    next.
  prefs: []
  type: TYPE_NORMAL
- en: Discovering event handlers in Azure
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When working with Event Grid, there are other options that integrate seamlessly.
    In **EVENT TYPES** in the previously demonstrated **Event Subscription** form,
    the following are the options we have to choose from:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.20 – Endpoint options in Azure Event Grid](img/B21076_08_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.20 – Endpoint options in Azure Event Grid
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us explore some of those services and how they work with Event Grid:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Azure Functions**: Azure Functions is a serverless compute service. It allows
    developers to run pieces of code (functions) in response to specific events without
    worrying about the infrastructure. These functions can be written in multiple
    languages, including C#, Java, JavaScript, Python, and PowerShell. Azure Functions
    integrates easily with Event Grid as it supports an Event Grid trigger. This means
    that when an event is published, the Azure Functions function will automatically
    get triggered and process the event data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Azure Logic Apps**: Azure Logic Apps is a cloud service that enables users
    to design and execute workflows that integrate different services and systems.
    These workflows can be both within Azure and outside of it, connecting cloud-based
    and on-premises systems. The primary focus of Logic Apps is integration, making
    it easy to connect disparate services, orchestrate data flows, and automate processes.
    This description is very similar to the Azure Functions service; however, Logic
    Apps requires no-code scenarios and provides a visual design experience, making
    it simple to create workflows using drag-and-drop connectors. When an event occurs
    (for example, a file is added to Azure Blob Storage), Azure Event Grid can notify
    a Logic Apps app, which, in turn, can start a predefined workflow.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`POST` requests (from the Webhook) to act upon. Webhooks are often used as
    a lightweight method to integrate different systems or services on the web. Azure
    Event Grid can use Webhooks to send event data to external systems. Essentially,
    the external system subscribes to an Event Grid topic via a Webhook, and when
    events are sent to that topic, Azure Event Grid uses the Webhook to push the event
    data to the subscriber’s endpoint.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Event Hubs**: Azure Event Hubs is a big data streaming platform and event
    ingestion service provided by Microsoft Azure. It can receive and process millions
    of events per second, making it ideal for telemetry and event stream analysis
    scenarios, such as real-time analytics, application monitoring, and IoT telemetry.
    Event Hubs essentially acts as a highly scalable “front door” for your event pipeline,
    allowing you to ingest vast amounts of event data and then process or store it
    downstream.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: While Azure Event Grid and Azure Event Hubs both deal with events, they serve
    different purposes. Event Grid is designed for event routing and event-driven
    architectures across different Azure services. Event Hubs, on the other hand,
    is designed for high-throughput, large-scale event streaming.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Azure Event Grid can be used in conjunction with Azure Event Hubs in scenarios
    where you want to respond to specific events related to Event Hubs, such as when
    a new event stream is created.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: These are some of the most common handlers for Event Grid. However, as we can
    build our own handlers using Webhooks or Azure Functions, we can integrate any
    business logic based on those events, including triggering pipeline endpoints
    in the case that we do not want to use external DevOps services such as Azure
    DevOps or GitHub. In essence, Azure Event Grid simplifies event-based application
    creation and allows for a more reactive and dynamic cloud application landscape.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we saw a brief explanation of MLOps and how valuable it is
    in ML projects. By using MLOps tools and best practices, we can streamline our
    ML tasks to facilitate efficiency and collaboration.
  prefs: []
  type: TYPE_NORMAL
- en: Although MLOps has tools and practices that range from data, models, deployments,
    and development, we focused more on how we can use IaC to handle our resources,
    and how to implement CI/CD using DevOps. Although using established code development
    tools offers the most common ways of working, when it comes to Azure, they are
    not the only ones. As Azure collects several logs and events in its services,
    we can leverage those to automate and create our own custom workflows using other
    Azure services and tools. The logs that Azure collects about its services can
    be used for more than telemetry and reporting.
  prefs: []
  type: TYPE_NORMAL
- en: Let us move on to the next chapter now, in which we will see how we can use
    the Azure Monitor service for logging, monitoring, and threat detection.
  prefs: []
  type: TYPE_NORMAL
