["```py\n    {\n        \"Version\": \"2012-10-17\",\n        \"Statement\": [\n            {\n                \"Effect\": \"Allow\",\n                \"Principal\": {\n                    \"Service\": \"redshift.amazonaws.com\"\n                },\n                \"Action\": \"sts:AssumeRole\"\n            }\n        ]\n    }\n    ```", "```py\n!pip install feast[aws]\n```", "```py\n feast init -t aws customer_segmentation\n```", "```py\nproject: customer_segmentation\n```", "```py\nregistry: data/registry.db\n```", "```py\nprovider: aws\n```", "```py\nonline_store:\n```", "```py\n  type: dynamodb\n```", "```py\n  region: us-east-1\n```", "```py\noffline_store:\n```", "```py\n  type: redshift\n```", "```py\n  cluster_id: feast-demo-mar-2022\n```", "```py\n  region: us-east-1\n```", "```py\n  database: dev\n```", "```py\n  user: awsuser\n```", "```py\n  s3_staging_location: s3://feast-demo-mar-2022/staging\n```", "```py\n  iam_role: arn:aws:iam::<account_number>:role/feast-demo-mar-2022-spectrum-role\n```", "```py\n%cd customer_segmentation\n!rm -rf driver_repo.py test.py\n```", "```py\n!feast apply\n```", "```py\n    !pip install feast[aws]\n    ```", "```py\n    !git clone <repo_url>\n    ```", "```py\n    # change directory\n    %cd customer_segmentation\n    \"\"\"import feast and load feature store object with the path to the directory which contains feature_story.yaml.\"\"\"\n    from feast import FeatureStore\n    store = FeatureStore(repo_path=\".\")\n    ```", "```py\n    #Get list of entities and feature views\n    print(f\"List of entities: {store.list_entities()}\")\n    print(f\"List of FeatureViews: {store.list_feature_views()}\")\n    ```", "```py\nList of entities: []\nList of FeatureViews: []\n```", "```py\n    %pip install feast[aws]==0.19.3 s3fs\n    import pandas as pd\n    from datetime import datetime, timedelta, date\n    from sklearn.cluster import Kmeans\n    ##Read the data and filter out data that belongs to country other than UK\n    retail_data = pd.read_csv('/content/OnlineRetail.csv', encoding= 'unicode_escape')\n    retail_data['InvoiceDate'] = pd.to_datetime(retail_data['InvoiceDate'], errors = 'coerce')\n    uk_data = retail_data.query(\"Country=='United Kingdom'\").reset_index(drop=True)\n    ```", "```py\n## Create 3months and 6 months DataFrames\nt1 = pd.Timestamp(\"2011-06-01 00:00:00.054000\")\nt2 = pd.Timestamp(\"2011-03-01 00:00:00.054000\")\nt3 = pd.Timestamp(\"2011-12-01 00:00:00.054000\")\nuk_data_3m = uk_data[(uk_data.InvoiceDate < t1) & (uk_data.InvoiceDate >= t2)].reset_index(drop=True)\nuk_data_6m = uk_data[(uk_data.InvoiceDate >= t1) & (uk_data.InvoiceDate < t3)].reset_index(drop=True)\n```", "```py\n    ## Calculate RFM values.\n    Uk_data_3m['revenue'] = uk_data_3m['UnitPrice'] * uk_data_3m['Quantity']\n    max_date = uk_data_3m['InvoiceDate'].max() + timedelta(days=1)\n    rfm_data = uk_data_3m.groupby(['CustomerID']).agg({\n      'InvoiceDate': lambda x: (max_date – x.max()).days,\n      'InvoiceNo': 'count',\n      'revenue': 'sum'})\n    rfm_data.rename(columns={'InvoiceDate': 'Recency',\n                             'InvoiceNo': 'Frequency',\n                             'revenue': 'MonetaryValue'},\n                    inplace=True)\n    ```", "```py\n    ## Calculate RFM groups of customers \n    r_grp = pd.qcut(rfm_data['Recency'],\n                    q=4, labels=range(3,-1,-1))\n    f_grp = pd.qcut(rfm_data['Frequency'],\n                    q=4, labels=range(0,4))\n    m_grp = pd.qcut(rfm_data['MonetaryValue'], \n                    q=4, labels=range(0,4))\n    rfm_data = rfm_data.assign(R=r_grp.values).assign(F=f_grp.values).assign(M=m_grp.values)\n    rfm_data['R'] = rfm_data['R'].astype(int)\n    rfm_data['F'] = rfm_data['F'].astype(int)\n    rfm_data['M'] = rfm_data['M'].astype(int)\n    rfm_data['RFMScore'] = rfm_data['R'] + rfm_data['F'] + rfm_data['M']\n    ```", "```py\n# segment customers.\nRfm_data['Segment'] = 'Low-Value'\nrfm_data.loc[rfm_data['RFMScore']>4,'Segment'] = 'Mid-Value' \nrfm_data.loc[rfm_data['RFMScore']>6,'Segment'] = 'High-Value' \nrfm_data = rfm_data.reset_index()\n```", "```py\n# Calculate revenue using the six month dataframe.\nUk_data_6m['revenue'] = uk_data_6m['UnitPrice'] * uk_data_6m['Quantity']\nrevenue_6m = uk_data_6m.groupby(['CustomerID']).agg({\n        'revenue': 'sum'})\nrevenue_6m.rename(columns={'revenue': 'Revenue_6m'}, \n                  inplace=True)\nrevenue_6m = revenue_6m.reset_index()\n```", "```py\n    # Merge the 6m revenue DataFrame with RFM data.\n    Merged_data = pd.merge(rfm_data, revenue_6m, how=\"left\")\n    merged_data.fillna(0)\n    ```", "```py\n# Create LTV cluster groups\nmerged_data = merged_data[merged_data['Revenue_6m']<merged_data['Revenue_6m'].quantile(0.99)]\nkmeans = Kmeans(n_clusters=3)\nkmeans.fit(merged_data[['Revenue_6m']])\nmerged_data['LTVCluster'] = kmeans.predict(merged_data[['Revenue_6m']])\n```", "```py\n    Feature_data = pd.get_dummies(merged_data)\n    feature_data['CustomerID'] = feature_data['CustomerID'].astype(str)\n    feature_data.columns = ['customerid', 'recency', 'frequency', 'monetaryvalue', 'r', 'f', 'm', 'rfmscore', 'revenue6m', 'ltvcluster', 'segmenthighvalue', 'segmentlowvalue', 'segmentmidvalue']\n    feature_data.head(5)\n    ```", "```py\n!pip install feast[aws]==0.19.3\n```", "```py\n!git clone <feature_repo>\n```", "```py\n    # Customer ID entity definition.\n    from feast import Entity, ValueType\n    customer = Entity(\n        name='customer',\n        value_type=ValueType.STRING,\n        join_key='customeriD',\n        description=\"Id of the customer\"\n    )\n    ```", "```py\nfrom feast import ValueType, FeatureView, Feature, RedshiftSource\nfrom datetime import timedelta \n# Redshift batch source\nrfm_features_source = RedshiftSource(\n    query=\"SELECT * FROM spectrum.customer_rfm_features\",\n    event_timestamp_column=\"event_timestamp\",\n    created_timestamp_column=\"created_timestamp\",\n)\n# FeatureView definition for RFM features.\nrfm_features_features = FeatureView(\n    name=\"customer_rfm_features\",\n    entities=[\"customer\"],\n    ttl=timedelta(days=3650),\n    features=[\n        Feature(name=\"recency\", dtype=ValueType.INT32),\n        Feature(name=\"frequency\", dtype=ValueType.INT32),\n        Feature(name=\"monetaryvalue\", \n        dtype=ValueType.DOUBLE),\n        Feature(name=\"r\", dtype=ValueType.INT32),\n        Feature(name=\"f\", dtype=ValueType.INT32),\n        Feature(name=\"m\", dtype=ValueType.INT32),\n        Feature(name=\"rfmscore\", dtype=ValueType.INT32),\n        Feature(name=\"revenue6m\", dtype=ValueType.DOUBLE),\n        Feature(name=\"ltvcluster\", dtype=ValueType.INT32),\n        Feature(name=\"segmenthighvalue\", \n        dtype=ValueType.INT32),\n        Feature(name=\"segmentlowvalue\", \n        dtype=ValueType.INT32),\n        Feature(name=\"segmentmidvalue\", \n        dtype=ValueType.INT32),\n    ],\n    batch_source=rfm_features_source,\n)\n```", "```py\n    create external schema spectrum \n    from data catalog database dev \n    iam_role '<redshift_role_arn>' \n    create external database if not exists;\n    ```", "```py\n    SELECT * from spectrum.customer_rfm_features limit 5\n    ```", "```py\nimport os\n```", "```py\nos.environ[\"AWS_ACCESS_KEY_ID\"] = \"<aws_key_id>\"\n```", "```py\nos.environ[\"AWS_SECRET_ACCESS_KEY\"] = \"<aws_secret>\"\n```", "```py\nos.environ[\"AWS_DEFAULT_REGION\"] = \"us-east-1\"\n```", "```py\n%cd customer_segmentation/\n```", "```py\n!feast apply\n```", "```py\nimport os\n```", "```py\nfrom datetime import datetime\n```", "```py\nos.environ[\"AWS_ACCESS_KEY_ID\"] = \"<aws_key_id>\"\n```", "```py\nos.environ[\"AWS_SECRET_ACCESS_KEY\"] = \"<aws_secret>\"\n```", "```py\nos.environ[\"AWS_DEFAULT_REGION\"] = \"us-east-1\"\n```", "```py\nfile_name = f\"rfm_features-{datetime.now()}.parquet\" \n```", "```py\nfeature_data[\"event_timestamp\"] = datetime.now()\n```", "```py\nfeature_data[\"created_timestamp\"] = datetime.now()\n```", "```py\ns3_url = f's3://feast-demo-mar-2022/customer-rfm-features/{file_name}'\n```", "```py\nfeature_data.to_parquet(s3_url)\n```", "```py\nSELECT * from spectrum.customer_rfm_features limit 5\n```", "```py\n\"\"\"import feast and load feature store object with the path to the directory which contains feature_story.yaml.\"\"\"\n```", "```py\nfrom feast import FeatureStore\n```", "```py\nstore = FeatureStore(repo_path=\".\")\n```", "```py\n#Get list of entities and feature views\n```", "```py\nprint(\"-----------------------Entity---------------------\")\n```", "```py\nfor entity in store.list_entities():\n```", "```py\n  print(f\"entity: {entity}\")\n```", "```py\nprint(\"--------------------Feature Views-----------------\")\n```", "```py\nfor feature_view in store.list_feature_views():\n```", "```py\n  print(f\"List of FeatureViews: {feature_view}\")\n```", "```py\nimport pandas as pd\n```", "```py\nfrom datetime import datetime, timedelta\n```", "```py\nentity_df = pd.DataFrame.from_dict(\n```", "```py\n    {\n```", "```py\n        \"customerid\": [\"12747.0\", \"12748.0\", \"12749.0\"],\n```", "```py\n        \"event_timestamp\": [datetime.now()]*3\n```", "```py\n    }\n```", "```py\n)\n```", "```py\nentity_df.head()\n```", "```py\njob = store.get_historical_features(\n```", "```py\n    entity_df=entity_df,\n```", "```py\n    features=[\n```", "```py\n              \"customer_rfm_features:recency\", \n```", "```py\n              \"customer_rfm_features:frequency\", \n```", "```py\n              \"customer_rfm_features:monetaryvalue\", \n```", "```py\n              \"customer_rfm_features:r\", \n```", "```py\n              \"customer_rfm_features:f\", \n```", "```py\n              \"customer_rfm_features:m\"]\n```", "```py\n    )\n```", "```py\ndf = job.to_df()\n```", "```py\ndf.head()\n```"]