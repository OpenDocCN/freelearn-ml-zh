- en: R Fundamentals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '"One of my most productive days was throwing away 1,000 lines of code."'
  prefs: []
  type: TYPE_NORMAL
- en: '- Ken Thompson'
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter covers the basic programming syntax functions and capabilities
    of R. Its intention is to introduce you to R and accelerate your learning. The
    objectives are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing R and RStudio
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating and exploring vectors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating data frames and matrices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring mathematical and statistical functions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building simple plots
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing `dplyr` data manipulation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing and loading packages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All of the examples in this Appendix are covered in one way or another in the
    preceding chapters. However, if you are completely new to R, this is a great starting
    point. It may accelerate your understanding of the content in the chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Getting R up-and-running
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We want to accomplish two things here: first, install the latest version of
    R and second, install RStudio, which is an **Integrated Development Environment**
    (**IDE**) for R.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start by going to R''s homepage at [https://www.r-project.org/](https://www.r-project.org/).
    This page will look similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_appx_01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can see that there is a link, download R, and in the News section the latest
    R version is 3.3.2 (Sincere Pumpkin Patch), which was released on 2016-10-31. Version
    3.3.3 is scheduled for release in March. Now, click one of the links, either CRAN
    under Download or download R under Getting Started, and you will come to the following
    screen, which has CRAN Mirrors:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_appx_02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'These are the links, by country and sorted alphabetically, that will take you
    to the download page. Being in the USA, I will scroll down and find many links
    available:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_appx_03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you find a similar link that is close to your location, click on it and
    you will see this as part of the page that will be loaded:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_appx_04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, click on your appropriate operating system:'
  prefs: []
  type: TYPE_NORMAL
- en: 'What we want now is to install base R for the first time, so click install
    R for the first time and we will come to the following page, which has the link
    to initiate the download:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_appx_05.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, you can just download and install R as any other program. After the installation,
    run R and you will see the base **Graphical User Interface** (**GUI**):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_appx_06.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This is all you need to run all of the code in this book. However, it is extremely
    helpful if you utilize R in the context of RStudio''s IDE, which is available
    for free. This link will direct you to the page where you can download the free
    version:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.rstudio.com/products/RStudio/](https://www.rstudio.com/products/RStudio/)'
  prefs: []
  type: TYPE_NORMAL
- en: 'On the page, you will find the download for the free and commercial versions.
    Needless to say, let''s stick with the free version, so download and install it.
    After this is installed and opened for the first time, you will see something
    as the following. Keep in mind that your screen will be different from what you
    see here based on the packages that I have loaded and the operating system:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_appx_07.png)'
  prefs: []
  type: TYPE_IMG
- en: Note that on the left is the same console with the command prompt that you can
    see in the preceding figure. The IDE improves the experience so that you can manage
    Environment and History (to the upper right) and Files, Plots, Packages, and Help
    (to the lower right).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s not get distracted here with a full tutorial on what RStudio can do;
    instead, we''ll focus on a couple of important items. One of the great benefits
    of R is the vast number of high-quality packages for various analyses. Let''s
    look at how the IDE ties it all together by loading a package called `abc`, which
    stands for approximate Bayesian computation. Go to the command prompt and type
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: After this runs, notice that in the lower right panel (ensure that the Packages
    tab is clicked on) that the `abc` package is now installed as well as the dependent
    `abc.data` package.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, go to the upper right and click on the History tab. You should see the
    command that you executed in order to load the package:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_appx_08.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, if you click on the To Console button, what will be placed in front of
    the command prompt. If you click To Source, a new area will open and will allow
    you to put your project script together.
  prefs: []
  type: TYPE_NORMAL
- en: The `install.packages()` command has now gone from the history to a source file.
    As you experiment with your code and get it to where it works as you want it,
    put it into a source file. You can save it, e-mail it, and so on. All the code
    for each of the chapters in this book is saved as a source file.
  prefs: []
  type: TYPE_NORMAL
- en: Using R
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With all systems ready to launch, let''s start our first commands. R will take
    both the strings in quotes or simple numbers. Here, we will put one command as
    a string and one command as a number. The output is the same as the input:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'R can also act as a calculator:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Where R starts to shine is in the creation of vectors. Here, we will put the
    first 10 numbers of the Fibonacci sequence in a vector using the `c()` function,
    which stands for combining the values to a vector or list (concatenate):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Note that in this syntax, I included a comment, `Fibonacci sequence`. In R,
    anything after the `#` key on the command line is not executed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s create an object that contains these numbers of the sequence. You
    can assign any vector or list to an object. In most R code, you will see the assign
    symbol as `<-`, which is read as gets. Here, we will create an object, `x`, of
    the Fibonacci sequence:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'To see the contents of the `x` object, just type it in the command prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'You can select subsets of a vector using brackets after an object. This will
    get you the first three observations of the sequence:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'One can use a negative sign in the bracketed numbers in order to exclude the
    observations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'To visualize this sequence, we will utilize the `plot()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the preceding command is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_appx_09.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Adding a title and axis labels to the plot is easy using `main=...`, `xlab=...`,
    and `ylab=...`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the preceding command is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_appx_10.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can transform a vector in R with a plethora of functions. Here, we will
    create a new object, `y`, that is the square root of `x`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: It is important here to point out that, if you are unsure of what syntax can
    be used in a function, then using `?` in front of it will pull up help on the
    topic. Try this!
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'This opens up help for a function. With the creation of `x` and `y`, one can
    produce a scatter plot:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the output of the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_apx_11.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s now look at creating another object that is a constant. Then, we will
    use this object as a scalar and multiply it by the `x` vector, creating a new
    vector called `x2`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'R allows you to perform logical tests. For example, let''s test whether one
    value is less than another:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'In the first instance, R returned `TRUE` and in the second, `FALSE`. If you
    wanted to find out if a value is equal to another value, then you would use two
    equal signs (a test of equality). Remember, the equal symbol assigns a value and
    does not test for equality. Here is an example where we want to see if any of
    the values in the Fibonacci sequence that we created are equal to zero:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The output provides a list and we can clearly see that the first value of the
    `x` vector is indeed zero. In short, R's relational operators, <=, <, ==, >, >=,
    and !=, stand for less than or equal, less than, equal, greater than, greater
    than or equal, and not equal respectively.
  prefs: []
  type: TYPE_NORMAL
- en: 'A couple of functions that we should address are `rep()` and `seq()`, which
    are useful in creating your own vectors. For example, `rep(5, 3)` would replicate
    the value `5` three times. It also works with strings:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'For a demonstration of `seq()`, let''s say that we want to create a sequence
    of numbers from `0` to `10`, `by = 2`. Then the code would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Data frames and matrices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will now create a data frame, which is a collection of variables (vectors).
    We will create a vector of `1`, `2`, and `3` and another vector of `1`, `1.5`,
    and `2.0`. Once this is done, the `rbind()` function will allow us to combine
    the rows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is a list of two rows with three values each. You can always determine
    the structure of your data using the `str()` function, which in this case shows
    us that we have two lists, one named `p` and the other named `q`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s put them together as columns using `cbind()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'To put this in a data frame, use the `data.frame()` function. After that, examine
    the structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'We now have a data frame, `(s)`, that has two variables of three observations
    each. We can change the names of the variables using `names()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s have a go at putting this into a matrix format with `as.matrix()`. In
    some packages, R will require the analysis to be done on a data frame, but in
    others it will require a matrix. You can switch back and forth between a data
    frame and matrix as you require:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'One of the things that you can do is check whether a specific value is in a
    matrix or data frame. For instance, we want to know the value of the first observation
    and first variable. In this case, we will need to specify the first row and the
    first column in brackets as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s assume that you want to see all the values in the second variable (column).
    Then, just leave the row blank but remember to use a comma before the column(s)
    that you want to see:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Conversely, let''s say we want to look at the first two rows only. In this
    case, just use a colon symbol:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Assume that you have a data frame or matrix with 100 observations and ten variables
    and you want to create a subset of the first `70` observations and variables `1`,
    `3`, `7`, `8`, `9`, and `10`. What would this look like?
  prefs: []
  type: TYPE_NORMAL
- en: 'Well, using the colon, comma, concatenate function, and brackets, you could
    simply do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Notice how you can easily manipulate what observations and variables you want
    to include. You can also easily exclude variables. Say that we just want to exclude
    the first variable; then you could do the following using a negative sign for
    the first variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: This syntax is very powerful in R for the fundamental manipulation of data.
    In the main chapters, we will also bring in more advanced data manipulation techniques.
  prefs: []
  type: TYPE_NORMAL
- en: Creating summary statistics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will now cover some basic measures of a central tendency, dispersion, and
    simple plots. The first question that we will address is How does R handle missing
    values in calculations? To see what happens, create a vector with a missing value
    (`NA` in the R language), then sum the values of the vector with `sum()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Unlike SAS, which would sum the non-missing values, R does not sum the non-missing
    values, but simply returns `NA`, indicating that at least one value is missing.
    Now, we could create a new vector with the missing value deleted but you can also
    include the syntax to exclude any missing values with `na.rm = TRUE`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Functions exist to identify measures of the central tendency and dispersion
    of a vector:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'A `summary()` function is available that includes the `mean`, `median`, and
    `quartile` values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'We can use plots to visualize the data. The base plot here will be `barplot`,
    then we will use `abline()` to include the `mean` and `median`. As the default
    line is solid, we will create a dotted line for `median` with `lty = 2` to distinguish
    it from `mean`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the preceding command is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_appx_12.png)'
  prefs: []
  type: TYPE_IMG
- en: 'A number of functions are available to generate different data distributions.
    Here, we can look at one such function for a normal distribution with a mean of
    zero and a standard deviation of 1, using `rnorm()` to create `100` data points.
    We will then plot the values and also plot a histogram. Additionally, to duplicate
    the results, ensure that you use the same random seed with `set.seed()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the plot of the `100` data points:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the preceding command is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_appx_13.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Finally, produce a histogram with `hist(norm)`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the output of the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_appx_14.png)'
  prefs: []
  type: TYPE_IMG
- en: Installing and loading R packages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We discussed earlier how to install an R package using the `install()` function.
    To use an installed package, you also need to load it to be able to use it. Let''s
    go through this again, first with the installation in RStudio and then loading
    the package. Look for and click the Packages tab. You should see something similar
    to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_appx_15.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, let''s install the R package, `xgboost`. Click on the Install icon and
    type the package name in the Packages section of the popup:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image_appx_16.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click the Install button. Once the package has been fully installed, the command
    prompt will return. To load the package in order to be able to use it, only the
    `library()` function is required:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: With this, you are now able to use the functions built into the package.
  prefs: []
  type: TYPE_NORMAL
- en: Data manipulation with dplyr
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Over the past couple of years I have been using `dplyr` more and more to manipulate
    and summarize data. It is faster than using the base functions, allows you to
    chain functions, and once you are familiar with it has a more user-friendly syntax.
    In my experience, just a few functions can accomplish the majority of your data
    manipulation needs. Install the package as described above, then load it into
    the R environment.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Let's explore the `iris` dataset available in base R. Two of the most useful
    functions are `summarize()` and `group_by()`. In the code that follows, we see
    how to produce a table of the mean of `Sepal.Length` grouped by the `Species`.
    The variable we put the mean in will be called `average`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'There are a number of summary functions: `n` (number), `n_distinct` (number
    of distinct), `IQR` (interquantile range), `min` (minimum), `max` (maximum), `mean`
    (mean), and `median` (median).'
  prefs: []
  type: TYPE_NORMAL
- en: Another thing that helps you and others read the code is the pipe operator `%>%`.
     With the pipe operator, you chain your functions together instead of having to
    wrap them inside each other. You start with the dataframe you want to use, then
    chain the functions together where the first function values/arguments are passed
    to the next function and so on. This is how to use the pipe operator to produce
    the results as we got before.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: The `distinct()` function allows us to see what are the unique values in a variable.
    Let's see what different values are present in `Species`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Using the `count()` function will automatically do a count for each level of
    the variable.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'What about selecting certain rows based on a matching condition? For that we
    have `filter().` Let''s select all rows where Sepal.Width is greater than 3.5
    and put them in a new dataframe:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s look at this dataframe, but first we want to arrange the values by `Petal.Length`
    in descending order:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'OK, we now want to select variables of interest. This is done with the `select()`
    function. Next, we are going to create two dataframes, one with the columns starting
    with `Sepal` and another with the `Petal` columns and the `Species` column--in
    other words, column names NOT starting with `Se`. This can be done by using those
    specific names in the function; alternatively, as follows, use the `starts_with`
    syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: OK, let's bring them back together. Remember `cbind()` earlier? With `dplyr`
    you can use the `bind_cols()` function, which will put it into a dataframe. Be
    advised that like `cbind()` it will match rows by position. If you have rownames
    or some other key, such as customer ID and so on, you can join the data using
    functions such as `left_join()` and `inner_join()`. Since our rows match, this
    command will work just fine.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: On your own, use the `head()` function to compare the first six rows of the
    `iris` and `iris` and you will see they are an exact match. If you want to concatenate
    your data like we did above with `rbind()`, the `bind_rows()` function is available.
     What if we want to see how many unique Sepal.Width measurements there are? Recall
    that there are a total of 150 observations in the data set. We've already used
    `distinct()` and `count()`. This code will give you just the number of distinct
    values, which is `23:`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'It seems in almost any large amount of data there are duplicate observations,
    or they are created with complex joins. To `dedupe` with `dplyr` is quite simple.
    For instance, let''s assume we want to create a dataframe of just the unique values
    of `Sepal.Width`, and want to keep all of the columns. This will do the trick:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: Notice that I used the pipe operator to chain `iris` to the function and within
    `distinct()` I specified `.keep_all = T` so that all columns are in the new dataframe;
    otherwise only `Sepal.Width` would have entered.
  prefs: []
  type: TYPE_NORMAL
- en: There you have it. If you want to become more efficient at data-munging in R,
    give `dplyr` a try.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The purpose of this appendix was to allow R novices to learn the basics of the
    programming language and prepare them for the code in the book. This consisted
    of learning how to install R and RStudio and creating objects, vectors, and matrices.
    Then, we explored some of the mathematical and statistical functions. We covered
    how to install and load a package in R using RStudio. Finally, we explored the
    power of `dplyr` to efficiently manipulate and summarize data. Throughout the
    appendix, the plot syntax for the base and examples are included. While this appendix
    will not make you an expert in R, it will get you up to speed to follow along
    with the examples in the book.
  prefs: []
  type: TYPE_NORMAL
