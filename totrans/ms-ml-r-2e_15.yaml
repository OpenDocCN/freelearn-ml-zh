- en: R Fundamentals
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: R基础知识
- en: '"One of my most productive days was throwing away 1,000 lines of code."'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: “我最有生产力的一天就是扔掉了1,000行代码。”
- en: '- Ken Thompson'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '- Ken Thompson'
- en: 'This chapter covers the basic programming syntax functions and capabilities
    of R. Its intention is to introduce you to R and accelerate your learning. The
    objectives are as follows:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖了R的基本编程语法函数和功能。其目的是向您介绍R并加速您的学习。目标如下：
- en: Installing R and RStudio
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装R和RStudio
- en: Creating and exploring vectors
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建和探索向量
- en: Creating data frames and matrices
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建数据框和矩阵
- en: Exploring mathematical and statistical functions
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索数学和统计函数
- en: Building simple plots
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建简单的图表
- en: Introducing `dplyr` data manipulation
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍`dplyr`数据操作
- en: Installing and loading packages
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装和加载包
- en: All of the examples in this Appendix are covered in one way or another in the
    preceding chapters. However, if you are completely new to R, this is a great starting
    point. It may accelerate your understanding of the content in the chapters.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 附录中的所有示例都在前面的章节中以某种方式进行了覆盖。然而，如果您是R的完全新手，这是一个很好的起点。它可能会加速您对章节内容的理解。
- en: Getting R up-and-running
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 让R运行起来
- en: 'We want to accomplish two things here: first, install the latest version of
    R and second, install RStudio, which is an **Integrated Development Environment**
    (**IDE**) for R.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里想要完成两件事：首先，安装R的最新版本，其次，安装RStudio，它是R的**集成开发环境**（**IDE**）。
- en: 'Let''s start by going to R''s homepage at [https://www.r-project.org/](https://www.r-project.org/).
    This page will look similar to the following screenshot:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从访问R的主页[https://www.r-project.org/](https://www.r-project.org/)开始。这个页面看起来与以下截图相似：
- en: '![](img/image_appx_01.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_appx_01.png)'
- en: 'You can see that there is a link, download R, and in the News section the latest
    R version is 3.3.2 (Sincere Pumpkin Patch), which was released on 2016-10-31. Version
    3.3.3 is scheduled for release in March. Now, click one of the links, either CRAN
    under Download or download R under Getting Started, and you will come to the following
    screen, which has CRAN Mirrors:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到有一个链接，下载R，在新闻部分，最新的R版本是3.3.2（真诚的南瓜地），发布于2016-10-31。版本3.3.3计划于3月发布。现在，点击其中一个链接，无论是下载部分下的CRAN还是入门部分下的下载R，您将来到以下屏幕，其中包含CRAN镜像：
- en: '![](img/image_appx_02.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_appx_02.png)'
- en: 'These are the links, by country and sorted alphabetically, that will take you
    to the download page. Being in the USA, I will scroll down and find many links
    available:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是根据国家和字母顺序排序的链接，它们将带您到下载页面。作为美国人，我会向下滚动并找到许多可用的链接：
- en: '![](img/image_appx_03.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_appx_03.png)'
- en: 'Once you find a similar link that is close to your location, click on it and
    you will see this as part of the page that will be loaded:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您找到一个接近您位置的类似链接，点击它，您将看到以下页面的一部分，该页面将被加载：
- en: '![](img/image_appx_04.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_appx_04.png)'
- en: 'Now, click on your appropriate operating system:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，点击您适当的操作系统：
- en: 'What we want now is to install base R for the first time, so click install
    R for the first time and we will come to the following page, which has the link
    to initiate the download:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在想要安装基础R，因此点击首次安装R，我们将来到以下页面，其中包含启动下载的链接：
- en: '![](img/image_appx_05.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_appx_05.png)'
- en: 'Now, you can just download and install R as any other program. After the installation,
    run R and you will see the base **Graphical User Interface** (**GUI**):'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您只需像安装其他程序一样下载并安装R。安装完成后，运行R，您将看到基本的**图形用户界面**（**GUI**）：
- en: '![](img/image_appx_06.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_appx_06.png)'
- en: 'This is all you need to run all of the code in this book. However, it is extremely
    helpful if you utilize R in the context of RStudio''s IDE, which is available
    for free. This link will direct you to the page where you can download the free
    version:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是您运行本书中所有代码所需的所有内容。然而，如果您在RStudio的IDE环境中使用R，这将非常有帮助，RStudio是免费提供的。此链接将带您到可以下载免费版本的页面：
- en: '[https://www.rstudio.com/products/RStudio/](https://www.rstudio.com/products/RStudio/)'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.rstudio.com/products/RStudio/](https://www.rstudio.com/products/RStudio/)'
- en: 'On the page, you will find the download for the free and commercial versions.
    Needless to say, let''s stick with the free version, so download and install it.
    After this is installed and opened for the first time, you will see something
    as the following. Keep in mind that your screen will be different from what you
    see here based on the packages that I have loaded and the operating system:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在页面上，你可以找到免费和商业版本的下载。不用说，让我们坚持使用免费版本，下载并安装它。安装并首次打开后，你会看到如下内容。请注意，你的屏幕将与我这里看到的不同，这取决于我加载的包和操作系统：
- en: '![](img/image_appx_07.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_appx_07.png)'
- en: Note that on the left is the same console with the command prompt that you can
    see in the preceding figure. The IDE improves the experience so that you can manage
    Environment and History (to the upper right) and Files, Plots, Packages, and Help
    (to the lower right).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在左边是相同的控制台，你可以看到先前的图中的命令提示符。IDE改进了体验，让你可以管理环境和历史记录（右上角）以及文件、绘图、包和帮助（右下角）。
- en: 'Let''s not get distracted here with a full tutorial on what RStudio can do;
    instead, we''ll focus on a couple of important items. One of the great benefits
    of R is the vast number of high-quality packages for various analyses. Let''s
    look at how the IDE ties it all together by loading a package called `abc`, which
    stands for approximate Bayesian computation. Go to the command prompt and type
    the following:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们不要在这里被RStudio能做什么的完整教程所分散注意力；相反，我们将专注于几个重要项目。R的一个巨大好处是，它为各种分析提供了大量高质量的包。让我们看看IDE是如何通过加载一个名为`abc`的包来将这些全部联系起来的，它代表近似贝叶斯计算。转到命令提示符并输入以下内容：
- en: '[PRE0]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: After this runs, notice that in the lower right panel (ensure that the Packages
    tab is clicked on) that the `abc` package is now installed as well as the dependent
    `abc.data` package.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 运行此代码后，注意在右下角的面板（确保已点击“包”标签）中，`abc`包以及依赖的`abc.data`包现在都已安装。
- en: 'Now, go to the upper right and click on the History tab. You should see the
    command that you executed in order to load the package:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，转到右上角并点击历史记录标签。你应该能看到你执行以加载包的命令：
- en: '![](img/image_appx_08.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image_appx_08.png)'
- en: Now, if you click on the To Console button, what will be placed in front of
    the command prompt. If you click To Source, a new area will open and will allow
    you to put your project script together.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果你点击“发送到控制台”按钮，将会在命令提示符前放置什么。如果你点击“发送到源”，将打开一个新区域，允许你将你的项目脚本组合起来。
- en: The `install.packages()` command has now gone from the history to a source file.
    As you experiment with your code and get it to where it works as you want it,
    put it into a source file. You can save it, e-mail it, and so on. All the code
    for each of the chapters in this book is saved as a source file.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`install.packages()`命令现在已从历史记录转移到源文件。当你对你的代码进行实验并使其按你的意愿工作后，将其放入源文件。你可以保存它、发送电子邮件等等。本书每一章的所有代码都保存为源文件。'
- en: Using R
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用R
- en: 'With all systems ready to launch, let''s start our first commands. R will take
    both the strings in quotes or simple numbers. Here, we will put one command as
    a string and one command as a number. The output is the same as the input:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有系统都准备就绪后，让我们开始我们的第一个命令。R将接受带引号的字符串或简单的数字。这里，我们将一个命令作为字符串，一个命令作为数字。输出与输入相同：
- en: '[PRE1]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'R can also act as a calculator:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: R也可以作为计算器使用：
- en: '[PRE2]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Where R starts to shine is in the creation of vectors. Here, we will put the
    first 10 numbers of the Fibonacci sequence in a vector using the `c()` function,
    which stands for combining the values to a vector or list (concatenate):'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: R开始发光的地方是在向量的创建。这里，我们将使用`c()`函数，它代表将值组合到向量或列表（连接），将斐波那契数列的前10个数字放入一个向量中：
- en: '[PRE3]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Note that in this syntax, I included a comment, `Fibonacci sequence`. In R,
    anything after the `#` key on the command line is not executed.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在这个语法中，我包含了一个注释，“斐波那契数列”。在R中，命令行上的`#`键之后的内容不会被执行。
- en: 'Now, let''s create an object that contains these numbers of the sequence. You
    can assign any vector or list to an object. In most R code, you will see the assign
    symbol as `<-`, which is read as gets. Here, we will create an object, `x`, of
    the Fibonacci sequence:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们创建一个包含序列这些数字的对象。你可以将任何向量或列表分配给一个对象。在大多数R代码中，你会看到分配符号`<-`，它读作gets。这里，我们将创建一个名为`x`的对象，用于斐波那契数列：
- en: '[PRE4]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'To see the contents of the `x` object, just type it in the command prompt:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看`x`对象的内容，只需在命令提示符中输入即可：
- en: '[PRE5]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'You can select subsets of a vector using brackets after an object. This will
    get you the first three observations of the sequence:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用括号在对象后面选择向量的子集。这将得到序列的前三个观测值：
- en: '[PRE6]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'One can use a negative sign in the bracketed numbers in order to exclude the
    observations:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在括号中的数字前使用负号来排除观测值：
- en: '[PRE7]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'To visualize this sequence, we will utilize the `plot()` function:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 为了可视化这个序列，我们将使用 `plot()` 函数：
- en: '[PRE8]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The output of the preceding command is as follows:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 前一个命令的输出如下：
- en: '![](img/image_appx_09.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_appx_09.png)'
- en: 'Adding a title and axis labels to the plot is easy using `main=...`, `xlab=...`,
    and `ylab=...`:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `main=...`，`xlab=...` 和 `ylab=...` 添加标题和坐标轴标签很容易：
- en: '[PRE9]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The output of the preceding command is as follows:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 前一个命令的输出如下：
- en: '![](img/image_appx_10.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_appx_10.png)'
- en: 'We can transform a vector in R with a plethora of functions. Here, we will
    create a new object, `y`, that is the square root of `x`:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以用大量的函数在 R 中转换一个向量。在这里，我们将创建一个新的对象 `y`，它是 `x` 的平方根：
- en: '[PRE10]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: It is important here to point out that, if you are unsure of what syntax can
    be used in a function, then using `?` in front of it will pull up help on the
    topic. Try this!
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，重要的是要指出，如果你不确定函数中可以使用什么语法，那么在它前面使用 `?` 将会弹出该主题的帮助。试试看！
- en: '[PRE11]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This opens up help for a function. With the creation of `x` and `y`, one can
    produce a scatter plot:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这将打开函数的帮助。通过创建 `x` 和 `y`，可以生成一个散点图：
- en: '[PRE12]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The following is the output of the preceding command:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 以下为前一个命令的输出：
- en: '![](img/image_apx_11.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_apx_11.png)'
- en: 'Let''s now look at creating another object that is a constant. Then, we will
    use this object as a scalar and multiply it by the `x` vector, creating a new
    vector called `x2`:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看创建另一个常量对象。然后，我们将使用这个对象作为标量并将其乘以 `x` 向量，创建一个新的向量 `x2`：
- en: '[PRE13]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'R allows you to perform logical tests. For example, let''s test whether one
    value is less than another:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: R 允许你执行逻辑测试。例如，让我们测试一个值是否小于另一个值：
- en: '[PRE14]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'In the first instance, R returned `TRUE` and in the second, `FALSE`. If you
    wanted to find out if a value is equal to another value, then you would use two
    equal signs (a test of equality). Remember, the equal symbol assigns a value and
    does not test for equality. Here is an example where we want to see if any of
    the values in the Fibonacci sequence that we created are equal to zero:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一种情况下，R 返回 `TRUE`，在第二种情况下，`FALSE`。如果你想找出一个值是否等于另一个值，那么你会使用两个等号（一个相等测试）。记住，等号赋值而不测试相等。这里有一个例子，我们想看看我们创建的斐波那契数列中的任何值是否等于零：
- en: '[PRE15]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The output provides a list and we can clearly see that the first value of the
    `x` vector is indeed zero. In short, R's relational operators, <=, <, ==, >, >=,
    and !=, stand for less than or equal, less than, equal, greater than, greater
    than or equal, and not equal respectively.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 输出提供了一个列表，我们可以清楚地看到 `x` 向量的第一个值确实是零。简而言之，R 的关系运算符 <=, <, ==, >, >=, 和 != 分别代表小于等于，小于，等于，大于，大于等于，和不等。
- en: 'A couple of functions that we should address are `rep()` and `seq()`, which
    are useful in creating your own vectors. For example, `rep(5, 3)` would replicate
    the value `5` three times. It also works with strings:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该讨论几个函数，即 `rep()` 和 `seq()`，它们在创建自己的向量时很有用。例如，`rep(5, 3)` 会将值 `5` 复制三次。它也适用于字符串：
- en: '[PRE16]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'For a demonstration of `seq()`, let''s say that we want to create a sequence
    of numbers from `0` to `10`, `by = 2`. Then the code would be as follows:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示 `seq()`，假设我们想创建一个从 `0` 到 `10`，`by = 2` 的数字序列。那么代码如下：
- en: '[PRE17]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Data frames and matrices
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据框和矩阵
- en: 'We will now create a data frame, which is a collection of variables (vectors).
    We will create a vector of `1`, `2`, and `3` and another vector of `1`, `1.5`,
    and `2.0`. Once this is done, the `rbind()` function will allow us to combine
    the rows:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将创建一个数据框，它是一组变量（向量）。我们将创建一个包含 `1`，`2` 和 `3` 的向量，以及另一个包含 `1`，`1.5` 和 `2.0`
    的向量。一旦完成，`rbind()` 函数将允许我们合并行：
- en: '[PRE18]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The result is a list of two rows with three values each. You can always determine
    the structure of your data using the `str()` function, which in this case shows
    us that we have two lists, one named `p` and the other named `q`:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是一个包含两行，每行三个值的列表。你可以始终使用 `str()` 函数确定你的数据结构，在这个例子中，它显示我们有两个列表，一个名为 `p`，另一个名为
    `q`：
- en: '[PRE19]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Now, let''s put them together as columns using `cbind()`:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们使用 `cbind()` 将它们作为列组合起来：
- en: '[PRE20]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'To put this in a data frame, use the `data.frame()` function. After that, examine
    the structure:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 要将它们放入数据框中，请使用 `data.frame()` 函数。之后，检查结构：
- en: '[PRE21]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'We now have a data frame, `(s)`, that has two variables of three observations
    each. We can change the names of the variables using `names()`:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有一个数据框`(s)`，它有两个变量，每个变量有三个观测值。我们可以使用`names()`更改变量的名称：
- en: '[PRE22]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Let''s have a go at putting this into a matrix format with `as.matrix()`. In
    some packages, R will require the analysis to be done on a data frame, but in
    others it will require a matrix. You can switch back and forth between a data
    frame and matrix as you require:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试使用`as.matrix()`将这个内容放入矩阵格式。在某些包中，R要求在数据框上进行分析，但在其他包中则要求使用矩阵。你可以根据需要在这两者之间切换：
- en: '[PRE23]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'One of the things that you can do is check whether a specific value is in a
    matrix or data frame. For instance, we want to know the value of the first observation
    and first variable. In this case, we will need to specify the first row and the
    first column in brackets as follows:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以做的事情之一是检查一个特定值是否在矩阵或数据框中。例如，我们想知道第一个观测值和第一个变量的值。在这种情况下，我们需要在括号中指定第一行和第一列，如下所示：
- en: '[PRE24]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Let''s assume that you want to see all the values in the second variable (column).
    Then, just leave the row blank but remember to use a comma before the column(s)
    that you want to see:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你想查看第二个变量（列）中的所有值。那么，只需留空行，但记得在你想查看的列（s）之前使用逗号：
- en: '[PRE25]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Conversely, let''s say we want to look at the first two rows only. In this
    case, just use a colon symbol:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，假设我们只想查看前两行。在这种情况下，只需使用冒号符号：
- en: '[PRE26]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Assume that you have a data frame or matrix with 100 observations and ten variables
    and you want to create a subset of the first `70` observations and variables `1`,
    `3`, `7`, `8`, `9`, and `10`. What would this look like?
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你有一个包含100个观测值和10个变量的数据框或矩阵，并且你想要创建一个包含前`70`个观测值和变量`1`、`3`、`7`、`8`、`9`和`10`的子集。这会是什么样子？
- en: 'Well, using the colon, comma, concatenate function, and brackets, you could
    simply do the following:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，使用冒号、逗号、连接函数和括号，你可以简单地做以下操作：
- en: '[PRE27]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Notice how you can easily manipulate what observations and variables you want
    to include. You can also easily exclude variables. Say that we just want to exclude
    the first variable; then you could do the following using a negative sign for
    the first variable:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 注意你可以轻松地操作你想要的观测值和变量。你也可以轻松地排除变量。比如说，我们只想排除第一个变量；那么你可以使用负号对第一个变量进行以下操作：
- en: '[PRE28]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: This syntax is very powerful in R for the fundamental manipulation of data.
    In the main chapters, we will also bring in more advanced data manipulation techniques.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在R中，这种语法对于基本的数据操作非常强大。在主要章节中，我们还将介绍更多高级的数据操作技术。
- en: Creating summary statistics
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建汇总统计量
- en: 'We will now cover some basic measures of a central tendency, dispersion, and
    simple plots. The first question that we will address is How does R handle missing
    values in calculations? To see what happens, create a vector with a missing value
    (`NA` in the R language), then sum the values of the vector with `sum()`:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将介绍一些关于集中趋势、离散度和简单图表的基本度量。我们将首先解决的问题是如何处理R在计算中的缺失值？为了查看会发生什么，创建一个包含缺失值（R语言中的`NA`）的向量，然后使用`sum()`计算向量的值：
- en: '[PRE29]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Unlike SAS, which would sum the non-missing values, R does not sum the non-missing
    values, but simply returns `NA`, indicating that at least one value is missing.
    Now, we could create a new vector with the missing value deleted but you can also
    include the syntax to exclude any missing values with `na.rm = TRUE`:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 与SAS不同，SAS会求和所有非缺失值，而R不会求和所有非缺失值，而是简单地返回`NA`，表示至少有一个值是缺失的。现在，我们可以创建一个新的向量，删除缺失值，但你也可以包含用于排除任何缺失值的语法`na.rm
    = TRUE`：
- en: '[PRE30]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Functions exist to identify measures of the central tendency and dispersion
    of a vector:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 存在函数可以识别向量的集中趋势和离散度的度量：
- en: '[PRE31]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'A `summary()` function is available that includes the `mean`, `median`, and
    `quartile` values:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '`summary()`函数可用，包括`mean`、`median`和`quartile`值：'
- en: '[PRE32]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'We can use plots to visualize the data. The base plot here will be `barplot`,
    then we will use `abline()` to include the `mean` and `median`. As the default
    line is solid, we will create a dotted line for `median` with `lty = 2` to distinguish
    it from `mean`:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用图表来可视化数据。这里的基线图表将是`barplot`，然后我们将使用`abline()`来包含`mean`和`median`。由于默认线条是实线，我们将使用`lty
    = 2`创建一个虚线来区分`median`和`mean`：
- en: '[PRE33]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'The output of the preceding command is as follows:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令的输出如下：
- en: '![](img/image_appx_12.png)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_appx_12.png)'
- en: 'A number of functions are available to generate different data distributions.
    Here, we can look at one such function for a normal distribution with a mean of
    zero and a standard deviation of 1, using `rnorm()` to create `100` data points.
    We will then plot the values and also plot a histogram. Additionally, to duplicate
    the results, ensure that you use the same random seed with `set.seed()`:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多函数可用于生成不同的数据分布。在这里，我们可以查看一个用于均值为零、标准差为1的正态分布的函数，使用 `rnorm()` 创建 `100` 个数据点。然后我们将绘制这些值，并绘制直方图。此外，为了重复结果，请确保使用
    `set.seed()` 使用相同的随机种子：
- en: '[PRE34]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'This is the plot of the `100` data points:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 `100` 个数据点的分布图：
- en: '[PRE35]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'The output of the preceding command is as follows:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是指令的输出：
- en: '![](img/image_appx_13.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_appx_13.png)'
- en: 'Finally, produce a histogram with `hist(norm)`:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，使用 `hist(norm)` 生成直方图：
- en: '[PRE36]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'The following is the output of the preceding command:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是指令的输出：
- en: '![](img/image_appx_14.png)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_appx_14.png)'
- en: Installing and loading R packages
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装和加载R包
- en: 'We discussed earlier how to install an R package using the `install()` function.
    To use an installed package, you also need to load it to be able to use it. Let''s
    go through this again, first with the installation in RStudio and then loading
    the package. Look for and click the Packages tab. You should see something similar
    to this:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前讨论了如何使用 `install()` 函数安装R包。为了使用已安装的包，你还需要将其加载到R环境中才能使用。让我们再次进行操作，首先是RStudio中的安装，然后是加载包。查找并点击包标签。你应该会看到类似以下内容：
- en: '![](img/image_appx_15.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_appx_15.png)'
- en: 'Now, let''s install the R package, `xgboost`. Click on the Install icon and
    type the package name in the Packages section of the popup:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们安装R包 `xgboost`。点击安装图标，在弹出窗口的包部分输入包名：
- en: '![](img/image_appx_16.png)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image_appx_16.png)'
- en: 'Click the Install button. Once the package has been fully installed, the command
    prompt will return. To load the package in order to be able to use it, only the
    `library()` function is required:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 点击安装按钮。一旦包完全安装，命令提示符将返回。为了加载包以便使用，只需要 `library()` 函数：
- en: '[PRE37]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: With this, you are now able to use the functions built into the package.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种方式，你现在可以使用包中内置的函数了。
- en: Data manipulation with dplyr
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用dplyr进行数据操作
- en: Over the past couple of years I have been using `dplyr` more and more to manipulate
    and summarize data. It is faster than using the base functions, allows you to
    chain functions, and once you are familiar with it has a more user-friendly syntax.
    In my experience, just a few functions can accomplish the majority of your data
    manipulation needs. Install the package as described above, then load it into
    the R environment.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去几年里，我越来越多地使用 `dplyr` 来操作和总结数据。它比使用基础函数更快，允许你串联函数，并且一旦熟悉它，就有更用户友好的语法。根据我的经验，只需要几个函数就能完成大部分数据操作需求。按照上述说明安装包，然后将其加载到R环境中。
- en: '[PRE38]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Let's explore the `iris` dataset available in base R. Two of the most useful
    functions are `summarize()` and `group_by()`. In the code that follows, we see
    how to produce a table of the mean of `Sepal.Length` grouped by the `Species`.
    The variable we put the mean in will be called `average`.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们探索R基础包中可用的 `iris` 数据集。其中两个最有用的函数是 `summarize()` 和 `group_by()`。在下面的代码中，我们看到如何生成按
    `Species` 分组的 `Sepal.Length` 均值的表格。我们将均值放入的变量将被命名为 `average`。
- en: '[PRE39]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'There are a number of summary functions: `n` (number), `n_distinct` (number
    of distinct), `IQR` (interquantile range), `min` (minimum), `max` (maximum), `mean`
    (mean), and `median` (median).'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多汇总函数：`n`（数量）、`n_distinct`（唯一数量）、`IQR`（分位数范围）、`min`（最小值）、`max`（最大值）、`mean`（均值）和`median`（中位数）。
- en: Another thing that helps you and others read the code is the pipe operator `%>%`.
     With the pipe operator, you chain your functions together instead of having to
    wrap them inside each other. You start with the dataframe you want to use, then
    chain the functions together where the first function values/arguments are passed
    to the next function and so on. This is how to use the pipe operator to produce
    the results as we got before.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个帮助你和其他人阅读代码的工具是管道操作符 `%>%`。使用管道操作符，你可以将函数串联起来，而不是将它们包裹在彼此内部。你从想要使用的dataframe开始，然后将函数串联起来，第一个函数的值/参数传递给下一个函数，依此类推。这就是我们之前如何使用管道操作符来产生相同结果的方法。
- en: '[PRE40]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: The `distinct()` function allows us to see what are the unique values in a variable.
    Let's see what different values are present in `Species`.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '`distinct()` 函数允许我们查看变量中的唯一值。让我们看看在 `Species` 中存在哪些不同的值。'
- en: '[PRE41]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Using the `count()` function will automatically do a count for each level of
    the variable.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `count()` 函数将自动对变量的每个级别进行计数。
- en: '[PRE42]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'What about selecting certain rows based on a matching condition? For that we
    have `filter().` Let''s select all rows where Sepal.Width is greater than 3.5
    and put them in a new dataframe:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 基于匹配条件选择特定行怎么办？为此我们有 `filter().` 让我们选择所有 Sepal.Width 大于 3.5 的行并将它们放入一个新的数据框中：
- en: '[PRE43]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Let''s look at this dataframe, but first we want to arrange the values by `Petal.Length`
    in descending order:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这个数据框，但首先我们想要按 `Petal.Length` 的降序排列值：
- en: '[PRE44]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'OK, we now want to select variables of interest. This is done with the `select()`
    function. Next, we are going to create two dataframes, one with the columns starting
    with `Sepal` and another with the `Petal` columns and the `Species` column--in
    other words, column names NOT starting with `Se`. This can be done by using those
    specific names in the function; alternatively, as follows, use the `starts_with`
    syntax:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，我们现在想要选择感兴趣的变量。这是通过 `select()` 函数完成的。接下来，我们将创建两个数据框，一个包含以 `Sepal` 开头的列，另一个包含
    `Petal` 列和 `Species` 列--换句话说，列名不是以 `Se` 开头的。这可以通过在函数中使用这些特定名称来完成；或者，如下所示，使用 `starts_with`
    语法：
- en: '[PRE45]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: OK, let's bring them back together. Remember `cbind()` earlier? With `dplyr`
    you can use the `bind_cols()` function, which will put it into a dataframe. Be
    advised that like `cbind()` it will match rows by position. If you have rownames
    or some other key, such as customer ID and so on, you can join the data using
    functions such as `left_join()` and `inner_join()`. Since our rows match, this
    command will work just fine.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，让我们把它们放在一起。还记得之前的 `cbind()` 吗？使用 `dplyr` 你可以使用 `bind_cols()` 函数，它将它们放入一个数据框中。请注意，就像
    `cbind()` 一样，它将通过位置匹配行。如果你有行名或某些其他键，例如客户 ID 等，你可以使用 `left_join()` 和 `inner_join()`
    等函数来合并数据。由于我们的行匹配，这个命令将正常工作。
- en: '[PRE46]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: On your own, use the `head()` function to compare the first six rows of the
    `iris` and `iris` and you will see they are an exact match. If you want to concatenate
    your data like we did above with `rbind()`, the `bind_rows()` function is available.
     What if we want to see how many unique Sepal.Width measurements there are? Recall
    that there are a total of 150 observations in the data set. We've already used
    `distinct()` and `count()`. This code will give you just the number of distinct
    values, which is `23:`
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 亲自使用 `head()` 函数比较 `iris` 和 `iris` 的前六行，你会看到它们是完全匹配的。如果你想像我们上面使用 `rbind()` 那样连接数据，可以使用
    `bind_rows()` 函数。那么，如果我们想看看有多少独特的 Sepal.Width 测量值呢？回想一下，数据集中总共有 150 个观测值。我们已经使用了
    `distinct()` 和 `count()`。此代码将只给出唯一值的数量，即 `23:`
- en: '[PRE47]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'It seems in almost any large amount of data there are duplicate observations,
    or they are created with complex joins. To `dedupe` with `dplyr` is quite simple.
    For instance, let''s assume we want to create a dataframe of just the unique values
    of `Sepal.Width`, and want to keep all of the columns. This will do the trick:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在几乎任何大量数据中，都存在重复观测值，或者它们是通过复杂的连接创建的。使用 `dplyr` 的 `dedupe()` 非常简单。例如，假设我们只想创建一个包含
    `Sepal.Width` 唯一值的 `dataframe`，并希望保留所有列。这将有效：
- en: '[PRE48]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Notice that I used the pipe operator to chain `iris` to the function and within
    `distinct()` I specified `.keep_all = T` so that all columns are in the new dataframe;
    otherwise only `Sepal.Width` would have entered.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我使用了管道操作符将 `iris` 连接到函数，并在 `distinct()` 中指定 `.keep_all = T`，这样所有列都会出现在新的数据框中；否则只有
    `Sepal.Width` 会进入。
- en: There you have it. If you want to become more efficient at data-munging in R,
    give `dplyr` a try.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是了。如果你想提高在 R 中数据整理的效率，不妨试试 `dplyr`。
- en: Summary
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: The purpose of this appendix was to allow R novices to learn the basics of the
    programming language and prepare them for the code in the book. This consisted
    of learning how to install R and RStudio and creating objects, vectors, and matrices.
    Then, we explored some of the mathematical and statistical functions. We covered
    how to install and load a package in R using RStudio. Finally, we explored the
    power of `dplyr` to efficiently manipulate and summarize data. Throughout the
    appendix, the plot syntax for the base and examples are included. While this appendix
    will not make you an expert in R, it will get you up to speed to follow along
    with the examples in the book.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 本附录的目的是让R语言的新手学习编程语言的基础知识，并为书中代码的编写做好准备。这包括学习如何安装R和RStudio以及创建对象、向量和矩阵。然后，我们探讨了数学和统计函数的一些应用。我们介绍了如何在RStudio中使用R安装和加载包。最后，我们探讨了`dplyr`在高效操作和总结数据方面的强大功能。在整个附录中，包括了基础和示例的绘图语法。虽然这个附录不会让你成为R语言的专家，但它会帮助你跟上书中的示例。
