- en: Fritz
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We have gone through mobile machine learning SDKs offered by Google—TensorFlow
    for mobile—and Apple—Core ML—in the previous chapters and got a good understanding
    of them. We looked at the basic architecture of those products, the key features
    they offer, and also tried a few tasks/programs using those SDKs. Based on what
    we have explored on the mobile machine learning frameworks and tools so far, we
    will be able to identify a few gaps that make it difficult to carry out mobile
    machine learning deployments and subsequent maintenance and support of those deployments. Let
    me list a few for you:'
  prefs: []
  type: TYPE_NORMAL
- en: Once we create the machine learning model and import it into the Android or
    iOS application, if there is any change that needs to be done to the model that
    was imported into the mobile application, how do you think this change will be
    implemented and upgraded to the application that is deployed and being used in
    the field? How is it possible to update/upgrade the model without redeploying
    the application in mobile application stores—the App Store or Play Store?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once the machine learning model is in the field and is being used by users in
    the field, how do we monitor the performance and usage of the model in real-time
    user scenarios?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Also, you might have experienced that the process and mechanism to use the machine
    learning models in iOS and Android is not the same. Also, the mechanism to make
    the machine learning models created using a variety of machine learning frameworks,
    such as TensorFlow, and scikit-learn and, in order to make it compatible with
    TensorFlow Lite and Core ML is different. There is no common process and usage
    pattern that developers can follow to create and use these models across frameworks.
    We feel that if there was a common approach to use these machine learning models
    from different vendors using the same process and mechanism, it would be a lot
    more simple.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An attempt has been made by the Fritz platform to answer all the previously
    mentioned gaps observed in machine learning model usage and deployment. Fritz,
    as a machine learning platform, tries to provide solutions to facilitate machine
    learning model usage and deployment for mobile applications. It is a mobile machine
    learning platform with ready-to-use machine learning features, along with options
    to import and use custom ML models—TensorFlow for mobile and Core ML models.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, in this chapter, we will be going through the following in detail:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the Fritz mobile machine learning platform, its features, and
    its advantages.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring Fritz and implementing an iOS mobile application by using the regression
    model we already created using Core ML.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring Fritz and implementing an Android mobile application by using the
    sample Android model we created in [Chapter 3](10656284-f170-420b-a35c-e11cf1f3d988.xhtml), *Random
    Forest on iOS*, using TensorFlow for mobile.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction to Fritz
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Fritz is a free end-to-end platform that enables us to create machine learning-powered
    mobile applications easily. It is a platform that enables on-device machine learning,
    that is, it helps to create mobile machine learning applications that can completely
    work on mobile devices. It supports both iOS and Android platforms.
  prefs: []
  type: TYPE_NORMAL
- en: Prebuilt ML models
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Fritz provides built-in ML models that can be directly used in mobile applications.
    Here are the two important models that Fritz supports:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Object detection**: You can identify objects of interest in an image or each
    frame of a live video. This helps you to know what objects are in an image, and
    where they are within the image. The object-detection feature makes predictions *completely
    on-device* andrequires no internet connection*.*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Image labeling**: You can identify the contents of an image or each frame
    of live video. This also works completely offline and requires no internet connection.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ability to use custom models
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Fritz provides us with the ability to import models built for Core ML, TensorFlow
    for mobile, and TensorFlow Lite into mobile applications and provides APIs that
    can interact with these models directly.
  prefs: []
  type: TYPE_NORMAL
- en: Model management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The main advantage of Fritz is that it enables in ML model management and upgrades
    in real time:'
  prefs: []
  type: TYPE_NORMAL
- en: It provides us with the ability to upgrade the deployed machine learning models
    in the field, that is, it allows developers to upgrade or change the ML model
    without doing an application upgrade and redeploying in mobile application stores.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It provides us with the facilities to monitor the performance of the machine
    learning models deployed into the field.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It helps with deployment, analytics, and machine learning model management.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hand-on samples using Fritz
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will try using Fritz and the models that we've already created
    for iOS and Android using Core ML and TensorFlow for mobile and build iOS and
    Android mobile applications using Fritz. Along with this, we will see how to use
    the Fritz built-in models, such as object detection and image labeling.
  prefs: []
  type: TYPE_NORMAL
- en: Using the existing TensorFlow for mobile model in an Android application using
    Fritz
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we are going to see how to use a TensorFlow for mobile model
    that we already have created in an Android mobile application using the Fritz
    toolkit. We are going to take the sample model that we created using TensorFlow
    for mobile to do the summation *(a+b)*. We will go through the detailed steps
    required to achieve this objective.
  prefs: []
  type: TYPE_NORMAL
- en: Registering with Fritz
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to use Fritz, you must sign up for an account at the Fritz web portal:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to [https://fritz.ai/](https://fritz.ai/)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Login on the top menu
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Create an account
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter your details and submit
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new project in Fritz
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once you have an account, log in using your credentials, and then perform the
    following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the ADD A NEW PROJECT button
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the project name and organization
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Submit
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Uploading the model file (.pb or .tflite)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Click on Custom Models in the left-hand menu
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Give the model name and a description
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Upload the model file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Create model file button
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once it gets uploaded, the model page will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2203fa09-f4ff-4a7e-bcd0-41a9b5f909a7.png)'
  prefs: []
  type: TYPE_IMG
- en: Here, we are using the same model that was created in [Chapter 3](10656284-f170-420b-a35c-e11cf1f3d988.xhtml),
    *Random Forest on iOS*: TensorFlow for Android. The GitHub URL is [https://github.com/PacktPublishing/Machine-Learning-for-Mobile/blob/master/tensorflow%20simple/tensor/frozen_tfdroid.pb](https://github.com/PacktPublishing/Machine-Learning-for-Mobile/blob/master/tensorflow%20simple/tensor/frozen_tfdroid.pb).
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Android and registering the app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have created a project and added a model to it. Let's see how to use this
    model in the Android project. Now, I am going to show you how to convert the TensorFlow
    simple example that we saw in [Chapter 3](10656284-f170-420b-a35c-e11cf1f3d988.xhtml), *Random
    Forest on iOS*, to the fritz format. To proceed, open that example in Android
    studio.
  prefs: []
  type: TYPE_NORMAL
- en: If you don't have it, you can download it from [https://github.com/PacktPublishing/Machine-Learning-for-Mobile/tree/master/tensorflow%20simple](https://github.com/PacktPublishing/Machine-Learning-for-Mobile/tree/master/tensorflow%20simple). In
    the given path there TensorFlow sample is the Android project open it in the Android
    studio.
  prefs: []
  type: TYPE_NORMAL
- en: Adding Fritz's TFMobile library
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will convert this project into a Fritz-managed project.
    In the model page, click on the SDK INSTRUCTIONS button. It will open a dialog
    showing the integration information, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2bd78edd-34d0-44f9-994e-18659b6d168c.png)'
  prefs: []
  type: TYPE_IMG
- en: In this, you will find the API Key, which is unique for the project, the Model
    Id, which changes for every model that you have uploaded, and the code to create
    an interpreter.
  prefs: []
  type: TYPE_NORMAL
- en: Adding dependencies to the project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to access the Fritz interpreter, you need to add dependencies to your
    project. To do this, open the `build.gradle` file of your module app. You need
    to add a repository entry pointing to the Fritz Maven repository. To do this,
    add the following lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Now add the Fritz dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: With the preceding code, we have added the Fritz core libraries and the `tfmobile`
    library. The Fritz core libraries are required to communicate with the fritz cloud
    server to download the model files for version management. The `tfmobile` libraries
    are required as we are using the TensorFlow mobile model and we need the TensorFlow
    libraries for the inference.
  prefs: []
  type: TYPE_NORMAL
- en: Registering the FritzJob service in your Android Manifest
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I already mentioned that your app will download the model files when deployed
    in the fritz cloud server. To do that, Fritz has implemented a service, named
    `FritzJob` service, which will be running in the background. When it finds a new
    model deployed in your web console, it will try to download it when the device
    is connected to the Wi-Fi.
  prefs: []
  type: TYPE_NORMAL
- en: 'To log into your cloud account, your app requires some credentials. For that,
    fritz supplies an API key. To enable this, we need to add a meta entry in your
    Android manifest XML file, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The value of the fritz API key you need to replace with yours that you got from
    the previous dialog in the browser when you clicked SDK INSTRUCTIONS.
  prefs: []
  type: TYPE_NORMAL
- en: 'And we need to declare the Fritz job, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'As our app needs to connect to a cloud server through Wi-Fi, we need to mention
    the internet access permission for that:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, my whole manifest file will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Replacing the TensorFlowInferenceInterface class with Fritz Interpreter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Open the main activity of your app and make the following changes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding `import` statements, we have added imports for the Fritz core
    library and Fritz custom model library, and we are also using the Google `TensorflowInfereceInterface`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding lines, we have declared the TensorFlow inference interface
    and loaded the `tensorflow_inference` library, which is optional. This can be
    implicitly done by Fritz itself:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding lines, we have configured the fritz service and linked it with
    the app. Here, it will verify whether the app package name is added to your Fritz
    console.
  prefs: []
  type: TYPE_NORMAL
- en: To do so, you need to click Project Settings in the left-hand menu of your project
    in the Fritz web console.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, click on Add android app to your project and it will open a dialog, as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/18a86293-cbf8-4227-84f3-e8a3d5b44beb.png)'
  prefs: []
  type: TYPE_IMG
- en: In this, you need to give a name to your app, for identification purposes. And
    then you need to get the package name from your Android manifest file and enter it
    in the Package ID text field.
  prefs: []
  type: TYPE_NORMAL
- en: 'This particular one you can get from the manifest tag of your manifest file,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you register that, come back to our code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Here, we are creating an object for our Fritz model. The first argument is the
    application context object, and the second argument is the model information object.
  prefs: []
  type: TYPE_NORMAL
- en: In the model settings, we will provide the model ID, This can be obtained from
    the dialog shown when you click the SDK instructions in your model page of the
    Fritz web console.
  prefs: []
  type: TYPE_NORMAL
- en: 'The other important thing is the model path. This is your model file name,
    which you placed in the `assets` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding line, we are getting the TensorFlow inference interface object
    and assigning it to the globally declared variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding block, we have registered an event listener, which will perform
    the inference whenever a user clicks the Run button.
  prefs: []
  type: TYPE_NORMAL
- en: Building and running the application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To view the result, connect a device and run the project. It will show the
    result, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f857b572-f948-4a07-8668-75b940557d64.png)'
  prefs: []
  type: TYPE_IMG
- en: Deploying a new version of your model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The real power of Fritz exists in the automatic download of revised model files.
    Here, we will demonstrate this.
  prefs: []
  type: TYPE_NORMAL
- en: So far, we have uploaded our old *(a+b)*^(*2* )model and performed the inference.
    Now, we will update it to *(a+b)*^(*3* )and check whether our app automatically
    downloads the revised model.
  prefs: []
  type: TYPE_NORMAL
- en: 'For that, we need to create the *(a+b)*³ model. First, we need to recall our *Creating
    and saving model* section under [Chapter 4](cb30489a-0fda-4d76-bf46-985510e6e7e7.xhtml), *TensorFlow
    Mobile in Android*, where we created the *(a+b)²* model. We are going to make
    a small change that will convert this model:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding program, the only change we have made is to the value of the `times`
    variable, which is now `3`. This will result in multiplying (a+b) by three, which
    gives *(a+b)³*. Please refer to [Chapter 4](cb30489a-0fda-4d76-bf46-985510e6e7e7.xhtml), *TensorFlow
    Mobile in Android*, for instructions on how to run and generate the `.pb` extension
    model file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you get the `frozen_tfdroid.pb` file, you can upload this from the Fritz
    web console of your model page, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/57b49ebc-400c-44b1-984e-f6a5caaea24b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Expand the Add Updated Model pane and upload the generated model. It will add
    as version 2 in the right-hand side table:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0a05636b-2b11-4778-a16d-eea07381a81d.png)'
  prefs: []
  type: TYPE_IMG
- en: Now you have uploaded a revision of the model, but you haven't published it
    yet. To do so, you need to expand the Release New Version pane and release the
    version you need.
  prefs: []
  type: TYPE_NORMAL
- en: Once you do that, all the mobile devices that installed your app will download
    the released model when they get an internet connection through a WiFi network.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the result I got when I connected to my WiFi router and restarted the
    app:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/65d6ae9a-3c1b-4fcc-ae7e-9a3bfad4a1e2.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating an android application using fritz pre-built models
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Fritz offers two pre-built models for both iOS and Android:'
  prefs: []
  type: TYPE_NORMAL
- en: Image labeling
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Object detection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this section, we are going to see how to use the image-labeling model in
    your Android app.
  prefs: []
  type: TYPE_NORMAL
- en: To do this, you need to create a project in Fritz; please refer to the steps
    given in the *Using existing TensorFlow for mobile model in Android application
    using Fritz *section.
  prefs: []
  type: TYPE_NORMAL
- en: Now, open Android studio and create an empty project with empty activity and
    layout files.
  prefs: []
  type: TYPE_NORMAL
- en: Adding dependencies to the project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to access the fritz interpreter shown in the preceding dialog, you
    need to add dependencies to your project. To do this, open the `build.gradle` file
    of your module app.
  prefs: []
  type: TYPE_NORMAL
- en: 'You need to add a repository entry pointing to the fritz maven repository.
    To do that, add the following lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, add the fritz dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: With the preceding lines, we have added the fritz core libraries and fritz vision
    library for labeling. Fritz core libraries are required to communicate with the
    fritz cloud server in order to download the model files for version management.
  prefs: []
  type: TYPE_NORMAL
- en: The Fritz vision library for labeling will download the required libraries,
    such as TensorFlow mobile and vision dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: Registering the Fritz JobService in your Android Manifest
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I already mentioned that your app will download the model files when deployed
    in the fritz cloud server. To do that, Fritz has implemented a service named `FritzJob`.
    This service will be running in the background and when it finds a new model deployed
    in your web console, it will try to download it when the device is connected through
    the WiFi network.
  prefs: []
  type: TYPE_NORMAL
- en: 'To log into your cloud account, your app requires some credentials. For that,
    fritz is supplying an API key. To enable this, we need to add a meta-entry to
    your Android manifest XML file, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: The value of the Fritz API key you need to replace with yours that you got from
    the previous dialog in the browser when you clicked `SDK INSTRUCTIONS`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to declare the Fritz job, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'As our app needs to connect to a cloud server through WiFi, we need to mention
    the internet access permission for that:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'And we need to add the following lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: In Android, the camera handling mechanism has been changed to the `camera2`
    package, and the preceding line specifies which `camera2` feature to use. To learn
    more about this, check out [https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL](https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL).
    So, to access the camera, we are adding camera permission also.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, my whole manifest file will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Creating the app layout and components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In your `activity_main.xml` file, which resides in your `assets/layouts` folder,
    you need to input the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding XML tools, the context value needs to change with your main
    activity.
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding XML, we have added a button to receive events, and a texture
    view, which serves as a placeholder for the camera stream.
  prefs: []
  type: TYPE_NORMAL
- en: 'The design view of the preceding layout will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a9e46b74-7a2c-4cb9-9cb0-cf93281afb92.png)'
  prefs: []
  type: TYPE_IMG
- en: Coding the application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The code for this application can be found in your GitHub repository at [https://github.com/PacktPublishing/Machine-Learning-for-Mobile/tree/master/Fritz/imagelabelling/imagelabelling](https://github.com/PacktPublishing/Machine-Learning-for-Mobile/tree/master/Fritz/imagelabelling/imagelabelling).
  prefs: []
  type: TYPE_NORMAL
- en: Once you have downloaded the code open it in Android studio here you can find
    the code in the `MainActivity.java`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To explain the whole code, it may deal more with android code. Here, you can
    find the explanation of the important code blocks:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding line in the `oncreate` life cycle method will initialize the
    Fritz framework:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding line will create the configuration options for the label predictor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Creating the instance of the predictor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Getting the image saved to the file and converting this as a bitmap:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Converting the bitmap image to fritz vision image and supplying that image
    object to the predictor''s `predit` method, which, in turn, returns the predicted
    labels as the list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: As the predictor returned a list of `Fritzvisionlabel` objects, we need to decode
    that and show it to the user. The preceding code shows the content and the confidence
    percentage to the user in a Toast message.
  prefs: []
  type: TYPE_NORMAL
- en: Once you run the app, the image frames captured from the camera will be shown
    in the texture view that we have created in our layout.
  prefs: []
  type: TYPE_NORMAL
- en: Once you click the start labellingbutton, it will save the image to the disk
    and input the same image to the `Fritzvisionlabel` predictor. Once you revive
    the prediction results, you will be interpreting it and showing it to the user
    in the form of a `Toast` message.
  prefs: []
  type: TYPE_NORMAL
- en: To make the preceding app work, we need to add this app to your Fritz project.
  prefs: []
  type: TYPE_NORMAL
- en: To do so, click Project Settings in the left-hand menu of your project in the
    Fritz web console.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, click on Add android app to your project and it will open a dialog, as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0b0e95bb-682e-4063-aa3e-c519b9d2fdb7.png)'
  prefs: []
  type: TYPE_IMG
- en: In this, you need to give a name to your app, for identification purposes. Then
    you need to get the package name from your android manifest file and enter it
    in the `Package ID` text field.
  prefs: []
  type: TYPE_NORMAL
- en: 'This can be obtained from the manifest tag of your manifest file as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Once you register the app, you can run and see the result by connecting an Android
    device to your PC with the USB-debugging option enabled.
  prefs: []
  type: TYPE_NORMAL
- en: Make sure you disable the Instant run option in your android studio. This can
    be done from the settings option in the file menu.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you successfully run the app, the results will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ad0939bc-9640-4c81-8070-f7a8d81cec0a.png)'
  prefs: []
  type: TYPE_IMG
- en: Using the existing Core ML model in an iOS application using Fritz
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we are going to see how to use a Core ML model that we already
    have created in an iOS mobile application using the Fritz toolkit. We are going
    to take the `HousePricer.mlmodel` that we created using Core ML using the `Boston`
    dataset and perform house price prediction using a linear regression algorithm.
    We will detail the steps required to achieve this objective.
  prefs: []
  type: TYPE_NORMAL
- en: For this, please download the source code of the linear regression example in
    pack GitHub for house price prediction at [https://github.com/PacktPublishing/Machine-Learning-for-Mobile/tree/master/housing%20price%20prediction/sample](https://github.com/PacktPublishing/Machine-Learning-for-Mobile/tree/master/housing%20price%20prediction/sample).
  prefs: []
  type: TYPE_NORMAL
- en: Registering with Fritz
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to use fritz, you must sign up for an account in the fritz web portal:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to [https://fritz.ai/](https://fritz.ai/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Login on the top menu
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Create an account
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter your details and submit
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating a new project in Fritz
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once you have an account, log in using your credentials and perform the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the Add new project button
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the project name and organization
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Submit
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Uploading the model file (.pb or .tflite)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following are the steps to upload the model file:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on Custom Models in the left-hand menu
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Give the model name and a description
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Upload the model file (`HousePricer.mlmodel`) that got generated in the first
    linear regression chapter after you ran the Python program
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can find this file in the downloaded directory: [https://github.com/PacktPublishing/Machine-Learning-for-Mobile/tree/master/housing%20price%20prediction/sample/sample](https://github.com/PacktPublishing/Machine-Learning-for-Mobile/tree/master/housing%20price%20prediction/sample/sample).
  prefs: []
  type: TYPE_NORMAL
- en: Click on the Create model file button
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once it gets uploaded, the model page will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/388b2251-0915-4ced-8ee6-de47f84a637f.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating an Xcode project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, open the project that you have downloaded in Xcode. The project will look
    like this.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/647952b8-e3c8-4bc7-9095-af0dd11e5392.png)'
  prefs: []
  type: TYPE_IMG
- en: Installing Fritz dependencies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To install Fritz dependencies, download the pod file for your model from Fritz.
    For that, you need to add your iOS project to your fritz project. This you can
    do from the project settings page in the fritz console.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the project settings page, click on the Add an IOS project button. Then
    fill in the dialog with the app name shown in the Xcode when you open your app.
    Fill this in with the bundle ID that you can get from the build settings, as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c5bd250b-1d65-40ad-9c93-0d501444391f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You will then be allowed to download the `Fritz-info.plist` file. Add this
    file to your project folder in Xcode, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7800ef41-c27c-482b-9d2f-e97b8767b914.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After that, you need to close Xcode, navigate to your project folder from a
    terminal, and give the following commands, one by one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: This creates a `.xcworkspace` file for your app. Use this file for all future
    developments on your application.
  prefs: []
  type: TYPE_NORMAL
- en: Now close your Xcode application and re-open the project using this file.
  prefs: []
  type: TYPE_NORMAL
- en: Adding code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Open your model console in the fritz console. It will have a button - SDK Instructions
    click on this it will open a dialog as shown in the following screenshot. As shown
    in the dialog box, create a new file with the filename shown and paste/write the
    code in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5dfa23e8-7f8e-4cec-98ba-2d33f72e5034.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, once you have added this file, you need to open `AppDelegate.swift` and
    make the following modifications:'
  prefs: []
  type: TYPE_NORMAL
- en: First, add a new import as
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Import `Fritz`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now in app delegate class:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Replace the previously method definition as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Building and running the iOS mobile application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Similar to how we build the iOS mobile applications, build and run the project
    in an emulator and it will give you the following results:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e334ddc3-0a45-4f49-b728-82d802c0e191.png)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we learned about Fritz, an end-to-end platform that enables
    us to create machine learning applications. We also looked at pre-built ML models
    and how to use custom models in Fritz. Then, we explored how we can implement
    Fritz in Core ML in iOS and Android. Finally, we created two applications using
    the Fritz library: one using a pre-built fritz model, and the other using a Core
    ML model for iOS. In the next chapter, we will learn about neural networks and
    their uses for mobile applications and machine learning.'
  prefs: []
  type: TYPE_NORMAL
