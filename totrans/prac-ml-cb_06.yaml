- en: Chapter 6. Supervised Learning
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章. 监督学习
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下内容：
- en: Decision tree learning - Advance Health Directive for patients with chest pain
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 决策树学习 - 胸痛患者的健康指导
- en: Decision tree learning - income-based distribution of real estate values
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 决策树学习 - 房地产价值基于收入的分布
- en: Decision tree learning - predicting the direction of stock movement
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 决策树学习 - 预测股票运动的方向
- en: Naive Bayes - predicting the direction of stock movement
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 朴素贝叶斯 - 预测股票运动的方向
- en: Random forest - currency trading strategy
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 随机森林 - 货币交易策略
- en: Support vector machine - currency trading strategy
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持向量机 - 货币交易策略
- en: Stochastic gradient descent - adult income
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 随机梯度下降 - 成人收入
- en: Introduction
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: '**Decision tree learning**: Decision trees are very popular tools for classification
    and prediction problems. A decision tree is a classifier which recursively partitions
    the instance space or the variable set. Decision trees are represented as a tree
    structure where each node can be classified as either a leaf node or a decision
    node. A leaf node holds the value of the target attribute, while a decision node
    specifies the rule to be implemented on a single attribute-value. Each decision
    node splits the instance space into two or more sub-spaces according to a certain
    discrete function of the input attributes-values. Each test considers a single
    attribute, such that the instance space is partitioned according to the attribute''s
    value. In the case of numeric attributes, the condition refers to a range. After
    implementing the rule on the decision node, a sub-tree is an outcome. Each of
    the leaf nodes holds a probability vector indicating the probability of the target
    attribute having a certain value. Instances are classified by navigating them
    from the root of the tree down to a leaf, according to the outcome of the tests
    along the path.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**决策树学习**：决策树是分类和预测问题中非常流行的工具。决策树是一种递归地将实例空间或变量集进行划分的分类器。决策树以树结构表示，其中每个节点可以分类为叶节点或决策节点。叶节点包含目标属性的值，而决策节点指定对单个属性值要实施的规则。每个决策节点根据输入属性值的某个离散函数将实例空间划分为两个或更多子空间。每个测试考虑一个属性，因此实例空间根据属性值进行划分。在数值属性的情况下，条件指的是一个范围。在决策节点上实施规则后，子树是一个结果。每个叶节点都包含一个概率向量，表示目标属性具有某个值的概率。通过沿着路径的测试结果，从树的根节点导航到叶节点来对实例进行分类。'
- en: 'The key requirements to mine data with decision trees are as follows:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 使用决策树挖掘数据的关键要求如下：
- en: '**Attribute-value description**: The object can be expressed as a fixed set
    of properties or attributes'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**属性值描述**：对象可以用一组固定的属性或属性来表示'
- en: '**Predefined classes**: The categories to which examples are to be assigned
    must be supervised data'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**预定义类别**：要分配给示例的类别必须是监督数据'
- en: '**Sufficient data**: Use of multiple training cases'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**充足数据**：使用多个训练案例'
- en: '**Naive Bayes**:The naive Bayes is a supervised learning method. It is a linear
    classifier. It is based on the Bayes'' theorem, which states that the presence
    of a particular feature of a class is unrelated to the presence of any other feature.
    It is a robust and efficient algorithm. Bayesian classifiers can predict class
    membership probabilities such as the probability that a given tuple belongs to
    a particular class. Bayesian belief networks is joint conditional probability
    distribution. It allows class-conditional independencies to be defined between
    subsets of variables. It provides a graphical model of a causal relationship on
    which learning can be performed.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**朴素贝叶斯**：朴素贝叶斯是一种监督学习方法。它是一个线性分类器。它基于贝叶斯定理，该定理表明一个类别的特定特征的存在与任何其他特征的存在无关。它是一个健壮且高效的算法。贝叶斯分类器可以预测类成员概率，例如给定元组属于特定类的概率。贝叶斯信念网络是联合条件概率分布。它允许在变量子集之间定义类条件独立性。它提供了一个因果关系的图形模型，可以在其上进行学习。'
- en: '**Random forest**: Random forests are collections of decision trees that provide
    predictions into the structure of data. They are a tool that pulls the power of
    multiple decision trees in judicious randomization, and ensemble learning to produce
    predictive models. They provide variable rankings, missing values, segmentations,
    and reporting for each record to ensure deep data understanding. After each tree
    is built, all the data is run down the tree. For each of the pairs of cases, vicinities
    are computed. If two cases occupy the same terminal node, their vicinities are
    increased by one. At the end of the run, normalization is carried out by dividing
    by the number of trees. Proximities are used in replacing missing data, locating
    outliers, and producing to reveal low-dimensional understandings of the data.
    The training data, which is out-of-bag data, is used to estimate classification
    error and to calculate the importance of variables.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**随机森林**：随机森林是决策树的集合，提供对数据结构的预测。它们是利用多个决策树在合理随机化、集成学习中的力量来产生预测模型的一种工具。它们为每个记录提供变量排名、缺失值、分割和报告，以确保深入理解数据。在每棵树构建完成后，所有数据都会通过树。对于每一对案例，计算邻近区域。如果两个案例占据相同的终端节点，它们的邻近区域增加一。运行结束后，通过树的数量进行归一化。邻近区域用于替换缺失数据、定位异常值和揭示数据的低维理解。训练数据，即袋外数据，用于估计分类错误和计算变量的重要性。'
- en: Random forests run very efficiently on large databases, producing accurate results.
    They handle multiple variables without deletion, giving estimates of the importance
    of the variables to solve the classification problems. They generate an internal
    unbiased estimate of the generalization error as the forest building progresses.
    A random forest is an effective method for estimating missing data, and maintains
    accuracy when a large proportion of the data is missing.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 随机森林在大数据库上运行非常高效，产生准确的结果。它们处理多个变量而不删除，给出变量对解决分类问题重要性的估计。它们在森林构建过程中生成内部无偏估计的泛化误差。随机森林是估计缺失数据的有效方法，并且在大量数据缺失时保持准确性。
- en: '**Support vector machines**: Machine learning algorithms use right set of features
    to solve learning problems. SVMs make use of a (nonlinear) mapping function φ
    which transforms data in the input space to data in the feature space in such
    a way as to render a problem linearly separable. The SVM then discovers the optimal
    separating hyperplane which is then mapped back into input space via φ-1\. Among
    the possible hyperplanes, we select the one where the distance of the hyperplane
    from the closest data points (the margin) is as large as possible.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**支持向量机**：机器学习算法使用正确的特征集来解决学习问题。SVMs利用一个（非线性）映射函数φ，将输入空间中的数据转换为特征空间中的数据，以便使问题线性可分。然后SVM发现最优的分离超平面，然后通过φ-1将其映射回输入空间。在所有可能超平面中，我们选择距离最近数据点（边缘）距离尽可能大的那个超平面。'
- en: Decision tree learning - Advance Health Directive for patients with chest pain
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 决策树学习 - 胸痛患者的健康指导文件
- en: An Advance Health Directive document states the directions regarding the future
    health care for an individual on various medical conditions. It guides an individual
    to make the right decision in case of emergency or as required. The document helps
    an individual to understand the nature and consequences of their health care decisions,
    understand the nature and effect of the directive, freely and voluntarily make
    these decisions, and communicate the decisions in some way.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 健康指导文件声明了关于个人在各种医疗条件下未来医疗保健的指示。它指导个人在紧急情况下或需要时做出正确的决定。该文件帮助个人了解其医疗保健决策的性质和后果，了解指导的性质和影响，自由自愿地做出这些决定，并以某种方式传达这些决定。
- en: Getting ready
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In order to perform decision tree classification, we will be using a dataset
    collected from the heart patients dataset.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 为了执行决策树分类，我们将使用从心脏病患者数据集中收集的数据集。
- en: Step 1 - collecting and describing the data
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第1步 - 收集和描述数据
- en: 'The dataset titled `Heart.csv` which is available in CSV format, will be used. The
    dataset is in standard format. There are 303 rows of data. There are 15 variables.
    The numeric variables are as follows:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 将使用标题为`Heart.csv`的数据集，该数据集以CSV格式提供。数据集是标准格式。有303行数据。有15个变量。数值变量如下：
- en: '`Age`'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Age`'
- en: '`Sex`'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Sex`'
- en: '`RestBP`'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RestBP`'
- en: '`Chol`'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Chol`'
- en: '`Fbs`'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Fbs`'
- en: '`RestECG`'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RestECG`'
- en: '`MaxHR`'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MaxHR`'
- en: '`ExAng`'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ExAng`'
- en: '`Oldpeak`'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Oldpeak`'
- en: '`Slope`'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Slope`'
- en: '`Ca`'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Ca`'
- en: 'The non-numeric variables are as follows:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 非数值变量如下：
- en: '`ChestPain`'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ChestPain`'
- en: '`Thal`'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Thal`'
- en: '`AHD`'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AHD`'
- en: How to do it...
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: Let's get into the details.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入了解。
- en: Step 2 - exploring the data
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第 2 步 - 探索数据
- en: 'The following packages need to be loaded as the first step to be carried out:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 以下包需要在第一步执行时加载：
- en: '[PRE0]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Version info: Code for this page was tested in R version 3.3.0 (2016-05-03).'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 版本信息：本页面的代码在 R 版本 3.3.0（2016-05-03）上进行了测试。
- en: 'Let''s explore the data and understand the relationships between the variables.
    We''ll begin by importing the CSV data file named `Heart.csv`. We will be saving
    the data to the `AHD_data` data frame:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们探索数据并了解变量之间的关系。我们将首先导入名为 `Heart.csv` 的 CSV 数据文件。我们将数据保存到 `AHD_data` 数据框中：
- en: '[PRE1]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Exploring the internal structure of the `AHD_data` data frame. The `str()`
    function displays the internal structure of the data frame. The `AHD_data` is
    passed as an R object to the `str()` function:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 探索 `AHD_data` 数据框的内部结构。`str()` 函数显示数据框的内部结构。`AHD_data` 作为 R 对象传递给 `str()` 函数：
- en: '[PRE2]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The result is as follows:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 2 - exploring the data](img/image_06_001.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 2 - 探索数据](img/image_06_001.jpg)'
- en: 'Printing the `AHD_data` data frame. The `head()` function returns the first
    part of the `AHD_data` data frame. The `AHD_data` data frame is passed as an input
    parameter:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 打印 `AHD_data` 数据框。`head()` 函数返回 `AHD_data` 数据框的前部分。`AHD_data` 数据框作为输入参数传递：
- en: '[PRE3]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The result is as follows:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 2 - exploring the data](img/image_06_002.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 2 - 探索数据](img/image_06_002.jpg)'
- en: 'Exploring the dimensions of the `AHD_data` data frame. The `dim()` function
    returns the dimensions of the `AHD_data` frame. The `AHD_data` data frame is passed
    as an input parameter. The result clearly states that there are 303 rows of data
    and 15 columns:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 探索 `AHD_data` 数据框的维度。`dim()` 函数返回 `AHD_data` 数据框的维度。将 `AHD_data` 数据框作为输入参数传递。结果清楚地表明有
    303 行数据和 15 列：
- en: '[PRE4]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The result is as follows:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 2 - exploring the data](img/image_06_003.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 2 - 探索数据](img/image_06_003.jpg)'
- en: Step 3 - preparing the data
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第 3 步 - 准备数据
- en: The data needs to be prepared for carrying out the model building and testing.
    Data is split into two parts--one for building the model and the other for testing
    the model which will be prepared.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 需要准备数据以执行模型构建和测试。数据分为两部分--一部分用于构建模型，另一部分用于测试模型，这将准备。
- en: 'The `createDataPartition()` function is used for creating splits of the data.
    `AHD_data` is passed as an argument to the function. Random sampling takes place.
    The percentage of data that goes to training is denoted by `p`. Here, the value
    of `p` is `0.5`, which means that 50% of the data is used for the training. `List
    = ''FALSE''` avoids returning the data as a list. The result is then stored in
    the data frame split :'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `createDataPartition()` 函数创建数据的分割。将 `AHD_data` 作为参数传递给函数。进行随机抽样。表示用于训练的数据百分比的
    `p`。在这里，`p` 的值为 `0.5`，这意味着 50% 的数据用于训练。`List = 'FALSE'` 避免以列表的形式返回数据。结果存储在数据框
    `split` 中：
- en: '[PRE5]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The call to the data frame `split` displays training set data for training
    purposes:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 调用 `split` 数据框显示用于训练目的的训练集数据：
- en: '[PRE6]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The result is as follows:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 3 - preparing the data](img/image_06_004.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 3 - 准备数据](img/image_06_004.jpg)'
- en: 'The training data will be created. The `split` data frame is used to create
    the training data. The `train` data frame is used to store the values of the training
    data:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 将创建训练数据。使用 `split` 数据框创建训练数据。`train` 数据框用于存储训练数据的值：
- en: '[PRE7]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Printing the training data frame:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 打印训练数据框：
- en: '[PRE8]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The result is as follows:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 3 - preparing the data](img/image_06_005.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 3 - 准备数据](img/image_06_005.jpg)'
- en: 'The testing data will be created. The `split` data frame is used to create
    the testing data. The `-` sign before the `split` data frame denotes all those
    rows of data which have not been considered for training purposes. The test data
    frame is used to store the values of the testing data:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 将创建测试数据。使用 `split` 数据框创建测试数据。`split` 数据框前的 `-` 符号表示所有那些未被考虑用于训练目的的数据行。测试数据框用于存储测试数据的值：
- en: '[PRE9]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Printing the testing data frame:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 打印测试数据框：
- en: '[PRE10]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The result is as follows:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 3 - preparing the data](img/image_06_006.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 3 - 准备数据](img/image_06_006.jpg)'
- en: Step 4 - training the model
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第 4 步 - 训练模型
- en: The model will now be prepared and trained on the training dataset. Decision
    trees are used when datasets are divided into groups, as compared to investigating
    a numerical response and its relationship to a set of descriptor variables. The
    implementation of classification trees in R is carried out using the `tree()`
    function.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 模型现在将被准备并在训练数据集上训练。当数据集被分成组时使用决策树，与调查数值响应及其与一组描述符变量的关系相比。在 R 中使用 `tree()` 函数实现分类树。
- en: 'The `tree()` function is used to implement classification trees. A tree is
    grown by binary recursive partitioning. The `AHD` field on the training dataset
    is used to form classification trees. The resulting data frame is stored in the
    `trees` data frame:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `tree()` 函数实现分类树。通过二分递归分割来生长树。训练数据集上的 `AHD` 字段用于形成分类树。结果数据框存储在 `trees` 数据框中：
- en: '[PRE11]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'A graphical version of the trees data frame will be displayed. The `plot()`
    function is a generic function for the plotting of R objects. The trees data frame
    is passed as a function value:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 将显示数据框的图形版本。`plot()` 函数是 R 对象绘图的通用函数。将数据框 `trees` 作为函数值传递：
- en: '[PRE12]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The result is as follows:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 4 - training the model](img/image_06_007.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 4 - 训练模型](img/image_06_007.jpg)'
- en: 'Find the deviance or number of misclassifications by running a cross-validation
    experiment. The `cv.tree()` function will be used. The `trees` data frame object
    is passed. `FUN=prune.misclass` obtains a nested sequence of subtrees of the supplied
    data frame trees by recursively snipping off the least important splits. The result
    is stored in the `cv.trees` data frame:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 通过运行交叉验证实验来查找偏差或错误分类的数量。将使用 `cv.tree()` 函数。将 `trees` 数据框对象传递。`FUN=prune.misclass`
    通过递归剪掉最不重要的分割来获取提供的 `data frame trees` 的嵌套子树序列。结果存储在 `cv.trees` 数据框中：
- en: '[PRE13]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Printing the results of data frame `cv.trees`:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 打印数据框 `cv.trees` 的结果：
- en: '[PRE14]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The `$dev` field gives the deviance for each K.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`$dev` 字段给出了每个 K 的偏差。'
- en: 'The result is as follows:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 4 - training the model](img/image_06_008.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 4 - 训练模型](img/image_06_008.jpg)'
- en: Using the `plot()` function data frame, `cv.trees` is displayed. The `$dev`
    value is on the *y* axis (right side). The `$k` value is on the top. The `$size`
    value is on the *x* axis.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `plot()` 函数数据框，显示 `cv.trees`。`$dev` 值位于 *y* 轴（右侧）。`$k` 值位于顶部。`$size` 值位于
    *x* 轴。
- en: 'As can be clearly seen, when `$size = 1`, `$k = 30.000000`, `$dev = 1`. We
    plot the data frame using:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 如清晰可见，当 `$size = 1`，`$k = 30.000000`，`$dev = 1`。我们使用以下方式绘制数据框：
- en: '[PRE15]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The result is as follows:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 4 - training the model](img/image_06_009.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 4 - 训练模型](img/image_06_009.jpg)'
- en: Step 5- improving the model
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 步骤 5 - 改进模型
- en: 'Let us improve the model by splitting the tree with the lowest deviance. The
    `prune.misclass()` function is called to split the tree. `prune.misclass` obtains
    a nested sequence of subtrees of the supplied data frame trees by recursively
    snipping off the least important splits. The result is stored in the `prune.trees`
    data frame. `best=4` indicates the size (for example, the number of terminal nodes)
    of a specific subtree in the cost-complexity sequence that is to be returned:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过分割偏差最低的树来改进模型。调用 `prune.misclass()` 函数来分割树。`prune.misclass` 通过递归剪掉最不重要的分割来获取提供的
    `data frame trees` 的嵌套子树序列。结果存储在 `prune.trees` 数据框中。`best=4` 表示要返回的成本-复杂度序列中特定子树的大小（例如，终端节点的数量）：
- en: '[PRE16]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Using the `plot()` function data frame, `prune.trees` is displayed:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `plot()` 函数数据框，显示 `prune.trees`：
- en: '[PRE17]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The result is as follows:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 5- improving the model](img/image_06_010.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 5 - 改进模型](img/image_06_010.jpg)'
- en: 'Adding the text to the preceding pruned tree:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 向前面的修剪树添加文本：
- en: '[PRE18]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The result is as follows:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 5- improving the model](img/image_06_011.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 5 - 改进模型](img/image_06_011.jpg)'
- en: 'In order to predict the value based on a linear model object, we will use the
    `predict()` function. `prune.trees` is passed as an object. The `test` data object
    is passed as an object in which to look for variables with which to predict. The
    result will be stored in the `tree.pred` data frame:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 为了根据线性模型对象预测值，我们将使用 `predict()` 函数。将 `prune.trees` 作为对象传递。将 `test` 数据对象传递作为查找预测变量的对象。结果将存储在
    `tree.pred` 数据框中：
- en: '[PRE19]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Displaying the variable `test.pred` values:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 显示变量 `test.pred` 的值：
- en: '[PRE20]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The result is as follows:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 5- improving the model](img/image_06_012.jpg)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 5 - 改进模型](img/image_06_012.jpg)'
- en: 'Summarizing the results of the model. The `confusionMatrix()` calculates the
    cross-tabulation of the observed and predicted classes. `tree.pred` is passed
    as a factor of predicted classes:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 总结模型的成果。`confusionMatrix()` 计算观察到的和预测的类别的交叉表。`tree.pred` 作为预测类别的因子传递：
- en: '[PRE21]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The result is as follows:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 5- improving the model](img/image_06_013.jpg)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 5- 改进模型](img/image_06_013.jpg)'
- en: Decision tree learning - income-based distribution of real estate values
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 决策树学习 - 基于收入的房地产价值分布
- en: Income has been an essential component of the attractive long-term total returns
    provided by real estate as an asset class. The annual income returns generated
    from investing in real estate have been more than 2.5 times higher than stocks
    and lagged bonds by only 50 basis points. Real estate often provides a steady
    source of income based on the rent paid by tenants.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 收入一直是房地产作为一种资产类别提供的具有吸引力的长期总回报的一个基本组成部分。投资房地产产生的年度收入回报比股票高出2.5倍以上，仅落后于债券50个基点。房地产通常为租户支付的租金提供稳定的收入来源。
- en: Getting ready
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In order to perform decision tree classification, we will be using a dataset
    collected from the real estate dataset.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 为了执行决策树分类，我们将使用从房地产数据集中收集的数据集。
- en: Step 1 - collecting and describing the data
  id: totrans-126
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 步骤 1 - 收集和描述数据
- en: 'The dataset titled `RealEstate.txt` will be used. This dataset is available
    in TXT format, titled `RealEstate.txt`. The dataset is in standard format. There
    are 20,640 rows of data. The 9 numerical variables are as follows:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 将使用标题为 `RealEstate.txt` 的数据集。此数据集以 TXT 格式提供，标题为 `RealEstate.txt`。数据集是标准格式。有
    20,640 行数据。9 个数值变量如下：
- en: '`MedianHouseValue`'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MedianHouseValue`'
- en: '`MedianIncome`'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MedianIncome`'
- en: '`MedianHouseAge`'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MedianHouseAge`'
- en: '`TotalRooms`'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TotalRooms`'
- en: '`TotalBedrooms`'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TotalBedrooms`'
- en: '`Population`'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Population`'
- en: '`Households`'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Households`'
- en: '`Latitude`'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Latitude`'
- en: '`Longitude`'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Longitude`'
- en: How to do it...
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: Let's get into the details.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入了解细节。
- en: Step 2 - exploring the data
  id: totrans-139
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 步骤 2 - 探索数据
- en: 'The following package needs to be loaded as the first step to be carried out:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 需要在第一步中加载以下包：
- en: '[PRE22]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Note
  id: totrans-142
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Version info: Code for this page was tested in R version 3.3.0 (2016-05-03).'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 版本信息：本页面的代码在 R 版本 3.3.0（2016-05-03）中进行了测试。
- en: 'Let''s explore the data and understand the relationships between the variables.
    We''ll begin by importing the TXT data file named `RealEstate.txt`. We will be
    saving the data to the `realEstate` data frame:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们探索数据并了解变量之间的关系。我们将从导入名为 `RealEstate.txt` 的 TXT 数据文件开始。我们将数据保存到 `realEstate`
    数据框中：
- en: '[PRE23]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Exploring the dimensions of the `realEstate` data frame. The `dim()` function
    returns the dimensions of the `realEstate` frame. The `realEstate` data frame
    is passed as an input parameter. The result clearly states that there are 20,640
    rows of data and 9 columns:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 探索 `realEstate` 数据框的维度。`dim()` 函数返回 `realEstate` 框的维度。`realEstate` 数据框作为输入参数传递。结果清楚地表明有
    20,640 行数据和 9 列：
- en: '[PRE24]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The result is as follows:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 2 - exploring the data](img/image_06_014.jpg)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 2 - 探索数据](img/image_06_014.jpg)'
- en: 'Exploring the internal structure of the `realEstate` data frame. The `str()`
    function displays the internal structure of the data frame. The `realEstate` is
    passed as an R object to the `str()` function:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 探索 `realEstate` 数据框的内部结构。`str()` 函数显示数据框的内部结构。`realEstate` 作为 R 对象传递给 `str()`
    函数：
- en: '[PRE25]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The result is as follows:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 2 - exploring the data](img/image_06_015.jpg)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 2 - 探索数据](img/image_06_015.jpg)'
- en: 'Printing the `realEstate` data frame. The `head()` function returns the first
    part of the `realEstate` data frame. The `realEstate` data frame is passed as
    an input parameter:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 打印 `realEstate` 数据框。`head()` 函数返回 `realEstate` 数据框的前部分。`realEstate` 数据框作为输入参数传递：
- en: '[PRE26]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The result is as follows:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 2 - exploring the data](img/image_06_016.jpg)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 2 - 探索数据](img/image_06_016.jpg)'
- en: 'Printing the summary of the `realEstate` data frame. The `summary()` function
    is a multipurpose function. `summary()` is a generic function that provides a
    summary of the data related to the individual object or data frame. The `realEstate`
    data frame is passed as an R object to the `summary()` function:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 打印 `realEstate` 数据框的摘要。`summary()` 函数是一个多功能函数。`summary()` 是一个通用函数，它提供与单个对象或数据框相关的数据摘要。`realEstate`
    数据框作为 R 对象传递给 `summary()` 函数：
- en: '[PRE27]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The result is as follows:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 2 - exploring the data](img/image_06_017.jpg)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 2 - 探索数据](img/image_06_017.jpg)'
- en: Step 3 - training the model
  id: totrans-162
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 步骤 3 - 训练模型
- en: The model will now be prepared on the dataset. Decision trees are a tool for
    classification and prediction. They represent rules which can be understood by
    humans and used in knowledge systems such as a database. They classify instances
    by starting at the root of the tree and moving through it until they reach a leaf
    node. The node specifies a test on a single attribute, the leaf indicates the
    value of the target attribute, and the edge splits off one attribute.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 模型现在将在数据集上准备。决策树是分类和预测的工具。它们代表人类可以理解并用于如数据库等知识系统的规则。它们通过从树的根开始并移动到叶节点来对实例进行分类。节点指定对单个属性的测试，叶节点指示目标属性的值，边分割出一个属性。
- en: The `tree()` function is used to implement classification trees. A tree is grown
    by binary recursive partitioning. These models are computationally intensive techniques,
    since they recursively partition response variables into subsets based on their
    relationship to one or more predictor variables.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`tree()`函数实现分类树。通过二元递归分区来生长树。这些模型是计算密集型技术，因为它们根据响应变量与一个或多个预测变量的关系递归地将响应变量分割成子集。
- en: The formula expression is based on the sum of the variables `Latitude` and `Longitude`.
    The result of the sum is stored in the log value of `MedianHouseValue`. `data=realEstate`
    represents the data frame in which to preferentially interpret formula, weights,
    and subset.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 公式表达式基于变量`纬度`和`经度`的总和。总和的结果存储在`MedianHouseValue`的对数值中。`data=realEstate`表示优先解释公式、权重和子集的数据框。
- en: 'The resulting data frame is stored in data frame `treeModel`:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 结果数据框存储在数据框`treeModel`中：
- en: '[PRE28]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: A summary of the `treeModel` will be displayed. The summary displays the formula
    used, along with the number of terminal nodes or leaves in the trees. The statistical
    distribution of the residuals is also displayed.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 将显示`treeModel`的摘要。摘要显示了所使用的公式，以及树中的终端节点或叶子的数量。还显示了残差的统计分布。
- en: The `summary()` function is used to display the statistical summary of `treeModel`.
    It is a generic that is used to produce the summaries of the results for various
    fitting functions. The data frame on which the summary is desired is `treeModel`,
    which is passed as an input parameter.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`summary()`函数显示`treeModel`的统计摘要。它是一个泛型，用于生成各种拟合函数的结果摘要。希望进行摘要的数据框是`treeModel`，它作为输入参数传递。
- en: 'Deviance here means the mean squared error:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，偏差表示均方误差：
- en: '[PRE29]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The result is as follows:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 3 - training the model](img/image_06_018.jpg)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 3 - 训练模型](img/image_06_018.jpg)'
- en: 'A graphical version of the `treeModel` data frame will be displayed. The `plot()`
    function is a generic function for plotting R objects. The `treeModel` data frame
    is passed as a function value:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 将显示`treeModel`数据框的图形版本。`plot()`函数是用于绘制 R 对象的泛型函数。`treeModel`数据框作为函数值传递：
- en: '[PRE30]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The result is as follows:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 3 - training the model](img/image_06_019.jpg)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 3 - 训练模型](img/image_06_019.jpg)'
- en: 'After the graphical version of the `treeModel` data frame is displayed, text
    needs to be inserted to display the value at each node and the leaves. The `text()`
    function is used to insert strings given in the labels vector at the given coordinates:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在显示`treeModel`数据框的图形版本后，需要插入文本以显示每个节点和叶子的值。使用`text()`函数在给定的坐标处插入标签向量中给出的字符串：
- en: '[PRE31]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The result is as follows:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 3 - training the model](img/image_06_020.jpg)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 3 - 训练模型](img/image_06_020.jpg)'
- en: Step 4 - comparing the predictions
  id: totrans-182
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第 4 步 - 比较预测
- en: Comparing the predictions with the dataset which reflect the global price trend.
    We wish to summarize the frequency distribution of `MedianHouseValue` for ease
    of reporting or comparison. The most direct method is to use quantiles. Quantiles
    are points in a distribution that relate to the rank order of values in that distribution.
    The quantiles will divide the `MedianHouseValue` distribution such that there
    is a given proportion of an observation below the quantile.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 将预测与反映全球价格趋势的数据集进行比较。我们希望总结`MedianHouseValue`的频率分布，以便于报告或比较。最直接的方法是使用分位数。分位数是分布中的点，与该分布中值的排名顺序相关。分位数将分割`MedianHouseValue`分布，使得观测值在分位数下方的比例是给定的。
- en: 'The `quantile()` function produces sample quantiles corresponding to the given
    probabilities. `realEstate$MedianHouseValue` is the numeric vector whose sample
    quantiles are wanted. The `quantile()` function returns `priceDecilesas` a vector
    of length:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '`quantile()` 函数产生与给定概率相对应的样本分位数。`realEstate$MedianHouseValue` 是想要样本分位数的数值向量。`quantile()`
    函数返回长度为的 `priceDeciles` 向量：'
- en: '[PRE32]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Displaying the value of the `priceDeciles` data frame:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 显示 `priceDeciles` 数据框的值：
- en: '[PRE33]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'The result is as follows:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 4 - comparing the predictions](img/image_06_021.jpg)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 4 - 比较预测结果](img/image_06_021.jpg)'
- en: 'Next, a summary of the `priceDeciles` will be displayed. The `summary()` function
    is used to display the statistical summary of the `priceDeciles`. The data frame
    for which the summary is desired is `priceDeciles`, which is passed as an input
    parameter:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，将显示 `priceDeciles` 的摘要。使用 `summary()` 函数显示 `priceDeciles` 的统计摘要。希望摘要的数据框是
    `priceDeciles`，它作为输入参数传递：
- en: '[PRE34]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'The result is as follows:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 4 - comparing the predictions](img/image_06_022.jpg)'
  id: totrans-193
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 4 - 比较预测结果](img/image_06_022.jpg)'
- en: 'Dividing the `priceDeciles` vector into different ranges. The `cut()` function
    divides the range of intervals according to which interval they fall into. The
    numeric vector `MedianHouseValue` of the `realEstate` data frame is to be converted
    to a factor by cutting:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 将 `priceDeciles` 向量划分为不同的范围。`cut()` 函数根据它们所属的区间来划分区间范围。`realEstate` 数据框中的数值向量
    `MedianHouseValue` 需要通过切割转换为因子：
- en: '[PRE35]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Printing the `cutPrices` data frame. The `head()` function returns the first
    part of the `cutPrices` data frame. The `cutPrices` data frame is passed as an
    input parameter:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 打印 `cutPrices` 数据框。`head()` 函数返回 `cutPrices` 数据框的前部分。`cutPrices` 数据框作为输入参数传递：
- en: '[PRE36]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'The result is as follows:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 4 - comparing the predictions](img/image_06_023.jpg)'
  id: totrans-199
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 4 - 比较预测结果](img/image_06_023.jpg)'
- en: 'A summary of `cutPrices` will be displayed. The `summary()` function is used
    to display the statistical summary of the `treeModel`. The data frame on which
    the summary is desired is `cutPrices`, which is passed as an input parameter:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 将显示 `cutPrices` 的摘要。使用 `summary()` 函数显示 `treeModel` 的统计摘要。希望摘要的数据框是 `cutPrices`，它作为输入参数传递：
- en: '[PRE37]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'The result is as follows:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 4 - comparing the predictions](img/image_06_024.jpg)'
  id: totrans-203
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 4 - 比较预测结果](img/image_06_024.jpg)'
- en: 'Plotting the value of the `cutPrices`. The `plot()` function is a generic function
    for the plotting of R objects. The `cutPrices` data frame is passed as a function
    value. The longitude variable of the `realEstate` dataset represents the *x* coordinates
    of points in the plot. The latitude variable of the `realEstate` dataset represents
    the *y* coordinates of points in the plot. `col=grey(10:2/11)` represents the
    plot color. `pch=20` represents the size of the symbol to be used as the default
    in plotting points. `xlab="Longitude"` represents the title for the x axis, while
    `ylab="Latitude"` represents the title for the *y* axis:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 绘制 `cutPrices` 的值。`plot()` 函数是 R 对象绘图的通用函数。`realEstate` 数据集中的经度变量代表图中点的 *x*
    坐标。`realEstate` 数据集中的纬度变量代表图中点的 *y* 坐标。`col=grey(10:2/11)` 代表绘图颜色。`pch=20` 代表在绘图点时使用的符号大小。`xlab="Longitude"`
    代表 x 轴的标题，而 `ylab="Latitude"` 代表 *y* 轴的标题：
- en: '[PRE38]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'The result is as follows:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 4 - comparing the predictions](img/image_06_025.jpg)'
  id: totrans-207
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 4 - 比较预测结果](img/image_06_025.jpg)'
- en: 'A summary of `Longitude` will be displayed. The `summary()` function is used
    to display the statistical summary:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 将显示 `Longitude` 的摘要。使用 `summary()` 函数显示统计摘要：
- en: '[PRE39]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'The result is as follows:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 4 - comparing the predictions](img/image_06_026.jpg)'
  id: totrans-211
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 4 - 比较预测结果](img/image_06_026.jpg)'
- en: 'Printing the `Longitude` data frame. The `head()` function returns the first
    part of the `Longitude` data frame:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 打印 `Longitude` 数据框。`head()` 函数返回 `Longitude` 数据框的前部分：
- en: '[PRE40]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'The result is as follows:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 4 - comparing the predictions](img/image_06_027.jpg)'
  id: totrans-215
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 4 - 比较预测结果](img/image_06_027.jpg)'
- en: 'A summary of `Latitude` will be displayed. The `summary()` function is used
    to display the statistical summary:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 将显示 `Latitude` 的摘要。使用 `summary()` 函数显示统计摘要：
- en: '[PRE41]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'The result is as follows:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 4 - comparing the predictions](img/image_06_028.jpg)'
  id: totrans-219
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 4 - 比较预测结果](img/image_06_028.jpg)'
- en: 'Printing the `Latitude` data frame. The `head()` function returns the first
    part of the `Latitude` data frame:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 打印 `纬度` 数据框。`head()` 函数返回 `纬度` 数据框的前部分：
- en: '[PRE42]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'The result is as follows:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 4 - comparing the predictions](img/image_06_029.jpg)'
  id: totrans-223
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 4 - 比较预测结果](img/image_06_029.jpg)'
- en: 'The `partition.tree()` function is used to partition a tree where two or more
    variables are involved. `treeModel` is passed as a tree object. `ordvars=c("Longitude","Latitude")`
    indicates the ordering in which the variables are to be used to plot. Longitude
    represents the *x* axis, while `Latitude` represents the y axis. `add=TRUE` means
    adding to the existing plot:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `partition.tree()` 函数对涉及两个或更多变量的树进行分区。`treeModel` 作为树对象传递。`ordvars=c("经度","纬度")`
    表示用于绘图的变量顺序。经度代表 *x* 轴，而 `纬度` 代表 y 轴。`add=TRUE` 表示添加到现有图形：
- en: '[PRE43]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'The result is as follows:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 4 - comparing the predictions](img/image_06_030.jpg)'
  id: totrans-227
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 4 - 比较预测结果](img/image_06_030.jpg)'
- en: Step 5 - improving the model
  id: totrans-228
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 步骤 5 - 改进模型
- en: The number of leaves in a tree controls the flexibility of the tree. The number
    of leaves indicates how many cells they partition the tree into. Each node has
    to contain a certain number of points, and adding a node has to reduce the error
    by at least a certain amount. The default value for `min.dev` is 0.01.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 树中的叶子节点数量控制着树的灵活性。叶子节点的数量表示它们将树分割成多少个单元格。每个节点必须包含一定数量的点，并且添加节点必须至少减少一定的错误。`min.dev`
    的默认值是 0.01。
- en: Next, we will reduce the value of `min.dev` to 0.001.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将 `min.dev` 的值降低到 0.001。
- en: The `tree()` function is used to implement classification trees. The formula
    expression is based on the sum of the variables `Latitude` and `Longitude`. The
    result of the sum is stored in the log value of `MedianHouseValue`. `data=realEstate`
    represents the data frame in which to preferentially interpret formula, weights,
    and subset. The value for `min.dev` denotes the deviance that must be at least
    0.001 times of the root node for the node to be split.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `tree()` 函数实现分类树。公式表达式基于变量 `纬度` 和 `经度` 的总和。总和的结果存储在 `MedianHouseValue` 的对数值中。`data=realEstate`
    表示在其中的数据框中优先解释公式、权重和子集。`min.dev` 的值表示必须至少是根节点偏差的 0.001 倍才能进行节点分割。
- en: 'The resulting data frame is stored in the `treeModel2` data frame:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 结果数据框存储在 `treeModel2` 数据框中：
- en: '[PRE44]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: A summary of the `treeModel2` will be displayed. The summary displays the formula
    used, along with the number of terminal nodes or the leaves in the trees. The
    statistical distribution of the residuals is also displayed.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 将显示 `treeModel2` 的摘要。摘要显示使用的公式，以及树中的终端节点或叶子节点的数量。还显示了残差的统计分布。
- en: The `summary()` function is used to display the statistical summary of the `treeModel2`.
    The data frame on which the summary is desired is `treeModel2`, which is passed
    as an input parameter.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `summary()` 函数显示 `treeModel2` 的统计摘要。希望进行摘要的数据框是 `treeModel2`，它作为输入参数传递。
- en: 'Deviance here means the mean squared error:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 偏差在这里意味着均方误差：
- en: '[PRE45]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'The result is as follows:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 5 - improving the model](img/image_06_031.jpg)'
  id: totrans-239
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 5 - 改进模型](img/image_06_031.jpg)'
- en: When compared with the summary of `treeModel`, the value of leaves in `treeModel2`
    increases from 12 to 68\. The value of deviance changes from 0.1666 to 0.1052
    for `treeModel` and `treeModel2`, respectively.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 与 `treeModel` 的摘要相比，`treeModel2` 中的叶子节点值从 12 增加到 68。对于 `treeModel` 和 `treeModel2`，偏差值分别从
    0.1666 变为 0.1052。
- en: 'A graphical version of the `treeModel2` data frame will be displayed. The `plot()`
    function is a generic function for plotting R objects. The `treeModel2` data frame
    is passed as a function value:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 将显示 `treeModel2` 数据框的图形版本。`plot()` 函数是用于绘图 R 对象的通用函数。将 `treeModel2` 数据框作为函数值传递：
- en: '[PRE46]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'The result is as follows:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 5 - improving the model](img/image_06_032.jpg)'
  id: totrans-244
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 5 - 改进模型](img/image_06_032.jpg)'
- en: 'After the graphical version of the `treeModel2` data frame is displayed, text
    needs to be inserted to display the value at each node and the leaves. The `text()`
    function is used to insert strings given in the vector labels at the given coordinates:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 在显示 `treeModel2` 数据框的图形版本后，需要插入文本以显示每个节点和叶子节点的值。使用 `text()` 函数在给定的坐标处插入向量标签中给出的字符串：
- en: '[PRE47]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'The result is as follows:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 5 - improving the model](img/image_06_033.jpg)'
  id: totrans-248
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 5 - 改进模型](img/image_06_033.jpg)'
- en: Including all the variables in the formula extension.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 在公式扩展中包含所有变量。
- en: The `tree()` function is used to implement classification trees. The formula
    expression is based on all the variables.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`tree()`函数实现分类树。公式表达式基于所有变量。
- en: 'The resulting data frame is stored in the `treeModel3` data frame:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 结果数据框存储在`treeModel3`数据框中：
- en: '[PRE48]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: A summary of `treeModel3` will be displayed. The summary displays the formula
    used along with the number of terminal nodes or the leaves in the trees. The statistical
    distribution of the residuals is also displayed.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 将显示`treeModel3`的摘要。摘要显示了使用的公式以及树中的终端节点或叶子节点的数量。还显示了残差的统计分布。
- en: The `summary()` function is used to display the statistical summary of `treeModel3`.
    The data frame on which the summary is desired is `treeModel3`, which is passed
    as an input parameter.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`summary()`函数显示`treeModel3`的统计摘要。希望进行摘要的数据框是`treeModel3`，它作为输入参数传递。
- en: 'Deviance here means the mean squared error:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 偏差在这里表示均方误差：
- en: '[PRE49]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'The result is as follows:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 5 - improving the model](img/image_06_034.jpg)'
  id: totrans-258
  prefs: []
  type: TYPE_IMG
  zh: '![步骤5 - 改进模型](img/image_06_034.jpg)'
- en: The formula clearly states that all the variables of the `realEstate` dataset.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 公式明确指出`realEstate`数据集中的所有变量。
- en: 'A graphical version of `treeModel3` data frame will be displayed. The `plot()`
    function is a generic function for plotting R objects. The `treeModel3` data frame
    is passed as a function value:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 将显示`treeModel3`数据框的图形版本。`plot()`函数是用于绘制R对象的通用函数。`treeModel3`数据框作为函数值传递：
- en: '[PRE50]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'The result is as follows:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 5 - improving the model](img/image_06_035.jpg)'
  id: totrans-263
  prefs: []
  type: TYPE_IMG
  zh: '![步骤5 - 改进模型](img/image_06_035.jpg)'
- en: 'After a graphical version of the `treeModel3` data frame is displayed, text
    needs to be inserted to display the value at each node and the leaves. The `text()`
    function is used to insert strings given in the vector labels at the given coordinates:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 在显示`treeModel3`数据框的图形版本后，需要插入文本以显示每个节点和叶子节点的值。使用`text()`函数在给定的坐标处插入向量标签中的字符串：
- en: '[PRE51]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'The result is as follows:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 5 - improving the model](img/image_06_036.jpg)'
  id: totrans-267
  prefs: []
  type: TYPE_IMG
  zh: '![步骤5 - 改进模型](img/image_06_036.jpg)'
- en: Decision tree learning - predicting the direction of stock movement
  id: totrans-268
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 决策树学习 - 预测股票运动方向
- en: Stock trading is one of the most challenging problems statisticians are trying
    to solve. There are multiple technical indicators, such as trend direction, momentum
    or lack of momentum in the market, volatility for profit potential, and volume
    measures to monitor the popularity in the market, to name a few. These indicators
    can be used to create strategy to high-probability trading opportunities. Days/weeks/months
    can be spent discovering the relationships between technical indicators. An efficient
    and less time-consuming tool, such as a decision tree, can be used. The main advantage
    of a decision tree is that it is a powerful and easily interpretable algorithm,
    which gives a good head start.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 股票交易是统计学家试图解决的最具挑战性的问题之一。有多个技术指标，例如趋势方向、动量或市场中的动量不足、盈利潜力的波动性和用于监测市场流行度的成交量等。这些指标可以用来创建策略以创造高概率的交易机会。可以花费数天/周/月来发现技术指标之间的关系。可以使用像决策树这样的高效且节省时间的工具。决策树的主要优势是它是一个强大且易于解释的算法，为良好的起点提供了帮助。
- en: Getting ready
  id: totrans-270
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In order to perform decision tree classification, we will be using a dataset
    collected from the stock markets dataset.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 为了执行决策树分类，我们将使用从股票市场数据集中收集的数据集。
- en: Step 1 - collecting and describing the data
  id: totrans-272
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第1步 - 收集和描述数据
- en: The dataset to be used is the Bank of America's daily closing stock value between
    1^(st) January, 2012 and 1^(st) January, 2014\. This dataset is freely available
    on [https://yahoo.com/](https://yahoo.com/), from where we will be downloading
    the data.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用的数据集是美国银行2012年1月1日至2014年1月1日的每日收盘价。此数据集在[https://yahoo.com/](https://yahoo.com/)上免费提供，我们将从那里下载数据。
- en: How to do it...
  id: totrans-274
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: Let's get into the details.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入了解。
- en: Step 2 - exploring the data
  id: totrans-276
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第2步 - 探索数据
- en: 'The following package needs to be loaded as the first step to be carried out:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 需要在第一步加载以下包：
- en: '[PRE52]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Note
  id: totrans-279
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Version info: Code for this page was tested in R version 3.3.0 (2016-05-03).'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 版本信息：本页面的代码在R版本3.3.0（2016-05-03）上进行了测试。
- en: 'Each of the preceding libraries needs to be installed:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 上述每个库都需要安装：
- en: '[PRE53]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Let's download the data. We will begin by marking the start and end date for
    the time period in which the data is desired.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们下载数据。我们将首先标记所需数据的时间段的开始和结束日期。
- en: The `as.Date()` function is used to convert the character representation and
    objects of the `Date` class, which represents the calendar dates.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`as.Date()`函数将字符表示和`Date`类的对象转换为日历日期。
- en: 'The start date for the dataset is stored in `startDate`, which represents the
    character vector representation of the calendar date. The format for representation
    is *YYYY-MM-DD*:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 数据集的起始日期存储在`startDate`中，它代表日历日期的字符向量表示。表示的格式为*YYYY-MM-DD*：
- en: '[PRE54]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'The end date for the dataset is stored in `endDate`, which represents the character
    vector representation of the calendar date. The format for representation is *YYYY-MM-DD*:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 数据集的结束日期存储在`endDate`中，它代表日历日期的字符向量表示。表示的格式为*YYYY-MM-DD*：
- en: '[PRE55]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Load the data using the `getSymbols()` function. The function loads data from
    multiple sources, either local or remote. Data is fetched and saved in the `env`
    specified. The default value is `.GlobalEnv` for `env`. `BAC` is the character
    vector that specifies the name of the symbol to be loaded. `src = yahoo` specifies
    the sourcing method:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`getSymbols()`函数加载数据。该函数从多个来源加载数据，无论是本地还是远程。数据被检索并存储在指定的`env`中。`env`的默认值是`.GlobalEnv`。`BAC`是字符向量，指定要加载的符号名称。`src
    = yahoo`指定数据来源方法：
- en: '[PRE56]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Step 3 - calculating the indicators
  id: totrans-291
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 步骤 3 - 计算指标
- en: 'Relative Strength Index is calculated. It is a ratio of recent upward price
    movements to the absolute price movement. The `RSI()` function is used to calculate
    the Relative Strength Index. The `BAC` symbol is used as a price series. `n =
    3` represents the number of periods for moving averages. The result is then stored
    in the `relativeStrengthIndex3` data frame:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 相对强弱指数（Relative Strength Index）已计算。它是最近上升价格变动与绝对价格变动的比率。使用`RSI()`函数来计算相对强弱指数。`BAC`符号用作价格序列。`n
    = 3`代表移动平均的周期数。结果存储在`relativeStrengthIndex3`数据框中：
- en: '[PRE57]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Displaying the `relativeStrengthIndex3` value:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 显示`relativeStrengthIndex3`的值：
- en: '[PRE58]'
  id: totrans-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'The result is as follows:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 3 - calculating the indicators](img/image_06_037.jpg)'
  id: totrans-297
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 3 - 计算指标](img/image_06_037.jpg)'
- en: Calculating the moving averages. The **exponential moving average** is used
    for technical analysis and as a technical indicator. In a **simple moving average**,
    each value in the series carries equal weight. The values outside of the time
    series are not included in the average. However, the exponential moving average
    is a cumulative calculation, including all data. There is a diminishing value
    of the past data, while the more recent data values have greater contribution.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 计算移动平均。**指数移动平均**用于技术分析和作为技术指标。在**简单移动平均**中，序列中的每个值具有相等的权重。时间序列之外的价值不包括在平均中。然而，指数移动平均是一个累积计算，包括所有数据。过去的数据具有递减的价值，而最近的数据值具有更大的贡献。
- en: '`EMA()` uses the `BAC` symbol and is used as a price series. `n = 5` represents
    the time period to average over. The result is then stored in the `exponentialMovingAverage5`
    data frame:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: '`EMA()`使用`BAC`符号，并用作价格序列。`n = 5`代表平均的时间周期。结果存储在`exponentialMovingAverage5`数据框中：'
- en: '[PRE59]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Displaying the `exponentialMovingAverage5` value:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 显示`exponentialMovingAverage5`的值：
- en: '[PRE60]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'The result is as follows:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 3 - calculating the indicators](img/image_06_038.jpg)'
  id: totrans-304
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 3 - 计算指标](img/image_06_038.jpg)'
- en: 'Exploring the dimensions of the `exponentialMovingAverage5` data frame. The
    `dim()` function returns the dimensions of the `exponentialMovingAverage5` frame.
    The `exponentialMovingAverage5` data frame is passed as an input parameter. The
    result clearly states that there are 502 rows of data and 1 column:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 探索`exponentialMovingAverage5`数据框的维度。`dim()`函数返回`exponentialMovingAverage5`框架的维度。将`exponentialMovingAverage5`数据框作为输入参数传递。结果清楚地表明有502行数据和1列：
- en: '[PRE61]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'The result is as follows:'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 3 - calculating the indicators](img/image_06_039.jpg)'
  id: totrans-308
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 3 - 计算指标](img/image_06_039.jpg)'
- en: 'Exploring the internal structure of the `exponentialMovingAverage5` data frame.
    The `str()` function displays the internal structure of the data frame. The `exponentialMovingAverage5`
    is passed as an R object to the `str()` function:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 探索`exponentialMovingAverage5`数据框的内部结构。`str()`函数显示数据框的内部结构。将`exponentialMovingAverage5`作为R对象传递给`str()`函数：
- en: '[PRE62]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'The result is as follows:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 3 - calculating the indicators](img/image_06_040.jpg)'
  id: totrans-312
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 3 - 计算指标](img/image_06_040.jpg)'
- en: 'Calculating the difference between the price and our calculated `exponentialMovingAverage5`,
    for example, the five-year exponential moving average values. The result is stored
    in the `exponentialMovingAverageDiff` data frame:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 计算价格和计算出的`exponentialMovingAverage5`（例如，五年指数移动平均值）之间的差异。结果存储在`exponentialMovingAverageDiff`数据框中：
- en: '[PRE63]'
  id: totrans-314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'Comparing the fast-moving average of a BAC series with a slow-moving average
    of a BAC series. `BAC` is passed as the price matrix. `fast = 12` represents the
    periods for fast-moving average, `slow = 26` represents the periods for slow-moving
    average, `signal = 9` represents the signal for moving average:'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 比较BAC系列快速移动平均与BAC系列慢速移动平均。`BAC`作为价格矩阵传递。`fast = 12`表示快速移动平均的周期数，`slow = 26`表示慢速移动平均的周期数，`signal
    = 9`表示移动平均的信号：
- en: '[PRE64]'
  id: totrans-316
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'Displaying the MACD value:'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 显示MACD值：
- en: '[PRE65]'
  id: totrans-318
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'The result is as follows:'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 3 - calculating the indicators](img/image_06_041.jpg)'
  id: totrans-320
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 3 - 计算指标](img/image_06_041.jpg)'
- en: 'Printing the MACD data frame. The `head()` function returns the first part
    of the `MACD` data frame. The `MACD` data frame is passed as an input parameter:'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 打印MACD数据框。`head()`函数返回`MACD`数据框的第一部分。`MACD`数据框作为输入参数传递：
- en: '[PRE66]'
  id: totrans-322
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'The result is as follows:'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 3 - calculating the indicators](img/image_06_042.jpg)'
  id: totrans-324
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 3 - 计算指标](img/image_06_042.jpg)'
- en: 'Grabbing the signal line to use as an indicator. The result is stored in the
    `MACDsignal` data frame:'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 捕获信号线作为指标。结果存储在`MACDsignal`数据框中：
- en: '[PRE67]'
  id: totrans-326
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'Displaying the `MACDsignal` value:'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 显示`MACDsignal`值：
- en: '[PRE68]'
  id: totrans-328
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'The result is as follows:'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 3 - calculating the indicators](img/image_06_043.jpg)'
  id: totrans-330
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 3 - 计算指标](img/image_06_043.jpg)'
- en: Determining the close to the midpoint of the high/low range. In order to determine
    the location of each day's close relative to the high/low range, a stochastic
    oscillator is used. The `SMI()` function is used for the momentum indicator.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 确定收盘价相对于高低范围的中间位置。为了确定每天收盘价相对于高低范围的位置，使用随机振荡器。`SMI()`函数用于动量指标。
- en: '`BAC` is the matrix which contains high-low-close prices. `n = 13` indicates
    the number of periods. `slow=25` indicates the number of periods for double smoothing.
    `fast=2` indicates the number of periods for initial smoothing. `signal=9` indicates
    the number of periods for the signal line. The results are stored in the `stochasticOscillator`
    data frame:'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: '`BAC`是包含高低收盘价矩阵。`n = 13`表示周期数。`slow=25`表示双平滑的周期数。`fast=2`表示初始平滑的周期数。`signal=9`表示信号线的周期数。结果存储在`stochasticOscillator`数据框中：'
- en: '[PRE69]'
  id: totrans-333
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'Displaying the `stochasticOscillator` value:'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 显示`stochasticOscillator`值：
- en: '[PRE70]'
  id: totrans-335
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'The result is as follows:'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 3 - calculating the indicators](img/image_06_044.jpg)'
  id: totrans-337
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 3 - 计算指标](img/image_06_044.jpg)'
- en: 'Grabbing the oscillator to use as an indicator. The result is stored in the `stochasticOscillatorSignal`
    data frame:'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 捕获振荡器作为指标。结果存储在`stochasticOscillatorSignal`数据框中：
- en: '[PRE71]'
  id: totrans-339
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'Displaying the `stochasticOscillatorSignal` value:'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 显示`stochasticOscillatorSignal`值：
- en: '[PRE72]'
  id: totrans-341
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'The result is as follows:'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 3 - calculating the indicators](img/image_06_045.jpg)'
  id: totrans-343
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 3 - 计算指标](img/image_06_045.jpg)'
- en: Step 4 - preparing variables to build datasets
  id: totrans-344
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第 4 步 - 准备变量以构建数据集
- en: 'Calculating the difference between the closing and opening prices. `Cl` stands
    for closing prices and `Op` for opening prices. The results are stored in the
    `PriceChange` data frame:'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 计算收盘价和开盘价之间的差异。`Cl`代表收盘价，`Op`代表开盘价。结果存储在`PriceChange`数据框中：
- en: '[PRE73]'
  id: totrans-346
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'Displaying the `PriceChange` value:'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 显示`PriceChange`值：
- en: '[PRE74]'
  id: totrans-348
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'The result is as follows:'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 4 - preparing variables to build datasets](img/image_06_046.jpg)'
  id: totrans-350
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 4 - 准备变量以构建数据集](img/image_06_046.jpg)'
- en: Creating a binary classification variable. The `ifelse()` function uses a test
    expression to return the value, which is itself a vector, and is of the same length
    as the test expression. The vector returned has an element from `x` if the corresponding
    value of the `test` expression `is TRUE`, or from `y` if the corresponding value
    of `test` expression `is FALSE.`
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个二元分类变量。`ifelse()`函数使用一个测试表达式来返回值，该值本身是一个向量，其长度与测试表达式相同。如果`test`表达式的对应值为`TRUE`，则返回`x`中的元素；如果`test`表达式的对应值为`FALSE`，则返回`y`中的元素。
- en: 'Here, `PriceChange>0` is the test function, which is to be tested in a logical
    mode.`UP` and `DOWN` perform the logical test. The result is then stored in the `binaryClassification` data
    frame:'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`PriceChange>0` 是测试函数，将在逻辑模式下进行测试。`UP` 和 `DOWN` 执行逻辑测试。结果随后存储在 `binaryClassification`
    数据框中：
- en: '[PRE75]'
  id: totrans-353
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'Displaying the `binaryClassification` value:'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 显示 `binaryClassification` 值：
- en: '[PRE76]'
  id: totrans-355
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'The result is as follows:'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 4 - preparing variables to build datasets](img/image_06_047.jpg)'
  id: totrans-357
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 4 - 准备变量以构建数据集](img/image_06_047.jpg)'
- en: 'Exploring the internal structure of the `binaryClassification` data frame.
    The `str()` function displays the internal structure of the data frame. `binaryClassification` is
    passed as an R object to the `str()` function:'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 探索 `binaryClassification` 数据框的内部结构。`str()` 函数显示数据框的内部结构。`binaryClassification`
    作为 R 对象传递给 `str()` 函数：
- en: '[PRE77]'
  id: totrans-359
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'The result is as follows:'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 4 - preparing variables to build datasets](img/image_06_048.jpg)'
  id: totrans-361
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 4 - 准备变量以构建数据集](img/image_06_048.jpg)'
- en: Creating the dataset to be used. The `data.frame()` function is used to create
    data frames based on a tightly coupled set of variables. These variables share
    the properties of matrices. The variables passed as parameters to `data.frame()`
    are `relativeStrengthIndex3`, `exponentialMovingAverageDiff`, `MACDsignal`, `stochasticOscillator`,
    and `binaryClassification`.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 创建要使用的数据集。`data.frame()` 函数用于根据紧密耦合的变量集创建数据框。这些变量具有矩阵的性质。传递给 `data.frame()`
    的参数变量有 `relativeStrengthIndex3`、`exponentialMovingAverageDiff`、`MACDsignal`、`stochasticOscillator`
    和 `binaryClassification`。
- en: 'The result is then stored in the `DataSet` data frame:'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 结果随后存储在 `DataSet` 数据框中：
- en: '[PRE78]'
  id: totrans-364
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'Displaying the `DataSet` value:'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 显示 `DataSet` 值：
- en: '[PRE79]'
  id: totrans-366
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'The result is as follows:'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 4 - preparing variables to build datasets](img/image_06_049.jpg)'
  id: totrans-368
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 4 - 准备变量以构建数据集](img/image_06_049.jpg)'
- en: 'Printing the `DataSet` data frame. The `head()` function returns the first
    part of the `DataSet` data frame. The `DataSet` data frame is passed as an input
    parameter:'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 打印 `DataSet` 数据框。`head()` 函数返回 `DataSet` 数据框的第一部分。`DataSet` 数据框作为输入参数传递：
- en: '[PRE80]'
  id: totrans-370
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'The result is as follows:'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 4 - preparing variables to build datasets](img/image_06_050.jpg)'
  id: totrans-372
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 4 - 准备变量以构建数据集](img/image_06_050.jpg)'
- en: 'Exploring the internal structure of the `DataSet` data frame. The `str()` function
    displays the internal structure of the data frame. The `DataSet` is passed as
    an R object to the `str()` function:'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 探索 `DataSet` 数据框的内部结构。`str()` 函数显示数据框的内部结构。`DataSet` 作为 R 对象传递给 `str()` 函数：
- en: '[PRE81]'
  id: totrans-374
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'The result is as follows:'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 4 - preparing variables to build datasets](img/image_06_051.jpg)'
  id: totrans-376
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 4 - 准备变量以构建数据集](img/image_06_051.jpg)'
- en: Naming the columns. The `c()` function is used to combine the arguments into
    vectors.
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 命名列。`c()` 函数用于将参数组合成向量。
- en: 'The variables passed as parameters to `c()` are `relativeStrengthIndex3`, `exponentialMovingAverageDiff`,
    `MACDsignal`, `stochasticOscillator`, and `binaryClassification`:'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 传递给 `c()` 函数的参数变量有 `relativeStrengthIndex3`、`exponentialMovingAverageDiff`、`MACDsignal`、`stochasticOscillator`
    和 `binaryClassification`：
- en: '[PRE82]'
  id: totrans-379
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'Displaying the `colnames(DataSet)` value:'
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 显示 `colnames(DataSet)` 值：
- en: '[PRE83]'
  id: totrans-381
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: 'The result is as follows:'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 4 - preparing variables to build datasets](img/image_06_052.jpg)'
  id: totrans-383
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 4 - 准备变量以构建数据集](img/image_06_052.jpg)'
- en: 'Eliminating the data where the indicators are to be calculated:'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 删除要计算指标的数据：
- en: '[PRE84]'
  id: totrans-385
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'Displaying the `DataSet` value:'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 显示 `DataSet` 值：
- en: '[PRE85]'
  id: totrans-387
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: 'The result is as follows:'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 4 - preparing variables to build datasets](img/image_06_053.jpg)'
  id: totrans-389
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 4 - 准备变量以构建数据集](img/image_06_053.jpg)'
- en: 'Printing the `DataSet` data frame. The `head()` function returns the first
    part of the `DataSet` data frame. The `DataSet` data frame is passed as an input
    parameter:'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 打印 `DataSet` 数据框。`head()` 函数返回 `DataSet` 数据框的第一部分。`DataSet` 数据框作为输入参数传递：
- en: '[PRE86]'
  id: totrans-391
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: 'The result is as follows:'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 4 - preparing variables to build datasets](img/image_06_054.jpg)'
  id: totrans-393
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 4 - 准备变量以构建数据集](img/image_06_054.jpg)'
- en: 'Exploring the internal structure of the `DataSet` data frame. The `str()` function
    displays the internal structure of the data frame. The `DataSet` is passed as
    an R object to the `str()` function:'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 探索 `DataSet` 数据框的内部结构。`str()` 函数显示数据框的内部结构。`DataSet` 作为 R 对象传递给 `str()` 函数：
- en: '[PRE87]'
  id: totrans-395
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: 'The result is as follows:'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 4 - preparing variables to build datasets](img/image_06_055.jpg)'
  id: totrans-397
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 4 - 准备变量以构建数据集](img/image_06_055.jpg)'
- en: 'Exploring the dimensions of the `DataSet` data frame. The `dim()` function
    returns the dimensions of the `DataSet` frame. The `DataSet` data frame is passed
    as an input parameter. The result clearly states that there are 469 rows of data
    and 5 columns:'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 探索`DataSet`数据框的维度。`dim()`函数返回`DataSet`框的维度。将`DataSet`数据框作为输入参数传递。结果显示，共有469行数据和5列：
- en: '[PRE88]'
  id: totrans-399
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: 'The result is as follows:'
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 4 - preparing variables to build datasets](img/image_06_056.jpg)'
  id: totrans-401
  prefs: []
  type: TYPE_IMG
  zh: '![步骤4 - 准备变量以构建数据集](img/image_06_056.jpg)'
- en: Building a training dataset. Two-thirds of the elements in the `DataSet` data
    frame will be used as a training dataset, while one-third of the elements in the
    `DataSet` data frame will be used as a testing dataset.
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 构建训练数据集。`DataSet`数据框中的三分之二元素将用作训练数据集，而`DataSet`数据框中的一分之一元素将用作测试数据集。
- en: 'The training dataset will be stored in `TrainingDataSet`:'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: 训练数据集将存储在`TrainingDataSet`中：
- en: '[PRE89]'
  id: totrans-404
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: 'Displaying the `TrainingDataSet` value:'
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 显示`TrainingDataSet`的值：
- en: '[PRE90]'
  id: totrans-406
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: 'The result is as follows:'
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 4 - preparing variables to build datasets](img/image_06_057.jpg)'
  id: totrans-408
  prefs: []
  type: TYPE_IMG
  zh: '![步骤4 - 准备变量以构建数据集](img/image_06_057.jpg)'
- en: 'Exploring the internal structure of the `TrainingDataSet` data frame. The `str()`
    function displays the internal structure of the data frame. The `TrainingDataSet`
    is passed as an R object to the `str()` function:'
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: 探索`TrainingDataSet`数据框的内部结构。`str()`函数显示数据框的内部结构。将`TrainingDataSet`作为R对象传递给`str()`函数：
- en: '[PRE91]'
  id: totrans-410
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: 'The result is as follows:'
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 4 - preparing variables to build datasets](img/image_06_058.jpg)'
  id: totrans-412
  prefs: []
  type: TYPE_IMG
  zh: '![步骤4 - 准备变量以构建数据集](img/image_06_058.jpg)'
- en: 'The training dataset will be stored in `TestDataSet`:'
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 训练数据集将存储在`TestDataSet`中：
- en: '[PRE92]'
  id: totrans-414
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: 'Displaying the `TestDataSet` value:'
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: 显示`TestDataSet`的值：
- en: '[PRE93]'
  id: totrans-416
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: 'The result is as follows:'
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 4 - preparing variables to build datasets](img/image_06_059.jpg)'
  id: totrans-418
  prefs: []
  type: TYPE_IMG
  zh: '![步骤4 - 准备变量以构建数据集](img/image_06_059.jpg)'
- en: 'Exploring the internal structure of the `TestDataSet` data frame. The `str()`
    function displays the internal structure of the data frame. The `TestDataSet`
    is passed as an R object to the `str()` function:'
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 探索`TestDataSet`数据框的内部结构。`str()`函数显示数据框的内部结构。将`TestDataSet`作为R对象传递给`str()`函数：
- en: '[PRE94]'
  id: totrans-420
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: 'The result is as follows:'
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 4 - preparing variables to build datasets](img/image_06_060.jpg)'
  id: totrans-422
  prefs: []
  type: TYPE_IMG
  zh: '![步骤4 - 准备变量以构建数据集](img/image_06_060.jpg)'
- en: Step 5 - building the model
  id: totrans-423
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 步骤5 - 构建模型
- en: 'Building the tree model by specifying the indicators. The `rpart()` function
    will be used. It will fit the model. `binaryClassification` is the outcome, using
    the sum of `relativeStrengthIndex3`, `exponentialMovingAverageDiff`, `MACDsignal`,
    and `stochasticOscillator` as the predictors. `data=TrainingDataSet` represents
    the data frame. `cp=.001` represents the complexity parameter. The main role of
    the parameter is to save computing time by pruning off splits. The result is then
    stored in the `DecisionTree` data frame:'
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: 通过指定指标构建树模型。将使用`rpart()`函数。它将拟合模型。`binaryClassification`是结果，使用`relativeStrengthIndex3`、`exponentialMovingAverageDiff`、`MACDsignal`和`stochasticOscillator`的总和作为预测因子。`data=TrainingDataSet`表示数据框。`cp=.001`表示复杂性参数。该参数的主要作用是通过剪枝来节省计算时间。结果随后存储在`DecisionTree`数据框中：
- en: '[PRE95]'
  id: totrans-425
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: 'Plotting the tree model. The `prp()` function will be used to plot the `DecisionTree`
    data frame. `type=2` shifts alternate nodes vertically:'
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: 绘制树模型。将使用`prp()`函数绘制`DecisionTree`数据框。`type=2`将交替节点垂直移动：
- en: '[PRE96]'
  id: totrans-427
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: 'The result is as follows:'
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 5 - building the model](img/B04714_06_61.jpg)'
  id: totrans-429
  prefs: []
  type: TYPE_IMG
  zh: '![步骤5 - 构建模型](img/B04714_06_61.jpg)'
- en: 'Displaying the `cp` table for the `DecisionTree` data frame. The `printcp()`
    function is used. `DecisionTree` is passed as an input:'
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 显示`DecisionTree`数据框的`cp`表。使用`printcp()`函数。将`DecisionTree`作为输入传递：
- en: '[PRE97]'
  id: totrans-431
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: 'The result is as follows:'
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 5 - building the model](img/image_06_062.jpg)'
  id: totrans-433
  prefs: []
  type: TYPE_IMG
  zh: '![步骤5 - 构建模型](img/image_06_062.jpg)'
- en: 'Plotting the geometric mean for trees. `plotcp()` function is used. It provides
    the visual representation of the cross-validation results of the `DecisionTree`
    data frame:'
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: 绘制树的几何平均。使用`plotcp()`函数。它提供了`DecisionTree`数据框交叉验证结果的视觉表示：
- en: '[PRE98]'
  id: totrans-435
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: 'The result is as follows:'
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 5 - building the model](img/image_06_063.jpg)'
  id: totrans-437
  prefs: []
  type: TYPE_IMG
  zh: '![步骤5 - 构建模型](img/image_06_063.jpg)'
- en: Step 6 - improving the model
  id: totrans-438
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 步骤6 - 改进模型
- en: 'Improving the model after pruning the tree. `prune()` is the function used.
    `DecisionTree` is the data frame that is passed as an input. `cp=0.041428` has
    been taken, since this is the lowest cross-validation error value (x error):'
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: 在剪枝后改进模型。使用`prune()`函数。`DecisionTree`是作为输入传递的数据框。`cp=0.041428`已被采用，因为这是最低的交叉验证错误值（x错误）：
- en: '[PRE99]'
  id: totrans-440
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: 'Plotting the `tree` model. The `prp()` function will be used to plot the `DecisionTree`
    data frame. `type=4` shifts alternate nodes vertically:'
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: 绘制`tree`模型。将使用`prp()`函数绘制`DecisionTree`数据框。`type=4`将交替节点垂直移动：
- en: '[PRE100]'
  id: totrans-442
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: 'The result is as follows:'
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 6 - improving the model](img/image_06_064.jpg)'
  id: totrans-444
  prefs: []
  type: TYPE_IMG
  zh: '![第6步 - 改进模型](img/image_06_064.jpg)'
- en: 'Testing the model:'
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: 测试模型：
- en: '[PRE101]'
  id: totrans-446
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: 'The result is as follows:'
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 6 - improving the model](img/image_06_065.jpg)'
  id: totrans-448
  prefs: []
  type: TYPE_IMG
  zh: '![第6步 - 改进模型](img/image_06_065.jpg)'
- en: Naive Bayes - predicting the direction of stock movement
  id: totrans-449
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简单贝叶斯 - 预测股票运动的方向
- en: Stock trading is one of the most challenging problems statisticians are trying
    to solve. There are multiple technical indicators, such as trend direction, momentum
    or lack of momentum in the market, volatility for profit potential, and volume
    measures to monitor the popularity in the market, to name a few. These indicators
    can be used to create strategy to high-probability trading opportunities. Days/weeks/months
    can be spent discovering the relationships between technical indicators. An efficient
    and less time-consuming tool, such as a decision tree, can be used. The main advantage
    of a decision tree is that it is a powerful and easily interpretable algorithm,
    which gives a good head start.
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: 股票交易是统计学家试图解决的最具挑战性的问题之一。市场中有多个技术指标，例如趋势方向、动量或市场动量的缺乏、波动性以衡量盈利潜力，以及用于监控市场流行度的成交量等，仅举几例。这些指标可以用来创建策略以捕捉高概率的交易机会。可能需要花费数日/数周/数月来发现技术指标之间的关系。可以使用像决策树这样的高效且节省时间的工具。决策树的主要优势在于它是一个强大且易于解释的算法，这为良好的起点提供了帮助。
- en: Getting ready
  id: totrans-451
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In order to perform naive Bayes, we will be using a dataset collected from the
    stock markets dataset.
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: 为了执行简单贝叶斯，我们将使用从股票市场数据集中收集的数据集。
- en: Step 1 - collecting and describing the data
  id: totrans-453
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第1步 - 收集和描述数据
- en: The dataset to be used is the Apple Inc. daily closing stock value between January
    1, 2012 and January 1, 2014\. This dataset is freely available on [https://www.yahoo.com/](https://www.yahoo.com/),
    from where we will be downloading the data.
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用的数据集是2012年1月1日至2014年1月1日苹果公司每日收盘价。此数据集在[https://www.yahoo.com/](https://www.yahoo.com/)上免费提供，我们将从那里下载数据。
- en: How to do it...
  id: totrans-455
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: Let's get into the details.
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入了解细节。
- en: Step 2 - exploring the data
  id: totrans-457
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第2步 - 探索数据
- en: 'The following packages need to be loaded as the first step to be carried out:'
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: 以下包需要在执行第一步时加载：
- en: '[PRE102]'
  id: totrans-459
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: Note
  id: totrans-460
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Version info: Code for this page was tested in R version 3.3.0 (2016-05-03)'
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: 版本信息：本页面的代码在R版本3.3.0（2016-05-03）上进行了测试
- en: 'Each of the following libraries needs to be installed:'
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: 以下每个库都需要安装：
- en: '[PRE103]'
  id: totrans-463
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: Let's download the data. We will begin by marking the start and end date for
    the time period in which the data is desired.
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们下载数据。我们首先标记所需数据的时间段的开始和结束日期。
- en: The `as.Date()` function is used to convert the character representation and
    objects of the *Date* class, which represents the calendar dates.
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`as.Date()`函数将字符表示和*Date*类的对象转换为日历日期。
- en: 'The start date for the dataset is stored in `startDate`, which represents the
    character vector representation of the calendar date. The format for representation
    is *YYYY-MM-DD*:'
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: 数据集的开始日期存储在`startDate`中，它表示日历日期的字符向量表示。表示的格式是*YYYY-MM-DD*：
- en: '[PRE104]'
  id: totrans-467
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: 'The end date for the dataset is stored in `endDate`, which represents the character
    vector representation of the calendar date. The format for representation is YYYY-MM-DD:'
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: 数据集的结束日期存储在`endDate`中，它表示日历日期的字符向量表示。表示的格式是YYYY-MM-DD：
- en: '[PRE105]'
  id: totrans-469
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: 'Loading the data using the `getSymbols()` function. The function loads data
    from multiple sources, either local or remote. Data is fetched and saved in the
    `env` specified. The default value is `.GlobalEnv` for `env`. `AAPL` is the character
    vector, which specifies the name of the symbol to be loaded. `src = yahoo` specifies
    the sourcing method:'
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`getSymbols()`函数加载数据。该函数从多个来源加载数据，无论是本地还是远程。数据被检索并保存在指定的`env`中。对于`env`，默认值是`.GlobalEnv`。`AAPL`是字符向量，指定要加载的符号名称。`src
    = yahoo`指定了数据来源方法：
- en: '[PRE106]'
  id: totrans-471
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: '![Step 2 - exploring the data](img/image_06_066.jpg)'
  id: totrans-472
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 2 - 探索数据](img/image_06_066.jpg)'
- en: 'Exploring the days of the week when data is available. The `wday()` function
    is used. The function returns the day of the week in decimal format. `AAPL` represents
    the data frame. `label = TRUE` displays the day of the week as a character string,
    for example, Sunday. The result is then stored in the `weekDays` data frame:'
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: 探索数据可用的星期几。使用 `wday()` 函数。该函数以十进制格式返回星期几。`AAPL` 代表数据框。`label = TRUE` 将星期几显示为字符串，例如，星期日。结果随后存储在
    `weekDays` 数据框中：
- en: '[PRE107]'
  id: totrans-474
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: 'Printing the `weekDays` data frame. The `head()` function returns the first
    part of the `weekDays` data frame. The `weekDays` data frame is passed as an input
    parameter:'
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: 打印 `weekDays` 数据框。`head()` 函数返回 `weekDays` 数据框的前部分。将 `weekDays` 数据框作为输入参数传递：
- en: '[PRE108]'
  id: totrans-476
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: 'The result is as follows:'
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 2 - exploring the data](img/image_06_067.jpg)'
  id: totrans-478
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 2 - 探索数据](img/image_06_067.jpg)'
- en: Step 3 - preparing variables to build datasets
  id: totrans-479
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第 3 步 - 准备构建数据集的变量
- en: 'Calculating the difference between closing and opening prices. `Cl` stands
    for closing prices and `Op` for opening prices. The results are stored in the
    `changeInPrices` data frame:'
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: 计算收盘价和开盘价之间的差异。`Cl` 代表收盘价，`Op` 代表开盘价。结果存储在 `changeInPrices` 数据框中：
- en: '[PRE109]'
  id: totrans-481
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: 'Printing the `changeInPrices` data frame. The `head()` function returns the
    first part of the `changeInPrices` data frame. The `changeInPrices` data frame
    is passed as an input parameter:'
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: 打印 `changeInPrices` 数据框。`head()` 函数返回 `changeInPrices` 数据框的前部分。将 `changeInPrices`
    数据框作为输入参数传递：
- en: '[PRE110]'
  id: totrans-483
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: 'The result is as follows:'
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 3 - preparing variables to build datasets](img/image_06_068.jpg)'
  id: totrans-485
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 3 - 准备构建数据集的变量](img/image_06_068.jpg)'
- en: 'Exploring the summary of change in prices. The `summary()` function is used.
    The function provides a range of descriptive statistics to produce result summaries
    of the `changeInPrices` data frame:'
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
  zh: 探索价格变化的摘要。使用 `summary()` 函数。该函数提供一系列描述性统计，以生成 `changeInPrices` 数据框的结果摘要：
- en: '[PRE111]'
  id: totrans-487
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: 'The result is as follows:'
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 3 - preparing variables to build datasets](img/image_06_069.jpg)'
  id: totrans-489
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 3 - 准备构建数据集的变量](img/image_06_069.jpg)'
- en: 'Exploring the dimensions of the `changeInPrices` data frame. The `dim()` function
    returns the dimensions of the `changeInPrices` frame. The `changeInPrices` data
    frame is passed as an input parameter. The result clearly states that there are
    502 rows of data and 1 column:'
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
  zh: 探索 `changeInPrices` 数据框的维度。`dim()` 函数返回 `changeInPrices` 框的维度。将 `changeInPrices`
    数据框作为输入参数传递。结果清楚地表明有 502 行数据和 1 列：
- en: '[PRE112]'
  id: totrans-491
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: 'The result is as follows:'
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 3 - preparing variables to build datasets](img/image_06_070.jpg)'
  id: totrans-493
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 3 - 准备构建数据集的变量](img/image_06_070.jpg)'
- en: Creating a binary classification variable. The `ifelse()` function uses a test
    expression to return the value, which is itself a vector, and is of the same length
    as the test expression. The vector returned has an element from `x` if the corresponding
    value of the test expression is `TRUE`, or from `y` if the corresponding value
    of the test expression is `FALSE`.
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个二元分类变量。`ifelse()` 函数使用测试表达式返回值，该值本身是一个向量，其长度与测试表达式相同。如果测试表达式的对应值为 `TRUE`，则从
    `x` 中返回向量中的一个元素，如果测试表达式的对应值为 `FALSE`，则从 `y` 中返回。
- en: 'Here, `changeInPrices>0` is the test function which is to test a logical mode. `UP`
    and `DOWN` perform the logical test. The result is then stored in the `binaryClassification` data
    frame:'
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`changeInPrices>0` 是一个测试函数，用于测试逻辑模式。`UP` 和 `DOWN` 执行逻辑测试。结果随后存储在 `binaryClassification`
    数据框中：
- en: '[PRE113]'
  id: totrans-496
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: 'Displaying the `binaryClassification` value:'
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
  zh: 显示 `binaryClassification` 值：
- en: '[PRE114]'
  id: totrans-498
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: 'The result is as follows:'
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 3 - preparing variables to build datasets](img/image_06_071.jpg)'
  id: totrans-500
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 3 - 准备构建数据集的变量](img/image_06_071.jpg)'
- en: 'Exploring the summary of change in prices. The `summary()` function is used.
    The function provides a range of descriptive statistics to produce result summaries
    of the `binaryClassification` data frame:'
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: 探索价格变化的摘要。使用 `summary()` 函数。该函数提供一系列描述性统计，以生成 `binaryClassification` 数据框的结果摘要：
- en: '[PRE115]'
  id: totrans-502
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: 'The result is as follows:'
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 3 - preparing variables to build datasets](img/image_06_072.jpg)'
  id: totrans-504
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 3 - 准备构建数据集的变量](img/image_06_072.jpg)'
- en: Creating the dataset to be used. The `data.frame()` function is used to create
    data frames based on a tightly coupled set of variables. These variables share
    the properties of matrices.
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
  zh: 创建要使用的数据集。使用 `data.frame()` 函数根据紧密耦合的变量集创建数据框。这些变量具有矩阵的性质。
- en: 'The variables passed as parameters to `data.frame()` are `weekDays` and  `binaryClassification`.
    The result is then stored in the `DataSet` data frame:'
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
  zh: 将作为`data.frame()`参数传递的变量是`weekDays`和`binaryClassification`。结果随后存储在`DataSet`数据框中：
- en: '[PRE116]'
  id: totrans-507
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: 'Displaying the `AAPLDataSet` value:'
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: 显示`AAPLDataSet`值：
- en: '[PRE117]'
  id: totrans-509
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: 'The result is as follows:'
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 3 - preparing variables to build datasets](img/image_06_073.jpg)'
  id: totrans-511
  prefs: []
  type: TYPE_IMG
  zh: '![步骤3 - 准备构建数据集的变量](img/image_06_073.jpg)'
- en: 'Printing the `AAPLDataSet` data frame. The `head()` function returns the first
    part of the `AAPLDataSet` data frame. The `AAPLDataSet` data frame is passed as
    an input parameter:'
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
  zh: 打印`AAPLDataSet`数据框。`head()`函数返回`AAPLDataSet`数据框的前部分。将`AAPLDataSet`数据框作为输入参数传递：
- en: '[PRE118]'
  id: totrans-513
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: 'The result is as follows:'
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 3 - preparing variables to build datasets](img/image_06_074.jpg)'
  id: totrans-515
  prefs: []
  type: TYPE_IMG
  zh: '![步骤3 - 准备构建数据集的变量](img/image_06_074.jpg)'
- en: 'Exploring the dimensions of the `AAPLDataSet` data frame. The `dim()` function
    returns the dimensions of the `AAPLDataSet` data frame. The `AAPLDataSet` data
    frame is passed as an input parameter. The result clearly states that there are
    502 rows of data and 2 columns:'
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
  zh: 探索`AAPLDataSet`数据框的维度。`dim()`函数返回`AAPLDataSet`数据框的维度。将`AAPLDataSet`数据框作为输入参数传递。结果明确指出有502行数据和2列：
- en: '[PRE119]'
  id: totrans-517
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: 'The result is as follows:'
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 3 - preparing variables to build datasets](img/image_06_075.jpg)'
  id: totrans-519
  prefs: []
  type: TYPE_IMG
  zh: '![步骤3 - 准备构建数据集的变量](img/image_06_075.jpg)'
- en: Step 4 - building the model
  id: totrans-520
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第4步 - 构建模型
- en: 'Building the naives Bayes classifier by specifying the indicators. The `naiveBayes()`
    function will be used. It uses the Bayes rule to compute posterior probabilities
    for a given set of class variables given independent predictor variables. The
    function assumes a Gaussian distribution of metric predictors. `NaiveBayesclassifier`
    is the outcome of the function, where the independent variable is `AAPLDataSet[,1]`
    and the dependent variable is `AAPLDataSet[,2]` :'
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
  zh: 通过指定指标构建朴素贝叶斯分类器。将使用`naiveBayes()`函数。该函数使用贝叶斯规则来计算给定一组独立预测变量的后验概率。该函数假设度量预测变量服从高斯分布。"NaiveBayesclassifier"是函数的输出结果，其中独立变量是`AAPLDataSet[,1]`，因变量是`AAPLDataSet[,2]`：
- en: '[PRE120]'
  id: totrans-522
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: 'Displaying the `NaiveBayesclassifier` result:'
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: 显示`NaiveBayesclassifier`结果：
- en: '[PRE121]'
  id: totrans-524
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: 'The result is as follows:'
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 4 - building the model](img/image_06_076.jpg)'
  id: totrans-526
  prefs: []
  type: TYPE_IMG
  zh: '![步骤4 - 构建模型](img/image_06_076.jpg)'
- en: The result is over the entire dataset, and shows the probability of a price
    increase or decrease. It is bearish in nature.
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
  zh: 结果覆盖整个数据集，并显示价格增加或减少的概率。其本质上是看跌的。
- en: Step 5 - creating data for a new, improved model
  id: totrans-528
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第5步 - 创建新的、改进模型的数据
- en: 'Developing a sophisticated strategy, looking ahead more than a day. Calculating
    moving average to the model for a period of 5 years. `EMA()` uses the AAPL symbol
    as a price series. `n = 5` represents the time period to average over. The result
    is then stored in the `exponentialMovingAverage5` data frame:'
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
  zh: 制定一个复杂的策略，展望超过一天。对模型计算5年的移动平均。`EMA()`使用AAPL符号作为价格序列。"n = 5"代表平均的时间段。结果随后存储在`exponentialMovingAverage5`数据框中：
- en: '[PRE122]'
  id: totrans-530
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: 'Displaying the `exponentialMovingAverage5` value:'
  id: totrans-531
  prefs: []
  type: TYPE_NORMAL
  zh: 显示`exponentialMovingAverage5`值：
- en: '[PRE123]'
  id: totrans-532
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: 'The result is as follows:'
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 5 - creating data for a new, improved model](img/image_06_077.jpg)'
  id: totrans-534
  prefs: []
  type: TYPE_IMG
  zh: '![步骤5 - 创建新的、改进模型的数据](img/image_06_077.jpg)'
- en: 'Exploring the summary of change in prices. The `summary()` function is used.
    The function provides a range of descriptive statistics to produce result summaries
    of the `exponentialMovingAverage5` data frame:'
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
  zh: 探索价格变化的摘要。使用`summary()`函数。该函数提供一系列描述性统计量，以生成`exponentialMovingAverage5`数据框的结果摘要：
- en: '[PRE124]'
  id: totrans-536
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: 'The result is as follows:'
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 5 - creating data for a new, improved model](img/image_06_078.jpg)'
  id: totrans-538
  prefs: []
  type: TYPE_IMG
  zh: '![步骤5 - 创建新的、改进模型的数据](img/image_06_078.jpg)'
- en: Calculating moving average to the model for a period of 10 years.
  id: totrans-539
  prefs: []
  type: TYPE_NORMAL
  zh: 对模型计算10年的移动平均。
- en: '`EMA()` uses the AAPL symbol as a price series. `n = 10` represents the time
    period to average over. The result is then stored in the `exponentialMovingAverage10`
    data frame:'
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
  zh: '`EMA()`使用AAPL符号作为价格序列。"n = 10"代表平均的时间段。结果随后存储在`exponentialMovingAverage10`数据框中：'
- en: '[PRE125]'
  id: totrans-541
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: 'Displaying the `exponentialMovingAverage10` value:'
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
  zh: 显示`exponentialMovingAverage10`值：
- en: '[PRE126]'
  id: totrans-543
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: 'The result is as follows:'
  id: totrans-544
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 5 - creating data for a new, improved model](img/image_06_079.jpg)'
  id: totrans-545
  prefs: []
  type: TYPE_IMG
  zh: '![步骤5 - 创建新的、改进模型的数据](img/image_06_079.jpg)'
- en: 'Exploring the summary of change in prices. The `summary()` function is used.
    The function provides a range of descriptive statistics to produce result summaries
    of the `exponentialMovingAverage10` data frame:'
  id: totrans-546
  prefs: []
  type: TYPE_NORMAL
  zh: 探索价格变化的摘要。使用 `summary()` 函数。该函数提供一系列描述性统计量，以生成 `exponentialMovingAverage10`
    数据框的结果摘要：
- en: '[PRE127]'
  id: totrans-547
  prefs: []
  type: TYPE_PRE
  zh: '[PRE127]'
- en: 'The result is as follows:'
  id: totrans-548
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 5 - creating data for a new, improved model](img/image_06_080.jpg)'
  id: totrans-549
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 5 - 为新的改进模型创建数据](img/image_06_080.jpg)'
- en: 'Exploring the dimensions of the `exponentialMovingAverage10` data frame. The
    `dim()` function returns the dimensions of the `exponentialMovingAverage10` frame.
    The `exponentialMovingAverage10` data frame is passed as an input parameter. The
    result clearly states that there are 502 rows of data and 1 column:'
  id: totrans-550
  prefs: []
  type: TYPE_NORMAL
  zh: 探索 `exponentialMovingAverage10` 数据框的维度。`dim()` 函数返回 `exponentialMovingAverage10`
    框的维度。将 `exponentialMovingAverage10` 数据框作为输入参数传递。结果清楚地表明有 502 行数据和 1 列：
- en: '[PRE128]'
  id: totrans-551
  prefs: []
  type: TYPE_PRE
  zh: '[PRE128]'
- en: 'The result is as follows:'
  id: totrans-552
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 5 - creating data for a new, improved model](img/image_06_081.jpg)'
  id: totrans-553
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 5 - 为新的改进模型创建数据](img/image_06_081.jpg)'
- en: 'Calculating the difference between `exponentialMovingAverage5` and `exponentialMovingAverage10`:'
  id: totrans-554
  prefs: []
  type: TYPE_NORMAL
  zh: 计算 `exponentialMovingAverage5` 和 `exponentialMovingAverage10` 之间的差异：
- en: '[PRE129]'
  id: totrans-555
  prefs: []
  type: TYPE_PRE
  zh: '[PRE129]'
- en: 'Displaying the `exponentialMovingAverageDiff` value:'
  id: totrans-556
  prefs: []
  type: TYPE_NORMAL
  zh: 显示 `exponentialMovingAverageDiff` 值：
- en: '[PRE130]'
  id: totrans-557
  prefs: []
  type: TYPE_PRE
  zh: '[PRE130]'
- en: 'The result is as follows:'
  id: totrans-558
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 5 - creating data for a new, improved model](img/image_06_082.jpg)'
  id: totrans-559
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 5 - 为新的改进模型创建数据](img/image_06_082.jpg)'
- en: 'Exploring the summary of change in prices. The `summary()` function is used.
    The function provides a range of descriptive statistics to produce result summaries
    of the `exponentialMovingAverageDiff` data frame:'
  id: totrans-560
  prefs: []
  type: TYPE_NORMAL
  zh: 探索价格变化的摘要。使用 `summary()` 函数。该函数提供一系列描述性统计量，以生成 `exponentialMovingAverageDiff`
    数据框的结果摘要：
- en: '[PRE131]'
  id: totrans-561
  prefs: []
  type: TYPE_PRE
  zh: '[PRE131]'
- en: 'The result is as follows:'
  id: totrans-562
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 5 - creating data for a new, improved model](img/image_06_083.jpg)'
  id: totrans-563
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 5 - 为新的改进模型创建数据](img/image_06_083.jpg)'
- en: 'Rounding off the `exponentialMovingAverageDiff` data frame to two significant
    digits:'
  id: totrans-564
  prefs: []
  type: TYPE_NORMAL
  zh: 将 `exponentialMovingAverageDiff` 数据框四舍五入到两位有效数字：
- en: '[PRE132]'
  id: totrans-565
  prefs: []
  type: TYPE_PRE
  zh: '[PRE132]'
- en: 'Exploring the summary of change in prices. The `summary()` function is used.
    The function provides a range of descriptive statistics to produce result summaries
    of the `exponentialMovingAverageDiffRound` data frame:'
  id: totrans-566
  prefs: []
  type: TYPE_NORMAL
  zh: 探索价格变化的摘要。使用 `summary()` 函数。该函数提供一系列描述性统计量，以生成 `exponentialMovingAverageDiffRound`
    数据框的结果摘要：
- en: '[PRE133]'
  id: totrans-567
  prefs: []
  type: TYPE_PRE
  zh: '[PRE133]'
- en: 'The result is as follows:'
  id: totrans-568
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 5 - creating data for a new, improved model](img/image_06_084.jpg)'
  id: totrans-569
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 5 - 为新的改进模型创建数据](img/image_06_084.jpg)'
- en: Step 6 - improving the model
  id: totrans-570
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 步骤 6 - 改进模型
- en: 'Creating the dataset to be used. The `data.frame()` function is used to create
    data frames based on a tightly coupled set of variables. These variables share
    the properties of matrices. The variables passed as parameters to `data.frame()`
    are `weekDays`, `exponentialMovingAverageDiffRound`, and `binaryClassification`.
    The result is then stored in the `AAPLDataSetNew` data frame:'
  id: totrans-571
  prefs: []
  type: TYPE_NORMAL
  zh: 创建用于的数据集。使用 `data.frame()` 函数根据一组紧密耦合的变量创建数据框。这些变量具有矩阵的性质。传递给 `data.frame()`
    的参数变量是 `weekDays`、`exponentialMovingAverageDiffRound` 和 `binaryClassification`。结果存储在
    `AAPLDataSetNew` 数据框中：
- en: '[PRE134]'
  id: totrans-572
  prefs: []
  type: TYPE_PRE
  zh: '[PRE134]'
- en: 'Displaying the `AAPLDataSetNew` value:'
  id: totrans-573
  prefs: []
  type: TYPE_NORMAL
  zh: 显示 `AAPLDataSetNew` 值：
- en: '[PRE135]'
  id: totrans-574
  prefs: []
  type: TYPE_PRE
  zh: '[PRE135]'
- en: 'The result is as follows:'
  id: totrans-575
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 6 - improving the model](img/image_06_086.jpg)'
  id: totrans-576
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 6 - 改进模型](img/image_06_086.jpg)'
- en: 'Exploring the summary of change in prices. The `summary()` function is used.
    The function provides a range of descriptive statistics to produce result summaries
    of the `AAPLDataSetNew` data frame:'
  id: totrans-577
  prefs: []
  type: TYPE_NORMAL
  zh: 探索价格变化的摘要。使用 `summary()` 函数。该函数提供一系列描述性统计量，以生成 `AAPLDataSetNew` 数据框的结果摘要：
- en: '[PRE136]'
  id: totrans-578
  prefs: []
  type: TYPE_PRE
  zh: '[PRE136]'
- en: 'The result is as follows:'
  id: totrans-579
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 6 - improving the model](img/image_06_087.jpg)'
  id: totrans-580
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 6 - 改进模型](img/image_06_087.jpg)'
- en: '[PRE137]'
  id: totrans-581
  prefs: []
  type: TYPE_PRE
  zh: '[PRE137]'
- en: 'The result is as follows:'
  id: totrans-582
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 6 - improving the model](img/image_06_088.jpg)'
  id: totrans-583
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 6 - 改进模型](img/image_06_088.jpg)'
- en: 'Exploring the summary of change in prices. The `summary()` function is used.
    The function provides a range of descriptive statistics to produce result summaries
    of the `AAPLDataSetNew` data frame:'
  id: totrans-584
  prefs: []
  type: TYPE_NORMAL
  zh: 探索价格变化的摘要。使用 `summary()` 函数。该函数提供一系列描述性统计量，以生成 `AAPLDataSetNew` 数据框的结果摘要：
- en: '[PRE138]'
  id: totrans-585
  prefs: []
  type: TYPE_PRE
  zh: '[PRE138]'
- en: 'The result is as follows:'
  id: totrans-586
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 6 - improving the model](img/image_06_089.jpg)'
  id: totrans-587
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 6 - 改进模型](img/image_06_089.jpg)'
- en: 'Exploring the dimensions of the `AAPLDataSetNew` data frame. The `dim()` function
    returns the dimensions of the `AAPLDataSetNew` frame. The `AAPLDataSetNew` data
    frame is passed as an input parameter. The result clearly states that there are
    492 rows of data and 3 columns:'
  id: totrans-588
  prefs: []
  type: TYPE_NORMAL
  zh: 探索 `AAPLDataSetNew` 数据框的维度。`dim()` 函数返回 `AAPLDataSetNew` 框的维度。将 `AAPLDataSetNew`
    数据框作为输入参数传递。结果明确指出有 492 行数据和 3 列：
- en: '[PRE139]'
  id: totrans-589
  prefs: []
  type: TYPE_PRE
  zh: '[PRE139]'
- en: 'The result is as follows:'
  id: totrans-590
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 6 - improving the model](img/image_06_090.jpg)'
  id: totrans-591
  prefs: []
  type: TYPE_IMG
  zh: '![第 6 步 - 改进模型](img/image_06_090.jpg)'
- en: Building a training dataset. Two-thirds of the elements in the `AAPLDataSetNew`
    data frame will be used as the training dataset, while one-third of the elements
    in the `AAPLDataSetNew` data frame will be used as the testing dataset.
  id: totrans-592
  prefs: []
  type: TYPE_NORMAL
  zh: 构建训练数据集。`AAPLDataSetNew` 数据框中的三分之二元素将用作训练数据集，而 `AAPLDataSetNew` 数据框中的一分之一元素将用作测试数据集。
- en: 'The training dataset will be stored in the `trainingDataSet` data frame:'
  id: totrans-593
  prefs: []
  type: TYPE_NORMAL
  zh: 训练数据集将存储在 `trainingDataSet` 数据框中：
- en: '[PRE140]'
  id: totrans-594
  prefs: []
  type: TYPE_PRE
  zh: '[PRE140]'
- en: 'Exploring the dimensions of the `trainingDataSet` data frame. The `dim()` function
    returns the dimensions of the `trainingDataSet` data frame. The `trainingDataSet`
    data frame is passed as an input parameter. The result clearly states that there
    are 328 rows of data and 3 columns:'
  id: totrans-595
  prefs: []
  type: TYPE_NORMAL
  zh: 探索 `trainingDataSet` 数据框的维度。`dim()` 函数返回 `trainingDataSet` 数据框的维度。将 `trainingDataSet`
    数据框作为输入参数传递。结果明确指出有 328 行数据和 3 列：
- en: '[PRE141]'
  id: totrans-596
  prefs: []
  type: TYPE_PRE
  zh: '[PRE141]'
- en: 'The result is as follows:'
  id: totrans-597
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 6 - improving the model](img/image_06_091.jpg)'
  id: totrans-598
  prefs: []
  type: TYPE_IMG
  zh: '![第 6 步 - 改进模型](img/image_06_091.jpg)'
- en: 'Exploring the summary of change in prices. The `trainingDataSet()` function
    is used. The function provides a range of descriptive statistics to produce result
    summaries of the `trainingDataSet` data frame:'
  id: totrans-599
  prefs: []
  type: TYPE_NORMAL
  zh: 探索价格变化的摘要。使用 `trainingDataSet()` 函数。该函数提供一系列描述性统计量，以生成 `trainingDataSet` 数据框的结果摘要：
- en: '[PRE142]'
  id: totrans-600
  prefs: []
  type: TYPE_PRE
  zh: '[PRE142]'
- en: 'The result is as follows:'
  id: totrans-601
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 6 - improving the model](img/image_06_092.jpg)'
  id: totrans-602
  prefs: []
  type: TYPE_IMG
  zh: '![第 6 步 - 改进模型](img/image_06_092.jpg)'
- en: 'The training dataset will be stored in the `TestDataSet` data frame:'
  id: totrans-603
  prefs: []
  type: TYPE_NORMAL
  zh: 训练数据集将存储在 `TestDataSet` 数据框中：
- en: '[PRE143]'
  id: totrans-604
  prefs: []
  type: TYPE_PRE
  zh: '[PRE143]'
- en: 'Exploring the dimensions of the `TestDataSet` data frame. The `dim()` function
    returns the dimensions of the `TestDataSet` frame. The `TestDataSet` data frame
    is passed as an input parameter. The result clearly states that there are 164
    rows of data and 3 columns:'
  id: totrans-605
  prefs: []
  type: TYPE_NORMAL
  zh: 探索 `TestDataSet` 数据框的维度。`dim()` 函数返回 `TestDataSet` 框的维度。将 `TestDataSet` 数据框作为输入参数传递。结果明确指出有
    164 行数据和 3 列：
- en: '[PRE144]'
  id: totrans-606
  prefs: []
  type: TYPE_PRE
  zh: '[PRE144]'
- en: 'The result is as follows:'
  id: totrans-607
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 6 - improving the model](img/image_06_093.jpg)'
  id: totrans-608
  prefs: []
  type: TYPE_IMG
  zh: '![第 6 步 - 改进模型](img/image_06_093.jpg)'
- en: '[PRE145]'
  id: totrans-609
  prefs: []
  type: TYPE_PRE
  zh: '[PRE145]'
- en: 'The result is as follows:'
  id: totrans-610
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 6 - improving the model](img/image_06_094.jpg)'
  id: totrans-611
  prefs: []
  type: TYPE_IMG
  zh: '![第 6 步 - 改进模型](img/image_06_094.jpg)'
- en: Building the naives Bayes classifier by specifying the indicators. The `naiveBayes()`
    function will be used. It uses the Bayes rule to compute posterior probabilities
    for a given set of class variables given independent predictor variables. The
    function assumes a Gaussian distribution of metric predictors.
  id: totrans-612
  prefs: []
  type: TYPE_NORMAL
  zh: 通过指定指标构建朴素贝叶斯分类器。将使用 `naiveBayes()` 函数。它使用贝叶斯规则计算给定一组类别变量和独立预测变量后的后验概率。该函数假设度量预测变量的高斯分布。
- en: '`exponentialMovingAverageDiffRoundModel` is the outcome of the function, where
    the independent variable is `trainingDataSet[,1:2]` and the dependent variable
    is `trainingDataSet[,3]`:'
  id: totrans-613
  prefs: []
  type: TYPE_NORMAL
  zh: '`exponentialMovingAverageDiffRoundModel` 是函数的输出结果，其中自变量是 `trainingDataSet[,1:2]`，因变量是
    `trainingDataSet[,3]`：'
- en: '[PRE146]'
  id: totrans-614
  prefs: []
  type: TYPE_PRE
  zh: '[PRE146]'
- en: 'Displaying the `exponentialMovingAverageDiffRoundModel` result:'
  id: totrans-615
  prefs: []
  type: TYPE_NORMAL
  zh: 显示 `exponentialMovingAverageDiffRoundModel` 结果：
- en: '[PRE147]'
  id: totrans-616
  prefs: []
  type: TYPE_PRE
  zh: '[PRE147]'
- en: 'The result is as follows:'
  id: totrans-617
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 6 - improving the model](img/image_06_095.jpg)'
  id: totrans-618
  prefs: []
  type: TYPE_IMG
  zh: '![第 6 步 - 改进模型](img/image_06_095.jpg)'
- en: 'Testing the result:'
  id: totrans-619
  prefs: []
  type: TYPE_NORMAL
  zh: 测试结果：
- en: '[PRE148]'
  id: totrans-620
  prefs: []
  type: TYPE_PRE
  zh: '[PRE148]'
- en: 'The result is as follows:'
  id: totrans-621
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 6 - improving the model](img/image_06_096.jpg)'
  id: totrans-622
  prefs: []
  type: TYPE_IMG
  zh: '![第 6 步 - 改进模型](img/image_06_096.jpg)'
- en: Random forest - currency trading strategy
  id: totrans-623
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 随机森林 - 货币交易策略
- en: The goal of forecasting future price trends for forex markets can be scientifically
    achieved after carrying out technical analysis. Forex traders develop strategies
    based on multiple technical analyses such as market trend, volume, range, support
    and resistance levels, chart patterns and indicators, as well as conducting a
    multiple time frame analysis using different time-frame charts. Based on statistics
    of past market action, such as past prices and past volume, a technical analysis
    strategy is created for evaluating the assets. The main goal for analysis is not
    to measure an asset's underlying value but to calculate future performance of
    markets indicated by the historical performance.
  id: totrans-624
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行技术分析后，可以科学地实现预测外汇市场未来价格趋势的目标。外汇交易者根据市场趋势、成交量、范围、支撑和阻力水平、图表模式和指标等多种技术分析制定策略，并使用不同时间框架的图表进行多时间框架分析。基于过去市场行动的统计数据，如过去价格和过去成交量，创建技术分析策略以评估资产。分析的主要目标不是衡量资产的基本价值，而是计算市场的历史表现所指示的未来市场表现。
- en: Getting ready
  id: totrans-625
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In order to perform random forest, we will be using a dataset collected from
    the US Dollar and GB Pound dataset.
  id: totrans-626
  prefs: []
  type: TYPE_NORMAL
  zh: 为了执行随机森林，我们将使用从美元和英镑数据集收集的数据集。
- en: Step 1 - collecting and describing the data
  id: totrans-627
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第一步 - 收集和描述数据
- en: 'The dataset titled `PoundDollar.csv` will be used. The dataset is in standard
    format. There are 5,257 rows of data and 6 variables. The numeric variables are
    as follows:'
  id: totrans-628
  prefs: []
  type: TYPE_NORMAL
  zh: 将使用标题为 `PoundDollar.csv` 的数据集。数据集是标准格式。有 5,257 行数据和 6 个变量。数值变量如下：
- en: '`Date`'
  id: totrans-629
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`日期`'
- en: '`Open`'
  id: totrans-630
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`开盘价`'
- en: '`High`'
  id: totrans-631
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`最高价`'
- en: '`Low`'
  id: totrans-632
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`最低价`'
- en: '`Close`'
  id: totrans-633
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`收盘价`'
- en: '`Volume`'
  id: totrans-634
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`成交量`'
- en: How to do it...
  id: totrans-635
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Let's get into the details.
  id: totrans-636
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入了解细节。
- en: Step 2 - exploring the data
  id: totrans-637
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第二步 - 探索数据
- en: 'The following packages need to be loaded as the first step to be carried out:'
  id: totrans-638
  prefs: []
  type: TYPE_NORMAL
  zh: 作为第一步要执行，以下包需要加载：
- en: '[PRE149]'
  id: totrans-639
  prefs: []
  type: TYPE_PRE
  zh: '[PRE149]'
- en: Note
  id: totrans-640
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 备注
- en: 'Version info: Code for this page was tested in R version 3.3.0 (2016-05-03).'
  id: totrans-641
  prefs: []
  type: TYPE_NORMAL
  zh: 版本信息：本页代码在 R 版本 3.3.0（2016-05-03）中进行了测试。
- en: 'Each of the following libraries needs to be installed:'
  id: totrans-642
  prefs: []
  type: TYPE_NORMAL
  zh: 以下每个库都需要安装：
- en: '[PRE150]'
  id: totrans-643
  prefs: []
  type: TYPE_PRE
  zh: '[PRE150]'
- en: 'Let''s explore the data and understand the relationships between the variables.
    We''ll begin by importing the CSV data file named `PoundDollar.csv`. We will be
    saving the data to the `PoundDollar` data frame:'
  id: totrans-644
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们探索数据并了解变量之间的关系。我们将首先导入名为 `PoundDollar.csv` 的 CSV 数据文件。我们将把数据保存到 `PoundDollar`
    数据框中：
- en: '[PRE151]'
  id: totrans-645
  prefs: []
  type: TYPE_PRE
  zh: '[PRE151]'
- en: 'Printing the `PoundDollar` data frame. The `head()` function returns the first
    part of the `PoundDollar` data frame. The `PoundDollar` data frame is passed as
    an input parameter:'
  id: totrans-646
  prefs: []
  type: TYPE_NORMAL
  zh: 打印 `PoundDollar` 数据框。`head()` 函数返回 `PoundDollar` 数据框的前一部分。`PoundDollar` 数据框作为输入参数传递：
- en: '[PRE152]'
  id: totrans-647
  prefs: []
  type: TYPE_PRE
  zh: '[PRE152]'
- en: 'The result is as follows:'
  id: totrans-648
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 2 - exploring the data](img/image_06_097.jpg)'
  id: totrans-649
  prefs: []
  type: TYPE_IMG
  zh: '![第二步 - 探索数据](img/image_06_097.jpg)'
- en: 'Printing the summary of the `PoundDollar` data frame. The `summary()` function
    is a multipurpose function. `summary()` is a generic function, which provides
    a summary of the data related to the individual object or data frame. The `PoundDollar`
    data frame is passed as an R object to the `summary()` function:'
  id: totrans-650
  prefs: []
  type: TYPE_NORMAL
  zh: 打印 `PoundDollar` 数据框的摘要。`summary()` 函数是一个多功能函数。`summary()` 是一个通用函数，它提供了与单个对象或数据框相关的数据的摘要。`PoundDollar`
    数据框作为 R 对象传递给 `summary()` 函数：
- en: '[PRE153]'
  id: totrans-651
  prefs: []
  type: TYPE_PRE
  zh: '[PRE153]'
- en: 'The result is as follows:'
  id: totrans-652
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 2 - exploring the data](img/image_06_098.jpg)'
  id: totrans-653
  prefs: []
  type: TYPE_IMG
  zh: '![第二步 - 探索数据](img/image_06_098.jpg)'
- en: 'Exploring the dimensions of the `PoundDollar` data frame. The `dim()` function
    returns the dimensions of the `PoundDollar` frame. The `PoundDollar` data frame
    is passed as an input parameter. The result clearly states that there are 5,257
    rows of data and 7 columns:'
  id: totrans-654
  prefs: []
  type: TYPE_NORMAL
  zh: 探索 `PoundDollar` 数据框的维度。`dim()` 函数返回 `PoundDollar` 框的维度。`PoundDollar` 数据框作为输入参数传递。结果清楚地表明有
    5,257 行数据和 7 列：
- en: '[PRE154]'
  id: totrans-655
  prefs: []
  type: TYPE_PRE
  zh: '[PRE154]'
- en: 'The result is as follows:'
  id: totrans-656
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 2 - exploring the data](img/image_06_099.jpg)'
  id: totrans-657
  prefs: []
  type: TYPE_IMG
  zh: '![第二步 - 探索数据](img/image_06_099.jpg)'
- en: Step 3 - preparing variables to build datasets
  id: totrans-658
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第三步 - 准备变量以构建数据集
- en: 'Representing calendar dates and times. The `as.POSIXlt()` function manipulates
    the objects to represent date and time. `PoundDollar` is passed as an argument.
    `format="%m/%d/%y %H:%M` represents the date-time format. The results are stored
    in the `DateAndTime` data frame:'
  id: totrans-659
  prefs: []
  type: TYPE_NORMAL
  zh: 表示日历日期和时间。`as.POSIXlt()` 函数将对象操作为表示日期和时间。`PoundDollar` 作为参数传递。`format="%m/%d/%y
    %H:%M` 表示日期时间格式。结果存储在 `DateAndTime` 数据框中：
- en: '[PRE155]'
  id: totrans-660
  prefs: []
  type: TYPE_PRE
  zh: '[PRE155]'
- en: 'Capturing the `High`, `Low`, and `Close` values:'
  id: totrans-661
  prefs: []
  type: TYPE_NORMAL
  zh: 捕获 `最高价`、`最低价` 和 `收盘价` 值：
- en: '[PRE156]'
  id: totrans-662
  prefs: []
  type: TYPE_PRE
  zh: '[PRE156]'
- en: 'The `PoundDollar` data frame captures the `High`, `Low`, and `Close` values
    located in the fourth, fifth, and sixth columns. Printing the `HighLowClose` data
    frame. The `head()` function returns the first part of the `HighLowClose` data
    frame. The `HighLowClose` data frame is passed as an input parameter:'
  id: totrans-663
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE157]'
  id: totrans-664
  prefs: []
  type: TYPE_PRE
  zh: '[PRE157]'
- en: 'The result is as follows:'
  id: totrans-665
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 3 - preparing variables to build datasets](img/image_06_100.jpg)'
  id: totrans-666
  prefs: []
  type: TYPE_IMG
- en: 'Printing the summary of the `HighLowClose` data frame. The `summary()` function
    is a multipurpose function. `summary()` is a generic function, which provides
    a summary of the data related to the individual object or data frame. The `HighLowClose`
    data frame is passed as an R object to the `summary()` function:'
  id: totrans-667
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE158]'
  id: totrans-668
  prefs: []
  type: TYPE_PRE
  zh: '[PRE158]'
- en: 'The result is as follows:'
  id: totrans-669
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 3 - preparing variables to build datasets](img/image_06_101.jpg)'
  id: totrans-670
  prefs: []
  type: TYPE_IMG
- en: 'Exploring the internal structure of the `HighLowClose` data frame. The `str()`
    function displays the internal structure of the data frame. The `HighLowClose`
    is passed as an R object to the `str()` function:'
  id: totrans-671
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE159]'
  id: totrans-672
  prefs: []
  type: TYPE_PRE
  zh: '[PRE159]'
- en: 'The result is as follows:'
  id: totrans-673
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 3 - preparing variables to build datasets](img/image_06_102.jpg)'
  id: totrans-674
  prefs: []
  type: TYPE_IMG
- en: 'Creating the dataset to be used. The `data.frame()` function is used to create
    data frames based on a tightly coupled set of variables. These variables share
    the properties of matrices. The variable passed as parameter to `data.frame()`
    is `HighLowClose`. The result is then stored in the `HighLowClosets` data frame.
    `row.names=DateAndTime` represents a single integer string specifying a column
    to be used as row names. The result is stored in the `HighLowClose` data frame:'
  id: totrans-675
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE160]'
  id: totrans-676
  prefs: []
  type: TYPE_PRE
  zh: '[PRE160]'
- en: 'Describing the dataset. The `describe()` function provides the item analysis.
    `HighLowClosets` is passed as an input argument:'
  id: totrans-677
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE161]'
  id: totrans-678
  prefs: []
  type: TYPE_PRE
  zh: '[PRE161]'
- en: 'The result is as follows:'
  id: totrans-679
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 3 - preparing variables to build datasets](img/image_06_103.jpg)'
  id: totrans-680
  prefs: []
  type: TYPE_IMG
- en: 'Creating time series objects. The `as.xts()` function is used. It converts
    the data objects of arbitrary classes to class `xts` without losing any attributes
    of the original format. `HighLowClosets` is passed as an input object:'
  id: totrans-681
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE162]'
  id: totrans-682
  prefs: []
  type: TYPE_PRE
  zh: '[PRE162]'
- en: 'Calculating the Bollinger Bands. Bollinger Bands are range-bound indicators
    that calculate standard deviation from the moving average. Bollinger Bands operate
    under the logic that a currency pair''s price is most likely to gravitate toward
    its average, and hence when it strays too far, such as two standard deviations
    away, it is due to retrace back to its moving average. The `BBands()` function
    is used to calculate Bollinger Bands. `HighLowClosexts` is passed as an object
    that is changed to a matrix, which contains high-low-close prices. `n=20` indicates
    the number of periods for moving average. SMA names the function to be called.
    `sd=2` indicates two standard deviations:'
  id: totrans-683
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE163]'
  id: totrans-684
  prefs: []
  type: TYPE_PRE
  zh: '[PRE163]'
- en: 'Describing the dataset. The `describe()` function provides item analysis. `BollingerBands`
    is passed as an input argument:'
  id: totrans-685
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE164]'
  id: totrans-686
  prefs: []
  type: TYPE_PRE
  zh: '[PRE164]'
- en: 'The result is as follows:'
  id: totrans-687
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 3 - preparing variables to build datasets](img/image_06_104.jpg)'
  id: totrans-688
  prefs: []
  type: TYPE_IMG
- en: 'Building the upper band:'
  id: totrans-689
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE165]'
  id: totrans-690
  prefs: []
  type: TYPE_PRE
  zh: '[PRE165]'
- en: 'Printing the summary of the `Upper` data frame. The `summary()` function is
    a multipurpose function. `summary()` is a generic function, which provides a summary
    of the data related to the individual object or data frame. The `Upper` data frame
    is passed as an R object to the `summary()` function:'
  id: totrans-691
  prefs: []
  type: TYPE_NORMAL
  zh: 打印上界数据框的摘要。`summary()` 函数是一个多功能函数。`summary()` 是一个通用函数，它提供了与单个对象或数据框相关的数据的摘要。`Upper`
    数据框作为 R 对象传递给 `summary()` 函数：
- en: '[PRE166]'
  id: totrans-692
  prefs: []
  type: TYPE_PRE
  zh: '[PRE166]'
- en: 'The result is as follows:'
  id: totrans-693
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 3 - preparing variables to build datasets](img/image_06_105.jpg)'
  id: totrans-694
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 3 - 准备构建数据集的变量](img/image_06_105.jpg)'
- en: 'Building the lower band:'
  id: totrans-695
  prefs: []
  type: TYPE_NORMAL
  zh: 构建下界带：
- en: '[PRE167]'
  id: totrans-696
  prefs: []
  type: TYPE_PRE
  zh: '[PRE167]'
- en: 'Printing the summary of the `Lower` data frame. The `summary()` function is
    a multipurpose function. `summary()` is a generic function, which provides a summary
    of the data related to the individual object or data frame. The Lower data frame
    is passed as an R object to the `summary()` function:'
  id: totrans-697
  prefs: []
  type: TYPE_NORMAL
  zh: 打印下界数据框的摘要。`summary()` 函数是一个多功能函数。`summary()` 是一个通用函数，它提供了与单个对象或数据框相关的数据的摘要。下界数据框作为
    R 对象传递给 `summary()` 函数：
- en: '[PRE168]'
  id: totrans-698
  prefs: []
  type: TYPE_PRE
  zh: '[PRE168]'
- en: 'The result is as follows:'
  id: totrans-699
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 3 - preparing variables to build datasets](img/image_06_106.jpg)'
  id: totrans-700
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 3 - 准备构建数据集的变量](img/image_06_106.jpg)'
- en: 'Building the middle band:'
  id: totrans-701
  prefs: []
  type: TYPE_NORMAL
  zh: 构建中间带：
- en: '[PRE169]'
  id: totrans-702
  prefs: []
  type: TYPE_PRE
  zh: '[PRE169]'
- en: 'Printing the summary of the `Middle` data frame. The `summary()` function is
    a multipurpose function. `summary()` is a generic function which provides a summary
    of the data related to the individual object or data frame. The `Middle` data
    frame is passed as an R object to the `summary()` function:'
  id: totrans-703
  prefs: []
  type: TYPE_NORMAL
  zh: 打印中间数据框的摘要。`summary()` 函数是一个多功能函数。`summary()` 是一个通用函数，它提供了与单个对象或数据框相关的数据的摘要。`Middle`
    数据框作为 R 对象传递给 `summary()` 函数：
- en: '[PRE170]'
  id: totrans-704
  prefs: []
  type: TYPE_PRE
  zh: '[PRE170]'
- en: 'The result is as follows:'
  id: totrans-705
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 3 - preparing variables to build datasets](img/image_06_107.jpg)'
  id: totrans-706
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 3 - 准备构建数据集的变量](img/image_06_107.jpg)'
- en: 'Calculating the percentage change. The `Delt()` function is used to calculate
    the percentage change from one period to another of a given series. `k=1` indicates
    the change over the periods. The result is stored in the `PercentageChngpctB`
    data frame:'
  id: totrans-707
  prefs: []
  type: TYPE_NORMAL
  zh: 计算百分比变化。使用 `Delt()` 函数计算给定序列从一个时期到另一个时期的百分比变化。`k=1` 表示在各个时期的变化。结果存储在 `PercentageChngpctB`
    数据框中：
- en: '[PRE171]'
  id: totrans-708
  prefs: []
  type: TYPE_PRE
  zh: '[PRE171]'
- en: 'Describing the dataset. The `describe()` function provides item analysis. `PercentageChngpctB`
    is passed as an input argument:'
  id: totrans-709
  prefs: []
  type: TYPE_NORMAL
  zh: 描述数据集。`describe()` 函数提供项目分析。`PercentageChngpctB` 作为输入参数传递：
- en: '[PRE172]'
  id: totrans-710
  prefs: []
  type: TYPE_PRE
  zh: '[PRE172]'
- en: 'The result is as follows:'
  id: totrans-711
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 3 - preparing variables to build datasets](img/image_06_108.jpg)'
  id: totrans-712
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 3 - 准备构建数据集的变量](img/image_06_108.jpg)'
- en: 'Calculating the percentage change of the `Upper` data frame. `k=1` indicates
    the change over the periods:'
  id: totrans-713
  prefs: []
  type: TYPE_NORMAL
  zh: 计算上界数据框的百分比变化。`k=1` 表示在各个时期的变化：
- en: '[PRE173]'
  id: totrans-714
  prefs: []
  type: TYPE_PRE
  zh: '[PRE173]'
- en: 'Describing the dataset. The `describe()` function provides item analysis. `PercentageChngUp`
    is passed as an input argument:'
  id: totrans-715
  prefs: []
  type: TYPE_NORMAL
  zh: 描述数据集。`describe()` 函数提供项目分析。`PercentageChngUp` 作为输入参数传递：
- en: '[PRE174]'
  id: totrans-716
  prefs: []
  type: TYPE_PRE
  zh: '[PRE174]'
- en: 'The result is as follows:'
  id: totrans-717
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 3 - preparing variables to build datasets](img/image_06_109.jpg)'
  id: totrans-718
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 3 - 准备构建数据集的变量](img/image_06_109.jpg)'
- en: 'Calculating the percentage change of the `Lower` data frame. `k=1` indicates
    the change over the periods:'
  id: totrans-719
  prefs: []
  type: TYPE_NORMAL
  zh: 计算下界数据框的百分比变化。`k=1` 表示在各个时期的变化：
- en: '[PRE175]'
  id: totrans-720
  prefs: []
  type: TYPE_PRE
  zh: '[PRE175]'
- en: 'Describing the dataset. The `describe()` function provides item analysis. `PercentageChngLow`
    is passed as an input argument:'
  id: totrans-721
  prefs: []
  type: TYPE_NORMAL
  zh: 描述数据集。`describe()` 函数提供项目分析。`PercentageChngLow` 作为输入参数传递：
- en: '[PRE176]'
  id: totrans-722
  prefs: []
  type: TYPE_PRE
  zh: '[PRE176]'
- en: 'The result is as follows:'
  id: totrans-723
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 3 - preparing variables to build datasets](img/image_06_110.jpg)'
  id: totrans-724
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 3 - 准备构建数据集的变量](img/image_06_110.jpg)'
- en: 'Calculating the percentage change of the `Middle` data frame. `k=1` indicates
    the change over the periods:'
  id: totrans-725
  prefs: []
  type: TYPE_NORMAL
  zh: 计算中间数据框的百分比变化。`k=1` 表示在各个时期的变化：
- en: '[PRE177]'
  id: totrans-726
  prefs: []
  type: TYPE_PRE
  zh: '[PRE177]'
- en: 'Describing the dataset. The `describe()` function provides item analysis. `PercentageChngMid` is
    passed as an input argument:'
  id: totrans-727
  prefs: []
  type: TYPE_NORMAL
  zh: 描述数据集。`describe()` 函数提供项目分析。`PercentageChngMid` 作为输入参数传递：
- en: '[PRE178]'
  id: totrans-728
  prefs: []
  type: TYPE_PRE
  zh: '[PRE178]'
- en: 'The result is as follows:'
  id: totrans-729
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 3 - preparing variables to build datasets](img/image_06_111.jpg)'
  id: totrans-730
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 3 - 准备构建数据集的变量](img/image_06_111.jpg)'
- en: 'Calculating the percentage change of the `HighLowClosexts$Close` variable.
    `k=1` indicates the change over the periods:'
  id: totrans-731
  prefs: []
  type: TYPE_NORMAL
  zh: 计算变量 `HighLowClosexts$Close` 的百分比变化。`k=1` 表示在各个时期的变化：
- en: '[PRE179]'
  id: totrans-732
  prefs: []
  type: TYPE_PRE
  zh: '[PRE179]'
- en: Step 4 - building the model
  id: totrans-733
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第 4 步 - 构建模型
- en: Creating a binary classification variable. The `ifelse()` function uses a test
    expression to return the value, which is itself a vector, and is of the same length
    as the test expression. The vector returned has an element from `x` if the corresponding
    value of the test expression is `TRUE`, or from `y` if the corresponding value
    of the test expression is `FALSE`.
  id: totrans-734
  prefs: []
  type: TYPE_NORMAL
  zh: 创建二元分类变量。`ifelse()` 函数使用测试表达式返回值，该值本身是一个向量，其长度与测试表达式相同。如果测试表达式的对应值为 `TRUE`，则从
    `x` 中返回一个元素；如果测试表达式的对应值为 `FALSE`，则从 `y` 中返回一个元素。
- en: 'Here, `Returns>0` is the test function, which is to be tested in a logical
    mode. `UP` and `DOWN` perform the logical test. The result is then stored in the `binaryClassification` data
    frame:'
  id: totrans-735
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`Returns>0` 是测试函数，需要在逻辑模式下进行测试。`UP` 和 `DOWN` 执行逻辑测试。结果随后存储在 `binaryClassification`
    数据框中：
- en: '[PRE180]'
  id: totrans-736
  prefs: []
  type: TYPE_PRE
  zh: '[PRE180]'
- en: 'Exploring the summary of change in prices. The `summary()` function is used.
    The function provides a range of descriptive statistics to produce result summaries
    of the `binaryClassification` data frame:'
  id: totrans-737
  prefs: []
  type: TYPE_NORMAL
  zh: 探索价格变化的摘要。使用 `summary()` 函数。该函数提供一系列描述性统计量，以生成 `binaryClassification` 数据框的结果摘要：
- en: '[PRE181]'
  id: totrans-738
  prefs: []
  type: TYPE_PRE
  zh: '[PRE181]'
- en: 'The result is as follows:'
  id: totrans-739
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 4 - building the model](img/image_06_112.jpg)'
  id: totrans-740
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 4 - 构建模型](img/image_06_112.jpg)'
- en: 'Shifting class back one:'
  id: totrans-741
  prefs: []
  type: TYPE_NORMAL
  zh: 将类别回退一个：
- en: '[PRE182]'
  id: totrans-742
  prefs: []
  type: TYPE_PRE
  zh: '[PRE182]'
- en: Combining all the features. The `data.frame()` function is used to create data
    frames based on a tightly coupled set of variables. These variables share the
    properties of matrices.
  id: totrans-743
  prefs: []
  type: TYPE_NORMAL
  zh: 结合所有特征。使用 `data.frame()` 函数根据紧密耦合的变量集创建数据框。这些变量具有矩阵的性质。
- en: 'The variables passed as parameters to `data.frame()` are `Upper`, `Lower` , 
    `Middle`, `BollingerBands$pctB`, `PercentageChngpctB`, `PercentageChngUp`, `PercentageChngLow`,
    and `PercentageChngMid`. The result is then stored in the `FeaturesCombined` data
    frame:'
  id: totrans-744
  prefs: []
  type: TYPE_NORMAL
  zh: 传递给 `data.frame()` 的参数变量有 `Upper`、`Lower`、`Middle`、`BollingerBands$pctB`、`PercentageChngpctB`、`PercentageChngUp`、`PercentageChngLow`
    和 `PercentageChngMid`。结果随后存储在 `FeaturesCombined` 数据框中：
- en: '[PRE183]'
  id: totrans-745
  prefs: []
  type: TYPE_PRE
  zh: '[PRE183]'
- en: 'Exploring the summary of change in prices. The `summary()` function is used.
    The function provides a range of descriptive statistics to produce result summaries
    of the `FeaturesCombined` data frame:'
  id: totrans-746
  prefs: []
  type: TYPE_NORMAL
  zh: 探索价格变化的摘要。使用 `summary()` 函数。该函数提供一系列描述性统计量，以生成 `FeaturesCombined` 数据框的结果摘要：
- en: '[PRE184]'
  id: totrans-747
  prefs: []
  type: TYPE_PRE
  zh: '[PRE184]'
- en: 'The result is as follows:'
  id: totrans-748
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 4 - building the model](img/image_06_113.jpg)'
  id: totrans-749
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 4 - 构建模型](img/image_06_113.jpg)'
- en: 'Matching the class:'
  id: totrans-750
  prefs: []
  type: TYPE_NORMAL
  zh: 匹配类别：
- en: '[PRE185]'
  id: totrans-751
  prefs: []
  type: TYPE_PRE
  zh: '[PRE185]'
- en: 'Combining the `FeaturesShifted` and `ClassShifted` data frames. The variables
    passed as parameters to `data.frame()` are `FeaturesShifted` and `ClassShifted`.
    The result is then stored in the `FeaturesClassData` data frame:'
  id: totrans-752
  prefs: []
  type: TYPE_NORMAL
  zh: 结合 `FeaturesShifted` 和 `ClassShifted` 数据框。传递给 `data.frame()` 的参数变量是 `FeaturesShifted`
    和 `ClassShifted`。结果随后存储在 `FeaturesClassData` 数据框中：
- en: '[PRE186]'
  id: totrans-753
  prefs: []
  type: TYPE_PRE
  zh: '[PRE186]'
- en: 'Exploring the summary of change in prices. The `summary()` function is used.
    The function provides a range of descriptive statistics to produce result summaries
    of the `FeaturesClassData` data frame:'
  id: totrans-754
  prefs: []
  type: TYPE_NORMAL
  zh: 探索价格变化的摘要。使用 `summary()` 函数。该函数提供一系列描述性统计量，以生成 `FeaturesClassData` 数据框的结果摘要：
- en: '[PRE187]'
  id: totrans-755
  prefs: []
  type: TYPE_PRE
  zh: '[PRE187]'
- en: 'The result is as follows:'
  id: totrans-756
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 4 - building the model](img/image_06_114.jpg)'
  id: totrans-757
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 4 - 构建模型](img/image_06_114.jpg)'
- en: 'Calculated indicators being removed:'
  id: totrans-758
  prefs: []
  type: TYPE_NORMAL
  zh: 计算指标正在被移除：
- en: '[PRE188]'
  id: totrans-759
  prefs: []
  type: TYPE_PRE
  zh: '[PRE188]'
- en: 'Naming the columns. The `c()` function is used to combine the arguments into
    vectors:'
  id: totrans-760
  prefs: []
  type: TYPE_NORMAL
  zh: 命名列。使用 `c()` 函数将参数组合成向量：
- en: '[PRE189]'
  id: totrans-761
  prefs: []
  type: TYPE_PRE
  zh: '[PRE189]'
- en: 'Exploring the internal structure of the `FinalModelData` data frame. The `str()`
    function displays the internal structure of the data frame. The `FinalModelData`
    is passed as an R object to the `str()` function:'
  id: totrans-762
  prefs: []
  type: TYPE_NORMAL
  zh: 探索 `FinalModelData` 数据框的内部结构。`str()` 函数显示数据框的内部结构。`FinalModelData` 作为 R 对象传递给
    `str()` 函数：
- en: '[PRE190]'
  id: totrans-763
  prefs: []
  type: TYPE_PRE
  zh: '[PRE190]'
- en: 'The result is as follows:'
  id: totrans-764
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 4 - building the model](img/image_06_115.jpg)'
  id: totrans-765
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 4 - 构建模型](img/image_06_115.jpg)'
- en: 'Setting initial random variables:'
  id: totrans-766
  prefs: []
  type: TYPE_NORMAL
  zh: 设置初始随机变量：
- en: '[PRE191]'
  id: totrans-767
  prefs: []
  type: TYPE_PRE
  zh: '[PRE191]'
- en: 'Evaluating the features (columns 1 to 9) using the class (column 9) to find
    the optimal number of features per tree. `FinalModelData[,-9]` indicates the data
    frame of predictor variables, and `FinalModelData[,9]` indicates the data frame
    of response variables. `ntreeTry=100` indicates the number of trees used at the
    tuning step. `stepFactor=1.5` indicates each iteration; `mtry` is inflated (or
    deflated) by this value, and `improve=0.01` means the (relative) improvement in
    out-of-bag error must be by this much for the search to continue. `trace=TRUE`
    indicates whether to print the progress of the search. `dobest=FALSE` means whether
    to run a forest using the optimal `mtry` found:'
  id: totrans-768
  prefs: []
  type: TYPE_NORMAL
  zh: 使用类别（第 9 列）评估特征（第 1 至 9 列）以找到每棵树的最佳特征数量。"FinalModelData[,-9]" 表示预测变量数据框，"FinalModelData[,9]"
    表示响应变量数据框。"ntreeTry=100" 表示在调整步骤中使用的树的数量。"stepFactor=1.5" 表示每次迭代的值，"mtry" 通过这个值膨胀（或缩水），"improve=0.01"
    表示搜索必须继续的（相对）出袋误差的改善量。"trace=TRUE" 表示是否打印搜索的进度。"dobest=FALSE" 表示是否使用找到的最佳 "mtry"
    运行森林：
- en: '[PRE192]'
  id: totrans-769
  prefs: []
  type: TYPE_PRE
  zh: '[PRE192]'
- en: 'Using all the features to predict the class, with two features per tree. The
    `randomForest()` function is used. `data=FinalModelData` indicates the data frame
    containing the variables in the model. `mtry=2` indicates the number of variables
    randomly sampled as candidates at each split. `ntree=2000` indicates the number
    of trees to grow. `keep.forest=TRUE` indicates that the forest will be retained
    in the output object. `importance=TRUE` indicates the importance of predictors
    to be assessed:'
  id: totrans-770
  prefs: []
  type: TYPE_NORMAL
  zh: 使用所有特征进行分类预测，每棵树有两个特征。使用 "randomForest()" 函数。`data=FinalModelData` 表示包含模型中变量的数据框。"mtry=2"
    表示在每次分割中随机采样的变量作为候选者的数量。"ntree=2000" 表示要生长的树的数量。"keep.forest=TRUE" 表示森林将保留在输出对象中。"importance=TRUE"
    表示要评估预测变量的重要性：
- en: '[PRE193]'
  id: totrans-771
  prefs: []
  type: TYPE_PRE
  zh: '[PRE193]'
- en: 'The result is as follows:'
  id: totrans-772
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 4 - building the model](img/image_06_116.jpg)'
  id: totrans-773
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 4 - 构建模型](img/image_06_116.jpg)'
- en: 'Plotting the random forest:'
  id: totrans-774
  prefs: []
  type: TYPE_NORMAL
  zh: 绘制随机森林：
- en: '[PRE194]'
  id: totrans-775
  prefs: []
  type: TYPE_PRE
  zh: '[PRE194]'
- en: 'The result is as follows:'
  id: totrans-776
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 4 - building the model](img/image_06_117.jpg)'
  id: totrans-777
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 4 - 构建模型](img/image_06_117.jpg)'
- en: Support vector machine - currency trading strategy
  id: totrans-778
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 支持向量机 - 货币交易策略
- en: The forex market is an international trading market where the currencies of
    every country are sold and bought freely. The price of one currency determined
    only by market participants is driven by supply and demand. The trading is conducted
    through individual contracts. The standard contract size (also called a lot) is
    usually 100,000 units. This means that for every standard contract acquired, the
    control is of 100,000 units of the base currency. For this contract size, each
    pip (the smallest price increment) is worth $10\. Depending on the trading strategy
    of a trader, a position can be maintained for a very short time or for longer
    periods, even years. There are several tools that allow the trader to be able
    to understand and make decisions on the market, grouped basically under fundamental
    or technical analysis. Fundamental analysis takes into account the constant exchange
    of political and economic information. Technical analysis is based essentially
    on prices, time, and volume--the lowest and highest prices that a currency has
    reached, time of period, number of transactions performed, and so on. Technical
    analysis also assumes the repetitiveness of the market, which it most probably
    will perform again in the future as it has already performed in the past. It analyzes
    past quotes and predicts the prices to come based on statistical and mathematical
    calculations.
  id: totrans-779
  prefs: []
  type: TYPE_NORMAL
  zh: 外汇市场是一个国际交易市场，各国货币可以自由买卖。一种货币的价格仅由市场参与者决定，由供求关系驱动。交易通过个别合约进行。标准合约规模（也称为一手）通常是
    100,000 单位。这意味着，对于每份标准合约，控制的是 100,000 单位的基础货币。对于这个合约规模，每个点（最小的价格变动单位）价值 10 美元。根据交易者的交易策略，头寸可以维持非常短的时间，也可以维持更长的时间，甚至数年。有几个工具允许交易者理解和在市场上做出决策，这些工具基本上分为基本面分析或技术分析。基本面分析考虑了政治和经济信息的持续交换。技术分析基本上基于价格、时间和成交量——货币达到的最低和最高价格、时间段、交易次数等。技术分析还假设市场的重复性，它很可能在未来再次执行，就像它在过去已经执行的那样。它分析过去的报价，并根据统计和数学计算预测未来的价格。
- en: Getting ready
  id: totrans-780
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备中
- en: In order to perform Support Vector Machine, we will be using a dataset collected
    from the US Dollar and GB Pound dataset.
  id: totrans-781
  prefs: []
  type: TYPE_NORMAL
  zh: 为了执行支持向量机，我们将使用从美元和英镑数据集中收集的数据集。
- en: Step 1 - collecting and describing the data
  id: totrans-782
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 步骤 1 - 收集和描述数据
- en: 'The dataset titled `PoundDollar.csv` will be used. The dataset is in standard
    format. There are 5,257 rows of data and 6 variables. The numeric variables are
    as follows:'
  id: totrans-783
  prefs: []
  type: TYPE_NORMAL
  zh: 将使用标题为 `PoundDollar.csv` 的数据集。数据集是标准格式。有 5,257 行数据，6 个变量。数值变量如下：
- en: '`Date`'
  id: totrans-784
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`日期`'
- en: '`Open`'
  id: totrans-785
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`开盘价`'
- en: '`High`'
  id: totrans-786
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`最高价`'
- en: '`Low`'
  id: totrans-787
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`低`'
- en: '`Close`'
  id: totrans-788
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`收盘价`'
- en: '`Volume`'
  id: totrans-789
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`成交量`'
- en: How to do it...
  id: totrans-790
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Let's get into the details.
  id: totrans-791
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入了解细节。
- en: Step 2 - exploring the data
  id: totrans-792
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 步骤 2 - 探索数据
- en: 'The following packages need to be loaded as the first step to be carried out:'
  id: totrans-793
  prefs: []
  type: TYPE_NORMAL
  zh: 作为第一步需要加载以下包：
- en: '[PRE195]'
  id: totrans-794
  prefs: []
  type: TYPE_PRE
  zh: '[PRE195]'
- en: Note
  id: totrans-795
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Version info: Code for this page was tested in R version 3.3.0 (2016-05-03).'
  id: totrans-796
  prefs: []
  type: TYPE_NORMAL
  zh: 版本信息：本页代码在 R 版本 3.3.0（2016-05-03）中进行了测试。
- en: 'Each of the following libraries needs to be installed:'
  id: totrans-797
  prefs: []
  type: TYPE_NORMAL
  zh: 以下每个库都需要安装：
- en: '[PRE196]'
  id: totrans-798
  prefs: []
  type: TYPE_PRE
  zh: '[PRE196]'
- en: 'Let''s explore the data and understand the relationships between the variables.
    We''ll begin by importing the CSV data file named `PoundDollar.csv`. We will be
    saving the data to the `PoundDollar` data frame:'
  id: totrans-799
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们探索数据并了解变量之间的关系。我们将从导入名为 `PoundDollar.csv` 的 CSV 数据文件开始。我们将数据保存到 `PoundDollar`
    数据框中：
- en: '[PRE197]'
  id: totrans-800
  prefs: []
  type: TYPE_PRE
  zh: '[PRE197]'
- en: 'Printing the `PoundDollar` data frame. The `head()` function returns the first
    part of the `PoundDollar` data frame. The `PoundDollar` data frame is passed as
    an input parameter:'
  id: totrans-801
  prefs: []
  type: TYPE_NORMAL
  zh: 打印 `PoundDollar` 数据框。`head()` 函数返回 `PoundDollar` 数据框的前一部分。`PoundDollar` 数据框作为输入参数传递：
- en: '[PRE198]'
  id: totrans-802
  prefs: []
  type: TYPE_PRE
  zh: '[PRE198]'
- en: 'The result is as follows:'
  id: totrans-803
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 2 - exploring the data](img/image_06_118.jpg)'
  id: totrans-804
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 2 - 探索数据](img/image_06_118.jpg)'
- en: 'Exploring the internal structure of the `PoundDollar` data frame. The `str()`
    function displays the internal structure of the data frame. The `PoundDollar`
    is passed as an R object to the `str()` function:'
  id: totrans-805
  prefs: []
  type: TYPE_NORMAL
  zh: 探索 `PoundDollar` 数据框的内部结构。`str()` 函数显示数据框的内部结构。`PoundDollar` 作为 R 对象传递给 `str()`
    函数：
- en: '[PRE199]'
  id: totrans-806
  prefs: []
  type: TYPE_PRE
  zh: '[PRE199]'
- en: 'The result is as follows:'
  id: totrans-807
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 2 - exploring the data](img/image_06_119.jpg)'
  id: totrans-808
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 2 - 探索数据](img/image_06_119.jpg)'
- en: Step 3 - calculating the indicators
  id: totrans-809
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 步骤 3 - 计算指标
- en: 'The Relative Strength Index is calculated. It is a ratio of recent upward price
    movements to absolute price movement. The `RSI()` function is used to calculate
    the Relative Strength Index. The `PoundDollar` data frame is used as a price series.
    `n = 3` represents the number of the period for moving averages. The result is
    then stored in the `relativeStrengthIndex3` data frame:'
  id: totrans-810
  prefs: []
  type: TYPE_NORMAL
  zh: 计算相对强弱指数（RSI）。它是最近向上价格变动与绝对价格变动的比率。使用 `RSI()` 函数计算相对强弱指数。`PoundDollar` 数据框用作价格序列。`n
    = 3` 表示移动平均的周期数。结果存储在 `relativeStrengthIndex3` 数据框中：
- en: '[PRE200]'
  id: totrans-811
  prefs: []
  type: TYPE_PRE
  zh: '[PRE200]'
- en: 'Exploring the summary of change in prices. The `summary()` function is used.
    The function provides a range of descriptive statistics to produce result summaries
    of the `relativeStrengthIndex3` data frame:'
  id: totrans-812
  prefs: []
  type: TYPE_NORMAL
  zh: 探索价格变化的摘要。使用 `summary()` 函数。该函数提供了一系列描述性统计量，以生成 `relativeStrengthIndex3` 数据框的结果摘要：
- en: '[PRE201]'
  id: totrans-813
  prefs: []
  type: TYPE_PRE
  zh: '[PRE201]'
- en: 'The result is as follows:'
  id: totrans-814
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 3 - calculating the indicators](img/image_06_120.jpg)'
  id: totrans-815
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 3 - 计算指标](img/image_06_120.jpg)'
- en: 'Calculating **moving averages** (**MA**) of the `PoundDollar` series. `SMA`
    calculates the arithmetic mean of the series over the past set of observations.
    `n=50` indicates the number of periods to average over:'
  id: totrans-816
  prefs: []
  type: TYPE_NORMAL
  zh: 计算 `PoundDollar` 序列的 **移动平均**（**MA**）。`SMA` 计算过去一系列观察值的算术平均值。`n=50` 表示平均的周期数：
- en: '[PRE202]'
  id: totrans-817
  prefs: []
  type: TYPE_PRE
  zh: '[PRE202]'
- en: 'Printing the summary of the `SeriesMeanAvg50` data frame. The `summary()` function
    is a multipurpose function. `summary()` is a generic function, which provides
    a summary of the data related to the individual object or data frame. The `SeriesMeanAvg50`
    data frame is passed as an R object to the `summary()` function:'
  id: totrans-818
  prefs: []
  type: TYPE_NORMAL
  zh: 打印 `SeriesMeanAvg50` 数据框的摘要。`summary()` 函数是一个多功能函数。`summary()` 是一个通用函数，它提供了与单个对象或数据框相关的数据的摘要。`SeriesMeanAvg50`
    数据框作为 R 对象传递给 `summary()` 函数：
- en: '[PRE203]'
  id: totrans-819
  prefs: []
  type: TYPE_PRE
  zh: '[PRE203]'
- en: 'The result is as follows:'
  id: totrans-820
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 3 - calculating the indicators](img/image_06_121.jpg)'
  id: totrans-821
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 3 - 计算指标](img/image_06_121.jpg)'
- en: 'Describing the dataset. The `describe()` function provides the item analysis.
    `SeriesMeanAvg50` is passed as an input argument:'
  id: totrans-822
  prefs: []
  type: TYPE_NORMAL
  zh: 描述数据集。`describe()` 函数提供项目分析。`SeriesMeanAvg50` 作为输入参数传递：
- en: '[PRE204]'
  id: totrans-823
  prefs: []
  type: TYPE_PRE
  zh: '[PRE204]'
- en: 'The result is as follows:'
  id: totrans-824
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 3 - calculating the indicators](img/image_06_122.jpg)'
  id: totrans-825
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 3 - 计算指标](img/image_06_122.jpg)'
- en: 'Measuring the trend. Finding the difference between opening price and the 50-period
    simple moving average:'
  id: totrans-826
  prefs: []
  type: TYPE_NORMAL
  zh: 测量趋势。找出开盘价与 50 期简单移动平均价之间的差异：
- en: '[PRE205]'
  id: totrans-827
  prefs: []
  type: TYPE_PRE
  zh: '[PRE205]'
- en: 'Printing the summary of the `SeriesMeanAvg50` data frame. The `Trend` data
    frame is passed as an R object to the `summary()` function:'
  id: totrans-828
  prefs: []
  type: TYPE_NORMAL
  zh: 打印 `SeriesMeanAvg50` 数据框的摘要。`Trend` 数据框作为 R 对象传递给 `summary()` 函数：
- en: '[PRE206]'
  id: totrans-829
  prefs: []
  type: TYPE_PRE
  zh: '[PRE206]'
- en: 'The result is as follows:'
  id: totrans-830
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 3 - calculating the indicators](img/image_06_123.jpg)'
  id: totrans-831
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 3 - 计算指标](img/image_06_123.jpg)'
- en: 'Calculating the price difference between closing and opening prices. The result
    is stored in the data frame `PriceDiff`:'
  id: totrans-832
  prefs: []
  type: TYPE_NORMAL
  zh: 计算收盘价和开盘价之间的价格差异。结果存储在数据框 `PriceDiff` 中：
- en: '[PRE207]'
  id: totrans-833
  prefs: []
  type: TYPE_PRE
  zh: '[PRE207]'
- en: 'Printing the summary of the `PriceDiff` data frame. The `Trend` data frame
    is passed as an R object to the `summary()` function:'
  id: totrans-834
  prefs: []
  type: TYPE_NORMAL
  zh: 打印 `PriceDiff` 数据框的摘要。`Trend` 数据框作为 R 对象传递给 `summary()` 函数：
- en: '[PRE208]'
  id: totrans-835
  prefs: []
  type: TYPE_PRE
  zh: '[PRE208]'
- en: 'The result is as follows:'
  id: totrans-836
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 3 - calculating the indicators](img/image_06_124.jpg)'
  id: totrans-837
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 3 - 计算指标](img/image_06_124.jpg)'
- en: Step 4 - preparing variables to build datasets
  id: totrans-838
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 步骤 4 - 准备变量以构建数据集
- en: Creating a binary classification variable. The `ifelse()` function uses a test
    expression to return the value, which is itself a vector and is of the same length
    as the test expression. The vector returned has an element from `x` if the corresponding
    value of the test expression is `TRUE`, or from `y` if the corresponding value
    of the test expression is `FALSE`.
  id: totrans-839
  prefs: []
  type: TYPE_NORMAL
  zh: 创建二元分类变量。`ifelse()` 函数使用测试表达式返回值，该值本身是一个向量，其长度与测试表达式相同。如果测试表达式的对应值为 `TRUE`，则返回
    `x` 的元素；如果对应值为 `FALSE`，则返回 `y` 的元素。
- en: 'Here, `PriceChange>0` is the test function, which is to be tested in a logical
    mode. `UP` and `DOWN` perform the logical test. The result is then stored in the
    `binaryClassification` data frame:'
  id: totrans-840
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，`PriceChange>0` 是测试函数，需要在逻辑模式下进行测试。`UP` 和 `DOWN` 执行逻辑测试。结果随后存储在 `binaryClassification`
    数据框中：
- en: '[PRE209]'
  id: totrans-841
  prefs: []
  type: TYPE_PRE
  zh: '[PRE209]'
- en: 'Printing the summary of the `binaryClassification` data frame. The `Trend`
    data frame is passed as an R object to the `summary()` function:'
  id: totrans-842
  prefs: []
  type: TYPE_NORMAL
  zh: 打印 `binaryClassification` 数据框的摘要。`Trend` 数据框作为 R 对象传递给 `summary()` 函数：
- en: '[PRE210]'
  id: totrans-843
  prefs: []
  type: TYPE_PRE
  zh: '[PRE210]'
- en: 'The result is as follows:'
  id: totrans-844
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 4 - preparing variables to build datasets](img/image_06_125.jpg)'
  id: totrans-845
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 4 - 准备变量以构建数据集](img/image_06_125.jpg)'
- en: 'Combining the relative `StrengthIndex3`, `Trend`, and `binaryClassification`
    data frames. The variables passed as parameters to `data.frame()` are `relativeStrengthIndex3`,
    `Trend`, and `binaryClassification`. The result is then stored in the `DataSet` data
    frame:'
  id: totrans-846
  prefs: []
  type: TYPE_NORMAL
  zh: 结合相对 `StrengthIndex3`、`Trend` 和 `binaryClassification` 数据框。传递给 `data.frame()`
    的参数是 `relativeStrengthIndex3`、`Trend` 和 `binaryClassification`。结果存储在 `DataSet`
    数据框中：
- en: '[PRE211]'
  id: totrans-847
  prefs: []
  type: TYPE_PRE
  zh: '[PRE211]'
- en: 'Printing the summary of the `DataSet` data frame. The `Trend` data frame is
    passed as an R object to the `summary()` function:'
  id: totrans-848
  prefs: []
  type: TYPE_NORMAL
  zh: 打印 `DataSet` 数据框的摘要。`Trend` 数据框作为 R 对象传递给 `summary()` 函数：
- en: '[PRE212]'
  id: totrans-849
  prefs: []
  type: TYPE_PRE
  zh: '[PRE212]'
- en: 'The result is as follows:'
  id: totrans-850
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 4 - preparing variables to build datasets](img/image_06_126.jpg)'
  id: totrans-851
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 4 - 准备变量以构建数据集](img/image_06_126.jpg)'
- en: 'Exploring the internal structure of the `DataSet` data frame. The `str()` function
    displays the internal structure of the data frame. The `DataSet` is passed as
    an R object to the `str()` function:'
  id: totrans-852
  prefs: []
  type: TYPE_NORMAL
  zh: 探索 `DataSet` 数据框的内部结构。`str()` 函数显示数据框的内部结构。`DataSet` 作为 R 对象传递给 `str()` 函数：
- en: '[PRE213]'
  id: totrans-853
  prefs: []
  type: TYPE_PRE
  zh: '[PRE213]'
- en: 'The result is as follows:'
  id: totrans-854
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 4 - preparing variables to build datasets](img/image_06_127.jpg)'
  id: totrans-855
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 4 - 准备变量以构建数据集](img/image_06_127.jpg)'
- en: 'Calculating the indicators, creating a dataset, and removing the points:'
  id: totrans-856
  prefs: []
  type: TYPE_NORMAL
  zh: 计算指标、创建数据集和删除点：
- en: '[PRE214]'
  id: totrans-857
  prefs: []
  type: TYPE_PRE
  zh: '[PRE214]'
- en: 'Exploring the dimensions of the `DataSet` data frame. The `dim()` function
    returns the dimensions of the `DataSet` frame. The `DataSet` data frame is passed
    as an input parameter. The result clearly states that there are 5,208 rows of
    data and 3 columns:'
  id: totrans-858
  prefs: []
  type: TYPE_NORMAL
  zh: 探索 `DataSet` 数据框的维度。`dim()` 函数返回 `DataSet` 框的维度。`DataSet` 数据框作为输入参数传递。结果清楚地表明有
    5,208 行数据和 3 列：
- en: '[PRE215]'
  id: totrans-859
  prefs: []
  type: TYPE_PRE
  zh: '[PRE215]'
- en: 'The result is as follows:'
  id: totrans-860
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 4 - preparing variables to build datasets](img/image_06_128.jpg)'
  id: totrans-861
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 4 - 准备变量以构建数据集](img/image_06_128.jpg)'
- en: 'Separating the training dataset:'
  id: totrans-862
  prefs: []
  type: TYPE_NORMAL
  zh: 分离训练数据集：
- en: '[PRE216]'
  id: totrans-863
  prefs: []
  type: TYPE_PRE
  zh: '[PRE216]'
- en: 'Exploring the dimensions of the `TrainingDataSet` data frame. The `dim()` function
    returns the dimensions of the `TrainingDataSet` frame. The `TrainingDataSet` data
    frame is passed as an input parameter. The result clearly states that there are
    4,528 rows of data and 3 columns:'
  id: totrans-864
  prefs: []
  type: TYPE_NORMAL
  zh: 探索 `TrainingDataSet` 数据框的维度。`dim()` 函数返回 `TrainingDataSet` 框的维度。`TrainingDataSet`
    数据框作为输入参数传递。结果清楚地表明有 4,528 行数据和 3 列：
- en: '[PRE217]'
  id: totrans-865
  prefs: []
  type: TYPE_PRE
  zh: '[PRE217]'
- en: 'The result is as follows:'
  id: totrans-866
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 4 - preparing variables to build datasets](img/image_06_129.jpg)'
  id: totrans-867
  prefs: []
  type: TYPE_IMG
- en: 'Printing the summary of the `TrainingDataSet` data frame. The `TrainingDataSet`
    data frame is passed as an R object to the `summary()` function:'
  id: totrans-868
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE218]'
  id: totrans-869
  prefs: []
  type: TYPE_PRE
  zh: '[PRE218]'
- en: 'The result is as follows:'
  id: totrans-870
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 4 - preparing variables to build datasets](img/image_06_130.jpg)'
  id: totrans-871
  prefs: []
  type: TYPE_IMG
- en: 'Separating the testing dataset:'
  id: totrans-872
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE219]'
  id: totrans-873
  prefs: []
  type: TYPE_PRE
  zh: '[PRE219]'
- en: 'Exploring the dimensions of the `TestDataSet` data frame. The `dim()` function
    returns the dimensions of the `TestDataSet` frame. The `TestDataSet` data frame
    is passed as an input parameter. The result clearly states that there are 1,510
    rows of data and 3 columns:'
  id: totrans-874
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE220]'
  id: totrans-875
  prefs: []
  type: TYPE_PRE
  zh: '[PRE220]'
- en: '![Step 4 - preparing variables to build datasets](img/image_06_131.jpg)'
  id: totrans-876
  prefs: []
  type: TYPE_IMG
- en: 'Printing the summary of the `TestDataSet` data frame. The `TestDataSet` data
    frame is passed as an R object to the `summary()` function:'
  id: totrans-877
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE221]'
  id: totrans-878
  prefs: []
  type: TYPE_PRE
  zh: '[PRE221]'
- en: 'The result is as follows:'
  id: totrans-879
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 4 - preparing variables to build datasets](img/image_06_132.jpg)'
  id: totrans-880
  prefs: []
  type: TYPE_IMG
- en: Step 5 - building the model
  id: totrans-881
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Building support vector machines using the `svm()` function. `binaryClassification~relativeStrengthIndex3+Trend`
    is used as the formula. `data=TrainingDataSet` is used as a data frame which contains
    the variables of the model. `kernel="radial"` means that the radial basis kernel
    function is used in training and predicting. `cost=1` indicates the cost of constraints
    violation. `gamma=1/2` indicates the parameter needed for all kernel functions
    except linear:'
  id: totrans-882
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE222]'
  id: totrans-883
  prefs: []
  type: TYPE_PRE
  zh: '[PRE222]'
- en: 'Printing the summary of the `SVM` data frame. The `SVM` data frame is passed
    as an R object to the `summary()` function:'
  id: totrans-884
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE223]'
  id: totrans-885
  prefs: []
  type: TYPE_PRE
  zh: '[PRE223]'
- en: 'The result is as follows:'
  id: totrans-886
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 5 - building the model](img/image_06_133.jpg)'
  id: totrans-887
  prefs: []
  type: TYPE_IMG
- en: 'In order to predict the value based on the model object, we will use the `predict()`
    function. `SVM` is passed as an object. The `TrainingDataSet` data object is passed
    as an object in which to look for variables with which to predict:'
  id: totrans-888
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE224]'
  id: totrans-889
  prefs: []
  type: TYPE_PRE
  zh: '[PRE224]'
- en: 'Printing the summary of the `TrainingPredictions` data frame. The `SVM` data
    frame is passed as an R object to the `summary()` function:'
  id: totrans-890
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE225]'
  id: totrans-891
  prefs: []
  type: TYPE_PRE
  zh: '[PRE225]'
- en: 'The result is as follows:'
  id: totrans-892
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 5 - building the model](img/image_06_134.jpg)'
  id: totrans-893
  prefs: []
  type: TYPE_IMG
- en: 'Describing the dataset. The `describe()` function provides item analysis. `TrainingPredictions`
    is passed as an input argument:'
  id: totrans-894
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE226]'
  id: totrans-895
  prefs: []
  type: TYPE_PRE
  zh: '[PRE226]'
- en: 'The result is as follows:'
  id: totrans-896
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 5 - building the model](img/image_06_135.jpg)'
  id: totrans-897
  prefs: []
  type: TYPE_IMG
- en: 'Combining the `TrainingDataSet` and `TrainingPredictions` data frames. The
    variables passed as parameters to `data.frame()` are `TrainingDataSet` and `TrainingPredictions`.
    The result is then stored in the `TrainingDatadata` frame:'
  id: totrans-898
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE227]'
  id: totrans-899
  prefs: []
  type: TYPE_PRE
  zh: '[PRE227]'
- en: 'Printing the summary of the `TrainingData` data frame. The `TrainingData` data
    frame is passed as an R object to the `summary()` function:'
  id: totrans-900
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE228]'
  id: totrans-901
  prefs: []
  type: TYPE_PRE
  zh: '[PRE228]'
- en: 'The result is as follows:'
  id: totrans-902
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 5 - building the model](img/image_06_136.jpg)'
  id: totrans-903
  prefs: []
  type: TYPE_IMG
- en: 'Printing the `TrainingData`:'
  id: totrans-904
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE229]'
  id: totrans-905
  prefs: []
  type: TYPE_PRE
  zh: '[PRE229]'
- en: 'The result is as follows:'
  id: totrans-906
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 5 - building the model](img/image_06_137.jpg)'
  id: totrans-907
  prefs: []
  type: TYPE_IMG
- en: Stochastic gradient descent - adult income
  id: totrans-908
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Stochastic gradient descent** also known as **incremental** gradient descent,
    is a stochastic approximation of the gradient descent optimization method for
    minimizing an objective function that is written as a sum of differentiable functions.
    It tries to find minima or maxima by iteration. In stochastic gradient descent,
    the true gradient of *Q(w)* is approximated by a gradient at a single example:'
  id: totrans-909
  prefs: []
  type: TYPE_NORMAL
- en: '![Stochastic gradient descent - adult income](img/B04714_06_new.jpg)'
  id: totrans-910
  prefs: []
  type: TYPE_IMG
- en: As the algorithm sweeps through the training set, it performs the above update
    for each training example. Several passes can be made over the training set until
    the algorithm converges. If this is done, the data can be shuffled for each pass
    to prevent cycles. Typical implementations may use an adaptive learning rate so
    that the algorithm converges.
  id: totrans-911
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-912
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to perform stochastic gradient descent, we will be using a dataset
    collected from census data to predict income.
  id: totrans-913
  prefs: []
  type: TYPE_NORMAL
- en: Step 1 - collecting and describing the data
  id: totrans-914
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The dataset titled `adult.txt` will be used. The dataset is in standard format.
    There are 32,561 rows of data and 15 variables. The numeric variables are as follows:'
  id: totrans-915
  prefs: []
  type: TYPE_NORMAL
- en: '`age`'
  id: totrans-916
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fnlwgt`'
  id: totrans-917
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`education-num`'
  id: totrans-918
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`capital-gain`'
  id: totrans-919
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`capital-loss`'
  id: totrans-920
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`hours-per-week`'
  id: totrans-921
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The non-numeric variables are as follows:'
  id: totrans-922
  prefs: []
  type: TYPE_NORMAL
- en: '`workclass`'
  id: totrans-923
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`education`'
  id: totrans-924
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`marital-status`'
  id: totrans-925
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`occupation`'
  id: totrans-926
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`relationship`'
  id: totrans-927
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`race`'
  id: totrans-928
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sex`'
  id: totrans-929
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`native-country`'
  id: totrans-930
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`incomerange`'
  id: totrans-931
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-932
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's get into the details.
  id: totrans-933
  prefs: []
  type: TYPE_NORMAL
- en: Step 2 - exploring the data
  id: totrans-934
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Each of the following libraries is required to be installed:'
  id: totrans-935
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE230]'
  id: totrans-936
  prefs: []
  type: TYPE_PRE
  zh: '[PRE230]'
- en: Note
  id: totrans-937
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Version info: Code for this page was tested in R version 3.3.0 (2016-05-03).'
  id: totrans-938
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s explore the data and understand the relationships between the variables.
    We''ll begin by importing the TXT data file named `adult.txt`. We will be saving
    the data to the labels data frame:'
  id: totrans-939
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE231]'
  id: totrans-940
  prefs: []
  type: TYPE_PRE
  zh: '[PRE231]'
- en: 'Exploring the internal structure of the `allData` data frame. The `str()` function
    displays the internal structure of the data frame. `allData` is passed as an R
    object to the `str()` function:'
  id: totrans-941
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE232]'
  id: totrans-942
  prefs: []
  type: TYPE_PRE
  zh: '[PRE232]'
- en: 'The result is as follows:'
  id: totrans-943
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 2 - exploring the data](img/image_06_138.jpg)'
  id: totrans-944
  prefs: []
  type: TYPE_IMG
- en: Step 3 - preparing the data
  id: totrans-945
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Grabbing the labels from the main file. The `as.factor()` function is used
    to encode the `allData[,15]` vector as a factor. This is to ensure format compatibility.
    The result is then stored in the `labels` data frame:'
  id: totrans-946
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE233]'
  id: totrans-947
  prefs: []
  type: TYPE_PRE
  zh: '[PRE233]'
- en: 'Grabbing all the features of the data after removing the labels. The result
    is stored in the `allFeatures` data frame:'
  id: totrans-948
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE234]'
  id: totrans-949
  prefs: []
  type: TYPE_PRE
  zh: '[PRE234]'
- en: 'Printing the `allFeatures` data frame. The `head()` function returns the first
    part of the `allFeatures` data frame. The `allFeatures` data frame is passed as
    an input parameter:'
  id: totrans-950
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE235]'
  id: totrans-951
  prefs: []
  type: TYPE_PRE
  zh: '[PRE235]'
- en: 'The result is as follows:'
  id: totrans-952
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 3 - preparing the data](img/image_06_139.jpg)'
  id: totrans-953
  prefs: []
  type: TYPE_IMG
- en: 'Normalizing the features. The mean and scale are converted to `z` scores so
    that the `variance = 1`. `scale()` function''s default method centers and/or scales
    the columns of a numeric matrix. `continuousFeatures` is the numeric matrix. The
    result is then stored in the `continuousFeatures` data frame:'
  id: totrans-954
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE236]'
  id: totrans-955
  prefs: []
  type: TYPE_PRE
  zh: '[PRE236]'
- en: 'Printing the `continuousFeatures` data frame. The `head()` function returns
    the first part of the `continuousFeatures` data frame. The `continuousFeatures`
    data frame is passed as an input parameter:'
  id: totrans-956
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE237]'
  id: totrans-957
  prefs: []
  type: TYPE_PRE
  zh: '[PRE237]'
- en: 'The result is as follows:'
  id: totrans-958
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 3 - preparing the data](img/image_06_140.jpg)'
  id: totrans-959
  prefs: []
  type: TYPE_IMG
- en: 'Converting labels into a `1` or `-1`. The `rep()` function is used to replicate
    values. The result is then stored in the `labels.n` data frame:'
  id: totrans-960
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE238]'
  id: totrans-961
  prefs: []
  type: TYPE_PRE
  zh: '[PRE238]'
- en: 'Separating training datasets. The `createDataPartition()` function creates
    a set of training data partitions. `y=labels` indicates the vector for outcomes.
    `p=.8` means 80% of the data is used for training datasets:'
  id: totrans-962
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE239]'
  id: totrans-963
  prefs: []
  type: TYPE_PRE
  zh: '[PRE239]'
- en: 'Exploring the dimensions of the `trainingData` data frame. The `dim()` function
    returns the dimensions of the `trainingData` frame. The `trainingData` data frame
    is passed as an input parameter. The result clearly states that there are 26,049
    rows of data and a single column:'
  id: totrans-964
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE240]'
  id: totrans-965
  prefs: []
  type: TYPE_PRE
  zh: '[PRE240]'
- en: 'The result is as follows:'
  id: totrans-966
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 3 - preparing the data](img/image_06_141.jpg)'
  id: totrans-967
  prefs: []
  type: TYPE_IMG
- en: 'Creating training features and training labels of the `trainingData` data frame:'
  id: totrans-968
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE241]'
  id: totrans-969
  prefs: []
  type: TYPE_PRE
  zh: '[PRE241]'
- en: 'Figuring out the remaining 20% of data for testing and validation:'
  id: totrans-970
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE242]'
  id: totrans-971
  prefs: []
  type: TYPE_PRE
  zh: '[PRE242]'
- en: Creating the testing features and testing labels of the `trainingData` data
    frame. Of the 20% data, 50% of that data is used for testing purposes, while the
    remaining 50% is used for validation purposes.
  id: totrans-972
  prefs: []
  type: TYPE_NORMAL
- en: 'The `createDataPartition()` function creates a set of training data partitions.
    `y= remainingLabels` indicates the vector for outcomes. `p=.5` means 50% of the
    data is used for training datasets. The result is then stored in the `testingData` data
    frame:'
  id: totrans-973
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE243]'
  id: totrans-974
  prefs: []
  type: TYPE_PRE
  zh: '[PRE243]'
- en: 'Creating validation features and testing labels of the `testingData` data frame:'
  id: totrans-975
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE244]'
  id: totrans-976
  prefs: []
  type: TYPE_PRE
  zh: '[PRE244]'
- en: 'Defining the accuracy measure required:'
  id: totrans-977
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE245]'
  id: totrans-978
  prefs: []
  type: TYPE_PRE
  zh: '[PRE245]'
- en: Step 4 - building the model
  id: totrans-979
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Setting up the initial parameters:'
  id: totrans-980
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE246]'
  id: totrans-981
  prefs: []
  type: TYPE_PRE
  zh: '[PRE246]'
- en: 'Combining a set of arguments. The result is stored in the `lambda_vals` data
    frame:'
  id: totrans-982
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE247]'
  id: totrans-983
  prefs: []
  type: TYPE_PRE
  zh: '[PRE247]'
- en: 'Exploring the internal structure of the `lambda_vals` data frame. The `str()`
    function displays the internal structure of the data frame. The `lambda_vals`
    is passed as an R object to the `str()` function:'
  id: totrans-984
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE248]'
  id: totrans-985
  prefs: []
  type: TYPE_PRE
  zh: '[PRE248]'
- en: 'The result is as follows:'
  id: totrans-986
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 4 - building the model](img/image_06_142.jpg)'
  id: totrans-987
  prefs: []
  type: TYPE_IMG
- en: 'Creating a matrix for each epoch from a given set of values. The `matrix()`
    function is used. `nrow = (numStepsPerEpoch/nStepsPerPlot)*numEpochs+1` denotes
    the number of rows of the matrix, and `ncol = length(lambda_vals)` denotes the
    number of columns of the matrix:'
  id: totrans-988
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE249]'
  id: totrans-989
  prefs: []
  type: TYPE_PRE
  zh: '[PRE249]'
- en: 'Creating a matrix for accuracy on a validation set from a given set of values.
    The `matrix()` function is used. `nrow = (numStepsPerEpoch/nStepsPerPlot)*numEpochs+1`
    denotes the number of rows of the matrix, and `ncol = length(lambda_vals)` denotes
    the number of columns of the matrix:'
  id: totrans-990
  prefs: []
  type: TYPE_NORMAL
  zh: 从给定的一组值中创建用于验证集准确性的矩阵。`matrix()` 函数被使用。`nrow = (numStepsPerEpoch/nStepsPerPlot)*numEpochs+1`
    表示矩阵的行数，而 `ncol = length(lambda_vals)` 表示矩阵的列数：
- en: '[PRE250]'
  id: totrans-991
  prefs: []
  type: TYPE_PRE
  zh: '[PRE250]'
- en: 'Setting up the classifier model:'
  id: totrans-992
  prefs: []
  type: TYPE_NORMAL
  zh: 设置分类器模型：
- en: '[PRE251]'
  id: totrans-993
  prefs: []
  type: TYPE_PRE
  zh: '[PRE251]'
- en: 'The `#createDataPartition()` function creates a set of training data partitions.
    `y= trainingLabels` indicates the vector for outcomes. `p = (1 - evalidationSetSize/length(trainingLabels))` %
    of data is used for training datasets. The result is then stored in the `etrainingData` data
    frame:'
  id: totrans-994
  prefs: []
  type: TYPE_NORMAL
  zh: '`#createDataPartition()` 函数创建一组训练数据分区。`y= trainingLabels` 表示结果向量。`p = (1 -
    evalidationSetSize/length(trainingLabels))` 百分比的数据用于训练数据集。结果存储在 `etrainingData`
    数据框中：'
- en: '[PRE252]'
  id: totrans-995
  prefs: []
  type: TYPE_PRE
  zh: '[PRE252]'
- en: 'Logging in the accuracy. `getAccuracy()` is called:'
  id: totrans-996
  prefs: []
  type: TYPE_NORMAL
  zh: 记录准确性。调用 `getAccuracy()`：
- en: '[PRE253]'
  id: totrans-997
  prefs: []
  type: TYPE_PRE
  zh: '[PRE253]'
- en: 'Calculating the accuracy of the model. `getAccuracy()`, as defined previously,
    is used:'
  id: totrans-998
  prefs: []
  type: TYPE_NORMAL
  zh: 计算模型的准确性。使用先前定义的 `getAccuracy()`：
- en: '[PRE254]'
  id: totrans-999
  prefs: []
  type: TYPE_PRE
  zh: '[PRE254]'
- en: Step 5 - plotting the model
  id: totrans-1000
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 步骤 5 - 绘制模型
- en: 'Plotting the accuracy of the model during training. The `c()` function is used
    to combine the arguments into vectors:'
  id: totrans-1001
  prefs: []
  type: TYPE_NORMAL
  zh: 绘制训练过程中模型的准确性。使用 `c()` 函数将参数组合成向量：
- en: '[PRE255]'
  id: totrans-1002
  prefs: []
  type: TYPE_PRE
  zh: '[PRE255]'
- en: 'Setting the vectors to be used in the graph:'
  id: totrans-1003
  prefs: []
  type: TYPE_NORMAL
  zh: 设置用于图表的向量：
- en: '[PRE256]'
  id: totrans-1004
  prefs: []
  type: TYPE_PRE
  zh: '[PRE256]'
- en: 'Creating a generic vector. `list()` is called, which concatenates the `accMat`
    and `accMatv` data frames:'
  id: totrans-1005
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个通用向量。调用 `list()`，它将 `accMat` 和 `accMatv` 数据框连接起来：
- en: '[PRE257]'
  id: totrans-1006
  prefs: []
  type: TYPE_PRE
  zh: '[PRE257]'
- en: 'Plotting the graph:'
  id: totrans-1007
  prefs: []
  type: TYPE_NORMAL
  zh: 绘制图表：
- en: '[PRE258]'
  id: totrans-1008
  prefs: []
  type: TYPE_PRE
  zh: '[PRE258]'
- en: 'The `# plot()` function is a generic function for plotting R objects. The `stepValues`
    data frame is passed as a function value:'
  id: totrans-1009
  prefs: []
  type: TYPE_NORMAL
  zh: '`# plot()` 函数是一个用于绘制 R 对象的通用函数。将 `stepValues` 数据框作为函数值传递：'
- en: '[PRE259]'
  id: totrans-1010
  prefs: []
  type: TYPE_PRE
  zh: '[PRE259]'
- en: 'The resulting graph will look like the following:'
  id: totrans-1011
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的图表将如下所示：
- en: '![Step 5 - plotting the model](img/image_06_143.jpg)'
  id: totrans-1012
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 5 - 绘制模型](img/image_06_143.jpg)'
