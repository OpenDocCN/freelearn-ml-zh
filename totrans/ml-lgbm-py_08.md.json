["```py\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import LinearRegression\npipeline = Pipeline(\n    [\n        ('scaler', StandardScaler()),\n        ('linear', LinearRegression())\n    ]\n)\n```", "```py\npipeline.fit(X_train, y_train)\npipeline.predict(X_train, y_train)\n```", "```py\nimport joblib\njoblib.dump(pipeline, \"linear_pipeline.pkl\")\n```", "```py\ndf = pd.DataFrame({\n    \"price\": [29.99, 99.99, 19.99],\n    \"description\": [\"Luxury goods\", \"Outdoor goods\",\n        \"Sports equipment\"],\n})\nct = ColumnTransformer(\n    [(\"scaling\", MinMaxScaler(), [\"price\"]),\n     (\"vectorize\", TfidfVectorizer(), \"description\")])\ntransformed = ct.fit_transform(df)\n```", "```py\nid_transformer = (\n    \"customer_id\",\n    CustomerIdTransformer(id_columns),\n    id_columns\n)\nencode_transformer = (\n    \"encoder\",\n    OneHotEncoder(sparse_output=False),\n    categorical_features\n)\n```", "```py\npreprocessor = ColumnTransformer(\n    transformers=[\n        id_transformer,\n        encode_transformer,\n    ],\n    remainder='passthrough'\n)\n```", "```py\nclass CustomerIdTransformer(BaseEstimator, TransformerMixin):\n    def __init__(self, id_columns):\n        self.id_columns = id_columns\n    def fit(self, X, y=None):\n        return self\n    def transform(self, X, y=None):\n        return X.drop(columns=self.id_columns, axis=1)\n```", "```py\nautoml_settings = {\n    \"time_budget\": 120,\n    \"metric\": \"accuracy\",\n    \"task\": \"classification\",\n    \"estimator_list\": [\"lgbm\", \"rf\"],\n    \"custom_hp\": {\n        \"n_estimators\": {\n            \"domain\": flaml.tune.uniform(20, 500)\n        }\n    },\n    \"verbose\": -1\n}\n```", "```py\npipeline_settings = {\n    f\"automl__{key}\": value for key, value in\n        automl_settings.items()\n}\n```", "```py\nautoml = flaml.AutoML()\npipeline = Pipeline(\n    steps=[(\"preprocessor\", preprocessor),\n           (\"automl\", automl)]\n)\n```", "```py\npipeline.fit(X, y, **pipeline_settings)\n```", "```py\nprint(f\"F1: {f1_score(pipeline.predict(X), y,\n    pos_label='Yes')}\")\n```", "```py\njoblib.dump(pipeline, \"churn_pipeline.pkl\")\n```", "```py\napp = FastAPI()\nmodel = joblib.load(\"churn_pipeline.pkl\")\n```", "```py\n[\n  {\n    \"customerID\": \"1580-BMCMR\",\n    ...\n    \"MonthlyCharges\": 87.3,\n    \"TotalCharges\": \"1637.3\"\n  },\n  {\n    \"customerID\": \"4304-XUMGI\",\n    ...\n    \"MonthlyCharges\": 75.15,\n    \"TotalCharges\": \"3822.45\"\n  }\n]\n```", "```py\n@app.post('/predict')\ndef predict_instances(\n        instances: list[dict[str, str]]\n):\n```", "```py\ninstance_frame = pd.DataFrame(instances)\npredictions = model.predict_proba(instance_frame)\n```", "```py\nresults = {}\nfor i, row in enumerate(predictions):\n    prediction = model.classes_[np.argmax(row)]\n    probability = np.amax(row)\n    results[i] = {\"prediction\": prediction,\n        \"probability\": probability}\nreturn results\n```", "```py\n{\n  \"0\": {\n    \"prediction\": \"Yes\",\n    \"probability\": 0.9758797243307111\n  },\n  \"1\": {\n    \"prediction\": \"No\",\n    \"probability\": 0.8896770039274629\n  },\n  \"2\": {\n    \"prediction\": \"No\",\n    \"probability\": 0.9149225087944103\n  }\n}\n```", "```py\nsecurity = HTTPBasic()\nUSER = bytes(os.getenv(\"CHURN_USER\"), \"utf-8\")\nPASSWORD = bytes(os.getenv(\"CHURN_PASSWORD\"), \"utf-8\")\n```", "```py\n@app.post('/predict')\ndef predict_instances(\n        credentials: Annotated[HTTPBasicCredentials,\n            Depends(security)],\n        instances: list[dict[str, str]]\n):\n    authenticate(credentials.username.encode(\"utf-8\"),\n        credentials.password.encode(\"utf-8\"))\n```", "```py\ndef authenticate(username: bytes, password: bytes):\n    valid_user = secrets.compare_digest(\n        username, USER\n    )\n    valid_password = secrets.compare_digest(\n        password, PASSWORD\n    )\n    if not (valid_user and valid_password):\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Basic\"},\n        )\n    return username\n```", "```py\nFROM python:3.10-slim\nRUN apt-get update && apt-get install -y --no-install-recommends apt-utils\nRUN apt-get -y install curl\nRUN apt-get install libgomp1\nWORKDIR /usr/src/app\nCOPY requirements.txt ./\nRUN pip install --no-cache-dir -r requirements.txt\nCOPY . .\nCMD [ \"uvicorn\", \"telco_churn_api:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8080\" ]\n```", "```py\ndocker build . -t churn_api:latest\ndocker run --rm -it -e CHURN_USER=***** -e CHURN_PASSWORD=*********** -p 8080:8080 churn_api:latest\n```", "```py\ngcloud run deploy --set-env-vars CHURN_USER=*****,CHURN_PASSWORD=***********\n```"]