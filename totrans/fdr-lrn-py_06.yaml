- en: '6'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '6'
- en: Running the Federated Learning System and Analyzing the Results
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行联邦学习系统并分析结果
- en: In this chapter, you will run the **federated learning** (**FL**) system that
    has been discussed in previous chapters and analyze the system behaviors and the
    outcomes of the aggregated models. We will start by explaining the configuration
    of the FL system components in order to run the systems properly. Basically, after
    installing the simple FL system provided by our GitHub sample, you first need
    to pick up the server machines or instances to run the database and aggregator
    modules. Then, you can run agents to connect to the aggregator that is already
    running. The IP address of the aggregator needs to be correctly set up in each
    agent-side configuration. Also, there is a simulation mode so that you can run
    all the components on the same machine or laptop to just test the functionality
    of the FL system. After successfully running all the modules of the FL system,
    you will be able to see the data folder and a database created under the path
    that you set up in the database server as well as on the agent side. You will
    be able to check both the local and global models, trained and aggregated, so
    that you can download the recent or best-performing models from the data folders.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将运行在前几章中讨论过的**联邦学习**（**FL**）系统，并分析系统行为和聚合模型的输出结果。我们将首先解释FL系统组件的配置，以便正确运行系统。基本上，在安装我们GitHub示例提供的简单FL系统之后，你首先需要选择运行数据库和聚合模块的服务器机器或实例。然后，你可以运行代理程序连接到已经运行的聚合器。每个代理端配置中都需要正确设置聚合器的IP地址。此外，还有一个模拟模式，这样你可以在同一台机器或笔记本电脑上运行所有组件，仅测试FL系统的功能。在成功运行FL系统的所有模块后，你将能够看到在数据库服务器和代理端设置的路径下创建的数据文件夹和数据库。你将能够检查本地和全局模型，包括训练和聚合的模型，以便你可以从数据文件夹中下载最新的或表现最佳的模型。
- en: In addition, you can also see examples of running the FL system on a minimal
    engine and image classification. By reviewing the outcomes of the generated models
    and the performance data, you can understand the aggregation algorithms as well
    as the actual interaction of the models between an aggregator and agents.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，你还可以看到在最小引擎和图像分类上运行FL系统的示例。通过审查生成的模型和性能数据，你可以理解聚合算法以及聚合器和代理之间模型的实际交互。
- en: 'In this chapter, we will cover the following main topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要主题：
- en: Configuring and running the FL system
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置和运行FL系统
- en: Understanding what happens when the minimal example runs
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解最小示例运行时会发生什么
- en: Running image classification and analyzing the results
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行图像分类和分析结果
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: All the code files introduced in this chapter can be found on GitHub (https://github.com/tie-set/simple-fl).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中介绍的所有代码文件都可以在GitHub上找到（https://github.com/tie-set/simple-fl）。
- en: Important note
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 重要注意事项
- en: You can use the code files for personal or educational purposes. Please note
    that we will not support deployments for commercial use and will not be responsible
    for any errors, issues, or damages caused by using the code.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用代码文件用于个人或教育目的。请注意，我们不会支持商业部署，也不会对使用代码造成的任何错误、问题或损害负责。
- en: Configuring and running the FL system
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置和运行FL系统
- en: Configuring the FL system and installing its environment are simple enough to
    do. Follow the instructions in the next subsections.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 配置FL系统及其环境相对简单，请遵循下一小节中的说明。
- en: Installing the FL environment
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装FL环境
- en: 'First, to run the FL system discussed in the previous chapter, clone the following
    repository to the machines that you want to run FL on using the following command:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，要运行前一章中讨论的FL系统，请使用以下命令将以下存储库克隆到你想要运行FL的机器上：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Once done with the cloning process, change the directory to the `simple-fl`
    folder in the command line. The simulation run can be carried out using just one
    machine or using multiple systems. In order to run the FL process on one or multiple
    machines that include the FL server (aggregator), FL client (agent), and database
    server, you should create a `conda` virtual environment and activate it.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦完成克隆过程，请在命令行中将目录更改为`simple-fl`文件夹。模拟运行可以使用一台机器或使用多个系统进行。为了在一台或多台机器上运行FL过程，这些机器包括FL服务器（聚合器）、FL客户端（代理）和数据库服务器，你应该创建一个`conda`虚拟环境并激活它。
- en: 'To create a `conda` environment in macOS, you will need to type the following
    command:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 要在macOS中创建`conda`环境，你需要输入以下命令：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'If you’re using a Linux machine, you can create the `conda` environment by
    using the following command:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是Linux机器，你可以使用以下命令创建`conda`环境：
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Then, activate the `conda` environment `federatedenv` when you run the code.
    For your information, the `federatedenv.yaml` and `federatedenv_linux.yaml` files
    can be found in the `setups` folder of the `simple-fl` GitHub repository and include
    the libraries that are used in the code examples throughout this book.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在运行代码时激活`conda`环境`federatedenv`。为了你的信息，`federatedenv.yaml`和`federatedenv_linux.yaml`文件可以在`simple-fl`
    GitHub仓库的`setups`文件夹中找到，并包含本书中代码示例所使用的库。
- en: 'As noted in the `README` file of the GitHub repo, there are mainly three components
    to run: the database server, aggregator, and agent(s). If you want to conduct
    a simulation within one machine, you can just install a `conda` environment (`federatedenv`) on
    that machine.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如同GitHub仓库的`README`文件所述，运行此程序主要需要三个组件：数据库服务器、聚合器和代理（们）。如果你想在单台机器上运行模拟，你只需在该机器上安装一个`conda`环境（`federatedenv`）即可。
- en: If you want to create a distributed environment, you need to install the `conda`
    environment on all the machines you want to use, such as the database server on
    a cloud instance, the aggregator server on a cloud instance, and the local client
    machine.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要创建一个分布式环境，你需要在你想要使用的所有机器上安装`conda`环境，例如在云实例上的数据库服务器、聚合器服务器以及本地客户端机器。
- en: Now that the installation process for the entire FL process is ready, let’s
    move on to configuring the FL system with configuration files.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在FL过程的安装过程已经准备就绪，让我们继续使用配置文件来配置FL系统。
- en: Configuring the FL system with JSON files for each component
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用JSON文件为每个组件配置FL系统
- en: First, edit the configuration JSON files in the `setups` folder of the provided
    GitHub repository. These JSON files are read by a database server, aggregator,
    and agents to configure their initial setups. Again, the configuration details
    are explained as follows.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，编辑提供的GitHub仓库`setups`文件夹中的配置JSON文件。这些JSON文件被数据库服务器、聚合器和代理读取以配置它们的初始设置。再次提醒，配置细节如下所述。
- en: config_db.json
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: config_db.json
- en: 'The `config_db.json` file deals with configuring a database server. Use the
    following information to properly operate the server:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '`config_db.json`文件用于配置数据库服务器。使用以下信息来正确操作服务器：'
- en: '`db_ip`: The database server’s IP address (for example, `localhost`). If you
    want to run the database server on a cloud instance, such as an **Amazon Web Services**
    (**AWS**) EC2 instance, you can specify the private IP address of the instance.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`db_ip`：数据库服务器的IP地址（例如，`localhost`）。如果你想在云实例上运行数据库服务器，例如在**亚马逊网络服务**（**AWS**）EC2实例上，你可以指定实例的私有IP地址。'
- en: '`db_socket`: The socket number used between the database and aggregator (for
    example, `9017`).'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`db_socket`：数据库和聚合器之间使用的套接字编号（例如，`9017`）。'
- en: '`db_name`: The name of the SQLite database (for example, `sample_data`).'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`db_name`：SQLite数据库的名称（例如，`sample_data`）。'
- en: '`db_data_path`: The path to the SQLite database (for example, `./db`).'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`db_data_path`：SQLite数据库的路径（例如，`./db`）。'
- en: '`db_model_path`: The path to the directory to save all `./db/models`).'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`db_model_path`：保存所有`./db/models`的目录路径。'
- en: config_aggregator.json
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: config_aggregator.json
- en: 'The `config_aggregator.json` file deals with configuring an aggregator in the
    FL server. Use the following information to properly operate the aggregator:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`config_aggregator.json`文件用于在FL服务器中配置聚合器。使用以下信息来正确操作聚合器：'
- en: '`aggr_ip`: The aggregator’s IP address (for example, `localhost`). If you want
    to run the aggregator server on a cloud instance, such as an AWS EC2 instance,
    you can specify the private IP address of the instance.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`aggr_ip`：聚合器的IP地址（例如，`localhost`）。如果你想在云实例上运行聚合器服务器，例如AWS EC2实例，你可以指定实例的私有IP地址。'
- en: '`db_ip`: The database server’s IP address (for example, `localhost`). If you
    want to connect to the database server hosted on a different cloud instance, you
    can specify the public IP address of the database instance. If you host the database
    server on the same cloud instance as the aggregator’s instance, you can specify
    the same private IP address of the instance.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`db_ip`：数据库服务器的IP地址（例如，`localhost`）。如果你想要连接到托管在不同云实例上的数据库服务器，你可以指定数据库实例的公网IP地址。如果你将数据库服务器托管在与聚合器实例相同的云实例上，你可以指定实例的相同私有IP地址。'
- en: '`reg_socket`: The socket number used by agents to connect to an aggregator
    for the first time (for example, `8765`).'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`reg_socket`：代理首次连接到聚合器时使用的套接字编号（例如，`8765`）。'
- en: '`recv_socket`: The socket number used to upload local models or poll to an
    aggregator from an agent. Agents will learn this socket information by communicating
    with an aggregator (for example, `7890`).'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`recv_socket`: 用于从代理上传本地模型或轮询聚合器的套接字编号。代理将通过与聚合器通信来学习此套接字信息（例如，`7890`）。'
- en: '`exch_socket`: The socket number used to send global models back to an agent
    from an aggregator when a push method is used. Agents will learn this socket information
    by communicating with an aggregator (for example, `4321`).'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`exch_socket`: 当使用推送方法时，用于从聚合器将全局模型发送回代理的套接字编号。代理将通过与聚合器通信来学习此套接字信息（例如，`4321`）。'
- en: '`db_socket`: The socket number used between the database and an aggregator
    (for example, `9017`).'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`db_socket`: 数据库和聚合器之间使用的套接字编号（例如，`9017`）。'
- en: '`round_interval`: The period of time after which an agent checks whether there
    are enough models to start an aggregation step (unit: seconds; for example, `5`).'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`round_interval`: 代理检查是否有足够模型以启动聚合步骤的时间间隔（单位：秒；例如，`5`）。'
- en: '`aggregation_threshold`: The percentage of collected local models required
    to start an aggregation step (for example, `0.85`).'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`aggregation_threshold`: 需要收集的本地模型百分比，以启动聚合步骤（例如，`0.85`）。'
- en: '`polling`: The flag to specify whether to use a polling method or not. If the
    flag is `1`, use the polling method; if the flag is `0`, use a push method. This
    value needs to be the same between the aggregator and agent.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`polling`: 指定是否使用轮询方法的标志。如果标志为`1`，则使用轮询方法；如果标志为`0`，则使用推送方法。此值需要在聚合器和代理之间相同。'
- en: config_agent.json
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: config_agent.json
- en: 'The `config_agent.json` file deals with configuring an agent in the FL client.
    Use the following information to properly operate the agent:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`config_agent.json`文件用于在FL客户端中配置代理。使用以下信息正确操作代理：'
- en: '`aggr_ip`: The aggregator server’s IP address (for example, `localhost`). If
    you want to connect to the aggregator server hosted on a cloud instance, such
    as an AWS EC2 instance, you can specify the public IP address of the aggregator
    instance.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`aggr_ip`: 聚合器服务器的IP地址（例如，`localhost`）。如果你想连接到托管在云实例上的聚合器服务器，例如AWS EC2实例，你可以指定聚合器实例的公网IP地址。'
- en: '`reg_socket`: The socket number used by agents to join an aggregator for the
    first time (for example, `8765`).'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`reg_socket`: 代理首次加入聚合器时使用的套接字编号（例如，`8765`）。'
- en: '`model_path`: The path to a local director in the agent machine to save local
    and global models and some state information (for example, `./data/agents`).'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`model_path`: 代理机器中本地目录的路径，用于保存本地和全局模型以及一些状态信息（例如，`./data/agents`）。'
- en: '`local_model_file_name`: The filename to save local models in the agent machine
    (for example, `lms.binaryfile`).'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`local_model_file_name`: 在代理机器中保存本地模型的文件名（例如，`lms.binaryfile`）。'
- en: '`global_model_file_name`: The filename to save local models in the agent machine
    (for example, `gms.binaryfile`).'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`global_model_file_name`: 在代理机器中保存全局模型的文件名（例如，`gms.binaryfile`）。'
- en: '`state_file_name`: The filename to store the agent state in the agent machine
    (for example, `state`).'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`state_file_name`: 存储代理状态的文件名（例如，`state`）。'
- en: '`init_weights_flag`: `1` if the weights are initialized with certain values,
    `0` otherwise, where weights are initialized with zeros.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`init_weights_flag`: 如果权重以特定值初始化，则为`1`，否则为`0`，其中权重以零初始化。'
- en: '`polling`: The flag to specify whether to use a polling method or not. If the
    flag is `1`, use the polling method; if the flag is `0`, use a push method. This
    value needs to be the same between the aggregator and agent.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`polling`: 指定是否使用轮询方法的标志。如果标志为`1`，则使用轮询方法；如果标志为`0`，则使用推送方法。此值需要在聚合器和代理之间相同。'
- en: Now, the FL systems can be configured using the configuration files explained
    in this section. Next, you will run the database and aggregator on the FL server
    side.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，可以使用本节中解释的配置文件配置FL系统。接下来，你将在FL服务器端运行数据库和聚合器。
- en: Running the database and aggregator on the FL server
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在FL服务器上运行数据库和聚合器
- en: 'In this section, you will configure the database and aggregator on the FL server
    side. Then, you will edit the configuration files in the `setups` folder of the
    `simple-fl` GitHub repo. After that, you will run `pseudo_db` first, and then
    `server_th`, as follows:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你将在FL服务器端配置数据库和聚合器。然后，你将编辑`simple-fl` GitHub仓库中`setups`文件夹中的配置文件。之后，你将首先运行`pseudo_db`，然后运行`server_th`，如下所示：
- en: '[PRE3]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Important note
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 重要注意事项
- en: If the database server and aggregator server are running on different machines,
    you will need to specify the IP address of the database server or instance of
    the aggregator. The IP address of the database server can be modified in the `config_aggregator.json`
    file in the `setups` folder. Also, if both the database and aggregator instances
    are running in public cloud environments, the IP address of the configuration
    files of those servers needs to be the private IP address. Agents need to connect
    to the aggregator using the public IP address and the connecting socket (port
    number) needs to be open to accept inbound messages.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果数据库服务器和聚合服务器运行在不同的机器上，您需要指定数据库服务器或聚合服务器实例的IP地址。数据库服务器的IP地址可以在`setups`文件夹中的`config_aggregator.json`文件中修改。此外，如果数据库和聚合实例都在公共云环境中运行，这些服务器的配置文件IP地址需要是私有IP地址。代理需要使用公共IP地址和连接套接字（端口号）连接到聚合器，并且连接套接字（端口号）需要打开以接受入站消息。
- en: 'After you start the database and aggregator servers, you will see a message
    such as the following in the console:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在您启动数据库和聚合服务器后，您将在控制台中看到如下消息：
- en: '[PRE4]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'On the aggregator side of the console, you will see something like the following:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在控制台的聚合端，您将看到如下内容：
- en: '[PRE5]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Behind this aggregator server, the model synthesis module is running every 5
    seconds, where it starts checking whether the number of collected local models
    is more than the number that the aggregation threshold defines.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个聚合服务器背后，模型合成模块每5秒运行一次，它开始检查收集到的本地模型数量是否超过了聚合阈值定义的数量。
- en: We have now run the database and aggregator modules and are ready to run a minimal
    example with the FL client.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经运行了数据库和聚合模块，并准备好使用FL客户端运行最小示例。
- en: Running a minimal example with the FL client
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用FL客户端运行最小示例
- en: In the previous chapter, we talked about the integration of local ML engines
    into the FL system. Here, using a minimal sample that does not have actual training
    data, we will try to run the FL systems that have been discussed. This minimal
    example can be used as a template when implementing any locally distributed ML
    engine.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们讨论了将本地ML引擎集成到FL系统中的方法。在这里，我们使用一个没有实际训练数据的最小样本来尝试运行已经讨论过的FL系统。这个最小示例可以作为实现任何本地分布式ML引擎时的模板。
- en: 'Before running the minimal example, you should check whether the database and
    aggregator servers are running already. Then, run the following command:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行最小示例之前，您应该检查数据库和聚合服务器是否已经启动。然后，运行以下命令：
- en: '[PRE6]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In this case, only one agent with a minimal ML engine is connected. Thus, the
    aggregation happens every time this default agent uploads the local model.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，仅连接了一个具有最小ML引擎的代理。因此，聚合会在默认代理上传本地模型时发生。
- en: Note that if the aggregator server is running on a different machine, you will
    need to specify the public IP address of the aggregator server or instance. The
    IP address of the aggregator can be modified in the `config_agent.json` file in
    the `setups` folder. We also recommend setting the `polling` flag to `1` when
    running the aggregator and database in a cloud instance.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，如果聚合服务器运行在不同的机器上，您需要指定聚合服务器或实例的公共IP地址。聚合服务器的IP地址可以在`setups`文件夹中的`config_agent.json`文件中修改。我们还建议在云实例中运行聚合器和数据库时将`polling`标志设置为`1`。
- en: '*Figure 6.1* shows an example of the console screen when running a database
    server:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '*图6.1* 展示了运行数据库服务器时的控制台屏幕示例。'
- en: '![Figure 6.1 – Example of a database-side console'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.1 – 数据库端控制台示例'
- en: '](img/B18369_06_01.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/B18369_06_01.jpg)'
- en: Figure 6.1 – Example of a database-side console
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.1 – 数据库端控制台示例
- en: '*Figure 6.2* shows an example of the console screen when running an aggregator:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '*图6.2* 展示了运行聚合器时的控制台屏幕示例：'
- en: '![Figure 6.2 – Example of an aggregator-side console'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.2 – 聚合端控制台示例'
- en: '](img/B18369_06_02.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/B18369_06_02.jpg)'
- en: Figure 6.2 – Example of an aggregator-side console
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.2 – 聚合端控制台示例
- en: '*Figure 6.3* shows an example of the console screen when running an agent:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '*图6.3* 展示了运行代理时的控制台屏幕示例。'
- en: '![Figure 6.3 – Example of an agent-side console'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.3 – 代理端控制台示例'
- en: '](img/B18369_06_03.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/B18369_06_03.jpg)'
- en: Figure 6.3 – Example of an agent-side console
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.3 – 代理端控制台示例
- en: 'Now we know how to run all the FL components: a database, aggregator, and agent.
    In the next section, we will examine how outputs are generated by running the
    FL system.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道了如何运行所有FL组件：数据库、聚合器和代理。在下一节中，我们将检查运行FL系统时如何生成输出。
- en: Data and database folders
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据和数据库文件夹
- en: After running the FL system, you will notice that the database folder and data
    folder are created under the locations that you specified in the config files
    of the database and agent.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 运行FL系统后，您将注意到数据库文件夹和数据文件夹是在您在数据库和代理的配置文件中指定的位置创建的。
- en: For example, the `db` folder is created under `db_data_path`, written in the
    `config_db.json` file. In the database folder, you will find the SQLite database,
    such as `model_data12345.db`, where the metadata of local and cluster global models
    is stored, as well as a `models` folder that contains all the actual local models
    uploaded by the agents and global models created by the aggregator.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，`db`文件夹是在`db_data_path`下创建的，在`config_db.json`文件中写入。在数据库文件夹中，您将找到SQLite数据库，例如`model_data12345.db`，其中存储了本地和集群全局模型的元数据，以及一个包含所有由代理上传的实际本地模型和由聚合器创建的全局模型的`models`文件夹。
- en: '*Figure 6.4* shows the SQLite database and ML model files in a binary file
    format stored in the `db` folder created by running the minimal example code:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '*图6.4* 展示了在`db`文件夹中存储的二进制文件格式下的SQLite数据库和ML模型文件，这些文件是通过运行最小示例代码创建的：'
- en: '![Figure 6.4 – The SQLite database and ML model files in a binary file format
    stored in the db folder'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.4 – 存储在db文件夹中的SQLite数据库和ML模型文件的二进制文件格式'
- en: '](img/B18369_06_04.jpg)'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B18369_06_04.jpg)'
- en: Figure 6.4 – The SQLite database and ML model files in a binary file format
    stored in the db folder
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.4 – 存储在db文件夹中的SQLite数据库和ML模型文件的二进制文件格式
- en: 'The `data` folder is created under an agent device at the location of the `model_path`,
    a string value defined in `config_agent.json`. In the example run of the minimal
    example, the following files are created under the `data/agents/default-agent`
    folder:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '`data`文件夹位于代理设备上的`model_path`位置，这是一个在`config_agent.json`中定义的字符串值。在最小示例的运行示例中，以下文件在`data/agents/default-agent`文件夹下创建：'
- en: '`lms.binaryfile`: A binary file containing a local model created by the agent'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`lms.binaryfile`: 包含由代理创建的本地模型的二进制文件'
- en: '`gms.binaryfile`: A binary file containing a global model created by the aggregator
    sent back to the agent'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`gms.binaryfile`: 包含由聚合器创建的全局模型的二进制文件，发送回代理'
- en: '`state`: A file that has an integer value that indicates the state of the client
    itself'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`state`: 一个包含整数值的文件，表示客户端自身的状态'
- en: '*Figure 6.5* shows the structure of the agent-side data, which includes global
    and local ML models represented with a binary file format, as well as the file
    reflecting the FL client state:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '*图6.5* 展示了代理端数据的结构，包括以二进制文件格式表示的全局和本地ML模型，以及反映FL客户端状态的文件：'
- en: '![Figure 6.5 – Data of the agents including global and local ML models with
    a binary file format as well as the client state'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.5 – 代理的数据，包括全局和本地ML模型以及以二进制文件格式表示的客户端状态'
- en: '](img/B18369_06_05.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B18369_06_05.jpg)'
- en: Figure 6.5 – Data of the agents including global and local ML models with a
    binary file format as well as the client state
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.5 – 包含全局和本地ML模型以及以二进制文件格式表示的客户端状态的代理数据
- en: Now we understand where the key data, such as global and local models, is stored.
    Next, we will take a closer look at the database using SQLite.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了关键数据，如全局和本地模型，存储的位置。接下来，我们将更详细地查看数据库，使用SQLite。
- en: Databases with SQLite
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SQLite数据库
- en: The database created in the `db` folder can be viewed using any tool to show
    the SQLite database that can open files with the `***.db` format. The database
    tables are defined in the following sections.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在`db`文件夹中创建的数据库可以使用任何工具查看，以显示可以打开`***.db`格式文件的SQLite数据库。数据库表在以下章节中定义。
- en: Local models in a database
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数据库中的本地模型
- en: '*Figure 6.6* shows sample database entries related to uploaded local models
    where each entry lists the local model ID, the time that the model was generated,
    the ID of the agent that uploaded the local model, round information, performance
    metrics, and the number of data samples:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '*图6.6* 展示了与上传的本地模型相关的示例数据库条目，其中每个条目列出了本地模型ID、模型生成的时间、上传本地模型的代理ID、轮次信息、性能指标和数据样本数量：'
- en: '![Figure 6.6 – Sample database entries related to uploaded local models'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.6 – 与上传的本地模型相关的示例数据库条目'
- en: '](img/B18369_06_06.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B18369_06_06.jpg)'
- en: Figure 6.6 – Sample database entries related to uploaded local models
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.6 – 与上传的本地模型相关的示例数据库条目
- en: Cluster models in a database
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数据库中的集群模型
- en: '*Figure 6.7* shows sample database entries related to uploaded cluster models
    where each entry lists the cluster model ID, the time that the model was created,
    the ID of the aggregator that created this cluster model, round information, and
    the number of data samples:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '*图6.7*显示了与上传的集群模型相关的样本数据库条目，其中每个条目列出了集群模型ID、模型创建时间、创建此集群模型的聚合器ID、轮次信息和数据样本数量：'
- en: '![Figure 6.7 – Sample database entries related to uploaded cluster models'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.7 – 与上传的集群模型相关的样本数据库条目'
- en: '](img/B18369_06_07.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/B18369_06_07.jpg)'
- en: Figure 6.7 – Sample database entries related to uploaded cluster models
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.7 – 与上传的集群模型相关的样本数据库条目
- en: Now we have learned how to configure and run the FL system with a minimal example
    and how to examine the results. In the next section, you will learn about the
    behavior of the FL system and what happens when the minimal example is run.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经学会了如何使用最小示例配置和运行联邦学习系统，以及如何检查结果。在下一节中，你将了解联邦学习系统的行为以及当运行最小示例时会发生什么。
- en: Understanding what happens when the minimal example runs
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解最小示例运行时发生的情况
- en: Understanding the behavior of the entire FL system step by step will help you
    design applications with FL enabled and further enhance the FL system itself.
    Let us first look into what happens when we run just one agent by printing some
    procedures of the agent and aggregator modules.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 逐步理解整个联邦学习系统的行为将有助于你设计启用联邦学习的应用程序，并进一步增强联邦学习系统本身。让我们首先看看当我们只运行一个代理时会发生什么，通过打印代理和聚合器模块的一些过程。
- en: Running just one minimal agent
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 只运行一个最小代理
- en: 'Let’s run the minimal agent after running the database and aggregator servers
    and see what happens. When the agent is started with the minimal ML engine, you
    will see the following messages in the agent console:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行数据库和聚合器服务器之后，让我们运行最小代理并看看会发生什么。当代理以最小机器学习引擎启动时，你将在代理控制台中看到以下消息：
- en: '[PRE7]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'When the agent initializes the model to be used for FL, it shows this message,
    and if you look at the `state` file, it has entered the `sending` state, which
    will trigger sending models to the aggregator when the FL client is started:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 当代理初始化用于联邦学习的模型时，它会显示这条消息，如果你查看`state`文件，它已经进入了`发送`状态，当联邦学习客户端启动时，将触发向聚合器发送模型：
- en: '[PRE8]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Then, after the client is started with the `start_fl_client` function, the
    participation message is sent to the aggregator. Here is the participation message
    sent to the aggregator:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在用`start_fl_client`函数启动客户端之后，参与消息被发送到聚合器。以下是发送到聚合器的参与消息：
- en: '[PRE9]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The participation message to the aggregator includes the message type, agent
    ID, model ID, ML model with NumPy, initialization weights flag, simulation flag,
    exchange port number, time the models were generated, and meta information such
    as performance metrics and the agent’s IP address.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 发送到聚合器的参与消息包括消息类型、代理ID、模型ID、带有NumPy的机器学习模型、初始化权重标志、模拟标志、交换端口号、模型生成时间以及性能指标和代理的IP地址等元信息。
- en: 'The agent receives the welcome message from an aggregator confirming the connection
    of this agent, which also includes the following information:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 代理收到聚合器发送的确认连接的欢迎消息，其中还包含以下信息：
- en: '[PRE10]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'On the aggregator side, after this agent sends a participation message to the
    aggregator, the aggregator confirms the participation and pushes this initial
    model to the database:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在聚合器端，在此代理向聚合器发送参与消息后，聚合器确认参与并将此初始模型推送到数据库：
- en: '[PRE11]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'In the database server-side console, you can also check that the local model
    is sent from the aggregator and the model is saved in the database:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在数据库服务器端控制台中，你还可以检查本地模型是否从聚合器发送过来，并且模型已保存在数据库中：
- en: '[PRE12]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'After the aggregator sends the global model back to the agent, the agent receives
    and saves it and changes the client state from `waiting_gm` to `gm_ready`, indicating
    the global model is ready for retraining locally:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在聚合器将全局模型发送回代理后，代理接收并保存它，并将客户端状态从`等待_gm`更改为`gm_ready`，表示全局模型已准备好在本地重新训练：
- en: '[PRE13]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Here is the message sent to the agent from an aggregator, including the global
    model. The contents of the message include the message type, aggregator ID, cluster
    model ID, FL round, and ML models with NumPy:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是聚合器发送给代理的消息，包括全局模型。消息内容包含消息类型、聚合器ID、集群模型ID、联邦学习轮次和带有NumPy的机器学习模型：
- en: '[PRE14]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Then, the agent reads the global models to proceed with using them for local
    training and changes the client state to `training`:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，代理读取全局模型，以便使用它们进行本地训练，并将客户端状态更改为`训练`：
- en: '[PRE15]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: After the preceding local training process, the agent proceeds with `sending`
    the trained local models to the aggregator and changes the client state to `waiting_gm`,
    which means it waits for the global model with the polling mechanism.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的本地训练过程之后，代理继续将训练好的本地模型`发送`到聚合器，并将客户端状态更改为`waiting_gm`，这意味着它正在等待具有轮询机制的全球模型。
- en: 'Here is the message sent to the aggregator as a trained local model message.
    The contents of the message include message type, agent ID, model ID, ML models,
    generated time of the models, and metadata such as performance data:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是发送给聚合器的消息，作为训练好的本地模型消息。消息内容包含消息类型、代理ID、模型ID、机器学习模型、模型的生成时间以及如性能数据之类的元数据：
- en: '[PRE16]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Then, in the aggregator, after the local model is pushed to the database, it
    shows the change in the buffer, that the number of collected local models is up
    to 1 from 0, thus indicating that enough local models are collected to start the
    aggregation:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在聚合器中，在本地模型被推送到数据库后，它显示了缓冲区中的变化，收集到的本地模型数量从0增加到1，从而表明已收集足够的本地模型以开始聚合：
- en: '[PRE17]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Then, aggregation for round 1 happens and the cluster global models are formed,
    pushed to the database, and sent to the agent once the polling message arrives
    from the agent. The aggregator can also push the message back to the agent via
    a push method:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，第一轮的聚合发生，集群全局模型形成，在收到代理的轮询消息后推送到数据库，并发送给代理。聚合器也可以通过推送方法将消息推回代理：
- en: '[PRE18]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'On the database server side, the cluster global model is received and pushed
    to the database:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在数据库服务器端，集群全局模型被接收并推送到数据库：
- en: '[PRE19]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This process in this section is repeated after cluster models are generated
    and saved for the upcoming FL round and the round of FL proceeds with this interaction
    mechanism.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在生成并保存了即将到来的联邦学习轮次的集群模型后，本节中的此过程会重复进行，并且联邦学习轮次将继续使用此交互机制进行。
- en: 'If you look at both the local and cluster global models, they are as follows:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您查看本地和集群全局模型，它们如下所示：
- en: '[PRE20]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: This means only one fixed model is used all the time even if aggregation happens,
    so the global model is exactly the same as the initial one as the dummy training
    process is used here.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着即使发生聚合，也始终只使用一个固定的模型，因此全局模型与初始模型完全相同，因为这里使用了虚拟训练过程。
- en: We will now look into the results when running two minimal agents in the next
    section.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将查看在下一节中运行两个最小代理的结果。
- en: Running two minimal agents
  id: totrans-152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行两个最小代理
- en: With the database and aggregator servers running, you can run many agents using
    the `minimal_MLEngine.py` file in the `simple-fl/examples/minimal` folder.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在数据库和聚合器服务器运行的情况下，您可以使用`simple-fl/examples/minimal`文件夹中的`minimal_MLEngine.py`文件运行许多代理。
- en: You should run the two individual agents from different local machines by specifying
    the IP address of the aggregator to connect those agents with the minimal ML example.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该通过指定聚合器的IP地址来从不同的本地机器运行两个单独的代理，以将那些代理与最小机器学习示例连接起来。
- en: You can also run multiple agents from the same machine for simulation purposes
    by specifying the different port numbers for the individual agents.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以通过为单个代理指定不同的端口号来从同一台机器运行多个代理以进行模拟。
- en: 'In the code provided in the `simple-fl` repository on GitHub, you can run the
    multiple agents by using the following command:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在GitHub上`simple-fl`存储库中提供的代码中，您可以通过使用以下命令运行多个代理：
- en: '[PRE21]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: To conduct the simulation, `simulation_flag` should be set to `1`. `gm_recv_port`
    is the port number to receive the global models from the aggregator. The agent
    will be notified of the port number by the aggregator through the response of
    a participation message. Also, `agent_name` is the name of the local agent and
    the directory name storing the state and model files. This needs to be unique
    for every agent.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 要进行模拟，应将`simulation_flag`设置为`1`。`gm_recv_port`是从聚合器接收全局模型的端口号。聚合器将通过参与消息的响应通知代理端口号。此外，`agent_name`是本地代理的名称和存储状态和模型文件的目录名称。这对于每个代理都需要是唯一的。
- en: 'For instance, you can run the first and second agents with the following commands:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，您可以使用以下命令运行第一个和第二个代理：
- en: '[PRE22]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: You can edit the configuration JSON files in the `setups` folder if needed.
    In this case, `agg_threshold` is set to `1`.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要，您可以编辑`setups`文件夹中的配置JSON文件。在这种情况下，`agg_threshold`被设置为`1`。
- en: When you run the simulation in the database server running a minimal example
    with multiple agents, the console screen will look similar to that in *Figure
    6.1*.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 当您在运行多个代理的最小示例的数据库服务器上运行模拟时，控制台屏幕将类似于*图6.1*中的屏幕。
- en: '*Figure 6.8* shows the console screen of a simulation in the aggregator server
    running a minimal example using dummy ML models:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.8 – Example of an aggregator-side console running a minimal example
    connecting two agents'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B18369_06_08.jpg)'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.8 – Example of an aggregator-side console running a minimal example
    connecting two agents
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 6.9* shows the console screen of a simulation in one of the agents
    running a minimal example using dummy ML models:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.9 – Example of agent 1’s console running a minimal example using
    dummy ML models'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B18369_06_09.jpg)'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.9 – Example of agent 1’s console running a minimal example using dummy
    ML models
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 6.10* shows the console screen of a simulation in another agent running
    a minimal example using dummy ML models:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.10 – Example of agent 2’s console running a minimal example using
    dummy ML models'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B18369_06_10.jpg)'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.10 – Example of agent 2’s console running a minimal example using dummy
    ML models
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we know how to run the minimal example with two agents. In order to further
    look into the FL procedure using this example, we will answer the following questions:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: Has aggregation been done correctly for the simple cases?
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Has the `FedAvg` algorithm been applied correctly?
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Does aggregation threshold work with connected agents?
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'After running and connecting the two agents, the aggregator will wait to receive
    two models from the two connected agents, as follows:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: In this case, the aggregation threshold is set to `1.0` in the `config_aggregator.json`
    file in the `setups` folder, so the aggregator needs to collect all the models
    from connected agents, meaning it needs to receive local ML models from all the
    agents that are connected to the aggregator.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, it receives one model from one of the agents and the number of collected
    local models is increased to 1\. However, as the aggregator is still missing one
    local model, it does not start aggregation yet:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: On the agent side, after the local models are sent to the aggregator, it will
    wait until the cluster global model to be created in the aggregator and sent back
    to the agent. In this way, you can synchronize the FL process at the agent side
    and automate the local training procedure when the global model is sent back to
    the agent and ready for retraining.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: 'After the aggregator receives another local model, enough models are collected
    to start the aggregation process:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'It will finally start the aggregation for the first round, as follows:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Here, let’s look at the agent-side ML models that are locally trained:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Also, let’s look at another agent’s ML models that are locally trained:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: As in the models sent to the aggregator from agents 1 and 2, if `FedAvg` is
    correctly applied, the global model should be the averaged value of these two
    models. In this case, the number of data samples is the same for both agents 1
    and 2, so the global model should just be an average of the two models.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: 'So, let’s look at the global models that are generated in the aggregator:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The received model is the average of the two local models and thus averaging
    has been correctly conducted.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: The database and data folders are created in the `model_path` specified in the
    agent configuration file. You can look at the database values with an SQLite viewer
    application and look for some models based on the model ID.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: Now that we understand what’s happening with minimal example runs, in the next
    section, we will run a real ML application using an image classification model
    using a **Convolutional Neural Network** (**CNN**).
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: Running image classification and analyzing the results
  id: totrans-199
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This example demonstrates the use of this FL framework for image classification
    tasks. We will use a famous image dataset, CIFAR-10 (URL: [https://www.cs.toronto.edu/~kriz/cifar.html](https://www.cs.toronto.edu/~kriz/cifar.html)),
    to show how an ML model grows through the FL process over time. However, this
    example is only given for the purposes of using the FL system we have discussed
    so far and is not focused on maximizing the performance of the image classification
    task.'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: Preparing the CIFAR-10 dataset
  id: totrans-201
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following is the information required related to the dataset size, the
    training and test data, the number of classes, and the image size:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: 'Dataset size: 60,000 images'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Training data: 50,000 images'
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Test data: 10,000 images'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Number of classes: 10 (`airplane`, `automobile`, `bird`, `cat`, `deer`, `dog`,
    `frog`, `horse`, `ship`, and `truck`)'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each class has 6,000 images
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Image size: 32x32 pixels, in color'
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Figure 6.11* shows a collection of sample pictures of 10 different classes
    in the dataset with 10 random images for each:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.11 – The classes in the dataset as well as 10 random images for
    each category (the images are adapted from https://www.cs.toronto.edu/~kriz/cifar.html)'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B18369_06_11.jpg)'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.11 – The classes in the dataset as well as 10 random images for each
    category (the images are adapted from https://www.cs.toronto.edu/~kriz/cifar.html)
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
- en: Now that the dataset is prepared, we will look into a CNN model used for the
    FL process.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: The ML model used for FL with image classification
  id: totrans-214
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here is the description of the ML model architecture of the CNN model used
    in this image classification example. To learn more about what the CNN is, you
    can find many useful study resources, such as [https://cs231n.github.io/convolutional-networks/](https://cs231n.github.io/convolutional-networks/):'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: Conv2D
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MaxPool2D (maximum pooling)
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Conv2D
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 3 fully-connected layers
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The script to define the CNN model is already designed and can be found in `cnn.py`
    in `examples/image_classification` in the `simple-fl` repository on GitHub. Next,
    we will run the image classification application with the FL system.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: How to run the image classification example with CNN
  id: totrans-221
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As mentioned in the installation steps at the beginning of this chapter, we
    first install the necessary libraries with `federatedenv`, and then install `torch`
    and `torchvision` after that:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: You can configure many settings through the JSON config files in the `setups`
    folder of the `simple-fl` repo of GitHub. For more details, you can read the general
    description of the config files in our `setups` documentation ([https://github.com/tie-set/simple-fl/tree/master/setups](https://github.com/tie-set/simple-fl/tree/master/setups)).
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: First, you can run two agents. You can increase the number of agents running
    on the same device by specifying the appropriate port numbers.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
- en: 'As you already know, the first thing you can do is run the database and aggregator:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Then, start the first and second agents to run the image classification example:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: To simulate the actual FL scenarios, the amount of training data accessible
    from each agent can be limited to a specific number. This should be specified
    with the `num_training_data` variable in `classification_engine.py`. By default,
    it uses 8,000 images (2,000 batches) for each round.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
- en: Now that we can run the two agents to test the FL process using CNN models,
    let us look further into the results by running the image classification example.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
- en: Evaluation of running the image classification with CNN
  id: totrans-232
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The performance data (the accuracy of each local model cluster model) is stored
    in our database. You can access the corresponding `.db` file to see the performance
    history.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
- en: The `DataManager` instance (defined in `ic_training.py`) has a function to return
    one batch of images and their labels (`get_random_images`). You can use this function
    to show the actual labels and the predicted labels by the trained CNN on specific
    images.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 6.12* shows a plot of the learning performance from our experimental
    runs on our side; the results may look different when you run it with your own
    settings:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.12 – Plot of the learning performance from the experimental runs
    for FL using CNN for image classification'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B18369_06_12.jpg)'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.12 – Plot of the learning performance from the experimental runs for
    FL using CNN for image classification
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
- en: Again, as we only use two agents here, the results just look slightly different.
    However, with the proper hyperparameter settings, data amount, and the number
    of agents, you will be able to carry out an FL evaluation that produces meaningful
    results, which we would like you to explore on your own, as the focus here is
    just how to connect the actual ML models to this FL environment.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
- en: Running five agents
  id: totrans-240
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can easily run five agents for the image classification application by
    just specifying different port numbers and agent names in the terminal. The results
    look similar to what we discussed in the previous section except the real ML models
    are connected (in this case, the ML model being aggregated is CNN). After running
    the five agents, the data and database folders look like in *Figure 6.13*:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.13 – Results to be stored in each folder with the agent’s unique
    name'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B18369_06_13.jpg)'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.13 – Results to be stored in each folder with the agent’s unique name
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 6.14* shows the uploaded local models in the database with information
    about the local model ID, the time the models were generated, the ID of the agent
    that uploaded the local model, performance metrics, and round information:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.14 – Information about the local models in the database'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B18369_06_14.jpg)'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.14 – Information about the local models in the database
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
- en: If you look at the database in *Figure 6.14*, there are five models collected
    by the five agents with local performance data.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
- en: 'For each round, those five local models are aggregated to produce a cluster
    global model, as in the `cluster_models` table in the database, as shown in *Figure
    6.15*. The database storing cluster models has information about the cluster model
    ID, the time the models were generated, the ID of the aggregator that created
    the cluster model, and round information:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.15 – Information about the cluster models in the database'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B18369_06_15.jpg)'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.15 – Information about the cluster models in the database
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
- en: In this way, you can connect as many agents as possible. It is up to you to
    optimize the settings of the local ML algorithms to obtain the best-performing
    federated models out of the FL system.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-255
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we discussed the execution of FL systems in detail and how
    the system will behave according to the interactions between the aggregator and
    agents. The step-by-step explanation of the FL system behavior based on the outcomes
    of the console examples guides you to understand the aggregation process of the
    `FedAvg` algorithm. Furthermore, the image classification example showed how CNN
    models are connected to the FL system and how the FL process increases the accuracy
    through aggregation, although this was not optimized to maximize the training
    results but simplified to validate the integration using CNN.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
- en: With what you have learned in this chapter, you will be able to design your
    own FL applications integrating the principles and framework introduced in this
    book, and furthermore, will be able to assess the FL behavior on your own to see
    whether the whole flow of the FL process and model aggregation is happening correctly
    and consistently.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will cover a variety of model aggregation methods and
    show how FL works well with those aggregation algorithms.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
