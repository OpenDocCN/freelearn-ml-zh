["```py\n    pip install pycaret==2.3.1\n    ```", "```py\n    import pandas\n    import pycaret\n    ```", "```py\n    data=pandas.read_csv(\"training_data.csv\",header='infer')\n    ```", "```py\n    from pycaret.classification import *\n    s = setup(data, target = 'target',  log_experiment = True, experiment_name = 'psystock')\n    ```", "```py\n    best = compare_models()\n    ```", "```py\n    best = compare_models()\n    ```", "```py\n    import pandas\n    import pycaret\n    ```", "```py\n    data=pandas.read_csv(\"credit_card.csv\",header='infer')\n    ```", "```py\n    from pycaret.anomaly import *\n    s = setup(df,  log_experiment = True, experiment_name = 'psystock_anomaly'))\n    ```", "```py\n    models()\n    ```", "```py\n    iforest = create_model('iforest', fraction = 0.1)\n    iforest_results = assign_model(iforest)\n    iforest_results.head()\n    ```", "```py\n    <project>\n    …\n      <dependencies>\n        <dependency>\n          <groupId>org.mlflow</groupId>\n          <artifactId>mlflow-client</artifactId>\n          <version>1.17.0</version>..\n      </dependency>\n    …\n    </project>\n    ```", "```py\n    package ai.psystock.jclient;\n    import org.mlflow.tracking.MlflowClient;\n    import org.mlflow.tracking.MlflowContext;\n    import java.io.File;\n    import java.io.PrintWriter;\n    public class Main {\n        public static void main(String[] args) {\n            MlflowClient mlflowClient=new MlflowClient();\n            String runId=\"test\";\n            RunStatus = RunStatus.FINISHED;\n\n            MlflowContext = new MlflowContext();\n            MlflowClient client = mlflowContext.getClient();\n\n            client.logParam(\"test\",\"alpha\", \"0.5\");\n            client.logMetric(\"test\",\"rmse\", 0.786);\n            client.setTag(\"test\",\"origin\",\"HelloWorldFluent Java Example\");\n             mlflowClient.setTerminated(runId, runStatus, System.currentTimeMillis());\n        }\n    }\n    ```", "```py\n    mvn clean package\n    ```", "```py\n    java -jar ./target/java-maven-command-line-1.0-SNAPSHOT.jar\n    ```", "```py\n    install.packages(\"mlflow\")\n    library(mlflow)\n    install_mlflow()\n    ```", "```py\n    install.packages(\"carrier\")\n    install.packages(\"e1071\")\n\n    library(MASS)\n    library(caret)\n    library(e1071)\n    library(randomForest)\n    library(SparkR)\n    library(carrier)\n    ```", "```py\n    with(mlflow_start_run(), {\n\n      # Set the model parameters\n      ntree <- 100\n      mtry <- 3\n        # Log the model parameters used for this run\n      mlflow_log_param(\"ntree\", ntree)\n      mlflow_log_param(\"mtry\", mtry)\n    ```", "```py\n      rf <- randomForest(type ~ ., data=Pima.tr, ntree=ntree, mtry=mtry)\n\n      pred <- predict(rf, newdata=Pima.te[,1:7])\n    ```", "```py\n    # Define metrics to evaluate the model\n      cm <- confusionMatrix(pred, reference = Pima.te[,8])\n      sensitivity <- cm[[\"byClass\"]][\"Sensitivity\"]\n      specificity <- cm[[\"byClass\"]][\"Specificity\"]\n\n      # Log the value of the metrics \n      mlflow_log_metric(\"sensitivity\", sensitivity)\n      mlflow_log_metric(\"specificity\", specificity)\n    ```", "```py\n      # Log the value of the metrics \n        # Create and plot confusion matrix\n      png(filename=\"confusion_matrix_plot.png\")\n      barplot(as.matrix(cm), main=\"Results\",\n             xlab=\"Observed\", ylim=c(0,200), col=c(\"green\",\"blue\"),\n             legend=rownames(cm), beside=TRUE)\n      dev.off()\n\n      # Save the plot and log it as an artifact\n      mlflow_log_artifact(\"confusion_matrix_plot.png\")\n    ```", "```py\n      predictor <- crate(function(x) predict(rf,.x))\n      mlflow_log_model(predictor, \"model\")     \n    })\n    ```", "```py\n    setup(\n        name=\"mflow-psystock-deployment-plugin\",\n        # Require MLflow as a dependency of the plugin, so that plugin users can simply install\n        # the plugin and then immediately use it with MLflow\n        install_requires=[\"mlflow\"],\n        entry_points={\n            \"mlflow.deployments\": \" psystock target= psystock. deployment_plugin\"\n        }\n    )\n    ```", "```py\n    import os\n    from mlflow.deployments import BaseDeploymentClient\n    p_deployment_name = \"pystock\"\n    class PluginDeploymentClient(BaseDeploymentClient):\n        def create_deployment(self, name, model_uri, flavor=None, config=None):\n            if config and config.get(\"raiseError\") == \"True\":\n                raise RuntimeError(\"Error requested\")\n            return {\"name\": f_deployment_name, \"flavor\": flavor}\n        def delete_deployment(self, name):\n            return None\n        def update_deployment(self, name, model_uri=None, flavor=None, config=None):\n            return {\"flavor\": flavor}\n    ```", "```py\n        def list_deployments(self):\n            if os.environ.get(\"raiseError\") == \"True\":\n                raise RuntimeError(\"Error requested\")\n            return [f_deployment_name]\n        def get_deployment(self, name):\n            return {\"key1\": \"val1\", \"key2\": \"val2\"}\n        def predict(self, deployment_name, df):\n            return \"1\"\n    def run_local(name, model_uri, flavor=None, config=None):\n        print(\n            \"Deployed locally at the key {} using the model from {}. \".format(name, model_uri)\n            + \"It's flavor is {} and config is {}\".format(flavor, config)\n        )\n    ```", "```py\n    pip install-e .\n    ```"]