["```py\npip install mlxtend \n```", "```py\nimport pandas as pd\ndf = pd.read_csv(\"./data.csv\")\ndf = df.dropna(subset=['CustomerID']) \n```", "```py\ncustomer_item_matrix = df.pivot_table(\n    index='CustomerID',\n    columns='StockCode',\n    values='Quantity',\n    aggfunc='sum'\n) \n```", "```py\nfrom mlxtend.frequent_patterns import apriori\nfrequent_items = apriori(\n    customer_item_matrix,\n    min_support=0.03,\n    use_colnames=True\n)\nfrequent_items[\"n_items\"] = frequent_items[\"itemsets\"].apply(\nlambda x: len(x)\n) \n```", "```py\nfrom mlxtend.frequent_patterns import association_rules\nrules = association_rules(\n    frequent_items,\n    metric=\"confidence\",\n    min_threshold=0.6,\n    support_only=False\n) \n```", "```py\nmost_lift = rules.sort_values(\n    by=\"lift\", ascending=False\n).head(20).pivot_table(\n    index='antecedents',\n    columns='consequents',\n    values='lift',\n    aggfunc='sum'\n)\nmost_lift.index = [\n    \" + \".join([\n        df.loc[df[\"StockCode\"] == item][\"Description\"].unique()[0]\n        for item in list(x)\n    ]) for x in most_lift.index\n]\nmost_lift.columns = [\n    \" + \".join([\n        df.loc[df[\"StockCode\"] == item][\"Description\"].unique()[0]\n        for item in list(x)\n    ]) for x in most_lift.columns\n] \n```", "```py\nax = plt.subplot()\nsns.heatmap(\n    most_lift,\n    annot=True,\n    annot_kws={\"size\": 6},\n    # fmt=\".1f\",\n    ax=ax\n)\nax.set_title(\"Top 20 Rules by Lift\")\nax.set_xlabel(\"Consequent\")\nax.set_ylabel(\"Antecedent\")\nax.yaxis.set_ticklabels(list(most_lift.index), fontsize=6)\nax.xaxis.set_ticklabels(list(most_lift.columns), fontsize=6)\nplt.show() \n```", "```py\nfig = plt.figure()\nax1 = fig.add_subplot(111)\nax2 = ax1.twiny()\nrules[[\"support\",\"lift\"]].plot(\n    kind=\"scatter\", x=\"support\", y=\"lift\", ax=ax1\n)\nrules[[\"confidence\",\"lift\"]].plot(\n    kind=\"scatter\", x=\"confidence\", y=\"lift\", ax=ax2, color=\"orange\", alpha=0.3\n)\nax1.legend([\"lift vs. support\",], loc=\"upper right\")\nax2.legend([\"lift vs. confidence\",], loc=\"upper left\")\nplt.grid()\nplt.show() \n```", "```py\ncustomer_item_matrix = df.pivot_table(\n    index='CustomerID',\n    columns='StockCode',\n    values='Quantity',\n    aggfunc='sum'\n) \n```", "```py\ncustomer_item_matrix = customer_item_matrix.map(\n    lambda x: 1 if x > 0 else 0\n) \n```", "```py\nfrom sklearn.metrics.pairwise import cosine_similarity\nuser_user_sim_matrix = pd.DataFrame(\n    cosine_similarity(customer_item_matrix)\n)\nuser_user_sim_matrix.columns = customer_item_matrix.index\nuser_user_sim_matrix['CustomerID'] = customer_item_matrix.index\nuser_user_sim_matrix = user_user_sim_matrix.set_index('CustomerID') \n```", "```py\nuser_user_sim_matrix.loc[\n    [12347.0, 12348.0, 12349.0, 12350.0, 12352.0],\n    [12347.0, 12348.0, 12349.0, 12350.0, 12352.0]\n] \n```", "```py\nTARGET_CUSTOMER = 14806.0\nprint(\"Similar Customers to TARGET\")\nuser_user_sim_matrix.loc[\nTARGET_CUSTOMER\n].sort_values(ascending=False).head(10) \n```", "```py\n    items_bought_by_target = set(\n        df.loc[\n            df[\"CustomerID\"] == TARGET_CUSTOMER\n        ][\"StockCode\"].unique()\n    ) \n    ```", "```py\n    items_bought_by_sim = set(\n        df.loc[\n            df[\"CustomerID\"] == 13919.0\n        ][\"StockCode\"].unique()\n    ) \n    ```", "```py\n    items_bought_by_sim_but_not_by_target = items_bought_by_sim - items_bought_by_target \n    ```", "```py\n    df.loc[\n        df[\"StockCode\"].isin(items_bought_by_sim_but_not_by_target)\n    ][[\"StockCode\", \"Description\"]].drop_duplicates() \n    ```", "```py\ntop10_similar_users = user_user_sim_matrix.loc[\n    TARGET_CUSTOMER\n].sort_values(\n    ascending=False\n).head(11).to_dict()\npotential_rec_items = {}\nfor user, cos_sim in top10_similar_users.items():\n    if user == TARGET_CUSTOMER:\n        continue\n\n    items_bought_by_sim = list(set(\n        df.loc[\n            df[\"CustomerID\"] == user\n        ][\"StockCode\"].unique()\n    ))\n    for each_item in items_bought_by_sim:\n        if each_item not in potential_rec_items:\n            potential_rec_items[each_item] = 0\n        potential_rec_items[each_item] += cos_sim\npotential_rec_items = [(key, val) for key, val in potential_rec_items.items()]\npotential_rec_items = sorted(\n    potential_rec_items, key=lambda x: x[1], reverse=True\n) \n```", "```py\ntop_10_items = [x[0] for x in potential_rec_items[:10]]\ndf.loc[\n    df[\"StockCode\"].isin(top_10_items)\n][[\"StockCode\", \"Description\"]].drop_duplicates().set_index(\n    \"StockCode\"\n).loc[top_10_items] \n```", "```py\npotential_rec_items = {}\nfor user, cos_sim in top10_similar_users.items():\n    if user == TARGET_CUSTOMER:\n        continue\n\n    items_bought_by_sim = list(set(\n        df.loc[\n            df[\"CustomerID\"] == user\n        ][\"StockCode\"].unique()\n    ))\n    for each_item in items_bought_by_sim:\n        if each_item not in potential_rec_items:\n            potential_rec_items[each_item] = 0\n        potential_rec_items[each_item] += cos_sim\npotential_rec_items = [(key, val) for key, val in potential_rec_items.items()]\npotential_rec_items = sorted(\n    potential_rec_items, key=lambda x: x[1], reverse=True\n) \n```", "```py\nitem_item_sim_matrix = pd.DataFrame(\n    cosine_similarity(customer_item_matrix.T)\n) \n```", "```py\nmost_similar_items = item_item_sim_matrix.loc[\n    \"23166\"\n].sort_values(ascending=False).head(10) \n```", "```py\nrec_items = [\n    x for x in most_similar_items.index if x != \"23166\"\n]\ndf.loc[\n    df['StockCode'].isin(rec_items),\n    ['StockCode', 'Description']\n].drop_duplicates().set_index('StockCode').loc[rec_items] \n```", "```py\nitem_item_sim_matrix[[\n    \"23166\", \"22720\", \"23243\"\n]].mean(axis=1).sort_values(\n    ascending=False\n).head(10) \n```", "```py\nrec_items = [\n    x for x in item_item_sim_matrix[[\n        \"23166\", \"22720\", \"23243\"\n    ]].mean(axis=1).sort_values(ascending=False).head(13).index\n    if x not in [\"23166\", \"22720\", \"23243\"]\n]\ndf.loc[\n    df['StockCode'].isin(rec_items),\n    ['StockCode', 'Description']\n].drop_duplicates().set_index('StockCode').loc[rec_items] \n```"]