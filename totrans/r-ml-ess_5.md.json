["```py\n# load the flag features\nsetwd('<INSER YOUR DIRECTORY/PATH>\")\ndfFeatures <- read.table(file = 'dtFeatures.txt')\nlibrary(\"data.table\")\ndtFeatures <- data.table(dfFeatures)\n```", "```py\n# explore the features\nstr(dtFeatures)\nClasses 'data.table' and 'data.frame':\t194 obs. of  38 variables:\n $ language     : Factor w/ 10 levels \"Arabic\",\"Chinese\",..: 8 7 1 3 7 8 3 3 10 10 ...\n $ red          : Factor w/ 2 levels \"no\",\"yes\": 2 2 2 2 2 2 1 2 1 1 ...\n $ green        : Factor w/ 2 levels \"no\",\"yes\": 2 1 2 1 1 1 1 1 1 1 ...\n $ blue         : Factor w/ 2 levels \"no\",\"yes\": 1 1 1 2 2 1 2 2 2 2 ...\n\n```", "```py\n# K-MEANS\n# see the function documentation\nhelp(kmeans)\n```", "```py\n    arrayFeatures <- names(dtFeatures)[-1]\n    ```", "```py\n    dtFeaturesKm <- dtFeatures[, arrayFeatures, with=F]\n    ```", "```py\n    dtFeaturesKm[, as.numeric(red)]\n    ```", "```py\n    dtFeaturesKm[, as.numeric(red) - 1]\n    ```", "```py\n    for(nameCol in arrayFeatures)\n      dtFeaturesKm[\n        , eval(nameCol) := as.numeric(get(nameCol)) - 1\n        ]\n    ```", "```py\n    View(dtFeaturesKm)\n    ```", "```py\n    matrixFeatures <- as.matrix(dtFeaturesKm)\n    ```", "```py\n# cluster the data using the k-means\nnCenters <- 8\nmodelKm <- kmeans(\n  x = matrixFeatures,\n  centers = nCenters\n  )\n```", "```py\nnames(modelKm)\n[1] \"cluster\"      \"centers\"      \"totss\"        \"withinss\" \n[5] \"tot.withinss\" \"betweenss\"    \"size\"         \"iter\" \n[9] \"ifault\" \n\n```", "```py\nView(modelKm$centers)\n```", "```py\n# add the cluster to the data table\ndtFeatures[, clusterKm := modelKm$cluster]\n```", "```py\n# aggregate the data by cluster\nnameCluster <- 'clusterKm'\n```", "```py\ndtFeatures[, list(.N), by=nameCluster]\n```", "```py\ndtFeatures[, list(nCountries=.N), by=nameCluster]\n```", "```py\ndtFeatures[, table(language)]\n```", "```py\ndtFeatures[, as.list(table(language))]\n```", "```py\ndtFeatures[, as.list(table(language)), by=nameCluster]\n```", "```py\ndtFeatures[, as.list(table(language) / .N), by=nameCluster]\n```", "```py\ndtClusters <- dtFeatures[\n  , c(list(nCountries=.N), as.list(table(language) / .N)),\n  by=nameCluster\n  ]\n```", "```py\n    arrayLanguages <- dtFeatures[, unique(language)]\n    ```", "```py\n    dtBarplot <- dtClusters[, arrayLanguages, with=F]\n    ```", "```py\n    matrixBarplot <- t(as.matrix(dtBarplot))\n    ```", "```py\n    nBarplot <- dtClusters[, nCountries]\n    ```", "```py\n    namesLegend <- names(dtBarplot)\n    ```", "```py\n    help(substring)\n    namesLegend <- substring(namesLegend, 1, 12)\n    ```", "```py\n    arrayColors <- rainbow(length(namesLegend))\n    ```", "```py\n    plotTitle <- paste('languages in each cluster of', nameCluster)\n    ```", "```py\n# build the histogram\nbarplot(\n  height = matrixBarplot,\n  names.arg = nBarplot,\n  col = arrayColors,\n  legend.text = namesLegend,\n  xlim = c(0, ncol(matrixBarplot) * 2),\n  main = plotTitle,\n  xlab = 'cluster'\n)\n```", "```py\n# define a function to build the histogram\nplotCluster <- function(\n  dtFeatures, # data table with the features\n  nameCluster # name of the column defining the cluster\n){\n  # aggregate the data by cluster\n  dtClusters <- dtFeatures[\n    , c(list(nCountries=.N), as.list(table(language) / .N)),\n    by=nameCluster]\n\n  # prepare the histogram inputs\n  arrayLanguages <- dtFeatures[, unique(language)]\n  dtBarplot <- dtClusters[, arrayLanguages, with=F]\n  matrixBarplot <- t(as.matrix(dtBarplot))\n  nBarplot <- dtClusters[, nCountries]\n  namesLegend <- names(dtBarplot)\n  namesLegend <- substring(namesLegend, 1, 12)\n  arrayColors <- rainbow(length(namesLegend))\n\n  # build the histogram\n  barplot(\n    height = matrixBarplot,\n    names.arg = nBarplot,\n    col = arrayColors,\n    legend.text = namesLegend,\n    xlim=c(0, ncol(matrixBarplot) * 2),\n    main = paste('languages in each cluster of', nameCluster),\n    xlab = 'cluster'\n  )\n\n}\n```", "```py\n# visualize the histogram using the functions\nplotCluster(dtFeatures, nameCluster)\n```", "```py\n# define a function for visualizing the world map\ninstall.packages('rworldmap')\nlibrary(rworldmap)\n```", "```py\ndtFeatures[, country := rownames(dfFeatures)]\n```", "```py\ndtFeatures[country == 'Germany-FRG', country := 'Germany']\ndtFeatures[country == 'USSR', country := 'Russia']\n```", "```py\nplotMap <- function(\n  dtFeatures, # data table with the countries\n  colPlot # feature to visualize\n  colourPalette = 'negpos8' # colors\n){\n  # function for visualizing a feature on the world map\n```", "```py\n  # define the column to plot\n  dtFeatures[, colPlot := NULL]\n  dtFeatures[, colPlot := substring(get(colPlot), 1, 12)]\n```", "```py\n  # prepare the data to plot\n  mapFeatures <- joinCountryData2Map(\n    dtFeatures[, c('country', 'colPlot'), with=F],\n    joinCode = 'NAME',\n    nameJoinColumn = 'country'\n  )\n```", "```py\n  # build the chart\n  mapCountryData(\n    mapFeatures,\n    nameColumnToPlot='colPlot',\n    catMethod = 'categorical',\n    colourPalette = colourPalette,\n    missingCountryCol = 'gray',\n    mapTitle = colPlot\n  )\n\n}\n```", "```py\nplotMap(dtFeatures, colPlot = 'clusterKm')\n```", "```py\n# HIERARCHIC CLUSTERING\n# function for hierarchic clustering\nhelp(hclust)\n```", "```py\n# build the distance matrix\nhelp(dist)\n```", "```py\nmatrixDistances <- dist(matrixFeatures, method = 'manhattan')\n```", "```py\n# build the hierarchic clustering model\nmodelHc <- hclust(d = matrixDistances, method = 'complete')\n```", "```py\n# visualize the hierarchic clustering model\nplot(modelHc, labels = FALSE, hang = -1)\n```", "```py\n# define the clusters\nheightCut <- 17.5\nabline(h=heightCut, col='red')\n```", "```py\ncutree(modelHc, h = heightCut)\n```", "```py\ndcFeatures[, clusterHc := cutree(modelHc, h = heightCut)]\n```", "```py\n# visualize the clusters\nplotCluster(dtFeatures, nameCluster = 'clusterHc')\n```", "```py\nplotMap(dtFeatures, colPlot = 'clusterHc')\n```", "```py\n# define the feature names\narrayFeatures <- names(dfFeatures)[-1]\n# add the country to dtFeatures\ndtFeatures[, country := rownames(dfFeatures)]\ndtFeatures[country == 'Germany-FRG', country := 'Germany']\ndtFeatures[country == 'USSR', country := 'Russia']\n```", "```py\ndtFeatures[, table(language)]\n```", "```py\nplotMap(dtFeatures, colPlot = 'language', colourPalette = 'rainbow')\n```", "```py\n# visualize the languages\nhelp(pie)\n```", "```py\narrayTable <- dtFeatures[, table(language)]\n```", "```py\npie(arrayTable)\n```", "```py\n# reduce the number of groups\nlistGroups <- list(\n  english = 'English',\n  spanish = 'Spanish',\n  frger = c('French', 'German'),\n  indoEu = c('Slavic', 'Other Indo-European'),\n  arabic = 'Arabic',\n  other = c(\n    'Japanese/Turkish/Finnish/Magyar', 'Chinese', 'Others'\n    )\n  )\n```", "```py\nfor(nameGroup in names(listGroups)){\n```", "```py\n  dtFeatures[\n    language %in% listGroups[[nameGroup]],\n    language := nameGroup\n    ]\n}\n```", "```py\ndtFeatures[, language]\n```", "```py\ndtFeatures[, language := factor(language)]\ndtFeatures[, language]\n```", "```py\n# visualize the language groups\nplotMap(dtFeatures, colPlot = 'language')\n```", "```py\npie(dtFeatures[, table(language)])\n```", "```py\n# install and load the package\ninstall.packages(\"kknn\")\nlibrary(kknn)\n```", "```py\nhelp(kknn)\n```", "```py\n    formulaKnn <- 'language ~'\n    ```", "```py\n    for(nameFeature in arrayFeatures){\n      formulaKnn <- paste(formulaKnn, '+', nameFeature)\n    }\n    ```", "```py\n    formulaKnn <- formula(formulaKnn)\n    ```", "```py\nhelp(sample)\n```", "```py\n# split the dataset into training and test set\nindexTrain <- sample(\n  x=c(TRUE, FALSE),\n  size=nrow(dtFeatures),\n  replace=TRUE,\n  prob=c(0.8, 0.2)\n)\n```", "```py\ndtTrain <- dtFeatures[indexTrain]\n```", "```py\ndtTest <- dtFeatures[!indexTrain]\n```", "```py\n# build the model\nmodelKnn <- kknn(\n  formula = formulaKnn,\n  train = dtTrain,\n  test = dtTest,\n  k = 10,\n  kernel = 'rectangular',\n  distance = 1\n)\n```", "```py\n# extract the fitted values\nmodelKnn$fitted.values\n```", "```py\n# add the estimated language to dtTest\ndtTest[, languagePred := modelKnn$fitted.values]\n```", "```py\n# evaluate the model\npercCorrect <- dtTest[, sum(language == languagePred) / .N]\npercCorrect\n```", "```py\n# compute the information gain ratio\nlibrary('FSelector')\nformulaFeat <- paste(arrayFeatures, collapse = ' + ')\nformulaGain <- formula(paste('language', formulaFeat, sep = ' ~ '))\ndfGains <- information.gain(language~., dtTrain)\ndfGains$feature <- row.names(dfGains)\ndtGains <- data.table(dfGains)\ndtGains <- dtGains[order(attr_importance, decreasing = T)]\nView(dtGains)\n```", "```py\n# re-define the feature vector\narrayFeatures <- dtGains[, feature]\n```", "```py\n# define a function for building the formula\nbuildFormula <- function(\n  arrayFeatures, # feature vector\n  nFeatures # number of features to include\n){\n```", "```py\n    arrayFeaturesTop <- arrayFeatures[1:nFeatures]\n    ```", "```py\n    formulaKnn <- paste('language', '~')\n    ```", "```py\n    for(nameFeature in arrayFeaturesTop){\n      formulaKnn <- paste(formulaKnn, '+', nameFeature)\n    }\n    ```", "```py\n    formulaKnn <- formula(formulaKnn)\n    ```", "```py\n      return(formulaKnn)\n    }\n    ```", "```py\n    formulaKnnTop <- buildFormula(arrayFeatures, nFeatures = 10)\n    formulaKnnTop\n    ```", "```py\n# build the model\nmodelKnn <- kknn(\n  formula = formulaKnnTop,\n  train = dtTrain,\n  test = dtTest,\n  k = 10,\n  kernel = 'rectangular',\n  distance = 1\n)\n```", "```py\n# add the output to dtTest\ndtTest[, languagePredTop := modelKnn$fitted.values]\n```", "```py\n# evaluate the model\npercCorrectTop <- dtTest[, sum(language == languagePredTop) / .N]\npercCorrectTop\n```", "```py\n# build the weighted knn model\nmodelKnn <- kknn(\n  formula = formulaKnn,\n  train = dtTrain,\n  test = dtTest,\n  k = 10,\n  kernel = 'optimal',\n  distance = 1\n)\n```", "```py\n# add the estimated language to dtTest\ndtTest[, languagePredWeighted := modelKnn$fitted.values]\npercCorrectWeighted <- dtTest[\n  , sum(language == languagePredWeighted) / .N\n  ]\n```"]