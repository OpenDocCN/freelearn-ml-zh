["```py\nIn [1]: from sklearn import datasets...     X, y = datasets.make_classification(n_samples=100, n_features=2,...                                         n_redundant=0, n_classes=2,...                                         random_state=7816)\n```", "```py\nIn [2]: X.shape, y.shapeOut[2]: ((100, 2), (100,))\n```", "```py\nIn [3]: import matplotlib.pyplot as plt\n...     %matplotlib inline\n...     plt.scatter(X[:, 0], X[:, 1], c=y, s=100)\n...     plt.xlabel('x values')\n...     plt.ylabel('y values')\nOut[3]: <matplotlib.text.Text at 0x24f7ffb00f0>\n```", "```py\nIn [4]: import numpy as np...     X = X.astype(np.float32)...     y = y * 2 - 1\n```", "```py\nIn [5]: from sklearn import model_selection as ms...     X_train, X_test, y_train, y_test = ms.train_test_split(...         X, y, test_size=0.2, random_state=42...     )\n```", "```py\nIn [6]: import cv2\n...     svm = cv2.ml.SVM_create()\n```", "```py\nIn [7]: svm.setKernel(cv2.ml.SVM_LINEAR)\n```", "```py\nIn [8]: svm.train(X_train, cv2.ml.ROW_SAMPLE, y_train)\n      Out[8]: True\n```", "```py\nIn [9]: _, y_pred = svm.predict(X_test)\n```", "```py\nIn [10]: from sklearn import metrics\n...      metrics.accuracy_score(y_test, y_pred)\nOut[10]: 0.80000000000000004\n```", "```py\nIn [13]: kernels = [cv2.ml.SVM_LINEAR, cv2.ml.SVM_INTER,...                 cv2.ml.SVM_SIGMOID, cv2.ml.SVM_RBF]\n```", "```py\nIn [14]: for idx, kernel in enumerate(kernels):\n```", "```py\nIn [7]: win_size = (48, 96)\n...     block_size = (16, 16)\n...     block_stride = (8, 8)\n...     cell_size = (8, 8)\n...     num_bins = 9\n...     hog = cv2.HOGDescriptor(win_size, block_size, block_stride,\n...                             cell_size, num_bins)\n```", "```py\nIn [8]: import numpy as np\n...     import random\n...     random.seed(42)\n...     X_pos = []\n...     for i in random.sample(range(900), 400):\n...         filename = \"%s/per%05d.ppm\" % (extractdir, i)\n...         img = cv2.imread(filename)\n...         if img is None:\n...             print('Could not find image %s' % filename)\n...             continue\n...         X_pos.append(hog.compute(img, (64, 64)))\n```", "```py\nIn [9]: X_pos = np.array(X_pos, dtype=np.float32)\n...     y_pos = np.ones(X_pos.shape[0], dtype=np.int32)\n...     X_pos.shape, y_pos.shape\nOut[9]: ((399, 1980, 1), (399,))\n```", "```py\nIn [15]: def train_svm(X_train, y_train):\n...          svm = cv2.ml.SVM_create()\n...          svm.train(X_train, cv2.ml.ROW_SAMPLE, y_train)\n...          return svm\n```", "```py\nIn [16]: def score_svm(svm, X, y):\n...          from sklearn import metrics\n...          _, y_pred = svm.predict(X)\n...          return metrics.accuracy_score(y, y_pred)\n```", "```py\nIn [17]: svm = train_svm(X_train, y_train)\nIn [18]: score_svm(svm, X_train, y_train)\nOut[18]: 1.0\nIn [19]: score_svm(svm, X_test, y_test)\nOut[19]: 0.64615384615384619\n```", "```py\nIn [23]: stride = 16\n...      found = []\n...      for ystart in np.arange(0, img_test.shape[0], stride):\n...          for xstart in np.arange(0, img_test.shape[1], stride):\n```", "```py\n...              if ystart + hroi > img_test.shape[0]:\n...                  continue\n...              if xstart + wroi > img_test.shape[1]:\n...                  continue\n```", "```py\n...              roi = img_test[ystart:ystart + hroi,\n...                             xstart:xstart + wroi, :]\n...              feat = np.array([hog.compute(roi, (64, 64))])\n...              _, ypred = svm.predict(feat)\n```", "```py\n...              if np.allclose(ypred, 1):\n...                  found.append((ystart, xstart, hroi, wroi))\n```", "```py\nIn [24]: rho, _, _ = svm.getDecisionFunction(0)\n...      sv = svm.getSupportVectors()\n...      hog.setSVMDetector(np.append(sv.ravel(), rho))\n```", "```py\nIn [25]: found = hog.detectMultiScale(img_test)\n```", "```py\nIn [26]: hogdef = cv2.HOGDescriptor()\n...      pdetect = cv2.HOGDescriptor_getDefaultPeopleDetector()\nIn [27]: hogdef.setSVMDetector(pdetect)\nIn [28]: found, _ = hogdef.detectMultiScale(img_test)\n```", "```py\nIn [29]: from matplotlib import patches\n...      fig = plt.figure()\n...      ax = fig.add_subplot(111)\n...      ax.imshow(cv2.cvtColor(img_test, cv2.COLOR_BGR2RGB))\n```", "```py\n...      for f in found:\n...          ax.add_patch(patches.Rectangle((f[0], f[1]), f[2], f[3],\n...                                         color='y', linewidth=3,\n...                                         fill=False))\n```", "```py\nIn [1]: import numpy as np\n...     import pandas as pd\n...     import matplotlib.pyplot as plt \n...     %matplotlib inline\n...     from sklearn.utils import shuffle\n...     from sklearn.svm import SVC\n...     from sklearn.model_selection import cross_val_score, GridSearchCV\n```", "```py\nIn [2]: datadir = \"data\"\n...     dataset = \"multiclass\"\n...     train = shuffle(pd.read_csv(\"data/dataset/train.csv\"))\n...     test = shuffle(pd.read_csv(\"data/dataset/test.csv\"))\n```", "```py\nIn [3]: train.isnull().values.any()\nOut[3]: False\nIn [4]: test.isnull().values.any()\nOut[4]: False \n```", "```py\nIn [5]: train_outcome = pd.crosstab(index=train[\"Activity\"], # Make a crosstab\n columns=\"count\") # Name the count column\n... train_outcome\n```", "```py\nIn [6]: X_train = pd.DataFrame(train.drop(['Activity','subject'],axis=1))\n...     Y_train_label = train.Activity.values.astype(object)\n...     X_test = pd.DataFrame(test.drop(['Activity','subject'],axis=1)) \n...     Y_test_label = test.Activity.values.astype(object)\n```", "```py\nIn [7]: from sklearn import preprocessing\n... encoder = preprocessing.LabelEncoder()\n```", "```py\nIn [8]: encoder.fit(Y_train_label)\n...     Y_train = encoder.transform(Y_train_label)\n...     encoder.fit(Y_test_label)\n...     Y_test = encoder.transform(Y_test_label) \n```", "```py\nIn [9]: from sklearn.preprocessing import StandardScaler\n...     scaler = StandardScaler()\n...     X_train_scaled = scaler.fit_transform(X_train)\n...     X_test_scaled = scaler.transform(X_test)\n```", "```py\nIn [10]: params_grid = [{'kernel': ['rbf'], 'gamma': [1e-3, 1e-4],\n                     'C': [1, 10, 100, 1000]},\n                    {'kernel': ['linear'], 'C': [1, 10, 100, 1000]}]\n```", "```py\nIn [11]: svm_model = GridSearchCV(SVC(), params_grid, cv=5)\n...      svm_model.fit(X_train_scaled, Y_train)\n```", "```py\nIn [12]: print('Best score for training data:', svm_model.best_score_,\"\\n\") \n...      print('Best C:',svm_model.best_estimator_.C,\"\\n\") \n...      print('Best Kernel:',svm_model.best_estimator_.kernel,\"\\n\")\n...      print('Best Gamma:',svm_model.best_estimator_.gamma,\"\\n\")\nOut[12]: Best score for training data: 0.986\n...      Best C: 100\n...      Best Kerne: rbf\n...      Best Gamma: 0.001\n```", "```py\nIn [13]: final_model = svm_model.best_estimator_\n... print(\"Training set score for SVM: %f\" % final_model.score(X_train_scaled , Y_train))\n... print(\"Testing set score for SVM: %f\" % final_model.score(X_test_scaled , Y_test ))\nOut[13]: Training set score for SVM: 1.00\n... Testing set score for SVM: 0.9586\n```"]