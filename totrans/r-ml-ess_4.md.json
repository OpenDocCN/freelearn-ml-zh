["```py\n    setwd('path/containing/the/data')\n    ```", "```py\n    dfFlag <- read.csv('flag.data', header=FALSE)\n    ```", "```py\nstr(dfFlag)\n'data.frame':    194 obs. of  30 variables:\n $ V1 : Factor w/ 194 levels \"Afghanistan\",..: 1 2 3 4 5 6 7 8 9 10 ...\n $ V2 : int  5 3 4 6 3 4 1 1 2 2 ...\n $ V3 : int  1 1 1 3 1 2 4 4 3 3 ...\n $ V4 : int  648 29 2388 0 0 1247 0 0 2777 2777 ...\n $ V5 : int  16 3 20 0 0 7 0 0 28 28 ...\n $ V6 : int  10 6 8 1 6 10 1 1 2 2 ...\n $ V7 : int  2 6 2 1 0 5 1 1 0 0 ...\n $ V8 : int  0 0 2 0 3 0 0 0 0 0 ...\n $ V9 : int  3 0 0 0 0 2 1 1 3 3 ...\n $ V10: int  5 3 3 5 3 3 3 5 2 3 ...\n $ V11: int  1 1 1 1 1 1 0 1 0 0 ...\n $ V12: int  1 0 1 0 0 0 0 0 0 0 ...\n $ V13: int  0 0 0 1 1 0 1 1 1 1 ...\n $ V14: int  1 1 0 1 1 1 0 1 0 1 ...\n $ V15: int  1 0 1 1 0 0 1 1 1 1 ...\n $ V16: int  1 1 0 0 0 1 0 1 0 0 ...\n $ V17: int  0 0 0 1 0 0 1 0 0 0 ...\n $ V18: Factor w/ 8 levels \"black\",\"blue\",..:5 7 5 2 4 7 8 7 2 2 ...\n $ V19: int  0 0 0 0 0 0 0 0 0 0 ...\n $ V20: int  0 0 0 0 0 0 0 0 0 0 ...\n $ V21: int  0 0 0 0 0 0 0 0 0 0 ...\n $ V22: int  0 0 0 0 0 0 0 0 0 0 ...\n $ V23: int  1 1 1 0 0 1 0 1 0 1 ...\n $ V24: int  0 0 1 0 0 0 0 0 0 0 ...\n $ V25: int  0 0 0 1 0 0 0 1 0 0 ...\n $ V26: int  1 0 0 1 0 1 0 0 0 0 ...\n $ V27: int  0 1 0 1 0 0 1 0 0 0 ...\n $ V28: int  0 0 0 0 0 0 0 0 0 0 ...\n $ V29: Factor w/ 7 levels \"black\",\"blue\",..: 1 6 4 2 2 6 7 1 2 2 ...\n $ V30: Factor w/ 8 levels \"black\",\"blue\",..: 5 7 8 7 7 1 2 7 2 2 ...\n\n```", "```py\n    nameCountry <- 'name'\n    ```", "```py\n    namesGeography <- c('continent', 'zone', 'area')\n    ```", "```py\n    namesDemography <- c('population', 'language', 'religion')\n    ```", "```py\n    namesAttributes <- c(nameCountry, namesGeography, namesDemography)\n    ```", "```py\n    namesNumbers <- c('bars', 'stripes', 'colors')\n    ```", "```py\n    namesColors <- c('red', 'green', 'blue', 'gold', 'white', 'black', 'orange')\n    ```", "```py\n    nameMainColor <- 'mainhue'\n    ```", "```py\n    namesDrawings <- c(\n      'circles', 'crosses', 'saltires', 'quarters',\n      'sunstars', 'crescent', 'triangle', 'icon', 'animate', 'text'\n    )\n    ```", "```py\n    namesAngles <- c('topleft', 'botright')\n    ```", "```py\n    namesFlag <- c(namesNumbers, namesColors, nameMainColor, namesDrawings, namesAngles)\n    ```", "```py\n    names(dfFlag) <- c(namesAttributes, namesFlag)\n    ```", "```py\n    library(data.table)\n    dtFlag <- data.table(dfFlag)\n    ```", "```py\n    dtFlag[1:20, continent]\n    [1] 5 3 4 6 3 4 1 1 2 2 6 3 1 5 5 1 3 1 4 1\n\n    ```", "```py\n    vectorContinents <- c('N.America', 'S.America', 'Europe', 'Africa', 'Asia', 'Oceania')\n    ```", "```py\n    dtFlag[, continent := factor(continent, labels=vectorContinents)]\n    ```", "```py\n    vectorZones <- c('NE', 'SE', 'SW', 'NW')\n    dtFlag[, zone := factor(zone, labels=vectorZones)]\n    ```", "```py\n    vectorLanguages <- c(\n      'English', 'Spanish', 'French', 'German', 'Slavic',\n      'Other Indo-European', 'Chinese', 'Arabic',\n      'Japanese/Turkish/Finnish/Magyar', 'Others')\n      dtFlag[, language := factor(language, labels=vectorLanguages)]\n    ```", "```py\n    vectorReligions <- c(\n      'Catholic', 'Other Christian', 'Muslim', 'Buddhist',\n      'Hindu', 'Ethnic', 'Marxist', 'Others'\n    )\n    dtFlag[, religion := factor(religion, labels=vectorReligions)]\n    ```", "```py\nstr(dtFlag)\nClasses 'data.table' and 'data.frame':\t194 obs. of  30 variables:\n $ name      : Factor w/ 194 levels \"Afghanistan\",..: 1 2 3 4 5 6 7 8 9 10 ...\n $ continent : int  5 3 4 6 3 4 1 1 2 2 ...\n $ zone      : Factor w/ 4 levels \"NE\",\"SE\",\"SW\",..: 1 1 1 3 1 2 4 4 3 3 ...\n $ area      : int  648 29 2388 0 0 1247 0 0 2777 2777 ...\n $ population: int  16 3 20 0 0 7 0 0 28 28 ...\n $ language  : int  10 6 8 1 6 10 1 1 2 2 ...\n $ religion  : int  2 6 2 1 0 5 1 1 0 0 ...\n $ bars      : int  0 0 2 0 3 0 0 0 0 0 ...\n $ stripes   : int  3 0 0 0 0 2 1 1 3 3 ...\n $ colors    : int  5 3 3 5 3 3 3 5 2 3 ...\n $ red       : int  1 1 1 1 1 1 0 1 0 0 ...\n $ green     : int  1 0 1 0 0 0 0 0 0 0 ...\n $ blue      : int  0 0 0 1 1 0 1 1 1 1 ...\n $ gold      : int  1 1 0 1 1 1 0 1 0 1 ...\n $ white     : int  1 0 1 1 0 0 1 1 1 1 ...\n $ black     : int  1 1 0 0 0 1 0 1 0 0 ...\n $ orange    : int  0 0 0 1 0 0 1 0 0 0 ...\n $ mainhue   : Factor w/ 8 levels \"black\",\"blue\",..: 5 7 5 2 4 7 8 7 2 2 ...\n $ circles   : int  0 0 0 0 0 0 0 0 0 0 ...\n $ crosses   : int  0 0 0 0 0 0 0 0 0 0 ...\n $ saltires  : int  0 0 0 0 0 0 0 0 0 0 ...\n $ quarters  : int  0 0 0 0 0 0 0 0 0 0 ...\n $ sunstars  : int  1 1 1 0 0 1 0 1 0 1 ...\n $ crescent  : int  0 0 1 0 0 0 0 0 0 0 ...\n $ triangle  : int  0 0 0 1 0 0 0 1 0 0 ...\n $ icon      : int  1 0 0 1 0 1 0 0 0 0 ...\n $ animate   : int  0 1 0 1 0 0 1 0 0 0 ...\n $ text      : int  0 0 0 0 0 0 0 0 0 0 ...\n $ topleft   : Factor w/ 7 levels \"black\",\"blue\",..: 1 6 4 2 2 6 7 1 2 2 ...\n $ botright  : Factor w/ 8 levels \"black\",\"blue\",..: 5 7 8 7 7 1 2 7 2 2 ...\n - attr(*, \".internal.selfref\")=<externalptr> \n\n```", "```py\ntable(dtFlag[, mainhue])\nblack   blue  brown   gold  green orange    red  white \n 5     40      2     19     31      4     71     22\n\n```", "```py\nnameCol <- 'mainhue'\ndtFlag[, table(get(nameCol))]\n```", "```py\nlistTableCol = lapply(\n  namesAngles, function(nameCol){\n    dtFlag[, table(get(nameCol))]\n  })\nlistTableCol[[1]]\n black   blue   gold  green orange    red  white \n 12     43      6     32      4     56     41 \n\n```", "```py\nnameCol <- 'language'\nfreqValues <- dtFlag[, table(get(nameCol))]\n```", "```py\nnames(freqValues)\n```", "```py\nbarplot(\n  height = freqValues,\n  names.arg = names(freqValues),\n  main = nameCol,\n  col = rainbow(length(freqValues)),\n  ylab = 'number of flags'\n)\n```", "```py\nbarplotAttribute <- function(dtData, nameCol)\n{\n  # define the frequency\n  freqValues <- dtData[, table(get(nameCol))]\n  # define the percentage\n  percValues <- freqValues / sum(freqValues)\n  percValues <- round(percValues * 100)\n  percValues <- paste(percValues, '%')\n  # generate the histogram\n  barplot(\n    height = freqValues,\n    names.arg = names(freqValues),\n    main = nameCol,\n    col = rainbow(length(freqValues)),\n    legend.text = percValues,\n    ylab = 'number of flags'\n  )\n}\n```", "```py\nbarplotAttribute(dtFlag, 'stripes')\n```", "```py\nfor(nameCol in namesFlag)\n{\n  barplotAttribute(dtFlag, nameCol)\n  readline()\n}\n```", "```py\ndtFlag[, sum(red)]\n[1] 153\ndtFlag[, sum(get('red'))]\n[1] 153\n\n```", "```py\nnamesColors\n[1] \"red\"    \"green\"  \"blue\"   \"gold\"   \"white\"  \"black\"  \"orange\"\n\n```", "```py\ndtFlag[, sum(get(namesColors[1]))]\n[1] 153\n\n```", "```py\nsapply(namesColors, function(nameColor){\n  dtFlag[, sum(get(nameColor))]\n})\nred  green   blue   gold  white  black orange \n153     91     99     91    146     52     26 \n\n```", "```py\nlibrary('rpart')\nlibrary('rpart.plot')\n```", "```py\nformulaRpart <- 'language ~ '\nfor(name in namesFlag){\n  formulaRpart <- paste(formulaRpart, '+', name)\n}\nformulaRpart <- formula(formulaRpart)\n```", "```py\ntree <- rpart(formula=formulaRpart, data=dtFlag)\nprp(tree)\n```", "```py\ndtFeatures <- dtFlag[, c('language', namesFlag), with=FALSE]\n```", "```py\nplotTree <- function(dtFeatures){\n  formulaRpart <- paste(names(dtFeatures)[1], '~')\n  for(name in names(dtFeatures)[-1]){\n    formulaRpart <- paste(formulaRpart, '+', name)\n  }\n  formulaRpart <- formula(formulaRpart)\n  tree <- rpart(formula=formulaRpart, data=dtFeatures)\n  prp(tree)\n}\nplotTree(dtFeatures)\n```", "```py\nnamesProcessed <- c()\n```", "```py\nnameFeat <- 'red'\n```", "```py\nlength(unique(dtFeatures[, get(nameFeat)])) == 2\n```", "```py\nvectorFactor <- dtFeatures[\n  , factor(get(nameFeat), labels=c('no', 'yes'))\n]\nhead(vectorFactor)\n[1] yes yes yes yes yes yes\nLevels: no yes\n\n```", "```py\nfor(nameFeat in namesFlag){\n  if(length(unique(dtFeatures[, get(nameFeat)])) == 2){\n    vectorFactor <- dtFeatures[\n      , factor(get(nameFeat), labels=c('no', 'yes'))]\n    dtFeatures[, eval(nameFeat) := vectorFactor]\n    namesProcessed <- c(namesProcessed, nameFeat)\n  }\n}\n```", "```py\nsetdiff(namesFlag, namesProcessed)\n```", "```py\nbarplotAttribute(dtFeatures, 'bars')\n```", "```py\ndtFeatures[, nBars0 := bars == 0]\n```", "```py\ndtFeatures[, nBars1_2 := bars %in% c(1, 2)]\ndtFeatures[, nBars3 := bars == 3]\n```", "```py\ndtFeatures[, bars := NULL]\nnamesProcessed <- c(namesProcessed, 'bars')\n```", "```py\nbarplotAttribute(dtFeatures, 'stripes')\ndtFeatures[, nStrp0 := stripes == 0]\ndtFeatures[, nStrp2 := stripes == 2]\ndtFeatures[, nStrp3 := stripes == 3]\ndtFeatures[, nStrp5 := stripes == 5]\ndtFeatures[, stripes := NULL]\nnamesProcessed <- c(namesProcessed, 'stripes')\n\nbarplotAttribute(dtFeatures, 'colors')\ndtFeatures[, nCol12 := colors %in% c(1, 2)]\ndtFeatures[, nCol3 := colors == 3]\ndtFeatures[, nCol4_5 := colors %in% c(4, 5)]\ndtFeatures[, colors := NULL]\nnamesProcessed <- c(namesProcessed, 'colors')\n```", "```py\nfor(nameCol in setdiff(namesDrawings, namesProcessed)){\n  barplotAttribute(dtFeatures, nameCol)\n  readline()\n}\n```", "```py\nfor(nameCol in setdiff(namesDrawings, namesProcessed)){\n  dtFeatures[, eval(nameCol) := ifelse(get(nameCol) > 0, 'yes', 'no')]\n  namesProcessed <- c(namesProcessed, nameCol)\n}\n```", "```py\nfor(nameCol in setdiff(namesFlag, namesProcessed)){\n  barplotAttribute(dtFeatures, nameCol)\n  readline()\n}\n```", "```py\nnamesToDummy <- c(\"topleft\", \"botright\", \"mainhue\")\nfor(nameCol in namesToDummy){\n  frequencyColors <- dtFeatures[, list(.N), by=nameCol]\n  for(color in frequencyColors[N > 20, get(nameCol)]){\n    nameFeatNew <- paste(nameCol, color, sep='')\n    dtFeatures[, eval(nameFeatNew) := get(nameCol) == color]\n  }\n  dtFeatures[, eval(nameCol) := NULL]\n  namesProcessed <- c(namesProcessed, nameCol)\n}\n```", "```py\nfor(nameCol in names(dtFeatures)){\n  if(dtFeatures[, class(get(nameCol))] == 'logical'){\n    print(nameCol)\n    dtFeatures[, eval(nameCol) := ifelse(get(nameCol), 'yes', 'no')]\n  }\n}\n```", "```py\nplotTree(dtFeatures)\n```", "```py\ninstall.packages('FSelector')\nlibrary('FSelector')\n```", "```py\nnamesFeatures <- names(dtFeatures)[-1]\ndfGains <- information.gain(language~., dtFeatures)\n```", "```py\ndfGains$feature <- row.names(dfGains)\n```", "```py\ndtGains <- data.table(dfGains)\n```", "```py\ndtGains <- dtGains[order(attr_importance, decreasing = T)]\n head(dtGains)\n attr_importance      feature\n1:       0.1583055         blue\n2:       0.1537296     saltires\n3:       0.1313155 botrightblue\n4:       0.1262545  mainhueblue\n5:       0.1205012       nStrp3\n6:       0.1149405     quarters\n\n```", "```py\ndtGainsTop <- dtGains[1:12]\nbarplot(\n  height = dtGainsTop[, attr_importance],\n  names.arg = dtGainsTop[, feature],\n  main = 'information gain',\n  col = rainbow(nrow(dtGainsTop)),\n  legend.text = dtGainsTop[, feature],\n  xlim=c(0, 20)\n)\n```"]