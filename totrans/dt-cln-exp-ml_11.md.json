["```py\n    import pandas as pd\n    import numpy as np\n    from sklearn.model_selection import train_test_split\n    from sklearn.preprocessing import StandardScaler\n    from sklearn.svm import LinearSVR\n    from scipy.stats import uniform\n    from sklearn.impute import SimpleImputer\n    from sklearn.pipeline import make_pipeline\n    from sklearn.compose import ColumnTransformer\n    from sklearn.compose import TransformedTargetRegressor\n    from sklearn.impute import KNNImputer\n    from sklearn.model_selection import cross_validate, \\\n      KFold, GridSearchCV, RandomizedSearchCV\n    import sklearn.metrics as skmet\n    import matplotlib.pyplot as plt\n    ```", "```py\n    import os\n    import sys\n    sys.path.append(os.getcwd() + \"/helperfunctions\")\n    from preprocfunc import OutlierTrans\n    ```", "```py\nfftaxrate14 = pd.read_csv(\"data/fossilfueltaxrate14.csv\")\nfftaxrate14.set_index('countrycode', inplace=True)\nnum_cols = ['fuel_income_dependence',\n  'national_income_per_cap', 'VAT_Rate',  \n  'gov_debt_per_gdp', 'polity','goveffect',\n  'democracy_index']\ndummy_cols = 'democracy_polity','autocracy_polity',\n  'democracy', 'nat_oil_comp','nat_oil_comp_state']\nspec_cols = ['motorization_rate']\ntarget = fftaxrate14[['gas_tax_imp']]\nfeatures = fftaxrate14[num_cols + dummy_cols + spec_cols]\nX_train, X_test, y_train, y_test =  \\\n  train_test_split(features,\\\n    target, test_size=0.2, random_state=0)\n```", "```py\n    X_train.shape\n    (123, 13)\n    X_train[num_cols + spec_cols].\\\n      agg(['count','min','median','max']).T\n                          count min    median   max\n    fuel_income_dependence  121 0.00   0.10     34.23\n    national_income_per_cap 121 260.00 6,110.00 104,540.00\n    VAT_Rate                121 0.00   16.00    27.00\n    gov_debt_per_gdp        112 1.56   38.45    194.76\n    polity                  121 -10.00 6.00     10.00\n    goveffect               123 -2.04  -0.10    2.18\n    democracy_index         121 0.03   0.54     0.93\n    motorization_rate       100 0.00   0.20     0.81\n    X_train[dummy_cols].apply(pd.value_counts, normalize=True).T\n                                        0.00         1.00\n    democracy_polity                    0.42         0.58\n    autocracy_polity                    0.88         0.12\n    democracy                           0.41         0.59\n    nat_oil_comp                        0.54         0.46\n    nat_oil_comp_state                  0.76         0.24\n    X_train[dummy_cols].count()\n    democracy_polity           121\n    autocracy_polity           121\n    democracy                  123\n    nat_oil_comp               121\n    nat_oil_comp_state         121\n    ```", "```py\n    standtrans = make_pipeline(OutlierTrans(2), \n     SimpleImputer(strategy=\"median\"), StandardScaler())\n    cattrans = make_pipeline(SimpleImputer(strategy=\"most_frequent\"))\n    spectrans = make_pipeline(OutlierTrans(2), StandardScaler())\n    coltrans = ColumnTransformer(\n      transformers=[\n        (\"stand\", standtrans, num_cols),\n        (\"cat\", cattrans, dummy_cols),\n        (\"spec\", spectrans, spec_cols)\n      ]\n    )\n    ```", "```py\nsvr = LinearSVR(epsilon=0.2, max_iter=10000, \n  random_state=0)\npipe1 = make_pipeline(coltrans, \n  KNNImputer(n_neighbors=5), svr)\nttr=TransformedTargetRegressor(regressor=pipe1,\n  transformer=StandardScaler())\nttr.fit(X_train, y_train)\n```", "```py\n    coefs = ttr.regressor_['linearsvr'].coef_\n    np.column_stack((coefs.ravel(), num_cols + dummy_cols + spec_cols))\n    array([['-0.03040694175014407', 'fuel_income_dependence'],\n           ['0.10549935644031803', 'national_income_per_cap'],\n           ['0.49519936241642026', 'VAT_Rate'],\n           ['0.0857845735264331', 'gov_debt_per_gdp'],\n           ['0.018198547504343885', 'polity'],\n           ['0.12656984468734492', 'goveffect'],\n           ['-0.09889163752261303', 'democracy_index'],\n           ['-0.036584519840546594', 'democracy_polity'],\n           ['-0.5446613604546718', 'autocracy_polity'],\n           ['0.033234557366924815', 'democracy'],\n           ['-0.2048732386478349', 'nat_oil_comp'],\n           ['-0.6142887840649164', 'nat_oil_comp_state'],\n           ['0.14488410358761755', 'motorization_rate']], dtype='<U32')\n    ```", "```py\n    kf = KFold(n_splits=3, shuffle=True, random_state=0)\n    ttr.fit(X_train, y_train)\n    scores = cross_validate(ttr, X=X_train, y=y_train,\n      cv=kf, scoring=('r2', 'neg_mean_absolute_error'),\n        n_jobs=1)\n    print(\"Mean Absolute Error: %.2f, R-squared: %.2f\" %\n      (scores['test_neg_mean_absolute_error'].mean(),\n      scores['test_r2'].mean()))\n    Mean Absolute Error: -0.26, R-squared: 0.57\n    ```", "```py\nsvr = LinearSVR(max_iter=100000, random_state=0)\npipe1 = make_pipeline(coltrans, \n  KNNImputer(n_neighbors=5), svr)\nttr=TransformedTargetRegressor(regressor=pipe1,\n  transformer=StandardScaler())\nsvr_params = {\n  'regressor__linearsvr__epsilon': np.arange(0.1, 1.6, 0.1),\n  'regressor__linearsvr__C': np.arange(0.1, 1.6, 0.1)\n}\ngs = GridSearchCV(ttr,param_grid=svr_params, cv=3, \n  scoring='r2')\n%timeit gs.fit(X_train, y_train)\n26.2 s ± 50.7 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)\n```", "```py\n    gs.best_params_\n    {'regressor__linearsvr__C': 0.1, 'regressor__linearsvr__epsilon': 0.2}\n    gs.best_score_\n    0.599751107082899\n    ```", "```py\n    svr_params = {\n     'regressor__linearsvr__epsilon': uniform(loc=0, scale=1.5),\n     'regressor__linearsvr__C': uniform(loc=0, scale=1.5)\n    }\n    rs = RandomizedSearchCV(ttr, svr_params, cv=3, scoring='r2')\n    %timeit rs.fit(X_train, y_train)\n    1.21 s ± 24.5 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)\n    rs.best_params_\n    {'regressor__linearsvr__C': 0.23062453444814285,\n     'regressor__linearsvr__epsilon': 0.6976844872643301}\n    rs.best_score_\n    0.5785452537781279\n    ```", "```py\n    pred = rs.predict(X_test)\n    preddf = pd.DataFrame(pred, columns=['prediction'],\n      index=X_test.index).join(X_test).join(y_test)\n    preddf['resid'] = preddf.gas_tax_imp-preddf.prediction\n    ```", "```py\n    plt.hist(preddf.resid, color=\"blue\", bins=np.arange(-0.5,1.0,0.25))\n    plt.axvline(preddf.resid.mean(), color='red', linestyle='dashed', linewidth=1)\n    plt.title(\"Histogram of Residuals for Gas Tax Model\")\n    plt.xlabel(\"Residuals\")\n    plt.ylabel(\"Frequency\")\n    plt.xlim()\n    plt.show()\n    ```", "```py\n    plt.scatter(preddf.prediction, preddf.resid, color=\"blue\")\n    plt.axhline(0, color='red', linestyle='dashed', linewidth=1)\n    plt.title(\"Scatterplot of Predictions and Residuals\")\n    plt.xlabel(\"Predicted Gas Tax\")\n    plt.ylabel(\"Residuals\")\n    plt.show()\n    ```", "```py\n    import pandas as pd\n    import numpy as np\n    from sklearn.model_selection import train_test_split\n    from sklearn.preprocessing import StandardScaler\n    from sklearn.svm import LinearSVR, SVR\n    from scipy.stats import uniform\n    from sklearn.impute import SimpleImputer\n    from sklearn.pipeline import make_pipeline\n    from sklearn.compose import TransformedTargetRegressor\n    from sklearn.impute import KNNImputer\n    from sklearn.model_selection import RandomizedSearchCV\n    import sklearn.metrics as skmet\n    import matplotlib.pyplot as plt\n    import os\n    import sys\n    sys.path.append(os.getcwd() + \"/helperfunctions\")\n    from preprocfunc import OutlierTrans\n    ```", "```py\n    landtemps = pd.read_csv(\"data/landtempsb2019avgs.csv\")\n    landtemps.set_index('locationid', inplace=True)\n    feature_cols = ['latabs','elevation']\n    landtemps[['avgtemp'] + feature_cols].\\\n      agg(['count','min','median','max']).T\n                   count       min     median     max\n    avgtemp        12,095     -61      10         34\n    latabs         12,095      0       41         90\n    elevation      12,088     -350     271        4,701\n    X_train, X_test, y_train, y_test =  \\\n      train_test_split(landtemps[feature_cols],\\\n      landtemps[['avgtemp']], test_size=0.1, random_state=0)\n    ```", "```py\nsvr = LinearSVR(epsilon=1.0, max_iter=100000)\nknnimp = KNNImputer(n_neighbors=45)\npipe1 = make_pipeline(OutlierTrans(3), knnimp, StandardScaler(), svr)\nttr=TransformedTargetRegressor(regressor=pipe1,\n  transformer=StandardScaler())\nsvr_params = {\n 'regressor__linearsvr__epsilon': uniform(loc=0, scale=1.5),\n 'regressor__linearsvr__C': uniform(loc=0, scale=20)\n}\nrs = RandomizedSearchCV(ttr, svr_params, cv=10, scoring='neg_mean_absolute_error')\nrs.fit(X_train, y_train)\nrs.best_params_\n{'regressor__linearsvr__C': 15.07662849482442,\n 'regressor__linearsvr__epsilon': 0.06750238486004034}\nrs.best_score_\n-2.769283402595076\n```", "```py\n    pred = rs.predict(X_test)\n    preddf = pd.DataFrame(pred, columns=['prediction'],\n      index=X_test.index).join(X_test).join(y_test)\n    preddf['resid'] = preddf.avgtemp-preddf.prediction\n    plt.scatter(preddf.prediction, preddf.resid, color=\"blue\")\n    plt.axhline(0, color='red', linestyle='dashed', linewidth=1)\n    plt.title(\"Scatterplot of Predictions and Residuals\")\n    plt.xlabel(\"Predicted Gas Tax\")\n    plt.ylabel(\"Residuals\")\n    plt.show()\n    ```", "```py\n    svr = SVR(kernel='rbf')\n    pipe1 = make_pipeline(OutlierTrans(3), knnimp, StandardScaler(), svr)\n    ttr=TransformedTargetRegressor(regressor=pipe1,\n      transformer=StandardScaler())\n    svr_params = {\n     'regressor__svr__epsilon': uniform(loc=0, scale=5),\n     'regressor__svr__C': uniform(loc=0, scale=20),\n     'regressor__svr__gamma': uniform(loc=0, scale=100)\n     }\n    rs = RandomizedSearchCV(ttr, svr_params, cv=10, scoring='neg_mean_absolute_error')\n    rs.fit(X_train, y_train)\n    rs.best_params_\n    {'regressor__svr__C': 5.3715128489311255,\n     'regressor__svr__epsilon': 0.03997496426101643,\n     'regressor__svr__gamma': 53.867632383007994}\n    rs.best_score_\n    -2.1319240416548775\n    ```", "```py\n    pred = rs.predict(X_test)\n    preddf = pd.DataFrame(pred, columns=['prediction'],\n      index=X_test.index).join(X_test).join(y_test)\n    preddf['resid'] = preddf.avgtemp-preddf.prediction\n    plt.scatter(preddf.prediction, preddf.resid, color=\"blue\")\n    plt.axhline(0, color='red', linestyle='dashed', linewidth=1)\n    plt.title(\"Scatterplot of Predictions and Residuals\")\n    plt.xlabel(\"Predicted Gas Tax\")\n    plt.ylabel(\"Residuals\")\n    plt.show()\n    ```"]