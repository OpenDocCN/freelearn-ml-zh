["```py\nwget http://it.apache.contactlab.it/maven/maven-3/3.0.4/binaries/apachemaven-3.0.4-bin.tar.gz\n\n```", "```py\n    export M2_HOME=/usr/local/apache-maven-3.0.4\n    export M2=$M2_HOME/bin\n    export PATH=$M2:$PATH\n    export JAVA_HOME=$HOME/programs/jdk\n    ```", "```py\nmvn –version\n\n```", "```py\n    $ wget -c http://archive.apache.org/dist/mahout/0.9/mahout-distribution-0.9.tar.gz\n\n    ```", "```py\n    $ tar zxf mahout-distribution-0.9.tar.gz\n\n    ```", "```py\n    $ cd mahout-distribution-0.9\n    $ mvn eclipse: eclipse\n\n    ```", "```py\n    mvn -Declipse.workspace= eclipse:add-maven-repo\n\n    ```", "```py\n    $ wget -c http://archive.apache.org/dist/mahout/0.9/mahout-distribution-0.9.tar.gz\n\n    ```", "```py\n    $ cd /usr/local\n    $ sudo tar xzf mahout-distribution-0.9.tar.gz\n    $ sudo mv mahout-distribution-0.9.tar.gz mahout\n    $ sudo chown –R practical-ml:hadoop mahout\n\n    ```", "```py\n    gedit ~/.bashrc\n\n    ```", "```py\n    export MAHOUT_HOME = /usr/local/mahout\n    path=$path:$MAHOUT_HOME/bin\n    export M2_HOME=/usr/local/maven\n    export PATH=$M2:$PATH\n    export M2=$M2_HOME/bin\n    PATH=$PATH:$JAVA_HOME/bin;$M2_HOME/bin\n    ```", "```py\n    $MAHOUT_LOCAL=true\n\n    ```", "```py\n    export HADOOP_CONF_DIR=$HADOOP_HOME/conf\n\n    ```", "```py\n    $HADOOP_HOME/bin/start-all.sh\n\n    ```", "```py\n    /usr/local/mahout$ mvn install\n\n    ```", "```py\n$ ${HADOOP_HOME}/bin/Hadoop jar\n${HADOOP_HOME}/contrib/streaming/*.jar \\\n-inputformat\norg.apache.hadoop.mapred.TextInputFormat \\\n-input input_data.txt \\\n-output \\\n-mapper /home/tst/src/map.R \\\n-reducer /home/tst/src/reduce.R \\\n-file /home/tst/src/map.R \\\n-file /home/tst/src/reduce.R\n```", "```py\nlibrary(Rhipe)\nrhinit(TRUE, TRUE);\nmap<-expression ( {lapply (map.values, function(mapper)…)})\nreduce<-expression(\npre = {…},\nreduce = {…},\npost = {…},\n)\nx <- rhmr(map=map, reduce=reduce,\n ifolder=inputPath,\n ofolder=outputPath,\n inout=c('text', 'text'),\n jobname='test name'))\nrhex(x)\n```", "```py\nlibrary(rmr)\nmaplogic<-function(k,v) { …}\nreducelogic<-function(k,vv) { …}\nmapreduce( input =\"data.txt\",\noutput=\"output\",\ntextinputformat =rawtextinputformat,\nmap = maplogic,\nreduce=reducelogic\n)\n```", "```py\n> 1+1\n[1] 2\n> \"Welcome to R!\"\n[1] \"Welcome to R!\"\n> 6*7\n[1] 42\n> 10<22\n[1] TRUE\n> 2+7==5\n[1] FALSE\n```", "```py\n> x<-24\n> x/2\n[1] 12\n```", "```py\n> x <- \"Try R!\"\n[1] \"Try R!\"\n> x\n[1] \" Try R!\"\n```", "```py\n> x <- TRUE\n[1] TRUE\n```", "```py\n> sum(4,3,5,7)\n[1] 19\n> rep(\"Fun!\", times=3)\n[1] \" Fun!\" \"Fun!\" \"Fun!\"\n> sqrt(81)\n[1] 9\n```", "```py\n> help(sum)\nsum package: base R Documentation\n\nSum of Vector Elements\n\nDescription:\n\n     'sum' returns the sum of all the values present in its arguments.\n\nUsage:\n\n     sum(..., na.rm = FALSE)\n```", "```py\n> ornaments <- c('ring', 'chain', 'bangle', 'anklet', 'nosepin', 'earring', 'ring', 'anklet')\n> ornamenttypes <- factor(ornaments)\n> print(ornamenttypes)\n[1] ring chain bangle anklet nosepin earring\nLevels: anklet bangle chain earring nosepin ring\n```", "```py\n> as.integer(ornamenttypes)\n[1] 6 3 2 1 5 4 6 1\n```", "```py\n<</path/to/Julia>>/myjuliascript.jl\n```", "```py\njulia> include(\"<<path/to/juliascript>>/myjuliascript.jl\")\n```", "```py\n# Assign a numeric value to a variable\njulia> x = 10\n10\n\n# Perform a simple mathematical manipulation of variables\njulia> x + 1\n11\n\n# Assigning or reassigning values to variables.\njulia> x = 1 + 1\n2\n\n# Assigning a string literal to a variable\njulia> x = \"Hello World!\"\n\"Hello, World!\"\n```", "```py\njulia> pi\nπ = 3.1415926535897...\n```", "```py\n# Vector\nb = [4, 5, 6]\nb[1] # => 4\nb[end] # => 6\n\n# Matrix\nmatrix = [1 2; 3 4]\n\n# Tuple\ntup = (1, 2, 3)\ntup[1] # => 1\ntup[1] = 3 # => ERROR #since tuples are immutable, assigning a value results in an error\n\n# Dictionary\ndict = [\"one\"=> 1, \"two\"=> 2, \"three\"=> 3]\ndict[\"one\"] # => 1\n\n# Set\nfilled_set = Set(1,2,2,3,4)\n```", "```py\nsplit(\"I love learning Julia ! \")\n# => 5-element Array{SubString{ASCIIString},1}:\n\"I\"\n\"love.\"\n\"learning.\"\n\"Julia\"\n\"!\"\n\njoin([\"It seems to be interesting\", \"to see\",\n\"how it works\"], \", \")\n# => \"It seems interesting, to see, how it works.\"\n```", "```py\njulia> ccall(:clock, Int32, ())\n2292761\njulia> ccall(:getenv, Ptr{Uint8int8}, (Ptr{Uint8},), \"SHELL\")\nPtr{Uint8} @0x00007fff5fbffc45\njulia> bytestring(ans)\n\"/bin/bash\"\n```", "```py\njulia> using PyCall # Installed with Pkg.add(\"PyCall\")\njulia> @pyimport math\njulia> math.sin(math.pi / 4) - sin(pi / 4)\n0.0\njulia> @pyimport pylab\njulia> x = linspace(0,2*pi,1000); y = sin(3*x + 4*cos(2*x));\njulia> pylab.plot(x, y; color=\"red\", linewidth=2.0, linestyle=\"--\")\njulia> pylab.show()\n```", "```py\nusing MATLAB\n\nfunction sampleFunction(bmap::BitMatrix)\n@mput bmap\n@matlab bmapthin = bwmorph(bmap, \"thin\", inf)\nconvert(BitArray, @mget bmapthin)\nend\n```", "```py\nusing PyPlot\nx = linspace(-2pi, 2pi)\ny = sin(x)\nplot(x, y, \"--b\")\n```", "```py\njulia> Pkg.init()\n\n```", "```py\njulia> Pkg.add(\"ODBC\")\n\n```", "```py\njulia> using ODBC\n\n```", "```py\nusing ODBC\n\n```", "```py\nhiveconn = ODBC.connect(\"servername\"; usr=\"your-user-name\", pwd=\"your-password-here\")\n\n```", "```py\nhive_query_string = \"select …;\"\n\n```", "```py\nquery(hive_query_string, hiveconn;output=\"C:\\\\sample.csv\",delim=',')\n\n```", "```py\npython setup.py install --home\n\n```", "```py\n% git clone git://github.com/scikit-learn/scikit-learn/\n% cd scikit-learn\n\n```", "```py\n>>> from sklearn import datasets\n>>> iris = datasets.load_iris()\n>>> digits = datasets.load_digits()\n>>> print digits.data\n[[ 0\\. 0\\. 5\\. ..., 0\\. 0\\. 0.]\n[ 0\\. 0\\. 0\\. ..., 10\\. 0\\. 0.]\n[ 0\\. 0\\. 0\\. ..., 16\\. 9\\. 0.]\n...,\n[ 0\\. 0\\. 1\\. ..., 6\\. 0\\. 0.]\n[ 0\\. 0\\. 2\\. ..., 12\\. 0\\. 0.]\n[ 0\\. 0\\. 10\\. ..., 12\\. 1\\. 0.]]\n>>> digits.target\narray([0, 1, 2, ..., 8, 9, 8])\n```", "```py\n//Default variables are assigned to any expressions\nscala>8 * 5 + 2\nRes0: Int = 42\nScala>0.5 * res0\nRes1= Double = 21.0\n//All simple data types are objects\nscala>\"Hello, \" + res0\nRes2: java.lang.String = Hello, 42\nscala>10.toString()\nRes2: String = 10\nscala>a.+(b)\nRes1: Int = 200            //So you can consider , the operator as a method\nA method b as a shorthand for a.method(b)\nscala>val myVal: String = \"Foo\"\nkeyword \"val\" this means that a variable cannot change value  (immutable variable)\nscala>var myVar:String = \"Foo\"\nthe keyword var means that it is a variable that can be changed (mutable variable)\nscala> def cube(a: Int): Int = a * a * a\ncube: (a: Int)Int\nscala> myNumbers.map(x => cube(x))\nres8: List[Int] = List(1, 8, 27, 64, 125, 64, 27)\nscala> myNumbers.map(x => x * x * x)\nres9: List[Int] = List(1, 8, 27, 64, 125, 64, 27)\nscala> val myNumbers = List(1,2,3,4,5,4,3)\nmyNumbers: List[Int] = List(1, 2, 3, 4, 5, 4, 3)\nscala> def factorial(n:Int):Int = if (n==0) 1 else n * factorial(n-1)\nfactorial: (n: Int)Int\nscala> myNumbers.map(factorial)\nres18: List[Int] = List(1, 2, 6, 24, 120, 24, 6)\nscala> myNumbers.map(factorial).sum\nres19: Int = 183\nscala> var factor = 3\nfactor: Int = 3\nscala> val multiplier = (i:Int) => i * factor\nmultiplier: Int => Int = <function1>\nscala> val l1 = List(1,2,3,4,5) map multiplier\nl1: List[Int] = List(3, 6, 9, 12, 15)\nscala> factor = 5\nfactor: Int = 5\n```", "```py\nscala> val c = file.filter(line => line.contains(\"and\"))\n```", "```py\nscala>c.collect()\n```", "```py\nscala>println(\"input had \" + c.count() + \" lines\")\n```", "```py\nscala>c.take(10).foreach(println)\n```", "```py\nscala>var NUM_SAMPLES=5\nscala> val count = sc.parallelize(1 to NUM_SAMPLES).map{i =>\n     | val x = Math.random()\n     | val y = Math.random()\n     |  if (x*x + y*y < 1) 1 else 0\n     | }.reduce(_ + _)\nscala>println(\"Pi is roughly \" + 4.0 * count / NUM_SAMPLES)\n```"]