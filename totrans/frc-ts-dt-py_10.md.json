["```py\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom prophet import Prophet\nfrom prophet.plot import add_changepoints_to_plot\ndf = pd.read_csv('instagram_natgeo.csv')\ndf['Date'] = pd.to_datetime(df['Date'])\ndf.columns = ['ds', 'y']\nmodel = Prophet(seasonality_mode='multiplicative',\n                yearly_seasonality=6)\nmodel.fit(df)\nfuture = model.make_future_dataframe(periods=365 * 2)\nforecast = model.predict(future)\nfig = model.plot(forecast)\nplt.show()\n```", "```py\nfrom prophet.plot import plot_yearly\nplot_yearly(model, figsize=(10.5, 3.25))\nplt.show()\n```", "```py\ndf2 = df[(df['ds'] < '2016-07-29') |\n         (df['ds'] > '2016-09-01')]\n```", "```py\nmodel = Prophet(seasonality_mode='multiplicative',\n                yearly_seasonality=6)\nmodel.fit(df2)\nfuture = model.make_future_dataframe(periods=365 * 2)\nforecast = model.predict(future)\nfig = model.plot(forecast)\nplt.show()\n```", "```py\nplot_yearly(model, figsize=(10.5, 3.25))\nplt.show()\n```", "```py\ndf3 = df.copy()\ndf3.loc[df3['ds'].dt.year == 2016, 'y'] = 100000\n```", "```py\nmodel = Prophet(seasonality_mode='multiplicative',\n                yearly_seasonality=6)\nmodel.fit(df3)\nfuture = model.make_future_dataframe(periods=365 * 2)\nforecast = model.predict(future)\nfig = model.plot(forecast)\nadd_changepoints_to_plot(fig.gca(), model, forecast)\nplt.show()\n```", "```py\ndf3.loc[df3['ds'].dt.year == 2016, 'y'] = None\n```", "```py\nmodel = Prophet(seasonality_mode='multiplicative',\n                yearly_seasonality=6)\nmodel.fit(df3)\nfuture = model.make_future_dataframe(periods=365 * 2)\nforecast = model.predict(future)\nfig = model.plot(forecast)\nadd_changepoints_to_plot(fig.gca(), model, forecast)\nplt.show()\n```", "```py\nfrom scipy import stats\ndf4 = df.copy().dropna()\ndf4['y'] = stats.mstats.winsorize(df4['y'],\n                                  limits=(0, .05), axis=0)\n```", "```py\ndf5 = df.copy().dropna()\ndf5 = df5[(stats.zscore(df5['y']) < 1.65)]\n```", "```py\ndf6 = df.copy().dropna()\ndf6['moving_average'] = df6.rolling(window=300,\n                                    min_periods=1,\n                                    center=True,\n                                    on='ds')['y'].mean()\ndf6['std_dev'] = df6.rolling(window=300,\n                             min_periods=1,\n                             center=True,\n                             on='ds')['y'].std()\ndf6['lower'] = df6['moving_average'] - 1.65 * \\\n               df6['std_dev']\ndf6['upper'] = df6['moving_average'] + 1.65 * \\\n               df6['std_dev']\ndf6 = df6[(df6['y'] < df6['upper']) & \\\n          (df6['y'] > df6['lower'])]\n```", "```py\ndf7 = df.copy().dropna().reset_index()\n```", "```py\nmodel = Prophet(seasonality_mode='multiplicative',\n                yearly_seasonality=6,\n                seasonality_prior_scale=.01,\n                changepoint_prior_scale=.01,\n                interval_width=.90)\nmodel.fit(df7)\nforecast = model.predict()\n```", "```py\ndf8 = df7[(df7['y'] > forecast['yhat_lower']) &\n          (df7['y'] < forecast['yhat_upper'])]\n```", "```py\npromo = pd.DataFrame({'holiday': 'Promo event',\n                      'ds': pd.to_datetime(['2016-07-29']),\n                      'lower_window': 0,\n                      'upper_window': 34})\nfuture_promo = pd.DataFrame({'holiday': 'Promo event',\n                      'ds': pd.to_datetime(['2020-06-01']),\n                      'lower_window': 0,\n                      'upper_window': 34})\npromos = pd.concat([promo, future_promo])\n```", "```py\nmodel = Prophet(seasonality_mode='multiplicative',\n                holidays=promo,\n                yearly_seasonality=6)\nmodel.fit(df)\nfuture = model.make_future_dataframe(periods=365 * 2)\nforecast = model.predict(future)\nfig = model.plot(forecast)\nplt.show()\n```", "```py\nmodel = Prophet(seasonality_mode='multiplicative',\n                holidays=promos,\n                yearly_seasonality=6)\nmodel.fit(df)\nfuture = model.make_future_dataframe(periods=365 * 2)\nforecast = model.predict(future)\nfig = model.plot(forecast)\nplt.show()\n```", "```py\ndf = pd.read_csv('pedestrian_counts.csv')\ndf['Date'] = pd.to_datetime(df['Date'])\nplt.figure(figsize=(10, 6))\nplt.scatter(x=df['Date'],\n            y=df['Daily_Counts'],\n            c='#0072B2')\nplt.xlabel('Date')\nplt.ylabel('Pedestrians per day')\nplt.show()\n```", "```py\ndf = df[['Date', 'Daily_Counts']]\ndf.columns = ['ds', 'y']\n```", "```py\nmodel = Prophet(seasonality_mode='multiplicative')\nmodel.fit(df)\nfuture = model.make_future_dataframe(periods=365)\nforecast = model.predict(future)\nfig = model.plot(forecast)\nplt.show()\n```", "```py\nlockdowns = pd.DataFrame([\n    {'holiday':'lockdown1',\n     'ds': pd.to_datetime('2020-03-21'),\n     'lower_window': 0,\n     'upper_window': 77},\n    {'holiday':'lockdown2',\n     'ds': pd.to_datetime('2020-07-09'),\n     'lower_window': 0,\n     'upper_window': 110},\n    {'holiday':'lockdown3',\n     'ds': pd.to_datetime('2021-02-13'),\n     'lower_window': 0,\n     'upper_window': 4},\n    {'holiday':'lockdown4',\n     'ds': pd.to_datetime('2021-05-28'),\n     'lower_window': 0,\n     'upper_window': 13}])\n```", "```py\nmodel = Prophet(seasonality_mode='multiplicative',\n                holidays=lockdowns)\nmodel.fit(df)\nfuture = model.make_future_dataframe(periods=365)\nforecast = model.predict(future)\nfig = model.plot(forecast)\nplt.show()\n```", "```py\nfig2 = model.plot_components(forecast)\nplt.show()\n```", "```py\ndf['pre_covid'] = df['ds'] < '2020-03-21'\ndf['post_covid'] = df['ds'] > '2021-06-10'\n```", "```py\nmodel = Prophet(seasonality_mode='multiplicative',\n                weekly_seasonality=False,\n                holidays=lockdowns)\nmodel.add_seasonality(\n    name='weekly_pre_covid',\n    period=7,\n    fourier_order=3,\n    condition_name='pre_covid',\n)\nmodel.add_seasonality(\n    name='weekly_post_covid',\n    period=7,\n    fourier_order=3,\n    condition_name='post_covid',\n)\nmodel.fit(df)\nfuture = model.make_future_dataframe(periods=365)\nfuture['pre_covid'] = future['ds'] < '2020-03-21'\nfuture['post_covid'] = future['ds'] > '2021-06-10'\nforecast = model.predict(future)\nfig = model.plot(forecast)\nplt.show()\n```", "```py\nfig2 = model.plot_components(forecast)\nplt.show()\n```"]