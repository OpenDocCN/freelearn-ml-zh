- en: Chapter 10. Connecting the Pieces
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The previous chapter focused on the last API umbrella, covering Bing Search
    APIs. Throughout this chapter, we will connect the pieces. Our smart-house application
    can currently utilize several APIs, but mostly individually. We will see how to
    connect LUIS, image analysis, Bing News Search, and Bing Speech APIs. We will
    also look at the next steps that you can take after completing this book.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will learn about the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Making an application smarter, by connecting several APIs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Real-life applications utilizing Microsoft Cognitive Services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Next steps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Completing our smart-house application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Until now, we have seen all the different APIs, mostly as individual APIs. The
    whole idea behind the smart-house application is to utilize several APIs at the
    same time.
  prefs: []
  type: TYPE_NORMAL
- en: Throughout this chapter, we will add a new intent in LUIS. This intent is for
    getting the latest news for different topics.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we want to actually search for news, using the Bing News API. We will
    do so by allowing the end user to speak a command, converting spoken audio to
    text, with the Bing Speech API.
  prefs: []
  type: TYPE_NORMAL
- en: When we find a news article, we want to get the headline, publishing date, and
    description. If there is a corresponding image to the article, we want to get
    a description of the image. We will do this by adding the Computer Vision API.
  prefs: []
  type: TYPE_NORMAL
- en: With all the news article information in place, we want to get that read back
    to us. We will do this by converting text to spoken audio.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an intent
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let us start by adding our new intent. Head over to [https://www.luis.ai](https://www.luis.ai),
    and log on with the credentials created in [Chapter 4](ch04.html "Chapter 4. Letting
    Applications Understand Commands"), *Letting Applications Understand Commands*.
    From the front page, go into your smart-house application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we start creating the intent, we need to add a new entity. As we want
    the possibility to get updates on news within certain topics, we will add a `NewsCategory`
    entity, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating an intent](img/B12373_10_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As this entity will work on its own, we do not need any children.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we can add a new intent. Go to **Intents** on the left-hand side and click
    **Add intent**. This will open the intent creation dialog. Enter a fitting name
    for the intent, such as `GetNews`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating an intent](img/B12373_10_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We also need to add an example command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating an intent](img/B12373_10_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Add five or six more examples of how you would utter this intent. Make sure
    you train the model before continuing.
  prefs: []
  type: TYPE_NORMAL
- en: You can verify the model for testing by going to **Test** in the right-hand
    side.
  prefs: []
  type: TYPE_NORMAL
- en: Updating the code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With the new intent, we can start to update the smart-house application.
  prefs: []
  type: TYPE_NORMAL
- en: Executing actions from intents
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The first step we need to do is to add an `enum` variable containing the intents.
    Create a new file called `LuisActions.cs`, in the `Model` folder, and add the
    following content to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: If you have any other intents defined, add them as well.
  prefs: []
  type: TYPE_NORMAL
- en: This `enum` will be used later, to see which action to execute when triggered.
    For instance, if we ask to get the latest sports news, `GetNews` will be triggered,
    which will go on to retrieve news.
  prefs: []
  type: TYPE_NORMAL
- en: To make things a bit easier for ourselves, we are going to use the existing
    LUIS example for the rest of the chapter. An alternative would be to add this
    to the `HomeView`, where we could continuously listen to spoken commands from
    the users.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to trigger an action, we need to open the `LuisViewModel.cs` file.
    Find the `OnLuisUtteranceResultUpdated` function. Let us update it to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: At this time, we have not added anything new. We have removed the output of
    entities, as we do not need this anymore.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we find that any actions have been triggered, we want to do something. We
    call a new function, `TriggerActionExecution`, passing on the name of the intent
    as a parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: We will get back to this function shortly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Complete `OnLuisUtteranceResultUpdated` by adding the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Again, you should see that there are no new features. We have, however, removed
    the last `else` clause. We do not want to have the application speak the summary
    to us anymore.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the new `TriggerActionExecution` function. Let it accept a `string`
    as the parameter, and have it return a `Task`. Mark the function as `async`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Here, we parse the `actionName` (intent name). If we have not defined the action,
    we will not do anything else.
  prefs: []
  type: TYPE_NORMAL
- en: 'With an action defined, we go into a `switch` statement to decide what to do.
    As we are only interested in the `GetNews` case, we break out from the other options:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Make sure that the code compiles before continuing.
  prefs: []
  type: TYPE_NORMAL
- en: Searching news on command
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Next, we will need to modify the `Luis.cs` file. As we have defined an entity
    for the news topic, we want to ensure that we get this value from the LUIS response.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a new property to `LuisUtteranceResultEventArgs`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This will allow us to add the news topic value, if received.
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to add this value. Locate `ProcessResult` in the `Luis` class. Modify
    the `if` check to look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: We make sure that the intent name, of the top-scoring intent, is set, and pass
    it on as an argument to the event. We also check if there is any entities set,
    and if so, pass on the first one. In a real-life application, you would probably
    check other entities as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'Back into the `LuisViewModel.cs` file, we can now account for this new property.
    Let the `TriggerActionExecution` method accept a second `string` parameter. When
    calling the function, we can add the following parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'To be able to search for news, we need to add a new member of the `BingSearch`
    type. This is the class we created in the previous chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Create the object in the constructor.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we can create a new function, called `GetLatestNews`. This should accept
    a `string` as the parameter, and return `Task`. Mark the function as `async`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: When this function is called, we `SearchNews` on the newly created `_bingSearch`
    object. We pass on the `queryString`, which will be the action parameter, as the
    parameter. We also set the safe search to `Moderate`.
  prefs: []
  type: TYPE_NORMAL
- en: A successful API call will result in a `BingNewsResponse` object, which will
    contain an array of news articles. We are not going into more details on this
    class, as we covered it in [Chapter 9](ch09.html "Chapter 9. Adding Specialized
    Searches"), *Adding Specialized Searches*.
  prefs: []
  type: TYPE_NORMAL
- en: 'If no news is found, we simply return from the function. If we do find news,
    we do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: We call a function, `ParseNews`, which we will get back to in a bit. We pass
    on the first news article, which will be parsed. Ideally, we would go through
    all the results, but for our case, this is enough to illustrate the point.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `ParseNews` method should be marked as `async`. It should have the return
    type `Task`, and accept a parameter of type `Value`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: We create a string containing the headline, the publishing date, and the news
    description. Using this, we call `SpeakAsync` on the `_ttsClient` to have the
    application read the information back to us.
  prefs: []
  type: TYPE_NORMAL
- en: With this function in place, we can execute the action. In `TriggerActionExecuted`,
    call `GetLatestNews` from the `GetNews` case. Make sure to await the call.
  prefs: []
  type: TYPE_NORMAL
- en: 'With the application compiling, we can go for a test run:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Searching news on command](img/B12373_10_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Naturally, the effects are not as good in an image as in real life. With a microphone
    and speakers or headset connected, we can ask for the latest news, using audio,
    and get the news read back to us with audio.
  prefs: []
  type: TYPE_NORMAL
- en: Describing news images
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: News articles often come with corresponding images as well. As an addition to
    what we already have, we can add image analysis.
  prefs: []
  type: TYPE_NORMAL
- en: The first step we need to do is to add a new NuGet package. Search for the `Microsoft.ProjectOxford.Vision`
    package, and install this using **NuGet Package Manager**.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `LuisViewModel.cs` file, add the following new member:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'This can be created in the constructor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: This member will be our access point to the Computer Vision API.
  prefs: []
  type: TYPE_NORMAL
- en: 'We want to get a string describing the image in the `ParseNews` function. We
    can achieve this by adding a new function, called `GetImageDescription`. This
    should accept a `string` parameter, which will be the image URL. The function
    should have return type `Task<string>` and be marked as `async`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: In this function, we call `AnalyzeImageAsync` on the `_visionClient`. We want
    the image description, so we specify this in a list of `VisualFeature`. If the
    call succeeds, we expect an object of type `AnalysisResult`. This should contain
    image descriptions, ordered by probability of correctness.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we do not get any descriptions, we return `none`. If we do have any descriptions,
    we return the text of the first one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'If any exceptions occur, we print the exception message to the debug console.
    We also return `none` to the caller:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'In `ParseNews`, we can get the image description by adding the following at
    the top of the function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'With an image description, we can modify the `articleDescription` string to
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Running the application and asking for news will now also describe any images.
    That concludes our smart-house application.
  prefs: []
  type: TYPE_NORMAL
- en: Real-life applications using Microsoft Cognitive Services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are some examples of applications that currently utilize Microsoft Cognitive
    Services. We will look at some of them here.
  prefs: []
  type: TYPE_NORMAL
- en: Uber
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Uber is an app that was created to match drivers with people looking for rides.
    People can open the app, and request a ride. Drivers (registered Uber drivers,
    that is) located nearby can then pick up the person requesting a ride. After a
    ride, the driver is paid through the app.
  prefs: []
  type: TYPE_NORMAL
- en: To ensure a more secure experience, a photo of the driver is sent to the passenger.
    This way, passengers can feel safe that the driver is who they say they are. This
    may cause problems, as drivers may not always look like their photo. They may
    have grown a beard, or shaved off a beard, or similar changes may have occurred.
  prefs: []
  type: TYPE_NORMAL
- en: To account for this, Uber decided to add a new feature. Each driver needs to
    sign in when they are using the app. Doing so will periodically request them to
    take a selfie. This image is then sent to the Face API for verification. If the
    verification fails, due to glare from glasses, or something similar, the driver
    is requested to remove such items.
  prefs: []
  type: TYPE_NORMAL
- en: According to Uber, they spent around 3 weeks implementing the Face API into
    their systems.
  prefs: []
  type: TYPE_NORMAL
- en: DutchCrafters
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**DutchCrafters** is an American company that sells handmade furniture. They
    do have a physical store, but more importantly, they have an e-commerce website.
    This site contains more than 10,000 products, where each product can be customized.'
  prefs: []
  type: TYPE_NORMAL
- en: They had a low conversion rate on their site, and as an attempt to improve this,
    they used manual recommendations. Manually adding recommended products on each
    product is rather time-consuming. Looking into their options, they discovered
    the Recommendations API from Microsoft Cognitive Services.
  prefs: []
  type: TYPE_NORMAL
- en: They were already relying on REST APIs, and as such implementing the Recommendations
    API was quick. `DutchCrafters` have stated that they spent 5 days in total implementing
    the functionality needed.
  prefs: []
  type: TYPE_NORMAL
- en: As their site was already built with ASP.NET and running on IIS, they decided
    to move everything to the cloud. Doing so has improved their site, and with the
    addition of the Recommendations API, their foundation has improved.
  prefs: []
  type: TYPE_NORMAL
- en: At the time of writing, they are utilizing the *You might like this* feature,
    recommending 10 items per product. They are also looking into adding real-time
    recommendations, based on users' history, which we have seen is possible using
    the Recommendations API.
  prefs: []
  type: TYPE_NORMAL
- en: A direct result of implementing the Recommendations API is an improvement of
    the conversion rate. They have seen a three times increase in the conversion rate,
    with about 15% of the sales coming from recommended products.
  prefs: []
  type: TYPE_NORMAL
- en: CelebsLike.me
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**CelebsLike.me** is a web application from Microsoft. It was primarily created
    to show off some of the features of Microsoft Cognitive Services.'
  prefs: []
  type: TYPE_NORMAL
- en: The purpose of the application is to find your celebrity doppelganger. You can
    upload a photo, or use one found online, and the app will match faces found with
    similar celebrities.
  prefs: []
  type: TYPE_NORMAL
- en: The app takes advantage of the Bing Image Search API, the Computer Vision API,
    and the Face API. It recognizes celebrity faces in web images. When someone uploads
    a photo of themselves, facial features will be used to find matching celebrities.
  prefs: []
  type: TYPE_NORMAL
- en: Pivothead
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Pivothead** is a company working with wearable technology. They have combined
    eyeglasses with high-quality cameras, providing still images and videos. These
    glasses allow people to capture vivid point-of-view content of what they see.
    Pivothead currently has customers in the consumer market, but also in the business
    market.'
  prefs: []
  type: TYPE_NORMAL
- en: Over time, Pivothead had seen growing success, but could not seem to create
    a device to help visually impaired and/or blind people. They struggled with the
    technology, as machine learning itself can be quite complex. When they learned
    of Microsoft Cognitive Services, they were able to reach a breakthrough.
  prefs: []
  type: TYPE_NORMAL
- en: If a person is wearing the glasses, they can slide a finger along an earpiece.
    This will capture an image of what is in front of the person. The glasses utilize
    five APIs from Microsoft Cognitive Services. These are Computer Vision, Emotion,
    Face, Speech, and LUIS.
  prefs: []
  type: TYPE_NORMAL
- en: With the image of whatever is in front of a person, the image is analyzed. The
    person wearing the glasses will then get the image described through an earpiece.
    If a person is detected, the gender, how they look, what they are doing, their
    age, and their emotion is detected and described. If text is detected, it will
    be read back to the person.
  prefs: []
  type: TYPE_NORMAL
- en: According to Pivothead, they spent around three months months developing prototypes
    of these glasses. They also stated that they could have done it in three weeks,
    had they been working with it full-time.
  prefs: []
  type: TYPE_NORMAL
- en: Zero Keyboard
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **Zero Keyboard** app was created by a Finnish company called **Blucup**.
    The company had discovered a common problem for salespeople. They wanted a way
    for salespeople to capture customer data and generate leads while on the go.
  prefs: []
  type: TYPE_NORMAL
- en: They started developing an app for iOS, Android, and Windows Phone to help solve
    this problem. The idea behind the app is to record customer information, which
    is then automatically stored in the **Customer Relationship Management** (**CRM**)
    system.
  prefs: []
  type: TYPE_NORMAL
- en: At the time of development, Microsoft Cognitive Services emerged, and Blucup
    decided to give it a go. Earlier, they had tried a few types of open source speech
    recognition software and image analysis software. None provided the quality and
    features needed.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Computer Vision API, the app can take pictures of business cards or
    identification badges, and identify text. This data is directly uploaded to their
    CRM system. By using the Speech API, sales representatives can also record voice
    memos for each contact.
  prefs: []
  type: TYPE_NORMAL
- en: Blucup states that Microsoft Cognitive Services delivers very accurate data.
    In addition, they have been able to implement the needed APIs rapidly, as the
    APIs are a good match from a developer standpoint.
  prefs: []
  type: TYPE_NORMAL
- en: The common theme
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As you can see from all these examples, Microsoft Cognitive Services provides
    good quality. It is also quick to implement, which is important when considering
    new APIs.
  prefs: []
  type: TYPE_NORMAL
- en: Another great thing about the APIs is that you do not need to be a data scientist
    to use them. Even though the technology powering the APIs is complex, we, as developers,
    do not need to think about it. We can focus on what we do best.
  prefs: []
  type: TYPE_NORMAL
- en: Where to go from here
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By now, you should know the basics of Microsoft Cognitive Services, enough to
    get started with building your own applications.
  prefs: []
  type: TYPE_NORMAL
- en: A natural way forward is to play around with the different APIs. The APIs are
    continuously improved and worked upon. It is worth going through the API documentation,
    to keep up with changes and to learn more. In addition, Microsoft keeps adding
    new APIs to the services. Through the writing process of this book, I have seen
    three new APIs added. Those might be interesting to look into.
  prefs: []
  type: TYPE_NORMAL
- en: Another possibility is to build upon the smart-house application that we have
    started on. We have put down some groundwork, but there are still a lot of opportunities.
    Perhaps you can work on improving what we have already got. Maybe you can see
    some opportunities to mix in other APIs, which we have covered.
  prefs: []
  type: TYPE_NORMAL
- en: Reading through this book might have given you some ideas of your own. A great
    way forward would be to implement them.
  prefs: []
  type: TYPE_NORMAL
- en: As we have seen, there are many possible areas to use the APIs for. Only the
    imagination limits the usage.
  prefs: []
  type: TYPE_NORMAL
- en: Perhaps this book has triggered a deeper interest in machine learning. Everything
    we have seen so far is machine learning. Even though it is more complex than just
    using APIs, it is certainly worth exploring further.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With this chapter, we have completed our journey. We created a new intent for
    news retrieval. We learned how to deal with an action, triggered from this intent.
    Based on voice commands, we managed to fetch the latest news, for one topic, and
    have the smart-house application read it back to us. Next, we went on to see what
    kind of real-life applications are utilizing Microsoft Cognitive Services today.
    Finally, we concluded this chapter by looking at some natural next steps that
    you can take after completing this book.
  prefs: []
  type: TYPE_NORMAL
