["```py\n(defn distance [a b]\n  (if (< a b) (- b a) (- a b)))\n```", "```py\n(defn closest [point means distance]\n  (first (sort-by #(distance % point) means)))\n```", "```py\n(def data '(2 3 5 6 10 11 100 101 102))\n(def guessed-means '(0 10))\n```", "```py\nuser> (closest 2 guessed-means distance)\n0\nuser> (closest 9 guessed-means distance)\n10\nuser> (closest 100 guessed-means distance)\n10\n```", "```py\n(defn point-groups [means data distance]\n  (group-by #(closest % means distance) data))\n```", "```py\nuser> (point-groups guessed-means data distance)\n{0 [2 3 5], 10 [6 10 11 100 101 102]}\n```", "```py\n(defn average [& list]\n  (/ (reduce + list)\n     (count list)))\n```", "```py\n(defn new-means [average point-groups old-means]\n  (for [m old-means]\n    (if (contains? point-groups m)\n      (apply average (get point-groups m)) \n      m)))\n```", "```py\nuser> (new-means average\n        (point-groups guessed-means data distance)\n                 guessed-means)\n(10/3 55)\n```", "```py\n(defn iterate-means [data distance average]\n  (fn [means]\n    (new-means average\n               (point-groups means data distance)\n               means)))\n```", "```py\nuser> ((iterate-means data distance average) '(0 10))\n(10/3 55)\nuser> ((iterate-means data distance average) '(10/3 55))\n(37/6 101)\n```", "```py\nuser> (take 4 (iterate (iterate-means data distance average)\n                       '(0 10)))\n((0 10) (10/3 55) (37/6 101) (37/6 101))\n```", "```py\n(defn take-while-unstable\n  ([sq] (lazy-seq (if-let [sq (seq sq)]\n                    (cons (first sq)\n                          (take-while-unstable \n                           (rest sq) (first sq))))))\n  ([sq last] (lazy-seq (if-let [sq (seq sq)]\n                         (if (= (first sq) last)\n                           nil\n                           (take-while-unstable sq))))))\n```", "```py\nuser> (take-while-unstable\n       '(1 2 3 4 5 6 7 7 7 7))\n(1 2 3 4 5 6 7)\nuser> (take-while-unstable \n       (iterate (iterate-means data distance average)\n                '(0 10)))\n((0 10) (10/3 55) (37/6 101))\n```", "```py\n(defn k-cluster [data distance means]\n  (vals (point-groups means data distance)))\n```", "```py\nuser> (k-cluster data distance '(37/6 101))\n([2 3 5 6 10 11] [100 101 102])\n```", "```py\nuser> (take-while-unstable\n       (map #(k-cluster data distance %)\n            (iterate (iterate-means data distance average)\n             '(0 10))))\n(([2 3 5] [6 10 11 100 101 102])\n ([2 3 5 6 10 11] [100 101 102]))\n```", "```py\n(defn k-groups [data distance average]\n  (fn [guesses]\n    (take-while-unstable\n     (map #(k-cluster data distance %)\n          (iterate (iterate-means data distance average)\n                   guesses)))))\n```", "```py\n(def grouper\n  (k-groups data distance average))\n```", "```py\nuser> (grouper '(0 10))\n(([2 3 5] [6 10 11 100 101 102])\n ([2 3 5 6 10 11] [100 101 102]))\nuser> (grouper '(1 2 3))\n(([2] [3 5 6 10 11 100 101 102])\n ([2 3 5 6 10 11] [100 101 102])\n ([2 3] [5 6 10 11] [100 101 102])\n ([2 3 5] [6 10 11] [100 101 102])\n ([2 3 5 6] [10 11] [100 101 102]))\nuser> (grouper '(0 1 2 3 4))\n(([2] [3] [5 6 10 11 100 101 102])\n ([2] [3 5 6 10 11] [100 101 102])\n ([2 3] [5 6 10 11] [100 101 102])\n ([2 3 5] [6 10 11] [100 101 102])\n ([2] [3 5 6] [10 11] [100 101 102])\n ([2 3] [5 6] [10 11] [100 101 102]))\n```", "```py\nuser> (grouper (range 200))\n(([2] [3] [100] [5] [101] [6] [102] [10] [11]))\n```", "```py\n(defn vec-distance [a b]\n  (reduce + (map #(* % %) (map - a b))))\n\n(defn vec-average [& list]\n  (map #(/ % (count list)) (apply map + list)))\n```", "```py\nuser> (vec-distance [1 2 3] [5 6 7])\n48\nuser> (vec-average  [1 2 3] [5 6 7])\n(3 4 5)\n```", "```py\n(def vector-data\n  '([1 2 3] [3 2 1] [100 200 300] [300 200 100] [50 50 50]))\n```", "```py\nuser> ((k-groups vector-data vec-distance vec-average)\n       '([1 1 1] [2 2 2] [3 3 3]))\n(([[1 2 3] [3 2 1]] [[100 200 300] [300 200 100] [50 50 50]])\n\n ([[1 2 3] [3 2 1] [50 50 50]]\n  [[100 200 300] [300 200 100]])\n\n ([[1 2 3] [3 2 1]]\n  [[100 200 300] [300 200 100]]\n  [[50 50 50]]))\n```", "```py\nuser> (new-means average \n                 (point-groups '(0 0) '(0 1 2 3 4) distance) \n                 '(0 0))\n(2 2)\n```", "```py\n(defn update-seq [sq f]\n  (let [freqs (frequencies sq)]\n    (apply concat\n     (for [[k v] freqs]\n       (if (= v 1) \n         (list (f k))\n         (cons (f k) (repeat (dec v) k)))))))\n(defn new-means [average point-groups old-means]\n  (update-seq\n   old-means\n   (fn [o]\n     (if (contains? point-groups o)\n       (apply average (get point-groups o)) o))))\n```", "```py\nuser> (new-means average\n                 (point-groups '(0 0) '(0 1 2 3 4) distance)\n                 '(0 0))\n(2 0)\n```", "```py\nuser> ((k-groups '(0 1 2 3 4) distance average)\n       '(0 1))\n(([0] [1 2 3 4]) ([0 1] [2 3 4]))\nuser> ((k-groups '(0 1 2 3 4) distance average)\n       '(0 0))\n(([0 1 2 3 4]) ([0] [1 2 3 4]) ([0 1] [2 3 4]))\n```", "```py\nuser> ((k-groups vector-data vec-distance vec-average)\n       '([1 1 1] [1 1 1] [1 1 1]))\n(([[1 2 3] [3 2 1] [100 200 300] [300 200 100] [50 50 50]])\n ([[1 2 3] [3 2 1]] [[100 200 300] [300 200 100] [50 50 50]])\n ([[1 2 3] [3 2 1] [50 50 50]] [[100 200 300] [300 200 100]])\n ([[1 2 3] [3 2 1]] [[100 200 300] [300 200 100]] [[50 50 50]]))\n```", "```py\n[cc.artifice/clj-ml \"0.4.0\"]\n[incanter \"1.5.4\"]\n\n```", "```py\n(ns my-namespace\n (:use [incanter core datasets]\n [clj-ml data clusterers]))\n\n```", "```py\n(def features [:Sepal.Length\n               :Sepal.Width\n               :Petal.Length\n               :Petal.Width])\n\n(def iris-data (to-vect (sel (get-dataset :iris)\n                             :cols features)))\n\n(def iris-dataset\n  (make-dataset \"iris\" features iris-data))\n```", "```py\nuser> iris-dataset\n#<ClojureInstances @relation iris\n\n@attribute Sepal.Length numeric\n@attribute Sepal.Width numeric\n@attribute Petal.Length numeric\n@attribute Petal.Width numeric\n\n@data\n5.1,3.5,1.4,0.2\n4.9,3,1.4,0.2\n4.7,3.2,1.3,0.2\n...\n4.7,3.2,1.3,0.2\n6.2,3.4,5.4,2.3\n5.9,3,5.1,1.8>\n```", "```py\n(def k-means-clusterer\n  (make-clusterer :k-means\n                  {:number-clusters 3}))\n\n(defn train-clusterer [clusterer dataset]\n  (clusterer-build clusterer dataset)\n  clusterer)\n```", "```py\nuser> (train-clusterer k-means-clusterer iris-dataset)\n#<SimpleKMeans\nkMeans\n======\n\nNumber of iterations: 6\nWithin cluster sum of squared errors: 6.982216473785234\nMissing values globally replaced with mean/mode\n\nCluster centroids:\n                            Cluster#\nAttribute       Full Data          0          1          2\n                    (150)       (61)       (50)       (39)\n==========================================================\nSepal.Length       5.8433     5.8885      5.006     6.8462\nSepal.Width        3.0573     2.7377      3.428     3.0821\nPetal.Length        3.758     4.3967      1.462     5.7026\nPetal.Width        1.1993      1.418      0.246     2.0795\n```", "```py\nuser> (clusterer-cluster k-means-clusterer iris-dataset)\n#<ClojureInstances @relation 'clustered iris'\n\n@attribute Sepal.Length numeric\n@attribute Sepal.Width numeric\n@attribute Petal.Length numeric\n@attribute Petal.Width numeric\n@attribute class {0,1,2}\n\n@data\n5.1,3.5,1.4,0.2,1\n4.9,3,1.4,0.2,1\n4.7,3.2,1.3,0.2,1\n...\n6.5,3,5.2,2,2\n6.2,3.4,5.4,2.3,2\n5.9,3,5.1,1.8,0>\n```", "```py\n[org.clojure/math.numeric-tower \"0.0.4\"]\n```", "```py\n(ns my-namespace\n  (:use [clojure.math.numeric-tower :only [sqrt]]))\n```", "```py\n(defn sum-of-squares [coll]\n  (reduce + (map * coll coll)))\n```", "```py\n(defprotocol Each\n  (each [v op w]))\n\n(defprotocol Distance\n  (distance [v w]))\n```", "```py\n(defn closest-vectors [vs]\n  (let [index-range (range (count vs))]\n    (apply min-key\n           (fn [[x y]] (distance (vs x) (vs y)))\n           (for [i index-range\n                 j (filter #(not= i %) index-range)]\n             [i j]))))\n```", "```py\n(defn centroid [& xs]\n  (each\n   (reduce #(each %1 + %2) xs)\n   *\n   (double (/ 1 (count xs)))))\n```", "```py\n(extend-type clojure.lang.PersistentVector\n  Each\n  (each [v op w]\n    (vec\n     (cond\n      (number? w) (map op v (repeat w))\n      (vector? w) (if (>= (count v) (count w))\n                    (map op v (lazy-cat w (repeat 0)))\n                    (map op (lazy-cat v (repeat 0)) w)))))\n  Distance \n  ;; implemented as Euclidean distance\n  (distance [v w] (-> (each v - w)\n                      sum-of-squares\n                      sqrt)))\n```", "```py\n(defn h-cluster\n  \"Performs hierarchical clustering on a\n  sequence of maps of the form { :vec [1 2 3] } .\"\n  [nodes]\n  (loop [nodes nodes]\n    (if (< (count nodes) 2)\n      nodes\n      (let [vectors    (vec (map :vec nodes))\n            [l r]      (closest-vectors vectors)\n            node-range (range (count nodes))\n            new-nodes  (vec\n                        (for [i node-range\n                              :when (and (not= i l)\n                                         (not= i r))]\n                          (nodes i)))]\n        (recur (conj new-nodes\n                     {:left (nodes l) :right (nodes r)\n                      :vec (centroid\n                            (:vec (nodes l))\n                            (:vec (nodes r)))}))))))\n```", "```py\nuser> (h-cluster [{:vec [1 2 3]} {:vec [3 4 5]} {:vec [7 9 9]}])\n[{:left {:vec [7 9 9]},\n  :right {:left {:vec [1 2 3]},\n          :right {:vec [3 4 5]},\n          :vec [2.0 3.0 4.0]},\n  :vec [4.5 6.0 6.5] }]\n```", "```py\n(def h-clusterer (make-clusterer :cobweb))\n```", "```py\nuser> (train-clusterer h-clusterer iris-dataset)\n#<Cobweb Number of merges: 0\nNumber of splits: 0\nNumber of clusters: 3\n\nnode 0 [150]\n|   leaf 1 [96]\nnode 0 [150]\n|   leaf 2 [54]\n```", "```py\n(def em-clusterer (make-clusterer :expectation-maximization\n                                  {:number-clusters 3}))\n```", "```py\nuser> (train-clusterer em-clusterer iris-dataset)\n#<EM\nEM\n==\n\nNumber of clusters: 3\n\n               Cluster\nAttribute            0       1       2\n                (0.41)  (0.25)  (0.33)\n=======================================\nSepal.Length\n  mean           5.9275  6.8085   5.006\n  std. dev.      0.4817  0.5339  0.3489\n\nSepal.Width\n  mean           2.7503  3.0709   3.428\n  std. dev.      0.2956  0.2867  0.3753\n\nPetal.Length\n  mean           4.4057  5.7233   1.462\n  std. dev.      0.5254  0.4991  0.1719\n\nPetal.Width\n  mean           1.4131  2.1055   0.246\n  std. dev.      0.2627  0.2456  0.1043\n```", "```py\n[incanter \"1.5.4\"]\n```", "```py\n(ns my-namespace\n  (:use [incanter core som stats charts datasets]))\n```", "```py\n(def iris-features (to-matrix (sel (get-dataset :iris)\n                                   :cols [:Sepal.Length\n                                          :Sepal.Width\n                                          :Petal.Length\n                                          :Petal.Width])))\n```", "```py\n(def som (som-batch-train\n          iris-features :cycles 10))\n```", "```py\nuser> (:dims som)\n[10.0 2.0]\n```", "```py\nuser> (:sets som)\n{[4 1] (144 143 141 ... 102 100),\n [8 1] (149 148 147 ... 50),\n [9 0] (49 48 47 46 ... 0)}\n```", "```py\n(def feature-mean\n  (map #(map mean (trans\n                   (sel iris-features :rows ((:sets som) %))))\n       (keys (:sets som))))\n```", "```py\n(defn plot-means []\n  (let [x (range (ncol iris-features))\n        cluster-name #(str \"Cluster \" %)]\n    (-> (xy-plot x (nth feature-mean 0)\n                 :x-label \"Feature\"\n                 :y-label \"Mean value of feature\"\n                 :legend true\n                 :series-label (cluster-name 0))\n        (add-lines x (nth feature-mean 1)\n                   :series-label (cluster-name 1))\n        (add-lines x (nth feature-mean 2)\n                   :series-label (cluster-name 2))\n        view)))\n```", "```py\n(defn print-clusters []\n  (doseq [[pos rws] (:sets som)]\n    (println pos \\:\n             (frequencies\n              (sel (get-dataset :iris) \n                   :cols :Species :rows rws)))))\n```", "```py\nuser> (print-clusters)\n[4 1] : {virginica 23}\n[8 1] : {virginica 27, versicolor 50}\n[9 0] : {setosa 50}\nnil\n```", "```py\n(ns my-namespace\n  (:use [incanter core stats charts datasets]))\n```", "```py\n(def iris-matrix (to-matrix (get-dataset :iris)))\n(def iris-features (sel iris-matrix :cols (range 4)))\n(def iris-species (sel iris-matrix :cols 4))\n```", "```py\n(def pca (principal-components iris-features))\n\n(def U (:rotation pca))\n(def U-reduced (sel U :cols (range 2)))\n```", "```py\n(def reduced-features (mmult iris-features U-reduced))\n```", "```py\n(defn plot-reduced-features []\n  (view (scatter-plot (sel reduced-features :cols 0)\n                      (sel reduced-features :cols 1)\n                      :group-by iris-species\n                      :x-label \"PC1\"\n                      :y-label \"PC2\")))\n```"]