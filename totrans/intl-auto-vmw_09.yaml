- en: ML as a Service in the Cloud
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter will help you to learn about **machine learning as a service**
    (**MLaaS**) by using vRealize Automation. The ML workflow has data cleaning, model
    selection, feature engineering, model training, and inference. The production
    of the ML infrastructure is complicated to develop and manage because all ML processes
    will need to have their hardware and software modified.
  prefs: []
  type: TYPE_NORMAL
- en: We can minimize this complication by automating the provisioning of hardware
    resources, configuring them along with the operating system and application package,
    and giving access them to the related IT team. This process customization can
    be introduced as MLaaS. We will learn how vRealize Automation provides MLaaS with
    use cases of MLaaS. It will also help in the design and configuration of the blueprint
    to define the process with workflows in vRealize Automation. We'll also look at **load
    balancer as a service** (**LBaaS**) and how **network as a service** (**NaaS**)
    can remove bottlenecks in hardware-based network architectures.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: VMware approaches for MLaaS and its architecture
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: LBaaS with use cases
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Transforming network and security services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can download VMware vRealize Orchestrator Appliance 7.5.0 from [https://my.vmware.com/web/vmware/details?downloadGroup=VROVA_750&productId=742](https://my.vmware.com/web/vmware/details?downloadGroup=VROVA_750&productId=742).
  prefs: []
  type: TYPE_NORMAL
- en: MLaaS in a private cloud
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ML helps computers to acquire a knowledge without extensive programming and
    its performance enhances in compute and data by improving its development.
  prefs: []
  type: TYPE_NORMAL
- en: High-performance computing and big-data applications leverage virtualization
    as it helps in concurrent support for different software infrastructures, creating
    resource pools, consistent research surroundings, multi-domain data security,
    problem diagnosis and elasticity, effective load balancing, and QoS. **H****igh-Performance
    Computing** (**HPC**) and big data merged together so ML can be consumed as services
    from different cloud environments. These applications have huge data volumes with
    data-compliance and security policies to follow. Customers like to opt private
    cloud for hosting these ML applications with huge data which required more compute
    resources.
  prefs: []
  type: TYPE_NORMAL
- en: We can configure MLaaS in a private cloud using vRealize Automation to provide
    GPU-powered ML services for design/power users. The workflow can help to build
    an ML-based blueprint that can fulfill the particular requirements of design users.
  prefs: []
  type: TYPE_NORMAL
- en: VMware approach for MLaaS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We have two private-cloud options for building **Infrastructure as a Service**
    (**IaaS**) with VMware:'
  prefs: []
  type: TYPE_NORMAL
- en: vRealize Automation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrated OpenStack
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: vRealize Automation helps to achieve IT automation by creating a tailor-made
    infrastructure, workloads, and applications hosted across hybrid cloud. VMware
    Integrated OpenStack is an OpenStack distribution with direct support from VMware,
    which helps customers to build an enterprise-class OpenStack cloud on the ever-reliable
    vSphere engine. It enhances performance with easy-to-use and vendor-independent
    OpenStack API access to the VMware environment. This chapter will brief you on
    creating MLaaS using VMware vRealize Automation.
  prefs: []
  type: TYPE_NORMAL
- en: MLaaS using vRealize Automation and vGPU
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can configure a TensorFlow service that end users can consume through a self-service
    provisioning portal built with vRealize Automation. We have the NVIDIA card installed
    with vSphere, vRealize Automation, NVIDIA GRID drivers to support NVIDIA vGPU
    and a recommended guest OS on certified servers.
  prefs: []
  type: TYPE_NORMAL
- en: NVIDIA GRID vGPU Manager for ESXi driver should be configured on ESXi to provision
    vGPUs. The physical GPU should be shown in ESXi as a vGPU device rather then default
    vSGA device.
  prefs: []
  type: TYPE_NORMAL
- en: NVIDIA vGPU configuration on vSphere ESXi
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can build a vRealize Automation template for end users to leverage a TensorFlow
    service. The workflow for creating and provisioning a TensorFlow service is mentioned
    in the next diagram. There will be five steps to build and provision a TensorFlow
    service for end users with a CentOS VM:'
  prefs: []
  type: TYPE_NORMAL
- en: Add an NVIDIA GRID vGPU to the VM
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Customize the guest OS environment
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Convert the VM into a template and create a customization specification
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Design the blueprint
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Publish the blueprint
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In [Chapter 1](30c0d68f-6ece-4c7b-86d1-a7a46183306e.xhtml), *Machine Learning
    Capabilities with vSphere 6.7,* we learned that the first three steps are configured
    in vCenter Console and the last two steps can be configured with vRealize Automation.
    The last two steps are mentioned in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7eb47ec1-2123-4494-99bf-3cf095ea0c13.png)'
  prefs: []
  type: TYPE_IMG
- en: Customizing the vRealize Automation blueprint
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, we have to power off the VM installed with the driver/all tools and
    vGPU configured. We have to convert it into a template, which we can use as a
    blueprint with vRealize Automation. Once the template is created, we can then
    build a uniform tailor-made blueprint with defined parameters once the required
    template is created. Cloud Admin can use this to create clone blueprints for TensorFlow
    VMs:'
  prefs: []
  type: TYPE_NORMAL
- en: Log into the vSphere web client as administrator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the VM object and select Template | Convert to Template.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Customization Specification Manager and create a new specification
    based on the template on the home page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a software stack that defines the software life cycle for all software
    to be installed and configured within a blueprint while creating the VM.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The blueprints have to be designed to leverage the custom functions of vRealize
    Automation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a5abe05d-93e9-4e15-ba63-a4981ecaec24.png)'
  prefs: []
  type: TYPE_IMG
- en: Bundle the software stack to design how the software will be installed, configured,
    started, upgraded, and uninstalled within a blueprint's VM in vRealize Automation.
    We can drag and drop this software stack onto a specific container variation on
    the design console.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install TensorFlow by creating a software component. Explore the Design tab,
    then select Software Components, and choose New.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Define a name and details for the software stack. We have to mention the container
    specification as the machine in the general section and then click on Next to
    continue.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a command script that will fetch a TensorFlow GPU container image and
    customize the `/etc/motd` file to show instructions to the end user when they
    log in to the TensorFlow VM. vRealize Automation will install the container image
    and the example bash script type can be changed as per required configuration
    and installation steps.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Design the blueprint. Blueprints define the process for services to be implemented
    using vRealize Automation. We can opt for a basic blueprint that can deploy only
    a single VM, and a multi-VM blueprint that has software stacks, networks, security,
    and storage policies:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/116b5a17-9945-40f6-bbfb-7aa1069950a1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Create a blueprint than has only a CentOS VM, TensorFlow application, and associated
    virtual network: explore the Design tab, choose Blueprints, and select New.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Mention the name and details in the new blueprint section so a unique ID will
    be generated.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add an ESXi host to the TensorFlow blueprint by choosing Machine Types from
    the Categories section and dragging the ESXi host to the design console. We have
    to define other parameters and mention the prefix in the General tab to be used
    with all VM names built by the blueprint and gave access to users for self provisioning
    of up to four TensorFlow VMs.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Access the Machine Resources tab to get information about the virtual CPU, memory,
    and storage to be configured for the VMs created by this blueprint.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Specify the virtual network under the Network tab when the VM gets created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose the required network from the drop-down menu and select DHCP or Static. If
    we include a passthrough PCI device to a VM, we have to allocate full memory reservation
    for this configuration. The template called VM memory reservation will be not
    able to keep this configuration during the cloning process. To manage this, we
    have to add the specific VMware.Memory.Reservation parameter with a defined memory
    size by exploring the Properties tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We can provision this blueprint as service through the vRealize Automation
    service catalog from the Machine learning category and nominate users to use it. Edit the Custom
    Properties tab and follow the below steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Choose TensorFlow-GPU in Blueprints
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on Publish:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ae7c94d4-3b67-471b-ac74-16de3f30d552.png)'
  prefs: []
  type: TYPE_IMG
- en: We can see various ML/DL services with and without GPUs from a self-service
    provisioning portal in the preceding screenshot, which design users can use defined
    resources.
  prefs: []
  type: TYPE_NORMAL
- en: LBaaS overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Customers can use LBaaS by integrating it with NSX and the vRealize automation
    engine, which create a workflow to include applications requirements. They can
    also integrate with third-party tools with this service for automated deployment
    and monitoring of services. We have many options to design a load balancer as
    a service by using the VMware software-defined approach.
  prefs: []
  type: TYPE_NORMAL
- en: The load balancer must offload SSL to enhance performance and its output. A
    global load balancer has to fail over to application services between multiple
    data centers. It has to use the most productive load-balancing algorithm to increase
    the productivity of the application services. It can monitor the application services
    and generate alerts as soon as it finds any threats.
  prefs: []
  type: TYPE_NORMAL
- en: VMware **vRealize Orchestrator** (**vRO**) assists us in building LBaaS by automating
    F5 virtual server deployments as per predefined workflows that contain parameters
    such as number of steps, virtual server addition associated with IP address, protocol,
    port, profile, and a monitoring report of a specific virtual server. LBaaS has
    to provide HTTPS as a service and offload SSL. vRO can execute scripts on a PowerShell
    server to generate Microsoft CA signed certificates and transfer it to the F5
    server. It ensures SSL is attached to the F5 profile.
  prefs: []
  type: TYPE_NORMAL
- en: LBaaS design use cases
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'LBaaS use cases are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Deploying a single-site load balancer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying a multi-site load balancer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Customizing a load balancer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removing a VM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let us see the use cases in detail:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Deploying a single-site load balancer**:Create the VMs and then define the
    load balancer with specific VMs. Users can log in through the **Self-Service Portal**
    (**SSP**) and request a virtual server. As per design, the load balancer is configured
    at one site. Users can choose data with list boxes and combo boxes along with
    pre-populated data to provide data entry process. vRealize has the capability
    to invoke vRO, which in turn will execute predefined workflow steps to provision
    a F5 virtual server for the group of virtual servers selected by the user.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Once vRealize Automation receives the application-specific data, it can create
    an F5 **Local Traffic Manager** (**LTM**) virtual server with a **VMware Infrastructure
    Planner** (**VIP**) and DNS name as per workflow:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '| **Step** | **Actor** | **Actions** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | User |'
  prefs: []
  type: TYPE_TB
- en: Logs in to vRealize SSP
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Requests LBaaS provisioning using a XaaS Blueprint
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Provides necessary data to the request form
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| 2 | vRealize Automation |'
  prefs: []
  type: TYPE_TB
- en: Receives and validates the data entered by users
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Invokes vRO workflows to provision the F5 virtual server
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| 3 | vRO |'
  prefs: []
  type: TYPE_TB
- en: Provisions the F5 virtual server
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Attaches the F5 virtual server with the virtual machines selected by the user
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '**Deploying a multi-site load balancer**:A multi-site load balancer configuration
    is different from a single-site load balancer as two F5 LTMs associated with a
    Big-IP DNS are configured in two data centers. Big-IP DNS is not mandatory and
    required only as global load balancers. Its workflow helps users with various alternatives
    for traffic flow methods (that is, 50/50, 80/20, 60/40, 40/60, and 20/80) across
    two sites.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Users will enter the data into the vRealize Automation request form. vRealize
    Automation will invoke vRO workflows to process the data, create two F5 virtual
    servers (one on each site), and a F5 Big-IP DNS system:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '| **Step** | **Actor** | **Actions** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | User |'
  prefs: []
  type: TYPE_TB
- en: Logs in to vRealize SSP
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Requests LBaaS provisioning using a XaaS Blueprint
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chooses the **Global Traffic Manager** (**GTM**) checkbox to create a multi-site
    load balancer
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inputs LTM and GTM information to the request form
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| 2 | vRealize Automation |'
  prefs: []
  type: TYPE_TB
- en: Receives and validates the data entered by users
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Invokes vRO workflows to provision three F5 virtual servers—one per site on
    LTM and one for Big-IP DNS
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| 3 | vRO |'
  prefs: []
  type: TYPE_TB
- en: Provisions the F5 virtual servers
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Attaches the F5 virtual server with the VMs selected by the user
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '**Modifying a load balancer**:The load balancer can be customized on F5 with
    a new VM and then we can execute a XaaS blueprint to a new VM configured with
    the load balancer. If the user selects the incorrect load balancer algorithm during
    the load balancer deployment, they can amend it through a XaaS blueprint.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following table describes the actions for this use case:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '| **Step** | **Actor** | **Actions** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | User |'
  prefs: []
  type: TYPE_TB
- en: Logs in to vRealize SS
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Requests LBaaS modification using a XaaS Blueprint
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Provides the necessary data to modify an existing load balancer
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| 2 | vRealize Automation |'
  prefs: []
  type: TYPE_TB
- en: Receives and validates the data entered by users
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Invokes the vRO workflows to modify the F5 virtual server
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| 3 | vRO |'
  prefs: []
  type: TYPE_TB
- en: Modifies the F5 virtual server
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '**De-provisioning a VM**:We can de-provision any member VM of the F5 virtual
    server member pool with a vRealize Automation workflow, otherwise F5 will release
    alerts with the message that The virtual machine is unavailable.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Users can also remove the VM from a F5 virtual server pool with a modified
    XaaS workflow. The F5 virtual server member pool will be automatically finished
    as the last VM is deleted:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '| **Step** | **Actor** | **Actions** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | User |'
  prefs: []
  type: TYPE_TB
- en: Logs in to vRealize SSP
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Requests VM de-provisioning using an existing blueprint
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| 2 | vRealize Automation |'
  prefs: []
  type: TYPE_TB
- en: Calls the LBaaS XaaS workflow as part of the VM de-provisioning blueprint
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| 3 | LBaaS XaaS Workflow |'
  prefs: []
  type: TYPE_TB
- en: Receives all necessary data from the VM de-provisioning request
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Calls the vRO workflow
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| 4 | vRO |'
  prefs: []
  type: TYPE_TB
- en: Creates the XaaS workflow to add/remove VMs from the F5 virtual server member
    pool
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '**LBaaS workflow**: To provision a multi-site load balancer, two identical
    load balancers are deployed at each site in a multi-site design. A Big-IP DNS
    wide-IP is also created and the user is asked to enter other input along with
    the primary site and traffic flow ratio:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| ** Lane** | **Action** | **Notes** |'
  prefs: []
  type: TYPE_TB
- en: '| vRO | Advanced F5 GTM Workflow using REST API |'
  prefs: []
  type: TYPE_TB
- en: Click the GTM checkbox and enter the Big-IP DNS parameters to run a workflow
    to build a BIG-IP DNS global load balancer
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram shows the workflow:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c29f89b7-9a4f-4751-9aca-fbd21ecd1bd1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s go through all of the functions mentioned in the preceding diagram.
    As we know, the first five steps were already discussed in the LBaaS workflow
    and are needed to execute the LBaaS workflow. All functions are given from a reference
    point of view:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a listener. From the Big-IP DNS UI, select DNS | Delivery to provide
    the values to the listener parameters. A listener needs to be created on each
    site. This is a prerequisite for the LBaaS workflow.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create the data centers. From the Big-IP DNS UI, select DNS | GSLB | Data Centers
    | Data Center List | New Data Center to provide the data center name and other
    parameters. You will need to repeat this step for both data centers. This is a
    prerequisite for the LBaaS workflow.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create the Big-IP DNS and LTM servers. From the Big-IP DNS UI, select DNS |
    GSLB | Servers | Server List | New Server to add LTM servers to Big-IP DNS. You
    will need to repeat this step for both data centers: the Primary and Secondary
    sites. This is a prerequisite for the LBaaS workflow.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Configure the `(bigip_add utility)` iQuery:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Log in to the BIG-IP DNS at Rancho Cordova.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the `# bigip_add <rc-ltm-ip>` command to add Rancho Cordova LTM to the GTM.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Upon successful communication between BIG-IP DNS and LTMs, the status in the
    BIG-IP DNS UI will turn green. This is a pre-requisite for the LBaaS workflow.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Configure sync-group:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add both DNS servers (`RC_DNS` and `FX_DNS`) to the BIG-IP DNS system.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a sync-group.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the `#gtm _add <fx-gtm-ip>` command to add the Fairfield Annex BIG-IP GTM
    appliance.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the `#bigip_add <fx-ltm-ip>` command to add the Fairfield Annex BIG-IP LTM
    appliance. This is a pre-requisite for the LBaaS workflow
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create the **Global Server Load Balancer** (**GSLB**) pool:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The GSLB pool will be created as part of the LBaaS workflow. The pool name will
    be provided by the user as part of the XaaS UI.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: If created manually, select GSLB | Pools. Click on Createto create a global
    pool.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create wide-IP:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Wide-IP will be created as part of the LBaaS workflow.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: If created manually, select GSLB | Wide IPs. Click Create to create a wide-IP.
    The wide-IP name will be provided by the user as part of the XaaS UI.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: An IP address will be assigned to wide-IP through the vRO IP reserve workflow
    from Infoblox.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Challenges with network and security services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Network and security were always the bottleneck of the infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: 'Below are the major pain points with rigid hardware defined infrastructure
    :'
  prefs: []
  type: TYPE_NORMAL
- en: Placement and mobility were limited by the physical port
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Provisioning was slow due to lack of advanced automation capabilities, as it
    is not designed for automation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It was operationally intensive and hardware-dependent
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following can be done to achieve IT as a service model:'
  prefs: []
  type: TYPE_NORMAL
- en: Cloud networking architectural and operational model support the evolution of **IT
    as a service** (**ITaaS**) model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: End-to-end visibility with real time monitoring and troubleshooting (across
    virtual and physical networks) for integrated network availability and performance
    management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On-demand automated network provisioning and configuration to support rapid
    application deployment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New organizational model to facilitate collaboration between new cloud/SDDC
    team and existing functional teams (application, server, network and storage)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Skills to support the new operational model and service-oriented approach
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To gain an understanding of the concepts of a new IT operating model and why
    network and security should be part of it.
  prefs: []
  type: TYPE_NORMAL
- en: '**Different phases of NaaS Model**'
  prefs: []
  type: TYPE_NORMAL
- en: Review the ITaaS and NaaS operating models
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Identify the capabilities required to deliver and operate NaaS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understand the journey to the NaaS operating model from both an operational
    and organizational standpoint
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The NaaS operating model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: NaaS is one of the important part of the ITaaS operating model which help customers
    to achieve specific IT (network,security, and so on) outcomes. We have to review current
    network and security operating model across people, processes and technology and
    how to offer NaaS using the VMware Operations Transformation model and framework.
  prefs: []
  type: TYPE_NORMAL
- en: We should first discover the operational capabilities required to manage and
    operate NaaS based services with a structured approach.
  prefs: []
  type: TYPE_NORMAL
- en: 'It focuses on three main areas:'
  prefs: []
  type: TYPE_NORMAL
- en: Proactive operations management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Network and security service provisioning
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Security operations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The key operational capabilities are identified, as well as how to transform
    from the current operational capabilities to operating a network virtualization
    environment that enables the NaaS vision for each of the following areas:'
  prefs: []
  type: TYPE_NORMAL
- en: Defining the vision and strategy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining key operational capabilities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Assessing operational readiness
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building an operations transformation roadmap and plan
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Developing and implementing the target operating model with the NaaS vision
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The VMware NaaS transformation workshop service provides customers with an operational
    and organizational view on how to leverage the network virtualization architecture
    to move toward a NaaS operating model and ultimately toward the ITaaS operating
    model.
  prefs: []
  type: TYPE_NORMAL
- en: VMware defines ITaaS as a new delivery and operating model that leverages cloud
    technologies to enable business agility and value-based choice through readily-consumable
    IT services that have transparent prices and established service levels. The network
    plays a key role in enabling the ITaaS vision. Until now seen as a barrier to
    agility and speed, the new and emerging network architecture, based on network
    virtualization and SDDC/cloud, makes a new way to deploy, manage, and operate
    network and security possible.
  prefs: []
  type: TYPE_NORMAL
- en: The new operating model implies a paradigm shift from a device-centric operating
    model to a service-oriented operating model called NaaS. Though network virtualization
    is the technology enabler, the technology alone is not enough to achieve the full
    benefits of software-defined networking (and SDDC in general) but it has to be
    complemented by streamlined, integrated, and automated processes and a cross-functional
    organization that breaks silos with new skills.
  prefs: []
  type: TYPE_NORMAL
- en: This paradigm shift is actually an operations transformation that goes beyond
    the technology aspects that impact operational and organizational aspects. The
    operational and organizational aspects shouldn't be considered as an afterthought—they
    should be planned and designed in parallel to the technology plan and design.
  prefs: []
  type: TYPE_NORMAL
- en: The NaaS transformation workshops are directed to support the customer in the
    vision and strategy-definition phase, as well as in the planning of the operational
    and organizational capabilities required to deploy, manage, and operate the network
    virtualization solution that the customer is going to implement.
  prefs: []
  type: TYPE_NORMAL
- en: The goal of the workshops is to facilitate the customer to understand the NaaS
    operating model and identify the operational and organizational impact and challenges
    of network virtualization adoption as well as the capabilities required to fully
    leverage the benefits of the emerging network architecture.
  prefs: []
  type: TYPE_NORMAL
- en: The workshop service also provides an introduction to the VMware Operations
    Transformation model and framework and how it applies to driving the operational
    and organizational maturity growth toward the NaaS operating model.
  prefs: []
  type: TYPE_NORMAL
- en: 'The NaaS service can be divided into two parts:'
  prefs: []
  type: TYPE_NORMAL
- en: '**NaaS transformation envisioning**: We have to assist customers with a clear
    understanding of the VMware NaaS operating model, its role as part of the ITaaS
    operating model, and the benefits of adopting this model in terms of IT outcomes.
    We will also discuss the customer''s operational strategy, goals and objectives,
    the current network and security operating model across people, processes and
    technology and how it can be transformed to NaaS using the VMware Operations Transformation
    model and framework. This is oriented to network and IT infrastructure and operations
    teams that are willing to explore how network virtualization can drive the adoption
    of a new network and security operating model to make IT more agile, flexible,
    efficient, and business-aligned.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**NaaS transformation discovery**: Discover the operational capabilities required
    to manage and operate NaaS starting from a process perspective. The end-to-end
    operational processes are decomposed in common process elements and the operational
    capabilities required to optimally execute the process elements are identified.
    The discovery activity focuses on three main areas: proactive operations management,
    network and security services automated provisioning, and life cycle management
    and security operations. For each area, the key operational capabilities are identified
    and high-level observations on how to evolve and transform from the current operational
    capabilities to operating a network virtualization environment that enables the
    NaaS vision.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Transforming traditional network by consuming NaaS:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Traditional networking challenges**: Networking is all about ports and its
    capabilities related to performance, configuration, and the power dissipation
    of custom **application-specific integrated circuits** (**ASICs**). It''s also
    connected with related skillsets and OpEx cost-related with network operations. Network
    services will not be agile if it sticks with particular physical device with manual
    deployment, which raises the risk of configuration changes and human errors. It
    is not justified to write a script for each device interfaces to orchestrate automation
    as it creates hindrance to utilize the full capabilities of virtualization and
    cloud model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Networking is a service**: It always has been, and will continue to be, a
    service by abstracting, creating resource pools, and automating the network. Networking
    services are instantly provisioned from a capacity pool, decoupled from specific
    hardware, made equally mobile, deployed using templates, and controlled and managed
    through policies. The NaaS operating model enables us to deliver the agile data
    center of the future, the service velocity and agility that modern applications
    need, and the OpEx and CapEx efficiencies and cost savings we desire.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: LBaaS network design using NSX
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: VMware NSX can assist us in building **V****irtual Extensible LAN** (**VXLAN**)
    based virtual networks automated deployment to produce micro segmentation across
    different web, app, and DB servers. A **Distributed Logical Router** (**DLR**)
    will be provisioned to enable routing between networks produced by leveraging
    NSX logical switches. Since a DLR supports up to 1,000 logical interfaces, logical
    switches for several applications can be connected to DLR to leverage its routing
    capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: Application-level segmentation can then be provided using NSX Service Composer
    features, such as security groups and security policies. BIG-IP DNS helps to maintain
    applications redundancy with native intelligence. Two BIG-IP DNS systems deployed
    at two sites will work as a single unit but accountable for primary and secondary
    authoritative name service.
  prefs: []
  type: TYPE_NORMAL
- en: The users get the most favorable IP address (which is the LTM VIP) from site
    A (primary) or site B (secondary) based on defined rules, such as resource redundancy,
    SLA, load, geographical location, or QoS.
  prefs: []
  type: TYPE_NORMAL
- en: BIG-IP DNS assists with various kinds of queries when the *A* type query is
    used extensively. A BIG-IP DNS gets a query by matching the domain name and type
    with a wide-IP, then it chooses a pool (GSLB pool) to justify the response. Then
    it gets a virtual server from the pool by reacting with an IP address. GSLB pool
    will help in choosing a virtual server across both sites based on the load-balancing
    policy on each site and resources availability at runtime.
  prefs: []
  type: TYPE_NORMAL
- en: BIG-IP DNS high-level design
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Wide-IP is a **Fully-Qualified Domain Name** (**FQDN**) to get the application
    URL, which is a web application hosted on a group of web servers, such as Apache
    or IIS. BIG-IP DNS resolves queries to define wide-IP FQDN association with a
    virtual server (VIP) from a GSLB pool that has two virtual servers at each site.
  prefs: []
  type: TYPE_NORMAL
- en: 'The load-balancer pool algorithms for the LTM virtual server and BIG-IP DNS
    virtual server are not the same, and the LTM virtual server load-balancer algorithm
    is chosen by the user from a drop-down field. The BIG-IP DNS GSLB pool algorithm
    is defined on user input. There are three kinds of GSLB pool algorithms that were
    chosen for the LBaaS design: global delivery, ratio, and round robin.'
  prefs: []
  type: TYPE_NORMAL
- en: Customizing the BIG-IP DNS component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The BIG-IP DNS configuration has the following components:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Listener**: This is the BIG-IP DNS object that operates and answers to DNS
    queries. The listener configuration on BIG-IP DNS should be defined before executing
    the LBaaS workflow.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Data center**: This is a container object which host the place for application
    delivery components and has two LTM virtual servers from each site. The data center
    configuration on BIG-IP DNS should be defined before executing the LBaaS workflow.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Server**: This is a container object which host application components reside
    and can be a BIG-IP DNS, LTM server, or physical server instance. The server configuration
    on BIG-IP DNS should be defined before executing the LBaaS workflow.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Virtual server**:The virtual server has the IP address and service port configured
    on a physical server. BIG-IP DNS use these IP addresses and service ports to resolve
    queries and choose suitable virtual server.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Pool**: This is a logical object configured on the BIG-IP DNS system**.** Virtual
    servers can be set with different pools to resolve queries in a smart way. GSLB
    pool can be created by grouping all concerned virtual servers. Pool configuration
    for LBaaS will be customized on-demand using LBaaS workflow.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Wide-IP**: This is a logical container that is known as FQDN by grouping
    GSLB pools and have a batch of all concerned virtual servers. This object is developed
    and customized in the LBaaS workflow. The IP address for the FQDN will be restrained
    on Infoblox by leveraging a vRO workflow.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**DIG**: The DNS resolution utility is a tool to experiment with wide-IP configuration
    and can be downloaded to a system. Users like to download the utility to the PowerShell
    desktop to check the acceptance of wide-IP configuration with the LBaaS workflow.
    The `#dig @listener-ip wide-ip-name` command will post a DNS query to the listener
    and show the response from BIG-IP DNS.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The BIG-IP DNS load-balancing algorithm
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have three kinds of load-balancer algorithms based on the LBaaS design, which
    we'll explore here; they should be registered effectively to the BIG-IP DNS GSLB
    Pool.
  prefs: []
  type: TYPE_NORMAL
- en: Global availability
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This load-balancing algorithm will be suitable for the active/standby scenario
    and BIG-IP DNS disperse DNS name resolution requests to the first accessible virtual
    server from the configured list in a pool and, if the virtual server is not accessible,
    then BIG-IP DNS post requests to the next virtual server in the configured list.
  prefs: []
  type: TYPE_NORMAL
- en: The vRO workflow should define the GSLB pool load-balancing algorithm as globally
    available when a user chooses Active/standby in the XaaS form. It also makes sure
    that the first reachable virtual server will be from active site.
  prefs: []
  type: TYPE_NORMAL
- en: Ratio
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The LBaaS workflow has to manage traffic flow across two sites. The BIG-IP DNS Ratio load-balancing
    algorithm can assist you in fulfilling this use case. The ratio load-balancing
    method disperses DNS name resolution requests between the virtual servers in a
    pool by leveraging a weighed round robin. Weights for both virtual servers should
    be measured in the vRO workflow and registered by using the REST APIs. We can choose
    the ratio as a user from a drop-down list in XaaS form.
  prefs: []
  type: TYPE_NORMAL
- en: Round robin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The LBaaS workflow can distribute inbound requests by keeping an active state
    at both sites. The BIG-IP DNS round robin algorithm can be configured for the
    GSLB pool. BIG-IP DNS name-resolution requests can be distributed between the
    virtual servers of a GSLB pool in sequence so each virtual server will get a similar
    number of requests.
  prefs: []
  type: TYPE_NORMAL
- en: The LBaaS LTM design
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: LBaaS design used to suppose that BIG-IP virtual editions are installed on both
    sites. It also suppose that **Device Service Clustering** (**DSC**) can be used
    for every pair of BIG-IP appliances with the active/active scenario. The LBaaS
    design also understands that a sync failover device configuration survives on
    the virtual editions pair to sync the device configuration among the members pair
    so the devices can failover vice versa.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring BIG-IP LTM objects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following objects are configured automatically by using the LBaaS workflow
    in the F5 LTM:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Node**: It represents the IP address of a physical or virtual instance in
    a network, such as a web server or an application server. A single node can have
    many application services running different or same kind of services associated
    with a pool member.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Pool Member**: It is union of an IP address and a port number that defines
    an application service that resides on a node. A pool member is obtained by a
    BIG-IP system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Pool**: Load balancing can be accomplished by grouping one or more pool members
    and choosing suitable pool members. Load balancing policy should be configured
    on a pool with the specific pool members.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Virtual server**: It is a kind of listener which permits matching traffic
    types consisting of virtual server IP and port and forward them to pool members
    as per load balancing policy. All traffic gets blocked as the F5 LTM is a default-deny
    system. Virtual servers are ideal units that connect the clients.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Designing the LTM load-balancing method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can configure many load-balancing techniques with the LTM virtual server
    traffic operations. Users get a drop-down box to choose one of the following load-balancing
    techniques:'
  prefs: []
  type: TYPE_NORMAL
- en: Round Robin (Default)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Least Connections
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Weighted Least Connections
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ratio
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Observed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dynamic Ratio
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Least Sessions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fastest
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Predictive
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The LTM tab is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b653e3bc-0e6d-4f45-90a2-8f545339e84c.png)'
  prefs: []
  type: TYPE_IMG
- en: Designing the LTM virtual server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: VMware Cloud on the AWS L2 network extension service provides customers with
    the capability to extend the on-premises networks to VMware Cloud on AWS over
    any IP network using an SSL VPN tunnel (L2VPN) by creating subnets with a single
    broadcast domain. This enables customers to move workloads between an on-premises
    network and VMware Cloud on AWS without changing the IP address.
  prefs: []
  type: TYPE_NORMAL
- en: This service starts by introducing it's offering and collecting details to perform
    a technical gap analysis and recommendation, which helps the customer to prepare
    the environment for L2 network extension. VMware Cloud on the AWS environment
    is configured, and extended network functional testing is performed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Objectives with this service initiative to perform below two activities:'
  prefs: []
  type: TYPE_NORMAL
- en: Establishing an SSL tunnel (L2VPN) between on-premises and VMware Cloud on the
    AWS network
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extending the L2 subnets across on-premises and VMware Cloud on AWS networks
    using the SSL tunnel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can choose from various kinds of cloud-based offerings, including SaaS and
    IaaS. **Machine Learning as a Service** (**MLaaS**) is one of the latest innovations
    in the IT industry. ML deployment basically needs huge amounts of data and advanced
    users who can investigate patterns from the data volumes. The ML algorithm is
    always a hit-and-miss scenario. MLaaS will play a crucial role in AI adoption
    as it'll help developers and businesses reap the benefits of ML features. It will
    assist in embedding AI in business apps and enable organizations to use data in
    better ways to achieve their business objectives.
  prefs: []
  type: TYPE_NORMAL
- en: VMware SDDC products and approaches can be utilized to automate various services,
    and not just for the VMware-offered products but even for third-party tools. The
    entire process of provisioning and de-provisioning services using vRealize products
    can be automated along with vRealize Orchestrator, vRealize Log Insight, and NSX
    on top of vSphere hypervisor.
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter, [Chapter 8](54661ee3-fa2a-4640-b539-6a67f00669e9.xhtml), *Machine
    Learning-Based Rule Engine with Skyline*, will give you a detailed overview of
    VMware Skyline. We will collect information from a customer and use ML as an intelligent
    rule engine to monitor and provide proactive support for a faster resolution by
    preventing upcoming threats.
  prefs: []
  type: TYPE_NORMAL
