["```py\naux_original<-train\naux_original$Defaultf<-as.numeric(as.character(aux_original$Default))\naux_original$Defaultf<-ifelse(aux_original$Default==1,0,1)\naux_nomiss<-train_nomiss\naux_nomiss$Defaultf<-as.numeric(as.character(aux_nomiss$Default))\naux_nomiss$Defaultf<-ifelse(aux_nomiss$Default==1,0,1)\n```", "```py\nlibrary(smbinning)\ntable_iv<-matrix(\"NA\",0,5)\ntable_iv<-data.frame(table_iv)\ncolnames(table_iv)<-c(\"Char\",\"IV_original\",\"Process_original\",\"IV_nomiss\",\"Process_nomiss\")\n\n for (var in 1:length(aux_original[,2:1408]))\n {\n variable<-colnames(aux_original)[var+1]\n aux_original2<-aux_original[,c(variable,\"Defaultf\")]\n aux_nomiss2<-aux_nomiss[,c(variable,\"Defaultf\")]\n temp1<-smbinning.sumiv(aux_original2, \"Defaultf\")\n temp2<-smbinning.sumiv(aux_nomiss2, \"Defaultf\")\n colnames(temp1)<-c(\"Char\",\"IV_original\",\"Process_original\")\n colnames(temp2)<-c(\"Char\",\"IV_nomiss\",\"Process_nomiss\")\n temp2$Char<-NULL\n temp1<-cbind(temp1,temp2)\n table_iv<-rbind(table_iv,temp1)\n }\n```", "```py\nsave.image(\"Data8.RData\")\n```", "```py\nhead(table_iv)\n ## Char IV_original      Process_original IV_nomiss\n ## 1 UBPR1795      2.6138    Numeric binning OK    2.6138\n ## 2 UBPR4635      2.5253    Numeric binning OK    2.5253\n ## 3 UBPRC233          NA No significant splits        NA\n ## 4 UBPRD582          NA    Uniques values < 5        NA\n ## 5 UBPRE386          NA No significant splits        NA\n ## 6 UBPRE388      0.5853    Numeric binning OK    0.5622\n ##          Process_nomiss\n ## 1    Numeric binning OK\n ## 2    Numeric binning OK\n ## 3 No significant splits\n ## 4    Uniques values < 5\n ## 5 No significant splits\n ## 6    Numeric binning OK\n```", "```py\ntable(table_iv$Process_original)\n ##\n ##    Numeric binning OK No significant splits    Uniques values < 5\n ##                   522                   807                    78\ntable(table_iv$Process_nomiss)\n ##\n ##    Numeric binning OK No significant splits    Uniques values < 5\n ##                   539                   790                    78\n```", "```py\ndiff_iv<-table_iv[complete.cases(table_iv) & table_iv$Process_original==\"Numeric binning OK\" &table_iv$Process_nomiss==\"Numeric binning OK\" ,]\n\ndiff_iv$diff<-(diff_iv$IV_nomiss - diff_iv$IV_original)\nhist(diff_iv$diff, border=TRUE , col=rgb(0.8,0.2,0.8,0.7) , main=\"\")\n```", "```py\nsummary(diff_iv$diff)\n ##     Min.  1st Qu.   Median     Mean  3rd Qu.     Max.\n ## -2.64110 -0.03052  0.00000 -0.05247  0.00000  0.22570\n```", "```py\ntable_iv$IV_Category<-ifelse(table_iv$IV_nomiss >= 0.3, \"1:Strong\", ifelse(table_iv$IV_nomiss >= 0.1, \"2:Medium\",\"3:Weak\"))\n\ntable(table_iv$IV_Category)\n ##\n ## 1:Strong 2:Medium   3:Weak\n ##      358      114       67\n```", "```py\ntable_iv<-table_iv[complete.cases(table_iv) & table_iv$IV_Category != \"3:Weak\",]\n```", "```py\ntrain<-train_nomiss\ntest<-test_nomiss\n```", "```py\ntrain$Defaultf<-as.numeric(as.character(train$Default))\ntrain$Defaultf<-ifelse(train$Default==1,0,1)\n\ntest$Defaultf<-as.numeric(as.character(test$Default))\ntest$Defaultf<-ifelse(test$Default==1,0,1)\n```", "```py\nboxplot(train$UBPRD486~train$Default, horizontal=T, frame=F, col=\"lightgray\",main=\"Tier One Leverage Ratio Distribution\")\n```", "```py\nsmbinning.plot(result,option=\"dist\")\n```", "```py\nsmbinning.plot(result,option=\"badrate\")\n```", "```py\nsmbinning.plot(result,option=\"WoE\")\n```", "```py\nrelevant_vars<-as.vector(table_iv$Char)\nrelevant_vars<-c(\"ID_RSSD\",\"Default\",\"Defaultf\", relevant_vars)\ntrain<-train[,relevant_vars]\ntest<-test[,relevant_vars]\n```", "```py\nsave.image(\"Data9.RData\")\n```", "```py\ndim(train)\n ## [1] 7091  465\n```", "```py\ncorrelations <- cor(train[,4:ncol(train)])\n```", "```py\n## Loading required package: lattice\nhighlyCorrelated <- data.frame(\"Char\"=findCorrelation(correlations,      cutoff=0.75,names = TRUE))\n```", "```py\n\ncorrelated_vars<-as.vector(highlyCorrelated$Char)\nnon_correlated_vars<-!(colnames(train) %in% correlated_vars)\n\ntrain<-train[,non_correlated_vars]\ntest<-test[,non_correlated_vars]\n```", "```py\nncol(train)\n #262\n```", "```py\nset.seed(123)\n```", "```py\naux<-train\naux$`ID_RSSD`<-NULL\naux$Defaultf<-NULL\n```", "```py\nlibrary(Boruta)\nwrapper <- Boruta(Default ~. , data = aux, doTrace = 2,maxRuns = 100)\n```", "```py\nprint(wrapper)\n ## Boruta performed 99 iterations in 1.15968 hours.\n ##  85 attributes confirmed important: UBPR2150, UBPR7402, UBPRA222,\n ## UBPRD488, UBPRD646 and 80 more;\n ##  139 attributes confirmed unimportant: UBPR0071, UBPR1590,\n ## UBPR1616, UBPR1658, UBPR1661 and 134 more;\n ##  35 tentative attributes left: UBPR2366, UBPR3816, UBPRE083,\n ## UBPRE085, UBPRE140 and 30 more;\n```", "```py\ntable(wrapper$finalDecision)\n ##\n ## Tentative Confirmed  Rejected\n ##        35        85       139\n```", "```py\nsave.image(\"Data10.RData\")\n```", "```py\nwrapper <- TentativeRoughFix(wrapper)\nprint(wrapper)\n ## Boruta performed 99 iterations in 1.15968 hours.\n ## Tentatives roughfixed over the last 99 iterations.\n ##  108 attributes confirmed important: UBPR2150, UBPR3816, UBPR7402,\n ## UBPRA222, UBPRD488 and 103 more;\n ##  151 attributes confirmed unimportant: UBPR0071, UBPR1590,\n ## UBPR1616, UBPR1658, UBPR1661 and 146 more;\n```", "```py\nlibrary(caret)\nset.seed(1234)\n```", "```py\naux$Default<-as.factor(aux$Default)\n```", "```py\nrfe_control <- rfeControl(functions=rfFuncs, method='cv', number=10)\nrecursive <- rfe(aux[,2:260], aux[,1], rfeControl=rfe_control)\n```", "```py\nprint(recursive, top=10)\n ##\n ## Recursive feature selection\n ##\n ## Outer resampling method: Cross-Validated (10 fold)\n ##\n ## Resampling performance over subset size:\n ##\n ##  Variables Accuracy  Kappa AccuracySD KappaSD Selected\n ##          4   0.9848 0.8224   0.005833 0.06490        \n ##          8   0.9866 0.8451   0.004475 0.04881        \n ##         16   0.9884 0.8685   0.005398 0.06002        \n ##        259   0.9886 0.8659   0.004019 0.04617        *\n ##\n ## The top 10 variables (out of 259):\n ##    UBPRD488, UBPRE626, UBPRE217, UBPRE170, UBPRE392, UBPRE636, UBPRE883, UBPRE394, UBPRE370, UBPRE074\nplot(recursive, type=c(\"g\", \"o\"), cex = 1.0)\n```", "```py\nhead(predictors(recursive))\n ##   [1] \"UBPRD488\" \"UBPRE626\" \"UBPRE217\" \"UBPRE170\" \"UBPRE392\"           \"UBPRE636\nhead(recursive$resample, 10)\n ##    Variables  Accuracy     Kappa .cell1 .cell2 .cell3 .cell4 Resample\n ## 4        259 0.9915374 0.8988203    675      1      5     28   Fold01\n ## 8        259 0.9915374 0.8988203    675      1      5     28   Fold02\n ## 12       259 0.9830748 0.7976887    672      3      9     25   Fold03\n ## 16       259 0.9887165 0.8690976    673      3      5     28   Fold04\n ## 20       259 0.9929577 0.9169746    676      0      5     29   Fold05\n ## 24       259 0.9901269 0.8801237    675      1      6     27   Fold06\n ## 28       259 0.9873061 0.8590115    671      5      4     29   Fold07\n ## 32       259 0.9859155 0.8314180    674      2      8     26   Fold08\n ## 36       259 0.9929478 0.9169536    675      1      4     29   Fold09\n ## 40       259 0.9816384 0.7903799    669      6      7     26   Fold10\n```", "```py\n predictors<-data.frame(\"decision\"=wrapper$finalDecision)\n\n predictors<-cbind(\"variable\"=row.names(predictors),predictors)\n\n predictors<-                    as.vector(predictors[predictors$decision==\"Confirmed\",\"variable\"])\n\n train<-train[,c('ID_RSSD','Default',predictors)]\n\n test<-test[,c('ID_RSSD','Default',predictors)]\n```", "```py\nncol(train)\n ## [1] 110\nsave.image(\"Data11.RData\")\n```", "```py\npca <- prcomp(train[,3:ncol(train)], retx=TRUE, center=TRUE, scale=TRUE)\n```", "```py\nnames(pca)\n## [1] \"sdev\"     \"rotation\" \"center\"   \"scale\"    \"x\"\n```", "```py\npca$rotation[1:10,1:4]\n ##                  PC1          PC2         PC3          PC4\n ## UBPRE395 -0.05140105  0.027212743  0.01091903 -0.029884263\n ## UBPRE543  0.13068409 -0.002667109  0.03250766 -0.010948699\n ## UBPRE586  0.13347952 -0.013729338  0.02583513 -0.030875234\n ## UBPRFB60  0.17390861 -0.042970061  0.02813868  0.016505787\n ## UBPRE389  0.07980840  0.069097429  0.08331793  0.064870471\n ## UBPRE393  0.08976446  0.115336263  0.02076018 -0.012963786\n ## UBPRE394  0.16230020  0.119853462  0.07177180  0.009503902\n ## UBPRE396  0.06572403  0.033857693  0.07952204 -0.005602078\n ## UBPRE417 -0.06109615 -0.060368186 -0.01204455 -0.155802734\n ## UBPRE419  0.08178735  0.074713474  0.11134947  0.069892907\n```", "```py\npca_variances =pca$sdev^2\n```", "```py\nprop_var_explained <- pca_variances/sum(pca_variances)\n\nhead(prop_var_explained,10)\n\n ##  [1] 0.10254590 0.06510543 0.04688792 0.04055387 0.03637036          0.03576523\n ##  [7] 0.02628578 0.02409343 0.02305206 0.02091978\n```", "```py\nplot(pca, type = \"l\",main = \" Variance of Principal components\")\n```", "```py\nplot(prop_var_explained, xlab = \"Principal Component\",\n              ylab = \"Proportion of Variance Explained\",\n              type = \"b\")\n```", "```py\nplot(cumsum(prop_var_explained), xlab = \"Principal Component\",\n ylab = \"Cumulative Proportion of Variance Explained\",\n type = \"b\")\n```", "```py\nlibrary(ggfortify)\n\ntrain$Default<-as.factor(train$Default)\nautoplot(pca, data = train, colour = 'Default'\n```", "```py\nset.seed(1234)\n```", "```py\nlibrary(Rtsne)\n\ntsne= Rtsne(as.matrix(train[,3:ncol(train)]), check_duplicates=TRUE, pca=TRUE, perplexity=75, theta=0.5, dims=2,max_iter = 2000,verbose=TRUE)\n```", "```py\ntsne_vectors = as.data.frame(tsne$Y)\n\n head(tsne_vectors)\n ##           V1          V2\n ## 1  -4.300888 -14.9082526\n ## 2   4.618766  44.8443129\n ## 3  21.554283   3.2569812\n ## 4  45.518532   0.7150365\n ## 5  12.098218   4.9833460\n ## 6 -14.510530  31.7903585\n```", "```py\nggplot(tsne_vectors, aes(x=V1, y=V2)) +\n   geom_point(size=0.25) +\n   guides(colour=guide_legend(override.aes=list(size=6))) +\n   xlab(\"\") + ylab(\"\") +\n   ggtitle(\"t-SNE\") +\n   theme_light(base_size=20) +\n   theme(axis.text.x=element_blank(),\n         axis.text.y=element_blank()) +\n   scale_colour_brewer(palette = \"Set2\")\n```", "```py\nplot(tsne$Y, t='n', main=\"tsne\",xlab=\"Vector X\",ylab=\"Vector y\")\n text(tsne$Y, labels=as.vector(train$Default), col=c('red', 'blue')[as.numeric(train$Default)])\n```", "```py\nrm(list=setdiff(ls(), c(\"Model_database\",\"train\",\"test\",\"table_iv\")))\n\nsave.image(\"~/Data12.RData\")\n```"]