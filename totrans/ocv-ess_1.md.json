["```py\nOPENCV_BUILD>mingw32-make\n\n```", "```py\nOPENCV_BUILD>mingw32-make install\n\n```", "```py\nC:\\opencv-buildQt\\install\n\n```", "```py\nCV_<bit depth>{U|S|F}C(<number of channels>)\n```", "```py\nenum {CV_8U=0, CV_8S=1, CV_16U=2, CV_16S=3, CV_32S=4, CV_32F=5, CV_64F=6};\n```", "```py\nMat(nrows, ncols, type[, fillValue])\n```", "```py\nMat img_A(640, 480, CV_8U, Scalar(255)); // white image\n// 640 x 480 single-channel array with 8 bits of unsigned integers\n// (up to 255 values, valid for a grayscale image, for example,\n// 255=white)\n…\nMat img_B(Size(800, 600), CV_8UC3, Scalar(0,255,0)); // Green image\n// 800 x 600 three channel array with 8 bits of unsigned integers\n// (up to 24 bits color depth, valid for a RGB color image)\n```", "```py\nTARGET: flipImage\nTEMPLATE = app\nCONFIG += console\nCONFIG -= app_bundle\nCONFIG -= qt\n\nSOURCES += \\\n    flipImage.cpp\nINCLUDEPATH += C:\\\\opencv-buildQt\\\\install\\\\include\nLIBS += -LC:\\\\opencv-buildQt\\\\install\\\\x64\\mingw\\\\lib \\\n    -lopencv_core249.dll \\\n    -lopencv_highgui249.dll\n```", "```py\n#include \"opencv2/core/core.hpp\"\n#include \"opencv2/highgui/highgui.hpp\"\n#include <iostream>\n\nusing namespace std;\nusing namespace cv;\n\nint main(int argc, char *argv[])\n{\n    int flip_code=0;\n    Mat out_image; // Output image\n\n    if (argc != 4) {//Check args. number\n        cout << \"Usage: <cmd> <flip_code> <file_in> <file_out>\\n\";\n        return -1;\n    }\n Mat in_image = imread(argv[2], CV_LOAD_IMAGE_GRAYSCALE);\n    if (in_image.empty()) { // Check if read\n        cout << \"Error! Input image cannot be read...\\n\";\n        return -1;\n    }\n    sscanf(argv[1], \"%d\", &flip_code); // Read flip code\n flip(in_image, out_image, flip_code);\n    imwrite(argv[3], out_image); // Write image to file\n    namedWindow(\"Flipped…\"); // Creates a window\n    imshow(win, out_image); // Shows output image on window\n    cout << \"Press any key to exit...\\n\";\n    waitKey(); // Wait infinitely for key press\n    return 0;\n}\n```", "```py\nCV_SAMPLES/flipImage_build/debug>flipImage.exe -1 lena.jpg lena_f.jpg\n\n```", "```py\n    Mat in_image = imread(argv[2], CV_LOAD_IMAGE_GRAYSCALE);\n    ```", "```py\n    imwrite(argv[3], out_image);\n    ```", "```py\n    namedWindow(\"Flipped …\"); // Creates a window\n    ```", "```py\n    imshow(win, out_image); // Shows output image on window\n    ```", "```py\n    waitKey(); // Wait infinitely for key press\n    ```", "```py\n//… (omitted for simplicity)\nint main(int argc, char *argv[])\n{\n    Mat frame; // Container for each frame\n\n    VideoCapture vid(argv[1]); // Open original video file\n    if (!vid.isOpened()) // Check whether the file was opened\n        return -1;\n    int fps = (int)vid.get(CV_CAP_PROP_FPS);\n    namedWindow(argv[1]); // Creates a window\n    while (1) {\n        if (!vid.read(frame)) // Check end of the video file\n            break;\n        imshow(argv[1], frame); // Show current frame on window\n        if (waitKey(1000/fps) >= 0)\n            break;\n    }\n    return 0;\n}\n```", "```py\n    VideoCapture vid(argv[1]);\n    ```", "```py\n    int fps = (int)vid.get(CV_CAP_PROP_FPS);\n    ```", "```py\n    if (!vid.read(frame)) // Check end of the video file\n    break;\n    ```", "```py\n//… (omitted for brevity)\nint main(int argc, char *argv[])\n{\n    Mat frame;\n    const char win_name[]=\"Live Video...\";\n    const char file_out[]=\"recorded.avi\";\n    int cam_id=0; // Webcam connected to the USB port\n    double fps=20;\n\n    if (argc == 2)\n        sscanf(argv[1], \"%d\", &cam_id);\n\n    VideoCapture inVid(cam_id); // Open camera with cam_id\n    if (!inVid.isOpened())\n        return -1;\n\n    int width = (int)inVid.get(CV_CAP_PROP_FRAME_WIDTH);\n    int height = (int)inVid.get(CV_CAP_PROP_FRAME_HEIGHT);\n    VideoWriter recVid(file_out, CV_FOURCC('F','F','D','S'), fps, Size(width, height));\n    if (!recVid.isOpened()) \n        return -1;\n\n    namedWindow(win_name);\n    while (1) {\n        inVid >> frame; // Read frame from camera\n        recVid << frame; // Write frame to video file\n        imshow(win_name, frame); // Show frame\n        if (waitKey(1000/fps) >= 0)\n            break;\n    }\n    inVid.release(); // Close camera\n    return 0;\n}\n```", "```py\n    VideoCapture inVid(cam_id); // Open camera with cam_id\n    ```", "```py\n    int width = (int)inVid.get(CV_CAP_PROP_FRAME_WIDTH);\n    int height = (int)inVid.get(CV_CAP_PROP_FRAME_HEIGHT);\n    VideoWriter recVid(file_out, CV_FOURCC('F','F','D','S'), fps,Size(width, height));\n\n    ```"]