["```py\nvar canvas = document.getElementById('initCanvas');\nvar tracker = new tracking.ColorTracker(['magenta', 'cyan', 'yellow']);\n```", "```py\ntracker.on('track', function (event) {\n    event.data.forEach(function (rect) {\n        draw(rect.x, rect.y, rect.width, rect.height, rect.color);\n    });\n});\n```", "```py\n<div id=\"images\" class=\"canvas-parent\">\n    <canvas id=\"initCanvas\" class=\"canvas-img\"></canvas>\n</div>\n```", "```py\nvar canvasParent = document.querySelector('.canvas-parent');\nfunction draw(x, y, w, h, color) {\n    var rect = document.createElement('div');\n    canvasParent.appendChild(rect);\n    rect.classList.add('rect');\n    rect.style.border = '8px solid ' + color;\n    rect.style.width = w + 'px';\n    rect.style.height = h + 'px';\n    rect.style.left = (canvas.offsetLeft + x) + 'px';\n    rect.style.top = (canvas.offsetTop + y) + 'px';\n    rect.style.position = 'absolute';\n}\n```", "```py\ntracking.track('#initCanvas', tracker);\n```", "```py\ntracking.ColorTracker.registerColor('darkRed', function (r, g, b) {\n    return r > 100 && g < 90 && b < 90;\n});\n```", "```py\nvar tracker = new tracking.ColorTracker(['darkRed']);\n```", "```py\n<img id=\"img\" src=\"img/image.jpg\"/>\n```", "```py\ntracking.track('#img', tracker);\n```", "```py\n<div id=\"images\" class=\"canvas-parent\">\n\n    <video id=\"video\" preload autoplay loop muted controls>\n        <source src=\"img/video\">\n    </video>\n    <canvas id=\"initCanvas\" class=\"canvas-img\"></canvas>\n</div>\n```", "```py\nvar context = canvas.getContext('2d');\ntracker.on('track', function (event) {\n    context.clearRect(0, 0, canvas.width, canvas.height);\n    event.data.forEach(function (rect) {\n        draw(rect.x, rect.y, rect.width, rect.height, rect.color);\n    });\n});\n```", "```py\nfunction draw(x, y, w, h, color) {\n    context.strokeStyle = color;\n    context.strokeRect(x, y, w, h);\n    context.fillStyle = \"#fff\";\n    context.fillText('x: ' + x + 'px', x + w + 5, y + 11);\n}\n```", "```py\ntracking.track('#video', tracker);\n```", "```py\ntracking.track('#video', tracker, { camera: true });\n```", "```py\nvar trackingTask = tracking.track(...);\n```", "```py\ntrackingTask.stop();\ntrackingTask.run();\n```", "```py\nvar CornerTracker = function (thres) {\n    CornerTracker.base(this, 'constructor');\n    this.thres = thres;\n};\n```", "```py\ntracking.inherits(CornerTracker, tracking.Tracker);\n```", "```py\nCornerTracker.prototype.track = function (pixels, width, height) {\n    var sobel = tracking.Image.sobel(pixels, width, height);\n    var edges = [];\n    var pos = 0;\n    for (var i = 0; i < height; i++) {\n        for (var j = 0; j < width; j++) {\n            var w = i * width * 4 + j * 4;\n            if (sobel[w] > this.thres)\n                edges[pos++] = {x: j, y: i};\n        }\n    }\n    this.emit('track', {\n        data: edges\n    });\n};\n```", "```py\nvar tracker = new CornerTracker(400);\n```", "```py\ntracker.on('track', function (event) {\n    event.data.forEach(function (point) {\n        plot(point.x, point.y);\n    });\n});\n\nvar context = canvas.getContext('2d');\nfunction plot(x, y) {\n    context.fillStyle = '#FF0000';\n    context.fillRect(x, y, 3, 3);\n}\n```", "```py\ntracking.track('#initCanvas', tracker);\n```", "```py\ntracking.Fast.THRESHOLD = 30;\n```", "```py\nvar imageData = context.getImageData(0, 0, cols, rows);\nvar gray = tracking.Image.grayscale(imageData.data, cols, rows, true);\nvar blurred4 = tracking.Image.blur(gray, cols, rows, 3);\n```", "```py\nvar blurred1 = new Array(blurred4.length / 4);\nfor (var i = 0, j = 0; i < blurred4.length; i += 4, ++j) {\n    blurred1[j] = blurred4[i];\n}\n```", "```py\nvar corners = tracking.Fast.findCorners(blurred1, cols, rows);\n```", "```py\nfor (i = 0; i < corners.length; i += 2) {\n    context.fillStyle = '#0f0';\n    context.fillRect(corners[i], corners[i + 1], 3, 3);\n}\n```", "```py\njsfeat.fast_corners.set_threshold(30);\n```", "```py\njsfeat.imgproc.gaussian_blur(matGray, matBlurred, 3);\n```", "```py\nvar corners = [];\nvar i = cols * rows;\nwhile (--i >= 0) {\n    corners[i] = new jsfeat.keypoint_t(0, 0, 0, 0, -1);\n}\n```", "```py\nvar count = jsfeat.fast_corners.detect(matBlurred, corners, 3);\n```", "```py\nfor (var i = 0; i < count; i++) {\n    context.fillStyle = '#0f0';\n    context.fillRect(corners[i].x, corners[i].y, 3, 3);\n}\n```", "```py\ntracking.Brief.N = 512\n```", "```py\nvar cornersObject = tracking.Fast.findCorners(grayObject, colsObject, rowsObject);\nvar cornersScene = tracking.Fast.findCorners(grayScene, colsScene, rowsScene);\nvar descriptorsObject = tracking.Brief.getDescriptors(grayObject, colsObject, cornersObject);\nvar descriptorsScene = tracking.Brief.getDescriptors(grayScene, colsScene, cornersScene);\n```", "```py\nvar matches = tracking.Brief.reciprocalMatch(cornersObject, descriptorsObject, cornersScene, descriptorsScene);\n```", "```py\nfor (var i = 0; i < matches.length; i++) {\n    var color = '#' + Math.floor(Math.random() * 16777215).toString(16);\n    context.fillStyle = color;\n    context.strokeStyle = color;\n    context.fillRect(matches[i].keypoint1[0], matches[i].keypoint1[1], 5, 5);\n    context.fillRect(matches[i].keypoint2[0] + colsObject, matches[i].keypoint2[1], 5, 5);\n    context.beginPath();\n    context.moveTo(matches[i].keypoint1[0], matches[i].keypoint1[1]);\n    context.lineTo(matches[i].keypoint2[0] + colsObject, matches[i].keypoint2[1]);\n    context.stroke();\n}\n```", "```py\nvar descriptors = new jsfeat.matrix_t(32, 500, jsfeat.U8C1_t);\n```", "```py\njsfeat.orb.describe(matBlurred, corners, num_corners, descriptors);\n```", "```py\nfunction match_pattern()\n```", "```py\nvar s_kp = screen_corners[m.screen_idx];\nvar p_kp = pattern_corners[m.pattern_lev][m.pattern_idx];\n```", "```py\ncontext.fillRect(p_kp.x, p_kp.y, 4, 4);\ncontext.fillRect(s_kp.x + shift, s_kp.y, 4, 4);\n```", "```py\nvar homo3x3 = new jsfeat.matrix_t(3, 3, jsfeat.F32C1_t);\n```", "```py\nvar match_mask = new jsfeat.matrix_t(500, 1, jsfeat.U8C1_t);\n```", "```py\nvar mm_kernel = new jsfeat.motion_model.homography2d();\n```", "```py\nvar num_model_points = 4;\n```", "```py\nvar reproj_threshold = 3;\n```", "```py\nvar ransac_param = new jsfeat.ransac_params_t(num_model_points,\n        reproj_threshold, 0.5, 0.99);\n```", "```py\njsfeat.motion_estimator.ransac(ransac_param, mm_kernel,\n        object_xy, screen_xy, count, homo3x3, match_mask, 1000);\n```", "```py\nvar shape_pts = tCorners(homo3x3.data, colsObject, rowsObject);\n```"]