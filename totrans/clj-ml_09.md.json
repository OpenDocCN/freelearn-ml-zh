["```py\n(defn map-reduce [f partition-size coll]\n  (->> coll\n       (partition-all partition-size)   ; Partition\n       (pmap f)                         ; Parallel Map\n       (reduce concat)))                ; Reduce\n```", "```py\n[congomongo \"0.4.1\"]\n[incanter \"1.5.4\"]\n```", "```py\n(ns my-namespace\n  (:use incanter.core\n        [incanter.mongodb   :only [insert-dataset\n                                   fetch-dataset]]\n        [somnium.congomongo :only [mongo!]]\n        [incanter.datasets  :only [get-dataset]]))\n```", "```py\n(def iris (get-dataset :iris))\n```", "```py\nuser> (with-data iris\n        (view (conj-cols (range (nrow $data)) $data)))\n```", "```py\nuser> (with-data iris ($ [:Species :Sepal.Length]))\n\n|   :Species | :Sepal.Length |\n|------------+---------------|\n|     setosa |           5.1 |\n|     setosa |           4.9 |\n|     setosa |           4.7 |\n  ...\n|  virginica |           6.5 |\n|  virginica |           6.2 |\n|  virginica |           5.9 |\n```", "```py\nuser> (with-data iris ($ [:Species :Sepal.Length]\n                         ($where {:Sepal.Length 7.7})))\n\n|  :Species | :Sepal.Length |\n|-----------+---------------|\n| virginica |           7.7 |\n| virginica |           7.7 |\n| virginica |           7.7 |\n| virginica |           7.7 |\n```", "```py\nuser> (with-data iris ($ [:Species :Sepal.Length]\n                         ($where {:Sepal.Length {:$gt 7.0}})))\n\n|  :Species | :Sepal.Length |\n|-----------+---------------|\n| virginica |           7.1 |\n| virginica |           7.6 |\n| virginica |           7.3 |\n  ...\n| virginica |           7.2 |\n| virginica |           7.2 |\n| virginica |           7.4 |\n```", "```py\nuser> (with-data iris ($ [:Species :Sepal.Length]\n                         ($where {:Sepal.Length\n                                  {:$gt 7.0 :$lt 7.5}})))\n\n|  :Species  |:Sepal.Length |\n|------------+--------------|\n| virginica  |          7.1 |\n| virginica  |          7.3 |\n| virginica  |          7.2 |\n| virginica  |          7.2 |\n| virginica  |          7.2 |\n| virginica  |          7.4 |\n```", "```py\nuser> (mongo! :db \"sampledb\")\ntrue\n```", "```py\nuser> (insert-dataset\n:iris (col-names iris [:SepalLength\n:SepalWidth\n:PetalLength\n:PetalWidth\n:Species]))\n```", "```py\nuser> (with-data (fetch-dataset :iris) ($ [:Species :_id]\n                                          ($where {:SepalLength\n                                                   {:$gt 7}})))\n\n|  :Species |                     :_id |\n|-----------+--------------------------|\n| virginica | 52ebcc1144ae6d6725965984 |\n| virginica | 52ebcc1144ae6d6725965987 |\n| virginica | 52ebcc1144ae6d6725965989 |\n  ...\n| virginica | 52ebcc1144ae6d67259659a0 |\n| virginica | 52ebcc1144ae6d67259659a1 |\n| virginica | 52ebcc1144ae6d67259659a5 |\n```", "```py\n$ mongo\nMongoDB shell version: 2.4.6\nconnecting to: test\nServer has startup warnings:\n...\n\n> use sampledb\nswitched to db sampledb\n```", "```py\n> show collections\niris\nsystem.indexes\n>\n> db.iris.find({ SepalLength: 5})\n\n{ \"_id\" : ObjectId(\"52ebcc1144ae6d6725965922\"),\n  \"Species\" : \"setosa\",\n  \"PetalWidth\" : 0.2,\n  \"PetalLength\" : 1.4,\n  \"SepalWidth\" : 3.6,\n  \"SepalLength\" : 5 }\n{ \"_id\" : ObjectId(\"52ebcc1144ae6d6725965925\"),\n  \"Species\" : \"setosa\",\n  \"PetalWidth\" : 0.2,\n  \"PetalLength\" : 1.5,\n  \"SepalWidth\" : 3.4,\n  \"SepalLength\" : 5 }\n\n...\n```", "```py\n[bigml/clj-bigml \"0.1.0\"]\n```", "```py\n(ns my-namespace\n  (:require [bigml.api [core :as api]\n             [source :as source]\n             [dataset :as dataset]\n             [model :as model]\n             [prediction :as prediction]\n             [evaluation :as evaluation]]))\n```", "```py\n(def default-connection\n  (api/make-connection\n   \"my-username\"                               ; username\n   \"a3015d5fa2ee19604d8a69335a4ac66664b8b34b\"  ; API key\n   true))\n```", "```py\n(defmacro with-default-connection [& body]\n  '(api/with-connection default-connection\n     ~@body))\n```", "```py\n(def default-source\n  (with-default-connection\n    (source/create [[\"Make\"  \"Model\"   \"Year\" \"Weight\" \"MPG\"]\n                    [\"AMC\"   \"Gremlin\" 1970   2648     21]\n                    [\"AMC\"   \"Matador\" 1973   3672     14]\n                    [\"AMC\"   \"Gremlin\" 1975   2914     20]\n                    [\"Honda\" \"Civic\"   1974   2489     24]\n                    [\"Honda\" \"Civic\"   1976   1795     33]])))\n```", "```py\n(def default-dataset\n  (with-default-connection\n    (api/get-final (dataset/create default-source))))\n\n(def default-model\n  (with-default-connection\n    (api/get-final (model/create default-dataset))))\n```", "```py\n(def default-remote-prediction\n  (with-default-connection\n    (prediction/create default-model [1973 3672])))\n```", "```py\nuser> (:prediction default-remote-prediction)\n{:000004 33}\n```", "```py\n(def default-local-predictor\n  (with-default-connection\n    (prediction/predictor default-model)))\n```", "```py\nuser> (default-local-predictor [1983])\n22.4\nuser> (default-local-predictor [1983] :details true)\n{:prediction {:000004 22.4},\n:confidence 24.37119,\n:count 5, :id 0,\n:objective_summary\n {:counts [[14 1] [20 1] [21 1] [24 1] [33 1]]}}\n```", "```py\n(defn final-with-default-connection [f & xs]\n  (with-default-connection\n    (api/get-final (apply f xs))))\n```", "```py\n(defmacro get-final-> [head & body]\n  (let [final-body (map list\n                        (repeat 'final-with-default-connection)\n                        body)]\n    '(->> ~head\n          ~@final-body)))\n```", "```py\n(def iris-model\n  (get-final-> \"https://static.bigml.com/csv/iris.csv\"\n               source/create\n               dataset/create\n               model/create))\n\n(def iris-evaluation\n  (with-default-conection\n    (api/get-final\n     (evaluation/create iris-model (:dataset iris-model)))))\n```", "```py\nuser> (-> iris-evaluation :result :model :accuracy)\n1\n```"]