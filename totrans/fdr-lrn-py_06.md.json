["```py\ngit clone https://github.com/tie-set/simple-fl\n```", "```py\nconda env create -n federatedenv -f ./setups/federatedenv.yaml\n```", "```py\nconda env create -n federatedenv -f ./setups/federatedenv_linux.yaml\n```", "```py\npython -m fl_main.pseudodb.pseudo_db\npython -m fl_main.aggregator.server_th\n```", "```py\n# Database-side Console Example\nINFO:root:--- Pseudo DB Started ---\n```", "```py\n# Aggregator-side Console Example\nINFO:root:--- Aggregator Started ---\n```", "```py\npython -m examples.minimal.minimal_MLEngine\n```", "```py\n# Agent-side Console Example\nINFO:root:--- This is a minimal example ---\nINFO:root:--- Agent initialized —\nINFO:root:--- Your IP is xxx.xxx.1.101 ---\n```", "```py\n# Agent-side Console Example\nINFO:root:--- Model template generated ---\nINFO:root:--- Local (Initial/Trained) Models saved ---\nINFO:root:--- Client State is now sending ---\n```", "```py\n[\n        <AgentMsgType.participate: 0>, # Agent Message Type\n        'A89fd1c2d9*****', # Agent ID\n        '047b18ddac*****',    # Model ID\n        {\n                'model1': array([[1, 2, 3], [4, 5, 6]]), \n                'model2': array([[1, 2], [3, 4]])\n        }, # ML Models\n        True,    # Init weights flag\n        False, # Simulation flag\n        0, # Exch Port\n        1645141807.846751, # Generated Time of the models\n        {'accuracy': 0.0, 'num_samples': 1}, # Meta information \n        'xxx.xxx.1.101' # Agent's IP Address\n]\n```", "```py\n# Agent-side Console Example\nINFO:root:--- Init Response: [\n        <AggMsgType.welcome: 0>, # Message Type\n        '4e2da*****', # Aggregator ID\n        '23487*****', # Model ID \n        {'model1': array([[1, 2, 3], [4, 5, 6]]), \n         'model2': array([[1, 2], [3, 4]])}, # Global Models\n        1, # FL Round\n        'A89fd1c2d9*****', # Agent ID\n        '7890', # exch_socket number\n        '4321' # recv_socket number\n] ---\n```", "```py\n# Aggregator-side Console Example\nINFO:root:--- Participate Message Received ---\nINFO:root:--- Model Formats initialized, model names: ['model1', 'model2'] ---\nINFO:root:--- Models pushed to DB: Response ['confirmation'] ---\nINFO:root:---  Global Models Sent to A89fd1c2d9***** ---\nINFO:root:--- Aggregation Threshold (Number of agents needed for aggregation): 1 ---\nINFO:root:--- Number of collected local models: 0 ---\nINFO:root:--- Waiting for more local models to be collected ---\n```", "```py\n# DB-side Console Example\nINFO:root:Request Arrived\nINFO:root:--- Model pushed: ModelType.local ---\nINFO:root:--- Local Models are saved ---\n```", "```py\n# Agent-side Console Example\nINFO:root:--- Global Model Received ---\nINFO:root:--- Global Models Saved ---\nINFO:root:--- Client State is now gm_ready ---\n```", "```py\n[\n        <AggMsgType.sending_gm_models: 1>, # Message Type\n        '8c6c946472*****', # Aggregator ID\n        'ab633380f6*****', # Global Model ID\n        1, # FL Round Info \n        {     \n                'model1': array([[1., 2., 3.],[4., 5., 6.]]), \n                'model2': array([[1., 2.],[3., 4.]])\n        } # ML models\n]\n```", "```py\n# Agent-side Console Example\nINFO:root:--- Global Models read by Agent ---\nINFO:root:--- Client State is now training ---\nINFO:root:--- Training ---\nINFO:root:--- Training is happening ---\nINFO:root:--- Training is happening ---\nINFO:root:--- Training Done ---\nINFO:root:--- Local (Initial/Trained) Models saved ---\nINFO:root:--- Client State is now sending ---\nINFO:root:--- Local Models Sent ---\nINFO:root:--- Client State is now waiting_gm ---\nINFO:root:--- Polling to see if there is any update (shown only when polling) ---\nINFO:root:--- Global Model Received ---\nINFO:root:--- The global models saved ---\n```", "```py\n[\n        <AgentMsgType.update: 1>, # Agent's Message Type\n        'a1031a737f*****', # Agent ID\n        'e89ccc5dc9*****', # Model ID\n        {\n                'model1': array([[1, 2, 3],[4, 5, 6]]), \n                'model2': array([[1, 2],[3, 4]])\n        }, # ML Models\n            1645142806.761495, # Generated Time of the models\n        {'accuracy': 0.5, 'num_samples': 1} # Meta information\n]\n```", "```py\n# Aggregator-side Console Example\nINFO:root:--- Models pushed to DB: Response ['confirmation'] ---\nINFO:root:--- Local Model Received ---\nINFO:root:--- Aggregation Threshold (Number of agents needed for aggregation): 1 ---\nINFO:root:--- Number of collected local models: 1 ---\nINFO:root:--- Enough local models are collected. Aggregation will start. ---\n```", "```py\n# Aggregator-side Console Example\nINFO:root:Round 1\nINFO:root:Current agents: [{'agent_name': 'default_agent', 'agent_id': 'A89fd1c2d9*****', 'agent_ip': 'xxx.xxx.1.101', 'socket': 7890}]\nINFO:root:--- Cluster models are formed ---\nINFO:root:--- Models pushed to DB: Response ['confirmation'] ---\nINFO:root:--- Global Models Sent to A89fd1c2d9***** ---\n```", "```py\n# DB-side Console Example\nINFO:root:Request Arrived\nINFO:root:--- Model pushed: ModelType.cluster ---\nINFO:root:--- Cluster Models are saved ---\n```", "```py\n{\n        'model1': array([[1, 2, 3],[4, 5, 6]]), \n        'model2': array([[1, 2],[3, 4]])\n}\n```", "```py\npython -m examples.minimal.minimal_MLEngine [simulation_flag] [gm_recv_port] [agent_name]\n```", "```py\n# First agent\npython -m examples.minimal.minimal_MLEngine 1 50001 a1\n# Second agent\npython -m examples.minimal.minimal_MLEngine 1 50002 a2\n```", "```py\n# Aggregator-side Console Example\nINFO:root:--- Aggregation Threshold (Number of agents needed for aggregation): 2 ---\nINFO:root:--- Number of collected local models: 0 ---\nINFO:root:--- Waiting for more local models to be collected ---\n```", "```py\n# Aggregator-side Console Example\nINFO:root:--- Local Model Received ---\nINFO:root:--- Aggregation Threshold (Number of agents needed for aggregation): 2 ---\nINFO:root:--- Number of collected local models: 1 ---\nINFO:root:--- Waiting for more local models to be collected ---\n```", "```py\n# Aggregator-side Console Example\nINFO:root:--- Local Model Received ---\nINFO:root:--- Aggregation Threshold (Number of agents needed for aggregation): 2 ---\nINFO:root:--- Number of collected local models: 2 ---\nINFO:root:--- Enough local models are collected. Aggregation will start. ---\n```", "```py\n# Aggregator-side Console Example\nINFO:root:Round 1\nINFO:root:Current agents: [{'agent_name': 'a1', 'agent_id': '1f503*****', 'agent_ip': 'xxx.xxx.1.101', 'socket': 50001}, {'agent_name': 'a2', 'agent_id': '70de8*****', 'agent_ip': 'xxx.xxx.1.101', 'socket': 50002}]\nINFO:root:--- Cluster models are formed ---\nINFO:root:--- Models pushed to DB: Response ['confirmation'] ---\nINFO:root:--- Global Models Sent to 1f503***** ---\nINFO:root:--- Global Models Sent to 70de8***** ---\n```", "```py\n# Agent 1's Console Example\nINFO:root:--- Training ---\nINFO:root:--- Training is happening ---\nINFO:root:--- Training Done ---\nTrained models: {'model1': array([[1, 2, 3],\n             [4, 5, 6]]), 'model2': array([[1, 2],\n             [3, 4]])}\nINFO:root:--- Local (Initial/Trained) Models saved ---\n```", "```py\n# Agent 2's Console Example\nINFO:root:--- Training ---\nINFO:root:--- Training is happening ---\nINFO:root:--- Training Done ---\nTrained models: {'model1': array([[3, 4, 5],\n             [6, 7, 8]]), 'model2': array([[3, 4],\n             [5, 6]])}\nINFO:root:--- Local (Initial/Trained) Models saved ---\n```", "```py\n# Agent 1 and 2's Console Example\nGlobal Models: {'model1': array([[2., 3., 4.],\n             [5., 6., 7.]]), 'model2': array([[2., 3.],\n             [4., 5.]])}\n```", "```py\npip install torch\npip install torchvision\n```", "```py\n# FL server side\npython -m fl_main.pseudodb.pseudo_db\npython -m fl_main.aggregator.server_th\n```", "```py\n# First agent\npython -m examples.image_classification.classification\n_engine 1 50001 a1\n# Second agent\npython -m examples.image_classification.classification\n_engine 1 50002 a2\n```"]