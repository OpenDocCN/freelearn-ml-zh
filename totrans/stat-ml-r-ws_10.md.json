["```py\n\nA <- matrix(c(2, 6, 1, 8), nrow=2, byrow=TRUE)\n>>> A\n     [,1] [,2]\n[1,]    2    6\n[2,]    1    8\n>>> det(A)\n[1] 10\n```", "```py\n\n    library(Matrix)\n    A = matrix(c(1,2,3,3,2,4), nrow=2, byrow=TRUE)\n    >>> A\n         [,1] [,2] [,3]\n    [1,]    1    2    3\n    [2,]    3    2    4\n    ```", "```py\n\n    >>> rankMatrix(A)\n    [1] 2\n    attr(,\"method\")\n    [1] \"tolNorm2\"\n    attr(,\"useGrad\")\n    [1] FALSE\n    attr(,\"tol\")\n    [1] 6.661338e-16\n    ```", "```py\n\n    >>> rankMatrix(A)[1]\n    [1] 2\n    ```", "```py\n\n    A = as.matrix(data.frame(\"c1\"=c(1,2,3),\"c2\"=c(2,5,2),\"c3\"=c(-1,8,3)))\n    >>> A\n         c1 c2 c3\n    [1,]  1  2 -1\n    [2,]  2  5  8\n    [3,]  3  2  3\n    >>> diag(A)\n    [1] 1 5 3\n    >>> sum(diag(A))\n    [1] 9\n    ```", "```py\n\n    trace <- function(A) {\n      # get matrix dimension\n      n = dim(A)[1]\n      # track trace value\n      tr = 0\n      # add diagonal elements to trace\n      for(k in 1:n) {\n        l = A[k,k]\n        tr = tr + l\n      }\n      return(tr[[1]])\n    }\n    ```", "```py\n\n    >>> trace(A)\n    9\n    ```", "```py\n\nB = as.matrix(data.frame(\"c1\"=c(1,0,1),\"c2\"=c(1,1,2),\"c3\"=c(-1,2,0)))\n>>> B\n     c1 c2 c3\n[1,]  1  1 -1\n[2,]  0  1  2\n[3,]  1  2  0\n```", "```py\n\n>>> trace(A + B) == trace(A) + trace(B)\n[1] TRUE\n```", "```py\n\n>>> trace(A) == trace(t(A))\n[1] TRUE\n```", "```py\n\n>>> t(A)\n   [,1] [,2] [,3]\nc1    1    2    3\nc2    2    5    2\nc3   -1    8    3\n```", "```py\n\n>>> trace(2*A) == 2*trace(A)\n[1] TRUE\n```", "```py\n\n>>> trace(A %*% B) == trace(B %*% A)\n[1] TRUE\n```", "```py\n\n>>> trace(A) == trace(crossprod(crossprod(B,A),solve(B)))\n[1] TRUE\n```", "```py\n\na = as.matrix(c(1,2,3))\n>>> a\n     [,1]\n[1,]    1\n[2,]    2\n[3,]    3\n```", "```py\n\n>>> norm(a)\n[1] 6\n```", "```py\n\n>>> norm(a, type=\"1\")\n[1] 6\n```", "```py\n\n>>> norm(a, type=\"2\")\n[1] 3.741657\n```", "```py\n\n>>> norm(a, type=\"I\")\n3\n```", "```py\n\nX = as.matrix(data.frame(\"c1\"=c(1,2,3),\"c2\"=c(2,5,2),\"c3\"=c(-1,8,3)))\n>>> X\n     c1 c2 c3\n[1,]  1  2 -1\n[2,]  2  5  8\n[3,]  3  2  3\n```", "```py\n\n>>> norm(X, type=\"1\")\n[1] 12\n```", "```py\n\n>>> colSums(abs(X))\nc1 c2 c3\n 6  9 12\n```", "```py\n\n>>> norm(X, type=\"f\")\n[1] 11\n```", "```py\n\n>>> sqrt(sum(X^2))\n[1] 11\n```", "```py\n\n>>> norm(X, type=\"I\")\n[1] 15\n```", "```py\n\n>>> max(rowSums(abs(X)))\n[1] 15\n```", "```py\n\nv = c(1,2,3)\nlambda = 2\n>>> lambda * v\n[1] 2 4 6\n```", "```py\n\nI = diag(3)\n>>> I\n     [,1] [,2] [,3]\n[1,]    1    0    0\n[2,]    0    1    0\n[3,]    0    0    1\n```", "```py\n\n>>> lambda * I\n     [,1] [,2] [,3]\n[1,]    2    0    0\n[2,]    0    2    0\n[3,]    0    0    2\n```", "```py\n\n>>> (lambda * I) %*% v\n     [,1]\n[1,]    2\n[2,]    4\n[3,]    6\n```", "```py\n\nA = matrix(c(2,3,0,1), byrow=TRUE, nrow=2)\nlambda = 2\nv = c(1,0)\n>>> A%*%v\n     [,1]\n[1,]    2\n[2,]    0\n>>> lambda*v\n[1] 2 0\n```", "```py\n\n>>> A%*%v - lambda*v\n     [,1]\n[1,]    0\n[2,]    0\n```", "```py\n\n>>> eigen(A)\neigen() decomposition\n$values\n[1] 2 1\n$vectors\n     [,1]       [,2]\n[1,]    1 -0.9486833\n[2,]    0  0.3162278\n```", "```py\n\n>>> eigen(A)$values[1]\n[1] 2\n```", "```py\n\n>>> eigen(A)$vectors[,1]\n[1] 1 0\n```", "```py\n\n>>> det(eigen_rst$values[1] * diag(2) - A)\n[1] 0\nThe second eigenpair can also be verified:\n>>> det(eigen_rst$values[2] * diag(2) - A)\n[1] 0\n```", "```py\n\n>>> A%*%eigen_rst$vector[,1] - eigen_rst$values[1]*eigen_rst$vector[,1]\n     [,1]\n[1,]    0\n[2,]    0\n>>> A%*%eigen_rst$vector[,2] - eigen_rst$values[2]*eigen_rst$vector[,2]\n              [,1]\n[1,] -1.110223e-16\n[2,]  0.000000e+00\n```", "```py\n\n    X = matrix(c(1:5,2*(1:5)), byrow=FALSE, nrow=5)\n    >>> X\n         [,1] [,2]\n    [1,]    1    2\n    [2,]    2    4\n    [3,]    3    6\n    [4,]    4    8\n    [5,]    5   10\n    ```", "```py\n\n    X[,1] = X[,1] - mean(X[,1])\n    X[,2] = X[,2] - mean(X[,2])\n    >>> X\n         [,1] [,2]\n    [1,]   -2   -4\n    [2,]   -1   -2\n    [3,]    0    0\n    [4,]    1    2\n    [5,]    2    4\n    ```", "```py\n\n    >>> t(X)%*%X / (nrow(X)-1)\n         [,1] [,2]\n    [1,]  2.5    5\n    [2,]  5.0   10\n    ```", "```py\n\n>>> var(X[,2])\n[1] 10\n```", "```py\n\n>>> cov(X[,1], X[,2])\n[1] 5\n```", "```py\n\n>>> eigen(t(X)%*%X / (nrow(X)-1))\neigen() decomposition\n$values\n[1] 1.250000e+01 1.110223e-16\n$vectors\n          [,1]       [,2]\n[1,] 0.4472136 -0.8944272\n[2,] 0.8944272  0.4472136\n```", "```py\n\n    X = iris[,c(1:4)]\n    >>> head(X)\n      Sepal.Length Sepal.Width Petal.Length Petal.Width\n    1          5.1         3.5          1.4         0.2\n    2          4.9         3.0          1.4         0.2\n    3          4.7         3.2          1.3         0.2\n    4          4.6         3.1          1.5         0.2\n    5          5.0         3.6          1.4         0.2\n    6          5.4         3.9          1.7         0.4\n    ```", "```py\n\n    X_pca = prcomp(X)\n    >>> X_pca\n    Standard deviations (1, .., p=4):\n    [1] 2.0562689 0.4926162 0.2796596 0.1543862\n    Rotation (n x k) = (4 x 4):\n                         PC1         PC2         PC3        PC4\n    Sepal.Length  0.36138659 -0.65658877  0.58202985  0.3154872\n    Sepal.Width  -0.08452251 -0.73016143 -0.59791083 -0.3197231\n    Petal.Length  0.85667061  0.17337266 -0.07623608 -0.4798390\n    Petal.Width   0.35828920  0.07548102 -0.54583143  0.7536574\n    ```", "```py\n\n    >>> fviz_eig(X_pca)\n    ```", "```py\n\n    >>> fviz_pca_ind(X_pca,\n                 col.ind = \"cos2\", # Color by the quality of representation\n                 gradient.cols = c(\"#00AFBB\", \"#E7B800\", \"#FC4E07\"),\n                 repel = TRUE     # Avoid text overlapping\n    )\n    ```", "```py\n\n    >>> fviz_pca_var(X_pca,\n                 col.var = \"contrib\", # Color by contributions to the PC\n                 gradient.cols = c(\"#00AFBB\", \"#E7B800\", \"#FC4E07\"),\n                 repel = TRUE     # Avoid text overlapping\n    )\n    ```"]