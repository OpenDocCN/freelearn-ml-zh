- en: '9'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '9'
- en: Confidential Computing – What, Why, and the Current State
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 机密计算 – 什么是、为什么以及当前状态
- en: 'Data protection is a critical consideration for enterprises that handle sensitive
    data, which can be personal or non-personal. There are three primary states in
    which data can exist within an organization: data at rest, data in motion, and
    data in memory. Each state has unique security and privacy concerns that require
    different methods of security and data protection. In this chapter, you will learn
    about confidential computing, including what it is, why it is required, how it
    helps protect data in memory attacks, and the current state of the technology.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 对于处理敏感数据的企业来说，数据保护是一个重要的考虑因素，这些数据可以是个人数据或非个人数据。数据在组织内部可以存在于三种主要状态：静态数据、运动中的数据和内存中的数据。每种状态都有独特的安全和隐私问题，需要不同的安全方法和数据保护措施。在本章中，你将了解机密计算，包括它是什么、为什么需要它、它如何帮助保护内存中的数据攻击，以及当前技术的状态。
- en: 'We will cover the following main topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将涵盖以下主要主题：
- en: 'Privacy/security attacks on data in memory:'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对内存中数据的隐私/安全攻击：
- en: Introduction of confidential computation
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 机密计算的介绍
- en: Trusted execution environments (TEE) – attestation of source code and how it
    helps protect against insider threat attacks
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可信执行环境（TEE） – 源代码的证明及其如何帮助保护免受内部威胁攻击
- en: Industry standards for ML in TEEs
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TEE中机器学习的行业标准
- en: Confidential Computing Consortium
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 机密计算联盟
- en: Comparison of secure enclave support from Intel, AWS, Azure, GCP, and Anjuna
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Intel、AWS、Azure、GCP和Anjuna对安全区域支持的比较
- en: Privacy/security attacks on data in memory
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对内存中数据的隐私/安全攻击
- en: Data exfiltration refers to the unauthorized transfer or theft of sensitive
    information from a computer or network to a remote location controlled by an attacker.
    It can occur through various means, such as hacking, malware, phishing, or social
    engineering. Attackers often use data exfiltration to steal valuable intellectual
    property, financial information, **personally identifiable information** (**PII**),
    or trade secrets for their own gain. Once the data is stolen, it can be sold on
    the dark web, used for identity theft, or held for ransom. To prevent data exfiltration,
    organizations can implement security measures such as firewalls, intrusion detection
    and prevention systems, encryption, access controls, and employee training programs.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 数据泄露指的是从计算机或网络到攻击者控制的远程位置的敏感信息的未授权传输或盗窃。这可以通过各种手段发生，例如黑客攻击、恶意软件、钓鱼或社会工程学。攻击者通常使用数据泄露来窃取有价值的知识产权、财务信息、**个人身份信息**（**PII**）或商业机密以谋取私利。一旦数据被盗，它可以在暗网出售、用于身份盗窃或被勒索。为了防止数据泄露，组织可以实施诸如防火墙、入侵检测和预防系统、加密、访问控制和员工培训计划等安全措施。
- en: Data at rest
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 静态数据
- en: In a typical product/application, data will be persisted on a physical storage
    system, such as a filesystem, database system (SQL/NoSQL), Hadoop filesystem,
    tape, drive, or cloud. This data is referred to as **data at rest**. Data at rest
    is vulnerable to theft or unauthorized access if the storage device falls into
    the wrong hands. Encryption is one of the most common methods of protecting data
    at rest and it is essential to use strong encryption algorithms (as discussed
    in the last chapter) and keep encryption keys safe. One of the ways to keep the
    keys safe is to make use of security vaults (open source or commercial, either
    software-based or hardware-based). HashiCorp ([https://github.com/hashicorp/vault](https://github.com/hashicorp/vault))
    is one of the most well-known open source software vaults to protect security
    keys.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在典型的产品/应用程序中，数据将持久化在物理存储系统上，例如文件系统、数据库系统（SQL/NoSQL）、Hadoop文件系统、磁带、驱动器或云。这种数据被称为**静态数据**。如果存储设备落入错误的手中，静态数据容易受到盗窃或未授权访问的威胁。加密是保护静态数据最常见的方法之一，使用强大的加密算法（如上一章所述）并保持加密密钥安全至关重要。保持密钥安全的一种方法是通过使用安全保险库（开源或商业的，基于软件或硬件）。HashiCorp（[https://github.com/hashicorp/vault](https://github.com/hashicorp/vault)）是最著名的开源软件保险库之一，用于保护安全密钥。
- en: '![Figure 9.1 – Secure mechanism for data at rest](img/B16573_09_01.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![图9.1 – 静态数据的安全机制](img/B16573_09_01.jpg)'
- en: Figure 9.1 – Secure mechanism for data at rest
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.1 – 静态数据的安全机制
- en: Data in motion
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运动中的数据
- en: In case of data in motion, the data flows between two or more systems (client
    and server) or two or more devices (the same or different). Data in motion can
    be synchronous or asynchronous. Async communication uses messaging systems such
    as Kafka or ActiveMQ over networks such as the internet or local/wide area networks.
    Data in motion is also vulnerable to interception or tampering during transmission.
    To protect data in motion, secure communication protocols such as HTTPS, **Secure
    Sockets Layer** (**SSL**), **Transport Layer Security** (**TLS**), and **Secure
    Shell** (**SSH**) should be used.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在数据在运动的情况下，数据在两个或多个系统（客户端和服务器）或两个或多个设备（相同或不同）之间流动。数据在运动可以是同步的或异步的。异步通信使用Kafka或ActiveMQ等消息系统，通过互联网或本地/广域网等网络进行。数据在运动也容易在传输过程中被拦截或篡改。为了保护数据在运动，应使用HTTPS、**安全套接字层**（**SSL**）、**传输层安全性**（**TLS**）和**安全外壳**（**SSH**）等安全通信协议。
- en: '![Figure 9.2 – Secure mechanism for data in motion](img/B16573_09_02.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![图9.2 – 数据在运动中的保护机制](img/B16573_09_02.jpg)'
- en: Figure 9.2 – Secure mechanism for data in motion
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.2 – 数据在运动中的保护机制
- en: Data in memory
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 内存中的数据
- en: Data in memory refers to data that is temporarily stored in the computer’s memory
    (RAM or cache) while the program is executing/running. Data in memory is also
    vulnerable to unauthorized access, tampering, or theft if the system is compromised
    by a hacker or an insider of the enterprise. In this scenario, how can you protect
    the data in use or in memory, and what kind of technology supports the protection
    of data in memory?
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 内存中的数据是指在程序执行/运行期间临时存储在计算机内存（RAM或缓存）中的数据。如果系统被黑客或企业内部人员破坏，内存中的数据也容易受到未经授权的访问、篡改或盗窃。在这种情况下，如何保护正在使用或存储在内存中的数据，以及哪种技术支持内存数据保护？
- en: '![Figure 9.3 – Secure mechanism for data in memory](img/B16573_09_03.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![图9.3 – 内存中数据的保护机制](img/B16573_09_03.jpg)'
- en: Figure 9.3 – Secure mechanism for data in memory
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.3 – 内存中数据的保护机制
- en: Example program to show how data stored in memory is also vulnerable to in-memory
    attacks
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例程序展示存储在内存中的数据也容易受到内存攻击
- en: In this sample demo, we will showcase a simple **machine learning** (**ML**)
    model that is vulnerable to memory attacks by an insider or through a program
    that can be injected via malware to get sensitive information.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例演示中，我们将展示一个简单的**机器学习**（**ML**）模型，该模型容易受到内部人员或通过恶意软件注入的程序进行的内存攻击。
- en: 'The following are the steps involved in the in-memory attack:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 内存攻击涉及的步骤如下：
- en: Develop a simple ML model that makes use of sensitive information for training
    purposes.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发一个简单的ML模型，该模型使用敏感信息进行训练。
- en: Execute the Model.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行模型。
- en: Generate Memory dump of the process.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成进程的内存转储。
- en: Analyze the memory dump to discover the PII.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分析内存转储以发现PII。
- en: '![Figure 9.4 – In-memory data attack by an insider](img/B16573_09_04.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![图9.4 – 内部人员进行的内存数据攻击](img/B16573_09_04.jpg)'
- en: Figure 9.4 – In-memory data attack by an insider
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.4 – 内部人员进行的内存数据攻击
- en: Let’s look at the steps involved in this demonstration.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这个演示中涉及的步骤。
- en: Step 1 – generate sensitive data
  id: totrans-34
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 步骤1 – 生成敏感数据
- en: 'In this example, we will generate synthetic data using the Faker framework
    with the following features – `name`, `age`, `e-mail,` `gender`, `address`, and
    `has_cancer` (yes/no) – and 1,000 samples. Each time this code is executed, it
    generates different synthetic data examples, so it may not be the same data when
    you execute this code in your environment:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将使用Faker框架生成合成数据，具有以下特征 – `name`、`age`、`e-mail`、`gender`、`address`和`has_cancer`（是/否）
    – 以及1,000个样本。每次执行此代码时，都会生成不同的合成数据示例，因此您在环境中执行此代码时可能不会得到相同的数据：
- en: Generation of synthetic data
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 生成合成数据
- en: '[PRE0]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Here is the DataFrame:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这是DataFrame：
- en: '![Figure 9.5 – Sample sensitive dataset](img/B16573_09_05.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![图9.5 – 样本敏感数据集](img/B16573_09_05.jpg)'
- en: Figure 9.5 – Sample sensitive dataset
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.5 – 样本敏感数据集
- en: Step 2 – develop the ML model
  id: totrans-41
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 步骤2 – 开发ML模型
- en: 'Using the generated data, develop an ML model using the Random Forest algorithm:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 使用生成的数据，使用随机森林算法开发一个机器学习模型：
- en: '[PRE1]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Store this entire code in the `CancerPredictionML.py` file so that it can be
    executed.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 将整个代码存储在`CancerPredictionML.py`文件中，以便执行。
- en: Step 3 – execute this ML model
  id: totrans-45
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 步骤3 – 执行此ML模型
- en: 'To execute the model, simply use the following:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 要执行模型，只需使用以下命令：
- en: python CancerPredictionML.py
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: python CancerPredictionML.py
- en: Step 4 – memory dump and exfiltration
  id: totrans-48
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 步骤4 – 内存转储和泄露
- en: '`gcore` is a command-line utility in Unix-based systems that generates a core
    dump of a running process. A core dump is a file that contains a snapshot of the
    process memory at the time of the dump, which can be used for debugging and forensic
    analysis purposes.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`gcore`是Unix系统中的一个命令行实用程序，用于生成运行进程的核心转储。核心转储是一个文件，包含转储时进程内存的快照，可用于调试和法医分析目的。'
- en: 'Identify the `ps` command:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 识别`ps`命令：
- en: '[PRE2]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In this example, the PID of the `CancerPredictionML` program’s process is `736`:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，`CancerPredictionML`程序进程的PID是`736`：
- en: '[PRE3]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Use `gcore` to generate a core dump of the process:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`gcore`生成进程的核心转储：
- en: '[PRE4]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This command will create a file name called `core.736` in the current directory,
    which contains the process memory at the time of the dump:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将在当前目录中创建一个名为`core.736`的文件，其中包含转储时的进程内存：
- en: '[PRE5]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Analyze the memory dump file using the appropriate tools and techniques for
    your investigation.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 使用适合您调查的工具和技术分析内存转储文件。
- en: Step 5 – analyze the memory dump and find the sensitive data
  id: totrans-59
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 第5步 - 分析内存转储并找到敏感数据
- en: To analyze the memory dump using Python, frameworks such as `strings`.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用Python分析内存转储，可以使用`strings`等框架。
- en: 'For example, you can use the following `strings` command to search for sensitive
    data in the memory dump:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，您可以使用以下`strings`命令在内存转储中搜索敏感数据：
- en: '[PRE6]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This command will search the memory dump file for strings containing the word
    `Shelly` and list the details:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将在内存转储文件中搜索包含单词`Shelly`的字符串，并列出详细信息：
- en: '[PRE7]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Now, we know the full address of *Shelly* – both her email and physical addresses.
    In this way, an insider will be able to attack ML Models and obtain sensitive
    information without having access to source code or training or test data.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经知道了*Shelly*的完整地址——她的电子邮件地址和物理地址。这样，内部人员就能在不接触源代码或训练或测试数据的情况下攻击机器学习模型并获取敏感信息。
- en: Note that analyzing core dumps requires advanced knowledge of computer systems
    and forensic analysis techniques. Additionally, creating core dumps of running
    processes without proper authorization and consent is illegal and can result in
    severe legal consequences.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，分析核心转储需要计算机系统和法医分析技术的专业知识。此外，未经适当授权和同意创建运行进程的核心转储是非法的，并可能导致严重的法律后果。
- en: Confidential computation
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 机密计算
- en: '**Confidential computation** refers to the practice of processing sensitive
    data in an environment that is secure and trusted, where the confidentiality of
    the data is preserved even for the owner of the infrastructure.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '**机密计算**是指在一个安全和可信的环境中处理敏感数据的做法，即使基础设施的所有者，数据的机密性也会得到保护。'
- en: Confidential computing aims to provide an assurance of privacy, security, and
    integrity to the users of the computing system, even if the infrastructure is
    compromised by hackers or malware.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 机密计算旨在为计算系统的用户提供隐私、安全和完整性的保证，即使基础设施被黑客或恶意软件破坏。
- en: We will discuss the concept of confidential computing and the benefits of confidential
    computation next.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在下一节讨论机密计算的概念以及机密计算的好处。
- en: What is confidential computing?
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是机密计算？
- en: Confidential computing provides a secure and trusted space in which data is
    processed in an isolated and protected environment known as an enclave. **Enclaves**
    are secure regions of memory that are protected from other processes and the operating
    system. Secure enclaves can be useful for **privacy-preserving machine learning**
    (**PPML**) applications, where sensitive data is used to train ML models. In PPML,
    it is critical to ensure that the privacy of the data is protected, while still
    allowing the model to be trained effectively. Secure enclaves can help to achieve
    this by providing a secure and trusted environment for training ML models, where
    sensitive data can be processed without exposing it to the host system or other
    applications.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 机密计算提供了一个安全和可信的空间，在称为安全区域（enclaves）的隔离和保护环境中处理数据。**安全区域**是内存中的安全区域，受到其他进程和操作系统的保护。安全区域对于**隐私保护机器学习**（**PPML**）应用非常有用，在这些应用中，敏感数据用于训练机器学习模型。在PPML中，确保数据的隐私得到保护，同时仍然允许模型有效训练是至关重要的。安全区域可以通过提供一个安全和可信的环境来帮助实现这一点，在该环境中，敏感数据可以处理而不会暴露给宿主系统或其他应用程序。
- en: Enclaves can be created using hardware security features such as Intel **Software
    Guard Extensions** (**SGX**) or ARM Trust Zone.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用硬件安全功能，如英特尔**软件保护扩展**（**SGX**）或ARM Trust Zone来创建安全区域。
- en: Benefits of confidential computing
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 机密计算的好处
- en: 'The primary benefits of confidential computing are as follows:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 机密计算的主要好处如下：
- en: '**Confidentiality**: Confidential computing ensures the confidentiality of
    data by processing it in a secure and trusted environment, preventing unauthorized
    access to the data'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**机密性**：机密计算通过在安全且可信的环境中处理数据来确保数据的机密性，防止未经授权的数据访问'
- en: '**Integrity**: Confidential computing ensures the integrity of data by verifying
    that the data has not been tampered with during processing'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**完整性**：机密计算通过验证数据在处理过程中未被篡改来确保数据的完整性'
- en: '**Trust**: Confidential computing provides a trusted environment where sensitive
    data can be processed without the need to trust the host systems or other applications'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**信任**：机密计算提供了一个可信的环境，其中敏感数据可以在无需信任主机系统或其他应用程序的情况下进行处理'
- en: '**Compliance**: Confidential computing can help organizations comply with regulations
    and industry standards that require the protection of sensitive data'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**合规性**：机密计算可以帮助组织遵守需要保护敏感数据的法规和行业标准'
- en: Trusted execution environments – attestation of source code and how it helps
    protect against insider threat attacks
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可信执行环境 - 源代码的认证及其如何帮助保护免受内部威胁攻击
- en: A **trusted execution environment** (**TEE**) is a secure area of a computer
    system that ensures the confidentiality, integrity, and availability of sensitive
    data and code. The TEE provides a secure and isolated execution environment that
    is isolated from the main operating system and is designed to protect against
    various types of attacks.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '**可信执行环境**（**TEE**）是计算机系统中的一个安全区域，它确保敏感数据和代码的机密性、完整性和可用性。TEE提供了一个安全且隔离的执行环境，该环境与主操作系统隔离，旨在防止各种类型的攻击。'
- en: '**Attestation** is the process of verifying the identity of a software or hardware
    component. It is used to establish trust between different entities in a computing
    system. Attestation can be used to ensure that the code running in a TEE is genuine
    and has not been tampered with.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '**认证**是验证软件或硬件组件身份的过程。它用于在计算系统中的不同实体之间建立信任。认证可以用来确保在TEE中运行的代码是真实的，并且未被篡改。'
- en: There are several types of attestation, including source code attestation, binary
    attestation, and runtime attestation. **Source code attestation** involves verifying
    the integrity of the source code that is used to build a software component. **Binary
    attestation** involves verifying the integrity of the binary code that is produced
    by compiling the source code. **Runtime attestation** involves verifying the integrity
    of the code that is actually running in a system.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 认证有多种类型，包括源代码认证、二进制认证和运行时认证。**源代码认证**涉及验证用于构建软件组件的源代码的完整性。**二进制认证**涉及验证由编译源代码产生的二进制代码的完整性。**运行时认证**涉及验证在系统中实际运行的代码的完整性。
- en: Attestation can help protect against insider threat attacks by ensuring that
    only authorized code is executed in a TEE. Insider threats can be particularly
    challenging to defend against because they involve trusted individuals who have
    legitimate access to sensitive data and systems. Attestation can help mitigate
    the risk of insider threats by ensuring that only authorized individuals have
    access to sensitive data and systems.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 认证可以帮助通过确保仅在TEE中执行授权代码来保护免受内部威胁攻击。内部威胁可能特别难以防御，因为它们涉及有合法访问敏感数据和系统的可信个人。认证可以通过确保只有授权个人有权访问敏感数据和系统来帮助减轻内部威胁的风险。
- en: One approach to source code attestation is to use a cryptographic hash function
    to generate a hash value for the source code. The hash value can then be signed
    using a digital signature algorithm to create a digital signature. The digital
    signature can be used to verify the integrity of the source code.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 源代码认证的一种方法是通过使用加密哈希函数为源代码生成哈希值。然后可以使用数字签名算法对哈希值进行签名，以创建数字签名。数字签名可以用来验证源代码的完整性。
- en: Another approach to source code attestation is to use a secure build system
    that generates a cryptographic hash value for the source code during the build
    process. The hash value can then be signed using a digital signature algorithm
    to create a digital signature. The digital signature can be used to verify the
    integrity of the source code.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 源代码认证的另一种方法是使用在构建过程中为源代码生成加密哈希值的加密构建系统。然后可以使用数字签名算法对哈希值进行签名，以创建数字签名。数字签名可以用来验证源代码的完整性。
- en: In addition to source code attestation, other techniques can be used to protect
    against insider threat attacks. For example, access control policies can be used
    to limit the access of insiders to sensitive data and systems. Encryption can
    be used to protect sensitive data at rest and in transit. Monitoring and auditing
    can be used to detect suspicious activity and provide a record of activity for
    forensic analysis.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 除了源代码认证之外，还可以使用其他技术来防止内部威胁攻击。例如，可以使用访问控制策略来限制内部人员对敏感数据和系统的访问。加密可以用来保护静态和传输中的敏感数据。监控和审计可以用来检测可疑活动，并为法医分析提供活动记录。
- en: By using these and other techniques, organizations can help mitigate the risk
    of insider threat attacks and protect their sensitive data and systems.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用这些和其他技术，组织可以帮助减轻内部威胁攻击的风险，并保护其敏感数据和系统。
- en: How Intel SGX helps in PPML
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 英特尔SGX如何帮助在PPML中
- en: Intel SGX can help to address privacy and security concerns by enabling the
    creation of secure enclaves where ML algorithms can be executed securely, without
    risking the exposure of sensitive data to other software or the operating system.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 英特尔SGX可以通过创建安全区域来帮助解决隐私和安全问题，在这些区域中，机器学习算法可以安全地执行，而不会使敏感数据面临暴露给其他软件或操作系统的风险。
- en: One of the key features of Intel SGX is its ability to create isolated enclaves
    within the CPU that can execute code and store data in a secure and encrypted
    manner. The contents of these enclaves are protected from other software and the
    operating system, which means that even if an attacker gains access to the host
    system, they will not be able to access the contents of the enclave.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 英特尔SGX的一个关键特性是它能够在CPU内部创建隔离的安全区域，这些区域可以以安全加密的方式执行代码和存储数据。这些区域的内容受到其他软件和操作系统的保护，这意味着即使攻击者获得了对宿主系统的访问权限，他们也无法访问区域的内容。
- en: This feature is particularly important for PPML applications, as it allows sensitive
    data such as medical records or financial data to be stored and processed securely
    within the enclave, without risking exposure to unauthorized parties.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这一特性对于PPML应用尤为重要，因为它允许敏感数据，如病历或财务数据，在 enclave 中安全存储和处理，而不会面临暴露给未经授权的方的风险。
- en: In addition to the isolation provided by the enclave, Intel SGX also provides
    attestation capabilities, which allow a remote party to verify the identity of
    the enclave and ensure that the code and data within it have not been tampered
    with.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 除了提供隔离的 enclave 外，英特尔SGX还提供了认证功能，允许远程方验证 enclave 的身份，并确保其中的代码和数据没有被篡改。
- en: This feature is critical for applications that involve sensitive data, as it
    enables parties to verify that the ML algorithm is executed in a trusted environment
    and has not been compromised. Intel SGX can also help to address concerns about
    data privacy and security in multi-party ML scenarios, where multiple parties
    contribute data to a shared model.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这一特性对于涉及敏感数据的应用至关重要，因为它使各方能够验证机器学习算法是在可信环境中执行的，并且没有被破坏。英特尔SGX还可以帮助解决多方机器学习场景中关于数据隐私和安全的担忧，在这些场景中，多个方向共享模型贡献数据。
- en: In these scenarios, the use of secure enclaves can enable each party to maintain
    control over their own data, while still contributing to the shared model. This
    can help to build trust between parties and enable the creation of more effective
    ML models.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些场景中，使用安全区域可以使每一方都能控制自己的数据，同时仍然为共享模型做出贡献。这有助于在各方之间建立信任，并促进更有效的机器学习模型的创建。
- en: Industry standards for ML in TEEs
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TEEs 中机器学习的行业标准
- en: Architectures are defined by various standard bodies in order to train ML models
    with encrypted data and deploy them in third-party TEEs for execution.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用加密数据训练机器学习模型并将它们部署到第三方 TEE 中进行执行，各种标准机构定义了架构。
- en: IEEE 2830-2021 is one of the standards defined by IEEE as the *Technical Framework
    and Requirements of Trusted Execution Environment based Shared Machine Learning*
    standard ([https://ieeexplore.ieee.org/document/9586768](https://ieeexplore.ieee.org/document/9586768)).
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: IEEE 2830-2021 是 IEEE 定义的标准之一，作为基于共享机器学习的可信执行环境的技术框架和要求的标准化文件 ([https://ieeexplore.ieee.org/document/9586768](https://ieeexplore.ieee.org/document/9586768))。
- en: 'Functional components, workflows, security requirements, technical requirements,
    and protocols are specified in this standard for executing ML applications in
    TEEs. The high-level protocol steps defined in this standard are as follows:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 本标准规定了在TEE中执行机器学习应用的功能组件、工作流程、安全要求、技术要求和协议。本标准中定义的高级协议步骤如下：
- en: Data providers download and deploy tools from the computation platform.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 数据提供者从计算平台下载并部署工具。
- en: Data providers carry out data preparation, which includes data encryption and
    authorization.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 数据提供者执行数据准备，包括数据加密和授权。
- en: Encrypted data is uploaded to the computation platform by the data providers.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 数据提供者将加密数据上传到计算平台。
- en: The task initiator starts computation tasks on the platform, which include the
    model to be trained and the algorithms.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 任务发起者在平台上启动计算任务，包括要训练的模型和算法。
- en: A TEE is created by the computation platform.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 计算平台创建了一个TEE。
- en: The computation platform decrypts the encrypted data within the TEE.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 计算平台在TEE内部解密加密数据。
- en: The computation platform uses the decrypted data to perform computations within
    the TEE, yielding a computation result.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 计算平台使用解密数据在TEE内部执行计算，从而产生计算结果。
- en: The computation result is delivered to the result receiver by the computation
    platform.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 计算结果由计算平台交付给结果接收者。
- en: The TEE and the data within it are then destroyed by the computation platform.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，计算平台销毁TEE及其中的数据。
- en: Confidential Computing Consortium
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 机密计算联盟
- en: The Confidential Computing Consortium ([https://confidentialcomputing.io/](https://confidentialcomputing.io/))
    is a group of companies and organizations that are working together to promote
    the adoption of confidential computing technologies. The consortium was founded
    in 2019 and is hosted by the Linux Foundation.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 机密计算联盟([https://confidentialcomputing.io/](https://confidentialcomputing.io/))是由一些公司和组织组成的团体，他们共同努力推广机密计算技术的采用。该联盟成立于2019年，由Linux基金会主办。
- en: The Confidential Computing Consortium aims to accelerate the adoption of confidential
    computing technologies by promoting industry standards and best practices, educating
    developers and users about the benefits and use cases of confidential computing,
    and developing open source tools and frameworks to support confidential computing.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 机密计算联盟旨在通过推广行业标准与实践、教育开发者和用户关于机密计算的好处和用例，以及开发开源工具和框架以支持机密计算，来加速机密计算技术的采用。
- en: The consortium includes a wide range of companies and organizations, including
    cloud providers, hardware manufacturers, software vendors, and academic institutions.
    Members of the consortium are working together to develop open source projects
    and tools that enable confidential computing, such as Intel SGX, AMD SEV, and
    Google Asylo.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 联盟包括广泛的公司和组织，包括云服务提供商、硬件制造商、软件供应商和学术机构。联盟成员共同努力开发开源项目和工具，以实现机密计算，例如英特尔SGX、AMD
    SEV和谷歌Asylo。
- en: By promoting the adoption of confidential computing, the Confidential Computing
    Consortium aims to enable a new generation of applications that can process sensitive
    data in a secure and trusted environment, opening up new possibilities for PPML,
    secure databases, and other applications that require strong data protection.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 通过推广机密计算的采用，机密计算联盟旨在使新一代应用能够在安全和可信的环境中处理敏感数据，为PPML、安全数据库和其他需要强大数据保护的应用开辟新的可能性。
- en: High-level comparison of Intel SGX, AWS Nitro Enclaves, Google Asylo, Azure
    enclaves, and Anjuna
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 高级比较：英特尔SGX、AWS Nitro Enclaves、谷歌Asylo、Azure enclaves和Anjuna
- en: Intel SGX, AWS Nitro Enclaves, Google Asylo, Azure enclaves, and Anjuna are
    all technologies that enable the creation of secure enclaves or secure computing
    environments within a larger computing system.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 英特尔SGX、AWS Nitro Enclaves、谷歌Asylo、Azure enclaves和Anjuna都是能够在更大计算系统内创建安全区域或安全计算环境的技术。
- en: '**Intel SGX** is a hardware-based technology that provides a secure execution
    environment for applications to protect sensitive data and code from unauthorized
    access. SGX uses a combination of hardware and software features to create isolated
    enclaves, which protect sensitive data and code from other software and even the
    operating system itself.'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '**英特尔SGX**是一种基于硬件的技术，为应用提供安全的执行环境，以保护敏感数据和代码免受未经授权的访问。SGX通过结合硬件和软件功能来创建隔离的区域，从而保护敏感数据和代码免受其他软件甚至操作系统本身的侵害。'
- en: '**AWS Nitro Enclaves** is a similar technology to Intel SGX but is offered
    as a service within **Amazon Web Services** (**AWS**) and runs on Amazon’s Nitro
    hypervisor. Nitro Enclaves allows to create isolated enclaves to protect sensitive
    data and code within AWS instances. Nitro Enclaves also integrates with other
    AWS services, such as **Key Management Service** (**KMS**) and AWS **Identity
    and Access** **Management** (**IAM**).'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '**AWS Nitro Enclaves**与Intel SGX类似的技术，但作为**亚马逊网络服务**（**AWS**）中的一个服务提供，并在亚马逊的Nitro虚拟机上运行。Nitro
    Enclaves允许在AWS实例中创建隔离的安全区域以保护敏感数据和代码。Nitro Enclaves还与其他AWS服务集成，例如**密钥管理服务**（**KMS**）和AWS
    **身份和访问管理**（**IAM**）。'
- en: '**Google Asylo** is an open source framework that enables developers to build
    and run applications in secure enclaves on a variety of platforms, including Intel
    SGX and AMD **Secure Encrypted Virtualization** (**SEV**). Asylo provides a **software
    development kit** (**SDK**) that makes it easy to build and deploy applications
    that leverage secure enclaves.'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '**Google Asylo**是一个开源框架，它允许开发者在不同平台上构建和运行在安全区域中的应用程序，包括Intel SGX和AMD **安全加密虚拟化**（**SEV**）。Asylo提供了一个**软件开发工具包**（**SDK**），使得构建和部署利用安全区域的应用程序变得容易。'
- en: '**Azure enclaves** is a feature within Microsoft Azure that enables the creation
    of secure enclaves to protect sensitive data and code. Azure enclaves use Intel
    SGX technology to create isolated enclaves within Azure virtual machines.'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '**Azure安全区域**是微软Azure中的一个功能，它允许创建安全区域以保护敏感数据和代码。Azure安全区域使用Intel SGX技术，在Azure虚拟机内创建隔离的安全区域。'
- en: '**Anjuna** ([https://www.anjuna.io/](https://www.anjuna.io/)) is a platform
    that enables organizations to protect applications and data with secure enclaves
    that can run on-premises or in the cloud. Anjuna supports both Intel SGX and AMD
    SEV technologies and provides a range of tools for building, deploying, and managing
    secure enclaves. It is very easy to use the Anjuna platform with no need to make
    any changes to the current products; you only need to run/start using their libraries.'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '**Anjuna** ([https://www.anjuna.io/](https://www.anjuna.io/))是一个平台，它使组织能够使用可以在本地或云中运行的安全区域来保护应用程序和数据。Anjuna支持Intel
    SGX和AMD SEV技术，并提供了一系列用于构建、部署和管理安全区域的工具。使用Anjuna平台非常简单，无需对现有产品进行任何更改；您只需运行/开始使用它们的库即可。'
- en: 'Here is a feature-level comparison:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是功能级别的比较：
- en: '| Features/TEEs | Intel SGX | AWS Nitro Enclaves | Google Asylo | Azure enclaves
    | Anjuna |'
  id: totrans-122
  prefs: []
  type: TYPE_TB
  zh: '| 功能/TEE | Intel SGX | AWS Nitro Enclaves | Google Asylo | Azure安全区域 | Anjuna
    |'
- en: '| Platform Support | Intel-based platforms | AWS EC2 Instances | Multiple platforms
    (including Intel SGX, SEV, and TEEs on ARM architectures) | Azure confidential
    computing VMs | Multiple platforms (including Intel SGX and AMD SEV) |'
  id: totrans-123
  prefs: []
  type: TYPE_TB
  zh: '| 平台支持 | 基于Intel的平台 | AWS EC2实例 | 多平台（包括Intel SGX、SEV和ARM架构上的TEE） | Azure机密计算虚拟机
    | 多平台（包括Intel SGX和AMD SEV） |'
- en: '| Isolation Mechanism | Hardware-based enclave | Hardware-based enclave | Software-based
    (with hardware options) | Hardware- based enclave | Hardware- based enclave |'
  id: totrans-124
  prefs: []
  type: TYPE_TB
  zh: '| 隔离机制 | 基于硬件的安全区域 | 基于硬件的安全区域 | 软件基础（带有硬件选项） | 基于硬件的安全区域 | 基于硬件的安全区域 |'
- en: '| Attestation | Local and remote | AWS attestation service | Local and remote
    | Microsoft Azure attestation | Local and remote |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
  zh: '| 认证 | 本地和远程 | AWS认证服务 | 本地和远程 | 微软Azure认证 | 本地和远程 |'
- en: '| Languages Supported | C, C++, Rust, Go, Python, and Java | C, C++, and Python
    | C, C++, Go, Java, Python, and Rust | C, C++, .NET, Python, Go, Java, and Rust
    | C, C++, Go, Python, Java, and Rust |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
  zh: '| 支持的语言 | C、C++、Rust、Go、Python和Java | C、C++和Python | C、C++、Go、Java、Python和Rust
    | C、C++、.NET、Python、Go、Java和Rust | C、C++、Go、Python、Java和Rust |'
- en: '| Open Source | No (SDK is open source) | No | Yes | No | No |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
  zh: '| 开源 | 否（SDK是开源的） | 否 | 是 | 否 | 否 |'
- en: '| Ease of Use | Moderate (requires an understanding of enclaves) | High (fully
    integrated with AWS services) | High (flexible and portable across various enclave
    technologies) | High (integrated with Azure services) | High (provides an easy
    way to secure applications without modifying them) |'
  id: totrans-128
  prefs: []
  type: TYPE_TB
  zh: '| 易用性 | 中等（需要理解安全区域） | 高（完全集成到AWS服务中） | 高（灵活且可跨各种安全区域技术移植） | 高（集成到Azure服务中）
    | 高（提供了一种简单的方式来保护应用程序而无需对其进行修改） |'
- en: Table 9.1 – Comparision of TEE’s
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 表9.1 – TEE的比较
- en: In summary, all of these technologies enable the creation of secure enclaves
    to protect sensitive data and code. However, they differ in the platforms they
    support, the tools they provide, and the level of integration with other services.
    Ultimately, the choice of technology will depend on the specific needs and requirements
    of the organization.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，所有这些技术都使得创建安全区域以保护敏感数据和代码成为可能。然而，它们在支持的平台上、提供的工具以及与其他服务的集成程度方面有所不同。最终，技术的选择将取决于组织的具体需求和需求。
- en: Pros and cons of TEEs
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: TEE的优缺点
- en: Let’s say we are working on an ML model for a healthcare organization. The model
    is designed to predict disease outcomes based on a variety of patient data. This
    data is highly sensitive, including personal identifiers and health records. To
    protect this data, we decide to use a TEE.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们正在为一个医疗保健组织开发一个机器学习模型。该模型旨在根据各种患者数据预测疾病结果。这些数据非常敏感，包括个人标识符和健康记录。为了保护这些数据，我们决定使用TEE。
- en: Pros
  id: totrans-133
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 优点
- en: 'These are the pros of using a TEE:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 使用TEE的优点包括：
- en: '**Security**: The TEE provides a secure enclave within the processor where
    the ML model is executed. This enclave is isolated from the rest of the system,
    reducing the risk of data leakage or exposure.'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全性**：TEE在处理器内部提供了一个安全区域，其中执行机器学习模型。这个区域与系统其他部分隔离，降低了数据泄露或暴露的风险。'
- en: '**Data privacy**: Patient data is loaded into the secure enclave and never
    leaves it during processing. This ensures that the data cannot be accessed or
    viewed by any other process on the system, preserving patient privacy.'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据隐私**：患者数据被加载到安全的区域，在处理过程中永远不会离开。这确保了数据不能被系统上的任何其他进程访问或查看，从而保护患者隐私。'
- en: '**Integrity**: The TEE ensures that the code and data inside cannot be tampered
    with. This means that the predictions made by the ML model can be trusted to be
    accurate and unbiased, as they haven’t been interfered with.'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**完整性**：TEE确保区域内的代码和数据不会被篡改。这意味着机器学习模型做出的预测可以信任是准确和无偏见的，因为它们没有被干扰。'
- en: Cons
  id: totrans-138
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 缺点
- en: 'These are the cons of using a TEE:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 使用TEE的缺点包括：
- en: '**Complexity**: Implementing a TEE can be complex. It requires careful management
    of keys and certificates to ensure that only authorized code and data can enter
    the enclave. This can increase the complexity of the system and require a deep
    understanding of security principles.'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**复杂性**：实现TEE可能很复杂。它需要仔细管理密钥和证书，以确保只有授权的代码和数据可以进入区域。这可能会增加系统的复杂性，并需要深入了解安全原则。'
- en: '**Performance overhead**: The additional security measures introduced by the
    TEE can introduce a performance overhead. This might slow down the execution of
    the machine learning model, which could be a problem if real-time predictions
    are needed.'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**性能开销**：TEE引入的额外安全措施可能会引入性能开销。这可能会减慢机器学习模型的执行速度，如果需要实时预测，这可能会成为一个问题。'
- en: '**Limited debugging**: Debugging the ML model can be more difficult within
    a TEE. The secure nature of the enclave means that traditional debugging tools
    might not be able to access it, making it harder to identify and fix issues.'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**调试有限**：在TEE内部调试机器学习模型可能更困难。区域的安全性质意味着传统的调试工具可能无法访问它，这使得识别和修复问题更加困难。'
- en: '**Potential vulnerabilities**: While TEEs are designed to be secure, they are
    immune to attacks such as side-channel attacks. If a vulnerability is found in
    the TEE itself, it could be exploited to gain access to the secure enclave. This
    could potentially expose sensitive patient data and undermine the integrity of
    the ML model.'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**潜在漏洞**：虽然TEE被设计成安全的，但它们对侧信道攻击等攻击免疫。如果在TEE本身中发现漏洞，可能会被利用来获取对安全区域的访问权限。这可能会暴露敏感的患者数据并损害机器学习模型的完整性。'
- en: Side-channel attacks on TEEs
  id: totrans-144
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 对TEE的侧信道攻击
- en: TEEs are not immune to all types of threats. One particularly insidious class
    of attacks that can compromise TEEs is side-channel attacks.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: TEE并非对所有类型的威胁免疫。一种特别阴险的攻击类型可以破坏TEE，那就是侧信道攻击。
- en: Side-channel attacks exploit information leaked during the execution of a program,
    such as timing information, power consumption, or even electromagnetic emissions.
    These attacks do not directly target the algorithms or data protected by the TEE,
    but instead, they exploit indirect information that can be used to infer sensitive
    data.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 侧信道攻击利用程序执行过程中泄露的信息，如时间信息、功耗，甚至电磁辐射。这些攻击并不直接针对TEE保护的算法或数据，而是利用间接信息，这些信息可以用来推断敏感数据。
- en: Side-channel attacks can be particularly effective against TEEs for several
    reasons. First, TEEs often handle highly sensitive data, making them attractive
    targets for attackers. Second, because TEEs are designed to be isolated from the
    rest of the system, they may not have access to the same types of protections
    and countermeasures that are available in other parts of the system. Finally,
    the nature of TEEs can make it difficult to detect and respond to side-channel
    attacks.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 侧信道攻击对TEE特别有效有几个原因。首先，TEE通常处理高度敏感的数据，使其成为攻击者的诱人目标。其次，由于TEE被设计为与系统其他部分隔离，它们可能无法访问其他部分系统中可用的相同类型的保护和对策。最后，TEE的性质可能使得检测和应对侧信道攻击变得困难。
- en: Several types of side-channel attacks can be particularly effective against
    TEEs. Timing attacks, for example, can exploit variations in the time it takes
    for a TEE to perform certain operations. By carefully measuring these timings,
    an attacker can infer information about the data being processed by the TEE. Power
    analysis attacks can similarly exploit variations in power consumption, and electromagnetic
    attacks can exploit unintentional electromagnetic emissions.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 几种类型的侧信道攻击对TEE（可信执行环境）特别有效。例如，时间攻击可以利用TEE执行某些操作所需时间的差异。通过仔细测量这些时间，攻击者可以推断出TEE正在处理的数据信息。功率分析攻击可以类似地利用功耗的变化，而电磁攻击可以利用非预期的电磁辐射。
- en: To defend against side-channel attacks, TEEs can employ a variety of countermeasures.
    For example, they can use constant-time programming techniques to eliminate timing
    variations. They can also use power analysis countermeasures, such as randomizing
    power consumption or using power-smoothing techniques. Additionally, they can
    use shielding or other techniques to reduce electromagnetic emissions.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 为了防御侧信道攻击，TEE可以采用各种对策。例如，它们可以使用恒定时间编程技术来消除时间变化。它们还可以使用功率分析对策，如随机化功耗或使用功率平滑技术。此外，它们可以使用屏蔽或其他技术来减少电磁辐射。
- en: Despite these countermeasures, side-channel attacks remain a significant threat
    to TEEs. As TEEs continue to play a critical role in securing modern computing
    systems, the industry must continue to research and develop new defenses against
    these and other types of attacks.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管有这些对策，侧信道攻击仍然是TEE的重大威胁。随着TEE在保护现代计算系统中继续发挥关键作用，行业必须继续研究和开发新的防御措施来对抗这些以及其他类型的攻击。
- en: In conclusion, while TEEs provide a critical layer of security in modern computing
    systems, they are not immune to side-channel attacks. These attacks exploit indirect
    information leaked during the execution of a program and can be particularly effective
    against TEEs. Therefore, it is crucial to develop and implement robust countermeasures
    to protect TEEs from side-channel attacks.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，虽然TEE在现代计算系统中提供了关键的安全层，但它们并非对侧信道攻击免疫。这些攻击利用程序执行过程中泄露的间接信息，并且对TEE特别有效。因此，开发并实施强大的对策来保护TEE免受侧信道攻击至关重要。
- en: Summary
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we covered privacy attacks against data in memory and the frameworks
    and standards to protect ML applications from in-memory attacks. In the next chapter,
    we will go through privacy attacks involving Generative AI and large language
    models, and some techniques used to protect the privacy of individuals.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了针对内存中数据的隐私攻击以及保护机器学习应用免受内存攻击的框架和标准。在下一章中，我们将讨论涉及生成式AI和大型语言模型的隐私攻击，以及一些用于保护个人隐私的技术。
