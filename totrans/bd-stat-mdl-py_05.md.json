["```py\nlow_temp = np.array([0, 0, 0, 0, 0, 1, 1])\nhigh_temp = np.array([1, 2, 3, 1])\n```", "```py\ndef statistic_function(set_one, set_two):\n      return np.mean(set_one) - np.mean(set_two)\nrandom_gen=42\nperm_result = sp.stats.permutation_test(\n      (low_temp, high_temp) ,\n      statistic_function, random_state=random_gen,\n)\n```", "```py\nmannwhitneyu(higher_score_iqs, lower_score_iqs).pvalue\n# 0.00222925216588146\n```", "```py\nimport scipy.stats as stats\nimport numpy as np\nbefore_treatment = np.array([37, 14, 22, 12, 24, 35, 35, 51, 39])\nafter_treatment = np.array([38,17, 19, 7, 15, 25, 24, 38, 19])\n# Signed Rank Test\nstats.wilcoxon(before_treatment, after_treatment, alternative = 'greater')\n```", "```py\ngroup1 = [8, 13, 13, 15, 12, 10, 6, 15, 13, 9]\ngroup2 = [16, 17, 14, 14, 15, 12, 9, 12, 11, 9]\ngroup3 = [7, 8, 9, 9, 4, 15, 13, 9, 11, 9]\n```", "```py\nfrom scipy import stats\ngroup1 = [8, 13, 13, 15, 12, 10, 6, 15, 13, 9]\ngroup2 = [16, 17, 14, 14, 15, 12, 9, 12, 11, 9]\ngroup3 = [7, 8, 9, 9, 4, 15, 13, 9, 11, 9]\n#Kruskal-Wallis Test\nstats.kruskal(group1, group2, group3)\n```", "```py\nfrom statsmodels.stats.gof import chisquare\nfrom scipy.stats import chi2\nchi_square_stat, p_value = chisquare(f_obs=[45, 30, 15],\n    f_exp=[30, 30, 30])\nchi_square_critical_value = chi2.ppf(1-.05, df=2)\nprint('Chi-Square Test Statistic: %.4f'%chi_square_stat)\nprint('Chi-Square Critical Value: %.4f'%chi_square_critical_value)\nprint('P-Value: %.4f'%p_value)\n```", "```py\nfrom scipy.stats import chi2_contingency\nfrom scipy.stats import chi2\nimport numpy as np\nobserved_frequencies = np.array([[1429, 1235], [1216934, 22663]])\nchi_Square_test_statistic, p_value, degrees_of_freedom, expected_frequencies = chi2_contingency(observed_frequencies)\nchi_square_critical_value = chi2.ppf(1-.05, df=degrees_of_freedom)\nprint('Chi-Square Test Statistic: %.4f'%chi_Square_test_statistic)\nprint('Chi-Square Critical Value: %.4f'%chi_square_critical_value)\nprint('P-Value: %.4f'%p_value)\n```", "```py\nfrom statsmodels.stats.power import GofChisquarePower\nfrom statsmodels.stats.gof import chisquare_effectsize\n# probs0 asserts 25% of each brand are sold\n# In reality, 12% of Brand A, 25% of Brand B, 33% sold were Brand C, and 1% were Brand D.\neffect_size = chisquare_effectsize(probs0=[25, 25, 25, 25], probs1=[20, 30, 19, 31], cohen=True)\nalpha = 0.05\nn_bins=4 # 4 brands of phones\nanalysis = GofChisquarePower()\nresult = analysis.solve_power(effect_size, nobs=224, alpha=alpha, n_bins=n_bins)\nprint('Sample Size Required in Sample 1: {:.3f}'.format(\n    result))\n# Sample Size Required in Sample 1: 0.801\n```", "```py\nfrom scipy.stats import spearmanr\nimport pandas as pd\ndf_scores = pd.DataFrame({'Judge A':[1, 3, 5, 7, 8, 3, 9],\n                          'Judge B':[2, 5, 3, 9, 6, 1, 7]})\n```", "```py\ncorrelation, p_value = spearmanr(df_scores['Judge A'],\n    df_scores['Judge B'])\nprint('Spearman Correlation Coefficient: %.4f'%correlation)\nprint('P-Value: %.4f'%p_value)\n```"]