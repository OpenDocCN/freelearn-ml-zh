- en: '9'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Exploring Miscellaneous Features in H2O AutoML
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Along with incorporating many **Machine Learning** (**ML**) algorithms and various
    features to train them, H2O AutoML has a few miscellaneous features that make
    it an all-around service capable of catering to all kinds of business requirements.
  prefs: []
  type: TYPE_NORMAL
- en: H2O AutoML’s strength not only lies in its ability to train multiple models
    automatically but also in providing support for other services and features that
    are vital for production-grade systems.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we shall explore two unique features of H2O AutoML that are
    good to know and that can be very useful when required. The first one is H2O AutoML’s
    compatibility with a popular ML library in Python called scikit-learn. We shall
    explore how we can use H2O AutoML in a scikit-learn implementation and how it
    can provide value to the large scikit-learn community.
  prefs: []
  type: TYPE_NORMAL
- en: The second feature is an inbuilt logging system in H2O AutoML. This logging
    system logs valuable information during the AutoML training process. It can be
    especially useful if you plan to use the H2O AutoML service in production, where
    monitoring the health of your systems is of utmost priority.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding H2O AutoML integration in scikit-learn
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding H2O AutoML event logging
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With this in mind, let’s explore H2O AutoML’s first miscellaneous feature compatibility
    with scikit-learn.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For this chapter, you will require the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The latest version of your preferred web browser
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An **Integrated Development Environment** (**IDE**) of your choice
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: (Optional) Jupyter Notebook by Project Jupyter ([https://jupyter.org/](https://jupyter.org/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All the experiments conducted in this chapter have been performed on Jupyter
    notebooks to provide you with better visual examples of outputs. You are free
    to follow along using the same setup. You can also perform the same experiments
    on any Python environment as the Python code will execute the same on both environments.
  prefs: []
  type: TYPE_NORMAL
- en: All the code examples for this chapter can be found on GitHub at [https://github.com/PacktPublishing/Practical-Automated-Machine-Learning-on-H2O/tree/main/Chapter%209](https://github.com/PacktPublishing/Practical-Automated-Machine-Learning-on-H2O/tree/main/Chapter%209).
  prefs: []
  type: TYPE_NORMAL
- en: Understanding H2O AutoML integration in scikit-learn
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Scikit-learn** is one of the most commonly used open source ML libraries
    in the field of ML and data science. It is a library for the Python programming
    language and focuses on ML tooling functions. It involves modules that perform
    mathematical and statistical analysis, general-purpose ML algorithms, as well
    as functions to train, test, and evaluate ML models.'
  prefs: []
  type: TYPE_NORMAL
- en: Scikit-learn was originally developed by David Cournapeau and was initially
    called **scikits.learn**. It was created as a Google Summer of Code project in
    2007, which was later picked up as a thesis project by Matthieu Brucher that same
    year. It was later re-written and further developed by Fabian Pedregosa, Gael
    Varoquaux, Alexandre Gramfort, and Vincent Michel from the French Institute of
    Research in Computer Science and Automation in Rocquencourt, France. Scikit-learn’s
    first public release of version 1 was made on February 1, 2010.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find more details about scikit-learn here: [https://scikit-learn.org/stable/](https://scikit-learn.org/stable/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The scikit-learn library is built on the following packages:'
  prefs: []
  type: TYPE_NORMAL
- en: '**NumPy**: NumPy is a Python library used to work exclusively with arrays.
    It is used for scientific computing in Python and provides functions to work with
    multi-dimensional arrays. It also provides a wide variety of fast computing mathematical
    operations on said arrays, making it ideal for data analytics. It can perform
    array shape manipulation, sorting, searching, discrete Fourier transform operations,
    linear algebra, and statistics. You can find more details about NumPy here: https://numpy.org/.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SciPy**: SciPy is a scientific computational library that is built on top
    of NumPy. It provides advanced scientific computational functions. It is used
    to perform operations such as image processing, clustering, gradient optimization,
    and much more. All numerical computations in Python are done by SciPy. You can
    find more details about SciPy here: [https://scipy.org/](https://scipy.org/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Matplotlib**: Matplotlib is a library that is used for creating visualizations
    from data. These visualizations involve various types of graphs and charts that
    rely on computed data that can be easily expressed and explained visually. It
    can create plot diagrams that are good for publications in scientific research
    papers and create interactive diagrams, all of which can be exported into different
    types of formats. You can find more details about Matplotlib here: [https://matplotlib.org/](https://matplotlib.org/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scikit-learn is often used by data scientists when experimenting with data.
    It provides tons of flexibility when conducting experiments and since its APIs
    are very easy to use, it is often the go-to library for performing general ML
    functions.
  prefs: []
  type: TYPE_NORMAL
- en: 'H2O AutoML can be easily integrated with scikit-learn. You can use H2O AutoML
    as a scikit-learn **Estimator** and use it in conjunction with other scikit-learn
    functions to use the best of both worlds. H2O AutoML interacts with scikit-learn
    using the **h2o.sklearn** module. The h2o.sklearn module exposes two wrapper functions
    to perform AutoML:'
  prefs: []
  type: TYPE_NORMAL
- en: '**H2OAutoMLClassifier**: This function is used to train classification models
    using H2O AutoML'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**H2OAutoMLRegressor**: This function is used to train regression models using
    H2O AutoML'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The functions accept input data of various formats such as H2Oframes, NumPy
    arrays, or even pandas DataFrames. They also expose standard training and prediction
    APIs that are similar to how they are used in scikit-learn. This enables scikit-learn
    to use H2O AutoML, along with other scikit-learn components.
  prefs: []
  type: TYPE_NORMAL
- en: The H2O AutoML Estimators also retain their original functionality, such as
    leaderboards and training information, among others. Users can still access these
    details in scikit-learn to extract information from the AutoML training for further
    experimentation or analysis.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have a better understanding of the scikit-learn library and what
    it is used for, let’s learn how to use it alongside H2O AutoML. We will start
    by understanding the various ways that we can install scikit-learn on our system.
  prefs: []
  type: TYPE_NORMAL
- en: Building and installing scikit-learn
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Installing scikit-learn is very easy. There are three different ways to install
    scikit-learn on your system:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing the latest official release of scikit-learn
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing the scikit-learn version provided by your Python distribution or
    operating system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building and installing the scikit-learn package from the source
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s quickly go through these options one by one so that we have scikit-learn
    ready to use alongside H2O AutoML.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the latest official release of scikit-learn
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This process can vary, depending on what type of Python package manager you
    are using on your system:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the `pip` package manager, execute the following command in your Terminal
    to install the latest release of scikit-learn:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The following command will show you where scikit-learn is installed, as well
    as its version:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'Using the **Anaconda** or **Miniconda** package manager, execute the following
    command in your Terminal to install the latest release of scikit-learn:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The following command will show you the version of scikit-learn installed on
    your system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'You can use the following command to import the installed scikit-learn module
    to ensure that it is successfully installed and then display its version:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Now that we know how to install scikit-learn using `pip`, Anaconda, and Miniconda,
    let’s look at another way of installing it using the Python distribution that
    comes packaged with your operating system.
  prefs: []
  type: TYPE_NORMAL
- en: Installing scikit-learn using your operating system’s Python distribution
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Since scikit-learn is so commonly used by developers, it is often packaged along
    with the built-in package manager in various Python distributions or operating
    systems. This enables users to directly install the available scikit-learn package
    without needing to download it from the internet.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a list of some of the operating systems that come with their
    own version of prepackaged scikit-learn and the respective Terminal commands to
    install it:'
  prefs: []
  type: TYPE_NORMAL
- en: '`python-scikit-learn`. To install this library, execute the following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Debian/Ubuntu**: The Debian Ubuntu distribution splits the scikit-learn package
    into three parts:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**python3-sklearn**: This package contains the Python modules for scikit-learn
    functions'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**python3-sklearn-lib**: This package contains the low-level implementations
    and bindings for scikit-learn'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**python3-sklearn-doc**: This package contains the documentation for scikit-learn'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To install this library, execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '`python3-scikit-learn`. It is the only one available in `Fedora30`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`pkgsrc-wip` from here: [http://pkgsrc.se/math/py-scikit-learn](http://pkgsrc.se/math/py-scikit-learn).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The drawback of this process is that it often comes with an older version of
    scikit-learn. This, however, can be fixed by upgrading the installed packages
    to the latest versions using the respective package managers.
  prefs: []
  type: TYPE_NORMAL
- en: Building and installing the scikit-learn package from the source
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Users that want to use the latest experimental features or those who wish to
    contribute to scikit-learn can directly build and install scikit-learn’s latest
    available version.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can build and install scikit-learn from the source by executing the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use Git to check out the latest source from the scikit-learn repository on
    GitHub. The scikit-learn repository can be found here: [https://github.com/scikit-learn/scikit-learn](https://github.com/scikit-learn/scikit-learn).
    Execute the following command to clone the latest scikit-learn repository:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use Python to create a virtual environment and install **NumPy**, **SciPy**,
    and **Cython**, which are the build dependencies for scikit-learn:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use `pip` to build the project by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once the installation is completed, check if scikit-learn is installed correctly
    by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: To avoid conflicts with other packages, it is highly recommended to install
    scikit-learn in a virtual environment or a **conda** environment. Also, when installing
    SciPy and NumPy, it is recommended to use **binary wheels** as they are not recompiled
    from the source.
  prefs: []
  type: TYPE_NORMAL
- en: Experimenting with scikit-learn
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we have successfully installed scikit-learn, let’s quickly look at
    a simple implementation of scikit-learn for training a model. Using this as a
    reference, we shall then explore how we can incorporate H2O AutoML into it.
  prefs: []
  type: TYPE_NORMAL
- en: The dataset we shall use for this experiment will be the same Iris flower dataset
    that we have been using throughout this book. This dataset is a good example of
    using ML to solve a classification problem.
  prefs: []
  type: TYPE_NORMAL
- en: So, let’s begin by implementing it using pure scikit-learn functions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps to train your ML model in Python using scikit-learn:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Import the `sklearn` and `numpy` libraries:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The Iris flower dataset is readily available in the `sklearn` library; it is
    present in the dataset submodule of `sklearn`. Next, import that dataset by executing
    the following commands. Let’s also have a closer look at the contents of the DataFrame:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You should get an output displaying the contents of the DataFrame in the form
    of a dictionary. Let’s investigate the important key-value pairs in the dictionary
    to understand what we are dealing with:'
  prefs: []
  type: TYPE_NORMAL
- en: '`data`: This key contains all the features of the dataset – that is, the sepal
    length, sepal width, petal length, and petal width – in the form of a multi-dimensional
    array.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`target_names`: This key contains the names of the target or labels of the
    dataset – that is, Iris-setosa, Iris-versicolour, and Iris-virginica. This is
    an array, and the index of the names is the numerical representation that is used
    in the actual content of the dataset.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`target`: This key contains all the target values, also called label values,
    of the dataset. This is also an array that represents the values of the target
    that would have otherwise been a column in a tabular dataset. The values are numeric,
    where `0` represents Iris-setosa, `1` represents Iris-versicolour, and `2` represents
    Iris-virginica, as decided by their index values in `target_names`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'With this information in mind, extract the features and labels into separate
    variables by executing the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We need to split the dataset into two parts – one for training and the other
    for testing. Unlike H2O, in scikit-learn, we treat the features and labels as
    two separate entities. Both of them should have the same dimensional length to
    match the data contents. To do this split, execute the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The split functionality splits the features and labels into a 70% to 30% ratio,
    where 70% of the data is kept for training and the remaining 30% is kept for testing.
    So, we eventually end up with a total of four DataFrames, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`feature_train`: This DataFrame contains 70% of the feature data to be used
    for training'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`label_train`: This DataFrame contains 70% of the label data to be used for
    training'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`feature_test`: This DataFrame contains 30% of the feature data to be used
    for testing'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`label_test`: This DataFrame contains 30% of the label data to be used for
    testing'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Once the training and testing DataFrames are ready, declare and initialize
    the ML algorithm to be used for model training. Scikit-learn has separate libraries
    for different types of algorithms. Since we are working with a classification
    problem, let’s use the **logistic regression** algorithm to train a classification
    model. Execute the following command to initialize a logistic regression function
    to train a model:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, let’s train a model using the `feature_train` and `label_train` datasets.
    Execute the following function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once training is finished, we can use the same logistic regression object to
    make predictions on the `feature_test` DataFrame. Execute the following command
    and print out the prediction’s output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You should get an output similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.1 – Prediction output from scikit-learn logistic regression ](img/B17298_09_001.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.1 – Prediction output from scikit-learn logistic regression
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also measure the accuracy of your predictions by executing the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You should get an accuracy of around `97.77`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this experiment, we learned how to use scikit-learn to import a dataset,
    perform splitting, and then use logistic regression to train a classification
    model. But as we learned in the previous chapters, there are plenty of ML algorithms
    to choose from. Each has its own way of dealing with **variance** and **bias**.
    So, as expected, the most obvious question remains unanswered: *which ML algorithm
    should we use?*'
  prefs: []
  type: TYPE_NORMAL
- en: As we saw in this experiment, scikit-learn may have tons of support for different
    algorithms, but training all of them can become complicated from a programming
    point of view. This is where we can integrate H2O AutoML to perform automated
    model training to train all the ML algorithms.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have got a good idea of how we can use scikit-learn to train models,
    let’s see how we can use H2O AutoML with scikit-learn.
  prefs: []
  type: TYPE_NORMAL
- en: Using H2O AutoML in scikit-learn
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, we will learn how to use H2O AutoML in scikit-learn to perform classification
    using the `H2OAutoMLClassifier` submodule. We shall use the same classification
    ML problem using the Iris dataset and see how we can train multiple models using
    H2O AutoML.
  prefs: []
  type: TYPE_NORMAL
- en: Experimenting with H2OAutoMLClassifier
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Follow these steps to train your H2O AutoML classification model in Python
    using scikit-learn:'
  prefs: []
  type: TYPE_NORMAL
- en: Implement *steps 1* to *4* that we followed in the *Experimenting with scikit-learn*
    section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the experiment we performed in the *Experimenting with scikit-learn* section,
    after *step 4*, we initialized the logistic regression algorithm by importing
    the `LogisticRegression` submodule from `sklearn.linear_model`. In this experiment,
    we will import the `H2OAutoMLClassifier` submodule from the `h2o.sklearn` module
    instead:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Just like how we set the AutoML parameters in the previous chapters, we have
    set `max_models` to `10`, `max_runtime_secs_per_model` to `30` seconds, the random
    `seed` value to `5`, and `sort_metric` to `logloss`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once `H2OAutoMLClassifier` has been initialized, you can use it to fit – in
    other words, train – your models. Execute the following command to trigger AutoML
    training:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'First, the program will check if an H2O instance is already running on localhost:54321\.
    If not, then H2O will spin up an instance of the H2O server; otherwise, it will
    reuse the already existing one to train the AutoML models. Once training starts,
    you should get an output similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.2 – Output from H2O AutoML classifier training ](img/B17298_09_002.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.2 – Output from H2O AutoML classifier training
  prefs: []
  type: TYPE_NORMAL
- en: From the output, you can see that H2O first imported and parsed the **feature_train**
    and **label_train** DataFrames. Then, it started the AutoML training.
  prefs: []
  type: TYPE_NORMAL
- en: 'To view the results of the AutoML training, you can view the H2O **leaderboard**
    by executing the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You should get an output similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.3 – H2O AutoML leaderboard ](img/B17298_09_003.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.3 – H2O AutoML leaderboard
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the same H2O AutoML classifier, you can also make predictions, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You should get an output similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.4 – Output of the prediction using H2OAutoMLClassifier ](img/B17298_09_004.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.4 – Output of the prediction using H2OAutoMLClassifier
  prefs: []
  type: TYPE_NORMAL
- en: By default, the classifier will use the model with the highest rank on the leaderboard
    to make predictions.
  prefs: []
  type: TYPE_NORMAL
- en: With that, you have learned how to implement H2O AutoML in scikit-learn to solve
    classification problems using `H2OAutoMLClassifier`.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have a good idea of how we can use `H2OAutoMLClassifier` to perform
    classification predictions on data, let’s see how we can perform regression predictions
    using the `H2OAutoMLRegressor` submodule.
  prefs: []
  type: TYPE_NORMAL
- en: Experimenting with H2OAutoMLRegressor
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now, let’s see how we solve a `H2OAutoMLRegressor`. For this experiment, we
    shall use the Red Wine Quality dataset that we used previously in [*Chapter 7*](B17298_07.xhtml#_idTextAnchor143),
    *Working with Model Explainability*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps to train your H2O AutoML regression model in Python using
    scikit-learn:'
  prefs: []
  type: TYPE_NORMAL
- en: Implement *Steps 1* to *4* that we followed in the *Experimenting with scikit-learn*
    section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the experiment we performed in the *Experimenting with H2OAutoMLClassifier*
    section, we initialized `H2OAutoMLClassifier`. Since we are dealing with a regression
    problem in this experiment, we shall use the `H2OAutoMLRegressor` submodule. Execute
    the following command to import and instantiate the `H2OAutoMLRegressor` class
    object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once `H2OAutoMLRegressor` has been initialized, we can trigger AutoML to train
    our regression models. Execute the following command to trigger AutoML:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once model training finishes, you should get an output similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.5 – Output from H2O AutoML regressor training ](img/B17298_09_005.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.5 – Output from H2O AutoML regressor training
  prefs: []
  type: TYPE_NORMAL
- en: 'Similar to `H2OAutoMLClassifier`, you can also view the results of the AutoML
    training on the H2O **leaderboard** by executing the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Making predictions is also very easy. You use the same `H2OAutoMLRegressor`
    object and call its `predict` method while passing the feature dataset kept aside
    for testing. Execute the following command to make predictions using the leader
    model trained by `H2OAutoMLRegressor`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You should get the results of the prediction, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.6 – Output of the prediction using H2OAutoMLRegressor ](img/B17298_09_006.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.6 – Output of the prediction using H2OAutoMLRegressor
  prefs: []
  type: TYPE_NORMAL
- en: The prediction output is an array containing the `feature_test` DataFrame. This
    is how you can implement H2O AutoML in scikit-learn to solve regression problems
    using `H2OAutoMLRegressor`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that you know how to use H2O AutoML in scikit-learn, let’s move on to the
    next miscellaneous feature of H2O AutoML: event logging.'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding H2O AutoML event logging
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since H2O AutoML automates most of the ML process, we have given some control
    to the machine. Encapsulation means that all the complexities that lie in AutoML
    are all hidden away, and we are just aware of the inputs and whatever output H2O
    AutoML gives us. If there is any issue in H2O AutoML and it gives us models that
    don’t make sense or are not expected, then we will need to dig deeper into how
    AutoML trained the models. Hence, we need a way to keep track of what’s happening
    internally in H2O AutoML and whether it is training models as expected or not.
  prefs: []
  type: TYPE_NORMAL
- en: When building such software systems that are aimed to be used in production,
    you will always need a logging system to log information. The virtual nature of
    software makes it difficult for users to keep track of what is going on as the
    system does its processing and other activities. Any failures or issues can lead
    to a cascade of underlying problems that developers may end up finding out too
    late, if ever.
  prefs: []
  type: TYPE_NORMAL
- en: That is why logging systems are always implemented to provide support to your
    system. Logs generated by your system help developers track down the source of
    the problem and mitigate it promptly. H2O AutoML can also generate logs containing
    meta-information about all the underlying processing that happens when it is training
    models. You can use these logs to keep some sense of control when you are letting
    H2O take care of all the ML processing.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two types of logs that AutoML generates. They are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Event Logs**: These are event logs that are generated in the backend of AutoML
    as training progresses. All the logs are collected and presented as an H2O DataFrame.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Training Logs**: These are logs that show training and prediction times as
    AutoML trains models and are in the form of a dictionary of key-value pairs. The
    training times are in epochs and are mostly useful for post-analysis of model
    training.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s see how we can retrieve these logs from H2O AutoML via a practical implementation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps to train models using H2O AutoML. Then, we will learn how
    to extract the logs and understand what they look like:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Import the `h2o` module and initialize H2O to spin up a local H2O server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Import the Iris dataset by passing the location of where you downloaded the
    dataset:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set the label and features:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Initialize the H2O AutoML object with parameters, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Trigger AutoML training by passing in the feature columns, label column, and
    the DataFrame to use to train the models on:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once training is finished, you can view the event logs by using the `event_log`
    property of the AutoML object. Let’s retrieve the log DataFrame and have a look
    at its content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You should get an output similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.7 – Event log output from H2O AutoML ](img/B17298_09_007.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.7 – Event log output from H2O AutoML
  prefs: []
  type: TYPE_NORMAL
- en: 'Similarly, you can view the event logs in the R programming language by executing
    the following R commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'The event log contains the following information:'
  prefs: []
  type: TYPE_NORMAL
- en: '**timestamp**: This column is the time of occurrence of a particular event.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**level**: In logging systems, logs are generally categorized into certain
    classes of importance or criticality. In most cases, the levels are as follows
    based on criticality ranking:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**FATAL**: This log level indicates that the application is facing a critical
    issue and will need to stop functioning and shut down.'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '**ERROR**: This log level indicates that the application is facing an issue
    performing certain functions. However, the issue is not that critical that the
    application needs to shut down.'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '**WARN**: This log level indicates that the application has detected something
    unusual that is harmless and is not affecting any functionality.'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '**INFO**: This log level indicates normal behavior updates that can be recorded
    and stored for future reference if needed. They are usually informative.'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '**DEBUG**: This log level indicates more detailed diagnostic details that are
    often needed when developing an application or to gather more information when
    you are performing diagnostic actions or debugging an issue.'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '**TRACE**: This log level is similar to **DEBUG** albeit with finer details,
    especially when you are tracing the flow of information in a code base.'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '**stage**: This column indicates the stage in AutoML training at which the
    log was generated.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**message**: This column contains a descriptive message that provides information
    about the event that occurred.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**name**: This column contains the name of the event log that occurred if it
    is set.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**value**: This column contains the value of the event log that occurred if
    it is set.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now, let’s retrieve the training logs and look at their content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You should get an output similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.8 – Event log output from H2O AutoML ](img/B17298_09_008.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.8 – Event log output from H2O AutoML
  prefs: []
  type: TYPE_NORMAL
- en: 'Similarly, you can view the event logs in the R programming language by executing
    the following R commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'The training log contains the following information:'
  prefs: []
  type: TYPE_NORMAL
- en: '`creation_epoch`: This key in the training log dictionary contains the epoch
    value of when the AutoML job was created.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`start_epoch`: This key in the training log dictionary contains the epoch value
    of when the AutoML build started.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`start_{model_name}`: This type of key in the training log dictionary contains
    the epoch value of when the training of a particular model was started.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`stop_epoch`: This key in the training log dictionary contains the epoch value
    of when the AutoML build stopped.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`duration_secs`: This key in the training log dictionary contains the total
    time when AutoML was running in seconds.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This experiment gives us a good example of how H2O generates log events. When
    building an ML system using H2O AutoML, you can incorporate these logs into your
    logging system to keep an eye on H2O AutoML’s functionality. This will help you
    identify any issues that may arise promptly and keep your models in production
    of the highest quality. You will be alerted if there were any issues during training
    and before you accidentally end up deploying faulty models in production.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we understood some of the miscellaneous features of H2O AutoML.
    We started by understanding the scikit-learn library and getting an idea of its
    implementation. Then, we saw how we can use the `H2OAutoMLClassifier` library
    and the `H2OAutoMLRegressor` library in a scikit-learn implementation to train
    AutoML models.
  prefs: []
  type: TYPE_NORMAL
- en: Then, we explored H2O AutoML’s logging system. After that, we implemented a
    simple experiment where we triggered AutoML training; once it was finished, we
    extracted the event logs and the training logs in both the Python and R programming
    languages. Then, we understood the contents of those logs and how that information
    benefits us in keeping an eye on H2O AutoML functionality.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we shall further focus on using H2O in production and how
    we can do so using H2O’s Model Object Optimized.
  prefs: []
  type: TYPE_NORMAL
