- en: '9'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '9'
- en: Exploring Miscellaneous Features in H2O AutoML
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索 H2O AutoML 中的杂项特性
- en: Along with incorporating many **Machine Learning** (**ML**) algorithms and various
    features to train them, H2O AutoML has a few miscellaneous features that make
    it an all-around service capable of catering to all kinds of business requirements.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 除了整合许多**机器学习**（**ML**）算法和多种特性来训练它们之外，H2O AutoML 还有一些杂项特性，使其成为一个全能型服务，能够满足各种商业需求。
- en: H2O AutoML’s strength not only lies in its ability to train multiple models
    automatically but also in providing support for other services and features that
    are vital for production-grade systems.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: H2O AutoML 的优势不仅在于其自动训练多个模型的能力，还在于提供对其他对生产级系统至关重要的服务和特性的支持。
- en: In this chapter, we shall explore two unique features of H2O AutoML that are
    good to know and that can be very useful when required. The first one is H2O AutoML’s
    compatibility with a popular ML library in Python called scikit-learn. We shall
    explore how we can use H2O AutoML in a scikit-learn implementation and how it
    can provide value to the large scikit-learn community.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨 H2O AutoML 的两个独特特性，这些特性值得了解，并且在需要时可能非常有用。第一个特性是 H2O AutoML 与 Python
    中流行的机器学习库 scikit-learn 的兼容性。我们将探讨如何在 scikit-learn 实现中使用 H2O AutoML，以及它如何为庞大的 scikit-learn
    社区提供价值。
- en: The second feature is an inbuilt logging system in H2O AutoML. This logging
    system logs valuable information during the AutoML training process. It can be
    especially useful if you plan to use the H2O AutoML service in production, where
    monitoring the health of your systems is of utmost priority.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个特性是 H2O AutoML 内置的日志系统。这个日志系统在 AutoML 训练过程中记录有价值的信息。如果您计划在生产中使用 H2O AutoML
    服务，这可能特别有用，因为在生产中监控系统健康是最重要的。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Understanding H2O AutoML integration in scikit-learn
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解 H2O AutoML 在 scikit-learn 中的集成
- en: Understanding H2O AutoML event logging
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解 H2O AutoML 事件日志
- en: With this in mind, let’s explore H2O AutoML’s first miscellaneous feature compatibility
    with scikit-learn.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 基于这个想法，让我们探索 H2O AutoML 与 scikit-learn 的第一个杂项特性兼容性。
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'For this chapter, you will require the following:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本章，您需要以下内容：
- en: The latest version of your preferred web browser
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您首选的网页浏览器的最新版本
- en: An **Integrated Development Environment** (**IDE**) of your choice
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您选择的**集成开发环境**（**IDE**）
- en: (Optional) Jupyter Notebook by Project Jupyter ([https://jupyter.org/](https://jupyter.org/))
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: （可选）Project Jupyter 的 Jupyter Notebook ([https://jupyter.org/](https://jupyter.org/))
- en: All the experiments conducted in this chapter have been performed on Jupyter
    notebooks to provide you with better visual examples of outputs. You are free
    to follow along using the same setup. You can also perform the same experiments
    on any Python environment as the Python code will execute the same on both environments.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中进行的所有实验都是在 Jupyter 笔记本上进行的，以便为您提供更好的输出可视化示例。您可以使用相同的设置自由跟随。您也可以在任何 Python
    环境中执行相同的实验，因为 Python 代码在这两种环境中都会执行相同的操作。
- en: All the code examples for this chapter can be found on GitHub at [https://github.com/PacktPublishing/Practical-Automated-Machine-Learning-on-H2O/tree/main/Chapter%209](https://github.com/PacktPublishing/Practical-Automated-Machine-Learning-on-H2O/tree/main/Chapter%209).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的所有代码示例都可以在 GitHub 上找到，链接为 [https://github.com/PacktPublishing/Practical-Automated-Machine-Learning-on-H2O/tree/main/Chapter%209](https://github.com/PacktPublishing/Practical-Automated-Machine-Learning-on-H2O/tree/main/Chapter%209)。
- en: Understanding H2O AutoML integration in scikit-learn
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 H2O AutoML 在 scikit-learn 中的集成
- en: '**Scikit-learn** is one of the most commonly used open source ML libraries
    in the field of ML and data science. It is a library for the Python programming
    language and focuses on ML tooling functions. It involves modules that perform
    mathematical and statistical analysis, general-purpose ML algorithms, as well
    as functions to train, test, and evaluate ML models.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**Scikit-learn** 是机器学习和数据科学领域中应用最广泛的开源机器学习库之一。它是一个用于 Python 编程语言的库，专注于机器学习工具函数。它包括执行数学和统计分析、通用机器学习算法以及用于训练、测试和评估机器学习模型的函数。'
- en: Scikit-learn was originally developed by David Cournapeau and was initially
    called **scikits.learn**. It was created as a Google Summer of Code project in
    2007, which was later picked up as a thesis project by Matthieu Brucher that same
    year. It was later re-written and further developed by Fabian Pedregosa, Gael
    Varoquaux, Alexandre Gramfort, and Vincent Michel from the French Institute of
    Research in Computer Science and Automation in Rocquencourt, France. Scikit-learn’s
    first public release of version 1 was made on February 1, 2010.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Scikit-learn最初由David Cournapeau开发，最初被称为**scikits.learn**。它是在2007年作为一个Google
    Summer of Code项目创建的，同年Matthieu Brucher将其作为论文项目。后来，它由法国罗克恩库尔计算机科学和自动化研究所的Fabian
    Pedregosa、Gael Varoquaux、Alexandre Gramfort和Vincent Michel重新编写并进一步开发。Scikit-learn的第一个版本1的公开发布是在2010年2月1日。
- en: 'You can find more details about scikit-learn here: [https://scikit-learn.org/stable/](https://scikit-learn.org/stable/).'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在这里找到更多关于scikit-learn的详细信息：[https://scikit-learn.org/stable/](https://scikit-learn.org/stable/).
- en: 'The scikit-learn library is built on the following packages:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: scikit-learn库建立在以下包之上：
- en: '**NumPy**: NumPy is a Python library used to work exclusively with arrays.
    It is used for scientific computing in Python and provides functions to work with
    multi-dimensional arrays. It also provides a wide variety of fast computing mathematical
    operations on said arrays, making it ideal for data analytics. It can perform
    array shape manipulation, sorting, searching, discrete Fourier transform operations,
    linear algebra, and statistics. You can find more details about NumPy here: https://numpy.org/.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**NumPy**：NumPy是一个用于专门处理数组的Python库。它在Python中进行科学计算，并提供用于处理多维数组的函数。它还提供了对数组的各种快速计算数学运算，使其非常适合数据分析。它可以执行数组形状操作、排序、搜索、离散傅里叶变换操作、线性代数和统计。你可以在[https://numpy.org/](https://numpy.org/)找到更多关于NumPy的详细信息。'
- en: '**SciPy**: SciPy is a scientific computational library that is built on top
    of NumPy. It provides advanced scientific computational functions. It is used
    to perform operations such as image processing, clustering, gradient optimization,
    and much more. All numerical computations in Python are done by SciPy. You can
    find more details about SciPy here: [https://scipy.org/](https://scipy.org/).'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SciPy**：SciPy是一个建立在NumPy之上的科学计算库。它提供了高级科学计算函数。它用于执行图像处理、聚类、梯度优化等操作。Python中的所有数值计算都由SciPy执行。你可以在[https://scipy.org/](https://scipy.org/)找到更多关于SciPy的详细信息。'
- en: '**Matplotlib**: Matplotlib is a library that is used for creating visualizations
    from data. These visualizations involve various types of graphs and charts that
    rely on computed data that can be easily expressed and explained visually. It
    can create plot diagrams that are good for publications in scientific research
    papers and create interactive diagrams, all of which can be exported into different
    types of formats. You can find more details about Matplotlib here: [https://matplotlib.org/](https://matplotlib.org/).'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Matplotlib**：Matplotlib是一个用于从数据创建可视化的库。这些可视化涉及各种类型的图表和图表，这些图表依赖于可以轻松用视觉表达和解释的计算数据。它可以创建适合在科学论文中发表的图表，并创建交互式图表，所有这些都可以导出为不同类型的格式。你可以在[https://matplotlib.org/](https://matplotlib.org/)找到更多关于Matplotlib的详细信息。'
- en: Scikit-learn is often used by data scientists when experimenting with data.
    It provides tons of flexibility when conducting experiments and since its APIs
    are very easy to use, it is often the go-to library for performing general ML
    functions.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 数据科学家在实验数据时经常使用Scikit-learn。它在进行实验时提供了大量的灵活性，由于其API非常易于使用，因此它经常是执行通用机器学习函数的首选库。
- en: 'H2O AutoML can be easily integrated with scikit-learn. You can use H2O AutoML
    as a scikit-learn **Estimator** and use it in conjunction with other scikit-learn
    functions to use the best of both worlds. H2O AutoML interacts with scikit-learn
    using the **h2o.sklearn** module. The h2o.sklearn module exposes two wrapper functions
    to perform AutoML:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: H2O AutoML可以轻松集成到scikit-learn中。你可以将H2O AutoML用作scikit-learn的**Estimator**，并与其他scikit-learn函数结合使用，以充分利用两者的优点。H2O
    AutoML通过**h2o.sklearn**模块与scikit-learn交互。h2o.sklearn模块公开了两个包装函数以执行AutoML：
- en: '**H2OAutoMLClassifier**: This function is used to train classification models
    using H2O AutoML'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**H2OAutoMLClassifier**：此函数用于使用H2O AutoML训练分类模型'
- en: '**H2OAutoMLRegressor**: This function is used to train regression models using
    H2O AutoML'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**H2OAutoMLRegressor**：此函数用于使用H2O AutoML训练回归模型'
- en: The functions accept input data of various formats such as H2Oframes, NumPy
    arrays, or even pandas DataFrames. They also expose standard training and prediction
    APIs that are similar to how they are used in scikit-learn. This enables scikit-learn
    to use H2O AutoML, along with other scikit-learn components.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数接受各种格式的输入数据，如H2Oframes、NumPy数组，甚至是pandas DataFrames。它们还公开了与scikit-learn中使用的类似的标准训练和预测API。这使得scikit-learn能够使用H2O
    AutoML，以及其他scikit-learn组件。
- en: The H2O AutoML Estimators also retain their original functionality, such as
    leaderboards and training information, among others. Users can still access these
    details in scikit-learn to extract information from the AutoML training for further
    experimentation or analysis.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: H2O AutoML估计器也保留了它们原有的功能，例如排行榜和训练信息等。用户仍然可以在scikit-learn中访问这些详细信息，以从AutoML训练中提取信息进行进一步的实验或分析。
- en: Now that we have a better understanding of the scikit-learn library and what
    it is used for, let’s learn how to use it alongside H2O AutoML. We will start
    by understanding the various ways that we can install scikit-learn on our system.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们对scikit-learn库及其用途有了更好的了解，让我们学习如何在H2O AutoML旁边使用它。我们将从了解我们可以在系统上安装scikit-learn的各种方法开始。
- en: Building and installing scikit-learn
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建和安装scikit-learn
- en: 'Installing scikit-learn is very easy. There are three different ways to install
    scikit-learn on your system:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 安装scikit-learn非常简单。在您的系统上安装scikit-learn有三种不同的方法：
- en: Installing the latest official release of scikit-learn
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装scikit-learn的最新官方版本
- en: Installing the scikit-learn version provided by your Python distribution or
    operating system
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装由您的Python发行版或操作系统提供的scikit-learn版本
- en: Building and installing the scikit-learn package from the source
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从源代码构建和安装scikit-learn包
- en: Let’s quickly go through these options one by one so that we have scikit-learn
    ready to use alongside H2O AutoML.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐一快速了解这些选项，以便我们可以在H2O AutoML旁边准备好使用scikit-learn。
- en: Installing the latest official release of scikit-learn
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装scikit-learn的最新官方版本
- en: 'This process can vary, depending on what type of Python package manager you
    are using on your system:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 此过程可能因您系统上使用的Python包管理器类型而异：
- en: 'Using the `pip` package manager, execute the following command in your Terminal
    to install the latest release of scikit-learn:'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`pip`包管理器，在您的终端中执行以下命令以安装scikit-learn的最新版本：
- en: '[PRE0]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The following command will show you where scikit-learn is installed, as well
    as its version:'
  id: totrans-42
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以下命令将显示scikit-learn的安装位置及其版本：
- en: '[PRE1]'
  id: totrans-43
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Using the **Anaconda** or **Miniconda** package manager, execute the following
    command in your Terminal to install the latest release of scikit-learn:'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用**Anaconda**或**Miniconda**包管理器，在您的终端中执行以下命令以安装scikit-learn的最新版本：
- en: '[PRE2]'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The following command will show you the version of scikit-learn installed on
    your system:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令将显示您系统上安装的scikit-learn版本：
- en: '[PRE3]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You can use the following command to import the installed scikit-learn module
    to ensure that it is successfully installed and then display its version:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用以下命令导入已安装的scikit-learn模块，以确保它已成功安装并显示其版本：
- en: '[PRE4]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Now that we know how to install scikit-learn using `pip`, Anaconda, and Miniconda,
    let’s look at another way of installing it using the Python distribution that
    comes packaged with your operating system.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道了如何使用`pip`、Anaconda和Miniconda安装scikit-learn，让我们看看另一种使用操作系统附带打包的Python发行版安装它的方法。
- en: Installing scikit-learn using your operating system’s Python distribution
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用您操作系统的Python发行版安装scikit-learn
- en: Since scikit-learn is so commonly used by developers, it is often packaged along
    with the built-in package manager in various Python distributions or operating
    systems. This enables users to directly install the available scikit-learn package
    without needing to download it from the internet.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 由于scikit-learn被开发者广泛使用，它通常与各种Python发行版或操作系统的内置包管理器一起打包。这使得用户可以直接安装可用的scikit-learn包，而无需从互联网上下载。
- en: 'The following is a list of some of the operating systems that come with their
    own version of prepackaged scikit-learn and the respective Terminal commands to
    install it:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些带有预包装scikit-learn版本及其相应终端命令的操作系统列表：
- en: '`python-scikit-learn`. To install this library, execute the following command:'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`python-scikit-learn`。要安装此库，请执行以下命令：'
- en: '[PRE5]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '**Debian/Ubuntu**: The Debian Ubuntu distribution splits the scikit-learn package
    into three parts:'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Debian/Ubuntu**：Debian Ubuntu发行版将scikit-learn包分成三个部分：'
- en: '**python3-sklearn**: This package contains the Python modules for scikit-learn
    functions'
  id: totrans-57
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**python3-sklearn**：此包包含scikit-learn函数的Python模块'
- en: '**python3-sklearn-lib**: This package contains the low-level implementations
    and bindings for scikit-learn'
  id: totrans-58
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**python3-sklearn-lib**：此包包含scikit-learn的低级实现和绑定'
- en: '**python3-sklearn-doc**: This package contains the documentation for scikit-learn'
  id: totrans-59
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**python3-sklearn-doc**：此包包含scikit-learn的文档'
- en: 'To install this library, execute the following command:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装此库，请执行以下命令：
- en: '[PRE6]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '`python3-scikit-learn`. It is the only one available in `Fedora30`:'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`python3-scikit-learn`。它是`Fedora30`中唯一可用的：'
- en: '[PRE7]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '`pkgsrc-wip` from here: [http://pkgsrc.se/math/py-scikit-learn](http://pkgsrc.se/math/py-scikit-learn).'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从这里：[http://pkgsrc.se/math/py-scikit-learn](http://pkgsrc.se/math/py-scikit-learn)的`pkgsrc-wip`。
- en: The drawback of this process is that it often comes with an older version of
    scikit-learn. This, however, can be fixed by upgrading the installed packages
    to the latest versions using the respective package managers.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这个过程的缺点是它通常伴随着较旧的scikit-learn版本。然而，这可以通过使用相应的包管理器将已安装的包升级到最新版本来修复。
- en: Building and installing the scikit-learn package from the source
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从源代码构建和安装scikit-learn包
- en: Users that want to use the latest experimental features or those who wish to
    contribute to scikit-learn can directly build and install scikit-learn’s latest
    available version.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 想要使用最新实验功能或希望为scikit-learn做出贡献的用户可以直接构建和安装scikit-learn的最新可用版本。
- en: 'You can build and install scikit-learn from the source by executing the following
    steps:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过执行以下步骤从源代码构建和安装scikit-learn：
- en: 'Use Git to check out the latest source from the scikit-learn repository on
    GitHub. The scikit-learn repository can be found here: [https://github.com/scikit-learn/scikit-learn](https://github.com/scikit-learn/scikit-learn).
    Execute the following command to clone the latest scikit-learn repository:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Git从GitHub上的scikit-learn仓库检出最新源代码。scikit-learn仓库可以在以下位置找到：[https://github.com/scikit-learn/scikit-learn](https://github.com/scikit-learn/scikit-learn)。执行以下命令以克隆最新的scikit-learn仓库：
- en: '[PRE8]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Use Python to create a virtual environment and install **NumPy**, **SciPy**,
    and **Cython**, which are the build dependencies for scikit-learn:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Python创建虚拟环境并安装**NumPy**、**SciPy**和**Cython**，它们是scikit-learn的构建依赖项：
- en: '[PRE9]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Use `pip` to build the project by running the following command:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`pip`通过运行以下命令构建项目：
- en: '[PRE10]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Once the installation is completed, check if scikit-learn is installed correctly
    by running the following command:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装完成后，通过运行以下命令检查scikit-learn是否正确安装：
- en: '[PRE11]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: To avoid conflicts with other packages, it is highly recommended to install
    scikit-learn in a virtual environment or a **conda** environment. Also, when installing
    SciPy and NumPy, it is recommended to use **binary wheels** as they are not recompiled
    from the source.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免与其他包冲突，强烈建议在虚拟环境或**conda**环境中安装scikit-learn。此外，在安装SciPy和NumPy时，建议使用**二进制轮**，因为它们不是从源代码重新编译的。
- en: Experimenting with scikit-learn
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 尝试使用scikit-learn
- en: Now that we have successfully installed scikit-learn, let’s quickly look at
    a simple implementation of scikit-learn for training a model. Using this as a
    reference, we shall then explore how we can incorporate H2O AutoML into it.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经成功安装了scikit-learn，让我们快速看一下scikit-learn训练模型的一个简单实现。以此为参考，我们将探讨如何将H2O AutoML集成到其中。
- en: The dataset we shall use for this experiment will be the same Iris flower dataset
    that we have been using throughout this book. This dataset is a good example of
    using ML to solve a classification problem.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将用于此实验的数据集将是我们在整本书中一直在使用的同一爱丽丝花数据集。这个数据集是使用机器学习解决分类问题的良好示例。
- en: So, let’s begin by implementing it using pure scikit-learn functions.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们首先使用纯scikit-learn函数来实现它。
- en: 'Follow these steps to train your ML model in Python using scikit-learn:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤在Python中使用scikit-learn训练您的机器学习模型：
- en: 'Import the `sklearn` and `numpy` libraries:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`sklearn`和`numpy`库：
- en: '[PRE12]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The Iris flower dataset is readily available in the `sklearn` library; it is
    present in the dataset submodule of `sklearn`. Next, import that dataset by executing
    the following commands. Let’s also have a closer look at the contents of the DataFrame:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 爱丽丝花数据集在`sklearn`库中是现成的；它在`sklearn`的dataset子模块中。接下来，通过执行以下命令导入该数据集。让我们也仔细看看DataFrame的内容：
- en: '[PRE13]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'You should get an output displaying the contents of the DataFrame in the form
    of a dictionary. Let’s investigate the important key-value pairs in the dictionary
    to understand what we are dealing with:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该得到一个以字典形式显示DataFrame内容的输出。让我们调查字典中的重要键值对，以了解我们正在处理什么：
- en: '`data`: This key contains all the features of the dataset – that is, the sepal
    length, sepal width, petal length, and petal width – in the form of a multi-dimensional
    array.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`data`：此键包含数据集的所有特征——即花瓣长度、花瓣宽度、花萼长度和花萼宽度——以多维数组的形式。'
- en: '`target_names`: This key contains the names of the target or labels of the
    dataset – that is, Iris-setosa, Iris-versicolour, and Iris-virginica. This is
    an array, and the index of the names is the numerical representation that is used
    in the actual content of the dataset.'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`target_names`：此键包含数据集的目标或标签的名称——即Iris-setosa、Iris-versicolour和Iris-virginica。这是一个数组，名称的索引是实际数据集中使用的数值表示。'
- en: '`target`: This key contains all the target values, also called label values,
    of the dataset. This is also an array that represents the values of the target
    that would have otherwise been a column in a tabular dataset. The values are numeric,
    where `0` represents Iris-setosa, `1` represents Iris-versicolour, and `2` represents
    Iris-virginica, as decided by their index values in `target_names`.'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`target`：此键包含数据集的所有目标值，也称为标签值。这也是一个表示目标值的数组，这些值在其他情况下将是表格数据集中的一列。这些值是数字，其中`0`代表Iris-setosa，`1`代表Iris-versicolour，`2`代表Iris-virginica，这是根据`target_names`中的索引值决定的。'
- en: 'With this information in mind, extract the features and labels into separate
    variables by executing the following command:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个信息的基础上，通过执行以下命令将特征和标签提取到单独的变量中：
- en: '[PRE14]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'We need to split the dataset into two parts – one for training and the other
    for testing. Unlike H2O, in scikit-learn, we treat the features and labels as
    two separate entities. Both of them should have the same dimensional length to
    match the data contents. To do this split, execute the following commands:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要将数据集分成两部分——一部分用于训练，另一部分用于测试。与H2O不同，在scikit-learn中，我们将特征和标签视为两个独立的实体。它们应该具有相同的维度长度，以匹配数据内容。为此分割，执行以下命令：
- en: '[PRE15]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The split functionality splits the features and labels into a 70% to 30% ratio,
    where 70% of the data is kept for training and the remaining 30% is kept for testing.
    So, we eventually end up with a total of four DataFrames, as follows:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 分割功能将特征和标签分割成70%到30%的比例，其中70%的数据用于训练，剩余的30%用于测试。因此，我们最终得到四个DataFrame，如下所示：
- en: '`feature_train`: This DataFrame contains 70% of the feature data to be used
    for training'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`feature_train`：此DataFrame包含用于训练的70%的特征数据'
- en: '`label_train`: This DataFrame contains 70% of the label data to be used for
    training'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`label_train`：此DataFrame包含用于训练的70%的标签数据'
- en: '`feature_test`: This DataFrame contains 30% of the feature data to be used
    for testing'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`feature_test`：此DataFrame包含用于测试的30%的特征数据'
- en: '`label_test`: This DataFrame contains 30% of the label data to be used for
    testing'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`label_test`：此DataFrame包含用于测试的30%的标签数据'
- en: 'Once the training and testing DataFrames are ready, declare and initialize
    the ML algorithm to be used for model training. Scikit-learn has separate libraries
    for different types of algorithms. Since we are working with a classification
    problem, let’s use the **logistic regression** algorithm to train a classification
    model. Execute the following command to initialize a logistic regression function
    to train a model:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦训练和测试DataFrame准备就绪，声明并初始化用于模型训练的ML算法。Scikit-learn有针对不同类型算法的独立库。由于我们正在处理分类问题，让我们使用**逻辑回归**算法来训练一个分类模型。执行以下命令初始化一个逻辑回归函数以训练模型：
- en: '[PRE16]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Now, let’s train a model using the `feature_train` and `label_train` datasets.
    Execute the following function:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们使用`feature_train`和`label_train`数据集来训练一个模型。执行以下函数：
- en: '[PRE17]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Once training is finished, we can use the same logistic regression object to
    make predictions on the `feature_test` DataFrame. Execute the following command
    and print out the prediction’s output:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦训练完成，我们可以使用相同的逻辑回归对象对`feature_test` DataFrame进行预测。执行以下命令并打印预测的输出：
- en: '[PRE18]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'You should get an output similar to the following:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该得到一个类似于以下输出的结果：
- en: '![Figure 9.1 – Prediction output from scikit-learn logistic regression ](img/B17298_09_001.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![图9.1 – scikit-learn逻辑回归的预测输出](img/B17298_09_001.jpg)'
- en: Figure 9.1 – Prediction output from scikit-learn logistic regression
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.1 – scikit-learn逻辑回归的预测输出
- en: 'You can also measure the accuracy of your predictions by executing the following
    command:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你也可以通过执行以下命令来衡量你预测的准确率：
- en: '[PRE19]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: You should get an accuracy of around `97.77`.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该得到大约`97.77`的准确率。
- en: 'In this experiment, we learned how to use scikit-learn to import a dataset,
    perform splitting, and then use logistic regression to train a classification
    model. But as we learned in the previous chapters, there are plenty of ML algorithms
    to choose from. Each has its own way of dealing with **variance** and **bias**.
    So, as expected, the most obvious question remains unanswered: *which ML algorithm
    should we use?*'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在本实验中，我们学习了如何使用scikit-learn导入数据集，进行分割，然后使用逻辑回归来训练分类模型。但正如我们在前几章所学，有大量的ML算法可供选择。每个都有自己的处理**方差**和**偏差**的方式。因此，最明显的问题仍然是未解答的：*我们应该使用哪种ML算法？*
- en: As we saw in this experiment, scikit-learn may have tons of support for different
    algorithms, but training all of them can become complicated from a programming
    point of view. This is where we can integrate H2O AutoML to perform automated
    model training to train all the ML algorithms.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在本实验中所看到的，scikit-learn可能对不同的算法有大量的支持，但从编程的角度来看，训练所有这些算法可能会变得复杂。这就是我们可以集成H2O
    AutoML来自动训练所有ML算法的地方。
- en: Now that we have got a good idea of how we can use scikit-learn to train models,
    let’s see how we can use H2O AutoML with scikit-learn.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经对如何使用scikit-learn来训练模型有了很好的了解，让我们看看如何使用H2O AutoML与scikit-learn结合使用。
- en: Using H2O AutoML in scikit-learn
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在scikit-learn中使用H2O AutoML
- en: First, we will learn how to use H2O AutoML in scikit-learn to perform classification
    using the `H2OAutoMLClassifier` submodule. We shall use the same classification
    ML problem using the Iris dataset and see how we can train multiple models using
    H2O AutoML.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将学习如何在scikit-learn中使用H2O AutoML通过`H2OAutoMLClassifier`子模块来进行分类。我们将使用相同的分类ML问题，使用Iris数据集，并看看我们如何使用H2O
    AutoML训练多个模型。
- en: Experimenting with H2OAutoMLClassifier
  id: totrans-117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 实验：使用H2OAutoMLClassifier
- en: 'Follow these steps to train your H2O AutoML classification model in Python
    using scikit-learn:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤在Python中使用scikit-learn训练你的H2O AutoML分类模型：
- en: Implement *steps 1* to *4* that we followed in the *Experimenting with scikit-learn*
    section.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实施我们在“*使用scikit-learn进行实验*”部分遵循的*步骤1*到*4*。
- en: 'In the experiment we performed in the *Experimenting with scikit-learn* section,
    after *step 4*, we initialized the logistic regression algorithm by importing
    the `LogisticRegression` submodule from `sklearn.linear_model`. In this experiment,
    we will import the `H2OAutoMLClassifier` submodule from the `h2o.sklearn` module
    instead:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们在“*使用scikit-learn进行实验*”部分进行的实验中，在*步骤4*之后，我们通过从`sklearn.linear_model`导入`LogisticRegression`子模块初始化了逻辑回归算法。在本实验中，我们将从`h2o.sklearn`模块导入`H2OAutoMLClassifier`子模块：
- en: '[PRE20]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Just like how we set the AutoML parameters in the previous chapters, we have
    set `max_models` to `10`, `max_runtime_secs_per_model` to `30` seconds, the random
    `seed` value to `5`, and `sort_metric` to `logloss`.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 就像我们在前几章中设置AutoML参数一样，我们将`max_models`设置为`10`，`max_runtime_secs_per_model`设置为`30`秒，随机`seed`值设置为`5`，以及`sort_metric`设置为`logloss`。
- en: 'Once `H2OAutoMLClassifier` has been initialized, you can use it to fit – in
    other words, train – your models. Execute the following command to trigger AutoML
    training:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦初始化了`H2OAutoMLClassifier`，你就可以使用它来拟合，换句话说，训练你的模型。执行以下命令以触发AutoML训练：
- en: '[PRE21]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'First, the program will check if an H2O instance is already running on localhost:54321\.
    If not, then H2O will spin up an instance of the H2O server; otherwise, it will
    reuse the already existing one to train the AutoML models. Once training starts,
    you should get an output similar to the following:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，程序将检查本地主机：54321上是否已经运行了一个H2O实例。如果没有，H2O将启动一个H2O服务器的实例；否则，它将重用已经存在的实例来训练AutoML模型。一旦开始训练，你应该得到以下类似的输出：
- en: '![Figure 9.2 – Output from H2O AutoML classifier training ](img/B17298_09_002.jpg)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![图9.2 – H2O AutoML分类器训练输出](img/B17298_09_002.jpg)'
- en: Figure 9.2 – Output from H2O AutoML classifier training
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.2 – H2O AutoML分类器训练输出
- en: From the output, you can see that H2O first imported and parsed the **feature_train**
    and **label_train** DataFrames. Then, it started the AutoML training.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 从输出中，你可以看到H2O首先导入并解析了**特征训练**和**标签训练**DataFrame。然后，它开始AutoML训练。
- en: 'To view the results of the AutoML training, you can view the H2O **leaderboard**
    by executing the following command:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要查看AutoML训练的结果，你可以通过执行以下命令来查看H2O **排行榜**：
- en: '[PRE22]'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'You should get an output similar to the following:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该得到以下类似的输出：
- en: '![Figure 9.3 – H2O AutoML leaderboard ](img/B17298_09_003.jpg)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.3 – H2O AutoML 排行榜](img/B17298_09_003.jpg)'
- en: Figure 9.3 – H2O AutoML leaderboard
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.3 – H2O AutoML 排行榜
- en: 'Using the same H2O AutoML classifier, you can also make predictions, as follows:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用相同的 H2O AutoML 分类器，你也可以进行预测，如下所示：
- en: '[PRE23]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'You should get an output similar to the following:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该得到以下类似的输出：
- en: '![Figure 9.4 – Output of the prediction using H2OAutoMLClassifier ](img/B17298_09_004.jpg)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.4 – 使用 H2OAutoMLClassifier 进行预测的输出](img/B17298_09_004.jpg)'
- en: Figure 9.4 – Output of the prediction using H2OAutoMLClassifier
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.4 – 使用 H2OAutoMLClassifier 进行预测的输出
- en: By default, the classifier will use the model with the highest rank on the leaderboard
    to make predictions.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，分类器将使用排行榜上排名最高的模型进行预测。
- en: With that, you have learned how to implement H2O AutoML in scikit-learn to solve
    classification problems using `H2OAutoMLClassifier`.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这样，你已经学会了如何在 scikit-learn 中实现 H2O AutoML 来使用 `H2OAutoMLClassifier` 解决分类问题。
- en: Now that we have a good idea of how we can use `H2OAutoMLClassifier` to perform
    classification predictions on data, let’s see how we can perform regression predictions
    using the `H2OAutoMLRegressor` submodule.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经了解了如何使用 `H2OAutoMLClassifier` 对数据进行分类预测，那么让我们看看如何使用 `H2OAutoMLRegressor`
    子模块进行回归预测。
- en: Experimenting with H2OAutoMLRegressor
  id: totrans-142
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 尝试使用 H2OAutoMLRegressor
- en: Now, let’s see how we solve a `H2OAutoMLRegressor`. For this experiment, we
    shall use the Red Wine Quality dataset that we used previously in [*Chapter 7*](B17298_07.xhtml#_idTextAnchor143),
    *Working with Model Explainability*.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看如何解决一个 `H2OAutoMLRegressor`。对于这个实验，我们将使用之前在 [*第 7 章*](B17298_07.xhtml#_idTextAnchor143)
    中使用的红酒质量数据集，*使用模型可解释性*。
- en: 'Follow these steps to train your H2O AutoML regression model in Python using
    scikit-learn:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤在 Python 中使用 scikit-learn 训练你的 H2O AutoML 回归模型：
- en: Implement *Steps 1* to *4* that we followed in the *Experimenting with scikit-learn*
    section.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现 *步骤 1* 到 *4*，我们在 *尝试使用 scikit-learn* 部分中遵循的步骤。
- en: 'In the experiment we performed in the *Experimenting with H2OAutoMLClassifier*
    section, we initialized `H2OAutoMLClassifier`. Since we are dealing with a regression
    problem in this experiment, we shall use the `H2OAutoMLRegressor` submodule. Execute
    the following command to import and instantiate the `H2OAutoMLRegressor` class
    object:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们进行的 *尝试使用 H2OAutoMLClassifier* 部分的实验中，我们初始化了 `H2OAutoMLClassifier`。由于在这个实验中我们处理的是一个回归问题，我们将使用
    `H2OAutoMLRegressor` 子模块。执行以下命令来导入并实例化 `H2OAutoMLRegressor` 类对象：
- en: '[PRE24]'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Once `H2OAutoMLRegressor` has been initialized, we can trigger AutoML to train
    our regression models. Execute the following command to trigger AutoML:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦 `H2OAutoMLRegressor` 已经初始化，我们可以触发 AutoML 来训练我们的回归模型。执行以下命令来触发 AutoML：
- en: '[PRE25]'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Once model training finishes, you should get an output similar to the following:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦模型训练完成，你应该得到以下类似的输出：
- en: '![Figure 9.5 – Output from H2O AutoML regressor training ](img/B17298_09_005.jpg)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.5 – H2O AutoML 回归器训练输出](img/B17298_09_005.jpg)'
- en: Figure 9.5 – Output from H2O AutoML regressor training
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.5 – H2O AutoML 回归器训练输出
- en: 'Similar to `H2OAutoMLClassifier`, you can also view the results of the AutoML
    training on the H2O **leaderboard** by executing the following command:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 与 `H2OAutoMLClassifier` 类似，你也可以通过执行以下命令来查看 H2O **排行榜** 上 AutoML 训练的结果：
- en: '[PRE26]'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Making predictions is also very easy. You use the same `H2OAutoMLRegressor`
    object and call its `predict` method while passing the feature dataset kept aside
    for testing. Execute the following command to make predictions using the leader
    model trained by `H2OAutoMLRegressor`:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进行预测也非常简单。你使用相同的 `H2OAutoMLRegressor` 对象，并调用其 `predict` 方法，同时传递保留用于测试的特征数据集。执行以下命令使用由
    `H2OAutoMLRegressor` 训练的领导模型进行预测：
- en: '[PRE27]'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'You should get the results of the prediction, as follows:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该得到以下预测结果：
- en: '![Figure 9.6 – Output of the prediction using H2OAutoMLRegressor ](img/B17298_09_006.jpg)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.6 – 使用 H2OAutoMLRegressor 进行预测的输出](img/B17298_09_006.jpg)'
- en: Figure 9.6 – Output of the prediction using H2OAutoMLRegressor
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.6 – 使用 H2OAutoMLRegressor 进行预测的输出
- en: The prediction output is an array containing the `feature_test` DataFrame. This
    is how you can implement H2O AutoML in scikit-learn to solve regression problems
    using `H2OAutoMLRegressor`.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 预测输出是一个包含 `feature_test` DataFrame 的数组。这就是你如何在 scikit-learn 中实现 H2O AutoML 来使用
    `H2OAutoMLRegressor` 解决回归问题的方法。
- en: 'Now that you know how to use H2O AutoML in scikit-learn, let’s move on to the
    next miscellaneous feature of H2O AutoML: event logging.'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经知道了如何在 scikit-learn 中使用 H2O AutoML，让我们继续到 H2O AutoML 的下一个杂项功能：事件日志。
- en: Understanding H2O AutoML event logging
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 H2O AutoML 事件日志
- en: Since H2O AutoML automates most of the ML process, we have given some control
    to the machine. Encapsulation means that all the complexities that lie in AutoML
    are all hidden away, and we are just aware of the inputs and whatever output H2O
    AutoML gives us. If there is any issue in H2O AutoML and it gives us models that
    don’t make sense or are not expected, then we will need to dig deeper into how
    AutoML trained the models. Hence, we need a way to keep track of what’s happening
    internally in H2O AutoML and whether it is training models as expected or not.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 由于H2O AutoML自动化了大多数机器学习过程，我们给了机器一些控制权。封装意味着AutoML中所有复杂的部分都被隐藏起来，我们只关注输入和H2O
    AutoML给出的任何输出。如果H2O AutoML有任何问题，并且给出了没有意义或不符合预期的模型，那么我们需要深入了解AutoML是如何训练这些模型的。因此，我们需要一种方法来跟踪H2O
    AutoML内部发生的事情，以及它是否按预期训练模型。
- en: When building such software systems that are aimed to be used in production,
    you will always need a logging system to log information. The virtual nature of
    software makes it difficult for users to keep track of what is going on as the
    system does its processing and other activities. Any failures or issues can lead
    to a cascade of underlying problems that developers may end up finding out too
    late, if ever.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 当构建旨在用于生产的软件系统时，您总是会需要一个日志系统来记录信息。软件的虚拟性质使得用户难以跟踪系统在处理和其他活动中的情况。任何故障或问题都可能导致一系列底层问题，开发者可能最终发现得太晚，如果他们能发现的话。
- en: That is why logging systems are always implemented to provide support to your
    system. Logs generated by your system help developers track down the source of
    the problem and mitigate it promptly. H2O AutoML can also generate logs containing
    meta-information about all the underlying processing that happens when it is training
    models. You can use these logs to keep some sense of control when you are letting
    H2O take care of all the ML processing.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 正因如此，日志系统总是被实施以支持您的系统。系统生成的日志帮助开发者追踪问题的根源并迅速缓解。H2O AutoML还可以生成包含所有底层处理元信息的日志。当您让H2O处理所有机器学习过程时，您可以使用这些日志保持一定的控制感。
- en: 'There are two types of logs that AutoML generates. They are as follows:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: AutoML生成两种类型的日志。具体如下：
- en: '**Event Logs**: These are event logs that are generated in the backend of AutoML
    as training progresses. All the logs are collected and presented as an H2O DataFrame.'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**事件日志**：这些是在AutoML训练过程中在后台生成的日志。所有日志都被收集并以H2O DataFrame的形式呈现。'
- en: '**Training Logs**: These are logs that show training and prediction times as
    AutoML trains models and are in the form of a dictionary of key-value pairs. The
    training times are in epochs and are mostly useful for post-analysis of model
    training.'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**训练日志**：这些是在AutoML训练模型时显示训练和预测时间的日志，以键值对字典的形式呈现。训练时间以epoch为单位，主要用于模型训练后的分析。'
- en: Let’s see how we can retrieve these logs from H2O AutoML via a practical implementation.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何通过实际实现从H2O AutoML中检索这些日志。
- en: 'Follow these steps to train models using H2O AutoML. Then, we will learn how
    to extract the logs and understand what they look like:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤使用H2O AutoML训练模型。然后，我们将学习如何提取日志并了解它们的结构：
- en: 'Import the `h2o` module and initialize H2O to spin up a local H2O server:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`h2o`模块并初始化H2O以启动本地H2O服务器：
- en: '[PRE28]'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Import the Iris dataset by passing the location of where you downloaded the
    dataset:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过传递数据集下载位置来导入Iris数据集：
- en: '[PRE29]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Set the label and features:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置标签和特征：
- en: '[PRE30]'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Initialize the H2O AutoML object with parameters, as follows:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下参数初始化H2O AutoML对象：
- en: '[PRE31]'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Trigger AutoML training by passing in the feature columns, label column, and
    the DataFrame to use to train the models on:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过传递特征列、标签列和用于训练模型的DataFrame来触发AutoML训练：
- en: '[PRE32]'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Once training is finished, you can view the event logs by using the `event_log`
    property of the AutoML object. Let’s retrieve the log DataFrame and have a look
    at its content:'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦训练完成，您可以通过使用AutoML对象的`event_log`属性来查看事件日志。让我们检索日志DataFrame并查看其内容：
- en: '[PRE33]'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'You should get an output similar to the following:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该得到类似以下输出的结果：
- en: '![Figure 9.7 – Event log output from H2O AutoML ](img/B17298_09_007.jpg)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
  zh: '![图9.7 – H2O AutoML的事件日志输出](img/B17298_09_007.jpg)'
- en: Figure 9.7 – Event log output from H2O AutoML
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.7 – H2O AutoML的事件日志输出
- en: 'Similarly, you can view the event logs in the R programming language by executing
    the following R commands:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，您可以通过执行以下R命令在R编程语言中查看事件日志：
- en: '[PRE34]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'The event log contains the following information:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 事件日志包含以下信息：
- en: '**timestamp**: This column is the time of occurrence of a particular event.'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**时间戳**：此列是特定事件发生的时间。'
- en: '**level**: In logging systems, logs are generally categorized into certain
    classes of importance or criticality. In most cases, the levels are as follows
    based on criticality ranking:'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**级别**：在日志系统中，日志通常根据重要性或关键性分为某些类别。在大多数情况下，级别如下，基于关键性排名：'
- en: '**FATAL**: This log level indicates that the application is facing a critical
    issue and will need to stop functioning and shut down.'
  id: totrans-191
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**致命错误**：此日志级别表示应用程序面临一个关键问题，需要停止运行并关闭。'
- en: '**ERROR**: This log level indicates that the application is facing an issue
    performing certain functions. However, the issue is not that critical that the
    application needs to shut down.'
  id: totrans-192
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**错误**：此日志级别表示应用程序在执行某些功能时遇到问题。然而，问题并不那么关键，以至于应用程序需要关闭。'
- en: '**WARN**: This log level indicates that the application has detected something
    unusual that is harmless and is not affecting any functionality.'
  id: totrans-193
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**警告**：此日志级别表示应用程序检测到一些不寻常的情况，但无害，并且不会影响任何功能。'
- en: '**INFO**: This log level indicates normal behavior updates that can be recorded
    and stored for future reference if needed. They are usually informative.'
  id: totrans-194
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**信息**：此日志级别表示正常行为更新，如果需要，可以记录并存储以供将来参考。它们通常是信息性的。'
- en: '**DEBUG**: This log level indicates more detailed diagnostic details that are
    often needed when developing an application or to gather more information when
    you are performing diagnostic actions or debugging an issue.'
  id: totrans-195
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**调试**：此日志级别表示在开发应用程序或进行诊断操作或调试问题时通常需要的更详细诊断信息。'
- en: '**TRACE**: This log level is similar to **DEBUG** albeit with finer details,
    especially when you are tracing the flow of information in a code base.'
  id: totrans-196
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**跟踪**：此日志级别类似于**调试**，但具有更详细的信息，尤其是在您正在跟踪代码库中信息流时。'
- en: '**stage**: This column indicates the stage in AutoML training at which the
    log was generated.'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**阶段**：此列指示生成日志时的AutoML训练阶段。'
- en: '**message**: This column contains a descriptive message that provides information
    about the event that occurred.'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**消息**：此列包含描述性消息，提供有关发生事件的详细信息。'
- en: '**name**: This column contains the name of the event log that occurred if it
    is set.'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**名称**：如果设置了，此列包含发生的事件日志的名称。'
- en: '**value**: This column contains the value of the event log that occurred if
    it is set.'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**值**：如果设置了，此列包含发生的事件日志的值。'
- en: 'Now, let’s retrieve the training logs and look at their content:'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们检索训练日志并查看其内容：
- en: '[PRE35]'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'You should get an output similar to the following:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该得到以下类似的输出：
- en: '![Figure 9.8 – Event log output from H2O AutoML ](img/B17298_09_008.jpg)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
  zh: '![图9.8 – H2O AutoML的事件日志输出](img/B17298_09_008.jpg)'
- en: Figure 9.8 – Event log output from H2O AutoML
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.8 – H2O AutoML的事件日志输出
- en: 'Similarly, you can view the event logs in the R programming language by executing
    the following R commands:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，您可以通过执行以下R命令在R编程语言中查看事件日志：
- en: '[PRE36]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'The training log contains the following information:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 训练日志包含以下信息：
- en: '`creation_epoch`: This key in the training log dictionary contains the epoch
    value of when the AutoML job was created.'
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`creation_epoch`: 训练日志字典中的此键包含AutoML作业创建时的epoch值。'
- en: '`start_epoch`: This key in the training log dictionary contains the epoch value
    of when the AutoML build started.'
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`start_epoch`: 训练日志字典中的此键包含AutoML构建开始时的epoch值。'
- en: '`start_{model_name}`: This type of key in the training log dictionary contains
    the epoch value of when the training of a particular model was started.'
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`start_{模型名称}`: 训练日志字典中的此类键包含特定模型开始训练时的epoch值。'
- en: '`stop_epoch`: This key in the training log dictionary contains the epoch value
    of when the AutoML build stopped.'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`stop_epoch`: 训练日志字典中的此键包含AutoML构建停止时的epoch值。'
- en: '`duration_secs`: This key in the training log dictionary contains the total
    time when AutoML was running in seconds.'
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`duration_secs`: 训练日志字典中的此键包含AutoML运行的总时间（以秒为单位）。'
- en: This experiment gives us a good example of how H2O generates log events. When
    building an ML system using H2O AutoML, you can incorporate these logs into your
    logging system to keep an eye on H2O AutoML’s functionality. This will help you
    identify any issues that may arise promptly and keep your models in production
    of the highest quality. You will be alerted if there were any issues during training
    and before you accidentally end up deploying faulty models in production.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 这个实验为我们提供了一个很好的例子，说明了H2O如何生成日志事件。当使用H2O AutoML构建机器学习系统时，你可以将这些日志纳入你的日志系统中，以便监控H2O
    AutoML的功能。这将帮助你及时识别可能出现的任何问题，并确保你的模型在生产中保持最高质量。如果在训练过程中出现任何问题，或者在你意外地将有缺陷的模型部署到生产中之前，你将会收到警报。
- en: Summary
  id: totrans-215
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we understood some of the miscellaneous features of H2O AutoML.
    We started by understanding the scikit-learn library and getting an idea of its
    implementation. Then, we saw how we can use the `H2OAutoMLClassifier` library
    and the `H2OAutoMLRegressor` library in a scikit-learn implementation to train
    AutoML models.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们了解了H2O AutoML的一些杂项功能。我们首先理解了scikit-learn库，并对其实现有了初步的了解。然后，我们看到了如何在scikit-learn实现中使用`H2OAutoMLClassifier`库和`H2OAutoMLRegressor`库来训练AutoML模型。
- en: Then, we explored H2O AutoML’s logging system. After that, we implemented a
    simple experiment where we triggered AutoML training; once it was finished, we
    extracted the event logs and the training logs in both the Python and R programming
    languages. Then, we understood the contents of those logs and how that information
    benefits us in keeping an eye on H2O AutoML functionality.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们探索了H2O AutoML的日志系统。在那之后，我们实施了一个简单的实验，其中我们触发了AutoML训练；一旦完成，我们就从Python和R编程语言中提取了事件日志和训练日志。然后，我们理解了这些日志的内容以及这些信息如何帮助我们监控H2O
    AutoML的功能。
- en: In the next chapter, we shall further focus on using H2O in production and how
    we can do so using H2O’s Model Object Optimized.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将进一步关注如何在生产中使用H2O，以及我们如何使用H2O的模型对象优化来实现这一点。
