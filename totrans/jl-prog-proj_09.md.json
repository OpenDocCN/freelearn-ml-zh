["```py\nIJulia@v1.14.1\nMarketData@v0.11.0\nPlots@v0.22.0\nTimeZones@v0.8.2\n```", "```py\npkg> add PackageName@vX.Y.Z \n```", "```py\npkg> add IJulia@v1.14.1\n```", "```py\njulia> download(\"https://raw.githubusercontent.com/PacktPublishing/Julia-Programming-Projects/master/Chapter09/Project.toml\", \"Project.toml\")\npkg> activate . \npkg> instantiate\n```", "```py\njulia> using Dates \n\njulia> d = today() \n2018-11-08 \n\njulia> typeof(d) \nDate \n\njulia> dt = now() \n2018-11-08T16:33:34.868 \n\njulia> dt |> typeof \nDateTime \n\njulia> t = Dates.Time(now()) \n16:34:13.065 \n\njulia> typeof(t) \nTime \n```", "```py\njulia> now(UTC) \n2018-11-08T15:35:08.776 \n```", "```py\njulia> dt.instant \nDates.UTInstant{Millisecond}(63677378014868 milliseconds) \n\njulia> t.instant \n75147529000000 nanoseconds \n\njulia> d.instant \nDates.UTInstant{Day}(737006 days) \n```", "```py\njulia> DateTime(2018) # we can pass just the year as a single argument \n2018-01-01T00:00:00 \n\njulia> DateTime(2018, 6) # passing the year and the month \n2018-06-01T00:00:00 \n\njulia> DateTime(2018, 6, 15) # year, month and day \n2018-06-15T00:00:00 \n\njulia> DateTime(2018, 6, 15, 10) # year, month, day and hour (10 AM) \n2018-06-15T10:00:00 \n\njulia> DateTime(2018, 6, 15, 10, 30) # 15th of June 2018, 10:30 AM  \n2018-06-15T10:30:00 \n\njulia> DateTime(2018, 6, 15, 10, 30, 45) # ...and 45 seconds \n2018-06-15T10:30:45 \n\njulia> DateTime(2018, 06, 15, 10, 30, 45, 123) # ... and finally, milliseconds  \n2018-06-15T10:30:45.123 \n```", "```py\njulia> Date(2019) # January 1st 2019 \n2019-01-01 \n\njulia> Date(2018, 12, 31) # December 31st 2018 \n2018-12-31 \n\njulia> Time(22, 05) # 5 past 10 PM \n22:05:00 \n\njulia> Time(22, 05, 25, 456) # 5 past 10 PM, 25s and 456 milliseconds \n22:05:25.456  \n```", "```py\njulia> Date(2018, 12, 32) \nERROR: ArgumentError: Day: 32 out of range (1:31) \nStacktrace: \n [1] Date(::Int64, ::Int64, ::Int64) at ./dates/types.jl:204 \n```", "```py\njulia> eleven_hours = Hour(11) \n11 hours \n\njulia> half_hour = Minute(30) \n30 minutes \n\njulia> brunch_time = Time(eleven_hours, half_hour) \n11:30:00 \n\njulia> this_year = \"2018\" \njulia> xmas_month = \"12\" \njulia> xmas_day = \"25\" \njulia> Date(Year(this_year), Month(xmas_month), Day(xmas_day)) \n2018-12-25 \n```", "```py\njulia> Date(\"25/12/2019\", \"dd/mm/yyyy\") # Christmas day in 2019 \n2019-12-25 \n\njulia> DateTime(\"25/12/2019 14,30\", \"dd/mm/yyyy HH,MM\") # xmas day in 2019, at 2:30 PM \n2019-12-25T14:30:00 \n```", "```py\njulia> DateTime(\"Thursday, 1 of February 2018 at 12.35\", \"E, d of U yyyy at HH.MM\") \n2018-02-01T12:35:00 \n```", "```py\njulia> d = [\"$(rand(2000:2020))-$(rand(1:12))-$(rand(1:28))\" for _ in 1:100] \n100-element Array{String,1}:  \n \"2001-7-1\" \n \"2005-9-4\"\n```", "```py\n \"2018-3-3\" \n# output truncated \n```", "```py\njulia> Date.(d, \"yyyy-mm-dd\") \n100-element Array{Date,1}: \n 2001-07-01 \n 2005-09-04 \n 2018-03-03 \n# output truncated  \n```", "```py\njulia> date_format = DateFormat(\"yyyy-mm-dd\") \ndateformat\"yyyy-mm-dd\" \n\njulia> Date.(d, date_format) \n100-element Array{Date,1}: \n2001-07-01 \n2005-09-04 \n2018-03-03 \n# output truncated  \n```", "```py\njulia> DateTime(\"2018-12-25\", ISODateTimeFormat) \n2018-12-25T00:00:00 \n```", "```py\njulia> Dates.format(now(), RFC1123Format) \n\"Thu, 08 Nov 2018 20:04:35\"  \n```", "```py\njulia> spanish_months = [\"enero\", \"febrero\", \"marzo\", \"abril\", \"mayo\", \"junio\", \"julio\", \"agosto\", \"septiembre\", \"octubre\", \"noviembre\", \"diciembre\"] \n12-element Array{String,1} # output truncated \n\njulia> spanish_days = [\"lunes\", \"martes\", \"miércoles\", \"jueves\", \"viernes\", \"sábado\", \"domingo\"] \n7-element Array{String,1} # output truncated \n\njulia> Dates.LOCALES[\"es\"] = Dates.DateLocale(spanish_months, String[], spanish_days, String[]) \nDates.DateLocale # output truncated \n```", "```py\njulia> Dates.format(now(), \"E, d U yyyy\", locale = \"es\") \n\"jueves, 8 noviembre 2018\" \n```", "```py\njulia> Dates.format(now(), \"e, d U yyyy\", locale = \"es\") \nERROR: BoundsError: attempt to access 0-element Array{String,1} at index [4] \n```", "```py\njulia> earth_day = Date(2018, 4, 22) \n2018-04-22 \n\njulia>year(earth_day) # the year \n2018 \n\njulia> month(earth_day) # the month  \n4 \n```", "```py\njulia> monthday(earth_day) # month and day \n(4, 22) \n\njulia> yearmonthday(earth_day) # year month and day \n(2018, 4, 22) \n```", "```py\njulia> earth_hour = DateTime(2018, 4, 22, 22, 00) \n2018-04-22T22:00:00 \n\njulia> hour(earth_hour) # the hour \n22 \n\njulia> minute(earth_hour) # the minute \n0 \n```", "```py\njulia> Hour(earth_hour) # a period of 22 hours \n22 hours \n\njulia> Month(earth_hour) # a period of 4 months \n4 months \n\njulia> Month(earth_hour) |> typeof |> supertype\n DatePeriod \n\njulia> supertype(DatePeriod) \nPeriod \n```", "```py\njulia> yoga_day = Date(2019, 6, 21) # Really, the International Yoga Day does exist! \n2019-06-21 \n```", "```py\njulia> dayname(yoga_day) \n\"Friday\" \n```", "```py\njulia> dayname(yoga_day, locale=\"es\") \n\"viernes\" \n```", "```py\njulia> monthname(yoga_day, locale=\"es\") # June, with the Spanish locale  \n\"junio\" \n\njulia> isleapyear(yoga_day) # 2019 is not a leap year \nfalse \n\njulia> dayofyear(yoga_day) # It's the 172nd day of 2019 \n172 \n\njulia> quarterofyear(yoga_day) # 2nd quarter of 2019 \n2  \n```", "```py\njulia> year_2019 = Date(2019, 1, 1):Day(1):Date(2019,12,31) \n2019-01-01:1 day:2019-12-31 \n```", "```py\njulia> typeof(year_2019) \nStepRange{Date,Day} \n\njulia> size(year_2019) \n(365,) \n```", "```py\njulia> collect(year_2019) \n365-element Array{Date,1}: \n 2019-01-01 \n 2019-01-02 \n 2019-01-03 \n# output truncated \n```", "```py\njulia> year_2019[100] # day 100 \n2019-04-10 \n```", "```py\njulia> year_2019 = Date(2019, 1, 1):Month(1):Date(2019,12,31) \n2019-01-01:1 month:2019-12-01 \n\njulia> collect(year_2019) # First day of each of the 12 months \n12-element Array{Date,1}: \n 2019-01-01 \n 2019-02-01 \n 2019-03-01 \n# output truncated \n```", "```py\njulia> year_2019 = Date(2019, 1, 1):Month(3):Date(2019,12,31) # Quarterly \n2019-01-01:3 months:2019-10-01 \n\njulia> collect(year_2019) # The first of each of the 4 quarters \n4-element Array{Date,1}: \n 2019-01-01 \n 2019-04-01 \n 2019-07-01 \n 2019-10-01 \n\njulia> year_2019 = Date(2019, 1, 1):Week(2):Date(2019,12,31) # Bi weekly \n2019-01-01:2 weeks:2019-12-31 \n\njulia> collect(year_2019) \n27-element Array{Date,1}: \n 2019-01-01 \n 2019-01-15 \n 2019-01-29 \n# output truncated \n```", "```py\njulia> subtypes(Period) \n2-element Array{Any,1}: \n DatePeriod \n TimePeriod \n```", "```py\njulia> duration_of_trip_to_mars = Month(9) * 2 + Month(3) \n21 months \n```", "```py\njulia> take_off_day = Date(2020, 1, 15) \n2020-01-15 \n```", "```py\njulia> return_day = take_off_day + duration_of_trip_to_mars \n2021-10-15 \n\njulia> time_diff = return_day - take_off_day \n639 days \n```", "```py\njulia> take_off_day += Month(5) \n2020-06-15 \n\njulia> return_day = take_off_day + duration_of_trip_to_mars \n2022-03-15 \n\njulia> time_diff = return_day - take_off_day \n638 days \n```", "```py\njulia> isa(Month(3), Period) \ntrue \n\njulia> isa(Month(3) + Month(1), Period) \ntrue \n\njulia> isa(Month(1) + Week(2), Period)  \nfalse \n\njulia> isa(Month(1) + Week(2), Dates.CompoundPeriod)  \ntrue \n```", "```py\njulia> firstdayofweek(Date(2019, 1, 31)) \n2019-01-28 \n```", "```py\njulia> tonext(Date(2019, 4, 1), Saturday) \n2019-04-06 \n```", "```py\njulia> tonext(today()) do d  # today is Thu 8th of November, 2019 \n         dayofweek(d) == Thursday && dayofweekofmonth(d) == 3 \n       end \n2018-11-15 \n```", "```py\njulia> filter(Date(2019):Day(1):Date(2020)) do d \n           ! in(d, Date(2019, 5, 15):Day(1):Date(2019, 5, 31)) &&  \n           month(d) != August &&  \n           dayofweek(d) == Thursday &&  \n           dayofweekofmonth(d) == 3 \n   end |> collect  \n10-element Array{Date,1}: \n 2019-01-17 \n 2019-02-21 \n 2019-03-21 \n 2019-04-18 \n 2019-06-20 \n 2019-07-18 \n 2019-09-19 \n 2019-10-17 \n 2019-11-21 \n 2019-12-19 \n```", "```py\njulia> now() \n2018-11-08T21:13:20.605 \n\n# round down to the nearest hour \njulia> floor(now(), Hour) \n2018-11-08T21:00:00 \n\n# or to the nearest 30 minutes increment \njulia> floor(now(), Minute(30))  \n2018-11-08T21:00:00 \n\n# it also works with dates  \njulia> floor(today(), Month) # today() is the 8th of Nov 2018 \n2018-11-01 \n```", "```py\njulia> round(today(), Month) \n2018-11-01 # today is the 11th so beginning of month is closer \n\njulia> round(today() + Day(10), Month) \n2018-12-01 # end of month is closer \n```", "```py\njulia> using Pkg\npkg> add TimeZones\n```", "```py\njulia> timezone_names() \n439-element Array{AbstractString,1}: \n \"Africa/Abidjan\" \n \"Africa/Accra\" \n# output truncated \n```", "```py\njulia> amstz = TimeZone(\"Europe/Amsterdam\") \nEurope/Amsterdam (UTC+1/UTC+2) \n```", "```py\njulia> typeof(amstz) \nTimeZones.VariableTimeZone \n```", "```py\njulia> typeof(TimeZone(\"GMT\")) \nTimeZones.FixedTimeZone \n```", "```py\njulia> tz\"Europe/Bucharest\" \nEurope/Bucharest (UTC+2/UTC+3) \n```", "```py\n# 8 PM, Christmas Day in Vienna, 2018 \njulia> ZonedDateTime(DateTime(2018, 12, 25, 20), tz\"Europe/Vienna\") \n2018-12-25T20:00:00+01:00 \n```", "```py\njulia> ZonedDateTime(2018, 12, 25, 20, tz\"Europe/Vienna\") \n2018-12-25T20:00:00+01:00 \n```", "```py\njulia> localzone() \nEurope/Madrid (UTC+1/UTC+2) \n```", "```py\njulia> now() \n2018-11-08T22:32:59.336 \n\njulia> now(tz\"Europe/Moscow\") \n2018-11-09T00:33:23.138+03:00 \n\njulia> today() \n2018-11-08 \n\njulia> today(tz\"Europe/Moscow\") \n2018-11-09 \n```", "```py\njulia> todayat(Time(22, 30), tz\"Europe/Moscow\") \n2018-11-09T22:30:00+03:00 \n```", "```py\njulia> xmas_day = ZonedDateTime(2018, 12, 25, 20, tz\"Europe/Vienna\") \n2018-12-25T20:00:00+01:00 \n\njulia> astimezone(xmas_day, tz\"Australia/Sydney\") \n2018-12-26T06:00:00+11:00 \n```", "```py\njulia> ZonedDateTime(\"2018-12-25T20:00:00+01:00\", \"yyyy-mm-ddTHH:MM:SSzzzz\") \n2018-12-25T20:00:00+01:00 \n```", "```py\njulia> last_day_of_winter = tonext(today()) do d \n           dayofweek(d) == Sunday && \n           month(d) == March && \n           dayofmonth(d) > dayofmonth(lastdayofmonth(d) - Day(7)) \n       end \n2019-03-31 \n```", "```py\nlondon_time = ZonedDateTime(DateTime(last_day_of_winter), tz\"Europe/London\") \n2019-03-31T00:00:00+00:00 \n```", "```py\njulia> next_day = london_time + Day(1) \n2019-04-01T00:00:00+01:00 \n```", "```py\njulia> next_day - Hour(24) \n2019-03-30T23:00:00+00:00 \n```", "```py\njulia> interval = ZonedDateTime(2019, 8, 1, tz\"Europe/London\"):Hour(1):ZonedDateTime(2019, 8, 2, tz\"Australia/Sydney\") \n2019-08-01T00:00:00+01:00:1 hour:2019-08-02T00:00:00+10:00 \n\njulia> collect(interval) \n16-element Array{TimeZones.ZonedDateTime,1}: \n2019-08-01T00:00:00+01:00 \n# output truncated \n2019-08-01T15:00:00+01:00 \n```", "```py\njulia> astimezone(ZonedDateTime(\"2019-08-01T00:00:00+01:00\", \"yyyy-mm-ddTHH:MM:SSzzzz\"), tz\"Australia/Sydney\" ) \n2019-08-01T09:00:00+10:00 \n```", "```py\njulia> using Pkg \npkg> add TimeSeries  \n```", "```py\njulia> using MarketData \njulia> MarketData.ohlc \n500x4 TimeSeries.TimeArray{Float64,2,Date,Array{Float64,2}} 2000-01-03 to 2001-12-31 \n```", "```py\njulia> using Plots \njulia> pyplot() \nPlots.PyPlotBackend() \n```", "```py\njulia> plot(1:10, rand(10))\n```", "```py\njulia> plot!(rand(10, 2)) \n```", "```py\njulia> plot(1:10, rand(10,3), title=\"Three Lines\",label=[\"First\" \"2nd\" \"Third Line\"],lw=3) # lw stands for line width \n```", "```py\njulia> xlabel!(\"Beautiful lines\") \njulia> ylabel!(\"Small lines\") \n```", "```py\njulia> plot(MarketData.ohlc) \n```", "```py\njulia> plot(MarketData.ohlc[:High]) \n```", "```py\njulia> plot!(MarketData.ohlc[:Low]) \n```", "```py\njulia> fieldnames(typeof(MarketData.ohlc)) \n(:timestamp, :values, :colnames, :meta) \n```", "```py\njulia> MarketData.ohlc |> head \n6×4 TimeArray{Float64,2,Date,Array{Float64,2}} 2000-01-03 to 2000-01-10  \n```", "```py\njulia> timestamp(MarketData.ohlc) \n500-element Array{Date,1}: \n 2000-01-03 \n 2000-01-04 \n 2000-01-05 \n# output truncated \n\njulia> timestamp(MarketData.ohlc)[1]  \n2000-01-03 \n```", "```py\njulia> values(MarketData.ohlc) \n500×4 Array{Float64,2} \n```", "```py\njulia> colnames(MarketData.ohlc)  \n4-element Array{Symbol,1}: \n :Open \n :High \n :Low \n :Close  \n```", "```py\njulia> rename(MarketData.ohlc, [:Opening, :Maximum, :Minimum, :Closing]) \n```", "```py\njulia> MarketData.ohlc[:High] \n500×1 TimeArray{Float64,1,Date,Array{Float64,1}} 2000-01-03 to 2001-12-31 \n```", "```py\njulia> MarketData.ohlc[:High, :Low] \n```", "```py\njulia> maximum(values(MarketData.ohlc[:Close])) \n144.19 \n```", "```py\njulia> findall(values(MarketData.ohlc[:Close]) .== 144.19) \n1-element Array{Int64,1}: \n 56 \n```", "```py\njulia> MarketData.ohlc[56] \n1×4 TimeArray{Float64,2,Date,Array{Float64,2}} 2000-03-22 to 2000-03-22 \n```", "```py\njulia> MarketData.ohlc[50:60] \n11×4 TimeArray{Float64,2,Date,Array{Float64,2}} 2000-03-14 to 2000-03-28 \n```", "```py\njulia> MarketData.ohlc[7:7:70] \n```", "```py\njulia> dayname(timestamp(MarketData.ohlc)[56]) \n\"Wednesday\" \n```", "```py\njulia> MarketData.ohlc[[7:7:49; 54;55;56;57; 63:7:70]] \n13×4 TimeArray{Float64,2,Date,Array{Float64,2}} 2000-01-11 to 2000-04-11 \n```", "```py\njulia> MarketData.ohlc[Date(2000, 03, 22)] \n1×4 TimeArray{Float64,2,Date,Array{Float64,2}} 2000-03-22 to 2000-03-22 \n```", "```py\njulia> MarketData.ohlc[Date(2000, 03, 20):Day(1):Date(2000, 04,30)] \n29×4 TimeArray{Float64,2,Date,Array{Float64,2}} 2000-03-20 to 2000-04-28 \n```", "```py\njulia> MarketData.ohlc[Date(2000, 03, 20):Dates.Week(1):Date(2000, 04,30)] \n6×4 TimeArray{Float64,2,Date,Array{Float64,2}} 2000-03-20 to 2000-04-24 \n# output truncated \n```", "```py\njulia> MarketData.ohlc[[Date(2000, 03, 20):Day(1):Date(2000, 04,30); Date(2000, 05, 01)]] \n30×4 TimeArray{Float64,2,Date,Array{Float64,2}} 2000-03-20 to 2000-05-01 \n```", "```py\njulia> MarketData.ohlc[:High, :Low][Date(2000, 03, 20):Day(1):Date(2000, 03,25)] \n5×2 TimeArray{Float64,2,Date,Array{Float64,2}} 2000-03-20 to 2000-03-24 \n```", "```py\njulia> when(MarketData.ohlc[1:70], Dates.dayname, \"Wednesday\") \n14x4 TimeArray{Float64,2,Date,Array{Float64,2}} 2000-01-05 to 2000-04-05 \n# output truncated \n```", "```py\njulia> when(MarketData.ohlc, Dates.monthname, \"August\") \n46x4 TimeArray{Float64,2,Date,Array{Float64,2}} 2000-08-01 to 2001-08-31 \n# output truncated \n```", "```py\njulia> from(MarketData.ohlc, Date(2000, 3, 22)) \n445x4 TimeArray{Float64,2,Date,Array{Float64,2}} 2000-03-22 to 2001-12-31 \n```", "```py\njulia> to(MarketData.ohlc, Date(2000, 3, 22)) \n56x4 TimeArray{Float64,2,Date,Array{Float64,2}} 2000-01-03 to 2000-03-22 \n# output truncated \n```", "```py\njulia> findall(MarketData.ohlc[:Close] .>= MarketData.ohlc[:Open] .+ MarketData.ohlc[:Open] .* 0.1) \n7-element Array{Int64,1}: \n  55 \n  74 \n 119 \n 254 \n 260 \n 271 \n 302 \n```", "```py\njulia> findwhen(MarketData.ohlc[:Close] .>= MarketData.ohlc[:Open] .+ MarketData.ohlc[:Open] .* 0.1) \n7-element Array{Date,1}: \n 2000-03-21 \n 2000-04-17 \n 2000-06-21 \n 2001-01-03\n```", "```py\n 2001-01-11 \n 2001-01-29 \n 2001-03-14 \n```", "```py\njulia> d1 = today():Day(1):today() + Week(1) |> collect \n8-element Array{Date,1}: \n 2018-11-08 \n 2018-11-09 \n 2018-11-10 \n 2018-11-11 \n 2018-11-12 \n 2018-11-13 \n 2018-11-14 \n 2018-11-15 \n\njulia> t1 = TimeArray(d1, rand(length(d1)), [:V1]) \n8×1 TimeArray{Float64,1,Date,Array{Float64,1}} 2018-11-08 to 2018-11-15 \n```", "```py\njulia> d2 = today():Day(1):today() + Day(10) |> collect \n11-element Array{Date,1}: \n 2018-11-08 \n 2018-11-09 \n 2018-11-10 \n 2018-11-11 \n 2018-11-12 \n 2018-11-13 \n 2018-11-14 \n 2018-11-15 \n 2018-11-16 \n 2018-11-17 \n 2018-11-18 \n\njulia> t2 = TimeArray(d2, rand(length(d2)), [:V2]) \n11×1 TimeArray{Float64,1,Date,Array{Float64,1}} 2018-11-08 to 2018-11-18  \n```", "```py\njulia> merge(t1, t2) \n8×2 TimeArray{Float64,2,Date,Array{Float64,2}} 2018-11-08 to 2018-11-15 \n```", "```py\njulia> merge(t1, t2, :right) \n11×2 TimeArray{Float64,2,Date,Array{Float64,2}} 2018-11-08 to 2018-11-18 \n```", "```py\njulia> d3 = today() + Week(2):Day(1):today() + Week(3) |> collect  \n8-element Array{Date,1}: \n 2018-11-22 \n 2018-11-23 \n 2018-11-24 \n 2018-11-25 \n 2018-11-26 \n 2018-11-27\n```", "```py\n 2018-11-28 \n 2018-11-29 \n\njulia> t3 = TimeArray(d3, rand(length(d3)), [:V1]) \n8×1 TimeArray{Float64,1,Date,Array{Float64,1}} 2018-11-22 to 2018-11-29 \n```", "```py\njulia> vcat(t1, t3) \n16×1 TimeArray{Float64,1,Date,Array{Float64,1}} 2018-11-08 to 2018-11-29 \n```", "```py\njulia> january = TimeArray(Date(2018, 1, 1):Day(1):Date(2018, 1, 31) |> collect, rand(31), [:values]) \n31×1 TimeArray{Float64,1,Date,Array{Float64,1}} 2018-01-01 to 2018-01-31 \n```", "```py\ncollapse(<time series>, <time function>, <time filtering function>, <value collapsing function>) \n```", "```py\njulia> using Statistics \njulia> collapse(january, week, last, mean) \n5×1 TimeArray{Float64,1,Date,Array{Float64,1}} 2018-01-07 to 2018-01-31 \n```", "```py\njulia> collapse(january, week, first) \n5×1 TimeArray{Float64,1,Date,Array{Float64,1}} 2018-01-01 to 2018-01-29 \n```", "```py\njulia> map(january[1:7]) do ts, values \n           ts += Year(1) \n           (ts, values) \n       end \n7×1 TimeArray{Float64,1,Date,Array{Float64,1}} 2019-01-01 to 2019-01-07 \n```"]