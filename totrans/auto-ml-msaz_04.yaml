- en: '*Chapter 3*: Training Your First AutoML Model'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With an Azure account, an Azure Machine Learning workspace, a compute cluster,
    and a basic understanding of how AutoML works, you''re now ready to train your
    first automated machine learning model. It will be easy and straightforward: AutoML
    is an equalizer that enables even novices to create advanced models in mere minutes,
    and you will appreciate its power by the end of this chapter regardless of your
    background. Practice makes perfect, and this chapter is your first step toward
    becoming an AutoML practitioner.'
  prefs: []
  type: TYPE_NORMAL
- en: You will begin this chapter by loading data from your local machine to your
    **Azure Machine Learning Studio** (**AML Studio**), selecting only the columns
    you need for training. Then, you will proceed to train an AutoML model using the
    guided user interface. After training your model, you will learn how to interpret
    your results directly from the AMLS portal. This includes not only standard metrics
    such as accuracy, false positive rate, and false negative rate, but also an explainability
    dashboard that will wow your business end users. Lastly, there is a tips and tricks
    section that will assist you in future projects.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Loading data into AMLS for AutoML
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an AutoML solution
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Interpreting your AutoML results
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Explaining your AutoML model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Obtaining better AutoML performance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To follow along with this chapter, you will require the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Access to the internet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A web browser, preferably Google Chrome or Microsoft Edge Chromium
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Microsoft Azure account
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An Azure Machine Learning service workspace
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Loading data into AMLS for AutoML
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Just as you registered the Diabetes Open dataset in [*Chapter 2*](B16595_02_ePub.xhtml#_idTextAnchor023),
    *Getting Started with Azure Machine Learning Service*, you will now be registering
    a publicly available Titanic dataset using AMLS.
  prefs: []
  type: TYPE_NORMAL
- en: 'Unlike the diabetes dataset, however, you will load the data directly from
    your desktop to the portal. The Titanic dataset holds information relating to
    who survived and who died aboard the infamous ill-fated voyage. You will build
    a model that predicts survivors based on demographic information such as age and
    gender, as well as ticket information, such as passenger class and ticket price:'
  prefs: []
  type: TYPE_NORMAL
- en: First, you will need to download the Titanic data from the GitHub repository.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, you will need to open up your **Azure Machine Learning Studio** by navigating
    to [http://ml.azure.com](http://ml.azure.com).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you are in the studio, click **Datasets** on the right-hand side of the
    studio under **Assets**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, click **Create dataset** and select **From local files** from the drop-down
    menu as seen in *Figure 3.1*:![Figure 3.1 – Creating a dataset from a local file](img/B16595_03_001.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Figure 3.1 – Creating a dataset from a local file
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Before loading in the Titanic data, you have to name your dataset. Write `Titanic
    Training Data` in the **Dataset Name** textbox. Unlike a lot of other Azure resources,
    you can include spaces in your dataset's name.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Since the Titanic data contains columns and rows, select `Titanic data containing
    passenger demographic information and ticket information. We will use this data
    to model who survived the Titanic voyage`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Generally speaking, it's a good idea to include the project name and use in
    the dataset name, for example, *Titanic Training Data* or *Titanic Scoring Data*.
    In the description field, it's best practice to list the type of information found
    in the data, as well as which problem you are trying to solve. Please see *Figure
    3.2* for reference.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click **Next** at the bottom of the screen:![Figure 3.2 – Naming and describing
    your dataset ](img/B16595_03_002.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Figure 3.2 – Naming and describing your dataset
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now, you will load your Titanic data onto your default datastore. Your default
    datastore points to the storage account that was created with your Azure Machine
    Learning workspace. Select your default datastore by clicking the appropriate
    circle, as shown in *Figure 3.3*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click `titanic.csv` on your local machine, and then click **Open**. Notice that
    it will tell you the size of your file after it's loaded into Azure.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With your datastore and file selected, you can also determine the path on your
    datastore in which to save your file. In the empty field labeled `/titanic/train`.
    This will create a directory structure with a folder called `titanic`, a subfolder
    called `train`, and another folder with the current date and time in UTC format.
    You can also use existing folders on your datastore. Please see *Figure 3.3* for
    reference.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Next** at the bottom of the screen to advance:![Figure 3.3 – Uploading
    Titanic data to your datastore  ](img/B16595_03_003.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Figure 3.3 – Uploading Titanic data to your datastore
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'With your data loaded onto your datastore, it''s now time to set up your dataset
    so that the file enters your Azure Machine Learning workspace correctly. Here,
    there are five options:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a) From **File format**, you can select delimited files, Parquet files, text
    files, or JSON files. Select **Delimited** from the dropdown.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: b) Then, choose the appropriate option under **Delimiter**. Since this is a
    CSV, a comma-separated values file, choose **comma** from the dropdown. Notice
    that every time you make a change, AMLS will generate a new preview of your data
    at the bottom of your screen.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: c) You will rarely have to change **Encoding**, and it's generally best to leave
    it at the default setting, in this case, **UTF-8**.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: d) **Column headers**, on the other hand, you will always want to specify. AMLS
    defaults to **No headers**, but most files you use will have them. Select **Use
    headers from the first file** to import your appropriate column headers.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: e) **Skip rows** is a useful option when you import data with extraneous rows
    at the top or bottom of your file. While the Titanic data lacks these extra rows,
    often you will find that data contains a name, date, or organizational information
    on the very bottom row.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: It is important to remove these extra rows or this will result in errors when
    you try to build a machine learning model. Please see *Figure 3.4* for an example
    of how your settings should look.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click **Next** to select only the appropriate columns for your dataset:![Figure
    3.4 – Choosing the correct settings for your file ](img/B16595_03_004.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Figure 3.4 – Choosing the correct settings for your file
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'There are certain columns that are inappropriate for machine learning. While
    AutoML will automatically remove most of them for you, it''s best practice to
    remove them yourself. In no order of importance, the types of columns to remove
    are as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Columns that contain a unique value in each row, such as *Name*, *ID*, and *Ticket*
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Columns with an excessive number of null values, such as *Cabin*
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Columns that do not contain useful information
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Columns that are derivations of your target column
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To remove these columns from your dataset, all you need to do is move the slider
    to the left, as shown in *Figure 3.5*. Remove **PassengerId**, **Name**, **Ticket**,
    and **Cabin**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: When you remove a column from your dataset, the file on the datastore is not
    altered. You can thereby make multiple datasets from the same file point to different
    columns.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 3.5 – Selecting your columns ](img/B16595_03_005.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Figure 3.5 – Selecting your columns
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'From this menu, you can also specify the type of each column. There are five
    types: **String**, **Boolean**, **Integer**, **Decimal**, and **Date**. Booleans
    are for columns that have two possible values, such as 0 or 1\. Change **Survived**
    to **Boolean**, and change **Age** to **Integer**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Next**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You are now presented with a confirmation screen. From this screen, you can
    see the name you assigned to your dataset and its description, the datastore,
    and the path in the datastore on which the base file is located, along with the
    file settings. Profiling the data is also possible from this screen, as shown
    in *Figure 3.6*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you choose to profile your data, you will need to select a compute cluster.
    This option will give you summary statistics for each column, including the mean,
    min, max, standard deviation, number of missing values, number of errors, and
    number of unique values. Turn profiling on or off, and then click **Next** to
    create your dataset:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 3.6 – Confirming your dataset details ](img/B16595_03_006.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.6 – Confirming your dataset details
  prefs: []
  type: TYPE_NORMAL
- en: You have now created a dataset that you can use within AMLS. With it, you will
    build a machine learning model that predicts which passengers survived and which
    passengers perished. The next step is to train a machine learning model using
    the AutoML guided user interface.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an AutoML solution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that you have loaded Titanic data into your datastore and registered it
    as a dataset, you are ready to train an AutoML model with a few guided clicks:'
  prefs: []
  type: TYPE_NORMAL
- en: To get started, click **Automated ML** from the left-hand menu under **Author**.
    Then, click **New Automated ML run**, marked by a blue cross, near the top left
    of the new page, as shown in *Figure 3.7*:![Figure 3.7 – Beginning your AutoML
    training run ](img/B16595_03_007.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Figure 3.7 – Beginning your AutoML training run
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Once you have advanced to the next screen, you will be presented with all of
    your eligible datasets for training. Currently, only tabular datasets are supported
    for runs from the AutoML GUI. You can also create a new dataset from this view
    by clicking the **Create dataset** button. Select **Titanic Training Data**, as
    shown in *Figure 3.8*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Next**:![Figure 3.8 – Selecting your dataset for training ](img/B16595_03_008.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Figure 3.8 – Selecting your dataset for training
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: After selecting your dataset, the next steps involve naming your experiment,
    selecting a column to predict, and selecting a compute cluster for remote training.
    Remember that **Experiments** records all the information related to your training
    run.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: To create a new experiment, select `Titanic-Training`. You are not allowed to
    have spaces in your experiment names; the only special characters allowed are
    dashes or underscores.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, select your **Target Column** from the drop-down menu. Your target column
    is the number or class you are trying to predict with your machine learning model.
    In this case, select **Survived**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Likewise, select a compute cluster on which AutoML will create machine learning
    models. Select any compute cluster you have created from the drop-down menu. AutoML
    will run on this compute remotely, allowing you to continue to do other work on
    your AMLS workspace.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Please confirm your settings using *Figure 3.9* for reference and click **Next**
    to advance to the final screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Important tip
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: It's important to select the right size and type of compute when training an
    automated machine learning model. The RAM on your compute cluster should be about
    20 times as large as your dataset to be on the safe side. Use GPUs when using
    deep learning algorithms and use CPUs for everything else. You can train AutoML
    models on data of up to 10 gigabytes before you should switch to a Spark-based
    solution.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 3.9 – Configuring your AutoML run ](img/B16595_03_009.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Figure 3.9 – Configuring your AutoML run
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You are only a few clicks away from creating your AutoML model. There are three
    options in the next menu: **Classification**, **Forecasting**, and **Regression**.
    **Classification** is for when you are trying to predict a category, such as whether
    a person is likely to default on a loan or pay it back. **Regression** is for
    when you''re trying to predict a number instead of a class, for example, trying
    to predict the price of a house-based feature such as its size. **Forecasting**,
    on the other hand, is for when you''re trying to predict a number in the future.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Since we are trying to predict whether or not a person survived the Titanic
    disaster, select **Classification**. A green checkmark will appear next to the
    box on the right-hand side, as seen in *Figure 3.10*:![Figure 3.10 – Selecting
    the right task type](img/B16595_03_010.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Figure 3.10 – Selecting the right task type
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: There are two additional sets of settings you can configure – **additional configuration
    settings** and **featurization settings**. **Additional configuration settings**
    lets you change which metrics AutoML will use to score algorithms, enables you
    to block AutoML from trying certain algorithms, and lets you set the overall time
    when AutoML runs.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Featurization settings** lets you deselect columns, set column types, and
    decide how AutoML deals with nulls for each column. More advanced data scientists
    are able to utilize these features for finer-grained control over how AutoML deals
    with missing values and how AutoML featurizes your dataset.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Navigate to **View additional configuration settings**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click `0.25`, as shown in *Figure 3.11*. If you accidentally set it to 15,
    your job will run for 15 hours before terminating:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Important tip
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: For now, stick to the default metric and default validation mechanism, **Accuracy**
    and **Auto**, respectively. In later chapters, we will do a deeper dive into the
    various metrics and validation mechanisms supported by AutoML on Azure.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 3.11 – Setting your training job time ](img/B16595_03_011.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Figure 3.11 – Setting your training job time
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click **Save** and **Finish** and find something to do for the next 15 minutes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You have launched your first AutoML model, and soon you will have the results.
  prefs: []
  type: TYPE_NORMAL
- en: Interpreting your AutoML results
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Your training run should have taken about 15 minutes and produced a model with
    around 80% accuracy. However, there is much more to your results than this simple
    metric. There are data guardrails that will inform you of any problems with your
    data. There is also a slew of different metrics for each of the three problem
    types and accompanying charts and graphs that can assist you in presenting your
    results to the business:'
  prefs: []
  type: TYPE_NORMAL
- en: To begin, click `Titanic-Training` experiment, as seen in *Figure 3.12*:![Figure
    3.12 – Examining your results ](img/B16595_03_012.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Figure 3.12 – Examining your results
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You will be taken to a screen with a variety of metrics regarding your model,
    including the type of algorithm used to train the best-performing model, its accuracy
    score, the date and time it was created, and how long your AutoML run took to
    execute. Take advantage of the **Description** area in the bottom-right corner
    of your screen to write details about your run.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click the pen icon and write `My first AutoML model`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You''ll notice that there are six tabs at the top of the screen: **Details**,
    **Data****guardrails**, **Models**, **Outputs + Logs**, **Child runs**, and **Snapshot**.
    For the purpose of interpreting results, only **Data guardrails** and **Models**
    are important.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click on the **Data guardrails** tab and read the results.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Understanding data guardrails
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Data guardrails** identify and correct any problems you have in your dataset,
    and it''s essential to know what those problems are. There are different guardrails
    depending on whether you are trying to solve a classification, regression, or
    forecasting problem. Classification problems use the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Validation split handling**: This guardrail looks at your dataset size and
    unique values within your columns to determine how your machine learning model
    should be trained and validated. For this Titanic dataset, it will choose 10-fold
    cross validation. Cross validation splits your data 10 ways, trains a model based
    on 9 of the parts, and scores the data on the remaining part. This process is
    repeated 10 times and the scores are averaged.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Class balancing detection**: This guardrail looks at your target column to
    determine whether there are enough samples of each of the unique values. With
    the Titanic data, this guardrail will pass, as there are sufficient numbers of
    people who survived and sufficient numbers of people who perished to build a valid
    model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Age` column, and they are filled with the mean of that column. There are also
    two null values for the `Embarked` column, and they are filled with `--`, the
    most common value for the column.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**High-cardinality feature detection**: This guardrail will look at your categorical
    columns and see whether any have too many unique values, in which case they will
    be binned. With the Titanic data, this guardrail is passed and the data is left
    unaltered.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding model metrics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'After exploring data guardrails, the next step involves interpreting your model:'
  prefs: []
  type: TYPE_NORMAL
- en: Click **Models** next to the **Data guardrails** tab. On this tab, you will
    see a list of AutoML-generated models ranked in order of accuracy, with the highest-scoring
    model on the top.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click your highest-scoring model's name, as shown in *Figure 3.13*:![Figure
    3.13 – Navigating to your model ](img/B16595_03_013.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Figure 3.13 – Navigating to your model
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: This will take you to a similar screen with a new set of tabs at the top. **Metrics**,
    the fourth tab at the top, contains not only accuracy, but all of the additional
    metrics and graphs associated with a classification problem. You can check and
    deselect any you wish. There are over 20 checkboxes, but, for the purpose of this
    exercise, we will check three.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Check the **accuracy**, **confusion_matrix**, and **matthews_correlation** boxes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Accuracy** is a simple metric that is easy to understand, and it is what
    your AutoML run used to build and determine your best model. It is simply how
    likely your model is to be correct when making a prediction. In my case, it''s
    83.84%. Unlike a determinant system, machine learning models won''t score exactly
    the same, but your best model should score similarly.'
  prefs: []
  type: TYPE_NORMAL
- en: '**The Matthews correlation coefficient** is a much more sophisticated metric
    that takes into account unbalanced classes. It''s a combination of true positive,
    false positive, true negative, and false negative rates and ranges between -1
    and 1\.'
  prefs: []
  type: TYPE_NORMAL
- en: 'A score of 1 means that your model predicts perfectly, while a score of 0 means
    that your model is guessing randomly. A score of -1 would mean your model is perfectly
    wrong every time. My score was .6541, much lower than my accuracy score, as seen
    in *Figure 3.14*. Your model should score similarly. This indicates that your
    model is probably much worse at identifying one of the two classes. As you will
    see next, your confusion matrix confirms this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.14 – Accuracy and Matthews correlation ](img/B16595_03_014.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.14 – Accuracy and Matthews correlation
  prefs: []
  type: TYPE_NORMAL
- en: '**Confusion matrices** are visual representations of your classification output,
    focusing on true and false positives and negatives. While your accuracy was high,
    your Matthews correlation coefficient was low, and the confusion matrix is your
    perfect tool to investigate this relationship. Please see *Figure 3.15*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.15 – Confusion matrix ](img/B16595_03_015.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.15 – Confusion matrix
  prefs: []
  type: TYPE_NORMAL
- en: 'What this output says is that my model has correctly identified 509 cases where
    people died on the Titanic and 238 cases where people lived. However, the model
    misidentified 40 people who perished as survivors and 104 people who died as having
    survived. *Figure 3.16* shows the relative percentages by selecting **Normalized**
    from the drop-down box:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.16 – Normalized confusion matrix ](img/B16595_03_016.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.16 – Normalized confusion matrix
  prefs: []
  type: TYPE_NORMAL
- en: Here, we can see that the true negative rate, people who died who were correctly
    classified as having died, is 92.71%. The false negative rate, people who survived
    but were incorrectly classified, is only 7.29%. These scores are really high.
    However, the true positive rate, the ability of the model to predict who survives
    correctly, is only 69.59%. Likewise, the false positive rate is 30.41%. What we
    have is a model that is much better at predicting victims of the disaster than
    predicting survivors.
  prefs: []
  type: TYPE_NORMAL
- en: There are many other useful metrics and graphs contained under the **Metrics**
    tab. Try checking a few of the boxes and researching what they mean. You can also
    download any of the graphs directly to your computer from the next tab on your
    right, **Outputs + logs**. One set of useful information you will not find under
    the **Metrics** tab relates to what features were used to create your model. This
    data can be found under the **Explanations** tab, currently in preview.
  prefs: []
  type: TYPE_NORMAL
- en: Explaining your AutoML model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Knowing your results is important, but knowing how your model derived its results
    is just as integral to working with machine learning. Here is where model explainability
    plays a key role. **Explainability** is the ability to say which features are
    most important in building your AutoML model. This is especially important in
    industries where you have to be able to legally explain your machine learning
    models, for example, if you built a model to determine who is approved for a loan:'
  prefs: []
  type: TYPE_NORMAL
- en: To begin, click the Explanations tab next to Metrics.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the first ID under Explanation ID on the right-hand side of the screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the slider button next to View previous dashboard experience.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click Global Importance.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Immediately, you will see your columns ranked in order of importance. `Sex`
    is the most important column, followed by `Pclass` and `Age`, as shown in Figure
    3.17\. With an importance value of `1.1`, Sex is roughly twice as important as
    Pclass, with a score of `0.59`. All values are relative to each other. From this
    chart, you can say that gender was the most important feature used in creating
    your model.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 3.17 – Explainability ](img/B16595_03_017.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Figure 3.17 – Explainability
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now that you can explain your entire model, it's just as important to be able
    to explain individual points.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: To achieve this, click **Summary Importance** and select any individual data
    point.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'A chart will appear below showing which features negatively or positively affected
    the model to predict whether the individual survived or perished. *Figure 3.18*
    shows the profile for a male with a first class ticket. Note that his sex negatively
    affects his predicted survival, while his class influences the prediction in a
    positive direction:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 3.18 – Explainability for a male with a first-class ticket ](img/B16595_03_018.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.18 – Explainability for a male with a first-class ticket
  prefs: []
  type: TYPE_NORMAL
- en: '**Explainability** can be accessed via both this dashboard interface and programmatically
    through Python, as we will see in later chapters. With Python, you''re able to
    store this information in a database for safe keeping and easy retrieval. That
    way, you will be able to explain all of your machine learning predictions and
    defend any legal challenges that may arise.'
  prefs: []
  type: TYPE_NORMAL
- en: Having built and understood an AutoML model, you are now ready to build many
    more. In order to do so more efficiently, there are many small tweaks you can
    make to improve performance.
  prefs: []
  type: TYPE_NORMAL
- en: Obtaining better AutoML performance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Congratulations! You have built your first model and it performs very well.
    However, there are a lot of little things you can do to improve performance. You
    will build many more models in the future, after all, and in order to build the
    best models, you need to know all of the tips and tricks. Here''s a list of tips
    and tricks to end this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Additional **feature engineering** will often provide superior results. Feature
    engineering just means transforming data in ways that make it easier for machine
    learning algorithms to find patterns. Binning ticket prices and age into buckets
    in the Titanic data, for example, may provide you with superior results compared
    to just using prices and age as numeric columns.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Speaking of binning, you can always bin a regression problem to turn it into
    a classification problem. If you're trying to predict the average lifespan of
    a human being, for example, you can try to predict a range of numbers instead
    of a straight number, such as *60-65 years,* instead of an exact number. This
    is a useful tactic to employ when AutoML isn't returning great results. Classification
    problems are easier to solve than regression problems given the same dataset,
    and you can often achieve similar value for your business problem.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enabling deep learning will often provide superior results with AutoML, but
    it comes at the cost of using significantly more compute power and time. Deep
    learning algorithms create complex neural networks to make predictions and are
    especially useful for AutoML when you have text data as an input feature. Instead
    of using a CPU-based compute cluster, use a GPU-based compute cluster for necessary
    power and performance.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Forecasting in AutoML requires a carefully constructed dataset and a keen understanding
    of the forecasting-specific settings. Read [*Chapter 6*](B16595_06_ePub.xhtml#_idTextAnchor081),
    *Building an AutoML Forecasting Solution*, carefully before creating a forecasting
    solution with AutoML.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Letting your AutoML job run for longer periods of time will usually mean better
    results, but only up to a certain point. Try letting it run for a certain amount
    of time and pay attention to see whether the algorithms are returning better results.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AutoML intelligently tunes parameters of its algorithms to try to achieve a
    higher score. If you notice that it keeps trying the same algorithm over and over
    again, keep in mind that this is expected behavior and that it's trying to find
    the best combination of parameters for that algorithm.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It's very likely that a voting or stack ensemble will be your best model, although
    it's harder to explain to people how these models work. If you have end users
    that need to know the math behind your models, you can **blacklist** ensemble
    models for your run. While you cannot presently do this through the AutoML GUI,
    it is possible to do this via code. Please refer to [*Chapter 4*](B16595_04_ePub.xhtml#_idTextAnchor056),
    *Building an AutoML Regression Solution*, for more details on blacklisting ensemble
    models.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running AutoML on compute clusters composed of small VM sizes is cheap. Feel
    free to experiment liberally while using low-RAM virtual machines.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This ends Part 1 of *Automated Machine Learning with Microsoft Azure*, and you
    have accomplished a lot! You learned how to load in files from your local machine
    to your datastore and register it as a dataset. You have created your first AutoML
    model. You are able to not only interpret the results of your model with graphs
    and metrics but also explain how your model makes predictions. Lastly, you learned
    various tips and tricks that will allow you to fine-tune your models. You have
    made the first step on your journey toward mastering AutoML on Azure.
  prefs: []
  type: TYPE_NORMAL
- en: The next part of your journey will involve a lot of Python coding. In [*Chapter
    4*](B16595_04_ePub.xhtml#_idTextAnchor056), *Building an AutoML Regression Solution*,
    you will build a regression model using the **AzureML Python Software Development
    Kit** (**AzureML SDK**). This SDK is a collection of commands that will allow
    a Python notebook to interact with your Azure workspace. You will learn how to
    write AutoML scripts in Python, and you will use those scripts to create powerful
    solutions for predicting numbers.
  prefs: []
  type: TYPE_NORMAL
