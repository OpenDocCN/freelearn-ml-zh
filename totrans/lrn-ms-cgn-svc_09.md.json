["```py\n    public enum BingSearchType {\n        Web, News, NewsCategory\n    }\n\n    public enum SafeSearch {\n        Strict, Moderate, Off\n    }\n```", "```py\npublic IEnumerable<BingSearchType> AvailableSearchTypes  { \n    get { \n        return Enum.GetValues (typeof(BingSearchType)).Cast<BingSearchType>(); \n    } \n}\n\npublic IEnumerable<SafeSearch> SafeSearchFilter {\n    get { \n        return Enum.GetValues(typeof(SafeSearch)).Cast<SafeSearch>(); \n    } \n}\n```", "```py\npublic async Task<TResponse> MakeRequest<TResponse>(string url) {\n    try {\n        var request = new HttpRequestMessage(HttpMethod.Get, url);\n\n        HttpResponseMessage response = await _httpClient.SendAsync(request);\n\n        if (response.IsSuccessStatusCode) {\n            string responseContent = null;\n\n            if (response.Content != null)\n                responseContent = await response.Content.ReadAsStringAsync();\n\n            if (!string.IsNullOrWhiteSpace(responseContent))\n                return JsonConvert.DeserializeObject<TResponse> (responseContent, _settings);\n\n            return default(TResponse);\n        }\n```", "```py\n    private BingWebRequest _webRequest;\n\n    public BingSearch() {\n        _webRequest = new BingWebRequest(\"API_KEY_HERE\");\n    }\n```", "```py\npublic async Task<WebSearchResponse> SearchWeb(string query, SafeSearch safeSearch)\n{\n    string endpoint = string.Format(\"{0}{1}&safeSearch={2} &count=5&mkt=en-US\",\"https://api.cognitive.microsoft.com/bing/v7.0/search?q=\", query, safeSearch.ToString());\n```", "```py\n    try {\n        WebSearchResponse response = await _webRequest.MakeRequest<WebSearchResponse>(endpoint);\n\n        return response;\n    }\n    catch (Exception ex) {\n        Debug.WriteLine(ex.Message);\n    }\nreturn null;\n```", "```py\n    public BingSearchViewModel() {\n        _bingSearch = new BingSearch(); \n        SearchCommand = new DelegateCommand(Search, CanSearch);\n    }\n```", "```py\n    private async void Search(object obj) {\n        switch (SelectedSearchType) { \n            case BingSearchType.Web:\n                var webResponse = await _bingSearch.SearchWeb(SearchQuery, SelectedSafeSearchFilter);\n                ParseWebSearchResponse(webResponse as WebSearchResponse);\n                break;\n            default:\n                break;\n        }\n    }\n```", "```py\nprivate void ParseWebSearchResponse(WebSearchResponse webSearchResponse) {\n    StringBuilder sb = new StringBuilder();\n\n    Webpages webPages = webSearchResponse.webPages;\n\n    foreach (WebValue website in webPages.value)\n    {\n        sb.AppendFormat(\"{0}\\n\", website.name);\n        sb.AppendFormat(\"URL: {0}\\n\", website.displayUrl);\n        sb.AppendFormat(\"About: {0}\\n\\n\", website.snippet);\n    }\n\n    SearchResults = sb.ToString();\n}\n```", "```py\npublic async Task<BingNewsResponse> SearchNews(string query, SafeSearch safeSearch)\n{\n    string endpoint = string.Format(\"{0}{1}&safeSearch={2}&count=5&mkt=en-US\",\"https://api.cognitive.microsoft.com/bing/v7.0/news/search?q=\", query,safeSearch.ToString());\n```", "```py\n    try {\n        BingNewsResponse response = await _webRequest.MakeRequest<BingNewsResponse>(endpoint);\n\n        return response;\n    }\ncatch (Exception ex) {\n        Debug.WriteLine(ex.Message);\n    }\n\n    return null;\n```", "```py\n    case BingSearchType.News:\n        var newsResponse = await _bingSearch.SearchNews(SearchQuery, SelectedSafeSearchFilter);\n        ParseNewsResponse(newsResponse as BingNewsResponse);\n        break;\n```", "```py\nprivate void ParseNewsResponse(BingNewsResponse bingNewsResponse) {\n    StringBuilder sb = new StringBuilder();\n\n    foreach(Value news in bingNewsResponse.value) { \n        sb.AppendFormat(\"{0}\\n\", news.name);\n        sb.AppendFormat(\"Published: {0}\\n\", news.datePublished);\n        sb.AppendFormat(\"{0}\\n\\n\", news.description);\n    }\n\n    SearchResults = sb.ToString();\n}\n```", "```py\npublic async Task<BingNewsResponse> SearchNewsCategory(string query)\n{\n    string endpoint = string.Format(\"{0}{1}&mkt=en-US\", \"https://api.cognitive.microsoft.com/bing/v5.0/news?category=\", query);\n```", "```py\n    try {\n        BingNewsResponse response = await _webRequest.MakeRequest<BingNewsResponse>(endpoint);\n\n        return response;\n    }\ncatch (Exception ex) {\n        Debug.WriteLine(ex.Message);\n    }\n\n    return null;\n```", "```py\n    public enum SearchType {\n        ImageSearch,\n        VideoSearch,\n    }  \n```", "```py\npublic IEnumerable<SearchType> SearchTypes {\n    get { \n        return Enum.GetValues(typeof(SearchType)).Cast<SearchType>();\n    }\n}\n```", "```py\nprivate BingWebRequest _webRequest;\n\npublic BingSearch() {\n    _webRequest = new BingWebRequest(\"API_KEY_HERE\");\n}\n```", "```py\npublic MainViewModel() {\n    _bingSearch = new BingSearch();\n\n    SearchCommand = new DelegateCommand(Search);\n\n    SelectedSearchType = SearchTypes.FirstOrDefault();\n}\n```", "```py\npublic async Task<ImageSearchResponse> SearchImages(string query)\n{\n    string endpoint = string.Format(\"{0}{1}\",\"https://api.cognitive.microsoft.com/bing/v5.0/images/search?q=\", query);\n```", "```py\n    try {\n       ImageSearchResponse response = await _webRequest.MakeRequest<ImageSearchResponse>(endpoint);\n\n        return response;\n    } \n    catch (Exception ex) {\n        Debug.WriteLine(ex.Message);\n    }\n\n    return null;\n```", "```py\n    private async void Search(object obj) {\n        SearchResult = string.Empty;\nswitch(SelectedSearchType) {\n            case SearchType.ImageSearch:\n                var imageResponse = await _bingSearch.SearchImages(SearchQuery);\n                ParseImageResponse(imageResponse);\n                break;\n            default:\n                break;\n        }\n    }\n```", "```py\nprivate void ParseImageResponse(ImageSearchResponse imageResponse)\n{\n    StringBuilder sb = new StringBuilder();\n    sb.Append(\"Image search results:\\n\\n\");\n    sb.AppendFormat(\"# of results: {0}\\n\\n\", imageResponse.totalEstimatedMatches);\n\n    foreach (Value image in imageResponse.value) {\n        sb.AppendFormat(\"\\tImage name: {0}\\n\\tImage size: {1}\\n\\tImage host: {2}\\n\\tImage URL:{3}\\t\\n\\n\", image.name, image.contentSize, image.hostPageDisplayUrl, image.contentUrl);\n    }\n\n    SearchResult = sb.ToString();\n}\n```", "```py\npublic async Task<VideoSearchResponse> SearchVideos(string query)\n{\n    string endpoint = string.Format(\"{0}{1}\", \"https://api.cognitive.microsoft.com/bing/v7.0/videos/search?q=\", query);\n```", "```py\ntry {\n   VideoSearchResponse response = await _webRequest.MakeRequest<VideoSearchResponse>(endpoint);\n\n    return response;\n}\ncatch (Exception ex) {\n    Debug.WriteLine(ex.Message);\n}\n\nreturn null;\n```", "```py\ncase SearchType.VideoSearch:\n  var videoResponse = await _bingSearch.SearchVideos(SearchQuery);\n  ParseVideoResponse(videoResponse);\n  break;\n```", "```py\nprivate void ParseVideoResponse(VideoSearchResponse videoResponse)\n{\n    StringBuilder sb = new StringBuilder();\n    sb.Append(\"Video search results:\\n\\n\");\n    sb.AppendFormat(\"# of results: {0}\\n\\n\",\n    videoResponse.totalEstimatedMatches);\n\n    foreach (VideoValue video in videoResponse.value) {\n        sb.AppendFormat(\"\\tVideo name: {0}\\n\\tVideo duration: {1}\\n\\tVideo URL: {2}\\t\\n\",video.name, video.duration, video.contentUrl);\n\n        foreach(Publisher publisher in video.publisher) { \n            sb.AppendFormat(\"\\tPublisher: {0}\\n\", publisher.name);\n        }\n\n        sb.Append(\"\\n\");\n    }\n    SearchResult = sb.ToString();\n}\n```", "```py\nText=\"{Binding SearchQuery, UpdateSourceTrigger=PropertyChanged}\"\n```", "```py\nbehaviors:AutoCompleteBehavior.AutoCompleteItemsSource = \"{Binding Suggestions}\"\n```", "```py\npublic async Task<List<string>> Suggest(string query) {\n   string endpoint = string.Format(\"{0}{1}&mkt=en-US\", \"https://api.cognitive.microsoft.com/bing/v7.0/suggestions/?q=\", query);\n\n    List<string> suggestionResult = new List<string>();\n```", "```py\ntry  {\n    BingAutoSuggestResponse response = await _webRequest.MakeRequest<BingAutoSuggestResponse>(endpoint);\n\n    if (response == null || response.suggestionGroups.Length == 0)\n        return suggestionResult;\nforeach(Suggestiongroup suggestionGroup in response.suggestionGroups) {\nforeach(Searchsuggestion suggestion in suggestionGroup.searchSuggestions) {\nsuggestionResult.Add(suggestion.displayText);\n        }\n    }\n} \ncatch(Exception ex) {\n    Debug.WriteLine(ex.Message);\n}\n\nreturn suggestionResult;\n```", "```py\nprivate async void GetAutosuggestions() {\nvar results = await _autoSuggest.Suggest(SearchQuery);\n\n    if (results == null || results.Count == 0) return;\n\n    Suggestions = results;\n}\n```"]