["```py\n    > customer= read.csv('customer.csv', header=TRUE)\n    > head(customer)\n     ID Visit.Time Average.Expense Sex Age\n    1  1          3             5.7   0  10\n    2  2          5            14.5   0  27\n    3  3         16            33.5   0  32\n    4  4          5            15.9   0  30\n    5  5         16            24.9   0  23\n    6  6          3            12.0   0  15\n\n    ```", "```py\n    > str(customer)\n    'data.frame':  60 obs. of  5 variables:\n     $ ID             : int  1 2 3 4 5 6 7 8 9 10 ...\n     $ Visit.Time     : int  3 5 16 5 16 3 12 14 6 3 ...\n     $ Average.Expense: num  5.7 14.5 33.5 15.9 24.9 12 28.5 18.8 23.8 5.3 ...\n     $ Sex            : int  0 0 0 0 0 0 0 0 0 0 ...\n     $ Age            : int  10 27 32 30 23 15 33 27 16 11 ...\n\n    ```", "```py\n    > customer = scale(customer[,-1])\n\n    ```", "```py\n    > hc = hclust(dist(customer, method=\"euclidean\"), method=\"ward.D2\")\n    > hc\n\n    Call:\n    hclust(d = dist(customer, method = \"euclidean\"), method = \"ward.D2\")\n\n    Cluster method   : ward.D2 \n    Distance         : euclidean \n    Number of objects: 60\n\n    ```", "```py\n    > plot(hc, hang = -0.01, cex = 0.7)\n\n    ```", "```py\n    > hc2 = hclust(dist(customer), method=\"single\")\n    > plot(hc2, hang = -0.01, cex = 0.7)\n\n    ```", "```py\n> ? dist\n> ? hclust\n\n```", "```py\n    > dv = diana(customer, metric = \"euclidean\")\n\n    ```", "```py\n    > summary(dv)\n\n    ```", "```py\n    > plot(dv)\n\n    ```", "```py\n    > install.packages(\"dendextend\")\n    > library(dendextend)\n    > install.packages(\"margrittr\")\n    > library(magrittr)\n\n    ```", "```py\n    > dend = customer %>% dist %>% hclust %>% as.dendrogram\n\n    ```", "```py\n    dend %>% plot(horiz=TRUE, main = \"Horizontal Dendrogram\")\n\n    ```", "```py\n    > fit = cutree(hc, k = 4)\n\n    ```", "```py\n    > fit\n     [1] 1 1 2 1 2 1 2 2 1 1 1 2 2 1 1 1 2 1 2 3 4 3 4 3 3 4 4 3 4\n    [30] 4 4 3 3 3 4 4 3 4 4 4 4 4 4 4 3 3 4 4 4 3 4 3 3 4 4 4 3 4\n    [59] 4 3\n\n    ```", "```py\n    > table(fit)\n    fit\n     1  2  3  4 \n    11  8 16 25 \n\n    ```", "```py\n    > plot(hc)\n    > rect.hclust(hc, k = 4 , border=\"red\")\n\n    ```", "```py\n> rect.hclust(hc, k = 4 , which =2, border=\"red\")\n\n```", "```py\n    > dend %>% color_branches(k=4) %>% plot(horiz=TRUE, main = \"Horizontal Dendrogram\")\n\n    ```", "```py\n    > dend %>% rect.dendrogram(k=4,horiz=TRUE)\n\n    ```", "```py\n    > abline(v = heights_per_k.dendrogram(dend)[\"4\"] + .1, lwd = 2, lty = 2, col = \"blue\")\n\n    ```", "```py\n    > set.seed(22)\n    > fit = kmeans(customer, 4)\n    > fit\n    K-means clustering with 4 clusters of sizes 8, 11, 16, 25\n\n    Cluster means:\n     Visit.Time Average.Expense        Sex        Age\n    1  1.3302016       1.0155226 -1.4566845  0.5591307\n    2 -0.7771737      -0.5178412 -1.4566845 -0.4774599\n    3  0.8571173       0.9887331  0.6750489  1.0505015\n    4 -0.6322632      -0.7299063  0.6750489 -0.6411604\n\n    Clustering vector:\n     [1] 2 2 1 2 1 2 1 1 2 2 2 1 1 2 2 2 1 2 1 3 4 3 4 3 3 4 4 3\n    [29] 4 4 4 3 3 3 4 4 3 4 4 4 4 4 4 4 3 3 4 4 4 3 4 3 3 4 4 4\n    [57] 3 4 4 3\n\n    Within cluster sum of squares by cluster:\n    [1]  5.90040 11.97454 22.58236 20.89159\n     (between_SS / total_SS =  74.0 %)\n\n    Available components:\n\n    [1] \"cluster\"      \"centers\"      \"totss\" \n    [4] \"withinss\"     \"tot.withinss\" \"betweenss\" \n    [7] \"size\"         \"iter\"         \"ifault\n\n    ```", "```py\n    > barplot(t(fit$centers), beside = TRUE,xlab=\"cluster\", ylab=\"value\")\n\n    ```", "```py\n    > plot(customer, col = fit$cluster)\n\n    ```", "```py\n    >help(kmeans)\n\n    ```", "```py\n    > install.packages(\"cluster\")\n    > library(cluster)\n\n    ```", "```py\n    > clusplot(customer, fit$cluster, color=TRUE, shade=TRUE)\n\n    ```", "```py\n    > par(mfrow= c(1,2))\n    > clusplot(customer, fit$cluster, color=TRUE, shade=TRUE)\n    > rect(-0.7,-1.7, 2.2,-1.2, border = \"orange\", lwd=2)\n    > clusplot(customer, fit$cluster, color = TRUE, xlim = c(-0.7,2.2), ylim = c(-1.7,-1.2))\n\n    ```", "```py\n> help(cmdscale)\n> help(princomp)\n\n```", "```py\n> mds = cmdscale(dist(customer), k = 2)\n> plot(mds, col = fit$cluster)\n\n```", "```py\n    > install.packages(\"fpc\")\n    > library(fpc)\n\n    ```", "```py\n    > single_c =  hclust(dist(customer), method=\"single\")\n    > hc_single = cutree(single_c, k = 4)\n\n    ```", "```py\n    > complete_c =  hclust(dist(customer), method=\"complete\")\n    > hc_complete =  cutree(complete_c, k = 4)\n\n    ```", "```py\n    > set.seed(22)\n    > km = kmeans(customer, 4)\n\n    ```", "```py\n    > cs = cluster.stats(dist(customer), km$cluster)\n\n    ```", "```py\n    > cs[c(\"within.cluster.ss\",\"avg.silwidth\")]\n    $within.cluster.ss\n    [1] 61.3489\n\n    $avg.silwidth\n    [1] 0.4640587\n\n    ```", "```py\n    > sapply(list(kmeans = km$cluster, hc_single = hc_single, hc_complete = hc_complete), function(c) cluster.stats(dist(customer), c)[c(\"within.cluster.ss\",\"avg.silwidth\")])\n     kmeans    hc_single hc_complete\n    within.cluster.ss 61.3489   136.0092  65.94076\n    avg.silwidth      0.4640587 0.2481926 0.4255961\n\n    ```", "```py\n    > set.seed(22)\n    > km = kmeans(customer, 4)\n    > km$withinss\n    [1]  5.90040 11.97454 22.58236 20.89159\n    > km$betweenss\n    [1] 174.6511\n\n    ```", "```py\n    > set.seed(22)\n    > km = kmeans(customer, 4)\n\n    ```", "```py\n    > kms = silhouette(km$cluster,dist(customer))\n    > summary(kms)\n    Silhouette of 60 units in 4 clusters from silhouette.default(x = km$cluster, dist = dist(customer)) :\n     Cluster sizes and average silhouette widths:\n     8        11        16        25 \n    0.5464597 0.4080823 0.3794910 0.5164434 \n    Individual silhouette widths:\n     Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n     0.1931  0.4030  0.4890  0.4641  0.5422  0.6333 \n\n    ```", "```py\n    > plot(kms)\n\n    ```", "```py\n    > nk = 2:10\n    > set.seed(22)\n    > WSS = sapply(nk, function(k) {\n    +     kmeans(customer, centers=k)$tot.withinss\n    + })\n    > WSS\n    [1] 123.49224  88.07028  61.34890  48.76431  47.20813\n    [6]  45.48114  29.58014  28.87519  23.21331\n\n    ```", "```py\n    > plot(nk, WSS, type=\"l\", xlab= \"number of k\", ylab=\"within sum of squares\")\n\n    ```", "```py\n    > SW = sapply(nk, function(k) {\n    +   cluster.stats(dist(customer), kmeans(customer, centers=k)$cluster)$avg.silwidth\n    + })\n    > SW\n    [1] 0.4203896 0.4278904 0.4640587 0.4308448 0.3481157\n    [6] 0.3320245 0.4396910 0.3417403 0.4070539\n\n    ```", "```py\n    > plot(nk, SW, type=\"l\", xlab=\"number of clusers\", ylab=\"average silhouette width\")\n\n    ```", "```py\n    > nk[which.max(SW)]\n    [1] 4\n\n    ```", "```py\n    > install.packages(\"mlbench\")\n    > library(mlbench)\n    > install.packages(\"fpc\")\n    > library(fpc)\n\n    ```", "```py\n    > set.seed(2)\n    > p = mlbench.cassini(500)\n    > plot(p$x)\n\n    ```", "```py\n    > ds = dbscan(dist(p$x),0.2, 2, countmode=NULL, method=\"dist\")\n    > ds\n    dbscan Pts=500 MinPts=2 eps=0.2\n     1   2   3\n    seed  200 200 100\n    total 200 200 100\n\n    ```", "```py\n    > plot(ds, p$x)\n\n    ```", "```py\n    > y = matrix(0,nrow=3,ncol=2)\n    > y[1,] = c(0,0)\n    > y[2,] = c(0,-1.5)\n    > y[3,] = c(1,1)\n    > y\n     [,1] [,2]\n    [1,]    0  0.0\n    [2,]    0 -1.5\n    [3,]    1  1.0\n\n    ```", "```py\n    > predict(ds, p$x, y)\n    [1] 3 1 2\n\n    ```", "```py\n    > help(plotcluster)\n\n    ```", "```py\n    > install.packages(\"mclust\")\n    > library(mclust)\n\n    ```", "```py\n    > mb = Mclust(customer)\n    > plot(mb)\n\n    ```", "```py\n    > summary(mb)\n    ----------------------------------------------------\n    Gaussian finite mixture model fitted by EM algorithm \n    ----------------------------------------------------\n\n    Mclust VII (spherical, varying volume) model with 5 components:\n\n     log.likelihood  n df       BIC       ICL\n     -218.6891 60 29 -556.1142 -557.2812\n\n    Clustering table:\n     1  2  3  4  5\n    11  8 17 14 10\n\n    ```", "```py\n    > install.packages(\"seriation\")\n    > library(seriation)\n\n    ```", "```py\n    > dissplot(dist(customer), labels=km$cluster, options=list(main=\"Kmeans Clustering With k=4\"))\n\n    ```", "```py\n    > complete_c =  hclust(dist(customer), method=\"complete\")\n    > hc_complete =  cutree(complete_c, k = 4)\n    > dissplot(dist(customer), labels=hc_complete, options=list(main=\"Hierarchical Clustering\"))\n\n    ```", "```py\n> image(as.matrix(dist(customer)))\n\n```", "```py\n> cd=dist(customer)\n> hc=hclust(cd)\n> cdt=dist(t(customer))\n> hcc=hclust(cdt)\n> heatmap(customer, Rowv=as.dendrogram(hc), Colv=as.dendrogram(hcc))\n\n```", "```py\n    > install.packages(\"png\")\n    > library(png)\n\n    ```", "```py\n    > img2 = readPNG(\"handwriting.png\", TRUE)\n    > img3 = img2[,nrow(img2):1]\n    > b = cbind(as.integer(which(img3 < -1) %% 28), which(img3 < -1) / 28)\n    > plot(b, xlim=c(1,28), ylim=c(1,28))\n\n    ```", "```py\n    > set.seed(18)\n    > fit = kmeans(b, 2)\n    > plot(b, col=fit$cluster)\n    > plot(b, col=fit$cluster,  xlim=c(1,28), ylim=c(1,28))\n\n    ```", "```py\n    > ds = dbscan(b, 2)\n    > ds\n    dbscan Pts=212 MinPts=5 eps=2\n     1   2\n    seed  75 137\n    total 75 137\n    > plot(ds, b,  xlim=c(1,28), ylim=c(1,28))\n\n    ```", "```py\n    > help(package=\"png\")\n\n    ```"]