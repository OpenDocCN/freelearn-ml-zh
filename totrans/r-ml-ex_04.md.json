["```py\ntop_supermarket_transactions.csv file in the same directory from which you run the following code snippet, which is also available in the file named ch3_product contingency matrix.R along with this book.\n```", "```py\n> # reading in the dataset\n> data <- read.csv(\"supermarket_transactions.csv\")\n> \n> # assigning row names to be same as column names\n> # to build the contingency matrix\n> row.names(data) <- data[[1]]\n> data <- subset(data, select = c(-1))\n>\n> ## viewing the contingency matrix\n> cat(\"Products Transactions Contingency Matrix\")\nProducts Transactions Contingency Matrix\n> data\n\n```", "```py\n> ## Analyzing and visualizing the data\n> # Frequency of products bought with milk\n> data['milk', ]\n milk bread butter beer wine diapers\nmilk 10000  8758   5241  300  215     753\n> \n> # Sorting to get top products bought with milk\n> sort(data['milk', ], decreasing = TRUE)\n milk bread butter diapers beer wine\nmilk 10000  8758   5241     753  300  215\n> \n> # Frequency of products bought with bread\n> data['bread', ]\n milk bread butter beer wine diapers\nbread 8758  9562   8865  427  322     353\n> \n> # Sorting to get top products bought with bread\n> sort(data['bread', ], decreasing = TRUE)\n bread butter milk beer diapers wine\nbread  9562   8865 8758  427     353  322\n\n```", "```py\n> # Visualizing the data\n> mosaicplot(as.matrix(data), \n+            color=TRUE, \n+            title(main=\"Products Contingency Mosaic Plot\"),\n+            las=2\n+            )\n\n```", "```py\n## Global Recommendations\ncat(\"Recommendations based on global products contingency matrix\")\nitems <- names(data)\nfor (item in items){\n cat(paste(\"Top 2 recommended items to buy with\", item, \"are: \"))\n item.data <- subset(data[item,], select=names(data)[!names(data) %in% item])\n cat(names(item.data[order(item.data, decreasing = TRUE)][c(1,2)]))\n cat(\"\\n\")\n}\n\n```", "```py\nTop 2 recommended items to buy with milk are: bread butter\nTop 2 recommended items to buy with bread are: butter milk\nTop 2 recommended items to buy with butter are: bread milk\nTop 2 recommended items to buy with beer are: wine diapers\nTop 2 recommended items to buy with wine are: beer butter\nTop 2 recommended items to buy with diapers are: beer milk\n\n```", "```py\n> # loading the required package\n> library(arules)\n> \n> # getting and loading the data\n> data(Groceries)\n> \n> # inspecting the first 3 transactions \n> inspect(Groceries[1:3])\n items \n1 {citrus fruit,semi-finished bread,margarine,ready soups}\n2 {tropical fruit,yogurt,coffee} \n3 {whole milk}\n\n```", "```py\n> # count based product contingency matrix \n> ct <- crossTable(Groceries, measure=\"count\", sort=TRUE)\n> ct[1:5, 1:5]\n\n```", "```py\n> # support based product contingency matrix \n> ct <- crossTable(Groceries, measure=\"support\", sort=TRUE)\n> ct[1:5, 1:5]\n\n```", "```py\n> # lift based product contingency matrix \n> ct <- crossTable(Groceries, measure=\"lift\", sort=TRUE)\n> ct[1:5, 1:5]\n\n```", "```py\n## load library dependencies \nlibrary(dplyr)  # manipulating data frames\nlibrary(gridExtra)  # output clean formatted tables\n\n## Utility function: Appends vectors to a list\nlist.append <- function (mylist, ...){\n mylist <- c(mylist, list(...))\n return(mylist)\n}\n\n```", "```py\n## Step 1: Function to read the dataset into memory from file\nget_transaction_dataset <- function(filename){\n df <- read.csv(filename, header = FALSE)\n dataset <- list()\n for (index in seq(nrow(df))){\n transaction.set <- as.vector(unlist(df[index,]))\n transaction.set <- transaction.set[transaction.set != \"\"]\n dataset <- list.append(dataset, transaction.set)\n }\n return(dataset)\n} \n\n## Step 2: Function to convert dataset into a data frame\nget_item_freq_table <- function(dataset){\n item.freq.table <- unlist(dataset) %>% table %>% data.frame\n return (item.freq.table)\n}\n\n## Step 3: Function to prune items based on minimum frequency\n##         as specified by the user.\n##         Here min freq <- item.min.freq\nprune_item_freq_table <- function(item.freq.table, item.min.freq){\n pruned.item.table <- item.freq.table[item.freq.table$Freq >= \n item.min.freq,]\n return (pruned.item.table)\n}\n\n```", "```py\n## Step 4: Function to get possible itemset combinations where \n##         each itemset has n number of items where n is specified ##         by the user. Here n <- num.items \nget_associated_itemset_combinations <- function(pruned.item.table, \n num.items){\n itemset.associations <- c()\n itemset.association.matrix <- combn(pruned.item.table$., \n num.items)\n for (index in seq(ncol(itemset.association.matrix))){\n itemset.associations <- c(itemset.associations,\n paste(itemset.association.matrix[,index],\n collapse = \", \")\n )\n }\n itemset.associations <- unique(itemset.associations)\n return (itemset.associations)\n}\n\n```", "```py\n## Step 5: Function to build an itemset association matrix where ##         we see a contingency table showing itemset association \n##         occurrence in each transaction of the dataset\nbuild_itemset_association_matrix <- function(dataset, \n itemset.association.labels,\n itemset.combination.nums){ \n itemset.transaction.labels <- sapply(dataset, paste, \n collapse=\", \")\n itemset.associations <- lapply(itemset.association.labels, \n function(itemset){\n unlist(strsplit(itemset, \", \", \n fixed = TRUE)\n )\n }\n )\n # building the itemset association matrix\n association.vector <- c()\n for (itemset.association in itemset.associations){\n association.vector <- c(association.vector,\n unlist(\n lapply(dataset, \n function(dataitem, \n num.items=itemset.combination.nums){ \n m <- match(dataitem, itemset.association)\n m <- length(m[!is.na(m)])\n if (m == num.items){\n 1\n }else{\n NA\n }\n }\n )\n )\n )\n }\n\n itemset.association.matrix <- matrix(association.vector, \n nrow = length(dataset))\n itemset.association.labels <- sapply(itemset.association.labels, \n function(item) {\n paste0('{', paste(item, \n collapse = ', '), '}')\n }\n ) \n\n itemset.transaction.labels <- sapply(dataset, \n function(itemset){\n paste0('{', paste(itemset, \n collapse = ', '), '}')\n }\n )\n colnames(itemset.association.matrix) <- itemset.association.labels\n rownames(itemset.association.matrix) <- itemset.transaction.labels\n\n return (itemset.association.matrix)\n}\n\n```", "```py\n## Step 6: Function to generate total occurrences of each itemset \n##         in the transactional dataset based on data from the \n##         association matrix\nget_frequent_itemset_details <- function(itemset.association.matrix){\n frequent.itemsets.table <- apply(itemset.association.matrix, \n 2, sum, na.rm=TRUE)\n return (frequent.itemsets.table)\n}\n\n```", "```py\n## Step 7: Function containing entire workflow to generate \n##         frequent itemsets\nfrequent.itemsets.generator <- function(data.file.path, \n itemset.combination.nums=2, \n item.min.freq=2, minsup=0.2){\n # get the dataset\n dataset <- get_transaction_dataset(data.file.path)\n\n # convert data into item frequency table\n item.freq.table <- get_item_freq_table(dataset)\n pruned.item.table <- prune_item_freq_table(item.freq.table, \n item.min.freq)\n\n # get itemset associations\n itemset.association.labels <- get_associated_itemset_combinations(pruned.item.table,\n itemset.combination.nums)\n itemset.association.matrix <- build_itemset_association_matrix(dataset, \n itemset.association.labels, \n itemset.combination.nums)\n\n # generate frequent itemsets\n frequent.itemsets.table <- get_frequent_itemset_details(itemset.association.matrix)\n frequent.itemsets.table <- sort(frequent.itemsets.table[frequent.itemsets.table > 0], \n decreasing = TRUE)\n\n frequent.itemsets.names <- names(frequent.itemsets.table)\n frequent.itemsets.frequencies <- as.vector(frequent.itemsets.table)\n frequent.itemsets.support <- round((frequent.itemsets.frequencies * 100) / length(dataset), \n digits=2)\n\n frequent.itemsets <- data.frame(Itemset=frequent.itemsets.names,\n Frequency=frequent.itemsets.frequencies,\n Support=frequent.itemsets.support)\n # apply minimum support cutoff to get frequent itemsets\n minsup.percentage <- minsup * 100\n frequent.itemsets <- subset(frequent.itemsets, \n frequent.itemsets['Support'] >= minsup.percentage)\n frequent.itemsets.support <- sapply(frequent.itemsets.support,\n function(value){\n paste0(value,'%')\n }\n )\n\n # printing to console\n cat(\"\\nItem Association Matrix\\n\")\n print(itemset.association.matrix)\n cat(\"\\n\\n\")\n cat(\"\\nValid Frequent Itemsets with Frequency and Support\\n\")\n print(frequent.itemsets)\n\n # displaying frequent itemsets as a pretty table\n if (names(dev.cur()) != \"null device\"){\n dev.off()\n }\n grid.table(frequent.itemsets)\n}\n\n```", "```py\n> frequent.itemsets.generator(\n data.file.path='shopping_transaction_log.csv', \n itemset.combination.nums=2, item.min.freq=3, minsup=0.2)\n\n```", "```py\n> frequent.itemsets.generator(\n data.file.path='shopping_transaction_log.csv',\n itemset.combination.nums=3, item.min.freq=1, minsup=0.2)\n\n```", "```py\n> ## loading package dependencies\n> library(arules) # apriori algorithm\n> library(arulesViz)  # visualize association rules\n> \n> ## loading dataset\n> data(Groceries)\n\n```", "```py\n> ## exploring the data\n> inspect(Groceries[1:3])\n items \n1 {citrus fruit,semi-finished bread,margarine,ready soups}\n2 {tropical fruit,yogurt,coffee} \n3 {whole milk} \n> # viewing the top ten purchased products \n> sort(itemFrequency(Groceries, type=\"absolute\"), \n+                    decreasing = TRUE)[1:10]\n\n```", "```py\n> # visualizing the top ten purchased products\n> itemFrequencyPlot(Groceries,topN=10,type=\"absolute\")\n\n```", "```py\nvegetables the most!\n```", "```py\n> # normal workflow\n> metric.params <- list(supp=0.001, conf=0.5)\n> rules <- apriori(Groceries, parameter = metric.params)\n> inspect(rules[1:5])\n\n```", "```py\n# pruning duplicate rules\nprune.dup.rules <- function(rules){\n rule.subset.matrix <- is.subset(rules, rules)\n rule.subset.matrix[lower.tri(rule.subset.matrix, diag=T)] <- NA\n dup.rules <- colSums(rule.subset.matrix, na.rm=T) >= 1\n pruned.rules <- rules[!dup.rules]\n return(pruned.rules)\n}\n\n```", "```py\n# sorting rules based on metrics\nrules <- sort(rules, by=\"confidence\", decreasing=TRUE)\nrules <- prune.dup.rules(rules)\ninspect(rules[1:5])\n\n```", "```py\n> rules<-sort(rules, by=\"lift\", decreasing=TRUE)\n> rules <- prune.dup.rules(rules)\n> inspect(rules[1:5])\n\n```", "```py\n> # finding itemsets which lead to buying of an item on RHS\n> metric.params <- list(supp=0.001,conf=0.5, minlen=2)\n> rules<-apriori(data=Groceries, parameter=metric.params, \n+                appearance = list(default=\"lhs\",rhs=\"soda\"),\n+                control = list(verbose=F))\n> rules <- prune.dup.rules(rules)\n> rules<-sort(rules, decreasing=TRUE, by=\"confidence\")\n> inspect(rules[1:5])\n\n```", "```py\n# finding items which are bought when we have an itemset on LHS\nmetric.params <- list(supp=0.001, conf = 0.3, minlen=2)\nrules<-apriori(data=Groceries, parameter=metric.params, \n appearance = list(default=\"rhs\",\n lhs=c(\"yogurt\", \"sugar\")),\n control=list(verbose=F))\n#rules <- prune.dup.rules(rules)\nrules<-sort(rules, decreasing=TRUE,by=\"confidence\")\ninspect(rules[1:5])\n\n```", "```py\n> ## visualizing rules\n> plot(rules, method=\"graph\", interactive=TRUE, shading=TRUE)\n\n```"]