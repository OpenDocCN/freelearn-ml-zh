["```py\n     import numpy as np\n    import pandas as pd\n    ```", "```py\n     rng_ = pd.date_range(\n        \"2024-05-17\", periods=20, freq=\"D\")\n    data = pd.DataFrame({\"date\": rng_})\n    data.head()\n    ```", "```py\n     data[\"year\"] = data[\"date\"].dt.year\n    data.head()\n    ```", "```py\n     data[\"quarter\"] = data[\"date\"].dt.quarter\n    data[[\"date\", \"quarter\"]].head()\n    ```", "```py\n     data[\"semester\"] = np.where(data[\"quarter\"] < 3, 1, 2)\n    ```", "```py\n     data[\"month\"] = data[\"date\"].dt.month\n    data[[\"date\", \"month\"]].head()\n    ```", "```py\n     data[\"week\"] = data[\"date\"].dt.isocalendar().week\n    data[[\"date\", \"week\"]].head()\n    ```", "```py\n     data[\"day_mo\"] = data[\"date\"].dt.day\n    data[[\"date\", \"day_mo\"]].head()\n    ```", "```py\n     data[\"day_week\"] = data[\"date\"].dt.dayofweek\n    data[[\"date\", \"day_mo\", \"day_week\"]].head()\n    ```", "```py\n     data[\"is_weekend\"] = (\n        data[«date»].dt.dayofweek > 4).astype(int)\n    data[[\"date\", \"day_week\", \"is_weekend\"]].head()\n    ```", "```py\n     import numpy as np\n    import pandas as pd\n    ```", "```py\n     rng_ = pd.date_range(\n        \"2024-05-17\", periods=20, freq=\"1h15min10s\")\n    df = pd.DataFrame({\"date\": rng_})\n    df.head()\n    ```", "```py\n     df[\"hour\"] = df[\"date\"].dt.hour\n    df[\"min\"] = df[\"date\"].dt.minute\n    df[\"sec\"] = df[\"date\"].dt.second\n    df.head()\n    ```", "```py\n     df[[\"h\", \"m\", \"s\"]] = pd.DataFrame(\n        [(x.hour, x.minute, x.second) for x in df[\"date\"]]\n    )\n    df.head()\n    ```", "```py\n     df[\"is_morning\"] = np.where(\n        (df[«hour»] < 12) & (df[«hour»] > 6), 1, 0 )\n    df.head()\n    ```", "```py\n     import datetime\n    import numpy as np\n    import pandas as pd\n    ```", "```py\n     date = \"2024-05-17\"\n    rng_hr = pd.date_range(date, periods=20, freq=\"h\")\n    rng_month = pd.date_range(date, periods=20, freq=\"ME\")\n    df = pd.DataFrame(\n        {\"date1\": rng_hr, \"date2\": rng_month})\n    df.head()\n    ```", "```py\n     df[\"elapsed_days\"] = (\n        df[\"date2\"] - df[\"date1\"]).dt.days\n    df.head()\n    ```", "```py\n     df[\"weeks_passed\"] = (\n        (df[«date2»] - df[«date1»]) / np.timedelta64(1, \"W\"))\n    df.head()\n    ```", "```py\n     df[\"diff_seconds\"] = (\n        df[«date2»] - df[«date1»])/np.timedelta64(1, «s»)\n    df[\"diff_minutes\"] = (\n        df[«date2»] - df[«date1»])/ np.timedelta64(1,»m»)\n    df.head()\n    ```", "```py\n     df[\"to_today\"] = (\n        datetime.datetime.today() - df[\"date1\"])\n    df.head()\n    ```", "```py\n     import pandas as pd\n    from feature_engine.datetime import (\n        DatetimeSubtraction\n    )\n    ```", "```py\n     date = \"2024-05-17\"\n    rng_hr = pd.date_range(date, periods=20, freq=\"h\")\n    rng_month = pd.date_range(date, periods=20, freq=\"ME\")\n    df = pd.DataFrame(\n        {\"date1\": rng_hr, \"date2\": rng_month})\n    ```", "```py\n     ds = DatetimeSubtraction(\n        variables=\"date2\",\n        reference=\"date1\",\n        output_unit=\"D\",\n    )\n    ```", "```py\n     dft = ds.fit_transform(df)\n    dft.head()\n    ```", "```py\n     import pandas as pd\n    ```", "```py\n     df = pd.DataFrame()\n    df['time1'] = pd.concat([\n        pd.Series(\n            pd.date_range(\n                start='2024-06-10 09:00',\n                freq='h',\n                periods=3,\n                tz='Europe/Berlin')),\n        pd.Series(\n            pd.date_range(\n                start='2024-09-10 09:00',\n                freq='h',\n                periods=3,\n                tz='US/Central'))\n        ], axis=0)\n    ```", "```py\n     df['time2'] = pd.concat([\n        pd.Series(\n            pd.date_range(\n                start='2024-07-01 09:00',\n                freq='h',\n                periods=3,\n                tz='Europe/Berlin')),\n        pd.Series(\n            pd.date_range(\n                start='2024-08-01 09:00',\n                freq='h',\n                periods=3,\n                tz='US/Central'))\n        ], axis=0)\n    ```", "```py\n     df['time1_utc'] = pd.to_datetime(\n        df['time1'], utc=True)\n    df['time2_utc'] = pd.to_datetime(\n        df['time2'], utc=True)\n    ```", "```py\n     df['elapsed_days'] = (\n        df[‹time2_utc›] - df[‹time1_utc›]). dt.days\n    df['elapsed_days'].head()\n    ```", "```py\n    <st c=\"27127\">0    21</st>\n    <st c=\"27132\">1    21</st>\n    <st c=\"27137\">2    21</st>\n    <st c=\"27142\">0   -40</st>\n    <st c=\"27148\">1   -40</st>\n    <st c=\"27231\">datetime</st> variables to the <st c=\"27257\">London</st> and <st c=\"27268\">Berlin</st> time zones, and then display the resulting variables:\n\n    ```", "```py\n\n    <st c=\"27503\">We see the variables in their</st> <st c=\"27534\">respective time zones in the</st> <st c=\"27563\">following output:</st>\n    ```", "```py\n     import pandas as pd\n    from feature_engine.datetime import DatetimeFeatures\n    ```", "```py\n     rng_ = pd.date_range(\n        '2024-05-17', periods=20, freq='D')\n    data = pd.DataFrame({'date': rng_})\n    ```", "```py\n     dtfs = DatetimeFeatures(\n        variables=None,\n        features_to_extract= \"all\",\n    )\n    ```", "```py\n     dft = dtfs.fit_transform(data)\n    ```", "```py\n     vars_ = [v for v in dft.columns if \"date\" in v]\n    ```", "```py\n<st c=\"31986\">['date_month',</st>\n <st c=\"32001\">'date_quarter',</st>\n <st c=\"32017\">'date_semester',</st>\n <st c=\"32034\">'date_year',</st>\n <st c=\"32047\">'date_week',</st>\n <st c=\"32060\">'date_day_of_week',</st>\n <st c=\"32080\">'date_day_of_month',</st>\n <st c=\"32101\">'date_day_of_year',</st>\n <st c=\"32121\">'date_weekend',</st>\n <st c=\"32137\">'date_month_start',</st>\n <st c=\"32157\">'date_month_end',</st>\n <st c=\"32175\">'date_quarter_start',</st>\n <st c=\"32197\">'date_quarter_end',</st>\n <st c=\"32217\">'date_year_start',</st>\n <st c=\"32236\">'date_year_end',</st>\n <st c=\"32253\">'date_leap_year',</st>\n <st c=\"32271\">'date_days_in_month',</st>\n <st c=\"32293\">'date_hour',</st>\n <st c=\"32306\">'date_minute',</st>\n<st c=\"32396\">dft[vars_].head()</st>. We can’t show the resulting DataFrame in the book because it is too big.\n\t\t\t<st c=\"32487\">Note</st>\n\t\t\t<st c=\"32492\">We can create specific features by passing their names to the</st> `<st c=\"32555\">features_to_extract</st>` <st c=\"32574\">parameter.</st>\n\t\t\t<st c=\"32585\">For example, to extract</st> `<st c=\"32610\">week</st>` <st c=\"32614\">and</st> `<st c=\"32619\">year</st>`<st c=\"32623\">, we set the transformer like this:</st> `<st c=\"32659\">dtfs = DatetimeFeatures(features_to_extract=[\"week\", \"year\"])</st>`<st c=\"32720\">. We can also extract all supported features by setting the</st> `<st c=\"32780\">features_to_extract</st>` <st c=\"32799\">parameter</st> <st c=\"32810\">to</st> `<st c=\"32813\">\"all\"</st>`<st c=\"32818\">.</st>\n\t\t\t`<st c=\"32819\">DatetimeFe</st><st c=\"32830\">atures()</st>` <st c=\"32839\">can also</st> <st c=\"32849\">create features from variables in different time zones.</st> <st c=\"32905\">Let’s learn how to correctly set up the transformer in</st> <st c=\"32960\">this situation.</st>\n\n\t\t\t\t1.  <st c=\"32975\">Let’s create a sample DataFrame with a variable’s values in different</st> <st c=\"33046\">time zones:</st>\n\n    ```", "```py\n\n    <st c=\"33308\">If we</st> <st c=\"33314\">execute</st> `<st c=\"33323\">df</st>`<st c=\"33325\">, we</st> <st c=\"33330\">will se</st><st c=\"33337\">e the DataFrame from</st> *<st c=\"33359\">Step 6</st>*<st c=\"33365\">, as shown in the</st> <st c=\"33383\">following output:</st>\n\n\t\t\t![Figure 6.22 – A DataFrame with a variable’s values in different time zones](img/B22396_06_22.jpg)\n\n\t\t\t<st c=\"33562\">Figure 6.22 – A DataFrame with a variable’s values in different time zones</st>\n\n\t\t\t\t1.  <st c=\"33636\">We’ll</st> <st c=\"33643\">set the transformer to</st> <st c=\"33666\">extract three specific features from this variable after setting it to</st> <st c=\"33737\">the UTC:</st>\n\n    ```", "```py\n\n    \t\t\t\t2.  <st c=\"33858\">Let’s create the</st> <st c=\"33876\">new features:</st>\n\n    ```", "```py\n\n    `<st c=\"33918\">DatetimeFeatures()</st>` <st c=\"33937\">will set all variables into UTC before deriving the</st> <st c=\"33989\">features.</st> <st c=\"34000\">With</st> `<st c=\"34005\">dft.head()</st>`<st c=\"34015\">, we can see the</st> <st c=\"34032\">resulting DataFrame:</st>\n\n\t\t\t![Fig﻿ure 6.23 – A DataFrame with t﻿he original and new variables](img/B22396_06_23.jpg)\n\n\t\t\t<st c=\"34269\">Fig</st><st c=\"34272\">ure 6.23 – A DataFrame with t</st><st c=\"34302\">he original and new variables</st>\n\t\t\t<st c=\"34332\">With that, we’ve</st> <st c=\"34350\">created multiple date</st> <st c=\"34372\">and time-related features in a few lines of code.</st> `<st c=\"34422\">feature-engine</st>` <st c=\"34436\">offers a great alternative to manually creating features per feature with</st> `<st c=\"34511\">pandas</st>`<st c=\"34517\">. In addition,</st> `<st c=\"34532\">DatetimeFeatures()</st>` <st c=\"34550\">can be integrated in</st><st c=\"34571\">to scikit-learn’s</st> `<st c=\"34590\">Pipeline</st>` <st c=\"34598\">and</st> `<st c=\"34603\">GridSearchCV</st>`<st c=\"34615\">, among</st> <st c=\"34623\">other classes.</st>\n\t\t\t<st c=\"34637\">How it works...</st>\n\t\t\t`<st c=\"34653\">DatetimeFeatures()</st>` <st c=\"34672\">extracts several date and time features from</st> `<st c=\"34718\">datetime</st>` <st c=\"34726\">variables automatically by utilizing</st> `<st c=\"34764\">pandas</st>`<st c=\"34770\">’</st> `<st c=\"34773\">dt</st>` <st c=\"34775\">under the hood.</st> <st c=\"34792\">It works with variables whose original data types are</st> `<st c=\"34846\">datetime</st>`<st c=\"34854\">, as well as with object-like and categorical variables, provided that they can be parsed into a</st> `<st c=\"34951\">datetime</st>` <st c=\"34959\">format.</st>\n\t\t\t`<st c=\"34967\">DatetimeFeatures()</st>` <st c=\"34986\">extracts the following features by default:</st> `<st c=\"35031\">month</st>`<st c=\"35036\">,</st> `<st c=\"35038\">year</st>`<st c=\"35042\">,</st> `<st c=\"35044\">day_of_week</st>`<st c=\"35055\">,</st> `<st c=\"35057\">day_of_month</st>`<st c=\"35069\">,</st> `<st c=\"35071\">hour</st>`<st c=\"35075\">,</st> `<st c=\"35077\">minute</st>` <st c=\"35083\">and</st> `<st c=\"35088\">second</st>`<st c=\"35094\">. We can make the transformer return all the features it supports by setting the parameter</st> `<st c=\"35185\">features_to_extract</st>` <st c=\"35204\">to</st> `<st c=\"35208\">all</st>`<st c=\"35211\">. In addition, we can extract a specific subset of features by passing the feature names in a list, as we did in</st> *<st c=\"35324\">Step 7</st>*<st c=\"35330\">.</st>\n\t\t\t`<st c=\"35331\">DatetimeFeatures()</st>` <st c=\"35350\">automatically finds</st> `<st c=\"35371\">datetime</st>` <st c=\"35379\">variables or variables that can be parsed as</st> `<st c=\"35425\">datetime</st>` <st c=\"35433\">in the DataFrame passed to the</st> `<st c=\"35465\">fit()</st>` <st c=\"35470\">method.</st> <st c=\"35479\">To extract features from a selected variable or group of variables, we can pass their name in a list to the</st> `<st c=\"35587\">variables</st>` <st c=\"35596\">parameter when we set up</st> <st c=\"35622\">the transformer.</st>\n\t\t\t<st c=\"35638\">With</st> `<st c=\"35644\">fit()</st>`<st c=\"35649\">,</st> `<st c=\"35651\">Dat</st><st c=\"35654\">etimeFeatures()</st>` <st c=\"35670\">doe</st><st c=\"35674\">s not learn any parameters; instead, it checks that the variables entered by the user are, or can be, parsed into a</st> `<st c=\"35791\">datetime</st>` <st c=\"35799\">format.</st> <st c=\"35808\">If the user does not indicate variable names,</st> `<st c=\"35854\">DatetimeFeatures()</st>` <st c=\"35872\">finds the</st> `<st c=\"35883\">datetime</st>` <st c=\"35891\">variables</st> <st c=\"35902\">automatically.</st> <st c=\"35917\">With</st> `<st c=\"35922\">transform()</st>`<st c=\"35933\">, the</st> <st c=\"35939\">tr</st><st c=\"35941\">ansformer adds the date and time-derived variables to</st> <st c=\"35996\">the DataFrame.</st>\n\n```"]