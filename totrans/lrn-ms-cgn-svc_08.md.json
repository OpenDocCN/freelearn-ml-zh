["```py\n    public MainViewModel()\n    {\n        _webRequest = new WebRequest(\"https://api.labs.cognitive.microsoft.com/academic/v1.0/\", \n        \"API_KEY_HERE\");\n\n        InterpretCommand = new DelegateCommand(Interpret, CanInterpret);\n        EvaluateCommand = new DelegateCommand(Evaluate, CanExecuteCommands);\n        CalculateHistogramCommand = new DelegateCommand (CalculateHistogram,  \n        CanExecuteCommands);\n    }\n```", "```py\n    private async void Interpret(object obj)\n    {\n        var queryString = HttpUtility.ParseQueryString(string.Empty);\n\n        queryString[\"query\"] = InputQuery;\n        queryString[\"complete\"] = \"1\";\n        //queryString[\"count\"] = \"10\";\n        //queryString[\"offset\"] = \"0\";\n        //queryString[\"timeout\"] = \"1000\";\n        //queryString[\"model\"] = \"latest\";\n```", "```py\n    InterpretResponse response = await _webRequest.MakeRequest<object, \n    InterpretResponse>(HttpMethod.Get, $\"interpret?{queryString.ToString()}\");\n\n    if (response == null || response.interpretations.Length == 0)\n        return;\n```", "```py\n    {\n        \"query\": \"papers by jaime\", \"interpretations\": [\n        {\n            \"prob\": 2.429e-006,\n            \"parse\": \"<rule id=\"#GetPapers\"> papers by <attr name=\"academic#AA.AuN\">\n            jaime teevan </attr></rule>\",\n            \"rules\": [\n            {\n                \"name\": \"#GetPapers\",\n                \"output\": {\n                    \"type\": \"query\",\n                    \"value\": \"Composite(AA.AuN=='jaime teevan')\"\n                }\n            }]\n        }]\n    }\n```", "```py\n    ObservableCollection<string> tempList = new ObservableCollection<string>();\n\n    foreach (Interpretation interpretation in response.interpretations)\n    {\n        foreach (Rule rule in interpretation.rules) {\n            tempList.Add(rule.output.value);\n        }\n    }\n\n    AvailableQueryExpressions = tempList;\n    QueryExpression = AvailableQueryExpressions.FirstOrDefault();\n```", "```py\n    private async void Evaluate(object obj)\n    {\n        string queryString = $\"expr={QueryExpression} &\n        attributes=Id,Ti,Y,D,CC,AA.AuN\";\n\n        //queryString += \"&model=latest\";\n        //queryString += \"&count=10\";\n        //queryString += \"&offset=0\";5\n        //queryString += \"&orderby=name:asc\";\n```", "```py\n      EvaluateResponse response = await _webRequest.MakeRequest<object,\n      EvaluateResponse>(HttpMethod.Get, $\"evaluate?{queryString}\");\n\n    if (response == null || response.entities.Length == 0)\n        return;\n```", "```py\n    {\n        \"expr\": \"Composite(AA.AuN=='jaime teevan')\",\n        \"entities\": [\n        {\n            \"prob\": 2.266e-007,\n            \"Ti\": \"personalizing search via automated analysis of interests and \n            activities\",\n            \"Y\": 2005,\n            \"CC\": 372,\n            \"AA\": [\n            {\n                \"AuN\": \"jaime teevan\",\n                \"AuId\": 1968481722\n            },\n            {\n                \"AuN\": \"susan t dumais\",\n                \"AuId\": 676500258\n            },\n            {\n                \"AuN\": \"eric horvitz\",\n                \"AuId\": 1470530979\n            }]\n        }]\n    }\n```", "```py\n    StringBuilder sb = new StringBuilder(); \n    sb.AppendFormat(\"Expression {0} returned {1} entities\\n\\n\", response.expr,    \n    response.entities.Length);\n\n    foreach (Entity entity in response.entities)\n    {\n        sb.AppendFormat(\"Paper title: {0}\\n\\tDate: {1}\\n\", entity.Ti, entity.D);\n\n        sb.Append(\"Authors:\\n\");\n        foreach (AA author in entity.AA)\n        {\n            sb.AppendFormat(\"\\t{0}\\n\", author.AuN);\n        }\n\n        sb.Append(\"\\n\");\n    } \n    Results = sb.ToString();\n```", "```py\n    string queryString = $\"expr={QueryExpression}&attributes=Y,F.FN\";\n\n    //queryString += \"&model=latest\";\n    //queryString += \"&count=10\";\n    //queryString += \"&offset=0\";\n```", "```py\n    HistogramResponse response = await _webRequest.MakeRequest<object, \n    HistogramResponse>(HttpMethod.Get, $\"calchistogram?{queryString}\");\n\n    if (response == null || response.histograms.Length == 0)\n        return;\n```", "```py\n    {\n        \"expr\": \"And(Composite(AA.AuN=='jaime teevan'),Y>2012)\",\n        \"num_entities\": 37,\n        \"histograms\": [\n        {\n            \"attribute\": \"Y\",\n            \"distinct_values\": 3,\n            \"total_count\": 37,\n            \"histogram\": [\n            {\n                \"value\": 2014,\n                \"prob\": 1.275e-07,\n                \"count\": 15\n            },\n            {   \n                \"value\": 2013,\n                \"prob\": 1.184e-07,\n                \"count\": 12\n            },\n            {  \n                \"value\": 2015,\n                \"prob\": 8.279e-08,\n                \"count\": 10\n            }]\n        },\n        {\n            \"attribute\": \"F.FN\",\n            \"distinct_values\": 34,\n            \"total_count\": 53,\n            \"histogram\": [\n            {\n                \"value\": \"crowdsourcing\",\n                \"prob\": 7.218e-08,\n            \"count\": 9\n        },\n        {\n            \"value\": \"information retrieval\",\n            \"prob\": 4.082e-08,\n            \"count\": 4\n        },\n        {\n            \"value\": \"personalization\",\n            \"prob\": 2.384e-08,\n            \"count\": 3\n        },\n        {\n            \"value\": \"mobile search\",\n            \"prob\": 2.119e-08,\n            \"count\": 2\n        }]\n    }] \n}\n```", "```py\n    StringBuilder sb = new StringBuilder();\n\n    sb.AppendFormat(\"Totalt number of matching entities: {0}\\n\",\n    response.num_entities);\n\n    foreach (Histogram histogram in response.histograms)\n    {\n        sb.AppendFormat(\"Attribute: {0}\\n\", histogram.attribute);\n        foreach (HistogramY histogramY in histogram.histogram)\n        {\n            sb.AppendFormat(\"\\tValue '{0}' was found {1} times\\n\", histogramY.value,\n            histogramY.count);\n        }\n\n        sb.Append(\"\\n\");\n    } \n    Results = sb.ToString();\n```", "```py\n    {\"name\":\"Author.Id\", \"type\":\"Int32\", \"operations\":[\"equals\"]}\n```", "```py\nkes.exe build_index Academic.schema Academic.data Academic.index\n```", "```py\n    00:00:00 Input Schema: \\Programs\\KES\\Example\\Academic.schema\n    00:00:00 Input Data: \\Programs\\KES\\Example\\Academic.data\n    00:00:00 Output Index: \\Programs\\KES\\Example\\Academic.index\n    00:00:00 Loading synonym file: Keyword.syn\n    00:00:00 Loaded 3700 synonyms (9.4 ms)\n    00:00:00 Pass 1 started\n    00:00:00 Total number of entities: 1000\n    00:00:00 Sorting entities\n    00:00:00 Pass 1 finished (14.5 ms)\n    00:00:00 Pass 2 started\n    00:00:00 Pass 2 finished (13.3 ms)\n    00:00:00 Processed attribute Title (20.0 ms)\n    00:00:00 Processed attribute Year (0.3 ms)\n    00:00:00 Processed attribute Author.Id (0.5 ms)\n    00:00:00 Processed attribute Author.Name (10.7 ms)\n    00:00:00 Processed attribute Author.Affiliation (2.3 ms)\n    00:00:00 Processed attribute Keyword (20.6 ms)\n    00:00:00 Pass 3 started\n    00:00:00 Pass 3 finished (15.5 ms, 73 page faults)\n    00:00:00 Post-processing started\n    00:00:00 Optimized attribute Title (0.1 ms)\n    00:00:00 Optimized attribute Year (0.0 ms)\n    00:00:00 Optimized attribute Author.Id (0.0 ms)\n    00:00:00 Optimized attribute Author.Name (0.5 ms)\n    00:00:00 Optimized attribute Author.Affiliation (0.2 ms)\n    00:00:00 Optimized attribute Keyword (0.6 ms)\n    00:00:00 Global optimization\n    00:00:00 Post-processing finished (17.2 ms)\n    00:00:00 Finalizing index\n    00:00:00 Total time: 157.6 ms\n    00:00:00 Peak memory usage: 23 MB (commit) + 0 MB (data file) = 23 MB\n```", "```py\nkes.exe build_grammar Academic.xml Academic.grammar\n```", "```py\nInput XML: \\Programs\\KES\\Example\\Academic.xml\nOutput Grammar: \\Programs\\KES\\Example\\Academic.grammar\n```", "```py\nKes.exe host_service Academic.grammar Academic.index -port 8080\n```", "```py\n    public void SetEndpoint(string uri) {\n        _endpoint = uri;\n    }\n```", "```py\n    private string _endpoint;\n    public string Endpoint {\n        get { return _endpoint; }\n        set {\n            _endpoint = value;\n            RaisePropertyChangedEvent(\"Endpoint\");\n            _webRequest?.SetEndpoint(value);\n        }\n    }\n```", "```py\n    Endpoint = \"https://api.projectoxford.ai/academic/v1.0/\";\n    _webRequest = new WebRequest(Endpoint, \"API_KEY_HERE\");\n```", "```py\nkes.exe build_index\nhttp://<account>.blob.core.windows.net/<container>/Academic.schema http://<account>.blob.core.windows.net/<container>/Academic.full.data http://<account>.blob.core.windows.net/<container>/Academic.full.index\n--remote Large\n```", "```py\nkes.exe deploy_service\nhttp://<account>.blob.core.windows.net/<container>/Academic.grammar\nhttp://<account>.blob.core.windows.net/<container>/Academic.index\n<serviceName> large --slot Staging\n```", "```py\n{ \"Answer\": \"Sample response\", \"Score\": \"0\" }\n\n```"]