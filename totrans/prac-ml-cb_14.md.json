["```py\n\n> install.packages(\"feather\")\n> install.packages(\"data.table\")\n> install.packages(\"ggplot2\")\n> install.packages(\"plotly\")\n> install.packages(\"animation\")\n> library(feather)\n> library(data.table)\n> library(ggplot2)\n> library(plotly)\n> library(animation)\n\n```", "```py\n> AggData <- as.data.table(read_feather(\"d:/DT_4_ind\"))\n\n```", "```py\n> str(AggData)\n\n```", "```py\n> head(AggData)\n\n```", "```py\n    > ggplot(data = AggData, aes(x = date, y = value)) +\n+ geom_line() + \n    + facet_grid(type ~ ., scales = \"free_y\") +\n    + theme(panel.border = element_blank(),\n    + panel.background = element_blank(),\n    + panel.grid.minor = element_line(colour = \"grey90\"),\n    + panel.grid.major = element_line(colour = \"green\"),\n    + panel.grid.major.x = element_line(colour = \"red\"),\n    + axis.text = element_text(size = 10),\n    + axis.title = element_text(size = 12, face = \"bold\"),\n    + strip.text = element_text(size = 9, face = \"bold\")) +\n    + labs(title = \"Electricity Consumption - Industry\", x = \"Date\", y = \"Load (kW)\")\n\n```", "```py\n> AggData\n\n```", "```py\n> AggData[, week_num := as.integer(as.factor(AggData[, week]))]\n\n```", "```py\n> AggData\n\n```", "```py\n > n_type <- unique(AggData[, type]) \n\n```", "```py\n > n_type \n\n```", "```py\n > n_date <- unique(AggData[, date]) \n\n```", "```py\n > n_weekdays <- unique(AggData[, week]) \n\n```", "```py\n > period <- 48 \n\n```", "```py\n > data_reg <- AggData[(type == n_type[2] & date %in% n_date[57:70])] \n\n```", "```py\n > data_reg \n\n```", "```py\n    > ggplot(data_reg, aes(date_time, value)) +\n    + geom_line() +\n    + theme(panel.border = element_blank(),\n    + panel.background = element_blank(),\n    + panel.grid.minor = element_line(colour = \"grey90\"),\n    + panel.grid.major = element_line(colour = \"green\"),\n    + panel.grid.major.x = element_line(colour = \"red\"),\n    + axis.text = element_text(size = 10),\n+ axis.title = element_text(size = 12, face = \"bold\")) \n    + labs(title = \"Regression Analysis - Education Buildings\", x = \"Date\", y = \"Load (kW)\")\n\n```", "```py\n > N <- nrow(data_reg) \n\n```", "```py\n > trainset_window <- N / period \n\n```", "```py\n > matrix_train <- data.table(Load = data_reg[, value], Daily = as.factor(rep(1:period, trainset_window)), Weekly = as.factor(data_reg[, week_num])) \n\n```", "```py\n > matrix_train \n\n```", "```py\n > linear_model_1 <- lm(Load ~ 0 + ., data = matrix_train) \n\n```", "```py\n > linear_model_1 \n\n```", "```py\n> summary_1 <- summary(linear_model_1)\n\n```", "```py\n > summary_1 \n\n```", "```py\n> paste(\"R-squared: \", round(summary_1$r.squared, 3), \", p-value of F test: \", 1-pf(summary_1$fstatistic[1], summary_1$fstatistic[2], summary_1$fstatistic[3]))\n\n```", "```py\n > datas <- rbindlist(list(data_reg[, .(value, date_time)], data.table(value = linear_model_1$fitted.values, data_time = data_reg[, date_time]))) \n\n```", "```py\n > datas \n\n```", "```py\n > ggplot(data = datas, aes(date_time, value, group = type, colour = type)) + geom_line(size = 0.8) + theme_bw() + \n + labs(x = \"Time\", y = \"Load (kW)\", title = \"Fit from Multiple Linear Regression\") \n\n```", "```py\n> ggplot(data = data.table(Fitted_values =\nlinear_model_2$fitted.values, Residuals = linear_model_2$residuals),\naes(Fitted_values, Residuals)) + geom_point(size = 1.7)\n+ geom_hline(yintercept = 0, color = \"red\", size = 1) +\n+ labs(title = \"Fitted values vs Residuals\")\n\n```", "```py\n    > ggQQ <- function(lm) {\n    # extracting residuals from the fit\n    + d <- data.frame(std.resid = rstandard(lm))\n    # calculate 1Q, 4Q line\n    + y <- quantile(d$std.resid[!is.na(d$std.resid)], c(0.25, 0.75))\n    # calculate 1Q, 4Q line\n    + x <- qnorm(c(0.25, 0.75))\n    + slope <- diff(y)/diff(x)\n    + int <- y[1L] - slope * x[1L]\n+ \n    + p <- ggplot(data = d, aes(sample = std.resid)) +\n+ stat_qq(shape = 1, size = 3) + \n+ labs(title = \"Normal Q-Q\", \n+ x = \"Theoretical Quantiles\", \n+ y = \"Standardized Residuals\") + \n    + geom_abline(slope = slope, intercept = int, linetype = \"dashed\",\n+ size = 1, col = \"firebrick1\") \n    + return(p)\n    + }\n\n```", "```py\n > ggQQ(linear_model_1) \n\n```", "```py\n> linear_model_2 <- lm(Load ~ 0 + Daily + Weekly + Daily:Weekly, data = matrix_train)\n\n```", "```py\n > linear_model_2 \n\n```", "```py\n> c(Previous = summary(linear_model_1)$r.squared, New = summary(linear_model_2)$r.squared)\n\n```", "```py\n > ggplot(data.table(Residuals = c(linear_model_1$residuals, linear_model_2$residuals), Type = c(rep(\"Multiple Linear Reg - simple\", nrow(data_reg)), rep(\"Multiple Linear Reg with interactions\", nrow(data_reg)))), aes(Type, Residuals, fill = Type)) + geom_boxplot()\n > ggplotly()\n\n```", "```py\n > datas <- rbindlist(list(data_reg[, .(value, date_time)], data.table(value = linear_model_2$fitted.values, data_time = data_reg[, date_time]))) \n\n```", "```py\n > datas \n\n```", "```py\n > datas[, type := rep(c(\"Real\", \"Fitted\"), each = nrow(data_reg))] \n\n```", "```py\n > datas \n\n```", "```py\n > ggplot(data = datas, aes(date_time, value, group = type, colour =\ntype)) + geom_line(size = 0.8) + theme_bw() +\n+ labs(x = \"Time\", y = \"Load (kW)\", title = \"Fit from Multiple Linear\nRegression\")\n\n```", "```py\n > ggplot(data = data.table(Fitted_values = linear_model_2$fitted.values, Residuals = linear_model_2$residuals), aes(Fitted_values, Residuals)) + geom_point(size = 1.7) \n + geom_hline(yintercept = 0, color = \"red\", size = 1) + \n + labs(title = \"Fitted values vs Residuals\") \n\n```", "```py\n > ggQQ(linear_model_2) \n\n```", "```py\n    > predWeekReg <- function(data, set_of_date){\n    + #creating the dataset by dates\n+ data_train <- data[date %in% set_of_date] \n    + N <- nrow(data_train)\n    +\n    + # number of days in the train set\n    + window <- N / period # number of days in the train set\n    +\n    + #1, ..., period, 1, ..., period - daily season periods\n    + #feature \"week_num\"- weekly season\n    + matrix_train <- data.table(Load = data_train[, value],\n    + Daily = as.factor(rep(1:period, window)),\n    + Weekly = as.factor(data_train[, week_num]))\n    +\n    + #creating linear model.\n    + # formula - Load ~ 0 + Daily + Weekly + Daily:Weekly\n    + # dataset - data = matrix_train\n    + lm_m <- lm(Load ~ 0 + Daily + Weekly + Daily:Weekly, data = matrix_train)\n+ \n    + #forecast of one week ahead\n    + pred_week <- predict(lm_m, matrix_train[1:(7*period), -1, with = FALSE])\n    + return(as.vector(pred_week))\n    + }\n\n```", "```py\n > mape <- function(real, pred){\n + return(100 * mean(abs((real - pred)/real)))\n + }\n\n```", "```py\n> n_weeks <- floor(length(n_date)/7) - 2\n\n```", "```py\n> n_weeks\n\n```", "```py\n > lm_pred_weeks_1 <- sapply(0:(n_weeks-1), function(i)\n + predWeekReg(AggData[type == n_type[1]], n_date[((i*7)+1):((i*7)+7*2)]))\n\n```", "```py\n > lm_pred_weeks_2 <- sapply(0:(n_weeks-1), function(i)\n + predWeekReg(AggData[type == n_type[2]], n_date[((i*7)+1):((i*7)+7*2)]))\n\n```", "```py\n > lm_pred_weeks_3 <- sapply(0:(n_weeks-1), function(i)\n + predWeekReg(AggData[type == n_type[3]], n_date[((i*7)+1):((i*7)+7*2)]))\n\n```", "```py\n > lm_pred_weeks_4 <- sapply(0:(n_weeks-1), function(i)\n + predWeekReg(AggData[type == n_type[4]], n_date[((i*7)+1):((i*7)+7*2)]))\n\n```", "```py\n > lm_err_mape_1 <- sapply(0:(n_weeks-1), function(i)\n + mape(AggData[(type == n_type[1] & date %in% n_date[(15+(i*7)):(21+(i*7))]), value],\n + lm_pred_weeks_1[, i+1]))\n\n```", "```py\n> lm_err_mape_1\n\n```", "```py\n > lm_err_mape_2 <- sapply(0:(n_weeks-1), function(i)\n + mape(AggData[(type == n_type[2] & date %in% n_date[(15+(i*7)):(21+(i*7))]), value],\n + lm_pred_weeks_2[, i+1]))\n\n```", "```py\n> lm_err_mape_2\n\n```", "```py\n > lm_err_mape_3 <- sapply(0:(n_weeks-1), function(i)\n + mape(AggData[(type == n_type[3] & date %in% n_date[(15+(i*7)):(21+(i*7))]), value],\n + lm_pred_weeks_3[, i+1]))\n\n```", "```py\n> lm_err_mape_3\n\n```", "```py\n > lm_err_mape_4 <- sapply(0:(n_weeks-1), function(i)\n + mape(AggData[(type == n_type[4] & date %in% n_date[(15+(i*7)):(21+(i*7))]), value],\n + lm_pred_weeks_4[, i+1]))\n\n```", "```py\n> lm_err_mape_4\n\n```", "```py\n    > datas <- data.table(value = c(as.vector(lm_pred_weeks_1),\n AggData[(type == n_type[1]) & (date %in% n_date[-c(1:14,365)]), value]),\n    date_time = c(rep(AggData[-c(1:(14*48), (17473:nrow(AggData))), date_time], 2)),\n    type = c(rep(\"MLR\", nrow(lm_pred_weeks_1)*ncol(lm_pred_weeks_1)),\n    rep(\"Real\", nrow(lm_pred_weeks_1)*ncol(lm_pred_weeks_1))),\n    week = c(rep(1:50, each = 336), rep(1:50, each = 336)))\n\n    > saveGIF({\n    oopt = ani.options(interval = 0.9, nmax = 50)\n    for(i in 1:ani.options(\"nmax\")){\n    print(ggplot(data = datas[week == i], aes(date_time, value, group = type, colour = type)) +\n    geom_line(size = 0.8) +\nscale_y_continuous(limits = c(min(datas[, value]), max(datas[, value]))) + \n    theme(panel.border = element_blank(), panel.background = element_blank(),\n    panel.grid.minor = element_line(colour = \"grey90\"),\n    panel.grid.major = element_line(colour = \"grey90\"),\n    panel.grid.major.x = element_line(colour = \"grey90\"),\n    title = element_text(size = 15),\n    axis.text = element_text(size = 10),\n    axis.title = element_text(size = 12, face = \"bold\")) +\n    labs(x = \"Time\", y = \"Load (kW)\",\n    title = paste(\"Forecast of MLR (\", n_type[1], \"); \", \"week: \", i, \"; MAPE: \",\n    round(lm_err_mape_1[i], 2), \"%\", sep = \"\")))\n    ani.pause()\n    }\n    }, movie.name = \"industry_1.gif\", ani.height = 450, ani.width = 750)\n\n```"]