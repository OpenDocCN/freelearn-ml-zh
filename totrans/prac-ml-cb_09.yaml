- en: Chapter 9. Structured Prediction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Hidden Markov models - EUR and USD
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hidden Markov models for regime detection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **hidden Markov model** (**HMM**) is a very powerful statistical method
    of characterizing the observed data samples of a discrete-time series. Not only
    can it provide an efficient way to build parsimonious parametric models, it can
    also incorporate the dynamic programming principle in its core for a unified pattern
    segmentation and pattern classification of time-varying data sequences. The data
    samples in the time series can be discretely or continuously distributed; they
    can be scalars or vectors. The underlying assumption of the HMM is the the data
    samples can be well characterized as a parametric random process, and the parameters
    of the stochastic process can be estimated in a precise and well-defined framework.
  prefs: []
  type: TYPE_NORMAL
- en: Hidden Markov models - EUR and USD
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The EUR/USD is the most commonly traded pair in the Forex market. Their popularity
    can be attributed to the fact that each currency represents the world's two largest
    economic and trading blocks and many multinational corporations that conduct business
    across the Atlantic.
  prefs: []
  type: TYPE_NORMAL
- en: Price movements for this currency pair are generally related to factors that
    influence the value of either the EUR or the USD. As the world's most liquid currency
    pair, the EUR/USD offers tight spreads and constant liquidity for traders who
    are looking to instantly buy or sell. The combination of stability and volatility
    makes the EUR/USD an excellent pair for beginner and advanced traders. The EUR/USD
    pair offers traders high liquidity and has very tight and competitive spreads.
    The relative strength of the US economy and the European economy, which can be
    tracked through the daily news, generally influence this pair.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to apply the hidden Markov model to find different market regimes,
    and to therefore optimize a trading strategy, we will be using a dataset collected
    on the Euro Dollar dataset.
  prefs: []
  type: TYPE_NORMAL
- en: Step 1 - collecting and describing data
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The dataset titled `EURUSD1d.csv` shall be used. This dataset is available
    in CSV format and called `EURUSD1d.csv`. The dataset is in a standard format.
    There are 1,008 rows of data and five variables. The numeric variables are as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Open`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`High`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Low`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Close`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The non-numeric variable is:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Open Timestamp`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's get into the details.
  prefs: []
  type: TYPE_NORMAL
- en: Step 2 - exploring data
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following packages need to be loaded as the first step:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Version info: Code for this page was tested in R version 3.2.2 (2015-08-14)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s explore the data and understand the relationships among the variables:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll begin by importing the CSV data file named `EURUSD1d.csv`. We will be
    saving the data to the `EuroUSD` data frame as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Printing the `EuroUSD` frame: The `head()` function returns the first part
    of the `EuroUSD` frame. The `EuroUSD` frame is passed as an input parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 2 - exploring data](img/image_09_001.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Printing the summary of the `EuroUSD` data frame: The `summary()` function
    is a multipurpose function. The `summary()` is a generic function that provides
    a summary of the data related to the individual object or data frame. The `EuroUSD`
    data frame is passed as an R object to the `summary()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 2 - exploring data](img/image_09_002.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Exploring the internal structure of the `EuroUSD` data frame: The `str()` function
    displays the internal structure of the data frame. The `EuroUSD` is passed as
    an R object to the `str()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 2 - exploring data](img/image_09_003.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Step 3 - turning data into a time series
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Creating objects of the type character: The `as.character()` function represents
    real and complex numbers to 15 significant digits. The entire `EuroUSD` data frame
    is passed apart from the 1^(st) column:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Manipulating the `Date` data frame to represent calendar dates. The result
    is then stored in the data frame `DateTimeSeries`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Creating tightly coupled data frames. `data.frame()` creates the data frame
    for `EuroUSD[,2:5]`. `row.names = DateTimeSeries` gives the row names for the
    data frame created:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Printing the `TimeSeriesData` frame. The `head()` function returns the first
    part of the `TimeSeriesData` frame. The `TimeSeriesData` frame is passed as an
    input parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 3 - turning data into a time series](img/image_09_004.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The `as.xts()` function converts the `TimeSeriesData` data object to the `xts`
    class without losing any attributes of the `TimeSeriesData` data frame as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Measuring the volatility of a high-low-close series. The `ATR()` function measures
    the average volatility of the high-low-close series of `TimeSeriesData`. `TimeSeriesData[,2:4]`
    indicates the high-low-close of the `TimeSeriesData`. The result is then stored
    in the `ATRindicator` data frame:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Printing the `ATRindicator` frame. The `head()` function returns the first
    part of the `ATRindicator` frame. The `ATRindicator` frame is passed as an input
    parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 3 - turning data into a time series](img/image_09_005.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Measuring the volatility of a high series. `ATRindicator [,2]` indicates the
    high of the `TimeSeriesData`. The result is then stored in the `TrueRange` data
    frame:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Printing the `TrueRange` data frame:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 3 - turning data into a time series](img/image_09_006.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Calculating the difference between the `LogReturns` of close and open values.
    The result is then stored in the `LogReturns` data frame:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Printing the summary of the `LogReturns` data frame. The `summary()` function
    is used to provide a summary of the data related to the individual object or data
    frame. The `LogReturns` data frame is passed as an R object to the `summary()`
    function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 3 - turning data into a time series](img/image_09_007.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Step 4 - building the model
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Creating a data frame for the HMM model. The `data.frame()` function creates
    tightly coupled data frames of variables that share many of the properties of
    matrices:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Removing the data where the indicators are being calculated for the `HMMModel`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Printing the `HMMModel` frame:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 4 - building the model](img/image_09_008.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Naming the columns. The `c()` function combines arguments to form a vector.
    All the arguments passed to the function are combined to form a common type that
    is the type of the returned value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Printing the column''s names:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 4 - building the model](img/image_09_009.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Building a three-state regime and set response distribution to the Gaussian
    state. The `depmix()` function creates the hidden Markov model. The `LogReturns~1`,
    `TrueRange~1` represents the response to be modeled. `data = HMMModel` represents
    the data frame to interpret the variables in response, while `nstates=3` is the
    number of states:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Fitting the HMM model to the defined dataset. The `fit()` function optimizes
    the parameters of the HMM model, subject to linear inequality. HMM is an object
    of class HMM, while `verbose = FALSE` depicts that the information should not
    be displayed on screen. The optimized parameters are stored in object `HMMfit`
    of class `depmix`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '![Step 4 - building the model](img/image_09_010.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Comparing the log likelihood and AIC and BIC values. The `print()` function
    prints the arguments for `HMMfit`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 4 - building the model](img/image_09_011.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Printing the summary of the `LogReturns` data frame. The `summary()` function
    is used to provide a summary of the data related to the individual object or data
    frame. The `LogReturns` data frame is passed as an R object to the `summary()`
    function:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The result is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 4 - building the model](img/image_09_012.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Finding the posterior for each of the state of datasets. The result is stored
    in `HMMstate`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Printing the `HMMstate` data frame. The probability for each state for every
    day and the class of highest probability is displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 4 - building the model](img/image_09_013.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Step 5 - displaying the results
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The calculated `HMMstate` data frame will be displayed by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Creating the data frame for the HMM model. The `data.frame()` function creates
    tightly coupled data frames of variables that share many of the properties of
    matrices. `DateTimeSeries`, `LogReturns`, and `TrueRange` data frames are passed
    to be tightly coupled. The result is then stored in `DFIndicators`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Creating a data frame as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Plotting the results using `ggplot()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 5 - displaying the results](img/image_09_014.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Hidden Markov models - regime detection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Standard & Poor's 500 Index (S&P 500) is an American Stock market index of 500 stocks.
    It is a leading indicator of US equities and reflects the performance of large-cap companies
    selected by economists. Experts, when determining the 500 stocks, consider factors
    that are included in the index, including market size, liquidity, and industry
    grouping. It is a market value-weighted index and one of the common benchmarks for
    the US stock market. Investment products based on the S&P 500 include index funds
    and exchange-traded funds are available to investors. Investors have a challenge
    replicating the S&P 500 since the portfolio would need stocks of 500 companies
    in ratio to the entire portfolio to replicate the index's market cap methodology.
    For investors it would be easier to purchase one of the S&P 500 investment products
    such as the Vanguard S&P 500 ETF, the SPDR S&P 500 ETF, or the Shares S&P 500
    Index ETF.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to perform hidden Markov models we shall be using a dataset collected
    on the `S&P500` returns set.
  prefs: []
  type: TYPE_NORMAL
- en: Step 1 - collecting and describing data
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The dataset to be used is the `S&P500` returns daily value from 1^(st) January,
    2004 to date. This dataset is freely available on [https://yahoo.com/](https://yahoo.com/)
    from where we shall be downloading the data.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's get into the details.
  prefs: []
  type: TYPE_NORMAL
- en: Step 2 - exploring data
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Load the following packages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Version info: Code for this page was tested in R version 3.3.0 (2016-05-03)'
  prefs: []
  type: TYPE_NORMAL
- en: Each of the preceding libraries needs to be installed.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Let's download the data. We will begin by marking the start date and the end
    date for the time period in which the data is desired.
  prefs: []
  type: TYPE_NORMAL
- en: 'Loading the data using the `getSymbols()` function as follows. The function
    loads data from multiple sources, either local or remote sources. GSPC is the
    character vector that specifies the name of the symbol to be loaded:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '![Step 2 - exploring data](img/image_09_015.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Calculating the log difference between each of the closing prices. The result
    is then saved in the `GSPCDiff` data frame:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Exploring the internal structure of the `GSPCDiff` frame. The `str()` function
    displays the internal structure of the data frame. The `GSPCDiff` is passed as
    an R object to the `str()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 2 - exploring data](img/image_09_016.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Printing the `GSPCDiff` data frame as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 2 - exploring data](img/image_09_017.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Creating the numeric value of the `GSPCDiff` data frame:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Plotting the `GSPCDiff` data frame:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '![Step 2 - exploring data](img/image_09_018.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Step 3 - preparing the model
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Fitting a hidden Markov model with two states to the S&P returns. Creating a
    hidden Markov model for two states.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `depmix()` function creates the hidden Markov Model. The `returns ~ 1`
    represents the response to be modeled. `data=data.frame(returns=returns)` represents
    the data frame to interpret the variables in response, while `nstates = 2` is
    the number of states:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'The results are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 3 - preparing the model](img/image_09_019.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Fitting the HMM model to the defined dataset. The `fit()` function optimizes
    the parameters of the HMM model, subject to linear inequality. `hmm2states` is
    an object of class HMM, while `verbose = FALSE` instructs that the information
    should not be displayed on screen. The optimized parameters are stored in object
    `hmmfit2states` of the `depmix` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: '![Step 3 - preparing the model](img/image_09_020.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Comparing the log likelihood and AIC and BIC values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'The results are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 3 - preparing the model](img/image_09_021.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Finding the posterior for each of the state of datasets. The result is stored
    in `PosteriorProbs`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Printing the `PosteriorProbs` frame. The `head()` function returns the first
    part of the `PosteriorProbs` frame. The `PosteriorProbs` frame is passed as an
    input parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'The results are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 3 - preparing the model](img/image_09_022.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Plotting the two states results. `type=''l''` signifies for line plot:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'The results are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 3 - preparing the model](img/image_09_023.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Plotting the columns of the `PosteriorProbs` data frame:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'The results are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 3 - preparing the model](img/image_09_024.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Creating a hidden Markov model for three states:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'The results are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 3 - preparing the model](img/image_09_025.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Fitting the HMM model to the defined dataset:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: '![Step 3 - preparing the model](img/image_09_026.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Finding the posterior for each of the dataset states:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Printing the `PosteriorProbs` frame:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'The results are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 3 - preparing the model](img/image_09_027.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'The results are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 3 - preparing the model](img/image_09_028.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'The results are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 3 - preparing the model](img/image_09_029.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Creating a hidden Markov model for four states:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'The results are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 3 - preparing the model](img/image_09_030.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Fitting the HMM model to the defined dataset:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: '![Step 3 - preparing the model](img/image_09_031.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Finding the posterior for each of the datasets states:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'The results are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 3 - preparing the model](img/image_09_032.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'The results are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 3 - preparing the model](img/image_09_033.jpg)'
  prefs: []
  type: TYPE_IMG
