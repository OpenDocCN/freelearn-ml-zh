- en: Chapter 9. Structured Prediction
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章 结构化预测
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下食谱：
- en: Hidden Markov models - EUR and USD
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 隐藏马尔可夫模型 - 欧元和美元
- en: Hidden Markov models for regime detection
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于制度检测的隐藏马尔可夫模型
- en: Introduction
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: The **hidden Markov model** (**HMM**) is a very powerful statistical method
    of characterizing the observed data samples of a discrete-time series. Not only
    can it provide an efficient way to build parsimonious parametric models, it can
    also incorporate the dynamic programming principle in its core for a unified pattern
    segmentation and pattern classification of time-varying data sequences. The data
    samples in the time series can be discretely or continuously distributed; they
    can be scalars or vectors. The underlying assumption of the HMM is the the data
    samples can be well characterized as a parametric random process, and the parameters
    of the stochastic process can be estimated in a precise and well-defined framework.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 隐藏马尔可夫模型（**HMM**）是一种非常强大的统计方法，用于表征离散时间序列的观察数据样本。它不仅能够提供一种构建简约参数模型的高效方法，还可以将其核心中的动态规划原理用于统一的时间序列数据序列的模式分割和模式分类。时间序列中的数据样本可以是离散的或连续的；它们可以是标量或向量。HMM的潜在假设是数据样本可以很好地表征为参数随机过程，并且随机过程的参数可以在精确和定义良好的框架中估计。
- en: Hidden Markov models - EUR and USD
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 隐藏马尔可夫模型 - 欧元和美元
- en: The EUR/USD is the most commonly traded pair in the Forex market. Their popularity
    can be attributed to the fact that each currency represents the world's two largest
    economic and trading blocks and many multinational corporations that conduct business
    across the Atlantic.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 欧元/美元（EUR/USD）是外汇市场中最常交易的货币对。它们的流行可以归因于这样一个事实：每种货币都代表着世界上两个最大的经济和贸易集团，以及许多在跨大西洋地区开展业务的跨国公司。
- en: Price movements for this currency pair are generally related to factors that
    influence the value of either the EUR or the USD. As the world's most liquid currency
    pair, the EUR/USD offers tight spreads and constant liquidity for traders who
    are looking to instantly buy or sell. The combination of stability and volatility
    makes the EUR/USD an excellent pair for beginner and advanced traders. The EUR/USD
    pair offers traders high liquidity and has very tight and competitive spreads.
    The relative strength of the US economy and the European economy, which can be
    tracked through the daily news, generally influence this pair.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个货币对的汇率变动通常与影响欧元或美元价值的因素有关。作为世界上最具流动性的货币对，EUR/USD为寻求即时买入或卖出的交易者提供了紧密的价差和持续的流动性。稳定性和波动性的结合使EUR/USD成为初学者和高级交易者的绝佳选择。EUR/USD对为交易者提供了高流动性，并且具有非常紧密和具有竞争力的价差。美国经济和欧洲经济的相对强度，可以通过每日新闻追踪，通常影响这一对。
- en: Getting ready
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In order to apply the hidden Markov model to find different market regimes,
    and to therefore optimize a trading strategy, we will be using a dataset collected
    on the Euro Dollar dataset.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将隐藏马尔可夫模型应用于寻找不同的市场制度，并因此优化交易策略，我们将使用收集在欧元/美元数据集上的数据集。
- en: Step 1 - collecting and describing data
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第1步 - 收集和描述数据
- en: 'The dataset titled `EURUSD1d.csv` shall be used. This dataset is available
    in CSV format and called `EURUSD1d.csv`. The dataset is in a standard format.
    There are 1,008 rows of data and five variables. The numeric variables are as
    follows:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 将使用标题为`EURUSD1d.csv`的数据集。此数据集以CSV格式提供，称为`EURUSD1d.csv`。数据集采用标准格式。有1,008行数据，五个变量。数值变量如下：
- en: '`Open`'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`开盘`'
- en: '`High`'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`高`'
- en: '`Low`'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`低`'
- en: '`Close`'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`收盘价`'
- en: 'The non-numeric variable is:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 非数值变量是：
- en: '`Open Timestamp`'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`开盘时间戳`'
- en: How to do it...
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Let's get into the details.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入了解。
- en: Step 2 - exploring data
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第2步 - 探索数据
- en: 'The following packages need to be loaded as the first step:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 需要在第一步中加载以下包：
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Version info: Code for this page was tested in R version 3.2.2 (2015-08-14)'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 版本信息：本页面的代码在R版本3.2.2（2015-08-14）上进行了测试
- en: 'Let''s explore the data and understand the relationships among the variables:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们探索数据并了解变量之间的关系：
- en: 'We''ll begin by importing the CSV data file named `EURUSD1d.csv`. We will be
    saving the data to the `EuroUSD` data frame as follows:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先导入名为`EURUSD1d.csv`的CSV数据文件。我们将如下将数据保存到`EuroUSD`数据框中：
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Printing the `EuroUSD` frame: The `head()` function returns the first part
    of the `EuroUSD` frame. The `EuroUSD` frame is passed as an input parameter:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 打印`EuroUSD`框架：`head()`函数返回`EuroUSD`框架的第一部分。`EuroUSD`框架作为输入参数传递：
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The result is as follows:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 2 - exploring data](img/image_09_001.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 2 - 探索数据](img/image_09_001.jpg)'
- en: 'Printing the summary of the `EuroUSD` data frame: The `summary()` function
    is a multipurpose function. The `summary()` is a generic function that provides
    a summary of the data related to the individual object or data frame. The `EuroUSD`
    data frame is passed as an R object to the `summary()` function:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 打印 `EuroUSD` 数据框的摘要：`summary()` 函数是一个多功能函数。`summary()` 是一个通用函数，它提供了与单个对象或数据框相关的数据的摘要。`EuroUSD`
    数据框作为 R 对象传递给 `summary()` 函数：
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The result is as follows:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 2 - exploring data](img/image_09_002.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 2 - 探索数据](img/image_09_002.jpg)'
- en: 'Exploring the internal structure of the `EuroUSD` data frame: The `str()` function
    displays the internal structure of the data frame. The `EuroUSD` is passed as
    an R object to the `str()` function:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 探索 `EuroUSD` 数据框的内部结构：`str()` 函数显示数据框的内部结构。`EuroUSD` 作为 R 对象传递给 `str()` 函数：
- en: '[PRE4]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The result is as follows:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 2 - exploring data](img/image_09_003.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 2 - 探索数据](img/image_09_003.jpg)'
- en: Step 3 - turning data into a time series
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第 3 步 - 将数据转换为时间序列
- en: 'Creating objects of the type character: The `as.character()` function represents
    real and complex numbers to 15 significant digits. The entire `EuroUSD` data frame
    is passed apart from the 1^(st) column:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 创建字符类型对象：`as.character()` 函数将实数和复数表示为 15 位有效数字。除了第 1 列之外，整个 `EuroUSD` 数据框被传递：
- en: '[PRE5]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Manipulating the `Date` data frame to represent calendar dates. The result
    is then stored in the data frame `DateTimeSeries`:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 操作 `Date` 数据框以表示日历日期。结果随后存储在数据框 `DateTimeSeries` 中：
- en: '[PRE6]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Creating tightly coupled data frames. `data.frame()` creates the data frame
    for `EuroUSD[,2:5]`. `row.names = DateTimeSeries` gives the row names for the
    data frame created:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 创建紧密耦合的数据框。`data.frame()` 为 `EuroUSD[,2:5]` 创建数据框。`row.names = DateTimeSeries`
    为创建的数据框提供行名：
- en: '[PRE7]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Printing the `TimeSeriesData` frame. The `head()` function returns the first
    part of the `TimeSeriesData` frame. The `TimeSeriesData` frame is passed as an
    input parameter:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 打印 `TimeSeriesData` 数据框。`head()` 函数返回 `TimeSeriesData` 数据框的前部分。`TimeSeriesData`
    数据框作为输入参数传递：
- en: '[PRE8]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The result is as follows:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 3 - turning data into a time series](img/image_09_004.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 3 - 将数据转换为时间序列](img/image_09_004.jpg)'
- en: 'The `as.xts()` function converts the `TimeSeriesData` data object to the `xts`
    class without losing any attributes of the `TimeSeriesData` data frame as follows:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`as.xts()` 函数将 `TimeSeriesData` 数据对象转换为 `xts` 类，而不丢失 `TimeSeriesData` 数据框的任何属性，如下所示：'
- en: '[PRE9]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Measuring the volatility of a high-low-close series. The `ATR()` function measures
    the average volatility of the high-low-close series of `TimeSeriesData`. `TimeSeriesData[,2:4]`
    indicates the high-low-close of the `TimeSeriesData`. The result is then stored
    in the `ATRindicator` data frame:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 测量高低收盘价序列的波动性。`ATR()` 函数测量 `TimeSeriesData` 高低收盘价序列的平均波动性。`TimeSeriesData[,2:4]`
    表示 `TimeSeriesData` 的高低收盘价。结果随后存储在 `ATRindicator` 数据框中：
- en: '[PRE10]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Printing the `ATRindicator` frame. The `head()` function returns the first
    part of the `ATRindicator` frame. The `ATRindicator` frame is passed as an input
    parameter:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 打印 `ATRindicator` 数据框。`head()` 函数返回 `ATRindicator` 数据框的前部分。`ATRindicator` 数据框作为输入参数传递：
- en: '[PRE11]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The result is as follows:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 3 - turning data into a time series](img/image_09_005.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 3 - 将数据转换为时间序列](img/image_09_005.jpg)'
- en: 'Measuring the volatility of a high series. `ATRindicator [,2]` indicates the
    high of the `TimeSeriesData`. The result is then stored in the `TrueRange` data
    frame:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 测量高频率序列的波动性。`ATRindicator [,2]` 表示 `TimeSeriesData` 的高点。结果随后存储在 `TrueRange`
    数据框中：
- en: '[PRE12]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Printing the `TrueRange` data frame:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 打印 `TrueRange` 数据框：
- en: '[PRE13]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The result is as follows:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 3 - turning data into a time series](img/image_09_006.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 3 - 将数据转换为时间序列](img/image_09_006.jpg)'
- en: 'Calculating the difference between the `LogReturns` of close and open values.
    The result is then stored in the `LogReturns` data frame:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 计算收盘价和开盘价的 `LogReturns` 之间的差异。结果随后存储在 `LogReturns` 数据框中：
- en: '[PRE14]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Printing the summary of the `LogReturns` data frame. The `summary()` function
    is used to provide a summary of the data related to the individual object or data
    frame. The `LogReturns` data frame is passed as an R object to the `summary()`
    function:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 打印 `LogReturns` 数据框的摘要。`summary()` 函数用于提供与单个对象或数据框相关的数据的摘要。`LogReturns` 数据框作为
    R 对象传递给 `summary()` 函数：
- en: '[PRE15]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The result is as follows:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 3 - turning data into a time series](img/image_09_007.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 3 - 将数据转换为时间序列](img/image_09_007.jpg)'
- en: Step 4 - building the model
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第 4 步 - 建立模型
- en: 'Creating a data frame for the HMM model. The `data.frame()` function creates
    tightly coupled data frames of variables that share many of the properties of
    matrices:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 创建 HMM 模型的数据框。`data.frame()` 函数创建紧密耦合的数据框，这些数据框具有许多与矩阵相似的属性：
- en: '[PRE16]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Removing the data where the indicators are being calculated for the `HMMModel`:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 删除计算 `HMMModel` 指标的数据：
- en: '[PRE17]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Printing the `HMMModel` frame:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 打印 `HMMModel` 数据框：
- en: '[PRE18]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The result is as follows:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 4 - building the model](img/image_09_008.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 4 - 建立模型](img/image_09_008.jpg)'
- en: 'Naming the columns. The `c()` function combines arguments to form a vector.
    All the arguments passed to the function are combined to form a common type that
    is the type of the returned value:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 命名列。`c()` 函数将参数组合成向量。传递给函数的所有参数组合成返回值的共同类型：
- en: '[PRE19]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Printing the column''s names:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 打印列名：
- en: '[PRE20]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The result is as follows:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 4 - building the model](img/image_09_009.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 4 - 建立模型](img/image_09_009.jpg)'
- en: '[PRE21]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Building a three-state regime and set response distribution to the Gaussian
    state. The `depmix()` function creates the hidden Markov model. The `LogReturns~1`,
    `TrueRange~1` represents the response to be modeled. `data = HMMModel` represents
    the data frame to interpret the variables in response, while `nstates=3` is the
    number of states:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 建立三状态机制并将响应分布设置为高斯状态。`depmix()` 函数创建隐马尔可夫模型。`LogReturns~1`、`TrueRange~1` 代表要建模的响应。`data
    = HMMModel` 代表解释响应变量的数据框，而 `nstates=3` 是状态的数量：
- en: '[PRE22]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Fitting the HMM model to the defined dataset. The `fit()` function optimizes
    the parameters of the HMM model, subject to linear inequality. HMM is an object
    of class HMM, while `verbose = FALSE` depicts that the information should not
    be displayed on screen. The optimized parameters are stored in object `HMMfit`
    of class `depmix`:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 将 HMM 模型拟合到定义的数据集。`fit()` 函数优化 HMM 模型的参数，受线性不等式约束。HMM 是 HMM 类的对象，而 `verbose
    = FALSE` 表示信息不应显示在屏幕上。优化后的参数存储在 `depmix` 类的 `HMMfit` 对象中：
- en: '[PRE23]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '![Step 4 - building the model](img/image_09_010.jpg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 4 - 建立模型](img/image_09_010.jpg)'
- en: 'Comparing the log likelihood and AIC and BIC values. The `print()` function
    prints the arguments for `HMMfit`:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 比较对数似然、AIC 和 BIC 值。`print()` 函数打印 `HMMfit` 的参数：
- en: '[PRE24]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The result is as follows:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 4 - building the model](img/image_09_011.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 4 - 建立模型](img/image_09_011.jpg)'
- en: '[PRE25]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Printing the summary of the `LogReturns` data frame. The `summary()` function
    is used to provide a summary of the data related to the individual object or data
    frame. The `LogReturns` data frame is passed as an R object to the `summary()`
    function:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 打印 `LogReturns` 数据框的摘要。`summary()` 函数用于提供与单个对象或数据框相关的数据摘要。将 `LogReturns` 数据框作为
    R 对象传递给 `summary()` 函数：
- en: 'The result is as follows:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 4 - building the model](img/image_09_012.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 4 - 建立模型](img/image_09_012.jpg)'
- en: 'Finding the posterior for each of the state of datasets. The result is stored
    in `HMMstate`:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 为数据集中的每个状态找到后验概率。结果存储在 `HMMstate` 中：
- en: '[PRE26]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Printing the `HMMstate` data frame. The probability for each state for every
    day and the class of highest probability is displayed:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 打印 `HMMstate` 数据框。显示每一天每个状态的概率以及最高概率的类别：
- en: '[PRE27]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The result is as follows:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 4 - building the model](img/image_09_013.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 4 - 建立模型](img/image_09_013.jpg)'
- en: Step 5 - displaying the results
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第 5 步 - 显示结果
- en: 'The calculated `HMMstate` data frame will be displayed by following these steps:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 按以下步骤显示计算出的 `HMMstate` 数据框：
- en: 'Creating the data frame for the HMM model. The `data.frame()` function creates
    tightly coupled data frames of variables that share many of the properties of
    matrices. `DateTimeSeries`, `LogReturns`, and `TrueRange` data frames are passed
    to be tightly coupled. The result is then stored in `DFIndicators`:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 创建 HMM 模型的数据框。`data.frame()` 函数创建紧密耦合的数据框，这些数据框具有许多与矩阵相似的属性。`DateTimeSeries`、`LogReturns`
    和 `TrueRange` 数据框被传递以紧密耦合。结果随后存储在 `DFIndicators` 中：
- en: '[PRE28]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Creating a data frame as follows:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 创建如下数据框：
- en: '[PRE29]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Plotting the results using `ggplot()`:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `ggplot()` 绘制结果：
- en: '[PRE30]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The result is as follows:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 5 - displaying the results](img/image_09_014.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 5 - 显示结果](img/image_09_014.jpg)'
- en: Hidden Markov models - regime detection
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 隐藏马尔可夫模型 - 机制检测
- en: Standard & Poor's 500 Index (S&P 500) is an American Stock market index of 500 stocks.
    It is a leading indicator of US equities and reflects the performance of large-cap companies
    selected by economists. Experts, when determining the 500 stocks, consider factors
    that are included in the index, including market size, liquidity, and industry
    grouping. It is a market value-weighted index and one of the common benchmarks for
    the US stock market. Investment products based on the S&P 500 include index funds
    and exchange-traded funds are available to investors. Investors have a challenge
    replicating the S&P 500 since the portfolio would need stocks of 500 companies
    in ratio to the entire portfolio to replicate the index's market cap methodology.
    For investors it would be easier to purchase one of the S&P 500 investment products
    such as the Vanguard S&P 500 ETF, the SPDR S&P 500 ETF, or the Shares S&P 500
    Index ETF.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 标准普尔500指数（S&P 500）是美国股票市场500支股票的指数。它是美国股票市场的一个领先指标，反映了经济学家选定的大型公司的表现。在确定500支股票时，专家会考虑包括在指数中的因素，包括市场规模、流动性和行业分组。它是一个市值加权指数，也是美国股市的常见基准之一。基于S&P
    500的投资产品包括指数基金和交易所交易基金，可供投资者购买。由于需要500家公司的股票按整个投资组合的比例来复制指数的市场资本化方法，因此投资者复制S&P
    500具有挑战性。对于投资者来说，购买S&P 500投资产品之一，如先锋S&P 500 ETF、SPDR S&P 500 ETF或S&P 500指数ETF，会更容易一些。
- en: Getting ready
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In order to perform hidden Markov models we shall be using a dataset collected
    on the `S&P500` returns set.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 为了执行隐藏马尔可夫模型，我们将使用收集在 `S&P500` 回报集中的数据集。
- en: Step 1 - collecting and describing data
  id: totrans-121
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第一步 - 收集和描述数据
- en: The dataset to be used is the `S&P500` returns daily value from 1^(st) January,
    2004 to date. This dataset is freely available on [https://yahoo.com/](https://yahoo.com/)
    from where we shall be downloading the data.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用的数据集是从2004年1月1日到现在的 `S&P500` 每日回报值。此数据集在 [https://yahoo.com/](https://yahoo.com/)
    上免费提供，我们将从那里下载数据。
- en: How to do it...
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Let's get into the details.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入了解细节。
- en: Step 2 - exploring data
  id: totrans-125
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第二步 - 探索数据
- en: 'Load the following packages:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 加载以下包：
- en: '[PRE31]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Note
  id: totrans-128
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Version info: Code for this page was tested in R version 3.3.0 (2016-05-03)'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 版本信息：本页面的代码在R版本3.3.0（2016-05-03）上进行了测试
- en: Each of the preceding libraries needs to be installed.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 上述每个库都需要安装。
- en: '[PRE32]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Let's download the data. We will begin by marking the start date and the end
    date for the time period in which the data is desired.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们下载数据。我们首先为所需数据的时间段标记开始日期和结束日期。
- en: 'Loading the data using the `getSymbols()` function as follows. The function
    loads data from multiple sources, either local or remote sources. GSPC is the
    character vector that specifies the name of the symbol to be loaded:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `getSymbols()` 函数按以下方式加载数据。该函数从多个来源加载数据，无论是本地还是远程来源。GSPC是字符向量，指定要加载的符号名称：
- en: '[PRE33]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '![Step 2 - exploring data](img/image_09_015.jpg)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![第二步 - 探索数据](img/image_09_015.jpg)'
- en: 'Calculating the log difference between each of the closing prices. The result
    is then saved in the `GSPCDiff` data frame:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 计算每个收盘价的对数差异。然后将结果保存在 `GSPCDiff` 数据框中：
- en: '[PRE34]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Exploring the internal structure of the `GSPCDiff` frame. The `str()` function
    displays the internal structure of the data frame. The `GSPCDiff` is passed as
    an R object to the `str()` function:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 探索 `GSPCDiff` 框架的内部结构。`str()` 函数显示数据框的内部结构。`GSPCDiff` 作为R对象传递给 `str()` 函数：
- en: '[PRE35]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'The result is as follows:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 2 - exploring data](img/image_09_016.jpg)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![第二步 - 探索数据](img/image_09_016.jpg)'
- en: 'Printing the `GSPCDiff` data frame as follows:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 按以下方式打印 `GSPCDiff` 数据框：
- en: '[PRE36]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'The result is as follows:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 2 - exploring data](img/image_09_017.jpg)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![第二步 - 探索数据](img/image_09_017.jpg)'
- en: 'Creating the numeric value of the `GSPCDiff` data frame:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 创建 `GSPCDiff` 数据框的数值：
- en: '[PRE37]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Plotting the `GSPCDiff` data frame:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 绘制 `GSPCDiff` 数据框：
- en: '[PRE38]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '![Step 2 - exploring data](img/image_09_018.jpg)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![第二步 - 探索数据](img/image_09_018.jpg)'
- en: Step 3 - preparing the model
  id: totrans-151
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第三步 - 准备模型
- en: Fitting a hidden Markov model with two states to the S&P returns. Creating a
    hidden Markov model for two states.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 将具有两个状态的隐藏马尔可夫模型拟合到S&P回报。为两个状态创建隐藏马尔可夫模型。
- en: 'The `depmix()` function creates the hidden Markov Model. The `returns ~ 1`
    represents the response to be modeled. `data=data.frame(returns=returns)` represents
    the data frame to interpret the variables in response, while `nstates = 2` is
    the number of states:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '`depmix()` 函数创建隐藏马尔可夫模型。`returns ~ 1` 表示要建模的响应。`data=data.frame(returns=returns)`
    表示数据框，用于解释响应中的变量，而 `nstates = 2` 是状态的数量：'
- en: '[PRE39]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'The results are as follows:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 3 - preparing the model](img/image_09_019.jpg)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![步骤3 - 准备模型](img/image_09_019.jpg)'
- en: 'Fitting the HMM model to the defined dataset. The `fit()` function optimizes
    the parameters of the HMM model, subject to linear inequality. `hmm2states` is
    an object of class HMM, while `verbose = FALSE` instructs that the information
    should not be displayed on screen. The optimized parameters are stored in object
    `hmmfit2states` of the `depmix` class:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 将HMM模型拟合到定义的数据集。`fit()`函数优化HMM模型的参数，受线性不等式约束。`hmm2states`是HMM类的一个对象，而`verbose
    = FALSE`指示信息不应显示在屏幕上。优化后的参数存储在`depmix`类的`hmmfit2states`对象中：
- en: '[PRE40]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '![Step 3 - preparing the model](img/image_09_020.jpg)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![步骤3 - 准备模型](img/image_09_020.jpg)'
- en: 'Comparing the log likelihood and AIC and BIC values:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 比较对数似然、AIC和BIC值：
- en: '[PRE41]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'The results are as follows:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 3 - preparing the model](img/image_09_021.jpg)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![步骤3 - 准备模型](img/image_09_021.jpg)'
- en: 'Finding the posterior for each of the state of datasets. The result is stored
    in `PosteriorProbs`:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 为数据集的每个状态找到后验概率。结果存储在`PosteriorProbs`中：
- en: '[PRE42]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Printing the `PosteriorProbs` frame. The `head()` function returns the first
    part of the `PosteriorProbs` frame. The `PosteriorProbs` frame is passed as an
    input parameter:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 打印`PosteriorProbs`框架。`head()`函数返回`PosteriorProbs`框架的第一部分。`PosteriorProbs`框架作为输入参数传递：
- en: '[PRE43]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'The results are as follows:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 3 - preparing the model](img/image_09_022.jpg)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
  zh: '![步骤3 - 准备模型](img/image_09_022.jpg)'
- en: 'Plotting the two states results. `type=''l''` signifies for line plot:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 绘制两个状态的结果。`type='l'`表示为线图：
- en: '[PRE44]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'The results are as follows:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 3 - preparing the model](img/image_09_023.jpg)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
  zh: '![步骤3 - 准备模型](img/image_09_023.jpg)'
- en: 'Plotting the columns of the `PosteriorProbs` data frame:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 绘制`PosteriorProbs`数据框的列：
- en: '[PRE45]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'The results are as follows:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 3 - preparing the model](img/image_09_024.jpg)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
  zh: '![步骤3 - 准备模型](img/image_09_024.jpg)'
- en: 'Creating a hidden Markov model for three states:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 创建三个状态的秘密马尔可夫模型：
- en: '[PRE46]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'The results are as follows:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 3 - preparing the model](img/image_09_025.jpg)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
  zh: '![步骤3 - 准备模型](img/image_09_025.jpg)'
- en: 'Fitting the HMM model to the defined dataset:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 将HMM模型拟合到定义的数据集：
- en: '[PRE47]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '![Step 3 - preparing the model](img/image_09_026.jpg)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
  zh: '![步骤3 - 准备模型](img/image_09_026.jpg)'
- en: 'Finding the posterior for each of the dataset states:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 为数据集的每个状态找到后验概率：
- en: '[PRE48]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Printing the `PosteriorProbs` frame:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 打印`PosteriorProbs`框架：
- en: '[PRE49]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'The results are as follows:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 3 - preparing the model](img/image_09_027.jpg)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![步骤3 - 准备模型](img/image_09_027.jpg)'
- en: '[PRE50]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'The results are as follows:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 3 - preparing the model](img/image_09_028.jpg)'
  id: totrans-193
  prefs: []
  type: TYPE_IMG
  zh: '![步骤3 - 准备模型](img/image_09_028.jpg)'
- en: '[PRE51]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'The results are as follows:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 3 - preparing the model](img/image_09_029.jpg)'
  id: totrans-196
  prefs: []
  type: TYPE_IMG
  zh: '![步骤3 - 准备模型](img/image_09_029.jpg)'
- en: 'Creating a hidden Markov model for four states:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 创建四个状态的秘密马尔可夫模型：
- en: '[PRE52]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'The results are as follows:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 3 - preparing the model](img/image_09_030.jpg)'
  id: totrans-200
  prefs: []
  type: TYPE_IMG
  zh: '![步骤3 - 准备模型](img/image_09_030.jpg)'
- en: 'Fitting the HMM model to the defined dataset:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 将HMM模型拟合到定义的数据集：
- en: '[PRE53]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '![Step 3 - preparing the model](img/image_09_031.jpg)'
  id: totrans-203
  prefs: []
  type: TYPE_IMG
  zh: '![步骤3 - 准备模型](img/image_09_031.jpg)'
- en: 'Finding the posterior for each of the datasets states:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 为数据集的每个状态找到后验概率：
- en: '[PRE54]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'The results are as follows:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 3 - preparing the model](img/image_09_032.jpg)'
  id: totrans-207
  prefs: []
  type: TYPE_IMG
  zh: '![步骤3 - 准备模型](img/image_09_032.jpg)'
- en: '[PRE55]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'The results are as follows:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Step 3 - preparing the model](img/image_09_033.jpg)'
  id: totrans-210
  prefs: []
  type: TYPE_IMG
  zh: '![步骤3 - 准备模型](img/image_09_033.jpg)'
