["```py\n> b <- cov(launch$temperature, launch$distress_ct) /\n         var(launch$temperature)\n> b \n```", "```py\n[1] -0.04753968 \n```", "```py\n> a <- mean(launch$distress_ct) - b * mean(launch$temperature)\n> a \n```", "```py\n[1] 3.698413 \n```", "```py\n> r <- cov(launch$temperature, launch$distress_ct) /\n         (sd(launch$temperature) * sd(launch$distress_ct))\n> r \n```", "```py\n[1] -0.5111264 \n```", "```py\n> cor(launch$temperature, launch$distress_ct) \n```", "```py\n[1] -0.5111264 \n```", "```py\n> reg <- function(y, x) {\n    x <- as.matrix(x)\n    x <- cbind(Intercept = 1, x)\n    b <- solve(t(x) %*% x) %*% t(x) %*% y\n    colnames(b) <- \"estimate\"\n    print(b)\n  } \n```", "```py\n> str(launch) \n```", "```py\n'data.frame':    23 obs. of  4 variables:\n $ distress_ct         : int  0 1 0 0 0 0 0 0 1 1 ...\n $ temperature         : int  66 70 69 68 67 72 73 70 57 63 ...\n $ field_check_pressure: int  50 50 50 50 50 50 100 100 200 200 ...\n $ flight_num          : int  1 2 3 4 5 6 7 8 9 10 ... \n```", "```py\n> reg(y = launch$distress_ct, x = launch[2]) \n```", "```py\n estimate\nIntercept    3.69841270\ntemperature -0.04753968 \n```", "```py\n> reg(y = launch$distress_ct, x = launch[2:4]) \n```", "```py\n estimate\nIntercept             3.527093383\ntemperature          -0.051385940\nfield_check_pressure  0.001757009\nflight_num            0.014292843 \n```", "```py\n> insurance <- read.csv(\"insurance.csv\", stringsAsFactors = TRUE) \n```", "```py\n> str(insurance) \n```", "```py\n'data.frame':    20000 obs. of  11 variables:\n $ age                : int  19 30 39 64 33 27 62 39 67 38 ...\n $ geo_area           : Factor w/ 3 levels \"rural\",\"suburban\", ...\n $ vehicle_type       : Factor w/ 4 levels \"car\",\"minivan\", ...\n $ est_value          : int  28811 52603 113870 35228 ...\n $ miles_driven       : int  11700 12811 9784 17400 ...\n $ college_grad_ind   : int  0 1 1 0 0 1 1 0 1 1 ...\n $ speeding_ticket_ind: int  1 0 0 0 0 0 0 0 0 0 ...\n $ hard_braking_ind   : int  1 0 0 0 0 0 0 0 0 0 ...\n $ late_driving_ind   : int  0 0 0 0 0 0 0 0 0 0 ...\n $ clean_driving_ind  : int  0 1 0 1 1 0 1 1 0 1 ...\n $ expenses           : num  0 6311 49684 0 0 ... \n```", "```py\n> summary(insurance$expenses) \n```", "```py\n Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n      0       0       0    1709       0  232797 \n```", "```py\n> hist(insurance$expenses) \n```", "```py\n> table(insurance$geo_area) \n```", "```py\n rural suburban    urban \n    3622     8727     7651 \n```", "```py\n> table(insurance$vehicle_type) \n```", "```py\n car minivan     suv   truck \n   5801     726    9838    3635 \n```", "```py\n> cor(insurance[c(\"age\", \"est_value\", \"miles_driven\", \"expenses\")]) \n```", "```py\n age   est_value miles_driven     expenses\nage           1.000000000 -0.05990552   0.04812638 -0.009121269\nest_value    -0.059905524  1.00000000  -0.01804807  0.088100468\nmiles_driven  0.048126376 -0.01804807   1.00000000  0.062146507\nexpenses     -0.009121269  0.08810047   0.06214651  1.000000000 \n```", "```py\n> pairs(insurance[c(\"age\", \"est_value\", \"miles_driven\",\n                  \"expenses\")], pch = \".\") \n```", "```py\n> library(psych)\n> pairs.panels(insurance[c(\"age\", \"est_value\", \"miles_driven\",\n                           \"expenses\")], pch = \".\") \n```", "```py\n> ins_model <- lm(expenses ~ age + geo_area + vehicle_type +\n                    est_value + miles_driven +\n                    college_grad_ind + speeding_ticket_ind +\n                    hard_braking_ind + late_driving_ind +\n                    clean_driving_ind,\n                  data = insurance) \n```", "```py\n> ins_model <- lm(expenses ~ ., data = insurance) \n```", "```py\n> options(scipen = 999)\n> ins_model \n```", "```py\nCall:\nlm(formula = expenses ~ ., data = insurance)\nCoefficients:\n        (Intercept)                  age     geo_areasuburban  \n        -1154.91486             -1.88603            191.07895  \n      geo_areaurban  vehicle_typeminivan      vehicle_typesuv  \n          169.11426            115.27862            -19.69500  \n  vehicle_typetruck            est_value         miles_driven  \n           21.56836              0.03115              0.11899  \n   college_grad_ind  speeding_ticket_ind     hard_braking_ind  \n          -25.04030            155.82410             11.84522  \n   late_driving_ind    clean_driving_ind  \n          362.48550           -239.04740 \n```", "```py\n> summary(ins_model) \n```", "```py\n> insurance$age2 <- insurance$age^2 \n```", "```py\n> ins_model2 <- lm(expenses ~ . + hard_braking_ind:late_driving_ind,\n                 data = insurance) \n```", "```py\n> summary(ins_model2) \n```", "```py\nCall:\nlm(formula = expenses ~ . hard_barking_ind:late_driving_ind, \n    data = insurance)\nResiduals: \n    Min       1Q   Median       3Q      Max  \n  -6618    -1996    -1491    -1044   231358  \nCoefficients:\n                      Estimate   Std. Error  t value  Pr(>|z|)   \n(Intercept)        -535.038171   457.146614   -1.170   0.2419 \nage                 -33.142400   15.366892    -2.157   0.0310 *\ngeo_areasuburban    178.825158   143.305863    1.248   0.2121 \ngeo_areaurban       132.463265   158.726709    0.835   0.4040 \nvehicle_typeminivan 178.825158   143.305863    1.248   0.2121 \nvehicle_typesuv      -8.006108   118.116633   -0.068   0.9460 \nvehicle_typetruck    26.426396   153.650455    0.172   0.8634 \nest_value             0.031179   0.002496    12.489   <0.000000002 ***\nmiles_driven          0.118748   0.014327     8.289   <0.000000002 ***\ncollege_grad_ind     17.248581   117.398583    0.147   0.8832 \nspeeding_ticket_ind 155.061583   140.143658    1.107   0.2658 \nhard_braking_ind    -12.442358   109.794208   -0.113   0.9098 \nlate_driving_ind    183.329848   284.218859    0.645   0.5189 \nclean driving_ind    -232.843170   111.106714    -2.096   0.0361 \nage2                    0.343165     0.165340     2.076   0.0380 \nhard_braking_ind:     469.079140   461.685886     1.016   0.3096 \n late_driving_ind\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\nResidual standard error: 6995 on 19984 degrees of freedom\nMultiple R-squared: 0.01267,  Adjusted R-squared: 0.01193\nF-statistic: 17.1 on 15 and 19984 DF,\np-value: <0.00000000000000022 \n```", "```py\n> insurance$pred <- predict(ins_model2, insurance) \n```", "```py\n> cor(insurance$pred, insurance$expenses) \n```", "```py\n[1] 0.1125714 \n```", "```py\n> plot(insurance$pred, insurance$expenses)\n> abline(a = 0, b = 1, col = \"red\", lwd = 3, lty = 2) \n```", "```py\n> predict(ins_model2,\n          data.frame(age = 30, age2 = 30^2, geo_area = \"rural\", \n                     vehicle_type = \"truck\", est_value = 25000,\n                     miles_driven = 14000, college_grad_ind = 0,\n                     speeding_ticket_ind = 0, hard_braking_ind = 0,\n                     late_driving_ind = 0, clean_driving_ind = 1)) \n```", "```py\n 1 \n1015.059 \n```", "```py\n> predict(ins_model2,\n          data.frame(age = 30, age2 = 30^2, geo_area = \"rural\", \n                     vehicle_type = \"truck\", est_value = 25000,\n                     miles_driven = 14000, college_grad_ind = 0,\n                     speeding_ticket_ind = 0, hard_braking_ind = 0,\n                     late_driving_ind = 0, clean_driving_ind = 0)) \n```", "```py\n 1 \n1247.903 \n```", "```py\n> predict(ins_model2,\n          data.frame(age = 30, age2 = 30^2, geo_area = \"rural\", \n                     vehicle_type = \"truck\", est_value = 25000,\n                     miles_driven = 14000, college_grad_ind = 0,\n                     speeding_ticket_ind = 0, hard_braking_ind = 0,\n                     late_driving_ind = 0, clean_driving_ind = 0)) \n```", "```py\n 1 \n1247.903 \n```", "```py\n> 2435.384 - 1247.903 \n```", "```py\n[1] 1187.481 \n```", "```py\n> churn_data <- read.csv(\"insurance_churn.csv\") \n```", "```py\n> prop.table(table(churn_data$churn)) \n```", "```py\n 0      1 \n0.8492 0.1508 \n```", "```py\n> churn_model <- glm(churn ~ . -member_id, data = churn_data,\n                     family = binomial(link = \"logit\")) \n```", "```py\n> summary(churn_model) \n```", "```py\nCall:\nglm(formula = churn ~ . - member_id,\n      family = binomial(link = \"logit\"), data = ins_churn)\nDeviance Residuals: \n    Min       1Q   Median       3Q      Max  \n-1.1244  -0.6152  -0.5033  -0.3950   2.4995  \nCoefficients:\n                      Estimate Std. Error z value Pr(>|z|)    \n(Intercept)          -0.488893   0.141666  -3.451 0.000558 ***\nloyalty_years        -0.072284   0.007193 -10.050  < 2e-16 ***\nvehicles_covered     -0.212980   0.055237  -3.856 0.000115 ***\npremium_plan_ind     -0.370574   0.148937  -2.488 0.012842 *  \nmobile_app_user      -0.292273   0.080651  -3.624 0.000290 ***\nhome_auto_bundle     -0.267032   0.093932  -2.843 0.004472 ** \nauto_pay_ind         -0.075698   0.106130  -0.713 0.475687    \nrecent_rate_increase  0.648100   0.102596   6.317 2.67e-10 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n(Dispersion parameter for binomial family taken to be 1)\n    Null deviance: 4240.9  on 4999  degrees of freedom\nResidual deviance: 4059.2  on 4992  degrees of freedom\nAIC: 4075.2\nNumber of Fisher Scoring iterations: 5 \n```", "```py\n> churn_test <- read.csv(\"insurance_churn_test.csv\") \n```", "```py\n> churn_test$churn_prob <- predict(churn_model, churn_test,\n                                   type = \"response\") \n```", "```py\n> summary(churn_test$churn_prob) \n```", "```py\n Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n0.02922 0.09349 0.13489 0.14767 0.18452 0.41604 \n```", "```py\n> churn_order <- order(churn_test$churn_prob, decreasing = TRUE) \n```", "```py\n> head(churn_test[churn_order,\n        c(\"member_id\", \"churn_prob\")], n = 5) \n```", "```py\n member_id churn_prob\n406  29603520  0.4160438\n742  12588881  0.4160438\n390  23228258  0.3985958\n541  86406649  0.3985958\n614  49806111  0.3985958 \n```", "```py\n> tee <- c(1, 1, 1, 2, 2, 3, 4, 5, 5, 6, 6, 7, 7, 7, 7)\n> at1 <- c(1, 1, 1, 2, 2, 3, 4, 5, 5)\n> at2 <- c(6, 6, 7, 7, 7, 7)\n> bt1 <- c(1, 1, 1, 2, 2, 3, 4)\n> bt2 <- c(5, 5, 6, 6, 7, 7, 7, 7)\n> sdr_a <- sd(tee) - (length(at1) / length(tee) * sd(at1) +\n             length(at2) / length(tee) * sd(at2))\n> sdr_b <- sd(tee) - (length(bt1) / length(tee) * sd(bt1) +\n             length(bt2) / length(tee) * sd(bt2)) \n```", "```py\n> sdr_a \n```", "```py\n[1] 1.202815 \n```", "```py\n> sdr_b \n```", "```py\n[1] 1.392751 \n```", "```py\n> wine <- read.csv(\"whitewines.csv\") \n```", "```py\n> str(wine) \n```", "```py\n'data.frame':\t4898 obs. of  12 variables:\n $ fixed.acidity       : num  6.7 5.7 5.9 5.3 6.4 7 7.9 ...\n $ volatile.acidity    : num  0.62 0.22 0.19 0.47 0.29 ...\n $ citric.acid         : num  0.24 0.2 0.26 0.1 0.21 0.41 ...\n $ residual.sugar      : num  1.1 16 7.4 1.3 9.65 0.9 ...\n $ chlorides           : num  0.039 0.044 0.034 0.036 0.041 ...\n $ free.sulfur.dioxide : num  6 41 33 11 36 22 33 17 34 40 ...\n $ total.sulfur.dioxide: num  62 113 123 74 119 95 152 ...\n $ density             : num  0.993 0.999 0.995 0.991 0.993 ...\n $ pH                  : num  3.41 3.22 3.49 3.48 2.99 3.25 ...\n $ sulphates           : num  0.32 0.46 0.42 0.54 0.34 0.43 ...\n $ alcohol             : num  10.4 8.9 10.1 11.2 10.9 ...\n $ quality             : int  5 6 6 4 6 6 6 6 6 7 ... \n```", "```py\n> hist(wine$quality) \n```", "```py\n> wine_train <- wine[1:3750, ]\n> wine_test <- wine[3751:4898, ] \n```", "```py\n> m.rpart <- rpart(quality ~ ., data = wine_train) \n```", "```py\n> m.rpart \n```", "```py\nn= 3750 \nnode), split, n, deviance, yval\n      * denotes terminal node\n 1) root 3750 2945.53200 5.870933  \n   2) alcohol< 10.85 2372 1418.86100 5.604975  \n     4) volatile.acidity>=0.2275 1611  821.30730 5.432030  \n       8) volatile.acidity>=0.3025 688  278.97670 5.255814 *\n       9) volatile.acidity< 0.3025 923  505.04230 5.563380 *\n     5) volatile.acidity< 0.2275 761  447.36400 5.971091 *\n   3) alcohol>=10.85 1378 1070.08200 6.328737  \n     6) free.sulfur.dioxide< 10.5 84   95.55952 5.369048 *\n     7) free.sulfur.dioxide>=10.5 1294  892.13600 6.391036  \n      14) alcohol< 11.76667 629  430.11130 6.173291  \n        28) volatile.acidity>=0.465 11   10.72727 4.545455 *\n        29) volatile.acidity< 0.465 618  389.71680 6.202265 *\n      15) alcohol>=11.76667 665  403.99400 6.596992 * \n```", "```py\n> library(rpart.plot)\n> rpart.plot(m.rpart, digits = 3) \n```", "```py\n> rpart.plot(m.rpart, digits = 4, fallen.leaves = TRUE,\n               type = 3, extra = 101) \n```", "```py\n> p.rpart <- predict(m.rpart, wine_test) \n```", "```py\n> summary(p.rpart) \n```", "```py\n Min. 1st Qu.  Median    Mean 3rd Qu.    Max.\n  4.545   5.563   5.971   5.893   6.202   6.597 \n```", "```py\n> summary(wine_test$quality) \n```", "```py\n Min. 1st Qu.  Median    Mean 3rd Qu.    Max.\n  3.000   5.000   6.000   5.901   6.000   9.000 \n```", "```py\n> cor(p.rpart, wine_test$quality) \n```", "```py\n[1] 0.5369525 \n```", "```py\n> MAE <- function(actual, predicted) {\n    mean(abs(actual - predicted))\n} \n```", "```py\n> MAE(p.rpart, wine_test$quality) \n```", "```py\n[1] 0.5872652 \n```", "```py\n> mean(wine_train$quality) \n```", "```py\n[1] 5.870933 \n```", "```py\n> MAE(5.87, wine_test$quality) \n```", "```py\n[1] 0.6722474 \n```", "```py\n> library(Cubist)\n> m.cubist <- cubist(x = wine_train[-12], y = wine_train$quality) \n```", "```py\n> m.cubist \n```", "```py\nCall:\ncubist.default(x = wine_train[-12], y = wine_train$quality)\nNumber of samples: 3750\nNumber of predictors: 11\nNumber of committees: 1\nNumber of rules: 25 \n```", "```py\n> summary(m.cubist) \n```", "```py\n Rule 1: [21 cases, mean 5.0, range 4 to 6, est err 0.5]\n   if\n        free.sulfur.dioxide > 30\n        total.sulfur.dioxide > 195\n        total.sulfur.dioxide <= 235\n        sulphates > 0.64\n        alcohol > 9.1\n   then\n        outcome = 573.6 + 0.0478 total.sulfur.dioxide\n                  - 573 density - 0.788 alcohol\n                  + 0.186 residual.sugar - 4.73 volatile.acidity \n```", "```py\n> p.cubist <- predict(m.cubist, wine_test) \n```", "```py\n> summary(p.cubist) \n```", "```py\n Min. 1st Qu.  Median    Mean 3rd Qu.    Max.\n  3.677   5.416   5.906   5.848   6.238   7.393 \n```", "```py\n> cor(p.cubist, wine_test$quality) \n```", "```py\n[1] 0.6201015 \n```", "```py\n> MAE(wine_test$quality, p.cubist) \n```", "```py\n[1] 0.5339725 \n```"]