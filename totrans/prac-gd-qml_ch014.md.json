["```py\n\nfrom qiskit_optimization.problems import QuadraticProgram \n\nqp = QuadraticProgram() \n\nqp.binary_var(’x’) \n\nqp.binary_var(’y’) \n\nqp.minimize(linear = {’x’:2,’y’:2}, quadratic = {(’x’,’y’):-3}) \n\nprint(qp.export_as_lp_string())\n\n```", "```py\n\n\\ This file has been generated by DOcplex \n\n\\ ENCODING=ISO-8859-1 \n\n\\Problem name: CPLEX \n\nMinimize \n\n obj: 2 x + 2 y + [ - 6 x*y ]/2 \n\nSubject To \n\nBounds \n\n 0 <= x <= 1 \n\n 0 <= y <= 1 \n\nBinaries \n\n x y \n\nEnd\n\n```", "```py\n\nfrom qiskit_optimization.algorithms import GroverOptimizer \n\nfrom qiskit import Aer \n\nfrom qiskit.utils import algorithm_globals, QuantumInstance \n\nseed = 1234 \n\nalgorithm_globals.random_seed = seed \n\nquantum_instance = QuantumInstance(Aer.get_backend(\"aer_simulator\"), \n\n    shots = 1024, seed_simulator = seed, seed_transpiler=seed) \n\ngrover_optimizer = GroverOptimizer(num_value_qubits = 3, num_iterations=2, \n\n    quantum_instance=quantum_instance)\n\n```", "```py\n\nresults = grover_optimizer.solve(qp) \n\nprint(results)\n\n```", "```py\n\nfval=0.0, x=0.0, y=0.0, status=SUCCESS\n\n```", "```py\n\nqp = QuadraticProgram() \n\nqp.binary_var(’x’) \n\nqp.binary_var(’y’) \n\nqp.binary_var(’z’) \n\nqp.minimize(linear = {’x’:2}, quadratic = {(’x’,’z’):1, (’z’,’y’):-2}) \n\nqp.linear_constraint(linear = {’x’:2, ’y’:-1, ’z’:1}, \n\n    sense =\"<=\", rhs = 2) \n\nprint(qp.export_as_lp_string())\n\n```", "```py\n\n\\ This file has been generated by DOcplex \n\n\\ ENCODING=ISO-8859-1 \n\n\\Problem name: CPLEX \n\nMinimize \n\n obj: 2 x + [ 2 x*z - 4 y*z ]/2 \n\nSubject To \n\n c0: 2 x - y + z <= 2 \n\nBounds \n\n 0 <= x <= 1 \n\n 0 <= y <= 1 \n\n 0 <= z <= 1 \n\nBinaries \n\n x y z \n\nEnd\n\n```", "```py\n\nfrom qiskit_optimization.converters import QuadraticProgramToQubo \n\nqp_to_qubo = QuadraticProgramToQubo() \n\nqubo = qp_to_qubo.convert(qp) \n\nprint(qubo.export_as_lp_string())\n\n```", "```py\n\n\\ This file has been generated by DOcplex \n\n\\ ENCODING=ISO-8859-1 \n\n\\Problem name: CPLEX \n\nMinimize \n\n obj: - 46 x + 24 y - 24 z - 24 c0@int_slack@0 - 48 c0@int_slack@1 + [ 48 x^2 \n\n      - 48 x*y + 50 x*z + 48 x*c0@int_slack@0 + 96 x*c0@int_slack@1 + 12 y^2 \n\n      - 28 y*z - 24 y*c0@int_slack@0 - 48 y*c0@int_slack@1 + 12 z^2 \n\n      + 24 z*c0@int_slack@0 + 48 z*c0@int_slack@1 + 12 c0@int_slack@0^2 \n\n      + 48 c0@int_slack@0*c0@int_slack@1 + 48 c0@int_slack@1^2 ]/2 + 24 \n\nSubject To \n\nBounds \n\n 0 <= x <= 1 \n\n 0 <= y <= 1 \n\n 0 <= z <= 1 \n\n 0 <= c0@int_slack@0 <= 1 \n\n 0 <= c0@int_slack@1 <= 1 \n\nBinaries \n\n x y z c0@int_slack@0 c0@int_slack@1 \n\nEnd\n\n```", "```py\n\ngrover_optimizer = GroverOptimizer(10, \n\n    num_iterations=4, quantum_instance=quantum_instance) \n\nresults = grover_optimizer.solve(qubo) \n\nprint(results)\n\n```", "```py\n\nfval=-2.0, x=0.0, y=1.0, z=1.0, c0@int_slack@0=0.0, c0@int_slack@1=1.0, \n\nstatus=SUCCESS\n\n```", "```py\n\ngrover_optimizer = GroverOptimizer(10, num_iterations=4, \n\n    quantum_instance=quantum_instance) \n\nresults = grover_optimizer.solve(qp) \n\nprint(results)\n\n```", "```py\n\nfval=-2.0, x=0.0, y=1.0, z=1.0, status=SUCCESS\n\n```"]