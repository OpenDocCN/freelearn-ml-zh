["```py\n$ port install sbt\n\n```", "```py\n$ brew install sbt\n\n```", "```py\n$ bin/create_project.sh\n\n```", "```py\n$ cat >> project.plugin.sbt << EOF\naddSbtPlugin(\"org.scalastyle\" %% \"scalastyle-sbt-plugin\" % \"0.8.0\")\nEOF\n\n```", "```py\n$ sbt\n [info] Loading global plugins from /Users/akozlov/.sbt/0.13/plugins\n[info] Set current project to My Graph Project (in build file:/Users/akozlov/Scala/graph/)\n> help\n\n help                                    Displays this help message or prints detailed help on requested commands (run 'help <command>').\nFor example, `sbt package` will build a Java jar, as follows:\n$  sbt package\n[info] Loading global plugins from /Users/akozlov/.sbt/0.13/plugins\n[info] Loading project definition from /Users/akozlov/Scala/graph/project\n[info] Set current project to My Graph Project (in build file:/Users/akozlov/Scala/graph/)\n[info] Updating {file:/Users/akozlov/Scala/graph/}graph...\n[info] Resolving jline#jline;2.12.1 ...\n[info] Done updating.\n$ ls -1 target/scala-2.11/\nclasses\nmy-graph-project_2.11-1.0.jar\n\n```", "```py\nimport scalax.collection.Graph\nimport scalax.collection.edge._\nimport scalax.collection.GraphPredef._\nimport scalax.collection.GraphEdge._\n\nimport scalax.collection.edge.Implicits._\n\nobject InfluenceDiagram extends App {\n  var g = Graph[String, LDiEdge]((\"'Weather'\"~+>\"'Weather Forecast'\")(\"Forecast\"), (\"'Weather Forecast'\"~+>\"'Vacation Activity'\")(\"Decision\"), (\"'Vacation Activity'\"~+>\"'Satisfaction'\")(\"Deterministic\"), (\"'Weather'\"~+>\"'Satisfaction'\")(\"Deterministic\"))\n  println(g.mkString(\";\"))\n  println(g.isDirected)\n  println(g.isAcyclic)\n}\n```", "```py\n[akozlov@Alexanders-MacBook-Pro chapter07(master)]$ sbt\n[info] Loading project definition from /Users/akozlov/Src/Book/ml-in-scala/chapter07/project\n[info] Set current project to Working with Graph Algorithms (in build file:/Users/akozlov/Src/Book/ml-in-scala/chapter07/)\n> run\n[warn] Multiple main classes detected.  Run 'show discoveredMainClasses' to see the list\n\nMultiple main classes detected, select one to run:\n\n [1] org.akozlov.chapter07.ConstranedDAG\n [2] org.akozlov.chapter07.EnronEmail\n [3] org.akozlov.chapter07.InfluenceDiagram\n [4] org.akozlov.chapter07.InfluenceDiagramToJson\n\nEnter number: 3\n\n[info] Running org.akozlov.chapter07.InfluenceDiagram \n'Weather';'Vacation Activity';'Satisfaction';'Weather Forecast';'Weather'~>'Weather Forecast' 'Forecast;'Weather'~>'Satisfaction' 'Deterministic;'Vacation Activity'~>'Satisfaction' 'Deterministic;'Weather Forecast'~>'Vacation Activity' 'Decision\nDirected: true\nAcyclic: true\n'Weather';'Vacation Activity';'Satisfaction';'Recommend to a Friend';'Weather Forecast';'Weather'~>'Weather Forecast' 'Forecast;'Weather'~>'Satisfaction' 'Deterministic;'Vacation Activity'~>'Satisfaction' 'Deterministic;'Satisfaction'~>'Recommend to a Friend' 'Probabilistic;'Weather Forecast'~>'Vacation Activity' 'Decision\nDirected: true\nAcyclic: true\n\n```", "```py\ng += (\"'Satisfaction'\" ~+> \"'Recommend to a Friend'\")(\"Probabilistic\")\n```", "```py\n'Weather';'Vacation Activity';'Satisfaction';'Recommend to a Friend';'Weather Forecast';'Weather'~>'Weather Forecast' 'Forecast;'Weather'~>'Satisfaction' 'Deterministic;'Vacation Activity'~>'Satisfaction' 'Deterministic;'Satisfaction'~>'Recommend to a Friend' 'Probabilistic;'Weather Forecast'~>'Vacation Activity' 'Decision\nDirected: true\nAcyclic: true\n\n```", "```py\nprintln((g get \"'Recommend to a Friend'\").incoming)\n\nSet('Satisfaction'~>'Recommend to a Friend' 'Probabilistic)\n```", "```py\ng += (\"'Satisfaction'\" ~+> \"'Weather'\")(\"Cyclic\")\nprintln(g.mkString(\";\")) println(\"Directed: \" + g.isDirected)\nprintln(\"Acyclic: \" + g.isAcyclic)\n\n'Weather';'Vacation Activity';'Satisfaction';'Recommend to a Friend';'Weather Forecast';'Weather'~>'Weather Forecast' 'Forecast;'Weather'~>'Satisfaction' 'Deterministic;'Vacation Activity'~>'Satisfaction' 'Deterministic;'Satisfaction'~>'Recommend to a Friend' 'Probabilistic;'Satisfaction'~>'Weather' 'Cyclic;'Weather Forecast'~>'Vacation Activity' 'Decision\nDirected: true\nAcyclic: false\n```", "```py\n var n, m = 0; val f = Graph.fill(45){ m = if (m < 9) m + 1 else { n = if (n < 8) n + 1 else 8; n + 1 }; m ~ n }\n\n  println(f.nodes)\n  println(f.edges)\n  println(f)\n\n  println(\"Directed: \" + f.isDirected)\n  println(\"Acyclic: \" + f.isAcyclic)\n\nNodeSet(0, 9, 1, 5, 2, 6, 3, 7, 4, 8)\nEdgeSet(9~0, 9~1, 9~2, 9~3, 9~4, 9~5, 9~6, 9~7, 9~8, 1~0, 5~0, 5~1, 5~2, 5~3, 5~4, 2~0, 2~1, 6~0, 6~1, 6~2, 6~3, 6~4, 6~5, 3~0, 3~1, 3~2, 7~0, 7~1, 7~2, 7~3, 7~4, 7~5, 7~6, 4~0, 4~1, 4~2, 4~3, 8~0, 8~1, 8~2, 8~3, 8~4, 8~5, 8~6, 8~7)\nGraph(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1~0, 2~0, 2~1, 3~0, 3~1, 3~2, 4~0, 4~1, 4~2, 4~3, 5~0, 5~1, 5~2, 5~3, 5~4, 6~0, 6~1, 6~2, 6~3, 6~4, 6~5, 7~0, 7~1, 7~2, 7~3, 7~4, 7~5, 7~6, 8~0, 8~1, 8~2, 8~3, 8~4, 8~5, 8~6, 8~7, 9~0, 9~1, 9~2, 9~3, 9~4, 9~5, 9~6, 9~7, 9~8)\nDirected: false\nAcyclic: false\n```", "```py\npackage org.akozlov.chapter07\n\nimport scalax.collection.GraphPredef._, scalax.collection.GraphEdge._\nimport scalax.collection.constrained.{Config, ConstraintCompanion, Graph => DAG}\nimport scalax.collection.constrained.constraints.{Connected, Acyclic}\n\nobject AcyclicWithSideEffect extends ConstraintCompanion[Acyclic] {\n  def apply [N, E[X] <: EdgeLikeIn[X]] (self: DAG[N,E]) =\n    new Acyclic[N,E] (self) {\n      override def onAdditionRefused(refusedNodes: Iterable[N],\n        refusedEdges: Iterable[E[N]],\n        graph:        DAG[N,E]) = {\n          println(\"Addition refused: \" + \"nodes = \" + refusedNodes + \", edges = \" + refusedEdges)\n          true\n        }\n    }\n}\n\nobject ConnectedWithSideEffect extends ConstraintCompanion[Connected] {\n  def apply [N, E[X] <: EdgeLikeIn[X]] (self: DAG[N,E]) =\n    new Connected[N,E] (self) {\n      override def onSubtractionRefused(refusedNodes: Iterable[DAG[N,E]#NodeT],\n        refusedEdges: Iterable[DAG[N,E]#EdgeT],\n        graph:        DAG[N,E]) = {\n          println(\"Subtraction refused: \" + \"nodes = \" + refusedNodes + \", edges = \" + refusedEdges)\n        true\n      }\n    }\n}\n\nclass CycleException(msg: String) extends IllegalArgumentException(msg)\nobject ConstranedDAG extends App {\n  implicit val conf: Config = ConnectedWithSideEffect && AcyclicWithSideEffect\n  val g = DAG(1~>2, 1~>3, 2~>3, 3~>4) // Graph()\n  println(g ++ List(1~>4, 3~>1))\n  println(g - 2~>3)\n  println(g - 2)\n  println((g + 4~>5) - 3)\n}\n```", "```py\n[akozlov@Alexanders-MacBook-Pro chapter07(master)]$ sbt \"run-main org.akozlov.chapter07.ConstranedDAG\"\n[info] Loading project definition from /Users/akozlov/Src/Book/ml-in-scala/chapter07/project\n[info] Set current project to Working with Graph Algorithms (in build file:/Users/akozlov/Src/Book/ml-in-scala/chapter07/)\n[info] Running org.akozlov.chapter07.ConstranedDAG \nAddition refused: nodes = List(), edges = List(1~>4, 3~>1)\nGraph(1, 2, 3, 4, 1~>2, 1~>3, 2~>3, 3~>4)\nSubtraction refused: nodes = Set(), edges = Set(2~>3)\nGraph(1, 2, 3, 4, 1~>2, 1~>3, 2~>3, 3~>4)\nGraph(1, 3, 4, 1~>3, 3~>4)\nSubtraction refused: nodes = Set(3), edges = Set()\nGraph(1, 2, 3, 4, 5, 1~>2, 1~>3, 2~>3, 3~>4, 4~>5)\n[success] Total time: 1 s, completed May 1, 2016 1:53:42 PM \n\n```", "```py\nobject InfluenceDiagramToJson extends App {\n\n  val g = Graph[String,LDiEdge]((\"'Weather'\" ~+> \"'Weather Forecast'\")(\"Forecast\"), (\"'Weather Forecast'\" ~+> \"'Vacation Activity'\")(\"Decision\"), (\"'Vacation Activity'\" ~+> \"'Satisfaction'\")(\"Deterministic\"), (\"'Weather'\" ~+> \"'Satisfaction'\")(\"Deterministic\"), (\"'Satisfaction'\" ~+> \"'Recommend to a Friend'\")(\"Probabilistic\"))\n\n  import scalax.collection.io.json.descriptor.predefined.{LDi}\n  import scalax.collection.io.json.descriptor.StringNodeDescriptor\n  import scalax.collection.io.json._\n\n  val descriptor = new Descriptor[String](\n    defaultNodeDescriptor = StringNodeDescriptor,\n    defaultEdgeDescriptor = LDi.descriptor[String,String](\"Edge\")\n  )\n\n  val n = g.toJson(descriptor)\n  println(n)\n  import net.liftweb.json._\n  println(Printer.pretty(JsonAST.render(JsonParser.parse(n))))\n}\n```", "```py\n[kozlov@Alexanders-MacBook-Pro chapter07(master)]$ sbt \"run-main org.akozlov.chapter07.InfluenceDiagramToJson\"\n[info] Loading project definition from /Users/akozlov/Src/Book/ml-in-scala/chapter07/project\n[info] Set current project to Working with Graph Algorithms (in build file:/Users/akozlov/Src/Book/ml-in-scala/chapter07/)\n[info] Running org.akozlov.chapter07.InfluenceDiagramToJson \n{\n \"nodes\":[[\"'Recommend to a Friend'\"],[\"'Satisfaction'\"],[\"'Vacation Activity'\"],[\"'Weather Forecast'\"],[\"'Weather'\"]],\n \"edges\":[{\n \"n1\":\"'Weather'\",\n \"n2\":\"'Weather Forecast'\",\n \"label\":\"Forecast\"\n },{\n \"n1\":\"'Vacation Activity'\",\n \"n2\":\"'Satisfaction'\",\n \"label\":\"Deterministic\"\n },{\n \"n1\":\"'Weather'\",\n \"n2\":\"'Satisfaction'\",\n \"label\":\"Deterministic\"\n },{\n \"n1\":\"'Weather Forecast'\",\n \"n2\":\"'Vacation Activity'\",\n \"label\":\"Decision\"\n },{\n \"n1\":\"'Satisfaction'\",\n \"n2\":\"'Recommend to a Friend'\",\n \"label\":\"Probabilistic\"\n }]\n}\n[success] Total time: 1 s, completed May 1, 2016 1:55:30 PM\n\n```", "```py\npackage org.akozlov.chapter07\n\nimport scala.io.Source\n\nimport scala.util.hashing.{MurmurHash3 => Hash}\nimport scala.util.matching.Regex\n\nimport java.util.{Date => javaDateTime}\n\nimport java.io.File\nimport net.liftweb.json._\nimport Extraction._\nimport Serialization.{read, write}\n\nobject EnronEmail {\n\n  val emailRe = \"\"\"[a-zA-Z0-9_.+\\-]+@enron.com\"\"\".r.unanchored\n\n  def emails(s: String) = {\n    for (email <- emailRe findAllIn s) yield email\n  }\n\n  def hash(s: String) = {\n    java.lang.Integer.MAX_VALUE.toLong + Hash.stringHash(s)\n  }\n\n  val messageRe =\n    \"\"\"(?:Message-ID:\\s+)(<[A-Za-z0-9_.+\\-@]+>)(?s)(?:.*?)(?m)\n      |(?:Date:\\s+)(.*?)$(?:.*?)\n      |(?:From:\\s+)([a-zA-Z0-9_.+\\-]+@enron.com)(?:.*?)\n      |(?:Subject: )(.*?)$\"\"\".stripMargin.r.unanchored\n\n  case class Relation(from: String, fromId: Long, to: String, toId: Long, source: String, messageId: String, date: javaDateTime, subject: String)\n\n  implicit val formats = Serialization.formats(NoTypeHints)\n\n  def getFileTree(f: File): Stream[File] =\n    f #:: (if (f.isDirectory) f.listFiles().toStream.flatMap(getFileTree) else Stream.empty)\n\n  def main(args: Array[String]) {\n    getFileTree(new File(args(0))).par.map {\n      file => {\n        \"\\\\.$\".r findFirstIn file.getName match {\n          case Some(x) =>\n          try {\n            val src = Source.fromFile(file, \"us-ascii\")\n            val message = try src.mkString finally src.close()\n            message match {\n              case messageRe(messageId, date, from , subject) =>\n              val fromLower = from.toLowerCase\n              for (to <- emails(message).filter(_ != fromLower).toList.distinct)\n              println(write(Relation(fromLower, hash(fromLower), to, hash(to), file.toString, messageId, new javaDateTime(date), subject)))\n                case _ =>\n            }\n          } catch {\n            case e: Exception => System.err.println(e)\n          }\n          case _ =>\n        }\n      }\n    }\n  }\n}\n```", "```py\n# (mkdir Enron; cd Enron; wget -O - http://www.cs.cmu.edu/~./enron/enron_mail_20150507.tgz | tar xzvf -)\n...\n# sbt --error \"run-main org.akozlov.chapter07.EnronEmail Enron/maildir\" > graph.json\n\n# spark --driver-memory 2g --executor-memory 2g\n...\nscala> val df = sqlContext.read.json(\"graph.json\")\ndf: org.apache.spark.sql.DataFrame = [[date: string, from: string, fromId: bigint, messageId: string, source: string, subject: string, to: string, toId: bigint]\n\n```", "```py\nscala> df.select(\"_corrupt_record\").collect.foreach(println)\n...\n\n```", "```py\nscala> import org.apache.spark._\n...\nscala> import org.apache.spark.graphx._\n...\nscala> import org.apache.spark.rdd.RDD\n...\nscala> val people: RDD[(VertexId, String)] = df.select(\"fromId\", \"from\").unionAll(df.select(\"toId\", \"to\")).na.drop.distinct.map( x => (x.get(0).toString.toLong, x.get(1).toString))\npeople: org.apache.spark.rdd.RDD[(org.apache.spark.graphx.VertexId, String)] = MapPartitionsRDD[146] at map at <console>:28\n\nscala> val relationships = df.select(\"fromId\", \"toId\", \"messageId\", \"subject\").na.drop.distinct.map( x => Edge(x.get(0).toString.toLong, x.get(1).toString.toLong, (x.get(2).toString, x.get(3).toString)))\nrelationships: org.apache.spark.rdd.RDD[org.apache.spark.graphx.Edge[(String, String)]] = MapPartitionsRDD[156] at map at <console>:28\n\nscala> val graph = Graph(people, relationships).cache\ngraph: org.apache.spark.graphx.Graph[String,(String, String)] = org.apache.spark.graphx.impl.GraphImpl@7b59aa7b\n\n```", "```py\nscala> graph.vertices.getNumPartitions\nres1: Int = 200\n\nscala> graph.edges.getNumPartitions\nres2: Int = 200\n\n```", "```py\nscala> val graph = Graph(people.coalesce(6), relationships.coalesce(6))\ngraph: org.apache.spark.graphx.Graph[String,(String, String)] = org.apache.spark.graphx.impl.GraphImpl@5dc7d016\n\nscala> graph.vertices.getNumPartitions\nres10: Int = 6\n\nscala> graph.edges.getNumPartitions\nres11: Int = 6\n\n```", "```py\nscala> graph.cache\nres12: org.apache.spark.graphx.Graph[String,(String, String)] = org.apache.spark.graphx.impl.GraphImpl@5dc7d016\n\n```", "```py\nscala> people.join(graph.inDegrees).sortBy(_._2._2, ascending=false).take(10).foreach(println)\n(268746271,(richard.shapiro@enron.com,18523))\n(1608171805,(steven.kean@enron.com,15867))\n(1578042212,(jeff.dasovich@enron.com,13878))\n(960683221,(tana.jones@enron.com,13717))\n(3784547591,(james.steffes@enron.com,12980))\n(1403062842,(sara.shackleton@enron.com,12082))\n(2319161027,(mark.taylor@enron.com,12018))\n(969899621,(mark.guzman@enron.com,10777))\n(1362498694,(geir.solberg@enron.com,10296))\n(4151996958,(ryan.slinger@enron.com,10160))\n\n```", "```py\nscala> people.join(graph.outDegrees).sortBy(_._2._2, ascending=false).take(10).foreach(println)\n(1578042212,(jeff.dasovich@enron.com,139786))\n(2822677534,(veronica.espinoza@enron.com,106442))\n(3035779314,(pete.davis@enron.com,94666))\n(2346362132,(rhonda.denton@enron.com,90570))\n(861605621,(cheryl.johnson@enron.com,74319))\n(14078526,(susan.mara@enron.com,58797))\n(2058972224,(jae.black@enron.com,58718))\n(871077839,(ginger.dernehl@enron.com,57559))\n(3852770211,(lorna.brennan@enron.com,50106))\n(241175230,(mary.hain@enron.com,40425))\n…\n\n```", "```py\nscala> val groups = org.apache.spark.graphx.lib.ConnectedComponents.run(graph).vertices.map(_._2).distinct.cache\ngroups: org.apache.spark.rdd.RDD[org.apache.spark.graphx.VertexId] = MapPartitionsRDD[2404] at distinct at <console>:34\n\nscala> groups.count\nres106: Long = 18\n\nscala> people.join(groups.map( x => (x, x))).map(x => (x._1, x._2._1)).sortBy(_._1).collect.foreach(println)\n(332133,laura.beneville@enron.com)\n(81833994,gpg.me-q@enron.com)\n(115247730,dl-ga-enron_debtor@enron.com)\n(299810291,gina.peters@enron.com)\n(718200627,techsupport.notices@enron.com)\n(847455579,paul.de@enron.com)\n(919241773,etc.survey@enron.com)\n(1139366119,enron.global.services.-.us@enron.com)\n(1156539970,shelley.ariel@enron.com)\n(1265773423,dl-ga-all_ews_employees@enron.com)\n(1493879606,chairman.ees@enron.com)\n(1511379835,gary.allen.-.safety.specialist@enron.com)\n(2114016426,executive.robert@enron.com)\n(2200225669,ken.board@enron.com)\n(2914568776,ge.americas@enron.com)\n(2934799198,yowman@enron.com)\n(2975592118,tech.notices@enron.com)\n(3678996795,mail.user@enron.com)\n\n```", "```py\nscala> df.filter(\"fromId = 919241773 or toId = 919241773\").select(\"date\",\"from\",\"to\",\"subject\",\"source\").collect.foreach(println)\n[2000-09-19T18:40:00.000Z,survey.test@enron.com,etc.survey@enron.com,NO ACTION REQUIRED - TEST,Enron/maildir/dasovich-j/all_documents/1567.]\n[2000-09-19T18:40:00.000Z,survey.test@enron.com,etc.survey@enron.com,NO ACTION REQUIRED - TEST,Enron/maildir/dasovich-j/notes_inbox/504.]\n\n```", "```py\nscala> val unedges = graph.edges.map(e => if (e.srcId < e.dstId) (e.srcId, e.dstId) else (e.dstId, e.srcId)).map( x => Edge(x._1, x._2, 1)).cache\nunedges: org.apache.spark.rdd.RDD[org.apache.spark.graphx.Edge[Int]] = MapPartitionsRDD[87] at map at <console>:48\n\nscala> val ungraph = Graph(people, unedges).partitionBy(org.apache.spark.graphx.PartitionStrategy.EdgePartition1D, 10).cache\nungraph: org.apache.spark.graphx.Graph[String,Int] = org.apache.spark.graphx.impl.GraphImpl@77274fff\n\nscala> val triangles = org.apache.spark.graphx.lib.TriangleCount.run(ungraph).cache\ntriangles: org.apache.spark.graphx.Graph[Int,Int] = org.apache.spark.graphx.impl.GraphImpl@6aec6da1\n\nscala> people.join(triangles.vertices).map(t => (t._2._2,t._2._1)).sortBy(_._1, ascending=false).take(10).foreach(println)\n(31761,sally.beck@enron.com)\n(24101,louise.kitchen@enron.com)\n(23522,david.forster@enron.com)\n(21694,kenneth.lay@enron.com)\n(20847,john.lavorato@enron.com)\n(18460,david.oxley@enron.com)\n(17951,tammie.schoppe@enron.com)\n(16929,steven.kean@enron.com)\n(16390,tana.jones@enron.com)\n(16197,julie.clyatt@enron.com)\n\n```", "```py\nscala> val components = org.apache.spark.graphx.lib.StronglyConnectedComponents.run(graph, 100).cache\ncomponents: org.apache.spark.graphx.Graph[org.apache.spark.graphx.VertexId,(String, String)] = org.apache.spark.graphx.impl.GraphImpl@55913bc7\n\nscala> components.vertices.map(_._2).distinct.count\nres2: Long = 17980\n\nscala> people.join(components.vertices.map(_._2).distinct.map( x => (x, x))).map(x => (x._1, x._2._1)).sortBy(_._1).collect.foreach(println)\n(332133,laura.beneville@enron.com) \n(466265,medmonds@enron.com)\n(471258,.jane@enron.com)\n(497810,.kimberly@enron.com)\n(507806,aleck.dadson@enron.com)\n(639614,j..bonin@enron.com)\n(896860,imceanotes-hbcamp+40aep+2ecom+40enron@enron.com)\n(1196652,enron.legal@enron.com)\n(1240743,thi.ly@enron.com)\n(1480469,ofdb12a77a.a6162183-on86256988.005b6308@enron.com)\n(1818533,fran.i.mayes@enron.com)\n(2337461,michael.marryott@enron.com)\n(2918577,houston.resolution.center@enron.com)\n\n```", "```py\nscala> val ranks = graph.pageRank(0.001).vertices\nranks: org.apache.spark.graphx.VertexRDD[Double] = VertexRDDImpl[955] at RDD at VertexRDD.scala:57\n\nscala> people.join(ranks).map(t => (t._2._2,t._2._1)).sortBy(_._1, ascending=false).take(10).foreach(println)\n\nscala> val ranks = graph.pageRank(0.001).vertices\nranks: org.apache.spark.graphx.VertexRDD[Double] = VertexRDDImpl[955] at RDD at VertexRDD.scala:57\n\nscala> people.join(ranks).map(t => (t._2._2,t._2._1)).sortBy(_._1, ascending=false).take(10).foreach(println)\n(32.073722548483325,tana.jones@enron.com)\n(29.086568868043248,sara.shackleton@enron.com)\n(28.14656912897315,louise.kitchen@enron.com)\n(26.57894933459292,vince.kaminski@enron.com)\n(25.865486865014493,sally.beck@enron.com)\n(23.86746232662471,john.lavorato@enron.com)\n(22.489814482022275,jeff.skilling@enron.com)\n(21.968039409295585,mark.taylor@enron.com)\n(20.903053536275547,kenneth.lay@enron.com)\n(20.39124651779771,gerald.nemec@enron.com)\n\n```", "```py\nscala> val rgraph = graph.partitionBy(org.apache.spark.graphx.PartitionStrategy.EdgePartition1D, 10).mapEdges(e => 1).groupEdges(_+_).cache\nrgraph: org.apache.spark.graphx.Graph[String,Int] = org.apache.spark.graphx.impl.GraphImpl@2c1a48d6\n\nscala> val redges = rgraph.edges.map( e => Edge(-e.srcId, e.dstId, Math.log(e.attr.toDouble)) ).cache\nredges: org.apache.spark.rdd.RDD[org.apache.spark.graphx.Edge[Double]] = MapPartitionsRDD[57] at map at <console>:36\n\nscala> import org.apache.spark.graphx.lib.SVDPlusPlus\nimport org.apache.spark.graphx.lib.SVDPlusPlus\n\nscala> implicit val conf = new SVDPlusPlus.Conf(10, 50, 0.0, 10.0, 0.007, 0.007, 0.005, 0.015)\nconf: org.apache.spark.graphx.lib.SVDPlusPlus.Conf = org.apache.spark.graphx.lib.SVDPlusPlus$Conf@15cdc117\n\nscala> val (svd, mu) = SVDPlusPlus.run(redges, conf)\nsvd: org.apache.spark.graphx.Graph[(Array[Double], Array[Double], Double, Double),Double] = org.apache.spark.graphx.impl.GraphImpl@3050363d\nmu: Double = 1.3773578970633769\n\nscala> val svdRanks = svd.vertices.filter(_._1 > 0).map(x => (x._2._3, x._1))\nsvdRanks: org.apache.spark.rdd.RDD[(Double, org.apache.spark.graphx.VertexId)] = MapPartitionsRDD[1517] at map at <console>:31\n\nscala> val svdRanks = svd.vertices.filter(_._1 > 0).map(x => (x._1, x._2._3))\nsvdRanks: org.apache.spark.rdd.RDD[(org.apache.spark.graphx.VertexId, Double)] = MapPartitionsRDD[1520] at map at <console>:31\n\nscala> people.join(svdRanks).sortBy(_._2._2, ascending=false).map(x => (x._2._2, x._2._1)).take(10).foreach(println)\n(8.864218804309887,jbryson@enron.com)\n(5.935146713012661,dl-ga-all_enron_worldwide2@enron.com)\n(5.740242927715701,houston.report@enron.com)\n(5.441934324464593,a478079f-55e1f3b0-862566fa-612229@enron.com)\n(4.910272928389445,pchoi2@enron.com)\n(4.701529779800544,dl-ga-all_enron_worldwide1@enron.com)\n(4.4046392452058045,eligible.employees@enron.com)\n(4.374738019256556,all_ena_egm_eim@enron.com)\n(4.303078586979311,dl-ga-all_enron_north_america@enron.com)\n(3.8295412053860867,the.mailout@enron.com)\n\n```", "```py\nscala> import com.github.fommil.netlib.BLAS.{getInstance => blas}\n\nscala> def topN(uid: Long, num: Int) = {\n |    val usr = svd.vertices.filter(uid == -_._1).collect()(0)._2\n |    val recs = svd.vertices.filter(_._1 > 0).map( v => (v._1, mu + usr._3 + v._2._3 + blas.ddot(usr._2.length, v._2._1, 1, usr._2, 1)))\n |    people.join(recs).sortBy(_._2._2, ascending=false).map(x => (x._2._2, x._2._1)).take(num)\n | }\ntopN: (uid: Long, num: Int)Array[(Double, String)]\n\nscala> def top5(x: Long) : Array[(Double, String)] = topN(x, 5)\ntop5: (x: Long)Array[(Double, String)]\n\nscala> people.join(graph.inDegrees).sortBy(_._2._2, ascending=false).map(x => (x._1, x._2._1)).take(10).toList.map(t => (t._2, top5(t._1).toList)).foreach(println)\n(richard.shapiro@enron.com,List((4.866184418005094E66,anne.bertino@enron.com), (3.9246829664352734E66,kgustafs@enron.com), (3.9246829664352734E66,gweiss@enron.com), (3.871029763863491E66,hill@enron.com), (3.743135924382312E66,fraser@enron.com)))\n(steven.kean@enron.com,List((2.445163626935533E66,anne.bertino@enron.com), (1.9584692804232504E66,hill@enron.com), (1.9105427465629028E66,kgustafs@enron.com), (1.9105427465629028E66,gweiss@enron.com), (1.8931872324048717E66,fraser@enron.com)))\n(jeff.dasovich@enron.com,List((2.8924566115596135E66,anne.bertino@enron.com), (2.3157345904446663E66,hill@enron.com), (2.2646318970030287E66,gweiss@enron.com), (2.2646318970030287E66,kgustafs@enron.com), (2.2385865127706285E66,fraser@enron.com)))\n(tana.jones@enron.com,List((6.1758464471309754E66,elizabeth.sager@enron.com), (5.279291610047078E66,tana.jones@enron.com), (4.967589820856654E66,tim.belden@enron.com), (4.909283344915057E66,jeff.dasovich@enron.com), (4.869177440115682E66,mark.taylor@enron.com)))\n(james.steffes@enron.com,List((5.7702834706832735E66,anne.bertino@enron.com), (4.703038082326939E66,gweiss@enron.com), (4.703038082326939E66,kgustafs@enron.com), (4.579565962089777E66,hill@enron.com), (4.4298763869135494E66,george@enron.com)))\n(sara.shackleton@enron.com,List((9.198688613290757E67,louise.kitchen@enron.com), (8.078107057848099E67,john.lavorato@enron.com), (6.922806078209984E67,greg.whalley@enron.com), (6.787266892881456E67,elizabeth.sager@enron.com), (6.420473603137515E67,sally.beck@enron.com)))\n(mark.taylor@enron.com,List((1.302856119148208E66,anne.bertino@enron.com), (1.0678968544568682E66,hill@enron.com), (1.031255083546722E66,fraser@enron.com), (1.009319696608474E66,george@enron.com), (9.901391892701356E65,brad@enron.com)))\n(mark.guzman@enron.com,List((9.770393472845669E65,anne.bertino@enron.com), (7.97370292724488E65,kgustafs@enron.com), (7.97370292724488E65,gweiss@enron.com), (7.751983820970696E65,hill@enron.com), (7.500175024539423E65,george@enron.com)))\n(geir.solberg@enron.com,List((6.856103529420811E65,anne.bertino@enron.com), (5.611272903720188E65,gweiss@enron.com), (5.611272903720188E65,kgustafs@enron.com), (5.436280144720843E65,hill@enron.com), (5.2621103015001885E65,george@enron.com)))\n(ryan.slinger@enron.com,List((5.0579114162531735E65,anne.bertino@enron.com), (4.136838933824579E65,kgustafs@enron.com), (4.136838933824579E65,gweiss@enron.com), (4.0110663808847004E65,hill@enron.com), (3.8821438267917902E65,george@enron.com)))\n\nscala> people.join(graph.outDegrees).sortBy(_._2._2, ascending=false).map(x => (x._1, x._2._1)).take(10).toList.map(t => (t._2, top5(t._1).toList)).foreach(println)\n(jeff.dasovich@enron.com,List((2.8924566115596135E66,anne.bertino@enron.com), (2.3157345904446663E66,hill@enron.com), (2.2646318970030287E66,gweiss@enron.com), (2.2646318970030287E66,kgustafs@enron.com), (2.2385865127706285E66,fraser@enron.com)))\n(veronica.espinoza@enron.com,List((3.135142195254243E65,gweiss@enron.com), (3.135142195254243E65,kgustafs@enron.com), (2.773512892785554E65,anne.bertino@enron.com), (2.350799070225962E65,marcia.a.linton@enron.com), (2.2055288158758267E65,robert@enron.com)))\n(pete.davis@enron.com,List((5.773492048248794E66,louise.kitchen@enron.com), (5.067434612038159E66,john.lavorato@enron.com), (4.389028076992449E66,greg.whalley@enron.com), (4.1791711984241975E66,sally.beck@enron.com), (4.009544764149938E66,elizabeth.sager@enron.com)))\n(rhonda.denton@enron.com,List((2.834710591578977E68,louise.kitchen@enron.com), (2.488253676819922E68,john.lavorato@enron.com), (2.1516048969715738E68,greg.whalley@enron.com), (2.0405329247770104E68,sally.beck@enron.com), (1.9877213034021861E68,elizabeth.sager@enron.com)))\n(cheryl.johnson@enron.com,List((3.453167402163105E64,mary.dix@enron.com), (3.208849221485621E64,theresa.byrne@enron.com), (3.208849221485621E64,sandy.olofson@enron.com), (3.0374270093157086E64,hill@enron.com), (2.886581252384442E64,fraser@enron.com)))\n(susan.mara@enron.com,List((5.1729089729525785E66,anne.bertino@enron.com), (4.220843848723133E66,kgustafs@enron.com), (4.220843848723133E66,gweiss@enron.com), (4.1044435240204605E66,hill@enron.com), (3.9709951893268635E66,george@enron.com)))\n(jae.black@enron.com,List((2.513139130001457E65,anne.bertino@enron.com), (2.1037756300035247E65,hill@enron.com), (2.0297519350719265E65,fraser@enron.com), (1.9587139280519927E65,george@enron.com), (1.947164483486155E65,brad@enron.com)))\n(ginger.dernehl@enron.com,List((4.516267307013845E66,anne.bertino@enron.com), (3.653408921875843E66,gweiss@enron.com), (3.653408921875843E66,kgustafs@enron.com), (3.590298037045689E66,hill@enron.com), (3.471781765250177E66,fraser@enron.com)))\n(lorna.brennan@enron.com,List((2.0719309635087482E66,anne.bertino@enron.com), (1.732651408857978E66,kgustafs@enron.com), (1.732651408857978E66,gweiss@enron.com), (1.6348480059915056E66,hill@enron.com), (1.5880693846486309E66,george@enron.com)))\n(mary.hain@enron.com,List((5.596589595417286E66,anne.bertino@enron.com), (4.559474243930487E66,kgustafs@enron.com), (4.559474243930487E66,gweiss@enron.com), (4.4421474044331\n\n```"]