["```py\n citrus fruit,semi-finished bread,margarine,ready soups\n   tropical fruit,yogurt,coffee\n   whole milk\n   pip fruit,yogurt,cream cheese,meat spreads\n   other vegetables,whole milk,condensed milk,long life bakery product \n```", "```py\n> groceries <- read.transactions(\"groceries.csv\", sep = \",\") \n```", "```py\n> summary(groceries) \n```", "```py\ntransactions as itemMatrix in sparse format with\n 9835 rows (elements/itemsets/transactions) and\n 169 columns (items) and a density of 0.02609146 \n```", "```py\nmost frequent items:\n      whole milk   other vegetables       rolls/buns\n            2513               1903             1809\n            soda             yogurt          (Other)\n            1715               1372            34055 \n```", "```py\nelement (itemset/transaction) length distribution:\nsizes\n   1    2    3    4    5    6    7    8    9   10   11   12 \n2159 1643 1299 1005  855  645  545  438  350  246  182  117 \n  13   14   15   16   17   18   19   20   21   22   23   24 \n  78   77   55   46   29   14   14    9   11    4    6    1 \n  26   27   28   29   32 \n   1    1    1    3    1\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  1.000   2.000   3.000   4.409   6.000  32.000 \n```", "```py\nincludes extended item information – examples:\n            labels\n1 abrasive cleaner\n2 artif. Sweetener\n3   baby cosmetics \n```", "```py\n> head(toLongFormat(groceries, decode = FALSE), n = 7) \n```", "```py\n TID item\n1   1   30\n2   1   89\n3   1  119\n4   1  133\n5   2   34\n6   2  158\n7   2  168 \n```", "```py\n> inspect(groceries[1:5]) \n```", "```py\n items                      \n[1] {citrus fruit,             \n     margarine,                \n     ready soups,              \n     semi-finished bread}      \n[2] {coffee,                   \n     tropical fruit,           \n     yogurt}                   \n[3] {whole milk}               \n[4] {cream cheese,             \n     meat spreads,             \n     pip fruit,                \n     yogurt}                   \n[5] {condensed milk,           \n     long life bakery product, \n     other vegetables,         \n     whole milk} \n```", "```py\n> itemFrequency(groceries[, 1:3]) \n```", "```py\nabrasive cleaner artif. sweetener   baby cosmetics\n    0.0035587189     0.0032536858     0.0006100661 \n```", "```py\n> itemFrequencyPlot(groceries, support = 0.1) \n```", "```py\n> itemFrequencyPlot(groceries, topN = 20) \n```", "```py\n> image(groceries[1:5]) \n```", "```py\n> image(sample(groceries, 100)) \n```", "```py\n> apriori(groceries) \n```", "```py\n...\nset of 0 rules \n```", "```py\n> groceryrules <- apriori(groceries, parameter = list(support =\n                            0.006, confidence = 0.25, minlen = 2)) \n```", "```py\nApriori\nParameter specification:\n confidence minval smax arem  aval originalSupport maxtime support\n       0.25    0.1    1 none FALSE            TRUE       5   0.006\n minlen maxlen target  ext\n      2     10  rules TRUE\nAlgorithmic control:\n filter tree heap memopt load sort verbose\n    0.1 TRUE TRUE  FALSE TRUE    2    TRUE \n```", "```py\nAbsolute minimum support count: 59 \nset item appearances ...[0 item(s)] done [0.00s].\nset transactions ...[169 item(s), 9835 transaction(s)] done [0.00s].\nsorting and recoding items ... [109 item(s)] done [0.00s].\ncreating transaction tree ... done [0.00s].\nchecking subsets of size 1 2 3 4 done [0.00s].\nwriting ... [463 rule(s)] done [0.00s].\ncreating S4 object  ... done [0.00s]. \n```", "```py\n> groceryrules \n```", "```py\nset of 463 rules \n```", "```py\n> summary(groceryrules) \n```", "```py\nset of 463 rules\nrule length distribution (lhs + rhs):sizes\n  2   3   4 \n150 297  16 \n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  2.000   2.000   3.000   2.711   3.000   4.000 \n```", "```py\nsummary of quality measures:\n    support           confidence        coverage       \n Min.   :0.006101   Min.   :0.2500   Min.   :0.009964  \n 1st Qu.:0.007117   1st Qu.:0.2971   1st Qu.:0.018709  \n Median :0.008744   Median :0.3554   Median :0.024809  \n Mean   :0.011539   Mean   :0.3786   Mean   :0.032608  \n 3rd Qu.:0.012303   3rd Qu.:0.4495   3rd Qu.:0.035892  \n Max.   :0.074835   Max.   :0.6600   Max.   :0.255516  \n      lift            count      \n Min.   :0.9932   Min.   : 60.0  \n 1st Qu.:1.6229   1st Qu.: 70.0  \n Median :1.9332   Median : 86.0  \n Mean   :2.0351   Mean   :113.5  \n 3rd Qu.:2.3565   3rd Qu.:121.0  \n Max.   :3.9565   Max.   :736.0 \n```", "```py\nmining info:\n      data  transactions support confidence\n groceries          9835   0.006       0.25 \n```", "```py\n> inspect(groceryrules[1:3]) \n```", "```py\n lhs                rhs               support    \n[1] {potted plants} => {whole milk}      0.006914082\n[2] {pasta}         => {whole milk}      0.006100661\n[3] {herbs}         => {root vegetables} 0.007015760\n    confidence coverage   lift     count\n[1] 0.4000000  0.01728521 1.565460 68   \n[2] 0.4054054  0.01504830 1.586614 60   \n[3] 0.4312500  0.01626843 3.956477 69 \n```", "```py\n> inspect(sort(groceryrules, by = \"lift\")[1:5]) \n```", "```py\n lhs                    rhs                      support\n[1] {herbs}             => {root vegetables}    0.007015760\n[2] {berries}           => {whipped/sour cream} 0.009049314\n[3] {other vegetables,                                     \n     tropical fruit,                                       \n     whole milk}        => {root vegetables}    0.007015760\n[4] {beef,                                                 \n     other vegetables}  => {root vegetables}    0.007930859\n[5] {other vegetables,                                     \n     tropical fruit}    => {pip fruit}          0.009456024\n    confidence coverage   lift     count\n[1] 0.4312500  0.01626843 3.956477 69\n[2] 0.2721713  0.03324860 3.796886 89\n[3] 0.4107143  0.01708185 3.768074 69\n[4] 0.4020619  0.01972547 3.688692 78\n[5] 0.2634561  0.03589222 3.482649 93 \n```", "```py\n> berryrules <- subset(groceryrules, items %in% \"berries\") \n```", "```py\n> inspect(berryrules) \n```", "```py\n lhs          rhs                  support    \n[1] {berries} => {whipped/sour cream} 0.009049314\n[2] {berries} => {yogurt}             0.010574479\n[3] {berries} => {other vegetables}   0.010269446\n[4] {berries} => {whole milk}         0.011794611\n    confidence coverage  lift     count\n[1] 0.2721713  0.0332486 3.796886  89  \n[2] 0.3180428  0.0332486 2.279848 104  \n[3] 0.3088685  0.0332486 1.596280 101  \n[4] 0.3547401  0.0332486 1.388328 116 \n```", "```py\n> write(groceryrules, file = \"groceryrules.csv\",\n          sep = \",\", quote = TRUE, row.names = FALSE) \n```", "```py\n> groceryrules_df <- as(groceryrules, \"data.frame\") \n```", "```py\n> str(groceryrules_df) \n```", "```py\n'data.frame':\t463 obs. of  6 variables:\n $ rules     : chr  \"{potted plants} => {whole milk}\"   \"{pasta} => {whole milk}\" \"{herbs} => {root vegetables}\"   \"{herbs} => {other vegetables}\" ...\n $ support   : num  0.00691 0.0061 0.00702 0.00773 0.00773 ...\n $ confidence: num  0.4 0.405 0.431 0.475 0.475 ...\n $ coverage  : num  0.0173 0.015 0.0163 0.0163 0.0163 ...\n $ lift      : num  1.57 1.59 3.96 2.45 1.86 ...\n $ count     : int  68 60 69 76 76 69 70 67 63 88 ... \n```", "```py\n> groceryitemsets_eclat <- eclat(groceries, support = 0.006) \n```", "```py\nAbsolute minimum support count: 59 \ncreate itemset … \nset transactions …[169 item(s), 9835 transaction(s)] done [0.00s].\nsorting and recoding items … [109 item(s)] done [0.00s].\ncreating sparse bit matrix … [109 row(s), 9835 column(s)] done [0.00s].\nwriting  … [747 set(s)] done [0.02s].\nCreating S4 object  … done [0.00s]. \n```", "```py\n> inspect(groceryitemsets_eclat[1:5]) \n```", "```py\n items                       support     count\n[1] {potted plants, whole milk} 0.006914082 68   \n[2] {pasta, whole milk}         0.006100661 60   \n[3] {herbs, whole milk}         0.007727504 76   \n[4] {herbs, other vegetables}   0.007727504 76   \n[5] {herbs, root vegetables}    0.007015760 69 \n```", "```py\n> groceryrules_eclat <- ruleInduction(groceryitemsets_eclat,\n    confidence = 0.25) \n```", "```py\n> groceryrules_eclat \n```", "```py\nset of 463 rules \n```", "```py\n> inspect(groceryrules_eclat[1:5]) \n```", "```py\n lhs                rhs                support    \n[1] {potted plants} => {whole milk}       0.006914082\n[2] {pasta}         => {whole milk}       0.006100661\n[3] {herbs}         => {whole milk}       0.007727504\n[4] {herbs}         => {other vegetables} 0.007727504\n[5] {herbs}         => {root vegetables}  0.007015760\n    confidence lift    \n[1] 0.4000000  1.565460\n[2] 0.4054054  1.586614\n[3] 0.4750000  1.858983\n[4] 0.4750000  2.454874\n[5] 0.4312500  3.956477 \n```"]