["```py\nraw_data = read.csv(\"~/udata.csv\",sep=\"\\t\",header=F) \nAdding column names to the dataframe \ncolnames(raw_data) = c(\"UserId\",\"MovieId\",\"Rating\",\"TimeStamp\") \n\n```", "```py\nratings = raw_data[,1:3] \n\n```", "```py\nhead(ratings) \n\n```", "```py\nmovies = read.csv(\"C:/Suresh/R&D/packtPublications/reco_engines/drafts/personalRecos/uitem.csv\",sep=\"|\",header=F) \n\n```", "```py\ncolnames(movies) = c(\"MovieId\",\"MovieTitle\",\"ReleaseDate\",\"VideoReleaseDate\",\"IMDbURL\",\"Unknown\",\"Action\",\"Adventure\",\"Animation\",\"Children\",\"Comedy\",\"Crime\",\"Documentary\",\"Drama\",\"Fantasy\",\"FilmNoir\",\"Horror\",\"Musical\",\"Mystery\",\"Romance\",\"SciFi\",\"Thriller\",\"War\",\"Western\") \n\n```", "```py\nmovies = movies[,-c(2:5)] \nView(movies) \n\n```", "```py\nratings = merge(x = ratings, y = movies, by = \"MovieId\", all.x = TRUE) \n\nView(ratings) \n\n```", "```py\nnrat = unlist(lapply(ratings$Rating,function(x) \n{ \n  if(x>3) {return(1)} \n  else {return(0)} \n})) \n\n```", "```py\nratings = cbind(ratings,nrat) \n\n```", "```py\napply(ratings[,-c(1:3,23)],2,function(x)table(x)) \n\n```", "```py\nscaled_ratings = ratings[,-c(3,4)] \n\n```", "```py\nscaled_ratings=scale(scaled_ratings[,-c(1,2,21)]) \nscaled_ratings = cbind(scaled_ratings,ratings[,c(1,2,23)]) \n\n```", "```py\nset.seed(7) \nwhich_train <- sample(x = c(TRUE, FALSE), size = nrow(scaled_ratings), \n                      replace = TRUE, prob = c(0.8, 0.2)) \nmodel_data_train <- scaled_ratings[which_train, ] \nmodel_data_test <- scaled_ratings[!which_train, ] \n\n```", "```py\nlibrary(randomForest) \nfit = randomForest(as.factor(nrat)~., data = model_data_train[,-c(19,20)]) \n\n```", "```py\npredictions <- predict(fit, model_data_test[,-c(19,20,21)], type=\"class\") \n\n```", "```py\n#building confusion matrix \ncm = table(predictions,model_data_test$nrat) \n(accuracy <- sum(diag(cm)) / sum(cm)) \n(precision <- diag(cm) / rowSums(cm)) \nrecall <- (diag(cm) / colSums(cm)) \n\n```", "```py\n            #extract distinct movieids \n            totalMovieIds = unique(movies$MovieId) \n            #see the sample movieids using tail() and head() functions: \n\n    ```", "```py\n            #a function to generate dataframe which creates non-rated \n              movies by active user and set rating to 0; \n            nonratedmoviedf = function(userid){ \n              ratedmovies = raw_data[raw_data$UserId==userid,]$MovieId \n              non_ratedmovies = totalMovieIds[!totalMovieIds %in%  \n                ratedmovies] \n               df = data.frame(cbind(rep(userid),non_ratedmovies,0)) \n               names(df) = c(\"UserId\",\"MovieId\",\"Rating\") \n               return(df) \n            } \n\n            #let's extract non-rated movies for active userid 943 \n            activeusernonratedmoviedf = nonratedmoviedf(943) \n\n    ```", "```py\n            activeuserratings = merge(x = activeusernonratedmoviedf, y = \n              movies, by = \"MovieId\", all.x = TRUE) \n\n    ```", "```py\n            #use predict() method to generate predictions for movie ratings \n              by the active user profile created in the previous step. \n            predictions <- predict(fit, activeuserratings[,-c(1:4)],  \n              type=\"class\") \n            #creating a dataframe from the results \n            recommend = data.frame(movieId = \n              activeuserratings$MovieId,predictions) \n            #remove all the movies which the model has predicted as 0 and  \n              then we can use the remaining items as more probable movies   \n                which might be liked by the active user. \n            recommend = recommend[which(recommend$predictions == 1),] \n\n    ```", "```py\nimport pandas as pd \nimport numpy as np \nimport scipy \nimport sklearn \n\n```", "```py\npath = \"~/anonymous-msweb.test.txt\" \nimport pandas as pd \n\n```", "```py\nraw_data = pd.read_csv(path,header=None,skiprows=7) \nraw_data.head() \n\n```", "```py\nuser_activity = raw_data.loc[raw_data[0] != \"A\"] \n\n```", "```py\nuser_activity = user_activity.loc[:, :1] \n\n```", "```py\nuser_activity.columns = ['category','value'] \n\n```", "```py\nlen(user_activity.loc[user_activity['category'] ==\"V\"].value.unique()) \nOut[73]: 236 \n\n```", "```py\nlen(user_activity.loc[user_activity['category'] ==\"C\"].value.unique()) \nOut[74]: 5000 \n\n```", "```py\ntmp = 0 \nnextrow = False \n\n```", "```py\nlastindex = user_activity.index[len(user_activity)-1] \nlastindex \nOut[77]: 20484 \n\n```", "```py\nfor index,row in user_activity.iterrows(): \n    if(index <= lastindex ): \n        if(user_activity.loc[index,'category'] == \"C\"): \n            tmp = 0            \n            userid = user_activity.loc[index,'value'] \n            user_activity.loc[index,'userid'] = userid \n            user_activity.loc[index,'webid'] = userid \n            tmp = userid \n            nextrow = True             \n        elif(user_activity.loc[index,'category'] != \"C\" and nextrow == True): \n                webid = user_activity.loc[index,'value'] \n                user_activity.loc[index,'webid'] = webid \n                user_activity.loc[index,'userid'] = tmp \n                if(index != lastindex and user_activity.loc[index+1,'category'] == \"C\"): \n                    nextrow = False \n                    caseid = 0 \n\n```", "```py\nuser_activity = user_activity[user_activity['category'] == \"V\" ] \n\n```", "```py\nuser_activity = user_activity[['userid','webid']] \n\n```", "```py\nuser_activity_sort = user_activity.sort('webid', ascending=True) \n\n```", "```py\nsLength = len(user_activity_sort['webid']) \n\n```", "```py\nuser_activity_sort['rating'] = pd.Series(np.ones((sLength,)), index=user_activity.index) \n\n```", "```py\nratmat = user_activity_sort.pivot(index='userid', columns='webid', values='rating').fillna(0) \n\n```", "```py\nratmat = ratmat.to_dense().as_matrix() \n\n```", "```py\nitems = raw_data.loc[raw_data[0] == \"A\"] \n\n```", "```py\nitems.columns = ['record','webid','vote','desc','url'] \n\n```", "```py\nitems = items[['webid','desc']] \n\n```", "```py\nitems.shape \nOut[12]: (294, 2) \n\n```", "```py\nItems.head() \n\n```", "```py\nitems['webid'].unique().shape[0] \nOut[117]: 294 \n\n```", "```py\nitems2 = items[items['webid'].isin(user_activity['webid'].tolist())] \n\n```", "```py\ntype(items2) \nOut[123]: pandas.core.frame.DataFrame \n\n```", "```py\nitems_sort = items2.sort('webid', ascending=True) \n\n```", "```py\nfrom sklearn.feature_extraction.text import TfidfVectorizer \nv = TfidfVectorizer(stop_words =\"english\",max_features = 100,ngram_range= (0,3),sublinear_tf =True) \nx = v.fit_transform(items_sort['desc']) \nitemprof = x.todense() \n\n```", "```py\n#user profile creation \nfrom scipy import linalg, dot \nuserprof = dot(ratmat,itemprof)/linalg.norm(ratmat)/linalg.norm(itemprof) \n\nuserprof \n\n```", "```py\nimport sklearn.metrics \nsimilarityCalc = sklearn.metrics.pairwise.cosine_similarity(userprof, itemprof, dense_output=True) \n\n```", "```py\nfinal_pred= np.where(similarityCalc>0.6, 1, 0) \n\n```", "```py\nindexes_of_user = np.where(final_pred[213] == 1) \n\n```", "```py\nraw_data = read.csv(\"C:/Suresh/R&D/packtPublications/reco_engines/drafts/personalRecos/udata.csv\",sep=\"\\t\",header=F) \ncolnames(raw_data) = c(\"UserId\",\"MovieId\",\"Rating\",\"TimeStamp\") \n\n```", "```py\nmovies = read.csv(\"C:/Suresh/R&D/packtPublications/reco_engines/drafts/personalRecos/uitem.csv\",sep=\"|\",header=F) \n\n```", "```py\ncolnames(movies) = c(\"MovieId\",\"MovieTitle\",\"ReleaseDate\",\"VideoReleaseDate\",\"IMDbURL\",\"Unknown\",\"Action\",\"Adventure\",\"Animation\",\"Children\",\"Comedy\",\"Crime\",\"Documentary\",\"Drama\",\"Fantasy\",\"FilmNoir\",\"Horror\",\"Musical\",\"Mystery\",\"Romance\",\"SciFi\",\"Thriller\",\"War\",\"Western\") \n\n```", "```py\nmovies = movies[,-c(2:5)] \n\n```", "```py\nratings_ctx = merge(x = raw_data, y = movies, by = \"MovieId\", all.x = TRUE) \n\n```", "```py\nts = ratings_ctx$TimeStamp \n\n```", "```py\nhours <- as.POSIXlt(ts,origin=\"1960-10-01\")$hour \n\n```", "```py\nratings_ctx = data.frame(cbind(ratings_ctx,hours)) \n\n```", "```py\nUCP = ratings_ctx[(ratings_ctx$UserId == 943),][,-c(2,3,4,5)] \n\n```", "```py\nUCP_pref = aggregate(.~hours,UCP[,-1],sum) \n\n```", "```py\nUCP_pref_sc = cbind(context = UCP_pref[,1],t(apply(UCP_pref[,-1], 1, function(x)(x-min(x))/(max(x)-min(x))))) \n\n```", "```py\nrecommend$MovieId \n\n```", "```py\nUCP_pref_content = merge(x = recommend, y = movies, by = \"MovieId\", all.x = TRUE) \n\n```", "```py\nactive_user =cbind(UCP_pref_content$MovieId,(as.matrix(UCP_pref_content[,-c(1,2,3)]) %*% as.matrix(UCP_pref_sc[4,2:19]))) \n\n```", "```py\nactive_user_df = as.data.frame(active_user) \n\n```", "```py\nnames(active_user_df) = c('MovieId','SimVal') \n\n```", "```py\nFinalPredicitons_943 = active_user_df[order(-active_user_df$SimVal),] \n\n```"]