["```py\nimport pandas as pd\n```", "```py\n# example to classify human vs animal\n```", "```py\n#dataset with one variable\n```", "```py\ncan_speak = [True,True,True,True,True,True,True,False,False,False]\n```", "```py\nhas_feathers = [False,False,False,False,False,True,True,False,False,False]\n```", "```py\nis_human = [True,True,True,True,True,False,False,False,False,False]\n```", "```py\ndata = pd.DataFrame({'can_speak': can_speak, 'has_feathers': has_feathers, 'is_human': is_human})\n```", "```py\ndata\n```", "```py\ndef self_made_decision_tree(observation):\n```", "```py\n    if observation.can_speak:\n```", "```py\n        if not observation.has_feathers:\n```", "```py\n            return 'human'\n```", "```py\n    return 'not human'\n```", "```py\nfor i,row in data.iterrows():\n```", "```py\n    print(self_made_decision_tree(row))\n```", "```py\nfrom sklearn.datasets import make_blobs\nX,y=make_blobs(shuffle=True,centers=2,n_samples=2000)\n```", "```py\nimport matplotlib.pyplot as plt\nplt.scatter(X[:,0], X[:,1], c=y)\n```", "```py\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)\n```", "```py\n!pip install river\nfrom river import linear_model\nmodel=linear_model.LogisticRegression()\nfor x_i,y_i in zip(X_train,y_train):  \n    x_json = {'val1': x_i[0], 'val2': x_i[1]}\n    print(x_json, y_i)\n    model.learn_one(x_json,y_i)\n```", "```py\nimport pandas as pd\npreds = model.predict_many(pd.DataFrame(X_test,columns=['val1', 'val2']))\n```", "```py\nfrom sklearn.metrics import accuracy_score\naccuracy_score(y_test, preds)\n```", "```py\n# make data\n```", "```py\nfrom sklearn.datasets import make_blobs\n```", "```py\nX,y=make_blobs(shuffle=True,centers=2,n_samples=2000)\n```", "```py\n# train test split\n```", "```py\nfrom sklearn.model_selection import train_test_split\n```", "```py\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)\n```", "```py\n# build the model\n```", "```py\nfrom river import linear_model\n```", "```py\nmodel=linear_model.Perceptron()\n```", "```py\n# fit the model\n```", "```py\nfor x_i,y_i in zip(X_train,y_train):\n```", "```py\n    x_json = {'val1': x_i[0], 'val2': x_i[1]}\n```", "```py\n    model.learn_one(x_json,y_i)\n```", "```py\n# predict on the test set\n```", "```py\nimport pandas as pd\n```", "```py\npreds = model.predict_many(pd.DataFrame(X_test,columns=['val1', 'val2']))\n```", "```py\n# compute accuracy\n```", "```py\nfrom sklearn.metrics import accuracy_score\n```", "```py\naccuracy_score(y_test, preds) \n```", "```py\n# make data\nfrom sklearn.datasets import make_classification\nX,y=make_classification(shuffle=True,n_samples=2000)\npd.DataFrame(X).head()\n```", "```py\n# train test split\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)\n```", "```py\nfrom river import ensemble\nmodel = ensemble.AdaptiveRandomForestClassifier()\n# fit the model\nfor x_i,y_i in zip(X_train,y_train):\n    x_json = {'val'+str(i): x for i,x in enumerate(x_i)}\n    model.learn_one(x_json,y_i)\n```", "```py\n# predict on the test set\nimport pandas as pd\npreds = []\nfor x_i in X_test:\n    x_json = {'val'+str(i): x for i,x in enumerate(x_i)}\n    preds.append(model.predict_one(x_json))\n```", "```py\n# compute accuracy\nfrom sklearn.metrics import accuracy_score\naccuracy_score(y_test, preds)\n```", "```py\n# classification report\nfrom sklearn.metrics import classification_report\nprint(classification_report(y_test, preds))\n```", "```py\n# make data\nfrom sklearn.datasets import make_classification\nX,y=make_classification(shuffle=True,n_samples=2000)\n# train test split\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)\nfrom river import linear_model\nmodel = linear_model.ALMAClassifier()\n# fit the model\nfor x_i,y_i in zip(X_train,y_train):\n    x_json = {'val'+str(i): x for i,x in enumerate(x_i)}\n    model.learn_one(x_json,y_i) \n# predict on the test set\nimport pandas as pd\npreds = []\nfor x_i in X_test:\n    x_json = {'val'+str(i): x for i,x in enumerate(x_i)}\n    preds.append(model.predict_one(x_json))\n# compute accuracy\nfrom sklearn.metrics import accuracy_score\naccuracy_score(y_test, preds)\n```", "```py\n# classification report\nfrom sklearn.metrics import classification_report\nprint(classification_report(y_test, preds))\n```", "```py\n# make data\n```", "```py\nfrom sklearn.datasets import make_classification\n```", "```py\nX,y=make_classification(shuffle=True,n_samples=2000)\n```", "```py\n# train test split\n```", "```py\nfrom sklearn.model_selection import train_test_split\n```", "```py\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)\n```", "```py\nfrom river import linear_model\n```", "```py\nmodel = linear_model.PAClassifier()\n```", "```py\n# fit the model\n```", "```py\nfor x_i,y_i in zip(X_train,y_train):\n```", "```py\n    x_json = {'val'+str(i): x for i,x in enumerate(x_i)}\n```", "```py\n    model.learn_one(x_json,y_i)\n```", "```py\n# predict on the test set\n```", "```py\nimport pandas as pd\n```", "```py\npreds = []\n```", "```py\nfor x_i in X_test:\n```", "```py\n    x_json = {'val'+str(i): x for i,x in enumerate(x_i)}\n```", "```py\n    preds.append(model.predict_one(x_json))\n```", "```py\n# compute accuracy\n```", "```py\nfrom sklearn.metrics import accuracy_score\n```", "```py\naccuracy_score(y_test, preds)\n```"]