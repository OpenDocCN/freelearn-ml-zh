["```py\n{\n        \"type\": \"function\",\n        \"function\": {\n            \"name\": \"get_current_weather\",\n            \"description\": \"Get the current weather\",\n            \"parameters\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"location\": {\n                        \"type\": \"string\",\n                        \"description\": \"The city and state, e.g. San Francisco, CA\",\n                    },\n                    \"format\": {\n                        \"type\": \"string\",\n                        \"enum\": [\"celsius\", \"fahrenheit\"],\n                        \"description\": \"The temperature unit to use. Infer this from the users location.\",\n                    },\n                },\n                \"required\": [\"location\", \"format\"],\n            },\n        }\n    } \n```", "```py\nimport open\ndef get_current_weather(location, format):\n    # Call weather API\n    response = requests.get(f\"https://api.weather.com/v3/wx/forecast/daily/5day?location={location}&format={format}\n    return response.json()\n# Call the GPT model\ntool = {\n        \"type\": \"function\",\n        \"function\": {\n            \"name\": \"get_current_weather\",\n            \"description\": \"Get the current weather\",\n            \"parameters\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"location\": {\n                        \"type\": \"string\",\n                        \"description\": \"The city and state, e.g. San Francisco, \nCA\",\n                    },\n                    \"format\": {\n                        \"type\": \"string\",\n                        \"enum\": [\"celsius\", \"fahrenheit\"],\n                        \"description\": \"The temperature unit to use. Infer this from the users location.\",\n                    },\n                },\n                \"required\": [\"location\", \"format\"],\n            },\n        }\n    }\nprompt = \"What's the weather like today in Salt Lake City?\"\nresponse = openai.Completion.create(\n  model=\"text-davinci-003\",\n  prompt=prompt,\n  max_tokens=150,\n  tools= [tool]\n)\n# Parse the response\nfunction_response = response.choices[0].function_response # here we learn what function to call\nlocation = function_response.parameters.location # extracting parameter value for location\nformat = function_response.parameters.format # extracting parameter value for format\nweather = get_current_weather(location, format) # here we get the response from the API \n```", "```py\n# enum\nclass State(Enum):\n    ASK_FOR_TASK = 1\n    ASK_FOR_MORE_INFORMATION = 2\n    PRESENT_TASK_RESULT = 3\n    PERFORM_TASK = 4\n    END_CONVERSATION = 5\n# initial state\nstate = State.ASK_FOR_TASK\ndef ask_for_task():\n    # ask the user for a task\n    pass\ndef ask_for_more_information(task):\n    # store filter criteria\n    pass\ndef present_task_result(task):\n    # presents the result so the user can choose\n    pass\ndef perform_task(task):\n    # Perform a task\n    pass\ndef end_conversation():\n    # End the conversation\n    pass\nwhile state != State.END_CONVERSATION:\n    if state == State.ASK_FOR_TASK:\n        # Ask for a task\n        task = ask_for_task()\n        state = State.ASK_FOR_MORE_INFORMATION\n    elif state == State.ASK_FOR_MORE_INFORMATION:\n        # Ask the user for more information on a task\n        task = ask_for_more_information(task)\n        state = State.PERFORM_TASK\n    elif state == State.PRESENT_TASK_RESULT:\n        # Present a list of options to the user\n        task = present_task_result(task)\n        state = State.ASK_FOR_MORE_INFORMATION\n    elif state == State.PERFORM_TASK:\n        # Perform a task\n        perform_task(task)\n        state = State.PRESENT_TASK_RESULT\n    elif state == State.END_CONVERSATION:\n        # End the conversation\n        end_conversation() \n```"]