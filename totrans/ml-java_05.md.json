["```py\nimport java.io.BufferedReader; \nimport java.io.FileReader; \nimport weka.core.Instances; \nimport weka.associations.Apriori; \n```", "```py\nInstances data = new Instances(new BufferedReader(new FileReader(\"data/supermarket.arff\"))); \n```", "```py\nApriori model = new Apriori(); \nmodel.buildAssociations(data); \n```", "```py\nSystem.out.println(model); \n```", "```py\n   Apriori\n    =======\n\n    Minimum support: 0.15 (694 instances)\n    Minimum metric <confidence>: 0.9\n    Number of cycles performed: 17\n\n    Generated sets of large itemsets:\n    Size of set of large itemsets L(1): 44\n    Size of set of large itemsets L(2): 380\n    Size of set of large itemsets L(3): 910\n    Size of set of large itemsets L(4): 633\n    Size of set of large itemsets L(5): 105\n    Size of set of large itemsets L(6): 1\n\n    Best rules found:\n\n     1\\. biscuits=t frozen foods=t fruit=t total=high 788 ==> bread and cake=t 723    <conf:(0.92)> lift:(1.27) lev:(0.03) [155] conv:(3.35)\n     2\\. baking needs=t biscuits=t fruit=t total=high 760 ==> bread and cake=t 696    <conf:(0.92)> lift:(1.27) lev:(0.03) [149] conv:(3.28)\n     3\\. baking needs=t frozen foods=t fruit=t total=high 770 ==> bread and cake=t 705    <conf:(0.92)> lift:(1.27) lev:(0.03) [150] conv:(3.27)\n    ...\n\n```", "```py\nbiscuits=t frozen foods=t fruit=t total=high 788 ==> bread and cake=t 723    <conf:(0.92)> lift:(1.27) lev:(0.03) [155] conv:(3.35)\n\n```", "```py\nimport weka.associations.FPGrowth; \n```", "```py\nFPGrowth fpgModel = new FPGrowth(); \nfpgModel.buildAssociations(data); \nSystem.out.println(fpgModel); \n```", "```py\n    FPGrowth found 16 rules (displaying top 10)\n\n    1\\. [fruit=t, frozen foods=t, biscuits=t, total=high]: 788 ==> [bread and cake=t]: 723   <conf:(0.92)> lift:(1.27) lev:(0.03) conv:(3.35) \n    2\\. [fruit=t, baking needs=t, biscuits=t, total=high]: 760 ==> [bread and cake=t]: 696   <conf:(0.92)> lift:(1.27) lev:(0.03) conv:(3.28) \n    ...\n\n```"]