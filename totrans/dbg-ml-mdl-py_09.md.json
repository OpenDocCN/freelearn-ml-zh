["```py\nimport requestsdef test_web_server_response():\n    url = \"http://your-web-server-url.com\"\n    response = requests.get(url)\n    assert response.status_code == 200,\n        f\"Expected status code 200,\n        but got {response.status_code}\"\n```", "```py\nclass Database:    def __init__(self):\n        self.data = {\"users\": [{\"id\": 1,\n            \"name\": \"John Doe\"},\n            {\"id\": 2, \"name\": \"Jane Doe\"}]}\n    def get_user(self, user_id):\n        for user in self.data[\"users\"]:\n            if user[\"id\"] == user_id:\n                return user\n            return None\n```", "```py\nfrom database import Databaseclass UserService:\n    def __init__(self, db):\n        self.db = db\n    def get_user_name(self, user_id):\n        user = self.db.get_user(user_id)\n        if user:\n            return user[\"name\"]\n        return None\n```", "```py\nimport pytestfrom database import Database\nfrom service import UserService\n@pytest.fixture\ndef db():\n    return Database()\n@pytest.fixture\ndef user_service(db):\n    return UserService(db)\ndef test_get_user_name(user_service):\n    assert user_service.get_user_name(1) == \"John Doe\"\n    assert user_service.get_user_name(2) == \"Jane Doe\"\n    assert user_service.get_user_name(3) is None\n```", "```py\npytest test_integration.py\n```", "```py\nPOST http://mldebugging.com/api/v1/predict\n```", "```py\n{    \"rooms\": 3,\n    \"square_footage\": 1500,\n    \"location\": \"suburban\"\n}\n```", "```py\n{    \"predicted_price\": 700000\n}\n```", "```py\nimport requestsimport pytest\nAPI_URL = \"http://mldebugging.com/api/v1/predict\"\ndef test_predict_house_price():\n    payload = {\n        \"rooms\": 3,\n        \"square_footage\": 1500,\n        \"location\": \"suburban\"\n    }\n    response = requests.post(API_URL, json=payload)\n    assert response.status_code == 200\n    assert response.headers[\"Content-Type\"] == \"application/json\"\n    json_data = response.json()\n    assert \"predicted_price\" in json_data\n    assert isinstance(json_data[\"predicted_price\"],\n        (int, float))\n```", "```py\npytest test_integration.py\n```", "```py\nimport numpy as npfrom sklearn.linear_model import LinearRegression\n# Toy dataset with number of rooms and corresponding house prices\nX = np.array([1, 2, 3, 4, 5]).reshape(-1, 1)\ny = np.array([100000, 150000, 200000, 250000, 300000])\n# Train the linear regression model\nmodel = LinearRegression()\nmodel.fit(X, y)\n```", "```py\ndef assert_input(input_data):    assert isinstance(input_data, int),\n        \"Input data must be an integer\"\n    assert input_data > 0, \"Number of rooms must be positive\"\ndef assert_output(predicted_price, min_price, max_price):\n    assert min_price <= predicted_price <= max_price,\n        f\"Predicted price should be between {min_price} and \n        {max_price}\"\n```", "```py\n# Test the assertions with example input and output datainput_data = 3\nassert_input(input_data)\npredicted_price = model.predict([[input_data]])[0]\nassert_output(predicted_price, 50000, 350000)\n```", "```py\ninput_data = '3'assert_input(input_data)\n```", "```py\nAssertionError: Input data must be an integer\n```", "```py\ninput_data = 3predicted_price = model.predict([[input_data]])[0]\nassert_output(predicted_price, 50000, 150000)\n```", "```py\nAssertionError: Predicted price should be between 50000 and 150000\n```"]