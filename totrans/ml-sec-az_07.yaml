- en: '7'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Managing and Securing Your Azure Machine Learning Workspace
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After data and access management comes infrastructure. Although Azure Machine
    Learning is a cloud service, it doesn’t mean that we cannot leverage services
    together with our Azure or on-premises infrastructure to isolate our resources
    and secure them from public access.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will learn how to implement security best practices regarding
    the workspace. We will focus more on practices and scenarios around virtual networking
    and endpoint security as well as compute. Compute in Azure Machine Learning can
    be used both for model training and deployment and each option available has its
    own security best practices. Compute includes compute instances, compute clusters,
    and containers. The workspace uses Azure Container Registries to deploy models
    that can be deployed as containers, so we will review security options for all
    those services.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we’re going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Exploring network security
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with Azure Machine Learning compute
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing container registries and containers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this chapter, we will know how to implement best practices and
    isolate our Azure Machine Learning workspace and its associated resources by using
    virtual networking in Azure.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter deals heavily with networking and infrastructure in Azure. Although
    the tutorials can be implemented without much difficulty, properly implementing
    and maintaining a network architecture in Azure requires a lot of knowledge.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you have no experience with networking in Azure, I recommend taking a look
    at this overview of the service before moving on with the chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Virtual** **Networks overview**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://learn.microsoft.com/en-us/azure/virtual-network/virtual-networks-overview](https://learn.microsoft.com/en-us/azure/virtual-network/virtual-networks-overview)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Networking** **architecture design**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://learn.microsoft.com/en-us/azure/architecture/guide/networking/networking-start-here](https://learn.microsoft.com/en-us/azure/architecture/guide/networking/networking-start-here)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Exploring network security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Azure Machine Learning workspace is the main point of use. This is where
    you complete all your ML tasks, and by default, all endpoints and workspace have
    access to the public internet. However, if we are already using Azure infrastructure
    services for different purposes or want to restrict access to our resources, we
    can leverage **virtual networks** (**VNets**). Using VNets in Azure provides an
    extra layer of security and isolation for our Azure Machine Learning resources
    and better control for inbound and outbound network communications. In this section,
    we will explore several options we have to integrate VNets with Azure Machine
    Learning.
  prefs: []
  type: TYPE_NORMAL
- en: Let us start with the workspace.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a VNet
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The first thing we will need is a VNet. If you already have one, you can use
    it. If not, you can follow the next steps to create one:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Search for **Virtual Networks** in the Azure search bar and click to create
    a new one. The create form will pop up. Choose the **Subscription** and **Resource
    group** and provide a **Virtual network name** and **Region** as shown in the
    following screenshot. Choose the same region as your workspace:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.1 – Filling in basic details](img/B21076_07_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.1 – Filling in basic details
  prefs: []
  type: TYPE_NORMAL
- en: 'Click **Next** and leave the default values until you reach the **IP addresses**
    tab. Make sure the address space is adequate and that there is at least one subnet
    available. An example is shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.2 – Add the address space](img/B21076_07_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.2 – Add the address space
  prefs: []
  type: TYPE_NORMAL
- en: VNet best practice
  prefs: []
  type: TYPE_NORMAL
- en: Make sure the address space and subnet do not overlap with other networks in
    your subscription or on-premises systems. If you need more guidance on creating
    a VNet architecture, see more information at [https://learn.microsoft.com/en-us/azure/virtual-network/concepts-and-best-practices](https://learn.microsoft.com/en-us/azure/virtual-network/concepts-and-best-practices).
  prefs: []
  type: TYPE_NORMAL
- en: Click **Review + create** to create the VNet. Wait for the process to complete
    before you move forward with anything else.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now we are ready to start restricting access to our workspace using VNets.
  prefs: []
  type: TYPE_NORMAL
- en: Securing the workspace
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Restricting public access to the workspace is very easily configurable through
    the Azure portal and can restrict all inbound and/or outbound connections. When
    we are talking about inbound traffic, we refer to connections coming into the
    Azure ML workspace or associated resources from the public internet. This can
    be data being ingested into the Azure ML workspace from on-premises locations,
    from other cloud resources, or from external applications and platforms. When
    you submit a dataset, a job, or any other request from your local machine to Azure
    Machine Learning, that’s considered inbound traffic. Outbound traffic is any connection
    leaving the workspace or associated resources to go elsewhere. This can be the
    results from a machine learning model, processed data, logs, and so on being sent
    back to your local machine, another cloud resource, or an external application
    or platform.
  prefs: []
  type: TYPE_NORMAL
- en: The challenge is to make sure that all associated services to the workspace
    are also accessible and configured properly through that virtual network and not
    the public internet. Something else we need to consider when designing and implementing
    this solution is that the workspace needs to have outbound access to specific
    endpoints via the public internet. If we want to restrict outbound access as well,
    we need to ensure that these endpoints maintain their public access.
  prefs: []
  type: TYPE_NORMAL
- en: Let us see how we can configure both options.
  prefs: []
  type: TYPE_NORMAL
- en: Restricting inbound traffic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To restrict inbound traffic from the public internet, we need to use a VNet,
    which we learned how to configure in the preceding section. Here is the process
    of disabling public access and using a VNet with our workspace.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, open the Azure Machine Learning resource from the Azure portal and find
    the **Networking** section. In the first tab, called **Public access**, set the
    access to **Disabled** and click **Save,** as shown in the next screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.3 – Disable public access](img/B21076_07_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.3 – Disable public access
  prefs: []
  type: TYPE_NORMAL
- en: Now we need to create a private endpoint connection. Azure Private Link is a
    service in Microsoft’s Azure cloud platform that enables you to securely access
    Azure services over a private endpoint in your virtual network, thus avoiding
    data exposure to the public internet. With Azure Private Link, Azure services
    can be accessed over a private IP address in your virtual network. This provides
    several benefits. If your virtual network is connected to on-premises work environments
    via a **virtual private network** (**VPN**) or ExpressRoute, resources can access
    the Azure service over these private connections with the use of Azure Private
    Link. Using global VNet peering, we can connect to Azure services from any region.
    Azure Private Link integrates with Azure Private DNS zones, meaning that the service’s
    private endpoint can be registered with a private DNS zone, thus making name resolution
    more straightforward.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a private endpoint is a straightforward process in the Azure portal.
    Once set up, all network traffic between the service provider and the service
    consumer can be routed through the private endpoint. So, now that we have disabled
    public access, we need to create a private link to re-establish access this time
    via the virtual network.
  prefs: []
  type: TYPE_NORMAL
- en: Virtual network peering
  prefs: []
  type: TYPE_NORMAL
- en: 'To learn more about Vnet peering, visit the following URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://learn.microsoft.com/en-us/azure/virtual-network/virtual-network-peering-overview](https://learn.microsoft.com/en-us/azure/virtual-network/virtual-network-peering-overview)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the creation process for the private links/endpoints. Move on to the
    next tab, **Private endpoint connections**, and click on **Private endpoint**
    to create one:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.4 – Creating a private endpoint](img/B21076_07_4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.4 – Creating a private endpoint
  prefs: []
  type: TYPE_NORMAL
- en: 'On the form, fill in some basic details including **Subscription**, **Resource
    group**, **Network interface name**, and **Region** and click **Next** as shown
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.5 – Filling in the basic details](img/B21076_07_5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.5 – Filling in the basic details
  prefs: []
  type: TYPE_NORMAL
- en: 'On the **Resource** tab, choose **amlworkspace** from the dropdown and click
    **Next**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.6 – Choosing the resource](img/B21076_07_6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.6 – Choosing the resource
  prefs: []
  type: TYPE_NORMAL
- en: Here, we will choose the desired VNet. You have to choose an existing one, so
    use the one we created previously. Make sure you select the proper subnet if your
    VNet has more than one. Leave the rest of the options as **default**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.7 – Selecting the virtual network](img/B21076_07_7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.7 – Selecting the virtual network
  prefs: []
  type: TYPE_NORMAL
- en: Integrating with a DNS zone is optional but convenient, as it makes name resolution
    easier. Set the **Integrate with private DNS zone** option to **Yes** and then
    choose the **Subscription** and **Resource group**. The service will fill out
    the rest of the fields.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.8 – Adding DNS integration](img/B21076_07_8.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.8 – Adding DNS integration
  prefs: []
  type: TYPE_NORMAL
- en: DNS zones overview
  prefs: []
  type: TYPE_NORMAL
- en: 'To learn more about DNS zones check the overview here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://learn.microsoft.com/en-us/azure/dns/dns-zones-records](https://learn.microsoft.com/en-us/azure/dns/dns-zones-records)'
  prefs: []
  type: TYPE_NORMAL
- en: Now move on to **Review + create** and start the deployment of the resources.
    Wait for this process to be completed before moving on with any other steps.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a private Link via the CLI
  prefs: []
  type: TYPE_NORMAL
- en: 'For creating a private link, you can learn more here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://learn.microsoft.com/en-us/azure/machine-learning/how-to-configure-private-link?view=azureml-api-2&tabs=cli](https://learn.microsoft.com/en-us/azure/machine-learning/how-to-configure-private-link?view=azureml-api-2&tabs=cli)'
  prefs: []
  type: TYPE_NORMAL
- en: If you try to access the workspace at this point, you will get the following
    error because public access has been disabled.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.9 – Workspace public access is disabled](img/B21076_07_9.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.9 – Workspace public access is disabled
  prefs: []
  type: TYPE_NORMAL
- en: This was the basic configuration for the workspace’s inbound access. Before
    we validate the access through the VNet, we should first configure outbound traffic
    and restrict access to associated services as well.
  prefs: []
  type: TYPE_NORMAL
- en: Let us start with outbound traffic.
  prefs: []
  type: TYPE_NORMAL
- en: Restricting outbound traffic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To restrict outbound traffic, we will go through the **Networking** blade again
    in Azure Machine Learning, but this time, we will click on the **Workspace managed
    outbound** **access** tab:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.10 – Restricting outbound traffic](img/B21076_07_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.10 – Restricting outbound traffic
  prefs: []
  type: TYPE_NORMAL
- en: 'To restrict outbound traffic, we have two options: **Allow Internet Outbound**
    where only compute is limited and **Allow Only Approved Outbound** where both
    compute and all outbound data movement are limited.'
  prefs: []
  type: TYPE_NORMAL
- en: Both of those options have some connection exceptions that you can see when
    enabling the options at the bottom of the screen. You can add some rules of your
    own, but the default ones cannot be disabled.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.11 – Allowing only approved outbound option](img/B21076_07_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.11 – Allowing only approved outbound option
  prefs: []
  type: TYPE_NORMAL
- en: If you are also using a firewall together with the network, make sure the connectivity
    is enabled through there as well, as restricting access to those resources will
    result in connectivity issues in the workspace and an inability to work with the
    services.
  prefs: []
  type: TYPE_NORMAL
- en: Securing the workspace was only the first step. Now we need to ensure that associated
    resources are also secured through the VNet.
  prefs: []
  type: TYPE_NORMAL
- en: Securing associated resources
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As mentioned in [*Chapter 1*](B21076_01.xhtml#_idTextAnchor015), the workspace
    works closely with many resources, including storage accounts and key vaults,
    which are created to support the workspace. We need to configure the same networking
    settings if we truly want to ensure that they connect properly to the workspace
    through the Microsoft network but still maintain isolation from the public internet.
    The first thing we need to do is disable public access to those services as well.
  prefs: []
  type: TYPE_NORMAL
- en: To disable public access and restrict the account to specific networks, we can
    go to the **Networking** tab in the **Storage** **account** blade.
  prefs: []
  type: TYPE_NORMAL
- en: In the **Public network access** options, click **Enabled from selected virtual
    networks and ID addresses**. Then, choose the previously created VNet in the **Virtual
    networks** section and subnet by clicking on the **Add existing virtual network**
    button and click **Save**.
  prefs: []
  type: TYPE_NORMAL
- en: 'The final view should look like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.12 – Disabling public access in the storage account](img/B21076_07_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.12 – Disabling public access in the storage account
  prefs: []
  type: TYPE_NORMAL
- en: The next step is to do something similar this time to the key vault associated
    with the workspace. The steps are exactly the same as previously.
  prefs: []
  type: TYPE_NORMAL
- en: To disable public access and restrict the account to specific networks, we can
    go to the **Networking** tab in the **Storage account** blade. For the **Public
    network access** option, click on **Enabled from selected virtual networks and
    ID addresses**. Then, choose the previously created VNet in the **Virtual networks**
    section and the subnet by clicking on the **Add existing virtual network** button
    and clicking **Save**.
  prefs: []
  type: TYPE_NORMAL
- en: 'The final view should look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.13 – Disabling public access in the key vault](img/B21076_07_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.13 – Disabling public access in the key vault
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: We can still configure service endpoints without restricting network access
    to the services. In this case, traffic from the workspace will go through the
    VNet and any other traffic will still access the services through the public internet.
    Doing both ensures better isolation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have disabled public access, we have two options for configuration:
    enabling service endpoints or creating private endpoints for each service.'
  prefs: []
  type: TYPE_NORMAL
- en: Let us explore both options starting with service endpoints.
  prefs: []
  type: TYPE_NORMAL
- en: 'Option 1: configuring service endpoints'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is the easiest and fastest option. Service endpoints in Azure provide enhanced
    security and optimized routing for VNets by extending your VNet’s private address
    space over to Azure service resources. This allows you to secure Azure service
    resources to your VNet.
  prefs: []
  type: TYPE_NORMAL
- en: Open the VNet we created previously and go to the **Subnets** section. Click
    on the desired subnet and scroll down in the popup on the right.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.14 – Allowing only approved outbound traffic](img/B21076_07_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.14 – Allowing only approved outbound traffic
  prefs: []
  type: TYPE_NORMAL
- en: It is essential to note that while service endpoints are beneficial for many
    scenarios, there are cases where you might consider using Azure Private Link or
    Private Endpoints instead, especially when you want Azure services to be accessed
    via private IP addresses in your VNet.
  prefs: []
  type: TYPE_NORMAL
- en: So, let us see how to implement this option next.
  prefs: []
  type: TYPE_NORMAL
- en: 'Option 2: creating private endpoints'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The process of creating private endpoints is similar to the one we use to create
    the public endpoint for the workspace. Let us see the steps for each service.
  prefs: []
  type: TYPE_NORMAL
- en: Azure storage account
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: From the **Networking** screen of the **Storage account** resource, click on
    **Private endpoint connections**. Click the **+ Private endpoint** button and
    follow the tabs as we did previously for the workspace.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.15 – Creating a private endpoint](img/B21076_07_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.15 – Creating a private endpoint
  prefs: []
  type: TYPE_NORMAL
- en: 'Fill in some basic information for the endpoint, as seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.16 – Filling in the basics](img/B21076_07_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.16 – Filling in the basics
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, on the **Resource** tab for the **Target sub-resource**, choose **blob**
    from the dropdown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.17 – Choosing the blob resource](img/B21076_07_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.17 – Choosing the blob resource
  prefs: []
  type: TYPE_NORMAL
- en: Go through the rest of the tabs exactly as for the workspace, filling in the
    **Virtual Network**, **DNS**, and then going to **Review +** **create**.
  prefs: []
  type: TYPE_NORMAL
- en: Once you have completed this process, create another private endpoint, this
    time choosing **file** for the **Target sub-resource**.
  prefs: []
  type: TYPE_NORMAL
- en: Once we are done with the storage account, here is how to do the same for the
    key vault.
  prefs: []
  type: TYPE_NORMAL
- en: Azure Key Vault
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'From the **Networking** screen of the key vault resource, click on **Private
    endpoint connections**. Click the **+ Private endpoint** button and follow the
    tabs as we did previously in the chapter for the storage account:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.18 – Creating a private endpoint](img/B21076_07_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.18 – Creating a private endpoint
  prefs: []
  type: TYPE_NORMAL
- en: 'Fill in some basic information for the endpoint, as seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.19 – Filling in the basics](img/B21076_07_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.19 – Filling in the basics
  prefs: []
  type: TYPE_NORMAL
- en: Then, on the Resource tab for the **Target sub-resource**, choose **vault**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.20 – Choosing the vault resource](img/B21076_07_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.20 – Choosing the vault resource
  prefs: []
  type: TYPE_NORMAL
- en: Again, go through the rest of the tabs exactly as for the storage account, filling
    in the **Virtual Network** and **DNS** and then going to **Review +** **create**.
  prefs: []
  type: TYPE_NORMAL
- en: We have completed the minimum required configurations. Now it is time to test
    it! Let us review some options to test connectivity.
  prefs: []
  type: TYPE_NORMAL
- en: Validating connectivity
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to connect to a workspace that is behind a firewall, we have many options.
    They depend mostly on your individual Azure infrastructure and requirements.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us review those options:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Connecting from on-premises systems**: There is one option to establish secure,
    encrypted communications between your on-premises networks and Azure. It is done
    via a VPN gateway through the public internet. Azure offers two types of gateways:
    **VPN Gateway** and **ExpressRoute**. It’s important to choose the appropriate
    VPN solution, as they will have access to your internet activity, and not all
    VPN options offer the same level of security, privacy, and speed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: VPN solutions on Azure
  prefs: []
  type: TYPE_NORMAL
- en: Here, you can find more information about the VPN gateway and ExpressRoute services
    in Azure.
  prefs: []
  type: TYPE_NORMAL
- en: For VPN Gateway, see [https://learn.microsoft.com/en-us/azure/vpn-gateway/vpn-gateway-about-vpngateways](https://learn.microsoft.com/en-us/azure/vpn-gateway/vpn-gateway-about-vpngateways).
  prefs: []
  type: TYPE_NORMAL
- en: For ExpressRoute, see [https://learn.microsoft.com/en-us/azure/expressroute/expressroute-introduction](https://learn.microsoft.com/en-us/azure/expressroute/expressroute-introduction).
  prefs: []
  type: TYPE_NORMAL
- en: '**Connecting from cloud infrastructure**: We can always create a virtual machine—also
    sometimes referred to as a **jump box**—that we will connect to. From there, we
    can access the services restricted by the network. In addition, you can enable
    **Azure Bastion** in the VM and access the machine through the browser without
    configuring public IPs on the VM, which reduces exposure to security vulnerabilities.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For our example, we will use a VM in Azure deployed in the same VNet that the
    Azure Machine Learning workspace and associated services are behind. All you need
    to do is create a VM deployed in the same network or a peered network and try
    to access the workspace.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Quickstart: create a VM in the portal'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you need to get started with VMs, check this quickstart guide here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://learn.microsoft.com/en-us/azure/virtual-machines/windows/quick-create-portal](https://learn.microsoft.com/en-us/azure/virtual-machines/windows/quick-create-portal)'
  prefs: []
  type: TYPE_NORMAL
- en: 'The result is as expected. We can access the workspace from the device inside
    the network, but everything outside the network is disabled. Here is a screenshot
    with a VM that is in the same VNet as the workspace accessing the page (left)
    and a browser trying to access the same workspace (right) through the public internet:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.21 – Public access disabled](img/B21076_07_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.21 – Public access disabled
  prefs: []
  type: TYPE_NORMAL
- en: VM security best practices
  prefs: []
  type: TYPE_NORMAL
- en: 'To increase isolation and security, there are multiple ways to secure either
    the network itself or the VMs that belong to it. As an example, you can review
    the following services:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Network security** **groups**: [https://learn.microsoft.com/en-us/azure/virtual-network/network-security-groups-overview](https://learn.microsoft.com/en-us/azure/virtual-network/network-security-groups-overview)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Azure** **Firewall**: [https://learn.microsoft.com/en-us/azure/firewall/overview](https://learn.microsoft.com/en-us/azure/firewall/overview)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Azure** **Bastion**: [https://learn.microsoft.com/en-us/azure/bastion/bastion-overview](https://learn.microsoft.com/en-us/azure/bastion/bastion-overview)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can secure associated resources in a similar way, such as in databases and
    other types of data storages that can be used in Azure Machine Learning. If the
    services are already part of other VNets, we can always connect different networks
    via network peering as long as our VNets do not have overlapping addresses. We
    can connect networks by using VNet peering in the same or different subscriptions
    so ultimately your decision on how to segregate the networks in Azure is based
    on individual organizational requirements.
  prefs: []
  type: TYPE_NORMAL
- en: Network architecture in Azure
  prefs: []
  type: TYPE_NORMAL
- en: 'Find out more about network architectures by exploring network peering, the
    hub-spoke topology, and Azure landing zones:'
  prefs: []
  type: TYPE_NORMAL
- en: 'VNet peering: [https://learn.microsoft.com/en-us/azure/virtual-network/virtual-network-peering-overview](https://learn.microsoft.com/en-us/azure/virtual-network/virtual-network-peering-overview)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Hub-spoke: [https://learn.microsoft.com/en-us/azure/architecture/reference-architectures/hybrid-networking/hub-spoke?tabs=cli](https://learn.microsoft.com/en-us/azure/architecture/reference-architectures/hybrid-networking/hub-s)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Azure landing zones: [https://learn.microsoft.com/en-us/azure/cloud-adoption-framework/ready/landing-zone/](https://learn.microsoft.com/en-us/azure/cloud-adoption-framework/ready/landing-zone/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By integrating Azure Machine Learning with Azure VNets, we are adding an essential
    layer of security that will help in safeguarding our data, models, and other resources
    from unauthorized access and threats. Let us not forget to always monitor and
    regularly review the security measures to adapt to the evolving threat landscape.
  prefs: []
  type: TYPE_NORMAL
- en: Let us now explore further security practices for the workspace, starting with
    Azure Machine Learning compute.
  prefs: []
  type: TYPE_NORMAL
- en: Working with Azure Machine Learning compute
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Azure Machine Learning provides a scalable cloud environment to build, train,
    and deploy ML models. It offers different computational targets for running experiments,
    training models, and serving predictions.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are four targets overall, with two of these being managed internally
    from the workspace: **compute instances** and **compute clusters**. A compute
    instance is a managed VM that you use for development, training, and inferencing
    needs. It’s essentially a dedicated, personal workstation in the workspace. It
    can be used to run Jupyter notebooks and scripts. A compute cluster is a managed
    scalable set of virtual machines that are used for the large-scale training of
    ML models. Compute clusters automatically scale up or down (within the limits
    you set) based on the workload. So, for example, you can declare a minimum and
    maximum node and the machine will scale based on demand, which helps us optimize
    costs. There is also external compute, which you can use for inferencing, specifically
    the Azure Kubernetes service. You can also attach compute for training from external
    services to the workspace like Ubuntu VMs or Databricks compute.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, we will focus on securing the internal resources. For external
    services, you must find the best practices for securing each service. Here are
    some links to give you more information about securing inference and attached
    compute:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Azure Kubernetes Service: [https://learn.microsoft.com/en-us/azure/aks/concepts-security](https://learn.microsoft.com/en-us/azure/aks/concepts-security
    )'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Virtual Machine security: [https://learn.microsoft.com/en-us/azure/virtual-machines/security-recommendations](https://learn.microsoft.com/en-us/azure/virtual-machines/security-recommendations
    )'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Azure Databricks security guide: [https://learn.microsoft.com/en-us/azure/databricks/security/](https://learn.microsoft.com/en-us/azure/databricks/security/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Azure Data Lake security baseline: [https://learn.microsoft.com/en-us/security/benchmark/azure/baselines/data-lake-analytics-security-baseline](https://learn.microsoft.com/en-us/security/benchmark/azure/baselines/data-lake-analytics-security-baseline
    )'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The following sections will help you understand how to secure compute instances
    and compute clusters.
  prefs: []
  type: TYPE_NORMAL
- en: Securing compute instances
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The basis of securing both compute instances and compute clusters lies in the
    combination of using managed identities and network isolation. Let us follow along
    with the steps to enable them starting with compute instances.
  prefs: []
  type: TYPE_NORMAL
- en: 'From the Azure Machine Learning workspace, find the **Compute** menu under
    **Manage** and open it to view the list of available compute. In the **Compute
    instances** tab, click **+ New** to create a new compute instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.22 – New compute instance](img/B21076_07_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.22 – New compute instance
  prefs: []
  type: TYPE_NORMAL
- en: 'Fill in all tabs as desired until you reach the **Security** tab. Enable the
    **Assign a managed identity** button and leave the **Identity** type as **System-assigned**.
    Ensure that the **SSH** button is disabled to prevent public access, as when using
    a VNet, you can still **Secure Shell** (**SSH**) within that VNet to the machine.
    If you have previously restricted access to the workspace and associated resources,
    **Enable virtual network** will be enabled by default, making it mandatory to
    choose a **Virtual network** and **Subnet**. Choose the one created previously:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.23 – Setting compute instance security](img/B21076_07_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.23 – Setting compute instance security
  prefs: []
  type: TYPE_NORMAL
- en: Fill in the rest of the tabs as desired and create the compute. Remember to
    use the proper credentials in the scripts when using this compute for training.
  prefs: []
  type: TYPE_NORMAL
- en: Let us move on to securing compute clusters.
  prefs: []
  type: TYPE_NORMAL
- en: Securing compute clusters
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The process of securing compute clusters is very similar. To initiate the process
    from the **Compute** menu under **Manage**, choose the **Compute clusters** tab
    and click **+ New** to create a new compute instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.24 – New compute cluster](img/B21076_07_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.24 – New compute cluster
  prefs: []
  type: TYPE_NORMAL
- en: Fill in the **Virtual machine** tab as desired until you reach the **Advanced
    settings** tab. Scroll down until you reach the **Advanced settings** drop-down
    and ensure that **Enable SSH access** is disabled to prevent public access, enable
    **Assign a managed identity**, and leave the **Identity type** as **System-assigned**.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you have previously restricted access to the workspace and associated resources,
    again, the **Enable virtual network** will be enabled by default, making it mandatory
    to choose a **Virtual network** and **Subnet**. Choose the one created previously,
    as demonstrated in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.25 – Setting compute cluster security](img/B21076_07_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.25 – Setting compute cluster security
  prefs: []
  type: TYPE_NORMAL
- en: The process might be simple, but it is enough to isolate our compute resources
    from the public internet, preventing further vulnerabilities. Just remember that
    when running scripts on notebooks through compute, ensure the appropriate credentials
    are passed in the code. For an example of how to use managed identities, review
    the *Working with managed identities* section in [*Chapter 6*](B21076_06.xhtml#_idTextAnchor141).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us review the last resource associated with the workspace and its security
    features: Azure Container Registry.'
  prefs: []
  type: TYPE_NORMAL
- en: Managing container registries and containers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Azure Machine Learning provides an integrated, end-to-end data science workflow,
    enabling data scientists and developers to prepare data, experiment with models,
    and then deploy them in a scalable environment. A pivotal aspect of this deployment
    process involves containerization, which brings us to **Azure Container Registry**
    (**ACR**). ACR is a managed, private Docker container registry service based on
    the open source Docker Registry 2.0\. ACR allows users to build, store, and manage
    container images and artifacts in a secure and scalable manner within Azure. ACR
    integrates well with existing container development and deployment pipelines,
    and it’s especially useful for storing and managing the custom Docker images that
    can be deployed in various Azure services.
  prefs: []
  type: TYPE_NORMAL
- en: When working with Azure Machine Learning, there’s an underlying process that
    packages models for deployment. This packaging involves creating a Docker image
    that contains the model, the scoring script, and all the dependencies required
    to run the model. Once this Docker image is created, it needs to be stored somewhere
    where it can be fetched and run.
  prefs: []
  type: TYPE_NORMAL
- en: This is where ACR comes into play. When you deploy a model for the first time
    using Azure Machine Learning, even if you haven’t explicitly set up an Azure container
    registry, the platform will automatically create one for you. This is a seamless
    experience; however, we need to be aware of the implications for cost and security.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will see how to secure our ACR and deployed containers
    in **Azure Container Instances** (**ACI**). Let us start with ACR.
  prefs: []
  type: TYPE_NORMAL
- en: Securing images with Azure Container Registry
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Securing ACR involves a combination of best practices in network security, access
    control, and image security. Similarly, to the compute, security best practices
    for ACR involve using managed identities where possible and ensuring that the
    ACR is behind the same virtual network as the workspace.
  prefs: []
  type: TYPE_NORMAL
- en: To isolate the container registry in a VNet, the steps are similar to other
    resources. However, before we are able to use the networking features, we need
    to update the service to use a **Premium** pricing tier.
  prefs: []
  type: TYPE_NORMAL
- en: 'To update the pricing tier, visit the ACR blade of the resource associated
    with your workspace and find the **Properties** section. Update the values as
    shown in the next screenshot and click **Save**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.26 – Updating container registry properties](img/B21076_07_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.26 – Updating container registry properties
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we can use the networking features of the ACR. As we have already seen
    multiple times, go to the **Networking** section and set **Public access** to
    **Disabled**, as demonstrated in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.27 – Disable public access](img/B21076_07_27.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.27 – Disable public access
  prefs: []
  type: TYPE_NORMAL
- en: 'On the **Private access** tab, click on **Create a private** **endpoint connection**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.28 – Creating a private endpoint for the registry](img/B21076_07_28.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.28 – Creating a private endpoint for the registry
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow the steps as usual, ensuring that in the **Resources** tab of the **Private
    endpoint** form, you fill in the proper **Resource** and **Resource type**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.29 – Filling in the private endpoint form](img/B21076_07_29.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.29 – Filling in the private endpoint form
  prefs: []
  type: TYPE_NORMAL
- en: Securing ACR is a multi-faceted process. By taking a comprehensive approach
    that encompasses network security, access control, and constant monitoring, you
    can ensure that your container images remain safe and are only accessed by authenticated
    users or applications.
  prefs: []
  type: TYPE_NORMAL
- en: Container registries are only the repositories of the models. They can be exposed
    in published endpoints so that they can be available to applications. Let us explore
    how to secure those endpoints when deployed with ACI.
  prefs: []
  type: TYPE_NORMAL
- en: Working with ML endpoints
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When we deploy a model via the workspace, the options available are Azure Kubernetes
    and ACI. The fastest option is to use ACI, as they are deployed quickly via the
    workspace and there is no further configuration. If you want to be reminded of
    the process of deploying a model, you can review the *Deploying the model* section
    of [*Chapter 1*](B21076_01.xhtml#_idTextAnchor015).
  prefs: []
  type: TYPE_NORMAL
- en: After deploying an endpoint through the workspace, there is no option to disable
    public access to the container. In that case, what you can do is still register
    the model, but redeploy it using the saved container from the repository in a
    new ACI deployment. This provides the opportunity for network isolation.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do this, we need to choose the deployed image from the ACR connected with
    our workspace in the **Basic** tab of the container instance form. Begin to fill
    out the form as usual like in the next screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.30 – Filling in the basic details](img/B21076_07_30.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.30 – Filling in the basic details
  prefs: []
  type: TYPE_NORMAL
- en: 'When we reach the part where we need to choose an **Image source**, choose
    the ACR connected to your workspace. Fill in **Registry**, **Image**, and **Image
    tag** to correspond to your model and then fill out the rest of the form as desired:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.31 – Choosing the correct ACR](img/B21076_07_31.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.31 – Choosing the correct ACR
  prefs: []
  type: TYPE_NORMAL
- en: Next, you will find the **Networking** tab. From here, you can restrict networking.
  prefs: []
  type: TYPE_NORMAL
- en: Application considerations with VNet isolation
  prefs: []
  type: TYPE_NORMAL
- en: Be careful in this stage. It all depends on where your application is hosted
    since this endpoint is meant to be consumed by an external application to the
    service. If it is an application hosted on Azure, you can probably configure the
    access easily. If it is an internal application hosted on-premises, you would
    need some of the services mentioned previously, such as a VPN gateway to access
    the isolated endpoint. If it is a public-facing application, you might need to
    further configure the network security group or firewall attached to the VNet
    to allow access properly. As this part of the process is heavily dependent on
    other factors, ensure that you have explored all options of networking and authentication
    before proceeding to use that API endpoint for scoring, training, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'To isolate behind a VNet, choose the **Virtual network** and **Subnet**. The
    subnet must be a different one than the one we have used so far to accommodate
    endpoints instead of VMs. Refer to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.32 – Configuring network isolation](img/B21076_07_32.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.32 – Configuring network isolation
  prefs: []
  type: TYPE_NORMAL
- en: Then, you can complete the rest of the settings as desired and create the endpoint.
    Pay attention to environment variables if any are required. These can be filled
    in in the **Advanced** tab. Then, you can **Review + Create** the service. You
    can test the service from a VM deployed in the same VNet to test connectivity.
    This is just one way of isolating endpoints. Another way is to use workspace-managed
    network isolation, which is a new feature that is yet to be fully available. It
    is worth keeping up to date with this feature for the future.
  prefs: []
  type: TYPE_NORMAL
- en: Workspace-managed network isolation
  prefs: []
  type: TYPE_NORMAL
- en: 'Azure Machine Learning currently offers another option for integrated management
    for VNet isolation: automating the process with a VNet managed by the workspace.
    This feature is still in preview at the time of writing and should not be used
    for production workloads, as the service provides no **Service Level Agreement**
    (**SLA**). If you want to learn more, you can find more information at https://learn.microsoft.com/en-us/azure/machine-learning/how-to-managed-network?view=azureml-api-2&tabs=azure-cli.'
  prefs: []
  type: TYPE_NORMAL
- en: We have explored multiple ways to leverage Azure infrastructure to secure our
    Azure Machine Learning workspace and its associated resources. It is easier if
    we already have cloud infrastructure we can leverage that is used within our organization
    for other purposes. It is worth exploring even if we do not, as it can help not
    only with isolating our resources and reducing the attack surface area but also
    with preventing data exfiltration in the case of a security incident.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we talked about multiple aspects of leveraging networking to
    protect our Azure Machine Learning workloads.
  prefs: []
  type: TYPE_NORMAL
- en: The main aim of this chapter was to learn basic networking practices to isolate
    the workspace and all associated services, specifically storage accounts, key
    vaults, and Azure Container Registry. Although public access means access from
    the public internet and not unauthorized access, credentials can be leaked and
    malicious actors can gain access. By isolating our resources using VNets, we are
    reducing the attack surface area.
  prefs: []
  type: TYPE_NORMAL
- en: Combining networking and best practices regarding identity, such as configuring
    managed identities where possible and using proper RBAC with our users and services,
    we can take one step closer to maintaining a baseline security posture across
    our cloud services and infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will see how to automate best practices with **continuous
    integration and continuous delivery** (**CI/CD**) for our ML tasks.
  prefs: []
  type: TYPE_NORMAL
