- en: Chapter 7. Seam Carving
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章. 接缝裁剪
- en: In this chapter, we are going to learn about content-aware image resizing, which
    is also known as seam carving. We will discuss how to detect "interesting" parts
    in an image and how to use that information to resize a given image without deteriorating
    those interesting parts.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习关于内容感知图像缩放，这通常也被称为接缝裁剪。我们将讨论如何检测图像中的“有趣”部分，以及如何利用这些信息在不损害这些有趣部分的情况下调整给定图像的大小。
- en: 'By the end of this chapter, you will know:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，您将了解：
- en: What is content awareness
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是内容感知
- en: How to quantify "interesting" parts in an image
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何量化图像中的“有趣”部分
- en: How to use dynamic programming for image content analysis
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用动态规划进行图像内容分析
- en: How to increase and decrease the width of an image without deteriorating the
    interesting regions while keeping the height constant
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在不改变高度的情况下增加和减少图像宽度，同时保持有趣区域不退化
- en: How to make an object disappear from an image
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何从图像中移除对象
- en: Why do we care about seam carving?
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们为什么关心接缝裁剪？
- en: 'Before we start our discussion about seam carving, we need to understand why
    it is needed in the first place. Why should we care about the image content? Why
    can''t we just resize the given image and move on with our lives? Well, to answer
    that question, let''s consider the following image:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始讨论接缝裁剪之前，我们需要了解为什么它最初是必要的。为什么我们应该关心图像内容？为什么我们不能只是调整给定图像的大小，然后继续我们的生活呢？为了回答这个问题，让我们考虑以下图像：
- en: '![Why do we care about seam carving?](img/B04554_07_01.jpg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![我们为什么关心接缝裁剪？](img/B04554_07_01.jpg)'
- en: 'Now, let''s say we want to reduce the width of this image while keeping the
    height constant. If you do that, it will look something like this:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，假设我们想要在保持高度不变的情况下减少图像的宽度。如果你这样做，它看起来可能就像这样：
- en: '![Why do we care about seam carving?](img/B04554_07_02.jpg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![我们为什么关心接缝裁剪？](img/B04554_07_02.jpg)'
- en: As you can see, the ducks in the image look skewed, and there's degradation
    in the overall quality of the image. Intuitively speaking, we can say that the
    ducks are the "interesting" parts in the image. So when we resize it, we want
    the ducks to be intact. This is where seam carving comes into the picture. Using
    seam carving, we can detect these interesting regions and make sure they don't
    get degraded.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，图像中的鸭子看起来是倾斜的，整体图像质量有所下降。直观地说，我们可以认为鸭子是图像中的“有趣”部分。因此，当我们调整图像大小时，我们希望鸭子保持完整。这就是接缝裁剪发挥作用的地方。使用接缝裁剪，我们可以检测这些有趣区域，并确保它们不会退化。
- en: How does it work?
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的？
- en: We have been talking about image resizing and how we should consider the image's
    content when we resize it. So, why on earth is it called seam carving? It should
    just be called content-aware image resizing, right? Well, there are many different
    terms that are used to describe this process, such as image retargeting, liquid
    scaling, seam carving, and so on. The reason it's called seam carving is because
    of the way we resize the image. The algorithm was proposed by Shai Avidan and
    Ariel Shamir. You can refer to the original paper at [http://dl.acm.org/citation.cfm?id=1276390](http://dl.acm.org/citation.cfm?id=1276390).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们一直在讨论图像缩放以及我们在缩放图像时应考虑图像的内容。那么，为什么它被称为接缝裁剪呢？它应该只是被称为内容感知图像缩放，对吧？嗯，有许多不同的术语用来描述这个过程，例如图像重定位、液体缩放、接缝裁剪等等。它被称为接缝裁剪的原因是因为我们调整图像的方式。该算法由Shai
    Avidan和Ariel Shamir提出。您可以在[http://dl.acm.org/citation.cfm?id=1276390](http://dl.acm.org/citation.cfm?id=1276390)查阅原始论文。
- en: 'We know that the goal is to resize the given image and keep the interesting
    content intact. So, we do that by finding the paths of least importance in that
    image. These paths are called seams. Once we find these seams, we remove them
    from the image to obtain a rescaled image. This process of removing, or "carving",
    will eventually result in a resized image. This is the reason we call it "seam
    carving". Consider the image that follows:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们知道目标是调整给定图像的大小，同时保持有趣内容完整。因此，我们通过找到图像中最重要的路径来实现这一点。这些路径被称为接缝。一旦我们找到这些接缝，我们就从图像中移除它们，以获得缩放后的图像。这个过程，即移除或“裁剪”，最终会导致图像大小的调整。这就是我们称之为“接缝裁剪”的原因。考虑以下图像：
- en: '![How does it work?](img/B04554_07_03.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的？](img/B04554_07_03.jpg)'
- en: In the preceding image, we can see how we can roughly divide the image into
    interesting and uninteresting parts. We need to make sure that our algorithm detects
    these uninteresting parts and removes them. Let's consider the ducks image and
    the constraints we have to work with. We need to keep the height constant. This
    means that we need to find vertical seams in the image and remove them. These
    seams start at the top and end at the bottom (or vice versa). If we were dealing
    with vertical resizing, then the seams would start on the left-hand side and end
    on the right. A vertical seam is just a bunch of connected pixels starting at
    the top row and ending at the last row in the image.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的图像中，我们可以看到如何大致地将图像分为有趣和无趣的部分。我们需要确保我们的算法能够检测这些无趣的部分并将它们移除。让我们考虑鸭子图像和我们必须处理的约束条件。我们需要保持高度不变。这意味着我们需要在图像中找到垂直缝合线并将它们移除。这些缝合线从顶部开始，到顶部结束（或反之亦然）。如果我们处理的是垂直缩放，那么缝合线将从左侧开始，到右侧结束。垂直缝合线只是一系列从顶部行开始，到图像最后一行结束的连接像素。
- en: How do we define "interesting"?
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们如何定义“有趣”？
- en: Before we start computing the seams, we need to find out what metric we will
    be using to compute these seams. We need a way to assign "importance" to each
    pixel so that we can find out the paths that are least important. In computer
    vision terminology, we say that we need to assign an energy value to each pixel
    so that we can find the path of minimum energy. Coming up with a good way to assign
    the energy value is very important because it will affect the quality of the output.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始计算缝合线之前，我们需要确定我们将使用什么度量标准来计算这些缝合线。我们需要一种方法来为每个像素分配“重要性”，以便我们可以找到最不重要的路径。在计算机视觉术语中，我们说我们需要为每个像素分配一个能量值，以便我们可以找到能量最低的路径。想出一个好的方法来分配能量值非常重要，因为它将影响输出的质量。
- en: One of the metrics that we can use is the value of the derivative at each point.
    This is a good indicator of the level of activity in that neighborhood. If there
    is some activity, then the pixel values will change rapidly. Hence the value of
    the derivative at that point would be high. On the other hand, if the region were
    plain and uninteresting, then the pixel values wouldn't change as rapidly. So,
    the value of the derivative at that point in the grayscale image would be low.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用的一个度量标准是每个点的导数值。这是该邻域活动水平的好指标。如果有活动，那么像素值会迅速变化。因此，该点的导数值会很高。另一方面，如果该区域平淡无趣，那么像素值不会迅速变化。因此，在灰度图像中该点的导数值会很低。
- en: For each pixel location, we compute the energy by summing up the X and Y derivatives
    at that point. We compute the derivatives by taking the difference between the
    current pixel and its neighbors. If you recall, we did something similar to this
    when we were doing edge detection using **Sobel Filter** in [Chapter 2](ch02.html
    "Chapter 2. Detecting Edges and Applying Image Filters"), *Detecting Edges and
    Applying Image Filters*. Once we compute these values, we store them in a matrix
    called the energy matrix.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个像素位置，我们通过计算该点的X和Y导数来计算能量。我们通过取当前像素与其邻居之间的差来计算导数。如果你还记得，当我们使用**索贝尔滤波器**在[第2章](ch02.html
    "第2章. 检测边缘和应用图像滤波器")中进行边缘检测时，我们做了类似的事情，*检测边缘和应用图像滤波器*。一旦我们计算了这些值，我们就将它们存储在一个称为能量矩阵的矩阵中。
- en: How do we compute the seams?
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们如何计算缝合线？
- en: Now that we have the energy matrix, we are ready to compute the seams. We need
    to find the path through the image with the least energy. Computing all the possible
    paths is prohibitively expensive, so we need to find a smarter way to do this.
    This is where dynamic programming comes into the picture. In fact, seam carving
    is a direct application of dynamic programming. We need to start with each pixel
    in the first row and find our way to the last row. In order to find the path of
    least energy, we compute and store the best paths to each pixel in a table. Once
    we've construct this table, the path to a particular pixel can be found by backtracking
    through the rows in that table.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经得到了能量矩阵，我们准备计算缝合线。我们需要找到通过图像中能量最低的路径。计算所有可能的路径代价过高，因此我们需要找到一种更智能的方法来完成这项工作。这正是动态规划发挥作用的地方。实际上，缝合线裁剪是动态编程的直接应用。我们需要从第一行的每个像素开始，找到到达最后一行的路径。为了找到能量最低的路径，我们在一个表中计算并存储到达每个像素的最佳路径。一旦我们构建了这个表，就可以通过在该表中回溯行来找到特定像素的路径。
- en: For each pixel in the current row, we calculate the energy of three possible
    pixel locations in the next row that we can move to, that is, bottom left, bottom,
    and bottom right. We keep repeating this process until we reach the bottom. Once
    we reach the bottom, we take the one with the least cumulative value and backtrack
    our way to the top. This will give us the path of least energy. Every time we
    remove a seam, the width of the image decreases by `1`. So we need to keep removing
    these seams until we arrive at the required image size.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 对于当前行的每个像素，我们计算下一个行中可以移动到的三个可能像素位置的能量，即左下角、底部和右下角。我们重复这个过程，直到到达底部。一旦到达底部，我们选择累积值最小的一个，然后回溯到顶部。这将给我们提供最低能量的路径。每次我们移除一个接缝，图像的宽度就会减少`1`。因此，我们需要继续移除这些接缝，直到达到所需的图像大小。
- en: 'Let''s consider our ducks image again. If you compute the first 30 seams, it
    will look something like this:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再次考虑我们的鸭子图像。如果你计算前30个接缝，它看起来会像这样：
- en: '![How do we compute the seams?](img/B04554_07_04.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![我们如何计算接缝？](img/B04554_07_04.jpg)'
- en: 'These green lines indicate the paths of least importance. As we can see here,
    they carefully go around the ducks to make sure that the interesting regions are
    not touched. In the upper half of the image, the seams go around the twigs so
    that the quality is preserved. Technically speaking, the twigs are also "interesting".
    If you continue and remove the first 100 seams, it will look something like this:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这些绿色线条表示的是最不重要的路径。正如我们在这里看到的，它们小心翼翼地绕过鸭子，以确保不会触及有趣区域。在图像的上半部分，接缝绕着树枝走，以保持质量。从技术上讲，树枝也是“有趣的”。如果你继续并移除前100个接缝，它看起来会像这样：
- en: '![How do we compute the seams?](img/B04554_07_05.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![我们如何计算接缝？](img/B04554_07_05.jpg)'
- en: Now, compare this with the naively resized image. Doesn't it look much better?
    The ducks look nice in this image.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将这个与简单地调整大小的图像进行比较。它看起来不是好多了吗？这幅图像中的鸭子看起来很漂亮。
- en: 'Let''s take a look at the code and see how to do it:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看代码，看看如何实现：
- en: '[PRE0]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Can we expand an image?
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们能否扩展一个图像？
- en: We know that we can use seam carving to reduce the width of an image without
    deteriorating the interesting regions. So naturally, we need to ask ourselves
    if we can expand an image without deteriorating the interesting regions? As it
    turns out, we can do it using the same logic. When we compute the seams, we just
    need to add an extra column instead of deleting it.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们知道我们可以使用接缝裁剪来减小图像的宽度，而不会损害有趣区域。因此，我们自然会问自己，我们能否在不损害有趣区域的情况下扩展图像？事实证明，我们可以使用相同的逻辑来实现。当我们计算接缝时，我们只需要添加一个额外的列而不是删除它。
- en: 'If you expand the ducks image naively, it will look something like this:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你天真地扩展鸭子图像，它看起来会像这样：
- en: '![Can we expand an image?](img/B04554_07_06.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![我们能否扩展一个图像？](img/B04554_07_06.jpg)'
- en: 'If you do it in a smarter way, that is, by using seam carving, it will look
    something like this:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你以更智能的方式来做，即使用接缝裁剪，它看起来会像这样：
- en: '![Can we expand an image?](img/B04554_07_07.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![我们能否扩展一个图像？](img/B04554_07_07.jpg)'
- en: 'As you can see here, the width of the image has increased and the ducks don''t
    look stretched. Following is the code to do it:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，图像的宽度增加了，鸭子看起来没有被拉伸。以下是实现这一功能的代码：
- en: '[PRE1]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We added an extra function, `add_vertical_seam`, in this code. We use it to
    add vertical seams so that the image looks natural.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个代码中，我们添加了一个额外的函数，`add_vertical_seam`。我们使用它来添加垂直接缝，使图像看起来更自然。
- en: Can we remove an object completely?
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们能否完全移除一个对象？
- en: 'This is perhaps the most interesting application of seam carving. We can make
    an object completely disappear from an image. Let''s consider the following image:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能是接缝裁剪最有趣的应用之一。我们可以使一个对象从图像中完全消失。让我们考虑以下图像：
- en: '![Can we remove an object completely?](img/B04554_07_08.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![我们能否完全移除一个对象？](img/B04554_07_08.jpg)'
- en: 'Let''s select the region of interest:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们选择感兴趣的区域：
- en: '![Can we remove an object completely?](img/B04554_07_09.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![我们能否完全移除一个对象？](img/B04554_07_09.jpg)'
- en: 'After you remove the chair on the right, it will look something like this:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在你移除右侧的椅子后，它看起来会像这样：
- en: '![Can we remove an object completely?](img/B04554_07_10.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![我们能否完全移除一个对象？](img/B04554_07_10.jpg)'
- en: 'It''s as if the chair never existed! Before we look at the code, it''s important
    to know that this takes a while to run. So, just wait for a couple of minutes
    to get an idea of the processing time. You can adjust the input image size accordingly!
    Let''s take a look at the code:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 就好像椅子从未存在过一样！在我们查看代码之前，重要的是要知道这需要一段时间才能运行。所以，请耐心等待几分钟，以便了解处理时间。你可以相应地调整输入图像的大小！让我们来看看代码：
- en: '[PRE2]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: How did we do it?
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们是如何做到的？
- en: The basic logic remains the same here. We are using seam carving to remove an
    object. Once we select the region of interest, we make all the seams pass through
    this region. We do this by manipulating the energy matrix after every iteration.
    We have added a new function called `compute_energy_matrix_modified` to achieve
    this. Once we compute the energy matrix, we assign a value of 0 to this region
    of interest. This way, we force all the seams to pass through this area. After
    we remove all the seams related to this region, we keep adding the seams until
    we expand the image to its original width.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 基本逻辑在这里保持不变。我们正在使用 seam carving 来移除对象。一旦我们选择了感兴趣的区域，我们就让所有的 seams 都通过这个区域。我们通过在每次迭代后操作能量矩阵来实现这一点。我们添加了一个名为
    `compute_energy_matrix_modified` 的新函数来完成这个任务。一旦我们计算了能量矩阵，我们就将一个值为 0 的值分配给这个感兴趣的区域。这样，我们就迫使所有的
    seams 都通过这个区域。在我们移除与这个区域相关的所有 seams 之后，我们继续添加 seams，直到将图像扩展到其原始宽度。
- en: Summary
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned about content-aware image resizing. We discussed
    how to quantify interesting and uninteresting regions in an image. We learned
    how to compute seams in an image and how to use dynamic programming to do it efficiently.
    We discussed how to use seam carving to reduce the width of an image, and how
    we can use the same logic to expand an image. We also learned how to remove an
    object from an image completely.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了内容感知图像缩放。我们讨论了如何在图像中量化有趣和无趣的区域。我们学习了如何计算图像中的 seams 以及如何使用动态规划来高效地完成这项工作。我们还讨论了如何使用
    seam carving 来减小图像的宽度，以及如何使用相同的逻辑来扩展图像。此外，我们还学习了如何完全从图像中移除一个对象。
- en: In the next chapter, we are going to discuss how to do shape analysis and image
    segmentation. We will see how to use those principles to find the exact boundaries
    of an object of interest in the image.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论如何进行形状分析和图像分割。我们将看到如何使用这些原则来找到图像中感兴趣对象的精确边界。
