- en: Chapter 7. Seam Carving
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we are going to learn about content-aware image resizing, which
    is also known as seam carving. We will discuss how to detect "interesting" parts
    in an image and how to use that information to resize a given image without deteriorating
    those interesting parts.
  prefs: []
  type: TYPE_NORMAL
- en: 'By the end of this chapter, you will know:'
  prefs: []
  type: TYPE_NORMAL
- en: What is content awareness
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to quantify "interesting" parts in an image
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to use dynamic programming for image content analysis
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to increase and decrease the width of an image without deteriorating the
    interesting regions while keeping the height constant
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to make an object disappear from an image
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Why do we care about seam carving?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we start our discussion about seam carving, we need to understand why
    it is needed in the first place. Why should we care about the image content? Why
    can''t we just resize the given image and move on with our lives? Well, to answer
    that question, let''s consider the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Why do we care about seam carving?](img/B04554_07_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, let''s say we want to reduce the width of this image while keeping the
    height constant. If you do that, it will look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Why do we care about seam carving?](img/B04554_07_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, the ducks in the image look skewed, and there's degradation
    in the overall quality of the image. Intuitively speaking, we can say that the
    ducks are the "interesting" parts in the image. So when we resize it, we want
    the ducks to be intact. This is where seam carving comes into the picture. Using
    seam carving, we can detect these interesting regions and make sure they don't
    get degraded.
  prefs: []
  type: TYPE_NORMAL
- en: How does it work?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have been talking about image resizing and how we should consider the image's
    content when we resize it. So, why on earth is it called seam carving? It should
    just be called content-aware image resizing, right? Well, there are many different
    terms that are used to describe this process, such as image retargeting, liquid
    scaling, seam carving, and so on. The reason it's called seam carving is because
    of the way we resize the image. The algorithm was proposed by Shai Avidan and
    Ariel Shamir. You can refer to the original paper at [http://dl.acm.org/citation.cfm?id=1276390](http://dl.acm.org/citation.cfm?id=1276390).
  prefs: []
  type: TYPE_NORMAL
- en: 'We know that the goal is to resize the given image and keep the interesting
    content intact. So, we do that by finding the paths of least importance in that
    image. These paths are called seams. Once we find these seams, we remove them
    from the image to obtain a rescaled image. This process of removing, or "carving",
    will eventually result in a resized image. This is the reason we call it "seam
    carving". Consider the image that follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How does it work?](img/B04554_07_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding image, we can see how we can roughly divide the image into
    interesting and uninteresting parts. We need to make sure that our algorithm detects
    these uninteresting parts and removes them. Let's consider the ducks image and
    the constraints we have to work with. We need to keep the height constant. This
    means that we need to find vertical seams in the image and remove them. These
    seams start at the top and end at the bottom (or vice versa). If we were dealing
    with vertical resizing, then the seams would start on the left-hand side and end
    on the right. A vertical seam is just a bunch of connected pixels starting at
    the top row and ending at the last row in the image.
  prefs: []
  type: TYPE_NORMAL
- en: How do we define "interesting"?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we start computing the seams, we need to find out what metric we will
    be using to compute these seams. We need a way to assign "importance" to each
    pixel so that we can find out the paths that are least important. In computer
    vision terminology, we say that we need to assign an energy value to each pixel
    so that we can find the path of minimum energy. Coming up with a good way to assign
    the energy value is very important because it will affect the quality of the output.
  prefs: []
  type: TYPE_NORMAL
- en: One of the metrics that we can use is the value of the derivative at each point.
    This is a good indicator of the level of activity in that neighborhood. If there
    is some activity, then the pixel values will change rapidly. Hence the value of
    the derivative at that point would be high. On the other hand, if the region were
    plain and uninteresting, then the pixel values wouldn't change as rapidly. So,
    the value of the derivative at that point in the grayscale image would be low.
  prefs: []
  type: TYPE_NORMAL
- en: For each pixel location, we compute the energy by summing up the X and Y derivatives
    at that point. We compute the derivatives by taking the difference between the
    current pixel and its neighbors. If you recall, we did something similar to this
    when we were doing edge detection using **Sobel Filter** in [Chapter 2](ch02.html
    "Chapter 2. Detecting Edges and Applying Image Filters"), *Detecting Edges and
    Applying Image Filters*. Once we compute these values, we store them in a matrix
    called the energy matrix.
  prefs: []
  type: TYPE_NORMAL
- en: How do we compute the seams?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have the energy matrix, we are ready to compute the seams. We need
    to find the path through the image with the least energy. Computing all the possible
    paths is prohibitively expensive, so we need to find a smarter way to do this.
    This is where dynamic programming comes into the picture. In fact, seam carving
    is a direct application of dynamic programming. We need to start with each pixel
    in the first row and find our way to the last row. In order to find the path of
    least energy, we compute and store the best paths to each pixel in a table. Once
    we've construct this table, the path to a particular pixel can be found by backtracking
    through the rows in that table.
  prefs: []
  type: TYPE_NORMAL
- en: For each pixel in the current row, we calculate the energy of three possible
    pixel locations in the next row that we can move to, that is, bottom left, bottom,
    and bottom right. We keep repeating this process until we reach the bottom. Once
    we reach the bottom, we take the one with the least cumulative value and backtrack
    our way to the top. This will give us the path of least energy. Every time we
    remove a seam, the width of the image decreases by `1`. So we need to keep removing
    these seams until we arrive at the required image size.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s consider our ducks image again. If you compute the first 30 seams, it
    will look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How do we compute the seams?](img/B04554_07_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'These green lines indicate the paths of least importance. As we can see here,
    they carefully go around the ducks to make sure that the interesting regions are
    not touched. In the upper half of the image, the seams go around the twigs so
    that the quality is preserved. Technically speaking, the twigs are also "interesting".
    If you continue and remove the first 100 seams, it will look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How do we compute the seams?](img/B04554_07_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now, compare this with the naively resized image. Doesn't it look much better?
    The ducks look nice in this image.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at the code and see how to do it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Can we expand an image?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We know that we can use seam carving to reduce the width of an image without
    deteriorating the interesting regions. So naturally, we need to ask ourselves
    if we can expand an image without deteriorating the interesting regions? As it
    turns out, we can do it using the same logic. When we compute the seams, we just
    need to add an extra column instead of deleting it.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you expand the ducks image naively, it will look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Can we expand an image?](img/B04554_07_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'If you do it in a smarter way, that is, by using seam carving, it will look
    something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Can we expand an image?](img/B04554_07_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see here, the width of the image has increased and the ducks don''t
    look stretched. Following is the code to do it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: We added an extra function, `add_vertical_seam`, in this code. We use it to
    add vertical seams so that the image looks natural.
  prefs: []
  type: TYPE_NORMAL
- en: Can we remove an object completely?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This is perhaps the most interesting application of seam carving. We can make
    an object completely disappear from an image. Let''s consider the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Can we remove an object completely?](img/B04554_07_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s select the region of interest:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Can we remove an object completely?](img/B04554_07_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'After you remove the chair on the right, it will look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Can we remove an object completely?](img/B04554_07_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'It''s as if the chair never existed! Before we look at the code, it''s important
    to know that this takes a while to run. So, just wait for a couple of minutes
    to get an idea of the processing time. You can adjust the input image size accordingly!
    Let''s take a look at the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: How did we do it?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The basic logic remains the same here. We are using seam carving to remove an
    object. Once we select the region of interest, we make all the seams pass through
    this region. We do this by manipulating the energy matrix after every iteration.
    We have added a new function called `compute_energy_matrix_modified` to achieve
    this. Once we compute the energy matrix, we assign a value of 0 to this region
    of interest. This way, we force all the seams to pass through this area. After
    we remove all the seams related to this region, we keep adding the seams until
    we expand the image to its original width.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about content-aware image resizing. We discussed
    how to quantify interesting and uninteresting regions in an image. We learned
    how to compute seams in an image and how to use dynamic programming to do it efficiently.
    We discussed how to use seam carving to reduce the width of an image, and how
    we can use the same logic to expand an image. We also learned how to remove an
    object from an image completely.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we are going to discuss how to do shape analysis and image
    segmentation. We will see how to use those principles to find the exact boundaries
    of an object of interest in the image.
  prefs: []
  type: TYPE_NORMAL
