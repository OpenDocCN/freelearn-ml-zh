- en: '11'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Avoiding and Detecting Data and Concept Drifts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We talked about the effect of data and concept drifts in machine learning modeling
    in [*Chapter 9*](B16369_09.xhtml#_idTextAnchor261), *Testing and Debugging for
    Production*. In this chapter, we want to go deeper into these concepts and practice
    detecting drifts in Python.
  prefs: []
  type: TYPE_NORMAL
- en: Here, you will learn about the importance of concepts we introduced earlier,
    such as model versioning and model monitoring, to avoid drifts and practice with
    some of the Python libraries for drift detection.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Avoiding drifts in your models
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detecting drifts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this chapter, you will be able to detect drifts in your machine
    learning models in Python and have reliable models in production.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following requirements apply to this chapter as they help you better understand
    the concepts, allow you to use them in your projects, and to practice with the
    provided code:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Python library requirements are as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sklearn` >= 1.2.2'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`numpy` >= 1.22.4'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pandas` >= 1.4.4'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`alibi_detect` >= 0.11.1'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`lightgbm` >= 3.3.5'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`evidently` >= 0.2.8'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Understanding of the following is required:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data and concept drift
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Data and model versioning
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: You can find the code files for this chapter on GitHub at [https://github.com/PacktPublishing/Debugging-Machine-Learning-Models-with-Python/tree/main/Chapter11](https://github.com/PacktPublishing/Debugging-Machine-Learning-Models-with-Python/tree/main/Chapter11).
  prefs: []
  type: TYPE_NORMAL
- en: Avoiding drifts in your models
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Data and concept drifts challenge the reliability of machine learning models
    in production. Drifts in our machine learning projects can have different characteristics.
    Some of these characteristics that could help you to detect drifts in your projects
    and plan to resolve them are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Magnitude**: We might face magnitudes of difference across the data distribution
    that result in drift in our machine learning models. Small changes in the data
    distribution may be difficult to detect, while large changes may be more noticeable.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Frequency**: Drifts might occur in different frequencies.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Gradual versus sudden**: Data drift can occur gradually where changes in
    the data distribution happen slowly over time, or it can occur suddenly where
    changes happen quickly and unexpectedly.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Predictability**: Some types of drift may be predictable, such as changes
    that occur seasonally or due to external events. Other types of drift may be unpredictable,
    such as sudden changes in consumer behavior or market trends.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Intentionality**: Drift can be intentional, such as changes made to the data
    generation process, or unintentional, such as changes that occur naturally over
    time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We need to use techniques and practices that help us avoid the occurrence and
    pile-up of drifts in our machine learning modeling projects.
  prefs: []
  type: TYPE_NORMAL
- en: Avoiding data drift
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Having access to different versions of the data in different stages of the machine
    learning life cycle of our models can help us to better detect drift by comparing
    the data in training and production, assessing data processing pre-training, or
    identifying data selection criteria that could have caused drift. Model monitoring
    also helps us to identify drifts early on and avoid pile-up.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s practice drift monitoring by simply checking the mean of the distribution
    of features between versions of data used for model training, and the new data
    in production. We will first define a class to monitor for data drift. Here, we
    consider drift in a feature if the difference between the mean of the distributions
    between the two versions of the data is bigger than 0.1:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we use it to identify drift between two synthetic datasets:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'This generates the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Addressing concept drift
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can similarly define classes and functions with criteria to detect concept
    drift, as we practiced for data drift detection. But we can also check, either
    programmatically or as part of quality assurance when bringing our machine learning
    models into production, for external factors that might cause concept drift such
    as environmental factors, changes in institutional or governmental policies, et
    cetera. In addition to monitoring the data, we can benefit from feature engineering
    to select features that are more robust to concept drift or ensemble models to
    be adapted dynamically in case of concept drift.
  prefs: []
  type: TYPE_NORMAL
- en: Although avoiding drift in our models is ideal, we need to be ready to detect
    and eliminate it in practice. Next, you will learn techniques to detect drift
    in your model. From a practical perspective, avoiding and detecting drifts in
    your model are very similar. But there are better techniques than simply checking
    the mean of feature distributions (as we used for avoiding data drift in this
    section) that we will practice in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Detecting drifts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Avoiding drifts altogether in all our models is not possible, but we can aim
    to detect them early on and eliminate them. Here, we are going to practice drift
    detection with `alibi_detect` and `evidently` in Python.
  prefs: []
  type: TYPE_NORMAL
- en: Practicing with alibi_detect for drift detection
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'One of the widely-used Python libraries for drift detection that we want to
    practice with is `alibi_detect`. We will first import the necessary Python functions
    and classes and generate a synthetic dataset with 10 features and 10,000 samples
    using `make_classification` from `scikit-learn`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we split the data into train and test sets:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we train a `LightGBM` classifier on the training data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'We now evaluate the performance of the model on the test set and define a test
    label DataFrame to use for drift detection:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we use the defined DataFrame of predictions and actual labels of the test
    data points to detect drift. We initialize the `KSDrift` detector from the `alibi_detect`
    package and fit it onto the training data. We use the `predict` method of the
    detector to calculate the drift scores and p-values on the test data. The drift
    scores indicate the level of drift for each feature, while the p-values indicate
    the statistical significance of the drift. If any of the drift scores or p-values
    are above a certain threshold, we may consider the model to be experiencing drift
    and take appropriate action, such as retraining the model with updated data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Here are the resulting drift scores and p-values. As all the p-values are greater
    than 0.1, and considering the threshold is 0.005, we can say that no drift is
    detected in this case:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Practicing with evidently for drift detection
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Another widely-used Python library for drift detection that we will practice
    with here is `evidently`. After importing the necessary libraries, we load the
    diabetes dataset from `scikit-learn`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The following table shows the features we want to work on from the diabetes
    dataset for drift detection and their meanings:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Feature** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `preg` | Number of times pregnant |'
  prefs: []
  type: TYPE_TB
- en: '| `plas` | Plasma glucose concentration after 2 hours in an oral glucose tolerance
    test |'
  prefs: []
  type: TYPE_TB
- en: '| `skin` | Triceps skinfold thickness (mm) |'
  prefs: []
  type: TYPE_TB
- en: '| `insu` | 2-hour serum insulin (mu U/ml) |'
  prefs: []
  type: TYPE_TB
- en: '| `mass` | Body mass index (weight in kg/(height in m)^2) |'
  prefs: []
  type: TYPE_TB
- en: '| `pedi` | Diabetes pedigree function |'
  prefs: []
  type: TYPE_TB
- en: '| `Age` | Age (years) |'
  prefs: []
  type: TYPE_TB
- en: Table 11.1 – Feature names and their description in diabetes dataset used for
    drift detection (Efron et al., 2004)
  prefs: []
  type: TYPE_NORMAL
- en: 'We separate two sets of datapoints called reference and current sets, then
    generate a drift report using `Report()` from the `evidently.report.Reference`
    set to include all individuals aged less than or equal to 40 years, and the current
    set to include others in the dataset aged more than 40 years:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The following illustration is of the report we generated for the diabetes dataset,
    considering the selected features and separated reference and current sets:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 11.1 – Drift report for \uFEFFthe separated reference and current\
    \ data from the diabetes dataset](img/B16369_11_01.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 11.1 – Drift report for the separated reference and current data from
    the diabetes dataset
  prefs: []
  type: TYPE_NORMAL
- en: 'We can see that `age`, `preg`, `plas`, `insu`, and `skin` are the features
    with significant differences in their distributions between the reference and
    current sets, which are specified as features with detected drift in the report
    shown in *Figure 11**.1*. In spite of the significance of the difference between
    the distributions, having complementary statistics such as difference of mean
    could be helpful to develop a more reliable drift detection strategy. We can also
    get the distribution of the features from the report, such as the distributions
    of `age` and `preg` in the reference and current sets in *Figures 11.2* and*11.3*,
    respectively:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 11.2 – Distribution of \uFEFFthe age feature in both current and reference\
    \ data](img/B16369_11_02.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 11.2 – Distribution of the age feature in both current and reference
    data
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 11.3 – Distribution of \uFEFFthe preg feature in both current and\
    \ reference data](img/B16369_11_03.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 11.3 – Distribution of the preg feature in both current and reference
    data
  prefs: []
  type: TYPE_NORMAL
- en: When we detect drifts in our models, we might need to retrain them by ingesting
    new data or by filtering part of the data that might be the source of the drift.
    We might also need to change model training if concept drift is detected.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, you learned about the importance of avoiding drift in your
    machine learning models, and how you can benefit from the concepts you learned
    in previous chapters such as model versioning and monitoring to do so. You also
    practiced with two libraries for drift detection in Python: `alibi_detect` and
    `evidently`. Using these or similar libraries will help you to eliminate drift
    in your models and have reliable models in production.'
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn about different types of deep neural network
    models and how to use PyTorch to develop reliable deep learning models.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Could you explain the difference between magnitude and frequency as two characteristics
    of drift in machine learning modeling?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is an example of a statistical test we can use for data drift detection?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ackerman, Samuel, et al. “*Detection of data drift and outliers affecting machine
    learning model performance over time*.” arXiv preprint arXiv:2012.09258 (2020).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ackerman, Samuel, et al. “*Automatically detecting data drift in machine learning
    classifiers*.” arXiv preprint arXiv:2111.05672 (2021).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Efron, Bradley, Trevor Hastie, Iain Johnstone, and Robert Tibshirani (2004)
    “*Least Angle Regression*,” Annals of Statistics (with discussion), 407-499
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Gama, João, et al. “*A survey on concept drift adaptation*.” ACM computing
    surveys (CSUR) 46.4 (2014): 1-37.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Lu, Jie, et al. “*Learning under concept drift: A review*.” IEEE transactions
    on knowledge and data engineering 31.12 (2018): 2346-2363.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Mallick, Ankur, et al. “*Matchmaker: Data drift mitigation in machine learning
    for large-scale systems*.” Proceedings of Machine Learning and Systems 4 (2022):
    77-94.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Zenisek, Jan, Florian Holzinger, and Michael Affenzeller. “*Machine learning
    based concept drift detection for predictive maintenance*.” Computers & Industrial
    Engineering 137 (2019): 106031.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Part 4:Deep Learning Modeling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this part of the book, we will lay the foundation with an introduction to
    the underlying theories of deep learning, and then transition to hands-on exploration
    of fully connected neural networks. We will then learn about more advanced techniques
    including convolutional neural networks, transformers, and graph neural networks.
    Concluding this part, we will spotlight the cutting-edge advancements in machine
    learning, with a keen focus on generative modeling and an introduction to reinforcement
    and self-supervised learning. Throughout these chapters, practical examples are
    provided using Python and PyTorch, ensuring that we gain both theoretical knowledge
    as well as hands-on experience.
  prefs: []
  type: TYPE_NORMAL
- en: 'This part has the following chapters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 12*](B16369_12.xhtml#_idTextAnchor320), *Going Beyond ML Debugging
    with Deep Learning*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 13*](B16369_13.xhtml#_idTextAnchor342), *Advanced Deep Learning Techniques*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 14*](B16369_14.xhtml#_idTextAnchor379), *Introduction to Recent Advancements
    in Machine Learning*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
