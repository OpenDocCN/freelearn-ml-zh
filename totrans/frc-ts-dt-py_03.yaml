- en: '3'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: How Prophet Works
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes, Prophet can feel like magic, creating a complex forecast with barely
    any user instructions! But if you understand the equations behind Prophet, you’ll
    notice that it isn’t magic at all, but in fact, a very flexible algorithm for
    extracting multiple simultaneous patterns in the data.
  prefs: []
  type: TYPE_NORMAL
- en: All of this math may feel intimidating to those without a strong statistical
    background, but it is actually quite approachable, and an understanding of the
    math behind the magic will be to your benefit as you begin to forecast more complex
    datasets. In this chapter, we’ll walk through all of the relevant equations together.
    If you start to feel lost, don’t fret! All will become clear as you use Prophet
    more and more.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will introduce the reasons Facebook (now, Meta) chose to develop
    its own forecasting package, rather than rely on one of the many already existing
    tools. Next, you will learn about Facebook’s forecasting philosophy: a combination
    of the analyst’s knowledge and computing automation. Finally, you’ll look at the
    equations Prophet uses to build its models, and you’ll then tear them apart to
    see the role each term plays in the forecast.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will discuss the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Facebook’s motivation for building Prophet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Analyst-in-the-loop forecasting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The math behind Prophet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The data files and code examples in this chapter can be found at [https://github.com/PacktPublishing/Forecasting-Time-Series-Data-with-Prophet-Second-Edition](https://github.com/PacktPublishing/Forecasting-Time-Series-Data-with-Prophet-Second-Edition).
  prefs: []
  type: TYPE_NORMAL
- en: Please refer to the *Preface* of this book for the technical requirements necessary
    to run the code examples.
  prefs: []
  type: TYPE_NORMAL
- en: Facebook’s motivation for building Prophet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As mentioned when introducing Prophet in [*Chapter 1*](B19630_01.xhtml#_idTextAnchor031),
    *The History and Development of Time Series Forecasting*, Facebook noticed that
    the internal demand for business forecasts was increasing. Its forecasting techniques
    did not scale well and its analysts were overwhelmed.
  prefs: []
  type: TYPE_NORMAL
- en: Facebook scoured the literature in search of a scalable forecasting methodology.
    At the time, Facebook’s forecasting was largely done with Rob Hyndman’s `forecast`
    package required R analysts with specialized data science skills in forecasting
    and substantial product experience. Further, as Python became more and more popular
    among new hires, Facebook found itself running short of analysts able to produce
    high-quality forecasts. Unfortunately, the completely automatic forecasting tools
    Facebook looked into were too brittle and often too inflexible to incorporate
    valuable domain knowledge.
  prefs: []
  type: TYPE_NORMAL
- en: Facebook needed to make it easier for experts and non-experts alike to make
    high-quality forecasts that keep up with demand. Prophet was, therefore, designed
    to be a much more straightforward way to create reasonable, accurate forecasts
    that are customizable in ways that are intuitive to a non-expert. Facebook approached
    this problem using what it refers to as analyst-in-the-loop forecasting.
  prefs: []
  type: TYPE_NORMAL
- en: Analyst-in-the-loop forecasting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When developing Prophet, Facebook took great care to ensure that the default
    settings for all parameters would give great results for a wide variety of business
    cases. However, there are always edge cases, challenging datasets, or simply a
    forecast that doesn’t quite match expectations. In these situations where the
    forecast is not satisfactory, the analyst is not stuck with fully automated results.
    Any analyst, even a beginner forecaster, can improve the forecast by tweaking
    a variety of easily interpretable parameters. Facebook dubs this process **analyst-in-the-loop
    forecasting** (see *Figure 3**.1*).
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.1 – Analyst-in-the-loop forecasting](img/Fig_3.1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.1 – Analyst-in-the-loop forecasting
  prefs: []
  type: TYPE_NORMAL
- en: Analyst-in-the-loop forecasting is an iterative process. The analyst starts
    by using Prophet to build a model using the default parameters. Prophet has been
    optimized for speed, so in (usually) just a few seconds, it can output a very
    acceptable forecast. Prophet can then evaluate the forecast and surface potential
    issues before handing it back to the analyst for a quick visual inspection. If
    the forecast matches the analyst’s expectations, their work is done! But when
    Prophet has revealed poor performance or the analyst’s visual inspection provides
    unsatisfactory results, the analyst can intuitively tweak the model to improve
    performance and better align results with expectations.
  prefs: []
  type: TYPE_NORMAL
- en: 'This cycle can continue as many times as necessary. The beauty of Prophet is
    that because forecasting is so exceptionally quick, a full cycle can often be
    completed in less than a minute. An analyst with extensive domain knowledge but
    limited statistical knowledge is thus able to create a highly customized forecast.
    Parameters the analyst may wish to adjust include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Capacities**: An upper or lower limit that the forecast can asymptotically
    approach. An example of capacity might be the total market size at a given time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changepoints**: These are moments in time when the trend of the forecast
    takes an abrupt change of direction. These might result from a major product update
    or even a mention in the press that garners significant attention.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Holidays and seasonality**: Whatever is being forecast will behave differently
    due to the effects of holidays and seasonality. For example, sales of turkeys
    peak in the week before Thanksgiving, and beach balls in mid-summer. The analyst
    who understands their product can easily input this intelligence into their model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Smoothing parameters**: After visually inspecting the model, the analyst
    can intuitively see whether the model is over- or under-fitting the data. Smoothing
    parameters can be used to reduce the noise of a model or to instruct the model
    on how much seasonal variation can be expected in the future.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are often discussions about the difference between **statistical forecasting**
    and **judgmental forecasting**. A statistical forecast is a model mathematically
    fit to historical data, whereas a judgmental forecast (also sometimes called a
    **managerial forecast**) is a process through which human experts produce a forecast
    using whatever knowledge they have learned through their experience with the time
    series. Judgmental forecasts can include much more information than a statistical
    forecast and can be more responsive to changing conditions, but they don’t scale
    well and require significant work from the analyst. A statistical forecast is
    much more easily automated and can scale up to meet forecasting demand, but is
    limited in the amount of domain knowledge it can incorporate.
  prefs: []
  type: TYPE_NORMAL
- en: 'Facebook’s analyst-in-the-loop paradigm is a combination of the best qualities
    of these two different approaches: powerfully automated, but simple and intuitive
    to adjust. Despite this simplicity, however, Prophet is actually rather sophisticated
    when you peer at its inner workings. Although creating accurate forecasts does
    not require an understanding of the math underpinning Prophet’s models, an awareness
    of what Prophet is doing will only improve your forecasting nous. If you’re ready,
    let’s now take a look at the set of equations Prophet is using to build its forecasts.'
  prefs: []
  type: TYPE_NORMAL
- en: The math behind Prophet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In [*Chapter 1*](B19630_01.xhtml#_idTextAnchor031), *The History and Development
    of Time Series Forecasting*, we introduced Prophet as an additive regression model.
    *Figures 1.4* and *1.5* in that chapter illustrated this by showing how several
    different curves representing model components can simply be added together to
    arrive at a final model. Mathematically, this is represented with the following
    equation:'
  prefs: []
  type: TYPE_NORMAL
- en: '|  | ![](img/B19630_03_F01.png) | (1) |'
  prefs: []
  type: TYPE_TB
- en: 'The model’s forecasted ![](img/B19630_03_F02.png) value at time ![](img/B19630_03_F03.png)
    is given by the ![](img/B19630_03_F04.png) function. This function consists of
    four components, summed together (or multiplied together; see [*Chapter 5*](B19630_05.xhtml#_idTextAnchor254),
    *Working with* *Seasonality,* for more on this):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B19630_03_F05.png) is the growth component, or the general trend, which
    is non-periodic'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/B19630_03_F06.png) is the seasonality component – that is, the summation
    of all periodic components'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/B19630_03_F07.png) is the holiday component, representing all one-off
    special events'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/B19630_03_F08.png) is the error term'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The combination of these four components (actually, only the first three components—the
    error term is just there to account for noise that cannot be accommodated by the
    model) is all Prophet needs to build its forecast. The simplicity of this equation,
    however, hides many complexities. To really understand what is happening, we’ll
    need to break down each of those components.
  prefs: []
  type: TYPE_NORMAL
- en: Linear growth
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, we’ll look at the growth term. Prophet was introduced with two growth
    modes, linear and logistic, one of which needs to be chosen by the analyst when
    setting up the model. (How does the analyst choose? We’ll cover that in [*Chapter
    7*](B19630_07.xhtml#_idTextAnchor453), *Controlling* *Growth Modes*!) That choice
    instructs Prophet to use one of two equations for this term. We’ll start by looking
    at the linear version:'
  prefs: []
  type: TYPE_NORMAL
- en: '|  | ![](img/B19630_03_F09.png) | (2) |'
  prefs: []
  type: TYPE_TB
- en: 'The ![](img/B19630_03_F10.png) variable is the growth rate, the slope of the
    line. Those familiar with regression will recognize that the basic equation for
    a line is ![](img/B19630_03_F11.png). We see equation *(2)* bears some resemblance
    to this basic equation if you collect everything in the parentheses and group
    them together. But a key difference between a simple line and Prophet’s **piecewise
    linear model** is right there in the name: it is piecewise. The slope can change
    as a function of ![](img/B19630_03_F12.png):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.2 – The vertical dashed line is a changepoint in Prophet’s model,
    where the slope changes](img/Fig_3.2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.2 – The vertical dashed line is a changepoint in Prophet’s model, where
    the slope changes
  prefs: []
  type: TYPE_NORMAL
- en: 'This is why ![](img/B19630_03_F13.png), the slope, has an addition to it: ![](img/B19630_03_F14.png).
    The ![](img/B19630_03_F15.png) variable is a vector of rate adjustments (i.e.,
    the slope change that occurs at each changepoint), where ![](img/B19630_03_F16.png)
    is the change of slope that occurs at time ![](img/B19630_03_F17.png). The ![](img/B19630_03_F18.png)
    vector identifies the locations of each changepoint and is defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '|  | ![](img/B19630_03_F19.png) | (3) |'
  prefs: []
  type: TYPE_TB
- en: In simple words, this means that the slope of the line is constant, but allows
    slope adjustments to occur. At any time ![](img/B19630_03_F20.png), the slope
    is equal to the ![](img/B19630_03_F21.png) base rate plus all of the slope adjustments
    up to that point.
  prefs: []
  type: TYPE_NORMAL
- en: 'To make the line continuous, each segment between changepoints must be adjusted
    up or down with an offset parameter so that the endpoints of each segment are
    connected. In equation *(2)*, ![](img/B19630_03_F22.png) is the offset parameter.
    Just like the slope, this offset parameter is a base offset plus all offsets up
    to time ![](img/B19630_03_F23.png). Mathematically, this is done by adding to
    ![](img/B19630_03_F24.png) that vector of changepoint locations, ![](img/B19630_03_F25.png),
    multiplied by a vector of offset adjustments, ![](img/B19630_03_F26.png). In this
    linear model, ![](img/B19630_03_F27.png) is set to ![](img/B19630_03_F28.png):'
  prefs: []
  type: TYPE_NORMAL
- en: '|  | ![](img/B19630_03_F29.png) | (4) |'
  prefs: []
  type: TYPE_TB
- en: That is how ![](img/B19630_03_F30.png) is defined for Prophet’s linear model!
    Now let’s see how to change it for the logistic model.
  prefs: []
  type: TYPE_NORMAL
- en: Logistic growth
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Similar to how the general equation for a line is ![](img/B19630_03_F31.png),
    the general equation for a logistic curve is given by the following equation:'
  prefs: []
  type: TYPE_NORMAL
- en: '|  | ![](img/B19630_03_F32.png) | (5) |'
  prefs: []
  type: TYPE_TB
- en: 'As in the linear model, equation *(2)*, ![](img/B19630_03_F33.png) is the growth
    rate and ![](img/B19630_03_F34.png) is an offset parameter. Equation *(5)* requires
    many of the same adjustments we made in equation *(2)* to allow for changepoints.
    Prophet also allows ![](img/B19630_03_F35.png), the **carrying capacity**, to
    change with time. This value is essentially an asymptote that the curve approaches
    but never quite reaches:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.3 – Prophet’s logistic model, with a carrying capacity set to 500](img/Fig_3.3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.3 – Prophet’s logistic model, with a carrying capacity set to 500
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that the ![](img/B19630_03_F36.png) capacity is a function of time. This
    means that the asymptote need not be constant but can indeed be any arbitrary
    curve. Here, we demonstrate a constant capacity switching to a linearly increasing
    capacity:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.4 – Carrying capacity may not necessarily be constant](img/Fig_3.4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.4 – Carrying capacity may not necessarily be constant
  prefs: []
  type: TYPE_NORMAL
- en: 'If we take equation *(5)* and make the same adjustments to ![](img/B19630_03_F37.png)
    and ![](img/B19630_03_F38.png) that we made in equation *(2)*, and also allow
    ![](img/B19630_03_F39.png) to be a function of time, then we arrive at the following
    equation:'
  prefs: []
  type: TYPE_NORMAL
- en: '|  | ![](img/B19630_03_F40.png) | (6) |'
  prefs: []
  type: TYPE_TB
- en: 'This is Prophet’s logistic growth model. In the linear model, ![](img/B19630_03_F41.png),
    but in the logistic model, ![](img/B19630_03_F42.png) must take a more complex
    form:'
  prefs: []
  type: TYPE_NORMAL
- en: '|  | ![](img/B19630_03_F43.png) | (7) |'
  prefs: []
  type: TYPE_TB
- en: 'Although equation *(7)* is more complex than *(4)*, it essentially performs
    the same task: ensuring that, at each changepoint, the endpoints of each segment
    of the trend curve are connected and the line is continuous.'
  prefs: []
  type: TYPE_NORMAL
- en: The growth term, ![](img/B19630_03_F44.png), is the most complicated of the
    full Prophet model. It gets easier from here! Now, we’ll move on to understand
    ![](img/B19630_03_F45.png), the seasonality term.
  prefs: []
  type: TYPE_NORMAL
- en: Seasonality
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Time series data often exhibits periodicity, especially with business data,
    where there are often yearly cycles, weekly cycles, and daily cycles. Prophet
    can accept an unlimited number of such periodic components in its seasonality
    term, ![](img/B19630_03_F45.png), from equation *(1)*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Prophet models this term with a Fourier series. A Fourier series is simply
    a summation of multiple sinusoidal curves. The shape of this final curve is determined
    by the amplitude, phase, and period of each of the component curves. A Fourier
    series can include an infinite number of components, and can, therefore, be made
    to fit almost any arbitrary periodic function, as demonstrated here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.5 – The sum of four sinusoidal curves demonstrates a Fourier series](img/Fig_3.5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.5 – The sum of four sinusoidal curves demonstrates a Fourier series
  prefs: []
  type: TYPE_NORMAL
- en: 'In Prophet, this summation takes the following form:'
  prefs: []
  type: TYPE_NORMAL
- en: '|  | ![](img/B19630_03_F47.png) | (8) |'
  prefs: []
  type: TYPE_TB
- en: This is the sum of ![](img/B19630_03_F48.png) different curves, referred to
    as the **Fourier order**. In this formula, ![](img/B19630_03_F49.png) is the regular
    period of the time series (for example, 365.25 for yearly data, 7 for weekly data,
    or 1 for daily data, when the time series is scaled in days). Part of Prophet’s
    fitting process is to calculate values for ![](img/B19630_03_F50.png) and ![](img/B19630_03_F51.png),
    which are merely fitting parameters.
  prefs: []
  type: TYPE_NORMAL
- en: Holding ![](img/B19630_03_F52.png) to be relatively low essentially applies
    a low-pass filter on the data and prohibits the model’s ability to overfit the
    data. Increasing ![](img/B19630_03_F53.png), however, is sometimes desirable,
    as it allows for the fitting of seasonality patterns, which change more quickly.
    Prophet’s developers have taken this into account and carefully chosen default
    values that seem to perform quite well. We’ll look more closely at this in [*Chapter
    5*](B19630_05.xhtml#_idTextAnchor254), *Working* *with Seasonality*.
  prefs: []
  type: TYPE_NORMAL
- en: Holidays
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The final component we need to take a look at in order to understand Prophet’s
    full forecast model is the holiday component. This is possibly the simplest component
    to understand. The analyst provides Prophet (or loads a default list) with a set
    of holiday names and dates, including future dates, and Prophet estimates the
    deviation from the trend and seasonality forecast during previous dates and then
    applies that same change to future dates.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is mathematically represented with a matrix of regressors, ![](img/B19630_03_F54.png):'
  prefs: []
  type: TYPE_NORMAL
- en: '|  | ![](img/B19630_03_F55.png) | (9) |'
  prefs: []
  type: TYPE_TB
- en: 'In this equation, ![](img/B19630_03_F56.png) is the set of past and future
    dates for each holiday, ![](img/B19630_03_F57.png). The change in the forecast
    due to holiday ![](img/B19630_03_F58.png) is captured in the ![](img/B19630_03_F59.png)
    parameter. This allows the entire holiday component to be expressed as the product
    of the ![](img/B19630_03_F60.png) matrix and the ![](img/B19630_03_F61.png) vector:'
  prefs: []
  type: TYPE_NORMAL
- en: '|  | ![](img/B19630_03_F62.jpg) | (10) |'
  prefs: []
  type: TYPE_TB
- en: And with that, Prophet has everything it needs to build its forecast! It simply
    sums the ![](img/B19630_03_F63.png) growth component, the ![](img/B19630_03_F64.png)
    seasonality component, and the ![](img/B19630_03_F65.png) holiday component to
    provide its final forecast, ![](img/B19630_03_F66.png).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter introduced you to the development of Prophet, from the idea’s
    genesis up to the theoretical formulation. This chapter provided, however, just
    a summary of the mathematical equations that describe how Prophet works. For full
    details, please refer to the original paper describing Prophet: *Taylor, S. J.
    and Letham, B. 2017\. Forecasting at scale. PeerJ Preprints* *5:e3190v2* ([https://doi.org/10.7287/peerj.preprints.3190v2](https://doi.org/10.7287/peerj.preprints.3190v2)).'
  prefs: []
  type: TYPE_NORMAL
- en: Now that you understand how Prophet works, the remainder of this book will be
    spent demonstrating all of the parameters and additional features available that
    allow you to have greater control over your forecasts. In the next chapter, we’ll
    take a look at non-daily data to see what precautions and adjustments need to
    be taken, thereby preparing us to handle datasets with different time granularities.
  prefs: []
  type: TYPE_NORMAL
- en: 'Part 2: Seasonality, Tuning, and Advanced Features'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section will teach you about the advanced features of Prophet. Every adjustable
    parameter will be explored with examples and a discussion of why and how to modify
    it. Each chapter builds on the previous chapters to add more and more complexity
    and power to the forecasting models. By the end of the section, you will be able
    to build models that harness the full capability of Prophet’s forecasting toolset.
  prefs: []
  type: TYPE_NORMAL
- en: 'This section comprises the following chapters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 4*](B19630_04.xhtml#_idTextAnchor197), *Handing Non-Daily Data*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 5*](B19630_05.xhtml#_idTextAnchor254), *Working with Seasonality*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 6*](B19630_06.xhtml#_idTextAnchor375), *Forecasting Holiday Effects*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 7*](B19630_07.xhtml#_idTextAnchor453), *Controlling Growth Modes*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 8*](B19630_08.xhtml#_idTextAnchor537), *Influencing Trend Changepoints*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 9*](B19630_09.xhtml#_idTextAnchor599), *Including Additional Regressors*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 10*](B19630_10.xhtml#_idTextAnchor641), *Accounting for Outliers
    and Special Events*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 11*](B19630_11.xhtml#_idTextAnchor728), *Managing Uncertainty Intervals*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
