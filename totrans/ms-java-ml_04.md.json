["```py\ntry {\n//load the labeled training data\nList<TrainingSample<double[]>> labeledTraining = ArffImporter.importFromFile(\"resources/breast-labeled.arff\");\n//load the unlabeled data\nList<TrainingSample<double[]>> unlabeledData =ArffImporter.importFromFile(\"resources/breast-unlabeled.arff\");\n//create a kernel with Gaussian and gamma set to 1.0\nDoubleGaussL2 k = new DoubleGaussL2(1.0);\n//create transductive SVM with SVM light\nS3VMLight<double[]> svm = new S3VMLight<double[]>(k);\n//send the training labeled and unlabeled data\nsvm.train(labeledTraining, unlabeledData);\n} catch (IOException e) {\n\te.printStackTrace();\n}\n```", "```py\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<experiment>\n    <process evaluation-method-type=\"net.sf.jclal.evaluation.method.RealScenario\">\n        <file-labeled>datasets/abalone-labeled.arff</file-labeled>\n        <file-unlabeled>datasets/abalone-unlabeled.arff</file-unlabeled>    \n        <algorithm type=\"net.sf.jclal.activelearning.algorithm.ClassicalALAlgorithm\">\n      <stop-criterion type=\"net.sf.jclal.activelearning.stopcriteria.MaxIteration\">\n              <max-iteration>10</max-iteration>\t\n      </stop-criterion>\n      <stop-criterion type=\"net.sf.jclal.activelearning.stopcriteria.UnlabeledSetEmpty\"/>\n            <listener type=\"net.sf.jclal.listener.RealScenarioListener\">\n                <informative-instances>reports/real-scenario-informative-data.txt</informative-instances>\n            </listener>\n            <scenario type=\"net.sf.jclal.activelearning.scenario.PoolBasedSamplingScenario\">\n                <batch-mode type=\"net.sf.jclal.activelearning.batchmode.QBestBatchMode\">\n                    <batch-size>1</batch-size>\n                </batch-mode>\n                <oracle type=\"net.sf.jclal.activelearning.oracle.ConsoleHumanOracle\"/>\n               <query-strategy type=\"net.sf.jclal.activelearning.singlelabel.querystrategy.EntropySamplingQueryStrategy\">\n                    <wrapper-classifier type=\"net.sf.jclal.classifier.WekaClassifier\">\n                        <classifier type=\"weka.classifiers.bayes.NaiveBayes\"/>\n                    </wrapper-classifier>\n                </query-strategy>\n            </scenario>\n        </algorithm>\n    </process>\n</experiment>\n```", "```py\njava -jar jclal-<version>.jar -cfg <config-file>\n\n```"]