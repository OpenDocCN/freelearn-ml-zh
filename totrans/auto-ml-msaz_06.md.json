["```py\n    from azureml.core import Workspace, Dataset, Datastore\n    from azureml.core import Experiment\n    from azureml.core.compute import ComputeTarget\n    from azureml.train.automl import AutoMLConfig\n    from azureml.train.automl.run import AutoMLRun\n    from azureml.widgets import RunDetails\n    ```", "```py\n    import pandas as pd\n    import numpy as np\n    ```", "```py\n    ws = Workspace.from_config()\n    ```", "```py\n    compute_name = 'compute-cluster'\n    compute_target = ComputeTarget(ws, compute_name)\n    ```", "```py\n    datastore = Datastore.get_default(ws)\n    my_datastore_name = 'workspaceblobstore'\n    my_datastore = Datastore.get(ws, my_datastore_name)\n    ```", "```py\n    dataset_name = \"Diabetes Sample\"\n    dataset = Dataset.get_by_name(ws, dataset_name, \n    version='latest')\n    ```", "```py\n    dataset.take(10).to_pandas_dataframe()\n    ```", "```py\n    dfRaw = dataset.to_pandas_dataframe()\n    ```", "```py\n    df = dfRaw.drop(['AGE','SEX'], axis=1)\n    ```", "```py\n    Dataset.Tabular.register_pandas_dataframe(df, \n    datastore,\n                                \"Diabetes Sample Age/Sex \n    Dropped\")\n    ```", "```py\n    ageBins = [0, 18, 65, 200] \n    dfRaw['BinnedFares'] = pd.cut(titanic['Age'], ageBins)\n    ```", "```py\n    AgeThreeSD = np.std(dfRaw.Age)*3\n    AgeMean = np.mean(dfRaw.Age)\n    print(round(AgeThreeSD + AgeMean)) # Prints Outlier \n    Threshold\n    # Replace all values above Threshold with Threshold \n    Value\n    dfRaw['Age'] = dfRaw['Age'].mask(dfRaw.Age > AgeMean, \n    AgeMean)\n    ```", "```py\n    dfRaw['BMI'] = np.where(dfRaw['BMI'] > 30, 1,0)\n    ```", "```py\n    Dataset.Tabular.register_pandas_dataframe(dfRaw,\n     datastore,\n                                \"Diabetes Sample Full \n    Transform\")\n    ```", "```py\n    experiment_name = 'Diabetes-Sample-Regression'\n    exp = Experiment(workspace=ws, name=experiment_name) \n    ```", "```py\n    target_column = 'Y'\n    ```", "```py\n    task = 'regression'\n    ```", "```py\n    primary_metric = 'normalized_root_mean_squared_error'\n    ```", "```py\n    featurization = 'auto'\n    ```", "```py\n    config = AutoMLConfig(task=task,\n                         primary_metric=primary_metric,\n                         featurization=featurization,\n                         compute_target=compute_target,\n                         training_data=dataset,\n                         label_column_name=target_column,\n                         experiment_timeout_minutes=15,\n                         enable_early_stopping=True,\n                         n_cross_validations=5,\n                         model_explainability=True)\n    ```", "```py\n    AutoML_run = exp.submit(config, show_output = True)\n    RunDetails(AutoML_run).show()\n    ```", "```py\n    description = 'Best AutoML Regression Run using \n    Diabetes Sample Data. This model requires the Age and \n    Sex Columns.' \n    tags = {'project' : \"Diabetes\", \"creator\" : \"your \n    name\"} \n    model_name = 'Diabetes-AllData-Regression-AutoML' \n    ```", "```py\n    AutoML_run.register_model(model_name=model_name, \n    description=description, tags=tags)\n    ```", "```py\n    description = 'Best AutoML Regression Run using \\\n    Diabetes Sample Data. This model requires the Age and \\\n    Sex Columns.' \n    tags = {'project' : \"Diabetes\", \"creator\" : \"your \n    name\", \"metric\" : \"R2\"} \n    model_name = 'Diabetes-AllData-Regression-AutoML-R2' \n    AutoML_run.register_model(model_name=model_name, \n    description=description, tags=tags, metric = \n    'r2_score')\n    ```", "```py\nmodel = Model(ws,' 'Diabetes-AllData-Regression-AutoML-R2')\n```", "```py\n    mean_age = dfRaw.AGE.mean()\n    dfRaw.AGE = dfRaw.AGE.fillna(value=meanAge)\n    ```", "```py\n    TargetSD = np.std(dfRaw.Y)*3\n    TargetMean = np.mean(dfRaw.Y)\n    y_min = TargetMean – TargetSD\n    y_max = TargetMean + TargetSD\n    ```", "```py\n    ySD = np.std(dfRaw.Y)\n    yMean = np.mean(dfRaw.Y)\n    yMin = np.min(dfRaw.Y)\n    yMax = np.max(dfRaw.Y)\n    low = yMean - ySD\n    high = yMean + ySD\n    yBins = [yMin, low, yMean, high, yMax] \n    dfRaw['BinnedY'] = pd.cut(dfRaw['Y'], yBins)\n    ```"]