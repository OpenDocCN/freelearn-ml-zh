["```py\n# setting the working directory to a folder where dataset is located\nsetwd('/home/sunil/Desktop/chapter5/')\n# reading the dataset to cust_data dataframe\ncust_data = read.csv(file='Wholesale_customers_ data.csv', header = TRUE)\n# knowing the dimensions of the dataframe\nprint(dim(cust_data))\nOutput : \n440 8\n# printing the data structure\nprint(str(cust_data))\n'data.frame': 440 obs. of 8 variables:\n $ Channel : int 2 2 2 1 2 2 2 2 1 2 ...\n $ Region : int 3 3 3 3 3 3 3 3 3 3 ...\n $ Fresh : int 12669 7057 6353 13265 22615 9413 12126 7579...\n $ Milk : int 9656 9810 8808 1196 5410 8259 3199 4956...\n $ Grocery : int 7561 9568 7684 4221 7198 5126 6975 9426...\n $ Frozen : int 214 1762 2405 6404 3915 666 480 1669...\n $ Detergents_Paper: int 2674 3293 3516 507 1777 1795 3140 3321...\n $ Delicassen : int 1338 1776 7844 1788 5185 1451 545 2566...\n# Viewing the data to get an intuition of the data \nView(cust_data)\n```", "```py\n# checking if there are any NAs in data\nprint(apply(cust_data, 2, function (x) sum(is.na(x))))\nOutput :\nChannel Region Fresh Milk \n0 0 0 0 \nGrocery Frozen Detergents_Paper Delicassen\n```", "```py\n\n0 0 0 0 \n# printing the summary of the dataset \nprint(summary(cust_data))\n```", "```py\nChannel Region Fresh Milk \n Min. :1.000 Min. :1.000 Min. : 3 Min. : 55 \n 1st Qu.:1.000 1st Qu.:2.000 1st Qu.: 3128 1st Qu.: 1533 \n Median :1.000 Median :3.000 Median : 8504 Median : 3627 \n Mean :1.323 Mean :2.543 Mean : 12000 Mean : 5796 \n 3rd Qu.:2.000 3rd Qu.:3.000 3rd Qu.: 16934 3rd Qu.: 7190 \n Max. :2.000 Max. :3.000 Max. :112151 Max. :73498 \n Grocery Frozen Detergents_Paper Delicassen \n Min. : 3.0 Min. : 3.0 Min. : 3 Min. : 25.0 \n 1st Qu.: 256.8 1st Qu.: 408.2 1st Qu.: 2153 1st Qu.: 742.2\n Median : 816.5 Median : 965.5 Median : 4756 Median : 1526.0\n Mean : 2881.5 Mean : 1524.9 Mean : 7951 Mean : 3071.9\n 3rd Qu.: 3922.0 3rd Qu.: 1820.2 3rd Qu.:10656 3rd Qu.: 3554.2\n Max. :40827.0 Max. :47943.0 Max. :92780 Max. :60869.0\n```", "```py\n# excluding the non-useful columns from the dataset\ncust_data<-cust_data[,c(-1,-2)]\n# verifying the dataset post columns deletion\ndim(cust_data)\n```", "```py\n440 6\n```", "```py\n# setting the working directory to a folder where dataset is located\nsetwd('/home/sunil/Desktop/chapter5/')\n# reading the dataset to cust_data dataframe\ncust_data = read.csv(file='Wholesale_customers_ data.csv', header = TRUE)\n# removing the non-required columns\ncust_data<-cust_data[,c(-1,-2)]\n# inlcuding the facto extra library \nlibrary(factoextra)\n# computing and printing the hopikins statistic\nprint(get_clust_tendency(cust_data, graph=FALSE,n=50,seed = 123))\n```", "```py\n$hopkins_stat\n[1] 0.06354846\n```", "```py\n# setting the working directory to a folder where dataset is located\nsetwd('/home/sunil/Desktop/chapter5/')\n# reading the dataset to cust_data dataframe\ncust_data = read.csv(file='Wholesale_customers_ data.csv', header = TRUE)\n# removing the non-required columns\ncust_data<-cust_data[,c(-1,-2)]\n# including the NbClust library\nlibrary(NbClust)\n# Computing the optimal number of clusters through the NbClust function with distance as euclidean and using kmeans \nNbClust(cust_data,distance=\"euclidean\", method=\"kmeans\")\n```", "```py\n******************************************************************* \n* Among all indices: \n* 1 proposed 2 as the best number of clusters \n* 11 proposed 3 as the best number of clusters \n* 2 proposed 4 as the best number of clusters \n* 1 proposed 5 as the best number of clusters \n* 4 proposed 8 as the best number of clusters \n* 1 proposed 10 as the best number of clusters \n* 1 proposed 12 as the best number of clusters \n* 1 proposed 14 as the best number of clusters \n* 1 proposed 15 as the best number of clusters \n                   ***** Conclusion ***** \n* According to the majority rule, the best number of clusters is 3 \n******************************************************************* \n```", "```py\n# computing the the intra-cluster distance with Ks ranging from 2 to 10\nlibrary(purrr)\ntot_withinss <- map_dbl(2:10, function(k){\n  model <- kmeans(cust_data, centers = k, nstart = 50)\n  model$tot.withinss\n})\n# converting the Ks and computed intra-cluster distances to a dataframe\nscreeplot_df <- data.frame(k = 2:10,\n```", "```py\n\n                           tot_withinss = tot_withinss)\n# plotting the elbow curve\nlibrary(ggplot2)\nprint( ggplot(screeplot_df, aes(x = k, y = tot_withinss)) + \n         geom_line() + \n         scale_x_continuous(breaks = 1:10) + \n         labs(x = \"k\", y = \"Within Cluster Sum of Squares\") + \n         ggtitle(\"Total Within Cluster Sum of Squares by # of Clusters (k)\") +\n         geom_point(data = screeplot_df[2,], aes(x = k, y = tot_withinss),\n                    col = \"red2\", pch = 4, size = 7))\n```", "```py\nlibrary(cluster)\n# runing kmeans in cust_data dataset to obtain 3 clusters\nkmeansout <- kmeans(cust_data, centers = 3, nstart = 50) \nprint (kmeansout)\n```", "```py\n> kmeansout\nK-means clustering with 3 clusters of sizes 330, 50, 60\nCluster means:\n     Fresh Milk Grocery Frozen Detergents_Paper Delicassen\n1 8253.47 3824.603 5280.455 2572.661 1773.058 1137.497\n2 8000.04 18511.420 27573.900 1996.680 12407.360 2252.020\n3 35941.40 6044.450 6288.617 6713.967 1039.667 3049.467\nClustering vector:\n  [1] 1 1 1 1 3 1 1 1 1 2 1 1 3 1 3 1 1 1 1 1 1 1 3 2 3 1 1 1 2 3 1 1 1 3 1 1 3 1 2 3 3 1 1 2 1 2 2 2 1 2 1 1 3 1\n [55] 3 1 2 1 1 1 1 2 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 2 2 3 1 3 1 1 2 1 1 1 1 1 1 1 1 1 1 3 1 1 1 1\n[109] 1 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 3 3 1 1 1 3 1 1 1 1 1 1 1 1 1 1 1 3 3 1 1 2 1 1 1 3 1 1 1 1 1 2 1 1 1 1 1 1\n[163] 1 2 1 2 1 1 1 1 1 2 1 2 1 1 3 1 1 1 1 3 1 3 1 1 1 1 1 1 1 1 1 1 1 1 3 1 1 1 2 2 3 1 1 2 1 1 1 2 1 2 1 1 1 1\n```", "```py\n[217] 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 1 1 1 1 1 1 3 3 3 1 1 1 1 1 1 1 1 1 2 1 3 1 3 1 1 3 3 1 1 3 1 1 2 2 1 2 1\n[271] 1 1 1 3 1 1 3 1 1 1 1 1 3 3 3 3 1 1 1 3 1 1 1 1 1 1 1 1 1 1 1 2 1 1 2 1 2 1 1 2 1 3 2 1 1 1 1 1 1 2 1 1 1 1\n[325] 3 3 1 1 1 1 1 2 1 2 1 3 1 1 1 1 1 1 1 2 1 1 1 3 1 2 1 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 1 1 1 1 1 1 3\n[379] 1 1 3 1 3 1 2 1 1 1 1 1 1 1 1 3 1 1 1 1 1 1 1 3 3 3 1 1 3 2 1 1 1 1 1 1 1 1 1 1 2 1 1 1 3 1 1 1 1 3 1 1 1 1\n[433] 1 1 1 3 3 2 1 1\n```", "```py\nlibrary(factoextra)\nfviz_cluster(kmout,data=cust_data)\n```", "```py\n# computing the silhouette index for the clusters\nsi <- silhouette(kmout$cluster, dist(cust_data, \"euclidean\"))\n# printing the summary of the computed silhouette index \nprint(summary(si))\n```", "```py\nSilhouette of 440 units in 3 clusters from silhouette.default(x = kmout$cluster, dist = dist(cust_data, from \"euclidean\")) :\n Cluster sizes and average silhouette widths:\n       60 50 330 \n0.2524346 0.1800059 0.5646307 \nIndividual silhouette widths:\n   Min. 1st Qu. Median Mean 3rd Qu. Max. \n-0.1544 0.3338 0.5320 0.4784 0.6743 0.7329 \n```", "```py\nFresh Milk Grocery Frozen Detergents_Paper Delicatessen\n1 8253.47 3824.603 5280.455 2572.661 1773.058 1137.497\n2 8000.04 18511.420 27573.900 1996.680 12407.360 2252.020\n3 35941.40 6044.450 6288.617 6713.967 1039.667 3049.467\n```", "```py\n# setting the working directory to a folder where dataset is located\nsetwd('/home/sunil/Desktop/chapter5/')\n# reading the dataset to cust_data dataframe\ncust_data = read.csv(file='Wholesale_customers_ data.csv', header = TRUE)\n# removing the non-required columns\ncust_data<-cust_data[,c(-1,-2)]\n# including the cluster library so as to make use of diana function\nlibrary(cluster)\n# Compute diana()\ncust_data_diana<-diana(cust_data, metric = \"euclidean\",stand = FALSE)\n# plotting the dendogram from diana output\npltree(cust_data_diana, cex = 0.6, hang = -1,\n       main = \"Dendrogram of diana\")\n# Divise coefficient; amount of clustering structure found\nprint(cust_data_diana$dc)\n```", "```py\n> print(cust_data_diana$dc)\n[1] 0.9633628\n```", "```py\nplot(as.dendrogram(cust_data_diana), cex = 0.6,horiz = TRUE)\n```", "```py\n# obtain the clusters through cuttree\n# Cut tree into 3 groups\ngrp <- cutree(cust_data_diana, k = 3)\n# Number of members in each cluster\ntable(grp)\n# Get the observations of cluster 1\nrownames(cust_data)[grp == 1]\n```", "```py\n> table(grp)\ngrp\n  1 2 3 \n364 44 32 \n> rownames(cust_data)[grp == 1]\n  [1] \"1\" \"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\" \"11\" \"12\" \"13\" \"14\" \"15\" \"16\"\n```", "```py\n\"17\" \"18\" \"19\" \n [19] \"20\" \"21\" \"22\" \"25\" \"26\" \"27\" \"28\" \"31\" \"32\" \"33\" \"34\" \"35\" \"36\" \"37\" \"38\" \"41\" \"42\" \"43\" \n [37] \"45\" \"49\" \"51\" \"52\" \"54\" \"55\" \"56\" \"58\" \"59\" \"60\" \"61\" \"63\" \"64\" \"65\" \"67\" \"68\" \"69\" \"70\" \n [55] \"71\" \"72\" \"73\" \"74\" \"75\" \"76\" \"77\" \"79\" \"80\" \"81\" \"82\" \"83\" \"84\" \"85\" \"89\" \"90\" \"91\" \"92\" \n [73] \"94\" \"95\" \"96\" \"97\" \"98\" \"99\" \"100\" \"101\" \"102\" \"103\" \"105\" \"106\" \"107\" \"108\" \"109\" \"111\" \"112\" \"113\"\n [91] \"114\" \"115\" \"116\" \"117\" \"118\" \"119\" \"120\" \"121\" \"122\" \"123\" \"124\" \"127\" \"128\" \"129\" \"131\" \"132\" \"133\" \"134\"\n[109] \"135\" \"136\" \"137\" \"138\" \"139\" \"140\" \"141\" \"142\" \"144\" \"145\" \"147\" \"148\" \"149\" \"151\" \"152\" \"153\" \"154\" \"155\"\n[127] \"157\" \"158\" \"159\" \"160\" \"161\" \"162\" \"163\" \"165\" \"167\" \"168\" \"169\" \"170\" \"171\" \"173\" \"175\" \"176\" \"178\" \"179\"\n[145] \"180\" \"181\" \"183\" \"185\" \"186\" \"187\" \"188\" \"189\" \"190\" \"191\" \"192\" \"193\" \"194\" \"195\" \"196\" \"198\" \"199\" \"200\"\n[163] \"203\" \"204\" \"205\" \"207\" \"208\" \"209\" \"211\" \"213\" \"214\" \"215\" \"216\" \"218\" \"219\" \"220\" \"221\" \"222\" \"223\" \"224\"\n[181] \"225\" \"226\" \"227\" \"228\" \"229\" \"230\" \"231\" \"232\" \"233\" \"234\" \"235\" \"236\" \"237\" \"238\" \"239\" \"241\" \"242\" \"243\"\n[199] \"244\" \"245\" \"246\" \"247\" \"248\" \"249\" \"250\" \"251\" \"253\" \"254\" \"255\" \"257\" \"258\" \"261\" \"262\" \"263\" \"264\" \"265\"\n[217] \"266\" \"268\" \"269\" \"270\" \"271\" \"272\" \"273\" \"275\" \"276\" \"277\" \"278\" \"279\" \"280\" \"281\" \"282\" \"284\" \"287\" \"288\"\n[235] \"289\" \"291\" \"292\" \"293\" \"294\" \"295\" \"296\" \"297\" \"298\" \"299\" \"300\" \"301\" \"303\" \"304\" \"306\" \"308\" \"309\" \"311\"\n[253] \"312\" \"314\" \"315\" \"316\" \"317\" \"318\" \"319\" \"321\" \"322\" \"323\" \"324\" \"325\" \"327\" \"328\" \"329\" \"330\" \"331\" \"333\"\n[271] \"335\" \"336\" \"337\" \"338\" \"339\" \"340\" \"341\" \"342\" \"343\" \"345\" \"346\" \"347\" \"348\" \"349\" \"351\" \"353\" \"355\" \"356\"\n[289] \"357\" \"358\" \"359\" \"360\" \"361\" \"362\" \"363\" \"364\" \"365\" \"366\" \"367\" \"368\" \"369\" \"370\" \"372\" \"373\" \"374\" \"375\"\n[307] \"376\" \"377\" \"379\" \"380\" \"381\" \"382\" \"384\" \"385\" \"386\" \"387\" \"388\" \"389\" \"390\" \"391\" \"392\" \"393\" \"394\" \"395\"\n[325] \"396\" \"397\" \"398\" \"399\" \"400\" \"401\" \"402\" \"403\" \"404\" \"405\" \"406\" \"407\" \"409\" \"410\" \"411\" \"412\" \"413\" \"414\"\n[343] \"415\" \"416\" \"417\" \"418\" \"420\" \"421\" \"422\" \"423\" \"424\" \"425\" \"426\" \"427\" \"429\" \"430\" \"431\" \"432\" \"433\" \"434\"\n[361] \"435\" \"436\" \"439\" \"440\"\n```", "```py\nlibrary(factoextra)\nfviz_cluster(list(data = cust_data, cluster = grp))\n```", "```py\nplot(as.hclust(cust_data_diana))\nrect.hclust(cust_data_diana, k = 4, border = 2:5)\n```", "```py\n# setting the working directory to a folder where dataset is located\nsetwd('/home/sunil/Desktop/chapter5/')\n# reading the dataset to cust_data dataframe\ncust_data = read.csv(file='Wholesale_customers_ data.csv', header = TRUE)\n# removing the non-required columns\ncust_data<-cust_data[,c(-1,-2)]\n# including the cluster library so as to make use of agnes function\nlibrary(cluster)\n# Compute agnes()\ncust_data_agnes<-agnes(cust_data, metric = \"euclidean\",stand = FALSE)\n# plotting the dendogram from agnes output\npltree(cust_data_agnes, cex = 0.6, hang = -1,\n       main = \"Dendrogram of agnes\")\n# agglomerative coefficient; amount of clustering structure found\nprint(cust_data_agnes$ac)\nplot(as.dendrogram(cust_data_agnes), cex = 0.6,horiz = TRUE)\n# obtain the clusters through cuttree\n# Cut tree into 3 groups\ngrp <- cutree(cust_data_agnes, k = 3)\n# Number of members in each cluster\ntable(grp)\n# Get the observations of cluster 1\nrownames(cust_data)[grp == 1]\n# visualization of clusters\nlibrary(factoextra)\nfviz_cluster(list(data = cust_data, cluster = grp))\nlibrary(factoextra)\nfviz_cluster(list(data = cust_data, cluster = grp))\nplot(as.hclust(cust_data_agnes))\nrect.hclust(cust_data_agnes, k = 3, border = 2:5)\n```", "```py\n[1] 0.9602911\n> plot(as.dendrogram(cust_data_agnes), cex = 0.6,horiz = FALSE)\n```", "```py\n> grp <- cutree(cust_data_agnes, k = 3)\n> # Number of members in each cluster\n> table(grp)\ngrp\n  1 2 3\n434 5 1 \n> rownames(cust_data)[grp == 1]\n  [1] \"1\" \"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\" \"10\" \"11\" \"12\" \"13\" \"14\" \"15\" \"16\" \"17\" \"18\" \n [19] \"19\" \"20\" \"21\" \"22\" \"23\" \"24\" \"25\" \"26\" \"27\" \"28\" \"29\" \"30\" \"31\" \"32\" \"33\" \"34\" \"35\" \"36\" \n [37] \"37\" \"38\" \"39\" \"40\" \"41\" \"42\" \"43\" \"44\" \"45\" \"46\" \"47\" \"49\" \"50\" \"51\" \"52\" \"53\" \"54\" \"55\" \n [55] \"56\" \"57\" \"58\" \"59\" \"60\" \"61\" \"63\" \"64\" \"65\" \"66\" \"67\" \"68\" \"69\" \"70\" \"71\" \"72\" \"73\" \"74\" \n [73] \"75\" \"76\" \"77\" \"78\" \"79\" \"80\" \"81\" \"82\" \"83\" \"84\" \"85\" \"88\" \"89\" \"90\" \"91\" \"92\" \"93\" \"94\" \n [91] \"95\" \"96\" \"97\" \"98\" \"99\" \"100\" \"101\" \"102\" \"103\" \"104\" \"105\" \"106\" \"107\" \"108\" \"109\" \"110\" \"111\" \"112\"\n[109] \"113\" \"114\" \"115\" \"116\" \"117\" \"118\" \"119\" \"120\" \"121\" \"122\" \"123\" \"124\" \"125\" \"126\" \"127\" \"128\" \"129\" \"130\"\n[127] \"131\" \"132\" \"133\" \"134\" \"135\" \"136\" \"137\" \"138\" \"139\" \"140\" \"141\" \"142\" \"143\" \"144\" \"145\" \"146\" \"147\" \"148\"\n[145] \"149\" \"150\" \"151\" \"152\" \"153\" \"154\" \"155\" \"156\" \"157\" \"158\" \"159\" \"160\" \"161\" \"162\" \"163\" \"164\" \"165\" \"166\"\n[163] \"167\" \"168\" \"169\" \"170\" \"171\" \"172\" \"173\" \"174\" \"175\" \"176\" \"177\" \"178\" \"179\" \"180\" \"181\" \"183\" \"184\" \"185\"\n[181] \"186\" \"187\" \"188\" \"189\" \"190\" \"191\" \"192\" \"193\" \"194\" \"195\" \"196\" \"197\" \"198\" \"199\" \"200\" \"201\" \"202\" \"203\"\n```", "```py\n[199] \"204\" \"205\" \"206\" \"207\" \"208\" \"209\" \"210\" \"211\" \"212\" \"213\" \"214\" \"215\" \"216\" \"217\" \"218\" \"219\" \"220\" \"221\"\n[217] \"222\" \"223\" \"224\" \"225\" \"226\" \"227\" \"228\" \"229\" \"230\" \"231\" \"232\" \"233\" \"234\" \"235\" \"236\" \"237\" \"238\" \"239\"\n[235] \"240\" \"241\" \"242\" \"243\" \"244\" \"245\" \"246\" \"247\" \"248\" \"249\" \"250\" \"251\" \"252\" \"253\" \"254\" \"255\" \"256\" \"257\"\n[253] \"258\" \"259\" \"260\" \"261\" \"262\" \"263\" \"264\" \"265\" \"266\" \"267\" \"268\" \"269\" \"270\" \"271\" \"272\" \"273\" \"274\" \"275\"\n[271] \"276\" \"277\" \"278\" \"279\" \"280\" \"281\" \"282\" \"283\" \"284\" \"285\" \"286\" \"287\" \"288\" \"289\" \"290\" \"291\" \"292\" \"293\"\n[289] \"294\" \"295\" \"296\" \"297\" \"298\" \"299\" \"300\" \"301\" \"302\" \"303\" \"304\" \"305\" \"306\" \"307\" \"308\" \"309\" \"310\" \"311\"\n[307] \"312\" \"313\" \"314\" \"315\" \"316\" \"317\" \"318\" \"319\" \"320\" \"321\" \"322\" \"323\" \"324\" \"325\" \"326\" \"327\" \"328\" \"329\"\n[325] \"330\" \"331\" \"332\" \"333\" \"335\" \"336\" \"337\" \"338\" \"339\" \"340\" \"341\" \"342\" \"343\" \"344\" \"345\" \"346\" \"347\" \"348\"\n[343] \"349\" \"350\" \"351\" \"352\" \"353\" \"354\" \"355\" \"356\" \"357\" \"358\" \"359\" \"360\" \"361\" \"362\" \"363\" \"364\" \"365\" \"366\"\n[361] \"367\" \"368\" \"369\" \"370\" \"371\" \"372\" \"373\" \"374\" \"375\" \"376\" \"377\" \"378\" \"379\" \"380\" \"381\" \"382\" \"383\" \"384\"\n[379] \"385\" \"386\" \"387\" \"388\" \"389\" \"390\" \"391\" \"392\" \"393\" \"394\" \"395\" \"396\" \"397\" \"398\" \"399\" \"400\" \"401\" \"402\"\n[397] \"403\" \"404\" \"405\" \"406\" \"407\" \"408\" \"409\" \"410\" \"411\" \"412\" \"413\" \"414\" \"415\" \"416\" \"417\" \"418\" \"419\" \"420\"\n[415] \"421\" \"422\" \"423\" \"424\" \"425\" \"426\" \"427\" \"428\" \"429\" \"430\" \"431\" \"432\" \"433\" \"434\" \"435\" \"436\" \"437\" \"438\"\n[433] \"439\" \"440\"\n```", "```py\n> fviz_cluster(list(data = cust_data, cluster = grp))\n```", "```py\n> plot(as.hclust(cust_data_agnes))\n> rect.hclust(cust_data_agnes, k = 3, border = 2:5)\n```"]