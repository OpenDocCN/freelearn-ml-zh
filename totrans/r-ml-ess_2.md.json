["```py\nn1 <- 2\nn2 <- 3\n```", "```py\nn1\n[1] 2\n\n```", "```py\nn1 + n2\n[1] 5\nn1 * n2\n[1] 6\n\n```", "```py\nnSum <- n1 + n2\nnProd <- n1 * n2\nnSum\n[1] 5\n\n```", "```py\n# we performed some basic operations on the numbers\n```", "```py\nsum(2, 3)\n[1] 5\nsum(2, 3, 4)\n[1] 9\n\n```", "```py\ns1 <- sum(2, 3)\ns2 <- sum(2, 3, 4)\n```", "```py\nprint(s1)\n[1] 5\n\n```", "```py\nfunProd <- function(n1, n2)\n{\n  n <- n1 * n2\n  return(n)\n}\n```", "```py\nfunProdPrint <- function(n1, n2){\n  n <- n1 * n2\n  print(n1)\n  print(n2)\n  print(n)\n  return(n)\n}\nprod <- funProdPrint(n1 = 2, n2 = 3)\n[1] 2\n[1] 3\n[1] 6\n\n```", "```py\nhelp(sum)\n```", "```py\na1 <- c(1, 2, 3)\na1\n[1] 1 2 3\n\n```", "```py\na1[1]\n[1] 1\n\n```", "```py\na1[c(1, 2)]\n[1] 1 2\n\n```", "```py\na sPaste <- paste(s1, s2, sep = '_')\n1 + 1\n[1] 2 3 4\na2 <- c(1, 2, 3)\na1 + a2\n[1] 2 4 6\n\n```", "```py\na3 <- 1:10\na3\n[1]  1  2  3  4  5  6  7  8  9 10\n\n```", "```py\na4 <- c(1, NA, 2)\n```", "```py\nbool1 <- TRUE\nbool2 <- FALSE\nbool3 <- bool1 & bool2\nbool4 <- bool1 | bool2\nbool5 <- !bool1\nbool3\n[1] FALSE\nbool4\n[1] TRUE\nbool5\n[1] FALSE\n\n```", "```py\nx1 <- 1\nx2 <- 2\nbool5 <- x1 == x2\nbool6 <- x1 != x2\nbool7 <- x1 <= x2\nbool5\n[1] FALSE\nbool6\n[1] TRUE\nbool7\n[1] FALSE\n\n```", "```py\nif(bool5){\n  x <- 1\n}else{\n  x <- 2\n}\nx\n[1] 2\n\n```", "```py\nvectorI <- c(1, 2, 5)\nx <- 0\nfor(i in vectorI)\n{\n  if(i > 1)\n  {\n    x <- x + i\n  }\n}\nx\n[1] 7\n\n```", "```py\nnIter <- 10\nvectorIter <- 1:nIter\ntotal <- 0\nfor(i in vectorIter){\n  total <- total + 1\n}\ntotal\n[1] 10\n\n```", "```py\nclass(n1)\n[1] \"numeric\"\nclass(funProd)\n[1] \"function\"\nclass(bool5)\n[1] \"logical\"\nclass(a1)\n[1] \"numeric\"\n\n```", "```py\ns1 <- 'string1'\ns2 <- \"string2\"\n```", "```py\nsPaste <- paste(s1, s2, sep = '_')\nsPaste\n[1] \"string1_string2\"\nsSub <- substring(sPaste, 2, 5)\nsSub\n[1] \"trin\"\n\n```", "```py\nvectorStrings <- c(s1, s2, sPaste, sSub)\nvectorStrings\n[1] \"string1\"         \"string2\"         \"string1_string2\" \"trin\"\nclass(vectorStrings)\n[1] \"character\"\n\n```", "```py\nvectorStringsNum <- c(s1, s2, 10, 1.3)\nvectorStringsNum\n[1] \"string1\" \"string2\" \"10\"      \"1.3\" \nclass(vectorStringsNum)\n[1] \"character\"\n\n```", "```py\nvectorString <- c('a', 'a', 'b', 'c')\nvectorFactor <- factor(vectorString)\nclass(vectorFactor)\n[1] \"factor\"\n\n```", "```py\nlevels(vectorFactor)\n```", "```py\ntable(vectorFactor)\nvectorFactor\na b c \n2 1 1 \n\n```", "```py\nstringDate <- '2013-01-01'\nformatDate <- '%Y-%m-%d'\n```", "```py\ndate1 <- as.Date(stringDate, format = formatDate)\nclass(date1)\n[1] \"Date\"\ndate1\n[1] \"2013-01-01\"\n\n```", "```py\ndate2 <- date1 + 10\ndate2\n[1] \"2013-01-11\"\n\n```", "```py\ndate1 > date2\n[1] FALSE\n\n```", "```py\nl1 <- list(1, a1, sPaste)\nl1\n[[1]]\n[1] 1\n\n[[2]]\n[1] 1 2 3\n\n[[3]]\n[1] \"string1_string2\"\n\n```", "```py\nl2 <- list(elNumber = 1, elvector = a1, elString = sPaste)\nl2\n$elNumber\n[1] 1\n\n$elVector\n[1] 1 2 3\n\n$elString\n[1] \"string1_string2\"\n\n```", "```py\nl1[[1]]\n[1] 1\nl2[[1]]\n[1] 1\n\n```", "```py\nl2$elNumber\n[1] 1\n\n```", "```py\nnames(l2)\n[1] \"elNumber\" \"elVector\"  \"elString\"\n\n```", "```py\nnames(l1) <- c('el1', 'el2', 'el3')\nnames(l1)\n[1] \"el1\" \"el2\" \"el3\"\n\n```", "```py\nl3 <- l2[1]\nl3\n$elNumber\n[1] 1\nl4 <- l2[c(1, 2)]\nl4\n$elNumber\n[1] 1\n\n$elVector\n[1] 1 2 3\n\n```", "```py\nvectorMatrix <- c(1, 2, 3, 11, 12, 13)\nmatrix1 <- matrix(vectorMatrix, ncol = 2)\nmatrix1\n [,1] [,2]\n[1,]    1   11\n[2,]    2   12\n[3,]    3   13\n\n```", "```py\nmatrix2 <- t(matrix1)\nmatrix2\n [,1] [,2] [,3]\n[1,]    1    2    3\n[2,]   11   12   13\n\n```", "```py\nvector3 <- c('a', 'b', 'c')\nmatrix3 <- cbind(matrix1, vector3)\nmatrix3\n```", "```py\nrownames(matrix3)\nNULL\ncolnames(matrix3)\n[1] \"\"       \"\"       \"vector3\"\n\n```", "```py\nrownames(matrix3) <- c('row1', 'row2', 'row3')\ncolnames(matrix3) <- c('col1', 'col2', 'col3')\nmatrix3\n col1 col2 col3\nrow1 \"1\"  \"11\" \"a\" \nrow2 \"2\"  \"12\" \"b\" \nrow3 \"3\"  \"13\" \"c\" \n\n```", "```py\nView(df2)\n```", "```py\nx1 <- 1:10\nfunc1 <- function(el){\n  result <- el ^ 2\n  return(result)\n}\n```", "```py\nsapply(X = x1, FUN = func1)\n[1]   1   4   9  16  25  36  49  64  81 100\n\n```", "```py\nl1 <- list(a = 1, b = 2, c = 3)\nlapply(X = l1, FUN = func1)\n$a\n[1] 1\n\n$b\n[1] 4\n\n$c\n[1] 9\n\n```", "```py\nmatrix4 <- matrix(1:9, nrow = 3)\nmatrix4\n [,1] [,2] [,3]\n[1,]    1    4    7\n[2,]    2    5    8\n[3,]    3    6    9\n\n```", "```py\napply(X = matrix4, MARGIN = 1, FUN = sum)\n[1] 12 15 18\n\n```", "```py\napply(X = matrix4, MARGIN = 2, FUN = sum)\n[1]  6 15 24\n\n```", "```py\napply(X = matrix4, MARGIN = c(1, 2), FUN = func1)\n [,1] [,2] [,3]\n[1,]    1   16   49\n[2,]    4   25   64\n[3,]    9   36   81\n\n```", "```py\nlowerCamelCase\n```", "```py\nx <- 1\nsum(1, 2)\n```", "```py\ninstall.packages('data.table')\n```", "```py\ninstall.packages(\n  pkgs = 'data.table',\n  repos = 'http://cran.us.r-project.org'\n)\n```", "```py\nlibrary(data.table)\n```", "```py\ndata()\n```", "```py\nhelp(iris)\n```", "```py\nclass(iris)\n[1] \"data.frame\"\ndtIris <- data.table(iris)\nclass(dtIris)\n[1] \"data.table\" \"data.frame\"\n\n```", "```py\nstr(dtIris)\nClasses 'data.table' and 'data.frame':  150 obs. of  5 variables:\n $ Sepal.Length: num  5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ...\n $ Sepal.Width : num  3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ...\n $ Petal.Length: num  1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ...\n $ Petal.Width : num  0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ...\n $ Species     : Factor w/ 3 levels \"setosa\",\"versicolor\",..: 1 1 1 1 1 1 1 1 1 1 ...\n - attr(*, \".internal.selfref\")=<externalptr> \n\n```", "```py\nprint(dtIris)\n Sepal.Length Sepal.Width Petal.Length Petal.Width   Species\n 1:          5.1         3.5          1.4         0.2    setosa\n 2:          4.9         3.0          1.4         0.2    setosa\n 3:          4.7         3.2          1.3         0.2    setosa\n 4:          4.6         3.1          1.5         0.2    setosa\n 5:          5.0         3.6          1.4         0.2    setosa\n --- \n146:          6.7         3.0          5.2         2.3 virginica\n147:          6.3         2.5          5.0         1.9 virginica\n148:          6.5         3.0          5.2         2.0 virginica\n149:          6.2         3.4          5.4         2.3 virginica\n150:          5.9         3.0          5.1         1.8 virginica\n\n```", "```py\nView(dtIris)\n```", "```py\ndtIris[1]\n Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1:          5.1         3.5          1.4         0.2  setosa\n\n```", "```py\ndtIris[1:3]\n Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1:          5.1         3.5          1.4         0.2  setosa\n2:          4.9         3.0          1.4         0.2  setosa\n3:          4.7         3.2          1.3         0.2  setosa\n\n```", "```py\ndtIris[, Species]\n[1] setosa     setosa     setosa     setosa     setosa     setosa \nâ€¦\n[145] virginica  virginica  virginica  virginica  virginica  virginica \nLevels: setosa versicolor virginica\n\n```", "```py\ndtIris[1:3, Species]\n[1] setosa setosa setosa\nLevels: setosa versicolor virginica\n\n```", "```py\ndtIris[1:3, 'Species', with = F]\n Species\n1:  setosa\n2:  setosa\n3:  setosa\n\n```", "```py\ndtIris[1:3, c(5, 1, 2), with = F]\n Species Sepal.Length Sepal.Width\n1:  setosa          5.1         3.5\n2:  setosa          4.9         3.0\n3:  setosa          4.7         3.2\n\n```", "```py\ndtIris[Sepal.Length > 7]\n Sepal.Length Sepal.Width Petal.Length Petal.Width   Species\n 1:          7.1         3.0          5.9         2.1 virginica\n 2:          7.6         3.0          6.6         2.1 virginica\n 3:          7.3         2.9          6.3         1.8 virginica\n 4:          7.2         3.6          6.1         2.5 virginica\n 5:          7.7         3.8          6.7         2.2 virginica\n 6:          7.7         2.6          6.9         2.3 virginica\n 7:          7.7         2.8          6.7         2.0 virginica\n 8:          7.2         3.2          6.0         1.8 virginica\n 9:          7.2         3.0          5.8         1.6 virginica\n10:          7.4         2.8          6.1         1.9 virginica\n11:          7.9         3.8          6.4         2.0 virginica\n12:          7.7         3.0          6.1         2.3 virginica\n\n```", "```py\ndtIris[, Sepal.Area := Sepal.Length * Sepal.Width]\ndtIris[1:6]\n Sepal.Length Sepal.Width Petal.Length Petal.Width Species Sepal.Area\n1:          5.1         3.5          1.4         0.2  setosa      17.85\n2:          4.9         3.0          1.4         0.2  setosa      14.70\n3:          4.7         3.2          1.3         0.2  setosa      15.04\n4:          4.6         3.1          1.5         0.2  setosa      14.26\n5:          5.0         3.6          1.4         0.2  setosa      18.00\n6:          5.4         3.9          1.7         0.4  setosa      21.06\n\n```", "```py\ndtIris[, mean(Sepal.Area)]\n[1] 17.82287\n\n```", "```py\ndtIris[, mean(Sepal.Area), by = 'Species']\n Species      V1\n1:     setosa 17.2578\n2: versicolor 16.5262\n3:  virginica 19.6846\n\n```", "```py\ndtIris[\n     , list(areaMin = min(Sepal.Area), areaMax = max(Sepal.Area)),\n     by = 'Species'\n     ]\n Species areaMin areaMax\n1:     setosa   10.35   25.08\n2: versicolor   10.00   22.40\n3:  virginic\na   12.25   30.02\n\n```", "```py\ninstall.packages('plyr')\nlibrary('plyr')\n```", "```py\nfuncDl <- function(dtChunk){\n  result <- mean(dtIris$Sepal.Length)\n  return(result)\n}\n```", "```py\ndlply(\n  .data = iris,\n  .variables = 'Species',\n  .fun = funcDl\n)\n$setosa\n[1] 5.843333\n\n$versicolor\n[1] 5.843333\n\n$virginica\n[1] 5.843333\n\n```", "```py\nnames(listIris)\n```", "```py\nlistIris$setosa\n```"]