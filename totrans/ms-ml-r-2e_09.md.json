["```py\n > library(ggplot2) #support scatterplot\n\n    > library(psych) #PCA package \n\n```", "```py\n > train <- read.csv(\"NHLtrain.csv\") \n\n```", "```py\n    > str(train)\n    'data.frame': 30 obs. of 15 variables:\n    $ Team : Factor w/ 30 levels \"Anaheim\",\"Arizona\",..: 1 2 3 4 5 6 7 \n      8 9 10 ...\n    $ ppg : num 1.26 0.95 1.13 0.99 0.94 1.05 1.26 1 0.93 1.33 ...\n    $ Goals_For : num 2.62 2.54 2.88 2.43 2.79 2.39 2.85 2.59 2.6 3.23 \n      ...\n    $ Goals_Against: num 2.29 2.98 2.78 2.62 3.13 2.7 2.52 2.93 3.02 \n      2.78 ...\n\n```", "```py\n    > names(train)\n    [1] \"Team\" \"ppg\" \"Goals_For\" \"Goals_Against\" \"Shots_For\" \n [6] \"Shots_Against\" \"PP_perc\" \"PK_perc\" \"CF60_pp\" \"CA60_sh\" \n [11] \"OZFOperc_pp\" \"Give\" \"Take\" \"hits\" \"blks\"\n\n```", "```py\n    > train.scale <- scale(train[, -1:-2])\n\n    > nhl.cor <- cor(train.scale)\n\n    > cor.plot(nhl.cor)\n\n```", "```py\n    > pca <- principal(train.scale, rotate=\"none\")\n\n```", "```py\n    > plot(pca$values, type=\"b\", ylab=\"Eigenvalues\", xlab=\"Component\")\n\n```", "```py\n > pca.rotate <- principal(train.scale, nfactors = 5, rotate = \n      \"varimax\")    \n\n > pca.rotate\n    Principal Components Analysis\n    Call: principal(r = train.scale, nfactors = 5, rotate = \"varimax\")\n    Standardized loadings (pattern matrix) based upon correlation \n      matrix\n                    RC1   RC2    RC5   RC3    RC4    h2    u2  com\n    Goals_For     -0.21  0.82   0.21  0.05  -0.11  0.78  0.22  1.3\n    Goals_Against  0.88 -0.02  -0.05  0.21   0.00  0.82  0.18  1.1\n    Shots_For     -0.22  0.43   0.76 -0.02  -0.10  0.81  0.19  1.8\n    Shots_Against  0.73 -0.02  -0.20 -0.29   0.20  0.70  0.30  1.7\n    PP_perc       -0.73  0.46  -0.04 -0.15   0.04  0.77  0.23  1.8\n    PK_perc       -0.73 -0.21   0.22 -0.03   0.10  0.64  0.36  1.4\n    CF60_pp       -0.20  0.12   0.71  0.24   0.29  0.69  0.31  1.9\n    CA60_sh        0.35  0.66  -0.25 -0.48  -0.03  0.85  0.15  2.8\n    OZFOperc_pp   -0.02 -0.18   0.70 -0.01   0.11  0.53  0.47  1.2\n    Give          -0.02  0.58   0.17  0.52   0.10  0.65  0.35  2.2\n    Take           0.16  0.02   0.01  0.90  -0.05  0.83  0.17  1.1\n    hits          -0.02 -0.01   0.27 -0.06   0.87  0.83  0.17  1.2\n    blks           0.19  0.63  -0.18  0.14   0.47  0.70  0.30  2.4\n\n                       RC1  RC2  RC5  RC3  RC4\nSS loadings           2.69 2.33 1.89 1.55 1.16\nProportion Var        0.21 0.18 0.15 0.12 0.09\nCumulative Var        0.21 0.39 0.53 0.65 0.74\nProportion Explained  0.28 0.24 0.20 0.16 0.12\nCumulative Proportion 0.28 0.52 0.72 0.88 1.00\n\n```", "```py\n > pca.scores <- data.frame(pca.rotate$scores)\n\n > head(pca.scores)\n RC1          RC2        RC5         RC3        RC4\n 1 -2.21526408  0.002821488  0.3161588  -0.1572320  1.5278033\n 2  0.88147630 -0.569239044 -1.2361419  -0.2703150 -0.0113224\n 3  0.10321189  0.481754024  1.8135052  -0.1606672  0.7346531\n 4 -0.06630166 -0.630676083 -0.2121434  -1.3086231  0.1541255\n 5  1.49662977  1.156905747 -0.3222194   0.9647145 -0.6564827\n 6 -0.48902169 -2.119952370  1.0456190   2.7375097 -1.3735777\n\n```", "```py\n > pca.scores$ppg <- train$ppg \n\n```", "```py\n > nhl.lm <- lm(ppg ~ ., data = pca.scores)\n > summary(nhl.lm)\n\n Call:\n lm(formula = ppg ~ ., data = pca.scores)\n\n Residuals:\n Min        1Q   Median       3Q      Max \n -0.163274 -0.048189 0.003718 0.038723 0.165905 \n\n Coefficients:\n Estimate       Std. Error t value Pr(>|t|) \n (Intercept) 1.111333   0.015752  70.551  < 2e-16  ***\n RC1        -0.112201   0.016022  -7.003  3.06e-07 ***\n RC2         0.070991   0.016022   4.431  0.000177 ***\n RC5         0.022945   0.016022   1.432  0.164996 \n RC3        -0.017782   0.016022  -1.110  0.278044 \n RC4        -0.005314   0.016022  -0.332  0.743003 \n ---\nSignif. codes: 0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1\n\nResidual standard error: 0.08628 on 24 degrees of freedom\nMultiple R-squared: 0.7502, Adjusted R-squared: 0.6981 \nF-statistic: 14.41 on 5 and 24 DF, p-value: 1.446e-06 \n\n```", "```py\n > nhl.lm2 <- lm(ppg ~ RC1 + RC2, data = pca.scores)\n > summary(nhl.lm2)\n\n Call:\n lm(formula = ppg ~ RC1 + RC2, data = pca.scores)\n\n Residuals:\n Min       1Q  Median      3Q     Max \n -0.18914 -0.04430 0.01438 0.05645 0.16469 \n\n Coefficients:\n Estimate Std. Error t value  Pr(>|t|) \n (Intercept) 1.11133    0.01587  70.043   < 2e-16  ***\n RC1        -0.11220    0.01614  -6.953   1.8e-07  ***\n RC2         0.07099    0.01614   4.399   0.000153 ***\n ---\nSignif. codes: 0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1\n\nResidual standard error: 0.0869 on 27 degrees of freedom\nMultiple R-squared: 0.7149, Adjusted R-squared: 0.6937 \nF-statistic: 33.85 on 2 and 27 DF, p-value: 4.397e-08 \n\n```", "```py\n > plot(nhl.lm2$fitted.values, train$ppg,\n main=\"Predicted versus Actual\",\n xlab=\"Predicted\",ylab=\"Actual\") \n\n```", "```py\n > train$pred <- round(nhl.lm2$fitted.values, digits = 2)\n\n > p <- ggplot(train, aes(x = pred,\n y = ppg,\n label = Team))\n\n > p + geom_point() +\n geom_text(size = 3.5, hjust = 0.1, vjust = -0.5, angle = 0) +\n xlim(0.8, 1.4) + ylim(0.8, 1.5) +\n stat_smooth(method = \"lm\", se = FALSE) \n\n```", "```py\n    > p + geom_point() +\n\n```", "```py\n    geom_text() +\n\n```", "```py\n    xlim() + ylim() +\n\n```", "```py\n    stat_smooth(method = \"lm\", se = FALSE)\n\n```", "```py\n > pca.scores$Team <- train$Team\n\n > p2 <- ggplot(pca.scores, aes(x = RC1, y = RC2, label = Team))\n\n > p2 + geom_point() +\n geom_text(size = 2.75, hjust = .2, vjust = -0.75, angle = 0) +\n xlim(-2.5, 2.5) + ylim(-3.0, 2.5) \n\n```", "```py\n > sqrt(mean(nhl.lm2$residuals^2))\n [1] 0.08244449\n\n```", "```py\n > test <- read.csv(\"NHLtest.csv\")\n > test.scores <- data.frame(predict(pca.rotate, test[, c(-1:-2)]))\n > test.scores$pred <- predict(nhl.lm2, test.scores)\n\n```", "```py\n > test.scores$ppg <- test$ppg\n\n > test.scores$Team <- test$Team\n\n```", "```py\n > p <- ggplot(test.scores, aes(x = pred,\n y = ppg,\n label = Team)) \n\n > p + geom_point() + \n geom_text(size=3.5, hjust=0.4, vjust = -0.9, angle = 35) + \n xlim(0.75, 1.5) + ylim(0.5, 1.6) +\n stat_smooth(method=\"lm\", se=FALSE)\n\n```", "```py\n > resid <- test.scores$ppg - test.scores$pred\n\n > sqrt(mean(resid^2))\n [1] 0.1011561\n\n```"]