["```py\n    model = tf.keras.sequential\n    model.add(df.keras.layers.Dense(128,activation='relu',input_shape=(200, )))\n    model.add(df.keras.layers.Dropout(rate=0.25))\n    model.add(df.keras.layers.Dense(4,activation='relu'))\n    model.add(df.keras.layers.Dropout(rate=0.25))\n    model.add(Dense(2))\n    ```", "```py\n    gcloud projects create test10122021 --folder 464105225938\n    gcloud compute networks create vpc1 --project corvel-032021  --subnet-mode=custom\n    gcloud compute networks subnets create subnet11 --network=vpc1 --range=10.10.1.0/24 --project corvel-032021 --region us-west1\n    gcloud compute networks subnets create subnet12 --network=vpc1 --range=10.10.2.0/24 --project corvel-032021 --region us-east1\n    gcloud compute networks create vpc2 --project corvel-032021  --subnet-mode=custom\n    gcloud compute networks subnets create subnet2 --network=vpc2 --range=192.168.1.0/24 --project corvel-032021 --region us-central1\n    gcloud compute networks create vpc3 --project test10122021  --subnet-mode=custom\n    gcloud compute networks subnets create subnet3 --network=vpc3 --range=172.16.1.0/24 --project test10122021 --region us-central1\n    ```", "```py\n    gcloud compute instances create myvm11 --project corvel-032021 --machine-type=f1-micro --zone=us-west1-a  --subnet=subnet11\n    gcloud compute instances create myvm12 --project corvel-032021 --machine-type=f1-micro --network-interface=subnet=subnet12,no-address  --zone=us-east1-b\n    gcloud compute instances create myvm2 --project corvel-032021 --machine-type=f1-micro --network-interface=subnet=subnet2,no-address  --zone=us-central1-b\n    gcloud compute instances create myvm3 --project test10122021 --machine-type=f1-micro --network-interface=subnet=subnet3,no-address --zone=us-central1-b\n    ```", "```py\n    gcloud compute instances list --project corvel-032021    \n    gcloud compute instances list --project test10122021\n    ```", "```py\n    gcloud compute firewall-rules create fw1 --network vpc1 --allow tcp:22,icmp --source-ranges 0.0.0.0/0 --project corvel-032021\n    ```", "```py\n    gcloud compute networks peerings create peer12 --project=corvel-032021  --network=vpc1 --peer-project=corvel-032021 --peer-network=vpc2\n    gcloud compute networks peerings create peer21 --peer-project=corvel-032021  --network=vpc2 --project=corvel-032021 --peer-network=vpc1\n    gcloud compute networks peerings list --project=corvel-032021\n    ```", "```py\n    gcloud compute firewall-rules create fw2 --network vpc2 --allow tcp:22,icmp --source-ranges 0.0.0.0/0 --project corvel-032021\n    ```", "```py\n    gcloud compute networks peerings create peer13 --project=corvel-032021  --network=vpc1 --peer-project=test10122021 --peer-network=vpc3\n    gcloud compute networks peerings create peer31 --project=test10122021 --network=vpc3 --peer-project=corvel-032021 --peer-network=vpc1\n    gcloud compute networks peerings list --project=corvel-032021\n    ```", "```py\n    gcloud compute firewall-rules create fw3 --network vpc3 --allow tcp:22,icmp --source-ranges 10.10.1.0/24 --project test10122021\n    ```", "```py\nimport numpy as np\nmy_list = [1,2,3]\nmy_list\n[1, 2, 3]\nimport numpy as np\nmy_list = [1,2,3]\narr = np.array(my_list)\narr\narray([1, 2, 3])\n```", "```py\nimport numpy as np\nmy_mat =[[10,20,30],[40,50,60],[70,80,90]]\nnp.array(my_mat)\narray([[10, 20, 30],\n       [40, 50, 60],\n       [70, 80, 90]])\n```", "```py\nimport numpy as np\nnp.arange(0,10)\narray([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n```", "```py\nimport numpy as np\nnp.arange(0,11,2)\narray([ 0, 2, 4, 6, 8, 10])\n```", "```py\nimport numpy as np\nnp.zeros(5)\narray([0., 0., 0., 0., 0.])\n```", "```py\nimport numpy as np\nnp.zeros((4,4))\narray([[0., 0., 0., 0.],\n       [0., 0., 0., 0.],\n       [0., 0., 0., 0.],\n       [0., 0., 0., 0.]])\n```", "```py\nimport numpy as np\nnp.ones((3,4))\narray([[1., 1., 1., 1.],\n       [1., 1., 1., 1.],\n       [1., 1., 1., 1.]])\n```", "```py\nimport numpy as np\nnp.linspace(0,5,10)\narray([0.        , 0.55555556, 1.11111111, 1.66666667, 2.22222222,\n       2.77777778, 3.33333333, 3.88888889, 4.44444444, 5.        ])\n```", "```py\nimport numpy as np\nnp.linspace(0,5,25)\narray([0.        , 0.20833333, 0.41666667, 0.625     , 0.83333333,\n       1.04166667, 1.25      , 1.45833333, 1.66666667, 1.875     ,\n       2.08333333, 2.29166667, 2.5       , 2.70833333, 2.91666667,\n       3.125     , 3.33333333, 3.54166667, 3.75      , 3.95833333,\n       4.16666667, 4.375     , 4.58333333, 4.79166667, 5.\n```", "```py\nimport numpy as np\nnp.eye(5)\narray([[1., 0., 0., 0., 0.],\n       [0., 1., 0., 0., 0.],\n       [0., 0., 1., 0., 0.],\n       [0., 0., 0., 1., 0.],\n       [0., 0., 0., 0., 1.]])\n```", "```py\nimport numpy as np\nnp.random.rand(4,5)\narray([[0.44698983, 0.46938684, 0.66609426, 0.95168835, 0.48775195],\n       [0.17627195, 0.98549358, 0.69526343, 0.44981183, 0.11574242],\n       [0.09377203, 0.35856856, 0.38228733, 0.6129268 , 0.16385609],\n       [0.79041234, 0.9281485 , 0.72570369, 0.46438003, 0.3159711 ]])\n```", "```py\nimport numpy as np\nnp.random.randn(4)\narray([ 1.57461921, -1.47658163, 0.38070033, -1.43224982])\n```", "```py\nimport numpy as np\nnp.random.randint(1,100)\n29\n```", "```py\nimport numpy as np\nnp.random.randint(1,100,10)\narray([29, 7, 33, 85, 83, 34, 5, 50, 53, 39])\n```", "```py\nimport numpy as np\narray = np.arange(25)\narray\narray([ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\narray.reshape(5,5)\narray([[ 0,  1,  2,  3,  4],\n       [ 5,  6,  7,  8,  9],\n       [10, 11, 12, 13, 14],\n       [15, 16, 17, 18, 19],\n       [20, 21, 22, 23, 24]])\n```", "```py\nimport numpy as np\narray = np.random.randint(0,50,10)\narray\narray([ 2, 8, 31, 2, 25, 34, 49, 8, 49, 42])\narray.max()\n49\narray.min()\n2\n```", "```py\nimport numpy as np\narray = np.random.randint(0,50,10)\narray\narray([42, 38, 43, 22, 39, 4, 20, 30, 49, 13])\narray[3]\n22\narray[0:4]\narray([42, 38, 43, 22])\n```", "```py\nimport numpy as np\narray = np.random.randint(0,50,100)\narray\narray([42, 10, 14, 34, 45, 18, 21, 11, 33, 32, 22, 13, 11, 42, 16, 20, 10,\n        1, 36, 41, 45, 21, 45, 45, 41,  0, 38, 39, 16, 10, 18, 45, 43, 42,\n       23, 31, 20, 14,  9, 46, 44, 33, 24, 35,  6,  6, 26, 13, 20, 20, 28,\n       23, 46, 40, 15, 43, 17, 31, 15, 48,  9, 17, 46, 28, 48, 41, 30, 28,\n       32, 40, 35,  8, 10,  5, 33, 30,  4, 38, 47, 22, 13, 14, 29,  1, 15,\n       48, 18, 48, 18, 21, 45,  9,  6,  1, 31, 28,  5, 42,  8, 28])\narray[0:3] = 100\narray\narray([100, 100, 100,  34,  45,  18,  21,  11,  33,  32,  22,  13,  11,\n        42,  16,  20,  10,   1,  36,  41,  45,  21,  45,  45,  41,   0,\n        38,  39,  16,  10,  18,  45,  43,  42,  23,  31,  20,  14,   9,\n        46,  44,  33,  24,  35,   6,   6,  26,  13,  20,  20,  28,  23,\n        46,  40,  15,  43,  17,  31,  15,  48,   9,  17,  46,  28,  48,\n        41,  30,  28,  32,  40,  35,   8,  10,   5,  33,  30,   4,  38,\n        47,  22,  13,  14,  29,   1,  15,  48,  18,  48,  18,  21,  45,\n         9,   6,   1,  31,  28,   5,  42,   8,  28])\n```", "```py\nimport numpy as np\narray = np.random.randint(0,50,25).reshape(5,5)\narray\narray([[15, 21, 34, 39, 18],\n       [42, 41, 28, 24,  2],\n       [43, 25, 38, 42, 35],\n       [ 3,  4, 27,  2, 49],\n       [17,  5, 33, 11, 30]])\narray[0:3]\narray([[15, 21, 34, 39, 18],\n       [42, 41, 28, 24,  2],\n       [43, 25, 38, 42, 35]])\n```", "```py\nimport numpy as np\narray = np.random.randint(0,50,25).reshape(5,5)\narray\narray([[47, 25,  1, 33,  7],\n       [31, 18,  9, 13, 41],\n       [28, 33, 34, 19,  2],\n       [ 1, 32, 45, 34, 48],\n       [27, 34, 38, 18,  9]])\narray > 25\narray([[ True, False, False,  True, False],\n       [ True, False, False, False,  True],\n       [ True,  True,  True, False, False],\n       [False,  True,  True,  True,  True],\n       [ True,  True,  True, False, False]])\n```", "```py\nimport numpy as np\narray = np.arange(10)\narray\narray([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\narray + array\narray([ 0, 2, 4, 6, 8, 10, 12, 14, 16, 18])\narray * 2\narray([ 0, 2, 4, 6, 8, 10, 12, 14, 16, 18])\nnp.sin(array)\narray([ 0.        ,  0.84147098,  0.90929743,  0.14112001, -0.7568025 ,\n       -0.95892427, -0.2794155 ,  0.6569866 ,  0.98935825,  0.41211849])\n```", "```py\nconda install pandas\npip install pandas\n```", "```py\nimport numpy as np\nimport pandas as pd\nlabels = ['A', 'B','C']\nmy_data = [100,200,300]\narray = np.array(my_data)\nd = {'A':100, 'B':200, 'C':300}\npd.Series(data = my_data)\nA    100\nB    200\nC    300\ndtype: int64\n```", "```py\npd.Series(my_data, labels)\nA    100\nB    200\nC    300\ndtype: int64\n```", "```py\npd.Series(d)\nA    100\nB    200\nC    300\ndtype: int64\n```", "```py\npd.Series(labels, my_data)\n100    A\n200    B\n300    C\ndtype: object\nNext we will examine Dataframes.\n```", "```py\nimport numpy as np\nimport pandas as pd \nfrom numpy.random import randn\nnp.random.seed(101)\ndf = pd.DataFrame(randn(5,4),['a','b','c','d','e'],['x','y','z','t'])\ndf\n          x         y          z         t\na     2.706850  0.628133    0.907969  0.503826\nb     0.651118  -0.319318  -0.848077  0.605965\nc     -2.018168  0.740122    0.528813 -0.589001\nd     0.188695  -0.758872  -0.933237  0.955057\ne     0.190794  1.978757    2.605967  0.683509\n```", "```py\ndf['x']\na    2.706850\nb    0.651118\nc   -2.018168\nd    0.188695\ne    0.190794\nName: x, dtype: float64\n```", "```py\ntype(df['x']) \npandas.core.series.Series\n```", "```py\ndf[['x','y']]\n          x         y\na     2.706850    0.628133\nb     0.651118   -0.319318\nc    -2.018168    0.740122\nd    0.188695    -0.758872\ne    0.190794     1.978757\n```", "```py\ndf['new'] = df['x'] + df['y']\ndf\n        x            y         z        t         new\na    2.706850    0.628133  0.907969   0.503826   3.334983\nb    0.651118   -0.319318  -0.848077  0.605965   0.331800\nc    -2.018168   0.740122  0.528813  -0.589001   -1.278046\nd     0.188695  -0.758872  -0.933237  0.955057   -0.570177\ne   0.190794    1.978757    2.605967   0.683509  2.169552\n```", "```py\ndf.drop('new', axis=1)\n         x           y          z        t\na     2.706850   0.628133   0.907969   0.503826\nb     0.651118   -0.319318  -0.848077  0.605965\nc     -2.018168  0.740122   0.528813   -0.589001\nd     0.188695   -0.758872  -0.933237  0.955057\ne     0.190794    1.978757   2.605967  0.683509\n```", "```py\ndf\n         x         y           z          t        new\na    2.706850   0.628133   0.907969   0.503826   3.334983\nb    0.651118   -0.319318  -0.848077  0.605965   0.331800\nc    -2.018168  0.740122   0.528813  -0.589001   -1.278046\nd    0.188695   -0.758872  -0.933237  0.955057   -0.570177\ne    0.190794   1.978757   2.605967   0.683509   2.169552\ndf.loc['a']\nx      2.706850\ny      0.628133\nz      0.907969\nt      0.503826\nnew    3.334983\nName: a, dtype: float64\n```", "```py\ndf \n        x           y         z          t         new\na   2.706850   0.628133    0.907969   0.503826   3.334983\nb   0.651118   -0.319318   -0.848077  0.605965   0.331800\nc   -2.018168   0.740122   0.528813   0.589001   -1.278046\nd   0.188695   -0.758872   -0.933237  0.955057   -0.570177\ne   0.190794   1.978757    2.605967   0.683509   2.169552\ndf > 0\n       x      y     z      t     new\na    True   True   True   True   True\nb    True   False  False  True   True\nc    False  True   True   False  False\nd    True   False  False  True   False\ne    True   True   True   True   True \n```", "```py\ndf\n         x         y          z          t        new\na    2.706850   0.628133   0.907969   0.503826   3.334983\nb    0.651118   -0.319318  -0.848077  0.605965   0.331800\nc    -2.018168   0.740122  0.528813  -0.589001   -1.278046\nd    0.188695   -0.758872  -0.933237  0.955057   -0.570177\ne    0.190794   1.978757   2.605967   0.683509    2.169552\ndf[df > 0].dropna()\n         x           y        z           t         new\na     2.706850   0.628133  0.907969   0.503826   3.334983\ne     0.190794   1.978757  2.605967   0.683509   2.169552\n```", "```py\nnew_df = df[df > 0]\nnew_df\n         x         y           z         t        new\na    2.706850   0.628133   0.907969   0.503826  3.334983\nb    0.651118      NaN        NaN     0.605965  0.331800\nc       NaN     0.740122   0.528813    NaN         NaN\nd    0.188695      NaN       NaN      0.955057     NaN\ne    0.190794   1.978757    2.605967  0.683509  2.169552\n```", "```py\nnew_df['x'].fillna(value=new_df['x'].mean())\na    2.706850\nb    0.651118\nc    0.934364\nd    0.188695\ne    0.190794\nName: x, dtype: float64\n```", "```py\nimport numpy as np\nimport pandas as pd\ndata = {'Country': ['USA', 'USA', 'France', 'France','Germany','Germany'],\n        'Person': ['Sam','Amy','Carhile','Richard','John','Frank'],\n        'Sales': [250, 300, 125, 500, 350, 200]}\ndf = pd.DataFrame(data)\ndf\n    Country    Person     Sales\n0    USA        Sam       250\n1    USA        Amy       300\n2    France     Carhile   125\n3    France     Richard   500\n4    Germany    John      350\n5    Germany    Frank     200\n```", "```py\ndf.groupby('Country').sum()\nCountry    Sales\nFrance     625\nGermany    550\nUSA        550\n```", "```py\nimport pandas as pd\ndf = pd.read_csv('Salaries.csv')\ndf\n```", "```py\ndf.info()\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 148654 entries, 0 to 148653\nData columns (total 13 columns):\n#   Column            Non-Null Count   Dtype  \n---  ------            --------------   -----  \n0   Id                148654 non-null  int64  \n1   EmployeeName      148654 non-null  object \n2   JobTitle          148654 non-null  object \n3   BasePay           148049 non-null  object \n4   OvertimePay       148654 non-null  object \n5   OtherPay          148654 non-null  object \n6   Benefits          112495 non-null  object \n7   TotalPay          148654 non-null  float64\n8   TotalPayBenefits  148654 non-null  float64\n9   Year              148654 non-null  int64  \n10  Notes             0 non-null       float64\n11  Agency            148654 non-null  object \n12  Status            38119 non-null   object \ndtypes: float64(3), int64(2), object(8)\nmemory usage: 14.7+ MB\ndf[\"TotalPay\"].mean()\n74768.32197169267\ndf[df[\"EmployeeName\"] == \"Joseph Driscoll\"][\"JobTitle\"]\n36198    Captain, Fire Suppression\nName: JobTitle, dtype: object\n```", "```py\nimport matplotlib.pyplot as plt\nimport numpy as np\na = np.linspace(1,10,15)\na\narray([ 1.        ,  1.64285714,  2.28571429,  2.92857143,  3.57142857,\n        4.21428571,  4.85714286,  5.5       ,  6.14285714,  6.78571429,\n        7.42857143,  8.07142857,  8.71428571,  9.35714286, 10.\n```", "```py\nb = a ** 2\nb\narray([  1.        ,   2.69897959,   5.2244898 ,   8.57653061,\n        12.75510204,  17.76020408,  23.59183673,  30.25      ,\n        37.73469388,  46.04591837,  55.18367347,  65.14795918,\n        75.93877551,  87.55612245, 100.        ])\n```", "```py\nplt.plot(a,b)\n```", "```py\nplt.subplot(1,2,1) \nplt.plot(a,b)\nplt.title(\"Dito training 1\")\nplt.subplot(1,2,2)\nplt.plot(b,a,\"r\")\nplt.title(\"Dito training 2\")\n```", "```py\nimport matplotlib.pyplot as plt\nfig = plt.figure()\n<Figure size 432x288 with 0 Axes>\nimport matplotlib.pyplot as plt\nfig = plt.figure()\naxes = fig.add_axes([0.1,0.1,0.8,0.8])\n```", "```py\nimport matplotlib.pyplot as plt\nimport numpy as np\na = np.linspace(1,10,15)\nb = a ** 2\nfig = plt.figure()\naxes = fig.add_axes([0.1,0.1,0.8,0.8])\naxes.plot(a,b)\n```", "```py\nimport matplotlib.pyplot as plt\nimport numpy as np\na = np.linspace(1,10,15)\nb = a ** 2\nfig = plt.figure()\naxes1 = fig.add_axes([0.1,0.1,0.8,0.8])\naxes2 = fig.add_axes([0.2,0.5,0.4,0.3])\naxes1.plot(a,b)\naxes2.plot(b,a)\naxes1.set_xlabel(\"X1 Label\")\naxes1.set_ylabel(\"Y1 Label\")\naxes1.set_title(\"Title 1\")\naxes2.set_xlabel(\"X2 Label\")\naxes2.set_ylabel(\"Y2 Label\")\naxes2.set_title(\"Title 2\")\n```", "```py\nimport matplotlib.pyplot as plt\nimport numpy as np\na = np.linspace(1,10,15)\nb = a ** 2\nfig = plt.figure()\nax = fig.add_axes([0,0,1,1])\nax.plot(a, a**2, label = 'a squared')\nax.plot(a, a**3, label = 'a cubed')\nax.legend()\n```", "```py\nimport seaborn as sns\ntips = sns.load_dataset('tips')\ntips.head()\n```", "```py\n    total_bill   tip    sex    smoker  day    time    size\n0   16.99       1.01    Female   No    Sun   Dinner    2\n1   10.34       1.66    Male     No    Sun   Dinner    3\n2   21.01       3.50    Male     No    Sun   Dinner    3\n3   23.68       3.31    Male     No    Sun   Dinner    2\n4   24.59       3.61    Female   No    Sun   Dinner    4\ntips.info()\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 244 entries, 0 to 243\nData columns (total 7 columns):\n#   Column      Non-Null Count  Dtype   \n---  ------      --------------  -----   \n0   total_bill  244 non-null    float64 \n1   tip         244 non-null    float64 \n2   sex         244 non-null    category\n3   smoker      244 non-null    category\n4   day         244 non-null    category\n5   time        244 non-null    category\n6   size        244 non-null    int64   \ndtypes: category(4), float64(2), int64(1)\nmemory usage: 7.4 KB\n```", "```py\nsns.displot(tips['total_bill']) \n```", "```py\nsns.displot(tips['total_bill'], kde=True, bins = 40)\n```", "```py\nsns.jointplot('total_bill', 'tip', data=tips)\n```", "```py\nsns.jointplot('total_bill', 'tip', data=tips, kind = 'hex')\n```", "```py\nsns.boxplot(x='day', y='total_bill', data=tips)\n```", "```py\nsns.violinplot(x='day', y='total_bill', data=tips)\n```", "```py\nsns.violinplot(x='day', y='total_bill', data=tips,\n               hue = 'sex', split=True)\n```", "```py\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n```", "```py\ndataset = pd.read_csv('Data.csv')\nX = dataset.iloc[:,:-1].values\ny = dataset.iloc[:, -1].values\nprint(X)\n[['France' 44.0 72000.0]\n['Spain' 27.0 48000.0]\n['Germany' 30.0 54000.0]\n['Spain' 38.0 61000.0]\n['Germany' 40.0 nan]\n['France' 35.0 58000.0]\n['Spain' nan 52000.0]\n['France' 48.0 79000.0]\n['Germany' 50.0 83000.0]\n['France' 37.0 67000.0]]\n```", "```py\nfrom sklearn.impute import SimpleImputer\nimputer = SimpleImputer(missing_values=np.nan, strategy='mean')\nimputer.fit(X[:, 1:3])\nX[:, 1:3] = imputer.transform(X[:,1:3])\nprint(X)\n[['France' 44.0 72000.0]\n['Spain' 27.0 48000.0]\n['Germany' 30.0 54000.0]\n['Spain' 38.0 61000.0]\n['Germany' 40.0 63777.77777777778]\n['France' 35.0 58000.0]\n['Spain' 38.77777777777778 52000.0]\n['France' 48.0 79000.0]\n['Germany' 50.0 83000.0]\n['France' 37.0 67000.0]]\n```", "```py\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import OneHotEncoder\nct = ColumnTransformer(transformers=[('encoder', OneHotEncoder(), [0])],\nremainder = 'passthrough')\nX = np.array(ct.fit_transform(X))\nprint(X)\n[[1.0 0.0 0.0 44.0 72000.0]\n[0.0 0.0 1.0 27.0 48000.0]\n[0.0 1.0 0.0 30.0 54000.0]\n[0.0 0.0 1.0 38.0 61000.0]\n[0.0 1.0 0.0 40.0 63777.77777777778]\n[1.0 0.0 0.0 35.0 58000.0]\n[0.0 0.0 1.0 38.77777777777778 52000.0]\n[1.0 0.0 0.0 48.0 79000.0]\n[0.0 1.0 0.0 50.0 83000.0]\n[1.0 0.0 0.0 37.0 67000.0]]\n```", "```py\nfrom sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\ny = le.fit_transform(y)\nprint(y)\n[0 1 0 0 1 1 0 1 0 1]\n```", "```py\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y , test_size = 0.2, random_state = 1)\nprint(X_train)\n[[0.0 0.0 1.0 38.77777777777778 52000.0]\n[0.0 1.0 0.0 40.0 63777.77777777778]\n[1.0 0.0 0.0 44.0 72000.0]\n[0.0 0.0 1.0 38.0 61000.0]\n[0.0 0.0 1.0 27.0 48000.0]\n[1.0 0.0 0.0 48.0 79000.0]\n[0.0 1.0 0.0 50.0 83000.0]\n[1.0 0.0 0.0 35.0 58000.0]]\nprint(X_test)\n[[0.0 1.0 0.0 30.0 54000.0]\n[1.0 0.0 0.0 37.0 67000.0]]\nprint(y_train)\n[0 1 0 0 1 1 0 1]\nprint(y_test)\n[0 1]\n```", "```py\nfrom sklearn.preprocessing import StandardScaler\nsc  = StandardScaler()\nX_train[:, 3:] = sc.fit_transform(X_train[:, 3:])\nX_test[:, 3:] = sc.transform(X_test[:, 3:])\nprint(X_train)\n[[0.0 0.0 1.0 -0.1915918438457856 -1.0781259408412427]\n[0.0 1.0 0.0 -0.014117293757057902 -0.07013167641635401]\n[1.0 0.0 0.0 0.5667085065333239 0.6335624327104546]\n[0.0 0.0 1.0 -0.3045301939022488 -0.30786617274297895]\n[0.0 0.0 1.0 -1.901801144700799 -1.4204636155515822]\n[1.0 0.0 0.0 1.1475343068237056 1.2326533634535488]\n[0.0 1.0 0.0 1.4379472069688966 1.5749910381638883]\n[1.0 0.0 0.0 -0.7401495441200352 -0.5646194287757336]]\n```", "```py\nimport numpy as pd\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndataset = pd.read_csv('Salary_Data.csv')\nX = dataset.iloc[:,:-1].values\ny = dataset.iloc[:, -1].values\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y , test_size = 0.2, random_state = 1)\n```", "```py\nfrom sklearn.linear_model import LinearRegression\nregressor = LinearRegression()\nregressor.fit(X_train, y_train)\n```", "```py\ny_pred = regressor.predict(X_test)\n```", "```py\nplt.scatter(X_train, y_train, color = 'red')\nplt.plot(X_train, regressor.predict(X_train), color='blue')\nplt.title(\"Salary vs Experiment (Training Set\")\nplt.xlabel(\"Years of Experience\")\nplt.ylabel(\"Salary\")\nplt.show()\n```", "```py\nplt.scatter(X_test, y_test, color = 'red')\nplt.plot(X_train, regressor.predict(X_train), color='blue')\nplt.title(\"Salary vs Experiment (Training Set\")\nplt.xlabel(\"Years of Experience\")\nplt.ylabel(\"Salary\")\nplt.show()\n```", "```py\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndataset = pd.read_csv('50_Startups.csv')\nX = dataset.iloc[:,:-1].values\ny = dataset.iloc[:, -1].values\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import OneHotEncoder\nct = ColumnTransformer(transformers=[('encoder', OneHotEncoder(), [3])], remainder='passthrough')\nX = np.array(ct.fit_transform(X))\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y , test_size = 0.2, random_state=1)\n```", "```py\nfrom sklearn.linear_model import LinearRegression\nregressor = LinearRegression()\nregressor.fit(X_train, y_train)\n```", "```py\ny_pred = regressor.predict(X_test)\nnp.set_printoptions(precision=2)\nprint(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))\n[[114664.42 105008.31]\n[ 90593.16  96479.51]\n[ 75692.84  78239.91]\n[ 70221.89  81229.06]\n[179790.26 191050.39]\n[171576.92 182901.99]\n[ 49753.59  35673.41]\n[102276.66 101004.64]\n[ 58649.38  49490.75]\n[ 98272.03  97483.56]]\n```", "```py\nimport numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt\ndataset = pd.read_csv('Position_Salaries.csv')\nX = dataset.iloc[:, 1:-1].values\ny = dataset.iloc[:, -1].values\n```", "```py\nfrom sklearn.linear_model import LinearRegression\nlin_reg = LinearRegression()\nlin_reg.fit(X,y)\nfrom sklearn.preprocessing import PolynomialFeatures\npoly_reg = PolynomialFeatures(degree = 2)\nX_poly = poly_reg.fit_transform(X)\nlin_reg_2 = LinearRegression()\nlin_reg_2.fit(X_poly, y)\n```", "```py\nplt.scatter(X, y, color = 'red')\nplt.plot(X, lin_reg.predict(X), color = 'blue')\nplt.title(\"Linear Regression\")\nplt.xlabel(\"Position Level\")\nplt.ylabel(\"Salary\")\nplt.show()\n```", "```py\nplt.scatter(X, y, color = 'red')\nplt.plot(X, lin_reg_2.predict(X_poly), color = 'blue')\nplt.title(\"Linear Regression\")\nplt.xlabel(\"Position Level\")\nplt.ylabel(\"Salary\")\nplt.show()\n```", "```py\nfrom sklearn.linear_model import LinearRegression\nlin_reg = LinearRegression()\nlin_reg.fit(X,y)\nfrom sklearn.preprocessing import PolynomialFeatures\npoly_reg = PolynomialFeatures(degree = 4)\nX_poly = poly_reg.fit_transform(X)\nlin_reg_2 = LinearRegression()\nlin_reg_2.fit(X_poly, y)\nplt.scatter(X, y, color = 'red')\nplt.plot(X, lin_reg_2.predict(X_poly), color = 'blue')\nplt.title(\"Linear Regression\")\nplt.xlabel(\"Position Level\")\nplt.ylabel(\"Salary\")\nplt.show()\n```", "```py\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndataset = pd.read_csv('Social_Network_Ads.csv')\nX = dataset.iloc[:,:-1].values\ny = dataset.iloc[:, -1].values\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y , test_size = 0.2, random_state=1)\nfrom sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)\nprint(X_train)\n[[-0.8  -1.19]\n[ 0.76 -1.37]\n[ 0.85  1.44]\n[-0.51 -1.49]\n[-1.49  0.38]\n[-1.19  0.55]\n[ 1.05 -1.04]\n[-0.22 -0.3 ]\n[ 0.95 -1.34]\n[-1.1  -1.07]\n[-0.51  1.97]\n[ 2.22 -1.01]\n[ 1.44 -1.4 ]\n[ 0.07 -0.39]\n[-1.19  0.64]\n[ 2.02 -0.9 ]\n[ 1.15  0.58]\n[-0.02  0.29]\n[-0.22  0.26]\n[-0.32 -0.75]\n[-1.68 -0.57]\n[ 0.85  0.58]\n[-0.61 -1.01]\n[ 0.95 -1.13]\n[-0.22 -0.54]\n[ 0.17  0.82]\n[-0.41  1.32]\n[ 1.15  0.52]\n[ 0.76  0.32]\n[ 0.66 -0.87]\n[ 0.37 -0.27]\n[ 0.46 -0.45]\n[-0.22  0.14]\n[ 0.37  0.11]\n[-1.    0.82]\n[-0.71  1.41]\n[ 0.37 -0.48]\n[ 0.37 -0.48]\n[-1.68  0.41]\n[ 0.85 -0.81]\n[-1.   -1.1 ]\n[...]\n```", "```py\nfrom sklearn.linear_model import LogisticRegression\nclassifier = LogisticRegression()\nclassifier.fit(X_train, y_train)\n```", "```py\nprint(classifier.predict(sc.transform([[30, 87000]])))\n[0]\n```", "```py\ny_pred = classifier.predict(X_test)\nprint(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))\n[[0 0]\n[0 0]\n[1 1]\n[1 1]\n[0 0]\n[0 0]\n[0 0]\n[1 1]\n[0 0]\n[1 0]\n[0 0]\n[0 0]\n[0 0]\n[1 1]\n[1 1]\n[1 1]\n[1 1]\n[0 0]\n[0 0]\n[1 1]\n[0 0]\n[1 1]\n[1 1]\n[1 0]\n[0 1]\n[0 0]\n[...]]\n```", "```py\nfrom sklearn.metrics import confusion_matrix, accuracy_score\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)\naccuracy_score(y_test, y_pred)\n[[41  7]\n[ 6 26]]\n0.8375\n```", "```py\nTP=41\nFP=6\nFN=7\nTN=26\n```", "```py\ngcloud ml vision detect-objects tree.jpeg \n```", "```py\ngcloud ml vision detect-logos glogo.jpeg\n```", "```py\ngcloud ml vision detect-text glogo.jpeg\n```", "```py\n    pip3 install - -upgrade google-cloud-vision\n    ```", "```py\n    import io  \n    import os\n    # import the Google client library\n    from google.cloud import vision\n    # instantiates a client\n    client = vision.ImageAnnotatorClient()\n    # provide the name of the image file to annotate\n    file_name = os.path.abspath('glogo.jpeg')\n    # load the image into memoryview\n    with io.open(file_name, 'rb') as image_file:\n         content = image_file.read()\n    image = vision.Image(content = content)\n    # Performs label detection on the image file\n    response = client.logo_detection(image=image)\n    logos = response.logo_annotations\n    for logo in logos:\n         print(logo.description + \" : \" + str(logo.score))\n    ```", "```py\npython3 main.py\nGoogle: 0.979978402153015 \n```", "```py\ngcloud ml language classify-text --content =\n'If Roe is overturne, legislatures in 26 states have pending laws indicating that they intent to ban abortions, according to the Guttmacher Institure, a research organization that supports abortion rights. That could leave many women in need of abortion services hunders or thousands of miles away from access to procedure - unaffordable for many.\nCorporate America is increasingly being drawn from the political sidelines on the abortion issue in response to pressure from inverstors, customer and employees. Companies are also struggling to attract and retain talent and worry about the impact these states anti-abortion laws could have on their workers.'\n```", "```py\ngcloud ml language analyze-sentiment - - content =\n\"From the minute I walked into the door, the family atmosphere hit me like a wave. The people that manage this place of the highest quality and the food matches it. I had a stromboli which I usually avoid because they turn out gummy and nasty. This place was a complete opposite. The bite of fresh garlic in the crust. The salty nuttiness of the mozzarella, the quality of the pepperoni and thin sliced sausage. Everything deserves the chefs kiss. This restaurant is an hour and half away from my home Greensville but well worth it several time over. I will definitely be back.\"\n```", "```py\npip install google-cloud-language\n```", "```py\n# Import ghe Google Cloud client library\nfrom google.com import language_v1\n#set a client variable\nclient = language_v1.LanguageServiceClient()\n# The text to analyze\ntext = \"We heard great review and thought we finally found a Authentic Classy Italiant Restaurant... WRONG!\"\ndocument = language_v1.Document(content=text, type_ = language_v1.Document.Type.PLAIN_TEXT)\n#Detects the sentiment of the text\nsentiment = client.analyze_sentiment(request={'document':document}).document_sentiment\nprint(\"Text: {}\".format(text))\nprint(\"Sentiment:{}\".format(sentiment.score, sentiment.magnitude))\n```", "```py\npython3 analyze_sentiment.py\n```", "```py\ncurl -s -X POST -H \"Content-Type: application/json\" -- data-binay @request.json \\ \"http://speech.googleapis.com/v1/speech:recognize?key=${API_KEY} > result.json\n```", "```py\ncat result.json\n```", "```py\ncurl -H \"Authorization: Bearer \"$(gcloud auth application-default print-access-token) \\\n     -H \"Content-Type: application/json; charset=utf-8\" \\\n     \"https://texttospeech.googleapis.com/v1/voices\"\n```", "```py\n{\n     'input':{\n     'text':'This is a demo documentation for the Cloud Text-to-Speech API. In this demo documentation we are using the United States English language. The code of the language is: \"en-US-Standard-A\". Thank you.'\n     },\n     'voice':{\n     'languageCode':'en-us',\n     'name':'en-US-Standard-A',\n     'ssmlGender':'MALE'\n     },\n     'audioConfig':{\n     'audioEncoding':'MP3'\n     }\n}\n```", "```py\ncurl -H \"Authorization: Bearer \"$(gcloud auth application-default print-access-token) \\\n  -H \"Content-Type: application/json; charset=utf-8\" \\\n  -d @synthesize-text.json \"https://texttospeech.googleapis.com/v1/text:synthesize\" \\\n  > synthesize-text.txt\n```", "```py\n{\n  \"audioContent\": \"//NExAASGoHwABhGudEACdzqFXfRE4EY3AACkD/zX4ADf/6J/[...]\"\n}\n```", "```py\nimport argparse\nfrom base64 import decodebytes\nimport json\n\"\"\"\nUsage:\n     python tts_decode.py --input \"synthesize-text.txt\" \\\n     --output \"synthesize-text-audio.mp3\"\n\"\"\"\ndef decode_tts_output(input_file, output_file):\n     \"\"\" Decode output from Cloud Text-to-Speech.\n     input_file: the response from Cloud Text-to-Speech\n     output_file: the name of the audio file to create\n     \"\"\"\n     with open(input_file) as input:\n     response = json.load(input)\n     audio_data = response['audioContent']\n     with open(output_file, \"wb\") as new_file:\n     new_file.write(decodebytes(audio_data.encode('utf-8')))\nif __name__ == '__main__':\n     parser = argparse.ArgumentParser(\n     description=\"Decode output from Cloud Text-to-Speech\",\n     formatter_class=argparse.RawDescriptionHelpFormatter)\n     parser.add_argument('--input',\n                     help='The response from the Text-to-Speech API.',\n                     required=True)\n    parser.add_argument('--output',\n                     help='The name of the audio file to create',\n                     required=True)\n     args = parser.parse_args()\n     decode_tts_output(args.input, args.output)\n```", "```py\npython tts_decode.py --input \"synthesize-text.txt\" --output \"synthesize-text-audio.mp3\"\n```", "```py\nTEXT = \"This%20is%20a%20demo%20documentation\"\n```", "```py\ncurl \"https://translation.googleapis.com/language/translate/v2?target=ru&key=${API_KEY}&q=${TEXT}\"\n```", "```py\nTEXT_ONE = \"Merhaba%20Dostlar\"\nTEXT_TWO = \"привет%20друзья\"\n```", "```py\nCurl \"https://translation.googleapis.com/language/translate/v2/detect?key=${API_KEY}&q=$\"TEXT_TWO}\"\n```"]