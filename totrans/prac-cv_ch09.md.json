["```py\npip install numpy scipy\n```", "```py\npip install matplotlib\n```", "```py\nimport numpy as np\nimport scipy\nimport matplotlib.pyplot as plt\n```", "```py\np = [1, 2, 3]\n```", "```py\nprint(len(p))\n\n>>> 3\n```", "```py\nv1 = np.array([2, 3, 4, 5])\nv2 = np.array([4, 5, 6, 7])\n```", "```py\nprint(v1 + v2)\n\n>>> array([ 6, 8, 10, 12])\n```", "```py\nv1 = np.array([2, 3, 4, 5])\nv2 = np.array([4, 5, 6, 7])\nprint(v1 - v2)\n\n>>> array([-2, -2, -2, -2])\n```", "```py\nv1 = np.array([2, 3, 4, 5])\nv2 = np.array([4, 5, 6, 7])\nprint(np.inner(v1, v2))\n\n>>> 82\n```", "```py\nv1 = np.array([2, 3, 4, 5])\nv2 = np.array([4, 5, 6, 7])\nprint(np.outer(v1, v2))\n\n>>> array([[ 8, 10, 12, 14],\n[12, 15, 18, 21],\n[16, 20, 24, 28],\n[20, 25, 30, 35]])\n```", "```py\nv = np.array([2, 3, 4, 5])\nprint(np.linalg.norm(v, ord=1))\n\n>>>14.0\n```", "```py\nv = np.array([2, 3, 4, 5])\nprint(np.linalg.norm(v, ord=2))\n\n>>>7.34846922835\n```", "```py\nv1 = np.array([2, 3, 4, 5])\nv2 = np.array([1,-1,-1,1]) # orthogonal to v1\nnp.inner(v1, v2)\n\n>>> 0\n```", "```py\nA = np.array([[1, 2, 3],[4, 5, 6], [7, 8, 9]])\n```", "```py\nprint(A)\n\n>>> array([[1, 2, 3],\n[4, 5, 6],\n[7, 8, 9]])\n```", "```py\nA = np.array([[1, 2, 3],[4, 5, 6], [7, 8, 9]])\nB = np.array([[1,1,1], [1,1,1], [1,1,1]])\nC = A+B\nprint(C)\n\n>>> array([[ 2, 3, 4],\n[ 5, 6, 7],\n[ 8, 9, 10]])\n```", "```py\nA = np.array([[1, 2, 3],[4, 5, 6], [7, 8, 9]])\nB = np.array([[1,1,1], [1,1,1], [1,1,1]])\nC = A - B\nprint(C)\n\n>>> array([[0, 1, 2],\n[3, 4, 5],\n[6, 7, 8]])\n```", "```py\n# A matrix of size (2x3)\nA = np.array([[1, 2, 3],[4, 5, 6]])\n# B matrix of size (3x2)\nB = np.array([[1, 0], [0, 1], [1, 0]])\nC = np.dot(A, B) # size (2x2)\nprint(C)\n\n>>> array([[ 4, 2],\n[10, 5]])\n```", "```py\nA = np.array([[1, 2, 3],[4, 5, 6]])\nnp.transpose(A)\n\n>>> array([[1, 4],\n[2, 5],\n[3, 6]])\n```", "```py\nI = np.identity(3) # size of identity matrix\nprint(I)\n\n>>> [[ 1\\. 0\\. 0.]\n[ 0\\. 1\\. 0.]\n[ 0\\. 0\\. 1.]]\n```", "```py\nA = np.array([[12,0,0],[0,50,0],[0,0,43]])\n\n>>> array([[12, 0, 0],\n[ 0, 50, 0],\n[ 0, 0, 43]])\n```", "```py\nA = np.array([[1, 2, 3],[4, 5, 6], [7, 8, 9]])\n```", "```py\nA_T = np.transpose(A)\n\n>>> [[1 4 7]\n[2 5 8]\n[3 6 9]]\n```", "```py\nprint(A + A_T)\n\n>>> [[ 2 6 10]\n[ 6 10 14]\n[10 14 18]]\n```", "```py\nprint(A - A_T)\n\n>>> [[ 0 -2 -4]\n[ 2 0 -2]\n[ 4 2 0]]\n```", "```py\nsymm = A + A_T\nanti_symm = A - A_T\nprint(0.5*symm + 0.5*anti_symm)\n\n>>> [[ 1\\. 2\\. 3.]\n[ 4\\. 5\\. 6.]\n\n[ 7\\. 8\\. 9.]]\n```", "```py\nA = np.array([[1, 2, 3],[4, 5, 6], [7, 8, 9]])\n\nnp.trace(A)\n```", "```py\nA = np.array([[2, 3],[ 5, 6]])\nprint(np.linalg.det(A))\n\n>>> -2.9999999999999982\n```", "```py\nA = np.array([[1, 2, 3],[4, 5, 6], [7, 8, 9]])\nnp.linalg.norm(A)\n\n>>> 16.881943016134134\n```", "```py\nA = np.array([[1, 2, 3],[5, 4, 6], [9, 8, 7]])\nA_inv = np.linalg.inv(A)\nprint(A_inv)\n\n>>>[[ -6.66666667e-01 3.33333333e-01 4.93432455e-17]\n[ 6.33333333e-01 -6.66666667e-01 3.00000000e-01]\n[ 1.33333333e-01 3.33333333e-01 -2.00000000e-01]]\n```", "```py\nnp.dot(A, A_inv)\n\n>>> [[ 1.00000000e+00 1.66533454e-16 -5.55111512e-17]\n[ 3.33066907e-16 1.00000000e+00 1.11022302e-16]\n[ 8.32667268e-16 -2.77555756e-16 1.00000000e+00]]\n```", "```py\nA = np.array([[1, 2, 3],[5, 4, 6], [9, 8, 7]])\neigvals, eigvectors = np.linalg.eig(A)\nprint(\"Eigen Values: \", eigvals)\nprint(\"Eigen Vectors:\", eigvectors)\n\n>>> Eigen Values: [ 15.16397149 -2.30607508 -0.85789641]\nEigen Vectors: [[-0.24668682 -0.50330679 0.54359359]\n[-0.5421775 -0.3518559 -0.8137192 ]\n[-0.80323668 0.78922728 0.20583261]]\n```", "```py\nA = np.array([[1, 2, 3],[5, 4, 6], [9, 8, 7]])\n\nU, s, V = np.linalg.svd(A, full_matrices=True)\n```", "```py\nfrom scipy.stats import bernoulli\nimport matplotlib.pyplot as plt\n\n# parameters for bernoulli distribution\np = 0.3\n# create random variable\nrandom_variable = bernoulli( p)\n```", "```py\nfrom scipy.stats import binom\nimport matplotlib.pyplot as plt\n\n# parameters for binomial distribution\nn = 10\np = 0.3\n\n# create random variable\nrandom_variable = binom(n, p)\n\n# compute probability mass function\nx = scipy.linspace(0,10,11)\n\n# plot\nplt.figure(figsize=(12, 8))\nplt.vlines(x, 0, random_variable.pmf(x))\nplt.show()\n```", "```py\nfrom scipy.stats import poisson\nimport matplotlib.pyplot as plt\n\n# parameters for bernoulli distribution\nlambda_ = 0.1\n\n# create random variable\nrandom_variable = poisson(lambda_)\n\n# compute probability mass function\nx = scipy.linspace(0,5,11)\n\n# plot\nplt.figure(figsize=(12, 8))\nplt.vlines(x, 0, random_variable.pmf(x))\nplt.show()\n```", "```py\nfrom scipy.stats import norm\nimport matplotlib.pyplot as plt\nimport scipy\n\n# create random variable\nrandom_variable = norm()\n\n# compute probability mass function\nx = scipy.linspace(-5,5,20)\n\n# plot\nplt.figure(figsize=(12, 8))\nplt.vlines(x, 0, random_variable.pdf(x))\nplt.show()\n\n```"]