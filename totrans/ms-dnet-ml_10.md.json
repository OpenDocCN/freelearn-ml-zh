["```py\nPM> install-package Accord.MachineLearning\n\n```", "```py\n#r\"../packages/Accord.3.0.2/lib/net40/Accord.dll\"\n#r\"../packages/Accord.Math.3.0.2/lib/net40/Accord.Math.dll\"\n#r\"../packages/Accord.Statistics.3.0.2/lib/net40/Accord.Statistics.dll\"\n#r\"../packages/Accord.MachineLearning.3.0.2/lib/net40/Accord.MachineLearning.dll\"\n\nopen Accord\nopen System\nopen Accord.Math\nopen Accord.MachineLearning\n\nlet inputs = [|[|5.0;1.0|];[|4.5;1.5|];[|5.1;0.75|];[|1.0;3.5|];[|0.5;4.0|];[|1.25;4.0|]|]\nlet outputs = [|1;1;1;0;0;0|]\n\nlet classes = 2\nlet k = 3\nlet knn = new KNearestNeighbors(k, classes, inputs, outputs)\n\nlet input = [|5.0;0.5|]\nlet output = knn.Compute(input)\n```", "```py\nval inputs : float [] [] =\n [|[|5.0; 1.0|]; [|4.5; 1.5|]; [|5.1; 0.75|]; [|1.0; 3.5|]; [|0.5; 4.0|];\n [|1.25; 4.0|]|]\nval outputs : int [] = [|1; 1; 1; 0; 0; 0|]\nval classes : int = 2\nval k : int = 3\nval knn : Accord.MachineLearning.KNearestNeighbors\nval input : float [] = [|5.0; 0.5|]\nval output : int = 1\n\n```", "```py\nlet output = knn.Compute(input)\n\n```", "```py\nlet createInput i =\n    let random = Random(i)\n    [|float(random.Next(0,6)) + Math.Round(random.NextDouble(),2);\n      float(random.Next(0,6)) + Math.Round(random.NextDouble(),2);|]\n```", "```py\nval createInput : i:int -> float []\n\n```", "```py\nlet observations = Array.zeroCreate<int> 250000\nlet inputs' = \n    observations \n    |>Array.mapi (fun idx _ -> createInput idx)\n```", "```py\nval observations : int [] =\n [|0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;\n 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;\n 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;\n 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;\n ...|]\nval inputs' : float [] [] =\n [|[|4.82; 4.56|]; [|1.11; 2.77|];\n\n```", "```py\nlet stopwatch = System.Diagnostics.Stopwatch()\nstopwatch.Start()\nlet predictionTotal = \n    inputs' \n    |>Seq.map(fun i -> knn.Compute i)\n    |>Seq.reduce(fun acc i -> acc + i)\n\nlet predictionBias = float predictionTotal/float 250000\nstopwatch.Stop()\nstopwatch.Elapsed.TotalSeconds\n```", "```py\nval stopwatch : Diagnostics.Stopwatch\nval predictionTotal : int = 109826\nval predictionBias : float = 0.439304\nval it : float = 0.1787221\n\n```", "```py\nlet predictionTotal = \n    inputs' \n    |>Seq.map(fun i -> knn.Compute i)\n    |>Seq.reduce(fun acc i -> acc + i)\n```", "```py\nPM> Install-Package FSharp.Collections.ParallelSeq\n\n```", "```py\n#r\"../packages/FSharp.Collections.ParallelSeq.1.0.2/lib/net40/FSharp.Collections.ParallelSeq.dll\"\nopen FSharp.Collections.ParallelSeq\n\nlet stopwatch' = new System.Diagnostics.Stopwatch()\nstopwatch'.Start()\nlet predictionTotal' = \n    inputs' \n    |>PSeq.map(fun i -> knn.Compute i)\n    |>Seq.reduce(fun acc i -> acc + i)\nlet predictionBias' = float predictionTotal'/float 250000\nstopwatch'.Stop()\nstopwatch'.Elapsed.TotalSeconds\n```", "```py\nval stopwatch' : Diagnostics.Stopwatch\nval predictionTotal' : int = 109826\nval predictionBias' : float = 0.439304\nval it : float = 0.0700362\n\n```", "```py\nSystem.OutOfMemoryException: Exception of type 'System.OutOfMemoryException' was thrown.\n>    at Microsoft.FSharp.Collections.ArrayModule.ZeroCreate[T](Int32 count)\n\n```", "```py\nPM> Install-Package MBrace.Thespian -pre\n\n```", "```py\n#load\"../packages/MBrace.Thespian.1.0.19/MBrace.Thespian.fsx\"\n\nopen MBrace.Core.Builders\nopen MBrace.Thespian\nopen MBrace.Core\nopen MBrace.Library.Cloud\n\n//Spin up your clusters\nlet cluster = ThespianCluster.InitOnCurrentMachine(4)\n\n//Basic Example\nlet number = cloud { return 5 + 10 } |> cluster.Run\n```", "```py\nnamespace FSI_0007.MBrace\n\n>\n\nval cluster : ThespianCluster\n\n>\n\nval number : int = 15\n\n```", "```py\nlet cluster = ThespianCluster.InitOnCurrentMachine(4)\n```", "```py\nlet number = cloud { return 5 + 10 } |> cluster.Run\n```", "```py\nlet mBraceTotal =\n    inputs'\n    |>Seq.map(fun i ->cloud { return knn.Compute i })\n    |> Cloud.Parallel\n    |> cluster.Run\n    |>Seq.reduce(fun acc i -> acc + i)\n\nlet mBracePrediction = float mBraceTotal/float 250000\n```", "```py\nlet mBraceTotal' =\n    inputs' |>Balanced.map(fun i -> knn.Compute i) |> cluster.Run\n            |>Seq.reduce(fun acc i -> acc + i)\n\nlet mBracePrediction' = float mBraceTotal/float 250000\n```", "```py\n|>Balanced.map(fun i -> knn.Compute i) |> cluster.Run\n\n```", "```py\n    |>Seq.map(fun i ->cloud { return knn.Compute i })\n    |> Cloud.Parallel\n    |> cluster.Run\n```", "```py\nPM> Install-Package SQLProvider -prerelease\n\n```", "```py\n#r \"../packages/SQLProvider.0.0.11-alpha/lib/net40/FSharp.Data.SQLProvider.dll\"\n\nopen System\nopen System.Linq\nopen FSharp.Data.Sql\n\n[<Literal>]\nlet connectionString = \"data source=nc54a9m5kk.database.windows.net;initial catalog=AdventureWorks2014;user id=PacktReader;password= P@cktM@chine1e@rning;\"\n\ntype AdventureWorks = SqlDataProvider<ConnectionString=connectionString>\nlet context = AdventureWorks.GetDataContext()\n\ntype Telemetry = {ID:int; BusinessEntityID: int; TimeStamp: System.DateTime; \n                 Longitude: float; Latitude: float; \n                 FrontTirePressure: float; BackTirePressure: float;\n                 GearId: int; TireSpeed: float; RiderLevel: int}\n\nlet telemetry = query {for t in context.''[Person].[Telemetry]'' do\n  join rl in context.''[Person].[RiderLevel]'' on (t.BusinessEntityID = rl.BusinessEntityID)\n  select {ID=t.ID; BusinessEntityID=t.BusinessEntityID;\n          TimeStamp=t.TimeStamp;\n          Longitude=t.Longitude; Latitude=t.Latitude; \n          FrontTirePressure=t.FrontTirePressure;\n          BackTirePressure=t.BackTirePressure;\n          GearId=t.GearID;TireSpeed=t.TireSpeed;\n          RiderLevel=rl.RiderLevel}}\n  |>Seq.toArray\n```", "```py\nval connectionString : string =\n  \"data source=nc54a9m5kk.database.windows.net;initial catalog=A\"+[72 chars]\ntype AdventureWorks = FSharp.Data.Sql.SqlDataProvider<...>\nval context : FSharp.Data.Sql.SqlDataProvider<...>.dataContext\ntype Telemetry =\n  {ID: int;\n   BusinessEntityID: int;\n   TimeStamp: System.DateTime;\n   Longitude: float;\n   Latitude: float;\n   FrontTirePressure: float;\n   BackTirePressure: float;\n   GearId: int;\n   TireSpeed: float;\n   RiderLevel: int;}\nval telemetry : Telemetry [] =\n  [|{ID = 1;\n     BusinessEntityID = 295;\n     TimeStamp = 12/30/2015 3:19:02 PM;\n     Longitude = 46.6297;\n     Latitude = -97.6087;\n     FrontTirePressure = 100.0;\n     BackTirePressure = 100.0;\n     GearId = 2;\n     TireSpeed = 20.04;\n     RiderLevel = 0;}; {ID = 2;\n                        BusinessEntityID = 775;\n```", "```py\n#r\"../packages/Accord.3.0.2/lib/net40/Accord.dll\"\n#r\"../packages/Accord.Math.3.0.2/lib/net40/Accord.Math.dll\"\n#r\"../packages/Accord.Statistics.3.0.2/lib/net40/Accord.Statistics.dll\"\n#r\"../packages/Accord.MachineLearning.3.0.2/lib/net40/Accord.MachineLearning.dll\"\n\nopen System\nopen Accord\nopen Accord.Math\nopen Accord.Statistics\nopen Accord.MachineLearning\nopen Accord.Statistics.Models.Regression.Linear\n\nTools.Shuffle(telemetry)\nlet attachmentPoint = float telemetry.Length * 0.7 |> int\nlet train = telemetry.[..attachmentPoint]\nlet test = telemetry.[attachmentPoint+1..]\n\nlet trainInputs = train |> Array.map(fun t -> [|float t.GearId; float t.RiderLevel|])\nlet trainOutputs = train |> Array.map(fun t -> t.TireSpeed)\nlet target = new MultipleLinearRegression(2, false)\ntarget.Regress(trainInputs, trainOutputs)\n```", "```py\n RiderLevel = 1;}; ...|]\nval trainInputs : float [] [] =\n [|[|1.0; 1.0|]; [|2.0; 2.0|]; [|2.0; 1.0|]; [|3.0; 1.0|]; [|1.0; 0.0|];\n [|3.0; 1.0|]; [|4.0; 2.0|]; [|2.0; 0.0|]; [|3.0; 1.0|]; [|1.0; 0.0|];\n...|]\nval trainOutputs : float [] =\n [|23.3934008; 30.5693388; 18.2111048; 19.3842; 14.007411; 21.861742;\n 36.6713256; 14.5381236; 16.2; 25.451495; 25.4571174; 14.5671708;\n 20.1900384; 19.3655286; 27.8646144; 21.6268866; 19.3454316; ...|]\nval target : MultipleLinearRegression =\n y(x0, x1) = 5.72463678857853*x0 + 6.83607853679457*x1\nval it : float = 18472679.55\n\n```", "```py\nlet possible = \n    [|0..4|] \n    |>  Array.collect(fun i -> [|0..2|] \n                               |> Array.map(fun j -> [|float i; float j|]))\nlet predict = \n    possible\n    |> Array.map(fun i -> i, target.Compute(i))\n```", "```py\nval possible : float [] [] =\n [|[|0.0; 0.0|]; [|0.0; 1.0|]; [|0.0; 2.0|]; [|1.0; 0.0|]; [|1.0; 1.0|];\n [|1.0; 2.0|]; [|2.0; 0.0|]; [|2.0; 1.0|]; [|2.0; 2.0|]; [|3.0; 0.0|];\n [|3.0; 1.0|]; [|3.0; 2.0|]; [|4.0; 0.0|]; [|4.0; 1.0|]; [|4.0; 2.0|]|]\nval predict : (float [] * float) [] =\n [|([|0.0; 0.0|], 0.0); ([|0.0; 1.0|], 6.836078537);\n ([|0.0; 2.0|], 13.67215707); ([|1.0; 0.0|], 5.724636789);\n ([|1.0; 1.0|], 12.56071533); ([|1.0; 2.0|], 19.39679386);\n ([|2.0; 0.0|], 11.44927358); ([|2.0; 1.0|], 18.28535211);\n ([|2.0; 2.0|], 25.12143065); ([|3.0; 0.0|], 17.17391037);\n ([|3.0; 1.0|], 24.0099889); ([|3.0; 2.0|], 30.84606744);\n ([|4.0; 0.0|], 22.89854715); ([|4.0; 1.0|], 29.73462569);\n ([|4.0; 2.0|], 36.57070423)|]\n\n```", "```py\n#load\"../packages/MBrace.Thespian.1.0.19/MBrace.Thespian.fsx\"\n\nopen MBrace.Core.Builders\nopen MBrace.Thespian\nopen MBrace.Core\nopen MBrace.Library.Cloud\n\nlet cluster = ThespianCluster.InitOnCurrentMachine(4)\n\nlet testInputs = test |> Array.map(fun t -> [|float t.GearId; float t.RiderLevel|])\n\nlet mBraceTotal =\n    testInputs \n    |> Balanced.map(fun i ->\n                    target.Compute(i)) |> cluster.Run\n```", "```py\nval mBraceTotal : float [] =\n [|36.57070423; 25.12143065; 36.57070423; 18.28535211; 5.724636789;\n 24.0099889; 5.724636789; 25.12143065; 24.0099889; 18.28535211; 24.0099889;\n 5.724636789; 36.57070423; 12.56071533; 24.0099889; 11.44927358; 0.0;\n 11.44927358; 25.12143065; 12.56071533; 30.84606744; 12.56071533;\n 11.44927358; 18.28535211;\n\n```", "```py\nPM> Install-Package portable.accord.statistics\nPM> Install-Package portable.accord.MachineLearning\n\n```", "```py\nnamespace AdventureWorks.IOB.PCL\n\nopen System\nopen Accord\nopen Accord.Math\nopen Accord.Statistics\nopen Accord.MachineLearning\nopen Accord.Statistics.Models.Regression.Linear\n\ntypeTelemetry = {ID:int; BusinessEntityID: int; \n                 TimeStamp: System.DateTime; \n                 Longitude: float; Latitude: float; \n                 FrontTirePressure: float; \n                 BackTirePressure: float;\n                 GearId: int; TireSpeed: float; RiderLevel: int}\ntypeSpeedModel() = \nletmutable model = newMultipleLinearRegression(2, false)\n\nmember this.CurrentModel \nwith get() = model\nand set (value) = model <- value\n\nmember this.Train(telemetries:Telemetry array) = \n        Tools.Shuffle(telemetries)\nlet inputs = telemetries |>Array.map(fun t -> [|float t.GearId; float t.RiderLevel|])\nlet outputs = telemetries |>Array.map(fun t -> t.TireSpeed)\n        model.Regress(inputs, outputs)\n\nmember this.Classify telemetry =\nlet input = [|float telemetry.GearId; float telemetry.RiderLevel|]\n        model.Compute(input)        \n```", "```py\n    <configuration>\n    <connectionStrings>\n    <addname=\"Northwind\"connectionString=\"data source=nc54a9m5kk.database.windows.net;initial catalog=AdventureWorks2014;user id=PacktReader;password= P@cktM@chine1e@rning;\" />\n    </connectionStrings>\n    <appSettings>\n    <addkey=\"webpages:Version\"value=\"3.0.0.0\" />\n    ```", "```py\n    using System;\n    using System.Collections.Generic;\n    using System.Web.Http;\n    using System.Web.Mvc;\n    using System.Web.Optimization;\n    using System.Web.Routing;\n    using AdventureWorks.IOB.PCL;\n    using System.Threading;\n    using System.Configuration;\n    using System.Data.SqlClient;\n\n    namespace AdventureWorks.IOB.Services\n    {\n    publicclassWebApiApplication : System.Web.HttpApplication\n        {\n    staticObject _lock = newObject();\n    Timer _timer = null;\n    staticSpeedModel _speedModel = null;\n\n    protectedvoid Application_Start()\n            {\n    AreaRegistration.RegisterAllAreas();\n    GlobalConfiguration.Configure(WebApiConfig.Register);\n    FilterConfig.RegisterGlobalFilters(GlobalFilters.Filters);\n    RouteConfig.RegisterRoutes(RouteTable.Routes);\n    BundleConfig.RegisterBundles(BundleTable.Bundles);\n\n                _speedModel = newSpeedModel();\n                _timer = newTimer(TrainModel, null, 0, TimeSpan.FromMinutes(5).Milliseconds);\n\n            }\n\n    protectedTelemetry[] CreateTelemetries(String connectionString)\n            {\n    var telemetries = newList<Telemetry>();\n\n    using (var connection = newSqlConnection(connectionString))\n                {\n    var commandText = \"Select T.*,RL.RiderLevel from [Person].[Telemetry] as T \" +\n    \"inner join[Person].[RiderLevel] as RL \" +\n    \"on T.BusinessEntityID = rl.BusinessEntityID\";\n    using (var command = newSqlCommand(commandText, connection))\n                    {\n                        connection.Open();\n    var reader = command.ExecuteReader();\n    while(reader.Read())\n                        {\n                            telemetries.Add(newTelemetry((int)reader[0], (int)reader[1],\n                            (DateTime)reader[2], \n                            (double)reader[3], \n                            (double)reader[4],\n                            (double)reader[5], \n                            (double)reader[6],(int)reader[7],\n                            (double)reader[8], \n                            (int)reader[9]));\n                        }\n                    }\n                }\n\n    return telemetries.ToArray();\n            }\n\n            private void TrainModel(object state)\n            {\n                var connectionString = ConfigurationManager.ConnectionStrings[\"Northwind\"].ConnectionString;\n                var telemetries = CreateTelemetries(connectionString);\n                lock (_lock)\n                {\n                    SpeedModel.Train(telemetries);\n                }\n            }\n\n    publicstaticSpeedModel SpeedModel\n            {\n    get\n                {\n    lock (_lock)\n                    {\n    return _speedModel;\n                    }\n                }\n    set\n                {\n    lock (_lock)\n                    {\n                        _speedModel = value;\n                    }\n                }\n            }\n        }\n    }\n    ```", "```py\nusing System.Web.Http;\nusing System.Net.Http;\nusing System.IO;\nusing System.Xml.Serialization;\nusing System.Net;\n\nnamespace AdventureWorks.IOB.Services.Controllers\n{\n  publicclassSpeedModelController : ApiController\n    {\n    // GET api/SpeedModel\n      publicHttpResponseMessage Get()\n        {\n          HttpResponseMessage result = null;\n\n          if (WebApiApplication.SpeedModel != null)\n            {\n              using (MemoryStream stream = newMemoryStream())\n                {\n                  var formatter = newXmlSerializer(typeof(double[]));\n                  formatter.Serialize(stream, WebApiApplication.SpeedModel.CurrentModel.Coefficients);\n                  var content = stream.ToArray();\n\n                  result = Request.CreateResponse(HttpStatusCode.OK);\n                  result.Content = newByteArrayContent(content);\n                  return result;\n                }\n            }\n              else\n            {\n              return Request.CreateResponse(HttpStatusCode.Gone);\n            }\n        }\n\n    }\n}\n```", "```py\n    PM> Install-Package portable.accord.statistics\n\n    ```", "```py\n    using AdventureWorks.IOB.PCL;\n    using System;\n\n    namespace AdventureWorks.IOB.RP2.Sensors\n    {\n      Public class TelemetryEventArgs : EventArgs\n        {\n          Public Telemetry Telemetry { get; set; }\n        }\n    }\n    ```", "```py\n    using System;\n\n    namespace AdventureWorks.IOB.RP2.Sensors\n    {\n    Public interface IBikeController\n        {\n          Event EventHandler<TelemetryEventArgs> TelemetryCreated;\n          void SwitchGear(int targetGear);\n        }\n    }\n    ```", "```py\n    using AdventureWorks.IOB.PCL;\n    using System;\n    using System.Threading;\n\n    namespace AdventureWorks.IOB.RP2.Sensors\n    {\n\n        public class InMemoryBikeController : IBikeController\n        {\n            Timer _timer = null;\n\n            public InMemoryBikeController()\n            {\n                _timer = new Timer(GenerateTelemetry, null, 0, TimeSpan.FromSeconds(1).Milliseconds);\n            }\n\n            public event EventHandler<TelemetryEventArgs> TelemetryCreated;\n\n            private void GenerateTelemetry(object state)\n            {\n                var telemetry = new Telemetry(0, 0, DateTime.UtcNow, 46.6297, -97.6087, 100.0, 100.0, 2, 10.0, 1);\n                var args = new TelemetryEventArgs() { Telemetry = telemetry };\n\n                if (TelemetryCreated != null)\n                {\n                    TelemetryCreated(this, args);\n                }\n            }\n\n            public void SwitchGear(int targetGear)\n            {\n\n            }\n        }\n    }\n    ```", "```py\n    <Page\n      x:Class=\"AdventureWorks.IOB.RP2.MainPage\"\n\n      mc:Ignorable=\"d\">\n\n      <Grid Background=\"{ThemeResource ApplicationPageBackgroundThemeBrush}\">\n      <StackPanel HorizontalAlignment=\"Center\" VerticalAlignment=\"Center\">\n      <TextBox x:Name=\"StatusMessage\" Text=\"IOB Ready!\" Margin=\"10\" IsReadOnly=\"True\"/>\n      </StackPanel>\n      </Grid>\n    </Page>\n    ```", "```py\n    using System;\n    using System.IO;\n    using System.Linq;\n    using Windows.UI.Xaml;\n    using Windows.Web.Http;\n    using AdventureWorks.IOB.PCL;\n    using Windows.UI.Xaml.Controls;\n    using System.Xml.Serialization;\n    using System.Collections.Generic;\n    using AdventureWorks.IOB.RP2.Sensors;\n    using Windows.Networking.Connectivity;\n    using Accord.Statistics.Models.Regression.Linear;\n\n    namespace AdventureWorks.IOB.RP2\n    {\n      publicsealedpartialclassMainPage : Page\n        {\n          String _networkName = String.Empty;\n          SpeedModel _globalSpeedModel = null;\n          SpeedModel _localSpeedModel = null;\n          List<Telemetry> _telemetries = null;\n          IBikeController _bikeController = null;\n          DispatcherTimer _timer = null;\n\n          public MainPage()\n            {\n               this.InitializeComponent();\n               _networkName = \"MySafeNetwork\";\n               _globalSpeedModel = newSpeedModel();\n               _localSpeedModel = newSpeedModel();\n               _telemetries = newList<Telemetry>();\n               _bikeController = newInMemoryBikeController();\n               _timer = newDispatcherTimer();\n\n               _timer.Interval = newTimeSpan(0, 0, 1);\n\n               NetworkInformation.NetworkStatusChanged += NetworkInformation_NetworkStatusChanged;\n               _bikeController.TelemetryCreated += _bikeController_TelemetryCreated;\n               _timer.Tick += _timer_Tick;\n\n            }\n\n            privatevoid _timer_Tick(object sender, object e)\n            {\n              if(_telemetries.Count > 300)\n                {\n                  _localSpeedModel.Train(_telemetries.ToArray());\n\n                  var targetGlobalGear = _globalSpeedModel.Classify(_telemetries.Last());\n                  var targetLocalGear = _localSpeedModel.Classify(_telemetries.Last());\n                  if (targetGlobalGear < targetLocalGear)\n                    {\n                       _bikeController.SwitchGear((int)targetGlobalGear);\n                    }\n                }\n            }\n\n            privatevoid _bikeController_TelemetryCreated(object sender, TelemetryEventArgs e)\n            {\n               _telemetries.Add(e.Telemetry);\n            }\n\n            privatevoid NetworkInformation_NetworkStatusChanged(object sender)\n            {\n              var connectionProfile = NetworkInformation.GetInternetConnectionProfile();\n              if (connectionProfile.ProfileName == _networkName)\n                {\n                   GetGlobalModel();\n                   UploadLocalTelemetryData();\n                }\n            }\n\n            privateasyncvoid GetGlobalModel()\n            {\n              var client = newHttpClient();\n              var uri = newUri(\"http://localhost:3899/api/SpeedModel\");\n              try\n                {\n                  var response = await client.GetAsync(uri);\n                  if (response.IsSuccessStatusCode)\n                    {\n                      var content = await response.Content.ReadAsInputStreamAsync();\n                      using (var stream = content.AsStreamForRead())\n                        {\n                          var formatter = newXmlSerializer(typeof(double[]));\n                          var coefficients = (double[])formatter.Deserialize(stream);\n                          var regression = newMultipleLinearRegression(2);\n                          Array.Copy(coefficients, regression.Coefficients,coefficients.Length);\n                          _globalSpeedModel.CurrentModel = regression;\n                        }\n                    }\n                }\n                catch (Exception e)\n                {\n                   this.StatusMessage.Text = e.ToString();\n                }\n\n            }\n\n              privateasyncvoid UploadLocalTelemetryData()\n            {\n    //TODO: Send _telemetries to Azure IoT Suite\n            }\n\n        }\n    }\n    ```", "```py\nprivateasyncTask<SpiDevice> InitSPI(int pin)\n        {\n            var settings = newSpiConnectionSettings(pin);\n            settings.ClockFrequency = 500000;   \n            settings.Mode = SpiMode.Mode0;    \n\n            string spiAqs = SpiDevice.GetDeviceSelector(\"SPI0\");\n            var deviceInfo = awaitDeviceInformation.FindAllAsync(spiAqs);\n            returnawaitSpiDevice.FromIdAsync(deviceInfo[0].Id, settings);\n        }\n```", "```py\nprivatevoid SensorTimer_Tick(ThreadPoolTimer timer)\n        {\nbyte[] readBuffer = newbyte[3]; \nbyte[] writeBuffer = newbyte[3] { 0x00, 0x00, 0x00 };\n            writeBuffer[0] = 0x06;\n\n//Gear\n            _gear.TransferFullDuplex(writeBuffer, readBuffer);\nvar gear = convertToInt(readBuffer);\n```", "```py\nvar telemetry = newTelemetry(0, _businessEntityID, DateTime.UtcNow,\n                latitude, longitude, frontTire, backTire, gear, tireSpeed, _riderLevel);\nvar args = newTelemetryEventArgs() { Telemetry = telemetry };\n\nif (TelemetryCreated != null)\n            {\n                TelemetryCreated(this, args);\n            }\n```", "```py\npublic void SwitchGear(int targetGear)\n        {\n            _led.Write(GpioPinValue.Low);\n        }\n```"]