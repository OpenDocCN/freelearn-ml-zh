["```py\nSELECT * \nFROM OPENJSON((SELECT Doc.BulkColumn  \n                FROM OPENROWSET(BULK N'C:\\Temp\\bpws-iwvb.json', SINGLE_CLOB) AS Doc), '$[0]') \n```", "```py\nSELECT  \n    a.Date,  \n    a.TotalIncidents, \n    a.AustinIncidents, \n    a.TravisIncidents \nFROM OPENJSON((SELECT Doc.BulkColumn  \n                FROM OPENROWSET(BULK N'C:\\Temp\\bpws-iwvb.json', SINGLE_CLOB) AS Doc), '$') \nWITH (Date          DATE    '$.month_start_date', \n    TotalIncidents  INT     '$.count_incidents_all', \n    AustinIncidents INT     '$.count_incidents_coa', \n    TravisIncidents INT     '$.count_incidents_tc' \n    ) AS a \nORDER BY a.Date ASC;\n```", "```py\nDECLARE @input_query    NVARCHAR(MAX);  \nSET @input_query = 'SELECT  \n    a.Date,  \n    a.TotalIncidents \nFROM OPENJSON((SELECT Doc.BulkColumn  \n    FROM OPENROWSET(BULK N'C:\\Temp\\bpws-iwvb.json',  \n         SINGLE_CLOB) AS Doc), '$') \n   WITH (Date            DATE  '$.month_start_date', \n         TotalIncidents  INT   '$.count_incidents_all' \n        ) AS a;' \n```", "```py\nDECLARE @RPlot          NVARCHAR(MAX); \n\nSET @RPlot = 'library(forecast); \n    image_file = tempfile();  \n    jpeg(filename = image_file, width=1000, height=400);  \n\n    #store as time series  \n    myts <- ts(InputDataSet$TotalIncidents,  \n        start = c(2010, 1), end = c(2017, 11), \n         frequency = 12);  \n    fit <- stl(myts, s.window = \"period\"); \n\n    # show the plot \n    plot(forecast(fit), main = \"Forecast of EMS incidents\"); \n    dev.off();  \n\n    # return the plot as dataframe \n    OutputDataSet <-  data.frame( \n        data=readBin(file(image_file,\"rb\"), \n        what=raw(),n=1e6));' \n```", "```py\nEXEC sp_execute_external_script @language = N'R' \n    ,@script = @RPlot  \n    ,@input_data_1 = @input_query \n    ,@input_data_1_name = N'InputDataSet' \n    ,@output_data_1_name = N'OutputDataSet'  \n    WITH RESULT SETS (( [plot] VARBINARY(MAX)));     \n```", "```py\nUSE master;   \nGO   \nEXEC sp_configure 'show advanced option', '1';   \nRECONFIGURE;  \nGO \nEXEC sp_configure 'hadoop connectivity', 7;  \nGO  \nRECONFIGURE;  \nGO \n```", "```py\nUSE [AdventureWorks2016] \nGO \nCREATE MASTER KEY ENCRYPTION BY PASSWORD='MsSQLGirlLovesSQLServer2016&2017:)'; \n```", "```py\nCREATE DATABASE SCOPED CREDENTIAL MsSQLGirlAtAzureBlobStorage   \nWITH IDENTITY = 'credential', Secret = 'Es3duvq+x9G5x+EFbuUmGo0salEi6Jsd59NI20KXespbiBG9RswLA4L1fuqs/59porPBay64YkRj/tvQ7XAMLA=='; \n```", "```py\nCREATE EXTERNAL DATA SOURCE OpenDataSample \nWITH ( \n    TYPE = HADOOP, \n    LOCATION = 'wasbs://open-data-sample@mssqlgirl.blob.core.windows.net/', \n    CREDENTIAL = MsSQLGirlAtAzureBlobStorage \n); \n```", "```py\nCREATE EXTERNAL FILE FORMAT csvformat  \nWITH (  \n    FORMAT_TYPE = DELIMITEDTEXT,  \n    FORMAT_OPTIONS (  \n        FIELD_TERMINATOR = ',' \n    )  \n); \n```", "```py\nCREATE EXTERNAL TABLE EMSIncident \n(  \n   [Month Key]                         INT, \n   [Month-Year]                        VARCHAR(30), \n   [Total Incidents]                   INT, \n   [Austin Incidents]                  INT, \n   [Travis County Incidents]           INT, \n   [Other Area Incidents]              INT, \n   [Combined Austin & Travis Incidents]      INT, \n   [Austin P1 Incidents]               INT, \n   [Austin P2 Incidents]               INT, \n   [Austin P3 Incidents]               INT, \n   [Austin P4 Incidents]               INT, \n   [Austin P5 Incidents]               INT, \n   [Travis County P1 Incidents]        INT, \n   [Travis County P2 Incidents]        INT, \n   [Travis County P3 Incidents]        INT, \n   [Travis County P4 Incidents]        INT, \n   [Travis County P5 Incidents]        INT, \n   [Overall On-Time Compliance]        VARCHAR(10), \n   [Austin On-Time Compliance]               VARCHAR(10), \n   [Travis County On-Time Compliance]        VARCHAR(10), \n   [Austin P1 On-Time Compliance]            VARCHAR(10), \n   [Austin P2 On-Time Compliance]            VARCHAR(10), \n   [Austin P3 On-Time Compliance]            VARCHAR(10), \n   [Austin P4 On-Time Compliance]            VARCHAR(10), \n   [Austin P5 On-Time Compliance]            VARCHAR(10), \n   [Travis County P1 On-Time Compliance]     VARCHAR(10), \n   [Travis County P2 On-Time Compliance]     VARCHAR(10), \n   [Travis County P3 On-Time Compliance]     VARCHAR(10), \n   [Travis County P4 On-Time Compliance]     VARCHAR(10), \n   [Travis County P5 On-Time Compliance]     VARCHAR(10), \n   [Target On-Time Compliance]               VARCHAR(10) \n)  \nWITH  \n(  \n    LOCATION = '/EMS_-_Incidents_by_Month.csv',  \n    DATA_SOURCE = OpenDataSample,  \n    FILE_FORMAT = csvformat  \n) \n```", "```py\nDECLARE @input_query    NVARCHAR(MAX);  \nDECLARE @RPlot          NVARCHAR(MAX); \n\nSET @input_query = 'SELECT  \n    CAST([Month-Year] AS DATE) AS [Date], \n    [Total Incidents] AS [TotalIncidents] \nFROM EMSIncident;' \nSET @RPlot = 'library(ggplot2);  \n    library(forecast); \n    image_file = tempfile();  \n    jpeg(filename = image_file, width=1000, height=400);  \n\n    #store as time series  \n    myts <- ts(InputDataSet$TotalIncidents,  \n        start = c(2010, 1), end = c(2017, 11), \n         frequency = 12);  \n    fit <- stl(myts, s.window = \"period\"); \n\n    # show the plot \n    plot(fit, main = \"EMS incidents\"); \n    dev.off();  \n\n    # return the plot as dataframe \n    OutputDataSet <-  data.frame( \n        data=readBin(file(image_file,\"rb\"), \n        what=raw(),n=1e6));' \n\nEXEC sp_execute_external_script @language = N'R' \n    ,@script = @RPlot  \n    ,@input_data_1 = @input_query \n    ,@input_data_1_name = N'InputDataSet' \n    ,@output_data_1_name = N'OutputDataSet'  \n    WITH RESULT SETS (( [plot] VARBINARY(MAX))); \n```", "```py\nCREATE PROCEDURE [dbo].[usp_ImportXDFtoSQL] \nAS \n   DECLARE @RScript NVARCHAR(MAX) \n   SET @RScript = N'library(RevoScaleR) \n         rxOptions(sampleDataDir = \"C:/Program Files/Microsoft SQL Server/140/R_SERVER/library/RevoScaleR/SampleData\"); \n         outFile <-  file.path(rxGetOption(\"sampleDataDir\"), \"AirOnTime2012.xdf\"); \n         OutputDataSet <- data.frame(rxReadXdf(file=outFile, varsToKeep=c(\"ArrDelay\", \"CRSDepTime\",\"DayOfWeek\")))' \n\n   EXECUTE sp_execute_external_script \n          @language = N'R' \n         ,@script = @RScript \n         WITH RESULT SETS (( \n               [ArrDelay]        SMALLINT, \n               [CRSDepTime]      DECIMAL(6,4), \n               [DayOfWeek]       NVARCHAR(10))); \nGO\n```", "```py\nCREATE TABLE [dbo].[AirFlights] \n( \n    [ID]             INT NOT NULL IDENTITY(1,1)  \n   ,[ArrDelay]       SMALLINT \n   ,[CRSDepTime]     DECIMAL(6,4) \n   ,[DayOfWeek]      NVARCHAR(10)  \n   ,CONSTRAINT PK_AirFlights PRIMARY KEY ([ID]) \n); \nGO \n```", "```py\nINSERT INTO [dbo].[AirFlights] \nEXECUTE [dbo].[usp_ImportXDFtoSQL] \n```", "```py\nCREATE PROCEDURE dbo.usp_TestPerformance (@TableName VARCHAR(50)) \nAS \n   DECLARE @RScript NVARCHAR(MAX) \n   SET @RScript = N'library(RevoScaleR) \n                           LMResults <- rxLinMod(ArrDelay ~ DayOfWeek, data = InputDataSet) \n                           OutputDataSet <- data.frame(LMResults$coefficients)' \n\n   DECLARE @SQLScript nvarchar(max) \n   SET @SQLScript = N'SELECT ArrDelay, DayOfWeek FROM ' + @TableName  \n   SET STATISTICS TIME ON; \n   EXECUTE sp_execute_external_script \n          @language = N'R' \n         ,@script = @RScript \n         ,@input_data_1 = @SQLScript \n   WITH RESULT SETS (( \n                     Coefficient DECIMAL(10,5) \n                     )); \n\n   SET STATISTICS TIME OFF; \nGO \n```", "```py\nEXEC dbo.usp_TestPerformance '[dbo].[AirFlights]' \n```", "```py\nSQL Server parse and compile time:  \n   CPU time = 0 ms, elapsed time = 1 ms. \nSTDOUT message(s) from external script:  \nRows Read: 6096762, Total Rows Processed: 6096762, Total Chunk Time: 0.075 seconds  \nComputation time: 0.080 seconds. \n(8 rows affected) \n SQL Server Execution Times: \n   CPU time = 2797 ms,  elapsed time = 10463 ms. \n SQL Server Execution Times: \n   CPU time = 2797 ms,  elapsed time = 10464 ms. \n```", "```py\nCREATE TABLE AirFlights_CS \n( \n    [ID]             INT NOT NULL IDENTITY(1,1) \n   ,[ArrDelay]       SMALLINT \n   ,[CRSDepTime]     DECIMAL(6,4) \n   ,[DayOfWeek]      NVARCHAR(10)  \n); \nGO \n\nINSERT INTO [dbo].[AirFlights_CS] \n( \n    [ArrDelay]        \n   ,[CRSDepTime]      \n   ,[DayOfWeek]       \n) \nSELECT  \n    [ArrDelay]        \n   ,[CRSDepTime]      \n   ,[DayOfWeek]       \nFROM [dbo].[AirFlights];  \nGO \n\nCREATE CLUSTERED COLUMNSTORE INDEX CCI_Airflights_CS ON [dbo].[AirFlights_CS]  \nGO \n```", "```py\nEXEC dbo.usp_TestPerformance '[dbo].[AirFlights_CS]' \n```", "```py\nSQL Server parse and compile time:  \n   CPU time = 0 ms, elapsed time = 7 ms. \nSTDOUT message(s) from external script:  \nRows Read: 6096762, Total Rows Processed: 6096762, Total Chunk Time: 0.075 seconds  \nComputation time: 0.080 seconds. \n(8 rows affected) \n SQL Server Execution Times: \n   CPU time = 2235 ms,  elapsed time = 10684 ms. \n SQL Server Execution Times: \n   CPU time = 2235 ms,  elapsed time = 10692 ms. \n```", "```py\nALTER DATABASE PerfTuning  \n   ADD FILEGROUP PerfTuningMOD CONTAINS MEMORY_OPTIMIZED_DATA; \n\nALTER DATABASE PerfTuning  \n   ADD FILE (NAME='PerfTuningMOD',  \n   FILENAME = 'C:\\Program Files\\Microsoft SQL Server\\MSSQL14.MSSQLSERVER\\MSSQL\\DATA\\PerfTuningMOD.ndf')  \n   TO FILEGROUP PerfTuningMOD; \n\nALTER DATABASE PerfTuning  \n   SET MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT=ON   \nGO   \n```", "```py\n    CREATE TABLE [dbo].[AirFlights_MOD] \n    ( \n           [ID] INT IDENTITY(1,1) NOT NULL PRIMARY KEY NONCLUSTERED\n          ,[ArrDelay] SMALLINT\n          ,[CRSDepTime]     DECIMAL(6,4)\n    ,[DayOfWeek]      NVARCHAR(10) \n    ) WITH (MEMORY_OPTIMIZED=ON, DURABILITY = SCHEMA_AND_DATA);\n\n    GO\n\n    INSERT INTO [dbo].[AirFlights_MOD]\n    (\n    [ArrDelay] \n    ,[CRSDepTime] \n    ,[DayOfWeek] \n    )\n    SELECT \n    [ArrDelay] \n    ,[CRSDepTime] \n    ,[DayOfWeek] \n    FROM [dbo].[AirFlights] \n    go \n```", "```py\nEXEC dbo.usp_TestPerformance '[dbo].[AirFlights_MOD]'\n```", "```py\nSQL Server parse and compile time: \n CPU time = 2 ms, elapsed time = 2 ms.\nSTDOUT message(s) from external script: \nRows Read: 6096762, Total Rows Processed: 6096762, Total Chunk     \nTime: 0.072 seconds \nComputation time: 0.077 seconds.\n(8 rows affected)\n SQL Server Execution Times:\n CPU time = 2109 ms,  elapsed time = 8835 ms.\n SQL Server Execution Times: 2235 ms,  elapsed time = 10692 ms.\n\n```", "```py\nCREATE TABLE [dbo].[AirFlights_MODCS]  \n(   \n    [ID] INT IDENTITY(1,1) NOT NULL PRIMARY KEY NONCLUSTERED \n   ,[ArrDelay] SMALLINT \n   ,[CRSDepTime] DECIMAL(6,4) \n   ,[DayOfWeek]      VARCHAR(10)  \n) WITH (MEMORY_OPTIMIZED=ON, DURABILITY = SCHEMA_AND_DATA); \nGO \n\nINSERT INTO [dbo].[AirFlights_MODCS] \n( \n    [ArrDelay]        \n   ,[CRSDepTime]      \n   ,[DayOfWeek]       \n) \nSELECT  \n    [ArrDelay]        \n   ,[CRSDepTime]      \n   ,[DayOfWeek]       \nFROM [dbo].[AirFlights]; \nGO \nALTER TABLE [dbo].[AirFlights_MODCS] \nADD INDEX CCI_Airflights_MODCS CLUSTERED COLUMNSTORE \nGO \n```", "```py\nEXEC dbo.usp_TestPerformance '[dbo].[AirFlights_MODCS]' \n```", "```py\nSQL Server parse and compile time:  \n   CPU time = 3 ms, elapsed time = 3 ms. \nSTDOUT message(s) from external script:  \nRows Read: 6096762, Total Rows Processed: 6096762, Total Chunk Time: 0.088 seconds  \nComputation time: 0.093 seconds. \n(8 rows affected) \n SQL Server Execution Times: \n   CPU time = 1766 ms,  elapsed time = 8659 ms. \n SQL Server Execution Times: \n   CPU time = 1782 ms,  elapsed time = 8662 ms. \n```"]