["```py\nprivate void PlotAllFunctions()\n{\n// First, clear out any old GraphPane's from the MasterPane\ncollection MasterPane master = zed.MasterPane;\nmaster.PaneList.Clear();\n// Display the MasterPane Title, and set the \n  outer margin to 10 points\nmaster.Title.IsVisible = true;\nmaster.Margin.All = 10;\n// Plot multiple functions arranged on a master pane.\nPlotOnMasterPane(Functions.LogisticApproximantSteep,\n  \"Logistic Steep (Approximant)\");\nPlotOnMasterPane(Functions.LogisticFunctionSteep,\n  \"Logistic Steep (Function)\");\nPlotOnMasterPane(Functions.SoftSign, \"Soft Sign\");\nPlotOnMasterPane(Functions.PolynomialApproximant,\n  \"Polynomial Approximant\");\nPlotOnMasterPane(Functions.QuadraticSigmoid,\n  \"Quadratic Sigmoid\");\nPlotOnMasterPane(Functions.ReLU, \"ReLU\");\nPlotOnMasterPane(Functions.LeakyReLU, \"Leaky ReLU\");\nPlotOnMasterPane(Functions.LeakyReLUShifted,\n  \"Leaky ReLU (Shifted)\");\nPlotOnMasterPane(Functions.SReLU, \"S-Shaped ReLU\");\nPlotOnMasterPane(Functions.SReLUShifted,\n  \"S-Shaped ReLU (Shifted)\");\nPlotOnMasterPane(Functions.ArcTan, \"ArcTan\");\nPlotOnMasterPane(Functions.TanH, \"TanH\");\nPlotOnMasterPane(Functions.ArcSinH, \"ArcSinH\");\nPlotOnMasterPane(Functions.ScaledELU, \n  \"Scaled Exponential Linear Unit\");\n// Refigure the axis ranges for the GraphPanes.\n  zed.AxisChange();\n// Layout the GraphPanes using a default Pane Layout.\nusing (Graphics g = this.CreateGraphics()) {\n  master.SetLayout(g, PaneLayout.SquareColPreferred);\n}\n```", "```py\nprivate void Plot(Func<double, double> fn, string fnName, \n  Color graphColor, GraphPane gpane = null)\n{\n  const double xmin = -2.0;\n  const double xmax = 2.0;\n  const int resolution = 2000;\n  zed.IsShowPointValues = true;\n  zed.PointValueFormat = \"e\";\n  var pane = gpane ?? zed.GraphPane;\n  pane.XAxis.MajorGrid.IsVisible = true;\n  pane.YAxis.MajorGrid.IsVisible = true;\n  pane.Title.Text = fnName;\n  pane.YAxis.Title.Text = string.Empty;\n  pane.XAxis.Title.Text = string.Empty;\n  double[] xarr = new double[resolution];\n  double[] yarr = new double[resolution];\n  double incr = (xmax - xmin) / resolution;\n  double x = xmin;\nfor(int i=0; i < resolution; i++, x+=incr)\n{\n  xarr[i] = x;\n  yarr[i] = fn(x);\n}\nPointPairList list1 = new PointPairList(xarr, yarr);\nLineItem li = pane.AddCurve(string.Empty, list1, graphColor,\n  SymbolType.None);\nli.Symbol.Fill = new Fill(Color.White);\npane.Chart.Fill = new Fill(Color.White, \n  Color.LightGoldenrodYellow, 45.0F);\n}\n```", "```py\nstatic void Main(string[] args)\n{\nvar config = ManualConfig.Create(DefaultConfig.Instance);\n// Set up an results exporter.\n// Note. By default results files will be located in \n  .BenchmarkDotNet.Artifactsresults directory.\nconfig.Add(new CsvExporter(CsvSeparator.CurrentCulture,\n  new BenchmarkDotNet.Reports.SummaryStyle\n{\n  PrintUnitsInHeader = true,\n  PrintUnitsInContent = false,\n  TimeUnit = TimeUnit.Microsecond,\n  SizeUnit = BenchmarkDotNet.Columns.SizeUnit.KB\n}));\n// Legacy JITter tests.\nconfig.Add(new Job(EnvMode.LegacyJitX64, \n  EnvMode.Clr, RunMode.Short)\n{\n  Env = { Runtime = Runtime.Clr, Platform = Platform.X64 },\n    Run = { LaunchCount = 1, WarmupCount = 1, \n    TargetCount = 1, RunStrategy =\n    BenchmarkDotNet.Engines.RunStrategy.Throughput },\n  Accuracy = { RemoveOutliers = true }\n}.WithGcAllowVeryLargeObjects(true));\n// RyuJIT tests.\nconfig.Add(new Job(EnvMode.RyuJitX64, EnvMode.Clr,\n  RunMode.Short)\n{\n  Env = { Runtime = Runtime.Clr, Platform = Platform.X64 },\n    Run = { LaunchCount = 1, WarmupCount = 1, \n    TargetCount = 1, RunStrategy = \n    BenchmarkDotNet.Engines.RunStrategy.Throughput }, \n  Accuracy = { RemoveOutliers = true }\n}.WithGcAllowVeryLargeObjects(true));\n// Uncomment to allow benchmarking of non-optimized assemblies.\n//config.Add(JitOptimizationsValidator.DontFailOnError);\n// Run benchmarks.\nvar summary = BenchmarkRunner.Run<FunctionBenchmarks>(config);\n}\n```", "```py\nvar config = ManualConfig.Create(DefaultConfig.Instance);\n```", "```py\nconfig.Add(new CsvExporter(CsvSeparator.CurrentCulture,\n  new BenchmarkDotNet.Reports.SummaryStyle\n{\n  PrintUnitsInHeader = true,\n  PrintUnitsInContent = false,\n  TimeUnit = TimeUnit.Microsecond,\n  SizeUnit = BenchmarkDotNet.Columns.SizeUnit.KB\n}));\n```", "```py\nconfig.Add(new Job(EnvMode.LegacyJitX64, EnvMode.Clr,\n RunMode.Short)\n{\n  Env = { Runtime = Runtime.Clr, Platform = Platform.X64 },\n    Run = { LaunchCount = 1, WarmupCount = 1, TargetCount = 1,\n    RunStrategy = Throughput },\n    Accuracy = { RemoveOutliers = true }\n}.WithGcAllowVeryLargeObjects(true));\n```", "```py\n// Run benchmarks.\nvar summary = BenchmarkRunner.Run<FunctionBenchmarks>(config);\n```", "```py\n[Benchmark]\npublic double LogisticFunctionSteepDouble()\n{\n  double a = 0.0;\n  for(int i=0; i<__loops; i++)\n  {\n a = Functions.LogisticFunctionSteep(_x[i % _x.Length]);\n  }\n  return a;\n}\n```"]