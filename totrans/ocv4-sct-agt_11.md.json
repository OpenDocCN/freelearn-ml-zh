["```py\n$ cd <PySpin_whl_unzip_destination>\n$ pip install --user <PySpin_whl_file>\n```", "```py\nimport PySpin\nimport cv2\n```", "```py\ndef getNumCameras():\n    system = PySpin.System.GetInstance()\n    numCameras = len(system.GetCameras())\n    system.ReleaseInstance()\n    return numCameras\n```", "```py\nclass PySpinCapture:\n\n    def __init__(self, index, roi, binningRadius=1,\n                 isMonochrome=False):\n```", "```py\n        self._system = PySpin.System.GetInstance()\n\n        self._cameraList = self._system.GetCameras()\n\n        self._camera = self._cameraList.GetByIndex(index)\n        self._camera.Init()\n\n        self._nodemap = self._camera.GetNodeMap()\n```", "```py\n        # Enable continuous acquisition mode.\n        nodeAcquisitionMode = PySpin.CEnumerationPtr(\n                self._nodemap.GetNode('AcquisitionMode'))\n        nodeAcquisitionModeContinuous = \\\n                nodeAcquisitionMode.GetEntryByName(\n                        'Continuous')\n        acquisitionModeContinuous = \\\n                nodeAcquisitionModeContinuous.GetValue()\n        nodeAcquisitionMode.SetIntValue(\n                acquisitionModeContinuous)\n```", "```py\n        # Set the pixel format.\n        nodePixelFormat = PySpin.CEnumerationPtr(\n            self._nodemap.GetNode('PixelFormat'))\n        if isMonochrome:\n            # Enable Mono8 mode.\n            nodePixelFormatMono8 = PySpin.CEnumEntryPtr(\n                    nodePixelFormat.GetEntryByName('Mono8'))\n            pixelFormatMono8 = \\\n                    nodePixelFormatMono8.GetValue()\n            nodePixelFormat.SetIntValue(pixelFormatMono8)\n        else:\n            # Enable BGR8 mode.\n            nodePixelFormatBGR8 = PySpin.CEnumEntryPtr(\n                    nodePixelFormat.GetEntryByName('BGR8'))\n            pixelFormatBGR8 = nodePixelFormatBGR8.GetValue()\n            nodePixelFormat.SetIntValue(pixelFormatBGR8)\n```", "```py\n        # Set the vertical binning radius.\n        # The horizontal binning radius is automatically set\n        # to the same value.\n        nodeBinningVertical = PySpin.CIntegerPtr(\n                self._nodemap.GetNode('BinningVertical'))\n        nodeBinningVertical.SetValue(binningRadius)\n```", "```py\n        # Set the ROI.\n        x, y, w, h = roi\n        nodeOffsetX = PySpin.CIntegerPtr(\n                self._nodemap.GetNode('OffsetX'))\n        nodeOffsetX.SetValue(x)\n        nodeOffsetY = PySpin.CIntegerPtr(\n                self._nodemap.GetNode('OffsetY'))\n        nodeOffsetY.SetValue(y)\n        nodeWidth = PySpin.CIntegerPtr(\n                self._nodemap.GetNode('Width'))\n        nodeWidth.SetValue(w)\n        nodeHeight = PySpin.CIntegerPtr(\n                self._nodemap.GetNode('Height'))\n        nodeHeight.SetValue(h)\n```", "```py\n        self._camera.BeginAcquisition()\n```", "```py\n    def get(self, propId):\n        if propId == cv2.CAP_PROP_FRAME_WIDTH:\n            nodeWidth = PySpin.CIntegerPtr(\n                    self._nodemap.GetNode('Width'))\n            return float(nodeWidth.GetValue())\n        if propId == cv2.CAP_PROP_FRAME_HEIGHT:\n            nodeHeight = PySpin.CIntegerPtr(\n                    self._nodemap.GetNode('Height'))\n            return float(nodeHeight.GetValue())\n        return 0.0\n```", "```py\n    def read(self, image=None):\n\n        cameraImage = self._camera.GetNextImage()\n        if cameraImage.IsIncomplete():\n            return False, None\n\n        h = cameraImage.GetHeight()\n        w = cameraImage.GetWidth()\n        numChannels = cameraImage.GetNumChannels()\n        if numChannels > 1:\n            cameraImageData = cameraImage.GetData().reshape(\n                    h, w, numChannels)\n        else:\n            cameraImageData = cameraImage.GetData().reshape(\n                    h, w)\n\n        if image is None:\n            image = cameraImageData.copy()\n        else:\n            image[:] = cameraImageData\n\n        cameraImage.Release()\n\n        return True, image\n```", "```py\n    def release(self):\n\n        self._camera.EndAcquisition()\n        self._camera.DeInit()\n        del self._camera\n\n        self._cameraList.Clear()\n\n        self._system.ReleaseInstance()\n```", "```py\n    def __del__(self):\n        self.release()\n```", "```py\ntry:\n    import PySpinCapture\nexcept ImportError:\n    PySpinCapture = None\n```", "```py\nclass Sunbaker(wx.Frame):\n\n    def __init__(self, capture, isCaptureMonochrome=False,\n                 maxHistoryLength=360,\n                 minHz=5.0/6.0, maxHz=1.0,\n                 amplification=32.0, numPyramidLevels=2,\n                 useLaplacianPyramid=True,\n                 useGrayOverlay=True,\n                 numFFTThreads=4, numIFFTThreads=4,\n                 title='Sunbaker'):\n\n        self.mirrored = True\n\n        self._running = True\n\n        self._capture = capture\n\n # Sometimes the dimensions fluctuate at the start of\n # capture.\n # Discard two frames to allow for this.\n capture.read()\n capture.read()\n\n success, image = capture.read()\n if success:\n # Use the actual image dimensions.\n h, w = image.shape[:2]\n isCaptureMonochrome = (len(image.shape) == 2)\n else:\n # Use the nominal image dimensions.\n w = int(capture.get(cv2.CAP_PROP_FRAME_WIDTH))\n h = int(capture.get(cv2.CAP_PROP_FRAME_HEIGHT))\n size = (w, h)\n if isCaptureMonochrome:\n useGrayOverlay = True\n self._isCaptureMonochrome = isCaptureMonochrome\n\n        # ... The rest of the method is unchanged ...\n```", "```py\n    def _applyEulerianVideoMagnification(self):\n\n        timestamp = timeit.default_timer()\n\n        if self._useGrayOverlay and \\\n not self._isCaptureMonochrome:\n smallImage = cv2.cvtColor(\n self._image, cv2.COLOR_BGR2GRAY).astype(\n numpy.float32)\n else:\n smallImage = self._image.astype(numpy.float32)\n\n        # ... The middle part of the method is unchanged ...\n\n        # Amplify the result and overlay it on the\n        # original image.\n        overlay = numpy.real(ifftResult[-1]) * \\\n                          self._amplification\n        i = 0\n        while i < self._numPyramidLevels:\n            overlay = cv2.pyrUp(overlay)\n            i += 1\n if self._useGrayOverlay and \\\n not self._isCaptureMonochrome:\n overlay = cv2.cvtColor(overlay,\n cv2.COLOR_GRAY2BGR)\n        cv2.add(self._image, overlay, self._image,\n                dtype=cv2.CV_8U)\n```", "```py\ndef main():\n\n    app = wx.App()\n\n if PySpinCapture is not None and \\\n            PySpinCapture.getNumCameras() > 0:\n isCaptureMonochrome = True\n capture = PySpinCapture.PySpinCapture(\n 0, roi=(0, 0, 960, 600), binningRadius=2,\n isMonochrome=isCaptureMonochrome)\n else:\n # 320x240 @ 187 FPS\n #capture.set(cv2.CAP_PROP_FRAME_WIDTH, 320)\n #capture.set(cv2.CAP_PROP_FRAME_HEIGHT, 240)\n #capture.set(cv2.CAP_PROP_FPS, 187)\n\n # 640x480 @ 60 FPS\n capture.set(cv2.CAP_PROP_FRAME_WIDTH, 640)\n capture.set(cv2.CAP_PROP_FRAME_HEIGHT, 480)\n capture.set(cv2.CAP_PROP_FPS, 60)\n\n # Show motion at edges with grayscale contrast.\n sunbaker = Sunbaker(capture, isCaptureMonochrome)\n\n sunbaker.Show()\n    app.MainLoop()\n```"]