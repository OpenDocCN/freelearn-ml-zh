["```py\nimport numpy as np \nimport matplotlib.pyplot as plt  \n```", "```py\n# Create the figure \nfig = plt.figure() \nax = fig.add_subplot(111, projection='3d') \n```", "```py\n# Define the number of values \nn = 250 \n```", "```py\n# Create a lambda function to generate the random values in the given range \nf = lambda minval, maxval, n: minval + (maxval - minval) * np.random.rand(n) \n```", "```py\n# Generate the values \nx_vals = f(15, 41, n) y_vals = f(-10, 70, n) \nz_vals = f(-52, -37, n) \n```", "```py\n# Plot the values \nax.scatter(x_vals, y_vals, z_vals, c='k', marker='o') \nax.set_xlabel('X axis') \nax.set_ylabel('Y axis') \nax.set_zlabel('Z axis') \n\nplt.show() \n```", "```py\nimport numpy as np \nimport matplotlib.pyplot as plt  \n```", "```py\n# Define the number of values \nnum_vals = 40 \n```", "```py\n# Generate random values \nx = np.random.rand(num_vals) \ny = np.random.rand(num_vals) \n```", "```py\n# Define area for each bubble \n# Max radius is set to a specified value \nmax_radius = 25 \narea = np.pi * (max_radius * np.random.rand(num_vals)) ** 2   \n```", "```py\n# Generate colors \ncolors = np.random.rand(num_vals) \n```", "```py\n# Plot the points \nplt.scatter(x, y, s=area, c=colors, alpha=1.0) \n\nplt.show() \n```", "```py\nimport numpy as np \nimport matplotlib.pyplot as plt \nfrom matplotlib.animation import FuncAnimation  \n```", "```py\ndef tracker(cur_num): \n    # Get the current index  \n    cur_index = cur_num % num_points \n```", "```py\n    # Set the color of the datapoints  \n    datapoints['color'][:, 3] = 1.0 \n```", "```py\n    # Update the size of the circles  \n    datapoints['size'] += datapoints['growth'] \n```", "```py\n    # Update the position of the oldest datapoint  \n    datapoints['position'][cur_index] = np.random.uniform(0, 1, 2) \n    datapoints['size'][cur_index] = 7 \n    datapoints['color'][cur_index] = (0, 0, 0, 1) \n    datapoints['growth'][cur_index] = np.random.uniform(40, 150) \n```", "```py\n    # Update the parameters of the scatter plot  \n    scatter_plot.set_edgecolors(datapoints['color']) \n    scatter_plot.set_sizes(datapoints['size']) \n    scatter_plot.set_offsets(datapoints['position']) \n```", "```py\nif __name__=='__main__': \n    # Create a figure  \n    fig = plt.figure(figsize=(9, 7), facecolor=(0,0.9,0.9)) \n    ax = fig.add_axes([0, 0, 1, 1], frameon=False) \n    ax.set_xlim(0, 1), ax.set_xticks([]) \n    ax.set_ylim(0, 1), ax.set_yticks([]) \n```", "```py\n    # Create and initialize the datapoints in random positions  \n    # and with random growth rates. \n    num_points = 20 \n```", "```py\n    datapoints = np.zeros(num_points, dtype=[('position', float, 2), \n            ('size', float, 1), ('growth', float, 1), ('color', float, 4)]) \n    datapoints['position'] = np.random.uniform(0, 1, (num_points, 2)) \n    datapoints['growth'] = np.random.uniform(40, 150, num_points) \n```", "```py\n    # Construct the scatter plot that will be updated every frame \n    scatter_plot = ax.scatter(datapoints['position'][:, 0], datapoints['position'][:, 1], \n                      s=datapoints['size'], lw=0.7, edgecolors=datapoints['color'], \n                      facecolors='none') \n```", "```py\n    # Start the animation using the 'tracker' function  \n    animation = FuncAnimation(fig, tracker, interval=10) \n\n    plt.show() \n```", "```py\nimport matplotlib.pyplot as plt  \n```", "```py\n# Labels and corresponding values in counter clockwise direction \ndata = {'Apple': 26,  \n        'Mango': 17, \n        'Pineapple': 21,  \n        'Banana': 29,  \n        'Strawberry': 11} \n```", "```py\n# List of corresponding colors \ncolors = ['orange', 'lightgreen', 'lightblue', 'gold', 'cyan'] \n```", "```py\n# Needed if we want to highlight a section \nexplode = (0, 0, 0, 0, 0)   \n```", "```py\n# Plot the pie chart \nplt.pie(data.values(), explode=explode, labels=data.keys(),  \n        colors=colors, autopct='%1.1f%%', shadow=False, startangle=90) \n\n# Aspect ratio of the pie chart, 'equal' indicates tht we  \n# want it to be a circle \nplt.axis('equal') \n\nplt.show() \n```", "```py\nimport numpy \nimport matplotlib.pyplot as plt \nfrom matplotlib.mlab import csv2rec \nfrom matplotlib.ticker import Formatter \n```", "```py\n# Define a class for formatting \nclass DataFormatter(Formatter): \n    def __init__(self, dates, date_format='%Y-%m-%d'): \n        self.dates = dates \n        self.date_format = date_format \n```", "```py\n    # Extract the value at time t at position 'position' \n    def __call__(self, t, position=0): \n        index = int(round(t)) \n        if index >= len(self.dates) or index < 0: \n            return '' \n\n        return self.dates[index].strftime(self.date_format) \n```", "```py\n    # Load csv file into numpy record array \n    data = csv2rec('aapl.csv') \n```", "```py\n    # Take a subset for plotting \n    data = data[-70:] \n```", "```py\n    # Create the date formatter object \n    formatter = DataFormatter(data.date) \n```", "```py\n    # X axis \n    x_vals = numpy.arange(len(data)) \n\n    # Y axis values are the closing stock quotes \n    y_vals = data.close  \n```", "```py\n    # Plot data \n    fig, ax = plt.subplots() \n    ax.xaxis.set_major_formatter(formatter) \n    ax.plot(x_vals, y_vals, 'o-') \n    fig.autofmt_xdate() \n    plt.show() \n```", "```py\nimport numpy as np \nimport matplotlib.pyplot as plt  \n```", "```py\n# Input data \napples = [30, 25, 22, 36, 21, 29] \noranges = [24, 33, 19, 27, 35, 20] \n\n# Number of groups \nnum_groups = len(apples) \n```", "```py\n# Create the figure \nfig, ax = plt.subplots() \n\n# Define the X axis \nindices = np.arange(num_groups) \n\n# Width and opacity of histogram bars \nbar_width = 0.4 \nopacity = 0.6 \n```", "```py\n# Plot the values \nhist_apples = plt.bar(indices, apples, bar_width,  \n        alpha=opacity, color='g', label='Apples') \n\nhist_oranges = plt.bar(indices + bar_width, oranges, bar_width, \n        alpha=opacity, color='b', label='Oranges') \n```", "```py\nplt.xlabel('Month') \nplt.ylabel('Production quantity') \nplt.title('Comparing apples and oranges') \nplt.xticks(indices + bar_width, ('Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun')) \nplt.ylim([0, 45]) \nplt.legend() \nplt.tight_layout() \n\nplt.show() \n```", "```py\nimport numpy as np \nimport matplotlib.pyplot as plt \n```", "```py\n# Define the two groups  \ngroup1 = ['France', 'Italy', 'Spain', 'Portugal', 'Germany']  \ngroup2 = ['Japan', 'China', 'Brazil', 'Russia', 'Australia'] \n```", "```py\n# Generate some random values \ndata = np.random.rand(5, 5) \n```", "```py\n# Create a figure \nfig, ax = plt.subplots() \n```", "```py\n# Create the heat map \nheatmap = ax.pcolor(data, cmap=plt.cm.gray) \n```", "```py\n# Add major ticks at the middle of each cell \nax.set_xticks(np.arange(data.shape[0]) + 0.5, minor=False) \nax.set_yticks(np.arange(data.shape[1]) + 0.5, minor=False) \n\n# Make it look like a table  \nax.invert_yaxis() \nax.xaxis.tick_top() \n\n# Add tick labels \nax.set_xticklabels(group2, minor=False) \nax.set_yticklabels(group1, minor=False) \n\nplt.show() \n```", "```py\nimport numpy as np \nimport matplotlib.pyplot as plt \nimport matplotlib.animation as animation  \n```", "```py\n# Generate the signal \ndef generate_data(length=2500, t=0, step_size=0.05): \n    for count in range(length): \n        t += step_size \n        signal = np.sin(2*np.pi*t) \n        damper = np.exp(-t/8.0) \n        yield t, signal * damper  \n```", "```py\n# Initializer function \ndef initializer(): \n    peak_val = 1.0 \n    buffer_val = 0.1 \n```", "```py\n    ax.set_ylim(-peak_val * (1 + buffer_val), peak_val * (1 + buffer_val)) \n    ax.set_xlim(0, 10) \n    del x_vals[:] \n    del y_vals[:] \n    line.set_data(x_vals, y_vals) \n    return line \n```", "```py\ndef draw(data): \n    # update the data \n    t, signal = data \n    x_vals.append(t) \n    y_vals.append(signal) \n    x_min, x_max = ax.get_xlim() \n```", "```py\n    if t >= x_max: \n        ax.set_xlim(x_min, 2 * x_max) \n        ax.figure.canvas.draw() \n\n    line.set_data(x_vals, y_vals) \n\n    return line \n```", "```py\nif __name__=='__main__': \n    # Create the figure \n    fig, ax = plt.subplots() \n    ax.grid() \n```", "```py\n    # Extract the line \n    line, = ax.plot([], [], lw=1.5) \n```", "```py\n    # Create the variables \n    x_vals, y_vals = [], [] \n```", "```py\n    # Define the animator object \n    animator = animation.FuncAnimation(fig, draw, generate_data,  \n            blit=False, interval=10, repeat=False, init_func=initializer) \n\n    plt.show() \n```", "```py\nimport pandas as pd\nfrom sklearn import datasets\nimport seaborn as sns  \n```", "```py\nboston = datasets.load_boston()\n```", "```py\nBostonDF = pd.DataFrame(boston.data, columns=boston.feature_names)\n```", "```py\n    Predictors = BostonDF[BostonDF.columns[0:12]]\n```", "```py\nsns.set(style=\"ticks\")\nsns.boxplot(data = Predictors)\n```", "```py\nfrom sklearn.preprocessing import MinMaxScaler\n\nscaler = MinMaxScaler()\nDataScaled = scaler.fit_transform(Predictors)\n```", "```py\nsns.set(style=\"ticks\")\nsns.boxplot(data = DataScaled)\n```"]