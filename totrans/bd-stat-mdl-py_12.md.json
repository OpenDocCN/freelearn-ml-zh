["```py\nimport pandas as pd\n# code to download the data\nurl = 'https://archive.ics.uci.edu/ml/machine-learning-databases/00501/PRSA2017_Data_20130301-20170228.zip'\nfile_name = url.split('/')[-1]\nr = requests.get(url)\nwith open(file_name, 'wb') as fout:\n    fout.write(r.content)\nwith zipfile.ZipFile(file_name, 'r') as zip_file:\n    zip_file.extractall('./')\ndf = pd.read_csv(\n    './PRSA_Data_20130301-20170228/PRSA_Data_Aotizhongxin_20130301-20170228.csv'\n    , sep=','\n)\npres_lag_14 = df.PRES.shift(-14)\n```", "```py\ntemp_lag_13 = df.TEMP.shift(-13)\ntemp_lag_24 = df.TEMP.shift(-24)\ntemp_lag_37 = df.TEMP.shift(-37)\npres_lag_14 = df.PRES.shift(-14)\npres_lag_24 = df.PRES.shift(-37)\ndewp_lag_13 = df.DEWP.shift(-2)\ndewp_lag_24 = df.DEWP.shift(-20)\nX = pd.DataFrame({\n    \"temp_lag_13\": temp_lag_13[:1000],\n    \"temp_lag_24\": temp_lag_24[:1000],\n    \"temp_lag_37\": temp_lag_37[:1000],\n    \"pres_lag_14\": pres_lag_14[:1000],\n    \"pres_lag_24\": pres_lag_24[:1000],\n    \"dewp_lag_2\": dewp_lag_13[:1000],\n    \"dewp_lag_20\": dewp_lag_24[:1000],\n})\n```", "```py\ny = df.WSPM[:1000]\narima = pm.auto_arima(\n    y, X,\n    error_action='ignore',\n    trace=True,\n    suppress_warnings=True,\n    maxiter=5,\n    seasonal=False,\n    test='adf'\n)\n```", "```py\nPerforming stepwise search to minimize aic\n ARIMA(2,0,2)(0,0,0)[0]           : AIC=2689.456, Time=0.24 sec\n ARIMA(0,0,0)(0,0,0)[0]           : AIC=8635.103, Time=0.16 sec\n ARIMA(1,0,0)(0,0,0)[0]           : AIC=2742.728, Time=0.29 sec\n ARIMA(0,0,1)(0,0,0)[0]           : AIC=2923.324, Time=0.32 sec\n ARIMA(1,0,2)(0,0,0)[0]           : AIC=2685.581, Time=0.23 sec\n ARIMA(0,0,2)(0,0,0)[0]           : AIC=2810.239, Time=0.37 sec\n ARIMA(1,0,1)(0,0,0)[0]           : AIC=2683.888, Time=0.23 sec\n ARIMA(2,0,1)(0,0,0)[0]           : AIC=2682.988, Time=0.28 sec\n ARIMA(2,0,0)(0,0,0)[0]           : AIC=2681.309, Time=0.26 sec\n ARIMA(3,0,0)(0,0,0)[0]           : AIC=2682.416, Time=0.32 sec\n ARIMA(3,0,1)(0,0,0)[0]           : AIC=2684.608, Time=0.32 sec\n ARIMA(2,0,0)(0,0,0)[0] intercept : AIC=2683.328, Time=0.30 sec\nBest model:  ARIMA(2,0,0)(0,0,0)[0]\nTotal fit time: 3.347 seconds\n```", "```py\n# initial model\narima = pm.auto_arima(\n    y, X,\n    error_action='ignore',\n    trace=False,\n    suppress_warnings=True,\n    maxiter=5,\n    seasonal=False,\n    test='adf'\n)\npvalues = arima.pvalues()\niterations = 0\nwhile (pvalues > 0.05).any():\n    # get the variable name with the largest p-value\n    variable_with_max_pval = pvalues.idxmax()\n    # drop that variable from the exogenous variables\n    X = X.drop(variable_with_max_pval, axis=1)\n    arima = pm.auto_arima(\n        y, X,\n        error_action='ignore',\n        trace=False,\n        suppress_warnings=True,\n        maxiter=5,\n        seasonal=False,\n        test='adf'\n    )\n    pvalues = arima.pvalues()\n    print(f\"fit iteration {iterations}\")\n    iterations += 1\n```", "```py\nimport numpy as np\nimport pandas as pd\nimport statsmodels.api as sm\nimport matplotlib.pyplot as plt\nfrom statsmodels.tsa.api import VAR\ndata=sm.datasets.macrodata.load_pandas().data\ndata.sort_values(by=['year', 'quarter'], inplace=True)\ndata['yr_qtr'] = data['year'].astype(str) + data['quarter'].astype(str)\nprint('{}% of yearly quarters are unique'.format(round(100*(data['yr_qtr'].nunique() / len(data)), 1)))\n```", "```py\ndata['quarter'] = range(1, len(data)+1)\ndata.drop('yr_qtr', axis=1, inplace=True)\ndata.index = data['quarter']\n```", "```py\nfrom statsmodels.tsa.stattools import adfuller\nfor col in ['realcons','realinv','realdpi']:\n    adfuller_test = adfuller(data[col], autolag='AIC')\n    print('ADF p-value for {}: {}'.format(col, adfuller_test[1]))\n```", "```py\nimport numpy as np\ndata_1d = pd.DataFrame()\nfor col in ['realcons','realinv','realdpi']:\n    data_1d[col] = np.diff(data[col], n=1)\n```", "```py\n# code imported from chapter 10\ndef plot_ccf(data_a, data_b, lag_lookback, percentile, ax, title=None):\n    n = len(data_a)\n    ccf = correlate(data_a - np.mean(data_a), data_b - np.mean(data_b), method='direct') / (np.std(data_a) * np.std(data_b) * n)\n    _min = (len(ccf)-1)//2 - lag_lookback\n    _max = (len(ccf)-1)//2 + (lag_lookback-1)\n    zscore_vals={90:1.645,\n                 95:1.96,\n                 99:2.576}\n    markers, stems, baseline = ax.stem(np.arange(-lag_lookback,(lag_lookback-1)), ccf[_min:_max], markerfmt='o', use_line_collection = True)\n    z_score_95pct = zscore_vals.get(percentile)/np.sqrt(n) #1.645 for 90%, 1.96 for 95%, and 2.576 for 99%\n    ax.set_title(title)\n    ax.set_xlabel('Lag')\n    ax.set_ylabel('Correlation')\n    ax.axhline(y=-z_score_95pct, color='b', ls='--')# Z-statistic for 95% CL LL\n    ax.axhline(y=z_score_95pct, color='b', ls='--')# Z-statistic for 95% CL UL\n    ax.axvline(x=0, color='black', ls='-');\nplot = plot_ccf(data_a=data_1d['realdpi'], data_b=data_1d['realinv'], lag_lookback=50, percentile=95)\n```", "```py\nplot = plot_ccf(data_a=data_1d['realcons'], data_b=data_1d['realinv'], lag_lookback=50, percentile=95)\n```", "```py\ndata_1d['realcons'] = data_1d['realcons'].shift(1)\ndata_1d = data_1d.iloc[1:]\nplot = plot_ccf(data_a=data_1d['realcons'], data_b=data_1d['realinv'], lag_lookback=50, percentile=95)\n```", "```py\nfrom statsmodels.tsa.statespace.varmax import VARMAX\nimport warnings\nwarnings.simplefilter('error')\nresults_aic=[]\nx_axis_list=[]\nfor p in range(1,6):\n    for q in range(0,6):\n        try:\n            model = VARMAX(data_1d,\n                           order=(p,q),\n                           trend='c',\n                           enforce_stationarity=True,\n                           enforce_invertibility=True)\n            results = model.fit()\n            results_aic.append(results.aic)\n            # x_axis_list.append(p,q,results.aic)\n            print('(p,q): ({},{}), AIC: {}'.format(p,q,results.aic))\n        except Exception as e:\n            # print('(p,q): ({},{}), error: {}'.format(p,q,e))\n            Pass\n```", "```py\nmodel = VARMAX(data_1d.reindex(columns=['realinv','realcons','realdpi']), order=(1,0), trend='c',\n enforce_stationarity=True,enforce_invertibility=True)\nresults = model.fit()\nprint(results.summary())\n```", "```py\ndf_pred = results.get_prediction(start=195, end=200).summary_frame(alpha=0.05)\nfig, ax = plt.subplots(1,1,figsize=(20,5))\nax.plot(data_1d['realinv'], marker='o', markersize=5)\nax.plot(df_pred['mean'], marker='o', markersize=4)\nax.plot(df_pred['mean_ci_lower'], color='g')\nax.plot(df_pred['mean_ci_upper'], color='g')\nax.fill_between(df_pred.index, df_pred['mean_ci_lower'], df_pred['mean_ci_upper'], color='g', alpha=0.1)\nax.set_title('Test Forecast for VAR(1)')\n```", "```py\npd.concat([df_pred,data_1d['realinv'].iloc[195:]], axis=1)\n```", "```py\ndf_forecast = results.get_prediction(start=201, end=207).summary_frame(alpha=0.05)\nforecast = np.hstack([np.repeat(np.nan, len(data_1d)+1), df_forecast['mean']])\n fig, ax = plt.subplots(1,1,figsize=(20,5))\nax.plot(data_1d['realinv'], marker='o', markersize=5)\nax.plot(forecast, marker='o', markersize=4)\nax.plot(df_forecast['mean_ci_lower'], color='g')\nax.plot(df_forecast['mean_ci_upper'], color='g')\nax.fill_between(df_forecast.index, df_forecast['mean_ci_lower'], df_forecast['mean_ci_upper'], color='g', alpha=0.1)\nax.set_title('Forecast for VAR(1)');\n```", "```py\ndf_forecast\n```"]