["```py\n    > install.packages(\"arules\")\n    > library(arules)\n\n    ```", "```py\n    > tr_list = list(c(\"Apple\", \"Bread\", \"Cake\"),\n    +                c(\"Apple\", \"Bread\", \"Milk\"),\n    +                c(\"Bread\", \"Cake\", \"Milk\"))\n    > names(tr_list) = paste(\"Tr\",c(1:3), sep = \"\")\n\n    ```", "```py\n    > trans = as(tr_list, \"transactions\")\n    > trans\n    transactions in sparse format with\n     3 transactions (rows) and\n     4 items (columns)\n\n    ```", "```py\n    > tr_matrix = matrix(\n    +   c(1,1,1,0,\n    +     1,1,0,1,\n    +     0,1,1,1), ncol = 4)\n    > dimnames(tr_matrix) =  list(\n    +   paste(\"Tr\",c(1:3), sep = \"\"),\n    +   c(\"Apple\",\"Bread\",\"Cake\", \"Milk\")\n    +   )\n    > trans2 =  as(tr_matrix, \"transactions\")\n    > trans2\n    transactions in sparse format with\n     3 transactions (rows) and\n     4 items (columns)\n\n    ```", "```py\n    > Tr_df = data.frame(\n    +   TrID= as.factor(c(1,2,1,1,2,3,2,3,2,3)),\n    +   Item = as.factor(c(\"Apple\",\"Milk\",\"Cake\",\"Bread\",\n    +                      \"Cake\",\"Milk\",\"Apple\",\"Cake\",\n    +                      \"Bread\",\"Bread\")) \n    + )\n    > trans3 = as(split(Tr_df[,\"Item\"], Tr_df[,\"TrID\"]), \"transactions\")\n    > trans3\n    transactions in sparse format with\n     3 transactions (rows) and\n     4 items (columns)\n\n    ```", "```py\n    > help(transactions)\n    > help(itemMatrix)\n\n    ```", "```py\n    > LIST(trans)\n    $Tr1\n    [1] \"Apple\" \"Bread\" \"Cake\" \n\n    $Tr2\n    [1] \"Apple\" \"Bread\" \"Milk\" \n\n    $Tr3\n    [1] \"Bread\" \"Cake\"  \"Milk\"\n\n    ```", "```py\n    > summary(trans)\n    transactions as itemMatrix in sparse format with\n     3 rows (elements/itemsets/transactions) and\n     4 columns (items) and a density of 0.75 \n\n    most frequent items:\n     Bread   Apple    Cake    Milk (Other) \n     3       2       2       2       0 \n\n    element (itemset/transaction) length distribution:\n    sizes\n    3 \n    3 \n\n     Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n     3       3       3       3       3       3 \n\n    includes extended item information - examples:\n     labels\n    1  Apple\n    2  Bread\n    3   Cake\n\n    includes extended transaction information - examples:\n     transactionID\n    1           Tr1\n    2           Tr2\n    3           Tr3\n\n    ```", "```py\n    > inspect(trans)\n     items   transactionID\n    1 {Apple, \n     Bread, \n     Cake}            Tr1\n    2 {Apple, \n     Bread, \n     Milk}            Tr2\n    3 {Bread, \n     Cake, \n     Milk}            Tr3\n\n    ```", "```py\n    > filter_trains = trans[size(trans) >=3]\n    > inspect(filter_trains)\n     items   transactionID\n    1 {Apple, \n     Bread, \n     Cake}            Tr1\n    2 {Apple, \n     Bread, \n     Milk}            Tr2\n    3 {Bread, \n     Cake, \n     Milk}            Tr3\n\n    ```", "```py\n    > image(trans)\n\n    ```", "```py\n    > itemFrequencyPlot (trans)\n\n    ```", "```py\n    > help(itemFrequency)\n\n    ```", "```py\n    > data(Groceries)\n\n    ```", "```py\n    > summary(Groceries)\n\n    ```", "```py\n    > itemFrequencyPlot(Groceries, support = 0.1, cex.names=0.8, topN=5)\n\n    ```", "```py\n    > rules = apriori(Groceries, parameter = list(supp = 0.001, conf = 0.5, target= \"rules\"))\n    > summary(rules)\n    set of 5668 rules\n\n    rule length distribution (lhs + rhs):sizes\n     2    3    4    5    6 \n     11 1461 3211  939   46 \n\n     Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n     2.00    3.00    4.00    3.92    4.00    6.00 \n\n    summary of quality measures:\n     support           confidence          lift \n     Min.   :0.001017   Min.   :0.5000   Min.   : 1.957 \n     1st Qu.:0.001118   1st Qu.:0.5455   1st Qu.: 2.464 \n     Median :0.001322   Median :0.6000   Median : 2.899 \n     Mean   :0.001668   Mean   :0.6250   Mean   : 3.262 \n     3rd Qu.:0.001729   3rd Qu.:0.6842   3rd Qu.: 3.691 \n     Max.   :0.022267   Max.   :1.0000   Max.   :18.996 \n\n    mining info:\n     data ntransactions support confidence\n     Groceries          9835   0.001        0.5\n\n    ```", "```py\n    > inspect(head(rules))\n     lhs                    rhs              support confidence     lift\n    1 {honey}             => {whole milk} 0.001118454  0.7333333 2.870009\n    2 {tidbits}           => {rolls/buns} 0.001220132  0.5217391 2.836542\n    3 {cocoa drinks}      => {whole milk} 0.001321810  0.5909091 2.312611\n    4 {pudding powder}    => {whole milk} 0.001321810  0.5652174 2.212062\n    5 {cooking chocolate} => {whole milk} 0.001321810  0.5200000 2.035097\n    6 {cereals}           => {whole milk} 0.003660397  0.6428571 2.515917\n\n    ```", "```py\n    > rules=sort(rules, by=\"confidence\", decreasing=TRUE)\n    > inspect(head(rules))\n     lhs                     rhs                    support confidence     lift\n    1 {rice, \n     sugar}              => {whole milk}       0.001220132          1 3.913649\n    2 {canned fish, \n     hygiene articles}   => {whole milk}       0.001118454          1 3.913649\n    3 {root vegetables, \n     butter, \n     rice}               => {whole milk}       0.001016777          1 3.913649\n    4 {root vegetables, \n     whipped/sour cream, \n     flour}              => {whole milk}       0.001728521          1 3.913649\n    5 {butter, \n     soft cheese, \n     domestic eggs}      => {whole milk}       0.001016777          1 3.913649\n    6 {citrus fruit, \n     root vegetables, \n     soft cheese}        => {other vegetables} 0.001016777          1 5.168156\n\n    ```", "```py\n> head(interestMeasure(rules, c(\"support\", \"chiSquare\", \"confidence\", \"conviction\",\"cosine\", \"coverage\", \"leverage\", \"lift\",\"oddsRatio\"), Groceries))\n\n```", "```py\n    > rules.sorted = sort(rules, by=\"lift\")\n    > subset.matrix = is.subset(rules.sorted, rules.sorted)\n    > subset.matrix[lower.tri(subset.matrix, diag=T)] = NA\n    > redundant = colSums(subset.matrix, na.rm=T) >= 1\n\n    ```", "```py\n    > rules.pruned = rules.sorted[!redundant]\n    > inspect(head(rules.pruned))\n     lhs                        rhs                  support confidence     lift\n    1 {Instant food products, \n     soda}                  => {hamburger meat} 0.001220132  0.6315789 18.99565\n    2 {soda, \n     popcorn}               => {salty snack}    0.001220132  0.6315789 16.69779\n    3 {flour, \n     baking powder}         => {sugar}          0.001016777  0.5555556 16.40807\n    4 {ham, \n     processed cheese}      => {white bread}    0.001931876  0.6333333 15.04549\n    5 {whole milk, \n     Instant food products} => {hamburger meat} 0.001525165  0.5000000 15.03823\n    6 {other vegetables, \n     curd, \n     yogurt, \n     whipped/sour cream}    => {cream cheese }  0.001016777  0.5882353 14.83409\n\n    ```", "```py\n    > help(is.superset)\n    > help(is.subset)\n\n    ```", "```py\n    > install.packages(\"arulesViz\")\n    > library(arulesViz)\n\n    ```", "```py\n    > plot(rules.pruned)\n\n    ```", "```py\n    > plot(rules.pruned, shading=\"order\", control=list(jitter=6))\n\n    ```", "```py\n    > soda_rule=apriori(data=Groceries, parameter=list(supp=0.001,conf = 0.1, minlen=2), appearance = list(default=\"rhs\",lhs=\"soda\"))\n\n    ```", "```py\n    > plot(sort(soda_rule, by=\"lift\"), method=\"graph\", control=list(type=\"items\"))\n\n    ```", "```py\n    > plot(soda_rule, method=\"grouped\")\n\n    ```", "```py\n    > plot(rules.pruned,interactive=TRUE)\n\n    ```", "```py\n    > frequentsets=eclat(Groceries,parameter=list(support=0.05,maxlen=10))\n\n    ```", "```py\n    > summary(frequentsets)\n    set of 31 itemsets\n\n    most frequent items:\n     whole milk other vegetables           yogurt \n     4                2                2 \n     rolls/buns      frankfurter          (Other) \n     2                1               23 \n\n    element (itemset/transaction) length distribution:sizes\n     1  2 \n    28  3 \n\n     Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n     1.000   1.000   1.000   1.097   1.000   2.000 \n\n    summary of quality measures:\n     support \n     Min.   :0.05236 \n     1st Qu.:0.05831 \n     Median :0.07565 \n     Mean   :0.09212 \n     3rd Qu.:0.10173 \n     Max.   :0.25552 \n\n    includes transaction ID lists: FALSE \n\n    mining info:\n     data ntransactions support\n     Groceries          9835    0.05\n\n    ```", "```py\n    > inspect(sort(frequentsets,by=\"support\")[1:10])\n     items                 support\n    1  {whole milk}       0.25551601\n    2  {other vegetables} 0.19349263\n    3  {rolls/buns}       0.18393493\n    4  {soda}             0.17437722\n    5  {yogurt}           0.13950178\n    6  {bottled water}    0.11052364\n    7  {root vegetables}  0.10899847\n    8  {tropical fruit}   0.10493137\n    9  {shopping bags}    0.09852567\n    10 {sausage}          0.09395018\n\n    ```", "```py\n    > install.packages(\"arulesSequences\")\n    > library(arulesSequences)\n\n    ```", "```py\n    > tmp_data=list(c(\"A\"),\n    +                c(\"A\",\"B\",\"C\"),\n    +                c(\"A\",\"C\"),\n    +                c(\"D\"),\n    +                c(\"C\",\"F\"),\n    +                c(\"A\",\"D\"),\n    +                c(\"C\"),\n    +                c(\"B\",\"C\"),\n    +                c(\"A\",\"E\"),\n    +                c(\"E\",\"F\"),\n    +                c(\"A\",\"B\"),\n    +                c(\"D\",\"F\"),\n    +                c(\"C\"),\n    +                c(\"B\"),\n    +                c(\"E\"),\n    +                c(\"G\"),\n    +                c(\"A\",\"F\"),\n    +                c(\"C\"),\n    +                c(\"B\"),\n    +                c(\"C\"))\n\n    ```", "```py\n    >names(tmp_data) = paste(\"Tr\",c(1:20), sep = \"\")\n    >trans =  as(tmp_data,\"transactions\")\n    >transactionInfo(trans)$sequenceID=c(1,1,1,1,1,2,2,2,2,3,3,3,3,3,4,4,4,4,4,4)\n    >transactionInfo(trans)$eventID=c(10,20,30,40,50,10,20,30,40,10,20,30,40,50,10,20,30,40,50,60)\n    > trans\n    transactions in sparse format with\n     20 transactions (rows) and\n     7 items (columns)\n\n    ```", "```py\n    > inspect(head(trans))\n     items transactionID sequenceID eventID\n    1 {A}             Tr1          1      10\n    2 {A, \n     B, \n     C}             Tr2          1      20\n    3 {A, \n     C}             Tr3          1      30\n    4 {D}             Tr4          1      40\n    5 {C, \n     F}             Tr5          1      50\n    6 {A, \n     D}             Tr6          2      10\n\n    ```", "```py\n    > summary(trans)\n    transactions as itemMatrix in sparse format with\n     20 rows (elements/itemsets/transactions) and\n     7 columns (items) and a density of 0.2214286 \n\n    most frequent items:\n     C       A       B       F       D (Other) \n     8       7       5       4       3       4 \n\n    element (itemset/transaction) length distribution:\n    sizes\n     1  2  3 \n    10  9  1 \n\n     Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n     1.00    1.00    1.50    1.55    2.00    3.00 \n\n    includes extended item information - examples:\n     labels\n    1      A\n    2      B\n    3      C\n\n    includes extended transaction information - examples:\n     transactionID sequenceID eventID\n    1           Tr1          1      10\n    2           Tr2          1      20\n    3           Tr3          1      30\n\n    ```", "```py\n    > zaki=read_baskets(con = system.file(\"misc\", \"zaki.txt\", package = \"arulesSequences\"), info = c(\"sequenceID\",\"eventID\",\"SIZE\"))\n    > as(zaki, \"data.frame\")\n     transactionID.sequenceID transactionID.eventID transactionID.SIZE     items\n    1                         1                    10                  2     {C,D}\n    2                         1                    15                  3   {A,B,C}\n    3                         1                    20                  3   {A,B,F}\n    4                         1                    25                  4 {A,C,D,F}\n    5                         2                    15                  3   {A,B,F}\n    6                         2                    20                  1       {E}\n    7                         3                    10                  3   {A,B,F}\n    8                         4                    10                  3   {D,G,H}\n    9                         4                    20                  2     {B,F}\n    10                        4                    25                  3   {A,G,H}\n\n    ```", "```py\n    > help(\"sequences-class\")\n    > help(\"timedsequences-class\")\n\n    ```", "```py\n    > s_result=cspade(trans,parameter = list(support = 0.75),control = list(verbose = TRUE))\n\n    ```", "```py\n    > summary(s_result)\n    set of 14 sequences with\n\n    most frequent items:\n     C       A       B       D       E (Other) \n     8       5       5       2       1       1 \n\n    most frequent elements:\n     {C}     {A}     {B}     {D}     {E} (Other) \n     8       5       5       2       1       1 \n\n    element (sequence) size distribution:\n    sizes\n    1 2 3 \n    6 6 2 \n\n    sequence length distribution:\n    lengths\n    1 2 3 \n    6 6 2 \n\n    summary of quality measures:\n     support \n     Min.   :0.7500 \n     1st Qu.:0.7500 \n     Median :0.7500 \n     Mean   :0.8393 \n     3rd Qu.:1.0000 \n     Max.   :1.0000 \n\n    includes transaction ID lists: FALSE \n\n    mining info:\n     data ntransactions nsequences support\n     trans            20          4    0.75\n\n    ```", "```py\n    > as(s_result, \"data.frame\")\n     sequence support\n    1          <{A}>    1.00\n    2          <{B}>    1.00\n    3          <{C}>    1.00\n    4          <{D}>    0.75\n    5          <{E}>    0.75\n    6          <{F}>    0.75\n    7      <{A},{C}>    1.00\n    8      <{B},{C}>    0.75\n    9      <{C},{C}>    0.75\n    10     <{D},{C}>    0.75\n    11 <{A},{C},{C}>    0.75\n    12     <{A},{B}>    1.00\n    13     <{C},{B}>    0.75\n    14 <{A},{C},{B}>    0.75\n\n    ```"]