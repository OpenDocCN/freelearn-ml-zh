- en: '21'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Agents in Software Development
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter will introduce you to the concept of agents in software development.
    We’ll cover what agents are, how they work, and how you can use them in your projects.
    We’ll also cover some of the most popular agents’ frameworks and how you can get
    started with them.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s introduce the problems that agents can solve. The general idea is to have
    a program that can act on your behalf. Examples of this could be automating tasks,
    making decisions, and interacting with other agents and humans. Programs like
    these can save you time and make your life easier or your business more efficient.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Introduce the concept of agents in software development.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Explain what agents are and how they work.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Discuss the different types of agents and how they can be used.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What are agents?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As mentioned previously, agents are programs that can act on your behalf. They
    can perform tasks, make decisions, and interact with other agents and humans.
    Agents can be used in a wide range of applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'Several things make a program an agent program versus just a program:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Agent programs** **have a clear goal**: For instance, take a thermostat keeping
    the temperature at 25 degrees and taking appropriate actions to keep it there,
    or an agent managing finances and trying to maximize your profit.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Autonomous**: An agent makes necessary decisions to ensure it meets a goal
    as defined previously. For a finance agent, that could mean buying and selling
    stocks when they meet a specific trigger condition.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Has sensors**: Sensors are either physical or could be an API in software,
    something that enables an agent to understand “what the world is like.” For a
    thermostat, a sensor is a temperature indicator, but for a finance agent, a sensor
    can be an API toward the stock market that enables the agents to decide their
    goals.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How do agents work?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Agents work by receiving input, processing it, and producing output. They can
    be programmed to perform specific tasks, make decisions, and interact with other
    agents and humans. Agents can also learn from their interactions and improve their
    performance over time.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21232_21_01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 21.1: Process for simple agent: keyword, recognize, perform task'
  prefs: []
  type: TYPE_NORMAL
- en: Simpler agents versus agents using AI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Agents are not a new thing. They have been around for a long time. What’s new
    is that agents are now being powered by AI. Let’s compare the two:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Simpler agents**: Traditional agents are programmed to perform specific tasks
    and make decisions based on predefined rules and logic.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Agents using AI**: Agents powered by AI can perform more complex tasks and
    make more intelligent decisions. They can understand natural language, learn from
    their interactions, and improve their performance over time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Simpler agents
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Simpler agents, as mentioned in the previous sections, are limited in that they
    are made for specific tasks. Interacting with them is usually also limited – you
    either use keywords or the way you can express yourself is limited.
  prefs: []
  type: TYPE_NORMAL
- en: An example of a simple agent is a chatbot. Such chatbots are programmed to understand
    a limited set of keywords and phrases.
  prefs: []
  type: TYPE_NORMAL
- en: For example, “Tell me more about your products,” or “What’s your return policy?”.
    Any attempts at conversation outside of these keywords and phrases will result
    in the chatbot not understanding the user.
  prefs: []
  type: TYPE_NORMAL
- en: A simple agent is not a great conversationalist
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When you have a conversation with a human, you expect them to know a few topics
    well and at least to be able to talk about other topics. For a simpler agent,
    we might end up in the following conversation:'
  prefs: []
  type: TYPE_NORMAL
- en: 'User: “Tell me about your products.”'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Agent: “We have a wide range of products, including electronics, clothing,
    and accessories. Please indicate your interest.”'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'User: “I’m interested in clothes, something fitting the current weather.”'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Agent: “I can advise on **clothes** for sure, but I don’t know the **current
    weather**.”'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There are two interesting things we can observe here:'
  prefs: []
  type: TYPE_NORMAL
- en: The conversation feels short, and the important information is either at the
    end of a sentence or just before a comma, which indicates that simpler parsing
    is used to extract the important information.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It doesn’t handle non-product information like weather, which could help filter
    down the response.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved conversation with tool calling and large language models (LLMs)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'An LLM is an improvement in that it’s good at sounding more natural, but also
    that it can parse out and recognize intent from fluent text. You can also provide
    the LLM with additional knowledge thanks to something called tool calling, where
    you tell the LLM about various capabilities like the clothes API, weather API,
    and so on, which can handle the conversation better, and resemble a conversation
    with a human. Let’s take that same conversation with an LLM and highlight the
    difference:'
  prefs: []
  type: TYPE_NORMAL
- en: 'User: “What are your products?”'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Agent: “We have a wide range of products, including electronics, clothing,
    and accessories.”'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'User: “Great, I’m interested in clothes, something fitting the current weather.
    What can you recommend?”'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Agent: “Can you tell me your location so I can advise you better on clothes?”'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'User: “Sure, I’m based in Phoenix, Arizona.”'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Agent: “I see it’s currently 90F in Phoenix at the moment. Might I suggest
    these shorts?”'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The reason this conversation fared better is that this LLM expresses itself
    more naturally thanks to the tool calling that called its weather API with Phoenix
    as input and then proceeded to call the clothes API with the weather response
    as a filter.
  prefs: []
  type: TYPE_NORMAL
- en: The anatomy of a conversational agent
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A conversational agent typically consists of the following components:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Input**: The input to the agent, typically in the form of natural language.
    It should be said this can be a lot of different spoken languages, not just English,
    which you have had to hardcode in the past.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Processing**: The processing of the input, typically using **natural language
    processing** (**NLP**) techniques.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Delegation**: The delegation of the input to the appropriate component of
    the agent. The component it’s delegated to can be an agent for a specific task,
    for example, to book a flight or to answer a question.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/B21232_21_02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 21.2: Conversational agents process steps'
  prefs: []
  type: TYPE_NORMAL
- en: The preceding diagram indicates a loop where you go from input to processing
    to delegation to result, so why is there a loop? An agent doesn’t have the concept
    of an end; it sits there and waits for the user to provide input and reacts to
    it. As mentioned earlier in this chapter, an agent works toward a goal, and if
    the goal is to manage finances, it’s a continuous job.
  prefs: []
  type: TYPE_NORMAL
- en: More on tool calling in LLMs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We’ve mentioned tool calling previously in this chapter but let’s try to show
    how it works to add capabilities to the LLM.
  prefs: []
  type: TYPE_NORMAL
- en: 'The LLM only knows what it has been trained on, and for things it hasn’t been
    trained on, it will, in many cases, try to provide you with an answer that isn’t
    always correct as it makes it up; this is known as a hallucination. To improve
    areas where you want the LLM to provide more accurate responses, you can present
    it with a tool. The process of providing a tool consists of the following components:'
  prefs: []
  type: TYPE_NORMAL
- en: A JSON description of a function
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A description of the function so the LLM knows when this function should be
    called
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Once you’ve provided the preceding components, let’s say you provide a function
    capable of fetching the weather; the LLM can now use its built-in features to
    semantically interpret all the following inputs to mean that the user wants to
    know about the weather:'
  prefs: []
  type: TYPE_NORMAL
- en: “What’s the weather like today in Salt Lake City?”
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: “What’s the temperature in San Francisco?”
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: “Is it going to rain in New York tomorrow?”
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: “What’s the weather like in London?”
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: “Is it warm outside?”
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding capabilities to GPT using tools
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'How it works is that you provide a function specification in a JSON format.
    This JSON function format is a schema the GPT model understands. The GPT model
    will essentially do two things for you:'
  prefs: []
  type: TYPE_NORMAL
- en: Extract parameters from the prompt.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Determine whether to call a function and which function to call, as you can
    tell it about more than one function.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As a developer, you need to then actively call the function if the LLM thinks
    it should be called.
  prefs: []
  type: TYPE_NORMAL
- en: 'Your function format follows this schema:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding JSON schema, there are a few things you’re telling the GPT
    model:'
  prefs: []
  type: TYPE_NORMAL
- en: There’s a function called `get_current_weather`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The description is `"Get the current weather"`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The function takes two parameters, `location` and `format`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There’s also a description of the parameters, their types, and allowed values.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let’s describe how this would work in practice, given the following prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Prompt]**'
  prefs: []
  type: TYPE_NORMAL
- en: “What’s the weather like today in Salt Lake City?”
  prefs: []
  type: TYPE_NORMAL
- en: '**[End of prompt]**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s what the GPT model can extract from the prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Location: Salt Lake City.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Format: This is not provided, but the GPT can infer this from the user’s location.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Function to call: `get_current_weather`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'What you need to do as a developer is to call the function indicated with the
    extracted parameter values. The following is code that could be used to connect
    to the GPT model, where a function description is provided, and parse the response:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This is probably the most basic example of how you can create a conversational
    agent using GPT.
  prefs: []
  type: TYPE_NORMAL
- en: However, we expect a bit more from an advanced agent. What if we want to do
    something more complex, like booking a flight, hotel, car, and restaurant?
  prefs: []
  type: TYPE_NORMAL
- en: Advanced conversations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It’s easy to think you can just add more functions to the GPT model and that
    might work for a time. However, as the conversation becomes more complex, the
    GPT model needs to remember the context of the conversation and keep track of
    the state of the conversation.
  prefs: []
  type: TYPE_NORMAL
- en: For more advanced conversations, it quickly becomes more complex.
  prefs: []
  type: TYPE_NORMAL
- en: 'Imagine going into a travel agent’s office and the following back-and-forth
    conversation taking place between two humans:'
  prefs: []
  type: TYPE_NORMAL
- en: '*User: “I want to go on a vacation.”*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Agent: “Sure.”*'
  prefs: []
  type: TYPE_NORMAL
- en: '*User: “I want to go to a warm place.”*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Agent: “Sure, tell me more about what you’re looking for.”*'
  prefs: []
  type: TYPE_NORMAL
- en: '*User: “I want somewhere with a beach.”*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Agent: “Sure, any more details?”*'
  prefs: []
  type: TYPE_NORMAL
- en: '*User: “I want there to be at least 25 degrees.”*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Agent: “Sure, any more details?”*'
  prefs: []
  type: TYPE_NORMAL
- en: '*User: “No, that’s it.”*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Agent: “I found three places that match your criteria. Can I present them
    to you?”*'
  prefs: []
  type: TYPE_NORMAL
- en: '*User: “Yes, please.”*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Agent: “Here are the three places. Which one do you want to know more about?”*'
  prefs: []
  type: TYPE_NORMAL
- en: '*User: “I want the first one.”*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Agent: “Here’s more information about the first place.”*'
  prefs: []
  type: TYPE_NORMAL
- en: '*User: “Cool, can you book a hotel and flight for the first place?”*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Agent: “Sure, I’ll get that done for you.”*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Agent: “I’ve booked the hotel and flight for you.”*'
  prefs: []
  type: TYPE_NORMAL
- en: '*User: “Thanks, ooh, I need to rent a car as well.”*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Agent: “Sure, any specific car you’re looking for?”*'
  prefs: []
  type: TYPE_NORMAL
- en: '*User: “Not really; my budget is $100 per day.”*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Agent: “I found five cars that match your criteria. Can I present them to
    you?”*'
  prefs: []
  type: TYPE_NORMAL
- en: '*User: “Yes, please. I want the fifth one.”*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Agent: “I’ve booked the car for you.”*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Agent: “You’re all set for your vacation.”*'
  prefs: []
  type: TYPE_NORMAL
- en: '*User: “Thanks, but wait, I need help booking a restaurant for the first night.”*'
  prefs: []
  type: TYPE_NORMAL
- en: At this point, it stands clear that this conversation can go on for quite a
    while. The agent needs to remember the context of the conversation and keep track
    of the state.
  prefs: []
  type: TYPE_NORMAL
- en: There are also many different tasks that the agent needs to delegate to other
    agents or services, like booking a hotel, flight, car, and restaurant, and the
    weather API, sightseeing API, and more.
  prefs: []
  type: TYPE_NORMAL
- en: The point is that there’s more to an agent than just understanding the initial
    prompt and delegating the task to another agent or service. You need to think
    of this conversation as a state machine and an orchestration of different agents
    and services.
  prefs: []
  type: TYPE_NORMAL
- en: Modeling advanced conversations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We mentioned that a more advanced conversation involves remembering both context
    and state. Let’s inspect a subset of the example conversation and see how the
    state changes:'
  prefs: []
  type: TYPE_NORMAL
- en: '*User: “I want to go on a vacation.”*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Agent: “Sure.”*'
  prefs: []
  type: TYPE_NORMAL
- en: At this point, the agent hasn’t remembered anything more than the user’s intention,
    which is to go on vacation. It’s just acknowledged the user’s prompt.
  prefs: []
  type: TYPE_NORMAL
- en: '*User: “I want to go to a warm place.”*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Agent: “Sure, tell me more about what you’re looking for.”*'
  prefs: []
  type: TYPE_NORMAL
- en: Now things are getting interesting. The agent has remembered “warm” as a piece
    of criteria and needs to translate “warm” into a temperature range it can use
    to filter out places that are too cold.
  prefs: []
  type: TYPE_NORMAL
- en: '*User: “I want somewhere with a beach.”*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Agent: “Sure, any more details?”*'
  prefs: []
  type: TYPE_NORMAL
- en: This is another step forward; the agent has remembered “beach” as an additional
    piece of criteria to use when filtering out places.
  prefs: []
  type: TYPE_NORMAL
- en: '*User: “I want it to be at least 25 degrees.”*'
  prefs: []
  type: TYPE_NORMAL
- en: An additional criterion, “25 degrees,” has been added. Let’s see the earlier
    piece of criteria, “warm,” which was defined as 20–40 Celsius – this adjusts the
    range to 25–40 Celsius.
  prefs: []
  type: TYPE_NORMAL
- en: '*Agent: “Sure, any more details?”*'
  prefs: []
  type: TYPE_NORMAL
- en: '*User: “No, that’s it.”*'
  prefs: []
  type: TYPE_NORMAL
- en: At this point, the agent recognizes that the user has no more criteria to add,
    and a search/decision can take place with the filters of “warm,” “beach,” and
    “25–40 Celsius.” Now, an API is called to get a list of places and the agent can
    present the list to the user for selection.
  prefs: []
  type: TYPE_NORMAL
- en: '*Agent: “I found three places that match your criteria. Can I present them
    to you?”*'
  prefs: []
  type: TYPE_NORMAL
- en: What’s important to add is that not only are criteria remembered for this specific
    trip retrieval but they need to be remembered for the next steps as well unless
    the user changes the criteria.
  prefs: []
  type: TYPE_NORMAL
- en: Hopefully, you can see from the preceding example that the state is built up
    slowly, and the agent needs to remember the context of the conversation.
  prefs: []
  type: TYPE_NORMAL
- en: 'It can be helpful to think of a more advanced conversation as consisting of
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Input**: The input to the agent, typically in the form of natural language.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Processing**: The processing of the input, typically using NLP techniques.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Determine the next step**: The agent needs to determine the next step in
    the conversation based on the input and the current state of the conversation.
    Answers here can be to ask for more information, present a list of options, book
    something, and so on.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**End conversation or continue (ask for user input)**: The agent needs to determine
    whether the conversation should end or continue. If it should continue, it needs
    to ask for user input.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Pseudo code for advanced conversations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The agent might have a few different states, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Ask for a task**: This would typically be asked when the conversation starts
    or when a task has been performed and a user selection has been done.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Ask the user for more information on a task:** This would typically be asked
    before a task is performed to ensure the agent has all the information it needs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Present a list of options to the user**: This would typically be asked after
    a task has been performed to present the user with things to choose from.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Perform a task:** Here, the agent would perform a task, like booking a hotel,
    flight, car, or restaurant.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**End the conversation:** The agent moves to this state when the conversation
    is over, and the user has somehow indicated that the conversation is over.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This is how this might look in pseudo code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code is a decent starting point for a more advanced conversation.
    However, we should remember that humans are not always predictable, and the agent
    needs to be able to handle the unexpected. For example, humans can change their
    minds or add new criteria at any point.
  prefs: []
  type: TYPE_NORMAL
- en: Autonomous agents
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Autonomous agents are agents that can act on their own without human intervention.
    They can perform tasks, make decisions, and interact with other agents and humans
    without human input. Autonomous agents can be used in a wide range of applications,
    from self-driving cars to virtual assistants.
  prefs: []
  type: TYPE_NORMAL
- en: 'Examples of autonomous agents include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Self-driving cars**: Self-driving cars are autonomous agents that can drive
    themselves without human intervention. They can navigate roads, avoid obstacles,
    and make decisions based on their surroundings.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Virtual assistants**: Virtual assistants are autonomous agents that can perform
    tasks, make decisions, and interact with humans without human input. They can
    understand natural language, learn from their interactions, and improve their
    performance over time. Imagine an example of this where you have a financial agent;
    you might have given it a high-level goal to manage your finances and ensure an
    8% value increase per year. You might have given this agent the go-ahead to buy
    and sell stocks under a certain value but to consultant you on larger purchases
    and sales over a certain limit.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We are likely to see a rise in both conversational agents as well as autonomous
    agents in the future. There are a lot of interesting areas where these agents
    can be used, from customer service to healthcare, finance, and transportation.
    Imagine having an autonomous agent that can help you with your taxes, book a vacation,
    or help you with your health while knowing your medical history, your preferences,
    and more.
  prefs: []
  type: TYPE_NORMAL
- en: Assignment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Given the following conversation, deduce which type of agent is likely involved
    in the conversation and how would you model the conversation:'
  prefs: []
  type: TYPE_NORMAL
- en: '*User: “I want to bake a cake.”*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Agent: “Sure, what type of cake are you looking to bake?”*'
  prefs: []
  type: TYPE_NORMAL
- en: '*User: “I want to make a chocolate cake.”*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Agent: “Sure, do you have a recipe in mind?”*'
  prefs: []
  type: TYPE_NORMAL
- en: '*User: “No, can you help me find a recipe?”*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Agent: “Sure, anything I should know in terms of allergies or preferences?”*'
  prefs: []
  type: TYPE_NORMAL
- en: '*User: “I’m allergic to nuts and I prefer a recipe that’s easy to make. Oh,
    I also want to make a cake that’s vegan.”*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Agent: “Got it! I found three recipes that match your criteria. Can I present
    them?”*'
  prefs: []
  type: TYPE_NORMAL
- en: '*User: “Yes, please.”*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Agent: “Here are the three recipes. Which one do you want?”*'
  prefs: []
  type: TYPE_NORMAL
- en: '*User: “I want number 2.”*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Agent: “Is that all?”*'
  prefs: []
  type: TYPE_NORMAL
- en: '*User: “No, do I need to buy the ingredients? Also, can you help me set the
    oven temperature?”*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Agent: “Yes, looks like you’re missing a few ingredients. I can help you place
    an order for the ingredients. I can also help you set the oven temperature. When
    do you need it set?”*'
  prefs: []
  type: TYPE_NORMAL
- en: '*User: “Yes, place the order, and let’s set the oven as soon as the order arrives.”*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Agent: “I’ve placed the order and am waiting for the delivery. I’ll set the
    oven temperature as it arrives.”*'
  prefs: []
  type: TYPE_NORMAL
- en: '*User: “Thanks.”*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Agent: “You’re welcome, that’s it?”*'
  prefs: []
  type: TYPE_NORMAL
- en: '*User: “Yes.”*'
  prefs: []
  type: TYPE_NORMAL
- en: Challenge
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Can you think of a problem that can be solved using agents? How would you use
    agents to solve this problem? What type of agents would you use?
  prefs: []
  type: TYPE_NORMAL
- en: Quiz
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Q: What’s tool calling in LLMs?'
  prefs: []
  type: TYPE_NORMAL
- en: It’s when the LLM calls a built-in tool to provide a response.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It’s when you let the LLM know of a new capability by providing it with a function
    description in JSON and a semantic description that indicates when this function
    should be called.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It’s when you use functions to fine-tune the LLM.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we introduced the concept of agents in software development.
    We explained what agents are and how they work. We discussed the different types
    of agents and how they can be used. We hope that you now have a glimpse of the
    future to see where LLMs like GPT are heading and how your future is about to
    change.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It’s worth checking out some resources on agents if you’re curious:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Autogen: [https://github.com/microsoft/autogen](https://github.com/microsoft/autogen)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Semantic Kernel: [https://learn.microsoft.com/en-us/semantic-kernel/overview/](https://learn.microsoft.com/en-us/semantic-kernel/overview/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Join our Discord: [https://discord.gg/pAbnFJrkgZ](https://discord.gg/pAbnFJrkgZ)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Join our community on Discord
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Join our community’s Discord space for discussions with the author and other
    readers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://packt.link/aicode](https://packt.link/aicode)'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/QR_Code510410532445718281.png)'
  prefs: []
  type: TYPE_IMG
