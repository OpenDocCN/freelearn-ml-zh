["```py\nDataTable data = new DataTable(\"Should I Go To Work For Company\n  X\");\ndata.Columns.Add(\"Scenario\");\ndata.Columns.Add(\"Pay\");\ndata.Columns.Add(\"Benefits\");\ndata.Columns.Add(\"Culture\");\ndata.Columns.Add(\"WorkFromHome\");\ndata.Columns.Add(\"ShouldITakeJob\");\n```", "```py\ndata.Rows.Add(\"D1\", \"Good\", \"Good\", \"Mean\", \"Yes\", \"Yes\");\ndata.Rows.Add(\"D2\", \"Good\", \"Good\", \"Mean\", \"No\", \"Yes\");\ndata.Rows.Add(\"D3\", \"Average\", \"Good\", \"Good\", \"Yes\", \"Yes\");\ndata.Rows.Add(\"D4\", \"Average\", \"Good\", \"Good\", \"No\", \"Yes\");\ndata.Rows.Add(\"D5\", \"Bad\", \"Good\", \"Good\", \"Yes\", \"No\");\ndata.Rows.Add(\"D6\", \"Bad\", \"Good\", \"Good\", \"No\", \"No\");\ndata.Rows.Add(\"D7\", \"Good\", \"Average\", \"Mean\", \"Yes\", \"Yes\");\ndata.Rows.Add(\"D8\", \"Good\", \"Average\", \"Mean\", \"No\", \"Yes\");\ndata.Rows.Add(\"D9\", \"Average\", \"Average\", \"Good\", \"Yes\", \"No\");\ndata.Rows.Add(\"D10\", \"Average\", \"Average\", \"Good\", \"No\", \"No\");\ndata.Rows.Add(\"D11\", \"Bad\", \"Average\", \"Good\", \"Yes\", \"No\");\ndata.Rows.Add(\"D12\", \"Bad\", \"Average\", \"Good\", \"No\", \"No\");\ndata.Rows.Add(\"D13\", \"Good\", \"Bad\", \"Mean\", \"Yes\", \"Yes\");\ndata.Rows.Add(\"D14\", \"Good\", \"Bad\", \"Mean\", \"No\", \"Yes\");\ndata.Rows.Add(\"D15\", \"Average\", \"Bad\", \"Good\", \"Yes\", \"No\");\ndata.Rows.Add(\"D16\", \"Average\", \"Bad\", \"Good\", \"No\", \"No\");\ndata.Rows.Add(\"D17\", \"Bad\", \"Bad\", \"Good\", \"Yes\", \"No\");\ndata.Rows.Add(\"D18\", \"Bad\", \"Bad\", \"Good\", \"No\", \"No\");\ndata.Rows.Add(\"D19\", \"Good\", \"Good\", \"Good\", \"Yes\", \"Yes\"); data.Rows.Add(\"D20\", \"Good\", \"Good\", \"Good\", \"No\", \"Yes\");\n```", "```py\nCodification codebook = new Codification(data);\n```", "```py\nDecisionVariable[] attributes =\n{\n  new DecisionVariable(\"Pay\", 3),\n  new DecisionVariable(\"Benefits\", 3),\n  new DecisionVariable(\"Culture\", 3),\n  new DecisionVariable(\"WorkFromHome\", 2)\n};\nint outputValues = 2; // 2 possible output values: yes or no\nDecisionTree tree = new DecisionTree(attributes, outputValues);\n```", "```py\nID3Learning id3 = new ID3Learning(tree);\nNow, with our tree fully created and ready to go, we \n  are ready to classify new samples.\n// Translate our training data into integer symbols using our codebook:\nDataTable symbols = codebook.Apply(data);\nint[][] inputs = symbols.ToArray<int>(\"Pay\", \"Benefits\", \"Culture\",\n  \"WorkFromHome\");\nint[] outputs = symbols.ToIntArray(\"ShouldITakeJob\").GetColumn(0);\n// Learn the training instances!\nid3.Run(inputs, outputs);\n```", "```py\nint[] query = codebook.Translate(\"Good\", \"Good\", \"Good\", \"Yes\");\nint output = tree.Compute(query);\nstring answer = codebook.Translate(\"ShouldITakeJob\", output); \n// answer   will be \"Yes\".\n```", "```py\nstatic void Main(string[] args)\n{\nConsole.WriteLine(\"Hello World!\");\nvar description = Descriptor.Create<Iris>();\nConsole.WriteLine(description);\nvar generator = new DecisionTreeGenerator();\nvar data = Iris.Load();\nvar model = generator.Generate(description, data);\nConsole.WriteLine(\"Generated model:\");\nConsole.WriteLine(model);\nConsole.ReadKey();\n}\n```", "```py\npublic static Iris[] Load()\n{\nreturn new Iris[]\n{\nnew Iris { SepalLength = 5.1m, SepalWidth = 3.5m, PetalLength =\n  1.4m, PetalWidth = 0.2m, Class = \"Iris-setosa\" },\nnew Iris { SepalLength = 4.9m, SepalWidth = 3m, PetalLength = \n  1.4m, PetalWidth = 0.2m, Class = \"Iris-setosa\" },\nnew Iris { SepalLength = 4.7m, SepalWidth = 3.2m, PetalLength =\n  1.3m, PetalWidth = 0.2m, Class = \"Iris-setosa\" },\nnew Iris { SepalLength = 4.6m, SepalWidth = 3.1m, PetalLength = \n  1.5m, PetalWidth = 0.2m, Class = \"Iris-setosa\" },\nnew Iris { SepalLength = 5m, SepalWidth = 3.6m, PetalLength = \n  1.4m, PetalWidth = 0.2m, Class = \"Iris-setosa\" },\nnew Iris { SepalLength = 5.4m, SepalWidth = 3.9m, PetalLength = \n  1.7m, PetalWidth = 0.4m, Class = \"Iris-setosa\" },\n```", "```py\n// Specify the input variables\nDecisionVariable[] variables =\n{\nnew DecisionVariable(\"x\", DecisionVariableKind.Continuous),\nnew DecisionVariable(\"y\", DecisionVariableKind.Continuous),\n};\n// Create the C4.5 learning algorithm\nvar c45 = new C45Learning(variables);\n// Learn the decision tree using C4.5\ntree = c45.Learn(inputs, outputs);\n// Show the learned tree in the view\ndecisionTreeView1.TreeSource = tree;\n// Get the ranges for each variable (X and Y)\nDoubleRange[] ranges = table.GetRange(0);\n// Generate a Cartesian coordinate system\ndouble[][] map = Matrix.Mesh(ranges[0], \n  200, ranges[1], 200);\n// Classify each point in the Cartesian coordinate system\ndouble[,] surface = map.ToMatrix().\n  InsertColumn(tree.Decide(map));\nCreateScatterplot(zedGraphControl2, surface);\n//Testing\n// Creates a matrix from the entire source data table\ndouble[][] table = (dgvLearningSource.DataSource as\n  DataTable).ToJagged(out columnNames);\n// Get only the input vector values (first two columns)\ndouble[][] inputs = table.GetColumns(0, 1);\n// Get the expected output labels (last column)\nint[] expected = table.GetColumn(2).ToInt32();\n// Compute the actual tree outputs and turn \n  a Boolean into a 0 or 1\nint[] actual = tree.Decide(inputs);\n// Use confusion matrix to compute some statistics.\nConfusionMatrix confusionMatrix = \n  new ConfusionMatrix(actual, expected, 1, 0);\ndgvPerformance.DataSource = new [] { confusionMatrix };\n// Create performance scatter plot\nCreateResultScatterplot(zedGraphControl1,\n  inputs, expected.ToDouble(), actual.ToDouble());\n// As you can see above, the tree is making \n  the decision via the code line\nint[] actual = tree.Decide(inputs);\n```"]