- en: '*Chapter 9*: Fleet Management at Scale'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第9章*：大规模车队管理'
- en: The **Internet of things** (**IoT**) had a humble beginning in 1999, in Procter
    & Gamble, when Kevin Ashton introduced the idea of integrating a **radio-frequency
    identification** (**RFID**) antenna into lipstick shelves to enable branch managers
    to better track cosmetic inventories for replenishments. Since then, this technology
    has been adopted across all industry segments in some form or another and has
    become ubiquitous in today's world.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**物联网**（**IoT**）始于1999年，在宝洁公司，凯文·阿什顿提出了将**射频识别**（**RFID**）天线集成到口红货架上的想法，以便分支经理更好地跟踪化妆品库存以进行补充。从那时起，这项技术以某种形式被广泛应用于所有行业领域，并在当今世界变得无处不在。'
- en: Managing a set of RFID tags, sensors, and actuators inside a known physical
    boundary is a relatively easy task. However, managing millions (or billions or
    trillions) of these devices globally throughout their lifecycle is not. Especially
    when these devices are spread across different locations with various forms of
    connectivity and interfaces.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在已知物理边界内管理一组RFID标签、传感器和执行器是一项相对简单的工作。然而，在全球范围内管理数百万（或数十亿或数万亿）这些设备在其整个生命周期内则不是。尤其是当这些设备分布在不同的地点，具有各种形式的连接和接口时。
- en: Therefore, in this chapter, you will learn about the best practices of onboarding,
    maintaining, and diagnosing a fleet of devices remotely through AWS native services.
    Additionally, you will gain hands-on experience in building an operational hub
    to assess the health of the connected fleet for taking required actions.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在本章中，您将了解远程上线、维护和诊断设备车队的最佳实践。此外，您将通过构建操作枢纽来获得实际经验，以评估连接车队的健康状况并采取必要的行动。
- en: 'In this chapter, we will be covering the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Onboarding a fleet of devices globally
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 全球上线设备车队
- en: Managing your fleet at scale
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大规模管理您的车队
- en: A hands-on exercise building an operational hub
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 建立操作枢纽的动手练习
- en: Checking your knowledge
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查你的知识
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: The technical requirements for this chapter are the same as those outlined in
    [*Chapter 2*](B17595_02_Final_SS_ePub.xhtml#_idTextAnchor032)*, Foundations of
    Edge Workloads*. See the full requirements in that chapter.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的技术要求与[*第2章*](B17595_02_Final_SS_ePub.xhtml#_idTextAnchor032)“边缘工作负载基础”中概述的要求相同。请参阅该章节中的完整要求。
- en: Onboarding a fleet of devices globally
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 全球上线设备车队
- en: 'We already introduced you to the different activities involved in the IoT manufacturing
    supply chain in [*Chapter 8*](B17595_08_Final_SS_ePub.xhtml#_idTextAnchor163),
    *DevOps and MLOps for the Edge*. **Onboarding** refers to the process of manufacturing,
    assembling, and registering a device with a registration authority. In this section,
    we will dive deeper into the following activities that play a part in the onboarding
    workflow:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在[*第8章*](B17595_08_Final_SS_ePub.xhtml#_idTextAnchor163)，“边缘的DevOps和MLOps”中向您介绍了物联网制造供应链中涉及的不同活动。**上线**指的是制造、组装并将设备注册到注册机构的过程。在本节中，我们将深入了解以下在上线工作流程中发挥作用的活动：
- en: '![Figure 9.1 – Device onboarding activities'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 9.1 – 设备上线活动'
- en: '](img/Table_09_01.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Table_09_01.jpg]'
- en: Figure 9.1 – Device onboarding activities
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Figure 9.1 – 设备上线活动
- en: So far, in this book, you have been using a **Raspberry Pi** (or a virtual environment)
    to perform the hands-on exercises. This is a common practice for development and
    prototyping needs. However, as your project progresses toward a higher environment
    (such as QA or production), it is recommended that you consider hardware that's
    industry-grade and can operate in various conditions. Therefore, all the aforementioned
    activities in *Figure 9.1* need to be completed before your device (that is, the
    connected HBS hub) can be made available through your distribution channels at
    different retail stores (and sell like hotcakes!).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，在这本书中，您一直在使用**树莓派**（或虚拟环境）进行动手练习。这是开发和原型设计中的常见做法。然而，随着您的项目向更高环境（如QA或生产）发展，建议您考虑工业级硬件，并且能够在各种条件下运行。因此，*图9.1*中提到的所有上述活动都需要在您的设备（即连接的HBS枢纽）可以通过您的分销渠道在不同的零售店（并且像热蛋糕一样畅销！）提供之前完成。
- en: For the remainder of this chapter, we assume that your company already has a
    defined supply chain with your preferred vendors and the device manufacturing
    workflow is operational to assemble the devices. As your customers unbox these
    devices (with so much excitement!) and kick off the setup process, the device
    needs to bootstrap locally (on the edge) and register with the **AWS IoT** services
    successfully to become fully operational.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的剩余部分，我们假设你的公司已经定义了与首选供应商的供应链，并且设备制造工作流程已经运行，以便组装设备。当你的客户打开这些设备（充满兴奋！）并启动设置过程时，设备需要在本地（边缘）启动并成功注册到**AWS
    IoT**服务，以实现完全运行。
- en: So, you must be thinking, what are the necessary steps to perform in advance
    for the device registration to be a success? Here it comes.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，你可能正在想，为了使设备注册成功，需要提前执行哪些必要步骤？下面就是。
- en: Registering a certificate authority
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 注册证书颁发机构
- en: 'There are different types of *cryptographic* credentials such as a user ID,
    password, vended tokens (such as **JWT** and **OAuth**), and symmetric or asymmetric
    keys that can be used by an IoT device. We recommend using asymmetric keys as,
    at the time of writing, these are considered to be the most secure approach in
    the industry. In all the previous hands-on exercises, you took advantage of the
    **asymmetric X.509** keys and certificates generated by the AWS IoT **Certificate
    Authority** (**CA**), that were embedded in the connected HBS hub running Greengrass.
    A CA is a trusted entity that issues cryptographic credentials such as digital
    keys and certificates. These credentials are registered on the cloud and embedded
    onto the devices to enable transport-layer security or TLS-based mutual authentication.
    Specifically, there are four digital resources associated with a mutual TLS authentication
    workflow, as follows:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 存在着不同类型的*加密*凭证，例如用户ID、密码、销售令牌（如**JWT**和**OAuth**）以及对称或非对称密钥，这些密钥可以被物联网设备使用。我们建议使用非对称密钥，因为在撰写本文时，这些被认为是行业中最安全的做法。在所有之前的动手实践中，你利用了由AWS
    IoT**证书颁发机构**（**CA**）生成的**非对称X.509**密钥和证书，这些证书嵌入在运行Greengrass的连接HBS网关中。CA是一个受信任的实体，它颁发加密凭证，如数字密钥和证书。这些凭证在云上注册并嵌入到设备中，以启用传输层安全或基于TLS的相互认证。具体来说，与相互TLS认证工作流程相关联的数字资源有四个，如下所示：
- en: '**X.509 certificate**: This is a certificate that is required to be present
    both on the device and in the cloud and is presented during the mutual TLS handshake.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**X.509证书**：这是一个需要在设备和云中都存在的证书，在相互TLS握手过程中被展示。'
- en: '**Private and public keys**: The asymmetric key pair that is generated using
    an algorithm such as **Rivest-Shamir-Adleman** (**RSA**) or **Elliptical Curve
    cryptography** (**ECC**). As a best practice, the private key only stays on the
    device and should be protected to avoid identity compromises.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**私钥和公钥**：使用如**Rivest-Shamir-Adleman**（**RSA**）或**椭圆曲线加密**（**ECC**）算法生成的非对称密钥对。作为最佳实践，私钥仅保留在设备上，并且应该得到保护，以避免身份泄露。'
- en: '**Signer CA**: This is a root or intermediate certificate that has been issued
    and signed by a trusted CA such as AWS and Verisign. The device will need to send
    this issuing CA along with the client certificate during the registration process.
    If the signer CA is not available, it''s also possible to send the **Server Name
    Indication** (**SNI**) part of the TLS mutual authentication to validate trust.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**签名CA**：这是一个由受信任的CA（如AWS和Verisign）签发的根或中间证书。设备在注册过程中需要发送这个签发CA以及客户端证书。如果签名CA不可用，也可以发送TLS相互认证中的**服务器名称指示**（**SNI**）部分来验证信任。'
- en: '**Server certificate**: This is a certificate that''s used by the devices to
    verify, using the certificate chain presented during the TLS handshake, that it''s
    not communicating with an impersonating server.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**服务器证书**：这是一个由设备使用的证书，用于在TLS握手期间通过展示的证书链验证，它不是在与冒充服务器通信。'
- en: 'The following diagram shows the workflow and the location of these digital
    resources on the device and in the cloud:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的图示显示了工作流程以及这些数字资源在设备和云中的位置：
- en: '![Figure 9.2 – Cryptographic credentials within an IoT workflow'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.2 – 物联网工作流程中的加密凭证'
- en: '](img/Figure_09_02.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_09_02.jpg)'
- en: Figure 9.2 – Cryptographic credentials within an IoT workflow
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.2 – 物联网工作流程中的加密凭证
- en: 'Therefore, it''s critical to decide on a CA early on in the design process.
    This is so that it can issue the aforementioned digital resources required by
    the devices to perform registration with a backend authority and become fully
    operational. There are three different ways a CA can be used with AWS IoT Core,
    as shown in the following table along with a list of pros and cons:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在设计过程中尽早决定CA至关重要。这样，它就可以颁发设备所需的上述数字资源，以便与后端权威机构进行注册并完全运行。CA可以以以下三种不同的方式与AWS
    IoT Core一起使用，如下表所示，并列出其优缺点：
- en: '![Figure 9.3 – Choosing a CA'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.3 – 选择CA'
- en: '](img/B17595_09_03.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17595_09_03.jpg)'
- en: Figure 9.3 – Choosing a CA
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.3 – 选择CA
- en: Once the CA setup is complete, the next step is to choose the device provisioning
    approach based on the scenario. Let's understand that in more detail next.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦完成CA设置，下一步就是根据场景选择设备供应方法。让我们在下一节中更详细地了解这一点。
- en: Deciding the provisioning approach
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 决定供应方法
- en: Terms such as provisioning and registration are used interchangeably in many
    contexts in the IoT world, but we believe there is a clear distinction between
    them. For us, device provisioning is the amalgamation of two activities – device
    registration and device activation. *Device registration* is the process where
    a device successfully authenticates using its initial cryptographic credentials
    against a registration authority (such as the AWS IoT Identity service), reports
    distinctive attributes such as the model and serial number, and gets associated
    as a unique identity in a device registry. Additionally, the authority can return
    a new set of credentials, which the device can replace with the prior ones. Following
    this, a privilege escalator can enhance the privilege of the associated principal
    (such as the X.509 certificate) for the device to be activated and fully operational.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在物联网世界的许多情况下，术语“供应”和“注册”被交替使用，但我们认为它们之间存在明显的区别。对我们来说，设备供应是两种活动的结合——设备注册和设备激活。“设备注册”是指设备使用其初始加密凭证对注册机构（如AWS
    IoT身份服务）进行成功认证，报告独特的属性，如型号和序列号，并在设备注册表中关联为唯一的身份。此外，该机构可以返回一组新的凭证，设备可以用这些凭证替换之前的凭证。在此之后，权限提升器可以提高关联主体（如X.509证书）的权限，以便设备能够被激活并完全运行。
- en: There are different approaches to these provisioning steps, which are often
    derived from the level of control or convenience an organization intends to have
    in the manufacturing supply chain. Often, this choice is determined by several
    factors such as in-house skills, cost, security, time to market, or sensitivity
    to the intellectual property of the product. You learned about the approach of
    automatic provisioning through IoT Device Tester in [*Chapter 2*](B17595_02_Final_SS_ePub.xhtml#_idTextAnchor032),
    *Foundations of Edge Workloads*, which is prevalent for prototyping and experimentation
    purposes.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些供应步骤中存在不同的方法，这些方法通常源于组织希望在制造供应链中拥有的控制水平或便利性。通常，这种选择是由多个因素决定的，例如内部技能、成本、安全性、上市时间或对产品知识产权的敏感性。您在[*第二章*](B17595_02_Final_SS_ePub.xhtml#_idTextAnchor032)“边缘工作负载基础”中学习了通过IoT设备测试器实现自动供应的方法，这种方法在原型设计和实验目的上非常普遍。
- en: In this section, we will discuss two production-grade provisioning approaches
    that can scale from one device to millions of devices (or more) by working backward
    from the following scenarios.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将讨论两种可扩展到从一台设备到数百万台设备（或更多）的生产级供应方法，这些方法通过以下场景反向工作。
- en: Scenario 1 – HBS hubs with unique firmware images are provisioned in bulk
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 场景1 – 批量供应具有独特固件映像的HBS集线器
- en: 'In this scenario, you can provision the fleet of HBS hubs in bulk in your supply
    chain using unique firmware images that include unique cryptographic credentials:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在此场景中，您可以使用包含独特加密凭证的独特固件映像，在您的供应链中批量供应HBS集线器群。
- en: As a device maker of the HBS hub, first, you will associate the CA of your choice
    with AWS IoT Core using a supported API. This CA will manage the chain of trust
    and create and validate the cryptographic credentials (such as certificates or
    certificate signing requests) for the entire fleet of devices.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 作为HBS集线器的设备制造商，首先，您将使用支持的API将您选择的CA与AWS IoT Core关联起来。这个CA将管理信任链，并为整个设备群创建和验证加密凭证（如证书或证书签名请求）。
- en: Then, you will create a provisioning template, which, essentially, is a configuration
    file that holds the instruction for the AWS IoT identity service to create a thing
    (or the virtual representation) for the fleet of HBS hub devices. This template
    will include different input parameters such as `ThingName`, `SerialNumber`, and
    **Certificate Signing Requests** (**CSRs**) that will lead to the creation of
    IoT resources such as the virtual thing, device metadata, certificates, and policies.
    You can refer to the template shown on the official *Internet of things on AWS*
    blog, titled *Deploy Fleets Easily with AWS IoT Device Management Services* ([https://aws.amazon.com/blogs/iot/deploy-fleets-easily-with-aws-iot-device-management-services/](https://aws.amazon.com/blogs/iot/deploy-fleets-easily-with-aws-iot-device-management-services/)).
    The template can be found in the *Create Provisioning Template* section.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，您将创建一个配置模板，本质上是一个配置文件，它包含了 AWS IoT 身份服务创建事物（或虚拟表示）的指令，用于 HBS 中心设备群的批量部署。这个模板将包括不同的输入参数，如
    `ThingName`、`SerialNumber` 和 **证书签名请求**（**CSRs**），这将导致创建物联网资源，如虚拟事物、设备元数据、证书和政策。您可以参考官方
    *AWS 上的物联网* 博客上显示的模板，标题为 *使用 AWS IoT 设备管理服务轻松部署设备群* ([https://aws.amazon.com/blogs/iot/deploy-fleets-easily-with-aws-iot-device-management-services/](https://aws.amazon.com/blogs/iot/deploy-fleets-easily-with-aws-iot-device-management-services/))。该模板可在
    *创建配置模板* 部分找到。
- en: 'The next step is to generate cryptographic credentials, such as the private
    keys and CSRs, through preferred tool chains (such as **OpenSSL**). Following
    this, create an input file with a list of devices and cryptographic credentials,
    which will be fed to the provisioning template. The input file, in its simplest
    form, might look like this:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是生成加密凭据，如私钥和 CSR，通过首选的工具链（如 **OpenSSL**）。在此之后，创建一个包含设备列表和加密凭据的输入文件，这些文件将被输入到配置模板中。这个输入文件在最简单的形式下可能看起来像这样：
- en: '[PRE0]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Now, the time has arrived to invoke an API to create all these virtual devices
    (that is, things), in bulk, in the IoT device registry on the cloud along with
    its respective cryptographic credentials (such as the certificates or CSRs) that
    are signed by the CA. Once this step is complete, a token exchange role needs
    to be created, and these things need to be associated with Greengrass-specific
    constructs such as a Greengrass core, a thing group, and a configuration file
    (`config.yaml`) that is required for the installation process.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，是时候调用 API 来创建所有这些虚拟设备（即事物），在云端的物联网设备注册表中批量创建，以及相应的由 CA 签署的加密凭据（如证书或 CSR）。一旦这一步完成，就需要创建一个令牌交换角色，并将这些事物与
    Greengrass 特定的结构相关联，例如 Greengrass 核心组件、事物组以及安装过程中所需的配置文件（`config.yaml`）。
- en: 'Following this, you will inject the credentials generated in the earlier steps,
    which include the private key from *step 3* and the signed certificate from *step
    4*, into your firmware. This updated firmware, often referred to as the golden
    image, is then shared with your assembly team (either in-house or a contract manufacturer).
    The assembly team will flash this image onto the device part of the manufacturing
    workflow:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此之后，您将注入之前步骤中生成的凭据，包括来自 *步骤 3* 的私钥和来自 *步骤 4* 的已签名证书，到您的固件中。这个更新的固件通常被称为金盘镜像，然后与您的组装团队（无论是内部团队还是合同制造商）共享。组装团队将把这个镜像闪存到制造工作流程中的设备部分：
- en: '![Figure 9.4 – Bulk provisioning with embedded credentials'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 9.4 – 嵌入凭据的大规模配置'
- en: '](img/Figure_09_04.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_09_04.jpg)'
- en: Figure 9.4 – Bulk provisioning with embedded credentials
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.4 – 嵌入凭据的大规模配置
- en: This approach is pretty common with microcontrollers running an RTOS since incremental
    updates are not supported (yet) with those hardwares. However, for the connected
    HBS hub, it's more agile and operationally efficient to decouple the firmware
    image from the crypto credentials.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法对于运行 RTOS 的微控制器来说相当常见，因为这些硬件（目前）不支持增量更新。然而，对于连接的 HBS 中心，将固件镜像与加密凭据解耦在操作上更为灵活和高效。
- en: 'That''s where this second option comes in. Here, you will still generate the
    things and unique credentials from your CA in the same way as you did in the previous
    step, but you will not inject it into the firmware. Instead, you will develop
    an intelligent firmware that can accept credentials over different interfaces
    such as **secure shell** (**SSH**), a **network file system** (**NFS**), or a
    **serial connection**. As a best practice, it''s also common to store the credentials
    in a separate chip such as a secure element or a **trusted platform module** (**TPM**).
    Additionally, the firmware can use a public key cryptography standards interface
    (such as *PKCS#11*) to retrieve the keys and certificates as required by the firmware
    or other local applications in real time. At the time of writing this book, Greengrass
    v2 is awaiting support for TPM, although it was a supported feature in Greengrass
    v1:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是第二个选项的用武之地。在这里，你仍然会像上一步一样从你的证书机构生成事物和唯一的凭证，但你不会将其注入到固件中。相反，你将开发一个智能固件，它可以接受通过不同接口（如
    **安全壳** (**SSH**), **网络文件系统** (**NFS**), 或 **串行连接**)提供的凭证。作为最佳实践，通常还会将凭证存储在单独的芯片中，如安全元素或
    **可信平台模块** (**TPM**)。此外，固件可以使用公钥加密标准接口（如 *PKCS#11*）实时检索固件或其他本地应用程序所需的密钥和证书。在撰写本书时，Greengrass
    v2 正在等待对 TPM 的支持，尽管它曾是 Greengrass v1 的支持功能：
- en: '![Figure 9.5 – Bulk provisioning with the injection interface'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 9.5 – 使用注入接口进行批量配置'
- en: '](img/Figure_09_05.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_09_05.jpg)'
- en: Figure 9.5 – Bulk provisioning with the injection interface
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.5 – 使用注入接口进行批量配置
- en: 'Let us take a look at how to go about the second option:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何进行第二个选项：
- en: Once the device assembly is complete with the golden image that contains the
    necessary configurations and credentials, the product reaches the hands of the
    customer through different distribution channels. When the customer switches on
    the device and it wakes up for the first time, the bootstrapping process kicks
    off.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦设备组装完成，包含必要的配置和凭证的金色镜像，产品将通过不同的分销渠道到达客户手中。当客户打开设备并首次唤醒时，引导过程开始。
- en: The bootstrapping will instantiate various local processes (or *daemons*), that
    is, the firmware instructions. One of those processes includes registration with
    AWS IoT Identity services where the device will connect to the cloud endpoint
    and exchange the embedded credentials part of the TLS mutual authentication. Considering
    the things, certificates, and policies are already created as a prerequisite to
    the assembly, the device is fully operational if the mutual authentication is
    successful.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 引导过程将实例化各种本地进程（或 *守护进程*），即固件指令。其中之一包括与 AWS IoT Identity 服务进行注册，设备将连接到云端点并交换
    TLS 互信中嵌入的凭证部分。考虑到事物、证书和政策已经作为组装的先决条件创建，如果互信成功，设备将完全运行。
- en: Scenario 2 – HBS hubs with shared claims are provisioned just in time
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 场景 2 – 具有共享声明的 HBS 中心在需要时进行配置
- en: 'Let''s consider the following scenario; your devices might not have the capability
    to accept unique credentials at the time of manufacturing. Or it''s cost-prohibitive
    for your organization to undertake the operational overhead of embedding unique
    credentials in each HBS hub in your supply chain. This is where another pattern
    emerges, referred to as fleet provisioning by claim, where, as a device maker,
    you can embed a non-unique shared credential (referred to as claim) in your fleet.
    However, we recommend that you do not share the same claim for the entire fleet,
    rather only a percentage of it to reduce the blast radius in the case of any security
    issues. Take a look at the following steps:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑以下场景；你的设备在制造时可能没有接受唯一凭证的能力。或者，对于你的组织来说，在供应链中的每个 HBS 中心中嵌入唯一凭证的操作成本过高。这就是另一种模式出现的地方，被称为按声明的批量配置，其中，作为设备制造商，你可以在你的设备系列中嵌入一个非唯一的共享凭证（称为声明）。然而，我们建议你不要为整个设备系列共享相同的声明，而只共享其中的一部分，以减少任何安全问题的爆炸半径。请看以下步骤：
- en: As a first step, the firmware along with a fleet provisioning plugin and a shared
    certificate (that is, claim) is loaded by the contract manufacturer on the device
    without performing any customization. The fleet provisioning by claim approach
    uses a templated methodology that is similar to the previous scenario to provision
    the required cloud resources. You can refer to a sample template that is provided
    in AWS's documentation, called *Set up AWS IoT fleet provisioning for Greengrass
    core devices* ([https://docs.aws.amazon.com/greengrass/v2/developerguide/fleet-provisioning-setup.html#create-provisioning-template](https://docs.aws.amazon.com/greengrass/v2/developerguide/fleet-provisioning-setup.html#create-provisioning-template)).
    The primary difference is that all of these resources are provisioned just in
    time, where each device initiates the bootstrapping process from their current
    location over being imaged in bulk in a manufacturing facility.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This approach also supports a pre-provisioning hook feature in which a lambda
    function can be invoked to validate different parameters or perform pre-provisioning
    logic. For example, it can be as simple as overriding a parameter to more complex
    validations such as checking whether the claim certificate is part of a revocation
    list:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Here, when the hub wakes up and connects to AWS IoT for the first time, the
    claim certificate is exchanged for permanent X.509 credentials that have been
    signed by the CA (AWS or BYO). This is where the fleet provisioning plugin helps,
    as it allows the device to publish and subscribe to the required **MQ telemetry
    transport** (**mqtt**) topics, accept the unique credentials, and persist in a
    secure type of storage:'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 9.6 – Fleet provisioning with shared claims'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/Figure_09_06.jpg)'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 9.6 – Fleet provisioning with shared claims
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Following this, the device must also disconnect from the previous session it
    initiated with the shared claim and reconnect with the unique credentials.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Word of Caution
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Fleet provisioning by claim poses security risks if the shared claims are not
    protected through the supply channels.
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Once the devices have been provisioned, the next step is to organize them to
    ease the management throughout its life cycle. The Greengrass core devices can
    be organized into thing groups, which is the construct for organizing a fleet
    of devices within the AWS IoT ecosystem. A **thing group** can be either static
    or dynamic in nature. As their name suggests, static groups allow the organization
    of devices based on non-changing attributes such as the product type, the manufacturer,
    the serial number, the production date, and more.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, static groups permit building a hierarchy of devices with parent
    and child devices that can span up to seven layers. For example, querying a group
    of washing machine sensors within a serial number range that belongs to company
    XYZ can be useful to identify devices that need to be recalled due to a production
    defect.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: In comparison, dynamic groups are created using indexed information such as
    the connectivity status, registry metadata, or device shadow. Therefore, the membership
    of dynamic groups is always changing. That is the reason dynamic groups are not
    associated with any device hierarchy; for example, querying a group of HBS devices
    that are connected at a point in time and have a firmware version of v1\. This
    result can allow a fleet operator to push a firmware update notification to the
    respective owners.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 相比之下，动态组是通过索引信息创建的，例如连接状态、注册元数据或设备阴影。因此，动态组的成员总是变化的。这就是为什么动态组不与任何设备层次结构相关联的原因；例如，查询在某个时间点连接且固件版本为v1的HBS设备组。这个结果可以让车队运营商向相应的所有者推送固件更新通知。
- en: Another advantage of using thing groups is the ability to assign fleet permissions
    (that is, policies) at the device group level, which then cascades to all the
    devices in that hierarchy. This eases the overhead of managing policies at each
    device level. Concurrently, though, it's possible to have device-specific policies,
    and the AWS IoT Identity service will automatically assess the least-privileged
    level of access permitted between the group and device level during the authentication
    and authorization workflow.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 使用物组的优势之一是能够在设备组级别分配车队权限（即策略），然后这些策略会级联到该层次结构中的所有设备。这简化了在每个设备级别管理策略的负担。同时，尽管如此，仍然可以拥有针对特定设备的策略，AWS
    IoT身份服务将在身份验证和授权工作流程中自动评估组与设备级别之间允许的最小权限访问级别。
- en: Now you have a good understanding of how to provision and organize the HBS hubs
    using different approaches. Next, let's discuss how to manage the fleet once it
    has been rolled out.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经很好地了解了如何使用不同的方法配置和组织HBS集线器。接下来，让我们讨论一旦推出如何管理车队。
- en: Managing your device fleet at scale
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在规模上管理您的设备车队
- en: Although it might be easier to monitor a handful of devices, managing a fleet
    of devices at scale can turn out to be an operational nightmare. Why? Well, this
    is because IoT devices (such as the HBS hub) are not just deployed in a controlled
    perimeter (such as a data center). As you should have gathered by now, these devices
    can be deployed anywhere, such as home, office, business locations, that might
    have disparate power utilization, network connectivity, and security postures.
    For example, there can be times when the devices operate offline and are not available
    over a public or private network due to the intermittent unavailability of WI-FI
    connectivity in that premises. Therefore, as an IoT professional, you have to
    consider various scenarios and plan in advance for managing your fleet at scale.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然监控少量设备可能更容易，但管理规模化的设备车队可能会变成一个运营噩梦。为什么？好吧，这是因为物联网设备（如HBS集线器）不仅部署在受控的区域内（如数据中心）。正如您现在应该已经了解到的，这些设备可以部署在任何地方，例如家庭、办公室、商业地点，这些地方可能具有不同的电力消耗、网络连接和安全状态。例如，可能会有设备离线运行，无法通过公共或私人网络访问，因为该场所的Wi-Fi连接间歇性不可用。因此，作为一名物联网专业人士，您必须考虑各种场景，并提前规划如何规模化地管理您的车队。
- en: 'In the context of a connected HBS hub, device management can help you achieve
    the following:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在连接的HBS集线器背景下，设备管理可以帮助您实现以下目标：
- en: Capture actionable information from the real world.
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从现实世界中捕获可操作的信息。
- en: Increase efficiency of the solution by capturing anomalies early.
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过早期捕获异常来提高解决方案的效率。
- en: Optimize cost using predictive or preventive maintenance.
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过预测性或预防性维护来优化成本。
- en: Prevent the theft of intellectual IP or unauthorized access.
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 防止知识产权被盗或未经授权的访问。
- en: Build a continuous feedback loop to improve customer experience.
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 建立一个持续的反馈循环来提高客户体验。
- en: Generate additional revenue streams with more data insights.
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过更多数据洞察来生成额外的收入来源。
- en: 'So, as you might have gathered, developing an IoT solution and rolling it out
    to the customers is just the beginning. It''s necessary to govern the entire life
    cycle of the solution to achieve the business outcomes cited earlier. Therefore,
    device management can also be considered as a bigger umbrella for the following
    activities:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如您所了解的，开发和推出物联网解决方案只是开始。为了实现之前提到的业务成果，有必要治理整个解决方案的生命周期。因此，设备管理也可以被视为以下活动的更大范畴：
- en: Provision
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置
- en: Organize
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组织
- en: Monitor
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 监控
- en: Maintain
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 维护
- en: Diagnose
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 诊断
- en: 'The following is a diagram showing the IoT Device Management workflow:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 下图显示了物联网设备管理的工作流程：
- en: '![Figure 9.7 – The IoT Device Management workflow'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_09_07.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.7 – The IoT Device Management workflow
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: We have already discussed the first three topics in the preceding section in
    the context of Greengrass. Therefore, we will move on to focus on the remaining
    activities.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: Monitor
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Monitoring the Greengrass-enabled HBS hubs and the associated devices will
    be key in achieving a reliable, highly available, and performant IoT workload.
    You should have a mechanism to collect monitoring data from the edge solution
    to debug failures when they occur. Greengrass supports the collection of *system
    health telemetry* and *custom metrics*, which are diagnostic data points to monitor
    the performance of critical operations of different components and applications
    on the Greengrass core devices. The following is a list of the different ways
    to gather this data:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: '`$local/greengrass/telemetry`), you can act locally on that data on your core
    device, even when there is intermittent connectivity to the cloud.'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Optionally, the component can be configured to publish telemetry data to the
    *mqtt* topic in the cloud.
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is a continuous stream of system telemetry data published to a local topic
    in near real time. The default configuration is every 60 seconds.
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are no costs if the telemetry data is published locally, but charges apply
    when it is pushed to the cloud.
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A **telemetry agent** is another option that you can use to collect local telemetry
    data, which is enabled by default for all Greengrass core devices:'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This agent collects telemetry data and publishes it to the cloud on a best effort
    basis through **Amazon EventBridge**, which is a serverless event bus service.
  id: totrans-101
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Data starts to flow as soon as the Greengrass core device is up and running.
    By default, the telemetry agent aggregates telemetry data every hour and publishes
    it to the cloud every 24 hours.
  id: totrans-102
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There are no data transfer charges since the messages are published to reserved
    topics on AWS IoT Core.*   A *telemetry agent* publishes the following metrics
    natively:'
  id: totrans-103
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: System memory and CPU utilization
  id: totrans-104
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The total number of file descriptors, where each descriptor represents an open
    file
  id: totrans-105
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The number of components in various states, such as the following:'
  id: totrans-106
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Installed, new, and starting
  id: totrans-107
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Running, stopping, and finishing
  id: totrans-108
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Errored, broken, and stateless
  id: totrans-109
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Later, in the hands-on section, you will collect these metrics and process them
    on the cloud.
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '*CloudWatch metrics* is a Greengrass component that allows you to publish custom
    metrics to Amazon CloudWatch:'
  id: totrans-111
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Any custom component such as lambda functions or containers deployed on the
    core device can publish the custom metrics to a local topic (`cloudwatch`/`metric`/`put`).
  id: totrans-112
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The components can be configured to specify different publish intervals (in
    seconds), so the metrics can be published with or without batching. For example,
    with lambda, the default batching window is 10 seconds and the maximum wait time
    could be 900 seconds.
  id: totrans-113
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'So, if you think of scenarios where you have to collect metrics from the sensors
    and actuators associated with the hub and not just from the gateways, a custom
    application can retrieve those data points and publish them locally or to cloud
    endpoints for monitoring purposes.*   *Log manager* is a Greengrass component
    that can be deployed to your Greengrass core device to collect and, optionally,
    upload logs to Amazon CloudWatch Logs:'
  id: totrans-114
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Although metrics can help reflect the state of the device, logs are critical
    for troubleshooting exceptions or failures.
  id: totrans-115
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For the real-time observability of logs, Greengrass offers various log files.
    Some of these you might have already used by now, such as the following:'
  id: totrans-116
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Greengrass.log**: This is a log file that is used to view real-time information
    about nucleus and component deployments. For example, with an HBS hub, this log
    file can report the errors, exceptions, and failures of the nucleus software,
    which you (or the customer) can analyze for downtimes or malfunctions.'
  id: totrans-117
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Component.log**: This is a log file(s) to view real-time information about
    the components running on the core device.'
  id: totrans-118
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Main.log**: This is a log file that handles the component life cycle information.'
  id: totrans-119
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The log manager component can upload logs in various frequencies. The default
    configuration for log manager is to upload new logs every 5 minutes to AWS CloudWatch.
    Additionally, it's possible to configure a lower upload interval for more frequent
    uploads. The log format is also configurable between text format and JSON format.
  id: totrans-120
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Log manager also supports file rotation every hour or when the file size limit
    has exceeded. The default size limit for the log files is 1 MB and the disk size
    is 10 MB and is fully configurable. To optimize log sizes, it''s also a best practice
    to use different verbosity levels for different environments (such as development,
    testing, and production):'
  id: totrans-121
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: For example, you can choose DEBUG-level logs to help with troubleshooting in
    non-production environments or ERROR-level logs to reduce the number of logs that
    a device generates in a production environment. This choice also helps to optimize
    costs.
  id: totrans-122
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: As you are collecting all of these data points (metrics and logs) from the HBS
    hub and publishing them to the cloud, the next step is to allow different personas
    such as fleet operators (or other downstream businesses) to consume this information.
    This can be achieved through CloudWatch, which natively offers various capabilities
    related to logging insights, generating dashboards, setting up alarms, and more.
    If your organization has already standardized on a monitoring solution (such as
    **Splunk**, **Sumologic**, **Datadog**, or others) CloudWatch also supports that
    integration.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: Finally, in the control plane, Greengrass integrates with **AWS CloudTrail**
    to log access events related to service APIs, IAM users, and roles. These access
    logs can be used to determine additional details about Greengrass access such
    as the IP address from which a request was made, who the request was made by,
    and when it was made, which can be useful for various security and operational
    needs.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: Maintenance
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The previously explained services, such as Amazon CloudWatch (or a third-party
    solution), can be robust enough to generate the various insights required to monitor
    the health of IoT workloads. However, another common ask from IoT administrators
    or fleet operators is to have a single-pane-of-glass view that allows them to
    consume a comprehensive set of information from the device fleet, to quickly troubleshoot
    operational events.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, consider a scenario where customers are complaining that their
    HBS hubs are malfunctioning. As a fleet operator, you can observe a lot of connection
    drops and high-resource utilization from the dashboard. Therefore, you look up
    the logs (on a device or in the cloud) and identify it as a memory leak issue
    due to a specific component (such as *Aggregator*). Based on your operation playbook,
    you need to identify whether this is a one-off issue or whether more devices in
    the fleet are showing similar behavior. Therefore, you need an interface to search,
    identify, and visualize the metrics such as the device state, device connection,
    battery level across the fleet, or on a set filtered by user location. Here comes
    the need for a fleet management solution such as **AWS Fleet Hub**, which allows
    the creation of a fully managed web application to cater to various personas using
    a no-code approach. In our scenario, this web application can help the operators
    to view, query, and interact with a fleet of connected HBS hubs in near real time
    and troubleshoot the issue further. In addition to monitoring, the operators can
    also respond to alarms and trigger a remote operation **over the air** (**OTA**)
    to remediate deployed devices from a single interface. AWS Fleet Hub applications
    also enable the following:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: '*Integration* with existing identity and access management systems such as
    Active Directory and LDAP, which allow role-based access to different personas
    such as the fleet operators, fleet managers, device makers, third parties, and
    IT operators who are interacting with the HBS hub in some way. Additionally, this
    allows these users to use **single sign-on** (**SSO**) and access a fleet hub
    from any browser on a desktop, tablet, or smartphone.'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Aggregation* of data from other services such as AWS IoT Fleet Indexing, Amazon
    CloudWatch, or **Amazon Simple Notification Service** (**SNS**). The IoT Fleet
    Indexing service helps to index, search, query, and aggregate data from device
    registry, device shadow, and device connectivity events. Also, it''s possible
    to create custom fields. CloudWatch metrics can be used in combination with these
    searchable fields to create alarms. Finally, Amazon SNS can notify different personas
    when an alarm threshold has been breached.'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In summary, these capabilities from Fleet Hub can allow an organization to respond
    more quickly to different operational events and, thereby, improve customer experience.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: Diagnose
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the preceding scenario, you learned how a fleet operator can stay well informed
    about the operational events in near real time through a single-pane-of-glass
    view. However, what about diagnosing the issue further if the remote actions through
    Fleet Hub are not sufficient to remediate the identified issue? For example, an
    operator might have triggered a remote action to restart the aggregator component
    or the HBS hub itself, but that did not solve the problem for the end consumer.
    Therefore, as a next step, the operator is required to gain direct access to the
    hub or associated sensors for further troubleshooting. Traditionally, in such
    a situation, a company will schedule an appointment with a technician, which means
    additional cost and wait time for the customers. That's where a remote diagnostics
    capability such as **AWS IoT Secure Tunneling** can be useful. This is an AWS
    Managed service that allows fleet operators to gain additional privileges (such
    as SSH or RDP access) over a secure tunnel to the destination device.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: 'The secure tunneling component of Greengrass enables secure bidirectional communication
    between an operator workstation and a Greengrass-enabled device (such as the HBS
    hub) even if it''s behind restricted firewalls. This is made possible because
    the remote operations navigate through a secure tunnel under the hood. Moreover,
    the devices will also continue to use the same cryptographic credentials (that
    is, *X509 certificates*) used in telemetry for this remote operation. The only
    other dependency from the client side (that is, the **fleet operator**) is the
    installation of proxy software on the laptop or a web browser. That is because
    this proxy software makes the magic happen by allowing the exchange of temporary
    credentials (that is, **access tokens**) with the tunneling service when the sessions
    are initiated. The following diagram shows the workflow of secure tunneling:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.8 – The secure tunneling workflow for diagnostics'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_09_08.jpg)'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.8 – The secure tunneling workflow for diagnostics
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: For our scenario, the source refers to the workstation of the fleet operator,
    the destination refers to the connected HBS hub, and the secure tunnel service
    is managed by AWS.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have gained a good understanding of how to better monitor, maintain,
    and diagnose edge devices, let's get our hands dirty in the final section of this
    chapter.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: Getting hands-on with Fleet Hub architecture
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, you will learn how to use the nucleus emitter and the telemetry
    agent to capture various metrics and logs from edge devices and visualize those
    through Amazon CloudWatch and AWS IoT Fleet Hub. The following is the architecture
    that shows the different services and steps you will complete during the lab:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.9 – Hands-on operational hub'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_09_09.jpg)'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.9 – Hands-on operational hub
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table lists the services that you will use in this exercise:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.10 – The services in scope for this exercise'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Table_09_10.jpg)'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.10 – The services in scope for this exercise
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: 'Your objective in this hands-on section includes the following steps, as depicted
    in the preceding architecture:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: Build an operational dashboard using AWS IoT Fleet Hub.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Deploy a nucleus emitter component and collect metrics through the telemetry
    from the edge.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Deploy a log manager component and stream the logs to Cloudwatch.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Visualize the results on IoT Fleet Hub and CloudWatch.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's take a look at the preceding steps, in more detail, next.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: Building the cloud resources
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this section, you will learn how to set up a Fleet Hub application that
    can be used to monitor the metrics from the connected HBS hub. Perform the following
    steps:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **AWS IoT Core Console** and select **Fleet Hub**. Choose **Get
    started** and click on **Create Application**.
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This will prompt you to set up **Single Sign-On** using AWS SSO. If you have
    not used this service in the past, create a user with the necessary information.
    You will receive an invitation via email that you need to accept along with instructions
    about how to set up your password. Click on **Next**.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now you need to configure indexing with AWS IoT data. As discussed earlier,
    Fleet Hub gives you a single-pane-of-glass view by aggregating information from
    different sources. This is where you set all of these integrations.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Manage Indexing** in the **Fleet indexing** section. This will open
    up the AWS IoT settings page. Click on **Manage Indexing** again and enable all
    the available options such as **Thing Indexing** and **Thing Group Indexing**.
    Optionally, you can also create custom search fields if you wish. Click on **Update**.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate back to the Fleet Hub setup screen and the settings should be in active
    status now. Click on **Next**.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create an application role and an application with a name of your choice. Click
    on the view policy permissions to understand the access provided to the application.
    You should notice that you are providing access to the IoT, CloudWatch, and SNS
    resources for Fleet Hub to integrate with all of these sources, as mentioned earlier.
    Click on **Create application**.
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the **Applications** tab of Fleet Hub, click on the application URL once
    it shows active. For the first access, this will prompt you to add an SSO user.
    Click on that and add the user you created earlier. Click on **Add selected users**.
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once it's complete, click on the application URL again, proceed to the web dashboard,
    and sign in with the credentials you configured in *step 2*. Click on the application
    icon, and it should open up the dashboard for you.
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Congratulations! You are all set up with the Fleet Hub dashboard!
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: Although we have only created one user for this lab, you can integrate AWS SSO
    with your organization's identity management systems such as Active Directory.
    This will allow role-based access to the dashboard for different personas. Ideally,
    this configuration will fall under the purview of identity engineers and won't
    be the responsibility of the IoT professionals.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, let''s set up the routing rules for ingesting the telemetry data from
    the HBS hub to the cloud:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the **Amazon EventBridge** console ([https://go.aws/3xcB2T7](https://go.aws/3xcB2T7)),
    and click on **Create rule**.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose a name and description for the rule.
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `AWS`.
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Service name: `Greengrass`.'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Event type: `Greengrass Telemetry Data`.'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Keep the **Select an Event Bus** section in its default setting.
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under `/aws/events/`<replace this with a name of your choice>
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Keep everything else in its default setting and click on **Create**.
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Great work! EventBridge is all set to ingest telemetry data and publish it to
    the CloudWatch group.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: We will revisit these dashboards again at the end of the lab to visualize the
    collected data from the hubs. For now, let's switch gears to configure and deploy
    the edge connectors on Greengrass.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: Deploying the components from the cloud to the edge
  id: totrans-178
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this section, you will learn how to deploy the **Nucleus Emitter** and **Log
    Manager** agents to a Greengrass-enabled HBS hub, to publish the health telemetry
    to the cloud. Perform the following steps:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: Please navigate to the Amazon Greengrass console and choose `aws.greengrass.telemetry.NucleusEmitter`
    and `aws.greengrass.LogManager` components. Feel free to click on **View recipe**
    to review the configuration of this component.
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Next** by keeping all the previous components along with the preceding
    two components selected. Keep the other options in their default settings in the
    following screens and choose **Deploy**.
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Visualizing the results
  id: totrans-182
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now you have set up the fleet hub and deployed the agents on the edge, you
    can visualize the health telemetry data using the following steps:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **AWS IoT Core Console**, click on **Fleet Hub**, and select the
    application you created earlier in the lab.
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Device list** section, click on the Greengrass-enabled HBS hub device.
    You will be able to view the status of the device along with various other attributes
    such as the field attributes, the device shadow file (that is, the device state
    if configured), the group to which the device belongs, and the history of the
    deployments (that is, the jobs).
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate back to the home screen. Feel free to play with the search and filter
    options provided at the top of the screen to refine your results. Generally, this
    is useful when you have a large number of gateways and associated devices. You
    can also flip to the **Summary** section to visualize the total number of devices
    by thing types, the thing groups, and the reasons to disconnect.
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on **Create alarm**. This will help you set up notifications for the
    following breach:'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Choose a field: **Disconnect Reason**.'
  id: totrans-188
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Choose an aggregation type: **Count**.'
  id: totrans-189
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose a **Period** setting of **5 minutes**, then click on **Next**.
  id: totrans-190
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose the **Metric** setting to be **Greater/Equal than 1**, then click on
    **Next**.
  id: totrans-191
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Assuming you have only one device gateway, you can increase the count if you
    have more.
  id: totrans-192
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Configure the notify and alarm details, then click on **Next and Submit**.
  id: totrans-193
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Therefore, as a fleet operator, you can now visualize the health of your device
    fleet along with being alarmed for threshold breaches.
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Navigate to the **AWS CloudWatch** console, click on **Logs** and then select
    **Log groups**.
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Search for and click on the `/aws/events/<replace this with a name of your choice>
    log group`, and visualize the log streams.
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It might take some time to populate, but the log streams should show the telemetry
    data collected from the Greengrass hub device.
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Feel free to play with **Log Insights**, which allows you to analyze the logs
    through a query interface.
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: So far, you have learned how to operate a fleet of Greengrass-enabled devices
    using AWS native solutions. These patterns are also applicable for non-Greengrass
    devices, for example, the devices that leverage other devices' SDKs (such as *AWS
    IoT Device SDK* or *FreeRTOS*).
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: Challenge Zone
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: I would like to throw a quick challenge for you to determine how you can trigger
    an OTA job from AWS IoT Fleet Hub to a specific HBS hub device. This can be useful
    when you have to push an update such as a configuration file that is required
    during an operational event. Best of luck!
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
- en: Let's wrap up this chapter with a quick summary and a set of knowledge-check
    questions.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-203
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, you were introduced to design patterns and the best practices
    of onboarding, managing, and maintaining a fleet of devices. These practices can
    help you to provision and operate millions (or more) of connected devices across
    different geographic locations. Additionally, you learned how to diagnose edge
    devices remotely for common problems or tunnel in securely for advanced troubleshooting.
    Following this, you implemented an edge-to-cloud architecture, leveraging various
    AWS-built components     and services. This allowed you to collect health telemetry from the HBS hubs,
    which a fleet operator can visualize through dashboards, be notified through alarms,
    or take action as required.'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
- en: In the next and final chapter, we will summarize all the key lessons that you
    have learned throughout the book (and more), so you are all set to build well-architected
    solutions for the real world.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: Knowledge check
  id: totrans-206
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before moving on to the next chapter, test your knowledge by answering these
    questions. The answers can be found at the end of the book:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
- en: 'True or false: Device registration and device activation are the same.'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the different ways to leverage a CA with AWS IoT Greengrass?
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Is there an option to provision devices in real time? If yes, then what is it?
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'True or false: Metrics and logs are the only data points required to monitor
    an IoT workload.'
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What do you think is a benefit of having a single-pane-of-glass view for your
    entire fleet of devices?
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'What is a mitigation strategy for remote troubleshooting devices without sending
    technicians if required? (Hint: think tunnel.)'
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What components does AWS IoT Greengrass provide to collect system health telemetry?
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'True or false: Aggregation of metrics on the edge device is not possible. It
    can only be done in the cloud.'
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: References
  id: totrans-216
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Take a look at the following resources for additional information on the concepts
    discussed in this chapter:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: 'Whitepaper on *Device Manufacturing and Provisioning with X.509 Certificates
    in AWS IoT Core*: [https://d1.awsstatic.com/whitepapers/device-manufacturing-provisioning.pdf](https://d1.awsstatic.com/whitepapers/device-manufacturing-provisioning.pdf)'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When to use AWS IoT device management: [https://aws.amazon.com/iot-device-management/](https://aws.amazon.com/iot-device-management/)'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The AWS IoT Greengrass launch of fleet management capabilities: [https://aws.amazon.com/about-aws/whats-new/2021/08/aws-iot-greengrass-v-2-4/](https://aws.amazon.com/about-aws/whats-new/2021/08/aws-iot-greengrass-v-2-4/)'
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Fleet Hub for AWS IoT Device Management: [https://docs.aws.amazon.com/iot/latest/fleethubuserguide/what-is-aws-iot-monitor.html](https://docs.aws.amazon.com/iot/latest/fleethubuserguide/what-is-aws-iot-monitor.html)'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'AWS IoT thing groups: [https://docs.aws.amazon.com/iot/latest/developerguide/thing-groups.html](https://docs.aws.amazon.com/iot/latest/developerguide/thing-groups.html)'
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
