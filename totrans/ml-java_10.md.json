["```py\nFileIterator iterator = \n  new FileIterator(new File[]{new File(\"path-to-my-dataset\")}, \n  new TxtFilter(), \n  FileIterator.LAST_DIRECTORY); \n```", "```py\nAP881218 local-news A 16-year-old student at a private \n   Baptist...  \nAP880224 business The Bechtel Group Inc. offered in 1985 to...  \nAP881017 local-news A gunman took a 74-year-old woman hostage...  \nAP900117 entertainment Cupid has a new message for lovers \n   this...  \nAP880405 politics The Reagan administration is weighing w...  \n```", "```py\n^(\\\\S*)[\\\\s,]*(\\\\S*)[\\\\s,]*(.*)$\n```", "```py\nCsvIterator iterator = new CsvIterator ( \nfileReader, \nPattern.compile(\"^(\\\\S*)[\\\\s,]*(\\\\S*)[\\\\s,]*(.*)$\"), \n  3, 2, 1)); \n```", "```py\nArrayList<Pipe> pipeList = new ArrayList<Pipe>(); \n```", "```py\npipeList.add(new Input2CharSequence(\"UTF-8\")); \npipeList.add( new CharSequenceLowercase() );\n```", "```py\nPattern tokenPattern = \nPattern.compile(\"[\\\\p{L}\\\\p{N}_]+\"); \n\npipeList.add(new CharSequence2TokenSequence(tokenPattern)); \n```", "```py\npipeList.add(new TokenSequenceRemoveStopwords(new File(stopListFilePath), \"utf-8\", false, false, false));\n```", "```py\npipeList.add(new TokenSequence2FeatureSequence()); \n```", "```py\npipeList.add(new Target2Label()); \n```", "```py\npipeList.add(new PrintInputAndTarget()); \n```", "```py\nSerialPipes pipeline = new SerialPipes(pipeList); \n```", "```py\nimport cc.mallet.types.*; \nimport cc.mallet.pipe.*; \nimport cc.mallet.pipe.iterator.*; \nimport cc.mallet.topics.*; \n\nimport java.util.*; \nimport java.util.regex.*; \nimport java.io.*; \n\npublic class TopicModeling { \n\n  public static void main(String[] args) throws Exception { \n\nString dataFolderPath = \"data/bbc\"; \nString stopListFilePath = \"data/stoplists/en.txt\"; \n```", "```py\nArrayList<Pipe> pipeList = new ArrayList<Pipe>(); \npipeList.add(new Input2CharSequence(\"UTF-8\")); \nPattern tokenPattern = Pattern.compile(\"[\\\\p{L}\\\\p{N}_]+\"); \npipeList.add(new CharSequence2TokenSequence(tokenPattern)); \npipeList.add(new TokenSequenceLowercase()); \npipeList.add(new TokenSequenceRemoveStopwords(new File(stopListFilePath), \"utf-8\", false, false, false)); \npipeList.add(new TokenSequence2FeatureSequence()); \npipeList.add(new Target2Label()); \nSerialPipes pipeline = new SerialPipes(pipeList); \n```", "```py\nFileIterator folderIterator = new FileIterator( \n    new File[] {new File(dataFolderPath)}, \n    new TxtFilter(), \n    FileIterator.LAST_DIRECTORY);\n```", "```py\nInstanceList instances = new InstanceList(pipeline);\n```", "```py\ninstances.addThruPipe(folderIterator); \n```", "```py\nint numTopics = 5; \nParallelTopicModel model =  \nnew ParallelTopicModel(numTopics, 0.01, 0.01); \n```", "```py\nmodel.addInstances(instances); \nmodel.setNumThreads(4);\n```", "```py\nmodel.setNumIterations(1000); \nmodel.estimate(); \n```", "```py\n    0 0,06654  game england year time win world 6 \n    1 0,0863  year 1 company market growth economy firm \n    2 0,05981  people technology mobile mr games users music \n    3 0,05744  film year music show awards award won \n    4 0,11395  mr government people labour election party blair \n\n    [beta: 0,11328] \n    <1000> LL/token: -8,63377\n\n    Total time: 45 seconds\n\n```", "```py\n// Split dataset \nInstanceList[] instanceSplit= instances.split(new Randoms(), new \n   double[] {0.9, 0.1, 0.0}); \n```", "```py\n// Use the first 90% for training \nmodel.addInstances(instanceSplit[0]); \nmodel.setNumThreads(4); \nmodel.setNumIterations(50); \nmodel.estimate(); \n```", "```py\n// Get estimator \nMarginalProbEstimator estimator = model.getProbEstimator(); \n```", "```py\ndouble loglike = estimator.evaluateLeftToRight( \n  instanceSplit[1], 10, false, null);); \nSystem.out.println(\"Total log likelihood: \"+loglike); \n```", "```py\n    Total time: 3 seconds\n    Topic Evaluator: 5 topics, 3 topic bits, 111 topic mask\n    Total log likelihood: -360849.4240795393\n```", "```py\nString modelPath = \"myTopicModel\"; \n\n//Save model \nObjectOutputStream oos = new ObjectOutputStream( \nnew FileOutputStream (new File(modelPath+\".model\"))); \noos.writeObject(model); \noos.close();    \n\n//Save pipeline \noos = new ObjectOutputStream( \nnew FileOutputStream (new File(modelPath+\".pipeline\"))); \noos.writeObject(pipeline); \noos.close(); \n```", "```py\nString modelPath = \"myTopicModel\"; \n\n//Load model \nObjectInputStream ois = new ObjectInputStream( \n  new FileInputStream (new File(modelPath+\".model\"))); \nParallelTopicModel model = (ParallelTopicModel) ois.readObject(); \nois.close();    \n\n// Load pipeline \nois = new ObjectInputStream( \n  new FileInputStream (new File(modelPath+\".pipeline\"))); \nSerialPipes pipeline = (SerialPipes) ois.readObject(); \nois.close();    \n```", "```py\nArrayList<Pipe> pipeList = new ArrayList<Pipe>(); \npipeList.add(new Input2CharSequence(\"UTF-8\")); \nPattern tokenPattern = Pattern.compile(\"[\\\\p{L}\\\\p{N}_]+\"); \npipeList.add(new CharSequence2TokenSequence(tokenPattern)); \npipeList.add(new TokenSequenceLowercase()); \npipeList.add(new TokenSequenceRemoveStopwords(new \n   File(stopListFilePath), \"utf-8\", false, false, false)); \npipeList.add(new TokenSequence2FeatureSequence()); \npipeList.add(new FeatureSequence2FeatureVector()); \npipeList.add(new Target2Label()); \nSerialPipes pipeline = new SerialPipes(pipeList); \n```", "```py\nFileIterator folderIterator = new FileIterator( \n    new File[] {new File(dataFolderPath)}, \n    new TxtFilter(), \n    FileIterator.LAST_DIRECTORY); \n```", "```py\nInstanceList instances = new InstanceList(pipeline); \n```", "```py\ninstances.addThruPipe(folderIterator); \n```", "```py\nClassifierTrainer classifierTrainer = new NaiveBayesTrainer(); \nClassifier classifier = classifierTrainer.train(instances); \n```", "```py\nInstanceList testInstances = new \n   InstanceList(classifier.getInstancePipe()); \nfolderIterator = new FileIterator( \n    new File[] {new File(testFolderPath)}, \n    new TxtFilter(), \n    FileIterator.LAST_DIRECTORY); \n```", "```py\ntestInstances.addThruPipe(folderIterator); \n```", "```py\nTrial trial = new Trial(classifier, testInstances); \n```", "```py\nSystem.out.println( \n  \"F1 for class 'spam': \" + trial.getF1(\"spam\")); \nSystem.out.println( \n  \"Precision:\" + trial.getPrecision(1)); \nSystem.out.println( \n  \"Recall:\" + trial.getRecall(1)); \n```", "```py\n    F1 for class 'spam': 0.9731800766283524\n    Precision: 0.9694656488549618\n    Recall: 0.9769230769230769\n\n```"]