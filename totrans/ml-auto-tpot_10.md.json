["```py\n    import numpy as np\n    import pandas as pd\n    import matplotlib.pyplot as plt\n    import seaborn as sns\n    from sklearn.datasets import load_breast_cancer\n    from matplotlib import rcParams\n    rcParams['figure.figsize'] = (14, 7)\n    rcParams['axes.spines.top'] = False\n    rcParams['axes.spines.right'] = False\n    ```", "```py\n    data = load_breast_cancer()\n    data.keys()\n    ```", "```py\n    features = data.data\n    target = data.target\n    df =\\\n    pd.DataFrame(data=features,columns=data.feature_names)\n    df['target'] = target\n    df.sample(8)\n    ```", "```py\n    df.isnull().sum()\n    ```", "```py\n    def make_count_chart(column, title, ylabel, xlabel, y_offset=0.12, x_offset=700):\n        ax = df[column].value_counts().plot(kind='bar', fontsize=13, color='#4f4f4f')\n        ax.set_title(title, size=20, pad=30)\n        ax.set_ylabel(ylabel, fontsize=14)\n        ax.set_xlabel(xlabel, fontsize=14)\n\n        for i in ax.patches:\n            ax.text(i.get_x() + x_offset, i.get_height()\\\n     + y_offset, f'{str(round(i.get_height(), 2))}',\\\n     fontsize=15)\n        return ax\n    ```", "```py\n    make_count_chart(\n        column='target',\n        title=\\\n    'Number of malignant (1) vs benign (0) cases',\n        ylabel='Malignant? (0 = No, 1 = Yes)',\n        xlabel='Count',\n        y_offset=10,\n        x_offset=0.22\n    )\n    ```", "```py\n    np.corrcoef(df['mean area'], df['target'])[1][0]\n    ```", "```py\n    corr_with_target = []\n    for col in df.columns[:-1]:\n        corr = np.corrcoef(df[col], df['target'])[1][0]\n        corr_with_target.append({'Column': col, 'Correlation': corr})\n\n    corr_df = pd.DataFrame(corr_with_target)\n    corr_df = \\\n    corr_df.sort_values(by='Correlation', ascending=False)\n    ```", "```py\n    plt.figure(figsize=(10, 14))\n    plt.barh(corr_df['Column'], corr_df['Correlation'], color='#4f4f4f')\n    plt.title('Feature correlation with the target variable', fontsize=20)\n    plt.xlabel('Feature', fontsize=14)\n    plt.ylabel('Correlation', fontsize=14)\n    plt.show()\n    ```", "```py\n    def draw_histogram(data, columns, n_rows, n_cols):\n        fig = plt.figure(figsize=(12, 18))\n        for i, var_name in enumerate(columns):\n            ax = fig.add_subplot(n_rows, n_cols, i + 1)\n            sns.histplot(data=data, x=var_name, hue='target')\n            ax.set_title(f'Distribution of {var_name}')\n        fig.tight_layout()\n        plt.show()\n    draw_histogram(df, df.columns[:-1], 9, 4)\n    ```", "```py\ntpot_config = {\n    'tpot.nn.PytorchLRClassifier': {\n        'learning_rate': [1e-3, 1e-2, 1e-1, 0.5, 1.]\n    }\n}\n```", "```py\n    from sklearn.model_selection import train_test_split\n    X = df.drop('target', axis=1)\n    y = df['target']\n    X_train, X_test, y_train, y_test =train_test_split(\\\n    X, y, test_size=0.25, random_state=42)\n    ```", "```py\n    from sklearn.linear_model import LogisticRegression\n    from sklearn.metrics import confusion_matrix, accuracy_score\n    lr_model = LogisticRegression()\n    lr_model.fit(X_train, y_train)\n    lr_preds = lr_model.predict(X_test)\n    print(confusion_matrix(y_test, lr_preds))\n    print()\n    print(accuracy_score(y_test, lr_preds))\n    ```", "```py\n    from tpot import TPOTClassifier\n    classifier_lr = TPOTClassifier(\n        config_dict='TPOT NN',\n        template='PytorchLRClassifier',\n        generations=2,\n        random_state=42,\n        verbosity=3\n    )\n    classifier_lr.fit(X_train, y_train)\n    ```", "```py\n    classifier_lr.fitted_pipeline_\n    ```", "```py\n    from sklearn.metrics import confusion_matrix,\\\n     accuracy_score\n    tpot_lr_preds = classifier_lr.predict(X_test)\n    print(confusion_matrix(y_test, tpot_lr_preds))\n    print()\n    print(accuracy_score(y_test, tpot_lr_preds))\n    ```", "```py\n    classifier_mlp = TPOTClassifier(\n        config_dict='TPOT NN',\n        template='PytorchMLPClassifier',\n        generations=2,\n        random_state=42,\n        verbosity=3\n    )\n    ```", "```py\n    classifier_mlp.fit(X_train, y_train)\n    ```", "```py\n    classifier_mlp.fitted_pipeline_\n    ```", "```py\n    from sklearn.metrics import confusion_matrix,\\\n     accuracy_score\n    tpot_mlp_preds = classifier_mlp.predict(X_test)\n    print(confusion_matrix(y_test, tpot_mlp_preds))\n    print()\n    print(accuracy_score(y_test, tpot_mlp_preds))\n    ```", "```py\n    custom_config = {\n        'tpot.builtins.PytorchMLPClassifier': {\n            'learning_rate': [1e-1, 0.5, 1.],\n            'batch_size': [16, 32],\n            'num_epochs': [10, 15],\n        }\n    }\n    ```", "```py\n    classifier_custom = TPOTClassifier(\n        config_dict=custom_config,\n        template='PytorchMLPClassifier',\n        generations=2,\n        random_state=42,\n        verbosity=3\n    )\n    classifier_custom.fit(X_train, y_train)\n    ```", "```py\nclassifier_custom.fitted_pipeline_\n```"]