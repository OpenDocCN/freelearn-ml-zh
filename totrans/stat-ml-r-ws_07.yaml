- en: '6'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Effective Reporting with R Markdown
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The previous chapter covered the different types of graphing techniques, all
    of which are static. In this chapter, we will take this one step further and discuss
    how to generate graphs and tables using **R** **Markdown** consistently.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this chapter, you will have learned the fundamentals of R Markdown
    reports, including how to add, fine-tune, and customize figures and tables to
    make interactive and effective reports. You will also know how to generate effective
    R Markdown reports that can add some flying colors to your presentations.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Fundamentals of R Markdown
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating a financial analysis report
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Customizing R Markdown reports
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To complete the exercises in this chapter, you will need to have the latest
    versions of the following packages:'
  prefs: []
  type: TYPE_NORMAL
- en: '`rmarkdown`, version 2.17'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`quantmod`, version 0.4.20'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`lubridate`, version 1.8.0'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Please note that the versions of the packages mentioned in the preceding list
    are the latest ones while I am writing this book. All the code and data for this
    chapter is available at [https://github.com/PacktPublishing/The-Statistics-and-Machine-Learning-with-R-Workshop/tree/main/Chapter_6](https://github.com/PacktPublishing/The-Statistics-and-Machine-Learning-with-R-Workshop/tree/main/Chapter_6).
  prefs: []
  type: TYPE_NORMAL
- en: Fundamentals of R Markdown
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: R Markdown is a formatting language that can help you effectively and dynamically
    reveal insights from the data and generate reports in the form of a PDF, an HTML
    file, or a web application. It allows you to tidy up your analyses via various
    forms of graphs and tables covered earlier in this book, and present them in a
    consistent, neat, and transparent manner that facilitates easy reproduction by
    another analyst. Either in academia or industry, demonstrating reproducibility
    in your analysis is an essential quality of your work. When others can easily
    reproduce and understand what you did in your analysis, it makes communication
    much easier and your work more trustworthy. Since all outputs are code-based,
    the ability to easily reproduce your work also makes it convenient to fine-tune
    the analysis when you present your initial work and come back with further modifications
    to be done, a common iterative process in real-life data analysis.
  prefs: []
  type: TYPE_NORMAL
- en: Using R Markdown, you can present your code along with the output (including
    graphs and tables) and add surrounding text as context. It is similar to Jupyter
    Notebook using Python, yet it has advantages backed by the tidyverse ecosystem.
  prefs: []
  type: TYPE_NORMAL
- en: R Markdown is based on the Markdown syntax, which is a simple-to-follow markup
    language that allows the user to create web page-like files from plain text files.
    Let’s start by downloading the R Markdown package and creating a simple starter
    file.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started with R Markdown
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'R Markdown allows us to create efficient reports to summarize our analyses
    and communicate the results to end users. The first thing we need to get R Markdown
    up and running in RStudio is to download the `rmarkdown` package and load it into
    the console, which can be done via the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'R Markdown has a dedicated type of file that ends with `.Rmd`. To create an
    R Markdown file, we can select **File** | **New File** | **R Markdown** in RStudio;
    this will make the window shown in *Figure 6**.1* appear. The left panel contains
    the different formats we can choose from, where **Document** is a collection of
    common file types such as HTML, PDF, and Word, **Presentation** renders the R
    Markdown file in a presentation mode similar to PowerPoint, **Shiny** adds an
    interactive **Shiny** component (interactive widgets) in the R Markdown file,
    and **From Template** provides a list of starter templates to accelerate report
    generation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.1 – Creating an R Markdown file](img/B18680_06_001.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.1 – Creating an R Markdown file
  prefs: []
  type: TYPE_NORMAL
- en: Let’s start with the `my first rmarkdown`) and clicking `.Rmd` file with a basic
    set of instructions will be created. Not all of this information will be used,
    so feel free to delete unnecessary code in the script after you gain familiarity
    with the common components.
  prefs: []
  type: TYPE_NORMAL
- en: 'An R Markdown document consists of three components: the metadata for the file,
    the text for the report, and the code for the analysis. We’ll look at each of
    these components in the following sections.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting to know the YAML header
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The top of the R Markdown script, as shown in *Figure 6**.2*, is a set of metadata
    header information wrapped by two sets of three hyphens, `---`, and contained
    in the YAML header. YAML, a human-readable data serialization language, is a syntax
    for hierarchical data structures commonly used for configuration files. In this
    case, the default information includes the title, output format, and date, represented
    as key-value pairs. The information contained in the header impacts the whole
    document. For example, to generate a PDF file, we could simply switch from `html_document`
    to `pdf_document` in the output configuration. This is the minimal set of information
    needed in a header, although you are encouraged to add the author information
    (via the same initial window in *Figure 6**.2*) to show the authorship of your
    work:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.2 – YAML header of the default R Markdown script](img/B18680_06_002.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.2 – YAML header of the default R Markdown script
  prefs: []
  type: TYPE_NORMAL
- en: 'With the header information in place, and assuming all the additional code
    is deleted, we can compile the R Markdown file into an HTML file by clicking on
    the `test.Rmd`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.3 – Converting the R Markdown file into an HTML file using the Knit
    button](img/B18680_06_003.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.3 – Converting the R Markdown file into an HTML file using the Knit
    button
  prefs: []
  type: TYPE_NORMAL
- en: Knitting the R Markdown file will generate an HTML file that opens in a separate
    preview window. It will also save an HTML file named `test.html` in the same folder
    as the R Markdown file.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will learn more about the structure and syntax of the main body of
    an R Markdown file, including text formatting and handling code chunks.
  prefs: []
  type: TYPE_NORMAL
- en: Formatting textual information
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Textual information is of equal, if not higher, importance than the code you
    write for analysis and modeling. Good code is often well documented, and this
    is even more critical when your end user is non-technical. Putting proper background
    information, assumption, context, and decision-making processes in place is an
    essential companion to your technical analysis, besides transparency and consistency
    of the analysis. In this section, we will review the common commands we can use
    to format text.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 6.1 – formatting text in R Markdown
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this exercise, we will generate the text shown in *Figure 6**.4* using R
    Markdown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.4 – Sample text generated as an HTML file using R Markdown](img/B18680_06_004.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.4 – Sample text generated as an HTML file using R Markdown
  prefs: []
  type: TYPE_NORMAL
- en: 'The text includes a header, some words in italics or bold, a mathematical expression,
    and four unordered list items. Let’s look at how to generate this text:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Write a level-one header using the `#` symbol:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note that the more hashes we use, the smaller the header will be. Remember to
    place the hash at the start of the line and add a single space after the hash
    and before the text.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Write the middle sentence by wrapping the text in `* *` for italics and `$$`
    for mathematical expressions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Generate the unordered list by starting each item with `*` and wrapping the
    text in `** **` for bold:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Note that we can easily switch the output file from HTML to PDF, simply by
    changing `output: html_document` to `output: pdf_document`. The resulting output
    is shown in *Figure 6**.5*:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 6.5 – Sample text generated as a PDF file using R Markdown](img/B18680_06_005.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.5 – Sample text generated as a PDF file using R Markdown
  prefs: []
  type: TYPE_NORMAL
- en: Knitting the R Markdown file into a PDF document may require you to install
    additional packages, such as LaTeX. When an error pops up complaining that the
    package is unavailable, simply go to the console and install this package before
    knitting again. We can also use the drop-down menu from the **Knit** button to
    choose the desired output format.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, the value for the date key in the YAML header is a string. If you
    would like to display it as the current date automatically, you can replace the
    string with `` "` [PRE4]` [PRE5]`, which separate code from text in the R Markdown
    file. A code chunk is also accompanied by the corresponding rules and specifications
    on the language used and other configurations inside curly braces, `{}`. Code
    chunks allow us to render code-based outputs or display the code in the report.
  prefs: []
  type: TYPE_NORMAL
- en: 'An example code chunk is shown in the following code snippet, where we indicate
    the type of language as R and perform an assignment operation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]{r}'
  prefs: []
  type: TYPE_NORMAL
- en: a = 1
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Besides typing in the commands for a code chunk, we can also click on the code
    icon (starting with the letter `c`) in the toolbar and choose the option for the
    R language, as shown in *Figure 6**.6*. Note that you can also use other languages
    such as Python, thus making R Markdown a versatile tool that allows us to use
    different programming languages in one working file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.6 – Inserting an R code chunk](img/B18680_06_006.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.6 – Inserting an R code chunk
  prefs: []
  type: TYPE_NORMAL
- en: 'Each chunk of code can be executed by clicking on the green arrow at the right-hand
    side of each chunk, with the result shown just below the code chunk. For example,
    *Figure 6**.7* shows the output after performing the assignment and printing the
    variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.7 – Executing a code chunk](img/B18680_06_007.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.7 – Executing a code chunk
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also specify other options in the curly braces of a code chunk. For
    example, we may not want to include a particular code chunk in the output of the
    resulting HTML file. To hide the code itself and only show the output of the code,
    we can add `echo=FALSE` to the accompanying configuration of the code chunk, as
    shown in the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]{r echo=FALSE}'
  prefs: []
  type: TYPE_NORMAL
- en: a = 1
  prefs: []
  type: TYPE_NORMAL
- en: a
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '*Figure 6**.8* shows the two different types of output in the resulting HTML
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.8 – Showing and hiding the source code in the HTML file](img/B18680_06_008.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.8 – Showing and hiding the source code in the HTML file
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition, when we load a package in the current session, we may get a warning
    message in the console. In R Markdown, such a warning message will also appear
    in the resulting HTML. To hide the warning message, we can add `warning=FALSE`
    to the configuration. For example, in the following code snippet, we are hiding
    the warning message while loading the `dplyr` package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]{r warning=FALSE}'
  prefs: []
  type: TYPE_NORMAL
- en: library(dplyr)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '*Figure 6**.9* compares the two scenarios when loading a package with or without
    showing the warning message:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.9 – Hiding the warning message while loading a package](img/B18680_06_009.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.9 – Hiding the warning message while loading a package
  prefs: []
  type: TYPE_NORMAL
- en: With these building blocks covered, we will conduct a case study on generating
    a financial analysis report using Google stock price data in the following section.
  prefs: []
  type: TYPE_NORMAL
- en: Generating a financial analysis report
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will analyze Google’s stock data from Yahoo! Finance. To
    facilitate data download and analysis, we will use the `quantmod` package, which
    is designed to assist quantitative traders in developing, testing, and deploying
    statistically based trading models. Let’s install the package and load it into
    the console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Next, we will generate an HTML report using R Markdown and cover the basics
    of data querying and analysis.
  prefs: []
  type: TYPE_NORMAL
- en: Getting and displaying the data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s go through an exercise to generate an initial report that automatically
    queries stock data from Yahoo! Finance and displays the basic information in the
    dataset.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 6.2 – generating the base report
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this exercise, we will set up an R Markdown file, download Google’s stock
    price data, and display general information about the dataset:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create an empty R Markdown file named `Financial analysis` and set the corresponding
    `output`, `date`, and `author` in the YAML file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a code chunk to load the `quantmod` package and query Google’s stock
    price data using the `getSymbols()` function. Store the resulting data in `df`.
    Also, hide all messages in the resulting HTML file and add the necessary text
    for illustration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]{r warning=FALSE, message=FALSE}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: library(quantmod)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: df = getSymbols("GOOG", auto.assign=FALSE)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, we specify `warning=FALSE` to hide the warning message when loading the
    package and `message=FALSE` to hide the messages that are generated when calling
    the `getSymbols()` function. We also specify `auto.assign=FALSE` to assign the
    resulting DataFrame to the `df` variable. Also, note that we can add text as comments
    inside the code chunks, which will be treated as typical comments that start with
    a hash sign, `#`, are.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Count the total number of rows and display the first and last two rows of the
    DataFrame via three separate code chunks. Add corresponding text to serve as documentation
    for the code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]{r}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: nrow(df)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE17]{r}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: head(df, 2)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE18]{r}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: tail(df, 2)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note that we use `` ` ` `` to indicate inline code within the text.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'At this point, we can knit the R Markdown file to observe the resulting HTML
    file, as shown in *Figure 6**.10*. It is a good practice to check the output frequently
    so that any potential unexpected error can be corrected in time:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 6.10 – Displaying the HTML output](img/B18680_06_010.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.10 – Displaying the HTML output
  prefs: []
  type: TYPE_NORMAL
- en: 'Plot the time series of the daily closing price using the `chart_Series()`
    function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]{r}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: chart_Series(df$GOOG.Close,name="Google Stock Price")
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Adding this code chunk to the R Markdown document and knitting it generates
    the same output file with an additional graph, as shown in *Figure 6**.11*. The
    `chart_Series()` function is a utility function for plotting that’s provided by
    `quantmod`. We can also plot it based on the `ggplot` package, as discussed in
    the previous chapter:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 6.11 – Daily stock price of Google since 2017](img/B18680_06_011.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.11 – Daily stock price of Google since 2017
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition to generating figures from code, we can include links and images
    to the output. This image can be loaded either from a local drive or from the
    web. In the following code snippet, we are adding a line of text with a hyperlink
    to an example image and showing the image in the next line by directly reading
    it from GitHub:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Note that we added a hyperlink to the word `here` by wrapping it inside square
    brackets, followed by the hyperlink in parentheses. To add an image, we can add
    an exclamation mark in front of the square brackets. We can also specify the size
    of the image by adding `{width=250px}` after the image link.
  prefs: []
  type: TYPE_NORMAL
- en: 'Knitting the previous code in R Markdown generates *Figure 6**.12*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.12 – Visualizing an image from GitHub](img/B18680_06_012.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.12 – Visualizing an image from GitHub
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will perform data analysis and display the result as text.
  prefs: []
  type: TYPE_NORMAL
- en: Performing data analysis
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With the dataset loaded, we can perform data analysis and present insights in
    the resulting output document, all generated automatically and consistently. For
    example, we can present high-level statistics about the stock price for a particular
    period of interest, such as the average, maximum, and minimum prices. These statistics
    can be embedded into text, making the presentation style more natural and self-contained.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 6.3 – performing simple data analysis
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this exercise, we will extract the year-to-date highest, average, and lowest
    stock prices of Google. To achieve this, we will first transform the dataset from
    its original `xts` format into a `tibble` object, then summarize these statistics
    using `dplyr`. Finally, we will display this information within the text of the
    HTML document:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Load the `dplyr` and `tibble` packages and convert `df` from `xts` into `tibble`
    format. Store the resulting `tibble` object in `df_tbl`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, we will use the `as_tibble()` function to convert the `xts` object into
    `tibble` format, followed by the `add_column()` function to insert a date column
    at the beginning of the DataFrame. The date information is available as an index
    in the original `xts` object.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Extract the year-to-date highest, average, and lowest closing prices since
    2022\. Store the results in `max_ytd`, `avg_ytd`, and `min_ytd`, respectively:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: For each statistic, we first filter by date, followed by extracting the relevant
    statistic based on the `GOOG.Close` column. Finally, we return the result as a
    single scalar value instead of a DataFrame.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Display these statistics in text:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'As shown in *Figure 6**.13*, knitting the document outputs the statistics in
    the HTML file, which allows us to reference the code results in the HTML report:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 6.13 – Extracting simple statistics and displaying them in HTML form](img/B18680_06_013.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.13 – Extracting simple statistics and displaying them in HTML form
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will look at adding plots to the HTML report.
  prefs: []
  type: TYPE_NORMAL
- en: Adding plots to the report
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Adding plots to the HTML report works the same way as in the RStudio console.
    We could simply write the plotting code in a chunk, and the graph will appear
    in the resulting report after we’ve knitted the R Markdown file. Let’s go through
    an exercise to visualize the stock price using the `ggplot2` package we covered
    in the previous chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 6.4 – adding plots using ggplot2
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this exercise, we will visualize the average monthly closing price for the
    past three years as line plots. We will also explore different configuration options
    for the figure in the report:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a dataset that contains the average monthly closing price between 2019
    and 2021:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, we first create two additional columns called `Month` and `Year` that
    are derived based on the date column using the `month()` and `year()` functions
    from the `lubridate` package. We also convert `Month` into a factor-typed column
    with levels between 1 and 12 so that this column can follow a particular sequence
    when we plot the monthly price later. Similarly, we set `Year` as a character-typed
    column to ensure that it will not be interpreted by `ggplot2` as a numeric variable.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Next, we filter the `df_tbl` variable by `Year`, group by `Year` and `Month`,
    and calculate the average `GOOG.Close` value, followed by using the `ungroup()`
    function to remove the group structure in the resulting DataFrame saved in `tmp_df`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Plot the monthly average closing price each year as a separate line in a line
    chart. Change the corresponding figure label and text size:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Running the previous commands in a code chunk will generate the output shown
    in *Figure 6**.14*. Note that we have also added a header and some text to point
    out the purpose and context of the code. The code and the output are shown automatically
    after knitting the R Markdown file, thus making R Markdown a great option for
    producing transparent, engaging, and reproducible technical reports:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 6.14 – Adding a plot to show the monthly average closing price for
    the past three years](img/B18680_06_014.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.14 – Adding a plot to show the monthly average closing price for the
    past three years
  prefs: []
  type: TYPE_NORMAL
- en: We can also configure the size and position of the figure.
  prefs: []
  type: TYPE_NORMAL
- en: 'Shrink the size of the figure by setting `fig.width=5` and `fig.height=3` in
    the configuration section of the code chunk and show the output graph:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]{r fig.width=5, fig.height=3}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: p
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Knitting the document with these added commands produces *Figure 6**.15*:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 6.15 – Changing the size of the figure](img/B18680_06_015.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.15 – Changing the size of the figure
  prefs: []
  type: TYPE_NORMAL
- en: 'Align the position of the figure so that it’s at the center of the document:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]{r fig.width=5, fig.height=3, fig.align=''center''}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: p
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Knitting the document with these added commands produces *Figure 6**.16*:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 6.16 – Changing the position of the figure](img/B18680_06_016.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.16 – Changing the position of the figure
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a caption to the plot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]{r fig.width=5, fig.height=3, fig.align=''center'', fig.cap='' Figure
    1.1 Monthly average closing price between 2019 and 2021''}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: p
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Knitting the document with these added commands produces *Figure 6**.17*:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 6.17 – Adding a caption to the figure](img/B18680_06_017.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.17 – Adding a caption to the figure
  prefs: []
  type: TYPE_NORMAL
- en: Besides graphs, tables are also commonly used to present and summarize information
    in a report. We’ll look at how to generate tables in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Adding tables to the report
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Representing information in a table is a good complement to its graph counterpart
    when the report user is interested in delving further into the details or even
    using it for further analysis. For end users, being able to access and use the
    data in the report plays a pivotal role as this gives them more control over the
    already preprocessed information in the report. In other words, an R Markdown-based
    HTML report not only summarizes information as graphs for easy digestion but also
    provides detailed information on specific data sources as tables to facilitate
    ad hoc analysis.
  prefs: []
  type: TYPE_NORMAL
- en: We can add tables using the `kable()` function from the `knitr` package, the
    backbone engine that supports executing code in each code chunk, and then perform
    dynamic report generation upon knitting the R Markdown document. Note that it
    is a good practice to preprocess and clean the data before presenting it as a
    table via `kable()`; the task should only be visualizing a clean and organized
    table.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s go through an exercise to look at how to add clean tables to the report.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 6.5 – adding tables using kable()
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this exercise, we will show the top five rows of the `tmp_df` variable in
    a table, then demonstrate different configuration options for displaying the table:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Show the top five rows of `tmp_df` using the `kable()` function from the `knitr`
    package:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]{r}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: library(knitr)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: kable(tmp_df[1:5,])
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Knitting the document with these added commands produces *Figure 6**.18*:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 6.18 – Adding a table to the report](img/B18680_06_018.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.18 – Adding a table to the report
  prefs: []
  type: TYPE_NORMAL
- en: 'Change the column names of the table using the `col.names` argument:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]{r}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: kable(tmp_df[1:5,], col.names=c("Year", "Month", "Average closing price"))
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Knitting the document with these added commands produces *Figure 6**.19*:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 6.19 – Changing column names in the table](img/B18680_06_019.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.19 – Changing column names in the table
  prefs: []
  type: TYPE_NORMAL
- en: We can also modify the column alignment within the table using the `align` argument.
    The default column alignment is on the right for the numeric column and the left
    for all other types of columns. As shown in *Figure 6**.19*, the `Year` (character
    typed) and `Month` (factor typed) columns are aligned on the left, and `Average
    closing price` (numeric) is aligned on the right. The alignment is specified column-wise
    using a single letter, with `"l"` denoting aligning to the left, `"c"` to the
    center, and `"r"` to the right.
  prefs: []
  type: TYPE_NORMAL
- en: 'Align all columns to the center using the `align` argument:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]{r}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: kable(tmp_df[1:5,], col.names=c("Year", "Month", "Average closing price"), align="ccc")
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Here, we specify `align="ccc"` to align all columns to the center. Knitting
    the document with these added commands produces *Figure 6**.20*:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 6.20 – Centering all the columns in the table](img/B18680_06_020.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.20 – Centering all the columns in the table
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, we can also add a caption to the table.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a caption to the table using the `caption` argument:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]{r}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: kable(tmp_df[1:5,], col.names=c("Year", "Month", "Average closing price"), align="ccc",
    caption="Table 1.1 Average monthly closing price")
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Code chunk options
  prefs:
  - PREF_IND
  - PREF_H1
  type: TYPE_NORMAL
- en: Display both code and result be default.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Execute the code chunk but hide both code and result in the output by setting
    `include=FALSE`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Display the code and result.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Execute the code chunk and only display the result in the output by setting
    `echo=FALSE`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Do not execute the code chunk and only display the code in the output by setting
    `eval=FALSE`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: All results are in separate blocks by default.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Collapsing all results in one block by setting `collapse=TRUE`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Hide warning by setting `warning=FALSE`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Set global options.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: '---'
  prefs: []
  type: TYPE_NORMAL
- en: 'title: "Financial analysis"'
  prefs: []
  type: TYPE_NORMAL
- en: 'output:'
  prefs: []
  type: TYPE_NORMAL
- en: 'html_document:'
  prefs: []
  type: TYPE_NORMAL
- en: 'toc: true'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: "2022-10-12"'
  prefs: []
  type: TYPE_NORMAL
- en: 'author: "Liu Peng"'
  prefs: []
  type: TYPE_NORMAL
- en: '---'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: '---'
  prefs: []
  type: TYPE_NORMAL
- en: 'title: "Financial analysis"'
  prefs: []
  type: TYPE_NORMAL
- en: 'output:'
  prefs: []
  type: TYPE_NORMAL
- en: 'html_document:'
  prefs: []
  type: TYPE_NORMAL
- en: 'toc: true'
  prefs: []
  type: TYPE_NORMAL
- en: 'toc_float: true'
  prefs: []
  type: TYPE_NORMAL
- en: 'date: "2022-10-12"'
  prefs: []
  type: TYPE_NORMAL
- en: 'author: "Liu Peng"'
  prefs: []
  type: TYPE_NORMAL
- en: '---'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: '---'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'title: "Financial analysis"'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'html_document:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'toc: true'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'toc_float: true'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'date: "2022-10-12"'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'author: "Liu Peng"'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'params:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'year: 2020'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '---'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Generating report using parameters
  prefs:
  - PREF_IND
  - PREF_H1
  type: TYPE_NORMAL
- en: Summary statistics of year `r params$year`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '---'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'title: "Financial analysis"'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'html_document:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'toc: true'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'toc_float: true'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'date: "2022-10-12"'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'author: "Liu Peng"'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'params:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'year: 2021'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '---'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Summary statistics of year `r params$year` and quarter `r params$quarter`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Customizing report style
  prefs:
  - PREF_IND
  - PREF_H1
  type: TYPE_NORMAL
- en: <style>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: body {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'color: blue;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'background-color: #F5F5F5;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: </style>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Customizing report style
  prefs:
  - PREF_IND
  - PREF_H1
  type: TYPE_NORMAL
- en: <style>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: body {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'color: blue;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'background-color: #F5F5F5;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: pre {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'color: red;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: </style>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Customizing report style
  prefs:
  - PREF_IND
  - PREF_H1
  type: TYPE_NORMAL
- en: <style>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: body {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'color: blue;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'background-color: #F5F5F5;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: pre {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'color: red;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '#TOC {'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'color: green;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'font-size: 16px;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'border-color: green;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: </style>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Customizing report style
  prefs:
  - PREF_IND
  - PREF_H1
  type: TYPE_NORMAL
- en: <style>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: body {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'color: blue;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'background-color: #F5F5F5;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: pre {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'color: red;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '#TOC {'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'color: green;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'font-size: 16px;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'border-color: green;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '#header {'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'color: orange;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'opacity: 0.8;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'font-size: 20px;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: </style>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '```'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Note that the style for the header is specified using `#header` without any
    space in between. Knitting the document with these commands produces *Figure 6**.37*:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 6.37 – Changing the color, font size, and opacity of the header in
    the report](img/B18680_06_037.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.37 – Changing the color, font size, and opacity of the header in the
    report
  prefs: []
  type: TYPE_NORMAL
- en: That concludes this exercise. Now, let’s wrap up this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we introduced R Markdown, a flexible, transparent, and consistent
    report-generation tool. We started by going over the fundamentals of R Markdown,
    including the basic building blocks such as YAML headers and code chunks, followed
    by text formatting techniques.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we covered a case study using Google’s stock data. After downloading the
    stock data from the web, we generated a report to summarize the statistics of
    the daily closing price, added plots and tables to the report, performed data
    processing, and displayed the results with different styling options. We also
    explored a few different ways to configure a code chunk.
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, we discussed how to customize the R Markdown reports. The topics we
    covered included adding a table of contents to the report, creating repetitive
    reports using parameters in the YAML header, and changing the visual style of
    the report by editing the visual properties of different components using CSS.
  prefs: []
  type: TYPE_NORMAL
- en: With the next chapter, we will begin *Part 2* of this book and introduce the
    fundamentals of linear algebra and calculus using R.
  prefs: []
  type: TYPE_NORMAL
