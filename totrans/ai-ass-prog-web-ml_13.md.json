["```py\nfrom google.colab import drive\n# Mount Google Drive\ndrive.mount('/content/drive') \n```", "```py\nimport pandas as pd\n# Define the file path\nfile_path = '/content/drive/My Drive/Chapter05/Ecommerce Customers.csv'\n# Load the dataset into a DataFrame\necommerce_data = pd.read_csv(file_path)\n# Display the first few rows of the DataFrame\nprint(ecommerce_data.head()) \n```", "```py\nHere is the output -                         Email  \\\n0      mstephenson@fernandez.com   \n1              hduke@hotmail.com   \n2               pallen@yahoo.com   \n3        riverarebecca@gmail.com   \n4  mstephens@davidson-herman.com   \n                                             Address            Avatar  \\\n0       835 Frank Tunnel\\nWrightmouth, MI 82180-9605            Violet   \n1     4547 Archer Common\\nDiazchester, CA 06566-8576         DarkGreen   \n2  24645 Valerie Unions Suite 582\\nCobbborough, D...            Bisque   \n3   1414 David Throughway\\nPort Jason, OH 22070-1220       SaddleBrown   \n4  14023 Rodriguez Passage\\nPort Jacobville, PR 3...  MediumAquaMarine   \n   Avg. Session Length  Time on App  Time on Website  Length of Membership  \\\n0            34.497268    12.655651        39.577668              4.082621   \n1            31.926272    11.109461        37.268959              2.664034   \n2            33.000915    11.330278        37.110597              4.104543   \n3            34.305557    13.717514        36.721283              3.120179   \n4            33.330673    12.795189        37.536653              4.446308   \n   Yearly Amount Spent  \n0           587.951054  \n1           392.204933  \n2           487.547505  \n3           581.852344  \n4           599.406092 \n```", "```py\n# Extract input features (X) and target variable (y)\nX = ecommerce_data[['Avg. Session Length', 'Time on App', 'Time on Website', 'Length of Membership']]\ny = ecommerce_data['Yearly Amount Spent'] \n```", "```py\nfrom sklearn.model_selection import train_test_split\n# Split the data into training and testing sets (80% train, 20% test)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n# Display the shapes of the training and testing sets\nprint(\"Training set shape - X_train:\", X_train.shape, \"y_train:\", y_train.shape)\nprint(\"Testing set shape - X_test:\", X_test.shape, \"y_test:\", y_test.shape) \n```", "```py\nTraining set shape - X_train: (400, 4) y_train: (400,)\nTesting set shape - X_test: (100, 4) y_test: (100,) \n```", "```py\nfrom sklearn.linear_model import LinearRegression\n# Initialize the linear regression model\nmodel = LinearRegression() \n```", "```py\n# Train the linear regression model using the training data\nmodel.fit(X_train, y_train) \n```", "```py\n# Make predictions on the testing data\ny_pred = model.predict(X_test)\n# Evaluate the model's performance\nfrom sklearn.metrics import mean_squared_error, r2_score\n# Calculate Mean Squared Error (MSE)\nmse = mean_squared_error(y_test, y_pred)\n# Calculate R-squared (coefficient of determination)\nr_squared = r2_score(y_test, y_pred)\n# Print the evaluation metrics\nprint(\"Mean Squared Error (MSE):\", mse)\nprint(\"R-squared (Coefficient of Determination):\", r_squared) \n```", "```py\nMean Squared Error (MSE): 109.8637411839399\nR-squared (Coefficient of Determination): 0.9778130629184127 \n```", "```py\nfrom sklearn.linear_model import RidgeCV\n# Initialize the Ridge regression model with cross-validation\nridge_model = RidgeCV(alphas=[0.1, 1.0, 10.0], cv=5)\n# Train the Ridge regression model\nridge_model.fit(X_train, y_train)\n# Make predictions on the testing data\nridge_y_pred = ridge_model.predict(X_test)\n# Evaluate the model's performance\nridge_mse = mean_squared_error(y_test, ridge_y_pred)\nridge_r_squared = ridge_model.score(X_test, y_test)\n# Print the evaluation metrics\nprint(\"Ridge Regression - Mean Squared Error (MSE):\", ridge_mse)\nprint(\"Ridge Regression - R-squared (Coefficient of Determination):\", ridge_r_squared)\nprint(\"Ridge Regression - Best Alpha:\", ridge_model.alpha_) \n```", "```py\nRidge Regression - Mean Squared Error (MSE): 109.82024999312038\nRidge Regression - R-squared (Coefficient of Determination): 0.9778218459464064\nRidge Regression - Best Alpha: 0.1 \n```", "```py\nfrom sklearn.linear_model import LassoCV\n# Initialize the Lasso regression model with cross-validation\nlasso_model = LassoCV(alphas=[0.1, 1.0, 10.0], cv=5)\n# Train the Lasso regression model\nlasso_model.fit(X_train, y_train)\n# Make predictions on the testing data\nlasso_y_pred = lasso_model.predict(X_test)\n# Evaluate the model's performance\nlasso_mse = mean_squared_error(y_test, lasso_y_pred)\nlasso_r_squared = lasso_model.score(X_test, y_test)\n# Print the evaluation metrics\nprint(\"Lasso Regression - Mean Squared Error (MSE):\", lasso_mse)\nprint(\"Lasso Regression - R-squared (Coefficient of Determination):\", lasso_r_squared)\nprint(\"Lasso Regression - Best Alpha:\", lasso_model.alpha_) \n```", "```py\nfrom sklearn.datasets import make_regression\nimport pandas as pd\n# Generate synthetic dataset with 500 samples, 10 features, and increased noise\nX_synthetic, y_synthetic = make_regression(n_samples=500, n_features=10, noise=50, random_state=42)\n# Create a DataFrame from the synthetic dataset\nsynthetic_data = pd.DataFrame(X_synthetic, columns=[f'Feature_{i}' for i in range(1, 11)])\nsynthetic_data['Target'] = y_synthetic\n# Display the first few rows of the synthetic dataset\nprint(synthetic_data.head())\n# Save the synthetic dataset to a CSV file\nsynthetic_data.to_csv('synthetic_dataset.csv', index=False) \n```", "```py\nimport numpy as np\nimport pandas as pd\n# Set random seed for reproducibility\nnp.random.seed(42)\n# Number of samples\nn_samples = 500\n# Generate synthetic input features\navg_session_length = np.random.normal(loc=30, scale=5, size=n_samples)\ntime_on_app = np.random.normal(loc=15, scale=5, size=n_samples)\ntime_on_website = np.random.normal(loc=20, scale=7, size=n_samples)\nlength_of_membership = np.random.normal(loc=3, scale=1, size=n_samples)\n# Generate synthetic target variable (linear combination of input features with noise)\nyearly_amount_spent = 100 + (avg_session_length * 10) + (time_on_app * 20) + (time_on_website * 15) + (length_of_membership * 30) + np.random.normal(loc=0, scale=50, size=n_samples)\n# Create a DataFrame from the synthetic dataset\nsynthetic_data = pd.DataFrame({\n    'Avg. Session Length': avg_session_length,\n    'Time on App': time_on_app,\n    'Time on Website': time_on_website,\n    'Length of Membership': length_of_membership,\n    'Yearly Amount Spent': yearly_amount_spent\n})\n# Display the first few rows of the synthetic dataset\nprint(synthetic_data.head())\n# Save the synthetic dataset to a CSV file\nsynthetic_data.to_csv('synthetic_ecommerce_data.csv', index=False) \n```", "```py\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error, r2_score\n# Load the synthetic dataset\nsynthetic_data = pd.read_csv('synthetic_ecommerce_data.csv')\n# Extract input features (X) and target variable (y)\nX = synthetic_data[['Avg. Session Length', 'Time on App', 'Time on Website', 'Length of Membership']]\ny = synthetic_data['Yearly Amount Spent']\n# Split the dataset into training and testing sets (80% train, 20% test)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n# Initialize the linear regression model\nmodel = LinearRegression()\n# Train the linear regression model using the training data\nmodel.fit(X_train, y_train)\n# Make predictions on the testing data\ny_pred = model.predict(X_test)\n# Evaluate the model's performance\nmse = mean_squared_error(y_test, y_pred)\nr_squared = r2_score(y_test, y_pred)\n# Print the evaluation metrics\nprint(\"Mean Squared Error (MSE):\", mse)\nprint(\"R-squared (Coefficient of Determination):\", r_squared) \n```", "```py\n# Import necessary libraries\nimport pandas as pd  # pandas is used for data manipulation and analysis\nfrom sklearn.model_selection import train_test_split  # This function is used to split data into training and testing sets\nfrom sklearn.linear_model import LinearRegression  # This class is used to perform linear regression\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error  # These functions are used to evaluate the model\n# Load the dataset\ndata = pd.read_csv('/mnt/data/Ecommerce Customers (1).csv')  # Reading the CSV file into a pandas DataFrame\n# Display the first few rows of the dataset to understand its structure\nprint(data.head()) \n```", "```py\n# Selecting only the numerical columns for features\nfeatures = data[['Avg. Session Length', 'Time on App', 'Time on Website', 'Length of Membership']]\n# Selecting the target column which is 'Yearly Amount Spent'\ntarget = data['Yearly Amount Spent']\n# Splitting the dataset into training and testing sets\n# We allocate 80% of the data for training and 20% for testing\nX_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2, random_state=42)\n# Printing the shapes of the training and testing sets to verify the split\nprint(f'Training features shape: {X_train.shape}')\nprint(f'Testing features shape: {X_test.shape}')\nprint(f'Training labels shape: {y_train.shape}')\nprint(f'Testing labels shape: {y_test.shape}') \n```", "```py\n# Initialize the Linear Regression model\nmodel = LinearRegression()\n# Fit the model to the training data\n# This involves finding the best fitting line to the provided data points\nmodel.fit(X_train, y_train)\n# Evaluate the model by predicting on the training set\ntrain_predictions = model.predict(X_train)\n# Calculate the Mean Absolute Error (MAE) on the training set\n# MAE measures the average magnitude of the errors in a set of predictions, without considering their direction\ntrain_mae = mean_absolute_error(y_train, train_predictions)\n# Calculate the Mean Squared Error (MSE) on the training set\n# MSE measures the average of the squares of the errors—that is, the average squared difference between the estimated values and the actual value\ntrain_mse = mean_squared_error(y_train, train_predictions)\n# Printing the errors to understand model performance on the training data\nprint(f'Mean Absolute Error on training data: {train_mae}')\nprint(f'Mean Squared Error on training data: {train_mse}') \n```", "```py\nfrom sklearn.linear_model import LassoCV, RidgeCV\nfrom sklearn.model_selection import cross_val_score\n# Lasso Regression with Cross-Validation\nlasso_cv = LassoCV(alphas=[0.1, 1.0, 10.0], cv=5)  # cv=5 means 5-fold cross-validation\nlasso_cv.fit(X_train, y_train)\nlasso_cv_score = lasso_cv.score(X_test, y_test)\nlasso_cv_mae = mean_absolute_error(y_test, lasso_cv.predict(X_test))\n# Ridge Regression with Cross-Validation\nridge_cv = RidgeCV(alphas=[0.1, 1.0, 10.0], cv=5)\nridge_cv.fit(X_train, y_train)\nridge_cv_score = ridge_cv.score(X_test, y_test)\nridge_cv_mae = mean_absolute_error(y_test, ridge_cv.predict(X_test))\n# Printing results\nprint(f'Lasso CV Score: {lasso_cv_score}, MAE: {lasso_cv_mae}')\nprint(f'Ridge CV Score: {ridge_cv_score}, MAE: {ridge_cv_mae}') \n```", "```py\n# Import necessary libraries\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression, LassoCV, RidgeCV\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error\nfrom sklearn.preprocessing import StandardScaler\n# Mount Google Drive (specific to Google Colab)\nfrom google.colab import drive\ndrive.mount('/content/drive')\n# Load the dataset from Google Drive\nfile_path = '/content/drive/My Drive/Chapter05/Ecommerce Customers.csv'\ndata = pd.read_csv(file_path)\n# Select only the numerical columns for features and the target column\nfeatures = data[['Avg. Session Length', 'Time on App', 'Time on Website', 'Length of Membership']]\ntarget = data['Yearly Amount Spent']\n# Splitting the dataset into training and testing sets (80% train, 20% test)\nX_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2, random_state=42)\n# Standardizing the data\nscaler = StandardScaler()\nX_train_scaled = scaler.fit_transform(X_train)\nX_test_scaled = scaler.transform(X_test)\n# Initialize and fit the Linear Regression model\nmodel = LinearRegression()\nmodel.fit(X_train_scaled, y_train)\n# Lasso Regression with Cross-Validation\nlasso_cv = LassoCV(alphas=[0.01, 0.1, 1.0, 10.0], cv=5)\nlasso_cv.fit(X_train_scaled, y_train)\nlasso_cv_score = lasso_cv.score(X_test_scaled, y_test)\nlasso_cv_mae = mean_absolute_error(y_test, lasso_cv.predict(X_test_scaled))\n# Ridge Regression with Cross-Validation\nridge_cv = RidgeCV(alphas=[0.01, 0.1, 1.0, 10.0], cv=5)\nridge_cv.fit(X_train_scaled, y_train)\nridge_cv_score = ridge_cv.score(X_test_scaled, y_test)\nridge_cv_mae = mean_absolute_error(y_test, ridge_cv.predict(X_test_scaled))\n# Print results\nprint(f'Linear Regression Test MAE: {mean_absolute_error(y_test, model.predict(X_test_scaled))}')\nprint(f'Lasso CV Score: {lasso_cv_score}, MAE: {lasso_cv_mae}')\nprint(f'Ridge CV Score: {ridge_cv_score}, MAE: {ridge_cv_mae}') \n```", "```py\nimport numpy as np\n# Number of samples for the synthetic dataset\nnum_samples = 500\n# Bootstrap the original dataset\nsynthetic_data = data.sample(n=num_samples, replace=True)\n# Add random noise to numeric columns\nnumeric_columns = ['Avg. Session Length', 'Time on App', 'Time on Website', 'Length of Membership', 'Yearly Amount Spent']\nnoise_factor = 0.05  # 5% noise\nfor column in numeric_columns:\n    noise = np.random.normal(loc=0.0, scale=noise_factor * synthetic_data[column].std(), size=num_samples)\n    synthetic_data[column] += noise\n# Optionally save the synthetic dataset to a new CSV file\nsynthetic_data.to_csv('/mnt/data/Synthetic_Ecommerce_Customers.csv', index=False)\nsynthetic_data.head() \n```", "```py\n[Download Synthetic Ecommerce Customers Dataset](sandbox:/mnt/data/Synthetic_Ecommerce_Customers.csv) \n```", "```py\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression, Lasso, Ridge\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score\n# Load the synthetic dataset\ndata = pd.read_csv('/path/to/your/Synthetic_Ecommerce_Customers.csv')\n# Feature selection: Using numerical columns as features\nfeatures = data[['Avg. Session Length', 'Time on App', 'Time on Website', 'Length of Membership']]\ntarget = data['Yearly Amount Spent']\n# Split the data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2, random_state=42)\n# Initialize the models\nlinear_model = LinearRegression()\nlasso_model = Lasso(alpha=0.1)  # alpha is the regularization strength\nridge_model = Ridge(alpha=1.0)  # alpha is the regularization strength\n# Train the models\nlinear_model.fit(X_train, y_train)\nlasso_model.fit(X_train, y_train)\nridge_model.fit(X_train, y_train)\n# Predictions\nlinear_predictions = linear_model.predict(X_test)\nlasso_predictions = lasso_model.predict(X_test)\nridge_predictions = ridge_model.predict(X_test)\n# Evaluations\ndef evaluate_model(predictions, actual):\n    mse = mean_squared_error(actual, predictions)\n    mae = mean_absolute_error(actual, predictions)\n    r2 = r2_score(actual, predictions)\n    return mse, mae, r2\nlinear_mse, linear_mae, linear_r2 = evaluate_model(linear_predictions, y_test)\nlasso_mse, lasso_mae, lasso_r2 = evaluate_model(lasso_predictions, y_test)\nridge_mse, ridge_mae, ridge_r2 = evaluate_model(ridge_predictions, y_test)\n# Print out the metrics\nprint(\"Linear Regression - MSE: {:.2f}, MAE: {:.2f}, R2: {:.2f}\".format(linear_mse, linear_mae, linear_r2))\nprint(\"Lasso Regression - MSE: {:.2f}, MAE: {:.2f}, R2: {:.2f}\".format(lasso_mse, lasso_mae, lasso_r2))\nprint(\"Ridge Regression - MSE: {:.2f}, MAE: {:.2f}, R2: {:.2f}\".format(ridge_mse, ridge_mae, ridge_r2)) \n```"]