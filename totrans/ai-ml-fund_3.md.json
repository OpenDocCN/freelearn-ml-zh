["```py\nx_scaled[n] = (x[n] - min(x)) / (max(x)-min(x))\n```", "```py\navg = sum(x) / len(x)\nx_scaled[n] = (x[n] â€“ avg) / (max(x)-min(x))\n[(float(i)-avg)/(max(fibonacci)-min(fibonacci)) for i in fibonacci]\n```", "```py\nfibonacci = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144]\n# Min-Max scaling:\n[(float(i)-min(fibonacci))/(max(fibonacci)-min(fibonacci)) for i in fibonacci]\n[0.0,\n0.006944444444444444,\n0.006944444444444444,\n0.013888888888888888,\n0.020833333333333332,\n0.034722222222222224,\n0.05555555555555555,\n0.09027777777777778,\n0.14583333333333334,\n0.2361111111111111,\n0.3819444444444444,\n0.6180555555555556,\n1.0]\n# Mean normalization:\navg = sum(fibonacci) / len(fibonacci)\n# 28.923076923076923\n[(float(i)-avg)/(max(fibonacci)-min(fibonacci)) for i in fibonacci]\n[-0.20085470085470086,\n-0.19391025641025642,\n-0.19391025641025642,\n-0.18696581196581197,\n-0.18002136752136752,\n-0.16613247863247863,\n-0.1452991452991453,\n-0.11057692307692307,\n-0.05502136752136752,\n0.035256410256410256,\n0.18108974358974358,\n0.4172008547008547,\n0.7991452991452992]\n```", "```py\nimport numpy as np\nfrom sklearn import preprocessing\npreprocessing.scale(fibonacci)\narray([-0.6925069 , -0.66856384, -0.66856384, -0.64462079, -0.62067773,\n       -0.57279161, -0.50096244, -0.38124715, -0.18970269, 0.12155706,\n        0.62436127, 1.43842524, 2.75529341])\n```", "```py\nfeatures = preprocessing.scale(fibonacci)\nlabel = np.array(range(13))\n```", "```py\nfrom sklearn import model_selection\n(x_train, x_test, y_train, y_test) =\nmodel_selection.train_test_split(features, label, test_size=0.1)\nx_train\narray([-0.66856384, 0.12155706, -0.18970269, -0.64462079, 1.43842524,\n        2.75529341, -0.6925069 , -0.38124715, -0.57279161, -0.62067773,\n       -0.66856384])\nx_test\narray([-0.50096244, 0.62436127])\ny_train\narray([1, 9, 8, 3, 11, 12, 0, 7, 5, 4, 2])\ny_test\narray([6, 10])\n```", "```py\nfrom sklearn import linear_model\nlinear_regression = linear_model.LinearRegression()\nmodel = linear_regression.fit(x_train, y_train)\nmodel.predict(x_test)\narray([4.16199119, 7.54977143])\n```", "```py\nmodel.score(x_test, y_test)\n-0.17273705326696565\n```", "```py\nimport numpy as np\nv1 = np.array([1,2,3])\nv2 = np.array([2,0,2])\nv1 + v2 # array([3, 2, 5])\nv1 * v2 # array([2, 0, 6])\n```", "```py\n[2, 8, 8, 18, 25, 21, 32, 44, 32, 48, 61, 45, 62]\n```", "```py\nimport numpy as np\nfrom numpy import mean\nx = np.array(range(1, 14))\ny = np.array([2, 8, 8, 18, 25, 21, 32, 44, 32, 48, 61, 45, 62])\na = (mean(x)*mean(y) - mean(x*y)) / (mean(x) ** 2 - mean( x ** 2 ))\n4.857142857142859\nb = mean(y) - a*mean(x)\n-2.7692307692307843\n```", "```py\nimport numpy as np\nfrom numpy import mean\nx = np.array(range(1, 14))\ny = np.array([2, 8, 8, 18, 25, 21, 32, 44, 32, 48, 61, 45, 62])\na = (mean(x)*mean(y) - mean(x*y)) / (mean(x) ** 2 - mean( x ** 2 ))\n4.857142857142859\nb = mean(y) - a*mean(x)\n-2.7692307692307843\n```", "```py\nimport numpy as np\nx = np.array(range(1, 14))\ny = np.array([2, 8, 8, 18, 25, 21, 32, 44, 32, 48, 61, 45, 62])\n[a, b] = np.polyfit(x, y, 1)\n[4.857142857142858, -2.769230769230769]\n```", "```py\nimport matplotlib.pyplot as plot\nx = np.array(range(1, 14))\ny = np.array([2, 8, 8, 18, 25, 21, 32, 44, 32, 48, 61, 45, 62])\na = (mean(x)*mean(y) - mean(x*y)) / (mean(x) ** 2 - mean(x ** 2))\n4.857142857142859\nb = mean(y) - a*mean(x)\n-2.7692307692307843\n# Plotting the points\nplot.scatter(x, y)\n# Plotting the line\nplot.plot([0, 15], [b, 15*a+b])\n```", "```py\ndef fitY( arr ):\n    return [4.857142857142859 * x - 2.7692307692307843 for x in arr]\n```", "```py\nplot.plot(\n    x, y, 'go',\n    x, fitY(x), 'r--o'\n)\n```", "```py\nplot.plot(\n    x, y, 'o',\n    x, fitY(x), '-'\n)\n```", "```py\nimport numpy as np\nx = np.array(range(1, 14))\ny = np.array([2, 8, 8, 18, 25, 21, 32, 44, 32, 48, 61, 45, 62])\nnp.polyfit(x, y, 1)\n# array([ 4.85714286, -2.76923077])\n```", "```py\nimport numpy as np\nx = np.array(range( -10, 10, 0.2 ))\nf = np.poly1d([-1,3,-2])\n```", "```py\nf(5)\n# -12\nf(x)\n# array([-132, -110, -90, -72, -56, -42, -30, -20, -12, -6, -2, 0, 0, -2, -6, -12, -20, -30, -42, -56])\n```", "```py\nimport matplotlib.pyplot as plot\nplot.plot(x, f(x))\n```", "```py\n# Plotting the points\nplot.scatter(x, y)\n# Plotting the prediction belonging to x = 20\nplot.scatter(20, a * 20 + b, color='red')\n# Plotting the line\nplot.plot([0, 25], [b, 25*a+b])\n```", "```py\ny = a1 * x1 + a2 * x2 + a3 * x3 + b\n```", "```py\ny = np.dot(np.array([a1, a2, a3]), np.array([x1, x2, x3])) + b\n```", "```py\ny = np.dot(np.array([b, a1, a2, a3]) * np.array([1, x1, x2, x3]))\n```", "```py\npip install fix_yahoo_finance\n```", "```py\nimport fix_yahoo_finance as yahoo\nspx_data_frame = yahoo.download(\"^GSPC\", \"2015-01-01\")\n```", "```py\nspx_data_frame.Close.plot()\n```", "```py\nspx.to_csv(\"spx.csv\")\n```", "```py\nimport pandas as pd\nspx_second_frame = pd.read_csv(\"spx.csv\", index_col=\"Date\", header=0, parse_dates=True)\n```", "```py\n    pip install quandl\n    ```", "```py\n    import quandl\n    data_frame = quandl.get(\"YALE/SPCOMP\")\n    ```", "```py\n    data_frame.head()\n    ```", "```py\n                S&P Composite Dividend Earnings        CPI Long Interest Rate \\\n    Year                                                                        \n    1871-01-31         4.44     0.26     0.4 12.464061            5.320000\n    1871-02-28         4.50     0.26     0.4 12.844641            5.323333\n    1871-03-31         4.61     0.26     0.4 13.034972            5.326667\n    1871-04-30         4.74     0.26     0.4 12.559226            5.330000\n    1871-05-31         4.86     0.26     0.4 12.273812            5.333333\n                Real Price Real Dividend Real Earnings \\\n    Year                                                \n    1871-01-31 89.900119     5.264421     8.099110\n    1871-02-28 88.415295     5.108439     7.859137\n    1871-03-31 89.254001     5.033848     7.744382\n    1871-04-30 95.247222     5.224531     8.037740\n    1871-05-31 99.929493     5.346022     8.224650\n                Cyclically Adjusted PE Ratio\n    Year                                    \n    1871-01-31                         NaN\n    1871-02-28                         NaN\n    1871-03-31                         NaN\n    1871-04-30                         NaN\n    1871-05-31                         NaN\n                                     ...\n    2016-02-29                     24.002607\n    2016-03-31                     25.372299\n    ```", "```py\ndata_frame[['Long Interest Rate', 'Real Price', 'Real Dividend', 'Cyclically Adjusted PE Ratio']]\n```", "```py\ndata_frame.fillna(-100, inplace=True)\n```", "```py\nlen(data_frame)\n1771\n```", "```py\ndata_frame['Real Price Label'] = data_frame['Real Price'].shift( -240 )\n```", "```py\ndata_frame.tail()\n```", "```py\n            S&P Composite Dividend Earnings     CPI Long Interest Rate \\\nYear                                                                        \n2018-03-31        2702.77     50.00     NaN 249.5540             2.840\n2018-04-30        2653.63     50.33     NaN 250.5460             2.870\n2018-05-31        2701.49     50.66     NaN 251.5880             2.976\n2018-06-30        2754.35     50.99     NaN 252.1090             2.910\n2018-07-31        2736.61     NaN     NaN 252.3695             2.830\n             Real Price Real Dividend Real Earnings \\\nYear                                                    \n2018-03-31 2733.262995     50.564106            NaN\n2018-04-30 2672.943397     50.696307            NaN\n2018-05-31 2709.881555     50.817364            NaN\n2018-06-30 2757.196024     51.042687            NaN\n2018-07-31 2736.610000            NaN            NaN\n            Cyclically Adjusted PE Ratio Real Price Label\nYear                                                        \n2018-03-31                     31.988336             NaN\n2018-04-30                     31.238428             NaN\n2018-05-31                     31.612305             NaN\n2018-06-30                     32.091415             NaN\n2018-07-31                     31.765318             NaN\n```", "```py\ndata_frame.dropna(inplace=True)\n```", "```py\ndata_frame.tail()\n```", "```py\n            S&P Composite Dividend Earnings    CPI Long Interest Rate \\\nYear                                                                    \n1998-03-31        1076.83 15.6400 39.5400 162.2                5.65\n1998-04-30        1112.20 15.7500 39.3500 162.5                5.64\n1998-05-31        1108.42 15.8500 39.1600 162.8                5.65\n1998-06-30        1108.39 15.9500 38.9700 163.0                5.50\n1998-07-31        1156.58 16.0167 38.6767 163.2                5.46\n             Real Price Real Dividend Real Earnings \\\nYear                                                    \n1998-03-31 1675.456527     24.334519     61.520900\n1998-04-30 1727.294510     24.460428     61.112245\n1998-05-31 1718.251850     24.570372     60.705096\n1998-06-30 1716.097117     24.695052     60.336438\n1998-07-31 1788.514193     24.767932     59.808943\n            Cyclically Adjusted PE Ratio Real Price Label\nYear                                                        \n1998-03-31                     36.296928     2733.262995\n1998-04-30                     37.276934     2672.943397\n1998-05-31                     36.956599     2709.881555\n1998-06-30                     36.802293     2757.196024\n1998-07-31                     38.259645     2736.610000\n```", "```py\nimport numpy as np\nfeatures = np.array(data_frame.drop('Real Price Label', 1))\nlabel = np.array(data_frame['Real Price Label'])\n```", "```py\nfrom sklearn import preprocessing\nscaled_features = preprocessing.scale(features)\nfeatures\narray([[6.19000000e+00, 2.65000000e-01, 4.85800000e-01, ...,\n        7.10000389e+00, 1.30157807e+01, 1.84739523e+01],\n       [6.17000000e+00, 2.70000000e-01, 4.81700000e-01, ...,\n        7.16161179e+00, 1.27768459e+01, 1.81472582e+01],\n       [6.24000000e+00, 2.75000000e-01, 4.77500000e-01, ...,\n        7.29423423e+00, 1.26654431e+01, 1.82701191e+01],\n       ...,\n       [1.10842000e+03, 1.58500000e+01, 3.91600000e+01, ...,\n        2.45703721e+01, 6.07050959e+01, 3.69565985e+01],\n       [1.10839000e+03, 1.59500000e+01, 3.89700000e+01, ...,\n        2.46950523e+01, 6.03364381e+01, 3.68022935e+01],\n       [1.15658000e+03, 1.60167000e+01, 3.86767000e+01, ...,\n        2.47679324e+01, 5.98089427e+01, 3.82596451e+01]])\nscaled_features\narray([[-0.47564285, -0.62408514, -0.57496262, ..., -1.23976862,\n        -0.84099698, 0.6398416 ],\n       [-0.47577027, -0.62273749, -0.5754623 , ..., -1.22764677,\n        -0.85903686, 0.57633607],\n       [-0.47532429, -0.62138984, -0.57597417, ..., -1.20155224,\n        -0.86744792, 0.60021881],\n       ...,\n       [ 6.54690076, 3.57654404, 4.13838295, ..., 2.19766676,\n         2.75960615, 4.23265262],\n       [ 6.54670962, 3.60349707, 4.11522706, ..., 2.22219859,\n         2.73177202, 4.20265751],\n       [ 6.85373845, 3.62147473, 4.07948167, ..., 2.23653834,\n         2.69194545, 4.48594968]])\n```", "```py\nfrom sklearn import model_selection\n(features_train, features_test, label_train, label_test) =\n    model_ selection.train_test_split(\n        scaled_features, label, test_size=0.1\n    )\n```", "```py\nfrom sklearn import linear_model\nmodel = linear_model.LinearRegression()\nmodel.fit(features_train, label_train)\n```", "```py\nlabel_predicted = model.predict(features_test)\n```", "```py\nfrom matplotlib import pyplot as plot\nplot.scatter(label_test, label_predicted)\n```", "```py\nmodel.score(features_test, label_test)\n0.9051697119010782\n```", "```py\nimport quandl\nimport numpy as np\nfrom sklearn import preprocessing\nfrom sklearn import model_selection\nfrom sklearn import linear_model\ndata_frame = quandl.get(\"YALE/SPCOMP\")\ndata_frame[['Long Interest Rate', 'Real Price', 'Real Dividend', 'Cyclically Adjusted PE Ratio']]\ndata_frame.fillna(-100, inplace=True)\ndata_frame['Real Price Label'] = data_frame['Real Price'].shift(-240)\ndata_frame.dropna(inplace=True)\nfeatures = np.array(data_frame.drop('Real Price Label', 1))\nlabel = np.array(data_frame['Real Price Label'])\nscaled_features = preprocessing.scale(features)\n(features_train, features_test, label_train, label_test) =\n    model_ selection.train_test_split(\n        scaled_features, label, test_size=0.1\n    )\nmodel = linear_model.LinearRegression()\nmodel.fit(features_train, label_train)\nlabel_predicted = model.predict(features_test)\n```", "```py\nimport quandl\nimport numpy as np\nfrom sklearn import preprocessing\nfrom sklearn import model_selection\nfrom sklearn import linear_model\ndata_frame = quandl.get(\"YALE/SPCOMP\")\ndata_frame[['Long Interest Rate', 'Real Price', 'Real Dividend', 'Cyclically Adjusted PE Ratio']]\ndata_frame.fillna(-100, inplace=True)\n# We shift the price data to be predicted 20 years forward\ndata_frame[ 'Real Price Label'] = data_frame['Real Price'].shift(-240)\n# Then exclude the label column from the features\nfeatures = np.array(data_frame.drop('Real Price Label', 1))\n# We scale before dropping the last 240 rows from the\n# features\nscaled_features = preprocessing.scale(features)\n# Save the last 240 rows before dropping them\nscaled_features_latest_240 = scaled_features[-240:]\n# Exclude the last 240 rows from the data used for model\n# building\nscaled_features = scaled_features[:-240]\n# Now we can drop the last 240 rows from the data frame\ndata_frame.dropna(inplace=True)\n# Then build the labels from the remaining data\nlabel = np.array(data_frame['Real Price Label'])\n# The rest of the model building stays\n(features_train, features_test, label_train, label_test) =\n    model_ selection.train_test_split(\n        scaled_features, label, test_size=0.1\n    )\nmodel = linear_model.LinearRegression()\nmodel.fit(features_train, label_train)\n```", "```py\nlabel_predicted = model.predict(scaled_features_latest_240)\n```", "```py\nfrom matplotlib import pyplot as plot\nplot.plot(list(range(1,241)), label_predicted[:240])\n```", "```py\nplot.plot(list(range(1,181)), label_predicted[:180])\n```", "```py\nDeclare the two datasets\nimport numpy as np\nfrom matplotlib import pyplot as plot\n# First dataset:\nx1 = np.array(range(1, 14))\ny1 = np.array([2, 8, 8, 18, 25, 21, 32, 44, 32, 48, 61, 45, 62])\n# Second dataset:\nx2 = np.array(range(1, 14))\ny2 = np.array([0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144])\n```", "```py\nimport matplotlib.pyplot as plot\ndeg1 = np.polyfit(x1, y1, 1)\n# array([ 4.85714286, -2.76923077])\nf1 = np.poly1d(deg1)\ndeg2 = np.polyfit(x1, y1, 2)\n# array([-0.03196803, 5.3046953 , -3.88811189])\nf2 = np.poly1d(deg2)\ndeg3 = np.polyfit(x1, y1, 3)\n# array([-0.01136364, 0.20666833, 3.91833167, -1.97902098])\nf3 = np.poly1d(deg3)\nplot.plot(\n    x1, y1, 'o',\n    x1, f1(x1),\n    x1, f2(x1),\n    x1, f3(x1)\n )\nplot.show()\n```", "```py\ndeg1 = np.polyfit(x2, y2, 1)\n# array([ 9.12087912, -34.92307692])\nf1 = np.poly1d(deg1)\ndeg2 = np.polyfit(x2, y2, 2)\n# array([ 1.75024975, -15.38261738, 26.33566434])\nf2 = np.poly1d(deg2)\ndeg3 = np.polyfit(x2, y2, 3)\n# array([0.2465035, -3.42632368, 14.69080919,\n# -15.07692308])\nf3 = np.poly1d(deg3)\nplot.plot(\n    x2, y1, 'o',# blue dots\n    x2, f1(x2), # orange\n    x2, f2(x2), # green\n    x2, f3(x2) # red\n)\n```", "```py\ny = b + a1*x + a2*(x ** 2) + a3*(x ** 3) + â€¦ + an * (x ** n)\n```", "```py\nimport numpy as np\nimport quandl\nfrom sklearn import preprocessing\nfrom sklearn import model_selection\nfrom sklearn import linear_model\nfrom matplotlib import pyplot as plot\nfrom sklearn.preprocessing import PolynomialFeatures\ndata_frame = quandl.get(\"YALE/SPCOMP\")\ndata_frame.fillna(-100, inplace=True)\n# We shift the price data to be predicted 20 years forward\ndata_frame['Real Price Label'] = data_frame['Real Price'].shift(-240)\n# Then exclude the label column from the features\nfeatures = np.array(data_frame.drop('Real Price Label', 1))\n# We scale before dropping the last 240 rows from the features\nscaled_features = preprocessing.scale(features)\n# Save the last 240 rows before dropping them\nscaled_features_latest_240 = scaled_features[-240:]\n# Exclude the last 240 rows from the data used for model building\nscaled_features = scaled_features[:-240]\n# Now we can drop the last 240 rows from the data frame\ndata_frame.dropna(inplace=True)\n# Then build the labels from the remaining data\nlabel = np.array(data_frame['Real Price Label'])\n# Create a polynomial regressor model and fit it to the training data\npoly_regressor = PolynomialFeatures(degree=3)\npoly_scaled_features = poly_regressor.fit_transform(scaled_features)\n# Split to training and testing data\n(\n```", "```py\n    poly_features_train, poly_features_test,\n    poly_label_train, poly_label_test\n) = model_selection.train_test_split(\n    poly_scaled_ features,\n    label, test_size=0.1\n)\n# Apply linear regression\nmodel = linear_model.LinearRegression()\nmodel.fit(poly_features_train, poly_label_train)\n# Model score\nprint('Score: ', model.score(poly_features_test, poly_label_test))\n# Prediction\npoly_label_predicted = model.predict(poly_features_test)\nplot.scatter(poly_label_test, poly_label_predicted)\n```", "```py\nfrom sklearn import model_selection\nfrom sklearn import linear_model\n(features_train, features_test, label_train,\n label_test) = model_selection.train_test_split(scaled_features, label, test_size=0.1)\nmodel = linear_model.LinearRegression()\nmodel.fit(features_train, label_train)\n```", "```py\nfrom sklearn import model_selection\nfrom sklearn import svm\nfrom matplotlib import pyplot as plot\n# The rest of the model building stays the same\n(features_train, features_test, label_train,\n label_test) = model_selection.train_test_split(scaled_features, label, test_size=0.1)\nmodel = svm.SVR()\nmodel.fit(features_train, label_train)\nlabel_predicted = model.predict(features_test)\nprint('Score: ', model.score(features_test, label_test))\nplot.plot(label_test, label_predicted, 'o')\n```", "```py\n -0.19365084431020874\n```", "```py\nSVR(C=1.0, cache_size=200, coef0=0.0, degree=3, epsilon=0.1, gamma='auto', kernel='rbf', max_iter=-1, shrinking=True, tol=0.001, verbose=False)\n```", "```py\nmodel = svm.SVR(kernel='poly')\nmodel.fit(features_train, label_train)\nlabel_predicted = model.predict(features_test)\nplot.plot(label_test, label_predicted, 'o')\n```", "```py\nmodel.score(features_test, label_test)\n```", "```py\n0.06388628722032952\n```"]