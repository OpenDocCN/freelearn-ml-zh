- en: '2'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Preparing and Ingesting Data with Power Query
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [*Chapter 1*](B19500_01.xhtml#_idTextAnchor015) of this book, you kicked
    off a project to design a solution that will help track and predict height and
    outcomes related to aircraft striking wildlife. You gathered requirements from
    the project stakeholders, took a deep dive into the FAA Wildlife Strike data,
    mapped the requirements to the available data, and put together a preliminary
    data model design, which will be the foundation of your reports and predictive
    analytics using Power BI ML models.
  prefs: []
  type: TYPE_NORMAL
- en: Creating tables of data that will be used for ML requires a clear understanding
    of the FAA Wildlife Strike data and an architecture that allows you to discover
    features in the data. In this chapter, you will embark upon a journey to prepare
    queries for the data that you explored in [*Chapter 1*](B19500_01.xhtml#_idTextAnchor015),
    model that data for Power BI using your preliminary data model as a guide, and
    create curated queries, which will be the basis of both datasets and ML training
    datasets in Power BI.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter builds on the work that was begun in [*Chapter 1*](B19500_01.xhtml#_idTextAnchor015).
    All of the data can be found at [https://github.com/PacktPublishing/Unleashing-Your-Data-with-Power-BI-Machine-Learning-and-OpenAI/tree/main/Chapter-02](https://github.com/PacktPublishing/Unleashing-Your-Data-with-Power-BI-Machine-Learning-and-OpenAI/tree/main/Chapter-02).
  prefs: []
  type: TYPE_NORMAL
- en: 'For this chapter, you will need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Power BI Desktop April 2023 or later (no licenses required)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'FAA Wildlife Strike data files from either the FAA website or the Packt GitHub
    site at GitHub: [https://github.com/PacktPublishing/Unleashing-Your-Data-with-Power-BI-Machine-Learning-and-OpenAI/tree/main/Chapter-02](https://github.com/PacktPublishing/Unleashing-Your-Data-with-Power-BI-Machine-Learning-and-OpenAI/tree/main/Chapter-02)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If you’d prefer to follow along using the finished version of the content from
    this chapter rather than building it all step by step, you can download the completed
    PBIT version of the file at the Packt GitHub site folder for [*Chapter* *2*](B19500_02.xhtml#_idTextAnchor030):
    [https://github.com/PacktPublishing/Unleashing-Your-Data-with-Power-BI-Machine-Learning-and-OpenAI/tree/main/Chapter-02](https://github.com/PacktPublishing/Unleashing-Your-Data-with-Power-BI-Machine-Learning-and-OpenAI/tree/main/Chapter-02).'
  prefs: []
  type: TYPE_NORMAL
- en: Preparing the primary table of data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You have decided to start the process of building out the design for your dataset
    by modeling the primary table of data from the FAA Wildlife Strike database. You
    start by opening the `Chapter 1``.pbix` Power BI Desktop file that was created
    in [*Chapter 1*](B19500_01.xhtml#_idTextAnchor015). You can also download a clean
    copy of the file from the Packt GitHub site for this book at this link as a PBIT
    file, which can be populated as a PBIX using the data downloaded in [*Chapter*
    *1*](B19500_01.xhtml#_idTextAnchor015): [https://github.com/PacktPublishing/Unleashing-Your-Data-with-Power-BI-Machine-Learning-and-OpenAI/tree/main/Chapter-01](https://github.com/PacktPublishing/Unleashing-Your-Data-with-Power-BI-Machine-Learning-and-OpenAI/tree/main/Chapter-01).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open Power Query within Power BI, and you will see the four tables of data
    that constitute the raw data from the FAA:'
  prefs: []
  type: TYPE_NORMAL
- en: '**STRIKE_REPORTS**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Aircraft Type**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Engine Codes**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Engine Position**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Review the preliminary data model that you created in [*Chapter 1*](B19500_01.xhtml#_idTextAnchor015)*.*
    For the first step, you will organize the existing queries of the raw data into
    a folder, which can be referenced as you create modified queries for your data
    model:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.1 – Power Query folders contain stages of transformations](img/Figure_2.1_B19500.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.1 – Power Query folders contain stages of transformations
  prefs: []
  type: TYPE_NORMAL
- en: Next, you need to do something about the raw data. Power Query allows you to
    organize queries into groups, which function as logical groupings, much like a
    folder within SharePoint or OneDrive.
  prefs: []
  type: TYPE_NORMAL
- en: Within Power Query, the terms “query” and “table” are used interchangeably depending
    on the context. For the remainder of the book, the term “query” will be used when
    referring to data that is not cached or logic being created to generate a table,
    while “table” will refer to data that has been cached in either Power BI datasets
    or dataflows in the Power BI service.
  prefs: []
  type: TYPE_NORMAL
- en: Grouping the raw data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You create a group for the raw data queries, which can be referenced as a view
    of the original data later in the project. In examples of data lakes or data lakehouse
    architectures, you will often see bronze/silver/gold or raw, curated, optimized
    layers, which serve as both reference points within the transformation process
    that happens to data and for data that might have been referred to as staging
    tables in older data warehousing terminology. While Power BI Power Query and dataflows
    are different from data lakehouse architectures, grouping your queries and tables
    into separate stages can help with understanding the logic and also with expanding
    future iterations of the solution. No matter what happens downstream with the
    data, a Power BI developer can return to the **Raw data** folder to see the data
    as it appears in the source:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Raw Data`, and add the following description: `Raw FAA Wildlife Strike`
    `Data Tables`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on each of the four queries, and move each of them into the new
    group, **Raw Data**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on each of the four queries and *disable* **Enable load**. Why bother
    with this step? By disabling **Enable load**, these queries will be simple previews
    of the source data, which do not get loaded into your dataset and consume storage
    space.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The group is a logical container that exists for the purpose of organizing
    your queries. The queries represent the raw data as it exists from the source,
    and can be referenced by new queries that you create in Power Query. As your data
    model and ML use cases evolve over time, you can iteratively reference the source
    data in an unaltered form to evaluate changes and create new training data for
    future ML models. The left side portion of **Step 1** in *Figure 2**.1* is now
    complete! Your **Queries** panel in Power Query should now look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.2 – Queries representing the unaltered raw data](img/Figure_2.2_B19500.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.2 – Queries representing the unaltered raw data
  prefs: []
  type: TYPE_NORMAL
- en: Next, you need to design the table.
  prefs: []
  type: TYPE_NORMAL
- en: Designing a curated table of the primary STRIKE_REPORTS data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You’re now ready to start building curated tables of data, which can be used
    first to populate a Power BI dataset and then later to populate tables of data
    for ML. In the days before Power BI, when every bit of data took up precious space
    and running a query was a great time for a coffee break, architects would often
    build out their dimension tables before populating simple fact tables, which consisted
    of integer keys with numeric fields used for calculated measures.
  prefs: []
  type: TYPE_NORMAL
- en: If you are building a Power BI dataset with tens of millions of rows or more,
    taking care to follow best practices with large volumes of data is still a good
    idea. For this solution with fewer than 300,000 rows of FAA Wildlife Strike data,
    the decision was made in [*Chapter 1*](B19500_01.xhtml#_idTextAnchor015) to build
    a hybrid design for the sake of practicality and ease of use, which contains elements
    of both a star schema and flattened data design. With a hybrid approach, you decide
    to start your efforts with the primary **STRIKE_REPORTS** data table, which is
    mostly a fact table but also has descriptive text columns – these could’ve been
    broken out into dimensions but will be used as degenerate dimensions.
  prefs: []
  type: TYPE_NORMAL
- en: Evaluating the data for the **STRIKE_REPORTS** table is going to be a tedious,
    repetitious, and lengthy effort. You realize that this portion of your effort
    will probably be one of the least enjoyable parts of this book, but you also know
    that soldiering through it will result in better data, which leads to a more productive
    analytics and ML journey.
  prefs: []
  type: TYPE_NORMAL
- en: 'You decide to break up the evaluation of the **STRIKE_REPORTS** table into
    seven steps so that you can comprehend the data and take a few breaks:'
  prefs: []
  type: TYPE_NORMAL
- en: Evaluate dimension tables for necessary key values.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Evaluate the date and time columns in the **STRIKE_REPORTS** table.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Evaluate geographical and location columns in the **STRIKE_REPORTS** table.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Evaluate aircraft and operator description columns in the **STRIKE_REPORTS**
    table.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Evaluate the species and animal columns in the **STRIKE_REPORTS** table.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Evaluate the weather, flight details, and strike damage columns in the **STRIKE_REPORTS**
    table.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Look at the other columns from the **STRIKE_REPORTS** table.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, you will go through each step in detail.
  prefs: []
  type: TYPE_NORMAL
- en: Evaluating dimension tables for necessary key values
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Before you begin curating the **STRIKE_REPORTS** table, you review the other
    (dimension) tables that will be part of your solution. You’ll need to identify
    the primary key column for each of these tables. When working through the **STRIKE_REPORTS**
    table, you’ll need to make sure a foreign key exists to map that table to the
    other tables:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Aircraft Type**: For this table, you can see that **Aircraft Code** is a
    unique letter for each option in the table. These values match up to values in
    the **AC_CLASS** column in **STRIKE_REPORTS**. You’ll want to keep **AC_CLASS**
    for your curated table as a foreign key to the **Aircraft** **Type** table.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Engine Codes**: This table is a little bit tricky. You’ll need to use both
    the **Manufacturer Code** and **Model Code** columns to identify a unique row.
    This is called a compound key. Per the **read_me.xls** file, the **AMA** and **AMO**
    columns from **STRIKE_REPORTS** map to these columns.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`read_me.xls` definitions list. **ENG_1_POS**, **ENG_2_POS**, **ENG_3_POS**,
    and **ENG_4_POS** are all foreign keys for the **Engine Position** table. This
    scenario will present some interesting architectural options that you will need
    to consider.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Raw Data` folder. Per your preliminary data model, you’ll need a **Date**
    table to do aggregations at the week, month, quarter, and year levels. You will
    add a **Date** table later in this chapter, but you’ll also need to evaluate the
    columns in the **STRIKE_REPORTS** table for suitable foreign keys.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Evaluating the date and time columns on the STRIKE_REPORTS table
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Those who’ve worked long enough in business intelligence and analytics know
    that a `read_me.xls` file and also in the `Raw Data` folder of Power Query. You
    take notes on the following criteria for each column of data:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Column name**: The name of the column in the **STRIKE_REPORTS** table.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Initial data type**: What is the data type either detected in the **Microsoft**
    **Access** file or auto-detected by Power BI?'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Notes**: Your notes about each column.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Keep?**: Yes/no for whether you keep this column. You’ll be able to add it
    back in the future if you change your mind.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**New data type**: What should the data type be for the new curated version
    of the table?'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Key**: Is this a foreign key column? If so, what table will it integrate?'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Reporting name**: A user-friendly name for the column that will look good
    on reports, reflect the language of report users, and work well with tools such
    as Power BI Natural Language Query.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| **Column name** | **Initial data type** | **Note** | **Keep?** | **New data
    type** | **Key?** | **Reporting name** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| **INCIDENT_DATE** | **Date/Time** | This is the date that a wildlife strike
    happened. The time component of the data is not used. | Yes | **Date** | Yes –
    to the **Date** table | Incident date |'
  prefs: []
  type: TYPE_TB
- en: '| **INCIDENT_MONTH** | **Decimal** | This column is not needed since it exists
    within **INCIDENT_DATE**, which will link to the **Date** table containing month
    values. | No |  |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| **INCIDENT_YEAR** | **Decimal** | This column is not needed since it exists
    within **INCIDENT_DATE**, which will link to the **Date** table containing year
    values. | No |  |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| **TIME** | **Text** | This column has missing data, but you may reconsider
    it in the future. | No |  |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| **TIME_OF_DAY** | **Text** | This column is more frequently populated than
    **TIME** and might be valuable. | Yes | **Text** | No | Time of day |'
  prefs: []
  type: TYPE_TB
- en: '| **LUPDATE** | **Date/Time** | Information about when the report was updated
    doesn’t need to be part of your initial effort. | No |  |  |  |'
  prefs: []
  type: TYPE_TB
- en: Figure 2.3 – A table of columns from STRIKE_REPORTS related to date and time
  prefs: []
  type: TYPE_NORMAL
- en: Next, you need to work on the location columns.
  prefs: []
  type: TYPE_NORMAL
- en: Evaluating the geographical and location columns in the STRIKE_REPORTS table
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Geographical and location columns will provide information about where wildlife
    strikes happened in parts of the world covered by the FAA. These types of information
    could potentially be valuable for differentiating trends, patterns, and frequency
    that differ based on local climates and wildlife populations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once again, you take a deep dive into the **STRIKE_REPORTS** data and list
    out the columns that are geographical or refer to location:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Column name** | **Initial data type** | **Notes** | **Keep?** | **New data
    type** | **Key?** | **Reporting** **name** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| **AIRPORT_ID** | **Text** | A unique identifier for an airport. | Yes | **Text**
    | No | Airport ID |'
  prefs: []
  type: TYPE_TB
- en: '| **AIRPORT** | **Text** | Name of an airport. | Yes | **Text** | No | Airport
    name |'
  prefs: []
  type: TYPE_TB
- en: '| **STATE** | **Text** | Abbreviation for a state. | Yes | **Text** | No |
    State |'
  prefs: []
  type: TYPE_TB
- en: '| **ENROUTE_STATE** | **Text** | Abbreviation for the destination state. |
    Yes | **Text** | No | State |'
  prefs: []
  type: TYPE_TB
- en: '| **FAAREGION** | **Text** | The FAA region listed in the report. | Yes | **Text**
    | No | FAA region |'
  prefs: []
  type: TYPE_TB
- en: '| **RUNWAY** | **Text** | The runway for the flight. | Yes | **Text** | No
    | Runway |'
  prefs: []
  type: TYPE_TB
- en: '| **LOCATION** | **Text** | Free text comments about the location. You decide
    to leave it out for your first round of development since it is 96% empty. | No
    | **Text** | No |  |'
  prefs: []
  type: TYPE_TB
- en: '| **LATITUDE** | **Decimal** | The latitude listed in the report. | Yes | **Decimal**
    | No | Latitude |'
  prefs: []
  type: TYPE_TB
- en: '| **LONGITUDE** | **Decimal** | The longitude listed in the report | Yes |
    **Decimal** | No | Longitude |'
  prefs: []
  type: TYPE_TB
- en: Figure 2.4 – A table of columns from STRIKE_REPORTS related to geography and
    location
  prefs: []
  type: TYPE_NORMAL
- en: Note that in a true star schema design, a **Geography** table is often a separate
    dimension. Again, you are proceeding with a hybrid approach so that you minimize
    the complexity of your first round of development. You could always break off
    a geography dimension in future iterations of development.
  prefs: []
  type: TYPE_NORMAL
- en: Evaluating the aircraft and operator description columns in the STRIKE_REPORTS
    table
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Information about the aircraft and aircraft operators is also in the **STRIKE_REPORTS**
    table from the FAA Wildlife Strike data. You perform a similar analysis of these
    columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Column name** | **Initial data type** | **Notes** | **Keep?** | **New data
    type** | **Key?** | **Reporting name** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| **OPID** | **Text** | The ID of the operator. | Yes | **Text** | No | Operator
    ID |'
  prefs: []
  type: TYPE_TB
- en: '| **OPERATOR** | **Text** | The name of the operator. | Yes | **Text** | No
    | Operator |'
  prefs: []
  type: TYPE_TB
- en: '| **REG** | **Text** | Aircraft registration number. | No |  |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| **AIRCRAFT** | **Text** | Aircraft description. | Yes | **Text** | No | Aircraft
    |'
  prefs: []
  type: TYPE_TB
- en: '| **AMA** | **Text** | Aircraft manufacturer code. | Yes | **Text** | Yes –
    **Engine Codes** | AMA |'
  prefs: []
  type: TYPE_TB
- en: '| **AMO** | **Text** | Aircraft model code. | Yes | **Text** | Yes – **Engine
    Codes** | AMO |'
  prefs: []
  type: TYPE_TB
- en: '| **EMA** | **Text** | The latitude listed in the report. | Yes | **Text**
    | No | EMA |'
  prefs: []
  type: TYPE_TB
- en: '| **EMO** | **Text** | The longitude listed in the report. | Yes | **Text**
    | No | EMO |'
  prefs: []
  type: TYPE_TB
- en: '| **AC_CLASS** | **Text** | Aircraft class. | Yes | **Text** | Yes – **Aircraft
    Type** | Aircraft class code |'
  prefs: []
  type: TYPE_TB
- en: '| **AC_MASS** | **Text** | Aircraft mass key; also contains a few text entries
    of `NULL`. You’ll need to add some descriptions down the line. | Yes | **Text**
    | No | Aircraft mass code |'
  prefs: []
  type: TYPE_TB
- en: '| **TYPE_ENG** | **Text** | The type of engine key; will also need descriptions
    added. | Yes | **Text** | No | Engine type code |'
  prefs: []
  type: TYPE_TB
- en: '| **NUM_ENGS** | **Text** | Some of the entries are `NULL` (text) while others
    are integers or empty. You decide to keep it as a text value for now, but will
    reconsider while designing the dataset. | Yes | **Text** | No | Number of Engines
    |'
  prefs: []
  type: TYPE_TB
- en: '| **ENG_1_POS** | **Text** | These four columns for `NULL` text entries and
    will be kept as text for now. | Yes | **Text** | Yes –**Engine Position** | Engine
    1 position code |'
  prefs: []
  type: TYPE_TB
- en: '| **ENG_2_POS** | **Text** | Yes | **Text** | Yes – **Engine Position** | Engine
    2 position code |'
  prefs: []
  type: TYPE_TB
- en: '| **ENG_3_POS** | **Text** | Yes | **Text** | Yes – **Engine Position** | Engine
    3 position code |'
  prefs: []
  type: TYPE_TB
- en: '| **ENG_4_POS** | **Text** | Yes | **Text** | Yes –**Engine Position** | Engine
    4 position code |'
  prefs: []
  type: TYPE_TB
- en: Figure 2.5 – A table of columns from STRIKE_REPORTS related to aircraft and
    operator descriptions
  prefs: []
  type: TYPE_NORMAL
- en: Next, you will look at the columns recording the animals involved.
  prefs: []
  type: TYPE_NORMAL
- en: Evaluating the species and animal columns in the STRIKE_REPORTS table
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Information about different species of wildlife that struck aircraft, how large
    they were, and the results of the impact might also be beneficial in predicting
    costs and damages associated with wildlife strikes. You take a look at columns
    of data related to wildlife:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Column name** | **Initial** **data type** | **Notes** | **Keep?** | **New
    data type** | **Key?** | **Reporting name** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| **BIRD_BAND_NUMBER** | **Text** | Mostly empty | No |  |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| **SPECIES_ID** | **Text** | ID of species | Yes | **Text** | No | Species
    ID |'
  prefs: []
  type: TYPE_TB
- en: '| **SPECIES** | **Text** | Species name | Yes | **Text** | No | Species |'
  prefs: []
  type: TYPE_TB
- en: '| **REMAINS_COLLECTED** | **True/False** | Not needed for the project | No
    |  | No |  |'
  prefs: []
  type: TYPE_TB
- en: '| **REMAINS_SENT** | **True/False** | Not needed for the project | No |  |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| **WARNED** | **Text** | Was there a warning? | Yes | **Text** | No | Warned
    |'
  prefs: []
  type: TYPE_TB
- en: '| **NUM_SEEN** | **Text** | The number of animals seen | Yes | **Text** | No
    | Number seen |'
  prefs: []
  type: TYPE_TB
- en: '| **NUM_STRUCK** | **Text** | The number of animals struck | Yes | **Text**
    | No | Number struck |'
  prefs: []
  type: TYPE_TB
- en: '| **SIZE** | **Text** | The size of the animals | Yes | **Text** | No | Size
    |'
  prefs: []
  type: TYPE_TB
- en: Figure 2.6 – A table of columns from STRIKE_REPORTS related to species and animal
    descriptions
  prefs: []
  type: TYPE_NORMAL
- en: You will look at a few more columns in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Evaluating the weather, flight details, and strike damage columns in the STRIKE_REPORTS
    table
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Information about the state of the flight such as the height and speed of the
    aircraft could also be interesting and useful data. You also take a look at information
    related to damage, costs, and injuries from the wildlife strikes:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Column name** | **Initial data type** | **Notes** | **Keep?** | **New**
    **data type** | **Key?** | **Reporting name** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| **PHASE_OF_FLIGHT** | **Text** | Note phases, such as takeoff and cruising
    | Yes | **Text** | No | Phase of flight |'
  prefs: []
  type: TYPE_TB
- en: '| **HEIGHT** | **Decimal** | The height of the aircraft at the time of impact
    | Yes | **Integer** | No | Height |'
  prefs: []
  type: TYPE_TB
- en: '| **SPEED** | **Decimal** | Speed of the aircraft at the time of impact | Yes
    | **Integer** | No | Speed |'
  prefs: []
  type: TYPE_TB
- en: '| **DISTANCE** | **Decimal** | Distance from the airport | Yes | **Decimal**
    | No | Distance |'
  prefs: []
  type: TYPE_TB
- en: '| **SKY** | **Text** | Visibility notes | Yes | **Text** | No | Sky |'
  prefs: []
  type: TYPE_TB
- en: '| **PRECIPITATION** | **Text** | Notes about rain, snow, and so on | Yes |
    **Text** | No | Precipitation |'
  prefs: []
  type: TYPE_TB
- en: '| **AOS** | **Decimal** | The amount of time for which the aircraft is out
    of service | Yes | **Decimal** | No | AOS |'
  prefs: []
  type: TYPE_TB
- en: '| **COST_REPAIRS** | **Fixed Decimal Number** | Cost of repairs | Yes | **Fixed
    Decimal Number** | No | Cost of repairs |'
  prefs: []
  type: TYPE_TB
- en: '| **COST_OTHER** | **Fixed Decimal Number** | Other costs | Yes | **Fixed Decimal
    Number** | No | Other costs |'
  prefs: []
  type: TYPE_TB
- en: '| **COST_REPAIRS_INFL_ADJ** | **Fixed Decimal Number** | Costs (inflation-     adjusted) | Yes | **Fixed Decimal Number** | No | Cost of repairs (adjusted) |'
  prefs: []
  type: TYPE_TB
- en: '| **COST_OTHER_INFL_ADJ** | **Fixed Decimal Number** | Other costs (inflation-adjusted)
    | Yes | **Fixed Decimal Number** | No | Other costs (adjusted) |'
  prefs: []
  type: TYPE_TB
- en: '| **DAMAGE_LEVEL** | **Text** | Level of damage | Yes | **Text** | No | Damage
    level |'
  prefs: []
  type: TYPE_TB
- en: '| **OTHER_SPECIFY** | **Text** | 96% empty and free text so skip it for now
    | No |  |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| **EFFECT** | **Text** | Effect on the flight | Yes | **Text** | No | Effect
    on flight |'
  prefs: []
  type: TYPE_TB
- en: '| **EFFECT_OTHER** | **Text** | Other effects, 98% empty | No |  |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| **REMARKS** | **Text** | Various remarks about the incident | Yes | **Text**
    | No | Remarks |'
  prefs: []
  type: TYPE_TB
- en: '| **NR_INJURIES** | **Decimal** | Number of injuries | Yes | **Integer** |
    No | Number of injuries |'
  prefs: []
  type: TYPE_TB
- en: '| **NR_FATALITIES** | **Decimal** | Number of fatalities | Yes | **Integer**
    | No | Number of fatalities |'
  prefs: []
  type: TYPE_TB
- en: '| **COMMENTS** | **Text** | Comments in free text | No |  |  |  |'
  prefs: []
  type: TYPE_TB
- en: Figure 2.7 – A table of columns from STRIKE_REPORTS related to weather, flight,
    and damage descriptions
  prefs: []
  type: TYPE_NORMAL
- en: 'You also find 34 **True/False** columns related to the strikes and related
    damage. **True/False** columns are often straightforward to evaluate for use with
    ML, so you decide to include these columns. Most of them start with **ING** (ingested),
    **DAM** (damage), or **STR** (struck):'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Additional True/False** **columns included** |'
  prefs: []
  type: TYPE_TB
- en: '| **INGESTED_OTHER** | **STR_NOSE** | **STR_ENG2** | **STR_ENG3** | **STR_ENG4**
    |'
  prefs: []
  type: TYPE_TB
- en: '| **INDICATED_DAMAGE** | **DAM_NOSE** | **DAM_ENG2** | **DAM_ENG3** | **DAM_ENG4**
    |'
  prefs: []
  type: TYPE_TB
- en: '| **DAM_OTHER** | **STR_ENG1** | **ING_ENG2** | **ING_ENG3** | **ING_ENG4**
    |'
  prefs: []
  type: TYPE_TB
- en: '| **STR_RAD** | **DAM_ENG1** | **STR_WING_ROT** | **STR_LG** | **STR_LGHTS**
    |'
  prefs: []
  type: TYPE_TB
- en: '| **DAM_RAD** | **ING_ENG1** | **DAM_WING_ROT** | **DAM_LG** | **DAM_LGHTS**
    |'
  prefs: []
  type: TYPE_TB
- en: '| **STR_WINDSHLD** | **STR_PROP** | **STR_FUSE** | **STR_TAIL** | **STR_OTHER**
    |'
  prefs: []
  type: TYPE_TB
- en: '| **DAM_WINDSHLD** | **DAM_PROP** | **DAM_FUSE** | **DAM_TAIL** |  |'
  prefs: []
  type: TYPE_TB
- en: Figure 2.8 – True/false columns that flag specific events for a wildlife strike
    in the STRIKE_REPORTS table
  prefs: []
  type: TYPE_NORMAL
- en: Other columns from the STRIKE_REPORTS table
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You decide to leave out the other columns from the curated **STRIKE_REPORTS**
    table because you doubt they will add value to your initial round of analysis.
    Unnecessary columns will also bloat the metadata browsing experience for end users,
    and increase the size of the dataset with unnecessary storage. The following columns
    can always be added later if they are needed: **INDEX_NR**, **REPORTED_NAME**,
    **REPORTED_TITLE**, **SOURCE**, **PERSON**, and **TRANSFER**.'
  prefs: []
  type: TYPE_NORMAL
- en: You’ve decided on what columns to keep, the data types, and user-friendly names
    for the columns. Now, you can move on to building out the curated layer, which
    will serve as the foundation for your Power BI dataset and your ML models in Power
    BI.
  prefs: []
  type: TYPE_NORMAL
- en: Building a curated table of the primary STRIKE_REPORTS data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can now start building out a curated version of the STRIKE_REPORTS metadata
    and query logic in Power Query. You will follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Reference the raw table to create a new query.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Keep only the columns that you need.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make data type changes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make column name changes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let’s begin.
  prefs: []
  type: TYPE_NORMAL
- en: Referencing the raw table to create a new query
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You will put your new query into a new group in Power Query called **Curated**
    **Reporting Queries**:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new group in Power Query called **Curated Reporting Queries** using
    the same methods by which you created the **Raw** **Data** group.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the `wildlife.accdb` source. This way, you can make changes to
    the metadata and query logic while still having an unaltered view of the source
    in Power Query.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click the **STRIKE_REPORTS (2)** table and move the query to **Curated**
    **Reporting Queries**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the right-hand panel, in `Strike Reports`. This way, your table will have
    a clean and user-friendly name.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Your **Queries** panel in Power Query should now look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.9 – A curated table of data, which will be used for datasets and
    ML queries](img/Figure_2.9_B19500.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.9 – A curated table of data, which will be used for datasets and ML
    queries
  prefs: []
  type: TYPE_NORMAL
- en: Next, you need to get rid of unnecessary columns.
  prefs: []
  type: TYPE_NORMAL
- en: Keeping only the columns that you need
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that you’ve started your new query, you can select the columns that you
    want to keep. Based on the seven batches of evaluations that you’ve completed,
    you can remove unnecessary columns. On the ribbon of Power Query, under the **Home**
    tab, in the **Manage Columns** section, you can select **Choose Columns**. You
    are able to unselect the following columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **INCIDENT_NR** | **EFFECT_OTHER** | **SOURCE** |'
  prefs: []
  type: TYPE_TB
- en: '| **INCIDENT_MONTH** | **COMMENTS** | **PERSON** |'
  prefs: []
  type: TYPE_TB
- en: '| **INCIDENT_YEAR** | **REMAINS_COLLECTED** | **LUPDATE** |'
  prefs: []
  type: TYPE_TB
- en: '| **LOCATION** | **REMAINS_SENT** | **TRANSFER** |'
  prefs: []
  type: TYPE_TB
- en: '| **REG** | **REPORTED_NAME** | **BIRD_BAND_NUMBER** |'
  prefs: []
  type: TYPE_TB
- en: '| **OTHER_SPECIFY** | **REPORTED_TITLE** | **TIME** |'
  prefs: []
  type: TYPE_TB
- en: Figure 2.10 – Columns to remove from the Strike Reports query
  prefs: []
  type: TYPE_NORMAL
- en: Now, your query only contains the columns that you plan to use for your analysis.
  prefs: []
  type: TYPE_NORMAL
- en: Data type changes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Based upon your evaluation of the **STRIKE_REPORTS** data, you decided to change
    a few of the data types for columns. On the ribbon of Power Query, under the **Transform**
    tab, in the **any columns** section, you can select **Data Type** for each of
    the columns that you highlight:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Column** | **Existing** **data type** | **New** **data type** | **Reason**
    |'
  prefs: []
  type: TYPE_TB
- en: '| **INCIDENT_DATE** | **Date/Time** | **Date** | The **Time** portion is not
    used; also makes a good foreign key as a **Date** type. |'
  prefs: []
  type: TYPE_TB
- en: '| **HEIGHT** | **Decimal** | **Integer** | All of the values are either blank
    or integers. |'
  prefs: []
  type: TYPE_TB
- en: '| **SPEED** | **Decimal** | **Integer** | All of the values are either blank
    or integers. |'
  prefs: []
  type: TYPE_TB
- en: '| **NR_INJURIES** | **Decimal** | **Integer** | Not measured in decimals. |'
  prefs: []
  type: TYPE_TB
- en: '| **NR_FATALITIES** | **Decimal** | **Integer** | Not measured in decimals.
    |'
  prefs: []
  type: TYPE_TB
- en: Figure 2.11 – Changing data types in the query to prepare them for datasets
    and ML queries
  prefs: []
  type: TYPE_NORMAL
- en: Column name changes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Good-quality metadata has several benefits for analytics, especially when end
    users are not acquainted with the source data naming conventions. In addition
    to discoverability with search tools, good naming conventions will also make tools
    such as Power BI Q&A more intuitive and valuable. Based upon your evaluations,
    you make the following changes to column names by right-clicking on each column
    and selecting **Rename…**:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Column name** | **Reporting name** | **Column name** | **Reporting name**
    |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| **INCIDENT_DATE** | Incident date | **COST_OTHER_INFL_AD****J** | Other costs
    (adjusted) |'
  prefs: []
  type: TYPE_TB
- en: '| **TIME_OF_DAY** | Time of day | **DAMAGE_LEVEL** | Damage level |'
  prefs: []
  type: TYPE_TB
- en: '| **AIRPORT_ID** | Airport ID | **EFFECT** | Effect on flight |'
  prefs: []
  type: TYPE_TB
- en: '| **AIRPORT** | Airport name | **REMARKS** | Remarks |'
  prefs: []
  type: TYPE_TB
- en: '| **STATE** | State | **NR_INJURIES** | Number of injuries |'
  prefs: []
  type: TYPE_TB
- en: '| **ENROUTE_STATE** | Enroute state | **NR_FATALITIES** | Number of fatalities
    |'
  prefs: []
  type: TYPE_TB
- en: '| **FAAREGION** | FAA region | **INGESTED_OTHER** | Ingested other |'
  prefs: []
  type: TYPE_TB
- en: '| **RUNWAY** | Runway | **INDICATED_DAMAGE** | Indicated damage |'
  prefs: []
  type: TYPE_TB
- en: '| **LATITUDE** | Latitude | **STR_RAD** | Struck random |'
  prefs: []
  type: TYPE_TB
- en: '| **LONGITUDE** | Longitude | **DAM_RAD** | Damaged random |'
  prefs: []
  type: TYPE_TB
- en: '| **OPID** | Operator ID | **STR_WINDSHLD** | Struck windshield |'
  prefs: []
  type: TYPE_TB
- en: '| **OPERATOR** | Operator | **DAM_WINDSHLD** | Damaged windshield |'
  prefs: []
  type: TYPE_TB
- en: '| **AIRCRAFT** | Aircraft | **STR_NOSE** | Struck nose |'
  prefs: []
  type: TYPE_TB
- en: '| **AMA** | AMA | **DAM_NOSE** | Damaged nose |'
  prefs: []
  type: TYPE_TB
- en: '| **AMO** | AMO | **STR_ENG1** | Struck engine 1 |'
  prefs: []
  type: TYPE_TB
- en: '| **EMA** | EMA | **DAM_ENG1** | Damaged engine 1 |'
  prefs: []
  type: TYPE_TB
- en: '| **EMO** | EMO | **ING_ENG1** | Ingested engine 1 |'
  prefs: []
  type: TYPE_TB
- en: '| **AC_CLASS** | Aircraft class code | **STR_PROP** | Struck propeller |'
  prefs: []
  type: TYPE_TB
- en: '| **AC_MASS** | Aircraft mass code | **DAM_PROP** | Damaged propeller |'
  prefs: []
  type: TYPE_TB
- en: '| **TYPE_ENG** | Engine type code | **STR_ENG2** | Struck engine 2 |'
  prefs: []
  type: TYPE_TB
- en: '| **NUM_ENGS** | Number of engines | **DAM_ENG2** | Damaged engine 2 |'
  prefs: []
  type: TYPE_TB
- en: '| **ENG_1_POS** | Engine 1 position code | **ING_ENG2** | Ingested engine 2
    |'
  prefs: []
  type: TYPE_TB
- en: '| **ENG_2_POS** | Engine 2 position code | **STR_WING_ROT** | Struck wing or
    rotor |'
  prefs: []
  type: TYPE_TB
- en: '| **ENG_3_POS** | Engine 3 position code | **DAM_WING_ROT** | Damaged wing
    or rotor |'
  prefs: []
  type: TYPE_TB
- en: '| **ENG_4_POS** | Engine 4 position code | **STR_FUSE** | Struck fuselage |'
  prefs: []
  type: TYPE_TB
- en: '| **SPECIES_ID** | Species ID | **DAM_FUSE** | Damaged fuselage |'
  prefs: []
  type: TYPE_TB
- en: '| **SPECIES** | Species | **STR_ENG3** | Struck engine 3 |'
  prefs: []
  type: TYPE_TB
- en: '| **WARNED** | Warned | **DAM_ENG3** | Damaged engine 3 |'
  prefs: []
  type: TYPE_TB
- en: '| **NUM_SEEN** | Number seen | **ING_ENG3** | Ingested engine 3 |'
  prefs: []
  type: TYPE_TB
- en: '| **NUM_STRUCK** | Number struck | **STR_LG** | Struck landing gear |'
  prefs: []
  type: TYPE_TB
- en: '| **SIZE** | Size | **DAM_LG** | Damaged landing gear |'
  prefs: []
  type: TYPE_TB
- en: '| **PHASE_OF_FLIGHT** | Phase of flight | **STR_TAIL** | Struck tail |'
  prefs: []
  type: TYPE_TB
- en: '| **HEIGHT** | Height | **DAM_TAIL** | Damaged tail |'
  prefs: []
  type: TYPE_TB
- en: '| **SPEED** | Speed | **STR_ENG4** | Struck engine 4 |'
  prefs: []
  type: TYPE_TB
- en: '| **DISTANCE** | Distance | **DAM_ENG4** | Damaged engine 4 |'
  prefs: []
  type: TYPE_TB
- en: '| **SKY** | Sky | **ING_ENG4** | Ingested engine 4 |'
  prefs: []
  type: TYPE_TB
- en: '| **PRECIPITATION** | Precipitation | **STR_LGHTS** | Struck lights |'
  prefs: []
  type: TYPE_TB
- en: '| **AOS** | AOS | **DAM_LGHTS** | Damaged lights |'
  prefs: []
  type: TYPE_TB
- en: '| **COST_REPAIRS** | Cost of repairs | **STR_OTHER** | Struck other |'
  prefs: []
  type: TYPE_TB
- en: '| **COST_OTHER** | Other costs | **DAM_OTHER** | Damaged other |'
  prefs: []
  type: TYPE_TB
- en: '| **COST_REPAIRS_INFL_ADJ** | Cost of repairs (adjusted) |  |  |'
  prefs: []
  type: TYPE_TB
- en: Figure 2.12 – Name changes for the Wildlife Strike query
  prefs: []
  type: TYPE_NORMAL
- en: Now that you’ve renamed the columns that you will use for the Strike Reports
    query, you can move on to populating curated versions of the other tables of descriptive
    data.
  prefs: []
  type: TYPE_NORMAL
- en: Building curated versions of the Aircraft Type, Engine Codes, and Engine Position
    queries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Next, you will create queries for new versions of the reference (dimension)
    tables in the **Curated Reporting Queries** group of Power Query. Before starting
    these tasks, you also consider the **Date** table. The **Date** table will be
    an essential part of the Power BI dataset but is an architectural component that
    does not exist within the dataset. Therefore, it will be added to the dataset
    layer in a downstream group later in this chapter. You have moved on to another
    phase of the effort:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.13 – Moving on to the reference table queries for analytic data](img/Figure_2.13_B19500.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.13 – Moving on to the reference table queries for analytic data
  prefs: []
  type: TYPE_NORMAL
- en: 'For each of the three tables, **Aircraft Type**, **Engine Codes**, and **Engine
    Position**, in the **Raw Data** group, right-click it, select **Reference**, move
    the resulting queries to the **Curated Reporting Queries** group, and then rename
    it to include **Info** at the end of its name so that they have unique names.
    Your Power Query queries should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.14 – New queries for the curated reporting level](img/Figure_2.14_B19500.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.14 – New queries for the curated reporting level
  prefs: []
  type: TYPE_NORMAL
- en: Now, you can proceed to clean up and modify each of the queries so that they
    are suitable for building dimension tables and ML queries. For these steps, as
    an experienced Power BI user, you likely have extensive experience in cleaning
    up tables of data, which you can leverage to quickly make changes. That “Power
    BI Dashboard in a Day” class that you took with a Microsoft partner was very helpful!
  prefs: []
  type: TYPE_NORMAL
- en: The Aircraft Type Info query
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You notice in the **Aircraft Type Info** table that Power BI shows the column
    names as the first row, and there is an empty row. On the ribbon of Power Query,
    under the **Transform** tab, in the **Table** section, you can select **Use First
    Row as Header**. Next, left-click the carat next to the **Aircraft Code** column
    and unselect **(null)**. Now, your **Aircraft Type Info** table should look like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.15 – Column names added to Aircraft Type Info](img/Figure_2.15_B19500.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.15 – Column names added to Aircraft Type Info
  prefs: []
  type: TYPE_NORMAL
- en: Next, you need to query the engine position.
  prefs: []
  type: TYPE_NORMAL
- en: The Engine Position Info query
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Engine Position Info** requires exactly the same transformative steps as
    **Aircraft Type Info**. Sometimes, the headers will be promoted automatically,
    which differs slightly depending on your version of Power BI. You repeat the steps
    from the previous section, and your table should look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.16 – Curated version of the query for engine position descriptive
    information](img/Figure_2.16_B19500.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.16 – Curated version of the query for engine position descriptive information
  prefs: []
  type: TYPE_NORMAL
- en: Next, you need to query the engine codes.
  prefs: []
  type: TYPE_NORMAL
- en: The Engine Codes Info query
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The **Engine Codes Info** query needs a little bit more work:'
  prefs: []
  type: TYPE_NORMAL
- en: Select the dropdown from the upper left of the query view and remove the top
    two rows.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Use the First Row** **as Header**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Highlight **Column5** and **Column6** and then **Remove Columns**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Highlight the **Manufacturer Code** and **Engine Manufacturer** columns. Right-click
    and select **Fill** and **Down**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Left-click the caret for **Model Code** and unselect **(null)**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Your **Engine Codes Info** query should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.17 – A curated query for information about the engines on planes
    involved with wildlife strikes](img/Figure_2.17_B19500.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.17 – A curated query for information about the engines on planes involved
    with wildlife strikes
  prefs: []
  type: TYPE_NORMAL
- en: Let’s build a curated query next!
  prefs: []
  type: TYPE_NORMAL
- en: Building a curated query to populate a Date table
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Date aggregations are an important component of both Power BI and business intelligence
    tools as a whole. Understanding and recalculating trends at the level of weeks,
    months, quarters, and years adds robust analytical capabilities. Date tables can
    even be used to slice and dice data by weekends, holidays, fiscal calendars, and
    more. Power BI even has the capability to specify a table as a **Date** table
    to enable special time intelligence capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: 'A `.csv` file of **Date** data is available at the Packt GitHub site link:
    [https://github.com/PacktPublishing/Unleashing-Your-Data-with-Power-BI-Machine-Learning-and-OpenAI/tree/main/Chapter-02](https://github.com/PacktPublishing/Unleashing-Your-Data-with-Power-BI-Machine-Learning-and-OpenAI/tree/main/Chapter-02).
    Follow these steps to bring it into Power Query:'
  prefs: []
  type: TYPE_NORMAL
- en: Copy [https://raw.githubusercontent.com/PacktPublishing/Unleashing-Your-Data-with-Power-BI-Machine-Learning-and-OpenAI/main/Chapter-02/date.csv](https://raw.githubusercontent.com/PacktPublishing/Unleashing-Your-Data-with-Power-BI-Machine-Learning-and-OpenAI/main/Chapter-02/date.csv).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In Power Query, select **New Source** and then **Web**. Paste in the URL and
    hit **OK**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the preview shows, select **OK**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename the query `Date Info` and move it to the **Curated Reporting Queries**
    group in Power Query.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Use First Rows** **as Headers**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Change the data type for the following columns:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **Column name** | **Data type** | **Column name** | **Data type** |'
  prefs: []
  type: TYPE_TB
- en: '| Date | Date | Month Num | Integer |'
  prefs: []
  type: TYPE_TB
- en: '| Day Num Week | Integer | Month Year Order | Integer |'
  prefs: []
  type: TYPE_TB
- en: '| Day of Year | Integer | Month Day Num | Integer |'
  prefs: []
  type: TYPE_TB
- en: '| Week Num | Integer | Quarter Num | Integer |'
  prefs: []
  type: TYPE_TB
- en: '| Week Ending | Date | Quarter Year Order | Integer |'
  prefs: []
  type: TYPE_TB
- en: '| Week Year Order | Integer | Year | Integer |'
  prefs: []
  type: TYPE_TB
- en: Figure 2.18 – Data type changes for the Date Info table
  prefs: []
  type: TYPE_NORMAL
- en: 'Your query for a **Date** table should now look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.19 – The Date data is now available in Power Query to create a Date
    table in a Power BI dataset](img/Figure_2.19_B19500.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.19 – The Date data is now available in Power Query to create a Date
    table in a Power BI dataset
  prefs: []
  type: TYPE_NORMAL
- en: You’ve now successfully built out a layer of curated queries for your Power
    BI dataset and ML queries. The queries aren’t yet ready to be used for datasets,
    as they will still need foreign and primary key values, along with housekeeping
    tasks to deal with any potential data issues. You’re now ready to start taking
    steps for building out your Power BI dataset!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you created queries coming from the FAA Wildlife Strike data,
    which will be used as the basis for both Power BI datasets and ML training datasets.
    Throughout the chapter, you removed unnecessary columns, cleaned up the column
    names, and formatted the queries so that they can be used as tables of data.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will explore the data in these queries and create a
    semantic model in a Power BI dataset, which relates all of the data together for
    the purpose of creating a Power BI report – this will kickstart analytics on the
    FAA Wildlife Strike data.
  prefs: []
  type: TYPE_NORMAL
