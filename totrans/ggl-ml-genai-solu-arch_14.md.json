["```py\nplt.figure(figsize=(10, 6))\nsns.countplot(x='income', hue='sex', data=adult_data)\nplt.title('Income Distribution by Gender')\nplt.show()\n```", "```py\nplt.figure(figsize=(15, 8))\nsns.countplot(x='income', hue='race', data=adult_data)\nplt.title('Income Distribution by Race')\nplt.show()\n```", "```py\npivot_gender_income = adult_data.pivot_table(index='sex', \n    columns='income', values='age', aggfunc='count')\npivot_gender_income['rate'] = pivot_gender_income['>50K'] / (\n    pivot_gender_income['>50K'] + pivot_gender_income['<=50K'])\nDI = pivot_gender_income.loc['Female', 'rate'] / (\n    pivot_gender_income.loc['Male', 'rate'])\n```", "```py\nfeature_importances_ attribute to create a graph similar to that shown in *Figure 12**.3*:\n```", "```py\nfeat_importances = pd.Series(clf.feature_importances_, \n    index=X.columns)\nfeat_importances.nlargest(10).plot(kind='barh')\n```", "```py\nfeatures = ['age', 'hours-per-week']\nPartialDependenceDisplay.from_estimator(clf, X, features)\n```", "```py\nexplainer = lime_tabular.LimeTabularExplainer(\n    X_train.values, training_labels=y_train,\n    feature_names=X.columns.tolist(), \n    class_names=['<=50K', '>50K'], \n    mode='classification')\nexp = explainer.explain_instance(\n    X_test.values[0], clf.predict_proba, \n    num_features=10)\nexp.show_in_notebook()\n```", "```py\nshap_values = shap.TreeExplainer(clf).shap_values(X_test)\nshap.summary_plot(shap_values[1], X_test, plot_type=\"bar\")\n```", "```py\nendpoint = aiplatform.Endpoint(endpoint_name)\nresponse = endpoint.explain(instances=[instance_dict], parameters={})\n    for explanation in response.explanations:\n        print(\" explanation\")\n        # Feature attributions.\n        attributions = explanation.attributions\n        for attribution in attributions:\n            print(\"  attribution\")\n            print(\"   baseline_output_value:\", \n                attribution.baseline_output_value)\n            print(\"   instance_output_value:\", \n                attribution.instance_output_value)\n            # Convert feature_attributions to a dictionary and print\n            feature_attributions_dict = dict(\n                attribution.feature_attributions)\n            print(\"   feature_attributions:\", \n                feature_attributions_dict)\n            print(\"   approximation_error:\", \n                attribution.approximation_error)\n            print(\"   output_name:\", attribution.output_name)\n```", "```py\n   baseline_output_value: 0.7774810791015625\n   instance_output_value: 0.09333677589893341\n   feature_attributions: {'dense_input': [-0.1632179390639067, 0.0, -0.2642899513244629, 0.0, 0.174240517243743, 0.0, 0.0, -0.5113637685775757, 0.001784586161375046, 0.1180541321635246, -0.03459173887968063, -0.004760145395994187]}\n   approximation_error: 0.007384564012290227\n   output_name: dense_3\n```", "```py\naiplatform.Artifact.list()\n```", "```py\naiplatform.Execution.list()\naiplatform.Context.list()\n```"]