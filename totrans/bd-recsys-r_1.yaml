- en: Chapter 1. Getting Started with Recommender Systems
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: How do we buy things in our day-to-day lives? We ask our friends, research the
    product specifications, compare the product with similar products on the Internet,
    read the feedback from anonymous users, and then we make decisions. How would
    it be if there is some mechanism that does all these tasks automatically and recommends
    the products best suited for you efficiently? A recommender system or recommendation
    engine is the answer to this question.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this introductory chapter, we will define a recommender system in terms
    of the following aspects:'
  prefs: []
  type: TYPE_NORMAL
- en: Helping to develop an understanding of its definition
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Explaining its basic functions and providing a general introduction of popular
    recommender systems
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Highlighting the importance of evaluation techniques
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding recommender systems
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Have you ever given a thought to the "People you may know" feature in LinkedIn
    or Facebook? This feature recommends a list of people whom you might know, who
    are similar to you based on your friends, friends of friends in your close circle,
    geographical location, skillsets, groups, liked pages, and so on. These recommendations
    are specific to you and differ from user to user.
  prefs: []
  type: TYPE_NORMAL
- en: Recommender systems are the software tools and techniques that provide suggestions,
    such as useful products on e-commerce websites, videos on YouTube, friends' recommendations
    on Facebook, book recommendations on Amazon, news recommendations on online news
    websites, and the list goes on.
  prefs: []
  type: TYPE_NORMAL
- en: The main goal of recommender systems is to provide suggestions to online users
    to make better decisions from many alternatives available over the Web. A better
    recommender system is directed more towards personalized recommendations by taking
    into consideration the available digital footprint of the user and information
    about a product, such as specifications, feedback from the users, comparison with
    other products, and so on, before making recommendations.
  prefs: []
  type: TYPE_NORMAL
- en: The structure of the book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this book, we will learn about popular recommender systems that are used
    the most. We will also look into different machine learning techniques used when
    building recommendation engines with sample code.
  prefs: []
  type: TYPE_NORMAL
- en: 'The book is divided into 5 chapters:'
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 1](ch01.html "Chapter 1. Getting Started with Recommender Systems"),
    *Getting Started with Recommender Systems*, you will get a general introduction
    to recommender systems, such as collaborative filtering recommender systems, content-based
    recommender systems, knowledge-based recommender systems, and hybrid systems;
    it will also include a brief definition, real-world examples, and brief details
    of what one will be learning while building a recommender system.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In [Chapter 2](ch02.html "Chapter 2. Data Mining Techniques Used in Recommender
    Systems"), *Data Mining Techniques Used in Recommender Systems*, gives you an
    overview of different machine learning concepts that are commonly used in building
    a recommender system and how a data analysis problem can be solved. This chapter
    includes data preprocessing techniques, such as similarity measures, dimensionality
    reduction, data mining techniques, and its evaluation techniques. Here similarity
    measures such as Euclidean distance, Cosine distance, Pearson correlation are
    explained. We will also cover data mining algorithms such as *k*-means clustering,
    support vector machines, decision trees, bagging, boosting, and random forests,
    along with a popular dimensional reduction technique, PCA. Evaluation techniques
    such as cross validation, regularization, confusion matrix, and model comparison
    are explained in brief.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In [Chapter 3](ch03.html "Chapter 3. Recommender Systems"), *Recommender Systems*,
    we will discuss collaborative filtering recommender systems, an example for user-
    and item-based recommender systems, using the `recommenderlab` R package, and
    the `MovieLens` dataset. We will cover model building, which includes exploring
    data, splitting it into train and test datasets, and dealing with binary ratings.
    You will have an overview of content-based recommender systems, knowledge-based
    recommender systems, and hybrid systems.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In [Chapter 4](ch04.html "Chapter 4. Evaluating the Recommender Systems"), *Evaluating
    the Recommender Systems*, we will learn about the evaluation techniques for recommender
    systems, such as setting up the evaluation, evaluating recommender systems, and
    optimizing the parameters.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In [Chapter 5](ch05.html "Chapter 5. Case Study – Building Your Own Recommendation
    Engine"), *Case Study – Building Your Own Recommendation Engine*, we will understand
    a use case in R, which includes steps such as preparing the data, defining the
    rating matrix, building a recommender, and evaluating and optimizing a recommender.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Collaborative filtering recommender systems
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The basic idea of these systems is that, if two users share the same interests
    in the past, that is, they liked the same book, they will also have similar tastes
    in the future. If, for example, user A and user B have a similar purchase history
    and user A recently bought a book that user B has not yet seen, the basic idea
    is to propose this book to user B. The book recommendations on Amazon are one
    good example of this type of recommender system.
  prefs: []
  type: TYPE_NORMAL
- en: In this type of recommendation, filtering items from a large set of alternatives
    is done collaboratively between users preferences. Such systems are called collaborative
    filtering recommender systems.
  prefs: []
  type: TYPE_NORMAL
- en: 'While dealing with collaborative filtering recommender systems, we will learn
    about the following aspects:'
  prefs: []
  type: TYPE_NORMAL
- en: How to calculate the similarity between users
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to calculate the similarity between items
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How do we deal with new items and new users whose data is not known
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The collaborative filtering approach considers only user preferences and does
    not take into account the features or contents of the items being recommended.
    This approach requires a large set of user preferences for more accurate results.
  prefs: []
  type: TYPE_NORMAL
- en: Content-based recommender systems
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This system recommends items to users by taking the similarity of items and
    user profiles into consideration. In simpler terms, the system recommends items
    similar to those that the user has liked in the past. The similarity of items
    is calculated based on the features associated with the other compared items and
    is matched with the user's historical preferences.
  prefs: []
  type: TYPE_NORMAL
- en: As an example, we can assume that, if a user has positively rated a movie that
    belongs to the action genre, then the system can learn to recommend other movies
    from the action genre.
  prefs: []
  type: TYPE_NORMAL
- en: 'While building a content-based recommendation system, we take into consideration
    the following questions:'
  prefs: []
  type: TYPE_NORMAL
- en: How do we create similarity between items?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How do we create and update user profiles continuously?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This technique doesn't take into consideration the user's neighborhood preferences.
    Hence, it doesn't require a large user group's preference for items for better
    recommendation accuracy. It only considers the user's past preferences and the
    properties/features of the items.
  prefs: []
  type: TYPE_NORMAL
- en: Knowledge-based recommender systems
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: These types of recommender systems are employed in specific domains where the
    purchase history of the users is smaller. In such systems, the algorithm takes
    into consideration the knowledge about the items, such as features, user preferences
    asked explicitly, and recommendation criteria, before giving recommendations.
    The accuracy of the model is judged based on how useful the recommended item is
    to the user. Take, for example, a scenario in which you are building a recommender
    system that recommends household electronics, such as air conditioners, where
    most of the users will be first timers. In this case, the system considers features
    of the items, and user profiles are generated by obtaining additional information
    from the users, such as specifications, and then recommendations are made. These
    types of system are called constraint-based recommender systems, which we will
    learn more about in subsequent chapters.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before building these types of recommender systems, we take into consideration
    the following questions:'
  prefs: []
  type: TYPE_NORMAL
- en: What kind of information about the items is taken into the model?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How are user preferences captured explicitly?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hybrid systems
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We build hybrid recommender systems by combining various recommender systems
    to build a more robust system. By combining various recommender systems, we can
    eliminate the disadvantages of one system with the advantages of another system
    and thus build a more robust system. For example, by combining collaborative filtering
    methods, where the model fails when new items don't have ratings, with content-based
    systems, where feature information about the items is available, new items can
    be recommended more accurately and efficiently.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before building a hybrid model, we consider the following questions:'
  prefs: []
  type: TYPE_NORMAL
- en: What techniques should be combined to achieve the business solution?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How should we combine various techniques and their results for better predictions?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Evaluation techniques
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before rolling out the recommender system to the users, how do we ensure that
    the system is efficient or accurate? What is the base on which we state that the
    system is good? As stated earlier, the goal of any recommendation system is to
    recommend more relevant and useful items to the user. A lot of research has been
    happening in developing new methods to evaluate the recommender systems to improve
    the accuracy of the systems.
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 4](ch04.html "Chapter 4. Evaluating the Recommender Systems"), *Evaluating
    the Recommender Systems*, we will learn about the different evaluation metrics
    employed to evaluate the recommender systems, these include setting up the evaluation,
    evaluating recommender systems, optimizing the parameters. This chapter also focuses
    on how important evaluating the system is during the design and development phases
    of building recommender systems and the guidelines to be followed in selecting
    an algorithm based on the available information about the items and the problem
    statement. This chapter also covers the different experimental setups in which
    recommender systems are evaluated.
  prefs: []
  type: TYPE_NORMAL
- en: A case study
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In [Chapter 5](ch05.html "Chapter 5. Case Study – Building Your Own Recommendation
    Engine"), *Case Study – Building Your Own Recommendation Engine*, we take a case
    study and build a recommender system step by step as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: We take a real-life case and understand the problem statement and its domain
    aspects
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We then perform the data preparation, data source identification, and data cleansing
    step
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, we select an algorithm for the recommender system
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We then look into the design and development aspects while building the model
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, we evaluate and test the recommender system
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The implementation of the recommender system is done using R, and code samples
    will be provided in the book. At the end of this chapter, you will be confident
    enough to build your own recommendation engine.
  prefs: []
  type: TYPE_NORMAL
- en: The future scope
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the final chapter, I will wrap up by giving the summary of the book and the
    topics covered. We will focus on the future scope of the research that you will
    have to undertake. Then we will provide a brief introduction to the current research
    topics and advancements happening in the field of recommendation systems. I will
    also list book references and online resources during the course of this book.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you read a synopsis of the popular recommender systems available
    on the market. In the next chapter, you will learn about the different machine
    learning techniques used in recommender systems.
  prefs: []
  type: TYPE_NORMAL
