- en: Chapter 8. Troubleshooting and Best Practices
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 8 章. 故障排除和最佳实践
- en: Errors are an inevitable part of the development cycle—be it a website or a
    mobile application. Sometimes they are logical, syntactical, or even careless
    mistakes. Spending a lot of time on debugging or correcting errors can distract
    you and affect your productivity significantly. In this chapter, we will discuss
    some common errors that developers face while building applications. This can
    significantly reduce the time spent on debugging your code. Also, it is very important
    to build applications that are efficient. The second half of this chapter will
    deal with a few guidelines that can increase the performance of your applications.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 错误是开发周期中不可避免的一部分——无论是网站还是移动应用程序。有时它们是逻辑错误、语法错误，甚至是粗心大意的错误。花费大量时间进行调试或纠正错误可能会分散你的注意力，并显著影响你的生产力。在本章中，我们将讨论开发者在构建应用程序时面临的一些常见错误。这可以显著减少调试代码所花费的时间。此外，构建高效的应用程序非常重要。本章的后半部分将讨论一些可以提高应用程序性能的指导方针。
- en: Troubleshooting errors
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 故障排除错误
- en: This section talks about different possible errors that developers face while
    building an Android application, such as permission errors, and how to use **Logcat**
    to debug the code.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本节讨论开发者在构建 Android 应用程序时可能遇到的不同可能的错误，例如权限错误，以及如何使用 **Logcat** 调试代码。
- en: Permission errors
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 权限错误
- en: Every application in the Android ecosystem needs the user's permission to perform
    any critical operations involving user data, such as using the Internet or the
    camera, just to name a few. To ensure this, the application developers (in this
    case, us) have to request the user for permissions to perform any critical operations.
    Developers do this at the time of building the application by declaring all the
    required permissions in the Android project (more details on this will be explained
    in the following pages). While installing an application from the Play Store or
    otherwise, the user is prompted to grant or deny the permissions that the application
    requires.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Android 生态系统中，每个应用程序在执行任何涉及用户数据的临界操作（例如使用互联网或摄像头等）之前都需要用户的权限，仅举几个例子。为了确保这一点，应用程序开发者（在这种情况下，即我们）必须请求用户权限以执行任何临界操作。开发者通过在
    Android 项目中声明所有必需的权限来在构建应用程序时完成此操作（更多细节将在以下页面中解释）。当从 Play 商店或其他方式安装应用程序时，用户会被提示授予或拒绝应用程序所需的权限。
- en: Only when the user has granted all the permissions, the application can be installed
    on the mobile. This way, the user is aware of all the tasks, services, and features,
    such as using the Internet or storing data on your phone's memory, that the application
    is going to use.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 只有当用户授予所有权限后，应用程序才能在移动设备上安装。这样，用户就会了解应用程序将要使用所有任务、服务和功能，例如使用互联网或在您的手机内存中存储数据。
- en: How does Android ensure that all the necessary permissions have been granted?
    It is very likely that a developer might forget to declare a few permissions while
    building the application. To handle this, Android has a set of predefined tasks
    that require user permission before they can be performed. While generating the
    APK for the application, the code is checked for all such tasks and whether the
    corresponding permission has been declared by the developer. Once the code passes
    this test, a working APK is generated, which can be used to install the application
    on any Android phone. Even before generating the APK, which is while actually
    building the application, if a corresponding permission for the task has not been
    declared, a system exception is thrown by the debugger and the application is
    forced to close.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Android 是如何确保所有必要的权限都已授予的呢？开发者很可能在构建应用程序时忘记声明一些权限。为了处理这种情况，Android 提供了一系列预定义的任务，这些任务在执行之前需要用户权限。在生成应用程序的
    APK 时，代码会检查所有这些任务以及相应的权限是否由开发者声明。一旦代码通过这一测试，就会生成一个可用的 APK，可以用于在任意 Android 手机上安装应用程序。甚至在生成
    APK 之前，即在构建应用程序的过程中，如果未声明对应任务的权限，调试器会抛出系统异常，并强制应用程序关闭。
- en: So that was all about how permissions work, but how and where do you declare
    these permissions, and what are some common permissions that are needed while
    building applications related to computer vision or even otherwise?
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，关于权限的工作原理就讲到这里，那么你应该如何以及在哪里声明这些权限，以及构建与计算机视觉相关或其它相关应用程序时需要的一些常见权限有哪些呢？
- en: Tip
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: If you already know how to declare permissions, you can skip this part and move
    on to the next section, which is on commonly used permissions.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经知道如何声明权限，你可以跳过这部分内容，直接进入下一节，即常用权限部分。
- en: 'Permissions in an application are declared in the `AndroidManifext.xml` file
    of the Android project using the `<uses-permission>` tag. For example, if the
    application needs to connect to the Internet, the appropriate permission for it
    should be written like this:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Android 项目的 `AndroidManifest.xml` 文件中使用 `<uses-permission>` 标签声明应用程序的权限。例如，如果应用程序需要连接到互联网，则相应的权限应写作如下：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The final `AndroidManifest.xml` file should look like this:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 最终的 `AndroidManifest.xml` 文件应该看起来像这样：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Note
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Note: The permission is added within the `<application>` tag and not inside
    the `<activity>` tag.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：权限是在 `<application>` 标签内添加的，而不是在 `<activity>` 标签内。
- en: After declaring this, your application will be allowed to use your phone's Internet
    connection.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 声明此权限后，你的应用程序将能够使用手机的互联网连接。
- en: Note
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For more information on system and user permissions, refer to [http://developer.android.com/guide/topics/security/permissions.html](http://developer.android.com/guide/topics/security/permissions.html).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 有关系统和用户权限的更多信息，请参阅 [http://developer.android.com/guide/topics/security/permissions.html](http://developer.android.com/guide/topics/security/permissions.html)。
- en: Let's now move on to some of the common permissions that an Android application
    may require.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来讨论一些 Android 应用程序可能需要的常见权限。
- en: Some common permissions
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一些常用权限
- en: 'The following are some of the common permissions that are used while building
    an application:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些在构建应用程序时常用的权限：
- en: '**Permission to use the Internet**: This permission is needed when the application
    wants to access the Internet or even if it wants to create any network sockets:'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用互联网的权限**：当应用程序想要访问互联网或创建任何网络套接字时，需要此权限：'
- en: '[PRE2]'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**Read/Write to external storage**: These permissions are needed when the application
    wants to read from the phone''s internal memory or an SD card:'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**读写外部存储**：当应用程序想要从手机的内部存储或 SD 卡中读取数据时，需要这些权限：'
- en: '[PRE3]'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**Accessing the device camera**: This permission is needed when the application
    wants to access the device camera for taking a picture or a video:'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**访问设备摄像头**：当应用程序想要访问设备摄像头来拍照或录制视频时，需要此权限：'
- en: '[PRE4]'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '**Setting the orientation of the screen**: This permission is needed when the
    application wants to change the orientation of the screen from landscape to portrait
    and vice versa:'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**设置屏幕方向**：当应用程序想要将屏幕方向从横屏切换到竖屏，或反之时，需要此权限：'
- en: '[PRE5]'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '**Reading the logs**: This allows an application to read the low-level system
    log files. This proves to be helpful when debugging an application:'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**读取日志**：这允许应用程序读取低级系统日志文件。在调试应用程序时，这非常有帮助：'
- en: '[PRE6]'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: These were some of the common permissions that are needed. Some other permissions,
    such as using NFC, Bluetooth, clearing cache files, are also needed depending
    on the requirement of the application.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是一些常见的所需权限。根据应用程序的需求，还需要一些其他权限，例如使用 NFC、蓝牙、清除缓存文件等。
- en: Debugging code using Logcat
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Logcat 调试代码
- en: As mentioned earlier, the act of debugging code forms a major part of the development
    cycle and there is nothing better than having a tool that makes debugging easier.
    Logcat is one such tool that helps you put print-like statements in your code
    to check the variable values or output of certain functions. It is difficult to
    debug an Android application because it's on your phone and not on your computer.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，调试代码是开发周期的重要组成部分，拥有一个使调试更容易的工具是再好不过了。Logcat 就是这样一个工具，它可以帮助你在代码中添加类似打印的语句来检查变量值或某些函数的输出。由于
    Android 应用程序是在手机上而不是在电脑上运行，因此调试 Android 应用程序比较困难。
- en: 'The `Log` class in Android helps you print out messages to Logcat. It also
    provides you with different logging methods, such as `verbose`, `warn`, `debug`,
    `error`, and `information`. The following are the method definitions for logging
    to Logcat:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: Android 中的 `Log` 类可以帮助你将消息打印到 Logcat。它还提供了不同的日志记录方法，如 `verbose`、`warn`、`debug`、`error`
    和 `information`。以下是将日志记录到 Logcat 的方法定义：
- en: '[PRE7]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'An example of how to use the `Log` class is shown in the following code. This
    code has been taken from [https://developer.android.com/tools/debugging/debugging-studio.html](https://developer.android.com/tools/debugging/debugging-studio.html):'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码展示了如何使用 `Log` 类的示例。此代码摘自 [https://developer.android.com/tools/debugging/debugging-studio.html](https://developer.android.com/tools/debugging/debugging-studio.html)：
- en: '[PRE8]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Note
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For more information on Logcat and the `Log` class, refer to [https://developer.android.com/tools/debugging/debugging-log.html](https://developer.android.com/tools/debugging/debugging-log.html).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于Logcat和`Log`类的信息，请参阅[https://developer.android.com/tools/debugging/debugging-log.html](https://developer.android.com/tools/debugging/debugging-log.html)。
- en: Best practices
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 最佳实践
- en: A mobile platform is not as powerful as a personal computer and hence requires
    developers to be extra cautious while building applications for mobile devices.
    A badly written code can make your application sluggish, hence, it is very important
    to write the code while keeping in mind the resource constraints of a mobile device,
    such as limited RAM, limited processing capabilities, and small cache size.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 移动平台不如个人计算机强大，因此开发者在为移动设备构建应用程序时需要格外小心。糟糕的代码可以使你的应用程序变得缓慢，因此，在编写代码时，必须考虑到移动设备的资源限制，例如有限的RAM、有限的处理能力和小的缓存大小。
- en: 'Here are a list of things that can affect an application''s performance and
    should be taken care of while building an application:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些可能影响应用程序性能的事项，在构建应用程序时应注意：
- en: '**Memory leaks**: It is important to manage variables in the code properly.
    Because most of the code is written in Java, the developers need not spend much
    time on handling memory, as Java does this explicitly. While using C/C++, it becomes
    extremely important to handle variables in your code.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**内存泄漏**：在代码中正确管理变量非常重要。因为大多数代码是用Java编写的，开发者不需要在处理内存上花费太多时间，因为Java会明确地处理。当使用C/C++时，处理代码中的变量变得极其重要。'
- en: '**Duplicate data**: While handling large amounts of data in applications that
    use datasets to train machine learning algorithms, we should avoid having multiple
    copies of the same data in different forms. For example, if we have an image in
    the form of a Mat object, and we copy that object to a 2D integer array, then
    we should make sure to delete the Mat object, as it is no longer needed and uses
    the space unnecessarily. Doing this not only helps your application, but also
    other applications that are running in the background. The more free cache space—the
    more the number of background processes that can run.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**重复数据**：在处理使用数据集来训练机器学习算法的应用程序中的大量数据时，我们应该避免在不同形式中有多个相同数据的副本。例如，如果我们有一个以Mat对象形式存在的图像，并且将这个对象复制到一个二维整数数组中，那么我们应该确保删除Mat对象，因为它不再需要并且无用地占用空间。这样做不仅有助于你的应用程序，还有助于在后台运行的其他应用程序。更多的空闲缓存空间——可以运行更多后台进程的数量。'
- en: '**Network usage**: This is again a very important point. Many applications
    need to exchange data from a central server or even with other mobile phones using
    the Internet. It becomes very important to minimize the amount of data that is
    being exchanged between these devices for two reasons: First, the lesser the amount
    of data that needs to be transferred, the quicker the transfer time. This will
    make the app more responsive and the data usage will be lesser (data usage can
    be very costly at times). Second, it will reduce the amount of battery consumed
    by your mobile device.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**网络使用**：这同样是一个非常重要的点。许多应用程序需要通过互联网从中央服务器或甚至与其他手机交换数据。为了两个原因，最小化这些设备之间交换的数据量变得非常重要：首先，需要传输的数据量越少，传输时间就越快。这将使应用程序响应更快，数据使用量也会更少（有时数据使用量可能非常昂贵）。其次，这将减少你的移动设备消耗的电量。'
- en: '**Limited computational capacity**: Avoid unnecessary and redundant computations.
    For example, if your application performs some calculations on an array in multiple
    iterations and some calculations are repeated across different iterations, try
    to combine these calculations and store the result in a temporary variable so
    that it can be used across multiple iterations (without having to compute the
    result again). An important thing to note here is the trade-off between the computational
    capacity and memory capacity. It may not be possible to store every calculation
    that might be reused somewhere in the application again. It depends a lot on how
    the application is designed.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**有限的计算能力**：避免不必要的冗余计算。例如，如果你的应用程序在多次迭代中对数组进行一些计算，并且一些计算在不同迭代中重复，尝试将这些计算合并并存储在临时变量中，以便在多次迭代中使用（无需再次计算结果）。这里需要注意的一个重要问题是计算能力和内存容量之间的权衡。可能无法存储在应用程序中可能再次重用的每个计算。这很大程度上取决于应用程序的设计。'
- en: The preceding list is not exhaustive. There are a lot of other important things
    that need to be taken care of while building your application, such as handling
    images (for multimedia applications), transferring data between activities, and
    distributing work between your mobile and server (cloud infrastructure), which
    are discussed in the following pages in detail.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 上述列表并不全面。在构建应用程序时，还有许多其他重要的事情需要考虑，例如处理图像（对于多媒体应用程序）、在活动之间传输数据以及在你的移动设备和服务器（云基础设施）之间分配工作，这些问题将在以下页面中详细讨论。
- en: Handling images in Android
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 处理Android中的图像
- en: Have you ever wondered how Android applications are able to load so many images
    and yet work smoothly? In this section, we will take a look at how we can load
    images into our applications and process them, without compromising on the performance
    of the applications.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 你是否曾经想过Android应用程序是如何能够加载如此多的图像同时还能保持流畅运行的呢？在本节中，我们将探讨如何将图像加载到我们的应用程序中并处理它们，而不会影响应用程序的性能。
- en: Loading images
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 加载图像
- en: In many applications, we need to load images from the phone's memory; for example,
    in applications such as Photo Editor or activities with a lot of thumbnails. The
    problem in doing so is the amount of memory required to load these images into
    the application. A lot of times even the `ImageView` control is not able to load
    the image because of memory constraints. Hence, to avoid such issues, it is always
    better to reduce the size of the picture before loading, and Android APIs provide
    you with an easy way of doing this.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多应用程序中，我们需要从手机的内存中加载图像；例如，在照片编辑器或包含大量缩略图的活动等应用程序中。这样做的问题是需要加载这些图像到应用程序中的内存量。很多时候，即使是`ImageView`控件也因为内存限制而无法加载图像。因此，为了避免此类问题，在加载之前减小图片的大小总是更好的，Android
    API为你提供了实现这一点的简单方法。
- en: 'The following is the code used to compress or reduce the image size before
    loading it into the application:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在将图像加载到应用程序之前用于压缩或减小图像大小的代码：
- en: '[PRE9]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Processing images
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 处理图像
- en: There are many multimedia applications available on the market that provide
    users with a variety of options, ranging from changing the brightness of an image,
    cropping, resizing, and so on. It is very important for such applications to process
    images efficiently, which means that this should not affect the user experience
    and the application should not be sluggish. To avoid such issues, Android allows
    the developers to create multiple threads other than the main UI thread that can
    be used to do computationally expensive tasks in the background. Doing this does
    not affect the UI thread of your application and does not make the application
    look slow.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 市面上有许多多媒体应用程序，为用户提供从更改图像亮度、裁剪、调整大小等多种选项。对于此类应用程序来说，高效处理图像非常重要，这意味着这不应该影响用户体验，应用程序也不应该运行缓慢。为了避免这些问题，Android允许开发者创建除主UI线程之外的其他线程，这些线程可以用于在后台执行计算密集型任务。这样做不会影响应用程序的UI线程，也不会使应用程序看起来运行缓慢。
- en: 'An easy way of offloading computations on non-UI threads is to use `ASyncTasks`.
    The following is an example that illustrates how to work with `ASyncTasks`. (This
    code has been taken from [http://developer.android.com/training/displaying-bitmaps/process-bitmap.html](http://developer.android.com/training/displaying-bitmaps/process-bitmap.html)):'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在非UI线程上卸载计算的一个简单方法是使用`ASyncTasks`。以下是一个说明如何使用`ASyncTasks`的示例。（此代码摘自[http://developer.android.com/training/displaying-bitmaps/process-bitmap.html](http://developer.android.com/training/displaying-bitmaps/process-bitmap.html)）：
- en: '[PRE10]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Handling data between multiple activities
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 处理多个活动之间的数据
- en: In this section, we will take a look at the different ways of sharing data across
    multiple activities in an efficient manner. There are different ways of achieving
    this, and each of them have their own pros and cons.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探讨在多个活动之间以高效方式共享数据的不同方法。实现这一目标有多种方式，每种方法都有其优缺点。
- en: 'Here are a few ways to exchange data across activities:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些在活动之间交换数据的方法：
- en: Transferring data via Intent
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过Intent传输数据
- en: Using static fields
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用静态字段
- en: Using a database or a file
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用数据库或文件
- en: Transferring data via Intent
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通过Intent传输数据
- en: This is one of the most common ways of exchanging information across activities
    in Android.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这是Android中在活动之间交换信息最常见的方法之一。
- en: 'A new activity in Android is launched using the `Intent` class. The `Intent`
    class allows you to send the data as key-value pairs as extras to the activity
    that is being launched. An example demonstrating this is as follows:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Android 中，使用 `Intent` 类启动新的活动。`Intent` 类允许你将数据作为键值对作为额外的数据发送给正在启动的活动。以下是一个演示此功能的示例：
- en: '[PRE11]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In the preceding code, `NewActivity` is the name of the new activity that is
    being launched. The `putExtra` function takes the key and the value as the first
    and second argument, respectively.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，`NewActivity` 是正在启动的新活动的名称。`putExtra` 函数分别将键和值作为第一个和第二个参数。
- en: 'The next step is to retrieve the data in the launched activity. The code for
    doing this is as follows:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是在启动的活动中检索数据。执行此操作的代码如下：
- en: '[PRE12]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The `getStringExtra` function gets the value that corresponds to the key passed
    as an argument in the function; in this case, `Message`.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`getStringExtra` 函数获取函数中作为参数传递的键对应的值；在这种情况下，`Message`。'
- en: Using static fields
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用静态字段
- en: Another easy way of exchanging data between activities in Android is using static
    fields. The main idea behind using static fields is that they are persistent throughout
    the life of the program and they do not need any object to reference them.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Android 中，另一种在活动之间交换数据的方法是使用静态字段。使用静态字段的主要思想是它们在整个程序的生命周期中是持久的，并且不需要任何对象来引用它们。
- en: 'Here is an example of a class with static fields that can be used for exchanging
    data:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个使用静态字段进行数据交换的类的示例：
- en: '[PRE13]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The `StorageClass` function has a static field data that will store the information
    that has to be transferred to the new activity.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '`StorageClass` 函数有一个静态字段 `data`，它将存储需要传递到新活动中的信息。'
- en: 'From the launching activity:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 从启动活动：
- en: '[PRE14]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'In the launched activity:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在启动的活动：
- en: '[PRE15]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Using a database or a file
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用数据库或文件
- en: This is one of the most complex ways of exchanging data between activities.
    The idea behind this is to set up a database using SQLite or any other database
    framework, and use this as a shared resource between activities. This method requires
    you to write more code. Also, writing and reading from a database can be slower
    than the other mentioned techniques. However, this technique is better when it
    comes to sharing large amounts of data and not just simple strings or integers.
    These are a few techniques that can be used for exchanging data across multiple
    activities in an efficient manner.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这是交换活动之间数据最复杂的方式之一。其背后的想法是使用 SQLite 或任何其他数据库框架设置数据库，并将其用作活动之间的共享资源。这种方法需要你编写更多的代码。此外，从数据库写入和读取可能比其他提到的技术要慢。然而，当涉及到共享大量数据而不是简单的字符串或整数时，这种方法更好。这些是一些可以用于在多个活动之间高效交换数据的技巧。
- en: Summary
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter summarizes all the possible permissions and errors that a developer
    can face while building computer vision applications on an Android platform. We
    also looked at some best practices that can make the applications perform better.
    In the next chapter, we will try to consolidate everything that we learnt so far
    and build a simple, yet powerful, application from scratch.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 本章总结了开发者在构建基于 Android 平台的计算机视觉应用程序时可能遇到的所有可能的权限和错误。我们还探讨了可以使应用程序性能更好的最佳实践。在下一章中，我们将尝试巩固迄今为止所学的一切，从头开始构建一个简单而强大的应用程序。
