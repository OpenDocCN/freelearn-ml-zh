- en: Chapter 8. Troubleshooting and Best Practices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Errors are an inevitable part of the development cycle—be it a website or a
    mobile application. Sometimes they are logical, syntactical, or even careless
    mistakes. Spending a lot of time on debugging or correcting errors can distract
    you and affect your productivity significantly. In this chapter, we will discuss
    some common errors that developers face while building applications. This can
    significantly reduce the time spent on debugging your code. Also, it is very important
    to build applications that are efficient. The second half of this chapter will
    deal with a few guidelines that can increase the performance of your applications.
  prefs: []
  type: TYPE_NORMAL
- en: Troubleshooting errors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section talks about different possible errors that developers face while
    building an Android application, such as permission errors, and how to use **Logcat**
    to debug the code.
  prefs: []
  type: TYPE_NORMAL
- en: Permission errors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Every application in the Android ecosystem needs the user's permission to perform
    any critical operations involving user data, such as using the Internet or the
    camera, just to name a few. To ensure this, the application developers (in this
    case, us) have to request the user for permissions to perform any critical operations.
    Developers do this at the time of building the application by declaring all the
    required permissions in the Android project (more details on this will be explained
    in the following pages). While installing an application from the Play Store or
    otherwise, the user is prompted to grant or deny the permissions that the application
    requires.
  prefs: []
  type: TYPE_NORMAL
- en: Only when the user has granted all the permissions, the application can be installed
    on the mobile. This way, the user is aware of all the tasks, services, and features,
    such as using the Internet or storing data on your phone's memory, that the application
    is going to use.
  prefs: []
  type: TYPE_NORMAL
- en: How does Android ensure that all the necessary permissions have been granted?
    It is very likely that a developer might forget to declare a few permissions while
    building the application. To handle this, Android has a set of predefined tasks
    that require user permission before they can be performed. While generating the
    APK for the application, the code is checked for all such tasks and whether the
    corresponding permission has been declared by the developer. Once the code passes
    this test, a working APK is generated, which can be used to install the application
    on any Android phone. Even before generating the APK, which is while actually
    building the application, if a corresponding permission for the task has not been
    declared, a system exception is thrown by the debugger and the application is
    forced to close.
  prefs: []
  type: TYPE_NORMAL
- en: So that was all about how permissions work, but how and where do you declare
    these permissions, and what are some common permissions that are needed while
    building applications related to computer vision or even otherwise?
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you already know how to declare permissions, you can skip this part and move
    on to the next section, which is on commonly used permissions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Permissions in an application are declared in the `AndroidManifext.xml` file
    of the Android project using the `<uses-permission>` tag. For example, if the
    application needs to connect to the Internet, the appropriate permission for it
    should be written like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The final `AndroidManifest.xml` file should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Note: The permission is added within the `<application>` tag and not inside
    the `<activity>` tag.'
  prefs: []
  type: TYPE_NORMAL
- en: After declaring this, your application will be allowed to use your phone's Internet
    connection.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For more information on system and user permissions, refer to [http://developer.android.com/guide/topics/security/permissions.html](http://developer.android.com/guide/topics/security/permissions.html).
  prefs: []
  type: TYPE_NORMAL
- en: Let's now move on to some of the common permissions that an Android application
    may require.
  prefs: []
  type: TYPE_NORMAL
- en: Some common permissions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following are some of the common permissions that are used while building
    an application:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Permission to use the Internet**: This permission is needed when the application
    wants to access the Internet or even if it wants to create any network sockets:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Read/Write to external storage**: These permissions are needed when the application
    wants to read from the phone''s internal memory or an SD card:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Accessing the device camera**: This permission is needed when the application
    wants to access the device camera for taking a picture or a video:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Setting the orientation of the screen**: This permission is needed when the
    application wants to change the orientation of the screen from landscape to portrait
    and vice versa:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Reading the logs**: This allows an application to read the low-level system
    log files. This proves to be helpful when debugging an application:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: These were some of the common permissions that are needed. Some other permissions,
    such as using NFC, Bluetooth, clearing cache files, are also needed depending
    on the requirement of the application.
  prefs: []
  type: TYPE_NORMAL
- en: Debugging code using Logcat
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As mentioned earlier, the act of debugging code forms a major part of the development
    cycle and there is nothing better than having a tool that makes debugging easier.
    Logcat is one such tool that helps you put print-like statements in your code
    to check the variable values or output of certain functions. It is difficult to
    debug an Android application because it's on your phone and not on your computer.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `Log` class in Android helps you print out messages to Logcat. It also
    provides you with different logging methods, such as `verbose`, `warn`, `debug`,
    `error`, and `information`. The following are the method definitions for logging
    to Logcat:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'An example of how to use the `Log` class is shown in the following code. This
    code has been taken from [https://developer.android.com/tools/debugging/debugging-studio.html](https://developer.android.com/tools/debugging/debugging-studio.html):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For more information on Logcat and the `Log` class, refer to [https://developer.android.com/tools/debugging/debugging-log.html](https://developer.android.com/tools/debugging/debugging-log.html).
  prefs: []
  type: TYPE_NORMAL
- en: Best practices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A mobile platform is not as powerful as a personal computer and hence requires
    developers to be extra cautious while building applications for mobile devices.
    A badly written code can make your application sluggish, hence, it is very important
    to write the code while keeping in mind the resource constraints of a mobile device,
    such as limited RAM, limited processing capabilities, and small cache size.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are a list of things that can affect an application''s performance and
    should be taken care of while building an application:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Memory leaks**: It is important to manage variables in the code properly.
    Because most of the code is written in Java, the developers need not spend much
    time on handling memory, as Java does this explicitly. While using C/C++, it becomes
    extremely important to handle variables in your code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Duplicate data**: While handling large amounts of data in applications that
    use datasets to train machine learning algorithms, we should avoid having multiple
    copies of the same data in different forms. For example, if we have an image in
    the form of a Mat object, and we copy that object to a 2D integer array, then
    we should make sure to delete the Mat object, as it is no longer needed and uses
    the space unnecessarily. Doing this not only helps your application, but also
    other applications that are running in the background. The more free cache space—the
    more the number of background processes that can run.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Network usage**: This is again a very important point. Many applications
    need to exchange data from a central server or even with other mobile phones using
    the Internet. It becomes very important to minimize the amount of data that is
    being exchanged between these devices for two reasons: First, the lesser the amount
    of data that needs to be transferred, the quicker the transfer time. This will
    make the app more responsive and the data usage will be lesser (data usage can
    be very costly at times). Second, it will reduce the amount of battery consumed
    by your mobile device.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Limited computational capacity**: Avoid unnecessary and redundant computations.
    For example, if your application performs some calculations on an array in multiple
    iterations and some calculations are repeated across different iterations, try
    to combine these calculations and store the result in a temporary variable so
    that it can be used across multiple iterations (without having to compute the
    result again). An important thing to note here is the trade-off between the computational
    capacity and memory capacity. It may not be possible to store every calculation
    that might be reused somewhere in the application again. It depends a lot on how
    the application is designed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The preceding list is not exhaustive. There are a lot of other important things
    that need to be taken care of while building your application, such as handling
    images (for multimedia applications), transferring data between activities, and
    distributing work between your mobile and server (cloud infrastructure), which
    are discussed in the following pages in detail.
  prefs: []
  type: TYPE_NORMAL
- en: Handling images in Android
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Have you ever wondered how Android applications are able to load so many images
    and yet work smoothly? In this section, we will take a look at how we can load
    images into our applications and process them, without compromising on the performance
    of the applications.
  prefs: []
  type: TYPE_NORMAL
- en: Loading images
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In many applications, we need to load images from the phone's memory; for example,
    in applications such as Photo Editor or activities with a lot of thumbnails. The
    problem in doing so is the amount of memory required to load these images into
    the application. A lot of times even the `ImageView` control is not able to load
    the image because of memory constraints. Hence, to avoid such issues, it is always
    better to reduce the size of the picture before loading, and Android APIs provide
    you with an easy way of doing this.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the code used to compress or reduce the image size before
    loading it into the application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Processing images
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are many multimedia applications available on the market that provide
    users with a variety of options, ranging from changing the brightness of an image,
    cropping, resizing, and so on. It is very important for such applications to process
    images efficiently, which means that this should not affect the user experience
    and the application should not be sluggish. To avoid such issues, Android allows
    the developers to create multiple threads other than the main UI thread that can
    be used to do computationally expensive tasks in the background. Doing this does
    not affect the UI thread of your application and does not make the application
    look slow.
  prefs: []
  type: TYPE_NORMAL
- en: 'An easy way of offloading computations on non-UI threads is to use `ASyncTasks`.
    The following is an example that illustrates how to work with `ASyncTasks`. (This
    code has been taken from [http://developer.android.com/training/displaying-bitmaps/process-bitmap.html](http://developer.android.com/training/displaying-bitmaps/process-bitmap.html)):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Handling data between multiple activities
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we will take a look at the different ways of sharing data across
    multiple activities in an efficient manner. There are different ways of achieving
    this, and each of them have their own pros and cons.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are a few ways to exchange data across activities:'
  prefs: []
  type: TYPE_NORMAL
- en: Transferring data via Intent
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using static fields
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using a database or a file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Transferring data via Intent
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is one of the most common ways of exchanging information across activities
    in Android.
  prefs: []
  type: TYPE_NORMAL
- en: 'A new activity in Android is launched using the `Intent` class. The `Intent`
    class allows you to send the data as key-value pairs as extras to the activity
    that is being launched. An example demonstrating this is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, `NewActivity` is the name of the new activity that is
    being launched. The `putExtra` function takes the key and the value as the first
    and second argument, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next step is to retrieve the data in the launched activity. The code for
    doing this is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The `getStringExtra` function gets the value that corresponds to the key passed
    as an argument in the function; in this case, `Message`.
  prefs: []
  type: TYPE_NORMAL
- en: Using static fields
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Another easy way of exchanging data between activities in Android is using static
    fields. The main idea behind using static fields is that they are persistent throughout
    the life of the program and they do not need any object to reference them.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example of a class with static fields that can be used for exchanging
    data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The `StorageClass` function has a static field data that will store the information
    that has to be transferred to the new activity.
  prefs: []
  type: TYPE_NORMAL
- en: 'From the launching activity:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'In the launched activity:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Using a database or a file
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is one of the most complex ways of exchanging data between activities.
    The idea behind this is to set up a database using SQLite or any other database
    framework, and use this as a shared resource between activities. This method requires
    you to write more code. Also, writing and reading from a database can be slower
    than the other mentioned techniques. However, this technique is better when it
    comes to sharing large amounts of data and not just simple strings or integers.
    These are a few techniques that can be used for exchanging data across multiple
    activities in an efficient manner.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter summarizes all the possible permissions and errors that a developer
    can face while building computer vision applications on an Android platform. We
    also looked at some best practices that can make the applications perform better.
    In the next chapter, we will try to consolidate everything that we learnt so far
    and build a simple, yet powerful, application from scratch.
  prefs: []
  type: TYPE_NORMAL
