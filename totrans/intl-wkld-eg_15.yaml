- en: Appendix 1 – Answer Key
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This appendix provides the answer key for each set of questions at the end of
    the book's chapters. Some questions were open-ended in that they did not have
    an explicit right or wrong answer. For these questions, we have provided sample
    responses for you to evaluate against your own.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A cyber-physical solution is any interoperation between the analog and digital
    worlds. An edge solution may include cyber-physical interfaces and also interoperates
    with other entities in a network topology at a point furthest away from the topology's
    center of gravity.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Automobiles that are now edge solutions have built-in wireless communications
    for exchanging messages with a remote service for purposes of logging runtime
    operations and receiving software updates. For example, Tesla Inc. electric vehicles
    were designed from day one to be intelligent edge solutions in addition to mechanical
    vehicles.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: No, the telephone was originally a mechanical device. Despite translating analog
    audio to electrical impulses, this data was not initially processed with computers.
    Our [*Chapter 1*](B17595_01_Final_SS_ePub.xhtml#_idTextAnchor013)*,* *Introduction
    to the Data-Driven Edge with Machine Learning,* definition of cyber-physical states
    that hardware and software are combined to deliver outcomes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Edge solutions have at least one sensor or actuator for interacting with the
    analog world, some amount of compute power for processing data or instructions,
    and interact with at least one other kind of entity at a point in time.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The three primary types of tools needed to deliver intelligence workloads at
    the edge are a runtime for orchestrating edge software, a ML model and library,
    and a method for communicating with other entities.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The four key benefits in running machine learning models at the edge are improved
    latency to process data, improved availability through local autonomy, cost savings
    from reduced data transmitted to a remote service, and more support for complying
    with data governance requirements.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The primary persona in smart home solutions is the end consumer (homeowner,
    resident, or otherwise beneficiary of the solution's capabilities).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Another potential use case for ML-powered edge solutions in the home is assisted
    living. People who require additional vital sign monitoring can benefit from the
    low latency and data governance of local ML.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The primary personae of industrial solutions are the operators and maintainers
    of industrial equipment.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Another use case for industrial solutions is optimizing the use of equipment
    in order to minimize wear and tear, or maximize the output of the equipment. Industrial
    equipment often needs to run autonomously, meaning an edge ML solution can operate
    independently of any remote service that could be unavailable when a decision
    needs to be made.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: No, typically the IoT architect is responsible for coordinating how ML models
    are deployed and operated at the edge but is not responsible for their overall
    accuracy. The IoT architect works with data scientists and product owners to help
    coordinate overall solution effectiveness, which is bound with the success of
    properly trained and tested ML models.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The use of isolated services is the best practice for organizing code in edge
    ML solutions. Monolithic applications may sometimes be the right choice, depending
    on project requirements.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A benefit of decoupling services in edge architecture is limiting the behavioral
    scope of what those services do. A simple single-purpose service is easier to
    write, maintain, and reuse.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A benefit of isolating your code and dependencies from other services is the
    assurance that you won't have any dependency conflicts between your services.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A key trade-off when evaluating wired and wireless networking is power consumption.
    Wireless communication needs more power to transmit and receive messages. If the
    overall solution is wireless, this usually means reliance upon a local battery
    source for power.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A smart home device that uses both a sensor and an actuator is a motorized garage
    door. These devices use a break beam sensor to detect whether anything is in the
    path of the door as it is closed by the motor actuator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The two kinds of resources defining an IoT Greengrass component are the recipe
    and the artifacts.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: False – a component does not require an artifact. All of the logic of the component
    could be contained in the recipe life cycle scripts.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: IoT Greengrass defaults to using the root system user for storing and executing
    components so that other system users cannot interact with your component files.
    This helps ensure that your code is running untampered on the device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: True – components can be deployed to IoT Greengrass devices locally or through
    remote deployments. Local deployment is more typical in the prototyping phase
    of a project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Here are three different methods to update the `Hello, world` component: start
    a new deployment and merge in the new component configuration overriding the message
    key, update the default configuration in the recipe and redeploy, and update the
    script artifact to use a new string and redeploy.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The three network topologies common in edge solutions are star, bus, and tree.
    Hybrid topologies mix and match these topologies in localized areas of the graph.
    Our hub device uses a hybrid topology in order to communicate with the cloud but
    otherwise uses a star topology at the edge to connect local devices.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: False – IoT Greengrass does not operate at layer one of the OSI model, though
    some custom components may interact with it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A benefit of using a publish/subscribe model for exchanging messages is decoupling
    cross-awareness of other devices or components in the solution in your solution
    code. Abstracting away interactivity to topic addresses shifts interactivity away
    from a device-specific addressing scheme.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: True – IoT Greengrass can act as both a messaging client (to the cloud) and
    a messaging broker (to local devices and components).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `{"temperature": 70}` message is an example of structured data and is serializable.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Image data from a camera is an example of unstructured data. It is not serializable
    and would be transmitted as binary data.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The worst-case scenario of a compromised home network router is a man-in-the-middle
    attack where your personal data could be exfiltrated or tampered with. Because
    the traffic appears to be processed as normal, this could mean the attack remains
    undetected.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A mitigation strategy for verifying authenticity between two network devices
    is a public key infrastructure.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It is important to protect root access on a gateway device so that protected
    resources and code are not tampered with.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A downside to using containers for every component in an edge solution is an
    increase in the overall disk and memory space. It may not meet your device requirements
    to use containers in every scenario.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: IoT Greengrass provides a built-in service called **Interprocess Communication**
    (**IPC**) to let components exchange messages.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: One way to make the sensor and actuator solution more secure is to restrict
    the allowed IPC topics to just the specific topics needed for the solution instead
    of using wildcards.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To redesign this solution with a third component that will interpret sensor
    results, this new component would subscribe to the sensor's publishing topic and
    publish commands to a new topic. The actuator component would then need to be
    updated to subscribe to this new topic instead.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Static resources are those that don't change across deployments to multiple
    devices and don't change after deployment. For example, code artifacts are a static
    resource that should not be altered after deployment or altered per device in
    a single deployment. Dynamic resources are fetched at deployment, install, or
    runtime, and may be different each time they are fetched or locally altered after
    fetching. For example, the customer-specific configuration for a smart home device
    is a dynamic resource that would be fetched and vary from device to device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: IoT Greengrass component artifacts are stored in **Amazon Simple Storage Service**
    (**Amazon S3**) for reference in recipe files.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You cannot modify an artifact stored in the cloud after it has been registered
    in a component. This would break the computed digest and flag to IoT Greengrass
    that the artifact is not safe to use.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can't write over artifact files after deployment since these are considered
    static resources. There is an expectation that these artifacts remain unchanged
    since a new deployment would replace any alterations. Deployment of artifacts
    should be idempotent.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: True – devices can belong to multiple thing groups and each thing group can
    define one active deployment.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A use case for a device to receive deployments from multiple thing groups is
    to apply common components across all devices (such as logging or health analysis)
    and specific components to subsets of devices.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: True – a single component can both reset configuration and merge in a new configuration.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Moquette component deploys a local MQTT broker for connecting leaf devices.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The device shadows component synchronizes the state between the edge and the
    cloud.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The MQTT bridge component relays messages between communication channels such
    as MQTT, IPC, and the cloud.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The IoT sensor publishes messages to an MQTT topic. The MQTT bridge relays this
    to an IPC topic. The ML inference component subscribes to the IPC topic and analyzes
    data for alarm states. The ML inference component publishes new alarm messages
    to an IPC topic. A component that has access to the audio out channel of the device
    subscribes to alarm messages and plays sounds based on the alarm received.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: False – data modeling is applicable for all kinds of databases.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The benefit of performing a data modeling exercise is to select appropriate
    storage solutions such as a database and a schema.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The relevance of ETL architectures for edge solutions is that we can define
    multiple data processing paths based on the data's velocity (Lambda architecture).
    For example, an edge solution can inspect individual sensor measurements to detect
    alarming peaks while forwarding measurements in bulk to the cloud for cheaper
    storage.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: False – Lambda architecture is a pattern distinct from the Amazon Web Services
    offering of the same name.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: One benefit for data processing at the edge is to perform data cleansing and
    filtering steps on noisy analog data close to the source before incurring costs
    of transmitting and storing data on the cloud, where the data may not be used
    at all.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The minimum component of Greengrass needed to run is the nucleus.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: False – managing streams for real-time processing applies to the edge and the
    cloud.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To persist data at the edge for a longer duration of time, configure a data
    pond solution with the cheapest kind of storage available, such as a local disk.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Two benefits of domain-driven design for edge workloads are as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Maintaining a high bar of data quality as data moves throughout a multi-layered
    system
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Minimizing developer overhead by making it easier for teams delivering solutions
    to understand and be fluent in the contexts they are working in
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: False – bounded context and ubiquitous language are distinct concepts within
    domain-driven design.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The benefit of having an operational data store versus a data lake or data warehouse
    is that specific events and transactions can be indexed and queried in an operational
    data store. If all transactional data is stored in a data lake as raw input, there
    must be some additional layer to map this input to the events it represents.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A Lambda design pattern brings together streaming and a batch workflow.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The data lake strategy can be used to transform raw data in the cloud.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: False – managed services wrapping a NoSQL database provide APIs to read and
    write data.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The mediator topology is used for scenarios where a chain of steps is guided
    by a central coordinator. The broker topology is used for scenarios where data
    producers and consumers can more freely exchange data and react to events.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: One benefit of using serverless functions for processing IoT data is that only
    compute resources are consumed when there is IoT data to process. Another benefit
    is scaling up compute resources to meet the scale of surges of IoT data.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Making data available to end consumers can be done with **Business Intelligence**
    (**BI**) tools such as Amazon QuickSight, Microsoft Power BI, and Tableau.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: False – JSON is not the most optimized data format for big data processing.
    Better examples are Apache ORC and Parquet.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: An API interface on top of an operational data store could be a serverless HTTP
    API that accepts parameters for date ranges, device IDs, and sensors, and then
    runs an optimized query on the data store to return results.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: False – there are more than two types of ML systems.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The four types of ML systems are supervised, unsupervised, semi-supervised,
    and reinforcement learning. They range in utility based on how much we know about
    the input data, and whether we are training for a specific result or looking to
    see what the algorithm can find in the noise.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: False – K-means is a clustering algorithm.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The three phases of the ML project lifecycle are data collection, data preparation,
    and modeling.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Two frameworks for training ML models are TensorFlow and MXNet.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: AWS IoT Greengrass is the tool to deploy trained models from the cloud to the
    edge.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: False – Greengrass offers managed components ready for image classification.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: One anti-pattern for ML and IoT workloads is setting an expectation that a single
    person has the expertise for data preparation, ML training, and deploying solutions
    to the edge.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A strategy for developing IoT workloads with more agility is to use DevOps methodology.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: False – DevOps is a methodology first from which new tools are designed to support
    the benefits of faster software delivery with higher quality.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Two challenges for DevOps in IoT workloads are as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The edge devices are in remote locations, often outside of our direct control.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: We cannot throw away edge environments broken by a bad change and start over
    as we can with a virtual machine in the cloud.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Tools such as AWS IoT Greengrass, CloudFormation, and Terraform are used to
    design DevOps workflows between the edge and the cloud.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: True – running code at the edge in containers and in AWS Lambda functions offers
    similar benefits (though each has distinctly unique benefits, too).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Three benefits of using MLOps with IoT workloads are productivity (faster iterations     on training and deployment), reliability (using CI/CD practices improves the quality
    of deployments), and auditability (enabling end-to-end visibility of input and
    output).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The different phases of an MLOps workflow are design, model development, and
    operations.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: True – the ecosystem of MLOps and related toolchains are newer and not as mature
    as those in the DevOps ecosystem.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: AWS provides a SageMaker Edge Manager service for performing MLOps at the edge.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: False – device registration is the process of assigning an identity while device
    activation is when it comes online for the first time.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A certificate authority can be used with Greengrass to provision certificates
    for fleets of devices. I can bring my own certificate authority, use one from
    AWS, or use one from a third-party vendor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Devices can be provisioned in real time with *just-in-time* processes such as
    fleet provisioning and just-in-time provisioning using AWS IoT Core.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: False – in addition to metrics and logs, there are further monitoring techniques,
    such as a heartbeat.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A benefit of using a dashboard to view an entire fleet of devices is to identify
    outliers and take action on them in a single place, speeding up the time taken
    for recognition and resolution.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A mitigation strategy for remote troubleshooting is to set up reverse tunneling
    sessions so that operators can interact with devices over the network without
    compromising on the security of preventing inbound connections.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: AWS IoT Greengrass provides managed components such as LogManager, CloudWatch,
    and the nucleus telemetry emitter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: False – aggregation of metrics can be performed on the edge device. It is not
    required to be done in the cloud.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
