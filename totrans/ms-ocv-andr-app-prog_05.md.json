["```py\n<uses-permission android:name=\"android.permission.CAMERA\" />\n```", "```py\nandroid:screenOrientation=\"landscape\"\n```", "```py\n<LinearLayout \n\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:orientation=\"horizontal\">\n\n    <org.opencv.android.JavaCameraView\n        android:layout_width=\"fill_parent\"\n        android:layout_height=\"fill_parent\"\n        android:id=\"@+id/main_activity_surface_view\" />\n\n</LinearLayout>\n```", "```py\nprivate static final String    TAG = \"com.packtpub.masteringopencvandroid.chapter5.MainActivity\";\n\n    private static final int       VIEW_MODE_KLT_TRACKER = 0;\n    private static final int       VIEW_MODE_OPTICAL_FLOW = 1;\n\n    private int                    mViewMode;\n    private Mat                    mRgba;\n    private Mat                    mIntermediateMat;\n    private Mat                    mGray;\n    private Mat                    mPrevGray;\n\n    MatOfPoint2f prevFeatures, nextFeatures;\n    MatOfPoint features;\n\n    MatOfByte status;\n    MatOfFloat err;\n\n    private MenuItem               mItemPreviewOpticalFlow, mItemPreviewKLT;\n\n    private CameraBridgeViewBase   mOpenCvCameraView;\n```", "```py\nprivate BaseLoaderCallback  mLoaderCallback = new BaseLoaderCallback(this) {\n        @Override\n        public void onManagerConnected(int status) {\n            switch (status) {\n                case LoaderCallbackInterface.SUCCESS:\n                {\n                    Log.i(TAG, \"OpenCV loaded successfully\");\n\n                    mOpenCvCameraView.enableView();\n                } break;\n                default:\n                {\n                    super.onManagerConnected(status);\n                } break;\n            }\n        }\n    };\n```", "```py\nOpenCVLoader.initAsync(OpenCVLoader.OPENCV_VERSION_2_4_10, this, mLoaderCallback);\n```", "```py\ngetWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);\n```", "```py\nmOpenCvCameraView = (CameraBridgeViewBase) findViewById(R.id.main_activity_surface_view);\nmOpenCvCameraView.setCvCameraViewListener(this);\n```", "```py\npublic class MainActivity extends Activity implements CvCameraViewListener2\n```", "```py\nmItemPreviewKLT = menu.add(\"KLT Tracker\");\nmItemPreviewOpticalFlow = menu.add(\"Optical Flow\");\n```", "```py\nif (item == mItemPreviewOpticalFlow) {\n            mViewMode = VIEW_MODE_OPTICAL_FLOW;\n            resetVars();\n        } else if (item == mItemPreviewKLT){\n            mViewMode = VIEW_MODE_KLT_TRACKER;\n            resetVars();\n        }\n\n        return true;\n```", "```py\nprivate void resetVars(){\n        mPrevGray = new Mat(mGray.rows(), mGray.cols(), CvType.CV_8UC1);\n        features = new MatOfPoint();\n        prevFeatures = new MatOfPoint2f();\n        nextFeatures = new MatOfPoint2f();\n        status = new MatOfByte();\n        err = new MatOfFloat();\n    }\n```", "```py\nif (mOpenCvCameraView != null)\n            mOpenCvCameraView.disableView();\n```", "```py\npublic void onCameraViewStarted(int width, int height) {\n        mRgba = new Mat(height, width, CvType.CV_8UC4);\n        mIntermediateMat = new Mat(height, width, CvType.CV_8UC4);\n        mGray = new Mat(height, width, CvType.CV_8UC1);\n        resetVars();\n    }\n```", "```py\npublic void onCameraViewStopped() {\n        mRgba.release();\n        mGray.release();\n        mIntermediateMat.release();\n    }\n```", "```py\npublic Mat onCameraFrame(CvCameraViewFrame inputFrame) {\n        final int viewMode = mViewMode;\n        switch (viewMode) {\n            case VIEW_MODE_OPTICAL_FLOW:\n```", "```py\n                mGray = inputFrame.gray();\n                if(features.toArray().length==0){\n                    int rowStep = 50, colStep = 100;\n                    int nRows = mGray.rows()/rowStep, nCols = mGray.cols()/colStep;\n\n                    Point points[] = new Point[nRows*nCols];\n                    for(int i=0; i<nRows; i++){\n                        for(int j=0; j<nCols; j++){\n                            points[i*nCols+j]=new Point(j*colStep, i*rowStep);\n                        }\n                    }\n\n                    features.fromArray(points);\n\n                    prevFeatures.fromList(features.toList());\n                    mPrevGray = mGray.clone();\n                    break;\n                }\n```", "```py\n                nextFeatures.fromArray(prevFeatures.toArray());\n                Video.calcOpticalFlowPyrLK(mPrevGray, mGray, prevFeatures, nextFeatures, status, err);\n```", "```py\n                List<Point> prevList=features.toList(), nextList=nextFeatures.toList();\n                Scalar color = new Scalar(255);\n\n                for(int i = 0; i<prevList.size(); i++){\n                    Core.line(mGray, prevList.get(i), nextList.get(i), color);\n                }\n```", "```py\n                mPrevGray = mGray.clone();\n                break;\ndefault: mViewMode = VIEW_MODE_OPTICAL_FLOW;\n```", "```py\nreturn mGray;\n```", "```py\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<ScrollView\n\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\" >\n    <LinearLayout\n        android:layout_height=\"match_parent\"\n        android:layout_width=\"match_parent\"\n        android:orientation=\"vertical\" >\n\n        <Button\n            android:id=\"@+id/bPyramids\"\n            android:layout_height=\"wrap_content\"\n            android:layout_width=\"wrap_content\"\n            android:text=\"Image Pyramids\" />\n\n        <Button\n            android:id=\"@+id/bOptFlowKLT\"\n            android:layout_height=\"wrap_content\"\n            android:layout_width=\"wrap_content\"\n            android:text=\"Optical Flow and KLT Tracker\" />\n\n    </LinearLayout>\n</ScrollView>\n```", "```py\nButton bPyramids, bOptFlowKLT;\n        bPyramids = (Button) findViewById(R.id.bPyramids);\n        bOptFlowKLT = (Button) findViewById(R.id.bOptFlowKLT);\n        bOptFlowKLT.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                Intent i = new Intent(getApplicationContext(), MainActivity.class);\n                startActivity(i);\n            }\n        });\n        bPyramids.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                Intent i = new Intent(getApplicationContext(), PyramidActivity.class);\n                startActivity(i);\n            }\n        });\n```", "```py\n<ImageView\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"0dp\"\n            android:layout_weight=\"0.5\"\n            android:id=\"@+id/ivImage\" />\n        <LinearLayout\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:orientation=\"horizontal\">\n            <Button\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"wrap_content\"\n                android:layout_weight=\"0.5\"\n                android:id=\"@+id/bGaussianPyrUp\"\n                android:text=\"Gaussian Pyramid Up\"/>\n            <Button\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"wrap_content\"\n                android:layout_weight=\"0.5\"\n                android:id=\"@+id/bGaussianPyrDown\"\n                android:text=\"Gaussian Pyramid Down\"/>\n        </LinearLayout>\n\n        <LinearLayout\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:orientation=\"horizontal\">\n            <Button\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"wrap_content\"\n                android:id=\"@+id/bLaplacianPyr\"\n                android:text=\"Laplacian Pyramid\"/>\n        </LinearLayout>\n```", "```py\n@Override\n    public boolean onCreateOptionsMenu(Menu menu) {\n        getMenuInflater().inflate(R.menu.menu_pyramid, menu);\n        return true;\n    }\n\n    @Override\n    public boolean onOptionsItemSelected(MenuItem item) {\n        int id = item.getItemId();\n\n        if (id == R.id.action_load_first_image) {\n            Intent photoPickerIntent = new Intent(Intent.ACTION_PICK);\n            photoPickerIntent.setType(\"image/*\");\n            startActivityForResult(photoPickerIntent, SELECT_PHOTO);\n            return true;\n        }\n\n        return super.onOptionsItemSelected(item);\n    }\n```", "```py\nprivate final int SELECT_PHOTO = 1;\nprivate ImageView ivImage;\nMat src;\nstatic int ACTION_MODE = 0;\nstatic final int MODE_NONE = 0, MODE_GAUSSIAN_PYR_UP = 1, MODE_GAUSSIAN_PYR_DOWN = 2, MODE_LAPLACIAN_PYR = 3;\nprivate boolean srcSelected = false;\nButton bGaussianPyrUp, bGaussianPyrDown, bLaplacianPyr;\n```", "```py\nbGaussianPyrDown.setEnabled(false);\nbGaussianPyrUp.setEnabled(false);\nbLaplacianPyr.setEnabled(false);\n```", "```py\nswitch(requestCode) {\n            case SELECT_PHOTO:\n                if(resultCode == RESULT_OK){\n                    try {\n                        final Uri imageUri = imageReturnedIntent.getData();\n                        final InputStream imageStream = getContentResolver().openInputStream(imageUri);\n                        final Bitmap selectedImage = BitmapFactory.decodeStream(imageStream);\n                        src = new Mat(selectedImage.getHeight(), selectedImage.getWidth(), CvType.CV_8UC4);\n                        Utils.bitmapToMat(selectedImage, src);\n                        srcSelected = true;\n                        bGaussianPyrUp.setEnabled(true);\n                        bGaussianPyrDown.setEnabled(true);\n                        bLaplacianPyr.setEnabled(true);\n                    } catch (FileNotFoundException e) {\n                        e.printStackTrace();\n                    }\n                }\n                break;\n        }\n```", "```py\nbGaussianPyrUp.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                ACTION_MODE = MODE_GAUSSIAN_PYR_UP;\n                executeTask();\n            }\n        });\n\nbGaussianPyrDown.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                ACTION_MODE = MODE_GAUSSIAN_PYR_DOWN;\n                executeTask();\n            }\n        });\n\nbLaplacianPyr.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                ACTION_MODE = MODE_LAPLACIAN_PYR;\n                executeTask();\n            }\n        });\n```", "```py\nprivate void executeTask(){\n        if(srcSelected){\n\n            new AsyncTask<Void, Void, Bitmap>() {\n                @Override\n                protected void onPreExecute() {\n                    super.onPreExecute();\n                }\n\n                @Override\n                protected Bitmap doInBackground(Void... params) {\n                    Mat srcRes = new Mat();\n                    switch (ACTION_MODE){\n                        case MODE_GAUSSIAN_PYR_UP:\n                            Imgproc.pyrUp(src, srcRes);\n                            break;\n                        case MODE_GAUSSIAN_PYR_DOWN:\n                            Imgproc.pyrDown(src, srcRes);\n                            break;\n                        case MODE_LAPLACIAN_PYR:\n                            Imgproc.pyrDown(src, srcRes);\n                            Imgproc.pyrUp(srcRes, srcRes);\n                            Core.absdiff(src, srcRes, srcRes);\n                            break;\n                    }\n\n                    if(ACTION_MODE != 0) {\n                        Bitmap image = Bitmap.createBitmap(srcRes.cols(), srcRes.rows(), Bitmap.Config.ARGB_8888);\n\n                        Utils.matToBitmap(srcRes, image);\n                        return image;\n                    }\n                    return null;\n                }\n\n                @Override\n                protected void onPostExecute(Bitmap bitmap) {\n                      super.onPostExecute(bitmap);\n                      if(bitmap!=null) {\n                        ivImage.setImageBitmap(bitmap);\n                    }\n                }\n            }.execute();\n        }\n    }\n```", "```py\ncase VIEW_MODE_KLT_TRACKER:\n                mGray = inputFrame.gray();\n\n                if(features.toArray().length==0){\n                    Imgproc.goodFeaturesToTrack(mGray, features, 10, 0.01, 10);\n                    prevFeatures.fromList(features.toList());\n                    mPrevGray = mGray.clone();\n                    break;\n                }\n```", "```py\n                Video.calcOpticalFlowPyrLK(mPrevGray, mGray, prevFeatures, nextFeatures, status, err);\n                List<Point> drawFeature = nextFeatures.toList();\n                for(int i = 0; i<drawFeature.size(); i++){\n                    Point p = drawFeature.get(i);\n                    Core.circle(mGray, p, 5, new Scalar(255));\n                }\n```", "```py\n                mPrevGray = mGray.clone();\n                prevFeatures.fromList(nextFeatures.toList());\n                break;\n```"]