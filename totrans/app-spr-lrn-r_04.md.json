["```py\n    multiple_PM25_linear_model$coefficients\n    ```", "```py\n    (Intercept)        DEWP        TEMP         Iws \n    161.1512066   4.3841960  -5.1335111  -0.2743375\n    ```", "```py\n    multiple_PM25_linear_model$residuals\n    ```", "```py\n25            26            27            28 \n  17.95294914   32.81291348   21.38677872   26.34105878 \n           29            30            31            32\n```", "```py\n    (Intercept)        DEWP        TEMP         Iws \n    161.1512066   4.3841960  -5.1335111  -0.2743375\n    ```", "```py\n    25            26            27            28 \n      17.95294914   32.81291348   21.38677872   26.34105878 \n               29            30            31            32 \n    ```", "```py\n    25         26         27         28         29 \n    111.047051 115.187087 137.613221 154.658941 154.414781 \n            30         31         32         33         34 \n    ```", "```py\n    summary(multiple_PM25_linear_model)$r.squared\n    ```", "```py\n    [1] 0.2159579\n    ```", "```py\n       value     numdf     dendf \n    3833.506     3.000 41753.000 \n    ```", "```py\n      (Intercept)          DEWP          TEMP           Iws \n     0.000000e+00  0.000000e+00  0.000000e+00 4.279601e-224\n    ```", "```py\n    PM25 <- read.csv(\"PRSA_data_2010.1.1-2014.12.31.csv\")\n    ```", "```py\n    PM25$month <- as.factor(PM25$month)\n    ```", "```py\n    multiple_PM25_linear_model <- lm(pm2.5 ~ Iws + DEWP*TEMP*month, data = PM25)\n    ```", "```py\n    summary(multiple_PM25_linear_model)\n    ```", "```py\n    ## Call:\n    ## lm(formula = pm2.5 ~ Iws + DEWP * TEMP * month, data = PM25)\n    ## \n    ## Residuals:\n    ##     Min      1Q  Median      3Q     Max \n    ## -298.41  -42.77   -9.35   30.91  967.39 \n    ## \n    ## Coefficients:\n    ##                     Estimate Std. Error t value Pr(>|t|)\n    ...\n    ## (Intercept)        2.917e+02  4.338e+00  67.257  < 2e-16 ***\n    ## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n    ## \n    ## Residual standard error: 70.04 on 41708 degrees of freedom\n    ##   (2067 observations deleted due to missingness)\n    ## Multiple R-squared:  0.4217, Adjusted R-squared:  0.4211 \n    ## F-statistic: 633.7 on 48 and 41708 DF,  p-value: < 2.2e-16\n    ```", "```py\npar(mfrow = c(2,2))\nplot(multiple_PM25_linear_model)\n```", "```py\n    linear_function <- function(x){return (5+(12*x)-(3*x))}\n    ```", "```py\n    quadratic_function <- function(x){return (5+(12*x)-(3*(x^2)))}\n    ```", "```py\n    uniform_random_x <- runif(50, min=0, max=15)\n    ```", "```py\n    linear_values_y <- linear_function(uniform_random_x) + rnorm(50,mean = 0, sd =sqrt(2))\n    ```", "```py\n    quadratic_values_y <- quadractic_function(uniform_random_x) + rnorm(50,mean = 0, sd =sqrt(2))\n    df <- data.frame(linear_values_y, quadratic_values_y, uniform_random_x)\n    ```", "```py\n    model_df_linear <- lm(linear_values_y ~ uniform_random_x, data = df)\n    ```", "```py\n    par(mfrow = c(2,2))\n    plot(model_df_linear)\n    ```", "```py\n    model_df_quad <- lm(quadratic_values_y ~ uniform_random_x, data = df)\n    ```", "```py\n    par(mfrow = c(2,2))\n    plot(model_df_quad)\n    ```", "```py\n    PM25 <- read.csv(\"PRSA_data_2010.1.1-2014.12.31.csv\")\n    ```", "```py\n    library(quantreg)\n    ```", "```py\n    quantile_regression_PM25_all <- rq(pm2.5 ~ DEWP+TEMP+Iws, data = PM25, tau = seq(0.25,0.99,by = 0.25))\n    ```", "```py\n    summary(quantile_regression_PM25_all)\n    ```", "```py\n    ## tau: [1] 0.25\n    ## \n    ## Coefficients:\n    ##             Value     Std. Error t value   Pr(>|t|) \n    ## (Intercept)  63.62367   0.52894  120.28453   0.00000\n    ## DEWP          2.08932   0.01859  112.39914   0.00000\n    ## TEMP         -1.89485   0.02196  -86.27611   0.00000\n    ## Iws          -0.09590   0.00179  -53.59211   0.00000\n    ## \n    ## tau: [1] 0.5\n    ## \n    ## Coefficients:\n    ##             Value      Std. Error t value    Pr(>|t|)  \n    ## (Intercept)  117.37344    0.73885  158.85921    0.00000\n    ## DEWP           3.43276    0.02835  121.07849    0.00000\n    ## TEMP          -3.37448    0.03225 -104.65011    0.00000\n    ## Iws           -0.16659    0.00202  -82.56604    0.00000\n    ## \n    ## tau: [1] 0.75\n    ## \n    ## Coefficients:\n    ##             Value      Std. Error t value    Pr(>|t|)  \n    ## (Intercept)  201.16377    1.31859  152.55927    0.00000\n    ## DEWP           5.12661    0.04901  104.59430    0.00000\n    ## TEMP          -5.62333    0.05567 -101.01841    0.00000\n    ## Iws           -0.25807    0.00510  -50.55327    0.00000\n    ```", "```py\n    quantile_regression_PM25_granular <- rq(pm2.5 ~ DEWP + TEMP + Iws, data = PM25, tau = seq(0.05,0.95,by = 0.05))\n    ```", "```py\n    plot_granular <- summary(quantile_regression_PM25_granular)\n    ```", "```py\n    plot(plot_granular)\n    ```", "```py\n    quadratic_function <- function(x){return (5+(12*x)-(3*(x^2)))}\n    ```", "```py\n    uniform_random_x <- runif(50, min=0, max=15)\n    ```", "```py\n    quadratic_values_y <- quadratic_function(uniform_random_x) + rnorm(50,mean = 0, sd =sqrt(2))\n    ```", "```py\n    df <- data.frame(quadratic_values_y,uniform_random_x)\n    ```", "```py\n    library(ggplot2)\n    ggplot(df, aes(x=uniform_random_x,y=quadratic_values_y))+\n      geom_point()\n    ```", "```py\n    par(mfrow = c(2,2))\n    plot(lm(quadratic_values_y~uniform_random_x,data=df))\n    ```", "```py\n    multiple_PM25_poly_model <- lm(pm2.5 ~ DEWP^2 + TEMP + Iws + DEWP*TEMP*month, data = PM25)\n    ```", "```py\n    summary(multiple_PM25_poly_model)\n    ```", "```py\n    ## Residuals:\n    ##     Min      1Q  Median      3Q     Max \n    ## -298.41  -42.77   -9.35   30.91  967.39 \n    ## \n    ## Coefficients:\n    ##                     Estimate Std. Error t value Pr(>|t|)    \n    ## (Intercept)        2.917e+02  4.338e+00  67.257  < 2e-16 ***\n    ## DEWP               1.190e+01  2.539e-01  46.879  < 2e-16 ***\n    ## TEMP              -9.830e+00  8.806e-01 -11.164  < 2e-16 ***\n    ## Iws               -1.388e-01  7.707e-03 -18.009  < 2e-16 ***\n    ## month2            -2.388e+01  5.011e+00  -4.766 1.89e-06 ***\n    ## month3            -1.228e+02  5.165e+00 -23.780  < 2e-16 ***\n    ## DEWP:TEMP:month9   4.455e-01  6.552e-02   6.800 1.06e-11 ***\n    ## DEWP:TEMP:month10  5.066e-01  5.862e-02   8.642  < 2e-16 ***\n    ## DEWP:TEMP:month11  5.111e-02  5.526e-02   0.925  0.35500    \n    ## DEWP:TEMP:month12  1.492e-01  6.599e-02   2.261  0.02375 *  \n    ## ---\n    ## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n    ## \n    ## Residual standard error: 70.04 on 41708 degrees of freedom\n    ##   (2067 observations deleted due to missingness)\n    ## Multiple R-squared:  0.4217, Adjusted R-squared:  0.4211 \n    ## F-statistic: 633.7 on 48 and 41708 DF,  p-value: < 2.2e-16\n    ```", "```py\n    par(mfrow = c(2,2))\n    plot(multiple_PM25_poly_model)\n    ```", "```py\n    library(glmnet)\n    PM25 <- na.omit(PM25)\n    X <- as.matrix(PM25[,c(\"DEWP\",\"TEMP\",\"Iws\")])\n    Y <- PM25$pm2.5\n    ```", "```py\n    set.seed(100)\n    model_ridge = cv.glmnet(X,Y,alpha = 0,lambda = 10^seq(4,-1,-0.1))\n    ```", "```py\n    optimal_lambda <- model_ridge$lambda.min\n    ```", "```py\n    ridge_coefficients <- predict(model_ridge, s = optimal_lambda, type = \"coefficients\")\n    ridge_coefficients\n    ```", "```py\n    ## 4 x 1 sparse Matrix of class \"dgCMatrix\"\n    ##                       1\n    ## (Intercept) 160.7120263\n    ## DEWP          4.3462480\n    ## TEMP         -5.0902943\n    ## Iws          -0.2756095\n    ```", "```py\n    ridge_prediction <- predict(model_ridge, s = optimal_lambda, newx = X)\n    head(ridge_prediction)\n    ```", "```py\n             1\n    25 111.0399\n    26 115.1408\n    27 137.3708\n    28 154.2625\n    29 154.0172\n    30 158.8622\n    ```", "```py\n    set.seed(100) #Setting the seed to get similar results.\n    model_LASSO = cv.glmnet(X,Y,alpha = 1,lambda = 10^seq(4,-1,-0.1))\n    ```", "```py\n    optimal_lambda_LASSO <- model_LASSO$lambda.min\n    ```", "```py\n    LASSO_coefficients <- predict(model_LASSO, s = optimal_lambda_LASSO, type = \"coefficients\")\n    LASSO_coefficients\n    ```", "```py\n    ## 4 x 1 sparse Matrix of class \"dgCMatrix\"\n    ##                       1\n    ## (Intercept) 160.4765008\n    ## DEWP          4.3324461\n    ## TEMP         -5.0725046\n    ## Iws          -0.2739729\n    ```", "```py\n    LASSO_prediction <- predict(model_LASSO, s = optimal_lambda_LASSO, newx = X)\n    head(LASSO_prediction)\n    ```", "```py\n              1\n    25 110.9570\n    26 115.0456\n    27 137.2040\n    28 154.0434\n    29 153.7996\n    30 158.6282\n    ```", "```py\n    set.seed(100)\n    model_elanet = cv.glmnet(X,Y,alpha = 0.5,lambda = 10^seq(4,-1,-0.1))\n    ```", "```py\n    optimal_lambda_elanet <- model_LASSO$lambda.min\n    ```", "```py\n    elanet_coefficients <- predict(model_elanet, s = optimal_lambda_elanet, type = \"coefficients\")\n    elanet_coefficients\n    ```", "```py\n    ## 4 x 1 sparse Matrix of class \"dgCMatrix\"\n    ##                       1\n    ## (Intercept) 160.5950551\n    ## DEWP          4.3393969\n    ## TEMP         -5.0814722\n    ## Iws          -0.2747902\n    ```", "```py\n    elanet_prediction <- predict(model_elanet, s = optimal_lambda_elanet, newx = X)\n    ```", "```py\n    25 110.9987\n    26 115.0936\n    27 137.2880\n    28 154.1538\n    29 153.9092\n    30 158.7461\n    ```", "```py\n    multiple_PM25_linear_model <- lm(pm2.5 ~ Iws + DEWP + TEMP, data = PM25)\n    ```", "```py\n    sqrt(sum(multiple_PM25_linear_model$residuals^2)/41753)\n    ```", "```py\n    ## [1] 81.51\n    ```", "```py\n    sqrt(sum((Y-ridge_prediction)^2)/41753)\n    ```", "```py\n    ## [1] 81.51059\n    ```", "```py\n    sqrt(sum((Y-LASSO_prediction)^2)/41753)\n    ```", "```py\n    ## [1] 81.51123\n    ```", "```py\n    sqrt(sum((Y-elanet_prediction)^2)/41753)\n    ```", "```py\n    ## [1] 81.51087\n    ```", "```py\n    library(foreign)\n    ```", "```py\n    df_health <- read.dta(\"health.dta\")\n    ```", "```py\n    poisson_regression_health <- glm(NONDOCCO ~ ., data = df_health, family=poisson(link=log))\n    ```", "```py\n    summary(poisson_regression_health)\n    ```", "```py\n    ## Coefficients:##              Estimate Std. Error z value Pr(>|z|)    \n    ## (Intercept) -3.116128   0.137763 -22.620  < 2e-16 ***\n    ## SEX          0.336123   0.069605   4.829 1.37e-06 ***\n    ## AGE          0.782335   0.200369   3.904 9.44e-05 ***\n    ## INCOME      -0.123275   0.107720  -1.144 0.252459    \n    ## LEVYPLUS     0.302185   0.097209   3.109 0.001880 ** \n    ## FREEPOOR     0.009547   0.210991   0.045 0.963910    \n    ## FREEREPA     0.446621   0.114681   3.894 9.84e-05 ***\n    ## ILLNESS      0.058322   0.021474   2.716 0.006610 ** \n    ## ACTDAYS      0.098894   0.006095  16.226  < 2e-16 ***\n    ## HSCORE       0.041925   0.011613   3.610 0.000306 ***\n    ## CHCOND1      0.496751   0.086645   5.733 9.86e-09 ***\n    ## CHCOND2      1.029310   0.097262  10.583  < 2e-16 ***\n    ## ---\n    ## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n    ## \n    ## (Dispersion parameter for poisson family taken to be 1)\n    ## \n    ##     Null deviance: 6127.9  on 5189  degrees of freedom\n    ## Residual deviance: 5052.5  on 5178  degrees of freedom\n    ## AIC: 6254.3\n    ## \n    ## Number of Fisher Scoring iterations: 7\n    ```", "```py\n    library(ggplot2)\n    ```", "```py\n    df_pred_actual <- data.frame(cbind(df_health$NONDOCCO,poisson_regression_health$fitted.values))\n    ```", "```py\n    colnames(df_pred_actual) <- c(\"actual_NONDOCCO\",\"predicted_NONDOCCO\")\n    ```", "```py\n    ggplot(df_pred_actual, aes(x=actual_NONDOCCO, y =predicted_NONDOCCO))+\n       geom_point()\n    ```", "```py\n    s_mean <- mean(df_health$NONDOCCO)\n    s_mean\n    ```", "```py\n    ## [1] 0.2146435\n    ```", "```py\n    s_variance <- var(df_health$NONDOCCO)\n    s_variance\n    ```", "```py\n    ## [1] 0.931757\n    ```", "```py\n    s_variance/s_mean\n    ```", "```py\n    ## [1] 4.34095\n    ```", "```py\n    summary.glm(poisson_regression_health)$dispersion\n    ```", "```py\n    ## [1] 1\n    ```", "```py\n    library(survival)\n    ```", "```py\n    df_lung_cancer <- lung\n    ```", "```py\n    head(df_lung_cancer)\n    ```", "```py\n    ##   inst time status age sex ph.ecog ph.karno pat.karno meal.cal wt.loss\n    ## 1    3  306      2  74   1       1       90       100     1175      NA\n    ## 2    3  455      2  68   1       0       90        90     1225      15\n    ## 3    3 1010      1  56   1       0       90        90       NA      15\n    ## 4    5  210      2  57   1       1       90        60     1150      11\n    ## 5    1  883      2  60   1       0      100        90       NA       0\n    ## 6   12 1022      1  74   1       1       50        80      513       0\n    ```", "```py\n    df_lung_cancer$SurvObject <- with(df_lung_cancer, Surv(time, status == 2))\n    ```", "```py\n    cox_regression <- coxph(SurvObject ~ age + sex + ph.karno + wt.loss, data =  df_lung_cancer)\n    cox_regression\n    ```", "```py\n    ## Call:\n    ## coxph(formula = SurvObject ~ age + sex + ph.karno + wt.loss, \n    ##     data = df_lung_cancer)\n    ## \n    ## \n    ##              coef exp(coef) se(coef)     z      p\n    ## age       0.01514   1.01525  0.00984  1.54 0.1238\n    ## sex      -0.51396   0.59813  0.17441 -2.95 0.0032\n    ## ph.karno -0.01287   0.98721  0.00618 -2.08 0.0374\n    ## wt.loss  -0.00225   0.99776  0.00636 -0.35 0.7239\n    ## \n    ## Likelihood ratio test=18.8  on 4 df, p=0.000844\n    ## n= 214, number of events= 152 \n    ##    (14 observations deleted due to missingness)\n    ```"]