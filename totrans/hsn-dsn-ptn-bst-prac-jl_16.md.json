["```py\nstruct Stock <: Equity\n    symbol::String\n    name::String\nend\n\n```", "```py\nimport java.util.ArrayList;\n\npublic class Bag\n{\n    ArrayList<Object> items = new ArrayList<Object>();\n\n    public void add(final Object object) {\n        this.items.add(object);\n    }\n\n    public void addMany(final Object[] objects) {\n        for (Object obj : objects) {\n            this.add(obj);\n        }\n    }\n}\n```", "```py\npublic class CountingBag extends Bag\n{\n    int count = 0;\n\n    public void add(Object object) {\n        super.add(object);\n        this.count += 1;\n    }\n\n    public int size() {\n        return count;\n    }\n}\n```", "```py\nabstract type Vertebrate end\nabstract type Mammal <: Vertebrate end\nabstract type Reptile <: Vertebrate end\n\nstruct Cat <: Mammal \n    name\nend\n\nstruct Dog <: Mammal\n    name\nend\n\nstruct Crocodile <: Reptile \n    name\nend\n```", "```py\nBase.show(io::IO, cat::Cat) = print(io, \"Cat \", cat.name)\nBase.show(io::IO, dog::Dog) = print(io, \"Dog \", dog.name)\nBase.show(io::IO, croc::Crocodile) = print(io, \"Crocodile \", croc.name)\n```", "```py\nfunction adopt(m::Mammal)\n    println(m, \" is now adopted.\")\n    return m\nend\n```", "```py\nadopt(ms::Array{Mammal,1}) = \"adopted \" * string(ms)\n```", "```py\nadopt(Mammal[Cat(\"Felix\"), Cat(\"Garfield\")])\n```", "```py\nfunction adopt(ms::Array{T,1}) where {T <: Mammal}\n    return \"accepted same kind:\" * string(ms)\nend\n```", "```py\nfriend(m::Mammal, f::Mammal) = \"$m and $f become friends.\"\n```", "```py\nconst SignFunctions = Union{typeof(isodd),typeof(iseven)};\nmyall(f::SignFunctions, a::AbstractArray) = all(f, a);\n```", "```py\nfemale_dogs = [Dog(\"Pinky\"), Dog(\"Pinny\"), Dog(\"Moonie\")]\nfemale_cats = [Cat(\"Minnie\"), Cat(\"Queenie\"), Cat(\"Kittie\")]\n\nselect(::Type{Dog}) = rand(female_dogs)\nselect(::Type{Cat}) = rand(female_cats)\n```", "```py\nmatch(m::Mammal) = select(typeof(m))\n```", "```py\n# It's ok to kiss mammals :-)\nkiss(m::Mammal) = \"$m kissed!\"\n\n# Meet a partner\nfunction meet_partner(finder::Function, self::Mammal) \n    partner = finder(self)\n    kiss(partner)\nend\n```", "```py\nneighbor(m::Mammal) = Crocodile(\"Solomon\")\n```", "```py\nbuddy(cat::Cat) = rand([Dog(\"Astro\"), Dog(\"Goofy\"), Cat(\"Lucifer\")])\n```", "```py\nstruct PredicateFunction{T,S}\n    f::Function\nend\n```", "```py\nPredicateFunction{Number,Bool}(iseven)\n```", "```py\n(pred::PredicateFunction{T,S})(x::T; kwargs...) where {T,S} = \n    pred.f(x; kwargs...)\n```", "```py\nfunction safe_all(pred::PredicateFunction{T,S}, a::AbstractArray) where \n        {T <: Any, S <: Bool}\n    all(pred, a)\nend\n```", "```py\ntriple(x::Array{T,1}) where {T <: Real} = 3x\n```", "```py\ntriple(x::Array{T,1} where {T <: Real}) = 3x\n```", "```py\nadd(a::Array{T,1}, x::T) where {T <: Real} = (T, a .+ x)\n```", "```py\ndiagonal(x::T, y::T) where {T <: Number} = T\n```", "```py\nnot_diagonal(A::Array{T,1}, x::T, y::T) where {T <: Number} = T\n```", "```py\nmytypes1(a::Array{T,1}, x::S) where {S <: Number, T <: S} = T\nmytypes2(a::Array{T,1}, x::S) where {S <: Number, T <: S} = S\n```"]