["```py\n    make \n    ```", "```py\n    import mlflow\n    logged_model = ‘/data/artifacts/1/132e6fa332f2412d85f3cb9e6d6bc933/artifacts/model’\n    # Load model as a PyFuncModel.\n    loaded_model = mlflow.pyfunc.load_model(logged_model)\n    # Predict on a Pandas DataFrame.\n    import pandas as pd\n    loaded_model.predict(pd.DataFrame(X_test))\n    ```", "```py\n    mlflow.h2o.load_model(...)\n    mlflow.h2o.log_model(...)\n    ```", "```py\nclass RandomPredictor(mlflow.pyfunc.PythonModel):\n  def __init__(self):\n    pass\n  def fit(self):\n    pass\n  def predict(self, context, model_input):\n    return model_input.apply(\n        lambda column: random.randint(0,1))\n```", "```py\n    from sklearn import datasets, svm, metrics\n    from sklearn.model_selection import train_test_split\n    import mlflow\n    digits = datasets.load_digits()\n    n_samples = len(digits.images)\n    data = digits.images.reshape((n_samples, -1))\n    clf = svm.SVC(gamma=0.001)\n    X_train, X_test, y_train, y_test = train_test_split(\n        data, digits.target, test_size=0.5, shuffle=False)\n    mlflow.sklearn.autolog()\n    with mlflow.start_run():\n        clf.fit(X_train, y_train)\n    ```", "```py\n    # flatten the images\n    from mlflow.models.signature import infer_signature\n    with mlflow.start_run(run_name=’untuned_random_forest’):\n        …\n        signature = infer_signature(X_train, \n            wrappedModel.predict(None, X_train))\n        mlflow.pyfunc.log_model(“random_forest_model”, \n                                python_model=wrappedModel, \n                                signature=signature)\n    ```"]