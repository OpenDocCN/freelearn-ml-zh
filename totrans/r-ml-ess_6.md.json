["```py\n# load the packages\nlibrary('kknn')\nlibrary('data.table')\n```", "```py\nvalidateKnn <- function(\n  dtFeatures, # data table with the features\n  arrayFeatures, # feature names array\n  k = 10, # knn parameter\n  kernel = 'rectangular', # knn parameter\n  distance = 1 # knn parameter\n){\n\n  # 1 define the training/test set rows\n  indexTrain <- sample(\n    x=c(TRUE, FALSE),\n    size=nrow(dtFeatures),\n    replace=TRUE,\n    prob=c(0.9, 0.1)\n  )\n\n  # 2 define the training/test set\n  dtTrain <- dtFeatures[indexTrain]\n  dtTest <- dtFeatures[!indexTrain]\n\n  # 3 define the formula\n  formulaOutput <- 'language ~'\n  formulaFeatures <- paste(arrayFeatures, collapse = ' + ')\n  formulaKnn <- paste(formulaOutput, formulaFeatures)\n  formulaKnn <- formula(formulaKnn)\n\n  # 4 build the KNN model\n  modelKnn <- kknn(\n    formula = formulaKnn,\n    train = dtTrain,\n    test = dtTest,\n    k = k,\n    kernel = kernel,\n    distance = distance\n  )\n\n  # 5 defining the predicted language\n  languageFitted <- modelKnn$fitted.values\n\n  # 6 count the corrected predictions and the total\n  languageReal <- dtTest[, language]\n  nRows <- length(languageReal)\n\n  # 7 define the accuracy index\n  percCorrect <- sum(languageFitted == languageReal) / nRows\n\n  return(percCorrect)\n}\n```", "```py\n    setwd('<INSER/YOUR/DIRECTORY/PATH>\")\n    dfFeatures <- read.table(file = 'dtFeatures.txt')\n    ```", "```py\n    arrayFeatures <- names(dfFeatures)\n    arrayFeatures <- arrayFeatures[arrayFeatures != 'language']\n    ```", "```py\n# evaluate a model accuracy\nvalidateKnn(\n  dtFeatures = dtFeatures,\n  arrayFeatures = arrayFeatures[1:10],\n  k = 8\n)\n[1] 0.3571429\n\n```", "```py\ncvKnn <- function(\n  dtFeatures, # data table with the features\n  nIterations=10, # number of iterations\n  ... # feature names array and knn parameters\n){\n\n  # 1 initialize the accuracy array\n  arrayPercCorrect <- c()\n\n  for(iIteration in 1:nIterations){\n\n    # 2 build and validate the knn\n    percCorrect <- validateKnn(dtFeatures, ...)\n\n    # 3 add the accuracy to the array\n    arrayPercCorrect <- c(arrayPercCorrect, percCorrect)\n  }\n\n  return(arrayPercCorrect)\n}\n```", "```py\n# determine the accuracies\narrayPercCorrect = cvKnn(\n  dtFeatures, nIterations=500,\n  arrayFeatures=arrayFeatures\n)\n# compute the average accuracy\npercCorrectMean <- mean(arrayPercCorrect)\npercCorrectMean\n[1] 0.2941644\n\n```", "```py\n# plot the accuracy at each iteration\nplot(\n  x = arrayPercCorrect,\n  ylim = c(0, 1),\n  xlab = 'Iteration', ylab = 'Accuracy',\n  main = 'Accuracy at each iteration'\n)\n```", "```py\nhelp(abline)\nabline(h=percCorrectMean, col='red', lty='dashed')\n```", "```py\nabline(h=min(arrayPercCorrect), col='blue', lty='dashed')\nabline(h=max(arrayPercCorrect), col='blue', lty='dashed')\n```", "```py\n# plot the average accuracy until each iteration\narrayCumulate <- c()\nfor(nIter in 1:length(arrayPercCorrect)){\n  cumulateAccuracy <- mean(arrayPercCorrect[1:nIter])\n  arrayCumulate <- c(arrayCumulate, cumulateAccuracy)\n}\n```", "```py\nplot(\n  x = arrayCumulate,\n  type = 'l',\n  xlab = 'Iteration', ylab = 'Cumulate accuracy',\n  main = 'Average accuracy until each iteration'\n)\nabline(h = percCorrectMean, col = 'red', lty = 'dashed')\n```", "```py\n    # define the k to test\n    arrayK <- 1:50\n    ```", "```py\n    nIterations <- 100\n    ```", "```py\n    # validate the knn with different k\n    dtAccuracyK <- data.table()\n    for(k in arrayK)\n    {\n\n      # run the KNN and compute the accuracies\n      arrayAccuracy <- cvKnn(\n        dtFeatures,\n        nIterations=nIterations,\n        arrayFeatures = arrayFeatures,\n        k = k\n      )\n      # define the new data table rows\n      rowsAccuracyK <- data.table(\n        accuracy = arrayAccuracy,\n        k = k\n      )\n      # add the new rows to the accuracy table\n      dtAccuracyK <- rbind(\n        dtAccuracyK,\n        rowsAccuracyK\n        )\n    }\n    ```", "```py\n accuracy k\n1: 0.3636364 1\n2: 0.4545455 1\n3: 0.4000000 1\n4: 0.2727273 1\n5: 0.3000000 1\n6: 0.2500000 1\n\n```", "```py\n# plot all the accuracies\nplot(\n  x = dtAccuracyK[, k],\n  y = dtAccuracyK[, accuracy],\n  xlab = 'K', ylab = 'Accuracy',\n  main = 'KNN accuracy using different k',\n  ylim = c(0, 1),\n  col = 'grey'\n)\n```", "```py\n# compute the average accuracy\ndtCvK <- dtAccuracyK[\n  , list(accuracy = mean(accuracy)),\n  by='k'\n  ]\nView(dtCvK)\n```", "```py\n# add the average accuracy to the chart\nhelp(points)\npoints(\n  x = dtCvK[, k],\n  y = dtCvK[, accuracy],\n  pch = 16\n)\n```", "```py\n# plot the average accuracy\nplot(\n  x = dtCvK[, k],\n  y = dtCvK[, accuracy],\n  xlab = 'k', ylab = 'accuracy',\n  main = 'average knn accuracy using different k',\n  type = 'o'\n)\n```", "```py\n# identify the k performing best\nkOpt <- dtCvK[accuracy == max(accuracy), k]\nabline(v = kOpt, col = 'red')\n```", "```py\n# rank the features\nlibrary('FSelector')\ndfGains <- information.gain(\n  language~., dtFeatures\n  )\ndfGains$feature <- row.names(dfGains)\ndtGains <- data.table(dfGains)\ndtGains <- dtGains[order(attr_importance, decreasing = T)]\narrayFeatures <- dtGains[, feature]\n```", "```py\n# define the number of features to test\narrayN <- 1:length(arrayFeatures)\n```", "```py\nfor(n in arrayN)\n{\n  # 1 run the KNN and compute the accuracies\n  arrayAccuracy <- cvKnn(\n    dtFeatures,\n    nIterations = nIterations,\n    arrayFeatures = arrayFeatures[1:n],\n    k = kOpt\n  )\n\n  # 2 define the new data table rows\n  rowsAccuracyN <- data.table(\n    accuracy = arrayAccuracy,\n    n = n\n  )\n\n  # 3 add the new rows to the accuracy table\n  dtAccuracyN <- rbind(\n    dtAccuracyN,\n    rowsAccuracyN\n  )\n}\n```", "```py\n    plot(\n      x = dtAccuracyN[, n],\n      y = dtAccuracyN[, accuracy],\n      xlab = 'N', ylab = 'Accuracy',\n      main = 'KNN accuracy using different features',\n      ylim = c(0, 1),\n      col = 'grey'\n    )\n    ```", "```py\n    dtCvN <- dtAccuracyN[\n      , list(accuracy = mean(accuracy)),\n      by='n'\n      ]\n    ```", "```py\n    Points(\n      x = dtCvN[, n],\n      y = dtCvN[, accuracy],\n      xlab = 'n', ylab = 'accuracy',\n      pch = 16\n    )\n    ```", "```py\n# plot the average accuracy\nplot(\n  x = dtCvN[, n],\n  y = dtCvN[, accuracy],\n  xlab = 'N', ylab = 'Accuracy',\n  main = 'Average knn accuracy using different features',\n  type = 'o'\n)\n\n# identify the n performing best\nnOpt <- dtCvN[accuracy == max(accuracy), n]\nabline(v = nOpt, col = 'red')\n```", "```py\n    arrayK <- seq(from = 1, to =  49, by = 2)\n    ```", "```py\n    arrayN <- seq(from = 11, to = 37, by = 2)\n    ```", "```py\n    dfParameters <- expand.grid(k=arrayK, n=arrayN)\n    ```", "```py\n    dtParameters <- data.table(dfParameters)\n    ```", "```py\nhead(dtParameters)\n k  n\n1:  1 11\n2:  3 11\n3:  5 11\n4:  7 11\n5:  9 11\n6: 11 11\n\n```", "```py\n# validate the knn with different k and nFeatures\nfor(iConfig in 1:nrow(dtParameters)){  \n\n  arrayAccuracy <- cvKnn(\n    dtFeatures, nIterations = nIterations,\n    arrayFeatures = arrayFeatures[1:dtParameters[iConfig, n]],\n    k = dtParameters[iConfig, k]\n  )\n```", "```py\n  # add the average accuracy to dtParameters\n  dtParameters[iConfig, accuracy := mean(arrayAccuracy)]\n}\n```", "```py\n# reshape dtParameters into a matrix\nhelp(reshape)\n```", "```py\ndfAccuracy <- reshape(\n  data = dtParameters,\n  direction = \"wide\",\n  v.names = \"accuracy\",\n  idvar = \"n\",\n  timevar = \"k\"\n)\nView(dfAccuracy)\n```", "```py\ndfAccuracy$n <- NULL\nmatrixAccuracy <- as.matrix(dfAccuracy)\n```", "```py\nrownames(matrixAccuracy) <- arrayN\ncolnames(matrixAccuracy) <- arrayK\nView(matrixAccuracy)\n```", "```py\n# plot the performance depending on k and n\nhelp(image)\n```", "```py\nimage(\n  x = arrayN, y = arrayK, z = matrixAccuracy,\n  xlab = 'n', ylab = 'k',\n  col = heat.colors(100)\n)\n```", "```py\n# identify the best k-n combination\nkOpt <- dtParameters[accuracy == max(accuracy), k]\nnOpt <- dtParameters[accuracy == max(accuracy), n]\n```"]