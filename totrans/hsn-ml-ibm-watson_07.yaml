- en: Machine Learning Workouts on IBM Cloud
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: IBM Cloud 上的机器学习练习
- en: In this chapter, we will go through several sample machine learning (ML) exercises
    using the IBM Cloud platform to uncover the power of the **Python** language as
    the machine learning programming language of choice, and to look at the Machine
    Learning service offered by IBM Watson Studio.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将通过使用 IBM Cloud 平台进行几个机器学习（ML）练习，来揭示 Python 语言作为机器学习编程语言的选择之优势，并查看 IBM
    Watson Studio 提供的机器学习服务。
- en: This chapter will enable you to understand the practice of proper feature engineering
    as well as demonstrate the ability to run **supervised** (classification) and
    **unsupervised** (clustering) algorithms in the IBM Cloud, using IBM Watson Studio.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将使您能够理解适当的特征工程实践，并展示在 IBM Cloud 中使用 IBM Watson Studio 运行**监督**（分类）和**无监督**（聚类）算法的能力。
- en: With simple practice examples, this chapter will guide you through the steps
    for implementing various machine learning projects using IBM Watson Studio.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 通过简单的实践示例，本章将指导您使用 IBM Watson Studio 实现各种机器学习项目的步骤。
- en: 'We will break down this chapter into the following areas:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将本章内容分为以下几个部分：
- en: Watson Studio and Python
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Watson Studio 和 Python
- en: Data cleansing and preparation
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据清洗和准备
- en: A k-means clustering example
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: K-means 聚类示例
- en: A k-nearest neighbors example
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: K-最近邻示例
- en: A time series prediction example
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 时间序列预测示例
- en: Watson Studio and Python
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Watson Studio 和 Python
- en: As already mentioned, Python could very well be (currently anyway) the programming
    or scripting language most often chosen for predictive modeling and data science
    projects. A significant advance in the area of this type of computing is **Jupyter**
    **Notebook** (formerly, IPython)technology.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，Python 可能（目前确实如此）是预测建模和数据科学项目中最常选择的编程或脚本语言。这类计算领域的一个重大进步是 **Jupyter** **笔记本**（以前称为
    IPython）技术。
- en: 'A Jupyter Notebook is a web-based environment aimed at interactive computing
    where you can run small bits of code to process data, and immediately view the
    results of that code. Notebooks include all of the building blocks you need to
    work with data:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Jupyter Notebook 是一个基于网络的交互式计算环境，您可以在其中运行小块代码来处理数据，并立即查看该代码的结果。笔记本包括您处理数据所需的所有构建块：
- en: The data
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据
- en: The code computations that process the data
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理数据的代码计算
- en: Visualizations of the results (of the code computations)
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码计算结果的可视化（结果可视化）
- en: Text and rich media to enhance your understanding
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文本和丰富媒体以增强您的理解
- en: In addition, saved notebooks record how you worked with data, so you can more
    readily understand precisely what was done, reproduce those computations consistently,
    and even share your findings with others for collaboration.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，保存的笔记本记录了您如何处理数据，因此您可以更轻松地了解具体做了什么，一致地重现这些计算，甚至与他人共享您的发现以进行协作。
- en: Setting up the environment
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置环境
- en: With IBM Watson Studio, it is a pretty straightforward process to create a Python,
    Scala, or R notebook. These notebooks can then be used to analyze, clean, and
    transform data, and perform numerical simulations, statistical modeling, data
    visualization, machine learning, and other tasks.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 IBM Watson Studio，创建 Python、Scala 或 R 笔记本的过程相当直接。这些笔记本可以用来分析、清洗和转换数据，以及执行数值模拟、统计分析、数据可视化和机器学习等任务。
- en: 'To get us going with this chapter''s example projects, we need to take the
    following steps to create a new project and add a notebook in IBM Watson Studio:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让我们开始本章的示例项目，我们需要采取以下步骤在 IBM Watson Studio 中创建一个新项目并添加一个笔记本：
- en: 'Create a new project by first clicking on New project; then, from the Create
    a project page (shown as follows), find Deep Learning and then click on Create
    Project:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，点击“新建项目”，然后从“创建项目”页面（如下所示），找到深度学习并点击“创建项目”：
- en: '![](img/f7512f08-b341-49f1-aac4-50f81cac75e5.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/f7512f08-b341-49f1-aac4-50f81cac75e5.png)'
- en: 'Next, select a region for the machine learning service to run in then click
    on Select:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，选择机器学习服务运行的区域，然后点击“选择”：
- en: '![](img/321b6281-219e-44ec-a392-f6982b168c4c.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/321b6281-219e-44ec-a392-f6982b168c4c.png)'
- en: 'Name your project on the New project page (shown as follows), and then click
    on **Create**:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“新建项目”页面（如下所示）上命名您的项目，然后点击**创建**：
- en: '![](img/90e5823b-f22f-4a9a-9073-c2288db58240.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/90e5823b-f22f-4a9a-9073-c2288db58240.png)'
- en: 'Now that we have created a machine learning project, we are ready to create
    a notebook. Notebooks are considered a project asset that can be used and shared.
    To create a notebook from within the project, you click on Add to project:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经创建了一个机器学习项目，我们准备创建一个笔记本。笔记本被认为是项目资产，可以用于和共享。要在项目内创建笔记本，您点击“添加到项目”：
- en: '![](img/3170542d-a10e-4a61-b32a-b8bf88250cde.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/3170542d-a10e-4a61-b32a-b8bf88250cde.png)'
- en: 'Once you have clicked Add to project, you need to choose an asset type. In
    previous examples, we selected the DATA and DASHBOARD asset types; here we will
    choose NOTEBOOK:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦您点击“添加到项目”，您需要选择一个资产类型。在之前的示例中，我们选择了 DATA 和 DASHBOARD 资产类型；这里我们将选择 NOTEBOOK：
- en: '![](img/1cf2e20b-3d25-4498-8391-30340dbecd56.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/1cf2e20b-3d25-4498-8391-30340dbecd56.png)'
- en: 'Like creating projects, once you select NOTEBOOK as the asset type, you need
    to provide a name and description under the Name and Description options for the
    new notebook:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 就像创建项目一样，一旦您选择 NOTEBOOK 作为资产类型，您需要在“名称”和“描述”选项下为新笔记本提供名称和描述：
- en: '![](img/edb38454-59c2-4f55-bb32-be741966b743.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/edb38454-59c2-4f55-bb32-be741966b743.png)'
- en: 'In addition, in the bottom left-hand of the page, you will need to select a
    language for the notebook to use. Notice that the default is Python 3.5:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此外，在页面左下角，您需要为笔记本选择一种语言。请注意，默认为 Python 3.5：
- en: '![](img/4a16726e-d614-4ea8-bd72-553f8cded7be.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/4a16726e-d614-4ea8-bd72-553f8cded7be.png)'
- en: 'Since we will use Python in our examples, we can simply click on Create Notebook.
    Take note that IBM Watson Studio notebooks (currently) support the following runtime
    languages. Once you click on Create Notebook, the notebook instance will be created
    and initialized for use:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于我们将在示例中使用 Python，我们可以简单地点击“创建笔记本”。请注意，IBM Watson Studio 笔记本（目前）支持以下运行时语言。一旦您点击“创建笔记本”，笔记本实例将被创建并初始化以供使用：
- en: '![](img/a9e52a32-1a0f-4301-966b-18553971e9df.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/a9e52a32-1a0f-4301-966b-18553971e9df.png)'
- en: Try it out
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 尝试一下
- en: 'Once your notebook has been instantiated, you are ready to run Python commands
    and code. Take notice of a couple of things in the following screenshot. For example,
    we have entered a snip of Python code in the first **cell** of the notebook that
    iterates with a for loop and prints columns of data. The other thing to notice
    is that we have clicked on Find and add data and added a new file (winemag-data-130k-v2.csv)
    as an asset, as shown in the following screenshot:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您的笔记本实例化，您就可以运行 Python 命令和代码了。注意以下截图中的几个要点。例如，我们在笔记本的第一个**单元**中输入了一段 Python
    代码，该代码使用 for 循环迭代并打印数据列。另一件要注意的事情是我们点击了“查找并添加数据”，并添加了一个新文件（winemag-data-130k-v2.csv）作为资产，如以下截图所示：
- en: '![](img/5f1b68bc-79ce-45a8-962e-052b05884c27.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/5f1b68bc-79ce-45a8-962e-052b05884c27.png)'
- en: 'To make things easy, we can click on the link below the file name Insert to
    code and select Insert pandas DataFrame. The result is that the appropriate **Python**
    modules (pandas is a software library written for the Python programming language
    for data manipulation and analysis) are imported for us and a Python DataFrame
    is automatically defined. This is shown in the notebook cell (In [9]) in the following
    screenshot:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简化操作，我们可以在文件名下方的链接“插入代码”处点击，选择“插入 pandas DataFrame”。结果是，相应的**Python**模块（pandas
    是为 Python 编程语言编写的用于数据操作和分析的软件库）会自动为我们导入，并自动定义一个 Python DataFrame。这可以在下面的截图中的笔记本单元（In
    [9]）中看到：
- en: '![](img/672d7e9e-b743-4abb-9e8d-44aea8215219.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/672d7e9e-b743-4abb-9e8d-44aea8215219.png)'
- en: 'The output generated by the last line of code, `df_data_1.head()` is displayed
    in the notebook cell Out [9]:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一条代码 `df_data_1.head()` 生成的输出显示在笔记本单元 Out [9] 中：
- en: '![](img/0deb5d75-64e6-43de-b598-248b78704e27.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/0deb5d75-64e6-43de-b598-248b78704e27.png)'
- en: Now we have a data asset (a CVS file) loaded and accessible in our Watson Studio
    project via a DataFrame object.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经将数据资产（一个 CSV 文件）加载到我们的 Watson Studio 项目中，并通过 DataFrame 对象访问。
- en: Data cleansing and preparation
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据清洗和准备
- en: A common description for data cleansing and preparation is the work that goes
    into transforming **raw data** into a form that data scientists and analysts can
    more easily run through machine learning algorithms in an effort to uncover insights
    or make predictions based upon that data.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 数据清洗和准备的一个常见描述是将**原始数据**转换成数据科学家和分析师可以更容易地通过机器学习算法运行的形式，以努力发现洞察或基于该数据进行预测。
- en: This process can be complicated by issues such as missing or incomplete records
    or simply finding extraneous columns of information within a data source.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这个过程可能会因为诸如缺失或不完整记录或简单地在一个数据源中找到无关的信息列等问题而变得复杂。
- en: In the previous example screenshot, we can see that the DataFrame object includes
    the columns country, description, designation, points, price, province, and so
    on.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例截图中，我们可以看到DataFrame对象包括国家、描述、指定、分数、价格、省份等列。
- en: 'As an exercise designed to demonstrate how easily we can use Python within
    Watson Studio to prepare data, let''s suppose that we wanted to drop one or more
    columns from the DataFrame. To accomplish this task, we use the following Python
    statements:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一项旨在展示我们如何轻松地在Watson Studio中使用Python准备数据的练习，让我们假设我们想要从DataFrame中删除一个或多个列。为了完成这个任务，我们使用以下Python语句：
- en: '[PRE0]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The preceding simple Python commands define the column name to be dropped from
    the DataFrame, that is, points and then drop the column from the `df_data_1` DataFrame:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的简单Python命令定义了要从DataFrame中删除的列名，即分数，然后从`df_data_1` DataFrame中删除该列：
- en: '![](img/e5d8290b-33b3-44af-8b1b-ef923071a903.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/e5d8290b-33b3-44af-8b1b-ef923071a903.png)'
- en: Within IBM Watson Studio, using the notebook we created earlier in this chapter,
    we can enter and run the preceding commands, and then use the `head()` function,
    to verify that the column we indicated has actually been dropped.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在IBM Watson Studio中，使用本章前面创建的笔记本，我们可以输入并运行前面的命令，然后使用`head()`函数，以验证我们指定的列实际上已被删除。
- en: Although the preceding demonstration is simplistic and doesn't begin to break
    the surface on the process of data cleansing and preparation, it does demonstrate
    the ability to use Python easily in Watson Studio to access and manipulate data.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管前面的演示很简单，并没有开始触及数据清洗和准备过程，但它确实展示了在Watson Studio中轻松使用Python访问和操作数据的能力。
- en: Rather than continuing with additional fundamental data manipulations, we'll
    move on to looking at something a bit more complex.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 而不是继续进行更多的基本数据处理，我们将转向查看一些更复杂的内容。
- en: K-means clustering using Python
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Python进行K-means聚类
- en: To recap from [Chapter 4](630e47b4-11b7-4be9-a881-8be2cb492314.xhtml), *Machine
    Learning Workouts on IBM Cloud*, **k-means clustering** is an unsupervised machine
    learning methodology—an algorithm that is commonly used to find groups within
    **unlabeled** data. Again, since the goal here is to demonstrate how you can apply
    this methodology to some data using Python in Watson Studio, we won't bother to
    dissect the details of how k-means works, but will show a working example of the
    algorithm, using Watson Studio as a proof of concept.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 回顾[第4章](630e47b4-11b7-4be9-a881-8be2cb492314.xhtml)，“在IBM Cloud上的机器学习练习”，**k-means聚类**是一种无监督机器学习方法——一个常用于在**未标记**数据中找到组的算法。再次强调，由于这里的目的是展示您如何使用Python在Watson
    Studio中应用这种方法，我们不会深入探讨k-means是如何工作的细节，而是将展示算法的一个工作示例，使用Watson Studio作为概念验证。
- en: There are numerous examples available online and elsewhere demonstrating the
    use of Python to implement k-means logic. Here, we'll use an example that is simple
    to follow and uses available Python modules, such as `matplotlib`, `pandas`, and
    `scipy`.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在线和其他地方有大量示例演示了使用Python实现k-means逻辑。在这里，我们将使用一个简单易懂的示例，并使用可用的Python模块，如`matplotlib`、`pandas`和`scipy`。
- en: 'Our exercise, using IBM Watson Studio and the Notebook (we created in the sections
    of this chapter) will:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用IBM Watson Studio和笔记本（我们在本章的各个部分中创建的）进行的练习将：
- en: Create a DataFrame for a two-dimensional dataset
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为二维数据集创建一个DataFrame
- en: Find centroids for three clusters, and then for four clusters
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为三个簇和四个簇找到质心
- en: Add a **graphical user interface** (**GUI**) to display the results
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个**图形用户界面**（**GUI**）来显示结果
- en: The most representative point within a group is called the **centroid**. It
    is defined as the mean of the values of the points of **data** in the cluster.
    Each cluster should consist of the points of **data** closest to it.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 组内最代表性的点称为**质心**。它被定义为簇中**数据点**值的平均值。每个簇应包含离它最近的**数据点**。
- en: The Python code
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python代码
- en: 'First, we can take a look at the Python code:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们可以看一下Python代码：
- en: 'This step references `pandas` and then defines our two-dimensional DataFrame.
    Note that the data is simply two lists of numbers, defined as `x` and `y`:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此步骤引用了`pandas`并定义了我们的二维DataFrame。请注意，数据仅仅是两个数字列表，分别定义为`x`和`y`：
- en: '[PRE1]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The last command (`print(df)`) is added so that if you run the code, you'll
    get to see the output, which should match the dataset that was defined.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一条命令（`print(df)`）被添加，以便如果您运行代码，您将看到输出，它应该与定义的数据集相匹配。
- en: The next step is where we will use the `sklearn` Python module to find the centroids
    for three and then for four clusters, and the `matplotlib` module to create some
    charts to visualize the results of the algorithm.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一个步骤是我们将使用`sklearn` Python模块来找到三个和四个簇的中心，然后使用`matplotlib`模块创建一些图表来可视化算法的结果。
- en: Scikit-learn provides a range of supervised as well as unsupervised learning
    algorithms through a consistent interface in Python. The library is built upon
    the SciPy (Scientific Python). **Matplotlib** is a plotting library for Python
    and its numerical mathematics extension NumPy (Wikipedia, 2019).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: Scikit-learn通过Python中的一致接口提供了一系列监督和无监督学习算法。该库建立在SciPy（科学Python）的基础上。**Matplotlib**是Python的绘图库及其数值数学扩展NumPy（维基百科，2019年）。
- en: 'Once the DataFrame is created using the columns of data entered, the next block
    of Python code also imports the two aforementioned Python modules and specifies
    the number of clusters to create with the `KMeans` algorithm and finally uses
    `matplotlib` to generate some scatter plots:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦使用输入数据的列创建DataFrame，下一块Python代码也导入了上述两个Python模块，并指定使用`KMeans`算法创建的簇的数量，最后使用`matplotlib`生成一些散点图：
- en: '[PRE2]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The output from the preceding Python code generates the following output:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 上一段Python代码的输出生成以下结果：
- en: '![](img/a9533123-8cd6-4b3e-8098-3eb75bdc5f79.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/a9533123-8cd6-4b3e-8098-3eb75bdc5f79.png)'
- en: Observing the results
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 观察结果
- en: Note that the center of each of the three clusters (in red) represents the mean
    of all the observations that belong to that cluster. As you might also see, the
    observations that belong to a given cluster are closer to the center of that cluster,
    in comparison to the centers of other clusters.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，每个三个簇的中心（红色）代表属于该簇的所有观察值的平均值。正如你可能看到的，属于给定簇的观察值与该簇的中心更近，与其他簇的中心相比。
- en: Implementing in Watson
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Watson中实现
- en: Again, rather than dwell on the interpretation of the previous output, let's
    look at how we might be able to implement the same exercise using IBM Watson Studio.
    We could use the Notebook we created earlier in this chapter, but let's create
    a fresh new one (following the same procedure as we used earlier).
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，我们不再纠结于前一个输出的解释，而是看看我们如何能够使用IBM Watson Studio实现相同的练习。我们可以使用本章前面创建的笔记本，但让我们创建一个新的（遵循我们之前使用的相同程序）。
- en: 'Once the Notebook is open and ready, we can run the Python code we just reviewed.
    First paste the original code block into the first Notebook cell and click on
    Run:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦笔记本打开并准备就绪，我们可以运行我们刚才审查的Python代码。首先将原始代码块粘贴到第一个笔记本单元中，然后点击运行：
- en: '![](img/b149b8ea-b842-4add-92ee-4baebb557403.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/b149b8ea-b842-4add-92ee-4baebb557403.png)'
- en: 'Repeat the step but with the following code block:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 重复此步骤，但使用以下代码块：
- en: '![](img/dfd6d6bd-059c-486b-84e2-a2fbbbcbb4fc.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/dfd6d6bd-059c-486b-84e2-a2fbbbcbb4fc.png)'
- en: 'This yields the following output:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这会产生以下输出：
- en: '![](img/7f15e65f-507a-4fce-b065-29e457df3443.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/7f15e65f-507a-4fce-b065-29e457df3443.png)'
- en: Saving your work
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保存你的工作
- en: Once you are satisfied with the results, you should save your Notebook by clicking
    on File and then Save. Additionally, a nice feature is the ability to download
    the Notebook in various formats so that you can share with others who may not
    have access to Watson Studio. We will discuss this more in the next section.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你对结果满意，你应该通过点击文件然后保存来保存你的笔记本。此外，一个很棒的功能是能够以各种格式下载笔记本，这样你就可以与他人分享，他们可能没有访问Watson
    Studio的权限。我们将在下一节中进一步讨论这个问题。
- en: 'For now, try navigating to File | Download as | Python (.py), which will save
    all of the Python code blocks within the Notebook as a standard Python code file,
    which can be shared and run within other Python environments:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，尝试导航到文件 | 下载为 | Python (.py)，这将保存笔记本中的所有Python代码块作为标准的Python代码文件，可以在其他Python环境中共享和运行：
- en: '![](img/8c101e26-a377-4b63-9ec8-0d6875f613dd.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/8c101e26-a377-4b63-9ec8-0d6875f613dd.png)'
- en: K-nearest neighbors
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: K最近邻
- en: As the previous algorithm (`KMeans`) is an **unsupervised** learning methodology,
    the **k-nearest neighbors** (**KNN**) algorithm is a fundamentally simple to understand
    **supervised** machine learning methodology. The concept of the KNN algorithm
    is described commonly as classifying data by identifying its nearest neighbor
    or, my favorite analogy, you can identify or classify data by identifying who
    it associates most with or finding its closest neighbor.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 由于之前的算法（`KMeans`）是一种**无监督**学习方法，因此**k近邻**（**KNN**）算法是一种基本简单易懂的**监督**机器学习方法。KNN算法的概念通常被描述为通过识别数据的最邻近邻居来进行数据分类，或者，我最喜欢的类比，你可以通过识别或分类数据与谁关联最多或找到其最近邻来进行识别或分类。
- en: The Python code
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python 代码
- en: As we stated earlier, our objective is to demonstrate how to implement various
    types of ML algorithms within IBM Watson Studio, not provide the theory behind
    each algorithm; in addition to that, consistent with the last section, we will
    utilize an existing sample Python script set to illustrate the functionalities
    and features offered within the Watson Studio platform, and not try to create
    a new solution.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前所述，我们的目标是展示如何在 IBM Watson Studio 中实现各种类型的机器学习算法，而不是提供每个算法背后的理论；除此之外，与上一节保持一致，我们将利用现有的样本
    Python 脚本来展示 Watson Studio 平台提供的功能性和特性，而不是尝试创建一个新的解决方案。
- en: 'In this implemented example, we have to do the following:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个实现的例子中，我们必须做以下事情：
- en: Find a predefined number of training samples closest in distance to a new sample
    of data that needs to be classified
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 找到与需要分类的新数据样本距离最近的一定数量的训练样本
- en: Make sure the label (classification) of the new sample of data is defined by
    those (training sample) neighbors
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保新数据样本的标签（分类）由那些（训练样本）邻居定义
- en: Set a fixed user-defined constant for the number of neighbors that have to be
    determined
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为要确定的邻居数量设置一个固定的用户定义的常量
- en: Compute the classification using a majority vote of the nearest neighbors of
    the new sample
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用新样本的最近邻的多数投票来计算分类
- en: Implementing in Watson
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Watson 中实现
- en: Once again, following the steps used earlier in this chapter, we can open our
    machine learning project in IBM Watson Studio and create a new Notebook. From
    there, we can paste the sample Python code into cells within the Notebook and
    press Run to test each cell's code.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，按照本章前面使用的步骤，我们可以在 IBM Watson Studio 中打开我们的机器学习项目并创建一个新的笔记本。从那里，我们可以将样本 Python
    代码粘贴到笔记本中的单元格中，然后按运行来测试每个单元格的代码。
- en: 'As we''ve seen, you can use multiple cells within the Notebook to segment functional
    blocks of your code. Using the menu bar, you can also cut and paste cells, split
    and merge cells, and move a cell up or down within the Notebook. For clarity,
    an additional handy feature is to display the line numbers for each of the Python
    commands in the Notebook. You can do this by clicking the appropriate menu selection
    under Edit or View on the menu bar:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，你可以在笔记本中使用多个单元格来分割代码的功能块。使用菜单栏，你还可以剪切和粘贴单元格，拆分和合并单元格，以及将单元格在笔记本中上下移动。为了清晰起见，还有一个额外的实用功能，可以显示笔记本中每个
    Python 命令的行号。你可以通过点击菜单栏上的“编辑”或“查看”下适当菜单选择来实现这一点：
- en: '![](img/9dac38ab-7f62-4f9f-8ed0-d89b42c333db.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9dac38ab-7f62-4f9f-8ed0-d89b42c333db.png)'
- en: 'You may want to split cells to show intermediate cell outputs or combine cells
    into one cell and show the combined output. For example, in the next screenshot,
    you can see two cells, each followed by their respective outputs:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能想要拆分单元格以显示中间单元格的输出，或者将单元格合并到一个单元格中并显示合并后的输出。例如，在下一个屏幕截图中，你可以看到两个单元格，每个单元格后面都跟着它们各自的输出：
- en: '![](img/f0106308-6f4f-4030-b193-0924dd460236.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f0106308-6f4f-4030-b193-0924dd460236.png)'
- en: 'The following screenshot shows those two cells combined into one followed by
    the combined output:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了这两个单元格合并为一个，后面跟着合并后的输出：
- en: '![](img/f93916d5-3e7b-4c3a-a71d-9cc23bf54d4d.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f93916d5-3e7b-4c3a-a71d-9cc23bf54d4d.png)'
- en: Using the menu options, you can create a very well-organized, functional, and
    sharable solution. In the next section, we will use **Markdown** **tags** within
    Watson Studio to create an even more valuable solution.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 使用菜单选项，你可以创建一个非常组织良好、功能强大且易于分享的解决方案。在下一节中，我们将使用 Watson Studio 中的 **Markdown**
    **标签**来创建一个更有价值的解决方案。
- en: Exploring Markdown text
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索 Markdown 文本
- en: '**Markdown** is an easily-used markup language that is used with plain text
    to add formatting elements (headings, bulleted lists, URLs, and so on) to plain
    text without the use of a formal text editor or the use of **HTML** tags. Markdown
    is device agnostic and displays the writing format consistently across device
    types in an effort to create visual interest in the Notebook solutions you create.'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '**Markdown**是一种易于使用的标记语言，它用于纯文本，以在不使用正式文本编辑器或使用**HTML**标签的情况下添加格式化元素（标题、项目符号列表、URL等）到纯文本中。Markdown不依赖于设备，并努力在所有设备类型上以一致的方式显示写作格式，以在Notebook解决方案中创造视觉兴趣。'
- en: Let's complete our latest example case. We'll assume that all of the example
    Python code has been pasted into cells in the Notebook and we have run the solution
    in its entirety.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们完成最新的示例案例。我们假设所有示例Python代码都已粘贴到Notebook的单元格中，并且我们已经运行了解决方案的全部内容。
- en: 'Now, suppose that we want to save and share this solution with others who are
    not familiar with our project and our thought process? What we can do is insert
    additional cells within our Notebook and instead of pasting code into them, we
    can add comments and other information as explanatory text so that others can
    more easily understand what we have created. For example, take a look at the following
    screenshot:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，假设我们想要将此解决方案保存并与其他不熟悉我们的项目和思维过程的人分享？我们可以做的是在我们的Notebook中插入额外的单元格，而不是将代码粘贴到它们中，我们可以添加注释和其他信息作为解释性文本，以便其他人更容易理解我们所创建的内容。例如，看看下面的截图：
- en: '![](img/6c81edd7-defb-4fa4-b731-99ffd8713a3f.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6c81edd7-defb-4fa4-b731-99ffd8713a3f.png)'
- en: 'Let''s see how this is done by performing the following steps:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过以下步骤来查看这是如何完成的：
- en: 'We can click on the first cell in the Notebook and then click on Insert, then
    Insert Cell Above. Next click on the new cell and change the Format (of the cell)
    to Markdown:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以点击Notebook中的第一个单元格，然后点击“插入”，接着点击“在上方插入单元格”。接下来点击新的单元格，并将单元格的格式（单元格格式）更改为Markdown：
- en: '![](img/17d7faa5-2630-4961-ba22-bfa88c1b9f29.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](img/17d7faa5-2630-4961-ba22-bfa88c1b9f29.png)'
- en: 'Next, enter the `k-Nearest-Neighbor Classifier` text into the new cell:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在新单元格中输入`k-Nearest-Neighbor Classifier`文本：
- en: '![](img/a6275265-0d0d-4c40-abb8-7efe20968f6f.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a6275265-0d0d-4c40-abb8-7efe20968f6f.png)'
- en: 'Then, click on the keyboard icon and select change cell to heading 1:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，点击键盘图标并选择将单元格更改为标题1：
- en: '![](img/4f4da498-e132-45b9-887b-6d926cc69dad.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4f4da498-e132-45b9-887b-6d926cc69dad.png)'
- en: 'After you perform the preceding steps, you can see that the Markdown cell looks
    a bit different:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在执行前面的步骤之后，你可以看到Markdown单元格看起来略有不同：
- en: '![](img/3b78323c-bdf9-4dfb-ad72-47ce77f27798.png)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3b78323c-bdf9-4dfb-ad72-47ce77f27798.png)'
- en: 'Once you click on Run, you can see the results:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦点击运行，你可以看到结果：
- en: '![](img/6ab4b79a-4316-4912-a111-f460a482aeca.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6ab4b79a-4316-4912-a111-f460a482aeca.png)'
- en: 'Using common Markdown, we can proceed to interject commentary throughout the
    Notebook:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 使用常见的Markdown，我们可以继续在Notebook中插入注释：
- en: 'You can add a new cell to the top of the Notebook, convert the format to Markdown,
    then drag and drop an image to the cell (as shown below). This can be used to
    add a company logo or even a workflow diagram:'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以在Notebook的顶部添加一个新的单元格，将其格式转换为Markdown，然后拖放一张图片到单元格中（如下所示）。这可以用来添加公司标志或甚至工作流程图：
- en: '![](img/712e9f0e-b825-43b5-a58e-00c49a7acf0f.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![](img/712e9f0e-b825-43b5-a58e-00c49a7acf0f.png)'
- en: 'Using other markdowns, such as heading levels, indents, and bulleted lists,
    you can provide details about assumptions, such as the source of the data used
    and what is found within the data:'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用其他Markdown，如标题级别、缩进和项目符号列表，你可以提供有关假设的详细信息，例如使用的数据来源和数据中包含的内容：
- en: '![](img/ed57e54c-1d37-4613-b867-d804ee153b73.png)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ed57e54c-1d37-4613-b867-d804ee153b73.png)'
- en: 'Using additional, HTML-like markdowns (such as `<font color=></font>`), you
    can create markdown cells such as the following:'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用额外的类似HTML的Markdown（例如 `<font color=></font>`），你可以创建如下Markdown单元格：
- en: '![](img/35a5c059-9050-4006-be80-b16b1e7781a5.png)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![](img/35a5c059-9050-4006-be80-b16b1e7781a5.png)'
- en: 'This results in the following output:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 这将产生以下输出：
- en: '![](img/bd7e34a6-af09-4b23-9eea-b1288d70e193.png)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bd7e34a6-af09-4b23-9eea-b1288d70e193.png)'
- en: 'You can experiment with the full-featured Markdowns to see what works best
    for you. You can go to: [https://commonmark.org/help/](https://commonmark.org/help/)
    to find a full Markdown cheatsheet.'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以尝试使用全功能的Markdown，看看哪种最适合你。你可以访问：[https://commonmark.org/help/](https://commonmark.org/help/)
    以找到完整的Markdown速查表。
- en: Time series prediction example
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 时间序列预测示例
- en: In this section, our goal is to try implementing a time series model using Python
    and Watson Studio.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们的目标是尝试使用Python和Watson Studio实现一个时间序列模型。
- en: Time series analysis includes methods for analyzing time series data (of course)
    so we can extract meaningful statistics and other characteristics of the data.
    Time series forecasting is the process where we use an algorithm to predict future
    values based on previously observed values.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 时间序列分析包括分析时间序列数据的方法（当然）以便我们可以提取数据的统计意义和其他特征。时间序列预测是使用算法根据先前观察到的值预测未来值的过程。
- en: Time series analysis
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 时间序列分析
- en: Time series data may be **stationary** or **non-stationary** in nature. Stationary
    implies flat without periodic fluctuations, while non-stationary data typically
    has frequent shifts in value. You see time series analysis generally used for
    non-stationary data, such as evaluating and predicting retail sales. In this example,
    we will again utilize a study exercise (available on GitHub) to demonstrate the
    fundamental steps involved in the analysis and forecasting of retail sales data,
    as implemented with IBM Watson Studio.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 时间序列数据在本质上可能是 **平稳的** 或 **非平稳的**。平稳意味着没有周期性波动，而非平稳数据通常具有频繁的价值变化。你通常看到时间序列分析用于非平稳数据，例如评估和预测零售销售。在这个例子中，我们将再次利用一个研究练习（可在
    GitHub 上找到）来展示分析零售销售数据及其预测的基本步骤，这些步骤是通过 IBM Watson Studio 实现的。
- en: Setup
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置
- en: 'Using the (now) familiar process of adding data to our Watson Studio project,
    we''ve created a new asset using a CSV data file and, in an effort to better understand
    the data, used the Data Refinery feature to analyze, profile, and visualize our
    asset. From there (as we did in a previous *Time series analysis* section of this
    chapter), we used Insert to Code and then Insert pandas DataFrame so that Watson
    Studio would generate the code required to import the required Python modules,
    load the data (into a Python DataFrame object, named `df_data_1`) and print the
    first five rows, as shown in the following screenshot:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 使用（现在）熟悉的将数据添加到我们的 Watson Studio 项目中的过程，我们创建了一个新的资产，使用 CSV 数据文件，并为了更好地理解数据，使用了数据精炼功能来分析、描述和可视化我们的资产。从那里（正如我们在本章之前的
    *时间序列分析* 部分中所做的那样），我们使用“插入到代码”并然后插入 pandas DataFrame，以便 Watson Studio 生成导入所需 Python
    模块的代码，将数据（加载到名为 `df_data_1` 的 Python DataFrame 对象中）并打印前五行，如下面的截图所示：
- en: '![](img/2638de8e-c9fd-472d-9498-84e6cce743c3.png)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/2638de8e-c9fd-472d-9498-84e6cce743c3.png)'
- en: Data preprocessing
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据预处理
- en: 'While using the **Data Refinery** feature, we noticed that there is a column
    within the data file named `Category`, which seems to indicate the type of product
    sold (furniture, office supplies, and several others). In this example, the data
    scientist is interested in only furniture sales, so the following lines of code
    are used to filter the data and then verify if there is a reasonable amount of
    data for that category to perform a proper analysis:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 **数据精炼** 功能时，我们注意到数据文件中有一个名为 `Category` 的列，这似乎表明了所售产品的类型（家具、办公用品等）。在这个例子中，数据科学家只对家具销售感兴趣，因此以下代码行被用来过滤数据并验证该类别是否有足够的数据来进行适当的分析：
- en: '[PRE3]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The preceding code executed in Watson Studio is shown in the following screenshot,
    filtering the sales data and verifying that we have four years of furniture sales
    within this data file by showing the earliest and latest timestamp:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Watson Studio 中执行的前置代码如下所示，通过显示最早和最晚的时间戳来过滤销售数据并验证我们在这份数据文件中有四年的家具销售记录：
- en: '![](img/f0e2a5a6-6236-4945-8c43-ad0cb61dfba4.png)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/f0e2a5a6-6236-4945-8c43-ad0cb61dfba4.png)'
- en: In the selected example, the data scientist chose to use raw Python commands
    to remove (drop) columns of data not needed in the analysis, check for missing
    values, aggregate (group by) sales transactions by date, and so on. Although using
    Python scripting to accomplish these tasks is not overly complex, you can alternatively
    perform all of those tasks (and more) with the drag and drop of Watson **Data
    Refinery flow**.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在所选示例中，数据科学家选择使用原始的 Python 命令来删除（删除）分析中不需要的数据列，检查缺失值，按日期对销售交易进行汇总（按组），等等。虽然使用
    Python 脚本来完成这些任务并不特别复杂，但你也可以通过 Watson **数据精炼流程** 的拖放操作来完成所有这些任务（以及更多）。
- en: As we mentioned earlier, a Data Refinery flow is an ordered set of steps to
    cleanse, shape, and enhance a data asset. As you refine data by applying operations
    to the data, you are actually dynamically building a customized Data Refinery
    flow that can be modified in real time and saved for future use as new data becomes
    available!
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们之前提到的，数据精炼流程是一系列按顺序排列的步骤，用于净化、塑形和增强数据资产。通过应用操作来精炼数据，你实际上是在动态构建一个可以实时修改并保存以备将来使用的数据精炼流程，因为新数据变得可用！
- en: Indexing for visualization
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可视化索引
- en: 'Once the data has been properly prepared, the data scientist uses the `Pandas
    set_index` command to set the `Order Date` column, indexing the rows (of sales
    transactions) as the field we will perform the initial analysis on. In other words,
    we want to ultimately be able to predict furniture sales per month. The following
    screenshot shows the Python statements executed in our Watson project to set the
    index and print the results of the command:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦数据被适当准备，数据科学家使用`Pandas set_index`命令将`订单日期`列设置为索引，将销售交易的行（作为我们将进行初步分析的领域）进行索引。换句话说，我们最终希望能够预测每月的家具销售量。以下截图显示了在我们的
    Watson 项目中执行的 Python 语句，以设置索引并打印命令的结果：
- en: '![](img/28db5036-e5a1-4b39-adf7-69d17cbb034b.png)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![](img/28db5036-e5a1-4b39-adf7-69d17cbb034b.png)'
- en: 'The data scientist then goes on to point out that it would be more reasonable
    (given the data) to look at average daily sales for each month, so the following
    commands are used to **resample** the sales data, using the start of each month
    (MS) as the timestamp, and then, as a sanity check, have a peek at the some of
    the data (order month followed by the computed average sales):'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 数据科学家接着指出，考虑到数据，查看每个月的平均日销售额会更合理，因此使用以下命令**重采样**销售数据，以每个月的开始（MS）作为时间戳，然后，作为一个合理性检查，查看一些数据（按订单月份排序后，计算平均销售）：
- en: '[PRE4]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The following screenshot shows the preceding commands executed in our Watson
    project:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了在我们的 Watson 项目中执行的前述命令：
- en: '![](img/773c2625-14f4-4c3d-a432-1d89bfa9cd7a.png)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![](img/773c2625-14f4-4c3d-a432-1d89bfa9cd7a.png)'
- en: Visualizations
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可视化
- en: 'To actually visualize the average sales volumes over the 4-year series, the
    `plot` command is used:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 要实际可视化 4 年系列的平均销售量，使用`plot`命令：
- en: '[PRE5]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This results in the following visualization, shown here executed in Watson
    Studio:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 这导致了以下可视化，在此处由 Watson Studio 执行：
- en: '![](img/5e01601e-77d8-48f3-bb5d-54b654c7227c.png)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5e01601e-77d8-48f3-bb5d-54b654c7227c.png)'
- en: 'When you plot or otherwise visualize data, it is much easier to recognize patterns.
    In this example, the data scientist pointed out a pattern commonly identified
    as seasonality. The data scientist then goes a step further and performs a time
    series decomposition, breaking out trend, seasonality, and noise, using the following
    commands:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 当你绘制或以其他方式可视化数据时，识别模式会容易得多。在这个例子中，数据科学家指出了一个通常被称为季节性的模式。然后，数据科学家进一步进行时间序列分解，使用以下命令将趋势、季节性和噪声分离出来：
- en: '[PRE6]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'And again, as executed in Watson Studio, we have the following:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，正如在所选示例中执行的那样，我们在 Watson Studio 中得到了以下结果：
- en: '![](img/f7a945f9-b2c4-4ca6-8fd1-0433b208204d.png)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f7a945f9-b2c4-4ca6-8fd1-0433b208204d.png)'
- en: Forecasting sales
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 销售预测
- en: Finally, after completing the preceding time series data analysis and decomposition,
    we can get to the actual forecasting step! Still in-step with the track outlined
    in the selected example, the data scientist chose to apply one of the most commonly
    used methods for time series forecasting, **autoregressive integrated moving average**
    (**ARIMA**).
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在完成前述时间序列数据分析和解构之后，我们可以进入实际的预测步骤！仍然遵循所选示例中概述的轨迹，数据科学家选择应用时间序列预测中最常用的方法之一，**自回归积分移动平均**（**ARIMA**）。
- en: 'You can head on to the following link to learn more about ARIMA: [http://www.forecastingsolutions.com/arima.html](http://www.forecastingsolutions.com/arima.html).'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以点击以下链接了解更多关于 ARIMA 的信息：[http://www.forecastingsolutions.com/arima.html](http://www.forecastingsolutions.com/arima.html)。
- en: 'To use an ARIMA model or methodology for a time series forecasting exercise,
    you''ll need to understand how to choose values for the algorithms'' three main
    parameters: as *P*, *D*, and *Q*. Assuming you''ve validated your model choice
    (to use ARIMA in the first place), the hardest part of building the actual forecasting
    model and generating a forecast with the model is selecting those parameter values
    that best fit the model (given the data):'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: '*P* is the number of autoregressive terms'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*D* is the number of nonseasonal differences needed for stationarity'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Q* is the number of lagged forecast errors in the prediction equation'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Without digging too deep into the theories behind parameter selection, we'll
    say here that this step involves determining the possible parameter value combinations,
    looking at their overall fitting results, running the appropriate diagnostics
    to investigate any unusual behaviors by the model, and validating results generated
    by the model.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the code blocks and selected outputs as implemented with
    IBM Watson Studio:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at the first code here that shows the examples of the parameter
    combinations:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/edf7438c-c8be-46a8-8fc0-5b1b029f5295.png)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
- en: 'Let''s take a look at the next code here:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3c741f93-6a42-401d-83e1-0138ba332b5f.png)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
- en: 'Now, take a look at the following screenshot:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cece668f-926e-498b-9362-2306ca01549d.png)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
- en: 'Now, let''s take a look at all the graphs here at once:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2ae034d4-9727-46fc-bbca-5d5517b8c593.png)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
- en: Validation
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Of course, the data scientist cannot generate a forecast and be done. An effort
    must be made to review the model’s performance or forecast accuracy. To help understand
    the accuracy of the model, *predicted* sales are compared to actual sales, setting
    the forecast to start at 2017-07-01 (to the end of the data). Again, a plot is
    used to visualize the output, showing the *observed* values compared to the rolling
    forecast predictions. Overall, the sales forecast seems to align with the actual
    sales values and shows an upward trend that starts from the beginning of the year.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: 'We see the following code block:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The actual results implemented in Watson Studio are as follows:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/94c19eab-6edb-4182-b84d-7b2b1ac14a0c.png)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
- en: Summary
  id: totrans-187
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we created a new machine learning project in IBM Watson Studio
    and added notebooks to it so that we could use Python as the programming language
    for our project's objectives.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: Using Python, we demonstrated how easy it is to load data into a DataFrame and
    perform manipulations on it in preparation for further processing. We also used
    additional Notebooks to illustrate how easy it is to implement various machine
    learning projects with Watson Studio.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will provide guidelines for creating a Spark machine
    learning pipeline within IBM Watson Studio.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
