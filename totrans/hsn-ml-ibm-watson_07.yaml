- en: Machine Learning Workouts on IBM Cloud
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will go through several sample machine learning (ML) exercises
    using the IBM Cloud platform to uncover the power of the **Python** language as
    the machine learning programming language of choice, and to look at the Machine
    Learning service offered by IBM Watson Studio.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter will enable you to understand the practice of proper feature engineering
    as well as demonstrate the ability to run **supervised** (classification) and
    **unsupervised** (clustering) algorithms in the IBM Cloud, using IBM Watson Studio.
  prefs: []
  type: TYPE_NORMAL
- en: With simple practice examples, this chapter will guide you through the steps
    for implementing various machine learning projects using IBM Watson Studio.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will break down this chapter into the following areas:'
  prefs: []
  type: TYPE_NORMAL
- en: Watson Studio and Python
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data cleansing and preparation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A k-means clustering example
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A k-nearest neighbors example
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A time series prediction example
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Watson Studio and Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As already mentioned, Python could very well be (currently anyway) the programming
    or scripting language most often chosen for predictive modeling and data science
    projects. A significant advance in the area of this type of computing is **Jupyter**
    **Notebook** (formerly, IPython)technology.
  prefs: []
  type: TYPE_NORMAL
- en: 'A Jupyter Notebook is a web-based environment aimed at interactive computing
    where you can run small bits of code to process data, and immediately view the
    results of that code. Notebooks include all of the building blocks you need to
    work with data:'
  prefs: []
  type: TYPE_NORMAL
- en: The data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The code computations that process the data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Visualizations of the results (of the code computations)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Text and rich media to enhance your understanding
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In addition, saved notebooks record how you worked with data, so you can more
    readily understand precisely what was done, reproduce those computations consistently,
    and even share your findings with others for collaboration.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With IBM Watson Studio, it is a pretty straightforward process to create a Python,
    Scala, or R notebook. These notebooks can then be used to analyze, clean, and
    transform data, and perform numerical simulations, statistical modeling, data
    visualization, machine learning, and other tasks.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get us going with this chapter''s example projects, we need to take the
    following steps to create a new project and add a notebook in IBM Watson Studio:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new project by first clicking on New project; then, from the Create
    a project page (shown as follows), find Deep Learning and then click on Create
    Project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f7512f08-b341-49f1-aac4-50f81cac75e5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, select a region for the machine learning service to run in then click
    on Select:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/321b6281-219e-44ec-a392-f6982b168c4c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Name your project on the New project page (shown as follows), and then click
    on **Create**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/90e5823b-f22f-4a9a-9073-c2288db58240.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now that we have created a machine learning project, we are ready to create
    a notebook. Notebooks are considered a project asset that can be used and shared.
    To create a notebook from within the project, you click on Add to project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3170542d-a10e-4a61-b32a-b8bf88250cde.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you have clicked Add to project, you need to choose an asset type. In
    previous examples, we selected the DATA and DASHBOARD asset types; here we will
    choose NOTEBOOK:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1cf2e20b-3d25-4498-8391-30340dbecd56.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Like creating projects, once you select NOTEBOOK as the asset type, you need
    to provide a name and description under the Name and Description options for the
    new notebook:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/edb38454-59c2-4f55-bb32-be741966b743.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In addition, in the bottom left-hand of the page, you will need to select a
    language for the notebook to use. Notice that the default is Python 3.5:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4a16726e-d614-4ea8-bd72-553f8cded7be.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Since we will use Python in our examples, we can simply click on Create Notebook.
    Take note that IBM Watson Studio notebooks (currently) support the following runtime
    languages. Once you click on Create Notebook, the notebook instance will be created
    and initialized for use:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a9e52a32-1a0f-4301-966b-18553971e9df.png)'
  prefs: []
  type: TYPE_IMG
- en: Try it out
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once your notebook has been instantiated, you are ready to run Python commands
    and code. Take notice of a couple of things in the following screenshot. For example,
    we have entered a snip of Python code in the first **cell** of the notebook that
    iterates with a for loop and prints columns of data. The other thing to notice
    is that we have clicked on Find and add data and added a new file (winemag-data-130k-v2.csv)
    as an asset, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5f1b68bc-79ce-45a8-962e-052b05884c27.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To make things easy, we can click on the link below the file name Insert to
    code and select Insert pandas DataFrame. The result is that the appropriate **Python**
    modules (pandas is a software library written for the Python programming language
    for data manipulation and analysis) are imported for us and a Python DataFrame
    is automatically defined. This is shown in the notebook cell (In [9]) in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/672d7e9e-b743-4abb-9e8d-44aea8215219.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The output generated by the last line of code, `df_data_1.head()` is displayed
    in the notebook cell Out [9]:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0deb5d75-64e6-43de-b598-248b78704e27.png)'
  prefs: []
  type: TYPE_IMG
- en: Now we have a data asset (a CVS file) loaded and accessible in our Watson Studio
    project via a DataFrame object.
  prefs: []
  type: TYPE_NORMAL
- en: Data cleansing and preparation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A common description for data cleansing and preparation is the work that goes
    into transforming **raw data** into a form that data scientists and analysts can
    more easily run through machine learning algorithms in an effort to uncover insights
    or make predictions based upon that data.
  prefs: []
  type: TYPE_NORMAL
- en: This process can be complicated by issues such as missing or incomplete records
    or simply finding extraneous columns of information within a data source.
  prefs: []
  type: TYPE_NORMAL
- en: In the previous example screenshot, we can see that the DataFrame object includes
    the columns country, description, designation, points, price, province, and so
    on.
  prefs: []
  type: TYPE_NORMAL
- en: 'As an exercise designed to demonstrate how easily we can use Python within
    Watson Studio to prepare data, let''s suppose that we wanted to drop one or more
    columns from the DataFrame. To accomplish this task, we use the following Python
    statements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding simple Python commands define the column name to be dropped from
    the DataFrame, that is, points and then drop the column from the `df_data_1` DataFrame:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e5d8290b-33b3-44af-8b1b-ef923071a903.png)'
  prefs: []
  type: TYPE_IMG
- en: Within IBM Watson Studio, using the notebook we created earlier in this chapter,
    we can enter and run the preceding commands, and then use the `head()` function,
    to verify that the column we indicated has actually been dropped.
  prefs: []
  type: TYPE_NORMAL
- en: Although the preceding demonstration is simplistic and doesn't begin to break
    the surface on the process of data cleansing and preparation, it does demonstrate
    the ability to use Python easily in Watson Studio to access and manipulate data.
  prefs: []
  type: TYPE_NORMAL
- en: Rather than continuing with additional fundamental data manipulations, we'll
    move on to looking at something a bit more complex.
  prefs: []
  type: TYPE_NORMAL
- en: K-means clustering using Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To recap from [Chapter 4](630e47b4-11b7-4be9-a881-8be2cb492314.xhtml), *Machine
    Learning Workouts on IBM Cloud*, **k-means clustering** is an unsupervised machine
    learning methodologyâ€”an algorithm that is commonly used to find groups within
    **unlabeled** data. Again, since the goal here is to demonstrate how you can apply
    this methodology to some data using Python in Watson Studio, we won't bother to
    dissect the details of how k-means works, but will show a working example of the
    algorithm, using Watson Studio as a proof of concept.
  prefs: []
  type: TYPE_NORMAL
- en: There are numerous examples available online and elsewhere demonstrating the
    use of Python to implement k-means logic. Here, we'll use an example that is simple
    to follow and uses available Python modules, such as `matplotlib`, `pandas`, and
    `scipy`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our exercise, using IBM Watson Studio and the Notebook (we created in the sections
    of this chapter) will:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a DataFrame for a two-dimensional dataset
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Find centroids for three clusters, and then for four clusters
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a **graphical user interface** (**GUI**) to display the results
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The most representative point within a group is called the **centroid**. It
    is defined as the mean of the values of the points of **data** in the cluster.
    Each cluster should consist of the points of **data** closest to it.
  prefs: []
  type: TYPE_NORMAL
- en: The Python code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, we can take a look at the Python code:'
  prefs: []
  type: TYPE_NORMAL
- en: 'This step references `pandas` and then defines our two-dimensional DataFrame.
    Note that the data is simply two lists of numbers, defined as `x` and `y`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The last command (`print(df)`) is added so that if you run the code, you'll
    get to see the output, which should match the dataset that was defined.
  prefs: []
  type: TYPE_NORMAL
- en: The next step is where we will use the `sklearn` Python module to find the centroids
    for three and then for four clusters, and the `matplotlib` module to create some
    charts to visualize the results of the algorithm.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Scikit-learn provides a range of supervised as well as unsupervised learning
    algorithms through a consistent interface in Python. The library is built upon
    the SciPy (Scientific Python). **Matplotlib** is a plotting library for Python
    and its numerical mathematics extension NumPy (Wikipedia, 2019).
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the DataFrame is created using the columns of data entered, the next block
    of Python code also imports the two aforementioned Python modules and specifies
    the number of clusters to create with the `KMeans` algorithm and finally uses
    `matplotlib` to generate some scatter plots:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The output from the preceding Python code generates the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a9533123-8cd6-4b3e-8098-3eb75bdc5f79.png)'
  prefs: []
  type: TYPE_IMG
- en: Observing the results
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Note that the center of each of the three clusters (in red) represents the mean
    of all the observations that belong to that cluster. As you might also see, the
    observations that belong to a given cluster are closer to the center of that cluster,
    in comparison to the centers of other clusters.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing in Watson
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Again, rather than dwell on the interpretation of the previous output, let's
    look at how we might be able to implement the same exercise using IBM Watson Studio.
    We could use the Notebook we created earlier in this chapter, but let's create
    a fresh new one (following the same procedure as we used earlier).
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the Notebook is open and ready, we can run the Python code we just reviewed.
    First paste the original code block into the first Notebook cell and click on
    Run:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b149b8ea-b842-4add-92ee-4baebb557403.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Repeat the step but with the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/dfd6d6bd-059c-486b-84e2-a2fbbbcbb4fc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This yields the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7f15e65f-507a-4fce-b065-29e457df3443.png)'
  prefs: []
  type: TYPE_IMG
- en: Saving your work
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once you are satisfied with the results, you should save your Notebook by clicking
    on File and then Save. Additionally, a nice feature is the ability to download
    the Notebook in various formats so that you can share with others who may not
    have access to Watson Studio. We will discuss this more in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: 'For now, try navigating to File | Download as | Python (.py), which will save
    all of the Python code blocks within the Notebook as a standard Python code file,
    which can be shared and run within other Python environments:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8c101e26-a377-4b63-9ec8-0d6875f613dd.png)'
  prefs: []
  type: TYPE_IMG
- en: K-nearest neighbors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As the previous algorithm (`KMeans`) is an **unsupervised** learning methodology,
    the **k-nearest neighbors** (**KNN**) algorithm is a fundamentally simple to understand
    **supervised** machine learning methodology. The concept of the KNN algorithm
    is described commonly as classifying data by identifying its nearest neighbor
    or, my favorite analogy, you can identify or classify data by identifying who
    it associates most with or finding its closest neighbor.
  prefs: []
  type: TYPE_NORMAL
- en: The Python code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we stated earlier, our objective is to demonstrate how to implement various
    types of ML algorithms within IBM Watson Studio, not provide the theory behind
    each algorithm; in addition to that, consistent with the last section, we will
    utilize an existing sample Python script set to illustrate the functionalities
    and features offered within the Watson Studio platform, and not try to create
    a new solution.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this implemented example, we have to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Find a predefined number of training samples closest in distance to a new sample
    of data that needs to be classified
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make sure the label (classification) of the new sample of data is defined by
    those (training sample) neighbors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set a fixed user-defined constant for the number of neighbors that have to be
    determined
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compute the classification using a majority vote of the nearest neighbors of
    the new sample
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing in Watson
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once again, following the steps used earlier in this chapter, we can open our
    machine learning project in IBM Watson Studio and create a new Notebook. From
    there, we can paste the sample Python code into cells within the Notebook and
    press Run to test each cell's code.
  prefs: []
  type: TYPE_NORMAL
- en: 'As we''ve seen, you can use multiple cells within the Notebook to segment functional
    blocks of your code. Using the menu bar, you can also cut and paste cells, split
    and merge cells, and move a cell up or down within the Notebook. For clarity,
    an additional handy feature is to display the line numbers for each of the Python
    commands in the Notebook. You can do this by clicking the appropriate menu selection
    under Edit or View on the menu bar:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9dac38ab-7f62-4f9f-8ed0-d89b42c333db.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You may want to split cells to show intermediate cell outputs or combine cells
    into one cell and show the combined output. For example, in the next screenshot,
    you can see two cells, each followed by their respective outputs:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f0106308-6f4f-4030-b193-0924dd460236.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The following screenshot shows those two cells combined into one followed by
    the combined output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f93916d5-3e7b-4c3a-a71d-9cc23bf54d4d.png)'
  prefs: []
  type: TYPE_IMG
- en: Using the menu options, you can create a very well-organized, functional, and
    sharable solution. In the next section, we will use **Markdown** **tags** within
    Watson Studio to create an even more valuable solution.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring Markdown text
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Markdown** is an easily-used markup language that is used with plain text
    to add formatting elements (headings, bulleted lists, URLs, and so on) to plain
    text without the use of a formal text editor or the use of **HTML** tags. Markdown
    is device agnostic and displays the writing format consistently across device
    types in an effort to create visual interest in the Notebook solutions you create.'
  prefs: []
  type: TYPE_NORMAL
- en: Let's complete our latest example case. We'll assume that all of the example
    Python code has been pasted into cells in the Notebook and we have run the solution
    in its entirety.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, suppose that we want to save and share this solution with others who are
    not familiar with our project and our thought process? What we can do is insert
    additional cells within our Notebook and instead of pasting code into them, we
    can add comments and other information as explanatory text so that others can
    more easily understand what we have created. For example, take a look at the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6c81edd7-defb-4fa4-b731-99ffd8713a3f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s see how this is done by performing the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can click on the first cell in the Notebook and then click on Insert, then
    Insert Cell Above. Next click on the new cell and change the Format (of the cell)
    to Markdown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/17d7faa5-2630-4961-ba22-bfa88c1b9f29.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, enter the `k-Nearest-Neighbor Classifier` text into the new cell:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a6275265-0d0d-4c40-abb8-7efe20968f6f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, click on the keyboard icon and select change cell to heading 1:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4f4da498-e132-45b9-887b-6d926cc69dad.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After you perform the preceding steps, you can see that the Markdown cell looks
    a bit different:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3b78323c-bdf9-4dfb-ad72-47ce77f27798.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you click on Run, you can see the results:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6ab4b79a-4316-4912-a111-f460a482aeca.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Using common Markdown, we can proceed to interject commentary throughout the
    Notebook:'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can add a new cell to the top of the Notebook, convert the format to Markdown,
    then drag and drop an image to the cell (as shown below). This can be used to
    add a company logo or even a workflow diagram:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/712e9f0e-b825-43b5-a58e-00c49a7acf0f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Using other markdowns, such as heading levels, indents, and bulleted lists,
    you can provide details about assumptions, such as the source of the data used
    and what is found within the data:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/ed57e54c-1d37-4613-b867-d804ee153b73.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Using additional, HTML-like markdowns (such as `<font color=></font>`), you
    can create markdown cells such as the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/35a5c059-9050-4006-be80-b16b1e7781a5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This results in the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bd7e34a6-af09-4b23-9eea-b1288d70e193.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can experiment with the full-featured Markdowns to see what works best
    for you. You can go to: [https://commonmark.org/help/](https://commonmark.org/help/)
    to find a full Markdown cheatsheet.'
  prefs: []
  type: TYPE_NORMAL
- en: Time series prediction example
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, our goal is to try implementing a time series model using Python
    and Watson Studio.
  prefs: []
  type: TYPE_NORMAL
- en: Time series analysis includes methods for analyzing time series data (of course)
    so we can extract meaningful statistics and other characteristics of the data.
    Time series forecasting is the process where we use an algorithm to predict future
    values based on previously observed values.
  prefs: []
  type: TYPE_NORMAL
- en: Time series analysis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Time series data may be **stationary** or **non-stationary** in nature. Stationary
    implies flat without periodic fluctuations, while non-stationary data typically
    has frequent shifts in value. You see time series analysis generally used for
    non-stationary data, such as evaluating and predicting retail sales. In this example,
    we will again utilize a study exercise (available on GitHub) to demonstrate the
    fundamental steps involved in the analysis and forecasting of retail sales data,
    as implemented with IBM Watson Studio.
  prefs: []
  type: TYPE_NORMAL
- en: Setup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Using the (now) familiar process of adding data to our Watson Studio project,
    we''ve created a new asset using a CSV data file and, in an effort to better understand
    the data, used the Data Refinery feature to analyze, profile, and visualize our
    asset. From there (as we did in a previous *Time series analysis* section of this
    chapter), we used Insert to Code and then Insert pandas DataFrame so that Watson
    Studio would generate the code required to import the required Python modules,
    load the data (into a Python DataFrame object, named `df_data_1`) and print the
    first five rows, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2638de8e-c9fd-472d-9498-84e6cce743c3.png)'
  prefs: []
  type: TYPE_IMG
- en: Data preprocessing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'While using the **Data Refinery** feature, we noticed that there is a column
    within the data file named `Category`, which seems to indicate the type of product
    sold (furniture, office supplies, and several others). In this example, the data
    scientist is interested in only furniture sales, so the following lines of code
    are used to filter the data and then verify if there is a reasonable amount of
    data for that category to perform a proper analysis:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code executed in Watson Studio is shown in the following screenshot,
    filtering the sales data and verifying that we have four years of furniture sales
    within this data file by showing the earliest and latest timestamp:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f0e2a5a6-6236-4945-8c43-ad0cb61dfba4.png)'
  prefs: []
  type: TYPE_IMG
- en: In the selected example, the data scientist chose to use raw Python commands
    to remove (drop) columns of data not needed in the analysis, check for missing
    values, aggregate (group by) sales transactions by date, and so on. Although using
    Python scripting to accomplish these tasks is not overly complex, you can alternatively
    perform all of those tasks (and more) with the drag and drop of Watson **Data
    Refinery flow**.
  prefs: []
  type: TYPE_NORMAL
- en: As we mentioned earlier, a Data Refinery flow is an ordered set of steps to
    cleanse, shape, and enhance a data asset. As you refine data by applying operations
    to the data, you are actually dynamically building a customized Data Refinery
    flow that can be modified in real time and saved for future use as new data becomes
    available!
  prefs: []
  type: TYPE_NORMAL
- en: Indexing for visualization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once the data has been properly prepared, the data scientist uses the `Pandas
    set_index` command to set the `Order Date` column, indexing the rows (of sales
    transactions) as the field we will perform the initial analysis on. In other words,
    we want to ultimately be able to predict furniture sales per month. The following
    screenshot shows the Python statements executed in our Watson project to set the
    index and print the results of the command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/28db5036-e5a1-4b39-adf7-69d17cbb034b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The data scientist then goes on to point out that it would be more reasonable
    (given the data) to look at average daily sales for each month, so the following
    commands are used to **resample** the sales data, using the start of each month
    (MS) as the timestamp, and then, as a sanity check, have a peek at the some of
    the data (order month followed by the computed average sales):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the preceding commands executed in our Watson
    project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/773c2625-14f4-4c3d-a432-1d89bfa9cd7a.png)'
  prefs: []
  type: TYPE_IMG
- en: Visualizations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To actually visualize the average sales volumes over the 4-year series, the
    `plot` command is used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'This results in the following visualization, shown here executed in Watson
    Studio:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5e01601e-77d8-48f3-bb5d-54b654c7227c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When you plot or otherwise visualize data, it is much easier to recognize patterns.
    In this example, the data scientist pointed out a pattern commonly identified
    as seasonality. The data scientist then goes a step further and performs a time
    series decomposition, breaking out trend, seasonality, and noise, using the following
    commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'And again, as executed in Watson Studio, we have the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f7a945f9-b2c4-4ca6-8fd1-0433b208204d.png)'
  prefs: []
  type: TYPE_IMG
- en: Forecasting sales
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Finally, after completing the preceding time series data analysis and decomposition,
    we can get to the actual forecasting step! Still in-step with the track outlined
    in the selected example, the data scientist chose to apply one of the most commonly
    used methods for time series forecasting, **autoregressive integrated moving average**
    (**ARIMA**).
  prefs: []
  type: TYPE_NORMAL
- en: 'You can head on to the following link to learn more about ARIMA: [http://www.forecastingsolutions.com/arima.html](http://www.forecastingsolutions.com/arima.html).'
  prefs: []
  type: TYPE_NORMAL
- en: 'To use an ARIMA model or methodology for a time series forecasting exercise,
    you''ll need to understand how to choose values for the algorithms'' three main
    parameters: as *P*, *D*, and *Q*. Assuming you''ve validated your model choice
    (to use ARIMA in the first place), the hardest part of building the actual forecasting
    model and generating a forecast with the model is selecting those parameter values
    that best fit the model (given the data):'
  prefs: []
  type: TYPE_NORMAL
- en: '*P* is the number of autoregressive terms'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*D* is the number of nonseasonal differences needed for stationarity'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Q* is the number of lagged forecast errors in the prediction equation'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Without digging too deep into the theories behind parameter selection, we'll
    say here that this step involves determining the possible parameter value combinations,
    looking at their overall fitting results, running the appropriate diagnostics
    to investigate any unusual behaviors by the model, and validating results generated
    by the model.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the code blocks and selected outputs as implemented with
    IBM Watson Studio:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at the first code here that shows the examples of the parameter
    combinations:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/edf7438c-c8be-46a8-8fc0-5b1b029f5295.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s take a look at the next code here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3c741f93-6a42-401d-83e1-0138ba332b5f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, take a look at the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cece668f-926e-498b-9362-2306ca01549d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, let''s take a look at all the graphs here at once:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2ae034d4-9727-46fc-bbca-5d5517b8c593.png)'
  prefs: []
  type: TYPE_IMG
- en: Validation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Of course, the data scientist cannot generate a forecast and be done. An effort
    must be made to review the modelâ€™s performance or forecast accuracy. To help understand
    the accuracy of the model, *predicted* sales are compared to actual sales, setting
    the forecast to start at 2017-07-01 (to the end of the data). Again, a plot is
    used to visualize the output, showing the *observed* values compared to the rolling
    forecast predictions. Overall, the sales forecast seems to align with the actual
    sales values and shows an upward trend that starts from the beginning of the year.
  prefs: []
  type: TYPE_NORMAL
- en: 'We see the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The actual results implemented in Watson Studio are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/94c19eab-6edb-4182-b84d-7b2b1ac14a0c.png)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we created a new machine learning project in IBM Watson Studio
    and added notebooks to it so that we could use Python as the programming language
    for our project's objectives.
  prefs: []
  type: TYPE_NORMAL
- en: Using Python, we demonstrated how easy it is to load data into a DataFrame and
    perform manipulations on it in preparation for further processing. We also used
    additional Notebooks to illustrate how easy it is to implement various machine
    learning projects with Watson Studio.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will provide guidelines for creating a Spark machine
    learning pipeline within IBM Watson Studio.
  prefs: []
  type: TYPE_NORMAL
