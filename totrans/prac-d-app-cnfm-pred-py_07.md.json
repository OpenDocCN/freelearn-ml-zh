["```py\n    model = RandomForestRegressor(n_jobs=-1)\n    ```", "```py\n    model.fit(X_proper_train, y_proper_train)\n    ```", "```py\n    y_pred_calib = model.predict(X_calib)\n    ```", "```py\n    y_pred_calib = model.predict(X_calib)\n    ```", "```py\n    y_pred_test = model.predict(X_test)\n    ```", "```py\n    y_calib_error = np.abs(y_calib - y_pred_calib)\n    ```", "```py\n    q_yhat_calib = np.quantile(y_calib_error,np.ceil((n_calib+1)*(1-alpha))/n_calib)\n    ```", "```py\n    y_hat_test_lower = y_pred_test - q_yhat_calib\n    ```", "```py\n    y_hat_test_upper = y_pred_test + q_yhat_calib\n    ```", "```py\nestimator = LGBMRegressor(objective='quantile', alpha=0.5, random_state=random_state)\n```", "```py\nparams_distributions = dict(\n```", "```py\n    num_leaves=randint(low=10, high=50),\n```", "```py\n    max_depth=randint(low=3, high=20),\n```", "```py\n    n_estimators=randint(low=50, high=300),\n```", "```py\n    learning_rate=uniform()\n```", "```py\n)\n```", "```py\noptim_model = RandomizedSearchCV(\n```", "```py\n    estimator,\n```", "```py\n    param_distributions=params_distributions,\n```", "```py\n    n_jobs=-1,\n```", "```py\n    n_iter=100,\n```", "```py\n    cv=KFold(n_splits=5, shuffle=True),\n```", "```py\n    verbose=0\n```", "```py\n)\n```", "```py\noptim_model.fit(X_train, y_train)\n```", "```py\nestimator = optim_model.best_estimator_\n```", "```py\n    rf = WrapRegressor(RandomForestRegressor())\n    ```", "```py\n    rf.fit(X_prop_train, y_prop_train)\n    ```", "```py\n    rf.calibrate(X_cal, y_cal)\n    ```", "```py\n    rf.predict_int(X_test, confidence=0.99)\n    ```", "```py\n    rf.predict_int(X_test, y_min=0)\n    ```", "```py\n    de = DifficultyEstimator()\n    ```", "```py\n    de.fit(X_prop_train, y=y_prop_train)\n    ```", "```py\n    sigmas_cal = de.apply(X_cal)\n    ```", "```py\n    rf.calibrate(X_cal, y_cal, sigmas=sigmas_cal)\n    ```", "```py\n    sigmas_test = de.apply(X_test)\n    ```", "```py\n    crepes_predictions = rf.predict_int(X_test, sigmas=sigmas_test, y_min=0)\n    ```", "```py\n    bins_cal, bin_thresholds = binning(rf.predict(X_cal), bins=5)\n    ```", "```py\n    rf.calibrate(X_cal, y_cal, sigmas=sigmas_cal, bins=bins_cal, cps=True)\n    ```", "```py\n    bins_test = binning(rf.predict(X_test), bins=bin_thresholds)\n    ```", "```py\n    rf.predict_cps(X_test, sigmas=sigmas_test, bins=bins_test,\n    ```", "```py\n                   lower_percentiles=2.5, higher_percentiles=97.5, y_min=0)\n    ```", "```py\n    cpds = rf.predict_cps(X_test, sigmas=sigmas_test, bins=bins_test, return_cpds=True)\n    ```"]