["```py\n// Read in the Cyber Attack dataset\n// TODO: change the path to point to your data directory\nstring dataDirPath = @\"<path-to-data-dir>\";\n\n// Load the data into a data frame\nstring dataPath = Path.Combine(dataDirPath, \"kddcup.data_10_percent\");\nConsole.WriteLine(\"Loading {0}\\n\\n\", dataPath);\nvar featuresDF = Frame.ReadCsv(\n    dataPath,\n    hasHeaders: false,\n    inferTypes: true\n);\n\nstring[] colnames =\n{\n    \"duration\", \"protocol_type\", \"service\", \"flag\", \"src_bytes\",\n    \"dst_bytes\", \"land\", \"wrong_fragment\", \"urgent\", \"hot\",\n    \"num_failed_logins\", \"logged_in\", \"num_compromised\", \"root_shell\",\n    \"su_attempted\", \"num_root\", \"num_file_creations\", \"num_shells\",\n    \"num_access_files\", \"num_outbound_cmds\", \"is_host_login\", \"is_guest_login\",\n    \"count\", \"srv_count\", \"serror_rate\", \"srv_serror_rate\", \"rerror_rate\",\n    \"srv_rerror_rate\", \"same_srv_rate\", \"diff_srv_rate\", \"srv_diff_host_rate\",\n    \"dst_host_count\", \"dst_host_srv_count\", \"dst_host_same_srv_rate\",\n    \"dst_host_diff_srv_rate\", \"dst_host_same_src_port_rate\",\n    \"dst_host_srv_diff_host_rate\", \"dst_host_serror_rate\",\n    \"dst_host_srv_serror_rate\", \"dst_host_rerror_rate\", \"dst_host_srv_rerror_rate\",\n    \"attack_type\"\n};\nfeaturesDF.RenameColumns(colnames);\n```", "```py\n// keeping \"normal\" for now for plotting purposes\nIDictionary<string, string> attackCategories = new Dictionary<string, string>\n{\n    {\"back\", \"dos\"},\n    {\"land\", \"dos\"},\n    {\"neptune\", \"dos\"},\n    {\"pod\", \"dos\"},\n    {\"smurf\", \"dos\"},\n    {\"teardrop\", \"dos\"},\n    {\"ipsweep\", \"probe\"},\n    {\"nmap\", \"probe\"},\n    {\"portsweep\", \"probe\"},\n    {\"satan\", \"probe\"},\n    {\"ftp_write\", \"r2l\"},\n    {\"guess_passwd\", \"r2l\"},\n    {\"imap\", \"r2l\"},\n    {\"multihop\", \"r2l\"},\n    {\"phf\", \"r2l\"},\n    {\"spy\", \"r2l\"},\n    {\"warezclient\", \"r2l\"},\n    {\"warezmaster\", \"r2l\"},\n    {\"buffer_overflow\", \"u2r\"},\n    {\"loadmodule\", \"u2r\"},\n    {\"perl\", \"u2r\"},\n    {\"rootkit\", \"u2r\"},\n    {\"normal\", \"normal\"}\n};\n\nfeaturesDF.AddColumn(\n    \"attack_category\",\n    featuresDF.GetColumn<string>(\"attack_type\")\n        .Select(x => attackCategories[x.Value.Replace(\".\", \"\")])\n);\n```", "```py\nfeaturesDF.SaveCsv(Path.Combine(dataDirPath, \"data.csv\"));\n```", "```py\n// 1\\. Target Variable Distribution\nConsole.WriteLine(\"\\n\\n-- Counts by Attack Category --\\n\");\nvar attackCount = featuresDF.AggregateRowsBy<string, int>(\n    new string[] { \"attack_category\" },\n    new string[] { \"duration\" },\n    x => x.ValueCount\n).SortRows(\"duration\");\nattackCount.RenameColumns(new string[] { \"attack_category\", \"count\" });\n\nattackCount.Print();\n\nDataBarBox.Show(\n    attackCount.GetColumn<string>(\"attack_category\").Values.ToArray(),\n    attackCount[\"count\"].Values.ToArray()\n).SetTitle(\n    \"Counts by Attack Category\"\n);\n```", "```py\nvar attackSubset = featuresDF.Rows[\n    featuresDF.GetColumn<string>(\"attack_category\").Where(\n        x => !x.Value.Equals(\"normal\")\n    ).Keys\n];\nvar normalSubset = featuresDF.Rows[\n    featuresDF.GetColumn<string>(\"attack_category\").Where(\n        x => x.Value.Equals(\"normal\")\n    ).Keys\n];\n```", "```py\n// 2\\. Categorical Variable Distribution\nstring[] categoricalVars =\n{\n    \"protocol_type\", \"service\", \"flag\", \"land\"\n};\nforeach (string variable in categoricalVars)\n{\n    Console.WriteLine(\"\\n\\n-- Counts by {0} --\\n\", variable);\n    Console.WriteLine(\"* Attack:\");\n    var attackCountDF = attackSubset.AggregateRowsBy<string, int>(\n        new string[] { variable },\n        new string[] { \"duration\" },\n        x => x.ValueCount\n    );\n    attackCountDF.RenameColumns(new string[] { variable, \"count\" });\n\n    attackCountDF.SortRows(\"count\").Print();\n\n    Console.WriteLine(\"* Normal:\");\n    var countDF = normalSubset.AggregateRowsBy<string, int>(\n        new string[] { variable },\n        new string[] { \"duration\" },\n        x => x.ValueCount\n    );\n    countDF.RenameColumns(new string[] { variable, \"count\" });\n\n    countDF.SortRows(\"count\").Print();\n\n    DataBarBox.Show(\n        countDF.GetColumn<string>(variable).Values.ToArray(),\n        new double[][] \n        {\n            attackCountDF[\"count\"].Values.ToArray(),\n            countDF[\"count\"].Values.ToArray()\n        }\n    ).SetTitle(\n        String.Format(\"Counts by {0} (0 - Attack, 1 - Normal)\", variable)\n    );\n}\n```", "```py\nforeach (string variable in continuousVars)\n{\n    Console.WriteLine(String.Format(\"\\n\\n-- {0} Distribution (Attack) -- \", variable));\n    double[] attachQuartiles = Accord.Statistics.Measures.Quantiles(\n        attackSubset[variable].DropMissing().ValuesAll.ToArray(),\n        new double[] { 0, 0.25, 0.5, 0.75, 1.0 }\n    );\n    Console.WriteLine(\n        \"Min: \\t\\t\\t{0:0.00}\\nQ1 (25% Percentile): \\t{1:0.00}\\nQ2 (Median): \\t\\t{2:0.00}\\nQ3 (75% Percentile): \\t{3:0.00}\\nMax: \\t\\t\\t{4:0.00}\",\n        attachQuartiles[0], attachQuartiles[1], attachQuartiles[2], attachQuartiles[3], attachQuartiles[4]\n    );\n\n    Console.WriteLine(String.Format(\"\\n\\n-- {0} Distribution (Normal) -- \", variable));\n    double[] normalQuantiles = Accord.Statistics.Measures.Quantiles(\n        normalSubset[variable].DropMissing().ValuesAll.ToArray(),\n        new double[] { 0, 0.25, 0.5, 0.75, 1.0 }\n    );\n    Console.WriteLine(\n        \"Min: \\t\\t\\t{0:0.00}\\nQ1 (25% Percentile): \\t{1:0.00}\\nQ2 (Median): \\t\\t{2:0.00}\\nQ3 (75% Percentile): \\t{3:0.00}\\nMax: \\t\\t\\t{4:0.00}\",\n        normalQuantiles[0], normalQuantiles[1], normalQuantiles[2], normalQuantiles[3], normalQuantiles[4]\n    );\n}\n```", "```py\n// 3\\. Continuous Variable Distribution\nstring[] continuousVars =\n{\n    \"duration\", \"src_bytes\", \"dst_bytes\", \"wrong_fragment\", \"urgent\", \"hot\",\n    \"num_failed_logins\", \"num_compromised\", \"root_shell\", \"su_attempted\",\n    \"num_root\", \"num_file_creations\", \"num_shells\", \"num_access_files\",\n    \"num_outbound_cmds\", \"count\", \"srv_count\", \"serror_rate\", \"srv_serror_rate\",\n    \"rerror_rate\", \"srv_rerror_rate\", \"same_srv_rate\", \"diff_srv_rate\",\n    \"srv_diff_host_rate\", \"dst_host_count\", \"dst_host_srv_count\",\n    \"dst_host_same_srv_rate\", \"dst_host_diff_srv_rate\", \"dst_host_same_src_port_rate\",\n    \"dst_host_srv_diff_host_rate\", \"dst_host_serror_rate\", \"dst_host_srv_serror_rate\",\n    \"dst_host_rerror_rate\", \"dst_host_srv_rerror_rate\"\n};\n```", "```py\n// Read in the Cyber Attack dataset\n// TODO: change the path to point to your data directory\nstring dataDirPath = @\"<path-to-data-dir>\";\n\n// Load the data into a data frame\nstring dataPath = Path.Combine(dataDirPath, \"data.csv\");\nConsole.WriteLine(\"Loading {0}\\n\\n\", dataPath);\nvar rawDF = Frame.ReadCsv(\n    dataPath,\n    hasHeaders: true,\n    inferTypes: true\n);\n```", "```py\n// Encode Categorical Variables\nstring[] categoricalVars =\n{\n    \"protocol_type\", \"service\", \"flag\", \"land\"\n};\n// Encode Target Variables\nIDictionary<string, int> targetVarEncoding = new Dictionary<string, int>\n{\n    {\"normal\", 0},\n    {\"dos\", 1},\n    {\"probe\", 2},\n    {\"r2l\", 3},\n    {\"u2r\", 4}\n};\n\nvar featuresDF = Frame.CreateEmpty<int, string>();\n\nforeach (string col in rawDF.ColumnKeys)\n{\n    if(col.Equals(\"attack_type\"))\n    {\n        continue;\n    }\n    else if (col.Equals(\"attack_category\"))\n    {\n        featuresDF.AddColumn(\n            col, \n            rawDF.GetColumn<string>(col).Select(x => targetVarEncoding[x.Value])\n        );\n    }\n    else if (categoricalVars.Contains(col))\n    {\n        var categoryDF = EncodeOneHot(rawDF.GetColumn<string>(col), col);\n\n        foreach (string newCol in categoryDF.ColumnKeys)\n        {\n            featuresDF.AddColumn(newCol, categoryDF.GetColumn<int>(newCol));\n        }\n    }\n    else\n    {\n        featuresDF.AddColumn(\n            col, \n            rawDF[col].Select((x, i) => double.IsNaN(x.Value) ? 0.0 : x.Value)\n        );\n    }\n}\n```", "```py\nprivate static Frame<int, string> EncodeOneHot(Series<int, string> rows, string originalColName)\n{\n\n    var categoriesByRows = rows.GetAllValues().Select((x, i) =>\n    {\n        // Encode the categories appeared in each row with 1\n        var sb = new SeriesBuilder<string, int>();\n        sb.Add(String.Format(\"{0}_{1}\", originalColName, x.Value), 1);\n\n        return KeyValue.Create(i, sb.Series);\n    });\n\n    // Create a data frame from the rows we just created\n    // And encode missing values with 0\n    var categoriesDF = Frame.FromRows(categoriesByRows).FillMissing(0);\n\n    return categoriesDF;\n}\n```", "```py\nConsole.WriteLine(\"* Exporting feature set...\");\nfeaturesDF.SaveCsv(Path.Combine(dataDirPath, \"features.csv\"));\n```", "```py\n// Build PCA with only normal data\nvar rnd = new Random();\n\nint[] normalIdx = featuresDF[\"attack_category\"]\n    .Where(x => x.Value == 0)\n    .Keys\n    .OrderBy(x => rnd.Next())\n    .Take(90000).ToArray();\nint[] attackIdx = featuresDF[\"attack_category\"]\n    .Where(x => x.Value > 0)\n    .Keys\n    .OrderBy(x => rnd.Next())\n    .Take(10000).ToArray();\nint[] totalIdx = normalIdx.Concat(attackIdx).ToArray();\n```", "```py\nvar normalSet = featuresDF.Rows[normalIdx];\n\nstring[] nonZeroValueCols = normalSet.ColumnKeys.Where(\n    x => !x.Equals(\"attack_category\") && normalSet[x].Max() != normalSet[x].Min()\n).ToArray();\n\ndouble[][] normalData = BuildJaggedArray(\n    normalSet.Columns[nonZeroValueCols].ToArray2D<double>(), \n    normalSet.RowCount, \n    nonZeroValueCols.Length\n);\ndouble[][] wholeData = BuildJaggedArray(\n    featuresDF.Rows[totalIdx].Columns[nonZeroValueCols].ToArray2D<double>(),\n    totalIdx.Length,\n    nonZeroValueCols.Length\n);\nint[] labels = featuresDF\n    .Rows[totalIdx]\n    .GetColumn<int>(\"attack_category\")\n    .ValuesAll.ToArray();\n```", "```py\nvar pca = new PrincipalComponentAnalysis(\n    PrincipalComponentMethod.Standardize\n);\npca.Learn(normalData);\n\ndouble[][] transformed = pca.Transform(wholeData);\n```", "```py\ndouble[][] first2Components = transformed.Select(\n    x => x.Where((y, i) => i < 2).ToArray()\n).ToArray();\nScatterplotBox.Show(\"Component #1 vs. Component #2\", first2Components, labels);\n\ndouble[][] next2Components = transformed.Select(\n    x => x.Where((y, i) => i < 3 && i >= 1).ToArray()\n).ToArray();\nScatterplotBox.Show(\"Component #2 vs. Component #3\", next2Components, labels);\n\nnext2Components = transformed.Select(\n    x => x.Where((y, i) => i < 4 && i >= 2).ToArray()\n).ToArray();\nScatterplotBox.Show(\"Component #3 vs. Component #4\", next2Components, labels);\n\nnext2Components = transformed.Select(\n    x => x.Where((y, i) => i < 5 && i >= 3).ToArray()\n).ToArray();\nScatterplotBox.Show(\"Component #4 vs. Component #5\", next2Components, labels);\n\nnext2Components = transformed.Select(\n    x => x.Where((y, i) => i < 6 && i >= 4).ToArray()\n).ToArray();\nScatterplotBox.Show(\"Component #5 vs. Component #6\", next2Components, labels);\n```", "```py\ndouble[] explainedVariance = pca.Components\n    .Select(x => x.CumulativeProportion)\n    .Where(x => x < 1)\n    .ToArray();\n\nDataSeriesBox.Show(\n    explainedVariance.Select((x, i) => (double)i),\n    explainedVariance\n).SetTitle(\"Explained Variance\");\nSystem.IO.File.WriteAllLines(\n    Path.Combine(dataDirPath, \"explained-variance.csv\"),\n    explainedVariance.Select((x, i) => String.Format(\"{0},{1:0.0000}\", i, x))\n);\n```", "```py\nConsole.WriteLine(\"* Exporting pca-transformed feature set...\");\nSystem.IO.File.WriteAllLines(\n    Path.Combine(\n        dataDirPath,\n        \"pca-transformed-features.csv\"\n    ),\n    transformed.Select(x => String.Join(\",\", x))\n);\nSystem.IO.File.WriteAllLines(\n    Path.Combine(\n        dataDirPath,\n        \"pca-transformed-labels.csv\"\n    ),\n    labels.Select(x => x.ToString())\n);\n```", "```py\n// Read in the Cyber Attack dataset\n// TODO: change the path to point to your data directory\nstring dataDirPath = @\"<path-to-dir>\";\n\n// Load the data into a data frame\nstring dataPath = Path.Combine(dataDirPath, \"pca-transformed-features.csv\");\nConsole.WriteLine(\"Loading {0}\\n\\n\", dataPath);\nvar featuresDF = Frame.ReadCsv(\n    dataPath,\n    hasHeaders: false,\n    inferTypes: true\n);\nfeaturesDF.RenameColumns(\n    featuresDF.ColumnKeys.Select((x, i) => String.Format(\"component-{0}\", i + 1))\n);\n\nint[] labels = File.ReadLines(\n    Path.Combine(dataDirPath, \"pca-transformed-labels.csv\")\n).Select(x => int.Parse(x)).ToArray();\nfeaturesDF.AddColumn(\"attack_category\", labels);\n```", "```py\nvar count = featuresDF.AggregateRowsBy<string, int>(\n    new string[] { \"attack_category\" },\n    new string[] { \"component-1\" },\n    x => x.ValueCount\n).SortRows(\"component-1\");\ncount.RenameColumns(new string[] { \"attack_category\", \"count\" });\ncount.Print();\n```", "```py\n// First 13 components explain about 50% of the variance\n// First 19 components explain about 60% of the variance\n// First 27 components explain about 70% of the variance\n// First 34 components explain about 80% of the variance\nint numComponents = 27;\nstring[] cols = featuresDF.ColumnKeys.Where((x, i) => i < numComponents).ToArray();\n\n// First, compute distances from the center/mean among normal events\nvar normalDF = featuresDF.Rows[\n    featuresDF[\"attack_category\"].Where(x => x.Value == 0).Keys\n].Columns[cols];\n\ndouble[][] normalData = BuildJaggedArray(\n    normalDF.ToArray2D<double>(), normalDF.RowCount, cols.Length\n);\n```", "```py\nprivate static double[] ComputeDistances(double[][] data, double[] componentVariances)\n{\n\n    double[] distances = data.Select(\n        (row, i) => Math.Sqrt(\n            row.Select(\n                (x, j) => Math.Pow(x, 2) / componentVariances[j]\n            ).Sum()\n        )\n    ).ToArray();\n\n    return distances;\n}\nComputeDistances method takes in two arguments—data and componentVariances. The variable data is a two-dimensional array that we want to compute distances for, and the componentVariances variable is the variance of the principal components that are learned from the normal network connections data. In order to compute the variances of the principal components, we use the following helper function:\n```", "```py\nprivate static double[] ComputeVariances(double[][] data)\n{\n    double[] componentVariances = new double[data[0].Length];\n\n    for (int j = 0; j < data[0].Length; j++)\n    {\n        componentVariances[j] = data\n            .Select((x, i) => Math.Pow(data[i][j], 2))\n            .Sum() / data.Length;\n    }\n\n    return componentVariances;\n}\nComputeDistances, as follows:\n```", "```py\ndouble[] distances = ComputeDistances(normalData);\n```", "```py\ndouble meanDistance = distances.Average();\ndouble stdDistance = Math.Sqrt(\n    distances\n    .Select(x => Math.Pow(x - meanDistance, 2))\n    .Sum() / distances.Length\n);\n\nConsole.WriteLine(\n    \"* Normal - mean: {0:0.0000}, std: {1:0.0000}\",\n    meanDistance, stdDistance\n);\n\nHistogramBox.Show(\n    distances,\n    title: \"Distances\"\n)\n.SetNumberOfBins(50);\n```", "```py\n// Detection\nvar attackDF = featuresDF.Rows[\n    featuresDF[\"attack_category\"].Where(x => x.Value > 0).Keys\n].Columns[cols];\n\ndouble[][] attackData = BuildJaggedArray(\n    attackDF.ToArray2D<double>(), attackDF.RowCount, cols.Length\n);\n\ndouble[] attackDistances = ComputeDistances(attackData, normalVariances);\n```", "```py\n// 5-10% false alarm rate\nfor (int i = 4; i < 10; i++)\n{\n    double targetFalseAlarmRate = 0.01 * (i + 1);\n    double threshold = Accord.Statistics.Measures.Quantile(\n        distances,\n        1 - targetFalseAlarmRate\n    );\n\n    int[] detected = attackDistances.Select(x => x > threshold ? 1 : 0).ToArray();\n\n    EvaluateResults(attackLabels, detected, targetFalseAlarmRate);\n}\n```", "```py\nprivate static void EvaluateResults(int[] attackLabels, int[] detected, double targetFalseAlarmRate)\n{\n    double overallRecall = (double)detected.Sum() / attackLabels.Length;\n\n    double[] truePositives = new double[4];\n    double[] actualClassCounts = new double[4];\n\n    for (int i = 0; i < attackLabels.Length; i++)\n    {\n        actualClassCounts[attackLabels[i] - 1] += 1.0;\n\n        if (detected[i] > 0)\n        {\n            truePositives[attackLabels[i] - 1] += 1.0;\n        }\n    }\n\n    double[] recalls = truePositives.Select((x, i) => x / actualClassCounts[i]).ToArray();\n\n    Console.WriteLine(\"\\n\\n---- {0:0.0}% False Alarm Rate ----\", targetFalseAlarmRate * 100.0);\n    Console.WriteLine(\"* Overall Attack Detection: {0:0.00}%\", overallRecall * 100.0);\n    Console.WriteLine(\n        \"* Detection by Attack Type:\\n\\t{0}\",\n        String.Join(\"\\n\\t\", recalls.Select(\n            (x, i) => String.Format(\"Class {0}: {1:0.00}%\", (i + 1), x * 100.0))\n        )\n    );\n}\n```"]