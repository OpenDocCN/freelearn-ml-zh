- en: Getting Started with OpenCV
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用OpenCV
- en: Computer vision applications are interesting and useful, but the underlying
    algorithms are computationally intensive. With the advent of cloud computing,
    we are getting more processing power to work with.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机视觉应用很有趣且有用，但底层算法计算量很大。随着云计算的出现，我们获得了更多的处理能力。
- en: The OpenCV library enables us to run computer vision algorithms efficiently
    in real time. It has been around for many years, and has become the standard library
    in this field. One of the main advantages of OpenCV is that it is highly optimized,
    and available on almost all platforms.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: OpenCV库使我们能够高效地在实时中运行计算机视觉算法。它已经存在很多年了，并已成为该领域的标准库。OpenCV的主要优势之一是它高度优化，几乎在所有平台上都可用。
- en: This book will cover the various algorithms we will be using, why we are using
    them, and how to implement them in OpenCV.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本书将涵盖我们将要使用的各种算法，为什么我们要使用它们，以及如何在OpenCV中实现它们。
- en: In this chapter, we are going to learn how to install OpenCV on various operating
    systems. We will discuss what OpenCV offers out of the box, and the various things
    that we can do using the inbuilt functions.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何在各种操作系统上安装OpenCV。我们将讨论OpenCV提供的功能，以及我们可以使用内置函数做些什么。
- en: 'By the end of this chapter, you will be able to answer the following questions:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将能够回答以下问题：
- en: How do humans process visual data, and how do they understand image content?
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 人类是如何处理视觉数据，又是如何理解图像内容的？
- en: What can we do with OpenCV, and what are the various modules available in OpenCV
    that can be used to achieve those things?
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以用OpenCV做什么，OpenCV中有哪些模块可以用来实现这些功能？
- en: How do we install OpenCV on Windows, Linux, and Mac OS X?
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们如何在Windows、Linux和Mac OS X上安装OpenCV？
- en: Understanding the human visual system
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解人类视觉系统
- en: Before we jump into OpenCV functionalities, we need to understand why those
    functions were built in the first place. It's important to understand how the
    human visual system works, so that you can develop the right algorithms.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入探讨OpenCV的功能之前，我们需要了解这些功能最初为何被构建。理解人类视觉系统的工作原理非常重要，这样你才能开发出正确的算法。
- en: The goal of computer vision algorithms is to understand the content of images
    and videos. Humans seem to do it effortlessly! So, how do we get machines to do
    it with the same accuracy?
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机视觉算法的目标是理解图像和视频的内容。人类似乎能毫不费力地做到这一点！那么，我们如何让机器以同样的精度做到这一点呢？
- en: 'Let''s consider the following diagram:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑以下图表：
- en: '![](img/2b852a3b-bc18-4cb4-b42f-98edb1327ca8.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/2b852a3b-bc18-4cb4-b42f-98edb1327ca8.png)'
- en: The human eye captures all the information that comes along the way, such as
    color, shape, brightness, and so on. In the preceding image, the human eye captures
    all the information about the two main objects and stores it in a certain way.
    Once we understand how our system works, we can take advantage of it to achieve
    what we want.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 人眼捕捉了所有沿路而来的信息，如颜色、形状、亮度等。在前面的图像中，人眼捕捉了关于两个主要物体的所有信息，并以某种方式存储。一旦我们理解了我们的系统是如何工作的，我们就可以利用它来实现我们的目标。
- en: 'For example, here are a few things we need to know:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下是我们需要了解的一些事情：
- en: Our visual system is more sensitive to low-frequency content than high-frequency
    content. Low-frequency content refers to planar regions where pixel values don't
    change rapidly, and high-frequency content refers to regions with corners and
    edges where pixel values fluctuate a lot. We can easily see if there are blotches
    on a planar surface, but it's difficult to spot something like that on a highly-textured
    surface.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们的视觉系统对低频内容比高频内容更敏感。低频内容指的是像素值变化不快的平面区域，高频内容指的是像素值波动很大的角落和边缘区域。我们很容易在平面表面上看到污点，但在高度纹理化的表面上很难发现类似的东西。
- en: The human eye is more sensitive to changes in brightness than to changes in
    color.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 人眼对亮度变化比颜色变化更敏感。
- en: Our visual system is sensitive to motion. We can quickly recognize if something
    is moving in our field of vision, even though we are not directly looking at it.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们的视觉系统对运动非常敏感。即使我们没有直接看它，我们也能迅速识别出视野中是否有物体在移动。
- en: We tend to make a mental note of salient points in our field of vision. Let's
    say you look at a white table with four black legs, and a red dot at one of the
    corners of the table surface. When you look at this table, you'll immediately
    make a mental note that the surface and legs have opposing colors, and that there
    is a red dot on one of the corners. Our brain is really smart that way! We do
    this automatically so that we can immediately recognize an object if we encounter
    it again.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们倾向于在我们的视野中记住显著点。比如说，你看到一个白色的桌子，有四条黑色的腿，桌面的一个角落有一个红色的点。当你看这个桌子时，你会立即在脑海中记下桌面的颜色和腿的颜色是相反的，并且桌子的一个角落有一个红色的点。我们的头脑真的很聪明！我们这样做是自动的，这样我们就能立即识别出如果我们再次遇到它的话。
- en: 'To get an idea of our field of view, let''s look at the top view of a human,
    and the angles at which we see various things:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 为了了解我们的视野，让我们看看人类的俯视图以及我们看到各种事物的角度：
- en: '![](img/385f2bbd-533c-4438-be64-188d0b1b59a6.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/385f2bbd-533c-4438-be64-188d0b1b59a6.png)'
- en: Our visual system is actually capable of a lot more, but this should be good
    enough to get us started. You can explore further by reading up on **Human Visual
    System** (**HVS**) models on the web.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的大脑视觉系统实际上能够做到更多，但这应该足以让我们开始。你可以通过在网上阅读有关**人类视觉系统**（HVS）模型的内容来进一步探索。
- en: How do humans understand image content?
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 人类是如何理解图像内容的？
- en: If you look around, you will see a lot of objects. You encounter many different
    objects every day, and you recognize them almost instantaneously without any effort.
    When you see a chair, you don't wait for a few minutes before realizing that it
    is in fact a chair. You just know that it's a chair right away.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你四处看看，你会看到很多物体。你每天都会遇到许多不同的物体，你几乎可以瞬间识别它们，而不需要任何努力。当你看到一把椅子时，你不需要等待几分钟才意识到它实际上是一把椅子。你立刻就知道它是一把椅子。
- en: Computers, on the other hand, find it very difficult to do this task. Researchers
    have been working for many years to find out why computers are not as good as
    we are at this.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，计算机发现这项任务非常困难。研究人员已经多年致力于找出为什么计算机在这方面的表现不如我们。
- en: To get an answer to that question, we need to understand how humans do it. The
    visual data processing happens in the ventral visual stream. This ventral visual
    stream refers to the pathway in our visual system that is associated with object
    recognition. It is basically a hierarchy of areas in our brain that helps us recognize
    objects.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 要回答那个问题，我们需要了解人类是如何做到的。视觉数据处理发生在腹侧视觉流中。这个腹侧视觉流指的是我们视觉系统中与物体识别相关联的路径。它基本上是我们大脑中帮助识别物体的区域层次结构。
- en: Humans can recognize different objects effortlessly, and can cluster similar
    objects together. We can do this because we have developed some sort of invariance
    toward objects of the same class. When we look at an object, our brain extracts
    the salient points in such a way that factors such as orientation, size, perspective,
    and illumination don't matter.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 人类可以毫不费力地识别不同的物体，并将相似物体聚集在一起。我们可以这样做，因为我们已经发展出对同一类物体的一种不变性。当我们看一个物体时，我们的大脑以某种方式提取显著点，使得方向、大小、视角和照明等因素无关紧要。
- en: A chair that is double the normal size and rotated by 45 degrees is still a
    chair. We can recognize it easily because of the way we process it. Machines cannot
    do that so easily. Humans tend to remember an object based on its shape and important
    features. Regardless of how the object is placed, we can still recognize it.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 一个尺寸是正常尺寸的两倍并且旋转了45度的椅子仍然是一把椅子。我们之所以能轻易地识别它，是因为我们处理它的方式。机器不能那么容易做到这一点。人类倾向于根据物体的形状和重要特征来记住物体。无论物体如何放置，我们仍然可以识别它。
- en: In our visual system, we build up these hierarchical invariances with respect
    to position, scale, and viewpoint that help us to be very robust. If you look
    deeper into our system, you will see that humans have cells in their visual cortex
    that can respond to shapes such as curves and lines.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的视觉系统中，我们建立了关于位置、比例和视点的层次不变性，这使我们非常稳健。如果你深入我们的系统，你会看到人类在他们的视觉皮层中有细胞可以响应曲线和线条等形状。
- en: As we move further along our ventral stream, we will see more complex cells
    that are trained to respond to more complex objects such as trees, gates, and
    so on. The neurons along our ventral stream tend to show an increase in the size
    of the receptive field. This is coupled with the fact that the complexity of their
    preferred stimuli increases as well.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们沿着腹侧流进一步前进，我们将看到更多经过训练以对更复杂的物体（如树木、大门等）做出反应的复杂细胞。沿着我们的腹侧流，神经元倾向于显示出感受野大小的增加。这与它们首选刺激的复杂性增加的事实相辅相成。
- en: Why is it difficult for machines to understand image content?
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么机器理解图像内容这么困难？
- en: We now understand how visual data enters the human visual system, and how our
    system processes it. The issue is that we still don't fully understand how our
    brain recognizes and organizes this visual data. In machine learning, we just
    extract some features from images, and ask the computers to learn them using algorithms.
    We still have these variations, such as shape, size, perspective, angle, illumination,
    occlusion, and so on.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在理解了视觉数据是如何进入人类视觉系统的，以及我们的系统是如何处理它的。问题是，我们仍然不完全理解我们的大脑是如何识别和组织这些视觉数据的。在机器学习中，我们只是从图像中提取一些特征，并要求计算机使用算法来学习它们。我们仍然有这些变体，如形状、大小、视角、角度、光照、遮挡等。
- en: For example, the same chair looks very different to a machine when you look
    at it from the profile view. Humans can easily recognize that it's a chair, regardless
    of how it's presented to us. So, how do we explain this to our machines?
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，当从侧面视角看同一把椅子时，机器对它的感知与人类截然不同。人类可以轻易地识别出它是一把椅子，无论它以何种方式呈现给我们。那么，我们该如何向我们的机器解释这一点呢？
- en: One way to do this would be to store all the different variations of an object,
    including sizes, angles, perspectives, and so on. But this process is cumbersome
    and time-consuming. Also, it's actually not possible to gather data that can encompass
    every single variation. The machines would consume a huge amount of memory and
    a lot of time to build a model that can recognize these objects.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 实现这一点的其中一种方法是将一个物体的所有不同变体存储起来，包括大小、角度、视角等。但这个过程既繁琐又耗时。此外，实际上也不可能收集到涵盖所有变体的数据。机器需要消耗大量的内存和时间来构建一个能够识别这些物体的模型。
- en: Even with all this, if an object is partially occluded, computers still won't
    recognize it. This is because they think this is a new object. So when we build
    a computer vision library, we need to build the underlying functional blocks that
    can be combined in many different ways to formulate complex algorithms.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 即使有了所有这些，如果一个物体部分被遮挡，计算机仍然无法识别它。这是因为它们认为这是一个新物体。因此，当我们构建计算机视觉库时，我们需要构建可以以多种方式组合的基本功能模块，以形成复杂的算法。
- en: OpenCV provides a lot of these functions, and they are highly optimized. So
    once we understand what OpenCV is capable of, we can use it effectively to build
    interesting applications.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: OpenCV提供了许多这些功能，并且它们经过了高度优化。因此，一旦我们了解OpenCV的能力，我们就可以有效地使用它来构建有趣的应用程序。
- en: Let's go ahead and explore that in the next section.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续在下一节中探讨这个问题。
- en: What can you do with OpenCV?
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你可以用OpenCV做什么？
- en: Using OpenCV, you can pretty much do every computer vision task you can think
    of. Real-life problems require you to use many computer vision algorithms and
    modules together to achieve the desired result. So, you just need to understand
    which OpenCV modules and functions to use, in order to get what you want.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 使用OpenCV，你可以几乎完成你所能想到的每一个计算机视觉任务。现实生活中的问题需要你使用许多计算机视觉算法和模块一起工作，以达到预期的结果。所以，你只需要了解哪些OpenCV模块和函数可以使用，以便得到你想要的结果。
- en: Let's look at what OpenCV can do out of the box.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看OpenCV开箱即用的功能。
- en: Inbuilt data structures and input/output
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 内置数据结构和输入/输出
- en: One of the best things about OpenCV is that it provides a lot of in-built primitives
    to handle operations related to image processing and computer vision. If you have
    to write something from scratch, you will have to define `Image`, `Point`, `Rectangle`,
    and so on. These are fundamental to almost any computer vision algorithm.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: OpenCV最好的事情之一是它提供了许多内置原语来处理与图像处理和计算机视觉相关的操作。如果你必须从头开始编写，你将不得不定义`Image`、`Point`、`Rectangle`等。这些对于几乎任何计算机视觉算法都是基本的。
- en: OpenCV comes with all these basic structures out of the box, contained in the
    core module. Another advantage is that these structures have already been optimized
    for speed and memory, and so you don't have to worry about the implementation
    details.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: OpenCV自带所有这些基本结构，包含在核心模块中。另一个优点是这些结构已经针对速度和内存进行了优化，因此你不必担心实现细节。
- en: The `imgcodecs` module handles reading and writing of image files. When you
    operate on an input image and create an output image, you can save it as a `.jpg`
    or a `.png` file with a simple command.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`imgcodecs` 模块负责图像文件的读取和写入。当你对一个输入图像进行操作并创建一个输出图像时，你可以使用简单的命令将其保存为 `.jpg` 或
    `.png` 文件。'
- en: You will be dealing with a lot of video files when you work with cameras. The
    `videoio` module handles everything related to the input and output of video files.
    You can easily capture a video from the webcam or read a video file in many different
    formats. You can even save a bunch of frames as a video file by setting properties
    such as frames per second, frame size, and so on.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 当你与摄像头一起工作时，你会处理大量的视频文件。`videoio` 模块处理与视频文件输入和输出相关的所有事情。你可以轻松地从网络摄像头捕获视频或以许多不同的格式读取视频文件。你甚至可以通过设置每秒帧数、帧大小等属性，将一系列帧保存为视频文件。
- en: Image processing operations
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 图像处理操作
- en: When you write a computer vision algorithm, there are a lot of basic image processing
    operations that you will use over and over again. Most of these functions are
    present in the `imgproc` module. You can do things such as image filtering, morphological
    operations, geometric transformations, color conversions, drawing on images, histograms,
    shape analysis, motion analysis, feature detection, and more.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 当你编写计算机视觉算法时，你会反复使用许多基本的图像处理操作。这些函数中的大多数都包含在 `imgproc` 模块中。你可以进行诸如图像滤波、形态学操作、几何变换、颜色转换、在图像上绘制、直方图、形状分析、运动分析、特征检测等等操作。
- en: 'Let''s consider the following photo:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑以下照片：
- en: '![](img/7ae19f9b-34bf-44b2-a8fc-2a7220ce9ba6.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/7ae19f9b-34bf-44b2-a8fc-2a7220ce9ba6.png)'
- en: The right image is a rotated version of the one on the left. We can carry out
    this transformation with a single line in OpenCV.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 右侧的图像是左侧图像的旋转版本。我们可以在 OpenCV 中用一行代码完成这种变换。
- en: There is another module, called `ximgproc`, which contains advanced image processing
    algorithms such as structured forests for edge detection, domain transform filter,
    adaptive manifold filter, and so on.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 另有一个名为 `ximgproc` 的模块，其中包含了一些高级图像处理算法，例如用于边缘检测的结构化森林、域变换滤波器、自适应流形滤波器等等。
- en: GUI
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GUI
- en: OpenCV provides a module called `highgui` that handles all the high-level user
    interface operations. Let's say you are working on a problem, and you want to
    check what the image looks like before you proceed to the next step. This module
    has functions that can be used to create windows to display images and/or videos.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: OpenCV提供了一个名为 `highgui` 的模块，用于处理所有高级用户界面操作。假设你正在处理一个问题，并且想在继续到下一步之前检查图像的外观。此模块包含可以用于创建窗口以显示图像和/或视频的函数。
- en: There is a waiting function that will wait until you hit a key on your keyboard
    before it goes on to the next step. There is also a function that can detect mouse
    events. This is very useful in developing interactive applications.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个等待函数，它会在继续到下一步之前等待你按下键盘上的某个键。还有一个可以检测鼠标事件的函数。这在开发交互式应用程序中非常有用。
- en: 'Using this functionality, you can draw rectangles on those input windows, and
    then proceed based on the selected region. Consider the following screenshot:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此功能，你可以在这些输入窗口上绘制矩形，然后根据所选区域继续操作。考虑以下截图：
- en: '![](img/1bb9b533-be4b-45ea-b55f-e19cdd52c8b7.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/1bb9b533-be4b-45ea-b55f-e19cdd52c8b7.png)'
- en: As you can see, we drew a green rectangle on top of the window. Once we have
    the coordinates of that rectangle, we can operate only on that region.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们在窗口顶部绘制了一个绿色矩形。一旦我们有了该矩形的坐标，我们就可以只在该区域进行操作。
- en: Video analysis
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 视频分析
- en: Video analysis includes tasks such as analyzing the motion between successive
    frames in a video, tracking different objects in a video, creating models for
    video surveillance, and so on. OpenCV provides a module called `video` that can
    handle all of this.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 视频分析包括分析视频中连续帧之间的运动、跟踪视频中的不同对象、创建视频监控模型等任务。OpenCV提供了一个名为 `video` 的模块，可以处理所有这些。
- en: There is also a module called `videostab` that deals with video stabilization.
    Video stabilization is important, as when you are capturing videos by holding
    the camera in your hands, there's usually a lot of shake that needs correcting.
    All modern devices use video stabilization to process the video before it's presented
    to the end user.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一个名为`videostab`的模块，用于处理视频稳定化。视频稳定化非常重要，因为当你用手持相机拍摄视频时，通常会有很多需要校正的抖动。所有现代设备都会在将视频呈现给最终用户之前使用视频稳定化来处理视频。
- en: 3D reconstruction
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3D重建
- en: 3D reconstruction is an important topic in computer vision. Given a set of 2D
    images, we can reconstruct the 3D scene using relevant algorithms. OpenCV provides
    algorithms that can find the relationship between various objects in those 2D
    images to compute their 3D positions in its `calib3d` module.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 3D重建是计算机视觉中的一个重要主题。给定一组二维图像，我们可以使用相关算法来重建三维场景。OpenCV提供了算法，可以在其`calib3d`模块中找到这些二维图像中各种对象之间的关系，以计算它们的3D位置。
- en: This module can also handle camera calibration, which is essential for estimating
    the parameters of the camera. These parameters define how the camera sees the
    scene in front of it. We need to know these parameters to design algorithms, or
    else we might get unexpected results.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 此模块还可以处理相机标定，这对于估计相机的参数至关重要。这些参数定义了相机如何观察其前面的场景。我们需要知道这些参数来设计算法，否则我们可能会得到意外的结果。
- en: 'Let''s consider the following diagram:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑以下图表：
- en: '![](img/8a240217-624e-4efb-87f3-d36c73cefd50.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8a240217-624e-4efb-87f3-d36c73cefd50.png)'
- en: As we can see here, the same object is captured from multiple positions. Our
    job is to reconstruct the original object using these 2D images.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，相同的对象从多个位置被捕捉。我们的任务是使用这些二维图像重建原始对象。
- en: Feature extraction
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 特征提取
- en: As we discussed earlier, the human visual system tends to extract the salient
    features from a given scene to remember it for retrieval later. To mimic this,
    people started designing various feature extractors that can extract these salient
    points from a given image. Popular algorithms include **Scale Invariant Feature
    Transform** (**SIFT**), **Speeded Up Robust Features** (**SURF**), and **F****eatures
    From Accelerated Segment Test** (**FAST**).
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们之前讨论的，人类的视觉系统倾向于从给定的场景中提取显著特征以便于后续检索。为了模仿这一点，人们开始设计各种特征提取器，可以从给定的图像中提取这些显著点。流行的算法包括**尺度不变特征变换**（**SIFT**）、**加速鲁棒特征**（**SURF**）和**加速段测试特征**（**FAST**）。
- en: An OpenCV module called `features2d` provides functions to detect and extract
    all these features. Another module called `xfeatures2d` provides a few more feature
    extractors, some of which are still in the experimental phase. You can play around
    with these if you get the chance.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 一个名为`features2d`的OpenCV模块提供了检测和提取所有这些特征的功能。另一个名为`xfeatures2d`的模块提供了一些额外的特征提取器，其中一些仍处于实验阶段。如果你有机会，可以尝试玩弄这些功能。
- en: There is also a module called `bioinspired` that provides algorithms for biologically-inspired
    computer vision models.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一个名为`bioinspired`的模块，提供了生物启发的计算机视觉模型算法。
- en: Object detection
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 目标检测
- en: Object detection refers to detecting the location of an object in a given image.
    This process is not concerned with the type of object. If you design a chair detector,
    it will not tell you whether the chair in a given image is red with a high back,
    or blue with a low back—it will just tell you the location of the chair.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 目标检测是指检测给定图像中对象的位置。这个过程并不关心对象的类型。如果你设计了一个椅子检测器，它不会告诉你给定图像中的椅子是高背红色还是低背蓝色——它只会告诉你椅子的位置。
- en: 'Detecting the location of objects is a critical step in many computer vision
    systems. Consider the following photo:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多计算机视觉系统中，检测对象的位置是一个关键步骤。考虑以下照片：
- en: '![](img/eaa400c1-1994-457e-a3d1-bb5d7d2a65c6.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](img/eaa400c1-1994-457e-a3d1-bb5d7d2a65c6.png)'
- en: If you run a chair detector on this image, it will put a green box around all
    the chairs—but it won't tell you what kind of chair it is.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在该图像上运行一个椅子检测器，它会在所有椅子上放置一个绿色框，但它不会告诉你这是什么类型的椅子。
- en: 'Object detection used to be a computationally-intensive task because of the
    number of calculations required to perform the detection at various scales. To
    solve this, Paul Viola and Michael Jones came up with a great algorithm in their
    seminal 2001 paper, which you can read at the following link: [https://www.cs.cmu.edu/~efros/courses/LBMV07/Papers/viola-cvpr-01.pdf](https://www.cs.cmu.edu/~efros/courses/LBMV07/Papers/viola-cvpr-01.pdf).
    They provided a fast way to design an object detector for any object.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 由于需要在各种尺度上进行检测所需的计算量，物体检测曾经是一个计算密集型任务。为了解决这个问题，Paul Viola 和 Michael Jones 在他们开创性的
    2001 年论文中提出了一个伟大的算法，你可以在以下链接中阅读：[https://www.cs.cmu.edu/~efros/courses/LBMV07/Papers/viola-cvpr-01.pdf](https://www.cs.cmu.edu/~efros/courses/LBMV07/Papers/viola-cvpr-01.pdf)。他们提供了一种快速设计任何对象检测器的方法。
- en: OpenCV has modules called `objdetect` and `xobjdetect` that provide the framework
    to design an object detector. You can use it to develop detectors for random items
    such as sunglasses, boots, and so on.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: OpenCV 有名为 `objdetect` 和 `xobjdetect` 的模块，它们提供了设计对象检测器的框架。你可以用它来开发用于随机物品（如太阳镜、靴子等）的检测器。
- en: Machine learning
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 机器学习
- en: Machine learning algorithms are used extensively to build computer vision systems
    for object recognition, image classification, face detection, visual search, and
    so on.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 机器学习算法被广泛用于构建计算机视觉系统，用于物体识别、图像分类、人脸检测、视觉搜索等。
- en: OpenCV provides a module called `ml`, which has many machine learning algorithms
    bundled into it, including a **Bayes classifier**, **k-nearest neighbors** (**KNN**),
    **support vector machines** (**SVM**), **decision trees**, **neural networks**,
    and more.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: OpenCV 提供了一个名为 `ml` 的模块，其中包含了许多打包的机器学习算法，包括**贝叶斯分类器**、**k近邻**（**KNN**）、**支持向量机**（**SVM**）、**决策树**、**神经网络**等。
- en: It also has a module called **Fast Approximate Nearest Neighbor Search Library**
    (**FLANN**), which contains algorithms for fast nearest neighbor searches in large
    datasets.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 它还包含一个名为**快速近似最近邻搜索库**（**FLANN**）的模块，该模块包含在大数据集中进行快速最近邻搜索的算法。
- en: Computational photography
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 计算摄影学
- en: Computational photography refers to using advanced image processing techniques
    to improve the images captured by cameras. Instead of focusing on optical processes
    and image capture methods, computational photography uses software to manipulate
    visual data. Applications include high dynamic range imaging, panoramic images,
    image relighting, and light field cameras.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 计算摄影学指的是使用高级图像处理技术来改善相机捕捉的图像。计算摄影学不是关注光学过程和图像捕捉方法，而是使用软件来操纵视觉数据。应用包括高动态范围成像、全景图像、图像重光照和光场相机。
- en: 'Let''s look at the following image:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看以下图像：
- en: '![](img/12c9b784-2399-48be-9428-a3a919108bdf.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](img/12c9b784-2399-48be-9428-a3a919108bdf.png)'
- en: Look at those vivid colors! This is an example of a high dynamic range image,
    and it wouldn't be possible to get this using conventional image capture techniques.
    To do this, we have to capture the same scene at multiple exposures, register
    those images with each other, and then blend them nicely to create this image.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 看看那些鲜艳的颜色！这是一个高动态范围图像的例子，使用传统的图像捕捉技术是无法得到这样的效果的。为了做到这一点，我们必须在多个曝光下捕捉相同的场景，将这些图像相互注册，然后很好地融合它们以创建这张图像。
- en: The `photo` and `xphoto` modules contain various algorithms that provide algorithms
    pertaining to computational photography. There is also a module called `stitching`
    that provides algorithms to create panoramic images.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '`photo` 和 `xphoto` 模块包含各种算法，提供了与计算摄影相关的算法。还有一个名为 `stitching` 的模块，它提供了创建全景图像的算法。'
- en: 'The image shown can be found here: [https://pixabay.com/en/hdr-high-dynamic-range-landscape-806260/](https://pixabay.com/en/hdr-high-dynamic-range-landscape-806260/).'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 展示的图像可以在以下链接找到：[https://pixabay.com/en/hdr-high-dynamic-range-landscape-806260/](https://pixabay.com/en/hdr-high-dynamic-range-landscape-806260/)。
- en: Shape analysis
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 形状分析
- en: The notion of shape is crucial in computer vision. We analyze visual data by
    recognizing various different shapes in the image. This is actually an important
    step in many algorithms.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 形状的概念在计算机视觉中至关重要。我们通过识别图像中的各种不同形状来分析视觉数据。这实际上是许多算法中的重要步骤。
- en: Let's say you are trying to identify a particular logo in an image. You know
    that it can appear in various shapes, orientations, and sizes. One good way to
    get started is to quantify the characteristics of the shape of the object.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你正在尝试识别图像中的特定标志。你知道它可以以各种形状、方向和大小出现。一个很好的开始方法是量化物体的形状特征。
- en: The `shape` module provides all the algorithms required to extract different
    shapes, measure similarity between them, transform the shapes of objects, and
    more.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`shape` 模块提供了提取不同形状、测量它们之间的相似性、转换物体形状以及更多所需的所有算法。'
- en: Optical flow algorithms
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 光流算法
- en: Optical flow algorithms are used in videos to track features across successive
    frames. Let's say you want to track a particular object in a video. Running a
    feature extractor on each frame would be computationally expensive; hence, the
    process would be slow. So, you just extract the features from the current frame,
    and then track those features in successive frames.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 光流算法在视频中用于跟踪连续帧之间的特征。假设你想要在视频中跟踪一个特定的对象。在每一帧上运行特征提取器将是计算上昂贵的；因此，这个过程会变慢。所以，你只需从当前帧中提取特征，然后在后续帧中跟踪这些特征。
- en: Optical flow algorithms are heavily used in video-based applications in computer
    vision. The `optflow` module contains all the algorithms required to perform optical
    flow. There is also a module called `tracking` that contains more algorithms that
    can be used to track features.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 光流算法在计算机视觉的视频应用中被广泛使用。`optflow` 模块包含了执行光流所需的所有算法。还有一个名为 `tracking` 的模块，其中包含更多可用于跟踪特征的算法。
- en: Face and object recognition
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 面部和物体识别
- en: Face recognition refers to identifying the person in a given image. This is
    not the same as face detection, where you simply identify the location of a face
    in the given image.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 面部识别是指识别给定图像中的人。这不同于面部检测，面部检测只是简单地识别给定图像中面部位置。
- en: If you want to build a practical biometric system that can recognize the person
    in front of the camera, you first need to run a face detector to identify the
    location of the face, and then run a separate face recognizer to identify who
    the person is. There is an OpenCV module called `face` that deals with face recognition.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要构建一个实用的生物识别系统，能够识别摄像头前的人，你首先需要运行一个面部检测器来识别面部位置，然后运行一个单独的面部识别器来识别这个人是谁。有一个名为
    `face` 的OpenCV模块处理面部识别。
- en: As we discussed earlier, computer vision tries to model algorithms based on
    how humans perceive visual data. So, it would be helpful to find salient regions
    and objects in the images that can help with different applications such as object
    recognition, object detection and tracking, and so on. There is a module called
    `saliency` that's designed for this purpose. It provides algorithms that can detect
    salient regions in static images and videos.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前讨论的，计算机视觉试图根据人类感知视觉数据的方式来建模算法。因此，找到图像中突出的区域和对象对于不同的应用，如物体识别、物体检测和跟踪等，将非常有帮助。有一个名为
    `saliency` 的模块就是为了这个目的而设计的。它提供了可以检测静态图像和视频中突出区域的算法。
- en: Surface matching
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 表面匹配
- en: We are increasingly interacting with devices that can capture the 3D structure
    of the objects around us. These devices essentially capture depth information,
    along with the regular 2D color images. So, it's important for us to build algorithms
    that can understand and process 3D objects.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们越来越多地与能够捕捉周围物体3D结构的设备进行交互。这些设备本质上捕获深度信息，以及常规的2D彩色图像。因此，对我们来说，构建能够理解和处理3D对象的算法非常重要。
- en: '**Kinect** is a good example of a device that captures depth information along
    with the visual data. The task at hand is to recognize the input 3D object, by
    matching it to one of the models in our database. If we have a system that can
    recognize and locate objects, then it can be used for many different applications.'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '**Kinect** 是一个捕获深度信息和视觉数据的设备的良好例子。当前的任务是通过将其与数据库中的某个模型进行匹配来识别输入的3D对象。如果我们有一个可以识别和定位对象的系统，那么它可以用于许多不同的应用。'
- en: There is a module called `surface_matching` that contains algorithms for 3D
    object recognition and a pose estimation algorithm using 3D features.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个名为 `surface_matching` 的模块，其中包含用于3D物体识别和基于3D特征的姿态估计算法的算法。
- en: Text detection and recognition
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文本检测和识别
- en: Identifying text in a given scene and recognizing the content is becoming increasingly
    important. Applications include number plate recognition, recognizing road signs
    for self-driving cars, book scanning to digitize content, and more.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在给定场景中识别文本并识别其内容变得越来越重要。应用包括车牌识别、识别自动驾驶汽车的道路标志、书籍扫描以数字化内容等。
- en: There is a module called `text` that contains various algorithms to handle text
    detection and recognition.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个名为 `text` 的模块，其中包含处理文本检测和识别的各种算法。
- en: Deep learning
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 深度学习
- en: Deep learning has a big impact on computer vision and image recognition, and
    achieves a higher level of accuracy than other machine learning and artificially
    intelligent algorithms. Deep learning is not a new concept; it was introduced
    to the community around 1986, but it started a revolution around 2012 when new
    GPU hardware was optimized for parallel computing and **Convolutional Neural Network**
    (**CNN**) implementations and other techniques allowed the training of complex
    neural network architectures in reasonable times.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 深度学习对计算机视觉和图像识别产生了重大影响，其准确度高于其他机器学习和人工智能算法。深度学习不是一个新概念；它大约在1986年引入到社区中，但它在2012年左右引发了一场革命，当时新的GPU硬件被优化用于并行计算，**卷积神经网络**（**CNN**）的实现以及其他技术使得在合理的时间内训练复杂的神经网络架构成为可能。
- en: Deep learning can be applied to multiple use cases such as image recognition,
    object detection, voice recognition, and natural language processing. Since version
    3.4, OpenCV has been implementing deep learning algorithms—in the latest version,
    multiple importers for important frameworks such as **TensorFlow** and **Caffe**
    have been added.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 深度学习可以应用于多个用例，如图像识别、目标检测、语音识别和自然语言处理。自3.4版本以来，OpenCV一直在实现深度学习算法——在最新版本中，添加了多个重要框架的导入器，如**TensorFlow**和**Caffe**。
- en: Installing OpenCV
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装OpenCV
- en: Let's see how to get OpenCV up and running on various operating systems.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何在各种操作系统上启动和运行OpenCV。
- en: Windows
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Windows
- en: To keep things easy, let's install OpenCV using pre-built libraries. Go to [opencv.org](https://opencv.org/)
    and download the latest version for Windows. The current version is 4.0.0, and
    you can get the download link from the OpenCV homepage. You should make sure you
    have admin rights before you proceed.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简化操作，让我们使用预构建库来安装OpenCV。访问[opencv.org](https://opencv.org/)并下载适用于Windows的最新版本。当前版本是4.0.0，您可以从OpenCV主页获取下载链接。在继续之前，请确保您有管理员权限。
- en: The downloaded file will be an executable file, so just double-click on it to
    start the installation. The installer expands the content into a folder. You will
    be able to choose the installation path, and check the installation by inspecting
    the files.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 下载的文件将是一个可执行文件，所以只需双击它即可开始安装。安装程序会将内容展开到一个文件夹中。您可以选择安装路径，并通过检查文件来验证安装。
- en: Once you are done with the previous step, we need to set the OpenCV environment
    variables and add them to the system path to complete the installation. We will
    set up an environment variable that will hold the build directory of the OpenCV
    library. We will be using this in our projects.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 完成上一步骤后，我们需要设置OpenCV环境变量并将它们添加到系统路径中，以完成安装。我们将设置一个环境变量，它将保存OpenCV库的构建目录。我们将在我们的项目中使用这个变量。
- en: 'Open up the Terminal and type the following:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 打开终端并输入以下命令：
- en: '[PRE0]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We are assuming that you have a 64-bit machine with Visual Studio 2015 installed.
    If you have Visual Studio 2012, replace `vc14` with `vc11` in the command. The
    path specified is where we would have our OpenCV binaries, and you should see
    two folders inside that path called `lib` and `bin`. If you are using Visual Studio
    2018, you should compile OpenCV from scratch.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们假设您拥有一台安装了Visual Studio 2015的64位机器。如果您使用的是Visual Studio 2012，请在命令中将`vc14`替换为`vc11`。指定的路径是我们存放OpenCV二进制文件的地方，您应该在该路径下看到两个文件夹，分别命名为`lib`和`bin`。如果您使用的是Visual
    Studio 2018，您应该从头开始编译OpenCV。
- en: Let's go ahead and add a path to the `bin` folder to our system path. The reason
    we need to do this is because we will be using the OpenCV library in the form
    of **dynamic link libraries** (**DLL**s). Essentially, all the OpenCV algorithms
    are stored here, and our operating system will only load them during runtime.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续将`bin`文件夹的路径添加到我们的系统路径中。我们需要这样做的原因是我们将以**动态链接库**（**DLL**）的形式使用OpenCV库。本质上，所有OpenCV算法都存储在这里，我们的操作系统将在运行时加载它们。
- en: In order to do that, our operating system needs to know where they are located.
    The `PATH` system variable contains a list of all the folders where it can find
    DLLs. So, naturally, we need to add the path of the OpenCV library to this list.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 为了做到这一点，我们的操作系统需要知道它们的位置。`PATH`系统变量包含了一个它可以在其中找到DLL的所有文件夹的列表。因此，自然地，我们需要将OpenCV库的路径添加到这个列表中。
- en: Why do we need to do all this? Well, the other option is to copy the required
    DLLs in the same folder as the application's executable file (`.exe` file). This
    is an unnecessary overhead, especially when we are working with many different
    projects.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么我们需要做所有这些？好吧，另一个选择是将所需的 DLL 文件复制到与应用程序的可执行文件（`.exe` 文件）相同的文件夹中。这会增加不必要的开销，尤其是在我们处理许多不同项目时。
- en: 'We need to edit the `PATH` variable to add this folder. You can use software
    such as Path Editor to do this, which you can download from here: [https://patheditor2.codeplex.com](https://patheditor2.codeplex.com).
    Once you install it, start it up and add the following new entry (you can right-click
    on the path to insert a new item):'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要编辑 `PATH` 变量以添加此文件夹。您可以使用 Path Editor 等软件来完成此操作，您可以从这里下载：[https://patheditor2.codeplex.com](https://patheditor2.codeplex.com)。安装后，启动它并添加以下新条目（您可以在路径上右键单击以插入新项目）：
- en: '[PRE1]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Go ahead and save it to the registry. We are done!
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 继续保存到注册表中。我们完成了！
- en: Mac OS X
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Mac OS X
- en: In this section, we will see how to install OpenCV on Mac OS X. Precompiled
    binaries are not available for Mac OS X, so we need to compile OpenCV from scratch.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将了解如何在 Mac OS X 上安装 OpenCV。预编译的二进制文件对于 Mac OS X 不可用，因此我们需要从头开始编译 OpenCV。
- en: 'Before we proceed, we need to install CMake. If you don''t already have CMake
    installed, you can download it from here: [https://cmake.org/files/v3.12/cmake-3.12.0-rc1-Darwin-x86_64.dmg](https://cmake.org/files/v3.12/cmake-3.12.0-rc1-Darwin-x86_64.dmg).
    It''s a `.dmg` file, so once you download it, just run the installer.'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续之前，我们需要安装 CMake。如果您还没有安装 CMake，您可以从这里下载它：[https://cmake.org/files/v3.12/cmake-3.12.0-rc1-Darwin-x86_64.dmg](https://cmake.org/files/v3.12/cmake-3.12.0-rc1-Darwin-x86_64.dmg)。它是一个
    `.dmg` 文件，因此一旦下载，只需运行安装程序即可。
- en: 'Download the latest version of OpenCV from [opencv.org](https://opencv.org/).
    The current version is 4.0.0, and you can download it from here: [https://github.com/opencv/opencv/archive/4.0.0.zip](https://github.com/opencv/opencv/archive/4.0.0.zip).
    Unzip the contents into a folder of your choice.'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 从 [opencv.org](https://opencv.org/) 下载 OpenCV 的最新版本。当前版本是 4.0.0，您可以从这里下载：[https://github.com/opencv/opencv/archive/4.0.0.zip](https://github.com/opencv/opencv/archive/4.0.0.zip)。将内容解压到您选择的文件夹中。
- en: OpenCV 4.0.0 also has a new package called `opencv_contrib`, containing user
    contributions that are not yet considered stable, and some algorithms that are
    not freely available for commercial use in all the latest computer vision algorithms,
    which is worth keeping in mind. Installing this package is optional—OpenCV will
    work just fine if you don't install `opencv_contrib`.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: OpenCV 4.0.0 还有一个名为 `opencv_contrib` 的新软件包，其中包含尚未被认为是稳定的用户贡献和一些在所有最新的计算机视觉算法中不免费提供给商业使用的算法，这一点值得记住。安装此软件包是可选的——如果您不安装
    `opencv_contrib`，OpenCV 仍然可以正常工作。
- en: 'Since we are installing OpenCV anyway, it''s good to install this package so
    that you can experiment with it later on (as opposed to going through the whole
    installation process again). It is a great way to learn and play around with new
    algorithms. You can download it from the following link: [https://github.com/opencv/opencv_contrib/archive/4.0.0.zip](https://github.com/opencv/opencv_contrib/archive/4.0.0.zip).'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们无论如何都要安装 OpenCV，因此安装此软件包以便您可以稍后进行实验（而不是再次经历整个安装过程）是个不错的选择。这是一种学习和探索新算法的好方法。您可以从以下链接下载它：[https://github.com/opencv/opencv_contrib/archive/4.0.0.zip](https://github.com/opencv/opencv_contrib/archive/4.0.0.zip)。
- en: Unzip the contents of the zip file into a folder of your choice. For convenience,
    unzip it into the same folder as before, so that the `opencv-4.0.0` and `opencv_contrib-4.0.0`
    folders are in the same main folder.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 将 zip 文件的内容解压到您选择的文件夹中。为了方便，将其解压到之前的文件夹中，这样 `opencv-4.0.0` 和 `opencv_contrib-4.0.0`
    文件夹就在同一个主文件夹中。
- en: 'We are now ready to build OpenCV. Open up your Terminal and navigate to the
    folder where you unzipped the contents of OpenCV 4.0.0\. Run the following commands
    after substituting the right paths in the commands:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经准备好构建 OpenCV。打开您的终端，导航到您解压 OpenCV 4.0.0 内容的文件夹。在命令中替换正确的路径后，运行以下命令：
- en: '[PRE2]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'It''s time to install OpenCV 4.0.0\. Go to the `/full/path/to/opencv-4.0.0/build`
    directory, and run the following commands on your Terminal:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 是时候安装 OpenCV 4.0.0 了。前往 `/full/path/to/opencv-4.0.0/build` 目录，并在您的终端上运行以下命令：
- en: '[PRE3]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In the preceding command, the **`-j4`** flag indicates that it should be using
    four cores to install it. It''s faster this way! Now, let''s set the library path.
    Open up your `~/.profile` file in your Terminal using the `vi ~/.profile` command,
    and add the following line:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的命令中，**`-j4`**标志表示应该使用四个核心来安装它。这样更快！现在，让我们设置库路径。在终端中使用`vi ~/.profile`命令打开你的`~/.profile`文件，并添加以下行：
- en: '[PRE4]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We need to copy the `pkgconfig` file in `opencv.pc` to `/usr/local/lib/pkgconfig`
    and name it `opencv4.pc`. This way, if you already have an existing OpenCV 3.x.x
    installation, there will be no conflict. Let''s go ahead and do that:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要将`opencv.pc`中的`pkgconfig`文件复制到`/usr/local/lib/pkgconfig`，并命名为`opencv4.pc`。这样，如果你已经有一个现有的OpenCV
    3.x.x安装，将不会有冲突。让我们继续做：
- en: '[PRE5]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We need to update our `PKG_CONFIG_PATH` variable as well. Open up your `~/.profile`
    file and add the following line:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要更新我们的`PKG_CONFIG_PATH`变量。打开你的`~/.profile`文件并添加以下行：
- en: '[PRE6]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Reload your `~/.profile` file using the following command:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令重新加载你的`~/.profile`文件：
- en: '[PRE7]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We''re finished! Let''s see if it''s working:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 我们完成了！让我们看看它是否工作：
- en: '[PRE8]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: If you see Welcome to OpenCV 4.0.0 printed on your Terminal, you are good to
    go. We will be using CMake to build our OpenCV projects throughout this book.
    We will cover it in more detail in [Chapter 2](37cf2702-b8c6-41ff-a935-fd4030f8ce64.xhtml),
    *An Introduction to the Basics of OpenCV*.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看到终端上打印了“Welcome to OpenCV 4.0.0”，那么你可以正常使用了。在这本书中，我们将使用CMake来构建我们的OpenCV项目。我们将在[第2章](37cf2702-b8c6-41ff-a935-fd4030f8ce64.xhtml)《OpenCV基础知识简介》中更详细地介绍它。
- en: Linux
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Linux
- en: 'Let''s see how to install OpenCV on Ubuntu. We need to install some dependencies
    before we begin. Let''s install them using the package manager by running the
    following command in your Terminal:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何在Ubuntu上安装OpenCV。在开始之前，我们需要安装一些依赖项。让我们通过在终端中运行以下命令来使用包管理器安装它们：
- en: '[PRE9]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now that you have installed the dependencies, let''s download, build, and install
    OpenCV:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经安装了依赖项，让我们下载、构建和安装OpenCV：
- en: '[PRE10]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Let''s copy the `pkgconfig` file in `opencv.pc` to `/usr/local/lib/pkgconfig`,
    and name it `opencv4.pc`:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们复制`opencv.pc`中的`pkgconfig`文件到`/usr/local/lib/pkgconfig`，并命名为`opencv4.pc`：
- en: '[PRE11]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: We're finished! We will now be able to use it to compile our OpenCV programs
    from the command line. Also, if you already have an existing OpenCV 3.x.x installation,
    there will be no conflict.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 我们完成了！现在我们将能够使用它从命令行编译我们的OpenCV程序。另外，如果你已经有一个现有的OpenCV 3.x.x安装，将不会有冲突。
- en: 'Let''s check the installation is working properly:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查安装是否正常工作：
- en: '[PRE12]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: If you see Welcome to OpenCV 4.0.0 printed on your Terminal, you should be good
    to go. In the following chapters, we will learn how to use CMake to build our
    OpenCV projects.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看到终端上打印了“Welcome to OpenCV 4.0.0”，那么你应该可以正常使用了。在接下来的章节中，我们将学习如何使用CMake来构建我们的OpenCV项目。
- en: Summary
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we discussed the human visual system, and how humans process
    visual data. We explained why it's difficult for machines to do the same, and
    what we need to consider when designing a computer vision library.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了人类视觉系统以及人类如何处理视觉数据。我们解释了为什么机器做同样的事情很困难，以及设计计算机视觉库时需要考虑什么。
- en: We learned what could be done using OpenCV, and the various modules that can
    be used to complete those tasks. Finally, we learned how to install OpenCV in
    various operating systems.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 我们学习了可以使用OpenCV做什么，以及可以用来完成这些任务的各个模块。最后，我们学习了如何在不同的操作系统上安装OpenCV。
- en: In the next chapter, we will discuss how to operate on images and how we can
    manipulate them using various functions. We will also learn about building a project
    structure for our OpenCV applications.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论如何操作图像以及我们如何可以使用各种函数来操纵它们。我们还将学习为我们的OpenCV应用程序构建项目结构。
