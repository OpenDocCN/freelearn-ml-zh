["```py\nproduct_id,avg_rating,sold \n1,2.5,100\n2,3.7,200\n3,4.2,300\n4,1.3,50\n5,4.9,800\n6,3.2,150\n7,2.1,80\n8,4.8,500\n9,3.9,400\n10,2.4,200\n11,4.1,300\n12,3.2,100\n13,2.9,150\n14,4.5,500\n15,3.8,400\n16,2.7,200\n17,4.3,300\n18,3.4,100\n19,2.3,150\n20,4.7,500 \n```", "```py\na: 42 \n```", "```py\n! pip install pandas scikit-learn \n```", "```py\n# Import pandas and scikit-learn in a notebook.\nimport pandas as pd\nimport sklearn.linear_model \n```", "```py\n# Read a CSV file in a notebook. \ndf = pd.read_csv(\"sales_rating.csv\") \n```", "```py\ndf.head() \n```", "```py\n product_id  avg_rating  sold\n0            1         2.5   100\n1            2         3.7   200\n2            3         4.2   300\n3            4         1.3    50\n4            5         4.9   800 \n```", "```py\n# Create a test and training dataset in a notebook, suggested test size of 0.2\ntest_size = 0.2\ntest = df.sample(frac=test_size)\ntraining = df.drop(test.index) \n```", "```py\n# Create a model in a notebook using the LinearRegression algorithm.\nmodel = sklearn.linear_model.LinearRegression()\nmodel.fit(training[[\"avg_rating\"]], training[[\"sold\"]]) \n```", "```py\n# How good is the model in a notebook? Show the code.\nscore = model.score(test[[\"avg_rating\"]], test[[\"sold\"]]) \n```", "```py\nscore returns the coefficient of determination R^2 of the prediction. \n```", "```py\nit returns a number between 0 and 1, where 1 is perfect prediction and 0 is no prediction. \n```", "```py\n# Predict in a notebook. Show the code.\npredictions = model.predict(test[[\"avg_rating\"]]) \n```", "```py\nprint the predictions \n```", "```py\nplot the predictions \n```", "```py\n# Show me how to print and plot predictions vs actual data in a notebook.\nimport matplotlib.pyplot as plt\nplt.scatter(test[[\"avg_rating\"]], test[[\"sold\"]],  color='black')\nplt.plot(test[[\"avg_rating\"]], predictions, color='blue', linewidth=3) \n```", "```py\nprint(predictions) \n```", "```py\n# Save the model to pkl in a notebook.\nimport pickle\npickle.dump(model, open(\"model.pkl\", \"wb\")) \n```", "```py\n# Create a REST API in Python that exposes the model in a pkl file.\nimport pickle\nimport flask\n# load the model\nmodel = pickle.load(open(\"model.pkl\", \"rb\"))\n# app\napp = flask.Flask(__name__)\n# routes\n@app.route('/', methods=['GET', 'POST'])\ndef predict():\n    if flask.request.method == 'GET':\n        return \"Please POST a JSON object to this endpoint to get a prediction.\"\n    else:\n        data = flask.request.json\n        prediction = model.predict([[data[\"avg_rating\"]]])\n        return flask.jsonify({\"prediction\": prediction[0][0]}) \n```", "```py\n! pip install skl2onnx \n```", "```py\nimport skl2onnx\n# convert the model to ONNX\nskl2onnx.to_onnx(model, train[[\"avg_rating\"]].astype(\"float32\"), \"model.onnx\") \n```", "```py\nnpm install onnxruntime \n```", "```py\nconst rt = require(\"onnxruntime\");\n# load model from ONNX\nmodel rt.InferenceSession(\"model.onnx\");\n# predict\nmodel.run(null, {model.get_inputs()[0].name: [[4.5]]}); \n```"]