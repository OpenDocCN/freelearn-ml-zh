- en: Chapter 2. Data Exploration with RMS Titanic
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Reading a Titanic dataset from a CSV file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Converting types on character variables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detecting missing values
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Imputing missing values
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring and visualizing data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Predicting passenger survival with a decision tree
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Validating the power of prediction with a confusion matrix
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Assessing performance with the ROC curve
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Data exploration helps a data consumer to focus on searching for information,
    with a view to forming a true analysis from the gathered information. Furthermore,
    with the completion of the steps of data munging, analysis, modeling, and evaluation,
    users can generate insights and valuable points from their focused data.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a real data exploration project, there are six steps involved in the exploration
    process. They are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Asking the right questions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Data collection.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Data munging.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Basic exploratory data analysis.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Advanced exploratory data analysis.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Model assessment.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'A more detailed explanation of these six steps is provided here:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Asking the right questions**: When the user presents their question, for
    example "What are my expected findings after the exploration is finished?", or
    "What kind of information can I extract through the exploration?," different results
    will be given. Therefore, asking the right question is essential in the first
    place, for the question itself determines the objective and target of the exploration.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Data collection**: Once the goal of exploration is determined, the user can
    start collecting or extracting relevant data from the data source, with regard
    to the exploration target. Mostly, data collected from disparate systems appears
    unorganized and diverse in format. Clearly, the original data may be from different
    sources, such as files, databases, or the Internet. To retrieve data from these
    sources requires the assistance of the file IO function, JDBC/ODBC, web crawler,
    and so on. This extracted data is called **raw data**, which is because it has
    not been subjected to processing, or been through any other manipulation. Most
    raw data is not easily consumed by the majority of analysis tools or visualization
    programs.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Data munging**: The next phase is data munging (or wrangling), a step to
    help map raw data into a more convenient format for consumption. During this phase,
    there are many processes, such as data parsing, sorting, merging, filtering, missing
    value completion, and other processes to transform and organize the data, and
    enable it to fit into a consume structure. Later, the mapped data can be further
    utilized for data aggregation, analysis, or visualization.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Basic exploratory data analysis**: After the data munging phase, users can
    conduct further analysis toward data processing. The most basic analysis is to
    perform exploratory data analysis. Exploratory data analysis involves analyzing
    a dataset by summarizing its characteristics. Performing basic statistical, aggregation,
    and visual methods are also crucial tasks to help the user understand data characteristics,
    which are beneficial for the user to capture the majority, trends, and outliers
    easily through plots.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Advanced exploratory data analysis**: Until now, the descriptive statistic
    gives a general description of data features. However, one would like to generate
    an inference rule for the user to predict data features based on input parameters.
    Therefore, the application of machine learning enables the user to generate an
    inferential model, where the user can input a training dataset to generate a predictive
    model. After this, the prediction model can be utilized to predict the output
    value or label based on given parameters.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Model assessment**: Finally, to assess whether the generating model performs
    the best in the data estimation of a given problem, one must perform a model selection.
    The selection method here involves many steps, including data preprocessing, tuning
    parameters, and even switching the machine learning algorithm. However, one thing
    that is important to keep in mind is that the simplest model frequently achieves
    the best results in predictive or exploratory power; whereas complex models often
    result in over fitting.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For the following example, we would like to perform a sample data exploration
    based on the dataset of passengers surviving the Titanic shipwreck. The steps
    we demonstrate here follow how to collect data from the online source, Kaggle;
    clean data through data munging; perform basic exploratory data analysis to discover
    important attributes that might give a prediction of the survival rate; perform
    advanced exploratory data analysis using the classification algorithm to predict
    the survival rate of the given data; and finally, perform model assessment to
    generate a prediction model.
  prefs: []
  type: TYPE_NORMAL
- en: Reading a Titanic dataset from a CSV file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To start the exploration, we need to retrieve a dataset from Kaggle ([https://www.kaggle.com/](https://www.kaggle.com/)).
    We had look at some of the samples in [Chapter 1](part0015_split_000.html#page
    "Chapter 1. Practical Machine Learning with R"), *Practical Machine Learning with
    R*. Here, we introduce methods to deal with real-world problems.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To retrieve data from Kaggle, you need to first sign up for a Kaggle account
    ([https://www.kaggle.com/account/register](https://www.kaggle.com/account/register)).
    Then, log in to the account for further exploration:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/00030.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Kaggle.com
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to read the Titanic dataset from the CSV file:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to [http://www.kaggle.com/c/titanic-gettingStarted/data](http://www.kaggle.com/c/titanic-gettingStarted/data)
    to retrieve the data list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You can see a list of data files for download, as shown in the following table:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| Filename | Available formats |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| `train` | `.csv` (59.76 kb) |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| `genderclassmodel` | `.py` (4.68 kb) |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| `myfirstforest` | `.csv` (3.18 kb) |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| `myfirstforest` | `.py` (3.83 kb) |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| `gendermodel` | `.csv` (3.18 kb) |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| `genderclassmodel` | `.csv` (3.18 kb) |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| `test` | `.csv` (27.96 kb) |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| `gendermodel` | `.py` (3.58 kb) |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: Download the training data ([https://www.kaggle.com/c/titanic-gettingStarted/download/train.csv](https://www.kaggle.com/c/titanic-gettingStarted/download/train.csv))
    to a local disk.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then, make sure the downloaded file is placed under the current directory.
    You can use the `getwd` function to check the current working directory. If the
    downloaded file is not located in the working directory, move the file to the
    current working directory. Or, you can use `setwd()` to set the working directory
    to where the downloaded files are located:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, one can use `read.csv` to load data into the data frame. Here, one can
    use the `read.csv` function to read `train.csv` to frame the data with the variable
    names set as `train.data`. However, in order to treat the blank string as `NA`,
    one can specify that `na.strings` equals either `"NA"` or an empty string:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, check the loaded data with the `str` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To begin the data exploration, we first downloaded the Titanic dataset from
    Kaggle, a website containing many data competitions and datasets. To load the
    data into the data frame, this recipe demonstrates how to apply the `read.csv`
    function to load the dataset with the `na.strings` argument, for the purpose of
    converting blank strings and `"NA"` to NA values. To see the structure of the
    dataset, we used the `str` function to compactly display `train.data`; you can
    find the dataset contains demographic information and survival labels of the passengers.
    The data collected here is good enough for beginners to practice how to process
    and analyze data.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: On Kaggle, much of the data on science is related to competitions, which mostly
    refer to designing a machine learning method to solve real-world problems.
  prefs: []
  type: TYPE_NORMAL
- en: Most competitions on Kaggle are held by either academia or corporate bodies,
    such as Amazon or Facebook. In fact, they create these contests and provide rewards,
    such as bonuses, or job prospects (see [https://www.kaggle.com/competitions](https://www.kaggle.com/competitions)).
    Thus, there are many data scientists who are attracted to registering for a Kaggle
    account to participate in competitions. A beginner in a pilot exploration can
    participate in one of these competitions, which will help them gain experience
    by solving real-world problems with their machine learning skills.
  prefs: []
  type: TYPE_NORMAL
- en: To create a more challenging learning environment as a competitor, a participant
    needs to submit their output answer and will receive the assessment score, so
    that each one can assess their own rank on the leader board.
  prefs: []
  type: TYPE_NORMAL
- en: Converting types on character variables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In R, since nominal, ordinal, interval, and ratio variable are treated differently
    in statistical modeling, we have to convert a nominal variable from a character
    into a factor.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You need to have the previous recipe completed by loading the Titanic training
    data into the R session, with the `read.csv` function and assigning an argument
    of `na.strings` equal to NA and the blank string (""). Then, assign the loaded
    data from `train.csv` into the `train.data` variables.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to convert the types on character variables:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the `str` function to print the overview of the Titanic data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To transform the variable from the `int` numeric type to the `factor` categorical
    type, you can cast `factor`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Print out the variable with the `str` function and again, you can see that
    `Pclass` and `Survived` are now transformed into the factor as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Talking about statistics, there are four measurements: nominal, ordinal, interval,
    and ratio. Nominal variables are used to label variables, such as gender and name;
    ordinal variables, and are measures of non-numeric concepts, such as satisfaction
    and happiness. Interval variables shows numeric scales, which tell us not only
    the order but can also show the differences between the values, such as temperatures
    in Celsius. A ratio variable shows the ratio of a magnitude of a continuous quantity
    to a unit magnitude. Ratio variables provide order, differences between the values,
    and a true zero value, such as weight and height. In R, different measurements
    are calculated differently, so you should perform a type conversion before applying
    descriptive or inferential analytics toward the dataset.'
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we first display the structure of the train data using the `str`
    function. From the structure of data, you can find the attribute name, data type,
    and the first few values contained in each attribute. From the `Survived` and
    `Pclass` attribute, you can see the data type as `int`. As the variable description
    listed in Chart 1 (*Preface*), you can see that `Survived` (0 = No; 1 = Yes) and
    `Pclass` (1 = 1st; 2 = 2nd; 3 = 3rd) are categorical variables. As a result, we
    transform the data from a character to a factor type via the `factor` function.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Besides factor, there are more type conversion functions. For numeric types,
    there are `is.numeric()` and `as.numeric()`; for character, there are: `is.character()`
    and `as.character()`. For vector, there are: `is.vector()` and `as.vector()`;
    for matrix, there are `is.matrix()` and `as.matrix()`. Finally, for data frame,
    there are: `is.data.frame()` and `as.data.frame()`.'
  prefs: []
  type: TYPE_NORMAL
- en: Detecting missing values
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Missing values reduce the representativeness of the sample, and furthermore,
    might distort inferences about the population. This recipe will focus on detecting
    missing values within the Titanic dataset.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You need to have completed the previous recipes by the `Pclass` attribute and
    `Survived` to a factor type.
  prefs: []
  type: TYPE_NORMAL
- en: In R, a missing value is noted with the symbol **NA** (**not available**), and
    an impossible value is **NaN** (**not a number**).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to detect the missing value:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `is.na` function is used to denote which index of the attribute contains
    the NA value. Here, we apply it to the `Age` attribute first:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `is.na` function indicates the missing value of the `Age` attribute. To
    get a general number of how many missing values there are, you can perform a `sum`
    to calculate this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To calculate the percentage of missing values, one method adopted is to count
    the number of missing values against nonmissing values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To get a percentage of the missing value of the attributes, you can use `sapply`
    to calculate the percentage of all the attributes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Besides simply viewing the percentage of missing data, one may also use the
    `Amelia` package to visualize the missing values. Here, we use `install.packages`
    and `require` to install `Amelia` and load the package. However, before the installation
    and loading of the `Amelia` package, you are required to install `Rcpp`, beforehand:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, use the `missmap` function to plot the missing value map:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![How to do it...](img/00031.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Missing map of the Titanic dataset
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In R, a missing value is often noted with the `"NA"` symbol, which stands for
    not available. Most functions (such as `mean` or `sum`) may output NA while encountering
    an NA value in the dataset. Though you can assign an argument such as `na.rm`
    to remove the effect of NA, it is better to impute or remove the missing data
    in the dataset to prevent propagating the effect of the missing value. To find
    out the missing value in the Titanic dataset, we first sum up all the NA values
    and divide them by the number of values within each attribute, Then, we apply
    the calculation to all the attributes with `sapply`.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to this, to display the calculation results using a table, you can
    utilize the `Amelia` package to plot the missing value map of every attribute
    on one chart. The visualization of missing values enables users to get a better
    understanding of the missing percentage within each dataset. From the preceding
    screenshot, you may have observed that the missing value is beige colored, and
    its observed value is dark red. The *x*-axis shows different attribute names,
    and the *y*-axis shows the recorded index. Clearly, most of the cabin shows missing
    data, and it also shows that about 19.87 percent of the data is missing when counting
    the `Age` attribute, and two values are missing in the `Embarked` attribute.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To handle the missing values, we introduced `Amelia` to visualize them. Apart
    from typing console commands, you can also use the interactive GUI of `Amelia`
    and `AmeliaView`, which allows users to load datasets, manage options, and run
    `Amelia` from a windowed environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'To start running `AmeliaView`, simply type `AmeliaView()` in the R Console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '![There''s more...](img/00032.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: AmeliaView
  prefs: []
  type: TYPE_NORMAL
- en: Imputing missing values
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After detecting the number of missing values within each attribute, we have
    to impute the missing values since they might have a significant effect on the
    conclusions that can be drawn from the data.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe will require `train.data` loaded in the R session and have the previous
    recipe completed by converting `Pclass` and `Survived` to a factor type.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to impute the missing values:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, list the distribution of **Port of Embarkation**. Here, we add the `useNA
    = "always"` argument to show the number of NA values contained within `train.data`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Assign the two missing values to a more probable port (that is, the most counted
    port), which is Southampton in this case:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In order to discover the types of titles contained in the names of `train.data`,
    we first tokenize `train.data$Name` by blank (a regular expression pattern as
    `"\\s+"`), and then count the frequency of occurrence with the `table` function.
    After this, since the name title often ends with a period, we use the regular
    expression to grep the word containing the period. In the end, `sort` the table
    in decreasing order:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To obtain which title contains missing values, you can use `str_match` provided
    by the `stringr` package to get a substring containing a period, then bind the
    column together with `cbind`. Finally, by using the table function to acquire
    the statistics of missing values, you can work on counting each title:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For a title containing a missing value, one way to impute data is to assign
    the mean value for each title (not containing a missing value):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, assign the missing value with the mean value of each title:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To impute the missing value of the `Embarked` attribute, we first produce the
    statistics of the embarked port with the `table` function. The `table` function
    counts two NA values in `train.data`. From the dataset description, we recognize
    C, Q, and S(C = Cherbourg, Q = Queenstown, S = Southampton). Since we do not have
    any knowledge about which category these two missing values are in, one possible
    way is to assign the missing value to the most likely port, which is `Southampton`.
  prefs: []
  type: TYPE_NORMAL
- en: As for another attribute, `Age`, though about 20 percent of the value is missing,
    users can still infer the missing value with the title of each passenger. To discover
    how many titles there are within the name of the dataset, we suggest the method
    of counting segmented words in the `Name` attribute, which helps to calculate
    the number of missing values of each given title. The resultant word table shows
    common titles such as `Mr`, `Mrs`, `Miss`, and `Master`. You may reference an
    English honorific entry from Wikipedia to get the description of each title.
  prefs: []
  type: TYPE_NORMAL
- en: Considering the missing data, we reassign the mean value of each title to the
    missing value with the corresponding title. However, for the `Cabin` attribute,
    there are too many missing values, and we cannot infer the value from any referencing
    attribute. Therefore, we find it does not work by trying to use this attribute
    for further analysis.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here we list the honorific entry from Wikipedia for your reference. According
    to it ([http://en.wikipedia.org/wiki/English_honorific](http://en.wikipedia.org/wiki/English_honorific)):'
  prefs: []
  type: TYPE_NORMAL
- en: '**Mr**: This is used for a man, regardless of his marital status'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Master**: This is used for young men or boys, especially used in the UK'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Miss**: It is usually used for unmarried women, though also used by married
    female entertainers'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mrs**: It is used for married women'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Dr**: It is used for a person in the US who owns his first professional degree'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring and visualizing data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After imputing the missing values, one should perform an exploratory analysis,
    which involves using a visualization plot and an aggregation method to summarize
    the data characteristics. The result helps the user gain a better understanding
    of the data in use. The following recipe will introduce how to use basic plotting
    techniques with a view to help the user with exploratory analysis.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe needs the previous recipe to be completed by imputing the missing
    value in the `age` and `Embarked` attribute.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to explore and visualize data:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, you can use a bar plot and histogram to generate descriptive statistics
    for each attribute, starting with passenger survival:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![How to do it...](img/00033.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Passenger survival
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We can generate the bar plot of passenger class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![How to do it...](img/00034.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Passenger class
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Next, we outline the gender data with the bar plot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![How to do it...](img/00035.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Passenger gender
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We then plot the histogram of the different ages with the `hist` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![How to do it...](img/00036.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Passenger age
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We can plot the bar plot of sibling passengers to get the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![How to do it...](img/00037.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Passenger siblings
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Next, we can get the distribution of the passenger parch:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![How to do it...](img/00038.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Passenger parch
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Next, we plot the histogram of the passenger fares:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![How to do it...](img/00039.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Passenger fares
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Finally, one can look at the port of embarkation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![How to do it...](img/00040.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Port of embarkation
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Use `barplot` to find out which gender is more likely to perish during shipwrecks:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![How to do it...](img/00041.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Passenger survival by sex
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Next, we should examine whether the `Pclass` factor of each passenger may affect
    the survival rate:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![How to do it...](img/00042.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Passenger survival by class
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Next, we examine the gender composition of each `Pclass`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![How to do it...](img/00043.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Passenger gender by class
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Furthermore, we examine the histogram of passenger ages:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![How to do it...](img/00044.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Passenger age histogram
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To examine more details about the relationship between the age and survival
    rate, one can use a `boxplot`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![How to do it...](img/00045.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Passenger survival by age
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To categorize people with different ages into different groups, such as children
    (below 13), youths (13 to 19), adults (20 to 65), and senior citizens (above 65),
    execute the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before we predict the survival rate, one should first use the aggregation and
    visualization method to examine how each attribute affects the fate of the passengers.
    Therefore, we begin the examination by generating a bar plot and histogram of
    each attribute.
  prefs: []
  type: TYPE_NORMAL
- en: The plots from the screenshots in the preceding list give one an outline of
    each attribute of the Titanic dataset. As per the first screenshot, more passengers
    perished than survived during the shipwreck. Passengers in the third class made
    up the biggest number out of the three classes on board, which also reflects the
    truth that the third class was the most economical class on the Titanic (step
    2). For the sex distribution, there were more male passengers than female (step
    3). As for the age distribution, the screenshot in step 4 shows that most passengers
    were aged between 20 to 40\. According to the screenshot in step 5, most passengers
    had one or fewer siblings. The screenshot in step 6 shows that most of the passengers
    have 0 to 2 parch.
  prefs: []
  type: TYPE_NORMAL
- en: In the screenshot in step 7, the fare histogram shows there were fare differences,
    which may be as a result of the different passenger classes on the Titanic. At
    last, the screenshot in step 8 shows that the boat made three stops to pick up
    passengers.
  prefs: []
  type: TYPE_NORMAL
- en: As we began the exploration from the `sex` attribute, and judging by the resulting
    bar plot, it clearly showed that female passengers had a higher rate of survival
    than males during the shipwreck (step 9). In addition to this, the Wikipedia entry
    for RMS Titanic ([http://en.wikipedia.org/wiki/RMS_Titanic](http://en.wikipedia.org/wiki/RMS_Titanic))
    explains that *'A disproportionate number of men were left aboard because of a
    "women and children first" protocol followed by some of the officers loading the
    lifeboats'*. Therefore, it is reasonable that the number of female survivors outnumbered
    the male survivors. In other words, simply using `sex` can predict whether a person
    will survive with a high degree of accuracy.
  prefs: []
  type: TYPE_NORMAL
- en: Then, we examined whether the passenger class affected the survival rate (step
    10). Here, from the definition of `Pclass`, the fares for each class were priced
    accordingly with the quality; high fares for first class, and low fares for third
    class. As the class of each passenger seemed to indicate their social and financial
    status, it is fair to assume that the wealthier passengers may have had more chances
    to survive.
  prefs: []
  type: TYPE_NORMAL
- en: Unfortunately, there was no correlation between the class and survival rate,
    so the result does not show the phenomenon we assumed. Nevertheless, after we
    examined `sex` in the composition of `pclass` (step 11), the results revealed
    that most third-class passengers were male; the assumption of wealthy people tending
    to survive more may not be that concrete.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we examined the relationship between the age and passenger fate through
    a histogram and box plot (step 12). The bar plot shows the age distribution with
    horizontal columns in which red columns represent the passengers that survived,
    while blue columns represent those who perished. It is hard to tell the differences
    in the survival rate from the ages of different groups. The bar plots that we
    created did not prove that passengers in different age groups were more likely
    to survive. On the other hand, the plots showed that most people on board were
    aged between 20 to 40, but does not show whether this group was more likely to
    survive compared to elderly or young children (step 13). Here, we introduced a
    box plot, which is a standardized plotting technique that displays the distribution
    of data with information, such as minimum, first quartile, median, third quartile,
    maximum, and outliers.
  prefs: []
  type: TYPE_NORMAL
- en: Later, we further examined whether age groups have any relation to passenger
    fates, by categorizing passenger ages into four groups. The statistics show the
    the children group (below 13) was more likely to survive than the youths (13 to
    20), adults (20 to 65), and senior citizens (above 65). The results showed that
    people in the younger age groups were more likely to survive the shipwreck. However,
    we noted that this possibly resulted from the 'women and children first' protocol.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Apart from using bar plots, histograms, and boxplots to visualize data, one
    can also apply `mosaicplot` in the `vcd` package to examine the relationship between
    multiple categorical variables. For example, when we examine the relationship
    between the `Survived` and `Pclass` variables, the application is performed as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '![There''s more...](img/00046.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Passenger survival by class
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For more information about the shipwreck, one can read the history of RMS Titanic
    (please refer to the entry *Sinking of the RMS Titanic* in Wikipedia [http://en.wikipedia.org/wiki/Sinking_of_the_RMS_Titanic](http://en.wikipedia.org/wiki/Sinking_of_the_RMS_Titanic)),
    as some of the protocol practiced at that time may have substantially affected
    the passenger survival rate.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Predicting passenger survival with a decision tree
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The exploratory analysis helps users gain insights into how single or multiple
    variables may affect the survival rate. However, it does not determine what combinations
    may generate a prediction model, so as to predict the passengers' survival. On
    the other hand, machine learning can generate a prediction model from a training
    dataset, so that the user can apply the model to predict the possible labels from
    the given attributes. In this recipe, we will introduce how to use a decision
    tree to predict passenger survival rates from the given variables.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will use the data, `train.data`, that we have already used in our previous
    recipes.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to predict the passenger survival with the decision
    tree:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we construct a data split `split.data` function with three input parameters:
    `data`, `p`, and `s`. The `data` parameter stands for the input dataset, the `p`
    parameter stands for the proportion of generated subset from the input dataset,
    and the `s` parameter stands for the random seed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, we split the data, with 70 percent assigned to the training dataset and
    the remaining 30 percent for the testing dataset:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For the condition tree, one has to use the `ctree` function from the party
    package; therefore, we install and load the party package:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We then use `Survived` as a label to generate the prediction model in use.
    After that, we assign the classification tree model into the `train.ctree` variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We use a `plot` function to plot the tree:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![How to do it...](img/00047.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Conditional inference tree of the Titanic dataset
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe introduces how to use a conditional inference tree, `ctree`, to
    predict passenger survival. While the conditional inference tree is not the only
    method to solve the classification problem, it is an easy method to comprehend
    the decision path to predict passenger survival.
  prefs: []
  type: TYPE_NORMAL
- en: We first split the data into a training and testing set by using our implemented
    function, `split.data`. So, we can then use the training set to generate a prediction
    model and later employ the prediction model on the testing dataset in the recipe
    of the model assessment. Then, we install and load the `party` package, and use
    `ctree` to build a prediction model, with `Survived` as its label. Without considering
    any particular attribute, we put attributes such as `Pclass`, `Sex`, `Age`, `SibSp`,
    `Parch`, `Embarked`, and `Fare` as training attributes, except for `Cabin`, as
    most of this attribute's values are missing.
  prefs: []
  type: TYPE_NORMAL
- en: After constructing the prediction model, we can either print out the decision
    path and node in a text mode, or use a plot function to plot the decision tree.
    From the decision tree, the user can see what combination of variables may be
    helpful in predicting the survival rate. As per the preceding screenshot, users
    can find a combination of `Pclass` and `Sex`, which served as a good decision
    boundary (node 9) to predict the survival rates. This shows female passengers
    who were in first and second class mostly survived the shipwreck. Male passengers,
    those in second and third class and aged over nine, almost all perished during
    the shipwreck. From the tree, one may find that attributes such as `Embarked`
    and `Parch` are missing. This is because the conditional inference tree regards
    these attributes as less important during classification.
  prefs: []
  type: TYPE_NORMAL
- en: From the decision tree, the user can see what combination of variables may be
    helpful in predicting the survival rate. Furthermore, a conditional inference
    tree is helpful in selecting important attributes during the classification process;
    one can examine the built tree to see whether the selected attribute matches one's
    presumption.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe covers issues relating to classification algorithms and conditional
    inference trees. Since we do not discuss the background knowledge of the adapted
    algorithm, it is better for the user to use the `help` function to view the documents
    related to `ctree` in the `party` package, if necessary.
  prefs: []
  type: TYPE_NORMAL
- en: There is a similar decision tree based package, named `rpart`. The difference
    between `party` and `rpart` is that `ctree` in the party package avoids the following
    variable selection bias of `rpart` and `ctree` in the `party` package, tending
    to select variables that have many possible splits or many missing values. Unlike
    the others, `ctree` uses a significance testing procedure in order to select variables,
    instead of selecting the variable that maximizes an information measure.
  prefs: []
  type: TYPE_NORMAL
- en: 'Besides `ctree`, one can also use `svm` to generate a prediction model. To
    load the `svm` function, load the `e1071` package first, and then use the `svm`
    build to generate this prediction:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Here, we use `svm` to show how easy it is that you can immediately use different
    machine learning algorithms on the same dataset when using R. For further information
    on how to use `svm`, please refer to [Chapter 6](part0072_split_000.html#page
    "Chapter 6. Classification (II) – Neural Network and SVM"), *Classification (II)
    – Neural Network, SVM*.
  prefs: []
  type: TYPE_NORMAL
- en: Validating the power of prediction with a confusion matrix
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After constructing the prediction model, it is important to validate how the
    model performs while predicting the labels. In the previous recipe, we built a
    model with `ctree` and pre-split the data into a training and testing set. For
    now, users will learn to validate how well `ctree` performs in a survival prediction
    via the use of a confusion matrix.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before assessing the prediction model, first be sure that the generated training
    set and testing dataset are within the R session.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to validate the prediction power:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We start using the constructed `train.ctree` model to predict the survival
    of the testing set:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'First, we install the `caret` package, and then load it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After loading `caret`, one can use a confusion matrix to generate the statistics
    of the output matrix:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After building the prediction model in the previous recipe, it is important
    to measure the performance of the constructed model. The performance can be assessed
    by whether the prediction result matches the original label contained in the testing
    dataset. The assessment can be done by using the confusion matrix provided by
    the caret package to generate a confusion matrix, which is one method to measure
    the accuracy of predictions.
  prefs: []
  type: TYPE_NORMAL
- en: To generate a confusion matrix, a user needs to install and load the `caret`
    package first. The confusion matrix shows that purely using `ctree` can achieve
    accuracy of up to 84 percent. One may generate a better prediction model by tuning
    the attribute used, or by replacing the classification algorithm to SVM, `glm`,
    or random forest.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A caret package (*Classification and Regression Training*) helps make iterating
    and comparing different predictive models very convenient. The package also contains
    several functions, including:'
  prefs: []
  type: TYPE_NORMAL
- en: Data splits
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Common preprocessing: creating dummy variables, identifying zero- and near-zero-variance
    predictors, finding correlated predictors, centering, scaling, and so on'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Training (using cross-validation)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Common visualizations (for example, `featurePlot`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Assessing performance with the ROC curve
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Another measurement is by using the ROC curve (this requires the `ROCR` package),
    which plots a curve according to its true positive rate against its false positive
    rate. This recipe will introduce how we can use the ROC curve to measure the performance
    of the prediction model.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before applying the ROC curve to assess the prediction model, first be sure
    that the generated training set, testing dataset, and built prediction model,
    `ctree.predict`, are within the R session.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to assess prediction performance:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Prepare the probability matrix:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Install and load the `ROCR` package:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create an `ROCR` prediction object from probabilities:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Prepare the ROCR performance object for the ROC curve (`tpr=true positive rate,
    fpr=false positive rate`) and the area under curve (AUC):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Plot the ROC curve, with colorize as `TRUE`, and put `AUC` as the title:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![How to do it...](img/00048.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: ROC of the prediction model
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here, we first create the prediction object from the probabilities matrix, and
    then prepare the ROCR performance object for the ROC curve (`tpr=true positive
    rate`, `fpr=false positive rate`) and the AUC. Lastly, we use the plot function
    to draw the ROC curve.
  prefs: []
  type: TYPE_NORMAL
- en: 'The result drawn in the preceding screenshot is interpreted in the following
    way: the larger under the curve (a perfect prediction will make AUC equal to 1),
    the better the prediction accuracy of the model. Our model returns a value of
    0.857, which suggests that the simple conditional inference tree model is powerful
    enough to make survival predictions.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To get more information on the ROCR, you can read the paper *Sing, T.*, *Sander,
    O.*, *Berenwinkel, N.*, and *Lengauer, T.* (2005). *ROCR: visualizing classifier
    performance in R*. *Bioinformatics, 21(20), 3940-3941*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
