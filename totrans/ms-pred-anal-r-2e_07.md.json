["```py\ncompute_SSE_split <- function(v, y, split_point) {\n  index <- v < split_point\n  y1 <- y[index]\n  y2 <- y[!index]\n  SSE <- sum((y1 - mean(y1)) ^ 2) + sum((y2 - mean(y2)) ^ 2)\n  return(SSE)\n}\n\ncompute_all_SSE_splits <- function(v, y) {\n  sapply(unique(v), function(sp) compute_SSE_split(v, y, sp))\n}\n```", "```py\nrcart_df:\n```", "```py\n> set.seed(99)\n> x1 <- rbinom(20, 1, 0.5)\n> set.seed(100)\n> x2 <- round(10 + rnorm(20, 5, 5), 2)\n> set.seed(101)\n> y <- round((1 + (x2 * 2 / 5) + x1 - rnorm(20, 0, 3)), 2)\n> rcart_df <- data.frame(x1, x2, y)\n> rcart_df\n   x1    x2     y\n1   1 12.49  7.97\n2   0 15.66  5.61\n3   1 14.61  9.87\n4   1 19.43  9.13\n5   1 15.58  7.30\n6   1 16.59  5.11\n7   1 12.09  4.98\n8   0 18.57  8.77\n9   0 10.87  2.60\n10  0 13.20  6.95\n11  1 15.45  6.60\n12  1 15.48 10.58\n13  0 13.99  2.31\n14  1 18.70 13.88\n15  1 15.62  8.96\n16  1 14.85  8.52\n17  0 13.06  8.77\n18  0 17.55  7.84\n19  0 10.43  7.63\n20  0 26.55 17.77\n```", "```py\n If x2 < 18.7\n```", "```py\ngini_index <- function(v) {\n  t <- table(v)\n  probs <- t / sum(t)\n  terms <- sapply(probs, function(p) p * (1 - p) )\n  return(sum(terms))\n}\n```", "```py\n> gini_index(v = c(0, 0, 0, 1, 1, 1))\n[1] 0.5\n> gini_index(v = c(0, 0, 0, 1, 1, 1, 1, 1, 1))\n[1] 0.4444444\n> gini_index(v = c(0, 0, 0, 1, 1, 1, 2, 2, 2))\n[1] 0.6666667\n> gini_index(v = c(1, 1, 1, 1, 1, 1))\n[1] 0\n```", "```py\n> head(mcdf, n = 5)\n          x1       x2 class\n1 18.58213 12.03106     a\n2 22.09922 12.36358     a\n3 11.78412 12.75122     a\n4 23.41888 13.89088     a\n5 16.37667 10.32308     a\n```", "```py\n> library(tree)\n> d2tree <- tree(class ~ ., data = mcdf)\n> summary(d2tree)\n\nClassification tree:\ntree(formula = class ~ ., data = mcdf)\nNumber of leaf nodes:  5 \nResidual mean deviance:  0.03491 = 9.844 / 282 \nMisclassification error rate: 0.003484 = 1 / 287\n```", "```py\n> plot(d2tree)\n> text(d2tree, all = T)\n```", "```py\n> library(caret)\n> set.seed(266)\n> bnote_sampling_vector <- createDataPartition(bnote$class, p = \n                           0.80, list = FALSE)\n> bnote_train <- bnote[bnote_sampling_vector,]\n> bnote_test <- bnote[-bnote_sampling_vector,]\n```", "```py\n> bnote_tree <- C5.0(class ~ ., data = bnote_train)\n> summary(bnote_tree)\nwaveletVar > 0.75896:\n:...waveletCurt > -1.9702: 0 (342)\n:   waveletCurt <= -1.9702:\n:   :...waveletSkew > 4.9228: 0 (128)\n:       waveletSkew <= 4.9228:\n:       :...waveletVar <= 3.4776: 1 (34)\n:           waveletVar > 3.4776: 0 (2)\nwaveletVar <= 0.75896:\n:...waveletSkew > 5.1401:\n    :...waveletVar <= -3.3604: 1 (31)\n    :   waveletVar > -3.3604: 0 (93/1)\n    waveletSkew <= 5.1401:\n    :...waveletVar > 0.30081:\n        :...waveletCurt <= 0.35273: 1 (25)\n        :   waveletCurt > 0.35273:\n        :   :...entropy <= 0.71808: 0 (24)\n        :       entropy > 0.71808: 1 (3)\n        waveletVar <= 0.30081:\n        :...waveletCurt <= 3.0423: 1 (241)\n            waveletCurt > 3.0423:\n            :...waveletSkew > -1.8624: 0 (21/1)\n                waveletSkew <= -1.8624:\n                :...waveletVar <= -0.69572: 1 (146)\n                    waveletVar > -0.69572:\n                    :...entropy <= -0.73535: 0 (2)\n                        entropy > -0.73535: 1 (6)\n```", "```py\n> bnote_predictions <- predict(bnote_tree, bnote_test)\n> mean(bnote_test$class == bnote_predictions)\n[1] 0.9890511\n```", "```py\n> skillcraft <- read.csv(\"SkillCraft1_Dataset.csv\")\n> skillcraft <- skillcraft[-1]\n> skillcraft$TotalHours <- as.numeric(\n  levels(skillcraft$TotalHours))[skillcraft$TotalHours]\nWarning message:\nNAs introduced by coercion \n> skillcraft$HoursPerWeek <- as.numeric(\n  levels(skillcraft$HoursPerWeek))[skillcraft$HoursPerWeek]\nWarning message:\nNAs introduced by coercion \n> skillcraft$Age <- as.numeric(\n  levels(skillcraft$Age))[skillcraft$Age]\nWarning message:\nNAs introduced by coercion \n> skillcraft <- skillcraft[complete.cases(skillcraft),]\n```", "```py\n> library(caret)\n> set.seed(133)\n> skillcraft_sampling_vector <- createDataPartition( \n  skillcraft$LeagueIndex, p = 0.80, list = FALSE)\n> skillcraft_train <- skillcraft[skillcraft_sampling_vector,]\n> skillcraft_test <- skillcraft[-skillcraft_sampling_vector,]\n```", "```py\n> library(rpart)\n> regtree <- rpart(LeagueIndex ~ ., data = skillcraft_train)\n```", "```py\n> plot(regtree, uniform = TRUE)\n> text(regtree, use.n = FALSE, all = TRUE, cex = .8)\n```", "```py\n compute_SSE <- function(correct, predictions) {\n     return(sum((correct - predictions) ^ 2))\n }\n\n> regtree_predictions <- predict(regtree, skillcraft_test)\n> (regtree_SSE <- compute_SSE(regtree_predictions, skillcraft_test$LeagueIndex))\n[1] 740.0874\n```", "```py\n> regtree.random <- rpart(LeagueIndex ~ ., data = skillcraft_train, \n  control = rpart.control(minsplit = 20, cp = 0.001, maxdepth = 10))\n> regtree.random_predictions <- predict(regtree.random, \n  skillcraft_test)\n> (regtree.random_SSE <- compute_SSE(regtree.random_predictions, \n   skillcraft_test$LeagueIndex))\n[1] 748.6157\n```", "```py\n> library(e1071)\n> rpart.ranges <- list(minsplit = seq(5, 50, by = 5), cp = c(0,  \n  0.001, 0.002, 0.005, 0.01, 0.02, 0.05, 0.1, 0.2,0.5), maxdepth = 1:10)\n> (regtree.tune <- tune(rpart,LeagueIndex ~ ., \n   data = skillcraft_train, ranges = rpart.ranges))\n\nParameter tuning of 'rpart':\n\n- sampling method: 10-fold cross validation \n\n- best parameters:\n minsplit    cp maxdepth\n       35 0.002        6\n\n- best performance: 1.046638\n```", "```py\n> regtree.tuned <- rpart(LeagueIndex ~ ., data = skillcraft_train,  \n  control = rpart.control(minsplit = 35, cp = 0.002, maxdepth = 6))\n> regtree.tuned_predictions <- predict(regtree.tuned, \n  skillcraft_test)\n> (regtree.tuned_SSE <- compute_SSE(regtree.tuned_predictions, \n   skillcraft_test$LeagueIndex))\n[1] 701.3386\n```", "```py\n> library(\"RWeka\")\n> m5tree <- M5P(LeagueIndex ~ ., data = skillcraft_train)\n> m5tree_predictions <- predict(m5tree, skillcraft_test)\n> m5tree_SSE <- compute_SSE(m5tree_predictions, \n                            skillcraft_test$LeagueIndex)\n> m5tree_SSE\n[1] 714.8785\n```"]