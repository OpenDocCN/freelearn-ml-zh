["```py\n    {\n    ```", "```py\n        \"Version\":\"2012-10-17\",\n    ```", "```py\n        \"Statement\":[\n    ```", "```py\n          {\n    ```", "```py\n            \"Sid\":\"GreengrassComponentAccess\",\n    ```", "```py\n            \"Effect\":\"Allow\",\n    ```", "```py\n            \"Action\":[\n    ```", "```py\n                \"greengrass:CreateComponentVersion\",\n    ```", "```py\n                \"greengrass:DescribeComponent\"\n    ```", "```py\n            ],\n    ```", "```py\n            \"Resource\":\"*\"\n    ```", "```py\n           }\n    ```", "```py\n        ]\n    ```", "```py\n    }\n    ```", "```py\n    {\n    ```", "```py\n        \"Version\": \"2012-10-17\",\n    ```", "```py\n        \"Statement\": [\n    ```", "```py\n            {\n    ```", "```py\n                \"Effect\": \"Allow\",\n    ```", "```py\n                \"Principal\": {\n    ```", "```py\n                    \"Service\": \"ec2.amazonaws.com\"\n    ```", "```py\n                },\n    ```", "```py\n                \"Action\": \"sts:AssumeRole\"\n    ```", "```py\n            },\n    ```", "```py\n            {\n    ```", "```py\n                \"Effect\": \"Allow\",\n    ```", "```py\n                \"Principal\": {\n    ```", "```py\n                    \"Service\": \"credentials.iot.amazonaws.com\"\n    ```", "```py\n                },\n    ```", "```py\n                \"Action\": \"sts:AssumeRole\"\n    ```", "```py\n            },\n    ```", "```py\n            {\n    ```", "```py\n                \"Effect\": \"Allow\",\n    ```", "```py\n                \"Principal\": {\n    ```", "```py\n                    \"Service\": \"sagemaker.amazonaws.com\"\n    ```", "```py\n                },\n    ```", "```py\n                \"Action\": \"sts:AssumeRole\"\n    ```", "```py\n            }\n    ```", "```py\n        ]\n    ```", "```py\n    }\n    ```", "```py\n    $ git clone https://github.com/PacktPublishing/Applied-Machine-Learning-and-High-Performance-Computing-on-AWS src && cd src/Chapter08\n    ```", "```py\n    $ export AWS_ACCOUNT=$(aws sts get-caller-identity --query \"Account\" --output text)\n    ```", "```py\n    $ aws s3 mb s3://ec2-scripts-$AWS_REGION-$AWS_ACCOUNT\n    ```", "```py\n    $ aws s3 sync scripts s3://ec2-scripts-$AWS_REGION-$AWS_ACCOUNT/scripts\n    ```", "```py\n    $ echo ec2-scripts-$AWS_REGION-$AWS_ACCOUNT\n    ```", "```py\n    #!/bin/bash\n    ```", "```py\n    aws s3 cp s3://<REPLACE WITH THE NAME OF YOUR S3 BUCKET>/scripts/ /home/ec2-user --recursive\n    ```", "```py\n    sleep 30\n    ```", "```py\n    process_id=$!\n    ```", "```py\n    wait $process_id\n    ```", "```py\n    sudo yum update -y\n    ```", "```py\n    sudo yum install docker -y\n    ```", "```py\n    sudo yum install python-pip -y\n    ```", "```py\n    sudo pip3 install boto3\n    ```", "```py\n    sudo pip3 install requests\n    ```", "```py\n    cd /home/ec2-user\n    ```", "```py\n    python3 getResourceTempCredentials.py\n    ```", "```py\n    sudo service docker start\n    ```", "```py\n    sudo usermod -a -G docker ec2-user\n    ```", "```py\n    docker build -t \"aws-iot-greensgrass:2.5\" ./\n    ```", "```py\n    chmod +x dockerRun.sh\n    ```", "```py\n    GGC_ROOT_PATH=/greengrass/v2\n    ```", "```py\n    AWS_REGION=us-east-1\n    ```", "```py\n    PROVISION=true\n    ```", "```py\n    THING_NAME=mything\n    ```", "```py\n    THING_GROUP_NAME=mythinggroupname\n    ```", "```py\n    TES_ROLE_NAME=GreengrassV2TokenExchangeRole\n    ```", "```py\n    TES_ROLE_ALIAS_NAME=GreengrassCoreTokenExchangeRoleAlias\n    ```", "```py\n    COMPONENT_DEFAULT_USER=ggc_user:ggc_group\n    ```", "```py\n    DEPLOY_DEV_TOOLS=true\n    ```", "```py\n    $ ./dockerRun.sh\n    ```", "```py\n    $ docker ps\n    ```", "```py\n    $ docker exec -it container-id /bin/bash\n    ```", "```py\n    $ docker attach container-id\n    ```", "```py\nfrom sagemaker.pytorch.model import PyTorchModel\nfrom sagemaker.predictor import Predictor\nsagemaker_model = PyTorchModel(\n    model_data=model_uri,\n    predictor_cls=Predictor,\n    framework_version=framework_version,\n    role=role,\n    sagemaker_session=sagemaker_session,\n    entry_point=\"inference.py\",\n    source_dir=\"code\",\n    py_version=\"py3\",\n    env={\"MMS_DEFAULT_RESPONSE_TIMEOUT\": \"500\"},\n)\n```", "```py\nsagemaker_client = boto3.client(\"sagemaker\", region_name=region)\ntarget_arch = \"X86_64\"\ntarget_os = 'LINUX'\nresponse = sagemaker_client.create_compilation_job(\n    CompilationJobName=compilation_job_name,\n    RoleArn=role,\n    InputConfig={\n        \"S3Uri\": sagemaker_model.model_data,\n        \"DataInputConfig\": data_shape,\n        \"Framework\": framework,\n    },\n    OutputConfig={\n        \"S3OutputLocation\": compiled_model_path,\n#         \"TargetDevice\": 'jetson_nano',\n        \"TargetPlatform\": {\n            \"Arch\": target_arch,\n            \"Os\": target_os\n        },\n    },\n    StoppingCondition={\"MaxRuntimeInSeconds\": 900},\n)\n```", "```py\nimport numpy as np\nimport json\nwith open(\"horse_cart.jpg\", \"rb\") as f:\n    payload = f.read()\n    payload = bytearray(payload)\nresponse = runtime.invoke_endpoint(\n    EndpointName=ENDPOINT_NAME,\n    ContentType='application/octet-stream',\n    Body=payload,\n    Accept = 'application/json')\nresult = response['Body'].read()\nresult = json.loads(result)\nprint(result)\n```", "```py\npackaging_job_name = compilation_job_name + \"-packaging-ggv2\"\ncomponent_name = \"SagemakerEdgeManager\" + packaging_job_name\nresponse = sagemaker_client.create_edge_packaging_job(\n    RoleArn=role,\n    OutputConfig={\n        \"S3OutputLocation\": s3_edge_output_location,\n    },\n    ModelName=packaged_model_name,\n    ModelVersion=model_version,\n    EdgePackagingJobName=packaging_job_name,\n    CompilationJobName=compilation_job_name,\n)\n```", "```py\ns3_device_fleet_output = os.path.join(s3_edge_output_location, 'fleet')\niot_role_arn = f'arn:aws:iam::{account_id}:role/SageMakerGreenGrassV2MinimalResourceRole'\ndevice_fleet_name = \"mydevicefleet\"\ndevice_name = 'mything'\nsagemaker_client.create_device_fleet(\n    DeviceFleetName=device_fleet_name,\n    RoleArn=iot_role_arn, # IoT Role ARN specified in previous step\n    OutputConfig={\n        'S3OutputLocation': s3_device_fleet_output\n    }\n)\nsagemaker_client.register_devices(\n    DeviceFleetName=device_fleet_name,\n    Devices=[\n        {\n            \"DeviceName\": device_name,\n            \"IotThingName\": device_name\n        }\n    ]\n)\n```", "```py\n    {\n    ```", "```py\n        \"DeviceFleetName\": \"device-fleet-name\",\n    ```", "```py\n        \"BucketName\": \"S3-BUCKET\"\n    ```", "```py\n    }\n    ```", "```py\n$ sudo tail –f /greengrass/v2/logs/com.greengrass.SageMakerEdgeManager.ImageClassification.log\n```", "```py\n2022-08-15T03:38:45.437Z [INFO] (Copier) com.greengrass.SageMakerEdgeManager.ImageClassification: stdout. {\"timestamp\": \"2022-08-15 03:38:45.282879+00:00\", \"inference-type\": \"image-classification\", \"inference-description\": \"Top 5 predictions with score 0.3 or above \", \"inference-results\": [{\"Label\": \"slot, one-armed bandit\", \"Score\": \"83.41295623779297\"}, {\"Label\": \"mousetrap\", \"Score\": \"75.826416015625\"}, {\"Label\": \"comic book\", \"Score\": \"73.64051055908203\"}, {\"Label\": \"microphone, mike\", \"Score\": \"71.14073181152344\"}, {\"Label\": \"honeycomb\", \"Score\": \"68.3149185180664\"}]}. {scriptName=services.com.greengrass.SageMakerEdgeManager.ImageClassification.lifecycle.run.script, serviceName=com.greengrass.SageMakerEdgeManager.ImageClassification, currentState=RUNNING}\n```", "```py\n$ sudo tail -f /greengrass/v2/logs/greengrass.log\n```"]