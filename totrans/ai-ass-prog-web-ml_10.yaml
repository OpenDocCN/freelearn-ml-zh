- en: '10'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '10'
- en: Maintaining Existing Codebases
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 维护现有代码库
- en: Introduction
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: '**Brownfield** is another word for working with existing code. In my career
    as a developer, most of the work carried out has been on existing code. The opposite
    of brownfield is **greenfield**, which is a new project with no existing code.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '**棕色地带**是另一种与现有代码一起工作的说法。在我的开发生涯中，大部分工作都是在现有代码上完成的。棕色地带的对立面是**绿色地带**，这是一个没有现有代码的新项目。'
- en: For that reason, it’s important to cover how to work with existing codebases,
    and there’s a lot to get excited about when working with an AI assistant like
    GitHub Copilot in a brownfield context.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，了解如何与现有代码库一起工作非常重要，并且在棕色地带环境中与像 GitHub Copilot 这样的 AI 助手一起工作时，有很多令人兴奋的事情。
- en: 'In this chapter, we will:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将：
- en: Learn about the different types of maintenance.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解不同类型的维护。
- en: Understand how we work with maintenance in a process to de-risk introduced changes.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解我们如何通过流程进行维护以降低引入更改的风险。
- en: Use GitHub Copilot to help us with maintenance.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 GitHub Copilot 来帮助我们进行维护。
- en: Prompt strategy
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提示策略
- en: This chapter is a bit different from other chapters in the book. The focus is
    on describing various problems you may encounter in the space of existing codebases.
    You’re recommended to use the prompt suggestion approach with which you’re the
    most comfortable, be it prompt comments or the chat interface. As for patterns,
    you’re encouraged to try out all three major patterns introduced, that is, PIC,
    TAG, or Exploratory patterns as described in *Chapter 2*. This chapter however
    focuses on using the “Exploratory pattern”.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本章与其他章节的书籍略有不同。重点是描述您可能在现有代码库空间中遇到的各种问题。建议您使用最舒适的提示建议方法，无论是提示注释还是聊天界面。至于模式，鼓励您尝试所有三种主要模式，即第
    2 章中描述的 PIC、TAG 或探索性模式。然而，本章的重点是使用“探索性模式”。
- en: Different types of maintenance
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 不同类型的维护
- en: 'There are different types of maintenance, and it’s important to understand
    the differences between them. Here are some different types that you’re likely
    to encounter:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 有不同类型的维护，了解它们之间的区别非常重要。以下是一些您可能会遇到的不同类型：
- en: '**Corrective maintenance**: This is when we’re fixing bugs.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**纠正性维护**：这是我们修复错误的时候。'
- en: '**Adaptive maintenance**: In this case, we change code to adapt to new requirements.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**适应性维护**：在这种情况下，我们更改代码以适应新的需求。'
- en: '**Perfective maintenance**: When we improve code without changing the functionality.
    Examples of this could be refactoring or improving the performance of the code.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**改进性维护**：当我们不改变功能的情况下改进代码。这可能是重构或提高代码性能的例子。'
- en: '**Preventive maintenance**: Changing the code to prevent future bugs or issues.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**预防性维护**：更改代码以防止未来的错误或问题。'
- en: The maintenance process
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 维护流程
- en: 'Every time you change code, you introduce risk. For example, a bug fix could
    introduce a new bug. To mitigate this risk, we need to follow a process. A suggested
    process could be the following steps:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 每次您更改代码时，都会引入风险。例如，一个错误修复可能会引入新的错误。为了减轻这种风险，我们需要遵循一个流程。一个建议的流程可能是以下步骤：
- en: '**Identify**: Identify the problem or the change that needs to be made.'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**识别**：识别问题或需要做出的更改。'
- en: '**Inspect**: Inspect the test coverage and how well your code is covered by
    tests. The better it’s covered, the more likely you are to detect any introduced
    bugs or other issues.'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**检查**：检查测试覆盖率以及您的代码被测试覆盖的情况。覆盖得越好，您发现引入的任何错误或其他问题的可能性就越大。'
- en: '**Plan**: Plan the change. How are you going to make it? What tests are you
    going to write? What tests are you going to run?'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**计划**：计划更改。您将如何进行？您将编写哪些测试？您将运行哪些测试？'
- en: '**Implement**: Implement the change.'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**实施**：实施更改。'
- en: '**Verify**: Verify that the change works as expected. Run the tests, run the
    application, check the logs, etc.'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**验证**：验证更改是否按预期工作。运行测试，运行应用程序，检查日志等。'
- en: '**Integrate:** This is about ensuring any change you make in a branch is merged
    into the main branch.'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**集成**：这是确保您在分支中做出的任何更改都能合并到主分支中。'
- en: '**Release/deploy the change**: You want to make sure the end customer can leverage
    the benefit of this change. For that to happen, you need to deploy it.'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**发布/部署更改**：您希望确保最终客户能够利用这次更改带来的好处。为了实现这一点，您需要部署它。'
- en: Do we need to cover all these steps for every change? No, it depends on the
    change; some changes might be so small that we might want to bundle many of them
    before we make a release that we want the end customer to have. The good news
    is that we have a great tool in GitHub Copilot that can help us with some of these
    minor steps, allowing us to focus on the more important steps.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们是否需要为每次更改都涵盖所有这些步骤？不，这取决于更改；一些更改可能非常小，我们可能希望在发布我们希望最终客户拥有的版本之前将它们捆绑在一起。好消息是，我们有一个在GitHub
    Copilot中的优秀工具可以帮助我们处理这些小步骤，使我们能够专注于更重要步骤。
- en: Addressing a bug
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解决错误
- en: Some bugs are more severe than others. In a best-case scenario, your bug is
    seldom encountered, or when it does occur it’s not a big deal. In a worst-case
    scenario, your bug loses you money. Let’s focus on a case where the bug loses
    you money in a scenario where you’re running an e-commerce site.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 有些错误比其他错误更严重。在最佳情况下，你的错误很少遇到，或者即使发生，也不是什么大问题。在最坏的情况下，你的错误会让你损失金钱。让我们关注一个在运行电子商务网站的场景中，错误让你损失金钱的情况。
- en: 'Hopefully, this code has never been shipped in production, but it’s a good
    example of a bug that could be catastrophic for an e-commerce site:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 希望这段代码从未在生产环境中发布过，但它是一个对电子商务网站可能造成灾难性后果的错误的好例子：
- en: '[PRE0]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The problem you might have is that `ship_order` is called even if `process_payment`
    fails, which means you ship orders without getting paid, losing you money.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能遇到的问题是，即使`process_payment`失败，也会调用`ship_order`，这意味着你发货了但没有收到付款，损失了金钱。
- en: Looking at this code, you might not have a problem if `process_payment` throws
    an error and you don’t even get to `ship_order`.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 看看这段代码，如果你在`process_payment`抛出错误而你甚至没有到达`ship_order`，你可能不会有问题。
- en: What if it doesn’t and, instead, returns a numerical code that depends on payment
    results, like so?
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果它没有，而是返回一个依赖于支付结果的数值代码，会怎样？
- en: '[PRE1]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: If you don’t read the error code, you might not notice that the payment failed,
    and the order is shipped. So, what’s our approach here?
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有读取错误代码，你可能不会注意到支付失败，订单已经发货。那么，我们的方法是什么？
- en: 1\. Identify the problem
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1. 识别问题
- en: 'First, we need to identify the problem; in this case, there are two things
    you can do, namely:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要识别问题；在这种情况下，你可以做两件事，即：
- en: '**Read the code**: What does our code look like? Are errors thrown, does it
    return a code, or something else entirely?'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**阅读代码**：我们的代码看起来是什么样子？是否抛出错误，返回一个代码，或者完全是其他东西？'
- en: '**Check the tests**: Do we have a test that covers this scenario? If not, we
    need to write one. The test should show that we have a bug.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**检查测试**：我们是否有覆盖这个场景的测试？如果没有，我们需要编写一个。这个测试应该显示我们有一个错误。'
- en: 'Let’s use Copilot for this, with a prompt like so (here, we simulate `process_payment`
    to return error codes instead of throwing errors). Select the `ship_order` code
    in the main window, and then type a prompt as follows in the chat window:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用Copilot来完成这个任务，使用如下提示（这里，我们模拟`process_payment`返回错误代码而不是抛出错误）。在主窗口中选择`ship_order`代码，然后在聊天窗口中输入以下提示：
- en: '**[Prompt]**'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**[提示]**'
- en: Write a test for the code; `ship_order` should not be called if `process_payment`
    returns 1.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 为代码编写一个测试；如果`process_payment`返回1，则不应调用`ship_order`。
- en: '**[End of prompt]**'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**[提示结束]**'
- en: We’re using the GitHub Copilot Chat function and selecting the `process_cart`
    code in our text editor.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在使用GitHub Copilot聊天功能，并在我们的文本编辑器中选择`process_cart`代码。
- en: 'You should see a response similar to the below code:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到类似于以下代码的响应：
- en: '**[Prompt response]**'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**[提示响应]**'
- en: '[PRE2]python'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE2]python'
- en: import unittest
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: import unittest
- en: from unittest.mock import Mock, patch
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: from unittest.mock import Mock, patch
- en: 'from your_module import process_cart  # replace with the actual module name'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 'from your_module import process_cart  # 替换为实际的模块名称'
- en: 'class TestProcessCart(unittest.TestCase):'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 'class TestProcessCart(unittest.TestCase):'
- en: '@patch(''your_module.get_cart'')  # replace with the actual module name'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '@patch(''your_module.get_cart'')  # 替换为实际的模块名称'
- en: '@patch(''your_module.process_payment'')'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '@patch(''your_module.process_payment'')'
- en: '@patch(''your_module.ship_order'')'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '@patch(''your_module.ship_order'')'
- en: 'def test_order_not_shipped_if_payment_fails(self, mock_ship_order, mock_process_payment,
    mock_get_cart):'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'def test_order_not_shipped_if_payment_fails(self, mock_ship_order, mock_process_payment,
    mock_get_cart):'
- en: Arrange
  id: totrans-56
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安排
- en: mock_cart = Mock()
  id: totrans-57
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: mock_cart = Mock()
- en: mock_cart.get_card.return_value = 'test_card'
  id: totrans-58
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: mock_cart.get_card.return_value = 'test_card'
- en: mock_get_cart.return_value = mock_cart
  id: totrans-59
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: mock_get_cart.return_value = mock_cart
- en: mock_process_payment.return_value = 1
  id: totrans-60
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: mock_process_payment.return_value = 1
- en: Act
  id: totrans-61
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动
- en: process_cart()
  id: totrans-62
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: process_cart()
- en: Assert
  id: totrans-63
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_H1
  type: TYPE_NORMAL
  zh: 断言
- en: mock_ship_order.assert_not_called()
  id: totrans-64
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: mock_ship_order.assert_not_called()
- en: 'if __name__ == ''__main__'':'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 'if __name__ == ''__main__'':'
- en: unittest.main()
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: unittest.main()
- en: '[PRE3]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**[End of response]**'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '**[响应结束]**'
- en: The above code contains a test that tests what happens if we get error code
    1 from `process_payment`. What we want to have happen is for `ship_order` not
    to be called.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码包含一个测试，测试如果从`process_payment`得到错误代码1会发生什么。我们希望发生的事情是`ship_order`不被调用。
- en: This test will fail, as we have a bug in our code, which is a good thing, as
    we’ve identified a bug and can prove it exists with a test.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这个测试将失败，因为我们的代码中有一个错误，这是好事，因为我们已经识别出一个错误，并且可以通过测试证明它的存在。
- en: 2\. Implement the change
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2. 实施更改
- en: Now that we have a test that shows we have a bug, we can implement the change.
    We can be confident to make the code change, as we have a test that shows that
    we have a bug, and we’ve hopefully also improved test coverage enough.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有一个显示我们存在错误的测试，我们可以实施更改。我们可以自信地做出代码更改，因为我们有一个显示我们存在错误的测试，并且我们希望测试覆盖率也得到了足够的提高。
- en: Don’t start refactoring unless you have good test coverage or the change is
    so small that you are confident that you won’t introduce a bug.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 除非你有良好的测试覆盖率，或者变化很小，你确信不会引入错误，否则不要开始重构。
- en: 'How do we now improve the code? Simple – we can use GitHub Copilot to help
    us with the implementation. Let’s use the following prompt to help us with the
    code change we need to do:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在如何改进代码？简单——我们可以使用GitHub Copilot帮助我们实现。让我们使用以下提示来帮助我们进行所需的代码更改：
- en: '**[Prompt]**'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '**[提示]**'
- en: Implement the change; `ship_order` should not be called if `process_payment`
    returns 1.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 实施更改；如果`process_payment`返回1，则不应调用`ship_order`。
- en: '**[End of prompt]**'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '**[提示结束]**'
- en: 'Your code for `process_cart` should now look like this:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 你为`process_cart`编写的代码现在应该看起来像这样：
- en: '**[Prompt response]**'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '**[快速响应]**'
- en: '[PRE4]python'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE4]python'
- en: 'def process_cart():'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 'def process_cart():'
- en: get cart from database
  id: totrans-82
  prefs:
  - PREF_IND
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从数据库获取购物车
- en: cart = get_cart()
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: cart = get_cart()
- en: card = cart.get_card()
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: card = cart.get_card()
- en: payment_status = process_payment(card, cart)
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: payment_status = process_payment(card, cart)
- en: Only ship the order if the payment was successful
  id: totrans-86
  prefs:
  - PREF_IND
  - PREF_H1
  type: TYPE_NORMAL
  zh: 只有在支付成功时才发货
- en: 'if payment_status != 1:'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'if payment_status != 1:'
- en: ship_order(cart)
  id: totrans-88
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: ship_order(cart)
- en: '[PRE5]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '**[End of response]**'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '**[响应结束]**'
- en: This code above is a step in the right direction, as it now contains an `if`
    statement that checks the payment status.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码是一个正确的步骤，因为它现在包含了一个检查支付状态的`if`语句。
- en: 'To further improve the code, we can use Copilot to help us make the code more
    robust and easier to read. Let’s use the following prompt for additional improvements:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 为了进一步改进代码，我们可以使用Copilot帮助我们使代码更健壮、更易读。让我们使用以下提示进行额外的改进：
- en: '**[Prompt]**'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '**[提示]**'
- en: Refactor the code, making it easier to maintain.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 重构代码，使其更容易维护。
- en: '**[End of prompt]**'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '**[提示结束]**'
- en: 'This might give you the following code:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能会给你以下代码：
- en: '**[Prompt response]**'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '**[提示响应]**'
- en: '[PRE6]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '**[End of response]**'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '**[响应结束]**'
- en: Here, Copilot has suggested that we extract the payment status into a separate
    function. This is a good suggestion, as it makes the code easier to read and maintain.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，Copilot建议我们将支付状态提取到一个单独的函数中。这是一个好建议，因为它使代码更容易阅读和维护。
- en: Adding a new feature
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加新功能
- en: 'In this example, we’ll look at an existing codebase and add a new feature.
    The codebase is like the one we used in the previous example, but it’s a bit more
    complex. This is because it has a few more functions involving different types
    of payment methods. Here’s the code:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将查看现有的代码库并添加一个新功能。代码库类似于我们之前使用的例子，但它更复杂一些。这是因为它涉及更多涉及不同类型支付方式的函数。以下是代码：
- en: '[PRE7]python'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE7]python'
- en: import re
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: import re
- en: 'def validate_card(card):'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 'def validate_card(card):'
- en: Visa cards start with 4 and have 13 or 16 digits.
  id: totrans-106
  prefs:
  - PREF_IND
  - PREF_H1
  type: TYPE_NORMAL
  zh: 信用卡以4开头，有13或16位数字。
- en: MasterCard cards start with 51 through 55 and have 16 digits.
  id: totrans-107
  prefs:
  - PREF_IND
  - PREF_H1
  type: TYPE_NORMAL
  zh: 信用卡以51至55开头，有16位数字。
- en: visa_pattern = r'^4[0-9]{12}(?:[0-9]{3})?$'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: visa_pattern = r'^4[0-9]{12}(?:[0-9]{3})?$'
- en: mastercard_pattern = r'^5[1-5][0-9]{14}$'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: mastercard_pattern = r'^5[1-5][0-9]{14}$'
- en: 'if re.match(visa_pattern, card):'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'if re.match(visa_pattern, card):'
- en: return 'Visa'
  id: totrans-111
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: return 'Visa'
- en: 'elif re.match(mastercard_pattern, card):'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'elif re.match(mastercard_pattern, card):'
- en: return 'MasterCard'
  id: totrans-113
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: return 'MasterCard'
- en: 'else:'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'else:'
- en: return None
  id: totrans-115
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: return None
- en: 'def process_payment(card, cart):'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 'def process_payment(card, cart):'
- en: card_type = validate_card(card)
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: card_type = validate_card(card)
- en: 'if card_type is None:'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'if card_type is None:'
- en: 'return 1  # Invalid card'
  id: totrans-119
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'return 1  # 无效卡'
- en: 'else:'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'else:'
- en: Process the payment here
  id: totrans-121
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在这里处理支付
- en: Return 0 if the payment is successful, 1 otherwise
  id: totrans-122
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如果支付成功，则返回0，否则返回1
- en: pass
  id: totrans-123
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: pass
- en: 'def process_cart():'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 'def process_cart():'
- en: Get cart from database
  id: totrans-125
  prefs:
  - PREF_IND
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从数据库获取购物车
- en: cart = get_cart()
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: cart = get_cart()
- en: card = cart.get_card()
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: card = cart.get_card()
- en: payment_status = process_payment(card, cart)
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: payment_status = process_payment(card, cart)
- en: Only ship the order if the payment was successful
  id: totrans-129
  prefs:
  - PREF_IND
  - PREF_H1
  type: TYPE_NORMAL
  zh: 只有在支付成功时才发货
- en: 'if payment_status == 0:'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'if payment_status == 0:'
- en: ship_order(cart)
  id: totrans-131
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: ship_order(cart)
- en: '[PRE8]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'In the above code, we have the following:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，我们有以下内容：
- en: '`validate_card` validates the card number and returns the card type if valid;
    otherwise, it returns `None`.'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`validate_card` 验证卡片号码，如果有效则返回卡片类型；否则返回 `None`。'
- en: '`process_payment` processes the payment and returns `0` if the payment was
    successful; otherwise, it returns `1`.'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`process_payment` 处理支付，如果支付成功则返回 `0`；否则返回 `1`。'
- en: '`process_cart` processes the cart, gets the card, processes the payment, and
    ships the order if the payment is successful.'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`process_cart` 处理购物车，获取卡片，处理支付，如果支付成功，则发货。'
- en: 1\. Identify a problem and find the function/s to change
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1. 识别问题并找到需要更改的函数/函数
- en: Our task is to make our code also support American Express cards. Implementing
    a new card means that we need to update the `validate_card` function to support
    American Express cards.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的任务是使我们的代码也支持美国运通卡。实现新的卡片意味着我们需要更新 `validate_card` 函数以支持美国运通卡。
- en: Now, we know what functions need to change, but does GitHub Copilot know?
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们知道哪些函数需要更改，但 GitHub Copilot 知道吗？
- en: Let’s ask GitHub Copilot, with a prompt.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们用提示来询问 GitHub Copilot。
- en: In the identification step, we used our know-how to identify what and where
    to change. A good practice is to rely on a combination of your own skills and
    the Copilot tool to help analyze and identify problems.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在识别步骤中，我们利用我们的专业知识来识别需要更改的内容和位置。一个好的做法是依靠你自己的技能和 Copilot 工具的组合来帮助分析和识别问题。
- en: 2\. Implement change, and add a new feature and tests
  id: totrans-142
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2. 实施更改，并添加新功能和测试
- en: 'Let’s use GitHub Copilot to help us with this. We can use the following prompt:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用 GitHub Copilot 来帮助我们。我们可以使用以下提示：
- en: '**[Prompt]**'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '**[提示**]'
- en: Add support for American Express cards.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 添加对美国运通卡的支持。
- en: '**[End of prompt]**'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '**[提示结束**]'
- en: 'You will get code similar to this:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 你将得到类似以下的代码：
- en: '[**Prompt response]**'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '[**快速响应**]'
- en: '[PRE9]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '**[End of response]**'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '**[响应结束**]'
- en: 'In the above code, Copilot has made the following changes:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，Copilot 做了以下更改：
- en: Created a new regular expression in the `validate_card` function to support
    American Express cards.
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 `validate_card` 函数中创建了一个新的正则表达式以支持美国运通卡。
- en: Added a new `elif` statement to return American Express if the card matches
    the new regular expression.
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加了一个新的 `elif` 语句，如果卡片与新的正则表达式匹配，则返回美国运通。
- en: 'Of course, we’re not done yet; we need to add a test to verify that the code
    works as expected. Let’s use the following prompt:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，我们还没有完成；我们需要添加一个测试来验证代码是否按预期工作。让我们使用以下提示：
- en: '**[Prompt]**'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '**[提示**]'
- en: Write a test for the code; validate_card should return American Express for
    a valid card.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个测试用例；`validate_card` 应该对有效卡返回“美国运通”。
- en: '**[End of prompt]**'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '**[提示结束**]'
- en: 'Your test should look like below:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 你的测试应该看起来像下面这样：
- en: '**[Prompt response]**'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '**[提示响应**]'
- en: '[PRE10]python'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE10]python'
- en: import unittest
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: import unittest
- en: 'from your_module import validate_card  # replace with the actual module name'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 'from your_module import validate_card  # 用实际的模块名替换'
- en: 'class TestValidateCard(unittest.TestCase):'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 'class TestValidateCard(unittest.TestCase):'
- en: 'def test_validate_card_returns_amex_for_valid_amex_card(self):'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'def test_validate_card_returns_amex_for_valid_amex_card(self):'
- en: Arrange
  id: totrans-165
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安排
- en: valid_amex_card = '378282246310005'
  id: totrans-166
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: valid_amex_card = '378282246310005'
- en: Act
  id: totrans-167
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动
- en: result = validate_card(valid_amex_card)
  id: totrans-168
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: result = validate_card(valid_amex_card)
- en: Assert
  id: totrans-169
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_H1
  type: TYPE_NORMAL
  zh: 断言
- en: self.assertEqual(result, 'American Express')
  id: totrans-170
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: self.assertEqual(result, '美国运通')
- en: 'if __name__ == ''__main__'':'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 'if __name__ == ''__main__'':'
- en: unittest.main()
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: unittest.main()
- en: '[PRE11]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '**[End of response]**'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '**[响应结束**]'
- en: The new test, `test_validate_card_returns_amex_for_valid_amex_card`, was added
    by Copilot and tests that the `validate_card` function returns `American Express`
    for a valid American Express card.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 新的测试用例 `test_validate_card_returns_amex_for_valid_amex_card` 由 Copilot 添加，并测试
    `validate_card` 函数对有效的美国运通卡返回 `American Express`。
- en: At this point, it’s a good idea to keep iterating; you not only want to test
    that the code works for a valid card but also for an invalid card, and so on.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，继续迭代是个好主意；你不仅想测试代码对有效卡片的处理，还要测试无效卡片等。
- en: You can use Copilot as a challenge to write more tests.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以用 Copilot 作为挑战来编写更多的测试。
- en: Improving performance
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提高性能
- en: Improving performance is a common task but can be tricky to achieve. Usually,
    you need specific tools to measure performance, and you need to know what to measure.
    A good way to find out how to improve your code in this way is to use a decorator
    to *profile* how long a method takes to execute. Then, you can measure specific
    methods and find out which methods to improve.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 提高性能是一个常见的任务，但可能很难实现。通常，你需要特定的工具来衡量性能，并且你需要知道要衡量什么。了解如何以这种方式改进你的代码的一个好方法是使用装饰器来
    *分析* 方法执行所需的时间。然后，你可以衡量特定的方法，找出哪些方法需要改进。
- en: 'Here’s an example of a decorator being used on a function that sleeps for 2
    seconds:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个在睡眠 2 秒的函数上使用装饰器的例子：
- en: '[PRE12]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The `profile` function is a decorator that takes a function as input and returns
    a function that wraps the input function. The `wrapper` function measures the
    time it takes to execute the input function and prints the result.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '`profile` 函数是一个装饰器，它接受一个函数作为输入，并返回一个包装输入函数的函数。`wrapper` 函数测量输入函数的执行时间，并打印结果。'
- en: 'Were you to run this code via the terminal, you would see output similar to
    the following:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你通过终端运行此代码，你会看到如下类似的输出：
- en: '[PRE13]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: OK, so how do we use this to improve performance? Let’s use GitHub Copilot and
    see how we can get advice on improving performance on a piece of code.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，那么我们如何利用这个来提高性能呢？让我们使用 GitHub Copilot，看看我们如何获得关于改进代码性能的建议。
- en: 'Here’s the code we want to improve. This processes records and looks for duplicates:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们要改进的代码。它处理记录并查找重复项：
- en: '[PRE14]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Most developers looking at this will refer back to their algorithms and data
    structures books and start thinking about things like *Big O notation*, a way
    to measure the performance of an algorithm. The main thing to focus on is reducing
    the number of costly operations to improve performance while retaining the same
    functionality.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数看到这个的开发者会回想起他们的算法和数据结构书籍，并开始思考像 *大 O 符号* 这样的事情，这是一种衡量算法性能的方法。主要关注的是减少昂贵的操作次数以提高性能，同时保持相同的功能。
- en: 'So, the question we should ask GitHub Copilot is, how do we improve this code?
    Let’s use the following prompt:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，我们应该向 GitHub Copilot 提出的问题是如何改进这段代码？让我们使用以下提示：
- en: '**[Prompt]**'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '**[提示]**'
- en: Improve the performance of the code.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 提高代码的性能。
- en: '**[End of prompt]**'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '**[提示结束]**'
- en: 'We get something like this back:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到如下反馈：
- en: '**[Prompt response]**'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '**[快速响应]**'
- en: '[PRE15]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '**[End of response]**'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '**[响应结束]**'
- en: 'So, why is this code better? Well, let’s prove it:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，为什么这段代码更好呢？让我们来证明它：
- en: First, by calculating the Big O notation for the original code and then for
    the new code.
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，通过计算原始代码和新代码的大 O 符号。
- en: Second, by using the decorator we created earlier.
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第二，通过使用我们之前创建的装饰器。
- en: Big O notation calculation
  id: totrans-200
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 大 O 符号计算
- en: 'Try this prompt:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试这个提示：
- en: '[**Prompt]**'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '[**提示**]'
- en: What’s the Big O complexity for this code? Show me how you calculated it as
    well.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码的大 O 复杂度是多少？也请展示你是如何计算它的。
- en: '**[End of prompt]**'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '**[提示结束]**'
- en: 'You should get something like this:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该得到如下反馈：
- en: '**[Prompt response]**'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '**[快速响应]**'
- en: The time complexity of the provided code is *O(n^2)*, where n is the number
    of records.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 提供的代码的时间复杂度是 *O(n^2)*，其中 n 是记录数。
- en: 'Here’s how it’s calculated:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 这是它的计算方式：
- en: The outer loop runs n times, where n is the number of records. This is because
    it iterates over each record in the list.
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 外循环运行 n 次，其中 n 是记录数。这是因为它遍历列表中的每个记录。
- en: Inside the outer loop, there’s an inner loop that also runs n times for the
    same reason.
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在外循环内部，还有一个内循环，由于同样的原因，它也会运行 n 次。
- en: Since the inner loop runs n times for each iteration of the outer loop, the
    total number of iterations is *n * n*, or *n^2*.
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于内循环在每次外循环迭代时都会运行 n 次，所以总的迭代次数是 *n * n*，即 *n^2*。
- en: Therefore, the time complexity is *O(n^2)*.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，时间复杂度是 *O(n^2)*。
- en: This means that if you double the number of records, the time it takes to process
    them will increase by about four times. This is a characteristic of quadratic
    time complexity.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着如果你将记录数加倍，处理这些记录所需的时间将增加大约四倍。这是二次时间复杂度的特征。
- en: '**[End of response]**'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '**[响应结束]**'
- en: OK, *O(n^2)* is not great, but what about the new code?
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，*O(n^2)* 不是很好，但新代码怎么样呢？
- en: 'Run the same prompt but on the new code:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 在新代码上运行相同的提示：
- en: '**[Prompt response]**'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '**[快速响应]**'
- en: The time complexity of the provided code is *O(n)*, where n is the number of
    records.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 提供的代码的时间复杂度是 *O(n)*，其中 n 是记录数。
- en: 'Here’s how it’s calculated:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 这是它的计算方式：
- en: The loop runs n times, where n is the number of records. This is because it
    iterates over each record in the list.
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 循环运行 n 次，其中 n 是记录的数量。这是因为它遍历列表中的每个记录。
- en: Inside the loop, the operations (checking if a record is in the set and potentially
    adding it to the set) are constant time, *O(1)*, because set operations in Python
    are typically constant time on average.
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在循环内部，操作（检查记录是否在集合中以及可能将其添加到集合中）是常数时间，*O(1)*，因为在 Python 中，集合操作通常平均是常数时间。
- en: Therefore, the time complexity is *O(n)* ** O(1)*, which simplifies to *O(n)*.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，时间复杂度是 *O(n)* ** O(1)*，这简化为 *O(n)*。
- en: This means that if you double the number of records, the time it takes to process
    them will also double, which is a characteristic of linear time complexity.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着如果你将记录的数量加倍，处理这些记录所需的时间也将加倍，这是线性时间复杂度的特征。
- en: '**[End of response]**'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: '**[响应结束]**'
- en: '*O(n)* is better than *O(n^2)*, but how much better? Let’s measure this in
    the next section.'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '*O(n)* 比 *O(n^2)* 更好，但好多少？让我们在下一节中衡量这一点。'
- en: Measuring performance
  id: totrans-226
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测量性能
- en: OK, so algorithmically, we know that the new code is better, but how much better?
    Let’s measure it by using the decorator and calling the code. Let’s use the input
    of 1,000 records and 10,000 records and compare the time it takes to execute the
    code.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，所以从算法上讲，我们知道新代码更好，但好多少呢？让我们通过使用装饰器和调用代码来衡量。让我们使用 1,000 条记录和 10,000 条记录的输入，并比较执行代码所需的时间。
- en: 'OK, let’s see if the new code is faster than the old code. Let’s try with 10,000
    records:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，让我们看看新代码是否比旧代码更快。让我们用 10,000 条记录来尝试：
- en: '[PRE16]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Running this code, you should see the following output:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 运行这段代码，你应该看到以下输出：
- en: '[PRE17]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Now, let’s run the new code:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们运行新的代码：
- en: '[PRE18]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Running this code, you should see the following output:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 运行这段代码，你应该看到以下输出：
- en: '[PRE19]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: As you can see, by combining your knowledge with GitHub Copilot, you can improve
    your code.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，通过结合你的知识和 GitHub Copilot，你可以改进你的代码。
- en: Your code won’t always look this obvious, and you might need to do more work
    to improve performance. You’re recommended to use a profiler to measure performance,
    and then use GitHub Copilot to help you improve the code.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 你的代码并不总是这么明显，你可能需要做更多的工作来提高性能。建议你使用性能分析器来测量性能，然后使用 GitHub Copilot 来帮助你改进代码。
- en: Improving maintainability
  id: totrans-238
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提高可维护性
- en: 'Another interesting use case is using GitHub Copilot to help you improve the
    maintainability of your code. So what are some things that you can do to improve
    the maintainability of your code? Here’s a list:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个有趣的使用案例是使用 GitHub Copilot 来帮助你提高代码的可维护性。那么，你可以做些什么来提高代码的可维护性呢？以下是一个列表：
- en: '**Improve the naming** of variables, functions, classes, etc.'
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**改进命名**变量、函数、类等。'
- en: '**Separate concerns**: For example, separate business logic from presentation
    logic.'
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分离关注点**：例如，将业务逻辑与展示逻辑分开。'
- en: '**Remove duplication**: Especially in large codebases, you’re likely to find
    duplication.'
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**移除重复**：特别是在大型代码库中，你很可能会发现重复。'
- en: '**Improve readability**: You can improve readability by, for example, using
    comments, docstrings, event tests, and more.'
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**提高可读性**：例如，你可以通过使用注释、文档字符串、事件测试等方式来提高可读性。'
- en: 'Let’s start with a codebase and see how we can improve it. Here’s the code:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从代码库开始，看看我们如何可以改进它。以下是代码：
- en: '[PRE20]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The above codebase describes the following at a high level:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码库在高级别上描述了以下内容：
- en: A function, `calculate_total`, that calculates the total for a cart and a list
    of discounts
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个函数，`calculate_total`，用于计算购物车和一系列折扣的总计
- en: A list of discounts
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一系列折扣
- en: A cart
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个购物车
- en: What you can see from this codebase is that it’s not very maintainable, as it’s
    hard to understand what’s going on.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 从这个代码库中，你可以看到它不太容易维护，因为它很难理解发生了什么。
- en: 1\. Identify the problems. What problems do you see?
  id: totrans-251
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1. 识别问题。你看到了哪些问题？
- en: 'Let’s first ask GitHub Copilot what it thinks about the code and decide what
    to do next. Let’s use the following prompt:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先问问 GitHub Copilot 对这段代码的看法，并决定下一步要做什么。让我们使用以下提示：
- en: '**[Prompt]**'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: '**[提示]**'
- en: What do you think about the code? What would you do to improve it?
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 你对这段代码的看法是什么？你会怎么做来改进它？
- en: '**[End of prompt]**'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: '**[提示结束]**'
- en: 'You get a lengthy response back with a bullet list and improved code. Let’s
    look at the bullet list first:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 你会收到一个包含项目符号列表和改进代码的详细响应。让我们先看看项目符号列表：
- en: '**[Prompt response]**'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: '**[快速响应]**'
- en: '**Use Classes for Items and Discounts**: Right now, items and discounts are
    represented as dictionaries and strings, respectively. Using classes for these
    entities would make the code more readable and flexible.'
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用类来表示商品和折扣**：目前，商品和折扣分别用字典和字符串表示。使用类来表示这些实体会使代码更易读和灵活。'
- en: '**Separate Discount Functions**: The discount functions are currently defined
    inside the `calculate_total` function. It would be better to define these functions
    separately to improve readability and make the code easier to test and maintain.'
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分离折扣函数**：当前的折扣函数定义在`calculate_total`函数内部。最好将这些函数单独定义，以提高可读性并使代码更容易测试和维护。'
- en: '**Use a More Extensible Approach for Applying Discounts**: The current approach
    for applying discounts involves a series of `if-elif` statements. This could be
    made more extensible by storing the discount functions in a dictionary or a list
    of `Discount` objects, and then iterating over that collection to apply the discounts.'
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用更可扩展的折扣应用方法**：当前应用折扣的方法涉及一系列`if-elif`语句。通过将折扣函数存储在字典或`Discount`对象列表中，然后遍历该集合来应用折扣，可以使这种方法更具可扩展性。'
- en: '**[End of response]**'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: '**[回复结束]**'
- en: The problems identified above all seem reasonable – using classes, separating
    functions, and using dictionary.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 上述识别出的问题都似乎是合理的——使用类、分离函数和使用字典。
- en: 2\. Add tests and de-risk change
  id: totrans-263
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2. 添加测试并降低风险
- en: 'Before we look at a suggested code change, we need to minimize the risk of
    introducing a bug. The first thing we should do is check our test coverage. In
    this case, we don’t have any tests, so we need to write some. Let’s use the following
    prompt:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们查看建议的代码更改之前，我们需要最小化引入错误的风险。我们首先应该做的事情是检查我们的测试覆盖率。在这种情况下，我们没有测试，所以我们需要编写一些。让我们使用以下提示：
- en: '**[Prompt]**'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: '**[提示]**'
- en: Write tests for this code, covering all possible execution paths.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 为此代码编写测试，覆盖所有可能的执行路径。
- en: '**[End of prompt]**'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: '**[提示结束]**'
- en: '**[Prompt response]**'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: '**[提示回复]**'
- en: '[PRE21]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '**[End of response]**'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: '**[回复结束]**'
- en: Now, you should never trust what an AI generates, so take your time to review
    the code, run a test coverage tool, and ensure that you’re happy with the code
    before you proceed to the next step, which is to improve the code.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你永远不应该相信AI生成的结果，所以请花时间审查代码，运行测试覆盖率工具，确保你在进行下一步之前对代码感到满意，下一步是改进代码。
- en: 'To improve the code from the first suggestion from Copilot, you want to ensure
    that it runs and uses classes like `Item` when you add items to a cart, for example.
    Below is the result of those alterations:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 为了改进Copilot的第一个建议的代码，你想要确保它能够运行，并在添加商品到购物车等操作中使用`Item`类。以下是这些修改的结果：
- en: '[PRE22]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'And for the application code:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 对于应用程序代码：
- en: '[PRE23]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: OK, so we now have a codebase that we’re happy with and that’s passing tests.
    Let’s now look at the suggested code change from GitHub Copilot.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，现在我们有一个我们满意的代码库，并且通过了测试。让我们现在看看GitHub Copilot建议的代码更改。
- en: 3\. Implement change and improve maintainability
  id: totrans-277
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3. 实施更改并提高可维护性
- en: 'OK, we feel confident that we have good test coverage and we’re ready to improve
    the code. Let’s use the following prompt:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，我们对我们有良好的测试覆盖率感到自信，我们准备改进代码。让我们使用以下提示：
- en: '**[Prompt]**'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: '**[提示]**'
- en: Improve the maintainability of the code.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 提高代码的可维护性。
- en: '**[End of prompt]**'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: '**[提示结束]**'
- en: 'You should get something like this:'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该得到类似以下的结果：
- en: '**[Prompt response]**'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: '**[提示回复]**'
- en: 'To improve the maintainability of the code, we can make the following changes:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 为了提高代码的可维护性，我们可以进行以下更改：
- en: Move the discount functions out of `calculate_total` to make them standalone
    functions. This improves readability and makes it easier to test these functions
    individually.
  id: totrans-285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将折扣函数从`calculate_total`中移出，使其成为独立的函数。这提高了可读性，并使单独测试这些函数更容易。
- en: Use a dictionary to map discount names to their corresponding functions. This
    eliminates the need for multiple `if/elif` statements when applying discounts.
  id: totrans-286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用字典将折扣名称映射到相应的函数。这消除了在应用折扣时需要多个`if/elif`语句的需求。
- en: '[PRE24]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '**[End of response]**'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: '**[回复结束]**'
- en: 'The code is now easier to maintain, as the following changes have been introduced:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 通过引入以下更改，代码现在更容易维护：
- en: '`calculate_total` is a vastly smaller function, where each of the functions
    it used to contain has been moved out'
  id: totrans-290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`calculate_total`函数变得大大缩小，其中它曾经包含的每个函数都已移出'
- en: The same method mentioned also now uses a dictionary to map names to functions
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提到的相同方法现在也使用字典将名称映射到函数
- en: The key to using Copilot effectively is to keep iterating, keep making small
    changes, and see what Copilot suggests. Change the prompt slightly, see what happens,
    and go with the output that best suits your needs.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 有效使用 Copilot 的关键是持续迭代，持续进行小的改动，并查看 Copilot 提出的建议。稍微改变提示，看看会发生什么，并选择最适合您需求的输出。
- en: Challenge
  id: totrans-293
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 挑战
- en: Try improving the code further using a prompt and GitHub Copilot. What should
    happen if there’s a problem with the payment? Should you log it, maybe raise an
    error, etc.?
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试使用提示和 GitHub Copilot 进一步改进代码。如果支付出现问题，应该怎么办？您应该记录它，也许抛出一个错误等？
- en: Updating an existing e-commerce site
  id: totrans-295
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**更新现有的电子商务网站**'
- en: Let’s continue working on the e-commerce site that we presented in previous
    chapters. In this chapter, we’ll focus on improving the codebase and adding new
    features.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续改进我们在前几章中介绍的电子商务网站。在本章中，我们将专注于改进代码库和添加新功能。
- en: 'For reference, let’s show the `basket.html` file we’ve started to create:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 为了参考，让我们展示我们开始创建的 `basket.html` 文件：
- en: '[PRE25]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: This is an early version of a prototype; it’s not meant to be production-ready
    code. However, we can use this code to improve it and make it production-ready.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个原型早期版本；它不是指用于生产的代码。然而，我们可以使用此代码来改进它并使其适用于生产。
- en: 'Now that we know this code isn’t great, let’s improve it with Copilot and the
    following prompt:'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道这段代码并不好，让我们使用 Copilot 和以下提示来改进它：
- en: '**[Prompt]**'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: '**[提示]**'
- en: Improve the code, making it production-ready.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 改进代码，使其适用于生产环境。
- en: '**[End of prompt]**'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: '**[提示结束]**'
- en: 'This prompt highlights some of the problems with the code, namely:'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 这个提示突出了代码中的一些问题，特别是：
- en: '**[Prompt response]**'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: '**[提示响应]**'
- en: '**Separate JavaScript and CSS into external files**: This makes the code more
    maintainable and allows for caching of these resources.'
  id: totrans-306
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**将 JavaScript 和 CSS 分离到外部文件**：这使代码更易于维护，并允许缓存这些资源。'
- en: '**Use a build tool or a module bundler**: Tools like Webpack or Parcel can
    help you manage dependencies, transpile modern JavaScript to older versions for
    better browser compatibility, and minify your code for production.'
  id: totrans-307
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用构建工具或模块打包器**：像 Webpack 或 Parcel 这样的工具可以帮助您管理依赖项，将现代 JavaScript 转译为旧版本以获得更好的浏览器兼容性，并压缩您的代码以用于生产。'
- en: '**Error Handling**: Add error handling to your methods to ensure your application
    can gracefully handle unexpected situations.'
  id: totrans-308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**错误处理**：向您的函数添加错误处理以确保您的应用程序可以优雅地处理意外情况。'
- en: '**Vue Component Structure**: Instead of creating the entire `Vue app` in one
    script, break it down into reusable components.'
  id: totrans-309
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Vue 组件结构**：不要在单个脚本中创建整个 `Vue 应用程序`，而是将其分解成可重用的组件。'
- en: '**Accessibility**: Ensure that your HTML is accessible by using appropriate
    ARIA roles and properties.'
  id: totrans-310
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可访问性**：通过使用适当的 ARIA 角色和属性确保您的 HTML 可访问。'
- en: '**[End of response]**'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: '**[响应结束]**'
- en: 'That’s a great list of things we can ask about next, but let’s see what code
    changes it suggests. It suggests code separated into two different files, one
    for the HTML and one for the JavaScript:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 那是一个我们可以询问的很好的列表，但让我们看看它建议的代码更改。它建议将代码分成两个不同的文件，一个用于 HTML，另一个用于 JavaScript：
- en: '[PRE26]'
  id: totrans-313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Now, let’s look at how the JavaScript was improved:'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看 JavaScript 是如何得到改进的：
- en: '[PRE27]'
  id: totrans-315
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'A great step forward. As a developer, you can see that the JavaScript code
    uses static data, so let’s change that with the following prompt:'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个巨大的进步。作为一名开发者，您可以看到 JavaScript 代码使用了静态数据，所以让我们用以下提示来改变它：
- en: '**[Prompt]**'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: '**[提示]**'
- en: Improve the code, use dynamic data by calling an API, and also generate a separate
    Python API with Flask that has the route /api/basket, containing the basket data.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 改进代码，通过调用 API 使用动态数据，并生成一个具有路由 /api/basket 的单独 Python API，其中包含购物车数据。
- en: '**[End of prompt]**'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: '**[提示结束]**'
- en: 'Now, we get two files, the API and the JavaScript code. Let’s look at the API
    first:'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们有两个文件，一个是 API，另一个是 JavaScript 代码。让我们先看看 API：
- en: '**[Prompt response]**'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: '**[提示响应]**'
- en: '[PRE28]'
  id: totrans-322
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Above you get a route `/api/basket` that returns the basket data. Let’s look
    at the improved JavaScript code:'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 在您上面得到一个返回购物车数据的路由 `/api/basket`。让我们看看改进后的 JavaScript 代码：
- en: '[PRE29]'
  id: totrans-324
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '**[End of response]**'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: '**[响应结束]**'
- en: 'Great! We’re now getting data from the API. How can we improve the code? If
    you’ve built a Vue app before, you will know that it involves using the Vue CLI
    and has a build step. Let’s ask GitHub Copilot about this with the following prompt:'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 太好了！我们现在从 API 获取数据。我们如何改进代码？如果您之前构建过 Vue 应用程序，您将知道它涉及到使用 Vue CLI 并有一个构建步骤。让我们用以下提示询问
    GitHub Copilot：
- en: '**[Prompt]**'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: '**[提示]**'
- en: Improve the code, use the Vue CLI, and add a build step.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 改进代码，使用 Vue CLI，并添加一个构建步骤。
- en: '**[End of prompt]**'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: '**[提示结束]**'
- en: 'Now, we get both commands and file changes back as a response, as follows:'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们以如下方式将命令和文件更改作为响应返回：
- en: '**[Prompt response]**'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: '**[提示响应]**'
- en: 'Install `Vue` CLI globally on your machine:'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的机器上全局安装`Vue` CLI：
- en: '[PRE30]'
  id: totrans-333
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Create a new `Vue` project
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新的`Vue`项目
- en: '[PRE31]'
  id: totrans-335
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Now, let’s create a new `Vue` component for the basket. Create a new file `Basket.vue`
    in the `src/components` directory:'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们创建一个新的`Vue`组件用于篮子。在`src/components`目录中创建一个新的文件`Basket.vue`：
- en: '[PRE32]'
  id: totrans-337
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Then, import and use this component in your main `App.vue`:'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在主`App.vue`中导入并使用此组件：
- en: '[PRE33]'
  id: totrans-339
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Now, you can use the `Vue` CLI’s build command to create a production-ready
    version of your app:'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以使用`Vue` CLI的构建命令来创建一个生产就绪版本的应用程序：
- en: '[PRE34]'
  id: totrans-341
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: This will create a dist directory with a production-ready version of your app.
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个包含应用程序生产就绪版本的`dist`目录。
- en: '**[End of response]**'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: '**[响应结束]**'
- en: This looks like a step in the right direction. However, you should always test
    the code to make sure it works as expected.
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 这看起来像是正确的步骤。然而，您应该始终测试代码以确保它按预期工作。
- en: As a challenge, see if the above code works and if you can improve it further.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 作为挑战，看看上述代码是否工作，以及您是否可以进一步改进它。
- en: Code is likely to change between versions of a framework. In this case, we’re
    using Vue.js, so make sure to consult the documentation for the version that you
    use.
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 代码可能在框架的不同版本之间发生变化。在这种情况下，我们使用Vue.js，所以请确保查阅您使用的版本的文档。
- en: Assignment
  id: totrans-347
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 作业
- en: 'Find a piece of code you want to improve. Follow the process outlined in this
    chapter to:'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 找到您想要改进的代码片段。按照本章概述的过程进行：
- en: Identify the problems. What problems do you see?
  id: totrans-349
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 识别问题。您看到了什么问题？
- en: Add tests and de-risk changes.
  id: totrans-350
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加测试，降低变更风险。
- en: Implement the changes and improve maintainability.
  id: totrans-351
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实施更改并提高可维护性。
- en: 'If you don’t have a piece of code you want to improve, try using the code from
    this chapter or the code from the Kata (Gilded Rose) GitHub page: [https://github.com/emilybache/GildedRose-Refactoring-Kata](https://github.com/emilybache/GildedRose-Refactoring-Kata).'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您没有想要改进的代码片段，请尝试使用本章中的代码或Kata（Gilded Rose）GitHub页面上的代码：[https://github.com/emilybache/GildedRose-Refactoring-Kata](https://github.com/emilybache/GildedRose-Refactoring-Kata)。
- en: Knowledge check
  id: totrans-353
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 知识检查
- en: What’s the difference between greenfield and brownfield development?
  id: totrans-354
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 绿色田野开发和棕色田野开发有什么区别？
- en: 'A: Greenfield development is when you start coding from scratch; brownfield
    development is when you update existing code.'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: A：绿色田野开发是指从头开始编码；棕色田野开发是指更新现有代码。
- en: What’s the best way to update existing code?
  id: totrans-356
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新现有代码的最佳方式是什么？
- en: 'A: The best way is to make small changes and have plenty of tests in place.'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: A：最好的方法是进行小改动，并确保有足够的测试。
- en: Summary
  id: totrans-358
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we established that a very important aspect of writing code
    is to update existing code, which is known as brownfield development. We also
    looked at how GitHub Copilot can help you with this task.
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们确立了编写代码的一个重要方面是更新现有代码，这被称为棕色田野开发。我们还探讨了GitHub Copilot如何帮助您完成这项任务。
- en: The most important message to take away from this chapter is to ensure that
    you have an approach to updating code that de-risks the changes you’re about to
    make. It’s better to make a small change several times than a big one once. It’s
    also strongly recommended to have plenty of tests in place before you start changing
    code.
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 从本章中可以得出的最重要的信息是确保您有一个更新代码的方法，以降低即将进行的变更风险。多次进行小改动比一次性进行大改动要好。在开始更改代码之前，强烈建议您有足够的测试。
- en: Join our community on Discord
  id: totrans-361
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加入我们的Discord社区
- en: 'Join our community’s Discord space for discussions with the author and other
    readers:'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 加入我们社区的Discord空间，与作者和其他读者进行讨论：
- en: '[https://packt.link/aicode](https://packt.link/aicode)'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://packt.link/aicode](https://packt.link/aicode)'
- en: '![](img/QR_Code510410532445718281.png)'
  id: totrans-364
  prefs: []
  type: TYPE_IMG
  zh: '![](img/QR_Code510410532445718281.png)'
