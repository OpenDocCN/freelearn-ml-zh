- en: R and SQL Server 2016/2017 Features Extended
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: SQL Server 2016 and 2017 provide a lot of new and improved query performance
    capabilities, extensibility features, security features, and built-in/native capabilities
    that are useful for developers, DBAs, and data scientists. These new features
    and capabilities can be used together with machine learning services in SQL, bringing
    a powerful data science solution as well as making the life of the developer/data
    scientist much easier.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter will walk you through a few unique scenarios to show the combined
    power of R and other built-in capabilities in SQL Server. These scenarios include
    JSON built-in capabilities to show how we work with IoT data, PolyBase to illustrate
    beyond relational data sources, and a large amount of data with the `ColumnStore`
    index. We will dive into these scenarios and produce data visualization and predictive
    analysis power in R that we have learned in previous chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Built-in JSON capabilities
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this scenario, we will use the EMS incidents by month from the official city
    of Austin open data portal ([https://data.austintexas.gov/Public-Safety/EMS-Incidents-by-Month/gjtj-jt2d](https://data.austintexas.gov/Public-Safety/EMS-Incidents-by-Month/gjtj-jt2d)).
    The data essentially contains incident counts, broken down by location and priorities
    for the city of Austin and Travis County incidents, and the percentage of on-time
    compliance.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the prerequisites to get started:'
  prefs: []
  type: TYPE_NORMAL
- en: Download the data from [https://data.austintexas.gov/resource/bpws-iwvb.json](https://data.austintexas.gov/resource/bpws-iwvb.json)
    to a local path, such as `C:\Temp\bpws-iwvb.json`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Grant read access to the directory; for example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00178.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.1 Granting access to C:\Temp for MS SQL Server
  prefs: []
  type: TYPE_NORMAL
- en: For ease of R visualization, we will use SQL Operations Studio. You can download
    SQL Ops Studio from: [https://docs.microsoft.com/en-us/sql/sql-operations-studio/download](https://docs.microsoft.com/en-us/sql/sql-operations-studio/download).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following is an excerpt of a JSON file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00179.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.2: Excerpt of bpws-iwvb.json'
  prefs: []
  type: TYPE_NORMAL
- en: 'The schema of the JSON object in this file is fairly straightforward. It''s
    an array of the following 31 properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '`count_incidents_all`'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: '`count_incidents_coa`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`count_incidents_coa_or_tc`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`count_incidents_coa_p1`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`count_incidents_coa_p2`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`count_incidents_coa_p3`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`count_incidents_coa_p4`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`count_incidents_coa_p5`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`count_incidents_other`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`count_incidents_tc`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`` `count_incidents_tc_p1` ``'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`count_incidents_tc_p2`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`count_incidents_tc_p3`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`count_incidents_tc_p4`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`count_incidents_tc_p5`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`month_key`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`month_start_date`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`percent_on_time_all`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`percent_on_time_coa`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`percent_on_time_coa_p1`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`percent_on_time_coa_p2`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`percent_on_time_coa_p3`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`percent_on_time_coa_p4`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`percent_on_time_coa_p5`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`percent_on_time_target`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`percent_on_time_tc`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`percent_on_time_tc_p1`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`percent_on_time_tc_p2`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`percent_on_time_tc_p3`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`percent_on_time_tc_p4`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`percent_on_time_tc_p5`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To see a first row of the data and what the value looks like, you can use the
    following T-SQL code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the output of the previous command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00180.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.3 Inspecting the first row of data in bpws-iwvb.json
  prefs: []
  type: TYPE_NORMAL
- en: 'The remainder of this section will show you how to use built-in JSON and R
    capabilities in SQL Server to parse the data and create a visualization to understand
    the trends of EMS incidents received by ATCEMS. The following screenshot shows
    the data visualization that we will build from the preceding JSON data via SQL
    Operations Studio:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00181.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.4 Using R to produce a forecast of EMS incidents
  prefs: []
  type: TYPE_NORMAL
- en: 'Perform the following steps to build the preceding visualization:'
  prefs: []
  type: TYPE_NORMAL
- en: Open SQL Operations Studio.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Using JSON,  get the `Date` and incident counts:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Here, we are using `OPENROWSET` and `SINGLE_CLOB` to read the file stream in
    clear text.
  prefs: []
  type: TYPE_NORMAL
- en: Then, we use `OPEN_JSON` to extract `month_start_date` as `Date`, `count_incidents_all`
    as `TotalIncidients`, `count_incidents_coa` as `AustinIncidents`, and `count_incidents_tc`
    as `TravisIncidents`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The output should look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00182.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.5: Output of running OPENJSON against the EMS Incident JSON file'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s build the `InputDataSet` for the R script with the `Date` and `TotalIncidents`
    data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s build the R script that uses the preceding `InputDataSet`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this script, we will use the forecast package to perform forecasting based
    on the existing data in January 2010 and November 2017\. More information about
    the forecast package, including the dependent packages, is available at: [https://cran.r-project.org/web/packages/forecast/index.html](https://cran.r-project.org/web/packages/forecast/index.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'In this specific example, the number of incidents can be seasonal. So, we are
    going to use a few helping functions that help with forecasting:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ts` function to convert the `InputDataSet` dataframe into time series'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: '`stl` function to decompose a time series into seasonal, trend, and irregular
    components'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`forecast` function that takes into account seasonality:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s execute the following script:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'In SQL Ops Studio, the result will be in the `VARBINARY` data type:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00183.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.6: View as Chart function in SQL Operations Studio'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the View as Chart icon on the right, then click on the Chart Viewer
    tab on the Results pane, and then choose image from Chart Type. The output should
    be similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00184.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.7: Displaying the chart produced by R in SQL Operations Studio'
  prefs: []
  type: TYPE_NORMAL
- en: Accessing external data sources using PolyBase
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'PolyBase allows your SQL Server instance to access data outside of the server/database
    using T-SQL. In SQL Server 2016, you can run queries on external data in Hadoop
    or import data from Azure Blob Storage:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00185.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.8: PolyBase concept (source: https://docs.microsoft.com/en-us/sql/relational-databases/polybase/polybase-guide)'
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we'll use a similar dataset as in the previous section, represented
    as CSV files in Azure Blob Storage. These CSV files represent the EMS incidents,
    which will be exposed as an external table in SQL Server. The goal for this walk-through
    is to understand seasonality and the trending of EMS incidents. We will use R
    in the SQL Server to do this and view the chart in SQL Operations Studio.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the prerequisites to get started:'
  prefs: []
  type: TYPE_NORMAL
- en: The SQL Server instance installed with PolyBase. This step is documented at: [https://docs.microsoft.com/en-us/sql/relational-databases/polybase/get-started-with-polybase](https://docs.microsoft.com/en-us/sql/relational-databases/polybase/get-started-with-polybase)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Microsoft Azure Storage Explorer installed. Using Azure Storage Explorer, you
    can upload files, manage containers in your storage account, and get a Primary
    Access Key from the storage account:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00186.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.9: Using Microsoft Azure Storage Explorer to connect to Azure Blob
    Storage'
  prefs: []
  type: TYPE_NORMAL
- en: EMS Incident by Month downloaded from <insert GitHub link> and uploaded to your
    Azure Blob Storage.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: SSMS or SQL Operations Studio installed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Perform the following steps to create an external table:'
  prefs: []
  type: TYPE_NORMAL
- en: Enable the advanced option to enable connectivity to Azure Blob Storage on the
    master database first.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Having Hadoop connectivity set to 7 allows connectivity to Azure Blob Storage.
    For more information on others supported data sources, visit:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/polybase-connectivity-configuration-transact-sql](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/polybase-connectivity-configuration-transact-sql)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a master key in your database where you''d like to create an external
    table connecting to the CSV files in Azure Blob Storage:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the database `MsSQLGirlAtAzureBlobStorage`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the external data source pointing to a container in Azure Blob Storage.
    In this instance, `open-data-sample` is the name of the container, and `mssqlgirl.blob.core.windows.net`
    is the Azure Blob Storage location:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the file format of the source files in the container:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the following source files in the container:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'So, now we can do a `SELECT` statement on the external table as an input to
    the R script:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'If you are using SQL Operations Studio, you can view the graph, which should
    look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00187.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.10: EMS incidents time series'
  prefs: []
  type: TYPE_NORMAL
- en: The preceding chart suggests that the trend is increasing from year 2010 to
    2016, which then significantly decreases in general.
  prefs: []
  type: TYPE_NORMAL
- en: High performance using ColumnStore and in memory OLTP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'SQL Server 2016 R Services and SQL Server 2017 ML Services provide advanced
    analytical capabilities that can also be applied to optimized tables. In this
    section, we will walk you through comparisons on how to use R Services with:'
  prefs: []
  type: TYPE_NORMAL
- en: A table with a primary key
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A table with a clustered `ColumnStore` index
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A memory-optimized table
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A memory-optimized table with a clustered `ColumnStore` index
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For more optimization tips and tricks with SQL Server and machine learning,
    visit:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://azure.microsoft.com/en-us/blog/optimization-tips-and-tricks-on-azure-sql-server-for-machine-learning-services/](https://azure.microsoft.com/en-us/blog/optimization-tips-and-tricks-on-azure-sql-server-for-machine-learning-services/)'
  prefs: []
  type: TYPE_NORMAL
- en: Testing rxLinMod performance on a table with a primary key
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following steps will test the performance of `rxLinMod` over 6,096,762 bits
    of data stored in a table with a primary key. This Air Flights data can be downloaded
    from [https://packages.revolutionanalytics.com/datasets/AirOnTime2012.xdf](https://packages.revolutionanalytics.com/datasets/AirOnTime2012.xdf)
    and stored in `C:/Program Files/Microsoft SQL Server/140/R_SERVER/library/RevoScaleR/SampleData`.
    At the end of the steps, we will record the CPU time:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a stored procedure that reads the `AirFlights` sample data in an XDF
    file, and return it as a data frame so that we can insert it into a new table:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a table where the `AirFlights` data will be stored. This table represents
    a row-stored table with a primary key:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Insert the Air Flights data into the `AirFlights` table. In this instance,
    we are using R services to load the data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a procedure that calls an external script to calculate the coefficient
    from the linear model prediction of the Arrival Delay:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Execute the procedure, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The result should look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Testing rxLinMod performance on a table with a clustered ColumnStore index
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following steps will test the performance of `rxLinMod` over 6,096,762 bits
    of data stored in a table with a clustered `ColumnStore` index. At the end of
    the steps, we will record the CPU time:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a table similar to `dbo.AirFlights` from the previous section. We also
    want to create a clustered `ColumnStore` index and insert the data from `dbo.AirFlights`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Execute the following procedure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The result should look something like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Testing rxLinMod performance on a memory-optimized table with a primary key
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following steps will test the performance of `rxLinMod` over 6,096,762 bits
    of data stored in a memory-optimized table with a non-clustered primary key. At
    the end of the steps, we will record the CPU time:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a file group for the memory-optimized table in the database:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a memory-optimized table version of `dbo.AirFlights`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Execute the following procedure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'The result should look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Testing rxLinMod performance on a memory-optimized table with a clustered ColumnStore
    index
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following steps will test the performance of `rxLinMod` over 6,096,762 bits
    of data stored in a memory-optimized table with a non-clustered primary key. At
    the end of the steps, we will record the CPU time:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a memory-optimized table with a clustered `columstore` index version
    of `dbo.AirFlights`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Execute the following procedure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'The result should look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Comparing results
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As you can see from the following quick chart comparison, SQL Server R Services
    can take advantage of optimized tables very well:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00188.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.11 Comparing performance of classic primary key, Columnstore, in-memory,
    and in-memory + Columnstore when used in combination with R Services
  prefs: []
  type: TYPE_NORMAL
- en: 'For additional information on the performance comparison, you can go to *Tomaž
    Kaštrun''s* article here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/tomaztk/Performance-differences-between-RevoScaleR-ColumnStore-Table-and-In-Memory-OLTP-Table/blob/master/RevoScaleR_vs_ColumStore_vs_InMemoryOLTP.sql](https://github.com/tomaztk/Performance-differences-between-RevoScaleR-ColumnStore-Table-and-In-Memory-OLTP-Table/blob/master/RevoScaleR_vs_ColumStore_vs_InMemoryOLTP.sql)'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: SQL Server 2016 and SQL Server 2017 are packed with useful features, from JSON,
    PolyBase, to high performance features, such as the `ColumnStore` index and memory-optimized
    tables. Most of these features are compatible and can enhance your advanced analytics
    experience. In this chapter, you have learned the steps for creating forecast
    and seasonal trends of EMS incidents in Austin and Travis County. We used both
    JSON data source and CSV files in Azure Blob Storage. Finally, you also have learned
    how to make use of `ColumnStore` and memory-optimized tables to improve performance
    of R Services.
  prefs: []
  type: TYPE_NORMAL
