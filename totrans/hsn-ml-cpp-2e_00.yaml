- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: C++ can make your **machine learning** (**ML**) models run faster and more efficiently.
    This book teaches you the basics of ML and shows you how to use C++ libraries.
    It explains how to create supervised and unsupervised ML models.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll get hands-on with tuning and optimizing a model for different use cases,
    assisting you with model selection and the measurement of performance. The book
    covers techniques such as product recommendations, ensemble learning, anomaly
    detection, sentiment analysis, and object recognition using modern C++ libraries.
    Further, you’ll learn how to handle production and deployment challenges on mobile
    platforms, and how the ONNX model format can help you in such tasks.
  prefs: []
  type: TYPE_NORMAL
- en: This new edition is updated with key topics such as sentiment analysis implementation
    using transfer learning and transformer-based models and tracking and visualizing
    ML experiments with MLflow. Also, there is an additional section about using Optuna
    for hyperparameter selection. The section about model deployment into mobile platforms
    is extended with a detailed explanation of real-time object detection for Android
    with C++.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this C++ book, you will have real-world ML and C++ knowledge,
    as well as the skills to use C++ to build powerful ML systems.
  prefs: []
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you want to get started with ML algorithms and techniques using the popular
    C++ language, then this book is for you. Aside from being a useful first course
    in ML with C++, this book will also appeal to data analysts, data scientists,
    and ML developers looking to implement different ML models in production using
    C++, which can be useful for some specific platforms, for example, embedded devices.
    Working knowledge of the C++ programming language, linear algebra, and basic calculus
    understanding are needed to get started with this book.
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[*Chapter 1*](B19849_01.xhtml#_idTextAnchor015), *Introduction to Machine Learning
    with C++*, guides you through the necessary fundamentals of ML, including linear
    algebra concepts, ML algorithm types, and their building blocks.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 2*](B19849_02.xhtml#_idTextAnchor075), *Data Processing*, shows you
    how to load data from different file formats for ML model training and how to
    initialize dataset objects in various C++ libraries.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 3*](B19849_03.xhtml#_idTextAnchor152), *Measuring Performance and
    Selecting Models*, shows you how to measure the performance of various types of
    ML models, how to select the best set of hyperparameters to achieve better model
    performance, and how to use the grid search method in various C++ and external
    libraries for model selection.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 4*](B19849_04.xhtml#_idTextAnchor228), *Clustering*, discusses algorithms
    for grouping objects by their essential characteristics, shows why we usually
    use unsupervised algorithms for solving such types of tasks, and lastly, outlines
    the various types of clustering algorithms, along with their implementations and
    usage in different C++ libraries.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 5*](B19849_05.xhtml#_idTextAnchor258), *Anomaly Detection*, discusses
    the basics of anomaly and novelty detection tasks and guides you through the different
    types of anomaly detection algorithms, their implementation, and their usage in
    various C++ libraries.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 6*](B19849_06.xhtml#_idTextAnchor301), *Dimensionality Reduction*,
    discusses various algorithms for dimensionality reduction that preserve the essential
    characteristics of data, along with their implementation and usage in various
    C++ libraries.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 7*](B19849_07.xhtml#_idTextAnchor383), *Classification*, shows you
    what a classification task is and how it differs from a clustering task. You will
    be guided through various classification algorithms, their implementation, and
    their usage in various C++ libraries.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 8*](B19849_08.xhtml#_idTextAnchor438), *Recommender Systems*, gives
    you familiarity with recommender system concepts. You will be shown the different
    approaches to dealing with recommendation tasks, and you will see how to solve
    such types of tasks using the C++ language.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 9*](B19849_09.xhtml#_idTextAnchor496), *Ensemble Learning*, discusses
    various methods of combining several ML models to get better accuracy and to deal
    with learning problems. You will encounter ensemble implementations with the usage
    of different C++ libraries.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 10*](B19849_10.xhtml#_idTextAnchor539), *Neural Networks for Image
    Classification*, gives you familiarity with the fundamentals of artificial neural
    networks. You will encounter the essential building blocks, the required math
    concepts, and learning algorithms. You will be guided through different C++ libraries
    that provide functionality for neural network implementations. Also, this chapter
    will show you the implementation of a deep convolutional network for image classification
    with the PyTorch library.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 11*](B19849_11.xhtml#_idTextAnchor642), *Sentiment Analysis with
    BERT and Transfer Learning*, introduces you to **large language models** (**LLMs**),
    and briefly describes how they work. It will also show how to use the transfer
    learning technique to use pre-trained LLMs to implement sentiment analysis with
    the PyTorch library.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 12*](B19849_12.xhtml#_idTextAnchor660), *Exporting and Importing
    Models*, shows you how to save and load model parameters and architectures using
    various C++ libraries. Also, you will see how to use the ONNX format to load and
    use a pre-trained model with the C++ API of the Caffe2 library.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 13*](B19849_13.xhtml#_idTextAnchor689), *Tracking and Visualizing
    ML Experiments*, shows you how to use the MLflow toolkit to track and visualize
    your ML experiments. Visualization is essential for understanding patterns, relationships,
    and trends in experiments. Experiment tracking allows you to compare results,
    identify best practices, and avoid repeating mistakes.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 14*](B19849_14.xhtml#_idTextAnchor702), *Deploying Models on a Mobile
    Platform*, guides you through the development of applications for object detection
    on devices’ camera images using neural networks for the Android platform.'
  prefs: []
  type: TYPE_NORMAL
- en: To get the most out of this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To be able to compile and run the examples included in this book, you will
    need to configure a particular development environment. All code examples have
    been tested with the Ubuntu Linux version 22.04 distributions. The following list
    outlines the packages you’ll need to install on the Ubuntu platform:'
  prefs: []
  type: TYPE_NORMAL
- en: '`unzip`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`build-essential`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`gdb`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`git`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`libfmt-dev`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`wget`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cmake`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`python3`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`python3-pip`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`python-is-python3`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`libblas-dev`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`libopenblas-dev`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`libfftw3-dev`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`libatlas-base-dev`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`liblapacke-dev`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`liblapack-dev`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`libboost-all-dev`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`libopencv-core4.5d`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`libopencv-imgproc4.5d`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`libopencv-dev`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`libopencv-highgui4.5d`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`libopencv-highgui-dev`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`libhdf5-dev`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`libjson-c-dev`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`libx11-dev`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`openjdk-8-jdk`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`openjdk-17-jdk`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ninja-build`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`gnuplot`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`vim`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`python3-venv`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`libcpuinfo-dev`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`libspdlog-dev`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You will need a `cmake` package with a version not less than 2.27\. To get
    it on Ubuntu 22.04, you have to download it manually and install it. For example,
    it can be done as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, you need to install the additional packages for Python, which can be
    done with the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Besides the development environment, you’ll have to check out requisite third-party
    libraries’ source code samples and build them. Most of these libraries are actively
    developed so you provide particular versions (Git tags) that you need to check
    out for our coding samples compatibility. The following table shows you the libraries
    you have to check out, their repository URLs, and the tag or the hash number of
    the commit to check out:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Library repository** | **Branch** **name/Tag** | **Commit** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [https://bitbucket.org/blaze-lib/blaze.git](https://bitbucket.org/blaze-lib/blaze.git)
    | v3.8.2 |  |'
  prefs: []
  type: TYPE_TB
- en: '| [https://github.com/arrayfire/arrayfire](https://github.com/arrayfire/arrayfire)
    | v3.8.3 |  |'
  prefs: []
  type: TYPE_TB
- en: '| [https://github.com/flashlight/flashlight.git](https://github.com/flashlight/flashlight.git)
    | v0.4.0 |  |'
  prefs: []
  type: TYPE_TB
- en: '| [https://github.com/davisking/dlib](https://github.com/davisking/dlib) |
    v19.24.6 |  |'
  prefs: []
  type: TYPE_TB
- en: '| [https://gitlab.com/conradsnicta/armadillo-code](https://gitlab.com/conradsnicta/armadillo-code)
    | 14.0.x |  |'
  prefs: []
  type: TYPE_TB
- en: '| [https://github.com/xtensor-stack/xtl](https://github.com/xtensor-stack/xtl)
    | 0.7.7 |  |'
  prefs: []
  type: TYPE_TB
- en: '| [https://github.com/xtensor-stack/xtensor](https://github.com/xtensor-stack/xtensor)
    | 0.25.0 |  |'
  prefs: []
  type: TYPE_TB
- en: '| [https://github.com/xtensor-stack/xtensor-blas](https://github.com/xtensor-stack/xtensor-blas)
    | 0.21.0 |  |'
  prefs: []
  type: TYPE_TB
- en: '| [https://github.com/nlohmann/json.git](https://github.com/nlohmann/json.git)
    | v3.11.3 |  |'
  prefs: []
  type: TYPE_TB
- en: '| [https://github.com/mlpack/mlpack](https://github.com/mlpack/mlpack) | 4.5.0
    |  |'
  prefs: []
  type: TYPE_TB
- en: '| [https://gitlab.com/libeigen/eigen.git](https://gitlab.com/libeigen/eigen.git)
    | 3.4.0 |  |'
  prefs: []
  type: TYPE_TB
- en: '| [https://github.com/BlueBrain/HighFive](https://github.com/BlueBrain/HighFive)
    | v2.10.0 |  |'
  prefs: []
  type: TYPE_TB
- en: '| [https://github.com/yhirose/cpp-httplib](https://github.com/yhirose/cpp-httplib)
    | v0.18.1 |  |'
  prefs: []
  type: TYPE_TB
- en: '| [https://github.com/Kolkir/plotcpp](https://github.com/Kolkir/plotcpp) |  |
    c86bd4f5d9029986f0d5f368450 d79f0dd32c7e4 |'
  prefs: []
  type: TYPE_TB
- en: '| [https://github.com/ben-strasser/fast-cpp-csv-parser](https://github.com/ben-strasser/fast-cpp-csv-parser)
    |  | 4ade42d5f8c454c6c57b3dce9c51c 6dd02182a66 |'
  prefs: []
  type: TYPE_TB
- en: '| [https://github.com/lisitsyn/tapkee](https://github.com/lisitsyn/tapkee)
    |  | Ba5f052d2548ec03dcc6a4ac0e d8deeb79f1d43a |'
  prefs: []
  type: TYPE_TB
- en: '| [https://github.com/Microsoft/onnxruntime.git](https://github.com/Microsoft/onnxruntime.git)
    | v1.19.2 |  |'
  prefs: []
  type: TYPE_TB
- en: '| [https://github.com/pytorch/pytorch](https://github.com/pytorch/pytorch)
    | v2.3.1 |  |'
  prefs: []
  type: TYPE_TB
- en: Notice that it makes sense to compile and install PyTorch last, due to possible
    conflicts with the `protobuf` library version used by `onnxruntime`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, for the last chapter, you may want to install the Android Studio IDE.
    You can download it from the official site at [https://developer.android.com/studio](https://developer.android.com/studio).
    Besides the IDE, you’ll also need to install and configure the Android SDK, NDK,
    and Android-based version of the OpenCV library. The following versions of tools
    are required:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Name** | **Versions** |'
  prefs: []
  type: TYPE_TB
- en: '| OpenCV | 4.10.0 |'
  prefs: []
  type: TYPE_TB
- en: '| Android command-line tools for Linux | 9477386 |'
  prefs: []
  type: TYPE_TB
- en: '| Android NDK | 26.1.10909125 |'
  prefs: []
  type: TYPE_TB
- en: '| Android platform | 35 |'
  prefs: []
  type: TYPE_TB
- en: 'You can configure these tools with the Android IDE or command-line tools as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Another way to configure the development environment is through the use of
    Docker. Docker allows you to configure a lightweight virtual machine with particular
    components. You can install Docker from the official Ubuntu package repository.
    Then, use the scripts provided with this book to automatically configure the environment.
    You will find the `build-env` folder in the `examples` repository. The following
    steps show how to use Docker configuration scripts:'
  prefs: []
  type: TYPE_NORMAL
- en: Configure your GitHub account first. Then, you will be able to configure GitHub
    authenticating with SSH, as described in the article *Connecting to GitHub with
    SSH* ([https://docs.github.com/en/authentication/connecting-to-github-with-ssh](https://docs.github.com/en/authentication/connecting-to-github-with-ssh));
    this is the preferred way. Or you can use HTTPS and provide your username and
    password each time a new repository is cloned. If you use 2FA to secure your GitHub
    account, then you’ll need to use a personal access token instead of a password,
    as explained in the article *Creating a personal access* *token* ([https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token)).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following commands to create the image, run it, and configure the environment:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use the following command to start a new Docker container and share the book
    examples sources with it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, `host_examples` is the path to the checked-out example sources from [https://github.com/PacktPublishing/Hands-on-Machine-learning-with-C-Second-Edition.git](https://github.com/PacktPublishing/Hands-on-Machine-learning-with-C-Second-Edition.git)
    and `container_examples_path` is the destination mounting path in the container,
    for example, `/samples`.
  prefs: []
  type: TYPE_NORMAL
- en: 'After running the preceding command, you will be in the command-line environment
    with the necessary configured packages, compiled third-party libraries, and access
    to the programming examples package. You can use this environment to compile and
    run the code examples in this book. Each programming example is configured to
    use the CMake build system so you will be able to build them all in the same way.
    The following script shows a possible scenario of building a code example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This is the manual approach. We also provide ready-to-use scripts to build each
    example. These scripts are placed in the `build_scripts` folder of the repository.
    For example, the build script for the first chapter is `build_ch1.sh`, which can
    be run directly from this folder.
  prefs: []
  type: TYPE_NORMAL
- en: If you are going to configure your build environment manually, take care of
    the `LIBS_DIR` variable that should point to the folder where all third-party
    libraries are installed; using the provided build scripts for the Docker environment,
    it will point to `$HOME/development/libs`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, you can configure your local machine environment to share X Server with
    a Docker container to be able to run graphical UI applications from this container.
    It will allow you to use, for example, the Android Studio IDE or a C++ IDE (such
    as Qt Creator) from the Docker container, without local installation. The following
    script shows how to do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: To be more comfortable with understanding and building the code examples, we
    recommend you carefully read the documentation for each third-party library, and
    take some time to learn the basics of the Docker system and of development for
    the Android platform. Also, we assume that you have sufficient working knowledge
    of the C++ language and compilers and that you are familiar with the CMake build
    system.
  prefs: []
  type: TYPE_NORMAL
- en: If you are using the digital version of this book, we advise you to type the
    code yourself or access the code via the GitHub repository (link available in
    the following section). Doing so will help you avoid any potential errors related
    to the copying and pasting of code.
  prefs: []
  type: TYPE_NORMAL
- en: Download the example code files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can download the example code files for this book from GitHub at [https://github.com/PacktPublishing/Hands-on-Machine-learning-with-C-Second-Edition](https://github.com/PacktPublishing/Hands-on-Machine-learning-with-C-Second-Edition).
    If there’s an update to the code, it will be updated in the GitHub repository.
  prefs: []
  type: TYPE_NORMAL
- en: We also have other code bundles from our rich catalog of books and videos available
    at [https://github.com/PacktPublishing/](https://github.com/PacktPublishing/).
    Check them out!
  prefs: []
  type: TYPE_NORMAL
- en: Conventions used
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a number of text conventions used throughout this book.
  prefs: []
  type: TYPE_NORMAL
- en: '`Code in text`: Indicates code words in text, database table names, folder
    names, filenames, file extensions, pathnames, dummy URLs, user input, and Twitter/X
    handles. Here is an example: “The `Dlib` library doesn’t have many classification
    algorithms.”'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'When we wish to draw your attention to a particular part of a code block, the
    relevant lines or items are set in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Any command-line input or output is written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '**Bold**: Indicates a new term, an important word, or words that you see onscreen.
    For instance, words in menus or dialog boxes appear in **bold**. Here is an example:
    “In the **one-against-all** strategy for N classes, N classifiers are trained,
    each of which separates its class from all other classes.”'
  prefs: []
  type: TYPE_NORMAL
- en: Tips or important notes
  prefs: []
  type: TYPE_NORMAL
- en: Appear like this.
  prefs: []
  type: TYPE_NORMAL
- en: Get in touch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Feedback from our readers is always welcome.
  prefs: []
  type: TYPE_NORMAL
- en: '**General feedback**: If you have questions about any aspect of this book,
    email us at [customercare@packtpub.com](mailto:customercare@packtpub.com) and
    mention the book title in the subject of your message.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Errata**: Although we have taken every care to ensure the accuracy of our
    content, mistakes do happen. If you have found a mistake in this book, we would
    be grateful if you would report this to us. Please visit [www.packtpub.com/support/errata](http://www.packtpub.com/support/errata)
    and fill in the form.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Piracy**: If you come across any illegal copies of our works in any form
    on the internet, we would be grateful if you would provide us with the location
    address or website name. Please contact us at [copyright@packtpub.com](mailto:copyright@packtpub.com)
    with a link to the material.'
  prefs: []
  type: TYPE_NORMAL
- en: '**If you are interested in becoming an author**: If there is a topic that you
    have expertise in and you are interested in either writing or contributing to
    a book, please visit [authors.packtpub.com](http://authors.packtpub.com).'
  prefs: []
  type: TYPE_NORMAL
- en: Share Your Thoughts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once you’ve read *Hands-On Machine Learning with C++*, we’d love to hear your
    thoughts! Please [click here to go straight to the Amazon review page](https://packt.link/r/1-805-12057-3)
    for this book and share your feedback.
  prefs: []
  type: TYPE_NORMAL
- en: Your review is important to us and the tech community and will help us make
    sure we’re delivering excellent quality content.
  prefs: []
  type: TYPE_NORMAL
- en: Download a free PDF copy of this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Thanks for purchasing this book!
  prefs: []
  type: TYPE_NORMAL
- en: Do you like to read on the go but are unable to carry your print books everywhere?
  prefs: []
  type: TYPE_NORMAL
- en: Is your eBook purchase not compatible with the device of your choice?
  prefs: []
  type: TYPE_NORMAL
- en: Don’t worry, now with every Packt book you get a DRM-free PDF version of that
    book at no cost.
  prefs: []
  type: TYPE_NORMAL
- en: Read anywhere, any place, on any device. Search, copy, and paste code from your
    favorite technical books directly into your application.
  prefs: []
  type: TYPE_NORMAL
- en: The perks don’t stop there, you can get exclusive access to discounts, newsletters,
    and great free content in your inbox daily
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these simple steps to get the benefits:'
  prefs: []
  type: TYPE_NORMAL
- en: Scan the QR code or visit the link below
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B19849_QR_Free_PDF.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '[https://packt.link/free-ebook/9781805120575](https://packt.link/free-ebook/9781805120575)'
  prefs: []
  type: TYPE_NORMAL
- en: Submit your proof of purchase
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: That’s it! We’ll send your free PDF and other benefits to your email directly
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Part 1:Overview of Machine Learning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this part, we will delve into the basics of machine learning with the help
    of examples in C++ and various machine learning frameworks. We’ll demonstrate
    how to load data from various file formats and describe model performance measuring
    techniques and the best model selection approaches.
  prefs: []
  type: TYPE_NORMAL
- en: 'This part comprises the following chapters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 1*](B19849_01.xhtml#_idTextAnchor015), *Introduction to Machine Learning
    with C++*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 2*](B19849_02.xhtml#_idTextAnchor075), *Data Processing*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 3*](B19849_03.xhtml#_idTextAnchor152), *Measuring Performance and
    Selecting Models*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
