["```py\nfrom sklearn import datasets\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier, ExtraTreesClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import f1_score\n```", "```py\ndataset = datasets.fetch_covtype()\nX_train, X_test, y_train, y_test = train_test_split(dataset.data, dataset.target, random_state=179)\n```", "```py\ntree = DecisionTreeClassifier(random_state=179, min_samples_leaf=3, min_samples_split=6)\ntree = tree.fit(X_train, y_train)\nprint(f1_score(y_test, tree.predict(X_test), average=\"macro\"))\nforest = RandomForestClassifier(random_state=179, min_samples_leaf=1, min_samples_split=2, n_estimators=140)\nforest = forest.fit(X_train, y_train)\nprint(f1_score(y_test, forest.predict(X_test), average=\"macro\"))\nextra_tree = ExtraTreesClassifier(random_state=179, min_samples_leaf=1, min_samples_split=2, n_estimators=180)\nextra_tree = extra_tree.fit(X_train, y_train)\nprint(f1_score(y_test, extra_tree.predict(X_test), average=\"macro\"))\n```", "```py\nfrom sklearn.ensemble import GradientBoostingClassifier\n```", "```py\ndataset = datasets.fetch_covtype()\nX_train, X_test, y_train, y_test = train_test_split(dataset.data, dataset.target, random_state=179)\nbooster = GradientBoostingClassifier(random_state=179, min_samples_leaf=3, min_samples_split=3, learning_rate=0.13, n_estimators=180)\nbooster = booster.fit(X_train, y_train)\nprint(f1_score(y_test, booster.predict(X_test), average=\"macro\"))\n```"]