["```py\nMat frameDiff(Mat prevFrame, Mat curFrame, Mat nextFrame)\n{\n    Mat diffFrames1, diffFrames2, output;\n\n    // Compute absolute difference between current frame and the next\n    absdiff(nextFrame, curFrame, diffFrames1);\n\n    // Compute absolute difference between current frame and the previous \n    absdiff(curFrame, prevFrame, diffFrames2);\n\n    // Bitwise \"AND\" operation between the previous two diff images\n    bitwise_and(diffFrames1, diffFrames2, output);\n\n    return output;\n}\n```", "```py\nMat getFrame(VideoCapture cap, float scalingFactor)\n{\n    Mat frame, output;\n\n    // Capture the current frame\n    cap >> frame;\n\n    // Resize the frame\n    resize(frame, frame, Size(), scalingFactor, scalingFactor, INTER_AREA);\n\n    // Convert to grayscale\n    cvtColor(frame, output, COLOR_BGR2GRAY);\n\n    return output;\n}\n```", "```py\nint main(int argc, char* argv[])\n{\n    Mat frame, prevFrame, curFrame, nextFrame;\n    char ch;\n\n    // Create the capture object\n    // 0 -> input arg that specifies it should take the input from the webcam\n    VideoCapture cap(0);\n\n    // If you cannot open the webcam, stop the execution!\n    if(!cap.isOpened())\n        return -1;\n\n    //create GUI windows\n    namedWindow(\"Frame\");\n\n    // Scaling factor to resize the input frames from the webcam\n    float scalingFactor = 0.75;\n\n    prevFrame = getFrame(cap, scalingFactor);\n    curFrame = getFrame(cap, scalingFactor);\n    nextFrame = getFrame(cap, scalingFactor);\n\n    // Iterate until the user presses the Esc key\n    while(true)\n    {\n        // Show the object movement\n        imshow(\"Object Movement\", frameDiff(prevFrame, curFrame, nextFrame));\n\n        // Update the variables and grab the next frame\n        prevFrame = curFrame;\n        curFrame = nextFrame;\n        nextFrame = getFrame(cap, scalingFactor);\n\n        // Get the keyboard input and check if it's 'Esc'\n        // 27 -> ASCII value of 'Esc' key\n        ch = waitKey( 30 );\n        if (ch == 27) {\n            break;\n        }\n    }\n    // Release the video capture object\n    cap.release();\n\n    // Close all windows\n    destroyAllWindows();\n\n    return 1;\n}\n```", "```py\nint main(int argc, char* argv[])\n{\n\n    // Variable declaration and initialization\n    ....\n    // Iterate until the user presses the Esc key\n    while(true)\n    {\n        // Capture the current frame\n        cap >> frame;\n\n        // Resize the frame\n        resize(frame, frame, Size(), scalingFactor, scalingFactor, INTER_AREA);\n\n        // Update the MOG2 background model based on the current frame\n        pMOG2->apply(frame, fgMaskMOG2);\n\n        // Show the MOG2 foreground mask\n        imshow(\"FG Mask MOG 2\", fgMaskMOG2);\n\n        // Get the keyboard input and check if it's 'Esc'\n        // 27 -> ASCII value of 'Esc' key\n        ch = waitKey( 30 );\n        if (ch == 27) {\n            break;\n        }\n    }\n\n    // Release the video capture object\n    cap.release();\n\n    // Close all windows\n    destroyAllWindows();\n\n    return 1;\n}\n```", "```py\npMOG2->apply(frame, fgMaskMOG2);\n```", "```py\nMat performErosion(Mat inputImage, int erosionElement, int erosionSize)\n{\n\n    Mat outputImage;\n    int erosionType;\n\n    if(erosionElement == 0)\n        erosionType = MORPH_RECT;\n    else if(erosionElement == 1)\n        erosionType = MORPH_CROSS;\n    else if(erosionElement == 2)\n        erosionType = MORPH_ELLIPSE;\n\n    // Create the structuring element for erosion\n    Mat element = getStructuringElement(erosionType, Size(2*erosionSize + 1, 2*erosionSize + 1), Point(erosionSize, erosionSize));\n\n    // Erode the image using the structuring element\n    erode(inputImage, outputImage, element);\n\n    // Return the output image\n    return outputImage;\n}\n```", "```py\nMat performDilation(Mat inputImage, int dilationElement, int dilationSize)\n{\n    Mat outputImage;\n    int dilationType;\n\n    if(dilationElement == 0)\n        dilationType = MORPH_RECT;\n    else if(dilationElement == 1)\n        dilationType = MORPH_CROSS;\n    else if(dilationElement == 2)\n        dilationType = MORPH_ELLIPSE;\n\n    // Create the structuring element for dilation\n    Mat element = getStructuringElement(dilationType, Size(2*dilationSize + 1, 2*dilationSize + 1), Point(dilationSize, dilationSize));\n\n    // Dilate the image using the structuring element\n    dilate(inputImage, outputImage, element);\n\n    // Return the output image\n    return outputImage;\n}\n```", "```py\nMat performOpening(Mat inputImage, int morphologyElement, int morphologySize)\n{\n\n    Mat outputImage, tempImage;\n    int morphologyType;\n\n    if(morphologyElement == 0)\n        morphologyType = MORPH_RECT;\n    else if(morphologyElement == 1)\n        morphologyType = MORPH_CROSS;\n    else if(morphologyElement == 2)\n        morphologyType = MORPH_ELLIPSE;\n\n    // Create the structuring element for erosion\n    Mat element = getStructuringElement(morphologyType, Size(2*morphologySize + 1, 2*morphologySize + 1), Point(morphologySize, morphologySize));\n\n    // Apply morphological opening to the image using the structuring element\n    erode(inputImage, tempImage, element);\n    dilate(tempImage, outputImage, element);\n\n    // Return the output image\n    return outputImage;\n}\n```", "```py\nMat performClosing(Mat inputImage, int morphologyElement, int morphologySize)\n{\n\n    Mat outputImage, tempImage;\n    int morphologyType;\n\n    if(morphologyElement == 0)\n        morphologyType = MORPH_RECT;\n    else if(morphologyElement == 1)\n        morphologyType = MORPH_CROSS;\n    else if(morphologyElement == 2)\n        morphologyType = MORPH_ELLIPSE;\n\n    // Create the structuring element for erosion\n    Mat element = getStructuringElement(morphologyType, Size(2*morphologySize + 1, 2*morphologySize + 1), Point(morphologySize, morphologySize));\n\n    // Apply morphological opening to the image using the structuring element\n    dilate(inputImage, tempImage, element);\n    erode(tempImage, outputImage, element);\n\n    // Return the output image\n    return outputImage;\n}\n```", "```py\nMat performMorphologicalGradient(Mat inputImage, int morphologyElement, int morphologySize)\n{\n    Mat outputImage, tempImage1, tempImage2;\n    int morphologyType;\n\n    if(morphologyElement == 0)\n        morphologyType = MORPH_RECT;\n    else if(morphologyElement == 1)\n        morphologyType = MORPH_CROSS;\n    else if(morphologyElement == 2)\n        morphologyType = MORPH_ELLIPSE;\n\n    // Create the structuring element for erosion\n    Mat element = getStructuringElement(morphologyType, Size(2*morphologySize + 1, 2*morphologySize + 1), Point(morphologySize, morphologySize));\n\n    // Apply morphological gradient to the image using the structuring element\n    dilate(inputImage, tempImage1, element);\n    erode(inputImage, tempImage2, element);\n\n    // Return the output image\n    return tempImage1 - tempImage2;\n}\n```", "```py\nMat performTopHat(Mat inputImage, int morphologyElement, int morphologySize)\n{\n\n    Mat outputImage;\n    int morphologyType;\n\n    if(morphologyElement == 0)\n        morphologyType = MORPH_RECT;\n    else if(morphologyElement == 1)\n        morphologyType = MORPH_CROSS;\n    else if(morphologyElement == 2)\n        morphologyType = MORPH_ELLIPSE;\n\n    // Create the structuring element for erosion\n    Mat element = getStructuringElement(morphologyType, Size(2*morphologySize + 1, 2*morphologySize + 1), Point(morphologySize, morphologySize));\n\n    // Apply top hat operation to the image using the structuring element\n    outputImage = inputImage - performOpening(inputImage, morphologyElement, morphologySize);\n\n    // Return the output image\n    return outputImage;\n}\n```", "```py\nMat performBlackHat(Mat inputImage, int morphologyElement, int morphologySize)\n{\n    Mat outputImage;\n    int morphologyType;\n\n    if(morphologyElement == 0)\n        morphologyType = MORPH_RECT;\n    else if(morphologyElement == 1)\n        morphologyType = MORPH_CROSS;\n    else if(morphologyElement == 2)\n        morphologyType = MORPH_ELLIPSE;\n\n    // Create the structuring element for erosion\n    Mat element = getStructuringElement(morphologyType, Size(2*morphologySize + 1, 2*morphologySize + 1), Point(morphologySize, morphologySize));\n\n    // Apply black hat operation to the image using the structuring element\n    outputImage = performClosing(inputImage, morphologyElement, morphologySize) - inputImage;\n\n    // Return the output image\n    return outputImage;\n}\n```"]