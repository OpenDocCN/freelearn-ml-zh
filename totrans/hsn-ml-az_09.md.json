["```py\ndisplay(dbutils.fs.ls(\"/databricks-datasets\"))\n```", "```py\nDROPTABLEIFEXISTS diamonds;CREATETABLE diamondsUSING csvOPTIONS (path \"/databricks-datasets/Rdatasets/data-001/csv/ggplot2/diamonds.csv\", header \"true\")\n```", "```py\necho -e 'y\\n' | ssh-keygen -t rsa -P '' -f ~hadoop/.ssh/id_rsacat ~hadoop/.ssh/id_rsa.pub >> ~hadoop/.ssh/authorized_keyschmod 0600 ~hadoop/.ssh/authorized_keyschown hadoop:hadoop ~hadoop/.ssh/id_rsachown hadoop:hadoop ~hadoop/.ssh/id_rsa.pubchown hadoop:hadoop ~hadoop/.ssh/authorized_keyssystemctl start hadoop-namenode hadoop-datanode hadoop-yarn\n```", "```py\ntaxi_train_file_loc = \"../Data/JoinedTaxiTripFare.Point1Pct.Train.csv\"taxi_valid_file_loc = \"../Data/JoinedTaxiTripFare.Point1Pct.Valid.csv\"\n```", "```py\nmodelDir = \"../Outputs/\"; # The last backslash is needed;\n```", "```py\n%%sql -q -o sqlResults\nSELECT fare_amount, passenger_count, tip_amount, tipped FROM taxi_train\n\nsqlResultsPD = spark.sql(sqlStatement).sample(False, 0.5, seed=1234).toPandas();\n%matplotlib inline\n\n# This query will show the tip by payment\n\nax1 = sqlResultsPD[['tip_amount']].plot(kind='hist', bins=25, facecolor='lightblue')\nax1.set_title('Tip amount distribution')\nax1.set_xlabel('Tip Amount ($)'); ax1.set_ylabel('Counts');\nplt.figure(figsize=(4,4)); plt.suptitle(''); plt.show()\n\n# TIP AMOUNT BY FARE AMOUNT, POINTS ARE SCALED BY PASSENGER COUNT\n\nax = sqlResultsPD.plot(kind='scatter', x= 'fare_amount', y = 'tip_amount', c='blue', alpha = 0.10, s=2.5*(sqlResultsPD.passenger_count))\nax.set_title('Tip amount by Fare amount')\nax.set_xlabel('Fare Amount ($)'); ax.set_ylabel('Tip Amount ($)');\nplt.axis([-2, 80, -2, 20])\nplt.figure(figsize=(4,4)); plt.suptitle(''); plt.show()\n```", "```py\nsqlStatement = \"\"\" SELECT *, CASEWHEN (pickup_hour <= 6 OR pickup_hour >= 20) THEN \"Night\"WHEN (pickup_hour >= 7 AND pickup_hour <= 10) THEN \"AMRush\"WHEN (pickup_hour >= 11 AND pickup_hour <= 15) THEN \"Afternoon\"WHEN (pickup_hour >= 16 AND pickup_hour <= 19) THEN \"PMRush\"END as TrafficTimeBinsFROM taxi_train\n```", "```py\nlogReg = LogisticRegression(maxIter=10, regParam=0.3, elasticNetParam=0.8)\n```", "```py\nclassFormula = RFormula(formula=\"tipped ~ pickup_hour + weekday + passenger_count + trip_time_in_secs + trip_distance + fare_amount + vendorVec + rateVec + paymentVec + TrafficTimeBinsVec\")\n```", "```py\nmodel = Pipeline(stages=[classFormula, logReg]).fit(trainData)\n```", "```py\ndatestamp = str(datetime.datetime.now()).replace(' ','').replace(':','_');\nfileName = \"logisticRegModel_\" + datestamp;\nlogRegDirfilename = modelDir + fileName;\nmodel.save(logRegDirfilename)\n```", "```py\npredictions = model.transform(testData)\npredictionAndLabels = predictions.select(\"label\",\"prediction\").rdd\nmetrics = BinaryClassificationMetrics(predictionAndLabels)\nprint(\"Area under ROC = %s\" % metrics.areaUnderROC)\n```", "```py\n%matplotlib inline\npredictions_pddf = predictions.toPandas()\nlabels = predictions_pddf[\"label\"]\nprob = []\nfor dv in predictions_pddf[\"probability\"]:\nprob.append(dv.values[1])\nfpr, tpr, thresholds = roc_curve(labels, prob, pos_label=1);\nroc_auc = auc(fpr, tpr)\nplt.figure(figsize=(5,5))\nplt.plot(fpr, tpr, label='ROC curve (area = %0.2f)' % roc_auc)\nplt.plot([0, 1], [0, 1], 'k--')\nplt.xlim([0.0, 1.0]); plt.ylim([0.0, 1.05]);\nplt.xlabel('False Positive Rate'); plt.ylabel('True Positive Rate');\nplt.title('ROC Curve'); plt.legend(loc=\"lower right\");\nplt.show()\n```", "```py\n## DEFINE REGRESSION FORMULA\nregFormula = RFormula(formula=\"tip_amount ~ paymentIndex + vendorIndex + rateIndex + TrafficTimeBinsIndex + pickup_hour + weekday + passenger_count + trip_time_in_secs + trip_distance + fare_amount\")\n```", "```py\n## DEFINE INDEXER FOR CATEGORIAL VARIABLES\nfeatureIndexer = VectorIndexer(inputCol=\"features\", outputCol=\"indexedFeatures\", maxCategories=32)\n```", "```py\n## DEFINE RANDOM FOREST ESTIMATOR\nrandForest = RandomForestRegressor(featuresCol = 'indexedFeatures', labelCol = 'label', numTrees=20,\nfeatureSubsetStrategy=\"auto\",impurity='variance', maxDepth=6, maxBins=100)\n```", "```py\n## Fit model, with formula and other transformations\nmodel = Pipeline(stages=[regFormula, featureIndexer, randForest]).fit(trainData)\n```", "```py\n## SAVE MODEL\ndatestamp = str(datetime.datetime.now()).replace(' ','').replace(':','_');\nfileName = \"RandomForestRegressionModel_\" + datestamp;\nandForestDirfilename = modelDir + fileName;\nmodel.save(randForestDirfilename)\n```", "```py\npredictions = model.transform(testData)\npredictionAndLabels = predictions.select(\"label\",\"prediction\").rdd\ntestMetrics = RegressionMetrics(predictionAndLabels)\nprint(\"RMSE = %s\" % testMetrics.rootMeanSquaredError)\nprint(\"R-sqr = %s\" % testMetrics.r2)\n```", "```py\n## PLOC ACTUALS VS. PREDICTIONS\npredictionsPD = predictions.select(\"label\",\"prediction\").toPandas()ax = predictionsPD.plot(kind='scatter', figsize = (5,5), x='label', y='prediction', color='blue', alpha = 0.15, label='Actual vs. predicted');\nfit = np.polyfit(predictionsPD['label'], predictionsPD['prediction'], deg=1)\nax.set_title('Actual vs. Predicted Tip Amounts ($)')\nax.set_xlabel(\"Actual\"); ax.set_ylabel(\"Predicted\");\nax.plot(predictionsPD['label'], fit[0] * predictionsPD['label'] + fit[1], color='magenta')\nplt.axis([-1, 15, -1, 15])\nplt.show(ax)\n```", "```py\nsavedModel = PipelineModel.load(logRegDirfilename)predictions = savedModel.transform(testData)predictionAndLabels = predictions.select(\"label\",\"prediction\").rddmetrics = BinaryClassificationMetrics(predictionAndLabels)print(\"Area under ROC = %s\" % metrics.areaUnderROC)\n```", "```py\nrandForest = RandomForestRegressor(featuresCol = 'indexedFeatures', labelCol = 'label',featureSubsetStrategy=\"auto\",impurity='variance', maxBins=100)\n```", "```py\npipeline = Pipeline(stages=[regFormula, ...\n```"]