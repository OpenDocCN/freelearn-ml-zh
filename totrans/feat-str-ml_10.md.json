["```py\n# Feature View type\n```", "```py\n@batch_feature_view(\n```", "```py\n    # Pipeline attributes\n```", "```py\n    inputs=...\n```", "```py\n    mode=...\n```", "```py\n    # Entities\n```", "```py\n    entities=...\n```", "```py\n    # Materialization and serving configuration\n```", "```py\n    online=...\n```", "```py\n    offline=...\n```", "```py\n    batch_schedule=...\n```", "```py\n    feature_start_time=...\n```", "```py\n    ttl=...\n```", "```py\n    backfill_config=...\n```", "```py\n    # Metadata\n```", "```py\n    owner=...\n```", "```py\n    description=...\n```", "```py\n    tags=...\n```", "```py\n)\n```", "```py\n# Feature View name\n```", "```py\ndef my_feature_view(input_data):\n```", "```py\n    intermediate_data = my_transformation(input_data)\n```", "```py\n    output_data = my_transformation_two(intermediate_data)\n```", "```py\n    return output_data\n```", "```py\n    store_fg_meta = fs.create_feature_group(\n        name=\"store_fg\",\n        version=1,\n        primary_key=[\"store\"],\n        description=\"Store related features\",\n        statistics_config={\"enabled\": True, \n                             \"histograms\": True, \n                             \"correlations\": True})\n    ```", "```py\n    #the minimum value of the feature needs to be between 0 and 10\n    rules=[Rule(name=\"HAS_MIN\", level=\"WARNING\", \n                 min=0, max=10)] \n    #Exactly 10% of all instances of the feature need to be contained in the legal_values list\n    rules=[Rule(name=\"IS_CONTAINED_IN\", level=\"ERROR\", \n                 legal_values=[\"a\", \"b\"], min=0.1, \n                 max=0.1)] \n    ```", "```py\n    !pip install sagemaker pandas\n    ```", "```py\n    import pandas as pd\n    import time\n    df = pd.read_parquet(path=\"/content/rfm_features.parquet\")\n    df = df.drop(columns=[\"created_timestamp\"])\n    df[\"event_timestamp\"] = float(round(time.time()))\n    df[\"customerid\"] = df['customerid'].astype(float)\n    df.head()\n    ```", "```py\n    import sagemaker\n    import sys\n    import boto3\n    from sagemaker.session import Session\n    from sagemaker import get_execution_role\n    import os\n    os.environ[\"AWS_ACCESS_KEY_ID\"] = \"<aws_key_id>\"\n    os.environ[\"AWS_SECRET_ACCESS_KEY\"] =\"<aws_secret_id>\"\n    os.environ[\"AWS_DEFAULT_REGION\"] = \"us-east-1\"\n    prefix = 'sagemaker-featurestore-introduction'\n    role = \"arn:aws:iam::<account_number>:role/sagemaker-iam-role\"\n    sagemaker_session = sagemaker.Session()\n    region = sagemaker_session.boto_region_name\n    s3_bucket_name = \"feast-demo-mar-2022\"\n    ```", "```py\n    from sagemaker.feature_store.feature_group import \\\n      FeatureGroup\n    customers_feature_group = FeatureGroup(\n        name=\"customer-rfm-features\", \n        sagemaker_session=sagemaker_session\n    )\n    customers_feature_group.load_feature_definitions(df)\n    ```", "```py\n    customers_feature_group.create(\n        s3_uri=f\"s3://{s3_bucket_name}/{prefix}\",\n        record_identifier_name=\"customerid\",\n        event_time_feature_name=\"event_timestamp\",\n        role_arn=role,\n        enable_online_store=True\n    )\n    ```", "```py\ningestion_manager = customers_feature_group.ingest(df))\n```", "```py\ningestion_manager.wait()\n```", "```py\ningestion_manager.failed_rows\n```", "```py\ncustomer_id = 12747.0\n```", "```py\nsg_runtime_client = sagemaker_session.boto_session.client(\n```", "```py\n    'sagemaker-featurestore-runtime', \n```", "```py\n    region_name=region)\n```", "```py\nrecord = sg_runtime_client.get_record(\n```", "```py\n    FeatureGroupName=\"customer-rfm-features\", \n```", "```py\n    RecordIdentifierValueAsString=str(customer_id))\n```", "```py\nprint(record)\n```", "```py\n{'ResponseMetadata': {'RequestId': '55342bbc-c69b-49ca-bbd8-xxxx', 'HTTPStatusCode': 200, 'HTTPHeaders': {'x-amzn-requestid': '55342bbc-c69b-49ca-bbd8-xxx, 'content-type': 'application/json', 'content-length': '729', 'date': 'Mon, 02 May 2022 01:36:27 GMT'}, 'RetryAttempts': 0}, \n```", "```py\n'Record': [{'FeatureName': 'customerid', 'ValueAsString': '12747.0'}, {'FeatureName': 'recency', 'ValueAsString': '7'}, {'FeatureName': 'frequency', 'ValueAsString': '35'}, {'FeatureName': 'monetaryvalue', 'ValueAsString': '1082.09'}, {'FeatureName': 'r', 'ValueAsString': '3'}, {'FeatureName': 'f', 'ValueAsString': '2'}, {'FeatureName': 'm', 'ValueAsString': '3'}, {'FeatureName': 'rfmscore', 'ValueAsString': '8'}, {'FeatureName': 'revenue6m', 'ValueAsString': '1666.1100000000001'}, {'FeatureName': 'ltvcluster', 'ValueAsString': '1'}, {'FeatureName': 'segmenthighvalue', 'ValueAsString': '1'}, {'FeatureName': 'segmentlowValue', 'ValueAsString': '0'}, {'FeatureName': 'segmentmidvalue', 'ValueAsString': '0'}, {'FeatureName': 'event_timestamp', 'ValueAsString': '1651455004.0'}]}\n```", "```py\nget_latest_snapshot_query = customers_feature_group.athena_query()\n```", "```py\nquery = f\"\"\"SELECT *\n```", "```py\nFROM\n```", "```py\n    (SELECT *,\n```", "```py\n         row_number()\n```", "```py\n        OVER (PARTITION BY customerid\n```", "```py\n    ORDER BY  event_timestamp desc, Api_Invocation_Time DESC, write_time DESC) AS row_num\n```", "```py\n    FROM \"{get_latest_snapshot_query.table_name}\")\n```", "```py\nWHERE row_num = 1 and \n```", "```py\nNOT is_deleted;\"\"\"\n```", "```py\nget_latest_snapshot_query.run(query_string=query, output_location=f\"s3://{s3_bucket_name}/output\")\n```", "```py\nget_latest_snapshot_query.get_query_execution()\n```", "```py\nlatest_df = get_latest_snapshot_query.as_dataframe()\n```", "```py\nlatest_df.head()\n```", "```py\ncustomers_feature_group.delete()\n```", "```py\nsagemaker_client = sagemaker_session.boto_session.client(\n```", "```py\n    \"sagemaker\", region_name=region\n```", "```py\n) \n```", "```py\nsagemaker_client.list_feature_groups()\n```"]