["```py\n1, 2, 3, 4\n5, 6, 7, 8\n9, 10, 11, 12\n```", "```py\n{\n  \"name\": \"Bill\",\n  \"age\": 25,\n  \"phones\": [\n    {\n      \"type\": \"home\",\n      \"number\": 43534590\n    },\n    {\n      \"type\": \"work\",\n      \"number\": 56985468\n    }\n  ]\n}\n```", "```py\n#include <csv.h>\n```", "```py\nconst uint32_t columns_num = 5;\nio::CSVReader<columns_num> csv_reader(file_path);\n```", "```py\nstd::vector<std::string> categorical_column;\nstd::vector<double> values;\n```", "```py\nusing RowType = \n  std::tuple<double, double, double, double, std::string>;\nRowType row;\n```", "```py\ntemplate <std::size_t... Idx, typename T, typename R>\nbool read_row_help(std::index_sequence<Idx...>, T& row, R& r) {\n  return r.read_row(std::get<Idx>(row)...);\n}\n```", "```py\ntemplate <std::size_t... Idx, typename T>\nvoid fill_values(std::index_sequence<Idx...>,\n                 T& row,\n                 std::vector<double>& data) {\n    data.insert(data.end(), {std::get<Idx>(row)...});\n}\n```", "```py\ntry {\n  bool done = false;\n  while (!done) {\n    done = !read_row_help(\n      std::make_index_sequence<\n        std::tuple_size<RowType>::value>{},\n      row, csv_reader);\n    if (!done) {\n      categorical_column.push_back(std::get<4>(row));\n      fill_values(\n        std::make_index_sequence<columns_num - 1>{},\n        row, values);\n    }\n  }\n}\n} catch (const io::error::no_digit& err) {\n    // Ignore badly formatted samples\n    std::cerr << err.what() << std::endl;\n}\n```", "```py\n#include <fstream>\n#include <regex>\n...\nstd::ifstream data_stream(\"iris.data\");\nstd::string data_string(\n    (std::istreambuf_iterator<char>(data_stream)),\n    std::istreambuf_iterator<char>()\n);\ndata_string = std::regex_replace(data_string,\n                                 std::regex(\"Irissetosa\"),\n                                 \"1\");\ndata_string = std::regex_replace(data_string,\n                                 std::regex(\"Irisversicolor\"),\n                                 \"2\");\ndata_string = std::regex_replace(data_string,\n                                 std::regex(\"Irisvirginica\"),\n                                 \"3\");\nstd::ofstream out_stream(\"iris_fix.csv\");\nout_stream << data_string;\n```", "```py\n#include <mlpack/core.hpp>\nusing namespace mlpack;\n```", "```py\narma::mat dataset;\ndata::DatasetInfo info;\ndata::Load(file_name,\n           dataset,\n           info,\n           /*fail with error*/ true);\n```", "```py\nstd::cout << \"Number of dimensions: \" << info.Dimensionality() \n          << std::endl;\nstd::cout << \"Number of classes: \" << info.NumMappings(4) \n          << std::endl;\n```", "```py\narma::Row<size_t> labels;\nlabels = arma::conv_to<arma::Row<size_t>>::from(\n    dataset.row(dataset.n_rows - 1));\ndataset.shed_row(dataset.n_rows – 1);\n```", "```py\ninclude <Dlib/matrix.h>\nusing namespace Dlib;\n```", "```py\nmatrix<double> data;\nstd::ifstream file(\"iris_fix.csv\");\nfile >> data;\nstd::cout << data << std::endl;\n```", "```py\n{\n  \"paper\": [\n    {\n      \"id\": 1,\n      \"preliminary_decision\": \"accept\",\n      \"review\": [\n        {\n          \"confidence\": \"4\",\n          \"evaluation\": \"1\",\n          \"id\": 1,\n          \"lan\": \"es\",\n          \"orientation\": \"0\",\n          \"remarks\": \"\",\n          \"text\" : \"- El artículo aborda un problema contingente\\n \n            y muy relevante, e incluye tanto un diagnóstico\\n \n            nacional de uso de buenas prácticas como una solución\\n\n            (buenas prácticas concretas)... \",\n          \"timespan\": \"2010-07-05\"\n        },\n        {\n          \"confidence\": \"4\",\n          \"evaluation\": \"1\",\n          \"id\": 2,\n          \"lan\": \"es\",\n          \"orientation\": \"1\",\n          \"remarks\": \"\",\n          \"text\" : \"El artículo presenta recomendaciones\\n \n         prácticas para el desarrollo de software seguro... \",\n          \"timespan\": \"2010-07-05\"\n        },\n        {\n          \"confidence\": \"5\",\n          \"evaluation\": \"1\",\n          \"id\": 3,\n          \"lan\": \"es\",\n          \"orientation\": \"1\",\n          \"remarks\": \"\",\n          \"text\" : \"- El tema es muy interesante y puede ser de\\n \n            mucha ayuda una guía para incorporar prácticas de\\n \n            seguridad... \",\n          \"timespan\": \"2010-07-05\"\n        }\n      ]\n    }\n  ]\n}\n```", "```py\n...\nstruct Paper {\n  uint32_t id{0};\n  std::string preliminary_decision;\n  std::vector<Review> reviews;\n};\nusing Papers = std::vector<Paper>;\n...\nstruct Review {\n  std::string confidence;\n  std::string evaluation;\n  uint32_t id{0};\n  std::string language;\n  std::string orientation;\n  std::string remarks;\n  std::string text;\n  std::string timespan;\n};\n```", "```py\n#include <nlohmann/json.hpp>\nusing json = nlohmann::json;\n...\nstruct ReviewsHandler\n: public json::json_sax_t {\n  ReviewsHandler(Papers* papers) : papers_(papers) {}\n  bool null() override;\n  bool boolean(bool) override;\n  bool number_integer(number_integer_t) override;\n  bool number_float(number_float_t, const string_t&) override;\n  bool binary(json::binary_t&) override;\n  bool parse_error(std::size_t, const std::string&, \n                                const json::exception& ex) override;\n  bool number_unsigned(number_unsigned_t u) override;\n  bool string(string_t& str) override ;\n  bool key(string_t& str) override;\n  bool start_object(std::size_t) override;\n  bool end_object() override;\n  bool start_array(std::size_t)override;\n  bool end_array() override;\n  Paper paper_;\n  Review review_;\n  std::string key_;\n  Papers* papers_{nullptr};\n  HandlerState state_{HandlerState::None};\n};\n```", "```py\nbool number_float(number_float_t, const string_t&) override {\n  return true;\n}\n```", "```py\nstd::ifstream file(filename);\nif (file) {\n  // define papers data container to be filled\n  Papers papers;\n  // define object with SAX handlers\n  ReviewsHandler handler(&papers);\n  // parse file\n  bool result = json::sax_parse(file, &handler);\n  // check parsing result\n  if (!result) {\n    throw std::runtime_error(handler.error_);\n  }\n  return papers;\n} else {\n  throw std::invalid_argument(\"File can't be opened \" + filename);\n}\n```", "```py\nenum class HandlerState {\n  None,\n  Global,\n  PapersArray,\n  Paper,\n  ReviewArray,\n  Review\n};\n```", "```py\nbool number_unsigned(number_unsigned_t u) override {\n  bool res{true};\n  try {\n    if (state_ == HandlerState::Paper && key_ == \"id\") {\n      paper_.id = u;\n    } else if (state_ == HandlerState::Review && key_ == \"id\") {\n      review_.id = u;\n    } else {\n      res = false;\n    }\n  } catch (...) {\n    res = false;\n  }\n  key_.clear();\n  return res;\n}\n```", "```py\nbool string(string_t& str) override {\n  bool res{true};\n  try {\n    if (state_ == HandlerState::Paper &&\n        key_ == \"preliminary_decision\") {\n      paper_.preliminary_decision = str;\n    } else if (state_ == HandlerState::Review &&\n               key_ == \"confidence\") {\n      review_.confidence = str;\n    } else if (state_ == HandlerState::Review &&\n               key_ == \"evaluation\") {\n      review_.evaluation = str;\n    } else if (state_ == HandlerState::Review &&\n               key_ == \"lan\") {\n      review_.language = str;\n    } else if (state_ == HandlerState::Review &&\n               key_ == \"orientation\") {\n      review_.orientation = str;\n    } else if (state_ == HandlerState::Review &&\n               key_ == \"remarks\") {\n      review_.remarks = str;\n    } else if (state_ == HandlerState::Review &&\n               key_ == \"text\") {\n      review_.text = str;\n    } else if (state_ == HandlerState::Review &&\n               key_ == \"timespan\") {\n      review_.timespan = str;\n    } else {\n      res = false;\n    }\n  } catch (...) {\n    res = false;\n  }\n  key_.clear();\n  return res;\n}\n```", "```py\nbool key(string_t& str) override  {\n  key_ = str;\n  return true;\n}\n```", "```py\nbool start_object(std::size_t) override {\n  if (state_ == HandlerState::None && key_.empty()) {\n      state_ = HandlerState::Global;\n  } else if (state_ == HandlerState::PapersArray && key_.empty()) {\n      state_ = HandlerState::Paper;\n  } else if (state_ == HandlerState::ReviewArray && key_.empty()) {\n      state_ = HandlerState::Review;\n  } else {\n      return false;\n  }\n  return true;\n}\n```", "```py\nbool end_object() override {\n  if (state_ == HandlerState::Global) {\n      state_ = HandlerState::None;\n  } else if (state_ == HandlerState::Paper) {\n      state_ = HandlerState::PapersArray;\n      papers_->push_back(paper_);\n      paper_ = Paper();\n  } else if (state_ == HandlerState::Review) {\n      state_ = HandlerState::ReviewArray;\n      paper_.reviews.push_back(review_);\n  } else {\n      return false;\n  }\n  return true;\n}\n```", "```py\nbool start_array(std::size_t) override {\n  if (state_ == HandlerState::Global && key_ == \"paper\") {\n      state_ = HandlerState::PapersArray;\n      key_.clear();\n  } else if (state_ == HandlerState::Paper && key_ == \"review\") {\n      state_ = HandlerState::ReviewArray;\n      key_.clear();\n  } else {\n      return false;\n  }\n  return true;\n}\n```", "```py\nbool end_array() override {\n  if (state_ == HandlerState::ReviewArray) {\n      state_ = HandlerState::Paper;\n  } else if (state_ == HandlerState::PapersArray) {\n      state_ = HandlerState::Global;\n  } else {\n      return false;\n  }\n  return true;\n}\n```", "```py\n#include <highfive/H5DataSet.hpp>\n#include <highfive/H5DataSpace.hpp>\n#include <highfive/H5File.hpp>\n```", "```py\nHighFive::File file(file_name, \n  HighFive::File::ReadWrite | HighFive::File::Create | \n  HighFive::File::Truncate);\n```", "```py\nauto papers_group = file.createGroup(\"papers\");\n```", "```py\nfor (const auto& paper : papers) {\n  auto paper_group = papers_group.createGroup(\n    \"paper_\" + std::to_string(paper.id));\n\n  std::vector<uint32_t> id = {paper.id};\n  auto id_attr = paper_group.createAttribute<uint32_t>(\n    \"id\", HighFive::DataSpace::From(id));\n  id_attr.write(id);\n  auto dec_attr = paper_group.createAttribute<std::string>(\n    \"preliminary_decision\",\n    HighFive::DataSpace::From(paper.preliminary_decision));\n  dec_attr.write(paper.preliminary_decision);\n}\n```", "```py\n auto reviews_group = paper_group.createGroup(\"reviews\");\n```", "```py\nstd::vector<size_t> dims = {3};\nstd::vector<int32_t> values(3);\nfor (const auto& r : paper.reviews) {\n     auto dataset = reviews_group.createDataSet<int32_t>(\n       std::to_string(r.id), HighFive::DataSpace(dims));\n     values[0] = std::stoi(r.confidence);\n     values[1] = std::stoi(r.evaluation);\n     values[2] = std::stoi(r.orientation);\n     dataset.write(values);\n }\n}\n```", "```py\nHighFive::File file(file_name, HighFive::File::ReadOnly);\n```", "```py\nauto papers_group = file.getGroup(\"papers\");\n```", "```py\nauto papers_names = papers_group.listObjectNames();\n```", "```py\nfor (const auto& pname : papers_names) {\n    auto paper_group = papers_group.getGroup(pname);\n...\n}\n```", "```py\nstd::vector<uint32_t> id;\npaper_group.getAttribute(\"id\").read(id);\nstd::cout << id[0];\nstd::string decision;\npaper_group.getAttribute(\"preliminary_decision\").read(decision);\nstd::cout << \" \" << decision << std::endl;\n```", "```py\nauto reviews_group = paper_group.getGroup(\"reviews\");\nauto reviews_names = reviews_group.listObjectNames();\nstd::vector<int32_t> values(2);\nfor (const auto& rname : reviews_names) {\n    std::cout << \"\\t review: \" << rname << std::endl;\n    auto dataset = reviews_group.getDataSet(rname);\n    auto selection = dataset.select({1}, {2}); \n  // or use just dataset.read method to get whole data\n    selection.read(values);\n    std::cout << \"\\t\\t evaluation: \" << values[0] << std::endl;\n    std::cout << \"\\t\\t orientation: \" << values[1] << std::endl;\n}\n```", "```py\nstd::vector<double> values;\n...\nauto x_data = Eigen::Map<Eigen::Matrix<double,\n                                       Eigen::Dynamic,\n                                       Eigen::Dynamic,\n                                       Eigen::RowMajor>>(\n    values.data(),\n    rows_num,\n    columns_num);\n```", "```py\nstd::array<int, 4> data = {1, 2, 3, 4};\nblaze::CustomVector<int,\n                    blaze::unaligned,\n                    blaze::unpadded,\n                    blaze::rowMajor>\n    v2(data.data(), data.size());\nstd::vector<float> mdata = {1, 2, 3, 4, 5, 6, 7, 8, 9};\nblaze::CustomMatrix<float,\n                    blaze::unaligned,\n                    blaze::unpadded,\n                    blaze::rowMajor>\n    a2(mdata.data(), 3UL, 3UL);\n```", "```py\ndouble data[] = {1, 2, 3, 4, 5, 6};\nauto m2 = Dlib::mat(data, 2, 3); // create matrix with size 2x3\n```", "```py\nfloat host_data[] = {0, 1, 2, 3, 4, 5};\narray A(2, 3, host_data);\n```", "```py\nstd::vector<double> values;\n...\narma::mat(values.data(), n_rows, n_cols, /*copy_aux_mem*/ false);\n```", "```py\n#include <opencv2/opencv.hpp>\n..\ncv::Mat img = cv::imread(file_name);\ncv::imwrite(new_file_name, img);\n```", "```py\ncv::resize(img,\n           img,\n           {img.cols / 2, img.rows / 2},\n           0,\n           0,\n           cv::INTER_AREA);\ncv::resize(img, img, {}, 1.5, 1.5, cv::INTER_CUBIC);\n```", "```py\nimg = img(cv::Rect(0, 0, img.cols / 2, img.rows / 2));\n```", "```py\ncv::Mat trm = (cv::Mat_<double>(2, 3) << 1, 0, -50, 0, 1, -50);\ncv::wrapAffine(img, img, trm, {img.cols, img.rows});\n```", "```py\nauto rotm = cv::getRotationMatrix2D({img.cols / 2, img.rows / 2},\n                                     45,\n                                     1);\ncv::wrapAffine(img, img, rotm, {img.cols, img.rows});\n```", "```py\nint top = 50; // px\nint bottom = 20; // px\nint left = 150; // px\nint right = 5; // px\ncv::copyMakeBorder(img,img,top,bottom,left,right,\n                   cv::BORDER_CONSTANT | cv::BORDER_ISOLATED,\n                   cv::Scalar(255, 0, 0));\n```", "```py\ncv::cvtColor(img, img, cv::COLOR_RGB2GRAY);\n// now pixels values are in range 0-1\n```", "```py\n#include <Dlib/image_io.h>\n#include <Dlib/image_transforms.h>\nusing namespace Dlib;\n...\narray2d<rgb_pixel> img;\nload_image(img, file_path);\n```", "```py\narray2d<rgb_pixel> img2(img.nr() / 2, img.nc() / 2);\nresize_image(img, img2, interpolate_nearest_neighbor());\nresize_image(1.5, img); // default interpolate_bilinear\n```", "```py\nextract_image_chip(\n    img,\n    rectangle(0, 0, img.nc() / 2, img.nr() / 2),\n    img2);\n```", "```py\ntransform_image(img,img2,interpolate_bilinear(),\n                point_transform_affine(\n                    identity_matrix<double>(2),\n                    Dlib::vector<double, 2>(-50, -50)));\n```", "```py\nrotate_image(img, img2, -45, interpolate_bilinear());\n```", "```py\nint top = 50; // px\nint bottom = 20; // px\nint left = 150; // px\nint right = 5; // px\nimg2.set_size(img.nr() + top + bottom, img.nc() + left + right);\ntransform_image(\n  img, img2, interpolate_bilinear(),\n  point_transform_affine(\n    identity_matrix<double>(2),\n    Dlib::vector<double, 2>(-left/2, -top/2)\n  )\n);\n```", "```py\narray2d<bgr_pixel> img_bgr;\nassign_image(img_bgr, img);\n```", "```py\narray2d<unsigned char> img_gray;\nassign_image(img_gray, img);\n```", "```py\nrgb rgb rgb rgb\nrgb rgb rgb rgb\nrgb rgb rgb rgb\nrgb rgb rgb rgb\n```", "```py\nr r r r g g g g b b b b\nr r r r g g g g b b b b\nr r r r g g g g b b b b\nr r r r g g g g b b b b\n```", "```py\ncv::cvtColor(img, img, cv::COLOR_BGR2RGB);\n```", "```py\nimg.convertTo(img, CV_32FC3, 1/255.0);\n```", "```py\ncv::Mat bgr[3];\ncv::split(img, bgr);\n```", "```py\ncv::Mat ordered_channels;\ncv::vconcat(bgr[2], bgr[1], ordered_channels);\ncv::vconcat(ordered_channels, bgr[0], ordered_channels);\n```", "```py\nauto channel_size = static_cast<size_t>(img.nc() * img.nr());\nstd::vector<unsigned char> ch1(channel_size);\nstd::vector<unsigned char> ch2(channel_size);\nstd::vector<unsigned char> ch3(channel_size);\n```", "```py\nsize_t i{0};\nfor (long r = 0; r < img.nr(); ++r) {\n  for (long c = 0; c < img.nc(); ++c) {\n    ch1[i] = img[r][c].red;\n    ch2[i] = img[r][c].green;\n    ch3[i] = img[r][c].blue;\n    ++i;\n  }\n}\n```", "```py\nEigen::Array<double, 1, Eigen::Dynamic> std_dev =\n  ((x.rowwise() - x.colwise().mean())\n    .array()\n    .square()\n    .colwise()\n    .sum() /\n    (x_data.rows() - 1))\n  .sqrt();\n```", "```py\nEigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> x_std =\n    (x.rowwise() - x.colwise().mean()).array().rowwise() / std_dev;\n```", "```py\nEigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> x_min_max =\n    (x.rowwise() - x.colwise().minCoeff()).array().rowwise() /\n    (x.colwise().maxCoeff() - x.colwise().minCoeff()).array();\n```", "```py\nEigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> x_avg =\n  (x.rowwise() - x.colwise().mean()).array().rowwise() /\n  (x.colwise().maxCoeff() - x.colwise().minCoeff()).array();\n```", "```py\n#include <mlpack/core.hpp>\n...\narma::mat features;\narma::Row<size_t> labels;\ndata::MinMaxScaler min_max_scaler;\nmin_max_scaler.Fit(features); // learn statistics\narma::mat scaled_dataset;\nmin_max_scaler.Transform(features, scaled_dataset);\n```", "```py\ndata::StandardScaler standard_scaler;\nstandard_scaler.Fit(features);\nstandard_scaler.Transform(features, scaled_dataset);\n```", "```py\nstd::cout << scaled_dataset << std::endl;\n```", "```py\nstd::vector<matrix<double>> samples;\n...\nvector_normalizer<matrix<double>> normalizer;\nsamples normalizer.train(samples);\nsamples = normalizer(samples);\n```", "```py\nmatrix<double> m(mean(mat(samples)));\nmatrix<double> sd(reciprocal(stddev(mat(samples))));\nfor (size_t i = 0; i < samples.size(); ++i)\n    samples[i] = pointwise_multiply(samples[i] - m, sd);\n```", "```py\nstd::cout << mat(samples) << std::endl;\n```", "```py\nfl::Tensor x;\n...\n// min-max scaling\nauto x_min = fl::amin(x, {1});\nauto x_max = fl::amax(x, {1});\nauto x_min_max = (x - x_min) / (x_max - x_min);\n// normalization(z-score)\nauto x_mean = fl::mean(x, {1});\nauto x_std = fl::std(x, {1});\nauto x_norm = (x - x_mean) / x_std;\n```", "```py\nstd::cout << dataset << std::endl;\n```"]