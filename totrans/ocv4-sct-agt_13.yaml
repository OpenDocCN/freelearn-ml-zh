- en: Learning More about Feature Detection in OpenCV
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [Chapter 4](61bdd7aa-b605-4061-8bfe-71084c7c7104.xhtml)*, Controlling a Phone
    App with Your Suave Ges**tures*, we used the Good Features to Track algorithm
    to detect trackable features in images. OpenCV offers implementations of several
    more feature-detection algorithms. Two of the other algorithms, called minimum
    eigenvalue corners and Harris Corners, are precursors to Good Features to Track,
    which improves upon them. An official tutorial illustrates the use of eigenvalue
    corners and Harris Corners in a code sample at [https://docs.opencv.org/master/d9/dbc/tutorial_generic_corner_detector.h](https://docs.opencv.org/master/d9/dbc/tutorial_generic_corner_detector.html)[tml](https://docs.opencv.org/master/d9/dbc/tutorial_generic_corner_detector.html).
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: Some of the other, more-advanced feature-detection algorithms in OpenCV are
    named FAST, ORB, SIFT, SURF, and FREAK. Compared to Good Features to Track, these
    more-advanced alternatives evaluate a much larger set of potential features, at
    a much greater computational cost. They are overkill for a basic optical flow
    task such as ours. Once we have detected a face, we do not need many features
    in this region in order to distinguish between vertical motions (nodding) and
    horizontal motions (shaking). For our gesture-recognition task, running at a fast
    frame rate is far more important than running with a large number of features. On
    the other hand, some computer vision tasks require a large number of features.
    Image recognition is a good example. If we put red lipstick on a poster of the *Mona
    Lisa*, the resulting image is not the Mona Lisa (or at least not Leonardo's version
    of her). An image's details may be considered fundamental to its identity. However,
    a change in lighting or perspective does not change an image's identity, so the
    feature-detection and matching system still needs to be robust with respect to
    some changes.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: For a project that covers image recognition and tracking, refer to *Chapters
    4*, *Chapter 5*, and *Chapter 6* of *Android Application Programming with OpenCV
    3*, by Packt Publishing.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: For benchmarks of several feature detectors and matchers in OpenCV, refer to
    the series of articles on Ievgen Khvedchenia's blog, including [http://computer-vision-talks.com/2011-07-13-comparison-of-the-opencv-feature-detection-algorithms/](http://computer-vision-talks.com/2011-07-13-comparison-of-the-opencv-feature-detection-algorithms/).
    Also, you can find more up-to-date benchmarks in the *Example comparative performance
    tests of algorithms* section in *Chapter 9, **Finding the Best OpenCV Algorithm
    for the Job* in *Mastering OpenCV 4*, by Roy Shilkrot and David Millán Escrivá
    (Packt Publishing, 2018).
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: For tutorials on several algorithms and their OpenCV implementations, see the *Feature
    Detection and Description* section of the official OpenCV-Python Tutorials at [http://docs.opencv.org/master/db/d27/tutorial_py_table_of_contents_feature2d.html](http://docs.opencv.org/master/db/d27/tutorial_py_table_of_contents_feature2d.html).
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 关于多个算法及其OpenCV实现的教程，请参阅官方OpenCV-Python教程中的*特征检测与描述*部分，链接为[http://docs.opencv.org/master/db/d27/tutorial_py_table_of_contents_feature2d.html](http://docs.opencv.org/master/db/d27/tutorial_py_table_of_contents_feature2d.html).
