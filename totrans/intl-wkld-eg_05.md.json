["```py\ngit clone https://github.com/PacktPublishing/Intelligent-Workloads-at-the-Edge-\n```", "```py\n    cd ~/ && git clone https://github.com/PacktPublishing/Intelligent-Workloads-at-the-Edge-.git\n    ```", "```py\n    cd Intelligent-Workloads-at-the-Edge-/chapter3\n    ```", "```py\n    sudo /greengrass/v2/bin/greengrass-cli deployment create --merge com.hbs.hub.ReadSenseHAT=1.0.0 --recipeDir recipes/ --artifactDir artifacts/\n    ```", "```py\n    sudo tail -f /greengrass/v2/logs/greengrass.log\n    ```", "```py\n    sudo /greengrass/v2/bin/greengrass-cli component list\n    ```", "```py\n  \"ComponentConfiguration\": {\n    \"DefaultConfiguration\": {\n      \"accessControl\": {\n        \"aws.greengrass.ipc.pubsub\": {\n          \"com.hbs.hub.ReadSenseHAT:pubsub:1\": {\n            \"policyDescription\": \"Allows publish operations on local IPC\",\n            \"operations\": [\n              \"aws.greengrass#PublishToTopic\"\n            ],\n            \"resources\": [\n              \"*\"\n            ]\n          }\n        }\n      }\n    }\n  },\n```", "```py\n\"Lifecycle\": {\n        \"Install\": {\n          \"RequiresPrivilege\": true,\n          \"Script\": \"usermod -a -G i2c,input ggc_user && apt update && apt upgrade -y && apt install python3 libatlas-base-dev -y && python3 -m venv env && env/bin/python -m pip install -r {artifacts:path}/requirements.txt\"\n        },\n        \"Run\": {\n          \"Script\": \"env/bin/python {artifacts:path}/read_senseHAT.py\"\n        }\n      }\n```", "```py\n\"Lifecycle\": {\n  \"Install\": {\n    \"RequiresPrivilege\": true,\n    \"Script\": \"usermod -a -G i2c,input ggc_user && apt update && apt upgrade -y && apt install python3 libatlas-base-dev -y && python3 -m venv env && env/bin/python -m pip install -r {artifacts:path}/requirements.txt\"\n  },\n```", "```py\nlogger = logging.getLogger()\nhandler = logging.StreamHandler(sys.stdout)\nlogger.setLevel(logging.INFO)\nlogger.addHandler(handler)\n```", "```py\nsense = SenseHat()\nmessage = {}\nmessage['timestamp'] = float(\"%.4f\" % (time.time()))\nmessage['device_id'] = 'hvac'\nmessage['temperature'] = sense.get_temperature()\nmessage['humidity'] = sense.get_humidity()\n```", "```py\npublish_message = PublishMessage()\npublish_message.json_message = JsonMessage()\npublish_message.json_message.message = message\nrequest = PublishToTopicRequest()\nrequest.topic = topic\nrequest.publish_message = publish_message\noperation = ipc_client.new_publish_to_topic()\noperation.activate(request)\nfuture = operation.get_response()\ntry:\n    future.result(TIMEOUT)\n    logger.info('published message, payload is: %s', request.publish_message)\nexcept Exception as e:\n    logger.error('failed message publish: ', e)\n```", "```py\nsudo tail -f /greengrass/v2/logs/com.hbs.hub.ReadSenseHAT.log\n2021-06-29T01:03:07.746Z [INFO] (Copier) com.hbs.hub.ReadSenseHAT: stdout. published message, payload is: PublishMessage(json_message=JsonMessage(message={'timestamp': 1624928587.6789, 'device_id': 'hvac', 'temperature': 44.34784698486328, 'humidity': 22.96312713623047})). {scriptName=services.com.hbs.hub.ReadSenseHAT.lifecycle.Run.Script, serviceName=com.hbs.hub.ReadSenseHAT, currentState=RUNNING}\n```", "```py\nsudo /greengrass/v2/bin/greengrass-cli deployment create --merge com.hbs.hub.WriteSenseHAT=1.0.0 --recipeDir recipes/ --artifactDir artifacts/\n```", "```py\nsudo /greengrass/v2/bin/greengrass-cli deployment create --remove com.hbs.hub.WriteSenseHAT \n```", "```py\n\"accessControl\": {\n        \"aws.greengrass.ipc.pubsub\": {\n          \"com.hbs.hub.WriteSenseHAT:pubsub:1\": {\n            \"policyDescription\": \"Allows subscribe operations on local IPC\",\n            \"operations\": [\n              \"aws.greengrass#SubscribeToTopic\"\n            ],\n            \"resources\": [\n              \"*\"\n            ]\n          }\n        }\n      }\n```", "```py\nclass StreamHandler(client.SubscribeToTopicStreamHandler):\n    def __init__(self):\n        super().__init__()\n    def on_stream_event(self, event: SubscriptionResponseMessage) -> None:\n        try:\n            message = event.json_message.message\n            logger.info('message received! %s', message)\n            scroll_message('t: ' + str(\"%.2f\" % message['temperature']))\n            scroll_message('h: ' + str(\"%.2f\" % message['humidity']))\n        except:\n            traceback.print_exc()\n```", "```py\ndef scroll_message(message):\n    sense = SenseHat()\n    sense.show_message(message)\n```"]