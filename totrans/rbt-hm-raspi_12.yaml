- en: '12'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '12'
- en: Detecting Orientation with an IMU on Raspberry Pi Pico
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Raspberry Pi Pico上的IMU检测方向
- en: Our robot can track how far it’s moved, but what about tracking which direction
    the robot is facing? Or how far it has turned? In this chapter, we will learn
    about the **Inertial Measurement Unit** (**IMU**), a device that can track the
    motion of the robot measured against gravity and the Earth’s magnetic field.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的机器人可以跟踪它移动的距离，但机器人面向哪个方向？或者它转了多少度？在本章中，我们将学习关于**惯性测量单元**（**IMU**），这是一种可以跟踪机器人相对于重力和地球磁场的运动的设备。
- en: We’ll look at how to select one of these devices, get it connected and then
    write code for it on our robot using the PID controller to steer the robot based
    on the IMU data.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将探讨如何选择这些设备之一，将其连接起来，然后使用PID控制器编写代码，在机器人上使用IMU数据来控制机器人的方向。
- en: 'In this chapter, we will cover the following main topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要内容：
- en: What is an IMU and how to choose one
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是IMU以及如何选择一个
- en: Connecting the IMU to the robot
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将IMU连接到机器人
- en: Calibrating and getting readings
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 校准和读取数据
- en: Always face North behavior
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 总是面向北方的行为
- en: Making a known turn behavior
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 制作已知的转动行为
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'For this chapter, you will require the following:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本章，你需要以下设备：
- en: The robot from [*Chapter 11*](B18001_11.xhtml#_idTextAnchor233), *Controlling
    Motion with Encoders on Raspberry* *Pi Pico*
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 来自[*第11章*](B18001_11.xhtml#_idTextAnchor233)，*使用Raspberry Pi Pico上的编码器控制运动*的机器人
- en: The robot, encoder, and PID code from [*Chapter 11*](B18001_11.xhtml#_idTextAnchor233),
    *Controlling Motion with Encoders on Raspberry* *Pi Pico*
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 来自[*第11章*](B18001_11.xhtml#_idTextAnchor233)，*使用Raspberry Pi Pico上的编码器控制运动*的机器人、编码器和PID代码
- en: A screwdriver, bolts, and stand-offs
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 螺丝刀、螺栓和支架
- en: Dupont jumper cables
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Dupont跳线
- en: A space where strong magnets can be avoided
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个可以避免强磁铁的空间
- en: A PC or laptop
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 个人电脑或笔记本电脑
- en: An Android/iOS smartphone with Bluetooth LE and the Bluefruit LE Connect app
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 带有蓝牙LE和Bluefruit LE Connect应用程序的Android/iOS智能手机
- en: You can find the code for this chapter at [https://github.com/PacktPublishing/Robotics-at-Home-with-Raspberry-Pi-Pico/tree/main/ch-12](https://github.com/PacktPublishing/Robotics-at-Home-with-Raspberry-Pi-Pico/tree/main/ch-12).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[https://github.com/PacktPublishing/Robotics-at-Home-with-Raspberry-Pi-Pico/tree/main/ch-12](https://github.com/PacktPublishing/Robotics-at-Home-with-Raspberry-Pi-Pico/tree/main/ch-12)找到本章的代码。
- en: What is an IMU and how to choose one
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是IMU以及如何选择一个
- en: In this section, we’ll look at the components of an IMU and what criteria we
    used to choose the one used in this robot.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探讨IMU的组件以及我们选择用于本机器人的标准。
- en: Components of an IMU
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: IMU的组件
- en: An IMU is a module that can measure movement. It uses multiple sensors to achieve
    this. In this section, we’ll briefly look at each sensor and how they contribute
    to the whole measurement.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: IMU是一个可以测量运动的模块。它使用多个传感器来实现这一点。在本节中，我们将简要地看看每个传感器以及它们如何对整个测量做出贡献。
- en: These sensors are made using the **Micro-Electro-Mechanical-Systems** (**MEMS**)
    process. They have tiny moving parts embedded into the chips. We can model them
    mechanically to understand them. These parts sense the movement of parts through
    their magnetic fields and amplify tiny signals. Let’s look at the components.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这些传感器是使用**微机电系统**（**MEMS**）工艺制造的。它们在芯片中嵌入有微小的活动部件。我们可以从机械上模拟它们来理解它们。这些部件通过它们的磁场感知部件的运动并放大微小的信号。让我们看看这些组件。
- en: The thermometer
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 温度计
- en: The mechanical components of an IMU will change size, depending on their temperature.
    These tiny changes may be enough to change the signals so that the IMU controller
    can use a temperature measurement to compensate for this.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: IMU的机械组件会根据其温度改变尺寸。这些微小的变化可能足以改变信号，使得IMU控制器可以使用温度测量来补偿这一点。
- en: The accelerometer
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 加速度计
- en: 'An **accelerometer** measures acceleration forces. It measures this as a vector
    – a direction and a size. The way this is measured is somewhat like a box with
    a suspended mass, as shown in the following figure:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**加速度计**测量加速度力。它将其测量为一个矢量——一个方向和大小。这种测量的方式有点像带有悬挂质量的盒子，如下面的图所示：'
- en: '![Figure 12.1 – Accelerometer modeled as a mass with springs ](img/Figure_12.01_B18001.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![图12.1 – 将加速度计模拟为带有弹簧的质量](img/Figure_12.01_B18001.jpg)'
- en: Figure 12.1 – Accelerometer modeled as a mass with springs
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.1 – 将加速度计模拟为带有弹簧的质量
- en: The preceding figure shows a mass suspended in a box by springs. When a force
    acts on the box, the mass retains its inertia and compresses the spring opposing
    the force’s direction. A MEMS accelerometer uses tiny silicon springs and masses
    and measures the electrical field changes when the mass moves.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的图示展示了一个通过弹簧悬挂在盒子中的质块。当作用在盒子上的力时，质块保持其惯性并压缩与力方向相反的弹簧。MEMS加速度计使用微小的硅弹簧和质块，并测量当质块移动时电场的变化。
- en: While on Earth, gravity pulls the mass down. This system behaves like a force
    holding the box up, so an accelerometer registers an upward force. We can use
    this measurement to determine what the downward direction is and sense the tilt
    of a robot.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在地球上，重力将质量向下拉。这个系统表现得像一个力，将盒子向上推，因此加速度计会记录一个向上的力。我们可以使用这个测量来确定向下方向是什么，并感知机器人的倾斜。
- en: The accelerometer vector is an absolute orientation (see the *Absolute and relative
    sensing* section in [*Chapter 6*](B18001_06.xhtml#_idTextAnchor115), *Measuring
    Movement With Encoders on Raspberry Pi Pico*) for up. Still, other movements cause
    noise, so it is usually put through a low pass filter, only changing a setting
    by a percentage of the actual variation. This filter makes the output slow but
    stable.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 加速度计矢量是向上的绝对方向（参见[*第6章*](B18001_06.xhtml#_idTextAnchor115)中的*绝对和相对传感*部分，*在Raspberry
    Pi Pico上使用编码器测量运动*），然而，其他运动会导致噪声，因此通常通过低通滤波器进行处理，只改变实际变化的百分比。这个滤波器使得输出变慢但更稳定。
- en: A controller can combine this data with other sensors for a faster and more
    stable measurement, such as a gyroscope.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 控制器可以将这些数据与其他传感器结合，以获得更快、更稳定的测量，例如使用陀螺仪。
- en: The gyroscope
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 陀螺仪
- en: 'A **gyroscope** measures the rotation speed of a system, typically in degrees
    or radians per second in an angle around each axis. A physical gyroscope model,
    shown as follows, can be used to help illustrate what it does:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '**陀螺仪**测量系统的旋转速度，通常是在每个轴周围的角速度，以每秒度或弧度表示。以下所示的一个物理陀螺仪模型可以用来帮助说明其作用：'
- en: '![Figure 12.2 – A model of a gyroscope ](img/Figure_12.02_B18001.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![图12.2 – 陀螺仪模型](img/Figure_12.02_B18001.jpg)'
- en: Figure 12.2 – A model of a gyroscope
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.2 – 陀螺仪模型
- en: The preceding figure shows a traditional gyroscope. This gyroscope has a spinning
    mass wheel in the middle, linked to concentric rings – each ring pivots in one
    direction – x, y, or *z*. The net effect is that when you move the handle, the
    spinning disk preserves its orientation. Sensors placed at the pivots would detect
    how much the system has rotated in each direction.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的图示展示了一个传统的陀螺仪。这个陀螺仪中间有一个旋转的质块轮，与同心的环形相连——每个环形在一个方向上旋转——x、y或*z*。总体效果是当你移动把手时，旋转的盘保持其方向。放置在支点处的传感器会检测系统在每个方向上旋转了多少。
- en: The MEMS version uses a tiny mass that’s moved back and forth in one direction.
    If the orientation is changed, the mass will continue vibrating in the original
    direction, which will change the electrical fields detected by the sensor. This
    movement in the original orientation appears to be a force known as the **Coriolis
    force**. The gyroscope can measure the magnitude of this force.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: MEMS版本使用一个在单一方向来回移动的小质量。如果方向改变，质量将继续在原始方向上振动，这将改变传感器检测到的电场。这种在原始方向上的运动看起来像是一种称为**科里奥利力**的力。陀螺仪可以测量这种力的强度。
- en: 'It’s essential to understand the directions of the gyroscope and how the measurements
    relate to time. See the following diagram:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 理解陀螺仪的方向以及测量如何与时间相关是至关重要的。参见以下图示：
- en: '![Figure 12.3 – Gyroscope directions and problems with integrating it ](img/Figure_12.03_B18001.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![图12.3 – 陀螺仪方向和积分问题](img/Figure_12.03_B18001.jpg)'
- en: Figure 12.3 – Gyroscope directions and problems with integrating it
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.3 – 陀螺仪方向和积分问题
- en: The left-hand side of the preceding diagram shows the three gyroscope rotations
    and the coordinate systems that the IMU uses. This coordinate system takes the
    robot into account. Traditionally, the front of the robot is in the positive X
    direction. Straight up is positive Z, and to the robot’s left is positive Y. Rotation
    around the *z* axis is known as **heading** (also known as yaw), rotation around
    the y axis is pitch, and rotation around the x axis is roll. This combination
    of three angles to determine orientation is known as **Euler** (pronounced *oil-er*
    angles).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 前面图表的左侧显示了三个陀螺仪旋转和IMU使用的坐标系。这个坐标系考虑了机器人。传统上，机器人的前方是正X方向。直上是正Z，机器人左侧是正Y。绕z轴的旋转被称为**航向**（也称为偏航），绕y轴的旋转是俯仰，绕x轴的旋转是滚转。这三个角度的组合用来确定方向被称为**欧拉**（发音为
    *oil-er* 角度）。
- en: The right-hand side of the diagram shows how a controller can use gyroscope
    data – it represents a relative change in angle or a speed in angle change over
    time. We can convert this into a new angle, but that is estimated. Multiplying
    this by time and adding them can give us a whole rotation relative to the starting
    position, but this will magnify any estimation or reading errors.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 图表的右侧显示了控制器如何使用陀螺仪数据——它表示角度或角度变化速度随时间的变化相对变化。我们可以将其转换为新的角度，但这只是估计。将此乘以时间并将它们相加可以给出相对于起始位置的整体旋转，但这将放大任何估计或读数错误。
- en: A controller should combine this with other sensors, where the gyroscope can
    provide a fast relative measurement, and the other sensor can provide a slower
    absolute measurement. However, the accelerometer cannot measure the heading. For
    that, we need a magnetometer.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 控制器应该将此与其他传感器结合使用，其中陀螺仪可以提供快速的相关测量，而其他传感器可以提供较慢的绝对测量。然而，加速度计无法测量航向。为此，我们需要磁力计。
- en: The magnetometer
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 磁力计
- en: 'A **magnetometer** is sensitive to magnetic fields. It passes electricity through
    a material that creates current when exposed to a magnetic field, as shown here:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '**磁力计**对磁场敏感。它通过一个材料传递电流，当暴露在磁场中时，该材料会产生电流，如图所示：'
- en: '![Figure 12.4 – Diagram of a hall-effect sensor ](img/Figure_12.04_B18001.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![图12.4 – 横效应传感器的示意图](img/Figure_12.04_B18001.jpg)'
- en: Figure 12.4 – Diagram of a hall-effect sensor
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.4 – 横效应传感器的示意图
- en: 'The preceding figure shows an example of detecting magnetic fields in action:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的图显示了检测磁场作用的一个例子：
- en: The circuit passes an electric current from a source through a conducting plate
    (the gray rectangle). The arrows show the flow of electrons (negative charge carriers)
    moving around the circuit from the top of the plate downwards. The small circle
    with a V measures electrical flow across the sides of the plate. Currently, this
    reads `0` as the flow is straight down.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 电路从源通过一个导电板（灰色矩形）传递电流。箭头显示了电子（负电荷载体）从板的顶部向下移动的流动。带有V的小圆圈测量板侧面的电流。目前，这读数为`0`，因为电流是直线下行的。
- en: When we place a magnet above the plate, it deflects electrons to one side. This
    deflection creates a small electric flow through the measuring circuit and will
    show a reading above `0` on the sensor.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当我们在板子上方放置磁铁时，它会将电子偏转到一侧。这种偏转在测量电路中产生微小的电流，并在传感器上显示高于`0`的读数。
- en: When we place a magnet below the plate, this deflects the electrons to the other
    side, creating a small sensor flow in the other direction, and show a reading
    below 0.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当我们在板子下方放置磁铁时，这会使电子偏转到另一侧，在另一方向上产生微小的传感器电流，并显示低于0的读数。
- en: This sensor method is known as the **Hall effect**. By measuring three plates,
    you can sense magnetic fields in three dimensions.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这种传感器方法被称为**霍尔效应**。通过测量三个板，你可以感知三维空间中的磁场。
- en: The great thing is that we can use this to sense the Earth’s magnetic field
    and magnetic North, although it can be deflected by magnets in objects around
    the magnetometer. Being able to sense magnetic North makes it a great way to sense
    heading.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 了不起的是，我们可以使用它来感知地球的磁场和磁北极，尽管它可能被磁力计周围的物体中的磁铁所偏转。能够感知磁北极使其成为感知航向的一种很好的方式。
- en: Because it is subject to other magnets, it can be noisy and may need a low pass
    filter, but you can pair it with the gyroscope the same way the accelerometer
    is paired.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 由于它受到其他磁铁的影响，可能会产生噪声，可能需要低通滤波器，但你可以像加速度计配对一样与陀螺仪配对。
- en: Now that you’ve seen the four sensor types that go into an IMU, we can look
    at how we choose one.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经看到了进入IMU的四种传感器类型，我们可以看看我们如何选择一个。
- en: Choosing an IMU module
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选择IMU模块
- en: There are several IMU devices on the market. The first thing to note is that
    you want a module or breakout, not a bare chip (at least not yet).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 市场上有多款IMU（惯性测量单元）设备。首先要注意的是，你想要的是一个模块或分线板，而不是裸芯片（至少目前不是）。
- en: The number of directions/movements an IMU system can sense is known as **degrees
    of freedom**, or **DOF**. A system with all three types of sensors is known as
    a 9-DOF because each can produce three axes worth of information. The temperature
    sensor isn’t counted in this DOF count usually.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: IMU系统可以感知的方向/动作数量被称为**自由度**，或**DOF**。拥有所有三种类型传感器的系统被称为9-DOF，因为每种传感器都可以产生三个轴的信息。温度传感器通常不计入这个自由度计数中。
- en: 'These modules come in a few flavors. The following diagram illustrates these
    flavors:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这些模块有多种类型。以下图表说明了这些类型：
- en: '![Figure 12.5 – IMU module integration levels ](img/Figure_12.05_B18001.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![图12.5 – IMU模块集成级别](img/Figure_12.05_B18001.jpg)'
- en: Figure 12.5 – IMU module integration levels
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.5 – IMU模块集成级别
- en: 'The preceding diagram shows three different IMU module integration levels.
    They are as follows:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表显示了三种不同的IMU模块集成级别。具体如下：
- en: The simplest has only one of the sensors, and you need to buy three to get the
    complete orientation. In addition, they do not have much helper circuitry.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最简单的是只有一个传感器，你需要购买三个才能获得完整的方向。此外，它们没有多少辅助电路。
- en: Some modules integrate three or four separate sensor chips to give the full
    9-DOF and could be suitable. These have some support circuitry but might not have
    a controller.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一些模块集成了三到四个独立的传感器芯片，以提供完整的9-DOF，可能适合使用。这些模块有一些支持电路，但可能没有控制器。
- en: The devices we will focus on are those based around a single chip that combines
    the sensors. These come as modules that integrate power and any additional required
    components (such as small resistors and capacitors). These have onboard controllers.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将关注的设备是基于单个芯片的传感器组合。这些作为模块提供，集成了电源和任何其他所需组件（如小型电阻和电容器）。这些模块具有板载控制器。
- en: They can also use a few different data buses to communicate. UART and SPI tie
    up a whole set of pins; however, I2C allows the device to share a bus with other
    sensors, so we’ll favor I2C devices.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 它们还可以使用几种不同的数据总线进行通信。UART和SPI会占用一整套引脚；然而，I2C允许设备与其他传感器共享总线，因此我们将优先考虑I2C设备。
- en: The next factor in integration is how much calculation the device’s controller
    can do (if any). The algorithms to combine all three sensors and account for calibration,
    along with temperature, are complicated. Some devices can perform this on board,
    and some require it on another controller or require specialist code to be uploaded
    to activate the calculation (such as MPU and ICM TDK series). We will also favor
    modules that can do the calculation on board.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 集成中的下一个因素是设备控制器可以执行多少计算（如果有）。结合所有三个传感器、考虑校准以及温度的算法很复杂。一些设备可以在板上执行此操作，而一些则需要在其他控制器上执行或在另一个控制器上上传专门的代码以激活计算（例如MPU和ICM
    TDK系列）。我们还将优先考虑可以在板上进行计算的模块。
- en: The BNO055 module is a good fit for these requirements. The BNO055 combines
    all 9-DOF, a temperature sensor, works over I2C, and has calculations and calibration
    on board, saving us writing that code on our Raspberry Pi Pico. They are also
    widely available, with Adafruit selling them in two variations, and there’s direct
    CircuitPython support for them.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: BNO055模块非常适合这些要求。BNO055集成了所有9-DOF、温度传感器，通过I2C工作，并在板上进行计算和校准，这样我们就不需要在Raspberry
    Pi Pico上编写那段代码了。它们也非常容易获得，Adafruit以两种变体出售它们，并且有直接的CircuitPython支持。
- en: Let’s look at how we can use a BNO055 module with our robot.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何使用BNO055模块与我们的机器人配合。
- en: Connecting the IMU to the robot
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将IMU连接到机器人
- en: Installing the BNO055 requires performing a few steps. In this section, we’ll
    prepare the module, attach it to the robot rigidly, wire the part into the circuit,
    and then use some simple code to test that it is responding.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 安装BNO055需要执行几个步骤。在本节中，我们将准备模块，将其牢固地连接到机器人上，将部分电路连接到电路中，然后使用一些简单的代码来测试它是否响应。
- en: Preparing the BNO055
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备BNO055
- en: The BNO055 from Adafruit comes without the headers attached. You’ll need to
    solder the headers in, as we have done previously. Adafruit has a guide for this
    at [https://learn.adafruit.com/adafruit-bno055-absolute-orientation-sensor/assembly](https://learn.adafruit.com/adafruit-bno055-absolute-orientation-sensor/assembly).
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: Adafruit提供的BNO055没有附带引脚。你需要像我们之前做的那样焊接引脚。Adafruit有一个指南[https://learn.adafruit.com/adafruit-bno055-absolute-orientation-sensor/assembly](https://learn.adafruit.com/adafruit-bno055-absolute-orientation-sensor/assembly)。
- en: For this robot, you should solder this part with the headers facing up from
    the component side.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个机器人，你应该将这部分焊接在从元件侧向上的引脚上。
- en: Attaching the BNO055
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 固定BNO055
- en: 'To attach the part to the robot, see the following diagram:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 要将部件固定到机器人上，请参阅以下图示：
- en: '![Figure 12.6 – Drawing of the shelf with additional holes for the BNO055 module
    ](img/Figure_12.06_B18001.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![图12.6 – 带有BNO055模块额外孔的货架绘图](img/Figure_12.06_B18001.jpg)'
- en: Figure 12.6 – Drawing of the shelf with additional holes for the BNO055 module
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.6 – 带有BNO055模块额外孔的货架绘图
- en: You will need to attach the IMU rigidly to the robot, so the velcro pad will
    not be sufficient. Stand-offs will make a suitable attachment here. The preceding
    figure shows where to make some 2.5 mm holes in the shelf in the highlighted area.
    You can insert M2 (or M2.5 if you have them) stand-offs to attach it. You can
    use stand-offs to gain some separation between the IMU and the metal or magnetic
    parts of the robot.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要将IMU牢固地固定在机器人上，因此魔术贴垫不足以固定。支架将是一个合适的附件。前面的图显示了在突出区域打一些2.5毫米孔的位置。你可以插入M2（或如果你有M2.5的话）支架来固定它。你可以使用支架在IMU和机器人的金属或磁性部件之间获得一些间隔。
- en: 'You may need to adapt this to the BNO breakout you have. The following figure
    shows the part I am using and the orientation it should be in:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能需要根据你拥有的BNO断路器进行适配。以下图显示了我在使用的部件及其应该处于的朝向：
- en: '![Figure 12.7 – The BNO055 part’s orientation ](img/Figure_12.07_B18001.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![图12.7 – BNO055部件的朝向](img/Figure_12.07_B18001.jpg)'
- en: Figure 12.7 – The BNO055 part’s orientation
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.7 – BNO055部件的朝向
- en: I’ve made the holes so that they suit the part shown in the preceding figure.
    This figure shows the part with the robot chassis as a reference, with the x,
    y, and z axes indicated with arrows. The z in a circle means it runs through this
    diagram, with the upward direction being positive.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我已经打好了孔，以便它们适合前面图中显示的部件。这张图显示了带有机器人底盘的部件，并用箭头标出了x、y和z轴。圆圈中的z表示它穿过这张图，向上方向为正。
- en: We mount the BNO055 so that its x axis faces the front of the robot. This is
    due to the BNO055 defaulting to the Android phone orientation – a minor quirk
    of the configuration of this module.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将BNO055安装得使其x轴面向机器人的前方。这是因为BNO055默认为Android手机方向 – 这是该模块配置的一个小怪癖。
- en: While the orientation of this part matters, it can be compensated for in code.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这个部件的朝向很重要，但可以在代码中进行补偿。
- en: Let’s see how to wire in this part.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何连接这部分。
- en: Wiring the BNO055 to Raspberry Pi Pico
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将BNO055连接到Raspberry Pi Pico
- en: 'We will wire the BNO055 using I2C. See the following circuit diagram for details:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用I2C连接BNO055。有关详细信息，请参阅以下电路图：
- en: '![Figure 12.8 – BNO055 I2C wiring ](img/Figure_12.08_B18001.jpg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![图12.8 – BNO055 I2C连接](img/Figure_12.08_B18001.jpg)'
- en: Figure 12.8 – BNO055 I2C wiring
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.8 – BNO055 I2C连接
- en: The top part of the preceding diagram shows the whole circuit diagram. Since
    a lot is happening here, the highlighted region has been zoomed in below, showing
    the specific wiring. The BNO055 only needs four pins connected. It has power connections
    for GND and Vin from the 3V3 lines. The SCL and SDA are connected to I2C0, sharing
    an I2C bus with one of the distance sensors.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 前面图的顶部显示了整个电路图。由于这里发生了很多事情，下面的突出区域已经放大，显示了具体的连接。BNO055只需要连接四个引脚。它有GND和Vin的电源连接，来自3V3线。SCL和SDA连接到I2C0，与一个距离传感器共享I2C总线。
- en: Now that the BNO055 is wired in, let’s try talking to it.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 现在BNO055已经连接好了，让我们试着与之通信。
- en: Setting up the software and connecting
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置软件和连接
- en: The CircuitPython library includes an `adafruit_BNO055` module for use with
    this device. Copy over or use `adafruit_bus_device` and `adafruit_register` modules
    to be installed.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: CircuitPython库包含一个`adafruit_BNO055`模块，用于与该设备一起使用。复制或使用`adafruit_bus_device`和`adafruit_register`模块进行安装。
- en: 'You can now write some code to check if we can get data from the device. I
    suggest putting the following code in `bno_connect/code.py`:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在可以编写一些代码来检查我们是否能从设备获取数据。我建议将以下代码放入`bno_connect/code.py`：
- en: '[PRE0]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The code starts with imports. It then creates an I2C bus with the correct pins
    and constructs the sensor control object on this bus.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 代码从导入开始。然后使用正确的引脚创建一个I2C总线，并在该总线上构建传感器控制对象。
- en: The last line fetches the temperature from the sensor and prints it to serial.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一行从传感器获取温度并将其打印到串行端口。
- en: 'Send this to Raspberry Pi Pico as `code.py`; it should show the temperature
    on the serial, as follows:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 将此作为`code.py`发送到Raspberry Pi Pico；它应该在串行端口上显示温度，如下所示：
- en: '[PRE1]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Great! You have now obtained data from the IMU. Before exploring more of the
    available features, let’s troubleshoot any problems.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 太好了！你现在已经从IMU获取了数据。在探索更多可用功能之前，让我们排查任何问题。
- en: Troubleshooting
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 故障排除
- en: If you don’t see the temperature output (or see errors instead), verify the
    connections carefully. Start by powering down the robot, and carefully check the
    power goes to 3V3, then that GND goes to ground.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有看到温度输出（或者看到错误），请仔细检查连接。首先关闭机器人的电源，并仔细检查电源是否连接到3V3，然后检查GND是否连接到地。
- en: If these look correct, verify the SCL and SDA lines – swapping these lines is
    a common issue. You can then power the robot again, and you should be able to
    read the temperature.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这些看起来是正确的，请验证SCL和SDA线 - 交换这些线是一个常见问题。然后你可以再次给机器人供电，你应该能够读取温度。
- en: With that, you have connected to the IMU. Now, let’s learn how to get robot
    orientation information from this sensor.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，你就已经连接到了IMU。现在，让我们学习如何从该传感器获取机器人姿态信息。
- en: Calibrating and getting readings
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 校准和获取读数
- en: When you start up code using an IMU module with a controller, the sensors will
    not get correct readings. So, the IMU module will need to determine the sensitivity
    and correct states of the sensor, a process known as **calibration**. First, we
    need some code; then, we’ll need to take the robot through some motions to perform
    this.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 当你使用带有控制器的IMU模块启动代码时，传感器将无法获得正确的读数。因此，IMU模块需要确定传感器的灵敏度和正确状态，这个过程称为**校准**。首先，我们需要一些代码；然后，我们需要让机器人进行一些动作以执行此操作。
- en: Calibration code
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 校准代码
- en: 'Let’s start with the code. In a file called `imu_calibration/code.py`, add
    the following:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从代码开始。在一个名为`imu_calibration/code.py`的文件中，添加以下内容：
- en: '[PRE2]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This code handles importing the module and setting it up. We also import `time`
    so that we can use it in loops later.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码处理导入模块和设置。我们还导入`time`，以便我们可以在循环中使用它。
- en: 'Next, we must check the calibration state of the module:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们必须检查模块的校准状态：
- en: '[PRE3]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This code will print the calibration status for each part of the BNO055\. The
    BNO055 can self-calibrate when turned on; however, the user needs to make motions
    with it to help. The `calibration_status` register holds what parts of the system
    you have calibrated. The system status is important for our purposes, but each
    device has its own status. Each can go from state `0` (uncalibrated) to state
    `3` (fully calibrated). When you have calibrated them, the system is ready to
    use. This code will print them out. We’ll use this to perform the calibration
    process motions.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码将打印BNO055每个部分的校准状态。BNO055在开启时可以自我校准；然而，用户需要使用它进行动作以帮助。`calibration_status`寄存器保存了您已校准的系统部分。系统状态对我们来说很重要，但每个设备都有自己的状态。每个设备可以从状态`0`（未校准）到状态`3`（完全校准）。当你校准它们后，系统就准备好使用了。此代码将打印它们。我们将使用它来执行校准过程动作。
- en: 'We can check this in a loop:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在循环中检查：
- en: '[PRE4]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Once we’ve calibrated it, we can check the data from all the sensors and the
    controller itself:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦校准完成，我们就可以检查所有传感器和控制器本身的数据：
- en: '[PRE5]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This code will pull all the sensor data and ask the controller to convert the
    accelerometer, magnetometer, and gyroscope data into **Euler** absolute orientation.
    The code puts this into a dictionary so that when we print it, it will appear
    labeled.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码将拉取所有传感器数据，并要求控制器将加速度计、磁力计和陀螺仪数据转换为**欧拉**绝对姿态。代码将这些数据放入字典中，以便当我们打印时，它们将带有标签。
- en: We can upload this code and start the calibration process, watching the numbers
    in the calibration status. Let’s use it to calibrate.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以上传此代码并开始校准过程，观察校准状态的数字。让我们用它来校准。
- en: The calibration process
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 校准过程
- en: The following movements might look bizarre, but the IMU module is trying to
    determine the relative motions for each sensor. Then, with the hold postures,
    it is looking at absolute states. With the magnetometer, there will be offsets
    and distortions due to the metal on board the robot. The sensor looks for magnetic
    field changes and the extent in each direction, which it can use to account for
    the distortions.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 以下动作可能看起来很奇怪，但IMU模块正在尝试确定每个传感器的相对运动。然后，通过保持姿势，它正在观察绝对状态。由于机器人上的金属，磁力计会有偏移和扭曲。传感器寻找磁场的变化和每个方向的程度，它可以利用这些来补偿扭曲。
- en: Beware of calibrating near strong magnetic fields such as a laptop – they can
    make the magnetometer calibration incorrect.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 小心在强磁场附近校准，如笔记本电脑 – 它们可以使磁力计校准不正确。
- en: 'Use the following figure to help the IMU complete its calibration:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下图示帮助IMU完成校准：
- en: '![Figure 12.9 – IMU calibration steps ](img/Figure_12.09_B18001.jpg)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![图12.9 – IMU校准步骤](img/Figure_12.09_B18001.jpg)'
- en: Figure 12.9 – IMU calibration steps
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.9 – IMU校准步骤
- en: 'The preceding figure shows the calibration steps. Use a hold time of at least
    2 seconds and slow motions for the following steps:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的图示显示了校准步骤。以下步骤至少保持2秒的保持时间，并缓慢移动：
- en: Start with the robot on a flat surface and hold. This position will set up the
    gyroscope.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从机器人放在平坦表面上并保持开始。这个位置将设置陀螺仪。
- en: Make a small, slow figure of 8 motion a few times to calibrate the magnetometer.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 做几次小的、缓慢的8字形运动来校准磁力计。
- en: Hold the robot on its back, then on its front.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将机器人放在背部，然后放在前方。
- en: Then, hold the robot on its left, then on its right.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，将机器人放在左侧，然后放在右侧。
- en: Hold the robot upside down; you should see the accelerometer status reach 3.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将机器人倒置；你应该能看到加速度计状态达到3。
- en: Now, rest it back the right way up. You should be able to see the system status
    reach 3.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，将其放回正确的方向。你应该能看到系统状态达到3。
- en: This calibration may take a few attempts and can get stuck on the accelerometer
    sometimes; however, the experiments can continue if the system status reaches
    3 without the accelerometer.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 这种校准可能需要几次尝试，有时可能会卡在加速度计上；然而，如果系统状态达到3而没有加速度计，实验也可以继续。
- en: When you have the system status at 3, the demonstration will start printing
    data from all four sensors and combine sensor data into Euler angles. With the
    robot standing, roll and pitch should be `0`. Turning the robot to face North
    should set the heading to `0` too.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 当系统状态达到3时，演示将开始打印来自所有四个传感器的数据，并将传感器数据组合成欧拉角。当机器人站立时，滚转和俯仰应该为`0`。将机器人转向面向北方也应将航向设置为`0`。
- en: We can now use this with a PID controller to make the robot always face North.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以使用PID控制器使机器人始终面向北方。
- en: Always face North behavior
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总是面向北方行为
- en: We’ll build a behavior with a heading as a set point for a PID and the IMU Euler
    heading as feedback. The error value between these will be how far, in degrees,
    the robot is facing away from the North heading. For example, a heading of `0`
    should be North – note that you could pick another heading as needed. We will
    use the PID output to control the motor movements, with the output adding to the
    speed of one motor and subtracting from the other, producing a turn.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将构建一个行为，其中航向作为PID的设定点，IMU欧拉航向作为反馈。这些之间的误差值将表示机器人相对于北方航向偏离的角度。例如，航向为`0`应该是北方
    – 注意，你可以根据需要选择另一个航向。我们将使用PID输出控制电机运动，输出加到某个电机的速度上，从另一个电机中减去，产生转向。
- en: 'Let’s see how this looks as a block diagram:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这作为一个块图看起来如何：
- en: '![Figure 12.10 – Face North behavior block diagram ](img/Figure_12.10_B18001.jpg)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![图12.10 – 面向北方行为块图](img/Figure_12.10_B18001.jpg)'
- en: Figure 12.10 – Face North behavior block diagram
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.10 – 面向北方行为块图
- en: The preceding diagram shows the flow of data. The `dt` (delta time) are the
    inputs to the PID. The output from the PID, the **control signal**, is added for
    one motor and subtracted for the other. The motors then result in robot movement,
    which causes the IMU heading to change, feeding back into the error value.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的图示展示了数据的流向。`dt`（时间增量）是PID的输入。PID的输出，即**控制信号**，对一个电机是加法，对另一个电机是减法。电机随后导致机器人移动，这会引起IMU航向的变化，并反馈到误差值中。
- en: We can now use this block diagram to build the code for this behavior.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以使用这个块图来构建这个行为的代码。
- en: CircuitPython code for the face North behavior
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 面向北方行为的CircuitPython代码
- en: 'We can now build the code for this behavior. We’ll start by putting the IMU
    initialization in `robot.py`. Add the following to the imports at the top of `robot.py`:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以构建这个行为的代码。我们将从在`robot.py`中放置IMU初始化开始。在`robot.py`顶部的导入中添加以下内容：
- en: '[PRE6]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Since the distance sensors already use the I2C bus, we can use the same initialized
    I2C bus for the BNO055:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 由于距离传感器已经使用了I2C总线，我们可以使用相同的初始化I2C总线来为BNO055服务：
- en: '[PRE7]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The IMU will be available from `robot.py` once this has loaded. We can also
    add the `check_status` calibration function to `robot.py` so that we can use that
    in other behaviors:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦加载，IMU将从`robot.py`中可用。我们还可以将`check_status`校准函数添加到`robot.py`中，以便在其他行为中使用：
- en: '[PRE8]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The changes to `robot.py` for this section are complete.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这一部分，对`robot.py`的更改已完成。
- en: 'We will need a new file for the behavior, which I suggest placing in `face_north/code.py`.
    We’ll start with the imports:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要一个新文件来存放这个行为，我建议将其放在`face_north/code.py`中。我们将从导入开始：
- en: '[PRE9]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We will then make a controller class for always facing North. It starts by
    defining the target as `0` for North and setting up a PID controller:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将创建一个始终面向北方的控制器类。它首先将目标定义为`0`（北方）并设置PID控制器：
- en: '[PRE10]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The code here calls the `update` method with an `angle` and a delta time (`dt`).
    First, it will calculate the error in degrees. The method then checks the error
    in the range of -180 to 180 degrees. Otherwise, a robot at 359 degrees (-1 degrees
    from North) will turn a full circle to adjust itself, and any overshoot would
    result in unusable behavior.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 这里代码调用了一个带有`angle`和delta时间(`dt`)的`update`方法。首先，它会计算角度误差。然后，该方法会检查误差是否在-180到180度的范围内。否则，一个在359度（北方向北1度）的机器人将转一圈来自我调整，任何超调都会导致不可用的行为。
- en: Then, we pass `error` and `dt` into the PID `calculate` method and send the
    resulting control signals to the motors.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将`error`和`dt`传递给PID的`calculate`方法，并将产生的控制信号发送到电机。
- en: 'We can now have an `async` task to manage this controller and read the sensor
    data in a loop:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以有一个`async`任务来管理这个控制器并在循环中读取传感器数据：
- en: '[PRE11]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '`control_loop` creates an instance of our `FaceNorthController` shown previously.
    It sleeps and manages the delta time, `dt`. Next, it reads the angle from the
    sensor’s `euler` data and passes this to the `update` method. Finally, this method
    logs the angle through Bluetooth so that we can plot it.'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '`control_loop`创建了一个之前显示的`FaceNorthController`实例。它休眠并管理delta时间`dt`。接下来，它从传感器的`euler`数据中读取角度并将其传递给`update`方法。最后，该方法通过蓝牙记录角度，以便我们可以绘制它。'
- en: 'Now, we can make our `main` async function:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以创建我们的`main`异步函数：
- en: '[PRE12]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This part will start a calibration/status loop and print it via Bluetooth when
    the robot is ready. Because we don’t want the robot to start trying to drive out
    of your hands, we will make it wait for a start signal from Bluetooth:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 这部分将启动校准/状态循环，并在机器人准备就绪时通过蓝牙打印出来。因为我们不希望机器人试图从你的手中开走，所以我们将让它等待蓝牙的启动信号：
- en: '[PRE13]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The user will see `start` to make the robot move. The code then starts the `control_loop`
    part.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 用户将看到`start`来使机器人移动。然后代码启动`control_loop`部分。
- en: 'Finally, we can start everything up by starting the `main` task:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以通过启动`main`任务来启动一切：
- en: '[PRE14]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: You should be able to send this to the robot and calibrate it. Then, when you
    instruct it to start, the robot will turn to face North.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该能够将其发送到机器人并对其进行校准。然后，当你指示它开始时，机器人将转向面向北方。
- en: Troubleshooting
  id: totrans-172
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 故障排除
- en: The robot may be turning to an angle that is not North. The common reason for
    this is that there is a strong magnetic field where you are testing or calibrating
    the robot. In some situations, I have found that I’ve had to turn a sensor 90
    degrees for it to work.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 机器人可能正在转向一个不是北方的角度。这种情况的常见原因是测试或校准机器人的地方存在强烈的磁场。在某些情况下，我发现我不得不将传感器旋转90度才能使其工作。
- en: If the robot is overshooting, try reducing the `P` value. If it is taking a
    while to hunt out the actual value, increase the I value a little. I have found
    that the `D` value doesn’t help in this situation.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 如果机器人超调，尝试减小`P`值。如果它需要一段时间才能找到实际值，可以稍微增加`I`值。我发现在这种情况下`D`值没有帮助。
- en: Now that we know how to face one way, can we use this to make a fixed turn in
    any direction? Let’s see.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道了如何面向一个方向，我们能否使用这个方法在任何方向上创建一个固定的转向？让我们看看。
- en: Making a known turn behavior
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建已知的转向行为
- en: The known turn behavior is a variation of the always face North behavior. The
    idea is to measure the angle at the start of the turn and then make the set point
    the new intended angle.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 已知转向行为是始终面向北方行为的变体。想法是在转向开始时测量角度，然后将设定点设置为新的预期角度。
- en: We’ll make it so that the whole app will accept a difference in the intended
    angle, offsetting the last intended angle, with the whole app starting based on
    the robot’s current heading. The user can send `+30` to turn 30 degrees and `-90`
    to rotate 90 degrees back.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使整个应用程序接受预期角度的差异，偏移最后一个预期角度，整个应用程序基于机器人的当前航向开始。用户可以发送`+30`来转向30度，发送`-90`来旋转90度回转。
- en: 'The block diagram is exactly as before, as we only need to manipulate the expected
    heading. Make a copy of `face_north` in a folder called `known_turn`. Let’s rename
    the controller `IMUTurnController`:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 块图与之前完全相同，因为我们只需要操纵期望的航向。在名为`known_turn`的文件夹中复制`face_north`。让我们将控制器重命名为`IMUTurnController`：
- en: '[PRE15]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The `update` method doesn’t change, as shown here:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '`update` 方法没有改变，如下所示：'
- en: '[PRE16]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'We will need an additional Bluetooth `command_handler` for accepting user input
    for the intended angle. Add the following code:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要一个额外的蓝牙`command_handler`来接受用户输入的预期角度。添加以下代码：
- en: '[PRE17]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This handler sets the target (set point) of `turn_controller` for dealing with
    positive and negative number settings.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 此处理程序设置`turn_controller`的目标（设定点）以处理正负数设置。
- en: 'We can now integrate these into a modified `control_loop`:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以将这些集成到修改后的`control_loop`中：
- en: '[PRE18]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: This control loop sets the controller target as the current robot’s heading
    instead of `0`. It will also create the command handler async task with the controller
    as a parameter.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 此控制循环将控制器目标设置为当前机器人的航向而不是`0`。它还将创建一个带有控制器作为参数的命令处理程序异步任务。
- en: The loop is the same as what we saw previously.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 循环与之前看到的一样。
- en: 'The `main` method for this gets to be much simpler as the robot will not move
    until we ask it to:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个`main`方法来说，它将变得更加简单，因为机器人将不会移动，直到我们要求它这样做：
- en: '[PRE19]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Send this to the robot and calibrate it. Then, when you see **Ready to go**
    on Bluetooth, you can send back an angle to turn.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 将此发送到机器人并对其进行校准。然后，当你在蓝牙上看到**Ready to go**时，你可以发送一个角度来进行转向。
- en: The same troubleshooting steps apply as before.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 与之前相同的故障排除步骤适用。
- en: Try `30`, `45`, `60`, and `90`, or small values such as `5` and `10` degrees.
    Do not go above `179` or `-179`, as this can cause the robot to spin until turned
    off. You could add code to limit this.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试`30`、`45`、`60`和`90`，或者像`5`和`10`度这样的小值。不要超过`179`或`-179`，因为这可能导致机器人旋转直到关闭。你可以添加代码来限制这一点。
- en: It can be helpful to store the error in `IMUTurnController` (as `self.error`)
    and plot this data instead of the angle for tuning the PID.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 将错误存储在`IMUTurnController`（作为`self.error`）中并绘制这些数据，而不是角度来调整PID，可能会有所帮助。
- en: You can now make a known turn.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在可以进行已知转向。
- en: Summary
  id: totrans-197
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we investigated the IMU and how we can use it to control the
    heading of our robot. We learned how to connect the device and calibrate it.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们研究了IMU以及我们如何使用它来控制机器人的航向。我们学习了如何连接设备并对其进行校准。
- en: Then, we used data from it to face North by combining the sensor data with a
    PID controller. Finally, we built on this example so that it can turn a specified
    number from the current heading.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们通过将传感器数据与PID控制器相结合来面对北方。最后，我们在此基础上构建，使其可以从当前航向转向指定的角度。
- en: In the next chapter, we will build a small arena for the robot and look at how
    we can combine the encoders and distance sensors to estimate the robot’s position
    within this arena, improving its estimation as it moves.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将为机器人构建一个小型竞技场，并探讨我们如何将编码器和距离传感器结合起来，以估计机器人在竞技场内的位置，并在其移动过程中提高其估计。
- en: Exercises
  id: totrans-201
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习
- en: 'These exercises will deepen your understanding of the topics that were covered
    in this chapter and make the robot code better:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 这些练习将加深你对本章所涵盖主题的理解，并使机器人代码更好：
- en: Combining the preceding behaviors with the menu system for the UART we’ve seen
    in previous chapters would allow you to tune the PID with the robot running.
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将前面的行为与我们在前几章中看到的UART菜单系统相结合，将允许你在机器人运行时调整PID。
- en: Could you use the known turn behavior and straight-line behavior to write a
    better version of the planned path program from [*Chapter 5*](B18001_05.xhtml#_idTextAnchor098),
    *Driving Motors with Raspberry* *Pi Pico*?
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你能否使用已知的转向行为和直线行为，从[*第五章*](B18001_05.xhtml#_idTextAnchor098)，*使用Raspberry Pi
    Pico驱动电机*编写一个更好的路径规划程序版本？
- en: Experiment with the Euler heading reading – after calibrating, see how the readings
    change when you bring the robot near objects such as a laptop or kitchen appliances.
    This experiment will demonstrate a weakness with this kind of sensor.
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尝试实验欧拉航向读数 - 在校准后，看看当您将机器人靠近如笔记本电脑或厨房电器等物体时，读数如何变化。这个实验将展示这类传感器的一个弱点。
- en: An advanced experiment would be to extract the quaternion (instead of Euler
    data) and write this to the UART.
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个高级实验将是提取四元数（而不是欧拉数据）并将其写入UART。
- en: Further reading
  id: totrans-207
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'These further study aids will help you learn more and dive deeper into the
    PID algorithm and its quirks:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 这些进一步的学习辅助工具将帮助您学习更多，并深入了解PID算法及其特性：
- en: 'The Adafruit CircuitPythong API guide for the BNO055 shows what else you can
    do with this sensor: [https://docs.circuitpython.org/projects/bno055/en/latest/api.html](https://docs.circuitpython.org/projects/bno055/en/latest/api.html)
    - BNO055.'
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Adafruit CircuitPython API指南针对BNO055展示了您可以使用此传感器做什么：[https://docs.circuitpython.org/projects/bno055/en/latest/api.html](https://docs.circuitpython.org/projects/bno055/en/latest/api.html)
    - BNO055。
- en: '*Learn Robotics Programming* provides a guide for interfacing a Raspberry Pi
    device with a different IMU chip, the ICM90248, and writing code to calculate
    Euler angles, along with interesting ways to visualize this. It also shows how
    you can use encoders to make a known turn instead, perhaps when objects distort
    the magnetometer readings.'
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*学习机器人编程* 提供了将Raspberry Pi设备与不同的IMU芯片ICM90248进行接口的指南，并编写代码计算欧拉角，以及一些有趣的可视化方法。它还展示了如何使用编码器来实现已知的转向，例如当物体扭曲磁力计读数时。'
- en: 'Paul McWhorter performs Arduino experiments with the same BNO055 sensor in
    an intensive video series: [https://toptechboy.com/arduino-based-9-axis-inertial-measurement-unit-imu-based-on-bno055-sensor/](https://toptechboy.com/arduino-based-9-axis-inertial-measurement-unit-imu-based-on-bno055-sensor/).'
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Paul McWhorter 在一个密集的视频系列中进行了Arduino实验，使用相同的BNO055传感器：[https://toptechboy.com/arduino-based-9-axis-inertial-measurement-unit-imu-based-on-bno055-sensor/](https://toptechboy.com/arduino-based-9-axis-inertial-measurement-unit-imu-based-on-bno055-sensor/)。
