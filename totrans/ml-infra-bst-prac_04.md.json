["```py\n# import the Keras library that contains the MNIST dataset\nfrom keras.datasets import mnist\n# load the dataset directly from the Keras website\n# and use the standard train/test splits\n(X_train, Y_train), (X_test, Y_test) = mnist.load_data()\n# import a Matplot library to plot the images\nfrom matplotlib import pyplot\n# plot first few images\nfor i in range(9):\n# define subplot to be 330 pixels wide\npyplot.subplot(330 + 1 + i)\n# plot raw pixel data\n   pyplot.imshow(X_train[i],\n                   cmap=pyplot.get_cmap('gray'))\n# show the figure\npyplot.show()\n```", "```py\nfrom keras.datasets import fashion_mnist\n(X_train, Y_train), (X_test, Y_test)=fashion_mnist.load_data()\n```", "```py\nfrom keras.datasets import cifar10\n# load dataset\n(X_train, Y_train), (X_test, Y_test)== cifar10.load_data()\n```", "```py\n# Create stopwords list:\nstopwords = set(STOPWORDS)\nstopwords.update([\"br\", \"href\"])\n# create text for the wordcloud\ntextt = \" \".join(review for review in dfRaw.Text)\n# generation of wordcloud\nwordcloud = WordCloud(stopwords=stopwords,\n                  max_words=100,\n                  background_color=\"white\").generate(textt)\n# showing the image\n# and saving it to the png file\nplt.figure(figsize = [12,9])\nplt.imshow(wordcloud, interpolation='bilinear')\nplt.axis(\"off\")\nplt.show()\n```", "```py\n# first we combine the title and the content of the review\ndf['combined'] = \"Title: \" + df.Summary.str.strip() + \"; Content: \" + df.Text.str.strip()\n# we define a function to get embeddings, to make the code more straightforward\ndef get_embedding(text, engine=\"text-similarity-davinci-001\"):\n   text = text.replace(\"\\n\", \" \")\n   return openai.Embedding.create(input = [text], engine=engine)['data'][0]['embedding']\n# and then we get embeddings for the first 5 rows\ndf['babbage_similarity'] = df.head(5).combined.apply(lambda x: get_embedding(x, engine='text-similarity-babbage-001'))\n```", "```py\nvoid main()\n{\n    Console.println(\"Hello World\");\n}\n```"]