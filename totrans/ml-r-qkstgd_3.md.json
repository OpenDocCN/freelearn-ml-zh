["```py\nclass(Model_database$ID_RSSD)\n\n ## [1] \"integer\"\n```", "```py\n classes<-as.data.frame(sapply(Model_database, class))\n classes<-cbind(colnames(Model_database),classes)\n colnames(classes)<-c(\"variable\",\"class\")\n```", "```py\nhead(classes)\n\n ##          variable   class\n ## ID_RSSD   ID_RSSD integer\n ## UBPR1795 UBPR1795 numeric\n ## UBPR4635 UBPR4635 numeric\n ## UBPRC233 UBPRC233 numeric\n ## UBPRD582 UBPRD582 numeric\n ## UBPRE386 UBPRE386 numeric\n```", "```py\ntable(classes$class)\n\n ## character      Date   integer   numeric\n ##       462         1         4      1027\n```", "```py\nclasses<-classes[classes$class==\"character\",]\n\nhead(classes)\n\n ##          variable     class\n ## UBPRE543 UBPRE543 character\n ## UBPRE586 UBPRE586 character\n ## UBPRE587 UBPRE587 character\n ## UBPRE594 UBPRE594 character\n ## UBPRFB64 UBPRFB64 character\n ## UBPRFB69 UBPRFB69 character\n```", "```py\naggregate(UBPRE543 ~ Date, data=Model_database, function(x) {sum(is.na(x))}, na.action = NULL)\n\n ##          Date UBPRE543\n ## 1  2002-12-31     1127\n ## 2  2003-12-31      954\n ## 3  2004-12-31      772\n ## 4  2005-12-31      732\n ## 5  2006-12-31      639\n ## 6  2007-12-31      309\n ## 7  2008-12-31      110\n ## 8  2009-12-31       98\n ## 9  2010-12-31       91\n ## 10 2011-12-31       76\n ## 11 2012-12-31      132\n ## 12 2013-12-31       98\n ## 13 2014-12-31       85\n ## 14 2015-12-31       89\n ## 15 2016-12-31       68\n```", "```py\ntable(Model_database$Date)\n\n ##\n ## 2002-12-31 2003-12-31 2004-12-31 2005-12-31 2006-12-31 2007-12-31\n ##       1127        954        772        732        639        652\n ## 2008-12-31 2009-12-31 2010-12-31 2011-12-31 2012-12-31 2013-12-31\n ##        686        671        587        533        664        615\n ## 2014-12-31 2015-12-31 2016-12-31\n ##        526        498        474\n```", "```py\n#database<-rbind(year2002,year2003,year2004,year2005,year2006,year2007,year2008, year2009,year2010,year2011,year2012,year2013,year2014,year2015,year2016)\n```", "```py\nfor (k in 2:(ncol(Model_database)-2)) \n   {\n    Model_database[,k]<-as.numeric(Model_database[,k])\n   }\n```", "```py\ntable(sapply(Model_database, class))\n\n ##\n ##    Date integer numeric\n ##       1       1    1492\n```", "```py\nset.seed(1234)\n```", "```py\nlibrary(caTools)\n index = sample.split(Model_database$Default, SplitRatio = .70)\n```", "```py\ntrain<-subset(Model_database, index == TRUE)\ntest<-subset(Model_database, index == FALSE)\n```", "```py\nprint(\"The development sample contains the following number of observations:\")\n\n ## [1] \"The development sample contains the following number of observations:\"\n\nnrow(train)\n\n ## [1] 7091\n\nprint(\"The average number of failed banks in the sample is:\")\n\n ## [1] \"The average number of failed banks in the sample is:\"\n\n(sum(train$Default)/nrow(train))\n\n ## [1] 0.04696094\n\nprint(\"The validation sample contains the following number of observations:\")\n\n ## [1] \"The validation sample contains the following number of observations:\"\n\nnrow(test)\n\n ## [1] 3039\n\nprint(\"The average number of failed banks in the sample is:\")\n\n ## [1] \"The average number of failed banks in the sample is:\"\n\n(sum(test$Default)/nrow(test))\n\n ## [1] 0.04705495\n```", "```py\nClass<-as.data.frame(sapply(train, class))\n colnames(Class)<-\"variable_class\"\n Class$variable_name<-colnames(train)\n\nnumeric_vars<-Class[Class$variable_class==\"numeric\",\"variable_name\"]\n```", "```py\nlibrary(fBasics)\n descriptives_num<-             as.data.frame(t(basicStats(train[,numeric_vars])))\n head(descriptives_num)\n```", "```py\nlibrary(DataExplorer)\nplot_histogram(train[,1410:1441])\n```", "```py\nhead(colnames(train))\n\n ## [1] \"ID_RSSD\"  \"UBPR1795\" \"UBPR4635\" \"UBPRC233\" \"UBPRD582\" \"UBPRE386\"\n\ntail(colnames(train))\n\n ## [1] \"UBPRE541\" \"UBPRE542\" \"UBPRJ248\" \"UBPRK447\" \"Date\"     \"Default\"\n```", "```py\nfor (k in 2:(ncol(train)-2))\n{\n   variable<-as.character(colnames(train)[k])\n   limits <- quantile(train[,k], probs=c(.01, .99), na.rm = TRUE)\n   train[complete.cases(train[,k]) & train[,k] <         as.numeric(limits[1]),k] <-      as.numeric(limits[1])\n   train[complete.cases(train[,k]) & train[,k] > as.numeric(limits[2]),k] <-      as.numeric(limits[2])\n test[complete.cases(test[,k]) & test[,k] < as.numeric(limits[1]),k]    <- as.numeric(limits[1])\n test[complete.cases(test[,k]) & test[,k] > as.numeric(limits[2]),k] <-as.numeric(limits[2])\n }\n```", "```py\nlibrary(dplyr)\n\nunique_values<-as.data.frame(sapply(train, n_distinct))\n```", "```py\ncolnames(unique_values)<-\"Unique_values\"\n```", "```py\nunique_values$variable_name<-colnames(train)\n```", "```py\nvariables_to_remove<-unique_values[unique_values$Unique_values==1,\"variable_name\"]\nlength(variables_to_remove)\n\n ## [1] 84\n```", "```py\n train<-train[, !colnames(train) %in% variables_to_remove]\n test<-test[, !colnames(test) %in% variables_to_remove]\n```", "```py\nsave.image(\"Data6.RData\")\n```", "```py\nplot_missing(train[,c(6:8,1000:1020)])\n```", "```py\nncol=rep(nrow(train) ,each=ncol(train))\n missingdata=as.data.frame(cbind(colnames=names(train),ncol,nmsg=as.integer(as.character(as.vector(apply(train, 2, function(x) length(which(is.na(x)))))))))\nmissingdata$nmsg=as.numeric(levels(missingdata$nmsg))[missingdata$nmsg]\nmissingdata=cbind(missingdata,percmissing=(missingdata$nmsg/ncol*100))\n\nhead(missingdata)\n\n ##   colnames ncol nmsg percmissing\n ## 1  ID_RSSD 7091    0           0\n ## 2 UBPR1795 7091    0           0\n ## 3 UBPR4635 7091    0           0\n ## 4 UBPRC233 7091    0           0\n ## 5 UBPRD582 7091    0           0\n ## 6 UBPRE386 7091    0           0\n```", "```py\nprint(missingdata[missingdata$percmissing>=99,])\n\n ##      colnames ncol nmsg percmissing\n ## 19   UBPRE406 7091 7066    99.64744\n ## 26   UBPRE413 7091 7028    99.11155\n ## 35   UBPRFB69 7091 7038    99.25257\n ## 121  UBPRE137 7091 7048    99.39360\n ## 161  UBPRE184 7091 7046    99.36539\n ## 1347 UBPRE855 7091 7073    99.74616\n ## 1348 UBPRE856 7091 7047    99.37950\n ## 1356 UBPRE864 7091 7083    99.88718\n ## 1360 UBPRE868 7091 7056    99.50642\n```", "```py\nprint(missingdata[missingdata$percmissing==100,])\n\n ## [1] colnames    ncol        nmsg        percmissing\n ## <0 rows> (or 0-length row.names)\n```", "```py\ntrain$missingvalues<-rowSums(is.na(train[,2:1410]))/1409\n```", "```py\nhist(train$missingvalues,main=\"Distribution of missing values\",xlab=\"Percentage of missing values\",border=\"blue\", col=\"red\",breaks=25)\n```", "```py\nsummary(train$missingvalues)\n\n ##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.\n ## 0.06671 0.44003 0.47480 0.46779 0.50958 0.74663\n```", "```py\ntrain$missingvalues<-NULL\n```", "```py\nlibrary(Amelia)\n\nmissmap(train[,5:35], main = \"Missing values vs observed\",col=c(\"black\", \"grey\"),,legend = FALSE)\n```", "```py\nmissingdata[missingdata$colnames==\"UBPRE628\",]\n\n ##     colnames ncol nmsg percmissing\n ## 281 UBPRE628 7091   17   0.2397405\n```", "```py\nmissing_analysis<-train[,c(\"UBPRE628\",\"Default\")]\n```", "```py\nmissing_analysis$is_miss<-ifelse(is.na(missing_analysis$UBPRE628),\"missing_ratio\",\"complete_ratio\")\n```", "```py\naggregate(missing_analysis$Default, by = list(missing_analysis$is_miss), sum)\n\n ##          Group.1   x\n ## 1 complete_ratio 319\n ## 2  missing_ratio  14\n```", "```py\ntrain_nomiss<-train\ntest_nomiss<-test\n\n for(i in 2:(ncol(train_nomiss)-2))\n   {\n   train_nomiss[is.na(train_nomiss[,i]), i] <- mean(train_nomiss[,i],      na.rm =          TRUE)\n   test_nomiss[is.na(test_nomiss[,i]), i] <- mean(train_nomiss[,i],      na.rm = TRUE) \n   }\n```", "```py\nmissmap(train_nomiss[,2:(ncol(train_nomiss)-2)], main = \"Missing values vs observed\",col=c(\"black\", \"grey\"),,legend = FALSE)\n```", "```py\nmissmap(test_nomiss[,2:(ncol(train_nomiss)-2)], main = \"Missing values vs observed\",col=c(\"black\", \"grey\"),,legend = FALSE)\n```", "```py\nrm(list=setdiff(ls(), c(\"Model_database\",\"train\",\"test\",\"train_nomiss\",\"test_nomiss\")))\nsave.image(\"Data7.RData\")\n```"]