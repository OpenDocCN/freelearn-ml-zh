["```py\n    library(mlr)\n    library(BBmisc)\n    library(OpenML)\n    library(batchtools)\n    library(parallelMap)\n    ```", "```py\n    setOMLConfig(apikey = “627394a14f562f0fa8bcc9ec443d879f”)\n    ```", "```py\n    ## OpenML configuration:\n    ##   server           : http://www.openml.org/api/v1\n    ##   cachedir         : C:\\Users\\Karthik\\AppData\\Local\\Temp\\Rtmp6bSgE4/cache\n    ##   verbosity        : 1\n    ##   arff.reader      : farff\n    ##   confirm.upload   : TRUE\n    ##   apikey           : ***************************d879f\n    ```", "```py\n    ds.list = listOMLDataSets(tag = “2016_multilabel_r_benchmark_paper”)\n    ```", "```py\n    ## Downloading from ‘http://www.openml.org/api/v1/json/data/list/tag/2016_multilabel_r_benchmark_paper/limit/5000/status/active’ to ‘<mem>’.\n    ```", "```py\n    oml.data = lapply(40595, getOMLDataSet)\n    df.oml.data.scene <- data.frame(oml.data)\n    ```", "```py\n    df_scene = df.oml.data.scene\n    labels = colnames(df_scene)[295:300]\n    scene.task = makeMultilabelTask(id = “multi”, data = df_scene, target = labels)\n    ```", "```py\nmultilabel.lrn3 = makeLearner(“multilabel.rFerns”)\nmultilabel.lrn4 = makeLearner(“multilabel.randomForestSRC”)\nmultilabel.lrn3\n```", "```py\n## Learner multilabel.rFerns from package rFernsd\n## Type: multilabel\n## Name: Random ferns; Short name: rFerns\n## Class: multilabel.rFerns\n## Properties: numerics,factors,ordered\n## Predict-Type: response\n## Hyperparameters:\n```", "```py\n    lrn = makeLearner(“classif.rpart”, predict.type = “prob”)\n    ```", "```py\n    multilabel.lrn1 = makeMultilabelBinaryRelevanceWrapper(lrn)\n    multilabel.lrn2 = makeMultilabelNestedStackingWrapper(lrn)\n    ```", "```py\n    lrn\n    ```", "```py\n    Learner classif.rpart from package rpart\n    Type: classif\n    Name: Decision Tree; Short name: rpart\n    Class: classif.rpart\n    Properties: twoclass,multiclass,missings,numerics,factors,ordered,prob,weights,featimp\n    Predict-Type: prob\n    Hyperparameters: xval=0\n    ```", "```py\n    multilabel.lrn1\n    ```", "```py\n    Learner multilabel.binaryRelevance.classif.rpart from package rpart\n    Type: multilabel\n    Name: ; Short name: \n    Class: MultilabelBinaryRelevanceWrapper\n    Properties: numerics,factors,ordered,missings,weights,prob,twoclass,multiclass\n    Predict-Type: prob\n    Hyperparameters: xval=0\n    ```", "```py\n    df_nrow <- nrow(df_scene)\n    df_all_index <- c(1:df_nrow)\n    ```", "```py\n    train_index <- sample(1:df_nrow, 0.7*df_nrow)\n    test_index <- setdiff(df_all_index,train_index)\n    ```", "```py\n    scene_classi_mod = train(multilabel.lrn1, scene.task, subset = train_index)\n    scene_classi_mod\n    ```", "```py\n    Model for learner.id=multilabel.binaryRelevance.classif.rpart; learner.class=MultilabelBinaryRelevanceWrapper\n    Trained on: task.id = multi; obs = 1684; features = 294\n    Hyperparameters: xval=0\n    ```", "```py\npred = predict(scene_classi_mod, task = scene.task, subset = test_index)\nnames(as.data.frame(pred))\n[1] “id”                   “truth.Beach”          “truth.Sunset”         “truth.FallFoliage”   \n [5] “truth.Field”          “truth.Mountain”       “truth.Urban”          “prob.Beach”          \n [9] “prob.Sunset”          “prob.FallFoliage”     “prob.Field”           “prob.Mountain”       \n[13] “prob.Urban”           “response.Beach”       “response.Sunset”      “response.FallFoliage”\n[17] “response.Field”       “response.Mountain”    “response.Urban”\n```", "```py\nMEASURES = list(multilabel.hamloss, multilabel.f1, multilabel.subset01, multilabel.acc, multilabel.tpr, multilabel.ppv)\nperformance(pred, measures = MEASURES)\n```", "```py\nmultilabel.hamloss       multilabel.f1 multilabel.subset01      multilabel.acc      multilabel.tpr \n          0.1260950           0.5135085           0.5878285           0.4880129           0.5477178 \n     multilabel.ppv \n          0.7216733\n```", "```py\nlistMeasures(“multilabel”)\n```", "```py\n[1] “featperc”            “multilabel.tpr”      “multilabel.hamloss”  “multilabel.subset01” “timeboth”           \n [6] “timetrain”           “timepredict”         “multilabel.ppv”      “multilabel.f1”       “multilabel.acc”\n```", "```py\nrdesc = makeResampleDesc(method = “CV”, stratify = FALSE, iters = 3)\nr = resample(learner = multilabel.lrn1, task = scene.task, resampling = rdesc,measures = list(multilabel.hamloss), show.info = FALSE)\nr\n```", "```py\nResample Result\nTask: multi\nLearner: multilabel.binaryRelevance.classif.rpart\nAggr perf: multilabel.hamloss.test.mean=0.1244979\nRuntime: 4.28345\n```", "```py\ngetMultilabelBinaryPerformances(r$pred, measures = list(acc, mmce, auc))\n```", "```py\n##             acc.test.mean mmce.test.mean auc.test.mean\n## Beach           0.8728708     0.12712921     0.7763484\n## Sunset          0.9335272     0.06647279     0.9066371\n## FallFoliage     0.9148317     0.08516826     0.8699105\n## Field           0.9077690     0.09223099     0.8895795\n## Mountain        0.7922725     0.20772746     0.7670873\n## Urban           0.8213544     0.17864562     0.7336219\n```", "```py\n    lrns = list(makeLearner(“multilabel.randomForestSRC”),\n                makeLearner(“multilabel.rFerns”)\n                )\n    MEASURES = list(multilabel.hamloss, multilabel.f1, multilabel.subset01, multilabel.acc, multilabel.tpr, multilabel.ppv)\n    ```", "```py\n    bmr = benchmark(lrns, scene.task, measures = MEASURES)\n    ```", "```py\n    ## Exporting objects to slaves for mode socket: .mlr.slave.options\n    ## Mapping in parallel: mode = socket; cpus = 2; elements = 2.\n    ```", "```py\n    bmr\n    ```", "```py\n    Task: multi, Learner: multilabel.rFerns\n    [Resample] cross-validation iter 9: multilabel.hamloss.test.mean=0.183,multilabel.f1.test.mean=0.653,multilabel.subset01.test.mean=0.768,multilabel.acc.test.mean=0.54,multilabel.tpr.test.mean= 0.9,multilabel.ppv.test.mean=0.564\n    ...\n    [Resample] Aggr. Result: multilabel.hamloss.test.mean=0.183,multilabel.f1.test.mean=0.663,multilabel.subset01.test.mean=0.756,multilabel.acc.test.mean=0.549,multilabel.tpr.test.mean=0.916,multilabel.ppv.test.mean=0.566\n    ```", "```py\ngetBMRPerformances(bmr, as.df = TRUE)\n```", "```py\nhead(getBMRPredictions(bmr, as.df = TRUE))\n```", "```py\ngetBMRLearners(bmr)\n```", "```py\n## $multilabel.randomForestSRC\n## Learner multilabel.randomForestSRC from package randomForestSRC\n## Type: multilabel\n## Name: Random Forest; Short name: rfsrc\n## Class: multilabel.randomForestSRC\n## Properties: missings,numerics,factors,prob,weights\n## Predict-Type: response\n## Hyperparameters: na.action=na.impute\n## \n## \n## $multilabel.rFerns\n## Learner multilabel.rFerns from package rFerns\n## Type: multilabel\n## Name: Random ferns; Short name: rFerns\n## Class: multilabel.rFerns\n## Properties: numerics,factors,ordered\n## Predict-Type: response\n## Hyperparameters:\n```", "```py\ngetBMRMeasures(bmr)\n```", "```py\nlrns = list(makeLearner(“multilabel.randomForestSRC”),\n            makeLearner(“multilabel.rFerns”)\n            )\nbmr = benchmark(lrns, scene.task, measures = MEASURES)\nlrn.classif.randomForest = makeLearner(“classif.randomForest”)\nbmr.BR.rf = benchmark(lrn.classif.randomForest, scene.task, measures = MEASURES)\nmergeBenchmarkResults(list(bmr, bmr.BR.rf))\n```", "```py\n##             acc.test.mean mmce.test.mean auc.test.mean\n## Beach           0.8608226     0.13917740     0.8372448\n## Sunset          0.9401745     0.05982551     0.9420085\n## FallFoliage     0.9081845     0.09181554     0.9008202\n## Field           0.8998754     0.10012464     0.9134458\n## Mountain        0.7710843     0.22891566     0.7622767\n## Urban           0.8184462     0.18155380     0.7837401\n```", "```py\nflow.id = uploadOMLFlow(makeLearner(“multilabel.randomForestSRC”))\n```", "```py\nDownloading from ‘http://www.openml.org/api/v1/flow/exists/mlr.multilabel.randomForestSRC/R_3.2.2-v2.b955a5ec’ to ‘<mem>’.\nDo you want to upload the flow? (yes|no)\nUploading flow to the server.\nDownloading response to: C:\\Users\\Karthik\\AppData\\Local\\Temp\\Rtmpe4W4BW\\file3f044abf30f2.xml\nUploading to ‘http://www.openml.org/api/v1/flow’.\nFlow successfully uploaded. Flow ID: 9708\n```"]