["```py\npapermill==2.3.4\n```", "```py\nboto3==1.21.41\n```", "```py\nipython==8.2.0\n```", "```py\nipykernel==6.13.0\n```", "```py\napache-airflow-providers-papermill==2.2.3\n```", "```py\n    from datetime import datetime\n    from airflow import DAG\n    from airflow.operators.dummy_operator import DummyOperator\n    from airflow.operators.python_operator import PythonOperator\n    def print_hello():\n        return 'Hello world from first Airflow DAG!'\n    dag = DAG('hello_world', \n              description='Hello World DAG',\n              schedule_interval='@daily',\n              start_date=datetime(2017, 3, 20), \n              catchup=False)\n    start = DummyOperator(task_id=\"start\", dag=dag)\n    hello_operator = PythonOperator(\n        task_id='hello_task', \n        python_callable=print_hello, \n        dag=dag)\n    start >> hello_operator\n    ```", "```py\nfrom datetime import datetime\n```", "```py\nfrom airflow import DAG\n```", "```py\nfrom airflow.operators.dummy_operator import DummyOperator\n```", "```py\nfrom airflow.providers.papermill.operators.papermill import PapermillOperator\n```", "```py\nimport uuid\n```", "```py\ndag = DAG('customer_segmentation_batch_model', \n```", "```py\n          description='Batch model pipeline', \n```", "```py\n          schedule_interval='@daily', \n```", "```py\n          start_date=datetime(2017, 3, 20), catchup=False)\n```", "```py\nstart = DummyOperator(task_id=\"start\", dag=dag)\n```", "```py\nrun_id = str(uuid.uuid1())\n```", "```py\nfeature_eng = PapermillOperator(\n```", "```py\n    task_id=\"feature_engineering\",\n```", "```py\n    input_nb=\"s3://airflow-for-ml-mar-2022/notebooks/ch6_feature_engineering.ipynb\",\n```", "```py\n    output_nb=f\"s3://airflow-for-ml-mar-2022/notebooks/runs/ch6_feature_engineering_{ run_id }.ipynb\",\n```", "```py\n    dag=dag,\n```", "```py\n    trigger_rule=\"all_success\"\n```", "```py\n)\n```", "```py\nmodel_prediction = PapermillOperator(\n```", "```py\n    task_id=\"model_prediction\",\n```", "```py\n    input_nb=\"s3://airflow-for-ml-mar-2022/notebooks/ch6_model_prediction.ipynb\",\n```", "```py\n    output_nb=f\"s3://airflow-for-ml-mar-2022/notebooks/runs/ch6_model_prediction_{run_id}.ipynb\",\n```", "```py\n    dag=dag,\n```", "```py\n    trigger_rule=\"all_success\"\n```", "```py\n)\n```", "```py\nend = DummyOperator(task_id=\"end\", dag=dag, \n```", "```py\n                    trigger_rule=\"all_success\")\n```", "```py\nstart >> feature_eng >> model_prediction >> end\n```", "```py\nfrom datetime import datetime\n```", "```py\nfrom airflow import DAG\n```", "```py\nfrom airflow.operators.dummy_operator import DummyOperator\n```", "```py\nfrom airflow.providers.papermill.operators.papermill import PapermillOperator\n```", "```py\ndag = DAG('customer_segmentation_online_model', \n```", "```py\n          description='Online model pipeline', \n```", "```py\n          schedule_interval='@daily', \n```", "```py\n          start_date=datetime(2017, 3, 20), catchup=False)\n```", "```py\nstart = DummyOperator(task_id=\"start\")\n```", "```py\nrun_time = datetime.now()\n```", "```py\nfeature_eng = PapermillOperator(\n```", "```py\n    task_id=\"feature_engineering\",\n```", "```py\n    input_nb=\"s3://airflow-for-ml-mar-2022/notebooks/ch6_feature_engineering.ipynb\",\n```", "```py\n    output_nb=f\"s3://airflow-for-ml-mar-2022/notebooks/runs/ch6_feature_engineering_{run_time}.ipynb\",\n```", "```py\n    trigger_rule=\"all_success\",\n```", "```py\n    dag=dag\n```", "```py\n)\n```", "```py\nsync_offline_to_online = PapermillOperator(\n```", "```py\n    task_id=\"sync_offline_to_online\",\n```", "```py\n    input_nb=\"s3://airflow-for-ml-mar-2022/notebooks/ch6_sync_offline_online.ipynb\",\n```", "```py\n    output_nb=f\"s3://airflow-for-ml-mar-2022/notebooks/runs/ch6_sync_offline_online_{run_time}.ipynb\",\n```", "```py\n    trigger_rule=\"all_success\",\n```", "```py\n    dag=dag\n```", "```py\n)\n```", "```py\nend = DummyOperator(task_id=\"end\", trigger_rule=\"all_success\")\n```", "```py\nstart >> feature_eng >> sync_offline_to_online >> end\n```", "```py\ncd online-model-rest-api/\nexport AWS_ACCESS_KEY_ID=<AWS_KEY>\nexport AWS_SECRET_ACCESS_KEY=<AWS_SECRET>\nexport AWS_DEFAULT_REGION=us-east-1\naws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin <account_number>.dkr.ecr.us-east-1.amazonaws.com\ndocker build -t customer-segmentation .\ndocker tag customer-segmentation:latest <account_number>.dkr.ecr.us-east-1.amazonaws.com/customer-segmentation:latest\ndocker push <account_number>.dkr.ecr.us-east-1.amazonaws.com/customer-segmentation:latest\n```", "```py\nimport json\n```", "```py\nimport boto3\n```", "```py\nimport os\n```", "```py\nos.environ[\"AWS_ACCESS_KEY_ID\"] = \"<aws_key>\"\n```", "```py\nos.environ[\"AWS_SECRET_ACCESS_KEY\"] = \"<aws_secret>\"\n```", "```py\nos.environ[\"AWS_DEFAULT_REGION\"] = \"us-east-1\"\n```", "```py\npayload = json.dumps({\"customer_list\":[\"12747.0\", \"12841.0\"]})\n```", "```py\nruntime = boto3.client(\"runtime.sagemaker\")\n```", "```py\nresponse = runtime.invoke_endpoint(\n```", "```py\n    EndpointName= \"customer-segmentation-endpoint\", \n```", "```py\n    ContentType=\"application/json\", Body=payload\n```", "```py\n)\n```", "```py\nresponse = response[\"Body\"].read()\n```", "```py\nresult = json.loads(response.decode(\"utf-8\"))\n```", "```py\nprint(results)\n```", "```py\n## replace timestamp to older time stamp.\n```", "```py\nentity_df[\"event_timestamp\"] = pd.to_datetime(\"2022-03-26 16:24:21\")\n```"]