["```py\n> load(\"../Data/GC2.RData\")\n> set.seed(12345)\n> Train_Test <- sample(c(\"Train\",\"Test\"),nrow(GC2),replace = TRUE,\n+    prob = c(0.7,0.3))\n> GC2_Train <- GC2[Train_Test==\"Train\",]\n> GC2_TestX <- within(GC2[Train_Test==\"Test\",],rm(good_bad))\n> GC2_TestY <- GC2[Train_Test==\"Test\",\"good_bad\"]\n> nte <- nrow(GC2_TestX)\n> GC2_Formula <- as.formula(\"good_bad~.\")\n```", "```py\n> DT_01 <- rpart(GC2_Formula,GC2_Train)\n> windows(height=200,width=200)\n> par(mfrow=c(1,2))\n> plot(DT_01,uniform=TRUE,main=\"DT - 01\"); text(DT_01,use.n=TRUE)\n> DT_01_predict <- predict(DT_01,newdata = GC2_TestX,type=\"class\")\n> DT_01_Accuracy <- sum(DT_01_predict==GC2_TestY)/nte\n> DT_01_Accuracy\n[1] 0.7060703\n> DT_01$variable.importance\nchecking duration  savings  purpose employed  history   amount    coapp \n 38.5358  19.6081  15.6824  12.8583  12.5501   9.2985   8.9475   8.1326 \n     age  existcr property      job resident telephon  housing  depends \n  7.3921   6.0250   5.5503   5.2012   2.6356   1.6327   1.3594   0.6871 \n marital installp  foreign \n  0.6871   0.4836   0.2045 \n```", "```py\n> DT_02 <- rpart(GC2_Formula,GC2_Train,minsplit=30,minbucket=15)\n> plot(DT_02,uniform=TRUE,main=\"DT - 02\"); text(DT_02,use.n=TRUE)\n> DT_02_predict <- predict(DT_02,newdata = GC2_TestX,type=\"class\")\n> DT_02_Accuracy <- sum(DT_02_predict==GC2_TestY)/nte\n> DT_02_Accuracy\n[1] 0.7252396\n> DT_02$variable.importance\nchecking duration  savings  purpose  history   amount    coapp employed \n 35.2436  15.5220  15.3025  11.6655   7.8141   7.5564   7.1990   5.6960 \nproperty  existcr      age resident  foreign  depends  marital      job \n  3.7257   1.7646   1.3781   1.1833   0.7883   0.6871   0.6871   0.5353 \n housing installp \n  0.5072   0.4581 \n```", "```py\n> DT_03 <- rpart(GC2_Formula,GC2_Train,minsplit=30,minbucket=15,\n+                cp=0.005)\n> plot(DT_03,uniform=TRUE,main=\"DT - 03\"); text(DT_03,use.n=TRUE)\n> DT_03_predict <- predict(DT_03,newdata = GC2_TestX,type=\"class\")\n> DT_03_Accuracy <- sum(DT_03_predict==GC2_TestY)/nte\n> DT_03_Accuracy\n[1] 0.7316294\n> DT_03$variable.importance\nchecking duration  savings  purpose  history employed   amount    coapp \n 35.7201  15.5220  15.3025  11.6655   7.8141   7.7610   7.5564   7.1990 \nproperty      age  existcr resident  marital  foreign installp  depends \n  3.7257   1.8547   1.7646   1.5010   1.0048   0.7883   0.7758   0.6871 \n     job  housing \n  0.5353   0.5072\n```", "```py\n> matrix(c(0,200,500,0),byrow = TRUE,nrow=2)\n     [,1] [,2]\n[1,]    0  200\n[2,]  500    0\n```", "```py\n> DT_04 <- rpart(GC2_Formula,GC2_Train,minsplit=30,minbucket=15,\n+                parms = list(split=\"information\",\n+                             loss=matrix(c(0,200,500,0),byrow = TRUE,nrow=2)))\n> plot(DT_04,uniform=TRUE,main=\"DT - 04\"); text(DT_04,use.n=TRUE)\n> DT_04_predict <- predict(DT_04,newdata = GC2_TestX,type=\"class\")\n> DT_04_Accuracy <- sum(DT_04_predict==GC2_TestY)/nte\n> DT_04_Accuracy\n[1] 0.7380192\n> DT_04$variable.importance\nchecking  savings duration  purpose employed  history   amount  existcr \n 26.0182  10.4096  10.2363   5.0949   5.0434   2.1544   1.5439   0.9943 \nresident      age  depends  marital property \n  0.9648   0.7457   0.6432   0.6432   0.5360 \n\n```", "```py\n> N <- 11:100\n> B <- 1e5\n> Prob_Avg <- NULL\n> for(i in N){\n+   set <- 1:i\n+   leftout <- 0\n+   for(j in 1:B){\n+     s1 <- sample(set,i,replace=TRUE)\n+     leftout <- leftout+(i-length(unique(s1)))/i\n+   }\n+   Prob_Avg[i-10] <- leftout/B\n+ }\n> Prob_Avg\n [1] 0.3504 0.3517 0.3534 0.3549 0.3552 0.3563 0.3571 0.3574 0.3579 0.3585\n[11] 0.3585 0.3594 0.3594 0.3601 0.3604 0.3606 0.3610 0.3612 0.3613 0.3614\n[21] 0.3620 0.3622 0.3625 0.3622 0.3626 0.3627 0.3627 0.3626 0.3631 0.3634\n[31] 0.3635 0.3637 0.3636 0.3638 0.3639 0.3638 0.3640 0.3641 0.3641 0.3641\n[41] 0.3644 0.3642 0.3645 0.3643 0.3645 0.3647 0.3645 0.3646 0.3649 0.3649\n[51] 0.3648 0.3650 0.3648 0.3650 0.3651 0.3653 0.3649 0.3649 0.3653 0.3653\n[61] 0.3654 0.3654 0.3654 0.3654 0.3653 0.3655 0.3654 0.3655 0.3655 0.3657\n[71] 0.3657 0.3657 0.3655 0.3658 0.3658 0.3660 0.3656 0.3658 0.3658 0.3658\n[81] 0.3658 0.3658 0.3660 0.3658 0.3659 0.3659 0.3662 0.3660 0.3661 0.3661\n```", "```py\n> B <- 500\n> GC2_Bagging <- bagging(GC2_Formula,data=GC2_Train,coob=FALSE,\n+                        nbagg=B,keepX=TRUE)\n> GC2_Margin <- predict(GC2_Bagging,newdata = GC2_TestX,\n+                       aggregation=\"weighted\",type=\"class\")\n> sum(GC2_Margin==GC2_TestY)/nte\n[1] 0.7795527\n```", "```py\n> pdf(\"../Output/GC2_Bagging_Trees.pdf\")\n> for(i in 1:B){\n+   tt <- GC2_Bagging$mtrees[[i]]\n+   plot(tt$btree)\n+   text(tt$btree,use.n=TRUE)\n+ }\n> dev.off()\npdf \n  2 \n```", "```py\n> VI <- data.frame(matrix(0,nrow=B,ncol=ncol(GC2)-1))\n> vnames <- names(GC2)[-20]\n> names(VI) <- vnames\n> for(i in 1:B){\n+   VI[i,] <- GC2_Bagging$mtrees[[i]]$btree$variable.importance[vnames]\n+ }\n> colMeans(VI)\nchecking duration  history  purpose   amount  savings employed installp \n  50.282   58.920   33.540   48.301   74.721   30.838   32.865   18.722 \n marital    coapp resident property      age  housing  existcr      job \n  17.424    8.795   18.171   20.591   51.611    9.756   11.433   14.015 \n depends telephon  foreign \n      NA       NA       NA \n```", "```py\n> sapply(VI,function(x) sum(is.na(x)))\nchecking duration  history  purpose   amount  savings employed installp \n       0        0        0        0        0        0        0        0 \n marital    coapp resident property      age  housing  existcr      job \n       0        0        0        0        0        0        0        0 \n depends telephon  foreign \n       9       35       20 \n> colMeans(VI,na.rm=TRUE)\nchecking duration  history  purpose   amount  savings employed installp \n  50.282   58.920   33.540   48.301   74.721   30.838   32.865   18.722 \n marital    coapp resident property      age  housing  existcr      job \n  17.424    8.795   18.171   20.591   51.611    9.756   11.433   14.015 \n depends telephon  foreign \n   6.345    5.167    3.200 \n```", "```py\n> GC2_Bagging_02 <- bagging(GC2_Formula,data=GC2_Train,coob=FALSE,\n+                        nbagg=B,keepX=TRUE,\n+                        control=rpart.control(minsplit=30,minbucket=15,\n+split=\"information\",loss=matrix(c(0,200,500,0), byrow = TRUE, nrow=2)))\n> GC2_Margin_02 <- predict(GC2_Bagging_02,newdata = GC2_TestX,\n+                       aggregation=\"weighted\",type=\"class\")\n> sum(GC2_Margin_02==GC2_TestY)/nte\n[1] 0.7604\n> pdf(\"../Output/GC2_Bagging_Trees_02.pdf\")\n> for(i in 1:B){\n+   tt <- GC2_Bagging_02$mtrees[[i]]\n+   plot(tt$btree)\n+   text(tt$btree,use.n=TRUE)\n+ }\n> dev.off()\nnull device \n          1 \n> VI_02 <- data.frame(matrix(0,nrow=B,ncol=ncol(GC2)-1))\n> names(VI_02) <- vnames\n> for(i in 1:B){\n+   VI_02[i,] <- GC2_Bagging_02$mtrees[[i]]$btree$variable.importance[vnames]\n+ }\n> colMeans(VI_02,na.rm=TRUE)\nchecking duration  history  purpose   amount  savings employed installp \n 38.3075  18.9377  11.6756  19.1818  18.4385  16.1309   9.6110   3.6417 \n marital    coapp resident property      age  housing  existcr      job \n  4.3520   4.4913   3.4810   6.5278  10.0255   3.3401   3.1011   4.5115 \n depends telephon  foreign \n  1.6432   2.5535   0.9193 \n```", "```py\n> Bags <- c(1:24,seq(25,B,25))\n> Bag_Acc <- NULL\n> for(i in 1:length(Bags)){\n+   TBAG <- bagging(GC2_Formula,data=GC2_Train,coob=FALSE,\n+                       nbagg=i,keepX=TRUE,\n+                       control=rpart.control(minsplit=30,minbucket=15,\n+                                             split=\"information\",\n+                                             loss=matrix(c(0,200,500,0),\n+                                                         byrow = TRUE,\n+                                                         nrow=2)))\n+   GC2_Margin_TBAG <- predict(TBAG,newdata = GC2_TestX,\n+                            aggregation=\"weighted\",type=\"class\")\n+   Bag_Acc[i] <- sum(GC2_Margin_TBAG==GC2_TestY)/nte\n+   print(Bags[i])\n+ }\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n\n[1] 23\n[1] 24\n[1] 25\n[1] 50\n[1] 75\n\n[1] 475\n[1] 500\n> plot(Bags,Bag_Acc,\"l\",ylab=\"Accuracy\")\n```", "```py\n> data(\"PimaIndiansDiabetes\")\n> set.seed(12345)\n> Train_Test <- sample(c(\"Train\",\"Test\"),nrow(PimaIndiansDiabetes),replace = TRUE,prob = c(0.7,0.3))\n> head(Train_Test)\n[1] \"Test\"  \"Test\"  \"Test\"  \"Test\"  \"Train\" \"Train\"\n> PimaIndiansDiabetes_Train <- PimaIndiansDiabetes[Train_Test==\"Train\",]\n> PimaIndiansDiabetes_TestX <- within(PimaIndiansDiabetes[Train_Test==\"Test\",],\n+                                     rm(diabetes))\n> PimaIndiansDiabetes_TestY <- PimaIndiansDiabetes[Train_Test==\"Test\",\"diabetes\"]\n> PID_Formula <- as.formula(\"diabetes~.\")\n> PID_Bagging <- bagging(PID_Formula,data=PimaIndiansDiabetes_Train,coob=FALSE,\n+                        nbagg=1000,keepX=TRUE)\n> PID_Margin <- predict(PID_Bagging,newdata = PimaIndiansDiabetes_TestX,\n+                       aggregation=\"weighted\",type=\"class\")\n> sum(PID_Margin==PimaIndiansDiabetes_TestY)/257\n[1] 0.7548638\n```", "```py\n> set.seed(123)\n> Waveform <- mlbench.waveform(5000)\n> Waveform$classes <- ifelse(Waveform$classes!=3,1,2)\n> Waveform_DF <- data.frame(cbind(Waveform$x,Waveform$classes)) # Data Frame\n> names(Waveform_DF) <- c(paste0(\"X\",\".\",1:21),\"Classes\")\n> Waveform_DF$Classes <- as.factor(Waveform_DF$Classes)\n> set.seed(12345)\n> Train_Test <- sample(c(\"Train\",\"Test\"),nrow(Waveform_DF),replace = TRUE,\n+    prob = c(0.7,0.3))\n> Waveform_DF_Train <- Waveform_DF[Train_Test==\"Train\",]\n> Waveform_DF_TestX <- within(Waveform_DF[Train_Test==\"Test\",],rm(Classes))\n> Waveform_DF_TestY <- Waveform_DF[Train_Test==\"Test\",\"Classes\"]\n> Waveform_DF_Formula <- as.formula(\"Classes~.\")\n> plot(Waveform_DF_Train$X.1,Waveform_DF_Train$X.8,col=Waveform_DF_Train$Classes)\n```", "```py\n> WF_knn <- knn(train=Waveform_DF_Train[,-22],test=Waveform_DF_TestX,\n+               cl=Waveform_DF_Train$Classes,k=10)\n> sum(Waveform_DF_TestY==WF_knn)/nrow(Waveform_DF_TestX)\n[1] 0.903183\n```", "```py\n> k <- c(2:15,seq(20,50,5))\n> knn_accuracy <- NULL\n> for(i in 1:length(k)){\n+   WF_temp_knn <- knn(train=Waveform_DF_Train[,-22],test=Waveform_DF_TestX,\n+                 cl=Waveform_DF_Train$Classes,k=k[i])\n+   knn_accuracy <- c(knn_accuracy,sum(Waveform_DF_TestY==WF_temp_knn)/\n+                       nrow(Waveform_DF_TestX))\n+ }\n> knn_accuracy\n [1] 0.8561 0.8919 0.8893 0.8886 0.8932 0.8985 0.8972 0.8992 0.9012 0.9025\n[11] 0.9032 0.9058 0.9105 0.9019 0.8999 0.9072 0.9065 0.9098 0.9118 0.9085\n[21] 0.9072\n```", "```py\n> All_Cov <- rbind(GC2_Train[,-20],GC2_TestX)\n> All_CovX <- model.matrix(~.-1,All_Cov)\n> GC2_Train_Cov <- All_CovX[1:nrow(GC2_Train),]\n> GC2_Test_Cov <- All_CovX[(nrow(GC2_Train)+1):nrow(All_CovX),]\n> k <- seq(5,50,1)\n> knn_accuracy <- NULL\n> for(i in 1:length(k)){\n+   GC2_knn_Bagging <- ownn(train=GC2_Train_Cov, test=GC2_Test_Cov,\n+                           cl=GC2_Train$good_bad,testcl=GC2_TestY,k=k[i])\n+  knn_accuracy[i] <- GC2_knn_Bagging$accuracy[3]\n+ }\n> knn_accuracy\n [1] 0.6198083 0.6293930 0.6357827 0.6549521 0.6549521 0.6645367 0.6869010\n [8] 0.6932907 0.7028754 0.7092652 0.7092652 0.7188498 0.7284345 0.7316294\n[15] 0.7348243 0.7348243 0.7412141 0.7412141 0.7444089 0.7476038 0.7476038\n[22] 0.7507987 0.7476038 0.7476038 0.7476038 0.7476038 0.7444089 0.7444089\n[29] 0.7444089 0.7444089 0.7444089 0.7444089 0.7412141 0.7444089 0.7444089\n[36] 0.7444089 0.7412141 0.7412141 0.7412141 0.7412141 0.7444089 0.7444089\n[43] 0.7444089 0.7444089 0.7444089 0.7444089\n> windows(height=100,width=100)\n> plot.ts(knn_accuracy,main=\"k-NN Accuracy\")\n```", "```py\n> GC2_knn_Bagging$accuracy\n      knn      ownn       bnn \n0.7444089 0.7444089 0.7444089 \n> GC2_knn_Bagging$bnnpred\n  [1] good good good good good good good good good good good good good\n [14] good good good good good good good good good bad  good good good\n [27] good good good good good good good good good good bad  good good\n\n[274] good good good good good good good good good good good good good\n[287] good good good good good good good good good bad  bad  good good\n[300] good good good good good good good good good good good good good\n[313] good\nLevels: bad good\n```"]