- en: '*Chapter 12*: Realizing Business Value with AutoML'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You have acquired a wide variety of technical skills throughout this book. You're
    now able to train regression, classification, and forecasting models with AutoML.
    You can code AutoML solutions in Python using Jupyter notebooks, you know how
    to navigate **Azure Machine Learning** **Studio**, and you can even integrate
    machine learning pipelines in **Azure Data Factory** (**ADF**). Yet, technical
    skills alone will not guarantee the success of your projects. In order to realize
    business value, you have to gain the trust and acceptance of your end users.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will begin by learning how to present end-to-end architectures
    in a way that makes it easy for end users to understand. Then, you will learn
    which visualizations and metrics to use to show off your model's performance,
    after which you will learn how to visualize and interpret AutoML's built-in explainability
    function.
  prefs: []
  type: TYPE_NORMAL
- en: You will also explore options to run AutoML outside of **Azure Machine Learning
    Service (AMLS)** and end the chapter with a section on gaining end user trust
    by aligning your message with the type of solution you are providing.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this chapter, you will be primed for success. You will have gained
    some of the soft skills necessary to communicate your solution to end users, increasing
    the likelihood that your end-to-end solution is adopted and used by your organization.
    Failing to gain end user trust is a major reason why data science projects fail,
    and by following the guidelines in this chapter, you will be much more successful
    at creating excitement for your solution.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Architecting AutoML solutions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Visualizing AutoML modeling results
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Explaining AutoML results to your business
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using AutoML in other Microsoft products
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Realizing business value
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you will use models that you created in previous chapters to
    retrieve graphs, charts, and metrics. As such, you will need a working internet
    connection, an Azure account, and an AMLS workspace. You will also need to complete
    the exercises in [*Chapter 4*](B16595_04_ePub.xhtml#_idTextAnchor056)*, Building
    an AutoML Regression Solution*, and [*Chapter 5*](B16595_05_ePub.xhtml#_idTextAnchor068)*,
    Building an AutoML Classification Solution*.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the prerequisites for the chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Access to the internet.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A web browser, preferably Google Chrome or Microsoft Edge Chromium.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Microsoft Azure account.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An AMLS workspace.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You need to have trained and registered the `Diabetes-AllData-Regression-AutoML`
    machine learning model in [*Chapter 4*](B16595_04_ePub.xhtml#_idTextAnchor056)*,
    Building an AutoML Regression Solution*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You need to have trained and registered the `Iris-Multi-Classification` machine
    learning model in [*Chapter 5*](B16595_05_ePub.xhtml#_idTextAnchor068)*, Building
    an AutoML Classification Solution*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is no new code for this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Architecting AutoML solutions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Architecting AutoML** solutions refers to drawing end-to-end diagrams. These
    act as blueprints for how you should build out your solution, and also can be
    used to explain to your end users how everything works. While many IT solutions
    are complex and can take many forms, AutoML-based solutions follow standard patterns
    that require you to make a few important decisions.'
  prefs: []
  type: TYPE_NORMAL
- en: In this section, you'll first learn what decisions to make before architecting
    a decision. Then, you will learn how to architect an end-to-end batch scoring
    solution and an end-to-end real-time scoring solution that's easy to explain to
    end users. Although the architecture may be simplified, the more standard it is,
    the easier it is to implement, explain, and understand.
  prefs: []
  type: TYPE_NORMAL
- en: Making key architectural decisions for AutoML solutions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When drawing an architectural diagram, there are several key considerations
    you need to make, the most important being whether you need to make a batch or
    real-time solution. Batch solutions have very different requirements than real-time
    solutions and mostly follow a template involving AMLS and ADF. Real-time solutions,
    on the other hand, are more customizable.
  prefs: []
  type: TYPE_NORMAL
- en: First, we'll examine key questions to ask for batch solutions as they're easier
    to understand. You only need to worry about where your data comes from, how often
    your solution should score new data, when should you retrain models, and how your
    end users will receive results. That's it.
  prefs: []
  type: TYPE_NORMAL
- en: 'There is also the question of how you should orchestrate your various **machine
    learning** (**ML**) pipelines as you schedule them in either AMLS or ADF. ADF
    is generally the best choice since you can use it to move data in and out of Azure
    easily. The following table provides a summary of key questions and answers for
    architecting a batch solution:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.1 – Key considerations for batch solutions  ](img/Table_12.1_B16595.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.1 – Key considerations for batch solutions
  prefs: []
  type: TYPE_NORMAL
- en: Real-time solutions, on the other hand, are much more complicated. You still
    have to ask where your input data is coming from and how often you should retrain
    your AutoML model. Additionally, you should figure out where your endpoint will
    score data. This can be exceptionally complicated, as you use your endpoint nearly
    anywhere. Most commonly, this will be some sort of web application or serverless
    piece of code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Lastly, you need to figure out how many requests will your endpoint have to
    serve at once, how fast of a response your end users require, and what size your
    **Azure Kubernetes Service** (**AKS**) cluster should be to accommodate demand
    for your solution. The following table provides a summary of key questions and
    answers for architecting a real-time solution:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.2 – Key considerations for real-time solutions  ](img/Table_12.2_B16595.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.2 – Key considerations for real-time solutions
  prefs: []
  type: TYPE_NORMAL
- en: Once you've asked and answered these questions, you're ready to start building
    out an architectural diagram. First, you'll learn a common pattern for batch solutions.
  prefs: []
  type: TYPE_NORMAL
- en: Architecting a batch solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: AutoML batch solutions are fairly easy to build once you have answered where
    your input data is coming from and where you will land your results. They always
    follow roughly the same pattern. First, you will ingest data from both on-premises
    and cloud sources through ADF and land the data in an **Azure Data Lake Storage
    Gen 2 (ADLS Gen 2)** storage account. This makes your data accessible to AMLS.
  prefs: []
  type: TYPE_NORMAL
- en: Once it's in the data lake, you use AutoML in AMLS to train and register an
    ML model. Your next step is to take that model and use it to create both a scoring
    pipeline and a training pipeline. You then orchestrate both ML pipelines through
    ADF, deciding on one schedule for your scoring pipeline and another schedule for
    your training pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: 'Training pipelines automatically register a new version of your model in AMLS,
    but you need to decide where to land the final output of your scoring pipeline.
    Natively, scoring pipelines are designed to land data in ADLS Gen 2\. Once it''s
    there, you should set up an ADF copy activity to move data from the data lake
    to its final destination. The full end-to-end architecture is presented in the
    following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.3– Common batch architecture ](img/Figure_12.1_B16595.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.3– Common batch architecture
  prefs: []
  type: TYPE_NORMAL
- en: Make similar diagrams for every batch AutoML solution you make, and reuse them
    as often as needed. Following a template architecture will make you and your team
    more productive over time.
  prefs: []
  type: TYPE_NORMAL
- en: Next, you'll learn a common architecture for real-time solutions. Take careful
    note of the similarities and differences. While the beginning is identical to
    batch architecture, the end is quite different.
  prefs: []
  type: TYPE_NORMAL
- en: Architecting a real-time solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Real-time solution architectures require more careful consideration. How will
    your end users interact with your endpoint, if at all? Are you designing a web
    app where users score data whenever they want? Do you have a streaming system
    sending thousands of signals into your endpoint at once? Once you have these questions
    answered, you can fully flesh out the architecture.
  prefs: []
  type: TYPE_NORMAL
- en: As for batch solutions, the first step involves ingesting data with ADF into
    ADLS Gen 2 and training and registering AutoML models using AMLS. That part is
    identical. Once your model is trained, you need to create a real-time scoring
    endpoint and an ML training pipeline. You'll schedule the retraining in ADF as
    usual to update your model on some sort of cadence.
  prefs: []
  type: TYPE_NORMAL
- en: 'You also need to decide where your endpoint will live. In this architecture,
    it sits on a user-facing web application. Users can pass data into the web app
    at any time during the day, at which point the results will be displayed on the
    screen and also immediately sent to ADLS Gen 2\. The following diagram displays
    the full end-to-end architecture:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.4 – Common real-time architecture ](img/Figure_12.2_B16595.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.4 – Common real-time architecture
  prefs: []
  type: TYPE_NORMAL
- en: Presenting architectures to your end users is a key part of gaining acceptance
    for your solution. End users need to understand, in a general way, how everything
    connects and works. After presenting your architecture, you should then focus
    on presenting the results of your AutoML model. Teaching users how all the pieces
    fit together is just an introduction. Displaying your model's results in a way
    that end users can understand will go a long way in getting them to champion your
    solution.
  prefs: []
  type: TYPE_NORMAL
- en: Visualizing AutoML modeling results
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Presenting the results of your AutoML model to your business is integral to
    the adoption of your solution. After all, your end users are unlikely to adopt
    your solution unless they can be sure that it meets certain standards of performance.
    There are many ways of presenting the results of ML models; the most effective
    way of presenting your results is through visualizations.
  prefs: []
  type: TYPE_NORMAL
- en: Thankfully, AutoML runs provide automatic visualizations for results of regression,
    classification, and forecasting. Regression and forecasting share identical visualizations,
    while classification is quite different. In each case, you only want to share
    a single visualization with your end user; multiple views of the same results
    are likely to only cause confusion.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, you'll first uncover what to show your end user for classification
    before moving onto regression and forecasting.
  prefs: []
  type: TYPE_NORMAL
- en: Visualizing the results of classification
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Confusion matrices, as shown in [*Chapter 5*](B16595_05_ePub.xhtml#_idTextAnchor068)*,
    Building an AutoML Classification Solution*, are the key to presenting results
    from AutoML classification training runs. Ultimately, what end users usually care
    about is how accurate your model is, and whether there is a tendency toward false
    positives or false negatives. In order to get this information, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to AML studio at [https://ml.azure.com](https://ml.azure.com).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Experiments** under **Assets** on the left-hand panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the blue link to `Iris-Multi-Classification`. This is the experiment you
    used to train a classification model in [*Chapter 5*](B16595_05_ePub.xhtml#_idTextAnchor068)*,
    Building an AutoML Classification Solution*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the blue link to your latest run. This link is found under `AutoML_` followed
    by a unique identifier string. If there are multiple runs, use your latest.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Models** near the top of your screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the blue link to the name of your highest-performing model under **Algorithm
    name**. It is likely either **StackEnsemble** or **VotingEnsemble**. You will
    know it's your highest-performing model because it will be the only one with the
    **View explanation** link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Metrics** near the top of your screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check the boxes for **accuracy** and **confusion_matrix**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On the confusion matrix, click the drop-down box and select **Normalized**.
    You should see a chart similar to the one in the following figure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.5 – Classification results for your business users ](img/Figure_12.3_B16595.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.5 – Classification results for your business users
  prefs: []
  type: TYPE_NORMAL
- en: This chart contains all of the information your end users are looking for. First,
    the model is 98.7% accurate. Next, it always identifies *Iris-setosa* and *Iris-virginica*
    correctly. Lastly, there's a 4% chance that your model will incorrectly identify
    an *Iris-versicolor* as an *Iris-virginica*.
  prefs: []
  type: TYPE_NORMAL
- en: Keep it at that level of detail when explaining your results to your business
    users. Explain that this was based on training data, and you expect that the results
    may be a little worse when applied to data that the model has never seen before.
  prefs: []
  type: TYPE_NORMAL
- en: Important tip
  prefs: []
  type: TYPE_NORMAL
- en: The larger the sample size and the more representative your sample data is of
    the real world, the more applicable your training results will be to scoring new
    data points. This is one reason why it's always important to collect as much good
    data as you can and to make sure that your data is free from sampling bias.
  prefs: []
  type: TYPE_NORMAL
- en: Most commonly, this chart will satisfy most of your end users' questions about
    your model's performance. Since the AutoML-generated graph can be difficult to
    read, one thing you can do to improve it is recreate this graph in another tool
    such as PowerPoint. Regression and forecasting also have one chart that is quite
    powerful for presenting results.
  prefs: []
  type: TYPE_NORMAL
- en: Visualizing the results of forecasting and regression
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The predicted versus true graph, first introduced in [*Chapter 4*](B16595_04_ePub.xhtml#_idTextAnchor056)*,
    Building an AutoML Regression Solution*, is key to presenting the results of both
    problem types. This graph shows the performance of your model over a range of
    scores. It''s a little bit more difficult to explain than the confusion matrix,
    however, and requires you to carefully explain it to your end users. To access
    it, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to AML studio at [https://ml.azure.com](https://ml.azure.com).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Experiments** under **Assets** on the left-hand panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the blue link to open `Diabetes-Sample Regression`. This is the experiment
    you used to train a regression model in [*Chapter 4*](B16595_04_ePub.xhtml#_idTextAnchor056)*,
    Building an AutoML Regression Solution*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the blue link to open your latest run. This link is found under `AutoML_`
    followed by a unique identifier string. If there are multiple runs, use your latest
    run.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Models** near the top of your screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the blue link to open the name of your highest-performing model under
    **Algorithm name**. It is likely either **StackEnsemble** or **VotingEnsemble**.
    You will know it's your highest-performing model because it will be the only one
    with the **View explanation** link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Metrics** near the top of your screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Check the boxes for **mean_absolute_percentage error** and **predicted_true**.
    You should see a chart similar to the one in the following figure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.6 – Regression/forecasting results for your business end users
    ](img/Figure_12.4_B16595.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.6 – Regression/forecasting results for your business end users
  prefs: []
  type: TYPE_NORMAL
- en: '**Mean absolute percentage error** (**MAPE**) is usually the best regression
    metric to use with business errors. In this case, it shows that your AutoML model
    is usually 39.4% off, not especially impressive compared to your near-perfect
    Iris model. Business people tend to find MAPE to be the easiest metric to understand,
    as it doesn''t require a background in statistics or a deep understanding of standard
    deviation or variance.'
  prefs: []
  type: TYPE_NORMAL
- en: The predicted versus true graph shows how well your model performs at predicting
    scores across a range of values. Ideally, you want your blue line (**Average Predicted
    Value**) to match your green line (**Ideal**). At the very least, you want most
    of your green line (**Ideal**) to fall within the shaded boundaries around the
    blue line (**Average Predicted Value**).
  prefs: []
  type: TYPE_NORMAL
- en: You want to explain that for scores of 74.4 to around 250, your model does a
    pretty good job of predicting the true score. Outside of that range, your model
    performs worse, tending to overpredict true scores beneath 74.4 and underpredict
    scores above 250\. Use the following histogram to point out how the training data
    was distributed. Perhaps collecting more sample data points at the higher end
    and lower end of the spectrum will improve your model.
  prefs: []
  type: TYPE_NORMAL
- en: 'Occasionally, someone with a background in statistics may be among your end
    users. If this is the case, you also want to show them the residuals graph that
    you can obtain by checking the **Residuals** box. They will want to know if your
    model shows evidence of bias, and by showing a bell-shaped residuals histogram
    as shown in the following figure, you can put their minds at ease:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.7 – Residuals histogram for regression and forecasting ](img/Figure_12.5_B16595.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.7 – Residuals histogram for regression and forecasting
  prefs: []
  type: TYPE_NORMAL
- en: Forecasting is identical to regression in terms of presenting results; they
    use identical graphs. By showing the right visualization to your end users, you
    can assuage them of any concerns they have about performance. However, they usually
    ask a follow-up question. *How does your model actually work?* To answer that
    question, you need to use AutoML's built-in explainability features.
  prefs: []
  type: TYPE_NORMAL
- en: Explaining AutoML results to your business
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To realize business value, your AutoML models must be implemented and used by
    the business. A common obstacle to implementation is a lack of trust stemming
    from a lack of understanding of how ML works. At the same time, explaining the
    ins and outs of how individual ML algorithms work is a poor way to gain trust.
    Throwing math symbols and complicated statistics at end users will not work unless
    they already have a deep background in mathematics.
  prefs: []
  type: TYPE_NORMAL
- en: 'Instead, use AutoML''s inbuilt explainability. As long as you enable explainability
    when training models, you can say exactly which features AutoML is using to generate
    predictions. In general, it''s a good practice to do the following four things:'
  prefs: []
  type: TYPE_NORMAL
- en: Always enable explainability when training any AutoML model.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When presenting results to the business, first show performance, then show explainability.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rank the features in order of most to least important.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Drop any unimportant features from future training runs.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Simpler models are easier to understand and lead to faster acceptance among
    end users. For this reason, you should always emphasize which features the model
    is using to train.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to access explainability, use the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to AML studio at [https://ml.azure.com](https://ml.azure.com).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Experiments** under **Assets** on the left-hand panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the blue link to open `Diabetes-Sample Regression`. This is the experiment
    you used to train a regression model in [*Chapter 4*](B16595_04_ePub.xhtml#_idTextAnchor056)*,
    Building an AutoML Regression Solution*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the blue link to open your latest run. This link is found under `AutoML_`
    followed by a unique identifier string. If there are multiple runs, use your latest.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Models** near the top of your screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **View explanation**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the first ID number under **Explanation ID**. These are explanations for
    your raw features that AutoML used to train your model.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Aggregate feature importance** to see which raw features were most important
    in training your AutoML model.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Use the scroller to see the top 10 features used to train your model as in
    the following figure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.8 – Explainability visualization ](img/Figure_12.6_B16595.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.8 – Explainability visualization
  prefs: []
  type: TYPE_NORMAL
- en: This visualization shows that the two most important features used to train
    the `Diabetes-AllData-Regression-AutoML` model were `S5` and `BMI`. Blood pressure
    (`BP`), `S3`, and `SEX` were also important, but not nearly as much as `S5` and
    `BMI`. To train the model, `S5` and `BMI` were both nearly 5 times as important
    as `SEX`. The remaining five features, `S2`, `S6`, `S1`, `AGE`, and `S4`, were
    only minor contributors to your ML model; the model didn't find them important.
  prefs: []
  type: TYPE_NORMAL
- en: Important tip
  prefs: []
  type: TYPE_NORMAL
- en: It's very likely that your business partners will try to infer causation from
    this graph. It's important to keep in mind that, without controlled scientific
    experimentation, explainability within any ML models can only show correlation,
    not causation.
  prefs: []
  type: TYPE_NORMAL
- en: Present this chart to your end users to gain their trust; it's easy to understand
    and shows them exactly which features are being used by AutoML to make predictions.
    Not only can you show them which features are being used, but you can also show
    them the relative importance of each of the columns of your dataset. Use this
    chart to tell a story that's engaging and makes sense; you can even begin by showing
    this chart to your business audience and asking them for their interpretations.
    Let them tell the story and make the solution on their own.
  prefs: []
  type: TYPE_NORMAL
- en: It's best to show explainability slides after you have explained architecture
    and performance. Architecture explains how the solution works in an end-to-end
    format without diving too deep into technical details. Performance gives your
    users confidence in how accurate they can expect the model to be at any given
    time. Logically, your users will then inquire as to how your AutoML model is making
    predictions. This is where you show the explainability chart instead of making
    the mistake of diving deep into statistics and algorithms.
  prefs: []
  type: TYPE_NORMAL
- en: Having covered architecture, performance visualizations, and explainability,
    you now have all of the tools you need to gain the trust and acceptance of your
    end users. The next section is going to expand upon the various places you can
    use AutoML to expand the breadth of solutions that you can develop. Even when
    using AutoML outside of AMLS, keep in mind to always use explainability.
  prefs: []
  type: TYPE_NORMAL
- en: Using AutoML in other Microsoft products
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this book, you''ve learned how to use AutoML on Azure, but you can also
    use AutoML in a wider suite of Microsoft products. While you can easily create
    and productionalize just about any AutoML solution following the architectural
    patterns in the *Architecting AutoML solutions* section of this chapter, there
    are certain scenarios in which you may want to use AutoML on other Microsoft platforms.
    You can find AutoML in the following places:'
  prefs: []
  type: TYPE_NORMAL
- en: PowerBI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure Synapse Analytics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ML.NET
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HDInsight
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SQL Server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure Databricks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Even though AutoML is available for these services, there are many differences
    of which you should be aware. Some services are code-free while others are code-only.
    Some services preclude you from training forecasting algorithms and others are
    based on entirely different ML frameworks. In this section, you will be guided
    through the general capabilities service by service.
  prefs: []
  type: TYPE_NORMAL
- en: Using AutoML within PowerBI
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**PowerBI** is Microsoft''s business analytics solution that lets users visualize
    data to gain rapid insights. It''s one of the most popular and powerful dashboarding
    tools on the market, and both the *Power BI Premium* and *Power BI Embedded* licenses
    of the software allow you to use AutoML directly with the tool. This is a no-code
    version of AutoML that works similarly to the AutoML GUI you can find in AML studio,
    as seen in *Figure 12.7*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.9 – AutoML in PowerBI](img/Figure_12.7_B16595.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.9 – AutoML in PowerBI
  prefs: []
  type: TYPE_NORMAL
- en: In this case, AutoML is integrated with **PowerBI dataflows**, a self-service
    data preparation tool. As with AutoML on Azure, you can use it to train models,
    save (register) models, and use models to make predictions that can be saved as
    new columns in your data. Unlike AutoML on Azure, it only supports regression
    and classification problems, not forecasting. Another feature that both services
    have in common is model explainability.
  prefs: []
  type: TYPE_NORMAL
- en: If you're a data analyst who regularly builds data visualization dashboards,
    AutoML on PowerBI is a great tool to add to your repertoire. You can easily add
    predictions into your data directly and visualize them with little effort. AutoML
    on PowerBI is also great for one-off ML jobs. Azure Synapse Analytics is another
    common service where data analysts use AutoML.
  prefs: []
  type: TYPE_NORMAL
- en: Using AutoML within Azure Synapse Analytics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Azure Synapse Analytics** (**ASA**) is Azure''s premier data analytics service.
    It features an SQL data warehouse for big data, Spark-based analytics, and ADF-style
    ETL pipelines, all in one place. If you have an AMLS workspace and link it to
    ASA using a linked service similar to ADF, you can also use Azure AutoML directly
    within Synapse.'
  prefs: []
  type: TYPE_NORMAL
- en: In order to use AutoML, you will need to have a Spark cluster and create Spark
    tables from your data. **Spark** is an open source analytics engine used to quickly
    process big data through distributing workloads across a cluster of virtual machines.
    With ASA, you can code Spark solutions with either PySpark (a version of Python),
    C#, Spark SQL, or Scala. Spark tables are simply data tables made within this
    framework.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have a Spark table, all you need to do is right-click it, click **Machine
    Learning**, and then click **Enrich with new model**. You''ll then be greeted
    by a very familiar interface: the AutoML GUI you first used in [*Chapter 3*](B16595_03_ePub.xhtml#_idTextAnchor044)*,
    Training Your First AutoML Model*. Since ASA directly uses your AMLS workspace
    to train models using AutoML, the capabilities and user experience are identical.
    You can also code an AutoML solution using PySpark within ASA.'
  prefs: []
  type: TYPE_NORMAL
- en: It's best to think of Synapse's AutoML capability as a shortcut rather than
    a separate experience from AMLS. Use it whenever you're already working within
    ASA and would like to quickly train an ML model using data inside an ASA data
    warehouse.
  prefs: []
  type: TYPE_NORMAL
- en: Using AutoML with ML.NET
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**.NET Framework** is a software development framework that lets you build
    applications in C#, F#, and Visual Basic. **ML.NET** lets you add ML capabilities
    to .NET Framework and AutoML is one of its many capabilities. You can code ML.NET
    solutions into your application or use the **ML.NET Model Builder** to create
    AutoML solutions through a guided user interface.'
  prefs: []
  type: TYPE_NORMAL
- en: One interesting aspect of the ML.NET Model Builder is that you can use AutoML
    for a variety of predefined scenarios, including regression, classification, image
    classification, text classification, and object detection. You are thus not limited
    to only tabular data but can use automated ML with images too.
  prefs: []
  type: TYPE_NORMAL
- en: Try using AutoML within ML.NET if you are building a .NET application and would
    like to easily add ML to it. This is the most appropriate use case, and it assumes
    that you have a great deal of experience developing within  .NET Framework. If
    you are not a .NET developer, you're better off developing your AutoML solutions
    within AMLS workspaces.
  prefs: []
  type: TYPE_NORMAL
- en: Using AutoML on SQL Server, HDInsight, and Azure Databricks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: AutoML is also available on a variety of other services, including **SQL Server**,
    **HDInsight**, and **Azure Databricks**. SQL Server is Microsoft's well-known
    **relational database management system** (**RDBMS**), whereas HDInsight is Azure's
    version of Hadoop for processing big data. Azure Databricks is the premier cloud-based
    Spark tool on Azure for big data processing and analytics. All three of the services
    can make use of Azure AutoML through Python.
  prefs: []
  type: TYPE_NORMAL
- en: When working with these tools, you will first need to create an AMLS workspace,
    install the AzureML-SDK, and connect your AMLS workspace to the other service.
    Then, you will need to code a solution. With HDInsight and Databricks, you will
    use Spark, whereas in SQL Server you will need to use a `sp_execute_external_script`
    stored procedure to run Python code. **Stored procedures** are reusable bits of
    SQL code that you can save and repeatedly use.
  prefs: []
  type: TYPE_NORMAL
- en: An important difference between these three services and ASA, PowerBI, and ML.NET
    is that there is no guided user interface option for AutoML. You must create solutions
    with code. If you are already building an application or data pipeline in SQL
    Server, HDInsight, or Azure Databricks and would like to include AutoML as part
    of that solution, feel free to do model training within those services.
  prefs: []
  type: TYPE_NORMAL
- en: Another use case for Azure Databricks specifically is when you would like to
    train an AutoML model with very large data (100 GB dataframes); it's then appropriate
    to run AutoML using the Spark distributed framework.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you're familiar with the many different tools in which AutoML is available,
    you will have a lot more flexibility in building AutoML solutions. Just because
    you've built a solution, however, doesn't mean that people will use it. To conclude
    this chapter and the book, the last section will focus on strategies and techniques
    to gain end user acceptance, the key to realizing business value.
  prefs: []
  type: TYPE_NORMAL
- en: Realizing business value
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Realizing business value ultimately comes down to whether your business partners
    choose to act on the predictions of your ML models. Without action, the work of
    data scientists amounts to little more than a science experiment. Your business
    partners must be motivated and willing to make your predictions a part of their
    decision-making process. Gaining their trust is paramount.
  prefs: []
  type: TYPE_NORMAL
- en: In order to gain the trust of your company's decision-making leadership, you
    first have to ascertain what kind of solution you are building with AutoML. Some
    solutions are rather easily and rapidly adopted, while others are likely to encounter
    hard resistance.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are key two factors that determine how readily your AutoML solution is
    accepted: whether your tool is replacing an existing solution and whether your
    tool is directly involved in an automated decision process or is assisting human
    decision makers. *Figure 12.8* shows how difficult it is to gain acceptance based
    on these factors:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.10– Difficulty of gaining traction with business users based on
    key factors](img/Figure_12.8_B16595.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.10– Difficulty of gaining traction with business users based on key
    factors
  prefs: []
  type: TYPE_NORMAL
- en: The more automated your solution is, the easier it is to gain acceptance. Processes
    that run under the hood, after all, are not subject to human supervision. There
    is no human manually deciding whether each credit card transaction is fraudulent;
    this task can only be accomplished by automated processes.
  prefs: []
  type: TYPE_NORMAL
- en: Since there's no human in the loop in the first place, you're not going to encounter
    resistance when trying to improve automated processes with ML models. In contrast,
    when you try to augment a human decision maker with AI-generated predictions,
    you are likely to encounter skepticism and resistance.
  prefs: []
  type: TYPE_NORMAL
- en: Likewise, entirely new solutions are much more easily accepted than tools that
    replace old solutions. While this is also true for replacing existing automated
    systems with AI solutions, this is even truer when you are trying to replace existing
    systems that executives and managers use to make decisions. Many people are slow
    to embrace change, especially change that they don't fully understand.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we'll introduce strategies to gain trust and get business users
    to adopt your AutoML-based solution based on the key factors.
  prefs: []
  type: TYPE_NORMAL
- en: Getting the business to adopt a new, automated solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is easy. Imagine your company is building a new sales portal and they want
    to create a system that automatically generates product recommendations for online
    shoppers as they browse items on your website. You propose to build a recommendation
    system training an ML model using AutoML and scoring the model using a real-time
    scoring endpoint hosted on AKS.
  prefs: []
  type: TYPE_NORMAL
- en: Very likely, the response to your proposal will be overwhelmingly positive.
    Your executive leadership will be impressed by your adoption of cutting-edge AI
    technology. Business management in charge of the project will be happy just to
    have a high-performing solution. Your IT department will be interested in learning
    the new technology and will be more than happy to help you implement a new, high-profile
    project.
  prefs: []
  type: TYPE_NORMAL
- en: If there's any resistance at all, it will be from people who will want to get
    a better understanding of how your AI solution works. For this reason, it's recommended
    that you provide model explanations along with a general overview of how ML works
    and how AutoML works. People are more likely to support your project if they can
    explain how it works to other people, so work at developing that understanding.
  prefs: []
  type: TYPE_NORMAL
- en: Getting the business to replace an older, automated process
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Replacing an older automated solution with one driven by ML is a bit more difficult
    than creating an entirely new process. This is usually because business users
    already understand how the old process works. If you are trying to replace a rules-based
    system, based on a series of if-then statements, this is even more difficult because
    the old process was easier for a human being to understand.
  prefs: []
  type: TYPE_NORMAL
- en: In this case, your best strategy is to compare the results of your new AutoML-based
    solution with the results of the old solution side by side for weeks or months.
    Do not immediately shut down the old process; you should run both processes simultaneously
    until your end users are convinced and have faith in the output of your ML model.
    Only then should you turn off and permanently shut down the old solution.
  prefs: []
  type: TYPE_NORMAL
- en: You may think that explaining how ML and AutoML works would be your best strategy
    here, but end users used to one system mistakenly assume that AI works similarly
    to the old solution. Dispelling this notion can be difficult and the extreme difference
    in approach may make some users lose trust. For this reason, it's best to orient
    your end users to results first before providing them with deep, detailed explanations.
    Once they trust your results, they will naturally open up to the process.
  prefs: []
  type: TYPE_NORMAL
- en: Getting the business to adopt a new, decision-assistance tool
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One key thing to realize when providing AI-generated recommendations or predictions
    to a group of decision makers is that, for the problem at hand, they've been making
    decisions for years. They may not yet have a tool, but they do have their gut
    intuition and years of experience. Thus, they're often skeptical of any new tool
    or technology that proclaims it will help them in their job. Remember that no
    one ever rose to the top of a company by making bad decisions.
  prefs: []
  type: TYPE_NORMAL
- en: In this case, it's best to try to assuage their fears by assuring them that
    this is just a tool to provide them with predictions or recommendations. It's
    advice. It may be AI-generated, but at the end of the day, advice is advice, and
    the decision ultimately still rests in their hands.
  prefs: []
  type: TYPE_NORMAL
- en: One analogy that's useful is that, in the world of chess, AI may beat grandmasters,
    but grandmasters assisted by AI can beat AI. Humans ultimately remain in control.
  prefs: []
  type: TYPE_NORMAL
- en: You should also stress the statistical nature of ML-generated predictions. They
    are not perfect, nor are they infallible. If you forecast market share to fall
    to 11.3% next month with a 95% confidence interval of plus/minus 0.2% and it actually
    falls to 11.1%, your model was correct and within the expected range.
  prefs: []
  type: TYPE_NORMAL
- en: If your model tells you a certain basketball player has a 70% chance of doing
    well on your team and that player fails, then your model was still right, but
    the 30% chance happened.
  prefs: []
  type: TYPE_NORMAL
- en: Important tip
  prefs: []
  type: TYPE_NORMAL
- en: When making an AI for decision assistance, such as most forecasting models,
    it's important that your model is as accurate as possible and doesn't show wide
    swings in accuracy. Nothing loses trust as fast as a widely fluctuating model.
  prefs: []
  type: TYPE_NORMAL
- en: By stressing that you are only providing advice and that the advice is statistical
    in nature, your model has a higher chance of being used by the business over a
    long period of time. They won't feel threatened if it's just advice and they won't
    stop using your model when the statistically less likely thing happens because
    they understand that it will happen once in a while.
  prefs: []
  type: TYPE_NORMAL
- en: Getting the business to replace an old decision assistance tool
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Perhaps the most difficult type of project regarding gaining acceptance from
    a business audience is when you replace an old, trusted tool with one driven by
    ML. In this case, the tool you are replacing may have existed for many years.
  prefs: []
  type: TYPE_NORMAL
- en: Many experienced users are likely to object to a new process or solution, irrespective
    of how much it improves the current state. This is due to **familiarity bias**,
    the preference of human beings of the familiar to the unfamiliar.
  prefs: []
  type: TYPE_NORMAL
- en: Overcoming familiarity bias and getting business users to adopt your solution
    is quite a challenge and needs to be approached systematically. First, like replacing
    an older, automated process, you should not shut down the old solution; you need
    to keep it running so you can compare results side by side. If you do not do this,
    it is likely that experienced users will negatively and unfairly compare your
    tool to the old solution; they need to see that it is an improvement upon the
    old solution.
  prefs: []
  type: TYPE_NORMAL
- en: Comparing results side by side is necessary but not sufficient to gaining end
    user acceptance. Additionally, you need the users to understand your AutoML-generated
    solution.
  prefs: []
  type: TYPE_NORMAL
- en: One common criticism of AI solutions is that it is difficult to understand how
    they work. In contrast, the system you are replacing will have had years to teach
    its users its ins and outs. Thus, you should present explainability slides at
    the forefront of your solution; you should also explain the architecture and explain
    exactly how AutoML works, when you plan on retraining models, and how you plan
    on continually evaluating and monitoring the solution.
  prefs: []
  type: TYPE_NORMAL
- en: A person-by-person approach to gaining trust will also go a long way to your
    solution's success. Only present your solution to the entire group after you've
    had a series of one-on-one meetings with all end users individually.
  prefs: []
  type: TYPE_NORMAL
- en: If there are too many end users, identify and meet the most influential people
    within the group. By addressing their concerns, training them on their solutions,
    and encouraging them to talk to other end users, you will be able to build a group
    of people who will champion your solution, increasing its chances of long-term
    success.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order of difficulty, from easiest to hardest, to gain end-user trust and
    guarantee adoption over time, here''s the list of solution types: an AutoML solution
    for a new automated process, an AutoML solution replacing an automated process,
    an AutoML solution to help human beings make decisions, an AutoML solution to
    replace an existing decision-assistance tool. The following table provides a summary:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.11 – How to gain trust based on the type of AutoML solution ](img/Table_12.3_B16595.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.11 – How to gain trust based on the type of AutoML solution
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, just because you build a highly performing AutoML solution does
    not mean it will be adopted by the business. You also need to work just as hard
    at gaining your end users' trust. By identifying the type of AutoML solution you
    are building and following the appropriate guidelines, you will be able to gain
    trust one end user at a time. Once enough people champion your solution, it will
    be well on its way to becoming a trusted tool set up for long-term success and
    adoption.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Gaining end user acceptance can be difficult, but having the right approach
    can make it a lot easier. Walking your end users through an architectural diagram,
    carefully explaining the model's performance to them using the right metrics,
    and spending time explaining which features the model is using to make predictions
    are all key to selling your solution to end users. Furthermore, you can tailor
    your message based on what type of solution you are building to gain end user
    trust.
  prefs: []
  type: TYPE_NORMAL
- en: You are now at the end of the book and I'd like you to reflect on the journey.
    You've acquired many technical skills, including the ability to train AutoML models,
    deploy AutoML models for scoring in batch and real-time scoring, and design, create,
    and implement full end-to-end AutoML solutions. You also have an approach to sell
    those solutions to your business partners, gain their trust, and, ultimately,
    realize value. By crafting powerful solutions with AutoML on Azure, you'll be
    able to make a lasting impact and advance your career.
  prefs: []
  type: TYPE_NORMAL
