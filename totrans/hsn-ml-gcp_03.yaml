- en: Google Cloud Storage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will explore two data storage services from the Google Cloud
    platform, Google Storage, for files, and Google SQL, for structured data. Google
    Storage is a file-hosting service that allows you to store files in the cloud.
    Quite simple and straightforward, it is very similar to the Amazon S3 service.
    To go beyond basic usage, we will look into some advanced subjects, such as signed-URLs,
    collaboration bucket settings, optimizing upload speeds, and transferring big
    datasets
  prefs: []
  type: TYPE_NORMAL
- en: Google SQL is Google's simple SQL database service. Less developed at the moment
    than Amazon SQL services in terms of types of SQLs, it comes with MySQL as the
    main database. A beta version of Postgre is also available. We will look at the
    differences between the two in terms of respective functionalities.
  prefs: []
  type: TYPE_NORMAL
- en: Making services talk to one another, or more precisely, allowing data transfers
    between different data stores and data consumers, is usually where the difficulty
    lies when using cloud-based solutions for data science projects.
  prefs: []
  type: TYPE_NORMAL
- en: Issues such as volume, latency, and throughput can affect the speed of your
    scripts and the efficiency of your work. Setting the right level of permissions
    so that your data can be accessed within your project environment while still
    being protected from outside access is also key.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn:'
  prefs: []
  type: TYPE_NORMAL
- en: How to store files on Google Storage with gsutil
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to create databases and seed them with data on Google SQL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to access your Google Storage files and your Google SQL database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: At the end of the chapter, you will be able to upload data and manage it using
    the services provided by the Google Cloud platform and understand the potential
    of Google Cloud SQL for the creation of relational database management systems.
  prefs: []
  type: TYPE_NORMAL
- en: Google Cloud Storage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Cloud storage is a model for storing data on computers available on the network,
    where the data is stored on multiple servers, real and/or virtual, generally hosted
    at third-party facilities or on dedicated servers. Through this model, it is possible
    to access personal or business information, whether it be videos, music, photographs,
    databases, or files, without knowing the physical location of the data, from any
    part of the world with any suitable device. The advantages of this methodology
    are numerous: infinite capacity of memory space, payment only of the actual amount
    of memory used, files accessible from anywhere in the world, highly reduced maintenance,
    and greater security, as the files are protected from theft, fire, or damage that
    may occur on local computers.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Google Cloud Storage is the Google proposal for Cloud storage: it''s a developer
    service provided by Google that allows you to save and manipulate data directly
    on Google''s infrastructure. In more detail, Google Cloud Storage provides a programming
    interface that makes use of simple HTTP requests to perform operations on its
    infrastructure. With Google Cloud Storage you can perform the following operations:
    uploading a file, downloading a file, deleting a file, obtaining a list of files,
    or obtaining the size of a given file. Each of these HTTP requests contains information
    about the method used and the resource to request. It follows that it becomes
    possible to create an application that, using these HTTP requests, provides a
    service in which applications save data remotely, generally via third-party servers.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The Google Storage platform is an enterprise storage solution that offers three
    levels of storage with different accessibility needs and associated pricing:'
  prefs: []
  type: TYPE_NORMAL
- en: Standard storage is for fast access to large amounts of data. At $0.026/GB,
    it offers a high speed of response to requests.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Durable Reduced Availability** (**DRA**) is for long-term data storage and
    infrequent access. It is priced lower, at $0.02/GB.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, nearline storage is for even-less-frequent access. It is the cheapest
    version of the service, with much longer response time. It is the cheapest option,
    currently priced at $0.01/ GB.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Boxâ€“storage versus drive
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Google Drive is used for storing personal files. It is free up to 15 GB across
    all your different personal services (email, photo, and so on). It offers further
    data storage volume for a monthly fee (for instance $9.99/month for 1 TB). But,
    compared to Google Storage, there is no data compression or data encryption. It
    is not offered by Google as an enterprise platform with associated features, support,
    and reliability. There are no advanced management features, such as metadata,
    and no data organization management through buckets. There are also no advanced
    storage tiers (cold versus hot data).
  prefs: []
  type: TYPE_NORMAL
- en: 'The main features of the Google Drive service are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: There is no data storage based on tiers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is not a commercial solution
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It does not support advanced data management features
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The storage plan is limited to 30 TB
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To understand the potential offered by Google Cloud Storage, see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: It provides unlimited space
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It has more security than Google Drive thanks to the use of OAuth
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It offers advanced storage levels
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It provides REST API support for advanced integration of enterprise services
    and applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It has the possibility to resume data transfer after an error
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By analyzing only some of the features offered by Google Cloud Storage, it appears
    evident its superiority justifies the cost.
  prefs: []
  type: TYPE_NORMAL
- en: Accessing control lists
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The documentation says it best, **Access Control Lists** (**ACLs**) allow you
    to control who can read and write your data, and who can read and write the ACLs
    themselves.
  prefs: []
  type: TYPE_NORMAL
- en: If not specified at the time an object is uploaded (e.g., via the `gsutil cp
    -a` option),
  prefs: []
  type: TYPE_NORMAL
- en: objects will be created with a default object ACL set on the bucket (see `gsutil
    help`
  prefs: []
  type: TYPE_NORMAL
- en: '`defacl` [https://cloud.Google.com/storage/docs/gsutil/commands/defacl](https://cloud.Google.com/storage/docs/gsutil/commands/defacl)).
    You can'
  prefs: []
  type: TYPE_NORMAL
- en: 'replace the ACL on an object or bucket using the gsutil acl set command, or
    modify the existing ACL using the `gsutil acl ch` command (see `gsutil help acl`:
    [https://](https://cloud.google.com/storage/docs/gsutil/commands/acl)[cloud.Google.com/storage/docs/gsutil/commands/acl](https://cloud.google.com/storage/docs/gsutil/commands/acl)).'
  prefs: []
  type: TYPE_NORMAL
- en: ACL are assigned to objects (files) or buckets. By default all files in a bucket
    have the same
  prefs: []
  type: TYPE_NORMAL
- en: ACL as the bucket they're in.
  prefs: []
  type: TYPE_NORMAL
- en: 'A couple of points to remember are:'
  prefs: []
  type: TYPE_NORMAL
- en: There is no write access for objects; attempting to set an ACL with write
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: permission for an object will result in an error
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The object ACL is what determines read access independently of the bucket ACL
    read settings. (the folder permissions does not override the file access. )
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Several presets are available. The available canned ACLs are:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Project-private:** Gives permission to the project team based on their roles.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Anyone who is part of the team has read permission, and project owners and
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: project editors have owner permission. This is the default ACL for newly created
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: buckets. This is also the default ACL for newly created objects unless the default
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: object ACL for that bucket has been changed. For more details see gsutil help
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: projects.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Private:** Gives the requester (and only the requester) owner permission
    for a'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: bucket or object.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Public-read:** Gives all users (whether logged in or anonymous) read permission.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When you apply this to an object, anyone on the internet can read the object
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: without authenticating.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Public-read-write:** Gives all users read and write permission. This ACL
    applies'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: only to buckets. Setting a bucket to public-read-write will allow anyone on
    the
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: internet to upload anything to your bucket. You will be responsible for this
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: content. There are other settings, check the doc.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Access and management through the web console
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous sections, we introduced the service provided by the GCP. Now
    it's time to see how to access the service and how to manage it. To do this, Google
    has created a web-based interface for completely online service management and
    gsutil, a command-line tool that allows you to perform all the operations you
    need on the service.
  prefs: []
  type: TYPE_NORMAL
- en: gsutil
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: gsutil is the command-line tool, a subset of `gcloud` shell scripts, that allows
    you to manage buckets and objects (files) on Google Storage. The operations available
    via gsutil go from simple straightforward commands for creating buckets and moving
    files around, to management commands to manage settings, storage class, and permissions.
    More advanced commands include setting access control via ACLs, defining life
    cycle rules (delete all files after 1 year), logging, creating notifications,
    and troubleshooting with perfdiag.
  prefs: []
  type: TYPE_NORMAL
- en: Let's start with the simple commands. We will create a bucket named `packt-gcp`,
    upload some files, get info on these files, move them around, and change the storage
    class.
  prefs: []
  type: TYPE_NORMAL
- en: gsutil cheatsheet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following is a list of the most-used commands that we can issue via gsutil:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Creating a bucket named `packt-gcp`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`gsutil mb gs://packt-gcp`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Uploading a file to the bucket:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`gsutil cp gs://packt-gcp/`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Creating a subfolder in the bucket:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`gsutil cp your-file gs://packt-gcp/`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Listing the folder:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`gsutil ls gs://packt-gcp/`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Getting help on gsutil commands:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`gsutil help`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'How much storage are we using (the `-h` makes it readable):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`gsutil du -h gs://packt-gcp/`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Copying a whole folder to a bucket:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`gsutil cp -r gs://packt-gcp/`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For instance, I have a local `./img` directory with some images. I can copy
    the whole directory and create the bucket subdirectory at the same time with the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s analyze an option that is particularly useful: I refer to the `-m` flag.
    If you are performing a sequence of `gsutil` operations it may run significantly
    faster if you instead use `gsutil -m -o`, this means to run in parallel. This
    can significantly improve performance if you are performing operations on a large
    number of files over a reasonably fast network connection but may make performance
    worse if you are using a slower network.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `-m` flag is particularly suited to the following commands: `ls`, `mb`,
    `mv`, `rb`, and `du`.'
  prefs: []
  type: TYPE_NORMAL
- en: Advanced gsutil
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Previously, we have seen some simple basic commands that we can import using
    `gsutil`. But with this tool we can do something else:'
  prefs: []
  type: TYPE_NORMAL
- en: '`gsutil` supports wildcards (and ?) and limits a wildcard to files. To include
    folders in the wildcard target double the sign: `gsutil ll gs:///**.txt` will
    list all the text files in subdirectories.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`gsutil` requires use of UTF-8 character encoding. For Windows: to use Unicode
    characters you need to run this command in the command shell before the first
    time you use `gsutil` in that shell: `chcp 65001`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `.boto` file in your local machine user path is the configuration file
    for the gsutil CLI. You can edit it directly or via the `gsutil``config` command.
    Some interesting parameters in the `.boto` file are as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`parallel_composite_upload_threshold`: This is used to specify the maximum
    size of a file to be uploaded in a single stream. Files larger than this threshold
    will be uploaded in parallel. The `parallel_composite_upload_threshold` parameter
    is for the moment disabled by default.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`check_hashes`: This is used to enforce integrity checks when downloading data,
    always, never, or conditionally.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`prefer_api`: This parameter value is JSON or XML.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`aws_access_key_id`: This is used for interoperability with S3.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`aws_secret_access_key`: This is used for interoperability with S3.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Signed URLs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Signed URLs is a mechanism for query string authentication for buckets and objects.
    Signed URLs provide a way to give time-limited read or write access to anyone
    in possession of the URL, regardless of whether they have a Google account.
  prefs: []
  type: TYPE_NORMAL
- en: Why use a signed URL? Sometimes, it is necessary to control the access of users
    who do not have a Google account. To grant these users access to Google Cloud
    Storage we can provide them with a signed URL, which allows the user to read,
    write, or delete access to that resource for a limited period of time. Access
    to the resource is allowed to the owner of the URL until the URL expires.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two ways to create a signed URL:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating signed URLs with `gsutil`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating signed URLs with a program.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The easiest way to create a signed URL is to use the `gsutil signurl` command.
    To do this, you first need to generate a private key or use an existing private
    key. To create a private key you first have to create an OAuth client ID for a
    service account.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a new private key visit: [https://console.cloud.Google.com/apis/credentials?project=packt-gcp](https://console.cloud.google.com/apis/credentials?project=packt-gcp)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow the instructions and download the file. Two formats are available:'
  prefs: []
  type: TYPE_NORMAL
- en: '**JSON**: Required if you are using application default credentials in a production
    environment outside of Google Cloud platform'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**PKCS12**: Supported by many different programming languages and libraries'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To restrict the role that can access GCP: Get JSON file downloaded to your
    computer.'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can now create a signed URL for one of your files with `gsutil` via the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Remember, signed URLs do not work on directories. If you want to give access
    to multiple files you can use wildcards as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: But that will generate one signed URL per `.png` file in the `img/` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Signed URLs can also be used to upload files (`-m PUT` and `POST`) and specify
    the content type with `-c text/plain` or `-c image/jpg`.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a bucket in Google Cloud Storage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we said previously, a bucket is a container that holds your data. Everything
    saved in Google Storage must be contained within a bucket, corresponding to the
    folders. You can use them to organize and control access to data, but, unlike
    folders, you can not create sub-buckets. In Google Storage, individual data is
    saved in the form of objects. Such objects can be files of any type, extension,
    and size; tables created with BigQuery are also considered objects, as we will
    see in [Chapter 4](862553c5-4bb7-4a5c-b7bd-03f0eb8d413e.xhtml), *Querying Your
    Data with BigQuery*. All objects related to a single job must be contained in
    a bucket.
  prefs: []
  type: TYPE_NORMAL
- en: Objects are immutable, so an object cannot be edited directly in Google Storage.
    It is important to specify that it is not possible to make any kind of changes
    to the content of an object; if you want to modify an object stored in Google
    Storage it can only be replaced. In case you do not want to delete it and reload
    it, you can do the same thing with just one operation, by overwriting it.
  prefs: []
  type: TYPE_NORMAL
- en: Google Storage namespace
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Google Storage uses a hierarchical structure to store buckets and objects. All
    buckets are in this one environment, and all objects are also inside a hierarchy
    within a certain bucket. Based on this hierarchical structure, a bucket name has
    to be unique across all the existing Google Storage buckets. Each bucket name
    must be unique across the entire Cloud storage namespace.
  prefs: []
  type: TYPE_NORMAL
- en: To name a bucket, we cannot use a name that has already been chosen by another
    user. While objects must have a unique name only within a given bucket, we can
    therefore have multiple buckets that always contain an object with the same name.
  prefs: []
  type: TYPE_NORMAL
- en: Naming a bucket
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To name a bucket, we have to follow some rules imposed by the fact; as we anticipated,
    all the buckets reside in the only Google Storage namespace. Bucket names must
    comply with the following rules:'
  prefs: []
  type: TYPE_NORMAL
- en: They must be 3 to 63 characters long
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: They must start and end with a number or a letter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: They must contain only lowercase letters, numbers, dots, and dashes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: They cannot be represented as an IP address in dotted decimal notation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: They cannot start with the prefix GOOG
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: They cannot contain two adjacent points or a dash before or after a point
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, it should be noted that once you have created the name of a bucket,
    you cannot change it. To change it, you should create a new bucket with the desired
    name and move the contents from the old bucket to the new bucket.
  prefs: []
  type: TYPE_NORMAL
- en: Naming an object
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In Google Storage, individual data is saved in the form of objects. Object
    names must comply with the following rules:'
  prefs: []
  type: TYPE_NORMAL
- en: They can contain any sequence of valid Unicode characters, of length 1-1,024
    bytes when UTF-8 encoded
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: They cannot contain carriage return or line feed characters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: They cannot start with well-known/acme-challenge
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To eliminate the limitations given by the flat hierarchy, we can use the slash
    (`/`) character in the object names. For example, if we have to use the same name
    for two different objects we could name an object `/NewYork/Stadium.jpg` and another
    `/Boston/Stadium.jpg`. In this way it is possible to organize the objects as if
    they were inside directories and manage them as such. In fact, Google Storage
    sees objects as independent objects that have no hierarchical relationship.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a bucket
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To operate in Google Cloud Storage we can use two tools: console and gsutil.
    The first tool makes use of typical graphic interfaces, while the second uses
    command-line windows.'
  prefs: []
  type: TYPE_NORMAL
- en: Google Cloud Storage console
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To start with, we will see how to create a bucket using the Google Cloud Storage
    console. First, when we access it, we can get to that console starting from the
    main Google Cloud Platform by clicking on the left in the Resources section on
    the entry Cloud Storage. The following window will be open:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f6636d32-3b36-4bee-9fe0-fcbd1f337a42.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the window that opens, all the buckets related to the account are present.
    For each of them, there are the following features:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Name**: Bucket name.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Default storage class**: Storage class assigned by default to the objects
    added to a bucket.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Location**: Place where data is stored.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Lifecycle**: Allows you to set rules for automatically deleting objects or
    downgrading their storage class.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Labels**: Help organize your buckets. Labels are also included in your bill,
    so you can see the distribution of costs across your labels.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Requester pays**: If On, requests for the bucket''s data will be billed to
    the requester''s project.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To create a new bucket, simply click on the CREATE BUCKET button at the top
    of the Google Cloud Storage browser. The following page is opened:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/45b5f24a-6b35-471b-a591-a999a215a242.png)'
  prefs: []
  type: TYPE_IMG
- en: 'On the page that opens, you need to specify the following information:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Name**: Remember, it must be unique across Cloud Storage'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Default storage class**: Four options are available: Multi-Regional, Regional,
    Nearline, and Coldline'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Location**: This drop-down menu allows us to choose the location'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After making these choices, just click on the CREATE button and a new bucket
    will be added to the Google Cloud Storage browser.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we have the container, it is time to enrich it with contents. To do this,
    we must first access the simple bucket by clicking on its name. The following
    page is opened:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e3cb3512-7378-4241-a2e4-298519b86f70.png)'
  prefs: []
  type: TYPE_IMG
- en: 'On the page that opens, all the contents of the buckets is listed. For each
    object, a series of information is proposed:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Name**: Object name'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Size**: Object dimension'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Type**: Object type'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Storage class**: Storage class assigned to the objects added to a bucket'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Last modified**: Date of last modification of the object'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To add another object to the bucket:'
  prefs: []
  type: TYPE_NORMAL
- en: Simply click on the UPLOAD FILES button at the top of the Google Cloud Storage
    browser. A dialog window is opened.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the dialog window, select the file or folder you want to upload to your bucket.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click Open.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If we use Chrome as a browser it is possible to perform folder uploads. This
    way, we can load the entire contents of a folder into a bucket. Otherwise, we
    can first create a folder, using the CREATE FOLDER button and then upload all
    the objects individually.
  prefs: []
  type: TYPE_NORMAL
- en: 'To rename, copy, and move objects simply click the more options button (three
    vertical dots) associated with the object. A context menu is opened. In it we
    will be able to carry out the following operations:'
  prefs: []
  type: TYPE_NORMAL
- en: Edit permissions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Edit metadata
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Copy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Move
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rename
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For each option, a relative window will be opened that will guide us in the
    operation.
  prefs: []
  type: TYPE_NORMAL
- en: Google Cloud Storage gsutil
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have seen that using the Google Cloud Storage browser is simple and intuitive.
    But in some cases it is necessary to operate through a command window. In such
    cases, as we have seen in previous sections, we can use `gsutil`. Previously,
    we had already seen a series of commands via `gsutil`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a bucket using `gsutil`, use the `mb` command. For example, use the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This creates a bucket named `NameBucket1`. It is important to remember that
    bucket names must be unique within the entire Google Storage namespace. If another
    user has already created a bucket with the name we want to use, we must choose
    another name.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the buckets are created, we can import the objects within them. With the
    `cp` command, we can copy files from our computer to Google Storage:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This copies the image `figure.jpg` from the folder in which we are positioned
    with the shell in the bucket `NameBucket1` renaming the object in `fig.jpg`.
  prefs: []
  type: TYPE_NORMAL
- en: To list our buckets or the objects contained in them you must use the `ls` command.
  prefs: []
  type: TYPE_NORMAL
- en: The `ls` command is used in Unix-like operating systems to display information
    about files and directories. If we open a terminal and type `ls`, we get the list
    of files and directories of the current directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following command lists all the buckets we have created:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'While this command lists the objects contained in `NameBucket1`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also use the `-L` option of the `ls` command to get more information
    about objects and buckets. The following command provides information about the
    size of objects, the date of the last modification, the data type, and the **Access
    Control Lists** (**ACL**) of all objects contained in the `NameBucket1` bucket:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'While the following command provides information on our buckets, such as the
    number of objects contained, the total size, and the ACL of all our buckets:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, to transfer an object from one bucket to another, use the `mv` command,
    this command can also be used to rename an object. For example, the following
    command transfers the image `figure.png` from the `NameBucket1` bucket to the
    `NameBucket2` bucket:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'While this command renames the image `figure.png` to `fig.png`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Life cycle management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With Google Cloud Storage, the life cycle management of objects becomes simple
    and immediate. The life cycle of an object is the time between the creation of
    an object and its destruction. The rules for the duration of the object vary significantly
    between the programming platforms. In the case of archived objects we refer to
    the time in which the object remains stored in the space assigned to it.
  prefs: []
  type: TYPE_NORMAL
- en: The life cycle of a bucket can be managed through its configuration. The configuration
    contains a set of rules that apply to all objects in the bucket. The action specified
    on the object is performed when the object meets the criteria of one of the rules.
  prefs: []
  type: TYPE_NORMAL
- en: 'To enable life cycle for a bucket using the Google Cloud Console:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to Open the Google Cloud Platform Console and click on the Cloud Storage
    browser; the following window is opened:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5bb12fd1-74a5-4a5a-831b-9ebce5c810ba.png)'
  prefs: []
  type: TYPE_IMG
- en: In this window, examine the **Lifecycle** column, choose the bucket, and click
    on the entry **None**; a new page is opened.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this window, click on Add Rule.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the page that opens, we can specify the configuration by selecting the conditions
    and the actions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, click on the Save button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A similar procedure can be performed to check the life cycle configuration set
    on a bucket, and to disable life cycle management for a bucket.
  prefs: []
  type: TYPE_NORMAL
- en: Google Cloud SQL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Google Cloud SQL is a database service of the Google Cloud Platform that allows
    the creation, management, and administration of relational databases in the cloud
    for their applications. The service guarantees excellent performance and scalability
    thanks to the Google infrastructure on which the databases will be hosted. Like
    every service on the platform, the simplicity of use is fundamental: there is
    no need to install any software, make updates manually, or take care of backups
    and replications of their databases. The Google platform will take care of all
    of it and ensure an availability of 99.95%. The data is encrypted before being
    saved in the databases and in the backups, to guarantee the security of the infrastructure.'
  prefs: []
  type: TYPE_NORMAL
- en: You can also set up a network firewall for each database instance to directly
    regulate access to the instances. The service can be used with any type of Cloud-based
    application or website that is compatible with MySQL or PostgreSQL, and the instances
    are easily accessible through the app engine, compute engine, and platform workstation.
  prefs: []
  type: TYPE_NORMAL
- en: The cost of the service does not require any initial payment, but is calculated
    minute by minute for the entire duration of use and only the resources actually
    allocated will be charged. In the case of MySQL databases, the standard price
    range for a Cloud SQL instance is $0.0150 â€“ $4.0240 per hour (up to 208 GB of
    RAM), while for storage space it goes from $ 0.08 per GB/month for backups, $
    0.09 per GB/month for HDD storage, and $ 0.17 GB/month for SSD storage. To these
    must be added the costs for the management of the network through the compute
    engine.
  prefs: []
  type: TYPE_NORMAL
- en: Databases supported
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With Google Cloud SQL, it is possible to create two types of relational databases:'
  prefs: []
  type: TYPE_NORMAL
- en: MySQL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PostgreSQL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MySQL is an open source **relational database management system** (**RDMB**)
    available for free using **Structured Query Language** (**SQL**). SQL is the most
    popular language for adding, accessing, and managing content in a database. It
    is known for its rapid processing, proven reliability, ease, and flexibility of
    use. MySQL is an essential part of almost all open source PHP applications.
  prefs: []
  type: TYPE_NORMAL
- en: PostgreSQL is an advanced database system with a long history behind it. It
    is available for a wide range of platforms and is used in microscopic embedded
    systems as well as in huge multi-terabyte systems. PostgreSQL has earned an excellent
    reputation over the years for its innovative features, data integrity, security,
    and reliability.
  prefs: []
  type: TYPE_NORMAL
- en: PostgreSQL support is still in beta, so features such as replication or high
    availability are not available. The instances of the platform they support MySQL
    5.7 or PostgreSQL 9.6 databases in the cloud and allow for up to 208 GB of RAM,
    32 CPUs, and 10 TB of storage. The data, encrypted on Google networks and within
    tables and backups, are accessible from their applications created through the
    app engine (written in Java, Python, PHP, Node.js, Go, or Ruby), through clients
    MySQL/PostgreSQL using standard protocols, or even through external applications,
    with the possibility of using secure connection protocols, such as SSL.
  prefs: []
  type: TYPE_NORMAL
- en: In general, there are no noticeable differences between the functionality provided
    by the standard MySQL/PostgreSQL instances locally and those provided by the Cloud
    SQL instances. In particular, we remind you that it is impossible to create new
    functions in MySQL using the `CREATE FUNCTION` statement and the lack `SUPER`
    (MySQL) and `SUPERUSER` (PostgreSQL) privileges.
  prefs: []
  type: TYPE_NORMAL
- en: Google Cloud SQL performance and scalability
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Cloud SQL offers excellent performance and scalability. As mentioned previously,
    the maximum storage capacity is 10 TB (to be distributed between HDD and SSD),
    while the maximum RAM that can be selected is 208 GB, and the maximum number of
    CPUs is 32\. Google also guarantees a maximum of 25,000 IOPS, that is, input/output
    operations per second. The possibility to choose such resources allows us therefore
    to use Cloud SQL for every type of application, from those with lower workloads
    to applications that require intense performance. There are no limits of **query
    per second** (**QPS**), but there are some limits regarding the connections. In
    fact, up to a maximum of 4,000 concurrent connections are possible in the case
    of second-generation MySQL instances, while for the other cases the limits are
    more stringent.
  prefs: []
  type: TYPE_NORMAL
- en: For first-generation MySQL databases only, where incoming requests are briefly
    queuing before establishing a connection, there is a limit of 100 queued connections
    at the same time. The databases are also easily scalable both vertically, increasing
    or reducing the available resources (storage space, CPU, and RAM), and horizontally
    increasing the number of servers and instances that work simultaneously. Once
    you have created your instance, you can change the resources allocated for it
    directly from the console. In general, the changes are applied immediately, but
    the restart of the instance will close the existing connections and will need
    a few moments (in the case of first-generation MySQL) or a few minutes (second
    generation) to get back online.
  prefs: []
  type: TYPE_NORMAL
- en: Google Cloud SQL security and architecture
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Regarding security, the data available on Cloud SQL is encrypted within the
    tables, in temporary files, in backup copies, and during the movements within
    the Google infrastructure from one server to another using secure network protocols.
    The platform infrastructure is therefore designed to ensure the security of its
    data at every stage of information management. No action is required by the user:
    the data is automatically encrypted by the platform through the compute engine,
    so all the services provided by it will comply with these requirements.'
  prefs: []
  type: TYPE_NORMAL
- en: From a design point of view, the security of the infrastructure on a global
    scale is organized according to a layered architecture. This architecture allows
    the safe use of services, data, and communications between services, users, and
    administrators.
  prefs: []
  type: TYPE_NORMAL
- en: 'Starting from the lowest level, that is, hardware, we have data centers that
    Google designs and builds autonomously, accessible only to a small number of employees
    and monitored by equipment such as metal detectors, video cameras, or biometric
    identification technologies. Individual data centers are made up of multiple servers
    connected to a single local network: it is always up to Google to verify that
    the components, designed by themselves, and their suppliers meet the company''s
    security standards. The individual server machines, individually identified to
    be easily traceable, are controlled by digital signatures on each individual low-level
    component and validated at each start-up.'
  prefs: []
  type: TYPE_NORMAL
- en: Moving to the software level, every application written and made to run on the
    platform is run in multiple copies on multiple machines to use the necessary amount
    of resources for each workload. The software architecture is multi-tenant, in
    which a single instance of a software runs on a server and serves more tenants
    (that is, users who share access to the instance). It will be the task of the
    application to provide to each tenant a dedicated part of the instance. The concept
    is diametrically opposed to that of the multi-instance architecture, where there
    are several instances of software each dedicated to the single client.
  prefs: []
  type: TYPE_NORMAL
- en: Creating Google Cloud SQL instances
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A Google Cloud SQL instance is a set of memory structures that manage database
    files. The instance manages its associated data and serves the users of the database.
    Every running Google Cloud SQL database is associated with at least one database
    instance.
  prefs: []
  type: TYPE_NORMAL
- en: Cloud SQL instances are fully managed, relational MySQL and PostgreSQL databases.
    Google handles replication, patch management, and database management to ensure
    availability and performance. When you create an instance, choose a size and billing
    plan to fit your application.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a Google Cloud SQL instance:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to the Google Cloud SQL instances page at the following URL: [https://console.cloud.google.com/sql/instances](https://console.cloud.google.com/sql/instances).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the create instance button at the middle of the page. A guided sequence
    will lead us to create the instance.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Choose the database type; two options are available: MySQL and PostgreSQL (MySQL
    is the default choice). After making your choice, click on the next button.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Choose a MySQL instance type; two options are available: MySQL Second Generation
    (recommended) and MySQL First Generation. MySQL Second Generation offers high
    performance, high storage capacity, and low cost. MySQL First Generation is the
    older version of Cloud SQL, providing basic performance and storage capacity.
    To make your choice, click on the Choose Second/First Generation button.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'A new page is opened. In this page, a set of choices must be made, as shown
    in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/fcdd0720-2204-4dbf-8443-b14e15f57e27.png)'
  prefs: []
  type: TYPE_IMG
- en: The first choice concerns the name of the instance. This is a name visible from
    the outside so it is advisable not to include sensitive or personally identifiable
    information in that name. Furthermore, it is not necessary to include the project
    ID in the instance name; if necessary, it is added automatically.
  prefs: []
  type: TYPE_NORMAL
- en: Set the password for the `'root'@'%'` user.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the region.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set configuration options.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, click on the `Create` button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this way, a new instance will have been created.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we have discovered two additional services offered by Google
    Cloud Platform: Google Cloud Storage, and Google Cloud SQL. Google Cloud Storage
    is a file hosting service that lets you store files in the cloud. We have seen
    how to store videos, music, photographs, databases or files, without knowing the
    physical location of data, from anywhere in the world, with any suitable device.
    We have performed the file uploading operations either using the browser or using
    the command line.'
  prefs: []
  type: TYPE_NORMAL
- en: Afterward, we understood the potential of Google Cloud SQL for the creation
    of a relational database management system. Using Google Cloud SQL you can create,
    manage and administer relational databases. At first we discovered the characteristics
    of the service and later we learned to create a new database instance through
    a practical example.
  prefs: []
  type: TYPE_NORMAL
