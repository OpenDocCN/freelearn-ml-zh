["```py\n    import pandas as pd\n    from sklearn.preprocessing import MinMaxScaler\n    from sklearn.pipeline import make_pipeline\n    from sklearn.cluster import KMeans\n    from sklearn.metrics import silhouette_score\n    from sklearn.metrics.cluster import rand_score\n    from sklearn.impute import KNNImputer\n    import seaborn as sns\n    import matplotlib.pyplot as plt\n    ```", "```py\n    un_income_gap = pd.read_csv(\"data/un_income_gap.csv\")\n    un_income_gap.set_index('country', inplace=True)\n    un_income_gap['incomeratio'] = \\\n      un_income_gap.femaleincomepercapita / \\\n        un_income_gap.maleincomepercapita\n    un_income_gap['educratio'] = \\\n      un_income_gap.femaleyearseducation / \\\n         un_income_gap.maleyearseducation\n    un_income_gap['laborforcepartratio'] = \\\n      un_income_gap.femalelaborforceparticipation / \\\n         un_income_gap.malelaborforceparticipation\n    un_income_gap['humandevratio'] = \\\n      un_income_gap.femalehumandevelopment / \\\n         un_income_gap.malehumandevelopment\n    ```", "```py\n    num_cols = ['educratio','laborforcepartratio','humandevratio',\n      'genderinequality','maternalmortality','incomeratio',\n      'adolescentbirthrate', 'femaleperparliament',\n      'incomepercapita']\n    gap = un_income_gap[num_cols]\n    gap.agg(['count','min','median','max']).T\n                         count   min    median  max\n    educratio            170.00  0.24   0.93    1.35\n    laborforcepartratio  177.00  0.19   0.75    1.04\n    humandevratio        161.00  0.60   0.95    1.03\n    genderinequality     155.00  0.02   0.39    0.74\n    maternalmortality    178.00  1.00   64.00   1,100.00\n    incomeratio          177.00  0.16   0.60    0.93\n    adolescentbirthrate  183.00  0.60   40.90   204.80\n    femaleperparliament  185.00  0.00   19.60   57.50\n    incomepercapita      188.00  581.00 10,667.00  23,124.00\n    ```", "```py\n    corrmatrix = gap.corr(method=\"pearson\")\n    sns.heatmap(corrmatrix, \n      xticklabels=corrmatrix.columns,\n      yticklabels=corrmatrix.columns, cmap=\"coolwarm\")\n    plt.title('Heat Map of Correlation Matrix')\n    plt.tight_layout()\n    plt.show()\n    ```", "```py\n    pipe1 = make_pipeline(MinMaxScaler(), KNNImputer(n_neighbors=5))\n    gap_enc = pd.DataFrame(pipe1.fit_transform(gap),\n      columns=num_cols, index=gap.index)\n    ```", "```py\nkmeans = KMeans(n_clusters=3, random_state=0)\nkmeans.fit(gap_enc)\nKMeans(n_clusters=3, random_state=0)\nsilhouette_score(gap_enc, kmeans.labels_)\n0.3311928353317411\n```", "```py\n    gap_enc['cluster'] = kmeans.labels_\n    gap_enc.cluster.value_counts().sort_index()\n    0     40\n    1    100\n    2     48\n    Name: cluster, dtype: int64\n    ```", "```py\n    pred = pd.Series(kmeans.fit_predict(gap_enc))\n    pred.value_counts().sort_index()\n    0     40\n    1    100\n    2     48\n    dtype: int64\n    ```", "```py\n    gap_cluster = gap_enc.join(cluster)\n    gap_cluster[['cluster'] + num_cols].groupby(['cluster']).mean().T\n    cluster              0            1           2\n    educratio            0.36         0.66        0.54\n    laborforcepartratio  0.80         0.67        0.32\n    humandevratio        0.62         0.87        0.68\n    genderinequality     0.79         0.32        0.62\n    maternalmortality    0.44         0.04        0.11\n    incomeratio          0.71         0.60        0.29\n    adolescentbirthrate  0.51         0.15        0.20\n    femaleperparliament  0.33         0.43        0.24\n    incomepercapita      0.02         0.19        0.12\n    ```", "```py\n    centers = kmeans.cluster_centers_\n    centers.shape\n    (3, 9)\n    np.set_printoptions(precision=2)\n    centers\n    array([[0.36, 0.8 , 0.62, 0.79, 0.44, 0.71, 0.51, 0.33, 0.02],\n           [0.66, 0.67, 0.87, 0.32, 0.04, 0.6 , 0.15, 0.43, 0.19],\n           [0.54, 0.32, 0.68, 0.62, 0.11, 0.29, 0.2 , 0.24, 0.12]])\n    ```", "```py\n    fig = plt.figure()\n    plt.suptitle(\"Cluster for each Country\")\n    ax = plt.axes(projection='3d')\n    ax.set_xlabel(\"Maternal Mortality\")\n    ax.set_ylabel(\"Adolescent Birth Rate\")\n    ax.set_zlabel(\"Income Ratio\")\n    ax.scatter3D(gap_cluster.maternalmortality,\n      gap_cluster.adolescentbirthrate,\n      gap_cluster.incomeratio, c=gap_cluster.cluster, cmap=\"brg\")\n    for j in range(3):\n      ax.text(centers2[j, num_cols.index('maternalmortality')],\n      centers2[j, num_cols.index('adolescentbirthrate')],\n      centers2[j, num_cols.index('incomeratio')],\n      c='black', s=j, fontsize=20, fontweight=800)\n    plt.tight_layout()\n    plt.show()\n    ```", "```py\ngap_enc = gap_enc[num_cols]\nkmeans2 = KMeans(n_clusters=5, random_state=0)\nkmeans2.fit(gap_enc)\nsilhouette_score(gap_enc, kmeans2.labels_)\n0.2871811434351394\ngap_enc['cluster2'] = kmeans2.labels_\ngap_enc.cluster2.value_counts().sort_index()\n0    21\n1    40\n2    48\n3    16\n4    63\nName: cluster2, dtype: int64\n```", "```py\n    fig = plt.figure()\n    plt.suptitle(\"Cluster for each Country\")\n    ax = plt.axes(projection='3d')\n    ax.set_xlabel(\"Maternal Mortality\")\n    ax.set_ylabel(\"Adolescent Birth Rate\")\n    ax.set_zlabel(\"Income Ratio\")\n    ax.scatter3D(gap_cluster.maternalmortality,\n      gap_cluster.adolescentbirthrate,\n      gap_cluster.incomeratio, c=gap_cluster.cluster2, \n      cmap=\"brg\")\n    for j in range(5):\n      ax.text(centers2[j, num_cols.index('maternalmortality')],\n      centers2[j, num_cols.index('adolescentbirthrate')],\n      centers2[j, num_cols.index('incomeratio')],\n      c='black', s=j, fontsize=20, fontweight=800)\n    plt.tight_layout()\n    plt.show()\n    ```", "```py\n    rand_score(kmeans.labels_, kmeans2.labels_)\n    0.7439412902491751\n    ```", "```py\n    gap_enc = gap_enc[num_cols]\n    iner_scores = []\n    sil_scores = []\n    for j in range(2,20):\n      kmeans=KMeans(n_clusters=j, random_state=0)\n      kmeans.fit(gap_enc)\n      iner_scores.append(kmeans.inertia_)\n      sil_scores.append(silhouette_score(gap_enc,\n        kmeans.labels_))\n    ```", "```py\n    plt.title('Elbow Plot')\n    plt.xlabel('k')\n    plt.ylabel('Inertia')\n    plt.plot(range(2,20),iner_scores)\n    ```", "```py\n    plt.title('Silhouette Score')\n    plt.xlabel('k')\n    plt.ylabel('Silhouette Score')\n    plt.plot(range(2,20),sil_scores)\n    ```", "```py\n    import pandas as pd\n    from sklearn.preprocessing import MinMaxScaler\n    from sklearn.pipeline import make_pipeline\n    from sklearn.cluster import DBSCAN\n    from sklearn.impute import KNNImputer\n    from sklearn.metrics import silhouette_score\n    import matplotlib.pyplot as plt\n    import os\n    import sys\n    sys.path.append(os.getcwd() + \"/helperfunctions\")\n    ```", "```py\n    import incomegap as ig\n    gap = ig.gap\n    num_cols = ig.num_cols\n    ```", "```py\n    pipe1 = make_pipeline(MinMaxScaler(),\n      KNNImputer(n_neighbors=5))\n    gap_enc = pd.DataFrame(pipe1.fit_transform(gap),\n      columns=num_cols, index=gap.index)\n    dbscan = DBSCAN(eps=0.35, min_samples=5)\n    dbscan.fit(gap_enc)\n    silhouette_score(gap_enc, dbscan.labels_)\n    0.31106297603736455\n    ```", "```py\n    gap_enc['cluster'] = dbscan.labels_\n    gap_enc.cluster.value_counts().sort_index()\n    -1     17\n     0    139\n     1     32\n    Name: cluster, dtype: int64\n    gap_enc = \\\n     gap_enc.loc[gap_enc.cluster!=-1]\n    ```", "```py\n    gap_enc[['cluster'] + num_cols].\\\n      groupby(['cluster']).mean().T\n    cluster                     0            1\n    educratio                   0.63         0.35\n    laborforcepartratio         0.57         0.82\n    humandevratio               0.82         0.62\n    genderinequality            0.40         0.79\n    maternalmortality           0.05         0.45\n    incomeratio                 0.51         0.71\n    adolescentbirthrate         0.16         0.50\n    femaleperparliament         0.36         0.30\n    incomepercapita             0.16         0.02\n    ```", "```py\n    fig = plt.figure()\n    plt.suptitle(\"Cluster for each Country\")\n    ax = plt.axes(projection='3d')\n    ax.set_xlabel(\"Maternal Mortality\")\n    ax.set_ylabel(\"Adolescent Birth Rate\")\n    ax.set_zlabel(\"Gender Inequality\")\n    ax.scatter3D(gap_cluster.maternalmortality,\n      gap_cluster.adolescentbirthrate,\n      gap_cluster.genderinequality, c=gap_cluster.cluster, \n      cmap=\"brg\")\n    plt.tight_layout()\n    plt.show()\n    ```"]