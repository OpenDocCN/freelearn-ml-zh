- en: '14'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '14'
- en: Numerical Optimization
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数值优化
- en: In our daily lives, while running errands and doing chores, the human mind is
    always carrying out some form of optimization. For example, the mind might be
    optimizing the route to take for single or multiple destinations that we need
    to visit. It can also be optimizing the cost of items that we need to buy on a
    trip to a grocery store, or, for example, budgeting our income and expenses on
    a weekly or monthly basis. Another example is to try to optimize the amount of
    sleep so that our mind is fresh the following day to work on our projects. In
    short, we are optimizing multiple tasks and schedules every single day without
    even knowing or thinking about it. Similarly, nature also optimizes its processes.
    For example, the Earth goes around the Sun in an optimal path to keep a balance
    between the various gravitational forces.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的日常生活中，无论是跑腿还是做家务，人的大脑总是在执行某种形式的优化。例如，大脑可能会优化前往单个或多个目的地的路线。它也可以优化我们在杂货店购买物品的成本，或者，例如，按周或按月预算我们的收入和支出。另一个例子是尝试优化睡眠量，以便我们的思维在第二天工作项目时保持清醒。简而言之，我们每天都在优化多个任务和日程，甚至不知道或思考过这一点。同样，自然界也在优化其过程。例如，地球围绕太阳以最佳路径运行，以保持各种引力之间的平衡。
- en: '**Optimization** also plays a big role in the technology industry. Several
    large-scale optimization problems are being solved by small and large corporations.
    For example, a courier delivering packages to our home follows the route and schedule
    assigned by an optimization problem that solved an equation (either numerically
    or analytically) under several constraints to come up with that optimal route.
    Similarly, stock trading is another example, where the action can be to sell,
    hold, or buy stocks of a particular company to maximize long-term or short-term
    gains.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '**优化**在技术产业中也发挥着重要作用。许多大型优化问题由小型和大型企业解决。例如，送快递到我们家的快递员遵循由优化问题确定的路线和时间表，该优化问题在多个约束条件下解决了一个方程（无论是数值还是解析），以得出那个最佳路线。同样，股票交易是另一个例子，其中的行动可以是卖出、持有或购买特定公司的股票，以实现长期或短期收益的最大化。'
- en: 'In this chapter, we are going to discuss optimization in general while focusing
    more on numerical optimization, its examples, and use cases, along with its application
    in applied machine learning. The following topics will be covered in this chapter:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论优化的一般概念，同时更多地关注数值优化、其示例、用例，以及其在应用机器学习中的应用。本章将涵盖以下主题：
- en: Introduction to optimization
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 优化简介
- en: Common numerical optimization algorithms
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 常见的数值优化算法
- en: Example use cases of large-scale numerical optimization problems
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大规模数值优化问题的示例用例
- en: Numerical optimization using high-performance compute on AWS
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在AWS上使用高性能计算进行数值优化
- en: Machine learning and numerical optimization
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 机器学习和数值优化
- en: Introduction to optimization
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 优化简介
- en: As mentioned in the introduction to this chapter, optimization is an important
    tool for making decisions related to a large set of problems in our daily lives
    and various fields of science. There are various components to an optimization
    problem, as we are going to discuss in the following subsections.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如本章引言所述，优化是我们日常生活中和各个科学领域解决大量问题的重要工具。优化问题有许多组成部分，我们将在以下小节中讨论。
- en: Goal or objective function
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 目标或目标函数
- en: The process of optimization starts with defining a goal or an objective, such
    as monetary gain, a route or path, a schedule, items, and so on. Selecting the
    goal or objective depends heavily on the problem domain, as well as the specific
    problem we are trying to solve. In addition to the objective function, we also
    need to know whether we are maximizing or minimizing the objective function. Again,
    this also depends on the specific problem domain, as well as the objective function.
    For an optimization problem with cost as the objective function, our goal will
    most likely be to minimize it, whereas if our objective function is revenue or
    profit, we would like to maximize it.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 优化的过程始于定义一个目标或目标函数，例如货币收益、路线或路径、时间表、物品等等。选择目标或目标函数在很大程度上取决于问题领域，以及我们试图解决的问题的具体性。除了目标函数外，我们还需要知道我们是最大化还是最小化目标函数。同样，这也取决于具体的问题领域和目标函数。对于一个以成本为目标函数的优化问题，我们的目标很可能是最小化它，而如果我们的目标函数是收入或利润，我们希望最大化它。
- en: For our route optimization example, one organization might be focused on solving
    the problem to maximize the number of delivered items, while another organization
    might want to minimize fuel cost per delivery. So, even though the problem domain
    is the same for both problems, the objective is different. Many times, the objectives
    may be related or dependent on each other. For example, in the route optimization
    problem, the number of delivered items and the fuel cost per delivery seem to
    be dependent on each other. Trying to deliver the maximum number of items in a
    given amount of time also means that the route needs to be defined in such a way
    that the distance from one location to the next is short. This means the vehicle
    is going to travel short distances to deliver items and hence fuel cost per delivery
    will be less.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的路由优化示例，一个组织可能专注于解决最大化配送物品数量的问题，而另一个组织可能希望最小化每配送的燃料成本。因此，尽管两个问题的领域相同，但目标不同。很多时候，目标可能相互关联或依赖。例如，在路由优化问题中，配送物品的数量和每配送的燃料成本似乎相互依赖。试图在给定的时间内配送尽可能多的物品也意味着路线需要定义得尽可能短，这意味着车辆将行驶短距离来配送物品，因此每配送的燃料成本将会较低。
- en: Variables
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 变量
- en: 'The objective function for any optimization problem is generally a function
    of several variables. By changing the values of these variables, the value of
    the objective function also changes. For example, for the route optimization problem,
    one of the variables can be the speed of the vehicle. If the vehicle speed is
    increased, the number of deliveries made by the vehicle will increase, thereby
    improving the objective function’s value. Numerical optimization problems vary
    the values of these variables in an attempt to arrive at the optimal value of
    the optimization function. Mathematically, we can define the objective function,
    ![](img/f.png), which maps some set of variables, *X*, to real space, ![](img/Formula_14.02.png):'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 任何优化问题的目标函数通常都是几个变量的函数。通过改变这些变量的值，目标函数的值也会改变。例如，对于路由优化问题，一个变量可以是车辆的速度。如果增加车辆速度，车辆完成的配送数量将会增加，从而提高目标函数的值。数值优化问题通过改变这些变量的值来尝试达到优化函数的最优值。从数学上讲，我们可以定义目标函数
    ![f](img/f.png)，它将一组变量 *X* 映射到实空间 ![Formula_14.02](img/Formula_14.02.png)：
- en: '![](img/Formula_14.03.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![公式_14.03](img/Formula_14.03.jpg)'
- en: 'Our objective or goal is to find the values, *X**, of the *X* variable that
    minimize or maximize (depending on the problem) our objective function, ![](img/f1.png).
    So, for the maximization case, the optimization problem can be written as follows:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的目标或目的是找到变量 *X* 的值，以最小化或最大化（取决于问题）我们的目标函数 ![f1](img/f1.png)。因此，对于最大化情况，优化问题可以写成如下形式：
- en: '![](img/Formula_14.05.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![公式_14.05](img/Formula_14.05.jpg)'
- en: 'For the minimization case, the optimization problem can be written as follows:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 对于最小化情况，优化问题可以写成如下形式：
- en: '![](img/Formula_14.06.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![公式_14.06](img/Formula_14.06.jpg)'
- en: Constraints
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 约束
- en: 'In the route optimization problem discussed previously, there will be an upper
    limit on the speed of a vehicle based on the maximum speed allowed on a road.
    The vehicle should not exceed that speed limit. This will be a constraint on the
    optimization objective function. Any optimization problem will either have constraints
    (constrained optimization) or not (unconstrained optimization). Generally, a large-scale
    numerical optimization problem has several constraints. The goal of the optimization
    problem in the presence of constraints then becomes finding the best value of
    the objective function while satisfying all the constraints. A few example constraints
    are defined here:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前讨论的路由优化问题中，车辆的速度将基于道路允许的最高速度有一个上限。车辆不应超过这个速度限制。这将是对优化目标函数的一个约束。任何优化问题要么有约束（约束优化）要么没有（无约束优化）。通常，大规模数值优化问题有几个约束。在存在约束的情况下，优化问题的目标就变成了在满足所有约束的条件下找到目标函数的最佳值。以下定义了一些示例约束：
- en: '**Linear constraints**: The ![](img/X1.png) and ![](img/X2.png) variables are
    greater than or equal to zero and their sum is less than 100:'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**线性约束**：变量 ![X1](img/X1.png) 和 ![X2](img/X2.png) 大于或等于零，并且它们的和小于100：'
- en: '![](img/Formula_14.09.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![公式_14.09](img/Formula_14.09.png)'
- en: '![](img/Formula_14.10.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![公式_14.10](img/Formula_14.10.png)'
- en: '![](img/Formula_14.11.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![公式_14.11](img/Formula_14.11.png)'
- en: '**Non-linear constraints**: The square of the ![](img/X1.png) variable is greater
    than ![](img/X2.png):'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**非线性约束**：变量 ![X1](img/X1.png) 的平方大于 ![X2](img/X2.png)：'
- en: '![](img/Formula_14.14.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Formula_14.14.png)'
- en: A real-world large-scale numerical optimization problem will generally have
    both linear as well as non-linear constraints.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现实世界中的大规模数值优化问题通常既有线性约束也有非线性约束。
- en: Modeling an optimization problem
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 建模优化问题
- en: One of the hardest and most important tasks in any optimization problem is formulating
    or modeling the problem itself. This process involves identifying the variables,
    constraints, and objective function. Knowledge of the problem domain as well as
    a good understanding of the business problem that we are trying to solve are very
    important to have a good formulation of the optimization problem. Having a very
    simplistic formulation will not help us achieve good results with the problem,
    whereas having a too complicated formulation of the problem might result in giving
    us no solution or a bad solution while taking a very long time to numerically
    solve the problem, even on modern-day machines.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何优化问题中，最困难且最重要的任务之一是制定或建模问题本身。这个过程包括识别变量、约束条件和目标函数。了解问题域以及对我们试图解决的商业问题的良好理解对于制定良好的优化问题至关重要。一个非常简单的公式不会帮助我们获得好的结果，而一个过于复杂的公式可能会导致我们无法找到解决方案或得到一个不良的解决方案，即使是在现代机器上，也可能需要非常长的时间来数值求解问题。
- en: Optimization algorithm
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 优化算法
- en: After formulating the problem, the next step is to pick an optimization algorithm
    and then use a software tool to run it on the data containing our variables and
    constraints. No one algorithm solves all the optimization problems. Picking the
    right algorithm is a big factor in getting a good solution in a reasonable amount
    of time. Similarly, there are several open source as well as commercial tools
    with implementations of optimization algorithms. Depending on our budget and the
    resources available, we should pick the right software tool to solve the optimization
    problem. Once the algorithm has been executed and we have the results, the next
    step is to make sure that all the constraints, as well as optimality conditions,
    are satisfied. We can also carry out sensitivity analysis on the solution, if
    it is not an optimal solution, to improve upon it.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在制定问题之后，下一步是选择一个优化算法，然后使用软件工具在包含我们的变量和约束的数据上运行它。没有一种算法可以解决所有的优化问题。选择正确的算法是在合理的时间内获得良好解决方案的重要因素。同样，也有几个开源和商业工具实现了优化算法。根据我们的预算和可用资源，我们应该选择合适的软件工具来解决优化问题。一旦算法执行完毕并且我们得到了结果，下一步是确保所有约束条件以及最优性条件都得到满足。如果我们得到的不是一个最优解，我们还可以对解进行敏感性分析，以改进它。
- en: Local and global optima
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 局部和全局最优解
- en: The objective function that our optimization problem is attempting to solve
    usually has more than one optimum value. For example, if our optimization problem
    is a minimization problem and our objective function is convex, then it will have
    only one minimum value, called the **global minimum**, which can be found using
    methods based on calculus or well-known algorithms such as gradient descent, hill
    climbing, and so on.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们优化问题试图解决的目标函数通常具有多个最优值。例如，如果我们的优化问题是最小化问题，并且我们的目标函数是凸函数，那么它将只有一个最小值，称为**全局最小值**，可以使用基于微积分的方法或如梯度下降、爬山法等已知算法找到。
- en: '*Figure 14**.1* shows the case of a convex objective function of one variable
    with a global minimum value, while *Figure 14**.2* shows a convex objective function
    of two variables:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '*图14.1* 展示了一元凸目标函数的全局最小值的情况，而 *图14.2* 展示了两个变量的凸目标函数：'
- en: '![Figure 14.1 – A convex objective function of one variable with a global minimum](img/B18493_14_001.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![图14.1 – 一元凸目标函数的全局最小值](img/B18493_14_001.jpg)'
- en: Figure 14.1 – A convex objective function of one variable with a global minimum
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.1 – 一元凸目标函数的全局最小值
- en: '![ Figure 14.2 – A convex objective function of two variables with a global
    minimum](img/B18493_14_002.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![图14.2 – 两个变量的凸目标函数的全局最小值](img/B18493_14_002.jpg)'
- en: Figure 14.2 – A convex objective function of two variables with a global minimum
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.2 – 两个变量的凸目标函数的全局最小值
- en: 'Most of the optimization problems that we encounter and process in our daily
    lives have non-convex objective functions. These objective functions have more
    than one optimum value, referred to as **local optima**. *Figure 14**.3* and *Figure
    14**.4* show examples of objective functions with one variable with multiple local
    minima:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在日常生活中遇到并处理的许多优化问题都具有非凸目标函数。这些目标函数有多个最优值，称为**局部最优解**。*图 14*.*3* 和 *图 14*.*4*
    展示了具有一个变量的目标函数的示例，这些函数具有多个局部最小值：
- en: '![Figure 14.3 ­– Objective function with multiple local minima](img/B18493_14_003.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![图 14.3 – 具有多个局部最小值的目标函数](img/B18493_14_003.jpg)'
- en: Figure 14.3 ­– Objective function with multiple local minima
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.3 – 具有多个局部最小值的目标函数
- en: '![ Figure 14.4 – Objective function with multiple local minima](img/B18493_14_004.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![图 14.4 – 具有多个局部最小值的目标函数](img/B18493_14_004.jpg)'
- en: Figure 14.4 – Objective function with multiple local minima
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.4 – 具有多个局部最小值的目标函数
- en: '*Figure 14**.5* and *Figure 14**.6* show examples of objective functions with
    two variables with multiple local minima:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 14*.*5* 和 *图 14*.*6* 展示了具有两个变量的目标函数的示例，这些函数具有多个局部最小值：'
- en: '![Figure 14.5 – Non-convex objective function showing multiple local minima](img/B18493_14_005.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![图 14.5 – 显示多个局部最小值的非凸目标函数](img/B18493_14_005.jpg)'
- en: Figure 14.5 – Non-convex objective function showing multiple local minima
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.5 – 显示多个局部最小值的非凸目标函数
- en: '![Figure 14.6 – Another example of a non-convex objective function showing
    multiple local minima](img/B18493_14_006.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![图 14.6 – 非凸目标函数的另一个示例，显示多个局部最小值](img/B18493_14_006.jpg)'
- en: Figure 14.6 – Another example of a non-convex objective function showing multiple
    local minima
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.6 – 非凸目标函数的另一个示例，显示多个局部最小值
- en: For optimization problems with non-convex objective functions, it is not easy
    to find the global minimum. No matter which algorithm we use, chances are that
    we will get a local minimum as the solution. There are, however, algorithms that
    perform iterative procedures to find good local minimum values. Random restart
    hill climbing and simulated annealing are examples of such algorithms. These iterative
    algorithms can be run on multiple machines or processors – not only to find a
    good local optimum solution in a short amount of time but also to be able to search
    multiple locations in the search space for the objective function concurrently.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 对于具有非凸目标函数的优化问题，找到全局最小值并不容易。无论我们使用哪种算法，我们很可能会得到一个局部最小值作为解。然而，有一些算法通过迭代过程来找到良好的局部最小值。随机重启爬山法和模拟退火法就是这样的算法。这些迭代算法可以在多台机器或处理器上运行——不仅可以在短时间内找到良好的局部最优解，还可以同时搜索目标函数搜索空间中的多个位置。
- en: In the next section, we will discover some of the commonly used numerical optimization
    algorithms.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将了解一些常用的数值优化算法。
- en: Common numerical optimization algorithms
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 常见的数值优化算法
- en: Several numerical optimization algorithms are implemented in open source and
    commercially sold optimization software tools. A lot of these algorithms are based
    on heuristic search, which is a technique based on solving problems quickly compared
    to classic methods. Heuristics-based algorithms attempt to find an approximate
    solution since the exact solution is very hard to find. The solutions provided
    by heuristics-based methods are considered good enough to solve the problem; however,
    it is generally not the best solution. In this section, we will briefly discuss
    a few of these algorithms. For detailed discussions on these algorithms and their
    mathematical formulation, you can refer to the articles and texts cited in the
    *Further reading* section of this chapter.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 几种数值优化算法已实现于开源和商业销售的优化软件工具中。其中许多算法基于启发式搜索，这是一种与经典方法相比快速解决问题的技术。基于启发式的算法试图找到一个近似解，因为精确解非常难以找到。基于启发式方法提供的解被认为足够好以解决问题；然而，这通常不是最佳解。在本节中，我们将简要讨论这些算法中的一些。有关这些算法及其数学公式的详细讨论，您可以参考本章“进一步阅读”部分中引用的文章和文本。
- en: Random restart hill climbing
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 随机重启爬山法
- en: 'In **hill climbing**, we start from a point, ![](img/Formula_14.15.png), and
    search in the neighborhood of ![](img/X.png). If the value of the objective function,
    ![](img/f2.png), increases in any direction in the neighborhood of ![](img/X.png),
    then we move in the direction of the increment. We stop when the value of the
    objective function does not increase in any direction. This is the local optimum
    value of the objective function relative to our starting point. This method is
    also called **steepest ascent hill climbing**. The algorithm is very simple:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在**爬山法**中，我们从一点开始，![](img/Formula_14.15.png)，并在![](img/X.png)的邻域内搜索。如果在![](img/X.png)的邻域内任何方向的目标函数值![](img/f2.png)增加，我们就向增加的方向移动。当目标函数的值在任意方向上不再增加时，我们停止。这是相对于我们的起点而言的目标函数的局部最优值。这种方法也称为**最速上升爬山法**。算法非常简单：
- en: '![](img/Formula_14.19.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Formula_14.19.png)'
- en: '![](img/Image94631.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Image94631.png)'
- en: '![](img/Formula_14.21.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Formula_14.21.png)'
- en: '*Figure 14**.7* shows an example of hill climbing to a local maximum value:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '*图14.7*显示了爬山到局部最大值的示例：'
- en: '![Figure 14.7 – Example of hill climbing to a local optimum in the objective
    function](img/B18493_14_007.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![图14.7 – 目标函数中爬山到局部最优的示例](img/B18493_14_007.jpg)'
- en: Figure 14.7 – Example of hill climbing to a local optimum in the objective function
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.7 – 目标函数中爬山到局部最优的示例
- en: For the case of minimization problems, the algorithm searches for a valley (or
    local minimum value) in the objective function. Note that the optimum value found
    in *Figure 14**.7* is a local optimum value and it depends on where we started
    the search from.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 对于最小化问题的情况，算法在目标函数中搜索一个山谷（或局部最小值）。请注意，图**14.7**中找到的最优值是一个局部最优值，它取决于我们从哪里开始搜索。
- en: '**Random restart hill climbing** is an extension of the hill climbing method,
    in which, after finding an optimum value, the algorithm starts again at a different
    location in the variable space. This will often result in arriving at a different
    optimum value, as shown in *Figure 14**.8*:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '**随机重启爬山法**是爬山法的扩展，在该方法中，在找到一个最优值后，算法在变量空间的不同位置重新开始。这通常会导致达到不同的最优值，如图**14.8**所示：'
- en: '![Figure 14.8 – Random restart hill climbing starting at two different variable
    values and then using hill climbing to get to the optimum value in the vicinity](img/B18493_14_008.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![图14.8 – 从两个不同的变量值开始随机重启爬山，然后使用爬山法到达附近的最佳值](img/B18493_14_008.jpg)'
- en: Figure 14.8 – Random restart hill climbing starting at two different variable
    values and then using hill climbing to get to the optimum value in the vicinity
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.8 – 从两个不同的变量值开始随机重启爬山，然后使用爬山法到达附近的最佳值
- en: Even though the algorithm arrives at the global optimum value in *Figure 14**.8*,
    this will not always be the case. However, if we run random restart hill climbing
    several times, chances are that our resulting local optimum value at the end will
    be better than just trying hill climbing only once. Since random restart hill
    climbing starts with different values of the variables, which are chosen randomly
    each time, each iteration can be run on separate processors and threads to speed
    up the algorithm.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 即使算法在**图14.8**中达到了全局最优值，但这并不总是如此。然而，如果我们多次运行随机重启爬山法，最终得到的局部最优值可能会比只尝试爬山一次更好。由于随机重启爬山法每次都从变量随机选择不同的值开始，因此每个迭代可以在不同的处理器和线程上运行，以加快算法的速度。
- en: Simulated annealing
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模拟退火
- en: In random restart hill climbing, we only move in one direction – the direction
    toward a local maximum (or minimum, depending on the problem type). This means
    that the algorithm only exploits the information and is not exploring outside
    of its immediate neighborhood. By not exploring at all, there is a good chance
    that the algorithm will get stuck in a local optimum value and will stay there.
    In **simulated annealing**, the algorithm also explores. It is not always trying
    to improve upon the current objective function value (to move in the direction
    of the local optimum), but it also sometimes moves in the direction where the
    objective function value gets worse (opposite to the direction of the local optimum).
    The simulated annealing algorithm is described as follows.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在随机重启动爬山法中，我们只向一个方向移动——即向局部最大值（或最小值，取决于问题类型）的方向。这意味着算法只利用信息，而不探索其邻近区域之外。由于完全不探索，算法有很大机会陷入局部最优值并停留在那里。在
    **模拟退火** 中，算法也会探索。它并不总是试图改进当前的目标函数值（向局部最优方向移动），但它有时也会向目标函数值变差的方向移动（与局部最优方向相反）。模拟退火算法的描述如下。
- en: 'For a finite set of iterations, do the following:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 对于有限的迭代次数，执行以下操作：
- en: Sample the new point, ![](img/Formula_14.22.png), in the neighborhood, ![](img/Formula_14.23.png)
    of the current point, ![](img/Formula_14.24.png)
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在当前点 ![](img/Formula_14.24.png) 的邻域 ![](img/Formula_14.23.png) 中采样新点 ![](img/Formula_14.22.png)
- en: 'Jump to the new point with the probability given by an acceptance probability
    function, ![](img/Formula_14.25.png), where *T* is the temperature parameter that
    controls how often we jump, and *f* is the objective function value:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用接受概率函数给出的概率跳转到新点，该函数为 ![](img/Formula_14.25.png)，其中 *T* 是温度参数，它控制我们跳转的频率，而
    *f* 是目标函数的值：
- en: '![](img/Formula_14.26.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Formula_14.26.png)'
- en: Decrease temperature, ![](img/Formula_14.27.png)
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 降低温度，![](img/Formula_14.27.png)
- en: 'In the preceding expression, if the objective function value for the new point
    is greater than the current value, then we make the jump to the new point. If
    the objective function value for the new point is less than the current value,
    we make the jump to the new point with the following probability:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的表达式中，如果新点的目标函数值大于当前值，则我们跳转到新点。如果新点的目标函数值小于当前值，我们以以下概率跳转到新点：
- en: '![](img/Formula_14.28.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Formula_14.28.png)'
- en: Now, let’s look at the effects of temperature on simulated annealing.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看温度对模拟退火的影响。
- en: Effects of temperature, T
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 温度 T 的影响
- en: 'The following are the effects of temperature, *T*, in simulated annealing:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在模拟退火中温度 *T* 的影响：
- en: If *T* is large, the exponential will be close to 1, and we would make the jump
    with high probability, regardless of the objective function value at the new point,
    ![](img/Formula_14.30.png). This is very similar to random walk when ![](img/Formula_14.31.png).
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果 *T* 很大，指数将接近 1，并且我们会以很高的概率跳转，无论新点的目标函数值 ![](img/Formula_14.30.png) 如何。这非常类似于当
    ![](img/Formula_14.31.png) 时随机游走。
- en: If *T* is small, the exponential will be very small and we would rarely make
    the jump to the new point. This is very similar to hill climbing when ![](img/Formula_14.33.png).
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果 *T* 很小，指数将非常小，我们很少跳转到新点。这非常类似于当 ![](img/Formula_14.33.png) 时爬山法。
- en: 'During the algorithm run, *T* is generally decreased slowly. When *T* is large,
    we jump around in the objective function space quite often and there is a good
    chance that we will end up somewhere close to the global optimum value or a good
    local optimum value for the objective function. By the time we have reduced *T*
    to a small value, we are probably very close to the global optimum and hence looking
    only in its vicinity. The probability of ending at a point, ![](img/X.png), is
    given as follows:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在算法运行过程中，*T* 通常会缓慢降低。当 *T* 很大时，我们在目标函数空间中跳跃得相当频繁，并且有很大机会最终落在全局最优值或目标函数的良好局部最优值附近。当我们把
    *T* 降低到很小的值时，我们可能非常接近全局最优值，因此我们只在其附近寻找。达到某一点，![](img/X.png)，的概率如下：
- en: '![](img/Formula_14.38.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Formula_14.38.png)'
- en: Here, ![](img/Formula_14.39.png) scales the probabilities between 0 and 1\.
    As we can see from this expression, the larger the value of the objective function
    (in the case of the global maximum), the larger the probability that we will end
    at that point, ![](img/X.png). The same holds for the case of minimization tasks.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，![](img/Formula_14.39.png)将概率缩放到0到1之间。从该表达式可以看出，目标函数的值（在全局最大值的情况下）越大，我们最终停留在该点，![](img/X.png)的概率就越大。对于最小化任务的情况也是一样的。
- en: '*Figure 14**.9* demonstrates the concept of simulated annealing, along with
    the probabilities of moving to the new point, depending on whether the newly selected
    points improve the objective function or not:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '*图14.9* 展示了模拟退火的概念，以及根据新选点是否改进目标函数，移动到新点的概率：'
- en: '![Figure 14.9 – Probability of moving to a new point in simulated annealing
    when a neighboring point is selected to be the next point](img/B18493_14_009.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![图14.9 – 在模拟退火过程中，当选择相邻点作为下一个点时移动到新点的概率](img/B18493_14_009.jpg)'
- en: Figure 14.9 – Probability of moving to a new point in simulated annealing when
    a neighboring point is selected to be the next point
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.9 – 在模拟退火过程中，当选择相邻点作为下一个点时移动到新点的概率
- en: Let’s discuss Tabu search next.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来让我们讨论禁忌搜索。
- en: Tabu search
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 禁忌搜索
- en: '**Tabu search** is another heuristic-based numerical optimization method conceptually
    similar to simulated annealing. Just like simulated annealing, we are allowed
    to move to a solution where our objective function value worsens. In Tabu search,
    local search is carried out and it is prohibited to come back to previously visited
    solutions. A Tabu list is maintained that consists of rules and solutions that
    are not allowed to be explored during the local search, giving this method the
    name Tabu search.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '**禁忌搜索**是另一种基于启发式的数值优化方法，在概念上与模拟退火相似。就像模拟退火一样，我们允许移动到一个目标函数值变差解。在禁忌搜索中，进行局部搜索时，不允许回到之前访问过的解。维护一个禁忌列表，其中包含在局部搜索期间不允许探索的规则和解决方案，因此这种方法被称为禁忌搜索。'
- en: Evolutionary methods
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 进化方法
- en: Evolutionary algorithms are population-based algorithms that use candidate solutions
    along with some fitness function to evolve/improve the solution using mutation
    and recombination. Evolutionary methods are used quite often in numerical optimization
    problems and can find a good local optimum generally within a few iterations.
    Genetic algorithms are a very well-known and used class of evolutionary algorithms.
    Genetic algorithms have several applications in the domain of numerical optimization,
    as well as machine learning. They can be used with binary as well as non-binary
    representations. Genetic algorithms generally use two solutions and apply a crossover
    operator to these solutions to arrive at a better solution.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 进化算法是基于群体的算法，它使用候选解和一些适应度函数，通过变异和重组来进化/改进解。进化方法在数值优化问题中应用相当广泛，通常在几次迭代内就能找到一个好的局部最优解。遗传算法是进化算法中非常知名且广泛使用的一类。遗传算法在数值优化领域以及机器学习领域有多个应用。它们可以使用二进制以及非二进制表示。遗传算法通常使用两个解，并应用交叉算子来这些解以得到更好的解。
- en: In the next section, we will discuss the various applications and use cases
    of large-scale numerical optimization problems.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将讨论大规模数值优化问题的各种应用和用例。
- en: Example use cases of large-scale numerical optimization problems
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 大规模数值优化问题的示例用例
- en: 'In the previous section, we discussed a few of the commonly used numerical
    optimization methods. There are several others that we did not touch upon, and
    we recommend you check the *References* section for some great texts on several
    numerical optimization methods. Several very common large-scale optimization problems
    are implemented and solved in verticals, such as logistics, manufacturing, telecommunications,
    health care and life sciences, financial services, and so on. In this section,
    we are going to discuss a few of the very common practical large-scale numerical
    optimization use cases and applications. We will discuss the following use cases:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们讨论了一些常用的数值优化方法。还有一些我们没有涉及，我们建议您查看*参考文献*部分，以了解关于多种数值优化方法的优秀文本。一些非常常见的大规模优化问题已在垂直领域实现并解决，例如物流、制造、电信、医疗保健和生命科学、金融服务等。在本节中，我们将讨论一些非常常见的实际大规模数值优化用例和应用。我们将讨论以下用例：
- en: The traveling salesperson problem of determining the best route for a salesperson
    going from one city to the next
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确定销售人员从一个城市到下一个城市最佳路线的旅行销售人员问题
- en: A dispatch optimization problem for technicians traveling via vehicles and carrying
    out various jobs in a geographic location
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 技术人员通过车辆旅行并在地理位置执行各种工作的调度优化问题
- en: Assembly line optimization to allocate the optimal type and number of parts
    to be manufactured on an assembly line
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 汇总线优化，以确定在汇总线上制造的最佳类型和数量的零件
- en: We will begin by discussing one of the oldest and most commonly studied numerical
    optimization problems, known as the traveling salesperson problem.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先讨论一个最古老且最常研究的数值优化问题，称为旅行销售人员问题。
- en: Traveling salesperson optimization problem
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 旅行销售人员优化问题
- en: 'The traveling salesperson problem is one of the most studied combinational
    optimization problems, first formulated in 1930\. It belongs to the class of NP-hard
    problems; the decision version of this problem belongs to the class of NP-complete
    problems. In the traveling salesperson problem, we are given a set of cities (or
    locations), and we start from a city, travel to each city exactly once, and return
    to the origin city to find the shortest route to accomplish this task. For example,
    as shown in *Figure 14**.10*, in the US map, we want to start from city A, travel
    through all the cities marked, and then return to city A while following the shortest
    possible route:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 旅行销售人员问题是研究最广泛的组合优化问题之一，首次于1930年提出。它属于NP-hard问题类别；该问题的决策版本属于NP-complete问题类别。在旅行销售人员问题中，我们给定一组城市（或位置），从一个城市出发，每个城市恰好访问一次，然后返回起点城市以找到完成此任务的最短路线。例如，如图*图14.10*所示，在美国地图上，我们想要从城市A出发，经过所有标记的城市，然后沿着最短的可能路线返回城市A：
- en: '![Figure 14.10 – A map of the US showing arbitrary cities A through O](img/B18493_14_010.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![图14.10 – 显示任意城市A至O的美国地图](img/B18493_14_010.jpg)'
- en: Figure 14.10 – A map of the US showing arbitrary cities A through O
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.10 – 显示任意城市A至O的美国地图
- en: Even though this problem seems simple to solve, it is an NP-hard problem. There
    are several combinations that the traveling salesperson can take to visit each
    city exactly once, but there is generally only one solution that accomplishes
    this with the shortest possible route. The traveling salesperson problem can be
    formulated in a few different ways. It can be formulated as an undirected weighted
    graph with cities being the vertices of the graph, the route connecting the cities
    being the edges, and weighted by the distance between the cities. It can then
    be solved as a minimization problem that starts and finishes at a given vertex,
    with each vertex being visited exactly once.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这个问题看起来容易解决，但它是一个NP-hard问题。旅行销售人员可以采取多种组合来访问每个城市恰好一次，但通常只有一个解决方案能够以最短的可能路线完成这项任务。旅行销售人员问题可以用几种不同的方式来表述。它可以表述为一个无向加权图，其中城市是图的顶点，连接城市的路线是边，并按城市之间的距离进行加权。然后它可以作为一个以给定顶点开始和结束的最小化问题来解决，每个顶点恰好访问一次。
- en: 'Another way to model the traveling salesperson problem is as an integer linear
    program. Several formulations can be used, such as the Miller-Tucker-Zemlin formulation
    and the Dantzig-Fulkerson-Johnson formulation. When the number of cities is small
    and only a small set of paths exists between the cities, the exact solution can
    be found in a small amount of time. However, as the number of cities and routes
    between the cities become large, finding the exact solution in a reasonable amount
    of time becomes almost impossible. In such situations, numerical methods attempt
    to find approximate or suboptimal solutions for the problem. *Figure 14**.11*
    shows one such example of a route found between the cities shown in *Figure 14**.10*.
    There may be possible shortest routes that exist for this problem, but the route
    shown in *Figure 14**.11* is reasonably good and is quite possibly either the
    shortest possible route or very close to the shortest possible route:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种将旅行推销员问题建模的方法是将其作为一个整数线性规划问题。可以使用几种不同的表述，例如米勒-塔克泽林（Miller-Tucker-Zemlin）表述和丹齐格-富尔克森-约翰逊（Dantzig-Fulkerson-Johnson）表述。当城市数量较少且城市间只有少量路径时，可以在很短的时间内找到精确解。然而，随着城市数量和城市间路径数量的增加，在合理的时间内找到精确解几乎变得不可能。在这种情况下，数值方法试图找到问题的近似解或次优解。*图14.11*展示了在*图14.10*中所示城市之间找到的一条这样的路线。对于这个问题，可能存在可能的最短路线，但*图14.11*中显示的路线是相当合理的，并且很可能是最短的可能路线，或者非常接近最短的可能路线：
- en: '![Figure 14.11 – Example of the traveling salesperson problem showing a very
    good route (possibly the shortest possible route) between the cities marked from
    A through O on the map](img/B18493_14_011.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![图14.11 – 旅行推销员问题的示例，展示了在地图上从A标记到O标记的城市之间的一条非常好的路线（可能是可能的最短路线）](img/B18493_14_011.jpg)'
- en: Figure 14.11 – Example of the traveling salesperson problem showing a very good
    route (possibly the shortest possible route) between the cities marked from A
    through O on the map
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.11 – 旅行推销员问题的示例，展示了在地图上从A标记到O标记的城市之间的一条非常好的路线（可能是可能的最短路线）
- en: The traveling salesperson problem has several applications in various fields,
    such as planning, logistics, manufacturing, DNA sequencing, and so on. There are
    also several open source and commercially sold software tools available for finding
    a solution for the traveling salesperson problem, as well as extending it to additional
    similar problems that exist in the industry. One of the most common practical
    extensions of the traveling salesperson problem is the vehicle routing problem.
    In the following section, we will discuss a more complex extension of the vehicle
    routing problem, called the worker dispatch optimization problem.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 旅行推销员问题在各个领域都有多个应用，例如规划、物流、制造、DNA测序等。还有多种开源和商业销售的软件工具可用于解决旅行推销员问题，以及将其扩展到行业中存在的其他类似问题。旅行推销员问题最常见的实际扩展之一是车辆路径问题。在下一节中，我们将讨论车辆路径问题的一个更复杂的扩展，称为工人调度优化问题。
- en: Worker dispatch optimization
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工人调度优化
- en: The vehicle routing problem attempts to find the optimal set of routes for a
    fleet of vehicles to make deliveries to customers. This is a very common problem
    in logistics where organizations such as the **United States Postal Service**
    (**USPS**), **United Parcel Service** (**UPS**), FedEx Corporation, and others,
    have to deliver several packages to a set of customers in various geographic locations
    daily. This problem can be formulated using various business objectives, such
    as delivering the packages promptly while maximizing the number of deliveries
    assigned to a driver/vehicle and minimizing the total fuel cost. These organizations
    generally formulate this problem as an optimization problem and then solve it
    daily (and often multiple times a day) to make the delivery to customers while
    also maximizing their profitability within certain constraints.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 车辆路径问题旨在为车队找到最优的路线，以便向客户进行配送。这在物流领域是一个非常常见的问题，例如，像美国邮政服务（**United States Postal
    Service**，简称**USPS**）、联合包裹服务公司（**United Parcel Service**，简称**UPS**）、联邦快递公司（FedEx
    Corporation）等组织，每天都需要向不同地理位置的客户配送多个包裹。这个问题可以使用各种商业目标来表述，例如，在最大化分配给司机/车辆的配送数量和最小化总燃料成本的同时，及时地配送包裹。这些组织通常将这个问题表述为一个优化问题，并在每天（有时一天内多次）解决它，以便向客户配送，同时也在一定约束条件下最大化其盈利性。
- en: Similar to the traveling person problem, finding a solution for the vehicle
    routing problem is also NP-hard. However, several numerical optimization software
    tools find a very good local optimum solution in a reasonable amount of time.
    Furthermore, using high-performance and distributed computing, the software can
    be written to start searching for various solutions at the same time on multiple
    processors and machines and then aggregate and find the best one out of the various
    local optima found.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 与旅行者问题类似，寻找车辆路径问题的解决方案也是NP难的。然而，几个数值优化软件工具可以在合理的时间内找到一个非常好的局部最优解。此外，使用高性能和分布式计算，软件可以编写为同时在多个处理器和机器上开始寻找各种解决方案，然后汇总并从找到的各种局部最优解中找到最佳的一个。
- en: Often, the vehicle routing problem is also extended with a few modifications
    to solve even more complex problems. One such example is the technician or worker
    dispatch optimization problem. In a worker dispatch optimization problem, the
    goal is to send technicians or workers to a customer location and carry out some
    task that requires time to complete. This is a very common problem for service-providing
    organizations such as electricity, gas, internet, telecommunication, and so on.
    These organizations have several worker/technician hubs or garages based on the
    home location of the worker. The jobs that arrive each day need to be assigned
    to these workers based on their schedules, as well as their skills and skill competency
    levels, since not all jobs are always the same. All workers have the same skill
    level for different types of jobs. Furthermore, in all such jobs, there is a committed
    time window to the customer that needs to be met for customer satisfaction. In
    addition, different jobs take a different amount of time to complete, and there
    is also the time required to travel a distance to the customer location, which
    may vary based on the time of day.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，车辆路径问题也会通过一些修改来扩展，以解决更加复杂的问题。其中一个例子就是技术人员或工人调度优化问题。在工人调度优化问题中，目标是派遣技术人员或工人到客户位置并完成一些需要时间才能完成的任务。这对于像电力、燃气、互联网、电信等服务提供组织来说是一个非常普遍的问题。这些组织根据工作人员的居住地设有几个工人/技术人员中心或车库。每天到达的工作需要根据他们的日程、技能和技能熟练程度分配给这些工人，因为不是所有的工作都是一样的。所有工人在不同类型的工作中都有相同的技能水平。此外，在所有这些工作中，都有一个需要满足客户满意度的固定时间窗口。此外，不同的工作完成所需的时间不同，还需要考虑前往客户位置所需的时间，这可能会因一天中的时间而异。
- en: '*Figure 14**.12* shows an example where there is a worker hub in the center
    and several customer locations that need to be serviced by workers/technicians
    on a given day:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '*图14*.*12* 展示了一个示例，其中有一个位于中心的工人中心，以及一些在给定一天需要由工人/技术人员服务的客户位置：'
- en: '![Figure 14.12 – An example of the worker/technician optimization problem](img/B18493_14_012.jpg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![图14.12 – 工作人员/技术人员优化问题的示例](img/B18493_14_012.jpg)'
- en: Figure 14.12 – An example of the worker/technician optimization problem
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.12 – 工作人员/技术人员优化问题的示例
- en: We will now outline these constraints formally and also discuss a few objective
    functions that can be used to solve this problem.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将正式概述这些约束条件，并讨论一些可以用来解决这个问题的目标函数。
- en: Possible objective metrics for the worker optimization problem
  id: totrans-118
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 工作人员优化问题的可能客观指标
- en: 'The worker optimization problem can have several objective functions/metrics
    based on the requirements of the business. We will list a few of these here:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 工作人员优化问题可以根据业务需求具有几个目标函数/指标。我们将在下面列出其中的一些：
- en: '**Minimize total fuel cost**: With this objective function, the goal is to
    find a non-trivial solution that minimizes the total fuel cost per job of all
    the vehicles on any given day. Fuel costs will depend on the number of workers
    and vehicles, the number of jobs, the location of jobs, the routes that were taken
    to get to the jobs, the order of the jobs, and the worker’s schedules. Often,
    minimizing fuel costs is an indirect consequence of finishing the maximum number
    of jobs on a given day, because if the algorithm can pack a large number of jobs
    for a given worker, then the fuel cost per job for that particular vehicle will
    be low and hence the total fuel cost per job will be low as well for all the workers.'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**最小化总燃料成本**：使用这个目标函数，目标是找到一个非平凡解，以最小化任何给定一天所有车辆每项工作的总燃料成本。燃料成本将取决于工人和车辆的数量、工作的数量、工作的位置、到达工作的路线、工作的顺序以及工人的日程安排。通常，最小化燃料成本是完成给定一天最大数量工作的间接结果，因为如果算法可以为特定工人打包大量工作，那么该特定车辆的每项工作的燃料成本就会很低，因此所有工人的每项工作的总燃料成本也会很低。'
- en: '**Maximize the number of jobs done on a given day**: To maximize profit and
    also to keep the customers happy, service organizations need to maximize the number
    of jobs completed on a given day with as few jobs as possible being carried over
    to the next day. This also depends on the number of workers available on a given
    day, worker skills, and the route taken to carry out the jobs.'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**最大化给定一天完成的工作数量**：为了最大化利润并保持客户满意，服务组织需要以尽可能少的工作转移到下一天为前提，最大化给定一天完成的工作数量。这也取决于给定一天可用的工人数量、工人技能以及执行工作所采取的路线。'
- en: '**Maximize worker efficiency**: This objective is dependent on maximizing the
    number of jobs done on a given day. The goal of this objective function is to
    maximize the number of jobs carried out by each worker on a given day, which also
    depends on the technician’s schedule, skills, level of competency, starting location,
    and the distance needed to travel by the technician.'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**最大化工人效率**：这个目标依赖于最大化给定一天完成的工作数量。这个目标函数的目的是最大化每个工人在给定一天完成的工作数量，这也取决于技术人员的日程安排、技能、竞争力水平、起始位置以及技术人员需要行驶的距离。'
- en: '**Composite objective function**: In a composite objective function, the goal
    is to explicitly optimize a combination of objective functions, such as maximizing
    worker efficiency and minimizing distance or fuel cost. Sometimes, the various
    terms in a composite objective function may also be opposite to each other. For
    example, increasing one may result in decreasing the other, and so on. In such
    cases, we may have penalty terms associated with the different objective functions
    comprising the composite function and optimize the resulting combination of penalized
    terms.'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**复合目标函数**：在复合目标函数中，目标是显式优化一组目标函数的组合，例如最大化工人效率、最小化距离或燃料成本。有时，复合目标函数中的各个项也可能相互对立。例如，增加一个可能会减少另一个，依此类推。在这种情况下，我们可能需要与复合函数中包含的不同目标函数相关的惩罚项，并优化由此产生的惩罚项组合。'
- en: Now, let’s look at some of the constraints that can be important for formulating
    the worker dispatch optimization problem.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看一些对于制定工人调度优化问题可能很重要的约束。
- en: Important constraints for the worker dispatch optimization problem
  id: totrans-125
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 工人调度优化问题的重要约束
- en: 'The following are some of the important constraints for the worker dispatch
    optimization problem. While constraints cover the most common ones, there can
    be additional constraints, depending on the individual use case:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些工人调度优化问题的重要约束。虽然约束涵盖了最常见的约束，但根据具体用例，可能会有额外的约束：
- en: '**The number of jobs**: The total number of jobs for a given worker hub on
    any given day is important and affects the worker efficiency number, as well as
    the distance traveled, and hence the fuel cost. How many jobs can be feasibly
    completed on any given day is also heavily dependent on the number of jobs on
    a given day.'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**工作数量**：给定一天给定工人中心的总工作数量很重要，它会影响工人效率数字、行驶距离以及燃料成本。任何给定一天可以实际完成的工作数量也严重依赖于该天的工作数量。'
- en: '**The number of workers available on a given day**: How many workers are available
    on a given day to carry out the jobs is another important constraint and it has
    a significant impact on worker efficiency, as well as distance traveled and fuel
    cost.'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**给定一天可用的工人数量**：有多少工人在给定的一天内可以执行工作是另一个重要的约束条件，它对工人效率、旅行距离和燃料成本有重大影响。'
- en: '**Worker schedule**: In addition to the number of workers available, the schedule
    of each worker is also an important constraint. Some workers may start their shift
    at 8 A.M. and some at 10 A.M., and so on. Similarly, the number of hours each
    worker may work each day might be different. Some may work for 8 hours, and others
    for 6 hours. In addition, generally, workers also have break times, such as lunch
    and other periodic breaks. These breaks may also be at different times, adding
    further schedule-related constraints to the optimization problem.'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**工人排班**：除了可用的工人数量外，每个工人的排班也是另一个重要的约束条件。一些工人可能从早上8点开始上班，而另一些则从10点开始，依此类推。同样，每个工人每天可能工作的小时数也可能不同。有些人可能工作8小时，而其他人可能工作6小时。此外，通常，工人也有休息时间，如午餐和其他定期休息。这些休息时间也可能在不同的时间，这进一步增加了与排班相关的约束，使优化问题更加复杂。'
- en: '**Job types**: There are generally several different job types. For example,
    for a telecommunication organization, there might be new service installations
    or old service repair jobs. In addition, several service-providing organizations
    offer multiple products and services. For example, a telecommunication organization
    generally offers internet, cable/TV services, and home phone services. These different
    job types add another dimension to the optimization problem, further complicating
    it.'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**工作类型**：通常有几种不同的工作类型。例如，对于电信组织，可能会有新的服务安装或旧服务维修工作。此外，几个服务提供组织提供多种产品和服务。例如，电信组织通常提供互联网、有线电视服务和家庭电话服务。这些不同的工作类型为优化问题增加了另一个维度，进一步复杂化了问题。'
- en: '**Worker skills and skills-related competency levels**: Just like the different
    job types mentioned previously, different workers and technicians have different
    skill types as well as expertise levels in the skill. Using the same telecommunication
    use case example again, some workers might be dedicated to installing new services
    and others to repairing old services. In addition, some technicians can be experts
    in internet service installation and others in telephone service installation.
    This results in different workers taking different amounts of time to install
    the same service or debug and repair the same problem. This also adds an interesting
    dilemma when formulating the problem from a business point of view.'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**工人技能和技能相关能力水平**：就像之前提到的不同工作类型一样，不同的工人和技术人员也有不同的技能类型以及在该技能领域的专业水平。再次以相同的电信使用案例为例，一些工人可能专注于安装新的服务，而其他人则专注于维修旧服务。此外，一些技术人员可能是互联网服务安装的专家，而其他人则是电话服务安装的专家。这导致不同工人安装相同服务或调试和维修相同问题所需的时间不同。这也为从商业角度制定问题时增加了一个有趣的困境。'
- en: The business may want to maximize the total number of jobs completed on a given
    day, which is generally accomplished if the algorithm matches the skill levels
    of workers with the jobs appropriately. On the other hand, if the business follows
    this approach, then the workers may not be able to learn new skills or get practical
    experience related to services and problems that they are not already an expert
    at. This parameter regarding skill level should be modeled appropriately in the
    formulation of the problem to achieve the best results.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 企业可能希望在一个给定的一天内完成尽可能多的工作，这通常通过算法适当地匹配工人技能水平与工作来实现。另一方面，如果企业采取这种方法，那么工人可能无法学习新技能或获得与他们在该领域不是专家的服务和问题相关的实践经验。在制定问题的过程中，应该适当地模拟关于技能水平的这个参数，以实现最佳结果。
- en: '**Job locations**: Where each job is located in a geographical location is
    also important for deciding the route assigned by the optimization solution to
    each worker.'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**工作地点**：每个工作在地理位置上的位置对于决定优化解决方案分配给每个工人的路线也很重要。'
- en: '**Customer time windows**: Service-providing companies also commit to a specific
    time window in which the worker should arrive at the customer/job location. These
    time windows may also vary based on the type of job, the number of workers available,
    as well as geographical locations. These time windows also have a significant
    effect on the final objective function value. For example, there might be a new
    service install job at a customer location with a committed time window of 8–10
    A.M. on a particular day. At the same time, there might be another customer very
    close by with a repair request. Now, even though the jobs are physically very
    close to each other, because of the promised time window, the organization will
    probably need to dispatch multiple workers to adhere to the times committed to
    the customer. Due to this, several modernized organizations are also formulating
    the worker dispatch problem jointly with the scheduling problem; when there is
    a request for a repair or an installation, the scheduler should take into account
    all these constraints while committing to a time window with the customer.'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**客户时间窗口**：服务提供公司还承诺一个特定的时间窗口，在这个时间窗口内，工人应到达客户/工作地点。这些时间窗口也可能根据工作的类型、可用工人的数量以及地理位置而变化。这些时间窗口对最终目标函数值也有显著影响。例如，在某个特定的一天，客户地点可能有一个承诺的时间窗口，时间为早上8-10点进行新的服务安装工作。同时，附近可能还有另一个客户有维修请求。现在，尽管这些工作在物理上非常接近，但由于承诺的时间窗口，组织可能需要派遣多个工人来遵守对客户的承诺时间。因此，许多现代化的组织也在将工人调度问题与调度问题联合制定；当有维修或安装请求时，调度员应在与客户承诺时间窗口时考虑到所有这些约束条件。'
- en: '**Job durations**: Different jobs take different amounts of time to complete.
    There is generally an average time for a particular job for all the workers in
    a worker hub, and also, individual times are taken by each worker to complete
    that job. All these are also modeled as constraints in the optimization problem
    to get the best results.'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**工作时长**：不同的工作完成所需的时间不同。通常，在工人中心的所有工人中，对于特定的工作都有一个平均时间，而且每个工人完成该工作的时间也是个体差异。所有这些也被建模为优化问题中的约束条件，以获得最佳结果。'
- en: '**Maximum travel time and distance**: Generally, there is also a maximum limit
    on how much total distance or time a worker may travel on a given day, as well
    as the farthest a worker may travel from the garage hub.'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**最大旅行时间和距离**：通常，对于工人一天内可能行驶的总距离或时间也有一个最大限制，以及工人可能从车库中心最远能到达的距离。'
- en: 'In addition to these constraints, there may be additional constraints too (for
    example, the weather: rain, snow, storm, and so on), depending on the particular
    organization working on the use case. As we can imagine, all these constraints
    make the worker dispatch optimization problem very complicated. Generally, for
    any organization using this approach to assign jobs to its workers, this problem
    is solved on multiple higher-performance computation machines every morning in
    a distributed fashion. For example, for the same geographic location, the random
    restart approach for hill climbing and other similar algorithms can be used, with
    each restart iteration being executed on a different processor and/or machine.
    There are several open source and commercially available optimization software
    that formulate and solve this problem very efficiently in a reasonable amount
    of time.'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这些约束条件之外，还可能有其他额外的约束条件（例如，天气：雨、雪、风暴等），具体取决于特定组织正在处理的使用案例。正如我们可以想象的那样，所有这些约束条件使得工人调度优化问题非常复杂。通常，对于任何使用这种方法为其工人分配工作的组织，这个问题每天早上都在多个高性能计算机器上以分布式方式解决。例如，对于相同的地理位置，可以使用随机重启方法进行爬山和其他类似算法，每个重启迭代都在不同的处理器和/或机器上执行。有几款开源和商业化的优化软件可以非常高效地在合理的时间内制定和解决此问题。
- en: '*Figure 14**.13* shows an example of three worker hubs with three workers each
    following an optimized route to the job locations and back to the worker hub:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '*图14**.13* 展示了三个工人中心，每个中心有三位工人，他们遵循优化的路线前往工作地点并返回工人中心：'
- en: "![Figure 14.13 – Example showing three worker hubs and nine workers \uFEFF\
    in total\uFEFF, with three workers each starting from a worker hub and following\
    \ an optimized route to the job locations](img/B18493_14_013.jpg)"
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![图14.13 – 示例展示三个工人中心和总共九位工人，每位工人从工人中心出发，遵循优化的路线前往工作地点](img/B18493_14_013.jpg)'
- en: Figure 14.13 – Example showing three worker hubs and nine workers in total,
    with three workers each starting from a worker hub and following an optimized
    route to the job locations
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.13 – 示例展示了三个工人中心和总共九名工人，其中三名工人从每个工人中心出发，遵循优化的路线到达工作地点
- en: By using numerical optimization algorithms to solve this optimization problem,
    service companies can improve worker efficiency, cut down on fuel costs, and improve
    customer satisfaction significantly. Next, we will discuss another example of
    numerical optimization for allocating items to an assembly line to maximize the
    number of produced items on a given day.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用数值优化算法来解决这个优化问题，服务公司可以提高工人效率，减少燃料成本，并显著提高客户满意度。接下来，我们将讨论另一个数值优化示例，即如何将物品分配到装配线以最大化给定日期的生产物品数量。
- en: Assembly line optimization
  id: totrans-142
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 装配线优化
- en: In manufacturing industries such as electronics manufacturing, there are usually
    several assembly lines or belts on which various items are being built and assembled
    to build a final product, such as a desktop/laptop computer, cell phone, tablet,
    and so on. On these assembly lines, human workers are manually working on assembling
    the items. Different assembly lines can assemble different products, with some
    overlap. Furthermore, the workers assembling the products also vary in some skills
    and skill levels, just like the worker dispatch optimization problem. Let’s discuss
    the various optimization metrics that can be used for this problem based on the
    business use case.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在电子制造等制造业中，通常有多个装配线或传送带，各种物品在这些装配线上被组装成最终产品，如台式/笔记本电脑、手机、平板电脑等。在这些装配线上，人工工人正在手动组装物品。不同的装配线可以组装不同的产品，存在一些重叠。此外，组装产品的工人也具有不同的技能和技能水平，就像工人调度优化问题一样。让我们根据业务用例讨论可用于此问题的各种优化指标。
- en: Objective metrics for assembly line optimization
  id: totrans-144
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 装配线优化的目标指标
- en: 'The following objective metrics are some of the common ones used for the assembly
    line optimization problem:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 以下目标指标是装配线优化问题中常用的一些：
- en: '**Maximize the number of items produced on a given day**: Using this metric,
    the goal is to maximize the total number of items assembled on any given day.
    Generally, it also depends on the number of orders, as well as the forecast for
    the number of items needed in near future.'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**最大化给定日期生产的物品数量**：使用此指标，目标是最大化任何给定日期组装的总物品数量。通常，这也取决于订单数量，以及近期内所需物品的预测。'
- en: '**Minimize the number of items stored in storage**: With this metric, the goal
    is to minimize the number of excessive items manufactured and stored in the storage
    for future sales. This metric also depends on the forecast of items to be manufactured,
    as well as the storage capacity.'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**最小化存储中物品的数量**：使用此指标，目标是最小化过多制造并存储在存储中用于未来销售的物品数量。此指标还取决于要制造的物品的预测以及存储容量。'
- en: In addition to these metrics, other metrics can be used based on the business
    use case and goals. Furthermore, like the worker dispatch optimization problem,
    objective metrics comprised of multiple metrics can also be used. Let’s look at
    some of the constraints for this problem.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这些指标外，还可以根据业务用例和目标使用其他指标。此外，就像工人调度优化问题一样，由多个指标组成的客观指标也可以使用。让我们看看此问题的一些约束条件。
- en: Constraints for the assembly line optimization problem
  id: totrans-149
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 装配线优化问题的约束条件
- en: 'The following constraints are important for the assembly line optimization
    problem:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 以下约束对于装配线优化问题很重要：
- en: The number of different items needed to be assembled each day. This constraint
    depends on the sales forecast, as well as the number of pre-ordered items.
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每天需要组装的不同物品数量。此约束取决于销售预测以及预订单数量。
- en: The number of workers available to work on a given day, as well as the schedule
    of each worker.
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每天可供工作的工人数量，以及每个工人的日程安排。
- en: The skills of various individual workers, as well as the skill competency level
    of each worker.
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 各个工人的技能，以及每个工人的技能竞争力水平。
- en: Skills needed to assemble various items.
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组装各种物品所需的技能。
- en: The capacity of each belt to assemble different items.
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每条传送带组装不同物品的容量。
- en: Storage capacity of the factory and/or warehouse.
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工厂和/或仓库的存储容量。
- en: The maximum number of items that can be stored (surplus) for a specific amount
    of time, such as a day, a week, or a month.
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在特定时间段内（如一天、一周或一个月）可以存储的最大物品数量（过剩）。
- en: While these are some of the common constraints being considered while formulating
    the assembly line optimization problem, there can be additional constraints as
    well, depending on the specific business use case and various other conditions
    and requirements. By formulating this problem as an optimization problem and then
    solving it on a daily, weekly, monthly, or quarterly schedule, manufacturing companies
    generally improve their yield, profit, and efficiency while reducing waste and
    the number of surplus items.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这些是在制定流水线优化问题时考虑的一些常见约束，但根据具体的业务用例以及各种其他条件和要求，还可能有额外的约束。通过将此问题作为优化问题进行制定，然后在每日、每周、每月或每季度的时间表上解决它，制造公司通常可以提高产量、利润和效率，同时减少浪费和过剩物品的数量。
- en: In this section, we discussed a few applications and use cases of numerical
    optimization being used in the industry. In the next section, we are going to
    discuss the high-performance compute options available on AWS for solving these
    numerical optimization problems.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们讨论了在工业界使用的数值优化的一些应用和用例。在下一节中，我们将讨论AWS上可用于解决这些数值优化问题的性能计算选项。
- en: Numerical optimization using high-performance compute on AWS
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在AWS上使用高性能计算进行数值优化
- en: As discussed in the previous sections, most of the numerical optimization problems
    are NP-hard and highly compute-intensive for finding a reasonable solution. The
    software tool employing these algorithms has to carry out a large-scale search
    over a very complicated multidimensional objective function in search of the global
    optimum. Because of the complexity, the number of dimensions, non-convexity, and
    sometimes discontinuities present in these objective functions, it is almost impossible
    to find the global optimum in a finite amount of time, even with today’s compute
    resources.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 如前几节所述，大多数数值优化问题都是NP难的，对于找到合理的解决方案来说计算密集型很高。采用这些算法的软件工具必须在非常复杂的多元目标函数上进行大规模搜索，以寻找全局最优解。由于复杂性、维度数量、非凸性和有时存在于这些目标函数中的不连续性，即使在今天的计算资源下，几乎不可能在有限的时间内找到全局最优解。
- en: However, for most of these problems, several commercially available and open
    source software tools find a very good solution (local optimum) in a reasonable
    amount of time. These tools can be run on the infrastructure and compute resources
    provided by AWS. Let’s discuss some of the common commercial and open source tools
    that can be installed and run on various AWS resources to solve numerical optimization
    problems in almost every industry domain.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，对于这些问题的大多数，几个商业和开源软件工具可以在合理的时间内找到一个非常好的解决方案（局部最优解）。这些工具可以在AWS提供的基础设施和计算资源上运行。让我们讨论一些常见的商业和开源工具，这些工具可以安装在AWS的各种资源上，以解决几乎每个行业领域的数值优化问题。
- en: Commercial optimization solvers
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 商业优化求解器
- en: 'The following commercial solvers are some of the most popular and common ones
    used on AWS compute infrastructure:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些在AWS计算基础设施上使用最流行和最常用的商业求解器：
- en: IBM ILOG CPLEX Optimization Studio (commonly known as **CPLEX**)
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IBM ILOG CPLEX优化工作室（通常称为**CPLEX**）
- en: Gurobi Optimization
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Gurobi优化
- en: FICO Xpress Optimization
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: FICO Xpress优化
- en: '**A Mathematical Programming** **Language** (**AMPL**)'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数学规划** **语言** （**AMPL**）'
- en: Open source optimization solvers
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开源优化求解器
- en: 'In addition to the commercially sold optimization solver tools, the following
    open source optimization solvers can be easily run on AWS compute infrastructure
    as well:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 除了商业销售的优化求解器工具之外，以下开源优化求解器也可以轻松地在AWS计算基础设施上运行：
- en: '**GNU Linear Programming** **Kit** (**GLPK**)'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**GNU线性规划** **套件** （**GLPK**）'
- en: '**Computational Infrastructure for Operations** **Research** (**COIN-OR**)'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**计算基础设施** **研究** （**COIN-OR**）'
- en: Pyomo
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Pyomo
- en: '**Convex Over and Under ENvelopes for Nonlinear** **Estimation** (**Couenne**)'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**凸包和非线性** **估计** **（Couenne**）'
- en: PuLP
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PuLP
- en: Google OR-Tools
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Google OR-Tools
- en: SCIP Optimization Suite
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SCIP优化套件
- en: These commercially available and open source software tools can be run on AWS
    infrastructure using a variety of different architecture patterns, as outlined
    in the following section.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 这些商业和开源软件工具可以使用以下章节中概述的各种不同的架构模式在AWS基础设施上运行。
- en: Numerical optimization patterns on AWS
  id: totrans-179
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: AWS上的数值优化模式
- en: Various architecture patterns can be employed to run the previously mentioned
    optimization software tools on AWS resources.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 可以采用各种架构模式在AWS资源上运行之前提到的优化软件工具。
- en: '*Figure 14**.14* shows various tools and resources from the AWS stack that
    can be used to help with solving numerical optimization problems:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 14.14* 展示了 AWS 堆栈中可用于帮助解决数值优化问题的各种工具和资源：'
- en: '![Figure 14.14 ­– Various AWS resources and tools that can be used to solve
    numerical optimization problems](img/B18493_14_014.jpg)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
  zh: '![图 14.14 – 可用于解决数值优化问题的各种 AWS 资源和工具](img/B18493_14_014.jpg)'
- en: Figure 14.14 ­– Various AWS resources and tools that can be used to solve numerical
    optimization problems
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.14 – 可用于解决数值优化问题的各种 AWS 资源和工具
- en: Let’s discuss a few architecture patterns employing these AWS resources and
    tools and see how they can help with solving numerical optimization problems.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们讨论一些使用这些 AWS 资源和工具的架构模式，并看看它们如何帮助解决数值优化问题。
- en: EC2 instances
  id: totrans-185
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: EC2 实例
- en: 'We can install and run these optimization tools on Amazon EC2 instances in
    a container. The optimization software suite, along with all the required libraries,
    can be built into a container that can then utilize EC2 instances, which can also
    be used in a distributed manner to run several parallel searches at the same time
    (for example, random restart hill climbing). By running multiple iterations of
    these algorithms in parallel, there is a better chance of arriving at the global
    optimum value or a very good local optimum. *Figure 14**.15* shows the architecture
    for running these optimization tools on EC2 instances using containers:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在 Amazon EC2 实例上安装并运行这些优化工具，以容器的方式运行。优化软件套件以及所有必需的库可以构建成一个容器，然后利用 EC2 实例，这些实例也可以以分布式方式同时运行多个并行搜索（例如，随机重启爬山法）。通过并行运行这些算法的多个迭代，有更好的机会达到全局最优值或非常好的局部最优值。*图
    14.15* 展示了在 EC2 实例上使用容器运行这些优化工具的架构：
- en: "![Figure 14.15 – Example architecture showing numerical optimization software\
    \ running on a containe\uFEFFr on an Amazon EC2 compute instance](img/B18493_14_015.jpg)"
  id: totrans-187
  prefs: []
  type: TYPE_IMG
  zh: '![图 14.15 – 示例架构，展示数值优化软件在 Amazon EC2 计算实例上的容器中运行](img/B18493_14_015.jpg)'
- en: Figure 14.15 – Example architecture showing numerical optimization software
    running on a container on an Amazon EC2 compute instance
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.15 – 示例架构，展示数值优化软件在 Amazon EC2 计算实例上的容器中运行
- en: Using a serverless architecture
  id: totrans-189
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用无服务器架构
- en: 'In addition to using EC2 instances, we can also run the optimization software
    in a serverless manner on AWS. One example of using a serverless architecture
    is shown in *Figure 14**.16*, where AWS Lambda is used to launch multiple optimization
    tasks on AWS Fargate. These tasks can be run in parallel and then aggregated to
    get the best solution for an optimization problem. These tasks can also be different
    optimization packages and libraries attempting to solve the same problem, with
    the best result being used at the end. The data consisting of constraints and
    variables can be read from Amazon S3, as also shown in *Figure 14**.16*. Amazon
    CloudWatch is also used in this pattern to output the necessary steps and status
    messages:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 除了使用 EC2 实例外，我们还可以在 AWS 上以无服务器的方式运行优化软件。*图 14.16* 中展示了使用无服务器架构的一个示例，其中 AWS Lambda
    用于在 AWS Fargate 上启动多个优化任务。这些任务可以并行运行，然后汇总以获得优化问题的最佳解决方案。这些任务也可以是尝试解决同一问题的不同优化包和库，最终使用最佳结果。包含约束和变量的数据可以从
    Amazon S3 读取，如*图 14.16* 所示。在此模式中，Amazon CloudWatch 也用于输出必要的步骤和状态消息：
- en: '![Figure 14.16 – An example of a serverless architecture using AWS Lambda and
    AWS Fargate to run various optimization tasks in parallel](img/B18493_14_016.jpg)'
  id: totrans-191
  prefs: []
  type: TYPE_IMG
  zh: '![图 14.16 – 使用 AWS Lambda 和 AWS Fargate 运行各种并行优化任务的示例无服务器架构](img/B18493_14_016.jpg)'
- en: Figure 14.16 – An example of a serverless architecture using AWS Lambda and
    AWS Fargate to run various optimization tasks in parallel
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.16 – 使用 AWS Lambda 和 AWS Fargate 运行各种并行优化任务的示例无服务器架构
- en: The advantage of using this approach over that of EC2 instances is cost and
    scalability. We can start as many optimization tasks as needed without having
    to worry about managing EC2 instances. In addition, since we are using a serverless
    architecture, we only need to pay for the compute for the duration that our optimization
    tasks are running. As an example, for our worker dispatch optimization problem,
    the job and worker-related data can arrive in an Amazon S3 bucket every morning.
    Then, using AWS Lambda, various optimization tasks can be launched on AWS Fargate,
    with each task for a particular worker hub attempting to find the optimal route
    and schedule for every worker in the worker hub.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这种方法而不是 EC2 实例的优势在于成本和可扩展性。我们可以启动所需的任何数量的优化任务，而无需担心管理 EC2 实例。此外，由于我们使用的是无服务器架构，我们只需为优化任务运行的时间付费。例如，对于我们的工作者调度优化问题，相关的工作者和作业数据每天早上都会到达
    Amazon S3 存储桶。然后，使用 AWS Lambda，可以在 AWS Fargate 上启动各种优化任务，每个特定工作者中心的任务都试图为该中心中的每个工作者找到最佳路线和调度。
- en: Using Amazon SageMaker processing
  id: totrans-194
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 Amazon SageMaker 处理
- en: 'In addition to using dedicated EC2 instances and a serverless architecture,
    we can also carry out numerical optimization on Amazon SageMaker using SageMaker
    processing jobs. *Figure 14**.17* shows an example of this architecture pattern,
    where data consisting of constraints and various variables is residing in an Amazon
    S3 bucket. AWS Lambda and an AWS Step function are used to launch a SageMaker
    processing job that reads the data from the S3 bucket and runs the optimization
    task in a container with all the required packages and software needed to run
    the optimization job. This optimization job is run on an ephemeral EC2 instance;
    once the job is completed, the instance is released and no more cost for the instance
    is incurred. The results are written in S3 and also in Amazon DynamoDB after some
    post-processing by an AWS Lambda function. A few other AWS resources are shown
    in *Figure 14**.17*, such as for authentication and caching, which may or may
    not be necessary, depending on the specific use case:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 除了使用专用 EC2 实例和无服务器架构外，我们还可以在 Amazon SageMaker 上使用 SageMaker 处理作业进行数值优化。*图 14**.17*
    展示了这种架构模式的示例，其中包含约束和各种变量的数据存储在 Amazon S3 存储桶中。AWS Lambda 和 AWS Step Function 用于启动一个
    SageMaker 处理作业，该作业从 S3 存储桶读取数据，并在一个包含所有必需的包和软件的容器中运行优化任务，这些软件是运行优化作业所需的。这个优化作业在一个短暂的
    EC2 实例上运行；一旦作业完成，实例就会被释放，不再产生实例费用。结果在经过 AWS Lambda 函数的一些后处理后被写入 S3 和 Amazon DynamoDB。*图
    14**.17* 还显示了其他一些 AWS 资源，例如用于身份验证和缓存的资源，这些资源可能有必要，也可能没有必要，具体取决于特定的用例：
- en: '![Figure 14.17 – An example of running numerical optimization using Amazon
    SageMaker processing](img/B18493_14_017.jpg)'
  id: totrans-196
  prefs: []
  type: TYPE_IMG
  zh: '![图 14.17 – 使用 Amazon SageMaker 处理运行数值优化的示例](img/B18493_14_017.jpg)'
- en: Figure 14.17 – An example of running numerical optimization using Amazon SageMaker
    processing
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.17 – 使用 Amazon SageMaker 处理运行数值优化的示例
- en: In this section, we looked at a few ways numerical optimization problems can
    be solved using AWS high-performance compute resources and tools. While these
    are good examples of architectural patterns that can be employed for a variety
    of use cases, these can also be modified and extended, depending on the use case
    and business requirements.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们探讨了使用 AWS 高性能计算资源和工具解决数值优化问题的几种方法。虽然这些是适用于各种用例的架构模式的良好示例，但根据用例和业务需求，这些模式也可以进行修改和扩展。
- en: In the next section, we are going to look at how numerical optimization is important
    for solving machine learning problems as well.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将探讨数值优化对于解决机器学习问题的重要性。
- en: Machine learning and numerical optimization
  id: totrans-200
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 机器学习和数值优化
- en: So far, we have discussed numerical optimization and its use cases from an optimization
    problems perspective. Whereas numerical optimization has several standalone industry
    use cases and applications, it is also very commonly used in several machine learning
    algorithms and use cases. Whether it’s supervised learning, unsupervised learning,
    or reinforcement, we are always solving some form of optimization problem using
    iterative processes at the very core of a machine learning algorithm.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经从优化问题的角度讨论了数值优化及其用例。虽然数值优化有几个独立的行业用例和应用，但它也非常常见于多种机器学习算法和用例中。无论是监督学习、无监督学习还是强化学习，我们总是在机器学习算法的核心使用迭代过程解决某种形式的优化问题。
- en: In supervised learning, for example, let’s look at the case of linear regression.
    In linear regression, we are minimizing a cost function consisting generally of
    the mean squared error between the actual value of a target variable and the value
    predicted via the model.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 在监督学习中，例如，让我们看看线性回归的例子。在线性回归中，我们最小化一个成本函数，这个成本函数通常由实际目标变量的值与通过模型预测的值之间的均方误差组成。
- en: Our algorithm arrives at the minimum value of the cost function (convex function
    with a global minimum if it is mean squared error, non-convex with local minima
    in most other cases) using an iterative algorithm, such as gradient descent. Gradient
    descent looks at the gradient of the cost function and then modifies the linear
    regression parameters in the direction of the gradient. This way, after a certain
    number of iterations, the algorithm arrives at the global or local minimum value
    of the objective function.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的算法通过迭代算法（如梯度下降）找到成本函数的最小值（如果它是均方误差，则具有全局最小值的凸函数；在大多数其他情况下是非凸的，具有局部最小值）。梯度下降查看成本函数的梯度，然后按梯度方向修改线性回归参数。这样，经过一定次数的迭代后，算法就达到了目标函数的全局或局部最小值。
- en: Similarly, in logistic regression, we use an objective function consisting of
    logarithm terms. This objective function is again convex and we use gradient descent
    again to arrive at the minimum value of the objective function. Hence, once again,
    we are solving a numerical optimization problem at the core of the problem, with
    the higher-level goal of building a machine learning model for a classification
    problem.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，在逻辑回归中，我们使用由对数项组成的目标函数。这个目标函数再次是凸函数，我们再次使用梯度下降来找到目标函数的最小值。因此，我们再次在问题的核心解决一个数值优化问题，其高级目标是构建一个用于分类问题的机器学习模型。
- en: In neural networks, including deep neural networks, we have several parameters
    for which we need to find the optimal value so that some error is minimized at
    the output layer. In the field of deep learning, we often have very large machine
    learning models consisting of millions or even billions of weights or parameters,
    especially for natural language processing and computer vision problems. Each
    neuron or unit in the neural network has some activation function, which is a
    function of a few of these parameters. To build a model that fits the data well
    and does good predictions on tests or new data, we need to find the optimal value
    of neural network parameters/weights. This, again, is achieved by using gradient
    descent or some other optimization algorithm to solve this numerical optimization
    problem consisting of a very large number of parameters.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 在神经网络中，包括深度神经网络，我们有几个参数需要找到最优值，以便在输出层最小化某些错误。在深度学习领域，我们通常有非常大的机器学习模型，包含数百万甚至数十亿个权重或参数，尤其是在自然语言处理和计算机视觉问题中。神经网络中的每个神经元或单元都有一些激活函数，它是这些参数的函数之一。为了构建一个拟合数据良好并在测试或新数据上做出良好预测的模型，我们需要找到神经网络参数/权重的最优值。这再次是通过使用梯度下降或其他优化算法来解决由大量参数组成的数值优化问题。
- en: Similar to supervised learning, numerical optimization is also used in unsupervised
    learning problems. For example, in clustering methods such as K-means clustering,
    we are trying to minimize the distance between the cluster center and associated
    points in the cluster. Similarly, in expectation maximization (a soft clustering
    method), we are maximizing the likelihood of each data point being generated by
    a Gaussian distribution, whose mean we are attempting to find.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 与监督学习类似，数值优化也被用于无监督学习问题中。例如，在诸如K-means聚类这样的聚类方法中，我们试图最小化簇中心与簇中相关点之间的距离。同样，在期望最大化（一种软聚类方法）中，我们试图最大化每个数据点由高斯分布生成的可能性，而我们正在尝试找到的是这个分布的均值。
- en: In reinforcement learning, numerical optimization is also quite often used.
    For example, in most reinforcement learning methods, the goal of the algorithm
    is to maximize some form of long-term reward using actions and rewards, while
    simulating the scenario repeatedly to learn the optimal policy that maximizes
    long-term reward. In deep reinforcement learning, we use the neural network weights
    to approximate the policy. These weights are, again, learned using numerical optimization
    algorithms such as gradient descent. In short, no matter which type of machine
    learning problem we are trying to solve, there is a strong connection with numerical
    optimization, and for most of these machine learning problems, we are solving
    some form of optimization problem to get the answer for our machine learning problem.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 在强化学习中，数值优化也经常被使用。例如，在大多数强化学习方法中，算法的目标是通过行动和奖励最大化某种长期奖励，同时重复模拟场景以学习最大化长期奖励的最佳策略。在深度强化学习中，我们使用神经网络权重来近似策略。这些权重再次是通过使用梯度下降等数值优化算法来学习的。简而言之，无论我们试图解决哪种类型的机器学习问题，都与数值优化有着紧密的联系，并且对于这些机器学习问题中的大多数，我们都在解决某种形式的优化问题以获得机器学习问题的答案。
- en: Let’s summarize what we’ve learned in this chapter.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们总结一下本章学到的内容。
- en: Summary
  id: totrans-209
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we discussed numerical optimization and its applications. We
    started with a discussion about numerical optimization and its necessary ingredients.
    Next, we discussed a few of the common numerical optimization methods. We also
    discussed a few large-scale applications and use cases of numerical optimization.
    These use cases are very well known in academia as well as in the industry and
    are implemented by several organizations in their businesses. In addition, we
    talked about how AWS high-performance compute options and resources can be used
    to solve numerical optimization methods, and also discussed a few architectural
    patterns to accomplish this.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了数值优化及其应用。我们首先讨论了数值优化的概念及其必要成分。接下来，我们讨论了几种常见的数值优化方法。我们还讨论了几种数值优化的大规模应用和案例。这些案例在学术界和工业界都非常知名，并被多个组织在其业务中实施。此外，我们讨论了如何使用AWS高性能计算选项和资源来解决数值优化方法，并讨论了几种实现这一目标的架构模式。
- en: Finally, we ended with a short discussion about how various categories of machine
    learning algorithms employ numerical optimization at their core to build good
    models. The topics covered in this chapter will help you understand and formulate
    numerical optimization use cases, how numerical optimization is important for
    machine learning, and how high-performance computing can help with solving numerical
    optimization use cases. In addition, you should have an idea of the tools and
    software available for solving numerical optimization problems.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们简要讨论了各种机器学习算法如何在其核心使用数值优化来构建良好的模型。本章涵盖的主题将帮助您理解和制定数值优化用例，了解数值优化对机器学习的重要性，以及高性能计算如何帮助解决数值优化用例。此外，您应该对可用于解决数值优化问题的工具和软件有所了解。
- en: Overall, in this book, we have discussed the fundamentals of high-performance
    computing, followed by the data management, transfer, compute, networking, and
    storage aspects of high-performance computing. We also talked about applied modeling
    and its examples, such as data analysis, preprocessing, visualization, distributed
    training of machine learning models, optimizing models and their deployment, along
    with scaling machine learning models. Furthermore, we looked at various applications
    of high-performance computing, such as computational fluid dynamics, genomics,
    autonomous vehicles, and numerical optimization. The material presented in this
    text will introduce you to all these concepts and enable you to explore further
    and solve interesting use cases in high-performance computing and associated fields.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 总体而言，在这本书中，我们讨论了高性能计算的基础知识，随后讨论了高性能计算的数据管理、传输、计算、网络和存储方面。我们还讨论了应用建模及其示例，例如数据分析、预处理、可视化、机器学习模型的分布式训练、模型优化及其部署，以及机器学习模型的扩展。此外，我们探讨了高性能计算的多种应用，如计算流体动力学、基因组学、自动驾驶汽车和数值优化。本文档中介绍的材料将向您介绍所有这些概念，并使您能够进一步探索并解决高性能计算和相关领域中的有趣用例。
- en: Further reading
  id: totrans-213
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'To learn more about the topics that were covered in this chapter, take a look
    at the following resources:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于本章所涉及主题的信息，请查看以下资源：
- en: '*An Interactive Tutorial on Numerical* *Optimization*: [https://www.benfrederickson.com/numerical-optimization/](https://www.benfrederickson.com/numerical-optimization/)'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*数值优化交互教程*: [https://www.benfrederickson.com/numerical-optimization/](https://www.benfrederickson.com/numerical-optimization/)'
- en: 'El-Ghazali Talbi. 2009\. *Metaheuristics: From Design to Implementation*. Wiley
    Publishing.'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: El-Ghazali Talbi. 2009. *元启发式：从设计到实现*. Wiley 出版。
- en: 'Refs on NP-hard and completeness:'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 NP-hard 和完备性的参考文献：
- en: 'The traveling salesperson problem: [https://en.wikipedia.org/wiki/Travelling_salesman_problem](https://en.wikipedia.org/wiki/Travelling_salesman_problem)'
  id: totrans-218
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '旅行商问题: [https://en.wikipedia.org/wiki/Travelling_salesman_problem](https://en.wikipedia.org/wiki/Travelling_salesman_problem)'
- en: 'The vehicle routing problem: [https://www.sciencedirect.com/topics/economics-econometrics-and-finance/vehicle-routing-problem](https://www.sciencedirect.com/topics/economics-econometrics-and-finance/vehicle-routing-problem)'
  id: totrans-219
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '车辆路径问题: [https://www.sciencedirect.com/topics/economics-econometrics-and-finance/vehicle-routing-problem](https://www.sciencedirect.com/topics/economics-econometrics-and-finance/vehicle-routing-problem)'
- en: 'IBM ILOG CPLEX Optimization Studio: [https://www.ibm.com/analytics/cplex-optimizer](https://www.ibm.com/analytics/cplex-optimizer)'
  id: totrans-220
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'IBM ILOG CPLEX 优化工作室: [https://www.ibm.com/analytics/cplex-optimizer](https://www.ibm.com/analytics/cplex-optimizer)'
- en: 'Gurobi Optimization: [www.gurobi.com](http://www.gurobi.com)'
  id: totrans-221
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Gurobi 优化: [www.gurobi.com](http://www.gurobi.com)'
- en: 'FICO Xpress Optimization: [https://www.fico.com/en/products/fico-xpress-optimization](https://www.fico.com/en/products/fico-xpress-optimization)'
  id: totrans-222
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'FICO Xpress 优化: [https://www.fico.com/en/products/fico-xpress-optimization](https://www.fico.com/en/products/fico-xpress-optimization)'
- en: 'AMPL: [https://ampl.com/](https://ampl.com/)'
  id: totrans-223
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'AMPL: [https://ampl.com/](https://ampl.com/)'
- en: 'GNU Linear Programming Kit: [https://www.gnu.org/software/glpk/](https://www.gnu.org/software/glpk/)'
  id: totrans-224
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'GNU 线性规划工具包: [https://www.gnu.org/software/glpk/](https://www.gnu.org/software/glpk/)'
- en: 'Computational Infrastructure for Operations Research: [https://www.coin-or.org/](https://www.coin-or.org/)'
  id: totrans-225
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '运筹学计算基础设施: [https://www.coin-or.org/](https://www.coin-or.org/)'
- en: 'Pyomo: [http://www.pyomo.org/](http://www.pyomo.org/)'
  id: totrans-226
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Pyomo: [http://www.pyomo.org/](http://www.pyomo.org/)'
- en: 'Convex Over and Under ENvelopes for Nonlinear Estimation: [https://github.com/coin-or/Couenne](https://github.com/coin-or/Couenne)'
  id: totrans-227
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '非线性估计的凸包和下凸包: [https://github.com/coin-or/Couenne](https://github.com/coin-or/Couenne)'
- en: 'PuLP: [https://pypi.org/project/PuLP/](https://pypi.org/project/PuLP/)'
  id: totrans-228
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'PuLP: [https://pypi.org/project/PuLP/](https://pypi.org/project/PuLP/)'
- en: 'Google OR-Tools: [https://developers.google.com/optimization](https://developers.google.com/optimization)'
  id: totrans-229
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Google OR-Tools: [https://developers.google.com/optimization](https://developers.google.com/optimization)'
- en: 'SCIP Optimization Suite: [https://www.scipopt.org/](https://www.scipopt.org/)'
  id: totrans-230
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'SCIP 优化套件: [https://www.scipopt.org/](https://www.scipopt.org/)'
