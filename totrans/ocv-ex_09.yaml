- en: Chapter 9. Learning Object Tracking
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we learned about video surveillance, background modeling,
    and morphological image processing. We discussed how we can use different morphological
    operators to apply cool visual effects to input images. In this chapter, we will
    learn how to track an object in a live video. We will discuss the different characteristics
    of an object that can be used to track it. We will also learn about different
    methods and techniques used for object tracking. Object tracking is used extensively
    in robotics, self-driving cars, vehicle tracking, player tracking in sports, video
    compression, and so on.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: 'By the end of this chapter, you will learn:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: How to track colored objects
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to build an interactive object tracker
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is a corner detector
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to detect good features to track
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to build an optical flow-based feature tracker
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tracking objects of a specific color
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to build a good object tracker, we need to understand what characteristics
    can be used to make our tracking robust and accurate. So, let's take a baby step
    in this direction, and see how we can use colorspaces to come up with a good visual
    tracker. One thing to keep in mind is that the color information is sensitive
    to lighting conditions. In real-world applications, you need to do some preprocessing
    to take care of this. But for now, let's assume that somebody else is doing this
    and we are getting clean color images.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: There are many different colorspaces and picking up a good one will depend on
    what people use for different applications. While RGB is the native representation
    on the computer screen, it's not necessarily ideal for humans. When it comes to
    humans, we give names to colors that are based on their hue. This is why **HSV**
    (**Hue Saturation Value**) is probably one of the most informative colorspaces.
    It closely aligns with how we perceive colors. Hue refers to the color spectrum,
    saturation refers to the intensity of a particular color, and value refers to
    the brightness of that pixel. This is actually represented in a cylindrical format.
    You can refer to a simple explanation about this at [http://infohost.nmt.edu/tcc/help/pubs/colortheory/web/hsv.html](http://infohost.nmt.edu/tcc/help/pubs/colortheory/web/hsv.html).
    We can take the pixels of an image to the HSV space and then use colorspace distances
    and threshold in this space thresholding to track a given object.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the following frame in the video:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: '![Tracking objects of a specific color](img/B04283_09_01.jpg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
- en: 'If you run it through the colorspace filter and track the object, you will
    see something like this:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: '![Tracking objects of a specific color](img/B04283_09_02.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
- en: 'As you can see here, our tracker recognizes a particular object in the video
    based on its color characteristics. In order to use this tracker, we need to know
    the color distribution of our target object. The following code is used to track
    a colored object that selects only pixels that have a certain given hue. The code
    is well commented, so read the explanation mentioned previously for each line
    to see what''s happening:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Building an interactive object tracker
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A colorspace-based tracker gives us the freedom to track a colored object, but
    we are also constrained to a predefined color. What if we just want to randomly
    pick an object? How do we build an object tracker that can learn the characteristics
    of the selected object and track it automatically? This is where the CAMShift
    algorithm, which stands for **Continuously Adaptive Meanshift**, comes into the
    picture. It's basically an improved version of the Meanshift algorithm.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: The concept of Meanshift is actually nice and simple. Let's say we select a
    region of interest, and we want our object tracker to track that object. In this
    region, we select a bunch of points based on the color histogram and compute the
    centroid of spatial points. If the centroid lies at the center of this region,
    we know that the object hasn't moved. But if the centroid is not at the center
    of this region, then we know that the object is moving in some direction. The
    movement of the centroid controls the direction in which the object is moving.
    So, we move the bounding box of the object to a new location so that the new centroid
    becomes the center of this bounding box. Hence, this algorithm is called Meanshift
    because the mean (that is, the centroid) is shifting. This way, we keep ourselves
    updated with the current location of the object.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: However, the problem with Meanshift is that the size of the bounding box is
    not allowed to change. When you move the object away from the camera, the object
    will appear smaller to the human eye, but Meanshift will not take this into account.
    The size of the bounding box will remain the same throughout the tracking session.
    Hence, we need to use CAMShift. The advantage of CAMShift is that it can adapt
    the size of the bounding box to the size of the object. Along with this, it can
    also keep track of the orientation of the object.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s consider the following figure in which the object is highlighted:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: '![Building an interactive object tracker](img/B04283_09_03.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
- en: 'Now that we have selected the object, the algorithm computes the histogram
    backprojection and extracts all the information. What is histogram backprojection?
    It''s just a way of identifying how well the image fits into our histogram model.
    We compute the histogram model of a particular thing, and then use this model
    to find that thing in an image. Let''s move the object and see how it gets tracked:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: '![Building an interactive object tracker](img/B04283_09_04.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
- en: 'Looks like the object is getting tracked fairly well. Let''s change the orientation,
    and check whether the tracking is maintained:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来物体被跟踪得相当好。让我们改变方向，并检查跟踪是否保持：
- en: '![Building an interactive object tracker](img/B04283_09_05.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![构建交互式对象跟踪器](img/B04283_09_05.jpg)'
- en: 'As you can see, the bounding ellipse has changed its location as well as its
    orientation. Let''s change the perspective of the object, and see whether it''s
    still able to track it:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，边界椭圆已经改变了其位置和方向。让我们改变物体的视角，看看它是否仍然能够跟踪它：
- en: '![Building an interactive object tracker](img/B04283_09_06.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![构建交互式对象跟踪器](img/B04283_09_06.jpg)'
- en: 'We are still good! The bounding ellipse has changed the aspect ratio to reflect
    the fact that the object looks skewed now (because of the perspective transformation).
    Let''s take a look at the user interface functionality in the following code:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们仍然做得很好！边界椭圆已经改变了宽高比，以反映物体现在看起来是倾斜的（由于透视变换）。让我们看看以下代码中的用户界面功能：
- en: '[PRE1]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This function basically captures the coordinates of the rectangle that were
    selected in the window. The user just needs to click on them and drag them with
    the mouse. There are a set of inbuilt functions in OpenCV that help us detect
    these different mouse events.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数基本上捕获了在窗口中选定的矩形的坐标。用户只需点击它们并用鼠标拖动即可。OpenCV中有一系列内置函数帮助我们检测这些不同的鼠标事件。
- en: 'Here is the code used to perform object tracking based on CAMShift:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是用于基于CAMShift进行对象跟踪的代码：
- en: '[PRE2]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We now have the HSV image waiting to be processed at this point. Let''s go
    ahead and see how we can use our thresholds to process this image:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经有了一个等待处理的HSV图像。让我们继续看看我们如何使用我们的阈值来处理这个图像：
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'As you can see here, we use the HSV image to compute the histogram of the region.
    We use our thresholds to locate the required color in the HSV spectrum and then
    filter out the image based on that. Let''s go ahead and see how we can compute
    the histogram backprojection:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如您在此处所见，我们使用HSV图像来计算区域的直方图。我们使用我们的阈值在HSV光谱中定位所需颜色，然后根据该颜色过滤图像。让我们继续看看我们如何计算直方图反向投影：
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We are now ready to display the results. Using the rotated rectangle, let''s
    draw an ellipse around our region of interest:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在准备好显示结果。使用旋转矩形，让我们在我们的感兴趣区域周围画一个椭圆：
- en: '[PRE5]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Detecting points using the Harris corner detector
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Harris角点检测器检测点
- en: Corner detection is a technique used to detect *interest points* in the image.
    These interest points are also called *feature points* or simply *features* in
    Computer Vision terminology. A corner is basically an intersection of two edges.
    An *interest point* is basically something that can be uniquely detected in an
    image. A corner is a particular case of an interest point. These interest points
    help us characterize an image. These points are used extensively in applications,
    such as object tracking, image classification, visual search, and so on. Since
    we know that the corners are *interesting*, let's see how we can detect them.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 角点检测是一种用于在图像中检测*兴趣点*的技术。这些兴趣点在计算机视觉术语中也被称为*特征点*或简单地称为*特征*。一个角基本上是两条边的交点。一个*兴趣点*基本上是在图像中可以唯一检测到的东西。一个角是兴趣点的特例。这些兴趣点帮助我们描述图像。这些点在许多应用中得到了广泛的应用，例如对象跟踪、图像分类、视觉搜索等等。既然我们知道角是*有趣的*，让我们看看我们如何检测它们。
- en: In Computer Vision, there is a popular corner detection technique called the
    Harris corner detector. We construct a 2 x 2 matrix based on partial derivatives
    of the grayscale image, and then analyze the eigenvalues. Now what does this mean?
    Well, let's dissect it so that we can understand it better. Let's consider a small
    patch in the image. Our goal is to check whether this patch has a corner in it.
    So, we consider all the neighboring patches and compute the intensity difference
    between our patch and all those neighboring patches. If the difference is high
    in all directions, then we know that our patch has a corner in it. This is actually
    an oversimplification of the actual algorithm, but it covers the gist. If you
    want to understand the underlying mathematical details, you can take a look at
    the original paper by Harris and Stephens at [http://www.bmva.org/bmvc/1988/avc-88-023.pdf](http://www.bmva.org/bmvc/1988/avc-88-023.pdf).
    A corner point is a point where both the eigenvalues would have large values.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: 'If we run the Harris corner detector, it will look like this:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: '![Detecting points using the Harris corner detector](img/B04283_09_07.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
- en: 'As you can see, the green circles on the TV remote are the detected corners.
    This will change based on the parameters you choose for the detector. If you modify
    the parameters, you can see that more points might get detected. If you make it
    strict, then you might not be able to detect soft corners. Let''s take a look
    at the following code to detect Harris corners:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We converted the image to grayscale and detected corners using our parameters.
    You can find the complete code in the `.cpp` files. These parameters play an important
    role in the number of points that will be detected. You can check out the OpenCV
    documentation of the Harris corner detector at [http://docs.opencv.org/2.4/modules/imgproc/doc/feature_detection.html?highlight=cornerharris#void
    cornerHarris(InputArray src, OutputArray dst, int blockSize, int ksize, double
    k, int borderType](http://docs.opencv.org/2.4/modules/imgproc/doc/feature_detection.html?highlight=cornerharris#voidcornerHarris%28InputArraysrc,OutputArraydst,intblockSize,intksize,doublek,intborderType%29)).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: 'We now have all the information that we need. Let''s go ahead and draw circles
    around our corners to display the results:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: As you can see, this code takes a `blockSize` input argument. Depending on the
    size you choose, the performance will vary. Start with a value of `4` and play
    around with it to see what happens.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: Shi-Tomasi Corner Detector
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Harris corner detector performs well in many cases, but it can still be
    improved. Around six years after the original paper by Harris and Stephens, Shi-Tomasi
    came up with something better and they called it *Good Features To Track*. You
    can read the original paper at: [http://www.ai.mit.edu/courses/6.891/handouts/shi94good.pdf](http://www.ai.mit.edu/courses/6.891/handouts/shi94good.pdf).
    They used a different scoring function to improve the overall quality. Using this
    method, we can find the *N* strongest corners in the given image. This is very
    useful when we don''t want to use every single corner to extract information from
    the image. As discussed earlier, a good interest point detector is very useful
    in applications, such as object tracking, object recognition, image search, and
    so on.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: 'If you apply the Shi-Tomasi corner detector to an image, you will see something
    like this:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: '![Shi-Tomasi Corner Detector](img/B04283_09_08.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
- en: 'As you can see here, all the important points in the frame are captured. Let''s
    take a look at the following code to track these features:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We extracted the frame and used `goodFeaturesToTrack` to detect the corners.
    It''s important to understand that the number of corners detected will depend
    on our choice of parameters. You can find a detailed explanation at [http://docs.opencv.org/2.4/modules/imgproc/doc/feature_detection.html?highlight=goodfeaturestotrack#goodfeaturestotrack](http://docs.opencv.org/2.4/modules/imgproc/doc/feature_detection.html?highlight=goodfeaturestotrack#goodfeaturestotrack).
    Let''s go ahead and draw circles on these points to display the output image:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This program takes a `numCorners` input argument. This value indicates the maximum
    number of corners you want to track. Start with a value of `100` and play around
    with it to see what happens. If you increase this value, you will see more feature
    points getting detected.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: Feature-based tracking
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Feature-based tracking refers to tracking individual feature points across successive
    frames in the video. The advantage here is that we don't have to detect feature
    points in every single frame. We can just detect them once and keep tracking them
    after that. This is more efficient as compared to running the detector on every
    frame. We use a technique called optical flow to track these features. Optical
    flow is one of the most popular techniques in Computer Vision. We choose a bunch
    of feature points, and track them through the video stream. When we detect the
    feature points, we compute the displacement vectors and show the motion of those
    keypoints between consecutive frames. These vectors are called motion vectors.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: A motion vector for a particular point is just a directional line that indicates
    where that point has moved as compared to the previous frame. Different methods
    are used to detect these motion vectors. The two most popular algorithms are the
    Lucas-Kanade method and Farneback algorithm.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: The Lucas-Kanade method
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Lucas-Kanade method is used for sparse optical flow tracking. By sparse,
    we mean that the number of feature points is relatively low. You can refer to
    their original paper at [http://cseweb.ucsd.edu/classes/sp02/cse252/lucaskanade81.pdf](http://cseweb.ucsd.edu/classes/sp02/cse252/lucaskanade81.pdf).
    We start the process by extracting the feature points. For each feature point,
    we create 3 x 3 patches with the feature point at the center. We assume that all
    the points within each patch will have a similar motion. We can adjust the size
    of this window, depending on the problem at hand.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: For each feature point in the current frame, we take the surrounding 3 x 3 patch
    as our reference point. For this patch, we take a look at its neighborhood in
    the previous frame to get the best match. This neighborhood is usually bigger
    than 3 x 3 because we want to get the patch that's closest to the patch under
    consideration. Now, the path from the center pixel of the matched patch in the
    previous frame to the center pixel of the patch under consideration in the current
    frame will become the motion vector. We do this for all the feature points, and
    extract all the motion vectors.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s consider the following frame:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: '![The Lucas-Kanade method](img/B04283_09_09.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
- en: 'We need to add some points that we want to track. Just go ahead and click on
    a bunch of points on this window with your mouse:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: '![The Lucas-Kanade method](img/B04283_09_10.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
- en: 'If I move to a different position, you will see that the points are still being
    tracked correctly within a small margin of error:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: '![The Lucas-Kanade method](img/B04283_09_11.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
- en: 'Let''s add a lot of points and see what happens:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: '![The Lucas-Kanade method](img/B04283_09_12.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
- en: As you can see, it will keep tracking those points. However, you will notice
    that some of the points will be dropped in between because of factors, such as
    prominence, speed of the movement, and so on. If you want to play around with
    it, you can just keep adding more points to it. You can also allow the user to
    select a region of interest in the input video. You can then extract feature points
    from this region of interest and track the object by drawing the bounding box.
    It will be a fun exercise!
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the code used to perform Lucas-Kanade-based tracking:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We use the current image and the previous image to compute the optical flow
    information. Needless to say that the quality of the output will depend on the
    parameters you have chosen. You can find more details about the parameters at
    [http://docs.opencv.org/2.4/modules/video/doc/motion_analysis_and_object_tracking.html#calcopticalflowpyrlk](http://docs.opencv.org/2.4/modules/video/doc/motion_analysis_and_object_tracking.html#calcopticalflowpyrlk).
    To increase the quality and robustness, we need to filter out the points that
    are very close to each other because they do not add the new information. Let''s
    go ahead and do that:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We now have the tracking points. The next step is to refine the location of
    these points. What exactly does "refine" mean in this context? To increase the
    speed of computation, there is some level of quantization involved. In layman''s
    terms, you can think of it as "rounding off". Now that we have the approximate
    region, we can refine the location of the point within that region to get a more
    accurate outcome. Let''s go ahead and do this:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The Farneback algorithm
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Gunnar Farneback proposed this optical flow algorithm and it's used for dense
    tracking. Dense tracking is used extensively in robotics, augmented reality, 3D
    mapping, and so on. You can check out the original paper at [http://www.diva-portal.org/smash/get/diva2:273847/FULLTEXT01.pdf](http://www.diva-portal.org/smash/get/diva2:273847/FULLTEXT01.pdf).
    The Lucas-Kanade method is a sparse technique, which means that we only need to
    process some pixels in the entire image. The Farneback algorithm, on the other
    hand, is a dense technique that requires us to process all the pixels in the given
    image. So, obviously, there is a trade-off here. Dense techniques are more accurate,
    but they are slower. Sparse techniques are less accurate, but they are faster.
    For real-time applications, people tend to prefer sparse techniques. For applications
    where time and complexity is not a factor, people prefer dense techniques to extract
    finer details.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: In his paper, Farneback describes a method for dense optical flow estimation
    based on polynomial expansion for two frames. Our goal is to estimate the motion
    between these two frames, and it's basically a three-step process. In the first
    step, each neighborhood in both the frames is approximated by polynomials. In
    this case, we are only interested in quadratic polynomials. The next step is to
    construct a new signal by global displacement. Now that each neighborhood is approximated
    by a polynomial, we need to see what happens if this polynomial undergoes an ideal
    translation. The last step is to compute the global displacement by equating the
    coefficients in the yields of these quadratic polynomials.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: Now, how is this feasible? If you think about it, we are assuming that an entire
    signal is a single polynomial and there is a global translation relating the two
    signals. This is not a realistic scenario. So, what are we looking for? Well,
    our goal is to find out whether these errors are small enough so that we can build
    a useful algorithm that can track the features.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at the following static image:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: '![The Farneback algorithm](img/B04283_09_13.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
- en: 'If I move sideways, you can see that the motion vectors point in the horizontal
    direction. They simply track the movement of my head:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: '![The Farneback algorithm](img/B04283_09_14.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
- en: 'If I move away from the webcam, you can see that the motion vectors point in
    a direction that is perpendicular to the image plane:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: '![The Farneback algorithm](img/B04283_09_15.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
- en: 'Here is the code used to perform optical flow-based tracking using the Farneback
    algorithm:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是使用Farneback算法执行基于光流跟踪的代码：
- en: '[PRE13]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'As you can see, we use the Farneback algorithm to compute the optical flow
    vectors. The `calcOpticalFlowFarneback` input parameters are important when it
    comes to the quality of tracking. You can find the details about these parameters
    at [http://docs.opencv.org/3.0-beta/modules/video/doc/motion_analysis_and_object_tracking.html](http://docs.opencv.org/3.0-beta/modules/video/doc/motion_analysis_and_object_tracking.html).
    Let''s go ahead and draw those vectors on the output image:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们使用Farneback算法来计算光流向量。`calcOpticalFlowFarneback`的输入参数对于跟踪质量至关重要。您可以在[http://docs.opencv.org/3.0-beta/modules/video/doc/motion_analysis_and_object_tracking.html](http://docs.opencv.org/3.0-beta/modules/video/doc/motion_analysis_and_object_tracking.html)找到这些参数的详细信息。让我们继续在输出图像上绘制这些向量：
- en: '[PRE14]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'We used a function called `drawOpticalFlow` to draw these optical flow vectors.
    These vectors indicate the direction of the motion. Let''s take a look at the
    function to see how we can draw these vectors:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用了一个名为`drawOpticalFlow`的函数来绘制这些光流向量。这些向量指示了运动的方向。让我们看看这个函数，看看我们如何绘制这些向量：
- en: '[PRE15]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Summary
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned about object tracking. We learned how to use the
    HSV colorspace to track colored objects. We discussed clustering techniques used
    for object tracking and how we can build an interactive object tracker using the
    CAMShift algorithm. We learned about corner detectors and how to track corners
    in a live video. We discussed how to track features in a video using optical flow.
    We also learned the concepts behind Lucas-Kanade and Farneback algorithms and
    implemented them as well.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了目标跟踪。我们学习了如何使用HSV颜色空间来跟踪彩色物体。我们讨论了用于目标跟踪的聚类技术，以及如何使用CAMShift算法构建一个交互式目标跟踪器。我们还学习了角点检测器以及如何在实时视频中跟踪角点。我们讨论了如何使用光流在视频中跟踪特征。我们还学习了Lucas-Kanade和Farneback算法背后的概念，并将它们实现出来。
- en: In the next chapter, we will discuss segmentation algorithms and see how we
    can use them for text recognition.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论分割算法，并了解我们如何将它们用于文本识别。
