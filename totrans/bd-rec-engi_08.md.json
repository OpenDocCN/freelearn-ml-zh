["```py\n() \n(user) \n(u:user) \n(u:user{name:'Toby'}) \n\n```", "```py\n -[]-> \n(user) -[f:friendof]->(user) \n(user) -[f:friendof {since: 2016}]->(user) \n\n```", "```py\nCREATE (john:Person {name:\"JOHN\"})  RETURN  john \n\n```", "```py\nCREATE (paul:Person {name:\"PAUL\"})  \nCREATE (krish:Person {name:\"KRISH\"})  \n\n```", "```py\nMATCH(k:Person{name:'KRISH'}),(p:Person{name:'PAUL'}),(j:Person{name:'JOHN'}) RETURN k,p,j \n\n```", "```py\nMATCH(k:Person{name:'KRISH'}),(p:Person{name:'PAUL'}),(j:Person{name:'JOHN'})  \nCREATE (k)-[:FRIENDOF]->(j) \nCREATE (j)-[:FRIENDOF]->(k) \nCREATE (p)-[:FRIENDOF]->(j) \nCREATE (p)-[:FRIENDOF]->(k) \nCREATE (k)-[:FRIENDOF]->(p) \n\n```", "```py\nmatch(n:Person)-[f:FRIENDOF]->(q:Person) return f \n\n```", "```py\nMATCH (k:Person{name:'KRISH'})-[f1:FRIENDOF]-> (p:Person{name:'PAUL'}), \n(k1:Person{name:'KRISH'})<-[f2:FRIENDOF]- (p1:Person{name:'PAUL'}) \nSET f1.friendsince = '2016', f2.friendsince = '2015' \n\n```", "```py\nmatch(n:Person)-[f:FRIENDOF]->(q:Person) return f \n\n```", "```py\nMATCH(k:Person{name:'KRISH'}),(p:Person{name:'PAUL'}),(j:Person{name:'JOHN'})  \nSET k.age = '26' ,p.age='28', j.age='25',k.gender='M',p.gender='M',j.gender='M' \n\n```", "```py\nmatch(n:Person)-[f:FRIENDOF]->(q:Person) return f \n\n```", "```py\nLOAD CSV WITH HEADERS FROM 'file:///C:/ Neo4J/test.csv' AS RATINGSDATA RETURN RATINGSDATA \n\n```", "```py\nC:\\Users\\Suresh\\Documents\\Neo4J\\default.graphdb \n\n```", "```py\ngedit ~/.bashrc \nexport NEO4J_PATH=/home/1060929/Softwares/Neo4J/Neo4J-community-3.0.6 \nexport PATH=$PATH:$NEO4J_PATH/bin \nsource ~/.bashrc \n\n```", "```py\nNeo4J start \n\n```", "```py\n:server connect \n\n```", "```py\nbasic usage :  \ngetting help on Neo4J in the browser: \n:help \n\n```", "```py\nLOAD CSV WITH HEADERS FROM file:///ratings.csv AS line \n\n```", "```py\nLOAD CSV WITH HEADERS FROM file:///C:/Neo4J/test.csv AS line MERGE (U:USER {USERID : line.UserID}) \nWITH line, U \nMERGE (M:MOVIE {ITEMID : line.ItemId}) \nWITH line,M,U \nMERGE (U)-[:hasRated{RATING:line.Rating}]->(M); \n\n```", "```py\nMERGE (U:USER {USERID : line.UserID}) \n\n```", "```py\nWITH line, U \n\n```", "```py\nMERGE (M:MOVIE {ITEMID : line.ItemId}) \n\n```", "```py\nWITH line,M,U \n\n```", "```py\nMERGE (U)-[:hasRated{RATING:line.Rating}]->(M); \n\n```", "```py\nMATCH (U:USER)-[R:hasRated]->(M:MOVIE) RETURN R \n\n```", "```py\nmatch(u1:USER)-[:hasRated]->(i1:MOVIE)<-[:hasRated]-(u2:USER)- [:hasRated]->(i2:MOVIE)  \nwith u1,u2, count(i1) as cnt , collect(i1) as Shareditems,i2 \nwhere not(u1-[:hasRated]->i2) and u1.USERID='Toby' and cnt> 2  \nreturn distinct i2.ITEMID as Recommendations \n\n```", "```py\n            MATCH (u1:USER)-[x:hasRated]-> (b:MOVIE)<-[y:hasRated]-\n              (u2:USER) \n            WITH count(b) AS CommonMovies, u1.username AS user1,\n              u2.username AS user2, u1, u2,\n            collect((toFloat(x.RATING)-toFloat(y.RATING))^2) AS ratings,\n            collect(b.name) AS movies\n            WITH CommonMovies, movies, u1, u2, ratings\n            MERGE (u1)-[s:EUCSIM]->(u2) SET s.EUCSIM = 1-   \n              (SQRT(reduce(total=0.0, k in extract(i in ratings | \n                i/CommonMovies) | total+k))/4)\n\n    ```", "```py\n            MATCH (u1:USER)-[x:hasRated]-> (b:MOVIE)<-[y:hasRated]-\n              (u2:USER) \n            WITH count(b) AS CommonMovies, u1.username AS user1,    \n              u2.username AS user2, u1, u2, \n            collect((toFloat(x.RATING)-toFloat(y.RATING))^2) AS ratings, \n            collect(b.name) AS movies \n            WITH CommonMovies, movies, u1, u2, ratings \n            MERGE (u1)-[s:EUCSIM]->(u2) SET s.EUCSIM = 1-\n              (SQRT(reduce(total=0.0, k in extract(i in ratings |   \n                i/CommonMovies) | total+k))/4) return s as SIMVAL,  \n                  u1.USERID as USER,u2.USERID as Co_USER;\n    ```", "```py\n            MATCH (p1:USER {USERID:'Toby'})-[s:EUCSIM]-(p2:USER) \n            WITH p2, s.EUCSIM AS sim \n            ORDER BY sim DESC \n            RETURN distinct p2.USERID AS CoReviewer, sim AS similarity \n\n    ```", "```py\n            MATCH (b:USER)-[r:hasRated]->(m:MOVIE), (b)-[s:EUCSIM]-(a:USER  \n              {USERID:'Toby'}) \n            WHERE NOT((a)-[:hasRated]->(m)) \n            WITH m, s.EUCSIM AS similarity, r.RATING AS rating \n            ORDER BY m.ITEMID, similarity DESC \n            WITH m.ITEMID AS MOVIE, COLLECT(rating) AS ratings \n            WITH MOVIE, REDUCE(s = 0, i IN ratings |toInt(s) +  \n              toInt(i))*1.0 / size(ratings) AS reco \n            ORDER BY recoDESC \n            RETURN MOVIE AS MOVIE, reco AS Recommendation \n\n    ```", "```py\n            MATCH (u1:USER{USERID:'Toby'})-[x:hasRated]-> (b:MOVIE)<- \n              [y:hasRated]-(u2:USER)\n            return u1, u2,\n            collect(b.ITEMID) AS CommonMovies,\n            collect(x.RATING) AS user1Rating,\n            collect(y.RATING) AS user2Rating\n    ```", "```py\n            MATCH (u1:USER)-[x:hasRated]-> (b:MOVIE)<-[y:hasRated]- \n              (u2:USER) \n            WITH count(b) AS CommonMovies, u1.username AS user1, \n              u2.username AS user2, u1, u2, \n            collect((toFloat(x.RATING)-toFloat(y.RATING))^2) AS ratings, \n            collect(b.name) AS movies \n            WITH CommonMovies, movies, u1, u2, ratings \n            MERGE (u1)-[s:EUCSIM]->(u2) SET s.EUCSIM = 1- \n              (SQRT(reduce(total=0.0, k in extract(i in ratings |  \n                i/CommonMovies) | total+k))/4) \n\n    ```", "```py\n            MATCH (p1:USER {USERID:'Toby'})-[s:EUCSIM]-(p2:USER) \n            WITH p2, s.EUCSIM AS sim \n            ORDER BY sim DESC \n            RETURN distinct p2.USERID AS CoReviewer, sim AS similarity \n\n    ```", "```py\n            MATCH (b:USER)-[r:hasRated]->(m:MOVIE), (b)-[s:EUCSIM]-(a:USER  \n              {USERID:'Toby'}) \n            WHERE NOT((a)-[:hasRated]->(m)) \n            WITH m, s.EUCSIM AS similarity, r.RATING AS rating ORDER BY     \n              similarity DESC \n            WITH m.ITEMID AS MOVIE, COLLECT(rating) AS ratings \n            WITH MOVIE, REDUCE(s = 0, i IN ratings |toInt(s) + \n              toInt(i))*1.0 / size(ratings) AS reco \n            ORDER BY reco DESC \n            RETURN MOVIE AS MOVIE, reco AS Recommendation \n\n    ```", "```py\nMATCH (b:USER)-[r:hasRated]->(m:MOVIE), (b)-[s:EUCSIM]-(a:USER {USERID:'Toby'}) \n\n```", "```py\nWHERE NOT((a)-[:hasRated]->(m)) \n\n```", "```py\nWITH m, s.EUCSIM AS similarity, r.RATING AS rating ORDER BY similarity DESC \n\n```", "```py\nWITH m.ITEMID AS MOVIE, COLLECT(rating) AS ratings \n\n```", "```py\nWITH MOVIE, REDUCE(s = 0, i IN ratings |toInt(s) + toInt(i))*1.0 / size(ratings) AS reco \n\n```", "```py\nORDER BY recoDESC \nRETURN MOVIE AS MOVIE, reco AS Recommendation \n\n```", "```py\nMATCH (p1:USER)-[x:hasRated]->(m:MOVIE)<-[y:hasRated]-(p2:USER) \nWITH SUM(toFloat(x.RATING) * toFloat(y.RATING)) AS xyDotProduct, \nSQRT(REDUCE(xDot = 0.0, a IN COLLECT(toFloat(x.RATING)) | xDot +toFloat(a)^2)) AS xLength, \nSQRT(REDUCE(yDot = 0.0, b IN COLLECT(toFloat(y.RATING)) | yDot + toFloat(b)^2)) AS yLength, \np1, p2 \nMERGE (p1)-[s:SIMILARITY]-(p2) \nSET s.similarity = xyDotProduct / (xLength * yLength) \n\n```", "```py\nmatch(u:USER)-[s:SIMILARITY]->(u2:USER) return s; \n\n```", "```py\nMATCH (p1:USER {USERID:'Toby'})-[s:SIMILARITY]-(p2:USER) \nWITH p2, s.similarity AS sim \nORDER BY sim DESC \nLIMIT 5 \nRETURN p2.USERID AS Neighbor, sim AS Similarity \n\n```", "```py\nMATCH (b:USER)-[r:hasRated]->(m:MOVIE), (b)-[s:SIMILARITY]-(a:USER  \n  {USERID:'Toby'}) \nWHERE NOT((a)-[:hasRated]->(m)) \nWITH m, s.similarity AS similarity, r.RATING AS rating \nORDER BY m.ITEMID, similarity DESC \nWITH m.ITEMID AS MOVIE, COLLECT(rating) AS ratings \nWITH MOVIE, REDUCE(s = 0, i IN ratings |toInt(s) + toInt(i))*1.0 / \n  size(ratings) AS reco \nORDER BY reco DESC \nRETURN MOVIE AS MOVIE, reco AS Recommendation \n\n```"]