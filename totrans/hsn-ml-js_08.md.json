["```py\n{\n  \"name\": \"Ch8-ANN\",\n  \"version\": \"1.0.0\",\n  \"description\": \"ML in JS Example for Chapter 8 - ANN\",\n  \"main\": \"src/index.js\",\n  \"author\": \"Burak Kanber\",\n  \"license\": \"MIT\",\n  \"scripts\": {\n    \"build-web\": \"browserify src/index.js -o dist/index.js -t [ babelify --presets [ env ] ]\",\n    \"build-cli\": \"browserify src/index.js --node -o dist/index.js -t [ babelify --presets [ env ] ]\",\n    \"start\": \"yarn build-cli && node dist/index.js\"\n  },\n  \"dependencies\": {\n    \"@tensorflow/tfjs\": \"^0.9.1\",\n    \"babel-core\": \"^6.26.0\",\n    \"babel-plugin-transform-object-rest-spread\": \"^6.26.0\",\n    \"babel-preset-env\": \"^1.6.1\",\n    \"babelify\": \"^8.0.0\",\n    \"browserify\": \"^15.1.0\"\n  }\n}\n```", "```py\nimport * as tf from '@tensorflow/tfjs';\n```", "```py\nconst model = tf.sequential();\n```", "```py\nmodel.add(tf.layers.dense({units: 4, activation: 'relu', inputDim: 2}));\nmodel.add(tf.layers.dense({units: 4, activation: 'relu'}));\nmodel.add(tf.layers.dense({units: 1, activation: 'sigmoid'}));\n```", "```py\nconst learningRate = 1;\nconst optimizer = tf.train.sgd(learningRate);\nmodel.compile({loss: 'binaryCrossentropy', optimizer, metrics: ['accuracy']});\n```", "```py\n// XOR data x values.\nconst xs = tf.tensor([\n    [0, 0],\n    [0, 1],\n    [1, 0],\n    [1, 1]\n],\n// Shape of the tensor is 4 rows x 2 cols\n[4, 2]);\n\n// XOR data y values.\nconst ys = tf.tensor([ 0, 1, 1, 0 ], [4, 1]);\n```", "```py\nmodel.fit(xs, ys, {epochs: 1000}).then(() => {\n    console.log(\"Done training. Evaluating model...\");\n    const r = model.evaluate(xs, ys);\n\n    console.log(\"Loss:\");\n    r[0].print();\n    console.log(\"Accuracy:\");\n    r[1].print();\n\n    console.log(\"Testing 0,0\");\n    model.predict(tf.tensor2d([0, 0], [1, 2])).print();\n    console.log(\"Testing 0,1\");\n    model.predict(tf.tensor2d([0, 1], [1, 2])).print();\n    console.log(\"Testing 1,0\");\n    model.predict(tf.tensor2d([1, 0], [1, 2])).print();\n    console.log(\"Testing 1,1\");\n    model.predict(tf.tensor2d([1, 1], [1, 2])).print();\n});\n```", "```py\nDone training. Evaluating model...\n Loss:\n Tensor\n 0.00011571444338187575\n Accuracy:\n Tensor\n 1\n Testing 0, 0\n Tensor\n [[0.0001664],]\n Testing 0, 1\n Tensor\n [[0.9999378],]\n Testing 1, 0\n Tensor\n [[0.9999322],]\n Testing 1, 1\n Tensor\n [[0.0001664],]\n```"]