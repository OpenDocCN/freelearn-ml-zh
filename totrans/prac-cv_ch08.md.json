["```py\nwget https://vision.in.tum.de/rgbd/dataset/freiburg1/rgbd_dataset_freiburg1_xyz.tgz\ntar -xvf rgbd_dataset_freiburg1_xyz.tgz\n```", "```py\nimport numpy as np \nimport matplotlib.pyplot as plt \nimport cv2 \nprint(cv2.__version__)\nimport glob\n# With jupyter notebook uncomment below line \n# %matplotlib inline \n# This plots figures inside the notebook\n\ndef compute_orb_keypoints(filename):\n \"\"\"\n Reads image from filename and computes ORB keypoints\n Returns image, keypoints and descriptors. \n \"\"\"\n # load image\n img = cv2.imread(filename)\n\n # create orb object\n orb = cv2.ORB_create()\n\n # set method for extraction orb points \n orb.setScoreType(cv2.FAST_FEATURE_DETECTOR_TYPE_9_16)\n orb.setWTA_K(3)\n\n # detect keypoints\n kp = orb.detect(img,None)\n\n # for detected keypoints compute descriptors. \n kp, des = orb.compute(img, kp)\n\n return img,kp, des\n```", "```py\ndef brute_force_matcher(des1, des2):\n \"\"\"\n Brute force matcher to match ORB feature descriptors\n \"\"\"\n # create BFMatcher object\n bf = cv2.BFMatcher(cv2.NORM_HAMMING2, crossCheck=True)\n # Match descriptors.\n matches = bf.match(des1,des2)\n\n # Sort them in the order of their distance.\n matches = sorted(matches, key = lambda x:x.distance)\n\n return matches\n```", "```py\n\ndef compute_fundamental_matrix(filename1, filename2):\n \"\"\"\n Takes in filenames of two input images \n Return Fundamental matrix computes \n using 8 point algorithm\n \"\"\"\n # compute ORB keypoints and descriptor for each image\n img1, kp1, des1 = compute_orb_keypoints(filename1)\n img2, kp2, des2 = compute_orb_keypoints(filename2)\n\n # compute keypoint matches using descriptor\n matches = brute_force_matcher(des1, des2)\n\n # extract points\n pts1 = []\n pts2 = []\n for i,(m) in enumerate(matches):\n if m.distance < 20:\n #print(m.distance)\n pts2.append(kp2[m.trainIdx].pt)\n pts1.append(kp1[m.queryIdx].pt)\n pts1 = np.asarray(pts1)\n pts2 = np.asarray(pts2)\n\n # Compute fundamental matrix\n F, mask = cv2.findFundamentalMat(pts1,pts2,cv2.FM_8POINT)\n return F\n\n# read list of images form dir in sorted order\n# change here to path to dataset \nimage_dir = '/Users/mac/Documents/dinoRing/' \nfile_list = sorted(glob.glob(image_dir+'*.png'))\n\n#compute F matrix between two images\nprint(compute_fundamental_matrix(file_list[0], file_list[2]))\n\n```", "```py\ndocker pull resbyte/orb-slam2\n```", "```py\nxhost +local:docker\n```", "```py\ndocker run -ti --rm   -e DISPLAY=$DISPLAY   -v /tmp/.X11-unix:/tmp/.X11-unix   -v /home/rgbd_dataset_freiburg1_xyz:/root/rgbd_dataset_freiburg1_xyz   orb-slam:latest /bin/bash\n```", "```py\ncd ORB_SLAM2\n\n# run orb slam\n./Examples/Monocular/mono_tum Vocabulary/ORBvoc.txt Examples/Monocular/TUM1.yaml /root/rgbd_dataset_freiburg1_xyz\n```"]