- en: Feature Understanding – What&#x27;s in My Dataset?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Finally! We can start to jump into some real data, some real code, and some
    real results. Specifically, we will be diving deeper into the following ideas:'
  prefs: []
  type: TYPE_NORMAL
- en: Structured versus unstructured data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Quantitative versus qualitative data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The four levels of data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploratory data analysis and data visualizations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Descriptive statistics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each of these topics will give us a better sense of the data given to us, what
    is present within the dataset, what is not present within the dataset, and some
    basic notions on how to proceed from there.
  prefs: []
  type: TYPE_NORMAL
- en: If you're familiar with, *Principles of Data Science*, much of this echoes *Chapter
    2, Types of Data* of that book. That being said, in this chapter, we will specifically
    look at our data less from a holistic standpoint, and more from a machine-learning
    standpoint.
  prefs: []
  type: TYPE_NORMAL
- en: The structure, or lack thereof, of data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When given a new dataset, it is first important to recognize whether or not
    your data is structured or unstructured*:*
  prefs: []
  type: TYPE_NORMAL
- en: '**Structured (organized) data**: Data that can be broken down into observations
    and characteristics. They are generally organized using a tabular method (where
    rows are observations and columns are characteristics).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Unstructured (unorganized) data**: Data that exists as a free-flowing entity
    and does not follow standard organizational hierarchy such as tabularity. Often,
    unstructured data appears to us as a *blob* of data, or as a single characteristic
    (column).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A few examples that highlight the difference between structured and unstructured
    data are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Data that exists in a raw free-text form, including server logs and tweets,
    are unstructured
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Meteorological data, as reported by scientific instruments in precise movements,
    would be considered highly structured as they exist in a tabular row/column structure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An example of unstructured data – server logs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As an example of unstructured data, we have pulled some sample server logs
    from a public source and included them in a text document. We can take a glimpse
    of what this unstructured data looks like, so we can recognize it in the future:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'We created a DataFrame in pandas called `logs` that hold our server logs. To
    take a look, let''s call the `.head()` method to look at the first few rows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'This will show us a table of the first 5 rows in our logs DataFrame as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Info** |  |'
  prefs: []
  type: TYPE_TB
- en: '| 0 | 64.242.88.10 - - [07/Mar/2004:16:05:49 -0800] ... |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | 64.242.88.10 - - [07/Mar/2004:16:06:51 -0800] ... |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | 64.242.88.10 - - [07/Mar/2004:16:10:02 -0800] ... |'
  prefs: []
  type: TYPE_TB
- en: '| 3 | 64.242.88.10 - - [07/Mar/2004:16:11:58 -0800] ... |'
  prefs: []
  type: TYPE_TB
- en: '| 4 | 64.242.88.10 - - [07/Mar/2004:16:20:55 -0800] ... |'
  prefs: []
  type: TYPE_TB
- en: We can see in our logs that each row represents a single log and there is only
    a single column, the text of the log itself. Not exactly a characteristic or anything,
    just the raw log is taken directly from the server. This is a great example of
    unstructured data. Most often, data in the form of text is usually unstructured.
  prefs: []
  type: TYPE_NORMAL
- en: It is important to recognize that most unstructured data can be transformed
    into structured data through a few manipulations, but this is something that we
    will tackle in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Most of the data that we will be working on the book will be structured. That
    means that there will be a sense of rows and columns. Given this, we can start
    to look at the types of values in the cells of our tabular data.
  prefs: []
  type: TYPE_NORMAL
- en: Quantitative versus qualitative data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To accomplish our diagnoses of the various types of data, we will begin with
    the highest order of separation. When dealing with structured, tabular data (which
    we usually will be doing), the first question we generally ask ourselves is whether
    the values are of a numeric or categorical nature.
  prefs: []
  type: TYPE_NORMAL
- en: '**Quantitative data **are data that are numerical in nature. They should be
    measuring the quantity of something.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Qualitative data** are data that are categorical in nature. They should be
    describing the quality of something.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Basic examples:'
  prefs: []
  type: TYPE_NORMAL
- en: Weather measured as temperature in Fahrenheit or Celsius would be quantitative
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Weather measured as cloudy or sunny would be qualitative
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The name of a person visiting the White House would be qualitative
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The amount of blood you donate at a blood drive is quantitative
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The first two examples show that we can describe similar systems using data
    from both the qualitative and quantitative side. In fact, in most datasets, we
    will be working with both qualitative and quantitative data.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes, data can, arguably, be either quantitative or qualitative. The ranking
    you would give a restaurant (one through five stars) could be considered quantitative
    or qualitative, for example. While they are numbers, the numbers themselves might
    also represent categories. For example, if the restaurant rating app asked you
    to rate the restaurant using a quantitative star system, then feasibly the restaurant's
    average ranking might be a decimal, like 4.71 stars, making the data quantitative.
    At the same time, if the app asked you if you *hated it*, *thought it was OK*,
    *liked it*, *loved it*, or *really loved it*, then these are now categories. As
    a result of these ambiguities between quantitative and qualitative data, we employ
    an even deeper method called the four levels of data. Before we do that, let's
    introduce our first dataset for the chapter and really solidify some examples
    of qualitative and quantitative data.
  prefs: []
  type: TYPE_NORMAL
- en: Salary ranges by job classification
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s first do some import statements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'And then, let''s import our first dataset, which will explore salaries of different
    job titles in San Francisco. This dataset is available publicly and so you are
    encouraged to play around with it as much as you want:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Let us have a look at the following table to understand better:'
  prefs: []
  type: TYPE_NORMAL
- en: '|  | **SetID** | **Job Code** | **Eff Date** | **Sal End Date** | **Salary
    SetID** | **Sal Plan** | **Grade** | **Step** | **Biweekly High Rate** | **Biweekly
    Low Rate** | **Union Code** | **Extended Step** | **Pay Type** |'
  prefs: []
  type: TYPE_TB
- en: '| 0 | COMMN | 0109 | 07/01/2009 12:00:00 AM | 06/30/2010 12:00:00 AM | COMMN
    | SFM | 00000 | 1 | $0.00 | $0.00 | 330 | 0 | C |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | COMMN | 0110 | 07/01/2009 12:00:00 AM | 06/30/2010 12:00:00 AM  | COMMN
    | SFM | 00000 | 1 | $15.00 | $15.00 | 323 | 0 | D |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | COMMN | 0111 | 07/01/2009 12:00:00 AM | 06/30/2010 12:00:00 AM | COMMN
    | SFM | 00000 | 1 | $25.00 | $25.00 | 323 | 0 | D |'
  prefs: []
  type: TYPE_TB
- en: '| 3 | COMMN | 0112 | 07/01/2009 12:00:00 AM | 06/30/2010 12:00:00 AM | COMMN
    | SFM | 00000 | 1 | $50.00 | $50.00 | 323 | 0 | D |'
  prefs: []
  type: TYPE_TB
- en: '| 4 | COMMN | 0114 | 07/01/2009 12:00:00 AM | 06/30/2010 12:00:00 AM | COMMN
    | SFM | 00000 | 1 | $100.00 | $100.00 | 323 | 0 | M |'
  prefs: []
  type: TYPE_TB
- en: 'We can see that we have a bunch of columns, and some already start to jump
    out at us as being quantitative or qualitative. Let''s get a sense of how many
    rows of data there are using the `.info()` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'So, we have `1356 entries` (rows) and `13 columns`. The `.info()` command also
    tells us the number of `non-null` items in each column. This is important because
    missing data is by far one of the most common issues in feature engineering. Sometimes,
    we are working with datasets that are just incomplete. In pandas, we have many
    ways of figuring out if we are working with missing data, and many ways of dealing
    with them. A very quick and common way to count the number of missing values is
    to run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'So, we see we are not missing any pieces of data in this one, phew (for now).
    Moving on, let''s run the `describe` method to check out some descriptive statistics
    of our quantitative columns (which we should have). Note that the `describe` method
    will default to describing quantitative columns, but will describe qualitative
    columns if there are no quantitative columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Let us have a look at the following table for a better understanding here:'
  prefs: []
  type: TYPE_NORMAL
- en: '|  | **Step** | **Union Code** | **Extended Step** |'
  prefs: []
  type: TYPE_TB
- en: '| **count** | 1356.000000 | 1356.000000 | 1356.000000 |'
  prefs: []
  type: TYPE_TB
- en: '| **mean** | 1.294985 | 392.676991 | 0.150442 |'
  prefs: []
  type: TYPE_TB
- en: '| **std** | 1.045816 | 338.100562 | 1.006734 |'
  prefs: []
  type: TYPE_TB
- en: '| **min** | 1.000000 | 1.000000 | 0.000000 |'
  prefs: []
  type: TYPE_TB
- en: '| **25%** | 1.000000 | 21.000000 | 0.000000 |'
  prefs: []
  type: TYPE_TB
- en: '| **50%** | 1.000000 | 351.000000 | 0.000000 |'
  prefs: []
  type: TYPE_TB
- en: '| **75%** | 1.000000 | 790.000000 | 0.000000 |'
  prefs: []
  type: TYPE_TB
- en: '| **max** | 5.000000 | 990.000000 | 11.000000 |'
  prefs: []
  type: TYPE_TB
- en: 'According to pandas, we only have three quantitative columns: `Step`, `Union
    Code`, and `Extended Step`. Let''s ignore `Step` and `Extended Step` for now,
    and also notice that `Union Code` isn''t really quantitative. While it is a number,
    it doesn''t really represent a quantity of something, it''s merely describing
    the union through a unique coding. So, we have some work to do here to even understand
    the features that we are more interested in. Most notably, let''s say we wish
    to pull out a single quantitative column, the `Biweekly High Rate`, and a single
    qualitative column, `Grade` (the type of job):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the result of the preceding code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0e3e0c58-4b55-44c1-b323-5e01abc6065b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To do some cleaning up on these columns, let''s remove those dollar signs (`$`)
    from the salary rate and ensure that the columns are of the correct type. When
    working with quantitative columns, we generally want them to be integer or floats
    (floats are preferred), while qualitative columns are usually strings or Unicode
    objects:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'To clean up this column, let''s use the map feature in pandas to efficiently
    map a function to an entire series of data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The following table gives us a better understanding here:'
  prefs: []
  type: TYPE_NORMAL
- en: '|  | **Biweekly High Rate** | **Grade** |'
  prefs: []
  type: TYPE_TB
- en: '| **0** | 0.00 | 00000 |'
  prefs: []
  type: TYPE_TB
- en: '| **1** | 15.00 | 00000 |'
  prefs: []
  type: TYPE_TB
- en: '| **2** | 25.00 | 00000 |'
  prefs: []
  type: TYPE_TB
- en: '| **3** | 50.00 | 00000 |'
  prefs: []
  type: TYPE_TB
- en: '| **4** | 100.00 | 00000 |'
  prefs: []
  type: TYPE_TB
- en: 'To finish our transformation of the `Biweekly High Rate` column, we will cast
    the whole thing as a `float`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'While we are casting, let''s also cast the `Grade` column as a string:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'We see that we now have a total of:'
  prefs: []
  type: TYPE_NORMAL
- en: 1,356 rows (like we started with)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Two columns (that we selected):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Biweekly High Rate**: A quantitative column that refers to the average high
    weekly salary for a specified department:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: This column is quantitative because the the values are numerical in nature and
    describe the quantity of money that the person earns weekly
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: It is of type float, which we cast it to
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Grade**: The department that the salary is in reference to:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: This column is definitely qualitative because the codes refer to a department
    and not a quantity of any kind
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: It is of type object, which is the type pandas will stipulate if it is a string
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: To break quantitative and qualitative data even further, let's dive into the
    four levels of data.
  prefs: []
  type: TYPE_NORMAL
- en: The four levels of data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We already know that we can identify data as being either qualitative or quantitative.
    But, from there, we can go further. The four levels of data are:'
  prefs: []
  type: TYPE_NORMAL
- en: The nominal level
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The ordinal level
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The interval level
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The ratio level
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each level comes with a varying level of control and mathematical possibilities.
    It is crucial to know which level data lives on because it will dictate the types
    of visualizations and operations you are allowed to perform.
  prefs: []
  type: TYPE_NORMAL
- en: The nominal level
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first level of data, the nominal level, has the weakest structure. It consists
    of data that are purely described by name. Basic examples include blood type (A,
    O, AB), species of animal, or names of people. These types of data are all qualitative.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some other examples include:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `SF Job Salary` dataset, the `Grade` column would be nominal
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Given visitor logs of a company, the first and last names of the visitors would
    be nominal
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Species of animals in a lab experiment would be nominal
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mathematical operations allowed
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At each level, we will describe briefly the type of math that is allowed, and
    more importantly, not allowed. At this level, we cannot perform any quantitative
    mathematical operations, such as addition or division. These would not make any
    sense. Due to the lack of addition and division, we obviously cannot find an average
    value at the nominal level. There is no average name or average job department.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can, however, do basic counts using pandas'' `value_counts` methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The most commonly occurring `Grade` is `00000`, meaning that that is our **mode**
    or most commonly occurring category. Because of our ability to count at the nominal
    level, graphs, like bar charts, are available to us:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the result of the preceding code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2f219471-ae45-4ba2-9da7-789fd421dd6a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'At the nominal level, we may also utilize pie charts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the output of the preceding code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/60033570-ccb5-4bb3-a54f-98e6f1266cfc.png)'
  prefs: []
  type: TYPE_IMG
- en: The ordinal level
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The nominal level provided us with much in the way of capabilities for further
    exploration. Moving one level up, we are now on the ordinal scale. The ordinal
    scale inherits all of the properties of the nominal level, but has important additional
    properties:'
  prefs: []
  type: TYPE_NORMAL
- en: Data at the ordinal level can be **naturally ordered**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This implies that some data values in the column can be considered better than
    or greater than others
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As with the nominal level, data at the ordinal level is still categorical in
    nature, even if numbers are used to represent the categories.
  prefs: []
  type: TYPE_NORMAL
- en: Mathematical operations allowed
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have a few new abilities to work with at the ordinal level compared to the
    nominal level. At the ordinal level, we may still do basic counts as we did at
    the nominal level, but we can also introduce comparisons and orderings into the
    mix. For this reason, we may utilize new graphs at this level. We may use bar
    and pie charts like we did at the nominal level, but because we now have ordering
    and comparisons, we can calculate medians and percentiles. With medians and percentiles,
    stem-and-leaf plots, as well as box plots, are possible.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some examples of data at the ordinal level include:'
  prefs: []
  type: TYPE_NORMAL
- en: Using a Likert scale (rating something on a scale from one to ten, for example)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Grade levels on an exam (F, D, C, B, A)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For a real-world example of data at the ordinal scale, let''s bring in a new
    dataset. This dataset holds key insights into how much people enjoy the San Francisco
    International Airport or SFO. This dataset is also publicly available on SF''s
    open database ([https://data.sfgov.org/Transportation/2013-SFO-Customer-Survey/mjr8-p6m5](https://data.sfgov.org/Transportation/2013-SFO-Customer-Survey/mjr8-p6m5)):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'This CSV has many, many columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '`95` columns, to be exact. For more information on the columns available for
    this dataset, check out the data dictionary on the website ([https://data.sfgov.org/api/views/mjr8-p6m5/files/FHnAUtMCD0C8CyLD3jqZ1-Xd1aap8L086KLWQ9SKZ_8?download=true&filename=AIR_DataDictionary_2013-SFO-Customer-Survey.pdf](https://data.sfgov.org/api/views/mjr8-p6m5/files/FHnAUtMCD0C8CyLD3jqZ1-Xd1aap8L086KLWQ9SKZ_8?download=true&filename=AIR_DataDictionary_2013-SFO-Customer-Survey.pdf))'
  prefs: []
  type: TYPE_NORMAL
- en: 'For now, let''s focus on a single column, `Q7A_ART`. As described by the publicly
    available data dictionary, `Q7A_ART` is about artwork and exhibitions. The possible
    choices are 0, 1, 2, 3, 4, 5, 6 and each number has a meaning:'
  prefs: []
  type: TYPE_NORMAL
- en: '**1**: Unacceptable'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**2**: Below Average'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**3**: Average'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**4**: Good'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**5**: Outstanding'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**6**: Have Never Used or Visited'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**0**: Blank'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We can represent it as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The pandas is considering the column numerical because it is full of numbers,
    however, we must remember that even though the cells'' values are numbers, those
    numbers represent a category, and therefore this data belongs to the qualitative
    side, and more specifically, ordinal. If we remove the `0` and `6` category, we
    are left with five ordinal categories which basically resemble the star rating
    of restaurant ratings:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'We will then cast the values as strings:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have our ordinal data in the right format, let''s look at some
    visualizations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the result of the preceding code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ed1e4cc9-73d6-4fa4-87e7-77de7dec49fb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can also visualize this as a bar chart as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the output of the preceding code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/451880ea-7f27-4f98-8156-96c9d03af6ff.png)'
  prefs: []
  type: TYPE_IMG
- en: 'However, now we can also introduce box plots since we are at the ordinal level:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the output of the preceding code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9ce8981c-244b-4e42-9989-6368745ebcc0.png)'
  prefs: []
  type: TYPE_IMG
- en: This box plot would not be possible for the `Grade` column in the salary data,
    as finding a median would not be possible.
  prefs: []
  type: TYPE_NORMAL
- en: The interval level
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are starting to cook with gas now. At the nominal and ordinal level, we were
    working with data that was qualitative in nature. There was data that did not
    describe a true quantity. At the interval level, we move away from this notion
    and move into quantitative data. At the interval data level, we are working with
    numerical data that not only has ordering like at the ordinal level, but also
    has meaningful differences between values. This means that at the interval level,
    not only may we order and compare values, we may also **add** and **subtract**
    values.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: A classic example of data at the interval level is temperature. If it is 90
    degrees in Texas, and 40 degrees in Alaska, then we may calculate a 90-40 = 50
    degrees difference between the locations. This may seem like a very simple example,
    but thinking back on the last two levels, we have never had this amount of control
    over our data before.
  prefs: []
  type: TYPE_NORMAL
- en: 'Non-example:'
  prefs: []
  type: TYPE_NORMAL
- en: A classic non-example of data that is not at the interval level are Likert scales.
    We have identified Likert at the ordinal levels for their ability to be ordered,
    but it is important to notice that subtractions do not have a true consistent
    meaning. If we subtract a 5-3 on a Likert scale, the resulting 2 doesn't actually
    mean the number 2, nor does it represent the category 2\. Thus, subtraction in
    a Likert scale is difficult.
  prefs: []
  type: TYPE_NORMAL
- en: Mathematical operations allowed
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Remember, at the interval level, we have addition and subtraction to work with. This
    is a real game-changer. With the ability to add values together, we may introduce
    two familiar concepts, the **arithmetic mean** (referred to simply as the mean) and **standard
    deviation**. At the interval level, both of these are available to us. To see
    a great example of this, let''s pull in a new dataset, one about climate change:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Let us have a look at the following table for a better understanding:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **dt** | **AverageTemperature** | **AverageTemperatureUncertainty** | **City**
    | **Country** | **Latitude** | **Longitude** |  |'
  prefs: []
  type: TYPE_TB
- en: '| **0** | 1743-11-01 | 6.068 | 1.737 | Århus | Denmark | 57.05N | 10.33E |'
  prefs: []
  type: TYPE_TB
- en: '| **1** | 1743-12-01 | NaN | NaN | Århus | Denmark | 57.05N | 10.33E |'
  prefs: []
  type: TYPE_TB
- en: '| **2** | 1744-01-01 | NaN | NaN | Århus | Denmark | 57.05N | 10.33E |'
  prefs: []
  type: TYPE_TB
- en: '| **3** | 1744-02-01 | NaN | NaN | Århus | Denmark | 57.05N | 10.33E |'
  prefs: []
  type: TYPE_TB
- en: '| **4** | 1744-03-01 | NaN | NaN | Århus | Denmark | 57.05N | 10.33E |'
  prefs: []
  type: TYPE_TB
- en: 'This dataset has 8.6 million rows, where each row quantifies the average temperature
    of cities around the world by the month, going back to the 18th century. Note
    that just by looking at the first five rows, we already have some missing values.
    Let''s remove them for now in order to get a better look:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'The following table gives us a better understanding here:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **dt** | **AverageTemperature** | **AverageTemperatureUncertainty** | **City**
    | **Country** | **Latitude** | **Longitude** |  |'
  prefs: []
  type: TYPE_TB
- en: '| **0** | 1743-11-01 | 6.068 | 1.737 | Århus | Denmark | 57.05N | 10.33E |'
  prefs: []
  type: TYPE_TB
- en: '| 5 | 1744-04-01 | 5.788 | 3.624 | Århus | Denmark | 57.05N | 10.33E |'
  prefs: []
  type: TYPE_TB
- en: '| 6 | 1744-05-01 | 10.644 | 1.283 | Århus | Denmark | 57.05N | 10.33E |'
  prefs: []
  type: TYPE_TB
- en: '| 7 | 1744-06-01 | 14.051 | 1.347 | Århus | Denmark | 57.05N | 10.33E |'
  prefs: []
  type: TYPE_TB
- en: '| 8 | 1744-07-01 | 16.082 | 1.396 | Århus | Denmark | 57.05N | 10.33E |'
  prefs: []
  type: TYPE_TB
- en: 'Let''s see if we have any missing values with the following line of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'The column in question is called `AverageTemperature`. One quality of data
    at the interval level, which temperature is, is that we cannot use a bar/pie chart
    here because we have too many values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 111,994 values is absurd to plot, and also absurd because we know that the data
    is quantitative. Likely, the most common graph to utilize starting at this level
    would be the **histogram**. This graph is a cousin of the bar graph, and visualizes
    buckets of quantities and shows frequencies of these buckets.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see a histogram for the AverageTemperature around the world, to see
    the distribution of temperatures in a very holistic view:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the output of the preceding code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/34557624-2946-4bdc-8af7-54c0746a4efd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here, we can see that we have an average value of 20°C. Let''s confirm this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'We were close. The mean seems to be around 17°. Let''s make this a bit more
    fun and add new columns called `year` and `century`, and also subset the data
    to only be the temperatures recorded in the US:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'With the new column `century`, let''s plot four histograms of temperature,
    one for each century:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the output of the preceding code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/aa154be5-faa1-40ed-8330-502c5549ed6d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here, we have our four histograms, showing that the `AverageTemperature` is
    going up slightly. Let''s confirm this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the output of the preceding code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f0569aa0-3de6-49a3-86ea-e5ebbee765e5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Interesting! And because differences are significant at this level, we can
    answer the question of how much, on average, the temperature has risen since the
    18th century in the US. Let''s store the changes over the centuries as its own
    pandas Series object first:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'And now, let''s use the indices in the Series to subtract the value in the
    21st century minus the value in the 18th century, to get the difference in temperature:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Plotting two columns at the interval level
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'One large advantage of having two columns of data at the interval level, or
    higher, is that it opens us up to using scatter plots where we can graph two columns
    of data on our axes and visualize data-points as literal points on the graph.
    The `year` and `averageTemperature` column of our `climate change` dataset are
    both at the interval level, as they both have meaning differences, so let''s take
    a crack at plotting all of the monthly recorded US temperatures as a scatter plot,
    where the *x* axis will be the year and the *y* axis will be the temperature.
    We hope to notice a trending increase in temperature, as the line graph previously
    suggested:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the output of the preceding code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a0cb0ab6-e844-4bf8-b39b-e065cf236925.png)'
  prefs: []
  type: TYPE_IMG
- en: Oof, that's not pretty. There seems to be a lot of noise, and that is to be
    expected. Every year has multiple towns reporting multiple average temperatures,
    so it makes sense that we see many vertical points at each year.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s employ a `groupby` the year column to remove much of this noise:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the output of the preceding code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2690320e-c787-443c-8983-c28834545e5e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Better! We can definitely see the increase over the years, but let''s smooth
    it out slightly by taking a rolling mean over the years:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the output of the preceding code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bb05280f-619e-4eab-8138-2b36106e54d2.png)'
  prefs: []
  type: TYPE_IMG
- en: So, our ability to plot two columns of data at the interval level has re-confirmed
    what the previous line graph suggested; that there does seem to be a general trend
    upwards in average temperature across the US.
  prefs: []
  type: TYPE_NORMAL
- en: The interval level of data provides a whole new level of understanding of our
    data, but we aren't done yet.
  prefs: []
  type: TYPE_NORMAL
- en: The ratio level
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Finally, we move up to the highest level, the ratio level. At this level, we
    arguably have the highest degree of control and mathematics at our disposal. At
    the ratio level, like the interval level, we are still working with quantitative
    data. We inherit addition and subtraction from the interval level, but now we
    have a notion of *true zero* which gives us the ability to multiply and divide
    values.
  prefs: []
  type: TYPE_NORMAL
- en: Mathematical operations allowed
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At the ratio level, we may multiply and divide values together. This may not
    seem like a big deal, but it does allow us to make unique observations about data
    at this level that we cannot do at lower levels. Let's jump into a few examples
    to see exactly what this means.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: 'When working with financial data, we almost always have to work with some monetary
    value. Money is at the ratio level because we have a concept of having "zero money".
    For this reason, we may make statements such as:'
  prefs: []
  type: TYPE_NORMAL
- en: $100 is *twice *as much as $50 because 100/50 = 2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 10mg of penicillin is *half *as much as 20mg of penicillin because 10/20 = .5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is because of the existence of zero that ratios have meaning at this level.
  prefs: []
  type: TYPE_NORMAL
- en: 'Non-example:'
  prefs: []
  type: TYPE_NORMAL
- en: We generally consider temperature to be at the interval level and not the ratio
    level, because it doesn't make sense to say something like 100 degreeis twice
    as hot as 50 degree. That doesn't quite make sense. Temperature is quite subjective
    and this is not objectively correct.
  prefs: []
  type: TYPE_NORMAL
- en: It can be argued that Celsius and Fahrenheit have a starting point mainly because
    we can convert them into Kelvin, which does boast a true zero. In reality, because
    Celsius and Fahrenheit allow negative values, while Kelvin does not; both Celsius
    and Fahrenheit do not have a real *true zero*, while Kelvin does.
  prefs: []
  type: TYPE_NORMAL
- en: 'Going back to the salary data from San Francisco, we now see that the salary
    weekly rate is at the ratio level, and there we can start making new observations.
    Let''s begin by looking at the highest paid salaries:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the output of the preceding code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/188ffdf5-9fa2-4672-af3a-c1f81a9c6d14.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If we look up the highest-paid salary in a San Francisco public record found
    at:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://sfdhr.org/sites/default/files/documents/Classification%20and%20Compensation/Archives/Compensation-Manual-FY09-10.pdf](http://sfdhr.org/sites/default/files/documents/Classification%20and%20Compensation/Archives/Compensation-Manual-FY09-10.pdf)'
  prefs: []
  type: TYPE_NORMAL
- en: 'We see that it is the **General Manager**, **Public Transportation Dept.**.
    Let''s take a look at the lowest-paid jobs by employing a similar strategy:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the output of the preceding code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6ff7f1f3-ea27-4106-b9b2-84627f788e4e.png)'
  prefs: []
  type: TYPE_IMG
- en: Again, looking up the lowest-paid job, we see that it is a **Camp Assistant**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Because money is at the ratio level, we can also find the ratio of the highest-paid
    employee to the lowest-paid employee:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: The highest-paid employee makes 14x the lowest city employee. Thanks, ratio
    level!
  prefs: []
  type: TYPE_NORMAL
- en: Recap of the levels of data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Understanding the various levels of data is necessary to perform feature engineering.
    When it comes time to build new features, or fix old ones, we must have ways of
    identifying how to work with every column.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a quick table to summarize what is and isn''t possible at every level:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Level of Measurement** | **Properties** | **Examples** | **Descriptive
    statistics** | **Graphs** |'
  prefs: []
  type: TYPE_TB
- en: '| Nominal | DiscreteOrderless | Binary Responses (True or False)Names of PeopleColors
    of paint | Frequencies/Percentages Mode | BarPie |'
  prefs: []
  type: TYPE_TB
- en: '| Ordinal | Ordered categoriesComparisons | Likert ScalesGrades on an exam
    | FrequenciesModeMedianPercentiles | BarPieStem and leaf |'
  prefs: []
  type: TYPE_TB
- en: '| Interval | Differences between ordered values have meaning | Deg. C or FSome
    Likert Scales (must be specific) | FrequenciesModeMedianMeanStandard Deviation
    | Bar Pie'
  prefs: []
  type: TYPE_NORMAL
- en: Stem and leafBox plotHistogram |
  prefs: []
  type: TYPE_NORMAL
- en: '| Ratio | ContinuousTrue 0 allows ratio statements (for example, $100 is twice
    as much as $50) | MoneyWeight | MeanStandard Deviation | HistogramBox plot |'
  prefs: []
  type: TYPE_TB
- en: 'The following is a table showing the types of statistics allowed at each level:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Statistic** | **Nominal** | **Ordinal** | **Interval** | **Ratio** |'
  prefs: []
  type: TYPE_TB
- en: '| Mode | √ | √ | √ | Sometimes |'
  prefs: []
  type: TYPE_TB
- en: '| Median | X | √ | √ | √ |'
  prefs: []
  type: TYPE_TB
- en: '| Range, Min. Max | X | √ | √ | √ |'
  prefs: []
  type: TYPE_TB
- en: '| Mean | X | X | √ | √ |'
  prefs: []
  type: TYPE_TB
- en: '| SD | X | X | √ | √ |'
  prefs: []
  type: TYPE_TB
- en: 'And finally, the following is a table showing purely the graphs that are and
    are not possible at each level:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Graph** | **Nominal** | **Ordinal** | **Interval** | **Ratio** |'
  prefs: []
  type: TYPE_TB
- en: '| Bar/Pie | √ | √ | Sometimes | X |'
  prefs: []
  type: TYPE_TB
- en: '| Stem and Leaf | X | √ | √ | √ |'
  prefs: []
  type: TYPE_TB
- en: '| Boxplot | X | √ | √ | √ |'
  prefs: []
  type: TYPE_TB
- en: '| Histogram | X | X | Sometimes | √ |'
  prefs: []
  type: TYPE_TB
- en: 'Whenever you are faced with a new dataset, here is a basic workflow to follow:'
  prefs: []
  type: TYPE_NORMAL
- en: Is the data organized or unorganized? Does our data exist in a tabular format
    with distinct rows and columns, or does it exist as a mess of text in an unstructured
    format?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Is each column quantitative or qualitative? Are the values in the cells numbers
    that represent quantity, or strings that do not?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At what level of data is each column? Are the values at the nominal, ordinal,
    interval, or ratio level?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What graphs can I utilize to visualize my data—bar, pie, box, histogram, and
    so on?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Here is a visualization of this flow:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7839f08c-8139-4885-bf43-be312bf00679.png)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Understanding the features that we are working with is step zero of feature
    engineering. If we cannot understand the data given to us, we will never hope
    to fix, create, and utilize features in order to create well-performing, machine-learning
    pipelines. In this chapter, we were able to recognize, and extract the levels
    of data from our datasets and use that information to create useful and meaningful
    visuals that shine new lights on our data.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will use all of this new-found knowledge of the levels
    of data to start improving our features, and we will start to use machine-learning
    to effectively measure the impact of our feature engineering pipelines.
  prefs: []
  type: TYPE_NORMAL
