["```py\n    from sklearn.cluster import KMeans\n    from sklearn.datasets import load_iris\n    import pandas as pd # for exploring our data\n    import matplotlib.pyplot as plt # for plotting our clusters\n    from mpl_toolkits.mplot3d import Axes3D # Specifically for creating a 3-D graph\n    ```", "```py\n    # Load the iris dataset:\n    iris = load_iris()\n    # Assign the data to a variable so we can start to use it:\n    iris_data = iris.data\n    ```", "```py\n    # Convert the dataset to a pandas data frame for analysis:\n    iris_df = pd.DataFrame(iris_data)\n    # Use the info() function to get some information about the dataset\n    iris_df.info()\n    ```", "```py\n    iris_df.head()\n    ```", "```py\n    kmeans_model = KMeans(n_clusters=3)\n    ```", "```py\n    kmeans_model.fit(iris_data)\n    ```", "```py\n    kmeans_model.predict(iris_data)\n    ```", "```py\n    labels = kmeans_model.labels_\n    ```", "```py\n    # Create a figure object:\n    fig = plt.figure()\n    # Define the axes (note: the auto_add_to_figure option will default to False from mpl3.5 onwards):\n    axes = Axes3D(fig, auto_add_to_figure=False)\n    # Add the axes to the figure:\n    fig.add_axes(axes)\n    # Create the scatter plot to graph the outputs from our K-means model:\n    axes.scatter(iris_data[:, 2], iris_data[:, 3], iris_data[:, 1],\n        c=labels.astype(float))\n    # Set the labels for the X, Y, and Z axes:\n    axes.set_xlabel(\"Petal length\")\n    axes.set_ylabel(\"Petal width\")\n    axes.set_zlabel(\"Sepal width\")\n    ```", "```py\n    from sklearn.linear_model import LinearRegression\n    from sklearn.metrics import mean_squared_error\n    from sklearn.model_selection import train_test_split\n    ```", "```py\n    target = iris_df[[2]]\n    ```", "```py\n    input_feats = iris_df[[0, 1, 3]]\n    ```", "```py\n    input_train, input_test, target_train, target_test = \\\n        train_test_split(input_feats,target,test_size=0.2)\n    ```", "```py\n    # Create an instance of a LinearRegression model\n    lreg_model = LinearRegression()\n    # Train the model by fitting it to the training data\n    lreg_model.fit(input_train,target_train)\n    # Use the test set to generate predictions\n    target_predictions = lreg_model.predict(input_test)\n    ```", "```py\n    pred_df = pd.DataFrame(target_predictions[0:5])\n    pred_df.head()\n    ```", "```py\n    target_test.head()\n    ```", "```py\n    mean_squared_error(target_test,target_predictions)\n    ```", "```py\n    from xgboost import XGBClassifier\n    ```", "```py\n    from sklearn.metrics import accuracy_score\n    ```", "```py\n    iris_classes = iris.target\n    ```", "```py\n    xgb_input_train,xgb_input_test,xgb_target_train,xgb_target_test=\n        train_test_split(iris_data, iris_classes, test_size=.2)\n    ```", "```py\n    xgbc = XGBClassifier(n_estimators=2, max_depth=2, \n        learning_rate=1, objective='multi:softmax')\n    ```", "```py\n    xgbc.fit(xgb_input_train, xgb_target_train)\n    ```", "```py\n    xgb_predictions = xgbc.predict(xgb_input_test)\n    ```", "```py\n    xgb_predictions\n    ```", "```py\n    xgb_target_test\n    ```", "```py\n    accuracy_score(xgb_target_test,xgb_predictions)\n    ```"]