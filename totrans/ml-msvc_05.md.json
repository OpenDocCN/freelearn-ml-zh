["```py\nimport numpy as np\ndataframe_log = np.log(dataframe[\"House Price\"])\n```", "```py\nfrom sklearn.preprocessing import QuantileTransformer\nquantile = QuantileTransformer(output_distribution='normal', random_state=0)\nx_clipped = quantile.fit_transform(\"House Price\")\n```", "```py\nfrom sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()\nx_scaled = scaler.fit_transform(\"House Price\")\n```", "```py\nfrom sklearn.preprocessing import MaxAbsScaler\nscaler = MaxAbsScaler()\nx_scaled = scaler.fit_transform(\"House Price\")\n```", "```py\nfrom sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nx_scaled = scaler.fit_transform(\"House Price\")\n```", "```py\nfrom sklearn.preprocessing import RobustScalar\nscaler = RobustScalar()\nx_scaled = scaler.fit_transform(\"House Price\")\n```", "```py\nfrom sklearn.preprocessing import Normalizer\nscaler = Normalizer()\nx_scaled = scaler.fit_transform(\"House Price\")\n```", "```py\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.neighbors import KneighborsClassifier\nfrom sklearn.datasets import load_iris\n```", "```py\niris = load_iris()\nX = iris.data\ny = iris.target\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30)\nscaler = StandardScaler()\nscaler.fit(X_train)\nX_train = scaler.transform(X_train)\nX_test = scaler.transform(X_test)\n```", "```py\nclassifier = KNeighborsClassifier(n_neighbors=3)\nclassifier.fit(X_train, y_train)\n```", "```py\nfrom sklearn.datasets import load_diabetes\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn import metrics\ndiabetes = load_diabetes()\nfeatures = diabetes.data\ntarget = diabetes.target\nx_train, x_test, y_train, y_test = train_test_split(features, target, test_size=0.3, random_state=1)\nlinear_regression = LinearRegression()\nlinear_regression.fit(features, target)\ny_pred = linear_regression.predict(x_test)\nprint(\"Linear Regression model MSE:\", metrics.mean_squared_error(y_test, y_pred))\n```"]