["```py\nJupyter==1.0.0\nnetworkx==2.5\nmatplotlib==3.2.2\nnode2vec==0.3.3\nkarateclub==1.0.19\nscipy==1.6.2\n```", "```py\nimport networkx as nx\nfrom node2vec import Node2Vec\nimport matplotlib.pyplot as plt\nG = nx.barbell_graph(m1=7, m2=4)\nnode2vec = Node2Vec(G, dimensions=2)\nmodel = node2vec.fit(window=10)\nfig, ax = plt.subplots()\nfor x in G.nodes():\n    v = model.wv.get_vector(str(x))\n    ax.scatter(v[0],v[1], s=1000)\n    ax.annotate(str(x), (v[0],v[1]), fontsize=12)\n```", "```py\nfrom node2vec.edges import HadamardEmbedder\nedges_embs = HadamardEmbedder(keyed_vectors=model.wv)\nfig, ax = plt.subplots()\nfor x in G.edges():\n    v = edges_embs[(str(x[0]), str(x[1]))]\n    ax.scatter(v[0],v[1], s=1000)\n    ax.annotate(str(x), (v[0],v[1]), fontsize=12)\n```", "```py\nimport random\nimport matplotlib.pyplot as plt\nfrom karateclub import Graph2Vec\nn_graphs = 20\ndef generate_random():\n    n = random.randint(5, 20)\n    k = random.randint(5, n)\n    p = random.uniform(0, 1)\n    return nx.watts_strogatz_graph(n,k,p)\nGs = [generate_random() for x in range(n_graphs)]\nmodel = Graph2Vec(dimensions=2)\nmodel.fit(Gs)\nembeddings = model.get_embedding()\nfig, ax = plt.subplots(figsize=(10,10))\nfor i,vec in enumerate(embeddings):\n    ax.scatter(vec[0],vec[1], s=1000)\n    ax.annotate(str(i), (vec[0],vec[1]), fontsize=16)\n```"]