["```py\nfrom random import gauss\nfrom random import seed\nfrom pandas import Series\nfrom pandas.tools.plotting import autocorrelation_plot\nfrom matplotlib import pyplot\n```", "```py\nseed(1000)\n#creating white noise series\nseries = [gauss(0.0, 1.0) for i in range(500)]\nseries = Series(series)\n```", "```py\nprint(series.describe())\n```", "```py\nseries.plot()\npyplot.show()\n```", "```py\nautocorrelation_plot(series)\npyplot.show()\n```", "```py\n from pandas import Series\nfrom matplotlib import pyplot\n%matplotlib inline\n\ndata = Series.from_csv('AirPassengers.csv', header=0)\n  series.plot()\n  pyplot.show()\n```", "```py\nX = data.values\npartition =int(len(X) / 2)\nX1, X2 = X[0:partition], X[partition:]\nmean1, mean2 =np.nanmean(X1),np.nanmean(X2)\nvar1, var2 = np.nanvar(X1), np.nanvar(X2)\nprint('mean1=%f, mean2=%f' % (mean1, mean2))\nprint('variance1=%f, variance2=%f' % (var1, var2))\n```", "```py\nmean1=182.902778, mean2=377.694444 variance1=2244.087770, variance2=7367.962191\n```", "```py\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pylab as plt\n%matplotlib inline\nfrom matplotlib.pylab import rcParams\nrcParams['figure.figsize'] = 25, 6\n```", "```py\ndata = pd.read_csv('AirPassengers.csv')\nprint(data.head())\nprint('\\n Data Types:')\nprint(data.dtypes)\n```", "```py\ndateparse = lambda dates: pd.datetime.strptime(dates, '%Y-%m')\ndata = pd.read_csv('./data/AirPassengers.csv', parse_dates=['Month'], index_col='Month',date_parser=dateparse)\nprint(data.head())\n```", "```py\nts= data[\"#Passengers\"]\nts.head()\n```", "```py\nplt.plot(ts)\n```", "```py\nfrom statsmodels.tsa.stattools import adfuller\ndef stationarity_test(timeseries):\n dftest = adfuller(timeseries, autolag='AIC')\n dfoutput = pd.Series(dftest[0:4], index=['Test Statistic','p-value','#Lags Used','Number of Observations Used'])\n for key,value in dftest[4].items():\n               dfoutput['Critical Value (%s)'%key] = value\n print(dfoutput)\n\nstationarity_test(ts)\n```", "```py\nfrom statsmodels.tsa.stattools import acf,pacf\nlag_acf= acf(ts_log_dif,nlags=20)\nlag_pacf = pacf(ts_log_dif, nlags=20,method=\"ols\")\n```", "```py\n\nplt.subplot(121) \nplt.plot(lag_acf)\nplt.axhline(y=0,linestyle='--',color='gray')\nplt.axhline(y=-1.96/np.sqrt(len(ts_log_diff)),linestyle='--',color='gray')\nplt.axhline(y=1.96/np.sqrt(len(ts_log_diff)),linestyle='--',color='gray')\nplt.title('Autocorrelation Function')\n```", "```py\n#Plot PACF:\nplt.subplot(122)\nplt.plot(lag_pacf)\nplt.axhline(y=0,linestyle='--',color='gray')\nplt.axhline(y=-1.96/np.sqrt(len(ts_log_diff)),linestyle='--',color='gray')\nplt.axhline(y=1.96/np.sqrt(len(ts_log_diff)),linestyle='--',color='gray')\nplt.title('Partial Autocorrelation Function')\nplt.tight_layout()\n```", "```py\nfrom statsmodels.tsa.arima_model import ARIMA\nmodel1 = ARIMA(ts_log, order=(2, 1, 0)) \nresults_AR = model1.fit(disp=-1) \nplt.plot(ts_log_dif)\nplt.plot(results_AR.fittedvalues, color='red')\nplt.title('RSS: %.4f'% sum((results_AR.fittedvalues-ts_log_dif)**2))\n```", "```py\nresults_AR.summary()\n```", "```py\nmodel2 = ARIMA(ts_log, order=(0, 1, 2)) \nresults_MA = model2.fit(disp=-1) \nplt.plot(ts_log_dif)\nplt.plot(results_MA.fittedvalues, color='red')\nplt.title('RSS: %.4f'% sum((results_MA.fittedvalues-ts_log_dif)**2))\n```", "```py\nmodel3 = ARIMA(ts_log, order=(2, 1, 2))  \nresults_ARIMA = model.fit(disp=-1)  \nplt.plot(ts_log_dif)\nplt.plot(results_ARIMA.fittedvalues, color='red')\nplt.title('RSS: %.4f'% sum((results_ARIMA.fittedvalues-ts_log_dif)**2))\n```", "```py\nresults_ARIMA.summary()\n```", "```py\npredictions_ARIMA_dif= pd.Series(results_ARIMA.fittedvalues, copy=True)\nprint(predictions_ARIMA_dif.head())\n```", "```py\npredictions_ARIMA_dif_cumsum = predictions_ARIMA_dif.cumsum()\nprint(predictions_ARIMA_dif_cumsum.head())\n```", "```py\npredictions_ARIMA_log = pd.Series(ts_log.ix[0], index=ts_log.index)\npredictions_ARIMA_log = predictions_ARIMA_log.add(predictions_ARIMA_dif_cumsum,fill_value=0)\npredictions_ARIMA_log.head()\n```", "```py\npredictions_ARIMA = np.exp(predictions_ARIMA_log)\nplt.plot(ts)\nplt.plot(predictions_ARIMA)\nplt.title('RMSE: %.4f'% np.sqrt(sum((predictions_ARIMA-ts)**2)/len(ts)))\n```", "```py\nimport statsmodels.tsa.api as smtsa\naic=[] \nfor ari in range(1, 3): \n obj_arima = smtsa.ARIMA(ts_log_diff, order=(ari,2,0)).fit(maxlag=30, method='mle', trend='nc') \n aic.append([ari,2,0, obj_arima.aic])\nprint(aic)\n[[1, 2, 0, -76.46506473849644], [2, 2, 0, -116.1112196485397]]\n```", "```py\nimport statsmodels.tsa.api as smtsa\naic=[] \nfor ari in range(1, 3): \n     for maj in range(1,3): \n        arima_obj = smtsa.ARIMA(ts_log, order=(ari,1,maj)).fit(maxlag=30, method='mle', trend='nc') \n        aic.append([ari,1, maj, arima_obj.aic])\nprint(aic)\n```", "```py\n[[1, 1, 1, -242.6262079840165], [1, 1, 2, -248.8648292320533], [2, 1, 1, -251.46351037666676], [2, 1, 2, -279.96951163008583]]\n```", "```py\nimport numpy as np # vectors and matrices\nimport pandas as pd # tables and data manipulations\nimport matplotlib.pyplot as plt # plots\nimport seaborn as sns # more plots\nfrom sklearn.metrics import mean_absolute_error\nimport warnings # `do not disturb` mode\nwarnings.filterwarnings('ignore')\n%matplotlib inline\n```", "```py\ndata = pd.read_csv('AirPassengers.csv', index_col=['Month'], parse_dates=['Month'])\n plt.figure(figsize=(20, 10))\n plt.plot(ads)\n plt.title('Trend')\n plt.grid(True)\n plt.show()\n```", "```py\ndef plotMovingAverage(series, window, plot_intervals=False, scale=1.96, plot_anomalies=False):\n       rolling_mean = series.rolling(window=window).mean()\n       plt.figure(figsize=(15,5))\n       plt.title(\"Moving average\\n window size = {}\".format(window))\n       plt.plot(rolling_mean, \"g\", label=\"Rolling mean trend\")\n      # Plot confidence intervals for smoothed values\n      if plot_intervals:\n          mae = mean_absolute_error(series[window:], rolling_mean[window:])\n          deviation = np.std(series[window:] - rolling_mean[window:])\n          lower_bond = rolling_mean - (mae + scale * deviation)\n          upper_bond = rolling_mean + (mae + scale * deviation)\n          plt.plot(upper_bond, \"r--\", label=\"Upper Bond / Lower Bond\")\n          plt.plot(lower_bond, \"r--\") \n # Having the intervals, find abnormal values\n      if plot_anomalies:\n         anomalies = pd.DataFrame(index=series.index, columns=series.columns)\n         anomalies[series<lower_bond] = series[series<lower_bond]\n         anomalies[series>upper_bond] = series[series>upper_bond]\n         plt.plot(anomalies, \"ro\", markersize=10) \n         plt.plot(series[window:], label=\"Actual values\")\n         plt.legend(loc=\"upper left\")\n         plt.grid(True)\n```", "```py\ndata_anomaly = data.copy()\ndata_anomaly.iloc[-20] = data_anomaly.iloc[-20] * 0.2\n```", "```py\nplotMovingAverage(data_anomaly, 4, plot_intervals=True, plot_anomalies=True)\n```"]