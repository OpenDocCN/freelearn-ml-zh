["```py\nIn [1]: from sklearn.datasets import load_iris\n...     iris = load_iris()\n```", "```py\nIn [2]: import numpy as np\n...     X = iris.data.astype(np.float32)\n...     y = iris.target\n```", "```py\nIn [3]: import cv2\n...     knn = cv2.ml.KNearest_create()\n...     knn.setDefaultK(1)\n```", "```py\nIn [4]: knn.train(X, cv2.ml.ROW_SAMPLE, y)\n...     _, y_hat = knn.predict(X)\n```", "```py\nIn [5]: from sklearn.metrics import accuracy_score\n...     accuracy_score(y, y_hat)\nOut[5]: 1.0\n```", "```py\nIn [6]: from sklearn.model_selection import train_test_split\n```", "```py\n      In [1]: from sklearn.datasets import load_iris\n      ...     import numpy as np\n      ...     iris = load_iris()\n      ...     X = iris.data.astype(np.float32)\n      ...     y = iris.target\n```", "```py\n      In [2]: from sklearn.model_selection import model_selection\n      ...     X_fold1, X_fold2, y_fold1, y_fold2 = train_test_split(\n      ...         X, y, random_state=37, train_size=0.5\n      ...     )\n```", "```py\n      In [3]: import cv2\n      ...     knn = cv2.ml.KNearest_create()\n      ...     knn.setDefaultK(1)\n```", "```py\n      In [4]: knn.train(X_fold1, cv2.ml.ROW_SAMPLE, y_fold1)\n      ...     _, y_hat_fold2 = knn.predict(X_fold2)\n```", "```py\n      In [5]: knn.train(X_fold2, cv2.ml.ROW_SAMPLE, y_fold2)\n      ...     _, y_hat_fold1 = knn.predict(X_fold1)\n```", "```py\n      In [6]: from sklearn.metrics import accuracy_score\n      ...     accuracy_score(y_fold1, y_hat_fold1)\n      Out[6]: 0.92000000000000004\n      In [7]: accuracy_score(y_fold2, y_hat_fold2)\n      Out[7]: 0.88\n```", "```py\n      In [8]: from sklearn.neighbors import KNeighborsClassifier      ...     model = KNeighborsClassifier(n_neighbors=1)\n```", "```py\n In [9]: from sklearn.model_selection ...\n```", "```py\nIn [11]: from sklearn.model_selection import LeaveOneOut\n```", "```py\nIn [12]: scores = cross_val_score(model, X, y, cv=LeaveOneOut())\n```", "```py\nIn [13]: scores\nOut[13]: array([ 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n                 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n                 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n                 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n                 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n                 1., 1., 1., 1., 1., 0., 1., 0., 1., 1., 1., 1., 1.,\n                 1., 1., 1., 1., 1., 0., 1., 1., 1., 1., 1., 1., 1.,\n                 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n                 1., 1., 0., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n                 1., 1., 0., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n                 1., 1., 1., 0., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n                 1., 1., 1., 1., 1., 1., 1.])\n```", "```py\nIn [14]: scores.mean(), scores.std()\nOut[14]: (0.95999999999999996, 0.19595917942265423)\n```", "```py\n      In [15]: knn = cv2.ml.KNearest_create()\n      ...      knn.setDefaultK(1)\n```", "```py\n      In [16]: idx_boot = np.random.choice(len(X), size=len(X),\n      ...                                  replace=True)\n      ...      X_boot = X[idx_boot, :]\n      ...      y_boot = y[idx_boot]\n```", "```py\n      In [17]: idx_oob = np.array([x not in idx_boot\n      ...      for x in np.arange(len(X))],dtype=np.bool)\n      ...      X_oob = X[idx_oob, :]\n      ...      y_oob = y[idx_oob]\n```", "```py\n      In [18]: knn.train(X_train, cv2.ml.ROW_SAMPLE, y_boot)\n      Out[18]: True\n```", "```py\n      In [19]: _, y_hat = knn.predict(X_oob)\n      ...      accuracy_score(y_oob, y_hat)\n      Out[19]: 0.9285714285714286\n```", "```py\nIn [20]: def yield_bootstrap(model, X, y, n_iter=10000):\n...          for _ in range(n_iter):\n```", "```py\n...              # train the classifier on bootstrap\n...              idx_boot = np.random.choice(len(X), size=len(X),\n...                                          replace=True)\n...              X_boot = X[idx_boot, :]\n...              y_boot = y[idx_boot]\n...              knn.train(X_boot, cv2.ml.ROW_SAMPLE, y_boot)\n... \n...              # test classifier on out-of-bag examples\n...              idx_oob = np.array([x not in idx_boot\n...                                  for x in np.arange(len(X))],\n...                                 dtype=np.bool)\n...              X_oob = X[idx_oob, :]\n...              y_oob = y[idx_oob]\n...              _, y_hat = knn.predict(X_oob)\n```", "```py\n...              yield accuracy_score(y_oob, y_hat)\n```", "```py\nIn [21]: np.random.seed(42)\n```", "```py\nIn [22]: list(yield_bootstrap(knn, X, y, n_iter=10))\nOut[22]: [0.98333333333333328,\n          0.93650793650793651,\n          0.92452830188679247,\n          0.92307692307692313,\n          0.94545454545454544,\n          0.94736842105263153,\n          0.98148148148148151,\n          0.96078431372549022,\n          0.93220338983050843,\n          0.96610169491525422]\n```", "```py\nIn [23]: acc = list(yield_bootstrap(knn, X, y, n_iter=1000))\n...      np.mean(acc), np.std(acc)\nOut[23]: (0.95524155136419198, 0.022040380995646654)\n```", "```py\nIn [24]: acc = list(yield_bootstrap(knn, X, y, n_iter=10000))\n...      np.mean(acc), np.std(acc)\nOut[24]: (0.95501528733009422, 0.021778543317079499)\n```", "```py\nIn [25]: from scipy.stats import ttest_ind\n```", "```py\nIn [26]: scores_a = [1, 1, 1, 1, 1]\n...      scores_b = [0, 0, 0, 0, 0]\n```", "```py\nIn [27]: ttest_ind(scores_a, scores_b)\nOut[27]: Ttest_indResult(statistic=inf, pvalue=0.0)\n```", "```py\nIn [28]: scores_a = [0.9, 0.9, 0.9, 0.8, 0.8]\n...      scores_b = [0.8, 0.8, 0.9, 0.9, 0.9]\n...      ttest_ind(scores_a, scores_b)\nOut[28]: Ttest_indResult(statistic=0.0, pvalue=1.0)\n```", "```py\n      In [29]: k1 = KNeighborsClassifier(n_neighbors=1)\n      ...      scores_k1 = cross_val_score(k1, X, y, cv=10)\n      ...      np.mean(scores_k1), np.std(scores_k1)\n      Out[29]: (0.95999999999999996, 0.053333333333333323)\n```", "```py\n      In [30]: k3 = KNeighborsClassifier(n_neighbors=3)\n      ...      scores_k3 = cross_val_score(k3, X, y, cv=10)\n      ...      np.mean(scores_k3), np.std(scores_k3)\n      Out[30]: (0.96666666666666656, 0.044721359549995787)\n```", "```py\n      In [31]: ttest_ind(scores_k1, scores_k3)\n      Out[31]: Ttest_indResult(statistic=-0.2873478855663425,\n               pvalue=0.77712784875052965)\n```", "```py\nIn [1]: from sklearn.datasets import load_iris...     import numpy as np...     iris = load_iris()...     X = iris.data.astype(np.float32)...     y = iris.targetIn [2]: X_train, X_test, y_train, y_test = train_test_split(...          X, y, random_state=37...      )\n```", "```py\n      In [6]: X_trainval, X_test, y_trainval, y_test =\n      ...        train_test_split(X, y, random_state=37)\n      In [7]: X_trainval.shape\n      Out[7]: (112, 4)\n```", "```py\n      In [8]: X_train, X_valid, y_train, y_valid = train_test_split(\n      ...         X_trainval, y_trainval, random_state=37\n      ...     )\n      In [9]: X_train.shape\n      Out[9]: (84, 4)\n```", "```py\nIn [10]: best_acc = 0.0\n...      best_k = 0\n...      for k in range(1, 20):\n...          knn = cv2.ml.KNearest_create()\n...          knn.setDefaultK(k)\n...          knn.train(X_train, cv2.ml.ROW_SAMPLE, y_train)\n...          _, y_valid_hat = knn.predict(X_valid)\n...          acc = accuracy_score(y_valid, y_valid_hat)\n...          if acc >= best_acc:\n...              best_acc = acc\n...              best_k = k\n...      best_acc, best_k\nOut[10]: (1.0, 7)\n```", "```py\nIn [25]: knn = cv2.ml.KNearest_create()\n...      knn.setDefaultK(best_k)\n...      knn.train(X_trainval, cv2.ml.ROW_SAMPLE, y_trainval)\n...      _, y_test_hat = knn.predict(X_test)\n...      accuracy_score(y_test, y_test_hat), best_k\nOut[25]: (0.94736842105263153, 7)\n```", "```py\nIn [1]: from sklearn.datasets import load_breast_cancer...     import numpy as np...     cancer = load_breast_cancer()...     X = cancer.data.astype(np.float32)...     y = cancer.targetIn [2]: X_train, X_test, y_train, y_test = train_test_split(... X, y, random_state=37 ...\n```", "```py\nIn [8]: param_grid = {'svm__C': [0.001, 0.01, 0.1, 1, 10, 100],\n...                   'svm__gamma': [0.001, 0.01, 0.1, 1, 10, 100]}\n```", "```py\nIn [9]: grid = GridSearchCV(pipe, param_grid=param_grid, cv=10)\n...     grid.fit(X_train, y_train);\n```", "```py\nIn [10]: grid.best_score_\nOut[10]: 0.97652582159624413\n```", "```py\nIn [11]: grid.best_params_\nOut[11]: {'svm__C': 1, 'svm__gamma': 1}\n```", "```py\nIn [12]: grid.score(X_test, y_test)\nOut[12]: 0.965034965034965\n```"]