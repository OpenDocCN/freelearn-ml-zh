["```py\nimport math\nimport mldatasets\nimport pandas as pd\nimport numpy as np\nimport statsmodels.api as sm\nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\nimport seaborn as sns \n```", "```py\ncvd_df = mldatasets.load(\"cardiovascular-disease\") \n```", "```py\ncvd_df.info() \n```", "```py\nRangeIndex: 70000 entries, 0 to 69999\nData columns (total 12 columns):\nage            70000 non-null int64\ngender         70000 non-null int64\nheight         70000 non-null int64\nweight         70000 non-null float64\nap_hi          70000 non-null int64\nap_lo          70000 non-null int64\ncholesterol    70000 non-null int64\ngluc           70000 non-null int64\nsmoke          70000 non-null int64\nalco           70000 non-null int64\nactive         70000 non-null int64\ncardio         70000 non-null int64\ndtypes: float64(1), int64(11) \n```", "```py\ncvd_df['age'] = cvd_df['age'] / 365.24 \n```", "```py\ncvd_df.describe(percentiles=[.01,.99]).transpose() \n```", "```py\nincorrect_l = cvd_df[\n    (cvd_df['ap_hi']>370)\n    | (cvd_df['ap_hi']<=40)\n    | (cvd_df['ap_lo'] > 370)\n    | (cvd_df['ap_lo'] <= 40)\n].index\nprint(len(incorrect_l) / cvd_df.shape[0]) \n```", "```py\ncvd_df.drop(incorrect_l, inplace=True) \n```", "```py\ncvd_df = cvd_df[cvd_df['ap_hi'] >=\\\n                cvd_df['ap_lo']].reset_index(drop=True) \n```", "```py\ny = cvd_df['cardio']\nX = cvd_df.drop(['cardio'], axis=1).copy()\nX_train, X_test, y_train, y_test = train_test_split(\n    X, y, test_size=0.15, random_state=9\n) \n```", "```py\nlog_model = sm.Logit(y_train, sm.add_constant(X_train))\nlog_result = log_model.fit()\nprint(log_result.summary2()) \n```", "```py\nOptimization terminated successfully.\n         Current function value: 0.561557\n         Iterations 6\n                         Results: Logit\n=================================================================\nModel:              Logit            Pseudo R-squared: 0.190     \nDependent Variable: cardio           AIC:              65618.3485\nDate:               2020-06-10 09:10 BIC:              65726.0502\nNo. Observations:   58404            Log-Likelihood:   -32797\\.   \nDf Model:           11               LL-Null:          -40481\\.   \nDf Residuals:       58392            LLR p-value:      0.0000    \nConverged:          1.0000           Scale:            1.0000    \nNo. Iterations:     6.0000                                       \n-----------------------------------------------------------------\n               Coef.   Std.Err.    z     P>|z|   [0.025   0.975]\n-----------------------------------------------------------------\nconst         -11.1730   0.2504 -44.6182 0.0000 -11.6638 -10.6822\nage             0.0510   0.0015  34.7971 0.0000   0.0482   0.0539\ngender         -0.0227   0.0238  -0.9568 0.3387  -0.0693   0.0238\nheight         -0.0036   0.0014  -2.6028 0.0092  -0.0063  -0.0009\nweight          0.0111   0.0007  14.8567 0.0000   0.0096   0.0125\nap_hi           0.0561   0.0010  56.2824 0.0000   0.0541   0.0580\nap_lo           0.0105   0.0016   6.7670 0.0000   0.0075   0.0136\ncholesterol     0.4931   0.0169  29.1612 0.0000   0.4600   0.5262\ngluc           -0.1155   0.0192  -6.0138 0.0000  -0.1532  -0.0779\nsmoke          -0.1306   0.0376  -3.4717 0.0005  -0.2043  -0.0569\nalco           -0.2050   0.0457  -4.4907 0.0000  -0.2945  -0.1155\nactive         -0.2151   0.0237  -9.0574 0.0000  -0.2616  -0.1685\n================================================================= \n```", "```py\nnp.exp(log_result.params).sort_values(ascending=False) \n```", "```py\ncholesterol    1.637374\nap_hi          1.057676\nage            1.052357\nweight         1.011129\nap_lo          1.010573\nheight         0.996389\ngender         0.977519\ngluc           0.890913\nsmoke          0.877576\nalco           0.814627\nactive         0.806471\nconst          0.000014\ndtype: float64 \n```", "```py\nnp.std(X_train, 0) \n```", "```py\nage             6.757537\ngender          0.476697\nheight          8.186987\nweight         14.335173\nap_hi          16.703572\nap_lo           9.547583\ncholesterol     0.678878\ngluc            0.571231\nsmoke           0.283629\nalco            0.225483\nactive          0.397215\ndtype: float64 \n```", "```py\ncoefs = log_result.params.drop(labels=['const','gender'])\nstdv = np.std(X_train, 0).drop(labels='gender')\nabs(coefs * stdv).sort_values(ascending=False) \n```", "```py\nap_hi          0.936632\nage            0.344855\ncholesterol    0.334750\nweight         0.158651\nap_lo          0.100419\nactive         0.085436\ngluc           0.065982\nalco           0.046230\nsmoke          0.037040\nheight         0.029620 \n```", "```py\ny_pred = log_result.predict(sm.add_constant(X_test)).to_numpy()\nprint(y_pred) \n```", "```py\n[0.40629892 0.17003609 0.13405939 ... 0.95575283 0.94095239 0.91455717] \n```", "```py\nprint(y_pred[2872]) \n```", "```py\nprint(X_test.iloc[2872]) \n```", "```py\nage             60.521849\ngender           1.000000\nheight         158.000000\nweight          62.000000\nap_hi          130.000000\nap_lo           80.000000\ncholesterol      1.000000\ngluc             1.000000\nsmoke            0.000000\nalco             0.000000\nactive           1.000000\nName: 46965, dtype: float64 \n```", "```py\nfiller_feature_values = {\n    \"age\": 30,\n    \"gender\": 1,\n    \"height\": 165,\n    \"weight\": 57,\n    \"ap_hi\": 110,\n    \"ap_lo\": 70,\n    \"cholesterol\": 1,\n    \"gluc\": 1,\n    \"smoke\": 0,\n    \"alco\":0,\n    \"active\":1\n} \n```", "```py\nX_highlight = np.reshape(\n    np.concatenate(([1], X_test.iloc[2872].to_numpy())), (1, 12))\nprint(X_highlight) \n```", "```py\n[[  1\\.       60.52184865   1\\.       158\\.        62\\.       130\\.          \n   80\\.        1\\.           1\\.         0\\.         0\\.         1\\.     ]] \n```", "```py\nplt.rcParams.update({'font.size': 14})\nfig, axarr = plt.subplots(2, 2, figsize=(12,8), sharex=True,\n                          sharey=False)\nmldatasets.create_decision_plot(\n    X_test,\n    y_test,\n    log_result,\n    [\"ap_hi\", \"age\"],\n    None,\n    X_highlight,\n    filler_feature_values,\n    ax=axarr.flat[0]\n)\nmldatasets.create_decision_plot(\n    X_test,\n    y_test,\n    log_result,\n    [\"ap_hi\", \"cholesterol\"],\n     None,\n    X_highlight,\n    filler_feature_values,\n    ax=axarr.flat[1]\n)\nmldatasets.create_decision_plot(\n    X_test,\n    y_test,\n    log_result,\n    [\"ap_hi\", \"ap_lo\"],\n    None,\n    X_highlight,\n    filler_feature_values,\n    ax=axarr.flat[2],\n)\nmldatasets.create_decision_plot(\n    X_test,\n    y_test,\n    log_result,\n    [\"ap_hi\", \"weight\"],\n    None,\n    X_highlight,\n    filler_feature_values,\n    ax=axarr.flat[3],\n)\nplt.subplots_adjust(top=1, bottom=0, hspace=0.2, wspace=0.2)\nplt.show() \n```", "```py\nfig, ax = plt.subplots(1,1, figsize=(12,8))\nmldatasets.create_decision_plot(\n    X_test,\n    y_test,\n    log_result,\n    [3, 4],\n    ['height [cm]',\n    'weight [kg]'],\n    X_highlight,\n    filler_feature_values,\n    filler_feature_ranges,\n    ax=ax\n)\nplt.show() \nFigure 2.3:\n```", "```py\n    X2 = cvd_df.drop(['cardio'], axis=1).copy()\n    X2[\"bmi\"] = X2[\"weight\"] / (X2[\"height\"]/100)**2 \n    ```", "```py\nfig, (ax1, ax2, ax3) = plt.subplots(1,3, figsize=(15,4))\nsns.regplot(x=\"weight\", y=\"bmi\", data=X2, ax=ax1)\nsns.regplot(x=\"height\", y=\"bmi\", data=X2, ax=ax2)\nsns.regplot(x=\"height\", y=\"weight\", data=X2, ax=ax3)\nplt.subplots_adjust(top = 1, bottom=0, hspace=0.2, wspace=0.3)\nplt.show() \n```", "```py\nX2 = X2.drop(['weight','height'], axis=1)\nX2_train, X2_test,__,_ = train_test_split(\n  X2, y, test_size=0.15, random_state=9)\nlog_model2 = sm.Logit(y_train, sm.add_constant(X2_train))\nlog_result2 = log_model2.fit() \n```", "```py\nfiller_feature_values2 = {\n    \"age\": 60, \"gender\": 1, \"ap_hi\": 110,\n    \"ap_lo\": 70, \"cholesterol\": 1, \"gluc\": 1,\n    \"smoke\": 0, \"alco\":0, \"active\":1, \"bmi\":20 \n}\nX2_highlight = np.reshape(\n    np.concatenate(([1],X2_test.iloc[2872].to_numpy())), (1, 11)\n)\nfig, ax = plt.subplots(1,1, figsize=(12,8))\nmldatasets.create_decision_plot(\n    X2_test, y_test, log_result2,\n    [\"ap_hi\", \"bmi\"], None, X2_highlight,\n    filler_feature_values2, ax=ax)\nplt.show() \n```"]