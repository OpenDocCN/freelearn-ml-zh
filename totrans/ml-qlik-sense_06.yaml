- en: '6'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Preprocessing and Exploring Data with Qlik Sense
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Data processing and exploration are essential steps in the data analysis process.
    They involve transforming raw data into meaningful insights, identifying patterns,
    and gaining a deeper understanding of the data. Qlik Sense is a powerful data
    analytics tool that allows users to easily process and explore data. With its
    data cleansing, transformation, and integration capabilities, Qlik Sense makes
    it easy to prepare data for analysis and produce a good dataset to be used for
    machine learning models.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will introduce data preprocessing and exploration with Qlik Sense.
    We will cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a data model using the data manager
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a data model and altering data with Qlik script
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Validating data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Utilizing data lineage and data catalogs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring data and finding insights using Insight Advisor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a data model with the data manager
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A good data model is important because it forms the foundation of effective
    data analysis. A data model is a representation of the structure and relationships
    within a dataset, and it defines the rules for how data is stored, accessed, and
    used.
  prefs: []
  type: TYPE_NORMAL
- en: Qlik’s data manager is a data preparation and management tool that is part of
    the Qlik Sense platform. It provides a user-friendly interface for designing and
    building data models, as well as cleaning, transforming, and integrating data
    from a variety of sources.
  prefs: []
  type: TYPE_NORMAL
- en: 'Qlik’s data manager provides a range of features to support data preparation
    and management, including the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Data profiling**: Qlik’s data manager provides tools that help users understand
    their data, including data profiling features, which allow users to identify data
    quality issues, such as missing values, duplicates, and outliers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Data transformation**: Qlik’s data manager provides a range of tools for
    cleaning and transforming data, including the ability to remove duplicates, fill
    in missing values, and convert data types. It also provides advanced transformation
    capabilities, such as data pivoting and data normalization.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Data integration**: Qlik’s data manager allows users to integrate data from
    a variety of sources, including Excel spreadsheets, CSV files, databases, and
    cloud-based services. It provides built-in connectors to popular data sources
    and the ability to create custom connectors for other data sources.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Data modeling**: Qlik’s data manager allows users to create data models using
    a graphical interface. It provides tools for defining tables, fields, and relationships
    between tables, as well as the ability to add calculated fields and build complex
    data models.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Next, we will look into these features of the data manager using an example
    dataset. We will not cover a full data model creation in detail since that is
    not in within the scope of this book.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The example dataset used in these examples can be found from the GitHub repository
    of this book.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to the data manager
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s start getting familiar with the data manager by taking a look at the
    user interface. As a preparation step we have created a new analytics application
    in the Qlik cloud tenant and uploaded our sample dataset (`Sales Multi Table.xlsx`).
    The data manager view will open. An example of that view can be seen in the following
    figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.1: The data manager view](img/B19863_06_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.1: The data manager view'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this figure, we have divided the data manager into three different sections,
    which we will cover next:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Data modeling**: In this space you can create the actual data model. One
    bubble represents the entity of data, for example, an Excel sheet or database
    table. When clicking the left mouse button on a bubble, the color of other bubbles
    will change. This color represents how well these two entities link with each
    other.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Data preview**: If you have activated one data entity or bubble, the data
    preview shows the snapshot of all the columns and sample data about the entity.
    The active entity is highlighted with darker borders in the data modeling view.
    You can enter the data edit view, refresh, and delete data entities from this
    view.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Associations**: All associations between the entities that are discovered
    by the data manager can be seen on the right side of the screen. You can preview
    the associations and approve these using this view.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, we will take a look at how to create a data model using our sample dataset.
    We will start by dragging a data entity called **Categories** on top of the data
    entity called **Products**. When we start dragging the **Categories** entity,
    we will see a view similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.2: Data manager – linking tables together](img/B19863_06_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.2: Data manager – linking tables together'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this picture, we see that **Products** entity has a green arc on the outer
    edge and several other entities have an orange arc. The arc and color represent
    the match between the two entities. Since the **Products** entity is the best
    match, we can drop our **Categories** entity on top of **Products**. We have now
    linked these two data entities together. The actual linking table is visible at
    the bottom of the data modeling view. It is highlighted in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.3: The data manager – association done](img/B19863_06_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.3: The data manager – association done'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you’d like to edit the linking field, that can be done by pressing the button
    in the middle of the highlighted area. You can now proceed to building the rest
    of the data model. This can be done either one by one or by selecting **Apply
    all** button located at the top section of the **Associations** view, as seen
    in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.4: The Apply all button](img/B19863_06_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.4: The Apply all button'
  prefs: []
  type: TYPE_NORMAL
- en: 'You should see the ready data model. It should look like the one in the following
    figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.5: Data model ready](img/B19863_06_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.5: Data model ready'
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will take a closer look into editing capabilities in the data manager.
    We will start by selecting the **Employees** entity. We should see the content
    of **Employees** in the **Data** **preview** section.
  prefs: []
  type: TYPE_NORMAL
- en: 'To modify the entity, we will select the small pen icon located at the bottom
    of the **Data preview** section. The **Data edit** view will open and should look
    like the one in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.6: The Data edit view](img/B19863_06_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.6: The Data edit view'
  prefs: []
  type: TYPE_NORMAL
- en: 'The Data edit view is divided into the following sections:'
  prefs: []
  type: TYPE_NORMAL
- en: '`datetime` fields, and coordinates are assigned to geodata.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Data summary**: The data summary will show statistics and the distribution
    of the data. This section is good for validation and outlier detection. This section
    will also tell you how many total values and unique values there are in an specific
    column.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Data editing**: The data editing section will allow you to perform several
    operations on the data field using graphical tools. These operations contain null
    value replacements, replacing certain values with others, creating buckets and
    splitting data. For example, null value replacement is an important preprocessing
    step for machine learning.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, we will take a closer look into some of the sections using the **Employees**
    entity as an example. Let’s select the **Salary** column and change its type to
    **Measure** in the **Summary** section. You should see something like the following
    figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.7: The Salary field active in the Data edit view](img/B19863_06_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.7: The Salary field active in the Data edit view'
  prefs: []
  type: TYPE_NORMAL
- en: We can see that the data preview section shows us the minimum, median, average,
    and maximum values and the distribution of each individual value. The data editing
    section will give us options to create for example data buckets, replace certain
    values, and set values to null fields.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s next activate the **EmployeeName** field. We will see the following view,
    which will differ slightly from the one we saw for the **Salary** field:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.8: The EmployeeName field active in the Data edit view](img/B19863_06_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.8: The EmployeeName field active in the Data edit view'
  prefs: []
  type: TYPE_NORMAL
- en: Now we can see a different view in the data summary section that shows the unique
    values and total values. We will also see new options in our data edit section.
    There is an option to split the field, for example, into first name and last name,
    and you can also set the order. We don’t see an option for buckets with this field
    since **EmployeeName** is a text field.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the upper right corner, we can see the **Add field** button and under that,
    we can add a calculated field. If we select that, a wizard guiding us on field
    creation will appear. Let’s create a calculated field for our **Employee** entity.
    A wizard, as shown in the following figure, should be visible:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.9: Add calculated field](img/B19863_06_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.9: Add calculated field'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this case, we would like to calculate our employee’s monthly salary within
    two decimals. We will name our field `MontlySalary` and give the following expression
    in the **Expression** field:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The **Preview** section will show the sample values while we are typing our
    calculation. You can access fields, functions, and operators using the buttons
    under the **Expression** section. When ready, press **Create** to add the calculated
    field to our data entity.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you look into the header section of each field, you can see the icons
    highlighted in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.10: Headers in the Data edit view](img/B19863_06_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.10: Headers in the Data edit view'
  prefs: []
  type: TYPE_NORMAL
- en: The icon on the left side will give you the option to change the data type of
    each field. The data manager should automatically recognize most of the data fields.
    For example, in the previous image, the `Date` type and there is a small calendar
    icon, while other fields are of the generic type. Available field types are **General**,
    **Date**, **Timestamp**, and **Geodata**.
  prefs: []
  type: TYPE_NORMAL
- en: Fields that have associations are marked with a chain icon, as seen in the previous
    figure, on top of the `Employees.EmployeeID` field and the `Employees.Office`
    field. You can edit or break the association by selecting the chain icon.
  prefs: []
  type: TYPE_NORMAL
- en: The right-most icon will give you options to modify the field. Under that, you
    can find options to rename the field, associate the field with other tables, edit
    sorting, hide the field from analysis, and view details.
  prefs: []
  type: TYPE_NORMAL
- en: We have now gone briefly through most of the features in the data manager. The
    next step is to load data into Qlik’s engine. To do that, we can select the **Load
    data** button located in the top-right corner. Data loading will start and after
    that, we can move on to the visualization part.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will take a brief look into Qlik script. We will discover
    some of the most important functions that we can utilize in our machine learning
    and data visualization solutions.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The data manager generates Qlik script in the background. A good way to start
    investigating scripting is to create a data model using the data manager and switch
    to the data load editor to see the generated script.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: A data model can be viewed using the data model viewer. The data model viewer
    will represent the relationships between tables and give a sample of the data
    that each table contains. We will not cover the usage in depth in this book.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to Qlik script
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Qlik script is a scripting language used in Qlik Sense and QlikView for loading
    and transforming data from various sources into Qlik’s associative data model.
    It is a powerful and flexible scripting language that allows users to extract,
    transform, and load data from various sources, such as databases, spreadsheets,
    and flat files, and then prepare that data for analysis.
  prefs: []
  type: TYPE_NORMAL
- en: Qlik script is like SQL in terms of syntax and structure, but it includes additional
    features and functions that make it more powerful and flexible. With Qlik script,
    users can perform complex data transformations, create calculated fields, generate
    variables, and apply filters to data. The script can be used to define data models,
    specify data sources, and load data from them, and define data transformations.
    The data manager that we used in the previous section generates Qlik script in
    the background, and all operations done using the data manager can be done using
    scripting.
  prefs: []
  type: TYPE_NORMAL
- en: 'When using Qlik script, the following procedures are typically involved in
    creating a data model for an application:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Connect to a data source**: First, we need to establish a connection to a
    data source. This could be a database, Excel file, CSV file, or any other supported
    data format. Creating data connections is not covered in detail in this book.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`LOAD` keyword.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`LOAD` statement to fetch data from your data source into Qlik. Specify the
    fields you want to load and the source table or file. In this example, we will
    load the `Employees` table and `Office` table from `Sales Multi Table.xlsx`. These
    tables will link through the `[Office]` field since, in Qlik script, fields with
    similar names will form a link. You can modify the name using the `as` keyword.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Transform and clean the data**: Perform any necessary transformations or
    cleaning operations on the loaded data. This may include renaming fields, changing
    data types, filtering rows, or joining tables. Qlik provides various functions
    and operators to manipulate data. We will take a closer look into some of the
    functions in the next section.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Create** **table associations**: Qlik’s associative data model allows you
    to establish relationships between tables based on common fields. You can also
    create joins between tables and concatenate data if needed.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Save and reload the script**: After completing the script, save it and click
    the reload button. This will load the data into the Qlik application and create
    the data model.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Important functions in Qlik script
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this section, we will take a closer look into some of the functions in Qlik
    script that are helpful when creating a machine learning-ready data model:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Date()`, `Year()`, `Month()`, `Day()`, and `Quarter()`, to extract and manipulate
    date-related information from fields.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Len()`, `Upper()`, `Lower()`, `Concatenate()`, `Left()`, `Right()`, `Mid()`,
    and `SubField()`, for string manipulation and formatting.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This is an example using the `Upper()` function:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`Sum()`, `Avg()`, `Min()`, `Max()`, `Count()`, `Round()`, `Ceil()`, `Floor()`,
    and `Abs()` for performing calculations and aggregations. These functions are
    useful when preparing data for machine learning.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This is an example using the `Sum()` function:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`AGGR` function is used to aggregate data dynamically based on user-defined
    expressions. It allows you to perform calculations at different levels of granularity.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This is an example:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In this example, we have a dataset of sales transactions (`Sales`). We want
    to calculate the total sales for each category by summing the product of price
    and quantity for each transaction.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**IF-THEN-ELSE**: The IF-THEN-ELSE statement is used to perform conditional
    logic. It allows you to create conditional expressions and perform different actions
    based on the condition.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This is an example:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In this example, if the `Category` field is equal to `Electronics`, the `DiscountedPrice`
    field will be calculated as 90% of the original price (`Price * 0.9`). Otherwise,
    if `Category` is not `Electronics`, the `DiscountedPrice` field will be the same
    as the original price (`Price`).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`FOR...NEXT` loop allows you to execute a block of script code for a specified
    number of iterations. It’s typically used when you know the exact number of iterations
    in advance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DO...WHILE` loop executes a block of code repeatedly as long as a condition
    is true. It’s useful when you want to iterate until a specific condition is met.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FOR EACH...NEXT` loop allows you to iterate over the distinct values of a
    field or expression. It executes a block of code for each unique value.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`WHILE...WEND` loop repeatedly executes a block of code as long as a condition
    is true. It’s useful when you want to iterate until a specific condition becomes
    false.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Other useful functions that might be handy when modeling data for machine learning
    are listed here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`APPLYMAP` function allows you to perform mapping operations by referencing
    an external mapping table. This can be useful for mapping categorical values to
    numerical codes or vice versa, which is often required in machine learning tasks.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`RESIDENT` function allows you to perform operations on a previously loaded
    table. It is useful for creating derived tables or applying transformations to
    existing data, which can be beneficial for preparing data for machine learning
    algorithms.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PIVOT` and `UNPIVOT` functions enable you to reshape your data, converting
    it between wide and long formats. This functionality can be valuable for feature
    engineering and data preprocessing in machine learning workflows.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CONCATENATE` function allows you to combine multiple tables with the same
    structure into a single table. This can be handy for aggregating data from different
    sources or merging datasets, which is often necessary for machine learning tasks.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LOAD INLINE` statement allows you to define data inline within your script.
    This is useful when you have small datasets or need to define example data for
    testing machine learning algorithms.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PRECEDING LOAD` feature enables you to calculate and store derived fields
    within the load script. It allows you to perform calculations and transformations
    on the fly, which can be advantageous for feature engineering or creating target
    variables for machine learning models.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`APPLY` and `GROUP BY APPLY` functions allow you to perform advanced calculations
    and transformations on groups of data. They provide a way to apply complex expressions
    and aggregations within a group, which can be beneficial for creating features
    or generating summary statistics for machine learning algorithms.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QUALIFY` and `UNQUALIFY` functions are used to specify field qualifiers. They
    are particularly helpful when working with fields that contain characters that
    have special meaning in Qlik scripting, such as spaces or special characters,
    which are commonly encountered in feature names or labels in machine learning
    tasks.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: A full Qlik script reference guide with examples is available at the Qlik help
    site.
  prefs: []
  type: TYPE_NORMAL
- en: Now we have taken a brief overview of some of the most important functions in
    Qlik script. Qlik scripting is a powerful tool for manipulating data and creating
    data models. Next, we will take a closer look into data validation using multiple
    tools in Qlik Cloud.
  prefs: []
  type: TYPE_NORMAL
- en: Validating data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We have multiple options to validate and investigate our data with Qlik Cloud
    before moving to the data editing and analysis phase. Let’s start by using a data
    catalog. We will take a closer look into data catalogs in the next section of
    this chapter, but in this section, we will cover some of the features for data
    validation. First, we will open `Sales Multi table.xlsx` and move to the **Fields**
    section in our data catalog. Let’s also select the **Employees** tab. We should
    see the following view:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.11: Data catalog](img/B19863_06_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.11: Data catalog'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here we can see a data distribution of all fields in the **Employees** entity.
    By default, we have **Tile view** open in our catalog. The following figure represents
    the tile of our **Salary** field. Let’s take a closer look into that next:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.12: The Salary field in the data catalog](img/B19863_06_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.12: The Salary field in the data catalog'
  prefs: []
  type: TYPE_NORMAL
- en: The **Salary** tile will show us the minimum, average and maximum value of the
    **Salary** field. It will also tell us the number of distinct values. Using this
    information, we can already identify the possible outliers and get a preliminary
    understanding of the data distribution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will change from **tile view** to **list view** using the small icon
    in the top-right corner (highlighted in the following figure). The following view
    should be visible:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.13: Data catalog – list view](img/B19863_06_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.13: Data catalog – list view'
  prefs: []
  type: TYPE_NORMAL
- en: This view will tell us the data type of each field and the number of distinct
    and null values, and give a sample of values in each field. Data type and number
    of null values are especially valuable when starting to create a machine learning
    solution.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will continue our data validation using the data manager. We already
    covered some parts of the data manager in the previous section. We are using our
    `Sales Multi Table.xlsx` that was imported into the data manager, and we have
    opened our **Employees** entity for editing. Refer to the section covering the
    data manager earlier in this chapter if needed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will activate the **EmployeeName** field. The data summary section
    should look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.14: The EmployeeName field summary](img/B19863_06_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.14: The EmployeeName field summary'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here we can see that this field is handled as a dimension, and we have 47 values
    in total. All the values are unique, and we can see the distribution. Next, we
    can activate the **Hire Date** field. The following summary is visible:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.15: The Hire Date field summary](img/B19863_06_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.15: The Hire Date field summary'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here we can see the distribution of data and the number of total and distinct
    values. We can also see the value range for the data. This information is helpful
    when investigating the data and looking for potential outliers. Next, we can select
    the **Salary** field and we should see the following (you might need to change
    the type from dimension to measure):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.16: The Salary field summary](img/B19863_06_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.16: The Salary field summary'
  prefs: []
  type: TYPE_NORMAL
- en: The **Salary** field summary will tell us the distribution, the number of total
    and distinct values, and the minimum, median, average, and maximum values. This
    information will help us further with our data investigation and validation.
  prefs: []
  type: TYPE_NORMAL
- en: The third option to validate data is to utilize Qlik’s analytic objects and
    create a view on top of the data model. We will cover this in the later chapters
    of this book. Also, later in this chapter, we will look at Insight Advisor and
    how to use that to analyze data. Insight Advisor is a powerful tool for data validation.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have an overview of the data validation, we will investigate the
    possibilities of data lineage and data catalogs. These tools will help us to understand
    the data better and also help us to visualize the data pipelines.
  prefs: []
  type: TYPE_NORMAL
- en: Data lineage and data catalogs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Qlik Sense, data lineage and data catalogs are two important features that
    help users to better understand, manage, and govern their data.
  prefs: []
  type: TYPE_NORMAL
- en: '**Data lineage** refers to the path that data takes from its source to its
    destination, including all the transformations that occur along the way. In Qlik
    Sense, data lineage provides a visual representation of how data is transformed
    as it moves through the system. This helps users to understand the origin and
    quality of the data, as well as identify any issues or bottlenecks in the data
    flow. With data lineage, users can trace data back to its original source, identify
    any data dependencies, and ensure that the data is accurate and reliable.'
  prefs: []
  type: TYPE_NORMAL
- en: '**A data catalog** refers to a centralized repository of metadata that describes
    the data assets in an organization. In Qlik Sense, a data catalog provides a way
    to discover, understand, and collaborate on data assets. With a data catalog,
    users can search for data assets, view metadata and lineage information, and collaborate
    with others on the data. The data catalog also helps to ensure that data is properly
    governed, by providing a single source of truth for data definitions, data quality
    rules, and other important metadata.'
  prefs: []
  type: TYPE_NORMAL
- en: Together, data lineage and data catalogs provide a comprehensive view of an
    organization’s data assets, from its origin to its usage, enabling users to better
    understand and govern their data, and make informed decisions based on reliable
    information.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s take a closer look into both features next.
  prefs: []
  type: TYPE_NORMAL
- en: Data lineage
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The data lineage feature can be found under the application options (the three
    dots on the right side of the application tile) in Qlik Cloud tenant. The following
    figure shows the **Lineage** option highlighted:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.17: Qlik’s Lineage function under application options](img/B19863_06_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.17: Qlik’s Lineage function under application options'
  prefs: []
  type: TYPE_NORMAL
- en: 'After selecting **Lineage**, a new view visualizing the whole lineage path
    for the selected application will open. An example of that view is visible in
    the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.18: Data lineage view](img/B19863_06_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.18: Data lineage view'
  prefs: []
  type: TYPE_NORMAL
- en: 'The lineage view will show us how the data flows from the source systems into
    our end-user application. In this case our source system is an Azure SQL server,
    and we have a Qlik application called **QVD Generator** that will produce QVD
    files and store them in Qlik Cloud. These QVD files and files from other folders
    in our cloud environment are then used as base data for our end-user application,
    called **Wide World Importers**. It is also possible to view lineage at the table
    level. The following figure represents the lineage view for the **Countries**
    table found in our end-user application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.19: Data lineage for a single table in an end-user application](img/B19863_06_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.19: Data lineage for a single table in an end-user application'
  prefs: []
  type: TYPE_NORMAL
- en: From this view we can easily verify what data is combined into the **Countries**
    table and where that data originated from.
  prefs: []
  type: TYPE_NORMAL
- en: Data lineage is a powerful tool for investigating the source and transformations
    of the data, and it is useful when working with data. It has a lot of features,
    and we only covered the most basic use case here. If you are interested in finding
    out more, there are a lot of materials available in Qlik Cloud’s help pages.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will take a closer look at data catalogs and how to investigate individual
    data objects in more detail.
  prefs: []
  type: TYPE_NORMAL
- en: Data catalogs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We already discovered some of the data validation features of data catalogs
    in this chapter. Let’s take a closer look at some of the other aspects of data
    catalogs next. We will start by opening the `Sales Multi Table.xlsx` file in Qlik
    Cloud. Once you have uploaded the file into the cloud, you should see the following
    tile:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.20: The Sales Multi Table.xlsx dataset tile](img/B19863_06_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.20: The Sales Multi Table.xlsx dataset tile'
  prefs: []
  type: TYPE_NORMAL
- en: 'Select **Open dataset** and you will end up in the data catalog. Your view
    should look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.21: The data catalog’s front page](img/B19863_06_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.21: The data catalog’s front page'
  prefs: []
  type: TYPE_NORMAL
- en: 'The data catalog contains the following sections:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Metadata**: This is general metadata about the file. This section will tell
    when the data is uploaded, where it is used, and who owns it. It will also give
    insights into the popularity of the dataset and the structure of the data.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Classifications**: If any of the field is classified to personal information,
    sensitive or any other tag, this information can be seen here. If data is classified,
    we should be extremely careful when utilizing it. We can also set classifications
    on the dataset level using this section.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Fields**: This section will give us an overview of the fields and the data
    in each field. This was already covered in more detail in the data validation
    section of this chapter.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, we can take a closer look at classifications. Let’s move to the **Fields**
    tab and select the **Employees** entity. Under that we can select the **Salary**
    field. We should see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.22: Data classification in the catalog](img/B19863_06_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.22: Data classification in the catalog'
  prefs: []
  type: TYPE_NORMAL
- en: In the data classification view, we can give aliases to each field and provide
    them with a description. We can also tag individual fields and tell whether they
    contain personal or sensitive information. Augmenting information with tags and
    descriptions is important since many people in your organization might not be
    familiar with the data. Providing this information can also help us when creating
    a machine learning solution since we can get a better understanding of the data
    if additional information is provided.
  prefs: []
  type: TYPE_NORMAL
- en: The data catalog will help us to get familiar with the data and build a good
    collection of datasets. Next, we will take a closer look into Insight Advisor
    and how it can help us to get familiar with data and create visualizations easily.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring data and finding insights
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Qlik Insight Advisor is a feature in Qlik Sense that uses natural language processing
    and artificial intelligence to help users explore data and discover insights.
    By using Qlik Insight Advisor, you can leverage the power of natural language
    processing and AI to explore your data, ask questions, and discover meaningful
    insights.
  prefs: []
  type: TYPE_NORMAL
- en: In [*Chapter 1*](B19863_01.xhtml#_idTextAnchor014), we already learned some
    of the basics of Insight Advisor. It is also possible to explore data and find
    insights using Qlik objects and visualizations without the augmented intelligence
    features. We will take a closer look at how to create visualizations this way
    in a later section of this book. In this section, we will discover how Insight
    Advisor will help us to get meaningful insights out of the data.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will begin by using the `Sales Multi Table.xlsx` file as our source data.
    We already created a data model on top of that dataset earlier in this chapter
    and loaded the data into an associative engine. After the data load is ready,
    we can select **Go to Sheet** and see the following three options:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.23: Options to discover data in the new application](img/B19863_06_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.23: Options to discover data in the new application'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this case, we will select **Explore the data**. This will launch Insight
    Advisor and the following view should appear:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.24: Insight Advisor](img/B19863_06_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.24: Insight Advisor'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this figure, we can see four different sections:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Data exploration**: This segment contains all the fields in our source data
    and all the master items (if we have created these) in our applicatio.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Natural language input**: This input field allows us to ask natural language
    questions from Insight Advisor'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Options**: This section will guide us to use different analysis types supported
    by Insight Advisor'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Analysis types**: This section will give us shortcuts to different analysis
    types'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let’s start our data explorations by picking a field from a list in section
    one. We can select for example, the field called **Country**. The following view
    will appear giving us information about the data in the **Country** field:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.25: Insight Advisor – field information](img/B19863_06_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.25: Insight Advisor – field information'
  prefs: []
  type: TYPE_NORMAL
- en: This view will show us the number of different countries as a KPI, a table showing
    all the countries by name, and a map showing the actual areas. We can return to
    the previous view by selecting **Cancel**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will investigate guided analysis types. Let’s start by selecting **Ranking**
    from the analysis type section. We should see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.26: Insight Advisor – ranking](img/B19863_06_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.26: Insight Advisor – ranking'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this view, we can select the measure and dimension to be used in our ranking
    graphs. Let’s select **Sales** as a measure and **SalesOffice** as a dimension.
    This will give us our sales offices ranked by sales. We can see that Insight Advisor
    is using sum as an aggregator for the **Sales** field. This is correct in this
    case, but it can be modified if needed. Now we should see the following view:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.27: Insight Advisor – ranking results](img/B19863_06_27.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.27: Insight Advisor – ranking results'
  prefs: []
  type: TYPE_NORMAL
- en: We can see that Insight Advisor generated a bar chart representing the total
    sales of each sales office for us. It also provided us with some additional information
    about the total sales and the best-performing sales offices. There are also alternative
    representations of the same data available.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can add the bar chart to our sheet for further analysis, but it already
    tells us some important facts about the data. Next, we will investigate one of
    the more complex analyses. We can return to the previous view by selecting **Cancel**
    and select **Create an analysis**. The following screen showing all the available
    analysis types should appear:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.28: Insight Advisor – analysis types](img/B19863_06_28.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.28: Insight Advisor – analysis types'
  prefs: []
  type: TYPE_NORMAL
- en: 'From this list of analysis types, we will next investigate clustering. Select
    **Clustering (k-means)** from the list. Next, select the sum of **Sales** and
    the average of **Discount** as a measure and **ProductName** as a dimension. The
    following screen will appear:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.29: Insight Advisor – clustering](img/B19863_06_29.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.29: Insight Advisor – clustering'
  prefs: []
  type: TYPE_NORMAL
- en: As we can see, there are five different groups of products recognized based
    on their total sales and average discounts. This will help us investigate our
    product sales more. We will also get additional information from Insight Advisor
    about the clusters. There are a lot of different analysis types supported and
    many are beneficial when exploring data for machine learning solutions. It is
    highly encouraged that you look at what all the analysis types do and what kind
    of results you can get.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will look at how the natural language input will work with Insight
    Advisor. We can first return to our base view by selecting **Cancel**. Now we
    can start typing an input into the field on top of the screen. Type the following
    query:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'As we type our query, we can see that Insight Advisor will suggest different
    fields. The query will return the following view:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.30: Insight Advisor – natural language query results](img/B19863_06_30.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.30: Insight Advisor – natural language query results'
  prefs: []
  type: TYPE_NORMAL
- en: As we can see, Insight Advisor produced various graphs. We got a treemap representing
    the sales of each product category by country and map, a Pareto chart and a bar
    chart as alternative results. We also got some insights in written form.
  prefs: []
  type: TYPE_NORMAL
- en: Insight Advisor is a powerful tool to discover data and create visualizations.
    In this section, we touched on the basics of it. A lot more information can be
    found in Qlik’s help pages. A good way to learn to use them is by playing around
    with some simple datasets.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we first got some hands-on experience with Qlik’s data manager
    and learned how to create data models using it. We also learned how to create
    calculated fields and investigate data. Creating a good data model and modifying
    data to be suitable for machine learning is the key to success.
  prefs: []
  type: TYPE_NORMAL
- en: We also discovered some of the basics of Qlik scripting and how that can be
    used to perform data transformations. We discovered some of the important functions
    and features of Qlik script. Scripting is an alternative way to create a data
    model and manipulate data. It is a powerful tool and can be also combined with
    modeling created in the data manager.
  prefs: []
  type: TYPE_NORMAL
- en: In a later part of the chapter, we learned some methods of validating and investigating
    the data. We familiarized ourselves with the data catalog and data lineage views
    and learned to utilize them in data validation. Data validation is a key step
    in any machine learning or data analytics project, and it is important to understand
    the data before creating solutions on top of it.
  prefs: []
  type: TYPE_NORMAL
- en: The last part of this chapter taught us how to use Insight Advisor for data
    discovery. Insight Advisor is a powerful tool for conducting analysis using augmented
    intelligence and mastering it will help us get familiar with data faster.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will continue our hands-on journey and learn how to
    deploy and monitor machine learning models in both on-premises and cloud environments.
    This will create a good background for the last chapters of this book, where we
    will implement some more advanced models.
  prefs: []
  type: TYPE_NORMAL
