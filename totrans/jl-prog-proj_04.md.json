["```py\nCascadia@v0.4.0\nGumbo@v0.5.1\nHTTP@v0.7.1\nIJulia@v1.14.1\nJSON@v0.20.0\nMySQL@v0.7.0\n```", "```py\npkg> add PackageName@vX.Y.Z \n\n```", "```py\npkg> add IJulia@v1.14.1\n```", "```py\njulia> download(\"https://raw.githubusercontent.com/PacktPublishing/Julia-Programming-Projects/master/Chapter04/Project.toml\", \"Project.toml\")\npkg> activate . \npkg> instantiate\n```", "```py\nmodule MyModule \n# code here \nend\n```", "```py\njulia> rand \nrand (generic function with 56 methods) \n```", "```py\njulia> function rand() \n           # code here \n       end \nerror in method definition: function Base.rand must be explicitly imported to be extended \n```", "```py\njulia> module MyModule \n\n      function rand() \n           println(\"I'll get a random Wikipedia page\") \n      end \n\n      end \nMain.MyModule \nMyModuleâ€”and within it, a function called rand. Here, MyModule effectively encapsulates the rand function, which no longer clashes with Julia's Base.rand.\n```", "```py\njulia> MyModule.rand() \nI'll get a random wikipedia page \n```", "```py\nshell> mkdir modules # create a new dir called \"modules\" \nshell> cd modules # switch to the \"modules\" directory \n```", "```py\njulia> for f in [\"Letters.jl\", \"Numbers.jl\", \"module_name.jl\"] \n           touch(f) \n       end \n```", "```py\njulia> readdir() \n3-element Array{String,1}: \n \"Letters.jl\" \n \"Numbers.jl\" \n \"module_name.jl\" \n```", "```py\nLetters.jl in whatever default editor you have configured:\n```", "```py\njulia> edit(\"Letters.jl\")  \n```", "```py\nshell> which atom \n/usr/local/bin/atom \n```", "```py\njulia> ENV[\"JULIA_EDITOR\"] = \"/usr/local/bin/atom\" \n```", "```py\nmodule Letters \n\nusing Random \n\nexport randstring \n\nconst MY_NAME = \"Letters\" \n\nfunction rand() \n  Random.rand('A':'Z') \nend \n\nfunction randstring() \n  [rand() for _ in 1:10] |> join \nend \n\ninclude(\"module_name.jl\") \n\nend \n```", "```py\nmodule Numbers \n\nusing Random\n\nexport halfrand\n\nconst MY_NAME = \"Numbers\"\n\nfunction rand() \n  Random.rand(1:1_000) \nend\nfunction halfrand() \n  floor(rand() / 2) \nend\n\ninclude(\"module_name.jl\")\nend \n```", "```py\nfunction myname() \n  MY_NAME \nend \n```", "```py\nsomevar = 10\n```", "```py\njulia> function testinclude() \n             include(\"testinclude.jl\") \n             println(somevar) \n       end \n\njulia> testinclude() \n10 \n```", "```py\njulia> somevar \n10 \n```", "```py\njulia> using Letters \nERROR: ArgumentError: Package Letters not found in current path: \n- Run `Pkg.add(\"Letters\")` to install the Letters package. \n```", "```py\njulia> push!(LOAD_PATH, \"modules/\") \n4-element Array{String,1}: \n \"@\" \n \"@v#.#\" \n \"@stdlib\" \n \"modules/\" \n```", "```py\njulia> using Letters \n```", "```py\njulia> randstring() # has been exported and is directly accessible \n\"TCNXFLUOUU\" \njulia> myname() # has not been exported so it's not available in the REPLERROR: UndefVarError: myname not defined\n julia> Letters.myname() # but we can access it under the Letters namespace \n\"Letters\"\n julia> Letters.rand() # does not conflict with Base.rand \n'L': ASCII/Unicode U+004c (category Lu: Letter, uppercase) \n```", "```py\njulia> names(Letters) \n2-element Array{Symbol,1}: \n :Letters \n :randstring \n```", "```py\njulia> names(Letters, all = true) \n11-element Array{Symbol,1}: \n # output truncated \n :Letters \n :MY_NAME \n :eval \n :myname \n :rand \n :randstring \n```", "```py\njulia> using Letters: myname\njulia> myname() # we no longer need to \"dot into\" Letters.myname() \n\"Letters\" \n```", "```py\njulia> using Letters: myname, MY_NAME \n```", "```py\njulia> import Numbers\njulia> names(Numbers) \n2-element Array{Symbol,1}: \n :Numbers \n :halfrand\njulia> halfrand() \nERROR: UndefVarError: halfrand not defined \n```", "```py\njulia> import Numbers.halfrand, Numbers.MY_NAME \n```", "```py\njulia> import Numbers: halfrand, MY_NAME \n\njulia> halfrand() \n271.0 \n```", "```py\njulia> include(\"modules/Letters.jl\") \nMain.Letters \n```", "```py\njulia> randstring() \nERROR: UndefVarError: randstring not defined \n```", "```py\njulia> using Letters \nERROR: ArgumentError: Package Letters not found in current path: \n- Run `Pkg.add(\"Letters\")` to install the Letters package.\n```", "```py\njulia> using Main.Letters \n\njulia> randstring() \n\"QUPCDZKSAH\" \n```", "```py\njulia> using .Letters \n```", "```py\njulia> using .Letters \n\njulia> Letters.Numbers.halfrand() \n432.5 \n```", "```py\njulia> mkdir(\"sixdegrees\") \n\"sixdegrees\" \n\njulia> cd(\"sixdegrees/\") \n\njulia> ] # go into pkg mode \n\n(v1.0) pkg> activate . \n\n(sixdegrees) pkg> \n```", "```py\n(sixdegrees) pkg> add HTTP Gumbo \n```", "```py\nmodule Wikipedia\nusing HTTP, Gumbo \n\nconst RANDOM_PAGE_URL = \"https://en.m.wikipedia.org/wiki/Special:Random\" \n\nexport fetchrandom, fetchpage, articlelinks \n\nfunction fetchpage(url) \n  response = HTTP.get(url) \n  if response.status == 200 && length(response.body) > 0 \n    String(response.body) \n  else \n    \"\" \n  end \nend \n\nfunction extractlinks(elem, links = String[]) \n  if  isa(elem, HTMLElement) && tag(elem) == :a && in(\"href\", collect(keys(attrs(elem)))) \n        url = getattr(elem, \"href\") \n        startswith(url, \"/wiki/\") && ! occursin(\":\", url) && push!(links, url) \n  end \n  for child in children(elem) \n    extractlinks(child, links) \n  end \n  unique(links) \nend \n\nfunction fetchrandom() \n  fetchpage(RANDOM_PAGE_URL) \nend \n\nfunction articlelinks(content) \n  if ! isempty(content) \n    dom = Gumbo.parsehtml(content) \n\n    links = extractlinks(dom.root) \n  end \nend\n\nend\n```", "```py\nusing Pkg \npkg\"activate .\" \n\ninclude(\"Wikipedia.jl\") \nusing .Wikipedia \n\nfetchrandom() |> articlelinks |> display \n```", "```py\njulia> include(\"six_degrees.jl\") \n21-element Array{String,1}: \n \"/wiki/Main_Page\" \n \"/wiki/Arena\" \n \"/wiki/Saskatoon,_Saskatchewan\" \n \"/wiki/South_Saskatchewan_River\" \n \"/wiki/New_York_Rangers\" \n# ... output omitted ... #\nArray{String,1} with entries that start with /wiki/.\n```", "```py\n(sixdegrees) pkg> add Cascadia\n```", "```py\nusing HTTP, Gumbo, Cascadia\n```", "```py\nfunction extractlinks(elem) \n  map(eachmatch(Selector(\"a[href^='/wiki/']:not(a[href*=':'])\"), elem)) do e \n    e.attributes[\"href\"] \n  end |> unique \nend \n```", "```py\nmap(f, c...) -> collection  \nmap function, it's true. But it is, in fact, the exact same function invocation, except with a more readable syntax, provided by Julia's blocks.\n```", "```py\njulia> double(x) = x*2 \ndouble (generic function with 1 method) \n\njulia> map(double, [1, 2, 3, 5, 8, 13]) \n6-element Array{Int64,1}: \n  2 \n  4 \n  6 \n 10 \n 16 \n 26 \ndouble function as the argument of the higher-order function map. As a result, we got back the Vector, which was passed as the second argument, but with all the elements doubled.\n```", "```py\njulia> map(x -> x*2, [1, 2, 3, 5, 8, 13]) \n6-element Array{Int64,1}: \n  2 \n  4 \n  6 \n 10 \n 16 \n 26\n```", "```py\njulia> map(x -> \n           if x % 2 == 0 \n                  x * 2 \n           elseif x % 3 == 0 \n                  x * 3 \n           elseif x % 5 == 0 \n                  x * 5 \n           else \n                  x \n           end,  \n      [1, 2, 3, 5, 8, 13]) \n```", "```py\nmap([1, 2, 3, 5, 8, 13]) do x \n       if x % 2 == 0 \n              x * 2 \n       elseif x % 3 == 0 \n              x * 3 \n       elseif x % 5 == 0 \n              x * 5 \n        else \n              x \n        end \n end \n```", "```py\nmodule Gameplay \n\nusing ..Wikipedia \n\nexport newgame \n\nconst DIFFICULTY_EASY = 2 \nconst DIFFICULTY_MEDIUM = 4 \nconst DIFFICULTY_HARD = 6 \n\nfunction newgame(difficulty = DIFFICULTY_HARD) \n  articles = [] \n\n  for i in 1:difficulty \n    article = if i == 1 \n      fetchrandom() \n    else \n      rand(articles[i-1][:links]) |> Wikipedia.fetchpage \n    end \n\narticle_data = Dict(:content => article, \n  :links => articlelinks(article)) \n    push!(articles, article_data) \n  end \n\n  articles \nend \n\nend \n```", "```py\nconst PROTOCOL = \"https://\" \nconst DOMAIN_NAME = \"en.m.wikipedia.org\" \nconst RANDOM_PAGE_URL = PROTOCOL * DOMAIN_NAME * \"/wiki/Special:Random\" \n```", "```py\nurl = startswith(url, \"/\") ? PROTOCOL * DOMAIN_NAME * url : url \n```", "```py\nfunction buildurl(article_url) \n    PROTOCOL * DOMAIN_NAME * article_url \nend \n```", "```py\nmodule Wikipedia \n\nusing HTTP, Gumbo, Cascadia \n\nconst PROTOCOL = \"https://\" \nconst DOMAIN_NAME = \"en.m.wikipedia.org\" \nconst RANDOM_PAGE_URL = PROTOCOL * DOMAIN_NAME * \"/wiki/Special:Random\" \n\nexport fetchrandom, fetchpage, articlelinks \n\nfunction fetchpage(url) \n  url = startswith(url, \"/\") ? buildurl(url) : url \n  response = HTTP.get(url) \n\n  if response.status == 200 && length(response.body) > 0 \n    String(response.body) \n  else  \n    \"\" \n  end \nend \n\nfunction extractlinks(elem) \n  map(eachmatch(Selector(\"a[href^='/wiki/']:not(a[href*=':'])\"), elem)) do e \n    e.attributes[\"href\"] \n  end |> unique \nend \n\nfunction fetchrandom() \n  fetchpage(RANDOM_PAGE_URL) \nend \n\nfunction articlelinks(content) \n  if ! isempty(content) \n    dom = Gumbo.parsehtml(content) \n\n    links = extractlinks(dom.root) \n  end \nend \n\nfunction buildurl(article_url) \n  PROTOCOL * DOMAIN_NAME * article_url \nend \n\nend \n```", "```py\nimport Cascadia: matchFirst \n\nfunction extracttitle(elem) \n  matchFirst(Selector(\"#section_0\"), elem) |> nodeText \nend \n\nfunction extractimage(elem) \n  e = matchFirst(Selector(\".content a.image img\"), elem) \n  isa(e, Void) ? \"\" : e.attributes[\"src\"] \nend \n```", "```py\nfunction newgame(difficulty = DIFFICULTY_HARD) \n  articles = [] \n\n  for i in 1:difficulty  \n    article = if i == 1 \n                fetchrandom() \n              else  \n                rand(articles[i-1][:links]) |> Wikipedia.fetchpage \n              end \n    push!(articles, articleinfo(article)) \n  end \n\n  articles \nend \n```", "```py\nmodule Wikipedia \n\nusing HTTP, Gumbo, Cascadia \nimport Cascadia: matchFirst \n\nconst PROTOCOL = \"https://\" \nconst DOMAIN_NAME = \"en.m.wikipedia.org\" \nconst RANDOM_PAGE_URL = PROTOCOL * DOMAIN_NAME * \"/wiki/Special:Random\" \n\nexport fetchrandom, fetchpage, articleinfo \n\nfunction fetchpage(url) \n  url = startswith(url, \"/\") ? buildurl(url) : url \n\n  response = HTTP.get(url) \n\n  if response.status == 200 && length(response.body) > 0 \n    String(response.body) \n  else  \n    \"\" \n  end \nend \n\nfunction extractlinks(elem) \n  map(eachmatch(Selector(\"a[href^='/wiki/']:not(a[href*=':'])\"), elem)) do e \n    e.attributes[\"href\"] \n  end |> unique \nend \n\nfunction extracttitle(elem) \n  matchFirst(Selector(\"#section_0\"), elem) |> nodeText \nend \n\nfunction extractimage(elem) \n  e = matchFirst(Selector(\".content a.image img\"), elem) \n  isa(e, Nothing) ? \"\" : e.attributes[\"src\"] \nend \n\nfunction fetchrandom() \n  fetchpage(RANDOM_PAGE_URL) \nend \n\nfunction articledom(content) \n  if ! isempty(content) \n    return Gumbo.parsehtml(content) \n  end \n\n  error(\"Article content can not be parsed into DOM\") \nend \n\nfunction articleinfo(content) \n  dom = articledom(content) \n\n  Dict( :content => content,  \n        :links => extractlinks(dom.root),  \n        :title => extracttitle(dom.root),  \n        :image => extractimage(dom.root) \n  ) \nend \n\nfunction buildurl(article_url) \n  PROTOCOL * DOMAIN_NAME * article_url \nend \n\nend \n```", "```py\nusing Pkg \npkg\"activate .\" \n\ninclude(\"Wikipedia.jl\") \ninclude(\"Gameplay.jl\") \n\nusing .Wikipedia, .Gameplay \n\nfor article in newgame(Gameplay.DIFFICULTY_EASY) \n  println(article[:title]) \nend \n```", "```py\njulia> include(\"six_degrees.jl\") \nMiracle Bell \nIndie pop  \n```", "```py\njulia> include(\"six_degrees.jl\") \nJohn O'Brien (Australian politician) \nHarlaxton, Queensland \nBallard, Queensland \n```", "```py\nstruct Article \n    content \n    links \n    title \n    image \nend \n```", "```py\nstruct Article \n    content::String \n    links::Vector{String} \n    title::String \n    image::String \nend \n```", "```py\njulia> julia = Article( \n           \"Julia is a high-level dynamic programming language\", \n           [\"/wiki/Jeff_Bezanson\", \"/wiki/Stefan_Karpinski\",  \n            \"/wiki/Viral_B._Shah\", \"/wiki/Alan_Edelman\"], \n           \"Julia (programming language)\", \n           \"/220px-Julia_prog_language.svg.png\" \n       ) \nArticle(\"Julia is a high-level dynamic programming language\", [\"/wiki/Jeff_Bezanson\", \"/wiki/Stefan_Karpinski\", \"/wiki/Viral_B._Shah\", \"/wiki/Alan_Edelman\"], \"Julia (programming language)\", \"/220px-Julia_prog_language.svg.png\") \n```", "```py\njulia> julia.title \n\"Julia (programming language)\" \n```", "```py\njulia> julia.title = \"The best programming language, period\" \nERROR: type Article is immutable \n```", "```py\njulia> push!(julia.links, \"/wiki/Multiple_dispatch\") \n5-element Array{String,1}: \n \"/wiki/Jeff_Bezanson\" \n \"/wiki/Stefan_Karpinski\" \n \"/wiki/Viral_B._Shah\" \n \"/wiki/Alan_Edelman\" \n \"/wiki/Multiple_dispatch\" \n```", "```py\njulia> julia.links = [1, 2, 3] \nMethodError: Cannot `convert` an object of type Int64 to an object of type String \n```", "```py\njulia> mutable struct Player \n           username::String \n           score::Int \n       end \n```", "```py\njulia> me = Player(\"adrian\", 0) \nPlayer(\"adrian\", 0) \n\njulia> me.score += 10 \n10 \n\njulia> me \nPlayer(\"adrian\", 10) \n```", "```py\njulia> abstract type Person end \n```", "```py\njulia> abstract type Mammal end \njulia> abstract type Person <: Mammal end \njulia> mutable struct Player <: Person \n           username::String \n           score::Int \n       end \n```", "```py\nabstract type Number end \nabstract type Real     <: Number end \nabstract type AbstractFloat <: Real end \nabstract type Integer  <: Real end \nabstract type Signed   <: Integer end \nabstract type Unsigned <: Integer end \n```", "```py\njulia> struct User <: Person \n           username::String \n           password::String \n       end \n\njulia> sam = User(\"sam\", \"password\") \nUser(\"sam\", \"password\") \n\njulia> function getusername(p::Person) \n           p.username \n      end \n\njulia> getusername(me) \n\"adrian\" \n\njulia> getusername(sam) \n\"sam\" \n\njulia> getusername(julia) \nERROR: MethodError: no method matching getusername(::Article) \nClosest candidates are: \n  getusername(::Person) at REPL[25]:2 \n```", "```py\njulia> GameEntity = Union{Person,Article} \nUnion{Article, Person} \n```", "```py\njulia> function entityname(e::GameEntity) \n           isa(e, Person) ? e.username : e.title \n       end \nentityname (generic function with 1 method) \n\njulia> entityname(julia) \n\"Julia (programming language)\" \n\njulia> entityname(me) \n\"adrian\" \n```", "```py\nmodule Articles \n\nexport Article \n\nstruct Article \n  content::String \n  links::Vector{String} \n  title::String \n  image::String \nend \n\nend \n```", "```py\ninclude(\"Articles.jl\") \nusing .Articles \n```", "```py\nfunction articleinfo(content) \n  dom = articledom(content) \n  Article(content,  \n          extractlinks(dom.root),  \n          extracttitle(dom.root),  \n          extractimage(dom.root)) \nend \n```", "```py\nmodule Gameplay \n\nusing ..Wikipedia, ..Wikipedia.Articles \n\nexport newgame \n\nconst DIFFICULTY_EASY = 2 \nconst DIFFICULTY_MEDIUM = 4 \nconst DIFFICULTY_HARD = 6 \n\nfunction newgame(difficulty = DIFFICULTY_HARD) \n  articles = Article[] \n\n  for i in 1:difficulty+1 \n    article = if i == 1 \n                fetchrandom() \n              else  \n                rand(articles[i-1].links) |> fetchpage \n              end \n    push!(articles, articleinfo(article)) \n  end \n\n  articles \nend \n\nend \n```", "```py\nusing Pkg \npkg\"activate .\" \n\ninclude(\"Wikipedia.jl\") \ninclude(\"Gameplay.jl\") \n\nusing .Wikipedia, .Gameplay \n\narticles = newgame(Gameplay.DIFFICULTY_EASY) \n\nfor article in articles \n  println(article.title) \nend \n```", "```py\njulia> include(\"six_degrees.jl\") \nSonpur Bazari \nBengali language \nDiacritic \n```", "```py\nArticle(; content = \"\", links = String[], title = \"\", image = \"\") = new(content, links, title, image) \n```", "```py\njulia = Article( \n          title = \"Julia (programming language)\", \n          content = \"Julia is a high-level dynamic programming language\", \n          links = [\"/wiki/Jeff_Bezanson\", \"/wiki/Stefan_Karpinski\",  \n                  \"/wiki/Viral_B._Shah\", \"/wiki/Alan_Edelman\"], \n          image = \"/220px-Julia_prog_language.svg.png\" \n        ) \n```", "```py\nArticle(content, links, title, image) = new(content, links, title, image) \n```", "```py\nmodule Articles \n\nexport Article \n\nstruct Article \n  content::String \n  links::Vector{String} \n  title::String \n  image::String \n\n  Article(; content = \"\", links = String[], title = \"\", image = \"\") = new(content, links, title, image) \n  Article(content, links, title, image) = new(content, links, title, image) end \n\nend \n```", "```py\njulia> mutable struct Player \n           username::String \n           score::Int \n       end \n```", "```py\njulia> function getscore(p) \n           p.score \n       end \ngetscore (generic function with 1 method) \n```", "```py\njulia> mutable struct Customer \n           name::String \n           total_purchase_value::Float64 \n           credit_score::Float64 \n       end \n```", "```py\njulia> function getscore(c) \n           c.credit_score \n      end \ngetscore (generic function with 1 method) \n```", "```py\njulia> function getscore(p::Player) \n           p.score \n       end \ngetscore (generic function with 1 method) \n\njulia> function getscore(c::Customer) \n           c.credit_score \n       end \ngetscore (generic function with 2 methods) \n```", "```py\njulia> function getscore(t::Union{Player,Customer}) \n           isa(t, Player) ? t.score : t.credit_score \n       end \ngetscore (generic function with 3 methods) \n```", "```py\njulia> function getscore(s) \n            if in(:score, fieldnames(typeof(s))) \n            s.score \n       elseif in(:credit_score, fieldnames(typeof(s))) \n            s.credit_score \n       else \n            error(\"$(typeof(s)) does not have a score property\") \n       end \nend \ngetscore (generic function with 4 methods) \n```", "```py\njulia> me = Player(\"adrian\", 10) \nPlayer(\"adrian\", 10) \n\njulia> @which getscore(me) \ngetscore(p::Player) in Main at REPL[58]:2\n```", "```py\njulia> sam = Customer(\"Sam\", 72.95, 100) \nCustomer(\"Sam\", 72.95, 100.0) \n\njulia> @which getscore(sam) \ngetscore(c::Customer) in Main at REPL[59]:2 \n```", "```py\njulia> @which getscore(julia) \ngetscore(s) in Main at REPL[61]:2 \n```", "```py\njulia> getscore(julia) \nERROR: Article does not have a score property \n```", "```py\njulia> methods(getscore) \n# 4 methods for generic function \"get_score\": \ngetscore(c::Customer) in Main at REPL[59]:2 \ngetscore(p::Player) in Main at REPL[58]:2 \ngetscore(t::Union{Customer, Player}) in Main at REPL[60]:2 \ngetscore(s) in Main at REPL[61]:2 \n```", "```py\nmodule Database \n\nusing MySQL \n\nconst HOST = \"localhost\" \nconst USER = \"root\" \nconst PASS = \"\" \nconst DB = \"six_degrees\" \n\nconst CONN = MySQL.connect(HOST, USER, PASS, db = DB) \n\nexport CONN \n\ndisconnect() = MySQL.disconnect(CONN) \n\natexit(disconnect) \n\nend \nHOST, USER, and PASS constants with your correct MySQL connection info. Also, please don't forget to create a new, empty database called six_degreesâ€”otherwise the connection will fail. I suggest using utf8 for the encoding and utf8_general_ci for the collation, in order to accommodate all the possible characters we might get from Wikipedia.\n```", "```py\njulia> Main.Database.CONN \nMySQL Connection \n------------ \nHost: localhost \nPort: 3306 \nUser: root \nDB:   six_degrees \n```", "```py\nfunction createtable() \n  sql = \"\"\" \n    CREATE TABLE `articles` ( \n      `title` varchar(1000), \n      `content` text, \n      `links` text, \n      `image` varchar(500), \n      `url` varchar(500), \n      UNIQUE KEY `url` (`url`) \n    ) ENGINE=InnoDB DEFAULT CHARSET=utf8 \n  \"\"\" \n\n  MySQL.execute!(CONN, sql) \nend \n```", "```py\njulia> using Pkg \njulia> pkg\"activate .\" \njulia> include(\"Database.jl\") \njulia> include(\"Articles.jl\") \njulia> using .Articles \njulia> Articles.createtable() \n```", "```py\nfunction save(a::Article) \n  sql = \"INSERT IGNORE INTO articles (title, content, links, image, url) VALUES (?, ?, ?, ?, ?)\" \n  stmt = MySQL.Stmt(CONN, sql) \n  result = MySQL.execute!(stmt, [a.title, a.content, JSON.json(a.links), a.image, a.url]) \nend \n```", "```py\nfunction find(url) :: Vector{Article} \n  articles = Article[] \n\n  result = MySQL.query(CONN, \"SELECT * FROM `articles` WHERE url = '$url'\") \n\n  isempty(result.url) && return articles \n\n  for i in eachindex(result.url) \n    push!(articles, Article(result.content[i], JSON.parse(result.links[i]), result.title[i], \n                            result.image[i], result.url[i])) \n  end \n\n  articles \nend \n```", "```py\nmodule Articles \n\nexport Article, save, find \n\nusing ...Database, MySQL, JSON \n\nstruct Article \n  content::String \n  links::Vector{String} \n  title::String \n  image::String \n  url::String \n\n  Article(; content = \"\", links = String[], title = \"\", image = \"\", url = \"\") = \n        new(content, links, title, image, url) \n  Article(content, links, title, image, url) = new(content, links, title, image, url) \nend \n\nfunction find(url) :: Vector{Article} \n  articles = Article[] \n\n  result = MySQL.query(CONN, \"SELECT * FROM `articles` WHERE url = '$url'\") \n\n  isempty(result.url) && return articles \n\n  for i in eachindex(result.url) \n    push!(articles, Article(result.content[i], JSON.parse(result.links[i]), result.title[i], \n                            result.image[i], result.url[i])) \n  end \n\n  articles \nend \n\nfunction save(a::Article) \n  sql = \"INSERT IGNORE INTO articles (title, content, links, image, url) VALUES (?, ?, ?, ?, ?)\" \n  stmt = MySQL.Stmt(CONN, sql) \n  result = MySQL.execute!(stmt, [ a.title, a.content, JSON.json(a.links), a.image, a.url]) \nend \n\nfunction createtable() \n  sql = \"\"\" \n    CREATE TABLE `articles` ( \n      `title` varchar(1000), \n      `content` text, \n      `links` text, \n      `image` varchar(500), \n      `url` varchar(500), \n      UNIQUE KEY `url` (`url`) \n    ) ENGINE=InnoDB DEFAULT CHARSET=utf8 \n  \"\"\" \n\n  MySQL.execute!(CONN, sql) \nend \n\nend  \n```", "```py\nfunction articleinfo(content) \n  dom = articledom(content) \n  (content, extractlinks(dom.root), extracttitle(dom.root), extractimage(dom.root)) \nend \n```", "```py\nfunction persistedarticle(article_content, url) \n  article = Article(articleinfo(article_content)..., url) \n  save(article) \n\n  article \nend \n```", "```py\nfunction fetchpage(url) \n  url = startswith(url, \"/\") ? buildurl(url) : url \n  response = HTTP.get(url) \n  content = if response.status == 200 && length(response.body) > 0 \n              String(response.body) \n            else \n              \"\" \n            end \n  relative_url = collect(eachmatch(r\"/wiki/(.*)$\",  \n(response.request.parent == nothing ? url : Dict(response.request.parent.headers)[\"Location\"])))[1].match \n\n  content, relative_url \nend \n```", "```py\nmodule Wikipedia \nusing HTTP, Gumbo, Cascadia \nimport Cascadia: matchFirst \n\ninclude(\"Articles.jl\") \nusing .Articles \n\nconst PROTOCOL = \"https://\" \nconst DOMAIN_NAME = \"en.m.wikipedia.org\" \nconst RANDOM_PAGE_URL = PROTOCOL * DOMAIN_NAME * \"/wiki/Special:Random\" \n\nexport fetchrandom, fetchpage, articleinfo, persistedarticle \n\nfunction fetchpage(url) \n  url = startswith(url, \"/\") ? buildurl(url) : url \n  response = HTTP.get(url) \n  content = if response.status == 200 && length(response.body) > 0 \n              String(response.body) \n            else \n              \"\" \n            end \n  relative_url = collect(eachmatch(r\"/wiki/(.*)$\", (response.request.parent == nothing ? url : Dict(response.request.parent.headers)[\"Location\"])))[1].match \n\n  content, relative_url \nend \n\nfunction extractlinks(elem) \n  map(eachmatch(Selector(\"a[href^='/wiki/']:not(a[href*=':'])\"), elem)) do e \n    e.attributes[\"href\"] \n  end |> unique \nend \n\nfunction extracttitle(elem) \n  matchFirst(Selector(\"#section_0\"), elem) |> nodeText \nend \n\nfunction extractimage(elem) \n  e = matchFirst(Selector(\".content a.image img\"), elem) \n  isa(e, Nothing) ? \"\" : e.attributes[\"src\"] \nend \n\nfunction fetchrandom() \n  fetchpage(RANDOM_PAGE_URL) \nend \n\nfunction articledom(content) \n  if ! isempty(content) \n    return Gumbo.parsehtml(content) \n  end \n\n  error(\"Article content can not be parsed into DOM\") \nend \n\nfunction articleinfo(content) \n  dom = articledom(content) \n  (content, extractlinks(dom.root), extracttitle(dom.root), extractimage(dom.root)) \nend \n\nfunction persistedarticle(article_content, url) \n  article = Article(articleinfo(article_content)..., url) \n  save(article) \n\n  article \nend \n\nfunction buildurl(article_url) \n  PROTOCOL * DOMAIN_NAME * article_url \nend \n\nend \n\n```", "```py\nmodule Gameplay \n\nusing ..Wikipedia, ..Wikipedia.Articles \n\nexport newgame \n\nconst DIFFICULTY_EASY = 2 \nconst DIFFICULTY_MEDIUM = 4 \nconst DIFFICULTY_HARD = 6 \n\nfunction newgame(difficulty = DIFFICULTY_HARD) \n  articles = Article[] \n\n  for i in 1:difficulty+1 \n    article = if i == 1 \n                article = persistedarticle(fetchrandom()...) \n              else \n                url = rand(articles[i-1].links) \n                existing_articles = Articles.find(url) \n\n                article = isempty(existing_articles) ? persistedarticle(fetchpage(url)...) : existing_articles[1] \n              end \n\n    push!(articles, article) \n  end \n\n  articles \nend \n\nend \n```", "```py\nusing Pkg \npkg\"activate .\" \n\ninclude(\"Database.jl\") \ninclude(\"Wikipedia.jl\") \ninclude(\"Gameplay.jl\") \n\nusing .Wikipedia, .Gameplay \n\narticles = newgame(Gameplay.DIFFICULTY_EASY) \n\nfor article in articles \n  println(article.title) \nend \n```", "```py\n$ julia six_degrees.jl                                                                                                                                                               \nHillary Maritim \nAthletics at the 2000 Summer Olympics - Men's 400 metres hurdles \nZahr-el-Din El-Najem \n```"]