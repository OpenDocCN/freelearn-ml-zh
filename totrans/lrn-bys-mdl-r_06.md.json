["```py\n>spamdata <-read.table(\"SMSSpamCollection.txt\",sep=\"\\t\",stringsAsFactors = default.stringsAsFactors())\n```", "```py\n>samp<-sample.int(nrow(spamdata),as.integer(nrow(spamdata)*0.2),replace=F)\n>spamTest <-spamdata[samp,]\n>spamTrain <-spamdata[-samp,]\n>ytrain<-as.factor(spamTrain[,1])\n>ytest<-as.factor(spamTest[,1])\n>xtrain<-as.vector(spamTrain[,2])\n>xtest<-as.vector(spamTest[,2])\n```", "```py\n>library(tm)\n>library(SnowballC)\n>xtrain <- VCorpus(VectorSource(xtrain))\n```", "```py\n>#remove extra white space\n>xtrain <- tm_map(xtrain,stripWhitespace)\n>#remove punctuation\n>xtrain <- tm_map(xtrain,removePunctuation)\n>#remove numbers\n>xtrain <- tm_map(xtrain,removeNumbers)\n>#changing to lower case\n>xtrain <- tm_map(xtrain,content_transformer(tolower))\n>#removing stop words\n>xtrain <- tm_map(xtrain,removeWords,stopwords(\"english\"))\n>#stemming the document\n>xtrain <- tm_map(xtrain,stemDocument)\n```", "```py\n>#creating Document-Term Matrix\n>xtrain <- as.data.frame.matrix(DocumentTermMatrix(xtrain))\n```", "```py\n>naiveBayes(formula,data,laplace=0,…,subset,na.action=na.pass)\n```", "```py\n>class ~ x1+x2+…   \n```", "```py\n>naiveBayes(x,y,laplace=0,…)\n```", "```py\n>predict(object,newdata,type=c(class,raw),threshold=0.001,eps=0,…)\n```", "```py\n>#Training the Naive Bayes Model\n>nbmodel <- naiveBayes(xtrain,ytrain,laplace=3)\n>#Prediction using trained model\n>ypred.nb <- predict(nbmodel,xtest,type = \"class\",threshold = 0.075)\n>#Converting classes to 0 and 1 for plotting ROC\n>fconvert <- function(x){\n     if(x == \"spam\"){ y <- 1}\n   else {y <- 0}\n   y\n}\n\n>ytest1 <- sapply(ytest,fconvert,simplify = \"array\")\n>ypred1 <- sapply(ypred.nb,fconvert,simplify = \"array\")\n>roc(ytest1,ypred1,plot = T)\n```", "```py\n>#Confusion matrix\n>confmat <- table(ytest,ypred.nb)\n>confmat\npred.nb\nytest  ham spam\n  ham  143  139\n  spam   9   35\n```", "```py\n>tab <- nbmodel$tables\n>fham <- function(x){\n  y <- x[1,1]\n  y\n}\n>hamvec <- sapply(tab,fham,simplify = \"array\")\n>hamvec <- sort(hamvec,decreasing = T)\n\n>fspam <- function(x){\n  y <- x[2,1]\n  y\n}\n>spamvec <- sapply(tab,fspam,simplify = \"array\")\n>spamvec <- sort(spamvec,decreasing = T)\n>prb <- cbind(spamvec,hamvec)\n>print.table(prb)\n```", "```py\n>logit(Y,X,n=rep(1,length(Y) ),m0=rep(0,ncol(X) ),P0=matrix(0,nrow=ncol(X),ncol=ncol(X) ),samp=1000,burn=500)\n```", "```py\n>#install.packages(\"BayesLogit\") #One time installation of package\n>library(BayesLogit)\n>PDdata <- read.table(\"parkinsons.csv\",sep=\",\",header=TRUE,row.names = 1)\n>rnames <- row.names(PDdata)\n>cnames <- colnames(PDdata,do.NULL = TRUE,prefix = \"col\")\n>colnames(PDdata)[17] <- \"y\"\n>PDdata$y <- as.factor(PDdata$y)\n\n>rnames.strip <- substr(rnames,10,12)\n>PDdata1 <- cbind(PDdata,rnames.strip)\n>rnames.unique <- unique(rnames.strip)\n>set.seed(123)\n>samp <- sample(rnames.unique,as.integer(length(rnames.unique)*0.2),replace=F)\n>PDtest <- PDdata1[PDdata1$rnames.strip %in% samp,-24]  # -24 to remove last column\n>PDtrain <- PDdata1[!(PDdata1$rnames.strip %in% samp),-24] # -24 to remove last column\n>xtrain <- PDtrain[,-17]\n>ytrain <- PDtrain[,17]\n>xtest <- PDtest[,-17]\n>ytest<- PDtest[,17]\n```", "```py\n>blmodel <- logit(ytrain,xtrain,n=rep(1,length(ytrain)),m0 = rep(0,ncol(xtrain)),P0 = matrix(0,nrow=ncol(xtrain),ncol=ncol(xtrain)),samp = 1000,burn = 500)\n```", "```py\n>summary(blmodel)\n```", "```py\n>psi <- blmodel$beta %*% t(xtrain)  # samp x n\n>p   <- exp(psi) / (1 + exp(psi) )  # samp x n\n>ypred.bayes <- colMeans(p)\n```", "```py\n>table(ypred.bayes,ytest)\n```", "```py\n>roc(ytrain,ypred.bayes,plot = T)\n```"]