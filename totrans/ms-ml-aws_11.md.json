["```py\ntraining_features = ['crim', 'zn', 'indus', 'chas', 'nox',             'rm', 'age', 'dis', 'tax', 'ptratio', 'lstat']\n\nlabel = 'medv'\n```", "```py\ntf_regressor = tf.estimator.LinearRegressor(\n    feature_columns=[tf.feature_column.numeric_column('inputs', \n                                  shape=(11,))])\n```", "```py\ntraining_df[training_features].as_matrix()\n```", "```py\ntraining_df[label].as_matrix()\n```", "```py\ntraining_input_fn = tf.estimator.inputs.numpy_input_fn(\n    x={'inputs': training_df[training_features].as_matrix()},\n    y=training_df[label].as_matrix(),\n    shuffle=False,\n    batch_size=1,\n    num_epochs=100,\n    queue_capacity=1000,\n    num_threads=1)\n```", "```py\ntest_input_fn = tf.estimator.inputs.numpy_input_fn(\n    x={'inputs': test_df[training_features].as_matrix()},\n    y=test_df[label].as_matrix(),\n    shuffle=False,\n    batch_size=1)\n```", "```py\ntf_regressor.train(input_fn=training_input_fn, steps=50000)\n```", "```py\nINFO:tensorflow:Loss for final step: 1.1741621.\n```", "```py\ntf_regressor.evaluate(input_fn=test_input_fn)\n```", "```py\n{'average_loss': 37.858795, 'label/mean': 22.91492, 'loss': 37.858795, 'prediction/mean': 21.380392, 'global_step': 26600}\n```", "```py\npredictions = tf_regressor.predict(input_fn=test_input_fn)\n```", "```py\npredicted_values = [prediction['predictions'][0] for prediction in predictions]\n\n```", "```py\npredicted_values[:5]\n```", "```py\n[22.076485, 23.075985, 17.803957, 20.629128, 28.749748]\n```", "```py\ntest_df['prediction'] = predicted_values\n```", "```py\ntest_df.plot(kind='scatter', x=label, y='prediction')\n```", "```py\nimport sagemaker\nfrom sagemaker import get_execution_role\nimport json\nimport boto3\nfrom sagemaker.tensorflow import TensorFlow\n\nsess = sagemaker.Session()\nrole = get_execution_role()\ntf_estimator = TensorFlow(entry_point='tf_train.py', role=role,\n                          train_instance_count=1,      train_instance_type='ml.m5.large',\n                          framework_version='1.12', py_version='py3')\ntf_estimator.fit('s3://mastering-ml-aws/chapter8/train-data/')\n```", "```py\nimport pandas as pd\nimport argparse\nimport os\nimport tensorflow as tf\n\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--epochs', type=int, default=100)\n    parser.add_argument('--batch_size', type=int, default=1)\n    parser.add_argument('--steps', type=int, default=12000)\n    parser.add_argument('--model_dir', type=str)\n    parser.add_argument('--local_model_dir', type=str,                                 \ndefault=os.environ.get('SM_MODEL_DIR'))\n    parser.add_argument('--train', type=str,       default=os.environ.get('SM_CHANNEL_TRAINING'))\n\n    args, _ = parser.parse_known_args()\n    housing_df = pd.read_csv(args.train + '/train.csv')\n    training_features = ['crim', 'zn', 'indus', 'chas', 'nox', \n                         'rm', 'age', 'dis', 'tax', 'ptratio', 'lstat']\n    label = 'medv'\n    tf_regressor = tf.estimator.LinearRegressor(\n        feature_columns=[tf.feature_column.numeric_column('inputs', \n                                  shape=(11,))])\n    training_input_fn = tf.estimator.inputs.numpy_input_fn(\n        x={'inputs': housing_df[training_features].as_matrix()},\n        y=housing_df[label].as_matrix(),\n        shuffle=False,\n        batch_size=args.batch_size,\n        num_epochs=args.epochs,\n        queue_capacity=1000,\n        num_threads=1)\n    tf_regressor.train(input_fn=training_input_fn, steps=args.steps)\n\n    def serving_input_fn():\n        feature_spec = tf.placeholder(tf.float32, shape=[1, 11])\n        return tf.estimator.export.build_parsing_serving_input_receiver_fn(\n                {'input': feature_spec})()\n\n    tf_regressor.export_savedmodel(export_dir_base=args.local_model_dir + '/export/Servo',\n                                   serving_input_receiver_fn=serving_input_fn)\n```", "```py\npredictor = tf_estimator.deploy(instance_type='ml.m5.large', initial_instance_count=1)\n```", "```py\nfeatures_vector = [0.00632, 18.0, 2.31, 0.0, 0.538, 6.575, 65.2, 4.09, 296.0, 15.3, 4.98]\n```", "```py\nmodel_input = tf.train.Example(features=tf.train.Features(\n\n    feature={\"inputs\": tf.train.Feature(float_list=tf.train.FloatList(value=features_vector))}))\n```", "```py\nmodel_input = model_input.SerializeToString()\n```", "```py\nencoded = base64.b64encode(model_input).decode()\n```", "```py\npredictor.predict('{\"inputs\":[{\"b64\":\"%s\"}]}' % encoded)\n```", "```py\n{'outputs': [[24.7537]]}\n```", "```py\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\n\nmnist_df = pd.read_csv('mnist/train.csv')\ntrain_df, test_df = train_test_split(mnist_df, shuffle=False) \n```", "```py\npixel_columns = ['pixel' + str(i) for i in range(0, 784)]\nlabel_column = 'label'\n```", "```py\nimport tensorflow as tf\nfrom tensorflow import keras\n\nmodel = keras.Sequential([\n    keras.layers.InputLayer(input_shape=(784,), batch_size=5),\n    keras.layers.Dense(256, activation=tf.nn.relu),\n    keras.layers.Dense(10, activation=tf.nn.softmax)\n])\n```", "```py\nmodel.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])\n```", "```py\nimport numpy as np\n\nvectorized_normalization_fn = np.vectorize(lambda x: x / 255.0)\nnormalized_matrix = \n      vectorized_normalization_fn(train_df\n[pixel_columns].as_matrix())\n```", "```py\nlabels = train_df[label_column].as_matrix()\n\n```", "```py\nmodel.fit(normalized_matrix, labels, epochs=3)\n```", "```py\nEpoch 3/3 31500/31500 [==============================] - 16s 511us/sample - loss: 0.0703 - acc: 0.9775\n```", "```py\nnormalized_test_matrix = vectorized_normalization_fn(test_df[pixel_columns].as_matrix())\ntest_labels = test_df[label_column].as_matrix()\n_, test_acc = model.evaluate(normalized_test_matrix, test_labels)\n\nprint('Accuracy on test dataset:', test_acc)\n```", "```py\nAccuracy on test dataset: 0.97\n```", "```py\ndef predict_digit(index):\n    predictions = model.predict(normalized_test_matrix[index:index + 1])\n    return np.argmax(predictions, axis=1)[0]\n\n```", "```py\nfrom IPython.display import display\nfrom PIL import Image\n\ndef show_image(index):\n    print(\"predicted digit: %d\" % predict_digit(index))\n    print(\"digit image:\")\n    vectorized_denormalization_fn = np.vectorize(lambda x: np.uint8(x * 255.0))\n    img_matrix = normalized_test_matrix[index].reshape(28, 28)\n    img_matrix = vectorized_denormalization_fn(img_matrix)\n    img = Image.fromarray(img_matrix, mode='L')\n    display(img)\n\n```", "```py\nestimator = tf.keras.estimator.model_to_estimator(model)\n```"]