["```py\n$ head Advertising.csv \nTV,Radio,Newspaper,Sales\n230.1,37.8,69.2,22.1\n44.5,39.3,45.1,10.4\n17.2,45.9,69.3,9.3\n151.5,41.3,58.5,18.5\n180.8,10.8,58.4,12.9\n8.7,48.9,75,7.2\n57.5,32.8,23.5,11.8\n120.2,19.6,11.6,13.2\n8.6,2.1,1,4.8\n```", "```py\n// Open the CSV file.\nadvertFile, err := os.Open(\"Advertising.csv\")\nif err != nil {\n    log.Fatal(err)\n}\ndefer advertFile.Close()\n\n// Create a dataframe from the CSV file.\nadvertDF := dataframe.ReadCSV(advertFile)\n\n// Use the Describe method to calculate summary statistics\n// for all of the columns in one shot.\nadvertSummary := advertDF.Describe()\n\n// Output the summary statistics to stdout.\nfmt.Println(advertSummary)\n```", "```py\n$ go build\n$ ./myprogram\n[7x5] DataFrame\n\n    column   TV         Radio     Newspaper  Sales    \n 0: mean     147.042500 23.264000 30.554000  14.022500\n 1: stddev   85.854236  14.846809 21.778621  5.217457 \n 2: min      0.700000   0.000000  0.300000   1.600000 \n 3: 25%      73.400000  9.900000  12.600000  10.300000\n 4: 50%      149.700000 22.500000 25.600000  12.900000\n 5: 75%      218.500000 36.500000 45.100000  17.400000\n 6: max      296.400000 49.600000 114.000000 27.000000\n    <string> <float>    <float>   <float>    <float> \n```", "```py\n// Open the advertising dataset file.\nf, err := os.Open(\"Advertising.csv\")\nif err != nil {\n    log.Fatal(err)\n}\ndefer f.Close()\n\n// Create a dataframe from the CSV file.\nadvertDF := dataframe.ReadCSV(f)\n\n// Create a histogram for each of the columns in the dataset.\nfor _, colName := range advertDF.Names() {\n\n    // Create a plotter.Values value and fill it with the\n    // values from the respective column of the dataframe.\n    plotVals := make(plotter.Values, advertDF.Nrow())\n    for i, floatVal := range advertDF.Col(colName).Float() {\n        plotVals[i] = floatVal\n    }\n\n    // Make a plot and set its title.\n    p, err := plot.New()\n    if err != nil {\n        log.Fatal(err)\n    }\n    p.Title.Text = fmt.Sprintf(\"Histogram of a %s\", colName)\n\n    // Create a histogram of our values drawn\n    // from the standard normal.\n    h, err := plotter.NewHist(plotVals, 16)\n    if err != nil {\n        log.Fatal(err)\n    }        \n\n    // Normalize the histogram.\n    h.Normalize(1)\n\n    // Add the histogram to the plot.\n    p.Add(h)\n\n    // Save the plot to a PNG file.\n    if err := p.Save(4*vg.Inch, 4*vg.Inch, colName+\"_hist.png\"); err != nil {\n        log.Fatal(err)\n    }\n}\n```", "```py\n// Open the advertising dataset file.\nf, err := os.Open(\"Advertising.csv\")\nif err != nil {\n    log.Fatal(err)\n}\ndefer f.Close()\n\n// Create a dataframe from the CSV file.\nadvertDF := dataframe.ReadCSV(f)\n\n// Extract the target column.\nyVals := advertDF.Col(\"Sales\").Float()\n\n// Create a scatter plot for each of the features in the dataset.\nfor _, colName := range advertDF.Names() {\n\n    // pts will hold the values for plotting\n    pts := make(plotter.XYs, advertDF.Nrow())\n\n    // Fill pts with data.\n    for i, floatVal := range advertDF.Col(colName).Float() {\n        pts[i].X = floatVal\n        pts[i].Y = yVals[i]\n    }\n\n    // Create the plot.\n    p, err := plot.New()\n    if err != nil {\n        log.Fatal(err)\n    }\n    p.X.Label.Text = colName\n    p.Y.Label.Text = \"y\"\n    p.Add(plotter.NewGrid())\n\n    s, err := plotter.NewScatter(pts)\n    if err != nil {\n        log.Fatal(err)\n    }\n    s.GlyphStyle.Radius = vg.Points(3)\n\n    // Save the plot to a PNG file.\n    p.Add(s)\n    if err := p.Save(4*vg.Inch, 4*vg.Inch, colName+\"_scatter.png\"); err != nil {\n        log.Fatal(err)\n    }\n}\n```", "```py\n// Open the advertising dataset file.        \nf, err := os.Open(\"Advertising.csv\")\nif err != nil {\n    log.Fatal(err)\n}\ndefer f.Close()\n\n// Create a dataframe from the CSV file.\n// The types of the columns will be inferred.\nadvertDF := dataframe.ReadCSV(f)\n\n// Calculate the number of elements in each set.\ntrainingNum := (4 * advertDF.Nrow()) / 5\ntestNum := advertDF.Nrow() / 5\nif trainingNum+testNum < advertDF.Nrow() {\n    trainingNum++\n}\n\n// Create the subset indices.\ntrainingIdx := make([]int, trainingNum)\ntestIdx := make([]int, testNum)\n\n// Enumerate the training indices.\nfor i := 0; i < trainingNum; i++ {\n    trainingIdx[i] = i\n}\n\n// Enumerate the test indices.\nfor i := 0; i < testNum; i++ {\n    testIdx[i] = trainingNum + i\n}\n\n// Create the subset dataframes.\ntrainingDF := advertDF.Subset(trainingIdx)\ntestDF := advertDF.Subset(testIdx)\n\n// Create a map that will be used in writing the data\n// to files.\nsetMap := map[int]dataframe.DataFrame{\n    0: trainingDF,\n    1: testDF,\n}\n\n// Create the respective files.\nfor idx, setName := range []string{\"training.csv\", \"test.csv\"} {\n\n    // Save the filtered dataset file.\n    f, err := os.Create(setName)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    // Create a buffered writer.\n    w := bufio.NewWriter(f)\n\n    // Write the dataframe out as a CSV.\n    if err := setMap[idx].WriteCSV(w); err != nil {\n        log.Fatal(err)\n    }\n}\n```", "```py\n$ wc -l *.csv\n  201 Advertising.csv\n   41 test.csv\n  161 training.csv\n  403 total\n```", "```py\n// Open the training dataset file.\nf, err := os.Open(\"training.csv\")\nif err != nil {\n    log.Fatal(err)\n}\ndefer f.Close()\n\n// Create a new CSV reader reading from the opened file.\nreader := csv.NewReader(f)\n\n// Read in all of the CSV records\nreader.FieldsPerRecord = 4\ntrainingData, err := reader.ReadAll()\nif err != nil {\n    log.Fatal(err)\n}\n\n// In this case we are going to try and model our Sales (y)\n// by the TV feature plus an intercept. As such, let's create\n// the struct needed to train a model using github.com/sajari/regression.\nvar r regression.Regression\nr.SetObserved(\"Sales\")\nr.SetVar(0, \"TV\")\n\n// Loop of records in the CSV, adding the training data to the regression value.\nfor i, record := range trainingData {\n\n    // Skip the header.\n    if i == 0 {\n        continue\n    }\n\n    // Parse the Sales regression measure, or \"y\".\n    yVal, err := strconv.ParseFloat(record[3], 64)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    // Parse the TV value.\n    tvVal, err := strconv.ParseFloat(record[0], 64)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    // Add these points to the regression value.\n    r.Train(regression.DataPoint(yVal, []float64{tvVal}))\n}\n\n// Train/fit the regression model.\nr.Run()\n\n// Output the trained model parameters.\nfmt.Printf(\"\\nRegression Formula:\\n%v\\n\\n\", r.Formula)\n```", "```py\n$ go build\n$ ./myprogram \n\nRegression Formula:\nPredicted = 7.07 + TV*0.05\n```", "```py\n// Open the test dataset file.\nf, err = os.Open(\"test.csv\")\nif err != nil {\n    log.Fatal(err)\n}\ndefer f.Close()\n\n// Create a CSV reader reading from the opened file.\nreader = csv.NewReader(f)\n\n// Read in all of the CSV records\nreader.FieldsPerRecord = 4\ntestData, err := reader.ReadAll()\nif err != nil {\n    log.Fatal(err)\n}\n\n// Loop over the test data predicting y and evaluating the prediction\n// with the mean absolute error.\nvar mAE float64\nfor i, record := range testData {\n\n    // Skip the header.\n    if i == 0 {\n        continue\n    }\n\n    // Parse the observed Sales, or \"y\".\n    yObserved, err := strconv.ParseFloat(record[3], 64)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    // Parse the TV value.\n    tvVal, err := strconv.ParseFloat(record[0], 64)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    // Predict y with our trained model.\n    yPredicted, err := r.Predict([]float64{tvVal})\n\n    // Add the to the mean absolute error.\n    mAE += math.Abs(yObserved-yPredicted) / float64(len(testData))\n}\n\n// Output the MAE to standard out.\nfmt.Printf(\"MAE = %0.2f\\n\\n\", mAE)\n```", "```py\n$ go build\n$ ./myprogram \n\nRegression Formula:\nPredicted = 7.07 + TV*0.05\n\nMAE = 3.01\n```", "```py\n// predict uses our trained regression model to made a prediction.\nfunc predict(tv float64) float64 {\n    return 7.07 + tv*0.05\n}\n```", "```py\n// Open the advertising dataset file.\nf, err := os.Open(\"Advertising.csv\")\nif err != nil {\n    log.Fatal(err)\n}\ndefer f.Close()\n\n// Create a dataframe from the CSV file.\nadvertDF := dataframe.ReadCSV(f)\n\n// Extract the target column.\nyVals := advertDF.Col(\"Sales\").Float()\n\n// pts will hold the values for plotting.\npts := make(plotter.XYs, advertDF.Nrow())\n\n// ptsPred will hold the predicted values for plotting.\nptsPred := make(plotter.XYs, advertDF.Nrow())\n\n// Fill pts with data.\nfor i, floatVal := range advertDF.Col(\"TV\").Float() {\n    pts[i].X = floatVal\n    pts[i].Y = yVals[i]\n    ptsPred[i].X = floatVal\n    ptsPred[i].Y = predict(floatVal)\n}\n\n// Create the plot.\np, err := plot.New()\nif err != nil {\n    log.Fatal(err)\n}\np.X.Label.Text = \"TV\"\np.Y.Label.Text = \"Sales\"\np.Add(plotter.NewGrid())\n\n// Add the scatter plot points for the observations.\ns, err := plotter.NewScatter(pts)\nif err != nil {\n    log.Fatal(err)\n}\ns.GlyphStyle.Radius = vg.Points(3)\n\n// Add the line plot points for the predictions.\nl, err := plotter.NewLine(ptsPred)\nif err != nil {\n    log.Fatal(err)\n}\nl.LineStyle.Width = vg.Points(1)\nl.LineStyle.Dashes = []vg.Length{vg.Points(5), vg.Points(5)}\n\n// Save the plot to a PNG file.\np.Add(s, l)\nif err := p.Save(4*vg.Inch, 4*vg.Inch, \"regression_line.png\"); err != nil {\n    log.Fatal(err)\n}\n```", "```py\n// Open the training dataset file.\nf, err := os.Open(\"training.csv\")\nif err != nil {\n    log.Fatal(err)\n}\ndefer f.Close()\n\n// Create a new CSV reader reading from the opened file.\nreader := csv.NewReader(f)\n\n// Read in all of the CSV records\nreader.FieldsPerRecord = 4\ntrainingData, err := reader.ReadAll()\nif err != nil {\n    log.Fatal(err)\n}\n\n// In this case we are going to try and model our Sales\n// by the TV and Radio features plus an intercept.\nvar r regression.Regression\nr.SetObserved(\"Sales\")\nr.SetVar(0, \"TV\")\nr.SetVar(1, \"Radio\")\n\n// Loop over the CSV records adding the training data.\nfor i, record := range trainingData {\n\n    // Skip the header.\n    if i == 0 {\n        continue\n    }\n\n    // Parse the Sales.\n    yVal, err := strconv.ParseFloat(record[3], 64)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    // Parse the TV value.\n    tvVal, err := strconv.ParseFloat(record[0], 64)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    // Parse the Radio value.\n    radioVal, err := strconv.ParseFloat(record[1], 64)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    // Add these points to the regression value.\n    r.Train(regression.DataPoint(yVal, []float64{tvVal, radioVal}))\n}\n\n// Train/fit the regression model.\nr.Run()\n\n// Output the trained model parameters.\nfmt.Printf(\"\\nRegression Formula:\\n%v\\n\\n\", r.Formula)\n```", "```py\n$ go build\n$ ./myprogram\n\nRegression Formula:\nPredicted = 2.93 + TV*0.05 + Radio*0.18\n```", "```py\n// Open the test dataset file.\nf, err = os.Open(\"test.csv\")\nif err != nil {\n    log.Fatal(err)\n}\ndefer f.Close()\n\n// Create a CSV reader reading from the opened file.\nreader = csv.NewReader(f)\n\n// Read in all of the CSV records\nreader.FieldsPerRecord = 4\ntestData, err := reader.ReadAll()\nif err != nil {\n    log.Fatal(err)\n}\n\n// Loop over the test data predicting y and evaluating the prediction\n// with the mean absolute error.\nvar mAE float64\nfor i, record := range testData {\n\n    // Skip the header.￼\n    if i == 0 {\n        continue\n    }\n\n    // Parse the Sales.\n    yObserved, err := strconv.ParseFloat(record[3], 64)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    // Parse the TV value.\n    tvVal, err := strconv.ParseFloat(record[0], 64)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    // Parse the Radio value.\n    radioVal, err := strconv.ParseFloat(record[1], 64)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    // Predict y with our trained model.\n    yPredicted, err := r.Predict([]float64{tvVal, radioVal})\n\n    // Add the to the mean absolute error.\n    mAE += math.Abs(yObserved-yPredicted) / float64(len(testData))\n}\n\n// Output the MAE to standard out.\nfmt.Printf(\"MAE = %0.2f\\n\\n\", mAE)\n```", "```py\n$ go build\n$ ./myprogram\n\nRegression Formula:\nPredicted = 2.93 + TV*0.05 + Radio*0.18\n\nMAE = 1.26\n```", "```py\n// Open the training dataset file.\nf, err := os.Open(\"training.csv\")\nif err != nil {\n    log.Fatal(err)\n}\ndefer f.Close()\n\n// Create a new CSV reader reading from the opened file.\nreader := csv.NewReader(f)\nreader.FieldsPerRecord = 4\n\n// Read in all of the CSV records\nrawCSVData, err := reader.ReadAll()\nif err != nil {\n    log.Fatal(err)\n}\n\n// featureData will hold all the float values that will eventually be\n// used to form our matrix of features.\nfeatureData := make([]float64, 4*len(rawCSVData))\nyData := make([]float64, len(rawCSVData))\n\n// featureIndex and yIndex will track the current index of the matrix values.\nvar featureIndex int\nvar yIndex int\n\n// Sequentially move the rows into a slice of floats.\nfor idx, record := range rawCSVData {\n\n    // Skip the header row.\n    if idx == 0 {\n        continue\n    }\n\n    // Loop over the float columns.\n    for i, val := range record {\n\n        // Convert the value to a float.\n        valParsed, err := strconv.ParseFloat(val, 64)\n        if err != nil {\n            log.Fatal(err)\n        }\n\n        if i < 3 {\n\n            // Add an intercept to the model.\n            if i == 0 {\n                featureData[featureIndex] = 1\n                featureIndex++\n            }\n\n            // Add the float value to the slice of feature floats.\n            featureData[featureIndex] = valParsed\n            featureIndex++\n        }\n\n        if i == 3 {\n\n            // Add the float value to the slice of y floats.\n            yData[yIndex] = valParsed\n            yIndex++\n        }\n    }\n}\n\n// Form the matrices that will be input to our regression.\nfeatures := mat64.NewDense(len(rawCSVData), 4, featureData)\ny := mat64.NewVector(len(rawCSVData), yData)\n```", "```py\n// Create a new RidgeRegression value, where 1.0 is the\n// penalty value.\nr := ridge.New(features, y, 1.0)\n\n// Train our regression model.\nr.Regress()\n\n// Print our regression formula.\nc1 := r.Coefficients.At(0, 0)\nc2 := r.Coefficients.At(1, 0)\nc3 := r.Coefficients.At(2, 0)\nc4 := r.Coefficients.At(3, 0)\nfmt.Printf(\"\\nRegression formula:\\n\")\nfmt.Printf(\"y = %0.3f + %0.3f TV + %0.3f Radio + %0.3f Newspaper\\n\\n\", c1, c2, c3, c4)\n```", "```py\n$ go build\n$ ./myprogram\n\nRegression formula:\ny = 3.038 + 0.047 TV + 0.177 Radio + 0.001 Newspaper\n```", "```py\n// predict uses our trained regression model to made a prediction based on a\n// TV, Radio, and Newspaper value.\nfunc predict(tv, radio, newspaper float64) float64 {\n        return 3.038 + tv*0.047 + 0.177*radio + 0.001*newspaper\n}\n```", "```py\n// Open the test dataset file.\nf, err := os.Open(\"test.csv\")\nif err != nil {\n    log.Fatal(err)\n}\ndefer f.Close()\n\n// Create a new CSV reader reading from the opened file.\nreader := csv.NewReader(f)\n\n// Read in all of the CSV records\nreader.FieldsPerRecord = 4\ntestData, err := reader.ReadAll()\nif err != nil {\n    log.Fatal(err)\n}\n\n// Loop over the holdout data predicting y and evaluating the prediction\n// with the mean absolute error.\nvar mAE float64\nfor i, record := range testData {\n\n    // Skip the header.\n    if i == 0 {\n        continue\n    }\n\n    // Parse the Sales.\n    yObserved, err := strconv.ParseFloat(record[3], 64)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    // Parse the TV value.\n    tvVal, err := strconv.ParseFloat(record[0], 64)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    // Parse the Radio value.\n    radioVal, err := strconv.ParseFloat(record[1], 64)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    // Parse the Newspaper value.\n    newspaperVal, err := strconv.ParseFloat(record[2], 64)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    // Predict y with our trained model.\n    yPredicted := predict(tvVal, radioVal, newspaperVal)\n\n    // Add the to the mean absolute error.\n    mAE += math.Abs(yObserved-yPredicted) / float64(len(testData))\n}\n\n// Output the MAE to standard out.\nfmt.Printf(\"\\nMAE = %0.2f\\n\\n\", mAE)\n```", "```py\n$ go build\n$ ./myprogram\n\nMAE = 1.26\n```"]