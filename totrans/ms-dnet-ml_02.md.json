["```py\n1 -> 6\n1 -> 7\n1 -> 6\n1 -> 5\n1 -> 6\n```", "```py\ny = x0 + x1 + x2 + E\n```", "```py\nlet input = [|1,1.;2,2.;3,2.25;4,4.75;5,5.|]\n```", "```py\nval input : (int * float) [] =\n [|(1, 1.0); (2, 2.0); (3, 2.25); (4, 4.75); (5, 5.0)|]\n\n```", "```py\nlet variance (source:float seq) =\n    let mean = Seq.average source\n    let deltas = Seq.map (fun x -> pown (x-mean) 2) source\n    Seq.average deltas\n```", "```py\nval variance : source:seq<float> -> float\n\n```", "```py\n Seq.average source\n```", "```py\n source |> Seq.average\n```", "```py\nlet standardDeviation values =\n     sqrt (variance values)\n```", "```py\nval standardDeviation : values:seq<float> -> float\n\n```", "```py\nlet x = input |> Seq.map (fun (x,y) -> float x)\nlet y = input |> Seq.map (fun (x,y) -> y) \n\nlet mX = Seq.average x\nlet mY = Seq.average y\n\nlet sX = standardDeviation x\nlet sY = standardDeviation y\n```", "```py\nval x : seq<float>\nval y : seq<float>\nval mX : float = 3.0\nval mY : float = 3.0\nval sX : float = 1.414213562\nval sY : float = 1.589024858\n\n```", "```py\nSeq.map(fun (x,y) -> float x)\n```", "```py\n10.75/ âˆš(10 * 12.63)\n```", "```py\nlet pearsonsCorrelation(a:float seq, b:float seq) =\n    let mX = Seq.average a\n    let mY = Seq.average b\n\n    let x = a |> Seq.map (fun x -> x - mX)\n    let y = b |> Seq.map (fun y -> y - mY)\n\n    let xys = Seq.zip x y\n    let xy = xys |> Seq.map (fun (x, y) -> x*y, x*x, y*y)\n    let sxy = xy |> Seq.sumBy (fun (xy, x2, y2) -> xy)\n    let sx2 = xy |> Seq.sumBy (fun (xy, x2, y2) -> x2)\n    let sy2 = xy |> Seq.sumBy (fun (xy, x2, y2) -> y2)\n    sxy / sqrt (sx2*sy2)\n```", "```py\nval pearsonsCorrelation : a:seq<float> * b:seq<float> -> float\n\n```", "```py\nSeq.sum ([1;2;3])\nval it : int = 6\n\nSeq.sumBy ([1;2;3])\nDoes not compile\n\nSeq.sumBy (fun i -> i) [1;2;3]\nval it : int = 6\n```", "```py\nlet r = pearsonsCorrelation (x,y)\n```", "```py\nval r : float = 0.9567374429\n\n```", "```py\nlet b = r*(sY/sX)\nlet A = mY - b*mX\nval b : float = 1.075\nval A : float = -0.225\n```", "```py\nPM> install-package MathNet.Numerics\n\n```", "```py\nlet input = [|1,1.;2,2.;3,2.25;4,4.75;5,5.|]\n\nlet x = input |> Array.map(fun (x,y) -> float x)\nlet y = input |> Array.map(fun (x,y) -> y) \nlet mX = Array.average x\nlet mY = Array.average y \n```", "```py\nval input : (int * float) [] =\n [|(1, 1.0); (2, 2.0); (3, 2.25); (4, 4.75); (5, 5.0)|]\nval x : float [] = [|1.0; 2.0; 3.0; 4.0; 5.0|]\nval y : float [] = [|1.0; 2.0; 2.25; 4.75; 5.0|]\nval mX : float = 3.0\nval mY : float = 3.0\n\n```", "```py\n#r \"../packages/MathNet.Numerics.3.8.0/lib/net40/MathNet.Numerics.dll\"\nopen MathNet.Numerics.Statistics\n```", "```py\nlet sX = ArrayStatistics.StandardDeviation x\nlet sY = ArrayStatistics.StandardDeviation y\n```", "```py\nval sX : float = 1.58113883\nval sY : float = 1.7765838\n\n```", "```py\nlet r = Correlation.Pearson (x,y)\n```", "```py\nval r : float = 0.9567374429\n\n```", "```py\nlet b = r*(sY/sX)\nlet A = mY - b*mX\n```", "```py\nval b : float = 1.075\nval A : float = -0.225\n\n```", "```py\n#r \"../packages/MathNet.Numerics.3.8.0/lib/net40/MathNet.Numerics.dll\"\nopen MathNet.Numerics.Statistics\n```", "```py\nopen MathNet.Numerics\nlet fit = Fit.Line(x,y)\nlet i = fst fit\nlet s = snd fit\n```", "```py\nval fit : float * float = (-0.225, 1.075)\nval i : float = -0.225\nval s : float = 1.075\n\n```", "```py\n#r \"../packages/Accord.3.0.2/lib/net40/Accord.dll\"\n#r \"../packages/Accord.Statistics.3.0.2/lib/net40/Accord.Statistics.dll\"\n#r \"../packages/Accord.Math.3.0.2/lib/net40/Accord.Math.dll\"\n\nopen Accord\nopen Accord.Statistics.Models.Regression.Linear\n\nlet input = [|1,1.;2,2.;3,2.25;4,4.75;5,5.|]\nlet x = input |> Array.map (fun (x,y) -> float x)\nlet y = input |> Array.map (fun (x,y) -> y) let regression = SimpleLinearRegression()\nlet sse = regression.Regress(x,y)\nlet intercept = regression.Intercept\nlet slope = regression.Slope\nlet mse = sse/float x.Length \nlet rmse = sqrt mse\nlet r2 = regression.CoefficientOfDetermination(x,y)\n```", "```py\nval input : (int * float) [] =\n [|(1, 1.0); (2, 2.0); (3, 2.25); (4, 4.75); (5, 5.0)|]\nval x : float [] = [|1.0; 2.0; 3.0; 4.0; 5.0|]\nval y : float [] = [|1.0; 2.0; 2.25; 4.75; 5.0|]\nval regression : SimpleLinearRegression = y(x) = 1.075x + -0.224999999999998\nval sse : float = 1.06875\nval intercept : float = -0.225\nval slope : float = 1.075\nval mse : float = 0.21375\nval rmse : float = 0.4623310502\nval r2 : float = 0.9153465347\n\n```", "```py\ny(x) = 1.075x + -0.225\n```", "```py\nRMSE = Square Root of MSE = sqrt(.2137) = .462\n```", "```py\n#r \"System.Transactions.dll\"\n#r \"../packages/Accord.3.0.2/lib/net40/Accord.dll\"\n#r \"../packages/Accord.Statistics.3.0.2/lib/net40/Accord.Statistics.dll\"\n#r \"../packages/Accord.Math.3.0.2/lib/net40/Accord.Math.dll\"\n#r \"../packages/FSharp.Data.2.2.5/lib/net40/FSharp.Data.dll\"\n\nopen Accord\nopen Accord.Statistics\nopen Accord.Statistics.Models.Regression.Linear\n\nopen System\nopen System.Data.SqlClient\n```", "```py\ntype ProductReview = {ProductID:int; TotalOrders:float; AvgReviews:float}\n\nlet reviews = ResizeArray<ProductReview>()\n\n[<Literal>]\nlet connectionString = \"data source=nc54a9m5kk.database.windows.net;initial catalog=AdventureWorks2014;user id=chickenskills@nc54a9m5kk;password=sk1lzm@tter;\"\n\n[<Literal>]\nlet query = \"Select \n                A.ProductID, TotalOrders, AvgReviews\n                From\n                (Select \n                ProductID,\n                Sum(OrderQty) as TotalOrders\n                from [Sales].[SalesOrderDetail] as SOD\n                inner join [Sales].[SalesOrderHeader] as SOH\n                on SOD.SalesOrderID = SOH.SalesOrderID\n                inner join [Sales].[Customer] as C\n                on SOH.CustomerID = C.CustomerID\n                Where C.StoreID is not null\n                Group By ProductID) as A\n                Inner Join \n                (Select\n                ProductID,\n                (Sum(Rating) + 0.0) / (Count(ProductID) + 0.0) as AvgReviews\n                from [Production].[ProductReview] as PR\n                Group By ProductID) as B\n                on A.ProductID = B.ProductID\"\n```", "```py\nlet connection = new SqlConnection(connectionString)\nlet command = new SqlCommand(query,connection)\nconnection.Open()\nlet reader = command.ExecuteReader()\nwhile reader.Read() do\n    reviews.Add({ProductID=reader.GetInt32(0);TotalOrders=(float)(reader.GetInt32(1));AvgReviews=(float)(reader.GetDecimal(2))})\n```", "```py\ntype ProductReview =\n {ProductID: int;\n TotalOrders: float;\n AvgReviews: float;}\nval reviews : System.Collections.Generic.List<ProductReview>\nval connectionString : string =\n \"data source=nc54a9m5kk.database.windows.net;initial catalog=A\"+[72 chars]\nval query : string =\n \"Select \n A.ProductID, AvgOrders, AvgReviews\n \"+[814 chars]\nval connection : System.Data.SqlClient.SqlConnection =\n System.Data.SqlClient.SqlConnection\nval command : System.Data.SqlClient.SqlCommand =\n System.Data.SqlClient.SqlCommand\nval reader : System.Data.SqlClient.SqlDataReader\nval it : unit = ()\n\n```", "```py\nlet x = reviews |> Seq.map (fun pr -> pr.AvgReviews) |> Seq.toArray\nlet y = reviews |> Seq.map (fun pr -> pr.TotalOrders) |> Seq.toArray\nlet regression = SimpleLinearRegression()\nlet sse = regression.Regress(x,y)\nlet mse = sse/float x.Length \nlet rmse = sqrt mse\nlet r2 = regression.CoefficientOfDetermination(x,y)\n```", "```py\nval regression : SimpleLinearRegression =\n y(x) = 1277.89025884053x + -4092.62506538369\nval sse : float = 39480886.74\nval mse : float = 203509.7254\nval rmse : float = 451.1205221\nval r2 : float = 0.2923784167\n\n```", "```py\n    PM> install-package Accord\n    PM> install-package Accord.Statistics\n\n    ```", "```py\n    namespace AdventureWorks.MachineLearning\n\n    type OrderPrediction() = \n        member this.X = \"F#\"\n    ```", "```py\n    namespace AdventureWorks.MachineLearning\n\n    type public OrderPrediction() = \n        member this.PredictQuantity(productId:int) = 0.0\n    ```", "```py\n        // GET: PurchaseOrderDetails/PredictQuantity/1\n        public Int32 PredictQuantity(int id)\n        {\n            var orderPrediction = new OrderPrediction();\n            return (Int32)orderPrediction.PredictQuantity(id);\n        }\n```", "```py\n@section Scripts {\n    @Scripts.Render(\"~/bundles/jqueryval\")\n<script type=\"text/javascript\">\n        $(document).ready(function(){\n            $(\"#ProductID\").change(function(){\n                var productID = $(this).val();\n                $.get(\"/PurchaseOrderDetails/PredictQuantity/\" + productID, function(result){\n                    $(\"#OrderQty\").val(result);\n                });\n            });\n        });\n</script>\n}\n```", "```py\nnamespace AdventureWorks.MachineLearning\n\nopen Accord\nopen Accord.Statistics\nopen Accord.Statistics.Models.Regression.Linear\n\nopen System\nopen System.Data.SqlClient\nopen System.Collections.Generic\n\ntype internal ProductReview = {ProductID:int; TotalOrders:float; AvgReviews: float}\n\ntype public OrderPrediction () = \n    let reviews = List<ProductReview>()\n\n    [<Literal>]\n    let connectionString = \"data source=nc54a9m5kk.database.windows.net;initial catalog=AdventureWorks2014;user id=chickenskills@nc54a9m5kk;password=sk1lzm@tter;\"\n\n    [<Literal>]\n    let query = \"Select \n                A.ProductID, TotalOrders, AvgReviews\n                From\n                (Select \n                ProductID,\n                Sum(OrderQty) as TotalOrders\n                from [Sales].[SalesOrderDetail] as SOD\n                inner join [Sales].[SalesOrderHeader] as SOH\n                on SOD.SalesOrderID = SOH.SalesOrderID\n                inner join [Sales].[Customer] as C\n                on SOH.CustomerID = C.CustomerID\n                Where C.StoreID is not null\n                Group By ProductID) as A\n                Inner Join \n                (Select\n                ProductID,\n                (Sum(Rating) + 0.0) / (Count(ProductID) + 0.0) as AvgReviews\n                from [Production].[ProductReview] as PR\n                Group By ProductID) as B\n                on A.ProductID = B.ProductID\"\n\n    member this.PredictQuantity(productId:int) = \n        use connection = new SqlConnection(connectionString)\n        use command = new SqlCommand(query,connection)\n        connection.Open()\n        use reader = command.ExecuteReader()\n        while reader.Read() do\n            reviews.Add({ProductID=reader.GetInt32(0);TotalOrders=(float)(reader.GetInt32(1));AvgReviews=(float)(reader.GetDecimal(2))})\n\n        let x = reviews |> Seq.map (fun pr -> pr.AvgReviews) |> Seq.toArray\n        let y = reviews |> Seq.map (fun pr -> pr.TotalOrders) |> Seq.toArray\n        let regression = SimpleLinearRegression()\n        let sse = regression.Regress(x,y)\n        let mse = sse/float x.Length \n        let rmse = sqrt mse\n        let r2 = regression.CoefficientOfDetermination(x,y)\n\n        let review = reviews |> Seq.find (fun r -> r.ProductID = productId)\n        regression.Compute(review.AvgReviews)\n```"]