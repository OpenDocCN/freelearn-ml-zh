["```py\nfrom sklearn.datasets import make_classification\n\n>>> nb_samples = 300\n>>> X, Y = make_classification(n_samples=nb_samples, n_features=2, n_informative=2, n_redundant=0)\n```", "```py\nfrom sklearn.naive_bayes import BernoulliNB\nfrom sklearn.model_selection import train_test_split\n\n>>> X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.25)\n\n>>> bnb = BernoulliNB(binarize=0.0)\n>>> bnb.fit(X_train, Y_train)\n>>> bnb.score(X_test, Y_test)\n0.85333333333333339\n```", "```py\n>>> data = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])\n>>> bnb.predict(data)\narray([0, 0, 1, 1])\n```", "```py\nfrom sklearn.feature_extraction import DictVectorizer\n\n>>> data = [\n   {'house': 100, 'street': 50, 'shop': 25, 'car': 100, 'tree': 20},\n   {'house': 5, 'street': 5, 'shop': 0, 'car': 10, 'tree': 500, 'river': 1}\n]\n\n>>> dv = DictVectorizer(sparse=False)\n>>> X = dv.fit_transform(data)\n>>> Y = np.array([1, 0])\n\n>>> X\narray([[ 100.,  100.,    0.,   25.,   50.,   20.],\n       [  10.,    5.,    1.,    0.,    5.,  500.]])\n```", "```py\nfrom sklearn.naive_bayes import MultinomialNB\n\n>>> mnb = MultinomialNB()\n>>> mnb.fit(X, Y)\nMultinomialNB(alpha=1.0, class_prior=None, fit_prior=True)\n```", "```py\n>>> test_data = data = [\n   {'house': 80, 'street': 20, 'shop': 15, 'car': 70, 'tree': 10, 'river': 1},\n   {'house': 10, 'street': 5, 'shop': 1, 'car': 8, 'tree': 300, 'river': 0}\n]\n\n>>> mnb.predict(dv.fit_transform(test_data))\narray([1, 0])\n```", "```py\nfrom sklearn.datasets import make_classification\n\n>>> nb_samples = 300\n>>> X, Y = make_classification(n_samples=nb_samples, n_features=2, n_informative=2, n_redundant=0)\n```", "```py\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import roc_curve, auc\nfrom sklearn.model_selection import train_test_split\n\n>>> X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.25)\n\n>>> gnb = GaussianNB()\n>>> gnb.fit(X_train, Y_train)\n>>> Y_gnb_score = gnb.predict_proba(X_test)\n\n>>> lr = LogisticRegression()\n>>> lr.fit(X_train, Y_train)\n>>> Y_lr_score = lr.decision_function(X_test)\n\n>>> fpr_gnb, tpr_gnb, thresholds_gnb = roc_curve(Y_test, Y_gnb_score[:, 1])\n>>> fpr_lr, tpr_lr, thresholds_lr = roc_curve(Y_test, Y_lr_score)\n```", "```py\nfrom sklearn.datasets import load_digits\nfrom sklearn.model_selection import cross_val_score\n\n>>> digits = load_digits()\n\n>>> gnb = GaussianNB()\n>>> mnb = MultinomialNB()\n\n>>> cross_val_score(gnb, digits.data, digits.target, scoring='accuracy', cv=10).mean()\n0.81035375835678214\n\n>>> cross_val_score(mnb, digits.data, digits.target, scoring='accuracy', cv=10).mean()\n0.88193962163008377 \n```"]