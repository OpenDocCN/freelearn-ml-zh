["```py\n> install.packages(\"devtools\")\n> library(devtools) \n```", "```py\n> devtools::install_github(\"rstudio/tensorflow\") \n```", "```py\n> library(tensorflow)\n> install_tensorflow() \n```", "```py\n> devtools::install_github(\"rstudio/keras\") \n```", "```py\n> library(keras)\n> model <- application_resnet50(weights = 'imagenet') \n```", "```py\n> img <- image_load(\"ice_cream.jpg\", target_size = c(224,224)) \n```", "```py\n> x <- image_to_array(img) \n```", "```py\n> dim(x) \n```", "```py\n[1] 224 224   3 \n```", "```py\n> str(x) \n```", "```py\n num [1:224, 1:224, 1:3] 255 255 255 255 255 255 255 255 255 255 ... \n```", "```py\n> x[1, 224, 1:3] \n```", "```py\n[1] 253 253 255 \n```", "```py\n> x[40, 145, 1:3] \n```", "```py\n[1] 149  23  34 \n```", "```py\n> x <- array_reshape(x, c(1, dim(x))) \n```", "```py\n> dim(x) \n```", "```py\n[1]   1 224 224   3 \n```", "```py\n> x <- imagenet_preprocess_input(x) \n```", "```py\n> x[1, 40, 145, 1:3] \n```", "```py\n[1] -69.939 -93.779  25.320 \n```", "```py\n> p_resnet50 <- predict(m_resnet50, x)\n> c_resnet50 <- imagenet_decode_predictions(p_resnet50, top = 10) \n```", "```py\n> c_resnet50 \n```", "```py\n[[1]]\n   class_name class_description         score\n1   n07614500         ice_cream 0.99612110853\n2   n07836838   chocolate_sauce 0.00257453066\n3   n07613480            trifle 0.00017260048\n4   n07932039            eggnog 0.00011857488\n5   n07930864               cup 0.00011558698\n6   n07745940        strawberry 0.00010969469\n7   n15075141     toilet_tissue 0.00006556125\n8   n03314780       face_powder 0.00005355201\n9   n03482405            hamper 0.00004582879\n10  n04423845           thimble 0.00004054611 \n```", "```py\n> img_list <- list(\"cat.jpg\", \"pizza.jpg\")\n> img_data <- lapply(img_list, image_load, target_size = c(224,224))\n> img_arrs <- lapply(img_data, image_to_array)\n> img_resh <- lapply(img_arrs, array_reshape, c(1, 224, 224, 3))\n> img_prep <- lapply(img_resh, imagenet_preprocess_input)\n> img_prob <- lapply(img_prep, predict, object = m_resnet50) \n```", "```py\n> img_classes <- sapply(img_prob, imagenet_decode_predictions,\n                        top = 3) \n```", "```py\n> img_classes \n```", "```py\n[[1]]\n  class_name class_description      score\n1  n02123045             tabby 0.63457680\n2  n02124075      Egyptian_cat 0.08966244\n3  n02123159         tiger_cat 0.06287414\n[[2]]\n  class_name class_description        score\n1  n07873807             pizza 0.9890466332\n2  n07684084       French_loaf 0.0083064679\n3  n07747607            orange 0.0002433858 \n```", "```py\n> library(word2vec)\n> m_w2v <- read.word2vec(file = \"GoogleNews-vectors-negative300.bin\",\n                         normalize = TRUE) \n```", "```py\n> str(m_w2v) \n```", "```py\nList of 4\n $ model     :<externalptr> \n $ model_path: chr \"GoogleNews-vectors-negative300.bin\"\n $ dim       : int 300\n $ vocabulary: num 3e+06\n - attr(*, \"class\")= chr \"word2vec\" \n```", "```py\n> foods <- predict(m_w2v, c(\"cereal\", \"bacon\", \"eggs\",\n                     \"sandwich\", \"salad\", \"steak\", \"spaghetti\"),\n                      type = \"embedding\")\n> meals <- predict(m_w2v, c(\"breakfast\", \"lunch\", \"dinner\"),\n                     type = \"embedding\") \n```", "```py\n> head(foods[\"cereal\", ]) \n```", "```py\n[1] -1.1961552  0.7056815 -0.4154012  3.3832674  0.1438890 -0.2777683 \n```", "```py\n> foods[, 1:5] \n```", "```py\n [,1]       [,2]       [,3]     [,4]       [,5]\ncereal    -1.1961552  0.7056815 -0.4154012 3.383267  0.1438890\nbacon     -0.4791541 -0.8049789  0.5749849 2.278036  1.2266345\neggs      -1.0626601  0.3271616  0.3689792 1.456238 -0.3345411\nsandwich  -0.7829969 -0.3914984  0.7379323 2.996794 -0.2267311\nsalad     -0.6817439  0.9336928  0.6224619 2.647933  0.6866841\nsteak     -1.5433296  0.4492917  0.2944511 2.030697 -0.5102126\nspaghetti -0.2083995 -0.6843739 -0.4476731 3.828377 -1.3121454 \n```", "```py\n> word2vec_similarity(foods, meals) \n```", "```py\n breakfast     lunch    dinner\ncereal    0.6042315 0.5326227 0.3473523\nbacon     0.6586656 0.5594635 0.5982034\neggs      0.4939182 0.4477274 0.4690089\nsandwich  0.6928092 0.7046211 0.5999536\nsalad     0.6797127 0.6867730 0.6821324\nsteak     0.6580227 0.6383550 0.7106042\nspaghetti 0.6301417 0.6122567 0.6742931 \n```", "```py\n> user_posts = c(\n    \"I eat bacon and eggs in the morning for the most important meal of the day!\",\n    \"I am going to grab a quick sandwich this afternoon before hitting the gym.\",\n    \"Can anyone provide restaurant recommendations for my date tonight?\"\n  ) \n```", "```py\n> library(tm)\n> user_posts_clean <- removeWords(user_posts, stopwords())\n> user_posts_clean <- txt_clean_word2vec(user_posts_clean) \n```", "```py\n> user_posts_clean[1] # look at the first cleaned user post \n```", "```py\n[1] \"i eat bacon eggs morning important meal day\" \n```", "```py\n> post_vectors <- doc2vec(m_w2v, user_posts_clean) \n```", "```py\n> str(post_vectors) \n```", "```py\nnum [1:3, 1:300] -1.541 0.48 -0.825 -0.198 0.955 ... \n```", "```py\n> meals <- predict(m_w2v, c(\"breakfast\", \"lunch\", \"dinner\"),\n                   type = \"embedding\") \n```", "```py\n> word2vec_similarity(post_vectors, meals) \n```", "```py\n breakfast     lunch    dinner\n[1,] 0.7811638 0.7695733 0.7151590\n[2,] 0.6262028 0.6700359 0.5391957\n[3,] 0.5475215 0.5308735 0.5646606 \n```", "```py\n> library(tidyverse)\n> sns_terms <- read_csv(\"snsdata.csv\") |> select(basketball:drugs)\n> library(irlba)\n> set.seed(123456)\n> sns_pca <- sns_terms |>\n    prcomp_irlba(n = 2, center = TRUE, scale = TRUE) \n```", "```py\n> library(ggplot2)\n> as.data.frame(sns_pca$x) |>\n    ggplot(aes(PC1, PC2)) + geom_point(size = 1, shape = 1) \n```", "```py\n> library(tidyverse)\n> set.seed(123)\n> sns_sample <- read_csv(\"snsdata.csv\") |>\n    slice_sample(n = 5000) \n```", "```py\n> library(Rtsne)\n> set.seed(123)\n> sns_tsne <- sns_sample |>\n    select(basketball:drugs) |>\n    Rtsne(check_duplicates = FALSE) \n```", "```py\n> library(ggplot2)\n> data.frame(sns_tsne$Y) |>\n    ggplot(aes(X1, X2)) + geom_point(size = 2, shape = 1) \n```", "```py\n> sns_sample_tsne <- sns_sample |>\n    bind_cols(data.frame(sns_tsne$Y)) |> # add the t-SNE data\n    rowwise() |>\n    mutate(n_terms = sum(c_across(basketball:drugs))) |>\n    ungroup() |>\n    mutate(`Terms Used` = if_else(n_terms > 0, \"1+\", \"0\")) \n```", "```py\n> sns_sample_tsne |>\n    ggplot(aes(X1, X2, shape = `Terms Used`, color = `Terms Used`)) +\n    geom_point(size = 2) +\n    scale_shape(solid = FALSE) \n```", "```py\n> con <- dbConnect(RSQLite::SQLite(), \"credit.sqlite3\") \n```", "```py\n> dbListTables(con) \n```", "```py\n[1] \"credit\" \n```", "```py\n> res <- dbSendQuery(con, \"SELECT * FROM credit WHERE age >= 45\") \n```", "```py\n> credit_age45 <- dbFetch(res) \n```", "```py\n> summary(credit_age45$age) \n```", "```py\n Min. 1st Qu.  Median    Mean 3rd Qu.    Max.\n  45.00   48.00   52.00   53.98   60.00   75.00 \n```", "```py\n> dbClearResult(res)\n> dbDisconnect(con) \n```", "```py\n> con <- dbConnect(odbc:odbc(), \"my_data_source_name\") \n```", "```py\n> library(DBI)\n> con <- dbConnect(odbc::odbc(),\n                   database = \"my_database\",\n                   uid = \"my_username\",\n                   pwd = \"my_password\",\n                   host = \"my.server.address\",\n                   port = 1234) \n```", "```py\n> library(DBI)\n> library(dplyr)\n> con <- dbConnect(RSQLite::SQLite(), \"credit.sqlite3\")\n> credit_tbl <- con |> tbl(\"credit\") \n```", "```py\n> library(dplyr)\n> credit_tbl |>\n    filter(age >= 45) |>\n    select(age) |>\n    collect() |>\n    summary() \n```", "```py\n age       \n Min.   :45.00  \n 1st Qu.:48.00  \n Median :52.00  \n Mean   :53.98  \n 3rd Qu.:60.00  \n Max.   :75.00 \n```", "```py\n> credit_tbl |>\n    filter(age >= 45) |>\n    group_by(default) |>\n    summarize(mean_amount = avg(amount)) \n```", "```py\n# Source:   SQL [2 x 2]\n# Database: sqlite 3.41.2 [/MLwR/Chapter 15/credit.sqlite3]\n  default mean_amount\n  <chr>         <dbl>\n1 no            2709.\n2 yes           4956. \n```", "```py\n> credit_tbl |>\n    filter(age >= 45) |>\n    group_by(default) |>\n    summarize(mean_amount = avg(amount)) |>\n    show_query() \n```", "```py\n<SQL>\nSELECT `default`, avg(`amount`) AS `mean_amount`\nFROM `credit`\nWHERE (`age` >= 45.0)\nGROUP BY `default` \n```", "```py\n> system.time(rnorm(1000000)) \n```", "```py\n user  system elapsed \n  0.025   0.001   0.026 \n```", "```py\n> library(parallel)\n> detectCores() \n```", "```py\n[1] 10 \n```", "```py\n> system.time(l1 <- unlist(mclapply(1:10, function(x) {\n    rnorm(10000000)}, mc.cores = 1)))\n   user  system elapsed \n  2.840   0.183   3.027 \n> system.time(l2 <- unlist(mclapply(1:10, function(x) {\n    rnorm(10000000)}, mc.cores = 2)))\n   user  system elapsed \n  2.876   0.840   2.361 \n> system.time(l4 <- unlist(mclapply(1:10, function(x) {\n    rnorm(10000000) }, mc.cores = 4)))\n   user  system elapsed \n  2.901   0.824   1.459 \n> system.time(l8 <- unlist(mclapply(1:10, function(x) {\n    rnorm(10000000) }, mc.cores = 8)))\n   user  system elapsed \n  2.975   1.146   1.481 \n```", "```py\n> cl1 <- makeCluster(4) \n```", "```py\n> clusterCall(cl1, function() { Sys.info()[\"nodename\"] } ) \n```", "```py\n[[1]]\n                  nodename\n\"Bretts-Macbook-Pro.local\"\n[[2]]\nnodename\n\"Bretts-Macbook-Pro.local\"\n[[3]]\nnodename\n\"Bretts-Macbook-Pro.local\"\n[[4]]\nnodename\n\"Bretts-Macbook-Pro.local\" \n```", "```py\n> clusterApply(cl1, c('A', 'B', 'C', 'D'),\n               function(x) { paste(\"Cluster\", x, \"ready!\") }) \n```", "```py\n[[1]]\n[1] \"Cluster A ready!\"\n[[2]]\n[1] \"Cluster B ready!\"\n[[3]]\n[1] \"Cluster C ready!\"\n[[4]]\n[1] \"Cluster D ready!\" \n```", "```py\n> stopCluster(cl1) \n```", "```py\n> system.time(l1 <- rnorm(100000000)) \n```", "```py\n user  system elapsed \n  2.466   0.080   2.546 \n```", "```py\n> system.time(l4 <- foreach(i = 1:4, .combine = 'c')\n              %do% rnorm(25000000)) \n```", "```py\n user  system elapsed \n  2.603   0.106   2.709 \n```", "```py\n> detectCores() \n```", "```py\n[1] 10 \n```", "```py\n> library(doParallel)\n> registerDoParallel(cores = 4)\n> system.time(l4p <- foreach(i = 1:4, .combine = 'c')\n              %dopar% rnorm(25000000)) \n```", "```py\n user  system elapsed \n  2.868   1.041   1.571 \n```", "```py\n> stopImplicitCluster() \n```", "```py\n> library(caret)\n> credit <- read.csv(\"credit.csv\")\n> system.time(train(default ~ ., data = credit, method = \"rf\",\n                    trControl = trainControl(allowParallel = FALSE))) \n```", "```py\n user  system elapsed \n 64.009   0.870  64.855 \n```", "```py\n> library(doParallel)\n> registerDoParallel(cores = 8)\n> system.time(train(default ~ ., data = credit, method = \"rf\")) \n```", "```py\n user  system elapsed \n 68.396   1.692  10.569 \n```", "```py\n> library(sparklyr)\n> spark_install() \n```", "```py\n> spark_cluster <- spark_connect(master = \"local\") \n```", "```py\n> splits <- sdf_random_split(credit_spark,\n                           train = 0.75, test = 0.25,\n                           seed = 123) \n```", "```py\n> credit_rf <- splits$train |>\n    ml_random_forest(default ~ .)\n> pred <- ml_predict(credit_rf, splits$test)\n> ml_binary_classification_evaluator(pred,\n    metric_name = \"areaUnderROC\") \n```", "```py\n[1] 0.7824574 \n```", "```py\n> spark_disconnect(spark_cluster) \n```", "```py\n> library(h2o)\n> h2o_instance <- h2o.init() \n```", "```py\n> credit.hex <- h2o.uploadFile(\"credit.csv\") \n```", "```py\n> h2o.randomForest(y = \"default\",\n                   training_frame = credit.hex,\n                   ntrees = 500,\n                   seed = 123) \n```", "```py\n** Reported on training data. **\n** Metrics reported on Out-Of-Bag training samples **\nMSE:  0.1637001\nRMSE:  0.4045987\nLogLoss:  0.4956604\nMean Per-Class Error:  0.2835714\nAUC:  0.7844833\nAUCPR:  0.6195022\nGini:  0.5689667\nR^2:  0.2204758 \n```"]