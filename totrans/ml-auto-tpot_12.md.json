["```py\n    > chmod 400 TPOT_Book_KeyPair.pem\n    > ssh -i \"TPOT_Book_KeyPair.pem\" ubuntu@ec2-18-220-113-224.us-east-2.compute.amazonaws.com\n    > cd api\n    > python3 app.py\n    ```", "```py\n    import requests\n    ```", "```py\n    HOST ='http://ec2-18-220-113-224.us-east-2.compute.amazonaws.com'\n    PORT = '8000'\n    ENDPOINT = '/predict'\n    ```", "```py\n    URL = f'{HOST}:{PORT}{ENDPOINT}'\n    URL\n    ```", "```py\n    in_data = {\n        'SepalLength': 0.4,\n        'SepalWidth': 3.1,\n        'PetalLength': 0.1,\n        'PetalWidth': 14\n    }\n    ```", "```py\n    req = requests.post(url=URL, json=in_data)\n    req\n    ```", "```py\n    response = req.content\n    response\n    ```", "```py\n    import json\n    response_json = json.loads(response)\n    response_json\n    ```", "```py\n    response_json['Prediction']\n    ```", "```py\n    SECRET_KEY=SecretKey\n    HOST=0.0.0.0\n    PORT=9000\n    API_ENDPOINT=http://ec2-18-220-113-224.us-east-2.compute.amazonaws.com:8000/predict\n    ```", "```py\n    > pip install python-dotenv\n    ```", "```py\n    import os\n    from flask import Flask, render_template\n    from dotenv import load_dotenv\n    load_dotenv('.env')\n    app = Flask(__name__)\n    @app.route('/')\n    def index():\n        return render_template('index.html')\n    if __name__ == '__main__':\n        app.run(host=os.getenv('HOST'), port=os.getenv('PORT'))\n    ```", "```py\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>Iris Predictioner</title>\n    </head>\n    <body>\n        <h1>Welcome to Iris Predictioner</h1>\n    </body>\n    </html>\n    ```", "```py\n    forms.py file in the root directory – /webapp/forms.py. Let's take a look at the code this file contains and explain it:\n\n    ```", "```py\n\n    Okay, so what's going on in this file? Put simply, `Flask-WTF` allows us to declare forms for `Flask` applications easily, in a class format. We can use any of the built-in field types and validators. For this simple example, we'll only need float and submit fields (for flower measurements and the submit button). Validation-wise, we only want that no fields are left blank.That's all you need to do, and `Flask` will take care of the rest.\n    ```", "```py\n        import os\n        from flask import Flask, render_template\n        from forms import IrisForm\n        from dotenv import load_dotenv\n        load_dotenv('.env')\n        app = Flask(__name__)\n        app.config['SECRET_KEY'] = os.getenv('SECRET_KEY')\n        @app.route('/', methods=['GET', 'POST'])\n        def index():\n            iris_form = IrisForm()\n            if iris_form.validate_on_submit():\n                return f'''\n                        <h3>\n                            Sepal Length: {iris_form.sepal_length.data}<br>\n                            Sepal Width: {iris_form.sepal_width.data}<br>\n                            Petal Length: {iris_form.petal_length.data}<br>\n                            Petal Width: {iris_form.petal_width.data}\n                        </h3>\n                    '''\n            return render_template('index.html', iris_form=iris_form)\n        if __name__ == '__main__':\n            app.run(host=os.getenv('HOST'), port=os.getenv('PORT'))\n        ```", "```py\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>Iris Predictioner</title>\n    </head>\n    <body>\n        <h1>Welcome to Iris Predictioner</h1>\n        <form method=\"POST\" action=\"{{ url_for('index') }}\">\n            {{ iris_form.csrf_token }}\n            {{ iris_form.sepal_length.label }} {{ iris_form.sepal_length(size=18) }}\n            <br>\n            {{ iris_form.sepal_width.label }} {{ iris_form.sepal_width(size=18) }}\n            <br>\n            {{ iris_form.petal_length.label }} {{ iris_form.petal_length(size=18) }}\n            <br>\n            {{ iris_form.petal_width.label }} {{ iris_form.petal_width(size=18) }}\n            <br>\n            <input type=\"submit\" value=\"Predict\">\n        </form>\n    </body>\n    </html>\n    ```", "```py\n    import os\n    from flask import Flask, render_template\n    from forms import IrisForm\n    from dotenv import load_dotenv\n    load_dotenv('.env')\n    app = Flask(__name__)\n    app.config['SECRET_KEY'] = os.getenv('SECRET_KEY')\n    @app.route('/', methods=['GET', 'POST'])\n    def index():\n        iris_form = IrisForm()\n        if iris_form.validate_on_submit():\n            return render_template(\n                'predicted.html',\n                sepal_length=iris_form.sepal_length.data,\n                sepal_width=iris_form.sepal_width.data,\n                petal_length=iris_form.petal_length.data,\n                petal_width=iris_form.petal_width.data,\n                prediction='Prediction',\n                probability=100000\n            )\n        return render_template('index.html', iris_form=iris_form)\n    if __name__ == '__main__':\n        app.run(host=os.getenv('HOST'), port=os.getenv('PORT'))\n    ```", "```py\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <link rel=\"stylesheet\" href=\"{{ url_for('static', filename='css/main.css') }}\">\n        <title>Iris Predictioner</title>\n    </head>\n    <body>\n        <div class=\"container\">\n            <h1>Predictions:</h1>\n            <table>\n                <thead>\n                  <tr><th>Attribute</th><th>Value</th></tr>\n                </thead>\n                <tbody>\n                  <tr><td>Sepal Length</td><td>{{ sepal_length }}</td></tr>\n                  <tr><td>Sepal Width</td><td>{{ sepal_width }}</td></tr>\n                  <tr><td>Petal Length</td>td>{{ petal_length }}</td></tr>\n                  <tr><td>Petal Width</td><td>{{ petal_width }}</td></tr>\n                  <tr><td>Prediction</td><td>{{ prediction }}</td></tr>\n                  <tr><td>Probability</td><td>{{ probability }}</td></tr>\n                </tbody>\n            </table>\n        </div>\n    </body>\n    </html>\n    ```", "```py\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <link rel=\"stylesheet\" href=\"{{ url_for('static', filename='css/main.css') }}\">\n        <title>Iris Predictioner</title>\n    </head>\n    <body>\n        <div class=\"container\">\n            <h1>Welcome to Iris Predictioner</h1>\n            <form method=\"POST\" action=\"{{ url_for('index') }}\">\n                {{ iris_form.csrf_token }}\n                <div class=\"single-input\">\n                    {{ iris_form.sepal_length.label }} {{ iris_form.sepal_length(size=18) }}\n                </div>\n                <div class=\"single-input\">\n                    {{ iris_form.sepal_width.label }} {{ iris_form.sepal_width(size=18) }}\n                </div>\n                <div class=\"single-input\">\n                    {{ iris_form.petal_length.label }} {{ iris_form.petal_length(size=18) }}\n                </div>\n                <div class=\"single-input\">\n                    {{ iris_form.petal_width.label }} {{ iris_form.petal_width(size=18) }}\n                </div>\n                <input class=\"btn-submit\" type=\"submit\" value=\"Predict\">\n            </form>\n        </div>\n    </body>\n    </html>\n    ```", "```py\n    @import url('https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600&display=swap');\n    * { margin: 0; padding: 0; box-sizing: border-box;\n        font-family: 'Open Sans', sans-serif; }\n    body { background-color: #f2f2f2; }\n    .container { width: 800px; height: 100vh; margin: 0 auto;\n        background-color: #ffffff; padding: 0 35px; }\n    .container > h1 { padding: 35px 0; font-size: 36px;\n        font-weight: 600; }\n    .single-input { display: flex; flex-direction: column;\n        margin-bottom: 20px; }\n    .single-input label { font-weight: 600; }\n    .single-input label::after { content: \":\" }\n    .single-input input { height: 35px; line-height: 35px;\n        padding-left: 10px; }\n    .btn-submit { width: 100%; height: 35px;\n        background-color: #f2f2f2; font-weight: 600;\n        cursor: pointer; border: 2px solid #dddddd;\n        border-radius: 8px; }\n    table { font-size: 18px; width: 100%; text-align: left; }\n    ```", "```py\n    import os\n    import json\n    import requests\n    from dotenv import load_dotenv\n    load_dotenv('.env')\n    def predict(sepal_length, sepal_width, petal_length, petal_width):\n        URL = os.getenv('API_ENDPOINT')\n        req = requests.post(\n            url=URL,\n            json={\n                'SepalLength': sepal_length,\n                'SepalWidth': sepal_width,\n                'PetalLength': petal_length,\n                'PetalWidth': petal_width\n            }\n        )\n        response = json.loads(req.content)\n        return response\n    ```", "```py\n    import os\n    import numpy as np\n    from flask import Flask, render_template\n    from forms import IrisForm\n    from predictor import predict\n    from dotenv import load_dotenv\n    load_dotenv('.env')\n    app = Flask(__name__)\n    app.config['SECRET_KEY'] = os.getenv('SECRET_KEY')\n    @app.route('/', methods=['GET', 'POST'])\n    def index():\n        iris_form = IrisForm()\n        if iris_form.validate_on_submit():\n            pred_response = predict(\n                sepal_length=iris_form.sepal_length.data,\n                sepal_width=iris_form.sepal_width.data,\n                petal_length=iris_form.petal_length.data,\n                petal_width=iris_form.petal_width.data\n            )\n            return render_template(\n                'predicted.html',\n                sepal_length=pred_response['In_PetalLength'],\n                sepal_width=pred_response['In_PetalWidth'],\n                petal_length=pred_response['In_SepalLength'],\n                petal_width=pred_response['In_SepalWidth'],\n                prediction=pred_response['Prediction'],\n                probability=f\"{np.round((pred_response['Probability'] * 100), 2)}%\"\n            )\n        return render_template('index.html', iris_form=iris_form)\n    if __name__ == '__main__':\n        app.run(host=os.getenv('HOST'), port=os.getenv('PORT'))\n    ```"]