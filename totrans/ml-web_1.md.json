["```py\n\nimport pandas as pd\n\ndf = pd.read_csv('ad-dataset/ad.data',header=None)\n\ndf=df.replace({'?': np.nan})\n\ndf=df.replace({'  ?': np.nan})\n\ndf=df.replace({'   ?': np.nan})\n\ndf=df.replace({'    ?': np.nan})\n\ndf=df.replace({'     ?': np.nan})\n\ndf=df.fillna(-1)\n\n```", "```py\n\nadindices = df[df.columns[-1]]== 'ad.'\n\ndf.loc[adindices,df.columns[-1]]=1\n\nnonadindices = df[df.columns[-1]]=='nonad.'\n\ndf.loc[nonadindices,df.columns[-1]]=0\n\ndf[df.columns[-1]]=df[df.columns[-1]].astype(float)\n\ndf.apply(lambda x: pd.to_numeric(x))\n\n```", "```py\n\nimport numpy as np\n\ndataset = df.values[:,:]\n\nnp.random.shuffle(dataset)\n\ndata = dataset[:,:-1]\n\nlabels = dataset[:,-1].astype(float)\n\nntrainrows = int(len(data)*.8)\n\ntrain = data[:ntrainrows,:]\n\ntrainlabels = labels[:ntrainrows]\n\ntest = data[ntrainrows:,:]\n\ntestlabels = labels[ntrainrows:]\n\n```", "```py\n\nfrom sklearn.svm import SVC\n\nclf = SVC(gamma=0.001, C=100.)\n\nclf.fit(train, trainlabels)\n\n```", "```py\n\nscore=clf.score(test,testlabels)\n\nprint 'score:',score\n\n```", "```py\n\n>>> sudo pip install modulename\n\n```", "```py\n\nimport numpy as np\n\n```", "```py\n\n>>> def sum_trad():\n\n>>>   start = time.time()\n\n>>>   X = range(10000000)\n\n>>>   Y = range(10000000)\n\n>>>   Z = []\n\n>>>   for i in range(len(X)):\n\n>>>       Z.append(X[i] + Y[i])\n\n>>>   return time.time() - start\n\n```", "```py\n\n>>> def sum_numpy():\n\n>>> \n\nstart = time.time()\n\n>>>   X = np.arange(10000000) \n\n>>>   Y = np.arange(10000000) \n\n>>>   Z=X+Y\n\n>>>   return time.time() - start\n\n>>> print 'time sum:',sum_trad(),'  time sum numpy:',sum_numpy()\n\ntime sum: 2.1142539978   time sum numpy: 0.0807049274445\n\n```", "```py\n\n>>> arr = np.array([2, 6, 5, 9], float)\n\n>>> arr\n\narray([ 2., 6., 5., 9.])\n\n>>> type(arr)\n\n<type 'numpy.ndarray'>\n\n```", "```py\n\n>>> arr = np.array([1, 2, 3], float)\n\n>>> arr.tolist()\n\n[1.0, 2.0, 3.0]\n\n>>> list(arr)\n\n[1.0, 2.0, 3.0]\n\n```", "```py\n\n>>> arr = np.array([1, 2, 3], float)\n\n>>> arr1 = arr\n\n>>> arr2 = arr.copy()\n\n>>> arr[0] = 0\n\n>>> arr\n\narray([0., 2., 3.])\n\n>>> arr1\n\narray([0., 2., 3.])\n\n>>> arr2\n\narray([1., 2., 3.])\n\n```", "```py\n\n>>> arr = np.array([10, 20, 33], float)\n\n>>> arr\n\narray([ 10., 20., 33.])\n\n>>> arr.fill(1)\n\n>>> arr\n\narray([ 1., 1., 1.])\n\n```", "```py\n\n>>> np.random.permutation(3)\n\narray([0, 1, 2])\n\n```", "```py\n\n>>> np.random.normal(0,1,5)\n\narray([-0.66494912,  0.7198794 , -0.29025382,  0.24577752,  0.23736908])\n\n```", "```py\n\n>>> np.random.random(5)\n\narray([ 0.48241564,  0.24382627,  0.25457204,  0.9775729 ,  0.61793725])\n\n```", "```py\n\n>>> np.identity(5, dtype=float)\n\narray([[ 1.,  0.,  0.,  0.,  0.],\n\n [ 0.,  1.,  0.,  0.,  0.],\n\n [ 0.,  0.,  1.,  0.,  0.],\n\n [ 0.,  0.,  0.,  1.,  0.],\n\n [ 0.,  0.,  0.,  0.,  1.]])\n\n```", "```py\n\n>>> np.eye(3, k=1, dtype=float)\n\narray([[ 0.,  1.,  0.],\n\n [ 0.,  0.,  1.],\n\n [ 0.,  0.,  0.]])\n\n```", "```py\n\n>>> np.ones((2,3), dtype=float)\n\narray([[ 1., 1., 1.],\n\n [ 1., 1., 1.]])\n\n>>> np.zeros(6, dtype=int)\n\narray([0, 0, 0, 0, 0, 0])\n\n```", "```py\n\n>>> arr = np.array([[13, 32, 31], [64, 25, 76]], float)\n\n>>> np.zeros_like(arr)\n\narray([[ 0.,  0.,  0.],\n\n [ 0.,  0.,  0.]])\n\n>>> np.ones_like(arr)\n\narray([[ 1.,  1.,  1.],\n\n [ 1.,  1.,  1.]])\n\n```", "```py\n\n>>> arr1 = np.array([1,3,2])\n\n>>> arr2 = np.array([3,4,6])\n\n>>> np.vstack([arr1,arr2])\n\narray([[1, 3, 2],\n\n [3, 4, 6]])\n\n```", "```py\n\n>>> np.random.rand(2,3)\n\narray([[ 0.36152029,  0.10663414,  0.64622729],\n\n [ 0.49498724,  0.59443518,  0.31257493]])\n\n```", "```py\n\n>>> np.random.multivariate_normal([10, 0], [[3, 1], [1, 4]], size=[5,])\n\narray([[ 11.8696466 ,  -0.99505689],\n\n [ 10.50905208,   1.47187705],\n\n [  9.55350138,   0.48654548],\n\n [ 10.35759256,  -3.72591054],\n\n [ 11.31376171,   2.15576512]])\n\n```", "```py\n\n>>> arr = np.array([2., 6., 5., 5.])\n\n>>> arr[:3]\n\narray([ 2., 6., 5.])\n\n>>> arr[3]\n\n5.0\n\n>>> arr[0] = 5.\n\n>>> arr\n\narray([ 5., 6., 5., 5.])\n\n```", "```py\n\n>>> np.unique(arr)\n\narray([ 5., 6., 5.])\n\n```", "```py\n\n>>> np.sort(arr)\n\narray([ 2.,  5.,  5.,  6.])\n\n>>> np.argsort(arr)\n\narray([0, 2, 3, 1])\n\n```", "```py\n\n>>> np.random.shuffle(arr)\n\n>>> arr\n\narray([ 2.,  5.,  6.,  5.])\n\n```", "```py\n\n>>> np.array_equal(arr,np.array([1,3,2]))\n\nFalse\n\n```", "```py\n\n>>> matrix = np.array([[ 4., 5., 6.], [2, 3, 6]], float)\n\n>>> matrix\n\narray([[ 4., 5., 6.],\n\n [ 2., 3., 6.]])\n\n>>> matrix[0,0]\n\n4.0\n\n>>> matrix[0,2]\n\n6.0\n\n```", "```py\n\n>>> arr = np.array([[ 4., 5., 6.], [ 2., 3., 6.]], float)\n\n>>> arr[1:2,2:3]\n\narray([[ 6.]])\n\n```", "```py\n\n>>> arr[1,:]\n\narray([2, 3, 6])\n\n>>> arr[:,2]\n\narray([ 6., 6.])\n\n>>> arr[-1:,-2:]\n\narray([[ 3., 6.]])\n\n```", "```py\n\n>>> arr = np.array([[10, 29, 23], [24, 25, 46]], float)\n\n>>> arr\n\narray([[ 10.,  29.,  23.],\n\n [ 24.,  25.,  46.]])\n\n>>> arr.flatten()\n\narray([ 10.,  29.,  23.,  24.,  25.,  46.])\n\n```", "```py\n\n>>> arr.shape\n\n(2, 3)\n\n```", "```py\n\n>>> arr.dtype\n\ndtype('float64')\n\n```", "```py\n\n>>>int_arr = matrix.astype(np.int32)\n\n>>>int_arr.dtype\n\ndtype('int32')\n\n```", "```py\n\n>>>arr = np.array([[ 4., 5., 6.], [ 2., 3., 6.]], float)\n\n>>> len(arr)\n\n2\n\n```", "```py\n\n>>> arr = np.array([[ 4., 5., 6.], [ 2., 3., 6.]], float)\n\n>>> 2 in arr\n\nTrue\n\n>>> 0 in arr\n\nFalse\n\n```", "```py\n\n>>> arr = np.array(range(8), float)\n\n>>> arr\n\narray([ 0., 1., 2., 3., 4., 5., 6., 7.])\n\n>>> arr = arr.reshape((4,2))\n\n>>> arr\n\narray([[ 0.,  1.],\n\n [ 2.,  3.],\n\n[ 4.,  5.],\n\n [ 6.,  7.]])\n\n>>> arr.shape\n\n(4, 2)\n\n```", "```py\n\n>>> arr = np.array(range(6), float).reshape((2, 3))\n\n>>> arr\n\narray([[ 0., 1., 2.],\n\n [ 3., 4., 5.]])\n\n>>> arr.transpose()\n\narray([[ 0., 3.],\n\n [ 1., 4.],\n\n [ 2., 5.]])\n\n```", "```py\n\n>>> matrix = np.arange(15).reshape((3, 5))\n\n>>> matrix\n\narray([[ 0, 1, 2, 3, 4], \n\n [ 5, 6, 7, 8, 9], \n\n [10, 11, 12, 13, 14]]) \n\n>>>matrix .T\n\narray([[ 0, 5, 10],\n\n [ 1, 6, 11],\n\n [ 2, 6, 12],\n\n[ 3, 8, 13],\n\n [ 4, 9, 14]])\n\n```", "```py\n\n>>> arr = np.array([14, 32, 13], float)\n\n>>> arr\n\narray([ 14.,  32.,  13.])\n\n>> arr[:,np.newaxis]\n\narray([[ 14.],\n\n [ 32.],\n\n [ 13.]])\n\n>>> arr[:,np.newaxis].shape\n\n(3,1)\n\n>>> arr[np.newaxis,:]\n\narray([[ 14.,  32.,  13.]])\n\n>>> arr[np.newaxis,:].shape\n\n(1,3)\n\n```", "```py\n\n>>> arr1 = np.array([10,22], float)\n\n>>> arr2 = np.array([31,43,54,61], float)\n\n>>> arr3 = np.array([71,82,29], float)\n\n>>> np.concatenate((arr1, arr2, arr3))\n\narray([ 10.,  22.,  31.,  43.,  54.,  61.,  71.,  82.,  29.])\n\n```", "```py\n\n>>> arr1 = np.array([[11, 12], [32, 42]], float)\n\n```", "```py\n\n>>> arr2 = np.array([[54, 26], [27,28]], float)\n\n>>> np.concatenate((arr1,arr2))\n\narray([[ 11.,  12.],\n\n [ 32.,  42.],\n\n [ 54.,  26.],\n\n [ 27.,  28.]])\n\n>>> np.concatenate((arr1,arr2), axis=0)\n\narray([[ 11.,  12.],\n\n [ 32.,  42.],\n\n [ 54.,  26.],\n\n [ 27.,  28.]])\n\n>>> np.concatenate((arr1,arr2), axis=1)\n\narray([[ 11.,  12.,  54.,  26.],\n\n [ 32.,  42.,  27.,  28.]])\n\n```", "```py\n\n>>> arr = np.array([10, 20, 30], float)\n\n>>> str = arr.tostring()\n\n>>> str\n\n'\\x00\\x00\\x00\\x00\\x00\\x00$@\\x00\\x00\\x00\\x00\\x00\\x004@\\x00\\x00\\x00\\x00\\x00\\x00>@'\n\n>>> np.fromstring(str)\n\narray([ 10., 20., 30.])\n\n```", "```py\n\n>>> arr1 = np.array([1,2,3], float)\n\n>>> arr2 = np.array([1,2,3], float)\n\n>>> arr1 + arr2\n\narray([2.,4., 6.])\n\n>>> arr1â€“arr2\n\narray([0., 0., 0.])\n\n>>> arr1 * arr2\n\narray([51, 4., 9.])\n\n>>> arr2 / arr1\n\narray([1., 1., 1.])\n\n>>> arr1 % arr2\n\narray([0., 0., 0.])\n\n>>> arr2**arr1\n\narray([1., 4., 9.])\n\n```", "```py\n\n>>> arr1 = np.array([1,2,3], float)\n\n>>> arr2 = np.array([1,2], float)\n\n>>> arr1 + arr2\n\nTraceback (most recent call last):\n\nFile \"<stdin>\", line 1, in <module>\n\nValueError: shape mismatch: objects cannot be broadcast to a single shape\n\n```", "```py\n\n>>> arr1 = np.array([[1, 2], [3, 4], [5, 6]], float)\n\n>>> arr2 = np.array([1, 2], float)\n\n>>> arr1\n\narray([[ 1., 2.],\n\n [ 3., 4.],\n\n [ 5., 6.]])\n\n>>> arr2\n\narray([1., 1.])\n\n>>> arr1 + arr2\n\narray([[ 2., 4.],\n\n [ 4., 6.],\n\n [ 6., 8.]])\n\n```", "```py\n\narray([[1., 2.],[1., 2.],[1., 2.]])\n\n```", "```py\n\n>>> arr1 = np.zeros((2,2), float)\n\n>>> arr2 = np.array([1., 2.], float)\n\n>>> arr1\n\narray([[ 0., 0.],[ 0., 0.]])\n\n>>> arr2\n\narray([1., 2.])\n\n>>> arr1 + arr2\n\narray([[-1., 3.],[-1., 3.]])\n\n>>> arr1 + arr2[np.newaxis,:]\n\narray([[1., 2.],[1., 2.]])\n\n>>> arr1 + arr2[:,np.newaxis]\n\narray([[1.,1.],[ 2., 2.]])\n\n```", "```py\n\n>>> arr = np.array([[1, 2], [5, 9]], float)\n\n>>> arr >= 7\n\narray([[ False, False],\n\n[False, True]], dtype=bool)\n\n>>> arr[arr >= 7]\n\narray([ 9.])\n\n```", "```py\n\n>>> arr[np.logical_and(arr > 5, arr < 11)]\n\n>>> arr\n\narray([ 9.])\n\n```", "```py\n\n>>> arr1 = np.array([1, 4, 5, 9], float)\n\n>>> arr2 = np.array([0, 1, 1, 3, 1, 1, 1], int)\n\n>>> arr1[arr2]\n\narray([ 1., 4., 4., 9., 4., 4., 4.])\n\n```", "```py\n\n>>> arr = np.array([1, 4, 5, 9], float)\n\n>>> arr[[0, 1, 1, 3, 1]]\n\narray([ 1., 4., 4., 9., 4.])\n\n```", "```py\n\n>>> arr1 = np.array([[1, 2], [5, 13]], float)\n\n>>> arr2 = np.array([1, 0, 0, 1], int)\n\n>>> arr3 = np.array([1, 1, 0, 1], int)\n\n>>> arr1[arr2,arr3]\n\narray([ 13.,   2.,   1.,  13.])\n\n```", "```py\n\n>>> arr1 = np.array([7, 6, 6, 9], float)\n\n>>> arr2 = np.array([1, 0, 1, 3, 3, 1], int)\n\n>>> arr1.take(arr2)\n\narray([ 6.,  7.,  6.,  9.,  9.,  6.])\n\n```", "```py\n\n>>> arr1 = np.array([[10, 21], [62, 33]], float)\n\n>>> arr2 = np.array([0, 0, 1], int)\n\n>>> arr1.take(arr2, axis=0)\n\narray([[ 10.,  21.],\n\n [ 10.,  21.],\n\n [ 62.,  33.]])\n\n>>> arr1.take(arr2, axis=1)\n\narray([[ 10.,  10.,  21.],\n\n [ 62.,  62.,  33.]])\n\n```", "```py\n\n>>> arr1 = np.array([2, 1, 6, 2, 1, 9], float)\n\n>>> arr2 = np.array([3, 10, 2], float)\n\n>>> arr1.put([1, 4], arr2)\n\n>>> arr1\n\narray([ 2.,  3.,  6.,  2.,  10.,  9.])\n\n```", "```py\n\n>>> arr1 = np.array([[11,22], [23,14]], float)\n\n>>> arr2 = np.array([[25,30], [13,33]], float)\n\n>>> arr1 * arr2\n\narray([[ 275.,  660.],\n\n [ 299.,  462.]])\n\n```", "```py\n\n>>> X = np.arange(15).reshape((3, 5))\n\n>>> X\n\narray([[ 0, 1, 2, 3, 4], \n\n [ 5, 6, 7, 8, 9], \n\n [10, 11, 12, 13, 14]]) \n\n>>> X.T\n\narray([[ 0, 5, 10],\n\n [ 1, 6, 11],\n\n [ 2, 6, 12],\n\n [ 3, 8, 13],\n\n [ 4, 9, 14]])\n\n>>>np.dot(X .T, X)#X^T X\n\narray([[ 2.584 , 1.8753, 0.8888], \n\n [ 1.8753, 6.6636, 0.3884], \n\n [ 0.8888, 0.3884, 3.9781]])\n\n```", "```py\n\n>>> arr1 = np.array([12, 43, 10], float)\n\n>>> arr2 = np.array([21, 42, 14], float)\n\n>>> np.outer(arr1, arr2)\n\narray([[  252.,   504.,   168.],\n\n [  903.,  1806.,   602.],\n\n [  210.,   420.,   140.]])\n\n>>> np.inner(arr1, arr2)\n\n2198.0\n\n>>> np.cross(arr1, arr2)\n\narray([ 182.,   42., -399.])\n\n```", "```py\n\n>>> matrix = np.array([[74, 22, 10], [92, 31, 17], [21, 22, 12]], float)\n\n>>> matrix\n\narray([[ 74.,  22.,  10.],\n\n [ 92.,  31.,  17.],\n\n [ 21.,  22.,  12.]])\n\n>>> np.linalg.det(matrix)\n\n-2852.0000000000032\n\n```", "```py\n\n>>> inv_matrix = np.linalg.inv(matrix)\n\n>>> inv_matrix\n\narray([[ 0.00070126,  0.01542777, -0.02244039],\n\n [ 0.26192146, -0.23772791,  0.11851332],\n\n [-0.48141655,  0.4088359 , -0.09467041]])\n\n>>> np.dot(inv_matrix,matrix)\n\narray([[  1.00000000e+00,   2.22044605e-16,   4.77048956e-17],\n\n [ -2.22044605e-15,   1.00000000e+00,   0.00000000e+00],\n\n [ -3.33066907e-15,  -4.44089210e-16,   1.00000000e+00]])\n\n```", "```py\n\n>>> vals, vecs = np.linalg.eig(matrix)\n\n>>> vals\n\narray([ 107.99587441,   11.33411853,   -2.32999294])\n\n>>> vecs\n\narray([[-0.57891525, -0.21517959,  0.06319955],\n\n [-0.75804695,  0.17632618, -0.58635713],\n\n [-0.30036971,  0.96052424,  0.80758352]])\n\n```", "```py\n\n>>> arr = np.random.rand(8, 4)\n\n>>> arr.mean()\n\n0.45808075801881332\n\n>>> np.mean(arr)\n\n0.45808075801881332\n\n>>> arr.sum()\n\n14.658584256602026\n\n```", "```py\n       import pandas as pd\n```"]