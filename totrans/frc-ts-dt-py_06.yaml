- en: '6'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Forecasting Holiday Effects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Because Prophet was designed to handle business forecasting cases, it is important
    to include the effects of holidays, which naturally play a large role in business
    activities. Just as bike-share commuters will ride more frequently in the summer
    than in the winter, or on Tuesdays than on Sundays, it is reasonable to hypothesize
    that they would ride less than otherwise expected on Thanksgiving, for example.
  prefs: []
  type: TYPE_NORMAL
- en: Fortunately, Prophet includes robust support for including the effects of holidays
    in your forecasts. Furthermore, the techniques Prophet has for including the effects
    of holidays can be used to add any holiday-like event, such as the food festival
    that we will model in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Similar to the seasonality effects you learned about in the previous chapter,
    Prophet contains default holidays that you can apply to your models, as well as
    custom holidays that you can create yourself. This chapter will cover both situations.
    Additionally, you will learn how to control the strength of holiday effects using
    the technique that you learned to use for seasonality: regularization.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn how to go about doing the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Adding default country holidays
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding default state or province holidays
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating custom holidays
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating multi-day holidays
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Regularizing holidays
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The data files and code for the examples in this chapter can be found at [https://github.com/PacktPublishing/Forecasting-Time-Series-Data-with-Prophet-Second-Edition](https://github.com/PacktPublishing/Forecasting-Time-Series-Data-with-Prophet-Second-Edition).
  prefs: []
  type: TYPE_NORMAL
- en: Adding default country holidays
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Prophet uses the Python `holidays` package to populate a default list of holidays
    by country and, optionally, by state or province. To specify which region to build
    a holiday list for, Prophet requires the name or ISO code of that country. A complete
    list of all countries available, with their ISO codes, and also any states or
    provinces that can be included, can be viewed in the package’s `README` file here:
    [https://github.com/dr-prodigy/python-holidays#available-countries](https://github.com/dr-prodigy/python-holidays#available-countries).'
  prefs: []
  type: TYPE_NORMAL
- en: To add the default holidays, Prophet includes an `add_country_holidays` method,
    which simply takes the ISO code for that country. Let’s walk through an example
    using the Divvy dataset again, first adding holidays for the United States, and
    then including a few additional holidays specific to Illinois, as Divvy is located
    in Chicago.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will begin just as we have learned to do with our other models in this book,
    by importing the necessary libraries, loading our data, and instantiating our
    model. As you learned how to do in [*Chapter 5*](B19630_05.xhtml#_idTextAnchor254),
    *Working with Seasonality*, we will set the seasonality mode to multiplicative
    and the yearly seasonality to a Fourier order of `4`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This next line is all that is required to populate the model with a list of
    holidays for the United States:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, to complete the model, all we need to do is call `fit` as usual on the
    training DataFrame, make our future DataFrame, and call `predict` on it. We will
    plot the forecast and components to view our results:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The output forecast plot looks very similar to *Figure 5**.7* from [*Chapter
    5*](B19630_05.xhtml#_idTextAnchor254), *Working* *with Seasonality*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.1 – Divvy forecast including US holidays](img/Fig_6.1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.1 – Divvy forecast including US holidays
  prefs: []
  type: TYPE_NORMAL
- en: 'However, the eagle-eyed may notice some downward spikes around the middle of
    the year and the end of the year. To discern what those are, we will look at the
    `components` plot as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'In the output of those commands, the trend and both weekly and yearly seasonalities
    are again included and look much the same. However, there is a new plot shown:
    holidays, as seen here (note that the preceding code produces a full `components`
    plot; the following figure is a crop of that image):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.2 – Divvy US holidays component](img/Fig_6.2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.2 – Divvy US holidays component
  prefs: []
  type: TYPE_NORMAL
- en: This shows spikes where Divvy deviates from the trend, each spike corresponding
    to a holiday. Each holiday shows decreased usage except for one, which occurs
    in the final quarter of each year. Let’s investigate this.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can view the holidays included in our model with this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'This outputs a Python object containing an index and the holiday names included
    in the model:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.3 – US holidays](img/Fig_6.3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.3 – US holidays
  prefs: []
  type: TYPE_NORMAL
- en: Each of these holidays has been included in the `forecast` DataFrame that was
    covered in [*Chapter 2*](B19630_02.xhtml#_idTextAnchor104), *Getting Started with
    Prophet*. For each holiday, three new columns are added for the predicted effect
    of that holiday, as well as lower and upper bounds for the uncertainty, for example,
    `"New Year's Day"`, `"New Year's Day_lower"`, and `"New Year's Day_upper"`. Using
    these new columns, we can see precisely what effect each holiday has on our forecast
    by printing the first non-zero value for each holiday in the `forecast` DataFrame.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do this, let’s create a quick function called `first_non_zero`. The function
    takes a `forecast` DataFrame and the name of a holiday; it returns the first value
    for that holiday that does not equal zero. Then, we’ll use a Python list comprehension
    to loop over each holiday name and call the `first_non_zero` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Because each row of the `forecast` DataFrame is a date, most of the values in
    each holiday column will be zero, as the holiday does not affect these dates.
    On the date the holiday occurs, the value will either be positive, indicating
    more ridership than otherwise expected, or negative, for less ridership.
  prefs: []
  type: TYPE_NORMAL
- en: 'Prophet models each holiday as having the same effect every year, so this value
    will be constant from year to year. Because we set `seasonality_mode=''multiplicative''`
    in this case, these effects are calculated as a percentage deviation from the
    trend (just to make it clear: the global `seasonality_mode` affects holidays as
    well). The following table shows these effects:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.4 – Holiday effect values](img/Fig_6.4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.4 – Holiday effect values
  prefs: []
  type: TYPE_NORMAL
- en: Now, we can clearly see that `Columbus Day` creates a 5% boost to ridership
    for Divvy. All other holidays have negative effects, with Labor Day having the
    strongest at 69% fewer riders than the trend would otherwise predict.
  prefs: []
  type: TYPE_NORMAL
- en: This process you’ve just learned is Prophet’s basic holiday functionality; it’s
    analogous to the default seasonalities produced when no additional arguments are
    provided to Prophet. It works great in many cases and is often all that the model
    will require. But, just as the analyst can take finer control of seasonality effects,
    there are several techniques the analyst can use to control holidays beyond the
    default settings. In the next section, we’ll cover the process for adding holidays
    specific to a state or province.
  prefs: []
  type: TYPE_NORMAL
- en: Adding default state/province holidays
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Adding the holidays specific to Illinois is not so straightforward, because
    the `add_country_holidays` method only takes an argument for the country, but
    not the state or province. To add state- or province-level holidays, we need to
    use a new Prophet function, `make_holidays_df`. Let’s import it here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'This function takes a list of years for which to populate the holidays as input,
    as well as arguments for the country and state or province. Note that you must
    use all years in your training DataFrame, as well as all the years for which you
    intend to predict. That is why, in the following code, we build a year list to
    contain all unique years in the training DataFrame. Then, because our `make_future_dataframe`
    command will add one year to the forecast, we need to extend that year list to
    include one additional year:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Before moving on, let’s take a quick look at the format of this `holidays`
    DataFrame by printing the first five rows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see from the following output, the `holidays` DataFrame consists
    of two columns, `ds` and `holiday`, with the date of the holiday and its name,
    respectively:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.5 – Illinois holidays](img/Fig_6.5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.5 – Illinois holidays
  prefs: []
  type: TYPE_NORMAL
- en: 'To load these holidays into our Prophet model, we simply pass the `holidays`
    DataFrame to our model when we instantiate it and continue as we have before:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'If you go ahead and call `model.train_holiday_names` again, you will see four
    additional holidays specific to Illinois that are not official United States holidays:
    Lincoln’s Birthday, Casimir Pulaski Day, Election Day, and Lincoln’s Birthday
    (Observed).'
  prefs: []
  type: TYPE_NORMAL
- en: Creating custom holidays
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The default holidays for the United States include both Thanksgiving and Christmas,
    as they are official holidays. However, it’s quite plausible that Black Friday
    and Christmas Eve would also create ridership behavior that deviates from the
    expected trend. So, we naturally decide to include these in our forecast.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this example, we will create a DataFrame of the default US holidays in a
    similar manner to how we created the DataFrame of the Illinois holidays previously,
    and then add our custom holidays to it. To create custom holidays, you simply
    need to create a DataFrame with two columns: `holiday` and `ds`. As done previously,
    it must include all occurrences of the holiday in the past (at least, as far back
    as your training data goes) and into the future that we intend to forecast.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this example, we will start by creating the `holidays` DataFrame populated
    with the default US holidays and use the `year_list` from the previous example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'We are going to enrich this list of default holidays with our custom holidays,
    so now we will create two DataFrames with the specified columns (`holiday` and
    `ds`), one for `Black Friday` and one for `Christmas Eve`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Of course, you could create just one DataFrame with both holidays as individual
    rows, but for clarity, I have separated them out.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we just need to concatenate these three `holiday` DataFrames into
    one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: It is not strictly necessary to sort the values or reset the index, as we did
    in the preceding code, but it does make the DataFrame more visually clear if you
    intend to inspect it.
  prefs: []
  type: TYPE_NORMAL
- en: 'With our `holidays` DataFrame complete, we now pass it to Prophet when we instantiate
    the model, just as we did with the Illinois holidays previously, and continue
    to call `fit` and `predict`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Now, if you inspect the `forecast` DataFrame or your `components` plot, you
    will indeed see two additional holidays each year, one for Black Friday and one
    for Thanksgiving.
  prefs: []
  type: TYPE_NORMAL
- en: Creating holidays in this way allows for much more granular control over individual
    holidays. Next, we’ll look at some additional parameters you can use to tune your
    holidays.
  prefs: []
  type: TYPE_NORMAL
- en: Creating multi-day holidays
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes, a holiday or other special event will span several days. Fortunately,
    Prophet includes functionality to handle these scenarios via the `window` arguments.
    The `holidays` DataFrame we have been building to populate our holidays in the
    previous examples can include the optional columns of `'lower_window'` and `'upper_window'`.
    These columns specify additional days either before or after the main holiday
    that Prophet will model.
  prefs: []
  type: TYPE_NORMAL
- en: For example, in the previous example, we modeled Christmas and Christmas Eve
    as two different holidays. Another method would have been just to model Christmas
    but include a `'lower_window'` argument of `1`, telling Prophet to include a single
    day before Christmas as part of the holiday. This assumes, of course, that Christmas
    Eve will always fall on the day before Christmas. If, however, Christmas Eve were
    a holiday that floated and did not always fall immediately before Christmas, this
    `window` method would not be used.
  prefs: []
  type: TYPE_NORMAL
- en: Every July, Chicago holds a 5-day festival called the *Taste of Chicago*. It
    is the largest food festival in the world and Chicago’s largest festival of any
    kind. More than one million people attend each year to try food from nearly 100
    different vendors or attend popular concerts each day. With such large crowds
    of people moving around the city, it would be surprising if it had no effect at
    all on Divvy’s ridership. In this example, we will model Taste of Chicago as a
    5-day holiday and see what effect that has on Divvy’s forecast.
  prefs: []
  type: TYPE_NORMAL
- en: 'As done previously, we begin by creating the `holidays` DataFrame with the
    default US holidays. Next, we create a `taste_of_chicago` DataFrame with the dates
    set as the first day of the event each year of both our historical data and our
    forecast period. Deviating from the previous example, though, we also include
    the `''lower_window''` and `''upper_window''` columns, setting the lower to `0`
    (so we include no dates prior to the first day of the event) and the upper to
    `4` (which includes four days after the first day of the event, for a total of
    five days). Then, we concatenate the DataFrames together as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let’s take a look at the first 10 rows of the DataFrame:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'In the output, we see the additional columns, as well as the inclusion of the
    `Taste of` `Chicago` holiday:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.6 – Holidays with windows](img/Fig_6.6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.6 – Holidays with windows
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: If you’re not familiar with the `NaN` value in the preceding table, it stands
    for *Not a Number*. It’s simply a placeholder in this case and has no effect.
  prefs: []
  type: TYPE_NORMAL
- en: 'And now, we will proceed with fitting our model:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'To see what effect `Taste of Chicago` has had on Divvy’s ridership, let’s take
    a look at the `forecast` DataFrame with this `print` statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is the contents of the `forecast` DataFrame but limited to just
    the five days of the 2018 event, and the columns for the date and the effect of
    `Taste of Chicago` on ridership:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.7 – Effect of Taste of Chicago on ridership values](img/Fig_6.7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.7 – Effect of Taste of Chicago on ridership values
  prefs: []
  type: TYPE_NORMAL
- en: We can see that the first day of the event had 3.6% fewer rides than would have
    been expected without the event, the second day had 1.9% more rides, and the third
    6.8% more. The final 2 days both had about 2% more rides. The magnitudes of these
    numbers may not be as large as you had expected, especially with the 4th of July
    causing a 55% reduction in ridership. And especially when taking into account
    that one of them is negative and the other positive, it’s possible that this result
    is not a meaningful signal but instead just due to random noise. In [*Chapter
    11*](B19630_11.xhtml#_idTextAnchor728), *Managing Uncertainty Intervals*, you
    will learn how to verify whether this is a meaningful result or not.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can, however, visualize just this one holiday effect with the `plot_forecast_component`
    function from Prophet’s `plot` package. We need to import it first:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The function requires the first argument to be the model, the second argument
    to be the `forecast` DataFrame, and the third argument to be a string naming the
    component to plot; here, we will use `''Taste` `of Chicago''`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'In the output, we can visualize exactly what the table in *Figure 6**.7* displayed
    (except this time, we are displaying all years):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.8 – Taste of Chicago holiday effects](img/Fig_6.8.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.8 – Taste of Chicago holiday effects
  prefs: []
  type: TYPE_NORMAL
- en: 'The first day of the event shows reduced ridership, and the following four
    days show increased ridership. Now that we have learned the various ways you can
    add holidays to your forecasts, let’s look at one more tool for controlling holiday
    effects: regularization.'
  prefs: []
  type: TYPE_NORMAL
- en: Regularizing holidays
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The process of constraining a model’s flexibility to help it generalize better
    to new data is called **regularization**. [*Chapter 5*](B19630_05.xhtml#_idTextAnchor254),
    *Working with Seasonality,* featured a lengthy discussion about regularizing the
    effect of seasonality in Prophet. The mathematical procedure under Prophet’s hood
    is the same when regularizing both holiday and seasonality effects, so we can
    use the same concepts from the seasonality chapter and apply them to holidays.
  prefs: []
  type: TYPE_NORMAL
- en: In general, if you, as the analyst, find that your holidays have more control
    over your model than you expected, that is, if their absolute magnitudes are higher
    than you believe is accurate or necessary to model your problem, then you’ll want
    to consider regularization. Regularization will simply compress the magnitude
    of your holiday effects and forbid them from having as large an effect as they
    would otherwise. Prophet contains a `holidays_prior_scale` parameter to control
    this.
  prefs: []
  type: TYPE_NORMAL
- en: This is the same theory behind the `seasonality_prior_scale` parameter that
    we used in the previous chapter to regularize our seasonalities. Just as seasonalities
    can be regularized globally or locally, so can holidays. Let’s see how to do it
    next.
  prefs: []
  type: TYPE_NORMAL
- en: Global holiday regularization
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Prophet essentially has a default prior probability distribution of guesses
    for what effect a holiday may have and it uses this distribution to try to find
    the value that best fits the data. If that prior range of guesses is very far
    from reality, though, Prophet will struggle to find the best value. You can help
    it out a lot by giving it additional information about what values to expect so
    that it may update its prior distribution to better inform its guesses. Modifying
    the prior scale for holidays is how you provide this additional information to
    Prophet.
  prefs: []
  type: TYPE_NORMAL
- en: The values for `holidays_prior_scale` unfortunately don’t make much intuitive
    sense. They are similar to the `regularization` parameter in lasso regression
    in that they control the amount of shrinkage. However, you just need to remember
    that smaller values mean less flexibility—the holiday effect will be dampened
    through more regularization. By default, Prophet sets this value to 10\. Reasonable
    values range from 10 down to 0.001 or so.
  prefs: []
  type: TYPE_NORMAL
- en: However, every dataset is different, so you’ll find that experimentation will
    help a lot, but just like the prior scales for seasonality, you’ll find that a
    holiday prior scale between 10 and 0.01 will work out well in most cases. To see
    the effect of this variable, let’s build one model using the default value of
    10 and another model with a much smaller value of 0.05.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s also use the `plot_forecast_component` function we learned about when
    plotting the `Taste of Chicago` event, but this time, pass the `''holidays''`
    component to it, to plot all combined holiday effects together. First, we build
    the model with the default prior scale value (here, we explicitly set it to `10`
    for clarity’s sake) and then plot only the `holidays` component to see the holiday
    effect:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of that code will be just the `holidays` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.9 – The holidays component with no regularization](img/Fig_6.9.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.9 – The holidays component with no regularization
  prefs: []
  type: TYPE_NORMAL
- en: With no regularization, Thanksgiving (the longest bar in *Figure 6**.9*, which
    we discovered earlier in this chapter to have the strongest effect of all holidays)
    reduces ridership by about 65%.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let’s build another model, the same in every way except with strong regularization,
    and plot the `holidays` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Again, we used the `plot_forecast_component` function to show only the `holidays`
    component:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.10 – The holidays component with strong regularization](img/Fig_6.10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.10 – The holidays component with strong regularization
  prefs: []
  type: TYPE_NORMAL
- en: 'When regularized, the plot appears similar to the plot of unregularized holidays,
    but with a few differences. First, we see the scale has changed a lot. The strongest
    holiday effect, when regularized, shows an 11.5% reduction in ridership, compared
    to the 65% reduction in the unregularized model. The second thing to notice is
    that the holidays haven’t been reduced by an equal proportion: now, Christmas
    has the strongest effect, not Thanksgiving. This is not an error, just an effect
    of how regularization works with this many variables interacting with each other.'
  prefs: []
  type: TYPE_NORMAL
- en: Choosing a value for the prior scale can be more an art than a science. You
    may use your domain knowledge to adjust the value if the holidays’ effect seems
    stronger or weaker than your intuition suggests. If in doubt, experiment and see
    what works best. The most rigorous approach would be to use grid search with cross-validation,
    a topic that we will cover near the end of this book.
  prefs: []
  type: TYPE_NORMAL
- en: Using the `holidays_prior_scale` parameter as we did previously adjusts all
    holidays globally; each holiday across the board is regularized the same amount.
    For more control, Prophet provides functionality to adjust the prior scale for
    each individual holiday through the custom holiday interface. In the next example,
    we’ll see just how to do that.
  prefs: []
  type: TYPE_NORMAL
- en: Individual holiday regularization
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When adding a new holiday, we created a DataFrame containing two required columns,
    `ds` and `holiday`, and two optional columns, `lower_window` and `upper_window`.
    There is one final optional column we can include in this DataFrame, namely `prior_scale`.
    If any holidays have no value in this column (or if the column doesn’t even exist
    in the DataFrame), then the holidays will revert to the global `holidays_prior_scale`
    value that we saw in the previous example. In the following example, though, we
    will add this column and modify some holidays’ prior scales individually.
  prefs: []
  type: TYPE_NORMAL
- en: 'As we have done earlier, we will build the default holiday list and add some
    additional holidays. This time around, we will add `Black Friday` and `Christmas
    Eve` with a prior scale of `1` and the `Taste of Chicago` 5-day event with a prior
    scale of `0.1`. All other holidays will keep the default prior scale of `10`.
    First, we will use the same `year_list` created previously to create our `holidays`
    DataFrame:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'This is Prophet’s default list of holidays for the US; we want to enrich the
    list with our three additional holidays, so now we’ll create a DataFrame for each
    of them. Note that we specify `''prior_scale''` for each holiday:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'The last step is to combine these four DataFrames:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'In the DataFrames for `Black Friday`, `Christmas Eve`, and `Taste of Chicago`,
    we added that additional `prior_scale` column. Let’s print the first 16 rows of
    the `holidays` DataFrame to confirm this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see in the following table, we have our 10 default holidays, with
    no prior scale or windows added. We have the `Taste of Chicago` event with the
    upper window for 4 additional days and a prior scale of `0.1`. Both `Black Friday`
    and `Christmas Eve` have prior scales of `1`. Prophet will apply the default prior
    scale where it’s missing when it builds the model. Remember, `NaN`, for *Not a
    Number*, means an empty cell in this case:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 6.11 – Holidays\uFEFF with prior scales](img/Fig_6.11.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 6.11 – Holidays with prior scales
  prefs: []
  type: TYPE_NORMAL
- en: 'With our `holidays` DataFrame built, we simply continue to instantiate our
    model, fit it, and predict in order to build the forecast:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Now with the `forecast` DataFrame created, you can experiment on your own using
    the plotting tools you’ve learned about so far to explore the results.
  prefs: []
  type: TYPE_NORMAL
- en: Choosing an appropriate prior scale, both for holidays and for seasonalities,
    may sometimes be difficult. Prophet’s default values tend to work very well in
    most cases, but there may be times when you need to change them and struggle to
    find the best value. In these cases, cross-validation is your best approach. You
    will learn how to use cross-validation with an appropriate performance metric
    to optimize your Prophet models in [*Chapter 13*](B19630_13.xhtml#_idTextAnchor839),
    *Evaluating* *Performance Metrics*.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you first learned how to add the default holidays for a country
    and then went a bit deeper by adding any state or province holidays. After that,
    you learned how to add custom holidays and expanded this technique to adjust for
    holidays that span multiple days. Finally, you learned what regularization is
    and how it is used to control overfitting, and how to apply it globally to all
    holidays in your model or more granularly by specifying different regularizations
    for each individual holiday.
  prefs: []
  type: TYPE_NORMAL
- en: Holidays often cause massive spikes in time series and ignoring their effects
    will cause Prophet to perform very poorly in its forecast results. The tools in
    this chapter will allow your models to accommodate these external events and provide
    a way to predict the effects running into the future.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we’ll look at the different growth modes available in Prophet.
    So far, all our models have had linear growth, but that may not be the only mode
    you will encounter in your forecasting work!
  prefs: []
  type: TYPE_NORMAL
