- en: '6'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '6'
- en: Forecasting Holiday Effects
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 预测假期效应
- en: Because Prophet was designed to handle business forecasting cases, it is important
    to include the effects of holidays, which naturally play a large role in business
    activities. Just as bike-share commuters will ride more frequently in the summer
    than in the winter, or on Tuesdays than on Sundays, it is reasonable to hypothesize
    that they would ride less than otherwise expected on Thanksgiving, for example.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Prophet 是为了处理商业预测案例而设计的，因此包含假期效应是很重要的，这在商业活动中自然起着重要作用。就像共享单车通勤者在夏天比冬天骑得更多，或者在星期二比星期日骑得更多一样，合理地假设他们在感恩节等节日骑行的次数会少于预期。
- en: Fortunately, Prophet includes robust support for including the effects of holidays
    in your forecasts. Furthermore, the techniques Prophet has for including the effects
    of holidays can be used to add any holiday-like event, such as the food festival
    that we will model in this chapter.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，Prophet 包括对在预测中包含假期效应的强大支持。此外，Prophet 用于包含假期效应的技术可以用来添加任何类似假期的活动，例如我们在本章中将要建模的食物节。
- en: 'Similar to the seasonality effects you learned about in the previous chapter,
    Prophet contains default holidays that you can apply to your models, as well as
    custom holidays that you can create yourself. This chapter will cover both situations.
    Additionally, you will learn how to control the strength of holiday effects using
    the technique that you learned to use for seasonality: regularization.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 与你在上一章中学到的季节性效应类似，Prophet 包含默认的假期，你可以将其应用于你的模型，以及你可以自己创建的自定义假期。本章将涵盖这两种情况。此外，你还将学习如何使用你用于季节性的技术来控制假期效应的强度：正则化。
- en: 'In this chapter, you will learn how to go about doing the following:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习如何进行以下操作：
- en: Adding default country holidays
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加默认国家假期
- en: Adding default state or province holidays
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加默认州或省假期
- en: Creating custom holidays
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建自定义假期
- en: Creating multi-day holidays
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建多日假期
- en: Regularizing holidays
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 正则化假期
- en: Technical requirements
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: The data files and code for the examples in this chapter can be found at [https://github.com/PacktPublishing/Forecasting-Time-Series-Data-with-Prophet-Second-Edition](https://github.com/PacktPublishing/Forecasting-Time-Series-Data-with-Prophet-Second-Edition).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中示例的数据文件和代码可以在[https://github.com/PacktPublishing/Forecasting-Time-Series-Data-with-Prophet-Second-Edition](https://github.com/PacktPublishing/Forecasting-Time-Series-Data-with-Prophet-Second-Edition)找到。
- en: Adding default country holidays
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加默认国家假期
- en: 'Prophet uses the Python `holidays` package to populate a default list of holidays
    by country and, optionally, by state or province. To specify which region to build
    a holiday list for, Prophet requires the name or ISO code of that country. A complete
    list of all countries available, with their ISO codes, and also any states or
    provinces that can be included, can be viewed in the package’s `README` file here:
    [https://github.com/dr-prodigy/python-holidays#available-countries](https://github.com/dr-prodigy/python-holidays#available-countries).'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Prophet 使用 Python 的 `holidays` 包根据国家填充默认的假期列表，可选地还可以根据州或省。为了指定为哪个地区构建假期列表，Prophet
    需要该国家的名称或 ISO 代码。所有可用的国家及其 ISO 代码的完整列表，以及可以包含的任何州或省，可以在包的 `README` 文件中查看：[https://github.com/dr-prodigy/python-holidays#available-countries](https://github.com/dr-prodigy/python-holidays#available-countries)。
- en: To add the default holidays, Prophet includes an `add_country_holidays` method,
    which simply takes the ISO code for that country. Let’s walk through an example
    using the Divvy dataset again, first adding holidays for the United States, and
    then including a few additional holidays specific to Illinois, as Divvy is located
    in Chicago.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加默认假期，Prophet 包含一个 `add_country_holidays` 方法，它只需提供该国家的 ISO 代码。让我们通过再次使用 Divvy
    数据集的例子来演示，首先添加美国的假期，然后包括一些特定于伊利诺伊州的额外假期，因为 Divvy 位于芝加哥。
- en: 'We will begin just as we have learned to do with our other models in this book,
    by importing the necessary libraries, loading our data, and instantiating our
    model. As you learned how to do in [*Chapter 5*](B19630_05.xhtml#_idTextAnchor254),
    *Working with Seasonality*, we will set the seasonality mode to multiplicative
    and the yearly seasonality to a Fourier order of `4`:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将像我们在本书中学习使用其他模型一样开始，通过导入必要的库，加载数据，并实例化我们的模型。正如你在[*第五章*](B19630_05.xhtml#_idTextAnchor254)中学习的那样，*处理季节性*，我们将设置季节性模式为乘法，并将年度季节性设置为傅里叶阶数为
    `4`：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This next line is all that is required to populate the model with a list of
    holidays for the United States:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 下一条线就是填充模型所需的，列出美国的假日列表：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now, to complete the model, all we need to do is call `fit` as usual on the
    training DataFrame, make our future DataFrame, and call `predict` on it. We will
    plot the forecast and components to view our results:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，为了完成模型，我们只需要像往常一样在训练 DataFrame 上调用 `fit`，创建我们的未来 DataFrame，然后对其调用 `predict`。我们将绘制预测和组成部分以查看我们的结果：
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The output forecast plot looks very similar to *Figure 5**.7* from [*Chapter
    5*](B19630_05.xhtml#_idTextAnchor254), *Working* *with Seasonality*:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 输出的预测图看起来与 *图 5.7* 非常相似，来自 [*第 5 章*](B19630_05.xhtml#_idTextAnchor254)，*处理季节性*：
- en: '![Figure 6.1 – Divvy forecast including US holidays](img/Fig_6.1.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.1 – 包含美国假日的 Divvy 预测](img/Fig_6.1.jpg)'
- en: Figure 6.1 – Divvy forecast including US holidays
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.1 – 包含美国假日的 Divvy 预测
- en: 'However, the eagle-eyed may notice some downward spikes around the middle of
    the year and the end of the year. To discern what those are, we will look at the
    `components` plot as follows:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，细心的读者可能会注意到年中和大年底附近有一些向下的峰值。为了辨别这些是什么，我们将查看以下 `components` 图：
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In the output of those commands, the trend and both weekly and yearly seasonalities
    are again included and look much the same. However, there is a new plot shown:
    holidays, as seen here (note that the preceding code produces a full `components`
    plot; the following figure is a crop of that image):'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些命令的输出中，趋势和每周和年度季节性再次包括在内，看起来几乎相同。然而，这里显示了一个新的图：假日，如这里所示（注意，前面的代码生成了一个完整的
    `components` 图；下面的图是那个图像的裁剪）：
- en: '![Figure 6.2 – Divvy US holidays component](img/Fig_6.2.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.2 – Divvy 美国假日组成部分](img/Fig_6.2.jpg)'
- en: Figure 6.2 – Divvy US holidays component
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.2 – Divvy 美国假日组成部分
- en: This shows spikes where Divvy deviates from the trend, each spike corresponding
    to a holiday. Each holiday shows decreased usage except for one, which occurs
    in the final quarter of each year. Let’s investigate this.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这显示了 Divvy 与趋势偏离的峰值，每个峰值对应一个假日。除了每年最后一个季度发生的一个假日外，每个假日都显示出使用量的减少。让我们来调查一下。
- en: 'We can view the holidays included in our model with this command:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用此命令查看我们模型中包含的假日：
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This outputs a Python object containing an index and the holiday names included
    in the model:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这将输出一个包含索引和模型中包含的假日名称的 Python 对象：
- en: '![Figure 6.3 – US holidays](img/Fig_6.3.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.3 – 美国假日](img/Fig_6.3.jpg)'
- en: Figure 6.3 – US holidays
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.3 – 美国假日
- en: Each of these holidays has been included in the `forecast` DataFrame that was
    covered in [*Chapter 2*](B19630_02.xhtml#_idTextAnchor104), *Getting Started with
    Prophet*. For each holiday, three new columns are added for the predicted effect
    of that holiday, as well as lower and upper bounds for the uncertainty, for example,
    `"New Year's Day"`, `"New Year's Day_lower"`, and `"New Year's Day_upper"`. Using
    these new columns, we can see precisely what effect each holiday has on our forecast
    by printing the first non-zero value for each holiday in the `forecast` DataFrame.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这些假日都包含在第 2 章 [*入门 Prophet*](B19630_02.xhtml#_idTextAnchor104) 中提到的 `forecast`
    DataFrame 中。对于每个假日，都添加了三个新列，用于预测该假日的影响，以及不确定性的上下限，例如，`"New Year's Day"`，`"New
    Year's Day_lower"` 和 `"New Year's Day_upper"`。使用这些新列，我们可以通过打印 `forecast` DataFrame
    中每个假日的第一个非零值来精确地看到每个假日对我们预测的影响。
- en: 'To do this, let’s create a quick function called `first_non_zero`. The function
    takes a `forecast` DataFrame and the name of a holiday; it returns the first value
    for that holiday that does not equal zero. Then, we’ll use a Python list comprehension
    to loop over each holiday name and call the `first_non_zero` function:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 为了做到这一点，让我们创建一个名为 `first_non_zero` 的快速函数。该函数接受一个 `forecast` DataFrame 和一个假日的名称；它返回该假日第一个不等于零的值。然后，我们将使用
    Python 列推导式遍历每个假日名称并调用 `first_non_zero` 函数：
- en: '[PRE5]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Because each row of the `forecast` DataFrame is a date, most of the values in
    each holiday column will be zero, as the holiday does not affect these dates.
    On the date the holiday occurs, the value will either be positive, indicating
    more ridership than otherwise expected, or negative, for less ridership.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 因为 `forecast` DataFrame 的每一行都是一个日期，所以每个假日列中的大多数值都将为零，因为假日不会影响这些日期。在假日发生的日期，值将是正的，表示比预期更多的乘客，或者负的，表示乘客更少。
- en: 'Prophet models each holiday as having the same effect every year, so this value
    will be constant from year to year. Because we set `seasonality_mode=''multiplicative''`
    in this case, these effects are calculated as a percentage deviation from the
    trend (just to make it clear: the global `seasonality_mode` affects holidays as
    well). The following table shows these effects:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 预测模型将每个节假日视为每年都有相同的影响，因此这个值将逐年保持不变。因为我们在这个情况下设置了`seasonality_mode='multiplicative'`，这些影响被计算为趋势的百分比偏差（只是为了说明：全局的`seasonality_mode`也会影响节假日）。下表显示了这些影响：
- en: '![Figure 6.4 – Holiday effect values](img/Fig_6.4.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![图6.4 – 节假日影响值](img/Fig_6.4.jpg)'
- en: Figure 6.4 – Holiday effect values
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.4 – 节假日影响值
- en: Now, we can clearly see that `Columbus Day` creates a 5% boost to ridership
    for Divvy. All other holidays have negative effects, with Labor Day having the
    strongest at 69% fewer riders than the trend would otherwise predict.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '现在，我们可以清楚地看到`哥伦布日`为Divvy的客流量增加了5%。所有其他节假日都有负面影响，其中劳动节的影响最强，比趋势预测的客流量少了69%。 '
- en: This process you’ve just learned is Prophet’s basic holiday functionality; it’s
    analogous to the default seasonalities produced when no additional arguments are
    provided to Prophet. It works great in many cases and is often all that the model
    will require. But, just as the analyst can take finer control of seasonality effects,
    there are several techniques the analyst can use to control holidays beyond the
    default settings. In the next section, we’ll cover the process for adding holidays
    specific to a state or province.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 你刚刚学习到的这个过程是Prophet的基本节假日功能；它类似于在向Prophet提供没有额外参数时产生的默认季节性。它在许多情况下都工作得很好，并且通常是模型所需的所有内容。但是，正如分析师可以更精细地控制季节性影响一样，分析师可以使用几种技术来控制节假日，而不仅仅是默认设置。在下一节中，我们将介绍添加特定于州或省的节假日的流程。
- en: Adding default state/province holidays
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加默认州/省节假日
- en: 'Adding the holidays specific to Illinois is not so straightforward, because
    the `add_country_holidays` method only takes an argument for the country, but
    not the state or province. To add state- or province-level holidays, we need to
    use a new Prophet function, `make_holidays_df`. Let’s import it here:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 添加伊利诺伊州特有的节假日并不那么简单，因为`add_country_holidays`方法只接受一个国家参数，但不接受州或省。要添加州或省级别的节假日，我们需要使用一个新的Prophet函数，`make_holidays_df`。让我们在这里导入它：
- en: '[PRE6]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This function takes a list of years for which to populate the holidays as input,
    as well as arguments for the country and state or province. Note that you must
    use all years in your training DataFrame, as well as all the years for which you
    intend to predict. That is why, in the following code, we build a year list to
    contain all unique years in the training DataFrame. Then, because our `make_future_dataframe`
    command will add one year to the forecast, we need to extend that year list to
    include one additional year:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数接受一个年份列表作为输入，用于填充节假日，以及国家和州或省的参数。请注意，您必须在您的训练数据框中使用所有年份，以及您打算预测的所有年份。这就是为什么在下面的代码中，我们构建一个年份列表来包含训练数据框中的所有唯一年份。然后，因为我们的`make_future_dataframe`命令将为预测添加一年，我们需要扩展这个年份列表以包含一个额外的年份：
- en: '[PRE7]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Before moving on, let’s take a quick look at the format of this `holidays`
    DataFrame by printing the first five rows:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，让我们快速查看一下这个`holidays`数据框的格式，通过打印前五行：
- en: '[PRE8]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'As you can see from the following output, the `holidays` DataFrame consists
    of two columns, `ds` and `holiday`, with the date of the holiday and its name,
    respectively:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如您从以下输出中可以看到，`holidays`数据框包含两列，`ds`和`holiday`，分别表示节假日的日期和名称：
- en: '![Figure 6.5 – Illinois holidays](img/Fig_6.5.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![图6.5 – 伊利诺伊州节假日](img/Fig_6.5.jpg)'
- en: Figure 6.5 – Illinois holidays
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.5 – 伊利诺伊州节假日
- en: 'To load these holidays into our Prophet model, we simply pass the `holidays`
    DataFrame to our model when we instantiate it and continue as we have before:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 要将这些节假日加载到我们的Prophet模型中，我们只需在实例化模型时传递`holidays`数据框，然后像以前一样继续：
- en: '[PRE9]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'If you go ahead and call `model.train_holiday_names` again, you will see four
    additional holidays specific to Illinois that are not official United States holidays:
    Lincoln’s Birthday, Casimir Pulaski Day, Election Day, and Lincoln’s Birthday
    (Observed).'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您继续调用`model.train_holiday_names`，您将看到四个特定于伊利诺伊州的额外节假日，这些节假日不是官方的美国节假日：林肯诞辰、卡西米尔·普拉斯基日、选举日和林肯诞辰（观察日）。
- en: Creating custom holidays
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建自定义节假日
- en: The default holidays for the United States include both Thanksgiving and Christmas,
    as they are official holidays. However, it’s quite plausible that Black Friday
    and Christmas Eve would also create ridership behavior that deviates from the
    expected trend. So, we naturally decide to include these in our forecast.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 美国的默认假日包括感恩节和圣诞节，因为它们是官方假日。然而，黑色星期五和圣诞夜可能会产生与预期趋势不同的客流量。因此，我们自然决定将它们包含在我们的预测中。
- en: 'In this example, we will create a DataFrame of the default US holidays in a
    similar manner to how we created the DataFrame of the Illinois holidays previously,
    and then add our custom holidays to it. To create custom holidays, you simply
    need to create a DataFrame with two columns: `holiday` and `ds`. As done previously,
    it must include all occurrences of the holiday in the past (at least, as far back
    as your training data goes) and into the future that we intend to forecast.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将以与之前创建伊利诺伊州假日数据框相似的方式创建一个包含默认美国假日的数据框，然后将其添加到其中。要创建自定义假日，你只需创建一个包含两列的数据框：`holiday`
    和 `ds`。像之前做的那样，它必须包括过去（至少，远至你的训练数据）和未来我们打算预测的假日所有发生情况。
- en: 'In this example, we will start by creating the `holidays` DataFrame populated
    with the default US holidays and use the `year_list` from the previous example:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将首先创建一个包含默认美国假日的 `holidays` 数据框，并使用之前示例中的 `year_list`：
- en: '[PRE10]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We are going to enrich this list of default holidays with our custom holidays,
    so now we will create two DataFrames with the specified columns (`holiday` and
    `ds`), one for `Black Friday` and one for `Christmas Eve`:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将用我们自定义的假日来丰富这个默认假日的列表，因此现在我们将创建两个包含指定列（`holiday` 和 `ds`）的数据框，一个用于 `黑色星期五`，另一个用于
    `平安夜`：
- en: '[PRE11]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Of course, you could create just one DataFrame with both holidays as individual
    rows, but for clarity, I have separated them out.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，你可以创建一个只包含两个假日作为单独行的数据框，但为了清晰起见，我已经将它们分开。
- en: 'Finally, we just need to concatenate these three `holiday` DataFrames into
    one:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们只需要将这些三个 `holiday` 数据框连接成一个：
- en: '[PRE12]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: It is not strictly necessary to sort the values or reset the index, as we did
    in the preceding code, but it does make the DataFrame more visually clear if you
    intend to inspect it.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 并非绝对必要对值进行排序或重置索引，就像之前代码中做的那样，但如果你想检查它，这样做会使数据框在视觉上更清晰。
- en: 'With our `holidays` DataFrame complete, we now pass it to Prophet when we instantiate
    the model, just as we did with the Illinois holidays previously, and continue
    to call `fit` and `predict`:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们完成 `holidays` 数据框后，我们现在将其传递给 Prophet，就像之前处理伊利诺伊州假日时一样，并继续调用 `fit` 和 `predict`：
- en: '[PRE13]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Now, if you inspect the `forecast` DataFrame or your `components` plot, you
    will indeed see two additional holidays each year, one for Black Friday and one
    for Thanksgiving.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果你检查 `forecast` 数据框或你的 `components` 图表，你确实会看到每年增加两个额外的假日，一个是黑色星期五，另一个是感恩节。
- en: Creating holidays in this way allows for much more granular control over individual
    holidays. Next, we’ll look at some additional parameters you can use to tune your
    holidays.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 以这种方式创建假日允许对个别假日有更精细的控制。接下来，我们将看看你可以用来调整假日的其他一些参数。
- en: Creating multi-day holidays
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建多日假日
- en: Sometimes, a holiday or other special event will span several days. Fortunately,
    Prophet includes functionality to handle these scenarios via the `window` arguments.
    The `holidays` DataFrame we have been building to populate our holidays in the
    previous examples can include the optional columns of `'lower_window'` and `'upper_window'`.
    These columns specify additional days either before or after the main holiday
    that Prophet will model.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，一个假日或其他特殊事件会跨越几天。幸运的是，Prophet 通过 `window` 参数提供了处理这些场景的功能。我们之前构建的 `holidays`
    数据框，用于填充之前的示例中的假日，可以包括可选的列 `'lower_window'` 和 `'upper_window'`。这些列指定了主假日之前或之后额外的天数，Prophet
    将对其进行建模。
- en: For example, in the previous example, we modeled Christmas and Christmas Eve
    as two different holidays. Another method would have been just to model Christmas
    but include a `'lower_window'` argument of `1`, telling Prophet to include a single
    day before Christmas as part of the holiday. This assumes, of course, that Christmas
    Eve will always fall on the day before Christmas. If, however, Christmas Eve were
    a holiday that floated and did not always fall immediately before Christmas, this
    `window` method would not be used.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在上一个例子中，我们将圣诞节和圣诞前夕建模为两个不同的节日。另一种方法就是只建模圣诞节，但包括一个`'lower_window'`参数为`1`，告诉Prophet将圣诞节前一天作为节日的一部分。当然，这假设圣诞前夕总是在圣诞节前一天。然而，如果圣诞前夕是一个浮动节日，并不总是立即在圣诞节之前，那么这个`window`方法就不会被使用。
- en: Every July, Chicago holds a 5-day festival called the *Taste of Chicago*. It
    is the largest food festival in the world and Chicago’s largest festival of any
    kind. More than one million people attend each year to try food from nearly 100
    different vendors or attend popular concerts each day. With such large crowds
    of people moving around the city, it would be surprising if it had no effect at
    all on Divvy’s ridership. In this example, we will model Taste of Chicago as a
    5-day holiday and see what effect that has on Divvy’s forecast.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 每年七月，芝加哥举办一个为期5天的节日，称为*芝加哥美食节*。这是世界上最大的美食节，也是芝加哥任何类型最大的节日。每年有超过一百万的人参加，尝试来自近100个不同摊位的食物，或者每天参加受欢迎的音乐会。由于如此多的人群在城市中流动，如果它对Divvy的乘客量没有任何影响，那就令人惊讶了。在这个例子中，我们将芝加哥美食节建模为5天的节日，看看这对Divvy的预测有什么影响。
- en: 'As done previously, we begin by creating the `holidays` DataFrame with the
    default US holidays. Next, we create a `taste_of_chicago` DataFrame with the dates
    set as the first day of the event each year of both our historical data and our
    forecast period. Deviating from the previous example, though, we also include
    the `''lower_window''` and `''upper_window''` columns, setting the lower to `0`
    (so we include no dates prior to the first day of the event) and the upper to
    `4` (which includes four days after the first day of the event, for a total of
    five days). Then, we concatenate the DataFrames together as follows:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，我们首先创建包含默认美国假期的`holidays` DataFrame。接下来，我们创建一个`taste_of_chicago` DataFrame，将日期设置为历史数据和预测期间每年活动的第一天。然而，与前一个例子不同的是，我们还包含了`'lower_window'`和`'upper_window'`列，将下限设置为`0`（因此我们不包含活动第一天之前的日期），上限设置为`4`（这包括活动第一天之后的四天，总共五天）。然后，我们按照以下方式将DataFrame连接在一起：
- en: '[PRE14]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now, let’s take a look at the first 10 rows of the DataFrame:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看一下DataFrame的前10行：
- en: '[PRE15]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'In the output, we see the additional columns, as well as the inclusion of the
    `Taste of` `Chicago` holiday:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在输出中，我们可以看到额外的列，以及`Taste of Chicago`假期的包含：
- en: '![Figure 6.6 – Holidays with windows](img/Fig_6.6.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![图6.6 – 带窗口的节日](img/Fig_6.6.jpg)'
- en: Figure 6.6 – Holidays with windows
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.6 – 带窗口的节日
- en: Tip
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士
- en: If you’re not familiar with the `NaN` value in the preceding table, it stands
    for *Not a Number*. It’s simply a placeholder in this case and has no effect.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对前面表格中的`NaN`值不熟悉，它代表*非数字*。在这种情况下，它只是一个占位符，没有任何影响。
- en: 'And now, we will proceed with fitting our model:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将继续拟合我们的模型：
- en: '[PRE16]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'To see what effect `Taste of Chicago` has had on Divvy’s ridership, let’s take
    a look at the `forecast` DataFrame with this `print` statement:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看`Taste of Chicago`对Divvy乘客量的影响，让我们看一下带有此`print`语句的`forecast` DataFrame：
- en: '[PRE17]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The output is the contents of the `forecast` DataFrame but limited to just
    the five days of the 2018 event, and the columns for the date and the effect of
    `Taste of Chicago` on ridership:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 输出是`forecast` DataFrame的内容，但仅限于2018年活动的五天，以及日期和`Taste of Chicago`对乘客量的影响列：
- en: '![Figure 6.7 – Effect of Taste of Chicago on ridership values](img/Fig_6.7.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![图6.7 – 芝加哥美食节对乘客量的影响](img/Fig_6.7.jpg)'
- en: Figure 6.7 – Effect of Taste of Chicago on ridership values
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.7 – 芝加哥美食节对乘客量的影响
- en: We can see that the first day of the event had 3.6% fewer rides than would have
    been expected without the event, the second day had 1.9% more rides, and the third
    6.8% more. The final 2 days both had about 2% more rides. The magnitudes of these
    numbers may not be as large as you had expected, especially with the 4th of July
    causing a 55% reduction in ridership. And especially when taking into account
    that one of them is negative and the other positive, it’s possible that this result
    is not a meaningful signal but instead just due to random noise. In [*Chapter
    11*](B19630_11.xhtml#_idTextAnchor728), *Managing Uncertainty Intervals*, you
    will learn how to verify whether this is a meaningful result or not.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，活动的第一天比没有活动时预期的客流量少了3.6%，第二天多了1.9%，第三天多了6.8%。最后两天都有大约2%的客流量增加。这些数字的幅度可能不像您预期的那么大，尤其是7月4日导致客流量减少了55%。而且，考虑到其中一个是负数，另一个是正数，这个结果可能不是一个有意义的信号，而是仅仅由于随机噪声。在[*第十一章*](B19630_11.xhtml#_idTextAnchor728)，*管理不确定性区间*中，您将学习如何验证这个结果是否有意义。
- en: 'We can, however, visualize just this one holiday effect with the `plot_forecast_component`
    function from Prophet’s `plot` package. We need to import it first:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们可以使用Prophet的`plot`包中的`plot_forecast_component`函数仅可视化这个假日影响。我们首先需要导入它：
- en: '[PRE18]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The function requires the first argument to be the model, the second argument
    to be the `forecast` DataFrame, and the third argument to be a string naming the
    component to plot; here, we will use `''Taste` `of Chicago''`:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 该函数需要第一个参数是模型，第二个参数是`forecast` DataFrame，第三个参数是一个字符串，用于命名要绘制的组件；这里，我们将使用`'Taste
    of Chicago'`：
- en: '[PRE19]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'In the output, we can visualize exactly what the table in *Figure 6**.7* displayed
    (except this time, we are displaying all years):'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在输出中，我们可以可视化*图6.7*中显示的表格（这次，我们显示所有年份）：
- en: '![Figure 6.8 – Taste of Chicago holiday effects](img/Fig_6.8.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![图6.8 – 芝加哥风味假日影响](img/Fig_6.8.jpg)'
- en: Figure 6.8 – Taste of Chicago holiday effects
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.8 – 芝加哥风味假日影响
- en: 'The first day of the event shows reduced ridership, and the following four
    days show increased ridership. Now that we have learned the various ways you can
    add holidays to your forecasts, let’s look at one more tool for controlling holiday
    effects: regularization.'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 活动的第一天显示客流量减少，接下来的四天客流量增加。现在我们已经了解了您可以将假日添加到预测中的各种方法，让我们再看看一个用于控制假日影响的工具：正则化。
- en: Regularizing holidays
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 正则化假日
- en: The process of constraining a model’s flexibility to help it generalize better
    to new data is called **regularization**. [*Chapter 5*](B19630_05.xhtml#_idTextAnchor254),
    *Working with Seasonality,* featured a lengthy discussion about regularizing the
    effect of seasonality in Prophet. The mathematical procedure under Prophet’s hood
    is the same when regularizing both holiday and seasonality effects, so we can
    use the same concepts from the seasonality chapter and apply them to holidays.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 将模型的灵活性约束以帮助它更好地泛化到新数据的过程被称为**正则化**。[*第五章*](B19630_05.xhtml#_idTextAnchor254)，*处理季节性*，在Prophet中详细讨论了正则化季节性影响。在Prophet下，正则化假日和季节性影响的数学过程是相同的，因此我们可以使用季节性章节中的相同概念并将其应用于假日。
- en: In general, if you, as the analyst, find that your holidays have more control
    over your model than you expected, that is, if their absolute magnitudes are higher
    than you believe is accurate or necessary to model your problem, then you’ll want
    to consider regularization. Regularization will simply compress the magnitude
    of your holiday effects and forbid them from having as large an effect as they
    would otherwise. Prophet contains a `holidays_prior_scale` parameter to control
    this.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，如果您作为分析师发现您的假日对模型的影响比您预期的更大，也就是说，如果它们的绝对幅度高于您认为准确或必要来建模您的问题，那么您将想要考虑正则化。正则化将简单地压缩假日影响的幅度，并禁止它们产生比其他情况下更大的影响。Prophet包含一个`holidays_prior_scale`参数来控制这一点。
- en: This is the same theory behind the `seasonality_prior_scale` parameter that
    we used in the previous chapter to regularize our seasonalities. Just as seasonalities
    can be regularized globally or locally, so can holidays. Let’s see how to do it
    next.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 这与我们在上一章中用于正则化季节性的`seasonality_prior_scale`参数背后的理论是相同的。正如季节性可以全局或局部正则化一样，假日也可以。让我们看看如何做到这一点。
- en: Global holiday regularization
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 全球假日正则化
- en: Prophet essentially has a default prior probability distribution of guesses
    for what effect a holiday may have and it uses this distribution to try to find
    the value that best fits the data. If that prior range of guesses is very far
    from reality, though, Prophet will struggle to find the best value. You can help
    it out a lot by giving it additional information about what values to expect so
    that it may update its prior distribution to better inform its guesses. Modifying
    the prior scale for holidays is how you provide this additional information to
    Prophet.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: Prophet 实际上有一个默认的先验概率分布，用于猜测节假日可能产生的影响，并使用这个分布来尝试找到最佳拟合数据的价值。然而，如果这个先验猜测范围与现实相差甚远，Prophet
    将难以找到最佳值。你可以通过提供有关预期哪些值的信息来极大地帮助它，这样它就可以更新其先验分布以更好地指导猜测。修改节假日先验尺度就是向 Prophet 提供这种额外信息的方式。
- en: The values for `holidays_prior_scale` unfortunately don’t make much intuitive
    sense. They are similar to the `regularization` parameter in lasso regression
    in that they control the amount of shrinkage. However, you just need to remember
    that smaller values mean less flexibility—the holiday effect will be dampened
    through more regularization. By default, Prophet sets this value to 10\. Reasonable
    values range from 10 down to 0.001 or so.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`holidays_prior_scale`的值，不幸的是，它们并没有太多直观的意义。它们与lasso 回归中的`正则化`参数类似，因为它们控制了收缩量。然而，你只需要记住，较小的值意味着更少的灵活性——节假日效应将通过更多的正则化而减弱。默认情况下，Prophet
    将此值设置为 10。合理的值范围从 10 降至大约 0.001。
- en: However, every dataset is different, so you’ll find that experimentation will
    help a lot, but just like the prior scales for seasonality, you’ll find that a
    holiday prior scale between 10 and 0.01 will work out well in most cases. To see
    the effect of this variable, let’s build one model using the default value of
    10 and another model with a much smaller value of 0.05.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，每个数据集都是不同的，所以你会发现实验将非常有帮助，但就像季节性的先验尺度一样，你会发现大多数情况下，节假日先验尺度在 10 到 0.01 之间将工作得很好。为了看到这个变量的效果，让我们使用默认值
    10 和一个更小的值 0.05 构建一个模型。
- en: 'Let’s also use the `plot_forecast_component` function we learned about when
    plotting the `Taste of Chicago` event, but this time, pass the `''holidays''`
    component to it, to plot all combined holiday effects together. First, we build
    the model with the default prior scale value (here, we explicitly set it to `10`
    for clarity’s sake) and then plot only the `holidays` component to see the holiday
    effect:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们也使用我们在绘制`芝加哥美食节`事件时了解到的`plot_forecast_component`函数，但这次，将`'节假日'`成分传递给它，以绘制所有综合的节假日效应。首先，我们使用默认的先验尺度值构建模型（在这里，我们明确将其设置为`10`以增强清晰度），然后仅绘制`节假日`成分以查看节假日效应：
- en: '[PRE20]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The output of that code will be just the `holidays` component:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 那段代码的输出将仅仅是`节假日`成分：
- en: '![Figure 6.9 – The holidays component with no regularization](img/Fig_6.9.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.9 – 无正则化的节假日成分](img/Fig_6.9.jpg)'
- en: Figure 6.9 – The holidays component with no regularization
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.9 – 无正则化的节假日成分
- en: With no regularization, Thanksgiving (the longest bar in *Figure 6**.9*, which
    we discovered earlier in this chapter to have the strongest effect of all holidays)
    reduces ridership by about 65%.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在没有正则化的情况下，感恩节（*图 6.9* 中最长的条形，我们在本章前面发现其对所有节日的效应最强）将乘客量减少了大约 65%。
- en: 'Now let’s build another model, the same in every way except with strong regularization,
    and plot the `holidays` component:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们构建另一个模型，除了具有强正则化之外，其他方面都相同，并绘制`节假日`成分：
- en: '[PRE21]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Again, we used the `plot_forecast_component` function to show only the `holidays`
    component:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，我们使用了`plot_forecast_component`函数来仅显示`节假日`成分：
- en: '![Figure 6.10 – The holidays component with strong regularization](img/Fig_6.10.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.10 – 强正则化的节假日成分](img/Fig_6.10.jpg)'
- en: Figure 6.10 – The holidays component with strong regularization
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.10 – 强正则化的节假日成分
- en: 'When regularized, the plot appears similar to the plot of unregularized holidays,
    but with a few differences. First, we see the scale has changed a lot. The strongest
    holiday effect, when regularized, shows an 11.5% reduction in ridership, compared
    to the 65% reduction in the unregularized model. The second thing to notice is
    that the holidays haven’t been reduced by an equal proportion: now, Christmas
    has the strongest effect, not Thanksgiving. This is not an error, just an effect
    of how regularization works with this many variables interacting with each other.'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 当进行规范化时，图表看起来与未规范化的假日图表相似，但有一些不同。首先，我们看到尺度变化很大。当规范化时，最强的假日效应是乘客量减少了11.5%，而未规范化的模型中减少了65%。要注意的第二件事是假日并没有按相同的比例减少：现在，圣诞节的效果最强，而不是感恩节。这不是错误，只是这么多变量相互作用时规范化的效果。
- en: Choosing a value for the prior scale can be more an art than a science. You
    may use your domain knowledge to adjust the value if the holidays’ effect seems
    stronger or weaker than your intuition suggests. If in doubt, experiment and see
    what works best. The most rigorous approach would be to use grid search with cross-validation,
    a topic that we will cover near the end of this book.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 选择先验尺度的值可能更像是一门艺术而非科学。如果你认为假日的效应比你直觉所暗示的更强或更弱，你可以使用你的领域知识来调整这个值。如果有疑问，进行实验并看看什么效果最好。最严谨的方法是使用网格搜索和交叉验证，这个话题我们将在本书的结尾部分进行介绍。
- en: Using the `holidays_prior_scale` parameter as we did previously adjusts all
    holidays globally; each holiday across the board is regularized the same amount.
    For more control, Prophet provides functionality to adjust the prior scale for
    each individual holiday through the custom holiday interface. In the next example,
    we’ll see just how to do that.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 使用我们之前使用的`holidays_prior_scale`参数调整所有假日是全球性的；每个假日都是按相同的方式规范化的。为了有更多的控制，Prophet提供了通过自定义假日接口调整每个个别假日先验尺度的功能。在下一个例子中，我们将看到如何做到这一点。
- en: Individual holiday regularization
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 个人假日规范化
- en: When adding a new holiday, we created a DataFrame containing two required columns,
    `ds` and `holiday`, and two optional columns, `lower_window` and `upper_window`.
    There is one final optional column we can include in this DataFrame, namely `prior_scale`.
    If any holidays have no value in this column (or if the column doesn’t even exist
    in the DataFrame), then the holidays will revert to the global `holidays_prior_scale`
    value that we saw in the previous example. In the following example, though, we
    will add this column and modify some holidays’ prior scales individually.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 当添加一个新的假日时，我们创建了一个包含两个必需列`ds`和`holiday`以及两个可选列`lower_window`和`upper_window`的数据框。我们还可以在这个数据框中包含一个最终的可选列，即`prior_scale`。如果任何假日在这个列中没有值（或者如果这个列在数据框中甚至不存在），那么假日将回退到我们在上一个例子中看到的全局`holidays_prior_scale`值。在下面的例子中，我们将添加这个列并单独修改一些假日的先验尺度。
- en: 'As we have done earlier, we will build the default holiday list and add some
    additional holidays. This time around, we will add `Black Friday` and `Christmas
    Eve` with a prior scale of `1` and the `Taste of Chicago` 5-day event with a prior
    scale of `0.1`. All other holidays will keep the default prior scale of `10`.
    First, we will use the same `year_list` created previously to create our `holidays`
    DataFrame:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前所做的那样，我们将构建默认的假日列表并添加一些额外的假日。这次，我们将添加`Black Friday`和`圣诞节前夕`，先验尺度为`1`，以及`芝加哥美食节`5天的活动，先验尺度为`0.1`。所有其他假日将保持默认的先验尺度`10`。首先，我们将使用之前创建的相同的`year_list`来创建我们的`holidays`数据框：
- en: '[PRE22]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'This is Prophet’s default list of holidays for the US; we want to enrich the
    list with our three additional holidays, so now we’ll create a DataFrame for each
    of them. Note that we specify `''prior_scale''` for each holiday:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 这是Prophet为美国提供的默认假日列表；我们希望用我们额外的三个假日来丰富这个列表，所以现在我们将为每个假日创建一个数据框。请注意，我们为每个假日指定了`'prior_scale'`：
- en: '[PRE23]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The last step is to combine these four DataFrames:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是将这四个数据框合并：
- en: '[PRE24]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'In the DataFrames for `Black Friday`, `Christmas Eve`, and `Taste of Chicago`,
    we added that additional `prior_scale` column. Let’s print the first 16 rows of
    the `holidays` DataFrame to confirm this:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Black Friday`、`圣诞节前夕`和`芝加哥美食节`的数据框中，我们添加了额外的`prior_scale`列。让我们打印`holidays`数据框的前16行来确认这一点：
- en: '[PRE25]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'As you can see in the following table, we have our 10 default holidays, with
    no prior scale or windows added. We have the `Taste of Chicago` event with the
    upper window for 4 additional days and a prior scale of `0.1`. Both `Black Friday`
    and `Christmas Eve` have prior scales of `1`. Prophet will apply the default prior
    scale where it’s missing when it builds the model. Remember, `NaN`, for *Not a
    Number*, means an empty cell in this case:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 如下表所示，我们有10个默认假日，没有添加先验尺度或窗口。我们有`芝加哥美食节`活动，上限窗口为4天，先验尺度为`0.1`。`黑色星期五`和`平安夜`的先验尺度均为`1`。当Prophet构建模型时，如果缺失，它将应用默认的先验尺度。记住，`NaN`，代表*非数字*，在这种情况下意味着一个空单元格：
- en: "![Figure 6.11 – Holidays\uFEFF with prior scales](img/Fig_6.11.jpg)"
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![图6.11 – 带有先验尺度的假日](img/Fig_6.11.jpg)'
- en: Figure 6.11 – Holidays with prior scales
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.11 – 带有先验尺度的假日
- en: 'With our `holidays` DataFrame built, we simply continue to instantiate our
    model, fit it, and predict in order to build the forecast:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们构建了`holidays` DataFrame之后，我们只需继续实例化我们的模型，对其进行拟合，并预测以构建预测：
- en: '[PRE26]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Now with the `forecast` DataFrame created, you can experiment on your own using
    the plotting tools you’ve learned about so far to explore the results.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 现在已经创建了`forecast` DataFrame，你可以使用到目前为止所学的绘图工具进行实验，以探索结果。
- en: Choosing an appropriate prior scale, both for holidays and for seasonalities,
    may sometimes be difficult. Prophet’s default values tend to work very well in
    most cases, but there may be times when you need to change them and struggle to
    find the best value. In these cases, cross-validation is your best approach. You
    will learn how to use cross-validation with an appropriate performance metric
    to optimize your Prophet models in [*Chapter 13*](B19630_13.xhtml#_idTextAnchor839),
    *Evaluating* *Performance Metrics*.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 选择适当的先验尺度，对于假日和季节性来说，有时可能很困难。Prophet的默认值在大多数情况下都工作得非常好，但有时你可能需要更改它们，并且很难找到最佳值。在这些情况下，交叉验证是你的最佳方法。你将在[*第13章*](B19630_13.xhtml#_idTextAnchor839)中学习如何使用交叉验证以及适当的性能指标来优化你的Prophet模型，*评估性能指标*。
- en: Summary
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you first learned how to add the default holidays for a country
    and then went a bit deeper by adding any state or province holidays. After that,
    you learned how to add custom holidays and expanded this technique to adjust for
    holidays that span multiple days. Finally, you learned what regularization is
    and how it is used to control overfitting, and how to apply it globally to all
    holidays in your model or more granularly by specifying different regularizations
    for each individual holiday.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你首先学习了如何添加一个国家的默认假日，然后通过添加任何州或省的假日进一步深入。之后，你学习了如何添加自定义假日，并将这种技术扩展到调整跨越多天的假日。最后，你学习了正则化的概念以及它是如何用于控制过拟合的，以及如何将其全局应用于模型中的所有假日或更细致地通过为每个单独的假日指定不同的正则化来实现。
- en: Holidays often cause massive spikes in time series and ignoring their effects
    will cause Prophet to perform very poorly in its forecast results. The tools in
    this chapter will allow your models to accommodate these external events and provide
    a way to predict the effects running into the future.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 假日往往会导致时间序列出现巨大的峰值，忽略它们的影响将导致Prophet在预测结果中表现非常糟糕。本章中的工具将允许你的模型适应这些外部事件，并提供一种预测未来影响的方法。
- en: In the next chapter, we’ll look at the different growth modes available in Prophet.
    So far, all our models have had linear growth, but that may not be the only mode
    you will encounter in your forecasting work!
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨Prophet中可用的不同增长模式。到目前为止，我们所有的模型都采用了线性增长，但在你的预测工作中可能会遇到不止这一种模式！
