["```py\n    $ sudo add-apt-repository ppa:librecad-dev/librecad-stable\n    $ sudo apt-get update\n    $ sudo apt-get install librecad\n\n```", "```py\n    $ sudo apt-get install blender  \n```", "```py\n    $sudo apt-get install meshlab  \n```", "```py\nimport bpy \n```", "```py\n#This function will draw base plate \ndef Draw_Base_Plate(): \n```", "```py\nbpy.ops.mesh.primitive_cube_add(radius=0.05, \n       location=(0.175,0,0.09))bpy.ops.mesh.primitive_cube_add(radius=0.05, \n       location=(-0.175,0,0.09)) \n\n    #################################################### \n    #################################################### \n\n    #Adding base plate \nbpy.ops.mesh.primitive_cylinder_add(radius=0.15, \n       depth=0.005, location=(0,0,0.09)) \n\n    #Adding boolean difference modifier from first cube \n\nbpy.ops.object.modifier_add(type='BOOLEAN') \nbpy.context.object.modifiers[\"Boolean\"].operation = \n       'DIFFERENCE'bpy.context.object.modifiers[\"Boolean\"].object = \n bpy.data.objects[\"Cube\"] \nbpy.ops.object.modifier_apply(modifier=\"Boolean\") \n\n    ###################################################### \n    ###################################################### \n\n    #Adding boolean difference modifier from second cube \n\nbpy.ops.object.modifier_add(type='BOOLEAN') \nbpy.context.object.modifiers[\"Boolean\"].operation = \n       'DIFFERENCE'bpy.context.object.modifiers[\"Boolean\"].object = \n bpy.data.objects[\"Cube.001\"] \nbpy.ops.object.modifier_apply(modifier=\"Boolean\") \n\n    #######################################################\n     ####################################################### \n\n    #Deselect cylinder and delete cubes \nbpy.ops.object.select_pattern(pattern=\"Cube\") \nbpy.ops.object.select_pattern(pattern=\"Cube.001\") \nbpy.data.objects['Cylinder'].select = False \nbpy.ops.object.delete(use_global=False) \n\n```", "```py\n#This function will draw motors and wheels \ndef Draw_Motors_Wheels():  \n```", "```py\n    #Create first Wheel \n\nbpy.ops.mesh.primitive_cylinder_add(radius=0.045, \n       depth=0.01, location=(0,0,0.07)) \n    #Rotate \nbpy.context.object.rotation_euler[1] = 1.5708 \n    #Transalation \nbpy.context.object.location[0] = 0.135 \n\n    #Create second wheel \nbpy.ops.mesh.primitive_cylinder_add(radius=0.045, \n       depth=0.01, location=(0,0,0.07)) \n    #Rotate \nbpy.context.object.rotation_euler[1] = 1.5708 \n    #Transalation \nbpy.context.object.location[0] = -0.135\n```", "```py\n    #Adding motors \n\nbpy.ops.mesh.primitive_cylinder_add(radius=0.018,\n depth=0.06, location=(0.075,0,0.075)) \nbpy.context.object.rotation_euler[1] = 1.5708 \n\nbpy.ops.mesh.primitive_cylinder_add(radius=0.018,\n depth=0.06, location=(-0.075,0,0.075)) \nbpy.context.object.rotation_euler[1] = 1.5708 \n\n```", "```py\n    #Adding motor shaft \nbpy.ops.mesh.primitive_cylinder_add(radius=0.006,\n depth=0.04, location=(0.12,0,0.075)) \nbpy.context.object.rotation_euler[1] = 1.5708 \n\nbpy.ops.mesh.primitive_cylinder_add(radius=0.006,\n depth=0.04, location=(-0.12,0,0.075)) \nbpy.context.object.rotation_euler[1] = 1.5708 \n\n    #######################################################\n #######################################################\n```", "```py\n    #Adding Caster Wheel \n\nbpy.ops.mesh.primitive_cylinder_add(radius=0.015, \n       depth=0.05, location=(0,0.125,0.065))bpy.ops.mesh.primitive_cylinder_add(radius=0.015, \n       depth=0.05, location=(0,-0.125,0.065))\n```", "```py\n    #Adding Kinect \n\nbpy.ops.mesh.primitive_cube_add(radius=0.04, \n       location=(0,0,0.26))\n```", "```py\n#Draw middle plate \ndef Draw_Middle_Plate(): \nbpy.ops.mesh.primitive_cylinder_add(radius=0.15, \n       depth=0.005, location=(0,0,0.22)) \n\n#Adding top plate \ndef Draw_Top_Plate(): \nbpy.ops.mesh.primitive_cylinder_add(radius=0.15, \n       depth=0.005, location=(0,0,0.37))\n```", "```py\n#Adding support tubes \ndef Draw_Support_Tubes(): \n############################################################################################# \n\n    #Cylinders \nbpy.ops.mesh.primitive_cylinder_add(radius=0.007, \n       depth=0.30, location=(0.09,0.09,0.23))bpy.ops.mesh.primitive_cylinder_add(radius=0.007, \n       depth=0.30, location=(-0.09,0.09,0.23))bpy.ops.mesh.primitive_cylinder_add(radius=0.007, \n       depth=0.30, location=(-0.09,-0.09,0.23))bpy.ops.mesh.primitive_cylinder_add(radius=0.007, \n       depth=0.30, location=(0.09,-0.09,0.23))\n```", "```py\n#Exporting into STL     \ndef Save_to_STL(): \nbpy.ops.object.select_all(action='SELECT') \n#    bpy.ops.mesh.select_all(action='TOGGLE') \nbpy.ops.export_mesh.stl(check_existing=True, \n filepath=\"/home/lentin/Desktop/exported.stl\", \n filter_glob=\"*.stl\", ascii=False, \n use_mesh_modifiers=True, axis_forward='Y', \n axis_up='Z', global_scale=1.0) \n\n#Main code \n\nif __name__ == \"__main__\": \nDraw_Base_Plate() \nDraw_Motors_Wheels() \nDraw_Middle_Plate() \nDraw_Top_Plate() \nDraw_Support_Tubes() \nSave_to_STL() \n```", "```py\n\n<robot name=\"chefbot\"> \n<link> ... </link> \n<link> ... </link> \n<link> ... </link> \n\n<joint>  ....  </joint> \n<joint>  ....  </joint> \n<joint>  ....  </joint> \n</robot> \n```", "```py\n    $ cd ~/catkin_ws/src/  \n```", "```py\n    $ catkin_create_pkgchefbot_descriptioncatkinxacro  \n```", "```py\n    $ roslaunch chefbot_descriptionview_robot.launch  \n```", "```py\n<launch> \n\n<!-- This launch file will parse the URDF model and create robot_description parameter  - -> \n\n<include file=\"$(find chefbot_description)/launch/upload_model.launch\" /> \n\n<!-Publish TF from joint states -- > \n\n<node name=\"robot_state_publisher\" pkg=\"robot_state_publisher\" type=\"robot_state_publisher\" /> \n\n<!-Start slider GUI for controlling the robot joints -- > \n<node name=\"joint_state_publisher\" pkg=\"joint_state_publisher\" type=\"joint_state_publisher\" args=\"_use_gui:=True\" /> \n\n<!-Start Rviz with a specific configuration -- > \n\n<node name=\"rviz\" pkg=\"rviz\" type=\"rviz\" args=\"-d $(find chefbot_description)/rviz/robot.rviz\" /> \n\n</launch> \n```", "```py\n<launch> \n\n<!-- Robot description --> \n<param name=\"robot_description\" command=\"$(find xacro)/xacro --inorder '$(find chefbot_description)/urdf/chefbot.xacro'\" /> \n\n</launch> \n```", "```py\n<?xml version=\"1.0\"?> \n\n<robot name=\"chefbot\" xmlns:xacro=\"http://ros.org/wiki/xacro\"> \n\n<xacro:include filename=\"$(find chefbot_description)/urdf/common_properties.xacro\" /> \n\n<xacro:include filename=\"$(find chefbot_description)/gazebo/chefbot.gazebo.xacro\" /> \n\n<xacro:property name=\"astra_cam_py\" value=\"-0.0125\"/> \n<xacro:property name=\"astra_depth_rel_rgb_py\" value=\"0.0250\" /> \n<xacro:property name=\"astra_cam_rel_rgb_py\"   value=\"-0.0125\" /> \n<xacro:property name=\"astra_dae_display_scale\"   value=\"0.8\" /> \n```", "```py\n<link name=\"base_footprint\"/> \n\n<joint name=\"base_joint\" type=\"fixed\"> \n<origin xyz=\"0 0 0.0102\" rpy=\"0 0 0\" /> \n<parent link=\"base_footprint\"/> \n<child link=\"base_link\" /> \n</joint> \n<link name=\"base_link\"> \n<visual> \n<geometry> \n<!-- new mesh --> \n<mesh filename=\"package://chefbot_description/meshes/base_plate.dae\" /> \n<material name=\"white\"/> \n</geometry> \n\n   <origin xyz=\"0.001 0 -0.034\" rpy=\"0 0 ${M_PI/2}\"/> \n</visual> \n<collision> \n<geometry> \n<cylinder length=\"0.10938\" radius=\"0.178\"/> \n</geometry> \n<origin xyz=\"0.0 0 0.05949\" rpy=\"0 0 0\"/> \n</collision> \n<inertial> \n<!-- COM experimentally determined --> \n<origin xyz=\"0.01 0 0\"/> \n<mass value=\"2.4\"/><!-- 2.4/2.6 kg for small/big battery pack --> \n\n<inertia ixx=\"0.019995\" ixy=\"0.0\" ixz=\"0.0\" \niyy=\"0.019995\" iyz=\"0.0\"  \nizz=\"0.03675\" /> \n</inertial> \n</link> \n```"]