["```py\n    SELECT  COUNT(*)\n    FROM    `bigquery-public-data.new_york_trees.tree_census_2015`\n    WHERE\n             spc_latin is NULL;\n    ```", "```py\n    SELECT   spc_latin,\n             COUNT(*) total\n    FROM    `bigquery-public-data.new_york_trees.tree_census_2015`\n    WHERE\n             spc_latin is NOT NULL\n             AND zip_city is NOT NULL\n             AND tree_dbh is NOT NULL\n             AND boroname is NOT NULL\n             AND nta_name is NOT NULL\n             AND health is NOT NULL\n             AND sidewalk is NOT NULL\n    GROUP BY\n             spc_latin\n    ORDER BY\n             total desc\n    LIMIT 5; \n    ```", "```py\n    CREATE OR REPLACE TABLE `10_nyc_trees_xgboost.top5_species` AS\n          SELECT   spc_latin,\n             COUNT(*) total\n          FROM    `bigquery-public-data.new_york_trees.tree_census_2015`\n          WHERE\n                   spc_latin is NOT NULL\n                   AND zip_city is NOT NULL\n                   AND tree_dbh is NOT NULL\n                   AND boroname is NOT NULL\n                   AND nta_name is NOT NULL\n                   AND health is NOT NULL\n                   AND sidewalk is NOT NULL\n          GROUP BY\n                   spc_latin\n          ORDER BY\n                   total desc\n          LIMIT 5;\n    ```", "```py\n    CREATE OR REPLACE TABLE `10_nyc_trees_xgboost.training_table` AS \n    SELECT  *\n    FROM    `bigquery-public-data.new_york_trees.tree_census_2015`\n    WHERE\n             zip_city is NOT NULL\n             AND tree_dbh is NOT NULL\n             AND boroname is NOT NULL\n             AND nta_name is NOT NULL\n             AND health is NOT NULL\n             AND sidewalk is NOT NULL\n             AND spc_latin in \n             (SELECT spc_latin from `10_nyc_trees_xgboost.top5_species`) \n             AND MOD(tree_id,11)<=8; \n    ```", "```py\n    CREATE OR REPLACE TABLE `10_nyc_trees_xgboost.evaluation_table` AS \n    SELECT  *\n    FROM    `bigquery-public-data.new_york_trees.tree_census_2015`\n    WHERE\n             zip_city is NOT NULL\n             AND tree_dbh is NOT NULL\n             AND boroname is NOT NULL\n             AND nta_name is NOT NULL\n             AND health is NOT NULL\n             AND sidewalk is NOT NULL\n             AND spc_latin in \n             (SELECT spc_latin from `06_nyc_trees.top5_species`) \n             AND MOD(tree_id,11)=9;\n    ```", "```py\n    CREATE OR REPLACE TABLE `10_nyc_trees_xgboost.classification_table` AS \n    SELECT  *\n    FROM    `bigquery-public-data.new_york_trees.tree_census_2015`\n    WHERE\n             zip_city is NOT NULL\n             AND tree_dbh is NOT NULL\n             AND boroname is NOT NULL\n             AND nta_name is NOT NULL\n             AND health is NOT NULL\n             AND sidewalk is NOT NULL\n             AND spc_latin in \n             (SELECT spc_latin from `10_nyc_trees_xgboost.top5_species`) \n             AND MOD(tree_id,11)=10;\n    ```", "```py\n    CREATE OR REPLACE MODEL `10_nyc_trees_xgboost.xgboost_classification_model_version_1`\n    OPTIONS\n      ( MODEL_TYPE='BOOSTED_TREE_CLASSIFIER',\n        BOOSTER_TYPE = 'GBTREE',\n        NUM_PARALLEL_TREE = 1,\n        MAX_ITERATIONS = 50,\n        TREE_METHOD = 'HIST',\n        EARLY_STOP = FALSE,\n        AUTO_CLASS_WEIGHTS=TRUE\n      ) AS\n    SELECT\n      zip_city,\n      tree_dbh,\n      spc_latin as label\n    FROM\n      `10_nyc_trees_xgboost.training_table` ;\n    ```", "```py\n    CREATE OR REPLACE MODEL `10_nyc_trees_xgboost.xgboost_classification_model_version_2`\n    OPTIONS\n      ( MODEL_TYPE='BOOSTED_TREE_CLASSIFIER',\n        BOOSTER_TYPE = 'GBTREE',\n        NUM_PARALLEL_TREE = 1,\n        MAX_ITERATIONS = 50,\n        TREE_METHOD = 'HIST',\n        EARLY_STOP = FALSE,\n        AUTO_CLASS_WEIGHTS=TRUE\n      ) AS\n    SELECT\n      zip_city,\n      tree_dbh,\n      boroname,\n      nta_name,\n      spc_latin as label\n    FROM\n      `10_nyc_trees_xgboost.training_table` ;\n    ```", "```py\n    CREATE OR REPLACE MODEL `10_nyc_trees_xgboost.xgboost_classification_model_version_3`\n    OPTIONS\n      ( MODEL_TYPE='BOOSTED_TREE_CLASSIFIER',\n        BOOSTER_TYPE = 'GBTREE',\n        NUM_PARALLEL_TREE = 5,\n        MAX_ITERATIONS = 50,\n        TREE_METHOD = 'HIST',\n        EARLY_STOP = FALSE,\n        AUTO_CLASS_WEIGHTS=TRUE\n      ) AS\n    SELECT\n      zip_city,\n      tree_dbh,\n      boroname,\n      nta_name,\n      health,\n      sidewalk,\n      spc_latin as label\n    FROM\n      `10_nyc_trees_xgboost.training_table`;\n    ```", "```py\nSELECT\n  roc_auc,\n  CASE\n    WHEN roc_auc > .9 THEN 'EXCELLENT'\n    WHEN roc_auc > .8 THEN 'VERY GOOD'\n    WHEN roc_auc > .7 THEN 'GOOD'\n    WHEN roc_auc > .6 THEN 'FINE'\n    WHEN roc_auc > .5 THEN 'NEEDS IMPROVEMENTS'\n  ELSE\n  'POOR'\nEND\n  AS model_quality\nFROM \n  ML.EVALUATE(MODEL `10_nyc_trees_xgboost.xgboost_classification_model_version_3`,\n    (\n    SELECT\n       zip_city,\n       tree_dbh,\n       boroname,\n       nta_name,\n       health,\n       sidewalk,\n       spc_latin as label\n     FROM `10_nyc_trees_xgboost.evaluation_table`));\n```", "```py\nSELECT\n  tree_id,\n  actual_label,\n  predicted_label_probs,\n  predicted_label\nFROM\n  ML.PREDICT (MODEL `10_nyc_trees_xgboost.xgboost_classification_model_version_3`,\n    (\n    SELECT\n       tree_id,\n       zip_city,\n       tree_dbh,\n       boroname,\n       nta_name,\n       health,\n       sidewalk,\n       spc_latin as actual_label\n    FROM\n      `10_nyc_trees_xgboost.classification_table`\n     )\n  );\n```", "```py\nSELECT COUNT(*)\nFROM (\n      SELECT\n        tree_id,\n        actual_label,\n        predicted_label_probs,\n        predicted_label\n      FROM\n        ML.PREDICT (MODEL `10_nyc_trees_xgboost.xgboost_classification_model_version_3`,\n          (\n          SELECT\n             tree_id,\n             zip_city,\n             tree_dbh,\n             boroname,\n             nta_name,\n             health,\n             sidewalk,\n             spc_latin as actual_label\n          FROM\n            `10_nyc_trees_xgboost.classification_table`\n           )\n        )\n)\nWHERE\n      actual_label = predicted_label; \n```"]