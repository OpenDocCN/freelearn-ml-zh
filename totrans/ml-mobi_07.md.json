["```py\nham   What you doing?how are you?\nham   Ok lar... Joking wif u oni...\n ham   dun say so early hor... U c already then say...\n ham   MY NO. IN LUTON 0125698789 RING ME IF UR AROUND! H*\n ham   Siva is in hostel aha:-.\n ham   Cos i was out shopping with darren jus now n i called him 2 ask wat present he wan lor. Then he started guessing who i was wif n he finally guessed darren lor.\n spam  FreeMsg: Txt: CALL to No: 86888 & claim your reward of 3 hours talk time to use from your phone now! ubscribe6GBP/ mnth inc 3hrs 16 stop?txtStop\n spam  Sunshine Quiz! Win a super Sony DVD recorder if you can name the capital of Australia? Text MQUIZ to 82277\\. B\n spam  URGENT! Your Mobile No 07808726822 was awarded a L2,000 Bonus Caller Prize on 02/09/03! This is our 2nd attempt to contact YOU! Call 0871-872-9758 BOX95QU\n```", "```py\npip install scikit-learn pip install numpy pip install coremltools pip install pandas\n```", "```py\n# importing required packages\nimport numpy as np\nimport pandas as pd\n# Reading in and parsing data\nraw_data = open('SMSSpamCollection.txt', 'r')\nsms_data = []\nfor line in raw_data:\n    split_line = line.split(\"\\t\")\n    sms_data.append(split_line)\n\n#Splitting data into messages and labels and training and test in y we are having labels and x with the message text\n\nsms_data = np.array(sms_data)\nX = sms_data[:, 1]\ny = sms_data[:, 0]\n\n#Build a LinearSVC model\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.svm import LinearSVC\n\n#Build tf-idf vector representation of data\nvectorizer = TfidfVectorizer()\n\n# converting the message text as vector\nvectorized_text = vectorizer.fit_transform(X)\n\ntext_clf = LinearSVC()\n# fitting the model\ntext_clf = text_clf.fit(vectorized_text, y)\n```", "```py\nprint text_clf.predict(vectorizer.transform([\"\"\"XXXMobileMovieClub: To use your credit, click the WAP link in the next txt message or click here>> http://wap. xxxmobilemovieclub.com?n=QJKGIGHJJGCBL\"\"\"]))\n```", "```py\n# importing the library\nimport coremltools\n\n# convert to fitted model in to coreml model\ncoreml_model = coremltools.converters.sklearn.convert(text_clf, \"message\", \"spam_or_not\")\n\n#set parameters of the model\ncoreml_model.short_description = \"Classify whether message is spam or not\"\ncoreml_model.input_description[\"message\"] = \"TFIDF of message to be classified\"\ncoreml_model.output_description[\"spam_or_not\"] = \"Whether message is spam or not\"\n\n#save the model\ncoreml_model.save(\"SpamMessageClassifier.mlmodel\")\n```", "```py\n//common imports\nimport UIKit\nimport CoreML\n\nclass ViewController: UIViewController {\n    //binding to the UI elements\n    @IBOutlet weak var messageTextField: UITextField!\n    @IBOutlet weak var messageLabel: UILabel!\n    @IBOutlet weak var spamLabel: UILabel!\n\n// This function will take the text from the user input and convert it in to a vector format which our model requires using the wordslist.txt file and the SMSSpamCollection.txt file that we have downloaded.\n    func tfidf(sms: String) -> MLMultiArray{\n        //get path for files\n        let wordsFile = Bundle.main.path(forResource: \"wordlist\", ofType: \"txt\")\n        let smsFile = Bundle.main.path(forResource: \"SMSSpamCollection\", ofType: \"txt\")\n        do {\n            //read words file\n            let wordsFileText = try String(contentsOfFile: wordsFile!, encoding: String.Encoding.utf8)\n            var wordsData = wordsFileText.components(separatedBy: .newlines)\n            wordsData.removeLast() // Trailing newline.\n            //read spam collection file\n            let smsFileText = try String(contentsOfFile: smsFile!, encoding: String.Encoding.utf8)\n            var smsData = smsFileText.components(separatedBy: .newlines)\n            smsData.removeLast() // Trailing newline.\n            let wordsInMessage = sms.split(separator: \" \")\n            //create a multi-dimensional array\n            let vectorized = try MLMultiArray(shape: [NSNumber(integerLiteral: wordsData.count)], dataType: MLMultiArrayDataType.double)\n            for i in 0..<wordsData.count{\n                let word = wordsData[i]\n                if sms.contains(word){\n                    var wordCount = 0\n                    for substr in wordsInMessage{\n                        if substr.elementsEqual(word){\n                            wordCount += 1\n                        }\n                    }\n                    let tf = Double(wordCount) / Double(wordsInMessage.count)\n                    var docCount = 0\n                    for sms in smsData{\n                        if sms.contains(word) {\n                            docCount += 1\n                        }\n                    }\n                    let idf = log(Double(smsData.count) / Double(docCount))\n                    vectorized[i] = NSNumber(value: tf * idf)\n                } else {\n                    vectorized[i] = 0.0\n                }\n            }\n            return vectorized\n        } catch {\n            return MLMultiArray()\n        }\n    }\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        // Do any additional setup after loading the view, typically from a nib.\n    }\n//This function will call when you click the predict button\n    @IBAction func predictSpam(_ sender: UIButton) {\n        let enteredMessage =  messageTextField.text!\n// checking and handling empty message.\n        if (enteredMessage != \"\"){\n            spamLabel.text = \"\"\n        }\n// Calling the preceding function to convert the text to vector\n        let vec = tfidf(sms: enteredMessage)\n        do {\n// Passing input to the our model to get the prediction results.\n            let prediction = try SpamMessageClassifier().prediction(message: vec).spam_or_not\n            print (prediction)\n            if (prediction == \"spam\"){\n                spamLabel.text = \"SPAM!\"\n            }\n\n// Our model is having ham as label for not spam messages so our model will send the label as ham. Hence we are converting to Not Spam for displaying purpose\n           else if(prediction == \"ham\"){\n                spamLabel.text = \"NOT SPAM\"\n            }\n        }\n        catch{\n                // catching the exception\n            spamLabel.text = \"No Prediction\"\n        }\n    }\n}\n```"]