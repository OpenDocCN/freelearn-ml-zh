- en: '2'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Designing Databricks: Day One'
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: “Design is not just what it looks like and feels like. Design is how it works.”
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: '- Steve Jobs'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will introduce concepts and topics that engineers, data scientists,
    and people in similar roles should know to set themselves up for success in the
    Databricks Data Intelligence Platform. When setting up your data and AI platform,
    in our case, Databricks, there are always best practices to follow. We share those
    in this chapter to give you a better understanding of the setup options and their
    impacts; these can be strategic decisions that impact the entire data product
    workflow, as well as simply matters of preference. We start by explaining Databrick’s
    general architecture and key terminology, then cover the most important decisions
    to be made during platform setup, and conclude with code examples and configurations
    to download the data for our example projects. We also introduce a variety of
    platform features and components throughout the chapter, which we will cover in
    more detail throughout the rest of this book. Here is what you will learn as part
    of this chapter:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is what you will learn about as part of this chapter:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: Planning your platform
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining a workspace
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Selecting the metastore
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Discussing data preparation
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Planning to create features
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modeling in Databricks
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Applying learning
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Planning your platform
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section covers topics for discussion before and during the DI Platform
    setup process. The role of the data team often determines the platform setup.
    One of Databricks’ ideal attributes is that the technology stack is unified, making
    the setup and collaboration between teams more straightforward. The data team
    reporting structure frequently determines the border where one role ends and another
    begins, rather than the actual data product workflow. Luckily, we do not have
    to worry because the DI Platform serves data engineers, scientists, and analysts
    alike.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: In *Figure 2**.1*, you can see an end-to-end lakehouse architecture and the
    components in Databricks.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.1 – Overview of a lakehouse architecture and how Databricks DI Platform
    fits this paradigm](img/B16865_02_01.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
- en: Figure 2.1 – Overview of a lakehouse architecture and how Databricks DI Platform
    fits this paradigm
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: The DI Platform consists of one or more Databricks accounts. Most of the time,
    companies only have one. However, there are situations where companies require
    extra environment isolation, and having separate accounts for development, staging,
    and production is an option. Discussion about multiple accounts for levels of
    isolation is outside of this book's scope, but if you have questions or want to
    know more, please check out the resources in *Further reading*.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.2 – Visual representation of the environment isolation options](img/B16865_02_02.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
- en: Figure 2.2 – Visual representation of the environment isolation options
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: We separate our environments using different catalogs. Most of this book’s project
    work occurs using the `ml_in_action` catalog. For the production version of some
    models, we use the `ml_in_prod` catalog. Setting up multiple workspaces is another
    way to separate environments. We recommend using documentation and your company
    policies to guide your isolation setup. Let’s move on to what precisely a workspace
    is in the context of Databricks.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: Defining a workspace
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It’s important to know that Databricks uses the word **workspace** to refer
    to two distinct components: an instance of Databricks (meaning your hosted Databricks
    deployment that you access via your unique URL address) and the folder environment
    for accessing your work products, like notebooks, queries, and dashboards.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s go through the two components:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: '**Workspace as an instance**: A Databricks account can have multiple workspaces
    attached to it, meaning instances of the DI Platform are deployed and often accessible
    from a browser, as mentioned previously, but are also accessible via an SDK or
    a REST API.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Workspace` folder to store their MLFlow experiments or Terraform states for
    pipeline deployment. You can also create and store notebooks outside source control
    in your home and project folders.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We now have a clearer understanding of a workspace. Now let’s discuss why we
    choose **Unity Catalog** (**UC**) as our preferred metastore.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: Selecting the metastore
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A metastore is a system that stores metadata for a data platform and can be
    thought of as the top-level container of objects. It registers a variety of information
    about databases, tables, views, **User-Defined Functions** (**UDFs**), and other
    data assets. Metadata includes details such as storage location and the permissions
    that govern access to each asset.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: 'Two types of metastores are natively available in the DI Platform: **Unity
    Catalog** (**UC**) and the **Hive Metastore** (**HMS**). UC has a three-level
    namespace consisting of a catalog, a database (also called a schema), and a table
    name. In contrast, the HMS only uses a two-level namespace containing just a database
    and table name. A metastore is required for your Databricks Workspace instance,
    as this is the component that organizes and governs data access. Deciding on the
    right metastore is an early decision in your DI Platform journey, and we recommend
    Unity Catalog. Let’s talk about why.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: Notice in *Figure 2**.3* that you can have multiple workspaces assigned to the
    same metastore. **Access Controls** and **User Management** are scoped to the
    account level, as shown in the figure. A UC **Metastore**, a group of catalogs,
    is scoped to a region with precisely one metastore per region. Within the region,
    you can easily share **Data**, **Features**, **Volumes** access, **Functions**,
    and **Models**.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.3 – The Design of Unity Catalog with multiple workspaces](img/B16865_02_03.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
- en: Figure 2.3 – The Design of Unity Catalog with multiple workspaces
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: Unity Catalog is more than a group of data assets. UC also tracks who has accessed
    assets, which makes auditing a simple exercise. Using UC allows companies to administer
    privileges and secure data and objects easily while being able to share them between
    various workspaces. Securely sharing between environments is one of the reasons
    why we recommend using the UC metastore.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: The HMS design is less centralized than that of UC. For example, historically,
    workspaces have been created as data and code isolation, meaning there is a separate
    workspace for separate isolation levels. This design often required a centralized
    model registry workspace in addition to development, staging, and production workspaces.
    If not using UC, each workspace requires its own HMS and user and group management.
    In contrast, UC governs all assets at the account level rather than the individual
    workspace level; see *Figure 2**.3*, *Figure 2**.4*, and *Further reading*. The
    centralized governance model provides the ability to integrate multiple workspaces
    more seamlessly.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.4 – UC governs all assets under catalogs, including databases, tables,
    volumes, functions, and models](img/B16865_02_04.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
- en: Figure 2.4 – UC governs all assets under catalogs, including databases, tables,
    volumes, functions, and models
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: Deciding on your metastore does not have to be a permanent choice. However,
    migrating later could become a headache. UC is continually improving and integrating
    with new Databricks features. The list of reasons to choose UC over HMS continues
    to grow, and our recommendation is to begin with and stick with UC.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: To determine whether Unity Catalog is the right choice for you and your company,
    you can check out the shrinking list of limitations for choosing UC in *Further
    reading*. As UC continues to expand in capability, it is the path of the future.
    Specifically, for machine learning, there is an integration with the Feature Engineering
    client and the new Model Registry. Using the UC Model Registry for model sharing
    and governing is simpler. We will cover more about the Model Registry in Unity
    Catalog and Databricks Feature Engineering Client in *Chapters 5, 6*, and *7*,
    but if you’re curious and eager to learn more now, you can check out Manage model
    lifecycle in Unity Catalog in the Further reading section. Given the ever-growing
    number of reasons to use UC, all project code in this book will use UC.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: Defining where the data lives, and cloud object storage
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: All data products start with data, and so how we make the data accessible for
    data teams is another important early design choice. Databricks is a cloud-based
    platform that connects to cloud object storage – **Azure Data Lake Storage** (**ADLS**),
    Amazon **Simple Storage Service** (**S3**), or **Google Cloud Storage** (**GCS**).
    There is a separation of compute and storage. Databricks orchestrates compute;
    the data is in cloud object storage.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: Originally, data had to be in cloud object storage before being utilized on
    the DI Platform. Now, **Query Federation** allows customers to query their data
    no matter where it resides (see the documentation for any possible limitations)
    without first worrying about ingestion and data engineering from that remote system.
    However, that is data in memory, not persistent data. You can land your data in
    cloud storage in various ways. There are many documentation sources and external
    tools for the actual landing of data in cloud storage. These may depend on your
    cloud service provider of choice. Despite best practices of storing data in your
    cloud storage, using the **Databricks File System** (**DBFS**) to store the data
    for this book’s example projects is also possible.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: DBFS is a shared filesystem provided by Databricks that all users of a given
    workspace can access. Any data stored in DBFS is potentially accessible to all
    users, regardless of their group, role, or permissions. Therefore, only non-sensitive
    and non-production data you are willing to share openly across your organization
    should be in DBFS. An example of non-sensitive data would be the publicly available
    *Kaggle* datasets. This lack of governance is why we recommend storing data in
    Databricks volumes, where you can apply governance. We will cover more on volumes
    in the last section of this chapter.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: When it comes to cloud storage, the optimal format for structured data is almost
    always Delta, which we talked about in detail in [*Chapter 1*](B16865_01.xhtml#_idTextAnchor016).
    When a table is stored in the Delta format, we refer to it as a Delta table. You
    can choose tables to be “managed” or “external” tables. We use both types of tables
    in this book (the choice is justified when required). Please see the resources
    in *Further reading* for more information on the two types of tables.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: Discussing source control
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Whether or not to use a source control is usually not the question. The question
    is how should someone use it? Databricks has a few features that can aid in source
    control.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: The first is the version history that is built into notebooks. The history of
    changes for each notebook is tracked even before submitting it to a remote repository
    using Git. Version tracking is beneficial as we are not always ready to make a
    Git commit but still want to track progress and collaborate. It’s also a game
    changer if you accidentally pull someone’s code into your working remote branch
    and forget to push your code before it. The notebook’s history will keep your
    edited copy so you can simply roll back in time and restore all your work!
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: The second feature is the ease of connecting notebooks and files in your workspace
    to a remote Git repository. Historically, saving Jupyter notebooks to remote repositories
    was a technical nightmare for code reviews, sharing, and diffs. The Databricks
    code repository integration allows Databricks notebooks to contain multiple languages
    (Python, Scala, SQL) and track them as nicely as a typical Python file. This ability
    to track notebooks in source as a standard file is an improvement for data engineers
    and scientists wanting to review notebooks compared to previously converting files
    to Python and losing all output and images. The days of setting up hooks to automatically
    save your notebook as a regular Python file every time you save your notebook
    are over.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: Of course, you can store standard file formats such as markdown, delimiter separated,
    JSON, or YML for a whole reproducibility approach. Note that we do not recommend
    keeping data under repos unless it’s a data sample for testing.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: Within a repository, how a team defines the expected folder structure for each
    project is generally less important than the consistent use of that structure.
    However, defining your project structure is still important. We recommend reading
    through *Big Book of MLOps* (Joseph Bradley, Rafi Kurlansik, Matthew Thomson,
    and Niall Turbitt, 2023, *Big Book of MLOps, second edition*, [https://www.databricks.com/resources/ebook/the-big-book-of-mlops](https://www.databricks.com/resources/ebook/the-big-book-of-mlops))
    to determine the best structure for your team or organization. As we will see
    in future chapters, MLflow and repositories are essential for **reproducible research**.
    In the world of data science and machine learning specifically, we want to ensure
    the reproduction of models and experiments.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: Discussing data preparation
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Generally, the first step for any data science project is to explore and prepare
    the data. We will refer to this process as moving the data from “Bronze” to “Silver”
    layers in reference to the Medallion architecture methodology. You might think
    of this type of data transformation exclusively as a data engineering task, but
    it’s also essential for data science and machine learning.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: 'If you aren’t familiar with this architecture terminology, the **Medallion
    architecture** is a data design pattern used to organize data logically in a warehouse.
    This architecture is also commonly called “multi-hop” architecture. It aims to
    incrementally and progressively improve the structure and quality of data as it
    flows through each layer. The Medallion architecture has three layers: Bronze,
    Silver, and Gold, listed as follows:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: The **Bronze** layer is the raw data layer. It contains all the raw, unprocessed
    data ingested from the source systems. This data still needs to be cleaned or
    transformed.
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Silver** layer is the validated data layer. It contains data that has
    been cleaned and is subject to various validation and transformation steps. This
    data is ready to be used for analysis and modeling.
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**银**层是经过验证的数据层。它包含经过清理且已接受各种验证和转换步骤的数据。这些数据可用于分析和建模。'
- en: The **Gold** layer is the enriched data layer. It is the highest level and contains
    data enriched with additional information, such as business intelligence metrics
    and key performance indicators, to meet the requirements of the business users.
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**金**层是增强数据层。它是最高级别，包含添加了额外信息的数据，如商业智能指标和关键绩效指标（KPIs），以满足业务用户的需求。'
- en: The Medallion architecture is a flexible and customizable architecture that
    can meet the specific needs of each organization. The Medallion architecture is
    compatible with the concept of Data Mesh. Data Mesh is an architectural and organizational
    paradigm to ensure value from data. Lakehouse and Data Mesh are complementary,
    paradigms. See *Further reading* for blog posts on leveraging a data mesh with
    the DI Platform. This distributed data architecture enables organizations to unlock
    the value of their data by making it accessible and usable by everyone in the
    organization.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: Medallion架构是一种灵活且可定制的架构，可以满足每个组织的特定需求。Medallion架构与Data Mesh概念兼容。Data Mesh是一种架构和组织范式，旨在确保数据的价值。Lakehouse和Data
    Mesh是互补的范式。参见*进一步阅读*部分，了解如何利用DI平台利用数据网格的博客文章。这种分布式数据架构使组织能够通过使组织中的每个人都能访问和使用数据来释放数据的价值。
- en: 'Communication and collaboration are vital for the data preparation process.
    This step involves identifying and correcting errors, filling in missing values,
    and resolving inconsistencies in the data. The actions you take should be discussed
    as a team and documented. This is especially important when working collaboratively
    across data teams because data engineers and data scientists often have different
    perspectives on how data should be prepared. For example, we have seen situations
    where an engineer imputed all the missing values in a column with a zero. The
    rationalization made sense; many zeros were already in the column, making the
    KPIs’ values come out correctly. However, from a modeling perspective, missing
    data differs from zeros, especially if there are already zeros in the dataset.
    The approach of replacing nulls with zeros is not necessarily incorrect; it simply
    needs to be discussed with the downstream consumers of the data. One helpful communication
    tool is the column tagging functionality from the Databricks Catalog UI. See *Figure
    2**.5* for an example:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 通信和协作对于数据准备过程至关重要。这一步骤涉及识别和纠正错误、填补缺失值以及解决数据中的不一致性。你所采取的行动应该作为团队讨论并记录下来。当跨数据团队协作时，这一点尤为重要，因为数据工程师和数据科学家往往对数据应该如何准备有不同的看法。例如，我们见过工程师在一个列中用零插补所有缺失值的情况。这种合理化是有道理的；列中已经有很多零了，这使得关键绩效指标（KPIs）的值正确显示。然而，从建模的角度来看，缺失数据与零不同，特别是如果数据集中已经存在零的话。用零替换空值的方法并不一定是不正确的；它只需要与数据下游的消费者进行讨论。一个有用的沟通工具是Databricks目录UI中的列标记功能。参见*图2.5*的示例：
- en: '![Figure 2.5 – Example of how to use tagging in a catalog to communicate the
    transformation performed on a column to all table users](img/B16865_02_05.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![图2.5 – 如何在目录中使用标记来向所有表用户传达对列进行的转换](img/B16865_02_05.jpg)'
- en: Figure 2.5 – Example of how to use tagging in a catalog to communicate the transformation
    performed on a column to all table users
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.5 – 在目录中使用标记的示例，以向所有表用户传达对列进行的转换
- en: This implementation of an incorrect imputation method also serves as an example
    of wanting to go back and reprocess history. Luckily, using the Medallion architecture
    methodology is a saving grace. In the situation mentioned previously, the chosen
    imputation would only be present in the Silver and Gold data layers. Meanwhile,
    the Bronze layer still contains the original raw data, so the source of truth
    is not lost, and reprocessing is possible.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这种不正确的插补方法的实现也作为一个想要回溯和重新处理历史的例子。幸运的是，使用Medallion架构方法论是一种救赎。在之前提到的情况下，所选的插补方法只会出现在银和金数据层中。同时，青铜层仍然包含原始的原始数据，因此真相来源并未丢失，重新处理是可能的。
- en: One of the ways that the Databricks Platform boosts productivity and collaboration
    is the feature of real-time collaboration support for notebooks. This feature
    allows two or more people to simultaneously see and edit a notebook. The ability
    to pair-program virtually during the pandemic was a lifesaver for many. We’re
    big fans of people who have worked remotely for much of our careers. Collaborative
    editing of a notebook is much easier than sharing code via video call. While there
    are many options for reviewing code, historically, reviewing code in notebooks
    has been difficult, particularly when committing notebooks to source control.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: After completing transformations, documentation is easy using markdown in notebooks.
    Even if the resulting notebook is not not itself designated for production ETL,
    documenting the how and why of your data transformations is important for all
    downstream users. To read more about Databricks notebooks, see the documentation
    in *Further reading*.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: Planning to create features
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A data engineer may build Gold tables from Silver tables for consumption by
    the business. At the same time, a data scientist is building features from the
    same Silver tables for models. If we aren’t careful, two people working separately
    without communication can create different versions of the same metrics. When
    architecting your unified DI Platform, be sure to think about reusability and
    maintainability. For this reason, with features specifically, the features-as-code
    approach is our recommendation. Features-as-code refers to the software development
    practice *everything is code*, with a focus on creating a repository of reusable
    code to define features rather than features stored in tables.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: You can implement features-as-code in various ways. Initially, we mainly focus
    on function reusability. You can place functions you execute in multiple notebooks
    or scripts in a folder within the repository root directory. In the *Applying
    our learning* section, you will see this is where we store functions even when
    not calculating a feature per se. We call these the utils. You will be referencing
    the `mlia_utils` notebook throughout the example projects.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: You can find the `mlia_utils` functions in the root folder of the GitHub repository
    ([https://github.com/PacktPublishing/Databricks-Lakehouse-ML-In-Action](https://github.com/PacktPublishing/Databricks-Lakehouse-ML-In-Action)).
    We walk through pulling the GitHub repository into Databricks in the *Applying
    our learning* section. In it, you will find Python files containing useful functions
    we will use in the projects. It is best practice to save, share, and track functions
    so that the metrics and features we calculate are consistent. Note the empty `__init__.py`
    file is also in the `utils` folder. Having an `__init__.py` file is required.
    With this structure, we can use all functions as imports, for example, from `mlia_utils.rag_funcs`
    import `extract_doc_text`.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: Features-as-code is not only a way to reduce duplicative work by reusing functions.
    It is also a great way to ensure consistent business metrics. For example, online
    advertising often has complex calculations for the different types of revenue.
    Therefore, if other people or teams calculate business-critical metrics differently,
    it will be hard to establish the true metric value. Instead, you can often avoid
    this confusion by providing executive-approved functions for use. We will talk
    about this again in *Chapters 5* and *6*. In addition to features being centrally
    located and thus easier to find, Databricks offers easy ways to document your
    data assets.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: Creating a business process requiring the team to document tables and functions
    with descriptions makes current and previous efforts more discoverable. In the
    Databricks Catalog UI, you should see *AI-generated* suggestions to fill in your
    table and column descriptions, so you don’t have to start from scratch. Another
    great way to document transformations performed on a data table would be using
    tags. Tags can help with documentation and communication. Recall the example of
    missing data being imputed (*Figure 2**.5*).
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: Focusing on ML features more specifically, you will learn how to store and serve
    feature functions to simplify your final deployment process. You will create an
    on-demand feature function and use it in your model. We also will show you how
    to leverage saved feature tables to create training sets. If you want to jump
    ahead right away, see [*Chapter 5*](B16865_05.xhtml#_idTextAnchor244), where we
    cover topics such as on-demand feature functions, feature lookups, syncing to
    the online store, and the Databricks Feature Engineering client.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: Modeling in Databricks
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After features have been created and stored as feature tables, we create training
    sets and focus on model training. We will cover modeling in terms of leveraging
    Databricks to facilitate the model lifecycle in [*Chapter 6*](B16865_06.xhtml#_idTextAnchor297).
    In [*Chapter 7*](B16865_07.xhtml#_idTextAnchor325), we’ll discuss the Unity Catalog
    Registry and how to use it to track an enormous amount of information from the
    associated experiments, in addition to details such as model lineage. You can
    register multiple versions of a model at every stage and can give these different
    versions aliases, such as **champion** and **challenger**, or a more specific
    alias referring to versions A and B in an A/B test. See aliasing in *Figure 2**.6*.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.6 – A user can alias a model with specific names for A/B testing
    or multi-armed bandits](img/B16865_02_06.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
- en: Figure 2.6 – A user can alias a model with specific names for A/B testing or
    multi-armed bandits
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: In [*Chapter 7*](B16865_07.xhtml#_idTextAnchor325), we demonstrate how to trigger
    a testing script to test every model before having a human review it. Testing
    models is an efficient practice to reduce the time to production when used consistently
    and with intention. We suggest defining the criteria for successfully transitioning
    models/code through isolation environments (from development to stage to production).
    Clearly defined environments are one of the practices that enable you to create
    clear and consistent model quality expectations across all models. Be sure to
    consult *The Big Book of MLOps* on best practices for isolation and model promotion.
    No matter where your environment is, it is beneficial to incorporate logging into
    model experimentation.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: 'We discuss logging in the ML context rather than the software development sense.
    Logging for ML is focused on reproducible research and is also known as experiment
    tracking. It is common practice to track the following:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: The input data used to train a model
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The parameters used to train a model
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The accuracy and speed performance of a model during training and inference
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The errors that occur during training and inference
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The runtime environment of a model
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When using MLflow, you have access to a powerful feature called automatic logging,
    or autologging. Autologging is excellent because it makes it easy to track the
    parameters, metrics, and artifacts of your machine learning experiments without
    explicit instructions.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: Auto logging only tracks flavors supported by MLflow. Custom *pyfunc* models
    are not supported. For more information, check *Further reading*.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: MLflow auto logging logs parameter values and models for each run in a single
    experiment. Every time you train and evaluate your model, MLflow logs your standard
    metrics and parameters. If you have custom metrics to track with your models,
    you can also easily add them. We demonstrate tracking custom metrics in [*Chapter
    6*](B16865_06.xhtml#_idTextAnchor297), when we log parameters for the streaming
    transactions model.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: An admin can enable auto logging for all notebooks attached to interactive clusters
    at the workspace level. At the cluster level, you can add `spark.databricks.mlflow.autologging.enabled=true`
    to the advanced section of your cluster configuration to turn on auto logging
    with a cluster scope. It is less common but possible to enable auto logging within
    a notebook scope by adding `mlflow.autolog()` to a Python cell in a notebook.
    Be sure to check the list of modeling flavors supported by autolog.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: By default, MLflow saves the tracked items in the managed folder in DBFS (which
    will be in UC in the future). You can also set `artifact_location` to point to
    a volume path, which is what we do in the example projects. You also have the
    option to set the location to another cloud storage location, although doing so
    eliminates the ability to see your experiments in the MLflow UI.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: The MLflow UI makes it incredibly easy to compare each trail; see *Figures 2.7*
    and *2.8*.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.7 – Comparison of experiment runs using the MLflow UI](img/B16865_02_07.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
- en: Figure 2.7 – Comparison of experiment runs using the MLflow UI
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: There are numerous options for visualizing the results of experiments tracked
    using MLflow.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.8 – Graphically comparing parameters and model performance in the
    MLflow UI](img/B16865_02_08.jpg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
- en: Figure 2.8 – Graphically comparing parameters and model performance in the MLflow
    UI
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: We’ve examined how to compare parameters and model performance in your experiment
    using the MLflow UI. Next, we’ll look at how to use model monitoring (Lakehouse
    monitoring) to keep track of your model’s performance over time.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: Monitoring data and models
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When we think about model monitoring and how to implement it, it becomes less
    about the actual model itself and more about the model’s input and output. For
    this reason, Databricks Lakehouse Monitoring focuses on monitoring a model’s input
    and output, which is simply data. The computation of table metrics occurs in the
    background using serverless compute, or as we like to call it, managed compute.
    Fully managed compute abstracts away the complexities and optimization so users
    focus on which tables to monitor, known as primary tables, rather than how. Lakehouse
    Monitoring is currently in public preview, meaning not all information is ready
    for release. For the latest on this feature, check out the Lakehouse Monitoring
    product page. We demonstrate how to use Lakehouse Monitoring in *Chapters 4* *and
    7*.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: We’ve touched on a wide variety of topics so far, from the earliest design decisions
    when setting up your Databricks Data Intelligence Platform to the key topics we’ll
    cover throughout the rest of this book. Now let’s dive into the example projects.
    Get ready to follow along in your own Databricks workspace as you work through
    setting up your workspace.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: Applying our learning
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter’s *Applying our learning* section focuses on getting your Databricks
    workspace set up and ready for each project we’ll be working through. We’ll also
    go over getting set up in Kaggle so that you can download the datasets we will
    use throughout the rest of this book. Let’s get started!
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before we begin setting up a workspace, please review the technical requirements
    needed to complete the hands-on work in this chapter:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: We utilize a Python package, `opendatasets`, to download the data we need from
    the Kaggle API easily.
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We use the Databricks Labs Python library, `dbldatagen`, to generate synthetic
    data.
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To use the Kaggle API, you must download your credential file, `kaggle.json`.
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A GitHub account is beneficial for connecting Databricks and the code repository
    for the book ([https://github.com/PacktPublishing/Databricks-ML-In-Action](https://github.com/PacktPublishing/Databricks-ML-In-Action)).
    In addition to a GitHub account, it is ideal to fork the book repository into
    your GitHub account. You will see that each chapter has a folder, and each project
    has a folder under the chapters. We will refer to the notebooks by name throughout
    the project work.
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We will use the Databricks Secrets API to save both Kaggle and OpenAI credentials.
    The Secrets API requires the Databricks CLI. We will walk through this setup.
    However, you will need to create a **personal access token** (**PAT**) on your
    own for the configuration step: [https://docs.databricks.com/en/dev-tools/auth/pat.html](https://docs.databricks.com/en/dev-tools/auth/pat.html)'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The compute clusters we use are as follows (they vary slightly depending on
    your data cloud):'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Single-node CPU configuration
  id: totrans-108
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 2.9 – Single-node CPU cluster configuration, DBR ML 14.2](img/B16865_02_09.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
- en: Figure 2.9 – Single-node CPU cluster configuration, DBR ML 14.2
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: This will work for most workloads in this book.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: Setting up your workspace
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As defined previously, the workspace discussed in this section refers to the
    deployment instance. Here, we will discuss workspace setup recommendations, project
    setup files, and download instructions for each dataset used throughout this book.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: There is comprehensive documentation on deploying your workspace for the first
    time. If you do not already have a Databricks account and deployed workspace,
    then you have a couple of places to start from. One method is going into your
    cloud account and activating Databricks through the marketplaces. Another method
    is to begin on the Databricks website. For more advanced users, consider using
    Terraform. Given the amount of documentation and the ever-changing world of technology,
    we leave the exercise of activating a workspace up to you.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: Once we have a workspace deployed, we can begin setting it up. Generally, we
    start with user groups and governance. The experience of setting up Unity Catalog
    is frequently updated for simplicity. Therefore, we recommend you watch the latest
    video documentation on how to do so (see *Further reading*). The process is the
    same, regardless of the data persona using the platform. Please be sure to complete
    metastore and governance setup before going forward.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: Kaggle setup
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You will need a Kaggle account to download the Kaggle datasets we’ll be using,
    which require an API token for authentication. There is an official Kaggle API,
    but, there are numerous other ways to connect to Kaggle to download data and interact
    with the Kaggle site as well. All methods require downloading your API credentials
    file, `kaggle.json`, from the Kaggle website. Before downloading data, you need
    to make your credentials accessible. Here are three methods for accomplishing
    this:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: '`kaggle.json` file to your project folder. If you choose to do this, be aware
    that your credentials are viewable to others, even if only admins. Also, add `kaggle.json`
    to your `.gitignore` file to prevent committing your credentials to the repository
    and ensure you do not commit your credentials to a Git repository.'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.gitignore` file to prevent committing your credentials to the repository.
    However, the ability to remove other users’ access may not be in your control,
    depending on your role. Furthermore, in general, admins can see all files.'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 2.10 – Passing user credentials to the notebook](img/B16865_02_10.jpg)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
- en: Figure 2.10 – Passing user credentials to the notebook
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: '**Option 3**: Use Databricks secrets to store and retrieve your username and
    token, for optimal security, as shown in *Figure 2**.11*. This is the method we
    use for downloading images.'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 2.11 – Using secrets to store and retrieve your username and token](img/B16865_02_11.jpg)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
- en: Figure 2.11 – Using secrets to store and retrieve your username and token
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: This code is in global_setup.py, but you could also put it in the notebook itself
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: '`o``pendatasets` library to paste your credentials in at the time of download.
    This is a safe way to download data, so we demonstrate this with the Favorita
    Sales data.'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We’ll will walk through `global-setup.py` later. The last section of the file
    is setting your Kaggle credentials. We recommend setting up a secret scope with
    your credentials. We will show you how to set this up once you have a cluster
    running, so there is no need to jump around. Simply download your Kaggle credentials
    for now.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: Setting up our GitHub repository
  id: totrans-128
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The first thing is to pull the code you will work with throughout the book from
    the GitHub repository.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.12 – Setting up a Git repository: Workspace > Repos > Home folder
    > Add > Repo'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16865_02_12.jpg)![Figure 2.12 – Setting up a Git repository: Workspace
    > Repos > Home folder > Add > Repo](img/B16865_02_13.jpg)'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 2.12 – Setting up a Git repository: Workspace > Repos > Home folder
    > Add > Repo'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to your fork of the Book’s GitHub repository, as mentioned in the *Technical
    requirements* section under the *Applying our learning* section. You can copy
    and paste the HTTPS link into the **Add Repo** screen’s URL section, shown in
    *Figure 2**.12*. Next, you will link your GitHub account. If you are unsure how
    to do this, follow the documentation linked in *Further reading* titled *About
    personal access tokens* and *Set up Databricks Repos*. Once your repository is
    ready, you can create a cluster if no one has done so yet.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: Creating compute
  id: totrans-134
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We provide the cluster configurations we use for this project in the *Technical
    requirements* section. You can use the same configuration if you like. There are
    several options to choose from when creating a new cluster configuration. It might
    seem complicated for new users, but stay calm when trying to choose the right
    one. We highly recommend the *Best Practices for Cluster Configuration* linked
    in *Further reading* for guidance, especially if you are responsible for setting
    up compute for one or more teams. Let’s talk about some of the compute options
    as they relate to ML and this book:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: '**Multi-node versus single-node**: Multi-node is excellent for distributed
    projects (think Spark). Single-node is suitable for projects or workloads that
    are performed on the driver (think scikit-learn or pandas).'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Access mode**: Some cluster configurations support Unity Catalog, and some
    don’t. Choose a cluster that supports UC for the projects in this book.'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pyenv`). You will install libraries both at the cluster level and in a couple
    of project notebooks. You can see the **Libraries** tab in *Figure 2**.13*. Simply
    click **Install new** to install a new library.'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 2.13 – Adding libraries to the Machine Learning in Action (MLIA) cluster
    configuration](img/B16865_02_14.jpg)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
- en: Figure 2.13 – Adding libraries to the Machine Learning in Action (MLIA) cluster
    configuration
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: This is the ideal time to install the libraries you will need. Install via `PyPI
    opendatasets`, `dbldatagen`, `databricks-feature-engineering`, and `mlflow-skinny[databricks]>=2.5.0`.
    These libraries are used across multiple notebooks throughout the book.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: '**Photon acceleration**: Photon is an acceleration engine that speeds up ETL
    and SQL workloads. Photon currently is not advantageous for standard ML modeling.'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**VM types**: There are many VMs to pick from. You can choose VMs by family
    from the drop-down list. You can start with a VM in the *General Purpose* group
    if you need more clarification or are just starting.'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Min and max workers**: The rule of thumb is to start with a few max workers
    and increase the number of workers as your workload increases. Keep in mind that
    your cluster will autoscale for you. However, we still recommend starting smaller
    and growing out for only the more compute-heavy examples, such as certain notebooks
    in the Multilabel Image Classification deep learning project.'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You now have your development environment set up. You are ready to lock down
    your credentials for safe use in your code.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the Databricks CLI and secrets
  id: totrans-146
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Databricks CLI is the command line interface for Databricks. We recommend
    using the web terminal from your cluster to install Databricks CLI as well as
    create Databricks secrets. As we mentioned earlier in the chapter, there are other
    options to get access to Kaggle datasets, but we walk you through the steps to
    set up secrets here. Please see the documentation in *Further reading* for more
    details on the CLI, installation, usage, and secrets.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: Go to the **Apps** tab of the compute cluster you set up in the last section.
    You can refer to *Figure 2**.13* to see the location of the **Apps** tab. Apps
    are only available while the cluster is, so it may be greyed out initially. You
    will have to start your cluster to proceed.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the web terminal.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install the latest version of the CLI. `curl -fsSL https://raw.githubusercontent.com/databricks/setup-cli/main/install.sh
    |` `sudo sh`
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check your Databricks version to be sure it’s greater than `0.2`. We had to
    point to the updated version in the location installed by curl. `/usr/local/bin/databricks-v`.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, you need to configure the connection. You need your PAT for this:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Create a secret scope for storing credentials related to this book:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Create a secret for storing your Kaggle username:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Create a secret for storing your Kaggle API key:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Last, list your secrets to make sure everything works as expected:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In [*Chapter 8*](B16865_08.xhtml#_idTextAnchor384), we’ll create another scope
    to hold an OpenAI API key, but for now we just need the Kaggle credentials. Now
    that we have our secrets set up, let's get our codebase ready!
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: Setting up your code base
  id: totrans-163
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We use a setup file to help keep variables consistent across multiple project
    notebooks. You will run the setup file each time you run the project notebooks
    using a magic command, `%run`. This command brings everything into the memory
    of your notebook session. The `global-setup.py` file has numerous components to
    it. Let’s walk through each section. Feel free to edit the file to fit your needs.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: 'It’s possible you’ll receive an error message: `py4j.security.Py4JSecurityException:
    Method public scala.collection.immutable.Map com.databricks.backend.common.rpc.CommandContext.tags()
    is not whitelisted on class` `class com.databricks.backend.common.rpc.CommandContext`'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: This is because you are on a shared compute cluster. You can simply hardcode
    `current_user` to your username.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: Passing variables via widgets
  id: totrans-168
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Widgets pass variables to notebooks similarly to how command-line arguments
    pass variables to Python scripts. The code block in *Figure 2**.14* creates the
    widgets needed to pass variables from the `Run` command to the `global-setup.py`
    file using Databricks Utilities or `dbutils`. You can read more about the `dbutils`
    capabilities in the Databricks Utilities documentation in *Further reading*. These
    widgets create, pass, and access parameters. The arguments are the variable name,
    default value, and verbose name in respective order.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16865_02_15.jpg)![](img/B16865_02_16.jpg)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
- en: Figure 2.14 – Creating widgets for accepting notebook-specific variables
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: You can pass each variable while running the file by adding a single line cell
    with appropriate parameters at the top of the notebook, as shown in *Figure 2**.1**5*.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.15 – Running project-specific variables in our global setup file](img/B16865_02_17.jpg)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
- en: Figure 2.15 – Running project-specific variables in our global setup file
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: Running `global-setup.py` saves all the variables defined in the script in memory
    for easy reference.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: Checking for compatibility
  id: totrans-176
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Next, in `global-setup.py`, we run checks for compatibility between the code
    base and the cluster attached to the notebook.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: 'The compatibility code block checks the following:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: A project name was submitted as a variable.
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The cluster is configured with an ML runtime and meets the minimum version.
    To be sure all features in the code are available in the runtime used, we set
    a minimum.
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once all checks pass, we assign a user and paths.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: Setting a default catalog and project-specific database
  id: totrans-182
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This book provides code that uses the Unity Catalog catalog. Your default catalog
    is set based on your environment. If you do not set the environment or you set
    it to `dev`, then the catalog is named `ml_in_action`. When the environment is
    `prod`, the catalog is `ml_in_prod`. The default name for the database is always
    the project name. However, you can provide a different name if you desire by entering
    a project variable for the database name.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.16 – Using the defined variables to set the default with retries](img/B16865_02_18.jpg)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
- en: Figure 2.16 – Using the defined variables to set the default with retries
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: We want to be sure that the catalog and database are set to the notebooks’ defaults.
    Occasionally, with parallel execution, this command can fail during initialization;
    therefore, we add a few retries to work around this issue, as shown in *Figure
    2**.16*.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: Granting permissions
  id: totrans-187
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now that we’ve set our catalog and database defaults, we can grant permissions.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16865_02_19.jpg)![](img/B16865_02_19_01.jpg)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
- en: Figure 2.17 – Granting permissions to the catalog and database
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: We grant the group `account users` permission. If you do not want to make your
    assets available to others, remove this or comment it out.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: Be sure to use tick marks around your group name or email address when granting
    permission. If you use single quotes instead, you will get an error message.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: The catalog and database are ready for tables. However, not all data we use
    in machine learning goes into a table. For other data, files, and objects, we
    have volumes.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: Setting up volumes
  id: totrans-195
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Volumes are views of cloud object storage. We create project-specific volumes.
    Use them for path-based access to structured or unstructured data. Volumes sit
    under a database in a catalog and are used to manage and provide access to data
    files. You can govern access to volumes using `GRANT` statements. Volumes provide
    scalable file-based storage without sacrificing governance. Often, we use unstructured,
    semi-structured, or non-tabular data in machine learning. Images are a good example
    of unstructured, non-tabular data that we will use for the Multilabel Image Classification
    project. To work with these images, the Multilabel Image Classification project
    uses volumes.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16865_02_20.jpg)![Figure 2.18 – EndpointApiClient class](img/B16865_02_20_01.jpg)'
  id: totrans-197
  prefs: []
  type: TYPE_IMG
- en: Figure 2.18 – EndpointApiClient class
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: Starting the projects
  id: totrans-199
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We have planned our platform and set up our workspace environment. Next, let’s
    work through each project. In GitHub, you will see that each chapter has a folder
    containing folders corresponding to each project. When we refer to the notebooks
    by name, we assume you are in the appropriate chapter and project folder. For
    example, this chapter has the first notebook:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We refer to the notebook by only the filename itself, `CH2-01-Downloading_Sales_Forecast_Data`.
    Let’s jump into the first project.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: 'Project: Favorita store sales – time series forecasting'
  id: totrans-203
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Recall from [*Chapter 1*](B16865_01.xhtml#_idTextAnchor016) that we use a Kaggle-provided
    dataset to forecast sales. In this chapter, we download our data from the Kaggle
    website. To follow along in your workspace, please open the following notebook:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
- en: '`CH2-01-Downloading_Sales_Forecast_Data`'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the notebook, and as well as the code here in *Figures 2.19 and 2.20*, we
    set our path and download our data from Kaggle.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
- en: First, we designate `raw_data_path` to store the files.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.19 – Setting the path for our volume](img/B16865_02_21.jpg)'
  id: totrans-208
  prefs: []
  type: TYPE_IMG
- en: Figure 2.19 – Setting the path for our volume
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
- en: In the following code block (*Figure 2**.20*), we use the Python package `opendatasets`,
    a library specifically created to download data from the Kaggle API. You can find
    more information in the *Further* *reading* section.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.20 – Downloading Favorita data from opendatasets](img/B16865_02_22.jpg)'
  id: totrans-211
  prefs: []
  type: TYPE_IMG
- en: Figure 2.20 – Downloading Favorita data from opendatasets
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
- en: That is all for the *Favorita Store Sales* project in this chapter! Now, we
    can focus on generating data for our `Streaming` `Transactions` project.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: 'Project: Streaming Transactions'
  id: totrans-214
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Your goal with the Streaming Transactions project is to build a model to classify
    transactions. The dataset consists of JSON-formatted transactions with `Transaction`,
    `timestamp`, `Label`, `Amount`, and `CustomerID`.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: 'In later chapters, you will add a product column to demonstrate schema evolution.
    In this chapter, you’ll create the first version of transaction data used throughout
    the rest of the book. To follow along in your workspace, please open the following
    notebook:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
- en: '`CH2-01-Generating_Records_Using_DBKS_Labs_Datagen`'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can run each cell of the notebook as we work through them or run them all
    at once. After the setup commands, we set notebook variables to establish the
    number of rows generated per batch of transactions (`nRows`), the number of positively
    labeled rows per batch (`nPositiveRows`), the path to the volume where you will
    store the JSON dataset (`destination_path`), a temporary path (`temp_path`), and
    the number of seconds between each batch of data you generate (`sleepIntervalSeconds`).
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: The following code block accesses the value of the `Reset` widget. Any data
    already written to the volume will be deleted if the widget is set to `True` (its
    default value).
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.21 – Checking the Reset widget](img/B16865_02_23.jpg)'
  id: totrans-220
  prefs: []
  type: TYPE_IMG
- en: Figure 2.21 – Checking the Reset widget
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
- en: Next, we set the parameter values used in the data generator to create the transactions.
    We set the minimum and maximum values for each `CustomerID`. We also create a
    dictionary of product types and set `min`, `max`, `mean`, `alpha`, and `beta`
    variables, which you use to generate random transaction amounts according to a
    distribution.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16865_02_24.jpg)![](img/B16865_02_25.jpg)'
  id: totrans-223
  prefs: []
  type: TYPE_IMG
- en: Figure 2.22 – Dictionaries to hold variables for use within the define_specs
    function
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: With the variables set, we build out the functions to create the transaction
    data, starting with the `define_specs` function. The function accepts as input
    a product type (defined in the dictionary in *Figure 2**.22*), a positive or negative
    label, and a timestamp; it returns a dollar amount for the transaction. *Figure
    2**.23* shows a portion of the code; the rest is in the accompanying notebook.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
- en: '![ Figure 2.23 – Defining the define_specs function to generate transaction
    records](img/B16865_02_26.jpg)'
  id: totrans-226
  prefs: []
  type: TYPE_IMG
- en: Figure 2.23 – Defining the define_specs function to generate transaction records
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
- en: Next, we write a function to generate a single record by calling `define_specs`
    and including the current timestamp.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.24 – Defining a function to generate a single transaction record](img/B16865_02_27.jpg)'
  id: totrans-229
  prefs: []
  type: TYPE_IMG
- en: Figure 2.24 – Defining a function to generate a single transaction record
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
- en: 'We then build `generateRecordSet` to generate the `recordCount` number of records
    in each batch. Notice that in this notebook, we’re using the `None` product type,
    so the records generated will only have four features: `CustomerID`, `TransactionTimestamp`,
    `Amount`, and `Label` (this will be important in the next chapter!).'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
- en: '![ Figure 2.25 – The generateRecordSet function creates a record for each product
    and each label. Each record contains nRows transactions](img/B16865_02_28.jpg)'
  id: totrans-232
  prefs: []
  type: TYPE_IMG
- en: Figure 2.25 – The generateRecordSet function creates a record for each product
    and each label. Each record contains nRows transactions
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we write a function to generate a set of data, convert the data to
    a DataFrame, and write it out as one JSON file to a temporary path. Then, we move
    that file to the final volume destination.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.26 – The writeJsonFile function generates a set of records](img/B16865_02_29.jpg)'
  id: totrans-235
  prefs: []
  type: TYPE_IMG
- en: Figure 2.26 – The writeJsonFile function generates a set of records
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
- en: The set contains amounts generated as integers, so we divide by 100 to turn
    the amounts into dollars and type float. The function writes out the JSON file
    to a `temp` directory and then moves the single file to the final directory.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
- en: With everything set up, create the dataset with the code provided. Feel free
    to increase the iterations to build a larger dataset. Then, move on to the next
    project!
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
- en: 'Project: Retrieval-Augmented Generation Chatbot'
  id: totrans-239
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The RAG Chatbot project will ingest PDF documents to build the knowledge base
    for the chatbot. We use a volume to store the PDFs. To follow along in your workspace,
    please open the following notebook:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
- en: '`CH2-01-Downloading_PDF_Documents`'
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Files can be uploaded to a volume directly in the Databricks console via the
    user interface, as shown in *Figure 2**.27*; however, this project uses the code
    provided in the notebook to download and save the data to a volume programmatically.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.27 – Manually uploading documents into a volume](img/B16865_02_30.jpg)'
  id: totrans-243
  prefs: []
  type: TYPE_IMG
- en: Figure 2.27 – Manually uploading documents into a volume
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
- en: The code for this chapter begins with setup cells and helper functions, and
    in *Figure* *2**.28* we designate `library_folder` where we will save the PDFs
    we download.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.28 – Designating the library folder to hold the files for this project](img/B16865_02_31.jpg)'
  id: totrans-246
  prefs: []
  type: TYPE_IMG
- en: Figure 2.28 – Designating the library folder to hold the files for this project
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
- en: We are using open articles published on the **Arxiv** page that relate to **Generative
    AI** (**GenAI**) and how it can impact human labor markets and economics. We pass
    the URLs to be used as documents for our chatbot and load these files into our
    volume.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.29 – Download PDF files and save them to our volume](img/B16865_02_32.jpg)'
  id: totrans-249
  prefs: []
  type: TYPE_IMG
- en: Figure 2.29 – Download PDF files and save them to our volume
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have the documents downloaded and, they are ready to be processed
    for our chatbot. With that completed, we can move on to our final project: **Multilabel**
    **Image Classification**.'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
- en: 'Project: Multilabel Image Classification'
  id: totrans-252
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The MIC project ingests images into Delta tables to fine-tune a pre-trained
    model from the *Restnet* family to improve its accuracy. We will programmatically
    download the images from Kaggle and save the data to a volume. To follow along
    in your workspace, please open the `CH2-01-Downloading_Images` notebook:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16865_02_33.jpg)![](img/B16865_02_34.jpg)'
  id: totrans-254
  prefs: []
  type: TYPE_IMG
- en: Figure 2.30 – Downloading data from Kaggle using Databricks magic commands
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
- en: Now we create the volume folder and unzip the images for our classification
    project into our volumes. It will take around one hour (as it contains 80K images!)
    to extract the images from ZIP to `Volumes`.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.31 – Unzipping images into the volumes for this project](img/B16865_02_35.jpg)'
  id: totrans-257
  prefs: []
  type: TYPE_IMG
- en: Figure 2.31 – Unzipping images into the volumes for this project
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
- en: We have downloaded or generated all four datasets, and they are ready to be
    brought into our Bronze layer in the next chapter.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-260
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter covered a wide range of setup decisions, options, and processes
    for planning your Data Intelligence Platform. We took you through an overview
    of the main components of the DI Platform, from early design choices to important
    features that we will dive into further in upcoming chapters. You also learned
    how to set up your workspace and project code base. We hope you feel more comfortable
    with the basics of the platform. With Databricks ready and the project data downloaded,
    we are now ready to get into what it means to build out the Bronze data layer.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
- en: In [*Chapter 3*](B16865_03.xhtml#_idTextAnchor123), we cover the essentials
    of building out the Bronze data layer within the Databricks Intelligence Platform.
    We will format our data into the most optimized format, learn about schema evolution,
    change data capture using Delta, and more.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  id: totrans-263
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The following questions are meant to solidify key points to remember and tie
    the content back to your own experience.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
- en: How do Databricks runtimes enable stability?
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can we make our data more discoverable?
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are some common steps needed to set up a Databricks workspace?
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Answers
  id: totrans-268
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After putting thought into the questions, compare your answers to ours.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
- en: Databricks runtimes enable stability by providing a consistent set of libraries.
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Utilizing the built-in functionality for metadata, such as table and column
    descriptions, makes our data more discoverable.
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Some common steps for setting up a workspace are activating Databricks through
    the marketplace and setting up user groups and governance.
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  id: totrans-273
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we identified specific libraries, technical features, and
    options. Please take a look at these resources to delve deeper into the areas
    that interest you most:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
- en: '*What is Unity* *Catalog?*: [https://docs.databricks.com/data-governance/unity-catalog/index.html](https://docs.databricks.com/data-governance/unity-catalog/index.html)'
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Lakehouse Monitoring* *demo*: [https://youtu.be/3TLBZSKeYTk?t=560](https://youtu.be/3TLBZSKeYTk?t=560)'
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*UC has a more centralized method of managing the model lifecycle than* *HMS*:
    [https://docs.databricks.com/machine-learning/manage-model-lifecycle/index.html](https://docs.databricks.com/machine-learning/manage-model-lifecycle/index.html)'
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Share Models across* *workspaces*: [https://docs.databricks.com/en/machine-learning/manage-model-lifecycle/multiple-workspaces.html](https://docs.databricks.com/en/machine-learning/manage-model-lifecycle/multiple-workspaces.html)'
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*In-depth UC setup on* *Azure*: [https://youtu.be/itGKRVHdNPo](https://youtu.be/itGKRVHdNPo)'
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Connecting external HMS to* *UC*: [https://www.databricks.com/blog/extending-databricks-unity-catalog-open-apache-hive-metastore-api](https://www.databricks.com/blog/extending-databricks-unity-catalog-open-apache-hive-metastore-api)'
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Unity Catalog* *limitations*: [https://docs.databricks.com/en/data-governance/unity-catalog/index.html#unity-catalog-limitations](https://docs.databricks.com/en/data-governance/unity-catalog/index.html#unity-catalog-limitations)'
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Best practices: Cluster configuration | Select Cloud in the* *dropdown*: [https://docs.databricks.com/clusters/cluster-config-best-practices.html](https://docs.databricks.com/clusters/cluster-config-best-practices.html)'
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Databricks* *Notebooks*: [https://docs.databricks.com/en/notebooks/index.html](https://docs.databricks.com/en/notebooks/index.html)'
  id: totrans-283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Databricks Autologging | Select Cloud in the* *dropdown*: [https://docs.databricks.com/mlflow/databricks-autologging.html#security-and-data-management](https://docs.databricks.com/mlflow/databricks-autologging.html#security-and-data-management)'
  id: totrans-284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Kaggle API* *GitHub*: [https://github.com/Kaggle/kaggle-api](https://github.com/Kaggle/kaggle-api)'
  id: totrans-285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Lakehouse Monitoring product* *page*: [https://www.databricks.com/product/machine-learning/lakehouse-monitoring](https://www.databricks.com/product/machine-learning/lakehouse-monitoring)'
  id: totrans-286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*System* *Tables*: [https://www.databricks.com/resources/demos/tutorials/governance/system-tables](https://www.databricks.com/resources/demos/tutorials/governance/system-tables)'
  id: totrans-287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Opendatasets Python* *package*: [https://pypi.org/project/opendatasets/](https://pypi.org/project/opendatasets/)'
  id: totrans-288
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Kaggle* *API*: [https://www.kaggle.com/docs/api](https://www.kaggle.com/docs/api)'
  id: totrans-289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*GitHub*: [https://github.com/](https://github.com/)'
  id: totrans-290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Databricks ML in Action GitHub* *Repository*: [https://github.com/PacktPublishing/Databricks-ML-In-Action](https://github.com/PacktPublishing/Databricks-ML-In-Action)'
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Databricks Secrets* *API*: [https://docs.databricks.com/en/security/secrets/secrets.html](https://docs.databricks.com/en/security/secrets/secrets.html)'
  id: totrans-292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Databricks* *CLI*: [https://docs.databricks.com/en/dev-tools/cli/index.html](https://docs.databricks.com/en/dev-tools/cli/index.html)'
  id: totrans-293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Databricks* *Utilities*: [https://docs.databricks.com/en/dev-tools/databricks-utils.html](https://docs.databricks.com/en/dev-tools/databricks-utils.html)'
  id: totrans-294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Workspace* *libraries*: [https://docs.databricks.com/en/libraries/workspace-libraries.html](https://docs.databricks.com/en/libraries/workspace-libraries.html)'
  id: totrans-295
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Data Mesh and the DI Platforms Blog Posts*: [https://www.databricks.com/blog/2022/10/10/databricks-lakehouse-and-data-mesh-part-1.html](https://www.databricks.com/blog/2022/10/10/databricks-lakehouse-and-data-mesh-part-1.html),
    [https://www.databricks.com/blog/2022/10/19/building-data-mesh-based-databricks-lakehouse-part-2.html](https://www.databricks.com/blog/2022/10/19/building-data-mesh-based-databricks-lakehouse-part-2.html)'
  id: totrans-296
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Short YouTube video on managed vs external tables in* *UC*: [https://youtu.be/yt9vax_PH58?si=dVJRZHAOnrEUBdkA](https://youtu.be/yt9vax_PH58?si=dVJRZHAOnrEUBdkA)'
  id: totrans-297
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Query* *Federation*: [https://docs.databricks.com/en/query-federation/index.html](https://docs.databricks.com/en/query-federation/index.html)'
  id: totrans-298
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Centralized model registry workspace for* *HMS*: [https://docs.databricks.com/applications/machine-learning/manage-model-lifecycle/multiple-workspaces.html](https://docs.databricks.com/applications/machine-learning/manage-model-lifecycle/multiple-workspaces.html)'
  id: totrans-299
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Manage model lifecycle in Unity* *Catalog*: [https://docs.databricks.com/machine-learning/manage-model-lifecycle/index.html](https://docs.databricks.com/machine-learning/manage-model-lifecycle/index.html)'
  id: totrans-300
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Terraform* *https*: [https://github.com/databricks/terraform-provider-databricks](https://github.com/databricks/terraform-provider-databricks)'
  id: totrans-301
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Widgets*: [https://docs.databricks.com/notebooks/widgets.html](https://docs.databricks.com/notebooks/widgets.html)'
  id: totrans-302
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Kaggle API* *GitHub*: [https://github.com/Kaggle/kaggle-api](https://github.com/Kaggle/kaggle-api).'
  id: totrans-303
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
