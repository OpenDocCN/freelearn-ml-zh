["```py\n    DataPoints = [100 100;90 90;10 10;10 20;90 70;50 50];\n    ```", "```py\n    DistanceCalc = pdist(DataPoints);\n    DistanceMatrix = squareform(DistanceCalc);\n    ```", "```py\n            0   14.1421  127.2792  120.4159   31.6228   70.7107\n       14.1421         0  113.1371  106.3015   20.0000   56.5685\n      127.2792  113.1371         0   10.0000  100.0000   56.5685\n      120.4159  106.3015   10.0000         0   94.3398   50.0000\n       31.6228   20.0000  100.0000   94.3398         0   44.7214\n       70.7107   56.5685   56.5685   50.0000   44.7214         0\n    ```", "```py\n    GroupsMatrix = linkage(DistanceCalc)\n    GroupsMatrix =\n    3.0000    4.0000   10.0000\n    1.0000    2.0000   14.1421\n    5.0000    8.0000   20.0000\n    6.0000    9.0000   44.7214\n    7.0000   10.0000   50.0000\n    ```", "```py\n    dendrogram(GroupsMatrix)\n    ```", "```py\n    DistancesCheck = cophenet(GroupsMatrix, DistanceCalc)\n    ```", "```py\n    DistancesCheck =\n        0.8096\n    NewDistanceCalc = pdist(DataPoints, 'cosine');\n    ```", "```py\n    NewGroupsMatrix = linkage(NewDistanceCalc,'weighted');\n    ```", "```py\n    NewDistancesCheck = cophenet(NewGroupsMatrix, NewDistanceCalc)\n    ```", "```py\n    NewDistancesCheck =\n        0.9302\n    ```", "```py\n    InputData = readmatrix('Minerals.xls');\n    ```", "```py\n    rng(5);\n    [IdCluster,Centroid] = kmeans(InputData,4);\n    ```", "```py\n    gscatter(InputData(:,1), InputData(:,2), IdCluster,'bgrm','x*o^')\n    hold on\n    plot(Centroid(:,1),Centroid(:,2),'x','LineWidth',4,'MarkerEdgeColor','k','MarkerSize',25)\n    ```", "```py\n    silhouette(InputData, IdCluster)\n    ```", "```py\n    DataKMedoids = readmatrix('PeripheralLocations.xls');\n    gscatter(DataKMedoids (:,1), DataKMedoids (:,2));\n    ```", "```py\n    [IdCluster,Kmedoid,SumDist,Dist,IdClKm,info] = kmedoids(DataKMedoids,3);\n    ```", "```py\n    >> info\n    info =\n      struct with fields:\n            algorithm: 'pam'\n                start: 'plus'\n             distance: 'sqeuclidean'\n           iterations: 3\n        bestReplicate: 1\n    ```", "```py\n    gscatter(DataKMedoids (:,1), DataKMedoids (:,2), IdCluster,'bgr','xo^')\n    hold on\n    plot(Kmedoid(:,1),Kmedoid(:,2),'x','LineWidth',4,'MarkerEdgeColor','k','MarkerSize',25)\n    ```", "```py\n    YHData = readtable('YachtHydrodynamics.xlsx');\n    ```", "```py\n    size(YHData)\n    ans =\n       308     7\n    ```", "```py\n    Model1 = stepwiselm(YHData,'constant');\n    1\\. Adding FroudeNumber, FStat = 584.1803, pValue = 6.233076e-73\n    ```", "```py\n    Model1\n    Model1 =\n    Linear regression model:\n        ResResistance ~ 1 + FroudeNumber\n    Estimated Coefficients:\n                Estimate      SE       tStat       pValue\n               ________    ______    _______    __________\n    (Intercept)    -24.484    1.5336   -15.965  3.6732e-42\n    FroudeNumber   121.67     5.0339    24.17   6.2331e-73\n    Number of observations: 308, Error degrees of freedom: 306\n    Root Mean Squared Error: 8.9\n    R-squared: 0.656,  Adjusted R-Squared: 0.655\n    F-statistic vs. constant model: 584, p-value = 6.23e-73\n    ```", "```py\n    Model2 = stepwiselm(YHData,'linear');\n    ```", "```py\n    1\\. Removing PrismaticCoef, FStat = 0.021132, pValue = 0.88452\n    2\\. Removing LongPos, FStat = 0.33493, pValue = 0.5632\n    3\\. Removing LengDispRatio, FStat = 0.63427, pValue = 0.42642\n    4\\. Removing LengthBeamRatio, FStat = 0.034179, pValue = 0.85345\n    5\\. Removing BeamDraughtRatio, FStat = 0.13695, pValue = 0.71159\n    ```", "```py\n    Model2\n    Model2 =\n    Linear regression model:\n        ResResistance ~ 1 + FroudeNumber\n    Estimated Coefficients:\n                Estimate      SE       tStat       pValue\n               ________    ______    _______    __________\n    (Intercept)  -24.484   1.5336    -15.965    3.6732e-42\n    FroudeNumber  121.67   5.0339      24.17    6.2331e-73\n    Number of observations: 308, Error degrees of freedom: 306\n    Root Mean Squared Error: 8.9\n    R-squared: 0.656,  Adjusted R-Squared: 0.655\n    F-statistic vs. constant model: 584, p-value = 6.23e-73\n    ```", "```py\n    Model3 = stepwiselm(YHData,'quadratic');\n    ```", "```py\n    Model3\n    Model3 =\n    Linear regression model:\n        ResResistance ~ 1 + PrismaticCoef*FroudeNumber + FroudeNumber^2\n    Estimated Coefficients:\n               Estimate      SE        tStat        pValue\n            ________    ______    _________    ___________\n    (Intercept) -0.34693    17.184 -0.020188       0.98391\n    PrismaticCoef 69.155    30.254    2.2858      0.022958\n    FroudeNumber -206.99    58.003   -3.5686    0.00041711\n    PrismaticCoef:FroudeNumber\n                 -305.22    99.309   -3.0735     0.0023082\n    FroudeNumber^2 871.03    25.817   33.739   1.2559e-104\n    Number of observations: 308, Error degrees of freedom: 303\n    Root Mean Squared Error: 4.08\n    R-squared: 0.928,  Adjusted R-Squared: 0.927\n    F-statistic vs. constant model: 982, p-value = 4.93e-172\n    ```", "```py\n    SeedsData = readtable('SeedsDataset');\n    ```", "```py\n    plotmatrix(SeedsData{:,1:7})\n    ```", "```py\n    CorrData=corr(SeedsData{:,1:7})\n    ```", "```py\n    [coeff,score,latent,tsquared,explained,mu] = pca(SeedsData{:,1:7});\n    ```", "```py\n    gscatter(score(:,1),score(:,2),SeedsData.Seeds,'brg','xo^')\n    ```", "```py\n    biplot(coeff(:,1:2),'scores',score(:,1:2),'varlabels',SeedsData.Properties.VariableNames(1:7));\n    ```"]