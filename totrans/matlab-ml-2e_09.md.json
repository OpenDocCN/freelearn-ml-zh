["```py\nNile = readtable('Nile.csv');\n```", "```py\nplot(Nile.time,Nile.Nile)\n```", "```py\n    TimeData = datetime({'01.01.1871';'01.01.1872';'01.01.1873';\n    '01.01.1874';'01.01.1875'});\n    TempData = [22.1;21.1;23.2;21.9;22.5];\n    RiverFlow = [1120;1160;963;1210;1160];\n    ```", "```py\n    NileRiverFlow = timetable(TimeData, TempData, RiverFlow);\n    ```", "```py\n    class(NileRiverFlow)\n    ans =\n        'timetable'\n    ```", "```py\n    NileRiverFlow\n    NileRiverFlow =\n      5×2 timetable\n         TimeData      TempData    RiverFlow\n        ___________    ________    _________\n        01-Jan-1871      22.1        1120\n        01-Jan-1872      21.1        1160\n        01-Jan-1873      23.2         963\n        01-Jan-1874      21.9        1210\n        01-Jan-1875      22.5        1160\n    ```", "```py\n    NileRiverFlow2 = timetable(RiverFlow,'TimeStep',years(1),\n    'StartTime',years(1870));\n    ```", "```py\n    NileRiverFlowData = readtimetable('Nile.csv');\n    ```", "```py\n    NileRiverFlowData(1:2,:)\n    ```", "```py\n    NileRiverFlowData(1:2,:)\n    ans =\n      2×1 timetable\n           time       Nile\n        __________    ____\n        01.01.1871    1120\n        01.01.1872    1160\n    ```", "```py\n    NileRiverFlowData.Nile(1:2)\n    ```", "```py\n    NileData = NileRiverFlowData{:,:};\n    ```", "```py\n    TimeRange = timerange('01.01.1880','01.01.1920');\n    ```", "```py\n    DataTimeRange = NileRiverFlowData(TimeRange,:);\n    ```", "```py\nWeeklyData = retime(NileRiverFlowData,'weekly','spline');\n```", "```py\nMonthlyData = retime(NileRiverFlowData,'monthly','mean');\n```", "```py\n    windowSize = 5;\n    ```", "```py\n    SMA = movmean(NileRiverFlowData.Nile,windowSize);\n    ```", "```py\ntype = 'exponential'\nwindowSize = 5;\nEMA = movavg(NileRiverFlowData.Nile,type,windowSize)\n```", "```py\n    alpha = 0.3;\n    ```", "```py\n    forecast = NileRiverFlowData.Nile(1);\n    ```", "```py\n    for I = 2:length(NileRiverFlowData.Nile)\n        forecast(i) = alpha * NileRiverFlowData.Nile (i) + (1–- alpha) * forecast(i–- 1);\n    end\n    ```", "```py\n    disp(forecast);\n    ```", "```py\n    TeslaData = readtimetable('TSLA.csv');\n    ```", "```py\n    summary(TeslaData)\n    ```", "```py\n    summary(TeslaData)\n    RowTimes:\n        Date: 157×1 datetime\n            Values:\n                Min         2010-11-01\n                Median      2017-05-01\n                Max         2023-10-06\n    Variables:\n        Open: 157×1 double\n            Values:\n                Min        1.4627\n                Median      16.87\n                Max         386.9\n        High: 157×1 double\n            Values:\n                Min        1.6993\n                Median       18.8\n                Max         414.5\n        Low: 157×1 double\n            Values:\n                Min        1.4033\n                Median     15.798\n                Max         326.2\n        Close: 157×1 double\n            Values:\n                Min        1.5927\n                Median     16.795\n                Max        381.59\n        AdjClose: 157×1 double\n            Values:\n                Min        1.5927\n                Median     16.795\n                Max        381.59\n        Volume: 157×1 double\n            Values:\n                Min       1.1783e+08\n                Median    1.8456e+09\n                Max       7.0888e+09\n    ```", "```py\n    plot(TeslaData.Date, TeslaData.Close)\n    xlabel('Time (years)')\n    ylabel('Stock price ($)')\n    ```", "```py\n    PctCh=100*diff(TeslaData.Close(:,1))./TeslaData.Close(1:end-1,1);\n    ```", "```py\n    bar(TeslaData.Date(1:end-1,1),PctCh)\n    xlabel('Time (years)')\n    ylabel('Percentage changes ($)')\n    ```", "```py\n    PriceReturn = sum(PctCh);\n    ```", "```py\n    fprintf('Price Return: %.2f%%\\n', PriceReturn);\n    Price Return: 698.80%\n    ```", "```py\n    XData=TeslaData.Close(1:end-1);\n    YData=TeslaData.Close(2:end);\n    ```", "```py\n    TrainLength = length(TeslaData.Close)-1;\n    numHiddenUnits = 200;\n    ```", "```py\n    layers = [ ...\n        sequenceInputLayer(TrainLength)\n        lstmLayer(numHiddenUnits,'OutputMode','sequence')\n        fullyConnectedLayer(50)\n        dropoutLayer(0.5)\n        fullyConnectedLayer(TrainLength)\n        regressionLayer];\n    ```", "```py\n    maxEpochs = 600;\n    miniBatchSize = 20;\n    options = trainingOptions('adam', ...\n        'MaxEpochs',maxEpochs, ...\n        'MiniBatchSize',miniBatchSize, ...\n        'InitialLearnRate',0.01, ...\n        'GradientThreshold',1, ...\n        'Shuffle','never', ...\n        'Plots','training-progress',...\n        'Verbose',0);\n    ```", "```py\n    net = trainNetwork(XData,YData,layers,options);\n    ```", "```py\n    YPred = predict(net,XData,'MiniBatchSize',1);\n    ```", "```py\n    RMSE = sqrt(mean((YData-YPred).^2));\n    ```", "```py\n    RMSE =\n       13.9792\n    ```", "```py\n    plot(TeslaData.Date(2:end), YData,TeslaData.Date(2:end), YPred,'--')\n    xlabel('Time (years)')\n    ylabel('Stock price ($)')\n    legend('ActualData', 'PredictedData')\n    ```"]