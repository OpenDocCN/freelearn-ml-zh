["```py\n$ pip install library-name\n```", "```py\n    ENDPOINT=\" yourEndPointHere>\"\n    PORT=\"3306\"\n    USR=\"admin\"\n    DBNAME=\"toxicity_db_tutorial\"\n    PASSWORD = \"<YourPasswordHere>\"\n    ```", "```py\n    from sqlalchemy import create_engine\n    import pandas as pd\n    db_connection_str =\n    'mysql+pymysql://{USR}:{PASSWORD}@{ENDPOINT}:{PORT}/{DBNAME}'.format(USR=USR, PASSWORD=PASSWORD, ENDPOINT=ENDPOINT, PORT=PORT, DBNAME=DBNAME)\n    db_connection = create_engine(db_connection_str)\n    df = pd.read_sql('SELECT * FROM dataset_toxicity_sd',\n    con=db_connection)\n    ```", "```py\n    df = pd.read_csv(\"../../datasets/dataset_toxicity_sd.csv\")\n    ```", "```py\n    df[[\"ID\", \"smiles\", \"toxic\"]].head() \n    ```", "```py\n    df[[\"toxic\", \"TPSA\", \"MolWt\", \"LogP\"]].describe()\n    ```", "```py\n    df.isna().sum()\n    ```", "```py\nimport pandas as pd\nimport seaborn as sns\nplt.figure(figsize=(10,5))\nsns.barplot(x=\"FormalCharge\", y=\"TPSA\", data=df);\n```", "```py\nsns.barplot(x=\"FormalCharge\", y=\"HDonors\", data=df)\n```", "```py\ndf_iso = df[[\"FormalCharge\", \"HDonors\", \"HAcceptors\"]]\nprint(df_iso.shape)\n    (1460, 3)\ndf_melted = pd.melt(df_iso, id_vars=[\"FormalCharge\"],\n                    value_vars=[\"HDonors\", \"HAcceptors\"])\nprint(df_melted.shape)\n    (2920, 3)\n```", "```py\nsns.barplot(data=df_melted, x='FormalCharge', y='value', \n            hue='variable')\n```", "```py\nplt.figure(figsize=(10,5))\nplt.title(\"Histogram of Molecular Weight (g/mol)\", fontsize=20)\nplt.xlabel(\"Molecular Weight (g/mol)\", fontsize=15)\nplt.ylabel(\"Frequency\", fontsize=15)\ndf[\"MolWt\"].hist(figsize=(10, 5), \n                          bins=40, \n                          xlabelsize=10, \n                          ylabelsize=10, \n                          color = \"royalblue\")\n```", "```py\ndftmp = df[[\"MolWt\", \"NHOH\", \"HAcceptors\", \"Heteroatoms\", \n                     \"LogP\", \"TPSA\"]]\ndftmp.hist(figsize=(30, 10), bins=40, xlabelsize=10,\n                    ylabelsize=10, color = \"royalblue\")\n```", "```py\ndftmp = df[[\"MolWt\",\"TPSA\"]]\nx1 = dftmp.MolWt.values\nx2 = dftmp.TPSA.values\nkwargs = dict(histtype='stepfilled', alpha=0.3, \n              density=True, bins=100, ec=\"k\")\nplt.figure(figsize=(10,5))\nplt.title(\"Histogram of Molecular Weight (g/mol)\", \n           fontsize=20)\nplt.xlabel(\"Molecular Weight (g/mol)\", fontsize=15)\nplt.ylabel(\"Frequency\", fontsize=15)\nplt.xlim([-100, 1000])\nplt.ylim([0, 0.01])\nplt.hist(x1, **kwargs)\nplt.hist(x2, **kwargs)\nplt.legend(dftmp.columns)\nplt.show()\n```", "```py\n    plt.figure(figsize=(10,5))\n    plt.title(\"Scatterplot of Heavy Atoms and TPSA\", fontsize=20)\n    plt.ylabel(\"Heavy Atoms\", fontsize=15)\n    plt.xlabel(\"TPSA\", fontsize=15)\n    sns.scatterplot(x=\"TPSA\", y=\"HeavyAtoms\", data=df)\n    ```", "```py\n    plt.figure(figsize=(10,5))\n    plt.title(\"Scatterplot of Heavy Atoms and TPSA\", fontsize=20)\n    plt.ylabel(\"Heavy Atoms\", fontsize=15)\n    plt.xlabel(\"Molecular Weight (g/mol)\", fontsize=15)\n    sns.scatterplot(x=\"TPSA\",y=\"HeavyAtoms\", \n    size=\"MolWt\", hue=\"MolWt\", data=df)\n    ```", "```py\n    import plotly.express as px\n    fig = px.scatter_3d(df, x='TPSA', y='LogP', z='HeavyAtoms',\n                         color='toxic', opacity=0.7)\n    fig.update_traces(marker=dict(size=4))\n    fig.show()\n    ```", "```py\n    sns.lmplot(x=\"HAcceptors\", y=\"TPSA\", hue=\"toxic\", \n             data=df, markers=[\"o\", \"x\"], height = 5, \n             aspect = 1.7, palette=\"muted\");\n    plt.xlim([0, 16])\n    plt.ylim([0, 400])\n    ```", "```py\n    featOfInterest = [\"TPSA\", \"MolWt\", \"HAcceptors\",\n           \"HDonors\", \"toxic\", \"LogP\"]\n    sns.pairplot(df[featOfInterest], hue = \"toxic\", markers=\"o\")\n    ```", "```py\n    df[[\"TPSA\", \"MolWt\", \"HeavyAtoms\", \"NHOH\", \"HAcceptors\", \n              \"HDonors\", \"AromaticRings\", \"LogP\", \"AromaticN\"]].corr()\n    ```", "```py\n    sns.heatmap(df[[\"TPSA\", \"MolWt\", \"HeavyAtoms\", \"NHOH\", \n                  \"HAcceptors\", \"HDonors\", \"AromaticRings\", \n                  \"LogP\", \"AromaticN\"]].corr(), \n                  annot = True,  cmap=\"YlGnBu\")\n    ```", "```py\n    import wget\n    url_covid = \"https://ftp.expasy.org/databases/uniprot/pre_release/covid-19.fasta\"\n    filename = wget.download(url_covid, out=\"../../datasets\")\n    ```", "```py\n    from Bio import SeqIO\n    from Bio.SeqUtils import GC\n    gc_values_covid = sorted(GC(rec.seq) for rec in \n        SeqIO.parse(\"../../datasets/covid-19.fasta\", \"fasta\"))\n    ```", "```py\n    import pylab\n    plt.figure(figsize=(10,5))\n    plt.title(\"COVID-19 FASTA Sequence GC%\", fontsize=20)\n    plt.ylabel(\"GC Content %\", fontsize=15)\n    plt.xlabel(\"Genes\", fontsize=15)\n    pylab.plot(gc_values_covid)\n    pylab.show()\n    ```", "```py\ndfts = pd.read_csv(\"../../datasets/dataset_pressure_ts.csv\")\nplt.title(\"Timeseries of an LCMS Chromatogram (Pressure & \n     Temperature)\", fontsize=20)\nplt.ylabel(\"Pressure (Bar)\", fontsize=15)\nplt.xlabel(\"Run Time (min)\", fontsize=15)\nax1 = sns.lineplot(x=\"Run Time\", y=\"Pressure\",\n                      data=dfts, color = \"royalblue\", \n                      label = \"Pressure (Bar)\");\nax2 = sns.lineplot(x=\"Run Time\", y=\"Temperature\",\n                      data=dfts, color = \"orange\", \n                      label = \"Pressure (Bar)\");\n```", "```py\nimport plotly.graph_objects as go\nfig = go.Figure(data=[go.Sankey(node = dict(pad = 50, \n      thickness = 10,\n                 line = dict(color = \"black\", width = 0.5),\n                 label = [\"Drug Candidates\", \"Phase 1\", \"Phase 2\",\n                 \"Phase 3\", \"Small Molecules\", \"Large Molecules\"],\n                 color = \"blue\"),\n                 link = dict(\n                 source = [0,  0, 0, 1,  2, 3, 1, 2, 3],\n                 target = [1,  2, 3, 4,  4, 4, 5, 5, 5],\n                 value = [15, 4, 2, 13, 3, 1, 2, 1, 1]\n  ))]) \n```", "```py\nfig.update_layout(title_text=\"Drug Candidates within a Company Pipeline\", font_size=10)\nfig.show()\n```", "```py\nimport pandas as pd\nimport rdkit\nfrom rdkit import Chem\n```", "```py\ndf = pd.read_csv(\"../../datasets/dataset_toxicity_sd.csv\")\nm = Chem.MolFromSmiles(df[\"smiles\"][5])\nm\n```", "```py\nm = Chem.MolFromSmiles(df[\"smiles\"][20])\nm\n```", "```py\nfrom rdkit.Chem import AllChem\nfrom rdkit.Chem.Draw import SimilarityMaps\nAllChem.ComputeGasteigerCharges(m)\ncontribs = [m.GetAtomWithIdx(i).GetDoubleProp('_GasteigerCharge') for i in range(m.GetNumAtoms())]\nfig = SimilarityMaps.GetSimilarityMapFromWeights(m, \n             contribs, contourLines=10, )\n```", "```py\n    import py3Dmol\n    largeMol = py3Dmol.view(query='pdb:6xmk', \n                               width=600,\n                               height=600)\n    ```", "```py\n     largeMol.setStyle({'stick':{'color':'spectrum'}})\n     largeMol\n    ```", "```py\n    largeMol.setStyle({'cartoon':{'color':'spectrum'}})\n    largeMol\n    ```", "```py\n    lm = py3Dmol.view(query='pdb:6xmk')\n    chA = {'chain':'A'}\n    chB = {'chain':'B'}\n    lm.setStyle(chA,{'cartoon': {'color':'spectrum'}}) \n    lm.addSurface(py3Dmol.VDW, {'opacity':0.7, 'color':'white'}, chA)\n    lm.setStyle(chB,{'cartoon': {'color':'spectrum'}})\n    lm.show()\n    ```"]