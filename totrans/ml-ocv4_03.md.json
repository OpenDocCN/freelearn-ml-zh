["```py\n $ cd Desktop/OpenCV-ML\n```", "```py\n $ source activate OpenCV-ML  # Mac OS X / Linux\n $ activate OpenCV-ML         # Windows\n```", "```py\n $ ipython           # for an IPython session\n      $ jupyter notebook  # for a Jupyter session\n```", "```py\n$ ipython\nPython 3.6.0 | packaged by conda-forge | (default, Feb 9 2017, 14:36:55) \nType 'copyright', 'credits' or 'license' for more information\nIPython 7.2.0 -- An enhanced Interactive Python. Type '?' for help.\n\nIn [1]: \n```", "```py\nIn [1]: import numpy\nIn [2]: numpy.__version__\nOut[2]: '1.15.4'\n```", "```py\nIn [3]: import numpy as np\nIn [4]: np.__version__\nOut[4]: '1.15.4'\n```", "```py\nIn [5]: a = 5\n```", "```py\nIn [6]: type(a)Out[6]: int\n```", "```py\nIn [13]: int_arr\nOut[13]: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nIn [14]: int_arr[0]\nOut[14]: 0\nIn [15]: int_arr[3]\nOut[15]: 3\n```", "```py\nIn [16]: int_arr[-1]\nOut[16]: 9\nIn [17]: int_arr[-2]\nOut[17]: 8\n```", "```py\nIn [18]: int_arr[2:5]  # from index 2 up to index 5 - 1\nOut[18]: array([2, 3, 4])\nIn [19]: int_arr[:5]    # from the beginning up to index 5 - 1\nOut[19]: array([0, 1, 2, 3, 4])\nIn [20]: int_arr[5:]    # from index 5 up to the end of the array\nOut[20]: array([5, 6, 7, 8, 9])\nIn [21]: int_arr[::2]   # every other element\nOut[21]: array([0, 2, 4, 6, 8])\nIn [22]: int_arr[::-1]  # the entire array in reverse order\nOut[22]: array([9, 8, 7, 6, 5, 4, 3, 2, 1, 0])\n```", "```py\nIn [23]: arr_2d = np.zeros((3, 5))...      arr_2dOut[23]: array([[0., 0., 0., 0., 0.],                [0., 0., 0., 0., 0.],                [0., 0., 0., 0., 0.]])\n```", "```py\nIn [1]: from sklearn import datasets\nIn [2]: iris = datasets.fetch_openml('iris', version=1)\nIn [3]: iris_data = iris['data']\nIn [4]: iris_target = iris['target']\n```", "```py\nIn [5]: iris_data.shape \nOut[5]: (150, 4)\nIn [6]: iris_target.shape \nOut[6]: (150,)\n```", "```py\nIn [7]: import numpy as np\nIn [8]: np.unique(iris_target) # Find all unique elements in array\nOut[8]: array(['Iris-setosa', 'Iris-versicolor', 'Iris-virginica'], dtype=object)\n```", "```py\nIn [1]: import matplotlib as mpl\nIn [2]: import matplotlib.pyplot as plt\n```", "```py\nIn [3]: import numpy as npIn [4]: x = np.linspace(0, 10, 100)\n```", "```py\nIn [5]: plt.plot(x, np.sin(x))\n```", "```py\nIn [1]: import numpy as np\n...     from sklearn import datasets\n...     import matplotlib.pyplot as plt\n...     %matplotlib inline\n```", "```py\nIn [2]: digits = datasets.load_digits()\n```", "```py\nIn [3]: print(digits.data.shape)\n... print(digits.images.shape)\nOut[3]: (1797, 64)\n (1797, 8, 8)\n```", "```py\nIn [4]: img = digits.images[0, :, :]\n```", "```py\nIn [5]: plt.imshow(img, cmap='gray') \n...     plt.savefig('figures/02.04-digit0.png') \nOut[5]: <matplotlib.image.AxesImage at 0x7efcd27f30f0>\n```", "```py\nIn [6]: plt.figure(figsize=(14,4))\n...\n...     for image_index in range(10):\n...         # images are 0-indexed, but subplots are 1-indexed\n...         subplot_index = image_index + 1\n...         plt.subplot(2, 5, subplot_index)\n...         plt.imshow(digits.images[image_index, :, :], cmap='gray')\n```"]