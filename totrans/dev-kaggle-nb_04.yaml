- en: '4'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '4'
- en: Take a Break and Have a Beer or Coffee in London
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在伦敦休息一下，喝一杯啤酒或咖啡
- en: We continue our journey around the world using data by exploring two datasets
    in this chapter with geographically distributed information. The first dataset
    is *Every Pub in England* (see *Reference 1*). This dataset contains the unique
    ID, name, address, postcode, and information regarding the geographical position
    of almost every pub in England. The second dataset is called *Starbucks Locations
    Worldwide* (see *Reference 3*) which contains store number, name, and ownership
    details, as well as street address, city, and geographical information (latitude
    and longitude) for all Starbucks stores in the world.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们继续使用数据探索世界的旅程，在本章中通过探索两个具有地理分布信息的数据库来继续我们的旅程。第一个数据集是 *《英格兰每家酒吧》*（见 *参考文献 1*）。这个数据集包含了几乎每个英格兰酒吧的唯一标识符、名称、地址、邮编以及关于地理位置的信息。第二个数据集称为
    *《全球星巴克位置》*（见 *参考文献 3*），它包含了店铺编号、名称、所有权细节，以及全球所有星巴克店铺的街道地址、城市和地理信息（纬度和经度）。
- en: 'Apart from combining these two datasets, we will also add additional geographical
    support data. We will learn how to work with missing data, how to perform imputation
    if needed, how to visualize geographical data, how to clip and merge polygon data,
    how to generate custom maps, and how to create multiple layers over them. These
    are just a few tricks that we will learn in this chapter, but in a nutshell, the
    following topics will be covered:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 除了合并这两个数据集，我们还将添加额外的地理支持数据。我们将学习如何处理缺失数据，如果需要的话，如何进行插补，如何可视化地理数据，如何裁剪和合并多边形数据，如何生成自定义地图，以及如何在它们之上创建多个图层。这些只是我们在本章中将学习的一些技巧，但简而言之，以下主题将被涵盖：
- en: Detailed data analysis for pubs in England and Starbucks across the world
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 英格兰酒吧和全球星巴克的数据分析
- en: Combined geospatial analysis of pubs and Starbucks in London
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 伦敦酒吧和星巴克的联合地理分析
- en: The pretext for this chapter’s exploration of geospatial analysis tools and
    techniques is to analyze how the pubs and Starbucks coffee shops geographically
    interwind, answering such questions as “If somebody had enjoyed a few pints of
    ale in a pub in downtown London and then fancied a coffee, how far would they
    have to go to the nearest Starbucks coffee shop?” Or, to give another example,
    “For the current Starbucks shop, which pubs are closer to this one than to any
    other Starbucks coffee shop?” Of course, these are not the only questions we will
    try to answer, but we wanted to give you a glimpse of what we will achieve by
    the end of this chapter.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本章探索地理分析工具和技术的前提是为了分析酒吧和星巴克咖啡店在地理上的交织情况，回答诸如“如果有人在伦敦市中心的一家酒吧里喝了几品脱的啤酒，然后想喝咖啡，他们需要走多远才能到达最近的星巴克咖啡店？”或者，再举一个例子，“对于当前的星巴克店铺，哪些酒吧比其他任何星巴克咖啡店更靠近这个店铺？”当然，这些并不是我们试图回答的唯一问题，但我们想让你一窥我们将在本章结束时实现的目标。
- en: Pubs in England
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 英格兰的酒吧
- en: The *Every Pub in England* dataset (*Reference 1*) contains data about 51,566
    pubs in England, including the pub name, the address, the postal code, the geographical
    position (both by easting and northing and by latitude and longitude), and the
    local authority. I created a notebook, *Every Pub in England – Data Exploration*
    (*Reference 2*) to investigate this data. The code snippets in the current section
    are mainly from this notebook. It might be easier for you to follow the notebook
    in parallel with the explanations in the book.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '*《英格兰每家酒吧》* 数据集（*参考文献 1*）包含了关于英格兰 51,566 家酒吧的数据，包括酒吧名称、地址、邮政编码、地理位置（通过经度和纬度以及东西向和南北向），以及地方当局。我创建了一个笔记本，*《英格兰每家酒吧
    – 数据探索》*（*参考文献 2*），用于调查这些数据。当前章节中的代码片段主要来自这个笔记本。在阅读本书的同时并行查看笔记本可能会更容易理解。'
- en: Data quality check
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据质量检查
- en: For the data quality check, we will use the `info()` and `describe()` functions
    to get a first glimpse. These two can be considered the first place to start.
    Then, we can also use our custom data quality statistics functions defined in
    the previous chapter. Because we will keep using them, we will group them in a
    utility script. I call this utility script `data_quality_stats`, and I defined
    in this module the functions `missing_data`, `most_frequent_values`, and `unique_values`.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 对于数据质量检查，我们将使用 `info()` 和 `describe()` 函数来获得初步了解。这两个函数可以被认为是开始的地方。然后，我们还可以使用我们在上一章中定义的自定义数据质量统计函数。因为我们将继续使用它们，所以我们将它们分组在一个实用脚本中。我称这个实用脚本为
    `data_quality_stats`，并在本模块中定义了 `missing_data`、`most_frequent_values` 和 `unique_values`
    函数。
- en: 'To use the functions defined in this utility script, we need to first add it
    to the notebook. From the **File** menu, we will select the **Add utility script**
    menu item, and then add the utility script by selecting it in the **Add Data**
    panel on the right-hand side of the editor window:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用此实用脚本中定义的函数，我们首先需要将其添加到笔记本中。从**文件**菜单，我们将选择**添加实用脚本**菜单项，然后通过在编辑窗口右侧的**添加数据**面板中选择它来添加实用脚本：
- en: '![](img/B20963_04_01.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![图片 B20963_04_01.png](img/B20963_04_01.png)'
- en: 'Figure 4.1: Adding a utility script to the notebook'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.1：将实用脚本添加到笔记本中
- en: 'Then, we will add `import` to one of the first notebook cells:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将`import`添加到笔记本的第一个单元格之一：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Let’s check the results after applying this function to our `pub_df` dataframe.
    *Figure.4.2* shows the missing values:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查应用此函数到我们的`pub_df`数据框后的结果。*图4.2*显示了缺失值：
- en: '![](img/B20963_04_02.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![图片 B20963_04_02.png](img/B20963_04_02.png)'
- en: 'Figure 4.2: Missing values'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.2：缺失值
- en: We can see that there are two missing values for local authorities. Other than
    that, it appears that there are no others. We need to be alert with regard to
    the missing values, as some might be hidden; for instance, a missing value could
    be replaced according to a convention with a specific value (like using “-1” to
    indicate null values for positive numbers or “NA” for categorical cases).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到有两个地方当局的缺失值。除此之外，似乎没有其他缺失值。我们需要对缺失值保持警惕，因为一些可能被隐藏；例如，一个缺失值可能根据惯例被替换为特定值（例如，使用“-1”表示正数的空值或“NA”表示分类情况）。
- en: '*Figure 4.3* depicts the most frequent values:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '*图4.3*展示了最频繁的值：'
- en: '![](img/B20963_04_03.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![图片 B20963_04_03.png](img/B20963_04_03.png)'
- en: 'Figure 4.3: Most frequent values'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.3：最频繁的值
- en: 'If we look now at the most frequent values, we can observe that for both **latitude**
    and **longitude**, there are 70 items with the value **\N**. It’s interesting
    that, there are **70** most frequent values for **easting** and **northing**.
    Easting and northing are geographic Cartesian coordinates: easting refers to the
    eastward-measured distance, while northing refers to the northward-measured distance.
    According to the **Universal Transverse Mercator** (**UTM**) coordinate system,
    northing is the distance to the Equator; Easting, in the same coordinate system,
    is the distance to the “false easting,” which is uniquely defined in each UTM
    zone. We can also observe that the most frequently used name for a pub is **The
    Red Lion**, and that there are **8** pubs in **Lancaster University**. As for
    the unique values, we can observe that there are more addresses than postcodes
    and more latitudes and longitudes than postcodes.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们现在查看最频繁的值，我们可以观察到，对于**纬度**和**经度**，都有70个项的值为**\N**。有趣的是，**东经**和**北纬**也有70个最频繁的值。东经和北纬是地理笛卡尔坐标：东经指的是向东测量的距离，而北纬指的是向北测量的距离。根据**通用横轴墨卡托**（**UTM**）坐标系统，北纬是到赤道的距离；在同一坐标系统中，东经是到“虚假东经”的距离，它在每个UTM区域内唯一定义。我们还可以观察到，最常见的酒吧名称是**The
    Red Lion**，并且在**兰卡斯特大学**有**8**家酒吧。至于唯一值，我们可以观察到地址的数量比邮编多，纬度和经度的数量也比邮编多。
- en: '*Figure 4.4* depicts the unique values:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '*图4.4*展示了唯一值：'
- en: '![](img/B20963_04_04.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![图片 B20963_04_04.png](img/B20963_04_04.png)'
- en: 'Figure 4.4: Unique values'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.4：唯一值
- en: The number of unique values for **address** is larger than the one for **postcode**
    (more addresses on the same postcode). The total number of different local authorities
    is **376**. Additionally, notice that the number of unique names is smaller than
    the number of unique addresses (presumably, there are several popular pub names).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**地址**的唯一值数量大于**邮编**的唯一值（同一邮编上有更多地址）。不同地方当局的总数是**376**。此外，请注意，唯一名称的数量少于唯一地址的数量（可能是因为有几个流行的酒吧名称）。'
- en: 'Let’s check a bit more about the two missing local authority values. It is
    odd, since there are only two missing values, which is not expected. We also know
    that we have 70 missing values for both **latitude** and **longitude**, and those
    are marked with **\N**. Look at the rows containing this missing local authority
    information:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更详细地检查两个缺失的地方当局值。这很奇怪，因为只有两个缺失值，这是不预期的。我们还知道，纬度和经度都有70个缺失值，这些值被标记为**\N**。看看包含此缺失地方当局信息的行：
- en: '![Graphical user interface, application  Description automatically generated
    with medium confidence](img/B20963_04_05.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，应用程序描述自动生成，中等置信度](img/B20963_04_05.png)'
- en: 'Figure 4.5: Rows with local authority information missing'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.5：缺少地方当局信息的行
- en: It appears that the information is missing because when the parser used by pandas
    to read the CSV file encountered the sequence **\”,”**, it was not able to distinguish
    the comma separator (**,**). Therefore, for those two lines, it merged **name**
    with **address** and then shifted left every column by one position, thus corrupting
    every column, from **address** to **local_authority**.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来信息缺失是因为当pandas使用的解析器读取CSV文件时遇到序列**\”,”**，它无法区分逗号分隔符（**,**）。因此，对于这两行，它将**名称**与**地址**合并，然后每列向左移动一个位置，从而破坏了从**地址**到**地方当局**的每一列。
- en: 'We have two options to address this issue:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有两个选项来解决这个问题：
- en: One option is to try and give a list of separators to the parser. In our case,
    it will be a bit tricky, since we have only a comma separator. Also, if we try
    to use a multi-character separator, we will need to switch to a different engine,
    Python, because the default engine does not work with multi-character separators.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个选项是尝试向解析器提供一个分隔符列表。在我们的情况下，这会有些棘手，因为我们只有一个逗号分隔符。此外，如果我们尝试使用多字符分隔符，我们需要切换到不同的引擎，Python，因为默认引擎不支持多字符分隔符。
- en: The second option, and the preferred one, is to write a small piece of code
    to fix the issue in the two rows where we spotted it.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二个选项，也是首选的选项，是编写一小段代码来修复我们发现的两个行中的问题。
- en: 'Here is the piece of code to fix the issue with the two rows. We use the indexes
    of the two rows (we can see them in *Figure 4.5* – the first column, without a
    name) to identify them and perform the correction only on these rows:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是修复两个行问题的代码片段。我们使用两个行的索引（我们可以在*图4.5*中看到它们 – 第一列，没有名称）来识别它们，并在这些行上执行校正：
- en: '[PRE1]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In *Figure 4.6*, we can see that the name and address are now split and assigned
    to the correct column, and the rest of the columns were shifted to the right:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在*图4.6*中，我们可以看到名称和地址现在已经被分割并分配到正确的列中，其余的列都向右移动了：
- en: '![Graphical user interface  Description automatically generated](img/B20963_04_06.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面 描述自动生成](img/B20963_04_06.png)'
- en: 'Figure 4.6: Rows with local authority information after correction'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.6：校正后带有地方当局信息的行
- en: If we check the missing data again, it will appear that no other data is missing.
    We already know that, in fact, there are 70 missing latitudes and longitudes;
    they are just marked with **\N**. If we check separately the latitude or longitude
    columns that have this value and then the rows where both columns have the same
    value, we can conclude that there are only 70 rows in total with this anomaly.
    For the same rows, we see that **northing** and **easting** have unique values,
    and these values are not correct.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们再次检查缺失的数据，它将显示没有其他数据缺失。我们已经知道，实际上有70个缺失的纬度和经度；它们只是被标记为**\N**。如果我们单独检查具有此值的纬度或经度列，然后检查两个列都有相同值的行，我们可以得出结论，只有70行总共有这种异常。对于相同的行，我们看到**北纬**和**东经**有唯一值，而这些值是不正确的。
- en: Consequently, we will not be able to reconstruct the latitude and longitude
    from **easting** and **northing**. When checking the corresponding postcode, address,
    and local authority for these rows, we can see that there are multiple locations,
    in multiple local authority regions. There are 65 different postcodes in these
    70 rows. Since we do have the postcodes, we will be able to use them to reconstruct
    the latitude and longitude.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们将无法从**东经**和**北纬**重建经纬度。当检查这些行的相应邮政编码、地址和地方当局时，我们可以看到有多个地点，分布在多个地方当局区域。这70行中有65个不同的邮政编码。由于我们确实有邮政编码，我们将能够使用它们来重建经纬度。
- en: 'For this purpose, we will include the **Open Postcode Geo** dataset (see *Reference
    4*) in our analysis. This dataset contains more than 2.5 million rows and many
    other columns, besides the postcode, latitude, and longitude. We read the CSV
    file from the **Open Postcode Geo** dataset, select only four columns (**postcode**,
    **country**, **latitude**, and **longitude**), and filter out any rows with postcodes
    that are not included in the list of postcodes, from the 70 rows we targeted in
    our original dataset with pubs. We set as `None` the values of `longitude` and
    `latitude` for the 70 rows with missing geographical data:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 为了这个目的，我们将**开放邮编地理**数据集（见*参考文献4*）纳入我们的分析。此数据集包含超过250万行，以及许多其他列，除了邮编、纬度和经度。我们从**开放邮编地理**数据集中读取CSV文件，仅选择四个列（**邮编**、**国家**、**纬度**和**经度**），并过滤掉任何邮编不在我们原始数据集中酒吧邮编列表中的行。对于70行缺失地理数据的行，我们将`经度`和`纬度`的值设置为`None`：
- en: '[PRE2]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We merge the two resulting datasets (the one with pubs and the one with postcodes),
    and we fill in the missing values for **latitude** and **longitude** in the *left*
    columns with the values from the *right* columns:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将两个结果数据集（酒吧和邮编）合并，并在*左*列中用*右*列的值填充**纬度**和**经度**的缺失值：
- en: '[PRE3]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Now, we’ve replaced all the missing data in the targeted rows with valid latitude
    and longitude values. *Figure 4.7* is a snapshot of what the combined dataset
    looks like.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经将目标行中的所有缺失数据替换为有效的经纬度值。*图4.7*是组合数据集的快照。
- en: '![A screenshot of a computer  Description automatically generated](img/B20963_04_07.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![计算机屏幕截图，自动生成描述](img/B20963_04_07.png)'
- en: 'Figure 4.7: Combined dataset snapshot (every pub in England and Open Postcode)'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.7：组合数据集快照（英格兰和开放邮编中的每个酒吧）
- en: Now with imputation done, we can continue with data exploration.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在数据插补完成后，我们可以继续进行数据探索。
- en: Data exploration
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据探索
- en: 'We will start by exploring the frequency of each pub name and local authority.
    To represent this information, we will reuse the `colormap` and `plot` functions
    developed in the previous chapter. I created a utility script that is imported
    in the same way as the data statistics utility script:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先探索每个酒吧名称和地方当局的频率。为了表示这些信息，我们将重用上一章中开发的`colormap`和`plot`函数。我创建了一个实用脚本，它以与数据统计实用脚本相同的方式导入：
- en: '[PRE4]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'After importing, we will extract the county and the city (if the address line
    contains more than two commas) and analyze the word frequency for those. The city
    is extracted with the simple code shown here:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 导入后，我们将提取县和市（如果地址行包含两个以上的逗号）并分析这些地方的单词频率。市是通过以下简单代码提取的：
- en: '[PRE5]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In *Figure 4.8*, we show the top 10 pubs per local authority:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在*图4.8*中，我们显示了每个地方当局的前10家酒吧：
- en: '![A bar graph with different colored bars  Description automatically generated](img/B20963_04_08.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![带有不同颜色条的柱状图，自动生成描述](img/B20963_04_08.png)'
- en: 'Figure 4.8: Pubs per local authority (top 10)'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.8：地方当局酒吧数量（前10名）
- en: '*Figure 4.9* shows the top 10 pubs per county. We extract the county by retrieving
    the last substring after the comma from the address. In some cases, it is not
    a county but a large municipality, like London:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '*图4.9*显示了每个县的前10家酒吧。我们通过从地址中检索逗号之后的最后一个子字符串来提取县。在某些情况下，它不是一个县，而是一个大城市，如伦敦：'
- en: '![A bar graph with different colored bars  Description automatically generated](img/B20963_04_09.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![带有不同颜色条的柱状图，自动生成描述](img/B20963_04_09.png)'
- en: 'Figure 4.9: Pubs per county (top 10)'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.9：各县酒吧数量（前10名）
- en: '*Figure 4.10* shows the distribution of words in pub names and addresses:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '*图4.10*显示了酒吧名称和地址中单词的分布：'
- en: '![](img/B20963_04_10.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B20963_04_10.png)'
- en: 'Figure 4.10: Distribution of words in the pub names (left) and addresses (right)'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.10：酒吧名称（左）和地址（右）的单词分布
- en: Because we have the geographical position of pubs, we would like to visualize
    this information. We can represent the positions of the pubs using the `folium`
    Python library and `folium plugin` `MarkerCluster`. Folium (which wraps some of
    the most popular Leaflet external plugins) is an excellent way to display geographically
    distributed information.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们有了酒吧的地理位置，我们希望可视化这些信息。我们可以使用`folium` Python库和`folium插件` `MarkerCluster`来表示酒吧的位置。Folium（它包装了一些最受欢迎的Leaflet外部插件）是显示地理分布信息的一个极好方式。
- en: 'The code to show the UK map is given here:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 显示英国地图的代码如下：
- en: '[PRE6]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'To add markers, we can add the following code (the code to initialize the folium
    map layer is not included):'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加标记，我们可以添加以下代码（不包括初始化folium地图层的代码）：
- en: '[PRE7]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: We can also add, besides locations, pop-up information for the `MarkerCluster`,
    as well as custom icons.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以为`MarkerCluster`添加除了位置之外的信息弹出，以及自定义图标。
- en: '*Figure 4.11* shows the folium (leaflet) map for the British Isles based on
    OpenStreetMap, without the pub information layer:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '*图4.11* 展示了基于OpenStreetMap的英国群岛folium（leaflet）地图，没有酒吧信息层：'
- en: '![Map  Description automatically generated](img/B20963_04_11.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![地图描述自动生成](img/B20963_04_11.png)'
- en: 'Figure 4.11: Map of the British Isles without the pub information layer'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.11：没有酒吧信息层的英国群岛地图
- en: '*Figure 4.12* shows a map of the British Isles with the pub information layer
    added, using the MarkerCluster plugin. With MarkerCluster, the markers are replaced
    dynamically, with a widget showing the number of markers in a certain area. When
    zooming in on an area, the MarkerCluster display changes dynamically, showing
    a more detailed view of the markers’ distribution:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '*图4.12* 展示了添加了酒吧信息层的英国群岛地图，使用了MarkerCluster插件。使用MarkerCluster后，标记会动态替换，并显示一个组件来显示某个区域内的标记数量。当放大某个区域时，MarkerCluster的显示会动态变化，显示标记分布的更详细视图：'
- en: '![ Map  Description automatically generated](img/B20963_04_12.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![地图描述自动生成](img/B20963_04_12.png)'
- en: 'Figure 4.12: Map of the British Isles with the pub information layer added'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.12：添加了酒吧信息层的英国群岛地图
- en: '*Figure 4.13* shows a zoomed-in version of the previous map. The region that
    we zoom in on is the southern part of the British mainland:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '*图4.13* 展示了之前地图的放大版本。我们放大查看的区域是英国大陆的南部：'
- en: '![Map  Description automatically generated](img/B20963_04_13.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![地图描述自动生成](img/B20963_04_13.png)'
- en: 'Figure 4.13: Map of the British Isles with the pub information layer added,
    zoomed in on the southern region, including the London area'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.13：添加了酒吧信息层的英国群岛地图，放大查看南部地区，包括伦敦地区
- en: '*Figure 4.14* zooms in on the London area. The clusters are broken into smaller
    groups, which appear as individual markers as we zoom in:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '*图4.14* 放大查看伦敦地区。随着我们放大，簇被分成更小的组，这些组作为单独的标记出现：'
- en: '![Chart, map  Description automatically generated](img/B20963_04_14.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![图表，地图描述自动生成](img/B20963_04_14.png)'
- en: 'Figure 4.14: Zooming in on the London area'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.14：伦敦地区的放大视图
- en: 'An alternative way to visualize the pub concentration is by using a heatmap.
    Heatmaps can create a very good intuition of the spatial distribution of data.
    They show distribution density with color shades, as shown in *Figure 4.15*. Heatmaps
    are useful to show the density of data points continuously, and it is also easier
    to evaluate their intensity at different locations using heatmaps. Because heatmaps
    use interpolation techniques to create a smooth transition between data points,
    they can provide a more visually appealing representation of the data distribution.
    You can see two zoom levels with a heatmap view of the pub distribution for all
    of Great Britain (left) and for the southwest tip of the mainland (right):'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种可视化酒吧浓度的方法是使用热力图。热力图可以很好地直观地展示数据的空间分布。它们通过颜色阴影显示分布密度，如*图4.15*所示。热力图有助于连续显示数据点的密度，并且使用热力图更容易评估不同位置的强度。因为热力图使用插值技术来在数据点之间创建平滑过渡，所以它们可以提供数据分布的更直观表示。您可以看到两个缩放级别，分别是整个大不列颠的酒吧分布热力图视图（左侧）和大陆西南角的视图（右侧）：
- en: '![](img/B20963_04_15.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B20963_04_15.png)'
- en: 'Figure 4.15: Maps using folium and Heatmap to show location density distribution'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.15：使用folium和Heatmap显示位置密度分布的地图
- en: Notice that there are no pubs from Northern Ireland included. This is because
    the collection of the pub data excluded it as it isn’t part of Great Britain.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，没有包括北爱尔兰的酒吧。这是因为酒吧数据的收集将其排除在外，因为它不是大不列颠的一部分。
- en: 'Another way to represent the spatial distribution of the pub data is using
    the Voronoi polygons (or a Voronoi diagram) associated with the pubs’ positions.
    **Voronoi polygons** represent the dual graph of a **Delaunay tessellation**.
    Let’s explain these two concepts that we just introduced: Voronoi polygons and
    Delaunay tessellation.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种表示酒吧数据空间分布的方法是使用与酒吧位置相关的Voronoi多边形（或Voronoi图）。**Voronoi多边形**代表**Delaunay剖分**的伴随图。让我们解释一下我们刚才介绍的两个概念：Voronoi多边形和Delaunay剖分。
- en: 'If we have a distribution of points in a plane, we can use the Delaunay tessellation
    to generate the triangular tessellation for this set of points. This graph is
    a set of triangles whose edges connect all the points, without crossing over.
    If we draw the mediators of the edges in the Delaunay graph, the network generated
    from the intersection of those new lines’ segments forms the Voronoi polygons
    mesh. In *Figure 4.16*, we show a set of points and then the Voronoi diagram associated
    with these points:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在平面上有一个点的分布，我们可以使用Delaunay剖分来生成这些点的三角剖分。这个图是一组三角形，其边连接所有点，且不交叉。如果我们画出Delaunay图中边的中位线，这些新线段交点形成的网络就是Voronoi多边形网格。在*图4.16*中，我们展示了一组点及其相关的Voronoi图：
- en: '![](img/B20963_04_16.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B20963_04_16.png)'
- en: 'Figure 4.16: A set of points in a plane and the Voronoi polygons generated
    from this set of points'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.16：平面上一组点及其由此组点生成的Voronoi多边形
- en: This Voronoi polygon graph has an interesting property. Inside a Voronoi polygon,
    all points are closer to the weight center of the polygon (which is one of the
    vertices of the original graph) than to any of the weight centers of any other
    neighboring polygon. Therefore, the Voronoi polygons drawn from our pubs’ geographical
    position will accurately represent the pubs’ concentration and will also show,
    with a good approximation, the area “covered” by a certain pub. We will use the
    Voronoi diagram, formed from the Voronoi polygons, to show the virtual area covered
    by each pub.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这个Voronoi多边形图有一个有趣的性质。在一个Voronoi多边形内部，所有点都更接近多边形的权重中心（这是原始图的一个顶点）而不是任何相邻多边形的权重中心。因此，从我们的酒吧地理位置绘制的Voronoi多边形将准确地表示酒吧的集中度，并且也会以良好的近似显示某个酒吧“覆盖”的面积。我们将使用由Voronoi多边形形成的Voronoi图来显示每个酒吧覆盖的虚拟区域。
- en: 'First, we extract the Voronoi polygons using the *Voronoi* function `from`
    `scipy.spatial`:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们使用`scipy.spatial`模块中的*Voronoi*函数提取Voronoi多边形：
- en: '[PRE8]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: We can represent the Voronoi polygons associated with the pubs (from `pub_voronoi`)
    using the `voronoi_plot_2d` function (see *Figure 4.17*). However, the graph has
    a few problems. First, there are many polygons that are very difficult to distinguish.
    Then, the pubs’ locations (with dots in the graph) are not very legible. Another
    issue is that the polygons on the border are not aligned with the territory, creating
    unwanted artifacts that are not informative of the real area “covered” by a certain
    pub inside the Great Britain territory. We will apply a series of transformations
    to eliminate the aforementioned problems with the graph.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`voronoi_plot_2d`函数（见*图4.17*）来表示与酒吧（来自`pub_voronoi`）相关的Voronoi多边形。然而，这个图有几个问题。首先，有许多多边形很难区分。然后，酒吧的位置（图中用点表示）不太清晰。另一个问题是边界上的多边形没有与领土对齐，产生了不必要且不反映真实面积“覆盖”的伪影。我们将应用一系列变换来消除图中提到的这些问题。
- en: 'The following code creates an image of Voronoi polygons, as shown in *Figure
    4.17*:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码创建了一个与*图4.17*中所示的Voronoi多边形图像：
- en: '[PRE9]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '![](img/B20963_04_17.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B20963_04_17.png)'
- en: 'Figure 4.17: 2D plot of Voronoi polygons, extended outside the territory (not
    clipped)'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.17：Voronoi多边形的2D图，扩展到领土外（未裁剪）
- en: If we want to represent the geographical area “covered” by each polygon only
    inside the territorial boundaries of Great Britain, we will have to clip the Voronoi
    polygons generated from the pubs’ position with the polygons describing the territory
    boundary.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们只想在英国内部领土边界内表示每个多边形“覆盖”的地理区域，我们必须将来自酒吧位置的Voronoi多边形与描述领土边界的多边形裁剪。
- en: 'Fortunately, we have access to Kaggle for shapefile data file formats for various
    countries. For our purpose, we will import the UK ESRI shapefile data from the
    *GADM Data for UK* dataset (see *Reference 5*). This dataset provides incrementally
    detailed shapefile data, ranging from external boundaries (level 0) to country
    level (level 1) and county level (level 2) for the entire territory. Shapefiles
    can be read with several libraries; in this case, I preferred to use the `geopandas`
    library. This library has multiple useful features for our analysis. One of the
    advantages of selecting this library is that, while it adds functionality for
    manipulating and visualizing geospatial data, it keeps the user-friendliness and
    versatility of the `pandas` library. We load the files with incremental resolution
    for the territory information:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，我们有访问Kaggle的权限，可以获取各种国家的形状文件数据文件格式。对于我们的目的，我们将从*GADM Data for UK*数据集（见*参考文献5*）导入英国ESRI形状文件数据。此数据集提供增量详细的形状文件数据，从外部边界（级别0）到国家级别（级别1）和县级别（级别2）的整个领土。可以使用几个库读取形状文件；在这种情况下，我更喜欢使用`geopandas`库。这个库具有多个对我们分析有用的功能。选择这个库的一个优点是，虽然它增加了操作和可视化地理空间数据的功能，但它保持了`pandas`库的用户友好性和多功能性。我们以增量分辨率加载领土信息文件：
- en: '[PRE10]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The data is loaded using the `geopandas` `read_file` function. This returns
    a `GeoDataFrame` object, a special type of DataFrame. It’s an extension of the
    DataFrame objects used with `pandas` and includes geospatial data. If a DataFrame
    typically includes columns of type integer, float, text, and date, a GeoDataFrame
    will also include columns with data specific for spatial analysis, for example,
    polygons associated with the representation of geospatial regions.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`geopandas`的`read_file`函数加载数据。这返回一个`GeoDataFrame`对象，这是一种特殊的DataFrame类型。它是与`pandas`一起使用的DataFrame对象的扩展，包括地理空间数据。如果DataFrame通常包括整数、浮点、文本和日期类型的列，那么GeoDataFrame也将包括具有特定于空间分析数据的列，例如与地理空间区域表示相关的多边形。
- en: 'It is useful to inspect the geospatial data before using it to clip the Voronoi
    polygons. Let’s visualize the three different resolution data. We can do this
    using the plot function associated with each **GeoDataFrame**:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用它来裁剪Voronoi多边形之前检查地理空间数据是有用的。让我们可视化三种不同分辨率的地理空间数据。我们可以使用与每个**GeoDataFrame**关联的绘图函数来完成此操作：
- en: '[PRE11]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '![](img/B20963_04_18.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B20963_04_18.png)'
- en: 'Figure 4.18: Shapefile data for the UK for the entire territory, country level,
    and county level (left to right)'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.18：整个领土、国家级别和县级别的英国形状文件数据（从左到右）
- en: 'We already observed that the pubs are only in England, Scotland, and Wales,
    not in Northern Ireland. If we clip the Voronoi polygons for the pubs using the
    UK-level data, we could encounter a situation where Voronoi polygons containing
    pubs from the western coast of England and Wales might spill over into the territory
    of Northern Ireland. This could result in an unwanted artifact. To avoid this,
    we can process the data as follows:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经观察到酒吧仅存在于英格兰、苏格兰和威尔士，而不在北爱尔兰。如果我们使用英国级别的数据裁剪酒吧的Voronoi多边形，我们可能会遇到这样的情况：包含英格兰和威尔士西部海岸酒吧的Voronoi多边形可能会溢出到北爱尔兰的领土。这可能会导致不希望出现的伪影。为了避免这种情况，我们可以按以下方式处理数据：
- en: Extract from the country-level shapefile only the data for England, Scotland,
    and Wales.
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仅从国家级别的形状文件中提取英格兰、苏格兰和威尔士的数据。
- en: Merge the polygon data from the three countries using the `dissolve` method
    from `geopandas`.
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`geopandas`的`dissolve`方法合并三个国家的多边形数据。
- en: '[PRE12]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The resulting content is shown here:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 结果内容如下所示：
- en: '![](img/B20963_04_19.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B20963_04_19.png)'
- en: 'Figure 4.19: Shapefile data with England, Scotland, and Wales after filtering
    Northern Ireland and using dissolve to merge the polygons'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.19：过滤北爱尔兰并使用dissolve合并多边形后的英格兰、苏格兰和威尔士的形状文件数据
- en: 'Now, we have the right clipping polygon for the Voronoi polygons from the three
    countries. Before clipping the polygons, we need to extract them from the Voronoi
    object. The following code does just that:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们有了来自三个国家的正确裁剪多边形。在裁剪多边形之前，我们需要从Voronoi对象中提取它们。以下代码正是这样做的：
- en: '[PRE13]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'With that, we have everything we need to perform the clipping operation. We
    start by converting the list of Voronoi polygons into a `GeoDataFrame` object,
    similar to the `uk_countries_dissolved` object that we will use to clip them.
    We are clipping the polygons so that, when we represent them, the polygons will
    not extend over the boundary. For the clipping operation to be performed correctly,
    and without errors, we will have to use the same projection as for the clipping
    object. We use the `clip` function from the `geopandas` library. This operation
    is highly time- and CPU-intensive. On Kaggle infrastructure, running the entire
    operation (with the CPU) for the 45,000 polygons in our list takes 35 minutes:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，我们就拥有了执行裁剪操作所需的一切。我们首先将 Voronoi 多边形列表转换为 `GeoDataFrame` 对象，类似于我们将用于裁剪的 `uk_countries_dissolved`
    对象。我们裁剪多边形，以便在表示时，多边形不会超出边界。为了正确执行裁剪操作且不出现错误，我们必须使用与裁剪对象相同的投影。我们使用 `geopandas`
    库中的 `clip` 函数。这个操作非常耗时和占用 CPU 资源。在 Kaggle 基础设施上，运行我们列表中的 45,000 个多边形的整个操作（使用 CPU）需要
    35 分钟：
- en: '[PRE14]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The following code plots the entire collection of clipped polygons:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码绘制了整个裁剪多边形的集合：
- en: '[PRE15]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: In *Figure 4.20*, we can see the resulting plot. There are areas with a larger
    concentration of pubs (smaller polygons) and areas where there is a large distance
    between two pubs (in certain areas of Scotland, for example).
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *图 4.20* 中，我们可以看到结果图。有些区域酒吧集中度较高（多边形较小），而在某些区域（例如苏格兰的一些地区），两个酒吧之间的距离较大。
- en: '![](img/B20963_04_20.png)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B20963_04_20.png)'
- en: 'Figure 4.20: Voronoi polygons from the pub geospatial distribution, clipped
    using the dissolved country-level data from the three countries selected (England,
    Wales, and Scotland)'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.20：来自酒吧地理分布的 Voronoi 多边形，使用所选三个国家（英格兰、威尔士和苏格兰）的溶解国家级数据裁剪
- en: Another modality to show the spatial distribution of pubs is to aggregate the
    data at the local authority level and to build Voronoi polygons around the geospatial
    center of the pub distribution for that local authority. Each new Voronoi polygon
    center is the mean latitude/longitude coordinates for each pub in the current
    local authority. The resulting polygon mesh does not reconstruct the spatial distribution
    of the local authorities, but it represents with good accuracy the relative pub
    distribution. The resulting Voronoi polygon set is clipped using the same clipping
    polygons as before. To be more precise, before we used clipping polygons, the
    contours were obtained by dissolving the country-level shapefile data. We can
    use a graded colormap to represent the density of the pubs per area. Let’s see
    the code to create and visualize this mesh.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种展示酒吧空间分布的方法是在地方当局级别汇总数据，并在该地方当局酒吧分布的地理中心周围构建 Voronoi 多边形。每个新的 Voronoi 多边形中心是当前地方当局中每个酒吧的经纬度平均值。得到的多边形网格不重建地方当局的空间分布，但它以很好的精度表示了相对酒吧分布。得到的结果
    Voronoi 多边形集使用之前相同的裁剪多边形进行裁剪。更准确地说，在我们使用裁剪多边形之前，通过溶解国家级形状文件数据获得了轮廓。我们可以使用分级颜色图来表示每平方单位的酒吧密度。让我们看看创建和可视化这个网格的代码。
- en: 'First, we create a dataset that contains, for each local authority, the number
    of pubs and the average latitude and longitude of the pub locations:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们创建一个数据集，其中包含每个地方当局的酒吧数量以及酒吧位置的经纬度平均值：
- en: '[PRE16]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Then, we calculate the Voronoi polygons associated with this distribution:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们计算与这个分布相关的 Voronoi 多边形：
- en: '[PRE17]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'We clip the resulting polygons with the same polygon used before for clipping
    (a result of selecting England, Wales, and Scotland and dissolving the shapefiles
    into one single shapefile):'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用之前用于裁剪的相同多边形裁剪得到的多边形（选择英格兰、威尔士和苏格兰并溶解形状文件到一个单独的形状文件）：
- en: '[PRE18]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The following code plots the Voronoi polygons from the aggregated pub geospatial
    distribution at a local authority level (the center of a Voronoi polygon is the
    average latitude/longitude for all pubs in the local authority area), clipped
    using the dissolved country-level (three countries are selected: England, Scotland,
    and Wales) data. We use a green color gradient for the pub density per area (see
    *Figure 4.21*):'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码绘制了在地方当局级别（Voronoi 多边形的中心是地方当局区域内所有酒吧的平均经纬度）聚合的酒吧地理分布的 Voronoi 多边形，使用溶解的国家级数据（选择了三个国家：英格兰、苏格兰和威尔士）裁剪。我们使用绿色颜色渐变来表示每平方单位的酒吧密度（见
    *图 4.21*）：
- en: '[PRE19]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: We used Voronoi polygons to visualize the pubs’ geographical distribution. In
    *Figure 4.20*, we show each polygon with a different color. Because the points
    inside a Voronoi polygon are closer to the polygon center than to any other neighboring
    polygon center, each polygon is approximately the area covered by the pub positioned
    in the center of the polygon. In *Figure 4.21*, we use Voronoi polygons to build
    around the geometrical center of the pubs’ distribution inside each local authority.
    We then use a color gradient to represent the relative pub density for each local
    authority. By using these original visualization techniques, we were able to represent
    more intuitively the spatial distribution of the pubs.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用沃罗诺伊多边形来可视化酒吧的地理分布。在*图4.20*中，我们用不同的颜色显示每个多边形。因为沃罗诺伊多边形内部点比任何其他相邻多边形中心更靠近多边形中心，所以每个多边形大约覆盖了位于多边形中心的酒吧所覆盖的区域。在*图4.21*中，我们使用沃罗诺伊多边形围绕每个地方当局内酒吧分布的几何中心构建。然后我们使用颜色渐变来表示每个地方当局的酒吧相对密度。通过使用这些原始的视觉化技术，我们能够更直观地表示酒吧的空间分布。
- en: '![](img/B20963_04_21.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B20963_04_21.png)'
- en: 'Figure 4.21: Voronoi polygons with a color intensity proportional to the pub
    density per local authority area'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.21：与地方当局区域酒吧密度成比例的颜色强度的沃罗诺伊多边形
- en: We will continue to investigate this data in the upcoming section, when we mix
    data from the pub dataset with the data from the Starbucks dataset. We intend
    to combine the information from the two datasets, using the Voronoi polygon areas
    to evaluate the relative distances between pubs and Starbucks in the London area.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将继续研究这些数据，当我们把酒吧数据集的数据与星巴克数据集的数据混合时。我们打算结合两个数据集的信息，使用沃罗诺伊多边形区域来评估伦敦地区酒吧和星巴克之间的相对距离。
- en: By manipulating Voronoi polygons generated for pubs and Starbucks coffee shops,
    we will analyze the relative spatial distribution of pubs and Starbucks, generating
    maps where we can see, for example, a group of pubs that are closest to a Starbucks.
    The geometric properties of Voronoi polygons will prove to be extremely useful
    to do this.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 通过操作为酒吧和星巴克咖啡店生成的沃罗诺伊多边形，我们将分析酒吧和星巴克之间的相对空间分布，生成地图，例如，我们可以看到一组离星巴克最近的酒吧。沃罗诺伊多边形的几何属性将证明在这样做时极为有用。
- en: With that in mind, let’s proceed and explore the Starbucks dataset.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到这一点，让我们继续前进，探索星巴克数据集。
- en: Starbucks around the world
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 全球星巴克
- en: We start the analysis for the *Starbucks Locations Worldwide* dataset with a
    detailed **Exploratory Data Analysis** (**EDA**) in the notebook *Starbucks Location
    Worldwide - Data Exploration*. (see *Reference 6*). You might want to follow the
    notebook in parallel with the text in the current section. The tools used in this
    dataset are imported from the `data_quality_stats` and `plot_style_utils` utility
    scripts. Before starting our analysis, it is important to explain that the dataset
    used for this analysis is from Kaggle and was collected 6 years ago.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从笔记本*星巴克全球位置 - 数据探索*（见*参考文献6*）开始对*星巴克全球位置*数据集进行详细的**探索性数据分析**（**EDA**）。（请参阅当前节中的文本）。你可能希望与当前节中的文本并行跟进笔记本。在此数据集中使用的工具是从`data_quality_stats`和`plot_style_utils`实用脚本中导入的。在开始我们的分析之前，重要的是要解释一下，用于此分析的数据集来自Kaggle，并且是在6年前收集的。
- en: Preliminary data analysis
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 初步数据分析
- en: 'The dataset has 25,600 rows. Some fields have just a few missing values. **Latitude**
    and **Longitude** have 1 value missing each, while there are 2 missing values
    for **Street Address** and 15 missing values for **City**. The fields that have
    the most missing data are **Postcode** (5.9%) and **Phone Number** (26.8%). In
    *Figure 4.22*, we can see a sample of the data:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 数据集有25,600行。一些字段只有少数缺失值。**纬度**和**经度**各缺失1个值，而**街道地址**缺失2个值，**城市**缺失15个值。缺失数据最多的字段是**邮编**（5.9%）和**电话号码**（26.8%）。在*图4.22*中，我们可以看到数据的样本：
- en: '![Graphical user interface  Description automatically generated with medium
    confidence](img/B20963_04_22.png)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面 描述自动生成，置信度中等](img/B20963_04_22.png)'
- en: 'Figure 4.22: First rows of the Starbucks Locations Worldwide dataset'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.22：星巴克全球位置数据集的前几行
- en: 'Looking at the most frequent values report, we can learn a few interesting
    things:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 通过查看最频繁的值报告，我们可以了解一些有趣的事情：
- en: '![A screenshot of a computer  Description automatically generated](img/B20963_04_23.png)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![计算机屏幕截图 描述自动生成](img/B20963_04_23.png)'
- en: 'Figure 4.23: The most frequent values for the Starbucks Locations Worldwide
    dataset'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.23：全球星巴克位置数据集中最频繁的值
- en: As expected, the state with the greatest number of Starbucks coffee shops is
    CA (USA). As per the city, the largest number of shops are in Shanghai. There
    is a unique address with up to 11 shops. Additionally, most of the shops per timezone
    are in the New York timezone .
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 如预期的那样，拥有最多星巴克咖啡店的州是CA（美国）。就城市而言，最多的店铺位于上海。有一个独特的地址，最多有11家店铺。此外，大多数店铺按时区划分都位于纽约时区。
- en: Univariate and bivariate data analysis
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 单变量和双变量数据分析
- en: 'For this dataset, I chose a color map blending the colors of Starbucks with
    green and shades of brown, like those of the high-quality roasted coffee they
    offer to their clients:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个数据集，我选择了一种颜色图，将星巴克的颜色与绿色和棕色调混合，就像他们提供给客户的优质烘焙咖啡的颜色：
- en: '![Shape  Description automatically generated](img/B20963_04_24.png)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![形状描述自动生成](img/B20963_04_24.png)'
- en: 'Figure 4.24: Notebook color map, blending Starbucks colors with the shades
    of roasted coffee'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.24：笔记本颜色图，将星巴克颜色与烘焙咖啡的色调混合
- en: 'We will use the preceding custom colormap for the univariate analysis graphs.
    In the following figure, we show the distribution of coffee shops by country code.
    Most Starbucks are in the United States, with over 13,000 entries, followed by
    China, Canada and Japan:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用前面的自定义颜色图进行单变量分析图。在下面的图中，我们展示了按国家代码划分的咖啡店分布。大多数星巴克位于美国，有超过13,000条记录，其次是中国、加拿大和日本：
- en: '![](img/B20963_04_25.png)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B20963_04_25.png)'
- en: 'Figure 4.25: Coffee shops by country code. The US has the most, followed by
    China, Canada, and Japan'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.25：按国家代码划分的咖啡店。美国最多，其次是中国、加拿大和日本
- en: If we look at the distribution by state/province in *Figure 4.26*, we can see
    that in first place is California, with more than 25,000\. In second place is
    Texas, with over 1,000 coffee shops, and in third place is England, with fewer
    than 1,000\. Distribution by timezone shows that the most represented is the US
    East Coast timezone (the New York timezone).
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们查看*图4.26*中的按州/省分布，我们可以看到第一名是加利福尼亚州，有超过25,000家。第二名是德克萨斯州，有超过1,000家咖啡店，第三名是英格兰，少于1,000家。按时区分布显示，最代表性的是美国东海岸时区（纽约时区）。
- en: '![](img/B20963_04_26.png)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B20963_04_26.png)'
- en: 'Figure 4.26: Coffee shops by State/Province code. California (CA) has the largest
    number of coffee shops, followed by Texas (TX)'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.26：按州/省代码划分的咖啡店。加利福尼亚州（CA）拥有最多的咖啡店，其次是德克萨斯州（TX）
- en: 'Additionally, the majority of the coffee shops are in the New York (US East
    Coast) timezone:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，大多数咖啡店位于纽约（美国东海岸）时区：
- en: '![](img/B20963_04_27.png)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B20963_04_27.png)'
- en: 'Figure 4.27: Coffee shops by timezone code, with the majority in the New York
    (US East Coast) timezone'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.27：按时区代码划分的咖啡店，大多数位于纽约（美国东海岸）时区
- en: 'Moving on, the ownership of Starbucks coffee shops is shown in *Figure 4.28*.
    We can observe that most of the coffee shops are company-owned (12,000), followed
    by licensed (more than 9,000), joint ventures (4,000), and franchises (fewer than
    1,000):'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，星巴克咖啡店的拥有情况在*图4.28*中展示。我们可以观察到，大多数咖啡店是公司拥有的（12,000家），其次是特许经营（超过9,000家），合资企业（4,000家），以及特许经营店（少于1,000家）：
- en: '![](img/B20963_04_28.png)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B20963_04_28.png)'
- en: 'Figure 4.28: Coffee shop ownership types'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.28：咖啡店所有权类型
- en: 'It will be interesting to see next how the ownership type varies depending
    on the country. Let’s represent the company ownership by country. The following
    figure shows the number of coffee shops per country for the top 10 countries.
    We use a logarithmic scale, due to data skewness (a measure of the asymmetry of
    the probability distribution). In other words, in a small number of countries,
    there are many coffee shops, while in the rest of the countries, there is a much
    smaller number. The United States has two types of ownership: company-owned and
    licensed. China has mostly joint ventures and company-owned, with a smaller number
    of licensed. In Japan, the majority of shops are joint ventures, with almost an
    equal amount of licensed and company-owned.'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将看到所有权类型如何根据国家而变化。让我们用国家来表示公司所有权。下面的图显示了前10个国家的咖啡店数量。由于数据偏斜（概率分布的不对称性度量），我们使用对数尺度。换句话说，在少数几个国家中，有许多咖啡店，而在其他国家中，咖啡店的数量要少得多。美国有两种所有权类型：公司拥有和特许经营。中国主要是合资企业和公司拥有，特许经营的数量较少。在日本，大多数店铺是合资企业，特许经营和公司拥有的数量几乎相等。
- en: '![A graph of a number of countries/regions  Description automatically generated](img/B20963_04_29.png)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![多个国家/地区的数量图表，自动生成描述](img/B20963_04_29.png)'
- en: 'Figure 4.29: Coffee shops per country, grouped by ownership type'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.29：按所有权类型分组的各国咖啡店数量
- en: In the following figure, we show the number of coffee shops per city, grouped
    by ownership type. Because the city’s names are written in multiple forms (with
    vernacular characters in lowercase and uppercase), I first unified the notation
    (and aligned all with an English name). The first cities are Shanghai, Seoul,
    and Beijing. Shanghai and Seoul have joint-venture coffee shops, while Beijing
    has only company-owned Starbucks coffee shops.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下图中，我们展示了按所有权类型分组的每个城市的咖啡店数量。因为城市的名称以多种形式书写（使用小写和大写的本土字符），我首先统一了表示法（并将所有内容与英文名称对齐）。前几个城市是上海、首尔和北京。上海和首尔有合资咖啡店，而北京只有公司拥有的星巴克咖啡店。
- en: '![A graph of different colored bars  Description automatically generated](img/B20963_04_30.png)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![不同颜色柱状图的图表，自动生成描述](img/B20963_04_30.png)'
- en: 'Figure 4.30: Coffee shops per city, grouped by ownership type'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.30：按所有权类型分组的城市咖啡店数量
- en: We performed univariate and bivariate analyses on the Starbucks coffee shops
    dataset. Now, we have a good understanding of the feature distribution and interactions.
    Moving on, let’s perform another geospatial analysis, using and extending the
    tools that we already tested with the analysis of the pubs in England.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对星巴克咖啡店数据集进行了单变量和双变量分析。现在，我们对特征分布和相互作用有了很好的理解。接下来，让我们进行另一项地理空间分析，使用并扩展我们之前在英格兰酒吧分析中测试过的工具。
- en: Geospatial analysis
  id: totrans-170
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 地理空间分析
- en: 'We start by observing the distribution of Starbucks in the world. We use the
    folium library and MarkerCluster to represent on a dynamic map the geospatial
    distribution of coffee shops in the entire world. The code is shown here:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先观察星巴克在全球的分布。我们使用folium库和MarkerCluster在动态地图上表示整个世界咖啡店的空间分布。代码如下所示：
- en: '[PRE20]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Folium/leaflet maps are browsable. We can pan, zoom in, and zoom out. In *Figure
    4.31*, we show the entire world’s distribution of coffee shops:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: Folium/leaflet地图可浏览。我们可以平移、放大和缩小。在*图4.31*中，我们展示了全球咖啡店的分布：
- en: '![Map  Description automatically generated](img/B20963_04_31.png)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![地图，自动生成描述](img/B20963_04_31.png)'
- en: 'Figure 4.31: Worldwide Starbucks coffee shop distribution using folium over
    leaflets and MarkerCluster'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.31：使用folium在leaflets上展示的全球星巴克咖啡店分布
- en: In *Figure 4.32*, we show a zoom-in on the continental United States and Canada
    area. Clearly, the East and West coasts dominate Starbucks coffee shop distribution
    in the United States.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 在*图4.32*中，我们展示了北美大陆美国和加拿大地区的放大视图。显然，东海岸和西海岸在美国星巴克咖啡店分布中占主导地位。
- en: '![Chart, bubble chart  Description automatically generated](img/B20963_04_32.png)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
  zh: '![图表，气泡图，自动生成描述](img/B20963_04_32.png)'
- en: 'Figure 4.32: Starbucks coffee shop distribution in the United States'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.32：美国星巴克咖啡店分布
- en: 'Another way to represent the spatial distribution of Starbucks coffee shops
    is to use the `geopandas` plot function. First, we will show the number of shops
    per country. For this, we aggregate the coffee shops per country:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种表示星巴克咖啡店空间分布的方法是使用`geopandas`绘图功能。首先，我们将展示每个国家的店铺数量。为此，我们将按国家汇总咖啡店：
- en: '[PRE21]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'To represent the geospatial distribution with `geopandas`, we need to use the
    `ISO3` country codes (country codes with three letters). In the Starbucks distribution
    dataset, we have only `ISO2` (country codes with two letters). We can include
    a dataset that contains the equivalences, or we can import a Python package that
    will do the conversions for us. We will opt for the second solution and `pip install`,
    and then import the `country-conversion` Python package:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用`geopandas`表示地理空间分布，我们需要使用`ISO3`国家代码（三位字母的国家代码）。在星巴克分布数据集中，我们只有`ISO2`（两位字母的国家代码）。我们可以包含一个包含等效性的数据集，或者我们可以导入一个Python包，它会为我们进行转换。我们将选择第二种解决方案并使用`pip
    install`，然后导入`country-conversion` Python包：
- en: '[PRE22]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Then, using `geopandas`, we load a dataset with polygon shapes for all countries,
    with low resolution. We then merge the two datasets (with shops and polygons):'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，使用`geopandas`，我们加载了一个包含所有国家多边形形状的数据集，分辨率为低。然后我们将两个数据集（包含店铺和多边形）合并：
- en: '[PRE23]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Before displaying the country polygons, with the fill color adjusted to represent
    proportionally the number of Starbucks coffee shops in the current country, we
    will display a wireframe with all the countries so that we can also see on the
    map the countries without Starbucks:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 在显示国家多边形之前，我们将填充颜色调整为按比例表示当前国家星巴克咖啡店的数量，我们将显示一个带有所有国家的线框图，这样我们也可以在地图上看到没有星巴克的国家：
- en: '[PRE24]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'With `geopandas`, we can apply a logarithmic colormap, which helps in representing
    the total number of Starbucks coffee shops across countries with a skewed distribution
    more effectively. It ensures a well-distributed color scheme, allowing us to differentiate
    between countries with a smaller number of coffee shops and those at the top in
    this regard. We also draw some of the latitude lines:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`geopandas`，我们可以应用对数色标，这有助于更有效地表示具有偏斜分布的各国星巴克咖啡店的总数。它确保了颜色方案的均匀分布，使我们能够区分拥有较少咖啡店的国家和在这方面处于顶端的国家。我们还绘制了一些纬度线：
- en: '[PRE25]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: This map is informative, but these countries have very different areas, populations,
    and population densities. To understand better the density of Starbucks coffee
    shops, we will also plot the number of shops per million citizens (for each country)
    and the number of shops per 1,000 square kilometers.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 这张地图很有信息量，但这些国家的面积、人口和人口密度差异很大。为了更好地理解星巴克咖啡店的密度，我们还将绘制每百万公民拥有的店铺数量（针对每个国家）以及每1,000平方公里的店铺数量。
- en: '![](img/B20963_04_33.png)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![图片 B20963_04_33.png]'
- en: 'Figure 4.33: geopandas map showing the coffee shop density (the log scale)
    at the world level'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.33：geopandas地图显示世界级别的咖啡店密度（对数刻度）
- en: For the preceding map, we chose `geopanda`s precisely because it allows us to
    represent regions with color intensity on a logarithmic scale.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 对于前面的地图，我们选择`geopandas`正是因为它允许我们在对数尺度上用颜色强度表示区域。
- en: In the `world` dataset, we have the population estimate but we do not have the
    country area information. To calculate the Starbucks density per square kilometers,
    we need to also include the area. We can include a new dataset, with the country
    area, or we can use the features of `geopandas` to obtain the area from the polygons.
    With the current Mercator projection adapted to display the map in a way that
    is legible, the area is not calculated correctly.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 在`world`数据集中，我们有人口估计数据，但没有国家面积信息。为了计算每平方公里的星巴克密度，我们需要包括面积。我们可以包含一个新的数据集，包含国家面积，或者我们可以使用`geopandas`的功能从多边形中获取面积。由于当前使用的墨卡托投影是为了以可读的方式显示地图，面积计算并不正确。
- en: 'We will copy the `world` dataset so that the transformation does not distort
    the polygons in the Mercator projection. We will then apply the transformation
    on the copy using the `Cylindrical equal-area` projection. This projection preserves
    the areas, and this is what we need for our calculations. After we perform the
    transformation, we concatenate the area to the `world` dataset:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将复制`world`数据集，以确保在墨卡托投影中变换时不会扭曲多边形。然后，我们将使用`Cylindrical equal-area`投影在副本上应用变换。这种投影保留了面积，这正是我们计算所需的。变换完成后，我们将面积连接到`world`数据集：
- en: '[PRE26]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Let’s verify that we have calculated the area correctly. We sample a few countries,
    and we verify that the areas match official records:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来验证一下我们计算面积是否正确。我们选取了几个国家，并验证这些国家的面积是否与官方记录相符：
- en: '[PRE27]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '![Graphical user interface, table, calendar  Description automatically generated
    with medium confidence](img/B20963_04_34.png)'
  id: totrans-198
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面、表格、日历 描述自动生成，置信度中等](img/B20963_04_34.png)'
- en: 'Figure 4.34: Area verification for the United States of America, Romania, and
    the UK'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.34：美国、罗马尼亚和英国的面积验证
- en: As you can see, for all the countries, the calculated area with the method used
    yielded correct surfaces that match the values in official records.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，对于所有国家，使用的方法计算出的面积产生了与官方记录相符的正确表面。
- en: 'Now, we have all we need to prepare and display the maps with Starbucks densities
    per country, relative to area and population. The code for the calculation of
    the Starbucks densities is as follows:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经拥有了准备和显示按国家、面积和人口相对密度显示星巴克密度的所有必要信息。计算星巴克密度的代码如下：
- en: '[PRE28]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Then, using the following code, we draw the distribution of Starbucks per 1
    million people at the country level:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，使用以下代码，我们在国家层面上绘制每百万人口拥有的星巴克分布：
- en: '[PRE29]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: We show the graph drawn with the preceding code in *Figure 4.35*. The countries
    with the highest number of Starbucks per million people are the United States,
    Canada, and the United Emirates, followed by Taiwan, South Korea, the UK, and
    Japan.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: '![A picture containing chart  Description automatically generated](img/B20963_04_35.png)'
  id: totrans-206
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.35: Starbucks per 1 million people – distribution per country'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
- en: 'For each country, the number of Starbucks coffee shops per 1,000 square kilometers
    is displayed in the following figure:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: '![A picture containing chart  Description automatically generated](img/B20963_04_36.png)'
  id: totrans-209
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.36: Starbucks per 1,000 square kilometers – distribution per country'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
- en: We can see that the highest concentration of coffee shops is in countries like
    South Korea, Taiwan, Japan, and the UK.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s do a quick summary to wrap up this section. We analyzed the two datasets
    with pubs in England and Starbucks worldwide to get a good understanding of the
    data distribution in the two datasets. We also introduced several techniques and
    tools for geospatial data manipulation and analysis. We learned how to draw shapefile
    data, how to extract polygons from a shapefile, how to clip polygon sets using
    another set of polygons, and how to generate Voronoi polygons. This was all preparation
    for the main part of the analysis in this chapter, where we will combine the two
    datasets and learn how to generate multi-layer maps, where the information from
    the two datasets is combined creatively. Our goal is twofold: to introduce you
    to more advanced ways to analyze geospatial data, and to use creatively the methods
    introduced to see how we can get insights from both data sources, once combined.'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
- en: Pubs and Starbucks in London
  id: totrans-213
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Until now, our analysis was focused on the individual datasets `Every Pub in
    England` and `Starbucks Locations Worldwide`. To support some of the data analysis
    tasks related to these two separate datasets, we have also added two more datasets,
    one with the geographical position of postal codes, replacing the missing latitude
    and longitude data, and one with shapefile data for the UK to clip the Voronoi
    polygons generated from pubs’ positions, aligning them with the land contour of
    the island.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: In the current section, we will combine the information from the two main data
    sources analyzed separately and apply methods developed during this preliminary
    analysis, supporting the objective of our study. This will focus on a smaller
    region, where we have both a high density of pubs and a concentration of Starbucks
    coffee shops, in London. We can already hypothesize that the geospatial concentration
    of Starbucks is smaller than the concentration of pubs.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: We would like to see where the closest Starbucks is so that we can sober up
    with a coffee after we’ve had a few pints of ale. We already learned that Voronoi
    polygons have an interesting characteristic – any point inside a polygon is closer
    to its center than to any neighboring center. We will represent the pub locations
    in the London area, superposed over the Voronoi polygons generated from the Starbucks
    locations in the same area.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望看到最近的星巴克在哪里，这样我们就可以在喝了几品脱啤酒后用咖啡清醒一下。我们已经了解到Voronoi多边形有一个有趣的特性——多边形内的任何点都离其中心比离任何相邻中心更近。我们将代表伦敦地区的酒吧位置，叠加在同一地区星巴克位置生成的Voronoi多边形上。
- en: The notebook associated with this section is `Coffee or Beer in London – Your
    Choice!`, (see *Reference 11*). You might find it useful to follow the notebook
    along with the text in this section.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 与本节相关的笔记本是`Coffee or Beer in London – Your Choice!`，（见*参考文献11*）。您可能会发现跟随本节中的文本一起查看笔记本很有用。
- en: Data preparation
  id: totrans-218
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据准备
- en: We start by reading the CSV files from the two datasets, `Every Pub in England`
    and `Starbucks Locations Worldwide`. We also now read the `GBR_adm2.shp` shapefile
    (with Great Britain local authorities’ borders data) from `GDM Data for the UK`
    and the data from `Open Postcode Geo`. In this last file, we just filter four
    columns (postcode, country, latitude, and longitude).
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先从两个数据集`Every Pub in England`和`Starbucks Locations Worldwide`中读取CSV文件。我们还现在从`GDM
    Data for the UK`读取`GBR_adm2.shp`形状文件（包含大不列颠地方当局边界数据）以及`Open Postcode Geo`的数据。在这个最后文件中，我们只过滤四个列（邮编、国家、纬度和经度）。
- en: 'From the pub data, we only select the entries that have as a local authority
    one of the 32 London boroughs. We add to this subset the City of London, which
    is not one of the boroughs. The City of London is in the center of London, and
    some of the pubs are located there, which we would like to include. We use the
    same list to filter the data in the shapefile data. To check that we have correctly
    selected all the shapefile data, we display the boroughs (and the City of London)
    polygons:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 从酒吧数据中，我们只选择那些地方当局为伦敦32个自治市之一的数据条目。我们将伦敦市添加到这个子集中，因为伦敦市不是自治市之一。伦敦市位于伦敦市中心，一些酒吧就位于那里，我们希望将其包括在内。我们使用相同的列表来过滤shapefile数据中的数据。为了检查我们是否正确选择了所有shapefile数据，我们显示了自治市（以及伦敦市）的多边形：
- en: '[PRE30]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: In the following figure, observe that the City of London is missing (left).
    We have London in shapefile names, so we will just replace London with the City
    of London in the shapefile data. After the correction (right), we can see that
    by unifying the notation for the City of London, we now have all local authorities
    correctly represented on our map. Now, we have selected all areas that we want
    to include in our analysis of pubs and Starbucks coffee shops in the London area.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下图中，观察发现伦敦市缺失（左）。我们在形状文件名称中有伦敦，所以我们将只将形状文件数据中的伦敦替换为伦敦市。在更正后（右），我们可以看到通过统一伦敦市的表示法，我们现在在我们的地图上正确地表示了所有地方当局。现在，我们已经选择了我们想要包括在我们对伦敦地区酒吧和星巴克咖啡店的分析中的所有区域。
- en: '![](img/B20963_04_37.png)'
  id: totrans-223
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B20963_04_37.png)'
- en: 'Figure 4.37: London boroughs (left) and the London boroughs and the City of
    London (right)'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.37：伦敦自治市（左）和伦敦自治市及伦敦市（右）
- en: 'We also select Starbucks coffee shop data for the same sub-regions. For Starbucks
    data, the selection is shown in the following code:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还选择了相同子区域的星巴克咖啡店数据。对于星巴克数据，选择在以下代码中显示：
- en: '[PRE31]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: We incorporate country information into the filtering criteria because London
    and the names of various other London boroughs are found across North America,
    where many cities borrow names from Great Britain.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将国家信息纳入过滤标准，因为伦敦和许多其他伦敦自治市的名称在北美被发现，许多城市从大不列颠借用名称。
- en: We are aware, based on our previous analysis of the pub data, that some pubs
    have missing latitude and longitude, marked with **\\N**. Carry out the same transformations,
    including merging with the `Open Postcode Geo` data and cleaning, as discussed
    in the previous subsection for these pub rows. This process will involve assigning
    latitude and longitude data based on postcode matching.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 根据我们对酒吧数据的先前分析，我们知道一些酒吧缺少经纬度，标记为**\\N**。对这些酒吧行执行相同的转换，包括与`Open Postcode Geo`数据合并和清理，如前一小节所述。这个过程将涉及根据邮编匹配分配经纬度数据。
- en: 'Then, using the following code, we check that the pubs and Starbucks selected
    with the preceding criteria are all within the boundaries (or very close to those)
    of the London boroughs:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，使用以下代码，我们检查使用先前标准选择的酒吧和星巴克是否都在伦敦自治市区的边界内（或非常接近这些边界）：
- en: '[PRE32]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'We observe that there are two Starbucks that are quite remote from London.
    We set an additional condition for the selected Starbucks:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 我们观察到有两个星巴克与伦敦相当遥远。我们对选定的星巴克设置了一个额外的条件：
- en: '[PRE33]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: In the resulting figure, you’ll see the pubs (cross) and Starbucks (points)
    in the London boroughs and the City of London, after filtering items outside these
    local authorities’ zones and correcting the misattributions.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 在生成的图中，您将看到伦敦自治市区和伦敦市内的酒吧（交叉点）和星巴克（点），在过滤掉这些地方当局区域外的项目并纠正错误归属后。
- en: '![](img/B20963_04_38.png)'
  id: totrans-234
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B20963_04_38.png)'
- en: 'Figure 4.38: Pubs (cross) and Starbucks (points) in the London boroughs and
    the City of London after filtering items'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.38：过滤项目后的伦敦自治市区和伦敦市内的酒吧（交叉点）和星巴克（点）
- en: There are still a few points outside the boundaries, but for now, we should
    be fine. These points will be filtered out once we use the local authority polygons
    to clip the Voronoi polygons associated with each pub and coffee shop. We observed
    a strange artifact regarding the alignment of Starbucks. All Starbucks shops seem
    to be aligned horizontally. This is because Starbucks positions are given with
    only two decimals (Starbucks coffee shops are from a global geolocation dataset,
    where the location is given with smaller precision), while the pubs are given
    six decimals. Consequently, the Starbucks shops appear to be aligned. Their positions
    are rounded to two decimals, and due to the close position of the coffee shops,
    they appear to be aligned, especially along the latitude lines.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 仍然有一些点在边界之外，但到目前为止，我们应该没问题。一旦我们使用地方当局多边形来裁剪每个酒吧和咖啡店相关的Voronoi多边形，这些点将被过滤掉。我们观察到有关星巴克对齐的一个奇怪现象。所有星巴克商店似乎都是水平对齐的。这是因为星巴克的定位只给出了两位小数（星巴克咖啡店来自一个全球地理定位数据集，其中位置以较小的精度给出），而酒吧给出了六位小数。因此，星巴克商店看起来是对齐的。它们的定位被四舍五入到两位小数，由于咖啡店位置接近，它们看起来是对齐的，尤其是在纬度线上。
- en: Geospatial analysis
  id: totrans-237
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 地理空间分析
- en: 'Now, let’s represent the Voronoi polygons for pubs and Starbucks shops in London
    and its boroughs. We start by generating those polygons, using the same code we
    used before for our data analysis on `Every Pub in England`. First, let’s do the
    pubs in the area. The code in the notebook is now more compact, since we are using
    the `geospatial_utils` utility script. The following code generates the object
    with the Voronoi polygons collection and then visualizes the collection:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们用伦敦及其自治市区的酒吧和星巴克商店的Voronoi多边形来表示。我们首先使用之前用于我们在《英格兰每家酒吧》数据分析中使用的相同代码来生成这些多边形。首先，让我们处理该区域的酒吧。由于我们现在使用了`geospatial_utils`实用脚本，笔记本中的代码现在更加紧凑。以下代码生成包含Voronoi多边形集合的对象，然后可视化该集合：
- en: '[PRE34]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: For this, the preceding code uses two functions defined in `geospatial_utils`.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 为了做到这一点，前面的代码使用了在`geospatial_utils`中定义的两个函数。
- en: 'The first function, `get_voronoi_polygons`, creates a list of Voronoi polygons
    from a list of points, with the *x* and *y* coordinates representing the longitude
    and latitude, respectively. To do this, it uses the Voronoi function in the `scipy.spatial`
    library:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个函数`get_voronoi_polygons`从一个点列表中创建一个Voronoi多边形列表，其中*x*和*y*坐标分别代表经度和纬度。为此，它使用`scipy.spatial`库中的Voronoi函数：
- en: '[PRE35]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'The second function, `plot_voronoi_polygons`, plots a `spacy.spatial.Voronoi`
    object, which is a collection of Voronoi polygons:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个函数`plot_voronoi_polygons`绘制一个`spacy.spatial.Voronoi`对象，这是一个Voronoi多边形的集合：
- en: '[PRE36]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'The collection of polygons generated is first extracted as a list of polygons,
    using the `extract_voronoi_polygon_list` function already defined in the previous
    section (and which was just moved to the new utility script). Then, the polygons
    are clipped using the external boundary of London boroughs, obtained by dissolving
    the `borroughs_df` GeoDataFrame:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 生成多边形集合首先被提取为前一个部分中已定义的`extract_voronoi_polygon_list`函数的列表，然后使用伦敦自治市区的外部边界进行裁剪，该边界是通过溶解`borroughs_df`
    GeoDataFrame获得的：
- en: '[PRE37]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'The code for `clip_polygons` is defined as well in the `geospatial_utils` utility
    script. In the `clip_polygons` function, we use a list of polygons, `poly_clipping`,
    to clip polygons in another list, `poly_list_origin`. We transform the list with
    original polygons, `poly_list_origin`, in a `geopandas` DataFrame. We perform
    the clipping operation using the geopandas `clip` function. The resulting list
    of polygons clipped, `polygons_clipped`, is returned by the `clip_polygons` function:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: '`clip_polygons`函数的代码在`geospatial_utils`实用脚本中定义。在`clip_polygons`函数中，我们使用一个多边形列表`poly_clipping`来裁剪另一个列表`poly_list_origin`中的多边形。我们将原始多边形列表`poly_list_origin`转换为一个`geopandas`
    DataFrame。我们使用geopandas的`clip`函数执行裁剪操作。裁剪后的多边形列表`polygons_clipped`由`clip_polygons`函数返回：'
- en: '[PRE38]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'The following figure shows the Voronoi polygons from pub locations in London
    (left) and the boroughs’ boundary (right):'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 下图显示了伦敦酒吧位置的Voronoi多边形（左）和地区边界（右）：
- en: '![](img/B20963_04_39.png)'
  id: totrans-250
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B20963_04_39.png)'
- en: 'Figure 4.39: Pubs’ Voronoi polygons in the London boroughs and the City of
    London (left) and the London boroughs’ boundary (right). We use the boundary polygon
    to clip the Voronoi polygons'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.39：伦敦地区和伦敦市（左）的酒吧Voronoi多边形以及伦敦地区边界（右）。我们使用边界多边形来裁剪Voronoi多边形
- en: The following figure shows the boroughs’ boundary and the pubs’ position, as
    well as the Voronoi polygons associated with these locations. We can observe that
    the areas with the greatest pub density are in the City of London and its neighboring
    boroughs to the west, except for Tower Hamlets, which has only one pub.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 下图显示了地区的边界和酒吧的位置，以及与这些位置相关的Voronoi多边形。我们可以观察到，酒吧密度最高的区域位于伦敦市及其西部的邻近地区，除了塔桥区，该区只有一家酒吧。
- en: '![Map  Description automatically generated](img/B20963_04_40.png)'
  id: totrans-253
  prefs: []
  type: TYPE_IMG
  zh: '![地图描述自动生成](img/B20963_04_40.png)'
- en: 'Figure 4.40: Pubs’ Voronoi polygons in the London boroughs and the City of
    London (clipped), showing pubs’ locations and boroughs’ boundaries'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.40：伦敦地区和伦敦市（裁剪后）的酒吧Voronoi多边形，显示酒吧位置和地区边界
- en: 'Next, we perform the same operations for the Starbucks coffee shop locations.
    We generate the Voronoi polygons and clip them with the same London borough border
    polygon, obtained by dissolving all the boroughs’ polygons. The following figure
    shows the boroughs’ boundaries and the Starbucks shops’ positions, as well as
    the Voronoi polygons associated with these locations:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们对星巴克咖啡店的位置执行相同的操作。我们生成Voronoi多边形，并使用通过溶解所有地区多边形获得的相同的伦敦地区边界多边形进行裁剪。下图显示了地区的边界和星巴克商店的位置，以及与这些位置相关的Voronoi多边形：
- en: '![Map  Description automatically generated](img/B20963_04_41.png)'
  id: totrans-256
  prefs: []
  type: TYPE_IMG
  zh: '![地图描述自动生成](img/B20963_04_41.png)'
- en: 'Figure 4.41: Starbucks’ Voronoi polygons in the London boroughs and the City
    of London (clipped), showing the shops’ locations and boroughs’ boundaries'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.41：伦敦地区和伦敦市（裁剪后）的星巴克Voronoi多边形，显示商店的位置和地区边界
- en: 'The code for generating the Voronoi polygons object, visualizing it, extracting
    from it the list of polygons, and then clipping it is given here. First, let’s
    see the code to generate the Voronoi polygons:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 生成Voronoi多边形对象、可视化它、从中提取多边形列表以及然后裁剪的代码如下。首先，让我们看看生成Voronoi多边形的代码：
- en: '[PRE39]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Next is the code for extracting the list of polygons from the Voronoi polygons
    object and the code for clipping the polygons, using the borroughs’ boundary:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是提取Voronoi多边形对象中的多边形列表以及使用地区边界裁剪多边形的代码：
- en: '[PRE40]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Using the `within_polygon` function, we can identify the locations that are
    inside a polygon. The function is implemented in the `geospatial_utils` module.
    The function uses the `within` property of the `Point` object from the `shapely.geometry`
    library module. We apply the operation, for a given polygon, to all the points
    created from the longitude/latitude of all items (in our case, the pubs), getting
    the status (`within`, `outside`) of points relative to the reference polygon:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`within_polygon`函数，我们可以识别位于多边形内的位置。该函数在`geospatial_utils`模块中实现。该函数使用来自`shapely.geometry`库模块的`Point`对象的`within`属性。我们对给定多边形的所有点（在我们的案例中，是酒吧）的经纬度创建的点执行操作，获取点相对于参考多边形的状态（`within`，`outside`）：
- en: '[PRE41]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'The following code applies the `within_polygon` function:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码应用了`within_polygon`函数：
- en: '[PRE42]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: In the following figure, the pubs within the selected area (shown in the notebook
    associated with the book by a light brown and dark green fill color) are closer
    to the position of the Starbucks coffee shop centered on the selected area than
    to any other neighboring Starbucks coffee shop. The rest of the pubs are shown
    with a light green color. We can repeat the procedure for all polygons (and also
    for the boroughs’ polygons).
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下图中，所选区域内的酒吧（在笔记本中与书籍相关联，使用浅棕色和深绿色填充色显示）比任何其他相邻的星巴克咖啡店更靠近所选区域的星巴克咖啡店位置。其余酒吧以浅绿色显示。我们可以对所有的多边形（以及自治市的区域）重复此过程。
- en: '![Map  Description automatically generated](img/B20963_04_42.png)'
  id: totrans-267
  prefs: []
  type: TYPE_IMG
  zh: '![地图描述自动生成](img/B20963_04_42.png)'
- en: 'Figure 4.42: Pubs outside and inside a Starbucks Voronoi polygon area'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.42：星巴克Voronoi多边形区域内外酒吧
- en: We can represent the same items, pubs and Starbucks coffee shops, using folium
    maps too. These maps will allow interactions, including zooming in, zooming out,
    and panning. We can add multiple layers over a base map. Let’s start by representing
    the London boroughs as the first layer of the map. On top of that, we will show
    the pubs in the London area. Each pub will have a popup as well, displaying the
    name of the pub and the address. We can select from multiple map tile providers.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以使用folium地图来表示相同的物品，酒吧和星巴克咖啡店。这些地图将允许交互，包括放大、缩小和平移。我们可以在基础图上添加多个图层。让我们首先将伦敦自治市表示为地图的第一层。在其上方，我们将显示伦敦区域的酒吧。每个酒吧也将有一个弹出窗口，显示酒吧名称和地址。我们可以从多个地图瓦片提供商中选择。
- en: 'Because I prefer to have a clearer background, I opted for two tile sources:
    “Stamen toner” and “CartoDB positron.” For both options, the tiles are either
    black and white or pale colors, so the overlapping layers can be seen more easily.
    The following is the code to show the tiles (with “Stamen toner”) in the London
    area, the contour of London boroughs (first layer of the map), and each pub location
    with `CircleMarker` (the second layer over the map). Each pub will have a popup,
    showing the pub name and address:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我更喜欢清晰的背景，我选择了两个瓦片来源：“Stamen toner”和“CartoDB positron”。对于这两种选项，瓦片都是黑白或浅色，因此重叠层可以更容易地看到。以下是在伦敦区域显示瓦片（使用“Stamen
    toner”）、伦敦自治市轮廓（地图的第一层）以及每个酒吧位置（在地图上的第二层）的代码。每个酒吧都将有一个弹出窗口，显示酒吧名称和地址：
- en: '[PRE43]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'The following figure displays the map created with the preceding code. On this
    map, we show on superposed layers the following information:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图显示了使用前面代码创建的地图。在此地图上，我们显示以下信息叠加层：
- en: The London boroughs and City of London map areas, using “Stamen Toner” tiles
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 伦敦自治市和伦敦市地图区域使用“Stamen Toner”瓦片
- en: The London boroughs and City of London boundaries
  id: totrans-274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 伦敦自治市和伦敦市边界
- en: The pubs in the preceding areas, shown with `CircleMarker`
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 前述区域中的酒吧，使用`CircleMarker`显示
- en: Optionally, for each pub, if selected, one popup showing the pub name and address
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可选地，对于每个酒吧，如果选中，一个弹出窗口显示酒吧名称和地址
- en: '![Map  Description automatically generated](img/B20963_04_43.png)'
  id: totrans-277
  prefs: []
  type: TYPE_IMG
  zh: '![地图描述自动生成](img/B20963_04_43.png)'
- en: 'Figure 4.43: Leaflet map with the boroughs’ borders and the pub locations in
    the London area'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.43：带有伦敦自治市边界和伦敦区域酒吧位置的Leaflet地图
- en: In the notebook, I show more images with Starbucks Voronoi polygons and locations,
    as well as maps with multiple layers of polygons and markers.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 在笔记本中，我展示了更多带有星巴克Voronoi多边形和位置的图片，以及具有多层层多边形和标记的地图。
- en: 'Another useful operation that we can perform is to calculate the area of polygons.
    The function to calculate areas for all polygons in a GeoDataFrame is `get_polygons_area`,
    which is also defined in `geospatial_utils`. It applies a transformation to the
    projection, in `cylindrical equal area`, on a copy of the GeoDataFrame. This projection
    will preserve the areas. We then add the `area` column to the original GeoDataFrame:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个我们可以执行的有用操作是计算多边形的面积。用于计算GeoDataFrame中所有多边形面积的函数是`get_polygons_area`，它也在`geospatial_utils`中定义。它在一个GeoDataFrame的副本上应用了`cylindrical
    equal area`投影的转换。这个投影将保留面积。然后我们向原始GeoDataFrame添加`area`列：
- en: '[PRE44]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'We calculate the area for the boroughs, and then we count the number of pubs
    per borough. Then, we divide the number of pubs/boroughs by the borough area to
    obtain the pub density (in pubs per square kilometer):'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 我们计算自治市的面积，然后计算每个自治市酒吧的数量。然后，我们将酒吧/自治市数量除以自治市面积，以获得酒吧密度（每平方公里酒吧数）：
- en: '[PRE45]'
  id: totrans-283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'We now need to represent the density with a continuous color scale, but we
    would like to use colors from our custom colormap. We can create our own continuous
    color map and use as seeds a few of the colors in our color list:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在需要用一个连续的颜色尺度来表示密度，但我们希望使用自定义颜色映射中的颜色。我们可以创建自己的连续颜色映射，并使用颜色列表中的几个颜色作为种子：
- en: '[PRE46]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'For the pub density graph, we would like to use, with this custom colormap,
    a logarithmic scale. We can achieve this with the following code:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 对于酒吧密度图，我们希望使用这个自定义颜色映射，并采用对数刻度。我们可以通过以下代码实现：
- en: '[PRE47]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'The following figure shows the pub numbers in each borough (left) and the pub
    density per borough (right):'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 下图显示了每个地区的酒吧数量（左侧）和每个地区的酒吧密度（右侧）：
- en: '![](img/B20963_04_44.png)'
  id: totrans-289
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B20963_04_44.png)'
- en: 'Figure 4.44: Pub numbers (left) and pub density on a logarithmic scale (right)
    per London borough'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.44：伦敦每个地区的酒吧数量（左侧）和对数刻度下的酒吧密度（右侧）
- en: In the notebook associated with this section, *Coffee or Beer in London – Your
    Choice!* (see *Reference 11*), I also show the pub numbers and pub density per
    Starbucks Voronoi polygons area. The various techniques displayed in this section
    have hopefully equipped you with a starting toolset for the analysis and visualization
    of geospatial data.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 在与本节相关的笔记本中，“伦敦的咖啡或啤酒——你的选择！”（参见参考文献 11），我还展示了每个 Starbucks Voronoi 多边形区域的酒吧数量和酒吧密度。本节中展示的各种技术可能已经为您提供了分析和可视化地理空间数据的起始工具集。
- en: Summary
  id: totrans-292
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned how to work with geographical information and maps,
    how to manipulate geometry data (clip and merge polygon data, cluster data to
    generate maps with fewer details, and remove subsets of geospatial data), and
    superpose several layers of data over maps. We also learned how to modify and
    extract information from a shapefile using `geopandas` and custom code, as well
    as creating or calculating geospatial features, like terrain area or geospatial
    object density. Additionally, we extracted reusable functions and grouped them
    in two utility scripts, which is Kaggle terminology for independent Python modules.
    These utility scripts can be imported like any other library and integrated with
    your notebook code.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何处理地理信息和地图，如何操作几何数据（裁剪和合并多边形数据，聚类数据以生成细节较少的地图，以及从地理空间数据中移除子集），并在地图上叠加多个数据层。我们还学习了如何使用
    `geopandas` 和自定义代码修改和提取 shapefile 中的信息，以及创建或计算地理空间特征，如地形面积或地理空间对象密度。此外，我们提取了可重用的函数并将它们分组到两个实用脚本中，这是
    Kaggle 术语中的独立 Python 模块。这些实用脚本可以像任何其他库一样导入，并与您的笔记本代码集成。
- en: In the next chapter, we are going to put to try out some of the tools and techniques
    for geospatial analysis, for a data analytics competition.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将尝试使用一些地理空间分析的工具和技术，用于数据分析竞赛。
- en: References
  id: totrans-295
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考文献
- en: 'Every Pub in England, Kaggle Datasets: [https://www.kaggle.com/datasets/rtatman/every-pub-in-england](https://www.kaggle.com/datasets/rtatman/every-pub-in-england)'
  id: totrans-296
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 英格兰每家酒吧，Kaggle 数据集：[https://www.kaggle.com/datasets/rtatman/every-pub-in-england](https://www.kaggle.com/datasets/rtatman/every-pub-in-england)
- en: 'Every Pub in England – Data Exploration, Kaggle Notebook: [https://github.com/PacktPublishing/Developing-Kaggle-Notebooks/blob/develop/Chapter-04/every-pub-in-england-data-exploration.ipynb](https://github.com/PacktPublishing/Developing-Kaggle-Notebooks/blob/develop/Chapter-04/every-pub-in-england-data-exploration.ipynb)'
  id: totrans-297
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 英格兰每家酒吧的数据探索，Kaggle 笔记本：[https://github.com/PacktPublishing/Developing-Kaggle-Notebooks/blob/develop/Chapter-04/every-pub-in-england-data-exploration.ipynb](https://github.com/PacktPublishing/Developing-Kaggle-Notebooks/blob/develop/Chapter-04/every-pub-in-england-data-exploration.ipynb)
- en: 'Starbucks Locations Worldwide, Kaggle Datasets: [https://www.kaggle.com/datasets/starbucks/store-locations](https://www.kaggle.com/datasets/starbucks/store-locations)'
  id: totrans-298
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 星巴克全球位置，Kaggle 数据集：[https://www.kaggle.com/datasets/starbucks/store-locations](https://www.kaggle.com/datasets/starbucks/store-locations)
- en: 'Open Postcode Geo, Kaggle Datasets: [https://www.kaggle.com/datasets/danwinchester/open-postcode-geo](https://www.kaggle.com/datasets/danwinchester/open-postcode-geo)'
  id: totrans-299
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Open Postcode Geo，Kaggle 数据集：[https://www.kaggle.com/datasets/danwinchester/open-postcode-geo](https://www.kaggle.com/datasets/danwinchester/open-postcode-geo)
- en: 'GADM Data for UK, Kaggle Datasets: [https://www.kaggle.com/datasets/gpreda/gadm-data-for-uk](https://www.kaggle.com/datasets/gpreda/gadm-data-for-uk)'
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 英国 GADM 数据，Kaggle 数据集：[https://www.kaggle.com/datasets/gpreda/gadm-data-for-uk](https://www.kaggle.com/datasets/gpreda/gadm-data-for-uk)
- en: 'Starbucks Location Worldwide – Data Exploration, Kaggle Notebook: [https://github.com/PacktPublishing/Developing-Kaggle-Notebooks/blob/develop/Chapter-04/starbucks-location-worldwide-data-exploration.ipynb](https://github.com/PacktPublishing/Developing-Kaggle-Notebooks/blob/develop/Chapter-04/starbucks-location-worldwide-data-exploration.ipynb)'
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 星巴克全球门店 – 数据探索，Kaggle 笔记本：[https://github.com/PacktPublishing/Developing-Kaggle-Notebooks/blob/develop/Chapter-04/starbucks-location-worldwide-data-exploration.ipynb](https://github.com/PacktPublishing/Developing-Kaggle-Notebooks/blob/develop/Chapter-04/starbucks-location-worldwide-data-exploration.ipynb)
- en: 'Polygon overlay in Leaflet Map: [https://stackoverflow.com/questions/59303421/polygon-overlay-in-leaflet-map](https://stackoverflow.com/questions/59303421/polygon-overlay-in-leaflet-map)'
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Leaflet 地图中的多边形叠加：[https://stackoverflow.com/questions/59303421/polygon-overlay-in-leaflet-map](https://stackoverflow.com/questions/59303421/polygon-overlay-in-leaflet-map)
- en: 'Geopandas area: [https://geopandas.org/en/stable/docs/reference/api/geopandas.GeoSeries.area.html](https://geopandas.org/en/stable/docs/reference/api/geopandas.GeoSeries.area.html)'
  id: totrans-303
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Geopandas 区域：[https://geopandas.org/en/stable/docs/reference/api/geopandas.GeoSeries.area.html](https://geopandas.org/en/stable/docs/reference/api/geopandas.GeoSeries.area.html)
- en: 'Scipy Spatial Voronoi – extract Voronoi polygons and represent them: [https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.Voronoi.html](https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.Voronoi.html)'
  id: totrans-304
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Scipy 空间 Voronoi – 提取 Voronoi 多边形并展示它们：[https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.Voronoi.html](https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.Voronoi.html)
- en: 'Getting polygon areas using GeoPandas: [https://gis.stackexchange.com/questions/218450/getting-polygon-areas-using-geopandas](https://gis.stackexchange.com/questions/218450/getting-polygon-areas-using-geopandas)'
  id: totrans-305
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 GeoPandas 获取多边形面积：[https://gis.stackexchange.com/questions/218450/getting-polygon-areas-using-geopandas](https://gis.stackexchange.com/questions/218450/getting-polygon-areas-using-geopandas)
- en: 'Coffee or Beer in London – Your Choice!, Kaggle Notebook: [https://github.com/PacktPublishing/Developing-Kaggle-Notebooks/blob/develop/Chapter-04/coffee-or-beer-in-london-your-choice.ipynb](https://github.com/PacktPublishing/Developing-Kaggle-Notebooks/blob/develop/Chapter-04/coffee-or-beer-in-london-your-choice.ipynb)'
  id: totrans-306
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在伦敦喝咖啡还是啤酒 – 你的选择！，Kaggle 笔记本：[https://github.com/PacktPublishing/Developing-Kaggle-Notebooks/blob/develop/Chapter-04/coffee-or-beer-in-london-your-choice.ipynb](https://github.com/PacktPublishing/Developing-Kaggle-Notebooks/blob/develop/Chapter-04/coffee-or-beer-in-london-your-choice.ipynb)
- en: Join our book’s Discord space
  id: totrans-307
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加入我们书籍的 Discord 空间
- en: 'Join our Discord community to meet like-minded people and learn alongside more
    than 5000 members at:'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 加入我们的 Discord 社区，与志同道合的人相聚，并在以下地点与超过 5000 名成员一起学习：
- en: '[https://packt.link/kaggle](https://packt.link/kaggle)'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://packt.link/kaggle](https://packt.link/kaggle)'
- en: '![](img/QR_Code9220780366773140.png)'
  id: totrans-310
  prefs: []
  type: TYPE_IMG
  zh: '![二维码](img/QR_Code9220780366773140.png)'
