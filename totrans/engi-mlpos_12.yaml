- en: 'Chapter 10: Essentials of Production Release'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第10章：生产发布的基本要素
- en: In this chapter, you will learn about the **continuous integration** and **continuous
    delivery** (**CI/CD**) pipeline, the essentials of a production environment, and
    how to set up a production environment to serve your previously tested and approved
    **machine learning** (**ML**) models to end users. We will set up the required
    infrastructure for the CI/CD pipeline's production environment, configure processes
    for production deployments, configure pipeline execution triggers for complete
    automation, and learn how to manage production releases. This chapter will cover
    the essential fundamentals of the CI/CD pipeline and production environment since
    *the pipeline is the product, not the model*.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将了解**持续集成**和**持续交付**（**CI/CD**）管道、生产环境的基本要素以及如何设置生产环境以向最终用户提供之前测试和批准的**机器学习**（**ML**）模型。我们将为
    CI/CD 管道的生产环境设置所需的基础设施，配置生产部署的过程，配置管道执行触发器以实现完全自动化，并学习如何管理生产发布。本章将涵盖 CI/CD 管道和生产环境的基本要素，因为*管道是产品，而不是模型*。
- en: By learning about the fundamentals of CI/CD pipelines, you will be able to develop,
    test, and configure automated CI/CD pipelines for your use cases or business.
    We will cover an array of topics around production deployments and then delve
    into a primer on monitoring ML models in production.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 通过了解 CI/CD 管道的基础知识，您将能够为您的用例或业务开发、测试和配置自动化的 CI/CD 管道。我们将涵盖与生产部署相关的一系列主题，然后深入探讨在生产环境中监控机器学习模型的基础知识。
- en: 'We are going to cover the following topics in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Setting up the production infrastructure
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置生产基础设施
- en: Setting up our production environment in the CI/CD pipeline
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 CI/CD 管道中设置我们的生产环境
- en: Testing our production-ready pipeline
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试我们的生产就绪管道
- en: Configuring pipeline triggers for automation
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置管道触发器以实现自动化
- en: Pipeline release management
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管道发布管理
- en: Toward continuous monitoring the service
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向持续监控服务迈进
- en: Let's begin by setting up the infrastructure that's required to build the CI/CD
    pipeline.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从设置构建 CI/CD 管道所需的基础设施开始。
- en: Setting up the production infrastructure
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置生产基础设施
- en: In this section, we will set up the required infrastructure to serve our business
    use case (to predict weather conditions – raining or not raining at the port of
    Turku to plan and optimize resources at the port). We will set up an autoscaling
    Kubernetes cluster to deploy our ML model in the form of a web service. Kubernetes
    is an open source container orchestration system for automating software application
    deployment, scaling, and management. Many cloud service providers offer a Kubernetes-based
    infrastructure as a service. Similarly, Microsoft Azure provides a Kubernetes-based
    infrastructure as a service called **Azure Kubernetes Service** (**AKS**). We
    will use AKS to orchestrate our infrastructure.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将设置所需的基础设施以服务于我们的业务用例（预测天气条件——图尔库港是否下雨，以规划和优化港口资源）。我们将设置一个自动扩展的 Kubernetes
    集群，以将我们的 ML 模型以 Web 服务的形式部署。Kubernetes 是一个开源的容器编排系统，用于自动化软件应用程序的部署、扩展和管理。许多云服务提供商提供基于
    Kubernetes 的基础设施即服务。同样，Microsoft Azure 提供了一个名为 **Azure Kubernetes Service**（**AKS**）的基于
    Kubernetes 的基础设施即服务。我们将使用 AKS 来编排我们的基础设施。
- en: 'There are multiple ways to provision an autoscaling Kubernetes cluster on Azure.
    We will explore the following two ways to learn about the different perspectives
    of infrastructure provisioning:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Azure 上部署自动扩展的 Kubernetes 集群有多种方式。我们将探讨以下两种方式，以了解基础设施部署的不同视角：
- en: Azure Machine Learning workspace portal
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure 机器学习工作区门户
- en: Azure SDK
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure SDK
- en: Let's look into the easiest way first; that is, using the Azure Machine Learning
    workspace to provision an Azure Kubernetes cluster for production.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先看看最简单的方法；那就是使用 Azure 机器学习工作区为生产部署 Azure Kubernetes 集群。
- en: Azure Machine Learning workspace
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Azure 机器学习工作区
- en: 'In this section, we will provision an Azure Kubernetes cluster using the Azure
    Machine Learning workspace. Perform the following steps:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用 Azure 机器学习工作区提供 Azure Kubernetes 集群。请执行以下步骤：
- en: Go to the Azure Machine Learning workspace and then go to the **Compute** section,
    which presents options for creating different types of computes. Select **Inference
    clusters** and click **Create**, as shown in the following screenshot:![Figure
    10.1 – Provisioning inference clusters
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往Azure机器学习工作区，然后转到**计算**部分，该部分提供了创建不同类型计算选项。选择**推理集群**并点击**创建**，如下截图所示：![图10.1
    – 部署推理集群
- en: '](img/B16572_10_01.jpg)'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片](img/B16572_10_01.jpg)'
- en: Figure 10.1 – Provisioning inference clusters
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图10.1 – 部署推理集群
- en: Clicking the **Create** button will present various compute options you can
    use to create a Kubernetes service. You will be prompted to select a **Region**,
    which is where your compute will be provisioned, and some configuration so that
    you can provision in terms of cores, RAM, and storage. Select a suitable option
    (it is recommended that you select **Standard_D2_v4** as a cost-optimal choice
    for this experiment), as shown in the following screenshot:![Figure 10.2 – Selecting
    a suitable compute option
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**创建**按钮将显示您可以使用来创建Kubernetes服务的各种计算选项。您将被提示选择一个**区域**，这是您的计算将被部署的位置，以及一些配置，以便您可以根据核心、RAM和存储来部署。选择一个合适的选项（建议您选择**Standard_D2_v4**作为此实验的成本最优选择），如下截图所示：![图10.2
    – 选择合适的计算选项
- en: '](img/B16572_10_02.jpg)'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片](img/B16572_10_02.jpg)'
- en: Figure 10.2 – Selecting a suitable compute option
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图10.2 – 选择合适的计算选项
- en: After selecting a suitable compute option, you will be prompted to `'prod-aks'`
    - meaning **production Azure Kubernetes Service**), set **Cluster purpose** to
    **Production** (as we are setting up for production), choose **Number of nodes**
    for the cluster, and select the **Basic** option for **Network configuration**.
    Omit **Enable SSL configuration** for simplicity. However, it is recommended to
    enable SSL connections for more security in production, as per your needs:![Figure
    10.3 - Configure Settings
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择合适的计算选项后，您将被提示输入`'prod-aks'`（意味着**生产Azure Kubernetes服务**），将**集群用途**设置为**生产**（因为我们正在为生产设置），选择集群的**节点数量**，并选择**网络配置**的**基本**选项。为了简单起见，省略**启用SSL配置**。然而，根据您的需求，建议在生产中启用SSL连接，以提高安全性：![图10.3
    - 配置设置
- en: '](img/B16572_10_03.jpg)'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片](img/B16572_10_03.jpg)'
- en: Figure 10.3 - Configure Settings
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图10.3 - 配置设置
- en: Click the **Create** button to provision the Kubernetes cluster for production.
    It will take around 15 minutes to create and provision the compute for production
    use:![Figure 10.4 – Provisioned Kubernetes cluster
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**创建**按钮以部署用于生产的Kubernetes集群。创建和部署用于生产的计算大约需要15分钟：![图10.4 – 部署的Kubernetes集群
- en: '](img/B16572_10_04.jpg)'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片](img/B16572_10_04.jpg)'
- en: Figure 10.4 – Provisioned Kubernetes cluster
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图10.4 – 部署的Kubernetes集群
- en: Once your AKS cluster has been provisioned, you will see a running Kubernetes
    cluster with the name you provided for the compute (for example, `prod-aks`),
    as shown in the preceding screenshot.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦您的AKS集群已部署，您将看到一个运行中的Kubernetes集群，其名称与您为计算提供的名称（例如，`prod-aks`）相匹配，如前一个截图所示。
- en: Azure Machine Learning SDK
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Azure机器学习SDK
- en: 'An alternative way of creating and provisioning a Kubernetes cluster on Azure
    is by using the Azure Machine Learning SDK. You can use a premade script named
    `create_aks_cluster.py`, which can be found in the `10_Production_Release` folder.
    The prerequisite to running the `create_aks_cluster.py` script is the `config.json`
    (it can be downloaded from the Azure Machine Learning workspace) file for your
    Azure Machine Learning workspace, as shown in the following screenshot:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在Azure上创建和部署Kubernetes集群的另一种方法是使用Azure机器学习SDK。您可以使用名为`create_aks_cluster.py`的预置脚本，该脚本位于`10_Production_Release`文件夹中。运行`create_aks_cluster.py`脚本的前提是您的Azure机器学习工作区的`config.json`（可以从Azure机器学习工作区下载）文件，如下截图所示：
- en: '![Figure 10.5 – Fetching the config file from your Azure Machine Learning workspace'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '![图10.5 – 从您的Azure机器学习工作区获取配置文件'
- en: '](img/B16572_10_05.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/B16572_10_05.jpg)'
- en: Figure 10.5 – Fetching the config file from your Azure Machine Learning workspace
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.5 – 从您的Azure机器学习工作区获取配置文件
- en: 'Go to your Azure Machine Learning workspace and click on `config.json` file
    into the same directory (`10_Production_Release`) that the `create_aks_cluster.py`
    file is in, as shown here:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 前往您的Azure机器学习工作区，并点击与`create_aks_cluster.py`文件相同的目录（`10_Production_Release`）中的`config.json`文件，如下所示：
- en: '[PRE0]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'With this, you are now set to run the script (`create_aks_cluster.py`) to create
    AKS compute for production deployments. Let''s look at the `create_aks_cluster.py`
    script:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种方式，您现在可以运行脚本 (`create_aks_cluster.py`) 来创建用于生产部署的 AKS 计算资源。让我们看看 `create_aks_cluster.py`
    脚本：
- en: 'Import the necessary functions from the `azureml.core` SDK or library. Functions
    such as `Workspace`, `Model`, `ComputeTarget`, `AksCompute`, and so on will be
    used to provision your AKS cluster:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 `azureml.core` SDK 或库中导入必要的函数。例如 `Workspace`、`Model`、`ComputeTarget`、`AksCompute`
    等函数将用于配置您的 AKS 集群：
- en: '[PRE1]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'By importing the necessary functions, you can start using them by connecting
    to your Azure Machine Learning workspace and creating the `ws` object. Do this
    by using the `Workspace` function and pointing it to your `config.json` file,
    like so:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过导入必要的函数，您可以通过连接到您的 Azure Machine Learning 工作区并创建 `ws` 对象来开始使用它们。这样做是通过使用 `Workspace`
    函数并将它指向您的 `config.json` 文件来完成的，如下所示：
- en: '[PRE2]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: By default, the `from_config()` function looks for the `config.json` file in
    same directory where you are executing the `create_aks.py` file. If your `config.json`
    file is in some other location, then point to the location of the file in the
    `from_config()` function. After successfully executing the `workspace.from_config()`
    function, you will see the workspace's name, resource group, and location printed
    out.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 默认情况下，`from_config()` 函数会在您执行 `create_aks.py` 文件相同的目录中查找 `config.json` 文件。如果您的
    `config.json` 文件在其他位置，请在 `from_config()` 函数中指定该文件的位置。在成功执行 `workspace.from_config()`
    函数后，您将看到工作区的名称、资源组和位置被打印出来。
- en: 'Next, we will create an AKS Kubernetes cluster for production deployments.
    Start by choose a name for your AKS cluster (reference it to the `aks_name` variable),
    such as `prod-aks`. The script will check if a cluster with the chosen name already
    exists. We can use the `try` statement to check whether the AKS target with the
    chosen name exists by using the `ComputeTarget()` function. It takes the `workspace`
    object and `aks_name` as parameters. If a cluster is found with the chosen name,
    it will print the cluster that was found and stop execution. Otherwise, a new
    cluster will be created using the `ComputeTarget.create()` function, which takes
    the `provisioning` config with the default configuration:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将为生产部署创建一个 AKS Kubernetes 集群。首先为您的 AKS 集群选择一个名称（将其引用到 `aks_name` 变量），例如
    `prod-aks`。脚本将检查是否已存在具有所选名称的集群。我们可以使用 `try` 语句通过 `ComputeTarget()` 函数检查是否已存在具有所选名称的
    AKS 目标。它接受 `workspace` 对象和 `aks_name` 作为参数。如果找到具有所选名称的集群，它将打印找到的集群并停止执行。否则，将使用
    `ComputeTarget.create()` 函数创建一个新的集群，该函数接受具有默认配置的 `provisioning` 配置：
- en: '[PRE3]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: After successfully executing the preceding code, a new cluster with the chosen
    name (that is, `prod-aks`) will be created. Usually, creating a new cluster takes
    around 15 minutes. Once the cluster has been created, it can be spotted in the
    Azure Machine Learning workspace, as we saw in *Figure 10.4*. Now that we have
    set up the prerequisites for enhancing the CI/CD pipeline for our production environment,
    let's start setting it up!
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在成功执行前面的代码后，将创建一个具有所选名称的新集群（即 `prod-aks`）。通常，创建新集群需要大约 15 分钟。一旦集群创建完成，您可以在 Azure
    Machine Learning 工作区中找到它，正如我们在 *图 10.4* 中所看到的。现在我们已经为增强生产环境 CI/CD 管道设置了先决条件，让我们开始设置它！
- en: Setting up our production environment in the CI/CD pipeline
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 CI/CD 管道中设置我们的生产环境
- en: 'Perform the following steps to set up a production environment in the CI/CD
    pipeline:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以在 CI/CD 管道中设置生产环境：
- en: Go to the Azure DevOps project you worked on previously and revisit the **Pipelines**
    | **Releases** section to view your **Port Weather ML Pipeline**. We will enhance
    this pipeline by creating a production stage.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往您之前工作的 Azure DevOps 项目，并重新访问 **Pipelines** | **Releases** 部分，以查看您的 **Port
    Weather ML Pipeline**。我们将通过创建生产阶段来增强此管道。
- en: Click on the **Edit** button to get started and click on **Add** under the **DEV
    TEST** stage, as shown in the following screenshot:![Figure 10.6 – Adding a new
    stage
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **编辑** 按钮开始，然后在 **DEV TEST** 阶段下点击 **添加**，如图所示：![Figure 10.6 – 添加新阶段
- en: '](img/B16572_10_06.jpg)'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![img/B16572_10_06.jpg](img/B16572_10_06.jpg)'
- en: Figure 10.6 – Adding a new stage
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Figure 10.6 – 添加新阶段
- en: Clicking the `production` or `PROD` and save it, as shown in the following screenshot:![Figure
    10.7 – Adding and saving the production stage (PROD)
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 `production` 或 `PROD` 并保存，如图所示：![Figure 10.7 – 添加并保存生产阶段 (PROD)
- en: '](img/B16572_10_07.jpg)'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![img/B16572_10_07.jpg](img/B16572_10_07.jpg)'
- en: Figure 10.7 – Adding and saving the production stage (PROD)
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Figure 10.7 – 添加并保存生产阶段 (PROD)
- en: A new production stage named **PROD** will be created. Now, you can configure
    jobs and processes at the production stage. To configure jobs for **PROD**, click
    on the 1 job, 0 task link (as shown in the preceding screenshot, in the **PROD**
    stage) in the **PROD** stage. You will be directed to the **Tasks** section, which
    is where you can add jobs to the **PROD** stage. In this stage, we will deploy
    models from our Azure Machine Learning workspace, so we will connect to it using
    the AzureML Model Deploy template we used previously in [*Chapter 7*](B16572_07_Final_JM_ePub.xhtml#_idTextAnchor143),
    *Building Robust CI and CD Pipelines*. Click on the **+** sign on the right-hand
    side of the **Agent job** section to add a task, as shown here:![Figure 10.8 –
    Adding an AzureML Model Deploy task
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将创建一个新的名为**PROD**的生产阶段。现在，你可以在生产阶段配置作业和流程。要为**PROD**配置作业，点击**PROD**阶段中的1个作业，0个任务链接（如前述截图所示，在**PROD**阶段），你将被导向**任务**部分，你可以在这里将作业添加到**PROD**阶段。在这个阶段，我们将从我们的Azure机器学习工作区部署模型，因此我们将使用我们在[*第7章*](B16572_07_Final_JM_ePub.xhtml#_idTextAnchor143)，*构建健壮的CI和CD流水线*中之前使用的AzureML模型部署模板来连接它。点击**代理作业**部分右侧的**+**号来添加一个任务，如下所示：![图10.8
    – 添加AzureML模型部署任务
- en: '](img/B16572_10_08.jpg)'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片 B16572_10_08.jpg]'
- en: Figure 10.8 – Adding an AzureML Model Deploy task
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图10.8 – 添加AzureML模型部署任务
- en: Search for the `mlops_ws`) and point to **Model Artifact** as your model source.
    We are doing this because we will be using the Model Artifacts we trained in [*Chapter
    4*](B16572_04_Final_JM_ePub.xhtml#_idTextAnchor074), *Machine Learning Pipelines*.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 搜索`mlops_ws`并指向**模型工件**作为你的模型源。我们这样做是因为我们将使用我们在[*第4章*](B16572_04_Final_JM_ePub.xhtml#_idTextAnchor074)，*机器学习流水线*中训练的模型工件。
- en: Next, point to your inference configuration file from the Azure DevOps repository,
    as shown in the following screenshot. The inference configuration file represents
    the configuration settings for a custom environment that's used for deployment.
    We will use the same inference `Config.yml` file that we used for the `inferenceConfig.yml`
    file.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，从Azure DevOps仓库指向你的推理配置文件，如下截图所示。推理配置文件代表用于部署的定制环境的配置设置。我们将使用与`inferenceConfig.yml`文件相同的推理`Config.yml`文件。
- en: Next, we will configure `prod-aks`), name your deployment or web service (for
    example, `prod-webservice`), and select the **Deployment Configuration** file
    from the Azure DevOps repository that's connected to the pipeline, as shown here:![Figure
    10.10 – Configuring your deployment information
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将配置`prod-aks`），命名你的部署或网络服务（例如，`prod-webservice`），并从与流水线连接的Azure DevOps仓库中选择**部署配置**文件，如下所示：![图10.10
    – 配置你的部署信息
- en: '](img/B16572_10_10.jpg)'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片 B16572_10_10.jpg]'
- en: '[PRE4]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Select the `AksDeploymentConfig.yml` file as our **Deployment Configuration**
    file. Now, hit the **Save** button to set up the **PROD** environment.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择`AksDeploymentConfig.yml`文件作为我们的**部署配置**文件。现在，点击**保存**按钮来设置**PROD**环境。
- en: With that, you have successfully set up the production environment and integrated
    it with your CI/CD pipeline for automation. Now, let's test the pipeline by executing
    it.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这些，你已经成功设置了生产环境并将其与你的CI/CD流水线集成以实现自动化。现在，让我们通过执行它来测试流水线。
- en: Testing our production-ready pipeline
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试我们的生产就绪流水线
- en: 'Congratulations on setting up the production pipeline! Next, we will test its
    robustness. One great way to do this is to create a new release and observe and
    study whether the production pipeline successfully deploys the model to production
    (in the production Kubernetes cluster setup containing the pipeline). Follow these
    steps to test the pipeline:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜你成功设置了生产流水线！接下来，我们将测试其鲁棒性。一种很好的方法是创建一个新的版本，观察并研究生产流水线是否成功将模型部署到生产环境（包含流水线的生产Kubernetes集群设置）。按照以下步骤测试流水线：
- en: First, create a new release, go to the **Pipelines** | **Releases** section,
    select your previously created pipeline (for example, **Port Weather ML Pipeline**),
    and click on the **Create Release** button at the top right-hand side of the screen
    to initiate a new release, as shown here:![Figure 10.11 – Create a new release
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，创建一个新的版本，转到**流水线** | **发布**部分，选择你之前创建的流水线（例如，**Port Weather ML流水线**），然后点击屏幕右上角的**创建发布**按钮以启动一个新的发布，如下所示：![图10.11
    – 创建一个新的发布
- en: '](img/B16572_10_11.jpg)'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片 B16572_10_11.jpg]'
- en: Figure 10.11 – Create a new release
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图10.11 – 创建一个新的发布
- en: Select the artifacts you would like to deploy in the pipeline (for example,
    `Learn_MLOps repo`, `_scaler`, and `support-vector-classifier` model and select
    their versions. Version 1 is recommended for testing PROD deployments for the
    first time), and click on the **Create** button at the top right-hand side of
    the screen, as shown in the preceding screenshot. Once you've done this, a new
    release is initiated, as shown in the following screenshot:![Figure 10.12 – New
    release’s execution
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在屏幕右上角选择你想要在流水线中部署的工件（例如，`Learn_MLOps repo`，`_scaler`和`support-vector-classifier`模型，并选择它们的版本。建议第一次测试PROD部署时使用版本1），然后点击屏幕右上角的**创建**按钮，如图所示。完成此操作后，将启动一个新的版本，如图所示：![Figure
    10.12 – New release’s execution
- en: '](img/B16572_10_12.jpg)'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![img/B16572_10_12.jpg]'
- en: Figure 10.12 – New release's execution
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图10.12 – 新版本执行
- en: After executing the pipeline, both the **DEV TEST** and **PROD** stages will
    be deployed (for example, **Release-5**, as shown in the preceding screenshot).
    You can check each step in each stage by monitoring the logs of each step of any
    stage (DEV TEST or PROD) while the pipeline release is in progress, until the
    pipeline is deployed successfully. You can also check the logs of previous releases.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在执行流水线后，**DEV TEST**和**PROD**阶段将被部署（例如，**Release-5**，如图所示）。在流水线发布进行中时，你可以通过监控任何阶段（DEV
    TEST或PROD）的每个步骤的日志来检查每个阶段的每个步骤，直到流水线成功部署。你还可以检查以前版本的日志。
- en: Upon successfully working on a release, both the **DEV TEST** and **PROD** stages
    will be deployed using CI and CD. You must ensure that the pipeline is robust.
    Next, we can customize the pipeline further by adding custom triggers that will
    automate the pipeline without any human supervision. Automating CI/CD pipelines
    without any human supervision can be risky but may have advantages, such as real-time
    continuous learning (monitoring and retraining models) and faster deployments.
    It is good to know how to automate the CI/CD pipeline without any human supervision
    in the loop. Note that it is not recommended in many cases as there is a lot of
    room for error. In some cases, it may be useful – it really depends on your use
    case and ML system goals. Now, let's look at triggers for full automation.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在成功完成版本发布后，**DEV TEST**和**PROD**阶段将分别使用CI和CD进行部署。你必须确保流水线是健壮的。接下来，我们可以通过添加自定义触发器进一步自定义流水线，这些触发器将自动化流水线而无需人工监督。在没有人工监督的情况下自动化CI/CD流水线可能会有风险，但可能具有优势，例如实时持续学习（监控和重新训练模型）和更快的部署。了解如何在没有人工监督的情况下自动化CI/CD流水线是很有用的。请注意，在许多情况下并不推荐这样做，因为错误的空间很大。在某些情况下，它可能是有用的——这完全取决于你的用例和机器学习系统目标。现在，让我们看看全自动化触发器。
- en: Configuring pipeline triggers for automation
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置流水线触发器以实现自动化
- en: 'In this section, we will configure three triggers based on artifacts that we
    have already connected to the pipeline. The triggers we will set up are as follows:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将基于我们已经连接到流水线的工件配置三个触发器。我们将设置的触发器如下：
- en: '**Git trigger**: For making code changes to the master branch.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Git触发器**：用于对master分支进行代码更改。'
- en: '**Artifactory trigger**: For when a new model or artifact is created or trained.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Artifactory触发器**：用于创建或训练新模型或工件时。'
- en: '**Schedule trigger**: A weekly periodic trigger.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**计划触发器**：每周周期性触发。'
- en: Let's look at each of these pipeline triggers in detail.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细看看这些流水线触发器。
- en: Setting up a Git trigger
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置Git触发器
- en: 'In teams, it is common to set a trigger for deployment when code changes are
    made to a certain branch in the repository. For example, when code changes are
    made to the **master** branch or the **develop** branch, CI/CD pipelines are triggered
    to deploy the application to the PROD or DEV TEST environments, respectively.
    When a pull request is made to merge code in the **master** or **develop** branch,
    the QA expert or product manager accepts the pull request in order to merge with
    the respective branch. Upon making code changes to the master or develop branch,
    a trigger is generated to create a new release in the pipeline. Follow these steps
    to create a trigger for the master branch for the experiment, as shown in the
    following screenshot:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在团队中，当代码库中某个分支发生代码更改时，通常会设置一个部署触发器。例如，当对**master**分支或**develop**分支进行代码更改时，CI/CD流水线会被触发，分别将应用程序部署到PROD或DEV
    TEST环境。当向**master**或**develop**分支提交合并请求时，QA专家或产品经理会接受合并请求以与相应的分支合并。在master或develop分支上做出代码更改后，会生成一个触发器以在流水线中创建一个新的版本。按照以下步骤为实验的master分支创建触发器，如图所示：
- en: Go to the **Pipelines** | **Releases** section and select your pipeline (for
    example, **Port Weather ML pipeline**). Then, click **Edit**:![Figure 10.13 –
    Setting up continuous deployment triggers (git triggers)
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入 **管道** | **发布** 部分，选择您的管道（例如，**Port Weather ML 管道**）。然后，点击 **编辑**：![图 10.13
    – 设置持续部署触发器（Git 触发器）
- en: '](img/B16572_10_13.jpg)'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 10.13 – 设置持续部署触发器（Git 触发器）](img/B16572_10_13.jpg)'
- en: Figure 10.13 – Setting up continuous deployment triggers (git triggers)
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 10.13 – 设置持续部署触发器（Git 触发器）
- en: You will be directed to a portal where you can edit your pipeline (for example,
    **Port Weather ML pipeline**) so that you can configure continuous deployment
    triggers for your artifacts.
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您将被引导到一个门户，您可以在其中编辑您的管道（例如，**Port Weather ML 管道**），以便您可以为您的工件配置持续部署触发器。
- en: To set up a Git trigger for the master branch (when changes are made to the
    master branch, a new release is triggered), click on the **Trigger** icon (thunder
    icon) and move the on/off switch button from disabled to enabled. This will enable
    the continuous deployment trigger.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要为 master 分支设置 Git 触发器（当 master 分支发生更改时，将触发新发布），点击 **触发器** 图标（雷声图标）并将开关按钮从禁用状态移动到启用状态。这将启用持续部署触发器。
- en: Lastly, add a branch filter and point to the branch that you would like to set
    up a trigger for – in this case, the master branch – as shown in the preceding
    screenshot. Save your changes to set up the Git trigger.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，添加一个分支过滤器并指向您想要设置触发器的分支 – 在这种情况下，是 master 分支 – 如前图所示。保存您的更改以设置 Git 触发器。
- en: By implementing these steps, you have set up a continuous deployment trigger
    to initiate a new release when changes are made to the master branch.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 通过实施这些步骤，您已设置了一个持续部署触发器，以便在 master 分支发生更改时启动新发布。
- en: Setting up an Artifactory trigger
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置 Artifactory 触发器
- en: 'For ML applications, Artifactory triggers are quite useful. When new models
    or artifacts (files) have been trained by the Data Scientists in the team, it
    is useful to deploy those models to a test environment, and then eventually to
    production if they are promising or better than the previous models or trigger.
    Follow these steps to set up a continuous deployment trigger that will create
    a new release for the pipeline when a new model is trained, as shown in the following
    screenshot:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 对于机器学习应用程序，Artifactory 触发器非常有用。当团队中的数据科学家训练了新的模型或工件（文件）时，将那些模型部署到测试环境，并在有希望或优于先前模型或触发器的情况下最终部署到生产环境是有用的。按照以下步骤设置一个持续部署触发器，以便在训练新模型时为管道创建新发布，如图中所示：
- en: Go to the **Pipelines** | **Releases** section and select your pipeline (for
    example, **Port Weather ML pipeline**). Then, click **Edit**:![Figure 10.14 –
    Setting up CD for Artifact triggers (SVC model)
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入 **管道** | **发布** 部分，选择您的管道（例如，**Port Weather ML 管道**）。然后，点击 **编辑**：![图 10.14
    – 为工件触发器设置 CD（SVC 模型）
- en: '](img/B16572_10_14.jpg)'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 10.14 – 为工件触发器设置 CD（SVC 模型）](img/B16572_10_14.jpg)'
- en: Figure 10.14 – Setting up CD for Artifact triggers (SVC model)
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 10.14 – 为工件触发器设置 CD（SVC 模型）
- en: Upon clicking the **Edit** button, you will be directed to a portal where you
    can edit your pipeline, as shown in the preceding screenshot.
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 点击 **编辑** 按钮后，您将被引导到一个门户，您可以在其中编辑您的管道，如图中所示。
- en: To set up an Artifact trigger for your model, click on your choice of model,
    such as **Support Vector Classifier** (**SVC**), and enable **Continuous deployment
    trigger**. In the preceding screenshot , a trigger has been enabled for a model
    (SVC). Whenever a new SVC model is trained and registered to the model registry
    that's connected to your Azure Machine Learning workspace, a new release will
    be triggered to deploy the new model via the pipeline.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要为您的模型设置工件触发器，点击您选择模型，例如 **支持向量机分类器**（**SVC**），并启用 **持续部署触发器**。在前面的截图，已为模型（SVC）启用了一个触发器。每当在连接到您的
    Azure Machine Learning 工作区的模型注册表中训练并注册新的 SVC 模型时，将通过管道触发新发布以部署新模型。
- en: Lastly, save your changes to set up an Artifact trigger for the SVC model. You
    have a continuous deployment trigger set up to initiate a new release when a new
    SVC model is trained and registered on your Azure Machine Learning workspace.
    The pipeline will fetch the new model and deploy it to the DEV TEST and PROD environments.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，保存您的更改以设置 SVC 模型的工件触发器。您已设置了一个持续部署触发器，以便在您的 Azure Machine Learning 工作区上训练并注册新的
    SVC 模型时启动新发布。该管道将检索新模型并将其部署到开发测试和产品环境中。
- en: By implementing these steps, you have a continuous deployment trigger set up
    to initiate a new pipeline release when a new artifact is created or registered
    in your Azure Machine Learning workspace.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 通过实施这些步骤，您已设置了一个持续部署触发器，当在您的 Azure Machine Learning 工作区中创建或注册新工件时，将启动新的管道发布。
- en: Setting up a Schedule trigger
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置计划触发器
- en: 'Now, we will set up a time-specific Schedule trigger for the pipeline. This
    kind of trigger is useful for keeping the system healthy and updated via periodic
    new releases. Schedule triggers create new releases at set time intervals. We
    will set up a Schedule trigger for every week on Monday at 11:00 A.M. At this
    time, a new release is triggered to deploy the recent version of the SVC model
    to both the DEV TEST and PROD environments. Follow these steps to set up a Schedule
    trigger:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将为管道设置一个特定时间的时间触发计划。这种触发器对于通过定期的新发布保持系统健康和更新非常有用。计划触发器在设定的时间间隔创建新发布。我们将为每周星期一上午
    11:00 设置一个计划触发器。在此时间，将触发一个新发布，将 SVC 模型的最新版本部署到开发测试和 PROD 环境。按照以下步骤设置计划触发器：
- en: Go to the **Pipelines** | **Releases** section and select your pipeline (for
    example, **Port Weather ML pipeline**). Then, click **Edit**, as shown in the
    following screenshot:![Figure 10.15 – Setting up a schedule trigger
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往**管道** | **发布**部分并选择您的管道（例如，**Port Weather ML 管道**）。然后，点击**编辑**，如图所示：![图 10.15
    – 设置计划触发器
- en: '](img/B16572_10_15.jpg)'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![img/B16572_10_15.jpg](img/B16572_10_15.jpg)'
- en: Figure 10.15 – Setting up a schedule trigger
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 10.15 – 设置计划触发器
- en: Upon clicking the **Edit** button, you will be directed to a portal where you
    can edit your pipeline.
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 点击**编辑**按钮后，您将被引导到一个门户，您可以在那里编辑您的管道。
- en: To set up a scheduled trigger for the pipeline, click on **Schedule Set** and
    enable **Scheduled release trigger**. Then, select times when you want to trigger
    a release. For example, in the preceding screenshot, a trigger has been enabled
    for every week on Monday at 11:00 A.M.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要为管道设置计划触发器，请点击**计划设置**并启用**计划发布触发器**。然后，选择您希望触发发布的日期和时间。例如，在先前的屏幕截图中，每周星期一上午
    11:00 已启用触发器。
- en: Lastly, save your changes to set up a set up Schedule trigger trigger for the
    pipeline.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，保存您的更改以设置管道的计划触发器。
- en: By implementing these steps, you have a continuous deployment trigger set up
    to initiate a new pipeline release at a set time interval.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 通过实施这些步骤，您已设置了一个持续部署触发器，在设定的时间间隔内启动新的管道发布。
- en: Congratulations on setting up Git, Artifact, and Schedule triggers. These triggers
    enable full automation for the pipeline. The pipeline has been set up and can
    now successfully test and deploy models. You also have the option to semi-automate
    the pipeline by adding a human or **Quality Assurance** (**QA**) expert to approve
    each stage in the pipeline. For example, after the test stage, an approval can
    be made by the QA expert so that you can start production deployment if everything
    was successful in the test stage. As a QA expert, it is vital to monitor your
    CI/CD pipeline. In the next section, we'll look at some best practices when it
    comes to managing pipeline releases.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜您设置 Git、工件和计划触发器。这些触发器使管道实现完全自动化。管道已设置，现在可以成功测试和部署模型。您还可以选择通过添加人工或**质量保证**（**QA**）专家来部分自动化管道，以在每个管道阶段获得批准。例如，在测试阶段之后，QA
    专家可以进行批准，以便在测试阶段一切顺利时开始生产部署。作为 QA 专家，监控您的 CI/CD 管道至关重要。在下一节中，我们将探讨在管理管道发布时的最佳实践。
- en: Pipeline release management
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管道发布管理
- en: 'Releases in the CI/CD pipelines allow your team to automate fully and continuously
    deliver software to your customers faster and with lower risk. Releases allow
    you to test and deliver your software in multiple stages of production or set
    up semi-automated processes with approvals and on-demand deployments. It is vital
    to monitor and manage these releases. We can manage releases by accessing the
    pipeline from **Pipelines** | **Releases** and selecting our CI/CD pipeline (for
    example, **Port Weather ML Pipeline**), as shown in the following screenshot:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: CI/CD 管道中的发布允许您的团队完全自动化，并以更快的速度、更低的风险向客户交付软件。发布允许您在生产的多个阶段测试和交付软件，或设置带有批准和按需部署的半自动化流程。监控和管理这些发布至关重要。我们可以通过从**管道**
    | **发布**访问管道并选择我们的 CI/CD 管道（例如，**Port Weather ML Pipeline**）来管理发布，如图所示：
- en: '![Figure 10.16 – Pipeline Release Management'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 10.16 – 管道发布管理'
- en: '](img/B16572_10_16.jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/B16572_10_16.jpg](img/B16572_10_16.jpg)'
- en: Figure 10.16 – Pipeline Release Management
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.16 – 管道发布管理
- en: 'Here, you can keep track of all the releases and their history and perform
    operations for each release, such as redeploying, abandoning, checking logs, and
    so on. You can see the releases shown in the following screenshot. By clicking
    on individual releases (for example, **Release 4**), we can check which model
    and artifacts were deployed in the release and how the release was triggered (manual
    or using automatic triggers). It provides end-to-end traceability of the pipeline.
    This information is crucial for the governance and compliance of the ML system:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，您可以跟踪所有版本及其历史记录，并对每个版本执行操作，例如重新部署、放弃、检查日志等。您可以看到以下截图中的版本。通过点击单个版本（例如，**版本
    4**），我们可以检查在版本中部署了哪些模型和工件以及版本是如何触发的（手动或使用自动触发器）。它提供了管道的端到端可追溯性。这些信息对于ML系统的治理和合规至关重要：
- en: '![Figure 10.17 – Inspecting a release'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '![图10.17 – 检查版本'
- en: '](img/B16572_10_17.jpg)'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/B16572_10_17.jpg]'
- en: Figure 10.17 – Inspecting a release
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.17 – 检查版本
- en: 'Prevention is better than finding a cure. Just as we conduct incident reviews
    after a failure, it helps to prevent possible failures by conducting post-release
    reviews after deploying a new service or model. A thorough analysis of the release
    after deployment can enable us to understand answers to critical questions, such
    as the following:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 预防胜于治疗。正如我们在失败后进行事件审查一样，在部署新服务或模型后进行发布后审查有助于通过预防可能的失败。对部署后的发布进行彻底分析可以使我们理解以下关键问题的答案：
- en: What works and what doesn't during a release?
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在发布过程中，哪些是有效的，哪些是无效的？
- en: Were there any roadblocks with the release?
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发布过程中是否遇到了任何障碍？
- en: Are there any unclear processes that you could solve and make more explainable
    for the next release?
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 是否存在可以解决并使下一个版本更具可解释性的不明确流程？
- en: Thoroughly understanding these questions post-release can help you improve and
    iterate on your strategy and develop better release management practices.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在发布后彻底理解这些问题可以帮助您改进和迭代您的策略，并发展更好的发布管理实践。
- en: Toward continuous monitoring
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向持续监控迈进
- en: With that, we have set up a fully automated and robust pipeline. So far, we
    have successfully implemented the deployment part or module in the MLOps workflow
    (as we discussed in [*Chapter 1*](B16572_01_Final_JM_ePub.xhtml#_idTextAnchor015),
    *Fundamentals of MLOps Workflow*). It is vital to monitor the deployed ML model
    and service in real time to understand the system's performance, as this helps
    maximize its business impact. One of the reasons ML projects are failing to bring
    value to businesses is because of the lack of trust and transparency in their
    decision making. Building trust into AI systems is vital these days, especially
    if we wish to adapt to the changing environment, regulatory frameworks, and dynamic
    customer needs. Continuous monitoring will enable us to monitor the ML system's
    performance and build trust into AIs to maximize our business value. In the next
    chapter, we will learn about the monitoring module in the MLOps workflow and how
    it facilitates continuous monitoring.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这样，我们已经建立了一个完全自动化且稳健的流程。到目前为止，我们已经成功地在MLOps工作流中实现了部署部分或模块（正如我们在[*第一章*](B16572_01_Final_JM_ePub.xhtml#_idTextAnchor015)，*MLOps工作流基础*中讨论的那样）。实时监控已部署的ML模型和服务对于理解系统的性能至关重要，因为这有助于最大化其商业影响。ML项目未能为业务带来价值的一个原因是因为它们在决策过程中缺乏信任和透明度。在当今时代，将信任融入AI系统至关重要，尤其是如果我们希望适应不断变化的环境、监管框架和动态的客户需求。持续的监控将使我们能够监控ML系统的性能，并将信任融入AI，以最大化我们的商业价值。在下一章中，我们将学习MLOps工作流中的监控模块以及它是如何促进持续监控的。
- en: Summary
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we covered the essential fundamentals of the CI/CD pipeline
    and production environment. We did some hands-on implementation to set up the
    production infrastructure and then set up processes in the production environment
    of the pipeline for production deployments. We tested the production-ready pipeline
    to test its robustness. To take things to the next level, we fully automated the
    CI/CD pipeline using various triggers. Lastly, we looked at release management
    practices and capabilities and discussed the need to continuous monitor the ML
    system. A key takeaway is that *the pipeline is the product, not the model*. It
    is better to focus on building a robust and efficient pipeline more than building
    the best model.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了CI/CD管道和生成环境的基本要素。我们进行了一些实际操作来搭建生产基础设施，然后在管道的生产环境中设置了流程以进行生产部署。我们测试了准备就绪的生产管道以检验其鲁棒性。为了将事情提升到下一个层次，我们使用各种触发器完全自动化了CI/CD管道。最后，我们探讨了发布管理实践和能力，并讨论了持续监控ML系统的必要性。一个关键的观点是*管道是产品，而不是模型*。比起构建最佳模型，更应专注于构建一个强大且高效的管道。
- en: In the next chapter, we will explore the MLOps workflow monitoring module and
    learn more about the game-changing explainable monitoring framework.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨MLOps工作流程监控模块，并深入了解这个颠覆性的可解释监控框架。
