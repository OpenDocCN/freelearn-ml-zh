- en: '*Chapter 4*: Predicting Numerical Values with Linear Regression'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Predicting numerical measures could be extremely valuable for companies that
    need to plan their strategies in terms of budgets and resources. In most industries,
    predicting numbers could bring huge business advantages over their competition,
    and also enable new business scenarios.
  prefs: []
  type: TYPE_NORMAL
- en: Born from the statistics discipline, linear regression became one of the most
    well-known machine learning techniques to perform this kind of task. In data science,
    linear regression models are used to find and quantify the relationships between
    causes and effects among different variables. This kind of model can be very useful
    in different business scenarios where it's needed to make predictions on numerical
    measures.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we'll go through all the steps required to build a linear regression
    model while leveraging BigQuery ML, which simplifies and accelerates all the stages
    of the development process.
  prefs: []
  type: TYPE_NORMAL
- en: 'By following a gradual and incremental approach, we''ll cover the following
    topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing the business scenario
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Discovering linear regression
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring and understanding the dataset
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Training the linear regression model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Evaluating the linear regression model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Utilizing the linear regression model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Drawing business conclusions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's get started!
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter requires you to access to a web browser and be able to leverage
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A GCP account to access Google Cloud Console
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A GCP project to host the BigQuery datasets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, let's dive into the analysis and development parts of our BigQuery ML linear
    regression model.
  prefs: []
  type: TYPE_NORMAL
- en: 'Check out the following video to see the Code in Action: [https://bit.ly/2Rru9wA](https://bit.ly/2Rru9wA)'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing the business scenario
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Imagine being one of the business analysts that works for a large company in
    New York City. Your company manages the nation''s largest bike sharing program.
    It leverages 10,000 bikes and has realized 600 stations across different New York
    areas: Manhattan, Brooklyn, Queens, and Jersey City.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a picture from a bike sharing station in New York City:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.1 – New York City bike sharing service by Citi Bike'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16722_04_001.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.1 – New York City bike sharing service by Citi Bike
  prefs: []
  type: TYPE_NORMAL
- en: Thanks to the vision and spirit of innovation of the company, huge amounts of
    data has been collected since 2013 and is still updated every day. This data contains
    a lot of information about the usage of the service and can be used to extract
    very interesting statistics.
  prefs: []
  type: TYPE_NORMAL
- en: At the time of writing, the bike sharing service is available for all the customers
    that have signed up for a weekly, monthly, or yearly subscription. However, this
    is not accessible to and convenient for people that only stay for a few days in
    the city, such as tourists or business travelers.
  prefs: []
  type: TYPE_NORMAL
- en: Considering the large number of people staying in New York City for only a few
    days, the company wants people to be able to rent a bike for only a few hours.
    For this reason, management is thinking about the possibility to enable a new
    pay-as-you-go rental option.
  prefs: []
  type: TYPE_NORMAL
- en: The company's goal is to create a fully digital experience for this segment
    of customers and is thinking about the development of a new mobile application.
    If the customer indicates their departure and arrival station in advance, the
    mobile application should be able to predict the average trip time and a cost
    estimation for the ride. Thanks to this feature, the customers would know in advance
    if the trip time is compatible with their time schedule and if it's cheaper compared
    to other public transportation services.
  prefs: []
  type: TYPE_NORMAL
- en: One of the managers of the company may ask you to use **Machine Learning** (**ML**)
    to develop the prediction system that will be introduced to the new mobile application.
    The ML system should predict the trip time of a bike rental using the data that
    has already been collected and stored in a BigQuery public dataset.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we've explained and understood the problem statement, let's take a
    look at the machine learning technique that we can use to predict a numerical
    value such as the duration of a trip.
  prefs: []
  type: TYPE_NORMAL
- en: Discovering linear regression
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Linear regression** is one of the simplest techniques that we can apply when
    we have a continuous numerical value to predict. It is a well-known algorithm
    that was initially introduced in statistics to analyze the correlation between
    different variables.'
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: In statistics, the term regression means that two variables are correlated.
    This term describes a cause and effect relationship. The cause is called the **independent
    variable**, while the effect is called the **dependent variable**. The dependent
    variable can be calculated as a function of the independent variable.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram shows the graphical representation of a simple linear
    relationship between two variables:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.2 – Representation of simple linear regression'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16722_04_002.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.2 – Representation of simple linear regression
  prefs: []
  type: TYPE_NORMAL
- en: A linear regression model tries to predict the label by finding the best linear
    relationship between the label and its features. If the machine learning model
    uses only one input variable, the model is defined as **simple linear regression**.
    If the ML model is based on multiple features, it is called **multivariate linear
    regression**.
  prefs: []
  type: TYPE_NORMAL
- en: In our business scenario, the duration of a ride can be expressed with a numeric
    value, so we can use the linear regression approach to train our ML model. An
    example of simple linear regression is represented by the possibility to leverage
    only one variable, such as the distance between the start and stop station, to
    predict the outcome. Multivariate linear regression is based on multiple input
    variables. In our scenario this could be the distance between the start and stop
    stations, the age of the rider, and the day of the week when the rent occurred.
  prefs: []
  type: TYPE_NORMAL
- en: Training a linear regression model means trying to find the values of the coefficients
    that can be used in the linear equation between the input variables, called features,
    and the output variable, called the label.
  prefs: []
  type: TYPE_NORMAL
- en: 'We won''t go through all the details of linear regression in this book, but
    we can mention some examples of linear relation to better understand this concept.
    In real life, we can find a lot of measures that can be well-estimated with linear
    regression, such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The weight of a person is dependent on their height.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The revenues of a company are a function of the number of customers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The quantity of fuel consumed by a plane is conditioned by the distance traveled.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that we've learned the basics of linear regression, it's time to take a
    look at the dataset that we'll use to build our machine learning model.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring and understanding the dataset
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before diving into the machine learning implementation, it's necessary to analyze
    the data that is available for our use case. Since machine learning training is
    based on examples, we need to clearly understand what data to consider and check
    the quality of the available records.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: Data scientists and business analysts spend a lot of time and resources getting
    a clear understanding of the datasets, checking their quality, and preparing them.
    Although these operations don't seem to be directly linked to the realization
    of a machine learning algorithm, they are essential if you wish to get solid results.
    The actual training of the model is the last mile of a longer journey that begins
    with comprehending data, the control of its quality, and preparing it.
  prefs: []
  type: TYPE_NORMAL
- en: Let's start by getting a clear understanding of the information that we have
    in our dataset to build our use case.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To have a clear understanding of the dataset that we''re going to be using
    for the implementation of this use case, we need to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Log into Google Cloud Console and access the BigQuery user interface from the
    navigation menu:![Figure 4.3 – Accessing the BigQuery service from the GCP console
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B16722_04_003.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 4.3 – Accessing the BigQuery service from the GCP console
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Create a new dataset under the project that we created in [*Chapter 2*](B16722_02_Final_ASB_ePub.xhtml#_idTextAnchor039),
    *Setting Up Your GCP and BigQuery Environment*. To do this, we need to select
    our GCP project in the BigQuery navigation menu and click on the `04_nyc_bike_sharing`,
    keeping all the other options with default values:![Figure 4.4 – Creating the
    new BigQuery dataset to host the assets of our use case
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B16722_04_004.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 4.4 – Creating the new BigQuery dataset to host the assets of our use
    case
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: This dataset will contain our BigQuery ML model and all the intermediate tables
    that we'll create in the next steps of this chapter.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Once the dataset has been created, it will be visible in the BigQuery navigation
    menu, as shown in the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 4.5 – The new dataset is available within the GCP project and'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: visible in the BigQuery navigation menu
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B16722_04_005.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 4.5 – The new dataset is available within the GCP project and visible
    in the BigQuery navigation menu
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open the **bigquery-public-data** GCP project that hosts all the BigQuery public
    datasets and browse the items until you find the **new_york_citibike** dataset.
    In this public dataset, we will see two BigQuery tables: **citibike_stations**
    and **citibike_trips**. The first table is a registry of the stations of our bike
    sharing service, while the second one is the most interesting for our use case.
    We can start analyzing it now:![Figure 4.6 – The New York Citi Bike Public dataset
    contains two'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: different tables that can be used for our business scenario
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B16722_04_006.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 4.6 – The New York Citi Bike Public dataset contains two different tables
    that can be used for our business scenario
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Let's click on the **citibike_trips** table in the BigQuery navigation menu
    to access the schema of the table:![Figure 4.7 – The structure of the citibike_trips
    table lists all the fields that
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: can be used as labels and features
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B16722_04_007.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 4.7 – The structure of the citibike_trips table lists all the fields
    that can be used as labels and features
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The table is well-documented and for each column, we can easily understand the
    name, the datatypes, and the meaning of the content.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'This table contains relevant information for our use case: the **tripduration**
    field indicates the duration expressed in seconds of each bike rental. The value
    of **tripduration** is a numeric value and it''s what we want to predict in our
    business scenario, so it will be our **label**.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: All the other fields in the table are potential **features**. In fact, we have
    information about the starting and stopping stations, when the trip happened,
    and some insights into the customer, such as their age. All these columns could
    be good candidates for features since the position of the stations is directly
    related to the distance to go through and affects the duration of the trip. Also,
    the moment the ride begins could affect the duration because, on some, days the
    streets could be busier. Then, from a customer perspective, we might guess that
    young people ride faster than old people. From a schema perspective, we can conclude
    that this table represents a good dataset for developing our machine learning
    model, but we need to check our initial guesses further.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: As the next step, let's take a look at how many records we have in the table
    and if they're enough for our purposes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Clicking on the **Details** tab, we can see that the table contains more than
    58 million records:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 4.8 – The Details tab of the citibike_trips table shows the number
    of records that are available'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16722_04_008.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.8 – The Details tab of the citibike_trips table shows the number of
    records that are available
  prefs: []
  type: TYPE_NORMAL
- en: We can be extremely confident about building an ML model with this huge amount
    of data.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we understood how much information we can obtain just by analyzing
    the metadata provided by BigQuery in its user interface. Now, it's time to look
    at the actual data in this table and use it effectively.
  prefs: []
  type: TYPE_NORMAL
- en: Checking the data's quality
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The quality of data is fundamental to building robust machine learning models.
    An ML model learns from examples. If the examples present incorrect data, the
    model will inevitably learn from these errors and apply them during the actual
    usage.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start analyzing the dataset that will be used to build our ML model:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Frist of all, we will focus on the `tripduration` field. This is the column
    that we want to predict with our machine learning model and represents our label:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This query statement counts the number of rows with a `tripduration` that's
    empty or less than zero. Although the table description reported that the dataset
    only contains trips with a duration greater than 1 minute, we can immediately
    notice that the outcome of this query is a number greater than 0\. In fact, we
    can find more than five million records with the `tripduration` field not properly
    valued. Since we cannot train a model on an empty or wrong value of the label,
    we'll need to exclude these records from our use case.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Next, we''ll inspect the minimum and the maximum value of the `tripduration`
    field to evidence any outlier that can cause poor performance for our machine
    learning model:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: While the minimum rental time is an expected value of 1 minute, we can see that
    the maximum value is not compatible with the normal functionality of a bike sharing
    service. In fact, the maximum duration is more than 300,000 minutes, which is
    approximately equivalent to a rental period of more than 225 days.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In the following screenshot, you can see the result of the query:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 4.8 – The Details tab of the citibike_trips table shows the number
    of records that are available'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B16722_04_009.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 4.9 – The results of the query, evidencing the presence of outliers in
    the tripduration column
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: While preparing our datasets, we'll take all these factors into considerations
    to avoid any impact on the machine learning model.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Then, we can apply a similar check to all the columns that are potential features
    of our machine learning model, excluding the records that present a non-significant
    value of `tripduration`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With this query statement, we're only focusing on the records with a rental
    duration greater than zero and not empty. The goal of the query is to check that
    all the other potential features are not empty fields.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In this case, the query returns a count of zero. For this reason, we can be
    confident that, excluding the rows where `tripduration` is `NULL`, we'll get meaningful
    values for the other columns.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'After that, we can analyze the `birth_year` column, which represents the birth
    year of the customer that is using the bike sharing service:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `SELECT COUNT (*)` statement looks for records where the customer's birth
    year is empty. The query filters the records where `tripduration` is `NULL` or
    less than zero.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Upon executing the query, we can immediately notice that there are more than
    five million records that contain a `NULL` value for `birth_year`. We'll need
    to filter these records in the following stages of our use case.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: To accelerate the process of composing a `SELECT` statement on a table and to
    avoid any typos, BigQuery allows you to use the **Query Table** button, which
    automatically generates a SQL stub where you need to choose only the fields to
    extract. In addition, you can also select the table name from the navigation menu,
    or the column name from the **Schema** tab, to automatically include the name
    of the selected object in the SQL query that you're composing.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now that we''ve performed some quality checks on our dataset, let''s focus
    on segmenting the rows into three different tables: training, evaluation, and
    prediction.'
  prefs: []
  type: TYPE_NORMAL
- en: Segmenting the dataset
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the main principles of developing a machine learning model is based on
    segmenting our dataset into train and evaluation sets, and then using the ML model
    on different records.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start segmenting the dataset by performing the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To understand how the data is distributed across the years and months, we can
    use the following query statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `SELECT` statement extracts the year and the month from the `starttime`
    field, which indicates the exact moment when the bike trip started.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: To extract a portion of the entire timestamp, we can use the `EXTRACT` function,
    which accepts a parameter such as `YEAR`, `MONTH`, `QUARTER`, `WEEK`, `DAYOFYEAR`,
    or `DAYOFWEEK` as input, followed by the `FROM` keyword and the field that contains
    the date expression.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The query already excludes all the bad records that we found in the previous
    section and focuses on `2017` and `2018`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: To exclude outliers in the `tripduration` column, we're only taking into consideration
    the rows with a minimum rental time of 3 minutes and a maximum of 3 hours.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We can also add a filter to the year of birth of our customers, by filtering
    all the records with an empty `birth_year` and ignoring all the customers born
    after `2007`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The query counts the number of rows segmenting the results per year and month
    with the `GROUP BY` clause and orders these periods in ascending mode, as specified
    in the `ORDER BY` clause.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In the following screenshot, you can see the query''s result:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 4.10 – The results of the query describe the segmentation on a monthly
    basis'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B16722_04_010.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 4.10 – The results of the query describe the segmentation on a monthly
    basis
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: From the results of the query, we can see that the dataset goes from April 2017
    until May 2018\. We can use a rule of thumb and keep 80% of the data for training,
    10% for evaluation, and the remaining 10% for prediction. By applying this rule
    to our dataset, we'll use the first 11 months for the training stage, the following
    2 months for the evaluation stage, and the last month for the prediction stage.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Applying what we decided on in the previous step, let''s create a table that
    contains only the rows that will be used to train our BigQuery ML model:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The result of the query is stored in the new `` `04_nyc_bike_sharing.training_table`
    `` table that we created to support the following steps of our use case.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The `SELECT` statement extracts all the fields inside the `citibike_trips` table
    from the BigQuery public dataset, converting the value of `tripduration` from
    seconds into minutes.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The `WHERE` clause allows us to consider only the months that we want to use
    for the training stage. The time frame goes from April 2017 to February 2018\.
    We've also applied the filters that come from the data quality checks in the same
    clause.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now that we''ve delimited the training dataset, we can create another table
    dedicated to the records that will be used to evaluate our machine learning model:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The query is very similar to the statement that was used to create the training
    table. The only difference is related to the period we selected in the `WHERE`
    clause. For `evaluation_table`, we've focused our `SELECT` statement on the records
    from March and April 2018, which were previously excluded from the training table.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Using the same approach, we can also create the table that will be used to
    test our machine learning model:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The query will apply the necessary logic but will only take the month of May
    2018 into consideration.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now that we've segmented our dataset and we're clear about which records to
    use for the training, evaluation, and test phases, let's dive into the ML model's
    creation.
  prefs: []
  type: TYPE_NORMAL
- en: Training the linear regression model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Training a BigQuery ML model is not a one-shot operation, but it''s a process
    that can require multiple attempts and recycles to get closer to the final goal
    of developing an effective asset with good performance, according to the requirements
    of the business scenario. For our use case, we''ll go try to improve the performance
    of our ML model multiple times. Let''s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let''s start training a new machine learning model named `trip_duration_by_stations`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In this statement, we can notice the `CREATE OR REPLACE MODEL` keyword, which
    is used to create a new model. This keyword is followed by the identifier of the
    model, which is represented by concatenating the dataset and ML model name.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: After these first lines, we have the `OPTIONS` keyword, where the type of machine
    learning model to use is specified. In this case, we're using a linear regression
    identified by `model_type='linear_reg'`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'After `OPTIONS`, we need to specify the set of records that the ML model will
    be trained on. For this first attempt, we will decide to use only two features:
    the names of the start and of stop stations of the bike trip.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'With the `as label` keyword, we are instructing BigQuery to use `tripduration`
    as the label for our machine learning model. As an alternative, it is possible
    to include the label among the list of `OPTIONS` with the `INPUT_LABEL_COLS` keyword,
    as shown in the following snippet of code:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: After a few seconds, the BigQuery ML model will be created and available in
    the navigation menu, under the `04_nyc_bike_sharing` dataset. Select the ML model
    and click on the `trip_duration_by_stations`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In this case, we'll focus our attention on **Mean absolute error**. This value
    represents the average distance between the actual value and the predicted value
    of the label.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'As shown in the following screenshot, it''s very close to 7 minutes:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 4.11 – The Evaluation tab shows some key performance indicators of
    the ML model'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B16722_04_011.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 4.11 – The Evaluation tab shows some key performance indicators of the
    ML model
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, let''s try to enrich the ML model with other features that can bring additional
    value:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In this second model, we've added a new feature called `is_weekend`. This field
    is a `IF` statement that returns `true` if the day is Sunday or Saturday, represented
    by the values `1` and `7`; otherwise, it's `false`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If we check the mean absolute error of this new BigQuery ML model, we can notice
    that we've slightly improved the performance of our model with a value of 6.7784.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Since we''ve had some improvements from adding more features, let''s try including
    the age of the customer as a new parameter for our ML model:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Compared to the previous model, we've added the new `age` column, which is calculated
    as the difference between the year of `starttime` and the customer's birth year.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Once we've executed the query statement, we will see that the new `age` feature
    doesn't improve the performance of our ML model. This is because the mean absolute
    error is 6.9508\. This value is better compared to our first attempt, but worse
    than the second.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In this section, we created different ML models while trying to use different
    features in our dataset. Next, we will continue using the `trip_duration_by_stations_and_day`
    model, which, during the training phase, realized the best performance in terms
    of mean absolute error.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's learn how to start the evaluation phase.
  prefs: []
  type: TYPE_NORMAL
- en: Evaluating the linear regression model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For the evaluation stage of our BigQuery ML model, we'll use the `ML.EVALUATE`
    function and the table that we've expressly created to host the evaluation records.
    These are completely separate from the rows that are used during the training
    phase.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s execute the following query to evaluate our ML model on the evaluation
    table:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The `SELECT` statement extracts all the fields returned by the `ML.EVALUATE`
    function. The evaluation function is applied to the `` `04_nyc_bike_sharing.trip_duration_by_stations_and_day`
    `` model and on the rows that have been extracted from the `evaluation_table`
    table.
  prefs: []
  type: TYPE_NORMAL
- en: The most internal `SELECT` extracts the same fields that were used to train
    the ML model as the features that are applying the same transformations, such
    as on the `is_weekend` field, which is calculated with the same logic as the training
    phase.
  prefs: []
  type: TYPE_NORMAL
- en: The results of the query show a mean absolute error very close to 7 minutes,
    which is similar to the value of 6.7784 that was achieved during the training
    phase. For this reason, we can say that the ML model maintains its performance
    on a dataset different from the training one. We can say that the model is not
    affected by overfitting.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following screenshot, you can see the performance indicators that have
    been extracted by the evaluation query:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.12 – The query results of the EVALUATE function show the ML key'
  prefs: []
  type: TYPE_NORMAL
- en: performance calculated on the evaluation table
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16722_04_012.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.12 – The query results of the EVALUATE function show the ML key performance
    calculated on the evaluation table
  prefs: []
  type: TYPE_NORMAL
- en: Now that we've trained the model and we're also satisfied with the outcomes
    of the evaluation stage, let's learn how to apply our machine learning model to
    other records and get predictions.
  prefs: []
  type: TYPE_NORMAL
- en: Utilizing the linear regression model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To use our BigQuery ML model, we'll use the `ML.PREDICT` function and the table
    that we've expressly created to host the records that we haven't used yet.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following query will predict the label using the data in `prediction_table`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The query statement is composed of a `SELECT` keyword, which extracts the actual
    and the predicted duration of the rental. It calculates the difference in minutes
    and orders the results from the minimum to the maximum difference of minutes.
    To calculate the difference, we used the `ABS` function, which extracts the absolute
    value of a numeric.
  prefs: []
  type: TYPE_NORMAL
- en: The `ML.PREDICT` function is applied to the `SELECT` statement, which extracts
    the features and the actual duration from `prediction_table`. This last field
    is only used for comparison with the predicted value and is not used to run the
    ML model.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following screenshot, you can see the results of the query execution:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.13 – The query results of the PREDICT function show the actual and
    the predicted duration.'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16722_04_013.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.13 – The query results of the PREDICT function show the actual and
    the predicted duration.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we've applied our model, let's formulate some final considerations
    and provide the answers to our managers about the possibility of predicting the
    trip duration of a bike rental.
  prefs: []
  type: TYPE_NORMAL
- en: Drawing business conclusions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we'll formulate some final considerations using the results
    that we got from applying our ML model.
  prefs: []
  type: TYPE_NORMAL
- en: By enriching the previous query with a parent `SELECT COUNT` statement, we can
    identify how many predictions are less than `15` minutes away from the actual
    value.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s execute the following query to calculate how often the trip duration
    predictions are far from the actual values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The result of the `SELECT COUNT` query returns a value of 1,548,370 predictions,
    with a difference between the predicted and the actual value being less than `15`
    minutes.
  prefs: []
  type: TYPE_NORMAL
- en: Considering that the total size of the `prediction_table` table is 1,728,078,
    we can say that in 89.6% of cases, our machine learning model is able to predict
    the trip duration with a gap that's less than 15 minutes.
  prefs: []
  type: TYPE_NORMAL
- en: For the reasons we expressed previously, we can suggest to management to start
    with a quarterly fare for the new on-demand and pay-as-you-go pricing model. With
    this strategy, when a customer picks up a bike from a start station and specifies
    its destination on the mobile application on a specific day of the week, our model
    will be able to predict the exact fare of the ride with a mean absolute error
    of about 7 minutes. The 89.6% the application will provide a good estimation of
    the price to our customer.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we built our first machine learning use case based on a real-life
    scenario. After a brief introduction to the use case, we discovered what linear
    regression is and how it can be used to predict numerical values.
  prefs: []
  type: TYPE_NORMAL
- en: Before diving into actually developing the machine learning model, we learned
    that having a clear understanding of the data and checking its quality is fundamental
    to getting effective machine learning models. To start from a solid foundation,
    we leveraged the BigQuery public dataset, which collects information about all
    the rentals for a bike sharing service in New York City.
  prefs: []
  type: TYPE_NORMAL
- en: For training the model, we used different features to understand which variables
    are relevant to building our BigQuery ML model.
  prefs: []
  type: TYPE_NORMAL
- en: Then, we chose one machine learning model to carry on to the evaluation stage.
    In this phase, we used the BigQuery evaluation function to verify that the machine
    learning model could also effectively work on new rows outside the training dataset.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we applied our ML model to a third subset of records to predict the
    duration of each bike rental. We did this by leveraging the start and stop stations
    chosen by the user and the day of the week that the trip is happening on.
  prefs: []
  type: TYPE_NORMAL
- en: We also calculated that 89% of them have a difference of less than 15 minutes
    compared to the actual duration of the trip. For this reason, we can conclude
    that we can provide a good user experience to our customers if the company applies
    a quarterly fare to our new pay-as-you-go offering.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll discover binary logistic regression and how to use
    it with BigQuery ML to predict boolean variables.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**NYC Bike Sharing Public Dataset**: [https://console.cloud.google.com/marketplace/product/city-of-new-york/nyc-citi-bike](https://console.cloud.google.com/marketplace/product/city-of-new-york/nyc-citi-bike)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**BigQuery ML Create Model**: [https://cloud.google.com/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-create](https://cloud.google.com/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-create)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**BigQuery ML Evaluate Model**: [https://cloud.google.com/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-evaluate](https://cloud.google.com/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-evaluate)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**BigQuery ML Predict**: [https://cloud.google.com/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-predict](https://cloud.google.com/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-predict)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**BigQuery ML Linear Regression Example**: [https://cloud.google.com/bigquery-ml/docs/bigqueryml-natality](https://cloud.google.com/bigquery-ml/docs/bigqueryml-natality)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
