["```py\nimport matplotlib.pyplot as plt\n```", "```py\nimport numpy as np\n```", "```py\nimport scipy.stats as stats\n```", "```py\nx = np.linspace(-4,4, 100)\n```", "```py\nplt.plot(x, stats.norm.pdf(x, 0, 1))\n```", "```py\nimport numpy as np\n```", "```py\nimport matplotlib.pyplot as plt\n```", "```py\ndata = np.random.normal(size=10000000)\n```", "```py\nplt.hist(data, bins=25)\n```", "```py\nmin(data), max(data)\n```", "```py\nimport numpy as np\nnormal_data = np.random.rand(1000)\n```", "```py\nimport matplotlib.pyplot as plt\nplt.hist(normal_data)\n```", "```py\nhard_to_detect = list(np.random.uniform(1,2,size=int(0.005*1000))) + \\\n                  list(np.random.uniform(0,-1,size=int(0.005*1000)))\neasy_to_detect = list(np.random.uniform(2,3,size=int(0.005*1000))) + \\\n                  list(np.random.uniform(-1,-2,size=int(0.005*1000)))\n```", "```py\ntotal_data = list(normal_data) + hard_to_detect + easy_to_detect\nimport random\nrandom.shuffle(total_data)\nfor datapoint in total_data:\n  pass\n```", "```py\n# Anomaly percentage for the quantile thresholder\nexpected_percentage_anomaly = 20/1020\nexpected_percentage_normal = 1 - expected_percentage_anomaly\n```", "```py\n!pip install river\nfrom river import anomaly\nmodel = anomaly.QuantileThresholder(\n    anomaly.OneClassSVM(),\n    q=expected_percentage_normal\n    )\nfor datapoint in total_data:\n    model = model.learn_one({'x': datapoint})\n```", "```py\nscores = []\nfor datapoint in total_data:\n    scores.append(model.score_one({'x': datapoint}))\n```", "```py\nimport pandas as pd\nresults = pd.DataFrame({'data': total_data , 'score': scores})\nresults['actual_outlier'] = (results['data'] > 1 ) | (results ['data'] < 0)\n# there are 20 actual outliers\nresults['actual_outlier'].value_counts()\n```", "```py\n# the algo detected 22 outliers\nresults['score'].value_counts()\n```", "```py\n# in the 22 detected otuliuers, 10 are actual outliers, but 12 are not actually outliers\nresults.groupby('actual_outlier')['score'].sum()\n```", "```py\nfrom river import anomaly\nmodel2 = anomaly.QuantileThresholder(\n    anomaly.HalfSpaceTrees(),\n    q=expected_percentage_normal\n    )\nfor datapoint in total_data:\n    model2 = model2.learn_one({'x': datapoint})\nscores2 = []\nfor datapoint in total_data:\n    scores2.append(model2.score_one({'x': datapoint}))\n\nimport pandas as pd\nresults2 = pd.DataFrame({'data': total_data, 'score': scores2})\nresults2['actual_outlier'] = (results2 ['data'] > 1 ) | (results2['data'] < 0)\n# there are 20 actual outliers\nresults2['actual_outlier'].value_counts()\n```", "```py\n# the algo detected 29 outliers\nresults2['score'].value_counts()\n```", "```py\n# the 29 detected outliers are not actually outliers\nresults2.groupby('actual_outlier')['score'].sum()\n```"]