["```py\n    > install.packages(\"abc\")\n\n```", "```py\n    > \"Let's Go Sioux!\"\n    [1] \"Let's Go Sioux!\"\n\n    > 15\n    [1] 15\n\n```", "```py\n    > ((22+5)/9)*2\n    [1] 6\n\n```", "```py\n    > c(0, 1, 1, 2, 3, 5, 8, 13, 21, 34) #Fibonacci sequence\n     [1]  0  1  1  2  3  5  8 13 21 34\n\n```", "```py\n    > x <- c(0, 1, 1, 2, 3, 5, 8, 13, 21, 34)\n\n```", "```py\n    > x\n     [1]  0  1  1  2  3  5  8 13 21 34\n\n```", "```py\n    > x[1:3]\n    [1] 0 1 1\n\n```", "```py\n    > x[-5:-6]\n    [1]  0  1  1  2  8 13 21 34\n\n```", "```py\n    > plot(x)\n\n```", "```py\n    > plot(x, main = \"Fibonacci Sequence\", xlab = \"Order\", ylab = \"Value\")\n\n```", "```py\n    > y <- sqrt(x)\n\n    > y\n    [1] 0.000000 1.000000 1.000000 1.414214 1.732051 2.236068  2.828427\n    [8] 3.605551 4.582576 5.830952\n\n```", "```py\n    > ?sqrt\n\n```", "```py\n    > plot(x, y)\n\n```", "```py\n    > z <- 3\n\n    > x2 <- x * z\n\n    > x2\n     [1]   0   3   3   6   9  15  24  39  63 102\n\n```", "```py\n    > 5 < 6\n    [1] TRUE\n\n    > 6 < 5\n    [1] FALSE\n\n```", "```py\n    > x == 0\n     [1]  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n```", "```py\n    > rep(\"North Dakota Hockey, 2016 NCAA Division 1 Champions\", times=3)\n    [1] \"North Dakota Hockey, 2016 NCAA Division 1 Champions\"\n    [2] \"North Dakota Hockey, 2016 NCAA Division 1 Champions\"\n    [3] \"North Dakota Hockey, 2016 NCAA Division 1 Champions\"\n\n```", "```py\n    > seq(0, 10, by = 2)\n    [1]  0  2  4  6  8 10\n\n```", "```py\n    > p <- seq(1:3)\n\n    > p\n    [1] 1 2 3\n\n    > q = seq(1, 2, by = 0.5)\n\n    > q\n    [1] 1.0 1.5 2.0\n\n    > r <- rbind(p, q)\n\n    > r\n      [,1] [,2] [,3]\n    p    1  2.0    3\n    q    1  1.5    2\n\n```", "```py\n    > str(r)\n     num [1:2, 1:3] 1 1 2 1.5 3 2\n     - attr(*, \"dimnames\")=List of 2\n      ..$ : chr [1:2] \"p\" \"q\"\n      ..$ : NULL\n\n```", "```py\n    > s <- cbind(p, q)\n\n    > s\n         p   q\n    [1,] 1 1.0\n    [2,] 2 1.5\n    [3,] 3 2.0\n\n```", "```py\n    > s <- data.frame(s)\n\n    > str(s)\n    'data.frame':3 obs. of  2 variables:\n     $ p: num  1 2 3\n     $ q: num  1 1.5 2\n\n```", "```py\n    > names(s) <- c(\"column 1\", \"column 2\")\n\n    > s\n      column 1 column 2\n    1        1      1.0\n    2        2      1.5\n    3        3      2.0\n\n```", "```py\n    > t <- as.matrix(s)\n\n    > t\n         column 1 column 2\n    [1,]        1      1.0\n    [2,]        2      1.5\n    [3,]        3      2.0\n\n```", "```py\n    > t[1,1]\n    column 1 \n           1\n\n```", "```py\n    > t[,2]\n    [1] 1.0 1.5 2.0\n\n```", "```py\n    > t[1:2,]\n         column 1 column 2\n    [1,]        1      1.0\n    [2,]        2      1.5\n\n```", "```py\n    > new <- old[1:70, c(1,3,7:10)]\n\n```", "```py\n    > new <- old[, -1]\n\n```", "```py\n    > a <- c(1, 2, 3, NA)\n\n    > sum(a)\n    [1] NA\n\n```", "```py\n    > sum(a, na.rm = TRUE)\n    [1] 6\n\n```", "```py\n    > data <- c(4, 3, 2, 5.5, 7.8, 9, 14, 20)\n\n    > mean(data)\n    [1] 8.1625\n\n    > median(data)\n    [1] 6.65\n\n    > sd(data)\n    [1] 6.142112\n\n    > max(data)\n    [1] 20\n\n    > min(data)\n    [1] 2\n\n    > range(data)\n    [1]  2 20\n\n    > quantile(data)\n    0%   25%   50%   75%  100% \n    2.00  3.75  6.65 10.25 20.00 \n\n```", "```py\n    > summary(data)\n    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n      2.000   3.750   6.650   8.162  10.250  20.000\n\n```", "```py\n    > barplot(data)\n\n    > abline(h = mean(data))\n\n    > abline(h = median(data), lty = 2)\n\n```", "```py\n    > set.seed(1)\n\n    > norm = rnorm(100)\n\n```", "```py\n    > plot(norm)\n\n```", "```py\n    > hist(norm)\n\n```", "```py\n    > library(xgboost)\n\n```", "```py\n > library(dplyr)\n\n```", "```py\n > summarize(group_by(iris, Species), average = mean(Sepal.Length))\n # A tibble: 3 X 2\n Species average\n <fctr>   <dbl>\n 1     setosa   5.006\n 2 versicolor   5.936\n 3  virginica   6.588\n\n```", "```py\n > iris %>% group_by(Species) %>% summarize(average = \n      mean(Sepal.Length))\n # A tibble: 3 X 2\n Species average\n <fctr>   <dbl>\n 1     setosa   5.006\n 2 versicolor   5.936\n 3  virginica   6.588\n\n```", "```py\n > distinct(iris, Species)\n Species\n 1     setosa\n 2 versicolor\n 3  virginica\n\n```", "```py\n > count(iris, Species)\n # A tibble: 3 X 2\n Species     n\n <fctr> <int>\n 1     setosa    50\n 2 versicolor    50\n 3  virginica    50\n\n```", "```py\n > df <- filter(iris, Sepal.Width > 3.5)\n\n```", "```py\n > df <- arrange(iris, desc(Petal.Length))\n > head(df)\n Sepal.Length Sepal.Width Petal.Length Petal.Width   Species\n 1          7.7         2.6          6.9         2.3 virginica\n 2          7.7         3.8          6.7         2.2 virginica\n 3          7.7         2.8          6.7         2.0 virginica\n 4          7.6         3.0          6.6         2.1 virginica\n 5          7.9         3.8          6.4         2.0 virginica\n 6          7.3         2.9          6.3         1.8 virginica\n\n```", "```py\n > iris2 <- select(iris, starts_with(\"Se\"))\n\n    > iris3 <- select(iris, -starts_with(\"Se\")) \n\n```", "```py\n > theIris <- bind_cols(iris2, iris3)\n      head(theIris)\n      head(iris) \n\n```", "```py\n > summarize(iris, n_distinct(Sepal.Width))\n n_distinct(Sepal.Width)\n 1                     23\n\n```", "```py\n > dedupe <- iris %>% distinct(Sepal.Width, .keep_all = T)\n > str(dedupe)\n 'data.frame': 23 obs. of 5 variables:\n $ Sepal.Length: num 5.1 4.9 4.7 4.6 5 5.4 4.6 4.4 5.4 5.8 ...\n $ Sepal.Width : num 3.5 3 3.2 3.1 3.6 3.9 3.4 2.9 3.7 4 ...\n $ Petal.Length: num 1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.4 1.5 1.2 ...\n $ Petal.Width : num 0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.2 ...\n $ Species : Factor w/ 3 levels \"setosa\",\"versicolor\",..: 1 1 1 1 1 \n     1 1 1 1 1\n\n```"]