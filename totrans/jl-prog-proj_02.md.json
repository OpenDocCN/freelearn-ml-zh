["```py\nCSV@v0.4.3\nDataFrames@v0.15.2\nFeather@v0.5.1\nGadfly@v1.0.1\nIJulia@v1.14.1\nJSON@v0.20.0\nRDatasets@v0.6.1\n```", "```py\npkg> add PackageName@vX.Y.Z \n```", "```py\npkg> add IJulia@v1.14.1\n```", "```py\njulia> download(\"https://raw.githubusercontent.com/PacktPublishing/Julia-Programming-Projects/master/Chapter02/Project.toml\", \"Project.toml\")\npkg> activate . \npkg> instantiate\n```", "```py\njulia> book = \"Julia v1.0 By Example\" \njulia> pi = 3.14 \njulia> ANSWER = 42 \njulia> my_first_name = \"Adrian\" \n```", "```py\njulia> answer \nERROR: UndefVarError: answer not defined \n\n```", "```py\njulia> δ = 130 \n\n```", "```py\njulia> ![](img/66a96d4b-ddc8-4a14-8261-fd28e4c890b6.png) = \"apollo 11\" \n```", "```py\njulia> do = 3 \nERROR: syntax: invalid \"do\" syntax \njulia> end = \"Paris\" \nERROR: syntax: unexpected end \n\n```", "```py\njulia> MysteryVar \nERROR: UndefVarError: MysteryVar not defined \n\n```", "```py\njulia> const firstmonth = \"January\" \n\n```", "```py\njulia> const mealoption = \"vegetarian\" \n```", "```py\njulia> mealoption = \"vegan\" \nWARNING: redefining constant mealoption \n\"vegan\" \n\n```", "```py\njulia> mealoption = 2 \nERROR: invalid redefinition of constant mealoption \n```", "```py\njulia> const amount = 10.25  \n10.25 \njulia> amount = 10 \nERROR: invalid redefinition of constant amount \n```", "```py\njulia> amount = 10.00 \nWARNING: redefining constant amount \n10.0 \n\n```", "```py\njulia> #= \n           Our company charges a fixed  \n           $10 fee per transaction. \n       =# \nconst flatfee = 10 # flat fee, per transaction  \n\n```", "```py\njulia> \"Measuring programming progress by lines of code is like measuring aircraft building progress by weight.\" \n\n```", "```py\njulia> \"Beta is Latin for \\\"still doesn't work\\\".\" \n```", "```py\njulia> \"\"\"Beta is Latin for \"still doesn't work\".\"\"\" \n\n```", "```py\njulia> \"\"\"Beta is Latin for \"still doesn't work\"\"\"\" \nsyntax: cannot juxtapose string literal \n\n```", "```py\njulia> \"\"\" \n                  Hello \n           Look \n    Here\"\"\"\n\n julia> print(ans) \nHello \nLook \nHere \nHere was removed).\n```", "```py\njulia> \"Hello \" * \"world!\" \"Hello world!\" \n\n```", "```py\njulia> string(\"Itsy\", \" \", \"Bitsy\", \" \", \"Spider\") \n\"Itsy Bitsy Spider\" \n\n```", "```py\njulia> username = \"Adrian\" \njulia> greeting = \"Good morning\" \njulia> greeting * \", \" * username \n\"Good morning, Adrian\" \n```", "```py\njulia> username = 9543794 \njulia> greeting = \"Good morning\" \njulia> greeting * \", \" * username \nMethodError: no method matching *(::String, ::Int64) \n\n```", "```py\njulia> string(greeting, \", \", username)\n \"Good morning, 9543794\"\n\n```", "```py\njulia> string(2, \" and \", 3) \n\"2 and 3\"\n```", "```py\njulia> 2 * \" and \" * 3 \nERROR: MethodError: no method matching *(::Int64, ::String)\n```", "```py\njulia> username = \"Adrian\" \njulia> greeting = \"Good morning\" \njulia> \"$greeting, $username\" \n\"Good morning, Adrian\" \n\n```", "```py\njulia> \"$(uppercase(greeting)), $(reverse(username))\" \n\"GOOD MORNING, nairdA\" \n\n```", "```py\njulia> \"The sum of 1 and 2 is $(1 + 2)\" \n\"The sum of 1 and 2 is 3\"\n```", "```py\njulia> str = \"Nice to see you\" \njulia> str[1] \n'N': ASCII/Unicode U+004e (category Lu: Letter, uppercase)\n```", "```py\njulia> str[9:11] \n\"see\" \n```", "```py\njulia> str[1:1] \n\"N\" \n```", "```py\njulia> str[1] \n'N': ASCII/Unicode U+004e (category Lu: Letter, uppercase)\n```", "```py\njulia> str[1:1] == str[1] \nfalse \n```", "```py\njulia> str = \"Søren Kierkegaard was a Danish Philosopher\" \njulia> str[1] \n'S': ASCII/Unicode U+0053 (category Lu: Letter, uppercase) \n```", "```py\njulia> str[2] \n'ø': Unicode U+00f8 (category Ll: Letter, lowercase) \n```", "```py\njulia> str[3] \nStringIndexError(\"Søren Kierkegaard was a Danish Philosopher\", 3) \n```", "```py\n julia> str[4] \n'r': ASCII/Unicode U+0072 (category Ll: Letter, lowercase) \n```", "```py\njulia> for s in str \n           println(s) \n       end \nS \nø \nr \ne \nn \n\nK \n... output truncated...\n\n```", "```py\njulia> length(str) 42 \njulia> str[42] 'e': ASCII/Unicode U+0065 (category Ll: Letter, lowercase) \n\n```", "```py\njulia> str[end] \n'r': ASCII/Unicode U+0072 (category Ll: Letter, lowercase) \njulia> str[end-10:end] \n\"Philosopher\"\n\n```", "```py\njulia> str[end+1] \nERROR: BoundsError: attempt to access \"Søren Kierkegaard was a Danish Philosopher\" \n  at index [44]\n```", "```py\njulia> reg = r\"[0-9]+\" \nr\"[0-9]+\" \njulia> match(reg, \"It was 1970\") \nRegexMatch(\"1970\") \n```", "```py\njulia> typeof(reg) \nRegex \n\n```", "```py\njulia> Regex(\"[0-9]+\") \nr\"[0-9]+\" \n\n```", "```py\njulia> Regex(\"[0-9]+\") == reg \ntrue\n```", "```py\njulia> match(r\"it was\", \"It was 1970\") # case-sensitive no match \njulia> match(r\"it was\"i, \"It was 1970\") # case-insensitive match \nRegexMatch(\"It was\") \n\n```", "```py\njulia> occursin(r\"hello\", \"It was 1970\")  \nfalse \njulia> occursin(r\"19\", \"It was 1970\") \ntrue \n\n```", "```py\njulia> alice_in_wonderland = \"Why, sometimes I've believed as many as six impossible things before breakfast.\" \n\njulia> m = match(r\"(\\w+)+\", alice_in_wonderland) \nRegexMatch(\"Why\", 1=\"Why\") \n```", "```py\nWhy.\n```", "```py\nm = match(r\"(\\w+)+\", alice_in_wonderland, 6) \nRegexMatch(\"sometimes\", 1=\"sometimes\") \n\n```", "```py\njulia> m = match(r\"((\\w+)(\\s+|\\W+))\", alice_in_wonderland) \nRegexMatch(\"Why, \", 1=\"Why, \", 2=\"Why\", 3=\", \") \n```", "```py\njulia> for m in eachmatch(r\"((\\w+)(\\s+|\\W+))\", alice_in_wonderland) \n           println(m) \nend \n```", "```py\njulia> collect(eachmatch(r\"((\\w+)(\\s+|\\W+))\", alice_in_wonderland))\n 13-element Array{RegexMatch,1}: \n RegexMatch(\"Why, \", 1=\"Why, \", 2=\"Why\", 3=\", \") \n RegexMatch(\"sometimes \", 1=\"sometimes \", 2=\"sometimes\", 3=\" \") \n RegexMatch(\"I'\", 1=\"I'\", 2=\"I\", 3=\"'\") \n RegexMatch(\"ve \", 1=\"ve \", 2=\"ve\", 3=\" \") \n RegexMatch(\"believed \", 1=\"believed \", 2=\"believed\", 3=\" \") \n RegexMatch(\"as \", 1=\"as \", 2=\"as\", 3=\" \") \n RegexMatch(\"many \", 1=\"many \", 2=\"many\", 3=\" \") \n RegexMatch(\"as \", 1=\"as \", 2=\"as\", 3=\" \") \n RegexMatch(\"six \", 1=\"six \", 2=\"six\", 3=\" \") \n RegexMatch(\"impossible \", 1=\"impossible \", 2=\"impossible\", 3=\" \") \n RegexMatch(\"things \", 1=\"things \", 2=\"things\", 3=\" \") \n RegexMatch(\"before \", 1=\"before \", 2=\"before\", 3=\" \") \n RegexMatch(\"breakfast.\", 1=\"breakfast.\", 2=\"breakfast\", 3=\".\")\n```", "```py\njulia> \"This $will error out\" \nERROR: UndefVarError: will not defined \n```", "```py\njulia> raw\"This $will work\" \n\"This \\$will work\" \n```", "```py\njulia> 42 \n```", "```py\njulia> typeof(42) \nInt64 \n```", "```py\njulia> @show Int \nInt = Int64 \n\n```", "```py\njulia> typemin(Int), typemax(Int) \n(-9223372036854775808, 9223372036854775807) \n```", "```py\njulia> typemin(Int) - 1 \n9223372036854775807 \njulia> typemin(Int) - 1 == typemax(Int) \ntrue \n```", "```py\njulia> typemax(Int) + 1 == typemin(Int) \ntrue\n```", "```py\njulia> BigInt(typemax(Int)) + 1 \n9223372036854775808\n```", "```py\njulia> 3.14 \n3.14 \njulia> -1.0 \n-1.0 \njulia> 0.25 \n0.25 \njulia> .5  \n0.5  \n```", "```py\njulia> typeof(1.) \nFloat64 \njulia> f32 = Float32(1.) \n1.0f0 \njulia> typeof(f32) \nFloat32 \n\n```", "```py\njulia> 1_000_000, 0.000_000_005 \n(1000000, 5.0e-9)\n```", "```py\njulia> 3//2 \n3//2\n```", "```py\njulia> 1//2 + 2//4 \n1//1 \n\njulia> Int(1//1) \n1 \n\njulia> float(1//3) \n0.3333333333333333 \n\njulia> Int(1//3) \nERROR: InexactError: Int64(Int64, 1//3) \n\njulia> float(1//3) == 1/3 \ntrue \n```", "```py\njulia> a = 2 \n2 \njulia> a *= 3 # equivalent of a = a * 3 \n6 \njulia> a ^= 2 # equivalent of a = a ^ 2 \n36 \njulia> a += 4 # equivalent of a = a + 4 \n40  \n```", "```py\njulia> 10 > 5 < 6 == 6 >= 3 != 2 \ntrue \n```", "```py\njulia> first_five_fib = [1, 1, 2, 3, 5] \n5-element Array{Int64,1}: \n 1 \n 1 \n 2 \n 3 \n 5 \njulia> first_five_fib .^ 2 \n5-element Array{Int64,1}: \n  1 \n  1 \n  4 \n  9 \n 25 \n\n```", "```py\njulia> first_five_fib .^= 2 \n```", "```py\n(1, 2, 3)\n\njulia> (\"a\", 4, 12.5) \n(\"a\", 4, 12.5) \n\n```", "```py\njulia> (1,) \n(1,) \n\n```", "```py\njulia> 'e', 2 \n('e', 2) \n\njulia> 1, \n(1,) \n\n```", "```py\njulia> lang = (\"Julia\", v\"1.0\") \n(\"Julia\", v\"1.0.0\") \n\njulia> lang[2] \nv\"1.0.0\" \n\n```", "```py\njulia> (3,4) .+ (1,1) (4, 5)\n```", "```py\njulia> skills = (language = \"Julia\", version = v\"1.0\") \n(language = \"Julia\", version = v\"1.0.0\") \n\njulia> skills.language \n\"Julia\"\n\n julia> skills[1] \n\"Julia\" \n```", "```py\njulia> r = 1:20 \n1:20 \n\n```", "```py\njulia> abc = 'a':'z' \n'a':1:'z' \n\njulia> abc[10] \n'j': ASCII/Unicode U+006a (category Ll: Letter, lowercase) \n\njulia> abc[end] \n'z': ASCII/Unicode U+007a (category Ll: Letter, lowercase) \n\n```", "```py\njulia> (1:20...,) \n(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20) \n\n```", "```py\njulia> [1:20...] \n20-element Array{Int64,1}\n\n```", "```py\njulia> (0:5:20...,)  \n(0, 5, 10, 15, 20) \n```", "```py\njulia> (20:-5:-20...,) \n(20, 15, 10, 5, 0, -5, -10, -15, -20) \n\n```", "```py\njulia> (0.5:10) \n0.5:1.0:9.5 \njulia> (0.5:10...,) \n(0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, 9.5)\n\n```", "```py\njulia> collect(0.5:0.5:10) \n20-element Array{Float64,1} \n```", "```py\njulia> [1, 2, 3]  \n3-element Array{Int64,1}: \n 1 \n 2 \n 3 \n\n```", "```py\njulia> Float32[1, 2, 3, 4] \n4-element Array{Float32,1}: \n 1.0 \n 2.0 \n 3.0 \n 4.0 \n\n```", "```py\njulia> [1 2 3 4] \n1×4 Array{Int64,2}: \n 1  2  3  4 \n\n```", "```py\njulia> [1 2 3; 4 5 6; 7 8 9] \n3×3 Array{Int64,2}: \n 1  2  3 \n 4  5  6 \n 7  8  9 \n```", "```py\njulia> zeros(Int, 2) \n2-element Array{Int64,1}: \n 0 \n 0\n\n julia> zeros(Float64, 3) \n3-element Array{Float64,1}: \n 0.0 \n 0.0 \n 0.0 \n\njulia> ones(2) \n2-element Array{Float64,1}: \n 1.0 \n 1.0 \n\njulia> ones(Int, 2) \n2-element Array{Int64,1}: \n 1 \n 1 \n\njulia> ones(Int, 3, 4) \n3×4 Array{Int64,2}: \n 1  1  1  1 \n 1  1  1  1 \n 1  1  1  1 \n\njulia> trues(2) \n2-element BitArray{1}: \n true \n true \n\njulia> rand(Int, 4, 2) \n4×2 Array{Int64,2}: \n  9141724849782088627   6682031028895615978 \n -3827856130755187476  -1731760524632072533 \n -3369983903467340663  -7550830795386270701 \n -3159829068325670125   1153092130078644307 \n\njulia> rand(Char, 3, 2) \n3×2 Array{Char,2}: \n '\\U63e7a'  '\\Ub8723' \n '\\Uda56f'  ![](img/9c79f8c9-996c-43e5-99cb-3056f80192f6.png) \n '\\U7b7fd'  '\\U5f749' \n\njulia> fill(42, 2, 3) \n2×3 Array{Int64,2}: \n 42  42  42 \n 42  42  42\n```", "```py\njulia> arr1d = rand(5) 5-element Array{Float64,1}: 0.845359 0.0758361 0.379544 0.382333 0.240184 \njulia> arr1d[5] \n 0.240184 \njulia> arr2d = rand(5,2) \n5×2 Array{Float64,2}: \n 0.838952  0.312295 \n 0.800917  0.253152 \n 0.480604  0.49218 \n 0.716717  0.889667 \n 0.703998  0.773618 \n\njulia> arr2d[4, 1] \n0.7167165812985592 \n```", "```py\njulia> arr2d = rand(5,5) \n5×5 Array{Float64,2}: \n 0.618041  0.887638   0.633995  0.868588  0.19461 \n 0.400213  0.699705   0.719709  0.328922  0.326825 \n 0.322572  0.807488   0.866489  0.960801  0.476889 \n 0.716221  0.504356   0.206264  0.600758  0.843445 \n 0.705491  0.0334613  0.240025  0.235351  0.740302 \n```", "```py\njulia> arr2d[1:3, 3:5] \n3×3 Array{Float64,2}: \n 0.633995  0.868588  0.19461 \n 0.719709  0.328922  0.326825 \n 0.866489  0.960801  0.476889 \n```", "```py\njulia> arr2d[:, 3:5] \n5×3 Array{Float64,2}: \n 0.633995  0.868588  0.19461 \n 0.719709  0.328922  0.326825 \n 0.866489  0.960801  0.476889 \n 0.206264  0.600758  0.843445 \n 0.240025  0.235351  0.740302\n```", "```py\njulia> arr2d[[true, false, true, true, false], 3:5] \n3×3 Array{Float64,2}: \n 0.633995  0.868588  0.19461 \n 0.866489  0.960801  0.476889 \n 0.206264  0.600758  0.843445\n\n```", "```py\njulia> arr2d[1, 1] = 0.0 \n\njulia> arr2d[[true, false, true, true, false], 3:5] = ones(3, 3) \njulia> arr2d \n5×5 Array{Float64,2}: \n 0.0       0.641646  1.0       1.0        1.0      \n 0.750895  0.842909  0.818378  0.484694   0.661247 \n 0.938833  0.193142  1.0       1.0        1.0      \n 0.195541  0.338319  1.0       1.0        1.0      \n 0.546298  0.920886  0.720724  0.0529883  0.238986 \n```", "```py\nfor element in yourarray \n    # do something with element \nend \n\n```", "```py\njulia> for person in [\"Alison\", \"James\", \"Cohen\"] \n           println(\"Hello $person\") \n       end \n\nHello Alison \nHello James \nHello Cohen \n\n```", "```py\njulia> people = [\"Alison\", \"James\", \"Cohen\"] \n3-element Array{String,1}: \n \"Alison\" \n \"James\" \n \"Cohen\" \n\njulia> for i in eachindex(people) \n           println(\"$i. $(people[i])\") \n       end\n\n 1\\. Alison \n2\\. James \n3\\. Cohen \n```", "```py\njulia> arr = [1, 2, 3] \n3-element Array{Int64,1}: \n 1 \n 2 \n 3\n\n julia> push!(arr, 4) \n4-element Array{Int64,1}: \n 1 \n 2 \n 3 \n 4 \n\njulia> push!(arr, 5, 6, 7) \n7-element Array{Int64,1}: \n  1 \n  2 \n  3 \n  4 \n  5 \n  6 \n  7 \n\n```", "```py\njulia> pop!(arr) \n7 \n\njulia> arr \n6-element Array{Int64,1}: \n 1 \n 2 \n 3 \n 4 \n 5 \n 6 \n```", "```py\njulia> deleteat!(arr, 3) \n5-element Array{Int64,1}: \n 1 \n 2 \n 4 \n 5 \n 6 \n\n```", "```py\njulia> arr = [1,2,3] \n3-element Array{Int64,1}: \n 1 \n 2 \n 3 \n\njulia> arr2 = arr \n3-element Array{Int64,1}: \n 1 \n 2 \n 3\n```", "```py\njulia> pop!(arr2) \n3 \n```", "```py\njulia> arr2 \n2-element Array{Int64,1}: \n 1 \n 2 \n```", "```py\njulia> arr \n2-element Array{Int64,1}: \n 1 \n 2 \n\n```", "```py\njulia> arr \n2-element Array{Int64,1}: \n 1 \n 2 \n\njulia> arr2 = copy(arr) \n2-element Array{Int64,1}: \n 1 \n 2 \n```", "```py\njulia> pop!(arr2) \n2 \n```", "```py\njulia> arr \n2-element Array{Int64,1}: \n 1 \n 2\n```", "```py\njulia> arr2 \n1-element Array{Int64,1}: \n 1 \n```", "```py\njulia> [x += 1 for x = 1:5] \n10-element Array{Int64,1}: \n  2 \n  3 \n  4 \n  5 \n  6\n\n```", "```py\njulia> Float64[x+=1 for x = 1:5] \n5-element Array{Float64,1}: \n 2.0 \n 3.0 \n 4.0 \n 5.0 \n 6.0 \n\n```", "```py\njulia> [x += y for x = 1:5, y = 11:15] \n5×5 Array{Int64,2}: \n 12  13  14  15  16 \n 13  14  15  16  17 \n 14  15  16  17  18 \n 15  16  17  18  19 \n 16  17  18  19  20 \n\n```", "```py\njulia> [x += 1 for x = 1:10 if x/2 > 3] \n4-element Array{Int64,1}: \n  8 \n  9 \n 10 \n 11 \n```", "```py\njulia> (x+=1 for x = 1:10) \nBase.Generator{UnitRange{Int64},##41#42}(#41, 1:10) \n\n```", "```py\njulia> for i in [x^3 for x=1:1_000_000] \n           i >= 1_000 && break \n           println(i) \nend \n1 \n8 \n27 \n64 \n125 \n216 \n343 \n512 \n729 \n\n```", "```py\n@time for i in [x^3 for x=1:1_000_000] \n   i >= 1_000 && break \n   println(i) \nend \n\n0.035739 seconds (58.46 k allocations: 10.493 MiB)\n\n```", "```py\n@time for i in (x^3 for x=1:1_000_000) \n   i >= 1_000 && break \n   println(i) \nend \n\n0.019681 seconds (16.63 k allocations: 898.414 KiB)  \n\n```", "```py\njulia> @time for i in [x^3 for x=1:1_000_000_000] \n          i >= 1_000 && break \n          println(i) \n       end \n1 \n8 \n27 \n64 \n125 \n216 \n343 \n512 \n729\n\n 10.405833 seconds (58.48 k allocations: 7.453 GiB, 3.41% gc time) \n```", "```py\njulia> @time for i in (x^3 for x=1:1_000_000_000) \n          i >= 1_000 && break \n          println(i) \n       end \n1 \n8 \n27 \n64 \n125 \n216 \n343 \n512 \n729 \n\n  0.020068 seconds (16.63 k allocations: 897.945 KiB \n```", "```py\n julia> ]\n    pkg> add RDatasets \n```", "```py\n julia> using RDatasets \n```", "```py\njulia> RDatasets.datasets() \n```", "```py\njulia> iris = dataset(\"datasets\", \"iris\") \n```", "```py\njulia> names(iris) \n5-element Array{Symbol,1}: \n :SepalLength \n :SepalWidth \n :PetalLength \n :PetalWidth \n :Species \n\n```", "```py\njulia> size(iris) \n(150, 5)\n```", "```py\njulia> head(iris) \n```", "```py\njulia> tail(iris, 10) \n```", "```py\njulia> by(iris, :Species, nrow)\n```", "```py\njulia> describe(iris)\n```", "```py\njulia> describe(iris, stats=[:q25, :q75, :first, :last]) \n```", "```py\njulia> describe(iris, stats=:all)\n```", "```py\njulia> using Statistics \njulia> mean(iris[:SepalLength]) \n5.843333333333334 \n\n```", "```py\njulia> median(iris[:SepalLength]) \n5.8 \n```", "```py\njulia> std(iris[:SepalLength]) \n0.828066127977863 \n\n```", "```py\njulia> for x in names(iris)[1:end-1]    \n        for y in names(iris)[1:end-1] \n          println(\"$x \\t $y \\t $(cor(iris[x], iris[y]))\") \n        end \n        println(\"-------------------------------------------\") \n      end\n\n```", "```py\nSepalLength       SepalLength    1.0 \nSepalLength       SepalWidth     -0.11756978413300191 \nSepalLength       PetalLength    0.8717537758865831 \nSepalLength       PetalWidth     0.8179411262715759 \n------------------------------------------------------------ \nSepalWidth         SepalLength    -0.11756978413300191 \nSepalWidth         SepalWidth     1.0 \nSepalWidth         PetalLength    -0.42844010433053953 \nSepalWidth         PetalWidth     -0.3661259325364388 \n------------------------------------------------------------ \nPetalLength       SepalLength    0.8717537758865831 \nPetalLength       SepalWidth     -0.42844010433053953 \nPetalLength       PetalLength    1.0 \nPetalLength       PetalWidth     0.9628654314027963 \n------------------------------------------------------------ \nPetalWidth         SepalLength    0.8179411262715759 \nPetalWidth         SepalWidth     -0.3661259325364388 \nPetalWidth         PetalLength    0.9628654314027963 \nPetalWidth         PetalWidth     1.0 \n------------------------------------------------------------ \n\n```", "```py\njulia> for x in names(iris)[1:end-1] \n         for y in names(iris)[1:end-1] \n           println(\"$x \\t $y \\t $(cov(iris[x], iris[y]))\") \n         end \n         println(\"--------------------------------------------\") \n       end \n```", "```py\nSepalLength       SepalLength    0.6856935123042507 \nSepalLength       SepalWidth     -0.04243400447427293 \nSepalLength       PetalLength    1.2743154362416105 \nSepalLength       PetalWidth     0.5162706935123043 \n------------------------------------------------------- \nSepalWidth         SepalLength    -0.04243400447427293 \nSepalWidth         SepalWidth     0.189979418344519 \nSepalWidth         PetalLength    -0.3296563758389262 \nSepalWidth         PetalWidth     -0.12163937360178968 \n------------------------------------------------------- \nPetalLength       SepalLength    1.2743154362416105 \nPetalLength       SepalWidth     -0.3296563758389262 \nPetalLength       PetalLength    3.1162778523489933 \nPetalLength       PetalWidth     1.2956093959731543 \n------------------------------------------------------- \nPetalWidth         SepalLength    0.5162706935123043 \nPetalWidth         SepalWidth     -0.12163937360178968 \nPetalWidth         PetalLength    1.2956093959731543 \nPetalWidth         PetalWidth     0.5810062639821031 \n------------------------------------------------------- \n```", "```py\njulia> rand(iris[:SepalLength]) \n7.4\n```", "```py\njulia> rand(iris[:SepalLength], 5) \n5-element Array{Float64,1}: \n 6.9 \n 5.8 \n 6.7 \n 5.0 \n 5.6 \n\n```", "```py\njulia> sepallength = Array(iris[:SepalLength]) \n150-element Array{Float64,1}: \n 5.1 \n 4.9 \n 4.7 \n 4.6 \n 5.0 \n # ... output truncated ... \n\n```", "```py\njulia> irisarr = convert(Array, iris[:,:]) \n150×5 Array{Any,2}: \n 5.1  3.5  1.4  0.2  CategoricalString{UInt8} \"setosa\"    \n 4.9  3.0  1.4  0.2  CategoricalString{UInt8} \"setosa\"    \n 4.7  3.2  1.3  0.2  CategoricalString{UInt8} \"setosa\"    \n 4.6  3.1  1.5  0.2  CategoricalString{UInt8} \"setosa\"    \n 5.0  3.6  1.4  0.2  CategoricalString{UInt8} \"setosa\"   \n # ... output truncated ... \n```", "```py\njulia> plot(iris, x=:SepalLength, y=:PetalLength, color=:Species) \n```", "```py\njulia> plot(iris, x=:Species, y=:PetalLength, Geom.boxplot)\n\n```", "```py\njulia> plot(iris, x=:PetalLength, color=:Species, Geom.histogram) \n```", "```py\njulia> plot(iris, x=:PetalWidth, color=:Species, Geom.histogram)\n```", "```py\njulia> plot(iris, x=:PetalWidth, y=:PetalLength, color=:Species)\n```", "```py\njulia> iris[1:3, [:PetalLength, :PetalWidth]] \n3×2 DataFrames.DataFrame \n│ Row │ PetalLength │ PetalWidth │ \n├─────┼─────────────┼────────────┤ \n│ 1   │ 1.4         │ 0.2        │ \n│ 2   │ 1.4         │ 0.2        │ \n│ 3   │ 1.3         │ 0.2        │ \n\n```", "```py\njulia> iris[trues(150), [:PetalLength, :PetalWidth]] \n150 rows since trues(150) constructs an array of 150 elements that are all initialized as true. The same logic applies to cols, with the added benefit that they can also be accessed by name.\n```", "```py\njulia> test_data = iris[rand(150) .<= 0.1, [:PetalLength, :PetalWidth, :Species]] \n10×3 DataFrames.DataFrame \n│ Row │ PetalLength │ PetalWidth │ Species      │ \n├─────┼─────────────┼────────────┼──────────────┤ \n│ 1   │ 1.1         │ 0.1        │ \"setosa\"     │ \n│ 2   │ 1.9         │ 0.4        │ \"setosa\"     │ \n│ 3   │ 4.6         │ 1.3        │ \"versicolor\" │ \n│ 4   │ 5.0         │ 1.7        │ \"versicolor\" │ \n│ 5   │ 3.7         │ 1.0        │ \"versicolor\" │ \n│ 6   │ 4.7         │ 1.5        │ \"versicolor\" │ \n│ 7   │ 4.6         │ 1.4        │ \"versicolor\" │ \n│ 8   │ 6.1         │ 2.5        │ \"virginica\"  │ \n│ 9   │ 6.9         │ 2.3        │ \"virginica\"  │ \n│ 10  │ 6.7         │ 2.0        │ \"virginica\"  │ \n\n```", "```py\npkg> add CSV \njulia> using CSV \njulia> CSV.write(\"test_data.csv\", test_data)  \n```", "```py\njulia> td = CSV.read(\"test_data.csv\") \n10×3 DataFrames.DataFrame \n│ Row │ PetalLength │ PetalWidth │ Species      │ \n├─────┼─────────────┼────────────┼──────────────┤ \n│ 1   │ 1.1         │ 0.1        │ \"setosa\"     │ \n│ 2   │ 1.9         │ 0.4        │ \"setosa\"     │ \n│ 3   │ 4.6         │ 1.3        │ \"versicolor\" │ \n│ 4   │ 5.0         │ 1.7        │ \"versicolor\" │ \n│ 5   │ 3.7         │ 1.0        │ \"versicolor\" │ \n│ 6   │ 4.7         │ 1.5        │ \"versicolor\" │ \n│ 7   │ 4.6         │ 1.4        │ \"versicolor\" │ \n│ 8   │ 6.1         │ 2.5        │ \"virginica\"  │ \n│ 9   │ 6.9         │ 2.3        │ \"virginica\"  │ \n│ 10  │ 6.7         │ 2.0        │ \"virginica\"  │ \n```", "```py\npkg> add Feather  \njulia> using Feather\n```", "```py\njulia> Feather.write(\"test_data.feather\", test_data) \n\n```", "```py\njulia> Feather.read(\"test_data.feather\") \n10×3 DataFrames.DataFrame \n│ Row │ PetalLength │ PetalWidth │ Species      │ \n├─────┼─────────────┼────────────┼──────────────┤ \n│ 1   │ 1.1         │ 0.1        │ \"setosa\"     │ \n│ 2   │ 1.9         │ 0.4        │ \"setosa\"     │ \n│ 3   │ 4.6         │ 1.3        │ \"versicolor\" │ \n│ 4   │ 5.0         │ 1.7        │ \"versicolor\" │ \n│ 5   │ 3.7         │ 1.0        │ \"versicolor\" │ \n│ 6   │ 4.7         │ 1.5        │ \"versicolor\" │ \n│ 7   │ 4.6         │ 1.4        │ \"versicolor\" │ \n│ 8   │ 6.1         │ 2.5        │ \"virginica\"  │ \n│ 9   │ 6.9         │ 2.3        │ \"virginica\"  │ \n│ 10  │ 6.7         │ 2.0        │ \"virginica\"  │ \n\n```", "```py\npkg> add Mongo, JSON \n```", "```py\njulia> using Mongo, LibBSON, JSON \n```", "```py\njulia> client = MongoClient() \n```", "```py\njulia> storage = MongoCollection(client, \"db\", \"dataframes\")  \n```", "```py\njulia> datadict = JSON.parse(JSON.json(test_data)) \n```", "```py\njulia> datadict[\"id\"] = \"iris_test_data\" \n```", "```py\njulia> insert(storage, datadict) \n```", "```py\nJulia> data_from_mongo = first(find(storage, query(\"id\" => \"iris_test_data\"))) \n```", "```py\njulia> df_from_mongo = DataFrame() \n0×0 DataFrames.DataFrame \n\n```", "```py\nfor i in 1:length(data_from_mongo[\"columns\"]) \n  df_from_mongo[Symbol(data_from_mongo[\"colindex\"][\"names\"][i])] =  \nArray(data_from_mongo[\"columns\"][i]) \nend \njulia> df_from_mongo \n10×3 DataFrames.DataFrame \n│ Row │ PetalLength │ PetalWidth │ Species      │ \n├─────┼─────────────┼────────────┼──────────────┤ \n│ 1   │ 1.1         │ 0.1        │ \"setosa\"     │ \n│ 2   │ 1.9         │ 0.4        │ \"setosa\"     │ \n│ 3   │ 4.6         │ 1.3        │ \"versicolor\" │ \n│ 4   │ 5.0         │ 1.7        │ \"versicolor\" │ \n│ 5   │ 3.7         │ 1.0        │ \"versicolor\" │ \n│ 6   │ 4.7         │ 1.5        │ \"versicolor\" │ \n│ 7   │ 4.6         │ 1.4        │ \"versicolor\" │ \n│ 8   │ 6.1         │ 2.5        │ \"virginica\"  │ \n│ 9   │ 6.9         │ 2.3        │ \"virginica\"  │ \n│ 10  │ 6.7         │ 2.0        │ \"virginica\"  │ \n\n```"]