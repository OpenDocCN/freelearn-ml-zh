["```py\nIn [24]: tfidf = feature_extraction.text.TfidfTransformer()In [25]: X_new = tfidf.fit_transform(X)\n```", "```py\nIn [1]: import matplotlib.pyplot as plt\n...     %matplotlib inline\n...     plt.style.use('ggplot')\n```", "```py\nIn [2]: from sklearn.datasets.samples_generator import make_blobs\n...     X, y_true = make_blobs(n_samples=300, centers=4,\n...                            cluster_std=1.0, random_state=10)\n...     plt.scatter(X[:, 0], X[:, 1], s=100);\n```", "```py\nIn [3]: import cv2\n...     criteria = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER,\n...                 10, 1.0)\n...     flags = cv2.KMEANS_RANDOM_CENTERS\n```", "```py\nIn [4]: import numpy as np\n...     compactness, labels, centers = cv2.kmeans(X.astype(np.float32),\n...                                               4, None, criteria,\n...                                               10, flags)\n```", "```py\nIn [5]: compactness\nOut[5]: 527.01581170992\n```", "```py\nIn [6]: plt.scatter(X[:, 0], X[:, 1], c=labels, s=50, cmap='viridis')\n...     plt.scatter(centers[:, 0], centers[:, 1], c='black', s=200,\n...                 alpha=0.5);\n```", "```py\nIn [7]: from sklearn.metrics import pairwise_distances_argmin\n...     def find_clusters(X, n_clusters, rseed=5):\n```", "```py\n        ...         rng = np.random.RandomState(rseed)\n        ...         i = rng.permutation(X.shape[0])[:n_clusters]\n        ...         centers = X[i]\n```", "```py\n        ...         while True:\n        ...         labels = pairwise_distances_argmin(X, centers)\n```", "```py\n        ...          new_centers = np.array([X[labels ==\n                     i].mean(axis=0)\n```", "```py\n        ...             for i in range(n_clusters)])\n        ...             if np.all(centers == new_centers):\n        ...                break\n        ...             centers = new_centers\n```", "```py\n        ...             return centers, labels\n```", "```py\nIn [8]: centers, labels = find_clusters(X, 4)\n...     plt.scatter(X[:, 0], X[:, 1], c=labels, s=100, cmap='viridis');\n```", "```py\nIn [9]: centers, labels = find_clusters(X, 4, rseed=10)\n...     plt.scatter(X[:, 0], X[:, 1], c=labels, s=100, cmap='viridis');\n```", "```py\nIn [10]: criteria = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER,...                  10, 1.0)...      flags = cv2.KMEANS_RANDOM_CENTERS... compactness, labels, centers ...\n```", "```py\nIn [14]: from sklearn.datasets import make_moons\n...      X, y = make_moons(200, noise=.05, random_state=12)\n```", "```py\nIn [15]: criteria = (cv2.TERM_CRITERIA_EPS +\n...                  cv2.TERM_CRITERIA_MAX_ITER, 10, 1.0)\n...      flags = cv2.KMEANS_RANDOM_CENTERS\n...      compactness, labels, centers = cv2.kmeans(X.astype(np.float32),\n...                                                2, None, criteria,\n...                                                10, flags)\n...      plt.scatter(X[:, 0], X[:, 1], c=labels, s=100, cmap='viridis');\n```", "```py\nIn [16]: from sklearn.cluster import SpectralClustering\n```", "```py\nIn [17]: model = SpectralClustering(n_clusters=2,\n...                                 affinity='nearest_neighbors',\n...                                 assign_labels='kmeans')\n...      labels = model.fit_predict(X)\n...      plt.scatter(X[:, 0], X[:, 1], c=labels, s=100, cmap='viridis');\n```", "```py\nIn [1]: import cv2...     import numpy as np...     lena = cv2.imread('data/lena.jpg', cv2.IMREAD_COLOR)\n```", "```py\nIn [2]: import matplotlib.pyplot as plt...     %matplotlib inline...     plt.style.use('ggplot')\n```", "```py\nIn [3]: plt.rc('axes', **{'grid': False})\n```", "```py\nIn [4]: plt.imshow(cv2.cvtColor(lena, cv2.COLOR_BGR2RGB)) ...\n```", "```py\nIn [9]: criteria = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER,\n...                 10, 1.0)\n...     flags = cv2.KMEANS_RANDOM_CENTERS\n...     img_data = img_data.astype(np.float32)\n...     compactness, labels, centers = cv2.kmeans(img_data,\n...                                               16, None, criteria,\n...                                               10, flags)\n```", "```py\nIn [10]: centers\nOut[10]: array([[ 0.29973754,  0.31500012,  0.48251548],\n                [ 0.27192295,  0.35615689,  0.64276862],\n                [ 0.17865284,  0.20933454,  0.41286203],\n                [ 0.39422086,  0.62827665,  0.94220853],\n                [ 0.34117648,  0.58823532,  0.90196079],\n                [ 0.42996961,  0.62061119,  0.91163337],\n                [ 0.06039202,  0.07102439,  0.1840712 ],\n                [ 0.5589878 ,  0.6313886 ,  0.83993536],\n                [ 0.37320262,  0.54575169,  0.88888896],\n                [ 0.35686275,  0.57385623,  0.88954246],\n                [ 0.47058824,  0.48235294,  0.59215689],\n                [ 0.34346411,  0.57483661,  0.88627452],\n                [ 0.13815609,  0.12984112,  0.21053818],\n                [ 0.3752504 ,  0.47029912,  0.75687987],\n                [ 0.31909946,  0.54829341,  0.87378371],\n                [ 0.40409693,  0.58062142,  0.8547557 ]], dtype=float32)\n```", "```py\nIn [11]: new_colors = centers[labels].reshape((-1, 3))\n```", "```py\nIn [12]: plot_pixels(img_data, colors=new_colors, \n...      title=\"Reduce color space: 16 colors\")   \n```", "```py\nIn [13]: lena_recolored = new_colors.reshape(lena.shape)\n```", "```py\nIn [14]: plt.figure(figsize=(10, 6))\n...      plt.imshow(cv2.cvtColor(lena_recolored, cv2.COLOR_BGR2RGB));\n...      plt.title('16-color image')\n```", "```py\nIn [1]: from sklearn.datasets import load_digits\n...     digits = load_digits()\n...     digits.data.shape\nOut[1]: (1797, 64)\n```", "```py\nIn [2]: import cv2...     criteria = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER,...                 10, 1.0)...     flags = cv2.KMEANS_RANDOM_CENTERS\n```", "```py\nIn [3]: import numpy as np...     digits.data = digits.data.astype(np.float32)...     compactness, clusters, centers = cv2.kmeans(digits.data, 10, None,...                                                 criteria, 10, flags)\n```", "```py\nIn [1]: from sklearn.datasets import make_blobs\n...     X, y = make_blobs(random_state=100, n_samples=10)\n```", "```py\nIn [2]: from sklearn import cluster\n...     agg = cluster.AgglomerativeClustering(n_clusters=3)\n```", "```py\nIn [3]: labels = agg.fit_predict(X)\n```", "```py\nIn [4]: import matplotlib.pyplot as plt\n... %matplotlib inline\n... plt.style.use('ggplot')\n... plt.scatter(X[:, 0], X[:, 1], c=labels, s=100)\n```"]