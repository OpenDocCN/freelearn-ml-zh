["```py\n(defn update-totals [n]\n  (comp #(update-in % [:count] inc)\n        #(update-in % [:total] + n)\n        #(update-in % [:sq-total] + (Math/pow n 2))))\n\n(defn accumulator []\n  (let [totals (atom {:total 0, :count 0, :sq-total 0})]\n    (fn [n]\n      (let [result (swap! totals (update-totals n))\n            cnt (result :count)\n            avg (/ (result :total) cnt)]\n        {:average avg\n         :variance (- (/ (result :sq-total) cnt)\n                      (Math/pow avg 2))}))))\n```", "```py\n(defn density [x average variance]\n  (let [sigma (Math/sqrt variance)\n        divisor (* sigma (Math/sqrt (* 2 Math/PI)))\n        exponent (/ (Math/pow (- x average) 2)\n                    (if (zero? variance) 1\n                        (* 2 variance)))]\n    (/ (Math/exp (- exponent))\n       (if (zero? divisor) 1\n           divisor))))\n```", "```py\n (defn density-detector []\n  (let [acc (accumulator)]\n    (fn [x]\n      (let [state (acc x)]\n        (density x (state :average) (state :variance))))))\n```", "```py\n (defn get-or-add-key [a key create-fn]\n  (if (contains? @a key)\n    (@a key)\n    ((swap! a #(assoc-in % [key] (create-fn))) key)))\n```", "```py\n(defn atom-hash-map [create-fn]\n  (let [a (atom {})]\n    (fn [x]\n      (get-or-add-key a x create-fn))))\n\n(defn get-var-density [detector]\n  (fn [kv]\n    (let [[k v] kv]\n      ((detector k) v))))\n\n(defn detector []\n  (let [detector (atom-hash-map density-detector)]\n    (fn [x]\n      (reduce * (map (get-var-density detector) x)))))\n```", "```py\nuser> (def d (detector))\n#'user/d\nuser> (d {:x 10 :y 10 :z 10})\n1.0\nuser> (d {:x 10 :y 10 :z 10})\n1.0\n```", "```py\nuser> (d {:x 11 :y 9 :z 15})\n0.0060352535208831985\nuser> (d {:x 10 :y 10 :z 14})\n0.07930301229115849\n```", "```py\nuser> (d {:x 100 :y 10 :z 14})\n1.9851385000301642E-4\nuser> (d {:x 101 :y 9 :z 12})\n5.589934974999084E-4\n```", "```py\n(def ? nil)\n(def data\n  {\"User 1\" {\"Item A\" 5 \"Item B\" 3 \"Item C\" 2 \"Item D\" ?}\n   \"User 2\" {\"Item A\" 3 \"Item B\" 4 \"Item C\" ? \"Item D\" 4}\n   \"User 3\" {\"Item A\" ? \"Item B\" 2 \"Item C\" 5 \"Item D\" 3}\n   \"User 4\" {\"Item A\" 4 \"Item B\" ? \"Item C\" 3 \"Item D\" ?}})\n```", "```py\n(defn flatten-to-vec [coll]\n  (reduce #(apply conj %1 %2)\n          []\n          coll))\n```", "```py\n(defn map-vals [f m]\n  (persistent!\n    (reduce (fn [m [k v]]\n              (assoc! m k (f k v)))\n            (transient m) m)))\n\n(defn map-nested-vals [f m]\n  (map-vals\n   (fn [k1 inner-map]\n     (map-vals\n      (fn [k2 val] (f [k1 k2] val)) inner-map)) m))\n```", "```py\nuser> (map-vals #(inc %2) {:foo 1 :bar 2})\n{:foo 2, :bar 3}\n\nuser> (map-nested-vals (fn [keys v] (inc v)) {:foo {:bar 2}})\n{:foo {:bar 3}}\n```", "```py\n(defn train [data]\n  (let [diff-map      (for [[user preferences] data]\n                        (for [[i u-i] preferences\n                              [j u-j] preferences\n                              :when (and (not= i j)\n                                         u-i u-j)]\n                          [[i j] (- u-i u-j)]))\n        diff-vec      (flatten-to-vec diff-map)\n        update-fn     (fn [[freqs-so-far diffs-so-far]\n                           [item-pair diff]]\n                        [(update-in freqs-so-far\n                                    item-pair (fnil inc 0))\n                         (update-in diffs-so-far\n                                    item-pair (fnil + 0) diff)])\n        [freqs\n         total-diffs] (reduce update-fn\n                              [{} {}] diff-vec)\n        differences   (map-nested-vals\n                       (fn [item-pair diff]\n                         (/ diff (get-in freqs item-pair)))\n                       total-diffs)]\n    {:freqs freqs\n     :differences differences}))\n```", "```py\n(defn predict [{:keys [differences freqs]\n                :as model}\n               preferences\n               item]\n  (let [get-rating-fn (fn [[num-acc denom-acc]\n                           [i rating]]\n                        (let [freqs-ji (get-in freqs [item i])]\n                          [(+ num-acc\n                              (* (+ (get-in differences [item i])\n                                    rating)\n                                 freqs-ji))\n                           (+ denom-acc freqs-ji)]))]\n    (->> preferences\n         (filter #(not= (first %) item))\n         (reduce get-rating-fn [0 0])\n         (apply /))))\n```", "```py\nuser> (def trained-model (train data))\n#'user/trained-model\nuser> (predict trained-model {\"Item A\" 2} \"Item B\")\n3/2\n```", "```py\n(defn mapmap\n  ([vf s]\n     (mapmap identity vf s))\n  ([kf vf s]\n     (zipmap (map kf s)\n             (map vf s))))\n\n(defn known-items [model]\n  (-> model :differences keys))\n\n(defn predictions\n  ([model preferences]\n     (predictions\n      model\n      preferences\n      (filter #(not (contains? preferences %))\n              (known-items model))))\n  ([model preferences items]\n     (mapmap (partial predict model preferences)\n             items)))\n```", "```py\nuser> (known-items trained-model)\n(\"Item D\" \"Item C\" \"Item B\" \"Item A\")\n```", "```py\nuser> (predictions trained-model {\"Item A\" 2} [\"Item C\" \"Item D\"])\n{\"Item D\" 3, \"Item C\" 0}\nuser> (predictions trained-model {\"Item A\" 2})\n{\"Item B\" 3/2, \"Item C\" 0, \"Item D\" 3}\n```", "```py\nuser> (keys  (predictions trained-model {\"Item A\" 2}))\n(\"Item B\" \"Item C\" \"Item D\")\n```"]