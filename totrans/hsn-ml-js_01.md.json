["```py\nconst graph = new Graph();\n // Make a new input in the graph, called 'x', with shape [] (a Scalar).\n const x: Tensor = graph.placeholder('x', []);\n // Make new variables in the graph, 'a', 'b', 'c' with shape [] and   \n    random\n // initial values.\n const a: Tensor = graph.variable('a', Scalar.new(Math.random()));\n const b: Tensor = graph.variable('b', Scalar.new(Math.random()));\n const c: Tensor = graph.variable('c', Scalar.new(Math.random()));\n```", "```py\nfunction varTest() {\n  var x = 1;\n  if (true) {\n    var x = 2;  // same variable!\n    console.log(x);  // 2\n  }\n  console.log(x);  // 2\n }\n\n function letTest() {\n  let x = 1;\n  if (true) {\n    let x = 2;  // different variable\n    console.log(x);  // 2\n  }\n  console.log(x);  // 1\n }\n```", "```py\nconst a = 1;\na = 2;\n```", "```py\nconst obj = {};\nobj.name = ‘My Object’;\n```", "```py\nvar Automobile = function(weight, speed) {\n   this.weight = weight;\n   this.speed = speed;\n}\nAutomobile.prototype.accelerate = function(extraSpeed) {\n   this.speed += extraSpeed;\n}\nvar RaceCar = function (weight, speed, boost) {\n   Automobile.call(this, weight, speed);\n   this.boost = boost;\n}\nRaceCar.prototype = Object.create(Automobile.prototype);\nRaceCar.prototype.constructor = RaceCar;\nRaceCar.prototype.accelerate = function(extraSpeed) {\n  this.speed += extraSpeed + this.boost;\n}\n```", "```py\nclass Automobile {\n constructor(weight, speed) {\n   this.weight = weight;\n   this.speeed = speed;\n }\n accelerate(extraSpeed) {\n   this.speed += extraSpeed;\n }\n}\nclass RaceCar extends Automobile {\n constructor(weight, speed, boost) {\n   super(weight, speed);\n   this.boost = boost;\n }\n accelerate(extraSpeed) {\n   this.speed += extraSpeed + this.boost;\n }\n}\n```", "```py\nClass Automobile {\n…\n}\nexport default Automobile\n```", "```py\nimport Automobile from ‘./classes/automobile.js’;\nconst myCar = new Automobile();\n```", "```py\n$(“#link”).click(function() {\n  var $self = $(this);\n  doSomethingAsync(1000, function(resp) {\n    $self.addClass(“wasFaded”);\n    var processedItems = resp.map(function(item) {\n      return processItem(item);\n    });\n    return shipItems(processedItems);\n  });\n});\n```", "```py\n$(“#link”).click(function() {\n  dozsSomethingAsync(1000, resp => {\n    $(this).addClass(“wasFaded”);\n    const processedItems = resp.map(item => processItem(Item));\n    return shipItems(processedItems);\n  });\n});\n```", "```py\nconst double = function(number) {\n  return number * 2;\n}\n```", "```py\nconst double = number => number * 2;\n// Is equal to:\nconst double = (number) => { return number * 2; }\n```", "```py\nconst sorted = names.sort(function (a, b) {\n  return a.localeCompare(b);\n});\n```", "```py\nconst sorted = names.sort((a, b) => a.localeCompare(b));\n```", "```py\nvar name = ‘Burak’;\nvar title = ‘Author’;\nvar object = {name: name, title: title};\n```", "```py\nconst name = ‘Burak’;\nconst title = ‘Author’;\nconst object = {name, title};\n```", "```py\nfunction combinePreferences(userPreferences) {\n var defaultPreferences = {size: ‘large’, mode: ‘view’};\n return Object.assign({}, defaultPreferences, userPreferences);\n}\n```", "```py\nfunction combinePreferences(userPreferences) {\n var defaultPreferences = {size: ‘large’, mode: ‘view’};\n return {...defaultPreferences, ...userPreferences};\n}\n```", "```py\nvar items = [1, 2, 3 ];\nfor (var index in items) {\nvar item = items[index];\n…\n }\n```", "```py\nconst items = [1, 2, 3 ];\nfor (const item of items) {\n …\n }\n```", "```py\nfunction updateUser(user, settings, onComplete, onError) {\n  makeAsyncApiRequest(user, settings, function(response) {\n    if (response.isValid()) {\n      onComplete(response.getBody());\n    } else {\n      onError(response.getError())\n    }\n  });\n}\nupdateUser(user, settings, function(body) { ... }, function(error) { ... });\n```", "```py\nfunction updateUser(user, settings) {\n  return new Promise((resolve, reject) => {\n    makeAsyncApiRequest(user, settings, function(response) {\n      if (response.isValid()) {\n        resolve(response.getBody());\n      } else {\n        reject(response.getError())\n      }\n    });\n  });\n}\nupdateUser(user, settings)\n  .then(\n    body => { ... },\n    error => { ... }\n  );\n```", "```py\nfunction resolveAfter2Seconds() {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve('resolved');\n    }, 2000);\n  });\n}\nasync function asyncCall() {\n  console.log('calling');\n  var result = await resolveAfter2Seconds();\n  console.log(result);\n  // expected output: \"resolved\"\n}\nasyncCall();\n```", "```py\n$ node --version\n V9.4.0\n```", "```py\n$ npm --version\n 5.6.0\n```", "```py\nyarn add -D babel-cli browserify babelify babel-preset-env\n```", "```py\nconst greeting = name => 'Hello, ' + name + '!';\nexport default greeting;\n```", "```py\nimport greeting from './greeting';\nconsole.log(greeting(process.argv[2] || 'world'));\n```", "```py\n\"scripts\": {\n \"build-web\": \"browserify src/index.js -o dist/index.js -t [ babelify -  \n  -presets [ env ] ]\",\n \"build-cli\": \"browserify src/index.js --node -o dist/index.js -t [  \n  babelify --presets [ env ] ]\",\n \"start\": \"yarn build-cli && node dist/index.js\"\n},\n```", "```py\n{\n\"name\": \"Ch1-Ex1\",\n\"version\": \"0.0.1\",\n\"description\": \"Chapter one example\",\n\"main\": \"src/index.js\",\n\"author\": \"Burak Kanber\",\n\"license\": \"MIT\",\n\"scripts\": {\n  \"build-web\": \"browserify src/index.js -o dist/index.js -t [ babelify --presets [ env ] ]\",\n  \"build-cli\": \"browserify src/index.js --node -o dist/index.js -t [ babelify --presets [ env ] ]\",\n  \"start\": \"yarn build-cli && node dist/index.js\"\n},\n\"dependencies\": {\n  \"babel-core\": \"^6.26.0\",\n  \"babel-preset-env\": \"^1.6.1\",\n  \"babelify\": \"^8.0.0\",\n  \"browserify\": \"^15.1.0\"\n}}\n```", "```py\n$ yarn build-cli\nyarn run v1.3.2\n$ browserify src/index.js --node -o dist/index.js -t [ babelify --presets [ env ] ]\nDone in 0.59s.\n```", "```py\n$ node dist/index.js\nHello, world!\n```", "```py\n$ node dist/index.js Burak\nHello, Burak!\n```", "```py\n$ yarn build-web\nyarn run v1.3.2\n$ browserify src/index.js -o dist/index.js -t [ babelify --presets [ env ] ]\nDone in 0.61s.\n$ node dist/index.js Burak\nHello, world!\n```", "```py\n$ yarn start \"good readers\"\nyarn run v1.3.2\n$ yarn build-cli && node dist/index.js 'good readers'\n$ browserify src/index.js --node -o dist/index.js -t [ babelify --presets [ env ] ]\nHello, good readers!\nDone in 1.05s.\n```"]