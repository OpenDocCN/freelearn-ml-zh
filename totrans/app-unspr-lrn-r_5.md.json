["```py\n    string_to_hash<-\"print('Take the cake')\"\n    ```", "```py\n    total_possible_hashes<-10000\n    ```", "```py\n    numeric<-utf8ToInt(string_to_hash)\n    ```", "```py\n    print(numeric)\n    ```", "```py\n      [1] 112 114 105 110 116  40  39  84  97 107 101  32 116 104 101  32  99  97 107[20] 101  39  41\n    ```", "```py\n    hash<-sum((numeric+123)^2) %% total_possible_hashes\n    ```", "```py\n    get_hash<-function(string_to_hash, total_possible_hashes){\n    numeric<-utf8ToInt(string_to_hash)\n    hash<-sum((numeric+123)^2) %% total_possible_hashes\n    return(hash)\n    }\n    ```", "```py\n    script_1<-\"print('Take the cake')\"\n    script_2<-\"print('Make the cake')\"\n    script_3<-\"print('Take the rake')\"\n    script_4<-\"print('Take the towel')\"\n    ```", "```py\n    print(get_hash(script_1,10000))\n    print(get_hash(script_2,10000))\n    print(get_hash(script_3,10000))\n    print(get_hash(script_4,10000))\n    ```", "```py\ninstall.packages('digest')\nlibrary(digest)\nprint(digest(string_to_hash,algo='md5'))\n```", "```py\n[1] \"a3d9d1d7037a02d01526bfe25d1b7126\"\n```", "```py\n    filepath<-'alamo.jpg'\n    im <- imager::load.image(file =filepath) \n    ```", "```py\n    im<-imager::rm.alpha(im)\n    im<-imager::grayscale(im)\n    im<-imager::imsplit(im,axis = \"x\", nb = 10)   \n    ```", "```py\n    matrix <- matrix(nrow = 10, ncol = 10)\n    ```", "```py\n    for (i in 1:10) {\n      is <- imager::imsplit(im = im[[i]], axis = \"y\", nb = 10)\n      for (j in 1:10) {\n        matrix[j,i] <- mean(is[[j]])\n      }\n    }\n    ```", "```py\n    print(matrix)\n    ```", "```py\n    brightnesscomparison<-function(x,y){\n    compared<-0\n    if(abs(x/y-1)>0.1){\n    if(x>y){\n    compared<-1\n    }\n    if(x<y){\n    compared<-(-1)\n    }\n    }\n    return(compared)\n    }\n    ```", "```py\n    i<-5\n    j<-5\n    left<-brightnesscomparison(matrix[i,j-1],matrix[i,j])\n    ```", "```py\n    i<-5\n    j<-5\n    top<-brightnesscomparison(matrix[i-1,j],matrix[i,j])\n    ```", "```py\n    i<-5\n    j<-5\n    left<-brightnesscomparison(matrix[i,j-1],matrix[i,j])\n    ```", "```py\n    i<-5\n    j<-5\n    top<-brightnesscomparison(matrix[i-1,j],matrix[i,j])\n    ```", "```py\n    i<-5\n    j<-5\n    top_left<-brightnesscomparison(matrix[i-1,j-1], matrix[i,j])\n    bottom_left<-brightnesscomparison(matrix[i+1,j-1],matrix[i,j])\n    top_right<-brightnesscomparison(matrix[i-1,j+1],matrix[i,j])\n    right<-brightnesscomparison(matrix[i,j+1],matrix[i,j])\n    bottom_right<-brightnesscomparison(matrix[i+1,j+1],matrix[i,j])\n    bottom<-brightnesscomparison(matrix[i+1,j],matrix[i,j])\n    ```", "```py\n    comparison<-NULL\n    ```", "```py\n    neighborcomparison<-function(mat,i,j){\n    comparison<-NULL\n    top_left<-0\n    if(i>1 & j>1){\n    top_left<-brightnesscomparison(mat[i-1,j-1],mat[i,j])\n    }\n    left<-0\n    if(j>1){\n    left<-brightnesscomparison(mat[i,j-1],mat[i,j])\n    }\n    bottom_left<-0\n    if(j>1 & i<nrow(mat)){\n    bottom_left<-brightnesscomparison(mat[i+1,j-1],mat[i,j])\n    }\n    top_right<-0\n    if(i>1 & j<nrow(mat)){\n    top_right<-brightnesscomparison(mat[i-1,j+1],mat[i,j])\n    }\n    right<-0\n    if(j<ncol(mat)){\n    right<-brightnesscomparison(mat[i,j+1],mat[i,j])\n    }\n    bottom_right<-0\n    if(i<nrow(mat) & j<ncol(mat)){\n    bottom_right<-brightnesscomparison(mat[i+1,j+1],mat[i,j])\n    }\n    top<-0\n    if(i>1){\n    top<-brightnesscomparison(mat[i-1,j],mat[i,j])\n    }\n    bottom<-0\n    if(i<nrow(mat)){\n    bottom<-brightnesscomparison(mat[i+1,j],mat[i,j])\n    }\n    comparison<-c(top_left,left,bottom_left,bottom,bottom_right,right,top_right,top)\n    return(comparison)\n    }\n    ```", "```py\n    signature<-NULL\n    ```", "```py\n    for (i in 1:nrow(matrix)){\n    for (j in 1:ncol(matrix)){\n    signature<-c(signature,neighborcomparison(matrix,i,j))\n    }\n    }\n    ```", "```py\n    get_signature<-function(matrix){\n    signature<-NULL\n    for (i in 1:nrow(matrix)){\n    for (j in 1:ncol(matrix)){\n    signature<-c(signature,neighborcomparison(matrix,i,j))\n    }\n    }\n    return(signature)\n    }\n    ```", "```py\n    building_signature<-get_signature(matrix)\n    building_signature\n    ```", "```py\ncomparison<-mean(abs(borges_signature-building_signature))\n```", "```py\n    install.packages('psych')\n    install.packages('GPArotation')\n    install.packages('qgraph')\n    ```", "```py\n    library(psych)\n    library(GPArotation)\n    library(qgraph)\n    ```", "```py\n    data(big5)\n    ```", "```py\n    print(head(big5))\n    ```", "```py\n    print(nrow(big5))\n    ```", "```py\n    500\n    ```", "```py\n    print(ncol(big5))\n    ```", "```py\n    240\n    ```", "```py\n    print(range(big5))\n    ```", "```py\n    [1] 1 5\n    ```", "```py\nbig_cor <- cor(big5)\n```", "```py\nsolution <- fa(r = big_cor, nfactors = 5, rotate = \"oblimin\", fm = \"pa\") \n```", "```py\nprint(solution)\n```", "```py\n    solution <- fa(r = big_cor, nfactors = 5, rotate = \"oblimin\", fm = \"pa\") \n    ```", "```py\n    solution <- fa(r = big_cor, nfactors = 3, rotate = \"varimax\", fm = \"minres\")\n    ```", "```py\n    print(solution)\n    ```", "```py\n    parallel <- fa.parallel(big5, fm = 'minres', fa = 'fa')\n    ```"]