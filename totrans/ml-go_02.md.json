["```py\n// Initialize a \"vector\" via a slice.\nvar myvector []float64\n\n// Add a couple of components to the vector.\nmyvector = append(myvector, 11.0)\nmyvector = append(myvector, 5.2)\n\n// Output the results to stdout.\nfmt.Println(myvector)\n```", "```py\n// Create a new vector value.\nmyvector := mat.NewVector(2, []float64{11.0, 5.2})\n```", "```py\n// Initialize a couple of \"vectors\" represented as slices.\nvectorA := []float64{11.0, 5.2, -1.3}\nvectorB := []float64{-7.2, 4.2, 5.1}\n\n// Compute the dot product of A and B\n// (https://en.wikipedia.org/wiki/Dot_product).\ndotProduct := floats.Dot(vectorA, vectorB)\nfmt.Printf(\"The dot product of A and B is: %0.2f\\n\", dotProduct)\n\n// Scale each element of A by 1.5.\nfloats.Scale(1.5, vectorA)\nfmt.Printf(\"Scaling A by 1.5 gives: %v\\n\", vectorA)\n\n// Compute the norm/length of B.\nnormB := floats.Norm(vectorB, 2)\nfmt.Printf(\"The norm/length of B is: %0.2f\\n\", normB)\n```", "```py\n// Initialize a couple of \"vectors\" represented as slices.\nvectorA := mat.NewVector(3, []float64{11.0, 5.2, -1.3})\nvectorB := mat.NewVector(3, []float64{-7.2, 4.2, 5.1})\n\n// Compute the dot product of A and B\n// (https://en.wikipedia.org/wiki/Dot_product).\ndotProduct := mat.Dot(vectorA, vectorB)\nfmt.Printf(\"The dot product of A and B is: %0.2f\\n\", dotProduct)\n\n// Scale each element of A by 1.5.\nvectorA.ScaleVec(1.5, vectorA)\nfmt.Printf(\"Scaling A by 1.5 gives: %v\\n\", vectorA)\n\n// Compute the norm/length of B.\nnormB := blas64.Nrm2(3, vectorB.RawVector())\nfmt.Printf(\"The norm/length of B is: %0.2f\\n\", normB)\n```", "```py\n// Create a flat representation of our matrix.\ncomponents := []float64{1.2, -5.7, -2.4, 7.3}\n```", "```py\n// Form our matrix (the first argument is the number of\n// rows and the second argument is the number of columns).\na := mat.NewDense(2, 2, data)\n\n// As a sanity check, output the matrix to standard out.\nfa := mat.Formatted(a, mat.Prefix(\" \"))\nfmt.Printf(\"mat = %v\\n\\n\", fa)\n```", "```py\n$ go build\n$ ./myprogram\nA = [ 1.2 -5.7] \n [-2.4  7.3]\n```", "```py\n// Get a single value from the matrix.\nval := a.At(0, 1)\nfmt.Printf(\"The value of a at (0,1) is: %.2f\\n\\n\", val)\n\n// Get the values in a specific column.\ncol := mat.Col(nil, 0, a)\nfmt.Printf(\"The values in the 1st column are: %v\\n\\n\", col)\n\n// Get the values in a kspecific row.\nrow := mat.Row(nil, 1, a)\nfmt.Printf(\"The values in the 2nd row are: %v\\n\\n\", row)\n\n// Modify a single element.\na.Set(0, 1, 11.2)\n\n// Modify an entire row.\na.SetRow(0, []float64{14.3, -4.2})\n\n// Modify an entire column.\na.SetCol(0, []float64{1.7, -0.3})\n```", "```py\n// Create two matrices of the same size, a and b.\na := mat.NewDense(3, 3, []float64{1, 2, 3, 0, 4, 5, 0, 0, 6})\nb := mat.NewDense(3, 3, []float64{8, 9, 10, 1, 4, 2, 9, 0, 2})\n\n// Create a third matrix of a different size.\nc := mat.NewDense(3, 2, []float64{3, 2, 1, 4, 0, 8})\n\n// Add a and b.\nd := mat.NewDense(0, 0, nil)\nd.Add(a, b)\nfd := mat.Formatted(d, mat.Prefix(\"            \"))\nfmt.Printf(\"d = a + b = %0.4v\\n\\n\", fd)\n\n// Multiply a and c.\nf := mat.NewDense(0, 0, nil)\nf.Mul(a, c)\nff := mat.Formatted(f, mat.Prefix(\"          \"))\nfmt.Printf(\"f = a c = %0.4v\\n\\n\", ff)\n\n// Raising a matrix to a power.\ng := mat.NewDense(0, 0, nil)\ng.Pow(a, 5)\nfg := mat.Formatted(g, mat.Prefix(\"          \"))\nfmt.Printf(\"g = a^5 = %0.4v\\n\\n\", fg)\n\n// Apply a function to each of the elements of a.\nh := mat.NewDense(0, 0, nil)\nsqrt := func(_, _ int, v float64) float64 { return math.Sqrt(v) }\nh.Apply(sqrt, a)\nfh := mat.Formatted(h, mat.Prefix(\"              \"))\nfmt.Printf(\"h = sqrt(a) = %0.4v\\n\\n\", fh)\n```", "```py\n// Create a new matrix a.\na := mat.NewDense(3, 3, []float64{1, 2, 3, 0, 4, 5, 0, 0, 6}) \n\n// Compute and output the transpose of the matrix.\nft := mat.Formatted(a.T(), mat.Prefix(\" \"))\nfmt.Printf(\"a^T = %v\\n\\n\", ft)\n\n// Compute and output the determinant of a.\ndeta := mat.Det(a)\nfmt.Printf(\"det(a) = %.2f\\n\\n\", deta)\n\n// Compute and output the inverse of a.\naInverse := mat.NewDense(0, 0, nil)\nif err := aInverse.Inverse(a); err != nil {\n    log.Fatal(err)\n}\nfi := mat.Formatted(aInverse, mat.Prefix(\" \"))\nfmt.Printf(\"a^-1 = %v\\n\\n\", fi)\n```", "```py\n// Open the CSV file.\nirisFile, err := os.Open(\"../data/iris.csv\")\nif err != nil {\n    log.Fatal(err)\n}\ndefer irisFile.Close()\n\n// Create a dataframe from the CSV file.\nirisDF := dataframe.ReadCSV(irisFile)\n\n// Get the float values from the \"sepal_length\" column as\n// we will be looking at the measures for this variable.\nsepalLength := irisDF.Col(\"sepal_length\").Float()\n\n// Calculate the Mean of the variable.\nmeanVal := stat.Mean(sepalLength, nil)\n\n// Calculate the Mode of the variable.\nmodeVal, modeCount := stat.Mode(sepalLength, nil)\n\n// Calculate the Median of the variable.\nmedianVal, err := stats.Median(sepalLength)\nif err != nil {\n    log.Fatal(err)\n}\n\n// Output the results to standard out.\nfmt.Printf(\"\\nSepal Length Summary Statistics:\\n\")\nfmt.Printf(\"Mean value: %0.2f\\n\", meanVal)\nfmt.Printf(\"Mode value: %0.2f\\n\", modeVal)\nfmt.Printf(\"Mode count: %d\\n\", int(modeCount))\nfmt.Printf(\"Median value: %0.2f\\n\\n\", medianVal)\n```", "```py\n$ go build\n$ ./myprogram\n\nSepal Length Summary Statistics:\nMean value: 5.84\nMode value: 5.00\nMode count: 10\nMedian value: 5.80\n```", "```py\n$ go build\n$ ./myprogram\n\nSepal Length Summary Statistics:\nMean value: 3.76\nMode value: 1.50\nMode count: 14\nMedian value: 4.35\n```", "```py\n// Open the CSV file.\nirisFile, err := os.Open(\"../data/iris.csv\")\nif err != nil {\n    log.Fatal(err)\n}\ndefer irisFile.Close()\n\n// Create a dataframe from the CSV file.\nirisDF := dataframe.ReadCSV(irisFile)\n\n// Get the float values from the \"sepal_length\" column as\n// we will be looking at the measures for this variable.\nsepalLength := irisDF.Col(\"petal_length\").Float()\n\n// Calculate the Max of the variable.\nminVal := floats.Min(sepalLength)\n\n// Calculate the Max of the variable.\nmaxVal := floats.Max(sepalLength)\n\n// Calculate the Median of the variable.\nrangeVal := maxVal - minVal\n\n// Calculate the variance of the variable.\nvarianceVal := stat.Variance(sepalLength, nil)\n\n// Calculate the standard deviation of the variable.\nstdDevVal := stat.StdDev(sepalLength, nil)\n\n// Sort the values.\ninds := make([]int, len(sepalLength))\nfloats.Argsort(sepalLength, inds)\n\n// Get the Quantiles.\nquant25 := stat.Quantile(0.25, stat.Empirical, sepalLength, nil)\nquant50 := stat.Quantile(0.50, stat.Empirical, sepalLength, nil)\nquant75 := stat.Quantile(0.75, stat.Empirical, sepalLength, nil)\n\n// Output the results to standard out.\nfmt.Printf(\"\\nSepal Length Summary Statistics:\\n\")\nfmt.Printf(\"Max value: %0.2f\\n\", maxVal)\nfmt.Printf(\"Min value: %0.2f\\n\", minVal)\nfmt.Printf(\"Range value: %0.2f\\n\", rangeVal)\nfmt.Printf(\"Variance value: %0.2f\\n\", varianceVal)\nfmt.Printf(\"Std Dev value: %0.2f\\n\", stdDevVal)\nfmt.Printf(\"25 Quantile: %0.2f\\n\", quant25)\nfmt.Printf(\"50 Quantile: %0.2f\\n\", quant50)\nfmt.Printf(\"75 Quantile: %0.2f\\n\\n\", quant75)\n```", "```py\n$ go build\n$ ./myprogram\n\nSepal Length Summary Statistics:\nMax value: 6.90\nMin value: 1.00\nRange value: 5.90\nVariance value: 3.11\nStd Dev value: 1.76\n25 Quantile: 1.60\n50 Quantile: 4.30\n75 Quantile: 5.10\n```", "```py\nimport (\n    \"gonum.org/v1/plot\"\n    \"gonum.org/v1/plot/plotter\"\n    \"gonum.org/v1/plot/vg\"\n)\n```", "```py\n// Open the CSV file.\nirisFile, err := os.Open(\"../data/iris.csv\")\nif err != nil {\n    log.Fatal(err)\n}\ndefer irisFile.Close()\n\n// Create a dataframe from the CSV file.\nirisDF := dataframe.ReadCSV(irisFile)\n\n// Create a histogram for each of the feature columns in the dataset.\nfor _, colName := range irisDF.Names() {\n\n    // If the column is one of the feature columns, let's create\n    // a histogram of the values.\n    if colName != \"species\" {\n\n        // Create a plotter.Values value and fill it with the\n        // values from the respective column of the dataframe.\n        v := make(plotter.Values, irisDF.Nrow())\n        for i, floatVal := range irisDF.Col(colName).Float() {\n            v[i] = floatVal\n        }\n\n        // Make a plot and set its title.\n        p, err := plot.New()\n        if err != nil {\n            log.Fatal(err)\n        }\n        p.Title.Text = fmt.Sprintf(\"Histogram of a %s\", colName)\n\n        // Create a histogram of our values drawn\n        // from the standard normal.\n        h, err := plotter.NewHist(v, 16)\n        if err != nil {\n            log.Fatal(err)\n        }\n\n        // Normalize the histogram.\n        h.Normalize(1)\n\n        // Add the histogram to the plot.\n        p.Add(h)\n\n        // Save the plot to a PNG file.\n        if err := p.Save(4*vg.Inch, 4*vg.Inch, colName+\"_hist.png\"); err != nil {\n            log.Fatal(err)\n        }\n    }\n}\n```", "```py\n// Open the CSV file.\nirisFile, err := os.Open(\"../data/iris.csv\")\nif err != nil {\n    log.Fatal(err)\n}\ndefer irisFile.Close()\n\n// Create a dataframe from the CSV file.\nirisDF := dataframe.ReadCSV(irisFile)\n\n// Create the plot and set its title and axis label.\np, err := plot.New()\nif err != nil {\n    log.Fatal(err)\n}\n\np.Title.Text = \"Box plots\"\np.Y.Label.Text = \"Values\"\n\n// Create the box for our data.\nw := vg.Points(50)\n\n// Create a box plot for each of the feature columns in the dataset.\nfor idx, colName := range irisDF.Names() {\n\n    // If the column is one of the feature columns, let's create\n    // a histogram of the values.\n    if colName != \"species\" {\n\n        // Create a plotter.Values value and fill it with the\n        // values from the respective column of the dataframe.\n        v := make(plotter.Values, irisDF.Nrow())\n        for i, floatVal := range irisDF.Col(colName).Float() {\n            v[i] = floatVal\n        }\n\n        // Add the data to the plot.\n        b, err := plotter.NewBoxPlot(w, float64(idx), v)\n        if err != nil {\n            log.Fatal(err)\n        }\n        p.Add(b)\n    }\n}\n\n// Set the X axis of the plot to nominal with\n// the given names for x=0, x=1, etc.\np.NominalX(\"sepal_length\", \"sepal_width\", \"petal_length\", \"petal_width\")\n\nif err := p.Save(6*vg.Inch, 8*vg.Inch, \"boxplots.png\"); err != nil {\n    log.Fatal(err)\n}\n```", "```py\n// Define observed and expected values. Most\n// of the time these will come from your\n// data (website visits, etc.).\nobserved := []float64{48, 52}\nexpected := []float64{50, 50}\n\n// Calculate the ChiSquare test statistic.\nchiSquare := stat.ChiSquare(observed, expected)\n```", "```py\n// Define the observed frequencies.\nobserved := []float64{\n    260.0, // This number is the number of observed with no regular exercise.\n    135.0, // This number is the number of observed with sporatic exercise.\n    105.0, // This number is the number of observed with regular exercise.\n} \n\n// Define the total observed.\ntotalObserved := 500.0\n\n// Calculate the expected frequencies (again assuming the null Hypothesis).\nexpected := []float64{\n    totalObserved * 0.60,\n    totalObserved * 0.25,\n    totalObserved * 0.15,\n}\n\n// Calculate the ChiSquare test statistic.\nchiSquare := stat.ChiSquare(observed, expected)\n\n// Output the test statistic to standard out.\nfmt.Printf(\"\\nChi-square: %0.2f\\n\", chiSquare)\n```", "```py\n$ go build\n$ ./myprogram\n\nChi-square: 18.13\n```", "```py\n// Create a Chi-squared distribution with K degrees of freedom.\n// In this case we have K=3-1=2, because the degrees of freedom\n// for a Chi-squared distribution is the number of possible\n// categories minus one.\nchiDist := distuv.ChiSquared{\n    K: 2.0,\n    Src: nil,\n}\n\n// Calculate the p-value for our specific test statistic.\npValue := chiDist.Prob(chiSquare)\n\n// Output the p-value to standard out.\nfmt.Printf(\"p-value: %0.4f\\n\\n\", pValue)\n```", "```py\n$ go build\n$ ./myprogram\n\nChi-square: 18.13\np-value: 0.0001\n```"]