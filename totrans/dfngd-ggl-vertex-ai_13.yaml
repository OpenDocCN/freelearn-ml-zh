- en: '13'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Document AI – An End-to-End Solution for Processing Documents
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Almost every business relies on some kind of document to convey information
    daily. This can be in the form of emails, contracts, forms, PDFs, and so on. Because
    this data is unstructured, many businesses often fail to take advantage of the
    value coming from this data. If there is a way to convert this huge amount of
    data from documents into machine-readable format, it can help with many useful
    tasks, such as automating business processes, doing analytics, applying AI and
    ML, and more. Considering the size of the data, it’s often not possible to parse
    these documents manually to extract information. Tools such as **optical character
    recognition** (**OCR**) can help in partially automating the task of at least
    converting the document into text format, but it will still be unstructured and
    more effort is required to make it useful.
  prefs: []
  type: TYPE_NORMAL
- en: Document AI is Google Cloud’s managed service that converts unstructured content
    (different types of documents) into structured data. It is an end-to-end cloud-based
    platform for extracting and classifying information in a structured way, such
    as key-value pairs, so that it is easy to make this data useful. Document AI is
    a complex solution that involves many AI and ML-based algorithms such as OCR,
    image recognition, **natural language processing** (**NLP**), entity extraction,
    machine translation, and many others.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will learn how to work with Document AI on GCP to extract
    useful information for any business problem. The following main topics will be
    covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: What is Document AI?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Overview of existing Document AI processors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating custom Document AI processors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The code examples shown in this chapter can be found in the following GitHub
    repository: [https://github.com/PacktPublishing/The-Definitive-Guide-to-Google-Vertex-AI/tree/main/Chapter13](https://github.com/PacktPublishing/The-Definitive-Guide-to-Google-Vertex-AI/tree/main/Chapter13).'
  prefs: []
  type: TYPE_NORMAL
- en: What is Document AI?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Document AI is an end-to-end AI-based solution for extracting and classifying
    useful information from any kind of unstructured documents, including scanned
    images, PDFs, forms, emails, and contracts. Document AI’s solution includes pre-trained
    ML models for extraction and other document-related tasks, and it also provides
    the flexibility to uptrain existing models and train custom models without writing
    much code. Document AI is one unified solution that can help businesses manage
    the entire unstructured document life cycle, ensuring a high level of accuracy
    and low costs to accelerate deployment to meet customer expectations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some key features of Google Cloud’s Document AI platform are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Google’s state-of-the-art AI**: The Document AI platform is built upon Google’s
    industry-leading AI innovations in various fields, including computer vision (including
    OCR), NLP, and semantic search, to make this platform highly accurate and useful.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**A unified console**: It has one unified console that lets us quickly access
    all the related models and tools, including OCR and form parsers. Document AI
    Workbench lets us create custom or uptrain existing models with minimal effort.
    Document AI Warehouse lets us store, search for, and manage documents, and even
    trigger workflows.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Google Knowledge Graph**: We can leverage Google’s Knowledge Graph technology
    to validate and enrich parsed information, such as addresses and phone numbers,
    against entities on the internet.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Human-in-the-loop AI**: This feature can help us achieve higher accuracy
    with the assurance of human review. Along with accuracy, it can also help in interpreting
    predictions using purpose-built tools.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now let’s take a look at Document AI processors.
  prefs: []
  type: TYPE_NORMAL
- en: Document AI processors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A Document AI processor is an interface between a document file and an underlying
    ML model that performs a document processing-related task. A processor can be
    used to classify, split, parse, or analyze a document. Document AI processors
    can be classified into the following three categories:'
  prefs: []
  type: TYPE_NORMAL
- en: '**General**: These are prebuilt processors and can be applied to any use case.
    OCR is an example of a general-purpose processor that is use case or document-independent.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Specialized**: These are also prebuilt processors that are specifically built
    to work well with some fixed types of documents. As these are specialized, they
    are often highly accurate in performing their tasks. Specialized processors are
    more useful in use cases related to identifying verification, lending applications,
    contracts, and payment-related documents such as invoices and receipts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Custom**: These can be created on a use case and requirement basis. Sometimes,
    we may need to uptrain existing models or train custom models. Custom processors
    provide the flexibility of using the solution as per the customer’s needs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Figure 13**.1* can help in determining which processor is more suitable for
    a given use case:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.1 – Document processing overview on Google Cloud](img/B17792_13_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.1 – Document processing overview on Google Cloud
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have a good understanding of the Document AI platform from a theoretical
    perspective, next, we will go through some exercises on how to use this solution
    to solve a business problem.
  prefs: []
  type: TYPE_NORMAL
- en: Overview of existing Document AI processors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As discussed previously, the Document AI platform provides prebuilt parsers
    for general-purpose, as well as some specialized, use cases. As these processors
    are prebuilt, they are readily available to use in any relevant use case with
    very little effort. Before jumping into an example of how these processors work,
    let’s first look at the list of available processors as part of Google Cloud’s
    Document AI platform:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Document OCR**: Identify and extract both machine-printed as well as handwritten
    text from documents in over 200 languages'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Form Parser**: Extract key-value pairs (entity and checkbox), tables, and
    generic entities in addition to OCR text'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Intelligent Document Quality Processor**: Assesses the quality of documents
    based on their readability and provides a quality score'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Document Splitter**: Automatically splits documents based on logical boundaries'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Document AI provides us with numerous specialized processors as well. Some
    common examples of specialized prebuilt processors are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Contract Parser**: Extract text and values from legal contacts, such as agreement
    date, effective date, and parties'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**France Driver License Parser**: Extract fields such as names, document ID,
    date of birth, and so on from French driver’s licenses.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**US Passport Parser**: Extract important fields such as name, date of birth,
    and document ID from US passport images'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Pay Slip Parser**: Extract name, business, and amounts from pay slip documents'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Invoice Parser**: Extract values such as invoice number, supplier name, amount,
    tax amount, due date, and so on'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, let’s go ahead and try out one of these parsers on example documents.
  prefs: []
  type: TYPE_NORMAL
- en: Using Document AI processors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are three major steps to using Document AI processors to start processing
    documents:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Choosing a processor**: Choosing the best processor for a use case is very
    important to get the best results out of it. The documentation of the Document
    AI solution can help in determining the best parser for a given use case.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Creating a processor**: Creating a processor means deploying a prebuilt processor
    to an endpoint so that it can accept requests.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Processing documents**: In this step, we send document processing requests
    to the endpoint to get extracted structured information.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, let’s follow the aforementioned steps and try out one of the parsers. In
    this example, we will try out the general-purpose Document OCR parser to extract
    the text information from an example document.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first step is to open the Google Cloud console, go to **Document AI**,
    and click on **Processor gallery** in the left pane. **Processor gallery** consists
    of all the prebuilt document processors with categories. Go to the **Document
    OCR** parser and click on the **Create processor** button. It will ask us to provide
    a processor name and region to deploy it. After a few seconds, we should be able
    to see this processor inside the **My Processors** tab, as shown in *Figure 13**.2*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.2 – Creating a custom processor within Google Cloud’s Document
    AI](img/B17792_13_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.2 – Creating a custom processor within Google Cloud’s Document AI
  prefs: []
  type: TYPE_NORMAL
- en: 'We can get the prediction endpoint and other useful information by clicking
    on the processor’s name (see *Figure 13**.3*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.3 – Document AI processor details in the Google Cloud console UI](img/B17792_13_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.3 – Document AI processor details in the Google Cloud console UI
  prefs: []
  type: TYPE_NORMAL
- en: 'The console UI, as shown in the previous screenshot, also gives us the option
    to directly upload a document and test the results. Let’s try this out by uploading
    a sample document. To make things a little more complicated and interesting, I
    have written something on a piece of paper in my bad handwriting. Let’s see how
    it works on that (see *Figure 13**.4*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.4 – Document OCR analysis results on an example handwritten image](img/B17792_13_4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.4 – Document OCR analysis results on an example handwritten image
  prefs: []
  type: TYPE_NORMAL
- en: As we can see, Document OCR works great on handwritten documents.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s try this out within a Jupyter Notebook cell to get the output through
    an API request using Python. Upon going to the **MANAGE VERSIONS** tab within
    the console, you can choose from different trained API versions to use (see *Figure
    13**.5*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.5 – Managing versions for Document AI processors](img/B17792_13_5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.5 – Managing versions for Document AI processors
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 13**.6* shows how a Python request can be used to get the response
    from the Document OCR solution from within a notebook. The full code can be accessed
    in the GitHub repository for this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.6 – Using a Python request to get predictions from Document AI
    processors](img/B17792_13_6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.6 – Using a Python request to get predictions from Document AI processors
  prefs: []
  type: TYPE_NORMAL
- en: 'In this screenshot of Jupyter Notebook, we are using the `process_document_sample`
    function. This function is available in Google Cloud’s public GitHub samples.
    This function is also available in the GitHub repository for this chapter. I ran
    the following code snippet for this function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'You must set `api_endpoint` if you’re using a location other than `us`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we must load binary data into the Document AI `RawDocument` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: With that, we have a good idea of how to work with prebuilt Document AI processors
    and get results by using an API call on the underlying ML models. In the next
    section, we will learn how to create a custom processor if a use case doesn’t
    quite fit the prebuilt processors.
  prefs: []
  type: TYPE_NORMAL
- en: Creating custom Document AI processors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If we are unable to find a suitable prebuilt processor for our use case, Document
    AI Workbench lets us build and train our own tailored processors from scratch
    and with minimal effort. If we go to the **Workbench** tab inside Document AI,
    we’ll get the following options for creating a custom processor (see *Figure 13**.7*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.7 – Document AI Workbench for creating custom model-based processors](img/B17792_13_7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.7 – Document AI Workbench for creating custom model-based processors
  prefs: []
  type: TYPE_NORMAL
- en: 'In this exercise, we will work with the **Custom Document Extractor** solution
    to create a custom processor. Once we click on **CREATE PROCESSOR**, we will be
    able to find this processor within the **My Processors** tab. If we click on the
    processor, we will get options for training, evaluating, and testing our custom
    processor, as well as options for managing deployed versions of custom models.
    After training a version, we can also configure the **Human-in-the-loop** feature.
    See *Figure 13**.8* for these options:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.8 – Custom Document AI processor details in the Google Cloud console
    UI](img/B17792_13_8.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.8 – Custom Document AI processor details in the Google Cloud console
    UI
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, creating a custom processor requires a training dataset so that
    we can fine-tune existing ML models on our specific use case-related documents.
    We should only go for a custom processor if the prebuilt general solution is not
    meeting our business expectations in terms of text extraction accuracy. This is
    because curating our own training dataset can be a complex process as it requires
    manual effort. If we have a good dataset already available, then training a custom
    processor is just a few clicks away using the Document AI platform.
  prefs: []
  type: TYPE_NORMAL
- en: Once our custom processor has finished training and shows good results in testing,
    we can move on to deploying it as a model version. This version can then be utilized
    in production by making API calls, much like how prebuilt processors are used.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter highlighted the fact that every business or company uses many forms
    of documents (such as emails, contracts, forms, PDFs, and images) to share and
    store information. Document AI is an end-to-end solution on Google Cloud that
    lets us extract this information in a structured way such that it can be readily
    used to train ML models or perform other downstream tasks to make a lot of value
    out of the information within these documents.
  prefs: []
  type: TYPE_NORMAL
- en: By completing this chapter, you should now be confident about Document AI and
    its importance for every business. You should also have a good understanding of
    prebuilt processors within Document AI and should be able to integrate them into
    their application easily. Finally, if prebuilt processors don’t fulfill your expectations,
    there are options to build custom processors to meet the goal of your use case.
  prefs: []
  type: TYPE_NORMAL
- en: We now have a good understanding of Document AI on Google Cloud. In the next
    chapter, we will learn about more Google productions related to vision, NLP, and
    speech.
  prefs: []
  type: TYPE_NORMAL
