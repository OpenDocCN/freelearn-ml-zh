- en: Chapter 1. Setting Up OpenCV for Java
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 1 章. 为 Java 设置 OpenCV
- en: I'm sure you want to start developing astonishing computer vision applications.
    You must have heard of a nice C/C++ computer vision library called OpenCV to help
    you do so. But in case you would like to develop the applications using your knowledge
    of Java programming, we have good news for you. Since the release of OpenCV 2.4.4
    in January 2013, Java bindings have been officially developed. So you can use
    them not only for desktop Java, but also for Scala development.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我相信您想要开始开发令人惊叹的计算机视觉应用程序。您可能已经听说过一个名为 OpenCV 的优秀的 C/C++ 计算机视觉库，它可以帮助您实现这一目标。但如果您想使用您对
    Java 编程的了解来开发应用程序，我们有一个好消息要告诉您。自 2013 年 1 月 OpenCV 2.4.4 版本发布以来，Java 绑定已经正式开发。因此，您不仅可以在桌面
    Java 中使用它们，还可以用于 Scala 开发。
- en: This chapter will set you up for OpenCV development right away. As Java developers
    are mostly used to working with tools such as **Eclipse**, **NetBeans**, **Apache**
    **Ant**, and **Maven**, we will cover the details of creating a simple OpenCV
    application using the environment that the Java developers are more used to.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将立即为您设置 OpenCV 开发环境。由于 Java 开发者大多数情况下习惯于使用 **Eclipse**、**NetBeans**、**Apache
    Ant** 和 **Maven** 等工具，我们将介绍如何使用 Java 开发者更熟悉的开发环境创建一个简单的 OpenCV 应用程序。
- en: 'In this chapter, we will do the following:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将进行以下操作：
- en: Get OpenCV with desktop Java support
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取具有桌面 Java 支持的 OpenCV
- en: Discuss **Java Native Interface** (**JNI**) details
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 讨论关于 **Java 本地接口**（**JNI**）的细节
- en: Configure Eclipse and NetBeans for OpenCV
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置 Eclipse 和 NetBeans 以支持 OpenCV
- en: Create Apache Ant and Maven OpenCV projects
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建 Apache Ant 和 Maven OpenCV 项目
- en: By the end of this chapter, the user should have an OpenCV for Java installation
    running on his OS which can easily be linked to Eclipse, NetBeans, Apache Ant,
    or Maven, the most used tools and building systems for Java.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，用户应该在操作系统上运行一个 OpenCV for Java 安装，可以轻松地链接到 Eclipse、NetBeans、Apache Ant
    或 Maven，这些是最常用的 Java 工具和构建系统。
- en: Getting OpenCV for Java development
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取用于 Java 开发的 OpenCV
- en: The first thing to notice when working with OpenCV for Java development is that
    OpenCV is a C++ library that should be compiled with operating system- specific
    compilers. The native code that would be generated is platform-dependent. So,
    the native Linux code won't run in Windows, neither will the Android native code
    run in OSX. This sounds very different from the bytecode generated for Java, which
    is executed by an interpreter in any platform. In order to get the native code
    running in a **Java Virtual Machine** (**JVM**), one needs the so called **Java
    Native Interface** (**JNI**). This way, the native code will be required for each
    platform that your application is going to be run on.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 OpenCV 进行 Java 开发时，首先要注意的是 OpenCV 是一个需要使用操作系统特定编译器编译的 C++ 库。生成的本地代码是平台相关的。因此，原生
    Linux 代码无法在 Windows 上运行，同样 Android 原生代码也无法在 OSX 上运行。这与为 Java 生成的字节码非常不同，Java 字节码可以在任何平台上由解释器执行。为了在
    **Java 虚拟机**（**JVM**）中运行本地代码，需要所谓的 **Java 本地接口**（**JNI**）。这样，本地代码将需要为您的应用程序将要运行的每个平台而准备。
- en: It is important to understand that JNI is a native programming interface. It
    allows the Java code that runs inside a JVM to interoperate with the applications
    and libraries written in programming languages such as C, C++, and assembly. Since
    it bridges the gap between Java and other languages, it needs to convert datatypes
    from these languages, as well as to create some boilerplate code. Curious readers
    should refer to the `gen_java.py` script, located in the `modules/java/generator`
    folder, which automates most of this work. Lucky Windows users get compiled binaries,
    which means source C++ OpenCV code, compiled with Windows compilers into native
    code that runs only on Windows, from OpenCV packages. Users from other operating
    systems will need to build binaries from the source code, although one can make
    that in Windows as well. In order to download compiled binaries, we should get
    version 2.4.4 or higher of the OpenCV Windows package from the OpenCV SourceForge
    repository, which is located at [http://sourceforge.net/projects/opencvlibrary/files/](http://sourceforge.net/projects/opencvlibrary/files/).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要理解JNI是一个本地编程接口。它允许在JVM内部运行的Java代码与其他用C、C++和汇编等编程语言编写的应用程序和库进行交互。由于它架起了Java和其他语言之间的桥梁，它需要将这些语言的datatypes进行转换，以及创建一些样板代码。好奇的读者可以参考位于`modules/java/generator`文件夹中的`gen_java.py`脚本，该脚本自动化了大部分这项工作。幸运的Windows用户可以得到编译后的二进制文件，这意味着源C++
    OpenCV代码，用Windows编译器编译成仅在Windows上运行的本地代码，来自OpenCV软件包。来自其他操作系统的用户将需要从源代码构建二进制文件，尽管也可以在Windows上这样做。为了下载编译后的二进制文件，我们应该从OpenCV
    SourceForge仓库获取版本2.4.4或更高版本的OpenCV Windows软件包，该仓库位于[http://sourceforge.net/projects/opencvlibrary/files/](http://sourceforge.net/projects/opencvlibrary/files/)。
- en: Note
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Notice that the prebuilt files needed for Java development are located at `opencv/build/java/`.
    For instance, if you are working with version 3.0.0 OpenCV, you should see files
    containing the Java interface in `opencv-300.jar` and in the x86 and x64 native
    dynamic libraries, which contains the Java bindings in `x86/opencv_java300.dll`
    and `x64/opencv_java300.dll`.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 注意到用于Java开发的预构建文件位于`opencv/build/java/`。例如，如果你正在使用3.0.0版本的OpenCV，你应该在`opencv-300.jar`中看到包含Java接口的文件，以及在x86和x64原生动态库中，其中包含Java绑定，分别在`x86/opencv_java300.dll`和`x64/opencv_java300.dll`中。
- en: Building OpenCV from the source code
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从源代码构建OpenCV
- en: In this section, we are mostly interested in generating all the OpenCV Java
    class files contained in a JAR file as well as the native dynamic library for
    Java OpenCV. This is a self-contained library that works with JNI and is required
    to run a Java OpenCV application.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们主要关注生成包含在JAR文件中的所有OpenCV Java类文件，以及Java OpenCV的原生动态库。这是一个自包含的库，与JNI一起工作，并且是运行Java
    OpenCV应用程序所必需的。
- en: In case you are working with Linux or OSX, or if you want to build from the
    source in Windows, then to get the latest features committed in OpenCV, you should
    use the source code. You can visit the OpenCV download page at [http://opencv.org/downloads.html](http://opencv.org/downloads.html)
    and choose the appropriate link for your distribution.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在使用Linux或OSX，或者你想要在Windows上从源代码构建，那么为了获取OpenCV中提交的最新功能，你应该使用源代码。你可以访问OpenCV下载页面[http://opencv.org/downloads.html](http://opencv.org/downloads.html)，并选择适合你分发版的链接。
- en: 'Another way to get the source code is by using the `git` tool. Appropriate
    instructions for installing it can be found at [http://git-scm.com/downloads](http://git-scm.com/downloads).
    When using `git`, use the following commands:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 获取源代码的另一种方式是使用`git`工具。安装它的适当说明可以在[http://git-scm.com/downloads](http://git-scm.com/downloads)找到。当使用`git`时，请使用以下命令：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: These commands will access the OpenCV developers' repository and download the
    most updated code from `branch 3.0.0-rc1`, which is the release candidate for
    version 3.0.0.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这些命令将访问OpenCV开发者的仓库，并从`branch 3.0.0-rc1`下载最新代码，这是3.0.0版本的候选发布版。
- en: 'In either method of obtaining the source code, you will need building tools
    in order to make binaries. The required packages are as follows:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在获取源代码的任何一种方法中，你都需要构建工具来生成二进制文件。所需的软件包如下：
- en: '**CMake 2.6 or higher**: This is a cross-platform and an open source building
    system. You can download it from [http://www.cmake.org/cmake/resources/software.html](http://www.cmake.org/cmake/resources/software.html).'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CMake 2.6或更高版本**：这是一个跨平台的开源构建系统。你可以从[http://www.cmake.org/cmake/resources/software.html](http://www.cmake.org/cmake/resources/software.html)下载它。'
- en: '**Python 2.6 or later with python-dev and python-numpy**: This is the Python
    language that is used to run Java building scripts. You can download Python from
    [http://www.python.org/getit/](http://www.python.org/getit/) and download the
    packages from [http://sourceforge.net/projects/numpy/files/NumPy](http://sourceforge.net/projects/numpy/files/NumPy).'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Python 2.6 或更高版本，以及 python-dev 和 python-numpy**：这是用于运行 Java 构建脚本的 Python
    语言。你可以从 [http://www.python.org/getit/](http://www.python.org/getit/) 下载 Python，并从
    [http://sourceforge.net/projects/numpy/files/NumPy](http://sourceforge.net/projects/numpy/files/NumPy)
    下载这些包。'
- en: '**C/C++ compilers**: These compilers are required to generate the native code.
    In Windows, you can install Microsoft Visual Studio Community or Express, which
    are free, from [http://www.visualstudio.com/downloads/](http://www.visualstudio.com/downloads/).
    Also, these compilers work with the Visual Studio Professional edition and the
    versions above 2010 should work fine. You can also make it work with MinGW, which
    can be downloaded from [http://sourceforge.net/projects/mingw/files/Installer/](http://sourceforge.net/projects/mingw/files/Installer/).
    In Linux, you are advised to use the **Gnu C Compiler** (**GCC**) with a simple
    `sudo apt-get install build-essential` command in Ubuntu or Debian, for instance.
    In case you work with the Mac, you should use XCode.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**C/C++ 编译器**：这些编译器是生成原生代码所必需的。在 Windows 上，你可以从 [http://www.visualstudio.com/downloads/](http://www.visualstudio.com/downloads/)
    安装免费的 Microsoft Visual Studio Community 或 Express 版本。这些编译器也支持 Visual Studio Professional
    版本以及 2010 年以上版本，应该可以正常工作。你也可以让它与 MinGW 一起工作，可以从 [http://sourceforge.net/projects/mingw/files/Installer/](http://sourceforge.net/projects/mingw/files/Installer/)
    下载。在 Linux 上，建议你在 Ubuntu 或 Debian 上使用 **Gnu C 编译器**（**GCC**），例如通过简单的 `sudo apt-get
    install build-essential` 命令。如果你在 Mac 上工作，你应该使用 XCode。'
- en: '**Java Developer Kit (JDK)**: JDK is required to generate the JAR files, which
    will be required for every Java OpenCV program. Recommended versions begin from
    Oracle, JDK 6, 7, or 8, which can be downloaded from [http://www.oracle.com/technetwork/java/javase/downloads/index-jsp-138363.html](http://www.oracle.com/technetwork/java/javase/downloads/index-jsp-138363.html).
    Please follow the operating system-specific instructions in the link in order
    to install it.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Java 开发工具包 (JDK)**：JDK 是生成 JAR 文件所必需的，这对于每个 Java OpenCV 程序都是必需的。推荐的版本从 Oracle
    的 JDK 6、7 或 8 开始，可以从 [http://www.oracle.com/technetwork/java/javase/downloads/index-jsp-138363.html](http://www.oracle.com/technetwork/java/javase/downloads/index-jsp-138363.html)
    下载。请按照链接中的操作系统特定说明进行安装。'
- en: '**Apache Ant**: This is a pure Java build tool. Look for binary distributions
    at [http://ant.apache.org/bindownload.cgi](http://ant.apache.org/bindownload.cgi).
    Make sure you set the `ANT_HOME` variable correctly as pointed out in the installation
    instructions at [http://ant.apache.org/manual/index.html](http://ant.apache.org/manual/index.html).'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Apache Ant**：这是一个纯 Java 构建工具。在 [http://ant.apache.org/bindownload.cgi](http://ant.apache.org/bindownload.cgi)
    寻找二进制发行版。确保你正确设置了 `ANT_HOME` 变量，正如安装说明中指出的 [http://ant.apache.org/manual/index.html](http://ant.apache.org/manual/index.html)。'
- en: 'In order to install these software in a Linux distribution such as Ubuntu or
    Debian, the user should issue the following command:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在 Linux 发行版（如 Ubuntu 或 Debian）中安装这些软件，用户应执行以下命令：
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Once you have installed all these packages, you will be ready to build the library.
    Make sure you are in the `build` directory, as you should be, if you have followed
    the preceding Git instructions. In case you downloaded the source file from OpenCV
    downloads, the parent folder of your build should have `CMakeLists.txt` as well
    as the `3rdparty`, `apps`, `cmake`, `data`, `doc`, `include`, `modules`, `platforms`,
    `samples`, and `test` folders.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦安装了所有这些包，你就可以准备构建库了。确保你位于 `build` 目录中，如果你已经遵循了前面的 Git 指令，你应该已经做到了。如果你从 OpenCV
    下载中下载了源文件，你的构建父目录应该包含 `CMakeLists.txt` 以及 `3rdparty`、`apps`、`cmake`、`data`、`doc`、`include`、`modules`、`platforms`、`samples`
    和 `test` 文件夹。
- en: 'CMake is a build tool and it will generate your compiler-specific solution
    files. You should then use your compiler to generate the binary files. Make sure
    you are in the `build` directory, as this should follow the last `cd build` command.
    If you are using Linux, run the following commands:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: CMake 是一个构建工具，它将生成你特定的编译器解决方案文件。然后你应该使用你的编译器来生成二进制文件。确保你位于 `build` 目录中，因为这应该遵循最后的
    `cd build` 命令。如果你使用 Linux，运行以下命令：
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'If you are using Windows, run the following command:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用 Windows，运行以下命令：
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Notice that it is important to use the `DBUILD_SHARED_LIBS=OFF` flag, because
    it will instruct CMake to build OpenCV on a set of static libraries. This way,
    it will compile a single dynamic link library for Java without dependencies on
    other libraries. This makes it easier to deploy your Java projects.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，使用 `DBUILD_SHARED_LIBS=OFF` 标志非常重要，因为它将指示 CMake 在一组静态库上构建 OpenCV。这样，它将为 Java
    编译一个不依赖于其他库的单个动态链接库。这使得部署你的 Java 项目更容易。
- en: Note
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you are using other compilers in Windows, type `cmake –help` and it will
    show all the generators available.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在 Windows 上使用其他编译器，请输入 `cmake –help`，它将显示所有可用的生成器。
- en: 'In case you want to use MinGW makefiles, just change the CMake command to the
    following command:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想使用 MinGW makefiles，只需将 CMake 命令更改为以下命令：
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'One of the key points to watch for when generating project files through CMake
    is that `java` is one of the modules that is going to be built. You should see
    a screen as shown in the following screenshot:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在通过 CMake 生成项目文件时需要注意的一个关键点是 `java` 是将要构建的模块之一。你应该会看到一个如图所示的屏幕：
- en: '![Building OpenCV from the source code](img/3972OS_01_01.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![从源代码构建 OpenCV](img/3972OS_01_01.jpg)'
- en: 'In case you can''t see `java` as one of the to-be-built modules, like in the
    following screenshot, you should look for a couple of things, such as whether
    Ant is correctly configured. Also make sure that you have set the `ANT_HOME` environment
    variable and that Python is correctly configured. Check if NumPy is installed
    by simply typing `numpy import *` in a Python shell and check for any errors:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看不到 `java` 作为待构建模块之一，如以下截图所示，你应该检查几个方面，例如 Ant 是否正确配置。同时确保你已经设置了 `ANT_HOME`
    环境变量，并且 Python 已经正确配置。通过在 Python 壳中简单地输入 `numpy import *` 来检查 NumPy 是否已安装，并检查是否有任何错误：
- en: '![Building OpenCV from the source code](img/3972OS_01_02.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![从源代码构建 OpenCV](img/3972OS_01_02.jpg)'
- en: 'In case you are in doubt about the Python and Java installations, slide down
    to check their configurations. They should be similar to the next screenshot:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对 Python 和 Java 的安装有疑问，向下滑动以检查它们的配置。它们应该类似于下一张截图：
- en: '![Building OpenCV from the source code](img/3972OS_01_03.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![从源代码构建 OpenCV](img/3972OS_01_03.jpg)'
- en: 'Once everything has been correctly configured, it is time to start compiling
    the sources. In order to do so in Windows, type the following:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 一切配置正确后，就是开始编译源代码的时候了。在 Windows 上，输入以下命令：
- en: '[PRE5]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Notice that you might get an error saying, `''msbuild'' is not recognized as
    an internal or external command, operable program or batch file`. This occurs
    when you haven''t set the `msbuild` path. In order to set it right, open Visual
    Studio and in the **Tools** menu, click **Visual Studio Command Prompt**. This
    will yield a fully working command prompt with access to `msbuild`. Refer to the
    following screenshot for clearer directions:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，你可能会收到一个错误消息，说 `'msbuild' 不是内部或外部命令，也不是可操作的程序或批处理文件`。这发生在你没有设置 `msbuild`
    路径时。为了正确设置它，打开 Visual Studio 并在 **工具** 菜单中点击 **Visual Studio 命令提示符**。这将提供一个完全工作的命令提示符，可以访问
    `msbuild`。请参考以下截图以获得更清晰的说明：
- en: '![Building OpenCV from the source code](img/3972OS_01_04.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![从源代码构建 OpenCV](img/3972OS_01_04.jpg)'
- en: In case you are using newer Visual Studio versions, press the Windows key and
    type **VS2012 Command** **Prompt**. This should set up your environment variables.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是较新的 Visual Studio 版本，请按 Windows 键并输入**VS2012 命令提示符**。这应该会设置你的环境变量。
- en: 'In order to start building in Linux, simply type the following command:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在 Linux 上开始构建，只需输入以下命令：
- en: '[PRE6]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The preceding command will compile the OpenCV library with Java support. Notice
    that the `-j8` flag tells `make` to run in parallel with eight job threads, which
    makes the build theoretically faster.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将编译具有 Java 支持的 OpenCV 库。请注意，`-j8` 标志告诉 `make` 使用八个工作线程并行运行，这从理论上讲可以加快构建速度。
- en: Tip
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Downloading the example code**'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files from your account at [http://www.packtpub.com](http://www.packtpub.com)
    for all the Packt Publishing books you have purchased. If you purchased this book
    elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从[http://www.packtpub.com](http://www.packtpub.com)下载示例代码文件，这是你购买的所有 Packt
    出版物的代码。如果你在其他地方购买了这本书，你可以访问[http://www.packtpub.com/support](http://www.packtpub.com/support)并注册，以便将文件直接通过电子邮件发送给你。
- en: The entire process will last for some minutes before generating a JAR file that
    contains the Java interfaces, which is located at `bin/opencv-300.jar`. The native
    dynamic link library containing Java bindings is generated at `lib/libopencv_java300.so`
    or `bin/Release/opencv_java300.dll`, depending on your operating system. These
    files will be used when we create our first OpenCV application.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 整个过程将持续几分钟，直到生成一个包含 Java 接口的 JAR 文件，该文件位于 `bin/opencv-300.jar`。包含 Java 绑定的原生动态链接库在
    `lib/libopencv_java300.so` 或 `bin/Release/opencv_java300.dll` 中生成，具体取决于您的操作系统。这些文件将在我们创建第一个
    OpenCV 应用程序时使用。
- en: Note
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 备注
- en: For more details on how to compile OpenCV for your platform, look for [http://docs.opencv.org/doc/tutorials/introduction/table_of_content_introduction/table_of_content_introduction.html](http://docs.opencv.org/doc/tutorials/introduction/table_of_content_introduction/table_of_content_introduction.html).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 关于如何在您的平台上编译 OpenCV 的更多详细信息，请查找 [http://docs.opencv.org/doc/tutorials/introduction/table_of_content_introduction/table_of_content_introduction.html](http://docs.opencv.org/doc/tutorials/introduction/table_of_content_introduction/table_of_content_introduction.html)。
- en: Congratulations! You are now halfway to becoming a great developer using OpenCV!
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！你现在已经完成了成为使用 OpenCV 的优秀开发者的一半旅程！
- en: The Java OpenCV project in Eclipse
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Eclipse 中的 Java OpenCV 项目
- en: Using OpenCV in any IDE is pretty simple. It is as simple as adding OpenCV JAR,
    that is, `opencv-300.jar` to your classpath. But, as it relies on the native code,
    you need to point out the dynamic link libraries—`so` for Linux, `.dll` for Windows,
    and `dylib` for MacOsX.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何 IDE 中使用 OpenCV 都非常简单。只需将 OpenCV JAR，即 `opencv-300.jar` 添加到您的类路径即可。但是，因为它依赖于原生代码，所以您需要指出动态链接库——Linux
    中的 `so`，Windows 中的 `.dll` 和 MacOSX 中的 `dylib`。
- en: In Eclipse, go to **File** | **New** | **Java Project**.![The Java OpenCV project
    in Eclipse](img/3972OS_01_05.jpg)
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Eclipse 中，转到 **文件** | **新建** | **Java 项目**。![Eclipse 中的 Java OpenCV 项目](img/3972OS_01_05.jpg)
- en: Give the new project a descriptive name, such as `SimpleSample`. Select the
    project in the **Package Explorer**, go to the **Project** menu and click on **Properties**.
    On the **Java Build Path** tab, go to the **Libraries** tab, and click on the
    **Add Library…** button on the right-hand side, as shown in the following screenshot:![The
    Java OpenCV project in Eclipse](img/3972OS_01_06.jpg)
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 给新项目起一个描述性的名称，例如 `SimpleSample`。在 **包资源管理器** 中选择项目，转到 **项目** 菜单并点击 **属性**。在
    **Java 构建路径** 选项卡中，转到 **库** 选项卡，然后点击右侧的 **添加库…** 按钮，如图所示：![Eclipse 中的 Java OpenCV
    项目](img/3972OS_01_06.jpg)
- en: Select **User Library** in the **Add Library** dialog, and then click **Next**.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **添加库** 对话框中，选择 **用户库**，然后点击 **下一步**。
- en: Now, click on the **User Libraries…** button.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，点击 **用户库…** 按钮。
- en: Click on **New…**. Name your library appropriately, for example, `opencv-3.0.0`.
    It's time to reference the JAR files.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **新建…**。适当地命名您的库，例如，`opencv-3.0.0`。现在是引用 JAR 文件的时候了。
- en: Click on **Add JARs…**.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **添加 JARs…**。
- en: Select the `opencv-300.jar` file in your filesystem; it should be in the `opencv\build\java`
    folder. Then, point to the native library location expanding your JAR as in the
    following screenshot:![The Java OpenCV project in Eclipse](img/3972OS_01_07.jpg)
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的文件系统中选择 `opencv-300.jar` 文件；它应该在 `opencv\build\java` 文件夹中。然后，指向原生库位置，如以下截图所示：![Eclipse
    中的 Java OpenCV 项目](img/3972OS_01_07.jpg)
- en: Now, select **Native library location** by clicking on the **Edit…** button
    on the right-hand side of the window and set your native libraries' location folder,
    for example, `opencv\build\java\x64\`.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，通过点击窗口右侧的 **编辑…** 按钮选择 **原生库位置**，并设置您的原生库位置文件夹，例如，`opencv\build\java\x64\`。
- en: Now that OpenCV is properly configured, just select it in your **Add library**
    dialog by pressing **Finish**.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在OpenCV已经正确配置，只需在您的 **添加库** 对话框中选择它，按 **完成**。
- en: 'Notice that your project now points to the OpenCV JAR. You can also browse
    the main classes from the **Package Explorer**, as seen in the following screenshot:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，你的项目现在指向了 OpenCV JAR。你还可以从 **包资源管理器** 中浏览主类，如图所示：
- en: '![The Java OpenCV project in Eclipse](img/3972OS_01_08.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![Eclipse 中的 Java OpenCV 项目](img/3972OS_01_08.jpg)'
- en: After the The *NetBeans configuration* section, a source code to create a simple
    OpenCV application can be found.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *NetBeans 配置* 部分之后，可以找到创建一个简单的 OpenCV 应用程序的源代码。
- en: The NetBeans configuration
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: NetBeans 配置
- en: 'In case you are more comfortable working with NetBeans, the configuration process
    is pretty much like Eclipse:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您更习惯使用 NetBeans，配置过程与 Eclipse 几乎相同：
- en: Select **File** | **New Project...**. On the **Projects** tab, select **Java
    Application** and click on **Next**. Give the new project an appropriate name
    and click on **Finish**.![The NetBeans configuration](img/3972OS_01_09.jpg)
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**文件** | **新建项目...**。在**项目**选项卡中，选择**Java应用程序**，然后单击**下一步**。为新项目提供一个合适的名称，然后单击**完成**。![NetBeans配置](img/3972OS_01_09.jpg)
- en: Now, right-click on your **Libraries** folder and click on **Add Library...**,
    as shown in the following screenshot:![The NetBeans configuration](img/3972OS_01_10.jpg)
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在您的**库**文件夹上右键单击，然后单击**添加库...**，如图所示：![NetBeans配置](img/3972OS_01_10.jpg)
- en: As we haven't gone through this process before, a library for OpenCV won't exist.
    Click on the **Create...** button on the right-hand side of the pane. It will
    open a dialog asking for the library name—name it as `OpenCV`—and the **Library
    type**, for which you should leave the default option **Class Libraries**. In
    the next screen, on the **Classpath** tab, click **Add JAR/Folder...** like in
    the next screenshot:![The NetBeans configuration](img/3972OS_01_11.jpg)
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于我们之前没有进行过这个过程，OpenCV库将不存在。在窗格的右侧单击**创建...**按钮。它将打开一个对话框，要求输入库名称——命名为`OpenCV`——以及**库类型**，对于此选项，您应保留默认选项**类库**。在下一屏幕中，在**类路径**选项卡中，单击**添加JAR/Folder...**，如图所示：![NetBeans配置](img/3972OS_01_11.jpg)
- en: Now point to your library, which is where the `opencv-300.jar` file is present—usually
    in `opencv/build/java/`. As your library is properly configured, select it in
    the **Add Library** dialog.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在指向您的库，即`opencv-300.jar`文件所在的位置——通常在`opencv/build/java/`。由于您的库已正确配置，请在**添加库**对话框中选择它。
- en: The last detail to provide is the path for the libraries' native files. Right-click
    on your project name in the **Projects** tab and select **Properties**. Go to
    the **Run** item on the tree and under **VM Options**, set the library path by
    typing `-Djava.library.path=C:\Users\baggio\Downloads\opencv\build\java\x64` in
    the text box.![The NetBeans configuration](img/3972OS_01_12.jpg)
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 需要提供的最后一个细节是库的本地文件路径。在**项目**选项卡中右键单击您的项目名称，然后选择**属性**。在树中的**运行**项下，在**虚拟机选项**下，通过在文本框中输入`-Djava.library.path=C:\Users\baggio\Downloads\opencv\build\java\x64`来设置库路径。![NetBeans配置](img/3972OS_01_12.jpg)
- en: Make sure you change the given path to the one where your OpenCV installation
    is, and that it points to the folder where the native libraries are, that is,
    `opencv_java300.dll` in Windows, or `libopencv_java300.so` in Linux. Now, add
    the `SimpleSample` class code in your project, as pointed. Run the sample and
    make sure that you don't get any errors.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 确保将给定的路径更改为您的OpenCV安装位置，并且它指向包含本地库的文件夹，即Windows中的`opencv_java300.dll`或Linux中的`libopencv_java300.so`。现在，将`SimpleSample`类代码添加到您的项目中，如指示。运行示例并确保没有错误发生。
- en: A Java OpenCV simple application
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一个简单的Java OpenCV应用程序
- en: It's time to create a simple application that will show that we can now compile
    and execute Java code with OpenCV. Create a new Java class containing a `Main`
    method and paste the code given as follows. It simply creates a 5 x 10 OpenCV
    matrix, sets some of its rows and columns, and prints the result to the standard
    output.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 是时候创建一个简单的应用程序来展示我们现在可以使用OpenCV编译和执行Java代码了。创建一个新的Java类，包含一个`Main`方法，并粘贴以下代码。它简单地创建一个5
    x 10的OpenCV矩阵，设置其一些行和列，并将结果打印到标准输出。
- en: Make sure you load the correct dynamic link libraries through a call to `System.loadlibrary("opencv_java300")`.
    Since, you might want to change the library version later, a better approach would
    be to use the `Core.NATIVE_LIBARAY_NAME` constant, which will output the correct
    library name. You can also find this file in the code repository for `chapter1`
    of this book, under `ant/src`.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 确保通过调用`System.loadlibrary("opencv_java300")`加载正确的动态链接库。由于您可能以后想更改库版本，更好的方法是使用`Core.NATIVE_LIBARAY_NAME`常量，这将输出正确的库名称。您也可以在本书的`chapter1`代码库中找到此文件，位于`ant/src`目录下。
- en: '[PRE7]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: According to Oracle's documentation, it states that, *class can have any number
    of static initialization blocks. And they can appear anywhere in the class body.
    The runtime system guarantees that static initialization blocks are called in
    the order that they appear in the source code*.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 根据Oracle的文档，它指出，*类可以有任意数量的静态初始化块。并且它们可以出现在类体的任何位置。运行时系统保证静态初始化块按照它们在源代码中出现的顺序被调用*。
- en: 'You should make sure that any calls to the OpenCV library are preceded by a
    single `System.loadLibrary` call, in order to load the dynamic libraries. Otherwise,
    you will receive an `java.lang.UnsatisfiedLinkError: org.opencv.core.Mat.n_Mat(IIIDDDD)J`
    error. This generally occurs in a static block.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '你应该确保所有对 OpenCV 库的调用都由单个 `System.loadLibrary` 调用 precede，以便加载动态库。否则，你将收到一个
    `java.lang.UnsatisfiedLinkError: org.opencv.core.Mat.n_Mat(IIIDDDD)J` 错误。这通常发生在静态块中。'
- en: 'If everything goes well, you should see the following output in the console:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切顺利，你应在控制台看到以下输出：
- en: '[PRE8]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Building your project with Ant
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Ant 构建你的项目
- en: 'If you want to rely on Apache Ant for building instead of using an IDE, a `build.xml`
    file is provided in the OpenCV samples. You can find this file in this chapter''s
    repository as well. The following are its contents:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要依赖 Apache Ant 进行构建而不是使用 IDE，OpenCV 示例中提供了一个 `build.xml` 文件。你可以在本章的存储库中找到此文件。以下是其内容：
- en: '[PRE9]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This is a basic `build.xml` Ant file that defines tasks such as cleaning, compiling,
    and packing a `.jar` file, running, rebuilding, and rebuild-running. It expects
    your source code to be in a sibling folder called `src`. Make sure that the `SimpleSample.java`
    source code provided earlier is inside this directory.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个基本的 `build.xml` Ant 文件，它定义了诸如清理、编译、打包 `.jar` 文件、运行、重新构建和重新构建运行等任务。它期望你的源代码位于一个名为
    `src` 的同级文件夹中。请确保之前提供的 `SimpleSample.java` 源代码位于此目录中。
- en: 'Compiling and running the project using Ant is easy. Simply type the following:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Ant 编译和运行项目很简单。只需输入以下命令：
- en: '[PRE10]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'In case you have downloaded and extracted pre-built binaries, use the following
    command instead:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经下载并解压了预构建的二进制文件，请使用以下命令代替：
- en: '[PRE11]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'A successful run of Ant `build.xml` will look like the following screenshot:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: Ant `build.xml` 成功运行的外观如下所示：
- en: '![Building your project with Ant](img/3972OS_01_13.jpg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![使用 Ant 构建你的项目](img/3972OS_01_13.jpg)'
- en: The provided `build.xml` file can be reused for building your Java OpenCV applications.
    In order to use it, make sure that the project name matches your main class name.
    If your main class is inside the `package com.your.company`, and it's called `MainOpenCV`,
    you should change the first line of `build.xml` from `<project name="SimpleSample"
    basedir="." default="rebuild-run">` to `<project name="com.your.company.MainOpenCV"
    basedir="." default="rebuild-run">`.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 提供的 `build.xml` 文件可以用于构建你的 Java OpenCV 应用程序。为了使用它，请确保项目名称与你的主类名称匹配。如果你的主类位于
    `package com.your.company` 中，并且名为 `MainOpenCV`，你应该将 `build.xml` 的第一行从 `<project
    name="SimpleSample" basedir="." default="rebuild-run">` 更改为 `<project name="com.your.company.MainOpenCV"
    basedir="." default="rebuild-run">`。
- en: You can also hardcode the `ocvJarDir` and `ocvLibDir` properties so you won't
    have to type them while invoking Ant. For `ocvJarDir`, simply change the `<property
    name="lib.dir" value="${ocvJarDir}"/>` command to `<property name="lib.dir" value="X:\opencv2.47\opencv\build\java"/>`.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以将 `ocvJarDir` 和 `ocvLibDir` 属性硬编码，这样在调用 Ant 时就不必输入它们。对于 `ocvJarDir`，只需将
    `<property name="lib.dir" value="${ocvJarDir}"/>` 命令更改为 `<property name="lib.dir"
    value="X:\opencv2.47\opencv\build\java"/>`。
- en: The Java OpenCV Maven configuration
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Java OpenCV Maven 配置
- en: Apache Maven is a more complex build automation tool, primarily used for Java
    projects. It describes not only how software is built, but also how it depends
    on other libraries. Its projects are configured through a **Project Object Model**,
    named `pom.xml`. Maven dependencies are usually located in Maven 2 Central Repository.
    In case they aren't found there, you will need to add other repositories. You
    can also create a local repository and add your own dependencies there. At the
    time of writing this book, there were no public dependencies for Java OpenCV.
    So we will cover not only the process of installing the Java OpenCV Maven dependencies
    in a local repository but also how to use this book's Maven repository for the
    Windows builds of OpenCV 3.0.0 version. In case OpenCV developers host public
    Maven repositories, minor changes will be required. You will only need to find
    out the official OpenCV JAR `groupId`, `artifactId`, and `version` and put them
    in your `pom.xml`.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: Apache Maven 是一个更复杂的构建自动化工具，主要用于 Java 项目。它不仅描述了软件是如何构建的，还描述了它如何依赖于其他库。其项目通过一个名为
    `pom.xml` 的**项目对象模型**进行配置。Maven 依赖通常位于 Maven 2 中央仓库。如果在那里找不到，您需要添加其他仓库。您还可以创建一个本地仓库并将自己的依赖项添加到那里。在撰写本书时，没有公开的
    Java OpenCV 依赖项。因此，我们将不仅涵盖在本地仓库中安装 Java OpenCV Maven 依赖项的过程，还将介绍如何使用本书的 Maven
    仓库进行 OpenCV 3.0.0 版本的 Windows 构建。如果 OpenCV 开发者托管公共 Maven 仓库，则需要做些小的修改。您只需找到官方
    OpenCV JAR 的 `groupId`、`artifactId` 和 `version` 并将它们放入您的 `pom.xml` 文件中即可。
- en: In order to make your project dependent on any library, you only need to provide
    three fields in your `pom.xml`. They are `groupId`, `artifactId`, and `version`.
    The recommended way to make your project depend on libraries that are not hosted
    in the Central Maven Repository, is to install them using a simple command, like
    `mvn install:install-file -Dfile=non-maven-proj.jar -DgroupId=some.group -DartifactId=non-maven-proj
    -Dversion=1 -Dpackaging=jar`.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使您的项目依赖于任何库，您只需在您的 `pom.xml` 文件中提供三个字段即可。它们是 `groupId`、`artifactId` 和 `version`。将项目依赖于不在中央
    Maven 仓库中托管的库的推荐方法是使用简单的命令安装它们，例如 `mvn install:install-file -Dfile=non-maven-proj.jar
    -DgroupId=some.group -DartifactId=non-maven-proj -Dversion=1 -Dpackaging=jar`。
- en: We will show you how to use the Packt repository for window builds in the next
    section and then we will give you the details on how to install them on your local
    repository, in case you need it.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将向您展示如何使用 Packt 仓库进行 Windows 构建并随后提供如何在您的本地仓库中安装它们的详细信息，以防您需要这样做。
- en: Creating a Windows Java OpenCV Maven project pointing to the Packt repository
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建指向 Packt 仓库的 Windows Java OpenCV Maven 项目
- en: This section shows how to create a basic Maven project and how to customize
    it so that it adds OpenCV dependencies. Besides this, it will generate an Eclipse
    project so that the readers can easily generate a project in Windows. A major
    advantage here is that there is no need to build or download the OpenCV library
    manually.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 本节展示了如何创建一个基本的 Maven 项目以及如何自定义它，以便添加 OpenCV 依赖项。除此之外，它还将生成一个 Eclipse 项目，以便读者可以轻松地在
    Windows 中生成项目。这里的一个主要优势是，无需手动构建或下载 OpenCV 库。
- en: 'Although the Maven learning curve might be a little tougher than straightaway
    creating your project in your favorite IDE, it pays off in the long term span.
    The best part of using Maven is that you won''t need to install OpenCV at all
    since all dependencies, including native files, are automatically downloaded.
    We''ll show you how to do it in the following simple steps:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然Maven的学习曲线可能比直接在您喜欢的IDE中创建项目要陡峭一些，但从长远来看，这是值得的。使用 Maven 的最好之处在于，您根本不需要安装 OpenCV，因为所有依赖项，包括本地文件，都会自动下载。我们将在以下简单步骤中向您展示如何操作：
- en: '**Build a project from an archetype**: Create an empty folder for your project.
    Let''s name it as `D:\mvnopencv`. In that folder, type the following command:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**从原型构建项目**：为您的项目创建一个空文件夹。让我们将其命名为 `D:\mvnopencv`。在该文件夹中，输入以下命令：'
- en: '[PRE12]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Let''s break it down into parts. The `mvn archetype:generate` command tells
    Maven to run the `generate goal` command from the archetype plugin. From the documentation,
    we see that `generate goal` creates a Maven project from an archetype; it asks
    the user to choose an archetype from the archetype catalog, and retrieves it from
    the remote repository. Once retrieved, it is processed to create a working Maven
    project. This way, we deduce that the `-DarchetypeArtifactId=maven-archetype-quickstart`
    parameter is the selected archetype. This will generate a Java project with the
    following structure:'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 让我们将其分解为几个部分。`mvn archetype:generate` 命令告诉 Maven 运行来自 archetype 插件的 `generate
    goal` 命令。从文档中，我们看到 `generate goal` 从一个模板创建 Maven 项目；它会要求用户从模板目录中选择一个模板，并从远程仓库检索它。一旦检索到，它将被处理以创建一个可工作的
    Maven 项目。这样，我们推断出 `-DarchetypeArtifactId=maven-archetype-quickstart` 参数是选定的模板。这将生成一个具有以下结构的
    Java 项目：
- en: '[PRE13]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Note
  id: totrans-112
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that the `-DgroupId=com.mycompany.app -DartifactId=my-opencv-app` properties
    will fill `pom.xml` and provide a part of the project tree.
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意到 `-DgroupId=com.mycompany.app -DartifactId=my-opencv-app` 属性将填充 `pom.xml`
    并提供项目树的一部分。
- en: '**Add** **OpenCV dependencies**: Since this is a project generated from a general
    Maven archetype, we should customize it so that it will look like a Java OpenCV
    project. In order to do that, we will need to add our dependencies. Open the generated
    `pom.xml` file in `D:\mvnopencv\my-opencv-app`. We should first add the Java OpenCV
    dependencies. Since they don''t exist in the Maven central repository at the time
    of writing this book, you will also need to point to an online repository. We
    have provided native files for Windows x86 and Windows 64-bits. In order to add
    the Packt Maven repository, simply add the following lines to your `pom.xml` file:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**添加** **OpenCV 依赖项**：由于这是一个从通用 Maven 模板生成的项目，我们应该对其进行自定义，使其看起来像一个 Java OpenCV
    项目。为了做到这一点，我们需要添加我们的依赖项。在 `D:\mvnopencv\my-opencv-app` 中打开生成的 `pom.xml` 文件。我们首先需要添加
    Java OpenCV 依赖项。由于在撰写本书时它们不存在于 Maven 中央仓库中，你还需要指向一个在线仓库。我们为 Windows x86 和 Windows
    64 位提供了原生文件。为了添加 Packt Maven 仓库，只需将以下行添加到你的 `pom.xml` 文件中：'
- en: '[PRE14]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now, also add the OpenCV dependencies. In order to compile your code, you will
    only need to add the OpenCV JAR dependency. In case you also want to execute it,
    you will need the Windows natives as well. These have been packed inside `opencvjar-runtime-3.0.0-natives-windows-x86.jar`
    for 32-bit architectures. For 64-bit architectures, these are packed inside `opencvjar-runtime-3.0.0-natives-windows-x86_64.jar`.
    Near the `junit` dependencies, add the following:'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，也添加 OpenCV 依赖项。为了编译你的代码，你只需要添加 OpenCV JAR 依赖项。如果你还想执行它，你还需要 Windows 原生文件。这些文件已经打包在
    `opencvjar-runtime-3.0.0-natives-windows-x86.jar` 中，适用于 32 位架构。对于 64 位架构，这些文件打包在
    `opencvjar-runtime-3.0.0-natives-windows-x86_64.jar` 中。在 `junit` 依赖项附近，添加以下内容：
- en: '[PRE15]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Notice the classifier property set to opencvjar-runtime. It is set to `natives-windows-x86_64`.
    This is the value you should use for a 64-bit platform. In case you want it for
    a 32-bit platform, just use `natives-windows-x86`.
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意到设置为 opencvjar-runtime 的 classifier 属性。它设置为 `natives-windows-x86_64`。这是你应该用于
    64 位平台的值。如果你想要 32 位平台的版本，只需使用 `natives-windows-x86`。
- en: '**Configure build plugins**: The `opencvjar-runtime` dependencies only include
    files such as `.dll`, `.so`, and so on. These files will be extracted to your
    target while executing the `mvn package` command. But, this will only happen if
    you add `maven-nativedependencies-plugin`. Besides, it is also important that
    you copy all the JAR libraries to your `/lib` folder when creating your distributable
    JAR. This will be dealt with by the `maven-dependency-plugin`. The last detail
    is to point your main class when creating a JAR, which is performed by `maven-jar-plugin`.
    All the build plugin configurations should be added as follows:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**配置构建插件**：`opencvjar-runtime` 依赖项仅包括 `.dll`、`.so` 等文件。这些文件将在执行 `mvn package`
    命令时提取到你的目标位置。但是，这只会发生在你添加了 `maven-nativedependencies-plugin` 的情况下。此外，在创建可分发 JAR
    时，将所有 JAR 库复制到你的 `/lib` 文件夹中也很重要。这将由 `maven-dependency-plugin` 处理。最后一个细节是在创建 JAR
    时指定主类，这是由 `maven-jar-plugin` 执行的。所有构建插件配置应添加如下：'
- en: '[PRE16]'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: You can see the final `pom.xml` file in the `chapter1/maven-sample` directory
    in this chapter's sample code.
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你可以在本章示例代码的 `chapter1/maven-sample` 目录中看到最终的 `pom.xml` 文件。
- en: '**Create a package**: Now, you should check if everything''s correct by making
    a package. Simply type the following command:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**创建一个包**：现在，你应该通过创建一个包来检查一切是否正确。只需输入以下命令：'
- en: '[PRE17]'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The preceding should download all the plugins and dependencies, compile your
    `App.java` file from the archetype, generate your `my-opencv-app-1.0-SNAPSHOT.jar`
    in the `target` folder, as well as copy all the dependent libraries to your `target/lib`
    folder; check for the `junit`, `opencvjar`, and `opencvjar-runtime` JARs. Also,
    the native libraries are extracted to the `target` `/natives` folder, so `opencv_java300.dll`
    can be found there. Your compiled classes can also be found in the `target` `/classes`
    folder. The other generated folders are related to your tests.
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 前面的步骤应该会下载所有插件和依赖项，从原型中编译你的`App.java`文件，在`target`文件夹中生成你的`my-opencv-app-1.0-SNAPSHOT.jar`，以及将所有依赖库复制到你的`target/lib`文件夹中；检查`junit`、`opencvjar`和`opencvjar-runtime`
    JAR文件。此外，本地库被提取到`target` `/natives`文件夹中，因此可以在那里找到`opencv_java300.dll`。你的编译类也可以在`target`
    `/classes`文件夹中找到。其他生成的文件夹与你的测试相关。
- en: '**Customize your code**: Now, we will change the source file to use the simple
    OpenCV functions. Navigate to `D:\mvnopencv\my-opencv-app\src\main\java\com\mycompany\app`
    and edit the `App.java` file. Simply add the following code:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**自定义你的代码**：现在，我们将更改源文件以使用简单的OpenCV函数。导航到`D:\mvnopencv\my-opencv-app\src\main\java\com\mycompany\app`并编辑`App.java`文件。只需添加以下代码：'
- en: '[PRE18]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'It is the same code from `SimpleSample` that we just put in the `App` class.
    Now we just need to run it. Remember to recompile it by running the following
    command:'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这与我们在`App`类中放入的`SimpleSample`相同的代码。现在我们只需要运行它。记住通过运行以下命令重新编译它：
- en: '[PRE19]'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '**Execute your code**: Execute the generated JAR, pointing the native files
    in the `/native` folder through the `-Djava.library.path` property. This should
    be as simple as typing the following:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**执行你的代码**：执行生成的JAR文件，通过`-Djava.library.path`属性指向`/native`文件夹中的本地文件。这应该像输入以下命令一样简单：'
- en: '[PRE20]'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Well done! Now you should have the same output as when running the `SimpleSample`
    class. In case you want to execute your project through a `.bat` file, simply
    type the preceding command in a file called `run.bat`, for instance, and save
    it in the `D:\mvnopencv\my-opencv-app` folder.
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 干得好！现在你应该得到与运行`SimpleSample`类相同的输出。如果你想通过`.bat`文件执行你的项目，只需在名为`run.bat`的文件中输入前面的命令，例如，并将其保存到`D:\mvnopencv\my-opencv-app`文件夹中。
- en: '**Generate an Eclipse project**: Now, you will be able to take advantage of
    some Maven features such as creating an Eclipse project by simply typing the following
    command:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**生成一个Eclipse项目**：现在，你将能够利用一些Maven功能，例如通过简单地输入以下命令来创建Eclipse项目：'
- en: '[PRE21]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: In order to get the project inside Eclipse, open your workspace and then go
    to **File** | **Import...**. Then, choose **Existing Projects into Workspace**,
    click on **Next** | **Browse...** in the **Select root directory** radio button,
    and browse to `D:\mvnopencv\my-opencv-app`. It should recognize this folder as
    an Eclipse project. Then simply click on **Finish**.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将项目导入到Eclipse中，打开你的工作空间，然后转到**文件** | **导入...**。然后，选择**现有项目到工作空间**，在**选择根目录**单选按钮中点击**下一步**
    | **浏览...**，并浏览到`D:\mvnopencv\my-opencv-app`。它应该将此文件夹识别为Eclipse项目。然后只需点击**完成**。
- en: 'In case you want to run your project now, beware that there are two warnings
    here. Eclipse does not recognize Maven by default. So, you will have an error
    telling you that `"The project cannot be built until build path errors are resolved",
    "Unbound classpath variable: ''M2_REPO/org/javaopencvbook/opencvjar/3.0.0/opencvjar-3.0.0.jar''
    in project ''my-opencv-app''"`.'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你现在想运行你的项目，请注意这里有两条警告。默认情况下，Eclipse不识别Maven。因此，你会看到一个错误，告诉你“项目无法构建，直到解决构建路径错误”，“未绑定的类路径变量：'M2_REPO/org/javaopencvbook/opencvjar/3.0.0/opencvjar-3.0.0.jar'在项目'my-opencv-app'中”。
- en: This error simply means that your `M2_REPO` variable isn't defined. Go to **Window**
    | **Preferences**, and type classpath variables in the search box. Selecting it
    in the tree will bring you the tab to define this variable. Click on **New...**
    and the **New Variable Entry** dialog box will appear. In the **Name** input,
    call it `M2_REPO` and in the **Path** input, choose **Folder...** and browse to
    your Maven repository. This should be located in a folder similar to `C:/Users/baggio/.m2/`repository.
    Click on **Ok**, and then **Ok** again in the **Preferences** dialog box. It will
    ask for a full rebuild. Click on **Yes**, and then the error should be gone.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 这个错误仅仅意味着你的 `M2_REPO` 变量没有定义。转到 **窗口** | **首选项**，在搜索框中输入 classpath 变量。在树中选择它将带出定义此变量的选项卡。点击
    **新建...**，将出现 **新建变量条目** 对话框。在 **名称** 输入中，将其命名为 `M2_REPO`，在 **路径** 输入中，选择 **文件夹...**
    并浏览到你的 Maven 仓库。这应该位于一个类似于 `C:/Users/baggio/.m2/` 的文件夹中。点击 **确定**，然后在 **首选项**
    对话框中再次点击 **确定**。它将要求完全重建。点击 **是**，然后错误应该会消失。
- en: 'If you try to run your `App.java` class by right-clicking **Run As** | **Java
    Application**, it should give you the following exception: **Exception in thread
    "main" java.lang.UnsatisfiedLinkError: no opencv_java300 in java.library.path**.'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '如果你尝试通过右键点击**运行** | **Java 应用程序**来运行你的 `App.java` 类，它应该会给你以下异常：**Exception
    in thread "main" java.lang.UnsatisfiedLinkError: no opencv_java300 in java.library.path**。'
- en: It only means that Eclipse hasn't found your native files. Fixing it is as easy
    as expanding your project and locating the **Referenced Libraries** | **opencvjar-3.0.0.jar**.
    Right-click it and choose **Properties**. Select **Native Library** at the left
    and in the **Location** path, click **Workspace...**, **my-opencv-app** | **target**
    | **natives**. Remember that this folder will only exist if you have previously
    run the `mvn package` command. Run the `App` class again and it should work.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 这仅仅意味着 Eclipse 没有找到你的本地文件。修复它就像展开你的项目并定位到 **引用库** | **opencvjar-3.0.0.jar**
    一样简单。右键点击它并选择 **属性**。在左侧选择 **本地库**，在 **位置** 路径中，点击 **工作空间...**，**my-opencv-app**
    | **target** | **natives**。记住，这个文件夹将只在你之前运行了 `mvn package` 命令时存在。再次运行 `App` 类，它应该会工作。
- en: Creating a Java OpenCV Maven project pointing to a local repository
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个指向本地仓库的 Java OpenCV Maven 项目
- en: The same instructions given in the previous section apply here. The only differences
    are that you will not need to add any additional repository to your `pom.xml`
    since they will be located in your local repository, and that you must install
    and create all the JARs in the Packt' repository in your machine. We assume that
    you have already obtained the `opencv-300.jar` and the native files required for
    your architecture, that is, if you are in Linux, you have `opencv_java300.so`
    already compiled.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 上一节中给出的相同说明也适用于此处。唯一的区别是，你不需要将任何额外的仓库添加到你的 `pom.xml` 中，因为它们将位于你的本地仓库中，并且你必须安装并创建
    Packt' 仓库中的所有 JAR 文件。我们假设你已经获得了 `opencv-300.jar` 和你架构所需的本地文件，也就是说，如果你在 Linux 上，你已经有了编译好的
    `opencv_java300.so`。
- en: 'In order to put your artifacts in a local repository, you must use the `goal
    install-file` from the `install` plugin. Firstly, you should install the `opencv
    jar` file. It should be in your `build` directory, in a folder that will look
    like `D:\opencv\build\bin`. In that folder, type in the following command:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将你的工件放入本地仓库，你必须使用 `install` 插件的 `goal install-file`。首先，你应该安装 `opencv jar`
    文件。它应该位于你的 `build` 目录中，在一个看起来像 `D:\opencv\build\bin` 的文件夹中。在那个文件夹中，输入以下命令：
- en: '[PRE22]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Make sure you use the same `groupId` and `artifactId` when referring to it
    in your `pom.xml` dependencies. Now, in order to install the native files, almost
    the same procedure will be used. Instead of installing the native file itself,
    it is advisable to convert it to a `.jar` file before installation. If you are
    using Linux, simply create a `ZIP` file from the `opencv_java300.so` and rename
    it as `opencv_java300.jar`. In fact, a `JAR` file is a `ZIP` file that obeys some
    standards. After you have created your JAR file, it is time to install it in your
    local Maven repository. Simply type the following command:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你在 `pom.xml` 的依赖项中引用它时使用相同的 `groupId` 和 `artifactId`。现在，为了安装本地文件，几乎将使用相同的程序。在安装本地文件之前，建议将其转换为
    `.jar` 文件。如果你使用 Linux，只需从 `opencv_java300.so` 创建一个 `ZIP` 文件并将其重命名为 `opencv_java300.jar`。实际上，`JAR`
    文件是一个遵循某些标准的 `ZIP` 文件。在你创建了你的 JAR 文件后，就是时候将其安装到你的本地 Maven 仓库中了。只需输入以下命令：
- en: '[PRE23]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Notice the `natives-linux-x86` classifier. This is important for the dependencies
    to specify their architecture. After typing it, you should have both the dependencies
    installed. Now, simply update your `pom.xml` file to refer to `groupId opencvjar`
    instead of `org.javaopencvbook`. Following the instructions from the previous
    section should make you ready to use Maven from your local repository.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 注意 `natives-linux-x86` 分类器。这对于指定依赖项的架构非常重要。在输入它之后，你应该已经安装了所有依赖项。现在，只需简单地更新您的
    `pom.xml` 文件，将其引用为 `groupId opencvjar` 而不是 `org.javaopencvbook`。遵循上一节的说明应该会使您准备好从本地仓库使用
    Maven。
- en: Summary
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter provided several different approaches for setting up OpenCV for
    Java, that is, by either installing compiled binaries or compiling it from the
    source. It also pointed to instructions for making the main configurations in
    Eclipse and NetBeans IDE as well as for using building tools such as Ant and Maven.
    The user should be ready to easily start using OpenCV in his/her Java projects.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 本章提供了几种不同的方法来为 Java 设置 OpenCV，即通过安装编译后的二进制文件或从源代码编译。它还指向了在 Eclipse 和 NetBeans
    IDE 中进行主要配置以及使用构建工具（如 Ant 和 Maven）的说明。用户应该准备好轻松地在自己的 Java 项目中使用 OpenCV。
- en: The next chapter will go deeper into OpenCV and address basic tasks such as
    handling images through matrices, reading image files, retrieving frames from
    a webcam, and creating nice Swing GUIs for your computer vision applications.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将更深入地探讨 OpenCV，并解决基本任务，例如通过矩阵处理图像、读取图像文件、从摄像头获取帧以及为您的计算机视觉应用程序创建漂亮的 Swing
    GUI。
