- en: Chapter 1. Setting Up OpenCV for Java
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I'm sure you want to start developing astonishing computer vision applications.
    You must have heard of a nice C/C++ computer vision library called OpenCV to help
    you do so. But in case you would like to develop the applications using your knowledge
    of Java programming, we have good news for you. Since the release of OpenCV 2.4.4
    in January 2013, Java bindings have been officially developed. So you can use
    them not only for desktop Java, but also for Scala development.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter will set you up for OpenCV development right away. As Java developers
    are mostly used to working with tools such as **Eclipse**, **NetBeans**, **Apache**
    **Ant**, and **Maven**, we will cover the details of creating a simple OpenCV
    application using the environment that the Java developers are more used to.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Get OpenCV with desktop Java support
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Discuss **Java Native Interface** (**JNI**) details
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configure Eclipse and NetBeans for OpenCV
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create Apache Ant and Maven OpenCV projects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this chapter, the user should have an OpenCV for Java installation
    running on his OS which can easily be linked to Eclipse, NetBeans, Apache Ant,
    or Maven, the most used tools and building systems for Java.
  prefs: []
  type: TYPE_NORMAL
- en: Getting OpenCV for Java development
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first thing to notice when working with OpenCV for Java development is that
    OpenCV is a C++ library that should be compiled with operating system- specific
    compilers. The native code that would be generated is platform-dependent. So,
    the native Linux code won't run in Windows, neither will the Android native code
    run in OSX. This sounds very different from the bytecode generated for Java, which
    is executed by an interpreter in any platform. In order to get the native code
    running in a **Java Virtual Machine** (**JVM**), one needs the so called **Java
    Native Interface** (**JNI**). This way, the native code will be required for each
    platform that your application is going to be run on.
  prefs: []
  type: TYPE_NORMAL
- en: It is important to understand that JNI is a native programming interface. It
    allows the Java code that runs inside a JVM to interoperate with the applications
    and libraries written in programming languages such as C, C++, and assembly. Since
    it bridges the gap between Java and other languages, it needs to convert datatypes
    from these languages, as well as to create some boilerplate code. Curious readers
    should refer to the `gen_java.py` script, located in the `modules/java/generator`
    folder, which automates most of this work. Lucky Windows users get compiled binaries,
    which means source C++ OpenCV code, compiled with Windows compilers into native
    code that runs only on Windows, from OpenCV packages. Users from other operating
    systems will need to build binaries from the source code, although one can make
    that in Windows as well. In order to download compiled binaries, we should get
    version 2.4.4 or higher of the OpenCV Windows package from the OpenCV SourceForge
    repository, which is located at [http://sourceforge.net/projects/opencvlibrary/files/](http://sourceforge.net/projects/opencvlibrary/files/).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Notice that the prebuilt files needed for Java development are located at `opencv/build/java/`.
    For instance, if you are working with version 3.0.0 OpenCV, you should see files
    containing the Java interface in `opencv-300.jar` and in the x86 and x64 native
    dynamic libraries, which contains the Java bindings in `x86/opencv_java300.dll`
    and `x64/opencv_java300.dll`.
  prefs: []
  type: TYPE_NORMAL
- en: Building OpenCV from the source code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we are mostly interested in generating all the OpenCV Java
    class files contained in a JAR file as well as the native dynamic library for
    Java OpenCV. This is a self-contained library that works with JNI and is required
    to run a Java OpenCV application.
  prefs: []
  type: TYPE_NORMAL
- en: In case you are working with Linux or OSX, or if you want to build from the
    source in Windows, then to get the latest features committed in OpenCV, you should
    use the source code. You can visit the OpenCV download page at [http://opencv.org/downloads.html](http://opencv.org/downloads.html)
    and choose the appropriate link for your distribution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another way to get the source code is by using the `git` tool. Appropriate
    instructions for installing it can be found at [http://git-scm.com/downloads](http://git-scm.com/downloads).
    When using `git`, use the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: These commands will access the OpenCV developers' repository and download the
    most updated code from `branch 3.0.0-rc1`, which is the release candidate for
    version 3.0.0.
  prefs: []
  type: TYPE_NORMAL
- en: 'In either method of obtaining the source code, you will need building tools
    in order to make binaries. The required packages are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**CMake 2.6 or higher**: This is a cross-platform and an open source building
    system. You can download it from [http://www.cmake.org/cmake/resources/software.html](http://www.cmake.org/cmake/resources/software.html).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Python 2.6 or later with python-dev and python-numpy**: This is the Python
    language that is used to run Java building scripts. You can download Python from
    [http://www.python.org/getit/](http://www.python.org/getit/) and download the
    packages from [http://sourceforge.net/projects/numpy/files/NumPy](http://sourceforge.net/projects/numpy/files/NumPy).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**C/C++ compilers**: These compilers are required to generate the native code.
    In Windows, you can install Microsoft Visual Studio Community or Express, which
    are free, from [http://www.visualstudio.com/downloads/](http://www.visualstudio.com/downloads/).
    Also, these compilers work with the Visual Studio Professional edition and the
    versions above 2010 should work fine. You can also make it work with MinGW, which
    can be downloaded from [http://sourceforge.net/projects/mingw/files/Installer/](http://sourceforge.net/projects/mingw/files/Installer/).
    In Linux, you are advised to use the **Gnu C Compiler** (**GCC**) with a simple
    `sudo apt-get install build-essential` command in Ubuntu or Debian, for instance.
    In case you work with the Mac, you should use XCode.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Java Developer Kit (JDK)**: JDK is required to generate the JAR files, which
    will be required for every Java OpenCV program. Recommended versions begin from
    Oracle, JDK 6, 7, or 8, which can be downloaded from [http://www.oracle.com/technetwork/java/javase/downloads/index-jsp-138363.html](http://www.oracle.com/technetwork/java/javase/downloads/index-jsp-138363.html).
    Please follow the operating system-specific instructions in the link in order
    to install it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Apache Ant**: This is a pure Java build tool. Look for binary distributions
    at [http://ant.apache.org/bindownload.cgi](http://ant.apache.org/bindownload.cgi).
    Make sure you set the `ANT_HOME` variable correctly as pointed out in the installation
    instructions at [http://ant.apache.org/manual/index.html](http://ant.apache.org/manual/index.html).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In order to install these software in a Linux distribution such as Ubuntu or
    Debian, the user should issue the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Once you have installed all these packages, you will be ready to build the library.
    Make sure you are in the `build` directory, as you should be, if you have followed
    the preceding Git instructions. In case you downloaded the source file from OpenCV
    downloads, the parent folder of your build should have `CMakeLists.txt` as well
    as the `3rdparty`, `apps`, `cmake`, `data`, `doc`, `include`, `modules`, `platforms`,
    `samples`, and `test` folders.
  prefs: []
  type: TYPE_NORMAL
- en: 'CMake is a build tool and it will generate your compiler-specific solution
    files. You should then use your compiler to generate the binary files. Make sure
    you are in the `build` directory, as this should follow the last `cd build` command.
    If you are using Linux, run the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'If you are using Windows, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Notice that it is important to use the `DBUILD_SHARED_LIBS=OFF` flag, because
    it will instruct CMake to build OpenCV on a set of static libraries. This way,
    it will compile a single dynamic link library for Java without dependencies on
    other libraries. This makes it easier to deploy your Java projects.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you are using other compilers in Windows, type `cmake –help` and it will
    show all the generators available.
  prefs: []
  type: TYPE_NORMAL
- en: 'In case you want to use MinGW makefiles, just change the CMake command to the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'One of the key points to watch for when generating project files through CMake
    is that `java` is one of the modules that is going to be built. You should see
    a screen as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Building OpenCV from the source code](img/3972OS_01_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In case you can''t see `java` as one of the to-be-built modules, like in the
    following screenshot, you should look for a couple of things, such as whether
    Ant is correctly configured. Also make sure that you have set the `ANT_HOME` environment
    variable and that Python is correctly configured. Check if NumPy is installed
    by simply typing `numpy import *` in a Python shell and check for any errors:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Building OpenCV from the source code](img/3972OS_01_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In case you are in doubt about the Python and Java installations, slide down
    to check their configurations. They should be similar to the next screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Building OpenCV from the source code](img/3972OS_01_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once everything has been correctly configured, it is time to start compiling
    the sources. In order to do so in Windows, type the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Notice that you might get an error saying, `''msbuild'' is not recognized as
    an internal or external command, operable program or batch file`. This occurs
    when you haven''t set the `msbuild` path. In order to set it right, open Visual
    Studio and in the **Tools** menu, click **Visual Studio Command Prompt**. This
    will yield a fully working command prompt with access to `msbuild`. Refer to the
    following screenshot for clearer directions:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Building OpenCV from the source code](img/3972OS_01_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In case you are using newer Visual Studio versions, press the Windows key and
    type **VS2012 Command** **Prompt**. This should set up your environment variables.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to start building in Linux, simply type the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The preceding command will compile the OpenCV library with Java support. Notice
    that the `-j8` flag tells `make` to run in parallel with eight job threads, which
    makes the build theoretically faster.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Downloading the example code**'
  prefs: []
  type: TYPE_NORMAL
- en: You can download the example code files from your account at [http://www.packtpub.com](http://www.packtpub.com)
    for all the Packt Publishing books you have purchased. If you purchased this book
    elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: The entire process will last for some minutes before generating a JAR file that
    contains the Java interfaces, which is located at `bin/opencv-300.jar`. The native
    dynamic link library containing Java bindings is generated at `lib/libopencv_java300.so`
    or `bin/Release/opencv_java300.dll`, depending on your operating system. These
    files will be used when we create our first OpenCV application.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For more details on how to compile OpenCV for your platform, look for [http://docs.opencv.org/doc/tutorials/introduction/table_of_content_introduction/table_of_content_introduction.html](http://docs.opencv.org/doc/tutorials/introduction/table_of_content_introduction/table_of_content_introduction.html).
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations! You are now halfway to becoming a great developer using OpenCV!
  prefs: []
  type: TYPE_NORMAL
- en: The Java OpenCV project in Eclipse
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using OpenCV in any IDE is pretty simple. It is as simple as adding OpenCV JAR,
    that is, `opencv-300.jar` to your classpath. But, as it relies on the native code,
    you need to point out the dynamic link libraries—`so` for Linux, `.dll` for Windows,
    and `dylib` for MacOsX.
  prefs: []
  type: TYPE_NORMAL
- en: In Eclipse, go to **File** | **New** | **Java Project**.![The Java OpenCV project
    in Eclipse](img/3972OS_01_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Give the new project a descriptive name, such as `SimpleSample`. Select the
    project in the **Package Explorer**, go to the **Project** menu and click on **Properties**.
    On the **Java Build Path** tab, go to the **Libraries** tab, and click on the
    **Add Library…** button on the right-hand side, as shown in the following screenshot:![The
    Java OpenCV project in Eclipse](img/3972OS_01_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **User Library** in the **Add Library** dialog, and then click **Next**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, click on the **User Libraries…** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **New…**. Name your library appropriately, for example, `opencv-3.0.0`.
    It's time to reference the JAR files.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Add JARs…**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the `opencv-300.jar` file in your filesystem; it should be in the `opencv\build\java`
    folder. Then, point to the native library location expanding your JAR as in the
    following screenshot:![The Java OpenCV project in Eclipse](img/3972OS_01_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, select **Native library location** by clicking on the **Edit…** button
    on the right-hand side of the window and set your native libraries' location folder,
    for example, `opencv\build\java\x64\`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that OpenCV is properly configured, just select it in your **Add library**
    dialog by pressing **Finish**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Notice that your project now points to the OpenCV JAR. You can also browse
    the main classes from the **Package Explorer**, as seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Java OpenCV project in Eclipse](img/3972OS_01_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: After the The *NetBeans configuration* section, a source code to create a simple
    OpenCV application can be found.
  prefs: []
  type: TYPE_NORMAL
- en: The NetBeans configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In case you are more comfortable working with NetBeans, the configuration process
    is pretty much like Eclipse:'
  prefs: []
  type: TYPE_NORMAL
- en: Select **File** | **New Project...**. On the **Projects** tab, select **Java
    Application** and click on **Next**. Give the new project an appropriate name
    and click on **Finish**.![The NetBeans configuration](img/3972OS_01_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, right-click on your **Libraries** folder and click on **Add Library...**,
    as shown in the following screenshot:![The NetBeans configuration](img/3972OS_01_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As we haven't gone through this process before, a library for OpenCV won't exist.
    Click on the **Create...** button on the right-hand side of the pane. It will
    open a dialog asking for the library name—name it as `OpenCV`—and the **Library
    type**, for which you should leave the default option **Class Libraries**. In
    the next screen, on the **Classpath** tab, click **Add JAR/Folder...** like in
    the next screenshot:![The NetBeans configuration](img/3972OS_01_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now point to your library, which is where the `opencv-300.jar` file is present—usually
    in `opencv/build/java/`. As your library is properly configured, select it in
    the **Add Library** dialog.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The last detail to provide is the path for the libraries' native files. Right-click
    on your project name in the **Projects** tab and select **Properties**. Go to
    the **Run** item on the tree and under **VM Options**, set the library path by
    typing `-Djava.library.path=C:\Users\baggio\Downloads\opencv\build\java\x64` in
    the text box.![The NetBeans configuration](img/3972OS_01_12.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make sure you change the given path to the one where your OpenCV installation
    is, and that it points to the folder where the native libraries are, that is,
    `opencv_java300.dll` in Windows, or `libopencv_java300.so` in Linux. Now, add
    the `SimpleSample` class code in your project, as pointed. Run the sample and
    make sure that you don't get any errors.
  prefs: []
  type: TYPE_NORMAL
- en: A Java OpenCV simple application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It's time to create a simple application that will show that we can now compile
    and execute Java code with OpenCV. Create a new Java class containing a `Main`
    method and paste the code given as follows. It simply creates a 5 x 10 OpenCV
    matrix, sets some of its rows and columns, and prints the result to the standard
    output.
  prefs: []
  type: TYPE_NORMAL
- en: Make sure you load the correct dynamic link libraries through a call to `System.loadlibrary("opencv_java300")`.
    Since, you might want to change the library version later, a better approach would
    be to use the `Core.NATIVE_LIBARAY_NAME` constant, which will output the correct
    library name. You can also find this file in the code repository for `chapter1`
    of this book, under `ant/src`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: According to Oracle's documentation, it states that, *class can have any number
    of static initialization blocks. And they can appear anywhere in the class body.
    The runtime system guarantees that static initialization blocks are called in
    the order that they appear in the source code*.
  prefs: []
  type: TYPE_NORMAL
- en: 'You should make sure that any calls to the OpenCV library are preceded by a
    single `System.loadLibrary` call, in order to load the dynamic libraries. Otherwise,
    you will receive an `java.lang.UnsatisfiedLinkError: org.opencv.core.Mat.n_Mat(IIIDDDD)J`
    error. This generally occurs in a static block.'
  prefs: []
  type: TYPE_NORMAL
- en: 'If everything goes well, you should see the following output in the console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Building your project with Ant
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you want to rely on Apache Ant for building instead of using an IDE, a `build.xml`
    file is provided in the OpenCV samples. You can find this file in this chapter''s
    repository as well. The following are its contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This is a basic `build.xml` Ant file that defines tasks such as cleaning, compiling,
    and packing a `.jar` file, running, rebuilding, and rebuild-running. It expects
    your source code to be in a sibling folder called `src`. Make sure that the `SimpleSample.java`
    source code provided earlier is inside this directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'Compiling and running the project using Ant is easy. Simply type the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'In case you have downloaded and extracted pre-built binaries, use the following
    command instead:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'A successful run of Ant `build.xml` will look like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Building your project with Ant](img/3972OS_01_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The provided `build.xml` file can be reused for building your Java OpenCV applications.
    In order to use it, make sure that the project name matches your main class name.
    If your main class is inside the `package com.your.company`, and it's called `MainOpenCV`,
    you should change the first line of `build.xml` from `<project name="SimpleSample"
    basedir="." default="rebuild-run">` to `<project name="com.your.company.MainOpenCV"
    basedir="." default="rebuild-run">`.
  prefs: []
  type: TYPE_NORMAL
- en: You can also hardcode the `ocvJarDir` and `ocvLibDir` properties so you won't
    have to type them while invoking Ant. For `ocvJarDir`, simply change the `<property
    name="lib.dir" value="${ocvJarDir}"/>` command to `<property name="lib.dir" value="X:\opencv2.47\opencv\build\java"/>`.
  prefs: []
  type: TYPE_NORMAL
- en: The Java OpenCV Maven configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Apache Maven is a more complex build automation tool, primarily used for Java
    projects. It describes not only how software is built, but also how it depends
    on other libraries. Its projects are configured through a **Project Object Model**,
    named `pom.xml`. Maven dependencies are usually located in Maven 2 Central Repository.
    In case they aren't found there, you will need to add other repositories. You
    can also create a local repository and add your own dependencies there. At the
    time of writing this book, there were no public dependencies for Java OpenCV.
    So we will cover not only the process of installing the Java OpenCV Maven dependencies
    in a local repository but also how to use this book's Maven repository for the
    Windows builds of OpenCV 3.0.0 version. In case OpenCV developers host public
    Maven repositories, minor changes will be required. You will only need to find
    out the official OpenCV JAR `groupId`, `artifactId`, and `version` and put them
    in your `pom.xml`.
  prefs: []
  type: TYPE_NORMAL
- en: In order to make your project dependent on any library, you only need to provide
    three fields in your `pom.xml`. They are `groupId`, `artifactId`, and `version`.
    The recommended way to make your project depend on libraries that are not hosted
    in the Central Maven Repository, is to install them using a simple command, like
    `mvn install:install-file -Dfile=non-maven-proj.jar -DgroupId=some.group -DartifactId=non-maven-proj
    -Dversion=1 -Dpackaging=jar`.
  prefs: []
  type: TYPE_NORMAL
- en: We will show you how to use the Packt repository for window builds in the next
    section and then we will give you the details on how to install them on your local
    repository, in case you need it.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Windows Java OpenCV Maven project pointing to the Packt repository
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This section shows how to create a basic Maven project and how to customize
    it so that it adds OpenCV dependencies. Besides this, it will generate an Eclipse
    project so that the readers can easily generate a project in Windows. A major
    advantage here is that there is no need to build or download the OpenCV library
    manually.
  prefs: []
  type: TYPE_NORMAL
- en: 'Although the Maven learning curve might be a little tougher than straightaway
    creating your project in your favorite IDE, it pays off in the long term span.
    The best part of using Maven is that you won''t need to install OpenCV at all
    since all dependencies, including native files, are automatically downloaded.
    We''ll show you how to do it in the following simple steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Build a project from an archetype**: Create an empty folder for your project.
    Let''s name it as `D:\mvnopencv`. In that folder, type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let''s break it down into parts. The `mvn archetype:generate` command tells
    Maven to run the `generate goal` command from the archetype plugin. From the documentation,
    we see that `generate goal` creates a Maven project from an archetype; it asks
    the user to choose an archetype from the archetype catalog, and retrieves it from
    the remote repository. Once retrieved, it is processed to create a working Maven
    project. This way, we deduce that the `-DarchetypeArtifactId=maven-archetype-quickstart`
    parameter is the selected archetype. This will generate a Java project with the
    following structure:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that the `-DgroupId=com.mycompany.app -DartifactId=my-opencv-app` properties
    will fill `pom.xml` and provide a part of the project tree.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Add** **OpenCV dependencies**: Since this is a project generated from a general
    Maven archetype, we should customize it so that it will look like a Java OpenCV
    project. In order to do that, we will need to add our dependencies. Open the generated
    `pom.xml` file in `D:\mvnopencv\my-opencv-app`. We should first add the Java OpenCV
    dependencies. Since they don''t exist in the Maven central repository at the time
    of writing this book, you will also need to point to an online repository. We
    have provided native files for Windows x86 and Windows 64-bits. In order to add
    the Packt Maven repository, simply add the following lines to your `pom.xml` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, also add the OpenCV dependencies. In order to compile your code, you will
    only need to add the OpenCV JAR dependency. In case you also want to execute it,
    you will need the Windows natives as well. These have been packed inside `opencvjar-runtime-3.0.0-natives-windows-x86.jar`
    for 32-bit architectures. For 64-bit architectures, these are packed inside `opencvjar-runtime-3.0.0-natives-windows-x86_64.jar`.
    Near the `junit` dependencies, add the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Notice the classifier property set to opencvjar-runtime. It is set to `natives-windows-x86_64`.
    This is the value you should use for a 64-bit platform. In case you want it for
    a 32-bit platform, just use `natives-windows-x86`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Configure build plugins**: The `opencvjar-runtime` dependencies only include
    files such as `.dll`, `.so`, and so on. These files will be extracted to your
    target while executing the `mvn package` command. But, this will only happen if
    you add `maven-nativedependencies-plugin`. Besides, it is also important that
    you copy all the JAR libraries to your `/lib` folder when creating your distributable
    JAR. This will be dealt with by the `maven-dependency-plugin`. The last detail
    is to point your main class when creating a JAR, which is performed by `maven-jar-plugin`.
    All the build plugin configurations should be added as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You can see the final `pom.xml` file in the `chapter1/maven-sample` directory
    in this chapter's sample code.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Create a package**: Now, you should check if everything''s correct by making
    a package. Simply type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding should download all the plugins and dependencies, compile your
    `App.java` file from the archetype, generate your `my-opencv-app-1.0-SNAPSHOT.jar`
    in the `target` folder, as well as copy all the dependent libraries to your `target/lib`
    folder; check for the `junit`, `opencvjar`, and `opencvjar-runtime` JARs. Also,
    the native libraries are extracted to the `target` `/natives` folder, so `opencv_java300.dll`
    can be found there. Your compiled classes can also be found in the `target` `/classes`
    folder. The other generated folders are related to your tests.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Customize your code**: Now, we will change the source file to use the simple
    OpenCV functions. Navigate to `D:\mvnopencv\my-opencv-app\src\main\java\com\mycompany\app`
    and edit the `App.java` file. Simply add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'It is the same code from `SimpleSample` that we just put in the `App` class.
    Now we just need to run it. Remember to recompile it by running the following
    command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Execute your code**: Execute the generated JAR, pointing the native files
    in the `/native` folder through the `-Djava.library.path` property. This should
    be as simple as typing the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Well done! Now you should have the same output as when running the `SimpleSample`
    class. In case you want to execute your project through a `.bat` file, simply
    type the preceding command in a file called `run.bat`, for instance, and save
    it in the `D:\mvnopencv\my-opencv-app` folder.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Generate an Eclipse project**: Now, you will be able to take advantage of
    some Maven features such as creating an Eclipse project by simply typing the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In order to get the project inside Eclipse, open your workspace and then go
    to **File** | **Import...**. Then, choose **Existing Projects into Workspace**,
    click on **Next** | **Browse...** in the **Select root directory** radio button,
    and browse to `D:\mvnopencv\my-opencv-app`. It should recognize this folder as
    an Eclipse project. Then simply click on **Finish**.
  prefs: []
  type: TYPE_NORMAL
- en: 'In case you want to run your project now, beware that there are two warnings
    here. Eclipse does not recognize Maven by default. So, you will have an error
    telling you that `"The project cannot be built until build path errors are resolved",
    "Unbound classpath variable: ''M2_REPO/org/javaopencvbook/opencvjar/3.0.0/opencvjar-3.0.0.jar''
    in project ''my-opencv-app''"`.'
  prefs: []
  type: TYPE_NORMAL
- en: This error simply means that your `M2_REPO` variable isn't defined. Go to **Window**
    | **Preferences**, and type classpath variables in the search box. Selecting it
    in the tree will bring you the tab to define this variable. Click on **New...**
    and the **New Variable Entry** dialog box will appear. In the **Name** input,
    call it `M2_REPO` and in the **Path** input, choose **Folder...** and browse to
    your Maven repository. This should be located in a folder similar to `C:/Users/baggio/.m2/`repository.
    Click on **Ok**, and then **Ok** again in the **Preferences** dialog box. It will
    ask for a full rebuild. Click on **Yes**, and then the error should be gone.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you try to run your `App.java` class by right-clicking **Run As** | **Java
    Application**, it should give you the following exception: **Exception in thread
    "main" java.lang.UnsatisfiedLinkError: no opencv_java300 in java.library.path**.'
  prefs: []
  type: TYPE_NORMAL
- en: It only means that Eclipse hasn't found your native files. Fixing it is as easy
    as expanding your project and locating the **Referenced Libraries** | **opencvjar-3.0.0.jar**.
    Right-click it and choose **Properties**. Select **Native Library** at the left
    and in the **Location** path, click **Workspace...**, **my-opencv-app** | **target**
    | **natives**. Remember that this folder will only exist if you have previously
    run the `mvn package` command. Run the `App` class again and it should work.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Java OpenCV Maven project pointing to a local repository
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The same instructions given in the previous section apply here. The only differences
    are that you will not need to add any additional repository to your `pom.xml`
    since they will be located in your local repository, and that you must install
    and create all the JARs in the Packt' repository in your machine. We assume that
    you have already obtained the `opencv-300.jar` and the native files required for
    your architecture, that is, if you are in Linux, you have `opencv_java300.so`
    already compiled.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to put your artifacts in a local repository, you must use the `goal
    install-file` from the `install` plugin. Firstly, you should install the `opencv
    jar` file. It should be in your `build` directory, in a folder that will look
    like `D:\opencv\build\bin`. In that folder, type in the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Make sure you use the same `groupId` and `artifactId` when referring to it
    in your `pom.xml` dependencies. Now, in order to install the native files, almost
    the same procedure will be used. Instead of installing the native file itself,
    it is advisable to convert it to a `.jar` file before installation. If you are
    using Linux, simply create a `ZIP` file from the `opencv_java300.so` and rename
    it as `opencv_java300.jar`. In fact, a `JAR` file is a `ZIP` file that obeys some
    standards. After you have created your JAR file, it is time to install it in your
    local Maven repository. Simply type the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Notice the `natives-linux-x86` classifier. This is important for the dependencies
    to specify their architecture. After typing it, you should have both the dependencies
    installed. Now, simply update your `pom.xml` file to refer to `groupId opencvjar`
    instead of `org.javaopencvbook`. Following the instructions from the previous
    section should make you ready to use Maven from your local repository.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter provided several different approaches for setting up OpenCV for
    Java, that is, by either installing compiled binaries or compiling it from the
    source. It also pointed to instructions for making the main configurations in
    Eclipse and NetBeans IDE as well as for using building tools such as Ant and Maven.
    The user should be ready to easily start using OpenCV in his/her Java projects.
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter will go deeper into OpenCV and address basic tasks such as
    handling images through matrices, reading image files, retrieving frames from
    a webcam, and creating nice Swing GUIs for your computer vision applications.
  prefs: []
  type: TYPE_NORMAL
