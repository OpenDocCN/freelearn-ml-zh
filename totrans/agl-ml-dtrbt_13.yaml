- en: '*Chapter 10*: Recommender Systems'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第10章*：推荐系统'
- en: In this chapter, we will learn about what recommender systems are, discuss their
    various types, and work through a **DataRobot** implementation of a content-based
    recommender system. Within this chapter, **recommender system**, **recommendation
    system**, **recommender engines**, and **recommendation engines** are used interchangeably.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将了解推荐系统是什么，讨论它们的各种类型，并通过**DataRobot**实现的内容推荐系统进行实践。在本章中，**推荐系统**、**推荐系统**、**推荐引擎**和**推荐引擎**被交替使用。
- en: In their simplest form, recommender systems suggest potentially relevant items
    to users or buyers. In today's commercial environment, businesses tend to have
    numerous items, products, or services for sale, making it more challenging for
    users or buyers to connect with their desired products or services. This chapter
    explains the ubiquity of recommendation engines in the current business space.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在最简单的形式中，推荐系统向用户或买家推荐可能相关的项目。在今天的商业环境中，企业往往有大量的商品、产品或服务出售，这使得用户或买家与其期望的产品或服务连接变得更加困难。本章解释了推荐引擎在当前商业空间中的普遍性。
- en: 'Although this book is not the place to cover every aspect of recommendation
    systems, we will discuss how to utilize DataRobot to build and (make predictions
    from) recommendation engines and present a conceptual overview of these systems,
    as well as a brief discussion of their types. Thus, by the end of this chapter,
    you will learn how to utilize DataRobot to build a content-based recommendation
    engine. The main topics in this chapter include the following:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这本书不是涵盖推荐系统所有方面的地方，但我们将讨论如何利用DataRobot构建和（从）推荐引擎中进行预测，并概述这些系统的概念，以及对其类型的简要讨论。因此，在本章结束时，你将学习如何利用DataRobot构建内容推荐引擎。本章的主要内容包括以下内容：
- en: A conceptual introduction to recommender systems
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 推荐系统概念介绍
- en: Approaches to building recommender systems
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建推荐系统的方法
- en: Defining and setting up recommender systems in DataRobot
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在DataRobot中定义和设置推荐系统
- en: Building recommender systems in DataRobot
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在DataRobot中构建推荐系统
- en: Making recommender system predictions with DataRobot
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用DataRobot进行推荐系统预测
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: Most parts of this chapter require access to the DataRobot software. The code
    example is based on a relatively small dataset, Book-Crossing, consisting of three
    tables, whose manipulation was carried out with **Jupyter Notebook**.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的大部分内容需要访问DataRobot软件。代码示例基于一个相对较小的数据集，Book-Crossing，由三个表格组成，其操作是在**Jupyter
    Notebook**中完成的。
- en: Check out the following video to see the Code in Action at [https://bit.ly/3HxcNUL](https://bit.ly/3HxcNUL).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下视频，了解代码的实际应用效果[https://bit.ly/3HxcNUL](https://bit.ly/3HxcNUL)。
- en: Book-Crossing dataset
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Book-Crossing数据集
- en: The example used to illustrate the use of DataRobot in building recommendation
    systems is based on the Book-Crossing dataset by Cai-Nicolas Ziegler and colleagues.
    This dataset was accessed at [http://www2.informatik.uni-freiburg.de/~cziegler/BX/](http://www2.informatik.uni-freiburg.de/~cziegler/BX/).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 用于说明DataRobot在构建推荐系统中的应用的示例，基于Cai-Nicolas Ziegler及其同事的Book-Crossing数据集。此数据集可在[http://www2.informatik.uni-freiburg.de/~cziegler/BX/](http://www2.informatik.uni-freiburg.de/~cziegler/BX/)访问。
- en: Note
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Before using this dataset, the authors of this book have informed the owner
    of the dataset about its use in this book.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用此数据集之前，本书的作者已通知数据集的所有者关于其在本书中的使用情况。
- en: Cai-Nicolas Ziegler, Sean M. McNee, Joseph A. Konstan, Georg Lausen (2005).
    *Improving Recommendation Lists Through Topic Diversification. Proceedings of
    the 14th International World Wide Web Conference (WWW '05)*. May 10 – 14, 2005,
    Chiba, Japan.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Cai-Nicolas Ziegler, Sean M. McNee, Joseph A. Konstan, Georg Lausen (2005).
    *通过主题多样化改进推荐列表。第14届国际万维网会议（WWW '05）论文集*。2005年5月10日至14日，日本千叶。
- en: The data was collected during a four-week collection of the Book-Crossing community
    between August and September 2004\. The subsequent three tables, provided in CSV
    format, make up this dataset.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 数据是在2004年8月至9月期间，对Book-Crossing社区进行了为期四周的收集过程中收集的。随后的三个表格，以CSV格式提供，构成了这个数据集。
- en: '`User-ID` presented as integers. Also provided are the users'' `Location` and
    `Age` values.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`User-ID`以整数形式呈现。还提供了用户的`Location`和`Age`值。'
- en: '`ISBM`, `Book-Title`, `Book-Author`, `Year-Of-Publication`, `Publisher`.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ISBM`、`Book-Title`、`Book-Author`、`Year-Of-Publication`、`Publisher`。'
- en: '`Book-Rating` value is either implicit as `0` or explicit between `1` and `10`
    (the higher the number, the better the rating). However, within the context of
    this project, we will focus solely on ratings that are explicit for the model
    development. The table also includes the `User-ID` and `ISBN` values.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Book-Rating` 评分值要么是隐式的 `0`，要么在 `1` 到 `10` 之间是显式的（数值越高，评分越好）。然而，在本项目的背景下，我们将仅关注用于模型开发的显式评分。表格还包括
    `User-ID` 和 `ISBN` 值。'
- en: A conceptual introduction to recommender systems
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 推荐系统的概念介绍
- en: Businesses have a long-standing history of recommending their products or services
    to customers. For instance, walk into a bookshop and you are likely to see a list
    of popular books bought by other customers. This is a simple kind of recommendation
    system, as it gives buyers a snapshot of potential products to purchase.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 企业长期以来一直有向客户推荐其产品或服务的传统。例如，走进一家书店，你可能会看到其他客户购买的流行书籍列表。这是一种简单的推荐系统，因为它为买家提供了一个潜在购买产品的快照。
- en: In a bid to win in the digital economy, businesses are becoming increasingly
    customer-centric. **Customer centricity** implies that companies aim to put the
    needs of the customer first. Still, with the needs of customers being as diverse
    as the customers themselves, businesses need to take a unique approach in putting
    forward their products. This explains, in part, the failings of **popularity-based
    recommendation systems**, as they fail to consider the unique profiles of buyers.
    As such, with growing digitalization, increased business offerings, and a growing
    diversity of customers' needs, this approach is unlikely to win.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在数字经济中取得胜利，企业正变得越来越以客户为中心。**以客户为中心**意味着公司旨在将客户的需求放在首位。尽管如此，由于客户的需求像客户本身一样多样化，企业需要采取独特的方法来推出他们的产品。这在一定程度上解释了**基于流行度的推荐系统**的失败，因为它们未能考虑买家的独特档案。随着数字化程度的提高、商业产品种类的增加以及客户需求多样性的增长，这种方法不太可能取得成功。
- en: Interestingly, data science tools can offer a number of approaches to make recommender
    systems more intelligent by considering the needs of the buyers in a variety of
    ways.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的是，数据科学工具可以通过多种方式考虑买家的需求，从而为推荐系统提供多种提高智能的方法。
- en: In presenting the different types of recommender systems, we will continue to
    use the bookshop example.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在介绍不同类型的推荐系统时，我们将继续使用书店的例子。
- en: First, the **item-based collaborative filtering** approach to recommendation
    systems makes product suggestions to book buyers based on the buyer's product
    purchase history and how those *products* relate to others. As such, if an individual
    bought *Book A*, and *Book A* is linked to *Book B*, then *Book B* is suggested.
    The second approach, **user-based collaborative filtering**, considers similarities
    between *buyers* when making suggestions. As such, if *Buyer A* is similar to
    *Buyer B*, and *Buyer A* buys *Book C*, then *Book C* would be recommended to
    *Buyer B*. The third approach, **content-based recommendation**, takes into account
    both the book and user characteristics in making suggestions. Finally, the **hybrid
    system** approach uses a combination of collaborative-based and content-based
    methods in making recommendations. It is easy to see that both of these methods
    come with strengths and weaknesses. We will now take a deeper look at these approaches
    and how DataRobot can be used to build a content-based recommendation system.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，**基于项目的协同过滤**推荐系统方法根据买家的产品购买历史以及这些 *产品* 与其他产品的关联向书买家提出产品建议。因此，如果某人购买了 *Book
    A*，并且 *Book A* 与 *Book B* 相关联，那么就会建议 *Book B*。第二种方法，**基于用户的协同过滤**，在提出建议时考虑了 *买家*
    之间的相似性。因此，如果 *Buyer A* 与 *Buyer B* 相似，并且 *Buyer A* 购买了 *Book C*，那么就会向 *Buyer B*
    推荐购买 *Book C*。第三种方法，**基于内容的推荐**，在提出建议时考虑了书籍和用户特征。最后，**混合系统**方法在提出建议时结合了基于协同和基于内容的方法。很容易看出，这两种方法都各有优缺点。我们现在将更深入地探讨这些方法以及如何使用
    DataRobot 构建基于内容的推荐系统。
- en: Approaches to building recommender systems
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建推荐系统的方法
- en: 'Recommender systems aim to suggest relevant products to buyers. Because of
    their ability to consider the uniqueness of buyers, intelligent recommender engines
    have generated billions of dollars for businesses and helped buyers find relevant
    products. They represent a win-win for both consumers and businesses. Various
    data-driven approaches to creating intelligent recommendation systems have been
    introduced. There are three major approaches to recommendation systems: collaborative
    filtering systems, content-based systems, and hybrid systems. Let''s discuss each
    of these approaches in the following sub-sections.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 推荐系统的目标是向买家推荐相关的产品。由于它们能够考虑买家的独特性，智能推荐引擎为商家创造了数十亿美元的收入，并帮助买家找到相关的产品。这对消费者和商家来说都是双赢的局面。已经介绍了各种数据驱动的方法来创建智能推荐系统。推荐系统有三种主要方法：协同过滤系统、基于内容的系统和混合系统。以下小节将讨论这些方法中的每一个。
- en: Collaborative filtering recommender systems
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 协同过滤推荐系统
- en: 'The core idea behind collaborative filtering recommender systems is leveraging
    past actions by others to infer what an individual might be interested in. Collaborative
    filtering approaches draw on data stores of the historic interaction between products
    and users. *Table 10.1* presents an interaction matrix of users rating books.
    Each user rated a book with a number between 1 and 5, with 5 representing the
    highest level of enjoyment. Where there are no ratings, the individual is assumed
    not to have read the book. There are two broad types of collaborative filtering:
    *item-based* collaborative and *user-based* collaborative filtering.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 协同过滤推荐系统背后的核心思想是利用他人的过去行为来推断个人可能感兴趣的内容。协同过滤方法借鉴了产品与用户之间历史交互的数据存储。*表10.1*展示了用户对书籍评分的交互矩阵。每个用户用1到5的数字对一本书进行评分，其中5代表最高程度的享受。在没有评分的地方，假定个人没有阅读这本书。协同过滤有两种主要类型：*基于项目*的协同过滤和*基于用户*的协同过滤。
- en: '![Table 10.1 – User/product interaction matrix'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '![表10.1 – 用户/产品交互矩阵'
- en: '](img/Figure_10.01_B17159.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_10.01_B17159.jpg)'
- en: Table 10.1 – User/product interaction matrix
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 表10.1 – 用户/产品交互矩阵
- en: '*Item-based collaborative filtering* systems (or **item-to-item collaborative
    algorithms**) find similarities between items and base their recommendations on
    these similarities. This approach is grounded in suggesting items to individuals
    based on how similar items are to the ones these individuals previously enjoyed
    or bought. Drawing on *Table 10.1*, an item-based filtering approach would easily
    see that *Book C* and *Book E* are rated in a similar way by previous readers.
    Based on this item relationship, if an individual rates *Book C* highly, a recommendation
    of *Book E* is made and vice versa. So, since *User 5* highly rated *Book E* and
    has not seen *Book C*, a recommendation of *Book C* is put forward, as there is
    a high likelihood of them liking *Book C*.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '*基于项目的协同过滤*系统（或**基于项目的协同算法**）在项目之间寻找相似性，并基于这些相似性进行推荐。这种方法基于根据项目与个人之前喜欢或购买的项目相似程度来向个人推荐项目。根据*表10.1*，基于项目的过滤方法可以很容易地看出*书C*和*书E*在之前的读者中被以相似的方式评分。基于这种项目关系，如果一个人高度评价*书C*，就会推荐*书E*，反之亦然。因此，由于*用户5*高度评价*书E*且未见过*书C*，就提出了推荐*书C*，因为他们很可能喜欢*书C*。'
- en: With *user-based collaborative filtering* systems, similarities are found between
    *users*, and recommendations are based on these. **User-to-user collaborative
    algorithms** aim to find users with similar behavior or who are in the same behavioral
    neighborhood, as established by their historic actions. The algorithm then considers
    what their preferences are and makes recommendations. The core idea of these recommendation
    systems is the assumption that if individuals *are* alike, *what* they like will
    be similar. From *Table 10.1*, it could be inferred that *User 2* and *User 4*
    have similar book interests. Because *User 4* has rated *Book D* highly, the likelihood
    of *User 2* liking *Book D* is considered high and therefore recommended. As we
    can see, both collaborative filtering approaches are based on the idea of *similarities*.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 基于*用户协同过滤*的系统，会在*用户*之间找到相似性，并基于这些相似性进行推荐。**用户到用户协同算法**旨在找到行为相似或处于相同行为邻域的用户，这是通过他们的历史行为建立的。然后算法考虑他们的偏好并做出推荐。这些推荐系统的核心思想是假设如果个体*是*相似的，*他们*喜欢的东西也将相似。从*表10.1*中可以推断出*用户2*和*用户4*有相似的书籍兴趣。因为*用户4*对*书籍D*给出了高度评价，所以认为*用户2*喜欢*书籍D*的可能性很高，因此推荐。正如我们所看到的，这两种协同过滤方法都是基于*相似性*这一理念。
- en: Similarity metrics offer a basis for recommendations to be made. There are several
    similarity metrics, with the **Pearson correlation coefficient** and **Cosine
    similarity** being among the most popular. Others have approached this measurement
    of similarity drawing on *neighborhoods*. The **K-nearest neighbors** algorithm
    is utilized to find the nearest items or users to the one being recommended or
    recommended to, respectively.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 相似度度量提供了做出推荐的基础。有几个相似度度量，其中**皮尔逊相关系数**和**余弦相似度**是最受欢迎的。其他人通过利用*邻域*来接近这种相似度的测量。**K最近邻**算法被用来找到被推荐或推荐给的对象最近的物品或用户。
- en: Because the interaction dataset is easily acquired, building collaborative filtering
    is considerably easier than content-based systems, as will be discussed in the
    next sections. However, the collaborative approach to recommendation systems has
    a few shortcomings. Within the context of *Table 10.1*, a new user, *User 6*,
    is introduced with no history. It is easy to see that the collaborative filtering
    system will struggle to make recommendations to this user. The problem is similar
    for an item without historic data. This problem, otherwise known as the **cold
    start** problem, is well documented. **Data sparsity** is another problem commonly
    associated with collaborative filtering. Most platforms and large businesses have
    buyers and products. Still, the most active users would only buy a fraction of
    the available products. As such, there is a gap in the data needed to meaningfully
    compute the similarities when powering these engines.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 由于交互数据集容易获取，构建协同过滤系统比基于内容的系统要容易得多，这将在下一节中讨论。然而，推荐系统的协同方法有几个缺点。在*表10.1*的背景下，引入了一个没有历史记录的新用户*用户6*。很容易看出，协同过滤系统将难以向这位用户做出推荐。对于没有历史数据的项目来说，问题类似。这个问题，也被称为**冷启动**问题，已经被广泛记录。**数据稀疏性**是与协同过滤相关联的另一个常见问题。大多数平台和大型企业都有买家和产品。然而，最活跃的用户只会购买一小部分可用的产品。因此，在驱动这些引擎时，存在一个数据缺口，这些数据对于有意义地计算相似性是必要的。
- en: Content-based recommender systems
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基于内容的推荐系统
- en: '*Content-based recommender* systems make suggestions based on the item characteristics
    and user profiles. This approach has a different type of data structure underpinning
    it. Content-based systems are `1` and `5`, the model is regression-based, as it
    predicts an interval variable. This model becomes a content-based recommendation
    engine.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '*基于内容的推荐*系统基于项目特征和用户档案进行建议。这种方法有一个不同的数据结构作为其基础。基于内容的系统是`1`和`5`，模型是基于回归的，因为它预测一个区间变量。这个模型变成了基于内容的推荐引擎。'
- en: From the preceding discussion, we can see that a content-based system can easily
    mitigate the cold start problem, as books and users are likely to have some forms
    of descriptions. In comparison to collaborative filtering systems, content-based
    systems are more scalable, as in the production environment, predictions can easily
    be made when needed, rather than having to make predictions for all users and
    products at the same time. Importantly, even when users only rate or buy a few
    products, content-based systems will still perform well, as they focus on the
    descriptions and not necessarily the users or products. That said, most content-based
    systems struggle when the characteristics of the items are not readily available.
    Within certain contexts, it could be challenging to generate attributes for a
    product (for instance, if the product is or has images or sounds). In cases of
    this nature, content-based systems will have no descriptions to analyze. Additionally,
    demographic information of users might not be readily available due to growing
    online privacy concerns. The limitations of both the collaborative filtering and
    content-based approaches to recommendation gave rise to the use of hybrid systems.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的讨论中，我们可以看出，基于内容的系统可以轻松缓解冷启动问题，因为书籍和用户很可能有一些形式的描述。与协同过滤系统相比，基于内容的系统更具可扩展性，因为在生产环境中，当需要时可以轻松地进行预测，而不是必须同时为所有用户和产品进行预测。重要的是，即使用户只评价或购买少量产品，基于内容的系统仍然可以表现良好，因为它们关注的是描述，而不是用户或产品。然而，当物品的特征不易获得时，大多数基于内容的系统都会遇到困难。在某些情况下，为产品生成属性可能会很具挑战性（例如，如果产品包含图像或声音）。在这种情况下，基于内容的系统将没有描述可以分析。此外，由于日益增长的在线隐私担忧，用户的人口统计信息可能不易获得。协同过滤和基于内容的推荐方法的局限性导致了混合系统的使用。
- en: Hybrid recommender systems
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 混合推荐系统
- en: '*Hybrid recommender systems* are an integrated approach to recommendation systems.
    Hybrid systems generate recommendations to users by leveraging a combination of
    two or more recommendation strategies. By doing so, they mitigate the limitations
    attributed to either of the strategies, thereby benefiting from *the wisdom of
    the many*.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '*混合推荐系统*是推荐系统的一种集成方法。混合系统通过利用两种或更多推荐策略的组合来为用户生成推荐。通过这样做，它们减轻了归因于任何一种策略的限制，从而受益于*众人的智慧*。'
- en: There are several approaches to hybrid systems. The most commonly used (and
    the easiest to implement) is the **weighted approach**. Here, scores from independent
    recommendation systems are aggregated to give an overall recommendation score.
    Aggregation methods vary and can include basic averaging, applying rules, and
    using linear functions. The **staged approach** could also be deployed. This typically
    involves the recommendation systems' results being integrated as input features
    in another recommendation system. As such, the output of the *Stage 1* system
    becomes an additional input for the *Stage 2* system. The **switching approach**
    involves using a rule to switch between different recommendation systems to capitalize
    on their advantages in a given context. For instance, if collaborative filtering
    is seen to give better results, a switch regime could use the collaborative filtering
    approach, but when there is a cold start, it could change to the content-based
    approach. An advantage the hybrid system has over content-based systems is the
    ability to develop recommendations when item features are difficult to establish.
    As will be demonstrated in [*Chapter 11*](B17159_11_Final_NM_ePub.xhtml#_idTextAnchor161),
    *Working with Geospatial Data, NLP, and Image Processing*, DataRobot has advanced
    feature extraction capabilities for images and text data.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 混合系统有几种方法。最常用（也是最容易实现）的是**加权方法**。在这里，独立推荐系统的分数被汇总以给出一个总推荐分数。汇总方法多种多样，包括基本平均、应用规则和使用线性函数。**阶段方法**也可以部署。这通常涉及将推荐系统的结果作为另一个推荐系统的输入特征。因此，*阶段1*系统的输出成为*阶段2*系统的额外输入。**切换方法**涉及使用规则在不同的推荐系统之间切换，以利用特定环境下的优势。例如，如果协同过滤被认为给出了更好的结果，切换机制可以使用协同过滤方法，但当出现冷启动时，它可以切换到基于内容的方法。混合系统相对于基于内容的系统的一个优势是，当物品特征难以确定时，可以开发推荐。正如将在[*第11章*](B17159_11_Final_NM_ePub.xhtml#_idTextAnchor161)中展示的，*与地理空间数据、NLP和图像处理一起工作*，DataRobot具有先进的图像和文本数据特征提取能力。
- en: Defining and setting up recommender systems in DataRobot
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 DataRobot 中定义和设置推荐系统
- en: 'DataRobot, due to its ability to extract features from images, audio, and text
    data, effectively manages the feature availability limitation of the content-based
    recommender systems. This, in addition to DataRobot''s automated ML models'' processes,
    means it is well positioned to leverage the advantages of the content-based approach
    while compensating for the feature-unavailability limitation of this approach.
    As described in the *Technical requirements* section, the dataset used for our
    example consists of three tables. This includes the user table (presenting profiles
    of the users), the book table (outlining characteristics of the books), and the
    rating table (containing user book ratings). Since we have one table describing
    the books, and another, the users, integrating these and the ratings sets the
    scene for the content-based recommender system. To do this, we employed Jupyter
    Notebook. *Figure 10.1* presents the script we ran to ingest the dataset, manipulate
    it, merge the tables, and write it back as a CSV file:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 DataRobot 能够从图像、音频和文本数据中提取特征，它有效地管理了基于内容的推荐系统的特征可用性限制。此外，DataRobot 的自动化机器学习模型流程意味着它非常适合利用基于内容的优势，同时弥补这种方法的特征不可用性限制。如
    *技术要求* 部分所述，我们示例中使用的数据集包括三个表。这包括用户表（展示用户资料）、书籍表（概述书籍特征）和评分表（包含用户书籍评分）。由于我们有一个描述书籍的表，另一个描述用户的表，将这些表和评分集合并为基于内容的推荐系统场景。为此，我们使用了
    Jupyter Notebook。*图 10.1* 展示了我们运行的脚本，用于导入数据集、操作数据、合并表并将数据写回 CSV 文件：
- en: '![Figure 10.1 – Data manipulations in Jupyter Notebook'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 10.1 – Jupyter Notebook 中的数据处理'
- en: '](img/Figure_10.02_B17159.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 10.02_B17159.jpg](img/Figure_10.02_B17159.jpg)'
- en: Figure 10.1 – Data manipulations in Jupyter Notebook
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.1 – Jupyter Notebook 中的数据处理
- en: 'Rows on the rating table where `rating` had a value of `0` were excluded, as
    the ratings were implicit. These rows will be used to demonstrate how to make
    predictions with recommendation engines in the *Making recommender system predictions
    with DataRobot* section. Having manipulated the tables by changing their headings,
    as well as consolidating the `ratings`, `books`, and `users` values into a table,
    each row has the description of a user and a book, and also a rating. A snapshot
    of the data is shown in *Table 10.2*. Although we could create the DataRobot project
    in Jupyter Notebook using the Python API method (as will be illustrated in [*Chapter
    12*](B17159_12_Final_NM_ePub.xhtml#_idTextAnchor176), *DataRobot Python API*)
    for consistency, we downloaded the data as a file: `rating.csv`.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在评分表中，`rating` 值为 `0` 的行被排除，因为这些评分是隐含的。这些行将在 *使用 DataRobot 进行推荐系统预测* 部分中用来演示如何使用推荐引擎进行预测。通过更改表头以及将
    `ratings`、`books` 和 `users` 值合并到一个表中，每一行都描述了一个用户和一本书，以及一个评分。数据快照显示在 *表 10.2* 中。尽管我们可以使用
    Python API 方法（如将在 [*第 12 章*](B17159_12_Final_NM_ePub.xhtml#_idTextAnchor176)，*DataRobot
    Python API*）中所示，在 Jupyter Notebook 中创建 DataRobot 项目以保持一致性，但我们下载了数据文件：`rating.csv`。
- en: '![Table 10.2 – Data snapshot'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '![表 10.2 – 数据快照'
- en: '](img/Figure_10.03_B17159.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 10.03_B17159.jpg](img/Figure_10.03_B17159.jpg)'
- en: Table 10.2 – Data snapshot
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 表 10.2 – 数据快照
- en: Following the process established in [*Chapter 6*](B17159_06_Final_NM_ePub.xhtml#_idTextAnchor104),
    *Model Building with DataRobot*, we created a DataRobot project for the recommender
    system. When doing this, we drag the `rating.csv` file into the initial project
    window. This opens up the window shown in *Figure 10.2*. For each row, since the
    book rating is used as an indicator of the user's interest, it can be used as
    the target variable. Due to the nature of the target variable, `ratings`, the
    ML models for this recommender system will be of the regression models type.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 按照在 [*第 6 章*](B17159_06_Final_NM_ePub.xhtml#_idTextAnchor104)，*使用 DataRobot
    进行模型构建* 中建立的过程，我们为推荐系统创建了一个 DataRobot 项目。在执行此操作时，我们将 `rating.csv` 文件拖入初始项目窗口。这打开了
    *图 10.2* 中显示的窗口。对于每一行，由于书籍评分被用作用户兴趣的指标，它可以作为目标变量。由于目标变量 `ratings` 的性质，这个推荐系统的机器学习模型将是回归模型类型。
- en: '![Figure 10.2 – DataRobot project initiation window'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 10.2 – DataRobot 项目启动窗口'
- en: '](img/Figure_10.04_B17159.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 10.04_B17159.jpg](img/Figure_10.04_B17159.jpg)'
- en: Figure 10.2 – DataRobot project initiation window
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.2 – DataRobot 项目启动窗口
- en: As expected, ratings made are the range of `1` to `10`. Ideally, we will drop
    the rows with implicit ratings (of `0`) and `user_ID` fields to create a robust
    dataset for modeling. The next thing to do is build the recommender system's ML
    models.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如预期，评分的范围是`1`到`10`。理想情况下，我们将删除具有隐含评分（`0`）和`user_ID`字段的行，以创建一个用于建模的稳健数据集。接下来要做的事情是构建推荐系统的机器学习模型。
- en: Building recommender systems in DataRobot
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在DataRobot中构建推荐系统
- en: One of the strengths of driverless `user_id` in the **Group ID Feature** field.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在**组ID特征**字段中，`user_id`的一个优势。
- en: 'As detailed in [*Chapter 6*](B17159_06_Final_NM_ePub.xhtml#_idTextAnchor104),
    *Model Building with DataRobot*, DataRobot commences the development of ML models
    when the `Training Schedule` or simply `Training` in the search field in the model
    **Repository** tab during model creation. This will bring up a list of relevant
    models (see *Figure 10.3*):'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如[*第6章*](B17159_06_Final_NM_ePub.xhtml#_idTextAnchor104)中详细说明的，*使用DataRobot进行模型构建*，当在模型创建过程中模型**存储库**标签页的搜索字段中的`Training
    Schedule`或简单地`Training`时，DataRobot开始开发机器学习模型。这将显示相关模型列表（见*图10.3*）：
- en: '![Figure 10.3 – Selecting the advanced modeling approaches most suitable for
    recommender systems'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '![图10.3 – 选择最适合推荐系统的先进建模方法'
- en: '](img/Figure_10.05_B17159.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_10.05_B17159.jpg)'
- en: Figure 10.3 – Selecting the advanced modeling approaches most suitable for recommender
    systems
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.3 – 选择最适合推荐系统的先进建模方法
- en: In addition to selecting these modeling methods to be included in the list of
    models to be created, the models' `Autopilot Stage 1`) based on the `Informative
    Features`, and then carried out all five `Cross Validation` runs. A final click
    on **Run Tasks** includes these in the processing queue.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 除了选择这些建模方法并将其包括在要创建的模型列表中之外，还基于`Informative Features`执行了所有五个`交叉验证`运行。点击**运行任务**将它们包括到处理队列中。
- en: 'After the models have been created, the next step is to evaluate them in terms
    of their accuracy. Prior to this, it is important to examine the **Relative Importance**
    chart to check if our model aligns with common sense. As is apparent in *Figure
    10.4*, opening the **Variable Importance** window through the **Insight** window
    offers us the opportunity to explore these models:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在模型创建完成后，下一步是评估它们的准确性。在此之前，检查**相对重要性**图表以确认我们的模型是否符合常识是很重要的。正如*图10.4*所示，通过**洞察**窗口打开**变量重要性**窗口为我们提供了探索这些模型的机会：
- en: '![Figure 10.4 – Variable importance'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '![图10.4 – 变量重要性'
- en: '](img/Figure_10.06_B17159.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_10.06_B17159.jpg)'
- en: Figure 10.4 – Variable importance
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.4 – 变量重要性
- en: The values next to `London`) and an aspect of the title (for example, `Kingdom`)
    could be interpreted as influential to the model. So, in this simplified example,
    a higher-order feature that is an interaction between `London` and `Kingdom` is
    created. The rating predictions consequently change considerably depending on
    the presence of this newly created higher-order feature.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在`London`旁边和标题的一个方面（例如，`Kingdom`）的值可以解释为对模型有影响。因此，在这个简化的例子中，创建了一个更高阶的特征，它是`London`和`Kingdom`之间的交互。因此，根据这个新创建的高阶特征的存在与否，评分预测会相应地发生很大变化。
- en: 'In model selection, using the definite `Keras Slim Residual Neural Network
    Regressor using Adaptive Training Schedule (1 Layer: 64 Units)` is the best-performing
    model (see *Figure 10.5*). It is important to highlight that measuring the accuracy
    of models for recommendation systems in some contexts is not as straightforward.
    Imagine that in this case, we could only have a rating of `1` when an individual
    buys a book, and otherwise it would be `0`. Naively measuring how accurate the
    model is becomes limited, as a `0` rating does not necessarily imply that an individual
    is not interested in an item. This is because it is possible that the individual
    has never read the book. Because a good recommender system will recommend items
    whose characteristics align with an individual''s profile as a potential book
    to read that are unread, it is likely to have a significant proportion of false
    positives. This is because, although their current rating is `0`, the user in
    question will most likely be interested in reading them. In cases like these,
    the **Recall** type becomes a more important metric in evaluating the model performance.
    Given that we are only certain of cases where individuals buy items, it is reasonable
    to evaluate those cases in isolation. Therefore, the extent to which the model
    accuracy predicts books that are read correctly, usually referred to as the **Recall**,
    becomes a more suitable metric.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在模型选择中，使用“定制的`Keras Slim残差神经网络回归器使用自适应训练计划（1层：64个单元）`是表现最好的模型（见*图10.5*）。重要的是要强调，在某些情况下，测量推荐系统模型的准确性并不像表面上那么简单。想象一下，在这种情况下，当一个人购买一本书时，我们只能有一个`1`的评分，否则就是`0`。天真地衡量模型的准确性变得有限，因为`0`评分并不一定意味着个人对物品不感兴趣。这是因为可能个人从未读过这本书。因为一个好的推荐系统会推荐与个人档案相匹配的未读书籍，所以它很可能有相当比例的误报。这是因为，尽管他们的当前评分是`0`，但相关用户很可能对阅读它们感兴趣。在这些情况下，**召回率**类型的指标在评估模型性能时变得更加重要。鉴于我们只确定个人购买物品的情况，单独评估这些情况是合理的。因此，模型准确性预测正确阅读的书籍的程度，通常称为**召回率**，成为一个更合适的指标。
- en: '![Figure 10.5 – Leaderboard tab for recommendation systems'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '![图10.5 – 推荐系统排行榜标签页'
- en: '](img/Figure_10.07_B17159.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '![图10.7 – 数据图B17159.jpg](img/Figure_10.07_B17159.jpg)'
- en: Figure 10.5 – Leaderboard tab for recommendation systems
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.5 – 推荐系统排行榜标签页
- en: 'For a recommendation system, accuracy and prediction speed is very important
    to consider when deciding which model to use. To ground this discussion, it is
    important to understand that there are two major approaches to making predictions
    with recommendation systems. The first approach is a batch scoring of combinations
    of users by items, where items are yet to be read by the user. This dataset becomes
    larger exponentially as items and users increase. The second approach is a *real-time
    prediction*. For instance, imagine an individual arrives at an e-commerce platform.
    That individual''s data with those of the products is rapidly scored and suggestions
    are scored nearly instantly. In both cases, the speed of the prediction is pivotal
    for commercial success. The DataRobot `Keras Slim Residual Neural Network Regressor
    using Adaptive Training Schedule (1 Layer: 64 Units)` is `1.6746`, and its prediction
    speed is `35.57` ms per every 1,000 predictions. The validation scores for some
    blender models appear better, but these are much weaker in terms of the speed
    of prediction.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 对于推荐系统，在决定使用哪种模型时，准确性和预测速度是非常重要的考虑因素。为了使这个讨论有据可依，重要的是要理解，在推荐系统中进行预测有两种主要方法。第一种方法是对用户和物品组合进行批评分，其中物品尚未被用户阅读。随着物品和用户的增加，这个数据集呈指数级增长。第二种方法是*实时预测*。例如，想象一个人到达一个电子商务平台。那个人的数据以及产品的数据会迅速评分，建议几乎瞬间完成。在这两种情况下，预测速度对商业成功至关重要。DataRobot的`Keras
    Slim残差神经网络回归器使用自适应训练计划（1层：64个单元）`的预测速度是每1000次预测`1.6746`，每次预测的预测速度是`35.57`毫秒。一些混合模型的验证分数看起来更好，但在预测速度方面要弱得多。
- en: '![Figure 10.6 – DataRobots'' Speed vs Accuracy chart'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '![图10.6 – DataRobots的速度与准确性图表'
- en: '](img/Figure_10.08_B17159.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '![图10.8 – 数据图B17159.jpg](img/Figure_10.08_B17159.jpg)'
- en: Figure 10.6 – DataRobots' Speed vs Accuracy chart
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.6 – DataRobots的速度与准确性图表
- en: This suggests that though it is very accurate, this model is very slow in making
    predictions. The **Speed vs Accuracy** chart presents a snapshot visualization
    of several models' speed and accuracy. A more in-depth pairwise comparison can
    be carried out using the **Model Comparison** tool. To continue the discussion
    of prediction, we will now turn to making recommendation system predictions in
    DataRobot.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这表明，尽管这个模型非常准确，但在做出预测时速度非常慢。**速度与准确性**图表展示了几个模型的速度和准确性的快照可视化。可以使用**模型比较**工具进行更深入的成对比较。为了继续讨论预测，我们现在将转向在DataRobot中进行推荐系统预测。
- en: Making recommender system predictions with DataRobot
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用DataRobot进行推荐系统预测
- en: Creating suggestions from recommendation engines on DataRobot is straightforward.
    We use the drag and drop approach (as discussed in earlier chapters), as our prediction
    dataset is only small. With larger datasets (over 1 GB), as is more typical for
    recommender systems, using the DataRobot prediction API is advised. The API approach
    to creating models and making predictions is covered in depth in [*Chapter 12*](B17159_12_Final_NM_ePub.xhtml#_idTextAnchor176),
    *DataRobot Python API*.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在DataRobot上从推荐引擎创建建议是直接的。我们使用拖放方法（如前几章所述），因为我们的预测数据集很小。对于更大的数据集（超过1 GB），这是推荐系统的典型情况，建议使用DataRobot预测API。创建模型和进行预测的API方法在[*第12章*](B17159_12_Final_NM_ePub.xhtml#_idTextAnchor176)，*DataRobot
    Python API*中有详细说明。
- en: Our prediction dataset for our example is 64 MB in size, and so the drag and
    drop approach is appropriate. For this prediction approach, we specify the columns
    we want to use from the original dataset. Ideally, we at least need an identifier
    for the item and user. As illustrated in *Figure 10.7*, we have chosen to include
    the `ISBN`, `user_id`, and `title` fields in our predictions. We drag and drop
    the prediction dataset into the specified region. As usual, this dataset is quickly
    evaluated, and we are presented with the **Run external test** or **Compute prediction**
    options.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的示例预测数据集大小为64 MB，因此拖放方法很合适。对于这种预测方法，我们指定从原始数据集中要使用的列。理想情况下，我们至少需要一个物品和用户的标识符。如图10.7所示，我们选择在我们的预测中包含`ISBN`、`user_id`和`title`字段。我们将预测数据集拖放到指定区域。像往常一样，这个数据集很快就会被评估，我们会看到**运行外部测试**或**计算预测**选项。
- en: '![Figure 10.7 – A recommendation engine prediction setup'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '![图10.7 – 推荐引擎预测设置'
- en: '](img/Figure_10.09_B17159.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_10.09_B17159.jpg)'
- en: Figure 10.7 – A recommendation engine prediction setup
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.7 – 推荐引擎预测设置
- en: At this point, we click on `.csv` file (see *Table 10.3*). As noted previously,
    the prediction set is drawn from the original dataset where the ratings were implicit
    (so the rating score was zero). Thus, the prediction dataset has only a limited
    sample of the possible person-item interactions. Some users (for instance, the
    user with `8` as  `user_id`), have about `10` items scored, while some have only
    `1` item scored. In an ideal situation, all items not seen by an individual would
    be rated. That said, suggestions served to the user are then made in order of
    predicted interests. For user `8`, the book titled `A Second Chicken Soup for
    the Woman's Soul (Chicken Soup for the Soul Series)` is served first. In some
    cases, the top *n* recommendations is used. By top *n* in our book case, we mean,
    for each user the top *n* books are selected based on their prediction values.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，我们点击`.csv`文件（见*表10.3*）。如前所述，预测集是从原始数据集中抽取的，其中评分是隐式的（因此评分分数为零）。因此，预测数据集只包含可能的用户-物品交互的有限样本。一些用户（例如，`user_id`为`8`的用户），大约有`10`个物品评分，而一些用户只有`1`个物品评分。在理想情况下，所有未看到的物品都应该被评分。话虽如此，向用户提供的建议是按照预测兴趣的顺序进行的。对于用户`8`，首先提供的是名为《A
    Second Chicken Soup for the Woman's Soul (Chicken Soup for the Soul Series)》的书籍。在某些情况下，使用的是前*n*个推荐。在我们的案例中，前*n*指的是，对于每个用户，根据其预测值选择前*n*本书籍。
- en: '![ Table 10.3 – A recommendation engine sample prediction'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '![表10.3 – 推荐引擎样本预测'
- en: '](img/Figure_10.10_B17159.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_10.10_B17159.jpg)'
- en: Table 10.3 – A recommendation engine sample prediction
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 表10.3 – 推荐引擎样本预测
- en: The selected model can be deployed as a **REST** API using DataRobot, as shown
    in [*Chapter 8*](B17159_08_Final_NM_ePub.xhtml#_idTextAnchor116), *Model Scoring
    and Deployment*, and then the data can be scored via the DataRobot API call (which
    we will discuss in [*Chapter 12*](B17159_12_Final_NM_ePub.xhtml#_idTextAnchor176),
    *DataRobot Python API*). Some DataRobot models can be downloaded as **JAR** files,
    which can be integrated with other applications to make real-time predictions.
    Elsewhere, a batch prediction can be made using different person-item interactions,
    before being stored in a big data storage table, such as **Google Cloud BigQuery**.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 选择的模型可以使用 DataRobot 部署为 **REST** API，如[*第8章*](B17159_08_Final_NM_ePub.xhtml#_idTextAnchor116)“模型评分和部署”中所示，然后可以通过
    DataRobot API 调用（我们将在[*第12章*](B17159_12_Final_NM_ePub.xhtml#_idTextAnchor176)“DataRobot
    Python API”中讨论）对数据进行评分。一些 DataRobot 模型可以下载为 **JAR** 文件，这些文件可以与其他应用程序集成以进行实时预测。在其他情况下，可以使用不同的用户-物品交互进行批量预测，然后存储在大数据存储表中，例如
    **Google Cloud BigQuery**。
- en: Summary
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we introduced and appraised different approaches to recommendation
    systems. We examined the data structure requirements for content-based and collaborative
    filtering recommendation systems, and we discussed their underlining assumptions.
    We then point out the strengths of DataRobot in extracting features from challenging
    data types (for instance, image data) that normally limit the use of content-based
    systems. We then illustrated the use of DataRobot in building and making predictions
    using a content-based recommender system based on a small dataset.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了并评估了推荐系统的不同方法。我们考察了基于内容和协同过滤推荐系统的数据结构要求，并讨论了它们的潜在假设。然后我们指出 DataRobot
    在从具有挑战性的数据类型（例如，图像数据）中提取特征方面的优势，这些数据类型通常限制了基于内容系统的使用。然后我们展示了如何使用小数据集构建和使用基于内容的推荐系统进行预测。
- en: It is important to highlight that the dataset used for this project was made
    up of multiple data types. DataRobot is capable of extracting features and integrating
    different data types to create ML models. In the next chapter, we will explore
    how to use datasets with a combination of image, text, and location data when
    creating ML models.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 需要强调的是，本项目使用的数据集由多种数据类型组成。DataRobot 能够提取特征并整合不同数据类型以创建机器学习模型。在下一章中，我们将探讨在创建机器学习模型时如何使用包含图像、文本和位置数据的组合数据集。
