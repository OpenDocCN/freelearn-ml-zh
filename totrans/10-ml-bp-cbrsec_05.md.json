["```py\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n```", "```py\nreviews_df = pd.read_csv(\"amazon_reviews.txt\", sep=\"\\t\")\nreviews_df.head()\n```", "```py\ndef label_to_int(label):\n    if label == \"__label2__\":\n        # Real Review\n        return 0\n    else:\n        # Fake Review\n        return 1\nreviews_df[\"FRAUD_LABEL\"] = reviews_df[\"LABEL\"].apply(label_to_int)\nreviews_df.head()\n```", "```py\naxes = reviews_df.groupby(\"FRAUD_LABEL\").PRODUCT_CATEGORY\\\n       .value_counts()\\\n       .unstack(0)\\\n       .plot.barh()\naxes.set_xlabel(\"# Reviews\")\naxes.set_ylabel(\"Product Category\")\n```", "```py\naxes = reviews_df.groupby(\"FRAUD_LABEL\").RATING\\\n      .value_counts()\\\n      .unstack(0)\\\n      .plot.bar()\naxes.set_xlabel(\"# Reviews\")\naxes.set_ylabel(\"Rating\")\n```", "```py\naxes = reviews_df.groupby(\"FRAUD_LABEL\").VERIFIED_PURCHASE\\\n      .value_counts()\\\n      .unstack(0)\\\n      .plot.bar()\naxes.set_xlabel(\"Purchase Verified\")\naxes.set_ylabel(\"Rating\")\n```", "```py\ndef review_length(text):\n    if text is None:\n        return 0\n    else:\n        words = text.split(\" \")\n        return len(words)\n```", "```py\ndef average_word_length(text):\n    if text is None or text == \"\":\n        return 0\n    else:\n        words = text.split(\" \")\n        total_lengths = 0\n        for word in words:\n            total_lengths = total_lengths + len(word)\n        avg_len = total_lengths/len(words)\n        return avg_len\n```", "```py\nimport enchant\ndef count_misspellings(text):\n    english_dict = enchant.Dict(\"en_US\")\n    if text is None or text == \"\":\n        return 0\n    else:\n        misspelling = 0\n        words = text.split(\" \")\n        for word in words:\n            if word != \"\" and not english_dict.check(word.lower()):\n                misspelling = misspelling + 1\n        return misspelling\n```", "```py\nreviews_df[\"Review_Text_Length\"] = reviews_df[\"REVIEW_TEXT\"].apply(review_length)\nreviews_df[\"Avg_Word_Len\"] = reviews_df[\"REVIEW_TEXT\"].apply(average_word_length)\nreviews_df[\"Num_Misspelling\"] = reviews_df[\"REVIEW_TEXT\"].apply(count_misspellings)\n```", "```py\nimport matplotlib.pyplot as plt\n# Separate real and fake reviews\nfake_reviews = reviews_df[reviews_df['FRAUD_LABEL'] == 1]['Review_Text_Length'].values\nreal_reviews = reviews_df[reviews_df['FRAUD_LABEL'] == 0]['Review_Text_Length'].values\n# Plot the two histograms\nbins = np.linspace(0, 500, 500)\nplt.hist(fake_reviews, bins, alpha=0.5, label='Fake')\nplt.hist(real_reviews, bins, alpha=0.5, label='Real')\n# Label the plot\nplt.xlabel(\"Review Length\")\nplt.ylabel(\"# Reviews\")\nplt.legend()\n# Display the plot\nplt.show()\n```", "```py\nfrom scipy.stats import ttest_ind\n# Conduct t-test\nt_stat, p_value = ttest_ind(fake_reviews, real_reviews)\n# Print group means\nprint(\"Mean in Fake Reviews: \", np.mean(fake_reviews))\nprint(\"Mean in Real Reviews: \", np.mean(real_reviews))\n# Print t-test statistics\nprint(\"T-statistic value: \", t_stat)\nprint(\"P-Value: \", p_value)\n```", "```py\nMean in Fake Reviews:  59.62095238095238\nMean in Real Reviews:  80.63780952380952\nT-statistic value:  -17.56360707600074\nP-Value:  1.4478425823590511e-68\n```", "```py\nimport matplotlib.pyplot as plt\n# Separate real and fake reviews\nfake_reviews = reviews_df[reviews_df['FRAUD_LABEL'] == 1]['Num_Misspelling'].values\nreal_reviews = reviews_df[reviews_df['FRAUD_LABEL'] == 0]['Num_Misspelling'].values\n# Plot the two histograms\nbins = np.linspace(0, 50, 50)\nplt.hist(fake_reviews, bins, alpha=0.5, label='Fake')\nplt.hist(real_reviews, bins, alpha=0.5, label='Real')\n# Label the plot\nplt.xlabel(\"Review Length\")\nplt.ylabel(\"# Misspelt Words\")\nplt.legend()\n# Display the plot\nplt.show()\n```", "```py\nfrom scipy.stats import ttest_ind\n# Conduct t-test\nt_stat, p_value = ttest_ind(fake_reviews, real_reviews)\n# Print group means\nprint(\"Mean in Fake Reviews: \", np.mean(fake_reviews))\nprint(\"Mean in Real Reviews: \", np.mean(real_reviews))\n# Print t-test statistics\nprint(\"T-statistic value: \", t_stat)\nprint(\"P-Value: \", p_value)\n```", "```py\nMean in Fake Reviews:  4.716952380952381\nMean in Real Reviews:  7.844952380952381\nT-statistic value:  -18.8858003626682\nP-Value:  6.730184744054038e-79\n```", "```py\nimport statsmodels.formula.api as smf\nmodel = smf.ols(formula = 'FRAUD_LABEL ~ Review_Text_Length + Num_Misspelling + Avg_Word_Len',\n                data = reviews_df).fit()\nprint(model.summary())\n```", "```py\nimport statsmodels.formula.api as smf\nmodel = smf.ols(formula = \"\"\"FRAUD_LABEL ~ Review_Text_Length + Num_Misspelling + Avg_Word_Len + C(RATING) + C(VERIFIED_PURCHASE)\"\"\", data = reviews_df).fit()\nprint(model.summary())\n```"]