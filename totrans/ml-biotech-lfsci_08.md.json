["```py\ndf = pd.read_csv(\"../../datasets/dataset_wisc_sd.csv\")\nprint(df.shape)\n```", "```py\ndf = df.replace(r'\\\\n','', regex=True) \ndf = df.dropna()\nprint(df.shape)\n```", "```py\nimport seaborn as sns\nsns.countplot(df['diagnosis']);\n```", "```py\ndf['diagnosis'] = df['diagnosis'].map({'M':1,'B':0}) \n```", "```py\nselect_feats = [\"diagnosis\", \"radius_mean\", \"texture_mean\", \"smoothness_mean\"]\nsns.pairplot(df[select_feats], hue = 'diagnosis', markers=[\"s\", \"o\"])\n```", "```py\nsns.scatterplot(x=\"radius_mean\", y=\"texture_mean\", hue=\"diagnosis\", style='diagnosis', data=df, markers=[\"s\", \"o\"])\n```", "```py\nfrom sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nX = df.drop(columns = [\"id\", \"diagnosis\"])\ny = df.diagnosis.values\nX_scaled = pd.DataFrame(scaler.fit_transform(X), columns = X.columns)\n```", "```py\n    from sklearn.cluster import AgglomerativeClustering\n    agc = AgglomerativeClustering(n_clusters=2, linkage=\"ward\")\n    ```", "```py\n    agc_featAll_pred = agc.fit_predict(X_scaled.iloc[:, :2])\n    ```", "```py\n    import matplotlib.pyplot as plt\n    import seaborn as sns\n    plt.figure(figsize=(20, 5))\n    plt.subplot(121)\n    plt.title(\"Actual Results\")\n    ax = sns.scatterplot(x=\"radius_mean\", y=\"texture_mean\", hue=y, style=y, data=X_scaled, markers=[\"s\", \"o\"])\n    ax.legend(loc=\"upper right\")\n    plt.subplot(122)\n    plt.title(\"Agglomerative Clustering\")\n    ax = sns.scatterplot(x=\"radius_mean\", y=\"texture_mean\", hue=agc_featAll_pred, style=agc_featAll_pred, data=X_scaled, markers=[\"s\", \"o\"])\n    ax.legend(loc=\"upper right\")\n    ```", "```py\n    from sklearn.metrics import accuracy_score\n    print(accuracy_score(y, agc_featAll_pred))\n    0.832740\n    ```", "```py\n    from sklearn.cluster import KMeans\n    ```", "```py\n    kmc = KuMeans(n_clusters=2, n_init=10, init=\"k-means++\")\n    ```", "```py\n    kmc_feat2_pred = kmc.fit_predict(X_scaled.iloc[:, :2])\n    ```", "```py\n    plt.figure(figsize=(20, 5))\n    plt.subplot(131)\n    plt.title(\"Actual Results\")\n    ax = sns.scatterplot(x=\"radius_mean\", y=\"texture_mean\", hue=y, style=y, data=X_scaled, markers=[\"s\", \"o\"])\n    ax.legend(loc=\"upper right\")\n    plt.subplot(132)\n    plt.title(\"KMeans Results (Features=2)\")\n    ax = sns.scatterplot(x=\"radius_mean\", y=\"texture_mean\", hue= kmc_feat2_pred , style= kmc_feat2_pred, data=X_scaled, markers=[\"s\", \"o\"])\n    ax.legend(loc=\"upper right\")\n    ```", "```py\n    kmc_feat2_pred = kmc.fit_predict(X_scaled.iloc[:, :2])\n    kmc_feat3_pred = kmc.fit_predict(X_scaled.iloc[:, :3])\n    kmc_feat4_pred = kmc.fit_predict(X_scaled.iloc[:, :4])\n    kmc_featall_pred = kmc.fit_predict(X_scaled.iloc[:, :])\n    ```", "```py\n    plt.figure(figsize=(20, 5))\n    plt.subplot(141)\n    plt.title(\"KMeans Results (Features=2)\")\n    ax = sns.scatterplot(x=\"radius_mean\", y=\"texture_mean\", hue=kmc_feat2_pred, style=kmc_feat2_pred, data=X_scaled, markers=[\"s\", \"o\"])\n    ax.legend(loc=\"upper right\")\n    # Apply the same for the other plots\n    ```", "```py\n    from sklearn.mixture import GaussianMixture\n    ```", "```py\n    gmm = GaussianMixture(n_components=2, covariance_type=\"full\")\n    ```", "```py\n    gmm_featAll_pred = 1-gmm.fit_predict(X_scaled.iloc[:, :2])\n    ```", "```py\n    plt.figure(figsize=(20, 5))\n    plt.subplot(131)\n    plt.title(\"Actual Results\")\n    ax = sns.scatterplot(x=\"radius_mean\", y=\"texture_mean\", hue=y, style=y, data=X_scaled, markers=[\"s\", \"o\"])\n    ax.legend(loc=\"upper right\")\n    plt.subplot(132)\n    plt.title(\"Gaussian Mixture Results (Features=All)\")\n    ax = sns.scatterplot(x=\"radius_mean\", y=\"texture_mean\", hue=gmm_featAll_pred, style=gmm_featAll_pred, data=X_scaled, markers=[\"s\", \"o\"])\n    ax.legend(loc=\"upper right\")\n    ```", "```py\n    from sklearn.decomposition import PCA\n    ```", "```py\n    pca_2d = PCA(n_components=2, svd_solver='full')\n    pca_2d.fit(X_scaled)\n    ```", "```py\n    data_pca_2d = pca_2d.fit_transform(X_scaled)\n    ```", "```py\n    plt.xlabel(\"Principal Component 1\")\n    plt.ylabel(\"Principal Component 2\")\n    sns.scatterplot(x=data_pca_2d[:,0], y=data_pca_2d[:,1], hue=y, style=y, markers=[\"s\", \"o\"])\n    ```", "```py\ndfx = pd.read_csv(\"../../datasets/single_cell_rna/nestorowa_corrected_log2_transformed_counts.txt\", sep=' ',  )\ndfx.shape\n```", "```py\ndfy = pd.DataFrame()\ndfy['annotation'] = dfx.index.str[:4]\ndfy['annotation'].value_counts()\n```", "```py\nfrom sklearn.decomposition import TruncatedSVD\nsvd_2d = TruncatedSVD(n_components=2, n_iter=7)\n```", "```py\ndata_svd_2d = svd_2d.fit_transform(dfx)\n```", "```py\nsns.scatterplot(x=data_svd_2d[:,0], y=data_svd_2d[:,1], hue=dfy.annotation, style=dfy.annotation, markers = [\"o\", \"s\", \"v\"])\n```", "```py\nfrom sklearn.manifold import TSNE\ndata_tsne_2d_p10 = TSNE(n_components=2, perplexity=10.0).fit_transform(dfx)\n```", "```py\nsns.scatterplot(x=data_tsne_2d_p10[:,0], y=data_tsne_2d_p10[:,1], hue=dfy.annotation, style=dfy.annotation, markers = [\"o\", \"s\", \"v\"])\n```", "```py\ndata_tsne_2d_p1 = TSNE(n_components=2, perplexity=1.0).fit_transform(dfx)\ndata_tsne_2d_p10 = TSNE(n_components=2, perplexity=10.0).fit_transform(dfx)\ndata_tsne_2d_p30 = TSNE(n_components=2, perplexity=30.0).fit_transform(dfx)\n```", "```py\nimport umap\ndata_umap_2d_n5 = umap.UMAP(n_components=2, n_neighbors=5).fit_transform(dfx)\n```", "```py\nsns.scatterplot(x=data_umap_2d_n5[:,0], y=data_umap_2d_n5[:,1], hue=dfy.annotation, style=dfy.annotation, markers = [\"o\", \"s\", \"v\"])\n```"]