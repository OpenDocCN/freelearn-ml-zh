["```py\n    wd <- \"<WORKING DIRECTORY>\"\n    setwd(wd)\n    ```", "```py\n    url <- \"https://archive.ics.uci.edu/ml/machine-learning-databases/00222/bank.zip\"\n    destinationFileName <- \"bank.zip\"\n    download.file(url, destinationFileName,method = \"auto\", quiet=FALSE)\n    ```", "```py\n    zipFile<-file.choose()\n    ```", "```py\n    outputDir <- wd\n    ```", "```py\n    unzip(zipFile, exdir=outputDir)\n    ```", "```py\n    df_bank_detail <- read.csv(\"bank-full.csv\", sep = ';')\n    ```", "```py\n    summary(df_bank_detail)\n    ```", "```py\n    ##       age                 job           marital          education    \n    ##  Min.   :18.00   blue-collar:9732   divorced: 5207   primary  : 6851  \n    ##  1st Qu.:33.00   management :9458   married :27214   secondary:23202  \n    ##  Median :39.00   technician :7597   single  :12790   tertiary :13301  \n    ##  Mean   :40.94   admin.     :5171                    unknown  : 1857  \n    ##  3rd Qu.:48.00   services   :4154                                     \n    ##  Max.   :95.00   retired    :2264                                     \n    ```", "```py\n    install jsonlite package\n    install.packages(\"jsonlite\")\n    library(jsonlite)\n    ```", "```py\n    json_file <- \"crop.json\"\n    json_data <- jsonlite::fromJSON(json_file, flatten = TRUE)\n    ```", "```py\n    crop_production <- data.frame(json_data[[2]])\n    ```", "```py\n    colnames(crop_production) <- c(\"S.No\",\"District\",\"Area\",\"Production\",\"PTY\")\n    ```", "```py\n    head(crop_production)\n    ```", "```py\n    ##   S.No   District Area Production  PTY\n    ## 1    1   Ariyalur   NA         NA   NA\n    ## 2    2 Coimbatore  808         26 0.03\n    ## 3    3  Cuddalore   NA         NA   NA\n    ## 4    4 Dharmapuri   NA         NA   NA\n    ## 5    5   Dindigul  231          2 0.01\n    ## 6    6      Erode   NA         NA   NA\n    ```", "```py\n    library(tm)\n    ```", "```py\n    review_top_10 <- read.csv(\"Reviews_Only_Top_10_Records.csv\")\n    ```", "```py\n    review_corpus <- VCorpus(VectorSource(review_top_10$Text))\n    ```", "```py\n    inspect(review_corpus[1:2])\n    ```", "```py\n    ## <<VCorpus>>\n    ## Metadata:  corpus specific: 0, document level (indexed): 0\n    ## Content:  documents: 2\n    ## [[1]]\n    ## <<PlainTextDocument>>\n    ## Metadata:  7\n    ## Content:  chars: 263\n    ## [[2]]\n    ## <<PlainTextDocument>>\n    ## Metadata:  7\n    ## Content:  chars: 190\n    ```", "```py\n    lapply(review_corpus[1:2], as.character)\n    ## $'1'\n    ## [1] \"I have bought several of the Vitality canned dog food products and have found them all to be of good quality. The product looks more like a stew than a processed meat and it smells better. My Labrador is finicky and she appreciates this product better than  most.\"\n    ## $'2'\n    ## [1] \"Product arrived labeled as Jumbo Salted Peanuts...the peanuts were actually small sized unsalted. Not sure if this was an error or if the vendor intended to represent the product as \\\"Jumbo\\\".\n    ```", "```py\nc_names <- c(\"S.No\",\"District\",\"Area\",\"Production\",\"PTY\")\n```", "```py\nc_names[2]\n```", "```py\n## [1] \"District\"\n```", "```py\nr_numbers <- rbinom(n = 16, size = 100, prob = 0.4)\n```", "```py\nmatrix(r_numbers, nrow = 4, ncol = 4)\n```", "```py\n##      [,1] [,2] [,3] [,4]\n## [1,]   48   39   37   39\n## [2,]   34   41   32   38\n## [3,]   40   34   42   46\n## [4,]   37   42   36   44\n```", "```py\nlapply(review_corpus[1:2], as.character)\n```", "```py\n## $'1'\n## [1] \"I have bought several of the Vitality canned dog food products and have found them all to be of good quality. The product looks more like a stew than a processed meat, and it smells better. My Labrador is finicky, and she appreciates this product better than  most.\"\n## $'2'\n## [1] \"Product arrived labeled as Jumbo Salted Peanuts...the peanuts were actually small sized unsalted. Not sure if this was an error or if the vendor intended to represent the product as \\\"Jumbo\\\".\n```", "```py\n    top_2_reviews <- review_corpus[1:2]\n    top_2_reviews <- tm_map(top_2_reviews,content_transformer(tolower))\n    lapply(top_2_reviews[1], as.character)\n    ```", "```py\n    ## [1] \"I have bought several of the vitality canned dog food products and have found them all to be of good quality. the product looks more like a stew than a processed meat and it smells better. my labrador is finicky, and she appreciates this product better than  most.\"\n    ```", "```py\n    top_2_reviews <- tm_map(top_2_reviews,removeWords, stopwords(\"english\"))\n    lapply(top_2_reviews[1], as.character)\n    ```", "```py\n    ## [1] \"  bought several   vitality canned dog food products   found      good quality.  product looks  like  stew   processed meat   smells better.  labrador  finicky   appreciates  product better   .\"\n    ```", "```py\n    top_2_reviews <- tm_map(top_2_reviews,stripWhitespace)\n    lapply(top_2_reviews[1], as.character)\n    ```", "```py\n    ## [1] \" bought several vitality canned dog food products found good quality. product looks like stew processed meat smells better. labrador finicky appreciates product better .\"\n    ```", "```py\n    top_2_reviews <- tm_map(top_2_reviews,stemDocument)\n    lapply(top_2_reviews[1], as.character)\n    ```", "```py\n    ## [1] \" bought sever vital can dog food product found good quality. product look like stew process meat smell better. labrador finicki appreci product better .\"\n    ```", "```py\n    dtm_matrix <- as.matrix(dtm)\n    ```", "```py\n    dim(dtm_matrix)\n    ```", "```py\n    ## [1]  2 37\n    ```", "```py\n    dtm_matrix[1:2,1:7]\n    ```", "```py\n    ##     Terms\n    ## Docs \"jumbo\". actual appreci arriv better better. bought\n    ##    1        0      0       1     0      1       1      1\n    ##    2        1      1       0     1      0       0      0\n    ```", "```py\n    dtm_matrix[1,\"product\"]\n    ```", "```py\n    ## [1] 3\n    ```", "```py\n    r_numbers <- rbinom(n = 16, size = 100, prob = 0.4)\n    ```", "```py\n    #sample() will generate 16 random letters from the English alphabet without repetition\n    r_characters <- sample(LETTERS, size = 16, replace = FALSE)\n    ```", "```py\n    list(r_numbers, r_characters)\n    ```", "```py\n    ## [[1]]\n    ##  [1] 48 53 38 31 44 43 36 47 43 38 43 41 45 40 44 50\n    ## \n    ## [[2]]\n    ##  [1] \"V\" \"C\" \"N\" \"Z\" \"E\" \"L\" \"A\" \"Y\" \"U\" \"F\" \"H\" \"D\" \"O\" \"K\" \"T\" \"X\"\n    ```", "```py\n    r_list <- list(r_numbers, r_characters)\n    ```", "```py\n    r_list[[2]]\n    ```", "```py\n    ##  [1] \"V\" \"C\" \"N\" \"Z\" \"E\" \"L\" \"A\" \"Y\" \"U\" \"F\" \"H\" \"D\" \"O\" \"K\" \"T\" \"X\"\n    ```", "```py\n    (r_list[[2]])[1]\n    ```", "```py\n    ## [1] \"V\" \n    ```", "```py\n    r_numbers <- rbinom(n = 16, size = 100, prob = 0.4)\n    ```", "```py\n    r_characters <- sample(LETTERS, 18, FALSE)\n    ```", "```py\n    list(r_numbers, r_characters)\n    ```", "```py\n    ## [[1]]\n    ##  [1] 48 53 38 31 44 43 36 47 43 38 43 41 45 40 44 50\n    ## \n    ## [[2]]\n    ##  [1] \"V\" \"C\" \"N\" \"Z\" \"E\" \"L\" \"A\" \"Y\" \"U\" \"F\" \"H\" \"D\" \"O\" \"K\" \"T\" \"X\" \"P\"  \"Q\"\n    ```", "```py\n    r_numbers <- rbinom(n = 16, size = 100, prob = 0.4)\n    ```", "```py\n    r_characters <- sample(LETTERS, 18, FALSE)\n    ```", "```py\n    data.frame(r_numbers, r_characters)\n    ```", "```py\n    Error in data.frame(r_numbers, r_characters) : \n      arguments imply differing number of rows: 16, 18\n    ```", "```py\n    library(data.table)\n    ```", "```py\n    system.time(fread(\"Reviews_Full.csv\"))\n    ```", "```py\n    Read 14.1% of 568454 rows\n    Read 31.7% of 568454 rows\n    Read 54.5% of 568454 rows\n    Read 72.1% of 568454 rows\n    Read 79.2% of 568454 rows\n    Read 568454 rows and 10 (of 10) columns from 0.280 GB file in 00:00:08\n    ##    user  system elapsed \n    ##    3.62    0.15    3.78\n    ```", "```py\n    system.time(read.csv(\"Reviews_Full.csv\"))\n    ```", "```py\n    ##    user  system elapsed \n    ##    4.84    0.05    4.91\n    ```", "```py\n    r_numbers <- rbinom(n = 16, size = 100, prob = 0.4)\n    ```", "```py\n    r_numbers\n    ```", "```py\n    ##  [1] 38 46 40 42 45 39 37 35 44 39 46 41 31 32 34 43\n    ```", "```py\n    r_characters <- sample(LETTERS, 18, FALSE)\n    ```", "```py\n    r_characters\n    ```", "```py\n    ##  [1] \"C\" \"K\" \"Z\" \"I\" \"E\" \"A\" \"X\" \"O\" \"H\" \"Y\" \"T\" \"B\" \"N\" \"F\" \"U\" \"V\" \"S\"\n    ## [18] \"P\"\n    ```", "```py\n    cbind(r_numbers, r_characters)\n    ```", "```py\n    ## Warning in cbind(r_numbers, r_characters): number of rows of result is not a multiple of vector length (arg 1)\n    ##       r_numbers r_characters\n    ##  [1,] \"38\"      \"C\"         \n    ##  [2,] \"46\"      \"K\"         \n    ##  [3,] \"40\"      \"Z\"         \n    ##  [4,] \"42\"      \"I\"         \n    ##  [5,] \"45\"      \"E\"         \n    ##  [6,] \"39\"      \"A\"         \n    ##  [7,] \"37\"      \"X\"         \n    ##  [8,] \"35\"      \"O\"         \n    ##  [9,] \"44\"      \"H\"         \n    \"\n    ```", "```py\n    class(cbind(r_numbers, r_characters))\n    ```", "```py\n    ## [1] \"matrix\"\n    ```", "```py\n    number of rows of result is not a multiple of vector length (arg 1)\n    r_numbers r_characters\n    ```", "```py\ncbind(as.data.frame(r_numbers), as.data.frame(r_characters))\n```", "```py\nError in data.frame(..., check.names = FALSE) : \n  arguments imply differing number of rows: 16, 18\n```", "```py\n    r_numbers <- rbinom(n = 18, size = 100, prob = 0.4)\n    ```", "```py\n    r_numbers\n    ```", "```py\n    ##  [1] 38 46 40 42 45 39 37 35 44 39 46 41 31 32 34 43\n    ```", "```py\n    r_characters <- sample(LETTERS, 18, FALSE)\n    ```", "```py\n    r_characters\n    ```", "```py\n    ##  [1] \"C\" \"K\" \"Z\" \"I\" \"E\" \"A\" \"X\" \"O\" \"H\" \"Y\" \"T\" \"B\" \"N\" \"F\" \"U\" \"V\" \"S\"\n    ## [18] \"P\"\n    ```", "```py\n    rbind(r_numbers, r_characters)\n    ```", "```py\n    ##              [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11]\n    ## r_numbers    \"37\" \"44\" \"38\" \"38\" \"41\" \"35\" \"38\" \"40\" \"38\" \"45\"  \"37\" \n    ## r_characters \"Q\"  \"Y\"  \"O\"  \"L\"  \"A\"  \"G\"  \"V\"  \"S\"  \"B\"  \"U\"   \"D\"  \n    ##              [,12] [,13] [,14] [,15] [,16] [,17] [,18]\n    ## r_numbers    \"40\"  \"41\"  \"42\"  \"36\"  \"44\"  \"37\"  \"44\" \n    ## r_characters \"R\"   \"T\"   \"P\"   \"F\"   \"X\"   \"C\"   \"I\"\n    ```", "```py\n    set.seed(100)\n    ```", "```py\n    r_numbers <- sample(1:30,10, replace = FALSE)\n    ```", "```py\n    r_characters <- sample(LETTERS, 10, TRUE)\n    ```", "```py\n    df_one <- cbind(as.data.frame(r_numbers), as.data.frame(r_characters))\n    df_one\n    ```", "```py\n    ##    r_numbers r_characters\n    ## 1         10            Q\n    ## 2          8            W\n    ## 3         16            H\n    ## 4          2            K\n    ## 5         13            T\n    ## 6         26            R\n    ## 7         20            F\n    ## 8          9            J\n    ## 9         25            J\n    ## 10         4            R\n    ```", "```py\n    set.seed(200)\n    ```", "```py\n    r_numbers <- sample(1:30,10, replace = FALSE)\n    ```", "```py\n    r_characters <- sample(LETTERS, 10, TRUE)\n    ```", "```py\n    df_two <- cbind(as.data.frame(r_numbers), as.data.frame(r_characters))\n    df_two\n    ```", "```py\n    ##    r_numbers r_characters\n    ## 1         17            L\n    ## 2         30            Q\n    ## 3         29            D\n    ## 4         19            Q\n    ## 5         18            J\n    ## 6         21            H\n    ## 7         26            O\n    ## 8          3            D\n    ## 9         12            X\n    ## 10         5            Q\n    ```", "```py\nmerge(df_one, df_two, by = \"r_numbers\")\n##   r_numbers r_characters.x r_characters.y\n## 1        26              R              O\n```", "```py\nmerge(df_one, df_two, by = \"r_numbers\", all.x = TRUE)\n##    r_numbers r_characters.x r_characters.y\n## 1          2              K           <NA>\n## 2          4              R           <NA>\n## 3          8              W           <NA>\n## 4          9              J           <NA>\n## 5         10              Q           <NA>\n## 6         13              T           <NA>\n## 7         16              H           <NA>\n## 8         20              F           <NA>\n## 9         25              J           <NA>\n## 10        26              R              O\n```", "```py\nmerge(df_one, df_two, by = \"r_numbers\", all.y = TRUE)\n##    r_numbers r_characters.x r_characters.y\n## 1          3           <NA>              D\n## 2          5           <NA>              Q\n## 3         12           <NA>              X\n## 4         17           <NA>              L\n## 5         18           <NA>              J\n## 6         19           <NA>              Q\n## 7         21           <NA>              H\n## 8         26              R              O\n## 9         29           <NA>              D\n## 10        30           <NA>              Q\n```", "```py\nmerge(df_one, df_two, by = \"r_numbers\", all = TRUE)\n##    r_numbers r_characters.x r_characters.y\n## 1          2              K           <NA>\n## 2          3           <NA>              D\n## 3          4              R           <NA>\n## 4          5           <NA>              Q\n## 5          8              W           <NA>\n## 6          9              J           <NA>\n## 7         10              Q           <NA>\n## 8         12           <NA>              X\n## 9         13              T           <NA>\n## 10        16              H           <NA>\n## 11        17           <NA>              L\n## 12        18           <NA>              J\n## 13        19           <NA>              Q\n…\n```", "```py\n    head(iris)\n    ```", "```py\n    ##   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n    ## 1          5.1         3.5          1.4         0.2  setosa\n    ## 2          4.9         3.0          1.4         0.2  setosa\n    ## 3          4.7         3.2          1.3         0.2  setosa\n    ## 4          4.6         3.1          1.5         0.2  setosa\n    ## 5          5.0         3.6          1.4         0.2  setosa\n    ## 6          5.4         3.9          1.7         0.4  setosa\n    ```", "```py\n    iris$Type <- ifelse((iris$Sepal.Width>2 & iris$Sepal.Width <=3),\"TYPE 1\",\"TYPE 2\")\n    ```", "```py\n    df_iris <- iris[,c(\"Type\",\"Sepal.Width\",\"Species\")]\n    ```", "```py\n    reshape(df_iris,idvar = \"Species\", timevar = \"Type\", direction = \"wide\")\n    ```", "```py\n    ##        Species Sepal.Width.TYPE 2 Sepal.Width.TYPE 1\n    ## 1       setosa                3.5                3.0\n    ## 51  versicolor                3.2                2.3\n    ## 101  virginica                3.3                2.7\n    ```", "```py\n    multiple rows match for Type=TYPE 2: first taken multiple rows match for Type=TYPE 1: first taken\n    ```", "```py\naggregate(formula =. ~ Species, data = iris, FUN = mean)\n```", "```py\n##      Species Sepal.Length Sepal.Width Petal.Length Petal.Width\n## 1     setosa        5.006       3.428        1.462       0.246\n## 2 versicolor        5.936       2.770        4.260       1.326\n## 3  virginica        6.588       2.974        5.552       2.026\n```", "```py\n    r_characters <- matrix(sample(LETTERS, 10000, replace = TRUE), ncol = 100, nrow = 100)\n    ```", "```py\n    c_vowel <- function(x_char){\n      return(sum(x_char %in% c(\"A\",\"I\",\"O\",\"U\")))\n    }\n    ```", "```py\n    apply(r_characters, MARGIN = 2, c_vowel)\n    ```", "```py\n    ##   [1] 17 16 10 11 12 25 16 14 14 12 20 13 16 14 14 20 10 12 11 16 10 20 15\n    ##  [24] 10 14 13 17 14 14 13 15 19 18 21 15 13 19 21 24 18 13 20 15 15 15 19\n    ##  [47] 13  6 18 11 16 16 11 13 20 14 12 17 11 14 14 16 13 11 23 14 17 14 22\n    ##  [70] 11 18 10 18 21 19 14 18 12 13 15 16 10 15 19 14 13 16 15 12 12 14 10\n    ##  [93] 16 16 20 16 13 22 15 15\n    ```", "```py\n    r_characters <- list(a=sample(LETTERS, 100, replace = TRUE),\n                         b=sample(LETTERS, 100, replace = TRUE))\n    ```", "```py\n    lapply(r_characters, c_vowel)\n    ```", "```py\n    ## $a\n    ## [1] 19\n    ## $b\n    ## [1] 10\n    ```", "```py\n    out_list <- lapply(r_characters, c_vowel)\n    class(out_list)\n    ```", "```py\n    ## [1] \"list\"\n    ```", "```py\nsapply(r_characters, c_vowel)\n##  a  b \n## 19 10\n```", "```py\nout_vector <- sapply(r_characters, c_vowel)\nclass(out_vector)\n```", "```py\n## [1] \"integer\"\n```", "```py\ntapply(iris$Sepal.Length, iris$Species,sd)\n```", "```py\n##     setosa versicolor  virginica \n##  0.3524897  0.5161711  0.6358796\n```", "```py\ntapply(iris$Sepal.Width, iris$Species,sd)\n```", "```py\n##     setosa versicolor  virginica \n##  0.3790644  0.3137983  0.3224966\n```", "```py\n    df_bank_detail <- read.csv(\"bank-full.csv\", sep = ';')\n    ```", "```py\n    library(dplyr)\n    ```", "```py\n    df_bank_detail %>%\n      filter(job == \"blue-collar\") %>%\n      group_by(marital) %>%\n      summarise(\n        cnt = n(),\n        average = mean(balance, na.rm = TRUE)\n      )\n    ```", "```py\n    ## # A tibble: 3 x 3\n    ##    marital   cnt   average\n    ##     <fctr> <int>     <dbl>\n    ## 1 divorced   750  820.8067\n    ## 2  married  6968 1113.1659\n    ## 3   single  2014 1056.1053\n    ```", "```py\n    df_bank_detail %>%\n      mutate(sec_edu_and_default = ifelse((education == \"secondary\" & default == \"yes\"), \"yes\",\"no\")) %>%\n      select(age, job, marital,balance, sec_edu_and_default) %>%\n      filter(sec_edu_and_default == \"yes\") %>%\n      group_by(marital) %>%\n      summarise(\n        cnt = n(),\n        average = mean(balance, na.rm = TRUE)\n      )\n    ```", "```py\n    ## # A tibble: 3 x 3\n    ##    marital   cnt    average\n    ##     <fctr> <int>      <dbl>\n    ## 1 divorced    64   -8.90625\n    ## 2  married   243  -74.46914\n    ## 3   single   151 -217.43046\n    ```", "```py\n    library(tidyr)\n    ```", "```py\n    set.seed(100)\n    ```", "```py\n    r_name <- c(\"John\", \"Jenny\", \"Michael\", \"Dona\", \"Alex\")\n    ```", "```py\n    r_food_A <- sample(1:150,5, replace = FALSE)\n    ```", "```py\n    r_food_B <- sample(1:150,5, replace = FALSE)\n    ```", "```py\n    df_untidy <- data.frame(r_name, r_food_A, r_food_B)\n    df_untidy\n    ```", "```py\n    ##    r_name r_food_A r_food_B\n    ## 1    John       47       73\n    ## 2   Jenny       39      122\n    ## 3 Michael       82       55\n    ## 4    Dona        9       81\n    ## 5    Alex       69       25\n    ```", "```py\n    df_long <- df_untidy %>%\n      gather(food, calories, r_food_A:r_food_B)\n    df_long\n    ```", "```py\n    ##     r_name     food calories\n    ## 1     John r_food_A       47\n    ## 2    Jenny r_food_A       39\n    ## 3  Michael r_food_A       82\n    ## 4     Dona r_food_A        9\n    ## 5     Alex r_food_A       69\n    ## 6     John r_food_B       73\n    ## 7    Jenny r_food_B      122\n    ## 8  Michael r_food_B       55\n    ## 9     Dona r_food_B       81\n    ## 10    Alex r_food_B       25\n    ```", "```py\n    df_long %>%\n      spread(food,calories)\n    ##    r_name r_food_A r_food_B\n    ## 1    Alex       69       25\n    ## 2    Dona        9       81\n    ## 3   Jenny       39      122\n    ## 4    John       47       73\n    ## 5 Michael       82       55\n    ```", "```py\n    key <- c(\"John.r_food_A\", \"Jenny.r_food_A\", \"Michael.r_food_A\", \"Dona.r_food_A\", \"Alex.r_food_A\", \"John.r_food_B\", \"Jenny.r_food_B\", \"Michael.r_food_B\", \"Dona.r_food_B\", \"Alex.r_food_B\")\n    calories <- c(74, 139, 52, 141, 102, 134, 27, 94, 146, 20)\n    df_large_key <- data.frame(key,calories)  \n    df_large_key\n    ```", "```py\n    ##                 key calories\n    ## 1     John.r_food_A       74\n    ## 2    Jenny.r_food_A      139\n    ## 3  Michael.r_food_A       52\n    ## 4     Dona.r_food_A      141\n    ## 5     Alex.r_food_A      102\n    ## 6     John.r_food_B      134\n    ## 7    Jenny.r_food_B       27\n    ## 8  Michael.r_food_B       94\n    ## 9     Dona.r_food_B      146\n    ## 10    Alex.r_food_B       20\n    df_large_key %>%\n      separate(key, into = c(\"name\",\"food\"), sep = \"\\\\.\")\n    ##       name     food calories\n    ## 1     John r_food_A       74\n    ## 2    Jenny r_food_A      139\n    ## 3  Michael r_food_A       52\n    ## 4     Dona r_food_A      141\n    ## 5     Alex r_food_A      102\n    ## 6     John r_food_B      134\n    ## 7    Jenny r_food_B       27\n    ## 8  Michael r_food_B       94\n    ## 9     Dona r_food_B      146\n    ## 10    Alex r_food_B       20\n    ```", "```py\n    ## # A tibble: 4 x 8\n    ##        var   min   q25 median   q75    max       mean         sd\n    ## *    <chr> <dbl> <dbl>  <dbl> <dbl>  <dbl>      <dbl>      <dbl>\n    ## 1      age    18    33     39    48     95   40.93621   10.61876\n    ## 2  balance -8019    72    448  1428 102127 1362.27206 3044.76583\n    ## 3 duration     0   103    180   319   4918  258.16308  257.52781\n    ## 4    pdays    -1    -1     -1    -1    871   40.19783  100.12875\n    ```", "```py\n    library(plyr)\n    ```", "```py\n    c_vowel <- function(x_char){\n      return(sum(as.character(x_char[,\"b\"]) %in% c(\"A\",\"I\",\"O\",\"U\")))\n    }\n    ```", "```py\n    set.seed(101)\n    ```", "```py\n    r_characters <- data.frame(a=rep(c(\"Split_1\",\"Split_2\",\"Split_3\"),1000),\n                         b= sample(LETTERS, 3000, replace = TRUE))\n    ```", "```py\n    dlply(r_characters, c_vowel)\n    ```", "```py\n    ## $Split_1\n    ## [1] 153\n    ## \n    ## $Split_2\n    ## [1] 154\n    ## \n    ## $Split_3\n    ## [1] 147\n    ```", "```py\n    daply(r_characters, c_vowel)\n    ```", "```py\n    ## Split_1 Split_2 Split_3 \n    ##     153     154     147\n    ```", "```py\n    ddply(r_characters, c_vowel)\n    ```", "```py\n    ##         a  V1\n    ## 1 Split_1 153\n    ## 2 Split_2 154\n    ## 3 Split_3 147\n    ```", "```py\ndf_bank_detail <- read.csv(\"bank-full.csv\", sep = ';')\n```", "```py\nggplot(data = df_bank_detail) +\n  geom_point(mapping = aes(x = age, y = balance, color = job))\n```", "```py\nggplot(data = df_bank_detail) +\n  geom_point(mapping = aes(x = age, y = balance, color = job)) +\n  facet_wrap(~ marital, nrow = 1)\n```", "```py\nggplot(data = df_bank_detail) +\n  geom_smooth(mapping = aes(x = age, y = balance, linetype = marital))\n## 'geom_smooth()' using method = 'gam'\n```", "```py\nggplot(data = df_bank_detail) +\n  geom_bar(mapping = aes(x=job, fill = y)) +\n  theme(axis.text.x = element_text(angle=90, vjust=.8, hjust=0.8))\n```", "```py\ntapply(df_bank_detail$age, df_bank_detail$job, summary)\n```", "```py\n## $admin.\n##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n##   20.00   32.00   38.00   39.29   46.00   75.00 \n## \n## $'blue-collar'\n##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n##   20.00   33.00   39.00   40.04   47.00   75.00 \n## \n## $entrepreneur\n##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n##   21.00   35.00   41.00   42.19   49.00   84.00 \n## \n## $housemaid\n##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n##   22.00   38.00   47.00   46.42   55.00   83.00 \n## \n## $management\n##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n##   21.00   33.00   38.00   40.45   48.00   81.00 \n## \n## $retired\n##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n##   24.00   56.00   59.00   61.63   67.00   95.00 \n## \n## $'self-employed'\n##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n##   22.00   33.00   39.00   40.48   48.00   76.00 \n## \n0\n```", "```py\nggplot(data = df_bank_detail, mapping = aes(x=job, y = age, fill = job)) +\n  geom_boxplot(varwidth = TRUE) +\n  theme(axis.text.x = element_text(angle=90, vjust=.8, hjust=0.8))\n```"]