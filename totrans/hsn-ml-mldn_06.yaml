- en: Classification Model
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分类模型
- en: 'With regression models behind us, it is now time to dive into classification
    models. In this chapter, we will examine the math behind classification models,
    as well as the various applications of classification models. In addition, we
    will build two new ML.NET classification applications: the first, a binary classification
    example that will predict if a car''s price is a good deal or not, akin to what
    you would find on a car purchase website; the other application, a multi-class
    classification application that categorizes emails. Finally, we will explore how
    to evaluate a classification model with the properties ML.NET exposes in classification
    models.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们了解了回归模型之后，现在是时候深入到分类模型中去了。在本章中，我们将探讨分类模型背后的数学原理，以及分类模型的各种应用。此外，我们将构建两个新的ML.NET分类应用程序：第一个是一个二元分类示例，它将预测汽车价格是否为好交易，类似于你在汽车购买网站上找到的内容；另一个应用程序是一个多类分类应用程序，用于对电子邮件进行分类。最后，我们将探讨如何使用ML.NET在分类模型中公开的特性来评估分类模型。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Breaking down classification models
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解构分类模型
- en: Creating a binary classification application
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个二元分类应用程序
- en: Creating a multi-class classification application
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个多类分类应用程序
- en: Evaluating a classification model
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 评估分类模型
- en: Breaking down classification models
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解构分类模型
- en: As mentioned in [Chapter 1](b8d873e1-9234-4f11-ad94-76df5ffbb228.xhtml), *Getting
    Started with Machine Learning and ML.NET*, classification is broken down into
    two main categories—two-class and multi-class. In a two-class classifier, also
    known as a binary classifier, the prediction simply returns 0 or 1\. In a multi-class
    problem, a pre-selected range of return labels, such as virus types or car types,
    is returned.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 如[第1章](b8d873e1-9234-4f11-ad94-76df5ffbb228.xhtml)中所述，*开始使用机器学习和ML.NET*，分类被分为两大类——二类和多类。在二类分类器中，也称为二元分类器，预测结果简单地返回0或1。在多类问题中，返回预选的标签范围，例如病毒类型或汽车类型。
- en: 'There are several binary classification model types available in the machine
    learning ecosystem to choose from, as follows:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在机器学习生态系统中，有几种二元分类模型类型可供选择，如下所示：
- en: '`AveragedPerceptronTrainer`'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AveragedPerceptronTrainer`'
- en: '`SdcaLogisticRegressionBinaryTrainer`'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SdcaLogisticRegressionBinaryTrainer`'
- en: '`SdcaNonCalibratedBinaryTrainer`'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SdcaNonCalibratedBinaryTrainer`'
- en: '`SymbolicSgdLogisticRegressionBinaryTrainer`'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SymbolicSgdLogisticRegressionBinaryTrainer`'
- en: '`LbfgsLogisticRegressionBinaryTrainer`'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LbfgsLogisticRegressionBinaryTrainer`'
- en: '`LightGbmBinaryTrainer`'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LightGbmBinaryTrainer`'
- en: '`FastTreeBinaryTrainer`'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FastTreeBinaryTrainer`'
- en: '`FastForestBinaryTrainer`'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FastForestBinaryTrainer`'
- en: '`GamBinaryTrainer`'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`GamBinaryTrainer`'
- en: '`FieldAwareFactorizationMachineTrainer`'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FieldAwareFactorizationMachineTrainer`'
- en: '`PriorTrainer`'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PriorTrainer`'
- en: '`LinearSvmTrainer`'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LinearSvmTrainer`'
- en: The car-value application we will be creating later in this chapter utilizes
    the `FastTreeBinaryTrainer` model.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本章后面创建的汽车价值应用程序将使用`FastTreeBinaryTrainer`模型。
- en: 'ML.NET also provides the following multi-class classifiers:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: ML.NET还提供了以下多类分类器：
- en: '`LightGbmMulticlassTrainer`'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LightGbmMulticlassTrainer`'
- en: '`SdcaMaximumEntropyMulticlassTrainer`'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SdcaMaximumEntropyMulticlassTrainer`'
- en: '`SdcaNonCalibratedMulticlassTrainer`'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SdcaNonCalibratedMulticlassTrainer`'
- en: '`LbfgsMaximumEntropyMulticlassTrainer`'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LbfgsMaximumEntropyMulticlassTrainer`'
- en: '`NaiveBayesMulticlassTrainer`'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NaiveBayesMulticlassTrainer`'
- en: '`OneVersusAllTrainer`'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OneVersusAllTrainer`'
- en: '`PairwiseCouplingTrainer`'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PairwiseCouplingTrainer`'
- en: For the multi-class classifier example application, we will be using the `SdcaMaximumEntropyMulticlassTrainer`
    model. The reason for this is that **Stochastic Dual Coordinate Ascents** (**SDCAs**)
    can provide a good default performance without tuning.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 对于多类分类器示例应用程序，我们将使用`SdcaMaximumEntropyMulticlassTrainer`模型。这样做的原因是**随机双坐标上升法**（**SDCAs**）可以在不调整的情况下提供良好的默认性能。
- en: Choosing a classification trainer
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择分类训练器
- en: Given the two types of classification, which should you choose? As stated earlier
    in this chapter, compared to regression models, your prediction output type will
    decide between binary and multi-class classification. Does your problem simply
    predict a value of true or false, or does it provide a more varied output based
    on a pre-defined value set? If your answer is the former, you need to use a binary
    classification. If the latter, you will need to use a multi-class classification.
    In this chapter, we will demonstrate both model prediction types.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 针对两种分类类型，你应该选择哪一种？如本章前面所述，与回归模型相比，你的预测输出类型将决定是二分类还是多分类分类。你的问题仅仅是预测一个真或假的值，还是基于预定义的值集提供更丰富的输出？如果你的答案是前者，你需要使用二分类。如果是后者，你需要使用多分类分类。在本章中，我们将演示这两种模型预测类型。
- en: For specific binary classification trainers, SDCA, LightGBM, and FastTree are
    the most popular options, as well as the most documented.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 对于特定的二分类训练器，SDCA、LightGBM和FastTree是最受欢迎的选项，同时也是文档最完善的。
- en: For specific multi-class classification trainers, LightGBM and SDCA are the
    most popular and best-documented options.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 对于特定的多分类分类训练器，LightGBM和SDCA是最受欢迎且文档最完善的选项。
- en: Creating a binary classification application
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个二分类应用
- en: As mentioned earlier, the application we will be creating is a car-value predictor.
    Given a set of attributes tied to a car, one can predict if the price is a good
    deal or not. The attributes included in this example aren't a definitive list
    of attributes, nor should they be used as-is in a production environment. However,
    one could use this as a starting point for predicting a simple true-or-false answer
    based on several attributes.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，我们将创建的应用是一个汽车价值预测器。给定一组与汽车相关的属性，可以预测价格是否为好交易。本例中包含的属性并不是属性列表的最终版本，也不应在生产环境中直接使用。然而，可以用这个作为预测基于几个属性简单真或假答案的起点。
- en: As with previous chapters, the complete project code, sample dataset, and project
    files can be downloaded here: [https://github.com/PacktPublishing/Hands-On-Machine-Learning-With-ML.NET/tree/master/chapter04](https://github.com/PacktPublishing/Hands-On-Machine-Learning-With-ML.NET/tree/master/chapter04).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 与前几章一样，完整的项目代码、样本数据集和项目文件可以在此处下载：[https://github.com/PacktPublishing/Hands-On-Machine-Learning-With-ML.NET/tree/master/chapter04](https://github.com/PacktPublishing/Hands-On-Machine-Learning-With-ML.NET/tree/master/chapter04)。
- en: Diving into the trainer
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 深入了解训练器
- en: As previously mentioned, for this binary classification application, we will
    be using the FastTree trainer.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，对于这个二分类应用，我们将使用FastTree训练器。
- en: FastTree is based on the **Multiple Additive Regression Trees** (**MART**) gradient
    boosting algorithm. Gradient boosting is a very popular technique, in which a
    series of trees are built in a step-wise manner before ultimately selecting the
    best tree. MART takes this approach a step further by learning an ensemble of
    regression trees that use scalar values in their leaves.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: FastTree基于**多重加性回归树（MART**）梯度提升算法。梯度提升是一种非常流行的技术，它通过逐步构建一系列树，最终选择最佳树。MART通过学习使用标量值在其叶子节点上的回归树集合，将这种方法进一步发展。
- en: The FastTree trainer doesn't require normalization but does require all of the
    feature columns to use a `float` variable type and the label column to be a `bool`
    variable type.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: FastTree训练器不需要归一化，但要求所有特征列使用`float`变量类型，标签列使用`bool`变量类型。
- en: If you are curious about MART, Cornell University has a paper from 2015 on the
    subject: [https://arxiv.org/abs/1505.01866](https://arxiv.org/abs/1505.01866.).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对MART感兴趣，康奈尔大学有一篇2015年的论文讨论了该主题：[https://arxiv.org/abs/1505.01866](https://arxiv.org/abs/1505.01866)。
- en: Exploring the project architecture
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索项目架构
- en: Building on the project architecture and code we created in [Chapter 3](8bcfc000-9adc-4eda-a91a-e09f676eac85.xhtml),
    *Regression Model*, the major change architecturally in this example is the mechanism
    for input. For this application, since we are using the FastTree algorithm, this
    requires referencing the `Microsoft.ML.FastTree` NuGet package (version 1.3.1
    is the latest at the time of this writing).If you are building this project from
    scratch and do not remember how to add a NuGet reference, please refer back to [Chapter
    2](b8decd34-4bcb-4b1b-80d2-b2bfd0fa31c1.xhtml), *Setting Up the ML.NET Environment*.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在第 3 章中创建的项目架构和代码的基础上，即 *回归模型*，在此示例中，主要的架构变化是输入机制。对于此应用程序，由于我们使用的是 FastTree
    算法，这需要引用 `Microsoft.ML.FastTree` NuGet 包（在撰写本文时，最新版本为 1.3.1）。如果您从头开始构建此项目并且不记得如何添加
    NuGet 引用，请参阅第 2 章，即 *设置 ML.NET 环境*。
- en: 'In the following screenshot, you will find the Visual Studio Solution Explorer
    view of the project. The new addition to the solution is the `testdata.csv` file,
    which we will review here:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的屏幕截图中，您将找到项目的 Visual Studio 解决方案资源管理器视图。解决方案的新增内容是 `testdata.csv` 文件，我们将在下面进行回顾：
- en: '![](img/68e93a35-367b-4d5d-a63d-6e0dad029632.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](img/68e93a35-367b-4d5d-a63d-6e0dad029632.png)'
- en: 'The `sampledata.csv` file contains 18 rows of random data. Feel free to adjust
    the data to fit your own observations or to adjust the trained model. Here is
    a snippet of the data:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`sampledata.csv` 文件包含 18 行随机数据。您可以随意调整数据以适应您的观察或调整训练好的模型。以下是数据的片段：'
- en: '[PRE0]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Each of these rows contains the value for the properties in the newly created
    `CarInventory` class that we will review later on in this chapter.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 每一行都包含我们将在此章后面回顾的全新 `CarInventory` 类中属性的值。
- en: 'In addition, in this chapter, we added the `testdata.csv` file that contains
    additional data points to test the newly trained model against and evaluate. Here
    is a snippet of the data inside of `testdata.csv`:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在本章中，我们添加了 `testdata.csv` 文件，其中包含额外的数据点，以测试新训练的模型并评估。以下是 `testdata.csv` 内部的数据片段：
- en: '[PRE1]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Diving into the code
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 深入代码
- en: For this application, as noted in the previous section, we are building on top
    of the work completed in [Chapter 3](8bcfc000-9adc-4eda-a91a-e09f676eac85.xhtml),
    *Regression Model*. For this deep dive, we are going to focus solely on the code
    that was changed for this application.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如前节所述，对于此应用程序，我们正在基于第 3 章中完成的工作构建，即 *回归模型*。对于这次深入研究，我们将专注于此应用程序更改的代码。
- en: 'Classes that were changed or added are as follows:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是被更改或添加的类：
- en: '`CarInventory`'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CarInventory`'
- en: '`CarInventoryPrediction`'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CarInventoryPrediction`'
- en: '`Predictor`'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Predictor`'
- en: '`Trainer`'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`训练器`'
- en: '`Program`'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`程序`'
- en: The CarInventory class
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CarInventory 类
- en: 'The `CarInventory` class is the container class that contains the data to both
    predict and train our model. These columns map in order of the sample data reviewed
    previously. If you begin experimenting with new features and add to the following
    class, ensure you increment the array index appropriately, as follows:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`CarInventory` 类是包含预测和训练模型所需数据的容器类。这些列按照之前审查的样本数据的顺序映射。如果您开始尝试新的功能并向以下类添加内容，请确保适当地增加数组索引，如下所示：'
- en: '[PRE2]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The CarInventoryPrediction class
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CarInventoryPrediction 类
- en: 'The `CarInventoryPrediction` class contains the properties mapped to our prediction
    output, in addition to the `Score` and `Probability` properties used for model
    evaluation. The `PredictedLabel` property contains our classification result,
    not the label as in previous chapters, as shown in the following code block:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`CarInventoryPrediction` 类包含映射到我们预测输出的属性，以及用于模型评估的 `Score` 和 `Probability`
    属性。`PredictedLabel` 属性包含我们的分类结果，而不是像前几章中的标签，如下面的代码块所示：'
- en: '[PRE3]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The Predictor class
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 预测器类
- en: 'There are a couple of changes in this class to handle the employment-prediction
    scenario, as follows:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在此类中进行了几处更改以处理就业预测场景，如下所示：
- en: 'The first change is in the prediction call itself. As you probably guessed,
    the `TSrc` and `TDst` arguments need to be adjusted to utilize both of the new
    classes we created, `CarInventory` and `CarInventoryPrediction`, like this:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一个更改是在预测调用本身。正如您可能猜到的，`TSrc` 和 `TDst` 参数需要调整以利用我们创建的两个新类，即 `CarInventory` 和
    `CarInventoryPrediction`，如下所示：
- en: '[PRE4]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Given that we are no longer simply passing in the string and building an object
    on the fly, we need to first read in the file as text. We then deserialize the
    JSON into our `CarInventory`object, as follows:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于我们不再只是传递字符串并在运行时构建对象，我们需要首先以文本形式读取文件。然后，我们将JSON反序列化到我们的`CarInventory`对象中，如下所示：
- en: '[PRE5]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Lastly, we need to adjust the output of our prediction to match our new `CarInventoryPrediction`properties,
    like this:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们需要调整我们的预测输出以匹配新的`CarInventoryPrediction`属性，如下所示：
- en: '[PRE6]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The Trainer class
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`Trainer`类'
- en: 'Inside the `Trainer` class, several modifications need to be made to support
    binary classification, as follows:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Trainer`类内部，需要做出一些修改以支持二元分类，如下所示：
- en: 'The first change is the check to ensure the test filename exists, shown in
    the following code block:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一个更改是检查测试文件名是否存在，如下面的代码块所示：
- en: '[PRE7]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We then build the data process pipeline using the `NormalizeMeanVariance` transform
    method we used in [Chapter 3](8bcfc000-9adc-4eda-a91a-e09f676eac85.xhtml), *Regression
    Model*,on the inputted values, like this:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们使用在[第3章](8bcfc000-9adc-4eda-a91a-e09f676eac85.xhtml)中使用的`NormalizeMeanVariance`转换方法构建数据处理管道，该方法用于输入值，如下所示：
- en: '[PRE8]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We can then create the `FastTree` trainer with the label from the `CarInventory`
    class and the normalized mean variance, as follows:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们可以使用来自`CarInventory`类的标签和归一化均值方差创建`FastTree`训练器，如下所示：
- en: '[PRE9]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Later on, after you have run the application, consider tweaking the number of
    leaves and the number of trees to see how both the model metrics and your prediction
    probability percentage change.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，在您运行应用程序之后，考虑调整叶子和树的数量，以查看模型指标和您的预测概率百分比如何变化。
- en: 'Lastly, we call the `Regression.Evaluate` method to provide regression-specific
    metrics, followed by a `Console.WriteLine` call to provide these metrics to your
    console output. We will go into detail about what each of these means in the last
    section of the chapter, but for now, the code can be seen here:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们调用`Regression.Evaluate`方法提供回归特定的指标，然后通过`Console.WriteLine`调用将这些指标输出到控制台。我们将在本章的最后部分详细说明这些指标的含义，但现在，代码如下所示：
- en: '[PRE10]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now, we evaluate the model we just trained, like this:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们评估我们刚刚训练的模型，如下所示：
- en: '[PRE11]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Finally, we output all of the classification metrics. We will detail each of
    these in the next section, but for now, the code can be seen here:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们输出所有的分类指标。我们将在下一节详细说明每个指标，但现在，代码如下所示：
- en: '[PRE12]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The Program class
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`Program`类'
- en: 'The only change in the `Program` class is the help text to indicate usage for
    the trainer to accept the test file, shown in the following code block:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Program`类中唯一的更改是帮助文本，用于指示训练者接受测试文件的使用方法，如下面的代码块所示：
- en: '[PRE13]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Finally, we modify the `switch`/`case` statement to support the additional
    parameter to the `Train` method, as follows:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们修改`switch`/`case`语句以支持`Train`方法的附加参数，如下所示：
- en: '[PRE14]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Running the application
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行应用程序
- en: 'To run the application, the process is nearly identical to the sample application
    in [Chapter 3](8bcfc000-9adc-4eda-a91a-e09f676eac85.xhtml), *Regression Model*,
    with the addition of passing in the test dataset when training, described as follows:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行应用程序，过程几乎与[第3章](8bcfc000-9adc-4eda-a91a-e09f676eac85.xhtml)中的示例应用程序相同，只是在训练时添加了传递测试数据集，如下所述：
- en: 'To run the training on the command line, as we did in [Chapter 1](b8d873e1-9234-4f11-ad94-76df5ffbb228.xhtml),
    *Getting Started with Machine Learning and ML.NET*, we simply pass in the following
    command (assuming you are using the included sample dataset and test dataset):'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要在命令行上运行训练，就像我们在[第1章](b8d873e1-9234-4f11-ad94-76df5ffbb228.xhtml)中做的那样，*开始使用机器学习和ML.NET*，我们只需传递以下命令（假设您正在使用包含的示例数据集和测试数据集）：
- en: '[PRE15]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Note the expanded output to include several metric data points—we will go through
    what each one of these means at the end of this chapter.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 注意扩展的输出包括几个指标数据点——我们将在本章末尾解释这些数据点各自的意义。
- en: 'After training the model, build a sample JSON file and save it as `input.json`,
    as follows:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 训练模型后，构建一个示例JSON文件，并将其保存为`input.json`，如下所示：
- en: '[PRE16]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'To run the model with this file, simply pass in the filename to the built application,
    and the predicted output will appear, as follows:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要使用此文件运行模型，只需将文件名传递给构建的应用程序，预测输出将如下所示：
- en: '[PRE17]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Feel free to modify the values and see how the prediction changes based on
    the dataset on which the model was trained. A few areas of experimentation from
    this point might be as follows:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 随意修改这些值，并查看基于模型训练数据集的预测如何变化。从这个点开始，一些实验区域可能如下：
- en: Add some additional features based on your own car-buying experiences
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据您自己的购车经验添加一些额外特征
- en: Modify the `sampledata.csv` file to include your own car-buying experiences
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改`sampledata.csv`文件以包含您自己的购车经验
- en: Modify the sample application to have a **graphical user interface** (**GUI**)
    to make running predictions easier
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改示例应用程序以具有**图形用户界面**（**GUI**），以便更容易运行预测
- en: Creating a multi-class classification application
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个多类分类应用程序
- en: 'As mentioned earlier, we will now create a multi-class classification application,
    categorizing email into one of three categories:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，我们现在将创建一个多类分类应用程序，将电子邮件分类为以下三个类别之一：
- en: Orders
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 订单
- en: Spam
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 垃圾邮件
- en: Friend
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 朋友
- en: Flushing out this example for a production application would more than likely
    include significantly more categories in addition to more features. However, this
    is a good starting point to demonstrate a multi-class classification use case.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 将此示例应用于生产应用程序可能会包含更多类别以及更多特征。然而，这是一个很好的起点，用于演示多类分类用例。
- en: As with other examples, the complete project code, sample dataset, and project
    files can be downloaded here: [https://github.com/PacktPublishing/Hands-On-Machine-Learning-With-ML.NET/tree/master/chapter04-multiclass](https://github.com/PacktPublishing/Hands-On-Machine-Learning-With-ML.NET/tree/master/chapter04-multiclass).
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他示例一样，完整的项目代码、样本数据集和项目文件可以在此处下载：[https://github.com/PacktPublishing/Hands-On-Machine-Learning-With-ML.NET/tree/master/chapter04-multiclass](https://github.com/PacktPublishing/Hands-On-Machine-Learning-With-ML.NET/tree/master/chapter04-multiclass)。
- en: Diving into the trainer
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 深入了解训练器
- en: As previously mentioned, for this multi-class classification application we
    will be using the `SdcaMaximumEntropy` trainer.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，对于这个多类分类应用程序，我们将使用`SdcaMaximumEntropy`训练器。
- en: The `SdcaMaximumEntropy` class, as the name implies, is based on the SDCA we
    deep dove into in [Chapter 3](8bcfc000-9adc-4eda-a91a-e09f676eac85.xhtml), *Regression
    Model*, and uses empirical risk minimization, which optimizes based on the training
    data. This does leave a potential for outliers or anomalies to greatly affect
    the predict performance. Therefore, when using this trainer, provide the trainer
    with ample sampling of expected data, to avoid both overfitting and potential
    errors when predicting data.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 如其名称所示，`SdcaMaximumEntropy`类基于我们在[第3章](8bcfc000-9adc-4eda-a91a-e09f676eac85.xhtml)中深入探讨的SDCA，即*回归模型*，并使用经验风险最小化，根据训练数据进行优化。这确实留下了异常值或异常对预测性能产生重大影响的潜在可能性。因此，当使用此训练器时，请向训练器提供足够的预期数据样本，以避免过拟合以及在预测数据时可能出现的错误。
- en: The `SdcaMaximumEntropy` trainer, unlike the previous binary classification
    example, does require normalization. In addition, caching is not required; however,
    we do utilize caching when building the pipeline.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 与之前的二分类示例不同，`SdcaMaximumEntropy`训练器确实需要归一化。此外，不需要缓存；然而，我们在构建管道时确实使用了缓存。
- en: Exploring the project architecture
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索项目架构
- en: Building on the project architecture and code created earlier in this chapter,
    there are no new NuGet packages to include in this project, as SDCA trainers are
    considered core trainers. The major change is in the `Training` pipeline, which
    we will go into in further detail later on in this section.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章前面创建的项目架构和代码的基础上，本项目不需要包含任何新的 NuGet 包，因为 SDCA 训练器被视为核心训练器。主要变化在于`Training`管道，我们将在本节后面的部分进一步详细说明。
- en: 'In the following screenshot, you will find the Visual Studio Solution Explorer
    view of the project:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的屏幕截图中，您将找到项目的 Visual Studio 解决方案资源管理器视图：
- en: '![](img/7df2ac8b-d10d-460b-9d8a-5cfde49e58b6.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/7df2ac8b-d10d-460b-9d8a-5cfde49e58b6.png)'
- en: 'The `sampledata.csv` file contains six rows of random data. Feel free to adjust
    the data to fit your own observations or to adjust the trained model. Here is
    a snippet of the data:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '`sampledata.csv`文件包含六行随机数据。请随意调整数据以适应您的观察或调整训练模型。以下是数据的片段：'
- en: '[PRE18]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Each of these rows contains the value for the properties in the newly created
    `Email` class that we will review later on in this chapter.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 每一行都包含我们将在本章后面审查的新创建的`Email`类中属性的值。
- en: 'In addition, in this chapter, we added the `testdata.csv` file that contains
    additional data points to test the newly trained model against. Here is a snippet
    of the data:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在本章中，我们添加了包含额外数据点的`testdata.csv`文件，以便对新训练的模型进行测试。以下是数据的片段：
- en: '[PRE19]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Diving into the code
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 深入代码
- en: For this application, as noted earlier, we are building on top of the work completed
    in [Chapter 3](8bcfc000-9adc-4eda-a91a-e09f676eac85.xhtml), *Regression Model*.
    For this deep dive, we are going to focus solely on the code that was changed
    for this application.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个应用，正如之前提到的，我们是在 [第 3 章](8bcfc000-9adc-4eda-a91a-e09f676eac85.xhtml) 完成的作品基础上进行构建的，*回归模型*。对于这次深入探讨，我们将专注于为这个应用更改的代码。
- en: 'Classes that were changed or added are as follows:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 被更改或添加的类如下：
- en: '`Email`'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Email`'
- en: '`EmailPrediction`'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`EmailPrediction`'
- en: '`Predictor`'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Predictor`'
- en: '`Trainer`'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Trainer`'
- en: '`Program`'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Program`'
- en: The Email class
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`Email` 类'
- en: 'The `Email` class is the container class that contains the data to both predict
    and train our model. These columns map in order to the sample data reviewed previously.
    If you begin experimenting with new features and add to this list, ensure you
    increment the array index appropriately, as shown in the following code block:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '`Email` 类是包含用于预测和训练模型数据的容器类。这些列按照之前审查的样本数据的顺序映射。如果你开始尝试新的特征并添加到这个列表中，确保适当地增加数组索引，如下面的代码块所示：'
- en: '[PRE20]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The EmailPrediction class
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`EmailPrediction` 类'
- en: 'The `EmailPrediction` class contains the property mapped to our prediction
    output used for model evaluation. In the following code block, we are returning
    the `Category` value (string value):'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '`EmailPrediction` 类包含映射到预测输出并用于模型评估的属性。在下面的代码块中，我们返回 `Category` 值（字符串值）：'
- en: '[PRE21]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The Predictor class
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`Predictor` 类'
- en: 'There are a couple of changes in this class to handle the email categorization
    prediction scenario, as follows:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个类中有一两个更改来处理电子邮件分类预测场景，如下所示：
- en: 'The first change is in the prediction call itself. As you probably guessed,
    the `TSrc` and `TDst` arguments need to be adjusted to utilize both of the new
    classes we created, `Email` and `EmailPrediction`, as follows:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一个更改是在预测调用本身。正如你可能猜到的，`TSrc` 和 `TDst` 参数需要调整以利用我们创建的两个新类，`Email` 和 `EmailPrediction`，如下所示：
- en: '[PRE22]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Given that we are no longer simply passing in the string and building an object
    on the fly, we need to first read in the file as text. We then deserialize the
    JSON into our `Email`object, like this:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于我们不再只是传递字符串并在运行时构建对象，我们首先需要以文本形式读取文件。然后，我们将 JSON 反序列化到我们的 `Email` 对象中，如下所示：
- en: '[PRE23]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Lastly, we need to adjust the output of our prediction to match our new `EmailPrediction`properties,
    as follows:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们需要调整预测输出的结果以匹配我们新的 `EmailPrediction` 属性，如下所示：
- en: '[PRE24]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The Trainer class
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`Trainer` 类'
- en: 'There are a couple of changes in this class to handle the email categorization
    prediction scenario, as follows:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个类中有一两个更改来处理电子邮件分类预测场景，如下所示：
- en: 'First, we read in the `trainingFileName` string and typecast it to an `Email`
    object, like this:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们读取 `trainingFileName` 字符串并将其转换为 `Email` 对象，如下所示：
- en: '[PRE25]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Next, we will create our pipeline mapping our input properties to `FeaturizeText`
    transformations before appending our SDCA trainer, as follows:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将创建我们的管道，将输入属性映射到 `FeaturizeText` 转换，然后再附加我们的 SDCA 训练器，如下所示：
- en: '[PRE26]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Lastly, we load in our test data, run the `MultiClassClassification` evaluation,
    and then output the four model evaluation properties, like this:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们加载测试数据，运行 `MultiClassClassification` 评估，然后输出四个模型评估属性，如下所示：
- en: '[PRE27]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Running the application
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行应用程序
- en: 'To run the application, the process is nearly identical to the sample application
    in [Chapter 3](8bcfc000-9adc-4eda-a91a-e09f676eac85.xhtml), *Regression Model*,
    with the addition of passing in the test dataset when training:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行应用程序，过程几乎与 [第 3 章](8bcfc000-9adc-4eda-a91a-e09f676eac85.xhtml) *回归模型* 中的示例应用程序相同，只是在训练时添加了测试数据集：
- en: 'To run the training on the command line as we did in [Chapter 1](b8d873e1-9234-4f11-ad94-76df5ffbb228.xhtml),
    *Getting Started with Machine Learning and ML.NET*, simply pass in the following
    command (assuming you are using the included sample dataset and test dataset):'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要在命令行上运行训练，就像我们在 [第 1 章](b8d873e1-9234-4f11-ad94-76df5ffbb228.xhtml) *使用机器学习和
    ML.NET 入门* 中做的那样，只需传递以下命令（假设你正在使用包含的样本数据集和测试数据集）：
- en: '[PRE28]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Note the expanded output to include several metric data points—we will go through
    what each one of these means at the end of this chapter.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 注意输出已扩展以包含几个指标数据点——我们将在本章末尾解释每个数据点的含义。
- en: 'After training the model, build a sample JSON file and save it as `input.json`,
    as follows:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在训练好模型后，创建一个示例 JSON 文件并将其保存为 `input.json`，如下所示：
- en: '[PRE29]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'To run the model with this file, simply pass in the filename to the built application,
    and the predicted output will show, as follows:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要使用此文件运行模型，只需将文件名传递给构建的应用程序，预测输出将显示如下：
- en: '[PRE30]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Feel free to modify the values and see how the prediction changes based on
    the dataset on which the model was trained. A few areas of experimentation from
    this point might be to:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 随意修改这些值，看看基于模型训练数据集的预测如何变化。从这个点开始，一些实验领域可能包括：
- en: Add more sample and test data based on your own emails.
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据你自己的电子邮件添加更多样本和测试数据。
- en: Add more categories based on your own emails.
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据你自己的电子邮件添加更多类别。
- en: Expand the features, such as the date of sending, and the IP address of the
    sender.
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扩展特征，例如发送日期和发送者的IP地址。
- en: Evaluating a classification model
  id: totrans-171
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 评估分类模型
- en: As discussed in previous chapters, evaluating a model is a critical part of
    the overall model-building process. A poorly trained model will only provide inaccurate
    predictions. Fortunately, ML.NET provides many popular attributes to calculate
    model accuracy, based on a test set at the time of training, to give you an idea
    of how well your model will perform in a production environment.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 如前几章所述，评估模型是整个模型构建过程中的关键部分。一个训练不当的模型只会提供不准确的预测。幸运的是，ML.NET提供了许多流行的属性来计算模型精度，基于训练时的测试集，以给你一个关于模型在生产环境中表现如何的印象。
- en: 'In ML.NET, as noted earlier in the sample applications, there are several properties
    that comprise the `CalibratedBinaryClassificationMetrics` class object. In [Chapter
    2](b8decd34-4bcb-4b1b-80d2-b2bfd0fa31c1.xhtml), *Setting Up the ML.NET Environment*,
    we reviewed some of these properties. However, now that we have a more complex
    example and have learned how to evaluate regression models, let us dive into the
    following properties:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 在ML.NET中，如前所述的示例应用程序中提到的，有几个属性构成了`CalibratedBinaryClassificationMetrics`类对象。在[第2章](b8decd34-4bcb-4b1b-80d2-b2bfd0fa31c1.xhtml)《设置ML.NET环境》中，我们回顾了这些属性的一些内容。然而，现在我们有一个更复杂的示例，并且已经学会了如何评估回归模型，让我们深入了解以下属性：
- en: Accuracy
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 精度
- en: Area Under ROC Curve
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ROC曲线下的面积
- en: F1 Score
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: F1分数
- en: Area Under Precision-Recall Curve
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 精确率-召回率曲线下的面积
- en: 'In addition, we will also look at the following four metrics returned by the
    `MulticlassClassificationMetrics` object used in the multi-class classification
    application:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还将查看在多分类分类应用程序中使用的`MulticlassClassificationMetrics`对象返回的以下四个指标：
- en: Micro Accuracy
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 微精度
- en: Macro Accuracy
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 宏精度
- en: Log Loss
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对数损失
- en: Log-Loss Reduction
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对数损失减少
- en: In the next sections, we will break down how these values are calculated, and
    detail the ideal values to look for.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将分解这些值的计算方法，并详细说明要寻找的理想值。
- en: Accuracy
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 精度
- en: Accuracy is the proportion of correct predictions to incorrect predictions in
    the test dataset.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 精度是测试数据集中正确预测与错误预测的比例。
- en: You will want to be as close to a value of 100%, but not exactly 100%. As seen
    in our binary classification example, we received 88.89%—close to 100%, but not
    quite. If you see a 100% score when experimenting, you are more than likely seeing
    a case of overfitting.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 你希望尽可能接近100%的值，但不是正好100%。正如我们在二分类示例中所看到的，我们得到了88.89%——接近100%，但并不完全。如果你在实验中看到100%的分数，你很可能遇到了过拟合的情况。
- en: Area Under ROC Curve
  id: totrans-187
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ROC曲线下的面积
- en: Area Under ROC Curve, also commonly referred to as AUC, is the measurement of
    the area under the curve.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 罗马曲线下的面积，通常也称为AUC，是曲线下面积的度量。
- en: As with Accuracy, a value close to 100% is ideal. If you are seeing values of
    less than 50%, your model either needs more features and/or more training data.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 与精度一样，接近100%的值是理想的。如果你看到低于50%的值，你的模型可能需要更多的特征和/或更多的训练数据。
- en: F1 Score
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: F1分数
- en: F1 Score is the harmonic mean of both precision and recall.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: F1分数是精确率和召回率的调和平均值。
- en: A value close to or equal to 100% is preferred. A value of 0 indicates your
    precision is completely inaccurate. As shown in our binary classification example,
    we received 87.50%.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 值接近或等于100%更受欢迎。0的值表示你的精确率完全不准确。正如我们在二分类示例中所看到的，我们得到了87.50%。
- en: Area Under Precision-Recall Curve
  id: totrans-193
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 精确率-召回率曲线下的面积
- en: Area Under Precision-Recall Curve, also commonly referred to as AUPRC, is the
    measure of successful prediction. This value should be inspected when your dataset
    is imbalanced into one classification.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 精确率-召回率曲线下的面积，通常也称为AUPRC，是成功预测的衡量标准。当你的数据集不平衡到某一分类时，应检查此值。
- en: As with AUC and Accuracy, a value close to 100% is preferred, as this indicates
    you have a high recall. As shown in our binary classification example, we received
    a 100% AUPRC value.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 与AUC和精度一样，更倾向于接近100%的值，因为这表明你有很高的召回率。正如我们在二分类示例中所看到的，我们得到了100%的AUPRC值。
- en: Micro Accuracy
  id: totrans-196
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 微精度
- en: Micro Accuracy evaluates if every sample-class pair contributes equally to the
    accuracy metric.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 微精度评估每个样本-类别对是否对准确度指标贡献相等。
- en: A value close to or equal to 1 is preferred. As shown in our example application
    with the sample and test datasets, a value of 1 was achieved.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 值接近或等于1更受欢迎。正如我们在示例应用中使用样本和测试数据集所示，达到了1的值。
- en: Macro Accuracy
  id: totrans-199
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 宏观准确度
- en: Macro Accuracy evaluates if every class pair contributes equally to the accuracy
    metric.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 宏观准确度评估每个类别对是否对准确度指标贡献相等。
- en: A value close to or equal to 1 is preferred. As shown in our example application
    with the sample and test datasets, a value of 1 was achieved.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 值接近或等于1更受欢迎。正如我们在示例应用中使用样本和测试数据集所示，达到了1的值。
- en: Log Loss
  id: totrans-202
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对数损失
- en: Log Loss is an evaluation metric describing the accuracy of the classifier.
    Log Loss takes into account the difference between the model's prediction and
    the actual classification.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 对数损失是描述分类器准确度的评估指标。对数损失考虑了模型预测与实际分类之间的差异。
- en: A value close to 0 is preferred, as a value of 0 indicates the model's prediction
    on the test set is perfect. As shown in our example application with the sample
    and test datasets, a value of .1 was achieved.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 值接近0更受欢迎，因为0表示模型在测试集上的预测是完美的。正如我们在示例应用中使用样本和测试数据集所示，达到了0.1的值。
- en: Log-Loss Reduction
  id: totrans-205
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对数损失降低
- en: Log-Loss Reduction is simply an evaluation metric describing the accuracy of
    the classifier as compared to a random prediction.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 对数损失降低是一个简单的评估指标，描述了分类器的准确度与随机预测相比。
- en: A value close to or equal to 1 is preferred, as the model's relative accuracy
    improves as the value approaches 1\. As shown in our example application with
    the sample and test datasets, a value of .856 was achieved, meaning the probability
    of guessing the correct answer is 85.6%.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 值接近或等于1更受欢迎，因为随着值的接近1，模型的相对准确度提高。正如我们在示例应用中使用样本和测试数据集所示，达到了0.856的值，这意味着猜测正确答案的概率是85.6%。
- en: Summary
  id: totrans-208
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Over the course of this chapter, we have deep-dived into classification models.
    We have also created and trained our first binary classification application,
    using FastTree and ML.NET, to predict how good a car's price is. We also created
    our first multi-class classification application using an SDCA trainer to categorize
    emails. Lastly, we also dove into how to evaluate a classification model and the
    various properties that ML.NET exposes to achieve a proper evaluation of your
    classification models.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们深入探讨了分类模型。我们还创建并训练了我们的第一个二分类应用，使用FastTree和ML.NET来预测汽车价格的好坏。我们还创建了我们第一个多分类应用，使用SDCA训练器对电子邮件进行分类。最后，我们还深入探讨了如何评估分类模型以及ML.NET公开的各种属性，以正确评估您的分类模型。
- en: In the next chapter, we will deep dive into clustering algorithms with ML.NET
    and creating a file-type classifier.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将深入探讨ML.NET中的聚类算法以及创建文件类型分类器。
