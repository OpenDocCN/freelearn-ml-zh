["```py\n<uses-permission android:name=\"android.permission.INTERNET\"/>\n```", "```py\n<manifest \n    package=\"com.example.Application\">\n\n    <application android:allowBackup=\"true\" android:label=\"@string/app_name\"\n        android:icon=\"@mipmap/ic_launcher\" android:theme=\"@style/AppTheme\">\n\n        <activity\n            android:name=\"com.example.Application.MainActivity\"\n            android:label=\"@string/app_name\" >\n            <intent-filter>\n                <action android:name=\"android.intent.action.MAIN\" />\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n            </intent-filter>\n        </activity>\n\n    </application>\n    <uses-permission android:name=\"android.permission.INTERNET\"/>\n</manifest>\n```", "```py\n    <uses-permission android:name=\"android.permission.INTERNET\"/>\n    ```", "```py\n    <uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\"/>\n    <uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\"/>\n    ```", "```py\n    <uses-permission android:name=\"android.permission.CAMERA\"/>\n    ```", "```py\n    <uses-permission android:name=\"android.permission.SET_ORIENTATION\"/>\n    ```", "```py\n    <uses-permission android:name=\"android.permission.READ_LOGS\"/>\n    ```", "```py\nv(String, String) (verbose)\nd(String, String) (debug)\ni(String, String) (information)\nw(String, String) (warning)\ne(String, String) (error)\n```", "```py\nimport android.util.Log;\npublic class MyActivity extends Activity {\n    private static final String TAG = MyActivity.class.getSimpleName();\n    ...\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        if (savedInstanceState != null) {\n            Log.d(TAG, \"onCreate() Restoring previous state\");\n            /* restore state */\n        } else {\n            Log.d(TAG, \"onCreate() No saved state available\");\n            /* initialize app */\n        }\n    }\n}\n```", "```py\npublic static int calculateInSampleSize(\n            BitmapFactory.Options options, int reqWidth, int reqHeight) {\n    // Raw height and width of image\n    final int height = options.outHeight;\n    final int width = options.outWidth;\n    int inSampleSize = 1;\n\n    if (height > reqHeight || width > reqWidth) {\n\n        final int halfHeight = height / 2;\n        final int halfWidth = width / 2;\n\n        // Calculate the largest inSampleSize value that is a power of 2 and keeps both\n        // height and width larger than the requested height and width.\n        while ((halfHeight / inSampleSize) > reqHeight\n                && (halfWidth / inSampleSize) > reqWidth) {\n            inSampleSize *= 2;\n        }\n    }\n\n    return inSampleSize;\n}\n```", "```py\nclass BitmapWorkerTask extends AsyncTask<Integer, Void, Bitmap> {\n    private final WeakReference<ImageView> imageViewReference;\n    private int data = 0;\n\n    public BitmapWorkerTask(ImageView imageView) {\n        // Use a WeakReference to ensure the ImageView can be garbage collected\n        imageViewReference = new WeakReference<ImageView>(imageView);\n    }\n\n    // Decode image in background.\n    @Override\n    protected Bitmap doInBackground(Integer... params) {\n        data = params[0];\n        return decodeSampledBitmapFromResource(getResources(), data, 100, 100));\n    }\n\n    // Once complete, see if ImageView is still around and set bitmap.\n    @Override\n    protected void onPostExecute(Bitmap bitmap) {\n        if (imageViewReference != null && bitmap != null) {\n            final ImageView imageView = imageViewReference.get();\n            if (imageView != null) {\n                imageView.setImageBitmap(bitmap);\n            }\n        }\n    }\n}\n```", "```py\npublic void launchNewActivity () {\n  Intent intent = new Intent(this, NewActivity.class);\n  intent.putExtra(\"Message\", \"Sending a string to New Activity\");\n  startActivity(intent);\n}\n```", "```py\nIntent intent = getIntent();\nString message = intent.getStringExtra(\"Message\");\n```", "```py\npublic class StorageClass {\n  private static String data;\n  public static String getData() {return data;}\n  public static String setData(String data) {this.data = data;}\n}\n```", "```py\nStorageClass.setData(\"Here is a message\");\n```", "```py\nString data = StorageClass.getData();\n```"]