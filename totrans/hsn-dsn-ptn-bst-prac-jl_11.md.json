["```py\nmutable struct Simulation{N}\n    heatmap::Array{Float64, N}\n    stats::NamedTuple{(:mean, :std)}\nend\n```", "```py\nusing Distributions\n\nfunction simulate(distribution, dims, n) \n    tp = ntuple(i -> n, dims)\n    heatmap = rand(distribution, tp...)\n    return Simulation{dims}(heatmap, (mean = mean(heatmap), std = std(heatmap)))\nend\n```", "```py\nsim = simulate(Normal(), 2, 1000);\n```", "```py\nget_heatmap(s::Simulation) = s.heatmap\nget_stats(s::Simulation) = s.stats\n```", "```py\nheatmap(s::Simulation) = s.heatmap\nstats(s::Simulation) = s.stats\n```", "```py\nfunction heatmap!(\n        s::Simulation{N}, \n        new_heatmap::AbstractArray{Float64, N}) where {N}\n    s.heatmap = new_heatmap\n    s.stats = (mean = mean(new_heatmap), std = std(new_heatmap))\n    return nothing\nend\n```", "```py\nfunction heatmap!(\n            s::Simulation{N}, \n            new_heatmap::AbstractArray{Float64, N}) where {N}\n    if length(unique(size(new_heatmap))) != 1\n        error(\"All dimensions must have same size\")\n    end\n    s.heatmap = new_heatmap\n    s.stats = (mean = mean(new_heatmap), std = std(new_heatmap))\n    return nothing\nend\n```", "```py\nmutable struct Simulation{N}\n    _heatmap::Array{Float64, N}\n    _stats::NamedTuple{(:mean, :std)}\nend\n```", "```py\nmutable struct FileContent\n    path\n    loaded\n    contents\nend\n```", "```py\nfunction FileContent(path) \n    ss = lstat(path)\n    return FileContent(path, false, zeros(UInt8, ss.size))\nend\n```", "```py\nfunction load_contents!(fc::FileContent)\n    open(fc.path) do io\n        readbytes!(io, fc.contents)\n        fc.loaded = true\n    end\n    nothing\nend\n```", "```py\nobject.fieldname\n```", "```py\ngetproperty(object, :fieldname)\n```", "```py\nfunction Base.getproperty(fc::FileContent, s::Symbol)\n    direct_passthrough_fields = (:path, )\n    if s in direct_passthrough_fields\n        return getfield(fc, s)\n    end\n    if s === :contents\n        !getfield(fc, :loaded) && load_contents!(fc)\n        return getfield(fc, :contents)\n    end\n    error(\"Unsupported property: $s\")\nend\n```", "```py\n# lazy load\nfunction load_contents!(fc::FileContent)\n    open(getfield(fc, :path)) do io\n        readbytes!(io, getfield(fc, :contents))\n        setfield!(fc, :loaded, true)\n    end\n    nothing\nend\n```", "```py\nmutable struct FileContent\n    path\n    loaded\n    contents\nend\n```", "```py\nfunction Base.setproperty!(fc::FileContent, s::Symbol, value)\n    if s === :path\n        ss = lstat(value)\n        setfield!(fc, :path, value)\n        setfield!(fc, :loaded, false)\n        setfield!(fc, :contents, zeros(UInt8, ss.size))\n        println(\"Object re-initialized for $value (size $(ss.size))\")\n        return nothing\n    end\n    error(\"Property $s cannot be changed.\")\nend\n```", "```py\nfunction Base.propertynames(fc::FileContent)\n    return (:path, :contents)\nend\n```", "```py\nmodule WebCrawler\n\nusing Dates\n\n# public interface\nexport Target\nexport add_site!, crawl_sites!, current_sites, reset_crawler!\n\n# == insert global variables and functions here ==\n\nend # module\n```", "```py\nBase.@kwdef mutable struct Target\n    url::String\n    finished::Bool = false\n    finish_time::Union{DateTime,Nothing} = nothing\nend\n```", "```py\nconst sites = Target[]\n```", "```py\nfunction add_site!(site::Target)\n    push!(sites, site)\nend\n\nfunction crawl_sites!()\n    for s in sites\n        index_site!(s)\n    end\nend\n\nfunction current_sites()\n    copy(sites)\nend\n\nfunction index_site!(site::Target)\n    site.finished = true\n    site.finish_time = now()\n    println(\"Site $(site.url) crawled.\")\nend\n\nfunction reset_crawler!()\n    empty!(sites)\nend\n```", "```py\n# Source: GtkUtilities.jl/test/utils.jl\n\nlet c = Canvas(), win = Window(c, \"Canvas1\") \n    Gtk.draw(c) do widget\n        fill!(widget, RGB(1,0,0))\n    end\n    showall(win)\nend\n\nlet c = Canvas(), win = Window(c, \"Canvas2\")\n    Gtk.draw(c) do widget\n        w, h = Int(width(widget)), Int(height(widget))\n        randcol = reshape(reinterpret(RGB{N0f8}, rand(0x00:0xff, 3, w*h)), w, h)\n        copy!(widget, randcol)\n    end\n    showall(win)\nend \n\nlet c = Canvas(), win = Window(c, \"Canvas3\")\n    Gtk.draw(c) do widget \n        w, h = Int(width(widget)), Int(height(widget))\n        randnum = reshape(reinterpret(N0f8, rand(0x00:0xff, w*h)),w,h)\n        copy!(widget, randnum)\n    end\n    showall(win)\nend\n```", "```py\ntry\n    # do something that may possible raise an error\ncatch ex\n    # recover from failure depending on the type of condition\nend\n```", "```py\nfunction index_site!(site::Target)\n    response = HTTP.get(site.url)\n    site.finished = true\n    site.finish_time = now()\n    println(\"Site $(site.url) crawled. Status=\", response.status)\nend\n```", "```py\nfunction try_index_site!(site::Target)\n    try\n        index_site!(site)\n    catch ex\n        println(\"Unable to index site: $site\")\n        if ex isa HTTP.ExceptionRequest.StatusError\n            println(\"HTTP status error (code = \", ex.status, \")\")\n        elseif ex isa Sockets.DNSError\n            println(\"DNS problem: \", ex)\n        else\n            println(\"Unknown error:\", ex)\n        end\n    end\nend\n```", "```py\nglobal function crawl_sites!()\n    for s in sites\n        try_index_site!(s)\n    end\nend\n```", "```py\ntry\n    # 1\\. do some work related to reading writing files\n    # 2\\. invoke an HTTP request to a remote web service\n    # 3\\. create a status report in PDF and save in a network drive\ncatch ex\n    if ex isa FileNotFoundError\n        println(\"Having trouble with reading local file\")\n        exit(1)\n    elseif ex isa HTTPRequestError\n        println(\"Unable to communicate with web service\")\n        exit(2)\n    elseif ex isa NetworkDriveNotReadyError\n        println(\"All done, except that the report cannot be saved\")\n        exit(3)\n    else\n        println(\"An unknown error has occurred, please report. Error=\", ex)\n        exit(255)\n    end\nend\n```", "```py\nfunction foo1()\n    foo2()\nend\n\nfunction foo2()\n    foo3()\nend\n\nfunction foo3()\n    throw(ErrorException(\"bad things happened\"))\nend\n```", "```py\nfunction pretty_print_stacktrace(trace)\n    for (i,v) in enumerate(trace)\n        println(i, \" => \", v)\n    end\nend\n```", "```py\nfunction foo1()\n    try\n        foo2()\n    catch\n        println(\"handling error gracefully\")\n        pretty_print_stacktrace(stacktrace())\n    end\nend\n```", "```py\nfunction foo1()\n    try\n        foo2()\n    catch\n        println(\"handling error gracefully\")\n        pretty_print_stacktrace(stacktrace(catch_backtrace()))\n    end\nend\n```", "```py\nfunction sum_of_sqrt1(xs)\n    total = zero(eltype(xs))\n    for i in eachindex(xs)\n        total += sqrt(xs[i])\n    end\n    return total\nend\n```", "```py\nfunction sum_of_sqrt2(xs)\n    total = zero(eltype(xs))\n    for i in eachindex(xs)\n        try\n            total += sqrt(xs[i])\n        catch\n            # ignore error intentionally\n        end\n    end\n    return total\nend\n```", "```py\nfunction sum_of_sqrt3(xs)\n    total = zero(eltype(xs))\n    for i in eachindex(xs)\n        if xs[i] >= 0.0\n            total += sqrt(xs[i])\n        end\n    end\n    return total\nend\n```", "```py\nusing Dates\n\nfunction do_something(name::AbstractString)\n    println(now(), \" Let's do it\")\n    if rand() > 0.5\n        println(now(), \" Good job, $(name)!\")\n    else\n        error(now(), \" Too bad :-(\")\n    end\nend\n```", "```py\nfunction do_something_more_robustly(name::AbstractString;\n        max_retry_count = 3,\n        retry_interval = 2)\n    retry_count = 0\n    while true\n        try\n            return do_something(name)\n        catch ex\n            sleep(retry_interval)\n            retry_count += 1\n            retry_count > max_retry_count && rethrow(ex)\n        end\n    end\nend\n```", "```py\nretry(do_something, delays=fill(2.0, 3))(\"John\")\n```", "```py\nExponentialBackOff(; n=1, first_delay=0.05, max_delay=10.0, factor=5.0, jitter=0.1)\n```", "```py\nurl = \"http://google.com\"\nif match(r\"\\.com$\", url) !== nothing\n    # do something about .com sites\nelseif match(r\"\\.org$\", url) !== nothing\n    # do something about .org sites\nelse \n    # do something different\nend\n```", "```py\nurl = \"http://google.com\"\ntry \n    match(r\"\\.com$\", url)\n    # do something about .com sites\ncatch ex1\n    try\n        match(r\"\\.org$\", url)\n        # do something about .org sites\n    catch ex2 \n        # do something different\n    end\nend\n```"]