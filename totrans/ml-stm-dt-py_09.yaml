- en: '*Chapter 7*: Online Regression'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After looking at online anomaly detection and online classification throughout
    the previous chapters, there is one large category of online machine learning
    that remains to be seen. **Regression** is the family of supervised machine learning
    models that applies to use cases in which the target variable is numerical.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: In anomaly detection and classification, you have seen how to build models to
    predict categorical targets (yes/no and iris species), but you have not yet seen
    how to work with a target that is numerical. Working with numerical data requires
    having methods that work differently, both in the deeper layers of model training
    and model definition and also in our use of metrics.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Imagine being a weather forecaster trying to forecast the temperature (Celsius)
    for tomorrow. Maybe you expect a sunny day, and you have a model that you use
    to predict a temperature of 25 degrees Celsius. Imagine if the next day, you observe
    that it is cold and only 18 degrees; you were clearly wrong.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: Now, imagine that you predicted 24 degrees. In a classification use case, you
    may tend to say that 25 is not 24, so the result is wrong. However, the result
    of 24 is *less wrong* than the result of 18.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: In regression, one single prediction can be more or less wrong. In practice,
    you will rarely be entirely right. In classification, you are either wrong or
    right, so this is different. This introduces a need for new metrics and a change
    in the model benchmarking process.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will first get a deeper introduction to regression models,
    focusing on online regression models in River. After that, you'll be working on
    a regression model benchmark.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter covers the following topics:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: Defining regression
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use cases of regression
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Overview of regression algorithms in River
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can find all the code for this book on GitHub at the following link: [https://github.com/PacktPublishing/Machine-Learning-for-Streaming-Data-with-Python](https://github.com/PacktPublishing/Machine-Learning-for-Streaming-Data-with-Python).
    If you are not yet familiar with Git and GitHub, the easiest way to download the
    notebooks and code samples is the following:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: Go to the link of the repository.
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the green **Code** button.
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Download ZIP**.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When you download the ZIP file, unzip it in your local environment, and you
    will be able to access the code through your preferred Python editor.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: Python environment
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To follow along with this book, you can download the code in the repository
    and execute it using your preferred Python editor.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: If you are not yet familiar with Python environments, I would advise you to
    check out Anaconda ([https://www.anaconda.com/products/individual](https://www.anaconda.com/products/individual)),
    which comes with Jupyter Notebook and JupyterLab, which are both great for executing
    notebooks. It also comes with Spyder and VS Code for editing scripts and programs.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: If you have difficulty installing Python or the associated programs on your
    machine, you can check out Google Colab ([https://colab.research.google.com/](https://colab.research.google.com/))
    or Kaggle Notebooks ([https://www.kaggle.com/code](https://www.kaggle.com/code)),
    which both allow you to run Python code in online notebooks for free, without
    any setup required.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: Defining regression
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you will discover regression. Regression is a supervised machine
    learning task in which a model is constructed that predicts or estimates a numerical
    target variable based on numerical or categorical independent variables.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: The simplest type of regression model is **linear regression**. Let's consider
    a super simple example of how a linear regression could be used for regression.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: Imagine that we have a dataset in which we have observations of 10 people. Based
    on the number of hours they study per week, we have to estimate their average
    grade (on a 1 to 10 scale). Of course, this is a strongly oversimplified problem.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: 'The data looks as follows:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: Code Block 7-1
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'You will obtain the following data frame:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.1 – The dataset'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B18335_07_1.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.1 – The dataset
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s plot the data to see how this can be made into a regression problem:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: Code Block 7-2
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This results in the following output:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.2 – A scatter plot of the data'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B18335_07_2.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.2 – A scatter plot of the data
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, the goal of linear regression is to fit the line (or hyperplane) that
    best goes through these points and is able to predict an estimated `avg_grades`
    for any `nb_hrs_studies`. Other regression models each have their specific way
    to construct the prediction function, but eventually have the same goal: creating
    the best fitting formula to predict a numerical target variable using one or more
    independent variables.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, you'll discover some example use cases in which regression
    can be used.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: Use cases of regression
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The use cases of regression are huge: it is a very commonly used method in
    many projects. Still, let''s see some examples to get a better idea of the different
    types of use cases that can benefit from regression models.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: Use case 1 – Forecasting
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A very common use case for regression algorithms is forecasting. In forecasting,
    the goal is to predict future values of a variable that is measured over time.
    Such variables are called **time series**. Although a number of specific methods
    exist for time series modeling, regression models are also great contenders for
    obtaining good performance on future prediction performance.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: In some forecasting use cases, real-time responses are very important. An example
    is stock trading, in which the datapoints of stock prices arrive at a huge velocity
    and forecasts have to be adapted straight away to use the best possible information
    for stock trades. Even automated stock trading algorithms exist, and they need
    to react fast in order to make the most profit on their trades as possible.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: 'For further reading on this topic, you could start by checking out the following
    links:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 要进一步了解这个主题，你可以从检查以下链接开始：
- en: '[https://www.investopedia.com/articles/financial-theory/09/regression-analysis-basics-business.asp](https://www.investopedia.com/articles/financial-theory/09/regression-analysis-basics-business.asp)'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.investopedia.com/articles/financial-theory/09/regression-analysis-basics-business.asp](https://www.investopedia.com/articles/financial-theory/09/regression-analysis-basics-business.asp)'
- en: '[https://www.mathworks.com/help/econ/time-series-regression-vii-forecasting.html](https://www.mathworks.com/help/econ/time-series-regression-vii-forecasting.html)'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.mathworks.com/help/econ/time-series-regression-vii-forecasting.html](https://www.mathworks.com/help/econ/time-series-regression-vii-forecasting.html)'
- en: Use case 2 – Predicting the number of faulty products in manufacturing
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用例 2 – 预测制造中的故障产品数量
- en: The second example of real-time and streaming regression models being used in
    practice is the application of predictive maintenance models in manufacturing.
    For example, you could use a real-time prediction of the number of faulty products
    per hour in a production line. This would be a regression model as well, as the
    outcome is a number rather than a categorical variable.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 实际应用中实时和流式回归模型的第二个例子是在制造中应用预测性维护模型。例如，你可以在生产线每小时故障产品数量的实时预测中使用。这将也是一个回归模型，因为结果是一个数值而不是分类变量。
- en: The production line could use this prediction for a real-time alerting system,
    for example, once a threshold of faulty products is predicted to be reached. Real-time
    data integration is important for this, as having the wrong products being produced
    is a large waste of resources.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 生产线可以使用这种预测来构建实时警报系统，例如，一旦预测到故障产品的阈值达到。实时数据集成对此非常重要，因为生产出错误的产品会造成大量资源的浪费。
- en: 'The following two resources will allow you to read more about this use case:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 以下两个资源将允许你阅读更多关于此用例的信息：
- en: '[https://www.sciencedirect.com/science/article/pii/S2405896316308084](https://www.sciencedirect.com/science/article/pii/S2405896316308084)'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.sciencedirect.com/science/article/pii/S2405896316308084](https://www.sciencedirect.com/science/article/pii/S2405896316308084)'
- en: '[https://www.researchgate.net/publication/315855789_Regression_Models_for_Lean_Production](https://www.researchgate.net/publication/315855789_Regression_Models_for_Lean_Production)'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.researchgate.net/publication/315855789_Regression_Models_for_Lean_Production](https://www.researchgate.net/publication/315855789_Regression_Models_for_Lean_Production)'
- en: Now that we have explored some use cases of regression, let's get started with
    the various algorithms that we have for regression.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经探讨了回归的一些用例，让我们开始了解我们用于回归的各种算法。
- en: Overview of regression algorithms in River
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: River 中回归算法概述
- en: There is a large number of online regression models available in the River online
    machine learning package.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: River 在线机器学习包中提供了大量在线回归模型。
- en: 'A selection of relevant ones are as follows:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些相关的选择：
- en: '`LinearRegression`'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LinearRegression`'
- en: '`HoeffdingAdaptiveTreeRegressor`'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HoeffdingAdaptiveTreeRegressor`'
- en: '`SGTRegressor`'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SGTRegressor`'
- en: '`SRPRegressor`'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SRPRegressor`'
- en: Regression algorithm 1 – LinearRegression
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 回归算法 1 – LinearRegression
- en: 'Linear regression is one of the most basic regression models. A simple linear
    regression is a regression model that fits a straight line through the datapoints.
    The following graph illustrates this:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 线性回归是最基本的回归模型之一。简单线性回归是通过数据点拟合一条直线的回归模型。以下图表说明了这一点：
- en: '![Figure 7.3 – A linear model in a scatter plot'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.3 – 散点图中的线性模型'
- en: '](img/B18335_07_3.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B18335_07_3.jpg)'
- en: Figure 7.3 – A linear model in a scatter plot
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.3 – 散点图中的线性模型
- en: 'This orange line is a result of the following formula:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这条橙色线是以下公式的结果：
- en: '![](img/Formula_07_001.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Formula_07_001.jpg)'
- en: Here, *y* represents `avg_grades` and *x* represents `nb_hrs_studies`. When
    fitting the model, the *a* and *b* coefficients are estimates. The *b* coefficient
    in this formula is called the intercept. It indicates the value of *y* when *x*
    equals `0`. The *a* coefficient represents the slope of the line. For each additional
    step in *x*, *a* indicates the amount that is added to *y*.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，*y* 代表 `avg_grades`，而 *x* 代表 `nb_hrs_studies`。在拟合模型时，*a* 和 *b* 系数是估计值。此公式中的
    *b* 系数被称为截距。它表示当 *x* 等于 `0` 时 *y* 的值。*a* 系数代表线的斜率。对于 *x* 的每一步增加，*a* 表示添加到 *y*
    中的量。
- en: This is a version of linear regression, but there is also a version called **multiple
    linear regression**, in which there are multiple *x* variables. In this case,
    the model does not represent a line but rather a hyperplane, in which a slope
    coefficient is added for each additional *x* variable.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: Linear regression in River
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s now move on to build an example of online linear regression using River
    ML in Python:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: 'If you remember from the previous example, we used a function called `make_classification`
    from `scikit-learn`. The same can be done for regression problems using `make_regression`:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Code Block 7-3
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'To get a better idea of what has resulted from this `make_regression` function,
    let''s inspect `X` of this dataset. You can use the following code to get a quick
    overview of the data:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Code Block 7-4
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The `describe()` method will put out a data frame with descriptive statistics
    of the variables, as follows:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.4 – Descriptive statistics'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B18335_07_4.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.4 – Descriptive statistics
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: There are five columns in the `X` data, and there are 1,000 observations.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, to look at the `y` variable, also called the `target` variable, we can
    make a histogram as follows:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Code Block 7-5
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The resulting histogram can be seen in the following figure:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.5 – The resulting histogram'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B18335_07_5.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.5 – The resulting histogram
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: There is much more exploratory data analysis that could be done here, but that
    would be out of scope for this book.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s now move on to the creation of a train and test set to create a fair
    model validation approach. In the following code, you can see how to create the
    `train_test_split` function from `scikit-learn` to create a train-test split:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Code Block 7-6
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'You can create the linear regression in River using the following code:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Code Block 7-7
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This model then has to be fitted to the training data. We use the same loop
    as you have seen earlier on in the book. This loop goes through the individual
    datapoints (`X` and `y`) and converts the `X` values into a dictionary, as required
    by River. The model is then updated datapoint by datapoint using the `learn_one`
    method:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Code Block 7-8
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Once the model has learned from the training data, it needs to be evaluated
    on the test set. This can be done by looping through the test data and making
    a prediction for the `X` values of each datapoint. The `y` values are stored in
    a list for evaluation against the actual `y` values of the test dataset:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Code Block 7-9
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'We can now compute the metric of our choice for this regression model, for
    example, the `r2` score. This can be done using the following code:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Code Block 7-10
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The obtained result is `0.478`.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: Let's find out whether other models are more performant at this task in the
    next section.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: Regression algorithm 2 – HoeffdingAdaptiveTreeRegressor
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The second online regression model that we'll cover is a much more specific
    model for online regression. Whereas the `LinearRegression` model, just like many
    other models, is an online adaptation of an essentially offline model, many other
    models are developed specifically for online models. `HoeffdingAdaptiveTreeRegressor`
    is one of those.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要介绍的第二个在线回归模型是一个针对在线回归的更具体的模型。与 `LinearRegression` 模型一样，许多其他模型只是本质上离线模型的在线自适应版本，许多其他模型是专门为在线模型开发的。`HoeffdingAdaptiveTreeRegressor`
    就是其中之一。
- en: The **Hoeffding Adaptive Tree regressor** (**HATR**) is a regression model that
    is based on the **Hoeffding Adaptive Tree Classifier** (**HATC**). HATC is a tree-based
    model that uses the **adaptive windowing** (**ADWIN**) methodology to monitor
    the performance of the different branches of a tree. The HATC methodology replaces
    the branches with new branches when their time is due. This is determined by observing
    the better performance of the new branches by the old branches. HATC is also available
    in River.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '**Hoeffding 自适应树回归器**（**HATR**）是一个基于 **Hoeffding 自适应树分类器**（**HATC**）的回归模型。HATC
    是一个基于树的模型，它使用 **自适应窗口**（**ADWIN**）方法来监控树的不同分支的性能。当分支的时间到期时，HATC 方法会用新的分支替换旧的分支。这是通过观察新分支比旧分支有更好的性能来确定的。HATC
    也在 River 中可用。'
- en: The HATR regression version is based on the HATC approach and uses an ADWIN
    concept-drift detector at each decision node. This allows the method to detect
    possible changes in the underlying data, which is called **drift**. Drift detection
    will be covered in more detail in a further chapter.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: HATR 回归版本基于 HATC 方法，并在每个决策节点使用 ADWIN 概念漂移检测器。这允许该方法检测潜在数据变化，这被称为 **漂移**。漂移检测将在下一章中更详细地介绍。
- en: HoeffdingAdaptiveTreeRegressor in River
  id: totrans-121
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: River 中的 HoeffdingAdaptiveTreeRegressor
- en: 'We will check out an example as follows:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将按照以下示例进行检查：
- en: 'Let''s get started with fitting the model on the same data as we used in the
    previous model:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们从在之前模型中使用的数据上拟合模型开始：
- en: Code Block 7-11
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 代码块 7-11
- en: '[PRE17]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'This model obtains an `r2` score that is a little worse than the linear regression:
    `0.437`. Let''s see if we can do something to make it work better. Let''s write
    a grid search to see whether a number of hyperparameters can help to improve the
    model.'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这个模型获得的 `r2` 分数略低于线性回归：`0.437`。让我们看看我们是否能做些什么来让它工作得更好。让我们编写一个网格搜索来看看是否有一组超参数可以帮助提高模型。
- en: 'For this, let''s write the model as a function that takes values for the hyperparameters
    and that returns the `r2` score:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 为了这个，让我们将模型编写为一个函数，该函数接受超参数的值并返回 `r2` 分数：
- en: Code Block 7-12
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 代码块 7-12
- en: '[PRE18]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Let''s specify the hyperparameters to tune as follows:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们指定以下要调整的超参数：
- en: Code Block 7-13
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 代码块 7-13
- en: '[PRE19]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'We then loop through the data as follows:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将按以下方式遍历数据：
- en: Code Block 7-14
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 代码块 7-14
- en: '[PRE20]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The results can then be obtained as follows:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 结果可以按以下方式获得：
- en: Code Block 7-15
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 代码块 7-15
- en: '[PRE21]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The obtained result is slightly disappointing, as none of the tested values
    were able to generate a better result. Unfortunately, this is part of data science,
    as not all models work well on each use case.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 获得的结果有些令人失望，因为测试的所有值都无法生成更好的结果。不幸的是，这是数据科学的一部分，因为并非所有模型在每个用例上都表现良好。
- en: '![Figure 7.6 – The resulting output of Code Block 7-15'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.6 – 代码块 7-15 的输出结果'
- en: '](img/B18335_07_6.jpg)'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B18335_07_6.jpg)'
- en: Figure 7.6 – The resulting output of Code Block 7-15
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.6 – 代码块 7-15 的输出结果
- en: Let's move on to the next model and see whether it fits better.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续到下一个模型，看看它是否更适合。
- en: Regression algorithm 3 – SGTRegressor
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 回归算法 3 – SGTRegressor
- en: '`SGTRegressor` is a stochastic gradient tree for regression. It is another
    decision tree-based model that can learn with new data arriving. It is an incremental
    decision tree that minimizes the mean squared error by minimizing the loss function.'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '`SGTRegressor` 是一个用于回归的随机梯度树。它是一个基于决策树的模型，可以学习新数据。它是一个增量决策树，通过最小化损失函数来最小化均方误差。'
- en: SGTRegressor in River
  id: totrans-146
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: River 中的 SGTRegressor
- en: 'We''ll check this out using the following example:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用以下示例来检查：
- en: 'Let''s test whether this model can improve the performance of this regression
    task:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们测试这个模型是否可以提高这个回归任务的表现：
- en: Code Block 7-16
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 代码块 7-16
- en: '[PRE22]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The result is worse than the previous models, as it is `0.07`. Let''s again
    see whether it can be optimized using hyperparameter tuning:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 结果比之前的模型更差，因为它只有 `0.07`。让我们再次看看是否可以通过超参数调整来优化它：
- en: Code Block 7-17
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 代码块 7-17
- en: '[PRE23]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'For this trial, we''ll optimize the `grace_period`, `lambda_value`, and `delta`
    hyperparameters:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Code Block 7-18
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'You can run the optimization loop using the following code:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Code Block 7-19
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The best results can be shown using the following line of code:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Code Block 7-20
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The result is shown in the following:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.7 – The resulting output of Code Block 7-20'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B18335_07_7.jpg)'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.7 – The resulting output of Code Block 7-20
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: The result is better than the non-tuned `SGTRegressor`, but much worse than
    the previous two models. The model could be optimized further, but it does not
    seem the best go-to for the current data.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: Regression algorithm 4 – SRPRegressor
  id: totrans-168
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`SRPRegressor`, or **Streaming Random Patches regressor**, is an ensemble method
    that trains an ensemble of base learners on subsets of the input data. These subsets
    are called **patches** and are both subsets of features and subsets of observations.
    This is the same approach as the **random forest** that was seen in the previous
    chapter.'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: SRPRegressor in River
  id: totrans-170
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We will check this out using the following example:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: 'In this example, let''s use linear regression as a base learner, as this model
    has had the best performance compared to the other models tested in this chapter:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Code Block 7-21
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The resulting score is `0.34`. Let''s try and tune the number of models used
    to see whether this can improve performance:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Code Block 7-22
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'You can execute the tuning loop with the following code:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Code Block 7-23
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The following line shows the results for each value of `n_models`:'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Code Block 7-24
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The result is shown in the following:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.8 – The resulting output of Code Block 7-24'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B18335_07_8.jpg)'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.8 – The resulting output of Code Block 7-24
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: Apparently, the result at 12 models has found a sweet spot at which the performance
    is `0.457`. Compared to the simple `LinearRegression` model with a score of `0.478`,
    this is a worse result. This indicates that the `LinearRegression` model has the
    best score of the four models tested in this dataset.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: Of course, this result is strongly related to the data-generating process that
    is behind the `make_regression` function. If the `make_regression` function were
    to add anything such as time trends, the adaptive models would probably have been
    more performant than the simple linear model.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you have seen the basics of regression modeling. You have learned
    that there are some similarities between classification and anomaly detection
    models, but that there are also some fundamental differences.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: The main difference in regression is that the target variables are numeric,
    whereas they are categorical in classification. This introduces a difference in
    metrics, but also in the model definition and the way the models work deep down.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: You have seen several traditional, offline regression models and their adaptation
    to working in an online training manner. You have also seen some online regression
    models that are made specifically for online training and streaming.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经看到了几个传统的、离线回归模型以及它们如何适应在线训练方式。你也看到了一些专门为在线训练和流式传输设计的在线回归模型。
- en: As in the previous chapters, you have seen how to implement a modeling benchmark
    using a train-test set. The field of ML does not stop evolving, and newer and
    better models are published regularly. This introduces the need for practitioners
    to be solid in their skills to evaluate models.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 如前几章所述，你已经看到了如何使用训练-测试集来实现建模基准。机器学习领域仍在不断发展，新的和更好的模型定期发布。这为从业者提出了掌握技能以评估模型的需求。
- en: Mastering model evaluation is often even more important than knowing the largest
    list of models. You need to know a large number of models to start modeling, but
    it is the evaluation that will allow you to avoid pushing erroneous or overfitted
    models into production.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 精通模型评估通常比知道最大的模型列表更重要。你需要了解大量的模型才能开始建模，但正是评估能够让你避免将错误或过拟合的模型推入生产。
- en: Although this is generally true for ML, the next chapter will introduce a category
    of models that has a fundamentally different take on this. Reinforcement learning
    is a category of online ML in which the focus is on model updating. Online models
    have the capacity to learn on each piece of data that gets into the system as
    well, but reinforcement learning is focused even more on having almost autonomous
    learning. This will be the scope of the next chapter.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这在机器学习中通常是正确的，但下一章将介绍一类对这一点的看法根本不同的模型。强化学习是在线机器学习的一个类别，其重点在于模型更新。在线模型也有能力学习进入系统的每一份数据，但强化学习更加关注几乎自主的学习。这将是下一章的主题。
- en: Further reading
  id: totrans-197
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: '*LinearRegression*: [https://riverml.xyz/latest/api/linear-model/LinearRegression/](https://riverml.xyz/latest/api/linear-model/LinearRegression/)'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*线性回归*: [https://riverml.xyz/latest/api/linear-model/LinearRegression/](https://riverml.xyz/latest/api/linear-model/LinearRegression/)'
- en: '*Make_regression*: [https://scikit-learn.org/stable/modules/generated/sklearn.datasets.make_regression.html](https://scikit-learn.org/stable/modules/generated/sklearn.datasets.make_regression.html)'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Make_regression*: [https://scikit-learn.org/stable/modules/generated/sklearn.datasets.make_regression.html](https://scikit-learn.org/stable/modules/generated/sklearn.datasets.make_regression.html)'
- en: '*HoeffdingAdaptiveTreeRegressor*: [https://riverml.xyz/latest/api/tree/HoeffdingAdaptiveTreeRegressor/](https://riverml.xyz/latest/api/tree/HoeffdingAdaptiveTreeRegressor/)'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*HoeffdingAdaptiveTreeRegressor*: [https://riverml.xyz/latest/api/tree/HoeffdingAdaptiveTreeRegressor/](https://riverml.xyz/latest/api/tree/HoeffdingAdaptiveTreeRegressor/)'
- en: '*HoeffdingAdaptiveTreeClassifier*: [https://riverml.xyz/latest/api/tree/HoeffdingAdaptiveTreeClassifier/](https://riverml.xyz/latest/api/tree/HoeffdingAdaptiveTreeClassifier/)'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*HoeffdingAdaptiveTreeClassifier*: [https://riverml.xyz/latest/api/tree/HoeffdingAdaptiveTreeClassifier/](https://riverml.xyz/latest/api/tree/HoeffdingAdaptiveTreeClassifier/)'
- en: '*Adaptive learning and mining for data streams and frequent patterns*: [https://dl.acm.org/doi/abs/10.1145/1656274.1656287](https://dl.acm.org/doi/abs/10.1145/1656274.1656287)'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*数据流和频繁模式的自适应学习和挖掘*: [https://dl.acm.org/doi/abs/10.1145/1656274.1656287](https://dl.acm.org/doi/abs/10.1145/1656274.1656287)'
- en: '*SGTRegressor*: [https://riverml.xyz/latest/api/tree/SGTRegressor/](https://riverml.xyz/latest/api/tree/SGTRegressor/)'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*SGTRegressor*: [https://riverml.xyz/latest/api/tree/SGTRegressor/](https://riverml.xyz/latest/api/tree/SGTRegressor/)'
- en: '*SRPRegressor*: [https://riverml.xyz/latest/api/ensemble/SRPRegressor/](https://riverml.xyz/latest/api/ensemble/SRPRegressor/)'
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*SRPRegressor*: [https://riverml.xyz/latest/api/ensemble/SRPRegressor/](https://riverml.xyz/latest/api/ensemble/SRPRegressor/)'
