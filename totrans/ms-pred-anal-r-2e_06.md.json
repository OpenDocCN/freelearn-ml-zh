["```py\n> v1 <- c(1.2, 3.3, -5.6, 4.5, 0, 9.0)\n> v2 <- c(-3.5, 0.1, -0.2, 1.0, -8.7, 0)\n> v1 * v2\n[1] -4.20  0.33  1.12  4.50  0.00  0.00\n>inner_product<- sum(v1 * v2)\n>inner_product\n[1] 1.75\n```", "```py\n>bdf<- read.table(\"biodeg.csv\", sep = \";\", quote = \"\\\"\")\n> head(bdf, n = 3)\n     V1     V2 V3 V4 V5 V6 V7   V8 V9 V10 V11 V12   V13\n1 3.919 2.6909  0  0  0  0  0 31.4  2   0   0   0 3.106\n2 4.170 2.1144  0  0  0  0  0 30.8  1   1   0   0 2.461\n3 3.932 3.2512  0  0  0  0  0 26.7  2   4   0   0 3.279\n    V14   V15 V16   V17   V18 V19 V20 V21   V22 V23 V24\n1 2.550 9.002   0 0.960 1.142   0   0   0 1.201   0   0\n2 1.393 8.723   1 0.989 1.144   0   0   0 1.104   1   0\n3 2.585 9.110   0 1.009 1.152   0   0   0 1.092   0   0\n  V25 V26   V27    V28 V29 V30   V31 V32 V33 V34 V35\n1   0   0 1.932  0.011   0   0 4.489   0   0   0   0\n2   0   0 2.214 -0.204   0   0 1.542   0   0   0   0\n3   0   0 1.942 -0.008   0   0 4.891   0   0   0   1\n    V36   V37 V38   V39 V40 V41 V42\n1 2.949 1.591   0 7.253   0   0  RB\n2 3.315 1.967   0 7.257   0   0  RB\n3 3.076 2.417   0 7.601   0   0  RB\n```", "```py\n> levels(bdf$V42) <- c(0, 1)\n```", "```py\n> library(caret)\n>set.seed(23419002)\n>bdf_sampling_vector<- createDataPartition(bdf$V42, p = 0.80, \n                                             list = FALSE)\n>bdf_train<- bdf[bdf_sampling_vector,]\n>bdf_test<- bdf[-bdf_sampling_vector,] \n```", "```py\n> library(e1071)\n>model_lin<- svm(V42 ~ ., data = bdf_train, kernel = \"linear\", cost = 10)\n```", "```py\n>model_lin\n\nCall:\nsvm(formula = V42 ~ ., data = biodeg_training2, kernel = \"linear\", cost = 10)\nParameters:\n   SVM-Type:  C-classification \n SVM-Kernel:  linear \n       cost:  10 \n      gamma:  0.02439024 \n\nNumber of Support Vectors:  272\n```", "```py\n> mean(bdf_train[,42] == model_lin$fitted)\n[1] 0.8887574\n> table(actual = bdf_train[,42], predictions = model_lin$fitted)\n      predictions\nactual   0   1\n     0 519  41\n     1  53 232\n```", "```py\n>test_predictions<- predict(model_lin, bdf_test[,1:41])\n> mean(bdf_test[,42] == test_predictions)\n[1] 0.8619048\n```", "```py\n>linearPerformances\n         0.01  0.1   1     10    100   1000 \ntraining 0.858 0.888 0.883 0.889 0.886 0.886\ntest     0.886 0.876 0.876 0.862 0.862 0.862\n```", "```py\n>model_radial<- svm(V42 ~ ., data = bdf_train, kernel = \"radial\", \n                      cost = 10, gamma = 0.5)\n> mean(bdf_train[,42] == model_radial$fitted)\n[1] 0.9964497 \n>test_predictions<- predict(model_radial, bdf_test[,1:41])\n> mean(bdf_test[,42] == test_predictions)\n[1] 0.8047619\n```", "```py\n>radialPerformances\n         [,1]  [,2]  [,3] [,4]  [,5]  [,6]  [,7]  [,8]  [,9] \ncost     0.01  0.1   1    10    100   0.01  0.1   1     10   \ngamma    0.01  0.01  0.01 0.01  0.01  0.05  0.05  0.05  0.05 \ntraining 0.663 0.824 0.88 0.916 0.951 0.663 0.841 0.918 0.964\ntest     0.662 0.871 0.89 0.89  0.886 0.662 0.848 0.89  0.89 \n         [,10] [,11] [,12] [,13] [,14] [,15] [,16] [,17]\ncost     100   0.01  0.1   1     10    100   0.01  0.1  \ngamma    0.05  0.1   0.1   0.1   0.1   0.1   0.5   0.5  \ntraining 0.989 0.663 0.815 0.937 0.985 0.995 0.663 0.663\ntest     0.838 0.662 0.795 0.886 0.867 0.824 0.662 0.662\n         [,18] [,19] [,20] [,21] [,22] [,23] [,24] [,25]\ncost     1     10    100   0.01  0.1   1     10    100  \ngamma    0.5   0.5   0.5   1     1     1     1     1    \ntraining 0.98  0.996 0.998 0.663 0.663 0.991 0.996 0.999\ntest     0.79  0.805 0.805 0.662 0.662 0.748 0.757 0.757\n```", "```py\n>german_raw<- read.table(\"german.data\", quote = \"\\\"\")\n> names(german_raw) <- c(\"checking\", \"duration\", \"creditHistory\", \"purpose\", \"credit\", \"savings\", \"employment\", \"installmentRate\", \"personal\", \"debtors\", \"presentResidence\", \"property\", \"age\", \"otherPlans\", \"housing\", \"existingBankCredits\", \"job\", \"dependents\", \"telephone\", \"foreign\", \"risk\")\n```", "```py\n> library(caret)\n> dummies <- dummyVars(risk ~ ., data = german_raw)\n>german<- data.frame(predict(dummies, newdata = german_raw), \n                       risk = factor((german_raw$risk - 1)))\n> dim(german)\n[1] 1000   62\n```", "```py\n>set.seed(977)\n>german_sampling_vector<- createDataPartition(german$risk, \n                                      p = 0.80, list = FALSE)\n>german_train<- german[german_sampling_vector,]\n>german_test<- german[-german_sampling_vector,]\n```", "```py\n>class_weights<- c(1, 5)\n> names(class_weights) <- c(\"0\", \"1\")\n>class_weights\n0 1 \n1 5\n>set.seed(2423)\n>german_radial_tune<- tune(svm,risk ~ ., data = german_train, \n  kernel = \"radial\", ranges = list(cost = c(0.01, 0.1, 1, 10, 100), \n  gamma = c(0.01, 0.05, 0.1, 0.5, 1)), class.weights = class_weights)\n>german_radial_tune$best.parameters\n   cost gamma\n9  10  0.05\n>german_radial_tune$best.performance\n[1] 0.26\n```", "```py\n>german_model<- german_radial_tune$best.model\n>test_predictions<- predict(german_model, german_test[,1:61])\n> mean(test_predictions == german_test[,62])\n[1] 0.735\n> table(predicted = test_predictions, actual = german_test[,62])\n         actual\npredicted   0   1\n        0 134  47\n        1   6  13\n```", "```py\n>set.seed(2423)\n>german_radial_tune_unbiased<- tune(svm,risk ~ ., \n  data = german_train, kernel = \"radial\", ranges = list( \ncost = c(0.01, 0.1, 1, 10, 100), gamma = c(0.01, 0.05, 0.1, 0.5, 1)))\n>german_radial_tune_unbiased$best.parameters\n  cost gamma\n3    1  0.01\n>german_radial_tune_unbiased$best.performance\n[1] 0.23875\n```"]