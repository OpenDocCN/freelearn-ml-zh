["```py\nmvn archetype:generate -DgroupId=com.mycompany.app -DartifactId=my-webapp -DarchetypeArtifactId=maven-archetype-webapp -DinteractiveMode=false\n\n```", "```py\ncd my-webapp\nmvn tomcat:run\n\n```", "```py\n<project  \n  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n  <modelVersion>4.0.0</modelVersion>\n  <groupId>com.mycompany.app</groupId>\n  <artifactId>my-webapp</artifactId>\n  <packaging>war</packaging>\n  <version>1.0-SNAPSHOT</version>\n  <name>my-webapp Maven Webapp</name>\n  <url>http://maven.apache.org</url>\n  <dependencies>\n <dependency>\n <groupId>junit</groupId>\n <artifactId>junit</artifactId>\n <version>3.8.1</version>\n <scope>test</scope>\n </dependency>\n </dependencies>\n  <build>\n    <finalName>my-webapp</finalName>\n  </build>\n</project>\n```", "```py\n<dependency>\n  <groupId>org.javaopencvbook</groupId>\n  <artifactId>opencvjar</artifactId>\n  <version>3.0.0</version>\n</dependency>\n\n<dependency>\n  <groupId>org.javaopencvbook</groupId>\n  <artifactId>opencvjar-runtime</artifactId>\n  <version>3.0.0</version>\n  <classifier>natives-windows-x86</classifier>\n</dependency>\n\n<dependency>\n  <groupId>javax.servlet</groupId>\n  <artifactId>javax.servlet-api</artifactId>\n  <version>3.0.1</version>\n  <scope>provided</scope>\n</dependency>\n```", "```py\n<plugin>\n  <groupId>org.apache.tomcat.maven</groupId>\n  <artifactId>tomcat7-maven-plugin</artifactId>\n  <version>2.2</version>\n  <configuration>\n    <port>9090</port>\n    <path>/</path>\n  </configuration>\n</plugin>\n```", "```py\nset MAVEN_OPTS=-Djava.library.path=D:/your_path/my-webapp/target/natives\n\n```", "```py\n<html>\n  <body>\n    <h2>OpenCV Webapp Working!</h2>\n    <%@ page import = \"org.opencv.core.Core\" %>\n    Core.VERSION: <%= Core.VERSION %>\n  </body>\n</html>\n```", "```py\nmvn eclipse:eclipse -Dwtpversion=2.0\n\n```", "```py\nmvn -Declipse.workspace=\"YOUR_WORKSPACE_PATH\" eclipse:configure-workspace\n\n```", "```py\n<%@ page language=\"java\" contentType=\"text/html; charset=ISO-8859-1\"\n    pageEncoding=\"ISO-8859-1\"%>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"\n    \"http://www.w3.org/TR/html4/loose.dtd\">\n<html>\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\">\n<title>File Upload</title>\n</head>\n<body>\n<center>\n    <h1>File Upload</h1>\n    <form method=\"post\" action=\"upload\"\n        enctype=\"multipart/form-data\">\n        Select file to upload: <input type=\"file\" name=\"file\" size=\"60\" /><br />\n        <br /> <input type=\"submit\" value=\"Upload\" />\n    </form>\n</center>\n</body>\n</html>\n```", "```py\n<web-app>\n  <servlet>\n    <servlet-name>Upload</servlet-name>\n    <servlet-class>org.javaopencvbook.webapp.UploadServlet</servlet-class>\n  </servlet>\n  <servlet-mapping>\n    <servlet-name>Upload</servlet-name>\n    <url-pattern>/upload</url-pattern>\n  </servlet-mapping>\n</web-app>\n```", "```py\n@Override\nprotected void doPost(HttpServletRequest request, HttpServletResponse response)\nthrows ServletException, IOException {\n  System.loadLibrary(Core.NATIVE_LIBRARY_NAME);\n\n  loadCascade();\n\n  Mat image = receiveImage(request);\n  Mat overlay = loadOverlayImage();\n  detectFaceAndDrawHat(image, overlay);\n  writeResponse(response, image);\n}\n```", "```py\nprivate Mat receiveImage(HttpServletRequest request) throws IOException, ServletException {\n  byte[] encodedImage = receiveImageBytes(request);\n  return convertBytesToMatrix(encodedImage);\n}\n```", "```py\nprivate byte[] receiveImageBytes(HttpServletRequest request)\nthrows IOException, ServletException {\n  InputStream is = (InputStream) request.getPart(\"file\").getInputStream();\n  BufferedInputStream bin = new BufferedInputStream(is);  \n  ByteArrayOutputStream buffer = new ByteArrayOutputStream();  \n  int ch =0;\n  while((ch=bin.read())!=-1) {  \n    buffer.write(ch);  \n  }  \n  buffer.flush();\n  bin.close();  \n  byte[] encodedImage = buffer.toByteArray();\n  return encodedImage;\n}\n```", "```py\npublic static Mat imdecode(Mat buf, int flags)\n```", "```py\nprivate Mat convertBytesToMatrix(byte[] encodedImage) {\n  Mat encodedMat = new Mat(encodedImage.length,1,CvType.CV_8U);\n  encodedMat.put(0, 0,encodedImage);\n  Mat image = Imgcodecs.imdecode(encodedMat, Imgcodecs.CV_LOAD_IMAGE_ANYCOLOR);\n  return image;\n}\n```", "```py\nprivate String getResourcePath(String path) {\n  String absoluteFileName = getClass().getResource(path).getPath();\n  absoluteFileName = absoluteFileName.replaceFirst(\"/\", \"\");\n  return absoluteFileName;\n}\n```", "```py\nprivate void loadCascade() {\n  String cascadePath = getResourcePath(\"/cascades/lbpcascade_frontalface.xml\");\n  faceDetector = new CascadeClassifier(cascadePath);\n}\n```", "```py\ndouble hatGrowthFactor = 2.3;\nint hatWidth = (int) (rect.width *hatGrowthFactor);\nint hatHeight = (int) (hatWidth * overlay.height() / overlay.width());\nint roiX =  rect.x - (hatWidth-rect.width)/2;\nint roiY =  (int) (rect.y  - 0.6*hatHeight);\nroiX =  roiX<0 ? 0 : roiX;\nroiY = roiY< 0? 0 :roiY;\nhatWidth = hatWidth+roiX > image.width() ? image.width() -roiX : hatWidth;\n\nhatHeight = hatHeight+roiY > image.height() ? image.height() - roiY : hatHeight;\n```", "```py\nMat resized = new Mat();\nSize size = new Size(hatWidth,hatHeight);\nImgproc.resize(overlay,resized, size);\nMat destinationROI = image.submat( roi );\nresized.copyTo( destinationROI , resized);\n```", "```py\nprivate void writeResponse(HttpServletResponse response, Mat image) throws IOException {\n  MatOfByte outBuffer = new MatOfByte();\n  Imgcodecs.imencode(\".jpg\", image, outBuffer);\n\n  response.setContentType(\"image/jpeg\");\n  ServletOutputStream out;  \n  out = response.getOutputStream();\n  out.write(outBuffer.toArray());\n}\n```"]