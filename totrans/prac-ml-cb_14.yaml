- en: Chapter 14. Case Study - Forecast of Electricity Consumption
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Electricity is the only commodity that is produced and consumed simultaneously;
    therefore, a perfect balance between supply and consumption in the electricity
    power market must always be maintained. Forecasting electricity consumption is
    of national interest to any country since electricity is a key source of energy.
    A reliable forecast of energy consumption, production, and distribution meets
    the stable and long-term policy. The presence of economies of scale, focus on
    environmental concerns, regulatory requirements, and a favorable public image,
    coupled with inflation, rapidly rising energy prices, the emergence of alternative
    fuels and technologies, changes in life styles, and so on, has generated the need
    to use modeling techniques which capture the effect of factors such as prices,
    income, population, technology, and other economic, demographic, policy, and technological
    variables.
  prefs: []
  type: TYPE_NORMAL
- en: Underestimation could lead to under-capacity utilization, which would result
    in poor quality of service including localized brownouts, or even blackouts. While
    on the other hand, an overestimation could lead to the authorization of a plant
    that may not be needed for several years. The requirement is to ensure optimal
    phasing of investments, a long-term consideration, and rationalizing pricing structures
    and designing demand-side management programs, to meet the nature of short- or
    medium-term needs. The forecast further drives various plans and decisions on
    investment, construction, and conservation.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to carry out forecasting of electricity consumption, we shall be using
    a dataset collected on smart meter data with time series aggregated by four located
    industries.
  prefs: []
  type: TYPE_NORMAL
- en: Step 1 - collecting and describing data
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The dataset titled `DT_4_ind` shall be used. The numeric variable is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`value`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The non-numeric variables are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`date_time`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`week`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`date`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`type`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's get into the details.
  prefs: []
  type: TYPE_NORMAL
- en: Step 2 - exploring data
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following packages need to be loaded as a first step to be carried out:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Version info: Code for this page was tested in R version 3.2.2'
  prefs: []
  type: TYPE_NORMAL
- en: Let's explore the data and understand the relationships between the variables.
  prefs: []
  type: TYPE_NORMAL
- en: 'Checking whether an object is `as.data.table()`: Binary columnar serialization
    for data frames is carried out using `feather`. In order to share, read, and write
    data across data analysis languages easily, `feather` is used. The `read_feather()`
    function is used to read feather files.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll begin by importing the `DT_4_ind` dataset. We will be saving the data
    to the `AggData` data frame:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Exploring the internal structure of the `AggData` data frame: The `str()` function
    displays the internal structure of the data frame. `AggData` is passed as an R
    object to the `str()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 2 - exploring data](img/image_14_001.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Printing the `AggData` frame. The `head()` function returns the first part
    of the base data frame. The `AggData` data frame is passed as an input parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 2 - exploring data](img/image_14_002.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Plotting the aggregated time series data of electricity consumption by industry.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `ggplot()` function declares the input data frame for a graphic and specifies
    the set of plot aesthetics intended to be common throughout. `data = AggData`
    is the dataset to be used for plotting while `aes()` describes how variables in
    the data are mapped to visual properties. `geom_line()` produces the single line
    that tries to connect all the observations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 2 - exploring data](img/image_14_003.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It is important to note that the consumption of the industry Food Sales & Storage
    does not change much during holidays compared to others.
  prefs: []
  type: TYPE_NORMAL
- en: Step 3 - time series - regression analysis
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The regression model is formulated as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 3 - time series - regression analysis](img/image_14_004.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Variables (inputs) are of two types of seasonal dummy variables--daily ![Step
    3 - time series - regression analysis](img/image_14_005.jpg) and weekly ![Step
    3 - time series - regression analysis](img/image_14_006.jpg) .  ![Step 3 - time
    series - regression analysis](img/image_14_007.jpg) is the electricity consumption
    at the time *i* , where ![Step 3 - time series - regression analysis](img/image_14_008.jpg) are the
    regression coefficients to be estimated.
  prefs: []
  type: TYPE_NORMAL
- en: 'Printing the contents of the `AggData` data frame:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 3 - time series - regression analysis](img/image_14_009.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Transforming the characters of weekdays to integers: The `as.factor()` function
    is used to encode a vector as a factor. The `as.integer()` function creates the
    `AggData[, week]` object of the integer type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Printing the contents of the `AggData` data frame after the change:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 3 - time series - regression analysis](img/image_14_010.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Extracting unique industry types from the `AggData` data frame using the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Printing the contents of the data frame `n_type` after the change:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 3 - time series - regression analysis](img/image_14_011.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Extracting unique dates from the `AggData` data frame using the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Extracting unique weekdays from the `AggData` data frame using the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Setting the `period` value using the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Performing regression analysis on a sample dataset.
  prefs: []
  type: TYPE_NORMAL
- en: 'We extract education (schools) buildings over a period of 2 weeks. The result
    is stored in the `data_reg` data frame. `n_type[2]`represents education buildings
    and `n_date[57:70]`denotes a 2-week period:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Printing the contents of the `data_reg` data frame after the change:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 3 - time series - regression analysis](img/image_14_012.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Plotting the sample dataset of education (school buildings) over a period of
    2 weeks (February 27 to March 12)
  prefs: []
  type: TYPE_NORMAL
- en: 'The `ggplot()` function declares the input data frame for a graphic and specifies
    the set of plot aesthetics intended to be common throughout. `data_reg` is the
    dataset to be used for plotting while `aes()` describes how variables in the data
    are mapped to visual properties. `geom_line()` produces the single line that tries
    to connect all the observations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 3 - time series - regression analysis](img/image_14_013.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Extracting the number of rows from the `data_reg` data frame:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Calculating the number of days in the training set:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Creating independent seasonal dummy variables--daily  ![Step 3 - time series
    - regression analysis](img/image_14_014.jpg) and weekly ![Step 3 - time series
    - regression analysis](img/image_14_015.jpg) . The daily seasonal value is extracted
    from *1,.....period, 1,.......period* for 48 vectors of daily variables. The weekly
    value is extracted from `week_num` . The result is then stored in one vector,
    `matrix_train` :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Printing the contents of the `matrix_train` data frame after the change:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 3 - time series - regression analysis](img/image_14_016.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Creating a linear model. The `lm()` function fits the linear models: `Load
    ~ 0 + .` is the formula. Since `lm()` automatically adds to the linear model intercept,
    we define it now as `0`. `data = matrix_train` defines the data frame which contains
    the data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Printing the contents of the `linear_model_1` data frame after the change:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 3 - time series - regression analysis](img/image_14_017.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Producing result summaries of the model `linear_model_1`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Printing the contents of the `summary_1` data frame after the change:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 3 - time series - regression analysis](img/image_14_018.jpg)![Step 3
    - time series - regression analysis](img/image_14_019.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Extracting the coefficient of determination using the `r.squared` attribute
    from the `summary_1` data frame:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '![Step 3 - time series - regression analysis](img/image_14_020.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Creating one `data.table` from a list of `data_reg` and `linear_model_1` :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Printing the contents of the `datas` data frame after the change:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 3 - time series - regression analysis](img/image_14_021.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Plotting fitted values for `linear_model_1` .
  prefs: []
  type: TYPE_NORMAL
- en: '`data = datas` is the dataset to be used for plotting while `aes()` describes
    how variables in the data are mapped to visual properties. `geom_line()` produces
    the single line that tries to connect all the observations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 3 - time series - regression analysis](img/image_14_022.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Plotting fitted values versus residual values.
  prefs: []
  type: TYPE_NORMAL
- en: '`data` is the dataset to be used for plotting while `aes()` describes how variables
    in the data are mapped to visual properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 3 - time series - regression analysis](img/image_14_023.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The function first gives the standardized residual from the linear model. It
    then calculates the `1Q` and `4Q` lines. Then, the quantile distribution is generated
    from the normal distribution. The slope and intercept is then calculated which
    is then plotted:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'We can plot Q-Q with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 3 - time series - regression analysis](img/image_14_024.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As is clearly visible, the points are not normal as they are away from the red
    line. The measurements during the day were moved constantly by the estimated coefficient
    of the week variable, but the behavior during the day wasn't captured. We need
    to capture this behavior because weekends, especially, behave absolutely differently.
  prefs: []
  type: TYPE_NORMAL
- en: Step 4 - time series - improving regression analysis
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Creating a linear model: The `lm()` function fits the linear models. `Load
    ~ 0 + Daily + Weekly + Daily:Weekly` is the new formula. Since `lm()` automatically
    adds to the linear model intercept, we define it now as `0`. `data = matrix_train` defines
    the data frame which contains the data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Printing the contents of the `linear_model_2` data frame after the change:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 4 - time series - improving regression analysis](img/image_14_025.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Comparing R-squared values from the summaries of the `linear_model_1` and `linear_model_2`
    models:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 4 - time series - improving regression analysis](img/image_14_026.jpg)'
  prefs: []
  type: TYPE_IMG
- en: There is a significant improvement in the R-squared value of the second model.
  prefs: []
  type: TYPE_NORMAL
- en: 'Comparing the residuals of the `linear_model_1` and `linear_model_2` models
    graphically:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 4 - time series - improving regression analysis](img/image_14_027.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Details of residuals of `linear_model_1`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The result is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 4 - time series - improving regression analysis](img/image_14_028.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Details of residuals of `linear_model_2`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The result is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 4 - time series - improving regression analysis](img/image_14_029.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Creating one `data.table` from a list of `data_reg` and `linear_model_2` :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Printing the contents of the `datas` data frame after the change:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 4 - time series - improving regression analysis](img/image_14_030.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Adding `Real` and `Fitted` columns to `datas`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Printing the contents of the `datas` data frame after the change:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 4 - time series - improving regression analysis](img/image_14_031.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Plotting fitted values for `linear_model_2` .
  prefs: []
  type: TYPE_NORMAL
- en: '`data = datas` is the dataset to be used for plotting while `aes()` describes
    how variables in the data are mapped to visual properties. `geom_line()` produces
    the single line that tries to connect all the observations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 4 - time series - improving regression analysis](img/image_14_032.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The fitted and real values closely match compared to the earlier plot of `linear_model_1`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Plotting fitted values versus residual values. `Data` is the dataset to be
    used for plotting while `aes()` describes how variables in the data are mapped
    to visual properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 4 - time series - improving regression analysis](img/image_14_033.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The plots appear to be closer to the residual line compared to the earlier plot
    of `linear_model_1`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can plot Plotting Q-Q using the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 4 - time series - improving regression analysis](img/image_14_034.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Step 5 - building a forecasting model
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We can define a function to return the forecast for a 1 week ahead prediction.
    The input parameters are `data` and `set_of_date`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Defining the mean absolute percentage error for evaluating the forecast:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Setting the training set of the length for 2 weeks, therefore deducting 2\.
    A forecast for 50 weeks will be produced. Using a sliding window approach for
    training forecasting is done for every type of industry:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Printing the number of weeks:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 5 - building a forecasting model](img/image_14_035.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Calculating the forecast for each type of industry for 1 week ahead.
  prefs: []
  type: TYPE_NORMAL
- en: 'Calling the function to return the forecast for a 1 week ahead prediction for
    the `AggData` commercial property and dataset:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Calling the function to return the forecast for a 1 week ahead prediction for
    the `AggData` - education and date set:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Calling the function to return the forecast for a 1 week ahead prediction for
    the `AggData` food and sales and date set:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Calling the function to return the forecast for a 1 week ahead prediction for
    the `AggData` lighting industry and date set:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Calculate the mean absolute percentage error for each type of industry for
    evaluating the forecasts. Call the function to return the mean absolute percentage.
    Calculate the error for evaluating the forecast for the `AggData` lighting industry
    and date set:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Printing the `lm_err_mape_1` data frame:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 5 - building a forecasting model](img/image_14_036.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Calling the function to return the mean absolute percentage error for evaluating
    the forecast for the `AggData` education and date set:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'Printing `lm_err_mape_2` data frame:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 5 - building a forecasting model](img/image_14_037.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Calling the function to return the mean absolute percentage error for evaluating
    the forecast for the `AggData` food and sales and date set:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'Printing the `lm_err_mape_3` data frame:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 5 - building a forecasting model](img/image_14_038.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Calling the function to return the mean absolute percentage error for evaluating
    the forecast for the `AggData` lighting industry and date set:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'Printing the `lm_err_mape_4data` frame:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 5 - building a forecasting model](img/image_14_039.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Step 6 - plotting the forecast for a year
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Plotting the results:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You need to have ImageMagick-7.0.4-Q16 installed for `saveGIF` to work.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 6 - plotting the forecast for a year](img/image_14_040.jpg)![Step 6
    - plotting the forecast for a year](img/image_14_041.jpg)![Step 6 - plotting the
    forecast for a year](img/image_14_042.jpg)![Step 6 - plotting the forecast for
    a year](img/image_14_043.jpg)![Step 6 - plotting the forecast for a year](img/image_14_044.jpg)![Step
    6 - plotting the forecast for a year](img/image_14_045.jpg)![Step 6 - plotting
    the forecast for a year](img/image_14_046.jpg)![Step 6 - plotting the forecast
    for a year](img/image_14_047.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The preceding results prove that the consumption of the electricity pattern
    is based on external factors such as holidays, weather, nature of property, and
    so on. The consumption pattern is very stochastic in nature.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The aim is to introduce to the reader the application of multiple linear regressions
    for forecasting double seasonal time series. It is very effective to include interactions
    of independent variables to ensure the effectiveness of the model.
  prefs: []
  type: TYPE_NORMAL
