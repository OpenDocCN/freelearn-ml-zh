- en: '*Chapter 12*: The Enterprise Architect and Security Views'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: H2O at Scale is used to build state-of-the-art **machine learning** (**ML**)
    models against large-to-massive volumes of data on enterprise systems. Enterprise
    systems are complex integrations of diverse components that work together under
    common architecture and security principles. H2O at Scale needs to fit into this
    ecosystem in expected, secure, and cohesive ways. In this chapter, we will examine
    H2O at Scale architecture and security attributes in detail to understand how
    H2O software deploys to the enterprise, integrates with well-known frameworks,
    implements extensive security capabilities, and generally plays nicely in enterprise
    systems.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: The enterprise and security architect view
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: H2O at Scale enterprise architecture
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: H2O at Scale security
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The data scientist's view of enterprise and security architecture
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are no technical requirements for this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: The enterprise and security architect view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Enterprise and security architects have broad roles, but for our purposes here,
    we will focus on their concerns about how software architecture integrates into
    and impacts the existing enterprise software ecosystem and how it addresses security
    requirements.
  prefs: []
  type: TYPE_NORMAL
- en: 'A summary of this view is shown in the following diagram. Enterprises will
    likely have their own specific needs and concerns, but our discussion here will
    be a common starting point:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.1 – Architecture and security views of H2O at Scale'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16721_12_001.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.1 – Architecture and security views of H2O at Scale
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at an overview before we dive into detailed views, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**H2O enterprise architecture**: Needs and concerns here relate to how software
    components are deployed, integrated into, and potentially impact the rest of the
    technology ecosystem. Architecture in our case is primarily at the component level—that
    is, at the level of the *big separate pieces*—and not lower down, such as class
    design.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**H2O security**: Enterprises go to extreme lengths to secure their systems
    from internal and external threats. H2O at Scale technology is used by a large
    proportion of *Fortune 100* and *Fortune 500* companies across industry verticals
    and has undergone and passed extensive security reviews to do so. We will touch
    on H2O security around the most scrutinized areas.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's first dive into the enterprise architecture view.
  prefs: []
  type: TYPE_NORMAL
- en: H2O at Scale enterprise architecture
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will look at H2O at Scale model building architecture through multiple lenses
    to allow architect stakeholders to understand how this technology addresses their
    common needs and concerns.
  prefs: []
  type: TYPE_NORMAL
- en: H2O at Scale components are flexible in how they are implemented, so first,
    we need to understand these alternatives and their implications, as elaborated
    in the following section.
  prefs: []
  type: TYPE_NORMAL
- en: H2O at Scale implementation patterns
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are three patterns for how H2O at Scale is implemented, as shown in the
    following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.2 – Implementation patterns for H2O at Scale'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16721_12_02.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.2 – Implementation patterns for H2O at Scale
  prefs: []
  type: TYPE_NORMAL
- en: 'A central concept to these patterns is that we are defining H2O at Scale components
    as Enterprise Steam, H2O Core (H2O-3 or Sparkling Water or both, with exportable
    H2O **MOJO** (short for **Model Object, Optimized**)), and an enterprise-server
    cluster (which H2O leverages but is not installed on). The reason for this component
    definition has been stated in many places throughout this book and will be recapped
    briefly here, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**H2O at Scale (minimal)**: Minimally, H2O at Scale components are Enterprise
    Steam, H2O Core (H2O-3, Sparkling Water), and a Kubernetes or **Yet Another Resource
    Negotiator** (**YARN**)-based Hadoop or Spark server cluster. An H2O MOJO is generated
    from H2O Core. Its deployment to scoring systems was covered extensively in [*Chapter
    10*](B16721_10_Final_SK_ePub.xhtml#_idTextAnchor178), *H2O Model Deployment Patterns*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**H2O AI Cloud platform**: H2O at Scale can be implemented as a subset of a
    larger H2O AI Cloud platform. This larger platform will be overviewed in [*Chapter
    13*](B16721_13_Final_SK_ePub.xhtml#_idTextAnchor241), *Introducing H2O AI Cloud*.
    In this context, H2O at Scale retains its functionality and architecture and is
    considered one of multiple specialized model-building engines on the larger integrated
    H2O platform.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Non-enterprise H2O**: H2O Core can be implemented in two other patterns that
    are generally not considered enterprise implementations. H2O Core can be run on
    a user''s local machine. This is useful for personal work, but the true power
    of H2O at Scale (in-memory data and its compute distributed horizontally across
    a server cluster) is not available in this case. Model building thus cannot be
    conducted at large data volumes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: H2O Core can also be run directly against Hadoop, Spark, or Kubernetes clusters
    without implementing Enterprise Steam. This creates significant user management
    and governance risks for the enterprise and forces technical integration knowledge
    onto data scientists. This topic has been addressed in detail in [*Chapter 11*](B16721_11_Final_SK_ePub.xhtml#_idTextAnchor207),
    *The Administrator and Operations Views*, and will be touched on in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Which H2O at Scale?
  prefs: []
  type: TYPE_NORMAL
- en: The architecture and security discussion for this chapter focuses on H2O at
    Scale components implemented minimally (the middle diagram in *Figure 12.2*).
    For H2O at Scale as a subset of the larger H2O AI Cloud platform, the architecture
    is similar but not identical. The differences will be outlined in [*Chapter 13*](B16721_13_Final_SK_ePub.xhtml#_idTextAnchor241),
    *Introducing H2O AI Cloud*.
  prefs: []
  type: TYPE_NORMAL
- en: All discussions of H2O at Scale functionality, from model building to model
    deployment to Enterprise Steam administration, are the same whether H2O at Scale
    is implemented alone or as part of the larger H2O AI Cloud.
  prefs: []
  type: TYPE_NORMAL
- en: Let's start looking at how the user client, Enterprise Steam, and H2O Core components
    fit into the enterprise environment.
  prefs: []
  type: TYPE_NORMAL
- en: Component integration architecture
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following components are involved in H2O at Scale model building:'
  prefs: []
  type: TYPE_NORMAL
- en: A web browser
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A data-science **integrated development environment** (**IDE**) (for example,
    Jupyter Notebook) with an H2O client library installed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: H2O Enterprise Steam, with H2O-3 and/or Sparkling Water **Java ARchive** (**JAR**)
    files loaded for distributing as jobs to an enterprise-server cluster
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An enterprise **identity provider** (**IdP**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An enterprise-server cluster
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'These component integrations are shown in greater detail in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.3 – Component integration architecture for H2O at Scale'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16721_12_03.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.3 – Component integration architecture for H2O at Scale
  prefs: []
  type: TYPE_NORMAL
- en: Note that the only installed H2O components are an H2O and Enterprise Steam
    client library in the data scientist's IDE and H2O Enterprise Steam, which is
    installed on a small server. Enterprise Steam manages a Java JAR file that is
    pushed to the enterprise-server cluster to form a self-assembling H2O cluster
    for each user. Importantly, this JAR file is removed from the enterprise-server
    cluster when the H2O cluster is stopped. Thus, no H2O artifacts are installed
    on the enterprise-server cluster.
  prefs: []
  type: TYPE_NORMAL
- en: H2O at Scale Has a Small Component Footprint on the Enterprise System
  prefs: []
  type: TYPE_NORMAL
- en: Despite its ability to build models against massive datasets, the actual footprint
    of H2O at Scale on the enterprise system is quite small from an installed component
    standpoint.
  prefs: []
  type: TYPE_NORMAL
- en: Enterprise Steam is the only component installed in the enterprise environment
    and it requires only a small single server (an edge node when on Hadoop). The
    software to create H2O clusters (distributed model building) is managed on Enterprise
    Steam and pushed to the enterprise-server cluster temporarily and not installed
    there. Enterprise Steam leverages Kubernetes or YARN to launch an H2O cluster
    natively to these frameworks (that is, an H2O cluster is a native Kubernetes or
    YARN job).
  prefs: []
  type: TYPE_NORMAL
- en: Other than that, the data scientist installs an H2O client library in their
    IDE environment to communicate with Enterprise Steam and the user's H2O cluster.
  prefs: []
  type: TYPE_NORMAL
- en: Note also that all data scientist and administrator interactions with the enterprise
    environment are centralized through Enterprise Steam. This includes all user authentication
    and H2O cluster formation (and stopping or termination) and administrator configurations
    to integrate and secure H2O at Scale activities against the enterprise-server
    environment.
  prefs: []
  type: TYPE_NORMAL
- en: Enterprise Steam as a Centralized Component for H2O at Scale
  prefs: []
  type: TYPE_NORMAL
- en: Enterprise Steam serves as a central gateway for all user interactions with
    the enterprise system, including user authentication through an enterprise IdP,
    user management of the H2O cluster life cycle, administrator management of H2O
    software, and administrator configuration to integrate and secure H2O on the enterprise-server
    cluster.
  prefs: []
  type: TYPE_NORMAL
- en: Communication architecture
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Communication protocols among H2O at Scale components are shown in the following
    diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.4 – Communication architecture of H2O at Scale'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16721_12_04.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.4 – Communication architecture of H2O at Scale
  prefs: []
  type: TYPE_NORMAL
- en: Note that H2O uses well-known communication protocols. Also, note that (except
    for data on the user's client machine) data is transferred directly from the data
    source to the user's H2O cluster (where it is partitioned into memory).
  prefs: []
  type: TYPE_NORMAL
- en: Data Ingest Is Direct from the Source (Preferably Storage Layer) to the H2O
    Cluster
  prefs: []
  type: TYPE_NORMAL
- en: 'Data ingested to the H2O cluster for model building does not pass through Enterprise
    Steam or the user''s client (except if uploaded from the client): it passes directly
    from the data source to H2O''s in-memory compute on the enterprise-server cluster.
    When dealing with massive datasets, it is best to use the server-cluster storage
    layer (for example, **Simple Storage Service** (**S3**), Azure Blob, or **Hadoop
    Distributed File System** (**HDFS**)) as a data source compared to other data
    sources such as **Java Database Connectivity** (**JDBC**). The H2O cluster partitions
    source data into memory among the nodes on the cluster. This loading of partitions
    is parallelized from the storage layer and not from other data sources (for example,
    a JDBC database or Hive).'
  prefs: []
  type: TYPE_NORMAL
- en: Deployment architecture
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are two deployment patterns for H2O at Scale: on either Kubernetes- or
    YARN-based server clusters. In both cases (as discussed previously), only Enterprise
    Steam is installed on the enterprise environment. This Kubernetes- versus YARN-based
    distinction—and the architecture and infrastructure details that follow—are hidden
    from the data scientist. As stressed throughout this book, the data scientist
    uses familiar languages and IDEs to build H2O models at scale and knows little
    or nothing of the technical implementation of scaling that takes place behind
    the scenes on the server clusters.'
  prefs: []
  type: TYPE_NORMAL
- en: Deployment on Kubernetes clusters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Kubernetes is a modern framework to scale and manage containerized applications.
    H2O at Scale can be deployed to leverage this framework natively. Details of how
    this is done are shown in the following deployment diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.5 – Deployment diagram of H2O at Scale on Kubernetes'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16721_12_05.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.5 – Deployment diagram of H2O at Scale on Kubernetes
  prefs: []
  type: TYPE_NORMAL
- en: 'The key points are noted here:'
  prefs: []
  type: TYPE_NORMAL
- en: Enterprise Steam is installed and run on the Kubernetes cluster using a **Helm
    chart**. Helm is a package manager for Kubernetes, and Helm charts are a collection
    of templatized files in a directory structure used to define, install, and upgrade
    the components on the Kubernetes framework. Helm charts make installation and
    upgrades on Kubernetes easy and repeatable.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enterprise Steam is fundamentally a web-server application that pushes workloads
    to the enterprise cluster as an orchestrated **Kubernetes Pod**. As such, Enterprise
    Steam requires very low resources.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enterprise Steam runs as a service with a **service identifier** (**service
    ID**).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A **license key** acquired from H2O.ai is required to use Enterprise Steam.
    The license key expires in 1 year and needs to be renewed before this time.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kubernetes configurations are made in Enterprise Steam. These include **volume
    mounts**, **HDFS** and **Hive** access, and MinIO access (which opens access to
    the cloud object store—specifically, **Amazon Web Services** (**AWS**) **S3**,
    **Azure Blob**, and **Google Cloud Storage** (**GCS**).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: H2O-3 **Docker images** are stored by version in any public (for example, **Docker
    Hub**) or private (for example, **AWS Elastic Container Registry** (**ECR**) image
    repository and are pulled from here by Kubernetes when the cluster is launched.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: H2O Sparkling Water is currently not available on Enterprise Steam on Kubernetes.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: For details on installing Enterprise Steam, see the H2O documentation at [https://docs.h2o.ai/enterprise-steam/latest-stable/docs/install-docs/installation.html](https://docs.h2o.ai/enterprise-steam/latest-stable/docs/install-docs/installation.html).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Upgrading H2O-3 is Easy
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Recall that H2O-3 is not installed on the enterprise-server cluster: here,
    it is orchestrated and distributed as Pods on the Kubernetes cluster and then
    torn down after the user is done using the resulting H2O cluster. This makes upgrading
    easy: the administrator simply configures a new version of H2O in Enterprise Steam
    (and stores its Docker image in the configured repository), and users launch their
    next H2O cluster with the newer versions. (Multiple versions can coexist on Enterprise
    Steam, so users can select among them when launching an H2O cluster.)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: For **high availability**, Enterprise Steam can be installed as an active-passive
    setup with automatic failover handled by Kubernetes. This is described in the
    H2O documentation at [https://docs.h2o.ai/enterprise-steam/latest-stable/docs/install-docs/ha.html](https://docs.h2o.ai/enterprise-steam/latest-stable/docs/install-docs/ha.html).
  prefs: []
  type: TYPE_NORMAL
- en: Let's see how H2O at Scale is deployed on YARN-based clusters. Fundamentally,
    these modes are similar when ignoring the underlying framework specifics.
  prefs: []
  type: TYPE_NORMAL
- en: Deployment on YARN-based server clusters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'YARN is an open source framework for launching and managing distributed processing
    in a horizontally scalable architecture. It is typically implemented against Hadoop
    or Spark clusters (or Spark on Hadoop). The diagram and discussion that follows
    relate to deployments on Hadoop:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.6 – Deployment diagram of H2O at Scale on Hadoop'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16721_12_06.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.6 – Deployment diagram of H2O at Scale on Hadoop
  prefs: []
  type: TYPE_NORMAL
- en: 'Key points are similar to Kubernetes-based implementations. Differences for
    Hadoop are noted here:'
  prefs: []
  type: TYPE_NORMAL
- en: Enterprise Steam is deployed on a Hadoop **edge node**.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enterprise Steam pushes workloads to the enterprise cluster as a native **YARN**
    job.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enterprise Steam is installed on a **Linux OS** (either **Debian/Ubuntu** or
    **Red Hat Enterprise Linux** (**RHEL**)/**CentOS**) as a package (**Debian** (**DEB**)
    or **RPM Package Manager** (**RPM**) or a **tape archive GNU zip** (**TAR GZ**)
    installation).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configurations are made on the Hadoop `core-site.xml` and `kms-site.xml` configuration
    files. These Hadoop configurations are made to integrate Steam with YARN and to
    implement **user impersonation**. Because Enterprise Steam is on an edge node,
    changes to Hadoop configurations on the management node are replicated immediately
    on Enterprise Steam.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: H2O-3 or Sparkling Water JAR files are packaged by Enterprise Steam **YARN applications**
    and run against the Hadoop cluster as a separate YARN job for each user launching
    an H2O cluster. The YARN job (or, equivalently, the H2O cluster) runs until the
    user stops the H2O cluster, or Enterprise Steam auto-stops the cluster after a
    threshold of idle or absolute time has been reached. The H2O-3 JAR and Sparkling
    Water JAR files are obtained from H2O.ai and are specific to the Hadoop distribution.
    The administrator uploads the JAR files from the UI or performs a **secure copy**
    (**SCP**) to the Enterprise Steam filesystem.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For specification details on installing Enterprise Steam, including requirements
    for Linux OS, Java, and Hadoop distributions, see the H2O Enterprise Steam documentation
    at [https://docs.h2o.ai/enterprise-steam/latest-stable/docs/install-docs/installation.html](https://docs.h2o.ai/enterprise-steam/latest-stable/docs/install-docs/installation.html).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Upgrading H2O-3 or Sparkling Water Is Easy (Again)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'H2O-3 and Sparkling Water are not installed on the Hadoop cluster: here, they
    are wrapped into YARN jobs and distributed and run on the cluster as such. This
    makes upgrading easy: the administrator simply uploads a newer version of the
    JAR file to Enterprise Steam and the users launch their next H2O cluster with
    the newer versions. (Multiple versions can coexist, so users can select among
    them when launching an H2O cluster.)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: For high availability on Hadoop, Enterprise Steam is installed as an active-passive
    setup with manual failover. This is described in the H2O documentation at [https://docs.h2o.ai/enterprise-steam/latest-stable/docs/install-docs/ha.html](https://docs.h2o.ai/enterprise-steam/latest-stable/docs/install-docs/ha.html).
  prefs: []
  type: TYPE_NORMAL
- en: Deployment as part of H2O AI Cloud
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Enterprise Steam, H2O Core (H2O-3 and Sparkling Water) can be deployed as part
    of a larger H2O AI Cloud platform (*see Figure 12.2*). As such, it has a similar
    architecture to the two models just shown but is now integrated and installed
    as part of a larger H2O AI Cloud implementation. This will be discussed further
    in [*Chapter 13*](B16721_13_Final_SK_ePub.xhtml#_idTextAnchor241), *Introducing
    H2O AI Cloud.*
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have explored H2O at Scale's enterprise architecture view, let's
    look at the security view.
  prefs: []
  type: TYPE_NORMAL
- en: H2O at Scale security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: H2O at Scale has been deployed to numerous highly regulated enterprises in financial
    services, insurance, healthcare, and other industries. This typically involves
    extensive and thorough architecture and security reviews that vary across organizations.
    Key areas from an architecture standpoint are discussed in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: Data movement and privacy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Top security points for data movement and privacy are noted here:'
  prefs: []
  type: TYPE_NORMAL
- en: Data moves directly from the enterprise data source to the memory of the user's
    H2O cluster on the enterprise cluster and does not pass through H2O Enterprise
    Steam or the data scientist's client.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Data in concurrent H2O clusters is isolated from other data: users cannot see
    or access each other''s data during model building.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data in a user's H2O cluster is removed when the H2O cluster is stopped. Recall
    that data is partitioned in memory across a user's running H2O cluster nodes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Users can download data to an enterprise-storage-layer home directory (for example,
    in AWS S3 or HDFS) as configured by an administrator.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Users cannot download data from an H2O cluster to a local disk.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: User authentication and access control
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The main points to note are outlined here:'
  prefs: []
  type: TYPE_NORMAL
- en: User authentication is done centrally through Enterprise Steam, which authenticates
    against the enterprise IdP. Enterprise Steam supports **OpenID**, **Lightweight
    Directory Access Protocol** (**LDAP**), **Security Assertion Markup Language**
    (**SAML**), and **Pluggable Authentication Modules** (**PAM**) authentication.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: User authentication through Enterprise Steam can be done through the H2O Steam
    **application programming interface** (**API**). Users can generate **personal
    access tokens** (**PATs**) and use them as environment variables in their programs
    (as opposed to hardcoding them). The generation of a new PAT revokes the previous
    one. PATs are generated from the Enterprise Steam UI after the user logs in.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enterprise Steam supports running on a Kerberos-secured Hadoop cluster.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For access to HDFS or Hive, Hadoop impersonation can be configured. This allows
    Enterprise Steam to appear to these data sources as the logged-in user and not
    as the Enterprise Steam service ID. This in turn allows H2O users to authenticate
    against these resources simply by logging in to Enterprise Steam (as opposed to
    explicitly passing authorization credentials).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For JDBC and other access to data sources, the data scientist passes access
    credentials (for example, JDBC connection **Uniform Resource Locator** (**URL**),
    username, and password) as parameters to the H2O API's data import statement in
    the client IDE.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enterprise Steam administrator configurations for user authentication and access
    control were covered in [*Chapter 11*](B16721_11_Final_SK_ePub.xhtml#_idTextAnchor207),
    *The Administrator and Operations View*.
  prefs: []
  type: TYPE_NORMAL
- en: Network and firewall
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It is assumed that H2O at Scale is deployed securely behind the enterprise
    network either on-premises or in the cloud. Aspects of H2O network security are
    noted here:'
  prefs: []
  type: TYPE_NORMAL
- en: User access to Enterprise Steam and H2O clusters on the enterprise-server cluster
    is through **Hypertext Transfer Protocol Secure** (**HTTPS**). Enterprise Steam
    autogenerates a self-signed **Transport Layer Security** (**TLS**) certificate
    at installation time, but you will have the option to install your own after your
    first login. Additionally, certificates can be installed for LDAP, Kubernetes
    Ingress, and Kubernetes connection to MinIO and H2O.ai storage layers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enterprise Steam exposes users to port `9555` by default, but this can be changed.
    Enterprise Steam runs behind a reverse proxy, and users never communicate directly
    with the H2O cluster itself.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Full details for H2O Enterprise Steam security can be found in the H2O documentation
    at [https://docs.h2o.ai/enterprise-steam/latest-stable/docs/install-docs/index.html](https://docs.h2o.ai/enterprise-steam/latest-stable/docs/install-docs/index.html).
  prefs: []
  type: TYPE_NORMAL
- en: We have now explored H2O at Scale enterprise and security architecture from
    the perspective of their respective stakeholders. Let's now view how this relates
    to the data scientist.
  prefs: []
  type: TYPE_NORMAL
- en: The data scientist's view of enterprise and security architecture
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Data scientists typically do not interact directly or frequently with enterprise
    and security architects. Nevertheless, data scientists may be impacted by these
    stakeholders in the way shown in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.7 – Data-science view of enterprise and security architecture'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16721_12_07.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.7 – Data-science view of enterprise and security architecture
  prefs: []
  type: TYPE_NORMAL
- en: Implementing H2O at Scale for the first time in the enterprise typically requires
    formal architecture and security review of the technology. Enterprise systems
    are large ecosystems of multiple technologies integrated into a coherent whole.
    Architect and security reviewers determine if H2O at Scale can be implemented
    in this ecosystem while conforming to principles that define the coherent whole.
    These principles are rules and guidelines defined by enterprise stakeholders that
    may range from guaranteeing new technology aligns with business needs, to guaranteeing
    the technology satisfies an extensive list of security requirements, to guaranteeing
    that the architecture enables **business continuity** (**BC**) after a disruption.
    These are just a few examples.
  prefs: []
  type: TYPE_NORMAL
- en: 'H2O at Scale technology has passed architecture and security reviews of *Fortune
    100* and *Fortune 500* enterprises for reasons that have been outlined in this
    chapter. H2O at Scale can be summarized as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Has a light installation footprint and is easy to upgrade
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrates natively into existing frameworks (Kubernetes; YARN)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Governs H2O users and H2O software management centrally through Enterprise Steam
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Provides high availability for BC
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Uses common communication protocols
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implements extensive and well-known security mechanisms
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensures data privacy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Provides support with known **service-level agreements** (**SLAs**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's summarize what we learned in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we examined the architecture and security underpinnings of
    H2O at Scale model-building technology. Such an examination provides architecture
    and security stakeholders a sound starting point to evaluate H2O against technical
    requirements and architecture principles that define enterprise systems. In general,
    H2O at Scale integrates and operates nicely in enterprise ecosystems and has a
    small software footprint in doing so. H2O also has extensive security capabilities
    that meet the high security demands of enterprises.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will take everything we have learned up to this point
    and place it in the larger context of H2O.ai's exciting new end-to-end machine
    learning platform called the H2O AI Cloud.
  prefs: []
  type: TYPE_NORMAL
