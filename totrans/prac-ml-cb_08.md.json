["```py\n >install.packages(\"MSwM\")\n >library(MSwM)\n\n```", "```py\n> MarkovSwitchData <- read.csv(\"d:/StocksRegimeSwitching.csv\", header = TRUE)\n\n```", "```py\n> attach(MarkovSwitchData)\n\n```", "```py\n> head(MarkovSwitchData)\n\n```", "```py\n> dim(MarkovSwitchData)\n\n```", "```py\n> summary(MarkovSwitchData)\n\n```", "```py\n > yLogValueStocks <- cbind(LVS)\n\n```", "```py\n > head(yLogValueStocks)\n\n```", "```py\n> head(yLogGrowthStocks)\n\n```", "```py\n> x <- cbind(LRY, LRC, INT, LRV)\n\n```", "```py\n> olsLogValueStocks <- lm(yLogValueStocks~x)\n\n```", "```py\n> summary(olsLogValueStocks)\n\n```", "```py\n> olsLogGrowthStocks <- lm(yLogGrowthStocks~x)\n\n```", "```py\n> summary(olsLogGrowthStocks)\n\n```", "```py\n> MarkovSwtchLogValueStocks <- msmFit(olsLogValueStocks, k = 2, sw = rep(TRUE, 6))\n\n```", "```py\n> summary(MarkovSwtchLogValueStocks)\n\n```", "```py\n> MarkoSwtchLogGrowthStocks<- msmFit(olsLogGrowthStocks, k = 2, sw = rep(TRUE, 6))\n\n```", "```py\n> summary(MarkoSwtchLogGrowthStocks)\n\n```", "```py\n> par(mar=c(3,3,3,3))\n\n```", "```py\n> plotProb(MarkovSwtchLogValueStocks, which=1)\n\n```", "```py\n> plotProb(MarkovSwtchLogValueStocks, which=2)\n\n```", "```py\n> plotProb(MarkoSwtchLogGrowthStocks, which=1)\n\n```", "```py\n> plotProb(MarkoSwtchLogGrowthStocks, which=2)\n\n```", "```py\n> par(mar=c(3,3,3,3))\n\n```", "```py\n> plotDiag(MarkovSwtchLogValueStocks, regime=1, which=1)\n\n```", "```py\n> plotDiag(MarkovSwtchLogValueStocks, regime=1, which=2)\n\n```", "```py\n> plotDiag(MarkoSwtchLogGrowthStocks, regime=1, which=3)\n\n```", "```py\n> plotDiag(MarkoSwtchLogGrowthStocks, regime=1, which=1)\n\n```", "```py\n> plotDiag(MarkoSwtchLogGrowthStocks, regime=1, which=2)\n\n```", "```py\n> plotDiag(MarkoSwtchLogGrowthStocks, regime=1, which=3)\n\n```", "```py\n    > install.packages(\"dplyr\")\n    > install.packages(\"reshape2\")\n    > install.packages(\"ggplot2\")\n    > install.packages(\"ChannelAttribution\")\n    > install.packages(\"markovchain\")\n    > library(dplyr)\n    > library(reshape2)\n    > library(ggplot2)\n    > library(ChannelAttribution)\n    > library(markovchain)\n\n```", "```py\n> datafrm1 <- data.frame(path = c('c1 > c2 > c3', 'c1', 'c2 > c3'), conv = c(1, 0, 0), conv_null = c(0, 1, 1))\n\n```", "```py\n> datafrm1\n\n```", "```py\n> model1 <- markov_model(datafrm1, var_path = 'path', var_conv = 'conv', var_null = 'conv_null', out_more = TRUE)\n\n```", "```py\n> model1\n\n```", "```py\n> datafr{BS}l1$result\n\n```", "```py\n> datafrmtransmatrix1 <- model1$transition_matrix\n\n```", "```py\n> datafrmtransmatrix <- dcast(datafrmtransmatrix1, channel_from ~ channel_to, value.var = 'transition_probability')\n\n```", "```py\n> datafrmtransmatrix\n\n```", "```py\n> datafrmtransmatrix <- model1$transition_matrix\n\n```", "```py\n> datafrmtransmatrix\n\n```", "```py\n> datafrmdummy <- data.frame(channel_from = c('(start)', '(conversion)', '(null)'), channel_to = c('(start)', '(conversion)', '(null)'), transition_probability = c(0, 1, 1))\n\n```", "```py\n> datafrmtransmatrix\n\n```", "```py\n> datafrmtransmatrix <- rbind(datafrmtransmatrix, datafrmdummy)\n\n```", "```py\n> datafrmtransmatrix\n\n```", "```py\n> datafrmtransmatrix$channel_from <- factor(datafrmtransmatrix$channel_from, levels = c('(start)', '(conversion)', '(null)', 'c1', 'c2', 'c3'))\n\n```", "```py\n> datafrmtransmatrix$channel_from\n\n```", "```py\n> datafrmtransmatrix$channel_to <- factor(datafrmtransmatrix$channel_to, levels = c('(start)', '(conversion)', '(null)', 'c1', 'c2', 'c3'))\n\n```", "```py\n> datafrmtransmatrix$channel_to\n\n```", "```py\n> datafrmtransmatrix <- dcast(datafrmtransmatrix, channel_from ~ channel_to, value.var = 'transition_probability')\n\n```", "```py\n> datafrmtransmatrix\n\n```", "```py\n> transitionmatrix <- matrix(data = as.matrix(datafrmtransmatrix[, -1]), nrow = nrow(datafrmtransmatrix[, -1]), ncol = ncol(datafrmtransmatrix[, -1]), dimnames = list\n(c(as.character(datafrmtransmatrix[, 1])), c(colnames(datafrmtransmatrix[, -1]))))\n\n```", "```py\n> transitionmatrix\n\n```", "```py\n> transitionmatrix[is.na(transitionmatrix)] <- 0\n\n```", "```py\n> transitionmatrix1 <- new(\"markovchain\", transitionMatrix = transitionmatrix)\n\n```", "```py\n> transitionmatrix1\n\n```", "```py\n> plot(transitionmatrix1, edge.arrow.size = 0.5, main = \"Markov Graph Transition Matrix - transitionmatrix1\")\n\n```", "```py\n    > set.seed(354)\n    > datafrm2 <- data.frame(client_id = sample(c(1:1000), 5000, replace = TRUE), date = sample(c(1:32), 5000, replace = TRUE), channel = sample(c(0:9), 5000, replace = TRUE, prob = c(0.1, 0.15, 0.05, 0.07, 0.11, 0.07, 0.13, 0.1, 0.06, 0.16)))\n\n```", "```py\n> head(datafrm2)\n\n```", "```py\n> datafrm2$date <- as.Date(datafrm2$date, origin = \"2016-01-01\")\n\n```", "```py\n> datafrm2$channel <- paste0('channel_', datafrm2$channel)\n\n```", "```py\n> head(datafrm2)\n\n```", "```py\n> datafrm2 <- datafrm2 %>% group_by(client_id) %>% summarise(path = paste(channel, collapse = ' > '), conv = 1, conv_null = 0) %>% ungroup()\n\n```", "```py\n> datafrm2\n\n```", "```py\n> model2 <- markov_model(datafrm2, var_path = 'path', var_conv = 'conv', var_null = 'conv_null', out_more = TRUE)\n\n```", "```py\n> datafrmheuristic <- datafrm2 %>% mutate(channel_name_ft = sub('>.*', '', path), channel_name_ft = sub(' ', '', channel_name_ft), channel_name_lt = sub('.*>', '', path), channel_name_lt = sub(' ', '', channel_name_lt))\n\n```", "```py\n> datafrmheuristic\n\n```", "```py\n> datafrmfirsttouch <- datafrmheuristic %>% group_by(channel_name_ft) %>% summarise(first_touch_conversions = sum(conv)) %>% ungroup()\n\n```", "```py\n> datafrmfirsttouch\n\n```", "```py\n> datafrmlasttouch <- datafrmheuristic %>% group_by(channel_name_lt) %>% summarise(last_touch_conversions = sum(conv)) %>% ungroup()\n\n```", "```py\n> datafrmfirsttouch\n\n```", "```py\n> heuristicmodel2 <- merge(datafrmfirsttouch, datafrmlasttouch, by.x = 'channel_name_ft', by.y = 'channel_name_lt')\n\n```", "```py\n> heuristicmodel2\n\n```", "```py\n> allmodels <- merge(heuristicmodel2, model2$result, by.x = 'channel_name_ft', by.y = 'channel_name')\n\n```", "```py\n> allmodels\n\n```", "```py\n    > colnames(allmodels)[c(1, 4)] <- c('channel_name', 'attrib_model_conversions')\n    > datafrmplottransition <- model2$transition_matrix\n    > cols <- c(\"#e7f0fa\", \"#c9e2f6\", \"#95cbee\", \"#0099dc\", \"#4ab04a\", \"#ffd73e\", \"#eec73a\", \"#e29421\", \"#e29421\", \"#f05336\", \"#ce472e\")\n\n```", "```py\n> t <- max(datafrmplottransition$transition_probability)\n\n```", "```py\n> t\n\n```", "```py\n> ggplot(datafrmplottransition, aes(y = channel_from, x = channel_to, fill = transition_probability)) + theme_minimal() + geom_tile(colour = \"white\", width = .9, height = .9) + scale_fill_gradientn(colours = cols, limits = c(0, t), breaks = seq(0, t, by = t/4), labels = c(\"0\", round(t/4*1, 2), round(t/4*2, 2), round(t/4*3, 2), round(t/4*4, 2)), guide = guide_colourbar(ticks = T, nbin = 50, barheight = .5, label = T, barwidth = 10)) + geom_text(aes(label = round(transition_probability, 2)), fontface = \"bold\", size = 4) + theme(legend.position = 'bottom', legend.direction = \"horizontal\", panel.grid.major = element_blank(), panel.grid.minor = element_blank(), plot.title = element_text(size = 20, face = \"bold\", vjust = 2, color = 'black', lineheight = 0.8), axis.title.x = element_text(size = 24, face = \"bold\"), axis.title.y = element_text(size = 24, face = \"bold\"), axis.text.y = element_text(size = 8, face = \"bold\", color = 'black'), axis.text.x = element_text(size = 8, angle = 90, hjust = 0.5, vjust = 0.5, face = \"plain\")) + ggtitle(\"Heatmap - Transition Matrix \")\n\n```", "```py\n    > install.packages(\"markovchain\")\n    > library(markovchain)\n\n```", "```py\n> RentalStates <- c(\"Downtown\", \"East\", \"West\")\n\n```", "```py\n> RentalStates\n\n```", "```py\n> RentalTransitionMatrix <- matrix(c(0.3, 0.3, 0.4, \n 0.4, 0.4, 0.2, \n 0.5, 0.3, 0.2),\n byrow = T, nrow = 3, dimnames = list(RentalStates, RentalStates))\n\n```", "```py\n> RentalTransitionMatrix\n\n```", "```py\n> mcRental <- new(\"markovchain\", states = RentalStates, byrow = T, transitionMatrix = RentalTransitionMatrix, name = \"Rental Cars\")\n\n```", "```py\n> mcRental\n\n```", "```py\n> mcRental[2]\n\n```", "```py\n> plot(mcRental)\n\n```", "```py\n> transitionProbability(mcRental, \"East\", \"West\")\n\n```", "```py\n> x <- 0.3 * 0.3\n\n```", "```py\n> y <- 0.3 * 0.4\n\n```", "```py\n    > z <- 0.4 * 0.5\n    > x + y + z\n\n```", "```py\n> mcRental ^ 2\n\n```", "```py\n> mcRental ^ 20\n\n```", "```py\n> mcRental ^ 30\n\n```", "```py\n> 70 * steadyStates(mcRental)\n\n```", "```py\n> summary(mcRental)\n\n```", "```py\n> conditionalDistribution(mcRental, \"Downtown\")\n\n```", "```py\n> conditionalDistribution(mcRental, \"West\")\n\n```", "```py\n> conditionalDistribution(mcRental, \"East\")\n\n```", "```py\n    > install.packages(\"simmer\")\n    > install.packages(\"ggplot2\")\n    > library(simmer)\n    > library(ggplot2)\n\n```", "```py\n> ArrivalRate <- 3/20\n\n```", "```py\n> ArrivalRate\n\n```", "```py\n> ServiceRate <- c(1/8, 1/3)\n\n```", "```py\n> ServiceRate\n\n```", "```py\n> p <- 0.75\n\n```", "```py\n> TransitionMatrix <- matrix(c(1,   ServiceRate[1],     0,\n 1,   -ArrivalRate,       (1-p)*ArrivalRate,\n 1,   ServiceRate[2],     -ServiceRate[2]), byrow=T, ncol=3)\n\n```", "```py\n> TransitionMatrix\n\n```", "```py\n> B <- c(1, 0, 0)\n\n```", "```py\n> P <- solve(t(A), B)\n\n```", "```py\n> P\n\n```", "```py\n> Resolution <- sum(P * c(1, 0, 1)) \n\n```", "```py\n> Resolution\n\n```", "```py\n> set.seed(1234)\n\n```", "```py\n> option.1 <- function(t) {\n car <- create_trajectory() %>%\n seize(\"pump\", amount=1) %>%\n timeout(function() rexp(1, ServiceRate[1])) %>%\n release(\"pump\", amount=1)\n\n```", "```py\n motorcycle <- create_trajectory() %>%\n seize(\"pump\", amount=1) %>%\n timeout(function() rexp(1, ServiceRate[2])) %>%\n release(\"pump\", amount=1)\n\n```", "```py\n simmer() %>%\n add_resource(\"pump\", capacity=1, queue_size=0) %>%\n add_generator(\"car\", car, function() rexp(1, p*ArrivalRate)) %>%\n add_generator(\"motorcycle\", motorcycle, function() rexp(1, (1-p)*ArrivalRate)) %>%\n run(until=t)\n }\n\n```", "```py\n> option.2 <- function(t) {\n vehicle <- create_trajectory() %>%\n seize(\"pump\", amount=1) %>%\n branch(function() sample(c(1, 2), 1, prob=c(p, 1-p)), merge=c(T, T),\n create_trajectory(\"car\") %>%\n timeout(function() rexp(1, ServiceRate[1])),\n create_trajectory(\"motorcycle\") %>%\n timeout(function() rexp(1, ServiceRate[2]))) %>%\n release(\"pump\", amount=1)\n simmer() %>%\n add_resource(\"pump\", capacity=1, queue_size=0) %>%\n add_generator(\"vehicle\", vehicle, function() rexp(1, ArrivalRate)) %>%\n run(until=t)\n }\n\n```", "```py\n    > option.3 <- function(t) {\n       vehicle <- create_trajectory() %>%\n       seize(\"pump\", amount=1) %>%\n       timeout(function() {\nif (runif(1) < p) rexp(1, ServiceRate[1]) \nelse rexp(1, ServiceRate[2]) \n       }) %>%\n    release(\"pump\", amount=1)\n    simmer() %>%\n    add_resource(\"pump\", capacity=1, queue_size=0) %>%\n    add_generator(\"vehicle\", vehicle, function() rexp(1, ArrivalRate)) %>%\n    run(until=t)\n    }\n\n```", "```py\n> gas.station <- option.3(5000)\n\n```", "```py\n    > graph <- plot_resource_usage(gas.station, \"pump\", items=\"system\")\n    > graph + geom_hline(yintercept = Resolution)\n\n```", "```py\n    >install.packages(\"RQuantLib\", type=\"binary\")\n    >install.packages(\"ESGtoolkit\")\n    >library(RQuantLib)\n    >library(ESGtoolkit)\n\n```", "```py\n    > freq <- \"monthly\"\n    > delta_t <- 1/12\n\n```", "```py\n> delta_t\n\n```", "```py\n> params <- list(tradeDate=as.Date('2002-2-15'),\n settleDate=as.Date('2002-2-19'),\n payFixed=TRUE,\n dt=delta_t,\n strike=.06,\n method=\"HWAnalytic\",\n interpWhat=\"zero\",\n interpHow= \"spline\")\n\n```", "```py\n> TermQuotes  <- list(d1w =0.0382, # 1-week deposit rate\n d1m =0.0372,# 1-month deposit rate\n d3m = 0.0363,# 3-month deposit rate\n d6m = 0.0353,# 6-month deposit rate\n d9m = 0.0348,# 9-month deposit rate\n d1y = 0.0345,# 1-year deposit rate\n s2y = 0.037125,# 2-year swap rate\n s3y =0.0398,# 3-year swap rate\n s5y =0.0443,# 5-year swap rate\n s10y =0.05165,# 10-year swap rate\n s15y =0.055175)# 15-year swap rate\n\n```", "```py\n> SwaptionMaturities <- c(1,2,3,4,5)\n\n```", "```py\n> SwaptionMaturities\n\n```", "```py\n> SwapTenors <- c(1,2,3,4,5)\n\n```", "```py\n> SwapTenors\n\n```", "```py\n> VolatilityMatrix <- matrix(\n c(0.1490, 0.1340, 0.1228, 0.1189, 0.1148,\n 0.1290, 0.1201, 0.1146, 0.1108, 0.1040,\n 0.1149, 0.1112, 0.1070, 0.1010, 0.0957,\n 0.1047, 0.1021, 0.0980, 0.0951, 0.1270,\n 0.1000, 0.0950, 0.0900, 0.1230, 0.1160),\n ncol=5, byrow=TRUE)\n\n```", "```py\n> BermudanSwaption <- RQuantLib::BermudanSwaption(params, TermQuotes, SwaptionMaturities, SwapTenors, VolatilityMatrix)\n\n```", "```py\n> summary(BermudanSwaption)\n\n```", "```py\n> BermudanSwaption\n\n```", "```py\n> times <- seq(from = delta_t, to = 5, by = delta_t)\n\n```", "```py\n> DiscountCurve <- RQuantLib::DiscountCurve(params, TermQuotes, times)\n\n```", "```py\n> str(DiscountCurve)\n\n```", "```py\n> maturities <- DiscountCurve$times\n\n```", "```py\n> maturities\n\n```", "```py\n> MarketZeroRates <- DiscountCurve$zerorates\n\n```", "```py\n> MarketZeroRates\n\n```", "```py\n> MarketPrices <- DiscountCurve$discounts\n\n```", "```py\n> MarketPrices\n\n```", "```py\n> horizon <- 5\n\n```", "```py\n    > NoSimulations <- 10000\n    > a <- BermudanSwaption$a\n\n```", "```py\n> a\n\n```", "```py\n> sigma <- BermudanSwaption$sigma\n\n```", "```py\n> sigma\n\n```", "```py\n> GaussianShocks <- ESGtoolkit::simshocks(n = NoSimulations, horizon = horizon, frequency = freq)\n\n```", "```py\n> x <- ESGtoolkit::simdiff(n = NoSimulations, horizon = horizon, frequency = freq, model = \"OU\", x0 = 0, theta1 = 0, theta2 = a, theta3 = sigma, eps = GaussianShocks)\n\n```", "```py\n> ForwardRates <- ts(replicate(nb.sims, DiscountCurve$forwards), start = start(x), deltat = deltat(x))\n\n```", "```py\n    > t.out <- seq(from = 0, to = horizon, by = delta_t)\n    > param.alpha <- ts(replicate(NoSimulations, 0.5*(sigma^2)*(1 - exp(-a*t.out))^2/(a^2)), start = start(x), deltat = deltat(x))\n    > alpha <- ForwardRates + param.alpha\n\n```", "```py\n> ShortRates <- x + alpha\n\n```", "```py\n> StochasticDiscount <- ESGtoolkit::esgdiscountfactor(r = ShortRates, X = 1)\n\n```", "```py\n> MonteCarloPrices <- rowMeans(StochasticDiscount)\n\n```", "```py\n> MonteCarloPrices\n\n```", "```py\n> MonteCarloZeroRates <- -log(MonteCarloPrices)/maturities\n\n```", "```py\n> MonteCarloZeroRates\n\n```", "```py\n> ConfidenceInterval <- t(apply((StochasticDiscount - MarketPrices)[-1, ], 1, function(x) t.test(x)$conf.int))\n\n```", "```py\n> head(ConfidenceInterval)\n\n```", "```py\n> par(mfrow = c(2, 2))\n\n```", "```py\n> ESGtoolkit::esgplotbands(ShortRates, xlab = \"maturities\", ylab = \"short-rate quantiles\", main = \"Short Rate Quantiles\")\n\n```", "```py\n> plot(maturities, MonteCarloZeroRates, type='l', col = 'blue', lwd = 1, main = \"Monte Carlo v/s Market n Zero Rates\")\n\n```", "```py\n> points(maturities, MonteCarloZeroRates, col = 'red')\n\n```", "```py\n> plot(maturities, MonteCarloPrices, type='l', col = 'blue', lwd = 1, main = \"Monte Carlo v/s Market Prices\")\n\n```", "```py\n> points(maturities, MonteCarloPrices, col = 'red')\n\n```", "```py\n> matplot(maturities[-1], conf.int, type = 'l', main = \"Confidence Interval for the price difference\")\n\n```"]