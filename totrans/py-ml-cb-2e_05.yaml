- en: Visualizing Data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Plotting three-dimensional scatter plots
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Plotting bubble plots
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Animating bubble plots
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Drawing pie charts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Plotting date-formatted time series data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Plotting histograms
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Visualizing heat maps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Animating dynamic signals
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with the Seaborn library
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To address the recipes in this chapter, you will need the following files (available
    on GitHub):'
  prefs: []
  type: TYPE_NORMAL
- en: '`scatter_3d.py`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`bubble_plot.py`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dynamic_bubble_plot.py`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pie_chart.py`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`time_series.py`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`aapl.csv`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`histogram.py`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`heatmap.py`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`moving_wave_variable.py`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`seaborn.boxplot.py`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An introduction to data visualization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Data visualization** is an important pillar of machine learning. It helps
    us to formulate the right strategies to understand data. The visual representation
    of data assists helps us choose the right algorithms. One of the main goals of
    data visualization is to communicate clearly by using graphs and charts.'
  prefs: []
  type: TYPE_NORMAL
- en: We encounter numerical data all the time in the real world. We want to encode
    this numerical data by using graphs, lines, dots, bars, and so on, to visually
    display the information contained in those numbers. This makes complex distributions
    of data more understandable and usable. The process is used in a variety of situations,
    including comparative analysis, tracking growth, market distribution, public opinion
    polls, and much more.
  prefs: []
  type: TYPE_NORMAL
- en: We use different charts to show patterns or relationships between variables.
    We use histograms to display the distribution of data. We use tables when we want
    to look up a specific measurement. In this chapter, we will look at various scenarios
    and discuss what visualizations we can use in those situations.
  prefs: []
  type: TYPE_NORMAL
- en: Plotting three-dimensional scatter plots
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The relationships between quantitative variables can be represented by using
    a scatter plot. A version of this graph is represented by the three-dimensional
    scatter plots that are used to show the relationships between three variables.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you will learn how to plot three-dimensional scatter plots and
    visualize them in three dimensions.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s look at how to plot three-dimensional scatter plots:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new Python file and import the following packages (the full code is
    in the `scatter_3d.py` file that''s already provided to you):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the empty figure, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the number of values that we should generate:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `lambda` function to generate the values in a given range:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Generate the x, y, and z values using the `lambda` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Plot these values, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'If you run the preceding code, you will see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e02664cf-8fb5-4823-a0c8-ce70baf3e1c3.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The scatter plot helps us to understand whether there is a statistical association
    between two quantitative characters. If as one variable increases, the other tends
    to decrease, we have a discordant association. If as one variable increases, the
    other tends to increase, we have a concordant association. If one changes and
    the other tends to not change, we have no association. To analyze this trend,
    the disposition of markers is analyzed. If the markers are close to forming a
    straight line in any direction in the three-dimensional space of the graph, the
    correlation between the corresponding variables is high. If the markers are equally
    distributed in the graph, the correlation is low, or zero.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Three-dimensional scatter plots are used to show the relationship between three
    variables. A fourth variable can be added by matching the color or size of the
    markers, adding another variable to the plot.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Refer to the official documentation of Matplotlib at [https://matplotlib.org/gallery/mplot3d/scatter3d.html](https://matplotlib.org/gallery/mplot3d/scatter3d.html).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Refer to *Visualize Your Data: Scatter Plots* (from the University of Illinois)
    at [http://guides.library.illinois.edu/visualize-your-data/scatter-plots](http://guides.library.illinois.edu/visualize-your-data/scatter-plots).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Plotting bubble plots
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A **bubble plot** is a type of chart in which each represented entity is defined
    in terms of three distinct numerical parameters. The first two parameters are
    used as values of the two Cartesian axes, while the third is used to find the
    radius of the bubble. Bubble plots are used to describe relationships in various
    scientific fields.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's look at how to plot bubble plots. The size of each circle in a two-dimensional
    bubble plot represents the amplitude of that particular point.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s look at how to plot bubble plots:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new Python file and import the following packages (the full code is
    in the `bubble_plot.py` file that''s already been provided to you):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the number of values that we should generate:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Generate random values for `x` and `y`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the area value for each point in the bubble plot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the colors:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Plot these values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'If you run this code, you will see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/506a77bd-829c-4890-bc30-9971e5e1c597.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The variables that were shown previously can be compared to each other based
    on their sizes and their positions relative to the numeric axis. In fact, the
    *x* and *y* axis of a bubble chart are numerical scales, so the position in which
    data is represented describes two numerical values, while the area of the drawing
    depends on the value of the third parameter.
  prefs: []
  type: TYPE_NORMAL
- en: When drawing a bubble chart, it is necessary to pay attention to the fact that
    the area of a circle is proportional to the square of the radius, so if the radius
    is determined proportionally to the third value, the result will disproportionately
    emphasize the third value. To have a correctly weighed scale, the radius must
    be chosen in proportion to the square root of the third value. This error is commonly
    committed when drawing bubble charts.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A bubble plot can be considered a variation of a scatter plot, where points
    are replaced with bubbles. This type of chart can be used instead of a scatter
    plot if the data has three series, each of which contains a set of data.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Refer to the official documentation of Matplotlib at [https://matplotlib.org/api/_as_gen/matplotlib.pyplot.scatter.html](https://matplotlib.org/api/_as_gen/matplotlib.pyplot.scatter.html).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Refer to the `pyplot` tutorial at [https://matplotlib.org/users/pyplot_tutorial.html](https://matplotlib.org/users/pyplot_tutorial.html).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Animating bubble plots
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An animating bubble plot is a bubble plot in motion. It allows for the efficient
    and interactive visualization of correlations through time. It is particularly
    useful, as it allows us to visualize how the correlations between variables change
    over time efficiently and interactively.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's look at how to animate a bubble plot. This will be useful when you want
    to visualize data that's transient and dynamic.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s look at how to animate bubble plots:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new Python file and import the following packages (the full code is
    in the `dynamic_bubble_plot.py` file that''s already been provided to you):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s define a `tracker` function that will dynamically update the bubble
    plot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the color:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Update the size of the circles:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Update the position of the oldest data point in the set:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Update the parameters of the scatter plot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the `main` function and create an empty figure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the number of points that will be on the plot at any given point in
    time:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the `datapoints` by using random values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the scatter plot that will be updated in every frame:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Start the animation by using the `tracker` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'If you run this code, you will see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c4758a55-285e-4338-aedd-b9208d671525.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we simply used a series of bubble plots with values that change
    over time to build an animation. To do this, we started with the construction
    of a function that updates the parameters of these graphs. Then, we defined the
    code that traces the bubble plot with the current parameters. Finally, we used
    the `FuncAnimation()` function to create animations from the individual bubble
    plots.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `FuncAnimation()` function of Matplotlib creates an animation by repeatedly
    calling a specific function.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Refer to the official documentation of Matplotlib at [https://matplotlib.org/api/_as_gen/matplotlib.animation.FuncAnimation.html](https://matplotlib.org/api/_as_gen/matplotlib.animation.FuncAnimation.html).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Refer to the Matplotlib animation at [https://matplotlib.org/api/animation_api.html](https://matplotlib.org/api/animation_api.html).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Drawing pie charts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The circular diagram, often referred to as a pie chart, is a method used in
    descriptive statistics for graphical representations of quantitative variables
    measured on classes of categories (nominal values), in order to avoid establishing,
    even unintentionally, an order that does not exist in the categories.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's look at how to draw pie charts. This will be useful when you want to visualize
    the percentages of a set of labels in a group.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s look at how to draw pie charts, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new Python file and import the following package (the full code is
    in the `pie_chart.py` file that''s already been provided to you):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the labels and values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the colors for visualization:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Define a variable to highlight a section of the pie chart by separating it
    from the rest. If you don''t want to highlight any sections, set all of the values
    to `0`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Plot the pie chart. Note that if you are using Python 3, you should use `list(data.values())`
    in the following function call:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'If you run this code, you will see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/72a5ae8a-affc-4e3f-8e44-4a073c145744.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you change the explode array to (`0, 0.2, 0, 0, 0`), it will highlight the
    Mango section. You will see the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7ddf1938-939a-416f-ba02-b36d2263c16d.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A pie chart is constructed by dividing a circle into slices whose angular amplitudes
    are proportional to the frequency classes. The areas identified by the slices
    are proportional to the frequencies. To make the diagram clearer, the various
    slices are filled with different colors.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The pie chart is useful for displaying the market shares of products and brands,
    or the percentages taken by political parties in elections. The chart does not
    work with large percentage differences or with too many elements, as this would
    make the pie too jagged.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Refer to the official documentation of Matplotlib at [https://matplotlib.org/api/_as_gen/matplotlib.pyplot.pie.html](https://matplotlib.org/api/_as_gen/matplotlib.pyplot.pie.html).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Refer to the pie chart (from Wikipedia) at [https://en.wikipedia.org/wiki/Pie_chart](https://en.wikipedia.org/wiki/Pie_chart).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Plotting date-formatted time series data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A **time series** constitutes a sequence of observations of a phenomenon, carried
    out in consecutive instants or time intervals. Usually, even if it's not necessary,
    they are evenly spaced out or are of the same length. The trends of commodity
    prices, stock market indices, government bonds spread, and unemployment rates
    are just a few examples of times series.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's look at how to plot time series data by using date formatting. This will
    be useful in visualizing stock data over time.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s look at how to plot date-formatted time series data, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new Python file and import the following packages (the full code is
    in the `time_series.py` file that''s already been provided to you):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Define a function to format the dates. The `__init__` function sets the class
    variables:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Extract the value at any given time and return it in the following format:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the `main` function. We''ll use the Apple stock quotes CSV file that
    was already provided to you (`aapl.csv`). Load the CSV file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Extract a subset of these values in order to plot them:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the `formatter` object and initialize it with the dates:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the *x* and *y* axes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Plot the data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'If you run this code, you will see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/236cda03-651a-460d-a8a7-86653471c57d.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we have plotted time series data by using date formatting. We
    started by defining a class for formatting the date. We extracted the value at
    time *t* at a specific position. Then, we loaded a CSV file into a NumPy record
    array. So, we took a subset for plotting and we created the date `formatter` object.
    Finally, we set the *x* and *y* axes and plotted the data.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Visualization is fundamental in the analysis of time series. Viewing raw data
    can provide tools for identifying temporal structures, such as trends, cycles,
    and seasonality. However, the formatting of the dates represents an operation
    that you must learn to process, in order to obtain a correct visualization of
    the axes.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Refer to *Time Series Basics* (from Pennsylvania State University) at [https://newonlinecourses.science.psu.edu/stat510/node/41/](https://newonlinecourses.science.psu.edu/stat510/node/41/).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Plotting histograms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A **histogram** is a reproduction of numerical distributions that shows the
    shape of a distribution. It consists of adjacent rectangles (bins) whose bases
    are aligned on an axis and are equipped with a unit of measure.
  prefs: []
  type: TYPE_NORMAL
- en: For more information, refer to the book *MATLAB for Machine Learning* by Giuseppe
    Ciaburro.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We'll look at how to plot histograms in this recipe. We'll compare two sets
    of data and build a comparative histogram.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s look at how to plot histograms, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new Python file and import the following packages (the full code is
    in the `histogram.py` file that''s already been provided to you):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ll compare the production quantities of apples and oranges in this recipe.
    Let''s define some values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the figure and define its parameters:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Plot the histogram:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Set the parameters of the plot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'If you run this code, you will see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/79063eb4-b414-4b7b-9e71-87c2e2f9a311.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The histogram is a particular Cartesian diagram that has discrete values on
    the abscissas and a magnitude on the ordinates, represented by the height of a
    column, which we call a bin. In physics, histograms allow us to study the results
    of an experiment, since they provide us with a graphic indication of how the counts
    or frequencies are distributed, according to the discrete values taken into consideration.
  prefs: []
  type: TYPE_NORMAL
- en: 'To build a histogram, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: First of all, you have to decide the number of tests.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, you must choose the binning, that is, the division of the domain of the
    variable on the abscissas, in intervals. You must therefore define the number
    of intervals, where the *j*^(th) bin will have a predetermined width.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, you must count the occurrences to associate with the individual bins.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A histogram is most useful under the following circumstances:'
  prefs: []
  type: TYPE_NORMAL
- en: The data to be represented are of the numeric type.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You want to visualize the form of the data distribution, in order to see whether
    it is normal and analyze whether a process can (or cannot) meet the requirements
    imposed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You want to determine whether the output of two or more processes is different.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You want to quickly communicate data distributions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You want to check whether a change has occurred in a process over a certain
    period of time.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Refer to *Histograms* (from the University of Leicester) at [https://www2.le.ac.uk/offices/ld/resources/numerical-data/histograms](https://www2.le.ac.uk/offices/ld/resources/numerical-data/histograms).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Refer to the official documentation of Matplotlib at [https://matplotlib.org/api/_as_gen/matplotlib.pyplot.bar.html](https://matplotlib.org/api/_as_gen/matplotlib.pyplot.bar.html).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Visualizing heat maps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **heat map** is a graph where the individual values contained in a matrix
    are represented through gradations of colors. Both fractal maps and tree maps
    often use the same color-coding systems to represent the hierarchy of a variable. For
    example, if we measure the number of clicks on a web page or the areas where the
    mouse pointer passes the most often, we will obtain a heat map with certain areas
    highlighted by warm colors, that is, those that most attract our attention.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We'll look at how to visualize heat maps in this recipe. This is a pictorial
    representation of data, where two groups are associated point by point. The individual
    values that are contained in a matrix are represented as color values in the plot.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s look at how to visualize heat maps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new Python file and import the following packages (the full code is
    in the `heatmap.py` file that''s been provided to you):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the two groups:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Generate a random two-dimensional matrix:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a figure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a heat map:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Plot these values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'If you run this code, you will see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8a66ae19-55ca-445a-bba1-7f482a284a9e.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We already stated that a heat map is a type of graphical representation of
    data, where the values are expressed through a different color range. Its representation
    usually includes the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Warm colors**: Red, orange, and yellow, in the areas of greatest interest'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cold colors**: Green or blue, for the areas with worse results'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generally, heat maps require a large sample of data, and their main objective
    is to obtain useful data on the trend of a particular variable. This means of
    analysis allows us to evaluate the distribution of the variable of interest in
    the analyzed area. In this way, the concentration of warm colors in particular
    areas will highlight the areas in which the variable assumes the highest values.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The creator of heat maps was Cormac Kinney, who, in the mid-1990s, developed
    this solution to provide stock market operators with an extremely quick tool for
    gathering a variety of financial data.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Refer to *Creating Annotated Heatmaps* (from the official documentation of Matplotlib)
    at [https://matplotlib.org/gallery/images_contours_and_fields/image_annotated_heatmap.html](https://matplotlib.org/gallery/images_contours_and_fields/image_annotated_heatmap.html).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Refer to the official documentation of Matplotlib at [https://matplotlib.org/api/_as_gen/matplotlib.pyplot.pcolor.html](https://matplotlib.org/api/_as_gen/matplotlib.pyplot.pcolor.html).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Animating dynamic signals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we visualize real-time signals, it's nice to look at how the waveform builds
    up. A **dynamic system** is a mathematical model that represents an object with
    a finite number of degrees of freedom that evolves over time, according to a deterministic
    law. A dynamic system is identified by a vector in the phase space, which is,
    the space of the system states, where **state** is a term that indicates the set
    of physical quantities, called **state variables** that characterize the dynamics
    of the system.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will look at how to animate dynamic signals and visualize
    them as they are encountered in real time.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s look at how to animate dynamic signals, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new Python file and import the following packages (the full code is
    in the `moving_wave_variable.py` file that''s already been provided to you):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a function to generate a damping sinusoid signal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Define an `initializer` function to initialize the parameters of the plot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Set these parameters, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Define a function to draw the values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'If the values go past the current *x* axis limits, then update and extend the
    graph:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the `main` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'Extract the line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the variables and initialize them to empty lists:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'Define and start the animation by using the `animator` object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'If you run this code, you will see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4ab9df5d-9beb-46b6-9e33-de5a4e80e7de.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we animated dynamic signals and visualized them as they are
    encountered in real time. To do this, a damped sine wave was used. When we go
    on a seesaw, we know that after the initial push, it oscillates for a while and
    then stops. The seesaw is an example of a pendulum, whose motion is represented
    by a damped sine wave. A **damped sine wave** is a sinusoidal function whose amplitude
    approaches zero as time increases.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Sinusoidal waves** are used to describe many oscillating phenomena. When
    a sine wave is muted, each successive peak decreases with time. The most common
    form of damping is exponential damping, in which the outer envelope of the subsequent
    peaks is an exponential decay curve.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Refer to the official documentation of Matplotlib at [https://matplotlib.org/api/_as_gen/matplotlib.animation.FuncAnimation.html](https://matplotlib.org/api/_as_gen/matplotlib.animation.FuncAnimation.html).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Refer to Matplotlib animation at [https://matplotlib.org/api/animation_api.html](https://matplotlib.org/api/animation_api.html).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with the Seaborn library
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A **box plot**, also called a **whiskers chart**, is a graph that uses simple
    dispersion and position indexes to describe the distribution of a sample. A box
    plot can be depicted either horizontally or vertically, by means of a rectangular
    partition divided by two segments. The rectangle (box) is delimited by the first
    quartile (the 25^(th) percentile) and the third quartile (the 75^(th) percentile),
    and is divided by the median (the 50^(th) percentile).
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will draw a box plot to show the distribution of the predictors
    contained in the Boston dataset, which we already used in the *Estimating housing
    prices* recipe in [Chapter 1](f552bbc7-5e56-41b8-8e8d-915cc1bd53ab.xhtml)*, The
    Realm of Supervised Learning*.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s look at how to work with the `seaborn` library, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new Python file and import the following packages (the full code is
    in the `seaborn.boxplot.py` file that''s already been provided to you):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'Load the dataset contained in the `sklearn.datasets` library:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'Convert the data into a pandas `DataFrame`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'Extract the first `12` features as predictors:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'Draw the box plot by using the `seaborn` library:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s look at the results in the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d626dec6-d72d-4f8c-a106-9022b05bc2ec.png)'
  prefs: []
  type: TYPE_IMG
- en: We can see that the predictors have different ranges of values. This makes the
    chart difficult to read; the variability for some predictors is not highlighted.
    In these cases, it is necessary to scale the data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Import the `sklearn.preprocessing.MinMaxScaler` library and scale the data,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we draw a box plot again to see the difference:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'The results are shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4a99ae1a-6934-4c29-98fe-c73497e0549e.png)'
  prefs: []
  type: TYPE_IMG
- en: In this case, we can see that the data is between 0-1\. In this way, the variability
    of the data is recognizable for all of the predictors.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Seaborn library is a data visualization library that's based on Matplotlib.
    It is useful for drawing attractive and informative statistical graphics, and
    is closely integrated with Pandas data structures. Seaborn offers many features
    that can help us with the visual analysis of a data source.
  prefs: []
  type: TYPE_NORMAL
- en: These features can be seen at[ http://seaborn.pydata.org/introduction.html](http://seaborn.pydata.org/introduction.html).
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In a box plot, the segments outside of the box (the whiskers) represent the
    minimum and maximum of the sample. In this way, the four equally populated ranges,
    delineated by quartiles, are graphically represented.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Refer to the official website of the Seaborn library at [https://seaborn.pydata.org/index.html](https://seaborn.pydata.org/index.html).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Refer to the official Seaborn tutorial at [https://seaborn.pydata.org/tutorial.html](https://seaborn.pydata.org/tutorial.html).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
