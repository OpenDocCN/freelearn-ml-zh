["```py\n> ? data.frame  \n```", "```py\n> mtcars;\n\n```", "```py\n> class(mtcars); \n[1] \"data.frame\" \n```", "```py\nlibrary(RODBC); \n```", "```py\nconnStr <- \"Driver=SQL Server;Server=MsSQLGirl; \n  Database=WideWorldImporters;trusted_connection=true\"; \ndbHandle <- odbcDriverConnect(connStr); \n```", "```py\n# Define the query to be run \norder_query =  \n\"SELECT DATEFROMPARTS(YEAR(o.[OrderDate]),  \n      MONTH(o.[OrderDate]), 1) AS OrderMonth, \n    sp.[PreferredName] AS SalesPerson, \n    COUNT(DISTINCT o.[OrderID]) AS OrderCount, \n    SUM(ol.[Quantity] * ol.[UnitPrice]) AS TotalAmount \nFROM [Sales].[Orders] o \n    INNER JOIN[Sales] .[OrderLines] ol \n        ON ol.[OrderID] = o.[OrderID] \n    INNER JOIN[Application] .[People] sp \n        ON sp.[PersonID] = o.[SalespersonPersonID] \nWHERE sp.[ValidTo] >= GETDATE() \n    AND o.[OrderDate] BETWEEN '20150101' AND '20151231' \nGROUP BY \nDATEFROMPARTS(YEAR(o.[OrderDate]),  \nMONTH(o.[OrderDate]), 1), \n    sp.[PreferredName];\" \n\n```", "```py\n# Get the data set from SQL into the orders variable in R \norders <- sqlQuery(dbHandle, order_query); \n```", "```py\norders;  \n```", "```py\n> str(orders) \n```", "```py\n> orders_newrows <- data.frame( \n    OrderMonth = c(\"2015-12-01\", \"2015-12-01\"), \n    SalesPerson = c(\"Julie\", \"Tomaz\"), \n    OrderCount = c(201, 2017), \n    TotalAmount = c(340000, 370000)); \n\n> orders <- rbind(orders, orders_newrows); \n> tail(orders); \n\n```", "```py\n    OrderMonth SalesPerson OrderCount TotalAmount \n105 2015-12-01        Lily        194    442645.5 \n106 2015-03-01      Hudson        389   1020488.6 \n107 2015-10-01         Taj        195    437388.4 \n108 2015-08-01        Lily        182    517126.3 \n109 2015-12-01       Julie        201    340000.0 \n110 2015-12-01       Tomaz       2017    370000.0 \n```", "```py\n> bind_rows(orders, orders_newrows, orders_newrows);\n```", "```py\n> orders_discount <- data.frame( \n    Discount = orders$TotalAmount * 0.25) \n> orders <- cbind(orders, orders_ discount); \n> names(orders) \n```", "```py\n[1] \"OrderMonth\"  \"SalesPerson\" \"OrderCount\"  \"TotalAmount\" \n[5] \"Discount\"  \n```", "```py\n> orders_tax <- data.frame( \n    RowID = seq(1:nrow(orders)), \n    SalesTax = orders$TotalAmount * 0.1 \n    ) \n> orders <- bind_cols(orders,data.frame(orders_tax)); \n> names(orders) \n```", "```py\n[1] \"OrderMonth\"  \"SalesPerson\" \"OrderCount\"  \"TotalAmount\"  \n[5] \"Discount\"   \"RowID\"       \"SalesTax\"    \n```", "```py\n> mutate(orders, TotalPlusTax = TotalAmount * 0.125); \n```", "```py\n> orders <- orders[, !names(orders) == \"RowID\"] \n```", "```py\n> select(orders, -RowID); \n```", "```py\n> select(orders, matches(\"Order\"));  \n```", "```py\n> grep(\"^J.*\", orders$SalesPerson); \n[1]   2  17  21  25  28  37  43  45  52  71  78 102 109 \n> orders[grep(\"^J.*\", orders$SalesPerson),]; \n    OrderMonth SalesPerson OrderCount TotalAmount SalesTax \n2   2015-06-01        Jack        206    502828.7 50282.87 \n17  2015-05-01        Jack        203    493282.0 49328.21 \n21  2015-11-01        Jack        210    473676.4 47367.64 \n25  2015-02-01        Jack        176    454979.3 45497.93 \n28  2015-10-01        Jack        205    522954.2 52295.42 \n37  2015-07-01        Jack        205    466244.0 46624.40 \n43  2015-04-01        Jack        188    520575.8 52057.58 \n45  2015-01-01        Jack        182    413761.0 41376.10 \n52  2015-12-01        Jack        209    474157.7 47415.77 \n71  2015-03-01        Jack        181    469591.0 46959.10 \n78  2015-08-01        Jack        171    359710.5 35971.06 \n102 2015-09-01        Jack        249    552961.4 55296.14 \n109 2015-12-01       Julie        201    340000.0 34000.00 \n\n```", "```py\n> filter(orders, grepl(\"^J.*\", SalesPerson)); \n```", "```py\nlibrary(reshape) \nx <- data.frame(OrderMonth = orders$OrderMonth, \n                SalesPerson = orders$SalesPerson, \n                TotalAmount = orders$TotalAmount) \nx1 <- cast(x, OrderMonth ~ SalesPerson) \nnames(x1) \n```", "```py\nmelt(x1,id=c(OrderMonth)) \n```", "```py\n\nUSE WideWorldImporters \nGO \n\n-- Part 1: Get Monthly Order count and Order amount  \n-- per Sales Person in Year 2015\\. \nDECLARE @SQLScript NVARCHAR(MAX) \nSET @SQLScript = N'SELECT DATEFROMPARTS(YEAR(o.[OrderDate]),  \nMONTH(o.[OrderDate]), 1) AS OrderMonth, \n    sp.[PreferredName] AS SalesPerson, \n    COUNT(DISTINCT o.[OrderID]) AS OrderCount, \n    SUM(ol.[Quantity] * ol.[UnitPrice]) AS TotalAmount \nFROM [Sales].[Orders] o \n    INNER JOIN [Sales].[OrderLines] ol \n        ON ol.[OrderID] = o.[OrderID] \n    INNER JOIN [Application].[People] sp \n        ON sp.[PersonID] = o.[SalespersonPersonID] \nWHERE sp.[ValidTo] >= GETDATE() \n    AND YEAR(o.[OrderDate]) = 2015 \nGROUP BY \nDATEFROMPARTS(YEAR(o.[OrderDate]),  \nMONTH(o.[OrderDate]), 1), \n    sp.[PreferredName];' \n\n-- Part 2: Prepare the R-script that will summarize the dataset. \nDECLARE @RScript NVARCHAR(MAX) \nSET @RScript = N'OutputDataSet <- as.data.frame(t(sapply(InputDataSet[, c(\"OrderCount\", \"TotalAmount\")], summary))); \nOutputDataSet <- cbind(Column = row.names(OutputDataSet), OutputDataSet);' \n\n-- Part 3: Execute R in TSQL to get the monthly sales person's  \n-- order count and total amount. \nEXECUTE sp_execute_external_script \n     @language = N'R' \n    ,@script = @RScript \n    ,@input_data_1 = @SQLScript \nWITH RESULT SETS (( \n            [Columns] NVARCHAR(30), [Min] FLOAT, \n            [Q1] FLOAT, [Median] FLOAT, \n            [Mean] FLOAT,  [Q3] FLOAT, \n            [Max] FLOAT)); \nGO \n\n```", "```py\n> d <- orders[orders$SalesPerson %in% c(\"Amy\", \"Jack\", \"Hudson\"), ]; \n> plot(x = d$TotalAmount, y = d$OrderCount,  \nmain = \"Monthly Orders\", xlab = \"Total Amount ($)\",  \nylab = \"Number of Orders\", col = d$SalesPerson, pch = 19,  \nxaxt = \"n\"); \n> axis(side = 1, at = x <- signif(seq(from = 0,  \nto =  max(orders$TotalAmount), length.out = 6), 2), \nlabels = paste(x / 1000, \"k\", sep = \"\")); \n```", "```py\n> library(ggplot2)  \n>  qplot(x = TotalAmount, y = OrderCount, data = d,  \n  color = SalesPerson, main = \"Monthly Orders\"); \n```", "```py\n> hist(orders$TotalAmount, main = \"Monthly Orders\",  \n  xlab = \"Total Amount ($)\") \n```", "```py\nggplot(orders,  \n       aes( x = SalesPerson, \n            y = TotalAmount)) + \n      geom_boxplot(outlier.color = \"red\", outlier.size = 3) + \n      ggtitle(label = \"Monthly Orders\") + \n      xlab(\"Sales Person\") + ylab(\"Total Amount ($)\"); \n```", "```py\nlibrary(car) # For the scatterplot function \nlibrary(RColorBrewer) # For choosing color palette more easily \n\n# Prepare d  \nd$SalesPerson <- factor(d$SalesPerson); \nd$OrderMonth <- as.Date(d$OrderMonth); \n\n# Configure the palette to use \nmy_colors <- brewer.pal(nlevels(as.factor(d$SalesPerson)), \"Set2\") \n\n# Map the monthly orders \nscatterplot(TotalAmount ~ OrderMonth | SalesPerson, data = d, \n    xlab = \"Month\", ylab = \"Total Amount\",  \n    main = \"Monthly Orders\", col = my_colors, \n    cex = 1.5, lwd = 3) \n```", "```py\n# Use the ggplot version \nggplot(data = d, \n       aes(x = OrderMonth, y = TotalAmount, color = SalesPerson)) + \n    geom_point() + geom_smooth(method = \"loess\") + \n    scale_y_continuous(label = scales::dollar) + \n    scale_color_brewer(palette = \"Set2\") + \n    ggtitle(label = \"Monthly Orders\"); \n```", "```py\nlibrary(rpart) \nlibrary(rpart) \nlibrary(rattle) \nlibrary(rpart.plot) \nfit <- rpart(TotalAmount ~ OrderCount + SalesPerson , data = d, method=\"anova\"); \nfancyRpartPlot(fit, sub = \"Monthly Sales Person\") \n\n```", "```py\n-- Part 2: Prepare the R-script that will produce the visualization. \nDECLARE @RScript NVARCHAR(MAX) \nSET @RScript = N'library(ggplot2);  \n    image_file = tempfile();  \n    jpeg(filename = image_file, width=1000, height=400);  \n    d <- InputDataSet[InputDataSet$SalesPerson %in% c(\"Amy\", \"Jack\", \"Hudson\"), ]; \n    print(qplot(x = TotalAmount, y = OrderCount, data = d, color = SalesPerson, main = \"Monthly Orders\")); \n    dev.off() \n    OutputDataSet <- data.frame( \n            data=readBin(file(image_file,\"rb\"), \n            what=raw(),n=1e6));' \n\n-- Part 3: Execute R in TSQL to get the binary representation of the image. \nEXECUTE sp_execute_external_script \n     @language = N'R' \n    ,@script = @RScript \n    ,@input_data_1 = @SQLScript \nWITH RESULT SETS ((plot VARBINARY(MAX))); \n```", "```py\nCREATE PROCEDURE dbo.usp_AnalyzeOrdersUsingAnova \n( \n  @StartDate DATE = '20150101', \n  @EndDate DATE = '20151231' \n) \n/********************************************************** \n * Purpose: Determine if Monthly Orders (Total Amount in $)  \n *      has no dependency on Sales Person. \n * Parameters:   \n *  @StartDate  - The start date of the Orders table \n *  @EndDate  - The end date of Orders table \n * Example on how to execute: \n *  EXEC dbo.usp_AnalyzeOrdersUsingAnova \n *     @StartDate = '20150101' \n *    ,@EndDate = '20151231' \n *****************************************************************/ \nAS \nBEGIN  \n\n  DECLARE @input_query NVARCHAR(MAX);  \n  DECLARE @RAOV NVARCHAR(MAX); \n\n  -- The SQL query representing Input data set. \n  -- Get the monthly orders from each Sales between  \n  -- specific date and time. \n  SET @input_query = N' \n  SELECT \n    DATEFROMPARTS(YEAR(o.[OrderDate]),  \n       MONTH(o.[OrderDate]), 1) AS OrderMonth, \n    sp.[PreferredName] AS SalesPerson, \n    COUNT(DISTINCT o.[OrderID]) AS OrderCount, \n    SUM(ol.[Quantity] * ol.[UnitPrice]) AS TotalAmount \n  FROM [Sales].[Orders] o \n    INNER JOIN[Sales] .[OrderLines] ol \n      ON ol.[OrderID] = o.[OrderID] \n    INNER JOIN[Application] .[People] sp \n      ON sp.[PersonID] = o.[SalespersonPersonID] \n  WHERE sp.[ValidTo] >= GETDATE() \n    AND o.[OrderDate] BETWEEN ''' +  \nCAST(@StartDate AS VARCHAR(30)) + ''' AND ''' + \nCAST(@EndDate AS VARCHAR(30)) + ''' \n  GROUP BY \n    DATEFROMPARTS(YEAR(o.[OrderDate]),  \n      MONTH(o.[OrderDate]), 1), \n    sp.[PreferredName];' \n\n  -- The R code that tests if Total Amount has no strong  \n  -- dependency to Sales Person \n  -- Note: Null Hypothesis (H0) in this case is Total Amount  \n  --    has no strong dependency to Sales Person. \n  --    The closer p-value to 0 we can reject the H0\\. \n  SET @RAOV = N'a = aov(TotalAmount ~ SalesPerson, \n data = InputDataSet); \n    m <- summary(a); \n    library(plyr); \n    x <- data.frame(RowID = 1:nrow(m[[1]]),  \n      Attribute = rownames(m[[1]])); \n    OutputDataSet <- cbind(x, ldply(m, data.frame));' \n\n  -- Using R Services produce the output as a table \n  EXEC sp_execute_external_script @language = N'R' \n    ,@script = @RAOV  \n    ,@input_data_1 = @input_query \n    ,@input_data_1_name = N'InputDataSet' \n    ,@output_data_1_name = N'OutputDataSet'  \n    WITH RESULT SETS (([RowID]  INT, \n          [Attribute]  NVARCHAR(50),  \n          [DF]    NUMERIC(20,10), \n          [SumSq]  NUMERIC(20,10), \n          [MeanSq]  NUMERIC(20,10), \n          [FValue]  FLOAT, \n          [Pr(>F)]  FLOAT \n          )); \n\nEND \n```", "```py\nEXEC dbo.usp_AnalyzeOrdersUsingAnova \n```", "```py\n=\"Since the p-value of \" & Fields!Pr__F_.Value & \" is \" & IIf(Fields!Pr__F_.Value < 0.05, \"less\", \"greater\") & \" than the .05 significance level, we \" & IIf(Fields!Pr__F_.Value < 0.05, \"reject\", \"accept\") & \" the null hypothesis that the mean of monthly Total Amount of \" & Fields!Attribute.Value & \" are all equal. This means that there is \" &  IIf(Fields!Pr__F_.Value < 0.05, \"\", \"no\") & \" dependency between \" & First(Fields!Attribute.Value, \"AOV_SalesPerson\") & \" and Monthly Orders Total Amount\"\n```", "```py\n CREATE PROCEDURE dbo.usp_CreateMonthlySalesPlot \n( \n  @StartDate DATE = '20150101', \n  @EndDate DATE = '20151231' \n) \n/********************************************************** \n * Purpose: Determine if Monthly Orders (Total Amount in $)  \n *      has no dependency on Sales Person. \n * Parameter:   \n *  @StartDate  - Observation start date in the Orders table \n *  @EndDate  - Observation end date in the Orders table \n * Example on how to execute: \n *  EXEC dbo.usp_AnalyzeOrdersUsingAnova \n *     @StartDate = '20150101' \n *    ,@EndDate = '20151231' \n **********************************************************/ \nAS \nBEGIN  \n\n  DECLARE @input_query NVARCHAR(MAX);  \n  DECLARE @RPlot NVARCHAR(MAX); \n\n  -- The SQL query representing Input data set. \n  -- Get the monthly orders from each Sales between  \n    specfic date and time. \n  SET @input_query = N' \n  SELECT \n    DATEFROMPARTS(YEAR(o.[OrderDate]),  \n      MONTH(o.[OrderDate]), 1) AS OrderMonth, \n    sp.[PreferredName] AS SalesPerson, \n    COUNT(DISTINCT o.[OrderID]) AS OrderCount, \n    SUM(ol.[Quantity] * ol.[UnitPrice]) AS TotalAmount \n  FROM [Sales].[Orders] o \n    INNER JOIN [Sales] .[OrderLines] ol \n      ON ol.[OrderID] = o.[OrderID] \n    INNER JOIN [Application] .[People] sp \n      ON sp.[PersonID] = o.[SalespersonPersonID] \n  WHERE sp.[ValidTo] >= GETDATE() \n    AND o.[OrderDate] BETWEEN ''' +  \n      CAST(@StartDate AS VARCHAR(30)) +  \n      ''' AND ''' +  \n      CAST(@EndDate AS VARCHAR(30)) + ''' \n  GROUP BY \n    DATEFROMPARTS(YEAR(o.[OrderDate]), MONTH(o.[OrderDate]), 1), \n    sp.[PreferredName];' \n\n  -- The R code that produces the plot. \n  SET @RPlot = N'library(ggplot2);  \n  image_file = tempfile();  \n  jpeg(filename = image_file, width=600, height=800);  \n  a <- qplot(y = TotalAmount, x = OrderMonth,  \n        data = InputDataSet, \n        color = SalesPerson,  \n        facets = ~SalesPerson, \n        main = \"Monthly Orders\"); \n  a + scale_x_date(date_labels = \"%b\");     \n  plot(a); \n  dev.off();  \n  OutputDataSet <-  data.frame( \n    data=readBin(file(image_file,\"rb\"), \n    what=raw(),n=1e6));   \n' \n  EXEC sp_execute_external_script @language = N'R' \n    ,@script = @RPlot  \n    ,@input_data_1 = @input_query \n    ,@input_data_1_name = N'InputDataSet' \n    ,@output_data_1_name = N'OutputDataSet'  \n    WITH RESULT SETS (( [plot] VARBINARY(MAX))); \n\nEND \n```", "```py\nEXEC dbo.usp_CreateMonthlySalesPlot\n```", "```py\nSELECT \n    DATEFROMPARTS(YEAR(o.[OrderDate]), \n    MONTH(o.[OrderDate]), 1) AS OrderMonth, \n    sp.[PreferredName] AS SalesPerson, \n    COUNT(DISTINCT o.[OrderID]) AS OrderCount, \n    SUM(ol.[Quantity] * ol.[UnitPrice]) AS TotalAmount \nFROM [Sales].[Orders] o \n    INNER JOIN[Sales] .[OrderLines] ol \n        ON ol.[OrderID] = o.[OrderID] \n    INNER JOIN[Application] .[People] sp \n        ON sp.[PersonID] = o.[SalespersonPersonID] \nWHERE sp.[ValidTo] >= GETDATE() \nGROUP BY \n    DATEFROMPARTS(YEAR(o.[OrderDate]), MONTH(o.[OrderDate]), 1), \n    sp.[PreferredName]; \n```", "```py\ndataset$OrderMonth <- as.Date(dataset$OrderMonth); \n\nlibrary(ggplot2); \na <- qplot(y = TotalAmount, x = OrderMonth, data = dataset, \n        color = SalesPerson, facets = ~SalesPerson, \n        main = \"Monthly Orders\"); \na + scale_x_date(date_labels = \"%b\"); \na + scale_y_continuous(label = scales::dollar);\n```"]