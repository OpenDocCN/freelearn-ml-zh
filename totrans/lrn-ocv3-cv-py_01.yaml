- en: Chapter 1. Setting Up OpenCV
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You picked up this book so you may already have an idea of what OpenCV is. Maybe,
    you heard of Sci-Fi-sounding features, such as face detection, and got intrigued.
    If this is the case, you've made the perfect choice. **OpenCV** stands for **Open
    Source Computer Vision**. It is a free computer vision library that allows you
    to manipulate images and videos to accomplish a variety of tasks from displaying
    the feed of a webcam to potentially teaching a robot to recognize real-life objects.
  prefs: []
  type: TYPE_NORMAL
- en: In this book, you will learn to leverage the immense potential of OpenCV with
    the Python programming language. Python is an elegant language with a relatively
    shallow learning curve and very powerful features. This chapter is a quick guide
    to setting up Python 2.7, OpenCV, and other related libraries. After setup, we
    also look at OpenCV's Python sample scripts and documentation.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you wish to skip the installation process and jump right into action, you
    can download the **virtual machine** (**VM**) I've made available at [http://techfort.github.io/pycv/](http://techfort.github.io/pycv/).
  prefs: []
  type: TYPE_NORMAL
- en: This file is compatible with VirtualBox, a free-to-use virtualization application
    that lets you build and run VMs. The VM I've built is based on Ubuntu Linux 14.04
    and has all the necessary software installed so that you can start coding right
    away.
  prefs: []
  type: TYPE_NORMAL
- en: This VM requires at least 2 GB of RAM to run smoothly, so make sure that you
    allocate at least 2 (but, ideally, more than 4) GB of RAM to the VM, which means
    that your host machine will need at least 6 GB of RAM to sustain it.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following related libraries are covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '**NumPy**: This library is a dependency of OpenCV''s Python bindings. It provides
    numeric computing functionality, including efficient arrays.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SciPy**: This library is a scientific computing library that is closely related
    to NumPy. It is not required by OpenCV, but it is useful for manipulating data
    in OpenCV images.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**OpenNI**: This library is an optional dependency of OpenCV. It adds the support
    for certain depth cameras, such as Asus XtionPRO.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SensorKinect**: This library is an OpenNI plugin and optional dependency
    of OpenCV. It adds support for the Microsoft Kinect depth camera.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For this book's purposes, OpenNI and SensorKinect can be considered optional.
    They are used throughout [Chapter 4](part0036.xhtml#aid-12AK81 "Chapter 4. Depth
    Estimation and Segmentation"), *Depth Estimation and Segmentation*, but are not
    used in the other chapters or appendices.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This book focuses on OpenCV 3, the new major release of the OpenCV library.
    All additional information about OpenCV is available at [http://opencv.org](http://opencv.org),
    and its documentation is available at [http://docs.opencv.org/master](http://docs.opencv.org/master).
  prefs: []
  type: TYPE_NORMAL
- en: Choosing and using the right setup tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are free to choose various setup tools, depending on our operating system
    and how much configuration we want to do. Let's take an overview of the tools
    for Windows, Mac, Ubuntu, and other Unix-like systems.
  prefs: []
  type: TYPE_NORMAL
- en: Installation on Windows
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Windows does not come with Python preinstalled. However, installation wizards
    are available for precompiled Python, NumPy, SciPy, and OpenCV. Alternatively,
    we can build from a source. OpenCV's build system uses CMake for configuration
    and either Visual Studio or MinGW for compilation.
  prefs: []
  type: TYPE_NORMAL
- en: If we want support for depth cameras, including Kinect, we should first install
    OpenNI and SensorKinect, which are available as precompiled binaries with installation
    wizards. Then, we must build OpenCV from a source.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The precompiled version of OpenCV does not offer support for depth cameras.
  prefs: []
  type: TYPE_NORMAL
- en: On Windows, OpenCV 2 offers better support for 32-bit Python than 64-bit Python;
    however, with the majority of computers sold today being 64-bit systems, our instructions
    will refer to 64-bit. All installers have 32-bit versions available from the same
    site as the 64-bit.
  prefs: []
  type: TYPE_NORMAL
- en: Some of the following steps refer to editing the system's `PATH` variable. This
    task can be done in the **Environment Variables** window of **Control Panel**.
  prefs: []
  type: TYPE_NORMAL
- en: On Windows Vista / Windows 7 / Windows 8, click on the **Start** menu and launch
    **Control Panel**. Now, navigate to **System** and **Security** | **System** |
    **Advanced system settings**. Click on the **Environment Variables…** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On Windows XP, click on the **Start** menu and navigate to **Control Panel**
    | **System**. Select the **Advanced** tab. Click on the **Environment Variables…**
    button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, under **System variables**, select **Path** and click on the **Edit…**
    button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make changes as directed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To apply the changes, click on all the **OK** buttons (until we are back in
    the main window of **Control Panel**).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, log out and log back in (alternatively, reboot).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using binary installers (no support for depth cameras)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can choose to install Python and its related libraries separately if you
    prefer; however, there are Python distributions that come with installers that
    will set up the entire SciPy stack (which includes Python and NumPy), which make
    it very trivial to set up the development environment.
  prefs: []
  type: TYPE_NORMAL
- en: One such distribution is Anaconda Python (downloadable at [http://09c8d0b2229f813c1b93­c95ac804525aac4b6dba79b00b39d1d3.r79.cf1.rackcdn.com/Anaconda-2.1.0­Windows-x86_64.exe](http://09c8d0b2229f813c1b93%C2%ADc95ac804525aac4b6dba79b00b39d1d3.r79.cf1.rackcdn.com/Anaconda-2.1.0%C2%ADWindows-x86_64.exe)).
    Once the installer is downloaded, run it and remember to add the path to the Anaconda
    installation to your `PATH` variable following the preceding procedure.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the steps to set up Python7, NumPy, SciPy, and OpenCV:'
  prefs: []
  type: TYPE_NORMAL
- en: Download and install the 32-bit Python 2.7.9 from [https://www.python.org/ftp/python/2.7.9/python-2.7.9.amd64.msi](https://www.python.org/ftp/python/2.7.9/python-2.7.9.amd64.msi).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download and install NumPy 1.6.2 from [http://www.lfd.uci.edu/~gohlke/pythonlibs/#numpyhttp://sourceforge.net/projects/numpy/files/NumPy/1.6.2/numpy-1.6.2-win32-superpack-python2.7.exe/download](http://www.lfd.uci.edu/~gohlke/pythonlibs/#numpyhttp://sourceforge.net/projects/numpy/files/NumPy/1.6.2/numpy-1.6.2-win32-superpack-python2.7.exe/download)
    (note that installing NumPy on Windows 64-bit is a bit tricky due to the lack
    of a 64-bit Fortran compiler on Windows, which NumPy depends on. The binary at
    the preceding link is unofficial).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download and install SciPy 11.0 from [http://www.lfd.uci.edu/~gohlke/pythonlibs/#scipyhttp://sourceforge.net/projects/scipy/files/scipy/0.11.0/scipy-0.11.0­win32-superpack-python2.7.exe/download](http://www.lfd.uci.edu/~gohlke/pythonlibs/#scipyhttp://sourceforge.net/projects/scipy/files/scipy/0.11.0/scipy-0.11.0%C2%ADwin32-superpack-python2.7.exe/download)
    (this is the same as NumPy and these are community installers).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download the self-extracting ZIP of OpenCV 3.0.0 from [https://github.com/Itseez/opencv](https://github.com/Itseez/opencv).
    Run this ZIP, and when prompted, enter a destination folder, which we will refer
    to as `<unzip_destination>`. A subfolder, `<unzip_destination>\opencv`, is created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy `<unzip_destination>\opencv\build\python\2.7\cv2.pyd` to `C:\Python2.7\Lib\site-packages`
    (assuming that we had installed Python 2.7 to the default location). If you installed
    Python 2.7 with Anaconda, use the Anaconda installation folder instead of the
    default Python installation. Now, the new Python installation can find OpenCV.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A final step is necessary if we want Python scripts to run using the new Python
    installation by default. Edit the system's `PATH` variable and append `;C:\Python2.7`
    (assuming that we had installed Python 2.7 to the default location) or your Anaconda
    installation folder. Remove any previous Python paths, such as `;C:\Python2.6`.
    Log out and log back in (alternatively, reboot).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using CMake and compilers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Windows does not come with any compilers or CMake. We need to install them.
    If we want support for depth cameras, including Kinect, we also need to install
    OpenNI and SensorKinect.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s assume that we have already installed 32-bit Python 2.7, NumPy, and
    SciPy either from binaries (as described previously) or from a source. Now, we
    can proceed with installing compilers and CMake, optionally installing OpenNI
    and SensorKinect, and then building OpenCV from the source:'
  prefs: []
  type: TYPE_NORMAL
- en: Download and install CMake 3.1.2 from [http://www.cmake.org/files/v3.1/cmake-3.1.2-win32-x86.exe](http://www.cmake.org/files/v3.1/cmake-3.1.2-win32-x86.exe).
    When running the installer, select either **Add CMake to the system PATH for all
    users** or **Add CMake to the system PATH for current user**. Don't worry about
    the fact that a 64-bit version of CMake is not available CMake is only a configuration
    tool and does not perform any compilations itself. Instead, on Windows, it creates
    project files that can be opened with Visual Studio.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download and install Microsoft Visual Studio 2013 (the Desktop edition if you
    are working on Windows 7) from [https://www.visualstudio.com/products/free-developer-offers-vs.aspx?slcid=0x409&type=web
    or MinGW](https://www.visualstudio.com/products/free-developer-offers-vs.aspx?slcid=0x409&type=web%20or%20MinGW).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note that you will need to sign in with your Microsoft account and if you don't
    have one, you can create one on the spot. Install the software and reboot after
    installation is complete.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: For MinGW, get the installer from [http://sourceforge.net/projects/mingw/files/Installer/mingw-get-setup.exe/download](http://sourceforge.net/projects/mingw/files/Installer/mingw-get-setup.exe/download)
    and [http://sourceforge.net/projects/mingw/files/OldFiles/mingw-get-inst/mingw-get-inst-20120426/mingw-get-inst-20120426.exe/download](http://sourceforge.net/projects/mingw/files/OldFiles/mingw-get-inst/mingw-get-inst-20120426/mingw-get-inst-20120426.exe/download).
    When running the installer, make sure that the destination path does not contain
    spaces and that the optional C++ compiler is included. Edit the system's `PATH`
    variable and append `;C:\MinGW\bin` (assuming that MinGW is installed to the default
    location). Reboot the system.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Optionally, download and install OpenNI 1.5.4.0 from the links provided in the
    GitHub homepage of OpenNI at [https://github.com/OpenNI/OpenNI](https://github.com/OpenNI/OpenNI).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can download and install SensorKinect 0.93 from [https://github.com/avin2/SensorKinect/blob/unstable/Bin/SensorKinect093-Bin-Win32-v5.1.2.1.msi?raw=true](https://github.com/avin2/SensorKinect/blob/unstable/Bin/SensorKinect093-Bin-Win32-v5.1.2.1.msi?raw=true)
    (32-bit). Alternatively, for 64-bit Python, download the setup from [https://github.com/avin2/SensorKinect/blob/unstable/Bin/SensorKinect093-Bin-Win64-v5.1.2.1.msi?raw=true](https://github.com/avin2/SensorKinect/blob/unstable/Bin/SensorKinect093-Bin-Win64-v5.1.2.1.msi?raw=true)
    (64-bit). Note that this repository has been inactive for more than three years.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download the self-extracting ZIP of OpenCV 3.0.0 from [https://github.com/Itseez/opencv](https://github.com/Itseez/opencv).
    Run the self-extracting ZIP, and when prompted, enter any destination folder,
    which we will refer to as `<unzip_destination>`. A subfolder, `<unzip_destination>\opencv`,
    is then created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open Command Prompt and make another folder where our build will go using this
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Change the directory of the `build` folder:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, we are ready to configure our build. To understand all the options, we
    can read the code in `<unzip_destination>\opencv\CMakeLists.txt`. However, for
    this book's purposes, we only need to use the options that will give us a release
    build with Python bindings, and optionally, depth camera support via OpenNI and
    SensorKinect.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open CMake (`cmake-gui`) and specify the location of the source code of OpenCV
    and the folder where you would like to build the library. Click on **Configure**.
    Select the project to be generated. In this case, select Visual Studio 12 (which
    corresponds to Visual Studio 2013). After CMake has finished configuring the project,
    it will output a list of build options. If you see a red background, it means
    that your project may need to be reconfigured: CMake might report that it has
    failed to find some dependencies. Many of OpenCV''s dependencies are optional,
    so do not be too concerned yet.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: If the build fails to complete or you run into problems later, try installing
    missing dependencies (often available as prebuilt binaries), and then rebuild
    OpenCV from this step.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You have the option of selecting/deselecting build options (according to the
    libraries you have installed on your machine) and click on **Configure** again,
    until you get a clear background (white).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: At the end of this process, you can click on **Generate**, which will create
    an `OpenCV.sln` file in the folder you've chosen for the build. You can then navigate
    to `<build_folder>/OpenCV.sln` and open the file with Visual Studio 2013, and
    proceed with building the project, `ALL_BUILD`. You will need to build both the
    **Debug** and **Release** versions of OpenCV, so go ahead and build the library
    in the **Debug** mode, then select **Release** and rebuild it (*F7* is the key
    to launch the build).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At this stage, you will have a `bin` folder in the OpenCV build directory, which
    will contain all the generated `.dll` files that will allow you to include OpenCV
    in your projects.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Alternatively, for MinGW, run the following command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If OpenNI is not installed, omit `-D:WITH_OPENNI=ON`. (In this case, depth cameras
    will not be supported.) If OpenNI and SensorKinect are installed to nondefault
    locations, modify the command to include `-D:OPENNI_LIB_DIR=<openni_install_destination>\Lib
    -D:OPENNI_INCLUDE_DIR=<openni_install_destination>\Include -D:OPENNI_PRIME_SENSOR_MODULE_BIN_DIR=<sensorkinect_install_destination>\Sensor\Bin`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Alternatively, for MinGW, run this command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Copy `<build_folder>\lib\Release\cv2.pyd` (from a Visual Studio build) or `<build_folder>\lib\cv2.pyd`
    (from a MinGW build) to `<python_installation_folder>\site-packages`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, edit the system's `PATH` variable and append `;<build_folder>/bin/Release`
    (for a Visual Studio build) or `;<build_folder>/bin` (for a MinGW build). Reboot
    your system.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Installing on OS X
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Some versions of Mac used to come with a version of Python 2.7 preinstalled
    that were customized by Apple for a system's internal needs. However, this has
    changed and the standard version of OS X ships with a standard installation of
    Python. On [python.org](http://python.org), you can also find a universal binary
    that is compatible with both the new Intel systems and the legacy PowerPC.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can obtain this installer at [https://www.python.org/downloads/release/python-279/](https://www.python.org/downloads/release/python-279/)
    (refer to the Mac OS X 32-bit PPC or the Mac OS X 64-bit Intel links). Installing
    Python from the downloaded `.dmg` file will simply overwrite your current system
    installation of Python.
  prefs: []
  type: TYPE_NORMAL
- en: For Mac, there are several possible approaches for obtaining standard Python
    2.7, NumPy, SciPy, and OpenCV. All approaches ultimately require OpenCV to be
    compiled from a source using Xcode Developer Tools. However, depending on the
    approach, this task is automated for us in various ways by third-party tools.
    We will look at these kinds of approaches using MacPorts or Homebrew. These tools
    can potentially do everything that CMake can, plus they help us resolve dependencies
    and separate our development libraries from system libraries.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: I recommend MacPorts, especially if you want to compile OpenCV with depth camera
    support via OpenNI and SensorKinect. Relevant patches and build scripts, including
    some that I maintain, are ready-made for MacPorts. By contrast, Homebrew does
    not currently provide a ready-made solution to compile OpenCV with depth camera
    support.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before proceeding, let''s make sure that the Xcode Developer Tools are properly
    set up:'
  prefs: []
  type: TYPE_NORMAL
- en: Download and install Xcode from the Mac App Store or [https://developer.apple.com/xcode/downloads/](https://developer.apple.com/xcode/downloads/).
    During installation, if there is an option to install **Command Line Tools**,
    select it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open Xcode and accept the license agreement.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A final step is necessary if the installer does not give us the option to install
    **Command Line Tools**. Navigate to **Xcode** | **Preferences** | **Downloads**,
    and click on the **Install** button next to **Command Line Tools**. Wait for the
    installation to finish and quit Xcode.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Alternatively, you can install Xcode command-line tools by running the following
    command (in the terminal):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Now, we have the required compilers for any approach.
  prefs: []
  type: TYPE_NORMAL
- en: Using MacPorts with ready-made packages
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We can use the MacPorts package manager to help us set up Python 2.7, NumPy,
    and OpenCV. MacPorts provides terminal commands that automate the process of downloading,
    compiling, and installing various pieces of **open source software** (**OSS**).
    MacPorts also installs dependencies as needed. For each piece of software, the
    dependencies and build recipes are defined in a configuration file called a Portfile.
    A MacPorts repository is a collection of **Portfiles**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Starting from a system where Xcode and its command-line tools are already set
    up, the following steps will give us an OpenCV installation via MacPorts:'
  prefs: []
  type: TYPE_NORMAL
- en: Download and install MacPorts from [http://www.macports.org/install.php](http://www.macports.org/install.php).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you want support for the Kinect depth camera, you need to tell MacPorts
    where to download the custom Portfiles that I have written. To do so, edit `/opt/local/etc/macports/sources.conf`
    (assuming that MacPorts is installed to the default location). Just above the
    line, `rsync://rsync.macports.org/release/ports/ [default]`, add the following
    line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save the file. Now, MacPorts knows that it has to search for Portfiles in my
    online repository first, and then the default online repository.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open the terminal and run the following command to update MacPorts:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: When prompted, enter your password.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now (if we are using my repository), run the following command to install OpenCV
    with Python 2.7 bindings and support for depth cameras, including Kinect:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Alternatively (with or without my repository), run the following command to
    install OpenCV with Python 2.7 bindings and support for depth cameras, excluding
    Kinect:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Dependencies, including Python 2.7, NumPy, OpenNI, and (in the first example)
    SensorKinect, are automatically installed as well.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'By adding `+python27` to the command, we specify that we want the `opencv`
    variant (build configuration) with Python 2.7 bindings. Similarly, `+openni_sensorkinect`
    specifies the variant with the broadest possible support for depth cameras via
    OpenNI and SensorKinect. You may omit `+openni_sensorkinect` if you do not intend
    to use depth cameras, or you may replace it with `+openni` if you do intend to
    use OpenNI-compatible depth cameras but just not Kinect. To see the full list
    of the available variants before installing, we can enter the following command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Depending on our customization needs, we can add other variants to the `install`
    command. For even more flexibility, we can write our own variants (as described
    in the next section).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Also, run the following command to install SciPy:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The Python installation''s executable is named `python2.7`. If we want to link
    the default `python` executable to `python2.7`, let''s also run this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Using MacPorts with your own custom packages
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: With a few extra steps, we can change the way that MacPorts compiles OpenCV
    or any other piece of software. As previously mentioned, MacPorts' build recipes
    are defined in configuration files called Portfiles. By creating or editing Portfiles,
    we can access highly configurable build tools, such as CMake, while also benefitting
    from MacPorts' features, such as dependency resolution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s assume that we already have MacPorts installed. Now, we can configure
    MacPorts to use the custom Portfiles that we write:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a folder somewhere to hold our custom Portfiles. We will refer to this
    folder as `<local_repository>`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Edit the `/opt/local/etc/macports/sources.conf` file (assuming that MacPorts
    is installed to the default location). Just above the `rsync://rsync.macports.org/release/ports/
    [default]` line, add this line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For example, if `<local_repository>` is `/Users/Joe/Portfiles`, add the following
    line:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note the triple slashes and save the file. Now, MacPorts knows that it has to
    search for Portfiles in `<local_repository>` first, and then, its default online
    repository.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open the terminal and update MacPorts to ensure that we have the latest Portfiles
    from the default repository:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let''s copy the default repository''s `opencv` Portfile as an example. We should
    also copy the directory structure, which determines how the package is categorized
    by MacPorts:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Alternatively, for an example that includes Kinect support, we could download
    my online repository from [http://nummist.com/opencv/ports.tar.gz](http://nummist.com/opencv/ports.tar.gz),
    unzip it, and copy its entire `graphics` folder into `<local_repository>`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Edit `<local_repository>/graphics/opencv/Portfile`. Note that this file specifies
    the CMake configuration flags, dependencies, and variants. For details on the
    Portfile editing, go to [http://guide.macports.org/#development](http://guide.macports.org/#development).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To see which CMake configuration flags are relevant to OpenCV, we need to look
    at its source code. Download the source code archive from [https://github.com/Itseez/opencv/archive/3.0.0.zip](https://github.com/Itseez/opencv/archive/3.0.0.zip),
    unzip it to any location, and read `<unzip_destination>/OpenCV-3.0.0/CMakeLists.txt`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: After making any edits to the Portfile, save it.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, we need to generate an index file in our local repository so that MacPorts
    can find the new Portfile:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'From now on, we can treat our custom `opencv` file just like any other MacPorts
    package. For example, we can install it as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note that our local repository's Portfile takes precedence over the default
    repository's Portfile because of the order in which they are listed in `/opt/local/etc/macports/sources.conf`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Using Homebrew with ready-made packages (no support for depth cameras)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Homebrew is another package manager that can help us. Normally, MacPorts and
    Homebrew should not be installed on the same machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'Starting from a system where Xcode and its command-line tools are already set
    up, the following steps will give us an OpenCV installation via Homebrew:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the terminal and run the following command to install Homebrew:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Unlike MacPorts, Homebrew does not automatically put its executables in `PATH`.
    To do so, create or edit the `~/.profile` file and add this line at the top of
    the code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Save the file and run this command to refresh `PATH`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note that executables installed by Homebrew now take precedence over executables
    installed by the system.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'For Homebrew''s self-diagnostic report, run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Follow any troubleshooting advice it gives.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, update Homebrew:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the following command to install Python 2.7:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we can install NumPy. Homebrew''s selection of the Python library packages
    is limited, so we use a separate package management tool called `pip`, which comes
    with Homebrew''s Python:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'SciPy contains some Fortran code, so we need an appropriate compiler. We can
    use Homebrew to install the `gfortran` compiler:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we can install SciPy:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To install OpenCV on a 64-bit system (all new Mac hardware since late 2006),
    run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Downloading the example code**'
  prefs: []
  type: TYPE_NORMAL
- en: You can download the example code files for all Packt Publishing books that
    you have purchased from your account at [http://www.packtpub.com](http://www.packtpub.com).
    If you purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: Using Homebrew with your own custom packages
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Homebrew makes it easy to edit existing package definitions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: The package definitions are actually scripts in the Ruby programming language.
    Tips on editing them can be found on the Homebrew Wiki page at [https://github.com/mxcl/homebrew/wiki/Formula-Cookbook](https://github.com/mxcl/homebrew/wiki/Formula-Cookbook).
    A script may specify Make or CMake configuration flags, among other things.
  prefs: []
  type: TYPE_NORMAL
- en: To see which CMake configuration flags are relevant to OpenCV, we need to look
    at its source code. Download the source code archive from [https://github.com/Itseez/opencv/archive/3.0.0.zip](https://github.com/Itseez/opencv/archive/3.0.0.zip),
    unzip it to any location, and read `<unzip_destination>/OpenCV-2.4.3/CMakeLists.txt`.
  prefs: []
  type: TYPE_NORMAL
- en: After making edits to the Ruby script, save it.
  prefs: []
  type: TYPE_NORMAL
- en: 'The customized package can be treated as normal. For example, it can be installed
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Installation on Ubuntu and its derivatives
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First and foremost, here is a quick note on Ubuntu''s versions of an operating
    system: Ubuntu has a 6-month release cycle in which each release is either a .04
    or a .10 minor version of a major version (14 at the time of writing). Every two
    years, however, Ubuntu releases a version classified as **long-term support**
    (**LTS**) which will grant you a five year support by Canonical (the company behind
    Ubuntu). If you work in an enterprise environment, it is certainly advisable to
    install one of the LTS versions. The latest one available is 14.04.'
  prefs: []
  type: TYPE_NORMAL
- en: Ubuntu comes with Python 2.7 preinstalled. The standard Ubuntu repository contains
    OpenCV 2.4.9 packages without support for depth cameras. At the time of writing
    this, OpenCV 3 is not yet available through the Ubuntu repositories, so we will
    have to build it from source. Fortunately, the vast majority of Unix-like and
    Linux systems come with all the necessary software to build a project from scratch
    already installed. When built from source, OpenCV can support depth cameras via
    OpenNI and SensorKinect, which are available as precompiled binaries with installation
    scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Ubuntu repository (no support for depth cameras)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We can install Python and all its necessary dependencies using the `apt` package
    manager, by running the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Equivalently, we could have used Ubuntu Software Center, which is the `apt`
    package manager's graphical frontend.
  prefs: []
  type: TYPE_NORMAL
- en: Building OpenCV from a source
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now that we have the entire Python stack and `cmake` installed, we can build
    OpenCV. First, we need to download the source code from [https://github.com/Itseez/opencv/archive/3.0.0-beta.zip](https://github.com/Itseez/opencv/archive/3.0.0-beta.zip).
  prefs: []
  type: TYPE_NORMAL
- en: Extract the archive and move it into the unzipped folder in a terminal.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, run the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: After the installation terminates, you might want to look at OpenCV's Python
    samples in `<opencv_folder>/opencv/samples/python` and `<script_folder>/opencv/samples/python2`.
  prefs: []
  type: TYPE_NORMAL
- en: Installation on other Unix-like systems
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The approaches for Ubuntu (as described previously) are likely to work on any
    Linux distribution derived from Ubuntu 14.04 LTS or Ubuntu 14.10 as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Kubuntu 14.04 LTS or Kubuntu 14.10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Xubuntu 14.04 LTS or Xubuntu 14.10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Linux Mint 17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On Debian Linux and its derivatives, the `apt` package manager works the same
    as on Ubuntu, though the available packages may differ.
  prefs: []
  type: TYPE_NORMAL
- en: On Gentoo Linux and its derivatives, the Portage package manager is similar
    to MacPorts (as described previously), though the available packages may differ.
  prefs: []
  type: TYPE_NORMAL
- en: On FreeBSD derivatives, the process of installation is again similar to MacPorts;
    in fact, MacPorts derives from the `ports` installation system adopted on FreeBSD.
    Consult the remarkable FreeBSD Handbook at [https://www.freebsd.org/doc/handbook/](https://www.freebsd.org/doc/handbook/)
    for an overview of the software installation process.
  prefs: []
  type: TYPE_NORMAL
- en: On other Unix-like systems, the package manager and available packages may differ.
    Consult your package manager's documentation and search for packages with `opencv`
    in their names. Remember that OpenCV and its Python bindings might be split into
    multiple packages.
  prefs: []
  type: TYPE_NORMAL
- en: Also, look for any installation notes published by the system provider, the
    repository maintainer, or the community. Since OpenCV uses camera drivers and
    media codecs, getting all of its functionality to work can be tricky on systems
    with poor multimedia support. Under some circumstances, system packages might
    need to be reconfigured or reinstalled for compatibility.
  prefs: []
  type: TYPE_NORMAL
- en: If packages are available for OpenCV, check their version number. OpenCV 3 or
    higher is recommended for this book's purposes. Also, check whether the packages
    offer Python bindings and depth camera support via OpenNI and SensorKinect. Finally,
    check whether anyone in the developer community has reported success or failure
    in using the packages.
  prefs: []
  type: TYPE_NORMAL
- en: If, instead, we want to do a custom build of OpenCV from source, it might be
    helpful to refer to the installation script for Ubuntu (as discussed previously)
    and adapt it to the package manager and packages that are present on another system.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the Contrib modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Unlike with OpenCV 2.4, some modules are contained in a repository called `opencv_contrib`,
    which is available at [https://github.com/Itseez/opencv_contrib](https://github.com/Itseez/opencv_contrib).
    I highly recommend installing these modules as they contain extra functionalities
    that are not included in OpenCV, such as the face recognition module.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once downloaded (either through `zip` or `git`, I recommend `git` so that you
    can keep up to date with a simple `git pull` command), you can rerun your `cmake`
    command to include the building of OpenCV with the `opencv_contrib` modules as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'So, if you''ve followed the standard procedure and created a build directory
    in your OpenCV download folder, you should run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Running samples
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Running a few sample scripts is a good way to test whether OpenCV is correctly
    set up. The samples are included in OpenCV's source code archive.
  prefs: []
  type: TYPE_NORMAL
- en: On Windows, we should have already downloaded and unzipped OpenCV's self-extracting
    ZIP. Find the samples in `<unzip_destination>/opencv/samples`.
  prefs: []
  type: TYPE_NORMAL
- en: On Unix-like systems, including Mac, download the source code archive from [https://github.com/Itseez/opencv/archive/3.0.0.zip](https://github.com/Itseez/opencv/archive/3.0.0.zip)
    and unzip it to any location (if we have not already done so). Find the samples
    in `<unzip_destination>/OpenCV-3.0.0/samples`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of the sample scripts require command-line arguments. However, the following
    scripts (among others) should work without any arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: '`python/camera.py`: This script displays a webcam feed (assuming that a webcam
    is plugged in).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`python/drawing.py`: This script draws a series of shapes, such as a screensaver.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`python2/hist.py`: This script displays a photo. Press *A*, *B*, *C*, *D*,
    or *E* to see the variations of the photo along with a corresponding histogram
    of color or grayscale values.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`python2/opt_flow.py` (missing from the Ubuntu package): This script displays
    a webcam feed with a superimposed visualization of an optical flow (such as the
    direction of motion). For example, slowly wave your hand at the webcam to see
    the effect. Press *1* or *2* for alternative visualizations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To exit a script, press *Esc* (not the window's close button).
  prefs: []
  type: TYPE_NORMAL
- en: 'If we encounter the `ImportError: No module` named `cv2.cv` message, then this
    means that we are running the script from a Python installation that does not
    know anything about OpenCV. There are two possible explanations for this:'
  prefs: []
  type: TYPE_NORMAL
- en: Some steps in the OpenCV installation might have failed or been missed. Go back
    and review the steps.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If we have multiple Python installations on the machine, we might be using
    the wrong version of Python to launch the script. For example, on Mac, it might
    be the case that OpenCV is installed for MacPorts Python, but we are running the
    script with the system''s Python. Go back and review the installation steps about
    editing the system path. Also, try launching the script manually from the command
    line using commands such as this:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You can also use the following command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As another possible means of selecting a different Python installation, try
    editing the sample script to remove the `#!` lines. These lines might explicitly
    associate the script with the wrong Python installation (for our particular setup).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Finding documentation, help, and updates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: OpenCV's documentation can be found online at [http://docs.opencv.org/](http://docs.opencv.org/).
    The documentation includes a combined API reference for OpenCV's new C++ API,
    its new Python API (which is based on the C++ API), old C API, and its old Python
    API (which is based on the C API). When looking up a class or function, be sure
    to read the section about the new Python API (the `cv2` module), and not the old
    Python API (the `cv` module).
  prefs: []
  type: TYPE_NORMAL
- en: 'The documentation is also available as several downloadable PDF files:'
  prefs: []
  type: TYPE_NORMAL
- en: '**API reference**: This documentation can be found at [http://docs.opencv.org/modules/refman.html](http://docs.opencv.org/modules/refman.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Tutorials**: These documents can be found at [http://docs.opencv.org/doc/tutorials/tutorials.html](http://docs.opencv.org/doc/tutorials/tutorials.html)
    (these tutorials use the C++ code; for a Python port of the tutorials'' code,
    see the repository of Abid Rahman K. at [http://goo.gl/EPsD1](http://goo.gl/EPsD1))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you write code on airplanes or other places without Internet access, you
    will definitely want to keep offline copies of the documentation.
  prefs: []
  type: TYPE_NORMAL
- en: 'If the documentation does not seem to answer your questions, try talking to
    the OpenCV community. Here are some sites where you will find helpful people:'
  prefs: []
  type: TYPE_NORMAL
- en: '**The OpenCV forum**: [http://www.answers.opencv.org/questions/](http://www.answers.opencv.org/questions/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**David Millán Escrivá''s blog** (one of this book''s reviewers): [http://blog.damiles.com/](http://blog.damiles.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Abid Rahman K.''s blog** (one of this book''s reviewers): [http://www.opencvpython.blogspot.com/](http://www.opencvpython.blogspot.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Adrian Rosebrock''s website** (one of this book''s reviewers): [http://www.pyimagesearch.com/](http://www.pyimagesearch.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Joe Minichino''s website for this book** (author of this book): [http://techfort.github.io/pycv/](http://techfort.github.io/pycv/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Joe Howse''s website for this book** (author of the first edition of this
    book): [http://nummist.com/opencv/](http://nummist.com/opencv/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lastly, if you are an advanced user who wants to try new features, bug fixes,
    and sample scripts from the latest (unstable) OpenCV source code, have a look
    at the project's repository at [https://github.com/Itseez/opencv/](https://github.com/Itseez/opencv/).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By now, we should have an OpenCV installation that can do everything we need
    for the project described in this book. Depending on which approach we took, we
    might also have a set of tools and scripts that are usable to reconfigure and
    rebuild OpenCV for our future needs.
  prefs: []
  type: TYPE_NORMAL
- en: We know where to find OpenCV's Python samples. These samples covered a different
    range of functionalities outside this book's scope, but they are useful as additional
    learning aids.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will familiarize ourselves with the most basic functions
    of the OpenCV API, namely, displaying images, videos, capturing videos through
    a webcam, and handling basic keyboard and mouse inputs.
  prefs: []
  type: TYPE_NORMAL
