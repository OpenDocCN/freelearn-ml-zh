- en: '20'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '20'
- en: Increasing Efficiency with GitHub Copilot
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 利用 GitHub Copilot 提高效率
- en: Introduction
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: So far, you’ve been using the knowledge you were taught at the beginning of
    the book about GitHub Copilot and ChatGPT. This foundational knowledge was enough
    to teach you how to write prompts and accept them. It was also enough to let you
    start work on creating solutions for machine learning, data science, and web development.
    In the case of web development, you also discovered Copilot is an efficient tool
    when working with existing code bases. In this chapter, we want to take your AI
    tool knowledge to the next level, as there are more features that you may want
    to leverage.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你一直在使用书中开头介绍的关于 GitHub Copilot 和 ChatGPT 的知识。这些基础知识足以教你如何编写提示并接受它们。这也足以让你开始着手解决机器学习、数据科学和Web开发的问题。在Web开发的情况下，你也发现
    Copilot 在处理现有代码库时是一个高效的工具。在本章中，我们希望将你的AI工具知识提升到下一个层次，因为还有更多你可能想要利用的功能。
- en: There are a lot of things that can be done to increase efficiency; you will
    see later in the chapter how there are features within Copilot that let you scaffold
    files, and you will learn more about your workspace and even Visual Studio Code
    as an editor, which are all time-saving features. This chapter will cover some
    of the most important features.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 有很多方法可以提高效率；你将在本章后面看到，Copilot 中有一些功能可以让你构建文件，你还将了解更多关于你的工作空间，甚至作为编辑器的 Visual
    Studio Code 的信息，这些都是节省时间的功能。本章将介绍一些最重要的功能。
- en: 'In this chapter, we will:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将：
- en: Learn how to use Copilot to generate code.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习如何使用 Copilot 生成代码。
- en: Use Copilot commands to automate tasks, like generating a new project.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Copilot 命令来自动化任务，例如生成一个新项目。
- en: Apply techniques to debug and troubleshoot code.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用调试和故障排除代码的技术。
- en: Review and optimize code using Copilot.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Copilot 审查和优化代码。
- en: Code generation and automation
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代码生成和自动化
- en: At its core, Copilot is a code generator. It can generate text for you that
    is either part of documentation or source code.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在其核心，Copilot 是一个代码生成器。它可以为你生成文本，这些文本可以是文档或源代码的一部分。
- en: 'There are two primary ways to generate code with Copilot:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Copilot 生成代码有两种主要方式：
- en: Copilot’s active editor via prompts as comments.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过提示作为注释的 Copilot 活动编辑器。
- en: Copilot Chat, which lets you type in a prompt.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许你输入提示的 Copilot 聊天。
- en: Copilot’s active editor
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Copilot 的活动编辑器
- en: When you’re in the active editor, Copilot can generate code. To generate code,
    you need to write a prompt as a comment. There are different ways to add comments
    to your programming language code. In JavaScript and C#, for example, you use
    `//`, while you would type `<!--` if you’re in HTML.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在活动编辑器中时，Copilot 可以生成代码。要生成代码，你需要以注释的形式编写一个提示。在你的编程语言代码中添加注释有不同的方式。例如，在 JavaScript
    和 C# 中，你使用 `//`，而在 HTML 中你会输入 `<!--`。
- en: 'Let’s see an example of this:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看一个例子：
- en: '**[Prompt]**'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**[提示]**'
- en: Create a new function called add that takes two parameters.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为 add 的新函数，它接受两个参数。
- en: '**[End of prompt]**'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**[提示结束]**'
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Above, we have a prompt as a comment. Copilot looks at this prompt and attempts
    to generate code based on it. At this point, Copilot sends the generated code
    back as a “suggestion,” which you can accept using the `Tab` key. Here’s what
    it looks like in the editor:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 上面，我们有一个作为注释的提示。Copilot 会查看这个提示，并尝试根据它生成代码。在这个阶段，Copilot 会将生成的代码作为“建议”发送回来，你可以使用
    `Tab` 键接受它。在编辑器中看起来是这样的：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'At this point, you get no suggestions. You have a couple of options:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你没有收到任何建议。你有几个选择：
- en: You can press the `Return` key to get more suggestions.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以按 `Return` 键获取更多建议。
- en: Start typing part of the code you want to generate, and Copilot will suggest
    code based on what you type.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开始输入你想要生成的代码的一部分，Copilot 将根据你输入的内容建议代码。
- en: Copilot Chat
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Copilot 聊天
- en: Copilot Chat is a way to interact with Copilot using a chat interface. To activate
    Copilot Chat, click on the icon in the bottom-left corner of Visual Studio Code
    (or VS Code), which will open up a chat window.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: Copilot Chat 是一种通过聊天界面与 Copilot 交互的方式。要激活 Copilot Chat，点击 Visual Studio Code（或
    VS Code）左下角的图标，这将打开一个聊天窗口。
- en: '![](img/B21232_20_01.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21232_20_01.png)'
- en: 'Figure 20.1: Showing the left menu in Visual Studio Code with the “Chat” icon
    from Copilot Chat'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 图 20.1：显示 Visual Studio Code 中的 Copilot 聊天“聊天”图标左侧菜单
- en: Upon clicking the above chat icon, the below image will be shown.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 点击上面的聊天图标后，将显示下面的图片。
- en: '![Chat window](img/B21232_20_02.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![聊天窗口](img/B21232_20_02.png)'
- en: 'Figure 20.2: The image above shows the chat window that opens when you click
    the Chat icon in the left menu in Visual Studio Code'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 图 20.2：上图显示了您在 Visual Studio Code 左侧菜单中点击聊天图标时打开的聊天窗口
- en: 'Let’s try to generate some code based on the same prompt as before. Let’s use
    the input text field in the chat window and type in the prompt:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试根据之前的相同提示生成一些代码。让我们使用聊天窗口中的输入文本字段并输入提示：
- en: '**[Prompt]**'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '**[提示]**'
- en: Create a new function called add that takes two parameters
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为 add 的新函数，它接受两个参数
- en: '**[End of prompt]**'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '**[指令结束]**'
- en: 'The output comes in two parts, a text instruction and a code suggestion. First,
    the text instruction:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 输出分为两部分，一个是文本指令，另一个是代码建议。首先，文本指令：
- en: '**[Prompt response]**'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**[提示响应]**'
- en: 'Sure, here’s an example of a function called add that takes two parameters
    and returns their sum:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这是一个名为 add 的函数的示例，它接受两个参数并返回它们的和：
- en: '[PRE2]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**[End of response]**'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '**[响应结束]**'
- en: 'It even shows you an example of how to use the function:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 它甚至显示了如何使用该函数的示例：
- en: '[PRE3]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Copilot commands
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Copilot 命令
- en: If you start typing `/` in the chat window, you will see a list of commands
    that you can use with Copilot.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在聊天窗口中开始输入 `/`，您将看到可以使用 Copilot 的命令列表。
- en: '![](img/B21232_20_03.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21232_20_03.png)'
- en: 'Figure 20.3: Available commands'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 图 20.3：可用命令
- en: There are quite a few available commands, and we will focus on a few of them
    in this chapter.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 有很多可用的命令，在本章中我们将关注其中的一些。
- en: Creating a Notebook
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建笔记本
- en: With this command, you can create a new notebook. A notebook is a place where
    you can store code snippets and text. To create a notebook, type in `/newNotebook`,
    and also provide a name for the notebook, for example, `products`.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此命令，您可以创建一个新的笔记本。笔记本是一个您可以存储代码片段和文本的地方。要创建笔记本，请输入 `/newNotebook`，并为笔记本提供一个名称，例如，`products`。
- en: '![](img/B21232_20_04.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21232_20_04.png)'
- en: 'Figure 20.4: Creating a Notebook'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 图 20.4：创建笔记本
- en: The above image shows what’s displayed when you type the `/newNotebook` command;
    you’re asked to confirm the scaffolding of a notebook by clicking **Create Notebook**.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 上图显示了您输入 `/newNotebook` 命令时显示的内容；您需要通过点击 **创建笔记本** 来确认笔记本的框架。
- en: This will create a new notebook with commonly used code snippets for `products`.
    Let’s inspect the output next.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个包含 `products` 常用代码片段的新笔记本。接下来，让我们检查输出。
- en: 'Your notebook, at a high level, contains the following:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 您的笔记本，从高层次来看，包含以下内容：
- en: 'import, which contains all the imports needed to work with a dataset; here’s
    what the content looks like:'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导入，包含处理数据集所需的所有导入；内容如下所示：
- en: '[PRE4]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Load data, which contains code to load data from a CSV file (the CSV file `product_data.csv`
    doesn’t exist, but Copilot assumes that you have such a file; adjust this part
    of the code to fit the name of the CSV file that you do have):'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加载数据，包含从 CSV 文件（CSV 文件 `product_data.csv` 不存在，但 Copilot 假设您有这样一个文件；调整此部分的代码以适应您拥有的
    CSV 文件名称）加载数据的代码：
- en: '[PRE5]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Explore product data, which contains operations to inspect the data:'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索产品数据，包含检查数据的操作：
- en: '[PRE6]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Filter product data, which contains operations to filter the data:'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 过滤产品数据，包含过滤数据的操作：
- en: '[PRE7]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Sorting data, which contains sorting operations:'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据排序，包含排序操作：
- en: '[PRE8]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Aggregating data; often, you want to aggregate data to get a better understanding
    of it:'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据聚合；通常，您希望聚合数据以更好地理解它：
- en: '[PRE9]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In summary, that’s a lot of code you don’t have to write yourself. You can use
    this notebook as a starting point to work with product data.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，这些都是您不必自己编写的代码。您可以使用这个笔记本作为处理产品数据的起点。
- en: Creating a project
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建项目
- en: 'Another really useful command is being able to create a project. Usually, we
    either create files by hand, which takes time, or we rely on CLI tools to create
    projects for us. With Copilot, you can create a project by typing in `/new` in
    the chat window. To use the command, type `/new` and then provide a description
    for it, for example, **React**. This will create a new project with a React project
    template. Let’s inspect the output:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个非常有用的命令是能够创建项目。通常，我们要么手动创建文件，这需要时间，要么依赖 CLI 工具为我们创建项目。使用 Copilot，您可以在聊天窗口中输入
    `/new` 来创建项目。要使用此命令，请输入 `/new` 并为其提供描述，例如，**React**。这将创建一个带有 React 项目模板的新项目。让我们检查输出：
- en: '[PRE10]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The files created above are typical of what’s expected for a React project.
    It contains:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 上文创建的文件是 React 项目中预期的典型文件。它包含：
- en: '`public`, which contains the `index.html` file that references the JavaScript
    file indicating the location of your app.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`public`，其中包含`index.html`文件，该文件引用JavaScript文件，指示应用程序的位置。'
- en: '`src`, which contains all the application files and is itself divided into
    different folders for components, data, and CSS styles.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`src`，它包含所有应用程序文件，并且自身被分为不同的文件夹，用于组件、数据和CSS样式。'
- en: All of this constitutes a starting point. You might want to change files to
    fit your liking.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些构成了一个起点。你可能希望根据你的喜好更改文件。
- en: Debugging and troubleshooting
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调试和故障排除
- en: Being able to debug and troubleshoot code is an important skill to have. When
    you develop code, it seldom does what you need it to do the first time. You need
    to be able to debug and troubleshoot code to figure out what’s wrong with it.
    The same applies if you have a reported bug; you need to be able to diagnose at
    what point it goes wrong.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 能够调试和故障排除代码是一项重要的技能。当你开发代码时，它很少第一次就能做到你想要的效果。你需要能够调试和故障排除代码，以找出问题所在。如果你有一个报告的bug，也是如此；你需要能够诊断它在哪个点出错。
- en: Copilot can help, and a good approach is using Copilot chat and asking it to
    add support for debugging and troubleshooting.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: Copilot可以帮助，一个好的方法就是使用Copilot聊天，并要求它添加对调试和故障排除的支持。
- en: 'The following is a piece of sample code you’ve been given. It’s a REST API
    in the framework Flask for Python. It’s working code, but it might not be so easy
    to work with from a debugging and troubleshooting standpoint:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是你被给出的一个示例代码。这是一个用于Python的Flask框架中的REST API。这是一段可以工作的代码，但从调试和故障排除的角度来看可能并不容易使用：
- en: '[PRE11]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The above code works, but it doesn’t support debugging and troubleshooting;
    let’s see how we can add support for that by using Copilot Chat:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码可以工作，但它不支持调试和故障排除；让我们看看如何通过使用Copilot Chat来添加对该功能的支持：
- en: '**[Prompt]**'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '**[提示]**'
- en: Add support for troubleshooting and debugging
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 添加对故障排除和调试的支持
- en: '**[End of prompt]**'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '**[提示结束]**'
- en: 'Copilot chat answers us with both text and code:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: Copilot聊天以文本和代码的形式回答我们：
- en: '**[Prompt response]**'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '**[提示响应]**'
- en: 'Sure, here’s an updated version of the Flask API that includes support for
    troubleshooting and debugging:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这是一个包含故障排除和调试支持的Flask API更新版本：
- en: '[PRE12]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The improvements are:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 改进如下：
- en: Added a `try`/`except` block around the code in the `get_products()` function.
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`get_products()`函数中的代码周围添加了`try`/`except`块。
- en: Added `logger` statements to log errors.
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加了`logger`语句来记录错误。
- en: Added `debug=True` to the `app.run()` statement.
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`app.run()`语句中添加了`debug=True`。
- en: These changes will help us troubleshoot and debug the code.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这些更改将帮助我们进行故障排除和调试代码。
- en: '**[End of response]**'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '**[响应结束]**'
- en: Let’s look at how we can use Copilot to help us with code reviews and optimizations
    next.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何使用Copilot帮助我们进行代码审查和优化。
- en: Code review and optimization techniques
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代码审查和优化技术
- en: Right now, we have code that works, but it’s not optimized. For example, it’s
    usually a good idea to separate code into different files. Let’s see what Copilot
    suggests to improve the code.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们有一段可以工作的代码，但它还没有优化。例如，通常将代码分离到不同的文件中是一个好主意。让我们看看Copilot建议如何改进代码。
- en: '**[Prompt]**'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '**[提示]**'
- en: Improve the selected code
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 改进选定的代码
- en: '**[End of prompt]**'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '**[提示结束]**'
- en: 'As usual, we get the Copilot chat response in terms of text and code:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 如同往常，我们以文本和代码的形式获取Copilot聊天响应：
- en: '**[Prompt response]**'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '**[提示响应]**'
- en: 'Sure, here are some improvements you could make to the selected code:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，以下是对所选代码的一些改进建议：
- en: Use a context manager to handle the database connection and cursor. This ensures
    that the connection is properly closed when the code is finished executing, even
    if an exception occurs.
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用上下文管理器来处理数据库连接和游标。这确保了当代码执行完毕时，连接被正确关闭，即使发生异常也是如此。
- en: Use a list comprehension to convert the products to a JSON response. This is
    more concise and can be faster than using a for loop.
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用列表推导式将产品转换为JSON响应。这比使用for循环更简洁，可能更快。
- en: Use the json parameter of the Response object to return a JSON response. This
    is more concise than using the jsonify function.
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Response对象的json参数返回JSON响应。这比使用jsonify函数更简洁。
- en: Use the request.json attribute to retrieve the product data from the request
    body. This is a more concise and Pythonic way to do it.
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用request.json属性从请求体中检索产品数据。这是一种更简洁、更Pythonic的方法。
- en: 'and the resulting code:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 以及生成的代码：
- en: '[PRE13]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '**[End of response]**'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '**[响应结束]**'
- en: The biggest change above was using a context manager to handle the database
    connection and cursor. This ensures that the connection is properly closed when
    the code has finished executing, even if an exception occurs.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 上述最大的变化是使用上下文管理器来处理数据库连接和游标。这确保了当代码执行完毕时，连接会被正确关闭，即使发生异常也是如此。
- en: We still want to separate the code into different files; let’s see what Copilot
    suggests for that.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们仍然希望将代码分离到不同的文件中；让我们看看 Copilot 对此有什么建议。
- en: 'Let’s start with a prompt:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从以下提示开始：
- en: '**[Prompt]**'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '**[提示]**'
- en: Separate the code into separate files by responsibility
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 根据职责将代码分离到不同的文件中
- en: '**[End of prompt]**'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '**[结束提示]**'
- en: 'and the resulting code:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 以及生成的代码：
- en: '**[Prompt response]**'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '**[提示响应]**'
- en: '[PRE14]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '**[End of response]**'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '**[结束响应]**'
- en: If you receive any errors while running the code, consult Copilot, tell it there’s
    an error, and ask it to address the issue. Remember that Copilot is more than
    a code generator.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在运行代码时收到任何错误，请咨询 Copilot，告诉它有错误，并要求它解决问题。请记住，Copilot 不仅仅是一个代码生成器。
- en: What we’re seeing now is a separation of concerns. The `app.py` file is responsible
    for starting the application and registering the blueprint. The `database.py`
    file is responsible for handling the database connection. The `products.py` file
    is responsible for handling the `products` API. This code is something we can
    work with and maintain.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在看到的是关注点的分离。`app.py` 文件负责启动应用程序并注册蓝图。`database.py` 文件负责处理数据库连接。`products.py`
    文件负责处理 `products` API。这段代码是我们可以操作和维护的。
- en: 'This code can be improved further by changing `database.py` to use a context
    manager:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将 `database.py` 更改为使用上下文管理器，可以进一步改进此代码：
- en: '[PRE15]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Here, you saw how Copilot can review your code in steps, splitting a single
    file into multiple files, and then improving the code.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，您看到了 Copilot 如何逐步审查您的代码，将单个文件拆分为多个文件，然后改进代码。
- en: Workspace
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作空间
- en: 'Your workspace is all the files you have open in a directory. You want your
    AI assistant to consider all these files when giving you a recommendation. Let’s
    look at the following web project where the following files exist:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 您的工作空间是您在目录中打开的所有文件。您希望您的 AI 助手在提供推荐时考虑所有这些文件。让我们看看以下存在的以下文件的网络项目：
- en: '[PRE16]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '`app.py` contains an API and `utils.py` contains an email validation function.
    Here’s the code for `app.py`:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '`app.py` 包含一个 API，而 `utils.py` 包含一个电子邮件验证函数。以下是 `app.py` 的代码：'
- en: '[PRE17]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Note the `TODO` comment; we’re about to add a route to store a customer. When
    storing this customer, we need to ensure that the customer data contains a valid
    email. Luckily, the `utils.py` file already contains such a function, but can
    we get Copilot to use it? Let’s see.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 注意到 `TODO` 注释；我们即将添加一个存储客户的路由。在存储此客户时，我们需要确保客户数据包含一个有效的电子邮件。幸运的是，`utils.py`
    文件已经包含这样一个函数，但我们能否让 Copilot 使用它？让我们看看。
- en: 'Change the comment in `app.py` to say the following:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 将 `app.py` 中的注释更改为以下内容：
- en: '**[Prompt]**'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '**[提示]**'
- en: TODO, create a POST route for customers. It should validate the request body,
    and ensure it has a valid email address.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: TODO，为客户创建一个 POST 路由。它应该验证请求体，并确保它有一个有效的电子邮件地址。
- en: '**[End of prompt]**'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '**[结束提示]**'
- en: 'You get a basic function that doesn’t really do what it’s supposed to:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 你得到一个基本函数，它实际上并没有做它应该做的事情：
- en: '**[Prompt response]**'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '**[提示响应]**'
- en: '[PRE18]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '**[End of response]**'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '**[结束响应]**'
- en: 'To help with this, you resort to GitHub Chat and type in the following prompt:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助解决这个问题，您求助于 GitHub Chat 并输入以下提示：
- en: '**[Prompt]**'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '**[提示]**'
- en: Validate the request body and ensure that it has a valid email address
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 验证请求体并确保它有一个有效的电子邮件地址
- en: '**[End of prompt]**'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '**[结束提示]**'
- en: '[Prompt response]'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '[提示响应]'
- en: 'To validate the request body and ensure it has a valid email address, you can
    use the `request` object from Flask and a regular expression. Here’s how you can
    modify your `post_customers` function:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 要验证请求体并确保它有一个有效的电子邮件地址，您可以使用 Flask 的 `request` 对象和一个正则表达式。以下是您如何修改您的 `post_customers`
    函数的方法：
- en: '[PRE19]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '**[End of response]**'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '**[结束响应]**'
- en: 'While the above code works, it doesn’t leverage our existing `utils.py` file,
    in which there is a function already solving validating an email. So how do we
    get Copilot to consider that file? The answer lies in a command called `@workspace`.
    The `@worskspace` command considers all the files. Here’s how it can be used:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然上述代码可以工作，但它没有利用我们现有的 `utils.py` 文件，其中已经有一个函数可以解决验证电子邮件的问题。那么我们如何让 Copilot
    考虑该文件呢？答案在于一个名为 `@workspace` 的命令。`@workspace` 命令考虑所有文件。以下是它的用法：
- en: '**[Prompt]**'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '**[提示]**'
- en: '`@workspace` improve selected code to validate request body to ensure it contains
    a valid email address, use primarily functionality from other files in the workspace
    to solve the problem.'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: '**[End of prompt]**'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21232_20_05.png)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
- en: 'Figure 20.5: Image from Copilot Chat showing how using the @workspace command
    leverages existing code and code files in the workspace to solve a problem, rather
    than creating new code.'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s also show the response in code and discuss what we can see:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: '**[Prompt response]**'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '**[End of response]**'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: In the code above, `validate_email`, residing in the file `utils.py`, is used
    to validate an email. This is important as the first attempt, and solving this
    problem led to Copilot duplicating code. For that reason, using `@workspace` is
    recommended when you want Copilot to consider all code in your workspace when
    suggesting a solution.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: Visual Studio Code lookup
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Another powerful feature of Copilot is being able to quickly look up how to
    do something in Visual Studio Code. Rather than consulting official documentation,
    you may want to quickly find what you need without leaving your code editor. To
    use this feature, there’s a `@vscode` command. Let’s ensure we have the chat window
    open and see how it works with the following prompt:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: '**[Prompt]**'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: '`@vscode` How do I open a terminal window?'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: '**[End of prompt]**'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21232_20_06.png)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
- en: 'Figure 20.6: Copilot response to the above prompt'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two things worth noting here:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: Copilot tells you how to do something and where to find it.
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It offers to visually show you how to find what you need if you click the **Show
    in Command Palette** button.
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Terminal
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The last really great feature we will show you is terminal commands. In theory,
    you could use terminal without resorting to this specific command, but it helps
    if you don’t have to prefix your question with “Show me how to do something in
    the terminal.” To use this command, prefix your prompt with `@terminal` like so:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: '**[Prompt]**'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: '`@terminal` show me how to create a remote called upstream in Git that points
    to a remote repo.'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: '**[End of prompt]**'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: '**[Prompt response]**'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a remote called “upstream” that points to a remote repository in
    Git, you can use the `git remote add` command. Here’s the command:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: '`git remote add upstream {remote_repo_url}`'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Replace `{remote_repo_url}` with the URL of the remote repository.
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This command adds a new remote named “upstream” that points to the specified
    remote repository. You can then fetch from or push to the “upstream” remote as
    needed.
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`{remote_repo_url}`: The URL of the remote repository. This could be a URL
    on GitHub, GitLab, Bitbucket, or any other Git server.'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**[End of response]**'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, you get both the command you need and a detailed explanation
    of how to type.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: Assignment
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: See if you can improve the code further by adding, for example, documentation,
    tests, or maybe an ORM (object-relational mapper). Remember to use the commands
    covered in this chapter.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: Challenge
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Check out the other commands that Copilot Chat supports, and see if you can
    use them to improve your workflow.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 查看Copilot Chat支持的其他命令，看看你是否可以用它们来改进你的工作流程。
- en: Quiz
  id: totrans-187
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问答
- en: What can Copilot help with?
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: Copilot能帮助什么？
- en: Code generation, automation, debugging, troubleshooting, code review, and optimization
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 代码生成、自动化、调试、故障排除、代码审查和优化
- en: Deployment
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 部署
- en: None of the above
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以上皆非
- en: Summary
  id: totrans-192
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we covered some more advanced functionality available in Copilot.
    You learned how to use `@workspace` to enable Copilot to consider all your files.
    The `@vscode` command was another useful command in that it showed you how to
    work with Visual Studio Code.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了Copilot中一些更高级的功能。你学习了如何使用`@workspace`来让Copilot考虑所有你的文件。`@vscode`命令也是那个功能中的一个有用命令，它展示了如何与Visual
    Studio Code一起工作。
- en: We also looked at scaffolding – specifically, how to scaffold files for a web
    project – and how to create a Notebook with starter code. Such commands are likely
    to save you hours when you first start with a project. Copilot has quite a few
    commands, and I recommend trying them out.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还探讨了脚手架的使用——特别是如何为Web项目搭建脚手架——以及如何创建带有起始代码的笔记本。这些命令在你刚开始一个项目时可能会为你节省数小时。Copilot有很多命令，我建议你尝试一下。
- en: Join our community on Discord
  id: totrans-195
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加入我们的Discord社区
- en: 'Join our community’s Discord space for discussions with the author and other
    readers:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 加入我们的Discord空间，与作者和其他读者进行讨论：
- en: '[https://packt.link/aicode](https://packt.link/aicode)'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://packt.link/aicode](https://packt.link/aicode)'
- en: '![](img/QR_Code510410532445718281.png)'
  id: totrans-198
  prefs: []
  type: TYPE_IMG
  zh: '![](img/QR_Code510410532445718281.png)'
