- en: '20'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Increasing Efficiency with GitHub Copilot
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, you’ve been using the knowledge you were taught at the beginning of
    the book about GitHub Copilot and ChatGPT. This foundational knowledge was enough
    to teach you how to write prompts and accept them. It was also enough to let you
    start work on creating solutions for machine learning, data science, and web development.
    In the case of web development, you also discovered Copilot is an efficient tool
    when working with existing code bases. In this chapter, we want to take your AI
    tool knowledge to the next level, as there are more features that you may want
    to leverage.
  prefs: []
  type: TYPE_NORMAL
- en: There are a lot of things that can be done to increase efficiency; you will
    see later in the chapter how there are features within Copilot that let you scaffold
    files, and you will learn more about your workspace and even Visual Studio Code
    as an editor, which are all time-saving features. This chapter will cover some
    of the most important features.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will:'
  prefs: []
  type: TYPE_NORMAL
- en: Learn how to use Copilot to generate code.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use Copilot commands to automate tasks, like generating a new project.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apply techniques to debug and troubleshoot code.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Review and optimize code using Copilot.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Code generation and automation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At its core, Copilot is a code generator. It can generate text for you that
    is either part of documentation or source code.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two primary ways to generate code with Copilot:'
  prefs: []
  type: TYPE_NORMAL
- en: Copilot’s active editor via prompts as comments.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Copilot Chat, which lets you type in a prompt.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Copilot’s active editor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you’re in the active editor, Copilot can generate code. To generate code,
    you need to write a prompt as a comment. There are different ways to add comments
    to your programming language code. In JavaScript and C#, for example, you use
    `//`, while you would type `<!--` if you’re in HTML.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s see an example of this:'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Prompt]**'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new function called add that takes two parameters.
  prefs: []
  type: TYPE_NORMAL
- en: '**[End of prompt]**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Above, we have a prompt as a comment. Copilot looks at this prompt and attempts
    to generate code based on it. At this point, Copilot sends the generated code
    back as a “suggestion,” which you can accept using the `Tab` key. Here’s what
    it looks like in the editor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'At this point, you get no suggestions. You have a couple of options:'
  prefs: []
  type: TYPE_NORMAL
- en: You can press the `Return` key to get more suggestions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Start typing part of the code you want to generate, and Copilot will suggest
    code based on what you type.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Copilot Chat
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Copilot Chat is a way to interact with Copilot using a chat interface. To activate
    Copilot Chat, click on the icon in the bottom-left corner of Visual Studio Code
    (or VS Code), which will open up a chat window.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21232_20_01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 20.1: Showing the left menu in Visual Studio Code with the “Chat” icon
    from Copilot Chat'
  prefs: []
  type: TYPE_NORMAL
- en: Upon clicking the above chat icon, the below image will be shown.
  prefs: []
  type: TYPE_NORMAL
- en: '![Chat window](img/B21232_20_02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 20.2: The image above shows the chat window that opens when you click
    the Chat icon in the left menu in Visual Studio Code'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s try to generate some code based on the same prompt as before. Let’s use
    the input text field in the chat window and type in the prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Prompt]**'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new function called add that takes two parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**[End of prompt]**'
  prefs: []
  type: TYPE_NORMAL
- en: 'The output comes in two parts, a text instruction and a code suggestion. First,
    the text instruction:'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Prompt response]**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Sure, here’s an example of a function called add that takes two parameters
    and returns their sum:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**[End of response]**'
  prefs: []
  type: TYPE_NORMAL
- en: 'It even shows you an example of how to use the function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Copilot commands
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you start typing `/` in the chat window, you will see a list of commands
    that you can use with Copilot.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21232_20_03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 20.3: Available commands'
  prefs: []
  type: TYPE_NORMAL
- en: There are quite a few available commands, and we will focus on a few of them
    in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Notebook
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With this command, you can create a new notebook. A notebook is a place where
    you can store code snippets and text. To create a notebook, type in `/newNotebook`,
    and also provide a name for the notebook, for example, `products`.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21232_20_04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 20.4: Creating a Notebook'
  prefs: []
  type: TYPE_NORMAL
- en: The above image shows what’s displayed when you type the `/newNotebook` command;
    you’re asked to confirm the scaffolding of a notebook by clicking **Create Notebook**.
  prefs: []
  type: TYPE_NORMAL
- en: This will create a new notebook with commonly used code snippets for `products`.
    Let’s inspect the output next.
  prefs: []
  type: TYPE_NORMAL
- en: 'Your notebook, at a high level, contains the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'import, which contains all the imports needed to work with a dataset; here’s
    what the content looks like:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Load data, which contains code to load data from a CSV file (the CSV file `product_data.csv`
    doesn’t exist, but Copilot assumes that you have such a file; adjust this part
    of the code to fit the name of the CSV file that you do have):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Explore product data, which contains operations to inspect the data:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Filter product data, which contains operations to filter the data:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Sorting data, which contains sorting operations:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Aggregating data; often, you want to aggregate data to get a better understanding
    of it:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In summary, that’s a lot of code you don’t have to write yourself. You can use
    this notebook as a starting point to work with product data.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Another really useful command is being able to create a project. Usually, we
    either create files by hand, which takes time, or we rely on CLI tools to create
    projects for us. With Copilot, you can create a project by typing in `/new` in
    the chat window. To use the command, type `/new` and then provide a description
    for it, for example, **React**. This will create a new project with a React project
    template. Let’s inspect the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The files created above are typical of what’s expected for a React project.
    It contains:'
  prefs: []
  type: TYPE_NORMAL
- en: '`public`, which contains the `index.html` file that references the JavaScript
    file indicating the location of your app.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`src`, which contains all the application files and is itself divided into
    different folders for components, data, and CSS styles.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All of this constitutes a starting point. You might want to change files to
    fit your liking.
  prefs: []
  type: TYPE_NORMAL
- en: Debugging and troubleshooting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Being able to debug and troubleshoot code is an important skill to have. When
    you develop code, it seldom does what you need it to do the first time. You need
    to be able to debug and troubleshoot code to figure out what’s wrong with it.
    The same applies if you have a reported bug; you need to be able to diagnose at
    what point it goes wrong.
  prefs: []
  type: TYPE_NORMAL
- en: Copilot can help, and a good approach is using Copilot chat and asking it to
    add support for debugging and troubleshooting.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a piece of sample code you’ve been given. It’s a REST API
    in the framework Flask for Python. It’s working code, but it might not be so easy
    to work with from a debugging and troubleshooting standpoint:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The above code works, but it doesn’t support debugging and troubleshooting;
    let’s see how we can add support for that by using Copilot Chat:'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Prompt]**'
  prefs: []
  type: TYPE_NORMAL
- en: Add support for troubleshooting and debugging
  prefs: []
  type: TYPE_NORMAL
- en: '**[End of prompt]**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Copilot chat answers us with both text and code:'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Prompt response]**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Sure, here’s an updated version of the Flask API that includes support for
    troubleshooting and debugging:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The improvements are:'
  prefs: []
  type: TYPE_NORMAL
- en: Added a `try`/`except` block around the code in the `get_products()` function.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added `logger` statements to log errors.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added `debug=True` to the `app.run()` statement.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These changes will help us troubleshoot and debug the code.
  prefs: []
  type: TYPE_NORMAL
- en: '**[End of response]**'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s look at how we can use Copilot to help us with code reviews and optimizations
    next.
  prefs: []
  type: TYPE_NORMAL
- en: Code review and optimization techniques
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Right now, we have code that works, but it’s not optimized. For example, it’s
    usually a good idea to separate code into different files. Let’s see what Copilot
    suggests to improve the code.
  prefs: []
  type: TYPE_NORMAL
- en: '**[Prompt]**'
  prefs: []
  type: TYPE_NORMAL
- en: Improve the selected code
  prefs: []
  type: TYPE_NORMAL
- en: '**[End of prompt]**'
  prefs: []
  type: TYPE_NORMAL
- en: 'As usual, we get the Copilot chat response in terms of text and code:'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Prompt response]**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Sure, here are some improvements you could make to the selected code:'
  prefs: []
  type: TYPE_NORMAL
- en: Use a context manager to handle the database connection and cursor. This ensures
    that the connection is properly closed when the code is finished executing, even
    if an exception occurs.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use a list comprehension to convert the products to a JSON response. This is
    more concise and can be faster than using a for loop.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use the json parameter of the Response object to return a JSON response. This
    is more concise than using the jsonify function.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use the request.json attribute to retrieve the product data from the request
    body. This is a more concise and Pythonic way to do it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'and the resulting code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '**[End of response]**'
  prefs: []
  type: TYPE_NORMAL
- en: The biggest change above was using a context manager to handle the database
    connection and cursor. This ensures that the connection is properly closed when
    the code has finished executing, even if an exception occurs.
  prefs: []
  type: TYPE_NORMAL
- en: We still want to separate the code into different files; let’s see what Copilot
    suggests for that.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s start with a prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Prompt]**'
  prefs: []
  type: TYPE_NORMAL
- en: Separate the code into separate files by responsibility
  prefs: []
  type: TYPE_NORMAL
- en: '**[End of prompt]**'
  prefs: []
  type: TYPE_NORMAL
- en: 'and the resulting code:'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Prompt response]**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '**[End of response]**'
  prefs: []
  type: TYPE_NORMAL
- en: If you receive any errors while running the code, consult Copilot, tell it there’s
    an error, and ask it to address the issue. Remember that Copilot is more than
    a code generator.
  prefs: []
  type: TYPE_NORMAL
- en: What we’re seeing now is a separation of concerns. The `app.py` file is responsible
    for starting the application and registering the blueprint. The `database.py`
    file is responsible for handling the database connection. The `products.py` file
    is responsible for handling the `products` API. This code is something we can
    work with and maintain.
  prefs: []
  type: TYPE_NORMAL
- en: 'This code can be improved further by changing `database.py` to use a context
    manager:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Here, you saw how Copilot can review your code in steps, splitting a single
    file into multiple files, and then improving the code.
  prefs: []
  type: TYPE_NORMAL
- en: Workspace
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Your workspace is all the files you have open in a directory. You want your
    AI assistant to consider all these files when giving you a recommendation. Let’s
    look at the following web project where the following files exist:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '`app.py` contains an API and `utils.py` contains an email validation function.
    Here’s the code for `app.py`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Note the `TODO` comment; we’re about to add a route to store a customer. When
    storing this customer, we need to ensure that the customer data contains a valid
    email. Luckily, the `utils.py` file already contains such a function, but can
    we get Copilot to use it? Let’s see.
  prefs: []
  type: TYPE_NORMAL
- en: 'Change the comment in `app.py` to say the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Prompt]**'
  prefs: []
  type: TYPE_NORMAL
- en: TODO, create a POST route for customers. It should validate the request body,
    and ensure it has a valid email address.
  prefs: []
  type: TYPE_NORMAL
- en: '**[End of prompt]**'
  prefs: []
  type: TYPE_NORMAL
- en: 'You get a basic function that doesn’t really do what it’s supposed to:'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Prompt response]**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '**[End of response]**'
  prefs: []
  type: TYPE_NORMAL
- en: 'To help with this, you resort to GitHub Chat and type in the following prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Prompt]**'
  prefs: []
  type: TYPE_NORMAL
- en: Validate the request body and ensure that it has a valid email address
  prefs: []
  type: TYPE_NORMAL
- en: '**[End of prompt]**'
  prefs: []
  type: TYPE_NORMAL
- en: '[Prompt response]'
  prefs: []
  type: TYPE_NORMAL
- en: 'To validate the request body and ensure it has a valid email address, you can
    use the `request` object from Flask and a regular expression. Here’s how you can
    modify your `post_customers` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '**[End of response]**'
  prefs: []
  type: TYPE_NORMAL
- en: 'While the above code works, it doesn’t leverage our existing `utils.py` file,
    in which there is a function already solving validating an email. So how do we
    get Copilot to consider that file? The answer lies in a command called `@workspace`.
    The `@worskspace` command considers all the files. Here’s how it can be used:'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Prompt]**'
  prefs: []
  type: TYPE_NORMAL
- en: '`@workspace` improve selected code to validate request body to ensure it contains
    a valid email address, use primarily functionality from other files in the workspace
    to solve the problem.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[End of prompt]**'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21232_20_05.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 20.5: Image from Copilot Chat showing how using the @workspace command
    leverages existing code and code files in the workspace to solve a problem, rather
    than creating new code.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s also show the response in code and discuss what we can see:'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Prompt response]**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '**[End of response]**'
  prefs: []
  type: TYPE_NORMAL
- en: In the code above, `validate_email`, residing in the file `utils.py`, is used
    to validate an email. This is important as the first attempt, and solving this
    problem led to Copilot duplicating code. For that reason, using `@workspace` is
    recommended when you want Copilot to consider all code in your workspace when
    suggesting a solution.
  prefs: []
  type: TYPE_NORMAL
- en: Visual Studio Code lookup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Another powerful feature of Copilot is being able to quickly look up how to
    do something in Visual Studio Code. Rather than consulting official documentation,
    you may want to quickly find what you need without leaving your code editor. To
    use this feature, there’s a `@vscode` command. Let’s ensure we have the chat window
    open and see how it works with the following prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Prompt]**'
  prefs: []
  type: TYPE_NORMAL
- en: '`@vscode` How do I open a terminal window?'
  prefs: []
  type: TYPE_NORMAL
- en: '**[End of prompt]**'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21232_20_06.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 20.6: Copilot response to the above prompt'
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two things worth noting here:'
  prefs: []
  type: TYPE_NORMAL
- en: Copilot tells you how to do something and where to find it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It offers to visually show you how to find what you need if you click the **Show
    in Command Palette** button.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Terminal
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The last really great feature we will show you is terminal commands. In theory,
    you could use terminal without resorting to this specific command, but it helps
    if you don’t have to prefix your question with “Show me how to do something in
    the terminal.” To use this command, prefix your prompt with `@terminal` like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Prompt]**'
  prefs: []
  type: TYPE_NORMAL
- en: '`@terminal` show me how to create a remote called upstream in Git that points
    to a remote repo.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[End of prompt]**'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Prompt response]**'
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a remote called “upstream” that points to a remote repository in
    Git, you can use the `git remote add` command. Here’s the command:'
  prefs: []
  type: TYPE_NORMAL
- en: '`git remote add upstream {remote_repo_url}`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Replace `{remote_repo_url}` with the URL of the remote repository.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This command adds a new remote named “upstream” that points to the specified
    remote repository. You can then fetch from or push to the “upstream” remote as
    needed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`{remote_repo_url}`: The URL of the remote repository. This could be a URL
    on GitHub, GitLab, Bitbucket, or any other Git server.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**[End of response]**'
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, you get both the command you need and a detailed explanation
    of how to type.
  prefs: []
  type: TYPE_NORMAL
- en: Assignment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: See if you can improve the code further by adding, for example, documentation,
    tests, or maybe an ORM (object-relational mapper). Remember to use the commands
    covered in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Challenge
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Check out the other commands that Copilot Chat supports, and see if you can
    use them to improve your workflow.
  prefs: []
  type: TYPE_NORMAL
- en: Quiz
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What can Copilot help with?
  prefs: []
  type: TYPE_NORMAL
- en: Code generation, automation, debugging, troubleshooting, code review, and optimization
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Deployment
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: None of the above
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we covered some more advanced functionality available in Copilot.
    You learned how to use `@workspace` to enable Copilot to consider all your files.
    The `@vscode` command was another useful command in that it showed you how to
    work with Visual Studio Code.
  prefs: []
  type: TYPE_NORMAL
- en: We also looked at scaffolding – specifically, how to scaffold files for a web
    project – and how to create a Notebook with starter code. Such commands are likely
    to save you hours when you first start with a project. Copilot has quite a few
    commands, and I recommend trying them out.
  prefs: []
  type: TYPE_NORMAL
- en: Join our community on Discord
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Join our community’s Discord space for discussions with the author and other
    readers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://packt.link/aicode](https://packt.link/aicode)'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/QR_Code510410532445718281.png)'
  prefs: []
  type: TYPE_IMG
