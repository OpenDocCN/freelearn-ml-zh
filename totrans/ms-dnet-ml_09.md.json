["```py\n    PM> install-package numl\n\n    ```", "```py\n    #r \"../packages/numl.0.8.26.0/lib/net40/numl.dll\"\n\n    open numl\n    open numl.Model\n    open numl.Supervised.NeuralNetwork\n\n    type Student = {[<Feature>]Study: float; \n                    [<Feature>]Beer: float; \n                    [<Label>] mutable Passed: bool}\n\n    let data = \n        [{Study=2.0;Beer=3.0;Passed=false};\n         {Study=3.0;Beer=4.0;Passed=false};\n         {Study=1.0;Beer=6.0;Passed=false};\n         {Study=4.0;Beer=5.0;Passed=false};\n         {Study=6.0;Beer=2.0;Passed=true};\n         {Study=8.0;Beer=3.0;Passed=true};\n         {Study=12.0;Beer=1.0;Passed=true};\n         {Study=3.0;Beer=2.0;Passed=true};]\n\n    let data' = data |> Seq.map box\n    let descriptor = Descriptor.Create<Student>()\n    let generator = NeuralNetworkGenerator()\n    generator.Descriptor <- descriptor\n    let model = Learner.Learn(data', 0.80, 100, generator)\n    let accuracy = model.Accuracy\n    ```", "```py\n    val generator : NeuralNetworkGenerator\n    val model : LearningModel =\n     Learning Model:\n     Generator numl.Supervised.NeuralNetwork.NeuralNetworkGenerator\n     Model:\n    numl.Supervised.NeuralNetwork.NeuralNetworkModel\n     Accuracy: 100.00 %\n\n    val accuracy : float = 1.0\n\n    ```", "```py\ngenerator.Descriptor <- descriptor\n\n```", "```py\nlet testData = {Study=7.0;Beer=1.0;Passed=false}\nlet predict = model.Model.Predict(testData)\n```", "```py\nval testData : Student = {Study = 7.0;\n Beer = 1.0;\n Passed = false;}\n\n> \n\nval predict : obj = {Study = 7.0;\n Beer = 1.0;\n Passed = true;}\n\n```", "```py\nPM> Install-Package SQLProvider -prerelease\n\n```", "```py\n#r \"../packages/SQLProvider.0.0.11-alpha/lib/FSharp.Data.SQLProvider.dll\"\n#r \"../packages/numl.0.8.26.0/lib/net40/numl.dll\"\n#r \"../packages/FSharp.Collections.ParallelSeq.1.0.2/lib/net40/FSharp.Collections.ParallelSeq.dll\"\n\nopen numl\nopen System\nopen numl.Model\nopen System.Linq\nopen FSharp.Data.Sql\nopen numl.Supervised.NeuralNetwork\nopen FSharp.Collections.ParallelSeq\n\n[<Literal>]\nlet connectionString = \"data source=nc54a9m5kk.database.windows.net;initial catalog=AdventureWorks2014;user id= PacktReader;password= P@cktM@chine1e@rning;\"\n\ntype AdventureWorks = SqlDataProvider<ConnectionString=connectionString>\nlet context = AdventureWorks.GetDataContext()\n```", "```py\nval connectionString : string =\n \"data source=nc54a9m5kk.database.windows.net;initial catalog=A\"+[70 chars]\ntype AdventureWorks = SqlDataProvider<...>\nval context : SqlDataProvider<...>.dataContext\n\n```", "```py\ntype WorkOrderLocation = {[<Feature>] Location10: bool; \n                          [<Feature>] Location20: bool; \n                          [<Feature>] Location30: bool; \n                          [<Feature>] Location40: bool; \n                          [<Feature>] Location45: bool; \n                          [<Feature>] Location50: bool; \n                          [<Feature>] Location60: bool; \n                          [<Label>] mutable Scrapped: bool}\n\nlet getWorkOrderLocation (workOrderId, scrappedQty:int16) =\n    let workOrderRoutings = context.``[Production].[WorkOrderRouting]``.Where(fun wor -> wor.WorkOrderID = workOrderId) |> Seq.toArray\n    match workOrderRoutings.Length with\n    | 0 -> None\n    | _ ->\n        let location10 = workOrderRoutings |> Array.exists(fun wor -> wor.LocationID = int16 10)\n        let location20 = workOrderRoutings |> Array.exists(fun wor -> wor.LocationID = int16 20)\n        let location30 = workOrderRoutings |> Array.exists(fun wor -> wor.LocationID = int16 30)\n        let location40 = workOrderRoutings |> Array.exists(fun wor -> wor.LocationID = int16 40)\n        let location45 = workOrderRoutings |> Array.exists(fun wor -> wor.LocationID = int16 45)\n        let location50 = workOrderRoutings |> Array.exists(fun wor -> wor.LocationID = int16 50)\n        let location60 = workOrderRoutings |> Array.exists(fun wor -> wor.LocationID = int16 60)\n        let scrapped = scrappedQty > int16 0\n        Some {Location10=location10;Location20=location20;Location30=location30;Location40=location40;\n        Location45=location45;Location50=location50;Location60=location60;Scrapped=scrapped}\n```", "```py\ntype WorkOrderLocation =\n {Location10: bool;\n Location20: bool;\n Location30: bool;\n Location40: bool;\n Location45: bool;\n Location50: bool;\n Location60: bool;\n mutable Scrapped: bool;}\nval getWorkOrderLocation :\n workOrderId:int * scrappedQty:int16 -> WorkOrderLocation option\n\n```", "```py\nlet locationData =\n    context.``[Production].[WorkOrder]`` \n    |> PSeq.map(fun wo -> getWorkOrderLocation(wo.WorkOrderID,wo.ScrappedQty))\n    |> Seq.filter(fun wol -> wol.IsSome)\n    |> Seq.map(fun wol -> wol.Value)\n    |> Seq.toArray\n```", "```py\nval locationData : WorkOrderLocation [] =\n [|{Location10 = true;\n Location20 = true;\n Location30 = true;\n Location40 = false;\n Location45 = true;\n Location50 = true;\n Location60 = true;\n Scrapped = false;}; {Location10 = false;\n Location20 = false;\n Location30 = false;\n Location40 = false;\n\n```", "```py\nlet locationData' = locationData |> Seq.map box\nlet descriptor = Descriptor.Create<WorkOrderLocation>()\nlet generator = NeuralNetworkGenerator()\ngenerator.Descriptor <- descriptor\nlet model = Learner.Learn(locationData', 0.80, 5, generator)\nlet accuracy = model.Accuracy\n```", "```py\nval generator : NeuralNetworkGenerator\nval model : LearningModel =\n Learning Model:\n Generator numl.Supervised.NeuralNetwork.NeuralNetworkGenerator\n Model:\nnuml.Supervised.NeuralNetwork.NeuralNetworkModel\n Accuracy: 0.61 %\n\nval accuracy : float = 0.006099706745\n\n```", "```py\ntype  VendorProduct = {WorkOrderID: int;\n                       [<Feature>]BusinessEntityID: int; \n                       [<Feature>]ProductID: int; \n                       [<Label>] mutable Scrapped: bool}\n\nlet workOrders = context.``[Production].[WorkOrder]`` |> Seq.toArray\nlet maxWorkOrder = workOrders.Length\nlet workOrderIds = Array.zeroCreate<int>(1000)\nlet workOrderIds' = workOrderIds |> Array.mapi(fun idx i -> workOrders.[System.Random(idx).Next(maxWorkOrder)])\n                                 |> Array.map(fun wo -> wo.WorkOrderID)\n```", "```py\ntype VendorProduct =\n {WorkOrderID: int;\n BusinessEntityID: int;\n ProductID: int;\n mutable Scrapped: bool;}\n\n â€¦\n FSharp.Data.Sql.Common.SqlEntity; FSharp.Data.Sql.Common.SqlEntity;\n FSharp.Data.Sql.Common.SqlEntity; FSharp.Data.Sql.Common.SqlEntity; ...|]\nval maxWorkOrder : int = 72591\nval workOrderIds : int [] =\n [|0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;\n 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;\n 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;\n 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0;\n ...|]\nval workOrderIds' : int [] =\n\n```", "```py\nlet (|=|) id a = Array.contains id a\n\nlet vendorData = \n    query{for p in context.``[Production].[Product]`` do\n          for wo in p.FK_WorkOrder_Product_ProductID do\n          for bom in p.FK_BillOfMaterials_Product_ProductAssemblyID do\n          join pv in context.``[Purchasing].[ProductVendor]`` on (bom.ComponentID = pv.ProductID)\n          join v in context.``[Purchasing].[Vendor]`` on (pv.BusinessEntityID = v.BusinessEntityID)\n          select  ({WorkOrderID = wo.WorkOrderID;BusinessEntityID = v.BusinessEntityID; ProductID = p.ProductID; Scrapped = wo.ScrappedQty > int16 0})}\n          |> Seq.filter(fun vp -> vp.WorkOrderID |=| workOrderIds')\n          |> Seq.toArray\n```", "```py\nval ( |=| ) : id:'a -> a:'a [] -> bool when 'a : equality\nval vendorData : VendorProduct [] =\n [|{WorkOrderID = 25;\n BusinessEntityID = 1576;\n ProductID = 764;\n Scrapped = false;}; {WorkOrderID = 25;\n BusinessEntityID = 1586;\n ProductID = 764;\n Scrapped = false;}; {WorkOrderID = 25;\n\n```", "```py\nlet vendorData' = vendorData |> Seq.map box\nlet descriptor' = Descriptor.Create<VendorProduct>()\nlet generator' = NeuralNetworkGenerator()\ngenerator'.Descriptor <- descriptor'\nlet model' = Learner.Learn(vendorData', 0.80, 5, generator')\nlet accuracy' = model'.Accuracy\n```", "```py\nval generator' : NeuralNetworkGenerator\nval model' : LearningModel =\n Learning Model:\n Generator numl.Supervised.NeuralNetwork.NeuralNetworkGenerator\n Model:\nnuml.Supervised.NeuralNetwork.NeuralNetworkModel\n Accuracy: 99.32 %\n\nval accuracy' : float = 0.9931740614\n\n```", "```py\nPM > install-package numl\n\n```", "```py\nusing numl.Model;\n\nnamespace AdventureWorks.ProcessAnalysisTool.Models\n{\n    public class VendorProduct\n    {\n        public int WorkOrderID { get; set; }\n        [Feature]\n        public int BusinessEntityID { get; set; }\n        [Feature]\n        public int ProductID { get; set; }\n        [Label]\n        public bool Scrapped { get; set; }\n    }\n}\n```", "```py\n:    \"dnxcore50\": { }\n```", "```py\nusing System;\n\nnamespace AdventureWorks.ProcessAnalysisTool.Models\n{\n    public class Product\n    {\n        public int ProductID { get; set; }\n        public string Description { get; set; }\n    }\n}\n```", "```py\nusing System;\n\nnamespace AdventureWorks.ProcessAnalysisTool.Models\n{\n    public class Vendor\n    {\n        public int VendorID { get; set; }\n        public String Description { get; set; }\n\n    }\n}\n```", "```py\nusing System;\nusing System.Collections.Generic;\nusing System.Data.SqlClient;\nusing System.Linq;\n\nnamespace AdventureWorks.ProcessAnalysisTool.Models\n{\n    public class Repository\n    {\n        public String ConnectionString { get; private set; }\n        public Repository(String connectionString)\n        {\n            this.ConnectionString = connectionString;\n        }\n\n        public ICollection<Vendor> GetAllVendors()\n        {\n            var vendors = new List<Vendor>();\n            using (var connection = new SqlConnection(this.ConnectionString))\n            {\n                var commandText =\n                    \"Select distinct V.BusinessEntityID, V.Name from [Purchasing].[Vendor] as V \" +\n                    \"Inner join[Purchasing].[ProductVendor] as PV \" +\n                    \"on V.BusinessEntityID = PV.BusinessEntityID \" +\n                    \"order by 2 asc\";\n\n                using (var command = new SqlCommand(commandText, connection))\n                {\n                    connection.Open();\n                    var reader = command.ExecuteReader();\n                    while (reader.Read())\n                    {\n                        vendors.Add(new Vendor() { VendorID = (int)reader[0], Description = (string)reader[1] });\n                    }\n                }\n            }\n            return vendors;\n        }\n\n        public ICollection<Product> GetAllProducts()\n        {\n            var products = new List<Product>();\n            using (var connection = new SqlConnection(this.ConnectionString))\n            {\n                var commandText =\n                    \"Select distinct P.ProductID, P.Name from [Production].[Product] as P \" +\n                    \"Inner join[Purchasing].[ProductVendor] as PV \" +\n                    \"on P.ProductID = PV.ProductID \" +\n                    \"order by 2 asc\";\n\n                using (var command = new SqlCommand(commandText, connection))\n                {\n                    connection.Open();\n                    var reader = command.ExecuteReader();\n                    while (reader.Read())\n                    {\n                        products.Add(new Product() { ProductID = (int)reader[0], Description = (string)reader[1] });\n                    }\n                }\n            }\n            return products;\n        }\n\n        public ICollection<VendorProduct> GetAllVendorProducts()\n        {\n            var vendorProducts = new List<VendorProduct>();\n            using (var connection = new SqlConnection(this.ConnectionString))\n            {\n                var commandText =\n                    \"Select WO.WorkOrderID, PV.BusinessEntityID, PV.ProductID, WO.ScrappedQty \" +\n                    \"from[Production].[Product] as P \" +\n                    \"inner join[Production].[WorkOrder] as WO \" +\n                    \"on P.ProductID = WO.ProductID \" +\n                    \"inner join[Production].[BillOfMaterials] as BOM \" +\n                    \"on P.ProductID = BOM.ProductAssemblyID \" +\n                    \"inner join[Purchasing].[ProductVendor] as PV \" +\n                    \"on BOM.ComponentID = PV.ProductID \";\n\n                using (var command = new SqlCommand(commandText, connection))\n                {\n                    connection.Open();\n                    var reader = command.ExecuteReader();\n                    while (reader.Read())\n                    {\n                        vendorProducts.Add(new VendorProduct()\n                        {\n                            WorkOrderID = (int)reader[0],\n                            BusinessEntityID = (int)reader[1],\n                            ProductID = (int)reader[2],\n                            Scrapped = (short)reader[3] > 0\n                        });\n                    }\n                }\n            }\n\n            return vendorProducts;\n        }\n\n        public ICollection<VendorProduct> GetRandomVendorProducts(Int32 number)\n        {\n            var returnValue = new List<VendorProduct>();\n            var vendorProducts = this.GetAllVendorProducts();\n            for (int i = 0; i < number; i++)\n            {\n                var random = new System.Random(i);\n                var index = random.Next(vendorProducts.Count - 1);\n                returnValue.Add(vendorProducts.ElementAt(index));\n            }\n            return returnValue;\n        }\n    }\n}\n```", "```py\nusing numl;\nusing numl.Model;\nusing numl.Supervised.NeuralNetwork;\nusing System;\nusing System.Collections.Generic;\n\nnamespace AdventureWorks.ProcessAnalysisTool.Models\n{\n    public class NeuralNetwork\n    {\n        public ICollection<VendorProduct> VendorProducts { get; private set; }\n        public LearningModel Model { get; private set; }\n\n        public NeuralNetwork(ICollection<VendorProduct> vendorProducts)\n        {\n            if(vendorProducts ==  null)\n            {\n                throw new ArgumentNullException(\"vendorProducts\");\n            }\n            this.VendorProducts = vendorProducts;\n            this.Train();\n        }\n\n        internal void Train()\n        {\n            var vendorData = VendorProducts;\n            var descriptor = Descriptor.Create<VendorProduct>();\n            var generator = new NeuralNetworkGenerator();\n            generator.Descriptor = descriptor;\n            var model = Learner.Learn(vendorData, 0.80, 5, generator);\n            if (model.Accuracy > .75)\n            {\n                this.Model = model;\n            }\n        }\n\n        public bool GetScrappedInd(int vendorId, int productId)\n        {\n            if(this.Model == null)\n            {\n                return true;\n            }\n            else\n            {\n                var vendorProduct = new VendorProduct()\n                {\n                    BusinessEntityID = vendorId, ProductID = productId,\n                    Scrapped = false\n                };\n                return (bool)this.Model.Model.Predict((object)vendorProduct);\n            }\n        }\n    }\n}\n```", "```py\nusing AdventureWorks.ProcessAnalysisTool.Models;\n\nnamespace AdventureWorks.ProcessAnalysisTool\n{\n    public static class Global\n    {\n        static NeuralNetwork _neuralNetwork = null;\n\n        public static void InitNeuralNetwork()\n        {\n            var connectionString = \"data source=nc54a9m5kk.database.windows.net;initial catalog=AdventureWorks2014;user id= PacktReader;password= P@cktM@chine1e@rning;\";\n            var repository = new Repository(connectionString);\n            var vendorProducts = repository.GetRandomVendorProducts(1000);\n            _neuralNetwork = new NeuralNetwork(vendorProducts);\n        }\n\n        public static NeuralNetwork NeuralNetwork\n        { get\n            {\n                return _neuralNetwork;\n            }\n        }\n    }\n}\n```", "```py\n        public Startup(IHostingEnvironment env)\n        {\n            // Set up configuration sources.\n            var builder = new ConfigurationBuilder()\n                .AddJsonFile(\"appsettings.json\")\n                .AddEnvironmentVariables();\n                Configuration = builder.Build();\n\n            Global.InitNeuralNetwork();\n        }\n```", "```py\n        [HttpGet]\n        public IActionResult PredictScrap()\n        {\n            var connectionString = \"data source=nc54a9m5kk.database.windows.net;initial catalog=AdventureWorks2014;user id= PacktReader;password= P@cktM@chine1e@rning;\";\n            var repository = new Repository(connectionString);\n            var vendors = repository.GetAllVendors();\n            var products = repository.GetAllProducts();\n\n            ViewBag.Vendors = new SelectList(vendors, \"VendorID\", \"Description\");\n            ViewBag.Products = new SelectList(products, \"ProductID\", \"Description\");\n\n            return View();\n        } \n```", "```py\n        [HttpPost]\n        public IActionResult PredictScrap(Int32 vendorId, Int32 productId)\n        {\n            ViewBag.ScappedInd = Global.NeuralNetwork.GetScrappedInd(vendorId, productId);\n\n            var connectionString = \"data source=nc54a9m5kk.database.windows.net;initial catalog=AdventureWorks2014;user id= PacktReader;password= P@cktM@chine1e@rning;\";\n            var repository = new Repository(connectionString);\n            var vendors = repository.GetAllVendors();\n            var products = repository.GetAllProducts();\n\n            ViewBag.Vendors = new SelectList(vendors, \"VendorID\", \"Description\", vendorId);\n            ViewBag.Products = new SelectList(products, \"ProductID\", \"Description\", productId);\n\n            return View();\n        }\n```", "```py\n<h2>Determine Scrap Rate</h2>\n\n@using (Html.BeginForm())\n{\n    <div class=\"form-horizontal\">\n        <h4>Select Inputs</h4>\n        <hr />\n\n        <div class=\"form-group\">\n            <div class=\"col-md-10\">\n                @Html.DropDownList(\"VendorID\", (SelectList)ViewBag.Vendors, htmlAttributes: new { @class = \"form-control\" })\n                @Html.DropDownList(\"ProductID\", (SelectList)ViewBag.Products, htmlAttributes: new { @class = \"form-control\" })\n           </div>\n        </div>\n        <div class=\"form-group\">\n            <div class=\"col-md-offset-2 col-md-10\">\n                <input type=\"submit\" value=\"Predict!\" class=\"btn btn-default\" />\n            </div>\n        </div>\n        <h4>Will Have Scrap?</h4>\n        <div class=\"form-group\">\n            <div class=\"col-md-offset-2 col-md-10\">\n                @ViewBag.ScappedInd\n            </div>\n        </div>\n   </div>\n}\n```"]