["```py\nexport MB_KEY=\"YOUR KEY HERE\"\n```", "```py\n docker run -p 8080:8080 -e \"MB_KEY=$MB_KEY\" machinebox/facebox\n```", "```py\n import \"github.com/machinebox/sdk-go/facebox\"\n\n func train(box *facebox.Client) error {\n     files, err := filepath.Glob(\"HotDog/*\")\n     if err != nil {\n          return err\n     }\n     for _, filename := range files {\n         f , err := os.Open(filename)\n         if err != nil {\n             return err\n         }\n\n         if err := box.Teach(f, filename, \"HotDog\"); err != nil {\n             return err\n         }\n         if err := f.Close(); err != nil {\n             return err\n         }\n     }\n     return nil\n }\n\n func main(){\n     box := facebox.New(\"http://localhost:8080\")\n     if err := train(box); err !=nil {\n         log.Fatal(err)\n     }\n }\n```", "```py\n     // open webcam\n     webcam, err := gocv.VideoCaptureDevice(0)\n     if err != nil {\n         log.Fatal(err)\n     }\n     defer webcam.Close()\n\n     // prepare image matrix\n     img := gocv.NewMat()\n     defer img.Close()\n\n     if ok := webcam.Read(&img); !ok {\n         log.Fatal(\"Failed to read image\")\n     }\n```", "```py\n     var buf bytes.Buffer\n     prop, _ := img.ToImage()\n     if err = jpeg.Encode(&buf, prop, nil); err != nil {\n         log.Fatal(\"Failed to encode image as JPG %v\", err)\n     }\n\n     faces, err := box.Check(&buf)\n     fmt.Printf(\"Error: %v\\n\", err)\n     fmt.Printf(\"%#v\", faces)\n```", "```py\n Error: <nil>\n []facebox.Face{facebox.Face{Rect:facebox.Rect{Top:221, Left:303, Width:75, Height:75}, ID:\"\", Name:\"\", Matched:false, Confidence:0, Faceprint:\"\"}}\n```", "```py\n     // open webcam\n     webcam, err := gocv.VideoCaptureDevice(0)\n     if err != nil {\n         log.Fatal(err)\n     }\n     defer webcam.Close()\n\n     // prepare image matrix\n     img := gocv.NewMat()\n     defer img.Close()\n\n     // open display window\n     window := gocv.NewWindow(\"Face Recognition\")\n     defer window.Close()\n\n     var recognized bool\n     for {\n         if !recognized {\n             if ok := webcam.Read(&img); !ok {\n                 log.Fatal(\"Failed to read image\")\n             }\n         }\n\n         window.IMShow(img)\n         if window.WaitKey(1) >= 0 {\n             if !recognized {\n                 recognize(&img, box)\n                 recognized = true\n                 continue\n             } else {\n                 break\n             }\n         }\n     }\n```", "```py\n     for {\n         if !recognized {\n             if ok := webcam.Read(&img); !ok {\n                 log.Fatal(\"Failed to read image\")\n             }\n         }\n\n         window.IMShow(img)\n         if window.WaitKey(1) >= 0 {\n             if !recognized {\n                 recognize(&img, box)\n                 recognized = true\n             } else {\n                 break\n             }\n         }\n     }\n```", "```py\n\n var blue = color.RGBA{0, 0, 255, 0}\n\n func recognize(img *gocv.Mat, box *facebox.Client) (err error) {\n     var buf bytes.Buffer\n     prop, _ := img.ToImage()\n     if err = jpeg.Encode(&buf, prop, nil); err != nil {\n         log.Fatal(\"Failed to encode image as JPG %v\", err)\n     }\n\n     // rd := bytes.NewReader(prop.(*image.RGBA).Pix)\n     faces, err := box.Check(&buf)\n     // fmt.Println(err)\n     // fmt.Printf(\"%#v\\n\", faces)\n\n     for _, face := range faces {\n         // draw a rectangle\n         r := rect2rect(face.Rect)\n         gocv.Rectangle(img, r, blue, 3)\n\n         lbl := \"Not HotDog\"\n         if face.Matched {\n             lbl = fmt.Sprintf(\"%v %1.2f%%\", face.Name, face.Confidence*100)\n         }\n         size := gocv.GetTextSize(lbl, gocv.FontHersheyPlain, 1.2, 2)\n         pt := image.Pt(r.Min.X+(r.Min.X/2)-(size.X/2), r.Min.Y-2)\n         gocv.PutText(img, lbl, pt, gocv.FontHersheyPlain, 1.2, blue, 2)\n     }\n     return nil\n }\n```", "```py\n type Face struct {\n     Rect       Rect\n     ID         string\n     Name       string\n     Matched    bool\n     Confidence float64\n     Faceprint  string\n }\n```", "```py\n func rect2rect(a facebox.Rect) image.Rectangle {\n     return image.Rect(a.Left, a.Top, a.Left+a.Width, a.Top+a.Height)\n }\n```", "```py\n func testFacebox() error {\n     files, err := filepath.Glob(\"OtherFaces/*\")\n     if err != nil {\n          return err\n     }\n     var count, lt50 int\n     for _, filename := range files {\n         f , err := os.Open(filename)\n         if err != nil {\n             return err\n         }\n         faces, err := box.Check(f)\n         if err != nill {\n             return err\n         }\n         for _, face := range faces {\n             if face.Matched && face.Confidence < 0.5 {\n                 lt50++\n             }\n         }\n         if err := f.Close(); err != nil {\n             return err\n         }\n         count++\n     }\n     fmt.Printf(\"%d/%d has Matched HotDog but Confidence < 0.5\\n\", lt50, count)\n     return nil\n }\n```"]