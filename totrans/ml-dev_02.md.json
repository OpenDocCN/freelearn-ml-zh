["```py\nIn [1]: import pandas as pd #Import the pandas library with pd alias\n```", "```py\nIn [2]: df = pd.read_csv (\"data/iris.csv\") #import iris data as dataframe\n```", "```py\nIn [3]: df.columns\nOut[3]:\nIndex([u'Sepal.Length', u'Sepal.Width', u'Petal.Length', u'Petal.Width',\nu'Species'],\ndtype='object')\n\nIn [4]: df.head(3)\nOut[4]:\n5.1 3.5 1.4 0.2 setosa\n0 4.9 3.0 1.4 0.2 setosa\n1 4.7 3.2 1.3 0.2 setosa\n2 4.6 3.1 1.5 0.2 setosa\n```", "```py\nIn [19]: df[u'Sepal.Length'].head(3)\nOut[19]:\n0 5.1\n1 4.9\n2 4.7\nName: Sepal.Length, dtype: float64\n```", "```py\n#Describe the sepal length column\nprint \"Mean: \" + str (df[u'Sepal.Length'].mean())\nprint \"Standard deviation: \" + str(df[u'Sepal.Length'].std())\nprint \"Kurtosis: \" + str(df[u'Sepal.Length'].kurtosis())\nprint \"Skewness: \" + str(df[u'Sepal.Length'].skew())\n```", "```py\nMean: 5.84333333333\nStandard deviation: 0.828066127978\nKurtosis: -0.552064041316\nSkewness: 0.314910956637\n```", "```py\n#Plot the data histogram to illustrate the measures\nimport matplotlib.pyplot as plt\n%matplotlib inline\ndf[u'Sepal.Length'].plot.hist()\n```", "```py\nimport scipy.misc\nfrom matplotlib import pyplot as plt\n%matplotlib inline\ntestimg = scipy.misc.imread(\"data/blue_jay.jpg\")\nplt.imshow( testimg)\n```", "```py\ntestimg.shape\n```", "```py\n(1416, 1920, 3)\n```", "```py\nplt.subplot(131)\nplt.imshow( testimg[:,:,0], cmap=\"Reds\")\nplt.title(\"Red channel\")\nplt.subplot(132)\nplt.imshow( testimg[:,:,1], cmap=\"Greens\")\nplt.title(\"Green channel\")\nplt.subplot(133)\nplt.imshow( testimg[:,:,2], cmap=\"Blues\")\nplt.title(\"Blue channel\")\n```", "```py\n[[0 1 0 0 0]\n [0 0 0 1 0]\n [0 0 1 0 0]\n [0 0 0 0 1]]\n```", "```py\nimport numpy as np\ndef get_one_hot(input_vector):\nresult=[]\nfor i in input_vector:\n newval=np.zeros(max(input_vector))\n newval.itemset(i-1,1)\n result.append(newval)\n return result\n```", "```py\nget_one_hot([1,5,2,4,3])\n\n#Out:\n[array([ 1., 0., 0., 0., 0.]),\narray([ 0., 0., 0., 0., 1.]),\narray([ 0., 1., 0., 0., 0.]),\narray([ 0., 0., 0., 1., 0.]),\narray([ 0., 0., 1., 0., 0.])]\n```", "```py\nfrom sklearn import preprocessing\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndf=pd.read_csv(\"data/mpg.csv\")\nplt.figure(figsize=(10,8))\nprint df.columns\npartialcolumns = df[['acceleration', 'mpg']]\nstd_scale = preprocessing.StandardScaler().fit(partialcolumns)\ndf_std = std_scale.transform(partialcolumns)\nplt.scatter(partialcolumns['acceleration'], partialcolumns['mpg'], color=\"grey\", marker='^')\nplt.scatter(df_std[:,0], df_std[:,1])\n```", "```py\nmu, sigma = 0, 1 \ndist = np.random.normal(mu, sigma, 1000)\n>>> dist = np.random.normal(mu, sigma, 10)\n>>> print dist\n[ 0.32416595 1.48067723 0.23039378 -0.59140674 1.65827372 -0.8241832\n 0.86016434 -0.05996878 2.2855467 -0.19759244]\n\n```", "```py\nfrom sklearn.metrics import confusion_matrix\nimport matplotlib.pyplot as plt\nimport numpy as np\ny_true = [8,5,6,8,5,3,1,6,4,2,5,3,1,4]\ny_pred = [8,5,6,8,5,2,3,4,4,5,5,7,2,6]\ny = confusion_matrix(y_true, y_pred)\nprint y \nplt.imshow(confusion_matrix(y_true, y_pred), interpolation='nearest', cmap='plasma')\nplt.xticks(np.arange(0,8), np.arange(1,9))\nplt.yticks(np.arange(0,8), np.arange(1,9))\nplt.show()\n```", "```py\n[[0 1 1 0 0 0 0 0]\n [0 0 0 0 1 0 0 0]\n [0 1 0 0 0 0 1 0]\n [0 0 0 1 0 1 0 0]\n [0 0 0 0 3 0 0 0]\n [0 0 0 1 0 1 0 0]\n [0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 2]]\n```"]