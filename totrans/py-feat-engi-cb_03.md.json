["```py\n     import numpy as np\n    import pandas as pd\n    import matplotlib.pyplot as plt\n    import scipy.stats as stats\n    from sklearn.datasets import fetch_california_housing\n    ```", "```py\n     X, y = fetch_california_housing(return_X_y=True,\n        as_frame=True)\n    ```", "```py\n     X.hist(bins=30, figsize=(12, 12))\n    plt.show()\n    ```", "```py\n     def diagnostic_plots(df, variable):\n        plt.figure(figsize=(15,6))\n        plt.subplot(1, 2, 1)\n        df[variable].hist(bins=30)\n        plt.title(f\"Histogram of {variable}\")\n        plt.subplot(1, 2, 2)\n        stats.probplot(df[variable], dist=\"norm\",\n            plot=plt)\n        plt.title(f\"Q-Q plot of {variable}\")\n        plt.show()\n    ```", "```py\n     diagnostic_plots(X, \"MedInc\")\n    ```", "```py\n     X_tf = X.copy()\n    ```", "```py\n     vars = [\"MedInc\", \"AveRooms\", \"AveBedrms\",\n        \"Population\"]\n    ```", "```py\n     X_tf[vars] = np.log(X[vars])\n    ```", "```py\n     diagnostic_plots(X_tf, \"MedInc\")\n    ```", "```py\n     from sklearn.preprocessing import FunctionTransformer\n    ```", "```py\n     transformer = FunctionTransformer(np.log,\n        inverse_func=np.exp)\n    ```", "```py\n     X_tf[vars] = transformer.transform(X[vars])\n    ```", "```py\n     X_tf[vars] = transformer.inverse_transform(X_tf[vars])\n    ```", "```py\n     from feature_engine.transformation import LogTransformer\n    ```", "```py\n     lt = LogTransformer(variables = vars)\n    lt.fit(X)\n    ```", "```py\n     X_tf = lt.transform(X)\n    ```", "```py\n     X_tf = lt.inverse_transform(X_tf)\n    ```", "```py\n     import numpy as np\n    import pandas as pd\n    import matplotlib.pyplot as plt\n    import scipy.stats as stats\n    from sklearn.datasets import fetch_california_housing\n    ```", "```py\n     X, y = fetch_california_housing(return_X_y=True,\n        as_frame=True)\n    ```", "```py\n     def diagnostic_plots(df, variable):\n        plt.figure(figsize=(15,6))\n        plt.subplot(1, 2, 1)\n        df[variable].hist(bins=30)\n        plt.title(f\"Histogram of {variable}\")\n        plt.subplot(1, 2, 2)\n        stats.probplot(df[variable], dist=\"norm\",\n            plot=plt)\n        plt.title(f\"Q-Q plot of {variable}\") plt.show()\n    ```", "```py\n     diagnostic_plots(X, \"AveOccup\")\n    ```", "```py\n     X_tf = X.copy()\n    ```", "```py\n     X_tf[\"AveOccup\"] = np.reciprocal(X_tf[\"AveOccup\"])\n    ```", "```py\n     diagnostic_plots(X_tf, \"AveOccup\")\n    ```", "```py\n     from sklearn.preprocessing import FunctionTransformer\n    ```", "```py\n     transformer = FunctionTransformer(np.reciprocal)\n    ```", "```py\n     X_tf = X.copy()\n    X_tf[\"AveOccup\"] = transformer.transform(\n        X[\"AveOccup\"])\n    ```", "```py\n     from feature_engine.transformation import ReciprocalTransformer\n    ```", "```py\n     rt = ReciprocalTransformer(variables=»AveOccup»)\n    rt.fit(X)\n    ```", "```py\n     X_tf = rt.transform(X)\n    ```", "```py\n     import numpy as np import pandas as pd\n    import scipy.stats as stats\n    ```", "```py\n     df = pd.DataFrame()\n    df[\"counts1\"] = stats.poisson.rvs(mu=3, size=10000)\n    df[\"counts2\"] = stats.poisson.rvs(mu=2, size=10000)\n    ```", "```py\n     def diagnostic_plots(df, variable):\n        plt.figure(figsize=(15,6))\n        plt.subplot(1, 2, 1)\n        df[variable].value_counts().sort_index(). plot.bar()\n        plt.title(f\"Histogram of {variable}\")\n        plt.subplot(1, 2, 2)\n        stats.probplot(df[variable], dist=\"norm\",\n            plot=plt)\n        plt.title(f\"Q-Q plot of {variable}\")\n        plt.show()\n    ```", "```py\n     diagnostic_plots(df, \"counts1\")\n    ```", "```py\n     df_tf = df.copy()\n    ```", "```py\n     df_tf[[\"counts1\", \"counts2\"]] = np.sqrt(\n        df[[\"counts1\",\"counts2\"]])\n    ```", "```py\n     df_tf[[\"counts1\", \"counts2\"]] = np.round(\n        df_tf[[\"counts1\", \"counts2\"]], 2)\n    ```", "```py\n     diagnostic_plots(df_tf, \"counts1\")\n    ```", "```py\n     from sklearn.preprocessing import FunctionTransformer\n    transformer = FunctionTransformer(\n        np.sqrt).set_output(transform=\"pandas\")\n    ```", "```py\n     df_tf = df.copy()\n    df_tf = transformer.transform(df)\n    ```", "```py\n    from feature_engine.transformation import PowerTransformer\n    root_t = PowerTransformer(exp=1/2)\n    ```", "```py\n     root_t.fit(df)\n    ```", "```py\n     df_tf = root_t.transform(df)\n    ```", "```py\n     import numpy as np\n    import pandas as pd\n    from sklearn.datasets import fetch_california_housing\n    from sklearn.preprocessing import FunctionTransformer\n    from feature_engine.transformation import PowerTransformer\n    ```", "```py\n     X, y = fetch_california_housing(\n        return_X_y=True, as_frame=True)\n    ```", "```py\n     def diagnostic_plots(df, variable):\n        plt.figure(figsize=(15,6))\n        plt.subplot(1, 2, 1)\n        df[variable].hist(bins=30)\n        plt.title(f\"Histogram of {variable}\")\n        plt.subplot(1, 2, 2)\n        stats.probplot(df[variable], dist=\"norm\",\n            plot=plt)\n        plt.title(f\"Q-Q plot of {variable}\")\n        plt.show()\n    ```", "```py\n     diagnostic_plots(X, \"Population\")\n    ```", "```py\n     variables = [\"MedInc\", \"Population\"]\n    ```", "```py\n     X_tf = X.copy()\n    X_tf[variables] = np.power(X[variables], 0.3)\n    ```", "```py\n     diagnostic_plots(X_tf, \"Population\")\n    ```", "```py\n     transformer = FunctionTransformer(\n        lambda x: np.power(x,0.3))\n    ```", "```py\n     X_tf = X.copy()\n    X_tf[variables] = transformer.transform(X[variables])\n    ```", "```py\n     power_t = PowerTransformer(variables=variables,\n        exp=0.3)\n    power_t.fit(X)\n    ```", "```py\n     X_tf = power_t.transform(X)\n    ```", "```py\n     import numpy as np\n    import pandas as pd\n    import scipy.stats as stats\n    from sklearn.datasets import fetch_california_housing\n    from sklearn.preprocessing import PowerTransformer\n    from feature_engine.transformation import BoxCoxTransformer\n    ```", "```py\n     X, y = fetch_california_housing(\n        return_X_y=True, as_frame=True)\n    ```", "```py\n     X.drop(labels=[\"Latitude\", \"Longitude\"], axis=1,\n        inplace=True)\n    ```", "```py\n     X.hist(bins=30, figsize=(12, 12), layout=(3, 3))\n    plt.show()\n    ```", "```py\n     variables = list(X.columns)\n    ```", "```py\n     def make_qqplot(df):\n        plt.figure(figsize=(10, 6),\n            constrained_layout=True)\n        for i in range(6):\n            # location in figure\n            ax = plt.subplot(2, 3, i + 1)\n            # variable to plot\n            var = variables[i]\n            # q-q plot\n            stats.probplot((df[var]), dist=\"norm\",\n                plot=plt)\n            # add variable name as title\n            ax.set_title(var)\n        plt.show()\n    ```", "```py\n     make_qqplot(X)\n    ```", "```py\n     transformer = PowerTransformer(\n        method=\"box-cox\", standardize=False,\n    ).set_output(transform=\"pandas\")\n    transformer.fit(X)\n    ```", "```py\n     X_tf = transformer.transform(X)\n    ```", "```py\n     X_tf.hist(bins=30, figsize=(12, 12), layout=(3, 3))\n    plt.show()\n    ```", "```py\n     make_qqplot(X_tf)\n    ```", "```py\n     bct = BoxCoxTransformer()\n    bct.fit(X)\n    ```", "```py\n     X_tf = bct.transform(X)\n    ```", "```py\n     bct.lambda_dict_\n    ```", "```py\n    <st c=\"39094\">{'MedInc': 0.09085449361507383,</st>\n    <st c=\"39126\">'HouseAge': 0.8093980940712507,</st>\n    <st c=\"39158\">'AveRooms': -0.2980048976549959,</st>\n    <st c=\"39191\">'AveBedrms': -1.6290002625859639,</st>\n    <st c=\"39225\">'Population': 0.235767</st><st c=\"39248\">57812051324,</st>\n    <st c=\"39261\">'AveOccup': -0.4763032278973292}</st>\n    ```", "```py\n     import numpy as np import pandas as pd\n    import scipy.stats as stats\n    from sklearn.datasets import fetch_california_housing\n    from sklearn.preprocessing import PowerTransformer\n    from feature_engine.transformation import YeoJohnsonTransformer\n    ```", "```py\n     X, y = fetch_california_housing(\n        return_X_y=True, as_frame=True)\n    X.drop(labels=[«Latitude», «Longitude»], axis=1,\n        inplace=True)\n    ```", "```py\n     transformer = PowerTransformer(\n        method=\"yeo-johnson\", standardize=False,\n    ).set_output(transform=\"pandas\")\n    ```", "```py\n     transformer.fit(X)\n    ```", "```py\n     X_tf = transformer.transform(X)\n    ```", "```py\n     X_tf.hist(bins=30, figsize=(12, 12), layout=(3, 3))\n    plt.show()\n    ```", "```py\n     yjt = YeoJohnsonTransformer()\n    yjt.fit(X)\n    ```", "```py\n     X_tf = yjt.transform(X)\n    ```", "```py\n     yjt.lambda_dict_\n    ```", "```py\n    <st c=\"44862\">{'MedInc': -0.1985098937827175,</st>\n    <st c=\"44894\">'HouseAge': 0.8081480895997063,</st>\n    <st c=\"44926\">'AveRooms': -0.5536698033957893,</st>\n    <st c=\"44959\">'AveBedrms': -4.3940822236920365,</st>\n    <st c=\"44993\">'Population': 0.2335</st><st c=\"45014\">2363517075606,</st>\n    <st c=\"45029\">'AveOccup': -0.9013456270549428}</st>\n    ```"]