["```py\npip install opencv-python\n```", "```py\nprint(\"Image size: \", image.shape)\n```", "```py\nblack = np.zeros([100,100],dtype=np.uint8)  # Creates a black image\n```", "```py\nwhite = np.full([50, 50], 255, dtype=np.uint8)\n```", "```py\nimg[:] = 64        # Change the pixels color to dark gray\n```", "```py\nimg[10:20] = 192   # Paints 10 rows with light gray\n```", "```py\nimg[:, 10:20] = 64 # Paints 10 columns with dark gray\n```", "```py\nimg[90:100, 90:100] = 0  # Paints a 10x10 area with black\n```", "```py\nimg[50, 50] = 0  # Paints one pixel with black\n```", "```py\nroi = img[90:100, 90:100]\nimg[80:90, 80:90] = roi \n```", "```py\nimage2 = image.copy()\n```", "```py\nrgb = np.zeros([100, 100, 3],dtype=np.uint8)  \n```", "```py\nrgb[:, :, 2] = 255       # Makes the image red\n```", "```py\nrgb[:, :, (0, 2)] = 255  # Makes the image magenta\n```", "```py\ngray = cv2.cvtColor(original, cv2.COLOR_BGR2GRAY)\n```", "```py\nimport cv2\nimage = cv2.imread('test.jpg')\n```", "```py\ncv2.imshow(\"Image\", image)cv2.waitKey(0)\n```", "```py\ncv2.imwrite(\"out.jpg\", image)\n```", "```py\nblack = np.zeros([50, 50], dtype=np.uint8)white = np.full([50, 50], 255, dtype=np.uint8)cv2.imwrite(\"horizontal.jpg\", cv2.hconcat([white, black]))cv2.imwrite(\"vertical.jpg\", cv2.vconcat([white, black]))\n```", "```py\nrow1 = cv2.hconcat([white, black])row2 = cv2.hconcat([black, white])cv2.imwrite(\"chess.jpg\", cv2.vconcat([row1, row2]))\n```", "```py\ncap = cv2.VideoCapture(\"video.mp4\")\n```", "```py\nret, frame = cap.read()\n```", "```py\nmp4 = cv2.VideoWriter_fourcc(*'MP4V')writer = cv2.VideoWriter('video-out.mp4', mp4, 15, (640, 480))\n```", "```py\nwriter.write(image)\n```", "```py\ncap.release()\nwriter.release()\n```", "```py\ncap = cv2.VideoCapture(0)\n```", "```py\nflipH = cv2.flip(img, 1)flipV = cv2.flip(img, 0)flip = cv2.flip(img, -1)\n```", "```py\nblurred = cv2.blur(image, (15, 15))\n```", "```py\ngaussian = cv2.GaussianBlur(image, (15, 15), sigmaX=15, sigmaY=15)\n```", "```py\nmedian = cv2.medianBlur(image, 15)\n```", "```py\nbilateral = cv2.bilateralFilter(image, 15, 50, 50)\n```", "```py\ncv2.convertScaleAbs(image, more_contrast, 2, 0)cv2.convertScaleAbs(image, less_contrast, 0.5, 0)\n```", "```py\ncv2.convertScaleAbs(image, more_brightness, 1, 64)\ncv2.convertScaleAbs(image, less_brightness, 1, -64)\n```", "```py\nGamma = 1.5\ng_1_5 = np.array(255 * (image / 255) ** (1 / Gamma), dtype='uint8')\nGamma = 0.7\ng_0_7 = np.array(255 * (image / 255) ** (1 / Gamma), dtype='uint8')\n```", "```py\ncv2.rectangle(image, (x, y), (x + w, y + h), (255, 255, 255), 2)\n```", "```py\ncv2.putText(image, 'Text', (x, y), cv2.FONT_HERSHEY_PLAIN, 2, clr)\n```", "```py\nhog = cv2.HOGDescriptor()det = cv2.HOGDescriptor_getDefaultPeopleDetector()\nhog.setSVMDetector(det)\n```", "```py\n(boxes, weights) = hog.detectMultiScale(image, winStride=(1, 1), padding=(0, 0), scale=1.05)\n```", "```py\nimage_points = []   # 2D points object_points = []  # 3D points coords = np.zeros((1, nX * nY, 3), np.float32)coords[0,:,:2] = np.mgrid[0:nY, 0:nX].T.reshape(-1, 2)\n```", "```py\nfound, corners = cv2.findChessboardCorners(image, (nY, nX), None)\n```", "```py\nout = cv2.drawChessboardCorners(image, (nY, nX), corners, True)object_points.append(coords)   # Save 3d points image_points.append(corners)   # Save corresponding 2d points\n```", "```py\nret, mtx, dist, rvecs, tvecs = cv2.calibrateCamera(object_points, image_points, shape[::-1], None, None)\n```", "```py\ndst = cv2.undistort(image, mtx, dist, None, mtx)\n```", "```py\ncorners = cv2.cornerSubPix(image, corners, (11, 11), (-1, -1), (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 30, 0.001))\n```"]