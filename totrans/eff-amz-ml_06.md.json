["```py\n{S3 location of the batch prediction input file.csv : S3 location of the prediction results file}\n\n```", "```py\n{\"s3://aml.packt/data/ch6_titanic_heldout.csv\":\"s3://aml.packt/batch-prediction/result/bp-yTDNSArMqa6-ch6_titanic_heldout.csv.gz\"}\n\n```", "```py\n{\"s3://examplebucket/input/data1.csv\":\"s3://examplebucket/output/batch-prediction/result/bp-example-data1.csv.gz\", \"s3://examplebucket/input/data2.csv\":\"\n s3://examplebucket/output/batch-prediction/result/bp-example-data2.csv.gz\", \"s3://examplebucket/input/data3.csv\":\"\n s3://examplebucket/output/batch-prediction/result/bp-example-data3.csv.gz\"}\n\n```", "```py\nimport pandas as pd  \nfrom sklearn import metrics\n\n# open file the csv file on your local\ndf = pd.read_csv(path/location_of_the_unzipped_results_csv_file)\n\n# calculate the true and false positive rate\nfpr, tpr, threshold = metrics.roc_curve(df.trueLabel, df.score)\nroc_auc = metrics.auc(fpr, tpr)\n\n```", "```py\npip install awscli\n\n```", "```py\naws configure\n\n```", "```py\naws {service name} {command} {parameters}\n\n```", "```py\naws s3 ls aml.packt\n\n```", "```py\npip install boto3\n\n```", "```py\nimport boto3\nclient = boto3.client('machinelearning')\n\n```", "```py\nimport boto3\nimport json  # for parsing the returned predictions\n\n# Initialize the client\nclient = boto3.client('machinelearning')\n\n# The endpoint url is obtained from the model summary\nendpoint_url = \"https://realtime.machinelearning.us-east-1.amazonaws.com/\"\n\n# replace with your own model ID\nmodel_id = \"ml-kJmiRxxxxxx\" \n\n# The actual sample to be predicted. JSON formatted\nrecord = { \"nature\": \"Hello world, my name is Alex\" }\n\n```", "```py\nresponse = client.predict(    \n   MLModelId         = model_id,\n   Record               = record,\n   PredictEndpoint = endpoint_url\n)\n\n```", "```py\nprint(json.dumps(response, indent=4))\n\n```", "```py\n{\n   \"ResponseMetadata\": {\n       \"RetryAttempts\": 0,\n       \"HTTPHeaders\": {\n           \"content-type\": \"application/x-amz-json-1.1\",\n           \"content-length\": \"143\",\n           \"date\": \"Tue, 10 Jan 2017 16:20:49 GMT\",\n           \"x-amzn-requestid\": \"bfab2af0-d750-11e6-b8c2-45ac3ab2f186\"\n       },\n       \"HTTPStatusCode\": 200,\n       \"RequestId\": \"bfab2af0-d750-11e6-b8c2-45ac3ab2f186\"\n   },\n   \"Prediction\": {\n       \"predictedScores\": {\n           \"0\": 0.001197131467051804\n       },\n       \"predictedLabel\": \"0\",\n       \"details\": {\n           \"PredictiveModelType\": \"BINARY\",\n           \"Algorithm\": \"SGD\"\n       }\n   }\n}\n\n```", "```py\n{    \n    \"predictedScores\": { \"1\": 0.810875654220581 },\n    \"predictedLabel\": \"1\",\n}\n\n```", "```py\nimport boto3\nimport json\nimport pandas as pd\n\n# Initialize the Service, the Model ID and the endpoint url\nclient = boto3.client('machinelearning')\n# replace with your own endpoint url and model ID\nendpoint_url = \"https://realtime.machinelearning.us-east-1.amazonaws.com\"\nmodel_id = \"ml-kJmiRHyn1UM\"\n\n# Memorize which class is spam and which is ham\nspam_label = {'0': 'ham', '1':'spam'}\n\n# Load the held out dataset into a panda DataFrame\ndf = pd.read_csv('held-out.csv')\n\n# Loop over each DataFrame rows    \nfor index, row in df.iterrows():\n   # The record\n   record = { \"body\": row['sms'] }\n   response = client.predict(    \n       MLModelId       = model_id,\n       Record          = record,\n       PredictEndpoint = endpoint_url\n   )\n\n   # get the label and score from the response\n   predicted_label = response['Prediction']['predictedLabel']\n   predicted_score = response['Prediction']['predictedScores'][predicted_label]\n   print(\"[%s] %s (%0.2f):t %s \"% (spam_label[str(row['nature'])],\n                               spam_label[predicted_label],\n                               predicted_score,\n                               row['sms'] )\n   )\n\n```", "```py\n[Predicted class] trueLabel (spam probability):      SMS message  \n\n```"]