["```py\n    PM25 <- read.csv(\"PRSA_data_2010.1.1-2014.12.31.csv\")\n    ```", "```py\n    library(dplyr)\n    library(lubridate)\n    library(tidyr)\n    library(ggplot2)\n    library(grid)\n    library(zoo)\n    ```", "```py\n    PM25$datetime <- with(PM25, ymd_h(sprintf('%04d%02d%02d%02d', year, month, day,hour)))\n    ```", "```py\n    PM25_subset <- na.omit(PM25[,c(\"datetime\",\"pm2.5\")])\n    ```", "```py\n    PM25_three_hour_pm25_avg <- rollapply(zoo(PM25_subset$pm2.5,PM25_subset$datetime), 3, mean)\n    ```", "```py\n    PM25_three_hour_pm25_avg <- as.data.frame(PM25_three_hour_pm25_avg)\n    ```", "```py\n    PM25_three_hour_pm25_avg$timestamp <- row.names(PM25_three_hour_pm25_avg)\n    ```", "```py\n    row.names(PM25_three_hour_pm25_avg) <- NULL\n    ```", "```py\n    colnames(PM25_three_hour_pm25_avg) <- c(\"avg_pm25\",\"timestamp\")\n    ```", "```py\n    PM25_three_hour_pm25_avg$pollution_level <- ifelse(PM25_three_hour_pm25_avg$avg_pm25 <= 35, 0,1)\n    ```", "```py\n    r_index <- sample(nrow(PM25_three_hour_pm25_avg),10)\n    ```", "```py\n    PM25_three_hour_pm25_avg[r_index,]\n    ##        avg_pm25           timestamp pollution_level\n    ## 405   399.33333 2010-01-18 21:00:00               1\n    ## 3694  142.33333 2010-06-14 23:00:00               1\n    ## 8072   14.33333 2010-12-31 05:00:00               0\n    ## 3502  107.00000 2010-06-01 14:00:00               1\n    ## 20828  80.33333 2012-07-21 16:00:00               1\n    ## 32010  95.66667 2013-11-15 20:00:00               1\n    ## 3637  103.33333 2010-06-12 14:00:00               1\n    ## 4736  192.66667 2010-07-29 11:00:00               1\n    ## 22053  37.33333 2012-09-17 19:00:00               1\n    ## 7135   32.33333 2010-11-22 02:00:00               0\n    ```", "```py\nggplot(PM25_three_hour_pm25_avg, aes(x=avg_pm25)) +   geom_histogram(binwidth = 30,color=\"darkblue\", fill=\"lightblue\")\n```", "```py\n    avg_pm25 <- PM25_three_hour_pm25_avg$avg_pm25\n    quartiles = quantile(round(avg_pm25), seq(0,1, .25), include.lowest=T)\n    ```", "```py\n    ggplot(PM25_three_hour_pm25_avg, aes(x=avg_pm25))+  geom_histogram(binwidth = 30,color=\"darkblue\", fill=\"lightblue\")+    geom_vline(xintercept=quartiles,            color=\"blue\", linetype=\"dashed\", size=1)\n    ```", "```py\n    PM25_three_hour_pm25_avg$avg_pm25_quartiles <- as.integer(cut(avg_pm25,breaks=quantile(round(avg_pm25), seq(0,1, .25), include.lowest=T)))\n    ```", "```py\n    OzoneData <- read.csv(\"ozone1.csv\", stringsAsFactors=F)\n    ```", "```py\n    library(caret)\n    ```", "```py\n    OzoneData$Day_of_week <- as.factor(OzoneData$Day_of_week) \n    OzoneData_OneHot <- dummyVars(\" ~ .\", data = OzoneData)\n    ```", "```py\n    OzoneData_OneHot <- data.frame(predict(OzoneData_OneHot, newdata = OzoneData))\n    ```", "```py\n    head(OzoneData_OneHot)\n    ```", "```py\n    ##   Month Day_of_month Day_of_week.1 Day_of_week.2 Day_of_week.3\n    ## 1     1            1             0             0             0\n    ## 2     1            2             0             0             0\n    ## 3     1            3             0             0             0\n    ## 4     1            4             0             0             0\n    ## 5     1            5             1             0             0\n    ## 6     1            6             0             1             0\n    ##   Day_of_week.4 Day_of_week.5 Day_of_week.6 Day_of_week.7 ozone_reading\n    ## 1             1             0             0             0             3\n    ## 2             0             1             0             0             3\n    ## 3             0             0             1             0             3\n    ## 4             0             0             0             1             5\n    ## 5             0             0             0             0             5\n    ## 6             0             0             0             0             6\n    ##   pressure_height Wind_speed Humidity Temperature_Sandburg\n    ## 1            5480          8 20.00000             40.53473\n    ## 2            5660          6 40.96306             38.00000\n    ## 3            5710          4 28.00000             40.00000\n    ## 4            5700          3 37.00000             45.00000\n    ## 5            5760          3 51.00000             54.00000\n    ## 6            5720          4 69.00000             35.00000\n    ##   Temperature_ElMonte Inversion_base_height Pressure_gradient\n    ## 1            39.77461              5000.000               -15\n    ## 2            46.74935              4108.904               -14\n    ## 3            49.49278              2693.000               -25\n    ## 4            52.29403               590.000               -24\n    ## 5            45.32000              1450.000                25\n    ## 6            49.64000              1568.000                15\n    ##   Inversion_temperature Visibility\n    ## 1              30.56000        200\n    ## 2              48.02557        300\n    ## 3              47.66000        250\n    ## 4              55.04000        100\n    ## 5              57.02000         60\n    ## 6              53.78000         60\n    ```", "```py\n    ##   No year month day hour pm2.5 DEWP TEMP PRES   Iws Is Ir cbwd.cv cbwd.NE\n    ## 1  1 2010     1   1    0    NA  -21  -11 1021  1.79  0  0       0       0\n    ## 2  2 2010     1   1    1    NA  -21  -12 1020  4.92  0  0       0       0\n    ## 3  3 2010     1   1    2    NA  -21  -11 1019  6.71  0  0       0       0\n    ## 4  4 2010     1   1    3    NA  -21  -14 1019  9.84  0  0       0       0\n    ## 5  5 2010     1   1    4    NA  -20  -12 1018 12.97  0  0       0       0\n    ## 6  6 2010     1   1    5    NA  -19  -10 1017 16.10  0  0       0       0\n    ##   cbwd.NW cbwd.SE\n    ## 1       1       0\n    ## 2       1       0\n    ## 3       1       0\n    ## 4       1       0\n    ## 5       1       0\n    ## 6       1       0\n    ```", "```py\n#Natural Log\nlog(10000)\n## [1] 9.21034\n# 10 times bigger value\nlog(100000)\n## [1] 11.51293\n# 100 times bigger value\nlog(1000000)\n## [1] 13.81551\n```", "```py\n    ggplot(PM25_three_hour_pm25_avg, aes(x=avg_pm25))+  geom_histogram(color=\"darkblue\", fill=\"lightblue\")\n    ```", "```py\n    ggplot(PM25_three_hour_pm25_avg, aes(x=log_avg_pm25))+  geom_histogram(color=\"darkblue\", fill=\"lightblue\")\n    ```", "```py\n    OzoneData <- read.csv(\"ozone1.csv\", stringsAsFactors=F)\n    ```", "```py\n    path=\"C:\\\\Program Files\\\\Java\\\\jdk1.8.0_92\"\n    ```", "```py\n    if (Sys.getenv(\"JAVA_HOME\")!=\"\")  Sys.setenv(JAVA_HOME=path)\n    ```", "```py\n    install.packages(\"rJava\")\n    install.packages(\"FSelector\")\n    ```", "```py\n    library(rJava)\n    ## Warning: package 'rJava' was built under R version 3.2.5\n    library(FSelector)#For method\n    library(mlbench)# For data\n    ```", "```py\n    weights<- chi.squared(ozone_reading~., OzoneData)\n    ```", "```py\n    print(weights)\n    ```", "```py\n    ##                       attr_importance\n    ## Month                       0.4240813\n    ## Day_of_month                0.0000000\n    ## Day_of_week                 0.0000000\n    ## pressure_height             0.4315521\n    ## Wind_speed                  0.0000000\n    ## Humidity                    0.3923034\n    ## Temperature_Sandburg        0.5191951\n    ## Temperature_ElMonte         0.5232244\n    ## Inversion_base_height       0.6160403\n    ## Pressure_gradient           0.4120630\n    ## Inversion_temperature       0.5283836\n    ## Visibility                  0.4377749\n    ```", "```py\n    subset<- cutoff.k(weights, 5)\n    ```", "```py\n    f<- as.simple.formula(subset, \"Class\")\n    print(f)\n    ```", "```py\n    ## Class ~ Inversion_base_height + Inversion_temperature + Temperature_ElMonte + \n    ##     Temperature_Sandburg + Visibility\n    ## <environment: 0x000000001a796d18>\n    ```", "```py\n    library(mlbench)\n    library(caret)\n    ```", "```py\n    ## Warning: package 'caret' was built under R version 3.2.5\n    ## Loading required package: lattice\n    ```", "```py\n    correlationMatrix <- cor(OzoneData)\n    ```", "```py\n    print(correlationMatrix)\n    ```", "```py\n    ##                              Month Day_of_month  Day_of_week ozone_reading\n    ## Month                  1.000000000   0.00644330 -0.007345951   0.054521859\n    ## Day_of_month           0.006443300   1.00000000  0.002679760   0.079493243\n    ## Day_of_week           -0.007345951   0.00267976  1.000000000  -0.042135770\n    ## ozone_reading          0.054521859   0.07949324 -0.042135770   1.000000000\n    ```", "```py\n    highlyCorrelated <- findCorrelation(correlationMatrix, cutoff=0.5)\n    ```", "```py\n    print(highlyCorrelated)\n    ```", "```py\n    ## [1] 12  9  8  5  4  7\n    ```", "```py\n    library(corrplot)\n    ```", "```py\n    corrplot(correlationMatrix)\n    ```", "```py\n    library(party)\n    ```", "```py\n    cf1 <- cforest(pm2.5 ~ . , data= na.omit(PM25[,c(\"month\",\"DEWP\",\"TEMP\",\"PRES\",\"Iws\",\"pm2.5\")]), control=cforest_unbiased(mtry=2,ntree=50)) \n    ```", "```py\n    varimp(cf1)\n    ```", "```py\n    ##    month     DEWP     TEMP     PRES      Iws \n    ## 3736.679 5844.172 4080.546 1517.037 1388.532\n    ```", "```py\n    library(randomForest)\n    ```", "```py\n    pm25_model_rf <- randomForest(pm2.5 ~ . , data = na.omit(PM25[,c(\"month\",\"DEWP\",\"TEMP\",\"PRES\",\"Iws\",\"pm2.5\")]), ntree=25,importance=TRUE, nodesize=5)\n    ```", "```py\n    pm25_model_rf\n    ```", "```py\n    ## \n    ## Call:\n    ##  randomForest(formula = pm2.5 ~ ., data = na.omit(PM25[, c(\"month\",      \"DEWP\", \"TEMP\", \"PRES\", \"Iws\", \"pm2.5\")]), ntree = 25, importance = TRUE,      nodesize = 5) \n    ##                Type of random forest: regression\n    ##                      Number of trees: 25\n    ## No. of variables tried at each split: 1\n    ## \n    ##           Mean of squared residuals: 3864.177\n    ##                     % Var explained: 54.39\n    ```", "```py\n    pm25_model_rf$rsq\n    ```", "```py\n    ##  [1] 0.2917119 0.3461415 0.3938242 0.4240572 0.4335932 0.4445404 0.4552216\n    ##  [8] 0.4735218 0.4878105 0.4998751 0.5079323 0.5156195 0.5197153 0.5228638\n    ## [15] 0.5286556 0.5305679 0.5312043 0.5341559 0.5374104 0.5397305 0.5421712\n    ## [22] 0.5434857 0.5430657 0.5435383 0.5439461\n    ```", "```py\n    varImpPlot(pm25_model_rf)\n    ```", "```py\n    dim(OzoneData)\n    ```", "```py\n    ## [1] 366  13\n    ```", "```py\n    colnames(OzoneData)\n    ```", "```py\n    ##  [1] \"Month\"                 \"Day_of_month\"         \n    ##  [3] \"Day_of_week\"           \"ozone_reading\"        \n    ##  [5] \"pressure_height\"       \"Wind_speed\"           \n    ##  [7] \"Humidity\"              \"Temperature_Sandburg\" \n    ##  [9] \"Temperature_ElMonte\"   \"Inversion_base_height\"\n    ## [11] \"Pressure_gradient\"     \"Inversion_temperature\"\n    ## [13] \"Visibility\"\n    ## [1] 50  4\n    ```", "```py\n    apply(OzoneData,2,mean)\n    ```", "```py\n    ##                 Month          Day_of_month           Day_of_week \n    ##              6.513661             15.756831              4.002732 \n    ##         ozone_reading       pressure_height            Wind_speed \n    ##             11.582020           5752.448016              4.868852 \n    ##              Humidity  Temperature_Sandburg   Temperature_ElMonte \n    ##             58.295691             61.858629             57.219990 \n    ## Inversion_base_height     Pressure_gradient Inversion_temperature \n    ##           2596.265137             17.785440             61.005339 \n    ##            Visibility \n    ##            123.300546\n    ```", "```py\n    apply(OzoneData,2,var) \n    ```", "```py\n    ##                 Month          Day_of_month           Day_of_week \n    ##          1.194365e+01          7.785578e+01          3.991773e+00 \n    ##         ozone_reading       pressure_height            Wind_speed \n    ##          6.243605e+01          1.092618e+04          4.481383e+00 \n    ##              Humidity  Temperature_Sandburg   Temperature_ElMonte \n    ##          3.861494e+02          2.039533e+02          1.109866e+02 \n    ## Inversion_base_height     Pressure_gradient Inversion_temperature \n    ##          3.115312e+06          1.300448e+03          1.871074e+02 \n    ##            Visibility \n    ##          6.444901e+03\n    ```", "```py\n    pca.out<-prcomp(OzoneData,scale=TRUE)\n    ```", "```py\n    summary(pca.out)\n    ```", "```py\n    ## Importance of components:\n    ##                           PC1    PC2     PC3     PC4     PC5     PC6\n    ## Standard deviation     2.2817 1.4288 1.05944 1.01842 1.00160 0.93830\n    ## Proportion of Variance 0.4005 0.1570 0.08634 0.07978 0.07717 0.06772\n    ## Cumulative Proportion  0.4005 0.5575 0.64386 0.72364 0.80081 0.86853\n    ##                            PC7     PC8     PC9    PC10    PC11    PC12\n    ## Standard deviation     0.74291 0.64513 0.54523 0.48134 0.33068 0.25908\n    ## Proportion of Variance 0.04246 0.03202 0.02287 0.01782 0.00841 0.00516\n    ## Cumulative Proportion  0.91099 0.94301 0.96587 0.98369 0.99211 0.99727\n    ##                           PC13\n    ## Standard deviation     0.18840\n    ## Proportion of Variance 0.00273\n    ## Cumulative Proportion  1.00000\n    ```", "```py\n    library(devtools)\n    install_github(\"vqv/ggbiplot\", force=TRUE)\n    library(ggbiplot)\n    ggbiplot(pca.out)\n    ```", "```py\nbiplot(pca.out,scale = 0, cex=0.65)\n```", "```py\n    install.packages(\"Hmisc\")\n    ```", "```py\n    library(Hmisc)\n    set.seed(1)\n    ```", "```py\n    Ozone_var_clust <- varclus(as.matrix(OzoneData), similarity=\"spear\")\n    Ozone_var_clust\n    ```", "```py\n    ## varclus(x = as.matrix(OzoneData), similarity = \"spear\")\n    ## \n    ## \n    ## Similarity matrix (Spearman rho^2)\n    ## \n    ##                       Month Day_of_month Day_of_week ozone_reading\n    ## Month                  1.00         0.00        0.00          0.00\n    ## Day_of_month           0.00         1.00        0.00          0.01\n    ## Day_of_week            0.00         0.00        1.00          0.00\n    ## ozone_reading          0.00         0.01        0.00          1.00\n    ## pressure_height        0.12         0.00        0.00          0.36\n    ## Wind_speed             0.04         0.01        0.00          0.00\n    ## Humidity               0.01         0.00        0.00          0.20\n    ## Temperature_Sandburg   0.05         0.01        0.00          0.63\n    ## Temperature_ElMonte    0.07         0.00        0.00          0.59\n    ## Inversion_base_height  0.00         0.01        0.00          0.32\n    ## Pressure_gradient      0.03         0.00        0.00          0.06\n    ## Inversion_temperature  0.04         0.01        0.00          0.54\n    ## Visibility             0.04         0.02        0.01          0.20\n    ##                       pressure_height Wind_speed Humidity\n    ## Month                            0.12       0.04     0.01\n    ## Day_of_month                     0.00       0.01     0.00\n    ## Day_of_week                      0.00       0.00     0.00\n    ## ozone_reading                    0.36       0.00     0.20\n    ## pressure_height                  1.00       0.02     0.03\n    ## Wind_speed                       0.02       1.00     0.03\n    ## Humidity                         0.03       0.03     1.00\n    <Output Truncated for brevity>\n    ## hclust results (method=complete)\n    ## \n    ## \n    ## Call:\n    ## hclust(d = as.dist(1 - x), method = method)\n    ## \n    ## Cluster method   : complete \n    ## Number of objects: 13\n    ```", "```py\n    print(round(Ozone_var_clust$sim,2))\n    ```", "```py\n    ##                       Month Day_of_month Day_of_week ozone_reading\n    ## Month                  1.00         0.00        0.00          0.00\n    ## Day_of_month           0.00         1.00        0.00          0.01\n    ## Day_of_week            0.00         0.00        1.00          0.00\n    ## ozone_reading          0.00         0.01        0.00          1.00\n    ## pressure_height        0.12         0.00        0.00          0.36\n    ## Wind_speed             0.04         0.01        0.00          0.00\n    ## Humidity               0.01         0.00        0.00          0.20\n    ## Temperature_Sandburg   0.05         0.01        0.00          0.63\n    ## Temperature_ElMonte    0.07         0.00        0.00          0.59\n    ## Inversion_base_height  0.00         0.01        0.00          0.32\n    ## Pressure_gradient      0.03         0.00        0.00          0.06\n    ```", "```py\nplot(Ozone_var_clust)\n```", "```py\n    PM25_for_LDA <- merge(PM25_three_hour_pm25_avg, PM25[,c(\"datetime\",\"TEMP\",\"DEWP\",\"PRES\",\"Iws\",\"cbwd\",\"Is\",\"Ir\")], by.x = \"timestamp\",by.y = \"datetime\")\n    PM25_for_LDA = PM25_for_LDA[,c(\"TEMP\",\"PRES\",\"DEWP\",\"Iws\",\"Is\",\"Ir\",\"pollution_level\")]\n    ```", "```py\n    index = sample(1:nrow(PM25_for_LDA), round(nrow(PM25_for_LDA)*0.6 ), replace = FALSE)\n    LDA_train = PM25_for_LDA[ index, ]\n    LDA_test = PM25_for_LDA[ -index, ]\n    ```", "```py\n    library(MASS)\n    ```", "```py\n    LDA_model = lda( pollution_level ~ ., data = LDA_train )\n    projected_data = as.matrix( LDA_train[, 1:6] ) %*%  LDA_model$scaling\n    ```", "```py\n    set.seed(100)\n    index <- sample(nrow(projected_data),100, replace = FALSE)\n    plot( projected_data[index], col = LDA_train[,7], pch = 19 )\n    ```", "```py\n    LDA_test_reduced = LDA_test[, !( names( LDA_test ) %in% c( \"pollution_level\" ) ) ]  \n    LDA_model_results = predict( LDA_model, LDA_test_reduced )\n    ```", "```py\n    library( caret )\n    c_t = table( LDA_model_results$class, LDA_test$pollution_level )\n    print( confusionMatrix( c_t ) )\n    ```", "```py\n    ## Confusion Matrix and Statistics\n    ## \n    ##    \n    ##         0     1\n    ##   0  2359   978\n    ##   1  2257 11108\n    ##                                           \n    ##                Accuracy : 0.8063          \n    ##                  95% CI : (0.8002, 0.8123)\n    ##     No Information Rate : 0.7236          \n    ##     P-Value [Acc > NIR] : < 2.2e-16       \n    ##                                           \n    ##                   Kappa : 0.4704          \n    ##  Mcnemar's Test P-Value : < 2.2e-16       \n    ##                                           \n    ##             Sensitivity : 0.5110          \n    ##             Specificity : 0.9191          \n    ##          Pos Pred Value : 0.7069          \n    ##          Neg Pred Value : 0.8311          \n    ##              Prevalence : 0.2764          \n    ##          Detection Rate : 0.1412          \n    ##    Detection Prevalence : 0.1998          \n    ##       Balanced Accuracy : 0.7151          \n    ##                                           \n    ##        'Positive' Class : 0               \n    ## \n    ```", "```py\n    new_LDA_train = as.matrix( LDA_train[,1:6] ) %*%\n      LDA_model$scaling\n    new_LDA_train = as.data.frame( new_LDA_train )\n    new_LDA_train$pollution_level = LDA_train$pollution_level\n    ```", "```py\n    new_LDA_test = as.matrix( LDA_test[,1:6] ) %*%\n      LDA_model$scaling\n    new_LDA_test = as.data.frame( new_LDA_test )\n    new_LDA_test$pollution_level = LDA_test$pollution_level\n    ```", "```py\n    PM25_logit_model_on_LDA <- glm(pollution_level ~ ., data = new_LDA_train,family=binomial(link='logit'))\n    ```", "```py\n    predicted_LDA = predict(PM25_logit_model_on_LDA, newdata = new_LDA_test,type=\"response\")\n    ```", "```py\n    predicted <- ifelse(predicted_LDA>0.5, 1,0)\n    actual <- new_LDA_test$pollution_level\n    ```", "```py\n    confusionMatrix(predicted, actual)\n    ```", "```py\n    ## Confusion Matrix and Statistics\n    ## \n    ##           Reference\n    ## Prediction     0     1\n    ##          0  2316   947\n    ##          1  2300 11139\n    ##                                           \n    ##                Accuracy : 0.8056          \n    ##                  95% CI : (0.7995, 0.8116)\n    ##     No Information Rate : 0.7236          \n    ##     P-Value [Acc > NIR] : < 2.2e-16       \n    ##                                           \n    ##                   Kappa : 0.4655          \n    ##  Mcnemar's Test P-Value : < 2.2e-16       \n    ##                                           \n    ##             Sensitivity : 0.5017          \n    ##             Specificity : 0.9216          \n    ##          Pos Pred Value : 0.7098          \n    ##          Neg Pred Value : 0.8289          \n    ##              Prevalence : 0.2764          \n    ##          Detection Rate : 0.1387          \n    ##    Detection Prevalence : 0.1954          \n    ##       Balanced Accuracy : 0.7117          \n    ##                                           \n    ##        'Positive' Class : 0               \n    ##\n    ```"]