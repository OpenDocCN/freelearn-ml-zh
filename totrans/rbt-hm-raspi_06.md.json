["```py\nimport time\nimport board\nimport rp2pio\nimport adafruit_pioasm\n```", "```py\nled_flash = \"\"\"\n    pull\n    out pins, 1\n\"\"\"\n```", "```py\nassembled = adafruit_pioasm.assemble(led_flash)\n```", "```py\nsm = rp2pio.StateMachine(\n    assembled,\n    frequency=2000,\n    first_out_pin=board.LED,\n)\n```", "```py\nwhile True:\n    sm.write(bytes([1]))\n    time.sleep(0.5)\n    sm.write(bytes([0]))\n    time.sleep(0.5)\n```", "```py\nimport board\nimport time \nimport rp2pio\nimport adafruit_pioasm\nimport array\n```", "```py\npio_input = \"\"\"\n.program pio_input\n    in pins, 1      ; read in pin (into ISR)\n    push noblock    ; put this into input FIFO\n\"\"\"\nassembled = adafruit_pioasm.assemble(pio_input)\nsm = rp2pio.StateMachine(\n    assembled,\n    frequency=2000,\n    first_in_pin=board.GP20\n)\n```", "```py\nbuffer = array.array('I', [0])\n```", "```py\nwhile True:\n    sm.readinto(buffer)\n    print(f\"{buffer[0]:032b}\")\n    time.sleep(0.1)\n```", "```py\npio_input = \"\"\"\n.program pio_input\n    in pins, 2      ; read in two pins (into ISR)\n    push noblock    ; put ISR into input FIFO\n\"\"\"\n```", "```py\n11000000000000000000000000000000\n01000000000000000000000000000000 \n10000000000000000000000000000000 \n00000000000000000000000000000000 \n```", "```py\nprogram = \"\"\"\n    set y, 21 \n    mov isr, y \n    push noblock \n\"\"\"\nassembled = adafruit_pioasm.assemble(program)\n```", "```py\nsm = rp2pio.StateMachine(assembled, frequency=2000)\n```", "```py\nbuffer = array.array('I', [0])\nsm.readinto(buffer)\nprint(\"{0} 0b{0:032b}\".format(buffer[0]))\n```", "```py\ncode.py output:\n21 0b00000000000000000000000000010101\nCode done running.\n```", "```py\n    set y, 21\n    mov isr, :: y\n    push noblock\n```", "```py\n2818572288 0b10101000000000000000000000000000\n```", "```py\n    set y, 21 \n    mov isr, ~ y \n    push noblock\n```", "```py\n4294967274 0b11111111111111111111111111101010\n```", "```py\nbuffer = array.array('i', [0])\n```", "```py\n-22 0b-0000000000000000000000000010110\n```", "```py\n  in x, 30\n  in null, 31\n```", "```py\nimport rp2pio\nimport adafruit_pioasm\nimport array\nbit_to_extract = 30\n```", "```py\nprogram = f\"\"\"\n    pull block\n    in osr, {bit_to_extract}\n    in null, 31\n    push noblock\n\"\"\"\n```", "```py\nassembled = adafruit_pioasm.assemble(program)\nsm = rp2pio.StateMachine(assembled, frequency=2000)\nsm.write(array.array('I',\n  [0b01101000_00000000_00000000_00000000]))\nbuffer = array.array('I', [0])\nsm.readinto(buffer)\nprint(\"{0} 0b{0:032b}\".format(buffer[0]))\n```", "```py\n1 0b00000000000000000000000000000001\n```", "```py\n    set y, 21\n    jmp y--, fake\nfake:\n    mov isr, y\n    push noblock\n```", "```py\n20 0b00010100\n```", "```py\n    set y, 21\n    mov y, ~ y\n    jmp y--, fake\nfake:\n    mov isr, ~ y\n    push noblock\n```", "```py\n22 0b00010110\n```", "```py\nimport board\nimport rp2pio\nimport adafruit_pioasm\nimport array\n```", "```py\nprogram = \"\"\"\n    set y, 0\n```", "```py\nread:\n    mov x, y \n    in null, 32 \n    in pins, 2\n```", "```py\n    mov y, isr\n    jmp x!=y different\n    jmp read\n```", "```py\ndifferent:\n    push noblock\n    jmp read\n\"\"\"\n```", "```py\nassembled = adafruit_pioasm.assemble(program)\nsm = rp2pio.StateMachine(\n    assembled,\n    frequency=20000,\n    first_in_pin=board.GP20,\n    in_pin_count=2\n)\nbuffer = array.array('I', [0])\nwhile True:\n    sm.readinto(buffer)\n    print(\"{:032b}\".format(buffer[0]))\n```", "```py\n00000000000000000000000000000000\n01000000000000000000000000000000\n11000000000000000000000000000000\n10000000000000000000000000000000\n00000000000000000000000000000000\n01000000000000000000000000000000\n11000000000000000000000000000000\n10000000000000000000000000000000\n00000000000000000000000000000000\n```", "```py\nprogram = \"\"\"\n    set y, 0            ; clear y\n    mov osr, y          ; and clear osr\nread:\n    mov x, y\n    in null, 32\n    in pins, 2\n    mov y, isr\n    jmp x!=y, different\n    jmp read\n```", "```py\ndifferent:\n    in x, 31\n    in null, 31\n    mov x, isr\n    jmp !x, c1_old_zero\n```", "```py\nc1_old_not_zero:\n\tjmp pin, count_up\n\tjmp count_down\n```", "```py\nc1_old_zero:\n\tjmp pin, count_down\n\t; fall through\n```", "```py\ncount_up:\n    mov x, ~ osr \n    jmp x--, fake\nfake:\n    mov x, ~ x\n    jmp send\n```", "```py\ncount_down:\n    mov x, osr \n    jmp x--, send\n```", "```py\nsend:\n    mov isr, x \n    push noblock \n    mov osr, x \n    jmp read\n\"\"\"\n```", "```py\nassembled = adafruit_pioasm.assemble(program)\nleft_enc = rp2pio.StateMachine(\n    assembled,\n    frequency=0,\n    first_in_pin=board.GP20,\n    jmp_pin=board.GP21,\n    in_pin_count=2\n)\nright_enc = rp2pio.StateMachine(\n    assembled,\n    frequency=0,\n    first_in_pin=board.GP26,\n    jmp_pin=board.GP27,\n    in_pin_count=2\n)\n```", "```py\nbuffer = array.array('i', [0])\nleft_data = 0\nright_data = 0\n```", "```py\nwhile True:\n    if left_enc.in_waiting:\n        left_enc.readinto(buffer)\n        left_data = buffer[0]\n        print(left_data, right_data)\n```", "```py\n    if right_enc.in_waiting:\n        right_enc.readinto(buffer)\n        right_data = buffer[0]\n        print(left_data, right_data)\n```", "```py\n36   77\n36   78\n36   79\n36   80\n36   81\n36   82\n```", "```py\nimport rp2pio\nimport adafruit_pioasm\nimport array\nprogram = \"\"\"\n    set y, 0\n    mov osr, y\nread:\n    mov x, y\n    in null, 32\n    in pins, 2\n    mov y, isr\n    jmp x!=y, different\n    jmp read\ndifferent:\n    in x, 31\n    in null, 31\n    mov x, isr\n    jmp !x, c1_old_zero\nc1_old_not_zero:\n    jmp pin, count_up\n    jmp count_down\nc1_old_zero:\n    jmp pin, count_down\n    ; fall through\ncount_up:\n    mov x, ~ osr\n    jmp x--, fake\nfake:\n    mov x, ~ x\n    jmp send\ncount_down:\n    mov x, osr\n    jmp x--, send\nsend:\n    mov isr, x\n    push noblock\n    mov osr, x\n    jmp read\n\"\"\"\nassembled = adafruit_pioasm.assemble(program)\n```", "```py\nclass QuadratureEncoder:\n  def __init__(self, first_pin, second_pin, reversed=False):\n    \"\"\"Encoder with 2 pins. Must use sequential pins on the board\"\"\"\n    self.sm = rp2pio.StateMachine(\n        assembled,\n        frequency=0,\n        first_in_pin=first_pin,\n        jmp_pin=second_pin,\n        in_pin_count=2\n    )\n    self.reversed = reversed\n    self._buffer = array.array('i', [0])\n```", "```py\n  def read(self):\n    while self.sm.in_waiting:\n      self.sm.readinto(self._buffer)\n    if self.reversed:\n      return -self._buffer[0]\n    else:\n      return self._buffer[0]\n```", "```py\nimport board\nimport pwmio\nimport pio_encoder\n```", "```py\nright_motor = motor_A1, motor_A2\nleft_motor = motor_B1, motor_B2\nright_encoder = pio_encoder.QuadratureEncoder(board.GP20, board.GP21, reversed=True)\nleft_encoder = pio_encoder.QuadratureEncoder(board.GP26, board.GP27)\n```", "```py\nimport time \nimport robot\nrobot.set_left(0.8)\nrobot.set_right(0.8)\ntime.sleep(1)\nrobot.stop()\nprint(robot.left_encoder.read(), robot.right_encoder.read())\n```", "```py\ncode.py output:\n4443 4522\n```"]