["```py\npip install librosa\n```", "```py\nfrom scipy.io import wavfile\nimport matplotlib.pyplot as plt\nsample_rate, data = wavfile.read('cat_1.wav')\nprint(sample_rate)\nprint(data)\n#Visulize the wave form\nplt.figure(figsize=(8, 4))\nplt.plot(data)\nplt.title('Waveform')\nplt.xlabel('Sample')\nplt.ylabel('Amplitude')\nplt.show()\n```", "```py\n#   Audio player\n    audio_player = Audio(data=data, rate=sample_rate)\n    display(audio_player)\n```", "```py\n# Load the audio file\naudio_file_path = \"../PacktPublishing/DataLabeling/ch10/cats_dogs/cat_1.wav\"\n# Replace with the path to your audio file\ny, sr = librosa.load(audio_file_path)\n```", "```py\nD_original = librosa.amplitude_to_db(np.abs(librosa.stft(y)), ref=np.max)\nplt.figure(figsize=(12, 8))\nlibrosa.display.specshow(D_original,sr=sr, x_axis='time', y_axis='log')\nplt.colorbar(format='%+2.0f dB')\nplt.title('Original Spectrogram')\nplt.show()\n```", "```py\n# Apply background noise removal\ny_harmonic, y_percussive = librosa.effects.hpss(y)\ny_noise_removed = y - y_harmonic\n```", "```py\n# Display the spectrogram after background noise removal\nD_noise_removed = librosa.amplitude_to_db( \\\n    np.abs(librosa.stft(y_noise_removed)), ref=np.max)\nplt.figure(figsize=(12, 8))\nlibrosa.display.specshow(D_noise_removed, sr=sr, \\\n    x_axis='time', y_axis='log')\nplt.colorbar(format='%+2.0f dB')\nplt.title('Spectrogram after Background Noise Removal')\nplt.show()\n```", "```py\n# Convert the audio signal to a NumPy array\ny_noise_removed_np = np.asarray(y_noise_removed)\n# Save the cleaned audio file\noutput_file_path = \"../PacktPublishing/DataLabeling/ch10/cleaned_audio_file.wav\"\nwrite(output_file_path, sr, y_noise_removed_np)\n```", "```py\nimport librosa\nimport librosa.display\nimport matplotlib.pyplot as plt\n# Load an audio file\naudio_file = \"cat_1.wav\"\ny, sr = librosa.load(audio_file)\n# Extract the tempo\ntempo, _ = librosa.beat.beat_track(y=y, sr=sr)\nprint(f\"Tempo: {tempo} BPM\")\n```", "```py\nTempo: 89.10290948275862 BPM\n```", "```py\n# Calculate chroma feature\nchroma = librosa.feature.chroma_stft(y=y, sr=sr)\n# Display the chromagram\nplt.figure(figsize=(12, 4))\nlibrosa.display.specshow(chroma, y_axis='chroma', x_axis='time')\nplt.title(\"Chromagram\")\nplt.colorbar()\nplt.show()\n```", "```py\n# Calculate MFCC\nmfccs = librosa.feature.mfcc(y=y, sr=sr)\n# Display the MFCCs\nplt.figure(figsize=(12, 4))\nlibrosa.display.specshow(mfccs, x_axis='time')\nplt.title(\"MFCCs\")\nplt.colorbar()\nplt.show()\n```", "```py\n# Calculate zero-crossing rate\nzero_crossings_rate = librosa.feature.zero_crossing_rate(y)\nplt.figure(figsize=(12, 4))\nplt.semilogy(zero_crossings_rate.T)\nplt.title(\"Zero-Crossing Rate\")\nplt.show()\n```", "```py\n# Calculate spectral contrast\nspectral_contrast = librosa.feature.spectral_contrast(y=y, sr=sr)\n# Display the spectral contrast\nplt.figure(figsize=(12, 4))\nlibrosa.display.specshow(spectral_contrast, x_axis='time')\nplt.title(\"Spectral Contrast\")\nplt.colorbar()\nplt.show()\n```", "```py\nimport librosa\nimport librosa.display\nimport matplotlib.pyplot as plt\n# Load an audio file\naudio_file = \"sample_audio.wav\"\ny, sr = librosa.load(audio_file)\n# Create a waveform plot\nplt.figure(figsize=(12, 4))\nlibrosa.display.waveshow(y, sr=sr)\nplt.title(\"Audio Waveform\")\nplt.xlabel(\"Time (s)\")\nplt.ylabel(\"Amplitude\")\nplt.show()\n```", "```py\nimport librosa\nimport librosa.display\nimport matplotlib.pyplot as plt\n# Load an audio file\naudio_file = \"cat_1.wav\"\ny, sr = librosa.load(audio_file)\n# Calculate loudness using the RMS (Root Mean Square) energy\nloudness = librosa.feature.rms(y=y)\n# Convert the loudness to dB (decibels)\nloudness_db = librosa.power_to_db(loudness)\n# Create a loudness curve plot\nplt.figure(figsize=(12, 4))\nlibrosa.display.waveshow(loudness_db, sr=sr, x_axis='time')\nplt.title(\"Loudness Curve\")\nplt.xlabel(\"Time (s)\")\nplt.ylabel(\"Loudness (dB)\")\nplt.show()\n```", "```py\n# Generate a spectrogram\nspectrogram = librosa.feature.melspectrogram(y=y, sr=sr)\ndb_spectrogram = librosa.power_to_db(spectrogram, ref=np.max)\n# Create a spectrogram plot\n# Create a spectrogram plot with the y_axis set to 'hz' for Hertz\nplt.figure(figsize=(12, 4))\nlibrosa.display.specshow(db_spectrogram, x_axis='time', y_axis='hz')\nplt.title(\"Spectrogram\")\nplt.colorbar(format='%+2.0f dB')\nplt.show()\n```", "```py\nimport librosa\nimport librosa.display\nimport matplotlib.pyplot as plt\n# Load an audio file\naudio_file = \"sample_audio.wav\"\ny, sr = librosa.load(audio_file)\n# Generate a mel spectrogram\nspectrogram = librosa.feature.melspectrogram(y, sr=sr)\n# Convert the spectrogram to decibels for better visualization\ndb_spectrogram = librosa.power_to_db(spectrogram, ref=np.max)\n# Create a mel spectrogram plot\nplt.figure(figsize=(12, 4))\nlibrosa.display.specshow(db_spectrogram, x_axis='time', y_axis='mel')\nplt.title(\"Mel Spectrogram\")\nplt.colorbar(format='%+2.0f dB')\nplt.show()\n```"]