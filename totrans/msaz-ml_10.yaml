- en: Chapter 10. Extensibility with R and Python
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 10 章. 使用 R 和 Python 扩展功能
- en: You have already built models using ML Studio and have realized how easy and
    powerful it is. Despite a lot of ready-to-use modules available in ML Studio,
    there are still many tasks which can't be done inside ML Studio to build a required
    model and solve a problem at hand. Microsoft realizes this, so allows you to extend
    your experiments beyond the capability of ML Studio by writing code in either
    R or Python.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经使用 ML Studio 构建了模型，并已经意识到它有多么简单和强大。尽管 ML Studio 中有大量的现成模块可用，但仍有许多任务无法在 ML
    Studio 内完成，以构建所需的模型和解决当前的问题。微软意识到这一点，因此允许你通过编写 R 或 Python 代码来扩展你的实验，超出 ML Studio
    的功能。
- en: This chapter introduces you to the process of integrating your code in your
    experiment. You don't need any prior skills in Python or R to successfully finish
    this chapter. However, you can get the best out of this if you have some exposure
    to any of these two languages. Also, if you want to work with Azure ML at the
    professional level, it is highly recommended that you gain some skills either
    in R or Python. If you already know Python or are choosing to pick it up, then
    you should get exposure to Pandas library; especially, you should learn to work
    with the `DataFrame` module, as you would soon find out why. If you are choosing
    R, then `data.frame` is its default data structure and you can't miss it.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了将你的代码集成到实验中的过程。你不需要任何 Python 或 R 的先验技能就能成功完成本章。然而，如果你对这两种语言中的任何一种有所了解，你将能更好地利用这一点。此外，如果你想以专业水平使用
    Azure ML，强烈建议你获得 R 或 Python 的某些技能。如果你已经了解 Python 或选择学习它，那么你应该接触 Pandas 库；特别是，你应该学习如何使用
    `DataFrame` 模块，因为你很快就会知道为什么。如果你选择 R，那么 `data.frame` 是它的默认数据结构，你不可能错过它。
- en: I don't recommend you to use one language over other. It is up to you to decide
    on one if you don't know either. The following early sections in this chapter
    provide you a quick introduction to both the languages in relation to Azure ML.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我不推荐你使用一种语言而不用另一种。如果你两种语言都不了解，这取决于你决定使用哪一种。本章接下来的部分为你提供了关于 Azure ML 的两种语言的快速介绍。
- en: Introduction to R
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: R 语言简介
- en: '**R** is an open source statistical programming language and in recent years,
    it has been hugely popular. R has significant and vibrant communities worldwide
    and it is rich with libraries/packages, which get new additions every day. R is
    a first-class citizen in the Azure ML land, meaning that it has its native support
    for the language. Among many data structures, R has the `data.frame` data structure,
    which can be assumed to be a data table with rows and columns with column headers.
    Though there are differences, you can safely think of it as a dataset in ML Studio.
    So, whenever a dataset is passed to R code in an experiment, it implicitly gets
    converted to the `data.frame` data structure.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '**R** 是一种开源的统计编程语言，近年来，它非常受欢迎。R 在全球拥有显著且活跃的社区，并且拥有丰富的库/包，每天都有新的添加。在 Azure ML
    领域，R 是一等公民，这意味着它对该语言有原生支持。在众多数据结构中，R 有 `data.frame` 数据结构，可以假设它是一个具有行和列以及列标题的数据表。尽管存在差异，但你可以安全地将其视为
    ML Studio 中的数据集。因此，每当在实验中将数据集传递给 R 代码时，它就隐式地转换为 `data.frame` 数据结构。'
- en: Introduction to Python
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python 简介
- en: '**Python** is also an open source general-purpose, high-level programming language.
    This means that it allows you to perform other functions, such as web/mobile/desktop
    application development along with scientific, mathematical, and statistical programming.
    Python is very popular among developers and also among the scientific community,
    such as R for the statistics community. Python is also popular for tasks such
    as data wrangling or munging, which is loosely the process of manually converting
    or mapping data from one raw form to another format that allows more convenient
    consumption of data. For such tasks, the Pandas library in Python is very useful
    and is used widely. The `DataFrame` objects comes with the Pandas library and
    in Azure ML, Microsoft ships this library along with the base Python and other
    useful libraries, such as `NumPy`, `SciPy`, `Pandas`, `IPython`, `Matplotlib`,
    and so on. If you are already familiar with Python then it''s the **Anaconda**
    distribution of Python 2.7.7.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**Python** 也是一种开源的通用、高级编程语言。这意味着它允许你执行其他功能，例如Web/移动/桌面应用程序开发，以及科学、数学和统计编程。Python在开发者中以及科学界（如统计社区的R语言）中都非常受欢迎。Python在数据整理或清洗等任务中也非常流行，这大致是手动将数据从一种原始形式转换为另一种便于消费的格式的过程。对于这类任务，Python中的Pandas库非常有用，并且被广泛使用。Pandas库中的`DataFrame`对象类似于R中的`data.frame`数据结构以及ML
    Studio中的数据集。在Azure ML中，Microsoft将这个库与基础Python和其他有用的库（如`NumPy`、`SciPy`、`Pandas`、`IPython`、`Matplotlib`等）一起提供。如果你已经熟悉Python，那么你使用的是Python
    2.7.7的**Anaconda**发行版。'
- en: The Pandas `DataFrame` object is similar to the `data.frame` data structure
    in R and a dataset in ML Studio.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Pandas的`DataFrame`对象类似于R中的`data.frame`数据结构和ML Studio中的数据集。
- en: Why should you extend through R/Python code?
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么你应该通过R/Python代码进行扩展？
- en: 'Since the introduction of this chapter, you might be wondering that if ML Studio
    seems so easy and complete, then why does it need extending with coding? If you
    are thinking so, then let me assure you that this is not the case. To produce
    a predictive analytics solution for the real world, what ML Studio provides out
    of the box is quite promising, but very limited. The following are the common
    scenarios when you may need to write code and integrate with ML Studio:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 自从本章引入以来，你可能想知道，如果ML Studio看起来既简单又完整，那么为什么还需要通过编写代码来扩展它？如果你这样想，那么请让我向你保证，情况并非如此。为了生产适用于现实世界的预测分析解决方案，ML
    Studio提供的现成功能非常有前景，但非常有限。以下是一些你可能需要编写代码并与ML Studio集成的常见场景：
- en: There is only a limited set of algorithms available through ML Studio. If a
    certain algorithm is required either for prediction or evaluation, you need to
    code and integrate the test. For example, there is no specific algorithm available
    for time series analysis in ML Studio so far.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ML Studio中可用的算法集有限。如果需要某种算法来进行预测或评估，你需要编写代码并将其集成。例如，到目前为止，ML Studio中还没有专门用于时间序列分析的算法。
- en: Though there are some options available, most of the cases of ML Studio with
    out-of-the box modules are not sufficient to meet the need of exploration and
    data preparation, which includes data wrangling and data preprocessing, for example,
    the need to apply the wavelet transform to the data.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 虽然有一些选项可用，但大多数情况下，ML Studio的现成模块无法满足探索和数据处理的需求，包括数据整理和预处理，例如，需要对数据进行小波变换的需求。
- en: Data visualization support in ML Studio is very limited and most of the data
    visualization requirement can't be met with it.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ML Studio中的数据可视化支持非常有限，大多数数据可视化需求都无法通过它来满足。
- en: When you need to develop a new kind of model all together, you could use coding
    to develop that and then publish it as a web API.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当你需要从头开发一种全新的模型时，你可以通过编写代码来实现，然后将其发布为Web API。
- en: To consume data from either a new source or a dataset of a different format,
    you need to code and consume the data inside ML Studio.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要从新的数据源或不同格式的数据集中获取数据，你需要编写代码并在ML Studio内部消费这些数据。
- en: Extending experiments using the Python language
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Python语言扩展实验
- en: You can extend your experiment with the Python script through the module called
    **Execute Python Script**. You can explore more about this module with an illustration
    of processing a time series dataset. ML Studio comes with a sample dataset called
    **Time Series Dataset** and this is a very simple time series dataset with two
    columns, where one represents time as an integer and the other shows the values
    as integers.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过名为**执行Python脚本**的模块扩展您的Python脚本实验。您可以通过处理时间序列数据集的示例来更深入地了解这个模块。ML Studio附带一个名为**时间序列数据集**的样本数据集，这是一个非常简单的包含两列的时间序列数据集，其中一列代表时间作为整数，另一列显示值作为整数。
- en: This illustration involves coding in Python and later coding in R, where the
    objective is to demonstrate how the integration of code works. Though there will
    be some explanation of code through embedded comments, it may not be with every
    detail, as it is beyond the scope of this book. If you are new to coding, then
    just follow the instructions to get the desired output and understand the integration.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例涉及在Python中编码，然后在R中编码，目的是展示代码集成的效果。尽管将通过嵌入的注释对代码进行一些解释，但可能不会涉及每个细节，因为这超出了本书的范围。如果您是编程新手，只需按照说明操作以获得所需输出并了解集成。
- en: Understanding the Execute Python Script module
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解执行Python脚本模块
- en: 'To integrate Python code with ML Studio, you should use the **Execute Python
    Script** module, which is the only module available for Python as of writing this
    book. This module has three input ports and two output ports, as shown in the
    following screenshot:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 要将Python代码与ML Studio集成，您应该使用**执行Python脚本**模块，这是截至本书编写时唯一可用于Python的模块。此模块有三个输入端口和两个输出端口，如下面的截图所示：
- en: '![Understanding the Execute Python Script module](img/0792EN_10_1.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![理解执行Python脚本模块](img/0792EN_10_1.jpg)'
- en: While the first two inputs are datasets, the third one expects a `.zip` file
    to be uploaded to ML Studio to import the existing code; you can find more on
    this in the following sub section. The first output generates a dataset that can
    be used further in another module and the second output is the generated visualization,
    Python Device, which you can only right-click on and then click on **Visualize**
    to view the generated graph. It supports both the console output as well as the
    display of PNG graphics using the Python interpreter.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然前两个输入是数据集，但第三个输入期望上传一个`.zip`文件到ML Studio以导入现有代码；您可以在以下子部分中了解更多信息。第一个输出生成可以用于另一个模块的数据集，第二个输出是生成的可视化，Python设备，您只能右键单击并选择**可视化**来查看生成的图表。它支持控制台输出以及使用Python解释器显示PNG图形。
- en: 'The property section of the module comes with a very basic code editor, where
    you can write code. It also comes with a basic template of the code. The module
    must contain a function with the name `azureml_main` and it should have zero to
    two parameters. The function must also return a `DataFrame` object. Let''s take
    a look at the following screenshot which displays the Python code which we need
    to integrate with the ML Studio:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 模块的属性部分附带一个非常基本的代码编辑器，您可以在其中编写代码。它还附带了一个基本的代码模板。模块必须包含一个名为`azureml_main`的函数，并且它应该有零到两个参数。该函数还必须返回一个`DataFrame`对象。让我们看一下以下截图，它显示了我们需要与ML
    Studio集成的Python代码：
- en: '![Understanding the Execute Python Script module](img/0792EN_10_2.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![理解执行Python脚本模块](img/0792EN_10_2.jpg)'
- en: As you can note, the input datasets get converted to Pandas data frames. Connecting
    a dataset to the input ports is not a must. When an input data port is empty,
    the corresponding input data frame will be of the value `None` or `null`. Note
    here that the mapping between input ports and function parameters is positional,
    that is, the first connected input port, if connected, is mapped to the first
    parameter, **dataframe1**, of the function and the second input, if connected,
    is mapped to the second parameter, **dataframe2**, of the function.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所注意到的，输入数据集被转换为Pandas数据框。将数据集连接到输入端口不是必须的。当输入数据端口为空时，相应的输入数据框将具有值`None`或`null`。请注意，输入端口与函数参数之间的映射是位置性的，也就是说，如果连接了第一个输入端口，它将被映射到函数的第一个参数**dataframe1**，如果连接了第二个输入，它将被映射到函数的第二个参数**dataframe2**。
- en: You need to take care of proper indentation for Python code; otherwise, it would
    result in an error.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要确保Python代码有适当的缩进；否则，会导致错误。
- en: Creating visualizations using Python
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用Python创建可视化
- en: 'You can create data visualization using the `MatplotLib` library or any other
    library based on it and show it in the browser like any other visualization in
    ML Studio. However, the visualization created won''t be automatically redirected.
    You have to save them as PNG files for ML Studio to pick it up and make it available
    through the second output port of the `Execute Python Script` module. The overall
    steps to generate data visualization using the `MatplotLib` library through the
    module are as follows:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`Matplotlib`库或基于它的任何其他库创建数据可视化，并在浏览器中显示，就像ML Studio中的任何其他可视化一样。然而，创建的可视化不会自动重定向。你必须将它们保存为PNG文件，以便ML
    Studio可以拾取并使其通过`Execute Python Script`模块的第二个输出端口可用。使用`Matplotlib`库通过模块生成数据可视化的总体步骤如下：
- en: Change the `MatplotLib` library backend to `agg` from the default Qt-based renderer
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将`Matplotlib`库后端从默认的基于Qt的渲染器更改为`agg`
- en: Create a figure using the MatplotLib API
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Matplotlib API创建一个图形
- en: Get the axis and create all plots in the same axis using a MatplotLib API or
    any other library that uses MatplotLib as a base for plotting, for example, Pandas
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取坐标轴，并使用Matplotlib API或任何其他以Matplotlib为基础的绘图库（例如Pandas）在同一个坐标轴上创建所有图表
- en: Save the generated figure to a PNG file
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将生成的图形保存为PNG文件
- en: Now that you have an overview of how to integrate the Python code, it's time
    to walk you through an example.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经了解了如何集成Python代码的概述，现在是时候带你通过一个示例了。
- en: A simple time series analysis with the Python script
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Python脚本的简单时间序列分析
- en: The **time series** is a sequence of data points each having a timestamp associated
    with it, that is usually measured over a time interval. A simple time series analysis
    is to find the moving average for the series.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '**时间序列**是一系列数据点，每个数据点都与一个时间戳相关联，通常是在一个时间间隔内测量的。简单的时间序列分析是找到序列的移动平均。'
- en: 'The moving average or simple moving average can be defined as the mean of the
    previous *n* number of data in a series. Here, *n* is the window size. Consider
    a simple time series data, as the following, where the first column is time, the
    second column contains value, and the third column calculates the moving average
    for the window size 3\. For each value, its moving average is the average of the
    previous three values including itself:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 移动平均或简单移动平均可以定义为一系列中前*n*个数据的平均值。在这里，*n*是窗口大小。考虑以下简单的时间序列数据，其中第一列是时间，第二列包含值，第三列计算窗口大小为3的移动平均。对于每个值，其移动平均是包括自身在内的前三个值的平均值：
- en: '| Time | Value | Moving Average = Sum of previous 3 values / 3 |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| 时间 | 值 | 移动平均 = 前三个值的总和 / 3 |'
- en: '| --- | --- | --- |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| 1 | 30 | - |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 30 | - |'
- en: '| 2 | 25 | - |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| 2 | 25 | - |'
- en: '| 3 | 15 | (15+25+30)/3 = 23.3 |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| 3 | 15 | (15+25+30)/3 = 23.3 |'
- en: '| 4 | 45 | (45+15+25)/3 = 28.3 |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| 4 | 45 | (45+15+25)/3 = 28.3 |'
- en: '| 5 | 55 | (55+45+15)/3 = 38.3 |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| 5 | 55 | (55+45+15)/3 = 38.3 |'
- en: '| 6 | 5 | (5+55+45)/3 = 35.0 |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| 6 | 5 | (5+55+45)/3 = 35.0 |'
- en: '| 7 | 38 | (38+5+55)/3 = 32.7 |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| 7 | 38 | (38+5+55)/3 = 32.7 |'
- en: '| 8 | 13 | (13+38+5)/3 = 18.7 |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| 8 | 13 | (13+38+5)/3 = 18.7 |'
- en: '| 9 | 33 | (33+13+38)/3 = 28.0 |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| 9 | 33 | (33+13+38)/3 = 28.0 |'
- en: '| 10 | 31 | (31+33+13)/3 = 25.7 |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| 10 | 31 | (31+33+13)/3 = 25.7 |'
- en: 'We would use the `rolling_mean` Pandas method to calculate the moving average
    for the window size 10 to demonstrate the Python script integration We will use
    the previously mentioned sample time series dataset in ML Studio, add a new column
    to the dataset, and assign values to it by calculating the **simple moving** **average**
    for it. Let''s take a look at the following screenshot:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用`rolling_mean` Pandas方法来计算窗口大小为10的移动平均，以演示Python脚本集成。我们将使用之前提到的ML Studio中的样本时间序列数据集，向数据集中添加一个新列，并通过计算其**简单移动****平均**为其赋值。让我们看看下面的截图：
- en: '![A simple time series analysis with the Python script](img/0792EN_10_3.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![使用Python脚本的简单时间序列分析](img/0792EN_10_3.jpg)'
- en: 'The comments in the code are self-explanatory. If you run your experiment with
    the preceding code, the first output will get you the modified dataset with the
    moving average values in the third column and the second output will get you the
    following visualization, where the red line represents the moving average:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 代码中的注释是自解释的。如果你使用前面的代码运行你的实验，第一个输出将为你提供第三列包含移动平均值的修改后的数据集，第二个输出将为你提供以下可视化，其中红色线代表移动平均：
- en: '![A simple time series analysis with the Python script](img/0792EN_10_4.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![使用Python脚本的简单时间序列分析](img/0792EN_10_4.jpg)'
- en: Importing the existing Python code
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 导入现有的Python代码
- en: It may not be always practical to write enough code in a single script box to
    meet the requirement. Also, there will be scenarios where you would have an already
    built and tested code or an external library, which you would like to use inside
    ML Studio. In such scenarios, you can use the third input port (Input3) of the
    module. You can keep the prebuilt scripts in a folder, ZIP it, and upload it to
    ML Studio. It will be available in the **Saved Datasets** section of the modules
    palette. Then, drag it to the canvas for your experiment and connect it to the
    third input port, Zip Bundle, of the module. The Azure ML execution framework
    will unzip it internally during runtime and the contents will be added to the
    library path of the Python interpreter. This means that the `azureml_main` entry
    point function can import these modules directly.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 并非总是实际在一个脚本框中编写足够的代码来满足要求。也有可能您已经有一个构建并测试过的代码或外部库，您希望在 ML Studio 中使用。在这种情况下，您可以使用模块的第三个输入端口（Input3）。您可以将预构建的脚本保存在一个文件夹中，将其压缩，并上传到
    ML Studio。它将在模块调色板的 **保存数据集** 部分中可用。然后，将其拖到您的实验画布上，并将其连接到模块的第三个输入端口，即 Zip Bundle。Azure
    ML 执行框架将在运行时内部解压缩它，并将内容添加到 Python 解释器的库路径中。这意味着 `azureml_main` 入口点函数可以直接导入这些模块。
- en: Do it yourself – Python
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自己动手做 – Python
- en: Add another column to the data frame in the preceding example to moving standard
    deviation and plot it as another line.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一个示例的数据框中添加另一列，用于移动标准差，并将其作为另一条线绘制。
- en: Tip
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Use the moving window function `rolling_std`.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 使用移动窗口函数 `rolling_std`。
- en: Extending experiments using the R language
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 R 语言扩展实验
- en: 'Similar to Python, you can also use the R code/script to extend your experiment
    inside ML Studio. However, unlike Python, you get two modules for R, which are
    as follows:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 与 Python 类似，您也可以使用 R 代码/脚本在 ML Studio 内部扩展您的实验。然而，与 Python 不同，您有两个 R 模块，如下所示：
- en: '**The Execute R Script module**'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**执行 R 脚本模块**'
- en: '**The Create R Model module**'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**创建 R 模型模块**'
- en: Understanding the Execute R Script module
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解执行 R 脚本模块
- en: 'Similar to the module for Python, the **Execute R Script** module also has
    three input ports and two output ports. The property panel for the module comes
    with an R script editor where you can enter your code, as shown in the following
    screenshot:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 与 Python 模块类似，**执行 R 脚本** 模块也有三个输入端口和两个输出端口。模块的属性面板包含一个 R 脚本编辑器，您可以在其中输入代码，如下一个截图所示：
- en: '![Understanding the Execute R Script module](img/0792EN_10_5.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![理解执行 R 脚本模块](img/0792EN_10_5.jpg)'
- en: The module comes with a sample script, as you can find in the preceding screenshot.
    You can use the `maml.mapInputPort()` method with the port number as argument
    1 for Input1, and argument 2 for Input2 to access the input dataset as an R `data.frame`
    object.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 该模块附带一个示例脚本，如前一个截图所示。您可以使用 `maml.mapInputPort()` 方法，将端口号作为参数 1 用于 Input1，参数
    2 用于 Input2，以将输入数据集作为 R `data.frame` 对象访问。
- en: The third input expects a `.zip` file to be uploaded to ML Studio to import
    the existing code. The first output generates a dataset that can be used further
    in another module and the second output is the generated visualization, R Device,
    which you can right-click on it and then click on **Visualize** to view the generated
    graph. It supports the console output and the display of PNG graphics using the
    R interpreter. You don't have to take any extra steps to make the visualization
    available through the second output port of the module, as it would be redirected
    automatically.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 第三个输入期望上传一个 `.zip` 文件到 ML Studio 以导入现有代码。第一个输出生成一个可以在另一个模块中进一步使用的数据集，第二个输出是生成的可视化，R
    设备，您可以通过右键单击它并点击 **可视化** 来查看生成的图形。它支持控制台输出和 R 解释器的 PNG 图形显示。您不需要采取任何额外步骤来通过模块的第二输出端口提供可视化，因为它将自动重定向。
- en: Remember that if you import data that uses CSV or other formats, you have to
    convert the same to a dataset before using the data in an R module.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，如果您导入使用 CSV 或其他格式的数据，您必须在将数据用于 R 模块之前将其转换为数据集。
- en: A simple time series analysis with the R script
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 R 脚本进行简单的时序分析
- en: 'We will use the same time series example, as used previously, but this time,
    with the R script. We would use functions from an R package called **zoo**, which
    is already available in ML Studio. Let''s take a look at the following screenshot
    which displays the code written in R which we are going to integrate with the
    ML Studio:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用之前使用过的相同的时间序列示例，但这次使用 R 脚本。我们将使用名为 **zoo** 的 R 包中的函数，该包已经在 ML Studio 中可用。让我们看一下以下截图，它显示了我们将要集成到
    ML Studio 中的 R 代码：
- en: '![A simple time series analysis with the R script](img/0792EN_10_6.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![使用 R 脚本进行简单的时间序列分析](img/0792EN_10_6.jpg)'
- en: The comments in the code are self-explanatory. However, note that on the line
    number 13, the new column's moving average values are assigned from the position
    10 and to the last position, which is 126 here. As we have taken the moving window
    as 10, the first nine values for the column would be null or missing.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 代码中的注释是自解释的。然而，请注意，在第 13 行，新列的移动平均值从第 10 个位置分配到最后的第 126 个位置。因为我们已经将移动窗口设置为 10，所以该列的前九个值将是空或缺失的。
- en: 'If you run your experiment with the preceding code, the first output will get
    you the modified dataset with the moving average values in the third column and
    the second output will get you the following visualization, where the red line
    represents the moving average:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用前面的代码运行实验，第一个输出将为您提供包含第三列移动平均值的修改后的数据集，第二个输出将为您提供以下可视化效果，其中红色线条代表移动平均：
- en: '![A simple time series analysis with the R script](img/0792EN_10_7.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![使用 R 脚本进行简单的时间序列分析](img/0792EN_10_7.jpg)'
- en: Importing an existing R code
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 导入现有的 R 代码
- en: Like for Python, you can use the third input port (Input3) of the module to
    import the external code. You can keep the prebuilt scripts in a folder, ZIP it,
    and then upload it to ML Studio. To upload a ZIP file to your workspace, click
    on **New**, click on **Dataset**, and then select **From local file** and the
    **Zip file** option. After the upload, the zipped file will be available in the
    **Saved Datasets** list. Then, drag it to the canvas for your experiment and connect
    it to the third input port, Zip Bundle, of the module. All the files present in
    the ZIP file will be available for use during runtime. If any directory structure
    is there in the ZIP file, then it would be preserved. The root in the ZIP bundle
    is referred to as `src`.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 就像 Python 一样，您可以使用模块的第三个输入端口（Input3）来导入外部代码。您可以将预构建的脚本保存在一个文件夹中，ZIP 它，然后上传到
    ML Studio。要上传 ZIP 文件到您的工作区，请点击 **新建**，点击 **数据集**，然后选择 **从本地文件** 和 **ZIP 文件** 选项。上传后，ZIP
    文件将出现在 **已保存的数据集** 列表中。然后，将其拖到实验画布上，并将其连接到模块的第三个输入端口，即 Zip Bundle。ZIP 文件中的所有文件在运行时都将可用。如果
    ZIP 文件中有目录结构，则将保留。ZIP 包中的根目录被称为 `src`。
- en: 'For example, if you have created an R file named `myExternalCode.R`, zipped
    it to a file, and uploaded to ML Studio, then you can access it from the script
    editor for the module, shown as follows:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果您已创建一个名为 `myExternalCode.R` 的 R 文件，将其 ZIP 成文件，并上传到 ML Studio，那么您可以从模块的脚本编辑器中访问它，如下所示：
- en: '[PRE0]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Including an R package
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 包含 R 包
- en: If you want to include any R package that is not available out of the box in
    ML Studio, then you can ZIP the package and upload it. Usually, R packages are
    available as downloadable ZIP files. If you have already downloaded and extracted
    the R package that you are using in your code, you will need to ZIP the package
    again otherwise upload the original ZIP file for the R package to ML Studio. You
    need to install the R package as part of the custom code in the **Execute R Script**
    module and the package will be installed only for your experiment.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想在 ML Studio 中包含任何未预装的 R 包，那么您可以 ZIP 该包并上传。通常，R 包作为可下载的 ZIP 文件提供。如果您已经下载并解压了您代码中使用的
    R 包，您需要再次 ZIP 该包，否则上传 R 包的原始 ZIP 文件到 ML Studio。您需要在 **执行 R 脚本** 模块中将 R 包作为自定义代码的一部分进行安装，并且该包将仅对您的实验进行安装。
- en: Understanding the Create R Model module
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解 **创建 R 模型** 模块
- en: The **Create R Model** module can be used to create an untrained model using
    R code. You can build your model using any learner based on an R package or your
    new implementation.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '**创建 R 模型** 模块可以用来创建未训练的模型，使用 R 代码。您可以使用基于 R 包或您的新实现的任何学习器来构建您的模型。'
- en: The module takes the training script and the scoring script, the two user-defined
    R scripts, as inputs in the property sections based on which, the model will be
    built.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 该模块将训练脚本和评分脚本，即两个用户定义的 R 脚本，作为属性部分的输入，根据这些输入，将构建模型。
- en: After you create the model, you can use the **Train Model** module to train
    the model on a dataset similar to any other learner in ML Studio. Then, pass it
    to the **Score Model** module to use the model to make predictions. You can then
    save the trained model, create a scoring experiment, and publish it as a web service.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在您创建模型后，您可以使用 **训练模型** 模块在类似于 ML Studio 中任何其他学习者的数据集上训练模型。然后，将其传递给 **评分模型**
    模块以使用模型进行预测。然后，您可以保存训练好的模型，创建评分实验，并将其作为 Web 服务发布。
- en: Do it yourself – R
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DIY – R
- en: 'Let''s take a look at the following steps to build our own test using R for
    coding:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看以下步骤，使用 R 编码来构建自己的测试：
- en: Add another column to the data frame (in the preceding example) to move the
    median and plot it as another line.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在数据框（在先前的示例中）中添加另一列来移动中位数，并将其作为另一条线绘制出来。
- en: Tip
  id: totrans-88
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Use the moving window function `rollmedian`.
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用移动窗口函数 `rollmedian`。
- en: 'Display all the already installed packages in ML Studio. You may use the following
    code:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 显示 ML Studio 中已安装的所有包。您可以使用以下代码：
- en: '[PRE1]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Summary
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: You just completed a very important part of ML Studio in this chapter. You started
    with an introduction to both R and Python in relation to Azure ML. You explored
    the importance of why you may need to extend your experiment inside ML Studio
    using code. Then, you learned how to execute Python scripts and import an already
    built code inside ML Studio. You applied the same through an example of a simple
    time series analysis and also created visualization with Python. After Python,
    you explored the same for R and performed the same tasks of time series analysis
    and plotted the graph with an R script. ML Studio also comes with another module
    to build a complete model with R apart from just running a script.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您已经完成了 ML Studio 中的一个非常重要的部分。您从 Azure ML 相关的 R 和 Python 介绍开始。您探讨了为什么您可能需要使用代码在
    ML Studio 内部扩展实验的重要性。然后，您学习了如何在 ML Studio 内部执行 Python 脚本并导入已构建的代码。您通过一个简单的时序分析示例应用了同样的方法，并使用
    Python 创建了可视化。在 Python 之后，您同样对 R 进行了探索，并执行了相同的时序分析任务，并使用 R 脚本绘制了图表。ML Studio 还提供了一个模块，除了运行脚本之外，还可以使用
    R 构建完整的模型。
- en: In the next chapter, you will find out how to deploy a model as a web service
    API from your experiment inside ML Studio, which can be consumed outside.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将了解到如何从 ML Studio 内部的实验中部署模型作为 Web 服务 API，这可以在外部使用。
