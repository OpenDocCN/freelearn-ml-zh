["```py\ndotnet --version\n3.0.100\n```", "```py\nusing Microsoft.ML.Data;\n\nnamespace chapter02.ML.Objects\n{\n     public class RestaurantFeedback\n     {\n          [LoadColumn(0)]\n          public bool Label { get; set; }\n\n          [LoadColumn(1)]\n          public string Text { get; set; }\n     }\n}\n```", "```py\n0    \"Great Pizza\"\n0    \"Awesome customer service\"\n1    \"Dirty floors\"\n1    \"Very expensive\"\n0    \"Toppings are good\"\n1    \"Parking is terrible\"\n0    \"Bathrooms are clean\"\n1    \"Management is unhelpful\"\n0    \"Lighting and atmosphere are romantic\"\n1    \"Crust was burnt\"\n0    \"Pineapple was fresh\"\n1    \"Lack of garlic cloves is upsetting\"\n0    \"Good experience, would come back\"\n0    \"Friendly staff\"\n1    \"Rude customer service\"\n1    \"Waiters never came back\"\n1    \"Could not believe the napkins were $10!\"\n0    \"Supersized Pizza is a great deal\"\n0    \"$5 all you can eat deal is good\"\n1    \"Overpriced and was shocked that utensils were an upcharge\"\n```", "```py\nusing Microsoft.ML.Data;\n\nnamespace chapter02.ML.Objects\n{\n    public class RestaurantPrediction\n    {\n        [ColumnName(\"PredictedLabel\")]\n        public bool Prediction { get; set; }\n\n        public float Probability { get; set; }\n\n        public float Score { get; set; }\n    }\n}\n```", "```py\nif (!File.Exists(trainingFileName)) {\n    Console.WriteLine($\"Failed to find training data file ({trainingFileName}\");\n\n    return;\n}\n```", "```py\nIDataView trainingDataView = MlContext.Data.LoadFromTextFile<RestaurantFeedback>(trainingFileName);\n```", "```py\nDataOperationsCatalog.TrainTestData dataSplit = MlContext.Data.TrainTestSplit(trainingDataView, testFraction: 0.2);\n```", "```py\nTextFeaturizingEstimator dataProcessPipeline = MlContext.Transforms.Text.FeaturizeText(outputColumnName: \"Features\",\n        inputColumnName: nameof(RestaurantFeedback.Text));\n```", "```py\nSdcaLogisticRegressionBinaryTrainer sdcaRegressionTrainer = MlContext.BinaryClassification.Trainers.SdcaLogisticRegression(\n        labelColumnName: nameof(RestaurantFeedback.Label),\n        featureColumnName: \"Features\");\n\n```", "```py\nEstimatorChain<BinaryPredictionTransformer<CalibratedModelParametersBase<LinearBinaryModelParameters, PlattCalibrator>>> trainingPipeline = dataProcessPipeline.Append(sdcaRegressionTrainer);\n```", "```py\nITransformer trainedModel = trainingPipeline.Fit(dataSplit.TrainSet);\n```", "```py\nMlContext.Model.Save(trainedModel, dataSplit.TrainSet.Schema, ModelPath);\n```", "```py\nIDataView testSetTransform = trainedModel.Transform(dataSplit.TestSet);\n```", "```py\nCalibratedBinaryClassificationMetrics modelMetrics = MlContext.BinaryClassification.Evaluate(\n        data: testSetTransform,\n        labelColumnName: nameof(RestaurantFeedback.Label),\n        scoreColumnName: nameof(RestaurantPrediction.Score));\n\nConsole.WriteLine($\"Area Under Curve: {modelMetrics.AreaUnderRocCurve:P2}{Environment.NewLine}\" +\n        $\"Area Under Precision Recall Curve: {modelMetrics.AreaUnderPrecisionRecallCurve:P2}\" +                    $\"{Environment.NewLine}\" +\n        $\"Accuracy: {modelMetrics.Accuracy:P2}{Environment.NewLine}\" +\n        $\"F1Score: {modelMetrics.F1Score:P2}{Environment.NewLine}\" +\n        $\"Positive Recall: {modelMetrics.PositiveRecall:#.##}{Environment.NewLine}\" +\n        $\"Negative Recall: {modelMetrics.NegativeRecall:#.##}{Environment.NewLine}\");\n```", "```py\nif (!File.Exists(ModelPath)) {\n    Console.WriteLine($\"Failed to find model at {ModelPath}\");\n\n    return;\n}\n```", "```py\nITransformer mlModel;\n\nusing (var stream = new FileStream(ModelPath, FileMode.Open, FileAccess.Read, FileShare.Read)) {\n    mlModel = MlContext.Model.Load(stream, out _);\n}\n\nif (mlModel == null) {\n    Console.WriteLine(\"Failed to load model\");\n\n    return;\n}\n```", "```py\nvar predictionEngine = MlContext.Model.CreatePredictionEngine<RestaurantFeedback,                        RestaurantPrediction>(mlModel);\n```", "```py\nvar prediction = predictionEngine.Predict(new RestaurantFeedback { Text = inputData });\n```", "```py\nConsole.WriteLine($\"Based on \\\"{inputData}\\\", the feedback is predicted to be:{Environment.NewLine}\" +\n        \"{(prediction.Prediction ? \"Negative\" : \"Positive\")} at a {prediction.Probability:P0}\" +                 \" confidence\");\n```", "```py\nusing System;\nusing System.IO;\n\nusing chapter02.Common;\n\nusing Microsoft.ML;\n\nnamespace chapter02.ML.Base\n{\n    public class BaseML\n    {\n        protected static string ModelPath => Path.Combine(AppContext.BaseDirectory,                                                           Constants.MODEL_FILENAME);\n\n        protected readonly MLContext MlContext;\n\n        protected BaseML()\n        {\n            MlContext = new MLContext(2020);\n        }\n    }\n}\n```", "```py\nusing System;\n\nusing chapter02.ML;\n\nnamespace chapter02\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            if (args.Length != 2)\n            {\n                Console.WriteLine($\"Invalid arguments passed in, exiting.{Environment.NewLine}\" +                            $\"{Environment.NewLine}Usage: {Environment.NewLine}\" +\n                    $\"predict <sentence of text to predict against>{Environment.NewLine}\" +\n                    $\"or {Environment.NewLine}\" +\n                    $\"train <path to training data file>{Environment.NewLine}\");\n\n                return;\n            }\n\n            switch (args[0])\n            {\n                case \"predict\":\n                    new Predictor().Predict(args[1]);\n                    break;\n                case \"train\":\n                    new Trainer().Train(args[1]);\n                    break;\n                default:\n                    Console.WriteLine($\"{args[0]} is an invalid option\");\n                    break;\n            }\n        }\n    }\n}\n```", "```py\n.\\chapter02.exe train ..\\..\\..\\Data\\sampledata.csv\nArea Under Curve: 100.00%\nArea Under Precision Recall Curve: 100.00%\nAccuracy: 100.00%\nF1Score: 100.00%\nPositive Recall: 1\nNegative Recall: 1\n```", "```py\n.\\chapter02.exe predict \"bad\"\nBased on \"bad\", the feedback is predicted to be:\nNegative at a 64% confidence\n```"]