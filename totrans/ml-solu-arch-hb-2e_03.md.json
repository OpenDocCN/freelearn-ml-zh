["```py\n        jupyter notebook \n        ```", "```py\n    ! pip3 install pandas\n    ! pip3 install matplotlib\n    ! pip3 install scikit-learn \n    ```", "```py\n    import pandas as pd\n    churn_data = pd.read_csv(\"churn.csv\")\n    churn_data.head() \n    ```", "```py\n    # The following command calculates the various statistics for the features.\n    churn_data.describe()\n    # The following command displays the histograms for the different features.  \n    # You can replace the column names to plot the histograms for other features\n    churn_data.hist(['CreditScore', 'Age', 'Balance'])\n    # The following command calculate the correlations among features\n    churn_data.corr() \n    ```", "```py\n    from sklearn.preprocessing import OrdinalEncoder\n    encoder_1 = OrdinalEncoder()\n    encoder_2 = OrdinalEncoder()\n    churn_data['Geography_code'] = encoder_1.fit_transform(\n      churn_data[['Geography']]\n    )\n    churn_data['Gender_code'] = encoder_2.fit_transform(\n      churn_data[['Gender']]\n    ) \n    ```", "```py\n    churn_data.drop(columns = ['Geography','Gender','RowNumber','Surname'], inplace=True) \n    ```", "```py\n    # we import the train_test_split class for data split\n    from sk.model_selection import train_test_split\n    # Split the dataset into training (80%) and testing (20%).\n    churn_train, churn_test = train_test_split(\n      churn_data, test_size=0.2\n    )\n    # Split the features from the target variable \"Exited\" as it is required for model training\n    # and validation later.\n    churn_train_X = churn_train.loc[:, churn_train.columns != 'Exited']\n    churn_train_y = churn_train['Exited']\n    churn_test_X = churn_test.loc[:, churn_test.columns != 'Exited']\n    churn_test_y = churn_test['Exited'] \n    ```", "```py\n    # We will use the Random Forest algorithm to train the model\n    from sklearn.ensemble import RandomForestClassifier\n    bank_churn_clf = RandomForestClassifier(\n      max_depth=2, random_state=0\n    )\n    bank_churn_clf.fit(churn_train_X, churn_train_y) \n    ```", "```py\n    # We use the accuracy_score class of the sklearn library to calculate the accuracy.\n    from sklearn.metrics import accuracy_score\n    # We use the trained model to generate predictions using the test dataset\n    churn_prediction_y = bank_churn_clf.predict(churn_test_X)\n    # We measure the accuracy using the accuracy_score class.\n    accuracy_score(churn_test_y, churn_prediction_y) \n    ```"]