- en: '8'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The LAM, User Roles, and MTE
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **Logical Access Model** (**LAM**) defines which BP **User Roles** should
    exist, which BP **Permissions** each User Role should have, and how the User Roles
    to Permissions mappings differ according to their *environment* (e.g., Development,
    UAT, and Production). The LAM allows the RPA team to plan which User Roles are
    needed for daily operations and is usually presented as a spreadsheet. The LAM
    documentation should be version-controlled and serve as a source of truth that
    the BP environments can be audited against. It’s a vital part of security, as
    the mapping between Roles and Permissions should be done according to the principle
    of least privilege.
  prefs: []
  type: TYPE_NORMAL
- en: 'As we move from RPA to IA, we’ll find that additional groups of colleagues
    need access to the BP environment. This necessitates amendments to your existing
    LAM documentation and the addition of new User Roles. As we progress through this
    chapter, we’ll discuss which IA User Roles should potentially be added, what Permissions
    they should have, and then actually create them. We’ll also explore when **Multi-Team
    Environments** (**MTEs**) can be used to limit the scope of data that can be seen
    by the User Roles. The final part of this chapter will explore a *revised LAM
    document with IA additions*, based on the LAM Excel template, available on the
    BP Portal: [https://portal.blueprism.com/documents/blue-prism-logical-access-model-lam-v70](https://portal.blueprism.com/documents/blue-prism-logical-access-model-lam-v70).'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we’re going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: IA User Roles and Permissions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MTEs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An updated LAM template
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Download and import the `.bprelease` file in the `ch8` folder on GitHub: https://github.com/PacktPublishing/Intelligent-Automation-with-Blue-Prism/tree/main/ch8.'
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: If you’ve been following this book chronologically, you’ll have imported 13
    published Processes by now. The license for the Trial edition of BP has a limit
    of 15 published Processes. The Release file for this chapter has six published
    Processes. If you’re using the Trial edition, I’d recommend unpublishing all of
    the Processes from the *Ch4*, *Ch5*, and *Ch6* Groups so that the Release for
    this chapter, and future chapters, can be imported.
  prefs: []
  type: TYPE_NORMAL
- en: IA User Roles and Permissions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'BP comes with a number of predefined User Roles. However, these default User
    Roles and their Role-to-Permission mappings pre-date the development of IA. The
    advent of IA leads to a number of new user personas that need to be accounted
    for. These include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**ML Auditor**: The ML Auditor is responsible for auditing the results of ML
    predictions and HITL reviews, so they’ll need to view and export Session Logs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ML Deployer**: The ML Deployer updates ML algorithms that are in use. This
    happens separately from Process and Object changes that are caused by updates
    to applications and business logic.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ML Reviewer**: The ML Reviewer Role will modify Session Variables related
    to reviewing predictions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: The list of User Roles and Permissions presented in this chapter are based on
    what’s available in BP version 7.x. If you’re using an older version of BP, you’ll
    likely have fewer Permissions available. This won’t affect the content of this
    chapter unless you’re using a version lower than 6.3, which is when MTE was introduced.
  prefs: []
  type: TYPE_NORMAL
- en: ML Auditor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *ML Auditor* Role is used to view and export Session Logs related to ML.
    As opposed to generic security audits, which are infrequent enough to not warrant
    a dedicated User Role, ML audits may need to be done frequently. ML Auditors might
    need to perform *hypercare* after every ML algorithm deployment, or regularly
    export the results of human-reviewed predictions. Regular ML auditing is required
    to counteract the effects of model decay and data drift. Let’s create this ML
    Auditor Role as an example.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: The examples assume that you’re using BP native authentication and that you’re
    logged in as a user with the *System Administrators* Role. If you’re using Active
    Directory authentication, or the Authentication Server, you’ll likely need assistance
    from IT or the Hub administrators to create Users for you.
  prefs: []
  type: TYPE_NORMAL
- en: Example 1 – creating the ML Auditor User Role
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this example, we’ll perform four high-level steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create the *ML Auditor* User Role.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the minimum set of Permissions necessary to allow you to view and export
    Session Logs.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new User with the *ML* *Auditor* Role.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Test the User.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating the ML Auditor User Role
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Our first step is to create the User Role itself:'
  prefs: []
  type: TYPE_NORMAL
- en: Visit **System** | **Security** | **User Roles**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on `ML Auditor` as the Role’s name.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Mapping the Permissions to the ML Auditor User Role
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Next, we need to select *five* Permissions to add to our newly created User
    Role:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click once on the newly created **ML Auditor** Role to ensure that it’s highlighted.
    In the **Permissions** section on the right-side panel, tick the following five
    Permissions: **Object Studio** | **View Business Object Definition**, **Process
    Studio** | **View Process Definition**, **Resources** | **View Resource**, **System
    Manager** | **Audit – Business Object Logs**, and **System Manager** | **Audit
    –** **Process Logs**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Apply** button in the bottom-right corner to save the changes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating a new User with the ML Auditor User Role
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Before testing the new User Role, create a User and assign it the *ML* *Auditor*
    Role:'
  prefs: []
  type: TYPE_NORMAL
- en: Visit **System** | **Security** | **Users**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click anywhere on the **Users** panel, and choose **Create User** or **New**.
    Whether **Create User** or **New** appears depends on where you’ve right-clicked,
    but they both lead to the same user creation wizard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the username `mlaudit`. Choose a password, and type it in twice.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Next** until you reach the screen where you select the User Role.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose the **ML Auditor** User Role, and click **Finish**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Testing the new User
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'To test the User, we need to sign out, log in with the new User, and verify
    that the User is only able to export and view *Session Logs*:'
  prefs: []
  type: TYPE_NORMAL
- en: Sign out of BP.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Sign in using the `mlaudit` user and the password that you chose.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Verify that you can see the **Studio** section of BP. Open any Process or Object,
    and confirm that you only have *read access* while inside the Process and Object
    Studio.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Visit the **Control** section of BP. Verify that only **Session Management**
    is visible and that none of the Queues or Schedules can be seen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Visit the **System** section of BP. Verify that only **Audit** | **Process Logs**
    and **Audit** | **Object Logs** are visible.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Audit** | **Process Logs** and set the **Today** filter to **All**.
    Right-click on any Session, and confirm that the Session Logs are viewable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: While the Session Logs are still open, click on **File** | **Export Entire Log…**.
    Verify that you’re able to save the Logs as a file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We’ve finished creating and testing the *ML Auditor* User Role. Although this
    User is unable to view individual Work Queues in the Control Room, they are able
    to view all Session Logs from the **Audit** | **Process Logs** section, regardless
    of which Process they belong to. We will look at how to restrict the set of Processes
    that this User Role can view later on in the chapter, in the *MTE* section.
  prefs: []
  type: TYPE_NORMAL
- en: ML Deployer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This role is responsible for updating the BP solution to make use of an updated
    ML model or endpoint. It isn’t meant to deploy an IA solution for the first time
    – that has a wider scope of work and can be done through different Roles. The
    *ML Deployer* is relevant if the ML algorithm is expected to be updated regularly
    as part of maintenance or improvement activities. This is more likely to occur
    when algorithms are developed in-house. Updates to ML algorithms will usually
    be done, independent of business logic, as part of the ML model’s own life cycle.
    Updating an IA solution to use a new ML model is ideally done without needing
    to change any Process or Object diagrams.
  prefs: []
  type: TYPE_NORMAL
- en: Under these scenarios, it makes sense to have a role dedicated to updating only
    the areas of BP that touch the ML algorithm – namely *Environment Variables*,
    *Skills*, and *Web API Services*. Also, if the need to deploy a new algorithm
    is due to a major flaw, the ML Deployer might need to activate a kill switch (*Credential*)
    to stop all ML predictions. By default, BP doesn’t have a role that is limited
    to editing just these areas of BP. In the example that follows, we’ll create the
    ML Deployer Role.
  prefs: []
  type: TYPE_NORMAL
- en: Example 2 – creating the ML Deployer User Role
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this example, we’ll perform four high-level steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create the *ML Deployer* User Role.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Give it the minimum set of necessary Permissions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a User with the *ML Deployer* User Role.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Test the functionality.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: First, let’s create the User Role.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the ML Deployer User Role
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Our first step is to create the User Role itself.
  prefs: []
  type: TYPE_NORMAL
- en: Visit **System** | **Security** | **User Roles**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on `ML Deployer` as the Role’s name.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Mapping the Permissions to the ML Deployer User Role
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Next, we need to select *seven* Permissions to add to our newly created User
    Role:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click once on the newly created **ML Deployer** Role to ensure that it’s highlighted.
    In the **Permissions** section on the right-side panel, tick the following seven
    Permissions: **Skills** | **Import Skill**, **Skills** | **Manage Skill**, **Skills**
    | **View Skill**, **System Manager** | **Processes – Configure Environment Variables**,
    **System Manager** | **Business Objects – Web API Services**, **System Manager**
    | **Business Objects – Web Connection Settings** and **System Manager** | **Security
    –** **Manage Credentials**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Apply** button in the bottom-right corner to save the changes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating a new User with the ML Deployer User Role
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Before testing the *ML Deployer* User Role, create a new User and assign it
    to that Role:'
  prefs: []
  type: TYPE_NORMAL
- en: Visit **System** | **Security** | **Users**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click anywhere on the Users panel, and choose **Create User** or **New**.
    Whether **Create User** or **New** shows depends on where you’ve right-clicked,
    but they both lead to the same User creation wizard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the username `mldeploy`. Choose a password, and type it in twice.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Next** until you reach the screen where you select the User Role.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose the **ML Deployer** User Role, and click **Finish**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Testing the new User
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'To test the User, we need to sign out, sign in with the new User, and verify
    that we’re only able to change *Environment Variables*, *Web API Services*, *Skills*,
    and *Credentials*:'
  prefs: []
  type: TYPE_NORMAL
- en: Sign out of BP.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Sign in using the `mldeploy` user and the password that you chose.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Visit the **System** section of BP.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Verify that only **Processes** | **Environment Variables**, **Objects** | **Web
    API Services**, **Objects** | **Web API Services** | **Connection Settings**,
    **Skills** | **Management**, and **Security** | **Credentials** can be selected.
    Everything else should be grayed out, indicating that the Role is only able to
    edit these five areas.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.1 – Areas that the ML Deployer can access](img/B18416_08_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.1 – Areas that the ML Deployer can access
  prefs: []
  type: TYPE_NORMAL
- en: We’ve finished creating the *ML Deployer* User Role. Remember that this Role
    is intended for ML staff or data scientists to update a BP IA solution, when they
    have a new ML algorithm to deploy into production or test (for instance, using
    the *New Model Evaluation Process Template* presented in *Example 4* of [*Chapter
    6*](B18416_06.xhtml#_idTextAnchor093)). The initial deployment should be performed
    by a different Role, as the *ML Deployer* Users shouldn’t need much BP training
    or Permissions to deploy their new algorithm.
  prefs: []
  type: TYPE_NORMAL
- en: This means that almost everything concerning ML should be parametrized as Environment
    Variables, including URLs, model versions, and paths to ML scripts. If they’re
    stored as Environment Variables, we won’t need to add Object Studio Permissions
    to the User Role, and training ML staff on how to use BP can be kept to a minimum.
    However, if VB.NET or C# ML libraries are used, such as ML.NET, we might want
    to also grant the *Object Studio* and *Release Manager* Permissions to the User
    Role and provide enough training such that they can edit Objects themselves.
  prefs: []
  type: TYPE_NORMAL
- en: ML Reviewer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Our third User Role is for the people who review predictions, especially if
    they’re internal business users. They need permissions to modify the Session Variables
    that recreate missing review data, change Environment Variables concerning the
    paths of where shared data is saved, and update the Statuses of Work Queue Items.
    This Role works best when paired with the three-Work Queue designs, as it allows
    us to limit which Processes can be touched through MTE. Let’s create the *ML Reviewer*
    Role next.
  prefs: []
  type: TYPE_NORMAL
- en: Example 3 – creating the ML Reviewer User Role
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this example, we’ll go through four high-level steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create the *ML Reviewer* User Role.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Give it the minimum Permissions necessary.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a User with the *ML* *Reviewer* Role.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Test the functionality.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: First, let’s create the User Role.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the ML Reviewer User Role
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Our first step is to create the User Role itself:'
  prefs: []
  type: TYPE_NORMAL
- en: Visit **System** | **Security** | **User Roles**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on `ML Reviewer` as the Role’s name.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Mapping the Permissions to the ML Reviewer User Role
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Next, we need to select *four* Permissions to add to our newly created User
    Role:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click once on the newly created **ML Reviewer** Role to ensure that it’s highlighted.
    In the **Permissions** section in the right-side panel, tick the following four
    Permissions: **Control Room** | **Full Access to Queue Management**, **Process
    Studio** | **View Process Definition**, **Resources** | **Control Resource**,
    and **System Manager** | **Processes – Configure** **Environment Variables**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Apply** button in the bottom-right corner to save the changes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating a new User with the ML Reviewer User Role
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Before testing our new User Role, we need to create a User and assign it to
    that Role:'
  prefs: []
  type: TYPE_NORMAL
- en: Visit **System** | **Security** | **Users**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click anywhere on the **Users** panel, and choose **Create User** or **New**.
    Whether **Create User** or **New** shows depends on where you’ve right-clicked,
    but they both lead to the same User creation wizard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the username `mlreview`. Choose a password, and type it in twice.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Next** until you reach the screen where you select the User Role.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose the **ML Reviewer** User Role, and press **Finish**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Testing the new User
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'To test the User, we need to sign out, sign in with the new User, and verify
    that we can see the *Environment Variables* under the **System** settings, view
    *Work Queues*, and view *Sessions* in the Control Room:'
  prefs: []
  type: TYPE_NORMAL
- en: Sign out of BP.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Sign in using the `mlreview` user and the password that you chose.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Visit the **Control** section of BP.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Verify that **Session Management** and **Queue Management** are available.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.2 – Session Management and Queue Management are available for the
    ML Reviewer User Role](img/B18416_08_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.2 – Session Management and Queue Management are available for the ML
    Reviewer User Role
  prefs: []
  type: TYPE_NORMAL
- en: Visit the **System** section of BP.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Verify that only **Processes** | **Environment Variables** can be selected.
    Everything else should be grayed out.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you like, you can further verify that the ML Reviewer role can edit the Statuses
    of individual Queue Items, and also edit Session Variables of executing Sessions.
  prefs: []
  type: TYPE_NORMAL
- en: We’ve finished creating three User Roles that can be added to BP for IA purposes.
    Remember that the LAM typically has different Permissions for different environments.
    The examples shown here were designed with the principle of least privilege and
    the *production* environment in mind. Additional Permissions can be granted to
    these three User Roles in lower environments if required.
  prefs: []
  type: TYPE_NORMAL
- en: A User Role comparison
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following table summarizes the three User Roles and the minimum set of Permissions
    they should have in Production to perform their duties. The table cells marked
    with *Y* indicate that the User Role should have the Permission. *Empty* table
    cells indicate that the User Role doesn’t need the Permission. Permissions that
    aren’t being used by any of the three Roles are omitted from the table entirely.
  prefs: []
  type: TYPE_NORMAL
- en: '| **Permissions** | **ML Auditor** | **ML Deployer** | **ML Reviewer** |'
  prefs: []
  type: TYPE_TB
- en: '| **Control Room:** |'
  prefs: []
  type: TYPE_TB
- en: '| Full access to Queue Management |  |  | Y |'
  prefs: []
  type: TYPE_TB
- en: '| **Object Studio**: |'
  prefs: []
  type: TYPE_TB
- en: '| View Business Object definition | Y |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| **Process Studio**: |'
  prefs: []
  type: TYPE_TB
- en: '| View Process Definition | Y |  | Y |'
  prefs: []
  type: TYPE_TB
- en: '| **Resources:** |'
  prefs: []
  type: TYPE_TB
- en: '| Control resource |  |  | Y |'
  prefs: []
  type: TYPE_TB
- en: '| View Resource | Y |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| Skills: |'
  prefs: []
  type: TYPE_TB
- en: '| Import skill |  | Y |  |'
  prefs: []
  type: TYPE_TB
- en: '| Manage Skill |  | Y |  |'
  prefs: []
  type: TYPE_TB
- en: '| View Skill |  | Y |  |'
  prefs: []
  type: TYPE_TB
- en: '| **System Manager**: |'
  prefs: []
  type: TYPE_TB
- en: '| Audit – Business Object Logs | Y |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| Audit – Process Logs | Y |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| Business Objects – Web API Services |  | Y |  |'
  prefs: []
  type: TYPE_TB
- en: '| Business Objects – Web Connection Settings |  | Y |  |'
  prefs: []
  type: TYPE_TB
- en: '| Processes – configure Environment Variables |  | Y | Y |'
  prefs: []
  type: TYPE_TB
- en: '| Security – manage Credentials |  | Y |  |'
  prefs: []
  type: TYPE_TB
- en: Table 8.1 – The table of IA User Roles and their Permissions
  prefs: []
  type: TYPE_NORMAL
- en: The *ML Auditor* Role needs permission to export Session Logs, and the *ML Reviewer*
    needs permission to edit Session Variables to run Sessions. In the preceding examples,
    the Roles that we’ve created can view Sessions and Session Logs across *multiple*
    Processes, which is a security concern. In the next section about MTE, we’ll see
    how we can further limit which Processes *ML Auditors* and *ML Reviewers* can
    view. However, we won’t be able to use MTE to limit which Work Queues *ML Reviewers*
    can edit Item Statuses for. *ML Deployers* that edit Web API Services, Skills,
    Environment Variables, and Credentials also do not benefit from MTE.
  prefs: []
  type: TYPE_NORMAL
- en: MTEs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *View Process Definition* Permission allows us to see Processes in the Control
    Room section of BP. This is required if we want to see Session Logs or edit Session
    Variables. Granting this Permission allows User Roles to see all unrestricted
    Processes that are published in the Control Room. It might be fine for *ML Auditor*
    Users to be able to extract Session Logs from all Processes, but we wouldn’t want
    *ML Reviewers* to be able to set Session Variables for Processes that they aren’t
    responsible for. MTE allows us to set restrictions on which Processes and Logs
    our newly created Roles can see.
  prefs: []
  type: TYPE_NORMAL
- en: MTE for the ML Auditor and ML Reviewer User Roles
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We need to create multiple ML Auditor and ML Reviewer User Roles if we want
    to limit what can be viewed on a per-Process basis. We also need to place our
    Processes into a specific *Group* structure so that we can set the correct *Access
    rights*. Let’s demonstrate how to achieve this through an example.
  prefs: []
  type: TYPE_NORMAL
- en: Example 4 – ML Auditor and ML Reviewer MTE
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Suppose that we have two IA solutions, A and B running in production, each created
    from the *three* Process, *three* Work Queue IA template from [*Chapter 7*](B18416_07.xhtml#_idTextAnchor114).
    There are two ML teams (A and B) that want to be able to export only the Session
    Logs for the IA solution that uses their ML algorithm. We also have two ML review
    teams (X and Y) that may need to edit Session Variables for the solution that
    they’re responsible for.
  prefs: []
  type: TYPE_NORMAL
- en: 'What we’re trying to achieve is listed in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **IA Solution** | **BP Process** | **Which ML team can export** **Session
    Logs?** | **Which review team can edit** **Session Variables?** |'
  prefs: []
  type: TYPE_TB
- en: '| A | 01 – Business Logic A | No restrictions | N/A |'
  prefs: []
  type: TYPE_TB
- en: '| A | 02 – ML Prediction A | A | N/A |'
  prefs: []
  type: TYPE_TB
- en: '| A | 03 – HITL Review A | A | X |'
  prefs: []
  type: TYPE_TB
- en: '| B | 01 – Business Logic B | No restrictions | N/A |'
  prefs: []
  type: TYPE_TB
- en: '| B | 02 – ML Prediction B | B | N/A |'
  prefs: []
  type: TYPE_TB
- en: '| B | 03 – HITL Review B | B | Y |'
  prefs: []
  type: TYPE_TB
- en: Table 8.2 – The desired MTE restrictions for Example 4
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s implement an MTE structure that achieves the content in the preceding
    table. We’ll go through eight high-level steps in this example:'
  prefs: []
  type: TYPE_NORMAL
- en: Examining the contents of the example’s Release file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Cloning the *ML Auditor* Role twice, once for each team.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating Users for the two cloned *ML* *Auditor* Roles.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Cloning the *ML Reviewer* Role twice, once for each team.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating Users for the two cloned *ML* *Reviewer* Roles.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Changing the Access rights of the Groups.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Running each Process once.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Verifying that MTE works as expected.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: First, let’s get familiar with the Release, which has a team-based Group structure
    set up.
  prefs: []
  type: TYPE_NORMAL
- en: Verifying the Release contents
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: A Release has been prepared that’s structured in a way to facilitate the configuration
    of *Access rights*. Access rights will limit access to Session Logs and Session
    Variables, on a per-Process basis. Verify that the Release contains six BP Processes
    in the Group structure, as shown in the following image.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.3 – The Group structure for MTE](img/B18416_08_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.3 – The Group structure for MTE
  prefs: []
  type: TYPE_NORMAL
- en: The three Processes that belong to IA solution A have the *A* suffix. Likewise,
    the three Processes belonging to IA solution B have the *B* suffix. The **Viewable
    by ML team A** Group contains the Process that performs ML prediction for IA solution
    A. The **Viewable by ML team A and Review team X** Group contains the Process
    that performs an HITL review checking for IA solution A.
  prefs: []
  type: TYPE_NORMAL
- en: The **Viewable by ML team B** Group contains the Process that performs ML prediction
    for IA solution B. The **Viewable by ML team B and Review team Y** Group contains
    the Process that performs HITL review checking for IA solution B.
  prefs: []
  type: TYPE_NORMAL
- en: There are also two Processes, **01- Business Logic A** and **01 - Business Logic
    B**, that aren’t in either of the two Groups mentioned. These Processes will be
    visible to all Roles. Our next step is to clone the *ML Auditor* User Role into
    two new ones.
  prefs: []
  type: TYPE_NORMAL
- en: Cloning the ML Auditor User Role twice
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In order to grant separate Access rights to the two Groups, *Viewable by ML
    team A*, and *Viewable by ML team B*, we need to have two separate User Roles.
    Here, we’ll clone the existing ML Auditor Role created in *Example 1* and rename
    it, twice:'
  prefs: []
  type: TYPE_NORMAL
- en: Visit **System** | **Security** | **User Roles**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click the **ML Auditor** Role, and choose **Clone**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.4 – Clone the existing ML Auditor Role](img/B18416_08_4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.4 – Clone the existing ML Auditor Role
  prefs: []
  type: TYPE_NORMAL
- en: Rename the cloned role `ML` `Auditor A`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click the **ML Auditor** Role and **Clone** (i.e., repeat *step 2*).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename the cloned role `ML` `Auditor B`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We should now have three ML Auditor Roles – the base *ML Auditor* Role (which
    won’t be used any further in this example), *ML Auditor A*, and *ML Auditor B*.
    Next, let’s create one User for each of our new User Roles.
  prefs: []
  type: TYPE_NORMAL
- en: Creating two ML Auditor Users
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In order to test our User Roles, we’ll need to create new Users with those Roles.
  prefs: []
  type: TYPE_NORMAL
- en: Visit **System** | **Security** | **Users**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click anywhere on the **Users** panel, and choose **Create User** or **New**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the username `mlauditA`. Choose a password, and type it in twice.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Next** until you reach the screen where you select the User Role.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose the **ML Auditor A** User Role, and click **Finish**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click anywhere on the **Users** panel, and choose **Create User** or **New**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the username `mlauditB`. Choose a password, and type it in twice.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Next** until you reach the screen where you select the User Role.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose the **ML Auditor B** User Role, and click **Finish**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After creating the ML Auditor users, let’s repeat the same steps, except for
    the ML Reviewer Role.
  prefs: []
  type: TYPE_NORMAL
- en: Cloning the ML Reviewer User Role twice
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s clone the ML Reviewer Role that was created in *Example* *3* twice:'
  prefs: []
  type: TYPE_NORMAL
- en: Visit **System** | **Security** | **User Roles**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click the **ML Reviewer** Role, and choose **Clone**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename the cloned role `ML` `Reviewer X`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click the **ML Reviewer** Role and **Clone** (i.e., repeat *step 2*).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename the cloned role `ML` `Reviewer Y`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We should now have three ML Reviewer Roles – the base *ML Reviewer* Role (which
    won’t be used any further in this example), *ML Reviewer X*, and *ML Reviewer
    Y*. Next, let’s create one User for each of our new User Roles.
  prefs: []
  type: TYPE_NORMAL
- en: Creating two ML Reviewer Users
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In order to test our User Roles, we’ll need to create new Users with those
    Roles:'
  prefs: []
  type: TYPE_NORMAL
- en: Visit **System** | **Security** | **Users**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click anywhere on the **Users** panel, and choose **Create User** or **New**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the username `mlreviewX`. Choose a password, and type it in twice.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Next** until you reach the screen where you select the User Role.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose the **ML Reviewer X** User Role, and click **Finish**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click anywhere on the **Users** panel, and choose **Create User** or **New**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the username `mlreviewY`. Choose a password, and type it in twice.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Next** until you reach the screen where you select the User Role.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose the **ML Reviewer Y** User Role, and click **Finish**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At this point, we’ve created four new Roles and four Users. Next, let’s modify
    the Access rights of the Groups to limit what can be viewed by each new Role.
  prefs: []
  type: TYPE_NORMAL
- en: Changing the Group Access rights
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In this step, we will be setting up specific *Access rights* for each Group.
    First, we’ll restrict the *Viewable by ML team A* Group so that it can only be
    viewed by the *ML Auditor A* User Role. Then we’ll restrict the *Viewable by ML
    team B* Group so that it can only be viewed by the *ML Auditor B* User Role.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we’ll restrict the *Viewable by ML team A and Review team X* Group so
    that it’s only viewable by the *ML Auditor A* and *ML Reviewer X* Roles. Finally,
    we’ll restrict the *Viewable by ML team B and Review team Y* Group so that it’s
    only viewable by the *ML Auditor B* and *ML Reviewer* *Y* Roles:'
  prefs: []
  type: TYPE_NORMAL
- en: Visit the **Studio** section of BP.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the **Viewable by ML team A** Group, and choose **Access rights**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.5 – Right-click on the Viewable by ML team A Group and choose Access
    rights](img/B18416_08_5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.5 – Right-click on the Viewable by ML team A Group and choose Access
    rights
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **Restricted** radio button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Deselect** **All** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **ML Auditor** **A** Role.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tick the **Select / Deselect** **All** box.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.6 – Tick the Select / Deselect All box for the ML Auditor A Role](img/B18416_08_6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.6 – Tick the Select / Deselect All box for the ML Auditor A Role
  prefs: []
  type: TYPE_NORMAL
- en: Click **OK** to save the changes. At this point, the **Viewable by ML team A**
    Group should only be viewable by the **ML Auditor** **A** Role.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the **Viewable by ML team B** Group, and choose **Access rights**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Restricted** radio button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Deselect** **All** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **ML Auditor** **B** Role.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tick the **Select / Deselect** **All** box.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **OK** to save the changes. At this point, the **Viewable by ML team B**
    Group should only be viewable by the **ML Auditor** **B** Role.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the **Viewable by ML team A and Review team X** Group, and choose
    **Access rights**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Restricted** radio button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Deselect** **All** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **ML Auditor** **A** Role.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tick the **Select / Deselect** **All** box.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **ML Reviewer** **X** Role.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tick the **Select / Deselect** **All** box.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **OK** to save the changes. At this point, the **Viewable by ML team A
    and Review team X** Group should only be viewable by the **ML Auditor A** and
    **ML****Reviewer** **X** Roles.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the **Viewable by ML team B and Review team Y** Group, and choose
    **Access rights**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Restricted** radio button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Deselect** **All** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **ML Auditor** **B** Role.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tick the **Select / Deselect** **All** box.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **ML Reviewer** **Y** Role.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tick the **Select / Deselect** **All** box.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **OK** to save the changes. At this point, the **Viewable by ML team B
    and Review team Y** Group should only be viewable by the **ML Auditor B** and
    **ML****Reviewer** **Y** Roles.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We’ve completed changing the Access rights of the four Groups. Now, let’s run
    all six Processes once in the Control Room to generate Session Logs.
  prefs: []
  type: TYPE_NORMAL
- en: Running each Process once
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Before we can test our Users, we need to run each of the six Processes once
    in the Control Room. Visit the **Control** section of BP, and run each Process
    once from the **Session Management** section. It doesn’t matter whether the Session
    run succeeds or fails as long as the Session Logs are created.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.7 – Run each of the Processes once in the Control Room](img/B18416_08_7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.7 – Run each of the Processes once in the Control Room
  prefs: []
  type: TYPE_NORMAL
- en: Verifying that MTE is working
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Finally, let’s sign out of BP and sign back in with our newly created Users.
    Then, we’ll verify that MTE is restricting access, as we expect:'
  prefs: []
  type: TYPE_NORMAL
- en: Sign out of BP.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Sign in using the `mlauditA` username and password.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Visit the **System** | **Audit** | **Process Logs** section of BP.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ensure that you cannot see the Session Logs for **02 – ML Prediction B** and
    **03****– HITL** **Review B**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.8 – The ML Auditor A Role should not see ML Prediction B and HITL
    Review B](img/B18416_08_8.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.8 – The ML Auditor A Role should not see ML Prediction B and HITL Review
    B
  prefs: []
  type: TYPE_NORMAL
- en: Sign out of BP.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Sign in using the `mlauditB` username and password.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Visit the **System** | **Audit** | **Process Logs** section of BP.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ensure that you cannot see the Session Logs for **02 – ML Prediction A** and
    **03****– HITL** **Review A**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.9 – The ML Auditor B Role should not see ML Prediction A and HITL
    Review A](img/B18416_08_9.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.9 – The ML Auditor B Role should not see ML Prediction A and HITL Review
    A
  prefs: []
  type: TYPE_NORMAL
- en: Sign out of BP.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Sign in using the `mlreviewX` username and password.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Visit **Control** | **Session Management**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Verify that only **03 – HITL Review A** is visible in the **Ch8** | **Example
    4 – ML****Auditor and ML Reviewer MTE** | **Viewable by ML team A and Review****team
    X** Group, as well as the two Processes in the unrestricted parent Group.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.10 – The ML Reviewer X Role should only see HITL Review A](img/B18416_08_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.10 – The ML Reviewer X Role should only see HITL Review A
  prefs: []
  type: TYPE_NORMAL
- en: Sign out of BP.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Sign in using the `mlreviewY` username and password.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Visit **Control** | **Session Management**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Verify that only **03 – HITL Review B** is visible in the **Ch8** | **Example
    4 – ML Auditor and ML Reviewer MTE** | **Viewable by ML team B and Review team
    Y** Group, as well as the two Processes in the unrestricted parent Group.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.11 – The ML Reviewer Y Role should only see HITL Review B](img/B18416_08_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.11 – The ML Reviewer Y Role should only see HITL Review B
  prefs: []
  type: TYPE_NORMAL
- en: We’ve completed the example that shows how to use *MTE* and Group *Access restrictions*
    with the *ML Auditor* and *ML Reviewer* User Roles. We saw how to selectively
    choose which Process Sessions and Session Logs are available for view/export to
    different User Roles.
  prefs: []
  type: TYPE_NORMAL
- en: This example also highlights another benefit of the *three* Process/*three*
    Work Queue design. By separating out the business logic, the ML calling, and the
    HITL reviews into different Processes, we enable cleaner MTE user access controls,
    which enhances the overall security of operating the IA solution.
  prefs: []
  type: TYPE_NORMAL
- en: MTE limitations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: MTE only restricts visibility into Processes, Objects, and Resources. Schedules,
    Work Queues, Skills, Credentials, and Environment Variables can’t be restricted
    through MTE. This means that MTE is ineffective for the *ML Deployer* Role. The
    *ML Reviewer* and *ML Deployer* Roles both need to interact with Environment Variables,
    so they must be instructed to avoid changing Environment Variables that are unrelated
    to their work. There’s no built-in method in BP to limit access to these, so we
    must rely on documented operating procedures and training.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to prevent accidental changes to Environment Variables, Credentials,
    and so on, you’ll need to come up with an external solution, such as keeping that
    data in a spreadsheet that is stored in a location with separate access controls.
  prefs: []
  type: TYPE_NORMAL
- en: An updated LAM template
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The three new IA User Roles, their Permissions, and MTE recommendations have
    been added to BP’s LAM template. This amended template is available on GitHub:
    [https://github.com/PacktPublishing/Intelligent-Automation-with-Blue-Prism/blob/main/ch8/Blue_Prism_Logical_Access_Model_(LAM)_for_v7_IA.xlsx](https://github.com/PacktPublishing/Intelligent-Automation-with-Blue-Prism/blob/main/ch8/Blue_Prism_Logical_Access_Model_(LAM)_for_v7_IA.xlsx).'
  prefs: []
  type: TYPE_NORMAL
- en: It’s recommended that the *ML Deployer* Role exists for the development, UAT,
    and production environments. The *ML Reviewer* Role should only exist for the
    UAT and production environments, as it might not make sense to review ML predictions
    during development. The *ML Auditor* only needs to exist for the production environment.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we looked at three new User Roles that can be added to the
    BP environment to handle IA-related tasks – *ML Auditor*, *ML Deployer*, and *ML
    Reviewer*. We discussed what duties they should perform inside of BP and provided
    the minimum set of Permissions needed so that they can complete their work.
  prefs: []
  type: TYPE_NORMAL
- en: We also saw that mapping User Roles to Permissions isn’t enough for the ML Auditor
    and ML Reviewer roles. We need to use MTE to limit which Processes they can access
    to reduce security concerns. Finally, we updated the LAM template with these three
    new User Roles. This template includes recommendations on which environment each
    Role should exist for, which Permissions each Role should have, and how MTE should
    be configured. In the next chapter, we’ll look at how the moving from RPA to IA
    affects BP technical operations, such as deployments and maintenance.
  prefs: []
  type: TYPE_NORMAL
