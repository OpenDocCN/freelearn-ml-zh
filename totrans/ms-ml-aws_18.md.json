["```py\ndistribution = tf.contrib.distribute.MirroredStrategy(num_gpus=4)\nconfig = tf.estimator.RunConfig(train_distribute=distribution)\n\ntf_regressor = tf.estimator.LinearRegressor(\n  config=config,\n  optimizer=tf.train.GradientDescentOptimizer(learning_rate=0.0000001),\n  feature_columns=[tf.feature_column.numeric_column('inputs', \n                                  shape=(11,))],\n)\n```", "```py\ndef training_input_fn():\n  return tf.data.Dataset.from_tensor_slices(\n        ({'inputs': training_df[training_features].as_matrix()},             \n         training_df[label].as_matrix())).repeat(50).batch(1)\n```", "```py\ntf_regressor.train(input_fn=training_input_fn)\n```"]