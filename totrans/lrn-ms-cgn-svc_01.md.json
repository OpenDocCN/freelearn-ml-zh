["```py\n        <Application x:Class=\"Chapter1.App\"\n\n        xmlns:x = \"http://schemas.microsoft.com/winfx/2006/xaml\"\n\n        StartupUri=\"View/MainView.xaml\">\n    ```", "```py\n            <Window x:Class=\"Chapter1.View.MainView\"\n\n                xmlns=\"http://schemas.microsoft.com/\n    winfx/2006/xaml/presentation\"\n\n                xmlns:d=\"http://schemas.microsoft.com/\n    expression/blend/2008\"\n\n                 mc:Ignorable=\"d\"\n                Title=\"Chapter 1\" Height=\"300\" Width=\"300\">\n                <Window.DataContext>\n                    <viewmodel:MainViewModel />\n                </Window.DataContext>\n    ```", "```py\n        public class ObservableObject : INotifyPropertyChanged\n```", "```py\n        public event PropertyChangedEventHandlerPropertyChanged;\n        protected void RaisePropertyChangedEvent(string propertyName)\n        {\n            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));\n        }\n```", "```py\n        public class DelegateCommand : ICommand\n        {\n            private readonly Predicate<object> _canExecute;\n            private readonly Action<object> _execute;\n```", "```py\n            public DelegateCommand(Action<object> execute, Predicate<object> canExecute = null)\n            {\n                _execute = execute;\n                _canExecute = canExecute;\n            }\n```", "```py\n        public bool CanExecute(object parameter)\n        {\n            if (_canExecute == null) return true;\n            return _canExecute(parameter);\n        }\n\n        public void Execute(object parameter)\n        {\n            _execute(parameter);\n        }\n\n        public event EventHandlerCanExecuteChanged\n        {\n            add\n            {\n                CommandManager.RequerySuggested += value;\n            }\n            remove\n            {\n                CommandManager.RequerySuggested -= value;\n            }\n        }\n    }\n```", "```py\n    <Grid>\n        <Grid.RowDefinitions>\n            <RowDefinition Height=\"*\" />\n            <RowDefinition Height=\"20\" />\n            <RowDefinition Height=\"30\" />\n        </Grid.RowDefinitions>\n```", "```py\n        <Image x:Name=\"FaceImage\" Stretch=\"Uniform\" Source=\n            \"{Binding ImageSource}\" Grid.Row=\"0\" />\n```", "```py\n        <TextBlockx:Name=\"StatusTextBlock\" Text=\n            \"{Binding StatusText}\" Grid.Row=\"1\" />\n```", "```py\n        <Button x:Name = \"BrowseButton\"\n                  Content = \"Browse\" Height=\"20\" Width=\"140\" \n                  HorizontalAlignment = \"Left\"\n                  Command=\"{Binding BrowseButtonCommand}\"\n                  Margin=\"5, 0, 0, 5\"Grid.Row=\"2\" />\n\n        <Button x:Name=\"DetectFaceButton\"\n                  Content=\"Detect face\" Height=\"20\" Width=\"140\"\n                  HorizontalAlignment=\"Right\"\n                  Command=\"{Binding DetectFaceCommand}\"\n                  Margin=\"0, 0, 5, 5\"Grid.Row=\"2\"/>\n```", "```py\n    private string _filePath;\n    private IFaceServiceClient _faceServiceClient;\n```", "```py\n    private BitmapImage _imageSource;\n    public BitmapImageImageSource\n    {\n        get { return _imageSource; }\n        set\n        {\n            _imageSource = value;\n            RaisePropertyChangedEvent(\"ImageSource\");\n        }\n    }\n\n    private string _statusText;\n    public string StatusText\n    {\n        get { return _statusText; }\n        set\n        {\n           _statusText = value;\n           RaisePropertyChangedEvent(\"StatusText\");\n        }\n    }\n```", "```py\n    public ICommandBrowseButtonCommand { get; private set; }\n    public ICommandDetectFaceCommand { get; private set; }\n\n    public MainViewModel()\n    {\n        StatusText = \"Status: Waiting for image...\";\n\n        _faceServiceClient = new FaceServiceClient(\"YOUR_API_KEY_HERE\", \"ROOT_URI);\n\n        BrowseButtonCommand = new DelegateCommand(Browse);\n        DetectFaceCommand = new DelegateCommand(DetectFace, CanDetectFace);\n    }\n```", "```py\n    private void Browse(object obj)\n    {\n        var openDialog = new Microsoft.Win32.OpenFileDialog();\n        openDialog.Filter = \"JPEG Image(*.jpg)|*.jpg\";\n        bool? result = openDialog.ShowDialog();\n\n        if (!(bool)result) return;\n```", "```py\n        _filePath = openDialog.FileName;\n        Uri fileUri = new Uri(_filePath);\n```", "```py\n        BitmapImage image = new BitmapImage(fileUri);\n\n        image.CacheOption = BitmapCacheOption.None;\n        image.UriSource = fileUri;\n```", "```py\n        ImageSource = image;\n        StatusText = \"Status: Image loaded...\";\n    }\n```", "```py\n    private boolCanDetectFace(object obj)\n    {\n        return !string.IsNullOrEmpty(ImageSource?.UriSource.ToString());\n    }\n```", "```py\n    private async void DetectFace(object obj)\n    {\n        FaceRectangle[] faceRects = await UploadAndDetectFacesAsync();\n\n        string textToSpeak = \"No faces detected\";\n\n        if (faceRects.Length == 1)\n            textToSpeak = \"1 face detected\";\n        else if (faceRects.Length> 1)\n            textToSpeak = $\"{faceRects.Length} faces detected\";\n\n        Debug.WriteLine(textToSpeak);\n    }\n```", "```py\n    private async Task<FaceRectangle[]>UploadAndDetectFacesAsync()\n    {\n        StatusText = \"Status: Detecting faces...\";\n\n        try\n        {\n            using (Stream imageFileStream = File.OpenRead(_filePath))\n```", "```py\n            Face[] faces = await _faceServiceClient.DetectAsync(imageFileStream, true, true, new List<FaceAttributeType>() { FaceAttributeType.Age });\n```", "```py\n            List<double> ages = faces.Select(face =>face.FaceAttributes.Age).ToList();\n            FaceRectangle[] faceRects = faces.Select(face =>face.FaceRectangle).ToArray();\n\n            StatusText = \"Status: Finished detecting faces...\";\n\n            foreach(var age in ages) {\n                Console.WriteLine(age);\n            }\n            return faceRects;\n        }\n    }\n```", "```py\n    1 face detected\n    23,7\n```", "```py\n    private string _requestDetails;\n    private string _token;\n    private Timer _tokenRenewer;\n\n    private const int TokenRefreshInterval = 9;\n\n    public string Token { get { return _token; } }\n```", "```py\n    _clientSecret = clientSecret;\n```", "```py\n    public async Task Initialize()\n    {\n        _token = GetToken();\n\n        _tokenRenewer = new Timer(new TimerCallback(OnTokenExpiredCallback), this,\n        TimeSpan.FromMinutes(TokenRefreshInterval),\n        TimeSpan.FromMilliseconds(-1));\n    }\n```", "```py\n    using(var client = new HttpClient())\n    {\n        client.DefaultRequestHeaders.Add (\"Opc-Apim-Subscription-Key\", _clientSecret);\n        UriBuilder uriBuilder = new UriBuilder (https://api.cognitive.microsoft.com/sts/v1.0\");\n        uriBuilder.Path = \"/issueToken\";\n```", "```py\nvar result = await client.PostAsync(uriBuilder.Uri.AbsoluteUri, null);\n```", "```py\nreturn await result.Content.ReadAsStringAsync();\n```", "```py\n    public class AudioEventArgs : EventArgs\n    {\n        public AudioEventArgs(Stream eventData)\n        {\n            EventData = eventData;\n        }\n\n        public StreamEventData { get; private set; }\n    }\n```", "```py\n    public class AudioErrorEventArgs : EventArgs\n    {\n        public AudioErrorEventArgs(string message)\n        {\n            ErrorMessage = message;\n        }\n\n        public string ErrorMessage { get; private set; }\n    }\n```", "```py\n    public class TextToSpeak\n    {\n        public event EventHandler<AudioEventArgs>OnAudioAvailable;\n        public event EventHandler<AudioErrorEventArgs>OnError;\n\n        private string _gender;\n        private string _voiceName;\n        private string _outputFormat;\n        private string _authorizationToken;\n        private AccessTokenInfo _token;\n\n        private List<KeyValuePair<string, string>> _headers = new  List<KeyValuePair<string, string>>();\n```", "```py\nprivate const string RequestUri =  \"https://speech.platform.bing.com/synthesize\";\n\nprivate const string SsmlTemplate =\n    \"<speak version='1.0'xml:lang='en-US'>\n        <voice xml:lang='en-US'xml:gender='{0}'\n        name='{1}'>{2}\n        </voice>\n    </speak>\";\n```", "```py\n        public TextToSpeak()\n        {\n            _gender = \"Female\";\n            _outputFormat = \"riff-16khz-16bit-mono-pcm\";\n            _voiceName = \"Microsoft Server Speech Text to Speech Voice (en-US, ZiraRUS)\";\n        }\n```", "```py\n        public void GenerateHeaders()\n        {\n            _headers.Add(new KeyValuePair<string, string>(\"Content-Type\", \"application/ssml+xml\"));\n            _headers.Add(new KeyValuePair<string, string>(\"X-Microsoft-OutputFormat\", _outputFormat));\n            _headers.Add(new KeyValuePair<string, string>(\"Authorization\", _authorizationToken));\n            _headers.Add(new KeyValuePair<string, string>(\"X-Search-AppId\", Guid.NewGuid().ToString(\"N\")));\n            _headers.Add(new KeyValuePair<string, string>(\"X-Search-ClientID\", Guid.NewGuid().ToString(\"N\")));\n            _headers.Add(new KeyValuePair<string, string>(\"User-Agent\", \"Chapter1\"));\n        }\n```", "```py\n        public bool GenerateAuthenticationToken(string clientSecret)\n        {\n            Authentication auth = new Authentication(clientSecret);\n```", "```py\n        try\n        {\n            _token = auth.Token;\n\n            if (_token != null)\n            {\n                _authorizationToken = $\"Bearer {_token}\";\n\n                return true;\n            }\n            else\n            {\n                RaiseOnError(new AudioErrorEventArgs(\"Failed to generate authentication token.\"));\n                return false;\n            }\n        }\n```", "```py\n        public Task SpeakAsync(string textToSpeak, CancellationTokencancellationToken)\n        {\n            varcookieContainer = new CookieContainer();\n            var handler = new HttpClientHandler() {\n                CookieContainer = cookieContainer\n            };\n            var client = new HttpClient(handler);\n```", "```py\n            foreach(var header in _headers)\n            {\n                client.DefaultRequestHeaders.TryAddWithoutValidation (header.Key, header.Value);\n            }\n```", "```py\n            var request = new HttpRequestMessage(HttpMethod.Post, RequestUri)\n            {\n                Content = new StringContent(string.Format(SsmlTemplate, _gender, _voiceName, textToSpeak))\n            };\n```", "```py\n            var httpTask = client.SendAsync(request, HttpCompletionOption.ResponseHeadersRead, cancellationToken);\n```", "```py\n    var saveTask = httpTask.ContinueWith(async (responseMessage, token) =>\n    {\n        try\n        {\n            if (responseMessage.IsCompleted &&\n                responseMessage.Result != null &&  \n                responseMessage.Result.IsSuccessStatusCode) {\n                var httpStream = await responseMessage. Result.Content.ReadAsStreamAsync().ConfigureAwait(false);\n                RaiseOnAudioAvailable(new AudioEventArgs (httpStream));\n            } else {\n                RaiseOnError(new AudioErrorEventArgs($\"Service returned {responseMessage.Result.StatusCode}\"));\n            }\n        }\n        catch(Exception e)\n        {\n            RaiseOnError(new AudioErrorEventArgs (e.GetBaseException().Message));\n        }\n    }\n```", "```py\n    }, TaskContinuationOptions.AttachedToParent, cancellationToken);\n    return saveTask;\n}\n```", "```py\n        private TextToSpeak _textToSpeak;\n```", "```py\n            _textToSpeak = new TextToSpeak();\n            _textToSpeak.OnAudioAvailable +=  _textToSpeak_OnAudioAvailable;\n            _textToSpeak.OnError += _textToSpeak_OnError;\n\n            GenerateToken();\n```", "```py\npublic async void GenerateToken()\n{\n    if (await _textToSpeak.GenerateAuthenticationToken(\"BING_SPEECH_API_KEY_HERE\"))\n        _textToSpeak.GenerateHeaders();\n}\n```", "```py\n            private void _textToSpeak_OnError(object sender, AudioErrorEventArgs e)\n            {\n                StatusText = $\"Status: Audio service failed -  {e.ErrorMessage}\";\n            }\n```", "```py\n        private void _textToSpeak_OnAudioAvailable(object sender, AudioEventArgs e)\n        {\n            SoundPlayer player = new SoundPlayer(e.EventData);\n            player.Play();\n            e.EventData.Dispose();\n        }\n```", "```py\n    await _textToSpeak.SpeakAsync(textToSpeak, CancellationToken.None);\n```"]