- en: '*Appendix*'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: About
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This section is included to assist the students to perform the activities in
    the book. It includes detailed steps that are to be performed by the students
    to achieve the objectives of the activities.
  prefs: []
  type: TYPE_NORMAL
- en: 'Chapter 1: Introduction to Clustering Methods'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Activity 1: k-means Clustering with Three Clusters'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Solution:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Load the Iris dataset in the `iris_data` variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a `t_color` column and make its default value `red`. Change the value
    of the two species to `green` and `blue` so the third one remains `red`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H4
  type: TYPE_NORMAL
- en: Here, we change the `color` column of only those values whose species is `setosa`
    or `virginica`)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Choose any three random cluster centers:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Plot the `x`, `y` plot by entering the sepal length and sepal width in the
    `plot()` function, along with color:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Here is the output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 1.36: Scatter plot for the given cluster centers](img/C12628_01_36.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 1.36: Scatter plot for the given cluster centers'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Choose a number of iterations:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Choose an the initial value of `n`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Start the `while` loop for finding the cluster centers:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Calculate the distance of each point from the current cluster centers. We''re
    calculating the Euclidean distance here using the `sqrt` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Assign each point to a cluster to whose center it is closest:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Calculate new cluster centers by calculating the mean `x` and `y` coordinates
    of each center with the `mean()` function in R:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Choose the color for each center to plot a scatterplot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Plot the final plot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 1.37: Scatter plot representing different species in different colors](img/C12628_01_37.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.37: Scatter plot representing different species in different colors'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Activity 2: Customer Segmentation with k-means'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Solution:'
  prefs: []
  type: TYPE_NORMAL
- en: Download the data from [https://github.com/TrainingByPackt/Applied-Unsupervised-Learning-with-R/tree/master/Lesson01/Activity02/wholesale_customers_data.csv](https://github.com/TrainingByPackt/Applied-Unsupervised-Learning-with-R/tree/master/Lesson01/Activity02/wholesale_customers_data.csv).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Read the data into the `ws` variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Store only column 5 and 6 in the `ws` variable by discarding the rest of the
    columns:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Import the `factoextra` library:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Calculate the cluster centers for two centers:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Plot the chart for two clusters:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 1.38: Chart for two clusters](img/C12628_01_38.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 1.38: Chart for two clusters'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: Notice how outliers are also part of the two clusters.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Calculate the cluster centers for three clusters:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Plot the chart for three clusters:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 1.39: Chart for three clusters](img/C12628_01_39.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 1.39: Chart for three clusters'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: Notice some outliers are now a part of a separate cluster.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Calculate the cluster centers for four centers:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Plot the chart for four clusters:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 1.40: Chart for four clusters](img/C12628_01_40.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 1.40: Chart for four clusters'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: Notice how outliers have started separating in two different clusters.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Calculate the cluster centers for five clusters:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Plot the chart for five clusters:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 1.41: Chart for five clusters](img/C12628_01_41.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 1.41: Chart for five clusters'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: Notice how outliers have clearly formed two separate clusters in red and blue,
    while the rest of the data is classified in three different clusters.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Calculate the cluster centers for six clusters:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Plot the chart for six clusters:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 1.42: Chart for six clusters](img/C12628_01_42.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.42: Chart for six clusters'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Activity 3: Performing Customer Segmentation with k-medoids Clustering'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Solution:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Read the CSV file into the `ws` variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Store only columns 5 and 6 in the `ws` variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Import the `factoextra` library for visualization:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Import the `cluster` library for clustering by PAM:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Calculate clusters by entering data and the number of clusters in the `pam`
    function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Plot a visualization of the clusters:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 1.43: K-medoid plot of the clusters](img/C12628_01_43.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 1.43: K-medoid plot of the clusters'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Again, calculate the clusters with k-means and plot the output to compare with
    the output of the `pam` clustering:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 1.44: K-means plot of the clusters](img/C12628_01_44.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.44: K-means plot of the clusters'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Activity 4: Finding the Ideal Number of Market Segments'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Solution:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Read the downloaded dataset into the `ws` variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Store only columns 5 and 6 in the variable by discarding other columns:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Calculate the optimal number of clusters with the silhouette score:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Here is the output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 1.45: Graph representing optimal number of clusters with silhouette
    score](img/C12628_01_45.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 1.45: Graph representing optimal number of clusters with the silhouette
    score'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: The optimal number of clusters, according to the silhouette score, is two.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Calculate the optimal number of clusters with the WSS score:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Here is the output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 1.46: Optimal number of clusters with the WSS score](img/C12628_01_46.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 1.46: Optimal number of clusters with the WSS score'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: The optimum number of clusters according to the WSS elbow method is around six.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Calculate the optimal number of clusters with the Gap statistic:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Here is the output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 1.47: Optimal number of clusters with the Gap statistic](img/C12628_01_47.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.47: Optimal number of clusters with the Gap statistic'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The optimal number of clusters according to the Gap statistic is one.
  prefs: []
  type: TYPE_NORMAL
- en: 'Chapter 2: Advanced Clustering Methods'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Activity 5: Implementing k-modes Clustering on the Mushroom Dataset'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Solution:'
  prefs: []
  type: TYPE_NORMAL
- en: Download `mushrooms.csv` from https://github.com/TrainingByPackt/Applied-Unsupervised-Learning-with-R/blob/master/Lesson02/Activity05/mushrooms.csv.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After downloading, load the `mushrooms.csv` file in R:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Check the dimensions of the dataset:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Check the distribution of all columns:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.29: Screenshot of summary of distribution of all columns](img/C12628_02_29.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 2.29: Screenshot of the summary of distribution of all columns'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: Each column contains all the unique labels and their count.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Store all the columns of the dataset, except for the final label, in a new
    variable, `ms_k`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Import the `klaR` library, which has the `kmodes` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Calculate `kmodes` clusters and store them in a `kmodes_ms` variable. Enter
    the dataset without `true` labels as the first parameter and enter the number
    of clusters as the second parameter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Check the results by creating a table of `true` labels and `cluster` labels:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As you can see, most of the edible mushrooms are in cluster 2 and most of the
    poisonous mushrooms are in cluster 1\. So, using k-modes clustering has done a
    reasonable job of identifying whether each mushroom is edible or poisonous.
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity 6: Implementing DBSCAN and Visualizing the Results'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Solution:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Import the `dbscan` and `factoextra` library:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Import the `multishapes` dataset:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Put the columns of the `multishapes` dataset in the `ms` variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Plot the dataset as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.30: Plot of the multishapes dataset](img/C12628_02_30.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 2.30: Plot of the multishapes dataset'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Perform k-means clustering on the dataset and plot the results:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/C12628_02_31.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 2.31: Plot of k-means on the multishapes dataset'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Perform DBSCAN on the `ms` variable and plot the results:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.32: Plot of DBCAN on the multishapes dataset](img/C12628_02_32.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.32: Plot of DBCAN on the multishapes dataset'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Here, you can see all the points in black are anomalies and are not present
    in any cluster, and the clusters formed in DBSCAN are not possible with any other
    type of clustering method. These clusters have taken all types of shapes and sizes,
    whereas in k-means, all clusters are of a spherical shape.
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity 7: Performing a Hierarchical Cluster Analysis on the Seeds Dataset'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Solution:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Read the downloaded file into the `sd` variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H4
  type: TYPE_NORMAL
- en: Make changes to the path as per the location of the file on your system.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'First, put all the columns of the dataset other than final labels into the
    `sd_c` variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Import the `cluster` library:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Calculate the hierarchical clusters and plot the dendrogram:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.33: Cluster dendrogram](img/C12628_02_33.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 2.33: Cluster dendrogram'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Cut the tree at `k=3` and plot a table to see how the results of the clustering
    have performed at classifying the three types of seeds:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.34: Table classifying the three types of seeds](img/C12628_02_34.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 2.34: Table classifying the three types of seeds'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Perform divisive clustering on the `sd_c` dataset and plot the dendrogram:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.35: Dendrogram of divisive clustering](img/C12628_02_35.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 2.35: Dendrogram of divisive clustering'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Cut the tree at `k=3` and plot a table to see how the results of the clustering
    have performed at classifying the three types of seeds:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.36: Table classifying the three types of seeds](img/C12628_02_36.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.36: Table classifying the three types of seeds'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: You can see that both types of clustering methods have produced identical results.
    These results also demonstrate that divisive clustering is the reverse of hierarchical
    clustering.
  prefs: []
  type: TYPE_NORMAL
- en: 'Chapter 3: Probability Distributions'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Activity 8: Finding the Standard Distribution Closest to the Distribution of
    Variables of the Iris Dataset'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Solution:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Load the Iris dataset into the `df` variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Select rows corresponding to the setosa species only:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Import the `kdensity` library:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Calculate and plot the KDE from the `kdensity` function for sepal length:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 3.36 Plot of the KDE for sepal length](img/C12628_03_36.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Figure 3.36 Plot of the KDE for sepal length
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: This distribution is closest to the normal distribution, which we studied in
    the previous section. Here, the mean and median are both around 5.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Calculate and plot the KDE from the `kdensity` function for sepal width:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 3.37 Plot of the KDE for sepal width](img/C12628_03_37.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.37 Plot of the KDE for sepal width
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This distribution is also closest to normal distribution. We can formalize this
    similarity with a Kolmogorov-Smirnov test.
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity 9: Calculating the CDF and Performing the Kolmogorov-Simonov Test
    with the Normal Distribution'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Solution:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Load the Iris dataset into the `df` variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Keep rows with the setosa species only:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Calculate the mean and standard deviation of the sepal length column of `df`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Generate a new distribution with the standard deviation and mean of the sepal
    length column:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Plot the CDF of both `xnorm` and the sepal length column:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 3.38: The CDF of xnorm and sepal length](img/C12628_03_38.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 3.38: The CDF of xnorm and sepal length'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: The samples look very close to each other in the distribution. Let's see, in
    the next test, whether the sepal length sample belongs to the normal distribution
    or not.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Perform the Kolmogorov-Smirnov test on the two samples, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, `p-value` is very high and the `D` value is low, so we can assume that
    the distribution of sepal length is closely approximated by the normal distribution.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Repeat the same steps for the sepal width column of `df`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 3.39: CDF of xnorm and sepal width](img/C12628_03_39.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 3.39: CDF of xnorm and sepal width'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Perform the Kolmogorov-Smirnov test as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, also, the sample distribution of sepal width is closely approximated by
    the normal distribution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Chapter 4: Dimension Reduction'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Activity 10: Performing PCA and Market Basket Analysis on a New Dataset'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Solution:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Before starting our main analysis, we will remove one variable that will not
    be relevant to us:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We will create dummy variables. We will end up with one original dataset, and
    one dummy variable dataset. We do that as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Next, we will create dummy variables for each of the measurements in the original
    dataset. You can find out the meaning of each of the variables in the dataset
    in the documentation of the MASS package, available at [https://cran.r-project.org/web/packages/MASS/MASS.pdf](https://cran.r-project.org/web/packages/MASS/MASS.pdf).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create dummy variables for whether a town has high or low crime per capita:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create dummy variables for whether a town has a high or low proportion of land
    zoned for lots over 25,000 feet:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create dummy variables for whether a town has a high or low proportion of non-retail
    business acres per town:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create dummy variables for whether a town borders the Charles River:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create dummy variables for whether a town has a high or low nitrogen oxide
    concentration:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create dummy variables for whether a town has a high or low average number
    of rooms per dwelling:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create dummy variables for whether a town has a high or low proportion of owner-occupied
    units built prior to 1940:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create dummy variables for whether a town has a high or low average distance
    to five of Boston''s employment centers:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create dummy variables for whether a town has a high or low index of accessibility
    to radial highways:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create dummy variables for whether a town has a high or low full-value property
    tax rate:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create dummy variables for whether a town has a high or low pupil-teacher ratio:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create dummy variables for whether a town has a high or low proportion of lower-status
    population:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create dummy variables for whether a town has a high or low median home value:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a dataset that consists entirely of the dummy variables we have just
    created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, we will restore our `Boston_2` dataset to its original form before
    all of the dummy variables were added:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Calculate the eigenvalues and eigenvectors of the covariance matrix of the
    dataset, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 4.17: Eigenvectors of the covariance matrix](img/C12628_04_17.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 4.17: Eigenvectors of the covariance matrix'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Print eigen values as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 4.18: Eigenvalues of the covariance matrix](img/C12628_04_18.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 4.18: Eigenvalues of the covariance matrix'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'For the third part, we create a simple scree plot based on the eigenvalues:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 4.19: Plot of the eigenvalues](img/C12628_04_19.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 4.19: Plot of the eigenvalues'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Next, we choose the number of eigenvectors we will use (I chose 10), and we
    transform the dataset to be 10-dimensional, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, we restore the dataset as much as possible:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, we can check how close our restoration is to the original dataset,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Here, we need to specify a `support` threshold (for example, 20%), and complete
    the first pass through the data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Here, we complete the second pass through the data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Here, we complete the third pass, and then do filtering based on the `confidence`
    and `lift` thresholds:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Our final output is the list of three-item baskets that have passed the `support`,
    `confidence`, and `lift` thresholds:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 4.20: Output of the three-item basket](img/C12628_04_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.20: Output of the three-item basket'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Chapter 5: Data Comparison Methods'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Activity 11: Create an Image Signature for a Photograph of a Person'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Solution:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Download the Borges photo to your computer and save it as `borges.jpg`. Make
    sure that it is saved in R''s working directory. If it is not in R''s working
    directory, then change R''s working directory using the `setwd()` function. Then,
    you can load this image into a variable called `im` (short for image), as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The rest of the code we will explore will use this image, called `im`. Here,
    we have loaded a picture of the Alamo into `im`. However, you can run the rest
    of the code on any image, simply by saving the image to your working directory
    and specifying its path in the f`ilepath` variable.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The signature we are developing is meant to be used for grayscale images. So,
    we will convert this image to grayscale, using functions in the `imager` package:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The second line of this code is the conversion to grayscale. The last line performs
    a split of the image into 10 equal sections.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The following code creates an empty matrix that we will fill with information
    about each section of our 10x10 grid:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we will run the following loop. The first line of this loop uses the
    `imsplit` command. This command was also used previously to split the x axis into
    10 equal parts. This time, for each of the 10 x-axis splits, we will do a split
    along the y-axis, also splitting it into 10 equal parts:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The output so far is the `matrix` variable. We will use this in *step 4*.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Get the signature of the Borges photograph by running the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 5.12: Matrix of borges_signature](img/C12628_05_13.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 5.12: Matrix of borges_signature'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Next, we will start calculating a signature using a 9x9 matrix, instead of
    a 10x10 matrix. We start with the same process we used before. The following lines
    of code load our Borges image like we did previously. The final line of this code
    splits the image into equal parts, but instead of 10 equal parts, we set `nb=9`
    so that we split the image into 9 equal parts:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The following code creates an empty matrix that we will fill with information
    about each section of our 9x9 grid:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note that we use `nrow=9` and `ncol=9` so that we have a 9x9 matrix to fill
    with our brightness measurements.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Next, we will run the following loop. The first line of this loop uses the
    `imsplit` command. This command was also used earlier to split the x axis into
    9 equal parts. This time, for each of the 9 x axis splits, we will do a split
    along the y axis, also splitting it into 9 equal parts:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The output so far is the `matrix` variable. We will repeat *Step 4*.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Get a 9x9 signature of the Borges photograph by running the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 5.13: Matrix of borges_signature_ninebynine](img/C12628_05_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.13: Matrix of borges_signature_ninebynine'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Activity 12: Create an Image Signature for the Watermarked Image'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Solution:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Download the watermarked photo to your computer and save it as `alamo_marked.jpg`.
    Make sure that it is saved in R''s working directory. If it is not in R''s working
    directory, then change R''s working directory using the `setwd()` function. Then,
    you can load this image into a variable called `im` (short for image), as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The rest of the code we will explore will use this image called `im`. Here,
    we have loaded a watermarked picture of the Alamo into `im`. However, you can
    run the rest of the code on any image, simply by saving the image to your working
    directory, and specifying its path in the `filepath` variable.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The signature we are developing is meant to be used for grayscale images. So,
    we will convert this image to grayscale by using functions in the `imager` package:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The second line of this code is the conversion to grayscale. The last line performs
    a split of the image into 10 equal sections.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The following code creates an empty matrix that we will fill with information
    about each section of our 10x10 grid:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we will run the following loop. The first line of this loop uses the
    `imsplit` command. This command was also used earlier to split the x axis into
    10 equal parts. This time, for each of the 10 x-axis splits, we will do a split
    along the y axis, also splitting it into 10 equal parts:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE113]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The output so far is the `matrix` variable. We will use this in *Step 4*.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We can get the signature of the watermarked photograph by running the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE114]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 5.14: Signature of watermarked image](img/C12628_05_06.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 5.14: Signature of watermarked image'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'The final output of this activity is the `watermarked_signature` variable,
    which is the analytic signature of the watermarked Alamo photo. If you have completed
    all of the exercises and activities so far, then you should have three analytic
    signatures: one called `building_signature`, one called `borges_signature`, and
    one called `watermarked_signature`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'After completing this activity, we have stored this signature in a variable
    called `watermarked_signature`. Now, we can compare it to our original Alamo signature,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE115]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In this case, the result we get is 0.015, indicating a very close match between
    the original image signature and this new image's signature.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: What we have seen is that our analytic signature method returns similar signatures
    for similar images, and different signatures for different images. This is exactly
    what we want a signature to do, and so we can judge this method a success.
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity 13: Performing Factor Analysis'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Solution:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The data file can be downloaded from [https://github.com/TrainingByPackt/Applied-Unsupervised-Learning-with-R/tree/master/Lesson05/Data/factor.csv](https://github.com/TrainingByPackt/Applied-Unsupervised-Learning-with-R/tree/master/Lesson05/Data/factor.csv).
    Save it to your computer and make sure that it is in R''s working directory. If
    you save it as `factor.csv`, then you can load it in R by executing the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE116]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Load the `psych` package as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE117]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We will be performing factor analysis on the user ratings, which are recorded
    in columns 2 through 11 of the data. We can select these columns as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE118]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a correlation matrix of the ratings data as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE119]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Determine the number of factors we should use by creating a scree plot. A scree
    plot is produced as one of the outputs of the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE120]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The scree plot looks like the following:![Figure 5.15: Parallel Analysis Scree
    Plots](img/C12628_05_16.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 5.15: Parallel Analysis Scree Plots'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: The scree plot shows one factor whose eigenvalue is much higher than the others.
    While we are free to choose any number of factors in our analysis, the single
    factor that is much larger than the others provides good reason to use one factor
    in our analysis.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We can perform factor analysis as follows, specifying the number of factors
    in the `nfactors` parameter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE121]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This stores the results of our factor analysis in a variable called `factor_analysis`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We can examine the results of our factor analysis as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE122]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output looks as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 5.16: Result of factor analysis](img/C12628_05_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.16: Result of factor analysis'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The numbers under `MR1` show us the factor loadings for each category for our
    single factor. Since we have only one explanatory factor, all of the categories
    that have positive loadings on this factor are positively correlated with each
    other. We could interpret this factor as general positivity, since it would indicate
    that if people rate one category highly, they will also rate other categories
    highly, and if they rate one category poorly, they are likely to rate other categories
    poorly.
  prefs: []
  type: TYPE_NORMAL
- en: The only major exception to this rule is `Category 10`, which records users'
    average ratings of religious institutions. In this case, the factor loading is
    large and negative. This indicates that people who rate most other categories
    highly tend to rate religious institutions poorly, and vice versa. So, maybe we
    can interpret the positivity factor we have found as positivity about recreational
    activities, instead since religious institutions are arguably not places for recreation
    but rather for worship. It seems that, in this dataset, those who are positive
    about recreational activities are negative about worship, and vice versa. For
    the factor loadings that are close to 0, we can also conclude that the rule about
    positivity about recreation holds less strongly. You can see that factor analysis
    has enabled us to find relationships between the observations in our data that
    we had not previously suspected.
  prefs: []
  type: TYPE_NORMAL
- en: 'Chapter 6: Anomaly Detection'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Activity 14: Finding Univariate Anomalies Using a Parametric Method and a Non-parametric
    Method'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Solution:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Load the data as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE123]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Draw a boxplot as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE124]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Figure 6.21: Boxplot of the islands dataset](img/C12628_06_21.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 6.21: Boxplot of the islands dataset'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: You should notice that the data is extremely fat-tailed, meaning that the median
    and interquartile range take up a relatively tiny portion of the plot compared
    to the many observations that R has classified as outliers.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create a new log-transformed dataset as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE125]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a boxplot of the log-transformed data as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE126]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Figure 6.22: Boxplot of log-transformed dataset](img/C12628_06_22.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 6.22: Boxplot of log-transformed dataset'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: You should notice that there are only five outliers after the log transformation.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Calculate the interquartile range:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE127]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add 1.5 times the interquartile range to the third quartile to get the upper
    limit of the non-outlier data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE128]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Classify outliers as any observations above this upper limit:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE129]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Calculate the interquartile range for the log-transformed data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE130]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add 1.5 times the interquartile range to the third quartile to get the upper
    limit of the non-outlier data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE131]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Classify outliers as any observations above this upper limit:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE132]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Print the non-transformed outliers as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE133]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For the non-transformed outliers, we obtain the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 6.23: Non-transformed outliers](img/C12628_06_23.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 6.23: Non-transformed outliers'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Print the log-transformed outliers as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE134]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For the log-transformed outliers, we obtain the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 6.24: Log-transformed outliers](img/C12628_06_24.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 6.24: Log-transformed outliers'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Calculate the mean and standard deviation of the data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE135]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Select observations that are more than two standard deviations away from the
    mean:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE136]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We obtain the following outliers:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 6.25: Screenshot of the outliers](img/C12628_06_25.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 6.25: Screenshot of the outliers'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'First, we calculate the mean and standard deviation of the log-transformed
    data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE137]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Select observations that are more than two standard deviations away from the
    mean:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE138]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We print the log-transformed outliers as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE139]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 6.26: Log-transformed outliers](img/C12628_06_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.26: Log-transformed outliers'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Activity 15: Using Mahalanobis Distance to Find Anomalies'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Solution:'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can load and plot the data as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE140]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output plot is the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 6.27: Plot of the cars dataset](img/C12628_06_27.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 6.27: Plot of the cars dataset'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Calculate the centroid:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE141]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Calculate the covariance matrix:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE142]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Calculate the inverse of the covariance matrix:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE143]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a `NULL` variable, which will hold each of our calculated distances:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE144]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We can loop through each observation and find the Mahalanobis distance between
    them and the centroid of the data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE145]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Plot all observations that have particularly high Mahalanobis distances to
    see our outliers:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE146]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We can see the output plot as follows, with the outlier points shown in red:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 6.28: Plot with outliers marked](img/C12628_06_28.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.28: Plot with outliers marked'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
