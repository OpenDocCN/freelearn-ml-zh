["```py\npublic static void Sobel(Mat src, Mat dst, int ddepth, int dx,int dy)\n```", "```py\nLaplacian(Mat source, Mat destination, int ddepth)\n```", "```py\nCanny(Mat image, Mat edges, double threshold1, double threshold2, int apertureSize, boolean L2gradient)\n```", "```py\nHoughLines(Mat image, Mat lines, double rho, double theta, int threshold)\nHoughLinesP(Mat image, Mat lines, double rho, double theta, int threshold)\n```", "```py\nMat canny = new Mat();\nImgproc.Canny(originalImage, canny, 10, 50, aperture, false);\nimage = originalImage.clone();\nMat lines = new Mat();\nImgproc.HoughLines(canny, lines, 1, Math.PI/180, lowThreshold);\n```", "```py\npublic static void warpPerspective(Mat src, Mat dst, Mat M, Size dsize)\n```", "```py\npublic static Mat getPerspectiveTransform(Mat src, Mat dst)\n```", "```py\nMat gray = new Mat();\nImgproc.cvtColor(originalImage, gray, Imgproc.COLOR_RGB2GRAY);\nMat floatGray = new Mat();\ngray.convertTo(floatGray, CvType.CV_32FC1);\n\nList<Mat> matList = new ArrayList<Mat>();\nmatList.add(floatGray);\nMat zeroMat = Mat.zeros(floatGray.size(), CvType.CV_32F);\nmatList.add(zeroMat);\nMat complexImage = new Mat();\nCore.merge(matList, complexImage);\n```", "```py\nCore.dft(complexImage,complexImage);\n```", "```py\nList<Mat> splitted = new ArrayList<Mat>();\nCore.split(complexImage,splitted);\nMat magnitude = new Mat();\nCore.magnitude(splitted.get(0), splitted.get(1), magnitude);\n```", "```py\nCore.add(Mat.ones(magnitude.size(), CvType.CV_32F), magnitude, magnitude);\nCore.log(magnitude, magnitude);\n```", "```py\nint cx = magnitude.cols()/2;\nint cy = magnitude.rows()/2;\nMat q0 = new Mat(magnitude,new Rect(0, 0, cx, cy));   \nMat q1 = new Mat(magnitude,new Rect(cx, 0, cx, cy));  \nMat q2 = new Mat(magnitude,new Rect(0, cy, cx, cy));  \nMat q3 = new Mat(magnitude ,new Rect(cx, cy, cx, cy));\nMat tmp = new Mat();\nq0.copyTo(tmp);\nq3.copyTo(q0);\ntmp.copyTo(q3);\n\nq1.copyTo(tmp);\nq2.copyTo(q1);\ntmp.copyTo(q2);\n```", "```py\nmagnitude.convertTo(magnitude, CvType.CV_8UC1);\nCore.normalize(magnitude, magnitude,0,255, Core.NORM_MINMAX, CvType.CV_8UC1);\n```", "```py\nMat image = new Mat(3,3 ,CvType.CV_8UC1);\nMat sum = new Mat();\nbyte[] buffer = {0,2,4,6,8,10,12,14,16};\nimage.put(0,0,buffer);\nSystem.out.println(image.dump());\nImgproc.integral(image, sum);\nSystem.out.println(sum.dump());\n```", "```py\nprotected void processOperation() {\n  Imgproc.Canny(originalImage, image, 220, 255, 3, false);\n  Imgproc.threshold(image, image, 100, 255, Imgproc.THRESH_BINARY_INV );\n  Imgproc.distanceTransform(image, image, Imgproc.CV_DIST_L2, 3);\n  image.convertTo(image, CvType.CV_8UC1);\n  Core.multiply(image, new Scalar(20), image);\n\n  updateView();\n}\n```", "```py\nprotected void processOperation() {\n  Imgproc.cvtColor(originalImage, grayImage, Imgproc.COLOR_RGB2GRAY);\n  Imgproc.equalizeHist(grayImage, image);\n  updateView();\n}\n```"]