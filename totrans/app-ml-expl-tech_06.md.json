["```py\n!pip install lime\n```", "```py\nimport lime\n```", "```py\ndata = pd.read_csv('dataset/titanic.csv')\n```", "```py\ndata.head()\n```", "```py\n# Dropping all irrelevant columns\n```", "```py\ndata.drop(columns=['PassengerId', 'Name', 'Cabin', 'Ticket'], inplace = True)\n```", "```py\n# Handling missing values\n```", "```py\ndata.dropna(inplace=True)\n```", "```py\n# Ensuring that Age and Fare is of type float \n```", "```py\ndata['Age'] = data['Age'].astype('float')\n```", "```py\ndata['Fare'] = data['Fare'].astype('float')\n```", "```py\n# Label Encoding features \n```", "```py\ncategorical_feat = ['Sex']\n```", "```py\n# Using label encoder to transform string categories to integer labels\n```", "```py\nle = LabelEncoder()\n```", "```py\nfor feat in categorical_feat:\n```", "```py\n    data[feat] = le.fit_transform(data[feat]).astype('int')\n```", "```py\n# One-Hot Encoding Categorical features\n```", "```py\ndata = pd.get_dummies(data, columns=['Embarked'])\n```", "```py\n!pip install xgboost\n```", "```py\nfeatures = data.drop(columns=['Survived'])\n```", "```py\nlabels = data['Survived']\n```", "```py\n# Dividing into training-test set with 80:20 split ratio\n```", "```py\nx_train,x_test,y_train,y_test = train_test_split(\n```", "```py\n    features,labels,test_size=0.2, random_state=123)\n```", "```py\nmodel = XGBClassifier(n_estimators = 300, \n```", "```py\n                      random_state = 123)\n```", "```py\nmodel.fit(x_train, y_train)\n```", "```py\npredict_fn = lambda x: model.predict_proba(x)\n```", "```py\nexplainer = lime.lime_tabular.LimeTabularExplainer(\n```", "```py\n    data[features.columns].astype(int).values, \n```", "```py\n    mode='classification', \n```", "```py\n    training_labels=data['Survived'],\n```", "```py\n    feature_names=features.columns)\n```", "```py\nexp = explainer.explain_instance(\n```", "```py\n    data.loc[i,features.columns].astype(int).values, \n```", "```py\n    predict_fn, num_features=5)\n```", "```py\nexp.show_in_notebook(show_table=True)\n```", "```py\nsp_exp = submodular_pick.SubmodularPick(\n```", "```py\n   explainer, data[features.columns].values, predict_fn,\n```", "```py\n   num_features=5, num_exps_desired=10)\n```", "```py\n[exp.as_pyplot_figure(label=exp.available_labels()[0]) for exp in sp_exp.sp_explanations]\n```"]