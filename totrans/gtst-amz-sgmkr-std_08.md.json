["```py\n    df['sex'].value_counts(sort=False).plot(kind='bar', title='Total count by sex', rot=0)\n    plt.xlabel('Sex (0: Female, 1: Male)')\n    df['target'].value_counts(sort=False).plot(kind='bar', title='Target distribution', rot=0)\n    plt.xlabel('target (0: <=50K, 1: >50K)')\n    df[df['target']==1]['sex'].value_counts(sort=False).plot(kind='bar', title='Earning >$50K by sex', rot=0)\n    plt.xlabel('Sex (0: Female, 1: Male)')\n    ```", "```py\nfrom sagemaker import clarify\nclarify_processor = clarify.SageMakerClarifyProcessor(\n         role=role, \n         instance_count=1, \n         instance_type='ml.m5.xlarge', \n         sagemaker_session=sess)\n```", "```py\n    pretraining_bias_report_output_path = f's3://{bucket}/{prefix}/{experiment_name}-{exp_trial_1.trial_name}/clarify-pretraining-bias'\n    bias_data_config = clarify.DataConfig(\n        s3_data_input_path=train_s3_uri,\n        s3_output_path=pretraining_bias_report_output_path,\n        label='target',\n        headers=df.columns.tolist(),\n        dataset_type='text/csv')\n    ```", "```py\nbias_config = clarify.BiasConfig(\n    label_values_or_threshold=[1], \n    facet_name=['sex', 'race'], \n    facet_values_or_threshold=[[0], None])\n```", "```py\n    clarify_processor.run_pre_training_bias(\n        data_config=bias_data_config,\n        data_bias_config=bias_config,\n        methods='all',\n        job_name=jobname,\n        experiment_config=experiment_config)\n    ```", "```py\n    max_female_sample=df.groupby(['sex', 'target'], \n               group_keys=False).count().loc[(0, 1)]['age']\n    df_sampled=df.groupby(['sex', 'target'], \n    group_keys=False).apply(lambda x: x.sample(max_female_sample))\n    ```", "```py\n    pretraining_bias_report_output_path = f's3://{bucket}/{prefix}/{experiment_name}-{exp_trial_2.trial_name}/clarify-pretraining-bias'\n    bias_data_config = clarify.DataConfig(\n        s3_data_input_path=train_sampled_s3_uri,\n        s3_output_path=pretraining_bias_report_output_path,\n        label='target',\n        headers=df_sampled.columns.tolist(),\n        dataset_type='text/csv')\n    ```", "```py\n    experiment_config={'ExperimentName': experiment_name,\n                       'TrialName': exp_trial_2.trial_name,\n                       'TrialComponentDisplayName': 'Training'}\n    ...\n    xgb = sagemaker.estimator.Estimator(\n            image,\n            role,\n            instance_type='ml.m5.xlarge',\n            instance_count=1,\n            output_path=train_s3_output,\n            enable_sagemaker_metrics=True,\n            sagemaker_session=sess)\n    xgb.set_hyperparameters(objective='binary:logistic',\n                            eval_metric='error',\n                            num_round=50)\n    ...\n    data_channels={'train': train_input, 'validation': val_input}\n    xgb.fit(inputs=data_channels, \n            job_name=jobname, \n            experiment_config=experiment_config, \n            wait=True)\n    ```", "```py\n    model = xgb.create_model(name=model_name)\n    container_def = model.prepare_container_def()\n    sess.create_model(model_name, role, container_def)\n    ```", "```py\n    posttraining_bias_report_output_path = f's3://{bucket}/{prefix}/{experiment_name}-{exp_trial_2.trial_name}/clarify-posttraining-bias' \n    bias_data_config = clarify.DataConfig(\n        s3_data_input_path=train_sampled_s3_uri,\n        s3_output_path=posttraining_bias_report_output_path,\n        label='target',\n        headers=df_sampled.columns.tolist(),\n        dataset_type='text/csv')\n    ```", "```py\nmodel_config = clarify.ModelConfig(\n    model_name=model_name,\n    instance_type='ml.m5.xlarge',\n    instance_count=1,\n    accept_type='text/csv',\n    content_type='text/csv')\npredictions_config = clarify.ModelPredictedLabelConfig(probability_threshold=0.5)\n```", "```py\n    clarify_processor.run_post_training_bias(\n        data_config=bias_data_config,\n        data_bias_config=bias_config,\n        model_config=model_config,\n        model_predicted_label_config=predictions_config,\n        methods='all',    \n        job_name=jobname,\n        experiment_config=experiment_config)\n    ```", "```py\n    explainability_data_config = clarify.DataConfig(\n        s3_data_input_path=train_sampled_s3_uri,\n        s3_output_path=explainability_output_path,\n        label='target',\n        headers=df_sampled.columns.tolist(),\n        dataset_type='text/csv')\n    ```", "```py\n    baseline = df_sampled.query('target == 1').mode().iloc[0, 1:].astype(int).tolist()\n    shap_config = clarify.SHAPConfig(\n        baseline=[baseline],\n        num_samples=15,\n        agg_method='mean_abs')\n    ```", "```py\n    clarify_processor.run_explainability(\n        data_config=explainability_data_config,\n        model_config=model_config,\n        explainability_config=shap_config,\n        job_name=jobname,\n        experiment_config=experiment_config,\n        wait=False,\n        logs=False)\n    ```", "```py\n    S3Downloader.download(f'{explainability_output_path}/explanations_shap/out.csv', './', sagemaker_session=sess)\n    local_explanations_out = pd.read_csv('out.csv')\n    feature_names = [str.replace(c, '_label0', '') for c in local_explanations_out.columns.to_series()]\n    local_explanations_out.columns = feature_names\n    selected_example = 500\n    print(f'Example number: {selected_example}')\n    print(f'with model prediction: {sum(local_explanations_out.iloc[selected_example]) > 0}')\n    print()\n    print(f'Feature values: \\n{df_sampled.iloc[selected_example].to_frame().T}')\n    local_explanations_out.iloc[selected_example].plot(\n        kind='barh', \n        title=f'Local explanation for the {selected_example}th example.', \n        rot=0)\n    ```"]