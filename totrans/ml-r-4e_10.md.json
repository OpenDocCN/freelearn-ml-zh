["```py\n> predicted_prob <- predict(credit_model, credit_test, type = \"prob\") \n```", "```py\n> sms_test_prob <- predict(sms_classifier, sms_test, type = \"raw\") \n```", "```py\n> head(sms_test_prob) \n```", "```py\n ham         spam\n[1,] 9.999995e-01 4.565938e-07\n[2,] 9.999995e-01 4.540489e-07\n[3,] 9.998418e-01 1.582360e-04\n[4,] 9.999578e-01 4.223125e-05\n[5,] 4.816137e-10 1.000000e+00\n[6,] 9.997970e-01 2.030033e-04 \n```", "```py\n> sms_results <- read.csv(\"sms_results.csv\", stringsAsFactors = TRUE) \n```", "```py\n> head(sms_results) \n```", "```py\n actual_type predict_type prob_spam prob_ham\n1         ham          ham   0.00000  1.00000\n2         ham          ham   0.00000  1.00000\n3         ham          ham   0.00016  0.99984\n4         ham          ham   0.00004  0.99996\n5        spam         spam   1.00000  0.00000\n6         ham          ham   0.00020  0.99980 \n```", "```py\n> head(subset(sms_results, prob_spam > 0.40 & prob_spam < 0.60)) \n```", "```py\n actual_type predict_type prob_spam prob_ham\n377         spam          ham   0.47536  0.52464\n717          ham         spam   0.56188  0.43812\n1311         ham         spam   0.57917  0.42083 \n```", "```py\n> head(subset(sms_results, actual_type != predict_type)) \n```", "```py\n actual_type predict_type prob_spam prob_ham\n53         spam          ham   0.00071  0.99929\n59         spam          ham   0.00156  0.99844\n73         spam          ham   0.01708  0.98292\n76         spam          ham   0.00851  0.99149\n184        spam          ham   0.01243  0.98757\n332        spam          ham   0.00003  0.99997 \n```", "```py\n> table(sms_results$actual_type, sms_results$predict_type) \n```", "```py\n ham spam\n  ham  1203    4\n  spam   31  152 \n```", "```py\n> library(gmodels)\n> CrossTable(sms_results$actual_type, sms_results$predict_type) \n```", "```py\n Cell Contents\n|-------------------------|\n|                       N |\n| Chi-square contribution |\n|           N / Row Total |\n|           N / Col Total |\n|         N / Table Total |\n|-------------------------|\n\nTotal Observations in Table:  1390 \n\n                        | sms_results$predict_type \nsms_results$actual_type |       ham |      spam | Row Total | \n------------------------|-----------|-----------|-----------|\n                    ham |      1203 |         4 |      1207 | \n                        |    16.128 |   127.580 |           | \n                        |     0.997 |     0.003 |     0.868 | \n                        |     0.975 |     0.026 |           | \n                        |     0.865 |     0.003 |           | \n------------------------|-----------|-----------|-----------|\n                   spam |        31 |       152 |       183 | \n                        |   106.377 |   841.470 |           | \n                        |     0.169 |     0.831 |     0.132 | \n                        |     0.025 |     0.974 |           | \n                        |     0.022 |     0.109 |           | \n------------------------|-----------|-----------|-----------|\n           Column Total |      1234 |       156 |      1390 | \n                        |     0.888 |     0.112 |           | \n------------------------|-----------|-----------|-----------| \n```", "```py\n> (152 + 1203) / (152 + 1203 + 4 + 31) \n```", "```py\n[1] 0.9748201 \n```", "```py\n> (4 + 31) / (152 + 1203 + 4 + 31) \n```", "```py\n[1] 0.02517986 \n```", "```py\n> 1 – 0.9748201 \n```", "```py\n[1] 0.0251799 \n```", "```py\n> library(caret)\n> confusionMatrix(sms_results$predict_type,\n    sms_results$actual_type, positive = \"spam\") \n```", "```py\nConfusion Matrix and Statistics\n          Reference\nPrediction  ham spam\n      ham  1203   31\n      spam    4  152\n\n               Accuracy : 0.9748          \n                 95% CI : (0.9652, 0.9824)\n    No Information Rate : 0.8683          \n    P-Value [Acc > NIR] : < 2.2e-16       \n\n                  Kappa : 0.8825          \n\n Mcnemar’s Test P-Value : 1.109e-05       \n\n            Sensitivity : 0.8306          \n            Specificity : 0.9967          \n         Pos Pred Value : 0.9744          \n         Neg Pred Value : 0.9749          \n             Prevalence : 0.1317          \n         Detection Rate : 0.1094          \n   Detection Prevalence : 0.1122          \n      Balanced Accuracy : 0.9136          \n\n       ‘Positive’ Class : spam \n```", "```py\n | sms_results$predict_type \nsms_results$actual_type |       ham |      spam | Row Total | \n------------------------|-----------|-----------|-----------|\n                    ham |      1203 |         4 |      1207 | \n                        |    16.128 |   127.580 |           | \n                        |     0.997 |     0.003 |     0.868 | \n                        |     0.975 |     0.026 |           | \n                        |     0.865 |     0.003 |           | \n------------------------|-----------|-----------|-----------|\n                   spam |        31 |       152 |       183 | \n                        |   106.377 |   841.470 |           | \n                        |     0.169 |     0.831 |     0.132 | \n                        |     0.025 |     0.974 |           | \n                        |     0.022 |     0.109 |           | \n------------------------|-----------|-----------|-----------|\n           Column Total |      1234 |       156 |      1390 | \n                        |     0.888 |     0.112 |           | \n------------------------|-----------|-----------|-----------| \n```", "```py\n> pr_a <- 0.865 + 0.109\n> pr_a \n```", "```py\n[1] 0.974 \n```", "```py\n> pr_e <- 0.868 * 0.888 + 0.132 * 0.112\n> pr_e \n```", "```py\n[1] 0.785568 \n```", "```py\n> k <- (pr_a - pr_e) / (1 - pr_e) \n> k \n```", "```py\n[1] 0.8787494 \n```", "```py\n> library(vcd)\n> Kappa(table(sms_results$actual_type, sms_results$predict_type)) \n```", "```py\n value     ASE     z Pr(>|z|)\nUnweighted 0.8825 0.01949 45.27        0\nWeighted   0.8825 0.01949 45.27        0 \n```", "```py\n> library(irr)\n> kappa2(sms_results[1:2]) \n```", "```py\nCohen's Kappa for 2 Raters (Weights: unweighted)\n Subjects = 1390 \n   Raters = 2 \n    Kappa = 0.883 \n        z = 33 \n  p-value = 0 \n```", "```py\n> (152 * 1203 - 4 * 31) /\n    sqrt((152 + 4) * (152 + 31) * (1203 + 4) * (1203 + 31)) \n```", "```py\n[1] 0.8861669 \n```", "```py\n> library(mltools)\n> mcc(sms_results$actual_type, sms_results$predict_type) \n```", "```py\n[1] 0.8861669 \n```", "```py\n> cor(ifelse(sms_results$actual_type == \"spam\", 1, 0),\n      ifelse(sms_results$predict_type == \"spam\", 1, 0)) \n```", "```py\n[1] 0.8861669 \n```", "```py\n> sens <- 152 / (152 + 31)\n> sens \n```", "```py\n[1] 0.8306011 \n```", "```py\n> spec <- 1203 / (1203 + 4)\n> spec \n```", "```py\n[1] 0.996686 \n```", "```py\n> library(caret)\n> sensitivity(sms_results$predict_type, sms_results$actual_type,\n              positive = \"spam\") \n```", "```py\n[1] 0.8306011 \n```", "```py\n> specificity(sms_results$predict_type, sms_results$actual_type,\n              negative = \"ham\") \n```", "```py\n[1] 0.996686 \n```", "```py\n> prec <- 152 / (152 + 4)\n> prec \n```", "```py\n[1] 0.974359 \n```", "```py\n> rec <- 152 / (152 + 31)\n> rec \n```", "```py\n[1] 0.8306011 \n```", "```py\n> library(caret)\n> posPredValue(sms_results$predict_type, sms_results$actual_type,\n               positive = \"spam\") \n```", "```py\n[1] 0.974359 \n```", "```py\n> sensitivity(sms_results$predict_type, sms_results$actual_type,\n              positive = \"spam\") \n```", "```py\n[1] 0.8306011 \n```", "```py\n> f <- (2 * prec * rec) / (prec + rec) \n> f \n```", "```py\n[1] 0.8967552 \n```", "```py\n> f <- (2 * 152) / (2 * 152 + 4 + 31)\n> f \n```", "```py\n[1] 0.8967552 \n```", "```py\n> library(pROC)\n> sms_roc <- roc(sms_results$prob_spam, sms_results$actual_type) \n```", "```py\n> plot(sms_roc, main = \"ROC curve for SMS spam filter\",\n         Col = \"blue\", lwd = 2, grid = TRUE, legacy.axes = TRUE) \n```", "```py\n> sms_results_knn <- read.csv(\"sms_results_knn.csv\")\n> sms_roc_knn <- roc(sms_results$actual_type,\n                       sms_results_knn$p_spam)\n> plot(sms_roc_knn, col = \"red\", lwd = 2, add = TRUE) \n```", "```py\n> auc(sms_roc) \n```", "```py\nArea under the curve: 0.9836 \n```", "```py\n> auc(sms_roc_knn) \n```", "```py\nArea under the curve: 0.8942 \n```", "```py\n> random_ids <- order(runif(1000)) \n```", "```py\n> credit_train <- credit[random_ids[1:500], ]\n> credit_validate <- credit[random_ids[501:750], ]\n> credit_test <- credit[random_ids[751:1000], ] \n```", "```py\n> in_train <- createDataPartition(credit$default, p = 0.75, list = FALSE)\n> credit_train <- credit[in_train, ]\n> credit_test <- credit[-in_train, ] \n```", "```py\n> set.seed(123)\n> folds <- createFolds(credit$default, k = 10) \n```", "```py\n> str(folds) \n```", "```py\nList of 10\n $ Fold01: int [1:100] 14 23 32 42 51 56 65 66 77 95 ...\n $ Fold02: int [1:100] 21 36 52 55 96 115 123 129 162 169 ...\n $ Fold03: int [1:100] 3 22 30 34 37 39 43 58 70 85 ...\n $ Fold04: int [1:100] 12 15 17 18 19 31 40 45 47 57 ...\n $ Fold05: int [1:100] 1 5 7 20 26 35 46 54 106 109 ...\n $ Fold06: int [1:100] 6 27 29 48 68 69 72 73 74 75 ...\n $ Fold07: int [1:100] 10 38 49 60 61 63 88 94 104 108 ...\n $ Fold08: int [1:100] 8 11 24 53 71 76 89 90 91 101 ...\n $ Fold09: int [1:100] 2 4 9 13 16 25 28 44 62 64 ...\n $ Fold10: int [1:100] 33 41 50 67 81 82 100 105 107 118 ... \n```", "```py\n> credit01_test <- credit[folds$Fold01, ]\n> credit01_train <- credit[-folds$Fold01, ] \n```", "```py\n> library(caret)\n> library(C50)\n> library(irr) \n```", "```py\n> set.seed(123)\n> folds <- createFolds(credit$default, k = 10) \n```", "```py\n> cv_results <- lapply(folds, function(x) {\n    credit_train <- credit[-x, ]\n    credit_test <- credit[x, ]\n    credit_model <- C5.0(default ~ ., data = credit_train)\n    credit_pred <- predict(credit_model, credit_test)\n    credit_actual <- credit_test$default\n    kappa <- kappa2(data.frame(credit_actual, credit_pred))$value\n    return(kappa)\n  }) \n```", "```py\n> str(cv_results) \n```", "```py\nList of 10\n $ Fold01: num 0.381\n $ Fold02: num 0.525\n $ Fold03: num 0.247\n $ Fold04: num 0.316\n $ Fold05: num 0.387\n $ Fold06: num 0.368\n $ Fold07: num 0.122\n $ Fold08: num 0.141\n $ Fold09: num 0.0691\n $ Fold10: num 0.381 \n```", "```py\n> mean(unlist(cv_results)) \n```", "```py\n[1] 0.2939567 \n```", "```py\n> sd(unlist(cv_results)) \n```", "```py\n[1] 0.1448565 \n```", "```py\n> (1 - (1/1000))^1000 \n```", "```py\n[1] 0.3676954 \n```", "```py\n> (1 - (1/100000))^100000 \n```", "```py\n[1] 0.3678776 \n```", "```py\n> 1 / exp(1) \n```", "```py\n[1] 0.3678794 \n```"]