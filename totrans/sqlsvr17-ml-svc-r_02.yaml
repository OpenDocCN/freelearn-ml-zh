- en: Overview of Microsoft Machine Learning Server and SQL Server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will look into the reasons why Microsoft decided to add
    the R language to SQL Server 2016 and what burdens this integration has overcome.
    We will cover the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Addressing analytical barriers and R limitations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Microsoft R Server platform
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Microsoft R Services architecture
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring computational contexts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Analytical barriers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Many companies encounter barriers when trying to analyse their data. These barriers
    are usually knowledge scarcity (not all departments have the knowledge to analyse
    the data) and data dispersity (usually data arrives from different sources).
  prefs: []
  type: TYPE_NORMAL
- en: Enterprises divide responsibilities according to the roles or functions of the
    employees. Such division of work has a positive effect, especially when an enterprise
    is large. Usually, small to mid-sized enterprises adopt such roles as well, but
    they are normally granulated on a higher level due to a smaller number of employees.
  prefs: []
  type: TYPE_NORMAL
- en: 'With rapid market changes, the emergence of new technologies, and the need
    for faster adaptation, many experts have noticed many of the following barriers:'
  prefs: []
  type: TYPE_NORMAL
- en: Data scarcity and data dispersity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Complex (and many times outdated) architecture
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lack of knowledge
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Low productivity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Slow adaptation to market changes (long time to market)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Many enterprises are facing at least one (if not more) of these barriers and
    Microsoft has addressed these barriers by opening the R language to SQL Server.
    Embracing an open source language and open source technology, it broadens the
    pool of knowledge, enabling the enterprises to use community knowledge and community
    solutions, as well as opening and democratizing analytics. Rather than suffering
    and waiting on data scientists and specialists with the subject-matter academic
    knowledge, now this pool of knowledge can be easily shared and many of the data
    munging and data engineering tasks can be offloaded to other roles and people.
    This offload process also bridges the traditional gap between IT and statisticians
    that resulted in low and slow productivity in the past. This gap in knowledge
    and skills can now be overcome by mixing different roles and tasks using R in
    SQL Server (meaning that data wranglers or data stewards can have R code at their
    perusal that would help them in getting data insight, without actually needing
    to understand the complexity of the statistics). There are no surprises for understanding
    or knowing different platforms, now, as many IT people can use the R language
    provided by statisticians and data scientists. Also, data scientists can start
    learning skills and languages that one finds in IT.
  prefs: []
  type: TYPE_NORMAL
- en: Such interconnected and shared knowledge between two or more different departments
    of people will also increase productivity. When productivity is increased, statistical
    and predictive models can be deployed faster, changed, or adapted to consumer
    and market changes and enabled for data engineers, wranglers, and analysts. This
    certainly is the way for an enterprise to improve the innovation path and maximize
    the potential of open source, and broaden the sandbox of experiments using different
    methods and models.
  prefs: []
  type: TYPE_NORMAL
- en: The last step in addressing these barriers is addressing the issues of data
    scarcity and complex infrastructure. The rule is that the bigger the enterprise,
    the higher the likelihood that the infrastructure will be complex. With complex
    infrastructure, we can understand that data resides on different layers or different
    granularity, on different platforms, on different vendors, and on different silos,
    making data analysis an additional step further from realization. With an introduction
    to R, this complexity can be overridden with simpler data connectors, an easier
    way to extract the data.
  prefs: []
  type: TYPE_NORMAL
- en: As the R language is becoming more and more popular and important in the field
    of analytics, it can be ready for enterprises on different scales and can be designed
    to anticipate beyond vendors, regardless of whether you have your solution on-premises
    or in the cloud. The need for data movement also decreases because of the ability
    to access and read data directly from any hybrid system and extract only what
    is needed. All barriers that are present in enterprises can now be addressed faster
    with less bureaucracy, better integration, and less effort.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another important aspect of embracing open source language, with which many
    big enterprises are still struggling, is the general providence of open source
    solutions. This aspect shall not be overlooked and must be taken into consideration.
    Microsoft took the R language on-board with several steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Being on board in the R Consortium, which is responsible for supporting the
    R Foundation and key organizations working tightly on developing, distributing,
    and maintaining R engine and supporting R-related infrastructure projects. One
    of the projects was the RHub project (lead by *Gabor Csardi*) that delivered a
    service for developing, testing, and validating R packages.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating an MRAN repository of R packages under the CC license and making CRAN
    packages to Microsoft R engine distribution available and compatible with R distributions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Making Intel **MKL** (**Math Kernel Library**) computational functions to improve
    the performance of the R statistical computation, available out of the box when
    you download the R engine from the MRAN repository. **Basic Linear Algebra Subprograms**
    (**BLAS**) and **Linear Algebra Package** (**LAPACK**) are a family of functions
    for linear algebra that is enhanced for parallel computations. Such functions
    are matrix factorization, Cholesky matrix decomposition, vector and matrix additions,
    scalar multiplications, and so on.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rewriting many R functions from Fortran to C++ language to improve the performances.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We can quickly support the theory of the MKL computational functions, when we
    compare the R engine distribution available on the CRAN and R engine distribution
    available on MRAN. As we have already seen, BLAS and LAPACK are vector or matrix
    superseded, so we will compare (benchmark) the computations on a matrix between
    two R engine distributions.
  prefs: []
  type: TYPE_NORMAL
- en: 'The comparison is made on CRAN R 3.3.0 and MRAN R Open 3.3.0, with the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The following are the results with the following time (in seconds):'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Time (seconds)** | **CRAN 3.3.2** | **MRAN 3.3.2** |'
  prefs: []
  type: TYPE_TB
- en: '| MM | 26,69 | 2,75 |'
  prefs: []
  type: TYPE_TB
- en: '| CP | 0,19 | 0,01 |'
  prefs: []
  type: TYPE_TB
- en: 'In the following figure, you can see the difference in performance between
    CRAN and MRAN R engine:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00006.gif)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1
  prefs: []
  type: TYPE_NORMAL
- en: The graph shows a simple linear algebra that uses matrices or vectors and performs
    faster for a factor of 10 (tested on my local client-Inter I7, 4 CPU, 20 GB RAM).
    Note that, when you run this test on your local machine, you should observe the
    RAM and disk storage consumption; you will see that the MRAN operation is very
    lightweight in comparison to the CRAN operation when it comes to the RAM consumption.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you download the MRAN distribution of R Open, note that there will be
    additional information on MKL multithreaded performance functions available:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00007.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2: Source: [https://mran.microsoft.com/download/](https://mran.microsoft.com/download/)'
  prefs: []
  type: TYPE_NORMAL
- en: Many more steps were taken that would reassure consumers, developers, wranglers,
    and managers from bigger enterprises that the R language is here to stay. Microsoft
    promised that, besides this provision, there is also support for general governance
    and if the company decides, it can also receive R support on an enterprise level.
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, to support the idea of using open source R language, one must understand
    the general architecture of R. The R engine is written by the core group of roughly
    20 people with access to the source code of the R engine (even though only six
    are working on day-to-day R development). This group of people not only maintains
    the code, but they themselves are also contributors, bug fixers, and developers.
    So, the R engine is open source, which means that it is free software (under a
    GNU license), but the engine is not maintained that openly. On the other hand,
    R libraries (or packages) are mostly community-driven contributions, which mean
    that people in the community are free to develop and create a variety of functions
    to support statistical calculations, visualizations, working with datasets, and
    many other aspects.
  prefs: []
  type: TYPE_NORMAL
- en: In the months following the release of SQL Server 2016 (from summer 2016 onward),
    Microsoft also changed what is available in different editions of SQL Server.
    If you visit the SQL Server 2016 editions overview at [https://www.microsoft.com/en-us/sql-server/sql-server-2016-editions](https://www.microsoft.com/en-us/sql-server/sql-server-2016-editions),
    you can see that under advanced analytics, basic R integration is available in
    all editions of SQL Server 2016, and advanced R Integration (with full parallelism
    of ScaleR functions in `RevoScaleR` package) is available only in the Enterprise
    and Developer editions.
  prefs: []
  type: TYPE_NORMAL
- en: The Microsoft Machine learning R Server platform
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have already touched on the concept of R Open and R for enterprise environment
    briefly. Microsoft Machine Learning R Server is an enterprise server that delivers
    high dimensional and large datasets that can be processed in parallel, and the
    workload can be distributed across nodes. R Server can process these parallel
    and distributed workloads on Windows, Linux servers, or HDFS systems, such as
    Hadoop, Spark, Teradata, and HD Insight. R Server can achieve parallel and distributed
    workloads using Microsoft R packages designed to do just that. The `RevoScaleR`
    package will give the ability to do highly parallel and distributed computations,
    statistical analysis, and predictive analytics, as well as machine learning and
    deep learning.
  prefs: []
  type: TYPE_NORMAL
- en: 'With the acquisition of the company Revolution Analytics, Microsoft rebranded
    their two main products, Revolution R Open and Revolution R Enterprise, to Microsoft
    R Open and Microsoft R Server and Microsoft SQL Server R Services. In addition
    to these two flavors, they also added Microsoft R Client as an additional standalone
    product:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00008.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3
  prefs: []
  type: TYPE_NORMAL
- en: Based on different flavors and enterprise ecosystems, companies can choose the
    type of usage they will need (community, or non-commercial, and commercial) and,
    based on their business needs and where they want their analytical server to be
    set up, they can choose what suits them the most. In the commercial version, a
    standalone machine learning R Server (or simply R server) is available, as well
    as in-database machine learning services (or SQL Server R services).
  prefs: []
  type: TYPE_NORMAL
- en: 'In the version of SQL Server 2017, Microsoft R Server has been changed to Machine
    Learning Server (both in-database and as a standalone; the rebranding from in-database
    R Services to Machine Learning R Services was introduced in the CTP version of
    SQL Server VNext that later changed to SQL Server 2017). In *Figure 4*, one can
    see the naming available when installing SQL Server 2016 (left-print screen) and
    the names that will be available in SQL Server 2017 (right-print screen):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00009.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4
  prefs: []
  type: TYPE_NORMAL
- en: 'The reason given for the change in the naming was the fact that Microsoft introduced
    Python in SQL Server 2017\. Python is a powerful statistical, analytical, and
    machine learning language, and therefore, the name was unified. The R-part of
    the Machine Learning Server will not change internally, but it will gain useful
    additional packages and improved functions, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: All these functions have been rewritten either for working on large datasets
    in parallel and distributed workloads, or to support R and SQL Server work.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Microsoft R platform, the following products are available:'
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft Machine Learning R Server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Microsoft R Client
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Microsoft R Open
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: R Tools for Visual Studio
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Product description has been summarized based on Microsoft Docs descriptions
    and based on an article published on SQLServerCentral in September of 2016 ( [http://www.sqlservercentral.com/articles/Microsoft/145393/](http://www.sqlservercentral.com/articles/Microsoft/145393/)).
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft R Open (MRO)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Microsoft R Open is an open source R distribution that is 100% free and generally
    available. Microsoft has enhanced this R Open distribution with an additional
    high-performance multi-threaded feature of **Math Kernel Library** (**MKL**) that
    is optimized for vector and matrix-based mathematical and statistical computations;
    otherwise, this distribution is fully compatible with legacy R objects and R code.
  prefs: []
  type: TYPE_NORMAL
- en: R Open is also compatible with the CRAN repository, GitHub packages, or any
    other repository, making MRO widely usable. On the other hand, R Open has some
    limitations. It is memory bound, which means that it can only handle the datasets
    that will fit into the memory (client) available. Proprietary ScaleR functions
    (available in the `RevoScaleR` package) will not be available under R Open and
    it will run on all SQL Server 2017 editions, except on Express or Express with
    Tools, whereas Microsoft R Client/Server will run only on the Enterprise or Developer
    editions of SQL Server 2017.
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft R Client is the same R distribution as Microsoft R Open and it is
    built on top of 100% open source R version. Microsoft R Client is the first version
    from the Microsoft family of R versions that introduces the `RevoScaleR` package
    (ScaleR functions). A data wrangler, data scientist, or data engineer (or any
    other profile) who installs this version will have the ability to use the parallelization
    and multi-threaded computing, as well as the use of proprietary functions from
    ScaleR.
  prefs: []
  type: TYPE_NORMAL
- en: There are some limitations to the R Client version. The memory will be limited
    to a local client machine with the same limitations as Microsoft R Open—data must
    fit into the local memory in order to be computed. The ScaleR functions will be
    installed alongside this version, but the processing will be limited to only two
    threads simultaneously (regardless of the technical specifications of the client
    machine) and to the local disk and CPU speed. Otherwise, any legacy R packages
    or R code will be compatible.
  prefs: []
  type: TYPE_NORMAL
- en: 'Microsoft R Client also brings the possibility to change the computational
    environment, which means that the computational load can be pushed to Microsoft
    R Server or SQL Server R Services and any HDFS system to achieve maximum performance.
    Building the ecosystem with many R Clients and one (or a few) R Servers will give
    a high-performance analytical environment without having the need for Microsoft
    R Server being installed locally. It is compatible with the following flavors
    of R Server: Microsoft R server for Linux, Microsoft R Server for Teradata DB,
    Microsoft R Server for Hadoop, Microsoft R HDInsight, and both versions of Microsoft
    R Server-Standalone and SQL Server R Services.'
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft Machine Learning R Server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Microsoft R Server is a standalone server version of the R engine, built on
    top of the R open source platform but modified to suit the needs of the enterprise
    environment and heavy usage of analytical purposes, from statistical analysis
    and data mining to machine learning and any big data tasks.
  prefs: []
  type: TYPE_NORMAL
- en: It is fully compatible with CRAN/MRAN/GitHub repositories and any R legacy code.
    The ScaleR functions and algorithms available in the `RevoScaleR` package are
    capable of parallel and multi-threated data processing with no limitations known
    to R Open or R Client. Computations are prepared for large datasets—in most cases,
    datasets that easily exceed the server memory size. This can be done due to a
    special external data frame format that enables multi-threaded computations and
    enables R-based applications that can perform parallel computations and deployable
    solutions across multi-platforms with the help of ConnectR and DeployR. Disk scalability
    is also available with Microsoft R Server.
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft SQL Server Machine Learning R Services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The in-database flavor of R Open distribution is available as Machine Learning
    R Services for Microsoft SQL Server, and covers all the ScaleR algorithms that
    are available in the `RevoScaleR` package.
  prefs: []
  type: TYPE_NORMAL
- en: The memory and disk, in this case, will be managed by your installation of SQL
    Server, and the R execution is done using the `SQL Server Trusted Launchpad` service
    that governs the communication between SQL Server and R engine.
  prefs: []
  type: TYPE_NORMAL
- en: Also, users can connect to R Services using R Client but the `DeployR` and `ConnectR`
    functions will be limited.
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft SQL Server R Services is an in-database version for SQL Server 2016
    and onwards, and this will be the main focus of this book. These in-database services
    can be installed when a new instance of SQL Server is installed. *Figure 4* shows
    that R in-database service (or machine learning services (in-database) as a part
    of SQL Server 2017) are installed as an instance feature, and when ticking this
    feature, the R service (or the Python service) will be installed. One must also
    understand that Microsoft R Server is a standalone component that is not installed
    when R Services are installed. One must explicitly put a tick next to R Server
    (Machine Learning Server) under shared services. However, R services (in-database)
    will not install R Server.
  prefs: []
  type: TYPE_NORMAL
- en: 'R Services (in-database) is a standalone source of R language and R programming
    with full stack and capabilities of SQL Server, including the tools and technologies
    for governance, security, reliability, and performance. In SSMS, one can invoke
    and call R functions making R analysis or predictions using transact SQL with
    an R script. This can be achieved using a system external procedure: `sp_execute_external_script`.'
  prefs: []
  type: TYPE_NORMAL
- en: The ScaleR libraries that are a part of the R Service (in-database) installation
    allow data scientists, developers, or database administrators to securely execute
    an R script from a SQL Server computer or on Microsoft R Server. By defining the
    computational context, a user can choose where to push the computations and load,
    either to stay in-database R runtime or use the ScaleR library to enhance connectivity
    and parallelism and push the load to Microsoft R Server.
  prefs: []
  type: TYPE_NORMAL
- en: To close the circle, with the installation of client R that comes available
    as a standalone and separate installer, you can develop your R code and deploy
    the solution to R Services or to Microsoft R Server running on Windows or Linux.
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 5 depicts how data scientists or data analysts can push the load from
    client/workstation to a cloud-based solution, a virtual machine, an R Server,
    or R services (in-database). From a client''s perspective, one can also easily
    choose a hybrid solution, especially when the need for data integration and data
    consolidation between different systems is needed. This concept will most certainly
    give the enterprise an immediate boost and lift in performance, as well as faster
    and better solutions adaptation almost instantly:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00010.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5
  prefs: []
  type: TYPE_NORMAL
- en: R Tools for Visual Studio (RTVS)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: RTVS is a Microsoft free version (distributed under a GNU license) of IDE for
    writing, validating, and running an R code within Visual Studio. RTVS is supported
    on the Community, Professional, and Enterprise editions of Visual Studio 2015
    and Visual Studio 2017.
  prefs: []
  type: TYPE_NORMAL
- en: R Tools ([https://www.visualstudio.com/vs/rtvs/](https://www.visualstudio.com/vs/rtvs/))
    will help developers, analysts, and data scientists to operate and perform statistical
    computations, visualizations, and data management. R Tools bring graphical interface
    to R Engine, workspace for rich editing, interactive windows, variable and visuals
    explorer, help, IntelliSense, and much more. It also binds local and remote workspaces
    (on-premises or in the cloud), so that data analysts can switch between computational
    environments very easily.
  prefs: []
  type: TYPE_NORMAL
- en: 'The view of workspaces in RTVS is made simple and graphical for a user to switch
    between different R environments:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00011.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6
  prefs: []
  type: TYPE_NORMAL
- en: It resembles the famous and powerful RStudio ([www.rstudio.com](http://www.rstudio.com)),
    but still offers all the necessities that community and time brought into the
    development of RStudio, Emacs, Vim, Eclipse, or others. Microsoft has also addressed
    the community with questionnaires to ask what the users of RTVS are still missing.
    They can contribute and add their wishes at [https://www.surveymonkey.com/r/RTVS1](https://www.surveymonkey.com/r/RTVS1).
  prefs: []
  type: TYPE_NORMAL
- en: RTVS was announced and released (as a beta version) in early 2016 but only got
    version 1 in 2017.
  prefs: []
  type: TYPE_NORMAL
- en: The Microsoft Machine Learning R Services architecture
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The architecture of R Server covers many components needed in order for the
    communication between R IDE or SQL Server and R engine to work properly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Several components are involved in order to properly execute Transact SQL,
    R script, and return all the results back to T-SQL:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00012.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7
  prefs: []
  type: TYPE_NORMAL
- en: Launchpad is a new service in SQL Server 2016 that supports execution of external
    scripts using the external stored procedure from SQL Server. However, in SQL Server
    2017, the Python launcher has also been introduced, making Launchpad generally
    available to the second non-SQL Server language. The idea behind Launchpad is
    that since the infrastructure is already prepared, the SQL Server should, in the
    future, support other languages as well, such as JavaScript and C++, opening this
    service not only to predictive analytics and machine learning, but also to other
    standalone languages.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Launchpad service (service name: `MSSQLLaunchpad`) is dependent on the
    SQL Server service (service name: `MSSQLSERVER`), which means that, when restarting
    or stopping a SQL Server service, the Launchpad service will be restarted or stopped
    also.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition, the R language has also brought two additional services: R Terminal
    service (abbreviated as RTerm) and BxlServer, which use SQL Satellite, an additional
    extension to SQL server that communicates between external runtime (correlating
    to the Launchpad service) and SQL Server; both can be found as processes.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For easier understanding of these correlations, let''s start a simple PowerShell
    script to see all the components of `Launchpad` and `BxlServer`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Additionally, with a simple T-SQL code, we can include the R script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Additionally, observe the Process Explorer and Launchpad Process:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00013.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8
  prefs: []
  type: TYPE_NORMAL
- en: It is obvious how communication creates the entire circle from SQL Server to
    R and back.
  prefs: []
  type: TYPE_NORMAL
- en: 'Furthermore, the Command Line also reveals that the Launchpad process uses
    the `RLauncher.dll` library and launches `sqlsatelitelaunch` using `sqlsatellite.dll`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Many more configurations will tell you where and how communication in this
    architecture is set up. Opening the `RLauncher.config` file will show you the
    following configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00014.gif)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9
  prefs: []
  type: TYPE_NORMAL
- en: 'Additionally, by changing the `TRACE_LEVEL` parameter, it can also reveal potential
    logs, showing same path and communication between the systems, as the `RevoScaleR`
    log also shows information on each worker session:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: R Limitations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Community blogs and forums, as well as package authors and contributors, are
    debating over the long list of R limitations the language has. Many are murky
    and some are based solemnly on a particular group of user experience, but the
    following limitations can be agreed upon:'
  prefs: []
  type: TYPE_NORMAL
- en: Performance issues
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Memory limitations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Security aspects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Language syntax
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performance issues
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Over 40% of the R code is predominantly written in C, and a little bit over
    20% still in Fortran (the rest in C++, Java, and R), making some common computational
    tasks very costly. Microsoft (and, before, Revolution analytics) did rewrite some
    of the most frequently used functions from old Fortran to C/C++ in order to address
    performance issues.
  prefs: []
  type: TYPE_NORMAL
- en: Many package authors did very similar things. For example, Matt Dowle—the main
    author of the `data.table` R package—did several language performance lift-ups
    to speed up most common data wrangling steps.
  prefs: []
  type: TYPE_NORMAL
- en: When comparing similar operations on the same dataset using different packages,
    such as `dplyr`, `plyr`, `data.table`, and `sqldf`, one can see the difference
    in the time performance with the same results.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following R sample shows roughly a 80 MiB big object with a simple grouping
    function of how much difference there is in the computation time. Packages `dpylr`
    and data.table stand out and have performance gain over 25x times better in comparison
    to `plyr` and `sqldf`. `data.table`, especially, is extremely efficient and this
    is mainly due to Matt''s extreme impetus to optimize the code of the `data.table`
    package in order to gain performance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The Microsoft `RevoScaleR` package, on the other hand, is optimized as well
    and can supersede all of these packages in terms of performance and large datasets.
    This is just to prove how Microsoft has made R ready for large datasets to address
    the performance issues.
  prefs: []
  type: TYPE_NORMAL
- en: Memory limitations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: R is memory bound. This literally means that the dataset must fit into the client's
    RAM. From the previous example, if someone is going to run a simple algebraic
    operation, some matrix computation, or any kind of distance-based algorithm (that
    is heavy on computation), the R system would be limited to what would fit into
    the RAM. No spill to disk or any kind of temporary object is available, unless
    the user loads a package that allows otherwise.
  prefs: []
  type: TYPE_NORMAL
- en: Again, Microsoft has a solution with the `RevoScaleR` package that covers this
    limitation. With the introduction of the **eXternal Data Frame** (**XDF**) format,
    the package is able to store any size of the dataset (there is no recorder upper
    limit) in this format that is persisted on the disk, with conversion from a binary,
    blob, CSV, or any other format to XDF format. This limitation is made possible
    in Microsoft Machine Learning R Server or Machine Learning R Services.
  prefs: []
  type: TYPE_NORMAL
- en: Security aspects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The evolution of the R language as a GNU distribution has been evolving over
    the past couple of decades as a client-based solution and, even before the dawn
    of the internet, all datasets have been securely stored on one's machine. With
    the spread of data over the internet, cloud services, and connected systems, as
    well as more and more present hybrid solution systems, the security aspect of
    reading, writing, analyzing, and storing data has never been a question. However,
    in the past ten years, more and more systems have been emerging, enterprise needs
    have changed, people roles have changed—but the core R engine and IDE has not
    yet taken a step in this direction. From this aspect, it seems as if R wants to
    remain a university developed and driven software. With R integration into SQL
    Server, Microsoft has addressed these issues and has not only created database
    roles, but also added services that make the connection to R and all computations
    securely, diminishing the possibilities of security vulnerabilities.
  prefs: []
  type: TYPE_NORMAL
- en: Language syntax
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: R language is very flexible and allows a user to change the S4 methods and S3
    objects, generic objects, and all of the user-defined objects and variables. As
    the R Language is still not an object-orientated language, it is a question of
    debate if this is true or not (because currently, R understands only three object-orientated
    systems) because both S3 and S4 objects are OO orientated structures.
  prefs: []
  type: TYPE_NORMAL
- en: 'R Syntax might be easy to learn, but it is also easy to develop some doubts.
    The following are a couple of syntax disagreements in the R community:'
  prefs: []
  type: TYPE_NORMAL
- en: Several different R packages give users the same functionalities (data wrangling,
    data analysis, data predictions). As previously displayed, when comparing the
    performances of these packages for data-wrangling purposes with usage, users will
    see which package performs better or which package suit their needs better. Idiosyncratic
    syntax with confusing structures is also a part of the package and can be used
    in many different ways.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are multiple ways to do the same thing (declaring a variable, constructing
    a class, handling data, and predicting with the same algorithm).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Missing conventions, namespaces, and package inter-dependencies.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Somewhat challenging error messages with lacking documentation/help.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Case sensitivity.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is cumbersome to list all of the issues, but one can quickly get an idea
    of how the language evolved, but still is embraced by the community more and more;
    R as a language is perceived as the most popular to date.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter has given an overview on the ecosystem of the new R Service and
    the family of R Engine products offered by Microsoft.
  prefs: []
  type: TYPE_NORMAL
- en: When thinking about R and SQL Server, one must keep in mind what the needs in
    the enterprise will be and how the infrastructure will be prepared in order to
    leverage the maximum performance from powerful `RevoScaleR` packages.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will see how to use these ScaleR computational functions
    to deliver better performance results, and how to set up your ecosystem.
  prefs: []
  type: TYPE_NORMAL
