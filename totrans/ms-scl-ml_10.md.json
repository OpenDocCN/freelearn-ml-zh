["```py\nclass SimpleServlet extends Servlet {\n  val logger = LoggerFactory.getLogger(getClass)\n  var hwCounter: Long = 0L\n  val hwLookup: scala.collection.mutable.Map[String,Long] = scala.collection.mutable.Map() \n  val defaultName = \"Stranger\"\n  def response(name: String, id: Long) = { \"Hello %s! Your id should be %d.\".format(if (name.length > 0) name else defaultName, id) }\n  get(\"/hw/:name\") {\n    val name = params(\"name\")\n    val startTime = System.nanoTime\n    val retVal = response(name, synchronized { hwLookup.get(name) match { case Some(id) => id; case _ => hwLookup += name -> { hwCounter += 1; hwCounter } ; hwCounter } } )\n    logger.info(\"It took [\" + name + \"] \" + (System.nanoTime - startTime) + \" \" + TimeUnit.NANOSECONDS)\n    retVal\n  }\n}\n```", "```py\n[akozlov@Alexanders-MacBook-Pro chapter10]$ sbt\n[info] Loading project definition from /Users/akozlov/Src/Book/ml-in-scala/chapter10/project\n[info] Compiling 1 Scala source to /Users/akozlov/Src/Book/ml-in-scala/chapter10/project/target/scala-2.10/sbt-0.13/classes...\n[info] Set current project to Advanced Model Monitoring (in build file:/Users/akozlov/Src/Book/ml-in-scala/chapter10/)\n> ~;jetty:stop;jetty:start\n[success] Total time: 0 s, completed May 15, 2016 12:08:31 PM\n[info] Compiling Templates in Template Directory: /Users/akozlov/Src/Book/ml-in-scala/chapter10/src/main/webapp/WEB-INF/templates\nSLF4J: Failed to load class \"org.slf4j.impl.StaticLoggerBinder\".\nSLF4J: Defaulting to no-operation (NOP) logger implementation\nSLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.\n[info] starting server ...\n[success] Total time: 1 s, completed May 15, 2016 12:08:32 PM\n1\\. Waiting for source changes... (press enter to interrupt)\n2016-05-15 12:08:32.578:INFO::main: Logging initialized @119ms\n2016-05-15 12:08:32.586:INFO:oejr.Runner:main: Runner\n2016-05-15 12:08:32.666:INFO:oejs.Server:main: jetty-9.2.1.v20140609\n2016-05-15 12:08:34.650:WARN:oeja.AnnotationConfiguration:main: ServletContainerInitializers: detected. Class hierarchy: empty\n2016-15-05 12:08:34.921: [main] INFO  o.scalatra.servlet.ScalatraListener - The cycle class name from the config: ScalatraBootstrap\n2016-15-05 12:08:34.973: [main] INFO  o.scalatra.servlet.ScalatraListener - Initializing life cycle class: ScalatraBootstrap\n2016-15-05 12:08:35.213: [main] INFO  o.f.s.servlet.ServletTemplateEngine - Scalate template engine using working directory: /var/folders/p1/y7ygx_4507q34vhd60q115p80000gn/T/scalate-6339535024071976693-workdir\n2016-05-15 12:08:35.216:INFO:oejsh.ContextHandler:main: Started o.e.j.w.WebAppContext@1ef7fe8e{/,file:/Users/akozlov/Src/Book/ml-in-scala/chapter10/target/webapp/,AVAILABLE}{file:/Users/akozlov/Src/Book/ml-in-scala/chapter10/target/webapp/}\n2016-05-15 12:08:35.216:WARN:oejsh.RequestLogHandler:main: !RequestLog\n2016-05-15 12:08:35.237:INFO:oejs.ServerConnector:main: Started ServerConnector@68df9280{HTTP/1.1}{0.0.0.0:8080}\n2016-05-15 12:08:35.237:INFO:oejs.Server:main: Started @2795ms2016-15-05 12:03:52.385: [main] INFO  o.f.s.servlet.ServletTemplateEngine - Scalate template engine using working directory: /var/folders/p1/y7ygx_4507q34vhd60q115p80000gn/T/scalate-3504767079718792844-workdir\n2016-05-15 12:03:52.387:INFO:oejsh.ContextHandler:main: Started o.e.j.w.WebAppContext@1ef7fe8e{/,file:/Users/akozlov/Src/Book/ml-in-scala/chapter10/target/webapp/,AVAILABLE}{file:/Users/akozlov/Src/Book/ml-in-scala/chapter10/target/webapp/}\n2016-05-15 12:03:52.388:WARN:oejsh.RequestLogHandler:main: !RequestLog\n2016-05-15 12:03:52.408:INFO:oejs.ServerConnector:main: Started ServerConnector@68df9280{HTTP/1.1}{0.0.0.0:8080}\n2016-05-15 12:03:52.408:INFO:oejs.Server:main: Started @2796mss\n\n```", "```py\n2016-15-05 13:10:06.240: [qtp1747585824-26] INFO  o.a.examples.ServletWithMetrics - It took [Joe] 133225 NANOSECONDS\n\n```", "```py\nimport org.akozlov.examples._\n\nimport javax.servlet.ServletContext\nimport org.scalatra.LifeCycle\nimport org.scalatra.metrics.MetricsSupportExtensions._\nimport org.scalatra.metrics._\n\nclass ScalatraBootstrap extends LifeCycle with MetricsBootstrap {\n  override def init(context: ServletContext) = {\n    context.mount(new ServletWithMetrics, \"/\")\n    context.mountMetricsAdminServlet(\"/admin\")\n    context.mountHealthCheckServlet(\"/health\")\n    context.installInstrumentedFilter(\"/*\")\n  }\n}\n```", "```py\npackage org.akozlov.examples\n\nimport org.scalatra._\nimport scalate.ScalateSupport\nimport org.scalatra.ScalatraServlet\nimport org.scalatra.metrics.{MetricsSupport, HealthChecksSupport}\nimport java.util.concurrent.atomic.AtomicLong\nimport java.util.concurrent.TimeUnit\nimport org.slf4j.{Logger, LoggerFactory}\n\nclass ServletWithMetrics extends Servlet with MetricsSupport with HealthChecksSupport {\n  val logger = LoggerFactory.getLogger(getClass)\n  val defaultName = \"Stranger\"\n  var hwCounter: Long = 0L\n  val hwLookup: scala.collection.mutable.Map[String,Long] = scala.collection.mutable.Map()  val hist = histogram(\"histogram\")\n  val cnt =  counter(\"counter\")\n  val m = meter(\"meter\")\n  healthCheck(\"response\", unhealthyMessage = \"Ouch!\") { response(\"Alex\", 2) contains \"Alex\" }\n  def response(name: String, id: Long) = { \"Hello %s! Your id should be %d.\".format(if (name.length > 0) name else defaultName, id) }\n\n  get(\"/hw/:name\") {\n    cnt += 1\n    val name = params(\"name\")\n    hist += name.length\n    val startTime = System.nanoTime\n    val retVal = response(name, synchronized { hwLookup.get(name) match { case Some(id) => id; case _ => hwLookup += name -> { hwCounter += 1; hwCounter } ; hwCounter } } )s\n    val elapsedTime = System.nanoTime - startTime\n    logger.info(\"It took [\" + name + \"] \" + elapsedTime + \" \" + TimeUnit.NANOSECONDS)\n    m.mark(1)\n    retVal\n  }\n```", "```py\n  get(\"/time\") {\n    val sleepTime = scala.util.Random.nextInt(1000)\n    val startTime = System.nanoTime\n    timer(\"timer\") {\n      Thread.sleep(sleepTime)\n      Thread.sleep(sleepTime)\n      Thread.sleep(sleepTime)\n    }\n    logger.info(\"It took [\" + sleepTime + \"] \" + (System.nanoTime - startTime) + \" \" + TimeUnit.NANOSECONDS)\n    m.mark(1)\n  }\n```"]