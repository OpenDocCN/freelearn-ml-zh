["```py\nimport numpy as np\n# creates a 3x3 numpy array\narr = np.array([[1,2,3],[4,5,6],[7, 8, 9]])\n```", "```py\nprint(arr)\n[[1 2 3]\n [4 5 6]\n [7 8 9]]\n```", "```py\nprint(arr[:,1]) # print the second column of the array\n[2 5 8]\n```", "```py\nprint(arr[2,:]) # print the last row of the array\n[7 8 9]\n```", "```py\nprint(np.multiply(arr, -1)) # multiplies every element in the array by -1\n[[-1 -2 -3]\n [-4 -5 -6]\n [-7 -8 -9]]\n```", "```py\nimport matplotlib.pyplot as plt\nimport numpy as np\nx = np.arange(10) # creates an array from 0-9\ny = np.arange(10)\nplt.plot(x,y)\nplt.show()\n```", "```py\nimport pandas as pd\ndata = {\n    \"Number of Bedrooms\": [5, 4, 2, 3],\n    \"Year Build\": [2019, 2017, 2010, 2015],\n    \"Size(Sq ft.)\": [14560, 12487, 9882, 10110],\n    \"Has Garage\": [\"Yes\", \"Yes\", \"No\", \"Yes\"],\n    \"Price\": [305000, 275600, 175000, 235000],\n}\ndf = pd.DataFrame(data)\nprint(df)\n```", "```py\nprint(df.iloc[0]) # view the first entry in the table\n```", "```py\nprint(df[\"Price\"]) # print all the values in the Prices column\n```", "```py\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\nfrom keras.models import Sequential\nmodel = Sequential()\nmodel.add(Flatten(input_shape=[256,256]))\n```", "```py\n #Adding First Hidden Layer\nmodel.add(tf.keras.layers.Dense(units=6,kernel_regularizer='l2',activation=\"leaky_relu\"))\n #Adding Second Hidden Layer\nmodel.add(tf.keras.layers.Dense(units=1,kernel_regularizer='l2',activation=\"leaky_relu\"))\n#Adding Output Layer\nmodel.add(tf.keras.layers.Dense(units=1,kernel_regularizer='l2',activation=\"sigmoid\"))\n```", "```py\n#Compiling ANN\nmodel.compile(optimizer='sgd',loss=\"binary_crossentropy\",metrics=['accuracy'])\n```", "```py\nimport torch\nmodel = torch.nn.Sequential( # create a single layer Neural Network\n    torch.nn.Linear(3, 1),\n    torch.nn.Flatten(0, 1)\n)\nloss = torch.nn.MSELoss(reduction='sum')\n```", "```py\nimport numpy as np\nfrom scipy import linalg\na = np.array([[1,4,2], [3,9,7], [8,5,6]])\nprint(linalg.det(a)) # calculate the matrix determinate\n57.0\n```", "```py\nfrom sklearn import datasets\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nimport numpy as np\n# Load the iris dataset\nX, y = datasets.load_iris(return_X_y=True)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=1) Create linear regression object\n```", "```py\n# Create Logistic Regression model\nmodel = LogisticRegression()\n# Train the model using the training sets\nmodel.fit(X_train, y_train)\n# Make predictions using the testing set\ny_pred = model.predict(X_test)\nprint(accuracy_score(y_test, y_pred))\n```"]