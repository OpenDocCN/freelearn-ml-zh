["```py\n    cd hbshub/artifacts\n    ```", "```py\n    DummySensor class that will be referenced by the Publisher component in the next step:\n\n    ```", "```py\n\n    ```", "```py\n    hbs/localtopic topic every 10 seconds over ipc: \n\n    ```", "```py\n\n    ```", "```py\n    cd ~/hbshub/recipes\n    nano com.hbs.hub.Publisher-1.0.0.yaml\n    ```", "```py\n    sudo /greengrass/v2/bin/greengrass-cli deployment create   --recipeDir ~/hbshub/recipes --artifactDir ~/hbshub/artifacts --merge \"com.hbs.hub.Publisher=1.0.0\"\n    Local deployment submitted! Deployment Id: xxxxxxxxxxxxxx\n    ```", "```py\n    sudo /greengrass/v2/bin/greengrass-cli component list\n    ```", "```py\n    Components currently running in Greengrass:\n    Component Name: com.hbs.hub.Publisher\n        Version: 1.0.0\n        State: RUNNING\n    ```", "```py\n    Subscriber component subscribes to the hbs/localtopic topic over the ipc protocol and gets triggered by the published events from the publisher:\n\n    ```", "```py\n\n    Then, the subscriber pushes the messages over `mqtt` to the `hbs/cloudtopic` cloud topic on AWS IoT Core:\n\n    ```", "```py\n\n    ```", "```py\n    cd ~/hbshub/recipes\n    nano com.hbs.hub.Subscriber-1.0.0.yaml\n    ```", "```py\n    sudo /greengrass/v2/bin/greengrass-cli deployment create   --recipeDir ~/hbshub/recipes --artifactDir ~/hbshub/artifacts --merge \"com.hbs.hub.Subscriber=1.0.0\"\n    ```", "```py\n    Local deployment submitted! Deployment Id: xxxxxxxxxxxxxx\n    ```", "```py\n    sudo /greengrass/v2/bin/greengrass-cli component list\n    ```", "```py\n    Components currently running in Greengrass:\n    Component Name: com.hbs.hub.Publisher\n        Version: 1.0.0\n        State: RUNNING\n    Component Name: com.hbs.hub.Subscriber\n        Version: 1.0.0\n        State: RUNNING\n    ```", "```py\n    nano com.hbs.hub.Aggregator/1.0.0/hbs_aggregator.py\n    ```", "```py\n     iotclient.create_message_stream(\n         MessageStreamDefinition(\n           name=stream_name,  \n           max_size=268435456,  \n           stream_segment_size=16777216,  \n           time_to_live_millis=None,\n         strategy_on_full=StrategyOnFull.OverwriteOldestData,  \n           persistence=Persistence.File,  \n           flush_on_write=False,  \n           export_definition=ExportDefinition(\n                kinesis=[\n                  KinesisConfig(\n                      identifier=\"KinesisExport\",\n                      kinesis_stream_name=kinesis_stream,\n                      batch_size=1,\n                      batch_interval_millis=60000,\n                      priority=1\n    ```", "```py\n    sequence_number = client.append_message(stream_name=stream_name, data= event.json_message.message)\n    ```", "```py\n    Configuration section in this recipe file, as it requires the Kinesis stream name to be updated. This can be retrieved from the resources section of the deployed CloudFormation stack. Also, note the dependencies on the Stream Manager component and the reference to sdk, which is required by the component at runtime: \n\n    ```", "```py\n\n    ```", "```py\n    sudo /greengrass/v2/bin/greengrass-cli deployment create   --recipeDir ~/hbshub/recipes --artifactDir ~/hbshub/artifacts --merge \"com.hbs.hub.Aggregator=1.0.0\"\n    Local deployment submitted! Deployment Id: xxxxxxxxxxxxxx\n    ```", "```py\n    sudo /greengrass/v2/bin/greengrass-cli component list\n    ```", "```py\n    Components currently running in Greengrass:\n    Component Name: com.hbs.hub.Publisher\n        Version: 1.0.0\n        State: RUNNING\n    Component Name: com.hbs.hub.Subscriber\n        Version: 1.0.0\n        State: RUNNING\n    Component Name: com.hbs.hub.Aggregator\n        Version: 1.0.0\n        State: RUNNING\n    ```"]