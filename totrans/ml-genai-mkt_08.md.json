["```py\nimport pandas as pd\ndf = pd.read_csv(\"./data.csv\")\ndf = df.dropna()\ndf = df.loc[\n    df[\"Quantity\"] > 0\n] \n```", "```py\n        df[\"Sales\"] = df[\"Quantity\"] * df[\"UnitPrice\"]. \n        ```", "```py\n        df[\"InvoiceDate\"] = pd.to_datetime(df[\"InvoiceDate\"])\n        df[\"month\"] = df[\"InvoiceDate\"].dt.strftime(\"%Y-%m-01\") \n        ```", "```py\n    monthly_data = []\n    for each_month in sorted(df[\"month\"].unique()):\n        up_to_last_month_df = df.loc[\n            df[\"month\"] < each_month\n        ]\n        this_month_df = df.loc[\n            df[\"month\"] == each_month\n        ]\n        curr_customers = set(this_month_df[\"CustomerID\"].unique())\n        prev_customers = set(up_to_last_month_df[\"CustomerID\"].unique())\n\n        repeat_customers = curr_customers.intersection(prev_customers)\n        new_customers = curr_customers - prev_customers\n\n        curr_sales = this_month_df[\"Sales\"].sum()\n\n        sales_from_new_customers = this_month_df.loc[\n            this_month_df[\"CustomerID\"].isin(new_customers)\n        ][\"Sales\"].sum()\n        sales_from_repeat_customers = this_month_df.loc[\n            this_month_df[\"CustomerID\"].isin(repeat_customers)\n        ][\"Sales\"].sum()\n\n        avg_sales_from_new_customers = this_month_df.loc[\n            this_month_df[\"CustomerID\"].isin(new_customers)\n        ][\"Sales\"].mean()\n        avg_sales_from_repeat_customers = this_month_df.loc[\n            this_month_df[\"CustomerID\"].isin(repeat_customers)\n        ][\"Sales\"].mean()\n\n        monthly_data.append({\n            \"month\": each_month,\n\n            \"num_customers\": len(curr_customers),\n            \"repeat_customers\": len(repeat_customers),\n            \"new_customers\": len(new_customers),\n\n            \"curr_sales\": curr_sales,\n            \"sales_from_new_customers\": sales_from_new_customers,\n            \"sales_from_repeat_customers\": sales_from_repeat_customers,\n            \"avg_sales_from_new_customers\": avg_sales_from_new_customers,\n            \"avg_sales_from_repeat_customers\": avg_sales_from_repeat_customers,\n        }) \n    ```", "```py\n    monthly_data_df = pd.DataFrame(monthly_data).set_index(\"month\").iloc[1:-1]\n    monthly_data_df[\"repeat_customer_percentage\"] = monthly_data_df[\"repeat_customers\"]/monthly_data_df[\"num_customers\"]\n    monthly_data_df[\"repeat_sales_percentage\"] = monthly_data_df[\"sales_from_repeat_customers\"]/monthly_data_df[\"curr_sales\"] \n    ```", "```py\nax = monthly_data_df[[\n    \"new_customers\", \"repeat_customers\"\n]].plot(kind=\"bar\", grid=True, figsize=(15,5))\n(monthly_data_df[\"repeat_customer_percentage\"]*100).plot(\n    ax=ax, secondary_y=True, color=\"salmon\", style=\"-o\"\n)\nax.right_ax.legend()\nax.right_ax.set_ylim([0, 100.0])\nax.right_ax.set_ylabel(\"repeat customer percentage (%)\")\nax.set_ylabel(\"number of customers\")\nax.set_title(\"number of new vs. repeat customers over time\")\nplt.show() \n```", "```py\nax = (monthly_data_df[[\n    \"sales_from_new_customers\", \"sales_from_repeat_customers\"\n]]/1000).plot(kind=\"bar\", grid=True, figsize=(15,5))\n(monthly_data_df[\"repeat_sales_percentage\"]*100).plot(\n    ax=ax, secondary_y=True, color=\"salmon\", style=\"-o\"\n)\nax.set_ylabel(\"sales (in thousands)\")\nax.set_title(\"sales from new vs. repeat customers over time\")\nax.right_ax.legend()\nax.right_ax.set_ylim([0, 100.0])\nax.right_ax.set_ylabel(\"repeat customer percentage (%)\")\nplt.show() \n```", "```py\nmonthly_data_df[\"repeat_to_new_avg_sales_ratio\"] = (\n    monthly_data_df[\"avg_sales_from_repeat_customers\"]\n    /\n    monthly_data_df[\"avg_sales_from_new_customers\"]\n)\nax = monthly_data_df[[\n    \"avg_sales_from_new_customers\", \"avg_sales_from_repeat_customers\"\n]].plot(kind=\"bar\", grid=True, figsize=(15,5), rot=0)\nax.set_ylabel(\"average sales\")\nax.set_title(\"sales from new vs. repeat customers over time\")\nmonthly_data_df[\"repeat_to_new_avg_sales_ratio\"].plot(\n    ax=ax, secondary_y=True, color=\"salmon\", style=\"-o\"\n)\nax.right_ax.set_ylim([0, 2.0])\nax.right_ax.set_ylabel(\"repeat to new customer avg sales ratio\")\nplt.show() \n```", "```py\n# Net Sales & Quantity\ncustomer_net_df = df.groupby('CustomerID')[[\"Sales\", \"Quantity\"]].sum()\ncustomer_net_df.columns = ['NetSales', 'NetQuantity']\n# Total Refunds\ncustomer_refund_df = df.loc[\n    df[\"Quantity\"] < 0\n].groupby(\"CustomerID\")[[\"Sales\", \"Quantity\"]].sum().abs()\ncustomer_refund_df.columns = ['TotalRefund', 'TotalRefundQuantity']\ncustomer_df = customer_net_df.merge(\n    customer_refund_df, left_index=True, right_index=True, how=\"left\"\n).fillna(0) \n```", "```py\ncustomer_df.hist(bins=50, figsize=(15,10))\nplt.show() \n```", "```py\nlog_customer_df = np.log(customer_df - customer_df.min() + 1) \n```", "```py\nlog_customer_df.hist(bins=50, figsize=(15,10))\nplt.show() \n```", "```py\nfrom sklearn.cluster import KMeans\nCOLS = ['NetSales', 'NetQuantity', 'TotalRefundQuantity']\nkmeans = KMeans(\n    n_clusters=4, n_init=\"auto\"\n).fit(\n    customer_df[COLS]\n) \n```", "```py\nimport matplotlib.colors as mcolors\ndef plot_clusters(c_df, col1, col2):    colors = list(mcolors.TABLEAU_COLORS.values())\n    clusters = sorted(c_df[\"cluster\"].unique())\n    for c in clusters:\n        plt.scatter(\n            c_df.loc[c_df['cluster'] == c][col1],\n            c_df.loc[c_df['cluster'] == c][col2],\n            c=colors[c]\n        )\n    plt.title(f'{col1} vs. {col2} Clusters')\n    plt.xlabel(col1)\n    plt.ylabel(col2)\n    plt.legend(clusters)\n    plt.show()\ncluster_df = customer_df[COLS].copy()\ncluster_df[\"cluster\"] = kmeans.labels_\nplot_clusters(cluster_df, \"NetSales\", \"NetQuantity\")\nplot_clusters(cluster_df, \"NetSales\", \"TotalRefundQuantity\")\nplot_clusters(cluster_df, \"NetQuantity\", \"TotalRefundQuantity\") \n```", "```py\ncluster_df.groupby('cluster')['NetSales'].count() \n```", "```py\nCOLS = ['NetSales', 'NetQuantity', 'TotalRefundQuantity']\nkmeans = KMeans(\n    n_clusters=4, n_init=\"auto\"\n).fit(\n    log_customer_df[COLS]\n)\ncluster_df = log_customer_df[COLS].copy()\ncluster_df[\"cluster\"] = kmeans.labels_ \n```", "```py\ncluster_df.groupby('cluster')['NetSales'].count() \n```", "```py\nplot_clusters(cluster_df, \"NetSales\", \"NetQuantity\")\nplot_clusters(cluster_df, \"NetSales\", \"TotalRefundQuantity\")\nplot_clusters(cluster_df, \"NetQuantity\", \"TotalRefundQuantity\") \n```", "```py\nnp.exp(X) + customer_df.min()[COLUMN] - 1 \n```", "```py\nfrom sklearn.metrics import silhouette_score\nsilhouette_score(\n    log_customer_df[COLS],\n    kmeans.labels_\n) \n```", "```py\nCOLS = ['NetSales', 'NetQuantity', 'TotalRefundQuantity']\nf, axes = plt.subplots(2, 3, sharey=False, figsize=(12, 7))\nfor i, n_cluster in enumerate([4,5,6,7,8]):\n    kmeans = KMeans(n_clusters=n_cluster, n_init=\"auto\").fit(\n        log_customer_df[COLS]\n    )\n    silhouette_avg = silhouette_score(\n        log_customer_df[COLS],\n        kmeans.labels_\n    )\n\n    print('Silhouette Score for %i Clusters: %0.4f' % (n_cluster, silhouette_avg))\n\n    each_cluster_size = [\n        (kmeans.labels_ == i).sum()/len(kmeans.labels_) for i in range(n_cluster)\n    ]\n    ax = axes[i//3][i%3]\n    pd.DataFrame(each_cluster_size).plot(ax=ax, kind=\"barh\", color=\"orange\")\n    for p in ax.patches:\n        ax.annotate(f'{p.get_width()*100:.01f}%', (p.get_width(), p.get_y()+0.2))\n    ax.axvline(x=(1/n_cluster), color=\"red\", linestyle=\"--\")\n    ax.set_xlabel(\"Cluster Size\", size=8)\n    ax.set_title(f\"Cluster #{n_cluster} - Silhouette: {silhouette_avg:.02f}\")\n    ax.title.set_size(8)\nf.subplots_adjust(hspace=0.3)\nplt.show() \n```", "```py\npip install transformers \n```", "```py\nimport os\nos.environ[\"TOKENIZERS_PARALLELISM\"] = \"false\"\nfrom sentence_transformers import SentenceTransformer, util\ncustomer_item_df = pd.DataFrame(\n    df.groupby(\"CustomerID\")[\"Description\"].apply(\n        lambda x: \", \".join(list(set(x)))\n    )\n)\nembedding_model = SentenceTransformer(\n    \"sentence-transformers/all-MiniLM-L6-v2\"\n)\nencoded = embedding_model.encode(\n    list(customer_item_df[\"Description\"]),\n    show_progress_bar=True\n)\nwith open('tmp.npy', 'wb') as f:\n    np.save(f, encoded) \n```", "```py\n    from sklearn.decomposition import PCA\n    with open('tmp.npy', 'rb') as f:\n        encoded = np.load(f)\n    pca = PCA(n_components=5)\n    transforemd_encoded = pca.fit_transform(encoded) \n    ```", "```py\n    from sklearn.cluster import KMeans\n    from sklearn.metrics import silhouette_samples, silhouette_score\n    for n_cluster in [4,5,6,7,8]:\n        kmeans = KMeans(n_clusters=n_cluster, n_init=\"auto\").fit(\n            transforemd_encoded\n        )\n\n        silhouette_avg = silhouette_score(\n            transforemd_encoded,\n            kmeans.labels_\n        )\n\n        print('Silhouette Score for %i Clusters: %0.4f' % (n_cluster, silhouette_avg)) \n    ```", "```py\n    n_cluster = 7\n    kmeans = KMeans(n_clusters=n_cluster, n_init=\"auto\").fit(\n        transforemd_encoded\n    )\n    customer_item_df[\"cluster\"] = kmeans.labels_\n    from collections import Counter\n    n_items = 5\n    common_items = []\n    for i in range(n_cluster):\n        most_common_items = Counter(list(df.set_index(\"CustomerID\").loc[\n                customer_item_df.loc[\n                customer_item_df[\"cluster\"] == i\n            ].index\n        ][\"Description\"])).most_common(n_items)\n\n        common_items.append({\n            f\"item_{j}\": most_common_items[j][0] for j in range(n_items)\n        })\n    common_items_df = pd.DataFrame(common_items) \n    ```"]