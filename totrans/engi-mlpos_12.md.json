["```py\n├──10_Production_Release\n├── create_aks_cluster.py\n├── config.json\n```", "```py\n    from azureml.core import Workspace\n    from azureml.core.model import Model\n    from azureml.core.compute import ComputeTarget\n    from azureml.core.compute_target import ComputeTargetException\n    from azureml.core.compute import AksCompute, ComputeTarget\n    ```", "```py\n    ws = Workspace.from_config()\n    print(ws.name, ws.resource_group, ws.location, sep = '\\n')\n    ```", "```py\n    # Choose a name for your AKS cluster\n    aks_name = 'prod-aks' \n    # Verify that cluster does not exist already\n    try:\n        aks_target = ComputeTarget(workspace=ws, name=aks_name)\n        print('Found existing cluster, use it.')\n    except ComputeTargetException:\n        # Use the default configuration (can also provide parameters to customize)\n        prov_config = AksCompute.provisioning_configuration()\n        # Create the cluster\n        aks_target = ComputeTarget.create(workspace = ws, \n                                        name = aks_name, \n    provisioning_configuration = prov_config)\n    if aks_target.get_status() != \"Succeeded\":\n        aks_target.wait_for_completion(show_output=True)\n    ```", "```py\n    AksDeploymentConfig.yml\n    computeType: AKS\n    autoScaler:\n        autoscaleEnabled: True\n        minReplicas: 1\n        maxReplicas: 3\n        refreshPeriodInSeconds: 10\n        targetUtilization: 70\n    authEnabled: True\n    containerResourceRequirements:\n        cpu: 1\n        memoryInGB: 1\n    appInsightsEnabled: False\n    scoringTimeoutMs: 1000\n    maxConcurrentRequestsPerContainer: 2\n    maxQueueWaitMs: 1000\n    sslEnabled: False\n    ```"]