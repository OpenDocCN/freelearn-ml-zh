["```py\npip install ultralytics lightly docker encord\n```", "```py\nimport os\nfrom IPython.display import display, Markdown\nfrom ultralytics import YOLO\nfrom pathlib import Path\nimport json\nimport contextlib\nfrom typing import Iterator\nimport docker\nfrom docker.models.containers import Container\nfrom lightly.api import ApiWorkflowClient\nfrom lightly.openapi_generated.swagger_client import DatasetType\nfrom lightly.openapi_generated.swagger_client import DatasourcePurpose\nfrom encord.orm.cloud_integration import CloudIntegration\nfrom encord.orm.dataset import AddPrivateDataResponse\nfrom encord.user_client import EncordUserClient\nfrom encord.orm.dataset import CreateDatasetResponse, StorageLocation\n```", "```py\nlightly_token = \"your_lightly_token\"\n```", "```py\nclient = ApiWorkflowClient(token=lightly_token)\n```", "```py\nModel = YOLO(\"yolov8x.pt\")\n```", "```py\nmodel.namesg\n```", "```py\n{0: 'person',\n 1: 'bicycle',\n 2: 'car',\n 3: 'motorcycle',\n ...\n 32: 'sports ball',\n 33: 'kite',\n 34: 'baseball bat',\n...\n 76: 'scissors',\n 77: 'teddy bear',\n 78: 'hair drier',\n 79: 'toothbrush'}\n```", "```py\nimportant_classes = {\"dog\": 16, \" sports ball\": 32}\nclasses = list(important_classes.values())\n```", "```py\npredictions_rooth_path = Path(\"predictions\")\ntask_name = \"yolov8_demo_dog_detection\"\npredictions_path = Path(predictions_rooth_path / task_name)\n```", "```py\nvideos = Path(\"videos/project_demo/\").glob(\"*.mp4\")\nfor video in videos:\n    print(video)\n    results = model.predict(video, conf=0.3)\n    predictions = [result.boxes.data for result in results]\n    number_of_frames = len(predictions)\n    padding = len(str(number_of_frames))\n    fname = video\n    for idx, prediction in enumerate(predictions):\n        populate_predictions_json_files(prediction, fname, padding)\n```", "```py\nworker_id = client.register_compute_worker(name=\"Demo\")\n```", "```py\ndocker pull lightly/worker:latest\n```", "```py\n    client.create_dataset(dataset_name=\"demo_dataset\",\n        dataset_type=DatasetType.VIDEOS)\n    dataset_id = client.dataset_id\n    ```", "```py\n    client.set_local_config(\n        relative_path=\"project_demo\",\n        purpose=DatasourcePurpose.INPUT\n    )\n    client.set_local_config(\n        relative_path=\"project_demo\",\n        purpose=DatasourcePurpose.LIGHTLY\n    )\n    ```", "```py\n    scheduled_run_id = client.schedule_compute_worker_run(\n        worker_config={},\n        selection_config={\n            \"n_samples\": 5,\n            \"strategies\": [\n                {\n                    # strategy to find diverse objects\n                    \"input\": {\n                        \"type\": \"EMBEDDINGS\",\n                        \"task\": task_name,\n                    },\n                    \"strategy\": {\n                        \"type\": \"DIVERSITY\",\n                    },\n                },\n                {\n                    # strategy to balance the class ratios\n                    \"input\": {\n                        \"type\": \"PREDICTIONS\",\n                        \"name\": \"CLASS_DISTRIBUTION\",\n                        \"task\": task_name,\n                    },\n                    \"strategy\": {\n                        \"type\": \"BALANCE\",\n                        \"target\": {\n                            dog: 0.50,\n                            'sports ball': 0.50,\n                        }\n                    },\n                },\n                {\n                    # strategy to use prediction score (Active Learning)\n                    \"input\": {\n                        \"type\": \"SCORES\",\n                        \"task\": task_name,\n                        \"score\": \"object_frequency\"\n                    },\n                    \"strategy\": {\n                        \"type\": \"WEIGHTS\"\n                    },\n                },\n                {\n                    # strategy to use prediction score (Active Learning)\n                    \"input\": {\n                        \"type\": \"SCORES\",\n                        \"task\": task_name,\n                        \"score\": \"objectness_least_confidence\"\n                    },\n                    \"strategy\": {\n                        \"type\": \"WEIGHTS\"\n                    },\n                },\n            ],\n        },\n        lightly_config={},\n        runs_on=['Demo'],\n    )\n    ```", "```py\n    !mkdir lightly && mkdir lightly/project_demo && mkdir lightly/project_demo/.lightly\n    !mv metadata lightly/project_demo/.lightly && mv predictions lightly/project_demo/.lightly\n    ```", "```py\n@contextlib.contextmanager\ndef start_worker(lightly_token, lightly_worker_id, image_name=\"lightly/worker:latest\", WORKER_LABEL=\"Demo\") -> Iterator[Container]:\n    docker_client = docker.from_env()\n    volumes = [\"/home/user/videos:/input_mount\",\n              \"/home/user/lightly:/lightly_mount\"]\n    container = docker_client.containers.run(\n        image_name,\n        f\"token={lightly_token} worker.worker_id={lightly_worker_id}\",\n        detach=True,\n        labels={\"lightly_worker_label\": WORKER_LABEL},\n        volumes=volumes,\n    )\n    try:\n        yield container\n    finally:\n        try:\n            container.kill()\n        except docker.errors.APIError:\n            # if a container was killed from outside, we don't care\n            pass\n```", "```py\nwith start_worker(lightly_token, lightly_worker_id=worker_id):\n    print('Worker running ...')\n    last_run_info = None\n    no_update_count = 0\n    while True:\n        run_info = client.get_compute_worker_run_info(\n            scheduled_run_id=scheduled_run_id\n        )\n        print(run_info)\n        if run_info.in_end_state():\n            assert run_info.ended_successfully(), \n                \"Run did not end successfully\"\n            break\n        if run_info != last_run_info:\n            no_update_count = 0\n        else:\n            no_update_count += 1\n            if no_update_count >= 10000:\n                raise RuntimeError(\n                    f\"Test timout: no run_info update\\n\"\n                    f\"last_run_info: {str(last_run_info)}, \n                        run_info: {str(run_info)}\"\n                )\n        last_run_info = run_info\n```", "```py\nmost_informative_frames = glob('lightly/project_demo/.lightly/frames/*.png')\nfor img_path in most_informative_frames:\n    plt.imshow(Image.open(img_path))\n    plt.show()\n```", "```py\n\"proportionSamples\": 0.30\n```", "```py\n\"n_samples\": 5\n```", "```py\nencord_private_key = \"-----BEGIN OPENSSH PRIVATE KEY-----{your_key}-----END OPENSSH PRIVATE KEY-----\"\nuser_client = EncordUserClient.create_with_ssh_private_key(\n    encord_private_key)\n```", "```py\nprint('\\nCreating Encord Dataset...')\nencord_dataset_created = user_client.create_dataset(\n    'project_demo', StorageLocation.CORD_STORAGE\n)\n```", "```py\ndataset_hash = encord_dataset_created.dataset_hash\n```", "```py\ndataset = user_client.get_dataset(dataset_hash)\nimage_files = sorted(\n    [\n        p.as_posix()\n        for p in Path(\"lightly/project_demo/.lightly/frames\").iterdir()\n        if p.suffix in {\".jpg\", \".png\"}\n    ]\n)\ndataset.create_image_group(image_files, create_video=True)\n```", "```py\nproject_hash = user_client.create_project(\n        project_title='project_demo',\n        dataset_hashes=[dataset_hash],\n        ontology_hash='a0e16402-a5b4-417e-a4b1-7871ed386362')\n```", "```py\nclient_lightly_dataset = ApiWorkflowClient(\n    token=lightly_token, dataset_id=dataset_id)\nfilenames_and_read_urls \\ \n    client_lightly_dataset.export_filenames_and_read_urls_by_tag_name(\n        tag_name=\"initial-tag\"  # name of the tag in the dataset\n)\nprint(f'There are {len(filenames_and_read_urls)} frames')\n```", "```py\nThere are 5 frames\n```", "```py\nprint(filenames_and_read_urls)\n```", "```py\n[{'fileName': 'dog_running_ball-024-mp4.png', 'readUrl': 'https://api.lightly.ai/v1/datasets/...', 'datasourceUrl': 'project_demo/.lightly/frames/dog_running_ball-024-mp4.png'}, .... {'fileName': 'dog_running_ball-180-mp4.png', 'readUrl': 'https://api.lightly.ai/v1/datasets/...', 'datasourceUrl': 'project_demo/.lightly/frames/dog_running_ball-180-mp4.png'}]\n```", "```py\nscheduled_run_id = client.schedule_compute_worker_run(\n    worker_config={\n        \"enable_training\": True\n    },\n    selection_config={\n        \"n_samples\": 5,\n        \"strategies\": [....], # same as before\n    },\n    lightly_config={\n        'loader': {\n            'num_workers': -1,\n        },\n        'trainer': {\n            'max_epochs': 10,\n            \"gpus\": 0, # cpu\n        },\n    },\n    runs_on=['Demo'],\n)\n```"]