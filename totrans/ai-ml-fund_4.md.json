["```py\n    A11 6 A34 A43 1169 A65 A75 4 A93 A101 4 A121 67 A143 A152 2 A173 1 A192 A201 1\n    A12 48 A32 A43 5951 A61 A73 2 A92 A101 2 A121 22 A143 A152 1 A173 1 A191 A201 2\n    A14 12 A34 A46 2096 A61 A74 2 A93 A101 3 A121 49 A143 A152 1 A172 2 A191 A201 1\n    ```", "```py\n    CheckingAccountStatus DurationMonths CreditHistory CreditPurpose CreditAmount SavingsAccount EmploymentSince DisposableIncomePercent PersonalStatusSex OtherDebtors PresentResidenceMonths Property Age OtherInstallmentPlans Housing NumberOfExistingCreditsInBank Job LiabilityNumberOfPeople Phone ForeignWorker CreditScore\n    ```", "```py\n    import pandas\n    data_frame = pandas.read_csv('german.data', sep=' ')\n    ```", "```py\ndata_frame.head()\n```", "```py\n  CheckingAccountStatus DurationMonths CreditHistory CreditPurpose \\\n0                 A11             6         A34         A43\n..\n4                 A11             24         A33         A40\n   CreditAmount SavingsAccount EmploymentSince DisposableIncomePercent \\\n0         1169            A65             A75                        4\n..\n4         4870            A61             A73                        3\n  PersonalStatusSex OtherDebtors     ...     Property Age \\\n0             A93         A101     ...         A121 67\n..\n4             A93         A101     ...         A124 53\n   OtherInstallmentPlans Housing NumberOfExistingCreditsInBank Job \\\n0                 A143    A152                             2 A173\n..\n4                 A143    A153                             2 A173\n  LiabilityNumberOfPeople Phone ForeignWorker CreditScore\n0                     1 A192         A201         1\n..\n4                     2 A191         A201         2\n[5 rows x 21 columns]\n```", "```py\ndata_frame.replace('NA', -1000000, inplace=True)\n```", "```py\ndata_frame.dropna(0, inplace=True)\n```", "```py\ndata_frame.drop(['Phone'], 1, inplace=True)\n```", "```py\nfrom sklearn import preprocessing\ndata = np.array([\n    [19, 65],\n    [4, 52],\n    [2, 33]\n])\npreprocessing.MinMaxScaler(feature_range=(0,1)).fit_transform(data)\n```", "```py\n array([[1\\.        , 1\\.        ],\n     [0.11764706, 0.59375 ],\n     [0\\.        , 0\\.        ]])\n```", "```py\npreprocessing.Binarizer(threshold=10).transform(data)\narray([[1, 1],\n     [0, 1],\n     [0, 1]])\n```", "```py\nfrom sklearn import preprocessing\nlabels = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']\nlabel_encoder = preprocessing.LabelEncoder()\nlabel_encoder.fit(labels)\n```", "```py\n[x for x in enumerate(label_encoder.classes_)]\n```", "```py\n[(0, 'Friday'),\n (1, 'Monday'),\n (2, 'Thursday'),\n (3, 'Tuesday'),\n (4, 'Wednesday')]\n```", "```py\nencoded_values = label_encoder.transform(['Wednesday', 'Friday'])\n```", "```py\n array([4, 0], dtype=int64)\n```", "```py\nlabel_encoder.inverse_transform([0, 4])\n```", "```py\n array(['Wednesday', 'Friday'], dtype='<U9')\n```", "```py\n    ID,name,category,main_category,currency,deadline,goal,launched,pledged,state,backers,country,usd pledged,usd_pledged_real,usd_goal_real\n    ```", "```py\n    import pandas\n    data_frame = pandas.read_csv('ks-projects-201801.csv', sep=',')\n    data_frame.head()\n    ```", "```py\n       data_frame.replace('NA', -1000000, inplace=True)\n       data_frame.replace('N/A', -1000000, inplace=True)\n    ```", "```py\n    data_frame.drop(['ID'], 1, inplace=True)\n    ```", "```py\n    from sklearn import preprocessing\n    preprocessing.Binarizer(threshold=1).transform([data_frame['backers']])\n    ```", "```py\n     array([[0, 1, 1, ..., 0, 1, 1]], dtype=int64)\n    ```", "```py\n    labels = ['AUD', 'CAD', 'CHF', 'DKK', 'EUR', 'GBP', 'HKD', 'JPY', 'MXN', 'NOK', 'NZD', 'SEK', 'SGD', 'USD']\n    label_encoder = preprocessing.LabelEncoder()\n    label_encoder.fit(labels)\n    label_encoder.transform(data_frame['currency'])\n    ```", "```py\n     array([ 5, 13, 13, ..., 13, 13, 13], dtype=int64)\n    ```", "```py\nimport numpy as np\nvalues_to_scale = np.mat([data_frame['goal']]).transpose()\n```", "```py\npreprocessing\n    .MinMaxScaler(feature_range=(0,1))\n    .fit_transform(values_to_scale)\n    .transpose()\n```", "```py\narray([[9.999900e-06, 2.999999e-04, 4.499999e-04, ..., 1.499999e-04, 1.499999e-04, 1.999990e-05]])\n```", "```py\nimport numpy as np\nfeatures = np.array(data_frame.drop(['CreditScore'], 1))\nlabel = np.array(data_frame['CreditScore'])\n```", "```py\nfrom sklearn import model_selection\nfeatures_train, features_test, label_train, label_test =\n    model_selection.train_test_split(\n        features,\n        label,\n        test_size=0.1\n    )\n```", "```py\nfrom sklearn.metrics.pairwise import euclidean_distances\npoints = [[2,3], [3,7], [1,6]]\neuclidean_distances([[4,4]], points)\n```", "```py\narray([[2.23606798, 3.16227766, 3.60555128]])\n```", "```py\neuclidean_distances(points)\narray([[0\\.        , 4.12310563, 3.16227766],\n     [4.12310563, 0\\.        , 2.23606798],\n     [3.16227766, 2.23606798, 0\\.        ]])\n```", "```py\nemployees = [\n    [20, 50000, 0],\n    [24, 45000, 0],\n    [32, 48000, 0],\n    [24, 55000, 0],\n    [40, 50000, 0],\n    [40, 62000, 1],\n    [40, 48000, 1],\n    [32, 55000, 1],\n    [40, 72000, 1],\n    [32, 60000, 1]\n]\n```", "```py\n    import matplotlib.pyplot as plot\n    from sklearn import preprocessing\n    import numpy as np\n    from sklearn.preprocessing import MinMaxScaler\n    scaled_employees = preprocessing.MinMaxScaler(feature_range=(0,1))\n        .fit_transform(employees)\n    ```", "```py\n    array([[0\\.        , 0.18518519, 0\\.        ],\n         [0.2     , 0\\.        , 0\\.        ],\n         [0.6     , 0.11111111, 0\\.        ],\n         [0.2     , 0.37037037, 0\\.        ],\n         [1\\.        , 0.18518519, 0\\.        ],\n         [1\\.        , 0.62962963, 1\\.        ],\n         [1\\.        , 0.11111111, 1\\.        ],\n         [0.6     , 0.37037037, 1\\.        ],\n         [1\\.        , 1\\.        , 1\\.        ],\n         [0.6     , 0.55555556, 1\\.        ]])\n    ```", "```py\n    import matplotlib.pyplot as plot\n    [&#9;\n        plot.scatter(x[0], x[1], color = 'g' if x[2] > 0.5 else 'r')\n        for x in scaled_employees\n    ] + [plot.scatter(0.5, 0.25925925925925924, color='b')]\n    ```", "```py\n    scaled_employee_features = scaled_employees.transpose()[:2].transpose()\n    scaled_employee_features\n    ```", "```py\n     array([[0\\.        , 0.18518519],\n        [0.2     , 0\\.        ],\n        [0.6     , 0.11111111],\n        [0.2     , 0.37037037],\n        [1\\.        , 0.18518519],\n        [1\\.        , 0.62962963],\n        [1\\.        , 0.11111111],\n        [0.6     , 0.37037037],\n        [1\\.        , 1\\.        ],\n         [0.6     , 0.55555556]])\n    ```", "```py\n    from sklearn.metrics.pairwise import euclidean_distances\n    euclidean_distances(\n        [[0.5, 0.25925925925925924]],\n        scaled_employee_features\n    )\n    ```", "```py\n     array([[0.50545719, 0.39650393, 0.17873968, 0.31991511, 0.50545719,\n            0.62223325, 0.52148622, 0.14948471, 0.89369841, 0.31271632]])\n    ```", "```py\n    from sklearn import model_selection\n    import pandas\n    import numpy as np\n    from sklearn import preprocessing\n    features_train, features_test, label_train, label_test =\n    model_selection.train_test_split(\n        scaled_features,\n        label,\n        test_size=0.2\n    )\n    ```", "```py\n    from sklearn import neighbors\n    classifier = neighbors.KNeighborsClassifier()\n    classifier.fit(features_train, label_train)\n    ```", "```py\n    classifier.score(features_test, label_test)\n    ```", "```py\n    data_point = [None] * 20\n    for i in range(20):\n        data_point[i] = features_test[i][i]\n    data_point = np.array(data_point)\n    ```", "```py\n    data_point = data_point.reshape(1, -1)\n    ```", "```py\n    credit_rating = classifier.predict(data_point)\n    ```", "```py\n    classifier.predict(data_point)\n    ```", "```py\n    array([1], dtype=int64)\n    ```", "```py\nclassifier = neighbors.KNeighborsClassifier(n_neighbors=50)\n```", "```py\nfeatures_train, features_test, label_train, label_test = model_selection\n    .train_test_split(\n        scaled_features,\n        label,\n        test_size=0.2\n    )\n```", "```py\nfrom sklearn import svm\nclassifier = svm.SVC()\nclassifier.fit(features_train, label_train)\n# Let's can check how well our classifier performs on the\n# test data:\nclassifier.score(features_test, label_test)\n```", "```py\nclassifier = svm.SVC(kernel=\"poly\", C=2, degree=4, gamma=0.05)\n```"]