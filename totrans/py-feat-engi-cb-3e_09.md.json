["```py\npip install featuretools\n```", "```py\nconda install -c conda-forge featuretools\n```", "```py\n    import pandas as pd\n    import featuretools as ft\n    from woodwork.logical_types import Categorical\n    ```", "```py\n    df = pd.read_csv(\n        «retail.csv», parse_dates=[«invoice_date»])\n    df.head()\n    ```", "```py\n    es = ft.EntitySet(id=\"data\")\n    ```", "```py\n    es = es.add_dataframe(\n        dataframe=df,\n        dataframe_name=»data»,\n        index=\"rows\",\n        make_index=True,\n        time_index=»invoice_date»,\n        logical_types={ «customer_id»: Categorical},\n    )\n    ```", "```py\n    es.normalize_dataframe(\n        base_dataframe_name=»data»,\n        new_dataframe_name=»invoices»,\n        index=\"invoice\",\n        copy_columns=[«customer_id»],\n    )\n    ```", "```py\n    es.normalize_dataframe(\n        base_dataframe_name=»invoices»,\n        new_dataframe_name=»customers»,\n        index=»customer_id»,\n    )\n    ```", "```py\n    es.normalize_dataframe(\n        base_dataframe_name=»data»,\n        new_dataframe_name=»items»,\n        index=»stock_code»,\n    )\n    ```", "```py\n    es\n    ```", "```py\n    Entityset: data\n      DataFrames:\n        data [Rows: 741301, Columns: 8]\n        invoices [Rows: 40505, Columns: 3]\n        customers [Rows: 5410, Columns: 2]\n        items [Rows: 4631, Columns: 2]\n      Relationships:\n        data.invoice -> invoices.invoice\n        invoices.customer_id -> customers.customer_id\n    invoices DataFrame:\n\n    ```", "```py\n\n    We see in the following output that `featuretools` automatically created a DataFrame containing the invoice’s unique identifier, followed by the customer’s unique identifier and the first date registered for each invoice:\n    ```", "```py\n    es[\"customers\"].head()\n    ```", "```py\n    es.plot()\n    ```", "```py\n    feature_matrix, feature_defs = ft.dfs(\n        entityset=es,\n        target_dataframe_name=»customers»,\n        ignore_columns={\n            «invoices»:[«invoice»],\n            «invoices»:[«customer_id»],\n        }\n    )\n    ```", "```py\n    feature_defs[5:10]\n    ```", "```py\n    [<Feature: MIN(data.price)>,\n    <Feature: MIN(data.quantity)>,\n    <Feature: MODE(data.description)>,\n    <Feature: MODE(data.stock_code)>,\n    <Feature: NUM_UNIQUE(data.description)>]\n    ```", "```py\n    feature_matrix[feature_matrix.columns[5:10]].head()\n    ```", "```py\n    feature_matrix, feature_defs = ft.dfs(\n        entityset=es,\n        target_dataframe_name=»invoices»,\n        ignore_columns = {«data»: [«customer_id»]},\n        max_depth = 1,\n    )\n    ```", "```py\n    feature_defs\n    ```", "```py\n    [<Feature: customer_id>,\n    <Feature: COUNT(data)>,\n    <Feature: MAX(data.price)>,\n    <Feature: MAX(data.quantity)>,\n    <Feature: MEAN(data.price)>,\n    <Feature: MEAN(data.quantity)>,\n    <Feature: MIN(data.price)>,\n    <Feature: MIN(data.quantity)>,\n    <Feature: MODE(data.description)>,\n    <Feature: MODE(data.stock_code)>,\n    <Feature: NUM_UNIQUE(data.description)>,\n    <Feature: NUM_UNIQUE(data.stock_code)>,\n    <Feature: SKEW(data.price)>,\n    <Feature: SKEW(data.quantity)>,\n    <Feature: STD(data.price)>,\n    <Feature: STD(data.quantity)>,\n    <Feature: SUM(data.price)>,\n    <Feature: SUM(data.quantity)>,\n    <Feature: DAY(first_data_time)>,\n    <Feature: MONTH(first_data_time)>,\n    <Feature: WEEKDAY(first_data_time)>,\n    <Feature: YEAR(first_data_time)>]\n    ```", "```py\n    import numpy as np\n    import pandas as pd\n    ```", "```py\n    df = pd.read_csv(\n        «retail.csv», parse_dates=[«invoice_date»])\n    ```", "```py\n    numeric_vars = [\"quantity\", \"price\"]\n    ```", "```py\n    func = [\"cumsum\", \"cummax\", \"diff\"]\n    ```", "```py\n    new_names = [f\"{var}_{function}\"\n        for function in func for var in numeric_vars]\n    ```", "```py\n    df[new_names] = df.groupby(\n        \"invoice\")[numeric_vars].agg(func)\n    ```", "```py\n    df[df[\"invoice\"] == \"489434\" ][\n        numeric_vars + new_names]\n    ```", "```py\n    new_names = [\n        f\"{var}_{function}\"\n        for function in [\"sin\", \"cos\"]\n        for var in numeric_vars]\n    ```", "```py\n    df[new_names] = df[numeric_vars].agg(\n        [np.sin, np.cos])\n    ```", "```py\n    import pandas as pd\n    import featuretools as ft\n    from woodwork.logical_types import Categorical\n    ```", "```py\n    df = pd.read_csv(\n        «retail.csv», parse_dates=[«invoice_date»])\n    ```", "```py\n    es = ft.EntitySet(id=\"data\")\n    ```", "```py\n    es = es.add_dataframe(\n        dataframe=df,\n        dataframe_name=»data»,\n        index=\"rows\",\n        make_index=True,\n        time_index=»invoice_date»,\n        logical_types={\n            \"customer_id\": Categorical,\n            \"invoice\": Categorical,\n        }\n    )\n    ```", "```py\n    es.normalize_dataframe(\n        base_dataframe_name=»data»,\n        new_dataframe_name=»invoices»,\n        index=\"invoice\",\n        copy_columns=[«customer_id»],\n    )\n    ```", "```py\n    cum_primitives = [\n        \"cum_sum\",\n        \"cum_max\",\n        \"diff\",\n        \"time_since_previous\"]\n    ```", "```py\n    general_primitives = [\"sine\", \" cosine \"]\n    ```", "```py\n    feature_matrix, feature_defs = ft.dfs(\n        entityset=es,\n        target_dataframe_name=»data»,\n        agg_primitives=[],\n        trans_primitives=general_primitives,\n        groupby_trans_primitives = cum_primitives,\n        ignore_dataframes = [«invoices»],\n    )\n    ```", "```py\n    feature_defs\n    ```", "```py\n    [<Feature: customer_id>,\n    <Feature: invoice>,\n    <Feature: stock_code>,\n    <Feature: description>,\n    <Feature: quantity>,\n    <Feature: price>,\n    <Feature: COSINE(price)>,\n    <Feature: COSINE(quantity)>,\n    <Feature: SINE(price)>,\n    <Feature: SINE(quantity)>,\n    <Feature: CUM_MAX(price) by invoice>,\n    <Feature: CUM_MAX(quantity) by invoice>,\n    <Feature: CUM_SUM(price) by invoice>,\n    <Feature: CUM_SUM(quantity) by invoice>,\n    <Feature: DIFF(price) by invoice>,\n    <Feature: DIFF(quantity) by invoice>,\n    <Feature: TIME_SINCE_PREVIOUS(invoice_date) by invoice>]\n    ```", "```py\n    import pandas as pd\n    import featuretools as ft\n    from woodwork.logical_types import Categorical\n    ```", "```py\n    df = pd.read_csv(\n        «retail.csv», parse_dates=[«invoice_date»])\n    ```", "```py\n    es = ft.EntitySet(id=\"data\")\n    ```", "```py\n    es = es.add_dataframe(\n        dataframe=df,\n        dataframe_name=»data»,\n        index=\"rows\",\n        make_index=True,\n        time_index=»invoice_date»,\n        logical_types={«customer_id»: Categorical},\n    )\n    ```", "```py\n    es.normalize_dataframe(\n        base_dataframe_name=»data»,\n        new_dataframe_name=»invoices»,\n        index=\"invoice\",\n        copy_columns=[«customer_id»],\n    )\n    ```", "```py\n    feature_matrix, feature_defs = ft.dfs(\n        entityset=es,\n        target_dataframe_name=»data»,\n        agg_primitives=[],\n        trans_primitives=[«multiply_numeric»],\n        primitive_options={\n            («multiply_numeric»): {\n                ‹include_columns›: {\n                    'data': [\"quantity\", \"price\"]\n                }\n            }\n        },\n        ignore_dataframes=[«invoices»],\n    )\n    ```", "```py\n    feature_defs\n    ```", "```py\n    [<Feature: customer_id>,\n    <Feature: stock_code>,\n    <Feature: description>,\n    <Feature: quantity>,\n    <Feature: price>,\n    <Feature: price * quantity>]\n    ```", "```py\n    feature_matrix.head()\n    ```", "```py\n    import pandas as pd\n    import featuretools as ft\n    from featuretools.primitives import (\n        IsFederalHoliday, DistanceToHoliday)\n    from woodwork.logical_types import Categorical\n    ```", "```py\n    df = pd.read_csv(\n        «retail.csv», parse_dates=[«invoice_date»])\n    ```", "```py\n    es = ft.EntitySet(id=\"data\")\n    ```", "```py\n    es = es.add_dataframe(\n        dataframe=df,\n        dataframe_name=»data»,\n        index=\"rows\",\n        make_index=True,\n        time_index=»invoice_date»,\n        logical_types={«customer_id»: Categorical},\n    )\n    ```", "```py\n    es.normalize_dataframe(\n        base_dataframe_name=»data»,\n        new_dataframe_name=»invoices»,\n        index=\"invoice\",\n        copy_columns=[«customer_id»],\n    )\n    ```", "```py\n    is_bank_hol = IsFederalHoliday(country=\"UK\")\n    ```", "```py\n    hols = is_bank_hol.holidayUtil.federal_holidays.values()\n    available_hols = list(set(hols))\n    ```", "```py\n    ['May Day',\n     'Good Friday',\n     'Wedding of William and Catherine',\n     'Coronation of Charles III',\n     'Christmas Day',\n     'Wedding of Charles and Diana',\n     'Christmas Day (observed)',\n     'State Funeral of Queen Elizabeth II',\n     'Silver Jubilee of Elizabeth II',\n     'Spring Bank Holiday',\n     'Diamond Jubilee of Elizabeth II',\n     'Boxing Day (observed)',\n     'Platinum Jubilee of Elizabeth II',\n     \"New Year's Day (observed)\",\n     'Boxing Day',\n     'Golden Jubilee of Elizabeth II',\n     'Millennium Celebrations',\n     \"New Year's Day\"]\n    ```", "```py\n    days_to_boxing = DistanceToHoliday(\n        holiday=\"Boxing Day\", country=\"UK\")\n    ```", "```py\n    date_primitives = [\n        \"day\", \"year\", \"month\", \"weekday\",\n        \"days_in_month\", \"part_of_day\",\n        \"hour\", \"minute\",\n        is_bank_hol,\n        days_to_boxing\n    ]\n    ```", "```py\n    feature_matrix, feature_defs = ft.dfs(\n        entityset=es,\n        target_dataframe_name=»invoices»,\n        agg_primitives=[],\n        trans_primitives=date_primitives,\n    )\n    ```", "```py\n    feature_defs\n    ```", "```py\n    [<Feature: customer_id>,\n    <Feature: DAY(first_data_time)>,\n    <Feature: DAYS_IN_MONTH(first_data_time)>,\n    <Feature: DISTANCE_TO_HOLIDAY(\n         first_data_time, holiday=Boxing Day, country=UK)>,\n    <Feature: HOUR(first_data_time)>,\n    <Feature: IS_FEDERAL_HOLIDAY(\n         first_data_time, , country=UK)>,\n    <Feature: MINUTE(first_data_time)>,\n    <Feature: MONTH(first_data_time)>,\n    <Feature: PART_OF_DAY(first_data_time)>,\n    <Feature: WEEKDAY(first_data_time)>,\n    feature_matrix.head() to take a look at the resulting DataFrame with the features created from the invoice date. The DataFrame is quite big, so for reasons of space, we’ll only display a few columns in the book.\n    ```", "```py\n    columns = [\n        \"DISTANCE_TO_HOLIDAY(first_data_time,\n            holiday=Boxing Day, country=UK)\",\n        \"HOUR(first_data_time)\",\n        \"IS_FEDERAL_HOLIDAY(first_data_time,\n            country=UK)\",\n    ]\n    feature_matrix[columns].head()\n    ```", "```py\npip install nlp_primitives\n```", "```py\nconda install -c conda-forge nlp-primitives\n```", "```py\n    import pandas as pd\n    import featuretools as ft\n    from woodwork.logical_types import (\n       Categorical, NaturalLanguage)\n    ```", "```py\n    df = pd.read_csv(\n        «retail.csv», parse_dates=[«invoice_date»])\n    ```", "```py\n    es = ft.EntitySet(id=\"data\")\n    ```", "```py\n    es = es.add_dataframe(\n        dataframe=df,\n        dataframe_name=»data»,\n        index=\"rows\",\n        make_index=True,\n        time_index=»invoice_date»,\n        logical_types={\n            «customer_id»: Categorical,\n            \"invoice\": Categorical,\n            «description»: NaturalLanguage,\n        }\n    )\n    ```", "```py\n    es.normalize_dataframe(\n        base_dataframe_name=»data»,\n        new_dataframe_name=»invoices»,\n        index=\"invoice\",\n        copy_columns=[«customer_id»],\n    )\n    ```", "```py\n    text_primitives = [\n        \"num_words\",\n        \"num_characters\",\n        \"MeanCharactersPerWord\" ,\n        \"PunctuationCount\"]\n    ```", "```py\n    feature_matrix, feature_defs = ft.dfs(\n        entityset=es,\n        target_dataframe_name=»data»,\n        agg_primitives=[],\n        trans_primitives=text_primitives,\n        ignore_dataframes=[«invoices»],\n    )\n    ```", "```py\n    feature_defs\n    ```", "```py\n    [<Feature: customer_id>,\n    <Feature: invoice>,\n    <Feature: stock_code>,\n    <Feature: quantity>,\n    <Feature: price>,\n    <Feature: MEAN_CHARACTERS_PER_WORD(description)>,\n    <Feature: NUM_CHARACTERS(description)>,\n    <Feature: NUM_WORDS(description)>,\n    feature_matrix.head().\n    ```", "```py\n    text_f = [\n         \"NUM_CHARACTERS(description)\",\n         \"NUM_WORDS(description)\",\n         \"PUNCTUATION_COUNT(description)\",\n    ]\n    feature_matrix[text_f].head()\n    ```", "```py\n    import pandas as pd\n    import featuretools as ft\n    from woodwork.logical_types import (\n        Categorical, NaturalLanguage)\n    ```", "```py\n    df = pd.read_csv(\n        «retail.csv», parse_dates=[«invoice_date»])\n    ```", "```py\n    es = ft.EntitySet(id=\"data\")\n    ```", "```py\n    es = es.add_dataframe(\n        dataframe=df,\n        dataframe_name=»data»,\n        index=\"rows\",\n        make_index=True,\n        time_index=»invoice_date»,\n        logical_types={\n            «customer_id»: Categorical,\n            «description»: NaturalLanguage,\n        }\n    )\n    ```", "```py\n    es.normalize_dataframe(\n        base_dataframe_name=»data»,\n        new_dataframe_name=»invoices»,\n        index=\"invoice\",\n        copy_columns=[«customer_id»],\n    )\n    ```", "```py\n    es.normalize_dataframe(\n        base_dataframe_name=»invoices»,\n        new_dataframe_name=»customers»,\n        index=»customer_id»,\n    )\n    ```", "```py\n    agg_primitives = [\"mean\", \"max\", \"min\", \"sum\"]\n    ```", "```py\n    feature_matrix, feature_defs = ft.dfs(\n        entityset=es,\n        target_dataframe_name=»customers»,\n        agg_primitives=agg_primitives,\n        trans_primitives=[],\n    )\n    ```", "```py\n    feature_defs\n    ```", "```py\n    [<Feature: MAX(data.price)>,\n    <Feature: MAX(data.quantity)>,\n    <Feature: MEAN(data.price)>,\n    <Feature: MEAN(data.quantity)>,\n    <Feature: MIN(data.price)>,\n    <Feature: MIN(data.quantity)>,\n    <Feature: SUM(data.price)>,\n    <Feature: SUM(data.quantity)>,\n    <Feature: MAX(invoices.MEAN(data.price))>,\n    <Feature: MAX(invoices.MEAN(data.quantity))>,\n    <Feature: MAX(invoices.MIN(data.price))>,\n    <Feature: MAX(invoices.MIN(data.quantity))>,\n    <Feature: MAX(invoices.SUM(data.price))>,\n    <Feature: MAX(invoices.SUM(data.quantity))>,\n    <Feature: MEAN(invoices.MAX(data.price))>,\n    <Feature: MEAN(invoices.MAX(data.quantity))>,\n    <Feature: MEAN(invoices.MEAN(data.price))>,\n    <Feature: MEAN(invoices.MEAN(data.quantity))>,\n    <Feature: MEAN(invoices.MIN(data.price))>,\n    <Feature: MEAN(invoices.MIN(data.quantity))>,\n    <Feature: MEAN(invoices.SUM(data.price))>,\n    <Feature: MEAN(invoices.SUM(data.quantity))>,\n    <Feature: MIN(invoices.MAX(data.price))>,\n    <Feature: MIN(invoices.MAX(data.quantity))>,\n    <Feature: MIN(invoices.MEAN(data.price))>,\n    <Feature: MIN(invoices.MEAN(data.quantity))>,\n    <Feature: MIN(invoices.SUM(data.price))>,\n    <Feature: MIN(invoices.SUM(data.quantity))>,\n    <Feature: SUM(invoices.MAX(data.price))>,\n    <Feature: SUM(invoices.MAX(data.quantity))>,\n    <Feature: SUM(invoices.MEAN(data.price))>,\n    <Feature: SUM(invoices.MEAN(data.quantity))>,\n    <Feature: SUM(invoices.MIN(data.price))>,\n    <Feature: SUM(invoices.MIN(data.quantity))>]\n    ```", "```py\n    feature_matrix.head()\n    ```", "```py\n    trans_primitives = [\"month\", \"weekday\", \"num_words\"]\n    ```", "```py\n    agg_primitives = [\"mean\"]\n    ```", "```py\n    feature_matrix, feature_defs = ft.dfs(\n        entityset=es,\n        target_dataframe_name=»customers»,\n        agg_primitives=agg_primitives,\n        trans_primitives=trans_primitives,\n        max_depth=3,\n    )\n    ```", "```py\n    feature_defs\n    ```", "```py\n    [<Feature: MEAN(data.price)>,\n    <Feature: MEAN(data.quantity)>,\n    <Feature: MONTH(first_invoices_time)>,\n    <Feature: WEEKDAY(first_invoices_time)>,\n    <Feature: MEAN(invoices.MEAN(data.price))>,\n    <Feature: MEAN(invoices.MEAN(data.quantity))>,\n    <Feature: MEAN(data.NUM_WORDS(description))>,\n    <Feature: MEAN(invoices.MEAN(data.NUM_\n        WORDS(description)))>] WORDS(description)))>]\n    ```"]