["```py\n\ndjango-admin startproject server_movierecsys\n\n```", "```py\n\npython manage.py startapp books_recsys_app\n\n```", "```py\nINSTALLED_APPS = (\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'rest_framework',\n    'rest_framework_swagger',\n    'books_recsys_app',\n)\n\nTEMPLATE_DIRS = (\n    os.path.join(BASE_DIR, 'templates'),\n)\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = ( os.path.join(BASE_DIR, \"static\"), )\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n```", "```py\nCACHES = {\n    'default': {\n        'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',\n        'LOCATION': '/var/tmp/django_cache',\n        'TIMEOUT': None,\n    }\n}\n```", "```py\n\npython manage.py createsuperuser (admin/admin)\n\n```", "```py\n\npython manage.py runserver\n\n```", "```py\nclass UserProfile(models.Model):\n    user = models.ForeignKey(User, unique=True)\n    array = jsonfield.JSONField()\n    arrayratedmoviesindxs = jsonfield.JSONField()\n    lastrecs = jsonfield.JSONField()\n\n    def __unicode__(self):\n            return self.user.username\n\n    def save(self, *args, **kwargs):\n        create = kwargs.pop('create', None)\n        recsvec = kwargs.pop('recsvec', None)\n        print 'create:',create\n        if create==True:\n            super(UserProfile, self).save(*args, **kwargs)\n        elif recsvec!=None:\n             self.lastrecs = json.dumps(recsvec.tolist())\n             super(UserProfile, self).save(*args, **kwargs)\n        else:\n            nmovies = MovieData.objects.count()\n            array = np.zeros(nmovies)\n            ratedmovies = self.ratedmovies.all()\n            self.arrayratedmoviesindxs = json.dumps([m.movieindx for m in ratedmovies])\n            for m in ratedmovies:\n                array[m.movieindx] = m.value\n            self.array = json.dumps(array.tolist())\n            super(UserProfile, self).save(*args, **kwargs)\n\nclass MovieRated(models.Model):\n    user = models.ForeignKey(UserProfile, related_name='ratedmovies')\n    movie = models.CharField(max_length=100)\n    movieindx = models.IntegerField(default=-1)\n    value = models.IntegerField()\n\nclass MovieData(models.Model):\n    title = models.CharField(max_length=100)\n    array = jsonfield.JSONField()\n    ndim = models.IntegerField(default=300)\n    description = models.TextField()\n```", "```py\n\npython manage.py makemigrations\n\npython manage.py migrate\n\n```", "```py\nfrom django.core.management.base import BaseCommand\nimport os\nimport optparse\nimport numpy as np\nimport json\nimport pandas as pd\nimport requests\nclass Command(BaseCommand):\n\n    option_list = BaseCommand.option_list + (\n            optparse.make_option('-i', '--input', dest='umatrixfile',\n                                 type='string', action='store',\n                                 help=('Input utility matrix')),   \n            optparse.make_option('-o', '--outputplots', dest='plotsfile',\n                                 type='string', action='store',\n                                 help=('output file')),  \n            optparse.make_option('--om', '--outputumatrix', dest='umatrixoutfile',\n                                 type='string', action='store',\n                                 help=('output file')),            \n        )\n\n    def getplotfromomdb(self,col,df_moviesplots,df_movies,df_utilitymatrix):\n        string = col.split(';')[0]\n\n        title=string[:-6].strip()\n        year = string[-5:-1]      \n        plot = ' '.join(title.split(' ')).encode('ascii','ignore')+'. '\n\n        url = \"http://www.omdbapi.com/?t=\"+title+\"&y=\"+year+\"&plot=full&r=json\"\n\n        headers={\"User-Agent\": \"Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/37.0.2049.0 Safari/537.36\"}\n        r = requests.get(url,headers=headers)\n        jsondata =  json.loads(r.content)\n        if 'Plot' in jsondata:\n            #store plot + title\n            plot += jsondata['Plot'].encode('ascii','ignore')\n\n        if plot!=None and plot!='' and plot!=np.nan and len(plot)>3:#at least 3 letters to consider the movie\n            df_moviesplots.loc[len(df_moviesplots)]=[string,plot]\n            df_utilitymatrix[col] = df_movies[col]\n            print len(df_utilitymatrix.columns)\n\n        return df_moviesplots,df_utilitymatrix\n\n    def handle(self, *args, **options):\n        pathutilitymatrix = options['umatrixfile']\n        df_movies = pd.read_csv(pathutilitymatrix)\n        movieslist = list(df_movies.columns[1:])\n\n        df_moviesplots = pd.DataFrame(columns=['title','plot'])\n        df_utilitymatrix = pd.DataFrame()\n        df_utilitymatrix['user'] = df_movies['user']\n\n        for m in movieslist[:]:\n            df_moviesplots,df_utilitymatrix=self.getplotfromomdb(m,df_moviesplots,df_movies,df_utilitymatrix)\n\n        outputfile = options['plotsfile']\n        df_moviesplots.to_csv(outputfile, index=False)\n        outumatrixfile = options['umatrixoutfile']\n        df_utilitymatrix.to_csv(outumatrixfile, index=False)\n```", "```py\n\npython manage.py --input=utilitymatrix.csv --outputplots=plots.csv â€“outputumatrix='umatrix.csv'\n\n```", "```py\nfrom django.core.management.base import BaseCommand\nimport os\nimport optparse\nimport numpy as np\nimport pandas as pd\nimport math\nimport json\nimport copy\nfrom BeautifulSoup import BeautifulSoup\nimport nltk\nfrom nltk.corpus import stopwords\nfrom nltk.tokenize import WordPunctTokenizer\ntknzr = WordPunctTokenizer()\n#nltk.download('stopwords')\nstoplist = stopwords.words('english')\nfrom nltk.stem.porter import PorterStemmer\nstemmer = PorterStemmer()\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom books_recsys_app.models import MovieData\nfrom django.core.cache import cache\n\nclass Command(BaseCommand):\n\n    option_list = BaseCommand.option_list + (\n            optparse.make_option('-i', '--input', dest='input',\n                                 type='string', action='store',\n                                 help=('Input plots file')),\n            optparse.make_option('--nmaxwords', '--nmaxwords', dest='nmaxwords',\n                                 type='int', action='store',\n                                 help=('nmaxwords')),\n            optparse.make_option('--umatrixfile', '--umatrixfile', dest='umatrixfile',\n                                 type='string', action='store',\n                                 help=('umatrixfile')), \n        )\n\n    def PreprocessTfidf(self,texts,stoplist=[],stem=False):\n        newtexts = []\n        for i in xrange(len(texts)):\n            text = texts[i]\n            if stem:\n               tmp = [w for w in tknzr.tokenize(text) if w not in stoplist]\n            else:\n               tmp = [stemmer.stem(w) for w in [w for w in tknzr.tokenize(text) if w not in stoplist]]\n            newtexts.append(' '.join(tmp))\n        return newtexts\n\n    def handle(self, *args, **options):\n        input_file = options['input']\n\n        df = pd.read_csv(input_file)\n        tot_textplots = df['plot'].tolist()\n        tot_titles = df['title'].tolist()\n        nmaxwords=options['nmaxwords']\n        vectorizer = TfidfVectorizer(min_df=0,max_features=nmaxwords)\n        processed_plots = self.PreprocessTfidf(tot_textplots,stoplist,True)\n        mod_tfidf = vectorizer.fit(processed_plots)\n        vec_tfidf = mod_tfidf.transform(processed_plots)\n        ndims = len(mod_tfidf.get_feature_names())\n        nmovies = len(tot_titles[:])\n\n        #delete all data\n        MovieData.objects.all().delete()\n\n        matr = np.empty([1,ndims])\n        titles = []\n        cnt=0\n        for m in xrange(nmovies):\n            moviedata = MovieData()\n            moviedata.title=tot_titles[m]\n            moviedata.description=tot_textplots[m]\n            moviedata.ndim= ndims\n            moviedata.array=json.dumps(vec_tfidf[m].toarray()[0].tolist())\n            moviedata.save()\n            newrow = moviedata.array\n            if cnt==0:\n                matr[0]=newrow\n            else:\n                matr = np.vstack([matr, newrow])\n            titles.append(moviedata.title)\n            cnt+=1\n        #cached\n        cache.set('data', matr)\n        cache.set('titles', titles)\n        cache.set('model',mod_tfidf)\n\n        #load the utility matrix\n        umatrixfile = options['umatrixfile']\n        df_umatrix = pd.read_csv(umatrixfile)\n        Umatrix = df_umatrix.values[:,1:]\n        cache.set('umatrix',Umatrix)\n        #load rec methods... \n        cf_itembased = CF_itembased(Umatrix)\n        cache.set('cf_itembased',cf_itembased)\n        llr = LogLikelihood(Umatrix,titles)\n        cache.set('loglikelihood',llr)\n\nfrom scipy.stats import pearsonr\nfrom scipy.spatial.distance import cosine \ndef sim(x,y,metric='cos'):\n    if metric == 'cos':\n       return 1.-cosine(x,y)\n    else:#correlation\n       return pearsonr(x,y)[0]\n\nclass CF_itembased(object):\n...        \nclass LogLikelihood(object):\n...\n```", "```py\n\npython manage.py load_data --input=plots.csv --nmaxwords=30000  --umatrixfile=umatrix.csv\n\n```", "```py\nfrom django.core.cache import cache\n...\ncache.set('model',mod_tfidf)\ncache.set('data', matr)\ncache.set('titles', titles)\n```", "```py\ncache.set('umatrix',Umatrix)\n   cache.set('cf_itembased',cf_itembased)\n   cache.set('loglikelihood',llr)\n```", "```py\n                <form class=\"navbar-search pull-right\" action=\"{% url 'auth' %}\" method=\"GET\">\n                  {% csrf_token %}\n                   <div style=\"overflow: hidden; padding-right: .5em;\">\n                     <input type=\"submit\" name=\"auth_method\" value=\"sign up\" size=\"30\" style=\"float: right\" />\n                     <input type=\"submit\" name=\"auth_method\" value=\"sign in\" size=\"30\" style=\"float: right\" />\n                    </div>\n                </form>\n```", "```py\n    url(r'^auth/', 'books_recsys_app.views.auth', name='auth')\n```", "```py\ndef auth(request):\n    if request.method == 'GET':\n        data = request.GET\n        auth_method = data.get('auth_method')\n        if auth_method=='sign in':\n           return render_to_response(\n               'books_recsys_app/signin.html', RequestContext(request, {})) \n        else:    \n            return render_to_response(\n                'books_recsys_app/createuser.html', RequestContext(request, {}))\n    elif request.method == 'POST':\n        post_data = request.POST\n        name = post_data.get('name', None)\n        pwd = post_data.get('pwd', None)\n        pwd1 = post_data.get('pwd1', None)\n        create = post_data.get('create', None)#hidden input\n        if name and pwd and create:\n           if User.objects.filter(username=name).exists() or pwd!=pwd1:\n               return render_to_response(\n                   'books_recsys_app/userexistsorproblem.html', RequestContext(request))\n           user = User.objects.create_user(username=name,password=pwd)\n           uprofile = UserProfile()\n           uprofile.user = user\n           uprofile.name = user.username\n           uprofile.save(create=True)\n\n           user = authenticate(username=name, password=pwd)\n           login(request, user)\n           return render_to_response(\n               'books_recsys_app/home.html', RequestContext(request))\n        elif name and pwd:\n            user = authenticate(username=name, password=pwd)\n            if user:\n                login(request, user)\n                return render_to_response(\n                    'books_recsys_app/home.html', RequestContext(request))\n            else:\n                #notfound\n                return render_to_response(\n                    'books_recsys_app/nopersonfound.html', \n                       RequestContext(request))\n```", "```py\nuser = User.objects.create_user(username=name,password=pwd)\nuprofile = UserProfile()\nuprofile.user = user\nuprofile.save(create=True)\nuser = authenticate(username=name, password=pwd)\n```", "```py\nfrom django.contrib.auth import authenticate, login\n...\nlogin(request, user)\n```", "```py\nurl(r'^signout/','books_recsys_app.views.signout',name='signout')\n```", "```py\nfrom django.contrib.auth import logout\nâ€¦\ndef signout(request):\n    logout(request)\n    return render_to_response(\n        'books_recsys_app/home.html', RequestContext(request))  \n```", "```py\ndef home(request):\n    context={}\n    if request.method == 'POST':\n        post_data = request.POST\n        data = {}\n        data = post_data.get('data', None)\n        if data:\n            return redirect('%s?%s' % (reverse('books_recsys_app.views.home'),\n                                urllib.urlencode({'q': data})))\n    elif request.method == 'GET':\n        get_data = request.GET\n        data = get_data.get('q',None)\n        titles = cache.get('titles')\n        if titles==None:\n            print 'load data...'\n            texts = []\n            mobjs = MovieData.objects.all()\n            ndim = mobjs[0].ndim\n            matr = np.empty([1,ndim])\n            titles_list = []\n            cnt=0\n            for obj in mobjs[:]:\n                texts.append(obj.description)\n                newrow = np.array(obj.array)\n                #print 'enw:',newrow\n                if cnt==0:\n                    matr[0]=newrow\n                else:\n                    matr = np.vstack([matr, newrow])\n                titles_list.append(obj.title)\n                cnt+=1\n            vectorizer = TfidfVectorizer(min_df=1,max_features=ndim) \n            processedtexts = PreprocessTfidf(texts,stoplist,True)\n            model = vectorizer.fit(processedtexts)\n            cache.set('model',model)\n            #cache.set('processedtexts',processedtexts)\n            cache.set('data', matr)\n            cache.set('titles', titles_list)\n        else:\n            print 'loaded',str(len(titles))\n\n        Umatrix = cache.get('umatrix')\n        if Umatrix==None:\n            df_umatrix = pd.read_csv(umatrixpath)\n            Umatrix = df_umatrix.values[:,1:]\n            cache.set('umatrix',Umatrix)\n            cf_itembased = CF_itembased(Umatrix)\n            cache.set('cf_itembased',cf_itembased)\n            cache.set('loglikelihood',LogLikelihood(Umatrix,movieslist))\n\n        if not data:\n            return render_to_response(\n                'books_recsys_app/home.html', RequestContext(request, context))\n\n        #load all movies vectors/titles\n        matr = cache.get('data')\n        titles = cache.get('titles')\n        model_tfidf = cache.get('model')\n        #find movies similar to the query\n        queryvec = model_tfidf.transform([data.lower().encode('ascii','ignore')]).toarray()     \n        sims= cosine_similarity(queryvec,matr)[0]\n        indxs_sims = list(sims.argsort()[::-1])\n        titles_query = list(np.array(titles)[indxs_sims][:nmoviesperquery])\n\n        context['movies']= zip(titles_query,indxs_sims[:nmoviesperquery])\n        context['rates']=[1,2,3,4,5]\n        return render_to_response(\n            'books_recsys_app/query_results.html', \n              RequestContext(request, context))\n```", "```py\n        matr = cache.get('data')\n        titles = cache.get('titles')\n        model_tfidf = cache.get('model')\n```", "```py\ndef rate_movie(request):\n    data = request.GET\n    rate = data.get(\"vote\")\n    movies,moviesindxs = zip(*literal_eval(data.get(\"movies\")))\n    movie = data.get(\"movie\")\n    movieindx = int(data.get(\"movieindx\"))\n    #save movie rate\n    userprofile = None\n    if request.user.is_superuser:\n        return render_to_response(\n            'books_recsys_app/superusersignin.html', RequestContext(request))\n    elif request.user.is_authenticated() :\n        userprofile = UserProfile.objects.get(user=request.user)\n    else:\n        return render_to_response(\n            'books_recsys_app/pleasesignin.html', RequestContext(request))\n\n    if MovieRated.objects.filter(movie=movie).filter(user=userprofile).exists():\n        mr = MovieRated.objects.get(movie=movie,user=userprofile)\n        mr.value = int(rate)\n        mr.save()\n    else:\n        mr = MovieRated()\n        mr.user = userprofile\n        mr.value = int(rate)\n        mr.movie = movie\n        mr.movieindx = movieindx\n        mr.save()\n\n    userprofile.save()\n    #get back the remaining movies\n    movies = RemoveFromList(movies,movie)\n    moviesindxs = RemoveFromList(moviesindxs,movieindx)\n    print movies\n    context = {}\n    context[\"movies\"] = zip(movies,moviesindxs)\n    context[\"rates\"] = [1,2,3,4,5]\n    return render_to_response(\n        'books_recsys_app/query_results.html', \n          RequestContext(request, context))\n```", "```py\nnminimumrates=5\nnumrecs=5\nrecmethod = 'loglikelihood'\n```", "```py\ndef movies_recs(request):\n\n    userprofile = None\n    if request.user.is_superuser:\n        return render_to_response(\n            'books_recsys_app/superusersignin.html', RequestContext(request))\n    elif request.user.is_authenticated():\n        userprofile = UserProfile.objects.get(user=request.user)\n    else:\n        return render_to_response(\n            'books_recsys_app/pleasesignin.html', RequestContext(request))\n    ratedmovies=userprofile.ratedmovies.all()\n    context = {}\n    if len(ratedmovies)<nminimumrates:\n        context['nrates'] = len(ratedmovies)\n        context['nminimumrates']=nminimumrates\n        return render_to_response(\n            'books_recsys_app/underminimum.html', RequestContext(request, context))\n\n    u_vec = np.array(userprofile.array)\n    Umatrix = cache.get('umatrix')\n    movieslist = cache.get('titles')\n    #recommendation...\n    u_rec = None\n    if recmethod == 'cf_userbased':\n        u_rec = CF_userbased(u_vec,numrecs,Umatrix)      \n    elif recmethod == 'cf_itembased':\n        cf_itembased = cache.get('cf_itembased')\n        if cf_itembased == None:\n            cf_itembased = CF_itembased(Umatrix)\n        u_rec = cf_itembased.CalcRatings(u_vec,numrecs)        \n    elif recmethod == 'loglikelihood':\n        llr = cache.get('loglikelihood')\n        if llr == None:\n            llr = LogLikelihood(Umatrix,movieslist)\n        u_rec = llr.GetRecItems(u_vec,True)\n    #save last recs\n    userprofile.save(recsvec=u_rec)\n    context['recs'] = list(np.array(movieslist)[list(u_rec)][:numrecs])\n    return render_to_response(\n        'books_recsys_app/recommendations.html', \n          RequestContext(request, context))\n```", "```py\nfrom django.contrib import admin\nfrom books_recsys_app.models import MovieData,UserProfile\n\nclass MoviesAdmin(admin.ModelAdmin):\n      list_display = ['title', 'description']\n\nadmin.site.register(UserProfile)\nadmin.site.register(MovieData,MoviesAdmin)\n```", "```py\nurl(r'^admin/', include(admin.site.urls))\n```", "```py\nfrom books_recsys_app.models import UserProfile\nfrom rest_framework import serializers\n\nclass UsersSerializer(serializers.HyperlinkedModelSerializer):\n    class Meta:\n        model = UserProfile\n        fields = ('name', 'arrayratedmoviesindxs','lastrecs')\n```", "```py\nfrom rest_framework import generics\nfrom rest_framework.permissions import AllowAny\nfrom rest_framework.pagination import PageNumberPagination\nfrom books_recsys_app.serializers import UsersSerializer\nfrom books_recsys_app.models import UserProfile\n\nclass LargeResultsSetPagination(PageNumberPagination):\n    page_size = 1000\n    page_size_query_param = 'page_size'\n    max_page_size = 10000\n\nclass UsersList(generics.ListAPIView):\n\n    serializer_class = UsersSerializer\n    permission_classes = (AllowAny,)\n    pagination_class = LargeResultsSetPagination\n\n    def get_queryset(self):\n        query = self.request.query_params.get\n        if query('name'):\n           return UserProfile.objects.filter(name=query('name')) \n        else:\n           return UserProfile.objects.all()\n```", "```py\nurl(r'^users-list/',UsersList.as_view(),name='users-list')\n```", "```py\n\ncurl -X GET localhost:8000/users-list/\n\n```"]