["```py\n16,1,1,0,20,38,1,1,1\n23,1,1,1,17,36,0,1,0\n6,1,1,0,10,30,1,0,1\n4,0,1,0,6,26,1,0,1\n14,0,0,0,4,27,1,0,1\n24,1,1,1,14,30,1,0,1\n5,1,1,0,8,31,0,1,1\n12,1,1,0,20,50,0,1,1\n12,1,1,0,12,50,1,0,1\n6,1,1,0,10,52,0,1,1\n```", "```py\nusing System;\nusing System.Linq;\n\nnamespace chapter03.Common\n{\n    public static class ExtensionMethods\n    {\n        public static string[] ToPropertyList<T>(this Type objType, string labelName) =>                     objType.GetProperties().Where(a => a.Name != labelName).Select(a =>                             a.Name).ToArray();\n    }\n}\n```", "```py\nusing Microsoft.ML.Data;\n\nnamespace chapter03.ML.Objects\n{\n    public class EmploymentHistory\n    {\n        [LoadColumn(0)]\n        public float DurationInMonths { get; set; }\n\n        [LoadColumn(1)]\n        public float IsMarried { get; set; }\n\n        [LoadColumn(2)]\n        public float BSDegree { get; set; }\n\n        [LoadColumn(3)]\n        public float MSDegree { get; set; }\n\n        [LoadColumn(4)]\n        public float YearsExperience { get; set; }\n\n        [LoadColumn(5)]\n        public float AgeAtHire { get; set; }\n\n        [LoadColumn(6)]\n        public float HasKids { get; set; }\n\n        [LoadColumn(7)]\n        public float WithinMonthOfVesting { get; set; }\n\n        [LoadColumn(8)]\n        public float DeskDecorations { get; set; }\n\n        [LoadColumn(9)]\n        public float LongCommute { get; set; }\n    }\n}\n```", "```py\nusing Microsoft.ML.Data;\n\nnamespace chapter03.ML.Objects\n{\n    public class EmploymentHistoryPrediction\n    {\n        [ColumnName(\"Score\")]\n        public float DurationInMonths;\n    }\n}\n```", "```py\nif (!File.Exists(inputDataFile))\n{\n    Console.WriteLine($\"Failed to find input data at {inputDataFile}\");\n\n    return;\n}\n```", "```py\nvar predictionEngine = MlContext.Model.CreatePredictionEngine<EmploymentHistory, EmploymentHistoryPrediction>(mlModel);\n```", "```py\nvar json = File.ReadAllText(inputDataFile);\n\nvar prediction = predictionEngine.Predict(JsonConvert.DeserializeObject<EmploymentHistory>(json));\n```", "```py\nConsole.WriteLine(\n $\"Based on input json:{System.Environment.NewLine}\" +\n $\"{json}{System.Environment.NewLine}\" + \n $\"The employee is predicted to work {prediction.DurationInMonths:#.##} months\");\n```", "```py\nvar trainingDataView = MlContext.Data.LoadFromTextFile<EmploymentHistory>(trainingFileName, ',');\n```", "```py\nvar dataProcessPipeline = MlContext.Transforms.CopyColumns(\"Label\", nameof(EmploymentHistory.DurationInMonths))\n .Append(MlContext.Transforms.NormalizeMeanVariance(nameof(EmploymentHistory.IsMarried)))\n .Append(MlContext.Transforms.NormalizeMeanVariance(nameof(EmploymentHistory.BSDegree)))\n .Append(MlContext.Transforms.NormalizeMeanVariance(nameof(EmploymentHistory.MSDegree)))\n .Append(MlContext.Transforms.NormalizeMeanVariance(nameof(EmploymentHistory.YearsExperience))\n .Append(MlContext.Transforms.NormalizeMeanVariance(nameof(EmploymentHistory.AgeAtHire)))\n .Append(MlContext.Transforms.NormalizeMeanVariance(nameof(EmploymentHistory.HasKids)))\n .Append(MlContext.Transforms.NormalizeMeanVariance(nameof(EmploymentHistory.WithinMonthOfVesting)))\n .Append(MlContext.Transforms.NormalizeMeanVariance(nameof(EmploymentHistory.DeskDecorations)))\n .Append(MlContext.Transforms.NormalizeMeanVariance(nameof(EmploymentHistory.LongCommute)))\n .Append(MlContext.Transforms.Concatenate(\"Features\",\n typeof(EmploymentHistory).ToPropertyList<EmploymentHistory>(nameof(EmploymentHistory.DurationInMonths)))));\n```", "```py\nvar trainer = MlContext.Regression.Trainers.Sdca(labelColumnName: \"Label\", featureColumnName: \"Features\");\n```", "```py\nvar modelMetrics = MlContext.Regression.Evaluate(testSetTransform);\n\nConsole.WriteLine($\"Loss Function: {modelMetrics.LossFunction:0.##}{Environment.NewLine}\" +\n $\"Mean Absolute Error: {modelMetrics.MeanAbsoluteError:#.##}{Environment.NewLine}\" +\n $\"Mean Squared Error: {modelMetrics.MeanSquaredError:#.##}{Environment.NewLine}\" +\n $\"RSquared: {modelMetrics.RSquared:0.##}{Environment.NewLine}\" +\n $\"Root Mean Squared Error: {modelMetrics.RootMeanSquaredError:#.##}\");\n```", "```py\nif (args.Length != 2)\n{\n    Console.WriteLine($\"Invalid arguments passed in, exiting.{Environment.NewLine}                    {Environment.NewLine}Usage:{Environment.NewLine}\" +\n        $\"predict <path to input json file>{Environment.NewLine}\" +\n        $\"or {Environment.NewLine}\" +\n        $\"train <path to training data file>{Environment.NewLine}\");\n\n        return;\n}\n```", "```py\nPS chapter03\\bin\\Debug\\netcoreapp3.0> .\\chapter03.exe train ..\\..\\..\\Data\\sampledata.csv \nLoss Function: 324.71\nMean Absolute Error: 12.68\nMean Squared Error: 324.71\nRSquared: 0.14\nRoot Mean Squared Error: 18.02\n```", "```py\n{\n  \"durationInMonths\": 0.0,\n  \"isMarried\": 0,\n  \"bsDegree\": 1,\n  \"msDegree\": 1,\n  \"yearsExperience\": 2,\n  \"ageAtHire\": 29,\n  \"hasKids\": 0,\n  \"withinMonthOfVesting\": 0,\n  \"deskDecorations\": 1,\n  \"longCommute\": 1\n}\n```", "```py\nPS chapter03\\bin\\Debug\\netcoreapp3.0> .\\chapter03.exe predict input.json \nBased on input json:\n{\n \"durationInMonths\": 0.0,\n \"isMarried\": 0,\n \"bsDegree\": 1,\n \"msDegree\": 1,\n \"yearsExperience\": 2,\n \"ageAtHire\": 29,\n \"hasKids\": 0,\n \"withinMonthOfVesting\": 0,\n \"deskDecorations\": 1,\n \"longCommute\": 1\n}\n\nThe employee is predicted to work 22.82 months\n```", "```py\nFalse !This program cannot be run in DOS mode.L$ SUVWH\\$ UVWAVAWH\\$ VWAVHWATAUAVAWHA_AA]A\\_l$ VWAVHt\nFalse !This program cannot be run in DOS mode.L$ SUVWH\\$ VWAVHUVWAVAWHUVWATAUAVAWHA_AA]A\\_]UVWAVAWHU\nFalse !This program cannot be run in DOS mode.$7ckw7ckw7ckw>jv$ckw7cjwiv6ckwRich7ckw9A98u6A9xx ATAVA\nFalse !This program cannot be run in DOS mode.EventSetInformationmshelp URL calledLaunchFwLink\"mshelp\nTrue !This program cannot be run in DOS mode.Fm;Ld &~_New_ptrt(M4_Alloc_max\"uJIif94H3\"j?TjV*?invalid\nTrue <</Length 17268/Type/EmbeddedFile/Filter/FlateDecode/Params<</ModDate(D:20191003012641+00'00'/Size\nTrue !This program cannot be run in DOS mode._New_ptr7(_MaskQAlloc_maxtEqx?$xjinvalid argumC:\\Program F\nTrue __gmon_startN_easy_cKcxa_amxBZNSt8ios_bEe4IeD1Evxxe6naDtqv_Z<4endlIcgLSaQ6appw3d_ResumeCXXABI_1.3%d\n```", "```py\nusing System;\nusing System.IO;\n\nusing chapter03_logistic_regression.Common;\nusing chapter03_logistic_regression.ML.Base;\n\nnamespace chapter03_logistic_regression.ML\n{\n    public class FeatureExtractor : BaseML\n    {\n        public void Extract(string folderPath)\n        {\n            var files = Directory.GetFiles(folderPath);\n\n            using (var streamWriter =\n                new StreamWriter(Path.Combine(AppContext.BaseDirectory, $\"../../../Data/{Constants.SAMPLE_DATA}\")))\n            {\n                foreach (var file in files)\n                {\n                    var strings = GetStrings(File.ReadAllBytes(file));\n\n                    streamWriter.WriteLine($\"{file.ToLower().Contains(\"malicious\")}\\t{strings}\");\n                }\n            }\n\n            Console.WriteLine($\"Extracted {files.Length} to {Constants.SAMPLE_DATA}\");\n        }\n    }\n}\n```", "```py\nusing Microsoft.ML.Data;\n\nnamespace chapter03_logistic_regression.ML.Objects\n{\n    public class FileInput\n    {\n        [LoadColumn(0)]\n        public bool Label { get; set; }\n\n        [LoadColumn(1)]\n        public string Strings { get; set; }\n    }\n}\n```", "```py\nusing Microsoft.ML.Data;\n\nnamespace chapter03_logistic_regression.ML.Objects\n{\n    public class FilePrediction\n    {\n        [ColumnName(\"PredictedLabel\")]\n        public bool IsMalicious { get; set; }\n\n        public float Probability { get; set; }\n\n        public float Score { get; set; }\n    }\n}\n```", "```py\nprivate static Regex _stringRex;\n\nprotected BaseML()\n{\n    MlContext = new MLContext(2020);\n\n    Encoding.RegisterProvider(CodePagesEncodingProvider.Instance);\n\n    _stringRex = new Regex(@\"[ -~\\t]{8,}\", RegexOptions.Compiled);\n}\n```", "```py\nprotected string GetStrings(byte[] data)\n{\n    var stringLines = new StringBuilder();\n```", "```py\nif (data == null || data.Length == 0)\n{\n    return stringLines.ToString();\n}\n```", "```py\n using (var ms = new MemoryStream(data, false))\n {\n     using (var streamReader = new StreamReader(ms, Encoding.GetEncoding(1252), false, 2048, false))\n     {\n```", "```py\nwhile (!streamReader.EndOfStream)\n{\n    var line = streamReader.ReadLine();\n```", "```py\nif (string.IsNullOrEmpty(line))\n{\n    continue;\n}\n\nline = line.Replace(\"^\", \"\").Replace(\")\", \"\").Replace(\"-\", \"\");\n```", "```py\nstringLines.Append(string.Join(string.Empty,\n                    _stringRex.Matches(line).Where(a => !string.IsNullOrEmpty(a.Value) && !string.IsNullOrWhiteSpace(a.Value)).ToList()));\n```", "```py\n    return string.Join(string.Empty, stringLines);\n}\n```", "```py\nvar predictionEngine = MlContext.Model.CreatePredictionEngine<FileInput, FilePrediction>(mlModel);\n```", "```py\nvar prediction = predictionEngine.Predict(new FileInput\n{\n    Strings = GetStrings(File.ReadAllBytes(inputDataFile))\n});\n```", "```py\nConsole.WriteLine(\n                    $\"Based on the file ({inputDataFile}) the file is classified as {(prediction.IsMalicious ? \"malicious\" : \"benign\")}\" + \n                    $\" at a confidence level of {prediction.Probability:P0}\");\n```", "```py\nvar dataProcessPipeline = MlContext.Transforms.CopyColumns(\"Label\", nameof(FileInput.Label))\n .Append(MlContext.Transforms.Text.FeaturizeText(\"NGrams\", nameof(FileInput.Strings)))\n .Append(MlContext.Transforms.Concatenate(\"Features\", \"NGrams\"));\n\nvar trainer = MlContext.BinaryClassification.Trainers.SdcaLogisticRegression(labelColumnName: \"Label\", featureColumnName: \"Features\");\n```", "```py\nif (args.Length != 2)\n{\n    Console.WriteLine($\"Invalid arguments passed in, exiting.{Environment.NewLine}{Environment.NewLine}Usage:{Environment.NewLine}\" +\n                      $\"predict <path to input file>{Environment.NewLine}\" +\n                      $\"or {Environment.NewLine}\" +\n                      $\"train <path to training data file>{Environment.NewLine}\" + \n                      $\"or {Environment.NewLine}\" +\n                      $\"extract <path to folder>{Environment.NewLine}\");\n\n    return;\n}\n```", "```py\nswitch (args[0])\n{\n    case \"extract\":\n        new FeatureExtractor().Extract(args[1]);\n        break;\n    case \"predict\":\n        new Predictor().Predict(args[1]);\n        break;\n    case \"train\":\n        new Trainer().Train(args[1]);\n        break;\n    default:\n        Console.WriteLine($\"{args[0]} is an invalid option\");\n        break;\n}\n```", "```py\nPS chapter03-logistic-regression\\bin\\Debug\\netcoreapp3.0> .\\chapter03-logistic-regression.exe extract temp_data                                                \nExtracted 8 to sampledata.csv\n```", "```py\nPS chapter03-logistic-regression\\bin\\Debug\\netcoreapp3.0> .\\chapter03-logistic-regression.exe train ..\\..\\..\\Data\\sampledata.csv\n```", "```py\nPS chapter03-logistic-regression\\bin\\Debug\\netcoreapp3.0> .\\chapter03-logistic-regression.exe predict .\\chapter03-logistic-regression.exe                      \nBased on the file (.\\chapter03-logistic-regression.exe) the file is classified as benign at a confidence level of 8%\n```"]