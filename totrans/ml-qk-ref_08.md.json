["```py\nimport pandas as pd\nimport numpy as np\n```", "```py\ntraindf= pd.read_csv(\"train.csv\")\ntestdf= pd.read_csv(\"test.csv\")\n```", "```py\nfor k in traindf.keys():\n print('{0}: {1}'.format(k, len(traindf[k].unique())))\n```", "```py\nfor k in traindf.keys():\n if len(traindf[k].unique())<=10:\n print(k)\n```", "```py\nimport math\ndef forAge(row):\n if row['Age'] < 10:\n    return '<10'\n elif math.isnan(row['Age']):\n    return \"nan\"\n else:\n    dec = str(int(row['Age']/10))\n    return \"{0}0's\".format(dec)\n decade=traindf.apply(forAge, axis=1)\n print(\"Decade: {1}\".format(k, len(decade.unique())))\n```", "```py\ndef preprocess(df):\n # create a dataframe with discrete variables (len<10)\n filt=[k for k in df.keys() if len(df[k].unique())<=10]\n filtr2=df[filt].copy()\n forAge = lambda row: int(row['Age']/10) if not math.isnan(row['Age']) else np.nan\n filtr2['Decade']=df.apply(forAge, axis=1)\n filtr2=filtr2.dropna()\n filtr2['Decade']=filtr2['Decade'].astype('int32')\n return filtr2\n```", "```py\nptraindf= preprocess(traindf)\nptestdf=preprocess(testdf)\n```", "```py\nptraindf.to_csv('post_train.csv', index=False)\nptestdf.to_csv( 'post_test.csv', index=False)\n\ndf=pd.read_csv('post_train.csv')\nfor k in df.keys():\n  print(\"{} : {}\".format(k, df[k].unique()))\n```", "```py\nimport pyAgrum as gum\nimport pyAgrum.lib.notebook as gnb\n```", "```py\ntemplate=gum.BayesNet()\ntemplate.add(gum.RangeVariable(\"Survived\", \"Survived\",0,1))\ntemplate.add(gum.RangeVariable(\"Pclass\", \"Pclass\",1,3))\ntemplate.add(gum.LabelizedVariable(\"Gender\", \"Gender\",0).addLabel(\"female\").addLabel(\"male\"))\ntemplate.add(gum.RangeVariable(\"SibSp\", \"SibSp\",0,8))\ntemplate.add(gum.RangeVariable(\"Parch\", \"Parch\",0,9))\ntemplate.add(gum.LabelizedVariable(\"Embarked\", \"Embarked\",0).addLabel('').addLabel('C').addLabel('Q').addLabel('S'))\ntemplate.add(gum.RangeVariable(\"Decade\", \"Calculated decade\", 0,9))\ngnb.showBN(template)\n```", "```py\nlearner = gum.BNLearner('post_train.csv', template)\nbn = learner.learnBN()\nbn\n```", "```py\ngnb.showInformation(bn,{},size=\"20\")\n```", "```py\ngnb.showInference(bn)\n```", "```py\ngnb.showPosterior(bn,evs={},target='Survived')\n```", "```py\ngnb.showPosterior(bn,evs={\"Gender\": \"male\", \"Decade\": 3},target='Survived')\n```", "```py\ngnb.showPosterior(bn,evs={\"Gender\": \"female\", \"Decade\": 8},target='Survived')\n```", "```py\nfrom pyAgrum.lib.bn2roc import showROC\n showROC(bn, 'post_train.csv','Survived',\"1\",True,True)\n```"]