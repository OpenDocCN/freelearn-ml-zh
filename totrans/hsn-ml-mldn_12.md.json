["```py\n18944 0 7 0 0 4 True \"!This program cannot be run in DOS mode.Fm;Ld &~_New_ptrt(M4_Alloc_max\"uJIif94H3\"j?TjV*?invalid argum_~9%sC:\\Program Files (x86\\Microsoft Visu Studio\\20cl4e\\xomory\"/Owneby CWGnkno excepti & 0xFF;b?eCErr[E7XE#D%d3kRegO(q/}nKeyExWa!0 S=+,H}Vo\\DebugPE.pdbC,j?_info ByteToWidendled=aekQ3V?$buic_g(@1@A8?5/wQAEAAV0;AH@Z?flush@Co12@XcCd{(kIN<7BED!?rdbufPA[Tght_tDB.0J608(:6<?xml version='1.0' encoding='UTF8' standalone='yes'?><assembly xmlns='urn:schemasmicrosoftcom:asm.v1' manifestVersion='1.0'> <trustInfo > <security> <requestedPrivileges> <requestedExecutionLevel level='asInvoker' uiAccess='false' /> </requestedPrivileges> </security> </trustInfo></assembly>KERNEL32.DLLMSVCP140D.dllucrtbased.dllVCRUNTIME140D.dllExitProcessGetProcAddressLoadLibraryAVirtualProtect??1_Lockit@std@@QAE@XZ\"\n```", "```py\n1670144 1 738 0 0 24 False \"!This program cannot be run in DOS mode.WATAUAVAWH A_AA]A\\_t$ UWAVHx UATAUAVAWHA_AA]A\\]UVWATAUAVAWH|$@H!t$0HA_AA]A\\_]VWATAVAWHSUVWATAUAVAWH(A_AA]A\\_][@USVWATAVAWHA_AA\\_[]UVWATAUAVAWHA_AA]A\\_]@USVWAVH` UAUAVHWATAUAVAWH A_AA]A\\_x ATAVAWHUSVWATAUAVAWHA_AA]A\\_[]UVWATAUAVAWHA_AA]A\\_]\\$ UVWATAUAVAWHA_AA]A\\_]x UATAUAVAWHA_AA]A\\]@USVWAVHUVWATAUAVAWHA_AA]A\\_]UVWATAUAVAWHA_AA]A\\_]@USVWATAVAWHA_AA\\_[]t$ UWAVH@USVWAVHUVWAVAWHh VWATAVAWHUVWAVAWHUVWATAUAVAWHpA_AA]A\\_]WATAUAVAWH0A_AA]A\\_L$ UVWATAUAVAWH@A_AA]A\\_]UVWATAUAVAWH`A_AA]A\\_]UVWATAUAVAWHpA_AA]A\\_]@USVWATAVAWHD$0fD9 tA_AA\\_[]\"\n```", "```py\nprivate const float TRUE = 1.0f;\nprivate const float FALSE = 0.0f;\n```", "```py\npublic string SHA1Sum { get; set; }\n\npublic double Confidence { get; set; }\n\npublic bool IsMalicious { get; set; }\n\npublic float FileSize { get; set; }\n\npublic float Is64Bit { get; set; }\n\npublic float NumImports { get; set; }\n\npublic float NumImportFunctions { get; set; }\n\npublic float NumExportFunctions { get; set; }\n\npublic float IsSigned { get; set; }\n\npublic string Strings { get; set; }\n\npublic string ErrorMessage { get; set; }\n```", "```py\npublic FileClassificationResponseItem(byte[] fileBytes)\n{\n    SHA1Sum = fileBytes.ToSHA1();\n    Confidence = 0.0;\n    IsMalicious = false;\n    FileSize = fileBytes.Length;\n\n    try\n    {\n        var peFile = new PeNet.PeFile(fileBytes);\n\n        Is64Bit = peFile.Is64Bit ? TRUE : FALSE;\n\n        try\n        {\n            NumImports = peFile.ImageImportDescriptors.Length;\n        }\n        catch\n        {\n            NumImports = 0.0f;\n        }\n\n        NumImportFunctions = peFile.ImportedFunctions.Length;\n\n        if (peFile.ExportedFunctions != null)\n        {\n            NumExportFunctions = peFile.ExportedFunctions.Length;\n        }\n\n        IsSigned = peFile.IsSigned ? TRUE : FALSE;\n\n        Strings = fileBytes.ToStringsExtraction();\n    }\n    catch (Exception)\n    {\n        ErrorMessage = $\"Invalid file ({SHA1Sum}) - only PE files are supported\";\n    }\n}\n```", "```py\npublic class FileData\n{\n    [LoadColumn(0)]\n    public float FileSize { get; set; }\n\n    [LoadColumn(1)]\n    public float Is64Bit { get; set; }\n\n    [LoadColumn(2)]\n    public float NumberImportFunctions { get; set; }\n\n    [LoadColumn(3)]\n    public float NumberExportFunctions { get; set; }\n\n    [LoadColumn(4)]\n    public float IsSigned { get; set; }\n\n    [LoadColumn(5)]\n    public float NumberImports { get; set; }\n\n    [LoadColumn(6)]\n    public bool Label { get; set; }\n\n    [LoadColumn(7)]\n    public string Strings { get; set; }\n\n    public override string ToString() => $\"{FileSize}\\t{Is64Bit}\\t{NumberImportFunctions}\\t\" +\n                                         $\"{NumberExportFunctions}\\t{IsSigned}\\t{NumberImports}\\t\" +\n                                         $\"{Label}\\t\\\"{Strings}\\\"\";\n}\n```", "```py\npublic class FileDataPrediction\n{\n    public bool Label { get; set; }\n\n    public bool PredictedLabel { get; set; }\n\n    public float Score { get; set; }\n\n    public float Probability { get; set; }\n}\n```", "```py\npublic static class Converters\n{\n    public static FileData ToFileData(this FileClassificationResponseItem fileClassification)\n    {\n        return new FileData\n        {\n            Is64Bit = fileClassification.Is64Bit,\n            IsSigned = fileClassification.IsSigned,\n            NumberImports = fileClassification.NumImports,\n            NumberImportFunctions = fileClassification.NumImportFunctions,\n            NumberExportFunctions = fileClassification.NumExportFunctions,\n            FileSize = fileClassification.FileSize,\n            Strings = fileClassification.Strings\n        };\n    }\n}\n```", "```py\nprivate const int BUFFER_SIZE = 2048;\nprivate const int FILE_ENCODING = 1252;\n```", "```py\npublic static string ToStringsExtraction(this byte[] data)\n{\n     var stringRex = new Regex(@\"[ -~\\t]{8,}\", RegexOptions.Compiled);\n```", "```py\nvar stringLines = new StringBuilder();\n\nif (data == null || data.Length == 0)\n{\n     return stringLines.ToString();\n}\n```", "```py\nvar dataToProcess = data.Length > 65536 ? data.Take(65536).ToArray() : data;\n```", "```py\nusing (var ms = new MemoryStream(dataToProcess, false))\n{\n    using (var streamReader = new StreamReader(ms, Encoding.GetEncoding(FILE_ENCODING), false, BUFFER_SIZE, false))\n    {\n        while (!streamReader.EndOfStream)\n        {\n            var line = streamReader.ReadLine();\n\n            if (string.IsNullOrEmpty(line))\n            {\n                continue;\n            }\n\n            line = line.Replace(\"^\", \"\").Replace(\")\", \"\").Replace(\"-\", \"\");\n\n            stringLines.Append(string.Join(string.Empty,\n                stringRex.Matches(line).Where(a => !string.IsNullOrEmpty(a.Value) && !string.IsNullOrWhiteSpace(a.Value)).ToList()));\n        }\n    }\n}\n```", "```py\nreturn string.Join(string.Empty, stringLines);\n```", "```py\npublic static class HashingExtension\n{\n    public static string ToSHA1(this byte[] data)\n    {\n        var sha1 = System.Security.Cryptography.SHA1.Create();\n\n        var hash = sha1.ComputeHash(data);\n\n        return Convert.ToBase64String(hash);\n    }\n}\n```", "```py\nprivate void ExtractFolder(string folderPath, string outputFile)\n{\n    if (!Directory.Exists(folderPath))\n    {\n        Console.WriteLine($\"{folderPath} does not exist\");\n\n        return;\n    }\n\n    var files = Directory.GetFiles(folderPath);\n\n    using (var streamWriter =\n        new StreamWriter(Path.Combine(AppContext.BaseDirectory, $\"../../../../{outputFile}\")))\n    {\n        foreach (var file in files)\n        {\n            var extractedData = new FileClassificationResponseItem(File.ReadAllBytes(file)).ToFileData();\n\n            extractedData.Label = !file.Contains(\"clean\");\n\n            streamWriter.WriteLine(extractedData.ToString());\n        }\n    }\n\n    Console.WriteLine($\"Extracted {files.Length} to {outputFile}\");\n}     \n```", "```py\npublic void Extract(string trainingPath, string testPath)\n{\n    ExtractFolder(trainingPath, Constants.SAMPLE_DATA);\n    ExtractFolder(testPath, Constants.TEST_DATA);\n}\n```", "```py\npublic FileClassificationResponseItem Predict(string fileName)\n{\n    var bytes = File.ReadAllBytes(fileName);\n\n    return Predict(new FileClassificationResponseItem(bytes));\n}\n```", "```py\npublic FileClassificationResponseItem Predict(FileClassificationResponseItem file)\n{\n    if (!File.Exists(Common.Constants.MODEL_PATH))\n    {\n        file.ErrorMessage = $\"Model not found ({Common.Constants.MODEL_PATH}) - please train the model first\";\n\n        return file;\n    }\n\n    ITransformer mlModel;\n\n    using (var stream = new FileStream(Common.Constants.MODEL_PATH, FileMode.Open, FileAccess.Read, FileShare.Read))\n    {\n        mlModel = MlContext.Model.Load(stream, out _);\n    }\n\n    var predictionEngine = MlContext.Model.CreatePredictionEngine<FileData, FileDataPrediction>(mlModel);\n\n    var prediction = predictionEngine.Predict(file.ToFileData());\n\n    file.Confidence = prediction.Probability;\n    file.IsMalicious = prediction.PredictedLabel;\n\n    return file;\n}\n```", "```py\nvar dataView = MlContext.Data.LoadFromTextFile<FileData>(trainingFileName, hasHeader: false);\n```", "```py\nvar dataProcessPipeline = MlContext.Transforms.NormalizeMeanVariance(nameof(FileData.FileSize))\n    .Append(MlContext.Transforms.NormalizeMeanVariance(nameof(FileData.Is64Bit)))\n    .Append(MlContext.Transforms.NormalizeMeanVariance(nameof(FileData.IsSigned)))\n    .Append(MlContext.Transforms.NormalizeMeanVariance(nameof(FileData.NumberImportFunctions)))\n    .Append(MlContext.Transforms.NormalizeMeanVariance(nameof(FileData.NumberExportFunctions)))\n    .Append(MlContext.Transforms.NormalizeMeanVariance(nameof(FileData.NumberImports)))\n    .Append(MlContext.Transforms.Text.FeaturizeText(\"FeaturizeText\", nameof(FileData.Strings)))\n    .Append(MlContext.Transforms.Concatenate(FEATURES, nameof(FileData.FileSize), nameof(FileData.Is64Bit),\n        nameof(FileData.IsSigned), nameof(FileData.NumberImportFunctions), nameof(FileData.NumberExportFunctions),\n        nameof(FileData.NumberImports), \"FeaturizeText\"));\n```", "```py\nvar trainer = MlContext.BinaryClassification.Trainers.FastTree(labelColumnName: nameof(FileData.Label),\n    featureColumnName: FEATURES,\n    numberOfLeaves: 2,\n    numberOfTrees: 1000,\n    minimumExampleCountPerLeaf: 1,\n    learningRate: 0.2);\n```", "```py\n[ApiController]\n[Route(\"[controller]\")]\npublic class UploadController : ControllerBase\n```", "```py\nprivate readonly FileClassificationPredictor _predictor;\n\npublic UploadController(FileClassificationPredictor predictor)\n{\n    _predictor = predictor;\n}\n```", "```py\nprivate static byte[] GetBytesFromPost(IFormFile file)\n{\n    using (var ms = new BinaryReader(file.OpenReadStream()))\n    {\n        return ms.ReadBytes((int)file.Length);\n    }\n}\n```", "```py\n[HttpPost]\npublic FileClassificationResponseItem Post(IFormFile file)\n{\n    if (file == null)\n    {\n        return null;\n    }\n\n    var fileBytes = GetBytesFromPost(file);\n\n    var responseItem = new FileClassificationResponseItem(fileBytes);\n\n    return _predictor.Predict(responseItem);\n}\n```", "```py\npublic void ConfigureServices(IServiceCollection services)\n{\n    services.AddRazorPages();\n    services.AddControllers();\n    services.AddServerSideBlazor();\n\n    services.AddSingleton<FileClassificationPredictor>();\n    services.AddSingleton<HttpClient>();\n}\n```", "```py\npublic void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n{\n    Encoding.RegisterProvider(CodePagesEncodingProvider.Instance);\n\n    if (env.IsDevelopment())\n    {\n        app.UseDeveloperExceptionPage();\n    }\n    else\n    {\n        app.UseExceptionHandler(\"/Error\");\n    }\n\n    app.UseStaticFiles();\n\n    app.UseRouting();\n\n    app.UseEndpoints(endpoints =>\n    {\n        endpoints.MapControllerRoute(\"default\", \"{controller=Home}/{action=Index}/{id?}\");\n        endpoints.MapBlazorHub();\n        endpoints.MapFallbackToPage(\"/_Host\");\n    });\n}\n```", "```py\nFileClassificationResponseItem _classificationResponseItem;\n\nasync Task HandleSelection(IEnumerable<IFileListEntry> files) {\n```", "```py\nvar file = files.FirstOrDefault();\n\nif (file != null)\n{\n    var ms = new MemoryStream();\n    await file.Data.CopyToAsync(ms);\n\n    var content = new MultipartFormDataContent {\n        {\n            new ByteArrayContent(ms.GetBuffer()), \"file\", file.Name\n        }\n    };\n```", "```py\nvar response = await client.PostAsync(\"http://localhost:5000/upload/\", content);\n\nvar jsonResponse = await response.Content.ReadAsStringAsync();\n\n_classificationResponseItem = JsonSerializer.Deserialize<FileClassificationResponseItem>(jsonResponse, new JsonSerializerOptions\n{\n    PropertyNameCaseInsensitive = true\n});\n```", "```py\npublic string TestingFolderPath { get; set; }\n\npublic string TrainingFolderPath { get; set; }\n```", "```py\npublic enum ProgramActions\n{\n    FEATURE_EXTRACTOR,\n    TRAINING,\n    PREDICT\n}\n```", "```py\nEncoding.RegisterProvider(CodePagesEncodingProvider.Instance);\n```", "```py\nswitch (arguments.Action)\n{\n    case ProgramActions.FEATURE_EXTRACTOR:\n        new FileClassificationFeatureExtractor().Extract(arguments.TrainingFolderPath,\n            arguments.TestingFolderPath);\n        break;\n    case ProgramActions.PREDICT:\n        var prediction = new FileClassificationPredictor().Predict(arguments.PredictionFileName);\n\n        Console.WriteLine($\"File is {(prediction.IsMalicious ? \"malicious\" : \"clean\")} with a {prediction.Confidence:P2}% confidence\");\n        break;\n    case ProgramActions.TRAINING:\n        new FileClassificationTrainer().Train(arguments.TrainingFileName, arguments.TestingFileName);\n        break;\n    default:\n        Console.WriteLine($\"Unhandled action {arguments.Action}\");\n        break;\n}\n```", "```py\nPS chapter09\\chapter09.trainer\\bin\\Debug\\netcoreapp3.1> .\\chapter09.trainer.exe trainingfolderpath ..\\..\\..\\..\\TrainingData\\ testingfolderpath ..\\..\\..\\..\\TestData\\\nExtracted 14 to sampledata.data\nExtracted 14 to testdata.data\n```", "```py\nPS chapter09\\chapter09.trainer\\bin\\Debug\\netcoreapp3.1> .\\chapter09.trainer.exe action training trainingfilename ..\\..\\..\\..\\sampledata.data testingfilename ..\\..\\..\\..\\testdata.data\nEntropy: 0.5916727785823275\nLog Loss: 12.436063032030377\nLog Loss Reduction: -20.018480961432264\n```"]