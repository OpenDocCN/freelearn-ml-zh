- en: Data Cleansing and Preliminary Data Analysis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After acquiring the right data, the most difficult and time-consuming task is
    getting it ready for analysis. Understanding what can and cannot be done with
    a given dataset is the first step before any model can be used. This chapter demonstrates
    how to use Excel functions to search and replace patterns, and how to find wrong
    data types and missing data. It also contains some useful diagrams so that we
    can get insights from the data and understand the different variables.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Cleansing data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Visualizing data for preliminary analysis
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding unbalanced datasets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will need to download the `titanic.xls` file from the GitHub repository
    at [https://github.com/PacktPublishing/Hands-On-Machine-Learning-with-Microsoft-Excel-2019/tree/master/Chapter04](https://github.com/PacktPublishing/Hands-On-Machine-Learning-with-Microsoft-Excel-2019/tree/master/Chapter04).
  prefs: []
  type: TYPE_NORMAL
- en: Cleansing data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Data is never clean – it always contains missing values, errors, incorrect formats,
    and other problems that make it impossible to feed to a machine learning model
    without preprocessing. This is what data cleansing is all about – correcting all
    these problems before starting the real analysis.
  prefs: []
  type: TYPE_NORMAL
- en: As an example of how to clean a dataset, we will use the Titanic passengers
    dataset. We will repeat the procedure described in the *Importing data from another
    Excel workbook* section of the previous chapter, to import data from an Excel
    workbook. We will use real data from the Titanic passengers and demonstrate how
    you can prepare it for analysis.
  prefs: []
  type: TYPE_NORMAL
- en: 'To clean a dataset, perform the necessary steps, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Navigate to Data | From File | From Workbook, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/44011b03-34b4-4aaa-9bc8-ef221b664b59.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After selecting the `titanic.xlsx` file and the `Passenger data` worksheet,
    we get a preview of the file''s contents, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/561f7e44-7d61-4c23-b997-0e749b8e6281.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on Edit and start the data cleansing process. The first thing we notice
    is that we don't need the column containing the passenger names; it gives no useful
    information to our analysis. In fact, in most cases, we will be required to remove
    personal information from our data, due to privacy policies.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the `name` column.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on Remove Columns*;* the resulting table will look as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/98090ad2-7a35-405c-b00a-6eb91851614d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Replace all `nulls` in the `cabin` column with `unknown`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d851c474-8819-4bd8-8f62-3195c2e1dc10.png)'
  prefs: []
  type: TYPE_IMG
- en: 'There are two other columns that contain missing values: `boat` and `body`.
    According to the data dictionary, they tell us which lifeboat the passenger was
    located in (if they survived), and which ID was assigned to their body in the
    case of their death. There are missing values, but there are also some cases where
    we cannot have a value; clearly, a dead passenger did not use a boat and a surviving
    passenger body was not identified. We will use some functions to account for these
    options.'
  prefs: []
  type: TYPE_NORMAL
- en: In Query Editor, select the Add Column tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select Custom Column.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The dialog shows us an option to name the new column and define its contents.
    Type `boat_corrected` into the textbox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Define a function to calculate the column''s contents, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*if [survived]=1 and [boat] = null then "unknown" else [boat]*'
  prefs: []
  type: TYPE_NORMAL
- en: 'This means that if the passenger survived and the boat name is missing, we
    set the value to `unknown`. Otherwise, we just copy the value into the original
    column, as demonstrated in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/167f4f10-59b8-4ac3-adea-d581269e580d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Add another new column in order to correct the values in `body` and define
    a different value for the column:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*if [survived]=0 and [body] = null then "not recovered" else [body]*'
  prefs: []
  type: TYPE_NORMAL
- en: In this case, we want to say that if the passenger did not survive the shipwreck
    and there is no body ID, then it was probably not recovered from the water.
  prefs: []
  type: TYPE_NORMAL
- en: 'The result, after reordering the columns, is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1637fc80-aa94-41ce-a8ca-184338163e9e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'There are still `null` values in the new columns; they correspond to the preceding
    cases (that is, the dead passenger with no boat, or the survivor with no body
    ID). Replace these values with `N/A`; the resulting table is shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/266a83c3-bffb-4ff6-a8e7-526de7031b0d.png)'
  prefs: []
  type: TYPE_IMG
- en: The last column to be modified is `age`. We are going to simplify this by grouping
    the passengers into age range and replace the missing values.
  prefs: []
  type: TYPE_NORMAL
- en: Replace all the missing values (`null`) with `-1`. We can do this easily by
    selecting the column and clicking on Replace Values.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the Add Column tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on Conditional Column and define several groups, depending on the age
    range, as demonstrated in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/62e9901e-5a60-40f5-b3b3-fb61bac13468.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The result is a new column (`Age group`) that contains the different age groups
    instead of the age value and replaces the `null` values with `unknown`. The resulting
    table is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e68cd6d2-bd76-456b-8f5c-6e1a978c7dee.png)'
  prefs: []
  type: TYPE_IMG
- en: Our dataset is now clean and ready for some preliminary analysis, which we will
    show in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Visualizing data for preliminary analysis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After cleaning the dataset, it is always recommended to visualize it. This helps
    us gain an understanding of the different variables, how their values are distributed,
    and the correlations that exist between them (we will explore correlations in
    more detail in the next chapter). We can determine which variables are important
    to our analyses, which ones give us more information, and which ones can be discarded
    for being redundant.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will start by looking a several bar plots, where we will either count the
    number of occurrences of each value (using a histogram), or we will show the percentage
    of each value with respect to the total (using a bar plot). To achieve this, perform
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Right-click on any cell within the table to access the Quick Analysis option:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2734cb57-0024-4c90-a871-5c108cf017ae.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the pop-up window, we can choose the chart type. Select Clustered Column,
    as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a7420df0-40ff-4eea-bb36-15732c1c7e96.png)'
  prefs: []
  type: TYPE_IMG
- en: By default, Excel creates a pivot table showing some variables; we need to change
    the variables and the grouping operation to reflect what we need.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the lower-right corner, we will see a window labeled Σ. Inside it, we can
    click on the variable and display the menu, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a9b2eae9-63ad-4c83-92a8-db4b401c6416.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on Value Field Settings; you will see a pop-up window, similar to the
    one in the following screenshot, where you can change from Sum to Count, since
    we want to Count the values, and then calculate the Sum of them:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b523e8a3-3b04-455c-8413-c771a9db2856.png)'
  prefs: []
  type: TYPE_IMG
- en: We converted the `Age` variable into `Age group`, so that is the variable that
    we now want to use. That is, we want to count how many passengers there are in
    a given age group.
  prefs: []
  type: TYPE_NORMAL
- en: Change the selection in PivotChart Fields to `Age group`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, change the chart title and move it so that it looks similar to the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1a6d080d-636b-4e98-8c36-fa6d790bb6ed.png)'
  prefs: []
  type: TYPE_IMG
- en: We can see that most of the listed passengers are adults. We have missing information
    for many of the passengers in the list, and the rest of the groups share a small
    number of passengers. The table that is used in the chart can be seen in the top-left
    corner.
  prefs: []
  type: TYPE_NORMAL
- en: 'An interesting question to ask is, *Is there any difference in the survival
    probability for different age groups?* To answer this, we need to add the `survived`
    variable to the Axis (Categories) window, which is available at the bottom right-hand
    corner of the sheet. We do this by dragging the variable from the PivotCharts
    Fields window and dropping it into Axis. The resulting chart is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c3fbc1b6-58d2-41ac-98a4-626b6f85f3c3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'There''s a notable problem with this chart – we cannot easily compare the age
    groups since their members are very different in number. The solution is to refer
    everything to the total number of passengers in each age group and show percentages
    instead. Looking at the previous chart, we can see that the data is grouped first
    by `Age group`, and then by `survived`. The first one is the parent variable.
    Repeat the steps we described previously to navigate to the Value Field Settings
    menu; you will see a pop-up window like the one that''s shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c4279dc3-3ac7-46b8-ba07-f304b0e10808.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on the Show Values As tab, as shown in the preceding screenshot.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Choose the % of Parent Total option and the `Age group` field as the parent;
    the result is shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/29b28933-9525-44da-a880-9b405763e61a.png)'
  prefs: []
  type: TYPE_IMG
- en: The percentage is relative to the total number of passengers within each age
    group, and it is now easier to compare. A large percentage of the elderly group
    did not survive the shipwreck, most adults suffered the same fate, and the numbers
    for children and teenagers seem even. It is also clear that most infants survived,
    probably because they were given priority to board the lifeboats.
  prefs: []
  type: TYPE_NORMAL
- en: 'Repeating the same steps, we can assume that it was more probable for passengers
    travelling in first class to survive compared to other passengers; consider the
    following chart:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/092b7049-dbdc-4d2e-8d70-eb83f36d5f0c.png)'
  prefs: []
  type: TYPE_IMG
- en: Yes, it was easier to survive if you traveled first class than if you were in
    third. This is a known fact about the Titanic tragedy, and we can see it reflected
    in the data. Travel conditions were very different in different classes, as well
    as safety measures.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, what about gender? Does it matter if the passenger was a man or a woman?
    Let''s build a histogram of the number of men and women that survived and use
    it to answer our question. The resulting chart is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fed2c9b4-1511-406e-82bd-35a0d9d98559.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, gender clearly matters. The women survivors have a higher probability
    than men, at least in general terms. The reason for this might be because women
    were given priority to board the lifeboats, while the men, especially the young
    ones, were delayed in order to help other passengers, and so they couldn't make
    it to the lifeboats in time.
  prefs: []
  type: TYPE_NORMAL
- en: We have used a combination of the previous knowledge of our dataset and information
    from the data to better understand what we can and cannot do with it. You are
    encouraged to create diagrams for other variables and combinations, and try to
    understand the results. It is extremely important to understand the basic details
    of a dataset in order to understand whether the result we obtain from the machine
    learning models make sense.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding unbalanced datasets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To be able to compare the results of different variables, we need to take into
    account the different number of samples of each class. Let''s suppose that we
    want to train a machine learning model to predict whether a given passenger would
    survive, based on age group, gender, and class. If we plot the distribution of
    values in the `survived` variable, we will see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2cc73f59-c193-47c3-a681-124cb8a95598.png)'
  prefs: []
  type: TYPE_IMG
- en: It is clear from the preceding diagram and table that there are nearly twice
    as many non-survivors than survivors. If we use this dataset as is, we are introducing
    a bias to our dataset that will affect the results. Predicting `0` for the survival
    variable will be approximately two times more probable than predicting `1`. An
    exception to this statement are decision trees and their related predictive models
    (such as random forests and XGBoost), which can correctly deal with unbalanced
    datasets. Other models, especially neural networks, are very sensitive to uneven
    datasets. Race, gender, and other biases in algorithms raise concerns about the
    wide use of **Artificial Intelligence** (**AI**) to make decisions at all levels.
    This is a serious problem when applying AI to real life, and possible solutions
    to prevent it are still under study.
  prefs: []
  type: TYPE_NORMAL
- en: 'Given enough data entries, an easy way to balance the dataset is to randomly
    choose a number of entries from the majority class that is equal to that of the
    minority class. In this case, we might choose 500 rows from the rows that show
    `survivor` as `0`. Let''s do that using the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Filter the entries, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1eba5675-8e45-4da5-b57e-2aff05112f8f.png)'
  prefs: []
  type: TYPE_IMG
- en: Copy the entries and paste them into a new worksheet.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Insert a new column at the beginning, named `ID`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Turn the data into a table (Insert | Table, keeping the first row as headers).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter the following formula in the first cell and copy it into the rest of
    the column:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*=RAND()*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Make sure that the automatic calculation is switched off. To do this, navigate
    to Formulas | Calculation Options and check Manual. This will prevent the random
    numbers from changing automatically:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/65a3b784-6970-467f-8acd-a323c3b0b6c4.png)'
  prefs: []
  type: TYPE_IMG
- en: Order the data by ID (you can choose ascending or descending order, it does
    not make any difference).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the first 500 rows to be your random sample.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy these rows to a new sheet.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the 500 rows with `survived` as `1`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You have now a perfectly balanced dataset containing 1,000 entries, which you
    can now use to train your machine learning model.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we explored different methods of dealing with missing data
    and learned how to group or summarize it. We have shown you how important it is
    to visualize the data after cleaning, in order to be able to understand and interpret
    the results, from basic to more advanced model predictions. This is the beginning
    of any feature engineering, since we transform and/or discard features based on
    their values. Too many missing values will imply that we cannot use that variable
    (or feature), or a high correlation will imply that we can discard one of the
    correlated variables. We will dive deeper into correlations in the next chapter,
    showing you how to measure them quantitatively, using different methods.
  prefs: []
  type: TYPE_NORMAL
- en: Preliminary data visualization is extremely important to gain an understanding
    of data properties and to interpret the results we obtain, even after applying
    a machine learning model.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Reviewing what was explained in the previous chapter, build a decision tree
    using `class`, `gender`, and `Age group` as features, and `survived` as the target
    variable. You should be able to define some conditions for a passenger to survive.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What variables in the dataset do you think are highly correlated?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Suppose that the dataset contains a numerical variable with only a few missing
    values. Is it possible to replace these missing values with numerical values?
    What value would you use?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Explain what bias means and why it is important to avoid it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What other types of diagrams could be use for preliminary data analysis? Try
    some of them in the given dataset.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Best Practices in Data Cleaning: A Complete Guide to Everything You Need to
    Do Before and After Collecting Your Data*, *1st Edition*, by Jason W. Osborn'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Introduction to Data Visualization Techniques Using Microsoft Excel 2013 &
    Web-based Tools*, by Tufts Data Lab'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Analysing the Classification of Imbalanced Data-sets with Multiple Classes:
    Binarization Techniques and Ad-Hoc Approaches for Preprocessing and Cost Sensitive
    Learning*, by A. Fernández, V. López, M. Galar, M.J. del Jesus and F. Herrera'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
