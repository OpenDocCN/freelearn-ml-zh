- en: 'Chapter 7: Profile Training Jobs with Amazon SageMaker Debugger'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 7 章：使用 Amazon SageMaker Debugger 分析训练作业
- en: Training **machine learning** (**ML**) models involves experimenting with multiple
    algorithms, with their hyperparameters typically crunching through large volumes
    of data. Training a model that yields optimal results is both a time- and compute-intensive
    task. Improved training time yields improved productivity and reduces overall
    training costs.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 训练 **机器学习**（**ML**）模型涉及对多个算法进行实验，它们的超参数通常需要处理大量数据。训练出最优结果的模型是一项既耗时又耗计算的任务。提高训练时间可以提高生产力并降低整体训练成本。
- en: Distributed training, as we discussed in [*Chapter 6*](B17249_06_Final_JM_ePub.xhtml#_idTextAnchor117),
    *Training and Tuning at Scale*, goes a long way in achieving improved training
    times by using a scalable compute cluster. However, monitoring training infrastructure
    to identify and debug resource bottlenecks is not trivial. Once a training job
    has been launched, the process becomes non-transparent, and you don't have much
    visibility into the model training process. Equally non-trivial is real-time monitoring
    to detect sub-optimal training jobs and stop them early to avoid wasting training
    time and resources.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们在[*第 6 章*](B17249_06_Final_JM_ePub.xhtml#_idTextAnchor117)“大规模训练和调优”中讨论的，分布式训练通过使用可扩展的计算集群来显著提高训练时间。然而，监控训练基础设施以识别和调试资源瓶颈并非易事。一旦启动了训练作业，整个过程就变得不透明，你对模型训练过程几乎没有可见性。同样不简单的是实时监控以检测次优训练作业并在早期停止它们，以避免浪费训练时间和资源。
- en: Amazon SageMaker Debugger provides visibility into training jobs and the infrastructure
    a training job is executing on. Real-time training metrics such as **learning
    gradients** and **network weights** captured by SageMaker Debugger provide visibility
    into a training job in progress, so you can act on conditions such as **vanishing
    gradients** and **overfitting**.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Amazon SageMaker Debugger 提供了对训练作业及其执行的基础设施的可见性。SageMaker Debugger 捕获的实时训练指标，如**学习梯度**和**网络权重**，为正在进行的训练作业提供了可见性，因此你可以对**梯度消失**和**过拟合**等条件采取行动。
- en: Debugger also monitors and provides reports about the system's resources such
    as CPU, GPU, and memory, providing you with insights into resource utilization
    and bottlenecks. Additionally, if you use TensorFlow or PyTorch for your deep
    learning training jobs, Debugger provides you with a view into framework metrics
    that can be used to speed up your training jobs.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Debugger 还监控并提供有关系统资源（如 CPU、GPU 和内存）的报告，为你提供资源利用率和瓶颈的见解。此外，如果你使用 TensorFlow
    或 PyTorch 进行深度学习训练作业，Debugger 提供了框架指标的可视化，这些指标可用于加速你的训练作业。
- en: By the end of this chapter, you will be able to use the capabilities of Amazon
    SageMaker Debugger and apply best practices to address challenges typical to debugging
    ML training. These challenges include identifying and reacting to sub-optimal
    training, gaining visibility into the resource utilization of the training infrastructure,
    and optimizing training framework parameters. You will also learn how to improve
    the training time and costs by applying detailed recommendations provided by SageMaker
    Debugger.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将能够使用 Amazon SageMaker Debugger 的功能，并应用最佳实践来解决调试 ML 训练的典型挑战。这些挑战包括识别和应对次优训练、了解训练基础设施的资源利用率，以及优化训练框架参数。你还将学习如何通过应用
    SageMaker Debugger 提供的详细建议来提高训练时间和成本。
- en: 'In this chapter, we are going to cover the following main topics:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要主题：
- en: Amazon SageMaker Debugger essentials
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Amazon SageMaker Debugger 精要
- en: Real-time monitoring of training jobs using built-in and custom rules
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用内置和自定义规则实时监控训练作业
- en: Gain insight into the training infrastructure and training framework
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解训练基础设施和训练框架
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: You will need an AWS account to run the examples included in this chapter. If
    you have not set up the data science environment for this book yet, please refer
    to [*Chapter 2*](B17249_02_Final_JM_ePub.xhtml#_idTextAnchor039), *Data Science
    Environments*, which will walk you through the setup process.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要 AWS 账户来运行本章中包含的示例。如果你还没有为本书设置数据科学环境，请参阅[*第 2 章*](B17249_02_Final_JM_ePub.xhtml#_idTextAnchor039)“数据科学环境”，其中将指导你完成设置过程。
- en: The code examples included in this book are available on GitHub at [https://github.com/PacktPublishing/Amazon-SageMaker-Best-Practices/tree/main/Chapter07](https://github.com/PacktPublishing/Amazon-SageMaker-Best-Practices/tree/main/Chapter07).
    You will need to install a Git client to access them ([https://git-scm.com/](https://git-scm.com/)).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本书包含的代码示例可在 GitHub 上找到 [https://github.com/PacktPublishing/Amazon-SageMaker-Best-Practices/tree/main/Chapter07](https://github.com/PacktPublishing/Amazon-SageMaker-Best-Practices/tree/main/Chapter07)。要访问它们，您需要安装
    Git 客户端 ([https://git-scm.com/](https://git-scm.com/))。
- en: Amazon SageMaker Debugger essentials
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Amazon SageMaker Debugger 基础知识
- en: 'In this section, you will learn about the basic terminology and capabilities
    of Amazon SageMaker Debugger. Using Debugger with your training jobs involves
    three high-level steps:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你将了解 Amazon SageMaker Debugger 的基本术语和功能。使用 Debugger 与你的训练作业涉及三个高级步骤：
- en: '*Configuring* the training job to use SageMaker Debugger.'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*配置*训练作业以使用 SageMaker Debugger。'
- en: '*Analyzing* the collected tensors and metrics.'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*分析*收集到的张量和指标。'
- en: '*Taking* action.'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*采取*行动。'
- en: 'The preceding points are illustrated in the following diagram:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图示说明了前面的要点：
- en: '![Figure 7.1 – Amazon SageMaker Debugger overview'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.1 – Amazon SageMaker Debugger 概览'
- en: '](img/B17249_07_01.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.1 – Amazon SageMaker Debugger 概览](img/B17249_07_01.jpg)'
- en: Figure 7.1 – Amazon SageMaker Debugger overview
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.1 – Amazon SageMaker Debugger 概览
- en: As we dive into each one of these steps, we will introduce the necessary terminology.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们深入到这些步骤中的每一个时，我们将介绍必要的术语。
- en: Configuring a training job to use SageMaker Debugger
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置训练作业以使用 SageMaker Debugger
- en: 'The first step is to configure training jobs to use Amazon SageMaker Debugger.
    By now, you are familiar with using the `Estimator` object from SageMaker SDK
    to launch training jobs. To use Amazon SageMaker Debugger, you must enhance `Estimator`
    with three additional configuration parameters: `DebuggerHookConfig`, `Rules`,
    and `ProfilerConfig`.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是配置训练作业以使用 Amazon SageMaker Debugger。到目前为止，你已经熟悉了使用 SageMaker SDK 中的 `Estimator`
    对象来启动训练作业。要使用 Amazon SageMaker Debugger，你必须通过三个额外的配置参数增强 `Estimator`：`DebuggerHookConfig`、`Rules`
    和 `ProfilerConfig`。
- en: 'With `DebuggerHookConfig`, you can specify which debugging metrics to collect
    and where to store them, as shown in the following code block:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `DebuggerHookConfig`，你可以指定要收集哪些调试指标以及将它们存储在哪里，如下面的代码块所示：
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '`s3_output_path` is the location where all the collected data is persisted.
    If this location is not specified, Debugger uses the default path, `s3://<output_path>/debug-output/`,
    where `<output_path>` is the output path of the SageMaker training job. The `CollectionConfig`
    list allows you to organize the debug data or tensors into collections for easier
    analysis. A tensor represents the state of a training network at a specific time
    during the training process. Data is collected at intervals, as specified by `save_interval`,
    which is the number of steps in a training run.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`s3_output_path` 是所有收集到的数据持久化的位置。如果未指定此位置，调试器将使用默认路径，`s3://<output_path>/debug-output/`，其中
    `<output_path>` 是 SageMaker 训练作业的输出路径。`CollectionConfig` 列表允许您将调试数据或张量组织成集合，以便更容易分析。张量表示训练网络在训练过程中特定时间的状态。数据按照
    `save_interval` 指定的间隔收集，`save_interval` 是训练运行中的步数。'
- en: How do you know which tensors to collect? SageMaker Debugger comes with a set
    of built-in collections to capture common training metrics such as `weights`,
    `layers`, and `outputs`. You can choose to collect all of the available tensors
    or a subset of them. In the preceding code sample, Debugger is gathering the `metrics`
    collection.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 你如何知道要收集哪些张量？SageMaker Debugger 随带一组内置集合来捕获常见的训练指标，如 `weights`、`layers` 和 `outputs`。你可以选择收集所有可用的张量或它们的子集。在先前的代码示例中，调试器正在收集
    `metrics` 集合。
- en: Note
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: For a complete list of built-in collections, refer to [https://github.com/awslabs/sagemaker-debugger/blob/master/docs/api.md#collection](https://github.com/awslabs/sagemaker-debugger/blob/master/docs/api.md#collection).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 对于内置集合的完整列表，请参阅 [https://github.com/awslabs/sagemaker-debugger/blob/master/docs/api.md#collection](https://github.com/awslabs/sagemaker-debugger/blob/master/docs/api.md#collection)。
- en: 'You can also create a custom collection of metrics to collect. In the following
    code block, Debugger captures all the metrics with `relu`, `tanh`, or `weight`
    in their names:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以创建一个自定义的指标集合来收集。在下面的代码块中，调试器捕获所有名称中包含 `relu`、`tanh` 或 `weight` 的指标：
- en: '[PRE1]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Note
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: While it may be tempting to collect all the tensors, this leads to collecting
    a lot of data, which increases training time, training costs, and storage costs.
    In this case, using a `ReductionConfig` allows you to save reduced tensors instead
    of saving the full tensor ([https://github.com/awslabs/sagemaker-debugger/blob/master/docs/api.md#collection](https://github.com/awslabs/sagemaker-debugger/blob/master/docs/api.md#collection)).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然收集所有张量可能很有吸引力，但这会导致收集大量数据，从而增加训练时间、训练成本和存储成本。在这种情况下，使用 `ReductionConfig` 允许您保存减少后的张量而不是保存完整的张量
    ([https://github.com/awslabs/sagemaker-debugger/blob/master/docs/api.md#collection](https://github.com/awslabs/sagemaker-debugger/blob/master/docs/api.md#collection))。
- en: 'While `DebuggerHookConfig` allows you to configure and save tensors, a rule
    analyzes the tensors that are captured during the training for specific conditions
    such as **loss not decreasing**. SageMaker Debugger supports two different types
    of rules: **built-in** and **custom**. SageMaker Debugger comes with a set of
    built-in rules in Python that can detect and report common training problems such
    as overfitting, underfitting, and vanishing gradients. With custom rules, you
    write your own rules in Python for SageMaker Debugger to evaluate against the
    collected tensors.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 `DebuggerHookConfig` 允许您配置和保存张量，但规则会分析训练过程中捕获的张量以检查特定条件，例如 **损失未减少**。SageMaker
    Debugger 支持两种不同类型的规则：**内置** 和 **自定义**。SageMaker Debugger 随带一组内置规则，这些规则可以用 Python
    检测并报告常见的训练问题，如过拟合、欠拟合和梯度消失。使用自定义规则，您可以在 Python 中编写自己的规则，以便 SageMaker Debugger
    对收集到的张量进行评估。
- en: 'For example, in the following code block, Debugger collects tensors related
    to the `metrics` collection and evaluates the tensors to detect whether the training
    loss is reduced throughout the training process:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在下面的代码块中，调试器收集与 `metrics` 收集相关的张量，并评估张量以检测训练过程中的损失是否减少：
- en: '[PRE2]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Finally, `ProfilerConfig` allows you to collect system metrics such as CPU,
    GPU, Memory, I/O, and framework metrics specific to the framework being used in
    your training job. For the system metrics, you must specify the time interval
    for which you want to collect metrics, while for framework metrics, you specify
    the starting step and the number of steps, as shown in the following code block:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，`ProfilerConfig` 允许您收集系统指标，例如 CPU、GPU、内存、I/O 以及您在训练作业中使用的框架的特定框架指标。对于系统指标，您必须指定要收集指标的时长间隔，而对于框架指标，您指定起始步数和步数，如下面的代码块所示：
- en: '[PRE3]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The following table summarizes the tensors and metrics that are collected by
    SageMaker. It shows the different types of metrics, examples of each type, and
    how to collect and use them:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 下表总结了 SageMaker 收集的张量和指标。它显示了不同类型的指标、每种类型的示例以及如何收集和使用它们：
- en: '![Figure 7.2 – Tensors and metrics collected by SageMaker Debugger'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.2 – SageMaker Debugger 收集的张量和指标'
- en: '](img/011.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/011.jpg]'
- en: Figure 7.2 – Tensors and metrics collected by SageMaker Debugger
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.2 – SageMaker Debugger 收集的张量和指标
- en: Using these configuration parameters, SageMaker Debugger collects quite a lot
    of information about your training jobs. But how do you ensure that the data that's
    been collected is secure?
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这些配置参数，SageMaker Debugger 收集了大量关于您的训练作业的信息。但您如何确保收集的数据是安全的？
- en: A best practice is to encrypt all the data in an S3 bucket, either with a key
    provided by AWS or your own key with **customer-managed key** (**CMK**). Additionally,
    the rules that have been configured are executed on isolated Debugger rule containers.
    The rule containers also execute in the same VPC as the training job and use the
    IAM role that's used by the training job.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 最佳实践是对 S3 存储桶中的所有数据进行加密，无论是使用 AWS 提供的密钥还是您自己的具有 **客户管理密钥**（**CMK**）的密钥。此外，已配置的规则在隔离的调试器规则容器中执行。规则容器也在与训练作业相同的
    VPC 中执行，并使用训练作业使用的 IAM 角色。
- en: Once you are satisfied with your Debugger configuration, kick off training using
    `estimator.fit()`. Next, we will analyze the information that's collected by the
    Debugger during the training job.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您对调试器配置满意，就可以使用 `estimator.fit()` 启动训练。接下来，我们将分析调试器在训练作业期间收集的信息。
- en: Analyzing the collected tensors and metrics
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分析收集到的张量和指标
- en: All tensors and metrics that are collected during training are persisted in
    S3\. SageMaker Debugger uses a `trial` object to represent a single training run.
    A trial object consists of multiple steps, where each step represents a single
    batch of training data. At each step, a collected tensor has a specific value.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在训练过程中收集的所有张量和指标都保存在S3中。SageMaker调试器使用`trial`对象来表示单个训练运行。`trial`对象由多个步骤组成，其中每个步骤代表单个批次的训练数据。在每一步中，收集到的张量具有特定的值。
- en: To access the tensor values, you get the path to the tensors from the estimator,
    create a trial, get the list of tensors, find out the steps where you have data
    for a specific tensor you are interested in, and view the values of the tensor.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问张量值，您从估计器获取张量的路径，创建一个试验，获取张量列表，找出您感兴趣的具体张量的数据所在的步骤，并查看张量的值。
- en: 'By following this path from the trial to the individual tensor values, you
    can manually query the tensor values, as shown in the following code block:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 通过从试验到单个张量值的路径，您可以手动查询张量值，如下面的代码块所示：
- en: '[PRE4]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'You can visualize the tensor values that have been collected even further by
    using custom plot code in the notebook. The following diagram shows a visualization
    of the **train-rmse** and **validation-rmse** training metrics, which were collected
    during training:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过在笔记本中使用自定义绘图代码进一步可视化收集到的张量值。以下图表显示了**train-rmse**和**validation-rmse**训练指标的可视化，这些指标是在训练过程中收集的：
- en: '![Figure 7.3 – Training and validation errors'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.3 – 训练和验证错误'
- en: '](img/B17249_07_03.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/B17249_07_03.jpg](img/B17249_07_03.jpg)'
- en: Figure 7.3 – Training and validation errors
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.3 – 训练和验证错误
- en: Note that you can also view the visualizations in SageMaker Studio. Additionally,
    if you have rules configured, Debugger automatically analyses the tensors to evaluate
    training conditions and trigger cloud watch alerts. Similarly, when you set the
    `ProfileConfig` parameter, a detailed profiler report is generated and saved in
    S3\. Next, let's take a look at how to act on the rule results.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，您还可以在SageMaker Studio中查看可视化。此外，如果您已配置规则，调试器将自动分析张量以评估训练条件并触发云监控警报。同样，当您设置`ProfileConfig`参数时，将生成详细的分析报告并保存在S3中。接下来，让我们看看如何对规则结果采取行动。
- en: Taking action
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 采取行动
- en: Rules evaluate the collected tensor data. As the rule evaluation's status changes
    during training, a CloudWatch Event is triggered. You can configure a CloudWatch
    rule to be triggered for the CloudWatch Event to automate actions in response
    to the issues found by the rules.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 规则评估收集的张量数据。由于规则评估的状态在训练过程中发生变化，将触发CloudWatch事件。您可以为CloudWatch事件配置CloudWatch规则，以自动化对规则发现的问题的响应。
- en: 'Additionally, you can use Debugger''s built-in actions to automate the responses.
    The following code block shows how to use a combination of Debugger''s built-in
    rules and actions to stop a training job if the loss is not continuously reduced
    during the training process:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您还可以使用调试器内置的操作来自动化响应。以下代码块显示了如何使用调试器内置规则和操作的组合来在训练过程中损失值没有持续降低时停止训练作业：
- en: '[PRE5]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: On the other hand, when you have the `ProfilerConfig` parameter configured,
    a profiler report with a detailed analysis of system metrics and framework metrics
    is generated and persisted in S3\. You can download, review, and apply recommendations
    to the profiler report.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，当您已配置`ProfilerConfig`参数时，将生成一个包含系统指标和框架指标详细分析的分析报告，并持久化存储在S3中。您可以从S3下载、审查并将建议应用于分析报告。
- en: In the next two sections, you will learn how to automate responses to rule evaluations
    and implement recommendations from the profiler report.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的两个部分中，您将学习如何自动化对规则评估的响应并实施分析报告中的建议。
- en: Real-time monitoring of training jobs using built-in and custom rules
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用内置和自定义规则实时监控训练作业
- en: In this section, you will use Debugger capabilities to monitor a job with built-in
    and custom rules to detect sub-optimal training conditions such as `LossNotDecreasing`
    and `ExplodingGradients`.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您将使用调试器功能来监控带有内置和自定义规则的作业，以检测次优训练条件，例如`LossNotDecreasing`和`ExplodingGradients`。
- en: SageMaker provides a set of built-in rules to identify common training issues
    such as `class_imbalance`, `loss_no_decreasing`, and `overfitting`.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: SageMaker提供了一套内置规则来识别常见的训练问题，例如`class_imbalance`、`loss_no_decreasing`和`overfitting`。
- en: Note
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'The complete list of SageMaker built-in rules can be accessed here: [https://docs.aws.amazon.com/sagemaker/latest/dg/debugger-built-in-rules.html](https://docs.aws.amazon.com/sagemaker/latest/dg/debugger-built-in-rules.html).'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: SageMaker内置规则的完整列表可以在此处访问：[https://docs.aws.amazon.com/sagemaker/latest/dg/debugger-built-in-rules.html](https://docs.aws.amazon.com/sagemaker/latest/dg/debugger-built-in-rules.html)。
- en: 'The following code sample shows how to configure `built_in` rules with SageMaker
    Debugger:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码示例展示了如何使用SageMaker Debugger配置`内置`规则：
- en: '[PRE6]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'After calling fit, SageMaker starts one training job and one processing job
    for each configured built-in rule. The rule evaluation status is visible in the
    training logs in CloudWatch at regular intervals. You can also view the results
    of the rule execution programmatically using the following command:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在调用fit之后，SageMaker为每个配置的内置规则启动一个训练作业和一个处理作业。规则评估状态在CloudWatch的训练日志中以固定间隔可见。你还可以使用以下命令以编程方式查看规则执行的结果：
- en: '[PRE7]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The results from the built-in rules that have been configured should be similar
    to the following:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 已配置的内置规则的结果应类似于以下内容：
- en: '![Figure 7.4 – Summary of built-in rule execution'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.4 – 内置规则执行摘要'
- en: '](img/B17249_07_04.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17249_07_04.jpg)'
- en: Figure 7.4 – Summary of built-in rule execution
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.4 – 内置规则执行摘要
- en: By analyzing the rule summary, you can see that the `LossNotDecreasing` rule
    is triggered, as indicated by `RuleEvaluationStatus` – `IssuesFound`. Since the
    action that's been configured is used to stop the training job, you will notice
    that the training job is stopped before all epochs are executed. You can also
    see that the other built-in rules – `Overfit`, `Overtraining`, and `StalledTrainingRule`
    – were not triggered during training.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 通过分析规则摘要，你可以看到`LossNotDecreasing`规则被触发，如`RuleEvaluationStatus`中的`IssuesFound`所示。由于配置的操作用于停止训练作业，你将注意到训练作业在执行所有epoch之前就已经停止。你还可以看到其他内置规则——`Overfit`、`Overtraining`和`StalledTrainingRule`——在训练过程中没有被触发。
- en: Built-in rules are managed by AWS, freeing you from having to manage updates
    to rules. You simply plug them into the estimator. However, you may want to monitor
    a metric that is not included in the built-in rules, in which case you must configure
    a custom rule. A bit more work is involved with custom rules. For example, let's
    say you want to track if the gradients are becoming too large during training.
    To create a custom rule for this, you must extend the `Rule` interface provided
    by SageMaker Debugger.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 内置规则由AWS管理，从而免去了你需要管理规则更新的麻烦。你只需将它们插入到估计器中即可。然而，你可能想监控内置规则中未包含的指标，在这种情况下，你必须配置自定义规则。自定义规则需要更多的工作。例如，假设你希望在训练过程中跟踪梯度是否变得过大。为了创建这个自定义规则，你必须扩展SageMaker
    Debugger提供的`Rule`接口。
- en: Note
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'SageMaker provides two sets of Docker images for rules: one set for evaluating
    built-in rules and one set for evaluating custom rules. The **Elastic container
    registry** (**ECR**) URLs for these Docker images are available at [https://docs.aws.amazon.com/sagemaker/latest/dg/debugger-docker-images-rules.html](https://docs.aws.amazon.com/sagemaker/latest/dg/debugger-docker-images-rules.html).'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: SageMaker为规则提供了两套Docker镜像：一套用于评估内置规则，另一套用于评估自定义规则。这些Docker镜像的**弹性容器注册库**（**ECR**）URL可在[https://docs.aws.amazon.com/sagemaker/latest/dg/debugger-docker-images-rules.html](https://docs.aws.amazon.com/sagemaker/latest/dg/debugger-docker-images-rules.html)找到。
- en: 'In the following example, the custom rule will work with the tensors that were
    collected using the `gradients` collection. The `invoke_at_step` method provides
    the logic to be executed. At each step, the mean value of the gradient is compared
    against a threshold. If the gradient value is greater than the threshold, the
    rule is triggered, as shown in the following code:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，自定义规则将与使用`gradients`收集收集的张量一起工作。`invoke_at_step`方法提供了要执行的逻辑。在每一步中，梯度值的平均值与阈值进行比较。如果梯度值大于阈值，则触发规则，如下面的代码所示：
- en: '[PRE8]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Next, define the custom rule, as follows:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，定义自定义规则，如下所示：
- en: '[PRE9]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Configure the custom rule in the estimator and call the `fit` method, as follows:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在估计器中配置自定义规则并调用`fit`方法，如下所示：
- en: '[PRE10]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'After calling `fit`, Amazon SageMaker starts one training job and one processing
    job for each configured customer rule. The rule evaluation status is visible in
    the training logs in CloudWatch at regular intervals. Similar to the rule summary
    for `built_in` rules, you can view the custom rule summary using the following
    code:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在调用 `fit` 之后，Amazon SageMaker 会为每个配置的客户规则启动一个训练作业和一个处理作业。规则评估状态会在 CloudWatch
    的训练日志中以固定的时间间隔可见。类似于 `built_in` 规则的规则摘要，您可以使用以下代码查看自定义规则摘要：
- en: '[PRE11]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Using a combination of built-in and custom rules, you can gain insight into
    the training process and proactively stop the training jobs, without having to
    run an ineffective training job to completion.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 通过结合内置和自定义规则，您可以深入了解训练过程，并主动停止训练作业，而无需运行无效的训练作业直到完成。
- en: Important note
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: 'An example notebook that provides a complete walkthrough of using SageMaker
    Debugger''s built-in and custom rules is provided in the following GitHub repository:
    [https://gitlab.com/randydefauw/packt_book/-/blob/master/CH06/debugger/weather-prediction-debugger-rules.ipynb](https://gitlab.com/randydefauw/packt_book/-/blob/master/CH06/debugger/weather-prediction-debugger-rules.ipynb).'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下 GitHub 仓库中提供了一个示例笔记本，该笔记本提供了使用 SageMaker 调试器的内置和自定义规则的全过程指南：[https://gitlab.com/randydefauw/packt_book/-/blob/master/CH06/debugger/weather-prediction-debugger-rules.ipynb](https://gitlab.com/randydefauw/packt_book/-/blob/master/CH06/debugger/weather-prediction-debugger-rules.ipynb)。
- en: In this section, you got an inside look at the training process and improved
    the training job based on issues that have been detected by built-in and custom
    rules. In the next section, you will learn how to gain insight into the infrastructure
    and framework that's used for training jobs.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您对训练过程有了深入了解，并根据内置和自定义规则检测到的问题改进了训练作业。在下一节中，您将学习如何深入了解用于训练作业的基础设施和框架。
- en: Gaining insight into the training infrastructure and training framework
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 深入了解训练基础设施和训练框架。
- en: In this section, you will learn how to gain visibility into the resource utilization
    of the training infrastructure and the training framework. You will also learn
    how to analyze and implement recommendations provided by the deep profiler capability
    of SageMaker Debugger.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您将学习如何了解训练基础设施和训练框架的资源利用率。您还将学习如何分析和实施 SageMaker 调试器深度分析功能提供的建议。
- en: Debugger profiler provides you with visibility into the utilization of the infrastructure
    running ML training jobs on SageMaker. Debugger automatically monitors system
    resources such as CPU, GPU, network, I/O, and memory. Additionally, Debugger collects
    metrics specific to the training framework such as step duration, data loading,
    preprocessing, and operator runtime on CPU and GPU. You can decide to profile
    the training job in its entirety or just portions of it to collect the necessary
    framework metrics.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 调试器分析器为您提供对在 SageMaker 上运行机器学习训练作业的基础设施利用情况的可见性。调试器自动监控系统资源，如 CPU、GPU、网络、I/O
    和内存。此外，调试器收集针对训练框架的特定指标，如步骤持续时间、数据加载、预处理以及在 CPU 和 GPU 上的算子运行时间。您可以选择对整个训练作业进行分析，或者只对其部分进行分析以收集必要的框架指标。
- en: In addition to collecting the system and framework metrics, behind the scenes,
    Debugger correlates these metrics automatically, which makes it easy for you to
    identify possible resource bottlenecks and perform root cause analysis.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 除了收集系统和框架指标之外，在幕后，调试器会自动关联这些指标，这使得您能够轻松地识别可能存在的资源瓶颈并执行根本原因分析。
- en: 'Let''s explore this in detail with our example use case – predicting weather
    using PyTorch. Here, we will explore the system metrics, the framework metrics
    that are generated by the profiler, and look at implementing recommendations made
    by the profiler. This kind of deep profiling of training jobs includes the following
    high-level steps:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过我们的示例用例——使用 PyTorch 预测天气——来详细探讨这个问题。在这里，我们将探索系统指标、由分析器生成的框架指标，并查看实施分析器提出的建议。这种对训练作业的深度分析包括以下高级步骤：
- en: Training a PyTorch model for weather prediction with Debugger enabled.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在启用调试器的情况下，使用 PyTorch 模型进行天气预测训练。
- en: Analyzing and visualizing the system and framework metrics generated by the
    profiler.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 分析和可视化由分析器生成的系统和框架指标。
- en: Analyzing the profiler report generated by SageMaker Debugger.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 分析由 SageMaker 调试器生成的分析器报告。
- en: Reviewing and implementing recommendations from the profiler report.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查并实施分析器报告中的建议。
- en: Comparing the training jobs.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 比较训练作业。
- en: Let's look at each of these steps in detail.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细查看每个步骤。
- en: Training a PyTorch model for weather prediction
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 训练用于天气预测的PyTorch模型
- en: 'First, we will train a deep learning model using the PyTorch framework. Because
    of the large volumes of data and the deep learning framework, we''ll train on
    GPU instances. We will train on two `ml.p3.2xlarge` instances. Our infrastructure
    configuration will look as follows:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将使用PyTorch框架训练一个深度学习模型。由于数据量庞大和深度学习框架，我们将在GPU实例上训练。我们将在两个`ml.p3.2xlarge`实例上训练。我们的基础设施配置将如下所示：
- en: '[PRE12]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Next, let''s define `ProfilerConfig` so that it can collect system and framework
    metrics:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们定义`ProfilerConfig`，以便它可以收集系统和框架指标：
- en: '[PRE13]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now, we must configure the PyTorch estimator by using the infrastructure and
    profiler configuration as parameters:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们必须通过使用基础设施和配置分析器作为参数来配置PyTorch估计器：
- en: '[PRE14]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now, let''s start the training job with the `fit()` method:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们使用`fit()`方法开始训练作业：
- en: '[PRE15]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: In the next section, you will analyze and visualize the metrics generated by
    Debugger.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，您将分析和可视化由调试器生成的指标。
- en: Analyzing and visualizing the system and framework metrics generated by the
    profiler
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分析和可视化由分析器生成的系统和框架指标
- en: Once the training job starts, Debugger starts collecting system and framework
    metrics. In this section, you will learn how to query, analyze, and visualize
    the collected metrics.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦训练作业开始，调试器开始收集系统和框架指标。在本节中，您将学习如何查询、分析和可视化收集到的指标。
- en: 'First, let''s look at how to analyze the collected metrics manually. The following
    code block shows how to query for system metrics:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们看看如何手动分析收集到的指标。下面的代码块展示了如何查询系统指标：
- en: '[PRE16]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The preceding code block results in the following output, which shows the GPU
    of one of the training instances at a particular time:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码块的结果如下，显示了特定时间一个训练实例的GPU：
- en: '[PRE17]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The value of `0.0` indicates that this GPU is not being utilized.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '`0.0`的值表示该GPU未被利用。'
- en: 'Similar to the system metrics, you can review framework metrics as well. The
    following code block shows how to query for framework metrics:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 与系统指标类似，您也可以审查框架指标。下面的代码块展示了如何查询框架指标：
- en: '[PRE18]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The preceding code block results in the following, showing one of the framework
    metrics at a particular time:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码块的结果如下，显示了特定时间的一个框架指标：
- en: '[PRE19]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Once the metrics have been collected, you can visualize them using a heat map
    or custom plots in the notebook.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦收集到指标，您可以使用笔记本中的热图或自定义图表来可视化它们。
- en: Important note
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: 'For a more colorful visualization of the heat map and a more in-depth analysis
    of system and framework metrics, take a look at the following notebook: [https://gitlab.com/randydefauw/packt_book/-/blob/master/CH06/weather-prediction-debugger-profiler.ipynb](https://gitlab.com/randydefauw/packt_book/-/blob/master/CH06/weather-prediction-debugger-profiler.ipynb).'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更丰富的热图可视化以及更深入的系统与框架指标分析，请查看以下笔记本：[https://gitlab.com/randydefauw/packt_book/-/blob/master/CH06/weather-prediction-debugger-profiler.ipynb](https://gitlab.com/randydefauw/packt_book/-/blob/master/CH06/weather-prediction-debugger-profiler.ipynb)。
- en: Analyzing the profiler report generated by SageMaker Debugger
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分析SageMaker Debugger生成的分析报告
- en: 'In this section, we will download and review the profiler report that was generated
    by Debugger. SageMaker Debugger creates a detailed profiler report and saves it
    in an S3 bucket at `s3://<your bucket> /<job-name>/profiler-output/`. You can
    download the report directly from S3\. In the following list, we will review a
    few sections of the downloaded report:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将下载并审查由调试器生成的分析报告。SageMaker Debugger创建了一个详细的分析报告，并将其保存在S3桶中，路径为`s3://<你的桶>
    /<作业名称>/profiler-output/`。您可以直接从S3下载报告。在以下列表中，我们将审查下载报告的几个部分：
- en: '**Training job summary**'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**训练作业摘要**'
- en: 'This section of the report provides a detailed summary of the training job,
    including the start and end time of the job and the time that was spent on various
    phases of training. The following screenshot shows a sample of the training job''s
    summary:'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 报告的这一部分提供了训练作业的详细摘要，包括作业的开始和结束时间以及训练各个阶段的耗时。以下截图显示了训练作业摘要的示例：
- en: '![Figure 7.5 – Training job summary of the profiler report'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.5 – 分析报告的训练作业摘要](img/B17249_07_05.jpg)'
- en: '](img/B17249_07_05.jpg)'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.5 – 分析报告的训练作业摘要](img/B17249_07_05.jpg)'
- en: Figure 7.5 – Training job summary of the profiler report
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.5 – 分析报告的训练作业摘要
- en: '**System metrics summary**'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**系统指标摘要**'
- en: 'This section of the report shows the resource utilization of the training nodes.
    The following screenshot shows CPU, GPU, memory utilization, I/O wait time, and
    the amount of data that was sent and received:'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 本节报告显示了训练节点的资源利用率。以下截图显示了CPU、GPU、内存利用率、I/O等待时间以及发送和接收的数据量：
- en: '![Figure 7.6 – System metrics summary of the profiler report'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.6 – 性能分析报告的系统指标摘要'
- en: '](img/B17249_07_06.jpg)'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17249_07_06.jpg)'
- en: Figure 7.6 – System metrics summary of the profiler report
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.6 – 性能分析报告的系统指标摘要
- en: '**Framework metrics summary**'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**框架指标摘要**'
- en: 'This section of the report starts by showing how much time the training job
    spent in the training and validation phases, as well as the time it spent waiting:'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 本节报告首先显示了训练作业在训练和验证阶段花费的时间，以及它等待的时间：
- en: '![Figure 7.7 – Framework metrics summary of the profiler report'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.7 – 性能分析报告的框架指标摘要'
- en: '](img/B17249_07_07.jpg)'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17249_07_07.jpg)'
- en: Figure 7.7 – Framework metrics summary of the profiler report
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.7 – 性能分析报告的框架指标摘要
- en: '**Rules summary**'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**规则摘要**'
- en: 'As the training job is running, Debugger executes a set of rules to profile
    the training process. This section of the profiler report summarizes all the debugger
    rules that have been evaluated, the description of the rule, the number of times
    each rule was triggered during training, the analysis, and recommendations for
    improving the training job. The following screenshot shows the rule summary in
    table format:'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当训练作业运行时，调试器执行一系列规则来分析训练过程。本节性能分析报告总结了所有已评估的调试器规则，规则的描述，每个规则在训练期间被触发的次数，分析以及改进训练作业的建议。以下截图显示了以表格格式的规则摘要：
- en: '![Figure 7.8 – Rules summary of the profiler report'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.8 – 性能分析报告的规则摘要'
- en: '](img/B17249_07_08.jpg)'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17249_07_08.jpg)'
- en: Figure 7.8 – Rules summary of the profiler report
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.8 – 性能分析报告的规则摘要
- en: In addition to directly querying and visualizing the metrics, as well as downloading
    the profiler report in your notebook, you can use SageMaker Studio, which provides
    built-in visualizations for analyzing profiling insights.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 除了直接查询和可视化指标，以及在你的笔记本中下载性能分析报告外，你还可以使用SageMaker Studio，它提供了内置的可视化来分析性能分析洞察。
- en: 'To access Debugger in Studio, follow these steps:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Studio中访问调试器，请按照以下步骤操作：
- en: On the navigation pane, choose **Components and registries**.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在导航面板上，选择**组件和注册表**。
- en: Choose **Experiments and trails**.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**实验和试验**。
- en: Choose your training job (right-click).
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择你的训练作业（右键点击）。
- en: Choose **Debugger Insights** from the Debugger tab that opens.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从打开的调试器选项卡中选择**调试器洞察**。
- en: 'In the **Debugger** tab, you will see multiple sections. One of these sections
    is called **Training job summary**, as shown in the following screenshot. This
    built-in visualization shows training job details, such as the start time, end
    time, duration, and time spent in individual phases of training. The pie chart
    visualization shows the relative time spent by the training job in the initialization,
    training, and finalization phases:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在**调试器**选项卡中，你会看到多个部分。其中一部分被称为**训练作业摘要**，如下面的截图所示。这个内置的可视化显示了训练作业的详细信息，如开始时间、结束时间、持续时间以及训练各个阶段的耗时。饼图可视化显示了训练作业在初始化、训练和最终化阶段所花费的相对时间：
- en: '![Figure 7.9 – Debugger visualization in SageMaker Studio'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.9 – SageMaker Studio中的调试器可视化'
- en: '](img/B17249_07_09.jpg)'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17249_07_09.jpg)'
- en: Figure 7.9 – Debugger visualization in SageMaker Studio
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.9 – SageMaker Studio中的调试器可视化
- en: In this section, we reviewed a few sections of the downloaded profiler report
    at a high level. To explore the profiler report in more detail, please run through
    the notebook in our Git repository.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们从下载的性能分析报告中高屋建瓴地回顾了几个部分。要更详细地探索性能分析报告，请运行我们Git仓库中的笔记本。
- en: Analyzing and implementing recommendations from the profiler report
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分析和实施性能分析报告中的建议
- en: Now that we have recommendations from the profiler, let's analyze and implement
    a recommendation to see if it leads to an improved training job.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经从性能分析中获得了建议，让我们分析并实施一个建议，看看它是否能提高训练作业。
- en: From the rules summary table in the preceding section, we can see that the rule
    triggered a maximum number of times during our training is `LowGPUUtilization`.
    This rule indicates that there is a possibility of bottlenecks occurring due to
    blocking calls and recommends changing the distributed training strategy or increasing
    the batch size. The next rule that was triggered the most times was `BatchSize`,
    which indicates that the GPU utilization could be low because of the smaller batch
    size.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 从前一个节段的规则摘要表中，我们可以看到在训练过程中触发次数最多的规则是 `LowGPUUtilization`。这个规则表明，由于阻塞调用，可能会出现瓶颈，建议更改分布式训练策略或增加批量大小。触发次数最多的下一个规则是
    `BatchSize`，这表明由于批量大小较小，GPU 利用率可能较低。
- en: The recommendation from the profiler, based on this rule's execution, is to
    consider running on a smaller instance type and to increase the batch size. Let's
    combine the profiler recommendations from these two most triggered rules, run
    two new training jobs with different settings, and check the profiler reports
    for the new training jobs to see if there is any improvement.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 根据这个规则的执行结果，分析器的建议是考虑在较小的实例类型上运行，并增加批量大小。让我们结合这两个最常触发的规则的分析器建议，运行两个具有不同设置的新的训练作业，并检查新训练作业的分析器报告，以查看是否有任何改进。
- en: 'We will run the first training job with the same infrastructure, `()`, but
    with an increased batch size, as shown in the following code block:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用相同的基础设施，`()`，但增加批量大小来运行第一个训练作业，如下面的代码块所示：
- en: '[PRE20]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'For the next training job, we will use smaller training instances, `()`, and
    increase the batch size:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 对于下一个训练作业，我们将使用较小的训练实例，`()`，并增加批量大小：
- en: '[PRE21]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Using these two different configurations, run two different training jobs using
    `estimator.fit()`. Once the training jobs are complete, download and analyze the
    two profiler reports.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这两种不同的配置，使用 `estimator.fit()` 运行两个不同的训练作业。一旦训练作业完成，下载并分析这两个分析器报告。
- en: Comparing the two training jobs
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 比较两个训练作业
- en: 'At this point, we have a total of three completed training jobs with different
    configurations. In this section, we''ll compare the original training job to the
    two new training jobs we configured based on the recommendations from the profiler.
    When comparing these jobs, we will focus on the training time and the resulting
    training costs. The following table shows the initial and revised training job
    configurations, along with the training time, resource utilization, and cost comparisons:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们总共有三个配置不同的已完成训练作业。在本节中，我们将比较原始训练作业与根据分析器建议配置的两个新训练作业。在比较这些作业时，我们将关注训练时间和产生的训练成本。以下表格显示了初始和修订的训练作业配置，以及训练时间、资源利用率和成本比较：
- en: '![Figure 7.10 – Comparison of training jobs'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.10 – 训练作业比较'
- en: '](img/02.jpg)'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/02.jpg)'
- en: Figure 7.10 – Comparison of training jobs
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.10 – 训练作业比较
- en: First, let's compare the original training job with the training job that uses
    the first revised training configuration. In the revised training configuration,
    the batch size is increased from `64` to `1024`. This configuration change decreased
    the training time by `17637` seconds; that is, from `18262` seconds to `895` seconds.
    Assuming that the training jobs were run in the us-west-2 region, the cost of
    `p3.2xlarge` is $3.825 at the time of writing. This leads to a cost saving of
    26.67%.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们比较原始的训练作业和使用了第一次修订训练配置的训练作业。在修订的训练配置中，批量大小从 `64` 增加到 `1024`。这种配置更改将训练时间减少了
    `17637` 秒；即从 `18262` 秒减少到 `895` 秒。假设训练作业是在 us-west-2 区域运行的，写作时的 `p3.2xlarge` 成本为
    $3.825。这导致成本节省了 26.67%。
- en: Similarly, if you compare the second revised training configuration, where we
    updated both the batch size and instance type to the original, the training time
    increased but the overall training cost improved by 65.36%. If you can tolerate
    a slight increase in the training time, you can save on training costs by implementing
    recommendations from the profiler.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，如果您比较第二次修订的训练配置，其中我们将批量大小和实例类型都更新到原始配置，训练时间增加了，但整体训练成本提高了 65.36%。如果您可以容忍训练时间的轻微增加，通过实施分析器的建议可以节省训练成本。
- en: Important note
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: 'An example notebook that provides a complete walkthrough of using the SageMaker
    Debugger profiler is provided in the following GitHub repository: [https://gitlab.com/randydefauw/packt_book/-/blob/master/CH06/weather-prediction-debugger-profiler.ipynb](https://gitlab.com/randydefauw/packt_book/-/blob/master/CH06/weather-prediction-debugger-profiler.ipynb).'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下GitHub仓库中提供了一个使用SageMaker Debugger分析器的完整教程笔记本：[https://gitlab.com/randydefauw/packt_book/-/blob/master/CH06/weather-prediction-debugger-profiler.ipynb](https://gitlab.com/randydefauw/packt_book/-/blob/master/CH06/weather-prediction-debugger-profiler.ipynb).
- en: The results that were discussed in this section are from using the full dataset
    for PyTorch training. In the notebook, you will have the chance to explore the
    same functionality but with a smaller dataset.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 本节讨论的结果来自使用完整数据集进行PyTorch训练。在笔记本中，你将有机会探索相同的功能，但使用的是更小的数据集。
- en: In this section, we implemented a couple of recommendations from the profiler
    and saw considerable training improvements. There are still more recommendations
    that you can experiment with.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们实施了几项分析器的建议，并看到了显著的训练改进。还有更多建议你可以进行实验。
- en: Additionally, in this section, we focused on how to kick off an estimator with
    Debugger enabled. You can also attach a profiler to a running training job using
    `estimator.enable_default_profiling()`. Similarly, to enable Debugger's built-in
    rules, system monitoring, and framework profiling with customizable configuration
    parameters, use `estimator.update_profiler()`.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在本节中，我们专注于如何启用调试器启动估计器。你也可以使用`estimator.enable_default_profiling()`将分析器附加到正在运行的训练作业上。同样，要启用调试器内置的规则、系统监控和框架分析，并使用可定制的配置参数，请使用`estimator.update_profiler()`。
- en: Summary
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned how to use the capabilities of Amazon SageMaker
    Debugger to gain visibility of the training process, training infrastructure,
    and training framework. This visibility allows you to react to typical training
    issues such as overfitting, training loss, and stopping the training jobs from
    running to completion, only to result in sub-optimal models. Using recommendations
    from the deep profiler capabilities of Amazon SageMaker, you learned how to improve
    training jobs with respect to training time and costs.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何使用Amazon SageMaker Debugger的功能来了解训练过程、训练基础设施和训练框架。这种可见性使你能够对典型的训练问题做出反应，例如过拟合、训练损失以及停止训练作业以避免完成，结果只得到次优模型。通过使用Amazon
    SageMaker深度分析器的建议，你学习了如何从训练时间和成本的角度改进训练作业。
- en: Using the debugger capabilities discussed in this chapter, you can continuously
    improve your training jobs by tweaking the underlying ML framework parameters
    and the training infrastructure configurations for faster and cost-effective ML
    training. In the next chapter, you will learn how to manage trained models at
    scale.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 使用本章讨论的调试器功能，你可以通过调整底层机器学习框架参数和训练基础设施配置来持续改进你的训练作业，以实现更快和成本效益更高的机器学习训练。在下一章中，你将学习如何大规模管理训练好的模型。
- en: Further reading
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'For additional reading material, please review these references:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 对于额外的阅读材料，请查阅以下参考文献：
- en: 'Identify bottlenecks, improve resource utilization, and reduce ML training
    costs with the deep profiling feature in Amazon SageMaker Debugger:'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Amazon SageMaker Debugger的深度分析功能识别瓶颈、提高资源利用率并降低机器学习训练成本：
- en: '[https://aws.amazon.com/blogs/machine-learning/identify-bottlenecks-improve-resource-utilization-and-reduce-ml-training-costs-with-the-new-profiling-feature-in-amazon-sagemaker-debugger/](https://aws.amazon.com/blogs/machine-learning/identify-bottlenecks-improve-resource-utilization-and-reduce-ml-training-costs-with-the-new-profiling-feature-in-amazon-sagemaker-debugger/)'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://aws.amazon.com/blogs/machine-learning/identify-bottlenecks-improve-resource-utilization-and-reduce-ml-training-costs-with-the-new-profiling-feature-in-amazon-sagemaker-debugger/](https://aws.amazon.com/blogs/machine-learning/identify-bottlenecks-improve-resource-utilization-and-reduce-ml-training-costs-with-the-new-profiling-feature-in-amazon-sagemaker-debugger/)'
- en: 'ML Explainability with Amazon SageMaker Debugger:'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Amazon SageMaker Debugger进行机器学习可解释性：
- en: '[https://aws.amazon.com/blogs/machine-learning/ml-explainability-with-amazon-sagemaker-debugger/](https://aws.amazon.com/blogs/machine-learning/ml-explainability-with-amazon-sagemaker-debugger/)'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://aws.amazon.com/blogs/machine-learning/ml-explainability-with-amazon-sagemaker-debugger/](https://aws.amazon.com/blogs/machine-learning/ml-explainability-with-amazon-sagemaker-debugger/)'
