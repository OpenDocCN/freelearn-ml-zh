- en: Understanding the Basics of Differential Robots
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we discussed the basics of ROS, how to install it,
    and the basics of the Gazebo robot simulator. As we have already mentioned, we
    are going to create an autonomous wheeled robot from scratch. The robot that we
    are going to design is a differential drive robot, which involves having two wheels
    on opposite sides of the robot chassis, enabling the robot's direction to be adjusted
    by changing the speed of each of the two wheels.
  prefs: []
  type: TYPE_NORMAL
- en: It will be good to understand the basic ideas and terminology behind differential
    wheel robots before programming the robot. This chapter will give you an idea
    of how to analyze the robot mathematically and how to solve the robot's kinematics
    equation. The kinematics equation helps you to predict the robot's position from
    its sensor data.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Mathematical modeling of differential drive robots
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Forward kinematics of differential drive robots
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inverse kinematics of differential drive robots
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mathematical modeling of the robot
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An important part of a mobile robot is its steering system. This will help the
    robot to navigate its environment. One of the simplest and most cost-effective
    steering systems is the differential drive system. A differential drive robot
    consists of two main wheels mounted on a common axis that are controlled by separate
    motors. A differential drive system/steering system is a nonholonomic system,
    which means that it has constraints for the changing the robot's pose.
  prefs: []
  type: TYPE_NORMAL
- en: A car is an example of a nonholonomic system, as it cannot change its position
    without changing its pose. Let's look at how this type of robot works and how
    we can model the robot in terms of its mathematics.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to the differential drive system and robot kinematics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Robot kinematics** is the study of the mathematics of motion without considering
    the forces that affect the motion. It mainly deals with the geometric relationships
    that govern the system. **Robot dynamics** is the study of motion in robots in
    which all the forces involved in the robots'' movement are modeled.'
  prefs: []
  type: TYPE_NORMAL
- en: 'A mobile robot or vehicle has six **degrees of freedom** (**DOFs**) expressed
    by the pose (x, y, z, roll, pitch, and yaw). These DOFs consist of the position
    (x, y, z) and attitude (roll, pitch, and yaw). **Roll** refers to sidewise rotation,
    **pitch** refers to forward and backward rotation, and **yaw** (called the heading
    or orientation) refers to the direction in which the robot moves in the x-y plane.
    The differential drive robot moves from x to y in the horizontal plane, so the
    2D pose contains mainly x, y, and θ, where θ is the heading of the robot that
    points in the robot''s forward direction. This information is sufficient to describe
    a differential robot pose:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bf59012e-07c6-40a5-8ae5-d64ce234c08f.png)'
  prefs: []
  type: TYPE_IMG
- en: The pose of the robot in x, y, and θ in the global coordinate system
  prefs: []
  type: TYPE_NORMAL
- en: 'In a differential drive robot, the motion can be controlled by adjusting the
    velocity of two independently controlled motors on the left-hand and right-hand
    side, named V-left and V-right, respectively. The following image shows a couple
    of popular differential drive robots available on the market:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f2612c91-4061-421d-b7c6-fdb1007c3c1c.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Robot Roomba ([https://en.wikipedia.org/wiki/IRobot](https://en.wikipedia.org/wiki/IRobot))
  prefs: []
  type: TYPE_NORMAL
- en: The Roomba series of autonomous vacuum cleaners is a popular differential robot
    from iRobot.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1d830fcb-1a56-4031-983a-665969eb0f52.png)'
  prefs: []
  type: TYPE_IMG
- en: Pioneer 3-DX ([http://robots.ros.org/pioneer-3-dx/](http://robots.ros.org/pioneer-3-dx/))
  prefs: []
  type: TYPE_NORMAL
- en: The Pioneer 3-DX is a popular differential drive research platform from Omron
    Adept Mobile Robots.
  prefs: []
  type: TYPE_NORMAL
- en: Forward kinematics of a differential robot
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The forward kinematics equations for a robot with a differential drive system
    are used to solve the following problem:'
  prefs: []
  type: TYPE_NORMAL
- en: If a robot is standing in a position (*x*, *y*, *θ*) at time *t*, determine
    the pose (*x'*, *y'*, *θ'*) at *t + δt* given the control parameters *V-left*
    and *V-right*.
  prefs: []
  type: TYPE_NORMAL
- en: This technique can be calculated by the robot to follow a particular trajectory.
  prefs: []
  type: TYPE_NORMAL
- en: Explanations of the forward kinematics equation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can start by formulating a solution for forward kinematics. The following
    figure is an illustration of one of the wheels of the robot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/48ecb864-dd75-4b41-bb95-75c5e84ebb18.png)'
  prefs: []
  type: TYPE_IMG
- en: A single wheel of the robot rotating along the local y-axis
  prefs: []
  type: TYPE_NORMAL
- en: The motion around the **y-axis** is known as the roll; everything else is called
    the slip. Let's assume that no slip occurs in this case. When the wheel completes
    one full rotation, it covers a distance of *2π r*, where *r* is the radius of
    the wheel. We will assume that the movement is two-dimensional. This means that
    the surface is flat and even.
  prefs: []
  type: TYPE_NORMAL
- en: 'When the robot is about to perform a turning motion, the robot must rotate
    around a point that lies along its common left and right wheel axis. The point
    that the robot rotates around is known as the **ICC****-the instantaneous center
    of curvature**. The ICC is located outside the robot. The following diagram shows
    the wheel configuration of the differential drive robot in relation to its ICC:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/68098a0b-6c98-4d16-96fc-f8f4b711e9fd.png)'
  prefs: []
  type: TYPE_IMG
- en: Wheel configuration for a robot with a differential drive
  prefs: []
  type: TYPE_NORMAL
- en: The central concept for the derivation of the kinematic equation is the *ω*
    angular velocity of the robot. Each wheel on the robot rotates around the ICC
    along the circumference of a circle with a wheel radius of *r*.
  prefs: []
  type: TYPE_NORMAL
- en: 'The speed of the wheel is *v = 2 π r / T,* where *T* is the time taken to complete
    one full turn around the ICC. The *ω* angular velocity is defined as *2 π / T*,
    and typically has the unit of radians (or degrees) per second. Combining the equations
    for *v* and *w* yields *ω= 2 π / T*, and we can conclude the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5fab14c0-adf5-440c-a61e-854469611148.png)'
  prefs: []
  type: TYPE_IMG
- en: Equation of linear velocity
  prefs: []
  type: TYPE_NORMAL
- en: 'A detailed model of the differential drive system is shown in the following
    diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/12a41d8a-cd5c-47b4-844e-7c4a6bf21a95.png)'
  prefs: []
  type: TYPE_IMG
- en: Detailed diagram of the differential drive system
  prefs: []
  type: TYPE_NORMAL
- en: 'If we apply the previous equation to both wheels, the result will be the same-that
    is, *ω*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/773ce22d-2687-4115-b74c-5b23fcf1dedf.png)'
  prefs: []
  type: TYPE_IMG
- en: Differential drive wheel equation
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, *R* is the distance between the ICC and the midpoint of the wheel axis
    and *l* is the length of the wheel axis. After solving *ω* and *R*, we get the
    following result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1fd4d9c5-ed25-45bf-8a81-c68514c97b5b.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Equation to find the distance from the ICC to the center of the robot and the
    angular velocity of the robot
  prefs: []
  type: TYPE_NORMAL
- en: 'The previous equation is useful for solving the forward kinematics problem.
    Suppose the robot moves with an angular velocity of *ω* for *δt* seconds. This
    will result in the robot''s orientation or heading changed to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d4e8350f-5c86-4814-b29c-6c7b3dfc6f5c.png)'
  prefs: []
  type: TYPE_IMG
- en: Equation to find the change in heading
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, the center of the ICC rotation is given by basic trigonometry as the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/030cd85a-4949-421f-88a3-083513f2b820.png)'
  prefs: []
  type: TYPE_IMG
- en: Equation to find the ICC
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bc25e56a-10d8-49bf-a264-73e05f89888a.png)'
  prefs: []
  type: TYPE_IMG
- en: Rotating the robot ωδt degrees around the ICC
  prefs: []
  type: TYPE_NORMAL
- en: 'Given a starting position (*x*, *y*), the new position (*x''*, *y''*) can be
    computed using the 2D rotation matrix. The rotation around the ICC with the angular
    velocity *ω* for *δt* seconds yields the following position at the time *t + δt*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/17131971-5654-46bd-88b9-5a325e0e6cde.png)'
  prefs: []
  type: TYPE_IMG
- en: Equation to calculate the new position of the robot
  prefs: []
  type: TYPE_NORMAL
- en: The new pose (*x'*, *y'*, and *θ'*) can be computed from equation (6) and (8),
    given *ω*, *δt*, and *R*.
  prefs: []
  type: TYPE_NORMAL
- en: '*ω* can be computed from equation (5); *Vr* and *Vl* are often more difficult
    to measure accurately. Instead of measuring the velocity, the rotation of each
    wheel can be measured using sensors called **wheel encoders**. The data from the
    wheel encoders is the robot''s **odometry** values. These sensors are mounted
    on the wheel axes and deliver binary signals for each degree that the wheel rotates
    (each degree may be in the order of 0.1 mm). We will look at the detailed workings
    of the wheel encoders in *Chapter 6, Interfacing Actuators and Sensors to the
    Robot Controller*. These signals are fed to a counter so that *vδt is* the distance
    traveled from the time *t* to *t + δt*. We can write the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '*n * step = vδt*'
  prefs: []
  type: TYPE_NORMAL
- en: 'From this, we can calculate *v*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0f7407a2-41a9-4346-a4ae-a4dedf783efc.png)'
  prefs: []
  type: TYPE_IMG
- en: Equation calculating the linear velocity from the encoder data
  prefs: []
  type: TYPE_NORMAL
- en: 'If we insert equation (9) in equations (3) and (4), we get the following result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/684655cc-d7fe-4fde-b4b6-158e71e52d2e.png)'
  prefs: []
  type: TYPE_IMG
- en: Equation to calculate R from the encoder values
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, ***nl*** and ***nr*** are the encoder counts of the left and right wheels.
    ***Vl*** and ***Vr*** are the speeds of the left and right wheels respectively.
    Thus, the robot stands in pose (*x*, *y*, *θ*) and moves ***nl*** and ***nr***
    counts during a time frame of *δt*; the new pose (*x''*, *y''*, *θ''*) is given
    by calculating the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ec40f018-8896-4c85-923e-7caadac6fc8d.png)'
  prefs: []
  type: TYPE_IMG
- en: Equation to calculate the robot's position from the encoder values
  prefs: []
  type: TYPE_NORMAL
- en: where,
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2e9dc917-0d2f-46a9-9cbe-5e7b3ca7c704.png)'
  prefs: []
  type: TYPE_IMG
- en: Equation to calculate the ICC and other parameters from the encoder values
  prefs: []
  type: TYPE_NORMAL
- en: The derived kinematic equation depends mainly on the design and geometry of
    the robot. Different designs can lead to different equations.
  prefs: []
  type: TYPE_NORMAL
- en: Inverse kinematics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The forward kinematics equation provides an updated pose at a given wheel speed.
    We can now think about the inverse problem.
  prefs: []
  type: TYPE_NORMAL
- en: Stand in pose (*x*, *y*, *θ*) at time *t* and determine the *V-left* and *V-right*
    control parameters so that the pose at time *t + δt* is (*x'*, *y'*, *θ'*).
  prefs: []
  type: TYPE_NORMAL
- en: In differential drive systems, this problem may not always have a solution because
    this kind of robot can't be moved to any pose by simply setting the wheel velocity.
    It's because of the nonholonomic robots' constraints.
  prefs: []
  type: TYPE_NORMAL
- en: 'In nonholonomic robots, there are some ways to increase the constrained mobility
    if we allow a sequence of different (*V-left*, *V-right*) movements. If we insert
    the values from equations (12) and (15), we can identify some special movements
    that we can program:'
  prefs: []
  type: TYPE_NORMAL
- en: If *V-right = V-left* => *nr = nl* => *R = ∞*, *ωδT = 0* =>, this means that
    the robot moves in a straight line and *θ* remains the same
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If *V-right = -V-left* => *nr = -nl* => *R=0*, *ωδt = 2nl * step / l* and ![](img/ce532925-1a49-4e36-a478-09cfd6e45b62.png)=>
    *x' = x*, *y' = y*, *θ' = θ + ωδt* =>, this means the robot rotates in position
    around ICC-that is, any *θ* is reachable, while (*x*, *y*) remains unchanged
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Combining these operations, the following steps can be used to reach any target
    pose from the starting pose:'
  prefs: []
  type: TYPE_NORMAL
- en: Rotate until the robot's orientation coincides with the line leading from the
    starting position to the target position, *V-right = -V-left = V-rot*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drive straight until the robot's position coincides with the target position,
    *V-right = V-left = V-ahead*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rotate until the robot's orientation coincides with the target orientation,
    *V-right = -V-left = V-rot*. Here, *V-rot* and *V-ahead* can be chosen arbitrarily.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will see how we can implement the kinematics equation of the robot using
    ROS in the upcoming chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter was about the fundamental concepts of differential drive robots,
    and looked at how you can derive the kinematics equations of such robots. At the
    start of the chapter, we saw the basics of differential drive robots, and then
    we discussed the forward kinematics equations that are used in these robots. These
    equations were explained using diagrams. After looking at forward kinematics equations,
    we looked at the inverse kinematics equations for differential drive robots. We
    also looked at the basics of inverse kinematics equations.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will see how we can create a simulation of the autonomous
    mobile robot using ROS and Gazebo.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What are holonomic and nonholonomic configurations?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are robot kinematics and dynamics?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the ICC of a differential drive robot?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the forward kinematic equation in a differential robot?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the inverse kinematic equation in a differential robot?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further information
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Refer to [http://www8.cs.umu.se/~thomash/reports/KinematicsEquationsForDifferentialDriveAndArticulatedSteeringUMINF-11.19.pdf](http://www8.cs.umu.se/~thomash/reports/KinematicsEquationsForDifferentialDriveAndArticulatedSteeringUMINF-11.19.pdf)
    for more information on kinematic equations.
  prefs: []
  type: TYPE_NORMAL
