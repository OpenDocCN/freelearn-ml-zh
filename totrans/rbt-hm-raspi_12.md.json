["```py\nimport adafruit_bno055\nimport board\nimport busio\ni2c = busio.I2C(sda=board.GP0, scl=board.GP1)\nsensor = adafruit_bno055.BNO055_I2C(i2c)\nprint(\"Temperature: {} degrees C\".format(sensor.temperature))\n```", "```py\ncode.py output:\nTemperature: 21 degrees C\n```", "```py\nimport adafruit_bno055\nimport board\nimport busio\nimport time\ni2c = busio.I2C(sda=board.GP0, scl=board.GP1)\nsensor = adafruit_bno055.BNO055_I2C(i2c)\n```", "```py\ndef check_status():\n  sys_status, gyro, accel, mag = imu.calibration_status\n  print(f\"Sys: {sys_status}, Gyro: {gyro}, Accel: {accel}, Mag: {mag}\")\n  return sys_status == 3\n```", "```py\nwhile not check_status():\n  time.sleep(0.1)\n```", "```py\nwhile True:\n  data = {\"temperature\": sensor.temperature, \n          \"acceleration\": sensor.acceleration, \n          \"magnetic\": sensor.magnetic, \n          \"gyro\": sensor.gyro,\n          \"euler\": sensor.euler}\n  print(data)\n  time.sleep(0.1)\n```", "```py\nimport adafruit_bno055\n```", "```py\nleft_distance = adafruit_vl53l1x.VL53L1X(i2c0)\nright_distance = adafruit_vl53l1x.VL53L1X(i2c1)\nimu = adafruit_bno055.BNO055_I2C(i2c0)\n```", "```py\ndef check_imu_status():\n  sys_status, gyro, accel, mag = imu.calibration_status\n  uart.write(f\"Sys: {sys_status}, Gyro: {gyro}, Accel: {accel}, Mag: {mag}\\n\".encode())\n  return sys_status == 3\n```", "```py\nimport robot\nimport pid_controller\nimport asyncio\nimport time\n```", "```py\nclass FaceNorthController:\n    def __init__(self):\n        self.pid = pid_controller.PIDController(0.01, 0.010, 0)\n        self.target = 0\n    def update(self, dt, angle):\n        error = self.target - angle\n        if error > 180:\n            error -= 360\n        elif error < -180:\n            error += 360\n        control_signal = self.pid.calculate(error, dt)\n        robot.set_left(control_signal)\n        robot.set_right(-control_signal)\n```", "```py\nasync def control_loop():\n  controller = FaceNorthController()\n  last_time = time.monotonic()\n  while True:\n    await asyncio.sleep(0.1)\n    next_time = time.monotonic()\n    dt = next_time - last_time\n    last_time = next_time\n    angle = robot.imu.euler[0]\n    controller.update(dt, angle)\n    robot.uart.write(f\"{angle}, 0\\n\".encode())\n```", "```py\nasync def main():\n  while not robot.check_imu_status():\n    await asyncio.sleep(0.1)\n  robot.uart.write(\"Ready to go!\\n\".encode())\n```", "```py\n  while True:\n    if robot.uart.in_waiting:\n      command = robot.uart.readline().decode().strip()\n      if command == \"start\":\n        break\n    await asyncio.sleep(0.1)\n  await control_loop()\n```", "```py\nasyncio.run(main())\n```", "```py\nclass IMUTurnController:\n    def __init__(self):\n        self.pid = pid_controller.PIDController(0.01, 0.008, 0)\n        self.target = 0\n```", "```py\n    def update(self, dt, angle):\n        error = self.target – angle\n        if error > 180:\n            error -= 360\n        elif error < -180:\n            error += 360\n        control_signal = self.pid.calculate(error, dt)\n        robot.set_left(control_signal)\n        robot.set_right(-control_signal)\n```", "```py\nasync def command_handler(turn_controller):\n  while True:\n    if robot.uart.in_waiting:\n      command = robot.uart.readline().decode().strip()\n      if command.startswith(\"-\"):\n        turn_controller.target -= int(command.lstrip('-'))\n      elif command.startswith(\"+\"):\n        turn_controller.target += int(command.lstrip('+'))\n    await asyncio.sleep(0)\n```", "```py\nasync def control_loop():\n  controller = IMUTurnController()\n  controller.target = robot.imu.euler[0]\n  asyncio.create_task(command_handler(controller))\n  last_time = time.monotonic()\n  while True:\n    await asyncio.sleep(0.1)\n    next_time = time.monotonic()\n    dt = next_time - last_time\n    last_time = next_time\n    angle = robot.imu.euler[0]\n    controller.update(dt, angle)\n    robot.uart.write(f\"{angle}, 0\\n\".encode())\n```", "```py\nasync def main():\n  while not robot.check_imu_status():\n    await asyncio.sleep(0.1)\n  robot.uart.write(\"Ready to go!\\n\".encode())\n  await control_loop()\nasyncio.run(main())\n```"]