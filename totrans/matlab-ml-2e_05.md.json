["```py\nhelp nndatasets\n```", "```py\n    load abalone_dataset\n    [Input,Target] = abalone_dataset;\n    ```", "```py\n    help nntrain\n    TFunc = 'trainlm';\n    ```", "```py\n    HLNodesNum =10;\n    ```", "```py\n    AbaFitNet = fitnet(HLNodesNum, TFunc);\n    ```", "```py\n    help nnprocess\n    ```", "```py\n    AbaFitNet.input.processFcns =\n                       {'removeconstantrows','mapminmax'};\n    AbaFitNet.output.processFcns =\n                       {'removeconstantrows','mapminmax'};\n    ```", "```py\n    AbaFitNet.divideFcn = 'dividerand';\n    AbaFitNet.divideMode = 'sample';\n    ```", "```py\n    AbaFitNet.divideParam.trainRatio = 70/100;\n    AbaFitNet.divideParam.valRatio = 15/100;\n    AbaFitNet.divideParam.testRatio = 15/100;\n    help nndivision\n    ```", "```py\n    AbaFitNet.performFcn = 'mse';\n    help nnperformance\n    ```", "```py\n    AbaFitNet.plotFcns = {'plottrainstate','plotperform',\n                       'ploterrhist',   'plotregression'};\n    help nnplot\n    ```", "```py\n    [AbaFitNet,Trs] = train(AbaFitNet,Input,Target);\n    ```", "```py\n    SimTarget = AbaFitNet(Input);\n    Diff = gsubtract(Target, SimTarget);\n    Performance = perform(AbaFitNet, Target, SimTarget)\n    ```", "```py\n    Performance =\n        4.1539\n    ```", "```py\n    trainTargets =Target.* Trs.trainMask{1};\n    valTargets =Target.* Trs.valMask{1};\n    testTargets =TargetB.* Trs.testMask{1};\n    trainPerformance = perform(AbaFitNet,trainTargets, SimTarget)\n    valPerformance = perform(AbaFitNet,valTargets, SimTarget)\n    testPerformance = perform(AbaFitNet,testTargets, SimTarget)\n    ```", "```py\n    trainPerformance =     3.9470\n    valPerformance =     5.1255\n    testPerformance =     4.1468\n    view(AbaFitNet)\n    ```", "```py\n    figure,plotperform(Trs)\n    figure,plottrainstate(Trs)\n    ```", "```py\n    figure,ploterrhist(Diff)\n    figure,plotregression(Target, SimTarget)\n    ```", "```py\n    [Input,Target] = thyroid_dataset;\n    ```", "```py\n    trainFcn = 'trainscg'\n    ```", "```py\n    hiddenLayerSize = 10;\n    ```", "```py\n    TyroidPatNet = patternnet(hiddenLayerSize, trainFcn);\n    ```", "```py\n    TyroidPatNet.divideFcn = 'dividerand';\n    TyroidPatNet.divideMode = 'sample';\n    TyroidPatNet.divideParam.trainRatio = 70/100;\n    TyroidPatNet.divideParam.valRatio = 15/100;\n    TyroidPatNet.divideParam.testRatio = 15/100;\n    ```", "```py\n    TyroidPatNet.performFcn = 'crossentropy';\n    ```", "```py\n    TyroidPatNet.plotFcns = {'plotperform','plottrainstate','ploterrhist', 'plotconfusion', 'plotroc'};\n    ```", "```py\n    [TyroidPatNet,Trs] = train(TyroidPatNet,Input,Target);\n    ```", "```py\n    SimData = TyroidPatNet(Input);\n    Diff = gsubtract(Target, SimData);\n    performance = perform(TyroidPatNet, Target, SimData);\n    TargetInd = vec2ind(Target);\n    SimDataInd = vec2ind(SimData);\n    percentErrors = sum(TargetInd ~=\n                          SimDataInd)/numel(TargetInd);\n    ```", "```py\n    percentErrors = 0.0742\n    ```", "```py\n    trOut = SimData(:,Trs.trainInd);\n    vOut = SimData (:,Trs.valInd);\n    tsOut = SimData (:,Trs.testInd);\n    trTarg = Target(:,Trs.trainInd);\n    vTarg = Target (:,Trs.valInd);\n    tsTarg = Target (:,Trs.testInd);\n    figure, plotconfusion(trTarg, trOut, 'Train', vTarg, vOut, 'Validation', tsTarg, tsOut, 'Testing', Target,SimData,'All')\n    ```", "```py\nfigure, plotroc(trTarg, trOut, 'Train', vTarg, vOut, 'Validation', tsTarg, tsOut, 'Testing', Target,SimData,'All')\n```", "```py\n    nnstart\n    ```", "```py\nnctool\n```", "```py\n     [Input,Target] = simplecluster_dataset;\n    ```"]