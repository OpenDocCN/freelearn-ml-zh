- en: '*Chapter 2*: Deep Dive into TPOT'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第二章*: 深入探索TPOT'
- en: In this chapter, you'll learn everything about the theoretical aspects of the
    TPOT library and its underlying architecture. Topics such as architecture and
    **genetic programming** (**GP**) will be crucial to having a full grasp of the
    inner workings of the library.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将了解TPOT库的理论方面及其底层架构的所有内容。例如架构和**遗传编程**（**GP**）等主题对于全面掌握库的内部工作原理至关重要。
- en: We will go through TPOT use cases and dive deep into different approaches to
    solve various machine learning problems. You can expect to learn the basics of
    automation in regression and classification tasks.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将探讨TPOT的使用案例，深入探讨解决各种机器学习问题的不同方法。你可以期待学习回归和分类任务自动化的基础知识。
- en: We will also go through a complete environment setup for standalone Python installation
    and the Anaconda distribution and show you how to set up a virtual environment.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将介绍为独立Python安装和Anaconda发行版设置完整环境，并展示如何设置虚拟环境。
- en: 'This chapter will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Introducing TPOT
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍TPOT
- en: Types of problems TPOT can solve
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TPOT可以解决的问题类型
- en: Installing TPOT and setting up the environment
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装TPOT和设置环境
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: To complete this chapter, you only need a computer with Python installed. Both
    the standalone version and Anaconda are fine. We'll go through the installation
    for both through a virtual environment toward the end of the chapter.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成本章，你只需要一台安装了Python的计算机。无论是独立版本还是Anaconda都行。我们将在本章末尾通过虚拟环境介绍两者的安装过程。
- en: There is no code for this chapter.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本章没有代码。
- en: Introducing TPOT
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍TPOT
- en: '**TPOT**, or **Tree-based Pipeline Optimization Tool**, is an open source library
    for performing machine learning in an automated fashion with the Python programming
    language. Below the surface, it uses the well-known **scikit-learn** machine learning
    library to perform data preparation, transformation, and machine learning. It
    also uses GP procedures to discover the best-performing pipeline for a given dataset.
    The concept of GP is covered in later sections.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**TPOT**，或**基于树的流程优化工具**，是一个开源库，使用Python编程语言以自动化的方式执行机器学习。在表面之下，它使用广为人知的**scikit-learn**机器学习库来执行数据准备、转换和机器学习。它还使用GP过程来发现给定数据集的最佳性能流程。GP的概念将在后面的章节中介绍。'
- en: As a rule of thumb, you should use TPOT every time you need an automated machine
    learning pipeline. Data science is a broad field, and libraries such as TPOT enable
    you to spend much more time on data gathering and cleaning, as everything else
    is done automatically.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 按照惯例，每次你需要一个自动化的机器学习流程时都应该使用TPOT。数据科学是一个广泛的领域，像TPOT这样的库使你能够花更多的时间在数据收集和清洗上，因为其他所有事情都是自动完成的。
- en: 'The following figure shows what a typical machine learning pipeline looks like:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 下图显示了典型的机器学习流程的外观：
- en: '![Figure 2.1 – Example machine learning pipeline'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '![图2.1 – 示例机器学习流程'
- en: '](img/B16954_02_001.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/B16954_02_001.jpg]'
- en: Figure 2.1 – Example machine learning pipeline
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.1 – 示例机器学习流程
- en: The preceding figure shows which parts of a machine learning process can and
    can't be automated. The data gathering phase (**Raw data**) is essential for any
    machine learning project. In this phase, you gather data that will serve as input
    to a machine learning model. If the input data isn't good enough, or there's not
    enough of it, machine learning algorithms can't produce good-quality models.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的图显示了机器学习过程中哪些部分可以自动化，哪些不能自动化。数据收集阶段（**原始数据**）对于任何机器学习项目都是至关重要的。在这个阶段，你收集的数据将作为机器学习模型的输入。如果输入数据不够好，或者数据量不足，机器学习算法就不能产生高质量的模型。
- en: Assuming there's enough data and you can access it, the next most significant
    problem is data cleaning. This step can't be automated, at least not entirely,
    for obvious reasons. Every dataset is different; hence there's no single approach
    to data cleaning. Missing and misformatted values are the most common and the
    most time-consuming types of problem, and they typically require a substantial
    amount of domain knowledge to address successfully.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 假设有足够的数据并且你可以访问它，下一个最显著的问题就是数据清洗。这一步不能完全自动化，至少不是完全自动化，这是显而易见的原因。每个数据集都是不同的，因此没有单一的数据清洗方法。缺失和格式错误的数据值是最常见且最耗时的类型，通常需要大量的领域知识才能成功解决。
- en: Once you have a fair amount of well-prepared data, TPOT can come into play.
    TPOT uses GP to find the best algorithm for a particular task, so there's no need
    to manually choose and optimize a single algorithm. The *Darwinian process of
    natural selection* inspires genetic algorithms, but more on that in a couple of
    sections.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你有了相当数量的准备好的数据，TPOT就可以发挥作用了。TPOT使用遗传规划（GP）来寻找特定任务的最佳算法，因此无需手动选择和优化单个算法。**自然选择中的达尔文过程**启发了遗传算法，但关于这一点将在接下来的几节中详细说明。
- en: 'The TPOT pipeline has many parameters, depending on the type of problem you
    are trying to solve (regression or classification). All of the parameters are
    discussed later in the chapter, but these are the ones you should know regardless
    of the problem type:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: TPOT管道有许多参数，具体取决于你试图解决的问题类型（回归或分类）。所有参数将在本章后面讨论，但无论问题类型如何，以下是你应该知道的内容：
- en: '`generations`: Represents the number of iterations the pipeline optimization
    process is run for'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`generations`: 代表管道优化过程运行的迭代次数'
- en: '`population_size`: Represents the number of individuals to retain in the GP
    population in every generation'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`population_size`: 代表每一代GP种群中保留的个体数量'
- en: '`offspring_size`: Represents the number of offspring to produce in each generation'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`offspring_size`: 代表每一代产生的后代数量'
- en: '`mutation_rate`: Tells the GP algorithm how many pipelines to apply random
    changes to every generation'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mutation_rate`: 告诉GP算法每一代要对多少个管道应用随机变化'
- en: '`crossover_rate`: Tells the GP algorithm how many pipelines to breed every
    generation'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`crossover_rate`: 告诉GP算法每一代要繁殖多少个管道'
- en: '`cv`: Cross-validation technique used for evaluating pipelines'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cv`: 用于评估管道的交叉验证技术'
- en: '`scoring`: A function that is used to evaluate the quality of a given pipeline'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`scoring`: 用于评估给定管道质量的一个函数'
- en: 'Once TPOT finishes with the optimization, it returns Python code for the best
    pipeline it found so you can proceed with model evaluation and validation on your
    own. A simplified example of a TPOT pipeline is shown in the following figure:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦TPOT完成优化，它将返回最佳管道的Python代码，以便你可以自行进行模型评估和验证。以下图显示了TPOT管道的一个简化示例：
- en: '![Figure 2.2 – Example TPOT pipeline'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '![图2.2 – 示例TPOT管道](img/B16954_02_002.jpg)'
- en: '](img/B16954_02_002.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/B16954_02_002.jpg](img/B16954_02_002.jpg)'
- en: Figure 2.2 – Example TPOT pipeline
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.2 – 示例TPOT管道
- en: 'The TPOT library was built on top of Python''s well-known machine learning
    package `scikit-learn`. As a result, TPOT has access to all of its classes and
    methods. The preceding figure shows **PCA** and **Polynomial features** as two
    possible feature preprocessing operations. TPOT isn''t limited to these two, but
    instead can use any of the following:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: TPOT库建立在Python知名的机器学习包`scikit-learn`之上。因此，TPOT可以访问其所有类和方法。前面的图显示了**主成分分析（PCA）**和**多项式特征**作为两种可能的特征预处理操作。TPOT不仅限于这两种，还可以使用以下任何一种：
- en: '`PCA`'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PCA`'
- en: '`RandomizedPCA`'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RandomizedPCA`'
- en: '`PolynomialFeatures`'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PolynomialFeatures`'
- en: '`Binarizer`'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Binarizer`'
- en: '`StandardScaler`'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`StandardScaler`'
- en: '`MinMaxScaler`'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MinMaxScaler`'
- en: '`MaxAbsScaler`'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MaxAbsScaler`'
- en: '`RobustScaler`'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RobustScaler`'
- en: These are all classes built into `scikit-learn`, used to modify the dataset
    in some way and return a modified dataset. The next step involves some kind of
    feature selection. This step aims to select only the features with good predictive
    power and discard the others. By doing so, TPOT is reducing the dimensionality
    of the machine learning problem, which as an end result makes the problem easier
    to solve.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这些都是内置在`scikit-learn`中的类，用于以某种方式修改数据集并返回修改后的数据集。下一步涉及某种特征选择。这一步旨在仅选择具有良好预测能力的特征并丢弃其他特征。通过这样做，TPOT正在降低机器学习问题的维度，这最终使得问题更容易解决。
- en: 'The preceding figure hides this abstraction behind the **Select best features**
    step. To perform this step, TPOT can use one of the following algorithms:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的图在**选择最佳特征**步骤后面隐藏了这个抽象。为了执行这一步骤，TPOT可以使用以下算法之一：
- en: '`VarianceThreshold`'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`VarianceThreshold`'
- en: '`SelectKBest`'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SelectKBest`'
- en: '`SelectPercentile`'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SelectPercentile`'
- en: '`SelectFwe`'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SelectFwe`'
- en: '`RecursiveFeatureElimination`'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RecursiveFeatureElimination`'
- en: As you can see, TPOT is very flexible when it comes to model training approaches.
    To understand further what's going on below the surface, we'll need to cover a
    bit of GP. The following section does that.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，TPOT在模型训练方法上非常灵活。为了进一步了解表面之下发生的事情，我们需要简要介绍一些遗传规划（GP）。接下来的部分将做到这一点。
- en: A brief overview of genetic programming
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 遗传规划的简要概述
- en: '**GP** is a type of evolutionary algorithm, a subset of machine learning (*Genetic
    Programming page, GP Team; June 1, 2019*). Evolutionary algorithms are used for
    finding solutions to problems that we as humans don''t know how to solve directly.
    These algorithms generate solutions that are, at worst, comparable to the best
    human solutions, and often better.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**GP** 是一种进化算法，是机器学习的一个子集（*遗传编程页面，GP 团队；2019年6月1日*）。进化算法用于寻找我们人类不知道如何直接解决的问题的解决方案。这些算法生成的解决方案在最坏的情况下与最佳人类解决方案相当，通常更好。'
- en: In machine learning, GP can be used to discover the relationship between features
    in a dataset (**regression**), and to group data into categories (**classification**).
    In regular software engineering, GP is applied through code synthesis, genetic
    improvement, automatic bug fixing, and in developing game-playing strategies (*Genetic
    Programming page, GP Team; June 1, 2019*).
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在机器学习中，GP 可以用于发现数据集中特征之间的关系（**回归**），以及将数据分组到类别中（**分类**）。在常规软件工程中，GP 通过代码合成、遗传改进、自动错误修复以及在开发游戏策略中（*遗传编程页面，GP
    团队；2019年6月1日*）得到应用。
- en: GP is inspired by biological evolution and its mechanisms. It uses algorithms
    based on random mutation, crossover, fitness functions, and generations to solve
    the previously described regression and classification tasks for machine learning.
    These properties should sound familiar, as we covered them in the previous section.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: GP 受到生物进化和其机制的启发。它使用基于随机变异、交叉、适应度函数和代的算法来解决之前描述的机器学习回归和分类任务。这些特性应该听起来很熟悉，因为我们已经在上一节中讨论过它们。
- en: The idea behind GP is essential for advancements in machine learning because
    it is based on the *Darwinian process of natural selection*. In machine learning
    terms, these processes are used to generate optimal solutions – models and hyperparameters.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: GP 的理念对于机器学习的发展至关重要，因为它基于 *达尔文自然选择过程*。在机器学习的术语中，这些过程用于生成最优解——模型和超参数。
- en: 'Genetic algorithms have three properties:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 遗传算法有三个特性：
- en: '**Selection**: Consists of a population of possible solutions and the fitness
    function. Each fit is evaluated at every iteration.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**选择**：由可能的解决方案的种群和适应度函数组成。每个适应度在每次迭代中都会被评估。'
- en: '**Crossover**: The process of selecting the best (fittest) solution and performing
    crossover to create a new population.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**交叉**：选择最佳（最适应）的解决方案并执行交叉以创建新种群的过程。'
- en: '**Mutation**: Taking the children from the previous point and mutating them
    with some random modifications until the best solution is obtained.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**变异**：从前一点中获取后代，并通过一些随机修改对其进行变异，直到获得最佳解决方案。'
- en: It is always a good idea to know the basics and the underlying architecture
    of the language/library you are dealing with. TPOT is user-friendly and easy to
    use, so it doesn't require us to know everything about GP and genetic algorithms.
    For that reason, this chapter won't dive deeper into the topic. If you are interested
    in learning more about GP, you'll find useful links at the end of the chapter.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 了解你正在处理的语言/库的基本知识和底层架构总是一个好主意。TPOT 用户友好且易于使用，因此它不需要我们了解 GP 和遗传算法的所有内容。因此，本章不会深入探讨这个主题。如果你对学习更多关于
    GP 感兴趣，你可以在章节末尾找到有用的链接。
- en: We've discussed a lot about the good sides of machine learning automation, TPOT,
    and GP. But are there any downsides? The following section addresses a couple
    of them.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经讨论了很多关于机器学习自动化、TPOT 和 GP 的优点。但是，有没有缺点？下一节将讨论其中的一些。
- en: TPOT limitations
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: TPOT 限制
- en: Thus far, we have discussed only the good things about the TPOT library and
    the automation of machine learning processes in general. In this case, the pros
    outweigh the cons, but we should still talk about potential downsides. The first
    one is the execution time. It will vary based on the size of the dataset and the
    hardware specifications, but in general, it will take a lot of time to finish
    – hours or days for large datasets and minutes for smaller ones.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们只讨论了 TPOT 库和机器学习过程自动化的优点。在这种情况下，优点大于缺点，但我们仍然应该讨论潜在的缺点。第一个是执行时间。它将根据数据集的大小和硬件规格而变化，但一般来说，需要花费很多时间才能完成——对于大型数据集可能是几个小时或几天，对于较小的数据集可能是几分钟。
- en: It is essential to understand why. With the default TPOT settings – 100 generations
    with 100 population sizes – TPOT will evaluate 10,000 pipelines before finishing.
    That is equivalent to performing feature engineering and training of a machine
    learning model 10,000 times. Because of this, TPOT is expected to run slowly.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 理解这一点至关重要。使用默认的 TPOT 设置——100 代，100 个种群大小——TPOT 在完成之前将评估 10,000 个流程。这相当于进行了 10,000
    次特征工程和机器学习模型的训练。正因为如此，TPOT 预期会运行得较慢。
- en: Things get more complicated if you decide to bring **cross-validation** into
    the picture. This term represents a procedure where a machine learning model is
    trained *k* times on *k – 1* subsets and evaluated on a separate subset. The goal
    of cross-validation is to have a more accurate representation of the model's performance.
    The choice of *k* is arbitrary, but in practice, the most common value is 10.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你决定将 **交叉验证** 引入其中，事情会变得更加复杂。这个术语代表了一种过程，其中机器学习模型在 *k* 个 *k – 1* 个子集上训练 *k*
    次，并在一个单独的子集上进行评估。交叉验证的目的是获得模型性能的更准确表示。*k* 的选择是任意的，但在实践中，最常用的值是 10。
- en: In practice, cross-validation makes TPOT significantly slower. When using cross-validation,
    TPOT will evaluate 100 generations with 100 population sizes and 10 cross-validation
    folds by default. This results in 100,000 different pipelines to evaluate before
    finishing.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在实践中，交叉验证会使 TPOT 运行得更快。默认情况下，当使用交叉验证时，TPOT 将评估 100 代，100 个种群大小和 10 个交叉验证折。这导致在完成之前需要评估
    100,000 个不同的流程。
- en: To address this issue, TPOT introduced the `max_time_mins` parameter. It is
    set to `None` by default, but you can set its value explicitly to any integer.
    For example, specifying `max_time_mins=10` would give TPOT only 10 minutes to
    optimize the pipeline. It's not an ideal solution if you want the best results,
    but it comes in handy when you are on a tight schedule.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个问题，TPOT 引入了 `max_time_mins` 参数。默认情况下，它被设置为 `None`，但你可以明确地将它的值设置为任何整数。例如，指定
    `max_time_mins=10` 将只给 TPOT 10 分钟的时间来优化流程。如果你想要最佳结果，这不是一个理想的选择，但在时间紧迫的情况下，它还是很有用的。
- en: The second downside is that TPOT can sometimes recommend different solutions
    (pipelines) for the same dataset. This will often be a problem when the TPOT optimizer
    is run for a short amount of time. For example, if you have used the `max_time_mins`
    parameter to limit how long the optimizer would run, it's not a surprise that
    you will get a slightly different "optimal" pipeline every time.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个缺点是，TPOT 有时可能会为同一数据集推荐不同的解决方案（流程）。当 TPOT 优化器运行时间较短时，这通常会成为问题。例如，如果你已经使用了
    `max_time_mins` 参数来限制优化器的运行时间，每次得到一个略微不同的“最优”流程并不奇怪。
- en: 'This isn''t a reason to worry, as all pipelines should still outperform anything
    you can do manually in the same time frame, but it is essential to know why this
    happens. There are two possible reasons:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这并不是一个需要担心的理由，因为所有流程都应该在相同的时间框架内优于你手动完成的工作，但了解为什么会发生这种情况是至关重要的。有两个可能的原因：
- en: '*The TPOT optimizer didn''t converge*: This is the most likely scenario. TPOT
    wasn''t able to find an optimal pipeline due to lack of time, or the dataset was
    too complex to optimize for in the given time period (or both).'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*TPOT 优化器没有收敛*：这是最可能的情况。由于时间不足或数据集过于复杂，在给定的时间段内无法优化，TPOT 无法找到最优流程（或两者兼而有之）。'
- en: '*There are multiple "optimal" pipelines*: It''s not uncommon to see numerous
    approaches working identically for some machine learning problems. This is a more
    likely scenario if the dataset is relatively small.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*存在多个“最优”流程*：对于某些机器学习问题，看到多种方法以相同的方式工作并不罕见。如果数据集相对较小，这种情况更可能出现。'
- en: This section briefly introduced the TPOT library and explained its benefits
    and shortcomings. The next section goes over the types of problems TPOT is solving
    and discusses the automation of regression and classification tasks in great detail.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 本节简要介绍了 TPOT 库，并解释了它的优点和缺点。下一节将讨论 TPOT 解决的问题类型，并详细讨论回归和分类任务的自动化。
- en: Types of problems TPOT can solve
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TPOT 可以解决的问题类型
- en: The TPOT library was designed as a go-to tool for automating machine learning
    tasks; hence, it should be able to handle with ease anything you throw at it.
    We will start using TPOT in a practical sense soon. [*Chapter 3*](B16954_03_Final_SK_ePub.xhtml#_idTextAnchor051),
    *Exploring before Regression*, shows how to use the library to handle practical
    tasks with many examples, and the following chapters focus on other types of tasks.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: TPOT库被设计为自动化机器学习任务的首选工具；因此，它应该能够轻松处理你抛给它的任何东西。我们很快就会从实际的角度开始使用TPOT。[*第3章*](B16954_03_Final_SK_ePub.xhtml#_idTextAnchor051)，*在回归之前探索*，展示了如何使用该库通过许多示例来处理实际任务，接下来的章节将专注于其他类型的任务。
- en: 'In general, TPOT can be used to handle the following types of tasks:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，TPOT可以用来处理以下类型的任务：
- en: '**Regression**: Where the target variable is continuous, such as age, height,
    weight, score, or price. Refer to [*Chapter 1*](B16954_01_Final_SK_ePub.xhtml#_idTextAnchor014),
    *Machine Learning and the Idea of Automation*, for a brief overview of regression.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**回归**：目标变量是连续的，例如年龄、身高、体重、分数或价格。请参阅[*第1章*](B16954_01_Final_SK_ePub.xhtml#_idTextAnchor014)，*机器学习和自动化思想*，以了解回归的简要概述。'
- en: '**Classification**: Where the target variable is categorical, such as sold/did
    not sell, churn/did not churn, or yes/no. Refer to [*Chapter 1*](B16954_01_Final_SK_ePub.xhtml#_idTextAnchor014),
    *Machine Learning and the Idea of Automation*, for a brief overview of classification.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分类**：目标变量是分类的，例如已售/未售、流失/未流失或是/否。请参阅[*第1章*](B16954_01_Final_SK_ePub.xhtml#_idTextAnchor014)，*机器学习和自动化思想*，以了解分类的简要概述。'
- en: '**Parallel training**: TPOT can handle the training of machine learning models
    in a parallel manner through the **Dask** library. Please read [*Chapter 5*](B16954_05_Final_SK_ePub.xhtml#_idTextAnchor065),
    *Parallel Training with TPOT and Dask*, to get a full picture.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**并行训练**：TPOT可以通过**Dask**库以并行方式处理机器学习模型的训练。请阅读[*第5章*](B16954_05_Final_SK_ePub.xhtml#_idTextAnchor065)，*使用TPOT和Dask进行并行训练*，以获得全面了解。'
- en: '**Neural networks**: TPOT can even build models based on state-of-the-art neural
    network algorithms in a fully automated fashion. Please read [*Chapter 6*](B16954_06_Final_SK_ePub.xhtml#_idTextAnchor073),
    *Getting Started with Deep Learning – Crash Course in Neural Networks*, for a
    quick crash course on neural networks, and [*Chapter 7*](B16954_07_Final_SK_ePub.xhtml#_idTextAnchor086),
    *Neural Network Classifier with TPOT*, for the practical implementation of TPOT.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**神经网络**：TPOT甚至可以以完全自动化的方式基于最先进的神经网络算法构建模型。请阅读[*第6章*](B16954_06_Final_SK_ePub.xhtml#_idTextAnchor073)，*深度学习入门
    - 神经网络快速入门*，以获得关于神经网络的快速入门课程，以及[*第7章*](B16954_07_Final_SK_ePub.xhtml#_idTextAnchor086)，*TPOT神经网络分类器*，以了解TPOT的实际实现。'
- en: The rest of this section briefly discusses how TPOT handles regression and classification
    tasks and spends a good amount of time exploring and explaining their parameters,
    attributes, and functions. You will learn how TPOT handles parallel training with
    Dask in [*Chapter 5*](B16954_05_Final_SK_ePub.xhtml#_idTextAnchor065), *Parallel
    Training with TPOT and Dask*, and how it handles neural networks in [*Chapter
    6*](B16954_06_Final_SK_ePub.xhtml#_idTextAnchor073), *Getting Started with Deep
    Learning – Crash Course in Neural Networks*, because these topics require covering
    the prerequisites first.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 本节其余部分简要讨论了TPOT如何处理回归和分类任务，并花费大量时间探索和解释它们的参数、属性和函数。你将在[*第5章*](B16954_05_Final_SK_ePub.xhtml#_idTextAnchor065)，*使用TPOT和Dask进行并行训练*中学习TPOT如何处理并行训练，以及如何在[*第6章*](B16954_06_Final_SK_ePub.xhtml#_idTextAnchor073)，*深度学习入门
    - 神经网络快速入门*中处理神经网络，因为这些主题需要首先覆盖先决条件。
- en: How TPOT handles regression tasks
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: TPOT如何处理回归任务
- en: The TPOT library handles regression tasks through the `tpot.TPOTRegressor` class.
    This class performs an intelligent search over machine learning pipelines containing
    supervised regression models, preprocessors, feature selection techniques, and
    any other estimator or transformer that follows the `scikit-learn` API (*TPOT
    Documentation page, TPOT Team; November 5, 2019*).
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: TPOT库通过`tpot.TPOTRegressor`类处理回归任务。这个类在包含监督回归模型、预处理程序、特征选择技术以及遵循`scikit-learn`
    API的任何其他估计器或转换器的机器学习管道中进行智能搜索（*TPOT文档页面，TPOT团队；2019年11月5日*）。
- en: The same class also performs a search over the hyperparameters of all objects
    in a pipeline. The `tpot.TPOTRegressor` class allows us to fully customize the
    models, transformers, and parameters searched over through the `config_dict` parameter.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 同一个类也将在管道中的所有对象的超参数上执行搜索。`tpot.TPOTRegressor` 类允许我们通过 `config_dict` 参数完全自定义搜索的模型、转换器和参数。
- en: 'We will now go over the parameters that the `tpot.TPOTRegressor` class expects
    when instantiated:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将介绍 `tpot.TPOTRegressor` 类实例化时期望的参数：
- en: '`generations`: Integer or None (default = `100`). An optional parameter that
    specifies the number of iterations to run the pipeline optimization process. It
    must be positive. If it is not defined, the `max_time_mins` parameter must be
    specified instead.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`generations`: 整数或 None（默认 = `100`）。一个可选参数，用于指定运行管道优化过程的迭代次数。它必须是正数。如果没有定义，则必须指定
    `max_time_mins` 参数。'
- en: '`population_size`: Integer (default = `100`). An optional parameter that specifies
    the number of individuals to retain in the GP population in every generation.
    Must be a positive number.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`population_size`: 整数（默认 = `100`）。一个可选参数，用于指定每代中保留在 GP 种群中的个体数量。必须是一个正数。'
- en: '`offspring_size`: Integer (default = the same as `population_size`). An optional
    parameter used to specify the number of offsprings to produce in each GP generation.
    Must be a positive number.'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`offspring_size`: 整数（默认 = `population_size`）。一个可选参数，用于指定每个遗传算法（GP）代中要产生的子代数量。必须是一个正数。'
- en: '`mutation_rate`: Float (default = `0.9`). An optional parameter used to specify
    the mutation rate for the GP algorithm. Must be in the range [0.0, 1.0]. This
    parameter is used to instruct the algorithm on how many pipelines to apply random
    changes to every generation.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mutation_rate`: 浮点数（默认 = `0.9`）。一个可选参数，用于指定 GP 算法的突变率。必须在 [0.0, 1.0] 范围内。此参数用于指导算法在每代中对多少个管道应用随机变化。'
- en: '`crossover_rate`: Float (default = `0.1`). An optional parameter that instructs
    the GP algorithm on how many pipelines to "breed" every generation. Must be in
    the range [0.0, 1.0].'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`crossover_rate`: 浮点数（默认 = `0.1`）。一个可选参数，指导 GP 算法每代要“繁殖”多少个管道。必须在 [0.0, 1.0]
    范围内。'
- en: '`scoring`: String or callable (default = `neg_mean_squared_error`). An optional
    parameter used to specify the function name for regression pipeline evaluation.
    Can be `neg_median_abs_value`, `neg_mean_abs_error`, `neg_mean_squared_error`,
    or `r2`.'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`scoring`: 字符串或可调用函数（默认 = `neg_mean_squared_error`）。一个可选参数，用于指定回归管道评估的函数名称。可以是
    `neg_median_abs_value`、`neg_mean_abs_error`、`neg_mean_squared_error` 或 `r2`。'
- en: '`cv`: Integer, cross-validation generator, or an iterable (default = `5`).
    An optional parameter used to specify a cross-validation strategy for evaluating
    regression pipelines. If the passed value is an integer, it expects the number
    of folds. In other cases, it expects an object to be used as a cross-validation
    generator, or an iterable yielding train/test splits, respectively.'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cv`: 整数、交叉验证生成器或可迭代对象（默认 = `5`）。一个可选参数，用于指定评估回归管道的交叉验证策略。如果传递的值是整数，它期望折叠数。在其他情况下，它期望一个用作交叉验证生成器的对象，或一个产生训练/测试分割的可迭代对象。'
- en: '`subsample`: Float (default = `1.0`). An optional parameter used to specify
    a value for a fraction of training samples used in the optimization process. Must
    be in the range [0.0, 1.0].'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`subsample`: 浮点数（默认 = `1.0`）。一个可选参数，用于指定优化过程中使用的训练样本分数。必须在 [0.0, 1.0] 范围内。'
- en: '`n_jobs`: Integer (default = `1`). An optional parameter used to specify the
    number of processes to use in parallel for the evaluation of pipelines during
    optimization. Set it to `-1` to use all CPU cores. Set it to `-2` to use all but
    one CPU core.'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`n_jobs`: 整数（默认 = `1`）。一个可选参数，用于指定在优化过程中并行评估管道时使用的进程数。将其设置为 `-1` 以使用所有 CPU
    核心。将其设置为 `-2` 以使用除了一个以外的所有 CPU 核心。'
- en: '`max_time_mins`: Integer or None (default = `None`). An optional parameter
    used to specify how many minutes TPOT can perform the optimization. TPOT will
    optimize for less time only if all of the generations evaluate before the specified
    max time in minutes.'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`max_time_mins`: 整数或 None（默认 = `None`）。一个可选参数，用于指定 TPOT 可以执行优化的分钟数。只有当所有代在指定的最大时间分钟内评估完毕时，TPOT
    才会优化更少的时间。'
- en: '`max_eval_time_mins`: Float (default = `5`). An optional parameter used to
    specify how many minutes TPOT has to evaluate a single pipeline. If the parameter
    is set to a high enough value, TPOT will evaluate more complex pipelines. At the
    same time, it also makes TPOT run longer.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`max_eval_time_mins`: 浮点数（默认 = `5`）。一个可选参数，用于指定TPOT评估单个管道所需的时间（分钟）。如果参数设置得足够高，TPOT将评估更复杂的管道。同时，这也使得TPOT运行时间更长。'
- en: '`random_state`: Integer or None (default = `None`). An optional parameter used
    to specify the seed for a pseudo-random number generator. Use it to get reproducible
    results.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`random_state`: 整数或None（默认 = `None`）。一个可选参数，用于指定伪随机数生成器的种子。使用它以获得可重复的结果。'
- en: '`config_dict`: Dictionary, string, or None (default = `None`). An optional
    parameter used to specify a configuration dictionary for customizing the operators
    and parameters that TPOT searches during optimization. Possible inputs are as
    follows:'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config_dict`: 字典、字符串或None（默认 = `None`）。一个可选参数，用于指定在优化过程中TPOT用于自定义操作符和参数的配置字典。可能的输入如下：'
- en: 'a) *None*: TPOT uses the default configuration.'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'a) *None*: TPOT使用默认配置。'
- en: 'b) *Python dictionary*: TPOT uses your configuration.'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'b) *Python字典*: TPOT使用您的配置。'
- en: 'c) *''TPOT light''*: String; TPOT will use a built-in configuration with only
    fast models and preprocessors.'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'c) *''TPOT light''*: 字符串；TPOT将使用仅包含快速模型和预处理器的内置配置。'
- en: 'd) *''TPOT MDR''*: String; TPOT will use a built-in configuration specialized
    for genomic studies.'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'd) *''TPOT MDR''*: 字符串；TPOT将使用专门针对基因组研究的内置配置。'
- en: 'e) *''TPOT sparse''*: String; TPOT will use a configuration dictionary with
    a one-hot encoder and operators that support sparse matrices.'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'e) *''TPOT sparse''*: 字符串；TPOT将使用包含one-hot编码器和支持稀疏矩阵的操作符的配置字典。'
- en: '`template`: String (default = `None`). An optional parameter used to specify
    a template of a predefined pipeline. Used to specify the desired structure for
    the machine learning pipeline evaluated by TPOT.'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`template`: 字符串（默认 = `None`）。一个可选参数，用于指定预定义管道的模板。用于指定TPOT评估的机器学习管道的期望结构。'
- en: '`warm_start`: Boolean (default = `False`). An optional parameter used to indicate
    whether the current instance should reuse the population from previous calls to
    the `fit()` function. This function is discussed later in the chapter.'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`warm_start`: 布尔值（默认 = `False`）。一个可选参数，用于指示当前实例是否应重用`fit()`函数之前调用的种群。此函数将在本章后面讨论。'
- en: '`memory`: A memory object or a string (default = `None`). An optional parameter
    used to cache each transformer after calling the `fit()` function. This function
    is discussed later in the chapter.'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`memory`: 一个内存对象或字符串（默认 = `None`）。一个可选参数，用于在调用`fit()`函数后缓存每个转换器。此函数将在本章后面讨论。'
- en: '`use_dask`: Boolean (default = `False`). An optional parameter used to specify
    whether *Dask-ML''s* pipeline optimizations should be used.'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`use_dask`: 布尔值（默认 = `False`）。一个可选参数，用于指定是否应使用*Dask-ML*的管道优化。'
- en: '`periodic_checkpoint_folder`: Path string (default = `None`). An optional parameter
    used to specify in which folder TPOT will save pipelines while optimizing.'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`periodic_checkpoint_folder`: 路径字符串（默认 = `None`）。一个可选参数，用于指定在优化过程中TPOT将保存管道的文件夹。'
- en: '`early_stop`: Integer (default = `None`). An optional parameter used to specify
    after how many generations TPOT will stop optimizing if there''s no improvement.'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`early_stop`: 整数（默认 = `None`）。一个可选参数，用于指定在多少代之后如果没有改进，TPOT将停止优化。'
- en: '`verbosity`: Integer (default = `0`). An optional parameter used to specify
    how much information TPOT outputs to the console while running. Possible options
    are as follows:'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`verbosity`: 整数（默认 = `0`）。一个可选参数，用于指定TPOT在运行时向控制台输出多少信息。可能的选项如下：'
- en: 'a) *0*: TPOT doesn''t print anything.'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'a) *0*: TPOT不打印任何内容。'
- en: 'b) *1*: TPOT prints minimal information.'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'b) *1*: TPOT打印最小信息。'
- en: 'c) *2*: TPOT prints more information and provides a progress bar.'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'c) *2*: TPOT打印更多信息并提供进度条。'
- en: 'd) *3*: TPOT prints everything and provides a progress bar.'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'd) *3*: TPOT打印所有内容并提供进度条。'
- en: '`disable_update_check`: Boolean (default = `False`). An optional parameter
    that indicates whether the TPOT version checker should be disabled. You can ignore
    this parameter because it only tells you whether a newer version of the library
    is available, and has nothing to do with the actual training.'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`disable_update_check`: 布尔值（默认 = `False`）。一个可选参数，表示是否应禁用TPOT版本检查器。您可以忽略此参数，因为它只告诉您是否有库的新版本可用，这与实际的训练无关。'
- en: That's a lot of parameters you should know about if your goal is to truly master
    the library – at least the part of it that handles regression tasks. We've only
    covered parameters for the `tpot.TPOTRegressor` class and we will discuss attributes
    and functions next. Don't worry; there are only a couple of them available.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的目标是真正掌握这个库——至少是处理回归任务的部分——那么你应该了解很多参数。我们只涵盖了`tpot.TPOTRegressor`类的参数，接下来我们将讨论属性和函数。不用担心；可用的属性和函数并不多。
- en: 'Let''s start with attributes. There are three in total. These become available
    once the pipeline is fitted:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从属性开始。总共有三个属性。一旦管道拟合完成，这些属性就会变得可用：
- en: '`fitted_pipeline_`: Pipeline object from `scikit-learn`. Shows you the best
    pipeline that TPOT discovered during the optimization for a given training set.'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fitted_pipeline_`: 来自`scikit-learn`的管道对象。显示TPOT在给定训练集的优化过程中发现的最佳管道。'
- en: '`pareto_front_fitted_pipelines_`: Python dictionary. It contains all the pipelines
    on the TPOT Pareto front. The dictionary key is the string representing the pipeline,
    and the value is the corresponding pipeline. This argument is available only when
    the `verbosity` parameter is set to `3`.'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pareto_front_fitted_pipelines_`：Python字典。它包含TPOT帕累托前沿上的所有管道。字典的键是表示管道的字符串，值是对应的管道。此参数仅在将`verbosity`参数设置为`3`时可用。'
- en: '`evaluated_individuals_`: Python dictionary. It contains all evaluated pipelines.
    The dictionary key is the string representing the pipeline, and the value is a
    tuple containing the number of steps in each pipeline and the corresponding accuracy
    metric.'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`evaluated_individuals_`：Python字典。它包含所有评估过的管道。字典的键是表示管道的字符串，值是一个元组，包含每个管道的步骤数和相应的准确度指标。'
- en: 'We will see how the mentioned attributes work in practice in the following
    chapters. The only thing left to discuss for this section are functions belonging
    to the `tpot.TPOTRegressor` class. There are four in total:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将看到所提到的属性在实际中的应用。本节剩下要讨论的只有属于`tpot.TPOTRegressor`类的函数。总共有四个：
- en: '`fit(features, target, sample_weight=None, groups=None)`: This function is
    used to run the TPOT optimization process. The `features` parameter is an array
    of the features/predictors/attributes used for predicting the target variable.
    The `target` parameter is also an array that specifies the list of target labels
    for prediction. The other two parameters are optional. The `sample_weights` parameter
    is an array indicating per-sample weights. Higher weights indicate more importance.
    The last parameter, `groups`, is an array that specifies group labels for the
    samples used when performing cross-validation. It should only be used in conjunction
    with group cross-validation functions. The `fit()` function returns a copy of
    the fitted TPOT object.'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fit(features, target, sample_weight=None, groups=None)`: 此函数用于运行TPOT优化过程。`features`参数是用于预测目标变量的特征/预测器/属性的数组。`target`参数也是一个数组，指定了预测的目标标签列表。其他两个参数是可选的。`sample_weights`参数是一个表示每个样本权重的数组。较高的权重表示更高的重要性。最后一个参数`groups`是一个数组，指定了在执行交叉验证时用于样本的组标签。它应仅与组交叉验证函数一起使用。`fit()`函数返回拟合的TPOT对象的副本。'
- en: '`predict(features)`: This function is used to generate new predictions based
    on the `features` parameter. This parameter is an array containing features/predictors/attributes
    for predicting the target variable. The function returns an array of predictions.'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`predict(features)`: 此函数用于根据`features`参数生成新的预测。此参数是一个包含用于预测目标变量的特征/预测器/属性的数组的数组。该函数返回预测的数组。'
- en: '`score(testing_features, testing_target)`: This function returns a score of
    the optimized pipeline on a given testing data. The function accepts two parameters.
    The first one is `testing_features`. It is an array/feature matrix of the testing
    set. The second one is `testing_target`. It is also an array, but of target labels
    for prediction in the training set. The function returns the accuracy score on
    the test set.'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`score(testing_features, testing_target)`: 此函数返回给定测试数据上优化管道的分数。该函数接受两个参数。第一个参数是`testing_features`。它是测试集的数组/特征矩阵。第二个参数是`testing_target`。它也是一个数组，但它是训练集中预测的目标标签。该函数返回测试集上的准确度分数。'
- en: '`export(output_file_name)`: This function is used to export the optimized pipeline
    as Python code. The function accepts a single parameter, `output_file_name`. It
    is used to specify the path and a filename where the Python code should be stored.
    If the value for the mentioned parameter isn''t specified, the whole pipeline
    is returned as text.'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`export(output_file_name)`: 此函数用于将优化后的管道导出为Python代码。该函数接受一个参数，`output_file_name`。它用于指定Python代码应存储的路径和文件名。如果未指定所提及的参数值，则整个管道将作为文本返回。'
- en: With this overview of parameters, attributes, and functions, you are ready to
    use TPOT's regression capabilities in practice. [*Chapter 3*](B16954_03_Final_SK_ePub.xhtml#_idTextAnchor051),
    *Exploring before Regression*, is packed with regression examples, so don't hesitate
    to jump to it if you want to automate regression tasks.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 通过对参数、属性和函数的概述，您现在可以使用TPOT的回归功能进行实践。[*第3章*](B16954_03_Final_SK_ePub.xhtml#_idTextAnchor051)，*回归前的探索*，充满了回归示例，所以如果您想自动化回归任务，请不要犹豫，直接跳转到那里。
- en: The next section of this chapter discusses how TPOT handles classification tasks.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的下一段将讨论TPOT如何处理分类任务。
- en: How TPOT handles classification tasks
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: TPOT如何处理分类任务
- en: The TPOT library handles classification tasks through the `tpot.TPOTClassifer`
    class. This class performs a search over machine learning pipelines containing
    supervised regression models, preprocessors, feature selection techniques, and
    any other estimator or transformer that follows the `scikit-learn` API (*TPOT
    Documentation page, TPOT Team; November 5, 2019*). The class also performs a search
    over the hyperparameters of all objects in the pipeline.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: TPOT库通过`tpot.TPOTClassifier`类处理分类任务。此类在包含监督回归模型、预处理程序、特征选择技术以及遵循`scikit-learn`
    API的任何其他估计器或转换器的机器学习管道中进行搜索（*TPOT文档页面，TPOT团队；2019年11月5日*）。该类还搜索管道中所有对象的超参数。
- en: The `tpot.TPOTClassifier` class allows us to fully customize the models, transformers,
    and parameters that will be searched over through the `config_dict` parameter.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '`tpot.TPOTClassifier`类允许我们通过`config_dict`参数完全自定义将被搜索的模型、转换器和参数。'
- en: The `tpot.TPOTClassifier` class contains mostly the same parameters, attributes,
    and functions that the previously discussed `tpot.TPOTRegressor` has, so going
    over all of them again in detail would be redundant. Instead, we will just mention
    the identical parameters, attributes, and functions, and we will introduce and
    explain the ones that are unique for classification or work differently.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '`tpot.TPOTClassifier`类包含的大部分参数、属性和函数与之前讨论的`tpot.TPOTRegressor`相同，因此再次详细讨论它们将是冗余的。相反，我们只需提及相同的参数、属性和函数，并将介绍和解释那些用于分类或工作方式不同的函数。'
- en: 'First, let''s go over the parameters:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们回顾一下参数：
- en: '`generations`'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`generations`'
- en: '`population_size`'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`population_size`'
- en: '`offspring_size`'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`offspring_size`'
- en: '`mutation_rate`'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mutation_rate`'
- en: '`crossover_rate`'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`crossover_rate`'
- en: '`scoring`: String or callable (default = `accuracy`). This is an optional parameter
    used to evaluate the quality of a given pipeline for the classification problem.
    The following scoring functions can be used: `accuracy`, `adjusted_rand_score`,
    `average_precision`, `balanced_accuracy`, `f1`, `f1_macro`, `f1_micro`, `f1_samples`,
    `f1_weighted`, `neg_log_loss`, `precision`, `recall`, `recall_macro`, `recall_micro`,
    `recall_samples`, `recall_weighted`, `jaccard`, `jaccard_macro`, `jaccard_micro`,
    `jaccard_samples`, `jaccard_weighted`, `roc_auc`, `roc_auc_ovr`, `roc_auc_ovo`,
    `roc_auc_ovr_weighted`, or `roc_auc_ovo_weighted`. If you want to use a custom
    scoring function, you can pass it as a function with the following signature:
    `scorer(estimator, X, y)`.'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`scoring`: 字符串或可调用函数（默认 = `accuracy`）。这是一个可选参数，用于评估给定管道在分类问题中的质量。以下评分函数可以使用：`accuracy`、`adjusted_rand_score`、`average_precision`、`balanced_accuracy`、`f1`、`f1_macro`、`f1_micro`、`f1_samples`、`f1_weighted`、`neg_log_loss`、`precision`、`recall`、`recall_macro`、`recall_micro`、`recall_samples`、`recall_weighted`、`jaccard`、`jaccard_macro`、`jaccard_micro`、`jaccard_samples`、`jaccard_weighted`、`roc_auc`、`roc_auc_ovr`、`roc_auc_ovo`、`roc_auc_ovr_weighted`、或
    `roc_auc_ovo_weighted`。如果您想使用自定义评分函数，您可以传递一个具有以下签名的函数：`scorer(estimator, X, y)`。'
- en: '`cv`'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cv`'
- en: '`subsample`'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`subsample`'
- en: '`n_jobs`'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`n_jobs`'
- en: '`max_time_mins`'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`max_time_mins`'
- en: '`max_eval_time_mins`'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`max_eval_time_mins`'
- en: '`random_state`'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`random_state`'
- en: '`config_dict`'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config_dict`'
- en: '`template`'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`template`'
- en: '`warm_start`'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`warm_start`'
- en: '`memory`'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`memory`'
- en: '`use_dask`'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`use_dask`'
- en: '`periodic_checkpoint_folder`'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`periodic_checkpoint_folder`'
- en: '`early_stop`'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`early_stop`'
- en: '`verbosity`'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`verbosity`'
- en: '`disable_update_check`'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`disable_update_check`'
- en: '`log_file`: File-like class or string (default = `None`). This is an optional
    parameter used to save progress content to a file. If a string value is provided,
    it should be the path and the filename of the desired output file.'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`log_file`: 类似于文件的对象或字符串（默认 = `None`）。这是一个可选参数，用于将进度内容保存到文件。如果提供一个字符串值，它应该是所需输出文件的路径和文件名。'
- en: As we can see, one parameter has changed, and one parameter is completely new.
    To repeat – please refer to the preceding subsection for detailed clarifications
    on what every parameter does.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，一个参数已经改变，一个参数是完全新的。为了重复——请参考前面的子节，以获取每个参数的详细说明。
- en: 'Next, we have to discuss the attributes of the `tpot.TPOTClassifier` class.
    These become available once the pipeline optimization process is finished. There
    are three in total, and all of them behave identically to the `tpot.TPOTRegressor`
    class:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们必须讨论`tpot.TPOTClassifier`类的属性。一旦管道优化过程完成，它们就会变得可用。总共有三个，它们的行为与`tpot.TPOTRegressor`类完全相同：
- en: '`fitted_pipeline_`'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fitted_pipeline_`'
- en: '`pareto_front_fitted_pipelines_`'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pareto_front_fitted_pipelines_`'
- en: '`evaluated_individuals_`'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`evaluated_individuals_`'
- en: 'Finally, we will discuss functions. As with the parameters, all are listed,
    but only the new and changed ones are discussed in detail. There are five functions
    in total:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将讨论函数。与参数一样，所有函数都被列出，但只有新和更改的函数会详细讨论。总共有五个函数：
- en: '`fit(features, classes, sample_weight=None, groups=None)`: This function behaves
    identically to the one in `tpot.TPOTRegressor`, but the second parameter is called
    `classes` instead of `target`. This parameter expects an array of class labels
    for prediction.'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fit(features, classes, sample_weight=None, groups=None)`: 此函数的行为与`tpot.TPOTRegressor`中的函数相同，但第二个参数被称作`classes`而不是`target`。此参数期望一个用于预测的类别标签数组。'
- en: '`predict(features)`'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`predict(features)`'
- en: '`predict_proba(features)`: This function does the same task as the `predict()`
    function but returns class probabilities instead of classes. You can see where
    the model was completely certain about predictions and where it wasn''t so certain
    by examining the probabilities. You can also use class probabilities to adjust
    the decision threshold. You will learn how to do that in [*Chapter 4*](B16954_04_Final_SK_ePub.xhtml#_idTextAnchor058),
    *Exploring before Classification*.'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`predict_proba(features)`: 此函数与`predict()`函数执行相同的任务，但返回类别概率而不是类别。你可以通过检查概率来了解模型在预测上完全确定和不确定的地方。你还可以使用类别概率来调整决策阈值。你将在[*第4章*](B16954_04_Final_SK_ePub.xhtml#_idTextAnchor058)，*在分类之前探索*中学习如何做到这一点。'
- en: '`score(testing_features, testing_target)`'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`score(testing_features, testing_target)`'
- en: '`export(output_file_name)`'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`export(output_file_name)`'
- en: You are now ready to see how TPOT works in practice. Most of the time, there's
    no need to mess around with some of the listed parameters, but you need to know
    that they exist for more advanced use cases. [*Chapter 4*](B16954_04_Final_SK_ePub.xhtml#_idTextAnchor058),
    *Exploring before Classification*, is packed with classification examples, so
    don't hesitate to jump to it if you want to learn how to automate classification
    tasks.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你准备好了解TPOT在实际中的工作了。大多数时候，没有必要与列出的某些参数纠缠，但你需要知道它们存在，以便于更高级的使用场景。[*第4章*](B16954_04_Final_SK_ePub.xhtml#_idTextAnchor058)，*在分类之前探索*，充满了分类示例，所以如果你想学习如何自动化分类任务，不要犹豫，直接跳转到那里。
- en: The next section of this chapter discusses how to set up a TPOT environment
    through a virtual environment, both for standalone Python installation and installation
    through Anaconda.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的下一节讨论了如何通过虚拟环境设置TPOT环境，无论是对于独立的Python安装还是通过Anaconda安装。
- en: Installing TPOT and setting up the environment
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装TPOT和设置环境
- en: This section discusses the last required step before diving into the practical
    stuff – installation and environment setup. It is assumed that you have Python
    3 installed, either through the standalone installation or through Anaconda.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 本节讨论了在深入实际内容之前所需的最后一步——安装和环境设置。假设你已经通过独立安装或Anaconda安装了Python 3。
- en: 'You will learn how to set up a virtual environment for TPOT for the following
    scenarios:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 你将学习如何在以下场景下为TPOT设置虚拟环境：
- en: Standalone Python
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 独立Python
- en: Anaconda
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Anaconda
- en: There's no need to read both installation sections, so just pick whichever suits
    you better. There shouldn't be any difference with regards to installation between
    operating systems. If you have Python installed as a standalone installation,
    you have access to `pip` through the terminal. If you have it installed through
    Anaconda, you have access to Anaconda Navigator.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 没有必要阅读两个安装部分，只需选择更适合您的一个即可。在操作系统之间，安装方面不应该有任何差异。如果您已将Python作为独立安装安装，您可以通过终端访问`pip`。如果您通过Anaconda安装，您可以通过Anaconda
    Navigator访问。
- en: Installing and configuring TPOT with standalone Python installation
  id: totrans-172
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在独立Python安装中安装和配置TPOT
- en: 'Before proceeding, make sure to have Python and `pip` (package manager for
    Python) installed. You can check whether `pip` is installed by entering the following
    line of code into the terminal:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，请确保已安装Python和`pip`（Python的包管理器）。您可以通过在终端中输入以下代码行来检查`pip`是否已安装：
- en: '[PRE0]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'If you see output like the one in the following figure, you are good to go:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您看到以下图中的输出，那么您就可以开始了：
- en: '![Figure 2.3 – Checking whether pip is installed'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.3 – 检查pip是否已安装'
- en: '](img/B16954_02_003.jpg)'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片 B16954_02_003.jpg]'
- en: Figure 2.3 – Checking whether pip is installed
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.3 – 检查pip是否已安装'
- en: 'We can now proceed to the virtual environment setup:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以继续设置虚拟环境：
- en: 'The first thing to do is to install the `virtualenv` package. To do so, execute
    this line from the terminal:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首件事是安装`virtualenv`包。为此，从终端执行此行：
- en: '[PRE1]'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: After a couple of seconds, you should see a success message, as shown in the
    following figure:![Figure 2.4 – virtualenv installation
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 几秒钟后，您应该会看到成功消息，如图所示：![图 2.4 – virtualenv 安装
- en: '](img/B16954_02_004.jpg)'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片 B16954_02_004.jpg]'
- en: Figure 2.4 – virtualenv installation
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 2.4 – virtualenv 安装
- en: 'The next step is to create a folder where the TPOT environment will be stored.
    Ours is located in the `Documents` folder, but you can store it anywhere. Here
    are the exact shell lines you need to execute to create the folder and install
    the Python virtual environment:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是创建一个文件夹，其中将存储TPOT环境。我们的位于`Documents`文件夹中，但您可以将它存储在任何地方。以下是您需要执行的精确shell行，以创建文件夹并安装Python虚拟环境：
- en: '[PRE2]'
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The execution and results are shown in the following figure:![Figure 2.5 – Creating
    a virtual environment
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行和结果如图所示：![图 2.5 – 创建虚拟环境
- en: '](img/B16954_02_005.jpg)'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片 B16954_02_005.jpg]'
- en: Figure 2.5 – Creating a virtual environment
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 2.5 – 创建虚拟环境
- en: The environment is successfully installed now.
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 环境现在已成功安装。
- en: 'To activate the environment, you need to execute the following line from the
    terminal:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要激活环境，您需要从终端执行以下行：
- en: '[PRE3]'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The text in parentheses confirms that the environment is activated. Take a look
    at the change from the `base` environment to `tpot_env` in the following figure:![Figure
    2.6 – Activating a virtual environment
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 括号中的文本确认环境已激活。请看以下图中从`base`环境到`tpot_env`的变化：![图 2.6 – 激活虚拟环境
- en: '](img/B16954_02_006.jpg)'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片 B16954_02_006.jpg]'
- en: Figure 2.6 – Activating a virtual environment
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 2.6 – 激活虚拟环境
- en: 'To deactivate the environment, enter the following line into the terminal:'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要停用环境，请在终端中输入以下行：
- en: '[PRE4]'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '`numpy`: Python''s go-to library for numerical computations.'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`numpy`：Python进行数值计算的首选库。'
- en: '`pandas`: A well-known library for data loading, processing, preparation, transformation,
    aggregation, and even visualization.'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`pandas`：一个知名的数据加载、处理、准备、转换、聚合甚至可视化的库。'
- en: '`matplotlib`: Python''s standard data visualization library. We will use it
    sometimes for basic plots.'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`matplotlib`：Python的标准数据可视化库。我们有时会使用它进行基本绘图。'
- en: '`seaborn`: A data visualization library with more aesthetically pleasing visuals
    than `matplotlib`.'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`seaborn`：一个比`matplotlib`更美观的数据可视化库。'
- en: '`scikit-learn`: Python''s go-to library for machine learning and everything
    related to it.'
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`scikit-learn`：Python进行机器学习和与之相关的所有内容的首选库。'
- en: '`TPOT`: Used to find optimal machine learning pipelines in an automated fashion.'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`TPOT`：用于以自动化方式找到最优机器学习管道。'
- en: 'To install every mentioned library, you can execute the following line from
    the opened terminal window:'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要安装所有提到的库，您可以从打开的终端窗口执行以下行：
- en: '[PRE5]'
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Python will immediately start downloading and installing libraries, as shown
    in the following figure:'
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Python将立即开始下载和安装库，如图所示：
- en: '![Figure 2.8 – Installing libraries with pip'
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 2.8 – 使用pip安装库'
- en: '](img/B16954_02_008.jpg)'
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片 B16954_02_008.jpg]'
- en: Figure 2.8 – Installing libraries with pip
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 2.8 – 使用pip安装库
- en: 'To test whether the environment was successfully configured, we can open `JupyterLab`
    from the terminal. Execute the following shell command once the libraries are
    installed:'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要测试环境是否已成功配置，我们可以从终端打开`JupyterLab`。在安装完库后，执行以下shell命令：
- en: '[PRE6]'
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'If you see something similar to the following, then everything went according
    to plan. The browser window with Jupyter should open immediately:'
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果您看到以下类似内容，那么一切按计划进行。Jupyter的浏览器窗口应立即打开：
- en: '![Figure 2.9 – Starting JupyterLab for standalone installation'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图2.9 – 为独立安装启动JupyterLab'
- en: '](img/B16954_02_009.jpg)'
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16954_02_009.jpg)'
- en: Figure 2.9 – Starting JupyterLab for standalone installation
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图2.9 – 为独立安装启动JupyterLab
- en: For the final check, we will take a look at which Python version came with the
    environment. This can be done straight from the notebooks, as shown in the following
    figure:![Figure 2.10 – Checking the Python version for the standalone installation
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后的检查，我们将查看环境中附带的是哪个Python版本。这可以直接从笔记本中完成，如图所示：![图2.10 – 检查独立安装的Python版本
- en: '](img/B16954_02_010.jpg)'
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16954_02_010.jpg)'
- en: Figure 2.10 – Checking the Python version for the standalone installation
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图2.10 – 检查独立安装的Python版本
- en: 'Finally, we will see whether the TPOT library was installed by importing it
    and printing the version. This check can also be done from the notebooks. Follow
    the instructions in the following figure to see how:'
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们将通过导入并打印版本来查看TPOT库是否已安装。此检查也可以从笔记本中完成。按照以下图示中的说明进行操作：
- en: '![Figure 2.11 – Checking the TPOT version for the standalone installation'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '![图2.11 – 检查独立安装的TPOT版本'
- en: '](img/B16954_02_011.jpg)'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16954_02_011.jpg)'
- en: Figure 2.11 – Checking the TPOT version for the standalone installation
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.11 – 检查独立安装的TPOT版本
- en: TPOT is now successfully installed in a virtual environment. The next section
    covers how to install and configure the environment with Anaconda.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: TPOT现在已成功安装在虚拟环境中。下一节将介绍如何使用Anaconda安装和配置环境。
- en: Installing and configuring TPOT through Anaconda
  id: totrans-224
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过Anaconda安装和配置TPOT
- en: 'Before proceeding, make sure you have Anaconda installed on your machine. We
    will use Anaconda to create and manage our environment and do the configurations
    from there:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，请确保您的机器上已安装Anaconda。我们将使用Anaconda创建和管理我们的环境，并从那里进行配置：
- en: To start, open up Anaconda Navigator:![Figure 2.12 – Anaconda Navigator
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要开始，打开Anaconda Navigator：![图2.12 – Anaconda Navigator
- en: '](img/B16954_02_012.jpg)'
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16954_02_012.jpg)'
- en: Figure 2.12 – Anaconda Navigator
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图2.12 – Anaconda Navigator
- en: To create a new virtual environment, click on the **Create** button in the bottom-left
    portion of the screen:![Figure 2.13 – Creating a new environment in Anaconda
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要创建一个新的虚拟环境，请点击屏幕左下角的**创建**按钮：![图2.13 – 在Anaconda中创建新环境
- en: '](img/B16954_02_013.jpg)'
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16954_02_013.jpg)'
- en: Figure 2.13 – Creating a new environment in Anaconda
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图2.13 – 在Anaconda中创建新环境
- en: After clicking on the `base (root)` environment. Here's how it should look:![Figure
    2.15 – Listing of all virtual environments
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在点击`base (root)`环境后。以下是它应有的样子：![图2.15 – 所有虚拟环境的列表
- en: '](img/B16954_02_015.jpg)'
  id: totrans-233
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16954_02_015.jpg)'
- en: Figure 2.15 – Listing of all virtual environments
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图2.15 – 所有虚拟环境的列表
- en: 'You are now ready to install libraries in your virtual environment. Anaconda
    makes it easy to open the environment from the terminal, by clicking on the play
    button and selecting the `jupyterlab`: A notebook environment required for analyzing
    and exploring data and building machine learning models in an interactive way.'
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您现在可以开始在虚拟环境中安装库了。Anaconda通过点击播放按钮并选择`jupyterlab`，使您能够轻松地从终端打开环境：这是一个用于以交互方式分析和探索数据以及构建机器学习模型的笔记本环境。
- en: '`numpy`: Python''s go-to library for numerical computations.'
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`numpy`：Python进行数值计算的常用库。'
- en: '`pandas`: A well-known library for data loading, processing, preparation, transformation,
    aggregation, and even visualization.'
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`pandas`：一个用于数据加载、处理、准备、转换、聚合甚至可视化的知名库。'
- en: '`matplotlib`: Python''s standard data visualization library. We will use it
    sometimes for basic plots.'
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`matplotlib`：Python的标准数据可视化库。我们有时会使用它进行基本绘图。'
- en: '`seaborn`: A data visualization library with more aesthetically pleasing visuals
    than `matplotlib`.'
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`seaborn`：一个比`matplotlib`更具视觉吸引力的数据可视化库。'
- en: '`scikit-learn`: Python''s go-to library for machine learning and everything
    related to it.'
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`scikit-learn`：Python进行机器学习和相关内容的常用库。'
- en: '`TPOT`: Used to find optimal machine learning pipelines in an automated fashion.'
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`TPOT`：用于以自动化的方式寻找最优机器学习流程。'
- en: 'To install every mentioned library, you can execute the following line from
    the opened terminal window:'
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要安装所有提到的库，你可以从打开的终端窗口中执行以下行：
- en: '[PRE7]'
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Python should immediately start downloading and installing the libraries, as
    shown in the following figure:'
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Python 应该会立即开始下载和安装库，如下图所示：
- en: '![Figure 2.17 – Library installation through the terminal'
  id: totrans-245
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 2.17 – 通过终端安装库'
- en: '](img/B16954_02_017.jpg)'
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16954_02_017.jpg)'
- en: Figure 2.17 – Library installation through the terminal
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 2.17 – 通过终端安装库
- en: 'To test whether the environment was successfully configured, we can open `JupyterLab`
    from the terminal. Execute the following shell command once the libraries are
    installed:'
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了测试环境是否成功配置，我们可以从终端打开 `JupyterLab`。在库安装完成后，执行以下 shell 命令：
- en: '[PRE8]'
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'If you see something similar to the following, then everything went according
    to plan. The browser window with Jupyter should open immediately:'
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你看到以下类似的内容，那么一切按计划进行。Jupyter 的浏览器窗口应该会立即打开：
- en: '![Figure 2.18 – Starting JupyterLab from the terminal'
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 2.18 – 从终端启动 JupyterLab'
- en: '](img/B16954_02_018.jpg)'
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16954_02_018.jpg)'
- en: Figure 2.18 – Starting JupyterLab from the terminal
  id: totrans-253
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 2.18 – 从终端启动 JupyterLab
- en: For the final check, we will take a look at which Python version came with the
    environment. This can be done straight from the notebooks, as shown in the following
    figure:![Figure 2.19 – Checking the Python version
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了最后的检查，我们将查看环境附带的是哪个 Python 版本。这可以直接从笔记本中完成，如下图所示：![图 2.19 – 检查 Python 版本
- en: '](img/B16954_02_019.jpg)'
  id: totrans-255
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16954_02_019.jpg)'
- en: Figure 2.19 – Checking the Python version
  id: totrans-256
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 2.19 – 检查 Python 版本
- en: 'Finally, we will see whether the TPOT library was installed by importing it
    and printing the version. This check can also be done from the notebooks. Follow
    the instructions in the following figure to see how:'
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们将通过导入并打印版本来查看 TPOT 库是否已安装。这个检查也可以从笔记本中完成。按照以下图中的说明查看如何操作：
- en: '![Figure 2.20 – Checking the TPOT version'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.20 – 检查 TPOT 版本'
- en: '](img/B16954_02_020.jpg)'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16954_02_020.jpg)'
- en: Figure 2.20 – Checking the TPOT version
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.20 – 检查 TPOT 版本
- en: We are now ready to proceed with the practical uses of TPOT.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以开始使用 TPOT 的实际应用了。
- en: Summary
  id: totrans-262
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: You've learned a lot in this chapter – from how TPOT works and GP to setting
    up the environment with `pip` and Anaconda. You are now ready to tackle hands-on
    tasks in an automated way.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 你在本章中学到了很多——从 TPOT 的工作原理和遗传规划到使用 `pip` 和 Anaconda 设置环境。你现在可以以自动化的方式处理实际任务了。
- en: The following chapter dives deep into handling regression tasks with TPOT with
    a couple of examples. Everything discussed during this chapter will become much
    clearer soon, after we get our hands dirty. Then, in [*Chapter 4*](B16954_04_Final_SK_ePub.xhtml#_idTextAnchor058),
    *Exploring before Classification*, you will further reinforce your knowledge by
    solving classification tasks.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 以下章节将深入探讨使用 TPOT 处理回归任务，并附上几个示例。在本章讨论的所有内容，在我们动手实践后将会变得非常清晰。然后，在[*第 4 章*](B16954_04_Final_SK_ePub.xhtml#_idTextAnchor058)
    *在分类之前探索*，你将通过解决分类任务来进一步巩固你的知识。
- en: Q&A
  id: totrans-265
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Q&A
- en: In your own words, define the TPOT library.
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用你自己的话定义 TPOT 库。
- en: Name and explain a couple of TPOT 's limitations.
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 列出并解释 TPOT 的几个局限性。
- en: How would you limit the optimization time in TPOT?
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你会如何限制 TPOT 中的优化时间？
- en: Briefly define the term "genetic programming."
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 简要定义“遗传编程”这个术语。
- en: List and explain the five parameters of the `tpot.TPOTRegressor` class.
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 列出并解释 `tpot.TPOTRegressor` 类的五个参数。
- en: List and explain the different and new parameters introduced in the `tpot.TPOTClassifier`
    class.
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 列出并解释 `tpot.TPOTClassifier` 类中引入的不同和新参数。
- en: What are virtual environments and why are they useful?
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 虚拟环境是什么，为什么它们有用？
- en: Further reading
  id: totrans-273
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Here are the sources we referenced in this chapter:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是本章中引用的资料来源：
- en: '*Genetic programming page*: [http://geneticprogramming.com](http://geneticprogramming.com/)'
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*遗传编程页面*: [http://geneticprogramming.com](http://geneticprogramming.com/)'
- en: '*TPOT documentation page*: [http://epistasislab.github.io/tpot/](http://epistasislab.github.io/tpot/%20)'
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*TPOT 文档页面*: [http://epistasislab.github.io/tpot/](http://epistasislab.github.io/tpot/%20)'
