["```py\n\nfrom qiskit_nature.drivers import Molecule \n\nfrom qiskit_nature.drivers.second_quantization import \\ \n\n    ElectronicStructureMoleculeDriver, ElectronicStructureDriverType \n\nfrom qiskit_nature.problems.second_quantization import \\ \n\n    ElectronicStructureProblem \n\nmol = Molecule(geometry=[[’H’, [0., 0., -0.37]], \n\n                        [’H’, [0., 0., 0.37]]]) \n\ndriver = ElectronicStructureMoleculeDriver(mol, basis=’sto3g’, \n\n        driver_type=ElectronicStructureDriverType.PYSCF) \n\nproblem = ElectronicStructureProblem(driver) \n\nsecqop = problem.second_q_ops() \n\nprint(secqop[0])\n\n```", "```py\n\nFermionic Operator \n\nregister length=4, number terms=36 \n\n  -1.2533097866459775 * ( +_0 -_0 ) \n\n+ -0.47506884877217725 * ( +_1 -_1 ) \n\n+ -1.2533097866459775 * ( +_2 -_2 ) \n\n+ -0.47506884877217725 * ( +_3 -_3 ) \n\n+ -0.3373779634072241 * ( +_0 +_0 -_0 -_0 ) \n\n+ -0.0 ...\n\n```", "```py\n\nfrom qiskit_nature.converters.second_quantization import QubitConverter \n\nfrom qiskit_nature.mappers.second_quantization import JordanWignerMapper \n\nqconverter = QubitConverter(JordanWignerMapper()) \n\nqhamiltonian = qconverter.convert(secqop[0]) \n\nprint(\"Qubit Hamiltonian\") \n\nprint(qhamiltonian)\n\n```", "```py\n\nQubit Hamiltonian \n\n-0.8121706072487122 * IIII \n\n+ 0.17141282644776915 * IIIZ \n\n- 0.22343153690813483 * IIZI \n\n+ 0.17141282644776915 * IZII \n\n- 0.22343153690813483 * ZIII \n\n+ 0.12062523483390415 * IIZZ \n\n+ 0.16868898170361205 * IZIZ \n\n+ 0.04530261550379923 * YYYY \n\n+ 0.04530261550379923 * XXYY \n\n+ 0.04530261550379923 * YYXX \n\n+ 0.04530261550379923 * XXXX \n\n+ 0.16592785033770338 * ZIIZ \n\n+ 0.16592785033770338 * IZZI \n\n+ 0.1744128761226159 * ZIZI \n\n+ 0.12062523483390415 * ZZII\n\n```", "```py\n\nfrom qiskit.circuit.library import EfficientSU2 \n\nansatz = EfficientSU2(num_qubits=4, reps=1, entanglement=\"linear\", \n\n    insert_barriers = True) \n\nansatz.decompose().draw(\"mpl\")\n\n```", "```py\n\nfrom qiskit.algorithms import VQE \n\nfrom qiskit import Aer \n\nfrom qiskit.utils import QuantumInstance, algorithm_globals \n\nimport numpy as np \n\nfrom qiskit.algorithms.optimizers import COBYLA \n\nseed = 1234 \n\nnp.random.seed(seed) \n\nalgorithm_globals.random_seed = seed \n\noptimizer = COBYLA() \n\ninitial_point = np.random.random(ansatz.num_parameters) \n\nquantum_instance = QuantumInstance(backend = \n\n    Aer.get_backend(’aer_simulator_statevector’)) \n\nvqe = VQE(ansatz=ansatz, optimizer=optimizer, \n\n    initial_point=initial_point, \n\n    quantum_instance=quantum_instance)\n\n```", "```py\n\nresult = vqe.compute_minimum_eigenvalue(qhamiltonian) \n\nprint(result)\n\n```", "```py\n\n{   ’aux_operator_eigenvalues’: None, \n\n    ’cost_function_evals’: 888, \n\n    ’eigenstate’: array([ 1.55163279e-09+7.04522580e-10j, \n\n        1.17994431e-06+6.29389934e-07j, \n\n       -6.87287902e-05-1.19175176e-04j,  9.01607105e-09+1.75153048e-10j, \n\n        3.17070261e-06-2.71251777e-05j, -9.23514532e-01-3.66685696e-01j, \n\n       -6.50833666e-07-1.04178617e-06j, -6.40877389e-06-1.04499914e-05j, \n\n       -1.33988128e-06+3.63309921e-07j,  1.08441415e-05+7.61755332e-08j, \n\n        1.04578392e-01+4.15432635e-02j, -5.85921512e-06+4.47076415e-06j, \n\n       -1.01179799e-09+1.85616927e-09j,  5.57085679e-05+5.29593190e-05j, \n\n        1.47630244e-07+4.00357904e-08j,  1.51330159e-10+9.41869390e-10j]), \n\n    ’eigenvalue’: (-1.8523881417094914+0j), \n\n    ’optimal_circuit’: None, \n\n    ’optimal_parameters’: { \n\n        ParameterVectorElement(@$\\theta$@[7]): -0.10263498379273155, \n\n        ParameterVectorElement(@$\\theta$@[6]): -0.13154223054201972, \n\n        ParameterVectorElement(@$\\theta$@[8]): 3.1416468430294864, \n\n        ParameterVectorElement(@$\\theta$@[13]): 0.6426987629297032, \n\n        ParameterVectorElement(@$\\theta$@[9]): 2.4674114077579344e-05, \n\n        ParameterVectorElement(@$\\theta$@[14]): -0.11387081297526412, \n\n        ParameterVectorElement(@$\\theta$@[15]): 2.525254909939928, \n\n        ParameterVectorElement(@$\\theta$@[12]): 1.8446272942674344, \n\n        ParameterVectorElement(@$\\theta$@[11]): -0.0011789455587669483, \n\n        ParameterVectorElement(@$\\theta$@[10]): 2.7179451047891577e-06, \n\n        ParameterVectorElement(@$\\theta$@[3]): 3.1403232388683655, \n\n        ParameterVectorElement(@$\\theta$@[1]): 9.061128731357842e-06, \n\n        ParameterVectorElement(@$\\theta$@[2]): 3.141570826032646, \n\n        ParameterVectorElement(@$\\theta$@[0]): -0.22553325325129397, \n\n        ParameterVectorElement(@$\\theta$@[5]): 2.1513214842441912, \n\n        ParameterVectorElement(@$\\theta$@[4]): 1.7045601611970793}, \n\n    ’optimal_point’: array([-2.25533253e-01,  9.06112873e-06, \n\n        3.14157083e+00,  3.14032324e+00, \n\n        1.70456016e+00,  2.15132148e+00, -1.31542231e-01, -1.02634984e-01, \n\n        3.14164684e+00,  2.46741141e-05,  2.71794510e-06, -1.17894556e-03, \n\n        1.84462729e+00,  6.42698763e-01, -1.13870813e-01,  2.52525491e+00]), \n\n    ’optimal_value’: -1.8523881417094914, \n\n    ’optimizer_evals’: None, \n\n    ’optimizer_result’: None, \n\n    ’optimizer_time’: 3.0011892318725586}\n\n```", "```py\n\nfrom qiskit.algorithms.minimum_eigensolvers import \\ \n\n    NumPyMinimumEigensolver \n\nsolver = NumPyMinimumEigensolver() \n\nresult = solver.compute_minimum_eigenvalue(qhamiltonian) \n\nprint(result)\n\n```", "```py\n\n{   ’aux_operators_evaluated’: None, \n\n    ’eigenstate’: Statevector([-1.53666363e-17-4.93701060e-20j, \n\n             -4.57234900e-16-4.65250782e-16j, \n\n              1.25565337e-17-2.11612780e-17j, \n\n              4.73690908e-16-1.33060132e-16j, \n\n              1.52564317e-16-1.40021223e-16j, \n\n             -6.67316913e-01-7.36221442e-01j, \n\n             -1.62999711e-16-2.24584031e-16j, \n\n             -8.42710421e-17+6.43081213e-17j, \n\n             -7.98957973e-17-1.35250844e-17j, \n\n              1.90408979e-16+3.25517112e-16j, \n\n              7.55826341e-02+8.33870007e-02j, \n\n             -3.56170534e-17+9.82948865e-17j, \n\n             -4.51619835e-16+1.70721750e-16j, \n\n              1.91645940e-17-1.45775129e-16j, \n\n             -4.79331105e-17+5.57184037e-17j, \n\n             -3.62080563e-17+4.86380668e-17j], \n\n            dims=(2, 2, 2, 2)), \n\n    ’eigenvalue’: -1.852388173569583}\n\n```", "```py\n\nfrom qiskit.algorithms import VQD \n\nvqd = VQD(ansatz=ansatz, \n\n    optimizer=optimizer, \n\n    initial_point=initial_point, \n\n    quantum_instance=quantum_instance, \n\n    k = 2) \n\nresult = vqd.compute_eigenvalues(qhamiltonian) \n\nprint(result)\n\n```", "```py\n\n{   ’aux_operator_eigenvalues’: None, \n\n    ’cost_function_evals’: array([ 888, 1000]), \n\n    ’eigenstates’: ListOp([VectorStateFn(Statevector( \n\n            [ 1.55163279e-09+7.04522580e-10j, \n\n              1.17994431e-06+6.29389934e-07j, \n\n              ... \n\n              1.51330159e-10+9.41869390e-10j], \n\n            dims=(2, 2, 2, 2)), coeff=1.0, \n\n            is_measurement=False), \n\n            VectorStateFn(Statevector( \n\n            [-5.01605162e-02+4.38928908e-02j, \n\n             -7.31117975e-01-3.69461649e-02j, \n\n             -6.34876999e-03-5.19845422e-03j, \n\n             ... \n\n             -4.10301081e-02+2.77415065e-02j], \n\n            dims=(2, 2, 2, 2)), coeff=1.0, \n\n            is_measurement=False)], coeff=1.0, \n\n            abelian=False), \n\n    ’eigenvalues’: array([-1.85238814-1.11e-16j, -1.19536442+0.00e+00j]), \n\n    ’optimal_circuit’: None, \n\n    ’optimal_parameters’: [ \n\n    {   ParameterVectorElement(@$\\theta$@[0]): -0.22553325325129397, \n\n        ParameterVectorElement(@$\\theta$@[1]): 9.061128731357842e-06, \n\n        ... \n\n        ParameterVectorElement(@$\\theta$@[15]): 2.525254909939928}, \n\n    {   ParameterVectorElement(@$\\theta$@[0]): 0.012174657752649348, \n\n        ParameterVectorElement(@$\\theta$@[1]): -0.056812096977499754, \n\n        ... \n\n        ParameterVectorElement(@$\\theta$@[15]): 1.522408417522795}], \n\n    ’optimal_point’: \n\n    array([[-2.25533253e-01,  9.06112873e-06,  3.14157083e+00, \n\n         3.14032324e+00,  1.70456016e+00,  2.15132148e+00, \n\n         ... \n\n         2.52525491e+00], \n\n       [ 1.21746578e-02, -5.68120970e-02,  1.31641034e+00, \n\n         4.59223490e-01,  7.25749716e-01,  9.54546607e-02, \n\n         ... \n\n         1.52240842e+00]]), \n\n    ’optimal_value’: array([-1.85238814, -1.1952203 ]), \n\n    ’optimizer_evals’: None, \n\n    ’optimizer_result’: None, \n\n    ’optimizer_time’: array([ 2.32541203, 53.26829457])}\n\n```", "```py\n\nfrom qiskit_nature.algorithms import GroundStateEigensolver \n\nsolver = GroundStateEigensolver(qconverter, vqe) \n\nresult = solver.solve(problem) \n\nprint(result)\n\n```", "```py\n\n=== GROUND STATE ENERGY === \n\n* Electronic ground state energy (Hartree): -1.852388141709 \n\n  - computed part:      -1.852388141709 \n\n~ Nuclear repulsion energy (Hartree): 0.715104339081 \n\n> Total ground state energy (Hartree): -1.137283802628 \n\n=== MEASURED OBSERVABLES === \n\n  0:  # Particles: 2.000 S: 0.000 S^2: 0.000 M: 0.000 \n\n=== DIPOLE MOMENTS === \n\n~ Nuclear dipole moment (a.u.): [0.0  0.0  0.0] \n\n  0: \n\n  * Electronic dipole moment (a.u.): [0.0  0.0  0.00001495] \n\n    - computed part:      [0.0  0.0  0.00001495] \n\n  > Dipole moment (a.u.): [0.0  0.0  -0.00001495]  Total: 0.00001495 \n\n                 (debye): [0.0  0.0  -0.000038]  Total: 0.000038\n\n```", "```py\n\nfrom qiskit_nature.algorithms import VQEUCCFactory \n\nvqeuccf = VQEUCCFactory(quantum_instance = quantum_instance)\n\n```", "```py\n\nvqeuccf.get_solver(problem, qconverter).ansatz.decompose().draw(\"mpl\")\n\n```", "```py\n\nsolver = GroundStateEigensolver(qconverter, vqeuccf) \n\nresult = solver.solve(problem) \n\nprint(result)\n\n```", "```py\n\n=== GROUND STATE ENERGY === \n\n* Electronic ground state energy (Hartree): -1.852388173513 \n\n  - computed part:      -1.852388173513 \n\n~ Nuclear repulsion energy (Hartree): 0.715104339081 \n\n> Total ground state energy (Hartree): -1.137283834432 \n\n=== MEASURED OBSERVABLES === \n\n  0:  # Particles: 2.000 S: 0.000 S^2: 0.000 M: 0.000 \n\n=== DIPOLE MOMENTS === \n\n~ Nuclear dipole moment (a.u.): [0.0  0.0  0.0] \n\n  0: \n\n  * Electronic dipole moment (a.u.): [0.0  0.0  -0.00000013] \n\n    - computed part:      [0.0  0.0  -0.00000013] \n\n  > Dipole moment (a.u.): [0.0  0.0  0.00000013]  Total: 0.00000013 \n\n                 (debye): [0.0  0.0  0.00000033]  Total: 0.00000033\n\n```", "```py\n\nfrom qiskit.providers.aer import AerSimulator \n\nfrom qiskit import IBMQ \n\nprovider = IBMQ.load_account() \n\nbackend = provider.get_backend(’ibmq_manila’) \n\nquantum_instance = QuantumInstance( \n\n    backend = AerSimulator.from_backend(backend), \n\n    seed_simulator=seed, seed_transpiler = seed, shots = 1024)\n\n```", "```py\n\nvqe = VQE( \n\n    ansatz=ansatz, \n\n    optimizer=optimizer, \n\n    initial_point=initial_point, \n\n    quantum_instance=quantum_instance \n\n) \n\nsolver = GroundStateEigensolver(qconverter, vqe) \n\nresult = solver.solve(problem) \n\nprint(result)\n\n```", "```py\n\n=== GROUND STATE ENERGY === \n\n* Electronic ground state energy (Hartree): -1.763282965888 \n\n  - computed part:      -1.763282965888 \n\n~ Nuclear repulsion energy (Hartree): 0.715104339081 \n\n> Total ground state energy (Hartree): -1.048178626807 \n\n=== MEASURED OBSERVABLES === \n\n  0:  # Particles: 1.978 S: 0.080 S^2: 0.086 M: 0.001 \n\n=== DIPOLE MOMENTS === \n\n~ Nuclear dipole moment (a.u.): [0.0  0.0  0.0] \n\n  0: \n\n  * Electronic dipole moment (a.u.): [0.0  0.0  0.04634607] \n\n    - computed part:      [0.0  0.0  0.04634607] \n\n  > Dipole moment (a.u.): [0.0  0.0  -0.04634607]  Total: 0.04634607 \n\n                 (debye): [0.0  0.0  -0.11779994]  Total: 0.11779994\n\n```", "```py\n\nfrom qiskit.utils.mitigation import CompleteMeasFitter \n\nquantum_instance = QuantumInstance( \n\n    backend = AerSimulator.from_backend(backend), \n\n    measurement_error_mitigation_cls=CompleteMeasFitter, \n\n    seed_simulator=seed, seed_transpiler = seed, shots = 1024)\n\n```", "```py\n\n=== GROUND STATE ENERGY === \n\n* Electronic ground state energy (Hartree): -1.827326686753 \n\n  - computed part:      -1.827326686753 \n\n~ Nuclear repulsion energy (Hartree): 0.715104339081 \n\n> Total ground state energy (Hartree): -1.112222347671 \n\n=== MEASURED OBSERVABLES === \n\n  0:  # Particles: 1.991 S: -0.000 S^2: -0.000 M: -0.006 \n\n=== DIPOLE MOMENTS === \n\n~ Nuclear dipole moment (a.u.): [0.0  0.0  0.0] \n\n  0: \n\n  * Electronic dipole moment (a.u.): [0.0  0.0  -0.05906852] \n\n    - computed part:      [0.0  0.0  -0.05906852] \n\n  > Dipole moment (a.u.): [0.0  0.0  0.05906852]  Total: 0.05906852 \n\n                 (debye): [0.0  0.0  0.15013718]  Total: 0.15013718\n\n```", "```py\n\nfrom qiskit_nature.runtime import VQEClient \n\nbackend = provider.get_backend(’ibmq_manila’) \n\nvqe = VQEClient( \n\n    ansatz=ansatz, \n\n    provider=provider, \n\n    backend=backend, \n\n    shots=1024, \n\n    initial_point = initial_point, \n\n    measurement_error_mitigation=False \n\n) \n\nsolver = GroundStateEigensolver(qconverter, vqe) \n\nresult = solver.solve(problem) \n\nprint(result)\n\n```", "```py\n\n=== GROUND STATE ENERGY === \n\n* Electronic ground state energy (Hartree): -1.745062049527 \n\n  - computed part:      -1.745062049527 \n\n~ Nuclear repulsion energy (Hartree): 0.715104339081 \n\n> Total ground state energy (Hartree): -1.029957710446 \n\n=== MEASURED OBSERVABLES === \n\n  0:  # Particles: 1.988 S: 0.131 S^2: 0.149 M: -0.005 \n\n=== DIPOLE MOMENTS === \n\n~ Nuclear dipole moment (a.u.): [0.0  0.0  0.0] \n\n  0: \n\n  * Electronic dipole moment (a.u.): [0.0  0.0  0.01726618] \n\n    - computed part:      [0.0  0.0  0.01726618] \n\n  > Dipole moment (a.u.): [0.0  0.0  -0.01726618]  Total: 0.01726618 \n\n                 (debye): [0.0  0.0  -0.04388625]  Total: 0.04388625\n\n```", "```py\n\n=== GROUND STATE ENERGY === \n\n* Electronic ground state energy (Hartree): -1.830922842008 \n\n  - computed part:      -1.830922842008 \n\n~ Nuclear repulsion energy (Hartree): 0.715104339081 \n\n> Total ground state energy (Hartree): -1.115818502927 \n\n=== MEASURED OBSERVABLES === \n\n  0:  # Particles: 2.020 S: 0.035 S^2: 0.036 M: 0.010 \n\n=== DIPOLE MOMENTS === \n\n~ Nuclear dipole moment (a.u.): [0.0  0.0  0.0] \n\n  0: \n\n  * Electronic dipole moment (a.u.): [0.0  0.0  -0.00999621] \n\n    - computed part:      [0.0  0.0  -0.00999621] \n\n  > Dipole moment (a.u.): [0.0  0.0  0.00999621]  Total: 0.00999621 \n\n                 (debye): [0.0  0.0  0.02540783]  Total: 0.02540783\n\n```", "```py\n\nfrom qiskit.algorithms.minimum_eigensolvers import VQE \n\nfrom qiskit.primitives import Estimator \n\nestimator= Estimator() \n\nvqe = VQE( \n\n    ansatz=ansatz, \n\n    optimizer=optimizer, \n\n    initial_point=initial_point, \n\n    estimator=estimator \n\n) \n\nresult = vqe.compute_minimum_eigenvalue(qhamiltonian) \n\nprint(result)\n\n```", "```py\n\n{   ’aux_operators_evaluated’: None, \n\n    ’cost_function_evals’: 1000, \n\n    ’eigenvalue’: -1.8523881060316512, \n\n    ’optimal_circuit’: \n\n    <qiskit.circuit.library.n_local.efficient_su2.EfficientSU2 \n\n    object at 0x7f92367aac90>, \n\n    ’optimal_parameters’: { \n\n        ParameterVectorElement(@$\\theta$@[10]): -5.6469331359894016e-05, \n\n        ParameterVectorElement(@$\\theta$@[7]): -0.07317113283182797, \n\n        ... \n\n        ParameterVectorElement(@$\\theta$@[15]): 2.5406547025358206}, \n\n    ’optimal_point’: array( \n\n        [-2.25566150e-01, -3.48673819e-05, 3.14159358e+00,  3.13967948e+00, \n\n        1.74766932e+00,  2.19381131e+00, -1.17362733e-01, -7.31711328e-02, \n\n        3.14163959e+00, -5.24406909e-05, -5.64693314e-05, -1.86976530e-03, \n\n        1.95315840e+00,  6.62795965e-01, -1.43666055e-01,  2.54065470e+00]), \n\n    ’optimal_value’: -1.8523881060316512, \n\n    ’optimizer_evals’: None, \n\n    ’optimizer_result’: \n\n    <qiskit.algorithms.optimizers.optimizer.OptimizerResult \n\n    object at 0x7f9240af82d0>, \n\n    ’optimizer_time’: 6.93215799331665}\n\n```", "```py\n\nimport pennylane as qml \n\nfrom pennylane import numpy as np \n\nseed = 1234 \n\nnp.random.seed(seed) \n\nsymbols = [\"H\", \"H\"] \n\ncoordinates = np.array([0.0, 0.0, -0.6991986158, 0.0, 0.0, 0.6991986158]) \n\nH, qubits = qml.qchem.molecular_hamiltonian(symbols, coordinates) \n\nprint(\"Qubit Hamiltonian: \") \n\nprint(H)\n\n```", "```py\n\nH, qubits = qml.qchem.molecular_hamiltonian(symbols, coordinates) \n\nprint(\"Qubit Hamiltonian: \") \n\nprint(H)\n\n```", "```py\n\nQubit Hamiltonian: \n\n  (-0.22343155727095726) [Z2] \n\n+ (-0.22343155727095726) [Z3] \n\n+ (-0.09706620778626623) [I0] \n\n+ (0.17141283498167342) [Z1] \n\n+ (0.1714128349816736) [Z0] \n\n+ (0.12062523781179485) [Z0 Z2] \n\n+ (0.12062523781179485) [Z1 Z3] \n\n+ (0.16592785242008765) [Z0 Z3] \n\n+ (0.16592785242008765) [Z1 Z2] \n\n+ (0.16868898461469894) [Z0 Z1] \n\n+ (0.17441287780052514) [Z2 Z3] \n\n+ (-0.04530261460829278) [Y0 Y1 X2 X3] \n\n+ (-0.04530261460829278) [X0 X1 Y2 Y3] \n\n+ (0.04530261460829278) [Y0 X1 X2 Y3] \n\n+ (0.04530261460829278) [X0 Y1 Y2 X3]\n\n```", "```py\n\nnqubits = 4 \n\ndef EfficientSU2(theta): \n\n    for i in range(nqubits): \n\n        qml.RY(theta[i], wires = i) \n\n        qml.RZ(theta[i+nqubits], wires = i) \n\n    for i in range(nqubits-1): \n\n        qml.CNOT(wires = [i, i + 1]) \n\n    for i in range(nqubits): \n\n        qml.RY(theta[i+2*nqubits], wires = i) \n\n        qml.RZ(theta[i+3*nqubits], wires = i)\n\n```", "```py\n\ndev = qml.device(\"lightning.qubit\", wires=qubits) \n\n@qml.qnode(dev) \n\ndef energy(param): \n\n    EfficientSU2(param) \n\n    return qml.expval(H)\n\n```", "```py\n\nfrom scipy.optimize import minimize \n\ntheta = np.array(np.random.random(4*nqubits), requires_grad=True) \n\nresult = minimize(energy, x0=theta) \n\nprint(\"Optimal parameters\", result.x) \n\nprint(\"Energy\", result.fun)\n\n```", "```py\n\nOptimal parameters \n\n[ 2.25573385e-01  3.14158133e+00  1.91103424e-07 -1.88149577e-06 \n\n -2.71613763e-03 -7.94107899e-01  4.52510610e-01  6.17686238e-01 \n\n  3.14158772e+00  6.28319382e+00  3.14158403e+00  3.14160984e+00 \n\n  2.21495304e-01  5.01302639e-01  6.51839333e-01  7.36625551e-02] \n\nEnergy -1.137283835001276\n\n```", "```py\n\nfrom pennylane_qiskit import upload_vqe_runner, vqe_runner \n\nprogram_id = upload_vqe_runner(hub=\"ibm-q\", group=\"open\", project=\"main\") \n\njob = vqe_runner( \n\n    program_id=program_id, \n\n    backend=\"ibm_oslo\", \n\n    hamiltonian=H, \n\n    ansatz=EfficientSU2, \n\n    x0=np.array(np.random.random(4*nqubits)), \n\n    shots=1024, \n\n    optimizer=\"SPSA\", \n\n    kwargs={\"hub\": \"ibm-q\", \"group\": \"open\", \"project\": \"main\"} \n\n) \n\nprint(job.result())\n\n```", "```py\n\n     fun: -1.0125211856761642 \n\n message: ’Optimization terminated successfully.’ \n\n    nfev: 300 \n\n     nit: 100 \n\n success: True \n\n       x: array([-0.02558326,  0.50137847,  1.49781722,  2.83016638, \n\n       1.50688742, -0.00830098,  1.56006908, -0.01401641, -0.08208851, \n\n       2.71490414, 1.39380584,  1.30662208,  1.5691855 ,  1.34979806, \n\n       1.50345895, 0.39946571])\n\n```", "```py\n\n     fun: -1.0835711819668128 \n\n message: ’Optimization terminated successfully.’ \n\n    nfev: 300 \n\n     nit: 100 \n\n success: True \n\n       x: array([-0.06213913,  2.62825807,  2.85476345, -0.2260965, \n\n       -0.07639407, -1.51018602,  1.73431192, -0.07301669, -0.16907148, \n\n       2.60134032, 3.29831133, -0.2912491 ,  0.33893055,  1.90085806, \n\n       1.7206114 , -1.49009082])\n\n```"]