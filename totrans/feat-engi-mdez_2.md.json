["```py\n# Import our data manipulation tool, Pandas\nimport pandas as pd\n# Create a pandas DataFrame from some unstructured Server Logs\nlogs = pd.read_table('../data/server_logs.txt', header=None, names=['Info'])\n\n# header=None, specifies that the first line of data is the first data point, not a column name\n# names=['Info] is me setting the column name in our DataFrame for easier access\n```", "```py\n# Look at the first 5 rows\nlogs.head()\n\n```", "```py\n# import packages we need for exploratory data analysis (EDA)\n# to store tabular data\nimport pandas as pd\n# to do some math\nimport numpy as np \n# a popular data visualization tool\nimport matplotlib.pyplot as plt \n# another popular data visualization tool\nimport seaborn as sns\n# allows the notebook to render graphics\n%matplotlib inline \n# a popular data visualization theme\nplt.style.use('fivethirtyeight')\n```", "```py\n# load in the data set\n# https://data.sfgov.org/City-Management-and-Ethics/Salary-Ranges-by-Job-Classification/7h4w-reyq\nsalary_ranges = pd.read_csv('../data/Salary_Ranges_by_Job_Classification.csv')\n\n# view the first few rows and the headers\nsalary_ranges.head()\n```", "```py\n# get a sense of how many rows of data there are, if there are any missing values, and what data type each column has\nsalary_ranges.info()\n\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 1356 entries, 0 to 1355\nData columns (total 13 columns):\nSetID                 1356 non-null object\nJob Code              1356 non-null object\nEff Date              1356 non-null object\nSal End Date          1356 non-null object\nSalary SetID          1356 non-null object\nSal Plan              1356 non-null object\nGrade                 1356 non-null object\nStep                  1356 non-null int64\nBiweekly High Rate    1356 non-null object\nBiweekly Low Rate     1356 non-null object\nUnion Code            1356 non-null int64\nExtended Step         1356 non-null int64\nPay Type              1356 non-null object\ndtypes: int64(3), object(10)\nmemory usage: 137.8+ KB\n```", "```py\n# another method to check for missing values\nsalary_ranges.isnull().sum()\n\nSetID                 0\nJob Code              0\nEff Date              0\nSal End Date          0\nSalary SetID          0\nSal Plan              0\nGrade                 0\nStep                  0\nBiweekly High Rate    0\nBiweekly Low Rate     0\nUnion Code            0\nExtended Step         0\nPay Type              0\ndtype: int64\n```", "```py\n# show descriptive stats:\nsalary_ranges.describe()\n```", "```py\nsalary_ranges = salary_ranges[['Biweekly High Rate', 'Grade']]\nsalary_ranges.head()\n```", "```py\n# Rate has dollar signs in a few of them, we need to clean that up..\nsalary_ranges['Biweekly High Rate'].describe()\n\ncount         1356\nunique         593\ntop       $3460.00\nfreq            12\nName: Biweekly High Rate, dtype: object\n```", "```py\n# need to clean our Biweekly High columns to remove the dollar sign in order to visualize\nsalary_ranges['Biweekly High Rate'] = salary_ranges['Biweekly High Rate'].map(lambda value: value.replace('$',''))\n\n# Check to see the '$' has been removed\nsalary_ranges.head()\n```", "```py\n# Convert the Biweeky columns to float\nsalary_ranges['Biweekly High Rate'] = salary_ranges['Biweekly High Rate'].astype(float)\n```", "```py\n# Convert the Grade columns to str\nsalary_ranges['Grade'] = salary_ranges['Grade'].astype(str)\n\n# check to see if converting the data types worked\nsalary_ranges.info()\n\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 1356 entries, 0 to 1355\nData columns (total 2 columns):\nBiweekly High Rate    1356 non-null float64\nGrade                 1356 non-null object\ndtypes: float64(1), object(1)\nmemory usage: 21.3+ KB\n```", "```py\n# Basic Value Counts of the Grade column\nsalary_ranges['Grade'].value_counts().head()\n\n00000    61\n07450    12\n06870     9\n07170     9\n07420     9\nName: Grade, dtype: int64\n```", "```py\n# Bar Chart of the Grade column salary_ranges['Grade'].value_counts().sort_values(ascending=False).head(20).plot(kind='bar')\n```", "```py\n# Bar Chart of the Grade column as a pie chart (top 5 values only)\nsalary_ranges['Grade'].value_counts().sort_values(ascending=False).head(5).plot(kind='pie')\n```", "```py\n# load in the data set\ncustomer = pd.read_csv('../data/2013_SFO_Customer_survey.csv')\n```", "```py\ncustomer.shape\n\n(3535, 95)\n```", "```py\nart_ratings = customer['Q7A_ART']\nart_ratings.describe()\n\ncount    3535.000000\nmean        4.300707\nstd         1.341445\nmin         0.000000\n25%         3.000000\n50%         4.000000\n75%         5.000000\nmax         6.000000\nName: Q7A_ART, dtype: float64\n```", "```py\n# only consider ratings 1-5\nart_ratings = art_ratings[(art_ratings >=1) & (art_ratings <=5)]\n```", "```py\n# cast the values as strings\nart_ratings = art_ratings.astype(str)\n\nart_ratings.describe()\n\ncount     2656\nunique       5\ntop          4\nfreq      1066\nName: Q7A_ART, dtype: object\n```", "```py\n# Can use pie charts, just like in nominal level\nart_ratings.value_counts().plot(kind='pie')\n```", "```py\n# Can use bar charts, just like in nominal level\nart_ratings.value_counts().plot(kind='bar')\n```", "```py\n# Boxplots are available at the ordinal level\nart_ratings.value_counts().plot(kind='box')\n```", "```py\n# load in the data set\nclimate = pd.read_csv('../data/GlobalLandTemperaturesByCity.csv')\nclimate.head()\n```", "```py\n# remove missing values\nclimate.dropna(axis=0, inplace=True)\n\nclimate.head() . # check to see that missing values are gone\n```", "```py\nclimate.isnull().sum()\n\ndt                               0\nAverageTemperature               0\nAverageTemperatureUncertainty    0\nCity                             0\nCountry                          0\nLatitude                         0\nLongitude                        0\nyear                             0\ndtype: int64\n\n# All good\n```", "```py\n# show us the number of unique items\nclimate['AverageTemperature'].nunique()\n\n 111994\n```", "```py\nclimate['AverageTemperature'].hist()\n```", "```py\nclimate['AverageTemperature'].describe()\n\n count 8.235082e+06 mean 1.672743e+01 std 1.035344e+01 min -4.270400e+01 25% 1.029900e+01 50% 1.883100e+01 75% 2.521000e+01 max 3.965100e+01 Name: AverageTemperature, dtype: float64\n```", "```py\n# Convert the dt column to datetime and extract the year\n climate['dt'] = pd.to_datetime(climate['dt'])\n climate['year'] = climate['dt'].map(lambda value: value.year)\n\n climate_sub_us['century'] = climate_sub_us['year'].map(lambda x: x/100+1)\n # 1983 would become 20\n # 1750 would become 18\n\n # A subset the data to just the US\n climate_sub_us = climate.loc[climate['Country'] == 'United States']\n```", "```py\nclimate_sub_us['AverageTemperature'].hist(by=climate_sub_us['century'],\n sharex=True, sharey=True,\n figsize=(10, 10),\n bins=20)\n```", "```py\nclimate_sub_us.groupby('century')['AverageTemperature'].mean().plot(kind='line')\n```", "```py\ncentury_changes = climate_sub_us.groupby('century')['AverageTemperature'].mean()\n\ncentury_changes\n\ncentury 18 12.073243 19 13.662870 20 14.386622 21 15.197692 Name: AverageTemperature, dtype: float64\n```", "```py\n# 21st century average temp in US minus 18th century average temp in US\n century_changes[21] - century_changes[18]\n\n # average difference in monthly recorded temperature in the US since the 18th century\n 3.12444911546\n```", "```py\nx = climate_sub_us['year']\n y = climate_sub_us['AverageTemperature']\n fig, ax = plt.subplots(figsize=(10,5))\n ax.scatter(x, y)\n plt.show()\n```", "```py\n# Let's use a groupby to reduce the amount of noise in the US\n climate_sub_us.groupby('year').mean()['AverageTemperature'].plot() \n```", "```py\n# A moving average to smooth it all out:\n climate_sub_us.groupby('year').mean()['AverageTemperature'].rolling(10).mean().plot()\n\n```", "```py\n# Which Grade has the highest Biweekly high rate\n# What is the average rate across all of the Grades\nfig = plt.figure(figsize=(15,5))\nax = fig.gca()\n\nsalary_ranges.groupby('Grade')[['Biweekly High Rate']].mean().sort_values(\n 'Biweekly High Rate', ascending=False).head(20).plot.bar(stacked=False, ax=ax, color='darkorange')\nax.set_title('Top 20 Grade by Mean Biweekly High Rate')\n```", "```py\n# Which Grade has the lowest Biweekly high rate\n fig = plt.figure(figsize=(15,5))\n ax = fig.gca()\n\n salary_ranges.groupby('Grade')[['Biweekly High Rate']].mean().sort_values(\n 'Biweekly High Rate', ascending=False).tail(20).plot.bar(stacked=False, ax=ax, color='darkorange')\n ax.set_title('Bottom 20 Grade by Mean Biweekly High Rate')\n```", "```py\nsorted_df = salary_ranges.groupby('Grade')[['Biweekly High Rate']].mean().sort_values(\n 'Biweekly High Rate', ascending=False)\n sorted_df.iloc[0][0] / sorted_df.iloc[-1][0]\n\n 13.931919540229886\n```"]