["```py\n!pip install feast\n```", "```py\ndriver = Entity(name='driver', value_type=ValueType.STRING,\n```", "```py\n                join_key='driver_id')\n```", "```py\ntrips_today = Feature(name=\"trips_today\", \n```", "```py\n                      dtype=ValueType.INT64)\n```", "```py\ndriver_stats_fv = FeatureView(\n```", "```py\n    name=\"driver_activity\",\n```", "```py\n    entities=[\"driver\"],\n```", "```py\n    ttl=timedelta(hours=2),\n```", "```py\n    features=[\n```", "```py\n        Feature(name=\"trips_today\", dtype=ValueType.INT64),\n```", "```py\n        Feature(name=\"rating\", dtype=ValueType.FLOAT),\n```", "```py\n    ],\n```", "```py\n    batch_source=BigQuerySource(\n```", "```py\n        table_ref=\"feast-oss.demo_data.driver_activity\"\n```", "```py\n    )\n```", "```py\n)\n```", "```py\n!pip install feast==0.18.1\n```", "```py\n!pip install Pygments\n```", "```py\n!feast init demo\n```", "```py\nFeast is an open source project that collects anonymized error reporting and usage statistics. To opt out or learn more see https://docs.feast.dev/reference/usage\n```", "```py\nCreating a new Feast repository in /content/demo.\n```", "```py\nimport pandas as pd\n```", "```py\ndf = pd.read_parquet(\"demo/data/driver_stats.parquet\")\n```", "```py\ndf.head(10)\n```", "```py\n!pygmentize demo/feature_store.yaml\n```", "```py\nproject: demo\n```", "```py\nregistry: data/registry.db\n```", "```py\nprovider: local\n```", "```py\nonline_store:\n```", "```py\n    path: data/online_store.db\n```", "```py\n!pygmentize -f terminal16m demo/example.py\n```", "```py\n# This is an example feature definition file\n```", "```py\nfrom google.protobuf.duration_pb2 import Duration\n```", "```py\nfrom feast import Entity, Feature, FeatureView, FileSource, ValueType\n```", "```py\n\"\"\" Read data from parquet files. Parquet is convenient for local development mode. For production, you can use your favorite DWH, such as BigQuery. See Feast documentation for more info.\"\"\"\n```", "```py\nDriver_hourly_stats = FileSource(\n```", "```py\n    path=\"/content/demo/data/driver_stats.parquet\",\n```", "```py\n    event_timestamp_column=\"event_timestamp\",\n```", "```py\n    created_timestamp_column=\"created\",\n```", "```py\n)\n```", "```py\n# Define an entity for the driver. You can think of entity as a primary key used to fetch features.\n```", "```py\nDriver = Entity(name=\"driver_id\", \n```", "```py\n                value_type=ValueType.INT64, \n```", "```py\n                description=\"driver id\",)\n```", "```py\n\"\"\" Our parquet files contain sample data that includes a driver_id column, timestamps and three feature column. Here we define a Feature View that will allow us to serve this data to our model online.\"\"\"\n```", "```py\nDriver_hourly_stats_view = FeatureView(\n```", "```py\n    name=\"driver_hourly_stats\",\n```", "```py\n    entities=[\"driver_id\"],\n```", "```py\n    ttl=Duration(seconds=86400 * 1),\n```", "```py\n    features=[\n```", "```py\n        Feature(name=\"conv_rate\", dtype=ValueType.FLOAT),\n```", "```py\n        Feature(name=\"acc_rate\", dtype=ValueType.FLOAT),\n```", "```py\n        Feature(name=\"avg_daily_trips\", \n```", "```py\n                dtype=ValueType.INT64),\n```", "```py\n    ],\n```", "```py\n    online=True,\n```", "```py\n    batch_source=driver_hourly_stats,\n```", "```py\n    tags={},\n```", "```py\n)\n```", "```py\n%cd demo\n```", "```py\n!feast apply\n```", "```py\n/content/demo\n```", "```py\nCreated entity driver_id\n```", "```py\nCreated feature view driver_hourly_stats\n```", "```py\nCreated sqlite table demo_driver_hourly_stats\n```", "```py\nfrom feast import FeatureStore\n```", "```py\nstore = FeatureStore(repo_path=\".\")\n```", "```py\nfor entity in store.list_entities():\n```", "```py\n    print(entity.to_dict())\n```", "```py\nimport pandas as pd\n```", "```py\nimport numpy as np\n```", "```py\nfrom pytz import timezone, utc\n```", "```py\nfrom datetime import datetime, timedelta\n```", "```py\nimport random\n```", "```py\ndays = [datetime.utcnow().replace(hour=0, minute=0, second=0, microsecond=0).replace(tzinfo=utc) \\\n```", "```py\n        - timedelta(day) for day in range(10)][::-1]\n```", "```py\ncustomers = [1001, 1002, 1003, 1004, 1005]\n```", "```py\ncustomer_features = pd.DataFrame(\n```", "```py\n    {\n```", "```py\n        \"datetime\": [day for day in days for customer in customers], # Datetime is required\n```", "```py\n        \"customer_id\": [customer for day in days for customer in customers], # Customer is the entity\n```", "```py\n        \"daily_transactions\": [np.random.rand() * 10 for _ in range(len(days) * len(customers))], # Feature 1\n```", "```py\n        \"total_transactions\": [np.random.randint(100) for _ in range(len(days) * len(customers))], # Feature 2\n```", "```py\n    }\n```", "```py\n)\n```", "```py\ncustomer_features.to_parquet(\"/content/demo/data/customer_features.parquet\")\n```", "```py\ncustomer_features.head(5)\n```", "```py\nfrom google.protobuf.duration_pb2 import Duration\n```", "```py\nfrom feast import Entity, Feature, FeatureView, FileSource, ValueType\n```", "```py\n#Customer data source\n```", "```py\ncustomer_features = FileSource(\n```", "```py\n    path=\"/content/demo/data/customer_features.parquet\",\n```", "```py\n    event_timestamp_column=\"datetime\"\n```", "```py\n)\n```", "```py\n#Customer Entity\n```", "```py\ncustomer = Entity(name=\"customer_id\", \n```", "```py\n                  value_type=ValueType.INT64, \n```", "```py\n                  description=\"customer id\",)\n```", "```py\n# Customer Feature view\n```", "```py\ncustomer_features_view = FeatureView(\n```", "```py\n    name=\"customer_features\",\n```", "```py\n    entities=[\"customer_id\"],\n```", "```py\n    ttl=Duration(seconds=86400 * 1),\n```", "```py\n    features=[\n```", "```py\n        Feature(name=\"daily_transactions\",\n```", "```py\n                dtype=ValueType.FLOAT),\n```", "```py\n        Feature(name=\"total_transactions\", \n```", "```py\n                dtype=ValueType.INT64),\n```", "```py\n    ],\n```", "```py\n    online=True,\n```", "```py\n    batch_source=customer_features,\n```", "```py\n    tags={},\n```", "```py\n)\n```", "```py\n!feast apply\n```", "```py\nCreated entity customer_id\n```", "```py\nCreated feature view customer_features\n```", "```py\nCreated sqlite table demo_customer_features\n```", "```py\nfrom datetime import datetime, timedelta\n```", "```py\nimport pandas as pd\n```", "```py\nfrom feast import FeatureStore\n```", "```py\n# The entity DataFrame is the DataFrame we want to enrich with feature values\n```", "```py\nentity_df = pd.DataFrame.from_dict(\n```", "```py\n    {\n```", "```py\n        \"driver_id\": [1001, 1002, 1003],\n```", "```py\n        \"event_timestamp\": [\n```", "```py\n            datetime.now() – timedelta(minutes=11),\n```", "```py\n            datetime.now() – timedelta(minutes=36),\n```", "```py\n            datetime.now() – timedelta(minutes=73),\n```", "```py\n        ],\n```", "```py\n    }\n```", "```py\n)\n```", "```py\nentity_df.head()\n```", "```py\nstore = FeatureStore(repo_path=\".\")\n```", "```py\ntraining_df = store.get_historical_features(\n```", "```py\n    entity_df=entity_df,\n```", "```py\n    features=[\n```", "```py\n        \"driver_hourly_stats:conv_rate\",\n```", "```py\n        \"driver_hourly_stats:acc_rate\",\n```", "```py\n        \"driver_hourly_stats:avg_daily_trips\",\n```", "```py\n    ],\n```", "```py\n).to_df()\n```", "```py\ntraining_df.head()\n```", "```py\n!feast materialize-incremental {datetime.now().isoformat()}\n```", "```py\nstore = FeatureStore(repo_path=\".\")\n```", "```py\nfeature_vector = store.get_online_features(\n```", "```py\n    features=[\n```", "```py\n        \"driver_hourly_stats:conv_rate\",\n```", "```py\n        \"driver_hourly_stats:avg_daily_trips\",\n```", "```py\n    ],\n```", "```py\n    entity_rows=[\n```", "```py\n        {\"driver_id\": 1004},\n```", "```py\n        {\"driver_id\": 1005},\n```", "```py\n    ],\n```", "```py\n).to_dict()\n```", "```py\nfeature_vector\n```", "```py\n{'avg_daily_trips': [34, 256],\n```", "```py\n 'conv_rate': [0.9326972365379333, 0.07134518772363663],\n```", "```py\n 'driver_id': [1004, 1005]}\n```"]