- en: Conclusion - Successful ML Projects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far in this book, we have focused on how to prepare and use ML algorithms
    in Go. This included the preparation of data in [Chapter 2](532d8304-b31d-41ef-81c1-b13f4c692824.xhtml),
    *Setting Up the Development Environment*, and the use of data to build models
    in [Chapter 3](48817ff3-5622-4f43-88e7-d3dfccacb25d.xhtml), *Supervised Learning*,
    and [Chapter 4](26788e93-3614-413f-bcde-5580516f9c5f.xhtml), *Unsupervised Learning*.
    We also looked at how to integrate an existing ML model into a Go application
    in [Chapter 5](815e42bb-64e4-4f04-9dbd-c58af28f2580.xhtml), *Using Pretrained
    Models*. Finally, we covered how to integrate ML into production systems in [Chapter
    6](a48ed496-8a06-4293-80fb-0413d05e7a3e.xhtml), *Deploying Machine Learning Applications*.
    To conclude, we will take a look at the different stages in a typical project,
    and how to manage the end-to-end process of developing and deploying a successful
    ML system.
  prefs: []
  type: TYPE_NORMAL
- en: AI expert Andrej Karparthy has written^([1]) about how ML can be used to simplify
    what were previously very complex systems. Often, it is simpler to allow a machine
    to learn from data than it is to express all the logic we need in code. For example,
    Google's automatic translation application was simplified from 500,000 lines of
    conventional code to 500 lines of ML code using a neural network system. Changing
    from conventional code to a ML system requires different skill sets, and a different
    approach to software development.
  prefs: []
  type: TYPE_NORMAL
- en: Much of the technical literature on ML focuses on how to optimize or choose
    models to achieve the best performance, as measured against a test dataset. While
    this is important in advancing state-of-the-art ML, most real-world projects will
    succeed or fail against very different criteria. For example, it is crucial to
    understand how business needs are best translated into ML tasks, what the limitations
    of your ML systems are, and how best to manage the overall process of designing
    and maintaining ML applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: When to use ML
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Typical stages in a ML project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When to combine ML with traditional code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When to use ML
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'At the outset of any new project, you will need to identify whether ML is the
    correct approach. This depends on three key factors:'
  prefs: []
  type: TYPE_NORMAL
- en: First of all, it is crucial to understand your business requirements, and whether
    it can indeed be tackled by ML. Think about what the goals of your project are.
    For example, do you want to reduce the cost of a process that currently requires
    significant manual work and cost? Are you trying to create a better experience
    for your end customer, for example, by adding personalized features that would
    be too time-consuming to build using traditional code?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Next, ask yourself whether you have the data required to make your proposed
    ML system work. If not, how will you acquire the data you need, and what potential
    issues will need to be solved? For example, you might need to bring together datasets
    from different areas within your organization, or you may find that privacy issues
    will impact how you can make appropriate use of your data.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, consider the limitations of ML and how these might impact your end
    product. For example, if you are going to use information from a customer database
    that contains many more men than women, then any ML system that you build from
    it may show a bias in its output unless you take steps to correct it. Typically,
    ML systems can generate unpredictable outputs when presented with data that is
    very different from that used in training and development. If you design a system
    to trade financial securities, think about what will happen if the input data
    changes suddenly, for example, following a market crash? How will you make sure
    that your system behaves safely, and does not emit nonsensical or catastrophic
    output?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In many cases, you will not be able to know the answers to all of these questions
    at the start. A good approach in this situation is to start by identifying and
    building a **proof-of-concept** (**PoC**). Think of this as the simplest and cheapest
    possible demonstration that you can build of your ML application. With a good
    PoC, you should be able to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Answer questions about whether ML is the right approach, and whether it addresses
    your business needs.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Uncover potential problems that you will have to address when building your
    full system.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a demonstration for stakeholders within your organization, allowing you
    to get feedback on whether your system will be fit-for-purpose, and what improvements
    and changes will need to be considered.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A PoC or **minimum viable product** (**MVP**) is a simple and cheap demonstration
    of a ML product. Use it to answer questions you have about how your product will
    work before you spend time and money building a full production system.
  prefs: []
  type: TYPE_NORMAL
- en: Typical stages in a ML project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As we have seen throughout this book, ML is highly dependent on the data that
    is used for training and testing. For this reason, we find it helpful to view
    a typical project through the stages in the following diagram, which comes from
    the **Cross Industry Standard Process for Data Mining** (**CRISP-DM**), a popular
    method for managing data science projects^([3]):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8f6bb152-5824-4ccc-af13-bd01366218bc.png)'
  prefs: []
  type: TYPE_IMG
- en: In contrast to some other engineering systems, ML normally never produces perfect
    output, so, for this reason, projects are often iterative. Refinements to the
    datasets and models allow you to produce progressively better results, provided
    they are justified by your business needs.
  prefs: []
  type: TYPE_NORMAL
- en: Business and data understanding
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Having decided to use ML, a crucial step in planning your project involves translating
    your **business success criteria** into **technical requirements** and objectives
    for the model. For example, what **performance metrics** should you use to build
    your model, both in terms of its accuracy and other factors, like computational
    speed and cost? What other systems does your product need to integrate with? Do
    you need to make sure that its predictions are free from bias, and, if so how,
    will you test for this?
  prefs: []
  type: TYPE_NORMAL
- en: While business understanding helps you design a product that will be valuable, **data
    understanding** helps you determine what is possible from the data that you have.
    By working with your data scientists, you can identify any problems with your
    datasets, and start to identify promising insights which may form the basis of
    your model.
  prefs: []
  type: TYPE_NORMAL
- en: Data preparation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we have seen throughout this book, having access to correctly prepared data
    is essential when building a ML application. Too often, the challenges in this
    area of **data engineering** are overlooked, resulting in slow progress as more
    and more time is spent on ad hoc work to integrate data sources and fix quality
    issues.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this reason, it is worth thinking about how you will build your **data
    pipeline**: where does your data come from, what preprocessing will it require,
    and where will you store it? What checks should you run on your data to make sure
    any quality problems get identified quickly, before getting baked-in to a trained
    model?'
  prefs: []
  type: TYPE_NORMAL
- en: A variety of tools now exist to help automate and simplify data pipelines, for
    example, the Apache Airflow project^([4]), and managed services such as Google's
    Cloud Composer^([5]) and Amazon's AWS data pipeline^([6]).
  prefs: []
  type: TYPE_NORMAL
- en: A **data pipeline** is a system that collects, transforms, and stores data in
    a common format, allowing it to be used as the input to your ML application.
  prefs: []
  type: TYPE_NORMAL
- en: Modelling and evaluation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'At this stage, you need to develop, fine-tune, and evaluate models for your
    data. Usually, there are three options regarding how to do this:'
  prefs: []
  type: TYPE_NORMAL
- en: Use an off-the-shelf ML solution with your own data. For example, Google Vision^([7]) provides
    an API for a fully managed image classification system. Often, these services
    are a good way to get fast results at the PoC stage, but should be approached
    with caution on bigger projects. Because you have not trained the model yourself,
    it is often difficult to be sure that it captures the important features of your
    own data.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Take an existing open source model and retrain/customize it for your own purposes.
    For example, if you want to build a system that detects objects in images, it
    makes sense to leverage all the R&D effort that large organizations have already
    put into this problem^([8]). You can use these models to give you a head-start,
    and then retrain them on your own datasets.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Develop and train a model from scratch using the techniques that we learned
    about in [Chapter 3](48817ff3-5622-4f43-88e7-d3dfccacb25d.xhtml), *Supervised
    Learning*, and [Chapter 4](26788e93-3614-413f-bcde-5580516f9c5f.xhtml), *Unsupervised
    Learning*. While this can be the most time-consuming approach, it often yields
    the best results if your problem is unique to your organization.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Regardless of the option you choose, it is important to ensure that your model's
    development and testing are **reproducible**. Make sure it is documented, and
    that both the model and its data requirements are captured in a version control
    system. Doing so will allow different team members to work on the same model and
    be confident in getting the same results.
  prefs: []
  type: TYPE_NORMAL
- en: A **reproducible** **model** is one that has sufficient code and documentation
    to allow it to be retrained easily on the same dataset that was used during development.
    It should also include the version numbers of all the software libraries and frameworks
    that it depends on.
  prefs: []
  type: TYPE_NORMAL
- en: Deployment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A ML model is only useful if it can be deployed into a production system. In [Chapter
    6](a48ed496-8a06-4293-80fb-0413d05e7a3e.xhtml), *Deploying Machine Learning Applications*,
    we explored techniques for how to achieve this in Go. Following these techniques
    will allow you to deploy your model reliably. As you start to iterate through
    the project stages to improve your product, it is also important to track the
    different model versions as they enter production. One option is to check all
    of your saved models into a version control system such as Git, although this
    can be problematic if your model contains large files. Another option is to use
    **Data Version Control** (**DVC**), which is able to track the code, models, and
    datasets that they depend on.
  prefs: []
  type: TYPE_NORMAL
- en: When to combine ML with traditional code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While most of this book has focused on how to write and use ML code, you will
    have also noticed that a lot of traditional, non-ML code is needed to support
    what we have done. Much of this is hidden inside the software libraries we have
    used, but there are cases where you may need to add to this.
  prefs: []
  type: TYPE_NORMAL
- en: 'One example is where you need to enforce certain constraints on your model
    output, for instance, to handle an edge case or implement some safety-critical
    constraints. Suppose you are writing software for a self-driving car: you might
    use ML to process image data from the cars cameras, but when it comes to actuating
    the vehicles steering, engine, and brake controls, you will most likely need to
    use traditional code to ensure that the car is controlled safely. Similarly, unless
    your ML system is trained to handle unexpected data inputs, for example, from
    a failed sensor, then you will want to add logic to deal with these cases. Make
    sure that you test your models with outlier data and edge cases before deployment
    so that you understand the circumstances under which its performance will degrade.'
  prefs: []
  type: TYPE_NORMAL
- en: In all real-world systems, you need to think carefully about what you have trained
    your ML model to do, what its limitations are, and how to make sure your end-to-end
    system behaves as expected.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this book, you have learned about many important techniques that are required
    to develop ML applications in Go, and deploy them as production systems. The best
    way to develop your knowledge is with hands-on experience, so dive in and start
    adding ML software into your own Go applications. The skills you have learned
    here will allow you to start adding cutting-edge ML capabilities to the projects
    that you are working on.
  prefs: []
  type: TYPE_NORMAL
- en: ML is a rapidly evolving field with new algorithms and datasets being published
    every week, both by academics and technology companies. We recommend that you
    read the technical blogs, papers, and code repositories that cover this research,
    many of which we have referenced throughout this book. You might find a new state-of-the-art
    model that solves a problem you have been working on, waiting for you to implement
    it in Go.
  prefs: []
  type: TYPE_NORMAL
- en: Further readings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[https://medium.com/@karpathy/software-2-0-a64152b37c35](https://medium.com/@karpathy/software-2-0-a64152b37c35).
    Retrieved May 17, 2019.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[https://jack-clark.net/2017/10/09/import-ai-63-google-shrinks-language-translation-code-from-500000-to-500-lines-with-ai-only-25-of-surveyed-people-believe-automationbetter-jobs/](https://jack-clark.net/2017/10/09/import-ai-63-google-shrinks-language-translation-code-from-500000-to-500-lines-with-ai-only-25-of-surveyed-people-believe-automationbetter-jobs/).
    Retrieved May 17, 2019.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[https://pdfs.semanticscholar.org/48b9/293cfd4297f855867ca278f7069abc6a9c24.pdf](https://pdfs.semanticscholar.org/48b9/293cfd4297f855867ca278f7069abc6a9c24.pdf).
    Retrieved May 18, 2019.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[https://airflow.apache.org/](https://airflow.apache.org/). Retrieved May 18, 2019.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[https://cloud.google.com/composer/](https://cloud.google.com/composer/). Retrieved
    May 18,  2019.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[https://aws.amazon.com/datapipeline/](https://aws.amazon.com/datapipeline/).
    Retrieved May 18, 2019.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[https://cloud.google.com/vision/](https://cloud.google.com/vision/). Retrieved
    May 18, 2019.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[https://github.com/tensorflow/models/tree/master/research/object_detection](https://github.com/tensorflow/models/tree/master/research/object_detection).
    Retrieved May 18, 2019.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[https://dvc.org/](https://dvc.org/). Retrieved May 22, 2019.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[https://becominghuman.ai/how-to-version-control-your-machine-learning-task-ii-d37da60ef570](https://becominghuman.ai/how-to-version-control-your-machine-learning-task-ii-d37da60ef570).
    Retrieved May 22, 2019.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
