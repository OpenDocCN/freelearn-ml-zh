["```py\ntype User = {Id: int; FirstName: string; LastName: string; Age: float}\nlet users = [|{Id=1; FirstName=\"Jim\"; LastName=\"Jones\"; Age=25.5};\n              {Id=2; FirstName=\"Joe\"; LastName=\"Smith\"; Age=10.25};\n              {Id=3; FirstName=\"Sally\"; LastName=\"Price\"; Age=1000.0};|]\n```", "```py\ntype User =\n {Id: int;\n FirstName: string;\n LastName: string;\n Age: float;}\nval users : User [] = [|{Id = 1;\n FirstName = \"Jim\";\n LastName = \"Jones\";\n Age = 25.5;}; {Id = 2;\n FirstName = \"Joe\";\n LastName = \"Smith\";\n Age = 10.25;}; {Id = 3;\n FirstName \n= \"Sally\";\n LastName = \"Price\";\n Age = 1000.0;}|]\n\n```", "```py\nlet validUsers = Array.filter(fun u -> u.Age < 100.0) users\nlet averageAge = Array.averageBy(fun u -> u.Age) validUsers\n\nlet invalidUsers = \n    users \n    |> Array.filter(fun u -> u.Age >= 100.0) \n    |> Array.map(fun u -> {u with Age = averageAge})\n\nlet users' = Array.concat [validUsers; invalidUsers]\n\n```", "```py\nval averageAge : float = 17.875\nval invalidUsers : User [] = [|{Id = 3;\n FirstName = \"Sally\";\n LastName = \"Price\";\n Age = 17.875;}|]\nval users' : User [] = [|{Id = 1;\n FirstName = \"Jim\";\n LastName = \"Jones\";\n Age = 25.5;}; {Id = 2;\n FirstName = \"Joe\";\n LastName = \"Smith\";\n Age = 10.25;}; {Id = 3;\n FirstName = \"Sally\";\n LastName = \"Price\";\n Age = 17.875;}|]\n\n```", "```py\nPM> install-package Accord.Statistics\nNext, go into the script file and enter this:\n#r \"../packages/Accord.Math.3.0.2/lib/net40/Accord.Math.dll\"\n#r \"../packages/Accord.Statistics.3.0.2/lib/net40/Accord.Statistics.dll\"\n\nopen Accord.Statistics\n\n//Age \n//Sex - 1 or 0\n//money for textbooks\n//money for beer\n\nlet matrix = array2D [ [ 19.0;1.0;50.0;10.0]; \n                       [18.0;0.0;40.0;15.0]; \n                       [21.0;1.0;10.0;40.0]]\nlet correlation = Tools.Correlation(matrix)\n```", "```py\nval correlation : float [,] =\n [[1.0; 0.755928946; -0.8386278694; 0.8824975033]\n [0.755928946; 1.0; -0.2773500981; 0.3592106041]\n [-0.8386278694; -0.2773500981; 1.0; -0.9962709628]\n [0.8824975033; 0.3592106041; -0.9962709628; 1.0]]\n\n```", "```py\n#r \"../packages/Accord.3.0.2/lib/net40/Accord.dll\"\nopen Accord.Statistics.Analysis\n\n//Age/Smoking\nlet inputs = [|[|55.0;0.0|];[|28.0;0.0|];\n               [|65.0;1.0|];[|46.0;0.0|];\n               [|86.0;1.0|];[|56.0;1.0|];\n               [|85.0;0.0|];[|33.0;0.0|];\n               [|21.0;1.0|];[|42.0;1.0|];\n               [|33.0;0.0|];[|20.0;1.0|];\n               [|43.0;1.0|];[|31.0;1.0|];\n               [|22.0;1.0|];[|43.0;1.0|];\n               [|46.0;0.0|];[|86.0;1.0|];\n               [|56.0;1.0|];[|55.0;0.0|];|]\n\n//Have Cancer\nlet output = [|0.0;0.0;0.0;1.0;1.0;1.0;0.0;0.0;0.0;1.0;\n               0.0;1.0;1.0;1.0;1.0;1.0;0.0;1.0;1.0;0.0|]\n\nlet regression = \n    StepwiseLogisticRegressionAnalysis(inputs, output, [|\"Age\";\"Smoking\"|],\"Cancer\")\n```", "```py\nval inputs : float [] [] =\n [|[|55.0; 0.0|]; [|28.0; 0.0|]; [|65.0; 1.0|]; [|46.0; 0.0|]; [|86.0; 1.0|];\n [|56.0; 1.0|]; [|85.0; 0.0|]; [|33.0; 0.0|]; [|21.0; 1.0|]; [|42.0; 1.0|];\n [|33.0; 0.0|]; [|20.0; 1.0|]; [|43.0; 1.0|]; [|31.0; 1.0|]; [|22.0; 1.0|];\n [|43.0; 1.0|]; [|46.0; 0.0|]; [|86.0; 1.0|]; [|56.0; 1.0|]; [|55.0; 0.0|]|]\nval output : float [] =\n [|0.0; 0.0; 0.0; 1.0; 1.0; 1.0; 0.0; 0.0; 0.0; 1.0; 0.0; 1.0; 1.0; 1.0; 1.0;\n 1.0; 0.0; 1.0; 1.0; 0.0|]\nval regression : StepwiseLogisticRegressionAnalysis\n\n```", "```py\nlet results = regression.Compute()\nlet full = regression.Complete;\nlet best = regression.Current;\n\nfull.Coefficients\n\nbest.Coefficients\n```", "```py\nval it : NestedLogisticCoefficientCollection =\n seq\n [Accord.Statistics.Analysis.NestedLogisticCoefficient\n {Confidence = 0.0175962716285245, 1.1598020423839;\n ConfidenceLower = 0.01759627163;\n ConfidenceUpper = 1.159802042;\n LikelihoodRatio = null;\n Name = \"Intercept\";\n OddsRatio = 0.1428572426;\n StandardError = 1.068502877;\n Value = -1.945909451;\n Wald = 0.0685832853132018;};\n Accord.Statistics.Analysis.NestedLogisticCoefficient\n {Confidence = 2.63490696729824, 464.911388747606;\n ConfidenceLower = 2.634906967;\n ConfidenceUpper = 464.9113887;\n LikelihoodRatio = null;\n Name = \"Smoking\";\n OddsRatio = 34.99997511;\n StandardError = 1.319709922;\n Value = 3.55534735;\n Wald = 0.00705923290736891;}]\n\n```", "```py\nwhile reader.Read() do\n    productInfos.Add({ProductID=reader.GetInt32(0);\n       AvgOrders=(float)(reader.GetDecimal(1));\n       AvgReviews=log((float)(reader.GetDecimal(2)));\n       ListPrice=(float)(reader.GetDecimal(3));})\n```", "```py\nval regression : MultipleLinearRegression =\n y(x0, x1) = 35.4805245757214*x0 + -0.000897944878777119*x1 + -36.7106228824185\nval error : float = 687.122625\nval a : float = 35.48052458\nval b : float = -0.0008979448788\nval c : float = -36.71062288\nval mse : float = 7.083738402\nval rmse : float = 2.661529335\nval r2 : float = 0.3490097415\n\n```", "```py\n#r \"../packages/Accord.3.0.2/lib/net40/Accord.dll\"\n#r \"../packages/Accord.Statistics.3.0.2/lib/net40/Accord.Statistics.dll\"\n#r \"../packages/Accord.Math.3.0.2/lib/net40/Accord.Math.dll\"\n\nopen Accord\nopen Accord.Statistics.Models.Regression.Linear\n\nlet xs = [| [|15.0;130.0|];[|18.0;127.0|];[|15.0;128.0|]; [|17.0;120.0|];[|16.0;115.0|] |]\nlet y = [|3.6;3.5;3.8;3.4;2.6|]\n\nlet regression = MultipleLinearRegression(2,true)\nlet error = regression.Regress(xs,y)\n\nlet a = regression.Coefficients.[0]\nlet b = regression.Coefficients.[1]\n\nlet sse = regression.Regress(xs, y)\nlet mse = sse/float xs.Length \nlet rmse = sqrt(mse)\nlet r2 = regression.CoefficientOfDetermination(xs,y)\n```", "```py\nlet xs = [| [|15.0;130.0|];[|18.0;127.0|];[|15.0;128.0|]; [|17.0;120.0|];[|16.0;115.0|];[|10.0;150.0|] |]\n\nlet y = [|3.6;3.5;3.8;3.4;2.6;1.0|]\n```", "```py\nval regression : MultipleLinearRegression =\n y(x0, x1) = 0.351124295971452*x0 + 0.0120748957392838*x1 + -3.89166344210844\nval error : float = 1.882392837\nval a : float = 0.351124296\nval b : float = 0.01207489574\nval sse : float = 1.882392837\nval mse : float = 0.3137321395\nval rmse : float = 0.5601179693\nval r2 : float = 0.6619468116\n\n```", "```py\n        while reader.Read() do\n            productInfos.Add({ProductID=reader.GetInt32(0);\n                                AvgOrders=(float)(reader.GetDecimal(1));\n                                AvgReviews=(float)(reader.GetDecimal(2));\n                                ListPrice=(float)(reader.GetDecimal(3));})\n\n        let xs = productInfos |> Seq.map(fun pi -> [|pi.AvgReviews; pi.ListPrice|]) |> Seq.toArray\n        let y = productInfos |> Seq.map(fun pi -> pi.AvgOrders) |> Seq.toArray\n\nAnd replace them with these:\n        while reader.Read() do\n            productInfos.Add({ProductID=reader.GetInt32(0);\n                                AvgOrders=(float)(reader.GetDecimal(1));\n                                AvgReviews=(float)(reader.GetDecimal(2));\n                                ListPrice=(float)(reader.GetDecimal(3));})\n\n        let productInfos' = productInfos |> Seq.filter(fun pi -> pi.ProductID <> 757)\n\n        let xs = productInfos' |> Seq.map(fun pi -> [|pi.AvgReviews; pi.ListPrice|]) |> Seq.toArray\n        let y = productInfos' |> Seq.map(fun pi -> pi.AvgOrders) |> Seq.toArray\n```", "```py\nval regression : MultipleLinearRegression =\n y(x0, x1) = 9.89805316193142*x0 + -0.000944004141999501*x1 + -26.8922595356297\nval error : float = 647.4688586\nval a : float = 9.898053162\nval b : float = -0.000944004142\nval c : float = -26.89225954\nval mse : float = 6.744467277\nval rmse : float = 2.59701122\nval r2 : float = 0.3743706412\n\n```", "```py\nlet pca = new PrincipalComponentAnalysis(pcaInput.ToArray(), AnalysisMethod.Center)\n```", "```py\nPM> install-package Accord.MachineLearning\n\n```", "```py\n#r \"../packages/Accord.3.0.2/lib/net40/Accord.dll\"\n#r \"../packages/Accord.Math.3.0.2/lib/net40/Accord.Math.dll\"\n#r \"../packages/Accord.Statistics.3.0.2/lib/net40/Accord.Statistics.dll\"\n#r \"../packages/Accord.MachineLearning.3.0.2/lib/net40/Accord.MachineLearning.dll\"\n\nopen Accord\nopen Accord.Math\nopen Accord.MachineLearning\nopen Accord.Statistics.Analysis\n\nlet inputs = [|[|5.0;1.0|];[|4.5;1.5|];\n             [|5.1;0.75|];[|1.0;3.5|];\n             [|0.5;4.0|];[|1.25;4.0|]|]\nlet outputs = [|1;1;1;0;0;0|]\n\nlet classes = 2\nlet k = 3\nlet knn = KNearestNeighbors(k, classes, inputs, outputs)\n\nlet input = [|5.0;0.5|]\nlet output = knn.Compute(input)\n```", "```py\nlet studyingAverage = inputs |> Array.map(fun i -> i.[0]) |> Array.average\nlet drinkingAverage = inputs |> Array.map(fun i -> i.[1]) |> Array.average\n\nlet scaledInputs = inputs |> Array.map(fun i -> [|i.[0]/studyingAverage; i.[1]/drinkingAverage|])\nlet scaledKNN = KNearestNeighbors(k, classes, scaledInputs, outputs)\n```", "```py\nval studyingAverage : float = 2.891666667\nval drinkingAverage : float = 2.458333333\nval scaledInputs : float [] [] =\n [|[|1.729106628; 0.406779661|]; [|1.556195965; 0.6101694915|];\n [|1.763688761; 0.3050847458|]; [|0.3458213256; 1.423728814|];\n [|0.1729106628; 1.627118644|]; [|0.4322766571; 1.627118644|]|]\nval scaledKNN : KNearestNeighbors\n\n```", "```py\nlet students = [|0..5|]\nlet random = System.Random()\nlet randomPrediction = \n    students \n    |> Array.map(fun s -> random.Next(0,2))\n```", "```py\nval students : int [] = [|0; 1; 2; 3; 4; 5|]\nval random : System.Random\nval randomPrediction : int [] = [|0; 1; 0; 0; 1; 1|]\n\n```", "```py\nlet testInputs = [|[|5.0;1.0|];[|4.0;1.0|];\n                 [|6.2;0.5|];[|0.0;2.0|];\n                 [|0.5;4.0|];[|3.0;6.0|]|]\n\nlet knnPrediction =\n    testInputs\n    |> Array.map(fun ti -> knn.Compute(ti))\n```", "```py\nval testInputs : float [] [] =\n [|[|5.0; 1.0|]; [|4.0; 1.0|]; [|6.2; 0.5|]; [|0.0; 2.0|]; [|0.5; 4.0|];\n [|3.0; 6.0|]|]\nval knnPrediction : int [] = [|1; 1; 1; 0; 0; 0|]\n\n```", "```py\nlet actual = [|1;1;1;0;0;0|]\n```", "```py\nval actual : int [] = [|1; 1; 1; 0; 0; 0|]\n\n```", "```py\nlet positiveValue = 1\nlet negativeValue = 0\n\nlet confusionMatrix = ConfusionMatrix(knnPrediction,actual,positiveValue,negativeValue)\n```", "```py\nconfusionMatrix.OddsRatio\n```", "```py\nval positiveValue : int = 1\nval negativeValue : int = 0\nval confusionMatrix : ConfusionMatrix = TP:3 FP:0, FN:0 TN:3\nval it : float = infinity\n\n```", "```py\nlet inputs' = [|[|5.0;1.0;1.0|];[|4.5;1.5;11.0|];\n               [|5.1;0.75;5.0|];[|1.0;3.5;8.0|];\n               [|0.5;4.0;1.0|];[|1.25;4.0;11.0|]|]\n\nlet knn' = KNearestNeighbors(k, classes, inputs', outputs)\n\nlet testInputs' = [|[|5.0;1.0;5.0|];[|4.0;1.0;8.0|];\n                   [|6.2;0.5;12.0|];[|0.0;2.0;2.0|];\n                   [|0.5;4.0;6.0|];[|3.0;6.0;5.0|]|]\n\nlet knnPrediction' =\n    testInputs'\n    |> Array.map(fun ti -> knn'.Compute(ti))\n```", "```py\nval knnPrediction' : int [] = [|1; 1; 1; 0; 0; 0|]\n```"]