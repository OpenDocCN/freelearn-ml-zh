["```py\n    sudo apt-get install openjdk-11-jdk\n    ```", "```py\n    sudo apt install python3\n    ```", "```py\n    wget https://downloads.apache.org/spark/spark-3.1.2/spark-3.1.2-bin-hadoop3.2.tgz\n    ```", "```py\n<dependency>\n    <groupId>org.apache.spark</groupId>\n    <artifactId>spark-core_2.13</artifactId>\n    <version>3.1.2</version>\n</dependency>\n```", "```py\n    sudo tar xzvf spark-*\n    ```", "```py\n    export SPARK_HOME=\"/path/to/spark/installation\"\n    ```", "```py\n    export MASTER=\"local[*]\"\n    ```", "```py\n    unzip sparkling-water-*\n    ```", "```py\n    bin/sparkling-shell\n    ```", "```py\n    import ai.h2o.sparkling._\n    val h2oContext = H2OContext.getOrCreate()\n    ```", "```py\n    bin/sparkling-shell --conf spark.executor.memory=4g spark.driver.memory=4g\n    ```", "```py\n    bin/sparkling-shell --conf spark.driver.extraJavaOptions -XX:MaxPermSize=384 -XX:PermSize=384m spark.executor.extraJavaOptions -XX:MaxPermSize=384 -XX:PermSize=384m\n    ```", "```py\n        bin/sparkling-shell --conf spark.locality.wait=3000\n        ```", "```py\n        bin/sparkling-shell --conf spark.scheduler.minRegisteredResourcesRatio=1\n        ```", "```py\n        bin/sparkling-shell --conf spark.task.maxFailures=1\n        ```", "```py\n        bin/sparkling-shell --conf spark.executor.heartbeatInterval=10s\n        ```", "```py\n    ./bin/sparkling-shell\n    ```", "```py\n./bin/PySparkling\n```", "```py\n    import ai.h2o.sparkling._\n    import java.net.URI\n    val h2oContext = H2OContext.getOrCreate()\n    ```", "```py\nfrom PySparkling import *\nh2oContext = H2OContext.getOrCreate()\n```", "```py\n    import org.apache.spark.SparkFiles\n    spark.sparkContext.addFile(\"/home/salil/Downloads/Concrete_Data.csv\")\n    ```", "```py\nimport h2o\nh2oFrame = h2o.import_file(\"/home/salil/Downloads/Concrete_Data.csv\")\n```", "```py\n    val sparkDataFrame = spark.read.option(\"header\", \"true\").option(\"inferSchema\", \"true\").csv(SparkFiles.get(\"Concrete_Data.csv\"))\n    ```", "```py\nsparkDataFrame = hc.asSparkFrame(h2oFrame)\n```", "```py\n    val Array(trainingDataFrame, testingDataFrame) = sparkDataFrame.randomSplit(Array(0.7, 0.3), seed=123)\n    ```", "```py\n[trainingDataFrame, testingDataFrame] = sparkDataFrame.randomSplit([0.7, 0.3], seed=123)\n```", "```py\n    import ai.h2o.sparkling.ml.algos.H2OAutoML\n    val aml = new H2OAutoML()\n    ```", "```py\nfrom PySparkling.ml import H2OAutoML\naml = H2OAutoML(labelCol=\" Concrete compressive strength \")\n```", "```py\n    aml.setLabelCol(\"Concrete compressive strength\")\n    ```", "```py\n    aml.setMaxModels(10)\n    ```", "```py\n    val model = aml.fit(trainingDataFrame)\n    ```", "```py\nmodel = aml.fit(trainingDataFrame)\n```", "```py\n    model.getModelDetails()\n    ```", "```py\n    val leaderboard = aml.getLeaderboard()\n    leaderboard.show(false)\n    ```", "```py\nleaderboard = aml.getLeaderboard(\"ALL\")\nleaderboard.show(truncate = False)\n```", "```py\n    model.transform(testingDataFrame).show(false)\n    ```", "```py\nmodel.transform(testingDataFrame).show(truncate = False)\n```", "```py\n    model.write.save(\"model_dir\")\n    ```", "```py\n./bin/spark-shell --jars jars/sparkling-water-assembly-scoring_2.12-3.36.1.3-1-3.2-all.jar\n```", "```py\n./bin/pyspark --py-files py/h2o_PySparkling_scoring_3.2-3.36.1.3-1-3.2.zip\n```", "```py\n    import ai.h2o.sparkling.ml.models._\n    val modelConfigurationSettings = H2OMOJOSettings(convertInvalidNumbersToNa = true, convertUnknownCategoricalLevelsToNa = true)\n    ```", "```py\nfrom PySparkling.ml import *\nval modelConfigurationSettings = H2OMOJOSettings(convertInvalidNumbersToNa = true, convertUnknownCategoricalLevelsToNa = true)\n```", "```py\n    val loadedModel = H2OMOJOModel.createFromMojo(\"model_dir/model_mojo\", modelConfigurationSettings)\n    ```", "```py\nloadedModel = H2OMOJOModel.createFromMojo(\"model_dir/ model_mojo\", modelConfigurationSettings)\n```", "```py\nloadedModel = H2OMOJOModel.createFromMojo(\"hdfs:///user/salil/ model_mojo\")\n```", "```py\nloadedModel = H2OMOJOModel.createFromMojo(\"file:///Users/salil/some_ model_mojo\")\n```", "```py\n    val predictionResults = loadedModel.transform(testingDataframe)\n    ```", "```py\n    predictionResults.show()\n    ```"]