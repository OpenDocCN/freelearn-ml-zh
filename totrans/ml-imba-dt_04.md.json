["```py\nfrom sklearn.ensemble import BaggingClassifier\nfrom sklearn.metrics import PrecisionRecallDisplay\nclf = BaggingClassifier(\\\n    estimator=DecisionTreeClassifier(max_depth=6), random_state=0\n).fit(X_train, y_train)\n```", "```py\nplot_decision_boundary(X_train, y_train, clf, 'BaggingClassifier')\nplt.show()\n```", "```py\nPrecisionRecallDisplay.from_estimator(\n    clf, X_test, y_test, ax = plt.gca(),name = \"BaggingClassifier\")\n```", "```py\nAverage Precision Score: 0.969\nAUC-ROC Score: 0.999\nF2-score: 0.891\nPrecision: 0.967\nRecall: 0.874\n```", "```py\nfrom sklearn.ensemble import AdaBoostClassifier\nclf = AdaBoostClassifier(\n    random_state=0, estimator = DecisionTreeClassifier(max_depth=6)\n).fit(X_train, y_train)\n```", "```py\nplot_decision_boundary(X_train, y_train, clf, 'AdaBoostClassifier')\nplt.show()\n```", "```py\nfrom imblearn.ensemble import RUSBoostClassifier\nrusboost_clf = RUSBoostClassifier(random_state=0, \\\n    estimator=DecisionTreeClassifier\\\n    (max_depth=6)).fit(X_train, y_train)\n```", "```py\nplot_decision_boundary(\n    X_train, y_train, rusboost_clf, 'RUSBoostClassifier')\nplt.show()\n```", "```py\nfrom imblearn.ensemble import EasyEnsembleClassifier\nclf = EasyEnsembleClassifier(n_estimators=70,random_state=42).fit(X,y)\n```", "```py\nplot_decision_boundary(X, y, clf, 'EasyEnsembleClassifier')\nplt.show()\n```"]