["```py\n    $ git clone https://github.com/qboticslabs/learning_robotics_2nd_ed  \n```", "```py\n    $ catkin_make  \n```", "```py\n//Library to communicate with I2C devices \n#include \"Wire.h\" \n//I2C communication library for MPU6050 \n#include \"I2Cdev.h\" \n//MPU6050 interfacing library \n#include \"MPU6050_6Axis_MotionApps20.h\" \n//Processing incoming serial data \n#include <Messenger.h> \n//Contain definition of maximum limits of various data type \n#include <limits.h>\n```", "```py\n//Creating MPU6050 Object \nMPU6050 accelgyro(0x68); \n//Messenger object \nMessenger Messenger_Handler = Messenger(); \n```", "```py\n//Setup serial, encoders, ultrasonic, MPU6050 and Reset functions \nvoid setup() \n{ \n  //Init Serial port with 115200 baud rate \n  Serial.begin(115200); \n  //Setup Encoders \n  SetupEncoders(); \n  //Setup Motors \n  SetupMotors(); \n  //Setup Ultrasonic \n  SetupUltrasonic(); \n  //Setup MPU 6050 \n  Setup_MPU6050(); \n  //Setup Reset pins \n  SetupReset(); \n  //Set up Messenger object handler \n  Messenger_Handler.attach(OnMssageCompleted); \n}\n```", "```py\nvoid loop() \n{ \n    //Read from Serial port \n    Read_From_Serial(); \n    //Send time information through serial port \n    Update_Time(); \n    //Send encoders values through serial port \n    Update_Encoders(); \n    //Send ultrasonic values through serial port \n    Update_Ultra_Sonic(); \n    //Update motor speed values with corresponding speed received from PC and send speed values through serial port \n    Update_Motors(); \n    //Send MPU 6050 values through serial port \n    Update_MPU6050(); \n    //Send battery values through serial port \n    Update_Battery(); \n} \n```", "```py\n#ROS Python client \nimport rospy \nimport sys \nimport time \nimport math \n\n#This python module helps to receive values from serial port which execute in a thread \nfrom SerialDataGateway import SerialDataGateway \n#Importing required ROS data types for the code \nfrom std_msgs.msg import Int16,Int32, Int64, Float32, \n String, Header, UInt64 \n#Importing ROS data type for IMU \nfrom sensor_msgs.msg import Imu \n```", "```py\nif __name__ =='__main__': \n  rospy.init_node('launchpad_ros',anonymous=True) \n  launchpad = Launchpad_Class() \n  try: \n\n    launchpad.Start() \n    rospy.spin() \n  except rospy.ROSInterruptException: \n    rospy.logwarn(\"Error in main function\") \n\n  launchpad.Reset_Launchpad() \n  launchpad.Stop()\n```", "```py\n#Get serial port and baud rate of Tiva C Launchpad \nport = rospy.get_param(\"~port\", \"/dev/ttyACM0\") \nbaudRate = int(rospy.get_param(\"~baudRate\", 115200)) \n\n################################################################# \nrospy.loginfo(\"Starting with serial port: \n \" + port + \", baud rate: \" + str(baudRate))#Initializing SerialDataGateway object with serial port, baud\n  rate and callback function to handle incoming serial dataself._SerialDataGateway = SerialDataGateway(port, \n baudRate, self._HandleReceivedLine) \nrospy.loginfo(\"Started serial communication\") \n\n###################################################################Subscribers and Publishers \n\n#Publisher for left and right wheel encoder values \nself._Left_Encoder = rospy.Publisher('lwheel',Int64,queue_size \n = 10)self._Right_Encoder = rospy.Publisher('rwheel',Int64,queue_size \n = 10)\n#Publisher for Battery level(for upgrade purpose) \nself._Battery_Level = \n rospy.Publisher('battery_level',Float32,queue_size = 10) \n#Publisher for Ultrasonic distance sensor \nself._Ultrasonic_Value = \n rospy.Publisher('ultrasonic_distance',Float32,queue_size = 10) \n\n#Publisher for IMU rotation quaternion values \nself._qx_ = rospy.Publisher('qx',Float32,queue_size = 10) \nself._qy_ = rospy.Publisher('qy',Float32,queue_size = 10) \nself._qz_ = rospy.Publisher('qz',Float32,queue_size = 10) \nself._qw_ = rospy.Publisher('qw',Float32,queue_size = 10) \n\n#Publisher for entire serial data \nself._SerialPublisher = rospy.Publisher('serial', \n String,queue_size=10)\n```", "```py\nself._left_motor_speed = rospy.Subscriber('left_wheel_speed',Float32,self._Update_Left_Speed) \nself._right_motor_speed = rospy.Subscriber('right_wheel_speed',Float32,self._Update_Right_Speed) \n```", "```py\n    $ ssh robot@192.168.1.106  \n```", "```py\n    $ miniterm.py /dev/ttyACM0 115200  \n```", "```py\n    $ sudo chmod 777 /dev/ttyACM0  \n```", "```py\n    $ roscore  \n```", "```py\n    $ rosrun ChefBot_bringup launchpad_node.py  \n```", "```py\n    $ roslaunch ChefBot_bringup robot_standalone.launch  \n```", "```py\n    $ roslaunch ChefBot_bringup keyboard_teleop.launch  \n```", "```py\n    $roslaunch ChefBot_bringup 3dsensor_kinect.launch  \n```", "```py\n    $ roslaunch ChefBot_bringup 3d_sensor_astra.launch  \n```", "```py\n    $ roslaunch ChefBot_bringup view_robot.launch\n```", "```py\n    $ roslaunch ChefBot_bringup robot_standalone.launch  \n```", "```py\n    $ roslaunch ChefBot_bringup gmapping_demo.launch  \n```", "```py\n    $ roslaunch ChefBot_bringup keyboard_teleop.launch  \n```", "```py\n    $ roslaunch ChefBot_bringup view_navigation.launch  \n```", "```py\n    $rosrun map_server map_saver -f ~/test_map\n```", "```py\n    $ roslaunch ChefBot_bringup robot_standalone.launch\n```", "```py\n    $ roslaunch ChefBot_bringup amcl_demo.launch map_file:=~/test_map.yaml  \n```", "```py\n    $ roslaunch ChefBot_bringup view_navigation.launch  \n```"]