["```py\n>>> import numpy\n\n```", "```py\n>>> import cv2\n\n```", "```py\n$ ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n\n```", "```py\n$ brew install python\n\n```", "```py\n$ which python\n\n```", "```py\n$ brew tap homebrew/science\n\n```", "```py\n$ pip install numpy\n\n```", "```py\n$ brew install opencv --with-tbb --with-opengl\n\n```", "```py\n$ cd /Library/Python/2.7/site-packages/\n$ ln -s /usr/local/Cellar/opencv/2.4.9/lib/python2.7/site-packages/cv.py cv.py\n$ ln -s /usr/local/Cellar/opencv/2.4.9/lib/python2.7/site-packages/cv2.so cv2.so\n\n```", "```py\n>>> import cv2\n\n```", "```py\n$ sudo apt-get -y install libopencv-dev build-essential cmake libdc1394-22 libdc1394-22-dev libjpeg-dev libpng12-dev libtiff4-dev libjasper-dev libavcodec-dev libavformat-dev libswscale-dev libxine-dev libgstreamer0.10-dev libgstreamer-plugins-base0.10-dev libv4l-dev libtbb-dev libqt4-dev libmp3lame-dev libopencore-amrnb-dev libopencore-amrwb-dev libtheora-dev libvorbis-dev libxvidcore-dev x264 v4l-utils python-scipy python-pip python-virtualenv\n\n```", "```py\n$ wget \"https://github.com/Itseez/opencv/archive/2.4.9.tar.gz\" -O ./opencv/opencv.tar.gz\n$ cd opencv\n$ tar xvzf opencv.tar.gz -C .\n$ mkdir release\n$ cd release\n$ sudo apt-get –y install cmake\n$ cmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local -D BUILD_PYTHON_SUPPORT=ON -D WITH_XINE=ON -D WITH_OPENGL=ON -D WITH_TBB=ON -D WITH_EIGEN=ON -D BUILD_EXAMPLES=ON -D BUILD_NEW_PYTHON_SUPPORT=ON -D WITH_V4L=ON ../ \n$ make –j4\n$ sudo make install\n\n```", "```py\n>>> import cv2\n\n```", "```py\nimport cv2\nimg = cv2.imread('./images/input.jpg')\ncv2.imshow('Input image', img)\ncv2.waitKey()\n```", "```py\n>>> import cv2\n>>> img = cv2.imread('./images/input.jpg')\n>>> type(img)\n<type 'numpy.ndarray'>\n\n```", "```py\nimport cv2\ngray_img = cv2.imread('images/input.jpg', cv2.IMREAD_GRAYSCALE)\ncv2.imshow('Grayscale', gray_img)\ncv2.waitKey()\n```", "```py\ncv2.imwrite('images/output.jpg', gray_img)\n```", "```py\n>>> import cv2\n>>> print [x for x in dir(cv2) if x.startswith('COLOR_')]\n\n```", "```py\nimport cv2\nimg = cv2.imread('./images/input.jpg')\ngray_img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\ncv2.imshow('Grayscale image', gray_img)\ncv2.waitKey()\n```", "```py\nyuv_img = cv2.cvtColor(img, cv2.COLOR_BGR2YUV)\n```", "```py\ncv2.imshow('Y channel', yuv_img[:, :, 0])\ncv2.imshow('U channel', yuv_img[:, :, 1])\ncv2.imshow('V channel', yuv_img[:, :, 2])\ncv2.waitKey()\n```", "```py\nhsv_img = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)\ncv2.imshow('HSV image', hsv_img)\n```", "```py\ncv2.imshow('H channel', hsv_img[:, :, 0])\ncv2.imshow('S channel', hsv_img[:, :, 1])\ncv2.imshow('V channel', hsv_img[:, :, 2])\ncv2.waitKey()\n```", "```py\nimport cv2\nimport numpy as np\n\nimg = cv2.imread('images/input.jpg')\nnum_rows, num_cols = img.shape[:2]\n\ntranslation_matrix = np.float32([ [1,0,70], [0,1,110] ])\nimg_translation = cv2.warpAffine(img, translation_matrix, (num_cols, num_rows))\ncv2.imshow('Translation', img_translation)\ncv2.waitKey()\n```", "```py\nimg_translation = cv2.warpAffine(img, translation_matrix, (num_cols + 70, num_rows + 110))\n```", "```py\nimport cv2\nimport numpy as np\n\nimg = cv2.imread('images/input.jpg')\nnum_rows, num_cols = img.shape[:2]\n\ntranslation_matrix = np.float32([ [1,0,70], [0,1,110] ])\nimg_translation = cv2.warpAffine(img, translation_matrix, (num_cols + 70, num_rows + 110))\ntranslation_matrix = np.float32([ [1,0,-30], [0,1,-50] ])\nimg_translation = cv2.warpAffine(img_translation, translation_matrix, (num_cols + 70 + 30, num_rows + 110 + 50))\ncv2.imshow('Translation', img_translation)\ncv2.waitKey()\n```", "```py\nimport cv2\nimport numpy as np\n\nimg = cv2.imread('images/input.jpg')\nnum_rows, num_cols = img.shape[:2]\n\nrotation_matrix = cv2.getRotationMatrix2D((num_cols/2, num_rows/2), 30, 1)\nimg_rotation = cv2.warpAffine(img, rotation_matrix, (num_cols, num_rows))\ncv2.imshow('Rotation', img_rotation)\ncv2.waitKey()\n```", "```py\nimport cv2\nimport numpy as np\n\nimg = cv2.imread('images/input.jpg')\nnum_rows, num_cols = img.shape[:2]\n\ntranslation_matrix = np.float32([ [1,0,int(0.5*num_cols)], [0,1,int(0.5*num_rows)] ])\n2*num_cols, 2*num_rows))\nrotation_matrix = cv2.getRotationMatrix2D((num_cols, num_rows), 30, img_translation = cv2.warpAffine(img, translation_matrix, (1)\nimg_rotation = cv2.warpAffine(img_translation, rotation_matrix, (2*num_cols, 2*num_rows)) \n\ncv2.imshow('Rotation', img_rotation)\ncv2.waitKey()\n```", "```py\nimg_scaled = cv2.resize(img,None,fx=1.2, fy=1.2, interpolation = cv2.INTER_LINEAR)\ncv2.imshow('Scaling - Linear Interpolation', img_scaled) img_scaled = cv2.resize(img,None,fx=1.2, fy=1.2, interpolation = cv2.INTER_CUBIC)\ncv2.imshow('Scaling - Cubic Interpolation', img_scaled) img_scaled = cv2.resize(img,(450, 400), interpolation = cv2.INTER_AREA)\ncv2.imshow('Scaling - Skewed Size', img_scaled) cv2.waitKey()\n```", "```py\nimport cv2\nimport numpy as np\n\nimg = cv2.imread('images/input.jpg')\nrows, cols = img.shape[:2]\n\nsrc_points = np.float32([[0,0], [cols-1,0], [0,rows-1]])\ndst_points = np.float32([[0,0], [int(0.6*(cols-1)),0], [int(0.4*(cols-1)),rows-1]])\naffine_matrix = cv2.getAffineTransform(src_points, dst_points)\nimg_output = cv2.warpAffine(img, affine_matrix, (cols,rows))\n\ncv2.imshow('Input', img)\ncv2.imshow('Output', img_output)\ncv2.waitKey()\n```", "```py\nsrc_points = np.float32([[0,0], [cols-1,0], [0,rows-1]])\ndst_points = np.float32([[cols-1,0], [0,0], [cols-1,rows-1]])\n```", "```py\nimport cv2\nimport numpy as np\n\nimg = cv2.imread('images/input.jpg')\nrows, cols = img.shape[:2]\n\nsrc_points = np.float32([[0,0], [cols-1,0], [0,rows-1], [cols-1,rows-1]])\ndst_points = np.float32([[0,0], [cols-1,0], [int(0.33*cols),rows-1], [int(0.66*cols),rows-1]]) \nprojective_matrix = cv2.getPerspectiveTransform(src_points, dst_points)\nimg_output = cv2.warpPerspective(img, projective_matrix, (cols,rows))\n\ncv2.imshow('Input', img)\ncv2.imshow('Output', img_output)\ncv2.waitKey()\n```", "```py\nsrc_points = np.float32([[0,0], [0,rows-1], [cols/2,0], [cols/2,rows-1]])\ndst_points = np.float32([[0,100], [0,rows-101], [cols/2,0], [cols/2,rows-1]])\n```", "```py\nimport cv2\nimport numpy as np\nimport math\n\nimg = cv2.imread('images/input.jpg', cv2.IMREAD_GRAYSCALE)\nrows, cols = img.shape\n\n#####################\n# Vertical wave\n\nimg_output = np.zeros(img.shape, dtype=img.dtype)\n\nfor i in range(rows):\n    for j in range(cols):\n        offset_x = int(25.0 * math.sin(2 * 3.14 * i / 180))\n        offset_y = 0\n        if j+offset_x < rows:\n            img_output[i,j] = img[i,(j+offset_x)%cols]\n        else:\n            img_output[i,j] = 0\n\ncv2.imshow('Input', img)\ncv2.imshow('Vertical wave', img_output)\n\n#####################\n# Horizontal wave\n\nimg_output = np.zeros(img.shape, dtype=img.dtype)\n\nfor i in range(rows):\n    for j in range(cols):\n        offset_x = 0\n        offset_y = int(16.0 * math.sin(2 * 3.14 * j / 150))\n        if i+offset_y < rows:\n            img_output[i,j] = img[(i+offset_y)%rows,j]\n        else:\n            img_output[i,j] = 0\n\ncv2.imshow('Horizontal wave', img_output)\n\n#####################\n# Both horizontal and vertical \n\nimg_output = np.zeros(img.shape, dtype=img.dtype)\n\nfor i in range(rows):\n    for j in range(cols):\n        offset_x = int(20.0 * math.sin(2 * 3.14 * i / 150))\n        offset_y = int(20.0 * math.cos(2 * 3.14 * j / 150))\n        if i+offset_y < rows and j+offset_x < cols:\n            img_output[i,j] = img[(i+offset_y)%rows,(j+offset_x)%cols]\n        else:\n            img_output[i,j] = 0\n\ncv2.imshow('Multidirectional wave', img_output)\n\n#####################\n# Concave effect\n\nimg_output = np.zeros(img.shape, dtype=img.dtype)\n\nfor i in range(rows):\n    for j in range(cols):\n        offset_x = int(128.0 * math.sin(2 * 3.14 * i / (2*cols)))\n        offset_y = 0\n        if j+offset_x < cols:\n            img_output[i,j] = img[i,(j+offset_x)%cols]\n        else:\n            img_output[i,j] = 0\n\ncv2.imshow('Concave', img_output)\n\ncv2.waitKey()\n```"]