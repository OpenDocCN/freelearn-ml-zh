["```py\nFalse|BingImagesVideosMapsNewsShoppingMSNOfficeOutlookWordExcelPowerPointOneNoteSwayOneDriveCalendarPeopleSigninRewardsDownloadtoday’simagePlaytoday'squizTheTajMahalinAgraforIndia'sRepublicDay©MicheleFalzone/plainpictureIt'sRepublicDayinIndiaImageofthedayJan26,2020It'sRepublicDayinIndia©MicheleFalzone/plainpictureForIndia's70thRepublicDay\n```", "```py\nTrue|USATODAY:LatestWorldandUSNews-USATODAY.comSUBSCRIBENOWtogethomedeliveryNewsSportsEntertainmentLifeMoneyTechTravelOpinionWeatherIconHumidityPrecip.WindsOpensettingsSettingsEnterCityNameCancelSetClosesettingsFullForecastCrosswordsInvestigationsAppsBest-SellingBooksCartoons\n```", "```py\npublic static class Constants\n{\n    public const string MODEL_NAME = \"webcontentclassifier.mdl\";\n\n    public const string SAMPLE_DATA = \"sampledata.csv\";\n\n    public const string TEST_DATA = \"testdata.csv\";\n\n    public const double MALICIOUS_THRESHOLD = .5;\n}\n```", "```py\npublic class WebPageResponseItem\n{\n    public double Confidence { get; set; }\n\n    public bool IsMalicious { get; set; }\n\n    public string Content { get; set; }\n\n    public string ErrorMessage { get; set; }\n\n    public WebPageResponseItem()\n    {\n    }\n\n    public WebPageResponseItem(string content)\n    {\n        Content = content;\n    }\n}\n```", "```py\npublic static WebPageInputItem ToWebPageInputItem(this WebPageResponseItem webPage)\n{\n    return new WebPageInputItem\n    {\n        HTMLContent = webPage.Content\n    };\n}\n```", "```py\npublic static string ToWebContentString(this string url)\n{\n    var web = new HtmlWeb();\n\n    var htmlDoc = web.Load(url);\n\n    var sb = new StringBuilder();\n\n    htmlDoc.DocumentNode.Descendants().Where(n => n.Name == \"script\" || n.Name == \"style\").ToList().ForEach(n => n.Remove());\n\n    foreach (var node in htmlDoc.DocumentNode.SelectNodes(\"//text()[normalize-space(.) != '']\"))\n    {\n        sb.Append(node.InnerText.Trim().Replace(\" \", \"\"));\n    }\n\n    return sb.ToString();\n}\n```", "```py\npublic class WebPageInputItem\n{\n    [LoadColumn(0), ColumnName(\"Label\")]\n    public bool Label { get; set; }\n\n    [LoadColumn(1)]\n    public string HTMLContent { get; set; }\n}\n```", "```py\npublic class WebPagePredictionItem\n{\n    public bool Prediction { get; set; }\n\n    public float Probability { get; set; }\n\n    public float Score { get; set; }\n}\n```", "```py\nprivate static void GetContentFile(string inputFile, string outputFile)\n{\n    var lines = File.ReadAllLines(inputFile);\n\n    var urlContent = new List<string>();\n\n    foreach (var line in lines)\n    {\n        var url = line.Split(',')[0];\n        var label = Convert.ToBoolean(line.Split(',')[1]);\n\n        Console.WriteLine($\"Attempting to pull HTML from {line}\");\n\n        try\n        {\n            var content = url.ToWebContentString();\n\n            content = content.Replace('|', '-');\n\n            urlContent.Add($\"{label}|{content}\");\n        }\n        catch (Exception)\n        {\n            Console.WriteLine($\"Failed to pull HTTP Content from {url}\");\n        }\n    }\n\n    File.WriteAllText(Path.Combine(AppContext.BaseDirectory, outputFile), string.Join(Environment.NewLine, urlContent));\n}     \n```", "```py\npublic void Extract(string trainingURLList, string testURLList, string trainingOutputFileName, string testingOutputFileName)\n{\n    GetContentFile(trainingURLList, trainingOutputFileName);\n\n    GetContentFile(testURLList, testingOutputFileName);\n}\n```", "```py\npublic WebPageResponseItem Predict(string url) => Predict(new WebPageResponseItem(url.ToWebContentString()));\n```", "```py\npublic bool Initialize()\n{\n    var assembly = typeof(WebContentPredictor).GetTypeInfo().Assembly;\n\n    var resource = assembly.GetManifestResourceStream($\"chapter10.lib.Model.{Constants.MODEL_NAME}\");\n\n    if (resource == null)\n    {\n        return false;\n    }\n\n    _model = MlContext.Model.Load(resource, out _);\n\n    return true;\n}\n```", "```py\npublic WebPageResponseItem Predict(WebPageResponseItem webPage)\n{\n    var predictionEngine = MlContext.Model.CreatePredictionEngine<WebPageInputItem, WebPagePredictionItem>(_model);\n\n    var prediction = predictionEngine.Predict(webPage.ToWebPageInputItem());\n\n    webPage.Confidence = prediction.Probability;\n    webPage.IsMalicious = prediction.Prediction;\n\n    return webPage;\n}\n```", "```py\nvar dataView = MlContext.Data.LoadFromTextFile<WebPageInputItem>(trainingFileName, hasHeader: false, separatorChar: '|');\n```", "```py\nvar dataProcessPipeline = MlContext.Transforms.Text\n    .FeaturizeText(FEATURES, nameof(WebPageInputItem.HTMLContent))\n    .Append(MlContext.BinaryClassification.Trainers.SdcaLogisticRegression(labelColumnName: \"Label\", featureColumnName: FEATURES));\n```", "```py\nvar trainedModel = dataProcessPipeline.Fit(dataView);\n\nMlContext.Model.Save(trainedModel, dataView.Schema, Path.Combine(AppContext.BaseDirectory, modelFileName));\n```", "```py\nvar testingDataView = MlContext.Data.LoadFromTextFile<WebPageInputItem>(testingFileName, hasHeader: false, separatorChar: '|');\n\nIDataView testDataView = trainedModel.Transform(testingDataView);\n\nvar modelMetrics = MlContext.BinaryClassification.Evaluate(\n    data: testDataView);\n\nConsole.WriteLine($\"Entropy: {modelMetrics.Entropy}\");\nConsole.WriteLine($\"Log Loss: {modelMetrics.LogLoss}\");\nConsole.WriteLine($\"Log Loss Reduction: {modelMetrics.LogLossReduction}\");\n```", "```py\nprivate readonly WebContentPredictor _prediction = new WebContentPredictor();\n```", "```py\nprivate bool _enableGoButton;\n\npublic bool EnableGoButton\n{\n    get => _enableGoButton;\n\n    private set\n    {\n        _enableGoButton = value;\n        OnPropertyChanged();\n    }\n}\n\nprivate string _webServiceURL;\n\npublic string WebServiceURL\n{\n    get => _webServiceURL;\n\n    set\n    {\n        _webServiceURL = value;\n\n        OnPropertyChanged();\n\n        EnableGoButton = !string.IsNullOrEmpty(value);\n    }\n}\n\nprivate string _webPageClassification;\n\npublic string WebPageClassification\n{\n    get => _webPageClassification;\n\n    set\n    {\n        _webPageClassification = value;\n        OnPropertyChanged();\n    }\n}\n```", "```py\npublic bool Initialize() => _prediction.Initialize();\n```", "```py\npublic Uri BuildUri()\n{\n    var webServiceUrl = WebServiceURL;\n\n    if (!webServiceUrl.StartsWith(\"http://\", StringComparison.InvariantCultureIgnoreCase) &&\n        !webServiceUrl.StartsWith(\"https://\", StringComparison.InvariantCultureIgnoreCase))\n    {\n        webServiceUrl = $\"http://{webServiceUrl}\";\n    }\n\n    return new Uri(webServiceUrl);\n}\n```", "```py\npublic (Classification ClassificationResult, string BrowserContent) Classify(string url)\n{\n    var result = _prediction.Predict(url);\n\n    WebPageClassification = $\"Webpage is considered {result.Confidence:P1} malicious\";\n\n    return result.Confidence < Constants.MALICIOUS_THRESHOLD ? \n        (Classification.BENIGN, string.Empty) : \n        (Classification.MALICIOUS, $\"<html><body bgcolor=\\\"red\\\"><h2 style=\\\"text-align: center\\\">Machine Learning has found {WebServiceURL} to be a malicious site and was blocked automatically</h2></body></html>\");\n}\n```", "```py\npublic event PropertyChangedEventHandler PropertyChanged;\n\nprotected virtual void OnPropertyChanged([CallerMemberName] string propertyName = null)\n{\n    PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));\n}\n```", "```py\n<Grid>\n  <Grid.RowDefinitions>\n     <RowDefinition Height=\"Auto\" />\n     <RowDefinition Height=\"*\" />\n     <RowDefinition Height=\"Auto\" />\n  </Grid.RowDefinitions>\n```", "```py\n<Grid.ColumnDefinitions>\n    <ColumnDefinition Width=\"*\" />\n    <ColumnDefinition Width=\"Auto\" />\n</Grid.ColumnDefinitions>\n```", "```py\n<TextBox Grid.Row=\"0\" Grid.Column=\"0\" KeyUp=\"TxtBxUrl_KeyUp\" Text=\"{Binding WebServiceURL, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}\" />\n```", "```py\n<Button Grid.Row=\"0\" Grid.Column=\"1\" Content=\"GO\" Click=\"BtnGo_Click\" IsEnabled=\"{Binding EnableGoButton}\" />\n```", "```py\n<WebView Grid.Row=\"1\" Grid.Column=\"0\" Grid.ColumnSpan=\"2\" x:Name=\"wvMain\" NavigationStarting=\"WvMain_OnNavigationStarting\" />\n```", "```py\n<Grid Grid.Column=\"0\" Grid.ColumnSpan=\"2\" Grid.Row=\"2\" Background=\"#1e1e1e\" Height=\"30\">\n    <TextBlock Text=\"{Binding WebPageClassification, Mode=OneWay}\" Foreground=\"White\" Margin=\"10,0,0,0\" />\n</Grid>\n```", "```py\nprivate MainPageViewModel ViewModel => (MainPageViewModel) DataContext;\n```", "```py\npublic MainPage()\n{\n    InitializeComponent();\n\n    DataContext = new MainPageViewModel();\n}\n```", "```py\nprotected override async void OnNavigatedTo(NavigationEventArgs e)\n{\n    var initialization = ViewModel.Initialize();\n\n    if (initialization)\n    {\n        return;\n    }\n\n    await ShowMessage(\"Failed to initialize model - verify the model has been created\");\n\n    Application.Current.Exit();\n\n    base.OnNavigatedTo(e);\n}\n```", "```py\npublic async Task<IUICommand> ShowMessage(string message)\n{\n    var dialog = new MessageDialog(message);\n\n    return await dialog.ShowAsync();\n}\n```", "```py\nprivate void BtnGo_Click(object sender, RoutedEventArgs e) => Navigate();\n```", "```py\nprivate void Navigate()\n{\n    wvMain.Navigate(ViewModel.BuildUri());\n}\n```", "```py\nprivate void TxtBxUrl_KeyUp(object sender, KeyRoutedEventArgs e)\n{\n    if (e.Key == VirtualKey.Enter && ViewModel.EnableGoButton)\n    {\n        Navigate();\n    }\n}\n```", "```py\nprivate void WvMain_OnNavigationStarting(WebView sender, WebViewNavigationStartingEventArgs args)\n{\n    if (args.Uri == null)\n    {\n        return;\n    }\n\n    var (classificationResult, browserContent) = ViewModel.Classify(args.Uri.ToString());\n\n    switch (classificationResult)\n    {\n        case Classification.BENIGN:\n            return;\n        case Classification.MALICIOUS:\n            sender.NavigateToString(browserContent);\n            break;\n    }\n}\n```", "```py\npublic string TrainingOutputFileName { get; set; }\n\npublic string TestingOutputFileName { get; set; }\n\npublic string URL { get; set; }\n```", "```py\nswitch (arguments.Action)\n{\n    case ProgramActions.FEATURE_EXTRACTOR:\n        new WebContentFeatureExtractor().Extract(arguments.TrainingFileName, arguments.TestingFileName, \n            arguments.TrainingOutputFileName, arguments.TestingOutputFileName);\n        break;\n    case ProgramActions.PREDICT:\n        var predictor = new WebContentPredictor();\n\n        var initialization = predictor.Initialize();\n\n        if (!initialization)\n        {\n            Console.WriteLine(\"Failed to initialize the model\");\n\n            return;\n        }\n\n        var prediction = predictor.Predict(arguments.URL);\n\n        Console.WriteLine($\"URL is {(prediction.IsMalicious ? \"malicious\" : \"clean\")} with a {prediction.Confidence:P2}% confidence\");\n        break;\n    case ProgramActions.TRAINING:\n        new WebContentTrainer().Train(arguments.TrainingFileName, arguments.TestingFileName, arguments.ModelFileName);\n        break;\n    default:\n        Console.WriteLine($\"Unhandled action {arguments.Action}\");\n        break;\n}\n```", "```py\nPS chapter10\\trainer\\bin\\Debug\\netcoreapp3.0> .\\chapter10.trainer.exe TrainingFileName ..\\..\\..\\..\\Data\\trainingURLList.csv TestingFileName ..\\..\\..\\..\\Data\\testingURLList.csv\nAttempting to pull HTML from https://www.google.com, false\nAttempting to pull HTML from https://www.bing.com, false\nAttempting to pull HTML from https://www.microsoft.com, false\nAttempting to pull HTML from https://www8.hp.com/us/en/home.html, false\nAttempting to pull HTML from https://dasmalwerk.eu, true\nAttempting to pull HTML from http://vxvault.net, true\nAttempting to pull HTML from https://www.tmz.com, true\nAttempting to pull HTML from http://openmalware.org, true\nFailed to pull HTTP Content from http://openmalware.org\nAttempting to pull HTML from https://www.dell.com, false\nAttempting to pull HTML from https://www.lenovo.com, false\nAttempting to pull HTML from https://www.twitter.com, false\nAttempting to pull HTML from https://www.reddit.com, false\nAttempting to pull HTML from https://www.tmz.com, true\nAttempting to pull HTML from https://www.cnn.com, true\nAttempting to pull HTML from https://www.usatoday.com, true\n```", "```py\nPS chapter10\\trainer\\bin\\Debug\\netcoreapp3.0> .\\chapter10.trainer.exe ModelFileName webcontentclassifier.mdl Action TRAINING TrainingFileName ..\\..\\..\\..\\Data\\sampledata.csv TestingFileName ..\\..\\..\\..\\Data\\testdata.csv\nEntropy: 0.9852281360342516\nLog Loss: 0.7992317560011841\nLog Loss Reduction: 0.18878508766684401\n```"]