["```py\ndef super_simple_alert(datapoint):\n```", "```py\n  if datapoint['temperature'] < 10:\n```", "```py\n    print('this is a real time alert. temp too low')\n```", "```py\n  if datapoint['pH'] > 5.5:\n```", "```py\n    print('this is a real time alert. pH too high')\n```", "```py\nimport requests\n```", "```py\nimport json\n```", "```py\nresponse = requests.get('http://www.google.com')\n```", "```py\nprint(response.status_code)\n```", "```py\nprint(response.text)\n```", "```py\nimport requests\n```", "```py\nimport json\n```", "```py\ndata = {'temperature': 10, 'pH': 5.5}\n```", "```py\nresponse = requests.post('http://www.example.com',data=data)\n```", "```py\nprint(response.status_code)\n```", "```py\nprint(response.text)\n```", "```py\n{\n```", "```py\n     'name': 'your name',\n```", "```py\n     'address': 'your address',\n```", "```py\n     'age': 'your age'\n```", "```py\n}\n```", "```py\nimport json\n```", "```py\ndef super_simple_alert(datapoint):    \n```", "```py\n    answer = ''\n```", "```py\n    if datapoint['temperature'] < 10:\n```", "```py\n        answer += 'temp too low ' \n```", "```py\n    if datapoint['pH'] > 5.5:\n```", "```py\n        answer += 'pH too high '\n```", "```py\n    if answer == '':\n```", "```py\n        answer = 'all good'\n```", "```py\n    return answer\n```", "```py\ndef lambda_handler(event, context):\n```", "```py\n    answer = super_simple_alert(event)\n```", "```py\n    return {\n```", "```py\n        'statusCode': 200,\n```", "```py\n        'body': json.dumps({'status': answer}),\n```", "```py\n    }\n```", "```py\nimport requests\n```", "```py\nimport json\n```", "```py\ndata = {'temperature': 8, 'pH': 4}\n```", "```py\nresponse = requests.post('YOUR_URL', data = json.dumps(data))\n```", "```py\nprint(json.loads(response.text))\n```", "```py\n{'statusCode': 200, 'body': '{\"status\": \"temp too low \"}'}\n```", "```py\n{'value':'hello'}\n```", "```py\n    from pyspark.sql import SparkSession\n    from pyspark.sql.types import *\n    spark = SparkSession \\\n        .builder \\\n        .appName(\"quickexample\") \\\n        .getOrCreate()\n    schema = StructType([ StructField(\"value\", StringType(), True) ])\n    streamingDF = (\n      spark\n        .readStream\n        .schema(schema)\n        .json('example.json')\n    )\n    display(streamingDF)\n    ```"]