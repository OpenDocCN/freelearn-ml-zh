- en: '*Chapter 4*: Understanding and Visualizing Data'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Data visualization is an art! No matter how much effort you and your team put
    into data preparation and preliminary analysis for modeling, if you don't know
    how to show your findings effectively, your audience may not understand the point
    you are trying to make.
  prefs: []
  type: TYPE_NORMAL
- en: Often, such situations may be even worse when you are dealing with decision-makers.
    For example, if you choose the wrong set of charts to tell a particular story,
    people can misinterpret your analysis and make bad decisions.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the different types of data visualizations and knowing how they
    fit with each type of analysis will put you in a very good position, in terms
    of engaging your audience and transmitting the information you want to.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn about some data visualization techniques. We
    will be covering the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Visualizing relationships in your data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Visualizing comparisons in your data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Visualizing compositions in your data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Visualizing distributions in your data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building key performance indicators
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing Quick Sight
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We already know why we need to master these topics, so let's get started.
  prefs: []
  type: TYPE_NORMAL
- en: Visualizing relationships in your data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When we need to show relationships in our data, we are usually talking about
    plotting two or more variables in a chart to visualize their level of dependency.
    A **scatter plot** is probably the most common type of chart to show the relationship
    between **two** variables. The following is a scatter plot for two variables,
    **x** and **y**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.1 – Plotting relationships with a scatter plot'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16735_04_001.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.1 – Plotting relationships with a scatter plot
  prefs: []
  type: TYPE_NORMAL
- en: The preceding plot shows a clear relationship between **x** and **y**. As **x**
    increases, **y** also increases. In this particular case, we can say that there
    is a linear relationship between both variables. Keep in mind that scatter plots
    may also catch other types of relationships, not only linear ones. For example,
    it would also be possible to find an exponential relationship between the two
    variables.
  prefs: []
  type: TYPE_NORMAL
- en: Another nice chart to make comparisons with is known as a **bubble chart**.
    Just like a scatter plot, it will also show the relationship between variables;
    however, here, you can use a third dimension, which will be represented by the
    size of the point.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a bubble chart that''s explaining an investment schema, where
    **x** is the annual rate, **y** is the investment period, and the size of the
    bubble is the size of each investment option:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.2 – Plotting relationships with a bubble chart'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16735_04_002.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.2 – Plotting relationships with a bubble chart
  prefs: []
  type: TYPE_NORMAL
- en: 'Looking at the preceding chart, we can see two types of relationships: the
    longer the investment period, the higher your annual rate, and the higher the
    amount invested, the higher your annual rate. As we can see, this is a very effective
    way to present this type of analysis. Next, we''ll learn how to compare our data.'
  prefs: []
  type: TYPE_NORMAL
- en: Visualizing comparisons in your data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Comparisons are very common in data analysis and we have different ways to present
    them. Let's start with the **bar chart**. I am sure you have seen many reports
    that have used this type of visualization.
  prefs: []
  type: TYPE_NORMAL
- en: 'Bar charts can be used to compare one variable among different classes; for
    example, a car''s price across different models or population size per country.
    In the following graph, we have used a bar chart to present the number of Covid-19
    cases per state in India, until June 2020:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.3 – Plotting comparisons with a bar chart'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16735_04_003.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.3 – Plotting comparisons with a bar chart
  prefs: []
  type: TYPE_NORMAL
- en: 'Sometimes, we can also use **stacked column charts** to add another dimension
    to the data that is being analyzed. For example, in the following graph, we are
    using a stacked bar chart to show how many people were on board the Titanic, per
    gender. Additionally, we are breaking down the number of people who survived (positive
    class) and those who did not (negative class):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.4 – Using a stacked bar chart to analyze the Titanic disaster dataset'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16735_04_004.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.4 – Using a stacked bar chart to analyze the Titanic disaster dataset
  prefs: []
  type: TYPE_NORMAL
- en: As we can see, most of the women survived the disaster, while most of the men
    did not. The stacked bars help us visualize the difference between genders. Finally,
    you should know that we can also show percentages on those stacked bars, instead
    of absolute numbers.
  prefs: []
  type: TYPE_NORMAL
- en: '**Column charts** are also useful If you need to compare one or two variables
    across different periods. For example, in the following graph, we can see the
    annual Canadian electronic vehicle sales by province:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.5 – Plotting comparisons with a column chart'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16735_04_005.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.5 – Plotting comparisons with a column chart
  prefs: []
  type: TYPE_NORMAL
- en: Another very effective way to make comparisons across different periods is by
    using **line charts**. In the following chart, we are showing a pretty interesting
    example of how we can compare different algorithms' performance, in a particular
    project, across different release dates.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Line charts are usually very helpful to show if there is any trend in the data
    over the period of time under analysis. A very common use case for line charts
    is **forecasting**, where we usually have to analyze trends and seasonality in
    time series data.
  prefs: []
  type: TYPE_NORMAL
- en: For example, we can see that the **Classification** **and** **Regression** **Trees**
    (**CART**) model used to be the poorest performant model compared to other algorithms,
    such as **AdaBoost** (**ADA**), **Gradient Boosting** (**GB**), **Random Forest**
    (**RF**), and **logistic regression** (**LOGIT**).
  prefs: []
  type: TYPE_NORMAL
- en: 'However, in July, the CART model was changed, and it turned out to be the third-best
    model across all other models. This whole story about the best model for each
    period can easily be seen in the following chart:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.6 – Plotting comparisons with a line chart'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16735_04_006.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.6 – Plotting comparisons with a line chart
  prefs: []
  type: TYPE_NORMAL
- en: Finally, you can also show comparisons of your data using **tables**. Tables
    are more useful when we have multiple dimensions (usually placed in the rows of
    the table) and one or multiple metrics to make comparisons against (usually placed
    in the columns of the table).
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will learn about another set of charts that aims to
    show the distribution of your variables. This set of charts is particularly important
    for modeling tasks since you must know the distribution of a feature to think
    about potential data transformations for it. Let's take a look at this!
  prefs: []
  type: TYPE_NORMAL
- en: Visualizing distributions in your data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Exploring the distribution of your feature is very important to understand
    some key characteristics of it, such as its skewness, mean, median, and quantiles.
    You can easily visualize skewness by plotting a **histogram**. This type of chart
    groups your data into **bins** or **buckets** and performs counts on top of them.
    For example, the following chart shows a histogram for the *age* variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.7 – Plotting distributions with a histogram'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16735_04_007.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.7 – Plotting distributions with a histogram
  prefs: []
  type: TYPE_NORMAL
- en: 'Looking at the histogram, we can conclude that most of the people are between
    20 and 50 years old. We can also see a few people more than 60 years old. Another
    example of a histogram is shown in the following chart, where we are plotting
    the distribution of payments from a particular event that has different ticket
    prices. We want to see how much money people are paying per ticket:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.8 – Checking skewness with a histogram'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16735_04_008.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.8 – Checking skewness with a histogram
  prefs: []
  type: TYPE_NORMAL
- en: Here, we can see that the majority of the people are paying a maximum of 100
    dollars per ticket. That's the reason why we can see a skewed distribution to
    the right-hand side (the tail side).
  prefs: []
  type: TYPE_NORMAL
- en: If you want to see other characteristics of the distribution, such as its median,
    quantiles, and outliers, then you should use **box plots**. In the following chart,
    we are again comparing the performance of different algorithms in a given dataset.
  prefs: []
  type: TYPE_NORMAL
- en: These algorithms were executed many times, in a cross-validation process, which
    resulted in multiple outputs for the same algorithm; for example, one accuracy
    metric for each execution of the algorithm on each fold.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since we have multiple accuracy metrics for each algorithm, we can use a box
    plot to check how each of those algorithms performed during the cross-validation
    process:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.9 – Plotting distributions with a box plot'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16735_04_009.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.9 – Plotting distributions with a box plot
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, we can see that box plots can present some information about the distribution
    of the data, such as its median, lower quartile, upper quartile, and outliers.
    For a complete understanding of each element of a box plot, take a look at the
    following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.10 – Box plot elements'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16735_04_010.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.10 – Box plot elements
  prefs: []
  type: TYPE_NORMAL
- en: By analyzing the box plot shown in *Figure 4.9*, we can conclude that the ADA
    algorithm has presented some outliers during the cross-validation process since
    one of the executions resulted in a very good model (around 92% accuracy). All
    the other executions of AdaBoost resulted in less than 85% accuracy, with a median
    value of around 80%.
  prefs: []
  type: TYPE_NORMAL
- en: Another conclusion we can make after analyzing *Figure 4.9* is that the CART
    algorithm presented the poorest performance during the cross-validation process
    (the lowest median and lower quartile).
  prefs: []
  type: TYPE_NORMAL
- en: Before we wrap up this section, note that you can also use a scatter plot to
    analyze data distributions when you have more than one variable. Now, let's look
    at another set of charts that is useful for showing compositions in your data.
  prefs: []
  type: TYPE_NORMAL
- en: Visualizing compositions in your data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes, you want to analyze the various elements that compose your feature;
    for example, the percentage of sales per region or percentage of queries per channel.
    In both examples, we are not considering any time dimension; instead, we are just
    looking at the data as a whole. For these types of compositions, where you don't
    have the time dimension, you could show your data using **pie charts**, **stacked
    100% bar charts**, and **treemaps**.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a pie chart showing the number of queries per customer channel,
    for a given company, during a pre-defined period of time:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.11 – Plotting compositions with a pie chart'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16735_04_011.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.11 – Plotting compositions with a pie chart
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to show compositions while considering a time dimension, then your
    most common options would be a **stacked area chart**, a **stacked 100% area chart**,
    a **stacked column chart**, or a **stacked 100% column chart**. For reference,
    take a look at the following chart, which shows the sales per region from 2016
    until 2020:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.12 – Plotting compositions with a stacked 100% column chart'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16735_04_012.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.12 – Plotting compositions with a stacked 100% column chart
  prefs: []
  type: TYPE_NORMAL
- en: As we can see, stacked 100% column charts help us understand compositions across
    different periods.
  prefs: []
  type: TYPE_NORMAL
- en: Building key performance indicators
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we wrap up these data visualization sections, I want to introduce **key
    performance indicators**, or **KPIs** for short.
  prefs: []
  type: TYPE_NORMAL
- en: A KPI is usually a single value that describes the results of a business indicator,
    such as the churn rate, **net promoter score** (**NPS**), **return on investment**
    (**ROI**), and so on. Although there are some commonly used indicators across
    different industries, you are free to come up with a number, based on your company's
    needs.
  prefs: []
  type: TYPE_NORMAL
- en: To be honest, the most complex challenge associated with indicators is not in
    their visualization aspect itself, but in the way they have been built (the rules
    used) and the way they will be communicated and used across different levels of
    the company.
  prefs: []
  type: TYPE_NORMAL
- en: From a visualization perspective, just like any other single value, you can
    use all those charts that we have learned about to analyze your indicator, depending
    on your need. However, if you just want to show your KPI, with no time dimension,
    you can use a **widget**.
  prefs: []
  type: TYPE_NORMAL
- en: Alright, that's all I have to talk about regarding data visualization techniques
    for the AWS machine learning specialty exam. Now, let's take a look at Quick Sight,
    an AWS service where you can implement all these visualization techniques you
    have just learned.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing Quick Sight
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Amazon Quick Sight is a cloud-based analytics service that allows you to build
    data visualizations and ad hoc analysis. Quick Sight supports a variety of data
    sources, such as Redshift, Aurora, Athena, RDS, and your on-premises database
    solution.
  prefs: []
  type: TYPE_NORMAL
- en: Other sources of data include S3, where you can retrieve data from Excel, CSV,
    or log files, and **Software as a Service** (**SaaS**) solutions, where you can
    retrieve data from Salesforce entities.
  prefs: []
  type: TYPE_NORMAL
- en: 'Amazon Quick Sight has two versions:'
  prefs: []
  type: TYPE_NORMAL
- en: Standard Edition
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enterprise Edition
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The most important difference between these two versions is the possibility
    of integration with Microsoft **Active Directory** (**AD**) and encryption at
    rest. Both features are only provided in the enterprise edition.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Keep in mind that AWS services are constantly evolving, so more differences
    between the standard and enterprise versions may crop up in the future. You should
    always consult the latest documentation of AWS services to check what's new.
  prefs: []
  type: TYPE_NORMAL
- en: 'In terms of access management, Quick Sight offers a very simple interface you
    can use to control user access. In the standard edition, you have pretty much
    two options for inviting a user to your Quick Sight account:'
  prefs: []
  type: TYPE_NORMAL
- en: You can invite an IAM user.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can send an invitation to an email address.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you invite an IAM user, then they can automatically log into your account
    and see or edit your visualization, depending on the type of permission you have
    provided during Quick Sight user creation. If you have invited an email address,
    then the email owner has to access his/her mailbox to complete this operation.
  prefs: []
  type: TYPE_NORMAL
- en: Removing a user is also pretty straightforward. The only extra information you
    have to provide while removing a user is whether you want to transfer the orphaned
    resources to another user into your account, *or* whether you want to delete all
    the user's resources.
  prefs: []
  type: TYPE_NORMAL
- en: If you are playing with the enterprise edition, this process of authorizing
    users can be a little different since you have AD working for you. In this case,
    you can grant access to AD groups, and all the users from that group would be
    granted access to your account on Quick Sight.
  prefs: []
  type: TYPE_NORMAL
- en: Also, remember that in both versions, all data transfer is encrypted; however,
    you will only find encryption at rest in the enterprise edition.
  prefs: []
  type: TYPE_NORMAL
- en: When you are bringing data into Quick Sight, you are technically creating what
    we call **datasets**. Datasets, in turn, are imported in an optimized structure
    into Quick Sight, known as the **Super-fast, Parallel, In-memory, Calculation
    Engine** (**SPICE**). That's why Quick Sight can perform data visualization on
    big data.
  prefs: []
  type: TYPE_NORMAL
- en: We know that Quick Sight offers high availability and durability since the data
    that's imported into it is replicated.
  prefs: []
  type: TYPE_NORMAL
- en: Something else you should be aware of is that Quick Sight does not only allow
    you to plot your data but also perform some small data preparation tasks, such
    as renaming fields, computing new fields, changing data types, preparing queries
    to retrieve data from the source, and joining tables from the same source.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s summarize the main steps for working with Quick Sight:'
  prefs: []
  type: TYPE_NORMAL
- en: User creation and authorization.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connecting to a **data source**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Bringing data into a **dataset**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Your dataset will be imported into **SPICE**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From a dataset, you can create an **analysis**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, inside your analysis, you can add **visuals**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In case you want to go further, you can create a snapshot of your analysis and
    place it in a **dashboard**. Alternatively, you can group your analysis into **stories**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: That brings us to the end of this chapter about data visualizations! Now, let's
    take a look at what we have learned.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have reached the end of this chapter about data visualization. Let's take
    this opportunity to provide a quick recap of what we have learned. We started
    this chapter by showing you how to visualize relationships in your data. Scatter
    plots and bubble charts are the most important charts in this category, either
    to show relationships between two or three variables, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: Then, we moved on to another category of data visualization, which aimed to
    make comparisons in your data. The most common charts that you can use to show
    comparisons are bar charts, column charts, and line charts. Tables are also useful
    to show comparisons.
  prefs: []
  type: TYPE_NORMAL
- en: The next use case that we covered was visualizing data distributions. The most
    common types of charts that are used to show distributions are histograms and
    box plots.
  prefs: []
  type: TYPE_NORMAL
- en: Then, we moved on to compositions. We use this set of charts when we want to
    show the different elements that make up the data. While showing compositions,
    you must be aware of whether you want to present static data or data that changes
    over time. For static data, you should use a pie chart, a stacked 100% bar chart,
    or a treemap. For data that changes over time, you should use a stacked area chart,
    a stacked 100% area chat, a stacked column chart, or a stacked 100% column chart.
  prefs: []
  type: TYPE_NORMAL
- en: The last section of this chapter was reserved for Quick Sight, which is an AWS
    service that you can use to visualize your data. You learned about the different
    versions and features of the service, and you were then introduced to SPICE.
  prefs: []
  type: TYPE_NORMAL
- en: Well done! In the next chapter, you will learn about AWS's data storing services,
    such as S3, EBS, EFS, and many others. That is going to be a very important chapter
    for your certification journey, so make sure you're prepared! However, before
    we jump into that new chapter, let's practice a little more for the exam!
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You are working as a data scientist for a fintech company. At the moment, you
    are working on a regression model that predicts how much money customers will
    spend on their credit card transactions in the next month. You believe you have
    created a good model; however, you want to complete your residual analysis to
    confirm that the model errors are randomly distributed around zero. What is the
    best chart for performing this residual analysis?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a) Line chart
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: b) Bubble chart
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: c) Scatter plot
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: d) Stacked bar chart
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Answer
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: C, In this case, you want to show the distribution of the model errors. A scatter
    plot would be a nice approach to present such an analysis. Having model errors
    randomly distributed across zero is just more evidence that the model is not suffering
    from overfitting. Histograms are also nice for performing error analysis.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Although you believe that two particular variables are highly correlated, you
    think this is not a linear correlation. Knowing the type of correlation between
    these two variables is crucial for determining the type of algorithm that you
    are going to use in later phases of this project. Which type of chart could you
    use to show the correlations between these two variables?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a) Line chart
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: b) Bubble chart
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: c) Histogram
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: d) Scatter plot
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Answer
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: D, Correlation is a type of relationship. In this case, we just have two variables,
    so a scatter plot would be a good approach to this problem.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You are working for a call center company, and the business team wants to see
    the percentage of calls on each channel of their **interactive voice response
    device**. You just got those percentages, broken down per month. What's the best
    way to show this monthly information to your users?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a) Pie chart
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: b) Stacked 100% column chart
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: c) Histogram
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: d) Scatter plot
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Answer
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: B, In this case, you want to show the composition of your data across different
    periods. Both a and b could be used to show compositions; however, only option
    b would be appropriate to show those compositions across each month.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You are working as a data scientist for a telecom company. The company offers
    many different services related to broadband, TV, phone, and mobile. In total,
    the company offers more than 50 services. You want to see the number of services
    that each customer usually signs for. What's the most appropriate chart to use
    to prepare for this visualization?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a) Pie chart
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: b) Stacked 100% column chart
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: c) Histogram
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: d) Scatter plot
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Answer
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: C, Since the company has so many services and you want to see the distribution
    of the number of services per customer, the most appropriate chart would be a
    histogram. Keep in mind that, most of the time, when the goal of the analysis
    is showing distributions, your most common options are histograms and box plots.
    Depending on the use case, scatter plots can also be used.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You are working on a sales report for your company and you need to make different
    types of comparisons regarding your company's sales across different regions.
    Which of the following types of charts are suitable for presenting comparisons
    in your data (choose all the correct answers)?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a) Bar chart
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: b) Column chart
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: c) Line chart
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: d) Histogram
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Answer
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: A, B, C, You have multiple options when it comes to using charts to present
    comparisons on your data. Use bar charts when you have a single variable and no
    time dimension; use column charts when you have one or two variables changing
    over time; and use line charts when you have three or more variables changing
    over time. Finally, remember that it is also possible to show comparisons using
    tables. This is especially helpful when you have three or more variables.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You are working as a data scientist for a meteorological organization. Your
    company is measuring the daily temperature of a particular region during the entire
    summer. The summer is over and it is now time to present a detailed report about
    the data that has been captured. Which of the following options are not valid
    types of analysis (choose all correct answers)?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a) Create a box plot to show some statistics about the data; for example, the
    median temperature, lower and upper quartiles, and outlier points.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: b) Create a histogram to show the distribution of the data across all the different
    days when temperatures have been measured.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: c) Create a key performance indicator just to present the average temperature
    that has been measured during the summer, in that particular region.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: d) Create a line chart to show the evolution of the temperature, day after day.
    That will give you some sense about the increasing and decreasing trends.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Answer
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: All the answers are valid types of analysis for this particular problem. Box
    plots and histograms would be very useful to present the distribution of the data;
    a KPI would provide a straight answer to the question "What was the average temperature?";
    and line charts could be used to show the trends in the data during the period
    of measurement. There are many other types of analysis you could use for this
    problem. Just as another example, you could think of using a column chart to show
    the average temperature every month.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You are working in a financial company and your team is responsible for the
    investment portfolio. You have multiple options for investments and the key characteristics
    of all of them are annual rate, investment period, and investment amount. There
    is a straight relationship between these three components. You have built a bubble
    chart to show the relationship among these investment options, but now, you want
    to compare them and add a few more dimensions, such as level of risk and year
    after year performance. What is the most appropriate way to present this information
    in the most compact way?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a) Change the current bubble chart that you created previously, by adding these
    new dimensions.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: b) Create a table to present this information, where each investment option
    is represented by rows and each metric is represented by columns.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: c) Keep the current bubble chart as-is and create a few more visualizations
    to present the new metrics.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: d) Keep the current bubble chart as-is and present the rest of the information
    in a tabular structure.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Answer
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: B, You should be aware that, during your exam, you might find questions with
    multiple correct answers; however, there will be an optimal one. In this case,
    only one option would be wrong, but all the rest are quite possible. Option b
    is the most accurate answer since the question is asking about the "most compact
    way" the present the information. Pay attention to specific keywords in the questions
    during your exam.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You are working as a data scientist for a marketing company. At the moment,
    you are building a machine learning model to predict churn. One of the features
    that you are using on your model is *annual salary*. Due to the nature of this
    variable, you suspect that a log transformation would be beneficial to bring this
    feature closer to a normal distribution. Which of the following charts would support
    you to prove that, indeed, a log transformation is a good idea for this feature?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a) Histogram
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: b) Scatter plot
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: c) Line chart
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: d) Stacked bar chart
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Answer
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: A, Deciding on whether log transformation is a good idea or not will depend
    on the distribution of the data. If you have a skewed distribution, then log transformation
    could be beneficial to bringing this data closer to a normal distribution. Depending
    on the algorithm you are using for modeling, such a transformation can improve
    the accuracy of your model. The histogram is the right answer to this question
    since it will present the data distribution that will support your decision.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You are working as a data analyst for a tech company. Your company wants to
    analyze sales across different lines of services, and you've decided to use Quick
    Sight as a data visualization tool. Which of the following options is *false*
    about Quick Sight?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a) Quick Sight imports datasets into SPICE to optimize data processing. With
    SPICE, your analytical queries process quickly and you don't need to wait for
    a direct query process.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: b) Although Quick Sight can encrypt data transfers, it does not support encryption
    at rest.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: c) Quick Sight can connect on Redshift, Aurora, Athena, RDS, on-premises databases,
    S3, and SaaS.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: d) When access is granted to Active Directory groups, users from that group
    won't be notified.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Answer
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: B, All these answers are correct, except option b. Quick Sight does support
    encryption at rest, but only in the enterprise edition. Another important feature
    that's only supported in the enterprise edition is integration with AD.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You work in a company that uses Quick Sight for data visualization purposes.
    Which of the following types of analysis are supported by Quick Sight (choose
    all the correct answers)?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a) Analyzing relationships in the data
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: b) Analyzing comparisons in the data
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: c) Analyzing compositions in the data
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: d) Analyzing data distributions
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Answer
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Quick Sight is a great tool that supports all the use cases that we have learned
    about in this chapter. It not only supports these use cases but also optimizes
    data processing through the use of SPICE.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
