- en: '*Chapter 8*: Anomaly Detection in Other Elastic Stack Apps'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When the first edition of this book was authored two years ago, there was no
    concept of other apps within the stack leveraging Elastic ML for domain-specific
    solutions. However, since then, Elastic ML has become a **provider** of anomaly
    detection for domain-specific solutions, providing tailor-made job configurations
    that users can enable with a single click.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will explore what Elastic ML brings to various Elastic
    Stack apps:'
  prefs: []
  type: TYPE_NORMAL
- en: Anomaly detection in Elastic APM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Anomaly detection in the Logs app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Anomaly detection in the Metrics app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Anomaly detection in the Uptime app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Anomaly detection in the Elastic Security app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The information in this chapter is relevant as of v7.12 of the Elastic Stack.
  prefs: []
  type: TYPE_NORMAL
- en: Anomaly detection in Elastic APM
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Elastic APM takes application monitoring and performance management to a whole
    new level by allowing users to instrument their application code to get deep insights
    into the performance of individual microservices and transactions. In complex
    environments, this could generate a large number of measurements and poses a potentially
    paradoxical situation – one in which greater observability is obtained via this
    detailed level of measurement while possibly overwhelming the analyst who has
    to sift through the results for actionable insights.
  prefs: []
  type: TYPE_NORMAL
- en: Fortunately, Elastic APM and Elastic ML are a match made in heaven. Anomaly
    detection not only automatically adapts to the unique performance characteristics
    of each transaction type via unsupervised machine learning, but it can also scale
    to handle the possibly voluminous amounts of data that APM can generate.
  prefs: []
  type: TYPE_NORMAL
- en: While the user is always free to create anomaly detection jobs against any kind
    of time-series data in any index, regardless of type, there is a compelling argument
    to simply provide pre-made, out-of-the-box job configurations on Elastic APM data,
    since the data format is already known.
  prefs: []
  type: TYPE_NORMAL
- en: Enabling anomaly detection for APM
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to take advantage of anomaly detection with your APM data, you need
    to obviously have some APM data collected for some declared services, and to have
    the data collected to be stored in indices accessible via the `apm-*` index pattern:'
  prefs: []
  type: TYPE_NORMAL
- en: If you have not yet set up anomaly detection on your APM data, you will see
    an indicator at the top of the screen letting you know that it still needs to
    be set up:![Figure 8.1 – An indicator for when anomaly detection is not yet enabled
    on APM
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B17040_08_1.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 8.1 – An indicator for when anomaly detection is not yet enabled on APM
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: To demonstrate what the configuration of anomaly detection would look like,
    a trivial *Hello World* Node.js application was created and instrumented with
    Elastic APM. This application (called *myapp*) was also tagged with the `environment`
    tag of `dev` to signify that the application is a development app (this is all
    done within the APM agent for the Node.js configuration):![Figure 8.2 – Sample
    Node.js app instrumented with Elastic APM
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B17040_08_2.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 8.2 – Sample Node.js app instrumented with Elastic APM
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: When viewed inside of Elastic APM, the service will look as follows:![Figure
    8.3 – Sample Node.js app viewed in the Elastic APM UI
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B17040_08_3.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 8.3 – Sample Node.js app viewed in the Elastic APM UI
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: To enable anomaly detection on this service, simply go to **Settings**, click
    on **Anomaly detection**, and then click on the **Create ML Job** button:![Figure
    8.4 – Creating ML jobs for APM data
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B17040_08_4.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 8.4 – Creating ML jobs for APM data
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Next, specify the environment name that you want to build the job for:![Figure
    8.5 – Specifying the environment to build the ML job for
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B17040_08_5.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 8.5 – Specifying the environment to build the ML job for
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Here we will select **dev** as it is the only choice available for our application.
    Once selected and after clicking the **Create Jobs** button, we get confirmation
    that our job was created, and it is listed in the table:![Figure 8.6 – Listing
    of created anomaly detection jobs in APM
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B17040_08_6.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 8.6 – Listing of created anomaly detection jobs in APM
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If we go to the Elastic ML app to see the details of the job that was created
    for us, we will see the following:![Figure 8.7 – Listing of created anomaly detection
    jobs in ML
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B17040_08_7.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 8.7 – Listing of created anomaly detection jobs in ML
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Inspecting this further, we can see that the actual detector configuration for
    the job is the following:![Figure 8.8 – Detector configuration for the APM job
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B17040_08_8.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 8.8 – Detector configuration for the APM job
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Notice that this leverages the `high_mean` function on the `transaction.duration.us`
    field, split both on `transaction.type` and partitioned on `service.name`. Also
    notice that the `bucket_span` value of the job is 15 minutes, which may or may
    not be the ideal setting for your environment.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: It should be noted that this configuration is the only one possible when using
    this one-click approach from the APM UI, as the configuration is hardcoded. If
    you want to customize or create your own configurations, you could either create
    them from scratch or possibly clone this job and set your own bucket span and/or
    detector logic.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'From the perspective of the data that is being queried, we can click on the
    `"service.environment" : "dev"` as we indicated when setting up the job in the
    APM UI.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We can click on the **Datafeed preview** tab to see a sample of the observations
    that will be fed to Elastic ML for this particular job, as shown in the following
    figure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.10 – Datafeed preview for the APM job'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17040_08_10..jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.10 – Datafeed preview for the APM job
  prefs: []
  type: TYPE_NORMAL
- en: Now that the APM job is configured and running, let's turn our focus to where
    within the APM UI the anomaly detection job's results will be reflected.
  prefs: []
  type: TYPE_NORMAL
- en: Viewing the anomaly detection job results in the APM UI
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In addition to viewing the job results in the Elastic ML UI, there are three
    key places in which the results of anomaly detection jobs are manifested in the
    APM UI:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Services overview**: This view in the APM UI gives a high-level health indicator
    that corresponds to the max anomaly score of the anomaly detection results for
    that particular service:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 8.11 – Services overview in the APM UI'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17040_08_11..jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.11 – Services overview in the APM UI
  prefs: []
  type: TYPE_NORMAL
- en: '**Service map**: This dynamic view shows application transaction dependencies,
    with a color-coded anomaly indicator based on the max anomaly score of the anomaly
    detection results for that particular service:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 8.12 – Service map in the APM UI'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17040_08_12..jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.12 – Service map in the APM UI
  prefs: []
  type: TYPE_NORMAL
- en: '**Transaction duration chart**: This chart, under the main **Transactions**
    view in APM, shows the expected bounds and a colored annotation when the anomaly
    score is over 75 for a particular transaction type:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 8.13 – Transaction duration chart in the APM UI'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17040_08_13..jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.13 – Transaction duration chart in the APM UI
  prefs: []
  type: TYPE_NORMAL
- en: These helpful indicators of anomalousness guide the user to investigate further
    and troubleshoot problems using the deep capabilities of the APM and ML UIs. Let's
    see one more way to integrate Elastic ML with data from APM, using the **data
    recognizer**.
  prefs: []
  type: TYPE_NORMAL
- en: Creating ML Jobs via the data recognizer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: While "the data recognizer" isn't an official marketing name of an actual feature
    in Elastic ML, it can in fact be very helpful in assisting the user to create
    pre-configured jobs for data that is *recognized*.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'Pre-configured jobs for the data recognizer are defined and stored in the following
    GitHub repository: [https://github.com/elastic/kibana/tree/master/x-pack/plugins/ml/server/models/data_recognizer/modules](https://github.com/elastic/kibana/tree/master/x-pack/plugins/ml/server/models/data_recognizer/modules).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Essentially, the workflow for creating a new job using the recognizer is as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'If, during the process of creating an anomaly detection job, the data selected
    for the job''s input (index pattern or saved search) matches search patterns known
    to one of the pre-defined recognizer modules, then you can offer the user the
    ability to create one of those pre-defined jobs. We can see an example of this
    using the trivial Node.js example from earlier in this chapter. Instead of creating
    the anomaly detection job from the APM UI, we can instead go through the Elastic
    ML UI and select the `apm-*` index pattern:'
  prefs: []
  type: TYPE_NORMAL
- en: 'By selecting the index pattern, we will see two preconfigured jobs offered
    to us in addition to the normal job wizards:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 8.14 – Jobs offered from the data recognizer'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17040_08_14..jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.14 – Jobs offered from the data recognizer
  prefs: []
  type: TYPE_NORMAL
- en: 'The first "APM" job is the same type of job we already created earlier in this
    chapter from the APM UI. The second option (**APM**: **Node.js**) is actually
    a collection of three jobs:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 8.15 – Node.js jobs offered from the data recognizer'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17040_08_15..jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.15 – Node.js jobs offered from the data recognizer
  prefs: []
  type: TYPE_NORMAL
- en: The third is, yet again, the same type of job we already created earlier in
    this chapter from the APM UI, but the other two are unique. This notion of offering
    the users suggested jobs if the source data is "recognized" is not unique to APM
    data and you may see those suggested jobs in other situations or use cases (such
    as choosing the indices of the sample Kibana data, data from nginx, and so on).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that we've seen how Elastic ML is be embedded into the APM app, let's keep
    exploring to find out how anomaly detection is leveraged by the Logs app.
  prefs: []
  type: TYPE_NORMAL
- en: Anomaly detection in the Logs app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Logs app inside of the **Observability** section of Kibana offers a similar
    view of your data as the Discover app. However, the users who appreciate more
    of a *live tail* view of their logs, regardless of the index the data is stored,
    will love the Logs app:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.16 – The Logs app, part of the Observability section of Kibana'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17040_08_16..jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.16 – The Logs app, part of the Observability section of Kibana
  prefs: []
  type: TYPE_NORMAL
- en: Notice that there is both an **Anomalies** tab and a **Categories** tab. Let's
    first discuss the **Categories** section.
  prefs: []
  type: TYPE_NORMAL
- en: Log categories
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Elastic ML's categorization capabilities, first shown back in [*Chapter 3*](B17040_03_Epub_AM.xhtml#_idTextAnchor049)*,
    Anomaly Detection*, are applied in a generic way to any index of unstructured
    log data. Within the Logs app, however, categorization is employed with some more
    strict constraints on the data. In short, the data is expected to be in `event.dataset`).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The logs dataset from [*Chapter 7*](B17040_07_Epub_AM.xhtml#_idTextAnchor131)*,
    AIOps and Root Cause Analysis*, is duplicated for this chapter in the GitHub repository
    for use with the Logs app, with the addition of the `event.dataset` field. If
    you're importing via the file upload facility in ML, be sure to override the field
    name to be `event.dataset` instead of the default `event_dataset` that will be
    offered.
  prefs: []
  type: TYPE_NORMAL
- en: One can imagine the reason behind this constraint, given that the Logs app is
    trying to create the categorization job for you in a templated way. Therefore,
    it needs to be certain of the naming convention of the fields. This would obviously
    not be the case if this were to be done in the ML app, where the onus is on the
    user to declare the names of the categorization field and the message field.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you do, however, configure the Logs app to invoke categorization, then the
    output of this will look something like the following figure, which shows each
    distinct log category, sorted by the maximum anomaly score:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.17 – The Logs app displaying categorization results from Elastic
    ML'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17040_08_17..jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.17 – The Logs app displaying categorization results from Elastic ML
  prefs: []
  type: TYPE_NORMAL
- en: Users can then click the **Analyze in ML** button to navigate over to the Anomaly
    Explorer in the ML UI for further inspection.
  prefs: []
  type: TYPE_NORMAL
- en: Log anomalies
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The **Anomalies** section of the Logs app provides a view similar to that of
    the Anomaly Explorer:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.18 – The Logs app displaying a view similar to ML''s Anomaly Explorer'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17040_08_18..jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.18 – The Logs app displaying a view similar to ML's Anomaly Explorer
  prefs: []
  type: TYPE_NORMAL
- en: 'It also allows the user to manage the anomaly detection jobs if the **Manage
    ML jobs** button is clicked:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.19 – The Logs app allowing the management of ML jobs'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17040_08_19..jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.19 – The Logs app allowing the management of ML jobs
  prefs: []
  type: TYPE_NORMAL
- en: The `count` detector, partitioned on the `event.dataset` field.
  prefs: []
  type: TYPE_NORMAL
- en: Users should note that these ML jobs can be recreated here, but not permanently
    deleted – you must go to the anomaly detection job management page in the ML app
    to delete the jobs.
  prefs: []
  type: TYPE_NORMAL
- en: Obviously, an expert user might just resort to creating and managing their anomaly
    detection jobs for their logs within the ML app. But it is nice that the Logs
    app does surface Elastic ML's capabilities in a way that makes the functionality
    obvious and easy to implement. Let's continue this trend to see how Elastic ML
    is utilized in the Metrics app.
  prefs: []
  type: TYPE_NORMAL
- en: Anomaly detection in the Metrics app
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Metrics app, also part of the **Observability** section of Kibana, allows
    users to have an inventory and metrics-driven view of their data:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the **Inventory** view, users see an overall map of monitored resources.
    Entities such as hosts, pods, or containers can be organized and filtered to customize
    the view – including a color-coded health scale as shown in the following figure:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 8.20 – The Metrics app showing the Inventory view'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17040_08_20..jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.20 – The Metrics app showing the Inventory view
  prefs: []
  type: TYPE_NORMAL
- en: Notice that the bottom panel would display anomalies, if detected. This is currently
    the only place to view anomalies within the Metrics app.
  prefs: []
  type: TYPE_NORMAL
- en: 'To enable the built-in anomaly detection jobs via the Metrics app, click the
    **Anomaly detection** button at the top to enable the configuration flyout:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 8.21 – The Metrics app showing the management of anomaly detection
    jobs'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17040_08_21..jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.21 – The Metrics app showing the management of anomaly detection jobs
  prefs: []
  type: TYPE_NORMAL
- en: 'If, for example, we choose to enable anomaly detection for hosts, clicking
    the appropriate **Enable** button will show this:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 8.22 – The Metrics app showing the config of anomaly detection on
    hosts'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17040_08_22..jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.22 – The Metrics app showing the config of anomaly detection on hosts
  prefs: []
  type: TYPE_NORMAL
- en: 'Notice that a partition field is offered as part of the configuration, if desired.
    When you click the **Enable jobs** button, three different anomaly detection jobs
    are created for you on your behalf, viewable in Elastic ML''s **Job** **Management**
    section:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 8.23 – The anomaly detection jobs for hosts created by the Metrics
    app'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17040_08_23..jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.23 – The anomaly detection jobs for hosts created by the Metrics app
  prefs: []
  type: TYPE_NORMAL
- en: 'To set the minimum anomaly score required to have the Metrics app display anomalies
    for you, head on over to the **Settings** tab and configure the **Anomaly Severity
    Threshold** setting:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 8.24 – The Anomaly Severity Threshold setting within the Metrics app'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17040_08_24..jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.24 – The Anomaly Severity Threshold setting within the Metrics app
  prefs: []
  type: TYPE_NORMAL
- en: The Elastic ML integration with the Metrics app is quite simple and straightforward
    – it allows the user to quickly get started using anomaly detection on their metric
    data. Let's now take a quick look at the integration in the Uptime app.
  prefs: []
  type: TYPE_NORMAL
- en: Anomaly detection in the Uptime app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Uptime app allows simple availability and response time monitoring of services
    via a variety of network protocols, including **HTTP/S**, **TCP**, and **ICMP**:'
  prefs: []
  type: TYPE_NORMAL
- en: Often classified as *synthetic monitoring*, the Uptime app uses Heartbeat to
    actively probe network endpoints from one or more locations:![Figure 8.25 – The
    Uptime app in Kibana
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B17040_08_25..jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 8.25 – The Uptime app in Kibana
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If you would like to enable anomaly detection on a monitor, simply click on
    the monitor name to see the monitor detail. Within the **Monitor duration** panel,
    notice the **Enable anomaly detection** button:![Figure 8.26 – Enabling anomaly
    detection for an Uptime monitor
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B17040_08_26..jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 8.26 – Enabling anomaly detection for an Uptime monitor
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Clicking on the **Enable anomaly detection** button creates the job in the background
    and offers the user the option to create an alert for anomalies surfaced by the
    job:![Figure 8.27 – Creating an alert on the anomaly detection job in the Uptime
    app
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B17040_08_27..jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 8.27 – Creating an alert on the anomaly detection job in the Uptime app
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Once the anomaly detection job is available, any anomalies discovered will
    also be displayed within the monitor''s detail page in the **Monitor duration**
    panel:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.28 – Anomalies displayed in the Uptime app'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17040_08_28..jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.28 – Anomalies displayed in the Uptime app
  prefs: []
  type: TYPE_NORMAL
- en: Again, the integration of Elastic ML with another one of the **Observability**
    applications in the stack makes it incredibly easy for users to take advantage
    of sophisticated anomaly detection. But we also know that Elastic ML can do some
    interesting things with respect to population and rare analysis. The integration
    of ML with the Elastic SIEM is in store for you in the next section – let's get
    detecting!
  prefs: []
  type: TYPE_NORMAL
- en: Anomaly detection in the Elastic Security app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Elastic Security is truly the quintessence of a purpose-driven application in
    the Elastic Stack. Created from the ground up with the security analyst's workflow
    in mind, the comprehensiveness of the Elastic Security app could fill an entire
    book on its own. However, the heart of the Elastic Security app is the Detections
    feature in which user- and Elastic-created rules execute to create alerts when
    rules' conditions are met. As we'll see, Elastic ML plays a significant role in
    the Detections feature.
  prefs: []
  type: TYPE_NORMAL
- en: Prebuilt anomaly detection jobs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The majority of the detection rules in Elastic Security are static, but many
    are backed by prebuilt anomaly detection jobs that operate on the data collected
    from Elastic Agent or Beats, or equivalent data that conforms with the ECS fields
    that are applicable for each job type. To see a comprehensive list of anomaly
    detection jobs supplied by Elastic, view the datafeed and job configuration definition
    in the `security_*` and `siem_*` folders in the following GitHub repository: [https://github.com/elastic/kibana/tree/7.12/x-pack/plugins/ml/server/models/data_recognizer/modules](https://github.com/elastic/kibana/tree/7.12/x-pack/plugins/ml/server/models/data_recognizer/modules).'
  prefs: []
  type: TYPE_NORMAL
- en: (You can add the latest release version number in the spot currently occupied
    by 7.12.)
  prefs: []
  type: TYPE_NORMAL
- en: An astute reader will notice that many of the prebuilt jobs leverage either
    population analysis or the rare detector. Each of these styles of anomaly detection
    is well aligned with the goals of the security analyst – where finding novel behaviors
    and/or behaviors that make users or entities different from the crowd is often
    linked to an indicator of compromise.
  prefs: []
  type: TYPE_NORMAL
- en: 'The prebuilt anomaly detection jobs are viewable in the **Detections** tab
    of Elastic Security and have the ML tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.29 – ML jobs in the Detection rules section of the Security app'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17040_08_29..jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.29 – ML jobs in the Detection rules section of the Security app
  prefs: []
  type: TYPE_NORMAL
- en: 'Clicking on **ML job settings** at the top right of the screen will expose
    the settings list, where the user can see all of the jobs in the library – even
    the ones that are not available (marked with a warning icon):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.30 – All jobs in the ML job settings section of the Security app'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17040_08_30..jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.30 – All jobs in the ML job settings section of the Security app
  prefs: []
  type: TYPE_NORMAL
- en: 'Jobs are marked as unavailable if the necessary data for the job to use is
    not currently indexed in Elasticsearch. If the job is available, you can activate
    the job by clicking the toggle switch and the anomaly detection job will be provisioned
    in the background. Of course, you can always view the jobs created in the Elastic
    ML **Job** **Management** UI:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.31 – Elastic ML jobs created by Security as a view in the Job Management
    UI'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17040_08_31..jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.31 – Elastic ML jobs created by Security as a view in the Job Management
    UI
  prefs: []
  type: TYPE_NORMAL
- en: Now that we know how to enable anomaly detection jobs, it is time to see how
    they create detection alerts for the Security app.
  prefs: []
  type: TYPE_NORMAL
- en: Anomaly detection jobs as detection alerts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As we return to the **Detections** view shown back in *Figure 8.28*, if you
    click on the **Create new rule** button, we can see that we can select **Machine
    Learning** as the rule type:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.32 – Creating an ML-based detection rule'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17040_08_32..jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.32 – Creating an ML-based detection rule
  prefs: []
  type: TYPE_NORMAL
- en: 'If you were to select a specific machine learning job using the drop-down list,
    you would also be asked to select the **Anomaly score threshold** value that needs
    to be exceeded to trigger the detection alert:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.33 – Selecting the ML job and score threshold for the detection
    rule'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17040_08_33.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.33 – Selecting the ML job and score threshold for the detection rule
  prefs: []
  type: TYPE_NORMAL
- en: Obviously, if the job is not currently running, a warning will indicate that
    the job needs to be started. It is also notable that if you created your own custom
    job (that is, not using one of the prebuilt jobs) but assigned it to a **Job Group**
    called "security" in the Elastic ML app, that custom job would also be a candidate
    to be chosen within the drop-down box in this view. The remainder of the detection
    rule configuration can be left to the reader – as the rest is not specific to
    machine learning.
  prefs: []
  type: TYPE_NORMAL
- en: The Elastic Security app clearly relies heavily on anomaly detection to augment
    traditional static rules with dynamic, user/entity behavioral analysis that can
    surface notable events that are often worthy of investigation. It will be interesting
    to see how far and how broadly the machine learning capabilities continue to bolster
    this emerging use case as time goes on!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Elastic ML has clearly infiltrated many of the other apps in the Elastic Stack,
    bringing easy-to-use functionality to users' fingertips. This proves how much
    Elastic ML is really a core functionality to the Stack itself, akin to other key
    stack features such as aggregations.
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations, you have reached the end of the first half of this book, and
    hopefully you feel well armed with everything that you need to know about Elastic
    ML's anomaly detection.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we will venture into the "*other side"* of Elastic ML – data frame analytics
    – where you will learn how to bring other machine learning techniques (including
    supervised-based model creation and inferencing) to open up analytical solutions
    to a vast new array of use cases.
  prefs: []
  type: TYPE_NORMAL
