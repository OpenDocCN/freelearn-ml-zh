- en: '*Chapter 4*: Forecasting'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Forecasting** is a natural extension of the time series modeling of Elastic
    ML. Since very expressive models are built behind the scenes and describe how
    data has behaved historically, it is therefore possible to project that information
    forward in time and predict how something should behave at a future time.'
  prefs: []
  type: TYPE_NORMAL
- en: We will spend time learning the concepts behind forecasting, as well as stepping
    through some practical examples.
  prefs: []
  type: TYPE_NORMAL
- en: 'Specifically, this chapter will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Contrasting forecasting with prophesying
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Forecasting use cases
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Forecasting theory of operation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Single time series forecasting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Looking at forecasting results
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Multiple time series forecasting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The information and examples demonstrated in this chapter are relevant as of
    v7.11 of the Elastic Stack.
  prefs: []
  type: TYPE_NORMAL
- en: Contrasting forecasting with prophesying
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Past performance is not indicative of future results.* This disclaimer is
    used by financial companies when they reference the performance of products such
    as mutual funds. But this disclaimer is a bit of an odd contradiction, because
    the past is all that we have to work with. If the companies that comprise the
    mutual fund have had consistently positive quarterly results for the last eight
    quarters straight, does that guarantee that they will also have a positive set
    of results for the next eight quarters and that their public valuation will continue
    to rise? Probability could be on the side of that being the case, but that might
    not be the whole story. And, before we get too wishful in thinking that Elastic
    ML’s ability to forecast is our key to making a fortune in the stock market, we
    should be realistic about one key caveat—there are always uncontrollable factors.'
  prefs: []
  type: TYPE_NORMAL
- en: The reason financial companies use the preceding disclaimer is that there are
    often unknown, uncontrollable factors that emerge and that can be very influential
    on the trajectory of something. For example, the government could change regulations
    or trade policies that greatly help or hinder a company’s ability to operate and
    be profitable, or there could be an internal fraudulent accounting scandal in
    which the executives conspired to falsify corporate performance, which becomes
    untenable to maintain and ultimately bankrupts the company.
  prefs: []
  type: TYPE_NORMAL
- en: 'These factors are deemed unknown and external because of the following reasons:'
  prefs: []
  type: TYPE_NORMAL
- en: They are outside of the control of the entity itself (as in the example of the
    government dictating policies independently of a company’s activities).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: They are hidden from the available information about a system (an outside investor,
    in real time, only has access to publicly available performance reports, and not
    to knowledge of fraudulent activities that may be fabricating those performance
    reports).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As such, predictions are only as good as the information you have and your ability
    to eliminate or mitigate external unknown factors that will affect your prediction.
    The same is true in the world of **Information Technology** (**IT**) data. It’s
    not always possible to predict a trend or a failure if an unknown, external factor
    is at play (someone incorrectly making a configuration change, a failing piece
    of hardware, and so on). However, we can use probabilistic analysis to give us
    our best guess at the future, aside from those possible external factors. Understanding
    this caveat allows us to satisfy some good forecasting use cases without getting
    hung up on the expectation of prophecy. Let’s now turn our focus to how we can
    use forecasting in a practical way.
  prefs: []
  type: TYPE_NORMAL
- en: Forecasting use cases
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the context of Elastic ML, there are really just two—somewhat similar—use
    cases in which someone would use forecasting. These are outlined here:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Value-focused**: This is where you extrapolate a time series into the future
    to understand a probable future value. This would be akin to answering questions
    such as: *“How many widgets will I sell per day 2 months from now?”*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Time-focused**: This is where you understand the likely time at which an
    expected value is to be reached. This would answer questions similar to: *“Do
    I expect to reach 80% utilization in the next week?”*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The differences between these two use cases might not just be how a question
    is asked (how the data is searched), but also how you interpret the output. However,
    before we delve into a few examples of how to use the forecasting feature, let’s
    take a little time to discuss how it works logistically.
  prefs: []
  type: TYPE_NORMAL
- en: Forecasting theory of operation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first thing to realize is that the act of invoking a forecast on data is
    that it is an extension of an existing Anomaly Detection job. In other words,
    you need to have an Anomaly Detection job configured, and that job needs to have
    analyzed historical data before you can forecast on that data. This is because
    the forecasting process uses the models that are created by the Anomaly Detection
    job. To forecast the data, you need to follow the same steps that were used to
    create an Anomaly Detection job as described in other chapters. If anomalies were
    generated by the execution of that job, you can disregard them if your only purpose
    is to execute forecasting. Once the job has learned on some historical data, the
    model or models (if the job is configured to analyze data from more than one time
    series) associated with that job are current and up to date, as represented in
    the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.1 – A symbolic representation of models gleaned from historical
    learning'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17040_04_1.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.1 – A symbolic representation of models gleaned from historical learning
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll consider the time before **now** as **historical learning**—the time
    over which the models have learned on actual data. When the user wishes to invoke
    a forecast at a particular time, a copy of the model(s) is created, and a separate
    process is used to take those models and extrapolate them into the “future.” This
    process is run in parallel to not interfere with the original models and their
    evolution. This is represented in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.2 – A symbolic representation of models copied for forecasting into
    the future'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17040_04_2.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.2 – A symbolic representation of models copied for forecasting into
    the future
  prefs: []
  type: TYPE_NORMAL
- en: The forecast values are written to the same results index as Anomaly Detection
    but as a special type of result (more detail on this later), and will be available
    for viewing in the **user interface** (**UI**) or accessible via the **application
    programming interface** (**API**).
  prefs: []
  type: TYPE_NORMAL
- en: 'It’s important to note that the normal path of the **machine learning** (**ML**)
    job analyzing the actual real data will continue (if it is running in real time),
    and therefore after an amount of time there could be a difference between the
    predicted value for a future time (made at the time of the forecast) and the actual
    value when that time arrives, as shown in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.3 – A symbolic representation of a forecasting error'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17040_04_3.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.3 – A symbolic representation of a forecasting error
  prefs: []
  type: TYPE_NORMAL
- en: This forecasting error is to be expected, but hopefully it will be minimal.
    The differential between the two is not currently used by Elastic ML, but perhaps
    in the future it could inform the models about more accurate subsequent forecasts.
    Surely it is also possible that an unknown external factor (as described earlier)
    could lead to a certain number of forecasting errors.
  prefs: []
  type: TYPE_NORMAL
- en: Another (perhaps simpler) way to think about uncertainty in predictions is to
    think about predicting the outcome of a coin toss. You could observe a sequence
    of prior coin flips, but if you are not taking into account the physics of the
    coin flip (speed, height, rotations, and so on) and are only relying on the outcome
    of past observations, then you’ll never get better than a 50/50 prediction on
    the outcome. Additionally, it is likely Elastic ML didn’t see behaviorally perfectly
    consistent data during the learning period. As such, with a certain amount of
    noise in the data, we should also expect a certain amount of variation or uncertainty
    in the forecast.
  prefs: []
  type: TYPE_NORMAL
- en: 'There can also be multiple forecasts made by the user at other times. These
    will be stored separately, as represented in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.4 – A symbolic representation of invoking multiple forecasts at
    different times'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17040_04_4.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.4 – A symbolic representation of invoking multiple forecasts at different
    times
  prefs: []
  type: TYPE_NORMAL
- en: 'The distinction between **forecast #1** and **forecast #2** will be keyed off
    with an internal unique ID for each forecast instance. This will become apparent
    later when we look at how the forecast results are stored in the index.'
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have a base understanding of the logistical operation of the forecasting
    process, let’s walk through an example of how to use Elastic ML for forecasting
    on a single time series.
  prefs: []
  type: TYPE_NORMAL
- en: Single time series forecasting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To illustrate the procedure of forecasting, we will start with a dataset that
    is a single time series. While this dataset is generic, you could imagine that
    it could represent a system performance metric, the number of transactions processed
    by a system, or even sales revenue data. The important aspect of this dataset
    is that it contains several distinct time-based trends—a daily trend, a weekly
    trend, and an overall increasing trend. Elastic ML will discover all three trends
    and will effectively predict those into the future. It is good to note that the
    dataset also contains some anomalies, but (of course) future anomalies cannot
    be predicted as they are surprise events by definition. Since our discussion here
    is purely focused on forecasting, we will ignore the existence of any anomalies
    found in our dataset while building the models for forecasting.
  prefs: []
  type: TYPE_NORMAL
- en: 'With that said, let’s jump into an example by using the `forecast_example`
    dataset from the GitHub repository. Once downloaded, the data can be easily imported
    into your Kibana via Elastic ML’s Data Visualizer. Let’s proceed, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: To upload the sample data, from the Kibana home screen, click on the **Upload
    a file** button, as shown in the following screenshot:![Figure 4.5 – The option
    to upload a file in Kibana
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B17040_04_5.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 4.5 – The option to upload a file in Kibana
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Choose the `forecast_example.json` file from your local machine. Data Visualizer
    will then display the first 1,000 lines of the file to give you a preview of what
    the file contains, as well as a breakdown of the different fields. This is represented
    in the following screenshot:![Figure 4.6 – Previewing the contents of the file
    to upload
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B17040_04_6.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 4.6 – Previewing the contents of the file to upload
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click on the **Import** button, then name the destination index for the data
    to be uploaded to, as illustrated in the following screenshot:![Figure 4.7 – Naming
    the destination index to upload to
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B17040_04_7.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 4.7 – Naming the destination index to upload to
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Provide a name for your destination index, make sure the **Create index pattern**
    option is checked if this is your first time uploading, and click on the **Import**
    button again to complete the upload. You should see the successful completion
    of the upload, as shown in the next screenshot:![Figure 4.8 – Upload completed
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B17040_04_8.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 4.8 – Upload completed
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Once the data has been uploaded, navigate to **Machine Learning** and create
    an Anomaly Detection job, selecting the index pattern of the index name you created
    in the previous step. This is represented in the following screenshot:![Figure
    4.9 – Creating an Anomaly Detection job first
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B17040_04_9.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 4.9 – Creating an Anomaly Detection job first
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: This particular dataset is only a single, time-series metric (a field called
    `amount`), so we will simply use the **Single metric** job wizard to build the
    job, as illustrated in the following screenshot:![Figure 4.10 – Selecting the
    Single metric job wizard for this data
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B17040_04_10.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 4.10 – Selecting the Single metric job wizard for this data
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: On the next screen and for this example, we will want to only analyze up to
    March 1, 2017 @ 00:00:00.000 in order to leave us some data to compare our forecast
    against later. You can accomplish this by first clicking the **Use full forecast_example
    data** button but then manually changing the ending date to match what is shown
    in the following screenshot:![Figure 4.11 – Selecting to use only data up to a
    certain date
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B17040_04_11.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 4.11 – Selecting to use only data up to a certain date
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: This example dataset logs data from January 31, 2017 to March 1, 2017\. Despite
    being from the past, we can contrive a scenario in which we are pretending to
    be in that time frame, and we will declare that today’s date is March 1, 2017\.
    We therefore want to have an ML job analyze the data between January 31 and “today”,
    and then use ML to forecast that data 10 days into the future. We will later see
    how accurate our forecast is against the remainder of the data. If your Kibana
    time zone is set to your local time, the dates in this chapter may look slightly
    different, as the screenshots were taken with a version of Kibana that’s been
    set to the Eastern time zone of the **United States** (**US**).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now, click the **Next** button to advance to the next step in the configuration
    wizard.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: After clicking the `amount` field is simply a numerical value over time. This
    is represented in the following screenshot:![Figure 4.12 – Selecting to sum the
    amount field over time as our detection
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B17040_04_12.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 4.12 – Selecting to sum the amount field over time as our detection
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click the **Next** button to proceed, leaving the other options as their defaults
    for now.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now, we need to name our Anomaly Detection job—in the `forecast_example` was
    used:![Figure 4.13 – Naming the Anomaly Detection job
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B17040_04_13.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 4.13 – Naming the Anomaly Detection job
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Again, leave the other options as their defaults and click the **Next** button.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: A validation step takes place to ensure that everything is properly set up for
    the analysis to work, as illustrated in the following screenshot:![Figure 4.14
    – Job validation step
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B17040_04_14.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 4.14 – Job validation step
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click the **Next** button to proceed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: At this point, the job is ready to be created, as shown in the following screenshot:![Figure
    4.15 – Anomaly Detection job ready to be created
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B17040_04_15.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 4.15 – Anomaly Detection job ready to be created
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: After the **Create job** button is clicked, you will see an animated preview
    of the results superimposed on top of the data, as illustrated in the following
    screenshot:![Figure 4.16 – Results preview of job execution displayed
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B17040_04_16.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 4.16 – Results preview of job execution displayed
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To access the ability to forecast, we need to click the **View Results** button,
    which will take us to **Single Metric Viewer**. In **Single Metric Viewer**, we
    can see the overall dataset and can appreciate the shape and complexity of the
    way this data behaves; there are both daily and weekly periodic components, as
    well as a gradual positive slope/trend that causes the data to drift up over time.
    This is depicted in the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 4.17 – Results with annotations displayed'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B17040_04_17.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 4.17 – Results with annotations displayed
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If we expose and explore the annotations, we actually see exactly where Elastic
    ML has detected different trends in the data. Also, remember that despite the
    fact we may only be interested in forecasting on this data, the job will still
    point out anomalies throughout the data’s history. We can simply ignore them in
    this case if we so choose.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To invoke a forecast on this data, click the `10d`), as illustrated in the
    following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.18 – Initiating a new 10-day forecast'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17040_04_18.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.18 – Initiating a new 10-day forecast
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: You should not attempt to ask for a forecasting duration that is longer than
    the duration of the data that the ML job has analyzed. In other words, don’t ask
    for a 2-week forecast if the ML job has only ever seen 1 week of data. At least
    have a one-to-one ratio of historical data to the amount that you want to forecast
    (and, ideally, you would have a higher ratio of historical data). Lastly, supply
    enough consistent data to learn about the principal patterns. For example, a minimum
    of three cycles of a periodic pattern is used to achieve the best possible predictions.
  prefs: []
  type: TYPE_NORMAL
- en: 'After clicking the **Run** button shown in *Figure 4.18*, the forecast will
    be invoked and run in the background. We can see the results of our forecast almost
    immediately, as illustrated in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.19 – Forecast results'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17040_04_19.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.19 – Forecast results
  prefs: []
  type: TYPE_NORMAL
- en: The shaded area around the forecast/predicted zone is the 95th percentile confidence
    interval. In other words, Elastic ML has estimated that there is a 95% chance
    that the future values will be within this range (and, likewise, only a 2.5% chance
    that the future values will be either above or below the confidence interval).
    The 95th percentile range is currently a fixed value and is not yet settable by
    the user.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have the ability to create simple forecasts from the UI, let’s explore
    the results of the forecast in more depth before moving on to a more complicated
    example.
  prefs: []
  type: TYPE_NORMAL
- en: Looking at forecast results
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have run a forecast, we can look in more depth at the results that
    are generated by the forecasting process. We can view the results of a previously
    created forecast at any time in the UI via one of two methods. The first way is
    to click the **Forecast** button in **Single Metric Viewer** to reveal a list
    of previous forecasts, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.20 – Viewing previously created forecasts from Single Metric Viewer'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17040_04_20.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.20 – Viewing previously created forecasts from Single Metric Viewer
  prefs: []
  type: TYPE_NORMAL
- en: 'Alternatively, you can view them in the **Job Management** page under the **Forecasts**
    tab for that job, as illustrated in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.21 – Viewing previously created forecasts from the Job Management
    page'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17040_04_21.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.21 – Viewing previously created forecasts from the Job Management page
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Forecast results built in Kibana have a default lifespan of 14 days. After that,
    the forecast results are deleted permanently. If a different expiration duration
    is desired, then the forecast will have to be invoked via the `_forecast` API
    endpoint, which will be discussed later but is documented at [https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-forecast.html](https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-forecast.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'When viewing the forecast results in **Single Metric Viewer**, notice that
    when you hover your mouse over the forecast data points, a pop-up display will
    list three key pieces of information about the data point—the prediction value,
    the upper-bound value, and the lower-bound value, as illustrated in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.22 – Information revealed in the forecast’s pop-up display'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17040_04_22.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.22 – Information revealed in the forecast’s pop-up display
  prefs: []
  type: TYPE_NORMAL
- en: 'Recall that the upper and lower bounds define a range of 95th percentile confidence.
    The prediction value is the value with the highest likelihood (probability). These
    three key values are stored in the `.ml-anomalies-*` results indices with the
    following names:'
  prefs: []
  type: TYPE_NORMAL
- en: '`forecast_prediction`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`forecast_upper`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`forecast_lower`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In [*Chapter 5*](B17040_05_Epub_AM.xhtml#_idTextAnchor090), *Interpreting Results*,
    we will learn how we can query the `.ml-anomalies-*` indices to locate information
    for forecasts and how we can leverage that information for other purposes, such
    as for dashboards or alerts.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we want to see how well Elastic ML’s forecasting did compared to the actual
    next 10 days of the dataset (remember—the ML job’s models haven’t yet actually
    seen those days), we can return to the **Job Management** page and start the data
    feed of the job to continue on and analyze the remainder of the data. To do so,
    click on the **Start datafeed** link from the menu on the right-hand side, as
    illustrated in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.23 – Starting the data feed from the Job Management page'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17040_04_23.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.23 – Starting the data feed from the Job Management page
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the dialog comes up, set the **Search start time** field to **Continue
    from 2017-03-01 00:00:00** (or whatever it says it is for your local time zone),
    and specify the **Search end time** field to be March 11, 2017 at 12:00 AM, as
    illustrated in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.24 – Continuing the data feed from where it previously left off'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17040_04_24.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.24 – Continuing the data feed from where it previously left off
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have done this, return to **Single Metric Viewer** for the job, ensure
    that you are viewing the correct range of time with the Kibana time picker, and
    click on the **Forecast** button to view the previously created forecast, as described
    earlier in this chapter. You will now be able to see the forecast values superimposed
    over the actual values from the data, as illustrated in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.25 – Comparing the forecast to the actual data'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17040_04_25.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.25 – Comparing the forecast to the actual data
  prefs: []
  type: TYPE_NORMAL
- en: As described earlier in this chapter, there will be a slight discrepancy between
    the Elastic ML prediction of the data and the actual value that arrives in the
    future. This is because the predictions are probabilistic, and with probability
    comes a certain level of uncertainty. However, this does not diminish the usefulness
    of the forecasts. Combined with proactive alerting (as described in [*Chapter
    6*](B17040_06_Epub_AM.xhtml#_idTextAnchor117), *Alerting on ML Analysis*), we
    could have been alerted to the possibility of a breach. This proactive notification
    is especially useful when users cannot track hundreds or thousands of entities
    individually. In the next section, we’ll see how multi-metric forecasting allows
    us to track those entities automatically.
  prefs: []
  type: TYPE_NORMAL
- en: Multiple time series forecasting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To invoke forecasting on multiple time series, you simply just need an ML job
    that is modeling multiple time series. Let’s assume that we have an ML job that
    has analyzed web requests per country. In fact, using the built-in sample web
    logs (`kibana_sample_data_logs`) we used in [*Chapter 3*](B17040_03_Epub_AM.xhtml#_idTextAnchor049),
    *Anomaly Detection*, we could easily create a multi-metric job that counts events,
    split on the source country code of the request (the field is called `geo.src`),
    as illustrated in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.26 – Creating a multi-metric job for forecasting'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17040_04_26.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.26 – Creating a multi-metric job for forecasting
  prefs: []
  type: TYPE_NORMAL
- en: 'There are 183 unique source countries in this dataset. After creating and running
    this Anomaly Detection job in order to build baseline models for all 183 countries,
    we are now in a position to invoke a forecast. If we approach the invocation of
    a forecast in the same way as we did before (via **Single Metric Viewer**), we
    might erroneously think that a forecast will only be executed for the series displayed,
    as illustrated in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.27 – Invoking a multi-metric forecast from Single Metric Viewer'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17040_04_27.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.27 – Invoking a multi-metric forecast from Single Metric Viewer
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding screenshot (although it might be a little difficult to see
    in the faded background behind the popup), we can see that the country code selected
    for the `geo.src` field is `CN` (China). But, as pointed out in the warning message
    of the **Forecasting** popup, clicking on the **Run** button will invoke the forecast
    and will run for all partitions present in the job (here, it knows that there
    are more than 100 partitions).
  prefs: []
  type: TYPE_NORMAL
- en: 'Alternatively, we can use the `_forecast` API endpoint to invoke the forecast.
    To do so, in the **Dev Tools** console, we could issue this request:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The Anomaly Detection job must be in an “open” state before you can invoke a
    forecast via the API.
  prefs: []
  type: TYPE_NORMAL
- en: 'The immediate response from the API call is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The results of our forecast request will be available for viewing either in
    **Single Metric Viewer** or programmatically by querying the results indices,
    to be described in [*Chapter 5*](B17040_05_Epub_AM.xhtml#_idTextAnchor090), *Interpreting
    Results*. With **Single Metric Viewer**, we can see the forecast for any country
    by clicking on the **Forecast** button, selecting our previously run forecast,
    then selecting the country code of our choice, as illustrated in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.28 – Viewing a single partition’s forecast from a multi-metric forecast'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17040_04_28.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.28 – Viewing a single partition’s forecast from a multi-metric forecast
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Viewing the results of a multi-metric forecast in **Single Metric Viewer** isn’t
    exactly ideal as of v7.10\. This is because the view only shows partitions that
    have anomalies recorded for them. This feature will be added in v7.11.
  prefs: []
  type: TYPE_NORMAL
- en: Forecasting across multiple time series could be extremely useful for capacity
    planning use cases, where hundreds or possibly thousands of entities need to be
    analyzed, and forecasting to see if any pending breaches in the near future are
    possible.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Elastic ML has an additional feature over and above anomaly detection: the
    ability to take and extrapolate time series models into the future for forecasting
    purposes. With use cases that include advanced breach detection and capacity planning,
    this feature alleviates the human burden of manually charting, tracking, and predicting
    where things are going in the future, based upon how they have behaved in the
    past.'
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we’ll go deeper into the results that anomaly detection
    and forecasting give us, and we will set up a better understanding of how to leverage
    those results for dashboards and proactive alerts.
  prefs: []
  type: TYPE_NORMAL
