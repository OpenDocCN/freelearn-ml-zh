["```py\n> pip install flask flask-restful\n```", "```py\n    from flask import Flask \n    app = Flask(__name__)\n    @app.route('/')\n    def root():\n        return 'Your first Flask app!'\n    if __name__ == '__main__':\n        app.run(host='0.0.0.0', port=8000)\n    ```", "```py\n    Running on http://0.0.0.0:8000/ message, you can see where the application is running, ergo which URL you need to visit to see your application. Just so you know, the 0.0.0.0 part can be replaced with localhost.Once there, you'll see the following displayed, indicating that everything worked properly:![Figure 8.2 – Your first Flask application\n    ](img/B16954_08_2.jpg)Figure 8.2 – Your first Flask applicationAnd that's how easy it is to build your first web application with `Flask`. You'll learn how to make something a bit more complex next.\n    ```", "```py\n    from flask import Flask, request, jsonify\n    app = Flask(__name__)\n    @app.route('/adding')\n    def add_get():\n        num1 = int(request.args.get('num1'))\n        num2 = int(request.args.get('num2'))\n        return f'<h3>{num1} + {num2} = {num1 + num2}</h3>'\n    @app.route('/adding', methods=['POST'])\n    def add_post():\n        data = request.get_json()\n        num1 = data['num1']\n        num2 = data['num2']\n        return jsonify({'result': num1 + num2})\n    if __name__ == '__main__':\n        app.run(host='0.0.0.0', port=8000)\n    ```", "```py\n    /adding for GET first:![Figure 8.3 – The GET endpoint without parameter values\n    ](img/B16954_08_3.jpg)\n\n    ```", "```py\n\n    If you were to run this code now, here's what you would see as the output: ![Figure 8.6 – The POST endpoint with parameters (Python)\n    ](img/B16954_08_6.jpg)Figure 8.6 – The POST endpoint with parameters (Python)This is essentially a string, so some conversion to JSON will be mandatory before you can work with the returned value. More on that later, in [*Chapter 9*](B16954_09_Final_SK_ePub.xhtml#_idTextAnchor102), *Using the Deployed TPOT Model in Production*.So far, you've seen how the `Flask` library can be used to develop both web applications and web services (APIs). It's a good first option, but there's a better approach if you're only interested in building APIs – `Flask-RESTful`. Let's explore it next.\n    ```", "```py\n    from flask import Flask, request, jsonify\n    from flask_restful import Resource, Api \n    app = Flask(__name__)\n    api = Api(app)\n    class Adding(Resource):\n        @staticmethod\n        def get():\n            num1 = int(request.args.get('num1'))\n            num2 = int(request.args.get('num2'))\n            return num1 + num2\n        @staticmethod\n        def post():\n            data = request.get_json()\n            num1 = data['num1']\n            num2 = data['num2']\n            return jsonify({'result': num1 + num2})\n    api.add_resource(Adding, '/adding')\n    if __name__ == '__main__':\n        app.run(host='0.0.0.0', port=8000)\n    ```", "```py\n    import pandas as pd\n    df = pd.read_csv('data/iris.csv')\n    df.head()\n    ```", "```py\n    X = df.drop('species', axis=1)\n    y = df['species']\n    y = y.replace({'setosa': 0, 'virginica': 1, 'versicolor': 2})\n    y\n    ```", "```py\n    from tpot import TPOTClassifier\n    clf = TPOTClassifier(\n        scoring='accuracy',\n        max_time_mins=15,\n        random_state=42,\n        verbosity=2\n    )\n    clf.fit(X, y)\n    ```", "```py\n    clf.fitted_pipeline_\n    ```", "```py\n    clf.fitted_pipeline_.predict([[5.1, 3.5, 0.2, 3.4]])\n    ```", "```py\n    import joblib\n    joblib.dump(clf.fitted_pipeline_, 'iris.model')\n    ```", "```py\nloaded_model = joblib.load('iris.model')\nloaded_model.predict([[5.1, 3.5, 0.2, 3.4]])\n```", "```py\n    def int_to_species(in_species):\n        if in_species == 0:\n            return 'setosa'\n        if in_species == 1:\n            return 'virginica'\n        if in_species == 2:\n            return 'versicolor'\n    ```", "```py\n    def predict_single(model, X):\n        if type(X) is not list:\n            raise Exception('X must be of list data type!')\n        if len(X) != 4:\n            raise Exception('X must contain 4 values - \\\n    sepal_length, sepal_width, petal_length, petal_width')\n        prediction = model.predict([X])[0]\n        prediction_probability =\\\n    model.predict_proba([X])[0][prediction]\n        return {\n            'In_SepalLength': X[0],\n            'In_SepalWidth': X[1],\n            'In_PetalLength': X[2],\n            'In_PetalWidth': X[3],\n            'Prediction': int_to_species(prediction),\n            'Probability': prediction_probability\n        }\n    ```", "```py\n    predict_single(\n        model=joblib.load('api/model/iris.model'), \n        X=[5.1, 3.5, 0.2, 3.4]\n    )\n    ```", "```py\n    import joblib \n    import warnings\n    from flask import Flask, request, jsonify\n    from flask_restful import Resource, Api\n    from helpers import predict_single\n    warnings.filterwarnings('ignore')\n    app = Flask(__name__)\n    api = Api(app)\n    model = joblib.load('model/iris.model')\n    class PredictSpecies(Resource):\n        @staticmethod\n        def post():\n            user_input = request.get_json()\n            sl = user_input['SepalLength']\n            sw = user_input['SepalWidth']\n            pl = user_input['PetalLength']\n            pw = user_input['PetalWidth']\n            prediction =\\\n    predict_single(model=model, X=[sl, sw, pl, pw])\n            return jsonify(prediction)\n    api.add_resource(PredictSpecies, '/predict')\n    if __name__ == '__main__':\n        app.run(host='0.0.0.0', port=8000)\n    ```", "```py\n    > python app.py\n    ```", "```py\n    TPOT_Book_KeyPair.pem with your filename and also make sure to write your instance name after ubuntu@. If you did everything correctly, you should see the following in your terminal:![Figure 8.39 – Accessing the Ubuntu virtual machine through the terminal\n    ](img/B16954_08_39.jpg)\n\n    ```", "```py\n\n    Finally, let's install every required library. Here's the command for doing so within a virtual environment:\n\n    ```", "```py\n\n    There are a few steps you still need to complete before starting the API, such as managing security.\n    ```", "```py\n    > python3 app.py\n    ```"]