["```py\n    private const string JsonContentTypeHeader = \"application/json\";\n\n    private static readonly JsonSerializerSettings _settings = new JsonSerializerSettings\n    {\n        DateFormatHandling = DateFormatHandling.IsoDateFormat,\n        NullValueHandling = NullValueHandling.Ignore,\n        ContractResolver = new CamelCasePropertyNamesContractResolver()\n    };\n\n    private HttpClient _httpClient;\n    private string _endpoint;\n```", "```py\n    public WebRequest(string uri, string apiKey)\n    {\n        _endpoint = uri;\n\n        _httpClient = new HttpClient();\n        _httpClient.DefaultRequestHeaders.Add(\"Ocp-Apim-Subscription-Key\", apiKey);\n    }\n```", "```py\npublic async Task <TResponse> MakeRequest <TRequest, TResponse (HttpMethod method, string queryString, TRequest requestBody = default(TRequest))\n```", "```py\n    try {\n        string url = $\"{_endpoint}{queryString}\";\n        var request = new HttpRequestMessage(method, url);\n\n        if (requestBody != null)\n            request.Content = new StringContent (JsonConvert.SerializeObject(requestBody, _settings), Encoding.UTF8, JsonContentTypeHeader);\n\n        HttpResponseMessage response = await _httpClient.SendAsync(request);\n```", "```py\n    if (response.IsSuccessStatusCode)\n    {\n        string responseContent = null;\n\n        if (response.Content != null)\n            responseContent = await response.Content.ReadAsStringAsync();\n        if (!string.IsNullOrWhiteSpace(responseContent))\n            return JsonConvert.DeserializeObject<TResponse>(responseContent,_settings);\n\n        return default(TResponse);\n    }\n```", "```py\n    else\n    {\n        if (response.Content != null && response.Content.Headers.ContentType.MediaType.Contains (JsonContentTypeHeader))\n        {\n            var errorObjectString = await response.Content.ReadAsStringAsync();\n            Debug.WriteLine(errorObjectString);\n        }\n    }\n```", "```py\n    [DataContract]\n    public class TextErrors {\n       [DataMember]\n       public string id { get; set; }\n\n       [DataMember]\n       public string message { get; set; }\n    }\n```", "```py\n    private WebRequest _webRequest;\n```", "```py\n    public SpellCheckViewModel()\n    {\n        _webRequest = new WebRequest (\"https://api.cognitive.microsoft.com/bing/v7.0/spellcheck/?\", \"API_KEY_HERE\");\n        ExecuteOperationCommand = new DelegateCommand(\n        ExecuteOperation, CanExecuteOperation);\n    }\n```", "```py\n    private async void ExecuteOperation(object obj)\n    {\n        var queryString = HttpUtility.ParseQueryString(string.Empty);\n\n        queryString[\"text\"] = InputQuery;\n        queryString[\"mkt\"] = \"en-us\";\n        //queryString[\"mode\"] = \"proof\";\n\n        if (!string.IsNullOrEmpty(PreContext)) queryString[\"preContextText\"] = PreContext;\n\n        if(!string.IsNullOrEmpty(PostContext))\n      queryString[\"postContextText\"] = PostContext;\n```", "```py\n        SpellCheckResponse response = await _webRequest.MakeRequest <object, SpellCheckResponse>(HttpMethod.Get, queryString.ToString());\n        ParseResults(response);\n    }\n```", "```py\n    private void ParseResults(SpellCheckResponse response)\n    {\n        if(response == null || response.flaggedTokens == null || response.flaggedTokens.Count == 0)\n        {\n            Result = \"No suggestions found\";\n            return;\n        }\n\n        StringBuilder sb = new StringBuilder();\n        sb.Append(\"Spell checking results:nn\");\n```", "```py\n    foreach (FlaggedTokens tokens in response.flaggedTokens)\n    {\n        if (!string.IsNullOrEmpty(tokens.token))\n            sb.AppendFormat(\"Token is: {0}n\", tokens.token);\n\n        if(tokens.suggestions != null || tokens.suggestions.Count != 0)\n        {\n            foreach (Suggestions suggestion in tokens.suggestions)\n            {\n                sb.AppendFormat(\"Suggestion: {0} - with score: {1}n\", suggestion.suggestion, suggestion.score);\n            }\n            sb.Append(\"n\");\n        }\n    }\n    Result = sb.ToString();\n```", "```py\n    {\n        \"_type\": \"SpellCheck\",\n        \"flaggedTokens\": [\n        {\n            \"offset\": 5,\n            \"token\": \"Gatas\",\n            \"type\": \"UnknownToken\",\n            \"suggestions\": [\n            {\n                \"suggestion\": \"Gates\",\n                \"score\": 1\n            }]\n        }]\n    }\n```", "```py\n    public TextAnalysisViewModel()\n    {\n        _webRequest = new WebRequest(\"ROOT_URI\",\"API_KEY_HERE\");\n        DetectLanguageCommand = new DelegateCommand(DetectLanguage, CanExecuteOperation);\n        DetectKeyPhrasesCommand = new DelegateCommand(DetectKeyPhrases, CanExecuteOperation);\n        DetectSentimentCommand = new DelegateCommand(DetectSentiment, CanExecuteOperation);\n    }\n```", "```py\n    private async void DetectLanguage(object obj)\n    {\n        var queryString = HttpUtility.ParseQueryString(\"languages\");\n        TextRequests request = new TextRequests\n        {\n            documents = new List<TextDocumentRequest>\n            {\n                new TextDocumentRequest {id=\"FirstId\", text=InputQuery}                            \n            }\n        };\n\n        TextResponse response = await _webRequest.MakeRequest<TextRequests, TextResponse>(HttpMethod.Post, queryString.ToString(), request);\n```", "```py\n    if(response.documents == null || response.documents.Count == 0)\n    {\n        Result = \"No languages was detected.\";\n        return;\n    }\n\n    StringBuilder sb = new StringBuilder();\n\n    foreach (TextLanguageDocuments document in response.documents)\n    {\n        foreach (TextDetectedLanguages detectedLanguage in document.detectedLanguages)\n        {\n            sb.AppendFormat(\"Detected language: {0} with score {1}n\", detectedLanguage.name, detectedLanguage.score);\n        }\n    }\n\n    Result = sb.ToString();\n```", "```py\n    {\n        \"documents\": [\n        {\n            \"id\": \"string\",\n            \"detectedLanguages\": [\n            {\n                \"name\": \"string\",\n                \"iso6391Name\": \"string\",\n                \"score\": 0.0\n            }]\n        }],\n        \"errors\": [\n        {\n            \"id\": \"string\",\n            \"message\": \"string\"\n        }]\n    }\n```", "```py\n    private async void DetectKeyPhrases(object obj)\n    {\n        var queryString = HttpUtility.ParseQueryString(\"keyPhrases\");\n        TextRequests request = new TextRequests\n        {\n            documents = new List<TextDocumentRequest>\n            {\n                new TextDocumentRequest { id = \"FirstId\", text = InputQuery, language = \"en\" }\n            }\n        };\n\n        TextKeyPhrasesResponse response = await _webRequest.MakeRequest<TextRequests, TextKeyPhrasesResponse>(HttpMethod.Post, queryString.ToString(), request);\n```", "```py\n    if (response.documents == null || response.documents?.Count == 0)\n    {\n        Result = \"No key phrases found.\";\n        return;\n    }\n\n    StringBuilder sb = new StringBuilder();\n\n    foreach (TextKeyPhrasesDocuments document in response.documents)\n    {\n        sb.Append(\"Key phrases found:n\");\n        foreach (string phrase in document.keyPhrases)\n        { \n            sb.AppendFormat(\"{0}n\", phrase);\n        }\n    }\n\n    Result = sb.ToString();\n```", "```py\n    {\n        \"documents\": [{\n            \"keyPhrases\": [\n            \"string\" ],\n            \"id\": \"string\"\n        }],\n        \"errors\": [\n        {\n            \"id\": \"string\",\n            \"message\": \"string\"\n        } ]\n    }\n```", "```py\n    private async void DetectSentiment(object obj)\n    {\n        var queryString = HttpUtility.ParseQueryString(\"sentiment\");\n        TextRequests request = new TextRequests\n        {\n            documents = new List<TextDocumentRequest>\n            {\n                new TextDocumentRequest { id = \"FirstId\", text = InputQuery, language = \"en\" }\n            } \n        };\n\n        TextSentimentResponse response = await _webRequest.MakeRequest <TextRequests, TextSentimentResponse>(HttpMethod.Post, queryString.ToString(), request);\n```", "```py\n    if(response.documents == null || response.documents?.Count == 0)\n    {\n        Result = \"No sentiments detected\";\n        return;\n    }\n\n    StringBuilder sb = new StringBuilder();\n\n    foreach (TextSentimentDocuments document in response.documents)\n    {\n        sb.AppendFormat(\"Document ID: {0}n\", document.id);\n\n        if (document.score >= 0.5)\n            sb.AppendFormat(\"Sentiment is positive, with a score of{0}n\", document.score);\n        else\n            sb.AppendFormat(\"Sentiment is negative with a score of {0}n\", document.score);\n    }\n\n    Result = sb.ToString();\n```", "```py\n    {\n        \"documents\": [\n        {\n            \"score\": 0.0,\n            \"id\": \"string\"\n        }],\n        \"errors\": [\n        {\n            \"id\": \"string\",\n            \"message\": \"string\"\n        }]\n    }\n```", "```py\nhttps://api.cognitive.microsofttranslator.com\n```", "```py\n/translate\n```", "```py\nTo - Language to translate to. Must be specified as two-letter language code.\n```", "```py\n[\n   {\n      \"detectedLanguage\": {\n         \"language\": \"en\",\n         \"score\": 1.0\n      },\n      \"translations\": [\n         \"text\": \"Translated text\",\n         \"to\": \"en\"\n      ]\n   }\n]\n```", "```py\n/transliterate\n```", "```py\nlanguage - two-letter language code of language used in the language script.\nfromScript - four-letter code for script language you are translating from.\ntoScript - four-letter code for script language you are translating to.\n```", "```py\n[\n   {\n      \"text\": \"translated text\"\n      \"script\": \"latin\"\n   }\n]\n```", "```py\n/detect\n```", "```py\n[\n   {\n      \"language\": \"en\",\n      \"score\": 1.0,\n      \"isTranslationSupported\": true,\n      \"isTransliterationSupported\": false,\n      \"alternatives\": [\n         {\n            \"language\": \"pt\",\n            \"score\": 0.8,\n            \"isTranslationSupported\": false\n            \"isTransliterationSupported\": false\n         },\n         {\n            \"language\": \"latn\",\n            \"score\": 0.7,\n            \"isTranslationSupported\": true\n            \"isTransliterationSupported\": true\n         }\n      ]\n   }\n]\n```", "```py\n/languages\n```", "```py\n[\n   \"translation\": {\n      ...\n      \"en\": {\n         \"name\": \"English\",\n         \"nativeName\": \"English\",\n         \"dir\": \"ltr\"\n      },\n      ...\n   },\n   \"transliteration\": {\n      \"ar\": {\n         \"name\": \"Latin\",\n         \"nativeName\": \"\",\n         \"scripts\": [\n            {\n               \"code\": \"Arab\",\n               \"name\": \"Arabic\",\n               \"nativeName\": \"\",\n               \"dir\": \"rtl\",\n               \"toScripts\": [\n                  {\n                     \"code:\" \"Latn\",\n                     \"name\": \"Latin\",\n                     \"nativeName\": \"\",\n                     \"dir\": \"ltr\"\n                  }\n               ]\n            },\n            {\n               \"code\": \"Latn\",\n               \"name\": \"Latin\",\n               \"nativeName\": \"\",\n               \"dir\": \"ltr\",\n               \"toScripts\": [\n                  {\n                     \"code:\" \"Arab\",\n                     \"name\": \"Arabic\",\n                     \"nativeName\": \"\",\n                     \"dir\": \"rtl\"\n                  }\n               ]\n            }\n         ]\n      },\n      ...\n   },\n   \"dictionary\": {\n      \"af\": {\n         \"name\": \"Afrikaans\",\n         \"nativeName\": \"Afrikaans\",\n         \"dir\": \"ltr\",\n         \"translations\": [\n            {\n               \"name\": \"English\",\n               \"nativeName\": \"English\",\n               \"dir\": \"ltr\",\n               \"code\": \"en\"\n            }\n            ...\n         ]\n      }\n      ...\n   }\n]\n```"]