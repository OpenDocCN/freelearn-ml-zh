["```py\nEXEC sp_execute_external_script\n @language = N'R'\n ,@script = N'require(RevoScaleR)\n OutputDataSet <- data.frame(ls(\"package:RevoScaleR\"))'\nWITH RESULT SETS\n (( Functions NVARCHAR(200)))  \n```", "```py\nEXEC sp_execute_external_script\n @language = N'R'\n ,@script = N'\n library(RevoScaleR)\n SampleSASFile <- file.path(rxGetOption(\"sampleDataDir\"), \"sas_data.sas7bdat\")\n #import into Dataframe\n OutputDataSet <- rxImport(SampleSASFile)\n '\nWITH RESULT SETS\n ((\n income  INT\n ,gender  INT\n      ,[count] INT\n ))\n```", "```py\nSampleSASFile <- file.path((\"C:\\\\Users\\\\TomazK\\\\Documents\\\\CH05\"), \"sas_data.sas7bdat\")  \n```", "```py\nSampleSASFile <- file.path((\"C:\\\\Users\\\\tomazK\\\\CH05\"), \"sas_data.sas7bdat\")\nsasDS <- RxSasData(SampleSASFile, stringsAsFactors = TRUE, \n colClasses = c(income = \"integer\", gender= \"integer\", count=\"integer\"),\nrowsPerRead = 1000)\nrxHistogram( ~F(gender)|F(income), data = sasDS)  \n```", "```py\nEXEC sp_execute_external_script\n @language = N'R'\n ,@script = N'\n library(RevoScaleR)\n SampleSPSSFile <- file.path(rxGetOption(\"sampleDataDir\"), \"spss_data.sav\")\n #import into Dataframe\n OutputDataSet <- rxImport(SampleSPSSFile)\n '\nWITH RESULT SETS\n ((\n income  INT\n ,gender  INT\n ,[count] INT\n ))\n\n```", "```py\nSampleSPSSFile <- file.path((\"C:\\\\Users\\\\tomazK\\\\CH05\"), \"spss_data.sav\")\nspssDS <- RxSpssData(SampleSPSSFile, stringsAsFactors = TRUE, \n                       colClasses = c(income = \"integer\", gender= \"integer\", count=\"integer\"),rowsPerRead = 1000)\nrxHistogram( ~F(income)|F(count), data = spssDS)\n\n```", "```py\nEXEC sp_execute_external_script\n @language = N'R'\n ,@script = N'\n library(RevoScaleR)\n sConnectStr <- \"Driver={ODBC Driver 13 for SQL Server};Server=TOMAZK\\MSSQLSERVER2017;Database=AdventureWorks;Trusted_Connection=Yes\"\n sQuery = \"SELECT TOP 10 BusinessEntityID,[Name],SalesPersonID FROM [Sales].[Store] ORDER BY BusinessEntityID ASC\"\n sDS <-RxOdbcData(sqlQuery=sQuery, connectionString=sConnectStr)\n OutputDataSet <- data.frame(rxImport(sDS))\n                            '\nWITH RESULT SETS\n ((\n BusinessEntityID  INT\n ,[Name]  NVARCHAR(50)\n ,SalesPersonID INT\n ));\n\n```", "```py\nUSE AdventureWorks;\nGO\n\nSELECT\nTOP 10\nBusinessEntityID\n,[Name]\n,SalesPersonID\nFROM [Sales].[Store]\nORDER BY BusinessEntityID ASC\n\n```", "```py\nEXECUTE AS USER='MSSQLSERVER01'\nGO\n-- YOUR CODE\nREVERT;\nGO\n\n```", "```py\nEXEC sp_execute_external_script\n @language = N'R'\n ,@script = N'\n df_sql <- InputDataSet \n                  df_sql4 <- data.frame(df_sql)\n outfile <- file.path(rxGetOption(\"sampleDataDir\"), \"df_sql4.xdf\") \n rxDataStep(inData = df_sql4, outFile = outfile, overwrite = TRUE)'\n ,@input_data_1 = N'\n SELECT \n BusinessEntityID\n                  ,[Name]\n                  ,SalesPersonID\n                  FROM [Sales].[Store]'\n\n```", "```py\nEXEC sp_execute_external_script\n @language = N'R'\n ,@script = N'\n OutputDataSet <- data.frame(path = file.path(rxGetOption(\"sampleDataDir\")))'\n\n```", "```py\nEXEC sp_execute_external_script\n @language = N'R'\n ,@script = N'\n library(RevoScaleR)\n df_sql <- InputDataSet \n                  var_info <- rxGetVarInfo(df_sql)\n OutputDataSet <- data.frame(unlist(var_info))'\n ,@input_data_1 = N'\n SELECT \n BusinessEntityID\n ,[Name]\n ,SalesPersonID\n FROM [Sales].[Store]'\n\n```", "```py\nlibrary(RevoScaleR) \nsConnectStr <- \"Driver={ODBC Driver 13 for SQLServer};Server=TOMAZK\\\\MSSQLSERVER2017;Database=AdventureWorks;Trusted_Connection=Yes\" \nsQuery = \"SELECT  BusinessEntityID,[Name],SalesPersonID FROM [Sales].[Store] ORDER BY BusinessEntityID ASC\" \nsDS <-RxOdbcData(sqlQuery=sQuery, connectionString=sConnectStr) \ndf_sql <- data.frame(rxImport(sDS)) \n```", "```py\n> var_info <- rxGetVarInfo(df_sql) \n> var_info \nVar 1: BusinessEntityID, Type: integer, Low/High: (292, 2051) \nVar 2: Name, Type: character \nVar 3: SalesPersonID, Type: integer, Low/High: (275, 290) \n```", "```py\n> df <- data.frame(unlist(var_info)) \n> df \n                         unlist.var_info. \nBusinessEntityID.varType          integer \nBusinessEntityID.storage            int32 \nBusinessEntityID.low                  292 \nBusinessEntityID.high                2051 \nName.varType                    character \nName.storage                       string \nSalesPersonID.varType             integer \nSalesPersonID.storage               int32 \nSalesPersonID.low                     275 \nSalesPersonID.high                    290 \n```", "```py\nEXEC sp_execute_external_script\n @language = N'R'\n ,@script = N'\n                  library(RevoScaleR)\n df_sql <- InputDataSet \n                  var_info <- rxGetInfo(df_sql)\n OutputDataSet <- data.frame(unlist(var_info))'\n ,@input_data_1 = N'\n SELECT \n                   BusinessEntityID\n                  ,[Name]\n                  ,SalesPersonID\n                  FROM [Sales].[Store]'\n\n```", "```py\n> rxGetInfo(df_sql) \nData frame: df_sql  \nNumber of observations: 701  \nNumber of variables: 3  \n```", "```py\n> rxGetInfo(df_sql, getVarInfo = TRUE) \nData frame: df_sql  \nNumber of observations: 701  \nNumber of variables: 3  \nVariable information:  \nVar 1: BusinessEntityID, Type: integer, Low/High: (292, 2051) \nVar 2: Name, Type: character \nVar 3: SalesPersonID, Type: integer, Low/High: (275, 290) \n```", "```py\nEXEC sp_execute_external_script\n @language = N'R'\n ,@script = N'\n library(RevoScaleR)\n df_sql <- InputDataSet \n get_Info <- rxGetInfo(df_sql) \n Object_names <- c(\"Object Name\", \"Number of Rows\", \"Number of Variables\")\n Object_values <- c(get_Info$objName, get_Info$numRows, get_Info$numVars)\n OutputDataSet <- data.frame(Object_names, Object_values)'\n ,@input_data_1 = N'\n SELECT \n                   BusinessEntityID\n                  ,[Name]\n                  ,SalesPersonID\n                  FROM [Sales].[Store]'\nWITH RESULT SETS\n ((\n ObjectName NVARCHAR(100)\n ,ObjectValue NVARCHAR(MAX)\n ));\n\n```", "```py\nEXEC sp_execute_external_script\n @language = N'R'\n ,@script = N'\n df_sql <- InputDataSet\n #first create an empty variable\n df_sql$BusinessType <- NA\n df_sql$BusinessType[df_sql$BusinessEntityID<=1000] <- \"Car Business\"\n df_sql$BusinessType[df_sql$BusinessEntityID>1000] <- \"Food Business\"\n OutputDataSet <- df_sql'\n ,@input_data_1 = N'\n SELECT \n BusinessEntityID\n ,[Name]\n ,SalesPersonID\n FROM [Sales].[Store]'\nWITH RESULT SETS\n ((\n BusinessEntityID INT\n ,[Name] NVARCHAR(MAX)\n ,SalesPersonID INT\n ,TypeOfBusiness NVARCHAR(MAX)\n ));\n\n```", "```py\nEXEC sp_execute_external_script\n @language = N'R'\n ,@script = N'\n library(RevoScaleR)\n df_sql <- InputDataSet\n df_sql$BusinessEntityID_2 <- NA\n\n myXformFunc <- function(dataList) {\n #dataList$BussEnt <- 100 * dataList$BusinessEntityID\n if (dataList$BusinessEntityID<=1000){dataList$BussEnt <- \"Car Business\"} else {dataList$BussEnt <- \"Food Business\"}\n return (dataList)\n }\n\n df_sql <- rxDataStep(inData = df_sql, transformFunc = myXformFunc)\n OutputDataSet <- df_sql'\n ,@input_data_1 = N'\n SELECT \n BusinessEntityID\n ,[Name]\n ,SalesPersonID\n FROM [Sales].[Store]'\nWITH RESULT SETS\n ((\n BusinessEntityID INT\n ,[Name] NVARCHAR(MAX)\n ,SalesPersonID INT\n ,TypeOfBusiness NVARCHAR(MAX)\n ));\n```", "```py\nEXEC sp_execute_external_script\n @language = N'R'\n ,@script = N'\n library(RevoScaleR)\n df_sql <- InputDataSet\n df_sql_subset <- rxDataStep(inData = df_sql, varsToKeep = NULL, rowSelection = (BusinessEntityID<=1000))\n OutputDataSet <- df_sql_subset'\n ,@input_data_1 = N'\n SELECT \n BusinessEntityID\n ,[Name]\n ,SalesPersonID\n FROM [Sales].[Store]'\nWITH RESULT SETS\n ((\n BusinessEntityID INT\n ,[Name] NVARCHAR(MAX)\n ,SalesPersonID INT\n ));\n\n```", "```py\nEXEC sp_execute_external_script\n @language = N'R'\n ,@script = N'\n library(RevoScaleR)\n df_sql <- InputDataSet\n someExtraData <- data.frame(BusinessEntityID = 1:1200, department = rep(c(\"a\", \"b\", \"c\", \"d\"), 25), Eff_score = rnorm(100))\n df_sql_merged <- rxMerge(inData1 = df_sql, inData2 = someExtraData, overwrite = TRUE, matchVars = \"BusinessEntityID\", type = \"left\" ,autoSort = TRUE)\n OutputDataSet <- df_sql_merged'\n ,@input_data_1 = N'\n SELECT \n BusinessEntityID\n ,[Name]\n ,SalesPersonID\n FROM [Sales].[Store]'\nWITH RESULT SETS\n ((\n BusinessEntityID INT\n ,[Name] NVARCHAR(MAX)\n ,SalesPersonID INT\n ,Department CHAR(1)\n ,Department_score FLOAT\n ));\n\n```", "```py\ninData1 = df_sql, inData2 = someExtraData, type = \"left\" \n```", "```py\ninData1 = someExtraData , inData2 = df_sql, type = \"left\" \n```", "```py\nEXEC sp_execute_external_script\n @language = N'R'\n ,@script = N'\n library(RevoScaleR)\n df_sql <- InputDataSet\n summary <- rxSummary(~ TotalChildren,  df_sql, summaryStats = c( \"Mean\", \"StdDev\", \"Min\", \"Max\",\"Sum\",\"ValidObs\", \"MissingObs\"))\n OutputDataSet <- summary$sDataFrame'\n ,@input_data_1 = N'\n SELECT * FROM [Sales].[vPersonDemographics] WHERE [DateFirstPurchase] IS NOT NULL'\nWITH RESULT SETS\n ((\n VariableName NVARCHAR(MAX)\n ,\"Mean\"NVARCHAR(100)\n ,\"StdDev\"NVARCHAR(100)\n ,\"Min\"NVARCHAR(100)\n ,\"Max\"NVARCHAR(100)\n ,\"Sum\"NVARCHAR(100)\n ,\"ValidObs\"NVARCHAR(100)\n ,\"MissingObs\"NVARCHAR(100)\n ));\n\n```", "```py\nrxSummary(~ TotalChildren, ... \n```", "```py\nrxSummary(~.,  .... \n```", "```py\nEXEC sp_execute_external_script\n @language = N'R'\n ,@script = N'\n library(RevoScaleR)\n df_sql <- InputDataSet\n df_sql_r <- rxFactors(inData = df_sql, sortLevels = TRUE,\nfactorInfo = list(MS = list(levels = c(\"M\",\"S\"), otherLevel=NULL, varName=\"MaritalStatus\")))\n summary <- rxSummary(~ MS,  df_sql_r)\n OutputDataSet <- data.frame(summary$categorical)'\n ,@input_data_1 = N'\n SELECT * FROM [Sales].[vPersonDemographics] WHERE [DateFirstPurchase] IS NOT NULL'\nWITH RESULT SETS\n ((\n MS NVARCHAR(MAX)\n ,\"Counts\"INT\n ));\n\n```", "```py\nMS Counts \nM  10011 \nS   8473 \n```", "```py\nrxSummary(~ TotalChildren, df_sql_r) \n```", "```py\nrxSummary(NumberCarsOwned ~ TotalChildren, df_sql_r) \n```", "```py\nName                          Mean     StdDev   Min Max Sum   ValidObs MissObs \nNumberCarsOwned:TotalChildren 3.258656 4.473517 0   20  60233 18484    0          \n```", "```py\nrxSummary(~ TotalChildren:F(MS), df_sql_r) \n```", "```py\nEXEC sp_execute_external_script\n @language = N'R'\n ,@script = N'\n library(RevoScaleR)\n df_sql <- InputDataSet\n df_sql_r <- rxFactors(inData = df_sql, sortLevels = TRUE,factorInfo = list(MS = list(levels = c(\"M\",\"S\"), otherLevel=NULL, varName=\"MaritalStatus\")))\n summary <- rxSummary(~F(MS):TotalChildren, df_sql_r, summaryStats = c( \"Mean\", \"StdDev\", \"Min\", \"Max\", \"ValidObs\", \"MissingObs\", \"Sum\"), categorical=c(\"MS\"))\n OutputDataSet <- data.frame(summary$categorical)'\n ,@input_data_1 = N'\n SELECT * FROM [Sales].[vPersonDemographics] WHERE [DateFirstPurchase] IS NOT NULL'\nWITH RESULT SETS\n ((\n Category NVARCHAR(MAX)\n ,\"MS\"NVARCHAR(MAX)\n ,\"Means\"FLOAT\n ,\"StDev\"FLOAT\n ,\"Min\"INT\n ,\"Max\"INT\n ,\"Sum\"INT\n ,\"ValidObs\"INT\n ));\n\n```", "```py\nName               Mean     StdDev   Min Max Sum   ValidObs MissingObs\n TotalChildren:F_MS 1.844352 1.612408 0   5   34091 18484    0 \n\nStatistics by category (2 categories):\n\nCategory                  F_MS Means    StdDev   Min Max Sum   ValidObs\nTotalChildren for F(MS)=M M    2.080412 1.583326 0   5   20827 10011 \nTotalChildren for F(MS)=S S    1.565443 1.601977 0   5   13264  8473 \n\n```", "```py\nEXEC sp_execute_external_script\n @language = N'R'\n ,@script = N'\n library(RevoScaleR)\n                  df_sql <- InputDataSet\n                  quan <- rxQuantile(data = df_sql, varName = \"TotalChildren\")\n                  quan <- data.frame(quan)\n values <- c(\"0%\",\"25%\",\"50%\",\"75%\",\"100%\")\n OutputDataSet <- data.frame(values,quan)'\n ,@input_data_1 = N'\n SELECT * FROM [Sales].[vPersonDemographics] WHERE [DateFirstPurchase] IS NOT NULL'\n WITH RESULT SETS\n      ((\n            Quartile NVARCHAR(100)\n            ,QValue FLOAT\n ));\n\n```", "```py\n0%  25%  50%  75% 100% \n0    0    2    3    5 \n\n```", "```py\nEXEC sp_execute_external_script\n @language = N'R'\n ,@script = N'\n library(RevoScaleR)\n df_sql <- InputDataSet\n dec <- rxQuantile(data = df_sql, varName = \"TotalChildren\",  probs = seq(from = 0, to = 1, by = .1))\n dec <- data.frame(dec)\n values <- c(\"0%\",\"10%\",\"20%\",\"30%\",\"40%\",\"50%\",\"60%\",\"70%\",\"80%\",\"90%\",\"100%\")\n OutputDataSet <- data.frame(values,dec)'\n ,@input_data_1 = N'\n SELECT * FROM [Sales].[vPersonDemographics] WHERE [DateFirstPurchase] IS NOT NULL'\nWITH RESULT SETS\n ((\n Decile NVARCHAR(100)\n ,DValue FLOAT\n ));\n\n```", "```py\nEXEC sp_execute_external_script\n @language = N'R'\n      ,@script = N'\n library(RevoScaleR)\n df_sql <- InputDataSet\n                  crosstab <- rxCrossTabs(N(NumberCarsOwned) ~ F(TotalChildren),  df_sql, means=FALSE) #means=TRUE\n children <- c(0,1,2,3,4,5)\n                  OutputDataSet <- data.frame(crosstab$sums, children)'\n ,@input_data_1 = N'\n SELECT * FROM [Sales].[vPersonDemographics] WHERE [DateFirstPurchase] IS NOT NULL'\nWITH RESULT SETS\n      ((\n             NumberOfCarsOwnedSUM INT\n            ,NumberOfChildren INT\n ));\n\n```", "```py\nCross Tabulation Results for: N(NumberCarsOwned) ~ F(TotalChildren)\nData: df_sql\nDependent variable(s): N(NumberCarsOwned)\nNumber of valid observations: 18484\nNumber of missing observations: 0 \nStatistic: sums \n\n```", "```py\nlibrary(RColorBrewer) \nbarplot(OutputDataSet$V1, xlab = \"Number of children\",ylab = \"Number of cars owned\", \n        legend.text = c(\"0 Child\",\"1 Child\",\"2 Child\",\"3 Child\",\"4 Child\",\"5 Child\"), col=brewer.pal(6, \"Paired\")) \n```", "```py\nEXEC sp_execute_external_script\n      @language = N'R'\n ,@script = N'\n            library(RevoScaleR)\n            df_sql <- InputDataSet\n crosstab <- rxCrossTabs(NumberCarsOwned ~ MaritalStatus,  df_sql, means=FALSE) \n            status <- c(\"M\",\"S\")\n            OutputDataSet <- data.frame(crosstab$sums, status)'\n ,@input_data_1 = N'\n SELECT * FROM [Sales].[vPersonDemographics] WHERE [DateFirstPurchase] IS NOT NULL'\nWITH RESULT SETS\n      ((\n             NumberOfCarsOwnedSUM INT\n             ,MaritalStatus NVARCHAR(100)\n ));\n\n```", "```py\nEXEC sp_execute_external_script\n @language = N'R'\n ,@script = N'\n                  library(RevoScaleR)\n                  df_sql <- InputDataSet\n                  mar <- rxMarginals(rxCrossTabs(NumberCarsOwned ~ F(TotalChildren), data=df_sql, margin=TRUE, mean=FALSE))\n OutputDataSet  <- data.frame(mar$NumberCarsOwned$grand)'\n ,@input_data_1 = N'\n      SELECT * FROM [Sales].[vPersonDemographics] WHERE [DateFirstPurchase] IS NOT NULL'\nWITH RESULT SETS\n ((\n            GrandTotal INT\n ));\n\n```", "```py\n> mar$NumberCarsOwned$grand \n[1] 27776 \n```", "```py\nrxHistogram(~NumberCarsOwned, data=df_sql) \n```", "```py\nrxHistogram(~F(MS), data=df_sql_r) \n```", "```py\nrxHistogram(~ NumberCarsOwned | F(MS), title=\"Cars owned per Marital Status\",  numBreaks=10, data = df_sql_r) \n\n```", "```py\nrxLinePlot(as.numeric(log(TotalPurchaseYTD)) ~ as.factor(DateFirstPurchase), data = df_sql_r, rowSelection=  \n             DateFirstPurchase >= \"2001-07-01 00:00:00.000\"&amp; DateFirstPurchase <= \"2001-07-17 00:00:00.000\", type=\"p\") \n```", "```py\n# combined \nh1 <- rxHistogram(~NumberCarsOwned, data=df_sql) \nh2 <- rxHistogram(~F(MS), data=df_sql_r) \np1 <- rxLinePlot(as.numeric(log(TotalPurchaseYTD)) ~ as.factor(DateFirstPurchase), data = df_sql_r, rowSelection=  \n             DateFirstPurchase >= \"2001-07-01 00:00:00.000\"&amp; DateFirstPurchase <= \"2001-07-17 00:00:00.000\", type=\"p\") \n\nprint(h1, position = c(0, 0.5, 0.5, 1), more = TRUE) \nprint(h2, position = c(0.5, 0.5, 1, 1), more = TRUE) \nprint(p1, position = c(0.5, 0.05, 1, 0.5)) \n```", "```py\nEXEC sp_execute_external_script\n @language = N'R'\n ,@script = N'\n library(RevoScaleR)\n df_sql <- InputDataSet\n df_sql_r <- rxFactors(inData = df_sql, sortLevels = TRUE,factorInfo = list(MS = list(levels = c(\"M\",\"S\"), otherLevel=NULL, varName=\"MaritalStatus\")))\n df_sql_r$Occupation <- as.factor(df_sql_r$Occupation)\n df_sql_r$MS <- df_sql_r$MS\n testData <- data.frame(Occupation = df_sql_r$Occupation, Status=df_sql_r$MS)\n d <- rxCrossTabs(~Occupation:Status,  testData, returnXtabs = TRUE)\n chi_q <- rxChiSquaredTest(d)\n\n #results\n xs <- chi_q$''X-squared''\n p <- chi_q$''p-value''\n OutputDataSet <- data.frame(xs,p)'\n ,@input_data_1 = N'\n SELECT * FROM [Sales].[vPersonDemographics] WHERE [DateFirstPurchase] IS NOT NULL'\nWITH RESULT SETS\n ((\n Chi_square_value NVARCHAR(100)\n ,Stat_significance NVARCHAR(100)\n ));\n\n```", "```py\nChi-squared test of independence between Occupation and Status \n X-squared df p-value\n 588.2861  4  5.312913e-126\n\n```", "```py\nrxKendallCor(d, type = \"b\")\n\n```", "```py\n estimate 1 p-value\n -0.05179647       0\n HA: two.sided \n\n```", "```py\nEXEC sp_execute_external_script\n          @language = N'R'\n          ,@script = N'\n                library(RevoScaleR)\n                df_sql <- InputDataSet\n                df_sql_r <- rxFactors(inData = df_sql, factorInfo = list(MS = list(levels = c(\"M\",\"S\"), otherLevel=NULL, varName=\"MaritalStatus\")))\n                df_sql_r$Occupation <- as.factor(df_sql_r$Occupation)\n                df_sql_r$MS <- df_sql_r$MS\n                testData <- data.frame(Occupation = df_sql_r$Occupation, Status=df_sql_r$MS)\n                d <- rxCrossTabs(~Occupation:Status,  testData, returnXtabs = TRUE)\n                ken <- rxKendallCor(d, type = \"b\")\n\n                k <- ken$`estimate 1`\n                p <- ken$`p-value`\n\n                #results\n                OutputDataSet <- data.frame(k,p)'\n          ,@input_data_1 = N'\n          SELECT * FROM [Sales].[vPersonDemographics] WHERE [DateFirstPurchase] IS NOT NULL'\n    WITH RESULT SETS\n          ((\n                 Kendall_value NVARCHAR(100)\n                ,Stat_significance NVARCHAR(100)\n          ));\n\n```"]