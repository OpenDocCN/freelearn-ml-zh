["```py\n# import os for operating system dependent functionalities\nimport os\n\n# import other required libraries\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\n\n# Set your working directory according to your requirement\nos.chdir(\".../Chapter 3/Resampling Methods\")\nos.getcwd()\n```", "```py\ndf_housingdata = pd.read_csv(\"Final_HousePrices.csv\")\n```", "```py\ndf_housingdata.shape\n```", "```py\ndf_housingdata.isnull().sum()\n```", "```py\n# create feature & response variables\nX = df_housingdata.iloc[:,0:79]\nY = df_housingdata['SalePrice']\n```", "```py\n# Create train & test sets\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, train_size=0.7, test_size=0.3)\n```", "```py\nprint(X_train.shape)\nprint(Y_train.shape)\nprint(X_test.shape)\nprint(Y_test.shape)\n```", "```py\ndf_creditcarddata = pd.read_csv(\"creditcarddefault.csv\")\ndf_creditcarddata.shape\n```", "```py\n# create feature & response set\nX = df_creditcarddata.iloc[:,0:24]\nY = df_creditcarddata['default payment next month']\n\n# Create train & test sets\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, train_size=0.7, test_size=0.3, stratify=Y)\n```", "```py\nprint(pd.value_counts(Y_train.values)*100/Y_train.shape)\nprint(pd.value_counts(Y_test.values)*100/Y_test.shape)\n```", "```py\nimport pandas as pd\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error, r2_score\nfrom sklearn.model_selection import KFold \nimport matplotlib.pyplot as plt\n```", "```py\n# Let's read our data. \ndf_autodata = pd.read_csv(\"autompg.csv\")\n\n# Fill NAs with the median value\ndf_autodata['horsepower'].fillna(df_autodata['horsepower'].median(), inplace=True)\n\n# Drop carname variable\ndf_autodata.drop(['carname'], axis=1, inplace=True)\n\nX = df_autodata.iloc[:,1:8]\nY = df_autodata.iloc[:,0]\nX=np.array(X)\nY=np.array(Y)\n```", "```py\nkfoldcv = KFold(n_splits=10)\nkf_ytests = []\nkf_predictedvalues = []\nmean_mse = 0.0\n\nfor train_index, test_index in kfoldcv.split(X):\n    X_train, X_test = X[train_index], X[test_index] \n    Y_train, Y_test = Y[train_index], Y[test_index]\n\n    model = LinearRegression()\n    model.fit(X_train, Y_train) \n    Y_pred = model.predict(X_test)\n\n    # there is only one y-test and y-pred per iteration over the kfoldcv.split, \n    # so we append them to the respective lists.\n\n    kf_ytests += list(Y_test)\n    kf_predictedvalues += list(Y_pred)\n    mse = mean_squared_error(kf_ytests, kf_predictedvalues)\n    r2score = r2_score(kf_ytests, kf_predictedvalues)\n    print(\"R^2: {:.2f}, MSE: {:.2f}\".format(r2score, mse))\n    mean_mse += mse   \n```", "```py\nprint(\"Average CV Score :\" ,mean_mse/10) \n```", "```py\n## Let us plot the model\nplt.scatter(kf_ytests, kf_predictedvalues)\nplt.xlabel('Reported mpg')\nplt.ylabel('Predicted mpg')\n```", "```py\n# Let's read our data. \ndf_autodata = pd.read_csv(\"autompg.csv\")\n\n# Fill NAs with the median value\ndf_autodata['horsepower'].fillna(df_autodata['horsepower'].median(), inplace=True)\n\n# Drop carname variable\ndf_autodata.drop(['carname'], axis=1, inplace=True)\n\nX = df_autodata.iloc[:,1:8]\nY = df_autodata.iloc[:,0]\nX=np.array(X)\nY=np.array(Y)\n```", "```py\nfrom sklearn.model_selection import LeaveOneOut \nloocv = LeaveOneOut()\n\nloo_ytests = []\nloo_predictedvalues = []\nmean_mse = 0.0\n\nfor train_index, test_index in loocv.split(X):\n    # the below requires arrays. So we converted the dataframes to arrays\n    X_train, X_test = X[train_index], X[test_index] \n    Y_train, Y_test = Y[train_index], Y[test_index]\n\n    model = LinearRegression()\n    model.fit(X_train, Y_train) \n    Y_pred = model.predict(X_test)\n\n    # there is only one y-test and y-pred per iteration over the loo.split, \n    # so we append them to the respective lists.\n\n    loo_ytests += list(Y_test)\n    loo_predictedvalues += list(Y_pred)\n\n    mse = mean_squared_error(loo_ytests, loo_predictedvalues)\n    r2score = r2_score(loo_ytests, loo_predictedvalues)\n    print(\"R^2: {:.2f}, MSE: {:.2f}\".format(r2score, mse))\n    mean_mse += mse \n```", "```py\nprint(\"Average CV Score :\" ,mean_mse/X.shape[0]) \n```", "```py\n## Let us plot the model\nplt.scatter(kf_ytests, kf_predictedvalues)\nplt.xlabel('Reported mpg')\nplt.ylabel('Predicted mpg')\n```", "```py\nimport pandas as pd\nimport numpy as np\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import SGDRegressor\nfrom sklearn.metrics import mean_squared_error, r2_score\nimport matplotlib.pyplot as plt\n\nfrom sklearn.utils import resample\n```", "```py\n# Let's read our data. We prefix the data frame name with \"df_\" for easier understanding.\ndf_autodata = pd.read_csv(\"autompg.csv\")\ndf_autodata['horsepower'].fillna(df_autodata['horsepower'].median(), inplace=True)\ndf_autodata.drop(['carname'], axis=1, inplace=True)\n```", "```py\n# This custom function takes a dataframe as an argument\ndef create_bootstrap_oob(df):\n    global df_OOB\n    global df_bootstrap_sample \n\n    # creating the bootstrap sample\n    df_bootstrap_sample = resample(df, replace=True, n_samples=100)\n\n    # creating the OOB sample \n    bootstrap_sample_index = tuple(df_bootstrap_sample.index)\n    bootstrap_df = df.index.isin(bootstrap_sample_index)\n    df_OOB = df[~bootstrap_df]\n```", "```py\niteration=50\nbootstap_statistics=list()\noriginalsample_statistics=list()\n\nfor i in range(iteration):\n    # Call custom function create_bootstrap_oob(). Pass df_autodata\n    create_bootstrap_oob(df_autodata)\n\n    # Capture mean value of mpg variable for all bootstrap samples\n    bootstap_statistics.append(df_bootstrap_sample.iloc[:,0].mean())\n\n    originalsample_statistics.append(df_autodata['mpg'].mean())\n```", "```py\nimport matplotlib.pyplot as plt\nf, ax= plt.subplots(figsize=(6,6))\n\nplt.plot(bootstap_statistics, 'c--', label='Bootstrap Sample Statistic')\nplt.plot(originalsample_statistics, 'grey', label='Original Sample Statistic')\nplt.xlabel('Iterations')\nplt.ylabel('Statistic (Mean of mpg)')\nplt.legend(loc=4)\nplt.show()\n```"]