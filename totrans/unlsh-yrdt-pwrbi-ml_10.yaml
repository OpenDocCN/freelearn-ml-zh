- en: '10'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Iterating Power BI ML models
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [*Chapter 8*](B19500_08.xhtml#_idTextAnchor118), you trained Power BI ML
    models using all of the features that you had selected for each of the three ML
    models – that is, **Predict Damage ML**, **Predict Size ML**, and **Predict Height
    ML** – using data from the FAA Wildlife Strike database. In [*Chapter 9*](B19500_09.xhtml#_idTextAnchor125),
    you evaluated the test results of the automated training and testing process that
    is part of Power BI. The test results helped you understand the strengths and
    weaknesses of the predictive models, along with details about features that contributed
    to correct predictions.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter will revisit the findings from [*Chapter 9*](B19500_09.xhtml#_idTextAnchor125)
    and use them to decide if you need to modify and retrain the ML models to achieve
    better results via iterative development. The list of features that are used to
    train these ML models can be whittled down, the filter criteria can be adjusted,
    and the result of the new round of training and testing can be compared to those
    from [*Chapter 9*](B19500_09.xhtml#_idTextAnchor125).
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The requirements for this chapter are the same as the preceding chapters:'
  prefs: []
  type: TYPE_NORMAL
- en: FAA Wildlife Strike data files from either the FAA website or the Packt GitHub
    site
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Power BI Pro license
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'One of the following Power BI licensing options for access to Power BI dataflows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Power BI Premium
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Power BI Premium Per User
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'One of the following options for getting data into the Power BI cloud service:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Microsoft OneDrive (with connectivity to the Power BI cloud service)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Microsoft Access and Power BI Gateway
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure Data Lake (with connectivity to the Power BI cloud service)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Considerations for ML model iterations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Numerous books have been written about ML and reasons that ML models perform
    well or poorly, including books from Packt Publishing. The purpose of this book
    is to help you learn Power BI so that you can explore the FAA Wildlife Strike
    data, analyze that data, and then create SaaS ML models. At this point in this
    book, you are at a crossroads. Do you continue to iterate these ML models in the
    SaaS tool? Have you demonstrated enough value to hand an ML model project over
    to a data science team who will improve upon the model using Azure ML or advanced
    tools? Or do you go back to your stakeholders, report your findings, and ask for
    guidance on the next steps? The following diagram shows a few options for the
    next steps you could consider:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.1 – Possible next steps for your Power BI ML models](img/Figure_10.1_B19500.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.1 – Possible next steps for your Power BI ML models
  prefs: []
  type: TYPE_NORMAL
- en: Rather than diving into the technicalities of ML theory, you will focus on a
    few possible causes of inaccuracy that can be easily addressed with modifications
    that can be made for each of your SaaS Power BI ML models. Based on your assessment
    of each model, you will decide on the next steps based on the options shown in
    *Figure 10**.1*. Let’s look at a few topics you should consider.
  prefs: []
  type: TYPE_NORMAL
- en: Inaccurate data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: “*Garbage in, garbage out*” is a popular saying in the data world. Training
    an ML model with bad data, or scoring bad data through an ML model, can cause
    inaccurate results. This issue can be addressed through your work as a data professional,
    but what if the source data collection mechanisms are bad? If the source data
    is inaccurate, there is only so much you can do to address the problem without
    making changes to the source data collection process.
  prefs: []
  type: TYPE_NORMAL
- en: Features with low predictive value
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the first round of training and testing your ML models, you ran every feature
    you identified or created from the FAA Wildlife Strike database through the Power
    BI SaaS ML tool. Without getting too technical, keeping things small and simple
    is a good goal for ML (especially using a SaaS tool such as Power BI). Many of
    the features you included in the ML models may have little value for making predictions.
    You took notes of the features that were identified as having predictive value,
    but trial and error with new iterations of training and testing may be needed.
    You may eventually reach a point of diminishing returns. Will that be the best
    you can do, or should you hand off the ML model to a data science team with advanced
    tools and skill sets?
  prefs: []
  type: TYPE_NORMAL
- en: Data volumes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Discussing the impact of data volumes on ML models could fill an entire book.
    As a general rule, simple ML models with good data will require less training
    data than complex ML models or models trained using imperfect data. Again, venturing
    into the topic of optimal data volumes for ML goes beyond the scope of this book,
    which is to create simple SaaS ML models in Power BI. With the Power BI SaaS ML
    tool, keeping your training datasets in the tens of thousands of rows or less
    is a good rule of thumb.
  prefs: []
  type: TYPE_NORMAL
- en: Data characteristics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'ML models can be impacted by various data characteristics, such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**High cardinality of features**: Too many unique values in a categorical column
    can reduce the predictive value of the column. For example, including the airport
    codes for every airport in the FAA Wildlife Strike database would result in a
    high cardinality column.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Skewed data**: Results are captured in a numerical range or for a few categories,
    but other options are lacking. An example would be if the FAA Wildlife Strike
    data is missing strikes at high altitudes, or if most of the data is captured
    from a single airport. If the accurate data is naturally skewed, there are advanced
    techniques beyond the scope of this book that can address skew for ML models.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Other characteristics such as **bias**, **overfitting**, **underfitting**, and
    many more potential issues can be assessed. Again, these topics are discussed
    at length in books that focus on ML theory.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Before proceeding, you need to be clear about your goals and objectives. You
    aren’t trying to create perfect ML models using the Power BI ML tool. Instead,
    you are proving the predictive value of the FAA Wildlife Strike data for your
    use cases of predicting damage, predicting wildlife size, and predicting the height
    of impact. The decisions you make for each of these ML models will be presented
    back to your stakeholders to demonstrate the results of your project, along with
    recommendations for future iterations of the ML models and the overall project.
  prefs: []
  type: TYPE_NORMAL
- en: Assessing the Predict Damage binary prediction ML model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The **Predict Damage ML** model that you built and reviewed in the previous
    two chapters is designed to predict the likelihood that damage was reported due
    to wildlife striking an aircraft. A few key metrics from the training report for
    that binary prediction model can be seen in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Metric name** | **Metric value** | **Comments** |'
  prefs: []
  type: TYPE_TB
- en: '| **Area Under the** **Curve** (**AUC**) | 91% | The AUC indicates the performance
    of an ML model, with 100% being perfect. 50% would be random guessing, while less
    than 50% indicates predictions worse than random guessing. |'
  prefs: []
  type: TYPE_TB
- en: '| Row Count for Training | 23,356 | The number of rows used to train the ML
    model. |'
  prefs: []
  type: TYPE_TB
- en: '| Row Count for Testing | 5839 | The number of rows used to test against the
    trained ML model. |'
  prefs: []
  type: TYPE_TB
- en: '| Cost-Benefit Analysis Best Probability Threshold | 0.94 | The probability
    threshold with the greatest return on investment when considering precision and
    recall. |'
  prefs: []
  type: TYPE_TB
- en: Figure 10.2 – Metrics for the initial Predict Damage ML model
  prefs: []
  type: TYPE_NORMAL
- en: 'The testing results for the **Predict Damage ML** model were discussed at length
    in [*Chapter 10*](B19500_10.xhtml#_idTextAnchor139). Generally speaking, a 91%
    AUC is not a bad start for your first effort at an ML model. Can you make the
    model even better at predicting damage? If so, what changes could you make? You
    can review different metrics from the perspective of the **Probability** **Threshold**
    setting:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Probability Threshold setting** | **Precision – How many flagged incidents**
    **had damage?** | **Recall – How many incidents of real damage were flagged to**
    **have damage?** | **Comments** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| 0.94 | 67% | 38% | Maximum cost-benefit analysis threshold |'
  prefs: []
  type: TYPE_TB
- en: '| 0.70 | 44% | 75% | Less than half of flagged incidents had real damage, but
    75% were captured |'
  prefs: []
  type: TYPE_TB
- en: '| 0.50 | 30% | 88% | 88% of all damage incidents were captured, but flagged
    incidents were false alarms 70% of the time |'
  prefs: []
  type: TYPE_TB
- en: '| 0.03 | 9% | 100% | All damage incidents were captured, but 91% of the flagged
    incidents were false alarms |'
  prefs: []
  type: TYPE_TB
- en: Figure 10.3 – The Probability Threshold setting’s impact on the Predict Damage
    ML model
  prefs: []
  type: TYPE_NORMAL
- en: 'By browsing through these features using Power BI and searching through the
    different considerations mentioned earlier in this chapter, you can weigh the
    pros and cons of your options. For example, of the 29,195 rows in the dataset
    used for training and testing, the **Phase of Flight** feature **Parked** is used
    on only six rows. None of those six rows had damage. Logically, this makes sense
    since damaging a large parked aircraft would require the strength of a grizzly
    bear or elephant. How do you handle an underrepresented category such as this?
    Is it time to call upon the data science team? Your options have been summarized
    in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Options** | **Considerations** |'
  prefs: []
  type: TYPE_TB
- en: '| Hand off to the data science team |'
  prefs: []
  type: TYPE_TB
- en: A large number of features could probably be whittled down for better results
    with a simpler ML model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 91% AUC could be difficult to improve with a SaaS ML tool
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ML experts could review the model for bias and skew
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Use in production |'
  prefs: []
  type: TYPE_TB
- en: Is the ML model good enough to provide value for stakeholders?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What are the consequences of incorrect predictions?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Can you truly explain what contributes to the predictions? Do you need to be
    able to do this?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| End the project | Unless the predictions provide little value, ending the
    project for this ML model now doesn’t make much sense |'
  prefs: []
  type: TYPE_TB
- en: '| Iterate the ML model |'
  prefs: []
  type: TYPE_TB
- en: Can you improve upon the ML model?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How much better can you make it?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.4 – Options and considerations for the Predict Damage ML model
  prefs: []
  type: TYPE_NORMAL
- en: The most likely real-world decision would be to circle back with stakeholders
    and review your results. The best option would likely be handing off to a data
    science team who can review and assess your findings, improve upon the ML model,
    and quantify the business value for the stakeholders. You could also iterate upon
    the existing ML model, but with a 91% AUC, your effort might be better directed
    toward other efforts within the larger FAA Wildlife Strike data project.
  prefs: []
  type: TYPE_NORMAL
- en: Assessing the Predict Size ML classification model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `Small`, `Medium`, or `Large`. The following table shows some key metrics
    about the initial version of the ML model:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Metric Name** | **Metric** **Value** | **Comments** |'
  prefs: []
  type: TYPE_TB
- en: '| AUC | 60% | The AUC indicates the performance of an ML model, with 100% being
    perfect. 60% is better than random guessing, but not very good! |'
  prefs: []
  type: TYPE_TB
- en: '| Row Count for Training | 11,368 | Number of rows used to train the ML model
    |'
  prefs: []
  type: TYPE_TB
- en: '| Row Count for Testing | 2,841 | Number of rows used to test against the trained
    ML model |'
  prefs: []
  type: TYPE_TB
- en: Figure 10.5 – Key metrics for the Predict Size ML classification model
  prefs: []
  type: TYPE_NORMAL
- en: 'The AUC for this model was only 60%, which is not very good. What can you do
    to make it better? First, take a look at the precision and recall metrics by class:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Class** | **Precision – How many flagged incidents matched** **the class?**
    | **Recall – How many real members of this class** **were captured?** | **Comments**
    |'
  prefs: []
  type: TYPE_TB
- en: '| Small | 88% | 65% | Good precision, but 35% of Small incidents were still
    misclassified |'
  prefs: []
  type: TYPE_TB
- en: '| Medium | 25% | 36% | Not very good precision and recall metrics |'
  prefs: []
  type: TYPE_TB
- en: '| Large | 22% | 66% | Not very good precision, but 2/3 of all large incidents
    were captured |'
  prefs: []
  type: TYPE_TB
- en: Figure 10.6 – Precision and recall metrics by class for the Predict Size ML
    classification model
  prefs: []
  type: TYPE_NORMAL
- en: 'While the `Small` class, the predictions for `Medium` and `Large` are disappointing.
    Having taken notes on the features with strong predictive capabilities, you can
    change some of the filter criteria when performing a second iteration of the ML
    model:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Filter criteria** | **First** **ML model** | **New ML** **model iteration**
    | **Comments** |'
  prefs: []
  type: TYPE_TB
- en: '| Date | >= 1/1/2010 | >= 1/1/2010 | Same |'
  prefs: []
  type: TYPE_TB
- en: '| Aircraft Class Code | A | A | Same |'
  prefs: []
  type: TYPE_TB
- en: '| Airport ID | Top 10 Airports | Top 15 Airports | Larger sample size |'
  prefs: []
  type: TYPE_TB
- en: '| Height |  | Not null and Not 0 | Eliminates rows with missing data for a
    predictive column |'
  prefs: []
  type: TYPE_TB
- en: '| Speed |  | Not null and Not 0 | Eliminates missing data and removes a speed
    of 0 |'
  prefs: []
  type: TYPE_TB
- en: '| Size | Not null and Not blank | Not null and Not blank | Same – removes rows
    with missing data |'
  prefs: []
  type: TYPE_TB
- en: Figure 10.7 – Changes to the filter criteria for Predict Size ML
  prefs: []
  type: TYPE_NORMAL
- en: 'Based on the notes you took while reviewing the training report, as well as
    your findings from using Power BI for data exploration, you can whittle down the
    list of features for your next iteration of training the **Predict Size** **ML**
    model:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Features in the Curated FAA Wildlife** **Strike query** | **Included in
    the first iteration of the Predict Size** **ML model?** | **Included in the second
    iteration of the Predict Size** **ML model?** | **Notes** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Incident Date |  |  | Too many unique values rolled into Month |'
  prefs: []
  type: TYPE_TB
- en: '| Time of Day |  | Yes |  |'
  prefs: []
  type: TYPE_TB
- en: '| Airport ID | Yes | Yes | Filtered to the top 15 to avoid cardinality issues
    |'
  prefs: []
  type: TYPE_TB
- en: '| Airport Name |  |  | Describes Airport ID |'
  prefs: []
  type: TYPE_TB
- en: '| Latitude |  |  | Too many unique values |'
  prefs: []
  type: TYPE_TB
- en: '| Longitude |  |  | Too many unique values |'
  prefs: []
  type: TYPE_TB
- en: '| Runway |  |  | Too many unique values |'
  prefs: []
  type: TYPE_TB
- en: '| State |  |  | Location information covered by Airport ID |'
  prefs: []
  type: TYPE_TB
- en: '| FAA Region |  |  | Location information covered by Airport ID |'
  prefs: []
  type: TYPE_TB
- en: '| Operator ID |  | Yes |  |'
  prefs: []
  type: TYPE_TB
- en: '| FLT |  |  | Too many unique values |'
  prefs: []
  type: TYPE_TB
- en: '| Aircraft |  | Yes |  |'
  prefs: []
  type: TYPE_TB
- en: '| Aircraft Class Code |  |  | Filtered to A for both iterations |'
  prefs: []
  type: TYPE_TB
- en: '| Aircraft Mass Code | Yes | Yes |  |'
  prefs: []
  type: TYPE_TB
- en: '| Number of Engines | Yes | Yes | Filtered to 2 for the second iteration |'
  prefs: []
  type: TYPE_TB
- en: '| Phase of Flight | Yes | Yes |  |'
  prefs: []
  type: TYPE_TB
- en: '| Height | Yes | Yes |  |'
  prefs: []
  type: TYPE_TB
- en: '| Speed | Yes | Yes |  |'
  prefs: []
  type: TYPE_TB
- en: '| Distance |  |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| Sky | Yes |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| Precipitation | Yes |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| Cost of Repairs Adjusted |  | Yes |  |'
  prefs: []
  type: TYPE_TB
- en: '| Ingested Other |  | Yes |  |'
  prefs: []
  type: TYPE_TB
- en: '| Indicated Damage | Yes | Yes |  |'
  prefs: []
  type: TYPE_TB
- en: '| Damage Level |  | Yes |  |'
  prefs: []
  type: TYPE_TB
- en: '| Struck Random | Yes | Yes |  |'
  prefs: []
  type: TYPE_TB
- en: '| Damaged Random | Yes | Yes |  |'
  prefs: []
  type: TYPE_TB
- en: '| Struck Windshield | Yes | Yes |  |'
  prefs: []
  type: TYPE_TB
- en: '| Damaged Windshield | Yes |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| Struck Nose | Yes | Yes |  |'
  prefs: []
  type: TYPE_TB
- en: '| Damaged Nose | Yes | Yes |  |'
  prefs: []
  type: TYPE_TB
- en: '| Struck Engine 1 | Yes |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| Damaged Engine 1 | Yes | Yes |  |'
  prefs: []
  type: TYPE_TB
- en: '| Ingested Engine 1 | Yes |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| Struck Engine 2 | Yes |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| Damaged Engine 2 | Yes | Yes |  |'
  prefs: []
  type: TYPE_TB
- en: '| Ingested Engine 2 | Yes |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| Struck Engine 3 | Yes |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| Damaged Engine 3 | Yes |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| Ingested Engine 3 | Yes |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| Struck Engine 4 | Yes |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| Damaged Engine 4 | Yes |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| Ingested Engine 4 | Yes |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| Struck Propeller | Yes | Yes |  |'
  prefs: []
  type: TYPE_TB
- en: '| Damaged Propeller | Yes | Yes |  |'
  prefs: []
  type: TYPE_TB
- en: '| Struck Wing or Rotor | Yes | Yes |  |'
  prefs: []
  type: TYPE_TB
- en: '| Damaged Wing or Rotor | Yes | Yes |  |'
  prefs: []
  type: TYPE_TB
- en: '| Struck Fuselage | Yes |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| Damaged Fuselage | Yes |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| Struck Landing Gear | Yes | Yes |  |'
  prefs: []
  type: TYPE_TB
- en: '| Damaged Landing Gear | Yes | Yes |  |'
  prefs: []
  type: TYPE_TB
- en: '| Struck Tail | Yes | Yes |  |'
  prefs: []
  type: TYPE_TB
- en: '| Damaged Tail | Yes | Yes |  |'
  prefs: []
  type: TYPE_TB
- en: '| Struck Lights | Yes | Yes |  |'
  prefs: []
  type: TYPE_TB
- en: '| Damaged Lights | Yes | Yes |  |'
  prefs: []
  type: TYPE_TB
- en: '| Struck Other | Yes |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| Damaged Other | Yes |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| Effect on Flight | Yes | Yes |  |'
  prefs: []
  type: TYPE_TB
- en: '| Number Seen |  | Yes |  |'
  prefs: []
  type: TYPE_TB
- en: '| Number Struck |  | Yes |  |'
  prefs: []
  type: TYPE_TB
- en: '| Number of Engines Struck | Yes |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| Percentage of Engines Struck | Yes |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| Number of Engines Ingested | Yes |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| Percentage of Engines Ingested | Yes |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| Number of Engines Damaged | Yes |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| Percentage of Engines Damaged | Yes |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| Month Number | Yes | Yes |  |'
  prefs: []
  type: TYPE_TB
- en: '| **Total Features** | **50** | **36** |  |'
  prefs: []
  type: TYPE_TB
- en: '| **Total Rows** | **7,203** | **4,928** |  |'
  prefs: []
  type: TYPE_TB
- en: Figure 10.8 – Features selected for the first and second iterations of the Predict
    Size ML model
  prefs: []
  type: TYPE_NORMAL
- en: 'You have two options for performing a second iteration of the **Predict Size
    ML** model. First, you can make changes to the filter criteria in your **ML Queries**
    dataflow, and then edit and retrain the ML model, as per *Figure 10**.9*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.9 – You can iterate the existing ML model if a copy of the older
    version is not needed](img/Figure_10.2_B19500.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.9 – You can iterate the existing ML model if a copy of the older version
    is not needed
  prefs: []
  type: TYPE_NORMAL
- en: The second option would be to create a second version of the query for training
    and testing, and also create a new ML model. It’s up to you if you’d prefer to
    keep things simple with a single query and ML model, or if you’d rather build
    multiple versions for comparison. If you are keeping accurate notes and documentation,
    a single copy of each is probably the most efficient option.
  prefs: []
  type: TYPE_NORMAL
- en: After retraining the ML model (or building a new one for the second iteration),
    check the training report. You will see that the AUC only went up to 61%!
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Figure_10.3_B19500.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 10.10 – AUC only went up slightly for the second iteration of the Predict Size
    ML model
  prefs: []
  type: TYPE_NORMAL
- en: Despite trimming down the number of features and removing some rows with missing
    data, your results are still only slightly better than random guesses. Notice
    that the `Small` class has a precision of 81% (how many were flagged as `Small`
    that were `Small`) and a recall of 70% (total percentage of small values that
    were captured by the `Small` prediction).
  prefs: []
  type: TYPE_NORMAL
- en: 'At first, you will be hesitant to report your findings to your stakeholders
    since the results are not great. Before being disappointed, think about the following
    points:'
  prefs: []
  type: TYPE_NORMAL
- en: With an AUC of 61%, your ML model is still better than random guesses and the
    `Small` class had decent results.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `Small`, `Medium`, and `Large` classes might be chosen subjectively by the
    people filling out the report. Different people, in different places, referencing
    different sizes of planes, might judge these criteria using different contexts.
    If so, one person’s `Medium` might be another person’s `Large`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maybe a highly accurate classification ML model isn’t possible with the data
    you are using.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'After several attempts to modify the **Predict Size ML** model using Power
    BI, you will be unable to significantly improve the results. As a next step, you
    have a few viable options:'
  prefs: []
  type: TYPE_NORMAL
- en: Engage a data science team who can help you identify opportunities for improvement
    by selecting different features and using different filter criteria. Perhaps you
    are missing something that a data science professional with advanced tools can
    discover.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Circle back to your stakeholders, present the results, and ask them to define
    success. Is 81% precision and 70% recall for the `Small` class of value to them?
    If not, how do they define successful predictions?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Another option would be to convert this ML model into a binary prediction ML
    model. Since the `Small` class is getting decent results, you could flag `Small`
    as `1` and `Medium` or `Large` as a `0`. If this was acceptable to the stakeholders,
    maybe `Medium` and `Large` can be lumped together for better results.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Next, we’ll assess another model.
  prefs: []
  type: TYPE_NORMAL
- en: Assessing the Predict Height ML regression model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **Predict Height ML** model is a regression model that’s designed to predict
    the height at which an aircraft was impacted by wildlife. The regression ML model
    predicts a numeric value representing height in feet from the ground, at which
    an impact happened based on the features in the report. Features such as **Speed**,
    **Distance**, and **Phase of Flight** were listed as top predictors.
  prefs: []
  type: TYPE_NORMAL
- en: 80% of the variation in the testing results is explained by the model. Is 80%
    good? It depends on the use case and the requirements! If the variation (R squared)
    is 100%, then the ML model will give perfect predictions. 80% could indicate that
    the predictions are good but that independent and random variables might be 100%
    impossible. Or, maybe a higher value is possible and the data is either missing
    important features or measures are inaccurate.
  prefs: []
  type: TYPE_NORMAL
- en: In this use case, common sense dictates that explaining 100% of the variation
    would be impossible. You can go outside and watch a duck take off from water,
    ascend into the sky, and then descend. An aircraft could potentially strike it
    at any of those heights along the way!
  prefs: []
  type: TYPE_NORMAL
- en: 'You decide to iterate on the ML model to see if you can get better predictive
    results. Based on the features that were identified as top predictors, performing
    additional analysis using Power BI with the source data, and some trial and error,
    you can get slightly better results. The following changes were made to the filter
    criteria for the ML model:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Filter criteria** | **First** **ML model** | **New ML model iteration**
    | **Comments** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Date | >= 1/1/2010 | >= 1/1/2010 | Same. |'
  prefs: []
  type: TYPE_TB
- en: '| Aircraft Class Code | A | A | Same. |'
  prefs: []
  type: TYPE_TB
- en: '| Airport ID | Top 15 Airports | Top 15 Airports | Same. |'
  prefs: []
  type: TYPE_TB
- en: '| Height | Not null | Not null and Not 0 | Added Not 0 since there are too
    many possibilities while still on the ground. This limits the pool to flying animals.
    |'
  prefs: []
  type: TYPE_TB
- en: '| Number of Engines |  | = 2 | New filter to limit the data to the most common
    commercial planes. |'
  prefs: []
  type: TYPE_TB
- en: '| Aircraft Mass Code |  | Not null | New filter criteria to eliminate entries
    with missing data. |'
  prefs: []
  type: TYPE_TB
- en: '| Speed |  | Not null | Eliminates missing data. |'
  prefs: []
  type: TYPE_TB
- en: '| Distance |  | Not null | Eliminates missing data. |'
  prefs: []
  type: TYPE_TB
- en: '| Species |  | Top 35 animal species; removed “unknown” entries | Allows Species
    to be a feature. |'
  prefs: []
  type: TYPE_TB
- en: Figure 10.11 – Changes to filter criteria for the new Predict Height ML model
    iteration
  prefs: []
  type: TYPE_NORMAL
- en: As per the final row in *Figure 10**.7*, adding **Species** as a new feature
    to the data could be valuable for improving predictive results. Different flying
    animal species prefer cruising altitudes that can also vary by location and time
    of year.
  prefs: []
  type: TYPE_NORMAL
- en: To add `02 Top 40 Species for Height.M`. Paste it in as a new query named **Top**
    **40 Species**.
  prefs: []
  type: TYPE_NORMAL
- en: This query will create a list of the top 40 animals from the filtered data,
    with species containing “unknown” removed. A new query can then be added for your
    second iteration of the ML model. Alternatively, you can modify the existing `03
    Predict Height v2.M` query from GitHub and paste it into the **Predict Height**
    dataflow. The join is part of that M code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Your queries in the **ML Queries** dataflow should now look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.12 – Queries in the ML Queries dataflow](img/Figure_10.4_B19500.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.12 – Queries in the ML Queries dataflow
  prefs: []
  type: TYPE_NORMAL
- en: 'The changes to features that were used to predict height are summarized in
    the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Features in the Curated FAA Wildlife** **Strike query** | **Included in
    the first iteration of the Predict Height** **ML model?** | **Included in the
    second iteration of the Predict Height** **ML model?** | **Notes** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Time of Day | Yes |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| Airport ID | Yes | Yes | Filtered to Top 15 to avoid cardinality issues |'
  prefs: []
  type: TYPE_TB
- en: '| Aircraft Class Code |  |  | Filtered to A for both |'
  prefs: []
  type: TYPE_TB
- en: '| Aircraft Mass Code | Yes |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| Number of Engines | Yes |  | Filtered to 2 for the second iteration |'
  prefs: []
  type: TYPE_TB
- en: '| Phase of Flight | Yes | Yes |  |'
  prefs: []
  type: TYPE_TB
- en: '| Height |  |  | Removed 0 for the second iteration |'
  prefs: []
  type: TYPE_TB
- en: '| Speed | Yes | Yes |  |'
  prefs: []
  type: TYPE_TB
- en: '| Distance | Yes | Yes |  |'
  prefs: []
  type: TYPE_TB
- en: '| Sky | Yes |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| Precipitation | Yes |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| Cost of Repairs Adjusted | Yes | Yes |  |'
  prefs: []
  type: TYPE_TB
- en: '| Ingested Other | Yes |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| Indicated Damage | Yes | Yes |  |'
  prefs: []
  type: TYPE_TB
- en: '| Damage Level | Yes | Yes |  |'
  prefs: []
  type: TYPE_TB
- en: '| Struck Random | Yes |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| Damaged Random | Yes | Yes |  |'
  prefs: []
  type: TYPE_TB
- en: '| Struck Windshield | Yes | Yes |  |'
  prefs: []
  type: TYPE_TB
- en: '| Damaged Windshield | Yes |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| Struck Nose | Yes |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| Damaged Nose | Yes | Yes |  |'
  prefs: []
  type: TYPE_TB
- en: '| Struck Engine 1 | Yes |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| Damaged Engine 1 | Yes |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| Ingested Engine 1 | Yes |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| Struck Engine 2 | Yes |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| Damaged Engine 2 | Yes |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| Ingested Engine 2 | Yes |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| Struck Propeller | Yes |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| Damaged Propeller | Yes |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| Struck Wing or Rotor | Yes | Yes |  |'
  prefs: []
  type: TYPE_TB
- en: '| Damaged Wing or Rotor | Yes | Yes |  |'
  prefs: []
  type: TYPE_TB
- en: '| Struck Fuselage | Yes |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| Damaged Fuselage | Yes |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| Struck Landing Gear | Yes | Yes |  |'
  prefs: []
  type: TYPE_TB
- en: '| Damaged Landing Gear | Yes |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| Struck Tail | Yes |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| Damaged Tail | Yes | Yes |  |'
  prefs: []
  type: TYPE_TB
- en: '| Struck Lights | Yes |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| Damaged Lights | Yes |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| Struck Other | Yes |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| Damaged Other | Yes |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| Effect on Flight | Yes | Yes |  |'
  prefs: []
  type: TYPE_TB
- en: '| Species ID |  | Yes | Filtered to Top 35 to avoid cardinality issues |'
  prefs: []
  type: TYPE_TB
- en: '| Warned | Yes |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| Number Seen | Yes |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| Number Struck | Yes | Yes |  |'
  prefs: []
  type: TYPE_TB
- en: '| Size | Yes | Yes |  |'
  prefs: []
  type: TYPE_TB
- en: '| Number of Engines Struck | Yes |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| Percentage of Engines Struck | Yes |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| Number of Engines Ingested | Yes |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| Percentage of Engines Ingested | Yes |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| Number of Engines Damaged | Yes |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| Percentage of Engines Damaged | Yes |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| Engine Codes Info Key | Yes |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| Month | Yes | Yes |  |'
  prefs: []
  type: TYPE_TB
- en: '| **Total Features** | **50** | **20** |  |'
  prefs: []
  type: TYPE_TB
- en: '| **Total Rows** | **35,169** | **9,751** |  |'
  prefs: []
  type: TYPE_TB
- en: Figure 10.13 – Features for the first and second iterations of the Predict Height
    ML model
  prefs: []
  type: TYPE_NORMAL
- en: 'As with the **Predict Size ML** model, you can either retrain the existing
    ML model or build a new one. Again, retraining the existing ML model will prevent
    artifact sprawl in your workspace (especially if you retrain several times). After
    retraining with the criteria from *Figure 10**.11* and *Figure 10**.13*, you will
    get a slightly better AUC for your results – that is, 83% versus 80% for the first
    attempt:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.14 – Better AUC at 83% for the second iteration of Predict Height
    ML](img/Figure_10.5_B19500.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.14 – Better AUC at 83% for the second iteration of Predict Height
    ML
  prefs: []
  type: TYPE_NORMAL
- en: 'An 83% AUC is good, but can you get it over 90% or even higher? While looking
    at the **Residual error by Height** chart, click on the largest bubble, which
    also has the highest residual error, at the top left of the chart:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Figure_10.6_B19500.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 10.15 – High residual error and clustering of reports at 100- and 500-foot increments
  prefs: []
  type: TYPE_NORMAL
- en: As per *Figure 10**.15*, there is a 136% residual error at heights between 0
    and 2,000 feet. Also, as in [*Chapter 9*](B19500_09.xhtml#_idTextAnchor125), notice
    that reports are still appearing to cluster at 100-foot increments, and even more
    strongly at 500-foot increments. Have the heights been rounded to 100- or 500-foot
    increments on the report? Without knowing more about the data collection process,
    you cannot answer this question.
  prefs: []
  type: TYPE_NORMAL
- en: 'Upon realizing some improvements you can make when trimming down the features
    and optimizing the filter criteria for your training and testing data, you have
    a few good options moving forward:'
  prefs: []
  type: TYPE_NORMAL
- en: If you can engage a data science team, your testing has proven that predicting
    the height of impact is possible within a range of expectations. A data science
    team could probably use advanced tools and techniques to improve upon the existing
    model.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can report to your stakeholders that predicting height is a realistic goal,
    but be sure to describe the residual error at different height ranges.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, let’s wrap this chapter up.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you reviewed each of the ML models that you have built. You
    decided to seek guidance on the next steps for the **Predict Damage ML** model
    from either a data science team or your stakeholders. For the **Predict Size ML**
    model, you found only slight predictive value and will need to seek guidance for
    your next course of action. The **Predict Height ML** model improved when you
    added new filter criteria and whittled down the feature selection, and the results
    are promising. At this point, you must either work with a data science team or
    circle back with your stakeholders for guidance on future plans for the model.
  prefs: []
  type: TYPE_NORMAL
- en: In [*Chapter 11*](B19500_11.xhtml#_idTextAnchor152), you will bring in newly
    added data from the FAA Wildlife Strike database and run it through your **Predict
    Damage ML** model to test the results. In doing so, you will learn how to score
    new data with your ML model whenever data refreshes in Power BI. You will also
    explore opportunities to find new value by adding Microsoft OpenAI capabilities
    to the solution.
  prefs: []
  type: TYPE_NORMAL
