["```py\n    > #call up and explore the data\n\n    > data(anscombe)\n\n    > attach(anscombe)\n\n    > anscombe\n       x1 x2 x3 x4    y1   y2    y3    y4\n    1  10 10 10  8  8.04 9.14  7.46  6.58\n    2   8  8  8  8  6.95 8.14  6.77  5.76\n    3  13 13 13  8  7.58 8.74 12.74  7.71\n    4   9  9  9  8  8.81 8.77  7.11  8.84\n    5  11 11 11  8  8.33 9.26  7.81  8.47\n    6  14 14 14  8  9.96 8.10  8.84  7.04\n    7   6  6  6  8  7.24 6.13  6.08  5.25\n    8   4  4  4 19  4.26 3.10  5.39 12.50\n    9  12 12 12  8 10.84 9.13  8.15  5.56\n    10  7  7  7  8  4.82 7.26  6.42  7.91\n    11  5  5  5  8  5.68 4.74  5.73  6.89\n\n```", "```py\n    > cor(x1, y1) #correlation of x1 and y1\n    [1] 0.8164205\n\n    > cor(x2, y1) #correlation of x2 and y2\n\n    [1] 0.8164205\n\n```", "```py\n    > par(mfrow = c(2,2)) #create a 2x2 grid for \n       plotting\n\n    > plot(x1, y1, main = \"Plot 1\")\n\n    > plot(x2, y2, main = \"Plot 2\")\n\n    > plot(x3, y3, main = \"Plot 3\")\n\n    > plot(x4, y4, main = \"Plot 4\")\n\n```", "```py\n    > install.packages(\"alr3\")\n    > library(alr3)\n    > data(snake)\n    > dim(snake)\n    [1] 17  2\n    > head(snake)\n         X    Y\n    1 23.1 10.5\n    2 32.8 16.7\n    3 31.8 18.2\n    4 32.0 17.0\n    5 30.4 16.3\n    6 24.0 10.5\n\n```", "```py\n    > names(snake) <- c(\"content\", \"yield\")\n    > attach(snake) # attach data with new names\n    > head(snake)\n\n      content yield\n    1    23.1  10.5\n    2    32.8  16.7\n    3    31.8  18.2\n    4    32.0  17.0\n    5    30.4  16.3\n    6    24.0  10.5\n\n    > plot(content, yield, xlab = \"water content of \n        snow\", ylab = \"water yield\")\n\n```", "```py\n    > yield.fit <- lm(yield ~ content)\n\n    > summary(yield.fit)\n\n    Call:\n    lm(formula = yield ~ content)\n\n    Residuals:\n            Min      1Q  Median      3Q     Max\n    -2.1793 -1.5149 -0.3624  1.6276  3.1973\n\n    Coefficients: Estimate Std. Error t value Pr(>|t|) \n    (Intercept)  0.72538    1.54882   0.468    0.646 \n    content      0.49808    0.04952  10.058 4.63e-08 \n    ***\n    ---\n    Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 \n      '.' 0.1 ' ' 1\n\n    Residual standard error: 1.743 on 15 degrees of \n      freedom\n    Multiple R-squared:  0.8709,    Adjusted R-squared:  \n       0.8623\n    F-statistic: 101.2 on 1 and 15 DF,  p-value: \n       4.632e-08\n\n```", "```py\n    > plot(content, yield)\n\n    > abline(yield.fit, lwd=3, col=\"red\")\n\n```", "```py\n    > par(mfrow = c(2,2))\n\n    > plot(yield.fit)\n\n```", "```py\n    > qqPlot(yield.fit)\n\n```", "```py\n    > data(water)\n\n    > str(water)\n    'data.frame':   43 obs. of  8 variables:\n    $ Year   : int  1948 1949 1950 1951 1952 1953 1954 \n      1955 1956 1957 ...\n    $ APMAM  : num  9.13 5.28 4.2 4.6 7.15 9.7 5.02 6.7 \n       10.5 9.1 ...\n    $ APSAB  : num  3.58 4.82 3.77 4.46 4.99 5.65 1.45 \n       7.44 5.85 6.13 ...\n    $ APSLAKE: num  3.91 5.2 3.67 3.93 4.88 4.91 1.77 \n       6.51 3.38 4.08 ...\n    $ OPBPC  : num  4.1 7.55 9.52 11.14 16.34 ...\n    $ OPRC   : num  7.43 11.11 12.2 15.15 20.05 ...\n    $ OPSLAKE: num  6.47 10.26 11.35 11.13 22.81 ...\n    $ BSAAM  : int  54235 67567 66161 68094 107080 \n       67594 65356 67909 92715 70024 ...\n\n```", "```py\n    > socal.water <- water[ ,-1] #new dataframe with \n      the deletion of \n      column 1\n\n    > head(socal.water)\n      APMAM APSAB APSLAKE OPBPC  OPRC OPSLAKE  BSAAM\n    1  9.13  3.58    3.91  4.10  7.43    6.47  54235\n    2  5.28  4.82    5.20  7.55 11.11   10.26  67567\n    3  4.20  3.77    3.67  9.52 12.20   11.35  66161\n    4  4.60  4.46    3.93 11.14 15.15   11.13  68094\n    5  7.15  4.99    4.88 16.34 20.05   22.81 107080\n    6  9.70  5.65    4.91  8.88  8.15    7.41  67594\n\n```", "```py\n    > library(corrplot)\n\n    > water.cor <- cor(socal.water)\n\n    > water.cor\n  APMAM      APSAB    APSLAKE      OPBPC \n    APMAM   1.0000000 0.82768637 0.81607595 0.12238567 \n    APSAB   0.8276864 1.00000000 0.90030474 0.03954211 \n    APSLAKE 0.8160760 0.90030474 1.00000000 0.09344773 \n    OPBPC   0.1223857 0.03954211 0.09344773 1.00000000 \n    OPRC    0.1544155 0.10563959 0.10638359 0.86470733 \n    OPSLAKE 0.1075421 0.02961175 0.10058669 0.94334741 \n    BSAAM   0.2385695 0.18329499 0.24934094 0.88574778 \n             OPRC    OPSLAKE     BSAAM\n    APMAM   0.1544155 0.10754212 0.2385695\n    APSAB   0.1056396 0.02961175 0.1832950\n    APSLAKE 0.1063836 0.10058669 0.2493409\n    OPBPC   0.8647073 0.94334741 0.8857478\n    OPRC    1.0000000 0.91914467 0.9196270\n    OPSLAKE 0.9191447 1.00000000 0.9384360\n    BSAAM   0.9196270 0.93843604 1.0000000\n\n```", "```py\n    > corrplot(water.cor, method = \"ellipse\")\n\n```", "```py\n > pairs(~ ., data = socal.water)\n\n```", "```py\n    > library(leaps)\n\n    > fit <- lm(BSAAM ~ ., data = socal.water)\n\n    > summary(fit)\n\n    Call:\n    lm(formula = BSAAM ~ ., data = socal.water)\n\n    Residuals:\n       Min     1Q Median     3Q    Max\n    -12690  -4936  -1424   4173  18542\n\n    Coefficients:\n Estimate Std. Error t value Pr(>|t|) \n    (Intercept) 15944.67    4099.80   3.889 0.000416 \n      ***\n    APMAM         -12.77     708.89  -0.018 0.985725 \n    APSAB        -664.41    1522.89  -0.436 0.665237 \n    APSLAKE      2270.68    1341.29   1.693 0.099112 . \n    OPBPC          69.70     461.69   0.151 0.880839 \n    OPRC         1916.45     641.36   2.988 0.005031 **\n    OPSLAKE      2211.58     752.69   2.938 0.005729 **\n    ---\n    Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 \n      '.' 0.1 '' 1\n    Residual standard error: 7557 on 36 degrees of \n      freedom\n    Multiple R-squared:  0.9248,    Adjusted R-squared:  \n      0.9123\n    F-statistic: 73.82 on 6 and 36 DF,  p-value: < \n      2.2e-16\n\n```", "```py\n    > sub.fit <- regsubsets(BSAAM ~ ., data = \n       socal.water)\n\n```", "```py\n    > best.summary <- summary(sub.fit)\n\n    > names(best.summary)\n    [1] \"which\"  \"rsq\"    \"rss\"    \"adjr2\"  \"cp\"     \n       \"bic\"    \"outmat\" \"obj\"\n\n```", "```py\n    > which.min(best.summary$rss)\n    [1] 6\n\n```", "```py\n    > par(mfrow = c(1,2))\n\n    > plot(best.summary$cp, xlab = \"number of \n       features\", ylab = \"cp\")\n\n    > plot(sub.fit, scale = \"Cp\")\n\n```", "```py\n    > which.min(best.summary$bic)\n    [1] 3\n\n    > which.max(best.summary$adjr2)\n    [1] 3\n\n```", "```py\n    > best.fit <- lm(BSAAM ~ APSLAKE + OPRC + OPSLAKE, \n      data = \n      socal.water)\n\n    > summary(best.fit)\n    Call:\n    lm(formula = BSAAM ~ APSLAKE + OPRC + OPSLAKE)\n\n    Residuals:\n       Min     1Q Median     3Q    Max\n    -12964  -5140  -1252   4446  18649\n\n    Coefficients:\n    Estimate Std. Error t value Pr(>|t|) \n    (Intercept)  15424.6     3638.4   4.239 0.000133 \n    ***\n    APSLAKE       1712.5      500.5   3.421 0.001475 **\n    OPRC          1797.5      567.8   3.166 0.002998 **\n    OPSLAKE       2389.8      447.1   5.346 4.19e-06 \n    ***\n    ---\n    Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 \n      '.' 0.1 ' ' 1\n\n    Residual standard error: 7284 on 39 degrees of \n      freedom\n    Multiple R-squared:  0.9244,    Adjusted R-squared:  \n      0.9185\n    F-statistic: 158.9 on 3 and 39 DF,  p-value: < \n      2.2e-16\n\n```", "```py\n    > par(mfrow = c(2,2))\n\n    > plot(best.fit)\n\n```", "```py\n    > vif(best.fit)\n\n    APSLAKE     OPRC  OPSLAKE\n    1.011499 6.452569 6.444748\n\n```", "```py\n    > plot(socal.water$OPRC, socal.water$OPSLAKE, xlab \n      = \"OPRC\", ylab = \"OPSLAKE\")\n\n```", "```py\n    > best.summary$adjr2 #adjusted r-squared values\n    [1] 0.8777515 0.9001619 0.9185369 0.9168706 \n      0.9146772 0.9123079\n\n```", "```py\n    > fit.2 <- lm(BSAAM ~ APSLAKE+OPSLAKE, data = \n      socal.water)\n\n    > summary(fit.2)\n\n    Call:\n    lm(formula = BSAAM ~ APSLAKE + OPSLAKE)\n\n    Residuals:\n              Min       1Q   Median       3Q      Max\n    -13335.8  -5893.2   -171.8   4219.5  19500.2\n\n    Coefficients:\n Estimate Std. Error t value Pr(>|t|) \n    (Intercept)  19144.9     3812.0   5.022  1.1e-05 \n    ***\n    APSLAKE       1768.8      553.7   3.194  0.00273 **\n    OPSLAKE       3689.5      196.0  18.829  < 2e-16  \n    ***\n    ---\n    Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 \n      '.' 0.1 ' ' 1\n\n    Residual standard error: 8063 on 40 degrees of \n      freedom\n    Multiple R-squared:  0.9049,    Adjusted R-squared:  \n      0.9002\n    F-statistic: 190.3 on 2 and 40 DF,  p-value: < \n      2.2e-16\n\n    > par(mfrow=c(2,2))\n\n    > plot(fit.2)\n\n```", "```py\n    > vif(fit.2)\n\n     APSLAKE  OPSLAKE\n    1.010221 1.010221\n\n```", "```py\n    > library(lmtest)\n\n    > bptest(fit.2)\n\n    studentized Breusch-Pagan test\n\n    data:  fit.2\n    BP = 0.0046, df = 2, p-value = 0.9977\n\n```", "```py\n    > plot(fit.2$fitted.values, socal.water$BSAAM, xlab \n     = \"predicted\", ylab = \"actual\", main = \"Predicted \n       vs.Actual\")\n\n```", "```py\n    > socal.water[\"Actual\"] = water$BSAAM #create the \n       vector Actual\n\n    > socal.water$Forecast = predict(fit.2) #populate \n       Forecast with the predicted values\n\n```", "```py\n    > library(ggplot2)\n\n    > ggplot(socal.water, aes(x = Forecast, y = \n       Actual)) + geom_point() + geom_smooth(method = \n          lm) + labs(title = \"Forecast versus Actuals\")\n\n```", "```py\n    > library(MPV) \n\n    > PRESS(best.fit) \n    [1] 2426757258 \n\n    > PRESS(fit.2) \n    [1] 2992801411 \n\n```", "```py\n    > PRESS.best = sum((resid(best.fit)/(1 - \n       hatvalues(best.fit)))^2) \n\n    > PRESS.fit.2 = sum((resid(fit.2)/(1  -\n       hatvalues(fit.2)))^2)\n\n    > PRESS.best \n    [1] 2426757258 \n\n    > PRESS.fit.2 \n    [1] 2992801411 \n\n```", "```py\n    > library(ISLR)\n\n    > data(Carseats)\n\n    > str(Carseats)\n\n    'data.frame':   400 obs. of  11 variables:\n    $ Sales      : num  9.5 11.22 10.06 7.4 4.15 ...\n    $ CompPrice  : num  138 111 113 117 141 124 115 136 \n       132 132 ...\n    $ Income     : num  73 48 35 100 64 113 105 81 110 \n       113 ...\n    $ Advertising: num  11 16 10 4 3 13 0 15 0 0 ...\n    $ Population : num  276 260 269 466 340 501 45 425 \n       108 131 ...\n    $ Price      : num  120 83 80 97 128 72 108 120 124        \n       124 ...\n    $ ShelveLoc  : Factor w/ 3 levels \n       \"Bad\",\"Good\",\"Medium\": 1 2 3 3 1 \n      1 3 2 3 3 ...\n    $ Age        : num  42 65 59 55 38 78 71 67 76 76 \n      ...\n    $ Education  : num  17 10 12 14 13 16 15 10 10 17 \n      ...\n    $ Urban      : Factor w/ 2 levels \"No\",\"Yes\": 2 2 2 \n      2 2 1 2 2 1 1 \n      ...\n    $ US         : Factor w/ 2 levels \"No\",\"Yes\": 2 2 2 \n      2 1 2 1 2 1 2 \n      ..\n\n```", "```py\n    > sales.fit <- lm(Sales ~ Advertising + ShelveLoc, \n       data = Carseats)\n\n    > summary(sales.fit)\n\n    Call:\n    lm(formula = Sales ~ Advertising + ShelveLoc, data = \n    Carseats)\n\n    Residuals:\n        Min      1Q  Median      3Q     Max\n    -6.6480 -1.6198 -0.0476  1.5308  6.4098\n\n    Coefficients:\n Estimate Std. Error t value Pr(>|t|) \n    (Intercept)      4.89662    0.25207  19.426  < 2e-\n      16 ***\n    Advertising      0.10071    0.01692   5.951 5.88e-\n      09 ***\n    ShelveLocGood    4.57686    0.33479  13.671  < 2e-\n      16 ***\n    ShelveLocMedium  1.75142    0.27475   6.375 5.11e-\n      10 ***\n    ---\n    Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 \n      '.' 0.1 ' ' 1\n\n    Residual standard error: 2.244 on 396 degrees of \n      freedom\n    Multiple R-squared:  0.3733,    Adjusted R-squared:  \n      0.3685\n    F-statistic: 78.62 on 3 and 396 DF,  p-value: < \n      2.2e-16\n\n```", "```py\n    > contrasts(Carseats$ShelveLoc)\n\n            Good Medium\n    Bad       0      0\n    Good      1      0\n    Medium    0      1\n\n```", "```py\n    > library(MASS)\n\n    > data(Boston)\n\n    > str(Boston)\n\n    'data.frame':   506 obs. of  14 variables:\n    $ crim   : num  0.00632 0.02731 0.02729 0.03237 \n       0.06905 ...\n    $ zn     : num  18 0 0 0 0 0 12.5 12.5 12.5 12.5 \n       ...\n    $ indus  : num  2.31 7.07 7.07 2.18 2.18 2.18 7.87 \n       7.87 7.87 7.87 \n      ...\n    $ chas   : int  0 0 0 0 0 0 0 0 0 0 ...\n    $ nox    : num  0.538 0.469 0.469 0.458 0.458 0.458 \n      0.524 0.524 \n      0.524 0.524 ...\n    $ rm     : num  6.58 6.42 7.18 7 7.15 ...\n    $ age    : num  65.2 78.9 61.1 45.8 54.2 58.7 66.6 \n      96.1 100 85.9 \n      ...\n    $ dis    : num  4.09 4.97 4.97 6.06 6.06 ...\n    $ rad    : int  1 2 2 3 3 3 5 5 5 5 ...\n    $ tax    : num  296 242 242 222 222 222 311 311 311 \n      311 ...\n    $ ptratio: num  15.3 17.8 17.8 18.7 18.7 18.7 15.2 \n      15.2 15.2 15.2 \n      ...\n    $ black  : num  397 397 393 395 397 ...\n    $ lstat  : num  4.98 9.14 4.03 2.94 5.33 ...\n    $ medv   : num  24 21.6 34.7 33.4 36.2 28.7 22.9 \n      27.1 16.5 18.9 ...\n\n```", "```py\n    > value.fit <- lm(medv ~ lstat * age, data = \n      Boston)\n\n    > summary(value.fit)\n\n    Call:\n    lm(formula = medv ~ lstat * age, data = Boston)\n\n    Residuals:\n        Min      1Q  Median      3Q     Max\n    -15.806  -4.045  -1.333   2.085  27.552\n\n    Coefficients:\n Estimate Std. Error t value Pr(>|t|) \n    (Intercept) 36.0885359  1.4698355  24.553  < 2e-16 \n      ***\n    lstat       -1.3921168  0.1674555  -8.313 8.78e-16 \n      ***\n    age         -0.0007209  0.0198792  -0.036   0.9711 \n    lstat:age    0.0041560  0.0018518   2.244   0.0252 \n      * \n    ---\n    Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 \n      '.' 0.1 ' ' 1\n\n    Residual standard error: 6.149 on 502 degrees of \n      freedom\n    Multiple R-squared:  0.5557,    Adjusted R-squared:  \n      0.5531\n    F-statistic: 209.3 on 3 and 502 DF,  p-value: < \n      2.2e-16\n\n```"]