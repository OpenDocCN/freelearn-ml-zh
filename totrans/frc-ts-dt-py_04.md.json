["```py\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom prophet import Prophet\ndf = pd.read_csv('AirPassengers.csv')\ndf['Month'] = pd.to_datetime(df['Month'])\ndf.columns = ['ds', 'y']\n```", "```py\ndf.head()\n```", "```py\nmodel = Prophet(seasonality_mode='multiplicative')\nmodel.fit(df)\nfuture = model.make_future_dataframe(periods=365 * 5)\nforecast = model.predict(future)\nfig = model.plot(forecast)\nplt.show()\n```", "```py\nmodel = Prophet(seasonality_mode='multiplicative')\nmodel.fit(df)\nfuture = model.make_future_dataframe(periods=12 * 5,\n                                     freq='MS')\nforecast = model.predict(future)\nfig = model.plot(forecast)\nplt.show()\n```", "```py\ndata = pd.read_csv('divvy_hourly.csv')\ndf = pd.DataFrame({'ds': pd.to_datetime(data['date']),\n                   'y': data['rides']})\n```", "```py\nmodel = Prophet(seasonality_mode='multiplicative')\nmodel.fit(df)\nfuture = model.make_future_dataframe(periods=365 * 24,\n                                     freq='h')\n```", "```py\nforecast = model.predict(future)\nfig = model.plot(forecast)\nplt.show()\nfig2 = model.plot_components(forecast)\nplt.show()\n```", "```py\ndf = df[(df['ds'].dt.hour >= 8) & \\\n        (df['ds'].dt.hour < 18)]\n```", "```py\nmodel = Prophet(seasonality_mode='multiplicative')\nmodel.fit(df)\nfuture = model.make_future_dataframe(periods=365 * 24,\n                                     freq='h')\nforecast = model.predict(future)\nfig = model.plot(forecast)\nplt.show()\n```", "```py\nfig = model.plot(forecast)\nplt.xlim(pd.to_datetime(['2018-08-01', '2018-08-04']))\nplt.ylim(-2000, 4000)\nplt.show()\n```", "```py\nfuture2 = future[(future['ds'].dt.hour >= 8) &\n                 (future['ds'].dt.hour < 18)]\nforecast2 = model.predict(future2)\nfig = model.plot(forecast2)\nplt.show()\n```", "```py\nfig = model.plot(forecast2, figsize=(10, 4))\nplt.xlim(pd.to_datetime(['2018-08-01', '2018-08-04']))\nplt.ylim(-2000, 4000)\nplt.show()\n```", "```py\nfrom prophet.plot import plot_seasonality\nplot_seasonality(model, 'daily', figsize=(10, 3))\nplt.show()\n```"]