["```py\n    import numpy as np\n    import pandas as pd\n    import matplotlib.pyplot as plt\n    import seaborn as sns\n    from matplotlib import rcParams\n    rcParams['axes.spines.top'] = False\n    rcParams['axes.spines.right'] = False\n    df = pd.read_csv('data/iris.csv')\n    df.head()\n    ```", "```py\n    df.isnull().sum()\n    ```", "```py\n    ax = df.groupby('species').count().plot(kind='bar', figsize=(10, 6), fontsize=13, color='#4f4f4f')\n    ax.set_title('Iris Dataset target variable distribution', size=20, pad=30)\n    ax.set_ylabel('Count', fontsize=14)\n    ax.set_xlabel('Species', fontsize=14)\n    ax.get_legend().remove()\n    ```", "```py\n    plt.figure(figsize=(12, 9))\n    plt.title('Correlation matrix', size=20)\n    sns.heatmap(df.corr(), annot=True, cmap='Blues');\n    ```", "```py\n    from sklearn.model_selection import train_test_split\n    X = df.drop('species', axis=1)\n    y = df['species']\n    X_train, X_test, y_train, y_test = train_test_split(\n        X, y, test_size=0.25, random_state=3\n    )\n    y_train.shape, y_test.shape\n    ```", "```py\n    from sklearn.linear_model import LogisticRegression\n    from sklearn.metrics import confusion_matrix\n    lm = LogisticRegression(random_state=42)\n    lm.fit(X_train, y_train)\n    lm_preds = lm.predict(X_test)\n    print(confusion_matrix(y_test, lm_preds))\n    ```", "```py\n    from sklearn.metrics import accuracy_score\n    print(accuracy_score(y_test, lm_preds))\n    ```", "```py\n    from tpot import TPOTClassifier\n    pipeline_optimizer = TPOTClassifier(\n        scoring='accuracy',\n        max_time_mins=10,\n        random_state=42,\n        verbosity=2\n    )\n    pipeline_optimizer.fit(X_train, y_train)\n    ```", "```py\n    tpot_preds = pipeline_optimizer.predict(X_test)\n    accuracy_score(y_test, tpot_preds)\n    ```", "```py\n    pipeline_optimizer.fitted_pipeline_\n    ```", "```py\n    pipeline_optimizer.export('iris_pipeline.py')\n    ```", "```py\n    import numpy as np\n    import pandas as pd\n    import matplotlib.pyplot as plt\n    from matplotlib import rcParams\n    rcParams['axes.spines.top'] = False\n    rcParams['axes.spines.right'] = False\n    df = pd.read_csv('data/titanic.csv')\n    df.head()\n    ```", "```py\n    df.isnull().sum()\n    ```", "```py\n    def make_bar_chart(column, title, ylabel, xlabel, y_offset=10, x_offset=0.2):\n        ax = df.groupby(column).count()[['PassengerId']].plot(\n            kind='bar', figsize=(10, 6), fontsize=13, color='#4f4f4f'\n        )\n        ax.set_title(title, size=20, pad=30)\n        ax.set_ylabel(ylabel, fontsize=14)\n        ax.set_xlabel(xlabel, fontsize=14)\n        ax.get_legend().remove()\n\n        for i in ax.patches:\n            ax.text(i.get_x() + x_offset, i.get_height() + y_offset, i.get_height(), fontsize=20)\n        return ax\n    ```", "```py\n    make_bar_chart(\n        column='Survived',\n        title='Distribution of the Survived variable',\n        ylabel='Count',\n        xlabel='Has the passenger survived? (0 = No, 1 = Yes)'\n    );\n    ```", "```py\n    make_bar_chart(\n        column='Pclass',\n        title='Distirbution of the Passenger Class variable',\n        ylabel='Count',\n        xlabel='Passenger Class (smaller is better)',\n        x_offset=0.15\n    );\n    ```", "```py\n    make_bar_chart(\n        column='Sex',\n        title='Distirbution of the Sex variable',\n        ylabel='Count',\n        xlabel='Gender'\n    );\n    ```", "```py\n    plt.figure(figsize=(12, 7))\n    plt.title('Fare cost distribution', size=20)\n    plt.xlabel('Cost', size=14)\n    plt.ylabel('Count', size=14)\n    plt.hist(df['Fare'], bins=15, color='#4f4f4f', ec='#040404');\n    ```", "```py\n    df['Title'] = df['Name'].apply(lambda x: x.split(',')[1].strip().split(' ')[0])\n    make_bar_chart(\n        column='Title',\n        title='Distirbution of the Passenger Title variable',\n        ylabel='Count',\n        xlabel='Title',\n        x_offset=-0.2\n    );\n    ```", "```py\n    df.drop(['Ticket', 'PassengerId'], axis=1, inplace=True)\n    gender_mapper = {'male': 0, 'female': 1}\n    df['Sex'].replace(gender_mapper, inplace=True)\n    df['Title'] = [0 if x in ['Mr.', 'Miss.', 'Mrs.'] else 1 for x in df['Title']]\n    df = df.rename(columns={'Title': 'Title_Unusual'})\n    df.drop('Name', axis=1, inplace=True)\n    df['Cabin_Known'] = [0 if str(x) == 'nan' else 1 for x in df['Cabin']]\n    df.drop('Cabin', axis=1, inplace=True)\n    emb_dummies = pd.get_dummies(df['Embarked'], drop_first=True, prefix='Embarked')\n    df = pd.concat([df, emb_dummies], axis=1)\n    df.drop('Embarked', axis=1, inplace=True)\n    df['Age'] = df['Age'].fillna(int(df['Age'].mean()))\n    df.head()\n    ```", "```py\n    from sklearn.model_selection import train_test_split\n    X = df.drop('Survived', axis=1)\n    y = df['Survived']\n    X_train, X_test, y_train, y_test = train_test_split(\n        X, y, test_size=0.25, random_state=42\n    )\n    y_train.shape, y_test.shape\n    ```", "```py\n    from sklearn.linear_model import LogisticRegression\n    from sklearn.metrics import confusion_matrix\n    lm = LogisticRegression(random_state=42)\n    lm.fit(X_train, y_train)\n    lm_preds = lm.predict(X_test)\n    print(confusion_matrix(y_test, lm_preds))\n    ```", "```py\n    from sklearn.metrics import f1_score\n    print(f1_score(y_test, lm_preds))\n    ```", "```py\n    from tpot import TPOTClassifier\n    pipeline_optimizer = TPOTClassifier(\n        scoring='f1',\n        max_time_mins=10,\n        random_state=42,\n        verbosity=2\n    )\n    pipeline_optimizer.fit(X_train, y_train)\n    ```", "```py\n    pipeline_optimizer.score(X_test, y_test)\n    ```", "```py\n    tpot_preds = pipeline_optimizer.predict(X_test)\n    from sklearn.metrics import accuracy_score\n    print(f'Baseline model accuracy: {accuracy_score(y_test, lm_preds)}')\n    print(f'TPOT model accuracy: {accuracy_score(y_test, tpot_preds)}')\n    ```", "```py\n    pipeline_optimizer.fitted_pipeline_\n    ```", "```py\n    pipeline_optimizer.export('titanic_pipeline.py')\n    ```"]