["```py\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom prophet import Prophet\nfrom prophet.plot import add_changepoints_to_plot\n```", "```py\ndf = pd.read_csv('divvy_daily.csv')\ndf = df[['date', 'rides']]\ndf['date'] = pd.to_datetime(df['date'])\ndf.columns = ['ds', 'y']\n```", "```py\nmodel = Prophet(growth='linear',\n                seasonality_mode='multiplicative',\n                yearly_seasonality=4)\n```", "```py\nmodel.fit(df)\nfuture = model.make_future_dataframe(periods=365)\nforecast = model.predict(future)\nfig = model.plot(forecast)\nadd_changepoints_to_plot(fig.gca(), model, forecast,\n                         cp_linestyle='')\nplt.show()\n```", "```py\nimport numpy as np\nimport random\nrandom.seed(42)  # set random seed for repeatability\n```", "```py\nx = pd.to_datetime(pd.date_range('1995-01', '2004-02',\n                                 freq='M')\\\n                   .strftime(\"%Y-%b\").tolist())\ny = [1 / (1 + np.e ** (-.03 * (val - 50))) for val in \\\n     range(len(x))]  # create logistic curve\n# add sinusoidal variation\ny = [y[idx] + y[idx] * .01 * np.sin((idx - 2) * (360 / 12)\\\n     * (np.pi / 180)) for idx in range(len(y))]\n# add noise\ny = [val + random.uniform(-.01, .01) for val in y]\ny = [int(500 * val) for val in y]  # scale up\n```", "```py\nplt.figure(figsize=(10, 6))\nplt.plot(x, y)\nplt.show()\n```", "```py\ndf = pd.DataFrame({'ds': pd.to_datetime(x), 'y': y})\n```", "```py\nmodel = Prophet(growth='linear',\n                yearly_seasonality=3,\n                seasonality_mode='multiplicative')\nmodel.fit(df)\nfuture = model.make_future_dataframe(periods=12 * 10,\n                                     freq='M')\nforecast = model.predict(future)\nfig = model.plot(forecast)\nadd_changepoints_to_plot(fig.gca(), model, forecast,\n                         cp_linestyle='')\nplt.show()\n```", "```py\ndf['cap'] = 500\n```", "```py\nmodel = Prophet(growth='logistic',\n                yearly_seasonality=3,\n                seasonality_mode='multiplicative')\nmodel.fit(df)\nfuture = model.make_future_dataframe(periods=12 * 10,\n                                     freq='M')\n```", "```py\nfuture['cap'] = 500\n```", "```py\nforecast = model.predict(future)\nfig = model.plot(forecast)\nadd_changepoints_to_plot(fig.gca(), model, forecast,\n                         cp_linestyle='')\nplt.show()\n```", "```py\ndef set_cap(row, df):\n    if row.year < 2007:\n        return 500\n    else:\n        pop_2007 = 500\n        idx_2007 = df[df['ds'].dt.year == 2007].index[0]\n        idx_date = df[df['ds'] == row].index[0]\n        return pop_2007 + 2 * (idx_date - idx_2007)\n```", "```py\ndf['cap'] = df['ds'].apply(set_cap, args=(df,))\n```", "```py\nmodel = Prophet(growth='logistic',\n                yearly_seasonality=3,\n                seasonality_mode='multiplicative')\nmodel.fit(df)\nfuture = model.make_future_dataframe(periods=12 * 10,\n                                     freq='M')\nfuture['cap'] = future['ds'].apply(set_cap, args=(future,))\nforecast = model.predict(future)\nfig = model.plot(forecast)\nadd_changepoints_to_plot(fig.gca(), model, forecast,\n                          cp_linestyle='')\nplt.show()\n```", "```py\nx = pd.to_datetime(pd.date_range('1995-01','2035-02',\n                                 freq='M')\\\n                   .strftime(\"%Y-%b\").tolist())\ny = [1 - 1 / (1 + np.e ** (-.03 * (val - 50))) for val in \\\n     range(len(x))]  # create logistic curve\n# add sinusoidal variation\ny = [y[idx] + y[idx] * .05 * np.sin((idx - 2) * (360 / 12)\\\n     * (np.pi / 180)) for idx in range(len(y))]\n# add noise\ny = [val + 5 * val * random.uniform(-.01, .01) for val \\\n     in y]\ny = [int(500 * val) for val in y]  # scale up\nplt.figure(figsize=(10, 6))\nplt.plot(x, y)\nplt.show()\n```", "```py\ndf2 = pd.DataFrame({'ds': pd.to_datetime(x), 'y': y})\ndf2 = df2[df2['ds'].dt.year < 2006]\ndf2['cap'] = 500\ndf2['floor'] = 0\n```", "```py\nmodel = Prophet(growth='logistic',\n                yearly_seasonality=3,\n                seasonality_mode='multiplicative')\nmodel.fit(df2)\nfuture = model.make_future_dataframe(periods=12 * 10,\n                                     freq='M')\nfuture['cap'] = 500\nfuture['floor'] = 0\nforecast = model.predict(future)\nfig = model.plot(forecast)\nadd_changepoints_to_plot(fig.gca(), model, forecast,\n                         cp_linestyle='')\nplt.show()\n```", "```py\nx = pd.to_datetime(pd.date_range('1995-01','2096-02',\n                                 freq='M')\\\n                   .strftime(\"%Y-%b\").tolist())\n# create logistic curve\ny = [1 / (1 + np.e ** (-.03 * (val - 50))) for val in \\\n     range(len(x))]\n # add sinusoidal variation\ny = [y[idx] + y[idx] * .01 * np.sin((idx - 2) * (360 / 12)\\\n     * (np.pi / 180)) for idx in range(len(y))]\n# add noise\ny = [val + 1 * val * random.uniform(-.01, .01) for val \\\n     in y]\ny = [int(500 * val) for val in y]  # scale up\nplt.figure(figsize=(10, 6))\nplt.plot(x, y)\nplt.show()\n```", "```py\ndf = pd.DataFrame({'ds': pd.to_datetime(x), 'y': y})\ndf = df[df['ds'].dt.year > 2085]\nplt.figure(figsize=(10, 6))\nplt.plot(df['ds'], df['y'])\nplt.show()\n```", "```py\nmodel = Prophet(growth='linear',\n                yearly_seasonality=3,\n                seasonality_mode='multiplicative')\nmodel.fit(df)\nfuture = model.make_future_dataframe(periods=12 * 10,\n                                     freq='M')\nforecast = model.predict(future)\nfig = model.plot(forecast)\nadd_changepoints_to_plot(fig.gca(), model, forecast,\n                         cp_linestyle='')\nplt.show()\n```", "```py\nmodel = Prophet(growth='flat',\n                yearly_seasonality=3)\nmodel.fit(df)\nfuture = model.make_future_dataframe(periods=12 * 10,\n                                     freq='M')\nforecast = model.predict(future)\nfig = model.plot(forecast)\nadd_changepoints_to_plot(fig.gca(), model, forecast,\n                         cp_linestyle='')\nplt.show()\n```", "```py\ndf = pd.read_csv('../data/clothing_retailer.csv')\ndf['ds'] = pd.to_datetime(df['ds'])\n```", "```py\nmodel = Prophet()\nmodel.fit(df)\nfuture = model.make_future_dataframe(76)\nforecast = model.predict(future)\nfig = model.plot(forecast)\nadd_changepoints_to_plot(fig.gca(), model, forecast)\nplt.show()\n```", "```py\nmodel = ProphetStepWise(growth='flat',\n                        changepoints= ['2021-04-01',\n                                       '2021-07-01',\n                                       '2021-10-01',\n                                       '2022-01-01',\n                                       '2022-04-01',\n                                       '2022-07-01',\n                                       '2022-10-01'])\nmodel.fit(df)\nfuture = model.make_future_dataframe(76)\nforecast = model.predict(future)\nfig = model.plot(forecast)\nadd_changepoints_to_plot(fig.gca(), model, forecast, threshold=0.00);\n```"]