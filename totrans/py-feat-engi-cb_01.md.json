["```py\n pip install feature-engine\n```", "```py\n conda install -c conda-forge feature_engine\n```", "```py\n     import matplotlib.pyplot as plt\n    import pandas as pd\n    from sklearn.model_selection import train_test_split\n    ```", "```py\n     data = pd.read_csv(\"credit_approval_uci.csv\")\n    data.head()\n    ```", "```py\n     X_train, X_test, y_train, y_test = train_test_split(\n        data.drop(\"target\", axis=1),\n        data[\"target\"],\n        test_size=0.30,\n        random_state=42,\n    )\n    ```", "```py\n     fig, axes = plt.subplots(\n        2, 1, figsize=(15, 10), squeeze=False)\n    X_train.isnull().mean().plot(\n        kind='bar', color='grey', ax=axes[0, 0], title=\"train\")\n    X_test.isnull().mean().plot(\n        kind='bar', color='black', ax=axes[1, 0], title=\"test\")\n    axes[0, 0].set_ylabel('Fraction of NAN')\n    axes[1, 0].set_ylabel('Fraction of NAN')\n    plt.show()\n    ```", "```py\n     train_cca = X_train.dropna()\n    test_cca = X_test.dropna()\n    ```", "```py\n     print(f\"Total observations: {len(X_train)}\")\n    print(f\"Observations without NAN: {len(train_cca)}\")\n    ```", "```py\n    <st c=\"6381\">Total observations: 483</st>\n    <st c=\"6405\">Observations without NAN: 264</st>\n    ```", "```py\n     y_train_cca = y_train.loc[train_cca.index]\n    y_test_cca = y_test.loc[test_cca.index]\n    ```", "```py\n     from feature_engine.imputation import DropMissingData\n    ```", "```py\n     cca = DropMissingData(variables=None, missing_only=True)\n    ```", "```py\n     cca.fit(X_train)\n    ```", "```py\n     cca.variables_\n    ```", "```py\n    <st c=\"7241\">['A1', 'A2', 'A3', 'A4', 'A5', 'A6', 'A7', 'A8', 'A9', 'A10', 'A14']</st>\n    ```", "```py\n     train_cca = cca.transform(X_train)\n    test_cca = cca.transform(X_test)\n    ```", "```py\n     train_c, y_train_c = cca.transform_x_y( X_train, y_train)\n    test_c, y_test_c = cca.transform_x_y(X_test, y_test)\n    ```", "```py\n     import pandas as pd\n    from sklearn.model_selection import train_test_split\n    from sklearn.impute import SimpleImputer\n    from sklearn.compose import ColumnTransformer\n    from feature_engine.imputation import MeanMedianImputer\n    ```", "```py\n     data = pd.read_csv(\"credit_approval_uci.csv\")\n    ```", "```py\n     X_train, X_test, y_train, y_test = train_test_split(\n        data.drop(\"target\", axis=1),\n        data[\"target\"],\n        test_size=0.3,\n        random_state=0,\n    )\n    ```", "```py\n     numeric_vars = X_train.select_dtypes(\n        exclude=\"O\").columns.to_list()\n    ```", "```py\n     median_values = X_train[\n        numeric_vars].median().to_dict()\n    ```", "```py\n     X_train_t = X_train.fillna(value=median_values)\n    X_test_t = X_test.fillna(value=median_values)\n    ```", "```py\n     imputer = SimpleImputer(strategy=\"median\")\n    ```", "```py\n     ct = ColumnTransformer(\n        [(\"imputer\", imputer, numeric_vars)],\n        remainder=\"passthrough\",\n        force_int_remainder_cols=False,\n    ).set_output(transform=\"pandas\")\n    ```", "```py\n     ct.fit(X_train)\n    ```", "```py\n     ct.named_transformers_.imputer.statistics_\n    ```", "```py\n    array([ 28.835,   2.75,   1.,   0., 160.,   6.])\n    ```", "```py\n     X_train_t = ct.transform(X_train)\n    X_test_t = ct.transform(X_test)\n    ```", "```py\n     print(X_train_t.head())\n    ```", "```py\n     imputer = MeanMedianImputer(\n        imputation_method=\"median\",\n        variables=numeric_vars,\n    )\n    ```", "```py\n     imputer.fit(X_train)\n    ```", "```py\n     imputer.imputer_dict_\n    ```", "```py\n    {<st c=\"14951\">'A2': 28.835, 'A3': 2.75, 'A8': 1.0, 'A11': 0.0, 'A14': 160.0, 'A15': 6.0}</st>\n    ```", "```py\n     X_train = imputer.transform(X_train)\n    X_test = imputer.transform(X_test)\n    ```", "```py\n     import pandas as pd\n    from sklearn.model_selection import train_test_split\n    from sklearn.impute import SimpleImputer\n    from sklearn.compose import ColumnTransformer\n    from feature_engine.imputation import CategoricalImputer\n    ```", "```py\n     data = pd.read_csv(\"credit_approval_uci.csv\")\n    ```", "```py\n     X_train, X_test, y_train, y_test = train_test_split(\n        data.drop(\"target\", axis=1),\n        data[\"target\"],\n        test_size=0.3,\n        random_state=0,\n    )\n    ```", "```py\n     categorical_vars = X_train.select_dtypes(\n        include=\"O\").columns.to_list()\n    ```", "```py\n     frequent_values = X_train[\n        categorical_vars].mode().iloc[0].to_dict()\n    ```", "```py\n     X_train_t = X_train.fillna(value=frequent_values)\n    X_test_t = X_test.fillna(value=frequent_values)\n    ```", "```py\n     imputation_dict = {var:\n         \"no_data\" for var in categorical_vars}\n    ```", "```py\n     imputer = SimpleImputer(strategy='most_frequent')\n    ```", "```py\n     ct = ColumnTransformer(\n        [(\"imputer\",imputer, categorical_vars)],\n        remainder=\"passthrough\"\n        ).set_output(transform=\"pandas\")\n    ```", "```py\n     ct.fit(X_train)\n    ```", "```py\n     ct.named_transformers_.imputer.statistics_\n    ```", "```py\n    <st c=\"21153\">array(['b', 'u', 'g', 'c', 'v', 't', 'f', 'f', 'g'], dtype=object)</st>\n    ```", "```py\n     X_train_t = ct.transform(X_train)\n    X_test_t = ct.transform(X_test)\n    ```", "```py\n     imputer = CategoricalImputer(\n        imputation_method=\"frequent\",\n        variables=categorical_vars,\n    )\n    ```", "```py\n     imputer.fit(X_train)\n    ```", "```py\n     imputer.imputer_dict_\n    ```", "```py\n    <st c=\"22482\">{'A1': 'b',</st>\n     <st c=\"22494\">'A4': 'u',</st>\n     <st c=\"22505\">'A5': 'g',</st>\n     <st c=\"22516\">'A6': 'c',</st>\n     <st c=\"22527\">'A7': 'v',</st>\n     <st c=\"22538\">'A9': 't',</st>\n     <st c=\"22549\">'A10': 'f',</st>\n     <st c=\"22561\">'A12': 'f',</st>\n     <st c=\"22573\">'A13': 'g'}</st>\n    ```", "```py\n     X_train_t = imputer.transform(X_train)\n    X_test_t = imputer.transform(X_test)\n    ```", "```py\n     import pandas as pd\n    from sklearn.model_selection import train_test_split\n    from sklearn.impute import SimpleImputer\n    from feature_engine.imputation import ArbitraryNumberImputer\n    ```", "```py\n     data = pd.read_csv(\"credit_approval_uci.csv\")\n    ```", "```py\n     X_train, X_test, y_train, y_test = train_test_split(\n        data.drop(\"target\", axis=1),\n        data[\"target\"],\n        test_size=0.3,\n        random_state=0,\n    )\n    ```", "```py\n     X_train[['A2','A3', 'A8', 'A11']].max()\n    ```", "```py\n    <st c=\"26994\">A2     76.750</st>\n    <st c=\"27004\">A3     26.335</st>\n    <st c=\"27014\">A8     28.500</st>\n    <st c=\"27024\">A11    67.000</st>\n    <st c=\"27061\">99</st> for the imputation because it is bigger than the maximum values of the numerical variables in *<st c=\"27158\">step 4</st>*.\n    ```", "```py\n     X_train_t = X_train.copy()\n    X_test_t = X_test.copy()\n    ```", "```py\n     X_train_t[[\"A2\", \"A3\", \"A8\", \"A11\"]] = X_train_t[[\n        \"A2\", \"A3\", \"A8\", \"A11\"]].fillna(99)\n    X_test_t[[\"A2\", \"A3\", \"A8\", \"A11\"]] = X_test_t[[\n        \"A2\", \"A3\", \"A8\", \"A11\"]].fillna(99)\n    ```", "```py\n     imputer = SimpleImputer(strategy='constant', fill_value=99)\n    ```", "```py\n     vars = [\"A2\", \"A3\", \"A8\", \"A11\"]\n    imputer.fit(X_train[vars])\n    ```", "```py\n     X_train_t[vars] = imputer.transform(X_train[vars])\n    X_test_t[vars] = imputer.transform(X_test[vars])\n    ```", "```py\n     imputer = ArbitraryNumberImputer(\n        arbitrary_number=99,\n        variables=[\"A2\", \"A3\", \"A8\", \"A11\"],\n    )\n    ```", "```py\n     X_train = imputer.fit_transform(X_train)\n    X_test = imputer.transform(X_test)\n    ```", "```py\n     import pandas as pd\n    from sklearn.model_selection import train_test_split\n    from feature_engine.imputation import EndTailImputer\n    ```", "```py\n     data = pd.read_csv(\"credit_approval_uci.csv\")\n    ```", "```py\n     numeric_vars = [\n        var for var in data.select_dtypes(\n            exclude=\"O\").columns.to_list()\n        if var !=\"target\"\n    ]\n    ```", "```py\n     X_train, X_test, y_train, y_test = train_test_split(\n        data[numeric_vars],\n        data[\"target\"],\n        test_size=0.3,\n        random_state=0,\n    )\n    ```", "```py\n     IQR = X_train.quantile(0.75) - X_train.quantile(0.25)\n    ```", "```py\n    <st c=\"32264\">A2      16.4200</st>\n    <st c=\"32274\">A3</st> <st c=\"32278\">6.5825</st>\n    <st c=\"32284\">A8       2.8350</st>\n    <st c=\"32294\">A11      3.0000</st>\n    <st c=\"32305\">A14    212.0000</st>\n    <st c=\"32318\">A15    450.0000</st>\n    <st c=\"32331\">dtype: float64</st>\n    ```", "```py\n     imputation_dict = (\n        X_train.quantile(0.75) + 1.5 * IQR).to_dict()\n    ```", "```py\n     X_train_t = X_train.fillna(value=imputation_dict)\n    X_test_t = X_test.fillna(value=imputation_dict)\n    ```", "```py\n     imputer = EndTailImputer(\n        imputation_method=\"iqr\",\n        tail=\"right\",\n        fold=3,\n        variables=None,\n    )\n    ```", "```py\n     imputer.fit(X_train)\n    ```", "```py\n     imputer.imputer_dict_\n    ```", "```py\n    <st c=\"33927\">{'A2': 88.18,</st>\n     <st c=\"33941\">'A3': 27.31,</st>\n     <st c=\"33954\">'A8': 11.504999999999999,</st>\n     <st c=\"33980\">'A11': 12.0,</st>\n     <st c=\"33993\">'A14': 908.0,</st>\n     <st c=\"34007\">'A15': 1800.0}</st>\n    ```", "```py\n     X_train = imputer.transform(X_train)\n    X_test = imputer.transform(X_test)\n    ```", "```py\n     import pandas as pd\n    import numpy as np\n    from sklearn.model_selection import train_test_split\n    from sklearn.impute import SimpleImputer\n    from sklearn.compose import ColumnTransformer\n    from sklearn.pipeline import Pipeline\n    from feature_engine.imputation import(\n        AddMissingIndicator, CategoricalImputer,\n        MeanMedianImputer\n    )\n    ```", "```py\n     data = pd.read_csv(\"credit_approval_uci.csv\")\n    X_train, X_test, y_train, y_test = train_test_split(\n        data.drop(\"target\", axis=1),\n        data[\"target\"],\n        test_size=0.3,\n        random_state=0,\n    )\n    ```", "```py\n     varnames = [\"A1\", \"A3\", \"A4\", \"A5\", \"A6\", \"A7\", \"A8\"]\n    ```", "```py\n     indicators = [f\"{var}_na\" for var in varnames]\n    ```", "```py\n     X_train_t = X_train.copy()\n    X_test_t = X_test.copy()\n    ```", "```py\n     X_train_t[indicators] =X_train[\n        varnames].isna().astype(int)\n    X_test_t[indicators] = X_test[\n        varnames].isna().astype(int)\n    ```", "```py\n     X_train_t.head()\n    ```", "```py\n     imputer = AddMissingIndicator(\n        variables=None, missing_only=True\n        )\n    ```", "```py\n     imputer.fit(X_train)\n    ```", "```py\n     X_train_t = imputer.transform(X_train)\n    X_test_t = imputer.transform(X_test)\n    ```", "```py\n     pipe = Pipeline([\n        (\"indicators\",\n            AddMissingIndicator(missing_only=True)),\n        (\"categorical\", CategoricalImputer(\n            imputation_method=\"frequent\")),\n        (\"numerical\", MeanMedianImputer()),\n    ])\n    ```", "```py\n     X_train_t = pipe.fit_transform(X_train)\n    X_test_t = pipe.transform(X_test)\n    ```", "```py\n     numvars = X_train.select_dtypes(\n        exclude=\"O\").columns.to_list()\n    catvars = X_train.select_dtypes(\n        include=\"O\").columns.to_list()\n    ```", "```py\n     pipe = ColumnTransformer([\n        (\"num_imputer\", SimpleImputer(\n            strategy=\"mean\",\n            add_indicator=True),\n        numvars),\n        (\"cat_imputer\", SimpleImputer(\n            strategy=\"most_frequent\",\n            add_indicator=True),\n        catvars),\n    ]).set_output(transform=\"pandas\")\n    ```", "```py\n     X_train_t = pipe.fit_transform(X_train)\n    X_test_t = pipe.transform(X_test)\n    ```", "```py\n     import matplotlib.pyplot as plt\n    import pandas as pd\n    ```", "```py\n     df = pd.read_csv(\n        \"air_passengers.csv\",\n        parse_dates=[\"ds\"],\n        index_col=[\"ds\"],\n    )\n    print(df.head())\n    ```", "```py\n     <st c=\"44389\">y</st>\n    <st c=\"44391\">ds</st>\n    <st c=\"44393\">1949-01-01  112.0</st>\n    <st c=\"44410\">1949-02-01  118.0</st>\n    <st c=\"44427\">1949-03-01</st> <st c=\"44438\">132.0</st>\n    <st c=\"44444\">1949-04-01  129.0</st>\n    <st c=\"44461\">1949-05-01  121.0</st>\n    ```", "```py\n     ax = df.plot(marker=\".\", figsize=[10, 5], legend=None)\n    ax.set_title(\"Air passengers\")\n    ax.set_ylabel(\"Number of passengers\")\n    ax.set_xlabel(\"Time\")\n    ```", "```py\n     df_imputed = df.ffill()\n    ```", "```py\n     ax = df_imputed.plot(\n        linestyle=\"-\", marker=\".\", figsize=[10, 5])\n    df_imputed[df.isnull()].plot(\n        ax=ax, legend=None, marker=\".\", color=\"r\")\n    ax.set_title(\"Air passengers\")\n    ax.set_ylabel(\"Number of passengers\")\n    ax.set_xlabel(\"Time\")\n    ```", "```py\n     df_imputed = df.bfill()\n    ```", "```py\n     import matplotlib.pyplot as plt\n    import pandas as pd\n    ```", "```py\n     df = pd.read_csv(\n        \"air_passengers.csv\",\n        parse_dates=[\"ds\"],\n        index_col=[\"ds\"],\n    )\n    ```", "```py\n     df_imputed = df.interpolate(method=\"linear\")\n    ```", "```py\n     ax = df_imputed.plot(\n        linestyle=\"-\", marker=\".\", figsize=[10, 5])\n    df_imputed[df.isnull()].plot(\n        ax=ax, legend=None, marker=\".\", color=\"r\")\n    ax.set_title(\"Air passengers\")\n    ax.set_ylabel(\"Number of passengers\")\n    ax.set_xlabel(\"Time\")\n    ```", "```py\n     df_imputed = df.interpolate(method=\"spline\", order=2)\n    ```", "```py\n     import pandas as pd\n    import matplotlib.pyplot as plt\n    from sklearn.model_selection import train_test_split\n    from sklearn.linear_model import BayesianRidge\n    from sklearn.experimental import (\n        enable_iterative_imputer\n    )\n    from sklearn.impute import (\n        IterativeImputer,\n        SimpleImputer\n    )\n    ```", "```py\n     variables = [\n        \"A2\", \"A3\", \"A8\", \"A11\", \"A14\", \"A15\", \"target\"]\n    data = pd.read_csv(\n        \"credit_approval_uci.csv\",\n        usecols=variables)\n    ```", "```py\n     X_train, X_test, y_train, y_test = train_test_split(\n        data.drop(\"target\", axis=1),\n        data[\"target\"],\n        test_size=0.3,\n        random_state=0,\n    )\n    ```", "```py\n     imputer = IterativeImputer(\n        estimator= BayesianRidge(),\n        max_iter=10,\n        random_state=0,\n    ).set_output(transform=\"pandas\")\n    ```", "```py\n     imputer.fit(X_train)\n    ```", "```py\n     X_train_t = imputer.transform(X_train)\n    X_test_t = imputer.transform(X_test)\n    ```", "```py\n     imputer_simple = SimpleImputer(\n        strategy=\"mean\").set_output(transform=\"pandas\")\n    X_train_s = imputer_simple.fit_transform(X_train)\n    X_test_s = imputer_simple.transform(X_test)\n    ```", "```py\n     fig, axes = plt.subplots(\n        2, 1, figsize=(10, 10), squeeze=False)\n    X_test_t[\"A3\"].hist(\n        bins=50, ax=axes[0, 0], color=\"blue\")\n    X_test_s[\"A3\"].hist(\n        bins=50, ax=axes[1, 0], color=\"green\")\n    axes[0, 0].set_ylabel('Number of observations')\n    axes[1, 0].set_ylabel('Number of observations')\n    axes[0, 0].set_xlabel('A3')\n    axes[1, 0].set_xlabel('A3')\n    axes[0, 0].set_title('MICE')\n    axes[1, 0].set_title('Mean imputation')\n    plt.show()\n    ```", "```py\n     import matplotlib.pyplot as plt\n    import pandas as pd\n    from sklearn.model_selection import train_test_split\n    from sklearn.impute import KNNImputer\n    ```", "```py\n     variables = [\n        \"A2\", \"A3\", \"A8\", \"A11\", \"A14\", \"A15\", \"target\"]\n    data = pd.read_csv(\n        \"credit_approval_uci.csv\",\n        usecols=variables,\n    )\n    ```", "```py\n     X_train, X_test, y_train, y_test = train_test_split(\n        data.drop(\"target\", axis=1),\n        data[\"target\"],\n        test_size=0.3,\n        random_state=0,\n    )\n    ```", "```py\n     imputer = KNNImputer(\n        n_neighbors=5, weights=\"distance\",\n    ).set_output(transform=\"pandas\")\n    ```", "```py\n     imputer.fit(X_train)\n    ```", "```py\n     X_train_t = imputer.transform(X_train)\n    X_test_t = imputer.transform(X_test)\n    ```"]