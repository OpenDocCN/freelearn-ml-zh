["```py\n pip install featuretools\n```", "```py\n conda install -c conda-forge featuretools\n```", "```py\n     import pandas as pd\n    import featuretools as ft\n    from woodwork.logical_types import Categorical\n    ```", "```py\n     df = pd.read_csv(\n        «retail.csv», parse_dates=[«invoice_date»])\n    df.head()\n    ```", "```py\n     es = ft.EntitySet(id=\"data\")\n    ```", "```py\n     es = es.add_dataframe(\n        dataframe=df,\n        dataframe_name=»data»,\n        index=\"rows\",\n        make_index=True,\n        time_index=»invoice_date»,\n        logical_types={ «customer_id»: Categorical},\n    )\n    ```", "```py\n     es.normalize_dataframe(\n        base_dataframe_name=»data»,\n        new_dataframe_name=»invoices»,\n        index=\"invoice\",\n        copy_columns=[«customer_id»],\n    )\n    ```", "```py\n     es.normalize_dataframe(\n        base_dataframe_name=»invoices»,\n        new_dataframe_name=»customers»,\n        index=»customer_id», )\n    ```", "```py\n     es.normalize_dataframe(\n        base_dataframe_name=»data»,\n        new_dataframe_name=»items»,\n        index=»stock_code»,\n    )\n    ```", "```py\n     es\n    ```", "```py\n    <st c=\"10009\">Entityset: data</st>\n     <st c=\"10025\">DataFrames:</st>\n     <st c=\"10037\">data [Rows: 741301, Columns: 8]</st>\n     <st c=\"10069\">invoices [Rows: 40505, Columns: 3]</st>\n     <st c=\"10104\">customers [Rows: 5410, Columns: 2]</st>\n     <st c=\"10139\">items [Rows: 4631, Columns: 2]</st>\n     <st c=\"10170\">Relationships:</st>\n     <st c=\"10185\">data.invoice -> invoices.invoice</st>\n     <st c=\"10218\">invoices.customer_id -> customers.customer_id</st>\n    <st c=\"10319\">invoices</st> DataFrame:\n\n    ```", "```py\n\n    <st c=\"10361\">We see in</st> <st c=\"10372\">the following output that</st> `<st c=\"10398\">featuretools</st>` <st c=\"10410\">au</st><st c=\"10413\">tomatically created a DataFrame containing the invoice’s unique</st> <st c=\"10478\">identifier, followed by the customer’s unique identifier and the first date registered for</st> <st c=\"10569\">ea</st><st c=\"10571\">ch invoice:</st>\n    ```", "```py\n     es[\"customers\"].head()\n    ```", "```py\n     es.plot()\n    ```", "```py\n     feature_matrix, feature_defs = ft.dfs(\n        entityset=es,\n        target_dataframe_name=»customers»,\n        ignore_columns={\n            «invoices»:[«invoice»],\n            «invoices»:[«customer_id»],\n        }\n    )\n    ```", "```py\n     feature_defs[5:10]\n    ```", "```py\n    <st c=\"14345\">[<Feature: MIN(data.price)>,</st>\n    <st c=\"14373\"><Feature: MIN(data.quantity)>,</st>\n    <st c=\"14403\"><Feature: MODE(data.description)>,</st>\n    <st c=\"14437\"><Feature: MODE(data.stock_code)>,</st>\n    <st c=\"14470\"><Feature: NUM_UNIQUE(data.description)>]</st>\n    ```", "```py\n     feature_matrix[feature_matrix.columns[5:10]].head()\n    ```", "```py\n     feature_matrix, feature_defs = ft.dfs(\n        entityset=es,\n        target_dataframe_name=»invoices»,\n        ignore_columns = {«data»: [«customer_id»]},\n        max_depth = 1,\n    )\n    ```", "```py\n     feature_defs\n    ```", "```py\n    <st c=\"16024\">[<Feature: customer_id>,</st>\n    <st c=\"16049\"><Feature: COUNT(data)>,</st>\n    <st c=\"16072\"><Feature: MAX(data.price)>,</st>\n    <st c=\"16099\"><Feature: MAX(data.quantity)>,</st>\n    <st c=\"16129\"><Feature: MEAN(data.price)>,</st>\n    <st c=\"16157\"><Feature: MEAN(data.quantity)>,</st>\n    <st c=\"16188\"><Feature: MIN(data.price)>,</st>\n    <st c=\"16215\"><Feature: MIN(data.quantity)>,</st>\n    <st c=\"16245\"><Feature: MODE(data.description)>,</st>\n    <st c=\"16279\"><Feature: MODE(data.stock_code)>,</st>\n    <st c=\"16312\"><Feature: NUM_UNIQUE(data.description)>,</st>\n    <st c=\"16352\"><Feature: NUM_UNIQUE(data.stock_code)>,</st>\n    <st c=\"16391\"><Feature: SKEW(data.price)>,</st>\n    <st c=\"16419\"><Feature: SKEW(data.quantity)>,</st>\n    <st c=\"16450\"><Feature: STD(data.price)>,</st>\n    <st c=\"16477\"><Feature: STD(data.quantity)>,</st>\n    <st c=\"16507\"><Feature: SUM(data.price)>,</st>\n    <st c=\"16534\"><Feature: SUM(data.quantity)>,</st>\n    <st c=\"16564\"><Feature: DAY(first_data_time)>,</st>\n    <st c=\"16596\"><Feature: MONTH(first_data_time)>,</st>\n    <st c=\"16630\"><Feature: WEEKDAY(first_data_time)>,</st>\n    <st c=\"16666\"><Feature: YEAR(first_data_time)>]</st>\n    ```", "```py\n     import numpy as np\n    import pandas as pd\n    ```", "```py\n     df = pd.read_csv(\n        «retail.csv», parse_dates=[«invoice_date»])\n    ```", "```py\n     numeric_vars = [\"quantity\", \"price\"]\n    ```", "```py\n     func = [\"cumsum\", \"cummax\", \"diff\"]\n    ```", "```py\n     new_names = [f\"{var}_{function}\"\n        for function in func for var in numeric_vars]\n    ```", "```py\n     df[new_names] = df.groupby(\n        \"invoice\")[numeric_vars].agg(func)\n    ```", "```py\n     df[df[\"invoice\"] == \"489434\" ][\n        numeric_vars + new_names]\n    ```", "```py\n     new_names = [\n        f\"{var}_{function}\"\n        for function in [\"sin\", \"cos\"]\n        for var in numeric_vars]\n    ```", "```py\n     df[new_names] = df[numeric_vars].agg(\n        [np.sin, np.cos])\n    ```", "```py\n     import pandas as pd\n    import featuretools as ft\n    from woodwork.logical_types import Categorical\n    ```", "```py\n     df = pd.read_csv(\n        «retail.csv», parse_dates=[«invoice_date»])\n    ```", "```py\n     es = ft.EntitySet(id=\"data\")\n    ```", "```py\n     es = es.add_dataframe(\n        dataframe=df,\n        dataframe_name=»data»,\n        index=\"rows\",\n        make_index=True,\n        time_index=»invoice_date»,\n        logical_types={\n            \"customer_id\": Categorical,\n            \"invoice\": Categorical,\n        }\n    )\n    ```", "```py\n     es.normalize_dataframe(\n        base_dataframe_name=»data»,\n        new_dataframe_name=»invoices»,\n        index=\"invoice\",\n        copy_columns=[«customer_id»],\n    )\n    ```", "```py\n     cum_primitives = [\n        \"cum_sum\",\n        \"cum_max\",\n        \"diff\", \"time_since_previous\"]\n    ```", "```py\n     general_primitives = [\"sine\", \" cosine \"]\n    ```", "```py\n     feature_matrix, feature_defs = ft.dfs(\n        entityset=es,\n        target_dataframe_name=»data»,\n        agg_primitives=[],\n        trans_primitives=general_primitives,\n        groupby_trans_primitives = cum_primitives,\n        ignore_dataframes = [«invoices»],\n    )\n    ```", "```py\n     feature_defs\n    ```", "```py\n    <st c=\"32828\">[<Feature: customer_id>,</st>\n    <st c=\"32853\"><Feature: invoice>,</st>\n    <st c=\"32872\"><Feature: stock_code>,</st>\n    <st c=\"32894\"><Feature: description>,</st>\n    <st c=\"32917\"><Feature: quantity>,</st>\n    <st c=\"32937\"><Feature: price>,</st>\n    <st c=\"32954\"><Feature: COSINE(price)>,</st>\n    <st c=\"32979\"><Feature: COSINE(quantity)>,</st>\n    <st c=\"33007\"><Feature: SINE(price)>,</st>\n    <st c=\"33030\"><Feature: SINE(quantity)>,</st>\n    <st c=\"33056\"><Feature: CUM_MAX(price) by invoice>,</st>\n    <st c=\"33093\"><Feature: CUM_MAX(quantity) by invoice>,</st>\n    <st c=\"33133\"><Feature: CUM_SUM(price) by invoice>,</st>\n    <st c=\"33170\"><Feature: CUM_SUM(quantity) by invoice>,</st>\n    <st c=\"33210\"><Feature: DIFF(price) by invoice>,</st>\n    <st c=\"33244\"><Feature: DIFF(quantity) by invoice>,</st>\n    <st c=\"33281\"><Feature: TIME_SINCE_PREVIOUS(invoice_date) by invoice>]</st>\n    ```", "```py\n     import pandas as pd\n    import featuretools as ft\n    from woodwork.logical_types import Categorical\n    ```", "```py\n     df = pd.read_csv(\n        «retail.csv», parse_dates=[«invoice_date»])\n    ```", "```py\n     es = ft.EntitySet(id=\"data\")\n    ```", "```py\n     es = es.add_dataframe(\n        dataframe=df,\n        dataframe_name=»data»,\n        index=\"rows\",\n        make_index=True,\n        time_index=»invoice_date»,\n        logical_types={«customer_id»: Categorical},\n    )\n    ```", "```py\n     es.normalize_dataframe(\n        base_dataframe_name=»data»,\n        new_dataframe_name=»invoices»,\n        index=\"invoice\",\n        copy_columns=[«customer_id»],\n    )\n    ```", "```py\n     feature_matrix, feature_defs = ft.dfs(\n        entityset=es,\n        target_dataframe_name=»data»,\n        agg_primitives=[],\n        trans_primitives=[«multiply_numeric»],\n        primitive_options={\n            («multiply_numeric»): {\n                ‹include_columns›: {\n                    'data': [\"quantity\", \"price\"]\n                }\n            }\n        },\n        ignore_dataframes=[«invoices»],\n    )\n    ```", "```py\n     feature_defs\n    ```", "```py\n    <st c=\"38965\">[<Feature: customer_id>,</st>\n    <st c=\"38990\"><Feature: stock_code>,</st>\n    <st c=\"39012\"><Feature: description>,</st>\n    <st c=\"39035\"><Feature: quantity>,</st>\n    <st c=\"39055\"><Feature: price>,</st>\n    <st c=\"39072\"><Feature: price * quantity>]</st>\n    ```", "```py\n     feature_matrix.head()\n    ```", "```py\n     import pandas as pd\n    import featuretools as ft\n    from featuretools.primitives import (\n        IsFederalHoliday, DistanceToHoliday)\n    from woodwork.logical_types import Categorical\n    ```", "```py\n     df = pd.read_csv(\n        «retail.csv», parse_dates=[«invoice_date»])\n    ```", "```py\n     es = ft.EntitySet(id=\"data\")\n    ```", "```py\n     es = es.add_dataframe(\n        dataframe=df,\n        dataframe_name=»data»,\n        index=\"rows\",\n        make_index=True,\n        time_index=»invoice_date»,\n        logical_types={«customer_id»: Categorical},\n    )\n    ```", "```py\n     es.normalize_dataframe(\n        base_dataframe_name=»data»,\n        new_dataframe_name=»invoices»,\n        index=\"invoice\",\n        copy_columns=[«customer_id»],\n    )\n    ```", "```py\n     is_bank_hol = IsFederalHoliday(country=\"UK\")\n    ```", "```py\n     hols = is_bank_hol.holidayUtil.federal_holidays.values()\n    available_hols = list(set(hols))\n    ```", "```py\n    <st c=\"44382\">['May Day',</st>\n     <st c=\"44394\">'Good Friday',</st>\n     <st c=\"44409\">'Wedding of William and Catherine',</st>\n     <st c=\"44445\">'Coronation of Charles III',</st>\n     <st c=\"44474\">'Christmas Day',</st>\n     <st c=\"44491\">'Wedding of Charles and Diana',</st>\n     <st c=\"44523\">'Christmas Day (observed)',</st>\n     <st c=\"44551\">'State Funeral of Queen Elizabeth II',</st>\n     <st c=\"44590\">'Silver Jubilee of Elizabeth II',</st>\n     <st c=\"44624\">'Spring Bank Holiday',</st>\n     <st c=\"44647\">'Diamond Jubilee of Elizabeth II',</st>\n     <st c=\"44682\">'Boxing Day (observed)',</st>\n     <st c=\"44707\">'Platinum Jubilee of Elizabeth II',</st>\n     <st c=\"44743\">\"New Year's Day (observed)\",</st>\n     <st c=\"44772\">'Boxing Day',</st>\n     <st c=\"44786\">'Golden Jubilee of Elizabeth II',</st>\n     <st c=\"44820\">'Millennium Celebrations',</st>\n     <st c=\"44847\">\"New Year's Day\"]</st>\n    ```", "```py\n     days_to_boxing = DistanceToHoliday(\n        holiday=\"Boxing Day\", country=\"UK\")\n    ```", "```py\n     date_primitives = [\n        \"day\", \"year\", \"month\", \"weekday\",\n        \"days_in_month\", \"part_of_day\",\n        \"hour\", \"minute\",\n        is_bank_hol,\n        days_to_boxing\n    ]\n    ```", "```py\n     feature_matrix, feature_defs = ft.dfs(\n        entityset=es,\n        target_dataframe_name=»invoices»,\n        agg_primitives=[],\n        trans_primitives=date_primitives,\n    )\n    ```", "```py\n     feature_defs\n    ```", "```py\n    <st c=\"45872\">[<Feature: customer_id>,</st>\n    <st c=\"45897\"><Feature: DAY(first_data_time)>,</st>\n    <st c=\"45929\"><Feature: DAYS_IN_MONTH(first_data_time)>,</st>\n    <st c=\"45971\"><Feature: DISTANCE_TO_HOLIDAY(</st>\n     <st c=\"46002\">first_data_time, holiday=Boxing Day, country=UK)>,</st>\n    <st c=\"46053\"><Feature: HOUR(first_data_time)>,</st>\n    <st c=\"46086\"><Feature: IS_FEDERAL_HOLIDAY(</st>\n     <st c=\"46116\">first_data_time, , country=UK)>,</st>\n    <st c=\"46149\"><Feature: MINUTE(first_data_time)>,</st>\n    <st c=\"46184\"><Feature: MONTH(first_data_time)>,</st>\n    <st c=\"46218\"><Feature: PART_OF_DAY(first_data_time)>,</st>\n    <st c=\"46258\"><Feature: WEEKDAY(first_data_time)>,</st>\n    <st c=\"46350\">feature_matrix.head()</st> to take a look at the resulting DataFrame with the features created from the invoice date. The DataFrame is quite big, so for reasons of space, we’ll only display a few columns in the book.\n    ```", "```py\n     columns = [\n        \"DISTANCE_TO_HOLIDAY(first_data_time,\n            holiday=Boxing Day, country=UK)\",\n        \"HOUR(first_data_time)\",\n        \"IS_FEDERAL_HOLIDAY(first_data_time,\n            country=UK)\",\n    ]\n    feature_matrix[columns].head()\n    ```", "```py\n pip install nlp_primitives\n```", "```py\n conda install -c conda-forge nlp-primitives\n```", "```py\n     import pandas as pd\n    import featuretools as ft\n    from woodwork.logical_types import (\n       Categorical, NaturalLanguage)\n    ```", "```py\n     df = pd.read_csv(\n        «retail.csv», parse_dates=[«invoice_date»])\n    ```", "```py\n     es = ft.EntitySet(id=\"data\")\n    ```", "```py\n     es = es.add_dataframe(\n        dataframe=df,\n        dataframe_name=»data»,\n        index=\"rows\",\n        make_index=True,\n        time_index=»invoice_date»,\n        logical_types={\n            «customer_id»: Categorical,\n            \"invoice\": Categorical,\n            «description»: NaturalLanguage,\n        }\n    )\n    ```", "```py\n     es.normalize_dataframe(\n        base_dataframe_name=»data»,\n        new_dataframe_name=»invoices»,\n        index=\"invoice\",\n        copy_columns=[«customer_id»],\n    )\n    ```", "```py\n     text_primitives = [\n        \"num_words\",\n        \"num_characters\",\n        \"MeanCharactersPerWord\" ,\n        \"PunctuationCount\"]\n    ```", "```py\n     feature_matrix, feature_defs = ft.dfs(\n        entityset=es,\n        target_dataframe_name=»data»,\n        agg_primitives=[],\n        trans_primitives=text_primitives,\n        ignore_dataframes=[«invoices»],\n    )\n    ```", "```py\n     feature_defs\n    ```", "```py\n    <st c=\"52108\">[<Feature: customer_id>,</st>\n    <st c=\"52133\"><Feature: invoice>,</st>\n    <st c=\"52152\"><Feature: stock_code>,</st>\n    <st c=\"52174\"><Feature: quantity>,</st>\n    <st c=\"52194\"><Feature: price>,</st>\n    <st c=\"52211\"><Feature: MEAN_CHARACTERS_PER_WORD(description)>,</st>\n    <st c=\"52260\"><Feature: NUM_CHARACTERS(description)>,</st>\n    <st c=\"52299\"><Feature: NUM_WORDS(description)>,</st>\n    <st c=\"52422\">feature_matrix.head()</st>.\n    ```", "```py\n    <st c=\"52521\">text_f = [</st>\n     <st c=\"52532\">\"NUM_CHARACTERS(description)\",</st>\n     <st c=\"52563\">\"NUM_WORDS(description)\",</st>\n     <st c=\"52589\">\"PUNCTUATION_COUNT(description)\",</st>\n    <st c=\"52623\">]</st>\n    <st c=\"52625\">feature_matrix[text_f].head()</st>\n    ```", "```py\n     import pandas as pd\n    import featuretools as ft\n    from woodwork.logical_types import (\n        Categorical, NaturalLanguage)\n    ```", "```py\n     df = pd.read_csv(\n        «retail.csv», parse_dates=[«invoice_date»])\n    ```", "```py\n     es = ft.EntitySet(id=\"data\")\n    ```", "```py\n     es = es.add_dataframe(\n        dataframe=df,\n        dataframe_name=»data»,\n        index=\"rows\",\n        make_index=True,\n        time_index=»invoice_date»,\n        logical_types={\n            «customer_id»: Categorical,\n            «description»: NaturalLanguage,\n        }\n    )\n    ```", "```py\n     es.normalize_dataframe(\n        base_dataframe_name=»data»,\n        new_dataframe_name=»invoices»,\n        index=\"invoice\",\n        copy_columns=[«customer_id»],\n    )\n    ```", "```py\n     es.normalize_dataframe(\n        base_dataframe_name=»invoices»,\n        new_dataframe_name=»customers»,\n        index=»customer_id»,\n    )\n    ```", "```py\n     agg_primitives = [\"mean\", \"max\", \"min\", \"sum\"]\n    ```", "```py\n     feature_matrix, feature_defs = ft.dfs(\n        entityset=es,\n        target_dataframe_name=»customers»,\n        agg_primitives=agg_primitives,\n        trans_primitives=[],\n    )\n    ```", "```py\n     feature_defs\n    ```", "```py\n    <st c=\"58621\">[<Feature: MAX(data.price)>,</st>\n    <st c=\"58650\"><Feature: MAX(data.quantity)>,</st>\n    <st c=\"58680\"><Feature: MEAN(data.price)>,</st>\n    <st c=\"58708\"><Feature: MEAN(data.quantity)>,</st>\n    <st c=\"58739\"><Feature: MIN(data.price)>,</st>\n    <st c=\"58766\"><Feature: MIN(data.quantity)>,</st>\n    <st c=\"58796\"><Feature: SUM(data.price)>,</st>\n    <st c=\"58823\"><Feature: SUM(data.quantity)>,</st>\n    <st c=\"58853\"><Feature: MAX(invoices.MEAN(data.price))>,</st>\n    <st c=\"58895\"><Feature: MAX(invoices.MEAN(data.quantity))>,</st>\n    <st c=\"58940\"><Feature: MAX(invoices.MIN(data.price))>,</st>\n    <st c=\"58981\"><Feature: MAX(invoices.MIN(data.quantity))>,</st>\n    <st c=\"59025\"><Feature: MAX(invoices.SUM(data.price))>,</st>\n    <st c=\"59066\"><Feature: MAX(invoices.SUM(data.quantity))>,</st>\n    <st c=\"59110\"><Feature: MEAN(invoices.MAX(data.price))>,</st>\n    <st c=\"59152\"><Feature: MEAN(invoices.MAX(data.quantity))>,</st>\n    <st c=\"59197\"><Feature: MEAN(invoices.MEAN(data.price))>,</st>\n    <st c=\"59240\"><Feature: MEAN(invoices.MEAN(data.quantity))>,</st>\n    <st c=\"59286\"><Feature: MEAN(invoices.MIN(data.price))>,</st>\n    <st c=\"59328\"><Feature: MEAN(invoices.MIN(data.quantity))>,</st>\n    <st c=\"59373\"><Feature: MEAN(invoices.SUM(data.price))>,</st>\n    <st c=\"59415\"><Feature: MEAN(invoices.SUM(data.quantity))>,</st>\n    <st c=\"59460\"><Feature: MIN(invoices.MAX(data.price))>,</st>\n    <st c=\"59501\"><Feature: MIN(invoices.MAX(data.quantity))>,</st>\n    <st c=\"59545\"><Feature: MIN(invoices.MEAN(data.price))>,</st>\n    <st c=\"59587\"><Feature: MIN(invoices.MEAN(data.quantity))>,</st>\n    <st c=\"59632\"><Feature: MIN(invoices.SUM(data.price))>,</st>\n    <st c=\"59673\"><Feature: MIN(invoices.SUM(data.quantity))>,</st>\n    <st c=\"59717\"><Feature: SUM(invoices.MAX(data.price))>,</st>\n    <st c=\"59758\"><Feature: SUM(invoices.MAX(data.quantity))>,</st>\n    <st c=\"59802\"><Feature: SUM(invoices.MEAN(data.price))>,</st>\n    <st c=\"59844\"><Feature: SUM(invoices.MEAN(data.quantity))>,</st>\n    <st c=\"59889\"><Feature: SUM(invoices.MIN(data.price))>,</st>\n    <st c=\"59930\"><Feature: SUM(invoices.MIN(data.quantity))>]</st>\n    ```", "```py\n     feature_matrix.head()\n    ```", "```py\n     trans_primitives = [\"month\", \"weekday\", \"num_words\"]\n    ```", "```py\n     agg_primitives = [\"mean\"]\n    ```", "```py\n     feature_matrix, feature_defs = ft.dfs(\n        entityset=es,\n        target_dataframe_name=»customers»,\n        agg_primitives=agg_primitives,\n        trans_primitives=trans_primitives,\n        max_depth=3,\n    )\n    ```", "```py\n     feature_defs\n    ```", "```py\n    <st c=\"62965\">[<Feature: MEAN(data.price)>,</st>\n    <st c=\"62995\"><Feature: MEAN(data.quantity)>,</st>\n    <st c=\"63026\"><Feature: MONTH(first_invoices_time)>,</st>\n    <st c=\"63064\"><Feature: WEEKDAY(first_invoices_time)>,</st>\n    <st c=\"63104\"><Feature: MEAN(invoices.MEAN(data.price))>,</st>\n    <st c=\"63147\"><Feature: MEAN(invoices.MEAN(data.quantity))>,</st>\n    <st c=\"63193\"><Feature: MEAN(data.NUM_WORDS(description))>,</st>\n    <st c=\"63238\"><Feature: MEAN(invoi</st><st c=\"63259\">ces.MEAN(data.NUM_</st>\n     <st c=\"63278\">WORDS(description)))>] WORDS(description)))>]</st>\n    ```"]