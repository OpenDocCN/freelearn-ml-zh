- en: '*Chapter 8*: Forecasting Using Time Series'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Predicting future trends using historical data is one of the most fascinating
    activities that we can do with machine learning.
  prefs: []
  type: TYPE_NORMAL
- en: Making predictions based on historical data points and time series is particularly
    interesting and can be very useful in different industries. Forecasting can help
    us in predicting the future, but also in identifying anomalies in data that don't
    respect the expected pattern.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we'll focus on time series forecasting by using the ARIMA Plus
    algorithm. This technique can be used to predict numerical values in different
    fields, such as the sales of a company, the customers in a restaurant, stock prices,
    and the electricity consumption of a building.
  prefs: []
  type: TYPE_NORMAL
- en: 'To understand how we can use BigQuery ML to forecast trends and to effectively
    present our results, we''ll go through the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing the business scenario
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Discovering time series forecasting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring and understanding the dataset
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Training the time series forecasting model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Evaluating the time series forecasting model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the time series forecasting model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Presenting the forecast
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter requires you to access a web browser and to have the possibility
    to leverage the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A GCP account to access Google Cloud Console
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A GCP project to host the BigQuery datasets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, that we're ready with the technical requirements, let's dive into the analysis
    and development of our BigQuery ML forecasting model.
  prefs: []
  type: TYPE_NORMAL
- en: 'Check out the following video to see the Code in Action: [https://bit.ly/2QY0Qlp](https://bit.ly/2QY0Qlp)'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing the business scenario
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Imagine being a business analyst who works for the state of Iowa. The state
    monitors the retail distribution of liquors and spirits by collecting data from
    every shop in the territory. Controlling liquor sales is particularly important
    for monitoring citizen health and for checking tax income.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following screenshot, you can see a picture of typical shelves of liquors
    and spirits in a shop:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.1 – The shelves in a liquor shop'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16722_08_001.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.1 – The shelves in a liquor shop
  prefs: []
  type: TYPE_NORMAL
- en: For our business scenario, we can imagine that the state of Iowa wants to predict
    the number of liters that will be sold in the first 30 days of 2020 leveraging
    the historical data collected in the previous years.
  prefs: []
  type: TYPE_NORMAL
- en: Your manager may ask you to predict the number of liters that will be sold by
    all the shops in the state by leveraging the time series data that was already
    collected in the database.
  prefs: []
  type: TYPE_NORMAL
- en: As a business analyst, your job is to find the best algorithm to forecast the
    sales volumes and to present the results in a graphical way to the governor's
    staff.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we've explained and understood the problem statement, let's take a
    look at the machine learning technique that we can use to forecast the sales,
    by using historical data.
  prefs: []
  type: TYPE_NORMAL
- en: Discovering time series forecasting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A **time series** is a sequence of data points mapped at a certain time frequency.
    For example, it can contain the price of a stock collected at regular intervals,
    the sales volumes of each day in a specific timeframe, or the temperature measured
    by an **Internet of Things** (**IoT**) sensor during the day.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following diagram, you can see a time series graph of the data collected
    by a temperature sensor in the first 15 days of 2020:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.2 – Example of time series generated by a temperature sensor'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16722_08_002.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.2 – Example of time series generated by a temperature sensor
  prefs: []
  type: TYPE_NORMAL
- en: '**Forecasting** using time series analysis comprises the use of machine learning
    models to predict the future values of a specific measure by leveraging the known
    past data.'
  prefs: []
  type: TYPE_NORMAL
- en: 'BigQuery ML provides a specific machine learning algorithm to forecast numerical
    values using time series data. The algorithm is designed and developed to do the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: Automatically clean and adjust the training data to overcome the data quality
    issues, for example, missing or duplicated values and spikes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compensate for variations caused by specific periods, such as holidays.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Decompose trends using the Seasonal and Trend Decomposition Loess algorithm.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extrapolate the seasonality from the data.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: And finally, apply the trend modeling of the **Autoregressive Integrated Moving
    Average** (**ARIMA**) model to predict future numerical values using historical
    ones.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can use ARIMA models to discover hidden patterns in time series data or
    to forecast the future values of a specific measure.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we've learned the basics of time series forecasting. Now let's
    take a look at the dataset that we'll use to build our BigQuery ML model.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring and understanding the dataset
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before starting the development of the machine learning model, we'll start looking
    at the dataset and its structure.
  prefs: []
  type: TYPE_NORMAL
- en: Let's start by getting a clear understanding of the time series data that we
    have in the BigQuery public dataset to build our forecasting model in the next
    section.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we'll analyze the structure of the data to identify the fields
    to use for the machine learning model creation.
  prefs: []
  type: TYPE_NORMAL
- en: 'To start exploring the data, we need to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Log into our Google Cloud Console and access the **BigQuery** user interface
    from the navigation menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new dataset under the project that we created in [*Chapter 2*](B16722_02_Final_ASB_ePub.xhtml#_idTextAnchor039),
    *Setting Up Your GCP and BigQuery Environment*. For this use case, we'll create
    the dataset `08_sales_forecasting` with the default options.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the GCP project `iowa_liquor_sales`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'As seen in the following screenshot, the BigQuery public dataset contains only
    one table that hosts the data collected from the liquor shops in Iowa:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 8.3 – The Iowa liquor sales public dataset contains the sales of all
    the liquor shops in Iowa'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B16722_08_003.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 8.3 – The Iowa liquor sales public dataset contains the sales of all
    the liquor shops in Iowa
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We'll use the table **sales** to build our forecasting model. This table contains
    all the information about the liquor sold in the state of Iowa since 2012.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Let's click on the table name **sales** in the BigQuery navigation menu to access
    the schema of the table:![Figure 8.4 – The structure of the table lists all the
    information collected in the table
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B16722_08_004.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 8.4 – The structure of the table lists all the information collected
    in the table
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Each field is well described in the **Description** column.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The table contains the column **date**, which represents the day of the sale.
    For our purposes, we'll try to forecast the total number of liters sold on a specific
    day. For this reason, we can notice the presence of the field **volume_sold_liters**.
    This numeric field expresses the quantity of liquor sold during each transaction.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In this section, we've analyzed the metadata of the **sales** table and understood
    which fields are interesting to build our forecasting model on. Next, it's time
    to look at the actual data and start querying it.
  prefs: []
  type: TYPE_NORMAL
- en: Checking the data quality
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we'll apply some data quality checks to analyze the completeness
    of our training dataset.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start analyzing the table that will be used to build our BigQuery ML
    model:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to identify the timeframe of our dataset, let''s extract the minimum
    and maximum value of the `date` field from the `` `bigquery-public-data.iowa_liquor_sales.sales`
    `` table:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: By executing this SQL statement, we can notice that the data goes from 2012
    to the end of November 2020.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The result of the query is presented in the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 8.5 – The result of the query shows the timeframe of the dataset'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B16722_08_005.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 8.5 – The result of the query shows the timeframe of the dataset
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: For our purposes, we can focus our attention on the sales that occurred in 2018
    and 2019 to forecast the first 30 days of 2020.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In the second step, we''ll analyze the number of distinct dates that we can
    find in the chosen timeframe:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The query `COUNT` and the `DISTINCT` values available in the field `date`. With
    the expression `EXTRACT (year from date)`, the SQL statement considers only the
    sales that happened in `2018` and `2019`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The result of the query is presented in the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 8.6 – The result of the query shows the distinct dates in the dataset'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16722_08_006.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.6 – The result of the query shows the distinct dates in the dataset
  prefs: []
  type: TYPE_NORMAL
- en: From the results, it's clear that the dataset doesn't contain the information
    for each day of the 2 years. This is probably caused by missing values due to
    public holidays and store closures. This is not a big issue because BigQuery ML
    will automatically manage the missing values during the training phase.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we've performed some SQL queries to better understand our dataset,
    let's focus on creating our training dataset.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the training dataset
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we'll create a table to store the data points that will be
    used to train the forecasting model in the next section. Before training the model,
    we'll also use Data Studio to graphically analyze the time series.
  prefs: []
  type: TYPE_NORMAL
- en: 'To train our model, we''ll create a specific table that will host the historical
    data points of our time series:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create a table that contains only two fields. The first one is `date`
    and the second one is `total_sold_liters`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The query creates the table `iowa_liquor_sales` in the dataset `08_sales_forecasting`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The table contains two different fields: the `date` column represents when
    the transaction happened and the second field is calculated as the `SUM` of the
    liquor quantities sold in a day. `total_sold_liters` is an aggregated value calculated
    on the `GROUP BY date` clause and for each day of the years `2018` and `2019`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The second step will be to graphically analyze the data stored in the table
    `iowa_liquor_sales`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'As shown in the following screenshot, from the BigQuery navigation menu on
    the left, let''s select the dataset `08_sales_forecasting` and then the table
    `iowa_liquor_sales`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 8.7 – The training table iowa_liquor_sales is visible in the BigQuery
    navigation menu'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B16722_08_007.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 8.7 – The training table iowa_liquor_sales is visible in the BigQuery
    navigation menu
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: After that, let's click on **EXPORT** and then **Explore with Data Studio**
    as presented in the following screenshot:![Figure 8.8 – From BigQuery, it's possible
    to open Data Studio
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B16722_08_008.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 8.8 – From BigQuery, it's possible to open Data Studio
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Data Studio** is a free data visualization tool provided by Google and natively
    integrated with BigQuery that can be easily used to plot data in reports and diagrams.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In Data Studio, we can select **Time series chart** as the chart type as shown
    in the following screenshot:![Figure 8.9 – In Data Studio, it's possible to select
    Time series chart to visualize the data
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B16722_08_009.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 8.9 – In Data Studio, it's possible to select Time series chart to visualize
    the data
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Then, we can choose the field **date** for **Dimension** and **total_sold_liters**
    for **Metric**, as is presented in the following screenshot:![Figure 8.10 – In
    Data Studio, it's possible to select Dimension and Metric settings to draw the
    diagram
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B16722_08_010.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 8.10 – In Data Studio, it's possible to select Dimension and Metric settings
    to draw the diagram
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: After that, we can move to the **Style** tab and select **Linear interpolation**
    in the **Missing Data** combo box:![Figure 8.11 – The Linear interpolation option
    allows to improve the visualization
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: of the diagram in case of missing values
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B16722_08_011.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 8.11 – The Linear interpolation option allows to improve the visualization
    of the diagram in case of missing values
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'After these configurations, we can visualize the diagram drawn by Data Studio
    that represents the trend line of the liquor quantities sold in the selected period:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.12 – The time series is shown in Data Studio with a blue line on
    the chart'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16722_08_012.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.12 – The time series is shown in Data Studio with a blue line on the
    chart
  prefs: []
  type: TYPE_NORMAL
- en: Now that we've created the table on which our forecasting model will be trained
    and visualized the data in a diagram, let's dive into the creation of the machine
    learning model.
  prefs: []
  type: TYPE_NORMAL
- en: Training the time series forecasting model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we'll train the BigQuery ML time series forecasting model.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start training the machine learning model `liquor_forecasting`, executing
    the following SQL statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The SQL statement is composed of the following parts:'
  prefs: []
  type: TYPE_NORMAL
- en: The first lines of the query start with the keywords `CREATE OR REPLACE MODEL`,
    followed by the identifier of the machine learning model, `` `08_sales_forecasting.liquor_forecasting`
    ``, and by `OPTIONS`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now let's focus on the options that we've used to train our machine learning
    model. The selected model type is `'ARIMA'`. This option describes the algorithm
    that we're using to train the BigQuery ML forecasting model.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`time_series_timestamp_col = ''date''` specifies the column that is used to
    host the time of the data points in the time series.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The next option selects the column `total_sold_liters` as the column that stores
    the value of each data point and it's represented by the clause `time_series_data_col
    = 'total_sold_liters'`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The property `auto_arima`, set to `TRUE`, allows BigQuery ML to automatically
    identify the parameters `p`, `d`, and `q` of the model.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With the last parameter, `'AUTO_FREQUENCY'`, BigQuery automatically infers the
    frequency of the time series. In this case, the frequency is daily. The other
    options are `'HOURLY'`, `'DAILY'`, `'WEEKLY'`, `'MONTHLY'`, `'QUARTERLY'`, and
    `'YEARLY'`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The final part of the SQL statement is composed of the `SELECT` statement applied
    on the training table `iowa_liquor_sales`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that we've trained the time series forecasting model based on the ARIMA
    algorithm, let's take a look at how we can evaluate it with the BigQuery ML syntax
    and the BigQuery UI.
  prefs: []
  type: TYPE_NORMAL
- en: Evaluating the time series forecasting model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we'll evaluate the performance of the machine learning model
    that we trained in the previous one.
  prefs: []
  type: TYPE_NORMAL
- en: The evaluation stage of a time series model can be performed by using the `ML.EVALUATE`
    BigQuery ML function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s execute the following query to extract all the evaluation parameters
    that characterize the ARIMA model:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The results of the query are visualized in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.13 – The records extracted from the evaluation of the time series
    forecasting model'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16722_08_013.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.13 – The records extracted from the evaluation of the time series forecasting
    model
  prefs: []
  type: TYPE_NORMAL
- en: 'Each row defines each non-seasonal ARIMA model classified as an **ARIMA(p,d,q)**
    model. For each row, we can notice the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The field **non_seasonal_p** represents the parameter **p** of the ARIMA model.
    The value of the row is the number of autoregressive terms used for the prediction.
    It indicates the number of observations used to predict the next value of the
    time series.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The field **non_seasonal_d** represents the parameter **d** of the ARIMA model.
    The value of the row indicates how many times it's necessary to apply the difference
    between one data point and the previous one to mitigate the seasonality of the
    dataset.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**non_seasonal_q** represents the parameter **q** of the ARIMA model. It indicates
    the number of observations to calculate the moving average that is used to predict
    the next value of the time series.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**has_drift** shows if a drift constant was applied to the model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**log_likelihood** is a parameter that measures the level of fit of a statistical
    model to a specific dataset.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**AIC** represents the **Akaike Information Criterion**. This value is used
    to evaluate the goodness of the model. Lower values of AIC are generally better.
    For this reason, we can consider the first model the best.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**variance** measures how far the data points are from the average value of
    the series.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **seasonal_periods** column expresses the seasonal patterns in our data.
    In this case, BigQuery ML has identified a **WEEKLY** and **YEARLY** pattern in
    the sales time series.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that we've presented the performance indicators of our time series forecasting
    model, let's try using it to forecast the first 30 days of 2020.
  prefs: []
  type: TYPE_NORMAL
- en: Using the time series forecasting model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To use our BigQuery ML model, we'll use the `ML.FORECAST` function to specify
    the parameters for the prediction.
  prefs: []
  type: TYPE_NORMAL
- en: 'The query will extract all the fields produced by the forecast function that
    accepts the following parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: The model name, `` `08_sales_forecasting.liquor_forecasting` ``, preceded by
    the keyword `MODEL`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A `STRUCT` that includes the `horizon` of the forecast: `30` days and the `confidence_level`
    chosen for the prediction – in this case, 80%:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The execution of the query generates the records shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.14 – The results generated by the forecast function'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16722_08_014.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.14 – The results generated by the forecast function
  prefs: []
  type: TYPE_NORMAL
- en: We can notice in *Figure 8.14* that the predictions are chronologically ordered
    according to the date in the field `confidence_level` value of 0.8 means that
    80% of the predicted values should fall into the prediction interval identified
    by the fields **prediction_interval_lower_bound** and **prediction_interval_upper_bound**.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we've applied our model, let's understand how we can effectively present
    the results using Data Studio.
  prefs: []
  type: TYPE_NORMAL
- en: Presenting the forecast
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we'll create a time series diagram with Data Studio in order
    to graphically present the forecast results.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the following query, we can create a table that contains both the historical
    and forecasted values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The execution of the SQL statement generates the table `iowa_liquor_sales_forecast`,
    which is composed of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: All the records are from the training table, `iowa_liquor_sales`, from which
    we have extracted `history_date` and `history_value` of the time series. We've
    also added some `NULL` fields to standardize the schema with the second part of
    the query separated by `UNION ALL`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All the forecasted records generated by the `ML.FORECAST` function were already
    applied in the previous section, *Using the time series forecasting model*. It's
    particularly interesting to notice that we don't extract only `forecast_value`,
    but also the lower and upper bounds of our predictions represented by the fields
    `prediction_interval_lower_bound` and `prediction_interval_upper_bound`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The presence of the `CAST` function, applied to the column `forecast_timestamp`,
    is necessary to change the data type from `TIMESTAMP` to `DATE` according to the
    schema of the training table.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'As we''ve already done in the section *Creating the training dataset*, we can
    now do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Select from the BigQuery navigation menu the `iowa_liquor_sales_forecast` table
    that we just created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Export** and then **Explore with Data Studio** to access the reporting
    tool.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **chart** panel, choose **Time series chart**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag and drop **history_value**, **forecast_value**, **prediction_interval_lower_bound**,
    and **prediction_interval_upper_bound** into the **Metric** panel as shown in
    the following screenshot:![Figure 8.15 – The DATA panel allows us to customize
    the metrics of the chart
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B16722_08_015.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 8.15 – The DATA panel allows us to customize the metrics of the chart
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Move to the **Style** panel and scroll down until we find the **Missing Data**
    section. Here, we select **Linear interpolation**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, at the top of the screen, we can apply a filter on the **date** column
    to focus our chart only on the period that goes from the first of **December 2019**
    until the thirtieth of **January 2020**:![Figure 8.16 – Application of the filter
    on the date column
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B16722_08_016.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 8.16 – Application of the filter on the date column
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Clicking on **APPLY**, the chart will be finally visualized as shown in the
    following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.17 – Time series chart in Data Studio'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16722_08_017.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.17 – Time series chart in Data Studio
  prefs: []
  type: TYPE_NORMAL
- en: Looking at the legend of the diagram, we can visualize the historical and the
    forecasted values represented by different colors. We can also notice that the
    **forecast_value** line is always included in the prediction interval.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we've built our time series forecasting machine learning model.
    After the introduction of the business scenario, we discovered what time series
    forecasting is, and in particular, the ARIMA algorithm that is used to predict
    values from historical data points.
  prefs: []
  type: TYPE_NORMAL
- en: Before diving into the development of the BigQuery ML model, we applied some
    analyses on the data collected by the state of Iowa related to liquor sales in
    the shops of the territory. For this purpose, we introduced the use of the reporting
    tool Data Studio, which can be easily accessed by the BigQuery UI and be leveraged
    to draw a time series chart.
  prefs: []
  type: TYPE_NORMAL
- en: We then created our training table, which includes the time series of historical
    data, and trained our BigQuery ML model on it. Then, we evaluated the time series
    forecasting model by leveraging the BigQuery ML SQL syntax.
  prefs: []
  type: TYPE_NORMAL
- en: In the last step, we forecasted the quantity of liquor sold in Iowa with a horizon
    of 30 days and drew the results in a Data Studio dashboard that could be presented
    to non-technical people.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll introduce the matrix factorization algorithm to build
    recommendation engines.
  prefs: []
  type: TYPE_NORMAL
- en: Further resources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Iowa Liquor Retail Sales Public Dataset**: [https://console.cloud.google.com/marketplace/product/iowa-department-of-commerce/iowa-liquor-sales](https://console.cloud.google.com/marketplace/product/iowa-department-of-commerce/iowa-liquor-sales)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**BigQuery ML Create Model**: [https://cloud.google.com/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-create](https://cloud.google.com/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-create)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**BigQuery ML Evaluate Model**: [https://cloud.google.com/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-evaluate](https://cloud.google.com/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-evaluate)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**BigQuery ML Forecast**: [https://cloud.google.com/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-forecast](https://cloud.google.com/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-forecast)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**BigQuery ML Time Series Forecasting example**: [https://cloud.google.com/bigquery-ml/docs/arima-single-timeseries-forecasting-tutorial](https://cloud.google.com/bigquery-ml/docs/arima-single-timeseries-forecasting-tutorial)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
