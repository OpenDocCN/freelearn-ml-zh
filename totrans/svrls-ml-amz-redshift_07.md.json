["```py\n    create schema chapter7_RegressionModel;\n    ```", "```py\n    --create table to load data\n    ```", "```py\n    DROP TABLE chapter7_RegressionModel.height_weight;\n    ```", "```py\n    CREATE TABLE chapter7_RegressionModel.height_weight\n    ```", "```py\n    (\n    ```", "```py\n        Id integer,\n    ```", "```py\n        HeightInches decimal(9,2),\n    ```", "```py\n        weightPounds decimal(9,2)\n    ```", "```py\n    )\n    ```", "```py\n    ;\n    ```", "```py\n    TRUNCATE chapter7_RegressionModel.height_weight;\n    ```", "```py\n    COPY chapter7_RegressionModel.height_weight\n    ```", "```py\n    FROM 's3://packt-serverless-ml-redshift/chapter07/heightweight/HeightWeight.csv'\n    ```", "```py\n    IAM_ROLE default\n    ```", "```py\n    CSV\n    ```", "```py\n    IGNOREHEADER 1\n    ```", "```py\n    REGION AS 'eu-west-1';\n    ```", "```py\n    SELECT * FROM\n    ```", "```py\n    chapter7_RegressionModel.height_weight\n    ```", "```py\n    ORDER BY 2,3;\n    ```", "```py\nSELECT * FROM\nchapter7_RegressionModel.height_weight Where id%8!=0;\n```", "```py\nSELECT * FROM\nchapter7_RegressionModel.height_weight Where id%8=0;\n```", "```py\nDROP MODEL chapter7_RegressionModel.predict_weight;\nCREATE MODEL chapter7_RegressionModel.predict_weight\nFROM (select heightinches, cast(round(weightpounds,0) as integer) weightpounds from chapter7_RegressionModel.height_weight where id%8!=0 )\nTARGET weightpounds\nFUNCTION predict_weight\nIAM_ROLE default\nMODEL_TYPE xgboost\nPROBLEM_TYPE regression\nOBJECTIVE 'mse'\nSETTINGS (s3_bucket '<<your-S3-bucket>>',\n          s3_garbage_collect off,\n          max_runtime 3600);\n```", "```py\nSHOW MODEL chapter7_RegressionModel.predict_weight;\n```", "```py\nSELECT heightinches, CAST(chapter7_RegressionModel.predict_weight(CAST(ROUND(heightinches,0) as integer)) as INTEGER) as Predicted_Weightpounds,\n  CAST(ROUND(weightpounds,0) as INTEGER) Original_Weightpounds ,\n  Predicted_Weightpounds - Original_Weightpounds  as Difference\n  FROM chapter7_RegressionModel.height_weight WHERE id%8=0\n  AND Predicted_Weightpounds - Original_Weightpounds = 0;\n```", "```py\n  SELECT\n   ROUND(AVG(POWER(( Original_Weightpounds - Predicted_Weightpounds ),2)),2) mse\n    , ROUND(SQRT(AVG(POWER(( Original_Weightpounds - Predicted_Weightpounds ),2))),2) rmse\nFROM\n    ( select heightinches, cast(chapter7_RegressionModel.predict_weight(cast(round(heightinches,0) as integer)) as integer) as Predicted_Weightpounds,\n  cast(round(weightpounds,0) as integer) Original_Weightpounds ,\n  Predicted_Weightpounds - Original_Weightpounds as Difference\n  from chapter7_RegressionModel.height_weight where id%8=0\n);\n```", "```py\n select heightinches, cast(chapter7_RegressionModel.predict_weight(cast(round(heightinches,0) as integer)) as integer) as Predicted_Weightpounds,\n  cast(round(weightpounds,0) as integer) Original_Weightpounds ,\n  Predicted_Weightpounds - Original_Weightpounds as Difference\n  from chapter7_RegressionModel.height_weight where id%8=0;\n```", "```py\nCREATE TABLE chapter7_RegressionModel.sporting_event_ticket_info (\nticket_id double precision ,\nevent_id bigint,\nsport character varying(500),\nevent_date_time timestamp without time zone,\nhome_team character varying(500),\naway_team character varying(500),\nlocation character varying(500),\ncity character varying(500),\nseat_level bigint,\nseat_section bigint,\nseat_row character varying(500),\nseat bigint ENCODE az64,\nlist_ticket_price double precision,\nfinal_ticket_price double precision ,\nticketholder character varying(500)\n)\nDISTSTYLE AUTO;\nCOPY chapter7_RegressionModel.sporting_event_ticket_info\nFROM 's3://packt-serverless-ml-redshift/chapter07/ticket_info'\nIAM_ROLE default\nFORMAT AS CSV DELIMITER ',' QUOTE '\"'\nREGION AS 'eu-west-1';\n```", "```py\nSelect extract(month from event_date_time) as month,\nsum(cast (final_ticket_price as decimal(8,2))) as ticket_revenue\nFrom chapter7_RegressionModel.sporting_event_ticket_info\nwhere event_date_time < '2019-10-27'\ngroup by 1\norder by 1;\n```", "```py\n    CREATE TABLE chapter7_RegressionModel.sporting_event_ticket_info_training (\n    ```", "```py\n        ticket_id double precision ,\n    ```", "```py\n        event_id bigint,\n    ```", "```py\n        sport character varying(500),\n    ```", "```py\n        event_date_time timestamp without time zone,\n    ```", "```py\n        home_team character varying(500),\n    ```", "```py\n        away_team character varying(500),\n    ```", "```py\n        location character varying(500),\n    ```", "```py\n        city character varying(500),\n    ```", "```py\n        seat_level bigint,\n    ```", "```py\n        seat_section bigint,\n    ```", "```py\n        seat_row character varying(500),\n    ```", "```py\n        seat bigint ENCODE az64,\n    ```", "```py\n        list_ticket_price double precision,\n    ```", "```py\n        final_ticket_price double precision ,\n    ```", "```py\n        ticketholder character varying(500)\n    ```", "```py\n    )\n    ```", "```py\n    DISTSTYLE AUTO;\n    ```", "```py\n    --insert ~70% of data into training_set\n    ```", "```py\n    insert into   chapter7_RegressionModel.sporting_event_ticket_info_training\n    ```", "```py\n    (  ticket_id ,event_id ,sport , event_date_time,  home_team , away_team , location , city , seat_level, seat_section,\n    ```", "```py\n        seat_row ,  seat, list_ticket_price, final_ticket_price, ticketholder )\n    ```", "```py\n     select\n    ```", "```py\n     ticket_id ,event_id ,sport , event_date_time,  home_team , away_team , location , city , seat_level, seat_section,\n    ```", "```py\n        seat_row ,  seat, list_ticket_price, final_ticket_price, ticketholder\n    ```", "```py\n     from chapter7_RegressionModel.sporting_event_ticket_info\n    ```", "```py\n     where event_date_time < '2019-10-20';\n    ```", "```py\n    CREATE TABLE chapter7_RegressionModel.sporting_event_ticket_info_validation (\n    ```", "```py\n        ticket_id double precision ,\n    ```", "```py\n        event_id bigint,\n    ```", "```py\n        sport character varying(500),\n    ```", "```py\n        event_date_time timestamp without time zone,\n    ```", "```py\n        home_team character varying(500),\n    ```", "```py\n        away_team character varying(500),\n    ```", "```py\n        location character varying(500),\n    ```", "```py\n        city character varying(500),\n    ```", "```py\n        seat_level bigint,\n    ```", "```py\n        seat_section bigint,\n    ```", "```py\n        seat_row character varying(500),\n    ```", "```py\n        seat bigint ENCODE az64,\n    ```", "```py\n        list_ticket_price double precision,\n    ```", "```py\n        final_ticket_price double precision ,\n    ```", "```py\n        ticketholder character varying(500)\n    ```", "```py\n    )\n    ```", "```py\n    DISTSTYLE AUTO;\n    ```", "```py\n    insert into  chapter7_RegressionModel.sporting_event_ticket_info_validation\n    ```", "```py\n    (  ticket_id ,event_id ,sport , event_date_time,  home_team , away_team , location , city , seat_level, seat_section,\n    ```", "```py\n        seat_row ,  seat, list_ticket_price, final_ticket_price, ticketholder )\n    ```", "```py\n     select\n    ```", "```py\n     ticket_id ,event_id ,sport , event_date_time,  home_team , away_team , location , city , seat_level, seat_section,\n    ```", "```py\n        seat_row ,  seat, list_ticket_price, final_ticket_price, ticketholder\n    ```", "```py\n     from chapter7_RegressionModel.sporting_event_ticket_info\n    ```", "```py\n     where event_date_time between '2019-10-20' and '2019-10-22' ;\n    ```", "```py\n    CREATE TABLE chapter7_RegressionModel.sporting_event_ticket_info_testing (\n    ```", "```py\n        ticket_id double precision ,\n    ```", "```py\n        event_id bigint,\n    ```", "```py\n        sport character varying(500),\n    ```", "```py\n        event_date_time timestamp without time zone,\n    ```", "```py\n        home_team character varying(500),\n    ```", "```py\n        away_team character varying(500),\n    ```", "```py\n        location character varying(500),\n    ```", "```py\n        city character varying(500),\n    ```", "```py\n        seat_level bigint,\n    ```", "```py\n        seat_section bigint,\n    ```", "```py\n        seat_row character varying(500),\n    ```", "```py\n        seat bigint ENCODE az64,\n    ```", "```py\n        list_ticket_price double precision,\n    ```", "```py\n        final_ticket_price double precision ,\n    ```", "```py\n        ticketholder character varying(500)\n    ```", "```py\n    )\n    ```", "```py\n    DISTSTYLE AUTO;\n    ```", "```py\n    insert into   chapter7_RegressionModel.sporting_event_ticket_info_testing\n    ```", "```py\n    (  ticket_id ,event_id ,sport , event_date_time,  home_team , away_team , location , city , seat_level, seat_section,\n    ```", "```py\n        seat_row ,  seat, list_ticket_price, final_ticket_price, ticketholder )\n    ```", "```py\n    select\n    ```", "```py\n     ticket_id ,event_id ,sport , event_date_time,  home_team , away_team , location , city , seat_level, seat_section,\n    ```", "```py\n        seat_row ,  seat, list_ticket_price, final_ticket_price, ticketholder\n    ```", "```py\n     from chapter7_RegressionModel.sporting_event_ticket_info\n    ```", "```py\n     where event_date_time >  '2019-10-22'\n    ```", "```py\n     ;\n    ```", "```py\nCREATE MODEL chapter7_RegressionModel.predict_ticket_price_linlearn from\nchapter7_RegressionModel.sporting_event_ticket_info_training\nTARGET final_ticket_price\nFUNCTION predict_ticket_price_linlearn\nIAM_ROLE default\nMODEL_TYPE LINEAR_LEARNER\nPROBLEM_TYPE regression\nOBJECTIVE 'mse'\nSETTINGS (s3_bucket '<<your-S3-Bucket>>',\ns3_garbage_collect off,\nmax_runtime 9600);\n```", "```py\nSHOW MODEL chapter7_RegressionModel.predict_ticket_price_linlearn;\n```", "```py\nSELECT\n      ROUND(AVG(POWER(( actual_price_revenue - predicted_price_revenue ),2)),2) mse\n    , ROUND(SQRT(AVG(POWER(( actual_price_revenue - predicted_price_revenue ),2))),2) rmse\nFROM\n    (select home_team, chapter7_RegressionModel.predict_ticket_price_linlearn (ticket_id, event_id, sport, event_date_time, home_team, away_team,\nLocation, city, seat_level, seat_section, seat_row, seat,\nlist_ticket_price ,ticketholder ) as predicted_price_revenue,\n final_ticket_price  as actual_price_revenue\nFrom chapter7_RegressionModel.sporting_event_ticket_info_validation\n     );\n```", "```py\nSelect home_team,\nsum(cast(chapter7_RegressionModel.predict_ticket_price_linlearn (ticket_id, event_id, sport,\nevent_date_time, home_team, away_team,\nLocation, city, seat_level, seat_section, seat_row, seat,\nlist_ticket_price ,ticketholder ) as decimal(8,2) )) as predicted_price_revenue,\nsum(cast (final_ticket_price as decimal(8,2))) as actual_price_revenue,\n(predicted_price_revenue - actual_price_revenue) as diff,\nabs((predicted_price_revenue - actual_price_revenue)/actual_price_revenue) * 100  as pct_diff\nFrom chapter7_RegressionModel.sporting_event_ticket_info_validation\ngroup by 1\norder by 5 desc ;\n```", "```py\nCREATE MODEL Chapter7_RegressionModel.predict_ticket_price_auto\nfrom\nchapter7_RegressionModel.sporting_event_ticket_info_training\nTARGET final_ticket_price\nFUNCTION predict_ticket_price_auto\nIAM_ROLE default\nPROBLEM_TYPE regression\nOBJECTIVE 'mse'\nSETTINGS (s3_bucket '<<your-S3-bucket>>',\ns3_garbage_collect off,\nmax_runtime 9600);\n```", "```py\nSHOW MODEL Chapter7_RegressionModel.predict_ticket_price_auto;\n```", "```py\nSELECT\n      ROUND(AVG(POWER(( actual_price_revenue - predicted_price_revenue ),2)),2) mse\n    , ROUND(SQRT(AVG(POWER(( actual_price_revenue - predicted_price_revenue ),2))),2) rmse\nFROM\n    (select home_team, chapter7_RegressionModel.predict_ticket_price_auto (ticket_id, event_id, sport, event_date_time, home_team, away_team,\nLocation, city, seat_level, seat_section, seat_row, seat,\nlist_ticket_price ,ticketholder ) as predicted_price_revenue,\n final_ticket_price  as actual_price_revenue\nFrom chapter7_RegressionModel.sporting_event_ticket_info_validation\n     );\n```", "```py\nSelect home_team,\nsum(cast(chapter7_RegressionModel.predict_ticket_price_auto (ticket_id, event_id, sport, event_date_time, home_team, away_team,\nLocation, city, seat_level, seat_section, seat_row, seat,\nlist_ticket_price ,ticketholder ) as decimal(8,2) )) as predicted_price_revenue,\nsum(cast (final_ticket_price as decimal(8,2))) as actual_price_revenue,\n(predicted_price_revenue - actual_price_revenue) as diff,\n((predicted_price_revenue - actual_price_revenue)/actual_price_revenue) * 100  as pct_diff\nFrom chapter7_RegressionModel.sporting_event_ticket_info_validation\ngroup by 1\norder by 5 desc;\n```", "```py\nset search_path to chapter7_regressionmodel;\nselect json_table.report.explanations.kernel_shap.label0.global_shap_values from\n (select explain_model('predict_ticket_price_auto') as report) as json_table\n```", "```py\nselect t1.home_team, predicted_price_revenue\nfrom\n(Select home_team,\nsum(cast(chapter7_RegressionModel.predict_ticket_price_auto (ticket_id, event_id, sport, event_date_time, home_team, away_team,\nLocation, city, seat_level, seat_section, seat_row, seat,\nlist_ticket_price ,ticketholder ) as decimal (8,2) ) ) as predicted_price_revenue\nFrom chapter7_RegressionModel.sporting_event_ticket_info_testing\ngroup by 1) t1\nwhere predicted_price_revenue < 200000;\n```"]