["```py\nbegin\n    t1 = now()\n    result = sum(rand(10_000_000))\n    t2 = now()\n    elapsed = t2 - t1\n    println(\"It took \", elapsed)\n    result\nend\n```", "```py\nfunction timeit(func)\n    t1 = now()\n    result = func()\n    t2 = now()\n    elapsed = t2 - t1\n    println(\"It took \", elapsed)\n    result\nend\n```", "```py\nfor i in 1:3\n    println(\"hello: \", i)\nend\n```", "```py\nprintln(\"hello: \", 1)\nprintln(\"hello: \", 2)\nprintln(\"hello: \", 3)\n```", "```py\nusing Unrolled\n\n@unroll function hello(xs)\n    @unroll for i in xs\n        println(\"hello: \", i)\n    end\nend\n```", "```py\nExpr(head::Symbol, args...)\n```", "```py\nmacro hello()\n    return :(\n    for i in 1:3\n        println(\"hello world\")\n    end\n    )\nend\n```", "```py\nmacro hello(n)\n    return :(\n    for i in 1:$n\n        println(\"hello world\")\n    end\n    )\nend\n```", "```py\nmacro identity(ex)\n    dump(ex)\n    return ex\nend\n```", "```py\nmacro squared(ex)\n    return :($(ex) * $(ex))\nend\n```", "```py\nfunction foo()\n    x = 2\n    return @squared x\nend\n```", "```py\nmacro squared(ex)\n    return :($(esc(ex)) * $(esc(ex)))\nend\n```", "```py\nmacro compose_twice(ex)\n    @assert ex.head == :call\n    @assert length(ex.args) == 2\n    me = copy(ex)\n    ex.args[2] = me\n    return ex\nend\n```", "```py\n#include <stdio.h>\n\n#define SWAP(a,b) temp=a; a=b; b=temp;\n\nint main(int argc, char *argv[])\n{\n    int a = 1;\n    int temp = 2;\n\n    SWAP(a,temp);\n    printf(\"a=%d, temp=%d\\n\", a, temp);\n}\n```", "```py\nmacro ntimes(n, ex)\n    quote\n        times = $(esc(n))\n        for i in 1:times\n            $(esc(ex))\n        end\n    end\nend\n```", "```py\nfunction foo()\n    times = 0\n    @ntimes 3 println(\"hello world\")\n    println(\"times = \", times)\nend\n```", "```py\nmacro ndf_str(s)\n    nstr, spec = split(s, \":\")\n    n = parse(Int, nstr) # number of rows\n    types = split(spec, \",\") # column type specifications\n\n    num_columns = length(types)\n\n    mappings = Dict(\n    \"f64\"=>Float64, \"f32\"=>Float32,\n    \"i64\"=>Int64, \"i32\"=>Int32, \"i16\"=>Int16, \"i8\"=>Int8)\n\n    column_types = [mappings[t] for t in types]\n    column_names = [Symbol(\"x$i\") for i in 1:num_columns]\n\n    DataFrame([column_names[i] => rand(column_types[i], n)\n        for i in 1:num_columns]...) \nend\n```", "```py\nmacro doubled(ex)\n    return :( 2 * $(esc(ex)))\nend\n```", "```py\n# This code does not work. Don't try it.\nmacro doubled(ex)\n    if typeof(ex) isa AbstractFloat\n        return :( double_super_duper($(esc(ex))) )\n    else\n        return :( 2 * $(esc(ex)))\n    end\nend\n```", "```py\n@generated function doubled(x)\n    return :( 2 * x )\nend\n```", "```py\n@generated function doubled(x)\n    @show x\n    return :( 2 * x )\nend\n```", "```py\n@generated function doubled(x)\n    if x <: AbstractFloat\n        return :( double_super_duper(x) )\n    else\n        return :( 2 * x )\n    end\n end\n```"]