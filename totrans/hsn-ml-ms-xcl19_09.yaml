- en: Data Mining Models in Excel Hands-On Examples
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Data mining is about finding hidden patterns and associations in data. A large
    number of analyses that can only be performed by a human in a reasonable time
    if the amount of data is small, can be done by a computer in a very short time.
    Before Excel 2016, it was possible to install an add-in (called **Data Mining**)
    that was packed with different methods and models that could be used, mostly as
    black boxes, to get insights and discover information in any dataset. Microsoft
    then changed its policy and started migrating this capability to the cloud, first
    to Office 365 and, most recently, to Azure. It is also possible to calculate many
    things in Excel, with built-in functions and even with the help of macros programmed
    in **Visual Basic Applications** (**VBA**). Here, we will show two cases where
    data mining can help us find important information hidden in our data.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Learning by example: Market Basket Analysis'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learning by example: Customer Cohort Analysis
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Market Basket Analysis studies which pairs of product/services are often bought
    together by customers. Customer Cohort Analysis analyses which customers are still
    buying products/services after a given amount of time and which ones *churn*.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To complete this section, the reader will need to download the `transactions_by_dept.csv`
    and `cohort_input_data.csv` files from the GitHub repository at [https://github.com/PacktPublishing/Hands-On-Machine-Learning-with-Microsoft-Excel-2019/tree/master/Chapter06](https://github.com/PacktPublishing/Hands-On-Machine-Learning-with-Microsoft-Excel-2019/tree/master/Chapter06).
  prefs: []
  type: TYPE_NORMAL
- en: Learning by example – Market Basket Analysis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We have all read the sentence in almost every online store: *People who bought
    this product also bought...*. It all started with Amazon in the 1990s, and it
    is widespread today. This same principle is even being tested in physical stores,
    where customers can get personalized suggestions on which items to buy based on
    their shopping history and similarity with other products. These techniques are
    generally known as cross-selling, and they are useful since it is often easier
    to sell an additional product to an existing customer than to acquire a new one.'
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will show a simplified example of Market Basket Analysis,
    which is the type of data mining technique behind these recommender systems. The
    results might not be as accurate as those obtained with more advanced methods,
    but are still useful to explain the method and to teach how to escalate it.
  prefs: []
  type: TYPE_NORMAL
- en: We will use a list of commercial transactions downloaded from [https://data.world/](https://data.world/).
    Start by loading the `transactions_by_dept.csv` file the usual way. Navigate to
    Data | From Text/CSV and select the file.
  prefs: []
  type: TYPE_NORMAL
- en: You will need to edit the table in Power Query to change the data type of the
    first column to Text, since it contains the transaction ID, and will probably
    be interpreted as a number and truncated by Excel.
  prefs: []
  type: TYPE_NORMAL
- en: 'The resulting table looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d202be3a-3433-4c26-84b5-b9ea0a2e93fd.png)'
  prefs: []
  type: TYPE_IMG
- en: In this particular example, we will concentrate only on the first two columns.
    `POS Txn`contains the transaction ID, while `Dept` shows a description of the
    department where the transaction took place. Our goal is to find out how frequently
    the same customer shops in different departments in one single transaction.
  prefs: []
  type: TYPE_NORMAL
- en: In our findings we will see obvious, uninteresting combinations; unexpected
    ones that can be explained and exploited (for example, by offering products sold
    in one department when shopping in a related one), and combinations we cannot
    explain (which might occur by chance or simply need further investigation).
  prefs: []
  type: TYPE_NORMAL
- en: 'To start our analysis, we need to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Group all transactions by transaction number.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Build a list of all the departments visited in each particular purchase.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To perform these tasks, we will use the Power Query capabilities, following
    these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to Data | From Table/Range.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make sure that the data type of the `POS Txn` column is set to Text before continuing.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on Group by*.* You will see the following pop-up window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/35d06f1d-2e2a-4c55-9135-176351c9a222.png)'
  prefs: []
  type: TYPE_IMG
- en: Select the grouping by `POS Txn`,change the name of the new column to something
    meaningful, like `Concat_dept` (since we are trying to concatenate all departments
    visited in one purchase in a single string), and select any Operation*.* Click the OKbutton
    at the lower-right corner of the window, similar to the one shown in the preceding
    screenshot.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Change the calculation formula manually to get the data transformation we want. Navigate
    to View and make sure that Formula Bar is selected. If not, select it, and you
    will see the following formula:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*= Table.Group(#"Changed Type", {"POS Txn"}, {{"Concat_dept", each Table.RowCount(_),
    type number}})*'
  prefs: []
  type: TYPE_NORMAL
- en: 'The preceding formula is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/685d3625-7faf-4ca3-a863-52e5ec1d052b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The formula must be replaced by the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*= Table.Group(#"Changed Type", {"POS Txn"}, {{"Concat_dept", each Text.Combine([Dept],"
    | "), type text}})*'
  prefs: []
  type: TYPE_NORMAL
- en: 'The difference is that, instead of counting rows in the table (*Table.RowCount*),
    we concatenate them, using *"|"* as a delimiter (*Text.Combine*). We are also
    changing the output type to *text. *The output should look similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/86e13d24-162e-4a68-9295-071d69eb5056.png)'
  prefs: []
  type: TYPE_IMG
- en: 'For each transaction ID, we now have a string representing the list of the
    departments involved. We are going to use this table to count the combinations
    of departments, but first, we convert it to a range:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on any cell within the table and go to Table | Convert to Range.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename the sheet to `Concat depts`(use the same name so that the references
    in future functions are correct).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In a real-life example, we might have to limit the time period we are analyzing
    to reduce the amount of calculations needed and clean the data, leaving out unusual
    transactions (outliers). In our case, we will limit the number of combinations
    studied. We could take the departments in pairs, triads, or even larger numbers.
    The problem is that the number of combinations quickly scales with the number
    of departments. In fact, this number can be calculated as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a55b261b-4b99-4605-8b01-025b39de83f7.png)'
  prefs: []
  type: TYPE_IMG
- en: Here, *m* is the total number of elements and *n* is the number of elements
    in each combination. This calculation takes into account that the elements cannot
    be repeated (it doesn't make sense to compare a department with itself), and the
    order is irrelevant.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will select the top 10 departments according to the number of transactions
    and calculate the combinations using Excel functions. In order to do this, perform
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a PivotTable as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c64a6138-e705-434d-94f3-0b20dba90d67.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Order the rows by the count of transactions to get the top 10:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: How can we easily build all possible combinations of two departments? It is
    simple if we define the cell contents correctly and use the copy feature built
    in to Excel.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s assume that the 10 departments are listed in cells *A1:A10*. Then follow
    these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create two new columns that you can label `X` and `Y`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Define the first cell in column `X` as *=$A$1* and the first cell in column
    `Y` as *=A2.*
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select both cells and copy them down until column `Y` shows an empty value.
    Remember that the *$* symbol fixes the cell value when copying.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will get a list as shown in the following screenshot, containing all possible
    `X-Y` pairs of departments:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/17b2795a-2542-4ff3-b956-053b80d2dfd5.png)'
  prefs: []
  type: TYPE_IMG
- en: In the cells following the last in this list, define `X` as *= $A$2* and `Y`
    as *= A3*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Repeat the copy operation. If you continue until defining `X` as *= $A$9* and
    `Y` as *= A10*, you will get the full list of combinations.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The total number of elements should be as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/03d5fd46-e562-4299-babd-f7a4cc68dca1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Going back to our `Cancat depts` sheet, we need to count the number of transactions
    in which each pair appears in the same transaction (`X` and `Y`) and the number
    of times that each department appears. We will define two functions:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, we assume that the concatenated department names are in column *B* in
    the `Concat depts`  sheet(this is why it needs to be named like that; if you understand
    the function you can change the name), and columns *C* and *D* contain the `X`
    and `Y` list respectively. The two *COUNTIF* functions account for the fact that
    the department names can appear in a different order, as shown in the following
    formula:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*X&Y = =COUNTIF(''Concat depts''!$B$2:$B$2065;"*"&C2&"*"&D2&"*")+COUNTIF(''Concat
    depts''!$B$2:$B$2065;"*"&D2&"*"&C2&"*")*'
  prefs: []
  type: TYPE_NORMAL
- en: 'We copy the following formulas until we reach the last element, that is, number
    `45`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*X = COUNTIF(''Concat depts''!$B$2:$B$2065;"*"&C2&"*")*'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will calculate the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Support = X&Y/N*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Confidence = X&Y/X*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, *N* is the total number of transactions. *Support* represents the frequency
    of the rule (combination of departments) in the data, and *Confidence* is an estimation
    of the conditional probability of a transaction involving the `X` and `Y` departments
    at the same time. Adding these two columns, we get a table as shown in the following
    screenshot, showing the results of the calculations:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7dca0b75-28a6-47c1-be40-800864c252c8.png)'
  prefs: []
  type: TYPE_IMG
- en: The calculations we have just performed are the basis of the Apriori algorithm, published
    by R. Agrawal and R. Srikant in 1994 for finding frequent item sets in a dataset
    for Boolean association rules, so named because it uses prior knowledge of frequent
    item set properties. The Apriori algorithm is also useful in mining frequent item
    sets and relevant association rules. Usually, this algorithm is used to operate
    on a database containing a large number of transactions, such as items that customers
    buy at a supermarket. It helps customers to easily make their purchases and enhances
    the sales performance of the store. It is important to notice that the correlation
    between items does not imply causation; for example, that buying one item causes
    someone to buy another.
  prefs: []
  type: TYPE_NORMAL
- en: In a real-world scenario, we would choose the combinations with the largest
    *Support* and *Confidence* above a certain threshold, and study those insights.
    Apart from obvious rules, such as people shopping at the spirits and wine departments
    in the same purchase, we will find other combinations that we didn't expect. The
    main point is to find actionable insights; that is, those we can do something
    about. We can offer new articles, combine them in promotions, and advertise them
    in different places.
  prefs: []
  type: TYPE_NORMAL
- en: There are a large number of possibilities. The important thing is that the machine
    has learned hidden associations and has given us useful information about our
    own business. It is extremely important that it is not only machine learning specialists
    who are a part of these analyses, but also people involved in the business should
    give their impressions and use their experience and knowledge to turn this information
    into an economic benefit.
  prefs: []
  type: TYPE_NORMAL
- en: Can a full analysis be carried out in Excel? Should we limit ourselves to a
    toy model if we don't have access to more advanced tools? Of course not! Excel
    is extremely powerful and able to be used in advanced analyses, but we need to
    know how to write a little VBA code in macros.
  prefs: []
  type: TYPE_NORMAL
- en: The concept of Market Basket Analysis should be clear now, and we can move forward
    to another example of customer behavior analysis.
  prefs: []
  type: TYPE_NORMAL
- en: Learning by example – Customer Cohort Analysis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An excellent way of gaining insights about a company's customers and their behavior
    is to perform a segmented analysis. These segments are groups of customers that
    share the same characteristics and are usually called **cohorts**. Their definition
    depends very much on the type of business we are dealing with.
  prefs: []
  type: TYPE_NORMAL
- en: The dataset we will analyze contains a list of customer IDs, the date when they
    first purchased something from us, the day they left us, and the mean amount of
    money spent per month. What does "left us*"* mean in this context? It is mainly
    a matter of definition. For example, if we refer to a credit card, we could consider
    that the customer left when they cancelled the card, or maybe we want to go further
    and say that if the customer did not spend any money for two or three months,
    we consider that they have left.
  prefs: []
  type: TYPE_NORMAL
- en: Our grouping will then be based on the starting date. We will study how many
    customers **churned**, or abandoned us in a given period.
  prefs: []
  type: TYPE_NORMAL
- en: The **Lifetime Value of a Customer** (**LTV**) often refers to the gross profit
    generated by this customer over the whole period that they stayed with us. Both
    analyses together help us decide which customers we must retain and which actions
    were more effective in acquiring more valuable customers in terms of monthly spend
    and fidelity.
  prefs: []
  type: TYPE_NORMAL
- en: 'The analysis comprises the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Read the `cohort_input_data.csv` input file, navigating to Data | From Text/CSV
    and selecting it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The two date columns, `Date in` and `Date out`, look better and are easier
    to understand if we choose the *month-year* format for them. Select the columns,
    right-click on them, and click on Format Cells. A pop-up window, like the one
    in the following screenshot, will appear:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/18076bf4-8444-4adc-bd25-3b955addd14a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Add two columns: `Cohort`, which in this case is equal to `Date in`, and `Active
    months`, which we can calculate as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*=DATEDIF(B2;C2;"m")*'
  prefs: []
  type: TYPE_NORMAL
- en: This assumes that column *B* contains the `Data in` values and column *C* contains
    the `Data out` values.
  prefs: []
  type: TYPE_NORMAL
- en: 'Copy this formula to the remaining cells. The resulting table, sorted by `Date
    in`, is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/bb8f39f7-2083-4345-9b9b-0f459a662794.png)'
  prefs: []
  type: TYPE_IMG
- en: Rename this sheet `Customer data` for future reference.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'First, we will study how well we retained customers over the lifetime of a
    given cohort. Each group will tell us what actions to repeat and which to avoid
    to prevent customer churn. We will use the *COUNTIFS* Excel function to count
    the number of active customers per month in each cohort:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a matrix with 48 rows, from zero to the largest difference in months
    in our dataset (48 months), and one column per month, from `Feb-15` to `Jan-19`.
    An example of this matrix can be seen in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/dfca291b-2ee9-4a2a-944c-1639f8e2e841.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Add a row at the end of the table to calculate the total number of customers
    in each cohort by using the following formula:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*=COUNTIF(''Customer* data''!$E$2:$E$751;"="&C$1)'
  prefs: []
  type: TYPE_NORMAL
- en: This is because column *E* in the `Customer data` sheet contains the list of
    cohorts, and row one contains the list of cohorts in our matrix.
  prefs: []
  type: TYPE_NORMAL
- en: 'Copy the cell contents to all cells to the right in the table, and, since the
    row is fixed, the correct values are calculated for each column, as shown in the
    following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/bba4ea96-0edf-4e25-ad55-7329cc445b95.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the first cell of the matrix, write the following formula:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*=COUNTIFS(''Customer data''!$E$2:$E$751;"="&C$1;''Customer data''!$C$2:$C$751;">"&EOMONTH(C$1;$B1))/C$52*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see in detail what it means:'
  prefs: []
  type: TYPE_NORMAL
- en: We only count if the contents of *C1* (`Feb-15`, the current cohort) are part
    of the list of cohorts in column *E* inthe `Customer data` sheet.
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: We count if `Date out` (column *C* inthe `Customer data` sheet ) is larger than
    the current cohort plus the number of months in column *B*. We use the *EOMONTH* function
    to deal with the fact that we might have full dates as inputs, and not just months
    and years. Check the definition of this function in Excel help.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: We finally divide this by the total number of customers to get a percentage.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Copy the formula to the whole matrix.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Format the cells as a percentage.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Format the cells conditionally using a three-color scale. The result looks
    like the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/75ab0c52-61ac-4180-9d12-e0c2454c64e6.png)'
  prefs: []
  type: TYPE_IMG
- en: We can see, for example, that after 20 months, only 19% of the customers acquired
    in `Feb-15` remain. The color scale also shows that some cohorts show a faster
    churn than others. It is now necessary for the business expert to evaluate what
    actions were actions taken during each time period and repeat or change them.
  prefs: []
  type: TYPE_NORMAL
- en: 'We know now how many customers we were able to keep, but what was their value?
    They do not spend the same amount, so we need to include that variable in the
    analysis. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a similar matrix, with the month number and cohorts, but now we will
    use a different formula:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*=SUMIFS(''Customer* data''!$D$2:$D$751;''Customer data''!$E$2:$E$751;"="&C$1;''Customer
    data''!$C$2:$C$751;">"&EOMONTH(C$1;$B1))'
  prefs: []
  type: TYPE_NORMAL
- en: 'This formula means that we only sum the values on the `Customer data` sheet
    in column *D* if two conditions are met:'
  prefs: []
  type: TYPE_NORMAL
- en: If the summed values correspond to the cohort in *C1*
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: If `Date out` is larger than the current cohort, that is, the customer is still
    with us
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Copy the cell value to the whole matrix.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Format the table in a similar way as before to get a colored matrix, as shown
    in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c1f101af-d39a-42fc-8fb5-4f01e3853c1a.png)'
  prefs: []
  type: TYPE_IMG
- en: In this case, we can see how the amount of money spent changes with time for
    each cohort, and it is slightly different then the raw number of customers.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we learned about two data mining techniques: Market Basket
    Analysis and Customer Cohort Analysis. The first one tells us about hidden relations
    between store departments or products based on the customers'' behavior. The second
    shows the time evolution of the number of customers, revealing differences between
    different customer segments or cohorts.'
  prefs: []
  type: TYPE_NORMAL
- en: There are a large number of data mining analyses that can help us dig into our
    datasets and find hidden information, which is extremely important in order for
    us to understand our business and make the right decisions.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the next chapter, we will study a special kind of dataset in detail: time
    series. We will see that it needs a different kind of modeling and analysis.'
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: How can the unexplainable, random associations be avoided in a Market Basket
    Analysis?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If we find a correlation between two products or two departments in a given
    store, can this be generalized to other places?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Some columns in the cohort matrix show zeroes starting at a given date. What
    does this mean in the context of the current dataset?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The last rows in the cohort matrix show zero consistently. What does this mean
    in the context of the current dataset?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How would you maximize the amount of money spent by customers as time passes?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Database Marketing: Analyzing and Managing Customers* by Robert C. Blattberg, Byung-Do Kim, Scott
    A Neslin'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Data Science for Business: What You Need to Know about Data Mining and Data-Analytic
    Thinking, 1st Edition*, by Foster Provost, Tom Fawcett'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
