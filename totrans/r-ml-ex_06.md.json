["```py\n> # load in the data and attach the data frame\n> credit.df <- read.csv(\"german_credit_dataset.csv\", header = TRUE, sep = \",\") \n> # class should be data.frame\n> class(credit.df)\n[1] \"data.frame\"\n> \n> # get a quick peek at the data\n> head(credit.df)\n\n```", "```py\n> # get dataset detailed info\n> str(credit.df)\n\n```", "```py\n> # check if data frame contains NA values\n> sum(is.na(credit.df))\n[1] 0\n> \n> # check if total records reduced after removing rows with NA \n> # values\n> sum(complete.cases(credit.df))\n[1] 1000\n\n```", "```py\n# data transformation\nto.factors <- function(df, variables){\n for (variable in variables){\n df[[variable]] <- as.factor(df[[variable]])\n }\n return(df)\n}\n\n```", "```py\n> # select variables for data transformation\n> categorical.vars <- c('credit.rating', 'account.balance', \n+                       'previous.credit.payment.status',\n+                       'credit.purpose', 'savings', \n+                       'employment.duration', 'installment.rate',\n+                       'marital.status', 'guarantor', \n+                       'residence.duration', 'current.assets',\n+                       'other.credits', 'apartment.type', \n+                       'bank.credits', 'occupation', \n+                       'dependents', 'telephone', \n+                       'foreign.worker')\n> \n> # transform data types\n> credit.df <- to.factors(df = credit.df, \n+                         variables=categorical.vars)\n> \n> # verify transformation in data frame details\n> str(credit.df)\n\n```", "```py\n# load dependencies\nlibrary(gridExtra) # grid layouts\nlibrary(pastecs) # details summary stats\nlibrary(ggplot2) # visualizations\nlibrary(gmodels) # build contingency tables\n\n```", "```py\nstat.desc and summary functions for getting detailed and condensed summary statistics about the variable. The conventions for independent variables and dependent variables are denoted by indep.var and dep.var in the code segments that follow and in other functions later on.\n```", "```py\n# summary statistics\nget.numeric.variable.stats <- function(indep.var, detailed=FALSE){\n options(scipen=100)\n options(digits=2)\n if (detailed){\n var.stats <- stat.desc(indep.var)\n }else{\n var.stats <- summary(indep.var)\n }\n\n df <- data.frame(round(as.numeric(var.stats),2))\n colnames(df) <- deparse(substitute(indep.var))\n rownames(df) <- names(var.stats)\n\n if (names(dev.cur()) != \"null device\"){\n dev.off()\n }\n grid.table(t(df))\n}\n\n```", "```py\n# visualizations\n# histograms\\density\nvisualize.distribution <- function(indep.var){\n pl1 <- qplot(indep.var, geom=\"histogram\", \n fill=I('gray'), binwidth=5,\n col=I('black'))+ theme_bw()\n pl2 <- qplot(age, geom=\"density\",\n fill=I('gray'), binwidth=5, \n col=I('black'))+ theme_bw()\n\n grid.arrange(pl1,pl2, ncol=2)\n}\n\n# box plots\nvisualize.boxplot <- function(indep.var, dep.var){\n pl1 <- qplot(factor(0),indep.var, geom=\"boxplot\", \n xlab = deparse(substitute(indep.var)), \n ylab=\"values\") + theme_bw()\n pl2 <- qplot(dep.var,indep.var,geom=\"boxplot\",\n xlab = deparse(substitute(dep.var)),\n ylab = deparse(substitute(indep.var))) + theme_bw()\n\n grid.arrange(pl1,pl2, ncol=2)\n}\n\n```", "```py\n# summary statistics\nget.categorical.variable.stats <- function(indep.var){\n\n feature.name = deparse(substitute(indep.var))\n df1 <- data.frame(table(indep.var))\n colnames(df1) <- c(feature.name, \"Frequency\")\n df2 <- data.frame(prop.table(table(indep.var)))\n colnames(df2) <- c(feature.name, \"Proportion\")\n\n df <- merge(\n df1, df2, by = feature.name\n )\n ndf <- df[order(-df$Frequency),]\n if (names(dev.cur()) != \"null device\"){\n dev.off()\n }\n grid.table(ndf)\n}\n\n```", "```py\n# generate contingency table\nget.contingency.table <- function(dep.var, indep.var, \n stat.tests=F){\n if(stat.tests == F){\n CrossTable(dep.var, indep.var, digits=1, \n prop.r=F, prop.t=F, prop.chisq=F)\n }else{\n CrossTable(dep.var, indep.var, digits=1, \n prop.r=F, prop.t=F, prop.chisq=F,\n chisq=T, fisher=T)\n }\n}\n\n```", "```py\n# visualizations\n# barcharts\nvisualize.barchart <- function(indep.var){\n qplot(indep.var, geom=\"bar\", \n fill=I('gray'), col=I('black'),\n xlab = deparse(substitute(indep.var))) + theme_bw()\n}\n\n```", "```py\n# mosaic plots\nvisualize.contingency.table <- function(dep.var, indep.var){\n if (names(dev.cur()) != \"null device\"){\n dev.off()\n }\n mosaicplot(dep.var ~ indep.var, color=T, \n main = \"Contingency table plot\")\n}\n\n```", "```py\n> # access dataset features directly\n> attach(credit.df)\n\n```", "```py\n> # credit.rating stats\n> get.categorical.variable.stats(credit.rating)\n> # credit.rating visualizations\n> visualize.barchart(credit.rating)\n\n```", "```py\n> # account.balance stats and bar chart\n> get.categorical.variable.stats(account.balance)\n> visualize.barchart(account.balance)\n\n```", "```py\n> #load dependencies\n> library(car)\n\n```", "```py\n> # recode classes and update data frame\n> new.account.balance <- recode(account.balance,\n+                           \"1=1;2=2;3=3;4=3\")\n> credit.df$account.balance <- new.account.balance\n\n```", "```py\n> # contingency table and mosaic plot \n> get.contingency.table(credit.rating, new.account.balance, \n stat.tests=T)\n> visualize.contingency.table(credit.rating, new.account.balance)\n\n```", "```py\n> # credit.duration.months analysis\n> get.numeric.variable.stats(credit.duration.months)\n\n```", "```py\n> # histogram\\density plot\n> visualize.distribution(credit.duration.months)\n\n```", "```py\n> # box plot\n> visualize.boxplot(credit.duration.months, credit.rating)\n\n```", "```py\n> # previous.credit.payment.status stats and bar chart\n> get.categorical.variable.stats(previous.credit.payment.status)\n> visualize.barchart(previous.credit.payment.status)\n\n```", "```py\n> # recode classes and update data frame\n> new.previous.credit.payment.status <- \n recode(previous.credit.payment.status,\n+                                           \"0=1;1=1;2=2;3=3;4=3\")\n> credit.df$previous.credit.payment.status <- \n new.previous.credit.payment.status\n\n```", "```py\n> # contingency table\n> get.contingency.table(credit.rating,\n new.previous.credit.payment.status)\n\n```", "```py\n> # credit.purpose stats and bar chart\n> get.categorical.variable.stats(credit.purpose)\n> visualize.barchart(credit.purpose)\n\n```", "```py\n> # recode classes and update data frame\n> new.credit.purpose <- recode(credit.purpose,\"0=4;1=1;2=2;3=3;\n+                                              4=3;5=3;6=3;7=4;\n+                                              8=4;9=4;10=4\")\n> credit.df$credit.purpose <- new.credit.purpose\n\n```", "```py\n> # contingency table\n> get.contingency.table(credit.rating, new.credit.purpose)\n\n```", "```py\n> # credit.amount analysis\n> get.numeric.variable.stats(credit.amount)\n\n```", "```py\n> # histogram\\density plot\n> visualize.distribution(credit.amount)\n\n```", "```py\n> # box plot\n> visualize.boxplot(credit.amount, credit.rating)\n\n```", "```py\n> # feature: savings - recode classes and update data frame\n> new.savings <- recode(savings,\"1=1;2=2;3=3;\n+                                4=3;5=4\")\n> credit.df$savings <- new.savings\n\n```", "```py\n> # contingency table\n> get.contingency.table(credit.rating, new.savings)\n\n```", "```py\n> # feature: employment.duration - recode classes and update data frame\n> new.employment.duration <- recode(employment.duration,\n+                                   \"1=1;2=1;3=2;4=3;5=4\")\n> credit.df$employment.duration <- new.employment.duration\n\n```", "```py\n> # contingency table\n> get.contingency.table(credit.rating, new.employment.duration)\n\n```", "```py\n> # feature: installment.rate - contingency table and statistical tests\n> get.contingency.table(credit.rating, installment.rate, \n+                      stat.tests=TRUE)\n\n```", "```py\n> 0.05, thus ruling the null hypothesis in favor of the alternative. This tells us that these two variables do not have a significant association between them and this feature might not be one to consider when we make feature sets for our predictive models. We will look at feature selection in more detail in the next chapter.\n```", "```py\n> # feature: marital.status - recode classes and update data frame\n> new.marital.status <- recode(marital.status, \"1=1;2=1;3=2;4=3\")\n> credit.df$marital.status <- new.marital.status\n\n```", "```py\n> # contingency table\n> get.contingency.table(credit.rating, new.marital.status)\n\n```", "```py\n> # feature: guarantor - recode classes and update data frame\n> new.guarantor <- recode(guarantor, \"1=1;2=2;3=2\")\n> credit.df$guarantor <- new.guarantor\n\n```", "```py\n> # perform statistical tests for residence.duration\n> fisher.test(credit.rating, residence.duration)\n> chisq.test(credit.rating, residence.duration)\n\n```", "```py\n> # age analysis\n> get.numeric.variable.stats(age)\n\n```", "```py\n> # histogram\\density plot\n> visualize.distribution(age)\n\n```", "```py\n> # box plot\n> visualize.boxplot(age, credit.rating)\n\n```", "```py\n> # feature: other.credits - recode classes and update data frame\n> new.other.credits <- recode(other.credits, \"1=1;2=1;3=2\")\n> credit.df$other.credits <- new.other.credits\n\n```", "```py\n> # feature: bank.credits - recode classes and update data frame\n> new.bank.credits <- recode(bank.credits, \"1=1;2=2;3=2;4=2\")\n> credit.df$bank.credits <- new.bank.credits\n\n```", "```py\n> ## Save the transformed dataset\n> write.csv(file='credit_dataset_final.csv', x = credit.df, \n+           row.names = F)\n\n```"]