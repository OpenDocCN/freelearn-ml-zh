["```py\n#for online installation\nInstall.packages(\"dplyr\")  \n\n```", "```py\ninstall.packages(\"path/to/file/dplyr_0.5.0.tar.gz\", repos=NULL) \n\n```", "```py\nratings = read.csv(\"~/movie_rating.csv\") \n\n```", "```py\nhead(ratings) \n\n```", "```py\ndim(ratings) \n[1] 31  3 \n\n```", "```py\nStr(ratings) \n\n```", "```py\n#data processing and formatting\nmovie_ratings = as.data.frame(acast(ratings, title~critic,\n    value.var=\"rating\"))\n```", "```py\nView(movie_ratings) \n\n```", "```py\nsim_users = cor(movie_ratings[,1:6],use=\"complete.obs\") \nView(sim_users) \n\n```", "```py\n            rating_critic  = setDT(movie_ratings[colnames(movie_ratings)\n                [6]],keep.rownames = TRUE)[]\n            names(rating_critic) = c('title','rating')\n            View(rating_critic)\n    ```", "```py\n            titles_na_critic =\n                rating_critic$title[is.na(rating_critic$rating)]\n            titles_na_critic\n    ```", "```py\n            ratings_t =ratings[ratings$title %in% titles_na_critic,]\n            View(ratings_t)\n    ```", "```py\n            x = (setDT(data.frame(sim_users[,6]),keep.rownames = TRUE)[])\n            names(x) = c('critic','similarity')\n            ratings_t =  merge(x = ratings_t, y = x, by = \"critic\", all.x = \n                TRUE)\n            View(ratings_t)\n    ```", "```py\n            ratings_t$sim_rating = ratings_t$rating*ratings_t$similarity\n                ratings_t\n    ```", "```py\n            result = ratings_t %>% group_by(title) %>%\n                summarise(sum(sim_rating)/sum(similarity))\n            result\n            Source: local data frame [3 x 2]\n            title sum(sim_rating)/sum(similarity)\n            (fctr) (dbl)\n            1 Just My Luck 2.530981\n            2 Lady in the Water 2.832550\n            3 The Night Listener 3.347790\n    ```", "```py\n            mean(rating_critic$rating,na.rm = T)\n            3.166667\n    ```", "```py\n            generateRecommendations <- function(userId){\n            rating_critic = setDT(movie_ratings[colnames(movie_ratings)\n                [userId]],keep.rownames = TRUE)[]\n            names(rating_critic) = c('title','rating')\n            titles_na_critic =\n                rating_critic$title[is.na(rating_critic$rating)]\n            ratings_t =ratings[ratings$title %in% titles_na_critic,]\n            #add similarity values for each user as new variable\n            x = (setDT(data.frame(sim_users[,userId]),keep.rownames = TRUE)\n                [])\n            names(x) = c('critic','similarity')\n            ratings_t = merge(x = ratings_t, y = x, by = \"critic\", all.x = \n                TRUE)\n            #mutiply rating with similarity values\n            ratings_t$sim_rating = ratings_t$rating*ratings_t$similarity\n            #predicting the non rated titles\n            result = ratings_t %>% group_by(title) %>%\n                summarise(sum(sim_rating)/sum(similarity))\n            return(result)\n            }\n    ```", "```py\nlibrary(reshape2)\nlibrary(data.table)\nlibrary(dplyr)\n#data loading\nratings = read.csv(\"C:/Users/Suresh/Desktop/movie_rating.csv\")\n#data processing and formatting\nmovie_ratings = as.data.frame(acast(ratings, title~critic, value.var=\"rating\"))\n#similarity calculation\nsim_users = cor(movie_ratings[,1:6],use=\"complete.obs\")\n#sim_users[colnames(sim_users) == 'Toby']\nsim_users[,6]\n#predicting the unknown values\n#seperating the non rated movies of Toby\nrating_critic = setDT(movie_ratings[colnames(movie_ratings)[6]],keep.rownames = TRUE)[]\nnames(rating_critic) = c('title','rating')\ntitles_na_critic = rating_critic$title[is.na(rating_critic$rating)]\nratings_t =ratings[ratings$title %in% titles_na_critic,]\n#add similarity values for each user as new variable\nx = (setDT(data.frame(sim_users[,6]),keep.rownames = TRUE)[])\nnames(x) = c('critic','similarity')\nratings_t = merge(x = ratings_t, y = x, by = \"critic\", all.x = TRUE)\n#mutiply rating with similarity values\nratings_t$sim_rating = ratings_t$rating*ratings_t$similarity\n#predicting the non rated titles\nresult = ratings_t %>% group_by(title) %>% summarise(sum(sim_rating)/sum(similarity))\n#function to make recommendations\ngenerateRecommendations <- function(userId){\nrating_critic = setDT(movie_ratings[colnames(movie_ratings)[userId]],keep.rownames = TRUE)[]\nnames(rating_critic) = c('title','rating')\ntitles_na_critic = rating_critic$title[is.na(rating_critic$rating)]\nratings_t =ratings[ratings$title %in% titles_na_critic,]\n#add similarity values for each user as new variable\nx = (setDT(data.frame(sim_users[,userId]),keep.rownames = TRUE)[])\nnames(x) = c('critic','similarity')\nratings_t = merge(x = ratings_t, y = x, by = \"critic\", all.x = TRUE)\n#mutiply rating with similarity values\nratings_t$sim_rating = ratings_t$rating*ratings_t$similarity\n#predicting the non rated titles\nresult = ratings_t %>% group_by(title) %>% summarise(sum(sim_rating)/sum(similarity))\nreturn(result)\n}\n```"]