["```py\n(S (NP (NP the cat)\n       (PP in\n           (NP the hat)))\n   (VP steps\n       (PP onto\n           (NP the mat))))\n```", "```py\n//create pipeline\nArrayList<Pipe> pipeList = new ArrayList<Pipe>();\n  // Pipes: lowercase, tokenize, remove stopwords, map to features\npipeList.add( new CharSequenceLowercase() );\npipeList.add( new CharSequence2TokenSequence(Pattern.compile(\"\\\\p{L}[\\\\p{L}\\\\p{P}]+\\\\p{L}\")) );\npipeList.add( new TokenSequenceRemoveStopwords(new File(\"stopReuters/en.txt\"), \"UTF-8\", false, false, false) );\n//add all \npipeList.add( new TokenSequence2FeatureSequence() );\nInstanceList instances = new InstanceList (new SerialPipes(pipeList));\n//read the file\nReader fileReader = new InputStreamReader(new FileInputStream(new File(reutersFile)), \"UTF-8\");\ninstances.addThruPipe(new CsvIterator (fileReader, Pattern.compile(\"^(\\\\S*)[\\\\s,]*(\\\\S*)[\\\\s,]*(.*)$\"),\n3, 2, 1)); // name fields, data, label\n```", "```py\nParallelTopicModel model = new ParallelTopicModel(10, 1.0, 0.01);//10 topics using LDA method\nmodel.addInstances(instances);//add instances\nmodel.setNumThreads(3);//parallelize with threading\nmodel.setNumIterations(1000);//gibbs sampling iterations\nmodel.estimate();//perform estimation of probability\n```"]