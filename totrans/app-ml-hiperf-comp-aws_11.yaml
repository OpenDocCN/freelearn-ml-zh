- en: '11'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Computational Fluid Dynamics
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Computational Fluid Dynamics** (**CFD**) is a technique used to analyze how
    fluid (air, water, and other fluids) flow over or inside objects of interest.
    CFD is a mature field that originated several decades ago and is used in fields
    of study related to manufacturing, healthcare, the environment, and aerospace
    and automotive industries that involve fluid flow, chemical reactions, or thermodynamic
    reactions and simulations. Given the field’s progress and long history, it is
    beyond the scope of this book to discuss many aspects of this field. However,
    these video links may be a great way for readers to get up to speed on what CFD
    is and some CFD tools, and best practices on AWS:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.youtube.com/watch?v=__7_aHrNUF4&ab_channel=AWSPublicSector](https://www.youtube.com/watch?v=__7_aHrNUF4&ab_channel=AWSPublicSector)'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.youtube.com/watch?v=8rAvNbCJ7M0&ab_channel=AWSOnlineTechTalks](https://www.youtube.com/watch?v=8rAvNbCJ7M0&ab_channel=AWSOnlineTechTalks)'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this chapter, we are going to review the field of CFD and provide insights
    into how **Machine Learning** (**ML**) is being used today with CFD. Additionally,
    we will examine some of the ways you can run CFD tools on AWS.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics in this chapter:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: Introducing CFD
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reviewing best practices for running CFD on AWS
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Discussing how ML can be applied to CFD
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You should have the following prerequisites before getting started with this
    chapter:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: Familiarity with AWS and its basic usage.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A web browser (for the best experience, it is recommended that you use a Chrome
    or Firefox browser).
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'An AWS account (if you are unfamiliar with how to get started with an AWS account,
    you can go to this link: [https://aws.amazon.com/getting-started/](https://aws.amazon.com/getting-started/)).'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some familiarity with CFD. Although we will provide a brief overview of CFD,
    this chapter is best suited for readers that are at least aware of some of the
    typical use cases that can be solved using CFD.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the following section, we will introduce CFD through an example application
    problem – designing a race car!
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: Introducing CFD
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**CFD** is the prediction of fluid flow using numerical analysis. Let’s break
    that down:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: '**Prediction**: Just as with other physical phenomena, fluid flow can be modeled
    mathematically, and simulated. For readers from the field of ML, this is different
    from an ML model’s *prediction*. Here, we solve a set of equations iteratively
    to construct the flow inside or around a body. Mainly, we use **Navier-Stokes**
    equations.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Numerical analysis**: Several tools have been created to help actually solve
    these equations – not surprisingly, these tools are called **solvers**. As with
    any set of tools, there are commercial and **open source** varieties of these
    solvers. It is uncommon nowadays to write any code related to the actual solving
    of equations – similar to how you don’t write your own ML framework before you
    start solving your ML problems. Numerical or mathematical methods that have been
    studied for decades are implemented through code in these solvers that help with
    the analysis of fluid flow.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数值分析**：为了实际解决这些方程，已经创建了几个工具——不出所料，这些工具被称为**求解器**。与任何一组工具一样，这些求解器有商业和**开源**两种版本。如今，编写任何与实际求解方程相关的代码是不常见的——类似于在开始解决你的机器学习问题之前，你不会编写自己的机器学习框架。这些求解器通过代码实现了数十年来研究过的数值或数学方法，这些方法有助于流体流动的分析。'
- en: Now, imagine you are the team principal for a new **Formula 1** (**F1**) team
    who is responsible for managing the design of a new car for the upcoming race
    season. The design of this car has to satisfy many new F1 regulations that define
    constraints of how the car can be designed. Fortunately, you have a large engineering
    team that can manage the design and manufacturing of a new car that is proposed.
    The largest teams spend millions of dollars on just the conceptual design of the
    car before even manufacturing a single part. It is typical for teams to start
    with a baseline design and improve this design iteratively. This iterative improvement
    of design is not unique to racing car development; think of the latest version
    of the iPhone in your pocket or purse, or how generations of commercial passenger
    aircraft designs look similar but are very different. You task your engineers
    with designing modifications to the existing car using **Computer-Aided Design**
    (**CAD**) tools, and after a month of working on potential design changes, they
    show you the design of your team’s latest car (see *Figure 11**.1*). This looks
    great!
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，假设你是即将到来的赛车赛季一支新**一级方程式**（**F1**）车队的主教练，负责管理新车的研发设计。这辆车的研发设计必须满足许多新的 F1 规则，这些规则定义了车辆设计可以施加的限制。幸运的是，你有一个庞大的工程团队可以管理新车的研发和制造。最大的车队在制造任何部件之前，仅在概念设计上就花费了数百万美元。车队通常从基准设计开始，并迭代地改进这个设计。这种设计的迭代改进并不仅限于赛车车身的开发；想想你口袋或包里的最新版
    iPhone，或者几代商用客机设计看起来相似但实际上却非常不同。你要求工程师使用**计算机辅助设计**（**CAD**）工具对现有车辆进行设计修改，经过一个月对潜在设计变更的工作后，他们向你展示了你团队最新车辆的设计（见图
    *图 11**.1*）。这看起来很棒！
- en: '![Figure 11.1 – F1 car design](img/B18493_11_001.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.1 – F1 赛车设计](img/B18493_11_001.jpg)'
- en: Figure 11.1 – F1 car design
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.1 – F1 赛车设计
- en: 'However, how do you know whether this car will perform better on track? Two
    key metrics that you can track are as follows:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，你怎么知道这辆车在赛道上会表现更好呢？你可以跟踪的两个关键指标如下：
- en: '**Drag**: The resistance caused by an object in fluid flow. The **coefficient
    of drag** is a dimensionless quantity that is used to quantify drag. For your
    F1 car, a higher coefficient of drag is worse since your car will move slower,
    considering all the other factors remain constant.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**阻力**：物体在流体流动中产生的阻力。**阻力系数**是一个无量纲量，用于量化阻力。对于你的 F1 赛车来说，更高的阻力系数更差，因为你的车会移动得更慢，假设其他所有因素保持不变。'
- en: '**Downforce**: Aerodynamic forces that push the car onto the track; the higher
    the downforce, the better it is since it provides greater grip when traveling
    or turning at high speeds.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**下压力**：将汽车推到赛道上的空气动力学力；下压力越高，越好，因为它在高速行驶或转弯时提供了更大的抓地力。'
- en: '*Figure 11**.2* shows the direction of these two forces applied to the F1 car:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 11**.2* 展示了这两个力作用在 F1 赛车上的方向：'
- en: '![Figure 11.2 – Drag and downforce directions on the F1 car](img/B18493_11_002.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.2 – F1 赛车的阻力和下压力方向](img/B18493_11_002.jpg)'
- en: Figure 11.2 – Drag and downforce directions on the F1 car
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.2 – F1 赛车的阻力和下压力方向
- en: Now, one way to measure drag and downforce is to manufacture the entire car,
    drive around a track with force sensors, and report this back to the team – but
    what if you had a different design in mind? Or a variation in one of the components
    of your car? You would have rebuilt these components, or the entire car, and then
    perform the same tests, or run a scale model in a wind tunnel – these options
    can be very time-consuming and very expensive. This is where numerical analysis
    codes such as CFD tools become useful. With CFD tools, you can simulate different
    flow conditions over the car and calculate the drag and downforce.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在测量阻力和下压力的一种方法是将整辆车制造出来，在赛道上驾驶并使用力传感器进行测试，然后将结果反馈给团队——但如果您有其他的设计想法呢？或者是对您汽车某个部件的变体？您将需要重新构建这些部件，或者整辆车，然后进行相同的测试，或者在风洞中运行比例模型——这些选项可能非常耗时且成本高昂。这就是数值分析代码，如CFD工具变得有用的地方。使用CFD工具，您可以模拟汽车上的不同流动条件并计算阻力和下压力。
- en: It is typical in CFD to create a **flow domain** with the object of interest
    inside it. This can look similar to *Figure 11**.3* for **external flows** (for
    example, the flow around the vehicle). On the other hand, you could have **internal
    flows** where the domain is defined in the object itself (such as the flow inside
    a bent pipe). In *Figure 11**.3*, the green and blue surfaces represent the **inlet**
    and **outlet** in this domain. Air flows from the **inlet**, over and around the
    car, and out through the **outlet**.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在CFD中，通常会在感兴趣的对象内部创建一个**流动域**。这可以类似于*图11.3*中的**外部流动**（例如，车辆周围的流动）。另一方面，您可能有**内部流动**，其中域定义在对象本身内（例如，弯曲管道内的流动）。在*图11.3*中，绿色和蓝色表面代表该域中的**入口**和**出口**。空气从**入口**流入，经过并绕过汽车，然后通过**出口**流出。
- en: '![Figure 11.3 – CFD domain defined around the F1 car](img/B18493_11_003.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![图11.3 – 围绕F1赛车的CFD域定义](img/B18493_11_003.jpg)'
- en: Figure 11.3 – CFD domain defined around the F1 car
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.3 – 围绕F1赛车的CFD域定义
- en: The car and the domain so far are conceptual ideas and need to be represented
    as objects or files that CFD code can ingest and use. A typical file format used
    to represent objects is the **Stereolithography** (**STL**) file format. Each
    object is represented as a set of triangles, and each triangle is represented
    by a set of 3D points. The same car in an STL format is shown in *Figure 11**.4*
    – the car is now a collection of tens of thousands of triangles.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，汽车和域是概念性的想法，需要以对象或文件的形式表示，以便CFD代码可以读取和使用。用于表示对象的典型文件格式是**立体光刻**（**STL**）文件格式。每个对象表示为一组三角形，每个三角形由一组3D点表示。在STL格式中的同一辆汽车如*图11.4*所示——汽车现在是由数万个三角形组成的集合。
- en: '![Figure 11.4 – F1 car in an STL format](img/B18493_11_004.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![图11.4 – STL格式的F1赛车](img/B18493_11_004.jpg)'
- en: Figure 11.4 – F1 car in an STL format
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.4 – STL格式的F1赛车
- en: We can now use this car object and **mesh** the CFD domain. Creating a **mesh**,
    or **meshing**, is the process of creating grid points in the CFD domain where
    numerical equations related to fluid flow are to be solved. Meshing is a very
    important process, as this can directly influence results, and also sometimes
    cause the numerical simulation to diverge or not solve.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以使用这个汽车对象并对CFD域进行**网格化**。创建**网格**或**网格化**是在CFD域中创建网格点的过程，其中要解决与流体流动相关的数值方程。网格化是一个非常重要的过程，因为它可以直接影响结果，有时也可能导致数值模拟发散或无法求解。
- en: Note
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Meshing techniques and details about the algorithms used are beyond the scope
    of this book. Each solver tool implements different meshing techniques with various
    configurations. Teams spend a significant amount of time getting high-quality
    meshes while balancing the complexity of the mesh to ensure faster solving times.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 网格化技术和所使用的算法的细节超出了本书的范围。每个求解器工具都使用不同的网格化技术，并具有各种配置。团队花费大量时间获得高质量的网格，同时平衡网格的复杂性以确保更快的求解时间。
- en: Once the mesh is built out, it may look similar to *Figure 11**.5*. We see that
    there is a concentration of grid cells closer to the body. Note that this is a
    slice of the mesh, and the actual mesh is a 3D volume with the bounds that were
    defined in *Figure 11**.3*.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦构建了网格，它可能看起来类似于*图11.5*。我们看到网格单元在车身附近有集中。请注意，这是一个网格的切片，实际的网格是一个3D体积，其边界在*图11.3*中定义。
- en: '![Figure 11.5 – CFD mesh built for the F1 car case](img/B18493_11_005.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![图11.5 – 为F1赛车案例构建的CFD网格](img/B18493_11_005.jpg)'
- en: Figure 11.5 – CFD mesh built for the F1 car case
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.5 – 为F1赛车案例构建的CFD网格
- en: Once the mesh is built out, we can use CFD solvers to calculate the flow around
    this F1 car, and then post-process these results to provide us with predictions
    for drag and downforce. *Figure 11**.6* and *Figure 11**.7* show typical post-processed
    images involving streamlines (the white lines in the images representing how fluid
    flows around the body), a velocity slice (the magnitude of the velocity on a plane
    or cross-section of interest), pressure on the car body (redder regions are higher
    pressure), and the original car geometry for context.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦构建了网格，我们就可以使用CFD求解器计算围绕这辆F1赛车的流动，然后对这些结果进行后处理，以提供关于阻力下压力的预测。*图11**.6*和*图11**.7*显示了涉及流线（图像中的白色线条表示流体如何围绕车身流动）、速度切片（在感兴趣平面或截面上的速度大小）、车身上的压力（红色区域表示更高的压力）以及原始汽车几何形状的典型后处理图像。
- en: '![Figure 11.6 – Post-processed results for the F1 car case showing streamlines
    and velocity slice](img/B18493_11_006.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![图11.6 – F1赛车案例的后处理结果，显示流线和速度切片](img/B18493_11_006.jpg)'
- en: Figure 11.6 – Post-processed results for the F1 car case showing streamlines
    and velocity slice
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.6 – F1赛车案例的后处理结果，显示流线和速度切片
- en: '*Figure 11**.7* shows a different output visualization of pressure on the surface
    of the car, along with the streamlines in a perspective view.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '*图11**.7*展示了汽车表面的压力不同输出可视化，以及透视视图中的流线。'
- en: '![Figure 11.7 – Post-processed results for the F1 car case showing pressure
    on the car body with streamlines](img/B18493_11_007.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![图11.7 – F1赛车案例的后处理结果，显示车身上的压力和流线](img/B18493_11_007.jpg)'
- en: Figure 11.7 – Post-processed results for the F1 car case showing pressure on
    the car body with streamlines
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.7 – F1赛车案例的后处理结果，显示车身上的压力和流线
- en: 'In summary, running a CFD case involves the following:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，运行CFD案例涉及以下步骤：
- en: Loading and manipulating the geometry
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 加载和处理几何形状
- en: Meshing the CFD domain
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 网格化CFD域
- en: Using a solver to solve for the flow in the domain
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用求解器在域内求解流动
- en: Using post-processing tools to visualize the results
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用后处理工具可视化结果
- en: In the next section, we will discuss a few ways of running CFD analyses on AWS
    according to our documented best practices.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将讨论根据我们记录的最佳实践，在AWS上运行CFD分析的一些方法。
- en: Reviewing best practices for running CFD on AWS
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查在AWS上运行CFD的最佳实践
- en: 'CFD, being very compute-intensive, needs to be scaled massively to be practical
    for companies that depend on analysis results to make decisions about their product
    designs. AWS allows customers to run CFD simulations at a massive scale (thousands
    of cores), on-demand, with multiple commercial and **open source** tools, and
    without any capacity planning or up-front capital investment. You can find many
    useful links related to CFD on AWS here: [https://aws.amazon.com/hpc/cfd/](https://aws.amazon.com/hpc/cfd/).'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 由于CFD计算密集度很高，需要大规模扩展才能适用于依赖分析结果来做出产品设计决策的公司。AWS允许客户使用多种商业和**开源**工具，按需以大规模（数千个核心）运行CFD模拟，无需任何容量规划或前期资本投资。您可以在以下位置找到有关AWS上CFD的许多有用链接：[https://aws.amazon.com/hpc/cfd/](https://aws.amazon.com/hpc/cfd/)。
- en: 'As highlighted at the outset of this chapter, there are several commercial
    and open source tools available to solve your CFD problems that run at scale on
    AWS. Some of these tools are as follows:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如本章开头所强调的，有几种商业和开源工具可用于解决您的CFD问题，这些工具可以在AWS上大规模运行。以下是一些这些工具的例子：
- en: Siemens SimCenter STAR-CCM+
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 西门子SimCenter STAR-CCM+
- en: Ansys Fluent
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ansys Fluent
- en: OpenFOAM (open source)
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OpenFOAM（开源）
- en: 'In this chapter, we will be providing you with examples of how to set up and
    use *OpenFOAM*. For other tools, please take a look at this workshop provided
    by AWS: [https://cfd-on-pcluster.workshop.aws/](https://cfd-on-pcluster.workshop.aws/).'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将向您提供如何设置和使用*OpenFOAM*的示例。对于其他工具，请参阅AWS提供的此研讨会：[https://cfd-on-pcluster.workshop.aws/](https://cfd-on-pcluster.workshop.aws/)。
- en: Note
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'Note that the AWS **Well-Architected** pillar defines best practices for running
    any kind of workload on AWS. It includes the best practices for designing architectures
    on AWS with the following pillars: **Operational Excellence**, **Security**, **Reliability**,
    **Performance Efficiency**, **Cost Optimization**, and **Sustainability**.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，AWS **Well-Architected** 框架定义了在AWS上运行任何类型工作负载的最佳实践。它包括以下支柱在AWS上设计架构的最佳实践：**运营卓越**、**安全性**、**可靠性**、**性能效率**、**成本优化**和**可持续性**。
- en: 'If you are unfamiliar with the Well-Architected Framework, you can read about
    it in detail here: [https://docs.aws.amazon.com/wellarchitected/latest/framework/welcome.html/](https://docs.aws.amazon.com/wellarchitected/latest/framework/welcome.html/).'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: 'We will now discuss two different ways of running CFD simulations on AWS: using
    ParallelCluster and using CFD Direct.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: Using AWS ParallelCluster
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'On AWS, these Well-Architected best practices are encapsulated in a solution
    called AWS ParallelCluster that you can launch in your AWS account. ParallelCluster
    lets you configure and launch an entire HPC cluster with a simple **Command-Line
    Interface** (**CLI**). The CLI also allows you to dynamically scale resources
    needed for your CFD (and other HPC) applications as needed, in a secure manner.
    Popular schedulers such as **AWS Batch** or **Slurm** can be used to submit and
    monitor jobs on ParallelCluster. Here are some steps to follow for installing
    ParallelCluster (note that a complete set of steps can be found on the official
    AWS documentation page for ParallelCluster here: [https://docs.aws.amazon.com/parallelcluster/latest/ug/install-v3-pip.html](https://docs.aws.amazon.com/parallelcluster/latest/ug/install-v3-pip.html)).'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: Step 1 – creating an AWS Cloud9 IDE
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This helps us have access to a full IDE on the cloud on a specified instance
    type, with temporary, managed credentials that can be used to launch ParallelCluster.
    Follow the instructions here to launch an AWS Cloud9 IDE: [https://docs.aws.amazon.com/cloud9/latest/user-guide/setup-express.html](https://docs.aws.amazon.com/cloud9/latest/user-guide/setup-express.html).'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have created your Cloud9 IDE, navigate to the terminal as shown in
    the instructions here: [https://docs.aws.amazon.com/cloud9/latest/user-guide/tour-ide.html#tour-ide-terminal](https://docs.aws.amazon.com/cloud9/latest/user-guide/tour-ide.html#tour-ide-terminal).'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: Step 2 – installing the ParallelCluster CLI
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Once you are inside the terminal, do the following:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: 'Use `pip` to install `ParallelCluster`:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Next, make sure that you have **Node Version Manager** (**NVM**) installed:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Lastly, verify that `ParallelCluster` has been installed successfully:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Let’s move on to *step 3*.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: Step 3 – configuring your ParallelCluster
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Before you launch ParallelCluster, you need to define parameters using the
    `configure` command:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The command-line tool will ask you the following questions for creating a configuration
    (or config, for short) file:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: Region in which to set up ParallelCluster (for example, US-East-1)
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**EC2 Key Pair** to use (learn more about **Key Pairs** here: [https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html)'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Operating system (for example, Amazon Linux 2, CentOS 7, or Ubuntu)
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Head node instance type (for example, **c5n.18xlarge**)
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Whether to automate VPC creation
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Subnet configuration (for example, head or main node placed in a public subnet
    with the rest of the compute fleet in a private subnet or subnets)
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Additional shared storage volume (for example, FSx configuration)
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This creates a config file that can be found in `~/.parallelcluster` and modified
    before the creation of the cluster. Here is an example of a ParallelCluster config
    file:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'A deeper dive into the intricacies of the ParallelCluster config file can be
    found here: [https://aws.amazon.com/blogs/hpc/deep-dive-into-the-aws-parallelcluster-3-configuration-file/](https://aws.amazon.com/blogs/hpc/deep-dive-into-the-aws-parallelcluster-3-configuration-file/).'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: Step 4 – launching your ParallelCluster
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Once you have verified the config file, use the following command to create
    and launch `ParallelCluster`:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Here, our cluster has been named `mycluster`. This will launch a CloudFormation
    template with the required resources to work with ParallelCluster, based on the
    config file you previously defined. The following services are used by AWS ParallelCluster:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: AWS Batch
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AWS CloudFormation
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Amazon CloudWatch
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Amazon CloudWatch Logs
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AWS CodeBuild
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Amazon DynamoDB
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Amazon Elastic Block Store
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Amazon **Elastic Compute** **Cloud** (**EC2**)
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Amazon Elastic Container Registry
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Amazon **Elastic File** **System** (**EFS**)
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Amazon FSx for Lustre
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AWS Identity and Access Management
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AWS Lambda
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NICE DCV
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Amazon Route 53
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Amazon Simple Storage Service
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Amazon VPC
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For more details on the services used, please refer to the links provided in
    the *References* section of this chapter. A simplified architecture diagram of
    AWS ParallelCluster is shown in *Figure 11**.8* – more details can be found on
    the following blog: [https://aws.amazon.com/blogs/compute/running-simcenter-star-ccm-on-aws/](https://aws.amazon.com/blogs/compute/running-simcenter-star-ccm-on-aws/).
    Otherwise, see the documentation page for ParallelCluster ([https://docs.aws.amazon.com/parallelcluster/latest/ug/what-is-aws-parallelcluster.html](https://docs.aws.amazon.com/parallelcluster/latest/ug/what-is-aws-parallelcluster.html)).'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.8 – AWS ParallelCluster architecture](img/B18493_11_008.jpg)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
- en: Figure 11.8 – AWS ParallelCluster architecture
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: 'The launch will typically take about 10 minutes and can be tracked both on
    the console as well as on the CloudFormation page on the AWS Management Console.
    On the console, the following message will confirm that your launch is in progress:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Wait for the status to say `"``clusterStatus": "CREATE_COMPLETE"`'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: Step 5 – installing OpenFOAM on the cluster
  id: totrans-132
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To install OpenFOAM on your cluster, see the following:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: 'First, add **Secure Shell** (**SSH**) into the head node of your newly created
    ParallelCluster:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[PRE26]'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'You are now in the head node of the ParallelCluster. Next, download the OpenFOAM
    files as follows:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Next, untar the two files you just downloaded:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[PRE34]'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Change the directory to the newly extracted OpenFOAM folder and compile OpenFOAM:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[PRE40]'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'To install OpenFOAM on all nodes, you can use the `sbatch` command, and submit
    the preceding commands as a file named `compile.sh`: for example, `sbatch compile.sh`.'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: Once installation completes, you can run a sample CFD application as shown in
    *step 6*.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: Step 6 – running a sample CFD application
  id: totrans-163
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Here, we will run a sample CFD application using ParallelCluster. First, we
    access the head node of the cluster we just created using SSH:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Make sure you use the same `.pem` file that you created in *step 3*!
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: 'In this case, we will be running an example from OpenFOAM – incompressible
    flow over a motorbike. The case files for this case can be found here: [https://static.us-east-1.prod.workshops.aws/public/a536ee90-eecd-4851-9b43-e7977e3a5929/static/motorBikeDemo.tgz](https://static.us-east-1.prod.workshops.aws/public/a536ee90-eecd-4851-9b43-e7977e3a5929/static/motorBikeDemo.tgz).'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: The geometry corresponding to this case is shown in *Figure 11**.9*.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.9 – Geometry for the motorbike case in OpenFOAM](img/B18493_11_009.jpg)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
- en: Figure 11.9 – Geometry for the motorbike case in OpenFOAM
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: 'To run the case in just the head node, you can run the following commands:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: We will go into detail about what these commands do in later sections. For now,
    our aim is just to run the example motorbike case.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: 'To run the same case in parallel with all your compute nodes, you can use `sbatch`
    to submit the following shell script (similar to submitting the installation shell
    script). We can define some input arguments to the script, followed by loading
    **OpenMPI** and **OpenFOAM**:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'First, we mesh the geometry using the `blockMesh` and `snappyHexMesh` tools
    (see the following code):'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'We then check the quality of the mesh using `checkMesh`, and renumber and print
    out a summary of the mesh (see code):'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Finally, we run OpenFOAM through the `potentialFoam` and `simpleFoam` binaries
    as shown here:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'You can follow instructions in the following AWS workshop to visualize results
    from the CFD case: [https://catalog.us-east-1.prod.workshops.aws/workshops/21c996a7-8ec9-42a5-9fd6-00949d151bc2/en-US/openfoam/openfoam-visualization](https://catalog.us-east-1.prod.workshops.aws/workshops/21c996a7-8ec9-42a5-9fd6-00949d151bc2/en-US/openfoam/openfoam-visualization).'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: Let’s discuss CFD Direct next.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: Using CFD Direct
  id: totrans-184
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the previous section, we saw how you can run a CFD simulation using ParallelCluster
    on AWS. Now, we will look at how to run CFD using the CFD Direct offering on AWS
    Marketplace: [https://aws.amazon.com/marketplace/pp/prodview-ojxm4wfrodtj4](https://aws.amazon.com/marketplace/pp/prodview-ojxm4wfrodtj4).
    CFD Direct provides an Amazon EC2 image built on top of Ubuntu with all the typical
    tools you need to run CFD with OpenFOAM.'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: 'Perform the following steps to get started:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: Follow the link above to CFD Direct’s Marketplace offering, and click **Continue**
    **to Subscribe**.
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, follow the instructions provided and click **Continue to Configure** (leave
    all options as the default), and then **Continue to Launch**. Similar to ParallelCluster,
    remember to use the right EC2 key pair so you can SSH into the instance that is
    launched for you.
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.10 – CFD Direct AWS Marketplace offering (screenshot taken as of
    August 5, 2022)](img/B18493_11_010.jpg)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
- en: Figure 11.10 – CFD Direct AWS Marketplace offering (screenshot taken as of August
    5, 2022)
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow the instructions and get more help on using CFD Direct’s image here:
    [https://cfd.direct/cloud/aws/](https://cfd.direct/cloud/aws/).'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: 'To connect to the instance for the first time, use the instructions given here:
    [https://cfd.direct/cloud/aws/connect/](https://cfd.direct/cloud/aws/connect/).'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: In the following tutorial, we will use the NICE DCV client as a remote desktop
    to interact with the EC2 instance.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: 'To install NICE DCV, perform the following steps:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: 'First, SSH into the instance you just launched, and then download and install
    the server. For example, with Ubuntu 20.04, use the following command:'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Then, execute the following command to extract the `tar` file:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Install NICE DCV by executing the following:'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'To start the NICE DCV server, use the following command:'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Finally, start a session using the following:'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Find the public IP of your launched EC2 instance and use any NICE DCV client
    to connect to the instance (see *Figure 11**.11*):'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.11 – Connecting to the EC2 instance using a public IP](img/B18493_11_011.jpg)'
  id: totrans-206
  prefs: []
  type: TYPE_IMG
- en: Figure 11.11 – Connecting to the EC2 instance using a public IP
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
- en: Next, use the username and password for Ubuntu (see *Figure 11**.12*). If you
    haven’t set a password, use the `passwd` command on a terminal using SSH.
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.12 – Entering a username and password for Ubuntu](img/B18493_11_012.jpg)'
  id: totrans-209
  prefs: []
  type: TYPE_IMG
- en: Figure 11.12 – Entering a username and password for Ubuntu
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
- en: If prompted, select the session you want to connect to. Here, we started a session
    called `cfd`. You should now be looking at your Ubuntu desktop with OpenFOAM 9
    preinstalled.
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.13 – Ubuntu desktop provided by CFD Direct](img/B18493_11_013.jpg)'
  id: totrans-212
  prefs: []
  type: TYPE_IMG
- en: Figure 11.13 – Ubuntu desktop provided by CFD Direct
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: 'To locate all the OpenFOAM tutorials to try out, use the following command:'
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '[PRE53]'
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'We will run a basic airfoil tutorial that is located in the following directory:'
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'The directory is set up like a typical OpenFOAM case and has the following
    contents (explore using the `tree` command on Ubuntu):'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Let us explore some of these files, as this will give you an understanding
    of any OpenFOAM case. The folder called `0` represents the initial conditions
    (as in, time step 0) for these key quantities we will be solving for:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
- en: '**Velocity** (**U**)'
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Pressure** (**p**)'
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'What do these files look like? Let’s take a look at the `U` (velocity) file:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: As we can see here, the file defines the dimensions of the CFD domain and the
    free stream velocity, along with the inlet, outlet, and wall boundary conditions.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: 'The `Airfoil2D` folder also contains a folder called `constant`; this folder
    contains files specific to the CFD mesh that we will be creating. The `momentumTransport`
    file defines the kind of models to be used to solve this problem:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Here, we use the `SpalartAllmaras` turbulence model under the **Reynolds-Averaged
    Flow** (**RAF**) type. For more information about this, please visit [https://www.openfoam.com/documentation/guides/latest/doc/guide-turbulence-ras-spalart-allmaras.html](https://www.openfoam.com/documentation/guides/latest/doc/guide-turbulence-ras-spalart-allmaras.html).
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
- en: The `boundary` file inside the `polyMesh` folder contains definitions of the
    walls themselves; this is to let the simulation know what a surface *inlet* or
    *wall* represents. There are several other files in the `polyMesh` folder that
    we will not explore in this section.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
- en: Inside the `System` folder, the `controlDict` file defines what applications
    to run for this case. OpenFOAM contains over 200 compiled applications; many of
    these are solvers and preprocessing and post-processing for the code.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we get to one of the most important files you will find in any OpenFOAM
    case: the `Allrun` executable. The `Allrun` file is a shell script that runs the
    steps we defined earlier for every typical CFD application in order – to import
    the geometry, create a mesh, solve the CFD problem, and post-process results.'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
- en: 'Depending on the output intervals defined in your `ControlDict` file, several
    output folders will be output in the same directory that correspond to different
    time stamps in the simulation. The CFD solvers will solve the problem until they
    converge, or until a maximum number of time steps is reached. The output folders
    will look similar to the timestep `0` folder that we created earlier. To visualize
    these results, we use a tool called `ParaView`:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
- en: First, let us look at the mesh we have created (see *Figure 11**.14*). The executables
    included within OpenFOAM that are responsible for creating this mesh are `blockmesh`
    and `snappyhexmesh`. You can also run these commands manually instead of running
    the `Allrun` file.
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.14 – Mesh for the Airfoil 2D case in OpenFOAM](img/B18493_11_014.jpg)'
  id: totrans-235
  prefs: []
  type: TYPE_IMG
- en: Figure 11.14 – Mesh for the Airfoil 2D case in OpenFOAM
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
- en: 'Great – after solving the problem using the `SimpleFoam` executable, let us
    take a look at the pressure distribution around the airfoil (see *Figure 11**.15*):'
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.15 – Pressure distribution for the Airfoil 2D case in OpenFOAM](img/B18493_11_015.jpg)'
  id: totrans-238
  prefs: []
  type: TYPE_IMG
- en: Figure 11.15 – Pressure distribution for the Airfoil 2D case in OpenFOAM
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
- en: 'Lastly, we can use `ParaView` to visualize the velocity distribution, along
    with streamlines (see *Figure 11**.16*):'
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.16 – Velocity distribution for the Airfoil 2D case in OpenFOAM](img/B18493_11_016.jpg)'
  id: totrans-241
  prefs: []
  type: TYPE_IMG
- en: Figure 11.16 – Velocity distribution for the Airfoil 2D case in OpenFOAM
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
- en: Note that these plots are post-processed by initializing `ParaView` with the
    `paraFoam` executable, which automatically understands output formatted by OpenFOAM
    cases.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us now look at a slightly more complicated case – the flow around a car:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let us look at the geometry of the car (*Figure 11**.17* and *Figure
    11**.18*):'
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.17 – Car geometry (perspective view)](img/B18493_11_017.jpg)'
  id: totrans-246
  prefs: []
  type: TYPE_IMG
- en: Figure 11.17 – Car geometry (perspective view)
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.18 – Car geometry (side view)](img/B18493_11_018.jpg)'
  id: totrans-248
  prefs: []
  type: TYPE_IMG
- en: Figure 11.18 – Car geometry (side view)
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we can use the `blockmesh` and `snappyhexmesh` commands to create the
    CFD mesh around this car (see *Figure 11**.19*):'
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.19 – Mesh created for the car case](img/B18493_11_019.jpg)'
  id: totrans-251
  prefs: []
  type: TYPE_IMG
- en: Figure 11.19 – Mesh created for the car case
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
- en: 'We can then run the `Allrun` file to solve the problem. Finally, we will visualize
    the output (*Figures 11.20* and *Figure 11**.21*):'
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.20 – Streamlines (black) and pressure distribution (perspective
    view) created for the car case](img/B18493_11_020.jpg)'
  id: totrans-254
  prefs: []
  type: TYPE_IMG
- en: Figure 11.20 – Streamlines (black) and pressure distribution (perspective view)
    created for the car case
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.21 – Streamlines (black) and pressure distribution (side view)
    created for the car case](img/B18493_11_021.jpg)'
  id: totrans-256
  prefs: []
  type: TYPE_IMG
- en: Figure 11.21 – Streamlines (black) and pressure distribution (side view) created
    for the car case
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
- en: 'The files needed for the following cases can be found in the ZIP files provided
    in the GitHub repository here: [https://github.com/PacktPublishing/Applied-Machine-Learning-and-High-Performance-Computing-on-AWS/tree/main/Chapter11/runs](https://github.com/PacktPublishing/Applied-Machine-Learning-and-High-Performance-Computing-on-AWS/tree/main/Chapter11/runs).'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will discuss some advancements in the CFD field related
    to using ML and deep learning with CFD tools.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
- en: Discussing how ML can be applied to CFD
  id: totrans-260
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: CFD, being a field that has been around for decades, has matured to be very
    useful to companies in various domains and has also been implemented at scale
    using cloud providers. Recent advances in ML have been applied to CFD, and in
    this section, we will provide readers with pointers to articles written about
    this domain.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
- en: 'Overall, we see deep learning techniques being applied in two primary ways:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
- en: 'Using deep learning to map inputs to outputs. We explored the flow over an
    airfoil in this chapter and visualized these results. If we had enough input variation
    and saved the outputs as images, we could use **autoencoders** or **Generative
    Adversarial Networks** (**GANs**) to generate these images. As an example, the
    following paper uses GANs to predict flows over airfoils using sparse data: [https://www.sciencedirect.com/science/article/pii/S1000936121000728](https://www.sciencedirect.com/science/article/pii/S1000936121000728).
    As we can see in *Figure 11**.22*, the flow fields predicted by CFD and the GAN
    are visually very similar:'
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 11.22 – Pressure distribution generated by a trained GAN (left) and
    CFD (right)](img/B18493_11_022.jpg)'
  id: totrans-264
  prefs: []
  type: TYPE_IMG
- en: Figure 11.22 – Pressure distribution generated by a trained GAN (left) and CFD
    (right)
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
- en: 'Similarly, Autodesk trained a network with over 800 examples of cars and can
    instantaneously predict the flow and drag of a new car body: [https://dl.acm.org/doi/10.1145/3197517.3201325](https://dl.acm.org/doi/10.1145/3197517.3201325)
    (see *figure 11.23*).'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.23 – Flow field and drag coefficient being predicted instantaneously
    for various car shapes](img/B18493_11_023.jpg)'
  id: totrans-267
  prefs: []
  type: TYPE_IMG
- en: Figure 11.23 – Flow field and drag coefficient being predicted instantaneously
    for various car shapes
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
- en: The second general type of innovation is not just mapping inputs to outputs,
    but actually using ML techniques as part of the CFD solver itself. For example,
    NVIDIA’s SIMNET ([https://arxiv.org/abs/2012.07938](https://arxiv.org/abs/2012.07938))
    paper describes how deep learning can be used to model the actual **Partial Differential
    Equations** (**PDEs**) that define the fluid flow and other physical phenomena.
    See *Figure 11**.24* for example results from SIMNET for flow over a heat sink.
    Parameterized training runs are faster than commercial and open source solvers,
    and inference for new geometries are instantaneous.
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: "![Figure 11.24 – Velocity (top row) and temperature (bottom row) comparisons\
    \ of OpenFOAM \uFEFFversus SIMNET from NVIDIA](img/B18493_11_024.jpg)"
  id: totrans-270
  prefs: []
  type: TYPE_IMG
- en: Figure 11.24 – Velocity (top row) and temperature (bottom row) comparisons of
    OpenFOAM versus SIMNET from NVIDIA
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
- en: Let’s summarize what you have learned in this chapter next.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-273
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we provided a high-level introduction to the world of CFD,
    and then explored multiple ways to use AWS to solve CFD problems (using ParallelCluster
    and CFD Direct on EC2). Finally, we discussed some recent advancements connecting
    the field of CFD to ML. While it is out of the scope of this book to go into much
    more detail regarding CFD, we hope that the readers are inspired to dive deeper
    into the topics explored here.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will focus on genomics applications using HPC. Specifically,
    we will talk about drug discovery and do a detailed walk-through of a protein
    structure prediction problem.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
- en: References
  id: totrans-276
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*AWS* *Batch*: [https://docs.aws.amazon.com/parallelcluster/latest/ug/aws-services-v3.html#aws-batch-v3](https://docs.aws.amazon.com/parallelcluster/latest/ug/aws-services-v3.html#aws-batch-v3)'
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*AWS* *CloudFormation*: [https://docs.aws.amazon.com/parallelcluster/latest/ug/aws-services-v3.html#aws-services-cloudformation-v3](https://docs.aws.amazon.com/parallelcluster/latest/ug/aws-services-v3.html#aws-services-cloudformation-v3)'
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Amazon* *CloudWatch*: [https://docs.aws.amazon.com/parallelcluster/latest/ug/aws-services-v3.html#amazon-cloudwatch-v3](https://docs.aws.amazon.com/parallelcluster/latest/ug/aws-services-v3.html#amazon-cloudwatch-v3)'
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Amazon CloudWatch* *Logs*: [https://docs.aws.amazon.com/parallelcluster/latest/ug/aws-services-v3.html#amazon-cloudwatch-logs-v3](https://docs.aws.amazon.com/parallelcluster/latest/ug/aws-services-v3.html#amazon-cloudwatch-logs-v3)'
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*AWS* *CodeBuild*: [https://docs.aws.amazon.com/parallelcluster/latest/ug/aws-services-v3.html#aws-codebuild-v3](https://docs.aws.amazon.com/parallelcluster/latest/ug/aws-services-v3.html#aws-codebuild-v3)'
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Amazon* *DynamoDB*: [https://docs.aws.amazon.com/parallelcluster/latest/ug/aws-services-v3.html#amazon-dynamodb-v3](https://docs.aws.amazon.com/parallelcluster/latest/ug/aws-services-v3.html#amazon-dynamodb-v3)'
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Amazon Elastic Block* *Store*: [https://docs.aws.amazon.com/parallelcluster/latest/ug/aws-services-v3.html#amazon-elastic-block-store-ebs-v3](https://docs.aws.amazon.com/parallelcluster/latest/ug/aws-services-v3.html#amazon-elastic-block-store-ebs-v3)'
  id: totrans-283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Amazon Elastic Container* *Registry*: [https://docs.aws.amazon.com/parallelcluster/latest/ug/aws-services-v3.html#amazon-elastic-container-registry-ecr-v3](https://docs.aws.amazon.com/parallelcluster/latest/ug/aws-services-v3.html#amazon-elastic-container-registry-ecr-v3)'
  id: totrans-284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Amazon* *EFS*: [https://docs.aws.amazon.com/parallelcluster/latest/ug/aws-services-v3.html#amazon-efs-v3](https://docs.aws.amazon.com/parallelcluster/latest/ug/aws-services-v3.html#amazon-efs-v3)'
  id: totrans-285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Amazon FSx for* *Lustre*: [https://docs.aws.amazon.com/parallelcluster/latest/ug/aws-services-v3.html#amazon-fsx-for-lustre-v3](https://docs.aws.amazon.com/parallelcluster/latest/ug/aws-services-v3.html#amazon-fsx-for-lustre-v3)'
  id: totrans-286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
