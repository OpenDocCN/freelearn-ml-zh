["```py\nPM> install-package Accord.MachineLearning\n\n```", "```py\n#r \"../packages/Accord.3.0.2/lib/net40/Accord.dll\"\n#r \"../packages/Accord.Math.3.0.2/lib/net40/Accord.Math.dll\"\n#r \"../packages/Accord.MachineLearning.3.0.2/lib/net40/Accord.MachineLearning.dll\"\n\nopen Accord\nopen Accord.Math\nopen Accord.MachineLearning\n\nlet inputs = [|[|5.0;1.0|];[|4.5;1.5|];[|5.1;0.75|];[|1.0;3.5|];[|0.5;4.0|];[|1.25;4.0|]|]\nlet outputs = [|1;1;1;0;0;0|]\n\nlet classes = 2\nlet k = 3\nlet knn = new KNearestNeighbors(k, classes, inputs, outputs)\n```", "```py\nval inputs : float [] [] =\n [|[|5.0; 1.0|]; [|4.5; 1.5|]; [|5.1; 0.75|]; [|1.0; 3.5|]; [|0.5; 4.0|];\n [|1.25; 4.0|]|]\nval outputs : int [] = [|1; 1; 1; 0; 0; 0|]\nval classes : int = 2\nval k : int = 3\nval knn : KNearestNeighbors\n\n```", "```py\nlet input = [|5.0;0.5|]\nlet output = knn.Compute input\n```", "```py\nval input : float [] = [|5.0; 0.5|]\nval output : int = 1\n\n```", "```py\n#r \"../packages/Accord.3.0.2/lib/net40/Accord.dll\"\n#r \"../packages/Accord.Math.3.0.2/lib/net40/Accord.Math.dll\"\n#r \"../packages/Accord.Statistics.3.0.2/lib/net40/Accord.Statistics.dll\"\n#r \"../packages/Accord.MachineLearning.3.0.2/lib/net40/Accord.MachineLearning.dll\"\n\nopen Accord\nopen Accord.Math\nopen Accord.Statistics\nopen Accord.MachineLearning.Bayes\n\nlet inputs = [|[|0;0;0;0|];[|0;0;0;1|];[|1;0;0;0|];\n               [|2;1;0;0|];[|2;2;1;0|];[|2;2;1;1|];\n               [|1;2;1;1|];[|0;1;0;0|];[|0;2;1;0|];\n               [|2;1;1;0|];[|0;2;1;1|];[|1;1;0;1|];\n               [|1;0;1;0|];[|2;1;0;1|]|]\n\nlet outputs = [|0;0;1;1;1;0;1;0;1;1;1;1;1;0|]\n\nlet symbols = [|3;3;2;2|]\n```", "```py\nval inputs : int [] [] =\n [|[|0; 0; 0; 0|]; [|0; 0; 0; 1|]; [|1; 0; 0; 0|]; [|2; 1; 0; 0|];\n [|2; 2; 1; 0|]; [|2; 2; 1; 1|]; [|1; 2; 1; 1|]; [|0; 1; 0; 0|];\n [|0; 2; 1; 0|]; [|2; 1; 1; 0|]; [|0; 2; 1; 1|]; [|1; 1; 0; 1|];\n [|1; 0; 1; 0|]; [|2; 1; 0; 1|]|]\n\n>\n\nval outputs : int [] = [|0; 0; 1; 1; 1; 0; 1; 0; 1; 1; 1; 1; 1; 0|]\n\n>\n\nval symbols : int [] = [|3; 3; 2; 2|]\n\n```", "```py\nlet bayes = new Accord.MachineLearning.Bayes.NaiveBayes(4,symbols)\nlet error = bayes.Estimate(inputs, outputs)\n```", "```py\nval bayes : Bayes.NaiveBayes\nval error : float = 0.1428571429\n\n```", "```py\nlet input = [|0;1;1;0|]\nlet output = bayes.Compute(input)\n```", "```py\nval input : int [] = [|0; 1; 1; 0|]\nval output : int = 1\n\n```", "```py\nPM> Install-Package FSharp.EntityFramework.MicrosoftSqlServer â€“Pre\nPM> Install-Package fslab\nPM> Install-Package FSharp.Data.SqlClient\nPM> Install-Package Microsoft.SqlServer.Types\n\n```", "```py\n#I \"../packages\"\n\n#r \"EntityFramework.Core.7.0.0-rc1-final/lib/net451/EntityFramework.Core.dll\"\n#r \"EntityFramework.MicrosoftSqlServer.7.0.0-rc1-final/lib/net451/EntityFramework.MicrosoftSqlServer.dll\"\n#r \"EntityFramework.Relational.7.0.0-rc1-final/lib/net451/EntityFramework.Relational.dll\"\n#r \"Inflector.1.0.0.0/lib/net45/Inflector.dll\"\n#r \"Microsoft.Extensions.Caching.Abstractions.1.0.0-rc1-final/lib/net451/Microsoft.Extensions.Caching.Abstractions.dll\"\n#r \"Microsoft.Extensions.Caching.Memory.1.0.0-rc1-final/lib/net451/Microsoft.Extensions.Caching.Memory.dll\"\n#r \"Microsoft.Extensions.Configuration.1.0.0-rc1-final/lib/net451/Microsoft.Extensions.Configuration.dll\"\n#r \"Microsoft.Extensions.Configuration.Abstractions.1.0.0-rc1-final/lib/net451/Microsoft.Extensions.Configuration.Abstractions.dll\"\n#r \"Microsoft.Extensions.Configuration.Binder.1.0.0-rc1-final/lib/net451/Microsoft.Extensions.Configuration.Binder.dll\"\n#r \"Microsoft.Extensions.DependencyInjection.1.0.0-rc1-final/lib/net451/Microsoft.Extensions.DependencyInjection.dll\"\n#r \"Microsoft.Extensions.Logging.1.0.0-rc1-final/lib/net451/Microsoft.Extensions.Logging.dll\"\n#r \"Microsoft.Extensions.Logging.Abstractions.1.0.0-rc1-final/lib/net451/Microsoft.Extensions.Logging.Abstractions.dll\"\n#r \"Microsoft.Extensions.OptionsModel.1.0.0-rc1-final/lib/net451/Microsoft.Extensions.OptionsModel.dll\"\n#r \"Microsoft.Extensions.Primitives.1.0.0-rc1-final/lib/net451/Microsoft.Extensions.Primitives.dll\"\n#r \"Remotion.Linq.2.0.1/lib/net45/Remotion.Linq.dll\"\n#r \"System.Collections.Immutable.1.1.36/lib/portable-net45+win8+wp8+wpa81/System.Collections.Immutable.dll\"\n#r \"System.Diagnostics.DiagnosticSource.4.0.0-beta-23516/lib/dotnet5.2/System.Diagnostics.DiagnosticSource.dll\"\n#r \"System.Xml.Linq.dll\"\n#r \"Ix-Async.1.2.5/lib/net45/System.Interactive.Async.dll\"\n#r \"FSharp.EntityFramework.MicrosoftSqlServer.0.0.2.0-alpha/lib/net451/FSharp.EntityFramework.MicrosoftSqlServer.dll\"\n\n#r \"../packages/Microsoft.Extensions.DependencyInjection.Abstractions.1.0.0-rc1-final/lib/net451/Microsoft.Extensions.DependencyInjection.Abstractions.dll\"\n#r \"../packages/FSharp.Data.SqlClient.1.7.7/lib/net40/FSharp.Data.SqlClient.dll\"\n#r \"../packages/Microsoft.SqlServer.Types.11.0.2/lib/net20/Microsoft.SqlServer.Types.dll\"\n#r \"../packages/FSharp.Data.2.2.5/lib/net40/FSharp.Data.dll\"\n\n#r \"../packages/Accord.3.0.2/lib/net40/Accord.dll\"\n#r \"../packages/Accord.Math.3.0.2/lib/net40/Accord.Math.dll\"\n#r \"../packages/Accord.MachineLearning.3.0.2/lib/net40/Accord.MachineLearning.dll\"\n#r \"../packages/Accord.Statistics.3.0.2/lib/net40/Accord.Statistics.dll\"\n\nopen System\nopen FSharp.Data\nopen FSharp.Data.Entity\nopen Microsoft.Data.Entity\n\nopen Accord\nopen Accord.Math\nopen Accord.Statistics\nopen Accord.MachineLearning\nopen Accord.Statistics.Filters\nopen Accord.Statistics.Analysis\nopen Accord.MachineLearning.Bayes\nopen Accord.Statistics.Models.Regression\nopen Accord.Statistics.Models.Regression.Fitting\n```", "```py\n[<Literal>]\nlet connectionString = \"data source=nc54a9m5kk.database.windows.net;initial catalog=AdventureWorks2014;user id=PacktReader;password=P@cktM@chine1e@rning;\"\ntype AdventureWorks = SqlServer<connectionString, Pluralize = true>\nlet context = new AdventureWorks()\n```", "```py\n nested type Sales.SalesTerritoryHistory\n nested type Sales.ShoppingCartItem\n nested type Sales.SpecialOffer\n nested type Sales.SpecialOfferProduct\n nested type Sales.Store\n nested type dbo.AWBuildVersion\n nested type dbo.DatabaseLog\n nested type dbo.ErrorLog\n end\nval context : AdventureWorks\n\n```", "```py\nlet (|=|) id a = Array.contains id a\nlet productSubcategories = [|new System.Nullable<int>(1); new System.Nullable<int>(2); new System.Nullable<int>(3)|]\n```", "```py\nval ( |=| ) : id:'a -> a:'a [] -> bool when 'a : equality\nval productSubcategories : Nullable<int> [] = [|1; 2; 3|]\n\n```", "```py\nlet orderCustomers = \n    query { for soh in context.``Sales.SalesOrderHeaders`` do\n            join sod in context.``Sales.SalesOrderDetails`` on (soh.SalesOrderID = sod.SalesOrderID)\n            join p in context.``Production.Products`` on (sod.ProductID = p.ProductID)\n            join c in context.``Sales.Customers`` on (soh.CustomerID = c.CustomerID)\n            where (soh.OrderDate > DateTime(2013,5,1) && p.ProductSubcategoryID |=| productSubcategories && c.StoreID  = System.Nullable<int>())\n            select(soh.SalesOrderID,c.CustomerID)} |> Seq.toArray\n```", "```py\nval orderCustomers : (int * int) [] =\n [|(50788, 27575); (50789, 13553); (50790, 21509); (50791, 15969);\n (50792, 15972); (50793, 14457); (50794, 27488); (50795, 27489);\n (50796, 27490); (50797, 17964); (50798, 17900); (50799, 21016);\n (50800, 11590); (50801, 15989); (50802, 14494); (50803, 15789);\n (50804, 24466); (50805, 14471); (50806, 17980); (50807, 11433);\n (50808, 115\n\n```", "```py\nlet salesOrderIds = orderCustomers |> Array.distinctBy(fun (soid,coid) -> soid)\n                                   |> Array.map(fun (soid,cid) -> soid)\n```", "```py\nval salesOrderIds : int [] =\n [|50788; 50789; 50790; 50791; 50792; 50793; 50794; 50795; 50796; 50797;\n 50798; 50799; 50800; 50801; 50802; 50803; 50804; 50805; 50806; 50807;\n 50808; 50809\n\n```", "```py\nlet orderDetailCounts = \n    query { for soh in context.``Sales.SalesOrderHeaders`` do\n            join sod in context.``Sales.SalesOrderDetails`` on (soh.SalesOrderID = sod.SalesOrderID)\n            join p in context.``Production.Products`` on (sod.ProductID = p.ProductID)\n            join c in context.``Sales.Customers`` on (soh.CustomerID = c.CustomerID)\n            where (sod.SalesOrderID |=| salesOrderIds)\n            select(sod.SalesOrderID, sod.SalesOrderDetailID)} \n            |> Seq.countBy(fun (soid, sodid) -> soid)\n            |> Seq.toArray\n```", "```py\nval orderDetailCounts : (int * int) [] =\n [|(50788, 1); (50789, 1); (50790, 1); (50791, 1); (50792, 1); (50793, 1);\n (50794, 1); (50795, 1); (50796, 1); (50797, 1); (50798, 1); (50799, 1);\n (50800, 1); (50801, 1); (50802, 1); (50803, 1); (50804, 1); (50805, 1);\n (50806, 1); (50807\n\n```", "```py\n[<Literal>]\nlet commandText = \"Select * from [Sales].[vIndividualCustomer]\"\nlet command = new SqlCommandProvider<commandText,connectionString>()\nlet output = command.Execute() \nlet customers = output |> Seq.toArray\n```", "```py\nval commandText : string = \"Select * from [Sales].[vIndividualCustomer]\"\nval command : SqlCommandProvider<...>\nval output : Collections.Generic.IEnumerable<SqlCommandProvider<...>.Record>\nval customers : SqlCommandProvider<...>.Record [] =\n [|{ BusinessEntityID = 9196; Title = None; FirstName = \"Calvin\"; MiddleName = Some \"A\"; LastName = \"Raji\"; Suffix = None; PhoneNumber = Some \"230-555-0191\"; PhoneNumberType = Some \"Cell\"; EmailAddress = Some \"calvin20@adventure-works.com\"; EmailPromotion = 2; AddressType = \"Shipping\"; AddressLine1 = \"5415 San Gabriel Dr.\"; AddressLine2 = None; City = \"Bothell\"; StateProvinceName = \"Washington\"; PostalCode = \"98011\"; CountryRegionName = \"United States\"; Demographics = Some\n \"<IndividualSurvey ><TotalPurchaseYTD>-13.5</TotalPurchaseYTD><DateFirstPurchase>2003-02-06Z</DateFirstPurchase><BirthDate>1963-06-14Z</BirthDate><MaritalStatus>M</MaritalStatus><YearlyIncome>50001-75000</YearlyIncome><Gender>M</Gender><TotalChildren>4</TotalChildren><NumberChildrenAtHome>2</NumberChildrenAtHome><Education>Bachelors </Education><Occupation>Professional</Occupation><HomeOwnerFlag>1</HomeOwnerFlag><NumberCarsOwned>2</NumberCarsOwned><CommuteDistance>2-5 Miles</CommuteDistance></IndividualSurvey>\" };\n { BusinessEntityID\n\n```", "```py\n[<Literal>]\nlet sampleXml = \"\"\"<IndividualSurvey ><TotalPurchaseYTD>-13.5</TotalPurchaseYTD><DateFirstPurchase>2003-02-06Z</DateFirstPurchase><BirthDate>1963-06-14Z</BirthDate><MaritalStatus>M</MaritalStatus><YearlyIncome>50001-75000</YearlyIncome><Gender>M</Gender><TotalChildren>4</TotalChildren><NumberChildrenAtHome>2</NumberChildrenAtHome><Education>Bachelors </Education><Occupation>Professional</Occupation><HomeOwnerFlag>1</HomeOwnerFlag><NumberCarsOwned>2</NumberCarsOwned><CommuteDistance>2-5 Miles</CommuteDistance></IndividualSurvey>\"\"\"\n#r \"System.Xml.Linq.dll\"\ntype IndividualSurvey = XmlProvider<sampleXml>\n\nlet getIndividualSurvey (demographic:Option<string>) =\n    match demographic.IsSome with\n    | true -> Some (IndividualSurvey.Parse(demographic.Value))\n    | false -> None\n```", "```py\ntype IndividualSurvey = XmlProvider<...>\nval getIndividualSurvey :\n demographic:Option<string> -> XmlProvider<...>.IndividualSurvey option\n\n```", "```py\nlet customerDemos = customers |> Array.map(fun c -> c.BusinessEntityID,getIndividualSurvey(c.Demographics))\n                              |> Array.filter(fun (id,s) -> s.IsSome)\n                              |> Array.map(fun (id,s) -> id, s.Value)\n                              |> Array.distinctBy(fun (id,s) -> id)\n```", "```py\n</IndividualSurvey>);\n (2455,\n <IndividualSurvey >\n <TotalPurchaseYTD>26.24</TotalPurchaseYTD>\n <DateFirstPurchase>2004-01-24Z</DateFirstPurchase>\n <BirthDate>1953-04-10Z</BirthDate>\n <MaritalStatus>M</MaritalStatus>\n <YearlyIncome>25001-50000</YearlyIncome>\n <Gender>F</Gender>\n <TotalChildren>2</TotalChildren>\n <NumberChildrenAtHome>0</NumberChildrenAtHome>\n <Education>Bachelors </Education>\n <Occupation>Management</Occupation>\n <HomeOwnerFlag>1</HomeOwnerFlag>\n <NumberCarsOwned>1</NumberCarsOwned>\n <CommuteDistance>5-10 Miles</CommuteDistance>\n</IndividualSurvey>);\n ...|]\n\n```", "```py\nlet getDemoForCustomer customerId =\n    let exists = Array.exists(fun (id,d) -> id = customerId) customerDemos\n    match exists with\n    | true -> Some (customerDemos \n                    |> Array.find(fun (id,d) -> id = customerId)\n                    |> snd)\n    | false -> None \n\nlet orderCustomerDemo = \n    orderCustomers \n    |> Array.map(fun oc -> oc, getDemoForCustomer(snd oc))\n                               |> Array.map(fun (oc,d) -> fst oc, snd oc, d)\n                               |> Array.filter(fun (oid,cid,d) -> d.IsSome)\n                               |> Array.map(fun (oid,cid,d) -> oid,cid,d.Value) \n```", "```py\n</IndividualSurvey>);\n (50949, 19070,\n <IndividualSurvey >\n <TotalPurchaseYTD>27.7</TotalPurchaseYTD>\n <DateFirstPurchase>2003-08-20Z</DateFirstPurchase>\n <BirthDate>1966-07-08Z</BirthDate>\n <MaritalStatus>S</MaritalStatus>\n <YearlyIncome>greater than 100000</YearlyIncome>\n <Gender>F</Gender>\n <TotalChildren>2</TotalChildren>\n <NumberChildrenAtHome>2</NumberChildrenAtHome>\n <Education>Bachelors </Education>\n <Occupation>Management</Occupation>\n <HomeOwnerFlag>0</HomeOwnerFlag>\n <NumberCarsOwned>4</NumberCarsOwned>\n <CommuteDistance>0-1 Miles</CommuteDistance>\n</IndividualSurvey>);\n ...|]\n\n```", "```py\nlet getMultiOrderIndForOrderId orderId =\n    orderDetailCounts \n    |> Array.find(fun (oid,c) -> oid = orderId)\n    |> snd > 1\n\nlet orders = \n    orderCustomerDemo \n    |> Array.map(fun (oid,cid,d) -> oid, getMultiOrderIndForOrderId(oid), d)\n```", "```py\n (50949, false,\n <IndividualSurvey >\n <TotalPurchaseYTD>27.7</TotalPurchaseYTD>\n <DateFirstPurchase>2003-08-20Z</DateFirstPurchase>\n <BirthDate>1966-07-08Z</BirthDate>\n <MaritalStatus>S</MaritalStatus>\n <YearlyIncome>greater than 100000</YearlyIncome>\n <Gender>F</Gender>\n <TotalChildren>2</TotalChildren>\n <NumberChildrenAtHome>2</NumberChildrenAtHome>\n <Education>Bachelors </Education>\n <Occupation>Management</Occupation>\n <HomeOwnerFlag>0</HomeOwnerFlag>\n <NumberCarsOwned>4</NumberCarsOwned>\n <CommuteDistance>0-1 Miles</CommuteDistance>\n</IndividualSurvey>);\n ...|]\n\n```", "```py\nlet getValuesForMartialStatus martialStatus =\n    match martialStatus with\n    | \"S\" -> 0.0\n    | _ -> 1.0\n\nlet getValuesForGender gender =\n    match gender with\n    | \"M\" -> 0.0\n    | _ -> 1.0\n\nlet getValuesForMultiPurchaseInd multiPurchaseInd =\n    match multiPurchaseInd with\n    | true -> 1\n    | false -> 0\n```", "```py\nval getValuesForMartialStatus : martialStatus:string -> float\nval getValuesForGender : gender:string -> float\nval getValuesForMultiPurchaseInd : multiPurchaseInd:bool -> int\n\n```", "```py\norders |> Array.distinctBy(fun (oid,ind,d) -> d.Gender)\n       |> Array.map(fun (oid,ind,d) -> d.Gender)\n//val it : string [] = [|\"M\"; \"F\"|]\n\norders |> Array.distinctBy(fun (oid,ind,d) -> d.MaritalStatus)\n       |> Array.map(fun (oid,ind,d) -> d.MaritalStatus)\n//val it : string [] = [|\"M\"; \"S\"|]\n```", "```py\nlet getValuesForGender gender =\n    match gender with\n    | \"M\" -> 0.0\n    | _ -> 1.0\n```", "```py\nlet mutable lastGender = \"M\"\nlet getValuesForGender gender =\n    match gender, lastGender with\n    | \"M\",_ -> 0.0\n    | \"F\",_ -> 1.0\n    | _,\"M\" -> lastGender = \"F\"\n               1.0\n    | _,_ -> lastGender = \"M\"\n             0.0\n```", "```py\nlet inputs = orders |> Array.map(fun (oid,ind,d) -> [|getValuesForMartialStatus(d.MaritalStatus);getValuesForGender(d.Gender)|])\nlet outputs = orders |> Array.map(fun (oid,ind,d) -> getValuesForMultiPurchaseInd(ind))\n\nlet classes = 2\nlet k = 3\nlet knn = new KNearestNeighbors(k, classes, inputs, outputs)\n```", "```py\n ...|]\nval classes : int = 2\nval k : int = 3\nval knn : KNearestNeighbors\n\n```", "```py\nknn.Compute([|0.0;0.0|])\nknn.Compute([|1.0;0.0|])\nknn.Compute([|0.0;1.0|])\nknn.Compute([|1.0;1.0|])\n```", "```py\n> \nval it : int = 1\n> \nval it : int = 1\n> \nval it : int = 0\n> \nval it : int = 1\n\n```", "```py\nlet inputs' = orders |> Array.map(fun (oid,ind,d) -> [|int(getValuesForMartialStatus(d.MaritalStatus)); \n                                                       int(getValuesForGender(d.Gender));|])\nlet outputs' = orders |> Array.map(fun (oid,ind,d) -> getValuesForMultiPurchaseInd(ind))\n\nlet symbols = [|2;2|]\n\nlet bayes = new Accord.MachineLearning.Bayes.NaiveBayes(2,symbols)\nlet error = bayes.Estimate(inputs', outputs')\n```", "```py\n ...|]\nval symbols : int [] = [|2; 2|]\nval bayes : NaiveBayes\nval error : float = 0.148738812\n\n```", "```py\nbayes.Compute([|0;0|])\nbayes.Compute([|1;0|])\nbayes.Compute([|0;1|])\nbayes.Compute([|1;1|])\n```", "```py\nval it : int = 1\n> \nval it : int = 1\n> \nval it : int = 1\n> \nval it : int = 1\n>\n\n```", "```py\nlet customerProduct = \n    query { for soh in context.``Sales.SalesOrderHeaders`` do\n            join sod in context.``Sales.SalesOrderDetails`` on (soh.SalesOrderID = sod.SalesOrderID)\n            join p in context.``Production.Products`` on (sod.ProductID = p.ProductID)\n            join c in context.``Sales.Customers`` on (soh.CustomerID = c.CustomerID)\n            where (sod.SalesOrderID |=| salesOrderIds)\n            select(c.CustomerID, sod.ProductID)} \n    |> Seq.toArray\n```", "```py\nval customerProduct : (int * int) [] =\n [|(27575, 780); (13553, 779); (21509, 759); (15969, 769); (15972, 760);\n (14457, 798); (27488, 763); (27489, 761); (27490, 770); (17964, 793);\n (17900,\n\n```", "```py\nlet getProductId customerId =\n    customerProduct |> Array.find(fun (cid,pid) -> cid = customerId)\n                    |> snd\n\nlet getSingleFemaleInd (martialStatus:string, gender:string) =\n    match martialStatus, gender with\n    | \"S\", \"F\" -> 1\n    | _, _ -> 0\n\nlet customerDemo = orderCustomerDemo |> Array.map(fun (oid,cid,d) -> cid, getSingleFemaleInd(d.MaritalStatus, d.Gender))\n                                     |> Array.map(fun (cid,sfInd) -> cid, getProductId(cid),sfInd)\n```", "```py\nval getProductId : customerId:int -> int\nval getSingleFemaleInd : martialStatus:string * gender:string -> int\nval customerDemo : (int * int * int) [] =\n [|(13553, 779, 0); (15969, 769, 0); (15972, 760, 0); (14457, 798, 0);\n (17964, 793, 0);\n\n```", "```py\nlet numberOfBikeIds = customerDemo |> Array.map (fun (cid,pid,sfInd) -> pid)\n |> Array.distinct\n |> Array.length\nval numberOfBikeIds : int = 80\n\n```", "```py\nlet inputs'' = customerDemo |> Array.map(fun (cid,pid,sfInd) -> pid)\nlet outputs'' = customerDemo |> Array.map(fun (cid,pid,sfInd) -> (float)sfInd)\n\nlet expandedInputs = Tools.Expand(inputs'')\n```", "```py\nval expandedInputs : float [] [] =\n [|[|0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0;\n 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0; 0.0;\n 0.0; 0.0\n\n```", "```py\nlet analysis = new LogisticRegressionAnalysis(expandedInputs, outputs'')\nanalysis.Compute() |> ignore\nlet pValue = analysis.ChiSquare.PValue\nlet coefficients = analysis.CoefficientValues\nlet coefficients' = coefficients |> Array.mapi(fun i c -> i,c)\n                                 |> Array.filter(fun (i,c) -> c > 5.0)\n```", "```py\nval analysis : Analysis.LogisticRegressionAnalysis\n> \nval it : unit = ()\n> \nval pValue : float = 1.0\nval coefficients : float [] =\n [|-3.625805913; 1.845275228e-10; 7.336791927e-11; 1.184805489e-10;\n -8.762459325e-11; -2.16833771e-10; -7.952785344e-12; 1.992174635e-10;\n 2.562929393e-11; -2.957572867e-11; 2.060678611e-10; -2.103176298e-11;\n -2.3\n\n```", "```py\nlet coefficients' = coefficients |> Array.mapi(fun i c -> i,c)\n |> Array.filter(fun (i,c) -> c > 5.0)\n\nval coefficients' : (int * float) [] = [|(765, 15.85774698)|]\n\n>\n\n```"]