["```py\n    sh-4.2$ cd ~/SageMaker/\n    sh-4.2$ git clone https://github.com/PacktPublishing/AWS-Certified-Machine-Learning-Specialty-MLS-C01-Certification-Guide.git\n    ```", "```py\ntuning_job_config = {\n    \"ParameterRanges\": {\n      \"CategoricalParameterRanges\": [],\n      \"ContinuousParameterRanges\": [],\n      \"IntegerParameterRanges\": [\n        {\n          \"MaxValue\": \"10\",\n          \"MinValue\": \"1\",\n          \"Name\": \"max_depth\"\n        }\n      ]\n    },\n    \"ResourceLimits\": {\n      \"MaxNumberOfTrainingJobs\": 10,\n      \"MaxParallelTrainingJobs\": 2\n    },\n    \"Strategy\": \"Bayesian\",\n    \"HyperParameterTuningJobObjective\": {\n      \"MetricName\": \"validation:auc\",\n      \"Type\": \"Maximize\"\n    }\n  }\n```", "```py\ntraining_image = sagemaker.image_uris.retrieve('xgboost', region, '1.0-1')\n```", "```py\ntraining_job_definition = {\n    \"AlgorithmSpecification\": {\n      \"TrainingImage\": training_image,\n      \"TrainingInputMode\": \"File\"\n    },\n```", "```py\n    \"InputDataConfig\": [\n      {\n        \"ChannelName\": \"train\",\n        \"CompressionType\": \"None\",\n        \"ContentType\": \"csv\",\n        \"DataSource\": {\n          \"S3DataSource\": {\n            \"S3DataDistributionType\": \"FullyReplicated\",\n            \"S3DataType\": \"S3Prefix\",\n            \"S3Uri\": s3_input_train\n          }\n        }\n      },\n      {\n        \"ChannelName\": \"validation\",\n        \"CompressionType\": \"None\",\n        \"ContentType\": \"csv\",\n        \"DataSource\": {\n          \"S3DataSource\": {\n            \"S3DataDistributionType\": \"FullyReplicated\",\n            \"S3DataType\": \"S3Prefix\",\n            \"S3Uri\": s3_input_validation\n          }\n        }\n      }\n    ],\n```", "```py\n    \"OutputDataConfig\": {\n      \"S3OutputPath\": \"s3://{}/{}/output\".format(bucket,prefix)\n    },\n```", "```py\n    \"ResourceConfig\": {\n      \"InstanceCount\": 2,\n      \"InstanceType\": \"ml.c4.2xlarge\",\n      \"VolumeSizeInGB\": 10\n    },\n    \"RoleArn\": <<your_role_name>>,\n    \"StaticHyperParameters\": {\n      \"eval_metric\": \"auc\",\n      \"num_round\": \"100\",\n      \"objective\": \"binary:logistic\",\n      \"rate_drop\": \"0.3\",\n      \"tweedie_variance_power\": \"1.4\"\n    },\n    \"StoppingCondition\": {\n      \"MaxRuntimeInSeconds\": 43200\n    }\n}\n```", "```py\nsmclient.create_hyper_parameter_tuning_job(\n     HyperParameterTuningJobName = \"my-tuning-example\",\n     HyperParameterTuningJobConfig = tuning_job_config,\n     TrainingJobDefinition = training_job_definition\n)\n```", "```py\ndef lambda_handler(event, context):\nTODO   \n```", "```py\n{\n  \"Comment\": \"A very handy example of how to call a lamnbda function with retry option\",\n  \"StartAt\": \"Invoke Lambda function\",\n  \"States\": {\n    \"Invoke Lambda function\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"arn:aws:states:::lambda:invoke\",\n      \"Parameters\": {\n        \"FunctionName\": \"arn:aws:lambda:your-function-identification\",\n        \"Payload\": {\n          \"Input\": {\n            \"env\": \"STAGE\"\n          }\n        }\n      },\n      \"Retry\": [\n        {\n          \"ErrorEquals\": [\"States.ALL\"],\n          \"IntervalSeconds\": 60,\n          \"MaxAttempts\": 5,\n          \"BackoffRate\": 2.0\n        }\n      ],\n      \"Next\": \"Example\"\n     },\n    \"Example\": {\n      \"Type\": \"Pass\",\n      \"Result\": \"Just to show you how to configure other steps\",\n      \"End\": true\n    }\n  }\n}\n```"]