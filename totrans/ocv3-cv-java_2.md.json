["```py\nCV_<bit_depth>{U|S|F}C(<number_of_channels>)\n```", "```py\nMat image2 = new Mat(480,640,CvType.CV_8UC3);\nMat image3 = new Mat(new Size(640,480), CvType.CV_8UC3);\n```", "```py\nSystem.out.println(image2 + \"rows \" + image2.rows() + \" cols \" + image2.cols() + \" elementsize \" + image2.elemSize());\n```", "```py\nMat [ 480*640*CV_8UC3, isCont=true, isSubmat=false, nativeObj=0xceeec70, dataAddr=0xeb50090 ]rows 480 cols 640 elementsize 3\n\n```", "```py\nMat image = new Mat(new Size(3,3), CvType.CV_8UC3, new Scalar(new double[]{128,3,4}));\n```", "```py\n[128, 3, 4, 128, 3, 4, 128, 3, 4;\n 128, 3, 4, 128, 3, 4, 128, 3, 4;\n 128, 3, 4, 128, 3, 4, 128, 3, 4]\n\n```", "```py\nfor(int i=0;i<image.rows();i++){\n  for(int j=0;j<image.cols();j++){ \n    image.put(i, j, new byte[]{1,2,3});\n  }\n}\n```", "```py\npublic void filter(Mat image){\n  int totalBytes = (int)(image.total() * image.elemSize());\n  byte buffer[] = new byte[totalBytes];\n  image.get(0, 0,buffer);\n  for(int i=0;i<totalBytes;i++){\n    if(i%3==0) buffer[i]=0;\n  }\n  image.put(0, 0, buffer);\n}\n```", "```py\npublic Mat openFile(String fileName) throws Exception{\n  Mat newImage = Imgcodecs.imread(fileName);\n    if(newImage.dataAddr()==0){\n      throw new Exception (\"Couldn't open file \"+fileName);\n    }\n  return newImage;\n}\n```", "```py\npackage org.javaopencvbook;\n\nimport java.io.File;\nâ€¦\nimport org.opencv.imgcodecs.Imgcodecs;\n\npublic class App\n{\n  static{ System.loadLibrary(Core.NATIVE_LIBRARY_NAME); }\n\npublic static void main(String[] args) throws Exception {\n  String filePath = \"src/main/resources/images/cathedral.jpg\";\n  Mat newImage = Imgcodecs.imread(filePath);\n  if(newImage.dataAddr()==0){\n    System.out.println(\"Couldn't open file \" + filePath);\n  } else{\n    ImageViewer imageViewer = new ImageViewer();\n    imageViewer.show(newImage, \"Loaded image\");\n  }\n  }\n}\n```", "```py\npackage org.javaopencvbook.util;\n\nimport java.awt.BorderLayout;\nimport java.awt.Dimension;\nimport java.awt.Image;\nimport java.awt.image.BufferedImage;\n\nimport javax.swing.ImageIcon;\nimport javax.swing.JFrame;\nimport javax.swing.JLabel;\nimport javax.swing.JScrollPane;\nimport javax.swing.UIManager;\nimport javax.swing.UnsupportedLookAndFeelException;\nimport javax.swing.WindowConstants;\n\nimport org.opencv.core.Mat;\nimport org.opencv.imgproc.Imgproc;\n\npublic class ImageViewer {\n  private JLabel imageView;\n\n  public void show(Mat image){\n    show(image, \"\");\n  }\n\n  public void show(Mat image,String windowName){\n    setSystemLookAndFeel();\n\n    JFrame frame = createJFrame(windowName);\n\n        Image loadedImage = toBufferedImage(image);\n        imageView.setIcon(new ImageIcon(loadedImage));\n\n        frame.pack();\n        frame.setLocationRelativeTo(null);\n        frame.setVisible(true);\n\n  }\n\n  private JFrame createJFrame(String windowName) {\n    JFrame frame = new JFrame(windowName);\n    imageView = new JLabel();\n    final JScrollPane imageScrollPane = new JScrollPane(imageView);\n        imageScrollPane.setPreferredSize(new Dimension(640, 480));\n        frame.add(imageScrollPane, BorderLayout.CENTER);\n        frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\n    return frame;\n  }\n\n  private void setSystemLookAndFeel() {\n    try {\n      UIManager.setLookAndFeel (UIManager.getSystemLookAndFeelClassName());\n    } catch (ClassNotFoundException e) {\n      e.printStackTrace();\n    } catch (InstantiationException e) {\n      e.printStackTrace();\n    } catch (IllegalAccessException e) {\n      e.printStackTrace();\n    } catch (UnsupportedLookAndFeelException e) {\n      e.printStackTrace();\n    }\n  }\n\n  public Image toBufferedImage(Mat matrix){\n    int type = BufferedImage.TYPE_BYTE_GRAY;\n    if ( matrix.channels() > 1 ) {\n      type = BufferedImage.TYPE_3BYTE_BGR;\n    }\n    int bufferSize = matrix.channels()*matrix.cols()*matrix.rows();\n    byte [] buffer = new byte[bufferSize];\n    matrix.get(0,0,buffer); // get all the pixels\n    BufferedImage image = new BufferedImage(matrix.cols(),matrix.rows(), type);\n    final byte[] targetPixels = ((DataBufferByte) image.getRaster().getDataBuffer()).getData();\n    System.arraycopy(buffer, 0, targetPixels, 0, buffer.length);\n    return image;\n  }\n\n}\n```", "```py\nMat byteImage = new Mat();\noriginalImage.convertTo(byteImage, CvType.CV_8UC3);\n```", "```py\nVideoCapture capture = new VideoCapture(0);\ncapture.set(Videoio.CAP_PROP_FRAME_WIDTH,640);\ncapture.set(Videoio.CAP_PROP_FRAME_HEIGHT,480);\n```", "```py\npackage org.javaopencvbook;\n\nimport java.awt.Image;\nimport java.io.File;\n\nimport javax.swing.ImageIcon;\nimport javax.swing.JFrame;\nimport javax.swing.JLabel;\n\nimport org.javaopencvbook.utils.ImageProcessor;\nimport org.opencv.core.Core;\nimport org.opencv.core.Mat;\nimport org.opencv.videoio.Videoio;\nimport org.opencv.videoio.VideoCapture;\n\npublic class App\n{\n  static{ System.loadLibrary(Core.NATIVE_LIBRARY_NAME);\n  }\n\n  private JFrame frame;\n  private JLabel imageLabel;\n\n  public static void main(String[] args) {\n    App app = new App();\n app.initGUI();\n app.runMainLoop(args);\n  }\n\n  private void initGUI() {\n    frame = new JFrame(\"Camera Input Example\");  \n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  \n    frame.setSize(400,400);  \n    imageLabel = new JLabel();\n    frame.add(imageLabel);\n    frame.setVisible(true);       \n  }\n\n  private void runMainLoop(String[] args) {\n    ImageProcessor imageProcessor = new ImageProcessor();\n    Mat webcamMatImage = new Mat(); \n Image tempImage; \n    VideoCapture capture = new VideoCapture(0);\n capture.set(Videoio.CAP_PROP_FRAME_WIDTH,320);\n capture.set(Videoio.CAP_PROP_FRAME_HEIGHT,240);\n\n    if( capture.isOpened()){  \n    while (true){  \n    capture.read(webcamMatImage);\n    if( !webcamMatImage.empty() ){\n  tempImage= imageProcessor.toBufferedImage(webcamMatImage);\n  ImageIcon imageIcon = new ImageIcon(tempImage, \"Captured video\");\n  imageLabel.setIcon(imageIcon);\n  frame.pack();  //this will resize the window to fit the image\n      }  \n    else{\n      System.out.println(\" -- Frame not captured -- Break!\");\n      break;  \n    }\n  }\n  }\n  else{\n    System.out.println(\"Couldn't open capture.\");\n  }\n  }\n}\n```", "```py\nVideoCapture capture = new VideoCapture(\"src/main/resources/videos/tree.avi\");\n```", "```py\nprivate void setupSlider(JFrame frame) {\nJLabel sliderLabel = new JLabel(\"Blur level\", JLabel.CENTER);\nsliderLabel.setAlignmentX(Component.CENTER_ALIGNMENT);\n\nint minimum = 0;\nint maximum = 10;\nint initial =0;\nJSlider levelSlider = new JSlider(JSlider.HORIZONTAL, minimum, maximum, initial);\n\nlevelSlider.setMajorTickSpacing(2);\nlevelSlider.setMinorTickSpacing(1);\nlevelSlider.setPaintTicks(true);\nlevelSlider.setPaintLabels(true);\nlevelSlider.addChangeListener(new ChangeListener() {\n\n  public void stateChanged(ChangeEvent e) {\n    JSlider source = (JSlider)e.getSource();\n    int level = (int)source.getValue();\n    Mat output = imageProcessor.blur(image, level);\n    updateView(output);\n    }\n  });\nframe.add(sliderLabel);\nframe.add(levelSlider);\n}\n```", "```py\nprivate void setupImage(JFrame frame) {\n  JLabel mouseWarning = new JLabel(\"Try clicking on the image!\", JLabel.CENTER);\n  mouseWarning .setAlignmentX(Component.CENTER_ALIGNMENT);\n  mouseWarning.setFont(new Font(\"Serif\", Font.PLAIN, 18));\n  frame.add(mouseWarning);\n\n  imageView = new JLabel();\n\n  final JScrollPane imageScrollPane = new JScrollPane(imageView);\n  imageScrollPane.setPreferredSize(new Dimension(640, 480));\n\n  imageView.addMouseListener(new MouseAdapter()\n  {\n    public void mousePressed(MouseEvent e)\n    {\n      Imgproc.circle(image,new Point(e.getX(),e.getY()),20, new Scalar(0,0,255), 4);\n      updateView(image);\n    }\n  });\n\nframe.add(imageScrollPane);\n}\n```", "```py\nprivate void setupButton(JFrame frame) {\n  JButton clearButton = new JButton(\"Clear\");\n  clearButton.addActionListener(new ActionListener() {\n\n  public void actionPerformed(ActionEvent event) {\n    image = originalImage.clone();\n    updateView(originalImage);\n  }\n});\nclearButton.setAlignmentX(Component.CENTER_ALIGNMENT);\nframe.add(clearButton);\n}\n```"]