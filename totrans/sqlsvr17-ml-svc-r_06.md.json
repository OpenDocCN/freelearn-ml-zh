["```py\nUSE [master]\nBACKUP LOG [TutorialDB] TO DISK = N'C:\\Program Files\\Microsoft SQL Server\\MSSQL14.MSSQLSERVER\\MSSQL\\Backup\\TutorialDB_LogBackup_2018-01-01_23-59-09.bak'\n```", "```py\nWITH NOFORMAT, NOINIT, NAME = N'TutorialDB_LogBackup_2018-01-01_23-59-09', NOSKIP, NOREWIND, NOUNLOAD, NORECOVERY , STATS = 5\n\nRESTORE DATABASE [TutorialDB] FROM DISK = N'C:\\Program Files\\Microsoft SQL Server\\MSSQL14.MSSQLSERVER\\MSSQL\\Backup\\TutorialDB.bak' \nWITH FILE = 2, MOVE N'TutorialDB' TO N'C:\\Program Files\\Microsoft SQL Server\\MSSQL14.MSSQLSERVER\\MSSQL\\DATA\\TutorialDB.mdf', \nMOVE N'TutorialDB_log' TO N'C:\\Program Files\\Microsoft SQL Server\\MSSQL14.MSSQLSERVER\\MSSQL\\DATA\\TutorialDB_log.ldf', NOUNLOAD, STATS = 5\n\nGO \n```", "```py\nSELECT RentalCount,Day,Month, Holiday, Snow FROM rental_data  \n```", "```py\nEXEC sp_execute_external_Script\n@LANGUAGE = N'R'\n,@script = N'\n dr_rent <- InputDataSet\n dr_rent <- data.frame(dr_rent)\n    summary <- rxSummary(~ RentalCount  + Year + Month + Day  + WeekDay + Snow + Holiday , data = dr_rent)\n    OutputDataSet <- summary$sDataFrame'\n,@input_data_1 = N'SELECT  RentalCount, Year, Month, Day, WeekDay, Snow, Holiday FROM rental_data'\nWITH RESULT SETS ((\n [Name]   NVARCHAR(100)\n ,Mean   NUMERIC(16,3)\n ,StdDev  NUMERIC(16,3)\n ,[Min]   INT\n ,[Max]  INT\n ,ValidObs  INT\n ,MissingObs INT\n));\nGO\n\n```", "```py\nEXEC sp_execute_external_Script\n@LANGUAGE = N'R'\n,@script = N'\n      dr_rent <- InputDataSet\n      OutputDataSet <- data.frame(cor(dr_rent$Holiday, dr_rent$RentalCount))\n'\n,@input_data_1 = N'SELECT  Holiday, RentalCount FROM rental_data'\nWITH RESULT SETS ((\n cor NUMERIC(10,3)\n ));\nGO\n\n```", "```py\nEXEC sp_execute_external_Script\n@LANGUAGE = N'R'\n,@script = N'\n    dr_rent <- InputDataSet\n    dr_rent <- data.frame(dr_rent)\n    cor_HR <- cor(dr_rent$Holiday, dr_rent$RentalCount)\n    cor_FR <- cor(as.numeric(dr_rent$FWeekDay), dr_rent$RentalCount)\n    cor_MR <- cor(dr_rent$Month, dr_rent$RentalCount)\n    cor_YR <- cor(dr_rent$Year,dr_rent$RentalCount)\n    d <- data.frame(cbind(cor_HR, cor_FR, cor_MR, cor_YR))\n    OutputDataSet <- d'\n    ,@input_data_1 = N'SELECT  Holiday, RentalCount,Month,FWeekDay, Year FROM rental_data'\nWITH RESULT SETS ((\n cor_HR NUMERIC(10,3)\n,cor_FR NUMERIC(10,3)\n,cor_MR NUMERIC(10,3)\n,cor_YR NUMERIC(10,3)\n));\nGO\n\n```", "```py\nEXEC sp_execute_external_Script\n@LANGUAGE = N'R'\n,@script = N'\n library(corrplot)  # * footnote\n dr_rent <- InputDataSet\n\n dr_rent$FWeekDay <- as.numeric(dr_rent$FWeekDay)\n dr_rent$FHoliday <- as.numeric(dr_rent$FHoliday)\n            dr_rent$FSnow <- as.numeric(dr_rent$FSnow)\n\n    cor.mtest <- function(mat, ...) {\n         mat <- as.matrix(mat)\n         n <- ncol(mat)\n         p.mat<- matrix(NA, n, n)\n         diag(p.mat) <- 0\n         for (i in 1:(n - 1)) {\n             for (j in (i + 1):n) {\n             tmp <- cor.test(mat[, i], mat[, j], ...)\n             p.mat[i, j] <- p.mat[j, i] <- tmp$p.value\n             }\n         }\n         colnames(p.mat) <- rownames(p.mat) <- colnames(mat)\n         p.mat\n         }\n    p.mat <- cor.mtest(dr_rent)\n\n    R<-cor(dr_rent)\n\n    col <- colorRampPalette(c(\"#BB4444\", \"#EE9988\", \"#FFFFFF\", \"#77AADD\", \"#4477AA\"))\n\n    image_file = tempfile(); \n    jpeg(filename = image_file); \n\nplot_corr <- corrplot(R, method=\"color\", col=col(200), \n type=\"upper\", order=\"hclust\", \n addCoef.col = \"black\", # Add coefficient of correlation\n tl.col=\"black\", tl.srt=45, #Text label color and rotation\n # Combine with significance\n p.mat = p.mat, sig.level = 0.01, insig = \"blank\", \n # hide correlation coefficient on the principal diagonal\n diag=FALSE)\n dev.off(); \nOutputDataSet <- data.frame(data=readBin(file(image_file, \"rb\"), what=raw(), n=1e6));  '\n\n,@input_data_1 = N'SELECT  *  FROM rental_data'\nWITH RESULT SETS ((\n correlation_plot varbinary(max)\n```", "```py\n));\nGO\n\n```", "```py\nFormula_correlation =  ~ RentalCount + Year + Month + Day  + WeekDay + Snow + Holiday \nallCor <- rxCovCor(Formula_correlation, data = dr_rent, type = \"Cor\")\nallCor\n\n```", "```py\nEXEC sp_execute_external_Script\n@LANGUAGE = N'R'\n,@script = N'\n            #ANOVA\n    ANOVA <- aov(RentalCount ~ Holiday, data = InputDataSet) \n            F_Stat<- unlist(summary(ANOVA))[7]\n            F_Stat_Sig <- unlist(summary(ANOVA))[9]\n            df <- cbind(F_Stat, F_Stat_Sig)\nOutputDataSet <- data.frame(df)'\n\n,@input_data_1 = N'SELECT  RentalCount,Holiday FROM rental_data'\nWITH RESULT SETS ((\n F_Statistic NVARCHAR(200)\n,Statistical_Significance NUMERIC(16,5)\n));\nGO\n\n```", "```py\nstripchart(RentalCount ~ Holiday, vertical=TRUE, pch=9, \n               data=dr_rent_ANOVA, xlab=\"Holiday day (Yes/No)\", ylab=\"Rental count\", method=\"jitter\", jitter=0.09)\n\n```", "```py\nEXEC sp_execute_external_Script\n@LANGUAGE = N'R'\n,@script = N'\n library(randomForest)\n dr_rent  <- InputDataSet\n fit_RF <- randomForest(factor(dr_rent$RentalCount)~., data=dr_rent)\n vp_rf <- importance(fit_RF)\n\n      vp_rf<- data.frame(vp_rf)\n      imena <- row.names(vp_rf)\n      vp_rf <- data.frame(cbind(imena, vp_rf))\n    OutputDataSet <- vp_rf'\n\n,@input_data_1 = N'SELECT  *  FROM rental_data'\nWITH RESULT SETS ((\n    Variable NVARCHAR(200)\n,MeanDecreaseGini NUMERIC(16,5)\n));\nGO    \n```", "```py\nUSE RentalDB;\nGO\n\n-- rxLinMod\n\nEXEC sp_execute_external_Script\n@LANGUAGE = N'R'\n,@script = N'\n            library(RevoScaleR)\n            dr_rent <- InputDataSet\n            Formula_supervised =  RentalCount ~ Year + Month + Day  + WeekDay + Snow + Holiday             \n            #Create Linear Model \n            rent_lm <- rxLinMod(formula=Formula_supervised, data = dr_rent)\n\n            #PREDICT   \n            rent_Pred <- rxPredict(modelObject = rent_lm, data = dr_rent, extraVarsToWrite = c(\"RentalCount\",\"Year\",\"Month\",\"Day\"), writeModelVars = TRUE)\n            OutputDataSet <- data.frame(rent_Pred)\n'\n,@input_data_1 = N'SELECT RentalCount,Year, Month, Day, WeekDay,Snow,Holiday  FROM rental_data'\nWITH RESULT SETS ((\n RentalCount_Pred    NUMERIC(16,3)\n,RentalCount  NUMERIC(16,3)\n,YearINT\n,MonthINT\n,DayINT\n,WeekDayINT\n,Snow  INT\n,Holiday INT\n));\nGO\n\n-- rxGlm\n\nEXEC sp_execute_external_Script\n@LANGUAGE = N'R'\n,@script = N'\n            library(RevoScaleR)\n            dr_rent <- InputDataSet\n            Formula_supervised =  RentalCount ~ Year + Month + Day  + WeekDay + Snow + Holiday             \n\n            #PREDICT   \n                rent_glm <- rxGlm(formula = Formula_supervised, family = Gamma, dropFirst = TRUE, data = dr_rent)\n                rent_Pred <- rxPredict(modelObject = rent_glm, data = dr_rent, extraVarsToWrite=c(\"RentalCount\",\"Year\",\"Month\",\"Day\"), writeModelVars = TRUE)\n            OutputDataSet <- data.frame(rent_Pred)'\n,@input_data_1 = N'SELECT RentalCount,Year, Month, Day, WeekDay,Snow,Holiday  FROM rental_data'\nWITH RESULT SETS ((\n RentalCount_Pred    NUMERIC(16,3)\n,RentalCount  NUMERIC(16,3)\n,YearINT\n,MonthINT\n,DayINT\n,WeekDayINT\n,Snow  INT\n,Holiday INT\n));\nGO\n\n-- rxDTree\n\nEXEC sp_execute_external_Script\n@LANGUAGE = N'R'\n,@script = N'\n            library(RevoScaleR)\n            dr_rent <- InputDataSet\n            Formula_supervised =  RentalCount ~ Year + Month + Day  + WeekDay + Snow + Holiday             \n\n            #PREDICT   \n                        rent_dt <- rxDTree(formula = Formula_supervised, data = dr_rent)\n                        rent_Pred <- rxPredict(modelObject = rent_dt, data = dr_rent, extraVarsToWrite=c(\"RentalCount\",\"Year\",\"Month\",\"Day\"), writeModelVars = TRUE)\n            OutputDataSet <- data.frame(rent_Pred)\n\n                '\n,@input_data_1 = N'SELECT RentalCount,Year, Month, Day, WeekDay,Snow,Holiday  FROM rental_data'\nWITH RESULT SETS ((\n```", "```py\n RentalCount_Pred    NUMERIC(16,3)\n,RentalCount  NUMERIC(16,3)\n,YearINT\n,MonthINT\n,DayINT\n,WeekDayINT\n,Snow  INT\n,Holiday INT\n));\nGO  \n```", "```py\nFormula_supervised =  RentalCount ~ Year + Month + Day  + WeekDay + Snow + Holiday \n\n```", "```py\nrxSetComputeContext(local)\nrxSetComputeContext(sql)  \n```", "```py\n-- We can set 70% of the original data\n-- IN SQL Server\nSELECT\nTOP (70)PERCENT\n*\nINTO dbo.Train_rental_data\nFROM rental_data\nORDER BY ABS (CAST(BINARY_CHECKSUM(RentalCount,NEWID())asint))ASC\n-- (318 rows affected) \n\n-- Or we can set by the year; year 2013 and 2014 for training and 2015 for testing? making it cca 70% for training as well\nSELECT COUNT(*),YEAR FROM rental_data GROUP BY YEAR\n\n```", "```py\n-- or in R\nEXEC sp_execute_external_Script\n        @language = N'R'\n        ,@script = N'\n                        library(caTools)\n\n                        set.seed(2910) \n                        dr_rent <- InputDataSet\n                        Split <- .70\n                        sample = sample.split(dr_rent$RentalCount, SplitRatio = Split)\n                        train_dr_rent <- subset(dr_rent, sample == TRUE)\n                        test_dr_rent  <- subset(dr_rent, sample == FALSE)\n            OutputDataSet <- data.frame(train_dr_rent)\n\n                '\n,@input_data_1 = N'SELECT * FROM rental_data'\nWITH RESULT SETS ((\n         [Year] INT\n        ,[Month] INT\n        ,[Day] INT\n        ,[RentalCount] INT\n        ,[WeekDay] INT\n        ,[Holiday] INT\n        ,[Snow] INT\n        ,[FHoliday] INT\n        ,[FSnow] INT\n        ,[FWeekDay] INT\n));\nGO \n```", "```py\n-- Variables to keep\n-- and creating formula\nEXEC sp_execute_external_Script\n        @language = N'R'\n        ,@script = N'\n        dr_rent <- InputDataSet\n            variables_all <- rxGetVarNames(dr_rent)\n            variables_to_remove <- c(\"FSnow\", \"FWeekDay\", \"FHoliday\")\n            traning_variables <- variables_all[!(variables_all %in% c(\"RentalCount\", variables_to_remove))]\n            #use as.formula to create an object\n        formula <- as.formula(paste(\"RentalCount ~\", paste(traning_variables, collapse = \"+\")))\n                #formula <- paste(\"RentalCount ~\", paste(traning_variables, collapse = \"+\"))\n            OutputDataSet <- data.frame(formula)'\n,@input_data_1 = N'SELECT * FROM dbo.Train_rental_data'\nWITH RESULT SETS ((\n         [Formula_supervised] NVARCHAR(1000)\n));\nGO \n```", "```py\n-- Random forest\n\nDROP PROCEDURE IF EXISTS dbo.forest_model;\nGO\n\nCREATE OR ALTER PROCEDURE dbo.forest_model(\n         @trained_model VARBINARY(MAX)OUTPUT\n        ,@accuracy FLOATOUTPUT\n        )\nAS\nBEGIN\nEXEC sp_execute_external_script\n@language = N'R'\n,@script = N'\n                        library(RevoScaleR)\n                        library(caTools)\n            library(MLmetrics)\n\n                        dr_rent <- InputDataSet\n                        set.seed(2910) \n                        Split <- .70\n                        sample = sample.split(dr_rent$RentalCount, SplitRatio = Split)\n                        train_dr_rent <- subset(dr_rent, sample == TRUE)\n                        test_dr_rent  <- subset(dr_rent, sample == FALSE)\n\n                        y_train <- train_dr_rent$RentalCount\n                        y_test <- test_dr_rent$RentalCount\n\n            variables_all <- rxGetVarNames(dr_rent)\n            variables_to_remove <- c(\"FSnow\", \"FWeekDay\", \"FHoliday\")\n            traning_variables <- variables_all[!(variables_all %in% c(\"RentalCount\", variables_to_remove))]\n            formula <- as.formula(paste(\"RentalCount ~\", paste(traning_variables, collapse = \"+\")))\n\n                        forest_model <- rxDForest(formula = formula,\n                          data = train_dr_rent,\n                          nTree = 40,\n                          minSplit = 10,\n                          minBucket = 5,\n                          cp = 0.00005,\n                          seed = 5)\n\n                        trained_model <- as.raw(serialize(forest_model, connection=NULL))\n\n                        #calculating accuracy\n            y_predicted<- rxPredict(forest_model,test_dr_rent)\n\n            predict_forest <-data.frame(actual=y_test,pred=y_predicted)\n            #ConfMat <- confusionMatrix(table(predict_forest$actual,predict_forest$RentalCount_Pred))\n            #accuracy <- ConfMat$overall[1]\n            accu <- LogLoss(y_pred = predict_forest$RentalCount_Pred , y_true =predict_forest$actual)\n            accuracy <- accu'\n\n        ,@input_data_1 = N'SELECT * FROM dbo.rental_data'\n        ,@params = N'@trained_model VARBINARY(MAX) OUTPUT, @accuracy FLOAT OUTPUT'\n        ,@trained_model = @trained_model OUTPUT\n        ,@accuracy = @accuracy OUTPUT;\nEND;\nGO \n```", "```py\nDECLARE @model VARBINARY(MAX);\nDECLARE @accur FLOAT;\nEXEC dbo.forest_model@model OUTPUT, @accur OUTPUT;\nINSERT INTO [dbo].[Rental_data_models](model_name, model, accuracy) VALUES ('Random_forest_V1', @model, @accur);\nGO  \n```", "```py\nlibrary(RevoScaleR) \nlibrary(caTools) \nlibrary(MLmetrics) \n\n#evaluate_model function; Source: Microsoft \nevaluate_model <- function(observed, predicted_probability, threshold, model_name) {  \n\n  # Given the observed labels and the predicted probability, plot the ROC curve and determine the AUC. \n  data <- data.frame(observed, predicted_probability) \n  data$observed <- as.numeric(as.character(data$observed)) \n  if(model_name ==\"RF\"){ \n    rxRocCurve(actualVarName = \"observed\", predVarNames = \"predicted_probability\", data = data, numBreaks = 1000, title = \"RF\" ) \n  }else{ \n    rxRocCurve(actualVarName = \"observed\", predVarNames = \"predicted_probability\", data = data, numBreaks = 1000, title = \"GBT\" ) \n  } \n  ROC <- rxRoc(actualVarName = \"observed\", predVarNames = \"predicted_probability\", data = data, numBreaks = 1000) \n  auc <- rxAuc(ROC) \n\n  # Given the predicted probability and the threshold, determine the binary prediction. \n  predicted <- ifelse(predicted_probability > threshold, 1, 0)  \n  predicted <- factor(predicted, levels = c(0, 1))  \n\n  # Build the corresponding Confusion Matrix, then compute the Accuracy, Precision, Recall, and F-Score. \n  confusion <- table(observed, predicted) \n  print(model_name) \n  print(confusion)  \n  tp <- confusion[1, 1]  \n  fn <- confusion[1, 2]  \n  fp <- confusion[2, 1]  \n  tn <- confusion[2, 2]  \n  accuracy <- (tp + tn) / (tp + fn + fp + tn)  \n  precision <- tp / (tp + fp)  \n  recall <- tp / (tp + fn)  \n  fscore <- 2 * (precision * recall) / (precision + recall)  \n\n  # Return the computed metrics. \n  metrics <- list(\"Accuracy\" = accuracy,  \n\"Precision\" = precision,  \n\"Recall\" = recall,  \n\"F-Score\" = fscore, \n\"AUC\" = auc)  \n  return(metrics)  \n}  \n\nRF_Scoring <- rxPredict(forest_model, data = train_dr_rent, overwrite = T, type = \"response\",extraVarsToWrite = c(\"RentalCount\")) \n\nPrediction_RF <- rxImport(inData = RF_Scoring, stringsAsFactors = T, outFile = NULL) \nobserved <- Prediction_RF$RentalCount \n\n# Compute the performance metrics of the model. \nMetrics_RF <- evaluate_model(observed = observed, predicted_probability = Prediction_RF$RentalCount_Pred , model_name = \"RF\", threshold=50) \n\n# Make Predictions, then import them into R. The observed Conversion_Flag is kept through the argument extraVarsToWrite. \nGBT_Scoring <- rxPredict(btree_model,data = train_dr_rent, overwrite = T, type=\"prob\",extraVarsToWrite = c(\"RentalCount\")) \n\nPrediction_GBT <- rxImport(inData = GBT_Scoring, stringsAsFactors = T, outFile = NULL) \nobserved <- Prediction_GBT$RentalCount \n```", "```py\nCREATE OR ALTER PROCEDURE [dbo].[Predicting_rentalCount] \n(\n                 @model VARCHAR(30)\n                ,@query NVARCHAR(MAX)\n)\nAS\nBEGIN\n        DECLARE @nar_model VARBINARY(MAX) = (SELECT model FROM [dbo].[Rental_data_models] WHERE model_name = @model);\n\n        EXEC sp_execute_external_script\n                 @language = N'R'\n                ,@script = N'\n\n                                #input from query\n                                new_data <- InputDataSet\n\n                                #model from query\n                                model <- unserialize(nar_model)                      \n\n                                #prediction\n                                prediction <- rxPredict(model,data = new_data, overwrite = TRUE, type=\"response\",extraVarsToWrite = c(\"RentalCount\"))\n                                Prediction_New <- rxImport(inData = prediction, stringsAsFactors = T, outFile = NULL)\n\n                                OutputDataSet <- data.frame(Prediction_New)\n\n                                '\n                ,@input_data_1 =  @query\n                ,@params = N'@nar_model VARBINARY(MAX)'\n                ,@nar_model = @nar_model\n        WITH RESULT SETS((               \n                  Prediction_new NVARCHAR(1000)\n                 , OrigPredictecCount NVARCHAR(1000)\n        ))\nEND; \n```", "```py\n-- Example of running predictions against selected model\nEXEC [dbo].[Predicting_rentalCount]  \n         @model = N'Random_forest_V1'\n        ,@query = N'SELECT \n                                        2014 AS Year\n                                        ,5 AS Month\n                                        ,12 AS Day\n                                        ,1 AS WeekDay\n                                        ,0 AS Holiday\n                                        ,0 AS Snow\n                                        ,0 AS RentalCount'\n```", "```py\nSELECT\n*\nFROM Rental_data\nWHERE [year] = 2014\nAND [day] = 12  \n```", "```py\nlibrary(\"cluster\") \n# and remove the Fholidays and Fsnow variables \nDF <- DF[c(1,2,3,4,5,6,7)] \nXDF <- paste(tempfile(), \"xdf\", sep=\".\") \nif (file.exists(XDF)) file.remove(XDF) \nrxDataStep(inData = DF, outFile = XDF) \n\n# grab 3 random rows for starting  \ncenters <- DF[sample.int(NROW(DF), 3, replace = TRUE),]  \n\nFormula =  ~ Year + Month + Day + RentalCount + WeekDay + Holiday + Snow  \n\n# Example using an XDF file as a data source \nz <- rxKmeans(formula=Formula, data = DF, centers = centers) \nclusplot(DF, z$cluster, color=TRUE, shade=TRUE, labels=4, lines=0, plotchar = TRUE) \n```", "```py\nwss <- (nrow(DF) - 1) * sum(apply(DF, 2, var)) \nfor (i in 2:20) \n  wss[i] <- sum(kmeans(DF, centers = i)$withinss) \nplot(1:20, wss, type = \"b\", xlab = \"Number of Clusters\", ylab = \"Within groups sum of squares\") \n```", "```py\nCREATE OR ALTER  PROCEDURE [dbo].[Clustering_rentalCount] \n(\n                 @nof_clusters VARCHAR(2)\n)\nAS\nBEGIN\n\nDECLARE @SQLStat NVARCHAR(4000)\nSET @SQLStat = 'SELECT  * FROM rental_data'\nDECLARE @RStat NVARCHAR(4000)\nSET @RStat = 'library(ggplot2)\n                library(RevoScaleR)\nlibrary(cluster)\n              image_file <- tempfile()\n              jpeg(filename = image_file, width = 400, height = 400)\n DF <- data.frame(dr_rent)\n               DF <- DF[c(1,2,3,4,5,6,7)]\nXDF <- paste(tempfile(), \"xdf\", sep=\".\")\n               if (file.exists(XDF)) file.remove(XDF)\n                rxDataStep(inData = DF, outFile = XDF)\n\n                centers <- DF[sample.int(NROW(DF), 3, replace = TRUE),] \nFormula =  ~ Year + Month + Day + RentalCount + WeekDay + Holiday + Snow \n                rxKmeans(formula = Formula, data = XDF, numClusters='+@nof_clusters+')\n                z <- rxKmeans(formula=Formula, data = DF, numClusters='+@nof_clusters+')\n                clusplot(DF, z$cluster, color=TRUE, shade=TRUE, labels=4, lines=0, plotchar = TRUE)\ndev.off()\n                    OutputDataSet <- data.frame(data=readBin(file(image_file, \"rb\"), what=raw(), n=1e6))'\n\nEXECUTE sp_execute_external_script\n        @language = N'R'\n       ,@script = @RStat\n       ,@input_data_1 = @SQLStat\n       ,@input_data_1_name = N'dr_rent'\nWITH RESULT SETS ((plot varbinary(max)))\nEND;\nGO \n```"]