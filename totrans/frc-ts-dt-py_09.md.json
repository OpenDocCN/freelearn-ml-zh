["```py\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom prophet import Prophet\ndf = pd.read_csv('divvy_daily.csv')\n```", "```py\nprint(df.groupby('weather')['weather'].count())\n```", "```py\ndf['date'] = pd.to_datetime(df['date'])\ndf.columns = ['ds', 'y', 'temp', 'weather']\ndf = pd.get_dummies(df, columns=['weather'], prefix='',\n                    prefix_sep='')\n```", "```py\ndf.head()\n```", "```py\nmodel = Prophet(seasonality_mode='multiplicative',\n                yearly_seasonality=4)\nmodel.add_regressor(name='clear',\n                    prior_scale=10,\n                    standardize='auto',\n                    mode='multiplicative')\nmodel.add_regressor('not clear')\nmodel.add_regressor('rain or snow')\n```", "```py\nfrom datetime import timedelta\n# Remove final 2 weeks of training data\ntrain = df[df['ds'] < df['ds'].max() - timedelta(weeks=2)]\n```", "```py\nmodel.fit(train)\nfuture = model.make_future_dataframe(periods=14)\nfuture['clear'] = df['clear']\nfuture['not clear'] = df['not clear']\nfuture['rain or snow'] = df['rain or snow']\nforecast = model.predict(future)\nfig2 = model.plot_components(forecast)\nplt.show()\n```", "```py\nmodel = Prophet(seasonality_mode='multiplicative',\n                yearly_seasonality=4)\nmodel.add_regressor('temp')\nmodel.add_regressor('clear')\nmodel.add_regressor('not clear')\nmodel.add_regressor('rain or snow')\nmodel.fit(train)\nfuture = model.make_future_dataframe(periods=14)\nfuture['temp'] = df['temp']\nfuture['clear'] = df['clear']\nfuture['not clear'] = df['not clear']\nfuture['rain or snow'] = df['rain or snow']\nforecast = model.predict(future)\nfig2 = model.plot_components(forecast)\nplt.show()\n```", "```py\nfrom prophet.utilities import regressor_coefficients\n```", "```py\nregressor_coefficients(model)\n```", "```py\nfrom prophet.plot import plot_forecast_component\nfig, axes = plt.subplots(\n                        len(regressor_coefficients(model)),\n                        figsize=(10, 15))\nfor i, regressor in enumerate(\n    regressor_coefficients(model)['regressor']):\n    plot_forecast_component(model,\n                            forecast,\n                            regressor,\n                            axes[i])\nplt.show()\n```"]