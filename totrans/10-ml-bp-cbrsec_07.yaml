- en: '6'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Detecting Machine-Generated Text
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we discussed deepfakes, which are synthetic media that
    can depict a person in a video and show the person to be saying or doing things
    that they did not say or do. Using powerful deep learning methods, it has been
    possible to create realistic deepfakes that cannot be distinguished from real
    media. Similar to such deepfakes, machine learning models have also succeeded
    in creating fake text – text that is generated by a model but appears to be written
    by a human. While the technology has been used to power chatbots and develop question-answering
    systems, it has also found its use in several nefarious applications.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Generative text models can be used to enhance bots and fake profiles on social
    networking sites. Given a prompt text, the model can be used to write messages,
    posts, and articles, thus adding credibility to the bot. A bot can now pretend
    to be a real person, and a victim might be fooled because of the realistic-appearing
    chat messages. These models allow customization by style, tone, sentiment, domain,
    and even political leaning. It is easily possible to provide a prompt and generate
    a news-style article; such articles can be used to spread misinformation. Models
    can be automated and deployed at scale on the internet, which means that there
    can be millions of fake profiles pretending to be real people, and millions of
    Twitter accounts generating and posting misleading articles. Detecting automated
    text is an important problem on the internet today.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: This chapter will explore the fundamentals of generative models, how they can
    be used to create text, and techniques to detect them.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following main topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: Text generation models
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Naïve detection
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Transformer methods for detecting automated text
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this chapter, you will have a firm understanding of text generation
    models and approaches to detecting bot-generated text.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can find the code files for this chapter on GitHub at [https://github.com/PacktPublishing/10-Machine-Learning-Blueprints-You-Should-Know-for-Cybersecurity/tree/main/Chapter%206](
    https://github.com/PacktPublishing/10-Machine-Learning-Blueprints-You-Should-Know-for-Cybersecurity/tree/main/Chapter%206).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: Text generation models
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we saw how machine learning models can be trained to
    generate images of people. The images generated were so realistic that it was
    impossible in most cases to tell them apart from real images with the naked eye.
    Along similar lines, machine learning models have made great progress in the area
    of text generation as well. It is now possible to generate high-quality text in
    an automated fashion using deep learning models. Just like images, this text is
    so well written that it is not possible to distinguish it from human-generated
    text.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: Fundamentally, a language model is a machine learning system that is able to
    look at a part of a sentence and predict what comes next. The words predicted
    are appended to the existing sentence, and this newly formed sentence is used
    to predict what will come next. The process continues recursively until a specific
    token denoting the end of the text is generated. Note that when we say that the
    next word is predicted, in reality, the model generates a probability distribution
    over possible output words. Language models can also operate at the character
    level.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，语言模型是一种机器学习系统，它能够观察句子的一部分并预测接下来会发生什么。预测的单词会被添加到现有的句子中，然后这个新形成的句子被用来预测接下来会发生什么。这个过程会递归地进行，直到生成一个表示文本结束的特定标记。请注意，当我们说预测下一个单词时，实际上模型是在生成一个可能的输出单词的概率分布。语言模型也可以在字符级别上操作。
- en: Most text generation models take in a prompt text as input. Trained on massive
    datasets (such as all Wikipedia articles or entire books), the models have learned
    to produce text based on these prompts. Training on different kinds of text (stories,
    biographies, technical articles, and news articles) enables models to generate
    those specific kinds of text.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数文本生成模型都会接收一个提示文本作为输入。这些模型在庞大的数据集（如所有维基百科文章或整本书）上进行了训练，从而学会了根据这些提示生成文本。在不同的文本类型（故事、传记、技术文章和新闻文章）上进行训练，使得模型能够生成那些特定的文本类型。
- en: 'To see the power of AI-based text generation with your own eyes, explore the
    open source text generator called **Grover**. This is a tool that was produced
    by researchers at the University of Washington and allows you to produce a real-looking
    news article based on any given prompt. The website provides an interface as shown
    in the following figure, where you can provide a prompt title and an author name:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 为了亲眼见证基于AI的文本生成的力量，探索名为**Grover**的开源文本生成器。这是一个由华盛顿大学的研究人员开发出的工具，允许你根据任何给定的提示生成一篇看起来真实的新闻文章。网站提供了一个如图所示的界面，你可以在这里提供提示标题和作者姓名：
- en: '![Figure 6.1 – The Grover interface to generate text](img/B19327_06_01.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![图6.1 – Grover生成文本的界面](img/B19327_06_01.jpg)'
- en: Figure 6.1 – The Grover interface to generate text
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.1 – Grover生成文本的界面
- en: 'Once you set these parameters, Grover will generate an article that appears
    real. Here is the article that was generated with our given prompt:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦设置了这些参数，Grover将会生成一篇看起来很真实的文章。以下是使用我们提供的提示生成的文章：
- en: '| **Link found between autism** **and vaccines**May 29, 2019 - Sofia OjedaWritten
    by Sofia Ojeda, CNNA paper published in the journal Genetics and Human Behavior
    claims to find a “significant link” between autism and a type of booster vaccine
    given in childhood. The paper focuses on the mercury-based preservative thimerosal
    and considers the possibility that the injectable vaccine contributes to autism-related
    symptoms. These include poor social skills, language delays and seizures, according
    to the paper.Thimerosal, which is commonly used as a preservative in vaccines,
    was phased out of children’s vaccines in 2010\. In 2010, the Food and Drug Administration
    declared that thimerosal was safe. “We don’t know of any adverse effects associated
    with the endocrine-disrupting, mercury-containing preservative in vaccines, and
    believe that this outcome is beneficial to public health,” said Dr. Lisa M. Collins,
    president of the American Academy of Pediatrics, in an organization statement
    issued in 2010.The new study, led by researchers at Tel Aviv University, is based
    on case studies of two women with autistic children and one non-autistic mother.
    The researchers found that autism symptoms tended to worsen after only one dose
    of the thimerosal-containing hepatitis B booster vaccine. “The use of unadjuvanted
    Hepatitis B booster vaccines, against which the only adverse effects are fatigue,
    headache, cough, and fever, remains a substantial and unrefined source of vaccine-related
    injury and disability worldwide,” the study authors wrote.Using a mathematical
    model, the study authors described multiple risks associated with the use of unadjuvanted
    injectable vaccines. Among them, vaccines increased the risk of seizures, such
    as those associated with autism; autoimmune disorders and cancer.“There are other
    types of vaccines that pose similar risk to autism, including rotavirus vaccines
    and the polio vaccine,” said lead author Professor Uri Ayalon, head of the pediatrics
    department at Tel Aviv University.The authors also found that the autism risk
    increased by twofold in children aged 3 to 10 who received the hepatitis B booster
    vaccine against Hepatitis B, regardless of the following vaccination schedules:
    aged 9 months or older with only one dose; or under 4 months old and only one
    dose. “Since these vaccines are widely used, regardless of age, it may be important
    to limit its utilization,” the researchers wrote.Lead author Dr. Yonatan Schulmann
    said there were no apparent risks associated with a standard influenza vaccination.
    “The flu vaccine probably represents an acceptable source of vaccine-related injury
    and disability,” he said. “This is not true for most vaccines. The flu vaccine
    is relatively inexpensive (free of charges) and has no significant health effects,”
    he said.The timing of vaccination is also important, said Schulmann. “Autism spectrum
    disorders are most often diagnosed in early adolescence, the upper age range at
    which it is most likely that vaccination data is available,” he said. Furthermore,
    the authors said they found no clear differences between children who received
    hepatitis B vaccine against Hepatitis B and other children. |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
- en: Note how the article has the stylistic features that you would typically expect
    from journalistic writings. The sentence construction is grammatically correct
    and the whole text reads as a coherent article. There are quotes from researchers
    and professors who are subject matter experts, complete with statistics and experimental
    results cited. Overall, the article could pass off as something written by a human.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: Understanding GPT
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: GPT stands for **Generative Pretrained Transformer**, and GPT models have dazzled
    the NLP world because they can generate coherent essays that are beyond those
    produced by traditional language models such as those based on **Recurrent Neural
    Networks** (**RNNs**). GPT models are also based on the transformer architecture
    (recall the BERT architecture that we used for malware detection was also based
    on the transformer).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: Recall the concepts of attention that we introduced in [*Chapter 3*](B19327_03.xhtml#_idTextAnchor015),
    *Malware Detection Using Transformers and BERT*. We introduced two kinds of blocks
    – the encoder and decoder – both of which were built using transformers that leveraged
    the attention mechanism. The transformer encoder had a self-attention layer followed
    by a fully connected feed-forward neural network. The decoder layer was similar
    except that it had an additional masked self-attention layer that ensured that
    the transformer did not attend to the future tokens (which would defeat the purpose
    of the language model). For example, if the decoder decodes the fourth word, it
    will attend to all words up to the third predicted word and all the words in the
    input.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: In general, GPT models use only the decoder blocks, which are stacked one after
    the other. When a token is fed into the model, it is converted into an embedding
    representation using a matrix lookup. Additionally, a positional encoding is added
    to it to indicate the sequence of words/tokens. The two matrices (embedding and
    positional encoding) are parts of the pretrained models we use. When the first
    token is passed to the model, it gets converted into a vector using the embedding
    lookup and positional encoding matrices. It passes through the first decoder block,
    which performs self-attention, passes the output to the neural network layer,
    and forwards the output to the next decoder block.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: After processing by the final decoder, the output vector is multiplied with
    the embedding matrix to obtain a probability distribution over the output token
    to be produced. This probability distribution can be used to select the next word.
    The most straightforward strategy is to choose the word with the highest probability
    – however, we run the risk of being stuck in a loop. For instance, if the tokens
    produced so far are “*The man and*” and we always select the word with the highest
    probability, we might end up producing “*The man and the man and the man and the*
    *man…..*” indefinitely.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: To avoid this, we apply a top-*K* sampling. We select the top *K* words (based
    on the probability) and sample a word from them, where words with a higher score
    have a higher chance of being selected. Since this process is non-deterministic,
    the model does not end up in the loop of choosing the same set of words again
    and again. The process continues until a certain number of tokens has been produced,
    or the end-of-string token is found.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: Generation by GPT models can be either conditional or unconditional. To see
    generation in action, we can use the Write with Transformer ([https://transformer.huggingface.co/doc/gpt2-large](https://transformer.huggingface.co/doc/gpt2-large))
    web app developed by Hugging Face, which uses GPT-2\. The website allows you to
    simulate both conditional and unconditional generation.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: 'In conditional generation, we provide the model with a set of words as a prompt,
    which is used to seed the generation. This initial set of words provides the context
    used to drive the rest of the text, as shown:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.2 – Generating text with a prompt](img/B19327_06_02.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
- en: Figure 6.2 – Generating text with a prompt
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: 'On the other hand, in unconditional generation, we just provide the `<s>` token,
    which is used to indicate the start of a string, and allow the model to freely
    produce what it wants. If you press the *Tab* key on Write With Transformer, you
    should see such unconditional samples generated:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.3 – Generating text without prompts](img/B19327_06_03.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
- en: Figure 6.3 – Generating text without prompts
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: There have been multiple versions of GPT models released by OpenAI, the latest
    one that has made the news being ChatGPT, based on GPT 3.5\. In an upcoming section,
    we will use ChatGPT to create our own dataset of fake news.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: Naïve detection
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will focus on naïve methods for detecting bot-generated
    text. We will first create our own dataset, extract features, and then apply machine
    learning models to determine whether a particular text is machine-generated or
    not.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: Creating the dataset
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The task we will focus on is detecting bot-generated fake news. However, the
    concepts and techniques we will learn are fairly generic and can be applied to
    parallel tasks such as detecting bot-generated tweets, reviews, posts, and so
    on. As such a dataset is not readily available to the public, we will create our
    own.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: How are we creating our dataset? We will use the News Aggregator dataset ([https://archive.ics.uci.edu/ml/datasets/News+Aggregator](https://archive.ics.uci.edu/ml/datasets/News+Aggregator))
    from the UCI Dataset Repository. The dataset contains a set of news articles (that
    is, links to the articles on the web). We will scrape these articles, and these
    are our human-generated articles. Then, we will use the article title as a prompt
    to seed generation by GPT-2, and generate an article that will be on the same
    theme and topic, but generated by GPT-2! This makes up our positive class.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: Scraping real articles
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The News Aggregator dataset from UCI contains information on over 420k news
    articles. It was developed for research purposes by scientists at the Roma Tre
    University in Italy. News articles span multiple categories such as business,
    health, entertainment, and science and technology. For each article, we have the
    title and the URL of the article online. You will need to download the dataset
    from the UCI Machine Learning Repository website ([https://archive.ics.uci.edu/ml/datasets/News+Aggregator](https://archive.ics.uci.edu/ml/datasets/News+Aggregator)).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: 'Take a look at the data using the `head()` functionality (note that you will
    have to change the path according to how you store the file locally):'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This will show you the first five rows of the DataFrame. As you can see in the
    following screenshot, we have an ID to refer to each row and the title and URL
    of the news article. We also have the hostname (the website where the article
    appeared) and the timestamp, which denotes the time when the news was published.
    The **STORY** field contains an ID that is used to indicate a cluster containing
    similar news stories.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.4 – UCI News Aggregator data](img/B19327_06_04.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
- en: Figure 6.4 – UCI News Aggregator data
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us take a look at the distribution of the articles across categories:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This will produce the following result:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.5 – News article distribution by category](img/B19327_06_05.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
- en: Figure 6.5 – News article distribution by category
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: From the documentation, we see that the categories **e**, **b**, **t**, and
    **m** represent entertainment, business, technology, and health, respectively.
    Entertainment has the highest number of articles, followed by business and technology
    (which are similar), and health has the least.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: 'Similarly, we can also inspect the top domains where the articles come from:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'You will get the following output:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.6 – Distribution of news articles across sources](img/B19327_06_06.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
- en: Figure 6.6 – Distribution of news articles across sources
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: In order to scrape the article from the website, we would need to simulate a
    browser session using a browser tool such as Selenium, find the article text by
    parsing the HTML source, and then extract it. Fortunately, there is a library
    in Python that does all of this for us. The `Newspaper` Python package ([https://github.com/codelucas/newspaper/](https://github.com/codelucas/newspaper/))
    provides an interface for downloading and parsing news articles. It can extract
    text, keywords, author names, summaries, and images from the HTML source of an
    article. It has support for multiple languages including English, Spanish, Russian,
    and German. You can also use a general-purpose web scraping library such as `BeautifulSoup`,
    but the `Newspaper` library is designed specifically to capture news articles
    and hence provides a lot of functions that we would have had to write custom if
    using `BeautifulSoup`.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: To create our dataset of real articles, we will iterate through the News Aggregator
    DataFrame and use the `Newspaper` library to extract the text for each article.
    Note that the dataset has upward of 420k articles – for the purposes of demonstration,
    we will sample 1,000 articles randomly from the dataset. For each article, we
    will use the `Newspaper` library to scrape the text. We will create a directory
    to hold these articles.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let us create the directory structure:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now, let us sample articles from the 400k articles we have. In order to avoid
    bias and overfitting, we should not focus on a particular category. Rather, our
    goal should be to sample uniformly at random so we have a well-distributed dataset
    across all four categories. This general principle also applies to other areas
    where you are designing machine learning models; the more diverse your dataset
    is, the better the generalization. We will sample 250 articles from each of our
    4 categories:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'If you check the distribution now, you will see that it is equal across all
    categories:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'You can see the distribution clearly in the following plot:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.7 – Distribution of sampled articles](img/B19327_06_07.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
- en: Figure 6.7 – Distribution of sampled articles
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: 'We will now iterate through this DataFrame and scrape each article. We will
    scrape the article, read the text, and save it into a file in the real directory
    we created earlier. Note that this is essentially a web scraper – as different
    websites have different HTML structures, the newspaper library may hit some errors.
    Certain websites may also block scrapers. For such articles, we will print out
    a message with the article URL. In practice, when such a situation is encountered,
    data scientists will fill the gap manually if the number of missing articles is
    small enough:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Now we have our real articles downloaded locally. It’s time to get into the
    good stuff – creating our set of fake articles!
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: Using GPT to create a dataset
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this section, we will use GPT-3 to create our own dataset of machine-generated
    text. OpenAI, a San Francisco-based artificial intelligence research lab, developed
    GPT-3, a pretrained universal language model that utilizes deep learning transformers
    to create text that is remarkably human-like. Released in 2020, GPT-3 has made
    headlines in various industries, as its potential use cases are virtually limitless.
    With the help of the GPT-3 API family and ChatGPT, individuals have used it to
    write fiction and poetry, code websites, respond to customer feedback, improve
    grammar, translate languages, generate dialog, optimize tax deductions, and automate
    A/B testing, among other things. The model’s high-quality results have impressed
    many.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: 'We can use the `transformers` library from HuggingFace to download and run
    inference on ChatGPT models. To do this, we can first load the model as follows:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This will download the model for you locally. Note that this involves downloading
    a sizeable model from the online repository, and hence will take quite some time.
    The time taken to execute will depend on your system usage, resources, and network
    speed at the time.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: 'We can generate a sample text using this new model. For example, if we want
    to generate a poem about flowers, we can do the following:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'And this gave me the following poem (note that the results may differ for you):'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We have already downloaded and initialized the model we want. Now, we can iterate
    through our list of article titles and generate articles one by one by passing
    the title as a seed prefix. Just like the scraped articles, each article must
    be saved into a text file so that we can later access it for training:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'All that is left now is to read all of the data we have into a common array
    or list, which can then be used in all of our experiments. We will read each file
    in the real directory and add it to an array. At the same time, we will keep appending
    `0` (indicating a real article) to another array that holds labels. We will repeat
    the same process with the fake articles and append `1` as the label:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Now, we have our text in the `X` list and associated labels in the `Y` list.
    Our dataset is ready!
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: Feature exploration
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we have our dataset, we want to build a machine learning model to detect
    bot-generated news articles. Recall that machine learning algorithms are mathematical
    models and, therefore, operate on numbers; they cannot operate directly on text!
    Let us now extract some features from the text.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: This section will focus on hand-crafting features – the process where subject
    matter experts theorize potential differences between the two classes and build
    features that will effectively capture the differences. There is no unified technique
    for doing this; data scientists experiment with several features based on domain
    knowledge to identify the best ones.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: Here, we are concerned with text data – so let us engineer a few features from
    that domain. Prior work in NLP and linguistics has analyzed human writing and
    identified certain characteristics. We will engineer three features based on prior
    research.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: Function words
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: These are supporting words in the text that do not contribute to meaning but
    add continuity and flow to the sentence. They are generally determiners (*the*,
    *an*, *many*, *a little*, and *none*), conjunctions (*and* and *but*), prepositions
    (*around*, *within*, and *on*), pronouns (*he*, *her*, and *their*), auxiliary
    verbs (*be*, *have*, and *do*), modal auxiliary (*can*, *should*, *could*, and
    *would*), qualifiers (*really* and *quite*), or question words (*how* and *why*).
    Linguistic studies have shown that every human uses these unpredictably, so there
    might be randomness in the usage pattern. As our feature, we will count the number
    of function words that we see in the sentence, and then normalize it by the length
    of the sentence in words.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: 'We will use a file that contains a list of the top function words and read
    the list of all function words. Then, we will count the function words in each
    text and normalize this count by the length. We will wrap this up in a function
    that can be used to featurize multiple instances of text. Note that as the list
    of function words would be the same for all texts, we do not need to repeat it
    in each function call – we will keep that part outside the function:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Punctuation
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Punctuation symbols (commas, periods, question marks, exclamations, and semi-colons)
    set the tone of the text and inform how it should be read. Prior research has
    shown that the count of punctuation symbols may be an important feature in detecting
    bot-generated text. We will first compile a list of punctuation symbols (readily
    available in the Python `string` package). Similar to the function words, we will
    count the occurrences of punctuation and normalize them by length. Note that this
    time, however, we need to normalize by the length in terms of the number of characters
    as opposed to words:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Readability
  id: totrans-98
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Research in early childhood education has studied text in detail and derived
    several metrics that indicate how readable a particular blob of text is. These
    metrics analyze the vocabulary and complexity of the text and determine the ease
    with which a reader can read and understand the text. There are several measures
    of readability defined in prior literature ([https://en.wikipedia.org/wiki/Readability](https://en.wikipedia.org/wiki/Readability)),
    but we will be using the most popular one called the **Automated Readability Index**
    (**ARI**) ([https://readabilityformulas.com/automated-readability-index.php](https://readabilityformulas.com/automated-readability-index.php)).
    It depends on two factors – word difficulty (the number of letters per word) and
    sentence difficulty (the number of words per sentence), and is calculated as follows:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: 'ARI = 4.71 ( # characters _  # words ) + 0.5 ( # words _ # sentences ) − 21.43'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: 'In theory, the ARI represents the approximate age needed to understand the
    text. We will now develop a function that calculates the ARI for our input text,
    and wrap it into a function like we did for the previous features:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This completes our discussion of naive feature extraction. In the next section,
    we will use these features to train and evaluate machine learning models.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: Using machine learning models for detecting text
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We have now hand-crafted three different features: punctuation counts, function
    word counts, and the readability index. We also defined functions for each. Now,
    we are ready to apply these to our dataset and build models. Recall that the `X`
    array contains all of our text. We want to represent each text sample using a
    three-element vector (as we have three features):'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Now, each text sample is represented by a three-element vector in `X_Features`.
    The first, second, and third elements represent the normalized function word count,
    punctuation count, and ARI, respectively. Note that this order is arbitrary –
    you may choose your own order as it does not affect the final model.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: 'Our features are ready, so now we will do the usual. We begin by splitting
    our data into training and test sets. We then fit a model on the training data
    and evaluate its performance on the test data. In previous chapters, we used the
    confusion matrix function to plot the confusion matrix and visually observe the
    true positives, false positives, true negatives, and false negatives. We will
    now build another function on top of it that will take in these values and calculate
    metrics of interest. We will calculate the true positives, false positives, true
    negatives, and false negatives, and then calculate the accuracy, precision, recall,
    and F1 score. We will return all of these as a dictionary:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Let us split the data into training and testing:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Now, we will fit a model on the training data, and evaluate its performance
    on the test data. Here, we will use random forests, logistic regression, SVM,
    and a deep neural network.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: 'The logistic regression classifier is a statistical model that expresses the
    probability of an input belonging to a particular class as a linear combination
    of features. Specifically, the model produces a linear combination of inputs (just
    like linear regression) and applies a sigmoid to this combination to obtain an
    output probability:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Random forests are ensemble classifiers consisting of multiple decision trees.
    Each tree is a hierarchical structure with nodes as conditions and leaves as class
    labels. A classification label is derived by following the path of the tree through
    the root. The random forest contains multiple such trees, each trained on a random
    sample of data and features:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'A **multilayer perceptron** (**MLP**) is a fully connected deep neural network,
    with multiple hidden layers. The input data undergoes transformations through
    these layers, and the final layer is a sigmoid or softmax function, which generates
    the probability of the data belonging to a particular class:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The SVM constructs a decision boundary between two classes such that the best
    classification accuracy is obtained. In case the boundary is not linear, the SVM
    transforms the features into a higher dimensional space and obtains a non-linear
    boundary:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Running this code should print out the evaluation dictionaries for each model,
    which tells you the accuracy, recall, and precision. You can also plot the confusion
    matrix (as we did in previous chapters) to visually see the false positives and
    negatives, and get an overall sense of how good the model is.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: Playing around with the model
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We have explored here only three features – however, the possibilities for
    hand-crafted features are endless. I encourage you to experiment by adding more
    features to the mix. Examples of some features are as follows:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: Length of the text
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Number of proper nouns
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Number of numeric characters
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Average sentence length
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Number of times the letter *q* was used
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is certainly not an exhaustive list, and you should experiment by adding
    other features to see whether the model's performance improves.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: Automatic feature extraction
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the previous section, we discussed how features can be engineered from text.
    However, hand-crafting features might not always be the best idea. This is because
    it requires expert knowledge. In this case, data scientists or machine learning
    engineers alone will not be able to design these features – they will need experts
    from linguistics and language studies to identify the nuances of language and
    suggest appropriate features such as the readability index. Additionally, the
    process is time-consuming; each feature has to be identified, implemented, and
    tested one after the other.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: We will now explore some methods for automatic feature extraction from text.
    This means that we do not manually design features such as the punctuation count,
    readability index, and so on. We will use existing models and techniques, which
    can take in the input text and generate a feature vector for us.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: TF-IDF
  id: totrans-133
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Term Frequency – Inverse Document Frequency** (**TF-IDF**) is a commonly
    used technique in natural language processing to convert text into numeric features.
    Every word in the text is assigned a score that indicates how important the word
    is in that text. This is done by multiplying two metrics:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: '**Term Frequency**: How frequently does the word appear in the text sample?
    This can be normalized by the length of the text in words, as texts that differ
    in length by a large number can cause skews. The term frequency measures how common
    a word is in this particular text.'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Inverse Document Frequency**: How frequently does the word appear in the
    rest of the corpus? First, the number of text samples containing this word is
    obtained. The total number of samples is divided by this number. Simply put, IDF
    is the inverse of the fraction of text samples containing the word. IDF measures
    how common the word is in the rest of the corpus.'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For every word in each text, the TF-IDF score is a statistical measure of the
    importance of the word to the sentence. A word that is common in a text but rare
    in the rest of the corpus is surely important and a distinguishing characteristic
    of the text, and will have a high TF-IDF score. Alternately, a word that is very
    common in the corpus (that is, present in nearly all text samples) will not be
    a distinguishing one – it will have a low TF-IDF score.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: In order to convert the text into a vector, we first calculate the TF-IDF score
    of each word in each text. Then, we replace the word with a sequence of TF-IDF
    scores corresponding to the words. The `scikit-learn` library provides us with
    an implementation of TF-IDF vectorization out of the box.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: 'Note a fine nuance here: the goal of our experiment is to build a model for
    bot detection that can be used to classify new text as being generated by bots
    or not. Thus, when we are training, we have no idea about the test data that will
    come in the future. To ensure that we simulate this, we will do the TF-IDF score
    calculation over only the training data. When we vectorize the test data, we will
    simply use the calculated scores as a lookup:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: You can manually inspect a few samples from the generated list. What do they
    look like?
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have the feature vectors, we can use them to train the classification
    models. The overall procedure remains the same: initialize a model, fit a model
    on the training data, and evaluate it on the testing data. The MLP example is
    shown here; however, you could replace this with any of the models we discussed:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: How does the performance of this model compare to the performance of the same
    model with handcrafted features? How about the performance of the other models?
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: Word embeddings
  id: totrans-145
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The TF-IDF approach is considered to be what we call a *bag of words* approach
    in machine learning terms. Each word is scored based on its presence, irrespective
    of the order in which it appears. Word embeddings are numeric representations
    of words assigned such that words that are similar in meaning have similar embeddings
    – the numeric representations are close to each other in the feature space. The
    most fundamental technique used to to generate word embeddings is called **Word2Vec**.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: Word2Vec embeddings are produced by a shallow neural network. Recall that the
    last layer of a classification model is a sigmoid or softmax layer for producing
    an output probability distribution. This softmax layer operates on the features
    it receives from the pre-final layer – these features can be treated as high-dimensional
    representations of the input. If we chop off the last layer, the neural network
    without the classification layer can be used to extract these embeddings.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: 'Word2Vec can work in one of two ways:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: '`X` = *I went to walk the* and `Y` = *dog* would be one training example.'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Skip-Gram**: This is the more widely used technique. Instead of predicting
    the target word, we train a model to predict the surrounding words. For example,
    if the text corpus contains the sentence *I went to walk the dog*, then our input
    would be *walk* and the output would be a prediction (or probabilistic prediction)
    of the surrounding two or more words. Because of this design, the model learns
    to generate similar embeddings for similar words. After the model is trained,
    we can pass the word of interest as an input, and use the features of the final
    layer as our embedding.'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note that while this is still a classification task, it is not supervised learning.
    Rather, it is a self-supervised approach. We have no ground truth, but by framing
    the problem uniquely, we generate our own ground truth.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: We will now build our word embedding model using the `gensim` Python library.
    We will fit the model on our training data, and then vectorize each sentence using
    the embeddings. After we have the vectors, we can fit and evaluate the models.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we fit the model on training data. Because of the way Word2Vec operates,
    we need to combine our texts into a list of sentences and then tokenize it into
    words:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Now, we can fit the embedding model. By passing in the `vector_size` parameter,
    we control the size of the generated embedding. The larger the size, the more
    the expressive the power of the embeddings:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'We now have the embedding model and can start using it to tokenize the text.
    Here, we have two strategies. One strategy is that we can calculate the embedding
    for all the words in the text and simply average them to find the mean embedding
    for the text. Here’s how we would do this:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The `X_train_vector_mean` array now holds an embedding representation for each
    text in our corpus. The same process can be repeated to generate the feature set
    with test data.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: The second strategy is, instead of averaging the vectors, we append them one
    after the other. This retains more expressive power as it takes into account the
    order of words in the sentence. However, each text will have a different length
    and we require a fixed-size vector. Therefore, we take only a fixed number of
    words from the text and concatenate their embeddings.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, we set the maximum number of words to be `40`. If a text has more than
    40 words, we will consider only the first 40\. If it has less than 40 words, we
    will consider all of the words and pad the remaining elements of the vector with
    zeros:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The same code snippet can be repeated with the test data as well. Remember that
    the approach you use (averaging or appending) has to be consistent across training
    and testing data.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that the features are ready, we train and evaluate the model as usual.
    Here’s how you would do it with an MLP; this is easily extensible to other models
    we have seen:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Note that, here, the dimensions of the hidden layers we passed to the model
    are different from before. In the very first example with hand-crafted features,
    our feature vector was only three-dimensional. However, in this instance, every
    text instance will be represented by 40 words, and each word represented by a
    30-dimensional embedding, meaning that the feature vector has 1,200 elements.
    The higher number of neurons in the hidden layer helps handle the high-dimensional
    feature space.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: 'As an exercise, you are encouraged to experiment with three changes and check
    whether there is an improvement in the model performance:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: The size of the word embeddings, which has been set to `30` for now. What happens
    to the model performance as you increase or decrease this number?
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The number of words has been chosen as 0\. What happens if this is reduced or
    increased?
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the MLP, how does the model performance change as you vary the number
    of layers?
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Combine word embeddings and TF-IDF. Instead of a simple average, calculate a
    weighted average where the embedding for each word is weighted by the TF-IDF score.
    This will ensure that more important words influence the average more. How does
    this affect model performance?
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Transformer methods for detecting automated text
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous sections, we have used traditional hand-crafted features, automated
    bag of words features, as well as embedding representations for text classification.
    We saw the power of BERT as a language model in the previous chapter. While describing
    BERT, we referenced that the embeddings generated by BERT can be used for downstream
    classification tasks. In this section, we will extract BERT embeddings for our
    classification task.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: The embeddings generated by BERT are different from those generated by the Word2Vec
    model. Recall that in BERT, we use the masked language model and a transformer-based
    architecture based on attention. This means that the embedding of a word depends
    on the context in which it occurs; based on the surrounding words, BERT knows
    which other words to pay attention to and generate the embedding.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: In traditional word embeddings, a word will have the same embedding, irrespective
    of the context. The word *match* will have the same embedding in the sentence
    *They were a perfect match!* and *I lit a match last night*. BERT, on the other
    hand, conditions the embeddings based on context. The word *match* would have
    different embeddings in these two sentences.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: 'Recall that we have already used BERT once, for malware detection. There are
    two major differences in how we use it now versus when we implemented it for malware
    detection:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: Previously, we used BERT in the fine-tuning mode. This means that we used the
    entire transformer architecture initialized with pretrained weights, added a neural
    network on top of it, and trained the whole model end to end. The pretrained model
    enabled learning sequence features, and the fine-tuning helped adapt it to the
    specific task. However, now we will use BERT only as a feature extractor. We will
    load a pretrained model, run the sentence through it, and use the pre-final layer
    to construct our features.
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the previous chapter, we used TensorFlow for implementing BERT. Now, we will
    use PyTorch, a deep learning framework developed by researchers from Facebook.
    This provides a much more intuitive, straightforward, and understandable interface
    to design and run deep neural networks. It also has a `transformers` library,
    which provides easy implementations of all pretrained models.
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'First, we will initialize the BERT model and set it to evaluation mode. In
    the evaluation mode, there is no learning, just inferencing. Therefore, we need
    only the forward pass and no backpropagation:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'We will now prepare our data in the format needed by BERT. This includes adding
    the two special tokens to indicate the start and separation. Then, we will run
    the model in inference mode to obtain the embeddings (hidden states). Recall that
    when we used Word2Vec embeddings, we averaged the embeddings for each word. In
    the case of BERT embeddings, we have multiple choices:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: 'Use just the last hidden state as the embedding:'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[PRE32]'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[PRE34]'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[PRE40]'
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '[PRE42]'
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Use the sum of all hidden states as the embedding:'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE43]'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '[PRE44]'
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[PRE45]'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '[PRE46]'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '[PRE47]'
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '[PRE48]'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '[PRE50]'
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '[PRE51]'
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '[PRE52]'
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '[PRE53]'
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '[PRE54]'
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '[PRE55]'
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '[PRE56]'
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Use the sum of the last four layers as an embedding:'
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE57]'
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '[PRE58]'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '[PRE59]'
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '[PRE60]'
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '[PRE61]'
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '[PRE62]'
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '[PRE63]'
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '[PRE64]'
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: '[PRE65]'
  id: totrans-220
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: '[PRE66]'
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '[PRE67]'
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: '[PRE68]'
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: '[PRE69]'
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE69]'
- en: '[PRE70]'
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'Concatenate the last four layers and use that as the embedding:'
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE71]'
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE71]'
- en: '[PRE72]'
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE72]'
- en: '[PRE73]'
  id: totrans-229
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE73]'
- en: '[PRE74]'
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE74]'
- en: '[PRE75]'
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE75]'
- en: '[PRE76]'
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE76]'
- en: '[PRE77]'
  id: totrans-233
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE77]'
- en: '[PRE78]'
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE78]'
- en: '[PRE79]'
  id: totrans-235
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE79]'
- en: '[PRE80]'
  id: totrans-236
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE80]'
- en: '[PRE81]'
  id: totrans-237
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE81]'
- en: '[PRE82]'
  id: totrans-238
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE82]'
- en: '[PRE83]'
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE83]'
- en: '[PRE84]'
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'Once we have the BERT features, we train and evaluate the model using our usual
    methodology. We will show an example of an MLP here, but the same process can
    be repeated for all the classifiers:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: This completes our analysis of how transformers can be used to detect machine-generated
    text.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
- en: Compare and contrast
  id: totrans-244
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'By now, we have explored several techniques for detecting bot-generated news.
    Here’s a list of all of them:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
- en: Hand-crafted features such as function words, punctuation words, and automated
    readability index
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TF-IDF scores for words
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Word2Vec embeddings:'
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Averaged across the text for all words
  id: totrans-249
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Concatenated for each word across the text
  id: totrans-250
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'BERT embeddings:'
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using only the last hidden state
  id: totrans-252
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the sum of all hidden states
  id: totrans-253
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the sum of the last four hidden states
  id: totrans-254
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the concatenation of the last four hidden states
  id: totrans-255
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We can see that we have eight feature sets at our disposal. Additionally, we
    experimented with four different models: random forests, logistic regression,
    SVM, and deep neural network (MLP). This means that we have a total of 32 configurations
    (feature set `x` model) that we can use for building a classifier to detect bot-generated
    fake news.'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
- en: I leave it up to you to construct this 8x4 matrix and determine which is the
    best approach among all of them!
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-258
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we described approaches and techniques for detecting bot-generated
    fake news. With the rising prowess of artificial intelligence and the widespread
    availability of language models, attackers are using automated text generation
    to run bots on social media. These sock-puppet accounts can generate real-looking
    responses, posts, and, as we saw, even news-style articles. Data scientists in
    the security space, particularly those working in the social media domain, will
    often be up against attackers who leverage AI to spew out text and carpet-bomb
    a platform.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
- en: This chapter aims to equip practitioners against such adversaries. We began
    by understanding how text generation exactly works and created our own dataset
    for machine learning experiments. We then used a variety of features (hand-crafted,
    TF-IDF, and word embeddings) to detect the bot-generated text. Finally, we used
    contextual embeddings to build improved mechanisms.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will study the problem of authorship attribution and
    obfuscation and the social and technical issues surrounding it.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
