["```py\n    > getwd()\n    [1] \"C:/Users/guest\"\n\n    ```", "```py\n    > train.data = read.csv(\"train.csv\", na.strings=c(\"NA\", \"\"))\n\n    ```", "```py\n    > str(train.data)\n    'data.frame': 891 obs. of  12 variables:\n     $ PassengerId: int  1 2 3 4 5 6 7 8 9 10 ...\n     $ Survived   : int  0 1 1 1 0 0 0 0 1 1 ...\n     $ Pclass     : int  3 1 3 1 3 3 1 3 3 2 ...\n     $ Name       : Factor w/ 891 levels \"Abbing, Mr. Anthony\",..: 109 191 358 277 16 559 520 629 417 581 ...\n     $ Sex        : Factor w/ 2 levels \"female\",\"male\": 2 1 1 1 2 2 2 2 1 1 ...\n     $ Age        : num  22 38 26 35 35 NA 54 2 27 14 ...\n     $ SibSp      : int  1 1 0 1 0 0 0 3 0 1 ...\n     $ Parch      : int  0 0 0 0 0 0 0 1 2 0 ...\n     $ Ticket     : Factor w/ 681 levels \"110152\",\"110413\",..: 524 597 670 50 473 276 86 396 345 133 ...\n     $ Fare       : num  7.25 71.28 7.92 53.1 8.05 ...\n     $ Cabin      : Factor w/ 148 levels \"\",\"A10\",\"A14\",..: 1 83 1 57 1 1 131 1 1 1 ...\n     $ Embarked   : Factor w/ 4 levels \"\",\"C\",\"Q\",\"S\": 4 2 4 4 4 3 4 4 4 2 ...\n\n    ```", "```py\n    > str(train.data)\n    'data.frame':  891 obs. of  12 variables:\n     $ PassengerId: int  1 2 3 4 5 6 7 8 9 10 ...\n     $ Survived   : int  0 1 1 1 0 0 0 0 1 1 ...\n     $ Pclass     : int  3 1 3 1 3 3 1 3 3 2 ...\n     $ Name       : Factor w/ 891 levels \"Abbing, Mr. Anthony\",..: 109 191 358 277 16 559 520 629 417 581 ...\n     $ Sex        : Factor w/ 2 levels \"female\",\"male\": 2 1 1 1 2 2 2 2 1 1 ...\n     $ Age        : num  22 38 26 35 35 NA 54 2 27 14 ...\n     $ SibSp      : int  1 1 0 1 0 0 0 3 0 1 ...\n     $ Parch      : int  0 0 0 0 0 0 0 1 2 0 ...\n     $ Ticket     : Factor w/ 681 levels \"110152\",\"110413\",..: 524 597 670 50 473 276 86 396 345 133 ...\n     $ Fare       : num  7.25 71.28 7.92 53.1 8.05 ...\n     $ Cabin      : Factor w/ 147 levels \"A10\",\"A14\",\"A16\",..: NA 82 NA 56 NA NA 130 NA NA NA ...\n     $ Embarked   : Factor w/ 3 levels \"C\",\"Q\",\"S\": 3 1 3 3 3 2 3 3 3 1 ...\n\n    ```", "```py\n    > train.data$Survived = factor(train.data$Survived)\n    > train.data$Pclass = factor(train.data$Pclass)\n\n    ```", "```py\n    > str(train.data)\n    'data.frame':  891 obs. of  12 variables:\n     $ PassengerId: int  1 2 3 4 5 6 7 8 9 10 ...\n     $ Survived   : Factor w/ 2 levels \"0\",\"1\": 1 2 2 2 1 1 1 1 2 2 ...\n     $ Pclass     : Factor w/ 3 levels \"1\",\"2\",\"3\": 3 1 3 1 3 3 1 3 3 2 ...\n     $ Name       : Factor w/ 891 levels \"Abbing, Mr. Anthony\",..: 109 191 358 277 16 559 520 629 417 581 ...\n     $ Sex        : Factor w/ 2 levels \"female\",\"male\": 2 1 1 1 2 2 2 2 1 1 ...\n     $ Age        : num  22 38 26 35 35 NA 54 2 27 14 ...\n     $ SibSp      : int  1 1 0 1 0 0 0 3 0 1 ...\n     $ Parch      : int  0 0 0 0 0 0 0 1 2 0 ...\n     $ Ticket     : Factor w/ 681 levels \"110152\",\"110413\",..: 524 597 670 50 473 276 86 396 345 133 ...\n     $ Fare       : num  7.25 71.28 7.92 53.1 8.05 ...\n     $ Cabin      : Factor w/ 147 levels \"A10\",\"A14\",\"A16\",..: NA 82 NA 56 NA NA 130 NA NA NA ...\n     $ Embarked   : Factor w/ 3 levels \"C\",\"Q\",\"S\": 3 1 3 3 3 2 3 3 3 1 ...\n\n    ```", "```py\n    > is.na(train.data$Age)\n\n    ```", "```py\n    > sum(is.na(train.data$Age) == TRUE)\n    [1] 177\n\n    ```", "```py\n    > sum(is.na(train.data$Age) == TRUE) /  length(train.data$Age)\n    [1] 0.1986532\n\n    ```", "```py\n    > sapply(train.data, function(df) {\n    +               sum(is.na(df)==TRUE)/ length(df);\n    +           }) \n    PassengerId    Survived      Pclass        Name         Sex         Age \n    0.000000000 0.000000000 0.000000000 0.000000000 0.000000000 0.198653199 \n     SibSp       Parch      Ticket        Fare       Cabin    Embarked \n    0.000000000 0.000000000 0.000000000 0.000000000 0.771043771 0.002244669 \n\n    ```", "```py\n    > install.packages(\"Amelia\")\n    > require(Amelia)\n\n    ```", "```py\n    > missmap(train.data, main=\"Missing Map\")\n\n    ```", "```py\n> AmeliaView()\n\n```", "```py\n    > table(train.data$Embarked, useNA = \"always\")\n\n     C    Q    S <NA> \n     168   77  644    2 \n\n    ```", "```py\n    > train.data$Embarked[which(is.na(train.data$Embarked))] = 'S';\n    > table(train.data$Embarked, useNA = \"always\")\n\n     C    Q    S <NA> \n     168   77  646    0 \n\n    ```", "```py\n    > train.data$Name = as.character(train.data$Name)\n    > table_words = table(unlist(strsplit(train.data$Name, \"\\\\s+\")))\n    > sort(table_words [grep('\\\\.',names(table_words))], decreasing=TRUE)\n\n     Mr.     Miss.      Mrs.   Master. \n     517       182       125        40 \n     Dr.      Rev.      Col.    Major. \n     7         6         2            2 \n     Mlle.     Capt. Countess.    Don. \n     2         1         1                1 \n    Jonkheer.        L.     Lady .      Mme. \n     1         1         1         1 \n     Ms.      Sir. \n     1         1 \n\n    ```", "```py\n    > library(stringr) \n    > tb = cbind(train.data$Age, str_match(train.data$Name, \" [a-zA-Z]+\\\\.\"))\n    > table(tb[is.na(tb[,1]),2])\n\n     Dr.  Master.    Miss.      Mr.     Mrs. \n     1        4            36       119       17 \n\n    ```", "```py\n    > mean.mr = mean(train.data$Age[grepl(\" Mr\\\\.\", train.data$Name) & !is.na(train.data$Age)])\n    > mean.mrs = mean(train.data$Age[grepl(\" Mrs\\\\.\", train.data$Name) & !is.na(train.data$Age)])\n    > mean.dr = mean(train.data$Age[grepl(\" Dr\\\\.\", train.data$Name) & !is.na(train.data$Age)])\n    > mean.miss = mean(train.data$Age[grepl(\" Miss\\\\.\", train.data$Name) & !is.na(train.data$Age)])\n    > mean.master =  mean(train.data$Age[grepl(\" Master\\\\.\", train.data$Name) & !is.na(train.data$Age)])\n\n    ```", "```py\n    > train.data$Age[grepl(\" Mr\\\\.\", train.data$Name) & is.na(train.data$Age)] = mean.mr\n    > train.data$Age[grepl(\" Mrs\\\\.\", train.data$Name) & is.na(train.data$Age)] = mean.mrs\n    > train.data$Age[grepl(\" Dr\\\\.\", train.data$Name) & is.na(train.data$Age)] = mean.dr\n    > train.data$Age[grepl(\" Miss\\\\.\", train.data$Name) & is.na(train.data$Age)] = mean.miss\n    > train.data$Age[grepl(\" Master\\\\.\", train.data$Name) & is.na(train.data$Age)] = mean.master\n\n    ```", "```py\n    > barplot(table(train.data$Survived), main=\"Passenger Survival\",  names= c(\"Perished\", \"Survived\"))\n\n    ```", "```py\n    > barplot(table(train.data$Pclass), main=\"Passenger Class\",  names= c(\"first\", \"second\", \"third\"))\n\n    ```", "```py\n    > barplot(table(train.data$Sex), main=\"Passenger Gender\")\n\n    ```", "```py\n    > hist(train.data$Age, main=\"Passenger Age\", xlab = \"Age\")\n\n    ```", "```py\n    > barplot(table(train.data$SibSp), main=\"Passenger Siblings\")\n\n    ```", "```py\n    > barplot(table(train.data$Parch), main=\"Passenger Parch\")\n\n    ```", "```py\n    > hist(train.data$Fare, main=\"Passenger Fare\", xlab = \"Fare\")\n\n    ```", "```py\n    > barplot(table(train.data$Embarked), main=\"Port of Embarkation\")\n\n    ```", "```py\n    > counts = table( train.data$Survived, train.data$Sex)\n    > barplot(counts,  col=c(\"darkblue\",\"red\"), legend = c(\"Perished\", \"Survived\"), main = \"Passenger Survival by Sex\")\n\n    ```", "```py\n    > counts = table( train.data$Survived, train.data$Pclass)\n    > barplot(counts,  col=c(\"darkblue\",\"red\"), legend =c(\"Perished\", \"Survived\"), main= \"Titanic Class Bar Plot\" )\n\n    ```", "```py\n    > counts = table( train.data$Sex, train.data$Pclass)\n    > barplot(counts,  col=c(\"darkblue\",\"red\"), legend = rownames(counts), main= \"Passenger Gender by Class\")\n\n    ```", "```py\n    > hist(train.data$Age[which(train.data$Survived == \"0\")], main= \"Passenger Age Histogram\", xlab=\"Age\", ylab=\"Count\", col =\"blue\", breaks=seq(0,80,by=2))\n    > hist(train.data$Age[which(train.data$Survived == \"1\")], col =\"red\", add = T, breaks=seq(0,80,by=2))\n\n    ```", "```py\n    > boxplot(train.data$Age ~ train.data$Survived, \n    +         main=\"Passenger Survival by Age\",\n    +         xlab=\"Survived\", ylab=\"Age\")\n\n    ```", "```py\n    >train.child = train.data$Survived[train.data$Age < 13]\n    > length(train.child[which(train.child == 1)] ) / length(train.child)\n     [1] 0.5797101\n\n    > train.youth = train.data$Survived[train.data$Age >= 15 & train.data$Age < 25]\n    > length(train.youth[which(train.youth == 1)] ) / length(train.youth)\n    [1] 0.4285714\n\n    > train.adult  = train.data$Survived[train.data$Age >= 20 & train.data$Age < 65]\n    > length(train.adult[which(train.adult == 1)] ) / length(train.adult)\n     [1] 0.3659218\n\n    > train.senior  = train.data$Survived[train.data$Age >= 65]\n    > length(train.senior[which(train.senior == 1)] ) / length(train.senior)\n    [1] 0.09090909\n\n    ```", "```py\n> mosaicplot(train.data$Pclass ~ train.data$Survived, \n+           main=\"Passenger Survival Class\", color=TRUE, \n+  xlab=\"Pclass\", ylab=\"Survived\")\n\n```", "```py\n    > split.data = function(data, p = 0.7, s = 666){\n    +     set.seed(s)\n    +     index = sample(1:dim(data)[1])\n    +     train = data[index[1:floor(dim(data)[1] * p)], ]\n    +     test = data[index[((ceiling(dim(data)[1] * p)) + 1):dim(data)[1]], ]\n    +     return(list(train = train, test = test))\n    + } \n\n    ```", "```py\n    > allset= split.data(train.data, p = 0.7) \n    > trainset = allset$train \n    > testset = allset$test\n\n    ```", "```py\n    > install.packages('party')\n    > require('party')\n\n    ```", "```py\n    > train.ctree = ctree(Survived ~ Pclass + Sex + Age + SibSp + Fare + Parch + Embarked, data=trainset)\n    > train.ctree\n\n     Conditional inference tree with 7 terminal nodes\n\n    Response:  Survived \n    Inputs:  Pclass, Sex, Age, SibSp, Fare, Parch, Embarked \n    Number of observations:  623 \n\n    1) Sex == {male}; criterion = 1, statistic = 173.672\n     2) Pclass == {2, 3}; criterion = 1, statistic = 30.951\n     3) Age <= 9; criterion = 0.997, statistic = 12.173\n     4) SibSp <= 1; criterion = 0.999, statistic = 15.432\n     5)*  weights = 10 \n     4) SibSp > 1\n     6)*  weights = 11 \n     3) Age > 9\n     7)*  weights = 282 \n     2) Pclass == {1}\n     8)*  weights = 87 \n    1) Sex == {female}\n     9) Pclass == {1, 2}; criterion = 1, statistic = 59.504\n     10)*  weights = 125 \n     9) Pclass == {3}\n     11) Fare <= 23.25; criterion = 0.997, statistic = 12.456\n     12)*  weights = 85 \n     11) Fare > 23.25\n     13)*  weights = 23 \n\n    ```", "```py\n    > plot(train.ctree, main=\"Conditional inference tree of Titanic Dataset\")\n\n    ```", "```py\n> install.packages('e1071')\n> require('e1071')\n> svm.model = svm(Survived ~ Pclass + Sex + Age + SibSp + Fare + Parch + Embarked, data = trainset, probability = TRUE)\n\n```", "```py\n    > ctree.predict = predict(train.ctree, testset)\n\n    ```", "```py\n    > install.packages(\"caret\")\n    > require(caret)\n\n    ```", "```py\n    > confusionMatrix(ctree.predict, testset$Survived)\n    Confusion Matrix and Statistics\n\n     Reference\n    Prediction   0   1\n     0 160  25\n     1  16  66\n\n     Accuracy : 0.8464 \n     95% CI : (0.7975, 0.8875)\n     No Information Rate : 0.6592 \n     P-Value [Acc > NIR] : 4.645e-12 \n\n     Kappa : 0.6499 \n     Mcnemar's Test P-Value : 0.2115 \n\n     Sensitivity : 0.9091 \n     Specificity : 0.7253 \n     Pos Pred Value : 0.8649 \n     Neg Pred Value : 0.8049 \n     Prevalence : 0.6592 \n     Detection Rate : 0.5993 \n     Detection Prevalence : 0.6929 \n     Balanced Accuracy : 0.8172 \n\n     'Positive' Class : 0\n\n    ```", "```py\n    > train.ctree.pred = predict(train.ctree, testset)\n    > train.ctree.prob =  1- unlist(treeresponse(train.ctree, testset), use.names=F)[seq(1,nrow(testset)*2,2)]\n\n    ```", "```py\n    > install.packages(\"ROCR\")\n    > require(ROCR)\n\n    ```", "```py\n    > train.ctree.prob.rocr = prediction(train.ctree.prob, testset$Survived)\n\n    ```", "```py\n    > train.ctree.perf = performance(train.ctree.prob.rocr, \"tpr\",\"fpr\")\n    > train.ctree.auc.perf =  performance(train.ctree.prob.rocr, measure = \"auc\", x.measure = \"cutoff\")\n\n    ```", "```py\n    > plot(train.ctree.perf, col=2,colorize=T, main=paste(\"AUC:\", train.ctree.auc.perf@y.values))\n\n    ```"]