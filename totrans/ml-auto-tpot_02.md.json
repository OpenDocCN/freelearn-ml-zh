["```py\n> pip install numpy pandas matplotlib scikit-learn\n```", "```py\n    import pandas as pd \n    df = pd.DataFrame({\n        'LivingArea': [300, 356, 501, 407, 950, 782, \n                       664, 456, 673, 821, 1024, 900, \n                       512, 551, 510, 625, 718, 850],\n        'Price': [100, 120, 180, 152, 320, 260, \n                  210, 150, 245, 300, 390, 305, \n                  175, 185, 160, 224, 280, 299]\n    })\n    ```", "```py\n    import matplotlib.pyplot as plt \n    from matplotlib import rcParams\n    rcParams['figure.figsize'] = 14, 8\n    rcParams['axes.spines.top'] = False\n    rcParams['axes.spines.right'] = False\n    ```", "```py\n    plt.scatter(df['LivingArea'], df['Price'], color='#7e7e7e', s=200)\n    plt.title('Living area vs. Price (000 USD)', size=20)\n    plt.xlabel('Living area', size=14)\n    plt.ylabel('Price (000 USD)', size=14)\n    plt.show()\n    ```", "```py\n    from sklearn.linear_model import LinearRegression\n    model = LinearRegression()\n    model.fit(df[['LivingArea']], df[['Price']])\n    preds = model.predict(df[['LivingArea']])\n    df['Predicted'] = preds\n    ```", "```py\n    plt.scatter(df['LivingArea'], df['Price'], color='#7e7e7e', s=200, label='Data points')\n    plt.plot(df['LivingArea'], df['Predicted'], color='#040404', label='Best fit line')\n    plt.title('Living area vs. Price (000 USD)', size=20)\n    plt.xlabel('Living area', size=14)\n    plt.ylabel('Price (000 USD)', size=14)\n    plt.legend()\n    plt.show()\n    ```", "```py\n    model.predict([[1000]])\n    >>> array([[356.18038708]])\n    ```", "```py\n    import numpy as np\n    from sklearn.metrics import r2_score, mean_squared_error\n    rmse = lambda y, ypred: np.sqrt(mean_squared_error(y, ypred))\n    model_r2 = r2_score(df['Price'], df['Predicted'])\n    model_rmse = rmse(df['Price'], df['Predicted'])\n    print(f'R2 score: {model_r2:.2f}')\n    print(f'RMSE: {model_rmse:.2f}')\n    >>> R2 score: 0.97\n    >>> RMSE: 13.88\n    ```", "```py\n    import numpy as np\n    import pandas as pd\n    df = pd.DataFrame({\n        'Radius': [0.3, 0.1, 1.7, 0.4, 1.9, 2.1, 0.25, \n                   0.4, 2.0, 1.5, 0.6, 0.5, 1.8, 0.25],\n        'Class': [0, 0, 1, 0, 1, 1, 0, \n                  0, 1, 1, 0, 0, 1, 0]\n    })\n    ```", "```py\n    import matplotlib.pyplot as plt \n    from matplotlib import rcParams\n    rcParams['figure.figsize'] = 14, 8\n    rcParams['axes.spines.top'] = False\n    rcParams['axes.spines.right'] = False\n    ```", "```py\n    plt.scatter(df['Radius'], df['Class'], color='#7e7e7e', s=200)\n    plt.title('Radius classification', size=20)\n    plt.xlabel('Radius (cm)', size=14)\n    plt.ylabel('Class', size=14)\n    plt.show()\n    ```", "```py\n    from sklearn.linear_model import LogisticRegression\n    model = LogisticRegression()\n    model.fit(df[['Radius']], df['Class'])\n    preds = model.predict(df[['Radius']])\n    df['Predicted'] = preds\n    ```", "```py\n    xs = np.linspace(0, df['Radius'].max() + 0.1, 1000)\n    ys = [model.predict([[x]]) for x in xs]\n    plt.scatter(df['Radius'], df['Class'], color='#7e7e7e', s=200, label='Data points')\n    plt.plot(xs, ys, color='#040404', label='Decision boundary')\n    plt.title('Radius classification', size=20)\n    plt.xlabel('Radius (cm)', size=14)\n    plt.ylabel('Class', size=14)\n    plt.legend()\n    plt.show()\n    ```", "```py\n    from sklearn.metrics import confusion_matrix\n    confusion_matrix(df['Class'], df['Predicted'])\n    ```"]