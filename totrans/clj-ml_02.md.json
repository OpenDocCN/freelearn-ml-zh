["```py\n(def X (cl/matrix [8.401 14.475 13.396 12.127 5.044\n                      8.339 15.692 17.108 9.253 12.029]))\n\n(def Y (cl/matrix [-1.57 2.32  0.424  0.814 -2.3\n           0.01 1.954 2.296 -0.635 0.328]))\n```", "```py\n(def linear-samp-scatter\n  (scatter-plot X Y))\n\n(defn plot-scatter []\n  (view linear-samp-scatter))\n\n(plot-scatter)\n```", "```py\n(ns my-namespace\n  (:use [incanter.charts :only [scatter-plot]]))\n```", "```py\n(def samp-linear-model\n  (linear-model Y X))\n(defn plot-model []\n  (view (add-lines samp-scatter-plot \n          X (:fitted linear-samp-scatter))))\n\n(plot-model)\n```", "```py\n(ns my-namespace\n  (:use [incanter.stats :only [linear-model]]))\n```", "```py\nuser> (:coefs samp-linear-model)\n[-4.1707801647266045 0.39139682427040384]\n```", "```py\nuser> (:residuals samp-linear-model)\n[-0.6873445559690581 0.8253111334125092 -0.6483716931997257 0.2383108767994172 -0.10342541689331242 0.9169220471357067 -0.01701880172457293 -0.22923670489146497 -0.08581465024744239 -0.20933223442208365]\n```", "```py\nuser> (:sse samp-linear-model)\n2.5862250345284887\n```", "```py\nuser> (:r-square samp-linear-model)\n0.8837893226172282\n```", "```py\n(def gradient-descent-precision 0.001)\n\n(defn gradient-descent\n  \"Find the local minimum of the cost function's plot\"\n  [F' x-start step]\n  (loop [x-old x-start]\n    (let [x-new (- x-old\n                   (* step (F' x-old)))\n          dx (- x-new x-old)]\n      (if (< dx gradient-descent-precision)\n        x-new\n        (recur x-new)))))\n```", "```py\n(ns my-namespace\n  (:use [incanter.datasets :only [get-dataset]]\n        [incanter.core :only [sel to-matrix]]))\n```", "```py\n(def iris\n  (to-matrix (get-dataset :iris)))\n\n(def X (sel iris :cols (range 1 5)))\n(def Y (sel iris :cols 0))\n```", "```py\n(def iris-linear-model\n  (linear-model Y X))\n(defn plot-iris-linear-model []\n  (let [x (range -100 100)\n        y (:fitted iris-linear-model)]\n    (view (xy-plot x y :x-label \"X\" :y-label \"Y\"))))\n\n(plot-iris-linear-model)\n```", "```py\nuser> (= (count (:coefs iris-linear-model)) \n         (+ 1 (column-count X)))\ntrue\n```", "```py\n(defn linear-model-ols\n  \"Estimates the coefficients of a multi-var linear\n  regression model using Ordinary Least Squares (OLS) method\"\n  [MX MY]\n  (let [X (bind-columns (repeat (row-count MX) 1) MX)\n        Xt (cl/matrix (transpose X))\n        Xt-X (cl/* Xt X)]\n    (cl/* (inverse Xt-X) Xt MY)))\n\n(def ols-linear-model\n  (linear-model-ols X Y))\n\n(def ols-linear-model-coefs\n  (cl/as-vec ols-linear-model))\n```", "```py\n(ns my-namespace\n  (:use [incanter.core :only [bind-columns]]))\n```", "```py\n(def ols-linear-model\n  (linear-model-ols X Y))\n\n(def ols-linear-model-coefs\n  (cl/as-vec ols-linear-model))\n```", "```py\nuser> (cl/as-vec (ols-linear-model X Y))\n[1.851198344985435 0.6252788163253274 0.7429244752213087 -0.4044785456588674 -0.22635635488532463]\nuser> (:coefs iris-linear-model)\n[1.851198344985515 0.6252788163253129 0.7429244752213329 -0.40447854565877606 -0.22635635488543926]\nuser> (every? #(< % 0.0001) \n                      (map - \n                         ols-linear-model-coefs \n                         (:coefs iris-linear-model)))\ntrue\n```", "```py\n(defn predict [coefs X]\n  {:pre [(= (count coefs)\n            (+ 1 (count X)))]}\n  (let [X-with-1 (conj X 1)\n        products (map * coefs X-with-1)]\n    (reduce + products)))\n```"]