- en: '*Chapter 9*: Automated Machine Learning with GCP'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '"*The first rule of any technology used in a business is that automation* *applied
    to an efficient operation will magnify the efficiency. The second is that automation
    applied to an inefficient operation will magnify the inefficiency.*"'
  prefs: []
  type: TYPE_NORMAL
- en: '*-Bill Gates*'
  prefs: []
  type: TYPE_NORMAL
- en: This has been a long yet rewarding journey of learning about major hyperscalers
    and how they implement automated machine learning in their respective platforms.
    In the previous chapter, you learned how to get started with Google Cloud AI Platform,
    learned about AI Hub, and learned how to build a notebook instance in GCP. You
    also learned about the different flavors of automated machine learning offered
    by GCP, including AutoML Natural Language, AutoML Tables, AutoML Translation,
    AutoML Video, and AutoML Vision.
  prefs: []
  type: TYPE_NORMAL
- en: Continuing with the breadth of GCP offerings, capabilities, and services, we
    will now do a deep dive into Cloud AutoML Tables. We will build models and explain
    how automated machine learning works with AutoML Tables; that is, how you can
    take unstructured data and perform automated machine learning tasks by analyzing
    the input features (feature engineering), selecting the model (neural architecture
    search), and performing hyperparameter tuning. We will deploy these models to
    GCP and test them via web services to demonstrate their operationalization.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Getting started with Google Cloud AutoML Tables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an AutoML Tables experiment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding AutoML Tables model deployment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AutoML Tables with BigQuery public datasets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automated machine learning for price prediction
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting started with Google Cloud AutoML Tables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: AutoML Tables helps harness the insights in your structured data. In any large
    enterprise, there are multiple modalities of data, including structured, unstructured,
    and semi-structured data. For most organizations dealing with databases and transactions,
    there is indeed a lot of structured data out there. This data is quite suitable
    for advances analytics, and GCP's AutoML Tables is just the tool to help you automatically
    build and deploy machine learning models based on structured data.
  prefs: []
  type: TYPE_NORMAL
- en: AutoML Tables enables machine learning engineers and data scientists to automatically
    build and deploy state-of-the-art machine learning models on structured data faster
    than anyone could manually do. It automates modeling on a wide range of data types,
    from numbers and classes to strings, timestamps, lists, and nested fields. Google
    Cloud AutoML tables make this happen with minimal code. In this chapter, we will
    learn how to take an exported CSV file, click a few buttons, wait a while, and
    get a very highly tuned model on the other end.
  prefs: []
  type: TYPE_NORMAL
- en: Google's automated machine learning team has worked hard so that the tool works
    for a wide variety of data types. Google's AutoML Tables explores that vast space
    of possible models and hyperparameters so that it can try and optimize things
    on your behalf. As we explore the examples in this chapter, you will see that
    the first step is to import your training data via the **Import** tab, give it
    a name, and select the source – either a table from BigQuery, a file on your machine,
    or a file on Google Cloud Storage. This first step takes a bit of time as the
    system analyzes the columns of your dataset. Once it's done this, you'll get to
    edit the auto-generated schema and select the column for predicting on. Here,
    you can also update the column type, as well as whether it is nullable.
  prefs: []
  type: TYPE_NORMAL
- en: You can also view datasets that may have a lot of columns to get a nice overview
    of their data. You can click on the different column names to see some statistics
    about your columns. After analyzing the data, we can start the training process.
    This is where AutoML really shines because all you have to do is click **Train**.
  prefs: []
  type: TYPE_NORMAL
- en: There are some options that you can set, including a maximum budget of training
    hours. This enables you to experiment with your data if you want and limit that
    training time before committing to a full, longer training run. You'll notice
    that the training times shown are somewhat on the long side of things. This is
    because it's not only doing model tuning but also selecting what model to use
    in the first place. So, as a result, there's a lot of things happening during
    training. But we don't have to do anything here.
  prefs: []
  type: TYPE_NORMAL
- en: Once the training is completed, we must evaluate and deploy the model. You will
    be able to see how the training did, as well as the metrics about the model's
    performance. Finally, we will deploy the model to get predictions. There's even
    an editor in the browser that will make requests to your endpoint, so you don't
    need to set up a local environment to make these calls to try and test it out.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have learned how AutoML Tables works, let's explore it in practice.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an AutoML Tables experiment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'AutoML Tables automatically builds and deploys state-of-the-art machine learning
    models on structured data. Let''s start with our first experiment to put this
    knowledge into practice:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Access the Google Cloud AI Platform home page by visiting this link: [https://console.cloud.google.com/home/](https://console.cloud.google.com/home/).
    Click on the **Datasets** link in the left pane; you will see the following screen:![Figure
    9.1 – Google Cloud AI Platform home page'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_9.1_B16890.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 9.1 – Google Cloud AI Platform home page
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: On the `IrisAutoML`. Then, click on **CREATE DATASET**:![Figure 9.2 – AutoML
    Tables – Create new dataset screen
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_9.2_B16890.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 9.2 – AutoML Tables – Create new dataset screen
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: For this experiment, we will start with the Iris dataset. You can download the
    CSV file from [https://www.kaggle.com/uciml/iris](https://www.kaggle.com/uciml/iris)
    since we will be using it in the next step. The dataset is too small to be used
    for automated machine learning though, but you will see how this unfolds soon.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, you need to import the data (CSV) file into **Google AutoML Tables**.
    The file needs to be uploaded to a storage bucket. Select the file from your machine
    and click on **BROWSE** to create a storage destination on GCP, as shown in the
    following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.3 – AutoML Tables – import file from local computer'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.3_B16890.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.3 – AutoML Tables – import file from local computer
  prefs: []
  type: TYPE_NORMAL
- en: To create a storage bucket, you need to follow these steps.
  prefs: []
  type: TYPE_NORMAL
- en: First, provide a name for your storage bucket:![Figure 9.4 – AutoML Tables –
    creating a storage bucket on GCP
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_9.4_B16890.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 9.4 – AutoML Tables – creating a storage bucket on GCP
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Then, choose where you would like to store the data. The options are region
    (single region), dual region with **high availability** (**HA**), or multi-region
    for highest availability across multiple locations. For this example, we will
    choose **us-central1** as a single region, but you can choose another region if
    it suits you better geographically:![Figure 9.5 – AutoML Tables – choosing a location
    to create a storage bucket
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_9.5_B16890.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 9.5 – AutoML Tables – choosing a location to create a storage bucket
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Next, choose the default storage class for the data. The storage classes you
    can choose from are **Standard**, **Nearline (**backup**)**, **Coldline (**disaster
    recovery**)**, and **Archive (**for archival use**)**. Choose the **Standard**
    class for the purpose of this implementation, as seen in the following screenshot:![Figure
    9.6 – AutoML Tables – choosing a storage class for your data on GCP
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_9.6_B16890.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 9.6 – AutoML Tables – choosing a storage class for your data on GCP
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Finally, the encryption settings need to be configured. Here, you can provide
    your own key or use the default setting of using Google''s managed key. Click
    on **CREATE** to complete the process of making the bucket:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.7 – AutoML Tables – choosing encryption settings'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.7_B16890.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.7 – AutoML Tables – choosing encryption settings
  prefs: []
  type: TYPE_NORMAL
- en: 'This will trigger the bucket being created and the data being imported. You
    will see the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.8 – AutoML Tables – data being imported into the GCP bucket'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.8_B16890.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.8 – AutoML Tables – data being imported into the GCP bucket
  prefs: []
  type: TYPE_NORMAL
- en: 'This is where we will learn an important lesson: not all data is suitable for
    automated machine learning. Once the import process is complete, you will see
    the following error message:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.9 – AutoML Tables – too few rows error'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.9_B16890.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.9 – AutoML Tables – too few rows error
  prefs: []
  type: TYPE_NORMAL
- en: Even though you can do this experiment with other tools, cloud automated machine
    learning platforms set a minimum bar to ensure the quality of their algorithms
    is not compromised. This example provides us with a critical lesson that not all
    problems are automated machine learning-worthy.
  prefs: []
  type: TYPE_NORMAL
- en: Let's repeat the same experiment with a larger dataset – the loan risk dataset
    – which contains 21 fields and 1,000 instances. You can download it from BigML
    ([http://bml.io/W2SpyF](http://bml.io/W2SpyF), BigML, Inc. Corvallis, Oregon,
    USA, 2011). This dataset was created by Dr. Hans Hofmann at Institut für Statistik
    und Ökonometrie, Universität Hamburg, and contains fields such as checking status,
    duration, credit history, purpose, credit amount, and savings status. These can
    be used to create a model that will predict the level of the risk of a loan application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s carry out the aforementioned steps for the loan risk dataset by creating
    a bucket:'
  prefs: []
  type: TYPE_NORMAL
- en: Download the dataset from [http://bml.io/W2SpyF](http://bml.io/W2SpyF). Click
    on the **CREATE DATASET** button and import the loan risk dataset:![Figure 9.10
    – AutoML Tables – choosing a new dataset bucket
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_9.10_B16890.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 9.10 – AutoML Tables – choosing a new dataset bucket
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: As the import process starts, upload the csv file extracted from the dataset
    that we downloaded in step 5 file and point it to the destination cloud storage
    by clicking the **SELECT FILES** button:![Figure 9.11 – AutoML Tables – choosing
    storage for data
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_9.11_B16890.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 9.11 – AutoML Tables – choosing storage for data
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Since the loan dataset meets the required size limitations, it is imported successfully,
    and you will see the following training screen. This is where you can edit the
    auto-generated schema and select the column for predicting on. You can also update
    the column type, as well as whether it is nullable.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'This screen gives you a detailed overview of the dataset. You can click on
    the different column names to see some statistics about your columns:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/Figure_9.12_B16890.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Figure 9.12 – AutoML Tables – training screen
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, select the target column; that is, the column to predict, which is the
    class. The class is a categorical field with two possible values: good credit
    or bad credit. This determines whether this specific individual qualifies for
    credit. Once you''ve selected the class, click on **TRAIN MODEL**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.13 – AutoML Tables – selecting the target column for training'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.13_B16890.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.13 – AutoML Tables – selecting the target column for training
  prefs: []
  type: TYPE_NORMAL
- en: 'Upon clicking on the **TRAIN MODEL** button, you will see a fluid menu on the
    right. The menu can be seen in the following screenshot. This is where you can
    set experimental parameters and is where AutoML really shines because all you
    have to do is click **Train**. There are some options that you can set, including
    a maximum budget for training hours. This enables you to experiment with your
    data if you want and limit that training time before committing to a full, longer
    training run. You''ll notice that the training times shown are somewhat on the
    long side of things. This is because it''s not only doing model tuning but also
    selecting what model to use in the first place:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.14 – AutoML Tables – choosing a storage class for your data on GCP'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.14_B16890.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.14 – AutoML Tables – choosing a storage class for your data on GCP
  prefs: []
  type: TYPE_NORMAL
- en: 'How long should you train your model for? The suggested training time from
    GCP is defined at [https://cloud.google.com/automl-tables/docs/train](https://cloud.google.com/automl-tables/docs/train),
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.15 – AutoML Tables – suggested training times'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.15_B16890.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.15 – AutoML Tables – suggested training times
  prefs: []
  type: TYPE_NORMAL
- en: You can find the respective pricing guide at [https://cloud.google.com/automl-tables/pricing](https://cloud.google.com/automl-tables/pricing).
  prefs: []
  type: TYPE_NORMAL
- en: You can also review the advanced options, which is where you can see the optimization
    objectives for the experiment. Since this is a classification experiment, the
    objectives listed include A**UC ROC**, **Log loss**, **AUC PR**, **Precision**,
    and **Recall**. The **Early stopping** toggle ensures that upon detecting that
    no more improvements can be made, it stops the process. Otherwise, AutoML Tables
    will continue training until the budget is met.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on **TRAIN MODEL** to start this operation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.16 – AutoML Tables – advanced options for training'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.16_B16890.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.16 – AutoML Tables – advanced options for training
  prefs: []
  type: TYPE_NORMAL
- en: 'Upon starting the experiment, you will see the following screen. It''s initiated
    when the infrastructure is set up, as well as when the model is eventually trained:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.17 – AutoML Tables – starting the AutoML Tables experiment'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.17_B16890.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.17 – AutoML Tables – starting the AutoML Tables experiment
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the training is completed, we must evaluate and deploy the model. At this
    stage, you will be able to see how the training did, as well as any metrics about
    the model''s performance. Finally, you can deploy the model to get predictions
    about credit worthiness:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.18 – AutoML Tables – choosing a storage class for your data on GCP'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.18_B16890.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.18 – AutoML Tables – choosing a storage class for your data on GCP
  prefs: []
  type: TYPE_NORMAL
- en: 'The accuracy is measured as a percentage, while the area under the `0` to `1`.
    Training the model with different training costs (duration) will get you a higher
    value, which indicates a higher-quality model:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.19 – AutoML Tables – details of the trained model, including its
    F1 score, accuracy, and ](img/Figure_9.19_B16890.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.19 – AutoML Tables – details of the trained model, including its F1
    score, accuracy, and precision
  prefs: []
  type: TYPE_NORMAL
- en: 'The following page also shows the confusion matrix, which shows the quality
    of the model on the data; that is, how many data-points were predicted correctly,
    compared to how many were incorrectly predicted:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.20 – AutoML Tables – confusion matrix'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.20_B16890.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.20 – AutoML Tables – confusion matrix
  prefs: []
  type: TYPE_NORMAL
- en: 'Feature importance – that is, which feature has the biggest impact on the resulting
    model – is also shown. In this case, you can observe that the checking status,
    the duration of credit, and the purpose seem to have the most impact on the credit
    decision:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.21 – AutoML Tables – feature importance table'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.21_B16890.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.21 – AutoML Tables – feature importance table
  prefs: []
  type: TYPE_NORMAL
- en: Now that we've trained the model, let's proceed with its deployment.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding AutoML Tables model deployment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to deploy the model that we trained in the previous section, perform
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We must click on the **TEST & USE** tab to deploy the model. There are multiple
    ways of testing the trained model: you can either test it as a batch prediction
    (file-based), as an online prediction (API), or export it in a Docker container.
    The option at the top of the page lets you toggle between online predictions via
    the REST API and batch predictions. This allows you to upload a CSV file or point
    to a BigQuery table and get prediction results for that entire file or table.
    Considering the amount of time it takes to use, AutoML Tables enables you to achieve
    a much higher level of model performance than you could reach manually. We will
    be doing online API-based prediction in this section:![Figure 9.22 – AutoML Tables
    – exporting the model'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_9.22_B16890.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 9.22 – AutoML Tables – exporting the model
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click on the **ONLINE PREDICTION** tab. You will see the following screen. Here,
    you can call the API right from the console:![Figure 9.23 – AutoML Tables – online
    prediction on the trained model
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_9.23_B16890.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 9.23 – AutoML Tables – online prediction on the trained model
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: However, if you just click on **PREDICT**, it will give you the error shown
    in the following screenshot. Why? Because the model hasn't been deployed yet,
    which means there is no endpoint to call:![Figure 9.24 – AutoML Tables – online
    prediction on the trained model's error
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_9.24_B16890.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 9.24 – AutoML Tables – online prediction on the trained model's error
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click on the **Deploy model** button. You will see the following popup, confirming
    the deployment details. Now, click on **DEPLOY**:![Figure 9.25 – AutoML Tables
    – Deploying the trained model popup
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_9.25_B16890.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 9.25 – AutoML Tables – Deploying the trained model popup
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: This starts the process of model deployment. Once completed, you will see the
    following screen, which states that the model has been successfully deployed and
    is available for requests, along with the size it takes up. You should remember
    that the model is now running on a server, so you will be spending compute and
    storage costs associated with running the model. This is what the prior warning
    was about.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: At this point, you can go ahead and click on the `0.661` confidence score. At
    this point, you can switch to the feature column view and edit some of the parameters.
    We intuitively known that age and the duration of the credit have a significant
    impact on our credit results. Lowering the age from `48` to `18` and increasing
    the credit term to `60` in the editable form turns this good credit decision into
    a bad one.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s change these values and invoke the API again. You will see that the
    results have changed to bad ones, as seen in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.28 – AutoML Tables – invoking the model with a modified age and
    credit duration'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.28_B16890.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.28 – AutoML Tables – invoking the model with a modified age and credit
    duration
  prefs: []
  type: TYPE_NORMAL
- en: The preceding experiments have shown you how to train, deploy, and test a model.
    Now, let's explore how to use BigQuery-based public datasets with AutoML Tables.
  prefs: []
  type: TYPE_NORMAL
- en: AutoML Tables with BigQuery public datasets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Data has been called the new oil of the digital economy. To extend this analogy,
    automated machine learning is the engine that uses data to provide advanced analytics
    without custom manual plumbing each time, but I digress. Real-world data for performing
    machine learning experiments comes from various organizations, though counterparts
    are needed to perform experiments and try out hypotheses. Such a data repository
    is the Google BigQuery cloud data warehouse – specifically, its large collection
    of public datasets. In this example, we will use BigQuery, one of the three methods
    specified in the data ingestion process for AutoML Tables, for our experiment.
  prefs: []
  type: TYPE_NORMAL
- en: 'Like the loan dataset we used earlier, the adult income dataset is a public
    dataset derived from the 1994 United States Census Bureau and uses demographic
    information to predict the income of two classes: above or below $50,000 per year.
    The dataset contains 14 attributes, with the target fields being income and number
    of attributes. The data can be downloaded from [https://www.kaggle.com/wenruliu/adult-income-dataset?select=adult.csv](https://www.kaggle.com/wenruliu/adult-income-dataset?select=adult.csv).
    However, BigQuery contains a repository of popular public datasets, so we will
    use that instead. Let''s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: As we did previously, click on **Create new dataset** in the **Tables** tab
    and click on the **CREATE DATASET** button:![Figure 9.29 – AutoML Tables – Create
    new dataset prompt
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_9.29_B16890.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 9.29 – AutoML Tables – Create new dataset prompt
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now, to add to the dataset, select the third option – that is, **Select a table
    or view from BigQuery** – as shown in the following screenshot:![Figure 9.30 –
    AutoML Tables – selecting the BigQuery data
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_9.30_B16890.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 9.30 – AutoML Tables – selecting the BigQuery data
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'BigQuery can be accessed at [https://console.cloud.google.com/bigquery](https://console.cloud.google.com/bigquery).
    This is where you can view the datasets it contains. You can do this by calling
    the following query:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You will see the following output. Our goal is to export this data to a bucket
    where it can be used for our experiment. Set the destination table for the query
    result as a dataset and click on **Run**:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 9.31 – AutoML Tables – BigQuery search results from the census adult
    income dataset'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.31_B16890.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.31 – AutoML Tables – BigQuery search results from the census adult
    income dataset
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a brief list of BigQuery public datasets. This makes using
    these curated datasets quite accessible and easy to use across the entire GCP
    suite of products:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.32 – AutoML Tables – BigQuery public datasets'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.32_B16890.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.32 – AutoML Tables – BigQuery public datasets
  prefs: []
  type: TYPE_NORMAL
- en: 'In the previous step, you ran the query, which is now completed, and created
    a dataset, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.33 – AutoML Tables – BigQuery public dataset export'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.33_B16890.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.33 – AutoML Tables – BigQuery public dataset export
  prefs: []
  type: TYPE_NORMAL
- en: Now that the data has been exported to a bucket, you can use it to experiment
    in AutoML Tables.
  prefs: []
  type: TYPE_NORMAL
- en: Automated machine learning for price prediction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, you have seen how AutoML Tables can be used for classification problems;
    that is, finding classes in a dataset. Now, let's do some regression; that is,
    predicting values. To do this, we will use the house sales prediction dataset.
    The King County house sales dataset contains prices for King County, which includes
    Seattle. The dataset can be downloaded from Kaggle at [https://www.kaggle.com/harlfoxem/housesalesprediction](https://www.kaggle.com/harlfoxem/housesalesprediction).
  prefs: []
  type: TYPE_NORMAL
- en: 'For this experiment, our goal is to predict a house''s sale value (price) by
    using 21 features and 21,613 observations or data points:'
  prefs: []
  type: TYPE_NORMAL
- en: Let's start in AI Platform by clicking on the **CREATE DATASET** button on the
    main page:![Figure 9.34 – AutoML Tables – getting started with the AI Platform
    home page
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_9.34_B16890.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 9.34 – AutoML Tables – getting started with the AI Platform home page
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Here, you must choose a dataset name and region, as shown in the following
    screenshot. Set the dataset''s type to tabular since it currently has classification
    and regression automated machine learning capabilities and click **CREATE**:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 9.35 – AutoML Tables – selecting the automated machine learning objective'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/Figure_9.35_B16890.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 9.35 – AutoML Tables – selecting the automated machine learning objective
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Upon clicking **CREATE**, you will see the following screen. Select the **Upload
    CSV files** **from your computer** option and upload it to cloud storage by pressing
    **CONTINUE**:![Figure 9.36 – AutoML Tables – choosing storage parameters for your
    data
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_9.36_B16890.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 9.36 – AutoML Tables – choosing storage parameters for your data
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Upon clicking **CONTINUE**, the dataset will be uploaded and you will see the
    following screen, which shows a description of the data. Click on **TRAIN NEW
    MODEL**:![Figure 9.37 – AutoML Tables – data description details once uploading
    is completed
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_9.37_B16890.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 9.37 – AutoML Tables – data description details once uploading is completed
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: At this point, you are at the training the new model workflow. Here, set the
    objective to `Regression` and the method to **AutoML**. Then, press **CONTINUE**:![Figure
    9.38 – AutoML Tables – Train new model steps
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_9.38_B16890.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 9.38 – AutoML Tables – Train new model steps
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Next, we must edit the model definition. Here, choose the target column (the
    price to be predicted) and the data split; that is, how you would like the test
    and training data to be split. The default option of random assignment is a good
    choice unless you have a specific need to do manual or chronological stratification.
    Click **CONTINUE** to proceed:![Figure 9.39 – AutoML Tables – Train new model
    steps
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_9.39_B16890.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 9.39 – AutoML Tables – Train new model steps
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The following screenshot gives you the option to perform granular actions with
    data, such as removing or filtering columns, applying transformations, and more:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 9.40 – AutoML Tables – description of the dataset upon being uploaded'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/Figure_9.40_B16890.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 9.40 – AutoML Tables – description of the dataset upon being uploaded
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You can also choose optimization objectives. The choices are **root mean square
    error** (**RMSE**), **mean absolute error** (**MAE**), or **root mean square log
    error** (**RMSLE**), which is robust against the outliers. Select **RMSE (Default)**
    and click on **CONTINUE** to proceed:![Figure 9.41 – AutoML Tables – description
    of the optimization objectives
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_9.41_B16890.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 9.41 – AutoML Tables – description of the optimization objectives
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The final thing we must look at before we start training is the training budget.
    This step should be familiar to you from our earlier experiments. Set a budget
    of 5 hours and click on **START TRAINING**. Do not forget to toggle on **Enable
    early stopping** – we don't want to exhaust the budget if the results are reached
    earlier:![Figure 9.42 – AutoML Tables – training the new model's compute and price
    step
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_9.42_B16890.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 9.42 – AutoML Tables – training the new model's compute and price step
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The model will start training. You will be able to see its progress in the
    **Training jobs and models** side panel:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 9.43 – AutoML Tables – new model training started'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/Figure_9.43_B16890.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 9.43 – AutoML Tables – new model training started
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'This specific model took 1 hour and 35 minutes to train. The following screen
    will appear once it''s completed. This screen will show you the status attributes
    and training performance of the model:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 9.44 – AutoML Tables – training performance and results'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/Figure_9.44_B16890.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 9.44 – AutoML Tables – training performance and results
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Scroll down the **Training performance and results** page to view the feature
    importance chart for this model. This chart proves the age-old adage of real estate
    – location, location, location – to be correct. Also, the price of the property
    and the square feet of living space are closely related. This is not surprising
    either:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 9.45 – AutoML Tables – results and their feature importance'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/Figure_9.45_B16890.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 9.45 – AutoML Tables – results and their feature importance
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'At this point, you can deploy and test the model by clicking on **DEPLOY &
    TEST**, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.46 – AutoML Tables – deploying the model to an endpoint'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.46_B16890.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.46 – AutoML Tables – deploying the model to an endpoint
  prefs: []
  type: TYPE_NORMAL
- en: In the several experiments we've conducted in this section, we have found that
    the size of the data was a substantial factor for improved accuracy. As the number
    of observations in a dataset increases, automated machine learning can perform
    a better neural architecture search and hyperparameter optimization to get the
    best results.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned how to perform automated machine learning using
    AutoML Tables. We started by setting up a Cloud AutoML Tables-based experiment
    and then demonstrated how the AutoML Tables model is trained and deployed. Using
    multiple data sources, we explored AutoML Tables with BigQuery public datasets,
    as well as both classification and regression. We hope that this chapter has made
    you familiar with working with GCP AutoML so that you can apply it to your automated
    machine learning experiments.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will explore an enterprise use case for automated machine
    learning.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For more information regarding what was covered in this chapter, please refer
    to the following links:'
  prefs: []
  type: TYPE_NORMAL
- en: 'AutoML Tables beginner''s guide:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://cloud.google.com/automl-tables/docs/beginners-guide](https://cloud.google.com/automl-tables/docs/beginners-guide)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'AutoML Tables notebooks:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://cloud.google.com/automl-tables/docs/notebooks](https://cloud.google.com/automl-tables/docs/notebooks)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
