["```py\nimport pandas as pd\nimport matplotlib.pyplot as plt\n```", "```py\ndata = pd.read_csv('milk-production-pounds.csv',\n               parse_dates=True,index_col='DateTime',\n               names=['DateTime', 'Milk'], header=None)\n```", "```py\nprint(data.head())\n```", "```py\nDateTime     Milk\n1962-01-01   589\n1962-02-01   561\n1962-03-01   640\n1962-04-01   656\n1962-05-01   727\n```", "```py\nprint(data.describe())\n```", "```py\n Milk\ncount  168.000000\nmean   754.708333\nstd    102.204524\nmin    553.000000\n25%    677.750000\n50%    761.000000\n75%    824.500000\nmax    969.000000\n```", "```py\nprint(data.info())\n```", "```py\n<class 'pandas.core.frame.DataFrame'>\nDatetimeIndex: 168 entries, 1962-01-01 to 1975-12-01\nData columns (total 1 columns):\nMilk    168 non-null int64\ndtypes: int64(1)\nmemory usage: 2.6 KB\nNone\n```", "```py\ndata.plot()\nplt.show()\n```", "```py\nimport numpy\nfrom sklearn.linear_model import LinearRegression\n```", "```py\nX = [i for i in range(0, len(data))]\nX = numpy.reshape(X, (len(X), 1))\ny = data.values\n```", "```py\nLModel = LinearRegression()\n```", "```py\nLModel.fit(X, y)\n```", "```py\nprint(LModel.intercept_,LModel.coef_)\n```", "```py\n[613.37496478] [[1.69261519]]\n```", "```py\ntrend = LModel.predict(X)\n```", "```py\nplt.plot(y)\nplt.plot(trend)\nplt.show()\n```", "```py\nfrom statsmodels.tsa.seasonal import seasonal_decompose\n```", "```py\nDecompDataAdd = seasonal_decompose(data, model='additive', freq=1)\n```", "```py\nDecompDataAdd.plot()\nplt.show()\n```", "```py\nSeasRemov= data-DecompDataAdd.seasonal\n```", "```py\nSeasRemov.plot()\nplt.show()\n```", "```py\nDecompDataMult = seasonal_decompose(data, model='multiplicative')\n```", "```py\nDecompDataMult.plot()\nplt.show()\n```", "```py\nimport pandas as pd\nimport matplotlib.pyplot as plt\n```", "```py\ndataset = pd.read_csv(' co2-ppm-mauna-loa-19651980.csv',\n               parse_dates=True,index_col='DateTime',\n               names=['DateTime', 'CO2'], header=None)\n```", "```py\nprint(dataset.head())\n```", "```py\nDateTime    CO2\n1965-01-01  319.32\n1965-02-01  320.36\n1965-03-01  320.82\n1965-04-01  322.06\n1965-05-01  322.17\n```", "```py\nprint(dataset.describe())\n```", "```py\n CO2\ncount  192.000000\nmean   328.463958\nstd      5.962682\nmin    317.250000\n25%    323.397500\n50%    328.295000\n75%    333.095000\nmax    341.190000\n```", "```py\nprint(data.info())\n```", "```py\n<class 'pandas.core.frame.DataFrame'>\nDatetimeIndex: 192 entries, 1965-01-01 to 1980-12-01\nData columns (total 1 columns):\nCO2    192 non-null float64\ndtypes: float64(1)\nmemory usage: 3.0 KB\n```", "```py\ndataset.plot()\nplt.show()\n```", "```py\nscaler = MinMaxScaler()\ndataset = scaler.fit_transform(dataset)\n```", "```py\ntrain_len = int(len(dataset) * 0.70)\ntest_len  = len(dataset) - train_len\ntrain = dataset[0:train_len,:]\ntest  = dataset[train_len:len(dataset),:]\n```", "```py\nprint(len(train), len(test))\n```", "```py\n134 58\n```", "```py\ndef dataset_creating(dataset):\n   Xdata, Ydata = [], []\n   for i in range(len(dataset)-1):\n         Xdata.append(dataset[i, 0])\n         Ydata.append(dataset[i + 1, 0])\n   return numpy.array(Xdata), numpy.array(Ydata)\n```", "```py\ntrainX, trainY = create_dataset(train)\ntestX, testY = create_dataset(test)\n```", "```py\ntrainX = numpy.reshape(trainX, (trainX.shape[0], 1, 1))\ntestX = numpy.reshape(testX, (testX.shape[0], 1, 1))\n```", "```py\ntimesteps = 1\nmodel = Sequential()\n```", "```py\nmodel.add(LSTM(4, input_shape=(1, timesteps)))\nmodel.add(Dense(1))\n```", "```py\nmodel.compile(loss='mean_squared_error', optimizer='adam')\n```", "```py\nmodel.fit(trainX, trainY, epochs=1000, batch_size=1, verbose=2)\n```", "```py\ntrainPred = model.predict(trainX)\ntestPred = model.predict(testX)\n```", "```py\ntrainPred = scaler.inverse_transform(trainPred)\ntrainY = scaler.inverse_transform([trainY])\ntestPred = scaler.inverse_transform(testPred)\ntestY = scaler.inverse_transform([testY])\n```", "```py\ntrainScore = math.sqrt(mean_squared_error(trainY[0], trainPred[:,0]))\nprint('Train Score: %.2f RMSE' % (trainScore))\ntestScore = math.sqrt(mean_squared_error(testY[0], testPred[:,0]))\nprint('Test Score: %.2f RMSE' % (testScore))\n```", "```py\nTrain Score: 1.12 RMSE\nTest Score: 1.35 RMSE\n```", "```py\ntrainPredPlot = numpy.empty_like(dataset)\ntrainPredPlot[:,:] = numpy.nan\ntrainPredPlot[1:len(trainPred)+1,:] = trainPred\n```", "```py\ntestPredPlot = numpy.empty_like(dataset)\ntestPredPlot[:,:] = numpy.nan\ntestPredPlot[len(trainPred)+2:len(dataset),:] = testPred\n```", "```py\nplt.plot(scaler.inverse_transform(dataset))\nplt.plot(trainPredPlot)\nplt.plot(testPredPlot)\nplt.show()\n```"]