["```py\nimport pandas as pd\n```", "```py\nnb_hrs_studies = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n```", "```py\navg_grade = [5.5, 5.8, 6.8, 7.2, 7.4, 7.8, 8.2, 8.8, 9.3, 9.4]\n```", "```py\ndata = pd.DataFrame({'nb_hrs_studies': nb_hrs_studies, 'avg_grade': avg_grade})\n```", "```py\ndata\n```", "```py\nimport matplotlib.pyplot as plt\n```", "```py\nplt.scatter(data['nb_hrs_studies'], data['avg_grade'])\n```", "```py\nplt.xlabel('nb_hrs_studies')\n```", "```py\nplt.ylabel('avg_grades')\n```", "```py\nfrom sklearn.datasets import make_regression\nX,y = make_regression(n_samples=1000,n_features=5,n_informative=5,noise=100)\n```", "```py\npd.DataFrame(X).describe()\n```", "```py\npd.Series(y).hist()\n```", "```py\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)\n```", "```py\n!pip install river\nfrom river.linear_model import LinearRegression\nmodel = LinearRegression()\n```", "```py\n# fit the model\nfor x_i,y_i in zip(X_train,y_train):\n    x_json = {'val'+str(i): x for i,x in enumerate(x_i)}\n    model.learn_one(x_json,y_i)\n```", "```py\n# predict on the test set\nimport pandas as pd\npreds = []\nfor x_i in X_test:\n    x_json = {'val'+str(i): x for i,x in enumerate(x_i)}\n    preds.append(model.predict_one(x_json))\n```", "```py\n# compute accuracy\nfrom sklearn.metrics import r2_score\nr2_score(y_test, preds)\n```", "```py\nfrom river.tree import HoeffdingAdaptiveTreeRegressor\nmodel = HoeffdingAdaptiveTreeRegressor(seed=42)\n# fit the model\nfor x_i,y_i in zip(X_train,y_train):\n    x_json = {'val'+str(i): x for i,x in enumerate(x_i)}\n    model.learn_one(x_json,y_i)\n# predict on the test set\nimport pandas as pd\npreds = []\nfor x_i in X_test:\n    x_json = {'val'+str(i): x for i,x in enumerate(x_i)}\n    preds.append(model.predict_one(x_json))\n# compute accuracy\nfrom sklearn.metrics import r2_score\nr2_score(y_test, preds)\n```", "```py\ndef evaluate_HATR(grace_period, leaf_prediction, model_selector_decay):\n    # model pipeline\n    model = (\n        HoeffdingAdaptiveTreeRegressor(\n            grace_period=grace_period,\n            leaf_prediction=leaf_prediction,\n            model_selector_decay=model_selector_decay,\n            seed=42)\n    )\n    # fit the model\n    for x_i,y_i in zip(X_train,y_train):\n        x_json = {'val'+str(i): x for i,x in enumerate(x_i)}\n        model.learn_one(x_json,y_i)\n    # predict on the test set\n    preds = []\n    for x_i in X_test:\n        x_json = {'val'+str(i): x for i,x in enumerate(x_i)}\n        preds.append(model.predict_one(x_json))\n    # compute accuracy\n    return r2_score(y_test, preds)\n```", "```py\ngrace_periods=[0,5,10,]\nleaf_predictions=['mean','adaptive']\nmodel_selector_decays=[ 0.3, 0.8,  0.95]\n```", "```py\nresults = []\ni = 0\nfor grace_period in grace_periods:\n    for leaf_prediction in leaf_predictions:\n        for model_selector_decay in model_selector_decays:\n            print(i)\n            i = i+1\n            results.append([grace_period, leaf_prediction, model_selector_decay,evaluate_HATR(grace_period, leaf_prediction, model_selector_decay)])\n```", "```py\npd.DataFrame(results, columns=['grace_period', 'leaf_prediction', 'model_selector_decay', 'r2_score' ]).sort_values('r2_score', ascending=False)\n```", "```py\nfrom river.tree import SGTRegressor\n# model pipeline\nmodel = SGTRegressor()\n# fit the model\nfor x_i,y_i in zip(X_train,y_train):\n    x_json = {'val'+str(i): x for i,x in enumerate(x_i)}\n    model.learn_one(x_json,y_i)\n# predict on the test set\npreds = []\nfor x_i in X_test:\n    x_json = {'val'+str(i): x for i,x in enumerate(x_i)}\n    preds.append(model.predict_one(x_json))\n# compute accuracy\nr2_score(y_test, preds)\n```", "```py\nfrom river.tree import SGTRegressor\ndef evaluate_SGT(delta, lambda_value, grace_period):\n    # model pipeline \n    model = SGTRegressor(delta=delta,\n                        lambda_value=lambda_value,\n                        grace_period=grace_period,)\n    # fit the model\n    for x_i,y_i in zip(X_train,y_train):\n        x_json = {'val'+str(i): x for i,x in enumerate(x_i)}\n        model.learn_one(x_json,y_i)\n    # predict on the test set\n    preds = []\n    for x_i in X_test:\n        x_json = {'val'+str(i): x for i,x in enumerate(x_i)}\n        preds.append(model.predict_one(x_json))\n    # compute accuracy\n    return r2_score(y_test, preds)\n```", "```py\ngrace_periods=[0,10,25]\nlambda_values=[0.5, 0.8, 1.]\ndeltas=[0.0001, 0.001, 0.01, 0.1]\n```", "```py\nresults = []\ni = 0\nfor grace_period in grace_periods:\n    for lambda_value in lambda_values:\n        for delta in deltas:\n            print(i)\n            i = i+1\n            result = evaluate_SGT(delta, lambda_value, grace_period)\n            print(result)\n            results.append([delta, lambda_value, grace_period,result])\n```", "```py\npd.DataFrame(results, columns=['delta', 'lambda_value', 'grace_period', 'r2_score' ]).sort_values('r2_score', ascending=False)\n```", "```py\nfrom river.ensemble import SRPRegressor\n# model pipeline \nbase_model = LinearRegression()\nmodel = SRPRegressor(\n    model=base_model,\n    n_models=3,\n    seed=42\n)\n# fit the model\nfor x_i,y_i in zip(X_train,y_train):\n    x_json = {'val'+str(i): x for i,x in enumerate(x_i)}\n    model.learn_one(x_json,y_i)\n# predict on the test set\npreds = []\nfor x_i in X_test:\n    x_json = {'val'+str(i): x for i,x in enumerate(x_i)}\n    preds.append(model.predict_one(x_json))\n# compute accuracy\nr2_score(y_test, preds)\n```", "```py\ndef evaluate_SRP(n_models):\n    # model pipeline \n    base_model = LinearRegression()\n    model = SRPRegressor(\n        model=base_model,\n        n_models=n_models,\n        seed=42\n    )\n    # fit the model\n    for x_i,y_i in zip(X_train,y_train):\n        x_json = {'val'+str(i): x for i,x in enumerate(x_i)}\n        model.learn_one(x_json,y_i)\n    # predict on the test set\n    preds = []\n    for x_i in X_test:\n        x_json = {'val'+str(i): x for i,x in enumerate(x_i)}\n        preds.append(model.predict_one(x_json))\n    # compute accuracy\n    return r2_score(y_test, preds)\n```", "```py\nresults = []\nfor n_models in range(1, 50):\n    results.append([n_models, evaluate_SRP(n_models)])\n```", "```py\npd.DataFrame(results,columns=['n_models', 'r2_score']).sort_values('r2_score', ascending=False)\n```"]