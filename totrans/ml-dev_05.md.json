["```py\n    import numpy as np\n    import matplotlib.pyplot as plt\n    plt.style.use('fivethirtyeight')\n    from pprint import pprint\n    %matplotlib inline\n    from sklearn import datasets\n    import matplotlib.pyplot as plt\n```", "```py\n    >class TransferFunction:\n        def getTransferFunction(x):\n            raise NotImplementedError\n        def getTransferFunctionDerivative(x):\n            raise NotImplementedError\n```", "```py\n    def graphTransferFunction(function):\n        x = np.arange(-2.0, 2.0, 0.01)\n        plt.figure(figsize=(18,8))\n        ax=plt.subplot(121)\n        ax.set_title(function.__name__)\n        plt.plot(x, function.getTransferFunction(x))\n\n        ax=plt.subplot(122)\n        ax.set_title('Derivative of ' + function.__name__)\n        plt.plot(x, function.getTransferFunctionDerivative(x))\n```", "```py\n    class Sigmoid(TransferFunction):  #Squash 0,1\n        def getTransferFunction(x):\n            return 1/(1+np.exp(-x))\n        def getTransferFunctionDerivative(x):\n        return x*(1-x)\n\n    graphTransferFunction(Sigmoid)\n```", "```py\n  ws=np.arange(-1.0, 1.0, 0.2)\n    bs=np.arange(-2.0, 2.0, 0.2)\n    xs=np.arange(-4.0, 4.0, 0.1)\n    plt.figure(figsize=(20,10))\n    ax=plt.subplot(121)\n    for i in ws:\n        plt.plot(xs,  Sigmoid.getTransferFunction(i *xs),label= str(i));\n    ax.set_title('Sigmoid variants in w')\n    plt.legend(loc='upper left');\n\n    ax=plt.subplot(122)\n    for i in bs:\n        plt.plot(xs,  Sigmoid.getTransferFunction(i +xs),label= str(i));\n    ax.set_title('Sigmoid variants in b')\n    plt.legend(loc='upper left');\n```", "```py\n    class Tanh(TransferFunction):  #Squash -1,1\n        def getTransferFunction(x):\n            return np.tanh(x)\n        def getTransferFunctionDerivative(x):\n            return np.power(np.tanh(x),2)\n    graphTransferFunction(Tanh)\n```", "```py\n    class Relu(TransferFunction):\n        def getTransferFunction(x):\n            return x * (x>0)\n        def getTransferFunctionDerivative(x):\n            return 1 * (x>0)\n    graphTransferFunction(Relu)\n```", "```py\n    class Linear(TransferFunction):\n        def getTransferFunction(x):\n            return x\n        def getTransferFunctionDerivative(x):\n            return np.ones(len(x))\n    graphTransferFunction(Linear)\n```", "```py\n    sampley_=np.array([.1,.2,.3,-.4, -1, -3, 6, 3])\n    sampley=np.array([.2,-.2,.6,.10, 2, -1, 3, -1])\n\n    ax.set_title('Sigmoid variants in b')\n    plt.figure(figsize=(10,10))\n    ax=plt.subplot()\n    plt.plot(sampley_ - sampley, label='L1')\n    plt.plot(np.power((sampley_ - sampley),2), label=\"L2\")\n    ax.set_title('L1 vs L2 initial comparison')\n    plt.legend(loc='best')\n    plt.show()\n```", "```py\n    class LossFunction:\n        def getLoss(y_ , y ):\n            raise NotImplementedError\n\n    class L1(LossFunction):\n        def getLoss(y_, y):\n            return np.sum (y_ - y)\n\n    class L2(LossFunction):\n        def getLoss(y_, y):\n            return np.sum (np.power((y_ - y),2))\n```", "```py\n    # input dataset\n    X = np.array([  [0,0,1],\n                    [0,1,1],\n                    [1,0,1],\n                    [1,1,1] ])\n\n    # output dataset            \n    y = np.array([[0,0,1,1]]).T\n```", "```py\n    # initialize weights randomly with mean 0\n    W = 2*np.random.random((3,1)) - 1\n    print (W)\n```", "```py\n    [[ 0.52014909]\n     [-0.25361738]\n     [ 0.165037  ]]\n```", "```py\n    errorlist=np.empty(3);\n    weighthistory=np.array(0)\n    resultshistory=np.array(0)\n```", "```py\n    for iter in range(100):\n\n        # forward propagation\n        l0 = X\n        l1 = Sigmoid.getTransferFunction(np.dot(l0,W))\n        resultshistory = np.append(resultshistory , l1)\n\n        # Error calculation\n        l1_error = y - l1\n        errorlist=np.append(errorlist, l1_error)\n\n        # Back propagation 1: Get the deltas\n        l1_delta = l1_error * Sigmoid.getTransferFunctionDerivative(l1)\n\n        # update weights\n        W += np.dot(l0.T,l1_delta)\n        weighthistory=np.append(weighthistory,W)\n```", "```py\n    print (l1)\n```", "```py\n    [[ 0.11510625]\n     [ 0.08929355]\n     [ 0.92890033]\n     [ 0.90781468]]\n```", "```py\n    plt.figure(figsize=(20,20))\n    print (W)\n    plt.imshow(np.reshape(weighthistory[1:],(-1,3))[:40], cmap=plt.cm.gray_r,     \n    interpolation='nearest');\n```", "```py\n[[ 4.62194116]\n [-0.28222595]\n [-2.04618725]]\n```", "```py\n    plt.figure(figsize=(20,20))\n    plt.imshow(np.reshape(resultshistory[1:], (-1,4))[:40], cmap=plt.cm.gray_r,     \n    interpolation='nearest');\n```", "```py\n    plt.figure(figsize=(10,10))\n    plt.plot(errorlist);\n```"]