["```py\n>>> model = LinearRegression()\n>>> model.fit(X, Y)\n>>> model.coef_\narray([ 9.10210898])\n```", "```py\nimport numpy as np\n\nnb_samples = 100\nX_data = np.random.normal(loc=0.0, scale=np.sqrt(2.0), size=nb_samples)\n```", "```py\ndef negative_log_likelihood(v):\n l = 0.0\n f1 = 1.0 / np.sqrt(2.0 * np.pi * v[1]) \n f2 = 2.0 * v[1]\n\n for x in X_data:\n l += np.log(f1 * np.exp(-np.square(x - v[0]) / f2))\n\n return -l\n```", "```py\nfrom scipy.optimize import minimize\n\n>>> minimize(fun=negative_log_likelihood, x0=[0.0, 1.0])\n\n fun: 172.33380423827057\n hess_inv: array([[ 0.01571807,  0.02658017],\n       [ 0.02658017,  0.14686427]])\n      jac: array([  0.00000000e+00,  -1.90734863e-06])\n  message: 'Optimization terminated successfully.'\n     nfev: 52\n      nit: 9\n     njev: 13\n   status: 0\n  success: True\n        x: array([ 0.04088792,  1.83822255])\n```"]