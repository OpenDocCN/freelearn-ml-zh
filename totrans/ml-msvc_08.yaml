- en: '8'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Role of DevOps in Building Intelligent MSA Enterprise Systems
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In previous chapters, we covered what MSA is and the advantages of MSA over
    monolithic architecture. Then, we discussed, with examples, how to refactor a
    monolithic application into an MSA, and then talked about different patterns and
    techniques to enhance the performance of an MSA system.
  prefs: []
  type: TYPE_NORMAL
- en: We also discussed the different ML and DL algorithms with hands-on examples,
    how they can be optimized, and how these ML and DL algorithms can help further
    enhance the stability, resilience, and supportability of an MSA system in order
    to build a “smart MSA” or “intelligent MSA” system.
  prefs: []
  type: TYPE_NORMAL
- en: Over the next few chapters, we will further enhance our ABC-MSA system and try
    to apply what has been learned so far using some hands-on installations and code
    examples. However, before we do so, we need to discuss the different concepts
    of DevOps in this chapter, and how to apply the DevOps process to building and
    running an MSA system.
  prefs: []
  type: TYPE_NORMAL
- en: In [*Chapter 1*](B18934_01.xhtml#_idTextAnchor014), we briefly talked about
    DevOps in MSA. In this chapter, we will expand on the subject and dive into the
    details of the role of DevOps in building intelligent MSA.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics are covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: DevOps and organizational structure alignment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DevOps processes in enterprise MSA system operations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Applying DevOps from the beginning to operations and maintenance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DevOps and organizational structure alignment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In a traditional software development organization, the software delivery process
    is matured and built according to how that traditional organization is structured.
    Typically, we have a business team that defines the core business specifications
    and requirements, followed by another team of architects that builds how the system
    is supposed to be structured. In the traditional software model, we also have
    design engineers who write the functional specs, a development team responsible
    for writing the code, a QA team to test the code quality, then a release team,
    an operations team for post-release operations, a support team, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.1: Traditional development structure](img/B18934_08_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.1: Traditional development structure'
  prefs: []
  type: TYPE_NORMAL
- en: With all these teams involved in the pipeline in the traditional software release
    cycle, mostly sequential hand-offs between teams, silos, dependencies in between,
    cross-communication issues, and the possibility of finger-pointing during the
    process, the release cycle can take weeks or months to finish. For an MSA, this
    is not acceptable.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: The whole purpose of MSA is to simplify, speed up, and optimize software releases
    and updates. Applying the traditional methodology to MSA system development just
    doesn’t work and defeats the purpose of adopting an MSA to begin with.
  prefs: []
  type: TYPE_NORMAL
- en: DevOps
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: DevOps is one of the major processes adopted in modern software development
    organizations to help streamline the release process and optimize it so that an
    organization can make multiple seamless release updates every day with no service
    interruption whatsoever.
  prefs: []
  type: TYPE_NORMAL
- en: DevOps is a combination of processes that allow you to take an application from
    development to operation smoothly. Enterprises need dedicated and well-defined
    DevOps processes to manage their solution development, hosting, and operations.
  prefs: []
  type: TYPE_NORMAL
- en: The primary need of a DevOps team is to implement engineering techniques in
    managing the operations of applications. While this sounds simple to do, several
    mundane and random activities are carried out by the operations teams. Streamlining
    these tasks is the biggest challenge in adopting DevOps.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.2: Teams working together in a DevOps fashion](img/B18934_08_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.2: Teams working together in a DevOps fashion'
  prefs: []
  type: TYPE_NORMAL
- en: The primary responsibility of the development team is to build the application.
    However, they also need to take care of other aspects of the application, such
    as the application performance, usage analytics, code quality, activity logging,
    and solving code-level errors.
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, the operations team faces a completely different set of problems.
    Their concerns include managing the availability of the applications, ensuring
    performance through higher scalability, and improving the monitoring of the solution
    ecosystem, the allocation of resources, and the overall system analytics. DevOps
    processes handle all of these concerns for all parties involved in the process.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.3: DevOps life cycle](img/B18934_08_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.3: DevOps life cycle'
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 8**.3* is similar to what we discussed in *Figure 1**.11*. One new
    thing to add here is that the **PLAN** stage is where the software roadmap is
    defined and gets broken down into major requirements, called **epics**. These
    epics are broken down into a collection of short end user requirements, called
    **user stories**. More info on that will come in the next section.'
  prefs: []
  type: TYPE_NORMAL
- en: Well, OK then, if an organization is to adopt an MSA, they should embrace a
    DevOps culture as well.Simple, right? Not quite!
  prefs: []
  type: TYPE_NORMAL
- en: Adopting a DevOps culture within a traditional organizational structure would
    have many misalignments that are guaranteed to hinder the DevOps cycle. The efficiency
    and speed of your release cycle will be as fast as the slowest process in your
    cycle. The software development organization itself has to shift its culture to
    align with DevOps, not the other way around. Many other methodologies and technologies
    will need to be adopted as part of the new shift to DevOps. The organizational
    structure itself may also need to be tweaked to align with the new DevOps methodologies.
  prefs: []
  type: TYPE_NORMAL
- en: The DevOps team structure
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Setting up a DevOps team is the first step toward organizational transformation.
    However, you cannot expect to have a fully-fledged DevOps team without considering
    the existing organizational structure and how the organization is aligned with
    the existing development cycle.
  prefs: []
  type: TYPE_NORMAL
- en: It is imperative to have an interim phase in which the development and operations
    teams can function reasonably within the existing traditional organization. Both
    traditional Dev and Ops teams then slowly morph themselves into a true DevOps
    structure as the organization modernizes its structure to fit into the new culture.
  prefs: []
  type: TYPE_NORMAL
- en: One of the recommended approaches in the organizational transformation scenario
    is to develop a small DevOps team to work as a link between the existing development
    team and the operations team. The DevOps team’s main objective in this particular
    case is to cross-function between both Dev and Ops teams to map deliverables in
    between, slowly familiarize both teams with the new methodology, and start applying
    basic DevOps methodologies within both teams so that they can be unified in the
    future.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.4: The DevOps team as a link between Dev and Ops during the organizational
    transition](img/B18934_08_4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.4: The DevOps team as a link between Dev and Ops during the organizational
    transition'
  prefs: []
  type: TYPE_NORMAL
- en: Team communication, collaboration, energy, trust, and a solid understanding
    of the entire development cycle are all paramount to the new DevOps team’s success.
    Therefore, you must identify the right skills and people who can push the activities
    of the DevOps team forward. These skills may include, but are not limited to,
    coding skills, mastering DevOps and **Continuous Integration/Continuous Development**
    (**CI/CD**) tools, and automation.
  prefs: []
  type: TYPE_NORMAL
- en: As the organizational structure and the teams mature and become more familiar
    with the new methodologies, merging the old Dev, old Ops, and the interim DevOps
    teams into a single new DevOps team becomes essential. Staying in the interim
    stage too long is likely to create even more disruptions than using the traditional
    development cycle for developing the MSA system.
  prefs: []
  type: TYPE_NORMAL
- en: The size of the DevOps team can be as small as 3 engineers, and as large as
    12, depending on the organization’s size, existing structure, and the effort being
    put into the organizational transformation. Usually, a number between 3 and 12
    is ideal. Having a larger team is likely to create more challenges than benefits
    and start negatively impacting the team’s overall performance.
  prefs: []
  type: TYPE_NORMAL
- en: Begin the process of transformation in a step-by-step manner, starting with
    infrastructure codification, the automation of infrastructure provisioning, source
    code version control, infrastructure monitoring, code build automation, deployment
    automation, test orchestration, cloud service management, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: We know now how the organizational structure is relevant and important when
    embracing DevOps. We still need to understand some other details on the processes
    that will complement DevOps in order to achieve our goal of developing an efficient,
    high-quality MSA system with a short time-to-market and seamless updates.
  prefs: []
  type: TYPE_NORMAL
- en: In the following section, we will examine some other considerations that need
    to be taken into account when developing an MSA system.
  prefs: []
  type: TYPE_NORMAL
- en: DevOps processes in enterprise MSA system operations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Microservices development is a fast-paced process and requires all other development
    processes to run at the same pace. Right from the beginning of the development
    of the MSA system, source code management and configuration management are needed
    to provide the correct support to the DevOps team. This is followed by code scans
    and unit test orchestration in the development environment.
  prefs: []
  type: TYPE_NORMAL
- en: Having specific standard methodologies and best practices applied among the
    different team members is essential to manage the efficiency and fast pace of
    the development cycle. The following discusses what **the Agile methodology of
    development** is and how it helps in DevOps operations, and the importance of
    automation in DevOps.
  prefs: []
  type: TYPE_NORMAL
- en: The Agile methodology of development
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Defining and accomplishing DevOps processes go hand in hand with adopting a
    development methodology that can fully support and leverage the power of DevOps.
    Although there are many ways to apply DevOps methodologies within your organization,
    the Agile methodology is the one best suited for DevOps.
  prefs: []
  type: TYPE_NORMAL
- en: The Agile development methodology breaks down the main requirements into small
    consumable changes – stories and epics. These small, consumable increments help
    the team achieve short wins throughout the journey of handling the project from
    start to end.
  prefs: []
  type: TYPE_NORMAL
- en: 'As shown in *Figure 8**.5*, the Agile team members meet periodically, typically
    every week or two, to plan, define, and agree on the epics and stories. These
    requirements are then put into a backlog and, until the next Agile team meeting,
    the team members work to deliver the requirements from that backlog:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.5: Sprint cycle in Agile development](img/B18934_08_5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.5: Sprint cycle in Agile development'
  prefs: []
  type: TYPE_NORMAL
- en: In Agile development, the weekly or biweekly recurring meetings are called **Sprint
    Planning Meetings**, and the time between these meetings when developers are working
    on the backlog is called a **sprint**.
  prefs: []
  type: TYPE_NORMAL
- en: In order for team members to check on the status of each defined epic and story,
    they usually meet daily to examine the sprint backlog and refine whatever needs
    to be refined to ensure timely delivery. This daily meeting is called a **Daily
    Scrum**.
  prefs: []
  type: TYPE_NORMAL
- en: The Agile team handles continuously evolving user stories and requirements within
    a sprint cycle.
  prefs: []
  type: TYPE_NORMAL
- en: 'In an endeavor to deliver a high-quality product at a fast pace and low cost,
    Agile teams apply the following principles:'
  prefs: []
  type: TYPE_NORMAL
- en: No blocking time for day-end activities, such as building and deploying the
    latest code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Immediate feedback on the code quality and functional quality of the latest
    code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Strong control, precision monitoring, and continuous improvement of the daily
    activities of the development team
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Faster decision-making for accepting new stories, releasing developed stories,
    and mitigating risks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A reduced feedback loop with the testers, end users, and customers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Regular review and introspection of the development and delivery processes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A development team abiding by the Agile manifesto and following all the Agile
    principles should always look for ways to remove unwanted roadblocks from their
    process model.
  prefs: []
  type: TYPE_NORMAL
- en: The Agile methodology of development can be applied to develop and deliver all
    types of software projects; however, it is more suited to the development of microservices-based
    applications. It is important to view the scope and structure of microservices
    to align them with Agile and DevOps practices.
  prefs: []
  type: TYPE_NORMAL
- en: One of the most important pillars of the Agile and DevOps process is the use
    of on-demand, needs-based resources. This is usually catered to by the use of
    a cloud-based infrastructure. All the resources required by the Agile teams developing
    microservices need to be provisioned promptly and in the right quantity or with
    enough capacity. Cloud infrastructure is best suited to these requirements. Resources
    can be scaled up and down based on need and demand.
  prefs: []
  type: TYPE_NORMAL
- en: On-demand cloud workloads needed during the DevOps cycles are not necessarily
    deployed on the organization’s private infrastructure; they may very well be deployed
    using a public cloud provider, or they may be deployed in a hybrid cloud fashion.
  prefs: []
  type: TYPE_NORMAL
- en: Automation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With the increase in the complexity of the IT infrastructure and MSA adoption
    and the demand for an Agile development cycle and short time-to-market, the need
    to streamline the infrastructure management processes becomes the most pressing
    need for any organization. A big part of managing an MSA’s infrastructure, DevOps,
    CI/CD, and Agile development is automation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Automation provides immense benefits to modern organizations. A few of these
    benefits include, but are not limited to, the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Better human resource utilization**: With automation in place, staff can
    focus on other activities that may not be automatable, hence optimizing the use
    of the organization’s workforce, scaling better on other projects, and distributing
    responsibilities according to the available and required skill sets.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Better time-to-market and better business agility**: An automated process
    can certainly save a lot of time that would be otherwise consumed by manual repetitive
    work and potential dependencies. A job that may traditionally take days can be
    done in minutes when automation is in place.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Higher reliability and greater business continuity**: Complex and time-consuming
    tasks are simplified into simple keystrokes or mouse clicks. Accordingly, human
    error is significantly minimized, and operational reliability is largely increased.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Better compliance**: Compliance can be built into automation tools, providing
    better policy enforcement with minimum effort. Compliance includes industry compliance,
    best practices, and organizational standards as well. Industry standards may include
    the **General Data Protection Regulation** (**GDPR**), **Payment Card Industry
    Data Security Standard** (**PCI DSS**), **Health Insurance Portability and Accountability
    Act** (**HIPAA**), and **Safeguard Computer Security Evaluation** **Matrix** (**SCSEM**).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automation is often used for the fast-paced and high-quality delivery of applications.
    DevOps is the key process that helps automate various phases of development and
    delivery. In fact, DevOps is the culture that helps organizations avoid repeated,
    time-consuming manual steps and efforts. There are various tools, frameworks,
    and processes within the ambit of DevOps that are needed for successful automation.
  prefs: []
  type: TYPE_NORMAL
- en: Most of the challenges within DevOps and MSA operations cannot be addressed
    manually – hence, the need for automation in DevOps and MSA is extremely high.
    Automation is needed in every area of delivery, from the time the microservice
    is developed to the time the microservice is deployed in the production environment.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.6: The four pillars of DevOps](img/B18934_08_6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.6: The four pillars of DevOps'
  prefs: []
  type: TYPE_NORMAL
- en: 'In essence, modern enterprise system development needs DevOps to be able to
    respond to the dynamic and constantly growing needs of organizations, and DevOps
    depends heavily on four pillars: **MSA**, **Agile Development**, **CI/CD**, and
    **Automation**. These four pillars, as shown in the preceding diagram, play a
    significant part in DevOps success, and hence, in the success of modern enterprise
    system development.'
  prefs: []
  type: TYPE_NORMAL
- en: Moreover, as we will discuss later in this chapter, AI applications are very
    hard to test and manage manually, and automation plays a big part in managing
    the entire DevOps cycle of AI applications.
  prefs: []
  type: TYPE_NORMAL
- en: Applying DevOps from the start to operations and maintenance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Every step of a microservices rollout requires a corresponding DevOps step.
    The confluence of the microservices development process with the DevOps process
    helps empower the Dev and Ops teams. The following is a detailed look at different
    facets of the DevOps process.
  prefs: []
  type: TYPE_NORMAL
- en: Source code version control
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Agile teams working on microservices require specific version control to
    be in place. Three aspects of version control need to be carefully defined for
    each microservice:'
  prefs: []
  type: TYPE_NORMAL
- en: The setup and management of version control tools, such as Git, SVN, CVS, and
    Mercurial.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The version format and nomenclature for the application, such as a format to
    indicate the application version, the major-change version, the minor-change version,
    and the build or patch number – for example, version 2.3.11.7.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The branching strategy for the source code. This is extremely important for
    microservices development with multiple teams working on separate microservices.
    Teams need to create separate repositories for each microservice and fork out
    different branches for each major or minor enhancement.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuration management and everything as a code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Configuration management is the practice of managing changes systematically
    across various environments so that the functional and technical performance of
    the system is at its best. This includes all the environments needed to develop,
    test, deploy, and run the MSA system components.
  prefs: []
  type: TYPE_NORMAL
- en: With so many moving parts in an MSA enterprise system, it is essential to identify
    which parts of the system need their configuration to be maintained and managed.
    Once these parts have been identified, their configuration will need to be controlled
    and regularly audited to maintain the overall health of the entire MSA system.
  prefs: []
  type: TYPE_NORMAL
- en: As the DevOps process matures, and as the MSA system components mature, things
    become very complex to manage and configure manually, and automation becomes critical
    for smooth and successful configuration management.
  prefs: []
  type: TYPE_NORMAL
- en: Configuration management tools can automatically and seamlessly manage the different
    aspects of the system components. These tools make adjustments as needed during
    runtime and whenever else, and in accordance with the version of the application,
    the type of change, and the system load.
  prefs: []
  type: TYPE_NORMAL
- en: One of the objectives of DevOps is to codify all the aspects of development
    as well as deployment, including the infrastructure and the configuration. The
    entire environment can be built from the ground up and quickly provisioned using
    **Infrastructure-as-a-Code** (**IaaC**) and **Configuration-as-a-Code** (**CaaC**).
  prefs: []
  type: TYPE_NORMAL
- en: IaaC and CaaC are essential components of configuration management. Both are
    descriptive files typically written in languages such as Ansible, Terraform, Puppet,
    Chef, or CloudFormation.
  prefs: []
  type: TYPE_NORMAL
- en: With IaaC and CaaC, DevOps teams can easily spin up new workloads for different
    purposes. Workloads can, for example, be configured for testing, specify the properties
    of each workload based on the test cases involved, and control deviations from
    the main workload parameters.
  prefs: []
  type: TYPE_NORMAL
- en: CI/CD
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As pointed out earlier in [*Chapter 1*](B18934_01.xhtml#_idTextAnchor014), CI/CD
    is an integral part of DevOps and plays the most important role in releasing MSA
    system updates. CI/CD ensures that the code is immediately and periodically built
    and pushed into the CI/CD pipeline for quick testing and feedback.
  prefs: []
  type: TYPE_NORMAL
- en: As shown in the following CI/CD pipeline diagram, developers focus primarily
    on working on the sprint backlog and push the code updates to the team repository,
    and it gets downloaded from there to the CI server.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.7: CI/CD pipeline and process flow](img/B18934_08_7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.7: CI/CD pipeline and process flow'
  prefs: []
  type: TYPE_NORMAL
- en: The CI server automatically runs preset test cases against the code and then
    pushes the code to the testers upon it passing all the test cases. Should any
    of the automated tests fail, the code doesn’t move further along the pipeline,
    and an error report of all the test failures is sent back to the developers.
  prefs: []
  type: TYPE_NORMAL
- en: In contrast to the traditional development cycle, in which developers may find
    out about their code test results days or weeks after their code has been submitted
    for testing, in CI/CD, developers will get a report of their code problems within
    minutes. This early visibility into code errors gives developers the chance to
    immediately work on fixing these errors while working on the original code. Hence,
    they can continuously enhance the code for release and deployment.
  prefs: []
  type: TYPE_NORMAL
- en: Upon the code successfully passing all CI server tests, the code is tested further
    by the DevOps team testers. Testers then either push the code to release and deployment
    if no errors are found or return it for further fixes and enhancements.
  prefs: []
  type: TYPE_NORMAL
- en: This CI/CD pipeline enables developers to make frequent code merges; do unit
    testing, integration testing, code scans, and smoke testing; release; and deploy
    multiple times every single day – something that is not remotely possible using
    a traditional development cycle.
  prefs: []
  type: TYPE_NORMAL
- en: The DevOps team needs to identify a tool that can manage the entire CI/CD pipeline.
    DevOps helps add hooks and steps to include external executables and scripts for
    performing additional activities during the code build and deployment. Some of
    the most common and widely used CI/CD tools include Jenkins, Bamboo, and CircleCI.
  prefs: []
  type: TYPE_NORMAL
- en: Code quality assurance
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ensuring high-quality code, both in terms of coding standards and security vulnerabilities,
    is another important activity within DevOps. This is in addition to ensuring the
    accuracy of the application’s business logic itself.
  prefs: []
  type: TYPE_NORMAL
- en: Code quality touches upon the concept of static and dynamic analysis of the
    code. Static analysis of the code is performed on the code itself before it gets
    executed. It is meant to uncover code smells, dirty code, vulnerable libraries,
    malicious openings in the code, and violations of code standards or best practices.
  prefs: []
  type: TYPE_NORMAL
- en: Dynamic code analysis is performed on the application during or after its execution.
    It is meant to uncover runtime errors due to the load, unexpected input, or unexpected
    runtime conditions in general.
  prefs: []
  type: TYPE_NORMAL
- en: Many tools that help perform code scans as part of CI/CD are available. These
    include, but are not limited to, SonarQube, Fortify SCA, and Raxis.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Testing AI applications is more challenging than testing regular applications.
    Certain aspects of AI applications do not exist in regular applications.
  prefs: []
  type: TYPE_NORMAL
- en: AI applications are non-deterministic – how they will behave in real situations
    is somewhat uncertain. Accordingly, expecting a specific outcome during AI application
    testing may not be viable. It may very well happen that the application being
    tested produces different outcomes with the same input or test criteria.
  prefs: []
  type: TYPE_NORMAL
- en: Most AI applications are as good as their training data quality, which makes
    AI applications subject to training data bias or unconscious bias. Imagine, for
    example, you are writing an AI module to predict home prices in any part of the
    United States, but your training data is 90% from a specific region within a specific
    state. Your AI model will accordingly be biased toward the area from which 90%
    of the training data came, so testing the AI application may require running tests
    against the training data itself. This may sound easy in this home price prediction
    case, but how would you make sense of other pieces of training data in more complex
    situations?
  prefs: []
  type: TYPE_NORMAL
- en: Let’s assume that we can accurately test AI/DL applications despite all the
    training data challenges and their non-deterministic behavior. AI/DL applications
    constantly learn, train, and change their behavior, so by the time the code is
    running in production, the application is already learning and changing its behavior.
    The tests that have been completed a day or a couple of days earlier may not be
    valid anymore.
  prefs: []
  type: TYPE_NORMAL
- en: There are, of course, ways to overcome all these challenges. First of all, you
    will need to curate and validate the training data. You may need to perform both
    automated and manual tasks to validate the training data, including checking for
    data biases, data skews, distribution levels, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: We will also need to test the AI algorithm and how the regression model performs
    against different sets of test data. The variance and mean square error of the
    model will also need to be examined and analyzed.
  prefs: []
  type: TYPE_NORMAL
- en: AI application testing tools are available on the market today and grow in number
    every day. The quality of these tools is constantly improving and can be a huge
    help to DevOps teams. AI testing tools are usually specialized based on the AI
    algorithms being used. Examples of different AI test tools include, but are not
    limited to, Applitools, Sauce Labs, and Testim.
  prefs: []
  type: TYPE_NORMAL
- en: Monitoring
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With the advent of DevOps, standard monitoring has upgraded to continuous monitoring
    and covers the entire development cycle, from planning to deployment and operations.
  prefs: []
  type: TYPE_NORMAL
- en: Monitoring covers different aspects of the DevOps process and the components
    needed for the entire application to be developed, tested, deployed, and released,
    as well as for post-release operations to ensue. This includes infrastructure
    monitoring and the application itself.
  prefs: []
  type: TYPE_NORMAL
- en: Infrastructure monitoring includes the on-premises infrastructure, virtual cloud
    environments, networks, communications, and security. Application monitoring,
    on the other hand, involves performance, scalability, availability, and reliability.
    Resource monitoring includes the management and distribution of resources across
    multiple pod replicas within and beyond the physical or virtual workloads.
  prefs: []
  type: TYPE_NORMAL
- en: DevOps monitoring helps team members respond to any operational issues that
    arise during the DevOps pre-release or post-release cycles, hence enabling the
    DevOps team to be able to rectify, readjust, and make any necessary changes during
    the CI/CD pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: Ideally, monitoring alerts trigger automatic actions to try to respond and fix
    a problem that has been detected. However, knowing that’s not always possible,
    manual intervention is usually needed. Monitoring helps the DevOps team shift
    left to earlier stages in the development cycle to enhance their test cases, and
    accordingly, increase the application quality and minimize operational problems
    later on in the development cycle.
  prefs: []
  type: TYPE_NORMAL
- en: AI algorithms, as discussed earlier in [*Chapter 7*](B18934_07.xhtml#_idTextAnchor079),
    and as we will give more examples of later in this book, can detect any application
    behavior anomalies and automatically try to self-heal to prevent application operations
    from being disrupted.
  prefs: []
  type: TYPE_NORMAL
- en: There are many environment-specific tools available for DevOps monitoring, including
    Nagios, Prometheus, Splunk, Dynatrace, and AWS CloudWatch for AWS cloud environments.
  prefs: []
  type: TYPE_NORMAL
- en: Disaster management
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Disaster management is an important yet often overlooked part of the DevOps
    process. In most cases, application recovery is seen as an extended part of the
    deployment process. In the cloud, it is generally considered to be an offshoot
    of configuring availability zones and regions for hosting an application instead
    of a full-fledged environment challenge.
  prefs: []
  type: TYPE_NORMAL
- en: In the case of microservices, identifying a disaster is a greater challenge
    than averting, mitigating, or managing it. Luckily, the CI/CD environment itself
    can be leveraged to test and simulate disaster scenarios. Moreover, the use of
    external repositories can be leveraged to recover code down to specific version
    numbers.
  prefs: []
  type: TYPE_NORMAL
- en: Nevertheless, setting up a completely separate set of environment replicas in
    different geographical locations, setting automatic failover, and load balancers
    in between can be great ways of maintaining business continuity and an uninterrupted
    CI/CD pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: Using IaaC and CaaC tools to automate recovery is extremely helpful in bringing
    your applications and systems back online in minimal time in case of interruption.
  prefs: []
  type: TYPE_NORMAL
- en: You still need to define an incident response playbook as part of your DevOps.
    This playbook should include a detailed plan of what should be executed in each
    scenario. For example, a response to a natural disaster is likely different from
    a response to a data breach incident. The playbook needs to have different scenarios
    and a list of roles and procedures that need to be taken to prevent or minimize
    system interruptions or data loss.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For MSA systems to achieve the goals for which they were created, a certain
    set of methodologies will need to go hand in hand with developing an MSA system.
    In this chapter, we discussed a few of the most critical practices to embrace
    when developing an MSA system: the Agile methodology of development, DevOps processes
    and practices, and CI/CD pipeline management.'
  prefs: []
  type: TYPE_NORMAL
- en: We also discussed how important it is to set up a DevOps team for managing microservices.
    We have given examples of tools to use to apply and manage DevOps when building
    our MSA system.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will take our first step in building an intelligent
    MSA system. We will talk about Docker, what it is, and why it’s relevant. We will
    also create isolated and independent virtual environments using Docker and then
    link these environments (or containers) together to deliver a simple functional
    part of our MSA system.
  prefs: []
  type: TYPE_NORMAL
