- en: Libraries, Development Platform, and Datasets
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 库、开发平台和数据集
- en: In this chapter, we will be setting up a development environment to help run
    codes for the book as well as for generic development and also introduce various
    datasets for computer vision. Since there are several standard libraries which
    are used both for studying computer vision and in the industry for deployment,
    it becomes trivial to also use them in learning path. As we study the various
    sub-topics of computer vision in further chapters, we will be able to directly
    implement the codes introduced then rather than getting stuck in installations
    and other library dependencies.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将设置一个开发环境，以帮助运行本书中的代码以及通用开发，并介绍各种计算机视觉数据集。由于有几个标准库既用于研究计算机视觉，也用于工业部署，因此在学习路径中使用它们也变得非常简单。随着我们在后续章节中研究计算机视觉的各个子主题，我们将能够直接实现当时引入的代码，而不是陷入安装和其他库依赖项的困境。
- en: 'This chapter is divided into two major sections:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章分为两个主要部分：
- en: Firstly we will be setting up python based environment such Anaconda
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，我们将设置基于 Python 的环境，例如 Anaconda
- en: We will then setup OpenCV and various forms of its installations
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将设置 OpenCV 及其各种安装形式
- en: For deep learning, we will also setup Keras and TensorFlow
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于深度学习，我们还将设置 Keras 和 TensorFlow
- en: Libraries and installation
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 库和安装
- en: 'Before we begin, it is required that we install each library. There are two
    major methods of installing a library:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始之前，我们需要安装每个库。安装库有两种主要方法：
- en: We download the source code and build binaries by compiling the code
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们通过编译代码来下载源代码并构建二进制文件
- en: We can directly download binaries and put them in relevant directories
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以直接下载二进制文件并将它们放入相关目录
- en: While downloading pre-built binaries is a faster method, however, due to the
    difference of platforms or non-availability of binaries may force to build a library
    from source. If readers are using different OS then the mentioned in the following
    sections, they might come across such a situation. Once installed a library, it
    can be used with programs or other libraries.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然下载预构建的二进制文件是一种更快的方法，然而，由于平台差异或二进制文件的不可用，可能需要从源代码构建库。如果读者使用的是以下章节中提到的不同操作系统，他们可能会遇到这种情况。一旦安装了库，就可以在程序或其他库中使用它。
- en: Since it is crucial to have libraries that are not affected by other installations, we
    will be using Python-based environments in most of the book. This helps in keeping
    track of libraries installed and also separates different environment if we would
    like to have multiple. Here environment refers to installed libraries with particular
    versions and their dependencies.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 由于需要确保库不受其他安装的影响，本书的大部分内容中我们将使用基于 Python 的环境。这有助于跟踪已安装的库，并在需要时分离不同的环境。这里的“环境”指的是具有特定版本及其依赖关系的已安装库。
- en: For building a library from source, we will use `CMake` tool. The instructions
    to install are as shown in further sections. This helps in building cross-platform
    software by linking to relevant compilers on each platform as well as to their
    dependencies. This comes with GUI too but for convenience, we will be using command-line
    `cmake`.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 对于从源代码构建库，我们将使用 `CMake` 工具。安装说明将在后续章节中展示。这有助于通过在每个平台上链接到相关的编译器以及它们的依赖项来构建跨平台软件。它还带有
    GUI，但为了方便，我们将使用命令行 `cmake`。
- en: For deep learning, which we will see later in this book, a GPU is highly recommended.
    To run our programs using GPUs, we need to install both CUDA and cuDNN binaries
    provided by Nvidia. Further details of installation for each of the platforms,
    such as Linux, Mac OS, or Windows, are available from Nvidia.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 对于深度学习，我们将在本书的后续章节中看到，强烈建议使用 GPU。要使用 GPU 运行我们的程序，我们需要安装 Nvidia 提供的 CUDA 和 cuDNN
    二进制文件。有关每个平台（如 Linux、Mac OS 或 Windows）的安装详细说明，可以从 Nvidia 获取。
- en: Let's begin by installing the required packages in order.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先按顺序安装所需的软件包。
- en: Installing Anaconda
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 Anaconda
- en: 'The first thing we need to do is set up our Python environment such that rest
    of the libraries will be easily accessible through Python. Anaconda is a popular
    data science platform with a Python interface and is available here: [https://www.anaconda.com/](https://www.anaconda.com/).
    It has `conda` as a package manager, which can install, delete, and manage versions
    of Python libraries while keeping it isolated from other Python environments.
    In this book, we will use `conda` from Anaconda. Let''s go ahead and set this
    up.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要做的第一件事是设置我们的Python环境，以便其他库可以通过Python轻松访问。Anaconda是一个流行的数据科学平台，具有Python接口，可在以下网址找到：[https://www.anaconda.com/](https://www.anaconda.com/)。它包含`conda`作为包管理器，可以安装、删除和管理Python库的版本，同时将其与其他Python环境隔离开来。在这本书中，我们将使用Anaconda中的`conda`。让我们继续设置它。
- en: 'First, download and install Anaconda:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，下载并安装Anaconda：
- en: 'On Linux:'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Linux上：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'On macOS, `wget` is not directly available; use brew to install `wget`:'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在macOS上，`wget`不可直接使用；使用brew安装`wget`：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This will install the Python libraries in the folder `$HOME/anaconda3`, since
    we are using Python 3\. A Python 2 version is also available and the installation
    process is similar. To use Anaconda, the newly installed libraries need to be
    added in `$PATH`, this can be done every time a new shell is launched by running:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在`$HOME/anaconda3`文件夹中安装Python库，因为我们正在使用Python 3。Python 2版本也可用，安装过程类似。要使用Anaconda，新安装的库需要添加到`$PATH`中，这可以通过每次启动新shell时运行以下命令来完成：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '`$PATH_TO_ANACONDA3` is the location path to the `Anaconda3` folder. For more
    convenience, add this to `.bashrc` or `.bash_profile` depending on if you are
    using Linux or macOS respectively.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`$PATH_TO_ANACONDA3`是`Anaconda3`文件夹的位置路径。为了方便，根据您是否使用Linux或macOS，将其添加到`.bashrc`或`.bash_profile`中。'
- en: 'Once conda is installed, many other scientific packages will also be installed.
    Some of these packages are:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦安装了conda，许多其他科学包也将被安装。其中一些包包括：
- en: NumPy
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: NumPy
- en: 'NumPy package is used for performing operations on images as N-dimensional
    arrays. An example to create and transpose a two-dimensional array is as follows:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy包用于在N维数组上执行图像操作。创建和转置二维数组的示例如下：
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Matplotlib
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Matplotlib
- en: 'This is a popular Python package for plotting and displaying data and images.
    To use in Python, the scripts is as follows:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个流行的Python包，用于绘图和显示数据和图像。在Python中使用，脚本如下：
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'If we want to plot inside Jupyter notebook, add the following command:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想在Jupyter笔记本中绘图，请添加以下命令：
- en: '[PRE5]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'An example function to display an image is as follows:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 一个显示图像的示例函数如下：
- en: '[PRE6]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: SciPy
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SciPy
- en: This is a Python based scientific computing library and contains several advanced
    algorithms for optimization, linear algebra, signal processing, statistics, and
    so on.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个基于Python的科学计算库，包含用于优化、线性代数、信号处理、统计学等的高级算法。
- en: 'An example to compute eigen values and eigen vectors of a two-dimensional array
    is as follows:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 计算二维数组特征值和特征向量的示例如下：
- en: '[PRE7]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Jupyter notebook
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Jupyter笔记本
- en: Jupyter notebook is popularly used for creating step by step live codes with
    visualizations and texts. In [Chapter 3](prac-cv_ch03.html), *Image Filtering
    and Transformations in OpenCV* and [Chapter 4](prac-cv_ch04.html), *What is a
    Feature?, *the codes for image filtering and feature extraction can be used with
    Jupyter notebook.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: Jupyter笔记本广泛用于创建带有可视化和文本的逐步实时代码。在[第3章](prac-cv_ch03.html)的*OpenCV中的图像滤波和变换*和[第4章](prac-cv_ch04.html)的*什么是特征？*中，可以使用Jupyter笔记本来使用图像滤波和特征提取的代码。
- en: 'To launch a notebook server, run the following in shell:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动笔记本服务器，请在shell中运行以下命令：
- en: '[PRE8]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This will start the browser and we can see the files inside the folder from
    where it is launched. After launching, click on New on top left side on the browser
    page and select the notebook with desired Python. A new tab in the browser will
    open with Python interpreter format.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这将启动浏览器，我们可以看到启动文件夹中的文件。启动后，在浏览器页面的左上角点击“新建”，选择所需的Python笔记本。浏览器中会打开一个新的标签页，带有Python解释器格式。
- en: Other packages such as scikit-learn, pandas, seaborn, and so on.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 其他包，如scikit-learn、pandas、seaborn等。
- en: Installing OpenCV
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装OpenCV
- en: OpenCV (available at [https://opencv.org/](https://opencv.org/) ) is the most
    popular computer vision open source library and can be installed on all major
    platforms including Linux, macOS, Windows, Android, iOS, and so on. It contains
    optimized code written in C++ and has binding for Python and Java. Considering
    the versatility of OpenCV, we will be using it to explain computer vision algorithms.
    Most of the code in this book is in Python, except for external repositories.
    OpenCV can be set up in two ways depending on how we will use it. We will begin
    with the easy way.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: OpenCV（可在[https://opencv.org/](https://opencv.org/) 获取）是最受欢迎的计算机视觉开源库，可以在包括Linux、macOS、Windows、Android、iOS等所有主要平台上安装。它包含用C++编写的优化代码，并为Python和Java提供绑定。考虑到OpenCV的通用性，我们将使用它来解释计算机视觉算法。本书中的大部分代码都是Python编写的，除了外部仓库。根据我们将如何使用OpenCV，它可以以两种方式设置。我们将从简单的方法开始。
- en: OpenCV Anaconda installation
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: OpenCV Anaconda安装
- en: 'Using Anaconda, which we installed in the previous section, OpenCV can be installed
    on both Linux and macOS as follows (this is OpenCV with only the Python library):'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 使用我们在上一节中安装的Anaconda，OpenCV可以在Linux和macOS上安装，如下所示（这是仅包含Python库的OpenCV）：
- en: '[PRE9]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: OpenCV build from source
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从源代码构建OpenCV
- en: 'Building OpenCV from source is quite a long process, depending on the hardware
    you are using:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 根据您使用的硬件，从源代码构建OpenCV是一个相当长的过程：
- en: 'Requirements on Linux (here Ubuntu):'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Linux（此处为Ubuntu）上的要求：
- en: '[PRE10]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Requirements on macOS:'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: macOS上的要求：
- en: Install CMake from [http://www.cmake.org/download/ ](http://www.cmake.org/download/)
  id: totrans-56
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从[http://www.cmake.org/download/](http://www.cmake.org/download/) 安装CMake
- en: The following is an install script; copy the following snippet to install the `install.sh`
    file, and run `bash install.sh`to install OpenCV.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个安装脚本；将以下片段复制到安装`install.sh`文件，然后运行`bash install.sh`以安装OpenCV。
- en: 'In the following code, replace `$PATH_TO_ANACONDA` with the absolute path to
    Anaconda, such as `/Users/mac`:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下代码中，将`$PATH_TO_ANACONDA`替换为Anaconda的绝对路径，例如`/Users/mac`：
- en: '[PRE11]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Since there are significant changes between OpenCV2 and OpenCV3, the code in
    this book is written using only OpenCV3.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 由于OpenCV2和OpenCV3之间存在重大变化，本书中的代码仅使用OpenCV3编写。
- en: 'In `OpenCV`, extra contributed modules are moved to a separate repository under
    the name `opencv_contrib`. In order to build `OpenCV` including with `opencv_contrib`
    , the steps are as follows:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在`OpenCV`中，额外贡献的模块被移动到名为`opencv_contrib`的单独仓库下。为了构建包含`opencv_contrib`的`OpenCV`，步骤如下：
- en: 'Download OpenCV as :'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以下是如何下载OpenCV：
- en: '[PRE12]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Download the extra module here, and note the path to this folder:'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在此处下载额外的模块，并注意此文件夹的路径：
- en: '[PRE13]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Build a complete OpenCV again, as follows, where `PATH_TO_CONTRIB` is the path
    to the previously downloaded `opencv_contrib` path:'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按如下方式重新构建完整的OpenCV，其中`PATH_TO_CONTRIB`是之前下载的`opencv_contrib`路径：
- en: '[PRE14]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Here, we see that there are several options which are set on or off. The choice
    of these operations depends on the availability of the dependencies. These can
    be set to on if all of the dependencies are available.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到有几个选项是开启或关闭的。这些操作的选择取决于依赖项的可用性。如果所有依赖项都可用，则可以将其设置为开启。
- en: Opencv FAQs
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: OpenCV常见问题解答
- en: Though we saw an introductory OpenCV programs in previous chapter, we will see
    some more frequently used code snippets that will be used throughout this book.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们在上一章中看到了OpenCV的入门级程序，但我们将看到一些更常用的代码片段，这些代码片段将贯穿本书。
- en: 'Let''s begin with importing OpenCV and will print the version of OpenCV used:'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 让我们从导入OpenCV并打印使用的OpenCV版本开始：
- en: '[PRE15]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'We can read an image from a file as:'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以从文件中读取图像如下：
- en: '[PRE16]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The previous snippet will decode an image stored in common formats such as `.jpg`,
     `.png` , `.jpeg` , `.tiff` , `.pgm`, and so on. using image codecs either installed
    with OpenCV or available on the platform. If there are no codecs available, then
    OpenCV will not be able to read image or write image to a file. So, it is necessary
    for the user to install codecs on a non-supported platforms such as embedded devices.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段将解码存储在常见格式中的图像，如`.jpg`、`.png`、`.jpeg`、`.tiff`、`.pgm`等，使用与OpenCV一起安装或平台上可用的图像编解码器。如果没有编解码器可用，则OpenCV将无法读取图像或将其写入文件。因此，对于非支持平台（如嵌入式设备）的用户来说，安装编解码器是必要的。
- en: 'We can write an image to file as:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将图像写入文件如下：
- en: '[PRE17]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: In writing a file also there is need for image codecs which are generally installed
    with OpenCV. We can write the image with file formats such as JPG, PNG, JPEG,
    TIFF, and so on.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在写入文件时，也需要图像编解码器，这些编解码器通常与OpenCV一起安装。我们可以使用JPG、PNG、JPEG、TIFF等文件格式写入图像。
- en: 'Processing a video includes opening a video file and applying algorithms on
    each frame. We will first initialize the source of frames which can be a video
    file or an attached USB camera as:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 处理视频包括打开视频文件并在每个帧上应用算法。我们首先初始化帧的来源，可以是视频文件或连接的USB摄像头，如下所示：
- en: '[PRE18]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Or we can also write it as follows:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 或者我们也可以这样写：
- en: '[PRE19]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Similar to image reading and writing, video reading will also require codecs
    which are installed with OpenCV or available from the OS. Once the source is setup
    we can continue processing each frame as:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 与图像读取和写入类似，视频读取也需要编解码器，这些编解码器与OpenCV一起安装或从操作系统提供。一旦设置好来源，我们就可以继续处理每个帧，如下所示：
- en: '[PRE20]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Here `cv2.imshow` is to display image and `cv2.waitKey()` is time delay in the
    execution.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`cv2.imshow`用于显示图像，而`cv2.waitKey()`是执行中的时间延迟。
- en: TensorFlow for deep learning
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TensorFlow 深度学习
- en: TensorFlow is one of the popular deep learning libraries available and has APIs
    for Python, C++, Java, and so on. In this book, we will use the Python API 1.4.0\.
    Explaining TensorFlow in detail is beyond the scope of this book; the official
    documentation is a better starting place to get acquainted with it.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: TensorFlow是可用的流行深度学习库之一，并为Python、C++、Java等提供了API。在这本书中，我们将使用1.4.0版本的Python API。详细解释TensorFlow超出了本书的范围；官方文档是了解它的更好起点。
- en: 'In order to install, we will use the `pip` based method, as follows:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 为了安装，我们将使用基于`pip`的方法，如下所示：
- en: '[PRE21]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'If there is GPU available with CUDA and cuDNN:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有带有CUDA和cuDNN的GPU可用：
- en: '[PRE22]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'For more information on TensorFlow and its use, please follow the tutorials
    here:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 关于TensorFlow及其使用的更多信息，请参考以下教程：
- en: '[https://www.tensorflow.org/get_started/get_started](https://www.tensorflow.org/get_started/get_started).'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.tensorflow.org/get_started/get_started](https://www.tensorflow.org/get_started/get_started).'
- en: 'Once installed, TensorFlow version can be checked by running:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，可以通过运行以下命令来检查TensorFlow版本：
- en: '[PRE23]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Keras for deep learning
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Keras 深度学习
- en: 'Keras is a Python based API that uses TensorFlow, CNTK, or Theano as backend
    for deep learning. Due to its high level API and simplified abstraction, it has
    been quite popular in the deep learning community. We will be using this library
    to study CNNs. To install this, first install TensorFlow as described in previous
    section, and use the following:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: Keras是一个基于Python的API，它使用TensorFlow、CNTK或Theano作为深度学习后端。由于其高级API和简化的抽象，它在深度学习社区中相当受欢迎。我们将使用这个库来研究卷积神经网络。为了安装它，首先按照前面章节的说明安装TensorFlow，然后使用以下命令：
- en: '[PRE24]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'There is no separate version for GPU. For installing specific versions of Keras,
    such as Version 2.1.2, use following:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 没有针对GPU的单独版本。为了安装特定版本的Keras，例如2.1.2版本，请使用以下命令：
- en: '[PRE25]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The latest version of Keras at the time of writing this book is 2.1.2\. To
    check the version of installed Keras, use:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 写这本书时Keras的最新版本是2.1.2。要检查已安装Keras的版本，请使用以下命令：
- en: '[PRE26]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: If TensorFlow is installed from previous sections, it will use it as backend.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 如果TensorFlow是从前面的部分安装的，它将使用它作为后端。
- en: To use Keras, one of the prerequisites is basic knowledge of deep learning.
    In this book, we will see it in [Chapter 5](prac-cv_ch05.html), *Convolutional
    Neural Networks*.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用Keras，先决条件之一是具备基本的深度学习知识。在这本书中，我们将在[第5章](prac-cv_ch05.html)中看到它，*卷积神经网络*。
- en: Datasets
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据集
- en: In computer vision, datasets play a key role in developing efficient applications.
    Also, now, with the availability of large open source datasets, it has become
    much easier to create best performing models for computer vision tasks. In this
    section, we will see several datasets for computer vision.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在计算机视觉中，数据集在开发高效应用程序中起着关键作用。现在，随着大型开源数据集的可用性，创建计算机视觉任务的最高性能模型变得容易得多。在本节中，我们将看到几个计算机视觉数据集。
- en: ImageNet
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ImageNet
- en: ImageNet is one of the largest annotated datasets for computer vision. The data
    is arranged according to a hierarchical order. There are 1,000 classes with 1.4
    million images overall. Though the images are for non-commercial use, ImageNet
    is still one of the most popular datasets when it comes to learning computer vision.
    Especially in deep learning, the dataset is used to create image classification
    models due to availability of large number of varied images.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: ImageNet是计算机视觉中最大的标注数据集之一。数据按照层次顺序排列。总共有1,000个类别，1,400万张图像。尽管这些图像仅供非商业使用，但ImageNet仍然是学习计算机视觉中最受欢迎的数据集之一。特别是在深度学习中，由于存在大量不同类型的图像，该数据集被用于创建图像分类模型。
- en: 'The following website provides links and resources to download image URLs or
    other attributes about images:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 以下网站提供了下载图像URL或其他图像属性的链接和资源：
- en: '[http://image-net.org/download](http://image-net.org/download)'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '[ImageNet下载](http://image-net.org/download)'
- en: In this book, ImageNet is not used explicitly, but we will be using a pre-trained
    model on it. There is no requirement to download this dataset for this book.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在这本书中，ImageNet没有被明确使用，但我们将使用其上的预训练模型。对于这本书，没有要求下载此数据集。
- en: MNIST
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MNIST
- en: '`MNIST` is a dataset for handwritten digits with the numbers 0-9 with 60,000
    images of size 28 x 28 as the training set and 10,000 images of size 28 x 28 as
    the test set. This has become the go to dataset for starting machine learning
    or deep learning. It is provided in most of the frameworks and there is no need
    to download it separately. In `Keras`, this can be used as follows:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '`MNIST`是一个包含0-9数字的手写数字数据集，有60,000个28 x 28大小的训练图像和10,000个28 x 28大小的测试图像。这已成为开始机器学习或深度学习的首选数据集。它被大多数框架提供，无需单独下载。在`Keras`中可以这样使用：'
- en: '[PRE27]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Some of the sample images from this dataset are as shown in the following figure:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 此数据集的一些样本图像如图所示：
- en: '![](img/523e4aa9-ab14-4cc0-ba57-32a23a0f0c80.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/523e4aa9-ab14-4cc0-ba57-32a23a0f0c80.png)'
- en: CIFAR-10
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CIFAR-10
- en: 'Though `MNIST` is one of the easiest datasets to get started, the lack of color
    images makes it less appealing for tasks that require a colored dataset. A slight
    more complex dataset is `CIFAR-10` by Alex and others[1], which consists of 10
    categories of images with 60,000 training images and 10,000 test images, uniformly
    from each category. The size of each image is 32 x 32 and each has three color
    channels. This dataset can also be easily loaded in Keras, as follows:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然`MNIST`是最容易开始的数据集之一，但由于缺乏彩色图像，它对于需要彩色数据集的任务吸引力较小。一个稍微复杂一些的数据集是Alex和其他人编写的`CIFAR-10`，它由10个类别的图像组成，包括60,000个训练图像和10,000个测试图像，每个类别均匀分布。每个图像的大小为32
    x 32，每个图像都有三个颜色通道。此数据集也可以很容易地在Keras中加载，如下所示：
- en: '[PRE28]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: The labels, in order, are: `airplane`, `automobile`, `bird`, `cat`, `deer`,
    `dog`, `frog`, `horse`, `ship`, and `truck`.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 标签依次为：`飞机`、`汽车`、`鸟`、`猫`、`鹿`、`狗`、`青蛙`、`马`、`船`和`卡车`。
- en: Pascal VOC
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Pascal VOC
- en: As previous datasets like `MNIST` and `CIFAR` are limited in representation,
    we cannot use them for tasks like people detection or segmentation. Pascal VOC[4]
    has gained in popularity for such tasks as one of the major datasets for object
    recognition. During 2005-2012, there were competitions conducted that used this
    dataset and achieved the best possible accuracy on test data. The dataset is also
    usually referred to by year; for example, VOC2012 refers to the dataset available
    for the 2012 competition. In VOC2012, there are three competition categories.
    The first is the classification and detection dataset, which has 20 categories
    of objects along with rectangular region annotations around the objects. The second
    category is Segmentation with instance boundaries around objects. The third competition
    category is for action recognition from images.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 由于像`MNIST`和`CIFAR`这样的数据集在表示上有限，我们不能使用它们进行如人体检测或分割等任务。Pascal VOC[4]因其作为物体识别的主要数据集之一而受到欢迎。在2005-2012年期间，有比赛使用了这个数据集，并在测试数据上实现了最佳可能的准确率。该数据集通常也按年份命名；例如，VOC2012指的是可用于2012年比赛的那些数据集。在VOC2012中，有三个比赛类别。第一个是分类和检测数据集，它包含20个类别的物体以及物体周围的矩形区域标注。第二个类别是带有物体周围实例边界的分割。第三个比赛类别是图像动作识别。
- en: 'This dataset can be downloaded from the following link:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从以下链接下载此数据集：
- en: '[http://host.robots.ox.ac.uk/pascal/VOC/voc2012/index.html](http://host.robots.ox.ac.uk/pascal/VOC/voc2012/index.html).'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '[VOC2012数据集](http://host.robots.ox.ac.uk/pascal/VOC/voc2012/index.html).'
- en: 'In this dataset, a sample annotation file (in XML format) for an image is in
    the following code, where the tags represent properties of that field:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个数据集中，一个图像的样本标注文件（XML格式）如下所示，其中标签代表该字段的属性：
- en: '[PRE29]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The corresponding image is as shown in the following figure:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 对应的图像如图所示：
- en: '![](img/ac8e0f1a-4309-4168-9600-e7ca110d227c.jpg)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/ac8e0f1a-4309-4168-9600-e7ca110d227c.jpg)'
- en: The available categories in this dataset are aeroplane, bicycle, boat, bottle,
    bus, car, cat, chair, cow, dining table, dog, horse, motorbike, person, potted
    plant, sheep, train, and TV.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 此数据集中可用的类别包括：飞机、自行车、船只、瓶子、公共汽车、汽车、猫、椅子、牛、餐桌、狗、马、摩托车、人、盆栽植物、羊、火车和电视。
- en: The number of categories is, however, limited. In the next section, we will
    see a more elaborate dataset with 80 categories. Having a higher number of generic
    object categories will help in creating applications that can be used easily in
    more generic scenarios.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，类别的数量是有限的。在下一节中，我们将看到一个具有80个类别的更详细的数据集。拥有更多的通用物体类别将有助于创建可以在更通用场景中轻松使用的应用程序。
- en: MSCOCO
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MSCOCO
- en: COCO[2] refers to a common object in context and is a dataset for object recognition,
    with 80 categories and 330K images. After Pascal VOC'12, this became a popular
    benchmark for training and evaluating the system. The dataset can be downloaded
    from [http://cocodataset.org/#download](http://cocodataset.org/#download).
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: COCO[2]指的是上下文中的常见物体，是一个包含80个类别和33万张图片的目标识别数据集。在Pascal VOC'12之后，这成为了一个流行的训练和评估系统的基准。数据集可以从 [http://cocodataset.org/#download](http://cocodataset.org/#download) 下载。
- en: 'In order to read the data and use it for applications, there is an API available
    at [https://github.com/cocodataset/cocoapi](https://github.com/cocodataset/cocoapi)
    which needs to be downloaded.  To get started, we can use the API provided, as
    follows:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 为了读取数据并将其用于应用，有一个API可以在 [https://github.com/cocodataset/cocoapi](https://github.com/cocodataset/cocoapi)
    上找到，需要下载。要开始，我们可以使用提供的API，如下所示：
- en: '[PRE30]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: This will install the Python API to read the `coco` dataset.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 这将安装用于读取`coco`数据集的Python API。
- en: Many models available online for object detection or image segmentation are
    first trained on this dataset. If we have specific data that has different object
    categories than in the MSCOCO dataset, a more common approach that we will see
    in [Chapter 5](prac-cv_ch05.html), *Convolution Neural Networks* and in [Chapter
    6](prac-cv_ch06.html), *Feature- Based Object Detection*, is to first train a
    model on an MSCOCO dataset and use a part of the trained model and re-train on
    a new dataset.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 许多在线可用的目标检测或图像分割模型最初是在这个数据集上训练的。如果我们有与MSCOCO数据集不同的特定数据，一个更常见的方法，我们将在第5章[prac-cv_ch05.html]，*卷积神经网络*和第6章[prac-cv_ch06.html]，*基于特征的物体检测*中看到，是首先在一个MSCOCO数据集上训练一个模型，然后使用训练好的模型的一部分并在新的数据集上重新训练。
- en: TUM RGB-D dataset
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TUM RGB-D数据集
- en: While previous datasets were used for object recognition, this dataset is used
    to understand the geometry of a scene. The RGB-D dataset[3] has been popular in
    SLAM research and was a benchmark for comparison too. Here, RGB-D refers to a
    dataset with both **RGB** (color) images and **Depth** images. The depth here
    refers to distance of pixel from camera and are taken using a depth camera. Since
    there is also depth information available, this dataset can also be used to evaluate
    depth based SLAM algorithms and three-dimensional reconstructions from RGB image
    and its corresponding depth image.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然之前的数据集用于物体识别，但这个数据集用于理解场景的几何形状。RGB-D数据集[3]在SLAM研究中很受欢迎，也是一个比较的基准。在这里，RGB-D指的是包含**RGB**（彩色）图像和**深度**图像的数据集。这里的深度指的是像素与摄像机的距离，使用深度相机获取。由于也提供了深度信息，这个数据集也可以用于评估基于深度的SLAM算法和从RGB图像及其相应的深度图像中重建的三维结构。
- en: To download this dataset, visit [https://vision.in.tum.de/data/datasets/rgbd-dataset/download](https://vision.in.tum.de/data/datasets/rgbd-dataset/download) and
    choose the type of sequence to use.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 要下载此数据集，请访问 [https://vision.in.tum.de/data/datasets/rgbd-dataset/download](https://vision.in.tum.de/data/datasets/rgbd-dataset/download) 并选择要使用的序列类型。
- en: Summary
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned how to install the different library files of Python,
    Keras, and TensorFlow. In order to use several code snippets in further chapters,
    these libraries will be sufficient. We also had a look at different datasets like
    ImageNet, `MNIST`, `CIFAR-10`, MSCOCO and TUM RGBD datasets. These datasets are
    the backbone for computer vision applications since the ability of several software
    that we develop directly depends on the availability of these datasets.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何安装Python、Keras和TensorFlow的不同库文件。为了在后续章节中使用几个代码片段，这些库将足够使用。我们还查看了一些不同的数据集，如ImageNet、`MNIST`、`CIFAR-10`、MSCOCO和TUM
    RGBD数据集。这些数据集是计算机视觉应用的基础，因为我们开发的几个软件的能力直接取决于这些数据集的可用性。
- en: In next chapter, we will begin with more in-depth image analysis by introducing
    different types of filters and also learn transformations on image such as translation,
    rotation or affine.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将通过介绍不同类型的过滤器来开始更深入地分析图像，并学习图像的变换，如平移、旋转或仿射变换。
- en: References
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考文献
- en: Krizhevsky, Alex, and Geoffrey Hinton. *Learning multiple layers of features
    from tiny images*. (2009).
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 克里泽夫斯基，亚历克斯，和杰弗里·辛顿。*从微小图像中学习多层特征*。（2009年）。
- en: 'Lin, Tsung-Yi, Michael Maire, Serge Belongie, James Hays, Pietro Perona, Deva
    Ramanan, Piotr Dollár, and C. Lawrence Zitnick. *Microsoft coco: Common objects
    in context*. In European conference on computer vision, pp. 740-755\. Springer,
    Cham, 2014.'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Lin, Tsung-Yi, Michael Maire, Serge Belongie, James Hays, Pietro Perona, Deva
    Ramanan, Piotr Dollár, and C. Lawrence Zitnick. *Microsoft COCO: Common Objects
    in Context*. In European Conference on Computer Vision, pp. 740-755. Springer,
    Cham, 2014.'
- en: Sturm, Jürgen, Nikolas Engelhard, Felix Endres, Wolfram Burgard, and Daniel
    Cremers. *A benchmark for the evaluation of RGB-D SLAM systems*. In Intelligent
    Robots and Systems (IROS), 2012 IEEE/RSJ International Conference on, pp. 573-580\.
    IEEE, 2012.
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Sturm, Jürgen, Nikolas Engelhard, Felix Endres, Wolfram Burgard, and Daniel
    Cremers. *A Benchmark for the Evaluation of RGB-D SLAM Systems*. In Intelligent
    Robots and Systems (IROS), 2012 IEEE/RSJ International Conference on, pp. 573-580.
    IEEE, 2012.
- en: 'Everingham Mark, Luc Van Gool, Christopher KI Williams, John Winn, and Andrew
    Zisserman. *The pascal visual object classes (voc) challenge*. International journal
    of computer vision 88, no. 2 (2010): 303-338.'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Everingham Mark, Luc Van Gool, Christopher KI Williams, John Winn, and Andrew
    Zisserman. *The Pascal Visual Object Classes (VOC) Challenge*. International Journal
    of Computer Vision 88, no. 2 (2010): 303-338.'
