["```py\nimport findspark\nfindspark.init()\nfrom pyspark import SparkContext, SparkConf\nfrom pyspark.sql import SQLContext\nfrom pyspark.ml.feature import VectorAssembler\nfrom pyspark.ml.classification import MultilayerPerceptronClassifier\nfrom pyspark.ml.evaluation import MulticlassClassificationEvaluator\n```", "```py\nletter_recognition_df = sqlContext.read\n   .format('com.databricks.spark.csv')\n   .options(header = 'true', inferschema = 'true')\n   .load('letter-recognition.csv')\nfeature_columns = ['x-box','y-box','width','high','onpix','x-bar',\n   'y-bar','x2bar','y2bar','xybar','x2ybr','xy2br','x-ege','xegvy',\n   'y-ege','yegvx']\nvector_assembler = VectorAssembler(inputCols = feature_columns,\n   outputCol = 'features')\nvectorised_df = vector_assembler.transform(letter_recognition_df)\n   .withColumnRenamed('lettr', 'label').select('label', 'features')\n```", "```py\ntrain_df, test_df = vectorised_df\n   .randomSplit([0.75, 0.25], seed=12345)\n```", "```py\nlayers = [16, 8, 4, 26]\n```", "```py\nmultilayer_perceptron_classifier = MultilayerPerceptronClassifier(\n   maxIter = 100, layers = layers, blockSize = 128, seed = 1234)\nmultilayer_perceptron_classifier_model = \n   multilayer_perceptron_classifier.fit(train_df)\n```", "```py\ntest_predictions_df = multilayer_perceptron_classifier_model\n   .transform(test_df)\nprint(\"TEST DATASET PREDICTIONS AGAINST ACTUAL LABEL: \")\ntest_predictions_df.select(\"label\", \"features\", \"probability\",\n   \"prediction\").show()\n\nTEST DATASET PREDICTIONS AGAINST ACTUAL LABEL: \n+-----+--------------------+--------------------+----------+\n|label| features| probability|prediction|\n+-----+--------------------+--------------------+----------+\n| 0|[1.0,0.0,2.0,0.0,...|[0.62605849526384...| 0.0|\n| 0|[1.0,0.0,2.0,0.0,...|[0.62875656935176...| 0.0|\n| 0|[1.0,0.0,2.0,0.0,...|[0.62875656935176...| 0.0|\n+-----+--------------------+--------------------+----------+\n```", "```py\nprediction_and_labels = test_predictions_df\n   .select(\"prediction\", \"label\")\naccuracy_evaluator = MulticlassClassificationEvaluator(\n   metricName = \"accuracy\")\nprecision_evaluator = MulticlassClassificationEvaluator(\n   metricName = \"weightedPrecision\")\nrecall_evaluator = MulticlassClassificationEvaluator(\n   metricName = \"weightedRecall\")\nprint(\"Accuracy on Test Dataset = %g\" % accuracy_evaluator\n   .evaluate(prediction_and_labels))\nprint(\"Precision on Test Dataset = %g\" % precision_evaluator\n   .evaluate(prediction_and_labels))\nprint(\"Recall on Test Dataset = %g\" % recall_evaluator\n   .evaluate(prediction_and_labels))\n\nAccuracy on Test Dataset = 0.339641\nPrecision on Test Dataset = 0.313333\nRecall on Test Dataset = 0.339641\n```", "```py\nnew_layers = [16, 16, 12, 26]\nnew_multilayer_perceptron_classifier = \n   MultilayerPerceptronClassifier(maxIter = 400, \n      layers = new_layers, blockSize = 128, seed = 1234)\nnew_multilayer_perceptron_classifier_model = \n   new_multilayer_perceptron_classifier.fit(train_df)\nnew_test_predictions_df = \n   new_multilayer_perceptron_classifier_model.transform(test_df)\nprint(\"New Accuracy on Test Dataset = %g\" % accuracy_evaluator\n   .evaluate(new_test_predictions_df\n   .select(\"prediction\", \"label\")))\n```", "```py\nfrom sparkdl import DeepImageFeaturizer\nfrom pyspark.sql.functions import *\nfrom pyspark.sql import SparkSession\nfrom pyspark.ml.image import ImageSchema\nfrom pyspark.ml import Pipeline\nfrom pyspark.ml.classification import LogisticRegression\nfrom pyspark.ml.evaluation import MulticlassClassificationEvaluator\n```", "```py\nspark = SparkSession.builder.appName(\"Convolutional Neural Networks - Transfer Learning - Image Recognition\").getOrCreate()\n```", "```py\npath_to_img_directory = 'chapter07/data/image-recognition-data'\nbirds_df = ImageSchema.readImages(path_to_img_directory + \"/birds\")\n   .withColumn(\"label\", lit(0))\n```", "```py\nplanes_df = ImageSchema.readImages(path_to_img_directory + \n   \"/planes\").withColumn(\"label\", lit(1))\n```", "```py\nplanes_train_df, planes_test_df = planes_df\n   .randomSplit([0.75, 0.25], seed=12345)\nbirds_train_df, birds_test_df = birds_df\n   .randomSplit([0.75, 0.25], seed=12345)\ntrain_df = planes_train_df.unionAll(birds_train_df)\ntest_df = planes_test_df.unionAll(birds_test_df)\n```", "```py\nfeaturizer = DeepImageFeaturizer(inputCol = \"image\", \n   outputCol = \"features\", modelName = \"InceptionV3\")\n```", "```py\nlogistic_regression = LogisticRegression(maxIter = 20, \n   regParam = 0.05, elasticNetParam = 0.3, labelCol = \"label\")\n```", "```py\npipeline = Pipeline(stages = [featurizer, logistic_regression])\nmodel = pipeline.fit(train_df)\n```", "```py\ntest_predictions_df = model.transform(test_df)\ntest_predictions_df.select(\"image.origin\", \"prediction\")\n   .show(truncate=False)\n```", "```py\naccuracy_evaluator = MulticlassClassificationEvaluator(\n   metricName = \"accuracy\")\nprint(\"Accuracy on Test Dataset = %g\" % accuracy_evaluator\n   .evaluate(test_predictions_df.select(\"label\", \"prediction\")))\n```", "```py\n> cd {SPARK_HOME}\n> bin/spark-submit --master spark://192.168.56.10:7077 --packages databricks:spark-deep-learning:1.2.0-spark2.3-s_2.11 chapter07/chp07-02-convolutional-neural-network-transfer-learning.py\n```", "```py\nfrom sparkdl import DeepImagePredictor\nfrom pyspark.sql import SparkSession\nfrom pyspark.ml.image import ImageSchema\n```", "```py\nspark = SparkSession.builder.appName(\"Convolutional Neural Networks - Deep Image Predictor\").getOrCreate()\n```", "```py\nassorted_images_df = ImageSchema.readImages(\n   \"chapter07/data/image-recognition-data/assorted\")\n```", "```py\ndeep_image_predictor = DeepImagePredictor(inputCol = \"image\", \n   outputCol = \"predicted_label\", modelName = \"InceptionV3\", \n   decodePredictions = True, topK = 10)\npredictions_df = deep_image_predictor.transform(assorted_images_df)\npredictions_df.select(\"image.origin\", \"predicted_label\")\n   .show(truncate = False)\n```", "```py\n> cd {SPARK_HOME}\n> bin/spark-submit --master spark://192.168.56.10:7077 --packages databricks:spark-deep-learning:1.2.0-spark2.3-s_2.11 chapter07/chp07-03-convolutional-neural-network-image-predictor.py\n```"]