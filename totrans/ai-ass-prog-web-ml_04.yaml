- en: '4'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Build the Appearance of Our App with HTML and Copilot
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Building a web app involves the usage of HTML for markup, CSS for styling, and
    JavaScript for making it interactive.
  prefs: []
  type: TYPE_NORMAL
- en: We’ve come a long way from building a web app from static pages in the 1990s
    to now using frameworks to build large apps. Regardless of whether you use a framework
    or a library, it still rests on the same foundation, HTML, CSS, and JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: To tackle these three markup and programming languages, we can use an AI assistant.
    There’s more to using an AI assistant than generating text, given text input.
    You also need working knowledge of the area you’re trying to tackle. For markup
    languages like HTML and CSS, “working knowledge” means you should know how to
    structure a web page or configure the styling with CSS. In short, you know how
    to do the task at hand, and the AI assistant is there to make you faster and more
    efficient.
  prefs: []
  type: TYPE_NORMAL
- en: The output from the prompts mentioned in this chapter may vary based on training
    data, what files you have open, and what you typed previously.
  prefs: []
  type: TYPE_NORMAL
- en: You will see throughout the different chapters of this book how we will follow
    a specific method of first discussing a business problem we’re looking to solve,
    with web development or data science merely being approaches that help us solve
    the problem. We will then focus on the problem, which varies depending on whether
    we’re a web developer or data scientist, followed by dividing up our problem into
    smaller more manageable parts. Finally, we will recommend a “prompt” strategy
    that works well for this particular type of problem.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Generate basic HTML**: GitHub Copilot is capable of generating different
    kinds of code, including HTML.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Apply prompting techniques**: There are different techniques we can use to
    get the desired content.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Business problem: e-commerce'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: E-commerce is quite an interesting domain. There are many problems to be solved
    within this domain. For example, you need to provide a technical platform that
    allows users to purchase items. That in itself means you need to build various
    solutions for taking payments as well as products to buy and also some logistics
    that allow for shipping and more.
  prefs: []
  type: TYPE_NORMAL
- en: If you look at this business from the data side of things, you see that you
    need to analyze customer behavior to ensure you have the right number of items
    in stock, the correct prices on the items, and so on. In short, e-commerce is
    an intriguing domain that you will see mentioned throughout the book.
  prefs: []
  type: TYPE_NORMAL
- en: Problem domain
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This chapter focuses on the role of the web developer, so let’s discuss what
    type of problems await a web developer in e-commerce. There are usually two to
    three major roles you need to solve for as a web developer:'
  prefs: []
  type: TYPE_NORMAL
- en: The customer and all the actions that a customer can take like browsing and
    purchasing items to managing their account.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Back office: This is the company behind the e-commerce application. Here, you
    need to ensure there exist technical solutions so that company employees can manage
    inventory, product information, payment solutions, and more.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: From a data standpoint, you, as a web developer, need to ensure that data can
    be stored and updated on areas like products, purchase orders, and customer information.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Problem breakdown: identify the features'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To start breaking down this problem domain into something we can write prompt
    input for, let’s again turn to the roles we mentioned, customer and back office.
    Here’s an attempt at breaking the problem down into features we can build.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s start with the customer role and the major area, “Authentication.” Let’s
    attempt to break it down into things the customer should be able to do. Here are
    the actions we should support:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Login:** The user should be able to log in.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Logout:** The user should be able to log out.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Create a new user:** It should be possible to create a new user.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Update password:** An existing user should be able to update their password.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Password:** If a user forgets their password, it should be possible to reset
    it in a safe way.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, we have a set of features for a specific domain, “Authentication,” and
    we have a better grasp of the different actions we should support. We’ll leave
    it to you to further break down your problem domain like this, but see the preceding
    list as the detail level you should preferably be on before you start using your
    AI assistant.
  prefs: []
  type: TYPE_NORMAL
- en: 'Given the preceding breakdown into features, you could now, for example, type
    a prompt like so to attempt solving the first feature we identified above:'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Prompt]**'
  prefs: []
  type: TYPE_NORMAL
- en: Generate a login page, with fields for username, password, and repeat password
    and login button.
  prefs: []
  type: TYPE_NORMAL
- en: '**[End of prompt]**'
  prefs: []
  type: TYPE_NORMAL
- en: As a web developer, you’ve usually already done this breakdown of the problem
    domain into features before you start developing and even called these “user stories”
    if you use a development methodology like Scrum, for example.
  prefs: []
  type: TYPE_NORMAL
- en: With web development, though, you know it’s a matter of looking at this problem
    from three different layers, the frontend, backend, and the data layer, usually
    a database where you store the data. The rest of this chapter will focus on the
    frontend when using the AI assistant. In later chapters, we will focus on other
    layers of the e-commerce example.
  prefs: []
  type: TYPE_NORMAL
- en: Prompt strategy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: So, how do we select a prompt strategy and what do we mean by prompt strategy?
    Our strategy is about how we will prompt; will we write one prompt per feature
    or many short ones? It’s also about how we use our chosen AI assistant, GitHub
    Copilot, and how we choose to input the prompts into the tool.
  prefs: []
  type: TYPE_NORMAL
- en: In GitHub Copilot, there are two major choices for how you write your prompts,
    either using the chat functionality or via typing comments or code directly in
    a text file. In this chapter, we will use the latter approach of typing directly
    in the text file. The general recommendation is that both approaches are valid
    and, it’s our experience that you vary between these two approaches as you solve
    a problem.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we’ve chosen our GitHub Copilot approach, what about the prompts themselves?
    We will choose a prompt strategy here where we type shorter prompts – we refer
    to this pattern as “Exploratory prompt pattern” in *Chapter 2* of the book. We
    will let GitHub Copilot build up its runtime context and learn from our code as
    we type it.
  prefs: []
  type: TYPE_NORMAL
- en: In the upcoming section, we will showcase how you can start generating markup
    code while being inside an open text file. At the end of this chapter, you will
    see how we revisit our e-commerce use case.
  prefs: []
  type: TYPE_NORMAL
- en: Page structure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A web page is defined in HTML, and all such pages are made up of a tree called
    a **document object model** (**DOM**). The DOM has the following parts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: You can see how the markup of the page consists of elements. The top elements
    need to be laid out hierarchically with HTML being the root element having the
    inner nodes HEAD and BODY. In the HEAD node, we define things like styling, instructions
    for search engines, page title, and more. In the BODY element, we place content
    we want to be visible.
  prefs: []
  type: TYPE_NORMAL
- en: Add AI assistance to our page structure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: How can we leverage GitHub Copilot for this? Normally, web apps should have
    an `index.html` as an entry point for the app. To leverage GitHub Copilot, create
    a comment, `<!-- my comment -->`, on the page. You need to replace `my comment`
    with your prompt. So, what do you type instead of `my comment?` The answer is
    to provide GitHub Copilot with enough context for it to know what to generate
    in response.
  prefs: []
  type: TYPE_NORMAL
- en: GitHub Copilot builds a runtime context not only based on its training model
    but also based on file endings like `.js` or `.html`, and what text is in both
    open or closed files in the directory you’re in. This context is what decides
    what text should be generated based on what prompt you type.
  prefs: []
  type: TYPE_NORMAL
- en: Your first prompt, simple prompting, and aiding your AI assistant
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s try writing our first prompts in an open text file.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to try the following prompts yourself while reading this, create
    an `index.html` page. Prompts are comments that you write. The comment should
    use the assigned comment format for the chosen type of file, meaning `<!-- -->`
    is how you comment in an HTML page, and `//` is how you write a comment in a JavaScript
    file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s a prompt you can try adding as an HTML comment at the top of the page:'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Prompt]**'
  prefs: []
  type: TYPE_NORMAL
- en: Create a page with a title and list.
  prefs: []
  type: TYPE_NORMAL
- en: '**[End of prompt]**'
  prefs: []
  type: TYPE_NORMAL
- en: '`<!-- create a page with a title and list -->`.'
  prefs: []
  type: TYPE_NORMAL
- en: In this case, this prompt generates another prompt, namely, `<!-- the list should
    contain 3 items -->`.
  prefs: []
  type: TYPE_NORMAL
- en: At first glance, this might look confusing. Why would GitHub Copilot give me
    another comment as output? The explanation is that your AI assistant is trained
    on code and comments. In this case, GitHub Copilot provides you with the most
    likely response given its training data.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, how do you get HTML markup as a response instead? The answer is that you
    start typing HTML, which narrows it down for GitHub Copilot, so the code in your
    text file should look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'GitHub Copilot now generates code that should look similar to the following
    output:'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Prompt response]**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**[End of response]**'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you keep hitting the *Return* key, and accepting the suggestions with *Tab*,
    more and more code will be generated so you end up with an output like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Prompt response]**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '**[End of response]**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Your second prompt: adding more context'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s erase what we’ve done so far and start with a new prompt. The objective
    is to understand how writing a better-written prompt, with more context, yields
    a better output.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s try a second prompt, with more context and have it look like the following
    text:'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Prompt]**'
  prefs: []
  type: TYPE_NORMAL
- en: Create a page with a title and list, each item should have fields title, description
    and completed.
  prefs: []
  type: TYPE_NORMAL
- en: '**[End of prompt]**'
  prefs: []
  type: TYPE_NORMAL
- en: Note how we’re now saying that the list consists of items and that each item
    has separate fields. So, what’s the output of this prompt? Like before, use the
    *Return* key to generate a prompt response and *Tab* to accept the completion
    provided by GitHub Copilot.
  prefs: []
  type: TYPE_NORMAL
- en: '**[Prompt response]**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '**[End of response]**'
  prefs: []
  type: TYPE_NORMAL
- en: Our AI assistant is able to guess that we’re trying to build a so-called “Todo
    app,” a common type of app where we have tasks we’re looking to complete. It was
    also able to generate a header element `h2` for the title, a `p` for the description,
    and a checkbox for the `Completed` field. By adding more context, our AI assistant
    was able to provide a better output.
  prefs: []
  type: TYPE_NORMAL
- en: 'Your third prompt: accept prompt suggestions'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: So far, you’ve seen the difference between the two prompts, but what happens
    if we add even more context like so?
  prefs: []
  type: TYPE_NORMAL
- en: '**[Prompt]**'
  prefs: []
  type: TYPE_NORMAL
- en: create a page with a header, main part, and a footer. Use dark theme.
  prefs: []
  type: TYPE_NORMAL
- en: '**[End of prompt]**'
  prefs: []
  type: TYPE_NORMAL
- en: 'At this point, the output consists of more comments (suggestions), and if you
    accept several of them by entering the *Return* key (to get a new suggestion)
    and the *Tab* key (to accept the completion), your text file should now have content
    similar to the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: It’s also possible to reject the suggestion by, for example, continuing to type.
  prefs: []
  type: TYPE_NORMAL
- en: '**[Prompt response]**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '**[End of response]**'
  prefs: []
  type: TYPE_NORMAL
- en: 'GitHub Copilot can suggest prompts that you might not even consider like navigation,
    images, and the use of CSS variables. If you type `<html` at this point, you see
    an output similar to:'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Prompt response]**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '**[End of response]**'
  prefs: []
  type: TYPE_NORMAL
- en: View this output in a browser and it should display the preceding sections that
    contain the title, description, and image for a number of items (exactly what
    you will see varies as these images are random).
  prefs: []
  type: TYPE_NORMAL
- en: 'As a web developer, you take this for what it is: a nice first scaffold that
    you need to add styling to at a later stage to make it look better.'
  prefs: []
  type: TYPE_NORMAL
- en: '![page with images](img/B21232_04_01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.1: Page with images (without the header and footer)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Challenge: vary the prompt'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can vary the output by adding or removing context. As a suggestion, see
    if you can change the prompt to add tables, forms, a multi-column layout, and
    more.
  prefs: []
  type: TYPE_NORMAL
- en: 'Use case: build a front for an e-commerce'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we’ve learned how to use GitHub Copilot for creating HTML markup,
    let’s use it for a more challenging project: an e-commerce website. The requirements
    are that it should be a site with the following parts:'
  prefs: []
  type: TYPE_NORMAL
- en: A login page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A user creation page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A products page for products to put in a basket
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A basket page to show items you mean to purchase
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A checkout page showing your basket content and form for payment information
    and address info for shipping
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An admin page that allows you to edit your products
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s start with these pages as they are commonly found on e-commerce websites.
  prefs: []
  type: TYPE_NORMAL
- en: Login page
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The requirements for a login page are that you as a user can enter a username
    and password and that there’s a button verifying your credentials. Optionally,
    you can add links for creating a user and a link if you forgot your password.
  prefs: []
  type: TYPE_NORMAL
- en: 'Try the following prompt as a comment at the top of a page called `login.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Prompt]**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '**[End of prompt]**'
  prefs: []
  type: TYPE_NORMAL
- en: You may need to start typing `<html>` for the completion to be generated. Also,
    ensure you close all files except for the current one to make sure that your AI
    assistant is not distracted by other files that might be open.
  prefs: []
  type: TYPE_NORMAL
- en: 'You should see an output similar to:'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Prompt response]**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '**[End of response]**'
  prefs: []
  type: TYPE_NORMAL
- en: 'This renders like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '![login page](img/B21232_04_02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.2: Login page'
  prefs: []
  type: TYPE_NORMAL
- en: Product list page
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'On this page, we want to see a list of products we can buy, some details on
    each product, and an “**Add to Cart**” button. For this, we will create a `products.html`
    page and give it the following prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see an output similar to:'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Prompt response]**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '**[End of response]**'
  prefs: []
  type: TYPE_NORMAL
- en: 'This should render something like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '![product list page](img/B21232_04_03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.3: Product list page'
  prefs: []
  type: TYPE_NORMAL
- en: Remaining pages
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will leave it as an exercise for you to produce the remaining pages. Remember
    to create a dedicated HTML page and put a prompt comment at the top of the page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s some suggested prompts for the remaining pages:'
  prefs: []
  type: TYPE_NORMAL
- en: A user creation page.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here is a suggested prompt:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: A basket page to show items you mean to purchase.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here is a suggested prompt:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: A checkout page showing your basket content and form for payment information
    and address info for shipping.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here is a suggested prompt:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: An admin page that allows you to edit your products.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here is a suggested prompt:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Assignment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this assignment, you will create a resume website. What context you provide
    GitHub Copilot with is up to you but start by creating an `index.html` and an
    HTML comment, `<!-- my prompt -->`.
  prefs: []
  type: TYPE_NORMAL
- en: Remember the techniques you were taught.
  prefs: []
  type: TYPE_NORMAL
- en: '**Write a prompt**'
  prefs: []
  type: TYPE_NORMAL
- en: Write a prompt and start typing the code/markup on the next line to help your
    assistant. Use the *Return* key to generate a response and the *Tab* key to accept
    the suggested text. Rewrite the prompt and add or change what it says to get the
    desired result.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find the solution to this assignment in the GitHub repository: [https://github.com/PacktPublishing/AI-Assisted-Software-Development-with-GitHub-Copilot-and-ChatGPT/tree/main/04](https://github.com/PacktPublishing/AI-Assisted-Software-Development-with-GitHub-Copilot-and-ChatGPT/tree/main/04)'
  prefs: []
  type: TYPE_NORMAL
- en: Challenge
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Given your built resume, you can improve it further by adding colors. How would
    you prompt to do so?
  prefs: []
  type: TYPE_NORMAL
- en: Quiz
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here’s a set of questions to ensure you’ve grasped the key concepts:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The text you send to your AI assistant is called:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: text
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: instruction
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: prompt
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Your AI assistant builds a context from:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: what you type
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: what you type, the file ending, and the open and closed files in your working
    directory
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: what you type and the file ending
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You can find the solution to this quiz in the GitHub repository: [https://github.com/PacktPublishing/AI-Assisted-Software-Development-with-GitHub-Copilot-and-ChatGPT/tree/main/04](https://github.com/PacktPublishing/AI-Assisted-Software-Development-with-GitHub-Copilot-and-ChatGPT/tree/main/04)'
  prefs: []
  type: TYPE_NORMAL
- en: '*# Summary'
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we covered how to generate HTML markup using GitHub Copilot.
    We also covered how to use prompting techniques and how to add context to your
    prompts. As part of learning these prompting techniques, we discovered that the
    more context you give your AI assistant, the better the output. You also build
    up context over time as you add more content to your page.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, we started on a use case where we started building an e-commerce
    website. This use case is something we will continue to build on in the coming
    chapters.
  prefs: []
  type: TYPE_NORMAL
- en: For the next chapter, we will continue to cover web development but shift our
    focus to CSS and styling. You will see how the same or similar prompting techniques
    can be used for CSS as well.
  prefs: []
  type: TYPE_NORMAL
- en: Join our community on Discord
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Join our community’s Discord space for discussions with the author and other
    readers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://packt.link/aicode](https://packt.link/aicode)'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/QR_Code510410532445718281.png)*'
  prefs: []
  type: TYPE_NORMAL
