- en: Random Forest on iOS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter will provide you with an overview of the random forest algorithm.
    We will first look at the decision tree algorithm and, once we have a handle on
    it, try to understand the random forest algorithm. Then, we will use Core ML to
    create a machine learning program that leverages the random forest algorithm and
    predicts the possibility of a patient being diagnosed with breast cancer based
    on a given set of breast cancer patient data.
  prefs: []
  type: TYPE_NORMAL
- en: 'As we already saw in [Chapter 1](51fcaf51-eb68-4493-afc2-0b02f1c1d50e.xhtml), *Introduction
    to Machine Learning on Mobile,* any machine learning program has four phases:
    define the machine learning problem, prepare the data, build/rebuild/test the
    model, and deploy it for usage. In this chapter, we will try to relate these with
    random forest and solve the underlying machine learning problem.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Problem definition**: The breast cancer data for certain patients is provided
    and we want to predict the possibility of diagnosing breast cancer for a new data
    item.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will be covering the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding decision trees and how to apply them to solve an ML problem
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding decision trees through a sample dataset and Excel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding random forests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Solving the problem using a random forest in Core ML:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a model file using the scikit-learn and pandas libraries
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing the model
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Importing the scikit-learn model into the Core ML project
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing an iOS mobile application and using the scikit-learn model in it to
    perform the breast cancer prediction
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction to algorithms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will look at the decision tree algorithm. We will go through
    an example to understand the algorithm. Once we get some clarity on the algorithm,
    we will try to understand the random forest algorithm with an example.
  prefs: []
  type: TYPE_NORMAL
- en: Decision tree
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To understand the random forest model, we must first learn about the decision
    tree, the basic building block of a random forest. We all use decision trees in
    our daily lives, even if you don't know it by that name. You will be able to relate
    to the concepts of a decision tree once we start going through the example.
  prefs: []
  type: TYPE_NORMAL
- en: Imagine you approach a bank for a loan. The bank will scan you for a series
    of eligibility criteria before they approve the loan. For each individual, the
    loan amount they offer will vary, based on the different eligibility criteria
    they satisfy.
  prefs: []
  type: TYPE_NORMAL
- en: 'They may go ahead with various decision points to make the final decision to
    arrive at the possibility of granting a loan and the amount that can be given,
    such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Source of income**: Employed or self-employed?'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**If employed, place of employment**: Private sector or government sector?'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**If private sector, range of salary**: Low, medium, or high?'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**If government sector, range of salary**: Low, medium, or high?'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There may be further questions, such as how long you''ve been employed with
    that company, or whether you have any outstanding loans. This process, in its
    most basic form, is a decision tree:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8ed81da7-31ba-4376-b2ef-ca932251b95e.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see in the preceding diagram, a decision tree is a largely used non-parametric
    effective machine learning modeling technique for classification problems. To
    find solutions, a decision tree makes sequential, hierarchical decisions about
    the outcomes based on the predictor data.
  prefs: []
  type: TYPE_NORMAL
- en: For any given data item, a series of questions is asked, which leads to a class
    label or a value. This model asks a series of predefined questions of the incoming
    data item and, based on these answers, branches out to that series and proceeds
    until it arrives at the resulting data value or class label. The model is constructed
    based on the observed data, and there are no assumptions made about the distribution
    of the errors or the distribution of data itself.
  prefs: []
  type: TYPE_NORMAL
- en: In the decision tree models where the target variable uses a discrete set of
    values, this is called a **classification tree**. In these trees, each node, or
    leaf, represents class labels, while the branches represent features leading to
    class labels.
  prefs: []
  type: TYPE_NORMAL
- en: A decision tree where the target variable takes a continuous value, usually
    numbers, is called a **regression tree**.
  prefs: []
  type: TYPE_NORMAL
- en: These decision trees are well represented using **directed acyclic graphs**
    (**DAGs**). In these graphs, nodes represent decision points and edges are the
    connections between the nodes. In the preceding loan scenario, the salary range
    of $30,000-$70,000 would be an edge and the medium are nodes.
  prefs: []
  type: TYPE_NORMAL
- en: Advantages of the decision tree algorithm
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The goal of the decision tree is to arrive at the optimal choice for the given
    problem. The final leaf node should be the best choice for the problem at hand.
    The algorithm behaves greedily and tries to come to the optimal choice in each
    decision it takes.
  prefs: []
  type: TYPE_NORMAL
- en: The whole problem is divided into multiple sub-problems, with each sub-problem
    branching out to other sub-problems. The subsets arrived are based on a parameter
    called **purity**. A node is said to be 100% pure when all decisions will lead
    to data belonging to the same class. It will be 100% impure when there is a possibility
    of splitting its subsets into categories. The goal of the algorithm is to reach
    100% purity for each node in the tree.
  prefs: []
  type: TYPE_NORMAL
- en: The purity of a node is measured using Gini impurity, and Gini impurity is a
    standard metric that helps in splitting the node of a decision tree.
  prefs: []
  type: TYPE_NORMAL
- en: The other metric that would be used in a decision tree is information gain,
    which will be used to decide what feature of the dataset should be used to split
    at each step in the tree. The information gain is the decrease in entropy (randomness)
    after a dataset is split on an attribute. Constructing a decision tree is all
    about finding attributes that return the highest information gain, that is, the
    most homogeneous branches, which means all data belonging to the same subset or
    class.
  prefs: []
  type: TYPE_NORMAL
- en: Disadvantages of decision trees
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The model stops only when all data points can fit into a single class/category.
    So there is a possibility that it may not generalize well for complex problems
    and the chance of bias is high.
  prefs: []
  type: TYPE_NORMAL
- en: These problems can be solved by defining the maximum depth of the tree or by
    specifying the minimum number of data points needed to split the node further
    in the tree.
  prefs: []
  type: TYPE_NORMAL
- en: Advantages of decision trees
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following are the advantages listed:'
  prefs: []
  type: TYPE_NORMAL
- en: Simple to understand and visualize
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Very easy to build and can handle both qualitative and quantitative data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Easy to validate
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Computationally, it is not very expensive
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To summarize the decision tree model, we can conclude that it is basically a flowchart
    of questions leading to a prediction.
  prefs: []
  type: TYPE_NORMAL
- en: Random forests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, let''s move from a single decision tree to a random forest. If you wanted
    to guess who the next President will be, how would you go about predicting this?  Let''s
    see the different kinds of questions that we would ask to predict this:'
  prefs: []
  type: TYPE_NORMAL
- en: How many candidates are there? Who are they?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Who is the current President?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How are they performing?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Which party do they belong to?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Is there any current movement against that party?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In how many states the political party has probability to win
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Were they the incumbent President?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What are the major voting issues?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Many questions like this will come to our mind and we will attach different
    weights/importance to them.
  prefs: []
  type: TYPE_NORMAL
- en: Each person's prediction to the preceding questions may be different. There
    are too many factors to take into account, and the possibility are, each person's
    guess will be different. Every person comes to these questions with different
    backgrounds and knowledge levels, and may interpret the question differently.
  prefs: []
  type: TYPE_NORMAL
- en: So there is chance of having a high variance for the answers. If we take all
    the predictions given by different individuals separately and then average them
    out, it becomes a random forest.
  prefs: []
  type: TYPE_NORMAL
- en: A random forest combines many decision trees into a single model. Individually,
    predictions made by decision trees (or humans) may not be accurate, but, when
    combined, the predictions will be closer to the mark, on average.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram will help us understand the voting prediction using the
    random forest algorithm:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5bf737ee-2d42-4d41-b7ce-7ebeb1966472.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The following diagram gives a flowchart view of the previous diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/531ae8f1-7db7-4759-b594-4fc3ce0d9a31.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s look at why a random forest is better than a decision tree:'
  prefs: []
  type: TYPE_NORMAL
- en: A random forest is a combination of many decision trees and, hence, there is
    a greater probability that there would be many viewpoints to arrive at the final
    prediction.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If only a single decision tree is considered for prediction, there is less information
    considered for prediction. But, in a random forest, when there are many trees
    involved, there is more information and it is more diverse.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The random forest may not be biased, as may be the case with the decision tree,
    since it is not dependent on a single source.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Why the name random forest? Well, as much as people might rely on different
    sources to make a prediction, each decision tree in the forest considers a random
    subset of features when forming questions and only has access to a random set
    of the training data points. This increases diversity in the forest, leading to
    more robust overall predictions and hence, the name random forest.
  prefs: []
  type: TYPE_NORMAL
- en: Solving the problem using random forest in Core ML
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will try to understand the random forest through a detailed
    example with a specific dataset. We are going to use the same dataset to work
    out the iOS Core ML example.
  prefs: []
  type: TYPE_NORMAL
- en: Dataset
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will use the breast cancer dataset for the random forest problem. Features
    are computed from a digitized image of a **fine needle aspirate** (**FNA**) of
    a breast mass. They describe the characteristics of the cell nuclei present in
    the image. The dataset can be found at [https://archive.ics.uci.edu/ml/datasets/Breast+Cancer+Wisconsin+(Diagnostic)](https://archive.ics.uci.edu/ml/datasets/Breast+Cancer+Wisconsin+(Diagnostic)).
  prefs: []
  type: TYPE_NORMAL
- en: Naming the dataset
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will be using the Breast Cancer dataset. The following list contains the
    various conventions used in the dataset:'
  prefs: []
  type: TYPE_NORMAL
- en: ID number
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Diagnosis (*M* = malignant, and *B* = benign)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '10 real-valued features are computed for each cell nucleus:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Radius (mean of the distances from the center to points on the perimeter)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Texture (standard deviation of gray scale values)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Perimeter
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Area
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Smoothness (local variation in radius lengths)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Compactness (*perimeter^2/area - 1.0*)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Concavity (severity of concave portions of the contour)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Concave points (number of concave portions of the contour)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Symmetry
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Fractal dimension (coastline approximation-1)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: We will use random forest through Excel, applying the breast cancer dataset,
    to understand random forest in detail.  We will consider only data elements from
    569 sample pieces of data from the breast cancer dataset for the purposes of analysis.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following software needs to be installed on the developer machine:'
  prefs: []
  type: TYPE_NORMAL
- en: Python
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Xcode in the macOS environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The exercise programs for the chapter can be found on the GitHub repository
    ([https://github.com/PacktPublishing/Machine-Learning-for-Mobile](https://github.com/PacktPublishing/Machine-Learning-for-Mobile))
    under the `Chapter03` folder. Let''s start by entering the command to install
    the Python package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, issue the command to install `coremltools`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Creating the model file using scikit-learn
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section will explain how we are going to create the random forest model
    file using scikit-learn and convert it into the `.mlmodel` file that is compatible
    with Core ML. We are going to use the Breast Cancer dataset to create the model.
    The following is a Python program that creates a simple random forest model using
    scikit-learn and the Breast Cancer dataset. Then, the Core ML tools convert it
    into the Core ML—compatible model file. Let's go through the program in detail.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to import the required packages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'NumPy is the fundamental package for scientific computing with Python. It contains a
    powerful N-dimensional array object. This `numpy` array will be used in this program
    for storing the dataset, which has 14 dimensions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Here, we are using pandas ([https://pandas.pydata.org/pandas-docs/stable/10min.html](https://pandas.pydata.org/pandas-docs/stable/10min.html))
    which is an open source, BSD-licensed library providing high-performing, easy-to-use
    data structures and data analysis tools for the Python programming language. Using
    pandas, we can create a data frame. You can assume that a pandas dataframe is
    an Excel sheet in which every sheet has headings and data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s move on to understand the program written for solving the machine
    learning problem at hand:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding lines import the `sklearn` packages. Now, we will import built-in
    datasets in the `sklearn` package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding line loads the Breast Cancer dataset from the `sklearn` dataset
    package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'This will create a dataframe from the data present in the dataset. Let''s assume
    that the dataset is an Excel sheet with rows and columns with column headings:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The following piece of code will add the column headings to the columns in
    the dataset:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding lines will delete all the columns other than the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Mean concave points
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mean area
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mean radius
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mean perimeter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mean concavity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To reduce the number of feature columns in the dataset, I am deleting some
    of the columns that have less impact on the model:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'This line will save the data to a CSV file; you can open it and see in Excel
    to find out what is present in the dataset:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'In the Excel dataset, when you examine it, you will know that the diagnosis
    will include the value as 0 or 1, where 0 is malignant and 1 is benign. To change these
    numeric values to the real names, we write the following piece of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'This line of code will split the dataset into two—one for training and one
    for testing, and will save it in the corresponding variables defined for the purpose:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The following will create a classifier:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'This code will feed the training data and train the model:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding line will print the predicted cancer types for the testing data
    to the console, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/db7a7788-e16b-434d-8d39-2c5c91e3eddc.png)'
  prefs: []
  type: TYPE_IMG
- en: Converting the scikit model to the Core ML model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let me explain using an example: let''s assume you''re from France and you
    only speak French and English. Imagine you went to India on vacation. And you
    went to your hotel restaurant, where the waiter offered you a menu that was written
    in a local language. Now, what would you do? Let me guess, you''d ask the waiter, or
    another customer/your tour guide, to explain the items to you, or you simply scan
    the images in Google translate.'
  prefs: []
  type: TYPE_NORMAL
- en: My point is that you need a translator. That's it. Similarly, in order for the
    scikit model to be understood by the iOS mobile application, a converter that
    will translate it to the Core ML format is required.
  prefs: []
  type: TYPE_NORMAL
- en: 'That''s all the work of the following code. It will convert the scikit-learn
    format to the Core ML format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'For this, to work, you have to install `coremltools` using your `pip`. Then,
    write the following code on the top to import it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Once you run this program, you will get a model file in your disk, named  `cancermodel.mlmodel`,
    which you'll use in your iOS project for inference.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an iOS mobile application using the Core ML model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will be creating an iOS project to use Core ML, for which
    you will require Xcode (it must be version 9+).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s get started by opening Xcode and creating an empty swift application
    with a storyboard. In the main storyboard design, the screen will appear as follows. Then,
    add the generated model file to your project. This should give you the following
    structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8852eb62-93c8-45a7-b04b-118ab566e3f1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, create the UI in your main storyboard file, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/caaef230-54a1-4912-bd7e-9679cae60ff4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Create outlets for each text field. And add event listener to each and every
    text field. Now, your view controller will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: You can find the same code in the GitHub repository for this book.
  prefs: []
  type: TYPE_NORMAL
- en: If you encounter any issue while building. Like signing or certificate, please
    google it or write to us.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you set up the project in Xcode, you can run it in the simulator. The
    result will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5a912732-bce4-4f4c-b19f-b715bbfa735f.png)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about decision trees and random forests, and the
    differences between them. We also explored a decision tree through a sample dataset
    and Excel using a sample dataset and used random forest algorithm to it in order
    to establish the prediction. We used Core ML to write the iOS program, and then
    we applied the scikit-learn to create the model and converted the scikit model
    to the Core ML model using Core ML tools.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn more about TensorFlow and its use in Android.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can get further insight into Core ML and the services it offers by visiting
    their official website: [https://developer.apple.com/documentation/coreml](https://developer.apple.com/documentation/coreml).
  prefs: []
  type: TYPE_NORMAL
