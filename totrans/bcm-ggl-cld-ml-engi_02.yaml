- en: '2'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '2'
- en: Mastering Python Programming
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 掌握Python编程
- en: Before we train a machine to learn, we need to teach it a language. Computers
    are very good at binary code since they were created to operate in zeros and ones.
    Human beings have invented a language compiler to compile a high-level language
    (such as Python) program into binary code so that a computer can run it. Python
    is a high-level language that is intuitive – it has a simplified syntax very similar
    to natural language. Python is widely used in solving problems using computer
    programming, especially in **machine learning** (**ML**).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们训练机器学习之前，我们需要教它一种语言。计算机非常擅长二进制代码，因为它们被创造出来就是要在0和1之间操作。人类发明了一种语言编译器，将高级语言（如Python）程序编译成二进制代码，以便计算机可以运行它。Python是一种直观的高级语言，它的语法非常简化，类似于自然语言。Python在解决计算机编程问题中得到了广泛应用，尤其是在**机器学习**（**ML**）领域。
- en: In this chapter, we will start with a simple mathematical problem and show how
    Python can solve it directly and concisely. Understanding the solution will help
    us understand the Python basics, including variables, data structures, conditions,
    and controls. Then, we will cover Python’s data processing packages, including
    NumPy and Pandas for data manipulation and Matplotlib and Seaborn for data visualization.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将从一个简单的数学问题开始，展示Python如何直接且简洁地解决它。理解解决方案将帮助我们理解Python基础知识，包括变量、数据结构、条件和控制。然后，我们将介绍Python的数据处理包，包括用于数据操作的NumPy和Pandas，以及用于数据可视化的Matplotlib和Seaborn。
- en: Python is a programming language and practicing is a big portion of mastering
    the language. In [*Appendix 1*](B18333_11.xhtml#_idTextAnchor184) of this book,
    we have provided a step-by-step guide to using Python data processing packages.
    Practicing these steps is essential to mastering Python skills.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Python是一种编程语言，练习是掌握这门语言的重要组成部分。在本书的[*附录1*](B18333_11.xhtml#_idTextAnchor184)中，我们提供了一个使用Python数据处理包的逐步指南。练习这些步骤对于掌握Python技能至关重要。
- en: 'In the chapter, we will cover the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: The basics of Python
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python的基础知识
- en: Python data libraries and packages
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python数据库和包
- en: Before we begin, let’s take a look at the prerequisites for this chapter.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始之前，让我们看看本章的先决条件。
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: To follow the instructions in this chapter, make sure that you have set up Google
    Colab, a product from Google Research that allows programmers to write and execute
    Python code through a browser ([https://colab.research.google.com](https://colab.research.google.com)).
    Colab is well suited to ML and data analysis, and we will use it to run basic
    Python code in this chapter. Let’s get started!
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 要遵循本章的说明，请确保您已经设置了Google Colab，这是谷歌研究的一个产品，允许程序员通过浏览器编写和执行Python代码（[https://colab.research.google.com](https://colab.research.google.com)）。Colab非常适合机器学习和数据分析，我们将使用它来运行本章的基本Python代码。让我们开始吧！
- en: The basics of Python
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python的基础知识
- en: We will cover the basics of Python programming by starting with a simple egg-counting
    problem.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过一个简单的鸡蛋计数问题来介绍Python编程的基础知识。
- en: 'There are less than 2,000 eggs in a big basket. Let’s say that we take the
    eggs out in groups of two each time so that one egg is left in the basket at the
    end. Here, we have the following:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 一个大篮子里不到2,000个鸡蛋。假设我们每次拿两个鸡蛋一组，这样篮子里最后会剩下1个鸡蛋。这里我们有以下情况：
- en: If a group of 3 is used, 0 are left.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果用3人一组，会剩下0人。
- en: If a group of 4 is used, 1 is left.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果用4人一组，会剩下1人。
- en: If a group of 5 is used, 4 are left.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果用5人一组，会剩下4人。
- en: If a group of 6 is used, 3 are left.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果用6人一组，会剩下3人。
- en: If a group of 7 is used, 0 are left.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果用7人一组，会剩下0人。
- en: If a group of 8 is used, 1 is left.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果用8人一组，会剩下1人。
- en: If a group of 9 is used, 0 are left.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果用9人一组，会剩下0人。
- en: So, how many eggs are in the bucket?
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，桶里有多少个鸡蛋？
- en: 'Let’s look at a solution to this problem using Python programming:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看使用Python编程解决这个问题的一个解决方案：
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: As you can see, we tell the computer to try each odd number (why?) between 1
    and 2,000 and test it against all the conditions specified in the problem. If,
    for a certain number, all the conditions are met, then we print out the number.
    When all the odd numbers are examined, the numbers that meet the conditions are
    printed out. That’s neat!
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们告诉计算机尝试1到2,000之间的每个奇数（为什么？），并测试它是否满足问题中指定的所有条件。如果对于某个特定的数字，所有条件都满足，那么我们就打印出这个数字。当检查了所有奇数后，满足条件的数字就会被打印出来。这真是一件
    neat 的事情！
- en: 'Executing the preceding program on Colab yields the following output:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在Colab上执行前面的程序会产生以下输出：
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'If we examine the Python program more closely, we can observe the following:
    we use `i` as a variable that is assigned an odd number at a time, between `1`
    and `2000`, and we use a `for` clause to construct a loop that repeatedly checks
    if the value of `i` satisfies the conditions (the `if` clause) and print the value
    if it does. The variables and their operations, the `if` clause, and the `for`
    clause are the basics of Python. Next, we will examine these basic concepts in
    Python.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们更仔细地检查Python程序，我们可以观察到以下情况：我们使用`i`作为变量，每次分配一个奇数，在`1`和`2000`之间，我们使用`for`子句构建一个循环，该循环重复检查`i`的值是否满足条件（`if`子句），如果满足则打印该值。变量及其操作、`if`子句和`for`子句是Python的基础。接下来，我们将检查Python中的这些基本概念。
- en: Basic Python variables and operations
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基本Python变量和操作
- en: Programming languages use variables. A Python variable is a reserved memory
    location in a computer that stores values – that is, a variable in a Python program
    gives data to the computer for processing. Every value in Python has a data type.
    The action of placing data in a variable is called **assignment**. The action
    of calling a variable after it is created is called **using the variable**.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 编程语言使用变量。Python变量是计算机中预留的内存位置，用于存储值——也就是说，Python程序中的变量为计算机提供数据以进行处理。Python中的每个值都有一个数据类型。将数据放入变量的动作称为**赋值**。创建变量后调用变量的动作称为**使用变量**。
- en: 'For example, the following actions are *assignments*:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下操作是 *赋值*：
- en: '![Table 2.1 – Python variable assignments ](img/Table_2.1.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![表 2.1 – Python 变量赋值](img/Table_2.1.jpg)'
- en: Table 2.1 – Python variable assignments
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 表 2.1 – Python 变量赋值
- en: 'The following actions are *using variables*:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 以下操作是 *使用变量*：
- en: '![Table 2.2 – Python using variables ](img/Table_2.2.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![表 2.2 – Python 使用变量](img/Table_2.2.jpg)'
- en: Table 2.2 – Python using variables
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 表 2.2 – Python 使用变量
- en: 'To further understand the variables’ data types and their operations, let’s
    run some small Python code snippets using Colab:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 为了进一步了解变量的数据类型及其操作，让我们运行一些使用 Colab 的小型 Python 代码片段：
- en: '[PRE2]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Please take a moment here and make sure you understand how the preceding code
    snippet was executed to get the results.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 请在此处稍作停留，确保您理解了前面的代码片段是如何执行以获得结果的。
- en: 'For Python variables, we can operate on them using mathematical operations.
    The following table lists the arithmetic operations for Python variables:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Python变量，我们可以使用数学运算对它们进行操作。以下表格列出了Python变量的算术运算：
- en: '![Table 2.3 – Python arithmetic operations](img/Table_2.3.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![表 2.3 – Python 算术运算](img/Table_2.3.jpg)'
- en: Table 2.3 – Python arithmetic operations
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 表 2.3 – Python 算术运算
- en: 'The following table lists the Boolean operations for Python variables:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格列出了 Python 变量的布尔运算：
- en: '![Table 2.4 – Python Boolean operations  ](img/Table_2.4.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![表 2.4 – Python 布尔运算](img/Table_2.4.jpg)'
- en: Table 2.4 – Python Boolean operations
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 表 2.4 – Python 布尔运算
- en: 'The following table lists the logical operations for Python variables:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格列出了 Python 变量的逻辑运算：
- en: '![Table 2.5 – Python logical operations ](img/Table_2.5.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![表 2.5 – Python 逻辑运算](img/Table_2.5.jpg)'
- en: Table 2.5 – Python logical operations
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 表 2.5 – Python 逻辑运算
- en: Now that we’ve introduced Python variables and their basic operations, let’s
    look at Python’s basic data structures and control operations.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经介绍了Python变量及其基本操作，让我们看看Python的基本数据结构和控制操作。
- en: Basic Python data structure
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基本Python数据结构
- en: 'Python has five basic data types:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: Python有五种基本数据类型：
- en: Numbers
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数字
- en: Strings
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字符串
- en: Lists
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 列表
- en: Tuples
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 元组
- en: Dictionaries
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字典
- en: 'Since we’ve already covered numbers and strings, we will cover **lists**, **tuples**,
    and **dictionaries** here:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们已经涵盖了数字和字符串，因此在这里我们将介绍 **列表**、**元组**和**字典**：
- en: 'A `[ ]`. The following is an example:'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 `[ ]`。以下是一个示例：
- en: '[PRE3]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The basic operations of lists are shown in the following table:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 列表的基本操作如下表所示：
- en: '![Table 2.6 – Python list operations  ](img/Table_2.6.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![表 2.6 – Python 列表操作](img/Table_2.6.jpg)'
- en: Table 2.6 – Python list operations
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 表 2.6 – Python 列表操作
- en: 'A `()`. The following is an example:'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 `()`。以下是一个示例：
- en: '[PRE4]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'A `{}`, and the key-value pairs inside a dictionary are separated by commas
    (`,`). Each key is separated from its value by a colon (`:`). The following is
    an example:'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 `{}`，字典中的键值对由逗号（`,`）分隔。每个键与其值由冒号（`:`）分隔。以下是一个示例：
- en: '[PRE5]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Python conditions and loops
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python条件和循环
- en: 'Python programs need to make decisions based on conditions, such as the following:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: Python程序需要根据条件做出决策，如下所示：
- en: '**if** (condition) **else** (action)'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**if**（条件）**else**（动作）'
- en: '**while** (condition) **do** (action loop)'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**while**（条件）**do**（动作循环）'
- en: '**for** (condition) **do** (action loop)'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**for**（条件）**do**（动作循环）'
- en: 'As you saw in the egg-counting program, it contains a `for` loop and `if` statements:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在鸡蛋计数程序中看到的，它包含一个`for`循环和`if`语句：
- en: '[PRE6]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: With the `for` loop and `if` statements, the problem was solved. These control
    statements manage how the logic flows in Python programs.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 通过`for`循环和`if`语句解决了问题。这些控制语句管理Python程序中的逻辑流程。
- en: Python functions
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python函数
- en: 'Python functions have two parts in a program: the **function definition** and
    the **function call**. First, a function is defined, and then the function that
    was defined is called. Let’s look at an example to explain function definition
    and calling:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: Python函数在程序中有两个部分：**函数定义**和**函数调用**。首先定义一个函数，然后调用定义好的函数。让我们通过一个例子来解释函数定义和调用：
- en: '**Problem**: Find all the prime numbers between 1 and 100'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**问题**：找出1到100之间的所有质数'
- en: '**Solution**: Use Python functions'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**解决方案**：使用Python函数'
- en: 'Here is how function definition and calling are used to solve the given problem:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是如何使用函数定义和调用来解决给定问题的示例：
- en: '*Function 1* takes in a number and checks if it’s a prime number:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*函数1*接受一个数字并检查它是否是质数：'
- en: '[PRE7]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '*Function 2* finds and returns all the prime numbers between the `a` and `b`
    integers. For each integer between `a` and `b`, it checks if it’s a prime number
    by calling *Function 1*. If it is, then it adds it to a list. In the end, the
    list is returned:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*函数2*查找并返回`a`和`b`整数之间的所有质数。对于`a`和`b`之间的每个整数，它通过调用*函数1*来检查它是否是质数。如果是，则将其添加到列表中。最后，返回列表：'
- en: '[PRE8]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The `main()` program finds and returns all the prime numbers between `1` and
    `100`:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`main()`程序查找并返回`1`到`100`之间的所有质数：'
- en: '[PRE9]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'As you can see, when the computer executes the main program, it will call *Function
    2*, `PNlist(1,100)`, to examine the numbers between `1` and `100`: for each number,
    it will call *Function 1*, `Prime(number)`, to see if it is a prime number or
    not – if it is, it’s put into the list. Finally, the `main()` program prints the
    list of prime numbers.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，当计算机执行主程序时，它将调用*函数2*，`PNlist(1,100)`，来检查`1`到`100`之间的数字：对于每个数字，它将调用*函数1*，`Prime(number)`，来查看它是否是质数——如果是，它将被放入列表中。最后，`main()`程序打印出质数列表。
- en: Opening and closing files in Python
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在Python中打开和关闭文件
- en: 'The following Python code opens an input file and reads it from user inputs:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 以下Python代码打开一个输入文件并从用户输入中读取：
- en: Open a file named `“lifeguards.in”` for reading only.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 只读方式打开名为`“lifeguards.in”`的文件。
- en: Read a line in the file.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 读取文件中的一行。
- en: 'Convert the text read into integers:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将读取的文本转换为整数：
- en: '[PRE10]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The following Python code block calculates the answer, writes it to the output
    file, and closes the file:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 以下Python代码块计算答案，将其写入输出文件，并关闭文件：
- en: '[PRE11]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Now that we have gone over the basics of Python, let’s solve an interesting
    problem using the knowledge and skills we have learned so far.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了Python的基础知识，让我们利用我们迄今为止学到的知识和技能来解决一个有趣的问题。
- en: An interesting problem
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个有趣的问题
- en: 'In this section, we’ll use the basic Python knowledge and skills we have learned
    so far to solve the USA Computer Olympiad problem (source: [http://www.usaco.org/index.php?page=viewproblem2&cpid=784](http://www.usaco.org/index.php?page=viewproblem2&cpid=784)).'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用我们迄今为止学到的基本Python知识和技能来解决美国计算机奥林匹克竞赛问题（来源：[http://www.usaco.org/index.php?page=viewproblem2&cpid=784](http://www.usaco.org/index.php?page=viewproblem2&cpid=784)）。
- en: 'Farmer John has opened a swimming pool and hired *N* cows as lifeguards, each
    of which has a shift that covers some contiguous interval of time during the day.
    For simplicity, the pool is open from time `t=0` until time `t=1000` daily, and
    each shift can be described by two integers – the starting and ending time. For
    example, a lifeguard starting at time `t=4` and ending at time `t=7` covers three
    time units. Unfortunately, John is over budgeted and must fire exactly one lifeguard.
    What is the maximum amount of time that can still be covered by the shifts of
    the remaining lifeguards? An interval of time is covered if at least one lifeguard
    is present. Let’s take a look:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 农夫约翰开设了一个游泳池，并雇佣了*N*头牛作为救生员，每头牛在一天中的某个连续时间段内值班。为了简单起见，游泳池每天从`t=0`到`t=1000`开放，每个班次可以用两个整数来描述——开始和结束时间。例如，一个救生员从`t=4`开始到`t=7`结束，覆盖了三个时间单位。不幸的是，约翰超出了预算，必须解雇一头牛。剩余的救生员班次能覆盖的最大时间是多少？如果至少有一名救生员在场，则时间区间被覆盖。让我们看看：
- en: '**Input**'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**输入**'
- en: The first line of input contains *N (1≤N≤100)*. Each of the next *N* lines describes
    a lifeguard in terms of two integers between `0` and `1000` to provide the start/end
    point of a lifeguard’s shift. All such endpoints are distinct. The shifts of different
    lifeguards may overlap.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 输入的第一行包含*N (1≤N≤100)*。接下来的*N*行描述了救生员，以两个介于`0`和`1000`之间的整数来表示救生员的工作开始/结束点。所有这些端点都是唯一的。不同救生员的工作时间可能重叠。
- en: '**Output**'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**输出**'
- en: 'Write a single number that specifies the maximum amount of time that can still
    be covered if Farmer John fires `1` lifeguard:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 写一个数字，指定如果农夫约翰发射`1`个救生员，还能覆盖的最大时间量：
- en: '[PRE12]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Let’s look at the following diagram to understand the problem:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看以下图表来理解这个问题：
- en: '![Figure 2.7 – Understanding the sample inputs and output ](img/Figure_2.1.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![图2.7 – 理解示例输入和输出](img/Figure_2.1.jpg)'
- en: Figure 2.7 – Understanding the sample inputs and output
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.7 – 理解示例输入和输出
- en: The preceding diagram shows the sample inputs and output. Here, we can see that
    there are three guards and that their time coverages are 5-9, 1-4, and 3-7, respectively.
    If we remove the first guard, the remaining coverage will be 1-7, which is 6\.
    If we remove the second guard, the remaining coverage will be 3-9, which equals
    6\. If we remove the third guard, the remaining coverage will be 1-4 and 5-9,
    which equals 7\. So, the maximum coverage when removing one guard at a time is
    *max(6,6,7)=7*.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 上述图表显示了示例输入和输出。在这里，我们可以看到有三个救生员，他们的时间覆盖范围分别是5-9，1-4和3-7。如果我们移除第一个救生员，剩余的覆盖范围将是1-7，即6。如果我们移除第二个救生员，剩余的覆盖范围将是3-9，等于6。如果我们移除第三个救生员，剩余的覆盖范围将是1-4和5-9，等于7。所以，逐个移除一个救生员时的最大覆盖范围是*max(6,6,7)=7*。
- en: 'Understanding this sample helps us think about the solution. We need to find
    out what the largest coverage is by comparing the remaining coverage after removing
    one guard at a time. The simplest way to do this is by using brute-force and Python
    lists. The following is a solution using Python:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 理解这个示例有助于我们思考解决方案。我们需要通过逐个移除一个救生员来比较剩余的覆盖范围，找出最大的覆盖范围。最简单的方法是使用穷举法和Python列表。以下是一个使用Python的解决方案：
- en: 'Claim/initialize the variable and arrays:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明/初始化变量和数组：
- en: '[PRE13]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Open the input file and read the input data:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开输入文件并读取输入数据：
- en: '[PRE14]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Read the data and assign it to variables (`start[i]` and `end[i]` are the start/end
    time for guard `i`):'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 读取数据并将其分配给变量（`start[i]`和`end[i]`是救生员`i`的工作开始/结束时间）：
- en: '[PRE15]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Use a new list to record the total guard coverage at time `j`:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用一个新的列表来记录时间`j`的总救生员覆盖范围：
- en: '[PRE16]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Remove one guard at a time, compare the maximum coverages, and get the maximum:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 逐个移除一个救生员，比较最大覆盖范围，并获取最大值：
- en: '[PRE17]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Open the output file, write the output data in it, and close the file:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开输出文件，将其中的输出数据写入，然后关闭文件：
- en: '[PRE18]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: While there are many solutions to this problem, this solution shows a simple
    and logical way to tackle the problem. It helps Python beginners follow and learn
    the problem-solving logic and skills that are required.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这个问题有多个解决方案，但这个解决方案展示了处理问题的简单和逻辑方法。它有助于Python初学者跟随和学习解决问题所需的逻辑和技能。
- en: Python data libraries and packages
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python数据库和包
- en: 'As we mentioned earlier, Python has five standard data types: numbers, strings,
    lists, tuples, and dictionaries. Using these data structures, Python can handle
    many tasks. To extend its ability for data manipulation and visualization, Python
    libraries and packages are created. We will briefly introduce four libraries:
    **NumPy**, **Pandas**, **Matplotlib**, and **Seaborn**.'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们之前提到的，Python有五种标准数据类型：数字、字符串、列表、元组和字典。使用这些数据结构，Python可以处理许多任务。为了扩展其数据操作和可视化的能力，创建了Python库和包。我们将简要介绍四个库：**NumPy**、**Pandas**、**Matplotlib**和**Seaborn**。
- en: NumPy
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: NumPy
- en: NumPy is short for **Numerical Python**. It is a fundamental library in Python
    and is a general-purpose array-processing package. NumPy is very good at basic
    and advanced array operations. It is used to process arrays that store values
    of the same data type.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy代表**数值Python**。它是Python的一个基础库，是一个通用的数组处理包。NumPy在基本和高级数组操作方面非常出色。它用于处理存储相同数据类型值的数组。
- en: Pandas
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Pandas
- en: '`Pandas` is considered the most powerful and flexible open source data analysis
    and manipulation tool available. It is a Python library that’s been optimized
    for data manipulation and analysis. In particular, it offers data structures and
    operations for manipulating multidimensional arrays of data. Pandas contains the
    Series and DataFrame data structures. The Series data structure is for storing
    a 1D array (or vector) of data elements, whereas a DataFrame is a Pandas data
    structure for storing and manipulating 2D arrays. In practice, we often think
    of it as an Excel spreadsheet. Pandas also has a robust set of plotting functions
    that we will also use for dataset visualizing. The plotting features of Pandas
    can be found in the `plotting` module.'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '`Pandas` 被认为是可用的最强大和灵活的开源数据分析和管理工具。它是一个针对数据操作和分析进行优化的 Python 库。特别是，它提供了用于操作多维数据数组的结构和操作。Pandas
    包含 Series 和 DataFrame 数据结构。Series 数据结构用于存储 1D 数组（或向量）的数据元素，而 DataFrame 是用于存储和操作
    2D 数组的 Pandas 数据结构。在实践中，我们通常将其视为电子表格。Pandas 还有一套强大的绘图函数，我们也将用于数据集可视化。Pandas 的绘图功能可以在
    `plotting` 模块中找到。'
- en: Matplotlib
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Matplotlib
- en: Matplotlib is a graphics package for data visualization in Python. It is a plotting
    library for the Python programming language and its numerical mathematics extension,
    NumPy, and it is well integrated with NumPy and Pandas.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: Matplotlib 是用于 Python 数据可视化的图形包。它是 Python 编程语言及其数值数学扩展 NumPy 的绘图库，并且与 NumPy
    和 Pandas 集成良好。
- en: Seaborn
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Seaborn
- en: On top of Matplotlib, Seaborn is an open source Python library that is used
    for data visualization and exploratory data analysis. Seaborn works with Pandas
    DataFrames and supports built-in Python types such as lists and dictionaries.
    Most Seaborn functions support objects from the Pandas and NumPy libraries.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Matplotlib 的基础上，Seaborn 是一个用于数据可视化和探索性数据分析的开源 Python 库。Seaborn 与 Pandas DataFrames
    一起工作，并支持内置的 Python 类型，如列表和字典。大多数 Seaborn 函数都支持来自 Pandas 和 NumPy 库的对象。
- en: Summary
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we reviewed the Python basics, including variables, data structures,
    condition and loop clauses, and various Python data libraries. It is essential
    to understand the Python code snippets in this chapter and go through the examples
    in [*Appendix 2*](B18333_12.xhtml#_idTextAnchor195), *Practicing with Python Data
    Libraries*, where we have provided examples to help you practice using Python
    data libraries, step by step. By doing so, you can develop Python code with Google
    Colab.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们回顾了 Python 基础知识，包括变量、数据结构、条件和循环语句，以及各种 Python 数据库。理解本章中的 Python 代码片段并完成
    [*附录 2*](B18333_12.xhtml#_idTextAnchor195)，*使用 Python 数据库练习* 中的示例至关重要，我们在其中提供了示例来帮助您逐步练习使用
    Python 数据库。通过这样做，您可以使用 Google Colab 开发 Python 代码。
- en: Now we have built up the foundation of GCP and Python, it is time to conclude
    *Part 1* of this book. In *Part 2*, we will explore the ML process, including
    problem framing, data preparation and feature engineering, ML model development,
    neural networks, and deep learning. In this next chapter, we will look at ML problem
    framing.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经建立了 GCP 和 Python 的基础，是时候总结本书的 *第一部分* 了。在 *第二部分* 中，我们将探讨机器学习过程，包括问题定义、数据准备和特征工程、机器学习模型开发、神经网络和深度学习。在下一章中，我们将探讨机器学习问题定义。
- en: Further reading
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'To learn more about the topics that were covered in this chapter, take a look
    at the following resources:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于本章所涵盖的主题，请参阅以下资源：
- en: '[https://colab.research.google.com/?utm_source=scs-index](https://colab.research.google.com/?utm_source=scs-index)'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Colab](https://colab.research.google.com/?utm_source=scs-index)'
- en: '[https://colab.research.google.com/github/cs231n/cs231n.github.io/blob/master/python-colab.ipynb](https://colab.research.google.com/github/cs231n/cs231n.github.io/blob/master/python-colab.ipynb)'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Colab](https://colab.research.google.com/github/cs231n/cs231n.github.io/blob/master/python-colab.ipynb)'
- en: '[https://www.geeksforgeeks.org/python-programming-language/](https://www.geeksforgeeks.org/python-programming-language/)'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Python 编程语言](https://www.geeksforgeeks.org/python-programming-language/)'
- en: '[https://www.geeksforgeeks.org/top-10-python-libraries-for-data-science-in-2021/](https://www.geeksforgeeks.org/top-10-python-libraries-for-data-science-in-2021/)'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[2021 年数据科学领域前 10 个 Python 库](https://www.geeksforgeeks.org/top-10-python-libraries-for-data-science-in-2021/)'
- en: '[*Appendix 2*](B18333_12.xhtml#_idTextAnchor195), *Practicing with Python Data
    Libraries*'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*附录 2*](B18333_12.xhtml#_idTextAnchor195)，*使用 Python 数据库练习*'
- en: 'Part 2: Introducing Machine Learning'
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二部分：介绍机器学习
- en: This part introduces machine learning (ML) concepts. We start with the preparations
    for the machine learning process, including ML problem definition and data preparations.
    We dive into the ML process, including platform preparation, dataset splitting,
    model training, validation, testing, and deployment. We then introduce the modern
    ML concepts such as neural networks, deep learning, cost function, optimizer algorithm,
    activation function, and so on. We further discuss several neural network models
    and their business use cases.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 本部分介绍了机器学习（ML）的概念。我们首先介绍机器学习过程的准备工作，包括机器学习问题定义和数据准备。我们深入探讨机器学习过程，包括平台准备、数据集划分、模型训练、验证、测试和部署。然后，我们介绍现代机器学习概念，如神经网络、深度学习、损失函数、优化算法、激活函数等。我们进一步讨论了几种神经网络模型及其商业应用案例。
- en: 'This part comprises the following chapters:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 本部分包括以下章节：
- en: '[*Chapter 3*](B18333_03.xhtml#_idTextAnchor072), Preparing for ML Development'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第3章*](B18333_03.xhtml#_idTextAnchor072)，准备机器学习开发'
- en: '[*Chapter 4*](B18333_04.xhtml#_idTextAnchor094), Developing and Deploying ML
    Models'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第4章*](B18333_04.xhtml#_idTextAnchor094)，开发和部署机器学习模型'
- en: '[*Chapter 5*](B18333_05.xhtml#_idTextAnchor116), Understanding Neural Networks
    and Deep Learning'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第5章*](B18333_05.xhtml#_idTextAnchor116)，理解神经网络和深度学习'
