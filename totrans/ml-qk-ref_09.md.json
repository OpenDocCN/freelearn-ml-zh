["```py\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nimport seaborn as sns\n%matplotlib inline\nfrom sklearn.model_selection import train_test_split\nimport itertools\nfrom keras.utils.np_utils import to_categorical # convert to one-hot-encoding\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D\nfrom keras.optimizers import SGD\nfrom keras.preprocessing.image import ImageDataGenerator\nsns.set(style='white', context='notebook', palette='deep')\nnp.random.seed(2)\n\n# Load the data\ntrain = pd.read_csv(\"train.csv\")\ntest = pd.read_csv(\"test.csv\")\n\nY_train = train[\"label\"]\n# Drop 'label' column\nX_train = train.drop(labels = [\"label\"],axis = 1)\n\nY_train.value_counts()\n```", "```py\nX_train.isnull().any().describe()\n```", "```py\ntest.isnull().any().describe()\n```", "```py\nX_train = X_train / 255.0\ntest = test / 255.0\n```", "```py\n Reshape image in 3 dimensions (height = 28px, width = 28px, canal = 1)\nX_train = X_train.values.reshape(-1,28,28,1)\ntest = test.values.reshape(-1,28,28,1)\n\nEncode labels to one hot vectors \nY_train = to_categorical(Y_train, num_classes = 10)\n\n# Split the dataset into train and the validation set \nX_train, X_val, Y_train, Y_val = train_test_split(X_train, Y_train, test_size = 0.1, random_state=2)\n```", "```py\npic = plt.imshow(X_train[9][:,:,0])\n```", "```py\nmodel = Sequential()\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', activation ='relu', input_shape = (28,28,1)))\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', activation ='relu'))\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.25))\nmodel.add(Flatten())\nmodel.add(Dense(256, activation = \"relu\"))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10, activation = \"softmax\"))\n```", "```py\n# Define the optimizer\noptimizer = SGD(lr=0.01, momentum=0.0, decay=0.0)\n```", "```py\n# Compile the model\nmodel.compile(optimizer = optimizer, loss = \"categorical_crossentropy\", metrics=[\"accuracy\"])\n\nepochs = 5\nbatch_size = 64\n```", "```py\ndatagen = ImageDataGenerator(\n featurewise_center=False, # set input mean to 0 over the dataset\n samplewise_center=False, # set each sample mean to 0\n featurewise_std_normalization=False, # divide inputs by std of the dataset\n samplewise_std_normalization=False, # divide each input by its std\n zca_whitening=False, # apply ZCA whitening\n rotation_range=10, # randomly rotate images in the range (degrees, 0 to 180)\n zoom_range = 0.1, # Randomly zoom image \n width_shift_range=0.1, # randomly shift images horizontally (fraction of total width)\n height_shift_range=0.1, # randomly shift images vertically (fraction of total height)\n horizontal_flip=False, # randomly flip images\n vertical_flip=False) # randomly flip images\ndatagen.fit(X_train)\n\nhistory = model.fit_generator(datagen.flow(X_train,Y_train, batch_size=batch_size),\n epochs = epochs, validation_data = (X_val,Y_val),\n verbose = 2, steps_per_epoch=X_train.shape[0] // batch_size)\n```", "```py\nresults = model.predict(test)\n# select with the maximum probability\nresults = np.argmax(results,axis = 1)\nresults = pd.Series(results,name=\"Label\")\nresults\n```"]