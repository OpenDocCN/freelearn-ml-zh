["```py\n    CREATE SCHEMA  chapter10_xgboost;\n    ```", "```py\n    create table chapter10_xgboost.cust_payment_tx_history\n    ```", "```py\n    (\n    ```", "```py\n    transaction_id integer,\n    ```", "```py\n    tx_datetime timestamp,\n    ```", "```py\n    customer_id integer,\n    ```", "```py\n    terminal_id integer,\n    ```", "```py\n    tx_amount decimal(9,2),\n    ```", "```py\n    tx_time_seconds integer,\n    ```", "```py\n    tx_time_days integer,\n    ```", "```py\n    tx_fraud integer,\n    ```", "```py\n    tx_fraud_scenario integer,\n    ```", "```py\n    tx_during_weekend integer,\n    ```", "```py\n    tx_during_night integer,\n    ```", "```py\n    customer_id_nb_tx_1day_window decimal(9,2),\n    ```", "```py\n    customer_id_avg_amount_1day_window decimal(9,2),\n    ```", "```py\n    customer_id_nb_tx_7day_window decimal(9,2),\n    ```", "```py\n    customer_id_avg_amount_7day_window decimal(9,2),\n    ```", "```py\n    customer_id_nb_tx_30day_window decimal(9,2),\n    ```", "```py\n    customer_id_avg_amount_30day_window decimal(9,2),\n    ```", "```py\n    terminal_id_nb_tx_1day_window decimal(9,2),\n    ```", "```py\n    terminal_id_risk_1day_window decimal(9,2),\n    ```", "```py\n    terminal_id_nb_tx_7day_window decimal(9,2),\n    ```", "```py\n    terminal_id_risk_7day_window decimal(9,2),\n    ```", "```py\n    terminal_id_nb_tx_30day_window decimal(9,2),\n    ```", "```py\n    terminal_id_risk_30day_window decimal(9,2)\n    ```", "```py\n    )\n    ```", "```py\n    ;\n    ```", "```py\n    copy chapter10_xgboost.cust_payment_tx_history\n    ```", "```py\n    from 's3://packt-serverless-ml-redshift/chapter10/credit_card_transactions_transformed_balanced.csv'\n    ```", "```py\n    iam_role default\n    ```", "```py\n    ignoreheader 1\n    ```", "```py\n    csv region 'eu-west-1';\n    ```", "```py\n    select * from\n    ```", "```py\n    chapter10_xgboost.cust_payment_tx_history\n    ```", "```py\n    limit 10;\n    ```", "```py\nselect tx_fraud, count(*)\nfrom chapter10_xgboost.cust_payment_tx_history\ngroup by 1;\n```", "```py\nselect to_char(tx_datetime, 'yyyymm') as yearmonth,\nsum(case when tx_fraud = 1 then 1 else 0 end) fraud_tx,\nsum(case when tx_fraud = 0 then 1 else 0 end) non_fraud_tx,\ncount(*) as total_tx,\n(fraud_tx::decimal(10,2 ) / total_tx::decimal(10,2) ) *100 as fraud_txn_pct\nfrom chapter10_xgboost.cust_payment_tx_history\ngroup by yearmonth\norder by yearmonth\n```", "```py\ncreate view chapter10_xgboost.credit_payment_tx_history_scaled\nas\nselect\ntransaction_id, tx_datetime, customer_id, terminal_id,\ntx_amount ,\n( (tx_amount - avg(tx_amount) over()) /  cast(stddev_pop(tx_amount) over() as dec(14,2)) ) s_tx_amount,\ntx_time_seconds ,\n  ( (tx_time_seconds - avg(tx_time_seconds) over()) /  cast(stddev_pop(tx_time_seconds) over() as dec(14,2)) ) s_tx_time_seconds,\ntx_time_days  ,\n  ( (tx_time_days - avg(tx_time_days) over()) /  cast(stddev_pop(tx_time_days) over() as dec(14,2)) ) s_tx_time_days,\ntx_fraud  ,\n  tx_during_weekend ,\ncase when tx_during_weekend = 1 then 1 else 0 end as tx_during_weekend_ind,\ncase when tx_during_weekend = 0 then 1 else 0 end tx_during_weekday_ind,\ntx_during_night,\ncase when tx_during_night = 1 then 1 else 0 end as tx_during_night_ind,\ncase when tx_during_night = 0 then 1 else 0 end as tx_during_day_ind,\ncustomer_id_nb_tx_1day_window ,\n  ( (customer_id_nb_tx_1day_window - avg(customer_id_nb_tx_1day_window) over()) /  cast(stddev_pop(customer_id_nb_tx_1day_window) over() as dec(14,2)) ) s_customer_id_nb_tx_1day_window,\ncustomer_id_avg_amount_1day_window  ,\n  ( (customer_id_avg_amount_1day_window - avg(customer_id_avg_amount_1day_window) over()) /  cast(stddev_pop(customer_id_avg_amount_1day_window) over() as dec(14,2)) ) s_customer_id_avg_amount_1day_window,\ncustomer_id_nb_tx_7day_window ,\n  ( (customer_id_nb_tx_7day_window - avg(customer_id_nb_tx_7day_window) over()) /  cast(stddev_pop(customer_id_nb_tx_7day_window) over() as dec(14,2)) ) s_customer_id_nb_tx_7day_window,\ncustomer_id_avg_amount_7day_window  ,\n  ( (customer_id_avg_amount_7day_window - avg(customer_id_avg_amount_7day_window) over()) /  cast(stddev_pop(customer_id_avg_amount_7day_window) over() as dec(14,2)) ) s_customer_id_avg_amount_7day_window,\ncustomer_id_nb_tx_30day_window  ,\n  ( (customer_id_nb_tx_30day_window - avg(customer_id_nb_tx_30day_window) over()) /  cast(stddev_pop(customer_id_nb_tx_30day_window) over() as dec(14,2)) ) s_customer_id_nb_tx_30day_window,\ncustomer_id_avg_amount_30day_window ,\n  ( (customer_id_avg_amount_30day_window - avg(customer_id_avg_amount_30day_window) over()) /  cast(stddev_pop(customer_id_avg_amount_30day_window) over() as dec(14,2)) ) s_customer_id_avg_amount_30day_window,\nterminal_id_nb_tx_1day_window ,\n  ( (terminal_id_nb_tx_1day_window - avg(terminal_id_nb_tx_1day_window) over()) /  cast(stddev_pop(terminal_id_nb_tx_1day_window) over() as dec(14,2)) ) s_terminal_id_nb_tx_1day_window,\nterminal_id_risk_1day_window  ,\n  ( (terminal_id_risk_1day_window - avg(terminal_id_risk_1day_window) over()) /  cast(stddev_pop(terminal_id_risk_1day_window) over() as dec(14,2)) ) s_terminal_id_risk_1day_window,\nterminal_id_nb_tx_7day_window ,\n  ( (terminal_id_nb_tx_7day_window - avg(terminal_id_nb_tx_7day_window) over()) /  cast(stddev_pop(terminal_id_nb_tx_7day_window) over() as dec(14,2)) ) s_terminal_id_nb_tx_7day_window,\nterminal_id_risk_7day_window  ,\n  ( (terminal_id_risk_7day_window - avg(terminal_id_risk_7day_window) over()) /  cast(stddev_pop(terminal_id_risk_7day_window) over() as dec(14,2)) ) s_terminal_id_risk_7day_window,\nterminal_id_nb_tx_30day_window  ,\n  ( (terminal_id_nb_tx_30day_window - avg(terminal_id_nb_tx_30day_window) over()) /  cast(stddev_pop(terminal_id_nb_tx_30day_window) over() as dec(14,2)) ) s_terminal_id_nb_tx_30day_window,\nterminal_id_risk_30day_window ,\n  ( (terminal_id_risk_30day_window - avg(terminal_id_risk_30day_window) over()) /  cast(stddev_pop(terminal_id_risk_30day_window) over() as dec(14,2)) ) s_terminal_id_risk_30day_window\nfrom\nchapter10_xgboost.cust_payment_tx_history;\n```", "```py\nSELECT * from chapter10_XGBoost.credit_payment_tx_history_scaled limit 10;\n```", "```py\ndrop model chapter10_XGBoost.cust_cc_txn_fd_xg;\n create model chapter10_xgboost.cust_cc_txn_fd_xg\nfrom (\nselect\n  s_tx_amount,\ntx_fraud,\n…\n  from chapter10_xgboost.payment_tx_history_scaled\n  where cast(tx_datetime as date) between '2022-06-01' and '2022-09-30'\n)\ntarget tx_fraud\nfunction fn_customer_cc_fd_xg\niam_role default\nauto off\nmodel_type xgboost\nobjective 'binary:logistic'\npreprocessors 'none'\nhyperparameters default except (num_round '100')\nsettings (\n  s3_bucket '<<your-s3-bucket>>',\n            s3_garbage_collect off,\n            max_runtime 1500\n                   );\n```", "```py\nSHOW MODEL  chapter10_XGBoost.cust_cc_txn_fd_xg;\n```", "```py\nselect\ntx_fraud ,\nfn_customer_cc_fd_xg(\ns_tx_amount,\ntx_during_weekend_ind,\ntx_during_weekday_ind,\ntx_during_night_ind,\ntx_during_day_ind,\ns_customer_id_nb_tx_1day_window,\ns_customer_id_avg_amount_1day_window,\ns_customer_id_nb_tx_7day_window,\ns_customer_id_avg_amount_7day_window,\ns_customer_id_nb_tx_30day_window,\ns_customer_id_avg_amount_30day_window,\ns_terminal_id_nb_tx_1day_window,\ns_terminal_id_risk_1day_window,\ns_terminal_id_nb_tx_7day_window,\ns_terminal_id_risk_7day_window,\ns_terminal_id_nb_tx_30day_window,\ns_terminal_id_risk_30day_window)\nfrom chapter10_xgboost.credit_payment_tx_history_scaled\nwhere cast(tx_datetime as date) >= '2022-10-01'\n;\n```", "```py\n--drop view if exists chapter10_xgboost.fraud_tx_conf_matrix;\ncreate or replace view chapter10_xgboost.fraud_tx_conf_matrix\nas\nselect\ntransaction_id,tx_datetime,customer_id,tx_amount,terminal_id, tx_fraud,\n  fn_customer_cc_fd_xg(\n  s_tx_amount,\ntx_during_weekend_ind,\ntx_during_weekday_ind,\ntx_during_night_ind,\ntx_during_day_ind,\ns_customer_id_nb_tx_1day_window,\ns_customer_id_avg_amount_1day_window,\ns_customer_id_nb_tx_7day_window,\ns_customer_id_avg_amount_7day_window,\ns_customer_id_nb_tx_30day_window,\ns_customer_id_avg_amount_30day_window,\ns_terminal_id_nb_tx_1day_window,\ns_terminal_id_risk_1day_window,\ns_terminal_id_nb_tx_7day_window,\ns_terminal_id_risk_7day_window,\ns_terminal_id_nb_tx_30day_window,\ns_terminal_id_risk_30day_window)\nas prediction,\ncase when tx_fraud  =1 and prediction = 1 then 1 else 0 end truepositives,\ncase when tx_fraud =0 and prediction = 0 then 1 else 0 end truenegatives,\ncase when tx_fraud =0 and prediction = 1 then 1 else 0 end falsepositives,\ncase when tx_fraud =1 and prediction = 0 then 1 else 0 end falsenegatives\n  from chapter10_xgboost.credit_payment_tx_history_scaled\n  where cast(tx_datetime as date) >= '2022-10-01';\n```", "```py\nselect\nsum(truepositives+truenegatives)*1.00/(count(*)*1.00) as accuracy,--accuracy of the model,\nsum(falsepositives+falsenegatives)*1.00/count(*)*1.00 as error_rate, --how often model is wrong,\nsum(truepositives)*1.00/sum (truepositives+falsenegatives) *1.00 as tpr, --or recall how often corrects are rights,\nsum(falsepositives)*1.00/sum (falsepositives+truenegatives )*1.00 fpr, --or fall-out how often model said yes when it is no,\nsum(truenegatives)*1.00/sum (falsepositives+truenegatives)*1.00 tnr, --or specificity, how often model said no when it is yes,\nsum(truepositives)*1.00 / (sum (truepositives+falsepositives)*1.00) as precision, -- when said yes how it is correct,\n2*((tpr*precision)/ (tpr+precision) ) as f_score --weighted avg of tpr & fpr\nfrom chapter10_xgboost.fraud_tx_conf_matrix\n;\n```", "```py\nselect tx_fraud,prediction, count(*)\nfrom chapter10_xgboost.fraud_tx_conf_matrix\ngroup by tx_fraud,prediction;\n```"]